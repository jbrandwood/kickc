(label) @1
(label) @2
(label) @3
(label) @4
(label) @5
(label) @begin
(label) @end
(const nomodify byte*) BGCOL1 = (byte*) 53281
(const nomodify byte*) BGCOL2 = (byte*) 53282
(const nomodify byte*) BGCOL3 = (byte*) 53283
(const nomodify byte*) BGCOL4 = (byte*) 53284
(const nomodify byte) BLACK = (byte) 0
(const nomodify byte) BLUE = (byte) 6
(const nomodify byte*) BORDERCOL = (byte*) 53280
(const nomodify byte*) CIA1_INTERRUPT = (byte*) 56333
(const nomodify byte*) CIA1_PORT_A = (byte*) 56320
(const nomodify byte*) CIA1_PORT_B = (byte*) 56321
(const nomodify byte*) CIA2_PORT_A = (byte*) 56576
(const nomodify byte*) CIA2_PORT_A_DDR = (byte*) 56578
(const nomodify byte) CIA_INTERRUPT_CLEAR = (byte) $7f
(const nomodify byte) COLLISION_BOTTOM = (byte) 2
(const nomodify byte) COLLISION_LEFT = (byte) 4
(const nomodify byte) COLLISION_NONE = (byte) 0
(const nomodify byte) COLLISION_PLAYFIELD = (byte) 1
(const nomodify byte) COLLISION_RIGHT = (byte) 8
(const nomodify byte*) COLS = (byte*) 55296
(const nomodify byte) CYAN = (byte) 3
(const nomodify byte*) D011 = (byte*) 53265
(const nomodify byte*) D018 = (byte*) 53272
(const nomodify byte) DARK_GREY = (byte) $b
(const nomodify byte) GREEN = (byte) 5
(const nomodify byte) GREY = (byte) $c
(const nomodify void()**) HARDWARE_IRQ = (void()**) 65534
(const nomodify byte*) IRQ_ENABLE = (byte*) 53274
(const nomodify byte) IRQ_RASTER = (byte) 1
(const nomodify byte) IRQ_RASTER_FIRST = (const nomodify byte) SPRITES_FIRST_YPOS+(byte) $13
(const nomodify byte*) IRQ_STATUS = (byte*) 53273
(const nomodify byte) KEY_COMMA = (byte) $2f
(const nomodify byte) KEY_COMMODORE = (byte) $3d
(const nomodify byte) KEY_CTRL = (byte) $3a
(const nomodify byte) KEY_DOT = (byte) $2c
(const nomodify byte) KEY_LSHIFT = (byte) $f
(const nomodify byte) KEY_RSHIFT = (byte) $34
(const nomodify byte) KEY_SPACE = (byte) $3c
(const nomodify byte) KEY_X = (byte) $17
(const nomodify byte) KEY_Z = (byte) $c
(const nomodify byte) LIGHT_BLUE = (byte) $e
(const nomodify byte) LIGHT_GREEN = (byte) $d
(const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS[]  = { (byte) $30, (byte) $2b, (byte) $26, (byte) $21, (byte) $1c, (byte) $17, (byte) $12, (byte) $d, (byte) 8, (byte) 6, (byte) 5, (byte) 5, (byte) 5, (byte) 4, (byte) 4, (byte) 4, (byte) 3, (byte) 3, (byte) 3, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 1 }
(const nomodify byte) ORANGE = (byte) 8
(const word*) PIECES[]  = { (word)(const byte*) PIECE_T, (word)(const byte*) PIECE_S, (word)(const byte*) PIECE_Z, (word)(const byte*) PIECE_J, (word)(const byte*) PIECE_O, (word)(const byte*) PIECE_I, (word)(const byte*) PIECE_L }
(const byte*) PIECES_CHARS[]  = { (byte) $65, (byte) $66, (byte) $a6, (byte) $66, (byte) $65, (byte) $65, (byte) $a6 }
(const byte*) PIECES_COLORS_1[]  = { (const nomodify byte) BLUE, (const nomodify byte) GREEN, (const nomodify byte) PURPLE, (const nomodify byte) BLUE, (const nomodify byte) RED, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) RED, (const nomodify byte) BLUE, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) RED, (const nomodify byte) BLUE, (const nomodify byte) GREEN, (const nomodify byte) PURPLE, (const nomodify byte) BLUE, (const nomodify byte) RED, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) RED, (const nomodify byte) BLUE, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) RED, (const nomodify byte) BLUE, (const nomodify byte) GREEN, (const nomodify byte) PURPLE, (const nomodify byte) BLUE, (const nomodify byte) RED, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) RED, (const nomodify byte) BLUE, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) RED }
(const byte*) PIECES_COLORS_2[]  = { (const nomodify byte) CYAN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) PINK, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) DARK_GREY, (const nomodify byte) PURPLE, (const nomodify byte) RED, (const nomodify byte) ORANGE, (const nomodify byte) CYAN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) PINK, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) DARK_GREY, (const nomodify byte) PURPLE, (const nomodify byte) RED, (const nomodify byte) ORANGE, (const nomodify byte) CYAN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) PINK, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) DARK_GREY, (const nomodify byte) PURPLE, (const nomodify byte) RED, (const nomodify byte) ORANGE }
(const byte*) PIECES_NEXT_CHARS[]  = { (byte) $63, (byte) $64, (byte) $a4, (byte) $64, (byte) $63, (byte) $63, (byte) $a4 }
(const byte*) PIECES_START_X[]  = { (byte) 4, (byte) 4, (byte) 4, (byte) 4, (byte) 4, (byte) 4, (byte) 4 }
(const byte*) PIECES_START_Y[]  = { (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1 }
(const byte*) PIECE_I[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0 }
(const byte*) PIECE_J[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) PIECE_L[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) PIECE_O[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) PIECE_S[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) PIECE_T[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) PIECE_Z[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const nomodify byte) PINK = (byte) $a
(const nomodify byte*) PLAYFIELD_CHARSET = (byte*) 10240
(const to_nomodify byte*) PLAYFIELD_COLORS_ORIGINAL[]  = kickasm {{ .import binary "playfield-screen.col"
 }}
(const nomodify byte) PLAYFIELD_COLS = (byte) $a
(const nomodify byte) PLAYFIELD_LINES = (byte) $16
(const nomodify byte*) PLAYFIELD_SCREEN_1 = (byte*) 1024
(const nomodify byte*) PLAYFIELD_SCREEN_2 = (byte*) 11264
(const to_nomodify byte*) PLAYFIELD_SCREEN_ORIGINAL[]  = kickasm {{ // Load chars for the screen
  .var screen = LoadBinary("playfield-screen.iscr")
   // Load extended colors for the screen
  .var extended = LoadBinary("playfield-extended.col")
  // screen.get(i)+1 because the charset is loaded into PLAYFIELD_CHARSET+8
  // extended.get(i)-1 because the extended colors are 1-based (1/2/3/4)
  // <<6 to move extended colors to the upper 2 bits
  .fill screen.getSize(), ( (screen.get(i)+1) | (extended.get(i)-1)<<6 )
 }}
(const nomodify byte*) PLAYFIELD_SPRITES = (byte*) 12288
(const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1 = (const nomodify byte*) PLAYFIELD_SCREEN_1+(const nomodify word) SPRITE_PTRS
(const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2 = (const nomodify byte*) PLAYFIELD_SCREEN_2+(const nomodify word) SPRITE_PTRS
(const nomodify byte*) PROCPORT = (byte*) 1
(const nomodify byte*) PROCPORT_DDR = (byte*) 0
(const nomodify byte) PROCPORT_DDR_MEMORY_MASK = (byte) 7
(const nomodify byte) PROCPORT_RAM_IO = (byte) 5
(const nomodify byte) PURPLE = (byte) 4
(const nomodify byte*) RASTER = (byte*) 53266
(const nomodify byte) RED = (byte) 2
(const to_nomodify dword*) SCORE_BASE_BCD[]  = { (dword) 0, (dword) $40, (dword) $100, (dword) $300, (dword) $1200 }
(const nomodify byte) SID_CONTROL_NOISE = (byte) $80
(const nomodify byte*) SID_VOICE3_CONTROL = (byte*) 54290
(const nomodify word*) SID_VOICE3_FREQ = (word*) 54286
(const nomodify byte*) SID_VOICE3_OSC = (byte*) 54299
(const nomodify byte*) SPRITES_COLS = (byte*) 53287
(const nomodify byte*) SPRITES_ENABLE = (byte*) 53269
(const nomodify byte*) SPRITES_EXPAND_X = (byte*) 53277
(const nomodify byte*) SPRITES_EXPAND_Y = (byte*) 53271
(const nomodify byte) SPRITES_FIRST_YPOS = (byte) $31
(const nomodify byte*) SPRITES_MC = (byte*) 53276
(const nomodify byte*) SPRITES_XPOS = (byte*) 53248
(const nomodify byte*) SPRITES_YPOS = (byte*) 53249
(const nomodify word) SPRITE_PTRS = (word) $3f8
(const nomodify byte*) VIC_CONTROL = (byte*) 53265
(const nomodify byte) VIC_DEN = (byte) $10
(const nomodify byte) VIC_ECM = (byte) $40
(const nomodify byte) VIC_RSEL = (byte) 8
(byte) current_movedown_counter
(byte) current_movedown_counter#12 current_movedown_counter zp[1]:4 26666.933333333334
(byte) current_movedown_counter#14 current_movedown_counter zp[1]:4 2732.5135135135133
(byte) current_movedown_counter#16 current_movedown_counter zp[1]:4 7777.153846153846
(const nomodify byte) current_movedown_fast = (byte) $a
(byte) current_movedown_slow
(byte) current_movedown_slow#1 current_movedown_slow zp[1]:17 4.869565217391305
(byte) current_movedown_slow#10 current_movedown_slow zp[1]:17 2.0000002E7
(byte) current_movedown_slow#14 current_movedown_slow zp[1]:17 41091.392857142855
(byte) current_movedown_slow#21 current_movedown_slow zp[1]:17 5435.243243243243
(byte) current_movedown_slow#23 current_movedown_slow zp[1]:17 442857.7142857142
(byte) current_movedown_slow#37 current_movedown_slow zp[1]:17 300003.0
(byte) current_movedown_slow#65 current_movedown_slow zp[1]:17 733333.4666666666
(byte) current_orientation
(byte) current_orientation#13 current_orientation zp[1]:22 8137.972972972973
(byte) current_orientation#17 current_orientation zp[1]:22 1004.952380952381
(byte) current_orientation#20 current_orientation zp[1]:22 16530.79591836735
(byte) current_orientation#25 current_orientation zp[1]:22 51667.33333333333
(byte) current_orientation#37 current_orientation zp[1]:22 200002.0
(byte) current_orientation#7 current_orientation zp[1]:22 150001.5
(byte*) current_piece
(byte*) current_piece#10 current_piece zp[2]:19 8138.27027027027
(byte*) current_piece#100 current_piece zp[2]:19 11.0
(byte*) current_piece#15 current_piece zp[2]:19 7706.51282051282
(byte*) current_piece#17 current_piece_1 zp[2]:10 1.1400006E7
(byte*) current_piece#28 current_piece zp[2]:19 300003.0
(byte*) current_piece#92 current_piece zp[2]:19 100001.0
(byte*) current_piece#95 current_piece_1 zp[2]:10 200002.0
(byte*) current_piece#96 current_piece_1 zp[2]:10 200002.0
(byte*) current_piece#97 current_piece_1 zp[2]:10 200002.0
(byte*) current_piece#98 current_piece_1 zp[2]:10 200002.0
(byte*) current_piece#99 current_piece_1 zp[2]:10 2000002.0
(byte) current_piece_char
(byte) current_piece_char#10 current_piece_char zp[1]:21 1.8182183847272727E8
(byte) current_piece_char#100 current_piece_char_1 zp[1]:9 202.0
(byte) current_piece_char#16 current_piece_char zp[1]:21 5437.9729729729725
(byte) current_piece_char#29 current_piece_char zp[1]:21 300003.0
(byte) current_piece_char#5 current_piece_char zp[1]:21 34375.75
(byte) current_piece_char#68 current_piece_char_1 zp[1]:9 47624.42857142857
(byte) current_piece_char#99 current_piece_char_1 zp[1]:9 22.0
(byte*) current_piece_gfx
(byte*) current_piece_gfx#111 current_piece_gfx_1 zp[2]:7 11.0
(byte*) current_piece_gfx#112 current_piece_gfx_1 zp[2]:7 101.0
(byte*) current_piece_gfx#116 current_piece_gfx zp[2]:23 200002.0
(byte*) current_piece_gfx#122 current_piece_gfx zp[2]:23 22.0
(byte*) current_piece_gfx#13 current_piece_gfx zp[2]:23 1.8182183847272727E8
(byte*) current_piece_gfx#18 current_piece_gfx zp[2]:23 1009.7619047619048
(byte*) current_piece_gfx#20 current_piece_gfx zp[2]:23 15185.37037037037
(byte*) current_piece_gfx#21 current_piece_gfx zp[2]:23 51667.33333333333
(byte*) current_piece_gfx#35 current_piece_gfx zp[2]:23 300003.0
(byte*) current_piece_gfx#64 current_piece_gfx_1 zp[2]:7 47624.42857142857
(byte*) current_piece_gfx#7 current_piece_gfx zp[2]:23 200002.0
(byte) current_xpos
(byte) current_xpos#100 current_xpos zp[1]:25 67742.74193548388
(byte) current_xpos#118 current_xpos_1 zp[1]:6 7.333333333333333
(byte) current_xpos#119 current_xpos_1 zp[1]:6 67.33333333333333
(byte) current_xpos#14 current_xpos zp[1]:25 1.8187293036363635E7
(byte) current_xpos#19 current_xpos zp[1]:25 1009.7619047619048
(byte) current_xpos#22 current_xpos zp[1]:25 36400.4
(byte) current_xpos#26 current_xpos zp[1]:25 20333.566666666666
(byte) current_xpos#43 current_xpos zp[1]:25 300003.0
(byte) current_xpos#59 current_xpos_1 zp[1]:6 4767.285714285714
(byte) current_xpos#6 current_xpos zp[1]:25 200002.0
(byte) current_xpos#8 current_xpos zp[1]:25 200002.0
(byte) current_ypos
(byte) current_ypos#11 current_ypos zp[1]:13 35165.32432432432
(byte) current_ypos#13 reg byte x 1113.0
(byte) current_ypos#19 current_ypos zp[1]:13 6425.74358974359
(byte) current_ypos#3 current_ypos zp[1]:13 200002.0
(byte) current_ypos#38 current_ypos zp[1]:13 300003.0
(byte) current_ypos#6 current_ypos zp[1]:13 70000.83333333334
(byte) current_ypos#97 reg byte x 5.5
(byte) current_ypos#98 reg byte x 40.4
(byte) game_over
(byte) game_over#10 game_over zp[1]:27 6567.760869565218
(byte) game_over#15 game_over zp[1]:27 5705.54054054054
(byte) game_over#27 game_over zp[1]:27 300003.0
(byte) game_over#52 game_over zp[1]:27 47827.13043478261
(byte) game_over#65 game_over zp[1]:27 78572.35714285714
(volatile byte) irq_cnt loadstore zp[1]:46 0.48000000000000004
(volatile byte) irq_raster_next loadstore zp[1]:43 0.44444444444444453
(volatile byte) irq_sprite_ptr loadstore zp[1]:45 0.45161290322580644
(volatile byte) irq_sprite_ypos loadstore zp[1]:44 0.48275862068965525
(byte()) keyboard_event_get()
(label) keyboard_event_get::@1
(label) keyboard_event_get::@return
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#1 reg byte a 20002.0
(byte) keyboard_event_get::return#2 reg byte a 3667.333333333333
(byte) keyboard_event_get::return#3 reg byte a 2002.0
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0 reg byte y 2000002.0
(byte~) keyboard_event_pressed::$1 reg byte x 2000002.0
(label) keyboard_event_pressed::@return
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#5 reg byte x 666667.3333333334
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0 reg byte a 20002.0
(byte) keyboard_event_pressed::return#1 reg byte a 20002.0
(byte) keyboard_event_pressed::return#10 reg byte a 20002.0
(byte) keyboard_event_pressed::return#11 reg byte a 162858.0
(byte) keyboard_event_pressed::return#12 reg byte a 200002.0
(byte) keyboard_event_pressed::return#2 reg byte a 20002.0
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0 reg byte y 1000001.0
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0 reg byte a 20002.0
(byte~) keyboard_event_scan::$15 reg byte a 2.00000002E8
(byte~) keyboard_event_scan::$16 reg byte a 2.00000002E8
(byte~) keyboard_event_scan::$23 reg byte a 2.00000002E8
(byte~) keyboard_event_scan::$3 reg byte a 20002.0
(byte~) keyboard_event_scan::$6 reg byte a 20002.0
(byte~) keyboard_event_scan::$9 reg byte a 20002.0
(label) keyboard_event_scan::@1
(label) keyboard_event_scan::@10
(label) keyboard_event_scan::@11
(label) keyboard_event_scan::@12
(label) keyboard_event_scan::@13
(label) keyboard_event_scan::@14
(label) keyboard_event_scan::@15
(label) keyboard_event_scan::@16
(label) keyboard_event_scan::@17
(label) keyboard_event_scan::@18
(label) keyboard_event_scan::@19
(label) keyboard_event_scan::@2
(label) keyboard_event_scan::@20
(label) keyboard_event_scan::@21
(label) keyboard_event_scan::@22
(label) keyboard_event_scan::@23
(label) keyboard_event_scan::@3
(label) keyboard_event_scan::@4
(label) keyboard_event_scan::@5
(label) keyboard_event_scan::@6
(label) keyboard_event_scan::@7
(label) keyboard_event_scan::@8
(label) keyboard_event_scan::@9
(label) keyboard_event_scan::@return
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#1 reg byte x 1.500000015E8
(byte) keyboard_event_scan::col#2 reg byte x 2.857142885714286E7
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0 reg byte a 2.00000002E8
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#1 keycode zp[1]:31 2.0000002E7
(byte) keyboard_event_scan::keycode#10 keycode zp[1]:31 3.153846192307692E7
(byte) keyboard_event_scan::keycode#11 keycode zp[1]:31 5000000.5
(byte) keyboard_event_scan::keycode#13 keycode zp[1]:31 1.0000001E7
(byte) keyboard_event_scan::keycode#14 keycode zp[1]:31 5.250000075E7
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#1 row zp[1]:30 1.50000015E7
(byte) keyboard_event_scan::row#2 row zp[1]:30 6000000.24
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0 row_scan zp[1]:60 1.2777778055555556E7
(const byte*) keyboard_events[(number) 8]  = { fill( 8, 0) }
(byte) keyboard_events_size
(byte) keyboard_events_size#1 keyboard_events_size zp[1]:32 2.00000002E8
(byte) keyboard_events_size#10 keyboard_events_size zp[1]:32 8.100000089999999E7
(byte) keyboard_events_size#13 keyboard_events_size zp[1]:32 968709.870967742
(byte) keyboard_events_size#16 keyboard_events_size zp[1]:32 811.6923076923076
(byte) keyboard_events_size#19 keyboard_events_size zp[1]:32 1850.5
(byte) keyboard_events_size#2 keyboard_events_size zp[1]:32 2.00000002E8
(byte) keyboard_events_size#29 keyboard_events_size zp[1]:32 1.020000012E8
(byte) keyboard_events_size#30 keyboard_events_size zp[1]:32 4287143.428571429
(byte) keyboard_events_size#4 keyboard_events_size zp[1]:32 15001.5
(const byte*) keyboard_matrix_col_bitmask[(number) 8]  = { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 reg byte a 3.6666667333333336E7
(byte) keyboard_matrix_read::return#2 reg byte a 2.0000002E7
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 reg byte x 1.10000002E8
(const byte*) keyboard_matrix_row_bitmask[(number) 8]  = { (byte) $fe, (byte) $fd, (byte) $fb, (byte) $f7, (byte) $ef, (byte) $df, (byte) $bf, (byte) $7f }
(byte) keyboard_modifiers
(const byte*) keyboard_scan_values[(number) 8]  = { fill( 8, 0) }
(byte) level
(byte) level#10 level zp[1]:16 185168.31818181818
(byte) level#17 level zp[1]:16 5435.243243243243
(byte) level#19 level zp[1]:16 442857.7142857142
(byte) level#21 level zp[1]:16 1722222.4444444445
(byte) level#33 level zp[1]:16 300003.0
(byte) level_bcd
(byte) level_bcd#11 level_bcd zp[1]:18 200018.1475409836
(byte) level_bcd#17 level_bcd zp[1]:18 3425.508474576271
(byte) level_bcd#19 level_bcd zp[1]:18 442857.7142857142
(byte) level_bcd#21 level_bcd zp[1]:18 1.3333334666666666E7
(byte) level_bcd#31 level_bcd zp[1]:18 300003.0
(byte) level_bcd#62 level_bcd zp[1]:18 2100000.3
(byte) level_bcd#8 level_bcd zp[1]:18 2.0000002E7
(word) lines_bcd
(word) lines_bcd#15 lines_bcd zp[2]:14 3442.4745762711864
(word) lines_bcd#17 lines_bcd zp[2]:14 442857.7142857142
(word) lines_bcd#19 lines_bcd zp[2]:14 64022.14
(word) lines_bcd#26 lines_bcd zp[2]:14 300003.0
(word) lines_bcd#29 lines_bcd zp[2]:14 500000.5
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@19
(label) main::@2
(label) main::@20
(label) main::@21
(label) main::@22
(label) main::@23
(label) main::@24
(label) main::@25
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(byte) main::key_event
(byte) main::key_event#0 reg byte x 1001.0
(byte) main::render
(byte) main::render#1 reg byte a 2002.0
(byte) next_piece_idx
(byte) next_piece_idx#10 next_piece_idx zp[1]:26 6546.0
(byte) next_piece_idx#12 reg byte y 422.79999999999995
(byte) next_piece_idx#16 next_piece_idx zp[1]:26 5437.9729729729725
(byte) next_piece_idx#17 next_piece_idx zp[1]:26 1100013.0
(byte) next_piece_idx#30 next_piece_idx zp[1]:26 300003.0
(byte) next_piece_idx#76 reg byte y 22.0
(byte) next_piece_idx#77 reg byte y 202.0
(byte()) play_collision((byte) play_collision::xpos , (byte) play_collision::ypos , (byte) play_collision::orientation)
(byte~) play_collision::$14 reg byte a 2.0000000002E10
(byte~) play_collision::$5 reg byte a 2.00000000002E11
(label) play_collision::@1
(label) play_collision::@10
(label) play_collision::@2
(label) play_collision::@3
(label) play_collision::@4
(label) play_collision::@5
(label) play_collision::@6
(label) play_collision::@7
(label) play_collision::@8
(label) play_collision::@9
(label) play_collision::@return
(byte) play_collision::c
(byte) play_collision::c#1 reg byte x 1.00000000001E11
(byte) play_collision::c#2 reg byte x 2.2222222222444443E10
(byte) play_collision::i
(byte) play_collision::i#1 i zp[1]:59 1.6153846154076923E10
(byte) play_collision::i#10 i_1 zp[1]:31 2.0000000002E10
(byte) play_collision::i#12 i_1 zp[1]:31 2.00000000002E11
(byte) play_collision::i#2 i_1 zp[1]:31 1.55000000002E11
(byte) play_collision::i#3 i_1 zp[1]:31 5.0000000005E9
(byte) play_collision::l
(byte) play_collision::l#1 l zp[1]:30 1.0000000001E10
(byte) play_collision::l#6 l zp[1]:30 1.1764705883529413E9
(byte) play_collision::orientation
(byte) play_collision::orientation#0 reg byte x 100001.0
(byte) play_collision::orientation#1 reg byte x 100001.0
(byte) play_collision::orientation#2 reg byte x 100001.0
(byte) play_collision::orientation#3 reg byte x 100001.0
(byte) play_collision::orientation#5 reg byte x 1.0400005E7
(byte*) play_collision::piece_gfx
(byte*) play_collision::piece_gfx#0 piece_gfx zp[2]:10 4.762380952476191E9
(byte*) play_collision::playfield_line
(byte*) play_collision::playfield_line#0 playfield_line zp[2]:50 7.857142857285714E9
(byte) play_collision::return
(byte) play_collision::return#0 reg byte a 200002.0
(byte) play_collision::return#1 reg byte a 200002.0
(byte) play_collision::return#10 reg byte a 2000002.0
(byte) play_collision::return#13 reg byte a 200002.0
(byte) play_collision::return#14 reg byte a 200002.0
(byte) play_collision::return#15 reg byte a 200000.7142857143
(byte) play_collision::xp
(byte) play_collision::xp#1 xp zp[1]:60 5.00000000005E10
(byte) play_collision::xp#2 xp zp[1]:60 6.375000000075E10
(byte) play_collision::xp#8 xp zp[1]:60 2.0000000002E10
(byte) play_collision::xpos
(byte) play_collision::xpos#0 xpos zp[1]:28 66667.33333333333
(byte) play_collision::xpos#1 xpos zp[1]:28 50000.5
(byte) play_collision::xpos#2 xpos zp[1]:28 50000.5
(byte) play_collision::xpos#3 xpos zp[1]:28 50000.5
(byte) play_collision::xpos#4 xpos zp[1]:28 666667.3333333334
(byte) play_collision::xpos#6 xpos zp[1]:28 4.546090911818181E8
(byte) play_collision::yp
(byte) play_collision::yp#0 yp zp[1]:29 5700003.0
(byte) play_collision::yp#1 yp zp[1]:29 5.0000000005E9
(byte) play_collision::yp#2 yp zp[1]:29 8.1256250003125E9
(byte) play_collision::ypos
(byte) play_collision::ypos#0 ypos zp[1]:29 50000.5
(byte) play_collision::ypos#1 ypos zp[1]:29 66667.33333333333
(byte) play_collision::ypos#2 ypos zp[1]:29 66667.33333333333
(byte) play_collision::ypos#3 ypos zp[1]:29 66667.33333333333
(byte) play_collision::ypos#4 ypos zp[1]:29 1000001.0
(void()) play_increase_level()
(byte~) play_increase_level::$1 reg byte a 2.0000002E7
(byte~) play_increase_level::$5 reg byte a 4.0000000004E10
(label) play_increase_level::@1
(label) play_increase_level::@2
(label) play_increase_level::@3
(label) play_increase_level::@4
(label) play_increase_level::@5
(label) play_increase_level::@6
(label) play_increase_level::@return
(byte) play_increase_level::b
(byte) play_increase_level::b#1 reg byte x 1.50000000015E10
(byte) play_increase_level::b#2 reg byte x 1.0000000001E10
(void()) play_init()
(byte~) play_init::$2 reg byte x 2002.0
(byte~) play_init::$3 reg byte a 3003.0
(label) play_init::@1
(label) play_init::@2
(label) play_init::@3
(label) play_init::@return
(byte) play_init::b
(byte) play_init::b#1 reg byte x 1501.5
(byte) play_init::b#2 reg byte x 1001.0
(byte) play_init::idx
(byte) play_init::idx#1 idx zp[1]:33 667.3333333333334
(byte) play_init::idx#2 idx zp[1]:33 600.5999999999999
(byte) play_init::j
(byte) play_init::j#1 reg byte y 1501.5
(byte) play_init::j#2 reg byte y 667.3333333333334
(byte*) play_init::pli
(byte*) play_init::pli#1 pli zp[2]:34 500.5
(byte*) play_init::pli#2 pli zp[2]:34 750.75
(void()) play_lock_current()
(byte~) play_lock_current::$4 reg byte a 2.000000002E9
(label) play_lock_current::@1
(label) play_lock_current::@2
(label) play_lock_current::@3
(label) play_lock_current::@4
(label) play_lock_current::@5
(label) play_lock_current::@6
(label) play_lock_current::@7
(label) play_lock_current::@return
(byte) play_lock_current::c
(byte) play_lock_current::c#1 reg byte x 1.0000000001E10
(byte) play_lock_current::c#2 reg byte x 4.0000000004E9
(byte) play_lock_current::i
(byte) play_lock_current::i#1 i zp[1]:59 2.333333333666667E9
(byte) play_lock_current::i#2 i_1 zp[1]:30 1.5500000002E10
(byte) play_lock_current::i#3 i_1 zp[1]:30 5.000000005E8
(byte) play_lock_current::i#7 i_1 zp[1]:30 2.000000002E9
(byte) play_lock_current::i#9 i_1 zp[1]:30 2.0000000002E10
(byte) play_lock_current::l
(byte) play_lock_current::l#1 l zp[1]:60 1.000000001E9
(byte) play_lock_current::l#6 l zp[1]:60 1.53846154E8
(byte*) play_lock_current::playfield_line
(byte*) play_lock_current::playfield_line#0 playfield_line zp[2]:57 1.1000000002E9
(byte) play_lock_current::xp
(byte) play_lock_current::xp#0 xp zp[1]:31 2.000000002E9
(byte) play_lock_current::xp#1 xp zp[1]:31 5.0000000005E9
(byte) play_lock_current::xp#2 xp zp[1]:31 7.750000001E9
(byte) play_lock_current::yp
(byte) play_lock_current::yp#0 yp zp[1]:13 2000002.0
(byte) play_lock_current::yp#1 yp zp[1]:13 5.000000005E8
(byte) play_lock_current::yp#2 yp zp[1]:13 2.500833336666667E8
(byte()) play_move_down((byte) play_move_down::key_event)
(byte~) play_move_down::$12 reg byte a 200002.0
(byte~) play_move_down::$2 reg byte a 200002.0
(label) play_move_down::@1
(label) play_move_down::@10
(label) play_move_down::@11
(label) play_move_down::@12
(label) play_move_down::@13
(label) play_move_down::@14
(label) play_move_down::@15
(label) play_move_down::@16
(label) play_move_down::@17
(label) play_move_down::@2
(label) play_move_down::@3
(label) play_move_down::@4
(label) play_move_down::@5
(label) play_move_down::@6
(label) play_move_down::@7
(label) play_move_down::@8
(label) play_move_down::@9
(label) play_move_down::@return
(byte) play_move_down::key_event
(byte) play_move_down::key_event#0 reg byte a 55001.0
(byte) play_move_down::movedown
(byte) play_move_down::movedown#10 movedown zp[1]:12 50000.5
(byte) play_move_down::movedown#2 movedown zp[1]:12 200002.0
(byte) play_move_down::movedown#3 movedown zp[1]:12 200002.0
(byte) play_move_down::movedown#6 movedown zp[1]:12 300003.0
(byte) play_move_down::movedown#7 movedown zp[1]:12 250002.5
(byte) play_move_down::removed
(byte) play_move_down::removed#0 reg byte a 200002.0
(byte) play_move_down::return
(byte) play_move_down::return#0 reg byte a 20002.0
(byte) play_move_down::return#3 reg byte x 3333.6666666666665
(byte()) play_move_leftright((byte) play_move_leftright::key_event)
(byte~) play_move_leftright::$4 reg byte a 200002.0
(byte~) play_move_leftright::$8 reg byte a 200002.0
(label) play_move_leftright::@1
(label) play_move_leftright::@2
(label) play_move_leftright::@3
(label) play_move_leftright::@4
(label) play_move_leftright::@5
(label) play_move_leftright::@6
(label) play_move_leftright::@7
(label) play_move_leftright::@return
(byte) play_move_leftright::key_event
(byte) play_move_leftright::key_event#0 reg byte a 105001.5
(byte) play_move_leftright::return
(byte) play_move_leftright::return#0 reg byte a 20002.0
(byte) play_move_leftright::return#2 reg byte a 3333.6666666666665
(byte()) play_move_rotate((byte) play_move_rotate::key_event)
(byte~) play_move_rotate::$2 reg byte a 200002.0
(byte~) play_move_rotate::$5 reg byte x 200002.0
(byte~) play_move_rotate::$7 reg byte a 200002.0
(label) play_move_rotate::@1
(label) play_move_rotate::@2
(label) play_move_rotate::@3
(label) play_move_rotate::@4
(label) play_move_rotate::@5
(label) play_move_rotate::@6
(label) play_move_rotate::@return
(byte) play_move_rotate::key_event
(byte) play_move_rotate::key_event#0 reg byte a 105001.5
(byte) play_move_rotate::orientation
(byte) play_move_rotate::orientation#1 orientation zp[1]:12 200002.0
(byte) play_move_rotate::orientation#2 orientation zp[1]:12 200002.0
(byte) play_move_rotate::orientation#3 orientation zp[1]:12 44444.88888888889
(byte) play_move_rotate::return
(byte) play_move_rotate::return#0 reg byte a 20002.0
(byte) play_move_rotate::return#2 reg byte a 3333.6666666666665
(byte()) play_movement((byte) play_movement::key_event)
(byte~) play_movement::$3 reg byte a 20002.0
(byte~) play_movement::$4 reg byte a 20002.0
(label) play_movement::@1
(label) play_movement::@2
(label) play_movement::@3
(label) play_movement::@4
(label) play_movement::@return
(byte) play_movement::key_event
(byte) play_movement::key_event#0 key_event zp[1]:47 2818.5454545454545
(byte) play_movement::render
(byte) play_movement::render#1 render zp[1]:33 5000.5
(byte) play_movement::render#2 render zp[1]:33 4000.4
(byte) play_movement::return
(byte) play_movement::return#0 return zp[1]:33 20002.0
(byte) play_movement::return#2 return zp[1]:33 7001.0
(byte) play_movement::return#3 reg byte a 2002.0
(byte()) play_remove_lines()
(label) play_remove_lines::@1
(label) play_remove_lines::@2
(label) play_remove_lines::@3
(label) play_remove_lines::@4
(label) play_remove_lines::@5
(label) play_remove_lines::@6
(label) play_remove_lines::@7
(label) play_remove_lines::@8
(label) play_remove_lines::@9
(label) play_remove_lines::@return
(byte) play_remove_lines::c
(byte) play_remove_lines::c#0 c zp[1]:59 6.0000000006E9
(byte) play_remove_lines::full
(byte) play_remove_lines::full#2 full zp[1]:31 4.2000000006E9
(byte) play_remove_lines::full#4 full zp[1]:31 4.0000000004E9
(byte) play_remove_lines::r
(byte) play_remove_lines::r#1 reg byte y 1.5000000002142856E9
(byte) play_remove_lines::r#2 reg byte y 1.5500000002E10
(byte) play_remove_lines::r#3 reg byte y 2.000000002E9
(byte) play_remove_lines::removed
(byte) play_remove_lines::removed#1 removed zp[1]:29 2.000000002E9
(byte) play_remove_lines::removed#11 removed zp[1]:29 2.30769231E8
(byte) play_remove_lines::removed#7 removed zp[1]:29 3.333444448888889E8
(byte) play_remove_lines::return
(byte) play_remove_lines::return#0 reg byte a 200002.0
(byte) play_remove_lines::w
(byte) play_remove_lines::w#1 reg byte x 5.500000001E9
(byte) play_remove_lines::w#11 reg byte x 1.3333333346666667E9
(byte) play_remove_lines::w#12 reg byte x 2.000000002E9
(byte) play_remove_lines::w#2 reg byte x 1.000000001E9
(byte) play_remove_lines::w#3 reg byte x 2.000000002E9
(byte) play_remove_lines::w#4 reg byte x 4.428571429142857E9
(byte) play_remove_lines::w#6 reg byte x 1.6666666683333335E9
(byte) play_remove_lines::x
(byte) play_remove_lines::x#1 x zp[1]:30 1.50000000015E10
(byte) play_remove_lines::x#2 x zp[1]:30 2.50000000025E9
(byte) play_remove_lines::y
(byte) play_remove_lines::y#1 y zp[1]:28 1.5000000015E9
(byte) play_remove_lines::y#8 y zp[1]:28 1.3333333346666667E8
(void()) play_spawn_current()
(byte~) play_spawn_current::$1 reg byte a 2000002.0
(byte~) play_spawn_current::$7 zp[1]:52 32258.09677419355
(label) play_spawn_current::@1
(label) play_spawn_current::@2
(label) play_spawn_current::@3
(label) play_spawn_current::@4
(label) play_spawn_current::@5
(label) play_spawn_current::@return
(byte) play_spawn_current::current_piece_idx
(byte) play_spawn_current::current_piece_idx#0 reg byte x 1250001.25
(byte) play_spawn_current::piece_idx
(byte) play_spawn_current::piece_idx#1 piece_idx zp[1]:26 2.000000002E9
(byte) play_spawn_current::piece_idx#2 piece_idx zp[1]:26 1.000050018E8
(label) play_spawn_current::sid_rnd1
(byte) play_spawn_current::sid_rnd1_return
(byte) play_spawn_current::sid_rnd1_return#0 reg byte a 2.000000002E9
(void()) play_update_score((byte) play_update_score::removed)
(byte~) play_update_score::$2 reg byte a 2000002.0
(byte~) play_update_score::$4 reg byte a 2000002.0
(byte~) play_update_score::$9 reg byte a 2000002.0
(label) play_update_score::@1
(label) play_update_score::@2
(label) play_update_score::@return
(dword) play_update_score::add_bcd
(dword) play_update_score::add_bcd#0 add_bcd zp[4]:53 666667.3333333334
(byte) play_update_score::lines_after
(byte) play_update_score::lines_after#0 reg byte a 2000002.0
(byte) play_update_score::lines_before
(byte) play_update_score::lines_before#0 lines_before zp[1]:52 222222.44444444444
(byte) play_update_score::removed
(byte) play_update_score::removed#0 reg byte x 442857.7142857142
(const byte*) playfield[(const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS]  = { fill( PLAYFIELD_LINES*PLAYFIELD_COLS, 0) }
(const byte**) playfield_lines[(const nomodify byte) PLAYFIELD_LINES]  = { fill( PLAYFIELD_LINES, 0) }
(const byte*) playfield_lines_idx[(const nomodify byte) PLAYFIELD_LINES+(byte) 1]  = { fill( PLAYFIELD_LINES+1, 0) }
(void()) render_bcd((byte*) render_bcd::screen , (word) render_bcd::offset , (byte) render_bcd::bcd , (byte) render_bcd::only_low)
(byte~) render_bcd::$3 reg byte a 20002.0
(byte~) render_bcd::$4 reg byte a 20002.0
(byte~) render_bcd::$5 reg byte a 20002.0
(byte~) render_bcd::$6 reg byte a 20002.0
(label) render_bcd::@1
(label) render_bcd::@2
(label) render_bcd::@return
(const nomodify byte) render_bcd::ZERO_CHAR = (byte) $35
(byte) render_bcd::bcd
(byte) render_bcd::bcd#0 reg byte x 2002.0
(byte) render_bcd::bcd#1 reg byte x 2002.0
(byte) render_bcd::bcd#2 reg byte x 2002.0
(byte) render_bcd::bcd#3 reg byte x 1001.0
(byte) render_bcd::bcd#4 reg byte x 1001.0
(byte) render_bcd::bcd#5 reg byte x 2002.0
(byte) render_bcd::bcd#6 reg byte x 3251.0
(word) render_bcd::offset
(word) render_bcd::offset#6 offset zp[2]:10 10001.0
(byte) render_bcd::only_low
(byte) render_bcd::only_low#6 reg byte y 5000.5
(byte*) render_bcd::screen
(byte*) render_bcd::screen#0 screen zp[2]:7 1001.0
(byte*) render_bcd::screen#1 screen zp[2]:7 1001.0
(byte*) render_bcd::screen#2 screen zp[2]:7 1001.0
(byte*) render_bcd::screen#3 screen zp[2]:7 2002.0
(byte*) render_bcd::screen#4 screen zp[2]:7 2002.0
(byte*) render_bcd::screen#5 screen zp[2]:7 1001.0
(byte*) render_bcd::screen#6 screen zp[2]:7 16007.0
(byte*) render_bcd::screen_pos
(byte*) render_bcd::screen_pos#0 screen_pos zp[2]:10 8000.8
(byte*) render_bcd::screen_pos#2 screen_pos zp[2]:10 20002.0
(byte*) render_bcd::screen_pos#3 screen_pos zp[2]:10 10001.0
(void()) render_init()
(byte~) render_init::$5 reg byte x 1501.5
(label) render_init::@1
(label) render_init::@2
(label) render_init::@3
(label) render_init::@return
(byte) render_init::i
(byte) render_init::i#1 reg byte y 1501.5
(byte) render_init::i#2 reg byte y 500.5
(byte*) render_init::li_1
(byte*) render_init::li_1#1 li_1 zp[2]:34 500.5
(byte*) render_init::li_1#2 li_1 zp[2]:34 750.75
(byte*) render_init::li_2
(byte*) render_init::li_2#1 li_2 zp[2]:48 667.3333333333334
(byte*) render_init::li_2#2 li_2 zp[2]:48 600.5999999999999
(label) render_init::vicSelectGfxBank1
(label) render_init::vicSelectGfxBank1_@1
(byte*) render_init::vicSelectGfxBank1_gfx
(label) render_init::vicSelectGfxBank1_toDd001
(byte*) render_init::vicSelectGfxBank1_toDd001_gfx
(byte) render_init::vicSelectGfxBank1_toDd001_return
(const byte) render_init::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = (byte) 3
(void()) render_moving()
(byte~) render_moving::$1 reg byte a 200002.0
(byte~) render_moving::$6 reg byte a 200002.0
(label) render_moving::@1
(label) render_moving::@2
(label) render_moving::@3
(label) render_moving::@4
(label) render_moving::@5
(label) render_moving::@6
(label) render_moving::@7
(label) render_moving::@return
(byte) render_moving::c
(byte) render_moving::c#1 reg byte x 1500001.5
(byte) render_moving::c#2 reg byte x 333333.6666666667
(byte) render_moving::current_cell
(byte) render_moving::current_cell#0 reg byte a 1000001.0
(byte) render_moving::i
(byte) render_moving::i#1 i zp[1]:29 200002.0
(byte) render_moving::i#2 i zp[1]:29 500000.5
(byte) render_moving::i#3 i zp[1]:29 50000.5
(byte) render_moving::i#4 i zp[1]:29 1550002.0
(byte) render_moving::i#8 i zp[1]:29 300000.75
(byte) render_moving::l
(byte) render_moving::l#1 l zp[1]:28 150001.5
(byte) render_moving::l#4 l zp[1]:28 11764.823529411764
(byte*) render_moving::screen_line
(byte*) render_moving::screen_line#0 screen_line zp[2]:48 110000.20000000001
(byte) render_moving::xpos
(byte) render_moving::xpos#0 xpos zp[1]:33 200002.0
(byte) render_moving::xpos#1 xpos zp[1]:33 666667.3333333334
(byte) render_moving::xpos#2 xpos zp[1]:33 620000.8
(byte) render_moving::ypos
(byte) render_moving::ypos#0 ypos zp[1]:12 2002.0
(byte) render_moving::ypos#1 ypos zp[1]:12 66667.33333333333
(byte) render_moving::ypos#2 ypos zp[1]:12 25062.8125
(void()) render_next()
(byte~) render_next::$6 reg byte x 500.5
(label) render_next::@1
(label) render_next::@2
(label) render_next::@3
(label) render_next::@4
(label) render_next::@5
(label) render_next::@6
(label) render_next::@7
(label) render_next::@8
(label) render_next::@return
(byte) render_next::c
(byte) render_next::c#1 reg byte x 1500001.5
(byte) render_next::c#2 reg byte x 285714.5714285714
(byte) render_next::cell
(byte) render_next::cell#0 reg byte a 1000001.0
(byte) render_next::l
(byte) render_next::l#1 l zp[1]:5 150001.5
(byte) render_next::l#7 l zp[1]:5 18182.0
(const word) render_next::next_area_offset = (word)(number) $28*(number) $c+(number) $18+(number) 4
(byte) render_next::next_piece_char
(byte) render_next::next_piece_char#0 next_piece_char zp[1]:59 66733.46666666667
(byte*) render_next::next_piece_gfx
(byte*) render_next::next_piece_gfx#1 next_piece_gfx zp[2]:7 210000.30000000002
(byte*) render_next::next_piece_gfx#2 next_piece_gfx zp[2]:7 1550002.0
(byte*) render_next::next_piece_gfx#3 next_piece_gfx zp[2]:7 201003.0
(byte*) render_next::next_piece_gfx#8 next_piece_gfx zp[2]:7 2002.0
(byte*) render_next::screen_next_area
(byte*) render_next::screen_next_area#10 screen_next_area zp[2]:10 201003.0
(byte*) render_next::screen_next_area#11 screen_next_area zp[2]:10 250.25
(byte*) render_next::screen_next_area#3 screen_next_area zp[2]:10 700001.0
(byte*) render_next::screen_next_area#4 screen_next_area zp[2]:10 66667.33333333333
(byte*) render_next::screen_next_area#5 screen_next_area zp[2]:10 683334.1666666667
(void()) render_playfield()
(byte~) render_playfield::$0 reg byte a 200002.0
(byte~) render_playfield::$3 reg byte a 200002.0
(label) render_playfield::@1
(label) render_playfield::@2
(label) render_playfield::@3
(label) render_playfield::@return
(byte) render_playfield::c
(byte) render_playfield::c#1 c zp[1]:29 1500001.5
(byte) render_playfield::c#2 c zp[1]:29 500000.5
(byte) render_playfield::i
(byte) render_playfield::i#1 i zp[1]:28 420000.60000000003
(byte) render_playfield::i#2 i zp[1]:28 1033334.6666666667
(byte) render_playfield::i#3 i zp[1]:28 50000.5
(byte) render_playfield::l
(byte) render_playfield::l#1 l zp[1]:12 150001.5
(byte) render_playfield::l#2 l zp[1]:12 30000.300000000003
(byte*) render_playfield::screen_line
(byte*) render_playfield::screen_line#0 screen_line zp[2]:10 200002.0
(byte*) render_playfield::screen_line#1 screen_line zp[2]:10 500000.5
(byte*) render_playfield::screen_line#2 screen_line zp[2]:10 1550002.0
(void()) render_score()
(label) render_score::@1
(label) render_score::@2
(label) render_score::@3
(label) render_score::@4
(label) render_score::@5
(label) render_score::@6
(label) render_score::@7
(label) render_score::@return
(const word) render_score::level_offset = (word)(number) $28*(number) $13+(number) $1f
(const word) render_score::lines_offset = (word)(number) $28*(number) 1+(number) $16
(const byte*) render_score::score_bytes = (byte*)&(volatile dword) score_bcd
(const word) render_score::score_offset = (word)(number) $28*(number) 5+(number) $1c
(byte*) render_score::screen
(byte*) render_score::screen#3 screen zp[2]:7 375.375
(void()) render_screen_original((byte*) render_screen_original::screen)
(label) render_screen_original::@1
(label) render_screen_original::@2
(label) render_screen_original::@3
(label) render_screen_original::@4
(label) render_screen_original::@5
(label) render_screen_original::@return
(const byte) render_screen_original::SPACE = (byte) 0
(byte*) render_screen_original::cols
(byte*) render_screen_original::cols#1 cols zp[2]:36 100001.0
(byte*) render_screen_original::cols#2 cols zp[2]:36 75000.75
(byte*) render_screen_original::cols#3 cols zp[2]:36 42000.600000000006
(byte*) render_screen_original::cols#4 cols zp[2]:36 77501.0
(byte*) render_screen_original::cols#5 cols zp[2]:36 80000.8
(byte*) render_screen_original::cols#6 cols zp[2]:36 100001.0
(byte*) render_screen_original::cols#7 cols zp[2]:36 20002.0
(byte*) render_screen_original::ocols
(byte*) render_screen_original::ocols#1 ocols zp[2]:57 17500.25
(byte*) render_screen_original::ocols#2 ocols zp[2]:57 66667.33333333333
(byte*) render_screen_original::ocols#4 ocols zp[2]:57 13750.25
(byte*) render_screen_original::oscr
(byte*) render_screen_original::oscr#1 oscr zp[2]:50 14000.2
(byte*) render_screen_original::oscr#2 oscr zp[2]:50 133334.66666666666
(byte*) render_screen_original::oscr#4 oscr zp[2]:50 13750.25
(byte*) render_screen_original::screen
(byte*) render_screen_original::screen#10 screen zp[2]:48 30000.428571428572
(byte*) render_screen_original::screen#2 screen zp[2]:48 60000.600000000006
(byte*) render_screen_original::screen#3 screen zp[2]:48 42857.57142857143
(byte*) render_screen_original::screen#5 screen zp[2]:48 155002.0
(byte*) render_screen_original::screen#6 screen zp[2]:48 200002.0
(byte*) render_screen_original::screen#7 screen zp[2]:48 200002.0
(byte*) render_screen_original::screen#8 screen zp[2]:48 21003.0
(byte*) render_screen_original::screen#9 screen zp[2]:48 1001.0
(byte) render_screen_original::x
(byte) render_screen_original::x#1 reg byte x 200002.0
(byte) render_screen_original::x#2 reg byte x 200002.0
(byte) render_screen_original::x#3 reg byte x 150001.5
(byte) render_screen_original::x#4 reg byte x 40000.4
(byte) render_screen_original::x#5 reg byte x 42857.57142857143
(byte) render_screen_original::x#6 reg byte x 60000.600000000006
(byte) render_screen_original::y
(byte) render_screen_original::y#1 y zp[1]:47 15001.5
(byte) render_screen_original::y#6 y zp[1]:47 833.4166666666666
(byte) render_screen_render
(byte) render_screen_render#11 render_screen_render zp[1]:3 275.5
(byte) render_screen_render#15 reg byte x 1102.0
(byte) render_screen_render#18 render_screen_render zp[1]:3 84.76923076923077
(byte) render_screen_render#22 reg byte x 7700.153846153846
(byte) render_screen_render#33 render_screen_render_1 zp[1]:5 4766.761904761905
(byte) render_screen_render#63 reg byte x 202.0
(byte) render_screen_render#64 render_screen_render_1 zp[1]:5 50.5
(byte) render_screen_render#65 reg byte x 101.0
(byte) render_screen_show
(byte) render_screen_show#13 render_screen_show zp[1]:2 367.33333333333337
(byte) render_screen_show#16 render_screen_show zp[1]:2 577.65
(volatile byte) render_screen_showing loadstore zp[1]:38 1000.5000000000001
(void()) render_screen_swap()
(label) render_screen_swap::@return
(void()) render_show()
(label) render_show::@1
(label) render_show::@return
(byte) render_show::d018val
(byte) render_show::d018val#3 reg byte a 10001.0
(label) render_show::toD0181
(byte*) render_show::toD0181_gfx
(byte) render_show::toD0181_return
(const byte) render_show::toD0181_return#0 toD0181_return = >(word)(const nomodify byte*) PLAYFIELD_SCREEN_1&(word) $3fff*(byte) 4|>(word)(const nomodify byte*) PLAYFIELD_CHARSET/(byte) 4&(byte) $f
(byte*) render_show::toD0181_screen
(label) render_show::toD0182
(byte*) render_show::toD0182_gfx
(byte) render_show::toD0182_return
(const byte) render_show::toD0182_return#0 toD0182_return = >(word)(const nomodify byte*) PLAYFIELD_SCREEN_2&(word) $3fff*(byte) 4|>(word)(const nomodify byte*) PLAYFIELD_CHARSET/(byte) 4&(byte) $f
(byte*) render_show::toD0182_screen
(const dword*) score_add_bcd[(number) 5]  = { fill( 5, 0) }
(volatile dword) score_bcd loadstore zp[4]:39 14598.569343065694
(const byte**) screen_lines_1[(const nomodify byte) PLAYFIELD_LINES]  = { fill( PLAYFIELD_LINES, 0) }
(const byte**) screen_lines_2[(const nomodify byte) PLAYFIELD_LINES]  = { fill( PLAYFIELD_LINES, 0) }
(void()) sid_rnd_init()
(label) sid_rnd_init::@return
(void()) sprites_init()
(label) sprites_init::@1
(label) sprites_init::@return
(byte) sprites_init::s
(byte) sprites_init::s#1 reg byte y 1501.5
(byte) sprites_init::s#2 reg byte y 800.8
(byte) sprites_init::s2
(byte) sprites_init::s2#0 reg byte x 2002.0
(byte) sprites_init::xpos
(byte) sprites_init::xpos#1 xpos zp[1]:33 667.3333333333334
(byte) sprites_init::xpos#2 xpos zp[1]:33 750.75
interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
(byte~) sprites_irq::$0 reg byte x 4.0
(label) sprites_irq::@1
(label) sprites_irq::@10
(label) sprites_irq::@11
(label) sprites_irq::@2
(label) sprites_irq::@3
(label) sprites_irq::@4
(label) sprites_irq::@5
(label) sprites_irq::@6
(label) sprites_irq::@7
(label) sprites_irq::@8
(label) sprites_irq::@9
(label) sprites_irq::@return
(byte) sprites_irq::ptr
(byte) sprites_irq::ptr#0 reg byte x 2.5
(byte) sprites_irq::ptr#1 reg byte x 2.6666666666666665
(byte) sprites_irq::ptr#2 reg byte a 4.0
(byte) sprites_irq::ptr#3 reg byte a 2.6666666666666665
(byte) sprites_irq::ptr#4 reg byte a 4.0
(volatile byte) sprites_irq::raster_sprite_gfx_modify loadstore zp[1]:61 6.5
(label) sprites_irq::toSpritePtr1
(byte) sprites_irq::toSpritePtr1_return
(const byte) sprites_irq::toSpritePtr1_return#0 toSpritePtr1_return = (byte)(word)(const nomodify byte*) PLAYFIELD_SPRITES/(byte) $40
(byte*) sprites_irq::toSpritePtr1_sprite
(byte) sprites_irq::ypos
(byte) sprites_irq::ypos#0 reg byte a 2.5
(void()) sprites_irq_init()
(label) sprites_irq_init::@return
(label) toSpritePtr1
(byte) toSpritePtr1_return
(const byte) toSpritePtr1_return#0 toSpritePtr1_return = (byte)(word)(const nomodify byte*) PLAYFIELD_SPRITES/(byte) $40
(byte*) toSpritePtr1_sprite

zp[1]:2 [ render_screen_show#16 render_screen_show#13 ]
zp[1]:3 [ render_screen_render#18 render_screen_render#11 ]
zp[1]:4 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
reg byte y [ render_bcd::only_low#6 ]
reg byte x [ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ]
reg byte x [ render_screen_render#15 render_screen_render#65 ]
reg byte y [ next_piece_idx#12 next_piece_idx#76 next_piece_idx#77 ]
reg byte x [ render_next::c#2 render_next::c#1 ]
reg byte x [ current_ypos#13 current_ypos#97 current_ypos#98 ]
zp[1]:5 [ render_screen_render#33 render_screen_render#64 render_next::l#7 render_next::l#1 ]
zp[1]:6 [ current_xpos#59 current_xpos#118 current_xpos#119 ]
zp[2]:7 [ current_piece_gfx#64 current_piece_gfx#111 current_piece_gfx#112 render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#8 render_next::next_piece_gfx#1 render_score::screen#3 render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ]
zp[1]:9 [ current_piece_char#68 current_piece_char#99 current_piece_char#100 ]
reg byte x [ render_moving::c#2 render_moving::c#1 ]
reg byte x [ render_screen_render#22 render_screen_render#63 ]
reg byte a [ play_move_rotate::return#2 ]
zp[2]:10 [ current_piece#17 current_piece#95 current_piece#96 current_piece#97 current_piece#98 current_piece#99 play_collision::piece_gfx#0 render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#11 render_next::screen_next_area#4 render_next::screen_next_area#3 render_bcd::offset#6 render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ]
reg byte x [ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
reg byte x [ play_collision::c#2 play_collision::c#1 ]
reg byte a [ play_collision::return#15 ]
reg byte a [ play_move_leftright::return#2 ]
zp[1]:12 [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 render_playfield::l#2 render_playfield::l#1 render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ]
zp[1]:13 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#6 current_ypos#19 play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ]
zp[2]:14 [ lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ]
zp[1]:16 [ level#33 level#10 level#17 level#19 level#21 ]
zp[1]:17 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#1 current_movedown_slow#21 current_movedown_slow#23 current_movedown_slow#65 current_movedown_slow#10 ]
zp[1]:18 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
zp[2]:19 [ current_piece#28 current_piece#10 current_piece#100 current_piece#15 current_piece#92 ]
zp[1]:21 [ current_piece_char#29 current_piece_char#10 current_piece_char#5 current_piece_char#16 ]
zp[1]:22 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
zp[2]:23 [ current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#122 current_piece_gfx#18 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#116 ]
zp[1]:25 [ current_xpos#43 current_xpos#14 current_xpos#100 current_xpos#19 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
reg byte x [ play_move_down::return#3 ]
zp[1]:26 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 play_spawn_current::piece_idx#2 next_piece_idx#16 play_spawn_current::piece_idx#1 ]
zp[1]:27 [ game_over#65 game_over#27 game_over#10 game_over#52 game_over#15 ]
reg byte x [ play_increase_level::b#2 play_increase_level::b#1 ]
zp[1]:28 [ play_remove_lines::y#8 play_remove_lines::y#1 play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 render_moving::l#4 render_moving::l#1 ]
zp[1]:29 [ play_remove_lines::removed#11 play_remove_lines::removed#7 play_remove_lines::removed#1 play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 render_playfield::c#2 render_playfield::c#1 render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ]
reg byte y [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ]
reg byte x [ play_remove_lines::w#6 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 play_remove_lines::w#3 ]
reg byte x [ play_lock_current::c#2 play_lock_current::c#1 ]
reg byte x [ keyboard_event_pressed::keycode#5 ]
reg byte a [ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
zp[1]:30 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 play_remove_lines::x#2 play_remove_lines::x#1 play_collision::l#6 play_collision::l#1 ]
reg byte x [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
zp[1]:31 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 play_remove_lines::full#4 play_remove_lines::full#2 play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ]
zp[1]:32 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
reg byte a [ render_show::d018val#3 ]
reg byte y [ play_init::j#2 play_init::j#1 ]
reg byte x [ play_init::b#2 play_init::b#1 ]
reg byte y [ sprites_init::s#2 sprites_init::s#1 ]
zp[1]:33 [ sprites_init::xpos#2 sprites_init::xpos#1 play_init::idx#2 play_init::idx#1 play_movement::return#2 play_movement::render#1 play_movement::return#0 play_movement::render#2 render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ]
reg byte y [ render_init::i#2 render_init::i#1 ]
zp[2]:34 [ render_init::li_1#2 render_init::li_1#1 play_init::pli#2 play_init::pli#1 ]
zp[2]:36 [ render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 ]
reg byte x [ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
zp[1]:38 [ render_screen_showing ]
zp[4]:39 [ score_bcd ]
zp[1]:43 [ irq_raster_next ]
zp[1]:44 [ irq_sprite_ypos ]
zp[1]:45 [ irq_sprite_ptr ]
zp[1]:46 [ irq_cnt ]
reg byte a [ keyboard_event_get::return#3 ]
reg byte x [ main::key_event#0 ]
zp[1]:47 [ play_movement::key_event#0 render_screen_original::y#6 render_screen_original::y#1 ]
reg byte a [ play_movement::return#3 ]
reg byte a [ main::render#1 ]
reg byte a [ render_bcd::$5 ]
reg byte a [ render_bcd::$6 ]
reg byte a [ render_bcd::$3 ]
reg byte a [ render_bcd::$4 ]
reg byte x [ render_next::$6 ]
reg byte a [ render_next::cell#0 ]
reg byte a [ render_moving::$1 ]
reg byte a [ render_moving::$6 ]
zp[2]:48 [ render_moving::screen_line#0 render_init::li_2#2 render_init::li_2#1 render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ]
reg byte a [ render_moving::current_cell#0 ]
reg byte a [ render_playfield::$0 ]
reg byte a [ render_playfield::$3 ]
reg byte a [ play_move_down::key_event#0 ]
reg byte a [ play_move_down::return#0 ]
reg byte a [ play_move_leftright::key_event#0 ]
reg byte a [ play_move_leftright::return#0 ]
reg byte a [ play_movement::$3 ]
reg byte a [ play_move_rotate::key_event#0 ]
reg byte a [ play_move_rotate::return#0 ]
reg byte a [ play_movement::$4 ]
reg byte x [ play_move_rotate::$5 ]
reg byte a [ play_collision::return#14 ]
reg byte a [ play_move_rotate::$2 ]
reg byte a [ play_move_rotate::$7 ]
reg byte a [ play_collision::$14 ]
zp[2]:50 [ play_collision::playfield_line#0 render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 ]
reg byte a [ play_collision::$5 ]
reg byte a [ play_collision::return#13 ]
reg byte a [ play_move_leftright::$4 ]
reg byte a [ play_collision::return#1 ]
reg byte a [ play_move_leftright::$8 ]
reg byte a [ keyboard_event_pressed::return#12 ]
reg byte a [ play_move_down::$2 ]
reg byte a [ play_collision::return#0 ]
reg byte a [ play_move_down::$12 ]
reg byte a [ play_remove_lines::return#0 ]
reg byte a [ play_move_down::removed#0 ]
reg byte x [ play_update_score::removed#0 ]
reg byte x [ play_spawn_current::current_piece_idx#0 ]
reg byte a [ play_collision::return#10 ]
reg byte a [ play_spawn_current::$1 ]
reg byte a [ play_spawn_current::sid_rnd1_return#0 ]
reg byte a [ play_update_score::$2 ]
zp[1]:52 [ play_update_score::lines_before#0 play_spawn_current::$7 ]
reg byte a [ play_update_score::$9 ]
zp[4]:53 [ play_update_score::add_bcd#0 ]
reg byte a [ play_update_score::$4 ]
reg byte a [ play_update_score::lines_after#0 ]
reg byte a [ play_increase_level::$1 ]
reg byte a [ play_increase_level::$5 ]
reg byte a [ play_lock_current::$4 ]
zp[2]:57 [ play_lock_current::playfield_line#0 render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ]
zp[1]:59 [ play_lock_current::i#1 play_remove_lines::c#0 play_collision::i#1 render_next::next_piece_char#0 ]
reg byte y [ keyboard_event_pressed::$0 ]
reg byte y [ keyboard_event_pressed::row_bits#0 ]
reg byte x [ keyboard_event_pressed::$1 ]
reg byte a [ keyboard_event_pressed::return#11 ]
reg byte x [ keyboard_matrix_read::rowid#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
zp[1]:60 [ keyboard_event_scan::row_scan#0 play_lock_current::l#6 play_lock_current::l#1 play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ]
reg byte a [ keyboard_event_pressed::return#0 ]
reg byte a [ keyboard_event_scan::$0 ]
reg byte a [ keyboard_event_pressed::return#1 ]
reg byte a [ keyboard_event_scan::$3 ]
reg byte a [ keyboard_event_pressed::return#2 ]
reg byte a [ keyboard_event_scan::$6 ]
reg byte a [ keyboard_event_pressed::return#10 ]
reg byte a [ keyboard_event_scan::$9 ]
reg byte a [ keyboard_event_scan::$15 ]
reg byte a [ keyboard_event_scan::$16 ]
reg byte a [ keyboard_event_scan::event_type#0 ]
reg byte a [ keyboard_event_scan::$23 ]
reg byte a [ keyboard_matrix_read::return#0 ]
reg byte x [ play_init::$2 ]
reg byte a [ play_init::$3 ]
reg byte x [ sprites_init::s2#0 ]
reg byte x [ render_init::$5 ]
reg byte a [ sprites_irq::ypos#0 ]
reg byte x [ sprites_irq::$0 ]
zp[1]:61 [ sprites_irq::raster_sprite_gfx_modify ]
reg byte x [ sprites_irq::ptr#0 ]
reg byte a [ sprites_irq::ptr#3 ]
reg byte a [ sprites_irq::ptr#4 ]
reg byte x [ sprites_irq::ptr#1 ]
reg byte a [ sprites_irq::ptr#2 ]
