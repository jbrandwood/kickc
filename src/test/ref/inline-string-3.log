
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  *main::PTR = <main::STRING
  *(main::PTR+1) = >main::STRING
  main::ptr#0 = (byte*){ *(main::PTR+1), *main::PTR }
  *main::SCREEN = *main::ptr#0
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
constant byte* const main::PTR = (byte*)$9ffe
constant byte* const main::SCREEN = (byte*)$400
constant const byte* main::STRING[]  = "camelot"z
byte* main::ptr
byte* main::ptr#0

Fixing inline constructor with main::$0 = (byte)*(main::PTR+1) w= (byte)*main::PTR
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) 1 in *(main::PTR+1) = >main::STRING
Adding number conversion cast (unumber) 1 in main::$0 = (byte)*(main::PTR+1) w= (byte)*main::PTR
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 40958
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast *(main::PTR+(unumber)1)
Simplifying constant integer cast 1
Simplifying constant integer cast *main::PTR
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Adding pointer type conversion cast (byte*) main::$0 in main::$0 = *(main::PTR+1) w= *main::PTR
Successful SSA optimization PassNAddTypeConversionAssignment
Alias main::ptr#0 = main::$0 
Successful SSA optimization Pass2AliasElimination
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining cast [3] main::ptr#0 = (byte*)main::$1
Successful SSA optimization Pass2InlineCast
Inlining Noop Cast [3] main::ptr#0 = (byte*)main::$1 keeping main::ptr#0
Successful SSA optimization Pass2NopCastInlining
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *main::PTR = <main::STRING
  [1] *(main::PTR+1) = >main::STRING
  [2] main::ptr#0 = *(main::PTR+1) w= *main::PTR
  [3] *main::SCREEN = *((byte*)main::ptr#0)
  to:main::@return
main::@return: scope:[main]  from main
  [4] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte* main::ptr
word main::ptr#0 2.0

Initial phi equivalence classes
Added variable main::ptr#0 to live range equivalence class [ main::ptr#0 ]
Complete equivalence classes
[ main::ptr#0 ]
Allocated zp[2]:2 [ main::ptr#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *main::PTR = <main::STRING [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(main::PTR+1) = >main::STRING [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] main::ptr#0 = *(main::PTR+1) w= *main::PTR [ main::ptr#0 ] (  [ main::ptr#0 ] { }  ) always clobbers reg byte a 
Statement [3] *main::SCREEN = *((byte*)main::ptr#0) [ ] (  [ ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ main::ptr#0 ] : zp[2]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 2: zp[2]:2 [ main::ptr#0 ] 
Uplift Scope [] 

Uplifting [main] best 46 combination zp[2]:2 [ main::ptr#0 ] 
Uplifting [] best 46 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test assigning address of inline string to pointer
// The result should be an labelled .text in the ASM
// Erroneously tries to inline the string completely leading to a CompileError
  // Upstart
  // Commodore 64 PRG executable file
.file [name="inline-string-3.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label PTR = $9ffe
    .label SCREEN = $400
    .label ptr = 2
    // [0] *main::PTR = <main::STRING -- _deref_pbuc1=vbuc2 
    lda #<STRING
    sta PTR
    // [1] *(main::PTR+1) = >main::STRING -- _deref_pbuc1=vbuc2 
    lda #>STRING
    sta PTR+1
    // [2] main::ptr#0 = *(main::PTR+1) w= *main::PTR -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda PTR
    sta.z ptr
    lda PTR+1
    sta.z ptr+1
    // [3] *main::SCREEN = *((byte*)main::ptr#0) -- _deref_pbuc1=_deref_pbuz1 
    ldy #0
    lda (ptr),y
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
  .segment Data
    STRING: .text "camelot"
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
constant byte* const main::PTR = (byte*) 40958
constant byte* const main::SCREEN = (byte*) 1024
constant const byte* main::STRING[]  = "camelot"z
byte* main::ptr
word main::ptr#0 ptr zp[2]:2 2.0

zp[2]:2 [ main::ptr#0 ]


FINAL ASSEMBLER
Score: 43

  // File Comments
// Test assigning address of inline string to pointer
// The result should be an labelled .text in the ASM
// Erroneously tries to inline the string completely leading to a CompileError
  // Upstart
  // Commodore 64 PRG executable file
.file [name="inline-string-3.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label PTR = $9ffe
    .label SCREEN = $400
    .label ptr = 2
    // *PTR = <STRING
    // [0] *main::PTR = <main::STRING -- _deref_pbuc1=vbuc2 
    lda #<STRING
    sta PTR
    // *(PTR+1)= >STRING
    // [1] *(main::PTR+1) = >main::STRING -- _deref_pbuc1=vbuc2 
    lda #>STRING
    sta PTR+1
    // byte* ptr = (byte*) { *(PTR+1), *PTR }
    // [2] main::ptr#0 = *(main::PTR+1) w= *main::PTR -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda PTR
    sta.z ptr
    lda PTR+1
    sta.z ptr+1
    // *SCREEN = *ptr
    // [3] *main::SCREEN = *((byte*)main::ptr#0) -- _deref_pbuc1=_deref_pbuz1 
    ldy #0
    lda (ptr),y
    sta SCREEN
    // main::@return
    // }
    // [4] return 
    rts
  .segment Data
    STRING: .text "camelot"
}
  // File Data

