@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const byte*) VICBANK#0) ← (byte/signed byte/word/signed word/dword/signed dword) $17
  [5] *((const byte*) zp1#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@10
  [6] (word) main::u#11 ← phi( main/(word/signed word/dword/signed dword) $6e85 main::@10/(word) main::u#2 )
  [7] *((const byte*) TIMEHI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [8] *((const byte*) TIMELO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [9] *((const byte*) zp2#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@8
  [10] (word) div16u::dividend#0 ← (word) main::u#11
  [11] call div16u 
  [12] (word) div16u::return#2 ← (word) div16u::return#0
  to:main::@8
main::@8: scope:[main]  from main::@2
  [13] (word) main::v#1 ← (word) div16u::return#2
  [14] *((const byte*) zp2#0) ← ++ *((const byte*) zp2#0)
  [15] if(*((const byte*) zp2#0)<(byte/word/signed word/dword/signed dword) $c8) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@8
  [16] (word~) main::$2 ← ((word)) *((const byte*) TIMEHI#0)
  [17] (word~) main::$3 ← (word~) main::$2 << (byte/signed byte/word/signed word/dword/signed dword) 8
  [18] (word~) main::$4 ← ((word)) *((const byte*) TIMELO#0)
  [19] (word) myprintf::w3#0 ← (word~) main::$3 + (word~) main::$4
  [20] (word) myprintf::w1#0 ← (word) main::u#11
  [21] (word) myprintf::w2#0 ← (word) main::v#1
  [22] call myprintf 
  to:main::@9
main::@9: scope:[main]  from main::@3
  [23] phi()
  [24] call Print 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [25] (word) main::u#2 ← (word) main::u#11 - (word/signed word/dword/signed dword) $4d2
  [26] *((const byte*) zp1#0) ← ++ *((const byte*) zp1#0)
  [27] if(*((const byte*) zp1#0)<(byte/signed byte/word/signed word/dword/signed dword) $a) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@10
  [28] *((const byte*) zp1#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@5
main::@5: scope:[main]  from main::@13 main::@4
  [29] (word) main::u#15 ← phi( main::@13/(word) main::u#4 main::@4/(word/signed word/dword/signed dword) $6e85 )
  [30] *((const byte*) TIMEHI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [31] *((const byte*) TIMELO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [32] *((const byte*) zp2#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@5
  [33] (word) div10::val#4 ← (word) main::u#15
  [34] call div10 
  [35] (word) div10::return#2 ← (word) div10::return#0
  to:main::@11
main::@11: scope:[main]  from main::@6
  [36] (word) main::v#2 ← (word) div10::return#2
  [37] *((const byte*) zp2#0) ← ++ *((const byte*) zp2#0)
  [38] if(*((const byte*) zp2#0)<(byte/word/signed word/dword/signed dword) $c8) goto main::@6
  to:main::@7
main::@7: scope:[main]  from main::@11
  [39] (word~) main::$11 ← ((word)) *((const byte*) TIMEHI#0)
  [40] (word~) main::$12 ← (word~) main::$11 << (byte/signed byte/word/signed word/dword/signed dword) 8
  [41] (word~) main::$13 ← ((word)) *((const byte*) TIMELO#0)
  [42] (word) myprintf::w3#1 ← (word~) main::$12 + (word~) main::$13
  [43] (word) myprintf::w1#1 ← (word) main::u#15
  [44] (word) myprintf::w2#1 ← (word) main::v#2
  [45] call myprintf 
  to:main::@12
main::@12: scope:[main]  from main::@7
  [46] phi()
  [47] call Print 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [48] (word) main::u#4 ← (word) main::u#15 - (word/signed word/dword/signed dword) $4d2
  [49] *((const byte*) zp1#0) ← ++ *((const byte*) zp1#0)
  [50] if(*((const byte*) zp1#0)<(byte/signed byte/word/signed word/dword/signed dword) $a) goto main::@5
  to:main::@return
main::@return: scope:[main]  from main::@13
  [51] return 
  to:@return
Print: scope:[Print]  from main::@12 main::@9
  asm { ldy#0 loop: ldastrTemp,y beqdone jsr$FFD2 iny jmploop done:  }
  to:Print::@return
Print::@return: scope:[Print]  from Print
  [53] return 
  to:@return
myprintf: scope:[myprintf]  from main::@3 main::@7
  [54] (word) myprintf::w3#7 ← phi( main::@3/(word) myprintf::w3#0 main::@7/(word) myprintf::w3#1 )
  [54] (word) myprintf::w2#7 ← phi( main::@3/(word) myprintf::w2#0 main::@7/(word) myprintf::w2#1 )
  [54] (word) myprintf::w1#6 ← phi( main::@3/(word) myprintf::w1#0 main::@7/(word) myprintf::w1#1 )
  [54] (byte*) myprintf::str#5 ← phi( main::@3/(const string) main::str main::@7/(const string) main::str1 )
  to:myprintf::@1
myprintf::@1: scope:[myprintf]  from myprintf myprintf::@27
  [55] (byte) myprintf::bLeadZero#10 ← phi( myprintf/(byte/signed byte/word/signed word/dword/signed dword) 0 myprintf::@27/(byte) myprintf::bLeadZero#18 )
  [55] (byte) myprintf::bDigits#14 ← phi( myprintf/(byte/signed byte/word/signed word/dword/signed dword) 0 myprintf::@27/(byte) myprintf::bDigits#24 )
  [55] (byte) myprintf::bTrailing#10 ← phi( myprintf/(byte/signed byte/word/signed word/dword/signed dword) 0 myprintf::@27/(byte) myprintf::bTrailing#21 )
  [55] (word) myprintf::w#10 ← phi( myprintf/(byte/signed byte/word/signed word/dword/signed dword) 0 myprintf::@27/(word) myprintf::w#17 )
  [55] (byte) myprintf::bLen#14 ← phi( myprintf/(byte/signed byte/word/signed word/dword/signed dword) 0 myprintf::@27/(byte) myprintf::return#0 )
  [55] (byte) myprintf::bArg#12 ← phi( myprintf/(byte/signed byte/word/signed word/dword/signed dword) 0 myprintf::@27/(byte) myprintf::bArg#10 )
  [55] (byte) myprintf::bFormat#10 ← phi( myprintf/(byte/signed byte/word/signed word/dword/signed dword) 0 myprintf::@27/(byte) myprintf::bFormat#4 )
  [55] (byte*) myprintf::str#10 ← phi( myprintf/(byte*) myprintf::str#5 myprintf::@27/(byte*) myprintf::str#0 )
  [56] (byte) myprintf::b#1 ← *((byte*) myprintf::str#10)
  [57] if((byte) myprintf::bFormat#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto myprintf::@2
  to:myprintf::@31
myprintf::@31: scope:[myprintf]  from myprintf::@1
  [58] if((byte) myprintf::b#1!=(byte) '0') goto myprintf::@3
  to:myprintf::@27
myprintf::@27: scope:[myprintf]  from myprintf::@22 myprintf::@23 myprintf::@29 myprintf::@30 myprintf::@31 myprintf::@4
  [59] (byte) myprintf::bLeadZero#18 ← phi( myprintf::@22/(byte) myprintf::bLeadZero#10 myprintf::@23/(byte) myprintf::bLeadZero#10 myprintf::@4/(byte) myprintf::bLeadZero#10 myprintf::@29/(byte/signed byte/word/signed word/dword/signed dword) 0 myprintf::@30/(byte) myprintf::bLeadZero#10 myprintf::@31/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [59] (byte) myprintf::bDigits#24 ← phi( myprintf::@22/(byte) myprintf::bDigits#25 myprintf::@23/(byte) myprintf::bDigits#1 myprintf::@4/(byte) myprintf::bDigits#14 myprintf::@29/(byte/signed byte/word/signed word/dword/signed dword) 1 myprintf::@30/(byte) myprintf::bDigits#14 myprintf::@31/(byte) myprintf::bDigits#14 )
  [59] (byte) myprintf::bTrailing#21 ← phi( myprintf::@22/(byte) myprintf::bTrailing#10 myprintf::@23/(byte) myprintf::bTrailing#10 myprintf::@4/(byte/signed byte/word/signed word/dword/signed dword) 1 myprintf::@29/(byte/signed byte/word/signed word/dword/signed dword) 0 myprintf::@30/(byte) myprintf::bTrailing#10 myprintf::@31/(byte) myprintf::bTrailing#10 )
  [59] (word) myprintf::w#17 ← phi( myprintf::@22/(word) myprintf::w#10 myprintf::@23/(word) myprintf::w#10 myprintf::@4/(word) myprintf::w#10 myprintf::@29/(word) myprintf::w#21 myprintf::@30/(word) myprintf::w#10 myprintf::@31/(word) myprintf::w#10 )
  [59] (byte) myprintf::bArg#10 ← phi( myprintf::@22/(byte) myprintf::bArg#12 myprintf::@23/(byte) myprintf::bArg#12 myprintf::@4/(byte) myprintf::bArg#12 myprintf::@29/(byte) myprintf::bArg#1 myprintf::@30/(byte) myprintf::bArg#12 myprintf::@31/(byte) myprintf::bArg#12 )
  [59] (byte) myprintf::return#0 ← phi( myprintf::@22/(byte) myprintf::bLen#28 myprintf::@23/(byte) myprintf::bLen#14 myprintf::@4/(byte) myprintf::bLen#14 myprintf::@29/(byte) myprintf::bLen#14 myprintf::@30/(byte) myprintf::bLen#7 myprintf::@31/(byte) myprintf::bLen#14 )
  [59] (byte) myprintf::bFormat#4 ← phi( myprintf::@22/(byte/signed byte/word/signed word/dword/signed dword) 0 myprintf::@23/(byte) myprintf::bFormat#10 myprintf::@4/(byte) myprintf::bFormat#10 myprintf::@29/(byte/signed byte/word/signed word/dword/signed dword) 1 myprintf::@30/(byte) myprintf::bFormat#10 myprintf::@31/(byte) myprintf::bFormat#10 )
  [60] (byte*) myprintf::str#0 ← ++ (byte*) myprintf::str#10
  [61] if(*((byte*) myprintf::str#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto myprintf::@1
  to:myprintf::@36
myprintf::@36: scope:[myprintf]  from myprintf::@27
  [62] *((const byte[$64]) strTemp#0 + (byte) myprintf::return#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:myprintf::@return
myprintf::@return: scope:[myprintf]  from myprintf::@36
  [63] return 
  to:@return
myprintf::@3: scope:[myprintf]  from myprintf::@31
  [64] if((byte) myprintf::b#1>=(byte) '1') goto myprintf::@37
  to:myprintf::@4
myprintf::@4: scope:[myprintf]  from myprintf::@3 myprintf::@37
  [65] if((byte) myprintf::b#1!=(byte) '-') goto myprintf::@5
  to:myprintf::@27
myprintf::@5: scope:[myprintf]  from myprintf::@4
  [66] if((byte) myprintf::b#1==(byte) 'c') goto myprintf::@6
  to:myprintf::@24
myprintf::@24: scope:[myprintf]  from myprintf::@5
  [67] if((byte) myprintf::b#1==(byte) 'd') goto myprintf::@7
  to:myprintf::@25
myprintf::@25: scope:[myprintf]  from myprintf::@24
  [68] if((byte) myprintf::b#1==(byte) 'x') goto myprintf::@26
  to:myprintf::@38
myprintf::@38: scope:[myprintf]  from myprintf::@25
  [69] if((byte) myprintf::b#1==(byte) 'X') goto myprintf::@26
  to:myprintf::@22
myprintf::@22: scope:[myprintf]  from myprintf::@11 myprintf::@20 myprintf::@21 myprintf::@38 myprintf::@40 myprintf::@6
  [70] (byte) myprintf::bDigits#25 ← phi( myprintf::@11/(byte) myprintf::bDigits#14 myprintf::@20/(byte) myprintf::bDigits#16 myprintf::@21/(byte) myprintf::bDigits#3 myprintf::@6/(byte) myprintf::bDigits#14 myprintf::@38/(byte) myprintf::bDigits#14 myprintf::@40/(byte) myprintf::bDigits#16 )
  [70] (byte) myprintf::bLen#28 ← phi( myprintf::@11/(byte) myprintf::bLen#3 myprintf::@20/(byte) myprintf::bLen#24 myprintf::@21/(byte) myprintf::bLen#6 myprintf::@6/(byte) myprintf::bLen#1 myprintf::@38/(byte) myprintf::bLen#14 myprintf::@40/(byte) myprintf::bLen#24 )
  to:myprintf::@27
myprintf::@26: scope:[myprintf]  from myprintf::@25 myprintf::@38
  [71] (word~) myprintf::$17 ← (word) myprintf::w#10 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [72] (byte) myprintf::b#15 ← (word~) myprintf::$17 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [73] if((byte) myprintf::b#15<(byte/signed byte/word/signed word/dword/signed dword) $a) goto myprintf::@9
  to:myprintf::@8
myprintf::@8: scope:[myprintf]  from myprintf::@26
  [74] phi()
  to:myprintf::@9
myprintf::@9: scope:[myprintf]  from myprintf::@26 myprintf::@8
  [75] (byte~) myprintf::$22 ← phi( myprintf::@26/(byte) '0' myprintf::@8/(byte/signed byte/word/signed word/dword/signed dword) $57 )
  [76] (byte~) myprintf::$23 ← (byte~) myprintf::$22 + (byte) myprintf::b#15
  [77] *((const byte[$64]) strTemp#0 + (byte) myprintf::bLen#14) ← (byte~) myprintf::$23
  [78] (byte) myprintf::bLen#10 ← ++ (byte) myprintf::bLen#14
  [79] (byte) myprintf::b#16 ← (word) myprintf::w#10 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [80] if((byte) myprintf::b#16<(byte/signed byte/word/signed word/dword/signed dword) $a) goto myprintf::@11
  to:myprintf::@10
myprintf::@10: scope:[myprintf]  from myprintf::@9
  [81] phi()
  to:myprintf::@11
myprintf::@11: scope:[myprintf]  from myprintf::@10 myprintf::@9
  [82] (byte~) myprintf::$28 ← phi( myprintf::@9/(byte) '0' myprintf::@10/(byte/signed byte/word/signed word/dword/signed dword) $57 )
  [83] (byte~) myprintf::$29 ← (byte~) myprintf::$28 + (byte) myprintf::b#16
  [84] *((const byte[$64]) strTemp#0 + (byte) myprintf::bLen#10) ← (byte~) myprintf::$29
  [85] (byte) myprintf::bLen#3 ← ++ (byte) myprintf::bLen#10
  to:myprintf::@22
myprintf::@7: scope:[myprintf]  from myprintf::@24
  [86] (word) utoa::value#4 ← (word) myprintf::w#10
  [87] call utoa 
  to:myprintf::@12
myprintf::@12: scope:[myprintf]  from myprintf::@13 myprintf::@7
  [88] (byte) myprintf::b#17 ← phi( myprintf::@13/(byte) myprintf::b#5 myprintf::@7/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [89] if(*((const byte[6]) myprintf::buf6#0 + (byte) myprintf::b#17)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto myprintf::@13
  to:myprintf::@14
myprintf::@14: scope:[myprintf]  from myprintf::@12
  [90] if((byte) myprintf::bTrailing#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto myprintf::@39
  to:myprintf::@15
myprintf::@15: scope:[myprintf]  from myprintf::@14 myprintf::@18 myprintf::@39
  [91] (byte) myprintf::bDigits#16 ← phi( myprintf::@14/(byte) myprintf::bDigits#14 myprintf::@18/(byte) myprintf::bDigits#2 )
  [91] (byte) myprintf::bLen#23 ← phi( myprintf::@14/(byte) myprintf::bLen#14 myprintf::@18/(byte) myprintf::bLen#4 )
  to:myprintf::@19
myprintf::@19: scope:[myprintf]  from myprintf::@15 myprintf::@19
  [92] (byte) myprintf::bLen#12 ← phi( myprintf::@15/(byte) myprintf::bLen#23 myprintf::@19/(byte) myprintf::bLen#24 )
  [92] (byte) myprintf::digit#3 ← phi( myprintf::@15/(byte/signed byte/word/signed word/dword/signed dword) 0 myprintf::@19/(byte) myprintf::digit#2 )
  [93] *((const byte[$64]) strTemp#0 + (byte) myprintf::bLen#12) ← *((const byte[6]) myprintf::buf6#0 + (byte) myprintf::digit#3)
  [94] (byte) myprintf::bLen#24 ← ++ (byte) myprintf::bLen#12
  [95] (byte) myprintf::digit#2 ← ++ (byte) myprintf::digit#3
  [96] if((byte) myprintf::digit#2<(byte) myprintf::b#17) goto myprintf::@19
  to:myprintf::@20
myprintf::@20: scope:[myprintf]  from myprintf::@19
  [97] if((byte) myprintf::bTrailing#10!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto myprintf::@40
  to:myprintf::@22
myprintf::@40: scope:[myprintf]  from myprintf::@20
  [98] if((byte) myprintf::bDigits#16>(byte) myprintf::b#17) goto myprintf::@21
  to:myprintf::@22
myprintf::@21: scope:[myprintf]  from myprintf::@21 myprintf::@40
  [99] (byte) myprintf::bDigits#8 ← phi( myprintf::@40/(byte) myprintf::bDigits#16 myprintf::@21/(byte) myprintf::bDigits#3 )
  [99] (byte) myprintf::bLen#13 ← phi( myprintf::@40/(byte) myprintf::bLen#24 myprintf::@21/(byte) myprintf::bLen#6 )
  [100] *((const byte[$64]) strTemp#0 + (byte) myprintf::bLen#13) ← (byte) ' '
  [101] (byte) myprintf::bLen#6 ← ++ (byte) myprintf::bLen#13
  [102] (byte) myprintf::bDigits#3 ← -- (byte) myprintf::bDigits#8
  [103] if((byte) myprintf::bDigits#3>(byte) myprintf::b#17) goto myprintf::@21
  to:myprintf::@22
myprintf::@39: scope:[myprintf]  from myprintf::@14
  [104] if((byte) myprintf::bDigits#14>(byte) myprintf::b#17) goto myprintf::@16
  to:myprintf::@15
myprintf::@16: scope:[myprintf]  from myprintf::@18 myprintf::@39
  [105] (byte) myprintf::bDigits#10 ← phi( myprintf::@39/(byte) myprintf::bDigits#14 myprintf::@18/(byte) myprintf::bDigits#2 )
  [105] (byte) myprintf::bLen#11 ← phi( myprintf::@39/(byte) myprintf::bLen#14 myprintf::@18/(byte) myprintf::bLen#4 )
  [106] if((byte) myprintf::bLeadZero#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto myprintf::@18
  to:myprintf::@17
myprintf::@17: scope:[myprintf]  from myprintf::@16
  [107] phi()
  to:myprintf::@18
myprintf::@18: scope:[myprintf]  from myprintf::@16 myprintf::@17
  [108] (byte~) myprintf::$39 ← phi( myprintf::@16/(byte) ' ' myprintf::@17/(byte) '0' )
  [109] *((const byte[$64]) strTemp#0 + (byte) myprintf::bLen#11) ← (byte~) myprintf::$39
  [110] (byte) myprintf::bLen#4 ← ++ (byte) myprintf::bLen#11
  [111] (byte) myprintf::bDigits#2 ← -- (byte) myprintf::bDigits#10
  [112] if((byte) myprintf::bDigits#2>(byte) myprintf::b#17) goto myprintf::@16
  to:myprintf::@15
myprintf::@13: scope:[myprintf]  from myprintf::@12
  [113] (byte) myprintf::b#5 ← ++ (byte) myprintf::b#17
  to:myprintf::@12
myprintf::@6: scope:[myprintf]  from myprintf::@5
  [114] (byte~) myprintf::$47 ← ((byte)) (word) myprintf::w#10
  [115] *((const byte[$64]) strTemp#0 + (byte) myprintf::bLen#14) ← (byte~) myprintf::$47
  [116] (byte) myprintf::bLen#1 ← ++ (byte) myprintf::bLen#14
  to:myprintf::@22
myprintf::@37: scope:[myprintf]  from myprintf::@3
  [117] if((byte) myprintf::b#1<=(byte) '9') goto myprintf::@23
  to:myprintf::@4
myprintf::@23: scope:[myprintf]  from myprintf::@37
  [118] (byte) myprintf::bDigits#1 ← (byte) myprintf::b#1 - (byte) '0'
  to:myprintf::@27
myprintf::@2: scope:[myprintf]  from myprintf::@1
  [119] if((byte) myprintf::b#1!=(byte) '%') goto myprintf::@28
  to:myprintf::@32
myprintf::@32: scope:[myprintf]  from myprintf::@2
  [120] if((byte) myprintf::bArg#12==(byte/signed byte/word/signed word/dword/signed dword) 0) goto myprintf::@42
  to:myprintf::@33
myprintf::@33: scope:[myprintf]  from myprintf::@32
  [121] if((byte) myprintf::bArg#12==(byte/signed byte/word/signed word/dword/signed dword) 1) goto myprintf::@43
  to:myprintf::@34
myprintf::@34: scope:[myprintf]  from myprintf::@33
  [122] (word~) myprintf::w#53 ← (word) myprintf::w3#7
  to:myprintf::@29
myprintf::@29: scope:[myprintf]  from myprintf::@34 myprintf::@42 myprintf::@43
  [123] (word) myprintf::w#21 ← phi( myprintf::@42/(word~) myprintf::w#51 myprintf::@43/(word~) myprintf::w#52 myprintf::@34/(word~) myprintf::w#53 )
  [124] (byte) myprintf::bArg#1 ← ++ (byte) myprintf::bArg#12
  to:myprintf::@27
myprintf::@43: scope:[myprintf]  from myprintf::@33
  [125] (word~) myprintf::w#52 ← (word) myprintf::w2#7
  to:myprintf::@29
myprintf::@42: scope:[myprintf]  from myprintf::@32
  [126] (word~) myprintf::w#51 ← (word) myprintf::w1#6
  to:myprintf::@29
myprintf::@28: scope:[myprintf]  from myprintf::@2
  [127] if((byte) myprintf::b#1>=(byte/signed byte/word/signed word/dword/signed dword) $41) goto myprintf::@41
  to:myprintf::@30
myprintf::@30: scope:[myprintf]  from myprintf::@28 myprintf::@35 myprintf::@41
  [128] (byte) myprintf::b#25 ← phi( myprintf::@28/(byte) myprintf::b#1 myprintf::@35/(byte) myprintf::b#6 )
  [129] *((const byte[$64]) strTemp#0 + (byte) myprintf::bLen#14) ← (byte) myprintf::b#25
  [130] (byte) myprintf::bLen#7 ← ++ (byte) myprintf::bLen#14
  to:myprintf::@27
myprintf::@41: scope:[myprintf]  from myprintf::@28
  [131] if((byte) myprintf::b#1<(byte/signed byte/word/signed word/dword/signed dword) $5a+(byte/signed byte/word/signed word/dword/signed dword) 1) goto myprintf::@35
  to:myprintf::@30
myprintf::@35: scope:[myprintf]  from myprintf::@41
  [132] (byte) myprintf::b#6 ← (byte) myprintf::b#1 + (byte/signed byte/word/signed word/dword/signed dword) $20
  to:myprintf::@30
utoa: scope:[utoa]  from myprintf::@7
  [133] phi()
  to:utoa::@13
utoa::@13: scope:[utoa]  from utoa
  [134] if((word) utoa::value#4>=(word/signed word/dword/signed dword) $2710) goto utoa::@5
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa::@13 utoa::@9
  [135] (byte*) utoa::dst#16 ← phi( utoa::@13/(const byte[6]) myprintf::buf6#0 utoa::@9/++(const byte[6]) myprintf::buf6#0 )
  [135] (word) utoa::value#6 ← phi( utoa::@13/(word) utoa::value#4 utoa::@9/(word) utoa::value#0 )
  [135] (byte) utoa::bStarted#5 ← phi( utoa::@13/(byte/signed byte/word/signed word/dword/signed dword) 0 utoa::@9/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [136] if((byte) utoa::bStarted#5==(byte/signed byte/word/signed word/dword/signed dword) 1) goto utoa::@6
  to:utoa::@14
utoa::@14: scope:[utoa]  from utoa::@1
  [137] if((word) utoa::value#6>=(word/signed word/dword/signed dword) $3e8) goto utoa::@6
  to:utoa::@2
utoa::@2: scope:[utoa]  from utoa::@10 utoa::@14
  [138] (byte*) utoa::dst#10 ← phi( utoa::@14/(byte*) utoa::dst#16 utoa::@10/(byte*) utoa::dst#1 )
  [138] (word) utoa::value#11 ← phi( utoa::@14/(word) utoa::value#6 utoa::@10/(word) utoa::value#1 )
  [138] (byte) utoa::bStarted#6 ← phi( utoa::@14/(byte) utoa::bStarted#5 utoa::@10/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [139] if((byte) utoa::bStarted#6==(byte/signed byte/word/signed word/dword/signed dword) 1) goto utoa::@7
  to:utoa::@15
utoa::@15: scope:[utoa]  from utoa::@2
  [140] if((word) utoa::value#11>=(byte/signed byte/word/signed word/dword/signed dword) $64) goto utoa::@7
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@11 utoa::@15
  [141] (byte*) utoa::dst#13 ← phi( utoa::@11/(byte*) utoa::dst#2 utoa::@15/(byte*) utoa::dst#10 )
  [141] (word) utoa::value#10 ← phi( utoa::@11/(word) utoa::value#2 utoa::@15/(word) utoa::value#11 )
  [141] (byte) utoa::bStarted#7 ← phi( utoa::@11/(byte/signed byte/word/signed word/dword/signed dword) 1 utoa::@15/(byte) utoa::bStarted#6 )
  [142] if((byte) utoa::bStarted#7==(byte/signed byte/word/signed word/dword/signed dword) 1) goto utoa::@8
  to:utoa::@16
utoa::@16: scope:[utoa]  from utoa::@3
  [143] if((word) utoa::value#10>=(byte/signed byte/word/signed word/dword/signed dword) $a) goto utoa::@8
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@12 utoa::@16
  [144] (byte*) utoa::dst#12 ← phi( utoa::@12/(byte*) utoa::dst#4 utoa::@16/(byte*) utoa::dst#13 )
  [144] (word) utoa::value#12 ← phi( utoa::@12/(word) utoa::value#3 utoa::@16/(word) utoa::value#10 )
  [145] (byte~) utoa::$16 ← ((byte)) (word) utoa::value#12
  [146] (byte~) utoa::$17 ← (byte) '0' + (byte~) utoa::$16
  [147] *((byte*) utoa::dst#12) ← (byte~) utoa::$17
  [148] (byte*) utoa::dst#3 ← ++ (byte*) utoa::dst#12
  [149] *((byte*) utoa::dst#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@4
  [150] return 
  to:@return
utoa::@8: scope:[utoa]  from utoa::@16 utoa::@3
  [151] (byte*) append::dst#3 ← (byte*) utoa::dst#13
  [152] (word) append::value#4 ← (word) utoa::value#10
  [153] call append 
  [154] (word) append::return#10 ← (word) append::value#5
  to:utoa::@12
utoa::@12: scope:[utoa]  from utoa::@8
  [155] (word) utoa::value#3 ← (word) append::return#10
  [156] (byte*) utoa::dst#4 ← ++ (byte*) utoa::dst#13
  to:utoa::@4
utoa::@7: scope:[utoa]  from utoa::@15 utoa::@2
  [157] (byte*) append::dst#2 ← (byte*) utoa::dst#10
  [158] (word) append::value#3 ← (word) utoa::value#11
  [159] call append 
  [160] (word) append::return#4 ← (word) append::value#5
  to:utoa::@11
utoa::@11: scope:[utoa]  from utoa::@7
  [161] (word) utoa::value#2 ← (word) append::return#4
  [162] (byte*) utoa::dst#2 ← ++ (byte*) utoa::dst#10
  to:utoa::@3
utoa::@6: scope:[utoa]  from utoa::@1 utoa::@14
  [163] (byte*) append::dst#1 ← (byte*) utoa::dst#16
  [164] (word) append::value#2 ← (word) utoa::value#6
  [165] call append 
  [166] (word) append::return#3 ← (word) append::value#5
  to:utoa::@10
utoa::@10: scope:[utoa]  from utoa::@6
  [167] (word) utoa::value#1 ← (word) append::return#3
  [168] (byte*) utoa::dst#1 ← ++ (byte*) utoa::dst#16
  to:utoa::@2
utoa::@5: scope:[utoa]  from utoa::@13
  [169] (word) append::value#1 ← (word) utoa::value#4
  [170] call append 
  [171] (word) append::return#2 ← (word) append::value#5
  to:utoa::@9
utoa::@9: scope:[utoa]  from utoa::@5
  [172] (word) utoa::value#0 ← (word) append::return#2
  to:utoa::@1
append: scope:[append]  from utoa::@5 utoa::@6 utoa::@7 utoa::@8
  [173] (word) append::sub#6 ← phi( utoa::@5/(word/signed word/dword/signed dword) $2710 utoa::@6/(word/signed word/dword/signed dword) $3e8 utoa::@7/(byte/signed byte/word/signed word/dword/signed dword) $64 utoa::@8/(byte/signed byte/word/signed word/dword/signed dword) $a )
  [173] (word) append::value#8 ← phi( utoa::@5/(word) append::value#1 utoa::@6/(word) append::value#2 utoa::@7/(word) append::value#3 utoa::@8/(word) append::value#4 )
  [173] (byte*) append::dst#4 ← phi( utoa::@5/(const byte[6]) myprintf::buf6#0 utoa::@6/(byte*) append::dst#1 utoa::@7/(byte*) append::dst#2 utoa::@8/(byte*) append::dst#3 )
  [174] *((byte*) append::dst#4) ← (byte) '0'
  to:append::@1
append::@1: scope:[append]  from append append::@2
  [175] (word) append::value#5 ← phi( append/(word) append::value#8 append::@2/(word) append::value#0 )
  [176] if((word) append::value#5>=(word) append::sub#6) goto append::@2
  to:append::@return
append::@return: scope:[append]  from append::@1
  [177] return 
  to:@return
append::@2: scope:[append]  from append::@1
  [178] *((byte*) append::dst#4) ← ++ *((byte*) append::dst#4)
  [179] (word) append::value#0 ← (word) append::value#5 - (word) append::sub#6
  to:append::@1
div10: scope:[div10]  from main::@6
  [180] (word~) div10::$0 ← (word) div10::val#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  [181] (word) div10::val#0 ← (word~) div10::$0 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [182] (word~) div10::$2 ← (word) div10::val#0 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [183] (word) div10::val#1 ← (word) div10::val#0 + (word~) div10::$2
  [184] (word~) div10::$3 ← (word) div10::val#1 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [185] (word) div10::val#2 ← (word) div10::val#1 + (word~) div10::$3
  [186] (word~) div10::$4 ← (word) div10::val#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [187] (word~) div10::$5 ← (word~) div10::$4 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [188] (word) div10::val#3 ← (word) div10::val#2 + (word~) div10::$5
  [189] (word) div10::return#0 ← (word) div10::val#3 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  to:div10::@return
div10::@return: scope:[div10]  from div10
  [190] return 
  to:@return
div16u: scope:[div16u]  from main::@2
  [191] (word) divr16u::dividend#1 ← (word) div16u::dividend#0
  [192] call divr16u 
  [193] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [194] (word) div16u::return#0 ← (word) divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [195] return 
  to:@return
divr16u: scope:[divr16u]  from div16u
  [196] phi()
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [197] (byte) divr16u::i#2 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(byte) divr16u::i#1 )
  [197] (word) divr16u::quotient#3 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(word) divr16u::return#0 )
  [197] (word) divr16u::dividend#2 ← phi( divr16u/(word) divr16u::dividend#1 divr16u::@3/(word) divr16u::dividend#0 )
  [197] (word) divr16u::rem#4 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(word) divr16u::rem#9 )
  [198] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [199] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  [200] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) $80
  [201] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [202] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [203] (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [204] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [205] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [206] if((word) divr16u::rem#5<(const word) div16u::divisor#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [207] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [208] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) div16u::divisor#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [209] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [209] (word) divr16u::rem#9 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  [210] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [211] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto divr16u::@1
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@3
  [212] return 
  to:@return
