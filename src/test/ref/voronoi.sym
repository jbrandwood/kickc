constant byte* COLORS = (byte*) 55296
constant byte* COLS[]  = { 1, 2, 3, 4, 5, 7 }
constant byte FILL = $e6
constant byte* SCREEN = (byte*) 1024
constant byte* XPOS[]  = { 5, $f, 6, $22, $15, $1f }
constant byte* YPOS[]  = { 5, 8, $e, 2, $11, $16 }
void animate()
byte~ animate::$0 reg byte x 202.0
byte~ animate::$12 reg byte x 202.0
byte~ animate::$15 reg byte x 202.0
byte~ animate::$18 reg byte x 202.0
byte~ animate::$3 reg byte x 202.0
byte~ animate::$6 reg byte a 202.0
byte~ animate::$9 reg byte a 202.0
byte findcol(byte findcol::x , byte findcol::y)
byte~ findcol::$11 reg byte a 2.0000000002E10
byte~ findcol::$9 reg byte a 2.0000000002E10
byte findcol::diff
byte findcol::diff#1 reg byte y 2.0000000002E10
byte findcol::diff#2 reg byte y 2.0000000002E10
byte findcol::diff#3 reg byte a 2.0000000002E10
byte findcol::diff#4 reg byte a 2.0000000002E10
byte findcol::diff#5 reg byte y 1.0000000001E10
byte findcol::diff#7 reg byte a 1.3333333334666666E10
byte findcol::i
byte findcol::i#1 i zp[1]:6 1.0000000001E10
byte findcol::i#10 i zp[1]:6 3.0000000003E9
byte findcol::mincol
byte findcol::mincol#1 reg byte x 2.0000000002E10
byte findcol::mincol#10 reg byte x 1.6666666668333335E9
byte findcol::mincol#4 reg byte x 1.0000000001E10
byte findcol::mindiff
byte findcol::mindiff#10 mindiff zp[1]:7 1.7647058825294118E9
byte findcol::mindiff#12 reg byte a 1.50000000015E10
byte findcol::mindiff#13 mindiff zp[1]:7 2.0000000002E10
byte findcol::mindiff#15 reg byte a 2.0000000002E10
byte findcol::return
byte findcol::return#0 reg byte a 200002.0
byte findcol::return#3 reg byte x 3.333366667333333E9
byte findcol::x
byte findcol::x#0 x zp[1]:5 1.6000040002E9
byte findcol::xp
byte findcol::xp#0 xp zp[1]:8 1.0000000001E10
byte findcol::y
byte findcol::y#0 y zp[1]:2 1.6666708335416665E9
byte findcol::yp
byte findcol::yp#0 yp zp[1]:9 6.250000000625E9
void initscreen()
byte* initscreen::screen
byte* initscreen::screen#1 screen zp[2]:3 202.0
byte* initscreen::screen#2 screen zp[2]:3 134.66666666666666
void main()
constant byte numpoints = 6
void render()
byte render::col
byte render::col#0 reg byte a 200002.0
byte* render::colline
byte* render::colline#1 colline zp[2]:3 6667.333333333333
byte* render::colline#5 colline zp[2]:3 12000.300000000001
byte render::x
byte render::x#1 x zp[1]:5 150001.5
byte render::x#2 x zp[1]:5 57143.42857142857
byte render::y
byte render::y#1 y zp[1]:2 15001.5
byte render::y#4 y zp[1]:2 10909.363636363636

zp[1]:2 [ render::y#4 render::y#1 findcol::y#0 ]
zp[2]:3 [ render::colline#5 render::colline#1 initscreen::screen#2 initscreen::screen#1 ]
zp[1]:5 [ render::x#2 render::x#1 findcol::x#0 ]
zp[1]:6 [ findcol::i#10 findcol::i#1 ]
zp[1]:7 [ findcol::mindiff#10 findcol::mindiff#13 ]
reg byte x [ findcol::return#3 findcol::mincol#10 findcol::mincol#4 findcol::mincol#1 ]
reg byte y [ findcol::diff#5 findcol::diff#2 findcol::diff#1 ]
reg byte a [ findcol::mindiff#12 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#15 ]
reg byte a [ findcol::return#0 ]
reg byte a [ render::col#0 ]
reg byte x [ animate::$0 ]
reg byte x [ animate::$3 ]
reg byte a [ animate::$6 ]
reg byte a [ animate::$9 ]
reg byte x [ animate::$12 ]
reg byte x [ animate::$15 ]
reg byte x [ animate::$18 ]
zp[1]:8 [ findcol::xp#0 ]
zp[1]:9 [ findcol::yp#0 ]
reg byte a [ findcol::$9 ]
reg byte a [ findcol::$11 ]
