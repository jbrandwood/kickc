Resolved forward reference PALETTE to PALETTE
Resolved forward reference PALETTE to PALETTE
Resolved forward reference FLOOR to FLOOR
Resolved forward reference FLAG to FLAG
Resolved forward reference SPRITES to SPRITES
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITES to SPRITES
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Inlined call call disableVideoOutput 
Inlined call call disableAudioOutput 
Inlined call call clearVBlankFlag 
Inlined call call waitForVBlank 
Inlined call call waitForVBlank 
Inlined call call ppuDataPrepare ppuDataFill::ppuData 
Inlined call call ppuDataPut ppuDataFill::val 
Inlined call call ppuDataPrepare ppuDataTransfer::ppuData 
Inlined call call ppuDataPut *ppuDataTransfer::cpuSrc 
Inlined call call ppuDataPrepare ppuDataFetch::ppuData 
Inlined call ppuDataFetch::$2 = call ppuDataRead 
Inlined call call ppuDataPrepare ppuDataPutTile::ppuData 
Inlined call call ppuDataPut ppuDataPutTile::tile[0] 
Inlined call call ppuDataPut ppuDataPutTile::tile[1] 
Inlined call call ppuDataPrepare (void* const)ppuDataPutTile::$3 
Inlined call call ppuDataPut ppuDataPutTile::tile[2] 
Inlined call call ppuDataPut ppuDataPutTile::tile[3] 
Inlined call call ppuDataPrepare ppuDataSet::ppuData 
Inlined call call ppuDataPut ppuDataSet::val 
Inlined call call ppuDataPrepare ppuDataGet::ppuData 
Inlined call ppuDataGet::$1 = call ppuDataRead 
Inlined call call initNES 
Inlined call call enableVideoOutput 
Inlined call call ppuSpriteBufferDmaTransfer SPRITE_BUFFER 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

byte readJoy1()
readJoy1: scope:[readJoy1]  from vblank
  readJoy1::$7 = (byte*)APU
  readJoy1::$4 = readJoy1::$7 + OFFSET_STRUCT_RICOH_2A03_JOY1
  *readJoy1::$4 = 1
  readJoy1::$8 = (byte*)APU
  readJoy1::$5 = readJoy1::$8 + OFFSET_STRUCT_RICOH_2A03_JOY1
  *readJoy1::$5 = 0
  readJoy1::joy#0 = 0
  readJoy1::i#0 = 0
  to:readJoy1::@1
readJoy1::@1: scope:[readJoy1]  from readJoy1 readJoy1::@2
  readJoy1::joy#4 = phi( readJoy1/readJoy1::joy#0, readJoy1::@2/readJoy1::joy#1 )
  readJoy1::i#2 = phi( readJoy1/readJoy1::i#0, readJoy1::@2/readJoy1::i#1 )
  readJoy1::$0 = readJoy1::i#2 < 8
  if(readJoy1::$0) goto readJoy1::@2
  to:readJoy1::@3
readJoy1::@2: scope:[readJoy1]  from readJoy1::@1
  readJoy1::i#3 = phi( readJoy1::@1/readJoy1::i#2 )
  readJoy1::joy#2 = phi( readJoy1::@1/readJoy1::joy#4 )
  readJoy1::$1 = readJoy1::joy#2 << 1
  readJoy1::$9 = (byte*)APU
  readJoy1::$6 = readJoy1::$9 + OFFSET_STRUCT_RICOH_2A03_JOY1
  readJoy1::$2 = *readJoy1::$6 & 1
  readJoy1::$3 = readJoy1::$1 | readJoy1::$2
  readJoy1::joy#1 = readJoy1::$3
  readJoy1::i#1 = ++ readJoy1::i#3
  to:readJoy1::@1
readJoy1::@3: scope:[readJoy1]  from readJoy1::@1
  readJoy1::joy#3 = phi( readJoy1::@1/readJoy1::joy#4 )
  readJoy1::return#0 = readJoy1::joy#3
  to:readJoy1::@return
readJoy1::@return: scope:[readJoy1]  from readJoy1::@3
  readJoy1::return#3 = phi( readJoy1::@3/readJoy1::return#0 )
  readJoy1::return#1 = readJoy1::return#3
  return 
  to:@return

void ppuDataFill(void* const ppuDataFill::ppuData , byte ppuDataFill::val , word ppuDataFill::size)
ppuDataFill: scope:[ppuDataFill]  from main::@6 main::@7
  ppuDataFill::val#8 = phi( main::@6/ppuDataFill::val#0, main::@7/ppuDataFill::val#1 )
  ppuDataFill::size#7 = phi( main::@6/ppuDataFill::size#0, main::@7/ppuDataFill::size#1 )
  ppuDataFill::ppuData#2 = phi( main::@6/ppuDataFill::ppuData#0, main::@7/ppuDataFill::ppuData#1 )
  ppuDataFill::ppuDataPrepare1_ppuData#0 = ppuDataFill::ppuData#2
  to:ppuDataFill::ppuDataPrepare1
ppuDataFill::ppuDataPrepare1: scope:[ppuDataFill]  from ppuDataFill
  ppuDataFill::val#6 = phi( ppuDataFill/ppuDataFill::val#8 )
  ppuDataFill::size#5 = phi( ppuDataFill/ppuDataFill::size#7 )
  ppuDataFill::ppuDataPrepare1_ppuData#1 = phi( ppuDataFill/ppuDataFill::ppuDataPrepare1_ppuData#0 )
  ppuDataFill::ppuDataPrepare1_$0 = > ppuDataFill::ppuDataPrepare1_ppuData#1
  ppuDataFill::ppuDataPrepare1_$4 = (byte*)PPU
  ppuDataFill::ppuDataPrepare1_$2 = ppuDataFill::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *ppuDataFill::ppuDataPrepare1_$2 = ppuDataFill::ppuDataPrepare1_$0
  ppuDataFill::ppuDataPrepare1_$1 = < ppuDataFill::ppuDataPrepare1_ppuData#1
  ppuDataFill::ppuDataPrepare1_$5 = (byte*)PPU
  ppuDataFill::ppuDataPrepare1_$3 = ppuDataFill::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *ppuDataFill::ppuDataPrepare1_$3 = ppuDataFill::ppuDataPrepare1_$1
  to:ppuDataFill::@3
ppuDataFill::@3: scope:[ppuDataFill]  from ppuDataFill::ppuDataPrepare1
  ppuDataFill::val#4 = phi( ppuDataFill::ppuDataPrepare1/ppuDataFill::val#6 )
  ppuDataFill::size#3 = phi( ppuDataFill::ppuDataPrepare1/ppuDataFill::size#5 )
  ppuDataFill::i#0 = 0
  to:ppuDataFill::@1
ppuDataFill::@1: scope:[ppuDataFill]  from ppuDataFill::@3 ppuDataFill::@4
  ppuDataFill::val#3 = phi( ppuDataFill::@3/ppuDataFill::val#4, ppuDataFill::@4/ppuDataFill::val#5 )
  ppuDataFill::size#2 = phi( ppuDataFill::@3/ppuDataFill::size#3, ppuDataFill::@4/ppuDataFill::size#4 )
  ppuDataFill::i#2 = phi( ppuDataFill::@3/ppuDataFill::i#0, ppuDataFill::@4/ppuDataFill::i#1 )
  ppuDataFill::$1 = ppuDataFill::i#2 < ppuDataFill::size#2
  if(ppuDataFill::$1) goto ppuDataFill::@2
  to:ppuDataFill::@return
ppuDataFill::@2: scope:[ppuDataFill]  from ppuDataFill::@1
  ppuDataFill::size#8 = phi( ppuDataFill::@1/ppuDataFill::size#2 )
  ppuDataFill::i#5 = phi( ppuDataFill::@1/ppuDataFill::i#2 )
  ppuDataFill::val#2 = phi( ppuDataFill::@1/ppuDataFill::val#3 )
  ppuDataFill::ppuDataPut1_val#0 = ppuDataFill::val#2
  to:ppuDataFill::ppuDataPut1
ppuDataFill::ppuDataPut1: scope:[ppuDataFill]  from ppuDataFill::@2
  ppuDataFill::val#7 = phi( ppuDataFill::@2/ppuDataFill::val#2 )
  ppuDataFill::size#6 = phi( ppuDataFill::@2/ppuDataFill::size#8 )
  ppuDataFill::i#4 = phi( ppuDataFill::@2/ppuDataFill::i#5 )
  ppuDataFill::ppuDataPut1_val#1 = phi( ppuDataFill::@2/ppuDataFill::ppuDataPut1_val#0 )
  ppuDataFill::ppuDataPut1_$1 = (byte*)PPU
  ppuDataFill::ppuDataPut1_$0 = ppuDataFill::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *ppuDataFill::ppuDataPut1_$0 = ppuDataFill::ppuDataPut1_val#1
  to:ppuDataFill::@4
ppuDataFill::@4: scope:[ppuDataFill]  from ppuDataFill::ppuDataPut1
  ppuDataFill::val#5 = phi( ppuDataFill::ppuDataPut1/ppuDataFill::val#7 )
  ppuDataFill::size#4 = phi( ppuDataFill::ppuDataPut1/ppuDataFill::size#6 )
  ppuDataFill::i#3 = phi( ppuDataFill::ppuDataPut1/ppuDataFill::i#4 )
  ppuDataFill::i#1 = ++ ppuDataFill::i#3
  to:ppuDataFill::@1
ppuDataFill::@return: scope:[ppuDataFill]  from ppuDataFill::@1
  return 
  to:@return

void ppuDataTransfer(void* const ppuDataTransfer::ppuData , void* const ppuDataTransfer::cpuData , word ppuDataTransfer::size)
ppuDataTransfer: scope:[ppuDataTransfer]  from main::@5
  ppuDataTransfer::size#6 = phi( main::@5/ppuDataTransfer::size#0 )
  ppuDataTransfer::cpuData#3 = phi( main::@5/ppuDataTransfer::cpuData#0 )
  ppuDataTransfer::ppuData#1 = phi( main::@5/ppuDataTransfer::ppuData#0 )
  ppuDataTransfer::ppuDataPrepare1_ppuData#0 = ppuDataTransfer::ppuData#1
  to:ppuDataTransfer::ppuDataPrepare1
ppuDataTransfer::ppuDataPrepare1: scope:[ppuDataTransfer]  from ppuDataTransfer
  ppuDataTransfer::size#4 = phi( ppuDataTransfer/ppuDataTransfer::size#6 )
  ppuDataTransfer::cpuData#2 = phi( ppuDataTransfer/ppuDataTransfer::cpuData#3 )
  ppuDataTransfer::ppuDataPrepare1_ppuData#1 = phi( ppuDataTransfer/ppuDataTransfer::ppuDataPrepare1_ppuData#0 )
  ppuDataTransfer::ppuDataPrepare1_$0 = > ppuDataTransfer::ppuDataPrepare1_ppuData#1
  ppuDataTransfer::ppuDataPrepare1_$4 = (byte*)PPU
  ppuDataTransfer::ppuDataPrepare1_$2 = ppuDataTransfer::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *ppuDataTransfer::ppuDataPrepare1_$2 = ppuDataTransfer::ppuDataPrepare1_$0
  ppuDataTransfer::ppuDataPrepare1_$1 = < ppuDataTransfer::ppuDataPrepare1_ppuData#1
  ppuDataTransfer::ppuDataPrepare1_$5 = (byte*)PPU
  ppuDataTransfer::ppuDataPrepare1_$3 = ppuDataTransfer::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *ppuDataTransfer::ppuDataPrepare1_$3 = ppuDataTransfer::ppuDataPrepare1_$1
  to:ppuDataTransfer::@3
ppuDataTransfer::@3: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPrepare1
  ppuDataTransfer::size#2 = phi( ppuDataTransfer::ppuDataPrepare1/ppuDataTransfer::size#4 )
  ppuDataTransfer::cpuData#1 = phi( ppuDataTransfer::ppuDataPrepare1/ppuDataTransfer::cpuData#2 )
  ppuDataTransfer::cpuSrc#0 = (byte*)ppuDataTransfer::cpuData#1
  ppuDataTransfer::i#0 = 0
  to:ppuDataTransfer::@1
ppuDataTransfer::@1: scope:[ppuDataTransfer]  from ppuDataTransfer::@3 ppuDataTransfer::@4
  ppuDataTransfer::cpuSrc#4 = phi( ppuDataTransfer::@3/ppuDataTransfer::cpuSrc#0, ppuDataTransfer::@4/ppuDataTransfer::cpuSrc#1 )
  ppuDataTransfer::size#1 = phi( ppuDataTransfer::@3/ppuDataTransfer::size#2, ppuDataTransfer::@4/ppuDataTransfer::size#3 )
  ppuDataTransfer::i#2 = phi( ppuDataTransfer::@3/ppuDataTransfer::i#0, ppuDataTransfer::@4/ppuDataTransfer::i#1 )
  ppuDataTransfer::$1 = ppuDataTransfer::i#2 < ppuDataTransfer::size#1
  if(ppuDataTransfer::$1) goto ppuDataTransfer::@2
  to:ppuDataTransfer::@return
ppuDataTransfer::@2: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  ppuDataTransfer::size#7 = phi( ppuDataTransfer::@1/ppuDataTransfer::size#1 )
  ppuDataTransfer::i#5 = phi( ppuDataTransfer::@1/ppuDataTransfer::i#2 )
  ppuDataTransfer::cpuSrc#2 = phi( ppuDataTransfer::@1/ppuDataTransfer::cpuSrc#4 )
  ppuDataTransfer::ppuDataPut1_val#0 = *ppuDataTransfer::cpuSrc#2
  to:ppuDataTransfer::ppuDataPut1
ppuDataTransfer::ppuDataPut1: scope:[ppuDataTransfer]  from ppuDataTransfer::@2
  ppuDataTransfer::size#5 = phi( ppuDataTransfer::@2/ppuDataTransfer::size#7 )
  ppuDataTransfer::i#4 = phi( ppuDataTransfer::@2/ppuDataTransfer::i#5 )
  ppuDataTransfer::cpuSrc#5 = phi( ppuDataTransfer::@2/ppuDataTransfer::cpuSrc#2 )
  ppuDataTransfer::ppuDataPut1_val#1 = phi( ppuDataTransfer::@2/ppuDataTransfer::ppuDataPut1_val#0 )
  ppuDataTransfer::ppuDataPut1_$1 = (byte*)PPU
  ppuDataTransfer::ppuDataPut1_$0 = ppuDataTransfer::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *ppuDataTransfer::ppuDataPut1_$0 = ppuDataTransfer::ppuDataPut1_val#1
  to:ppuDataTransfer::@4
ppuDataTransfer::@4: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPut1
  ppuDataTransfer::size#3 = phi( ppuDataTransfer::ppuDataPut1/ppuDataTransfer::size#5 )
  ppuDataTransfer::i#3 = phi( ppuDataTransfer::ppuDataPut1/ppuDataTransfer::i#4 )
  ppuDataTransfer::cpuSrc#3 = phi( ppuDataTransfer::ppuDataPut1/ppuDataTransfer::cpuSrc#5 )
  ppuDataTransfer::cpuSrc#1 = ++ ppuDataTransfer::cpuSrc#3
  ppuDataTransfer::i#1 = ++ ppuDataTransfer::i#3
  to:ppuDataTransfer::@1
ppuDataTransfer::@return: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  return 
  to:@return

void ppuDataPutTile(void* const ppuDataPutTile::ppuData , byte* ppuDataPutTile::tile)
ppuDataPutTile: scope:[ppuDataPutTile]  from main::@2 main::@3
  ppuDataPutTile::tile#10 = phi( main::@2/ppuDataPutTile::tile#0, main::@3/ppuDataPutTile::tile#1 )
  ppuDataPutTile::ppuData#2 = phi( main::@2/ppuDataPutTile::ppuData#0, main::@3/ppuDataPutTile::ppuData#1 )
  ppuDataPutTile::ppuDataPrepare1_ppuData#0 = ppuDataPutTile::ppuData#2
  to:ppuDataPutTile::ppuDataPrepare1
ppuDataPutTile::ppuDataPrepare1: scope:[ppuDataPutTile]  from ppuDataPutTile
  ppuDataPutTile::ppuData#8 = phi( ppuDataPutTile/ppuDataPutTile::ppuData#2 )
  ppuDataPutTile::tile#6 = phi( ppuDataPutTile/ppuDataPutTile::tile#10 )
  ppuDataPutTile::ppuDataPrepare1_ppuData#1 = phi( ppuDataPutTile/ppuDataPutTile::ppuDataPrepare1_ppuData#0 )
  ppuDataPutTile::ppuDataPrepare1_$0 = > ppuDataPutTile::ppuDataPrepare1_ppuData#1
  ppuDataPutTile::ppuDataPrepare1_$4 = (byte*)PPU
  ppuDataPutTile::ppuDataPrepare1_$2 = ppuDataPutTile::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *ppuDataPutTile::ppuDataPrepare1_$2 = ppuDataPutTile::ppuDataPrepare1_$0
  ppuDataPutTile::ppuDataPrepare1_$1 = < ppuDataPutTile::ppuDataPrepare1_ppuData#1
  ppuDataPutTile::ppuDataPrepare1_$5 = (byte*)PPU
  ppuDataPutTile::ppuDataPrepare1_$3 = ppuDataPutTile::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *ppuDataPutTile::ppuDataPrepare1_$3 = ppuDataPutTile::ppuDataPrepare1_$1
  to:ppuDataPutTile::@1
ppuDataPutTile::@1: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPrepare1
  ppuDataPutTile::ppuData#7 = phi( ppuDataPutTile::ppuDataPrepare1/ppuDataPutTile::ppuData#8 )
  ppuDataPutTile::tile#2 = phi( ppuDataPutTile::ppuDataPrepare1/ppuDataPutTile::tile#6 )
  ppuDataPutTile::ppuDataPut1_val#0 = ppuDataPutTile::tile#2[0]
  to:ppuDataPutTile::ppuDataPut1
ppuDataPutTile::ppuDataPut1: scope:[ppuDataPutTile]  from ppuDataPutTile::@1
  ppuDataPutTile::ppuData#6 = phi( ppuDataPutTile::@1/ppuDataPutTile::ppuData#7 )
  ppuDataPutTile::tile#7 = phi( ppuDataPutTile::@1/ppuDataPutTile::tile#2 )
  ppuDataPutTile::ppuDataPut1_val#1 = phi( ppuDataPutTile::@1/ppuDataPutTile::ppuDataPut1_val#0 )
  ppuDataPutTile::ppuDataPut1_$1 = (byte*)PPU
  ppuDataPutTile::ppuDataPut1_$0 = ppuDataPutTile::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *ppuDataPutTile::ppuDataPut1_$0 = ppuDataPutTile::ppuDataPut1_val#1
  to:ppuDataPutTile::@2
ppuDataPutTile::@2: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPut1
  ppuDataPutTile::ppuData#5 = phi( ppuDataPutTile::ppuDataPut1/ppuDataPutTile::ppuData#6 )
  ppuDataPutTile::tile#3 = phi( ppuDataPutTile::ppuDataPut1/ppuDataPutTile::tile#7 )
  ppuDataPutTile::ppuDataPut2_val#0 = ppuDataPutTile::tile#3[1]
  to:ppuDataPutTile::ppuDataPut2
ppuDataPutTile::ppuDataPut2: scope:[ppuDataPutTile]  from ppuDataPutTile::@2
  ppuDataPutTile::tile#12 = phi( ppuDataPutTile::@2/ppuDataPutTile::tile#3 )
  ppuDataPutTile::ppuData#4 = phi( ppuDataPutTile::@2/ppuDataPutTile::ppuData#5 )
  ppuDataPutTile::ppuDataPut2_val#1 = phi( ppuDataPutTile::@2/ppuDataPutTile::ppuDataPut2_val#0 )
  ppuDataPutTile::ppuDataPut2_$1 = (byte*)PPU
  ppuDataPutTile::ppuDataPut2_$0 = ppuDataPutTile::ppuDataPut2_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *ppuDataPutTile::ppuDataPut2_$0 = ppuDataPutTile::ppuDataPut2_val#1
  to:ppuDataPutTile::@3
ppuDataPutTile::@3: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPut2
  ppuDataPutTile::tile#11 = phi( ppuDataPutTile::ppuDataPut2/ppuDataPutTile::tile#12 )
  ppuDataPutTile::ppuData#3 = phi( ppuDataPutTile::ppuDataPut2/ppuDataPutTile::ppuData#4 )
  ppuDataPutTile::$7 = (byte*)ppuDataPutTile::ppuData#3
  ppuDataPutTile::$3 = ppuDataPutTile::$7 + $20
  ppuDataPutTile::ppuDataPrepare2_ppuData#0 = (void* const)ppuDataPutTile::$3
  to:ppuDataPutTile::ppuDataPrepare2
ppuDataPutTile::ppuDataPrepare2: scope:[ppuDataPutTile]  from ppuDataPutTile::@3
  ppuDataPutTile::tile#8 = phi( ppuDataPutTile::@3/ppuDataPutTile::tile#11 )
  ppuDataPutTile::ppuDataPrepare2_ppuData#1 = phi( ppuDataPutTile::@3/ppuDataPutTile::ppuDataPrepare2_ppuData#0 )
  ppuDataPutTile::ppuDataPrepare2_$0 = > ppuDataPutTile::ppuDataPrepare2_ppuData#1
  ppuDataPutTile::ppuDataPrepare2_$4 = (byte*)PPU
  ppuDataPutTile::ppuDataPrepare2_$2 = ppuDataPutTile::ppuDataPrepare2_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *ppuDataPutTile::ppuDataPrepare2_$2 = ppuDataPutTile::ppuDataPrepare2_$0
  ppuDataPutTile::ppuDataPrepare2_$1 = < ppuDataPutTile::ppuDataPrepare2_ppuData#1
  ppuDataPutTile::ppuDataPrepare2_$5 = (byte*)PPU
  ppuDataPutTile::ppuDataPrepare2_$3 = ppuDataPutTile::ppuDataPrepare2_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *ppuDataPutTile::ppuDataPrepare2_$3 = ppuDataPutTile::ppuDataPrepare2_$1
  to:ppuDataPutTile::@4
ppuDataPutTile::@4: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPrepare2
  ppuDataPutTile::tile#4 = phi( ppuDataPutTile::ppuDataPrepare2/ppuDataPutTile::tile#8 )
  ppuDataPutTile::ppuDataPut3_val#0 = ppuDataPutTile::tile#4[2]
  to:ppuDataPutTile::ppuDataPut3
ppuDataPutTile::ppuDataPut3: scope:[ppuDataPutTile]  from ppuDataPutTile::@4
  ppuDataPutTile::tile#9 = phi( ppuDataPutTile::@4/ppuDataPutTile::tile#4 )
  ppuDataPutTile::ppuDataPut3_val#1 = phi( ppuDataPutTile::@4/ppuDataPutTile::ppuDataPut3_val#0 )
  ppuDataPutTile::ppuDataPut3_$1 = (byte*)PPU
  ppuDataPutTile::ppuDataPut3_$0 = ppuDataPutTile::ppuDataPut3_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *ppuDataPutTile::ppuDataPut3_$0 = ppuDataPutTile::ppuDataPut3_val#1
  to:ppuDataPutTile::@5
ppuDataPutTile::@5: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPut3
  ppuDataPutTile::tile#5 = phi( ppuDataPutTile::ppuDataPut3/ppuDataPutTile::tile#9 )
  ppuDataPutTile::ppuDataPut4_val#0 = ppuDataPutTile::tile#5[3]
  to:ppuDataPutTile::ppuDataPut4
ppuDataPutTile::ppuDataPut4: scope:[ppuDataPutTile]  from ppuDataPutTile::@5
  ppuDataPutTile::ppuDataPut4_val#1 = phi( ppuDataPutTile::@5/ppuDataPutTile::ppuDataPut4_val#0 )
  ppuDataPutTile::ppuDataPut4_$1 = (byte*)PPU
  ppuDataPutTile::ppuDataPut4_$0 = ppuDataPutTile::ppuDataPut4_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *ppuDataPutTile::ppuDataPut4_$0 = ppuDataPutTile::ppuDataPut4_val#1
  to:ppuDataPutTile::@return
ppuDataPutTile::@return: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPut4
  return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from main::@10
  memcpy::num#1 = phi( main::@10/memcpy::num#0 )
  memcpy::destination#1 = phi( main::@10/memcpy::destination#0 )
  memcpy::source#1 = phi( main::@10/memcpy::source#0 )
  memcpy::src#0 = ((byte*)) memcpy::source#1
  memcpy::dst#0 = ((byte*)) memcpy::destination#1
  memcpy::$2 = (byte*)memcpy::source#1
  memcpy::$0 = memcpy::$2 + memcpy::num#1
  memcpy::src_end#0 = memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  memcpy::destination#3 = phi( memcpy/memcpy::destination#1, memcpy::@2/memcpy::destination#4 )
  memcpy::dst#3 = phi( memcpy/memcpy::dst#0, memcpy::@2/memcpy::dst#1 )
  memcpy::src_end#1 = phi( memcpy/memcpy::src_end#0, memcpy::@2/memcpy::src_end#2 )
  memcpy::src#2 = phi( memcpy/memcpy::src#0, memcpy::@2/memcpy::src#1 )
  memcpy::$1 = memcpy::src#2 != memcpy::src_end#1
  if(memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  memcpy::destination#4 = phi( memcpy::@1/memcpy::destination#3 )
  memcpy::src_end#2 = phi( memcpy::@1/memcpy::src_end#1 )
  memcpy::dst#2 = phi( memcpy::@1/memcpy::dst#3 )
  memcpy::src#3 = phi( memcpy::@1/memcpy::src#2 )
  *memcpy::dst#2 = *memcpy::src#3
  memcpy::dst#1 = ++ memcpy::dst#2
  memcpy::src#1 = ++ memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  memcpy::destination#2 = phi( memcpy::@1/memcpy::destination#3 )
  memcpy::return#0 = memcpy::destination#2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  memcpy::return#3 = phi( memcpy::@3/memcpy::return#0 )
  memcpy::return#1 = memcpy::return#3
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  to:main::initNES1
main::initNES1: scope:[main]  from main
  asm { cld ldx#$ff txs  }
  to:main::initNES1_disableVideoOutput1
main::initNES1_disableVideoOutput1: scope:[main]  from main::initNES1
  main::initNES1_disableVideoOutput1_$2 = (byte*)PPU
  main::initNES1_disableVideoOutput1_$0 = main::initNES1_disableVideoOutput1_$2 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL
  *main::initNES1_disableVideoOutput1_$0 = 0
  main::initNES1_disableVideoOutput1_$3 = (byte*)PPU
  main::initNES1_disableVideoOutput1_$1 = main::initNES1_disableVideoOutput1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUMASK
  *main::initNES1_disableVideoOutput1_$1 = 0
  to:main::initNES1_disableAudioOutput1
main::initNES1_disableAudioOutput1: scope:[main]  from main::initNES1_disableVideoOutput1
  *FR_COUNTER = $40
  main::initNES1_disableAudioOutput1_$1 = (byte*)APU
  main::initNES1_disableAudioOutput1_$0 = main::initNES1_disableAudioOutput1_$1 + OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
  *main::initNES1_disableAudioOutput1_$0 = $40
  to:main::initNES1_clearVBlankFlag1
main::initNES1_clearVBlankFlag1: scope:[main]  from main::initNES1_disableAudioOutput1
  asm { ldaPPU_PPUSTATUS  }
  to:main::initNES1_waitForVBlank1
main::initNES1_waitForVBlank1: scope:[main]  from main::initNES1_clearVBlankFlag1
  to:main::initNES1_waitForVBlank1_@1
main::initNES1_waitForVBlank1_@1: scope:[main]  from main::initNES1_waitForVBlank1 main::initNES1_waitForVBlank1_@1
  main::initNES1_waitForVBlank1_$3 = (volatile byte*)PPU
  main::initNES1_waitForVBlank1_$2 = main::initNES1_waitForVBlank1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
  main::initNES1_waitForVBlank1_$0 = *main::initNES1_waitForVBlank1_$2 & $80
  main::initNES1_waitForVBlank1_$4 = 0 != main::initNES1_waitForVBlank1_$0
  main::initNES1_waitForVBlank1_$1 = ! main::initNES1_waitForVBlank1_$4
  if(main::initNES1_waitForVBlank1_$1) goto main::initNES1_waitForVBlank1_@1
  to:main::initNES1_@6
main::initNES1_@6: scope:[main]  from main::initNES1_waitForVBlank1_@1
  main::initNES1_i#0 = 0
  to:main::initNES1_@1
main::initNES1_@1: scope:[main]  from main::initNES1_@1 main::initNES1_@6
  main::initNES1_i#2 = phi( main::initNES1_@1/main::initNES1_i#1, main::initNES1_@6/main::initNES1_i#0 )
  (MEMORY+0)[main::initNES1_i#2] = 0
  (MEMORY+$100)[main::initNES1_i#2] = 0
  (MEMORY+$200)[main::initNES1_i#2] = 0
  (MEMORY+$300)[main::initNES1_i#2] = 0
  (MEMORY+$400)[main::initNES1_i#2] = 0
  (MEMORY+$500)[main::initNES1_i#2] = 0
  (MEMORY+$600)[main::initNES1_i#2] = 0
  (MEMORY+$700)[main::initNES1_i#2] = 0
  main::initNES1_i#1 = ++ main::initNES1_i#2
  main::initNES1_$5 = 0 != main::initNES1_i#1
  if(main::initNES1_$5) goto main::initNES1_@1
  to:main::initNES1_waitForVBlank2
main::initNES1_waitForVBlank2: scope:[main]  from main::initNES1_@1
  to:main::initNES1_waitForVBlank2_@1
main::initNES1_waitForVBlank2_@1: scope:[main]  from main::initNES1_waitForVBlank2 main::initNES1_waitForVBlank2_@1
  main::initNES1_waitForVBlank2_$3 = (volatile byte*)PPU
  main::initNES1_waitForVBlank2_$2 = main::initNES1_waitForVBlank2_$3 + OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
  main::initNES1_waitForVBlank2_$0 = *main::initNES1_waitForVBlank2_$2 & $80
  main::initNES1_waitForVBlank2_$4 = 0 != main::initNES1_waitForVBlank2_$0
  main::initNES1_waitForVBlank2_$1 = ! main::initNES1_waitForVBlank2_$4
  if(main::initNES1_waitForVBlank2_$1) goto main::initNES1_waitForVBlank2_@1
  to:main::initNES1_@7
main::initNES1_@7: scope:[main]  from main::initNES1_waitForVBlank2_@1
  asm { ldaPPU_PPUSTATUS  }
  to:main::@5
main::@5: scope:[main]  from main::initNES1_@7
  main::$1 = sizeof  PALETTE
  ppuDataTransfer::ppuData#0 = (void* const)PPU_PALETTE
  ppuDataTransfer::cpuData#0 = (void* const)PALETTE
  ppuDataTransfer::size#0 = main::$1
  call ppuDataTransfer 
  to:main::@6
main::@6: scope:[main]  from main::@5
  ppuDataFill::ppuData#0 = (void* const)PPU_NAME_TABLE_0
  ppuDataFill::val#0 = $fc
  ppuDataFill::size#0 = $3c0
  call ppuDataFill 
  to:main::@7
main::@7: scope:[main]  from main::@6
  ppuDataFill::ppuData#1 = (void* const)PPU_ATTRIBUTE_TABLE_0
  ppuDataFill::val#1 = 0
  ppuDataFill::size#1 = $40
  call ppuDataFill 
  to:main::@8
main::@8: scope:[main]  from main::@7
  main::x#0 = 0
  to:main::@1
main::@1: scope:[main]  from main::@8 main::@9
  main::x#2 = phi( main::@8/main::x#0, main::@9/main::x#1 )
  main::$9 = main::x#2 < $20
  if(main::$9) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  main::x#3 = phi( main::@1/main::x#2 )
  main::$10 = PPU_NAME_TABLE_0+$14*$20 + main::x#3
  ppuDataPutTile::ppuData#0 = (void* const)main::$10
  ppuDataPutTile::tile#0 = FLOOR
  call ppuDataPutTile 
  to:main::@9
main::@9: scope:[main]  from main::@2
  main::x#4 = phi( main::@2/main::x#3 )
  main::x#1 = main::x#4 + 2
  to:main::@1
main::@3: scope:[main]  from main::@1
  ppuDataPutTile::ppuData#1 = (void* const)PPU_NAME_TABLE_0+$12*$20+$1c
  ppuDataPutTile::tile#1 = FLAG
  call ppuDataPutTile 
  to:main::@10
main::@10: scope:[main]  from main::@3
  main::$6 = sizeof  SPRITES
  memcpy::destination#0 = (void*)SPRITE_BUFFER
  memcpy::source#0 = (void*)SPRITES
  memcpy::num#0 = main::$6
  call memcpy 
  memcpy::return#2 = memcpy::return#1
  to:main::@11
main::@11: scope:[main]  from main::@10
  to:main::enableVideoOutput1
main::enableVideoOutput1: scope:[main]  from main::@11
  main::enableVideoOutput1_$2 = (byte*)PPU
  main::enableVideoOutput1_$0 = main::enableVideoOutput1_$2 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL
  *main::enableVideoOutput1_$0 = $80
  main::enableVideoOutput1_$3 = (byte*)PPU
  main::enableVideoOutput1_$1 = main::enableVideoOutput1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUMASK
  *main::enableVideoOutput1_$1 = $1e
  to:main::@4
main::@4: scope:[main]  from main::@4 main::enableVideoOutput1
  main::$12 = 0 != 1
  if(main::$12) goto main::@4
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return

__interrupt(hardware_all) void vblank()
vblank: scope:[vblank]  from
  call readJoy1 
  readJoy1::return#2 = readJoy1::return#1
  to:vblank::@10
vblank::@10: scope:[vblank]  from vblank
  readJoy1::return#4 = phi( vblank/readJoy1::return#2 )
  vblank::$0 = readJoy1::return#4
  vblank::joy#0 = vblank::$0
  vblank::$1 = vblank::joy#0 & JOY_DOWN
  vblank::$110 = 0 != vblank::$1
  vblank::$2 = ! vblank::$110
  if(vblank::$2) goto vblank::@1
  to:vblank::@5
vblank::@1: scope:[vblank]  from vblank::@10 vblank::@5
  vblank::joy#1 = phi( vblank::@10/vblank::joy#0, vblank::@5/vblank::joy#4 )
  vblank::$3 = vblank::joy#1 & JOY_UP
  vblank::$111 = 0 != vblank::$3
  vblank::$4 = ! vblank::$111
  if(vblank::$4) goto vblank::@2
  to:vblank::@6
vblank::@5: scope:[vblank]  from vblank::@10
  vblank::joy#4 = phi( vblank::@10/vblank::joy#0 )
  vblank::$27 = 0 * SIZEOF_STRUCT_SPRITEDATA
  vblank::$59 = (byte*)SPRITE_BUFFER + vblank::$27
  vblank::$60 = (byte*)SPRITE_BUFFER + vblank::$27
  vblank::$60[OFFSET_STRUCT_SPRITEDATA_Y] = ++ vblank::$59[OFFSET_STRUCT_SPRITEDATA_Y]
  vblank::$29 = 1 * SIZEOF_STRUCT_SPRITEDATA
  vblank::$62 = (byte*)SPRITE_BUFFER + vblank::$29
  vblank::$63 = (byte*)SPRITE_BUFFER + vblank::$29
  vblank::$63[OFFSET_STRUCT_SPRITEDATA_Y] = ++ vblank::$62[OFFSET_STRUCT_SPRITEDATA_Y]
  vblank::$31 = 2 * SIZEOF_STRUCT_SPRITEDATA
  vblank::$65 = (byte*)SPRITE_BUFFER + vblank::$31
  vblank::$66 = (byte*)SPRITE_BUFFER + vblank::$31
  vblank::$66[OFFSET_STRUCT_SPRITEDATA_Y] = ++ vblank::$65[OFFSET_STRUCT_SPRITEDATA_Y]
  vblank::$33 = 3 * SIZEOF_STRUCT_SPRITEDATA
  vblank::$68 = (byte*)SPRITE_BUFFER + vblank::$33
  vblank::$69 = (byte*)SPRITE_BUFFER + vblank::$33
  vblank::$69[OFFSET_STRUCT_SPRITEDATA_Y] = ++ vblank::$68[OFFSET_STRUCT_SPRITEDATA_Y]
  to:vblank::@1
vblank::@2: scope:[vblank]  from vblank::@1 vblank::@6
  vblank::joy#2 = phi( vblank::@1/vblank::joy#1, vblank::@6/vblank::joy#5 )
  vblank::$5 = vblank::joy#2 & JOY_LEFT
  vblank::$112 = 0 != vblank::$5
  vblank::$6 = ! vblank::$112
  if(vblank::$6) goto vblank::@3
  to:vblank::@7
vblank::@6: scope:[vblank]  from vblank::@1
  vblank::joy#5 = phi( vblank::@1/vblank::joy#1 )
  vblank::$35 = 0 * SIZEOF_STRUCT_SPRITEDATA
  vblank::$71 = (byte*)SPRITE_BUFFER + vblank::$35
  vblank::$72 = (byte*)SPRITE_BUFFER + vblank::$35
  vblank::$72[OFFSET_STRUCT_SPRITEDATA_Y] = -- vblank::$71[OFFSET_STRUCT_SPRITEDATA_Y]
  vblank::$37 = 1 * SIZEOF_STRUCT_SPRITEDATA
  vblank::$74 = (byte*)SPRITE_BUFFER + vblank::$37
  vblank::$75 = (byte*)SPRITE_BUFFER + vblank::$37
  vblank::$75[OFFSET_STRUCT_SPRITEDATA_Y] = -- vblank::$74[OFFSET_STRUCT_SPRITEDATA_Y]
  vblank::$39 = 2 * SIZEOF_STRUCT_SPRITEDATA
  vblank::$77 = (byte*)SPRITE_BUFFER + vblank::$39
  vblank::$78 = (byte*)SPRITE_BUFFER + vblank::$39
  vblank::$78[OFFSET_STRUCT_SPRITEDATA_Y] = -- vblank::$77[OFFSET_STRUCT_SPRITEDATA_Y]
  vblank::$41 = 3 * SIZEOF_STRUCT_SPRITEDATA
  vblank::$80 = (byte*)SPRITE_BUFFER + vblank::$41
  vblank::$81 = (byte*)SPRITE_BUFFER + vblank::$41
  vblank::$81[OFFSET_STRUCT_SPRITEDATA_Y] = -- vblank::$80[OFFSET_STRUCT_SPRITEDATA_Y]
  to:vblank::@2
vblank::@3: scope:[vblank]  from vblank::@2 vblank::@7
  vblank::joy#3 = phi( vblank::@2/vblank::joy#2, vblank::@7/vblank::joy#6 )
  vblank::$7 = vblank::joy#3 & JOY_RIGHT
  vblank::$113 = 0 != vblank::$7
  vblank::$8 = ! vblank::$113
  if(vblank::$8) goto vblank::@4
  to:vblank::@8
vblank::@7: scope:[vblank]  from vblank::@2
  vblank::joy#6 = phi( vblank::@2/vblank::joy#2 )
  vblank::$43 = 0 * SIZEOF_STRUCT_SPRITEDATA
  vblank::$83 = (byte*)SPRITE_BUFFER + vblank::$43
  vblank::$84 = (byte*)SPRITE_BUFFER + vblank::$43
  vblank::$84[OFFSET_STRUCT_SPRITEDATA_X] = -- vblank::$83[OFFSET_STRUCT_SPRITEDATA_X]
  vblank::$45 = 1 * SIZEOF_STRUCT_SPRITEDATA
  vblank::$86 = (byte*)SPRITE_BUFFER + vblank::$45
  vblank::$87 = (byte*)SPRITE_BUFFER + vblank::$45
  vblank::$87[OFFSET_STRUCT_SPRITEDATA_X] = -- vblank::$86[OFFSET_STRUCT_SPRITEDATA_X]
  vblank::$47 = 2 * SIZEOF_STRUCT_SPRITEDATA
  vblank::$89 = (byte*)SPRITE_BUFFER + vblank::$47
  vblank::$90 = (byte*)SPRITE_BUFFER + vblank::$47
  vblank::$90[OFFSET_STRUCT_SPRITEDATA_X] = -- vblank::$89[OFFSET_STRUCT_SPRITEDATA_X]
  vblank::$49 = 3 * SIZEOF_STRUCT_SPRITEDATA
  vblank::$92 = (byte*)SPRITE_BUFFER + vblank::$49
  vblank::$93 = (byte*)SPRITE_BUFFER + vblank::$49
  vblank::$93[OFFSET_STRUCT_SPRITEDATA_X] = -- vblank::$92[OFFSET_STRUCT_SPRITEDATA_X]
  to:vblank::@3
vblank::@4: scope:[vblank]  from vblank::@3 vblank::@8
  vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 = SPRITE_BUFFER
  to:vblank::ppuSpriteBufferDmaTransfer1
vblank::ppuSpriteBufferDmaTransfer1: scope:[vblank]  from vblank::@4
  vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#1 = phi( vblank::@4/vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 )
  vblank::ppuSpriteBufferDmaTransfer1_$3 = (byte*)PPU
  vblank::ppuSpriteBufferDmaTransfer1_$1 = vblank::ppuSpriteBufferDmaTransfer1_$3 + OFFSET_STRUCT_RICOH_2C02_OAMADDR
  *vblank::ppuSpriteBufferDmaTransfer1_$1 = 0
  vblank::ppuSpriteBufferDmaTransfer1_$0 = > vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#1
  vblank::ppuSpriteBufferDmaTransfer1_$4 = (byte*)APU
  vblank::ppuSpriteBufferDmaTransfer1_$2 = vblank::ppuSpriteBufferDmaTransfer1_$4 + OFFSET_STRUCT_RICOH_2A03_OAMDMA
  *vblank::ppuSpriteBufferDmaTransfer1_$2 = vblank::ppuSpriteBufferDmaTransfer1_$0
  to:vblank::@9
vblank::@9: scope:[vblank]  from vblank::ppuSpriteBufferDmaTransfer1
  vblank::$108 = (byte*)PPU
  vblank::$94 = vblank::$108 + OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
  *vblank::$94 = 0
  vblank::$109 = (byte*)PPU
  vblank::$95 = vblank::$109 + OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
  *vblank::$95 = -8
  to:vblank::@return
vblank::@8: scope:[vblank]  from vblank::@3
  vblank::$51 = 0 * SIZEOF_STRUCT_SPRITEDATA
  vblank::$97 = (byte*)SPRITE_BUFFER + vblank::$51
  vblank::$98 = (byte*)SPRITE_BUFFER + vblank::$51
  vblank::$98[OFFSET_STRUCT_SPRITEDATA_X] = ++ vblank::$97[OFFSET_STRUCT_SPRITEDATA_X]
  vblank::$53 = 1 * SIZEOF_STRUCT_SPRITEDATA
  vblank::$100 = (byte*)SPRITE_BUFFER + vblank::$53
  vblank::$101 = (byte*)SPRITE_BUFFER + vblank::$53
  vblank::$101[OFFSET_STRUCT_SPRITEDATA_X] = ++ vblank::$100[OFFSET_STRUCT_SPRITEDATA_X]
  vblank::$55 = 2 * SIZEOF_STRUCT_SPRITEDATA
  vblank::$103 = (byte*)SPRITE_BUFFER + vblank::$55
  vblank::$104 = (byte*)SPRITE_BUFFER + vblank::$55
  vblank::$104[OFFSET_STRUCT_SPRITEDATA_X] = ++ vblank::$103[OFFSET_STRUCT_SPRITEDATA_X]
  vblank::$57 = 3 * SIZEOF_STRUCT_SPRITEDATA
  vblank::$106 = (byte*)SPRITE_BUFFER + vblank::$57
  vblank::$107 = (byte*)SPRITE_BUFFER + vblank::$57
  vblank::$107[OFFSET_STRUCT_SPRITEDATA_X] = ++ vblank::$106[OFFSET_STRUCT_SPRITEDATA_X]
  to:vblank::@4
vblank::@return: scope:[vblank]  from vblank::@9
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
constant struct RICOH_2A03* APU = (struct RICOH_2A03*)$4000
constant byte* FLAG[]  = { $54, $55, $56, $57 }
constant byte* FLOOR[]  = { $85, $85, $86, $86 }
constant byte* const FR_COUNTER = (byte*)$4017
constant const byte JOY_DOWN = 4
constant const byte JOY_LEFT = 2
constant const byte JOY_RIGHT = 1
constant const byte JOY_UP = 8
constant byte* const MEMORY = (byte*)0
constant byte OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
constant byte OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
constant byte OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
constant byte OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
constant byte OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
constant byte OFFSET_STRUCT_RICOH_2C02_PPUCTRL = 0
constant byte OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
constant byte OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
constant byte OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
constant byte OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
constant byte OFFSET_STRUCT_SPRITEDATA_X = 3
constant byte OFFSET_STRUCT_SPRITEDATA_Y = 0
constant byte* PALETTE[$20]  = { $11, $2d, 8, $18, $11, 6, $15, $36, $11, $39, $4a, $5b, $f, $3d, $4e, $5f, $11, $f, $30, 8, $11, $f, $18, 8, $11, $30, $37, $1a, $f, $f, $f, $f }
constant struct RICOH_2C02* PPU = (struct RICOH_2C02*)$2000
constant byte* const PPU_ATTRIBUTE_TABLE_0 = (byte*)$23c0
constant byte* const PPU_NAME_TABLE_0 = (byte*)$2000
constant byte* const PPU_PALETTE = (byte*)$3f00
constant volatile byte* const PPU_PPUSTATUS = (volatile byte*)$2002
constant byte SIZEOF_STRUCT_SPRITEDATA = 4
constant struct SpriteData* SPRITES[]  = { { y: $96, tile: $36, attributes: 2, x: $c }, { y: $96, tile: $37, attributes: 2, x: $14 }, { y: $9e, tile: $38, attributes: 2, x: $c }, { y: $9e, tile: $39, attributes: 2, x: $14 }, { y: $96, tile: $70, attributes: 0, x: $48 }, { y: $96, tile: $71, attributes: 0, x: $50 }, { y: $9e, tile: $72, attributes: 1, x: $48 }, { y: $9e, tile: $73, attributes: 1, x: $50 } }
constant struct SpriteData* SPRITE_BUFFER[$40]  = { fill( $40, 0) }
constant byte* TILES[]  = kickasm {{ .import binary "smb1_chr.bin"
 }}
constant void()* const* VECTORS[]  = { &vblank, &main, (void()*)0 }
void __start()
void main()
byte~ main::$1
byte*~ main::$10
bool~ main::$12
byte~ main::$6
bool~ main::$9
byte*~ main::enableVideoOutput1_$0
byte*~ main::enableVideoOutput1_$1
byte*~ main::enableVideoOutput1_$2
byte*~ main::enableVideoOutput1_$3
bool~ main::initNES1_$5
byte*~ main::initNES1_disableAudioOutput1_$0
byte*~ main::initNES1_disableAudioOutput1_$1
byte*~ main::initNES1_disableVideoOutput1_$0
byte*~ main::initNES1_disableVideoOutput1_$1
byte*~ main::initNES1_disableVideoOutput1_$2
byte*~ main::initNES1_disableVideoOutput1_$3
byte main::initNES1_i
byte main::initNES1_i#0
byte main::initNES1_i#1
byte main::initNES1_i#2
number~ main::initNES1_waitForVBlank1_$0
bool~ main::initNES1_waitForVBlank1_$1
volatile byte*~ main::initNES1_waitForVBlank1_$2
volatile byte*~ main::initNES1_waitForVBlank1_$3
bool~ main::initNES1_waitForVBlank1_$4
number~ main::initNES1_waitForVBlank2_$0
bool~ main::initNES1_waitForVBlank2_$1
volatile byte*~ main::initNES1_waitForVBlank2_$2
volatile byte*~ main::initNES1_waitForVBlank2_$3
bool~ main::initNES1_waitForVBlank2_$4
byte main::x
byte main::x#0
byte main::x#1
byte main::x#2
byte main::x#3
byte main::x#4
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
byte*~ memcpy::$0
bool~ memcpy::$1
byte*~ memcpy::$2
void* memcpy::destination
void* memcpy::destination#0
void* memcpy::destination#1
void* memcpy::destination#2
void* memcpy::destination#3
void* memcpy::destination#4
byte* memcpy::dst
byte* memcpy::dst#0
byte* memcpy::dst#1
byte* memcpy::dst#2
byte* memcpy::dst#3
word memcpy::num
word memcpy::num#0
word memcpy::num#1
void* memcpy::return
void* memcpy::return#0
void* memcpy::return#1
void* memcpy::return#2
void* memcpy::return#3
void* memcpy::source
void* memcpy::source#0
void* memcpy::source#1
byte* memcpy::src
byte* memcpy::src#0
byte* memcpy::src#1
byte* memcpy::src#2
byte* memcpy::src#3
byte* memcpy::src_end
byte* memcpy::src_end#0
byte* memcpy::src_end#1
byte* memcpy::src_end#2
void ppuDataFill(void* const ppuDataFill::ppuData , byte ppuDataFill::val , word ppuDataFill::size)
bool~ ppuDataFill::$1
word ppuDataFill::i
word ppuDataFill::i#0
word ppuDataFill::i#1
word ppuDataFill::i#2
word ppuDataFill::i#3
word ppuDataFill::i#4
word ppuDataFill::i#5
void* const ppuDataFill::ppuData
void* const ppuDataFill::ppuData#0
void* const ppuDataFill::ppuData#1
void* const ppuDataFill::ppuData#2
byte~ ppuDataFill::ppuDataPrepare1_$0
byte~ ppuDataFill::ppuDataPrepare1_$1
byte*~ ppuDataFill::ppuDataPrepare1_$2
byte*~ ppuDataFill::ppuDataPrepare1_$3
byte*~ ppuDataFill::ppuDataPrepare1_$4
byte*~ ppuDataFill::ppuDataPrepare1_$5
void* const ppuDataFill::ppuDataPrepare1_ppuData
void* const ppuDataFill::ppuDataPrepare1_ppuData#0
void* const ppuDataFill::ppuDataPrepare1_ppuData#1
byte*~ ppuDataFill::ppuDataPut1_$0
byte*~ ppuDataFill::ppuDataPut1_$1
byte ppuDataFill::ppuDataPut1_val
byte ppuDataFill::ppuDataPut1_val#0
byte ppuDataFill::ppuDataPut1_val#1
word ppuDataFill::size
word ppuDataFill::size#0
word ppuDataFill::size#1
word ppuDataFill::size#2
word ppuDataFill::size#3
word ppuDataFill::size#4
word ppuDataFill::size#5
word ppuDataFill::size#6
word ppuDataFill::size#7
word ppuDataFill::size#8
byte ppuDataFill::val
byte ppuDataFill::val#0
byte ppuDataFill::val#1
byte ppuDataFill::val#2
byte ppuDataFill::val#3
byte ppuDataFill::val#4
byte ppuDataFill::val#5
byte ppuDataFill::val#6
byte ppuDataFill::val#7
byte ppuDataFill::val#8
void ppuDataPutTile(void* const ppuDataPutTile::ppuData , byte* ppuDataPutTile::tile)
byte*~ ppuDataPutTile::$3
byte*~ ppuDataPutTile::$7
void* const ppuDataPutTile::ppuData
void* const ppuDataPutTile::ppuData#0
void* const ppuDataPutTile::ppuData#1
void* const ppuDataPutTile::ppuData#2
void* const ppuDataPutTile::ppuData#3
void* const ppuDataPutTile::ppuData#4
void* const ppuDataPutTile::ppuData#5
void* const ppuDataPutTile::ppuData#6
void* const ppuDataPutTile::ppuData#7
void* const ppuDataPutTile::ppuData#8
byte~ ppuDataPutTile::ppuDataPrepare1_$0
byte~ ppuDataPutTile::ppuDataPrepare1_$1
byte*~ ppuDataPutTile::ppuDataPrepare1_$2
byte*~ ppuDataPutTile::ppuDataPrepare1_$3
byte*~ ppuDataPutTile::ppuDataPrepare1_$4
byte*~ ppuDataPutTile::ppuDataPrepare1_$5
void* const ppuDataPutTile::ppuDataPrepare1_ppuData
void* const ppuDataPutTile::ppuDataPrepare1_ppuData#0
void* const ppuDataPutTile::ppuDataPrepare1_ppuData#1
byte~ ppuDataPutTile::ppuDataPrepare2_$0
byte~ ppuDataPutTile::ppuDataPrepare2_$1
byte*~ ppuDataPutTile::ppuDataPrepare2_$2
byte*~ ppuDataPutTile::ppuDataPrepare2_$3
byte*~ ppuDataPutTile::ppuDataPrepare2_$4
byte*~ ppuDataPutTile::ppuDataPrepare2_$5
void* const ppuDataPutTile::ppuDataPrepare2_ppuData
void* const ppuDataPutTile::ppuDataPrepare2_ppuData#0
void* const ppuDataPutTile::ppuDataPrepare2_ppuData#1
byte*~ ppuDataPutTile::ppuDataPut1_$0
byte*~ ppuDataPutTile::ppuDataPut1_$1
byte ppuDataPutTile::ppuDataPut1_val
byte ppuDataPutTile::ppuDataPut1_val#0
byte ppuDataPutTile::ppuDataPut1_val#1
byte*~ ppuDataPutTile::ppuDataPut2_$0
byte*~ ppuDataPutTile::ppuDataPut2_$1
byte ppuDataPutTile::ppuDataPut2_val
byte ppuDataPutTile::ppuDataPut2_val#0
byte ppuDataPutTile::ppuDataPut2_val#1
byte*~ ppuDataPutTile::ppuDataPut3_$0
byte*~ ppuDataPutTile::ppuDataPut3_$1
byte ppuDataPutTile::ppuDataPut3_val
byte ppuDataPutTile::ppuDataPut3_val#0
byte ppuDataPutTile::ppuDataPut3_val#1
byte*~ ppuDataPutTile::ppuDataPut4_$0
byte*~ ppuDataPutTile::ppuDataPut4_$1
byte ppuDataPutTile::ppuDataPut4_val
byte ppuDataPutTile::ppuDataPut4_val#0
byte ppuDataPutTile::ppuDataPut4_val#1
byte* ppuDataPutTile::tile
byte* ppuDataPutTile::tile#0
byte* ppuDataPutTile::tile#1
byte* ppuDataPutTile::tile#10
byte* ppuDataPutTile::tile#11
byte* ppuDataPutTile::tile#12
byte* ppuDataPutTile::tile#2
byte* ppuDataPutTile::tile#3
byte* ppuDataPutTile::tile#4
byte* ppuDataPutTile::tile#5
byte* ppuDataPutTile::tile#6
byte* ppuDataPutTile::tile#7
byte* ppuDataPutTile::tile#8
byte* ppuDataPutTile::tile#9
void ppuDataTransfer(void* const ppuDataTransfer::ppuData , void* const ppuDataTransfer::cpuData , word ppuDataTransfer::size)
bool~ ppuDataTransfer::$1
void* const ppuDataTransfer::cpuData
void* const ppuDataTransfer::cpuData#0
void* const ppuDataTransfer::cpuData#1
void* const ppuDataTransfer::cpuData#2
void* const ppuDataTransfer::cpuData#3
byte* ppuDataTransfer::cpuSrc
byte* ppuDataTransfer::cpuSrc#0
byte* ppuDataTransfer::cpuSrc#1
byte* ppuDataTransfer::cpuSrc#2
byte* ppuDataTransfer::cpuSrc#3
byte* ppuDataTransfer::cpuSrc#4
byte* ppuDataTransfer::cpuSrc#5
word ppuDataTransfer::i
word ppuDataTransfer::i#0
word ppuDataTransfer::i#1
word ppuDataTransfer::i#2
word ppuDataTransfer::i#3
word ppuDataTransfer::i#4
word ppuDataTransfer::i#5
void* const ppuDataTransfer::ppuData
void* const ppuDataTransfer::ppuData#0
void* const ppuDataTransfer::ppuData#1
byte~ ppuDataTransfer::ppuDataPrepare1_$0
byte~ ppuDataTransfer::ppuDataPrepare1_$1
byte*~ ppuDataTransfer::ppuDataPrepare1_$2
byte*~ ppuDataTransfer::ppuDataPrepare1_$3
byte*~ ppuDataTransfer::ppuDataPrepare1_$4
byte*~ ppuDataTransfer::ppuDataPrepare1_$5
void* const ppuDataTransfer::ppuDataPrepare1_ppuData
void* const ppuDataTransfer::ppuDataPrepare1_ppuData#0
void* const ppuDataTransfer::ppuDataPrepare1_ppuData#1
byte*~ ppuDataTransfer::ppuDataPut1_$0
byte*~ ppuDataTransfer::ppuDataPut1_$1
byte ppuDataTransfer::ppuDataPut1_val
byte ppuDataTransfer::ppuDataPut1_val#0
byte ppuDataTransfer::ppuDataPut1_val#1
word ppuDataTransfer::size
word ppuDataTransfer::size#0
word ppuDataTransfer::size#1
word ppuDataTransfer::size#2
word ppuDataTransfer::size#3
word ppuDataTransfer::size#4
word ppuDataTransfer::size#5
word ppuDataTransfer::size#6
word ppuDataTransfer::size#7
byte readJoy1()
bool~ readJoy1::$0
byte~ readJoy1::$1
number~ readJoy1::$2
number~ readJoy1::$3
byte*~ readJoy1::$4
byte*~ readJoy1::$5
byte*~ readJoy1::$6
byte*~ readJoy1::$7
byte*~ readJoy1::$8
byte*~ readJoy1::$9
byte readJoy1::i
byte readJoy1::i#0
byte readJoy1::i#1
byte readJoy1::i#2
byte readJoy1::i#3
byte readJoy1::joy
byte readJoy1::joy#0
byte readJoy1::joy#1
byte readJoy1::joy#2
byte readJoy1::joy#3
byte readJoy1::joy#4
byte readJoy1::return
byte readJoy1::return#0
byte readJoy1::return#1
byte readJoy1::return#2
byte readJoy1::return#3
byte readJoy1::return#4
__interrupt(hardware_all) void vblank()
byte~ vblank::$0
byte~ vblank::$1
byte*~ vblank::$100
byte*~ vblank::$101
byte*~ vblank::$103
byte*~ vblank::$104
byte*~ vblank::$106
byte*~ vblank::$107
byte*~ vblank::$108
byte*~ vblank::$109
bool~ vblank::$110
bool~ vblank::$111
bool~ vblank::$112
bool~ vblank::$113
bool~ vblank::$2
number~ vblank::$27
number~ vblank::$29
byte~ vblank::$3
number~ vblank::$31
number~ vblank::$33
number~ vblank::$35
number~ vblank::$37
number~ vblank::$39
bool~ vblank::$4
number~ vblank::$41
number~ vblank::$43
number~ vblank::$45
number~ vblank::$47
number~ vblank::$49
byte~ vblank::$5
number~ vblank::$51
number~ vblank::$53
number~ vblank::$55
number~ vblank::$57
byte*~ vblank::$59
bool~ vblank::$6
byte*~ vblank::$60
byte*~ vblank::$62
byte*~ vblank::$63
byte*~ vblank::$65
byte*~ vblank::$66
byte*~ vblank::$68
byte*~ vblank::$69
byte~ vblank::$7
byte*~ vblank::$71
byte*~ vblank::$72
byte*~ vblank::$74
byte*~ vblank::$75
byte*~ vblank::$77
byte*~ vblank::$78
bool~ vblank::$8
byte*~ vblank::$80
byte*~ vblank::$81
byte*~ vblank::$83
byte*~ vblank::$84
byte*~ vblank::$86
byte*~ vblank::$87
byte*~ vblank::$89
byte*~ vblank::$90
byte*~ vblank::$92
byte*~ vblank::$93
byte*~ vblank::$94
byte*~ vblank::$95
byte*~ vblank::$97
byte*~ vblank::$98
byte vblank::joy
byte vblank::joy#0
byte vblank::joy#1
byte vblank::joy#2
byte vblank::joy#3
byte vblank::joy#4
byte vblank::joy#5
byte vblank::joy#6
byte~ vblank::ppuSpriteBufferDmaTransfer1_$0
byte*~ vblank::ppuSpriteBufferDmaTransfer1_$1
byte*~ vblank::ppuSpriteBufferDmaTransfer1_$2
byte*~ vblank::ppuSpriteBufferDmaTransfer1_$3
byte*~ vblank::ppuSpriteBufferDmaTransfer1_$4
struct SpriteData* vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer
struct SpriteData* vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0
struct SpriteData* vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#1

Adding number conversion cast (unumber) 1 in *readJoy1::$4 = 1
Adding number conversion cast (unumber) 0 in *readJoy1::$5 = 0
Adding number conversion cast (unumber) 8 in readJoy1::$0 = readJoy1::i#2 < 8
Adding number conversion cast (unumber) 1 in readJoy1::$1 = readJoy1::joy#2 << 1
Adding number conversion cast (unumber) 1 in readJoy1::$2 = *readJoy1::$6 & 1
Adding number conversion cast (unumber) readJoy1::$2 in readJoy1::$2 = *readJoy1::$6 & (unumber)1
Adding number conversion cast (unumber) readJoy1::$3 in readJoy1::$3 = readJoy1::$1 | readJoy1::$2
Adding number conversion cast (unumber) 0 in ppuDataPutTile::ppuDataPut1_val#0 = ppuDataPutTile::tile#2[0]
Adding number conversion cast (unumber) 1 in ppuDataPutTile::ppuDataPut2_val#0 = ppuDataPutTile::tile#3[1]
Adding number conversion cast (unumber) $20 in ppuDataPutTile::$3 = ppuDataPutTile::$7 + $20
Adding number conversion cast (unumber) 2 in ppuDataPutTile::ppuDataPut3_val#0 = ppuDataPutTile::tile#4[2]
Adding number conversion cast (unumber) 3 in ppuDataPutTile::ppuDataPut4_val#0 = ppuDataPutTile::tile#5[3]
Adding number conversion cast (unumber) 0 in *main::initNES1_disableVideoOutput1_$0 = 0
Adding number conversion cast (unumber) 0 in *main::initNES1_disableVideoOutput1_$1 = 0
Adding number conversion cast (unumber) $40 in *FR_COUNTER = $40
Adding number conversion cast (unumber) $40 in *main::initNES1_disableAudioOutput1_$0 = $40
Adding number conversion cast (unumber) $80 in main::initNES1_waitForVBlank1_$0 = *main::initNES1_waitForVBlank1_$2 & $80
Adding number conversion cast (unumber) main::initNES1_waitForVBlank1_$0 in main::initNES1_waitForVBlank1_$0 = *main::initNES1_waitForVBlank1_$2 & (unumber)$80
Adding number conversion cast (unumber) 0 in main::initNES1_waitForVBlank1_$4 = 0 != main::initNES1_waitForVBlank1_$0
Adding number conversion cast (unumber) 0 in (MEMORY+0)[main::initNES1_i#2] = 0
Adding number conversion cast (unumber) 0 in (MEMORY+0)[main::initNES1_i#2] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in (MEMORY+$100)[main::initNES1_i#2] = 0
Adding number conversion cast (unumber) $100 in (MEMORY+$100)[main::initNES1_i#2] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in (MEMORY+$200)[main::initNES1_i#2] = 0
Adding number conversion cast (unumber) $200 in (MEMORY+$200)[main::initNES1_i#2] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in (MEMORY+$300)[main::initNES1_i#2] = 0
Adding number conversion cast (unumber) $300 in (MEMORY+$300)[main::initNES1_i#2] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in (MEMORY+$400)[main::initNES1_i#2] = 0
Adding number conversion cast (unumber) $400 in (MEMORY+$400)[main::initNES1_i#2] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in (MEMORY+$500)[main::initNES1_i#2] = 0
Adding number conversion cast (unumber) $500 in (MEMORY+$500)[main::initNES1_i#2] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in (MEMORY+$600)[main::initNES1_i#2] = 0
Adding number conversion cast (unumber) $600 in (MEMORY+$600)[main::initNES1_i#2] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in (MEMORY+$700)[main::initNES1_i#2] = 0
Adding number conversion cast (unumber) $700 in (MEMORY+$700)[main::initNES1_i#2] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in main::initNES1_$5 = 0 != main::initNES1_i#1
Adding number conversion cast (unumber) $80 in main::initNES1_waitForVBlank2_$0 = *main::initNES1_waitForVBlank2_$2 & $80
Adding number conversion cast (unumber) main::initNES1_waitForVBlank2_$0 in main::initNES1_waitForVBlank2_$0 = *main::initNES1_waitForVBlank2_$2 & (unumber)$80
Adding number conversion cast (unumber) 0 in main::initNES1_waitForVBlank2_$4 = 0 != main::initNES1_waitForVBlank2_$0
Adding number conversion cast (unumber) $fc in ppuDataFill::val#0 = $fc
Adding number conversion cast (unumber) $3c0 in ppuDataFill::size#0 = $3c0
Adding number conversion cast (unumber) 0 in ppuDataFill::val#1 = 0
Adding number conversion cast (unumber) $40 in ppuDataFill::size#1 = $40
Adding number conversion cast (unumber) $20 in main::$9 = main::x#2 < $20
Adding number conversion cast (unumber) $14*$20 in main::$10 = PPU_NAME_TABLE_0+$14*$20 + main::x#3
Adding number conversion cast (unumber) 2 in main::x#1 = main::x#4 + 2
Adding number conversion cast (unumber) $1c in ppuDataPutTile::ppuData#1 = (void* const)PPU_NAME_TABLE_0+$12*$20+$1c
Adding number conversion cast (unumber) $12*$20 in ppuDataPutTile::ppuData#1 = (void* const)PPU_NAME_TABLE_0+$12*$20+(unumber)$1c
Adding number conversion cast (unumber) $80 in *main::enableVideoOutput1_$0 = $80
Adding number conversion cast (unumber) $1e in *main::enableVideoOutput1_$1 = $1e
Adding number conversion cast (unumber) 0 in vblank::$110 = 0 != vblank::$1
Adding number conversion cast (unumber) 0 in vblank::$111 = 0 != vblank::$3
Adding number conversion cast (unumber) 0 in vblank::$27 = 0 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$27 in vblank::$27 = (unumber)0 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 1 in vblank::$29 = 1 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$29 in vblank::$29 = (unumber)1 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 2 in vblank::$31 = 2 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$31 in vblank::$31 = (unumber)2 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 3 in vblank::$33 = 3 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$33 in vblank::$33 = (unumber)3 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 0 in vblank::$112 = 0 != vblank::$5
Adding number conversion cast (unumber) 0 in vblank::$35 = 0 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$35 in vblank::$35 = (unumber)0 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 1 in vblank::$37 = 1 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$37 in vblank::$37 = (unumber)1 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 2 in vblank::$39 = 2 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$39 in vblank::$39 = (unumber)2 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 3 in vblank::$41 = 3 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$41 in vblank::$41 = (unumber)3 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 0 in vblank::$113 = 0 != vblank::$7
Adding number conversion cast (unumber) 0 in vblank::$43 = 0 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$43 in vblank::$43 = (unumber)0 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 1 in vblank::$45 = 1 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$45 in vblank::$45 = (unumber)1 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 2 in vblank::$47 = 2 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$47 in vblank::$47 = (unumber)2 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 3 in vblank::$49 = 3 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$49 in vblank::$49 = (unumber)3 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 0 in *vblank::ppuSpriteBufferDmaTransfer1_$1 = 0
Adding number conversion cast (unumber) 0 in *vblank::$94 = 0
Adding number conversion cast (unumber) -8 in *vblank::$95 = -8
Adding number conversion cast (unumber) 0 in vblank::$51 = 0 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$51 in vblank::$51 = (unumber)0 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 1 in vblank::$53 = 1 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$53 in vblank::$53 = (unumber)1 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 2 in vblank::$55 = 2 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$55 in vblank::$55 = (unumber)2 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 3 in vblank::$57 = 3 * SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$57 in vblank::$57 = (unumber)3 * SIZEOF_STRUCT_SPRITEDATA
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *readJoy1::$4 = (unumber)1
Inlining cast *readJoy1::$5 = (unumber)0
Inlining cast memcpy::src#0 = (byte*)memcpy::source#1
Inlining cast memcpy::dst#0 = (byte*)memcpy::destination#1
Inlining cast *main::initNES1_disableVideoOutput1_$0 = (unumber)0
Inlining cast *main::initNES1_disableVideoOutput1_$1 = (unumber)0
Inlining cast *FR_COUNTER = (unumber)$40
Inlining cast *main::initNES1_disableAudioOutput1_$0 = (unumber)$40
Inlining cast (MEMORY+(unumber)0)[main::initNES1_i#2] = (unumber)0
Inlining cast (MEMORY+(unumber)$100)[main::initNES1_i#2] = (unumber)0
Inlining cast (MEMORY+(unumber)$200)[main::initNES1_i#2] = (unumber)0
Inlining cast (MEMORY+(unumber)$300)[main::initNES1_i#2] = (unumber)0
Inlining cast (MEMORY+(unumber)$400)[main::initNES1_i#2] = (unumber)0
Inlining cast (MEMORY+(unumber)$500)[main::initNES1_i#2] = (unumber)0
Inlining cast (MEMORY+(unumber)$600)[main::initNES1_i#2] = (unumber)0
Inlining cast (MEMORY+(unumber)$700)[main::initNES1_i#2] = (unumber)0
Inlining cast ppuDataFill::val#0 = (unumber)$fc
Inlining cast ppuDataFill::size#0 = (unumber)$3c0
Inlining cast ppuDataFill::val#1 = (unumber)0
Inlining cast ppuDataFill::size#1 = (unumber)$40
Inlining cast *main::enableVideoOutput1_$0 = (unumber)$80
Inlining cast *main::enableVideoOutput1_$1 = (unumber)$1e
Inlining cast *vblank::ppuSpriteBufferDmaTransfer1_$1 = (unumber)0
Inlining cast *vblank::$94 = (unumber)0
Inlining cast *vblank::$95 = (unumber)-8
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 8192
Simplifying constant pointer cast (byte*) 9152
Simplifying constant pointer cast (byte*) 16128
Simplifying constant pointer cast (volatile byte*) 8194
Simplifying constant pointer cast (byte*) 16407
Simplifying constant pointer cast (byte*) 0
Simplifying constant pointer cast (void()*) 0
Simplifying constant pointer cast (struct RICOH_2C02*) 8192
Simplifying constant pointer cast (struct RICOH_2A03*) 16384
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $20
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast $40
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $100
Simplifying constant integer cast 0
Simplifying constant integer cast $200
Simplifying constant integer cast 0
Simplifying constant integer cast $300
Simplifying constant integer cast 0
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast $500
Simplifying constant integer cast 0
Simplifying constant integer cast $600
Simplifying constant integer cast 0
Simplifying constant integer cast $700
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast $fc
Simplifying constant integer cast $3c0
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast $20
Simplifying constant integer cast 2
Simplifying constant integer cast $1c
Simplifying constant integer cast $80
Simplifying constant integer cast $1e
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast -8
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $200
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $300
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $400
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $500
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $600
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $700
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $fc
Finalized unsigned number type (word) $3c0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $1c
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $1e
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) -8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in readJoy1::$2 = *readJoy1::$6 & 1
Inferred type updated to byte in readJoy1::$3 = readJoy1::$1 | readJoy1::$2
Inferred type updated to byte in main::initNES1_waitForVBlank1_$0 = *main::initNES1_waitForVBlank1_$2 & $80
Inferred type updated to byte in main::initNES1_waitForVBlank2_$0 = *main::initNES1_waitForVBlank2_$2 & $80
Inferred type updated to byte in vblank::$27 = 0 * SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in vblank::$29 = 1 * SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in vblank::$31 = 2 * SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in vblank::$33 = 3 * SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in vblank::$35 = 0 * SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in vblank::$37 = 1 * SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in vblank::$39 = 2 * SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in vblank::$41 = 3 * SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in vblank::$43 = 0 * SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in vblank::$45 = 1 * SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in vblank::$47 = 2 * SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in vblank::$49 = 3 * SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in vblank::$51 = 0 * SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in vblank::$53 = 1 * SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in vblank::$55 = 2 * SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in vblank::$57 = 3 * SIZEOF_STRUCT_SPRITEDATA
Inversing boolean not [159] main::initNES1_waitForVBlank1_$1 = 0 == main::initNES1_waitForVBlank1_$0 from [158] main::initNES1_waitForVBlank1_$4 = 0 != main::initNES1_waitForVBlank1_$0
Inversing boolean not [178] main::initNES1_waitForVBlank2_$1 = 0 == main::initNES1_waitForVBlank2_$0 from [177] main::initNES1_waitForVBlank2_$4 = 0 != main::initNES1_waitForVBlank2_$0
Inversing boolean not [230] vblank::$2 = 0 == vblank::$1 from [229] vblank::$110 = 0 != vblank::$1
Inversing boolean not [235] vblank::$4 = 0 == vblank::$3 from [234] vblank::$111 = 0 != vblank::$3
Inversing boolean not [257] vblank::$6 = 0 == vblank::$5 from [256] vblank::$112 = 0 != vblank::$5
Inversing boolean not [279] vblank::$8 = 0 == vblank::$7 from [278] vblank::$113 = 0 != vblank::$7
Successful SSA optimization Pass2UnaryNotSimplification
Alias readJoy1::joy#2 = readJoy1::joy#4 readJoy1::joy#3 readJoy1::return#0 readJoy1::return#3 readJoy1::return#1 
Alias readJoy1::i#2 = readJoy1::i#3 
Alias readJoy1::joy#1 = readJoy1::$3 
Alias ppuDataFill::ppuDataPrepare1_ppuData#0 = ppuDataFill::ppuData#2 ppuDataFill::ppuDataPrepare1_ppuData#1 
Alias ppuDataFill::size#3 = ppuDataFill::size#5 ppuDataFill::size#7 
Alias ppuDataFill::val#4 = ppuDataFill::val#6 ppuDataFill::val#8 
Alias ppuDataFill::val#2 = ppuDataFill::val#3 ppuDataFill::ppuDataPut1_val#0 ppuDataFill::ppuDataPut1_val#1 ppuDataFill::val#7 ppuDataFill::val#5 
Alias ppuDataFill::i#2 = ppuDataFill::i#5 ppuDataFill::i#4 ppuDataFill::i#3 
Alias ppuDataFill::size#2 = ppuDataFill::size#8 ppuDataFill::size#6 ppuDataFill::size#4 
Alias ppuDataTransfer::ppuDataPrepare1_ppuData#0 = ppuDataTransfer::ppuData#1 ppuDataTransfer::ppuDataPrepare1_ppuData#1 
Alias ppuDataTransfer::cpuData#1 = ppuDataTransfer::cpuData#2 ppuDataTransfer::cpuData#3 
Alias ppuDataTransfer::size#2 = ppuDataTransfer::size#4 ppuDataTransfer::size#6 
Alias ppuDataTransfer::cpuSrc#2 = ppuDataTransfer::cpuSrc#4 ppuDataTransfer::cpuSrc#5 ppuDataTransfer::cpuSrc#3 
Alias ppuDataTransfer::i#2 = ppuDataTransfer::i#5 ppuDataTransfer::i#4 ppuDataTransfer::i#3 
Alias ppuDataTransfer::size#1 = ppuDataTransfer::size#7 ppuDataTransfer::size#5 ppuDataTransfer::size#3 
Alias ppuDataTransfer::ppuDataPut1_val#0 = ppuDataTransfer::ppuDataPut1_val#1 
Alias ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuDataPrepare1_ppuData#0 ppuDataPutTile::ppuDataPrepare1_ppuData#1 ppuDataPutTile::ppuData#8 ppuDataPutTile::ppuData#7 ppuDataPutTile::ppuData#6 ppuDataPutTile::ppuData#5 ppuDataPutTile::ppuData#4 ppuDataPutTile::ppuData#3 
Alias ppuDataPutTile::tile#10 = ppuDataPutTile::tile#6 ppuDataPutTile::tile#2 ppuDataPutTile::tile#7 ppuDataPutTile::tile#3 ppuDataPutTile::tile#12 ppuDataPutTile::tile#11 ppuDataPutTile::tile#8 ppuDataPutTile::tile#4 ppuDataPutTile::tile#9 ppuDataPutTile::tile#5 
Alias ppuDataPutTile::ppuDataPut1_val#0 = ppuDataPutTile::ppuDataPut1_val#1 
Alias ppuDataPutTile::ppuDataPut2_val#0 = ppuDataPutTile::ppuDataPut2_val#1 
Alias ppuDataPutTile::ppuDataPrepare2_ppuData#0 = ppuDataPutTile::ppuDataPrepare2_ppuData#1 
Alias ppuDataPutTile::ppuDataPut3_val#0 = ppuDataPutTile::ppuDataPut3_val#1 
Alias ppuDataPutTile::ppuDataPut4_val#0 = ppuDataPutTile::ppuDataPut4_val#1 
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#2 = memcpy::destination#4 memcpy::destination#3 memcpy::return#0 memcpy::return#3 memcpy::return#1 
Alias ppuDataTransfer::size#0 = main::$1 
Alias main::x#2 = main::x#3 main::x#4 
Alias memcpy::num#0 = main::$6 
Alias readJoy1::return#2 = readJoy1::return#4 
Alias vblank::joy#0 = vblank::$0 vblank::joy#4 
Alias vblank::joy#1 = vblank::joy#5 
Alias vblank::joy#2 = vblank::joy#6 
Alias vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 = vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#1 
Successful SSA optimization Pass2AliasElimination
Alias vblank::joy#0 = vblank::joy#1 vblank::joy#2 vblank::joy#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values ppuDataFill::size#2 ppuDataFill::size#3
Identical Phi Values ppuDataFill::val#2 ppuDataFill::val#4
Identical Phi Values ppuDataTransfer::ppuDataPrepare1_ppuData#0 ppuDataTransfer::ppuData#0
Identical Phi Values ppuDataTransfer::cpuData#1 ppuDataTransfer::cpuData#0
Identical Phi Values ppuDataTransfer::size#2 ppuDataTransfer::size#0
Identical Phi Values ppuDataTransfer::size#1 ppuDataTransfer::size#2
Identical Phi Values memcpy::source#1 memcpy::source#0
Identical Phi Values memcpy::destination#1 memcpy::destination#0
Identical Phi Values memcpy::num#1 memcpy::num#0
Identical Phi Values memcpy::src_end#1 memcpy::src_end#0
Identical Phi Values memcpy::destination#2 memcpy::destination#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition readJoy1::$0 [10] if(readJoy1::i#2<8) goto readJoy1::@2
Simple Condition ppuDataFill::$1 [30] if(ppuDataFill::i#2<ppuDataFill::size#3) goto ppuDataFill::@2
Simple Condition ppuDataTransfer::$1 [49] if(ppuDataTransfer::i#2<ppuDataTransfer::size#0) goto ppuDataTransfer::@2
Simple Condition memcpy::$1 [101] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
Simple Condition main::initNES1_waitForVBlank1_$1 [122] if(0==main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1
Simple Condition main::initNES1_$5 [135] if(0!=main::initNES1_i#1) goto main::initNES1_@1
Simple Condition main::initNES1_waitForVBlank2_$1 [140] if(0==main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1
Simple Condition main::$9 [157] if(main::x#2<$20) goto main::@2
Simple Condition main::$12 [178] if(0!=1) goto main::@4
Simple Condition vblank::$2 [185] if(0==vblank::$1) goto vblank::@1
Simple Condition vblank::$4 [188] if(0==vblank::$3) goto vblank::@2
Simple Condition vblank::$6 [207] if(0==vblank::$5) goto vblank::@3
Simple Condition vblank::$8 [226] if(0==vblank::$7) goto vblank::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [0] readJoy1::$7 = (byte*)APU
Constant right-side identified [3] readJoy1::$8 = (byte*)APU
Constant right-side identified [12] readJoy1::$9 = (byte*)APU
Constant right-side identified [20] ppuDataFill::ppuDataPrepare1_$4 = (byte*)PPU
Constant right-side identified [24] ppuDataFill::ppuDataPrepare1_$5 = (byte*)PPU
Constant right-side identified [31] ppuDataFill::ppuDataPut1_$1 = (byte*)PPU
Constant right-side identified [38] ppuDataTransfer::ppuDataPrepare1_$4 = (byte*)PPU
Constant right-side identified [42] ppuDataTransfer::ppuDataPrepare1_$5 = (byte*)PPU
Constant right-side identified [51] ppuDataTransfer::ppuDataPut1_$1 = (byte*)PPU
Constant right-side identified [59] ppuDataPutTile::ppuDataPrepare1_$4 = (byte*)PPU
Constant right-side identified [63] ppuDataPutTile::ppuDataPrepare1_$5 = (byte*)PPU
Constant right-side identified [67] ppuDataPutTile::ppuDataPut1_$1 = (byte*)PPU
Constant right-side identified [71] ppuDataPutTile::ppuDataPut2_$1 = (byte*)PPU
Constant right-side identified [78] ppuDataPutTile::ppuDataPrepare2_$4 = (byte*)PPU
Constant right-side identified [82] ppuDataPutTile::ppuDataPrepare2_$5 = (byte*)PPU
Constant right-side identified [86] ppuDataPutTile::ppuDataPut3_$1 = (byte*)PPU
Constant right-side identified [90] ppuDataPutTile::ppuDataPut4_$1 = (byte*)PPU
Constant right-side identified [107] main::initNES1_disableVideoOutput1_$2 = (byte*)PPU
Constant right-side identified [110] main::initNES1_disableVideoOutput1_$3 = (byte*)PPU
Constant right-side identified [114] main::initNES1_disableAudioOutput1_$1 = (byte*)APU
Constant right-side identified [118] main::initNES1_waitForVBlank1_$3 = (volatile byte*)PPU
Constant right-side identified [136] main::initNES1_waitForVBlank2_$3 = (volatile byte*)PPU
Constant right-side identified [142] ppuDataTransfer::size#0 = sizeof  PALETTE
Constant right-side identified [166] memcpy::num#0 = sizeof  SPRITES
Constant right-side identified [171] main::enableVideoOutput1_$2 = (byte*)PPU
Constant right-side identified [174] main::enableVideoOutput1_$3 = (byte*)PPU
Constant right-side identified [189] vblank::$27 = 0 * SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [193] vblank::$29 = 1 * SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [197] vblank::$31 = 2 * SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [201] vblank::$33 = 3 * SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [208] vblank::$35 = 0 * SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [212] vblank::$37 = 1 * SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [216] vblank::$39 = 2 * SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [220] vblank::$41 = 3 * SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [227] vblank::$43 = 0 * SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [231] vblank::$45 = 1 * SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [235] vblank::$47 = 2 * SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [239] vblank::$49 = 3 * SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [244] vblank::ppuSpriteBufferDmaTransfer1_$3 = (byte*)PPU
Constant right-side identified [248] vblank::ppuSpriteBufferDmaTransfer1_$4 = (byte*)APU
Constant right-side identified [251] vblank::$108 = (byte*)PPU
Constant right-side identified [254] vblank::$109 = (byte*)PPU
Constant right-side identified [257] vblank::$51 = 0 * SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [261] vblank::$53 = 1 * SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [265] vblank::$55 = 2 * SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [269] vblank::$57 = 3 * SIZEOF_STRUCT_SPRITEDATA
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant readJoy1::$7 = (byte*)APU
Constant readJoy1::$8 = (byte*)APU
Constant readJoy1::joy#0 = 0
Constant readJoy1::i#0 = 0
Constant readJoy1::$9 = (byte*)APU
Constant ppuDataFill::ppuDataPrepare1_$4 = (byte*)PPU
Constant ppuDataFill::ppuDataPrepare1_$5 = (byte*)PPU
Constant ppuDataFill::i#0 = 0
Constant ppuDataFill::ppuDataPut1_$1 = (byte*)PPU
Constant ppuDataTransfer::ppuDataPrepare1_$4 = (byte*)PPU
Constant ppuDataTransfer::ppuDataPrepare1_$5 = (byte*)PPU
Constant ppuDataTransfer::i#0 = 0
Constant ppuDataTransfer::ppuDataPut1_$1 = (byte*)PPU
Constant ppuDataPutTile::ppuDataPrepare1_$4 = (byte*)PPU
Constant ppuDataPutTile::ppuDataPrepare1_$5 = (byte*)PPU
Constant ppuDataPutTile::ppuDataPut1_$1 = (byte*)PPU
Constant ppuDataPutTile::ppuDataPut2_$1 = (byte*)PPU
Constant ppuDataPutTile::ppuDataPrepare2_$4 = (byte*)PPU
Constant ppuDataPutTile::ppuDataPrepare2_$5 = (byte*)PPU
Constant ppuDataPutTile::ppuDataPut3_$1 = (byte*)PPU
Constant ppuDataPutTile::ppuDataPut4_$1 = (byte*)PPU
Constant main::initNES1_disableVideoOutput1_$2 = (byte*)PPU
Constant main::initNES1_disableVideoOutput1_$3 = (byte*)PPU
Constant main::initNES1_disableAudioOutput1_$1 = (byte*)APU
Constant main::initNES1_waitForVBlank1_$3 = (volatile byte*)PPU
Constant main::initNES1_i#0 = 0
Constant main::initNES1_waitForVBlank2_$3 = (volatile byte*)PPU
Constant ppuDataTransfer::size#0 = sizeof PALETTE
Constant ppuDataTransfer::ppuData#0 = (void* const)PPU_PALETTE
Constant ppuDataTransfer::cpuData#0 = (void* const)PALETTE
Constant ppuDataFill::ppuData#0 = (void* const)PPU_NAME_TABLE_0
Constant ppuDataFill::val#0 = $fc
Constant ppuDataFill::size#0 = $3c0
Constant ppuDataFill::ppuData#1 = (void* const)PPU_ATTRIBUTE_TABLE_0
Constant ppuDataFill::val#1 = 0
Constant ppuDataFill::size#1 = $40
Constant main::x#0 = 0
Constant ppuDataPutTile::tile#0 = FLOOR
Constant ppuDataPutTile::ppuData#1 = (void* const)PPU_NAME_TABLE_0+(word)$12*$20+$1c
Constant ppuDataPutTile::tile#1 = FLAG
Constant memcpy::num#0 = sizeof SPRITES
Constant memcpy::destination#0 = (void*)SPRITE_BUFFER
Constant memcpy::source#0 = (void*)SPRITES
Constant main::enableVideoOutput1_$2 = (byte*)PPU
Constant main::enableVideoOutput1_$3 = (byte*)PPU
Constant vblank::$27 = 0*SIZEOF_STRUCT_SPRITEDATA
Constant vblank::$29 = 1*SIZEOF_STRUCT_SPRITEDATA
Constant vblank::$31 = 2*SIZEOF_STRUCT_SPRITEDATA
Constant vblank::$33 = 3*SIZEOF_STRUCT_SPRITEDATA
Constant vblank::$35 = 0*SIZEOF_STRUCT_SPRITEDATA
Constant vblank::$37 = 1*SIZEOF_STRUCT_SPRITEDATA
Constant vblank::$39 = 2*SIZEOF_STRUCT_SPRITEDATA
Constant vblank::$41 = 3*SIZEOF_STRUCT_SPRITEDATA
Constant vblank::$43 = 0*SIZEOF_STRUCT_SPRITEDATA
Constant vblank::$45 = 1*SIZEOF_STRUCT_SPRITEDATA
Constant vblank::$47 = 2*SIZEOF_STRUCT_SPRITEDATA
Constant vblank::$49 = 3*SIZEOF_STRUCT_SPRITEDATA
Constant vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 = SPRITE_BUFFER
Constant vblank::ppuSpriteBufferDmaTransfer1_$3 = (byte*)PPU
Constant vblank::ppuSpriteBufferDmaTransfer1_$4 = (byte*)APU
Constant vblank::$108 = (byte*)PPU
Constant vblank::$109 = (byte*)PPU
Constant vblank::$51 = 0*SIZEOF_STRUCT_SPRITEDATA
Constant vblank::$53 = 1*SIZEOF_STRUCT_SPRITEDATA
Constant vblank::$55 = 2*SIZEOF_STRUCT_SPRITEDATA
Constant vblank::$57 = 3*SIZEOF_STRUCT_SPRITEDATA
Successful SSA optimization Pass2ConstantIdentification
Constant ppuDataTransfer::cpuSrc#0 = (byte*)ppuDataTransfer::cpuData#0
Constant memcpy::src#0 = (byte*)memcpy::source#0
Constant memcpy::dst#0 = (byte*)memcpy::destination#0
Constant memcpy::$2 = (byte*)memcpy::source#0
Constant memcpy::return#2 = memcpy::destination#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [178] if(0!=1) goto main::@4
Successful SSA optimization Pass2ConstantIfs
Converting *(pointer+n) to pointer[n] [2] *readJoy1::$4 = 1  -- readJoy1::$7[OFFSET_STRUCT_RICOH_2A03_JOY1]
Converting *(pointer+n) to pointer[n] [5] *readJoy1::$5 = 0  -- readJoy1::$8[OFFSET_STRUCT_RICOH_2A03_JOY1]
Converting *(pointer+n) to pointer[n] [14] readJoy1::$2 = *readJoy1::$6 & 1  -- readJoy1::$9[OFFSET_STRUCT_RICOH_2A03_JOY1]
Converting *(pointer+n) to pointer[n] [22] *ppuDataFill::ppuDataPrepare1_$2 = ppuDataFill::ppuDataPrepare1_$0  -- ppuDataFill::ppuDataPrepare1_$4[OFFSET_STRUCT_RICOH_2C02_PPUADDR]
Converting *(pointer+n) to pointer[n] [26] *ppuDataFill::ppuDataPrepare1_$3 = ppuDataFill::ppuDataPrepare1_$1  -- ppuDataFill::ppuDataPrepare1_$5[OFFSET_STRUCT_RICOH_2C02_PPUADDR]
Converting *(pointer+n) to pointer[n] [33] *ppuDataFill::ppuDataPut1_$0 = ppuDataFill::val#4  -- ppuDataFill::ppuDataPut1_$1[OFFSET_STRUCT_RICOH_2C02_PPUDATA]
Converting *(pointer+n) to pointer[n] [40] *ppuDataTransfer::ppuDataPrepare1_$2 = ppuDataTransfer::ppuDataPrepare1_$0  -- ppuDataTransfer::ppuDataPrepare1_$4[OFFSET_STRUCT_RICOH_2C02_PPUADDR]
Converting *(pointer+n) to pointer[n] [44] *ppuDataTransfer::ppuDataPrepare1_$3 = ppuDataTransfer::ppuDataPrepare1_$1  -- ppuDataTransfer::ppuDataPrepare1_$5[OFFSET_STRUCT_RICOH_2C02_PPUADDR]
Converting *(pointer+n) to pointer[n] [53] *ppuDataTransfer::ppuDataPut1_$0 = ppuDataTransfer::ppuDataPut1_val#0  -- ppuDataTransfer::ppuDataPut1_$1[OFFSET_STRUCT_RICOH_2C02_PPUDATA]
Converting *(pointer+n) to pointer[n] [61] *ppuDataPutTile::ppuDataPrepare1_$2 = ppuDataPutTile::ppuDataPrepare1_$0  -- ppuDataPutTile::ppuDataPrepare1_$4[OFFSET_STRUCT_RICOH_2C02_PPUADDR]
Converting *(pointer+n) to pointer[n] [65] *ppuDataPutTile::ppuDataPrepare1_$3 = ppuDataPutTile::ppuDataPrepare1_$1  -- ppuDataPutTile::ppuDataPrepare1_$5[OFFSET_STRUCT_RICOH_2C02_PPUADDR]
Converting *(pointer+n) to pointer[n] [69] *ppuDataPutTile::ppuDataPut1_$0 = ppuDataPutTile::ppuDataPut1_val#0  -- ppuDataPutTile::ppuDataPut1_$1[OFFSET_STRUCT_RICOH_2C02_PPUDATA]
Converting *(pointer+n) to pointer[n] [73] *ppuDataPutTile::ppuDataPut2_$0 = ppuDataPutTile::ppuDataPut2_val#0  -- ppuDataPutTile::ppuDataPut2_$1[OFFSET_STRUCT_RICOH_2C02_PPUDATA]
Converting *(pointer+n) to pointer[n] [80] *ppuDataPutTile::ppuDataPrepare2_$2 = ppuDataPutTile::ppuDataPrepare2_$0  -- ppuDataPutTile::ppuDataPrepare2_$4[OFFSET_STRUCT_RICOH_2C02_PPUADDR]
Converting *(pointer+n) to pointer[n] [84] *ppuDataPutTile::ppuDataPrepare2_$3 = ppuDataPutTile::ppuDataPrepare2_$1  -- ppuDataPutTile::ppuDataPrepare2_$5[OFFSET_STRUCT_RICOH_2C02_PPUADDR]
Converting *(pointer+n) to pointer[n] [88] *ppuDataPutTile::ppuDataPut3_$0 = ppuDataPutTile::ppuDataPut3_val#0  -- ppuDataPutTile::ppuDataPut3_$1[OFFSET_STRUCT_RICOH_2C02_PPUDATA]
Converting *(pointer+n) to pointer[n] [92] *ppuDataPutTile::ppuDataPut4_$0 = ppuDataPutTile::ppuDataPut4_val#0  -- ppuDataPutTile::ppuDataPut4_$1[OFFSET_STRUCT_RICOH_2C02_PPUDATA]
Converting *(pointer+n) to pointer[n] [109] *main::initNES1_disableVideoOutput1_$0 = 0  -- main::initNES1_disableVideoOutput1_$2[OFFSET_STRUCT_RICOH_2C02_PPUCTRL]
Converting *(pointer+n) to pointer[n] [112] *main::initNES1_disableVideoOutput1_$1 = 0  -- main::initNES1_disableVideoOutput1_$3[OFFSET_STRUCT_RICOH_2C02_PPUMASK]
Converting *(pointer+n) to pointer[n] [116] *main::initNES1_disableAudioOutput1_$0 = $40  -- main::initNES1_disableAudioOutput1_$1[OFFSET_STRUCT_RICOH_2A03_DMC_FREQ]
Converting *(pointer+n) to pointer[n] [120] main::initNES1_waitForVBlank1_$0 = *main::initNES1_waitForVBlank1_$2 & $80  -- main::initNES1_waitForVBlank1_$3[OFFSET_STRUCT_RICOH_2C02_PPUSTATUS]
Converting *(pointer+n) to pointer[n] [138] main::initNES1_waitForVBlank2_$0 = *main::initNES1_waitForVBlank2_$2 & $80  -- main::initNES1_waitForVBlank2_$3[OFFSET_STRUCT_RICOH_2C02_PPUSTATUS]
Converting *(pointer+n) to pointer[n] [173] *main::enableVideoOutput1_$0 = $80  -- main::enableVideoOutput1_$2[OFFSET_STRUCT_RICOH_2C02_PPUCTRL]
Converting *(pointer+n) to pointer[n] [176] *main::enableVideoOutput1_$1 = $1e  -- main::enableVideoOutput1_$3[OFFSET_STRUCT_RICOH_2C02_PPUMASK]
Converting *(pointer+n) to pointer[n] [246] *vblank::ppuSpriteBufferDmaTransfer1_$1 = 0  -- vblank::ppuSpriteBufferDmaTransfer1_$3[OFFSET_STRUCT_RICOH_2C02_OAMADDR]
Converting *(pointer+n) to pointer[n] [250] *vblank::ppuSpriteBufferDmaTransfer1_$2 = vblank::ppuSpriteBufferDmaTransfer1_$0  -- vblank::ppuSpriteBufferDmaTransfer1_$4[OFFSET_STRUCT_RICOH_2A03_OAMDMA]
Converting *(pointer+n) to pointer[n] [253] *vblank::$94 = 0  -- vblank::$108[OFFSET_STRUCT_RICOH_2C02_PPUSCROLL]
Converting *(pointer+n) to pointer[n] [256] *vblank::$95 = -8  -- vblank::$109[OFFSET_STRUCT_RICOH_2C02_PPUSCROLL]
Successful SSA optimization Pass2InlineDerefIdx
Simplifying constant evaluating to zero 0*SIZEOF_STRUCT_SPRITEDATA in 
Simplifying constant evaluating to zero 0*SIZEOF_STRUCT_SPRITEDATA in 
Simplifying constant evaluating to zero 0*SIZEOF_STRUCT_SPRITEDATA in 
Simplifying constant evaluating to zero 0*SIZEOF_STRUCT_SPRITEDATA in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero ppuDataPutTile::tile#10 in [66] ppuDataPutTile::ppuDataPut1_val#0 = ppuDataPutTile::tile#10[0]
Simplifying expression containing zero main::initNES1_disableVideoOutput1_$2 in [108] main::initNES1_disableVideoOutput1_$0 = main::initNES1_disableVideoOutput1_$2 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Simplifying expression containing zero main::initNES1_disableVideoOutput1_$2 in [109] main::initNES1_disableVideoOutput1_$2[OFFSET_STRUCT_RICOH_2C02_PPUCTRL] = 0
Simplifying expression containing zero MEMORY in [125] (MEMORY+0)[main::initNES1_i#2] = 0
Simplifying expression containing zero main::enableVideoOutput1_$2 in [172] main::enableVideoOutput1_$0 = main::enableVideoOutput1_$2 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Simplifying expression containing zero main::enableVideoOutput1_$2 in [173] main::enableVideoOutput1_$2[OFFSET_STRUCT_RICOH_2C02_PPUCTRL] = $80
Simplifying expression containing zero (byte*)SPRITE_BUFFER in [190] vblank::$59 = (byte*)SPRITE_BUFFER + vblank::$27
Simplifying expression containing zero (byte*)SPRITE_BUFFER in [191] vblank::$60 = (byte*)SPRITE_BUFFER + vblank::$27
Simplifying expression containing zero vblank::$59 in [192] vblank::$60[OFFSET_STRUCT_SPRITEDATA_Y] = ++ vblank::$59[OFFSET_STRUCT_SPRITEDATA_Y]
Simplifying expression containing zero vblank::$60 in [192] vblank::$60[OFFSET_STRUCT_SPRITEDATA_Y] = ++ *vblank::$59
Simplifying expression containing zero vblank::$62 in [196] vblank::$63[OFFSET_STRUCT_SPRITEDATA_Y] = ++ vblank::$62[OFFSET_STRUCT_SPRITEDATA_Y]
Simplifying expression containing zero vblank::$63 in [196] vblank::$63[OFFSET_STRUCT_SPRITEDATA_Y] = ++ *vblank::$62
Simplifying expression containing zero vblank::$65 in [200] vblank::$66[OFFSET_STRUCT_SPRITEDATA_Y] = ++ vblank::$65[OFFSET_STRUCT_SPRITEDATA_Y]
Simplifying expression containing zero vblank::$66 in [200] vblank::$66[OFFSET_STRUCT_SPRITEDATA_Y] = ++ *vblank::$65
Simplifying expression containing zero vblank::$68 in [204] vblank::$69[OFFSET_STRUCT_SPRITEDATA_Y] = ++ vblank::$68[OFFSET_STRUCT_SPRITEDATA_Y]
Simplifying expression containing zero vblank::$69 in [204] vblank::$69[OFFSET_STRUCT_SPRITEDATA_Y] = ++ *vblank::$68
Simplifying expression containing zero (byte*)SPRITE_BUFFER in [209] vblank::$71 = (byte*)SPRITE_BUFFER + vblank::$35
Simplifying expression containing zero (byte*)SPRITE_BUFFER in [210] vblank::$72 = (byte*)SPRITE_BUFFER + vblank::$35
Simplifying expression containing zero vblank::$71 in [211] vblank::$72[OFFSET_STRUCT_SPRITEDATA_Y] = -- vblank::$71[OFFSET_STRUCT_SPRITEDATA_Y]
Simplifying expression containing zero vblank::$72 in [211] vblank::$72[OFFSET_STRUCT_SPRITEDATA_Y] = -- *vblank::$71
Simplifying expression containing zero vblank::$74 in [215] vblank::$75[OFFSET_STRUCT_SPRITEDATA_Y] = -- vblank::$74[OFFSET_STRUCT_SPRITEDATA_Y]
Simplifying expression containing zero vblank::$75 in [215] vblank::$75[OFFSET_STRUCT_SPRITEDATA_Y] = -- *vblank::$74
Simplifying expression containing zero vblank::$77 in [219] vblank::$78[OFFSET_STRUCT_SPRITEDATA_Y] = -- vblank::$77[OFFSET_STRUCT_SPRITEDATA_Y]
Simplifying expression containing zero vblank::$78 in [219] vblank::$78[OFFSET_STRUCT_SPRITEDATA_Y] = -- *vblank::$77
Simplifying expression containing zero vblank::$80 in [223] vblank::$81[OFFSET_STRUCT_SPRITEDATA_Y] = -- vblank::$80[OFFSET_STRUCT_SPRITEDATA_Y]
Simplifying expression containing zero vblank::$81 in [223] vblank::$81[OFFSET_STRUCT_SPRITEDATA_Y] = -- *vblank::$80
Simplifying expression containing zero (byte*)SPRITE_BUFFER in [228] vblank::$83 = (byte*)SPRITE_BUFFER + vblank::$43
Simplifying expression containing zero (byte*)SPRITE_BUFFER in [229] vblank::$84 = (byte*)SPRITE_BUFFER + vblank::$43
Simplifying expression containing zero (byte*)SPRITE_BUFFER in [258] vblank::$97 = (byte*)SPRITE_BUFFER + vblank::$51
Simplifying expression containing zero (byte*)SPRITE_BUFFER in [259] vblank::$98 = (byte*)SPRITE_BUFFER + vblank::$51
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Eliminating unused variable readJoy1::$4 and assignment [0] readJoy1::$4 = readJoy1::$7 + OFFSET_STRUCT_RICOH_2A03_JOY1
Eliminating unused variable readJoy1::$5 and assignment [2] readJoy1::$5 = readJoy1::$8 + OFFSET_STRUCT_RICOH_2A03_JOY1
Eliminating unused variable readJoy1::$6 and assignment [7] readJoy1::$6 = readJoy1::$9 + OFFSET_STRUCT_RICOH_2A03_JOY1
Eliminating unused variable ppuDataFill::ppuDataPrepare1_$2 and assignment [14] ppuDataFill::ppuDataPrepare1_$2 = ppuDataFill::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable ppuDataFill::ppuDataPrepare1_$3 and assignment [17] ppuDataFill::ppuDataPrepare1_$3 = ppuDataFill::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable ppuDataFill::ppuDataPut1_$0 and assignment [21] ppuDataFill::ppuDataPut1_$0 = ppuDataFill::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable ppuDataTransfer::ppuDataPrepare1_$2 and assignment [26] ppuDataTransfer::ppuDataPrepare1_$2 = ppuDataTransfer::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable ppuDataTransfer::ppuDataPrepare1_$3 and assignment [29] ppuDataTransfer::ppuDataPrepare1_$3 = ppuDataTransfer::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable ppuDataTransfer::ppuDataPut1_$0 and assignment [34] ppuDataTransfer::ppuDataPut1_$0 = ppuDataTransfer::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable ppuDataPutTile::ppuDataPrepare1_$2 and assignment [41] ppuDataPutTile::ppuDataPrepare1_$2 = ppuDataPutTile::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable ppuDataPutTile::ppuDataPrepare1_$3 and assignment [44] ppuDataPutTile::ppuDataPrepare1_$3 = ppuDataPutTile::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable ppuDataPutTile::ppuDataPut1_$0 and assignment [47] ppuDataPutTile::ppuDataPut1_$0 = ppuDataPutTile::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable ppuDataPutTile::ppuDataPut2_$0 and assignment [50] ppuDataPutTile::ppuDataPut2_$0 = ppuDataPutTile::ppuDataPut2_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable ppuDataPutTile::ppuDataPrepare2_$2 and assignment [56] ppuDataPutTile::ppuDataPrepare2_$2 = ppuDataPutTile::ppuDataPrepare2_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable ppuDataPutTile::ppuDataPrepare2_$3 and assignment [59] ppuDataPutTile::ppuDataPrepare2_$3 = ppuDataPutTile::ppuDataPrepare2_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable ppuDataPutTile::ppuDataPut3_$0 and assignment [62] ppuDataPutTile::ppuDataPut3_$0 = ppuDataPutTile::ppuDataPut3_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable ppuDataPutTile::ppuDataPut4_$0 and assignment [65] ppuDataPutTile::ppuDataPut4_$0 = ppuDataPutTile::ppuDataPut4_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable main::initNES1_disableVideoOutput1_$0 and assignment [76] main::initNES1_disableVideoOutput1_$0 = main::initNES1_disableVideoOutput1_$2
Eliminating unused variable main::initNES1_disableVideoOutput1_$1 and assignment [78] main::initNES1_disableVideoOutput1_$1 = main::initNES1_disableVideoOutput1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUMASK
Eliminating unused variable main::initNES1_disableAudioOutput1_$0 and assignment [81] main::initNES1_disableAudioOutput1_$0 = main::initNES1_disableAudioOutput1_$1 + OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
Eliminating unused variable main::initNES1_waitForVBlank1_$2 and assignment [84] main::initNES1_waitForVBlank1_$2 = main::initNES1_waitForVBlank1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
Eliminating unused variable main::initNES1_waitForVBlank2_$2 and assignment [98] main::initNES1_waitForVBlank2_$2 = main::initNES1_waitForVBlank2_$3 + OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
Eliminating unused variable main::enableVideoOutput1_$0 and assignment [113] main::enableVideoOutput1_$0 = main::enableVideoOutput1_$2
Eliminating unused variable main::enableVideoOutput1_$1 and assignment [115] main::enableVideoOutput1_$1 = main::enableVideoOutput1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUMASK
Eliminating unused variable vblank::ppuSpriteBufferDmaTransfer1_$1 and assignment [164] vblank::ppuSpriteBufferDmaTransfer1_$1 = vblank::ppuSpriteBufferDmaTransfer1_$3 + OFFSET_STRUCT_RICOH_2C02_OAMADDR
Eliminating unused variable vblank::ppuSpriteBufferDmaTransfer1_$2 and assignment [167] vblank::ppuSpriteBufferDmaTransfer1_$2 = vblank::ppuSpriteBufferDmaTransfer1_$4 + OFFSET_STRUCT_RICOH_2A03_OAMDMA
Eliminating unused variable vblank::$94 and assignment [169] vblank::$94 = vblank::$108 + OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
Eliminating unused variable vblank::$95 and assignment [171] vblank::$95 = vblank::$109 + OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
Eliminating unused constant memcpy::return#2
Eliminating unused constant vblank::$27
Eliminating unused constant vblank::$35
Eliminating unused constant vblank::$43
Eliminating unused constant vblank::$51
Eliminating unused constant OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Eliminating unused constant OFFSET_STRUCT_SPRITEDATA_Y
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Resolving array sizeof() sizeof PALETTE
Resolving array sizeof() sizeof SPRITES
Successful SSA optimization PassNSizeOfSimplification
Constant right-side identified [19] ppuDataTransfer::ppuDataPrepare1_$0 = > ppuDataTransfer::ppuData#0
Constant right-side identified [21] ppuDataTransfer::ppuDataPrepare1_$1 = < ppuDataTransfer::ppuData#0
Constant right-side identified [51] memcpy::src_end#0 = memcpy::$2 + memcpy::num#0
Constant right-side identified [103] vblank::$62 = (byte*)SPRITE_BUFFER + vblank::$29
Constant right-side identified [104] vblank::$63 = (byte*)SPRITE_BUFFER + vblank::$29
Constant right-side identified [106] vblank::$65 = (byte*)SPRITE_BUFFER + vblank::$31
Constant right-side identified [107] vblank::$66 = (byte*)SPRITE_BUFFER + vblank::$31
Constant right-side identified [109] vblank::$68 = (byte*)SPRITE_BUFFER + vblank::$33
Constant right-side identified [110] vblank::$69 = (byte*)SPRITE_BUFFER + vblank::$33
Constant right-side identified [117] vblank::$74 = (byte*)SPRITE_BUFFER + vblank::$37
Constant right-side identified [118] vblank::$75 = (byte*)SPRITE_BUFFER + vblank::$37
Constant right-side identified [120] vblank::$77 = (byte*)SPRITE_BUFFER + vblank::$39
Constant right-side identified [121] vblank::$78 = (byte*)SPRITE_BUFFER + vblank::$39
Constant right-side identified [123] vblank::$80 = (byte*)SPRITE_BUFFER + vblank::$41
Constant right-side identified [124] vblank::$81 = (byte*)SPRITE_BUFFER + vblank::$41
Constant right-side identified [131] vblank::$86 = (byte*)SPRITE_BUFFER + vblank::$45
Constant right-side identified [132] vblank::$87 = (byte*)SPRITE_BUFFER + vblank::$45
Constant right-side identified [134] vblank::$89 = (byte*)SPRITE_BUFFER + vblank::$47
Constant right-side identified [135] vblank::$90 = (byte*)SPRITE_BUFFER + vblank::$47
Constant right-side identified [137] vblank::$92 = (byte*)SPRITE_BUFFER + vblank::$49
Constant right-side identified [138] vblank::$93 = (byte*)SPRITE_BUFFER + vblank::$49
Constant right-side identified [141] vblank::ppuSpriteBufferDmaTransfer1_$0 = > vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0
Constant right-side identified [148] vblank::$100 = (byte*)SPRITE_BUFFER + vblank::$53
Constant right-side identified [149] vblank::$101 = (byte*)SPRITE_BUFFER + vblank::$53
Constant right-side identified [151] vblank::$103 = (byte*)SPRITE_BUFFER + vblank::$55
Constant right-side identified [152] vblank::$104 = (byte*)SPRITE_BUFFER + vblank::$55
Constant right-side identified [154] vblank::$106 = (byte*)SPRITE_BUFFER + vblank::$57
Constant right-side identified [155] vblank::$107 = (byte*)SPRITE_BUFFER + vblank::$57
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant ppuDataTransfer::ppuDataPrepare1_$0 = >ppuDataTransfer::ppuData#0
Constant ppuDataTransfer::ppuDataPrepare1_$1 = <ppuDataTransfer::ppuData#0
Constant memcpy::src_end#0 = memcpy::$2+memcpy::num#0
Constant vblank::$59 = (byte*)SPRITE_BUFFER
Constant vblank::$60 = (byte*)SPRITE_BUFFER
Constant vblank::$62 = (byte*)SPRITE_BUFFER+vblank::$29
Constant vblank::$63 = (byte*)SPRITE_BUFFER+vblank::$29
Constant vblank::$65 = (byte*)SPRITE_BUFFER+vblank::$31
Constant vblank::$66 = (byte*)SPRITE_BUFFER+vblank::$31
Constant vblank::$68 = (byte*)SPRITE_BUFFER+vblank::$33
Constant vblank::$69 = (byte*)SPRITE_BUFFER+vblank::$33
Constant vblank::$71 = (byte*)SPRITE_BUFFER
Constant vblank::$72 = (byte*)SPRITE_BUFFER
Constant vblank::$74 = (byte*)SPRITE_BUFFER+vblank::$37
Constant vblank::$75 = (byte*)SPRITE_BUFFER+vblank::$37
Constant vblank::$77 = (byte*)SPRITE_BUFFER+vblank::$39
Constant vblank::$78 = (byte*)SPRITE_BUFFER+vblank::$39
Constant vblank::$80 = (byte*)SPRITE_BUFFER+vblank::$41
Constant vblank::$81 = (byte*)SPRITE_BUFFER+vblank::$41
Constant vblank::$83 = (byte*)SPRITE_BUFFER
Constant vblank::$84 = (byte*)SPRITE_BUFFER
Constant vblank::$86 = (byte*)SPRITE_BUFFER+vblank::$45
Constant vblank::$87 = (byte*)SPRITE_BUFFER+vblank::$45
Constant vblank::$89 = (byte*)SPRITE_BUFFER+vblank::$47
Constant vblank::$90 = (byte*)SPRITE_BUFFER+vblank::$47
Constant vblank::$92 = (byte*)SPRITE_BUFFER+vblank::$49
Constant vblank::$93 = (byte*)SPRITE_BUFFER+vblank::$49
Constant vblank::ppuSpriteBufferDmaTransfer1_$0 = >vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0
Constant vblank::$97 = (byte*)SPRITE_BUFFER
Constant vblank::$98 = (byte*)SPRITE_BUFFER
Constant vblank::$100 = (byte*)SPRITE_BUFFER+vblank::$53
Constant vblank::$101 = (byte*)SPRITE_BUFFER+vblank::$53
Constant vblank::$103 = (byte*)SPRITE_BUFFER+vblank::$55
Constant vblank::$104 = (byte*)SPRITE_BUFFER+vblank::$55
Constant vblank::$106 = (byte*)SPRITE_BUFFER+vblank::$57
Constant vblank::$107 = (byte*)SPRITE_BUFFER+vblank::$57
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero <ppuDataTransfer::ppuData#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Adding number conversion cast (unumber) $20 in 
Adding number conversion cast (unumber) 8 in 
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $20
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining Noop Cast [37] ppuDataPutTile::$7 = (byte*)ppuDataPutTile::ppuData#2 keeping ppuDataPutTile::ppuData#2
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [39] ppuDataPutTile::ppuDataPrepare2_ppuData#0 = (void* const)ppuDataPutTile::$3 keeping ppuDataPutTile::ppuDataPrepare2_ppuData#0
Inlining Noop Cast [83] ppuDataPutTile::ppuData#0 = (void* const)main::$10 keeping ppuDataPutTile::ppuData#0
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings readJoy1::joy#0
Inlining constant with var siblings readJoy1::i#0
Inlining constant with var siblings ppuDataFill::i#0
Inlining constant with different constant siblings ppuDataFill::ppuData#0
Inlining constant with var siblings ppuDataFill::val#0
Inlining constant with var siblings ppuDataFill::size#0
Inlining constant with different constant siblings ppuDataFill::ppuData#1
Inlining constant with var siblings ppuDataFill::val#1
Inlining constant with var siblings ppuDataFill::size#1
Inlining constant with var siblings ppuDataTransfer::i#0
Inlining constant with var siblings ppuDataTransfer::cpuSrc#0
Inlining constant with var siblings ppuDataPutTile::tile#0
Inlining constant with var siblings ppuDataPutTile::ppuData#1
Inlining constant with var siblings ppuDataPutTile::tile#1
Inlining constant with var siblings memcpy::src#0
Inlining constant with var siblings memcpy::dst#0
Inlining constant with var siblings main::initNES1_i#0
Inlining constant with var siblings main::x#0
Constant inlined ppuDataPutTile::ppuDataPut4_$1 = (byte*)PPU
Constant inlined vblank::$47 = 2*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$49 = 3*SIZEOF_STRUCT_SPRITEDATA
Constant inlined ppuDataTransfer::i#0 = 0
Constant inlined ppuDataTransfer::ppuDataPrepare1_$1 = 0
Constant inlined ppuDataTransfer::ppuDataPrepare1_$0 = >ppuDataTransfer::ppuData#0
Constant inlined vblank::$83 = (byte*)SPRITE_BUFFER
Constant inlined vblank::$84 = (byte*)SPRITE_BUFFER
Constant inlined vblank::$41 = 3*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$86 = (byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$87 = (byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$45 = 1*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$89 = (byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
Constant inlined memcpy::$2 = (byte*)memcpy::source#0
Constant inlined main::initNES1_waitForVBlank2_$3 = (volatile byte*)PPU
Constant inlined vblank::$90 = (byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$92 = (byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
Constant inlined ppuDataFill::ppuDataPrepare1_$4 = (byte*)PPU
Constant inlined ppuDataTransfer::ppuDataPrepare1_$5 = (byte*)PPU
Constant inlined ppuDataFill::ppuDataPrepare1_$5 = (byte*)PPU
Constant inlined ppuDataTransfer::ppuDataPrepare1_$4 = (byte*)PPU
Constant inlined ppuDataFill::ppuData#1 = (void* const)PPU_ATTRIBUTE_TABLE_0
Constant inlined ppuDataFill::ppuData#0 = (void* const)PPU_NAME_TABLE_0
Constant inlined ppuDataTransfer::cpuSrc#0 = (byte*)ppuDataTransfer::cpuData#0
Constant inlined vblank::$57 = 3*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$104 = (byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$103 = (byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$59 = (byte*)SPRITE_BUFFER
Constant inlined vblank::$101 = (byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$100 = (byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
Constant inlined main::initNES1_i#0 = 0
Constant inlined vblank::$93 = (byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
Constant inlined ppuDataPutTile::ppuDataPut1_$1 = (byte*)PPU
Constant inlined vblank::$53 = 1*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$97 = (byte*)SPRITE_BUFFER
Constant inlined vblank::$98 = (byte*)SPRITE_BUFFER
Constant inlined vblank::$55 = 2*SIZEOF_STRUCT_SPRITEDATA
Constant inlined ppuDataPutTile::ppuDataPrepare2_$5 = (byte*)PPU
Constant inlined ppuDataPutTile::ppuDataPrepare2_$4 = (byte*)PPU
Constant inlined vblank::$109 = (byte*)PPU
Constant inlined vblank::$108 = (byte*)PPU
Constant inlined vblank::$107 = (byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$106 = (byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
Constant inlined ppuDataFill::i#0 = 0
Constant inlined vblank::$68 = (byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$69 = (byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
Constant inlined memcpy::dst#0 = (byte*)memcpy::destination#0
Constant inlined vblank::$29 = 1*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$60 = (byte*)SPRITE_BUFFER
Constant inlined vblank::$62 = (byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$63 = (byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
Constant inlined memcpy::src#0 = (byte*)memcpy::source#0
Constant inlined main::enableVideoOutput1_$3 = (byte*)PPU
Constant inlined main::enableVideoOutput1_$2 = (byte*)PPU
Constant inlined vblank::$65 = (byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
Constant inlined readJoy1::i#0 = 0
Constant inlined ppuDataTransfer::ppuDataPut1_$1 = (byte*)PPU
Constant inlined ppuDataPutTile::ppuDataPut2_$1 = (byte*)PPU
Constant inlined vblank::$66 = (byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
Constant inlined ppuDataFill::val#1 = 0
Constant inlined ppuDataFill::ppuDataPut1_$1 = (byte*)PPU
Constant inlined ppuDataFill::val#0 = $fc
Constant inlined ppuDataPutTile::ppuDataPrepare1_$5 = (byte*)PPU
Constant inlined ppuDataPutTile::ppuDataPrepare1_$4 = (byte*)PPU
Constant inlined main::initNES1_disableVideoOutput1_$3 = (byte*)PPU
Constant inlined main::initNES1_disableVideoOutput1_$2 = (byte*)PPU
Constant inlined main::initNES1_disableAudioOutput1_$1 = (byte*)APU
Constant inlined readJoy1::joy#0 = 0
Constant inlined ppuDataPutTile::tile#0 = FLOOR
Constant inlined ppuDataPutTile::tile#1 = FLAG
Constant inlined ppuDataPutTile::ppuDataPut3_$1 = (byte*)PPU
Constant inlined vblank::$37 = 1*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$39 = 2*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$71 = (byte*)SPRITE_BUFFER
Constant inlined vblank::$72 = (byte*)SPRITE_BUFFER
Constant inlined main::x#0 = 0
Constant inlined vblank::$74 = (byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$31 = 2*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$75 = (byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$33 = 3*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$77 = (byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$78 = (byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
Constant inlined readJoy1::$9 = (byte*)APU
Constant inlined vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 = SPRITE_BUFFER
Constant inlined vblank::$80 = (byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
Constant inlined main::initNES1_waitForVBlank1_$3 = (volatile byte*)PPU
Constant inlined vblank::$81 = (byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
Constant inlined ppuDataPutTile::ppuData#1 = (void* const)PPU_NAME_TABLE_0+(word)$12*$20+$1c
Constant inlined vblank::ppuSpriteBufferDmaTransfer1_$0 = >SPRITE_BUFFER
Constant inlined ppuDataFill::size#1 = $40
Constant inlined ppuDataFill::size#0 = $3c0
Constant inlined readJoy1::$7 = (byte*)APU
Constant inlined vblank::ppuSpriteBufferDmaTransfer1_$3 = (byte*)PPU
Constant inlined readJoy1::$8 = (byte*)APU
Constant inlined vblank::ppuSpriteBufferDmaTransfer1_$4 = (byte*)APU
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ)
Consolidated array index constant in *((volatile byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Consolidated array index constant in *((volatile byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Consolidated array index constant in *((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X)
Consolidated array index constant in *((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X)
Consolidated array index constant in *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
Consolidated array index constant in *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
Consolidated array index constant in *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
Consolidated array index constant in *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
Consolidated array index constant in *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
Consolidated array index constant in *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL)
Consolidated array index constant in *((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X)
Consolidated array index constant in *((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X)
Consolidated array index constant in *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
Consolidated array index constant in *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
Consolidated array index constant in *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
Consolidated array index constant in *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
Consolidated array index constant in *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
Consolidated array index constant in *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
Successful SSA optimization Pass2ConstantAdditionElimination
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $12
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) $14
Finalized unsigned number type (byte) $20
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting main::@12(between main::initNES1_@1 and main::initNES1_@1)
Adding NOP phi() at start of vblank
Adding NOP phi() at start of vblank::@4
Adding NOP phi() at start of main
Adding NOP phi() at start of main::initNES1_waitForVBlank1
Adding NOP phi() at start of main::initNES1_@6
Adding NOP phi() at start of main::initNES1_waitForVBlank2
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of readJoy1::@3
Adding NOP phi() at start of ppuDataTransfer
Adding NOP phi() at start of ppuDataTransfer::@3
Adding NOP phi() at start of ppuDataFill::@3
Adding NOP phi() at start of ppuDataFill::@2
Adding NOP phi() at start of memcpy
Adding NOP phi() at start of memcpy::@3
CALL GRAPH
Calls in [vblank] to readJoy1:1 
Calls in [main] to ppuDataTransfer:61 ppuDataFill:63 ppuDataFill:65 ppuDataPutTile:70 memcpy:72 ppuDataPutTile:79 

Created 14 initial phi equivalence classes
Coalesced [81] main::x#5 = main::x#1
Coalesced [82] main::initNES1_i#3 = main::initNES1_i#1
Coalesced [93] readJoy1::i#4 = readJoy1::i#1
Coalesced [94] readJoy1::joy#5 = readJoy1::joy#1
Coalesced [106] ppuDataTransfer::i#6 = ppuDataTransfer::i#1
Coalesced [107] ppuDataTransfer::cpuSrc#6 = ppuDataTransfer::cpuSrc#1
Coalesced [120] ppuDataFill::i#6 = ppuDataFill::i#1
Coalesced [148] memcpy::src#4 = memcpy::src#1
Coalesced [149] memcpy::dst#4 = memcpy::dst#1
Coalesced down to 14 phi equivalence classes
Culled Empty Block label vblank::@4
Culled Empty Block label main::initNES1_@6
Culled Empty Block label main::@8
Culled Empty Block label main::@11
Culled Empty Block label main::@12
Culled Empty Block label readJoy1::@3
Culled Empty Block label ppuDataTransfer::@3
Culled Empty Block label ppuDataFill::@3
Culled Empty Block label ppuDataFill::@2
Culled Empty Block label memcpy::@3
Renumbering block ppuDataFill::@4 to ppuDataFill::@2
Renumbering block ppuDataTransfer::@4 to ppuDataTransfer::@3
Renumbering block main::@9 to main::@8
Renumbering block main::@10 to main::@9
Renumbering block vblank::@5 to vblank::@4
Renumbering block vblank::@6 to vblank::@5
Renumbering block vblank::@7 to vblank::@6
Renumbering block vblank::@8 to vblank::@7
Renumbering block vblank::@9 to vblank::@8
Renumbering block vblank::@10 to vblank::@9
Adding NOP phi() at start of vblank
Adding NOP phi() at start of main
Adding NOP phi() at start of main::initNES1_waitForVBlank1
Adding NOP phi() at start of main::initNES1_waitForVBlank2
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of ppuDataTransfer
Adding NOP phi() at start of memcpy

FINAL CONTROL FLOW GRAPH

__interrupt(hardware_all) void vblank()
vblank: scope:[vblank]  from
  [0] phi()
  [1] call readJoy1 
  [2] readJoy1::return#2 = readJoy1::joy#2
  to:vblank::@9
vblank::@9: scope:[vblank]  from vblank
  [3] vblank::joy#0 = readJoy1::return#2
  [4] vblank::$1 = vblank::joy#0 & JOY_DOWN
  [5] if(0==vblank::$1) goto vblank::@1
  to:vblank::@4
vblank::@4: scope:[vblank]  from vblank::@9
  [6] *((byte*)SPRITE_BUFFER) = ++ *((byte*)SPRITE_BUFFER)
  [7] *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA) = ++ *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA)
  [8] *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA) = ++ *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA)
  [9] *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA) = ++ *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA)
  to:vblank::@1
vblank::@1: scope:[vblank]  from vblank::@4 vblank::@9
  [10] vblank::$3 = vblank::joy#0 & JOY_UP
  [11] if(0==vblank::$3) goto vblank::@2
  to:vblank::@5
vblank::@5: scope:[vblank]  from vblank::@1
  [12] *((byte*)SPRITE_BUFFER) = -- *((byte*)SPRITE_BUFFER)
  [13] *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA) = -- *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA)
  [14] *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA) = -- *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA)
  [15] *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA) = -- *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA)
  to:vblank::@2
vblank::@2: scope:[vblank]  from vblank::@1 vblank::@5
  [16] vblank::$5 = vblank::joy#0 & JOY_LEFT
  [17] if(0==vblank::$5) goto vblank::@3
  to:vblank::@6
vblank::@6: scope:[vblank]  from vblank::@2
  [18] *((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X) = -- *((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X)
  [19] *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = -- *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
  [20] *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = -- *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
  [21] *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = -- *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
  to:vblank::@3
vblank::@3: scope:[vblank]  from vblank::@2 vblank::@6
  [22] vblank::$7 = vblank::joy#0 & JOY_RIGHT
  [23] if(0==vblank::$7) goto vblank::ppuSpriteBufferDmaTransfer1
  to:vblank::@7
vblank::@7: scope:[vblank]  from vblank::@3
  [24] *((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X) = ++ *((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X)
  [25] *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = ++ *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
  [26] *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = ++ *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
  [27] *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = ++ *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X)
  to:vblank::ppuSpriteBufferDmaTransfer1
vblank::ppuSpriteBufferDmaTransfer1: scope:[vblank]  from vblank::@3 vblank::@7
  [28] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR) = 0
  [29] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA) = >SPRITE_BUFFER
  to:vblank::@8
vblank::@8: scope:[vblank]  from vblank::ppuSpriteBufferDmaTransfer1
  [30] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = 0
  [31] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = -8
  to:vblank::@return
vblank::@return: scope:[vblank]  from vblank::@8
  [32] return 
  to:@return

void main()
main: scope:[main]  from
  [33] phi()
  to:main::initNES1
main::initNES1: scope:[main]  from main
  asm { cld ldx#$ff txs  }
  to:main::initNES1_disableVideoOutput1
main::initNES1_disableVideoOutput1: scope:[main]  from main::initNES1
  [35] *((byte*)PPU) = 0
  [36] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = 0
  to:main::initNES1_disableAudioOutput1
main::initNES1_disableAudioOutput1: scope:[main]  from main::initNES1_disableVideoOutput1
  [37] *FR_COUNTER = $40
  [38] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) = $40
  to:main::initNES1_clearVBlankFlag1
main::initNES1_clearVBlankFlag1: scope:[main]  from main::initNES1_disableAudioOutput1
  asm { ldaPPU_PPUSTATUS  }
  to:main::initNES1_waitForVBlank1
main::initNES1_waitForVBlank1: scope:[main]  from main::initNES1_clearVBlankFlag1
  [40] phi()
  to:main::initNES1_waitForVBlank1_@1
main::initNES1_waitForVBlank1_@1: scope:[main]  from main::initNES1_waitForVBlank1 main::initNES1_waitForVBlank1_@1
  [41] main::initNES1_waitForVBlank1_$0 = *((volatile byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80
  [42] if(0==main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1
  to:main::initNES1_@1
main::initNES1_@1: scope:[main]  from main::initNES1_@1 main::initNES1_waitForVBlank1_@1
  [43] main::initNES1_i#2 = phi( main::initNES1_@1/main::initNES1_i#1, main::initNES1_waitForVBlank1_@1/0 )
  [44] MEMORY[main::initNES1_i#2] = 0
  [45] (MEMORY+$100)[main::initNES1_i#2] = 0
  [46] (MEMORY+$200)[main::initNES1_i#2] = 0
  [47] (MEMORY+$300)[main::initNES1_i#2] = 0
  [48] (MEMORY+$400)[main::initNES1_i#2] = 0
  [49] (MEMORY+$500)[main::initNES1_i#2] = 0
  [50] (MEMORY+$600)[main::initNES1_i#2] = 0
  [51] (MEMORY+$700)[main::initNES1_i#2] = 0
  [52] main::initNES1_i#1 = ++ main::initNES1_i#2
  [53] if(0!=main::initNES1_i#1) goto main::initNES1_@1
  to:main::initNES1_waitForVBlank2
main::initNES1_waitForVBlank2: scope:[main]  from main::initNES1_@1
  [54] phi()
  to:main::initNES1_waitForVBlank2_@1
main::initNES1_waitForVBlank2_@1: scope:[main]  from main::initNES1_waitForVBlank2 main::initNES1_waitForVBlank2_@1
  [55] main::initNES1_waitForVBlank2_$0 = *((volatile byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80
  [56] if(0==main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1
  to:main::initNES1_@7
main::initNES1_@7: scope:[main]  from main::initNES1_waitForVBlank2_@1
  asm { ldaPPU_PPUSTATUS  }
  to:main::@5
main::@5: scope:[main]  from main::initNES1_@7
  [58] phi()
  [59] call ppuDataTransfer 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [60] phi()
  [61] call ppuDataFill 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [62] phi()
  [63] call ppuDataFill 
  to:main::@1
main::@1: scope:[main]  from main::@7 main::@8
  [64] main::x#2 = phi( main::@7/0, main::@8/main::x#1 )
  [65] if(main::x#2<$20) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [66] phi()
  [67] call ppuDataPutTile 
  to:main::@9
main::@9: scope:[main]  from main::@3
  [68] phi()
  [69] call memcpy 
  to:main::enableVideoOutput1
main::enableVideoOutput1: scope:[main]  from main::@9
  [70] *((byte*)PPU) = $80
  [71] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = $1e
  to:main::@4
main::@4: scope:[main]  from main::@4 main::enableVideoOutput1
  [72] phi()
  to:main::@4
main::@2: scope:[main]  from main::@1
  [73] ppuDataPutTile::ppuData#0 = PPU_NAME_TABLE_0+(word)$14*$20 + main::x#2
  [74] ppuDataPutTile::ppuData#9 = (void* const)ppuDataPutTile::ppuData#0
  [75] call ppuDataPutTile 
  to:main::@8
main::@8: scope:[main]  from main::@2
  [76] main::x#1 = main::x#2 + 2
  to:main::@1

byte readJoy1()
readJoy1: scope:[readJoy1]  from vblank
  [77] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1) = 1
  [78] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1) = 0
  to:readJoy1::@1
readJoy1::@1: scope:[readJoy1]  from readJoy1 readJoy1::@2
  [79] readJoy1::joy#2 = phi( readJoy1/0, readJoy1::@2/readJoy1::joy#1 )
  [79] readJoy1::i#2 = phi( readJoy1/0, readJoy1::@2/readJoy1::i#1 )
  [80] if(readJoy1::i#2<8) goto readJoy1::@2
  to:readJoy1::@return
readJoy1::@return: scope:[readJoy1]  from readJoy1::@1
  [81] return 
  to:@return
readJoy1::@2: scope:[readJoy1]  from readJoy1::@1
  [82] readJoy1::$1 = readJoy1::joy#2 << 1
  [83] readJoy1::$2 = *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1) & 1
  [84] readJoy1::joy#1 = readJoy1::$1 | readJoy1::$2
  [85] readJoy1::i#1 = ++ readJoy1::i#2
  to:readJoy1::@1

void ppuDataTransfer(void* const ppuDataTransfer::ppuData , void* const ppuDataTransfer::cpuData , word ppuDataTransfer::size)
ppuDataTransfer: scope:[ppuDataTransfer]  from main::@5
  [86] phi()
  to:ppuDataTransfer::ppuDataPrepare1
ppuDataTransfer::ppuDataPrepare1: scope:[ppuDataTransfer]  from ppuDataTransfer
  [87] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = >ppuDataTransfer::ppuData#0
  [88] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = 0
  to:ppuDataTransfer::@1
ppuDataTransfer::@1: scope:[ppuDataTransfer]  from ppuDataTransfer::@3 ppuDataTransfer::ppuDataPrepare1
  [89] ppuDataTransfer::cpuSrc#2 = phi( ppuDataTransfer::ppuDataPrepare1/(byte*)ppuDataTransfer::cpuData#0, ppuDataTransfer::@3/ppuDataTransfer::cpuSrc#1 )
  [89] ppuDataTransfer::i#2 = phi( ppuDataTransfer::ppuDataPrepare1/0, ppuDataTransfer::@3/ppuDataTransfer::i#1 )
  [90] if(ppuDataTransfer::i#2<ppuDataTransfer::size#0) goto ppuDataTransfer::@2
  to:ppuDataTransfer::@return
ppuDataTransfer::@return: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  [91] return 
  to:@return
ppuDataTransfer::@2: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  [92] ppuDataTransfer::ppuDataPut1_val#0 = *ppuDataTransfer::cpuSrc#2
  to:ppuDataTransfer::ppuDataPut1
ppuDataTransfer::ppuDataPut1: scope:[ppuDataTransfer]  from ppuDataTransfer::@2
  [93] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataTransfer::ppuDataPut1_val#0
  to:ppuDataTransfer::@3
ppuDataTransfer::@3: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPut1
  [94] ppuDataTransfer::cpuSrc#1 = ++ ppuDataTransfer::cpuSrc#2
  [95] ppuDataTransfer::i#1 = ++ ppuDataTransfer::i#2
  to:ppuDataTransfer::@1

void ppuDataFill(void* const ppuDataFill::ppuData , byte ppuDataFill::val , word ppuDataFill::size)
ppuDataFill: scope:[ppuDataFill]  from main::@6 main::@7
  [96] ppuDataFill::val#4 = phi( main::@6/$fc, main::@7/0 )
  [96] ppuDataFill::size#3 = phi( main::@6/$3c0, main::@7/$40 )
  [96] ppuDataFill::ppuDataPrepare1_ppuData#0 = phi( main::@6/(void* const)PPU_NAME_TABLE_0, main::@7/(void* const)PPU_ATTRIBUTE_TABLE_0 )
  to:ppuDataFill::ppuDataPrepare1
ppuDataFill::ppuDataPrepare1: scope:[ppuDataFill]  from ppuDataFill
  [97] ppuDataFill::ppuDataPrepare1_$0 = > ppuDataFill::ppuDataPrepare1_ppuData#0
  [98] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataFill::ppuDataPrepare1_$0
  [99] ppuDataFill::ppuDataPrepare1_$1 = < ppuDataFill::ppuDataPrepare1_ppuData#0
  [100] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataFill::ppuDataPrepare1_$1
  to:ppuDataFill::@1
ppuDataFill::@1: scope:[ppuDataFill]  from ppuDataFill::@2 ppuDataFill::ppuDataPrepare1
  [101] ppuDataFill::i#2 = phi( ppuDataFill::ppuDataPrepare1/0, ppuDataFill::@2/ppuDataFill::i#1 )
  [102] if(ppuDataFill::i#2<ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1
  to:ppuDataFill::@return
ppuDataFill::@return: scope:[ppuDataFill]  from ppuDataFill::@1
  [103] return 
  to:@return
ppuDataFill::ppuDataPut1: scope:[ppuDataFill]  from ppuDataFill::@1
  [104] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataFill::val#4
  to:ppuDataFill::@2
ppuDataFill::@2: scope:[ppuDataFill]  from ppuDataFill::ppuDataPut1
  [105] ppuDataFill::i#1 = ++ ppuDataFill::i#2
  to:ppuDataFill::@1

void ppuDataPutTile(void* const ppuDataPutTile::ppuData , byte* ppuDataPutTile::tile)
ppuDataPutTile: scope:[ppuDataPutTile]  from main::@2 main::@3
  [106] ppuDataPutTile::tile#10 = phi( main::@2/FLOOR, main::@3/FLAG )
  [106] ppuDataPutTile::ppuData#2 = phi( main::@2/ppuDataPutTile::ppuData#9, main::@3/(void* const)PPU_NAME_TABLE_0+(word)$12*$20+$1c )
  to:ppuDataPutTile::ppuDataPrepare1
ppuDataPutTile::ppuDataPrepare1: scope:[ppuDataPutTile]  from ppuDataPutTile
  [107] ppuDataPutTile::ppuDataPrepare1_$0 = > ppuDataPutTile::ppuData#2
  [108] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataPutTile::ppuDataPrepare1_$0
  [109] ppuDataPutTile::ppuDataPrepare1_$1 = < ppuDataPutTile::ppuData#2
  [110] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataPutTile::ppuDataPrepare1_$1
  to:ppuDataPutTile::@1
ppuDataPutTile::@1: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPrepare1
  [111] ppuDataPutTile::ppuDataPut1_val#0 = *ppuDataPutTile::tile#10
  to:ppuDataPutTile::ppuDataPut1
ppuDataPutTile::ppuDataPut1: scope:[ppuDataPutTile]  from ppuDataPutTile::@1
  [112] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataPutTile::ppuDataPut1_val#0
  to:ppuDataPutTile::@2
ppuDataPutTile::@2: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPut1
  [113] ppuDataPutTile::ppuDataPut2_val#0 = ppuDataPutTile::tile#10[1]
  to:ppuDataPutTile::ppuDataPut2
ppuDataPutTile::ppuDataPut2: scope:[ppuDataPutTile]  from ppuDataPutTile::@2
  [114] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataPutTile::ppuDataPut2_val#0
  to:ppuDataPutTile::@3
ppuDataPutTile::@3: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPut2
  [115] ppuDataPutTile::ppuDataPrepare2_ppuData#0 = (byte*)ppuDataPutTile::ppuData#2 + $20
  to:ppuDataPutTile::ppuDataPrepare2
ppuDataPutTile::ppuDataPrepare2: scope:[ppuDataPutTile]  from ppuDataPutTile::@3
  [116] ppuDataPutTile::ppuDataPrepare2_$0 = > (void* const)ppuDataPutTile::ppuDataPrepare2_ppuData#0
  [117] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataPutTile::ppuDataPrepare2_$0
  [118] ppuDataPutTile::ppuDataPrepare2_$1 = < (void* const)ppuDataPutTile::ppuDataPrepare2_ppuData#0
  [119] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataPutTile::ppuDataPrepare2_$1
  to:ppuDataPutTile::@4
ppuDataPutTile::@4: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPrepare2
  [120] ppuDataPutTile::ppuDataPut3_val#0 = ppuDataPutTile::tile#10[2]
  to:ppuDataPutTile::ppuDataPut3
ppuDataPutTile::ppuDataPut3: scope:[ppuDataPutTile]  from ppuDataPutTile::@4
  [121] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataPutTile::ppuDataPut3_val#0
  to:ppuDataPutTile::@5
ppuDataPutTile::@5: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPut3
  [122] ppuDataPutTile::ppuDataPut4_val#0 = ppuDataPutTile::tile#10[3]
  to:ppuDataPutTile::ppuDataPut4
ppuDataPutTile::ppuDataPut4: scope:[ppuDataPutTile]  from ppuDataPutTile::@5
  [123] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataPutTile::ppuDataPut4_val#0
  to:ppuDataPutTile::@return
ppuDataPutTile::@return: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPut4
  [124] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from main::@9
  [125] phi()
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [126] memcpy::dst#2 = phi( memcpy/(byte*)memcpy::destination#0, memcpy::@2/memcpy::dst#1 )
  [126] memcpy::src#2 = phi( memcpy/(byte*)memcpy::source#0, memcpy::@2/memcpy::src#1 )
  [127] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [128] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [129] *memcpy::dst#2 = *memcpy::src#2
  [130] memcpy::dst#1 = ++ memcpy::dst#2
  [131] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1


VARIABLE REGISTER WEIGHTS
void main()
byte main::initNES1_i
byte main::initNES1_i#1 16.5
byte main::initNES1_i#2 12.222222222222221
byte~ main::initNES1_waitForVBlank1_$0 22.0
byte~ main::initNES1_waitForVBlank2_$0 22.0
byte main::x
byte main::x#1 22.0
byte main::x#2 8.8
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
byte* memcpy::dst
byte* memcpy::dst#1 101.0
byte* memcpy::dst#2 101.0
word memcpy::num
void* memcpy::return
void* memcpy::source
byte* memcpy::src
byte* memcpy::src#1 202.0
byte* memcpy::src#2 101.0
byte* memcpy::src_end
void ppuDataFill(void* const ppuDataFill::ppuData , byte ppuDataFill::val , word ppuDataFill::size)
word ppuDataFill::i
word ppuDataFill::i#1 202.0
word ppuDataFill::i#2 101.0
void* const ppuDataFill::ppuData
byte~ ppuDataFill::ppuDataPrepare1_$0 22.0
byte~ ppuDataFill::ppuDataPrepare1_$1 22.0
void* const ppuDataFill::ppuDataPrepare1_ppuData
void* const ppuDataFill::ppuDataPrepare1_ppuData#0 7.333333333333333
byte ppuDataFill::ppuDataPut1_val
word ppuDataFill::size
word ppuDataFill::size#3 11.222222222222221
byte ppuDataFill::val
byte ppuDataFill::val#4 11.222222222222221
void ppuDataPutTile(void* const ppuDataPutTile::ppuData , byte* ppuDataPutTile::tile)
void* const ppuDataPutTile::ppuData
byte* const ppuDataPutTile::ppuData#0 11.0
void* const ppuDataPutTile::ppuData#2 23.666666666666664
void* const ppuDataPutTile::ppuData#9 22.0
byte~ ppuDataPutTile::ppuDataPrepare1_$0 202.0
byte~ ppuDataPutTile::ppuDataPrepare1_$1 202.0
void* const ppuDataPutTile::ppuDataPrepare1_ppuData
byte~ ppuDataPutTile::ppuDataPrepare2_$0 202.0
byte~ ppuDataPutTile::ppuDataPrepare2_$1 202.0
void* const ppuDataPutTile::ppuDataPrepare2_ppuData
byte* const ppuDataPutTile::ppuDataPrepare2_ppuData#0 33.666666666666664
byte ppuDataPutTile::ppuDataPut1_val
byte ppuDataPutTile::ppuDataPut1_val#0 202.0
byte ppuDataPutTile::ppuDataPut2_val
byte ppuDataPutTile::ppuDataPut2_val#0 202.0
byte ppuDataPutTile::ppuDataPut3_val
byte ppuDataPutTile::ppuDataPut3_val#0 202.0
byte ppuDataPutTile::ppuDataPut4_val
byte ppuDataPutTile::ppuDataPut4_val#0 202.0
byte* ppuDataPutTile::tile
byte* ppuDataPutTile::tile#10 25.25
void ppuDataTransfer(void* const ppuDataTransfer::ppuData , void* const ppuDataTransfer::cpuData , word ppuDataTransfer::size)
void* const ppuDataTransfer::cpuData
byte* ppuDataTransfer::cpuSrc
byte* ppuDataTransfer::cpuSrc#1 101.0
byte* ppuDataTransfer::cpuSrc#2 75.75
word ppuDataTransfer::i
word ppuDataTransfer::i#1 202.0
word ppuDataTransfer::i#2 60.599999999999994
void* const ppuDataTransfer::ppuData
void* const ppuDataTransfer::ppuDataPrepare1_ppuData
byte ppuDataTransfer::ppuDataPut1_val
byte ppuDataTransfer::ppuDataPut1_val#0 202.0
word ppuDataTransfer::size
byte readJoy1()
byte~ readJoy1::$1 101.0
byte~ readJoy1::$2 202.0
byte readJoy1::i
byte readJoy1::i#1 202.0
byte readJoy1::i#2 60.599999999999994
byte readJoy1::joy
byte readJoy1::joy#1 101.0
byte readJoy1::joy#2 51.0
byte readJoy1::return
byte readJoy1::return#2 4.0
__interrupt(hardware_all) void vblank()
byte~ vblank::$1 4.0
byte~ vblank::$3 4.0
byte~ vblank::$5 4.0
byte~ vblank::$7 4.0
byte vblank::joy
byte vblank::joy#0 0.5263157894736842
struct SpriteData* vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer

Initial phi equivalence classes
[ main::initNES1_i#2 main::initNES1_i#1 ]
[ main::x#2 main::x#1 ]
[ readJoy1::i#2 readJoy1::i#1 ]
[ readJoy1::joy#2 readJoy1::joy#1 ]
[ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
[ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
[ ppuDataFill::ppuDataPrepare1_ppuData#0 ]
[ ppuDataFill::size#3 ]
[ ppuDataFill::val#4 ]
[ ppuDataFill::i#2 ppuDataFill::i#1 ]
[ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ]
[ ppuDataPutTile::tile#10 ]
[ memcpy::src#2 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#1 ]
Added variable readJoy1::return#2 to live range equivalence class [ readJoy1::return#2 ]
Added variable vblank::joy#0 to live range equivalence class [ vblank::joy#0 ]
Added variable vblank::$1 to live range equivalence class [ vblank::$1 ]
Added variable vblank::$3 to live range equivalence class [ vblank::$3 ]
Added variable vblank::$5 to live range equivalence class [ vblank::$5 ]
Added variable vblank::$7 to live range equivalence class [ vblank::$7 ]
Added variable main::initNES1_waitForVBlank1_$0 to live range equivalence class [ main::initNES1_waitForVBlank1_$0 ]
Added variable main::initNES1_waitForVBlank2_$0 to live range equivalence class [ main::initNES1_waitForVBlank2_$0 ]
Added variable ppuDataPutTile::ppuData#0 to live range equivalence class [ ppuDataPutTile::ppuData#0 ]
Added variable readJoy1::$1 to live range equivalence class [ readJoy1::$1 ]
Added variable readJoy1::$2 to live range equivalence class [ readJoy1::$2 ]
Added variable ppuDataTransfer::ppuDataPut1_val#0 to live range equivalence class [ ppuDataTransfer::ppuDataPut1_val#0 ]
Added variable ppuDataFill::ppuDataPrepare1_$0 to live range equivalence class [ ppuDataFill::ppuDataPrepare1_$0 ]
Added variable ppuDataFill::ppuDataPrepare1_$1 to live range equivalence class [ ppuDataFill::ppuDataPrepare1_$1 ]
Added variable ppuDataPutTile::ppuDataPrepare1_$0 to live range equivalence class [ ppuDataPutTile::ppuDataPrepare1_$0 ]
Added variable ppuDataPutTile::ppuDataPrepare1_$1 to live range equivalence class [ ppuDataPutTile::ppuDataPrepare1_$1 ]
Added variable ppuDataPutTile::ppuDataPut1_val#0 to live range equivalence class [ ppuDataPutTile::ppuDataPut1_val#0 ]
Added variable ppuDataPutTile::ppuDataPut2_val#0 to live range equivalence class [ ppuDataPutTile::ppuDataPut2_val#0 ]
Added variable ppuDataPutTile::ppuDataPrepare2_ppuData#0 to live range equivalence class [ ppuDataPutTile::ppuDataPrepare2_ppuData#0 ]
Added variable ppuDataPutTile::ppuDataPrepare2_$0 to live range equivalence class [ ppuDataPutTile::ppuDataPrepare2_$0 ]
Added variable ppuDataPutTile::ppuDataPrepare2_$1 to live range equivalence class [ ppuDataPutTile::ppuDataPrepare2_$1 ]
Added variable ppuDataPutTile::ppuDataPut3_val#0 to live range equivalence class [ ppuDataPutTile::ppuDataPut3_val#0 ]
Added variable ppuDataPutTile::ppuDataPut4_val#0 to live range equivalence class [ ppuDataPutTile::ppuDataPut4_val#0 ]
Complete equivalence classes
[ main::initNES1_i#2 main::initNES1_i#1 ]
[ main::x#2 main::x#1 ]
[ readJoy1::i#2 readJoy1::i#1 ]
[ readJoy1::joy#2 readJoy1::joy#1 ]
[ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
[ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
[ ppuDataFill::ppuDataPrepare1_ppuData#0 ]
[ ppuDataFill::size#3 ]
[ ppuDataFill::val#4 ]
[ ppuDataFill::i#2 ppuDataFill::i#1 ]
[ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ]
[ ppuDataPutTile::tile#10 ]
[ memcpy::src#2 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#1 ]
[ readJoy1::return#2 ]
[ vblank::joy#0 ]
[ vblank::$1 ]
[ vblank::$3 ]
[ vblank::$5 ]
[ vblank::$7 ]
[ main::initNES1_waitForVBlank1_$0 ]
[ main::initNES1_waitForVBlank2_$0 ]
[ ppuDataPutTile::ppuData#0 ]
[ readJoy1::$1 ]
[ readJoy1::$2 ]
[ ppuDataTransfer::ppuDataPut1_val#0 ]
[ ppuDataFill::ppuDataPrepare1_$0 ]
[ ppuDataFill::ppuDataPrepare1_$1 ]
[ ppuDataPutTile::ppuDataPrepare1_$0 ]
[ ppuDataPutTile::ppuDataPrepare1_$1 ]
[ ppuDataPutTile::ppuDataPut1_val#0 ]
[ ppuDataPutTile::ppuDataPut2_val#0 ]
[ ppuDataPutTile::ppuDataPrepare2_ppuData#0 ]
[ ppuDataPutTile::ppuDataPrepare2_$0 ]
[ ppuDataPutTile::ppuDataPrepare2_$1 ]
[ ppuDataPutTile::ppuDataPut3_val#0 ]
[ ppuDataPutTile::ppuDataPut4_val#0 ]
Allocated zp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ]
Allocated zp[1]:3 [ main::x#2 main::x#1 ]
Allocated zp[1]:4 [ readJoy1::i#2 readJoy1::i#1 ]
Allocated zp[1]:5 [ readJoy1::joy#2 readJoy1::joy#1 ]
Allocated zp[2]:6 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
Allocated zp[2]:8 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
Allocated zp[2]:10 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ]
Allocated zp[2]:12 [ ppuDataFill::size#3 ]
Allocated zp[1]:14 [ ppuDataFill::val#4 ]
Allocated zp[2]:15 [ ppuDataFill::i#2 ppuDataFill::i#1 ]
Allocated zp[2]:17 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ]
Allocated zp[2]:19 [ ppuDataPutTile::tile#10 ]
Allocated zp[2]:21 [ memcpy::src#2 memcpy::src#1 ]
Allocated zp[2]:23 [ memcpy::dst#2 memcpy::dst#1 ]
Allocated zp[1]:25 [ readJoy1::return#2 ]
Allocated zp[1]:26 [ vblank::joy#0 ]
Allocated zp[1]:27 [ vblank::$1 ]
Allocated zp[1]:28 [ vblank::$3 ]
Allocated zp[1]:29 [ vblank::$5 ]
Allocated zp[1]:30 [ vblank::$7 ]
Allocated zp[1]:31 [ main::initNES1_waitForVBlank1_$0 ]
Allocated zp[1]:32 [ main::initNES1_waitForVBlank2_$0 ]
Allocated zp[2]:33 [ ppuDataPutTile::ppuData#0 ]
Allocated zp[1]:35 [ readJoy1::$1 ]
Allocated zp[1]:36 [ readJoy1::$2 ]
Allocated zp[1]:37 [ ppuDataTransfer::ppuDataPut1_val#0 ]
Allocated zp[1]:38 [ ppuDataFill::ppuDataPrepare1_$0 ]
Allocated zp[1]:39 [ ppuDataFill::ppuDataPrepare1_$1 ]
Allocated zp[1]:40 [ ppuDataPutTile::ppuDataPrepare1_$0 ]
Allocated zp[1]:41 [ ppuDataPutTile::ppuDataPrepare1_$1 ]
Allocated zp[1]:42 [ ppuDataPutTile::ppuDataPut1_val#0 ]
Allocated zp[1]:43 [ ppuDataPutTile::ppuDataPut2_val#0 ]
Allocated zp[2]:44 [ ppuDataPutTile::ppuDataPrepare2_ppuData#0 ]
Allocated zp[1]:46 [ ppuDataPutTile::ppuDataPrepare2_$0 ]
Allocated zp[1]:47 [ ppuDataPutTile::ppuDataPrepare2_$1 ]
Allocated zp[1]:48 [ ppuDataPutTile::ppuDataPut3_val#0 ]
Allocated zp[1]:49 [ ppuDataPutTile::ppuDataPut4_val#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [28] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR) = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [29] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA) = >SPRITE_BUFFER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [30] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [31] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = -8 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [32] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement asm { cld ldx#$ff txs  } always clobbers reg byte x 
Statement [35] *((byte*)PPU) = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [36] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [37] *FR_COUNTER = $40 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [38] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) = $40 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [41] main::initNES1_waitForVBlank1_$0 = *((volatile byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80 [ main::initNES1_waitForVBlank1_$0 ] (  [ main::initNES1_waitForVBlank1_$0 ] { }  ) always clobbers reg byte a 
Statement [44] MEMORY[main::initNES1_i#2] = 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ]
Statement [45] (MEMORY+$100)[main::initNES1_i#2] = 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [46] (MEMORY+$200)[main::initNES1_i#2] = 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [47] (MEMORY+$300)[main::initNES1_i#2] = 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [48] (MEMORY+$400)[main::initNES1_i#2] = 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [49] (MEMORY+$500)[main::initNES1_i#2] = 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [50] (MEMORY+$600)[main::initNES1_i#2] = 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [51] (MEMORY+$700)[main::initNES1_i#2] = 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [55] main::initNES1_waitForVBlank2_$0 = *((volatile byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80 [ main::initNES1_waitForVBlank2_$0 ] (  [ main::initNES1_waitForVBlank2_$0 ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [70] *((byte*)PPU) = $80 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [71] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = $1e [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [73] ppuDataPutTile::ppuData#0 = PPU_NAME_TABLE_0+(word)$14*$20 + main::x#2 [ main::x#2 ppuDataPutTile::ppuData#0 ] (  [ main::x#2 ppuDataPutTile::ppuData#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::x#2 main::x#1 ]
Statement [74] ppuDataPutTile::ppuData#9 = (void* const)ppuDataPutTile::ppuData#0 [ main::x#2 ppuDataPutTile::ppuData#9 ] (  [ main::x#2 ppuDataPutTile::ppuData#9 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [77] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1) = 1 [ ] ( readJoy1:1 [ ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Statement [78] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1) = 0 [ ] ( readJoy1:1 [ ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Statement [82] readJoy1::$1 = readJoy1::joy#2 << 1 [ readJoy1::i#2 readJoy1::$1 ] ( readJoy1:1 [ readJoy1::i#2 readJoy1::$1 ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ readJoy1::i#2 readJoy1::i#1 ]
Statement [83] readJoy1::$2 = *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1) & 1 [ readJoy1::i#2 readJoy1::$1 readJoy1::$2 ] ( readJoy1:1 [ readJoy1::i#2 readJoy1::$1 readJoy1::$2 ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:35 [ readJoy1::$1 ]
Statement [87] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = >ppuDataTransfer::ppuData#0 [ ] ( ppuDataTransfer:59 [ ] { }  ) always clobbers reg byte a 
Statement [88] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = 0 [ ] ( ppuDataTransfer:59 [ ] { }  ) always clobbers reg byte a 
Statement [90] if(ppuDataTransfer::i#2<ppuDataTransfer::size#0) goto ppuDataTransfer::@2 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] ( ppuDataTransfer:59 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  ) always clobbers reg byte a 
Statement [92] ppuDataTransfer::ppuDataPut1_val#0 = *ppuDataTransfer::cpuSrc#2 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] ( ppuDataTransfer:59 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [102] if(ppuDataFill::i#2<ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] ( ppuDataFill:61 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  ppuDataFill:63 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:14 [ ppuDataFill::val#4 ]
Statement [111] ppuDataPutTile::ppuDataPut1_val#0 = *ppuDataPutTile::tile#10 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut1_val#0 ] ( ppuDataPutTile:67 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut1_val#0 ] { }  ppuDataPutTile:75 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut1_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:3 [ main::x#2 main::x#1 ]
Statement [113] ppuDataPutTile::ppuDataPut2_val#0 = ppuDataPutTile::tile#10[1] [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut2_val#0 ] ( ppuDataPutTile:67 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut2_val#0 ] { }  ppuDataPutTile:75 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut2_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a reg byte y 
Statement [115] ppuDataPutTile::ppuDataPrepare2_ppuData#0 = (byte*)ppuDataPutTile::ppuData#2 + $20 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] ( ppuDataPutTile:67 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] { }  ppuDataPutTile:75 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [120] ppuDataPutTile::ppuDataPut3_val#0 = ppuDataPutTile::tile#10[2] [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut3_val#0 ] ( ppuDataPutTile:67 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut3_val#0 ] { }  ppuDataPutTile:75 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut3_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a reg byte y 
Statement [122] ppuDataPutTile::ppuDataPut4_val#0 = ppuDataPutTile::tile#10[3] [ ppuDataPutTile::ppuDataPut4_val#0 ] ( ppuDataPutTile:67 [ ppuDataPutTile::ppuDataPut4_val#0 ] { }  ppuDataPutTile:75 [ main::x#2 ppuDataPutTile::ppuDataPut4_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a reg byte y 
Statement [127] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 [ memcpy::src#2 memcpy::dst#2 ] ( memcpy:69 [ memcpy::src#2 memcpy::dst#2 ] { }  ) always clobbers reg byte a 
Statement [129] *memcpy::dst#2 = *memcpy::src#2 [ memcpy::src#2 memcpy::dst#2 ] ( memcpy:69 [ memcpy::src#2 memcpy::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [28] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR) = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [29] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA) = >SPRITE_BUFFER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [30] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [31] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = -8 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [32] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement asm { cld ldx#$ff txs  } always clobbers reg byte x 
Statement [35] *((byte*)PPU) = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [36] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [37] *FR_COUNTER = $40 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [38] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) = $40 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [41] main::initNES1_waitForVBlank1_$0 = *((volatile byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80 [ main::initNES1_waitForVBlank1_$0 ] (  [ main::initNES1_waitForVBlank1_$0 ] { }  ) always clobbers reg byte a 
Statement [44] MEMORY[main::initNES1_i#2] = 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [45] (MEMORY+$100)[main::initNES1_i#2] = 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [46] (MEMORY+$200)[main::initNES1_i#2] = 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [47] (MEMORY+$300)[main::initNES1_i#2] = 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [48] (MEMORY+$400)[main::initNES1_i#2] = 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [49] (MEMORY+$500)[main::initNES1_i#2] = 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [50] (MEMORY+$600)[main::initNES1_i#2] = 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [51] (MEMORY+$700)[main::initNES1_i#2] = 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [55] main::initNES1_waitForVBlank2_$0 = *((volatile byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80 [ main::initNES1_waitForVBlank2_$0 ] (  [ main::initNES1_waitForVBlank2_$0 ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [70] *((byte*)PPU) = $80 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [71] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = $1e [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [73] ppuDataPutTile::ppuData#0 = PPU_NAME_TABLE_0+(word)$14*$20 + main::x#2 [ main::x#2 ppuDataPutTile::ppuData#0 ] (  [ main::x#2 ppuDataPutTile::ppuData#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [74] ppuDataPutTile::ppuData#9 = (void* const)ppuDataPutTile::ppuData#0 [ main::x#2 ppuDataPutTile::ppuData#9 ] (  [ main::x#2 ppuDataPutTile::ppuData#9 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [77] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1) = 1 [ ] ( readJoy1:1 [ ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Statement [78] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1) = 0 [ ] ( readJoy1:1 [ ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Statement [82] readJoy1::$1 = readJoy1::joy#2 << 1 [ readJoy1::i#2 readJoy1::$1 ] ( readJoy1:1 [ readJoy1::i#2 readJoy1::$1 ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Statement [83] readJoy1::$2 = *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1) & 1 [ readJoy1::i#2 readJoy1::$1 readJoy1::$2 ] ( readJoy1:1 [ readJoy1::i#2 readJoy1::$1 readJoy1::$2 ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Statement [87] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = >ppuDataTransfer::ppuData#0 [ ] ( ppuDataTransfer:59 [ ] { }  ) always clobbers reg byte a 
Statement [88] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = 0 [ ] ( ppuDataTransfer:59 [ ] { }  ) always clobbers reg byte a 
Statement [90] if(ppuDataTransfer::i#2<ppuDataTransfer::size#0) goto ppuDataTransfer::@2 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] ( ppuDataTransfer:59 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  ) always clobbers reg byte a 
Statement [92] ppuDataTransfer::ppuDataPut1_val#0 = *ppuDataTransfer::cpuSrc#2 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] ( ppuDataTransfer:59 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [102] if(ppuDataFill::i#2<ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] ( ppuDataFill:61 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  ppuDataFill:63 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  ) always clobbers reg byte a 
Statement [111] ppuDataPutTile::ppuDataPut1_val#0 = *ppuDataPutTile::tile#10 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut1_val#0 ] ( ppuDataPutTile:67 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut1_val#0 ] { }  ppuDataPutTile:75 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut1_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a reg byte y 
Statement [113] ppuDataPutTile::ppuDataPut2_val#0 = ppuDataPutTile::tile#10[1] [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut2_val#0 ] ( ppuDataPutTile:67 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut2_val#0 ] { }  ppuDataPutTile:75 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut2_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a reg byte y 
Statement [115] ppuDataPutTile::ppuDataPrepare2_ppuData#0 = (byte*)ppuDataPutTile::ppuData#2 + $20 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] ( ppuDataPutTile:67 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] { }  ppuDataPutTile:75 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [120] ppuDataPutTile::ppuDataPut3_val#0 = ppuDataPutTile::tile#10[2] [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut3_val#0 ] ( ppuDataPutTile:67 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut3_val#0 ] { }  ppuDataPutTile:75 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut3_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a reg byte y 
Statement [122] ppuDataPutTile::ppuDataPut4_val#0 = ppuDataPutTile::tile#10[3] [ ppuDataPutTile::ppuDataPut4_val#0 ] ( ppuDataPutTile:67 [ ppuDataPutTile::ppuDataPut4_val#0 ] { }  ppuDataPutTile:75 [ main::x#2 ppuDataPutTile::ppuDataPut4_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a reg byte y 
Statement [127] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 [ memcpy::src#2 memcpy::dst#2 ] ( memcpy:69 [ memcpy::src#2 memcpy::dst#2 ] { }  ) always clobbers reg byte a 
Statement [129] *memcpy::dst#2 = *memcpy::src#2 [ memcpy::src#2 memcpy::dst#2 ] ( memcpy:69 [ memcpy::src#2 memcpy::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::x#2 main::x#1 ] : zp[1]:3 , reg byte x , 
Potential registers zp[1]:4 [ readJoy1::i#2 readJoy1::i#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ readJoy1::joy#2 readJoy1::joy#1 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:6 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] : zp[2]:10 , 
Potential registers zp[2]:12 [ ppuDataFill::size#3 ] : zp[2]:12 , 
Potential registers zp[1]:14 [ ppuDataFill::val#4 ] : zp[1]:14 , reg byte x , reg byte y , 
Potential registers zp[2]:15 [ ppuDataFill::i#2 ppuDataFill::i#1 ] : zp[2]:15 , 
Potential registers zp[2]:17 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ] : zp[2]:17 , 
Potential registers zp[2]:19 [ ppuDataPutTile::tile#10 ] : zp[2]:19 , 
Potential registers zp[2]:21 [ memcpy::src#2 memcpy::src#1 ] : zp[2]:21 , 
Potential registers zp[2]:23 [ memcpy::dst#2 memcpy::dst#1 ] : zp[2]:23 , 
Potential registers zp[1]:25 [ readJoy1::return#2 ] : zp[1]:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ vblank::joy#0 ] : zp[1]:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:27 [ vblank::$1 ] : zp[1]:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:28 [ vblank::$3 ] : zp[1]:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:29 [ vblank::$5 ] : zp[1]:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ vblank::$7 ] : zp[1]:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:31 [ main::initNES1_waitForVBlank1_$0 ] : zp[1]:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:32 [ main::initNES1_waitForVBlank2_$0 ] : zp[1]:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:33 [ ppuDataPutTile::ppuData#0 ] : zp[2]:33 , 
Potential registers zp[1]:35 [ readJoy1::$1 ] : zp[1]:35 , reg byte x , reg byte y , 
Potential registers zp[1]:36 [ readJoy1::$2 ] : zp[1]:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ ppuDataTransfer::ppuDataPut1_val#0 ] : zp[1]:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:38 [ ppuDataFill::ppuDataPrepare1_$0 ] : zp[1]:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:39 [ ppuDataFill::ppuDataPrepare1_$1 ] : zp[1]:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:40 [ ppuDataPutTile::ppuDataPrepare1_$0 ] : zp[1]:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:41 [ ppuDataPutTile::ppuDataPrepare1_$1 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:42 [ ppuDataPutTile::ppuDataPut1_val#0 ] : zp[1]:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:43 [ ppuDataPutTile::ppuDataPut2_val#0 ] : zp[1]:43 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:44 [ ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] : zp[2]:44 , 
Potential registers zp[1]:46 [ ppuDataPutTile::ppuDataPrepare2_$0 ] : zp[1]:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:47 [ ppuDataPutTile::ppuDataPrepare2_$1 ] : zp[1]:47 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:48 [ ppuDataPutTile::ppuDataPut3_val#0 ] : zp[1]:48 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:49 [ ppuDataPutTile::ppuDataPut4_val#0 ] : zp[1]:49 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [ppuDataPutTile] 202: zp[1]:40 [ ppuDataPutTile::ppuDataPrepare1_$0 ] 202: zp[1]:41 [ ppuDataPutTile::ppuDataPrepare1_$1 ] 202: zp[1]:42 [ ppuDataPutTile::ppuDataPut1_val#0 ] 202: zp[1]:43 [ ppuDataPutTile::ppuDataPut2_val#0 ] 202: zp[1]:46 [ ppuDataPutTile::ppuDataPrepare2_$0 ] 202: zp[1]:47 [ ppuDataPutTile::ppuDataPrepare2_$1 ] 202: zp[1]:48 [ ppuDataPutTile::ppuDataPut3_val#0 ] 202: zp[1]:49 [ ppuDataPutTile::ppuDataPut4_val#0 ] 45.67: zp[2]:17 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ] 33.67: zp[2]:44 [ ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] 25.25: zp[2]:19 [ ppuDataPutTile::tile#10 ] 11: zp[2]:33 [ ppuDataPutTile::ppuData#0 ] 
Uplift Scope [readJoy1] 262.6: zp[1]:4 [ readJoy1::i#2 readJoy1::i#1 ] 202: zp[1]:36 [ readJoy1::$2 ] 152: zp[1]:5 [ readJoy1::joy#2 readJoy1::joy#1 ] 101: zp[1]:35 [ readJoy1::$1 ] 4: zp[1]:25 [ readJoy1::return#2 ] 
Uplift Scope [ppuDataTransfer] 262.6: zp[2]:6 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] 202: zp[1]:37 [ ppuDataTransfer::ppuDataPut1_val#0 ] 176.75: zp[2]:8 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ] 
Uplift Scope [memcpy] 303: zp[2]:21 [ memcpy::src#2 memcpy::src#1 ] 202: zp[2]:23 [ memcpy::dst#2 memcpy::dst#1 ] 
Uplift Scope [ppuDataFill] 303: zp[2]:15 [ ppuDataFill::i#2 ppuDataFill::i#1 ] 22: zp[1]:38 [ ppuDataFill::ppuDataPrepare1_$0 ] 22: zp[1]:39 [ ppuDataFill::ppuDataPrepare1_$1 ] 11.22: zp[2]:12 [ ppuDataFill::size#3 ] 11.22: zp[1]:14 [ ppuDataFill::val#4 ] 7.33: zp[2]:10 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] 
Uplift Scope [main] 30.8: zp[1]:3 [ main::x#2 main::x#1 ] 28.72: zp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ] 22: zp[1]:31 [ main::initNES1_waitForVBlank1_$0 ] 22: zp[1]:32 [ main::initNES1_waitForVBlank2_$0 ] 
Uplift Scope [vblank] 4: zp[1]:27 [ vblank::$1 ] 4: zp[1]:28 [ vblank::$3 ] 4: zp[1]:29 [ vblank::$5 ] 4: zp[1]:30 [ vblank::$7 ] 0.53: zp[1]:26 [ vblank::joy#0 ] 
Uplift Scope [RICOH_2C02] 
Uplift Scope [RICOH_2A03] 
Uplift Scope [SpriteData] 
Uplift Scope [] 

Uplifting [ppuDataPutTile] best 6132 combination reg byte a [ ppuDataPutTile::ppuDataPrepare1_$0 ] reg byte a [ ppuDataPutTile::ppuDataPrepare1_$1 ] reg byte a [ ppuDataPutTile::ppuDataPut1_val#0 ] reg byte a [ ppuDataPutTile::ppuDataPut2_val#0 ] zp[1]:46 [ ppuDataPutTile::ppuDataPrepare2_$0 ] zp[1]:47 [ ppuDataPutTile::ppuDataPrepare2_$1 ] zp[1]:48 [ ppuDataPutTile::ppuDataPut3_val#0 ] zp[1]:49 [ ppuDataPutTile::ppuDataPut4_val#0 ] zp[2]:17 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ] zp[2]:44 [ ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] zp[2]:19 [ ppuDataPutTile::tile#10 ] zp[2]:33 [ ppuDataPutTile::ppuData#0 ] 
Limited combination testing to 100 combinations of 65536 possible.
Uplifting [readJoy1] best 5889 combination reg byte x [ readJoy1::i#2 readJoy1::i#1 ] reg byte a [ readJoy1::$2 ] reg byte a [ readJoy1::joy#2 readJoy1::joy#1 ] zp[1]:35 [ readJoy1::$1 ] zp[1]:25 [ readJoy1::return#2 ] 
Limited combination testing to 100 combinations of 576 possible.
Uplifting [ppuDataTransfer] best 5829 combination zp[2]:6 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] reg byte a [ ppuDataTransfer::ppuDataPut1_val#0 ] zp[2]:8 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ] 
Uplifting [memcpy] best 5829 combination zp[2]:21 [ memcpy::src#2 memcpy::src#1 ] zp[2]:23 [ memcpy::dst#2 memcpy::dst#1 ] 
Uplifting [ppuDataFill] best 5781 combination zp[2]:15 [ ppuDataFill::i#2 ppuDataFill::i#1 ] reg byte a [ ppuDataFill::ppuDataPrepare1_$0 ] reg byte a [ ppuDataFill::ppuDataPrepare1_$1 ] zp[2]:12 [ ppuDataFill::size#3 ] reg byte x [ ppuDataFill::val#4 ] zp[2]:10 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] 
Uplifting [main] best 5261 combination reg byte x [ main::x#2 main::x#1 ] reg byte x [ main::initNES1_i#2 main::initNES1_i#1 ] reg byte a [ main::initNES1_waitForVBlank1_$0 ] reg byte a [ main::initNES1_waitForVBlank2_$0 ] 
Uplifting [vblank] best 5245 combination reg byte a [ vblank::$1 ] reg byte a [ vblank::$3 ] reg byte a [ vblank::$5 ] reg byte a [ vblank::$7 ] zp[1]:26 [ vblank::joy#0 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [RICOH_2C02] best 5245 combination 
Uplifting [RICOH_2A03] best 5245 combination 
Uplifting [SpriteData] best 5245 combination 
Uplifting [] best 5245 combination 
Attempting to uplift remaining variables inzp[1]:46 [ ppuDataPutTile::ppuDataPrepare2_$0 ]
Uplifting [ppuDataPutTile] best 5239 combination reg byte a [ ppuDataPutTile::ppuDataPrepare2_$0 ] 
Attempting to uplift remaining variables inzp[1]:47 [ ppuDataPutTile::ppuDataPrepare2_$1 ]
Uplifting [ppuDataPutTile] best 5233 combination reg byte a [ ppuDataPutTile::ppuDataPrepare2_$1 ] 
Attempting to uplift remaining variables inzp[1]:48 [ ppuDataPutTile::ppuDataPut3_val#0 ]
Uplifting [ppuDataPutTile] best 5227 combination reg byte a [ ppuDataPutTile::ppuDataPut3_val#0 ] 
Attempting to uplift remaining variables inzp[1]:49 [ ppuDataPutTile::ppuDataPut4_val#0 ]
Uplifting [ppuDataPutTile] best 5221 combination reg byte a [ ppuDataPutTile::ppuDataPut4_val#0 ] 
Attempting to uplift remaining variables inzp[1]:35 [ readJoy1::$1 ]
Uplifting [readJoy1] best 5221 combination zp[1]:35 [ readJoy1::$1 ] 
Attempting to uplift remaining variables inzp[1]:25 [ readJoy1::return#2 ]
Uplifting [readJoy1] best 5215 combination reg byte a [ readJoy1::return#2 ] 
Attempting to uplift remaining variables inzp[1]:26 [ vblank::joy#0 ]
Uplifting [vblank] best 5210 combination reg byte x [ vblank::joy#0 ] 
Coalescing zero page register [ zp[2]:17 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ] ] with [ zp[2]:33 [ ppuDataPutTile::ppuData#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ppuDataPutTile::ppuData#0 ] ] with [ zp[2]:44 [ ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:10 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] ] with [ zp[2]:6 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] ]
Coalescing zero page register [ zp[2]:12 [ ppuDataFill::size#3 ] ] with [ zp[2]:8 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ] ]
Coalescing zero page register [ zp[2]:17 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ppuDataPutTile::ppuData#0 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] ] with [ zp[2]:15 [ ppuDataFill::i#2 ppuDataFill::i#1 ] ]
Coalescing zero page register [ zp[2]:21 [ memcpy::src#2 memcpy::src#1 ] ] with [ zp[2]:19 [ ppuDataPutTile::tile#10 ] ]
Coalescing zero page register [ zp[2]:21 [ memcpy::src#2 memcpy::src#1 ppuDataPutTile::tile#10 ] ] with [ zp[2]:10 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] ]
Coalescing zero page register [ zp[2]:23 [ memcpy::dst#2 memcpy::dst#1 ] ] with [ zp[2]:12 [ ppuDataFill::size#3 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ] ]
Allocated (was zp[2]:17) zp[2]:2 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ppuDataPutTile::ppuData#0 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ppuDataFill::i#2 ppuDataFill::i#1 ]
Allocated (was zp[2]:21) zp[2]:4 [ memcpy::src#2 memcpy::src#1 ppuDataPutTile::tile#10 ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
Allocated (was zp[2]:23) zp[2]:6 [ memcpy::dst#2 memcpy::dst#1 ppuDataFill::size#3 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
Allocated (was zp[1]:35) zp[1]:8 [ readJoy1::$1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// A minimal NES demo
// Based on: https://github.com/gregkrsak/first_nes written by Greg M. Krsak, 2018. 
// Nintendo Entertainment System (NES
// https://en.wikipedia.org/wiki/Nintendo_Entertainment_System_(Model_NES-101)
// https://github.com/gregkrsak/first_nes
// Ricoh 2C02 - NES Picture Processing Unit (PPU)
// Ricoh RP2C02 (NTSC version) / RP2C07 (PAL version),
// https://en.wikipedia.org/wiki/Picture_Processing_Unit
// https://wiki.nesdev.com/w/index.php/PPU_registers
// http://nesdev.com/2C02%20technical%20reference.TXT
// Based on: https://github.com/gregkrsak/first_nes written by Greg M. Krsak, 2018. 
  // Upstart
.cpu _6502
  // Nintendo Entertainment System (NES) ROM (Mapper 0 NROM, Vertical Mirroring)
// https://sadistech.com/nesromtool/romdoc.html
// https://forums.nesdev.com/viewtopic.php?f=2&t=9896
// https://github.com/gregkrsak/first_nes
.file [name="nes-demo.nes", type="bin", segments="NesRom"]
.file [name="nes-demo.nes_hdr", type="bin", segments="Header"]
.file [name="nes-demo.nes_prg", type="bin", segments="ProgramRom"]
.file [name="nes-demo.nes_chr", type="bin", segments="CharacterRom"]
.segmentdef Header  [ start=$0000,       min=$0000, max=$000f, fill ]
.segmentdef Tiles   [ start=$0000,       min=$0000, max=$1fff, fill ]
.segmentdef Code    [ start=$c000,       min=$c000, max=$fff9 ]
.segmentdef Data    [ startAfter="Code", min=$c000, max=$fff9 ]
.segmentdef Vectors [ start=$fffa,       min=$fffa, max=$ffff ]
.segmentdef GameRam [start=$200,max=$7ff, virtual]
.segmentdef ProgramRom [ segments="Code, Data, Vectors" ]
.segmentdef CharacterRom [ segments="Tiles" ]
.segmentdef NesRom
.segment NesRom
.segmentout [ segments="Header" ]
.segmentout [ segments="ProgramRom" ]
.segmentout [ segments="CharacterRom" ]
.segment Header
.text   @"NES\$1a"
.byte   $01           // 1x 16KB ROM (PRG)
.byte   $01           // 1x 8KB VROM (CHR)
.byte   %00000001     // Mapper nibble 0000 == No mapping (a simple 16KB PRG + 8KB CHR game)
                      // Mirroring nibble 0001 == Vertical mirroring only
  // Global Constants & labels
  // Standard Controller Right Button
  .const JOY_RIGHT = 1
  // Standard Controller Left Button
  .const JOY_LEFT = 2
  // Standard Controller Down Button
  .const JOY_DOWN = 4
  // Standard Controller Up Button
  .const JOY_UP = 8
  .const SIZEOF_STRUCT_SPRITEDATA = 4
  .const OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
  .const OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
  .const OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
  .const OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
  .const OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
  .const OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
  .const OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
  .const OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
  .const OFFSET_STRUCT_SPRITEDATA_X = 3
  .const OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
  .const SIZEOF_BYTE = 1
  // $2000-$23bf	$03c0	Name table 0
  .label PPU_NAME_TABLE_0 = $2000
  // $23c0-$23ff	$0040	Attribute table 0
  .label PPU_ATTRIBUTE_TABLE_0 = $23c0
  // $3000-$3eff	$0f00	Mirrors of $2000-$2eff
  // $3f00-$3f1f	$0020	Palette RAM indexes
  .label PPU_PALETTE = $3f00
  // PPU Status Register for reading in ASM
  .label PPU_PPUSTATUS = $2002
  // APU Frame Counter
  // generates low-frequency clocks for the channels and an optional 60 Hz interrupt.
  // https://wiki.nesdev.com/w/index.php/APU_Frame_Counter
  // ------+-----+---------------------------------------------------------------
  //  $4017 |	 W  | FR_COUNTER Frame Counter	Set mode and interrupt
  //  ------+-----+---------------------------------------------------------------
  //        |   7	| Sequencer mode: 0 selects 4-step sequence, 1 selects 5-step sequence
  //        |   6	| Interrupt inhibit flag. If set, the frame interrupt flag is cleared, otherwise it is unaffected.
  //  ------+-----+---------------------------------------------------------------
  // Side effects	After 3 or 4 CPU clock cycles*, the timer is reset.
  // If the mode flag is set, then both "quarter frame" and "half frame" signals are also generated.
  .label FR_COUNTER = $4017
  // Pointer to the start of RAM memory
  .label MEMORY = 0
  // NES Picture Processing Unit (PPU)
  .label PPU = $2000
  // NES CPU and audion processing unit (APU)
  .label APU = $4000
.segment Code
  // vblank
// NMI Called when the PPU refreshes the screen (also known as the V-Blank period)
vblank: {
    // interrupt(isr_hardware_all_entry) -- isr_hardware_all_entry 
    pha
    txa
    pha
    tya
    pha
    // [1] call readJoy1 
    jsr readJoy1
    // [2] readJoy1::return#2 = readJoy1::joy#2
    jmp __b9
    // vblank::@9
  __b9:
    // [3] vblank::joy#0 = readJoy1::return#2 -- vbuxx=vbuaa 
    tax
    // [4] vblank::$1 = vblank::joy#0 & JOY_DOWN -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #JOY_DOWN
    // [5] if(0==vblank::$1) goto vblank::@1 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq __b1
    jmp __b4
    // vblank::@4
  __b4:
    // [6] *((byte*)SPRITE_BUFFER) = ++ *((byte*)SPRITE_BUFFER) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SPRITE_BUFFER
    // [7] *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA) = ++ *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
    // [8] *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA) = ++ *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
    // [9] *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA) = ++ *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
    jmp __b1
    // vblank::@1
  __b1:
    // [10] vblank::$3 = vblank::joy#0 & JOY_UP -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #JOY_UP
    // [11] if(0==vblank::$3) goto vblank::@2 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq __b2
    jmp __b5
    // vblank::@5
  __b5:
    // [12] *((byte*)SPRITE_BUFFER) = -- *((byte*)SPRITE_BUFFER) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec SPRITE_BUFFER
    // [13] *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA) = -- *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
    // [14] *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA) = -- *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
    // [15] *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA) = -- *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
    jmp __b2
    // vblank::@2
  __b2:
    // [16] vblank::$5 = vblank::joy#0 & JOY_LEFT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #JOY_LEFT
    // [17] if(0==vblank::$5) goto vblank::@3 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq __b3
    jmp __b6
    // vblank::@6
  __b6:
    // [18] *((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X) = -- *((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X
    // [19] *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = -- *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X
    // [20] *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = -- *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X
    // [21] *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = -- *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X
    jmp __b3
    // vblank::@3
  __b3:
    // [22] vblank::$7 = vblank::joy#0 & JOY_RIGHT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #JOY_RIGHT
    // [23] if(0==vblank::$7) goto vblank::ppuSpriteBufferDmaTransfer1 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq ppuSpriteBufferDmaTransfer1
    jmp __b7
    // vblank::@7
  __b7:
    // [24] *((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X) = ++ *((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X
    // [25] *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = ++ *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X
    // [26] *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = ++ *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X
    // [27] *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = ++ *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X
    jmp ppuSpriteBufferDmaTransfer1
    // vblank::ppuSpriteBufferDmaTransfer1
  ppuSpriteBufferDmaTransfer1:
    // [28] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR
    // [29] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA) = >SPRITE_BUFFER -- _deref_pbuc1=vbuc2 
    lda #>SPRITE_BUFFER
    sta APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA
    jmp __b8
    // vblank::@8
  __b8:
    // [30] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = 0 -- _deref_pbuc1=vbuc2 
    // Set scroll
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // [31] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = -8 -- _deref_pbuc1=vbuc2 
    lda #-8
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    jmp __breturn
    // vblank::@return
  __breturn:
    // [32] return 
    // interrupt(isr_hardware_all_exit) -- isr_hardware_all_exit 
    pla
    tay
    pla
    tax
    pla
    rti
}
  // main
// RESET Called when the NES is reset, including when it is turned on.
main: {
    jmp initNES1
    // main::initNES1
  initNES1:
    // asm { cld ldx#$ff txs  }
    cld
    ldx #$ff
    txs
    jmp initNES1_disableVideoOutput1
    // main::initNES1_disableVideoOutput1
  initNES1_disableVideoOutput1:
    // [35] *((byte*)PPU) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU
    // [36] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    jmp initNES1_disableAudioOutput1
    // main::initNES1_disableAudioOutput1
  initNES1_disableAudioOutput1:
    // [37] *FR_COUNTER = $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta FR_COUNTER
    // [38] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) = $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
    jmp initNES1_clearVBlankFlag1
    // main::initNES1_clearVBlankFlag1
  initNES1_clearVBlankFlag1:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [40] phi from main::initNES1_clearVBlankFlag1 to main::initNES1_waitForVBlank1 [phi:main::initNES1_clearVBlankFlag1->main::initNES1_waitForVBlank1]
  initNES1_waitForVBlank1_from_initNES1_clearVBlankFlag1:
    jmp initNES1_waitForVBlank1
    // main::initNES1_waitForVBlank1
  initNES1_waitForVBlank1:
    jmp initNES1_waitForVBlank1___b1
    // main::initNES1_waitForVBlank1_@1
  initNES1_waitForVBlank1___b1:
    // [41] main::initNES1_waitForVBlank1_$0 = *((volatile byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // [42] if(0==main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank1___b1
    // [43] phi from main::initNES1_waitForVBlank1_@1 to main::initNES1_@1 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1]
  initNES1___b1_from_initNES1_waitForVBlank1___b1:
    // [43] phi main::initNES1_i#2 = 0 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp initNES1___b1
    // [43] phi from main::initNES1_@1 to main::initNES1_@1 [phi:main::initNES1_@1->main::initNES1_@1]
  initNES1___b1_from_initNES1___b1:
    // [43] phi main::initNES1_i#2 = main::initNES1_i#1 [phi:main::initNES1_@1->main::initNES1_@1#0] -- register_copy 
    jmp initNES1___b1
    // main::initNES1_@1
  initNES1___b1:
    // [44] MEMORY[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY,x
    // [45] (MEMORY+$100)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$100,x
    // [46] (MEMORY+$200)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$200,x
    // [47] (MEMORY+$300)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$300,x
    // [48] (MEMORY+$400)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$400,x
    // [49] (MEMORY+$500)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$500,x
    // [50] (MEMORY+$600)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$600,x
    // [51] (MEMORY+$700)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$700,x
    // [52] main::initNES1_i#1 = ++ main::initNES1_i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [53] if(0!=main::initNES1_i#1) goto main::initNES1_@1 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne initNES1___b1_from_initNES1___b1
    // [54] phi from main::initNES1_@1 to main::initNES1_waitForVBlank2 [phi:main::initNES1_@1->main::initNES1_waitForVBlank2]
  initNES1_waitForVBlank2_from_initNES1___b1:
    jmp initNES1_waitForVBlank2
    // main::initNES1_waitForVBlank2
  initNES1_waitForVBlank2:
    jmp initNES1_waitForVBlank2___b1
    // main::initNES1_waitForVBlank2_@1
  initNES1_waitForVBlank2___b1:
    // [55] main::initNES1_waitForVBlank2_$0 = *((volatile byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // [56] if(0==main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank2___b1
    jmp initNES1___b7
    // main::initNES1_@7
  initNES1___b7:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [58] phi from main::initNES1_@7 to main::@5 [phi:main::initNES1_@7->main::@5]
  __b5_from_initNES1___b7:
    jmp __b5
    // main::@5
  __b5:
    // [59] call ppuDataTransfer 
  // Transfer the palette
    // [86] phi from main::@5 to ppuDataTransfer [phi:main::@5->ppuDataTransfer]
  ppuDataTransfer_from___b5:
    jsr ppuDataTransfer
    // [60] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [61] call ppuDataFill 
  // Clear the name table
    // [96] phi from main::@6 to ppuDataFill [phi:main::@6->ppuDataFill]
  ppuDataFill_from___b6:
    // [96] phi ppuDataFill::val#4 = $fc [phi:main::@6->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #$fc
    // [96] phi ppuDataFill::size#3 = $3c0 [phi:main::@6->ppuDataFill#1] -- vwuz1=vwuc1 
    lda #<$3c0
    sta.z ppuDataFill.size
    lda #>$3c0
    sta.z ppuDataFill.size+1
    // [96] phi ppuDataFill::ppuDataPrepare1_ppuData#0 = (void* const)PPU_NAME_TABLE_0 [phi:main::@6->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [62] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [63] call ppuDataFill 
  // Fill the PPU attribute table
    // [96] phi from main::@7 to ppuDataFill [phi:main::@7->ppuDataFill]
  ppuDataFill_from___b7:
    // [96] phi ppuDataFill::val#4 = 0 [phi:main::@7->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #0
    // [96] phi ppuDataFill::size#3 = $40 [phi:main::@7->ppuDataFill#1] -- vwuz1=vbuc1 
    lda #<$40
    sta.z ppuDataFill.size
    lda #>$40
    sta.z ppuDataFill.size+1
    // [96] phi ppuDataFill::ppuDataPrepare1_ppuData#0 = (void* const)PPU_ATTRIBUTE_TABLE_0 [phi:main::@7->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [64] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  __b1_from___b7:
    // [64] phi main::x#2 = 0 [phi:main::@7->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // Show floor
    // main::@1
  __b1:
    // [65] if(main::x#2<$20) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$20
    bcc __b2
    // [66] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    jmp __b3
    // main::@3
  __b3:
    // [67] call ppuDataPutTile 
  // Show flag
    // [106] phi from main::@3 to ppuDataPutTile [phi:main::@3->ppuDataPutTile]
  ppuDataPutTile_from___b3:
    // [106] phi ppuDataPutTile::tile#10 = FLAG [phi:main::@3->ppuDataPutTile#0] -- pbuz1=pbuc1 
    lda #<FLAG
    sta.z ppuDataPutTile.tile
    lda #>FLAG
    sta.z ppuDataPutTile.tile+1
    // [106] phi ppuDataPutTile::ppuData#2 = (void* const)PPU_NAME_TABLE_0+(word)$12*$20+$1c [phi:main::@3->ppuDataPutTile#1] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0+$12*$20+$1c
    sta.z ppuDataPutTile.ppuData
    lda #>PPU_NAME_TABLE_0+$12*$20+$1c
    sta.z ppuDataPutTile.ppuData+1
    jsr ppuDataPutTile
    // [68] phi from main::@3 to main::@9 [phi:main::@3->main::@9]
  __b9_from___b3:
    jmp __b9
    // main::@9
  __b9:
    // [69] call memcpy 
  // Initialize Sprite Buffer with the SPRITE data
    // [125] phi from main::@9 to memcpy [phi:main::@9->memcpy]
  memcpy_from___b9:
    jsr memcpy
    jmp enableVideoOutput1
    // main::enableVideoOutput1
  enableVideoOutput1:
    // [70] *((byte*)PPU) = $80 -- _deref_pbuc1=vbuc2 
    lda #$80
    sta PPU
    // [71] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = $1e -- _deref_pbuc1=vbuc2 
    lda #$1e
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // [72] phi from main::@4 main::enableVideoOutput1 to main::@4 [phi:main::@4/main::enableVideoOutput1->main::@4]
  __b4_from___b4:
  __b4_from_enableVideoOutput1:
    jmp __b4
  // Infinite loop
    // main::@4
  __b4:
    jmp __b4_from___b4
    // main::@2
  __b2:
    // [73] ppuDataPutTile::ppuData#0 = PPU_NAME_TABLE_0+(word)$14*$20 + main::x#2 -- pbuz1=pbuc1_plus_vbuxx 
    txa
    clc
    adc #<PPU_NAME_TABLE_0+$14*$20
    sta.z ppuDataPutTile.ppuData
    lda #>PPU_NAME_TABLE_0+$14*$20
    adc #0
    sta.z ppuDataPutTile.ppuData+1
    // [74] ppuDataPutTile::ppuData#9 = (void* const)ppuDataPutTile::ppuData#0
    // [75] call ppuDataPutTile 
    // [106] phi from main::@2 to ppuDataPutTile [phi:main::@2->ppuDataPutTile]
  ppuDataPutTile_from___b2:
    // [106] phi ppuDataPutTile::tile#10 = FLOOR [phi:main::@2->ppuDataPutTile#0] -- pbuz1=pbuc1 
    lda #<FLOOR
    sta.z ppuDataPutTile.tile
    lda #>FLOOR
    sta.z ppuDataPutTile.tile+1
    // [106] phi ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 [phi:main::@2->ppuDataPutTile#1] -- register_copy 
    jsr ppuDataPutTile
    jmp __b8
    // main::@8
  __b8:
    // [76] main::x#1 = main::x#2 + 2 -- vbuxx=vbuxx_plus_2 
    inx
    inx
    // [64] phi from main::@8 to main::@1 [phi:main::@8->main::@1]
  __b1_from___b8:
    // [64] phi main::x#2 = main::x#1 [phi:main::@8->main::@1#0] -- register_copy 
    jmp __b1
}
  // readJoy1
// Read Standard Controller #1
// Returns a byte representing the pushed buttons
// - bit 0: right
// - bit 1: left
// - bit 2: down
// - bit 3: up
// - bit 4: start
// - bit 5: select
// - bit 6: B
// - bit 7: A
readJoy1: {
    .label __1 = 8
    // [77] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1) = 1 -- _deref_pbuc1=vbuc2 
    // Latch the controller buttons
    lda #1
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [78] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [79] phi from readJoy1 to readJoy1::@1 [phi:readJoy1->readJoy1::@1]
  __b1_from_readJoy1:
    // [79] phi readJoy1::joy#2 = 0 [phi:readJoy1->readJoy1::@1#0] -- vbuaa=vbuc1 
    lda #0
    // [79] phi readJoy1::i#2 = 0 [phi:readJoy1->readJoy1::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // readJoy1::@1
  __b1:
    // [80] if(readJoy1::i#2<8) goto readJoy1::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #8
    bcc __b2
    jmp __breturn
    // readJoy1::@return
  __breturn:
    // [81] return 
    rts
    // readJoy1::@2
  __b2:
    // [82] readJoy1::$1 = readJoy1::joy#2 << 1 -- vbuz1=vbuaa_rol_1 
    asl
    sta.z __1
    // [83] readJoy1::$2 = *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1) & 1 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [84] readJoy1::joy#1 = readJoy1::$1 | readJoy1::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // [85] readJoy1::i#1 = ++ readJoy1::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [79] phi from readJoy1::@2 to readJoy1::@1 [phi:readJoy1::@2->readJoy1::@1]
  __b1_from___b2:
    // [79] phi readJoy1::joy#2 = readJoy1::joy#1 [phi:readJoy1::@2->readJoy1::@1#0] -- register_copy 
    // [79] phi readJoy1::i#2 = readJoy1::i#1 [phi:readJoy1::@2->readJoy1::@1#1] -- register_copy 
    jmp __b1
}
  // ppuDataTransfer
// Transfer a number of bytes from the CPU memory to the PPU memory
// - ppuData : Pointer in the PPU memory
// - cpuData : Pointer to the CPU memory (RAM of ROM)
// - size : The number of bytes to transfer
ppuDataTransfer: {
    .const size = $20*SIZEOF_BYTE
    .label ppuData = PPU_PALETTE
    .label cpuData = PALETTE
    // Transfer to PPU
    .label cpuSrc = 6
    .label i = 4
    jmp ppuDataPrepare1
    // ppuDataTransfer::ppuDataPrepare1
  ppuDataPrepare1:
    // [87] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = >ppuDataTransfer::ppuData#0 -- _deref_pbuc1=vbuc2 
    lda #>ppuData
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [88] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [89] phi from ppuDataTransfer::ppuDataPrepare1 to ppuDataTransfer::@1 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1]
  __b1_from_ppuDataPrepare1:
    // [89] phi ppuDataTransfer::cpuSrc#2 = (byte*)ppuDataTransfer::cpuData#0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#0] -- pbuz1=pbuc1 
    lda #<cpuData
    sta.z cpuSrc
    lda #>cpuData
    sta.z cpuSrc+1
    // [89] phi ppuDataTransfer::i#2 = 0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
    // ppuDataTransfer::@1
  __b1:
    // [90] if(ppuDataTransfer::i#2<ppuDataTransfer::size#0) goto ppuDataTransfer::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>size
    bcc __b2
    bne !+
    lda.z i
    cmp #<size
    bcc __b2
  !:
    jmp __breturn
    // ppuDataTransfer::@return
  __breturn:
    // [91] return 
    rts
    // ppuDataTransfer::@2
  __b2:
    // [92] ppuDataTransfer::ppuDataPut1_val#0 = *ppuDataTransfer::cpuSrc#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (cpuSrc),y
    jmp ppuDataPut1
    // ppuDataTransfer::ppuDataPut1
  ppuDataPut1:
    // [93] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataTransfer::ppuDataPut1_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b3
    // ppuDataTransfer::@3
  __b3:
    // [94] ppuDataTransfer::cpuSrc#1 = ++ ppuDataTransfer::cpuSrc#2 -- pbuz1=_inc_pbuz1 
    inc.z cpuSrc
    bne !+
    inc.z cpuSrc+1
  !:
    // [95] ppuDataTransfer::i#1 = ++ ppuDataTransfer::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [89] phi from ppuDataTransfer::@3 to ppuDataTransfer::@1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1]
  __b1_from___b3:
    // [89] phi ppuDataTransfer::cpuSrc#2 = ppuDataTransfer::cpuSrc#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#0] -- register_copy 
    // [89] phi ppuDataTransfer::i#2 = ppuDataTransfer::i#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#1] -- register_copy 
    jmp __b1
}
  // ppuDataFill
// Fill a number of bytes in the PPU memory
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
// ppuDataFill(byte register(X) val, word zp(6) size)
ppuDataFill: {
    .label ppuDataPrepare1_ppuData = 4
    .label i = 2
    .label size = 6
    jmp ppuDataPrepare1
    // ppuDataFill::ppuDataPrepare1
  ppuDataPrepare1:
    // [97] ppuDataFill::ppuDataPrepare1_$0 = > ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare1_ppuData+1
    // [98] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataFill::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [99] ppuDataFill::ppuDataPrepare1_$1 = < ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare1_ppuData
    // [100] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataFill::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [101] phi from ppuDataFill::ppuDataPrepare1 to ppuDataFill::@1 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1]
  __b1_from_ppuDataPrepare1:
    // [101] phi ppuDataFill::i#2 = 0 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // Transfer to PPU
    // ppuDataFill::@1
  __b1:
    // [102] if(ppuDataFill::i#2<ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 -- vwuz1_lt_vwuz2_then_la1 
    lda.z i+1
    cmp.z size+1
    bcc ppuDataPut1
    bne !+
    lda.z i
    cmp.z size
    bcc ppuDataPut1
  !:
    jmp __breturn
    // ppuDataFill::@return
  __breturn:
    // [103] return 
    rts
    // ppuDataFill::ppuDataPut1
  ppuDataPut1:
    // [104] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataFill::val#4 -- _deref_pbuc1=vbuxx 
    stx PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b2
    // ppuDataFill::@2
  __b2:
    // [105] ppuDataFill::i#1 = ++ ppuDataFill::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [101] phi from ppuDataFill::@2 to ppuDataFill::@1 [phi:ppuDataFill::@2->ppuDataFill::@1]
  __b1_from___b2:
    // [101] phi ppuDataFill::i#2 = ppuDataFill::i#1 [phi:ppuDataFill::@2->ppuDataFill::@1#0] -- register_copy 
    jmp __b1
}
  // ppuDataPutTile
// Transfer a 2x2 tile into the PPU memory
// - ppuData : Pointer in the PPU memory
// - tile : The tile to transfer
// ppuDataPutTile(byte* zp(2) ppuData, byte* zp(4) tile)
ppuDataPutTile: {
    .label ppuDataPrepare2_ppuData = 2
    .label ppuData = 2
    .label tile = 4
    jmp ppuDataPrepare1
    // ppuDataPutTile::ppuDataPrepare1
  ppuDataPrepare1:
    // [107] ppuDataPutTile::ppuDataPrepare1_$0 = > ppuDataPutTile::ppuData#2 -- vbuaa=_hi_pvoz1 
    lda.z ppuData+1
    // [108] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataPutTile::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [109] ppuDataPutTile::ppuDataPrepare1_$1 = < ppuDataPutTile::ppuData#2 -- vbuaa=_lo_pvoz1 
    lda.z ppuData
    // [110] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataPutTile::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    jmp __b1
    // ppuDataPutTile::@1
  __b1:
    // [111] ppuDataPutTile::ppuDataPut1_val#0 = *ppuDataPutTile::tile#10 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (tile),y
    jmp ppuDataPut1
    // ppuDataPutTile::ppuDataPut1
  ppuDataPut1:
    // [112] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataPutTile::ppuDataPut1_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b2
    // ppuDataPutTile::@2
  __b2:
    // [113] ppuDataPutTile::ppuDataPut2_val#0 = ppuDataPutTile::tile#10[1] -- vbuaa=pbuz1_derefidx_vbuc1 
    ldy #1
    lda (tile),y
    jmp ppuDataPut2
    // ppuDataPutTile::ppuDataPut2
  ppuDataPut2:
    // [114] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataPutTile::ppuDataPut2_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b3
    // ppuDataPutTile::@3
  __b3:
    // [115] ppuDataPutTile::ppuDataPrepare2_ppuData#0 = (byte*)ppuDataPutTile::ppuData#2 + $20 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$20
    clc
    adc.z ppuDataPrepare2_ppuData
    sta.z ppuDataPrepare2_ppuData
    bcc !+
    inc.z ppuDataPrepare2_ppuData+1
  !:
    jmp ppuDataPrepare2
    // ppuDataPutTile::ppuDataPrepare2
  ppuDataPrepare2:
    // [116] ppuDataPutTile::ppuDataPrepare2_$0 = > (void* const)ppuDataPutTile::ppuDataPrepare2_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare2_ppuData+1
    // [117] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataPutTile::ppuDataPrepare2_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [118] ppuDataPutTile::ppuDataPrepare2_$1 = < (void* const)ppuDataPutTile::ppuDataPrepare2_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare2_ppuData
    // [119] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataPutTile::ppuDataPrepare2_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    jmp __b4
    // ppuDataPutTile::@4
  __b4:
    // [120] ppuDataPutTile::ppuDataPut3_val#0 = ppuDataPutTile::tile#10[2] -- vbuaa=pbuz1_derefidx_vbuc1 
    ldy #2
    lda (tile),y
    jmp ppuDataPut3
    // ppuDataPutTile::ppuDataPut3
  ppuDataPut3:
    // [121] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataPutTile::ppuDataPut3_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b5
    // ppuDataPutTile::@5
  __b5:
    // [122] ppuDataPutTile::ppuDataPut4_val#0 = ppuDataPutTile::tile#10[3] -- vbuaa=pbuz1_derefidx_vbuc1 
    ldy #3
    lda (tile),y
    jmp ppuDataPut4
    // ppuDataPutTile::ppuDataPut4
  ppuDataPut4:
    // [123] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataPutTile::ppuDataPut4_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __breturn
    // ppuDataPutTile::@return
  __breturn:
    // [124] return 
    rts
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
memcpy: {
    .const num = 8*SIZEOF_STRUCT_SPRITEDATA
    .label destination = SPRITE_BUFFER
    .label source = SPRITES
    .label src_end = source+num
    .label dst = 6
    .label src = 4
    // [126] phi from memcpy to memcpy::@1 [phi:memcpy->memcpy::@1]
  __b1_from_memcpy:
    // [126] phi memcpy::dst#2 = (byte*)memcpy::destination#0 [phi:memcpy->memcpy::@1#0] -- pbuz1=pbuc1 
    lda #<destination
    sta.z dst
    lda #>destination
    sta.z dst+1
    // [126] phi memcpy::src#2 = (byte*)memcpy::source#0 [phi:memcpy->memcpy::@1#1] -- pbuz1=pbuc1 
    lda #<source
    sta.z src
    lda #>source
    sta.z src+1
    jmp __b1
    // memcpy::@1
  __b1:
    // [127] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z src+1
    cmp #>src_end
    bne __b2
    lda.z src
    cmp #<src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [128] return 
    rts
    // memcpy::@2
  __b2:
    // [129] *memcpy::dst#2 = *memcpy::src#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [130] memcpy::dst#1 = ++ memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [131] memcpy::src#1 = ++ memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [126] phi from memcpy::@2 to memcpy::@1 [phi:memcpy::@2->memcpy::@1]
  __b1_from___b2:
    // [126] phi memcpy::dst#2 = memcpy::dst#1 [phi:memcpy::@2->memcpy::@1#0] -- register_copy 
    // [126] phi memcpy::src#2 = memcpy::src#1 [phi:memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // Flag tile
  FLAG: .byte $54, $55, $56, $57
  // Floor tile
  FLOOR: .byte $85, $85, $86, $86
  // Sprite Data
  SPRITES: .byte $96, $36, 2, $c, $96, $37, 2, $14, $9e, $38, 2, $c, $9e, $39, 2, $14, $96, $70, 0, $48, $96, $71, 0, $50, $9e, $72, 1, $48, $9e, $73, 1, $50
  // Color Palette
  PALETTE: .byte $11, $2d, 8, $18, $11, 6, $15, $36, $11, $39, $4a, $5b, $f, $3d, $4e, $5f, $11, $f, $30, 8, $11, $f, $18, 8, $11, $30, $37, $1a, $f, $f, $f, $f
.segment Tiles
TILES:
.import binary "smb1_chr.bin"

.segment GameRam
  .align $100
  SPRITE_BUFFER: .fill 4*$40, 0
.segment Vectors
  VECTORS: .word vblank, main, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b9
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b5
Removing instruction jmp __b2
Removing instruction jmp __b6
Removing instruction jmp __b3
Removing instruction jmp __b7
Removing instruction jmp ppuSpriteBufferDmaTransfer1
Removing instruction jmp __b8
Removing instruction jmp __breturn
Removing instruction jmp initNES1
Removing instruction jmp initNES1_disableVideoOutput1
Removing instruction jmp initNES1_disableAudioOutput1
Removing instruction jmp initNES1_clearVBlankFlag1
Removing instruction jmp initNES1_waitForVBlank1
Removing instruction jmp initNES1_waitForVBlank1___b1
Removing instruction jmp initNES1___b1
Removing instruction jmp initNES1_waitForVBlank2
Removing instruction jmp initNES1_waitForVBlank2___b1
Removing instruction jmp initNES1___b7
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b9
Removing instruction jmp enableVideoOutput1
Removing instruction jmp __b4
Removing instruction jmp __b8
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp ppuDataPrepare1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp ppuDataPut1
Removing instruction jmp __b3
Removing instruction jmp ppuDataPrepare1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp ppuDataPrepare1
Removing instruction jmp __b1
Removing instruction jmp ppuDataPut1
Removing instruction jmp __b2
Removing instruction jmp ppuDataPut2
Removing instruction jmp __b3
Removing instruction jmp ppuDataPrepare2
Removing instruction jmp __b4
Removing instruction jmp ppuDataPut3
Removing instruction jmp __b5
Removing instruction jmp ppuDataPut4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #$40
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction ldx #0 with TAX
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label initNES1_waitForVBlank1___b1 with initNES1_waitForVBlank1
Replacing label initNES1___b1_from_initNES1___b1 with initNES1___b1
Replacing label initNES1_waitForVBlank2___b1 with initNES1_waitForVBlank2
Removing instruction initNES1_waitForVBlank1_from_initNES1_clearVBlankFlag1:
Removing instruction initNES1_waitForVBlank1___b1:
Removing instruction initNES1___b1_from_initNES1___b1:
Removing instruction initNES1_waitForVBlank2_from_initNES1___b1:
Removing instruction initNES1_waitForVBlank2___b1:
Removing instruction __b5_from_initNES1___b7:
Removing instruction __b6_from___b5:
Removing instruction __b7_from___b6:
Removing instruction __b3_from___b1:
Removing instruction __b9_from___b3:
Removing instruction __b4_from_enableVideoOutput1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b9:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __breturn:
Removing instruction initNES1:
Removing instruction initNES1_disableVideoOutput1:
Removing instruction initNES1_disableAudioOutput1:
Removing instruction initNES1_clearVBlankFlag1:
Removing instruction initNES1___b1_from_initNES1_waitForVBlank1___b1:
Removing instruction initNES1___b7:
Removing instruction __b5:
Removing instruction ppuDataTransfer_from___b5:
Removing instruction __b6:
Removing instruction ppuDataFill_from___b6:
Removing instruction __b7:
Removing instruction ppuDataFill_from___b7:
Removing instruction __b1_from___b7:
Removing instruction __b3:
Removing instruction ppuDataPutTile_from___b3:
Removing instruction __b9:
Removing instruction memcpy_from___b9:
Removing instruction enableVideoOutput1:
Removing instruction __b4:
Removing instruction ppuDataPutTile_from___b2:
Removing instruction __b8:
Removing instruction __b1_from___b8:
Removing instruction __b1_from_readJoy1:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction ppuDataPrepare1:
Removing instruction __b1_from_ppuDataPrepare1:
Removing instruction __breturn:
Removing instruction ppuDataPut1:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction ppuDataPrepare1:
Removing instruction __b1_from_ppuDataPrepare1:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b1_from___b2:
Removing instruction ppuDataPrepare1:
Removing instruction __b1:
Removing instruction ppuDataPut1:
Removing instruction __b2:
Removing instruction ppuDataPut2:
Removing instruction __b3:
Removing instruction ppuDataPrepare2:
Removing instruction __b4:
Removing instruction ppuDataPut3:
Removing instruction __b5:
Removing instruction ppuDataPut4:
Removing instruction __breturn:
Removing instruction __b1_from_memcpy:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Relabelling long label __b4_from___b4 to __b3
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp initNES1___b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
constant struct RICOH_2A03* APU = (struct RICOH_2A03*) 16384
constant byte* FLAG[]  = { $54, $55, $56, $57 }
constant byte* FLOOR[]  = { $85, $85, $86, $86 }
constant byte* const FR_COUNTER = (byte*) 16407
constant const byte JOY_DOWN = 4
constant const byte JOY_LEFT = 2
constant const byte JOY_RIGHT = 1
constant const byte JOY_UP = 8
constant byte* const MEMORY = (byte*) 0
constant byte OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
constant byte OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
constant byte OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
constant byte OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
constant byte OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
constant byte OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
constant byte OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
constant byte OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
constant byte OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
constant byte OFFSET_STRUCT_SPRITEDATA_X = 3
constant byte* PALETTE[$20]  = { $11, $2d, 8, $18, $11, 6, $15, $36, $11, $39, $4a, $5b, $f, $3d, $4e, $5f, $11, $f, $30, 8, $11, $f, $18, 8, $11, $30, $37, $1a, $f, $f, $f, $f }
constant struct RICOH_2C02* PPU = (struct RICOH_2C02*) 8192
constant byte* const PPU_ATTRIBUTE_TABLE_0 = (byte*) 9152
constant byte* const PPU_NAME_TABLE_0 = (byte*) 8192
constant byte* const PPU_PALETTE = (byte*) 16128
constant volatile byte* const PPU_PPUSTATUS = (volatile byte*) 8194
constant byte SIZEOF_BYTE = 1
constant byte SIZEOF_STRUCT_SPRITEDATA = 4
constant struct SpriteData* SPRITES[]  = { { y: $96, tile: $36, attributes: 2, x: $c }, { y: $96, tile: $37, attributes: 2, x: $14 }, { y: $9e, tile: $38, attributes: 2, x: $c }, { y: $9e, tile: $39, attributes: 2, x: $14 }, { y: $96, tile: $70, attributes: 0, x: $48 }, { y: $96, tile: $71, attributes: 0, x: $50 }, { y: $9e, tile: $72, attributes: 1, x: $48 }, { y: $9e, tile: $73, attributes: 1, x: $50 } }
constant struct SpriteData* SPRITE_BUFFER[$40]  = { fill( $40, 0) }
constant byte* TILES[]  = kickasm {{ .import binary "smb1_chr.bin"
 }}
constant void()* const* VECTORS[]  = { &vblank, &main, (void()*) 0 }
void main()
byte main::initNES1_i
byte main::initNES1_i#1 reg byte x 16.5
byte main::initNES1_i#2 reg byte x 12.222222222222221
byte~ main::initNES1_waitForVBlank1_$0 reg byte a 22.0
byte~ main::initNES1_waitForVBlank2_$0 reg byte a 22.0
byte main::x
byte main::x#1 reg byte x 22.0
byte main::x#2 reg byte x 8.8
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
constant void* memcpy::destination#0 destination = (void*)SPRITE_BUFFER
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:6 101.0
byte* memcpy::dst#2 dst zp[2]:6 101.0
word memcpy::num
constant word memcpy::num#0 num = 8*SIZEOF_STRUCT_SPRITEDATA
void* memcpy::return
void* memcpy::source
constant void* memcpy::source#0 source = (void*)SPRITES
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:4 202.0
byte* memcpy::src#2 src zp[2]:4 101.0
byte* memcpy::src_end
constant byte* memcpy::src_end#0 src_end = (byte*)memcpy::source#0+memcpy::num#0
void ppuDataFill(void* const ppuDataFill::ppuData , byte ppuDataFill::val , word ppuDataFill::size)
word ppuDataFill::i
word ppuDataFill::i#1 i zp[2]:2 202.0
word ppuDataFill::i#2 i zp[2]:2 101.0
void* const ppuDataFill::ppuData
byte~ ppuDataFill::ppuDataPrepare1_$0 reg byte a 22.0
byte~ ppuDataFill::ppuDataPrepare1_$1 reg byte a 22.0
void* const ppuDataFill::ppuDataPrepare1_ppuData
void* const ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataPrepare1_ppuData zp[2]:4 7.333333333333333
byte ppuDataFill::ppuDataPut1_val
word ppuDataFill::size
word ppuDataFill::size#3 size zp[2]:6 11.222222222222221
byte ppuDataFill::val
byte ppuDataFill::val#4 reg byte x 11.222222222222221
void ppuDataPutTile(void* const ppuDataPutTile::ppuData , byte* ppuDataPutTile::tile)
void* const ppuDataPutTile::ppuData
byte* const ppuDataPutTile::ppuData#0 ppuData zp[2]:2 11.0
void* const ppuDataPutTile::ppuData#2 ppuData zp[2]:2 23.666666666666664
void* const ppuDataPutTile::ppuData#9 ppuData zp[2]:2 22.0
byte~ ppuDataPutTile::ppuDataPrepare1_$0 reg byte a 202.0
byte~ ppuDataPutTile::ppuDataPrepare1_$1 reg byte a 202.0
void* const ppuDataPutTile::ppuDataPrepare1_ppuData
byte~ ppuDataPutTile::ppuDataPrepare2_$0 reg byte a 202.0
byte~ ppuDataPutTile::ppuDataPrepare2_$1 reg byte a 202.0
void* const ppuDataPutTile::ppuDataPrepare2_ppuData
byte* const ppuDataPutTile::ppuDataPrepare2_ppuData#0 ppuDataPrepare2_ppuData zp[2]:2 33.666666666666664
byte ppuDataPutTile::ppuDataPut1_val
byte ppuDataPutTile::ppuDataPut1_val#0 reg byte a 202.0
byte ppuDataPutTile::ppuDataPut2_val
byte ppuDataPutTile::ppuDataPut2_val#0 reg byte a 202.0
byte ppuDataPutTile::ppuDataPut3_val
byte ppuDataPutTile::ppuDataPut3_val#0 reg byte a 202.0
byte ppuDataPutTile::ppuDataPut4_val
byte ppuDataPutTile::ppuDataPut4_val#0 reg byte a 202.0
byte* ppuDataPutTile::tile
byte* ppuDataPutTile::tile#10 tile zp[2]:4 25.25
void ppuDataTransfer(void* const ppuDataTransfer::ppuData , void* const ppuDataTransfer::cpuData , word ppuDataTransfer::size)
void* const ppuDataTransfer::cpuData
constant void* const ppuDataTransfer::cpuData#0 cpuData = (void* const)PALETTE
byte* ppuDataTransfer::cpuSrc
byte* ppuDataTransfer::cpuSrc#1 cpuSrc zp[2]:6 101.0
byte* ppuDataTransfer::cpuSrc#2 cpuSrc zp[2]:6 75.75
word ppuDataTransfer::i
word ppuDataTransfer::i#1 i zp[2]:4 202.0
word ppuDataTransfer::i#2 i zp[2]:4 60.599999999999994
void* const ppuDataTransfer::ppuData
constant void* const ppuDataTransfer::ppuData#0 ppuData = (void* const)PPU_PALETTE
void* const ppuDataTransfer::ppuDataPrepare1_ppuData
byte ppuDataTransfer::ppuDataPut1_val
byte ppuDataTransfer::ppuDataPut1_val#0 reg byte a 202.0
word ppuDataTransfer::size
constant word ppuDataTransfer::size#0 size = $20*SIZEOF_BYTE
byte readJoy1()
byte~ readJoy1::$1 zp[1]:8 101.0
byte~ readJoy1::$2 reg byte a 202.0
byte readJoy1::i
byte readJoy1::i#1 reg byte x 202.0
byte readJoy1::i#2 reg byte x 60.599999999999994
byte readJoy1::joy
byte readJoy1::joy#1 reg byte a 101.0
byte readJoy1::joy#2 reg byte a 51.0
byte readJoy1::return
byte readJoy1::return#2 reg byte a 4.0
__interrupt(hardware_all) void vblank()
byte~ vblank::$1 reg byte a 4.0
byte~ vblank::$3 reg byte a 4.0
byte~ vblank::$5 reg byte a 4.0
byte~ vblank::$7 reg byte a 4.0
byte vblank::joy
byte vblank::joy#0 reg byte x 0.5263157894736842
struct SpriteData* vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer

reg byte x [ main::initNES1_i#2 main::initNES1_i#1 ]
reg byte x [ main::x#2 main::x#1 ]
reg byte x [ readJoy1::i#2 readJoy1::i#1 ]
reg byte a [ readJoy1::joy#2 readJoy1::joy#1 ]
reg byte x [ ppuDataFill::val#4 ]
zp[2]:2 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ppuDataPutTile::ppuData#0 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ppuDataFill::i#2 ppuDataFill::i#1 ]
zp[2]:4 [ memcpy::src#2 memcpy::src#1 ppuDataPutTile::tile#10 ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
zp[2]:6 [ memcpy::dst#2 memcpy::dst#1 ppuDataFill::size#3 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
reg byte a [ readJoy1::return#2 ]
reg byte x [ vblank::joy#0 ]
reg byte a [ vblank::$1 ]
reg byte a [ vblank::$3 ]
reg byte a [ vblank::$5 ]
reg byte a [ vblank::$7 ]
reg byte a [ main::initNES1_waitForVBlank1_$0 ]
reg byte a [ main::initNES1_waitForVBlank2_$0 ]
zp[1]:8 [ readJoy1::$1 ]
reg byte a [ readJoy1::$2 ]
reg byte a [ ppuDataTransfer::ppuDataPut1_val#0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataPutTile::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataPutTile::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataPutTile::ppuDataPut1_val#0 ]
reg byte a [ ppuDataPutTile::ppuDataPut2_val#0 ]
reg byte a [ ppuDataPutTile::ppuDataPrepare2_$0 ]
reg byte a [ ppuDataPutTile::ppuDataPrepare2_$1 ]
reg byte a [ ppuDataPutTile::ppuDataPut3_val#0 ]
reg byte a [ ppuDataPutTile::ppuDataPut4_val#0 ]


FINAL ASSEMBLER
Score: 4103

  // File Comments
// A minimal NES demo
// Based on: https://github.com/gregkrsak/first_nes written by Greg M. Krsak, 2018. 
// Nintendo Entertainment System (NES
// https://en.wikipedia.org/wiki/Nintendo_Entertainment_System_(Model_NES-101)
// https://github.com/gregkrsak/first_nes
// Ricoh 2C02 - NES Picture Processing Unit (PPU)
// Ricoh RP2C02 (NTSC version) / RP2C07 (PAL version),
// https://en.wikipedia.org/wiki/Picture_Processing_Unit
// https://wiki.nesdev.com/w/index.php/PPU_registers
// http://nesdev.com/2C02%20technical%20reference.TXT
// Based on: https://github.com/gregkrsak/first_nes written by Greg M. Krsak, 2018. 
  // Upstart
.cpu _6502
  // Nintendo Entertainment System (NES) ROM (Mapper 0 NROM, Vertical Mirroring)
// https://sadistech.com/nesromtool/romdoc.html
// https://forums.nesdev.com/viewtopic.php?f=2&t=9896
// https://github.com/gregkrsak/first_nes
.file [name="nes-demo.nes", type="bin", segments="NesRom"]
.file [name="nes-demo.nes_hdr", type="bin", segments="Header"]
.file [name="nes-demo.nes_prg", type="bin", segments="ProgramRom"]
.file [name="nes-demo.nes_chr", type="bin", segments="CharacterRom"]
.segmentdef Header  [ start=$0000,       min=$0000, max=$000f, fill ]
.segmentdef Tiles   [ start=$0000,       min=$0000, max=$1fff, fill ]
.segmentdef Code    [ start=$c000,       min=$c000, max=$fff9 ]
.segmentdef Data    [ startAfter="Code", min=$c000, max=$fff9 ]
.segmentdef Vectors [ start=$fffa,       min=$fffa, max=$ffff ]
.segmentdef GameRam [start=$200,max=$7ff, virtual]
.segmentdef ProgramRom [ segments="Code, Data, Vectors" ]
.segmentdef CharacterRom [ segments="Tiles" ]
.segmentdef NesRom
.segment NesRom
.segmentout [ segments="Header" ]
.segmentout [ segments="ProgramRom" ]
.segmentout [ segments="CharacterRom" ]
.segment Header
.text   @"NES\$1a"
.byte   $01           // 1x 16KB ROM (PRG)
.byte   $01           // 1x 8KB VROM (CHR)
.byte   %00000001     // Mapper nibble 0000 == No mapping (a simple 16KB PRG + 8KB CHR game)
                      // Mirroring nibble 0001 == Vertical mirroring only
  // Global Constants & labels
  // Standard Controller Right Button
  .const JOY_RIGHT = 1
  // Standard Controller Left Button
  .const JOY_LEFT = 2
  // Standard Controller Down Button
  .const JOY_DOWN = 4
  // Standard Controller Up Button
  .const JOY_UP = 8
  .const SIZEOF_STRUCT_SPRITEDATA = 4
  .const OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
  .const OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
  .const OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
  .const OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
  .const OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
  .const OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
  .const OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
  .const OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
  .const OFFSET_STRUCT_SPRITEDATA_X = 3
  .const OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
  .const SIZEOF_BYTE = 1
  // $2000-$23bf	$03c0	Name table 0
  .label PPU_NAME_TABLE_0 = $2000
  // $23c0-$23ff	$0040	Attribute table 0
  .label PPU_ATTRIBUTE_TABLE_0 = $23c0
  // $3000-$3eff	$0f00	Mirrors of $2000-$2eff
  // $3f00-$3f1f	$0020	Palette RAM indexes
  .label PPU_PALETTE = $3f00
  // PPU Status Register for reading in ASM
  .label PPU_PPUSTATUS = $2002
  // APU Frame Counter
  // generates low-frequency clocks for the channels and an optional 60 Hz interrupt.
  // https://wiki.nesdev.com/w/index.php/APU_Frame_Counter
  // ------+-----+---------------------------------------------------------------
  //  $4017 |	 W  | FR_COUNTER Frame Counter	Set mode and interrupt
  //  ------+-----+---------------------------------------------------------------
  //        |   7	| Sequencer mode: 0 selects 4-step sequence, 1 selects 5-step sequence
  //        |   6	| Interrupt inhibit flag. If set, the frame interrupt flag is cleared, otherwise it is unaffected.
  //  ------+-----+---------------------------------------------------------------
  // Side effects	After 3 or 4 CPU clock cycles*, the timer is reset.
  // If the mode flag is set, then both "quarter frame" and "half frame" signals are also generated.
  .label FR_COUNTER = $4017
  // Pointer to the start of RAM memory
  .label MEMORY = 0
  // NES Picture Processing Unit (PPU)
  .label PPU = $2000
  // NES CPU and audion processing unit (APU)
  .label APU = $4000
.segment Code
  // vblank
// NMI Called when the PPU refreshes the screen (also known as the V-Blank period)
vblank: {
    // interrupt(isr_hardware_all_entry) -- isr_hardware_all_entry 
    pha
    txa
    pha
    tya
    pha
    // readJoy1()
    // [1] call readJoy1 
    jsr readJoy1
    // [2] readJoy1::return#2 = readJoy1::joy#2
    // vblank::@9
    // joy = readJoy1()
    // [3] vblank::joy#0 = readJoy1::return#2 -- vbuxx=vbuaa 
    tax
    // joy&JOY_DOWN
    // [4] vblank::$1 = vblank::joy#0 & JOY_DOWN -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #JOY_DOWN
    // if(joy&JOY_DOWN)
    // [5] if(0==vblank::$1) goto vblank::@1 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq __b1
    // vblank::@4
    // SPRITE_BUFFER[0].y++;
    // [6] *((byte*)SPRITE_BUFFER) = ++ *((byte*)SPRITE_BUFFER) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SPRITE_BUFFER
    // SPRITE_BUFFER[1].y++;
    // [7] *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA) = ++ *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
    // SPRITE_BUFFER[2].y++;
    // [8] *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA) = ++ *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
    // SPRITE_BUFFER[3].y++;
    // [9] *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA) = ++ *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
    // vblank::@1
  __b1:
    // joy&JOY_UP
    // [10] vblank::$3 = vblank::joy#0 & JOY_UP -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #JOY_UP
    // if(joy&JOY_UP)
    // [11] if(0==vblank::$3) goto vblank::@2 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq __b2
    // vblank::@5
    // SPRITE_BUFFER[0].y--;
    // [12] *((byte*)SPRITE_BUFFER) = -- *((byte*)SPRITE_BUFFER) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec SPRITE_BUFFER
    // SPRITE_BUFFER[1].y--;
    // [13] *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA) = -- *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
    // SPRITE_BUFFER[2].y--;
    // [14] *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA) = -- *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
    // SPRITE_BUFFER[3].y--;
    // [15] *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA) = -- *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
    // vblank::@2
  __b2:
    // joy&JOY_LEFT
    // [16] vblank::$5 = vblank::joy#0 & JOY_LEFT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #JOY_LEFT
    // if(joy&JOY_LEFT)
    // [17] if(0==vblank::$5) goto vblank::@3 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq __b3
    // vblank::@6
    // SPRITE_BUFFER[0].x--;
    // [18] *((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X) = -- *((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X
    // SPRITE_BUFFER[1].x--;
    // [19] *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = -- *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X
    // SPRITE_BUFFER[2].x--;
    // [20] *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = -- *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X
    // SPRITE_BUFFER[3].x--;
    // [21] *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = -- *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X
    // vblank::@3
  __b3:
    // joy&JOY_RIGHT
    // [22] vblank::$7 = vblank::joy#0 & JOY_RIGHT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #JOY_RIGHT
    // if(joy&JOY_RIGHT)
    // [23] if(0==vblank::$7) goto vblank::ppuSpriteBufferDmaTransfer1 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq ppuSpriteBufferDmaTransfer1
    // vblank::@7
    // SPRITE_BUFFER[0].x++;
    // [24] *((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X) = ++ *((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X
    // SPRITE_BUFFER[1].x++;
    // [25] *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = ++ *((byte*)SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SPRITE_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X
    // SPRITE_BUFFER[2].x++;
    // [26] *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = ++ *((byte*)SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SPRITE_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X
    // SPRITE_BUFFER[3].x++;
    // [27] *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) = ++ *((byte*)SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SPRITE_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA+OFFSET_STRUCT_SPRITEDATA_X
    // vblank::ppuSpriteBufferDmaTransfer1
  ppuSpriteBufferDmaTransfer1:
    // PPU->OAMADDR = 0
    // [28] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR
    // APU->OAMDMA = >spriteBuffer
    // [29] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA) = >SPRITE_BUFFER -- _deref_pbuc1=vbuc2 
    lda #>SPRITE_BUFFER
    sta APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA
    // vblank::@8
    // PPU->PPUSCROLL = 0
    // [30] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = 0 -- _deref_pbuc1=vbuc2 
    // Set scroll
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // PPU->PPUSCROLL = -8
    // [31] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = -8 -- _deref_pbuc1=vbuc2 
    lda #-8
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // vblank::@return
    // }
    // [32] return 
    // interrupt(isr_hardware_all_exit) -- isr_hardware_all_exit 
    pla
    tay
    pla
    tax
    pla
    rti
}
  // main
// RESET Called when the NES is reset, including when it is turned on.
main: {
    // main::initNES1
    // asm
    // asm { cld ldx#$ff txs  }
    cld
    ldx #$ff
    txs
    // main::initNES1_disableVideoOutput1
    // PPU->PPUCTRL = 0
    // [35] *((byte*)PPU) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU
    // PPU->PPUMASK = 0
    // [36] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = 0 -- _deref_pbuc1=vbuc2 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // main::initNES1_disableAudioOutput1
    // *FR_COUNTER = 0b01000000
    // [37] *FR_COUNTER = $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta FR_COUNTER
    // APU->DMC_FREQ  = 0b01000000
    // [38] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) = $40 -- _deref_pbuc1=vbuc2 
    sta APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
    // main::initNES1_clearVBlankFlag1
    // asm
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [40] phi from main::initNES1_clearVBlankFlag1 to main::initNES1_waitForVBlank1 [phi:main::initNES1_clearVBlankFlag1->main::initNES1_waitForVBlank1]
    // main::initNES1_waitForVBlank1
  initNES1_waitForVBlank1:
    // main::initNES1_waitForVBlank1_@1
    // PPU->PPUSTATUS&0x80
    // [41] main::initNES1_waitForVBlank1_$0 = *((volatile byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // while(!(PPU->PPUSTATUS&0x80))
    // [42] if(0==main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank1
    // [43] phi from main::initNES1_waitForVBlank1_@1 to main::initNES1_@1 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1]
    // [43] phi main::initNES1_i#2 = 0 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [43] phi from main::initNES1_@1 to main::initNES1_@1 [phi:main::initNES1_@1->main::initNES1_@1]
    // [43] phi main::initNES1_i#2 = main::initNES1_i#1 [phi:main::initNES1_@1->main::initNES1_@1#0] -- register_copy 
    // main::initNES1_@1
  initNES1___b1:
    // (MEMORY+0x000)[i] = 0
    // [44] MEMORY[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY,x
    // (MEMORY+0x100)[i] = 0
    // [45] (MEMORY+$100)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$100,x
    // (MEMORY+0x200)[i] = 0
    // [46] (MEMORY+$200)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$200,x
    // (MEMORY+0x300)[i] = 0
    // [47] (MEMORY+$300)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$300,x
    // (MEMORY+0x400)[i] = 0
    // [48] (MEMORY+$400)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$400,x
    // (MEMORY+0x500)[i] = 0
    // [49] (MEMORY+$500)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$500,x
    // (MEMORY+0x600)[i] = 0
    // [50] (MEMORY+$600)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$600,x
    // (MEMORY+0x700)[i] = 0
    // [51] (MEMORY+$700)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$700,x
    // while (++i)
    // [52] main::initNES1_i#1 = ++ main::initNES1_i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [53] if(0!=main::initNES1_i#1) goto main::initNES1_@1 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne initNES1___b1
    // [54] phi from main::initNES1_@1 to main::initNES1_waitForVBlank2 [phi:main::initNES1_@1->main::initNES1_waitForVBlank2]
    // main::initNES1_waitForVBlank2
  initNES1_waitForVBlank2:
    // main::initNES1_waitForVBlank2_@1
    // PPU->PPUSTATUS&0x80
    // [55] main::initNES1_waitForVBlank2_$0 = *((volatile byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // while(!(PPU->PPUSTATUS&0x80))
    // [56] if(0==main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank2
    // main::initNES1_@7
    // asm
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [58] phi from main::initNES1_@7 to main::@5 [phi:main::initNES1_@7->main::@5]
    // main::@5
    // ppuDataTransfer(PPU_PALETTE, PALETTE, sizeof(PALETTE))
    // [59] call ppuDataTransfer 
  // Transfer the palette
    // [86] phi from main::@5 to ppuDataTransfer [phi:main::@5->ppuDataTransfer]
    jsr ppuDataTransfer
    // [60] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // main::@6
    // ppuDataFill(PPU_NAME_TABLE_0, 0xfc, 0x3c0)
    // [61] call ppuDataFill 
  // Clear the name table
    // [96] phi from main::@6 to ppuDataFill [phi:main::@6->ppuDataFill]
    // [96] phi ppuDataFill::val#4 = $fc [phi:main::@6->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #$fc
    // [96] phi ppuDataFill::size#3 = $3c0 [phi:main::@6->ppuDataFill#1] -- vwuz1=vwuc1 
    lda #<$3c0
    sta.z ppuDataFill.size
    lda #>$3c0
    sta.z ppuDataFill.size+1
    // [96] phi ppuDataFill::ppuDataPrepare1_ppuData#0 = (void* const)PPU_NAME_TABLE_0 [phi:main::@6->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [62] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
    // main::@7
    // ppuDataFill(PPU_ATTRIBUTE_TABLE_0, 0, 0x40)
    // [63] call ppuDataFill 
  // Fill the PPU attribute table
    // [96] phi from main::@7 to ppuDataFill [phi:main::@7->ppuDataFill]
    // [96] phi ppuDataFill::val#4 = 0 [phi:main::@7->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #0
    // [96] phi ppuDataFill::size#3 = $40 [phi:main::@7->ppuDataFill#1] -- vwuz1=vbuc1 
    lda #<$40
    sta.z ppuDataFill.size
    lda #>$40
    sta.z ppuDataFill.size+1
    // [96] phi ppuDataFill::ppuDataPrepare1_ppuData#0 = (void* const)PPU_ATTRIBUTE_TABLE_0 [phi:main::@7->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [64] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
    // [64] phi main::x#2 = 0 [phi:main::@7->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // Show floor
    // main::@1
  __b1:
    // for(char x=0;x<32;x+=2)
    // [65] if(main::x#2<$20) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$20
    bcc __b2
    // [66] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // main::@3
    // ppuDataPutTile(PPU_NAME_TABLE_0+18*32+28, FLAG)
    // [67] call ppuDataPutTile 
  // Show flag
    // [106] phi from main::@3 to ppuDataPutTile [phi:main::@3->ppuDataPutTile]
    // [106] phi ppuDataPutTile::tile#10 = FLAG [phi:main::@3->ppuDataPutTile#0] -- pbuz1=pbuc1 
    lda #<FLAG
    sta.z ppuDataPutTile.tile
    lda #>FLAG
    sta.z ppuDataPutTile.tile+1
    // [106] phi ppuDataPutTile::ppuData#2 = (void* const)PPU_NAME_TABLE_0+(word)$12*$20+$1c [phi:main::@3->ppuDataPutTile#1] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0+$12*$20+$1c
    sta.z ppuDataPutTile.ppuData
    lda #>PPU_NAME_TABLE_0+$12*$20+$1c
    sta.z ppuDataPutTile.ppuData+1
    jsr ppuDataPutTile
    // [68] phi from main::@3 to main::@9 [phi:main::@3->main::@9]
    // main::@9
    // memcpy(SPRITE_BUFFER, SPRITES, sizeof(SPRITES))
    // [69] call memcpy 
  // Initialize Sprite Buffer with the SPRITE data
    // [125] phi from main::@9 to memcpy [phi:main::@9->memcpy]
    jsr memcpy
    // main::enableVideoOutput1
    // PPU->PPUCTRL = 0b10000000
    // [70] *((byte*)PPU) = $80 -- _deref_pbuc1=vbuc2 
    lda #$80
    sta PPU
    // PPU->PPUMASK = 0b00011110
    // [71] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = $1e -- _deref_pbuc1=vbuc2 
    lda #$1e
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // [72] phi from main::@4 main::enableVideoOutput1 to main::@4 [phi:main::@4/main::enableVideoOutput1->main::@4]
  __b3:
  // Infinite loop
    // main::@4
    jmp __b3
    // main::@2
  __b2:
    // PPU_NAME_TABLE_0+20*32+x
    // [73] ppuDataPutTile::ppuData#0 = PPU_NAME_TABLE_0+(word)$14*$20 + main::x#2 -- pbuz1=pbuc1_plus_vbuxx 
    txa
    clc
    adc #<PPU_NAME_TABLE_0+$14*$20
    sta.z ppuDataPutTile.ppuData
    lda #>PPU_NAME_TABLE_0+$14*$20
    adc #0
    sta.z ppuDataPutTile.ppuData+1
    // [74] ppuDataPutTile::ppuData#9 = (void* const)ppuDataPutTile::ppuData#0
    // ppuDataPutTile(PPU_NAME_TABLE_0+20*32+x, FLOOR)
    // [75] call ppuDataPutTile 
    // [106] phi from main::@2 to ppuDataPutTile [phi:main::@2->ppuDataPutTile]
    // [106] phi ppuDataPutTile::tile#10 = FLOOR [phi:main::@2->ppuDataPutTile#0] -- pbuz1=pbuc1 
    lda #<FLOOR
    sta.z ppuDataPutTile.tile
    lda #>FLOOR
    sta.z ppuDataPutTile.tile+1
    // [106] phi ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 [phi:main::@2->ppuDataPutTile#1] -- register_copy 
    jsr ppuDataPutTile
    // main::@8
    // x+=2
    // [76] main::x#1 = main::x#2 + 2 -- vbuxx=vbuxx_plus_2 
    inx
    inx
    // [64] phi from main::@8 to main::@1 [phi:main::@8->main::@1]
    // [64] phi main::x#2 = main::x#1 [phi:main::@8->main::@1#0] -- register_copy 
    jmp __b1
}
  // readJoy1
// Read Standard Controller #1
// Returns a byte representing the pushed buttons
// - bit 0: right
// - bit 1: left
// - bit 2: down
// - bit 3: up
// - bit 4: start
// - bit 5: select
// - bit 6: B
// - bit 7: A
readJoy1: {
    .label __1 = 8
    // APU->JOY1 = 1
    // [77] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1) = 1 -- _deref_pbuc1=vbuc2 
    // Latch the controller buttons
    lda #1
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // APU->JOY1 = 0
    // [78] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [79] phi from readJoy1 to readJoy1::@1 [phi:readJoy1->readJoy1::@1]
    // [79] phi readJoy1::joy#2 = 0 [phi:readJoy1->readJoy1::@1#0] -- vbuaa=vbuc1 
    // [79] phi readJoy1::i#2 = 0 [phi:readJoy1->readJoy1::@1#1] -- vbuxx=vbuc1 
    tax
    // readJoy1::@1
  __b1:
    // for(char i=0;i<8;i++)
    // [80] if(readJoy1::i#2<8) goto readJoy1::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #8
    bcc __b2
    // readJoy1::@return
    // }
    // [81] return 
    rts
    // readJoy1::@2
  __b2:
    // joy<<1
    // [82] readJoy1::$1 = readJoy1::joy#2 << 1 -- vbuz1=vbuaa_rol_1 
    asl
    sta.z __1
    // APU->JOY1&1
    // [83] readJoy1::$2 = *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1) & 1 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // joy = joy<<1 | APU->JOY1&1
    // [84] readJoy1::joy#1 = readJoy1::$1 | readJoy1::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // for(char i=0;i<8;i++)
    // [85] readJoy1::i#1 = ++ readJoy1::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [79] phi from readJoy1::@2 to readJoy1::@1 [phi:readJoy1::@2->readJoy1::@1]
    // [79] phi readJoy1::joy#2 = readJoy1::joy#1 [phi:readJoy1::@2->readJoy1::@1#0] -- register_copy 
    // [79] phi readJoy1::i#2 = readJoy1::i#1 [phi:readJoy1::@2->readJoy1::@1#1] -- register_copy 
    jmp __b1
}
  // ppuDataTransfer
// Transfer a number of bytes from the CPU memory to the PPU memory
// - ppuData : Pointer in the PPU memory
// - cpuData : Pointer to the CPU memory (RAM of ROM)
// - size : The number of bytes to transfer
ppuDataTransfer: {
    .const size = $20*SIZEOF_BYTE
    .label ppuData = PPU_PALETTE
    .label cpuData = PALETTE
    // Transfer to PPU
    .label cpuSrc = 6
    .label i = 4
    // ppuDataTransfer::ppuDataPrepare1
    // PPU->PPUADDR = >ppuData
    // [87] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = >ppuDataTransfer::ppuData#0 -- _deref_pbuc1=vbuc2 
    lda #>ppuData
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // PPU->PPUADDR = <ppuData
    // [88] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [89] phi from ppuDataTransfer::ppuDataPrepare1 to ppuDataTransfer::@1 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1]
    // [89] phi ppuDataTransfer::cpuSrc#2 = (byte*)ppuDataTransfer::cpuData#0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#0] -- pbuz1=pbuc1 
    lda #<cpuData
    sta.z cpuSrc
    lda #>cpuData
    sta.z cpuSrc+1
    // [89] phi ppuDataTransfer::i#2 = 0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
    // ppuDataTransfer::@1
  __b1:
    // for(unsigned int i=0;i<size;i++)
    // [90] if(ppuDataTransfer::i#2<ppuDataTransfer::size#0) goto ppuDataTransfer::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>size
    bcc __b2
    bne !+
    lda.z i
    cmp #<size
    bcc __b2
  !:
    // ppuDataTransfer::@return
    // }
    // [91] return 
    rts
    // ppuDataTransfer::@2
  __b2:
    // ppuDataPut(*cpuSrc++)
    // [92] ppuDataTransfer::ppuDataPut1_val#0 = *ppuDataTransfer::cpuSrc#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (cpuSrc),y
    // ppuDataTransfer::ppuDataPut1
    // PPU->PPUDATA = val
    // [93] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataTransfer::ppuDataPut1_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataTransfer::@3
    // ppuDataPut(*cpuSrc++);
    // [94] ppuDataTransfer::cpuSrc#1 = ++ ppuDataTransfer::cpuSrc#2 -- pbuz1=_inc_pbuz1 
    inc.z cpuSrc
    bne !+
    inc.z cpuSrc+1
  !:
    // for(unsigned int i=0;i<size;i++)
    // [95] ppuDataTransfer::i#1 = ++ ppuDataTransfer::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [89] phi from ppuDataTransfer::@3 to ppuDataTransfer::@1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1]
    // [89] phi ppuDataTransfer::cpuSrc#2 = ppuDataTransfer::cpuSrc#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#0] -- register_copy 
    // [89] phi ppuDataTransfer::i#2 = ppuDataTransfer::i#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#1] -- register_copy 
    jmp __b1
}
  // ppuDataFill
// Fill a number of bytes in the PPU memory
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
// ppuDataFill(byte register(X) val, word zp(6) size)
ppuDataFill: {
    .label ppuDataPrepare1_ppuData = 4
    .label i = 2
    .label size = 6
    // ppuDataFill::ppuDataPrepare1
    // >ppuData
    // [97] ppuDataFill::ppuDataPrepare1_$0 = > ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare1_ppuData+1
    // PPU->PPUADDR = >ppuData
    // [98] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataFill::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // <ppuData
    // [99] ppuDataFill::ppuDataPrepare1_$1 = < ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare1_ppuData
    // PPU->PPUADDR = <ppuData
    // [100] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataFill::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [101] phi from ppuDataFill::ppuDataPrepare1 to ppuDataFill::@1 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1]
    // [101] phi ppuDataFill::i#2 = 0 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
  // Transfer to PPU
    // ppuDataFill::@1
  __b1:
    // for(unsigned int i=0;i<size;i++)
    // [102] if(ppuDataFill::i#2<ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 -- vwuz1_lt_vwuz2_then_la1 
    lda.z i+1
    cmp.z size+1
    bcc ppuDataPut1
    bne !+
    lda.z i
    cmp.z size
    bcc ppuDataPut1
  !:
    // ppuDataFill::@return
    // }
    // [103] return 
    rts
    // ppuDataFill::ppuDataPut1
  ppuDataPut1:
    // PPU->PPUDATA = val
    // [104] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataFill::val#4 -- _deref_pbuc1=vbuxx 
    stx PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataFill::@2
    // for(unsigned int i=0;i<size;i++)
    // [105] ppuDataFill::i#1 = ++ ppuDataFill::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [101] phi from ppuDataFill::@2 to ppuDataFill::@1 [phi:ppuDataFill::@2->ppuDataFill::@1]
    // [101] phi ppuDataFill::i#2 = ppuDataFill::i#1 [phi:ppuDataFill::@2->ppuDataFill::@1#0] -- register_copy 
    jmp __b1
}
  // ppuDataPutTile
// Transfer a 2x2 tile into the PPU memory
// - ppuData : Pointer in the PPU memory
// - tile : The tile to transfer
// ppuDataPutTile(byte* zp(2) ppuData, byte* zp(4) tile)
ppuDataPutTile: {
    .label ppuDataPrepare2_ppuData = 2
    .label ppuData = 2
    .label tile = 4
    // ppuDataPutTile::ppuDataPrepare1
    // >ppuData
    // [107] ppuDataPutTile::ppuDataPrepare1_$0 = > ppuDataPutTile::ppuData#2 -- vbuaa=_hi_pvoz1 
    lda.z ppuData+1
    // PPU->PPUADDR = >ppuData
    // [108] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataPutTile::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // <ppuData
    // [109] ppuDataPutTile::ppuDataPrepare1_$1 = < ppuDataPutTile::ppuData#2 -- vbuaa=_lo_pvoz1 
    lda.z ppuData
    // PPU->PPUADDR = <ppuData
    // [110] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataPutTile::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // ppuDataPutTile::@1
    // ppuDataPut(tile[0])
    // [111] ppuDataPutTile::ppuDataPut1_val#0 = *ppuDataPutTile::tile#10 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (tile),y
    // ppuDataPutTile::ppuDataPut1
    // PPU->PPUDATA = val
    // [112] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataPutTile::ppuDataPut1_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataPutTile::@2
    // ppuDataPut(tile[1])
    // [113] ppuDataPutTile::ppuDataPut2_val#0 = ppuDataPutTile::tile#10[1] -- vbuaa=pbuz1_derefidx_vbuc1 
    ldy #1
    lda (tile),y
    // ppuDataPutTile::ppuDataPut2
    // PPU->PPUDATA = val
    // [114] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataPutTile::ppuDataPut2_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataPutTile::@3
    // (char*)ppuData+32
    // [115] ppuDataPutTile::ppuDataPrepare2_ppuData#0 = (byte*)ppuDataPutTile::ppuData#2 + $20 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$20
    clc
    adc.z ppuDataPrepare2_ppuData
    sta.z ppuDataPrepare2_ppuData
    bcc !+
    inc.z ppuDataPrepare2_ppuData+1
  !:
    // ppuDataPutTile::ppuDataPrepare2
    // >ppuData
    // [116] ppuDataPutTile::ppuDataPrepare2_$0 = > (void* const)ppuDataPutTile::ppuDataPrepare2_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare2_ppuData+1
    // PPU->PPUADDR = >ppuData
    // [117] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataPutTile::ppuDataPrepare2_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // <ppuData
    // [118] ppuDataPutTile::ppuDataPrepare2_$1 = < (void* const)ppuDataPutTile::ppuDataPrepare2_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare2_ppuData
    // PPU->PPUADDR = <ppuData
    // [119] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataPutTile::ppuDataPrepare2_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // ppuDataPutTile::@4
    // ppuDataPut(tile[2])
    // [120] ppuDataPutTile::ppuDataPut3_val#0 = ppuDataPutTile::tile#10[2] -- vbuaa=pbuz1_derefidx_vbuc1 
    ldy #2
    lda (tile),y
    // ppuDataPutTile::ppuDataPut3
    // PPU->PPUDATA = val
    // [121] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataPutTile::ppuDataPut3_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataPutTile::@5
    // ppuDataPut(tile[3])
    // [122] ppuDataPutTile::ppuDataPut4_val#0 = ppuDataPutTile::tile#10[3] -- vbuaa=pbuz1_derefidx_vbuc1 
    ldy #3
    lda (tile),y
    // ppuDataPutTile::ppuDataPut4
    // PPU->PPUDATA = val
    // [123] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataPutTile::ppuDataPut4_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataPutTile::@return
    // }
    // [124] return 
    rts
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
memcpy: {
    .const num = 8*SIZEOF_STRUCT_SPRITEDATA
    .label destination = SPRITE_BUFFER
    .label source = SPRITES
    .label src_end = source+num
    .label dst = 6
    .label src = 4
    // [126] phi from memcpy to memcpy::@1 [phi:memcpy->memcpy::@1]
    // [126] phi memcpy::dst#2 = (byte*)memcpy::destination#0 [phi:memcpy->memcpy::@1#0] -- pbuz1=pbuc1 
    lda #<destination
    sta.z dst
    lda #>destination
    sta.z dst+1
    // [126] phi memcpy::src#2 = (byte*)memcpy::source#0 [phi:memcpy->memcpy::@1#1] -- pbuz1=pbuc1 
    lda #<source
    sta.z src
    lda #>source
    sta.z src+1
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [127] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z src+1
    cmp #>src_end
    bne __b2
    lda.z src
    cmp #<src_end
    bne __b2
    // memcpy::@return
    // }
    // [128] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [129] *memcpy::dst#2 = *memcpy::src#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [130] memcpy::dst#1 = ++ memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [131] memcpy::src#1 = ++ memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [126] phi from memcpy::@2 to memcpy::@1 [phi:memcpy::@2->memcpy::@1]
    // [126] phi memcpy::dst#2 = memcpy::dst#1 [phi:memcpy::@2->memcpy::@1#0] -- register_copy 
    // [126] phi memcpy::src#2 = memcpy::src#1 [phi:memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // Flag tile
  FLAG: .byte $54, $55, $56, $57
  // Floor tile
  FLOOR: .byte $85, $85, $86, $86
  // Sprite Data
  SPRITES: .byte $96, $36, 2, $c, $96, $37, 2, $14, $9e, $38, 2, $c, $9e, $39, 2, $14, $96, $70, 0, $48, $96, $71, 0, $50, $9e, $72, 1, $48, $9e, $73, 1, $50
  // Color Palette
  PALETTE: .byte $11, $2d, 8, $18, $11, 6, $15, $36, $11, $39, $4a, $5b, $f, $3d, $4e, $5f, $11, $f, $30, 8, $11, $f, $18, 8, $11, $30, $37, $1a, $f, $f, $f, $f
.segment Tiles
TILES:
.import binary "smb1_chr.bin"

.segment GameRam
  .align $100
  SPRITE_BUFFER: .fill 4*$40, 0
.segment Vectors
  VECTORS: .word vblank, main, 0

