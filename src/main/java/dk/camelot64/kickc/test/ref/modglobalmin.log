byte cnt = 0;
byte[256] SCREEN=$0400;

void main() {
  inccnt();
  SCREEN[0]=cnt++;
  inccnt();
  SCREEN[1]=++cnt;
}

void inccnt() {
    ++cnt;
}




Adding pre/post-modifier (byte) cnt ← ++ (byte) cnt
Adding pre/post-modifier (byte) cnt ← ++ (byte) cnt
Adding pre/post-modifier (byte) cnt ← ++ (byte) cnt
PROGRAM
  (byte) cnt ← (byte) 0
  (byte[256]) SCREEN ← (word) 1024
proc (void()) main()
  (void~) main::$0 ← call inccnt 
  *((byte[256]) SCREEN + (byte) 0) ← (byte) cnt
  (byte) cnt ← ++ (byte) cnt
  (void~) main::$1 ← call inccnt 
  (byte) cnt ← ++ (byte) cnt
  *((byte[256]) SCREEN + (byte) 1) ← (byte) cnt
main::@return:
  return 
endproc // main()
proc (void()) inccnt()
  (byte) cnt ← ++ (byte) cnt
inccnt::@return:
  return 
endproc // inccnt()
  call main 

SYMBOLS
(byte[256]) SCREEN
(byte) cnt
(void()) inccnt()
(label) inccnt::@return
(void()) main()
(void~) main::$0
(void~) main::$1
(label) main::@return

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte) cnt ← (byte) 0
  (byte[256]) SCREEN ← (word) 1024
  to:@1
main: scope:[main]  from
  (void~) main::$0 ← call inccnt 
  *((byte[256]) SCREEN + (byte) 0) ← (byte) cnt
  (byte) cnt ← ++ (byte) cnt
  (void~) main::$1 ← call inccnt 
  (byte) cnt ← ++ (byte) cnt
  *((byte[256]) SCREEN + (byte) 1) ← (byte) cnt
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
inccnt: scope:[inccnt]  from
  (byte) cnt ← ++ (byte) cnt
  to:inccnt::@return
inccnt::@return: scope:[inccnt]  from inccnt
  return 
  to:@return
@2: scope:[]  from @1
  call main 
  to:@end
@end: scope:[]  from @2

Removing empty block @1
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte) cnt ← (byte) 0
  (byte[256]) SCREEN ← (word) 1024
  to:@2
main: scope:[main]  from
  (void~) main::$0 ← call inccnt 
  *((byte[256]) SCREEN + (byte) 0) ← (byte) cnt
  (byte) cnt ← ++ (byte) cnt
  (void~) main::$1 ← call inccnt 
  (byte) cnt ← ++ (byte) cnt
  *((byte[256]) SCREEN + (byte) 1) ← (byte) cnt
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
inccnt: scope:[inccnt]  from
  (byte) cnt ← ++ (byte) cnt
  to:inccnt::@return
inccnt::@return: scope:[inccnt]  from inccnt
  return 
  to:@return
@2: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @2

PROCEDURE MODIFY VARIABLE ANALYSIS
main modifies cnt
inccnt modifies cnt

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte) cnt ← (byte) 0
  (byte[256]) SCREEN ← (word) 1024
  to:@2
main: scope:[main]  from @2
  call inccnt param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte) cnt ← (byte) cnt
  *((byte[256]) SCREEN + (byte) 0) ← (byte) cnt
  (byte) cnt ← ++ (byte) cnt
  call inccnt param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) cnt ← (byte) cnt
  (byte) cnt ← ++ (byte) cnt
  *((byte[256]) SCREEN + (byte) 1) ← (byte) cnt
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte) cnt ← (byte) cnt
  return 
  to:@return
inccnt: scope:[inccnt]  from main main::@1
  (byte) cnt ← ++ (byte) cnt
  to:inccnt::@return
inccnt::@return: scope:[inccnt]  from inccnt
  (byte) cnt ← (byte) cnt
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  (byte) cnt ← (byte) cnt
  to:@end
@end: scope:[]  from @3

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) cnt#0 ← (byte) 0
  (byte[256]) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte[256]) SCREEN#3 ← phi( @2/(byte[256]) SCREEN#4 )
  (byte) cnt#15 ← phi( @2/(byte) cnt#16 )
  call inccnt param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte[256]) SCREEN#1 ← phi( main/(byte[256]) SCREEN#3 )
  (byte) cnt#9 ← phi( main/(byte) cnt#15 )
  (byte) cnt#1 ← (byte) cnt#9
  *((byte[256]) SCREEN#1 + (byte) 0) ← (byte) cnt#1
  (byte) cnt#2 ← ++ (byte) cnt#1
  call inccnt param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte[256]) SCREEN#2 ← phi( main::@1/(byte[256]) SCREEN#1 )
  (byte) cnt#10 ← phi( main::@1/(byte) cnt#2 )
  (byte) cnt#3 ← (byte) cnt#10
  (byte) cnt#4 ← ++ (byte) cnt#3
  *((byte[256]) SCREEN#2 + (byte) 1) ← (byte) cnt#4
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte) cnt#11 ← phi( main::@2/(byte) cnt#4 )
  (byte) cnt#5 ← (byte) cnt#11
  return 
  to:@return
inccnt: scope:[inccnt]  from main main::@1
  (byte) cnt#12 ← phi( main/(byte) cnt#15 main::@1/(byte) cnt#2 )
  (byte) cnt#6 ← ++ (byte) cnt#12
  to:inccnt::@return
inccnt::@return: scope:[inccnt]  from inccnt
  (byte) cnt#13 ← phi( inccnt/(byte) cnt#6 )
  (byte) cnt#7 ← (byte) cnt#13
  return 
  to:@return
@2: scope:[]  from @begin
  (byte[256]) SCREEN#4 ← phi( @begin/(byte[256]) SCREEN#0 )
  (byte) cnt#16 ← phi( @begin/(byte) cnt#0 )
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  (byte) cnt#14 ← phi( @2/(byte) cnt#16 )
  (byte) cnt#8 ← (byte) cnt#14
  to:@end
@end: scope:[]  from @3

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte) cnt#0 ← (byte) 0
  (byte[256]) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte[256]) SCREEN#3 ← phi( @2/(byte[256]) SCREEN#4 )
  (byte) cnt#15 ← phi( @2/(byte) cnt#16 )
  call inccnt param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte[256]) SCREEN#1 ← phi( main/(byte[256]) SCREEN#3 )
  (byte) cnt#9 ← phi( main/(byte) cnt#7 )
  (byte) cnt#1 ← (byte) cnt#9
  *((byte[256]) SCREEN#1 + (byte) 0) ← (byte) cnt#1
  (byte) cnt#2 ← ++ (byte) cnt#1
  call inccnt param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte[256]) SCREEN#2 ← phi( main::@1/(byte[256]) SCREEN#1 )
  (byte) cnt#10 ← phi( main::@1/(byte) cnt#7 )
  (byte) cnt#3 ← (byte) cnt#10
  (byte) cnt#4 ← ++ (byte) cnt#3
  *((byte[256]) SCREEN#2 + (byte) 1) ← (byte) cnt#4
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte) cnt#11 ← phi( main::@2/(byte) cnt#4 )
  (byte) cnt#5 ← (byte) cnt#11
  return 
  to:@return
inccnt: scope:[inccnt]  from main main::@1
  (byte) cnt#12 ← phi( main/(byte) cnt#15 main::@1/(byte) cnt#2 )
  (byte) cnt#6 ← ++ (byte) cnt#12
  to:inccnt::@return
inccnt::@return: scope:[inccnt]  from inccnt
  (byte) cnt#13 ← phi( inccnt/(byte) cnt#6 )
  (byte) cnt#7 ← (byte) cnt#13
  return 
  to:@return
@2: scope:[]  from @begin
  (byte[256]) SCREEN#4 ← phi( @begin/(byte[256]) SCREEN#0 )
  (byte) cnt#16 ← phi( @begin/(byte) cnt#0 )
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  (byte) cnt#14 ← phi( @2/(byte) cnt#5 )
  (byte) cnt#8 ← (byte) cnt#14
  to:@end
@end: scope:[]  from @3

INITIAL SSA SYMBOL TABLE
(label) @2
(label) @3
(label) @begin
(label) @end
(byte[256]) SCREEN
(byte[256]) SCREEN#0
(byte[256]) SCREEN#1
(byte[256]) SCREEN#2
(byte[256]) SCREEN#3
(byte[256]) SCREEN#4
(byte) cnt
(byte) cnt#0
(byte) cnt#1
(byte) cnt#10
(byte) cnt#11
(byte) cnt#12
(byte) cnt#13
(byte) cnt#14
(byte) cnt#15
(byte) cnt#16
(byte) cnt#2
(byte) cnt#3
(byte) cnt#4
(byte) cnt#5
(byte) cnt#6
(byte) cnt#7
(byte) cnt#8
(byte) cnt#9
(void()) inccnt()
(label) inccnt::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return

Alias (byte) cnt#0 = (byte) cnt#15 (byte) cnt#16 
Alias (byte[256]) SCREEN#0 = (byte[256]) SCREEN#3 (byte[256]) SCREEN#4 (byte[256]) SCREEN#1 (byte[256]) SCREEN#2 
Alias (byte) cnt#1 = (byte) cnt#9 (byte) cnt#7 (byte) cnt#10 (byte) cnt#3 (byte) cnt#13 (byte) cnt#6 
Alias (byte) cnt#11 = (byte) cnt#4 (byte) cnt#5 (byte) cnt#14 (byte) cnt#8 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte) cnt#0 ← (byte) 0
  (byte[256]) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  call inccnt param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  *((byte[256]) SCREEN#0 + (byte) 0) ← (byte) cnt#1
  (byte) cnt#2 ← ++ (byte) cnt#1
  call inccnt param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) cnt#11 ← ++ (byte) cnt#1
  *((byte[256]) SCREEN#0 + (byte) 1) ← (byte) cnt#11
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
inccnt: scope:[inccnt]  from main main::@1
  (byte) cnt#12 ← phi( main/(byte) cnt#0 main::@1/(byte) cnt#2 )
  (byte) cnt#1 ← ++ (byte) cnt#12
  to:inccnt::@return
inccnt::@return: scope:[inccnt]  from inccnt
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

Constant (const byte) cnt#0 = 0
Constant (const byte[256]) SCREEN#0 = 1024
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  call inccnt param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  *((const byte[256]) SCREEN#0 + (byte) 0) ← (byte) cnt#1
  (byte) cnt#2 ← ++ (byte) cnt#1
  call inccnt param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) cnt#11 ← ++ (byte) cnt#1
  *((const byte[256]) SCREEN#0 + (byte) 1) ← (byte) cnt#11
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
inccnt: scope:[inccnt]  from main main::@1
  (byte) cnt#12 ← phi( main/(const byte) cnt#0 main::@1/(byte) cnt#2 )
  (byte) cnt#1 ← ++ (byte) cnt#12
  to:inccnt::@return
inccnt::@return: scope:[inccnt]  from inccnt
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

Consolidated assigned array index constant in assignment *(SCREEN#0+0)
Consolidated assigned array index constant in assignment *(SCREEN#0+1)
Succesful SSA optimization Pass2ConstantAdditionElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  call inccnt param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  *((const byte[256]) SCREEN#0+(byte) 0) ← (byte) cnt#1
  (byte) cnt#2 ← ++ (byte) cnt#1
  call inccnt param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) cnt#11 ← ++ (byte) cnt#1
  *((const byte[256]) SCREEN#0+(byte) 1) ← (byte) cnt#11
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
inccnt: scope:[inccnt]  from main main::@1
  (byte) cnt#12 ← phi( main/(const byte) cnt#0 main::@1/(byte) cnt#2 )
  (byte) cnt#1 ← ++ (byte) cnt#12
  to:inccnt::@return
inccnt::@return: scope:[inccnt]  from inccnt
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

Culled Empty Block (label) @3
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  call inccnt param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  *((const byte[256]) SCREEN#0+(byte) 0) ← (byte) cnt#1
  (byte) cnt#2 ← ++ (byte) cnt#1
  call inccnt param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) cnt#11 ← ++ (byte) cnt#1
  *((const byte[256]) SCREEN#0+(byte) 1) ← (byte) cnt#11
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
inccnt: scope:[inccnt]  from main main::@1
  (byte) cnt#12 ← phi( main/(const byte) cnt#0 main::@1/(byte) cnt#2 )
  (byte) cnt#1 ← ++ (byte) cnt#12
  to:inccnt::@return
inccnt::@return: scope:[inccnt]  from inccnt
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Inlining constant with var siblings (const byte) cnt#0
Inlining constant with var siblings (const byte) cnt#0
Inlining constant with var siblings (const byte) cnt#0
Inlining constant with var siblings (const byte) cnt#0
Constant inlined cnt#0 = (byte) 0
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  call inccnt param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  *((const byte[256]) SCREEN#0+(byte) 0) ← (byte) cnt#1
  (byte) cnt#2 ← ++ (byte) cnt#1
  call inccnt param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) cnt#11 ← ++ (byte) cnt#1
  *((const byte[256]) SCREEN#0+(byte) 1) ← (byte) cnt#11
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
inccnt: scope:[inccnt]  from main main::@1
  (byte) cnt#12 ← phi( main/(byte) 0 main::@1/(byte) cnt#2 )
  (byte) cnt#1 ← ++ (byte) cnt#12
  to:inccnt::@return
inccnt::@return: scope:[inccnt]  from inccnt
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

FINAL SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(byte[256]) SCREEN
(const byte[256]) SCREEN#0 = (word) 1024
(byte) cnt
(byte) cnt#1
(byte) cnt#11
(byte) cnt#12
(byte) cnt#2
(void()) inccnt()
(label) inccnt::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return

Block Sequence Planned @begin @2 @end main main::@1 main::@2 main::@return inccnt inccnt::@return 
Block Sequence Planned @begin @2 @end main main::@1 main::@2 main::@return inccnt inccnt::@return 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2
main: scope:[main]  from @2
  call inccnt param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  *((const byte[256]) SCREEN#0+(byte) 0) ← (byte) cnt#1
  (byte) cnt#2 ← ++ (byte) cnt#1
  (byte~) cnt#17 ← (byte) cnt#2
  call inccnt param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) cnt#11 ← ++ (byte) cnt#1
  *((const byte[256]) SCREEN#0+(byte) 1) ← (byte) cnt#11
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
inccnt: scope:[inccnt]  from main main::@1
  (byte) cnt#12 ← phi( main/(byte) 0 main::@1/(byte~) cnt#17 )
  (byte) cnt#1 ← ++ (byte) cnt#12
  to:inccnt::@return
inccnt::@return: scope:[inccnt]  from inccnt
  return 
  to:@return

Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:0 
Calls in [main] to inccnt:2 inccnt:6 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @2
main: scope:[main]  from @2
  [1] phi() [ ]
  [2] call inccnt param-assignment [ cnt#1 ]
  to:main::@1
main::@1: scope:[main]  from main
  [3] *((const byte[256]) SCREEN#0+(byte) 0) ← (byte) cnt#1 [ cnt#1 ]
  [4] (byte) cnt#2 ← ++ (byte) cnt#1 [ cnt#2 ]
  [5] (byte~) cnt#17 ← (byte) cnt#2 [ cnt#17 ]
  [6] call inccnt param-assignment [ cnt#1 ]
  to:main::@2
main::@2: scope:[main]  from main::@1
  [7] (byte) cnt#11 ← ++ (byte) cnt#1 [ cnt#11 ]
  [8] *((const byte[256]) SCREEN#0+(byte) 1) ← (byte) cnt#11 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [9] return  [ ]
  to:@return
inccnt: scope:[inccnt]  from main main::@1
  [10] (byte) cnt#12 ← phi( main/(byte) 0 main::@1/(byte~) cnt#17 ) [ cnt#12 ]
  [11] (byte) cnt#1 ← ++ (byte) cnt#12 [ cnt#1 ]
  to:inccnt::@return
inccnt::@return: scope:[inccnt]  from inccnt
  [12] return  [ cnt#1 ]
  to:@return

Created 1 initial phi equivalence classes
Coalesced [5] cnt#17 ← cnt#2
Coalesced down to 1 phi equivalence classes
Block Sequence Planned @begin @2 @end main main::@1 main::@2 main::@return inccnt inccnt::@return 
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - BEFORE EFFECTIVE LIVE RANGES
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @2
main: scope:[main]  from @2
  [1] phi() [ ]
  [2] call inccnt param-assignment [ cnt#1 ]
  to:main::@1
main::@1: scope:[main]  from main
  [3] *((const byte[256]) SCREEN#0+(byte) 0) ← (byte) cnt#1 [ cnt#1 ]
  [4] (byte) cnt#2 ← ++ (byte) cnt#1 [ cnt#2 ]
  [5] call inccnt param-assignment [ cnt#1 ]
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] (byte) cnt#11 ← ++ (byte) cnt#1 [ cnt#11 ]
  [7] *((const byte[256]) SCREEN#0+(byte) 1) ← (byte) cnt#11 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [8] return  [ ]
  to:@return
inccnt: scope:[inccnt]  from main main::@1
  [9] (byte) cnt#12 ← phi( main/(byte) 0 main::@1/(byte) cnt#2 ) [ cnt#12 ]
  [10] (byte) cnt#1 ← ++ (byte) cnt#12 [ cnt#1 ]
  to:inccnt::@return
inccnt::@return: scope:[inccnt]  from inccnt
  [11] return  [ cnt#1 ]
  to:@return

CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  [0] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @2
main: scope:[main]  from @2
  [1] phi() [ ] ( main:0 [ ] )
  [2] call inccnt param-assignment [ cnt#1 ] ( main:0 [ cnt#1 ] )
  to:main::@1
main::@1: scope:[main]  from main
  [3] *((const byte[256]) SCREEN#0+(byte) 0) ← (byte) cnt#1 [ cnt#1 ] ( main:0 [ cnt#1 ] )
  [4] (byte) cnt#2 ← ++ (byte) cnt#1 [ cnt#2 ] ( main:0 [ cnt#2 ] )
  [5] call inccnt param-assignment [ cnt#1 ] ( main:0 [ cnt#1 ] )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] (byte) cnt#11 ← ++ (byte) cnt#1 [ cnt#11 ] ( main:0 [ cnt#11 ] )
  [7] *((const byte[256]) SCREEN#0+(byte) 1) ← (byte) cnt#11 [ ] ( main:0 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@2
  [8] return  [ ] ( main:0 [ ] )
  to:@return
inccnt: scope:[inccnt]  from main main::@1
  [9] (byte) cnt#12 ← phi( main/(byte) 0 main::@1/(byte) cnt#2 ) [ cnt#12 ] ( main:0::inccnt:2 [ cnt#12 ] main:0::inccnt:5 [ cnt#12 ] )
  [10] (byte) cnt#1 ← ++ (byte) cnt#12 [ cnt#1 ] ( main:0::inccnt:2 [ cnt#1 ] main:0::inccnt:5 [ cnt#1 ] )
  to:inccnt::@return
inccnt::@return: scope:[inccnt]  from inccnt
  [11] return  [ cnt#1 ] ( main:0::inccnt:2 [ cnt#1 ] main:0::inccnt:5 [ cnt#1 ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@2 dominated by  @2 @begin 
@end dominated by  @2 @end @begin 
main dominated by  @2 @begin main 
main::@1 dominated by  @2 @begin main::@1 main 
main::@2 dominated by  @2 @begin main::@2 main::@1 main 
main::@return dominated by  @2 main::@return @begin main::@2 main::@1 main 
inccnt dominated by  @2 inccnt @begin main 
inccnt::@return dominated by  inccnt::@return @2 inccnt @begin main 

NATURAL LOOPS

Found 0 loops in scope []
Found 0 loops in scope [main]
Found 0 loops in scope [inccnt]
NATURAL LOOPS WITH DEPTH


VARIABLE REGISTER WEIGHTS
(byte[256]) SCREEN
(byte) cnt
(byte) cnt#1 1.6
(byte) cnt#11 4.0
(byte) cnt#12 4.0
(byte) cnt#2 4.0
(void()) inccnt()
(void()) main()

Initial phi equivalence classes
[ cnt#12 cnt#2 ]
Added variable cnt#11 to zero page equivalence class [ cnt#11 ]
Added variable cnt#1 to zero page equivalence class [ cnt#1 ]
Complete equivalence classes
[ cnt#12 cnt#2 ]
[ cnt#11 ]
[ cnt#1 ]
Allocated zp ZP_BYTE:2 [ cnt#12 cnt#2 ]
Allocated zp ZP_BYTE:3 [ cnt#11 ]
Allocated zp ZP_BYTE:4 [ cnt#1 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .label cnt = 4
  .label cnt_2 = 2
  .label cnt_11 = 3
  .label cnt_12 = 2
//SEG2 @begin
bbegin:
  jmp b2
//SEG3 @2
b2:
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
  jmp bend
//SEG6 @end
bend:
//SEG7 main
main: {
  //SEG8 [2] call inccnt param-assignment [ cnt#1 ] ( main:0 [ cnt#1 ] )
  //SEG9 [9] phi from main to inccnt [phi:main->inccnt]
  inccnt_from_main:
  //SEG10 [9] phi (byte) cnt#12 = (byte) 0 [phi:main->inccnt#0] -- zpby1=coby1 
    lda #0
    sta cnt_12
    jsr inccnt
    jmp b1
  //SEG11 main::@1
  b1:
  //SEG12 [3] *((const byte[256]) SCREEN#0+(byte) 0) ← (byte) cnt#1 [ cnt#1 ] ( main:0 [ cnt#1 ] ) -- _star_cowo1=zpby1 
    lda cnt
    sta SCREEN+0
  //SEG13 [4] (byte) cnt#2 ← ++ (byte) cnt#1 [ cnt#2 ] ( main:0 [ cnt#2 ] ) -- zpby1=_inc_zpby2 
    lda cnt
    sta cnt_2
    inc cnt_2
  //SEG14 [5] call inccnt param-assignment [ cnt#1 ] ( main:0 [ cnt#1 ] )
  //SEG15 [9] phi from main::@1 to inccnt [phi:main::@1->inccnt]
  inccnt_from_b1:
  //SEG16 [9] phi (byte) cnt#12 = (byte) cnt#2 [phi:main::@1->inccnt#0] -- register_copy 
    jsr inccnt
    jmp b2
  //SEG17 main::@2
  b2:
  //SEG18 [6] (byte) cnt#11 ← ++ (byte) cnt#1 [ cnt#11 ] ( main:0 [ cnt#11 ] ) -- zpby1=_inc_zpby2 
    lda cnt
    sta cnt_11
    inc cnt_11
  //SEG19 [7] *((const byte[256]) SCREEN#0+(byte) 1) ← (byte) cnt#11 [ ] ( main:0 [ ] ) -- _star_cowo1=zpby1 
    lda cnt_11
    sta SCREEN+1
    jmp breturn
  //SEG20 main::@return
  breturn:
  //SEG21 [8] return  [ ] ( main:0 [ ] )
    rts
}
//SEG22 inccnt
inccnt: {
  //SEG23 [10] (byte) cnt#1 ← ++ (byte) cnt#12 [ cnt#1 ] ( main:0::inccnt:2 [ cnt#1 ] main:0::inccnt:5 [ cnt#1 ] ) -- zpby1=_inc_zpby2 
    lda cnt_12
    sta cnt
    inc cnt
    jmp breturn
  //SEG24 inccnt::@return
  breturn:
  //SEG25 [11] return  [ cnt#1 ] ( main:0::inccnt:2 [ cnt#1 ] main:0::inccnt:5 [ cnt#1 ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ cnt#12 cnt#2 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ cnt#11 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ cnt#1 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 8: zp ZP_BYTE:2 [ cnt#12 cnt#2 ] 4: zp ZP_BYTE:3 [ cnt#11 ] 1.6: zp ZP_BYTE:4 [ cnt#1 ] 
Uplift Scope [main] 
Uplift Scope [inccnt] 

Uplifting [] best 91 combination reg byte x [ cnt#12 cnt#2 ] reg byte x [ cnt#11 ] reg byte x [ cnt#1 ] 
Uplifting [main] best 91 combination 
Uplifting [inccnt] best 91 combination 
Removing instruction jmp b2
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
bbegin:
//SEG3 @2
b2:
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
  //SEG8 [2] call inccnt param-assignment [ cnt#1 ] ( main:0 [ cnt#1 ] )
  //SEG9 [9] phi from main to inccnt [phi:main->inccnt]
  inccnt_from_main:
  //SEG10 [9] phi (byte) cnt#12 = (byte) 0 [phi:main->inccnt#0] -- xby=coby1 
    ldx #0
    jsr inccnt
  //SEG11 main::@1
  b1:
  //SEG12 [3] *((const byte[256]) SCREEN#0+(byte) 0) ← (byte) cnt#1 [ cnt#1 ] ( main:0 [ cnt#1 ] ) -- _star_cowo1=xby 
    stx SCREEN+0
  //SEG13 [4] (byte) cnt#2 ← ++ (byte) cnt#1 [ cnt#2 ] ( main:0 [ cnt#2 ] ) -- xby=_inc_xby 
    inx
  //SEG14 [5] call inccnt param-assignment [ cnt#1 ] ( main:0 [ cnt#1 ] )
  //SEG15 [9] phi from main::@1 to inccnt [phi:main::@1->inccnt]
  inccnt_from_b1:
  //SEG16 [9] phi (byte) cnt#12 = (byte) cnt#2 [phi:main::@1->inccnt#0] -- register_copy 
    jsr inccnt
  //SEG17 main::@2
  b2:
  //SEG18 [6] (byte) cnt#11 ← ++ (byte) cnt#1 [ cnt#11 ] ( main:0 [ cnt#11 ] ) -- xby=_inc_xby 
    inx
  //SEG19 [7] *((const byte[256]) SCREEN#0+(byte) 1) ← (byte) cnt#11 [ ] ( main:0 [ ] ) -- _star_cowo1=xby 
    stx SCREEN+1
  //SEG20 main::@return
  breturn:
  //SEG21 [8] return  [ ] ( main:0 [ ] )
    rts
}
//SEG22 inccnt
inccnt: {
  //SEG23 [10] (byte) cnt#1 ← ++ (byte) cnt#12 [ cnt#1 ] ( main:0::inccnt:2 [ cnt#1 ] main:0::inccnt:5 [ cnt#1 ] ) -- xby=_inc_xby 
    inx
  //SEG24 inccnt::@return
  breturn:
  //SEG25 [11] return  [ cnt#1 ] ( main:0::inccnt:2 [ cnt#1 ] main:0::inccnt:5 [ cnt#1 ] )
    rts
}

Removing instruction bbegin:
Removing instruction main_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @2
b2:
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @2 to main [phi:@2->main]
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
  //SEG8 [2] call inccnt param-assignment [ cnt#1 ] ( main:0 [ cnt#1 ] )
  //SEG9 [9] phi from main to inccnt [phi:main->inccnt]
  inccnt_from_main:
  //SEG10 [9] phi (byte) cnt#12 = (byte) 0 [phi:main->inccnt#0] -- xby=coby1 
    ldx #0
    jsr inccnt
  //SEG11 main::@1
  b1:
  //SEG12 [3] *((const byte[256]) SCREEN#0+(byte) 0) ← (byte) cnt#1 [ cnt#1 ] ( main:0 [ cnt#1 ] ) -- _star_cowo1=xby 
    stx SCREEN+0
  //SEG13 [4] (byte) cnt#2 ← ++ (byte) cnt#1 [ cnt#2 ] ( main:0 [ cnt#2 ] ) -- xby=_inc_xby 
    inx
  //SEG14 [5] call inccnt param-assignment [ cnt#1 ] ( main:0 [ cnt#1 ] )
  //SEG15 [9] phi from main::@1 to inccnt [phi:main::@1->inccnt]
  inccnt_from_b1:
  //SEG16 [9] phi (byte) cnt#12 = (byte) cnt#2 [phi:main::@1->inccnt#0] -- register_copy 
    jsr inccnt
  //SEG17 main::@2
  b2:
  //SEG18 [6] (byte) cnt#11 ← ++ (byte) cnt#1 [ cnt#11 ] ( main:0 [ cnt#11 ] ) -- xby=_inc_xby 
    inx
  //SEG19 [7] *((const byte[256]) SCREEN#0+(byte) 1) ← (byte) cnt#11 [ ] ( main:0 [ ] ) -- _star_cowo1=xby 
    stx SCREEN+1
  //SEG20 main::@return
  breturn:
  //SEG21 [8] return  [ ] ( main:0 [ ] )
    rts
}
//SEG22 inccnt
inccnt: {
  //SEG23 [10] (byte) cnt#1 ← ++ (byte) cnt#12 [ cnt#1 ] ( main:0::inccnt:2 [ cnt#1 ] main:0::inccnt:5 [ cnt#1 ] ) -- xby=_inc_xby 
    inx
  //SEG24 inccnt::@return
  breturn:
  //SEG25 [11] return  [ cnt#1 ] ( main:0::inccnt:2 [ cnt#1 ] main:0::inccnt:5 [ cnt#1 ] )
    rts
}

Removing instruction b2:
Removing instruction bend:
Removing instruction inccnt_from_main:
Removing instruction b1:
Removing instruction inccnt_from_b1:
Removing instruction b2:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @2
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @2 to main [phi:@2->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] call inccnt param-assignment [ cnt#1 ] ( main:0 [ cnt#1 ] )
  //SEG9 [9] phi from main to inccnt [phi:main->inccnt]
  //SEG10 [9] phi (byte) cnt#12 = (byte) 0 [phi:main->inccnt#0] -- xby=coby1 
    ldx #0
    jsr inccnt
  //SEG11 main::@1
  //SEG12 [3] *((const byte[256]) SCREEN#0+(byte) 0) ← (byte) cnt#1 [ cnt#1 ] ( main:0 [ cnt#1 ] ) -- _star_cowo1=xby 
    stx SCREEN+0
  //SEG13 [4] (byte) cnt#2 ← ++ (byte) cnt#1 [ cnt#2 ] ( main:0 [ cnt#2 ] ) -- xby=_inc_xby 
    inx
  //SEG14 [5] call inccnt param-assignment [ cnt#1 ] ( main:0 [ cnt#1 ] )
  //SEG15 [9] phi from main::@1 to inccnt [phi:main::@1->inccnt]
  //SEG16 [9] phi (byte) cnt#12 = (byte) cnt#2 [phi:main::@1->inccnt#0] -- register_copy 
    jsr inccnt
  //SEG17 main::@2
  //SEG18 [6] (byte) cnt#11 ← ++ (byte) cnt#1 [ cnt#11 ] ( main:0 [ cnt#11 ] ) -- xby=_inc_xby 
    inx
  //SEG19 [7] *((const byte[256]) SCREEN#0+(byte) 1) ← (byte) cnt#11 [ ] ( main:0 [ ] ) -- _star_cowo1=xby 
    stx SCREEN+1
  //SEG20 main::@return
  //SEG21 [8] return  [ ] ( main:0 [ ] )
    rts
}
//SEG22 inccnt
inccnt: {
  //SEG23 [10] (byte) cnt#1 ← ++ (byte) cnt#12 [ cnt#1 ] ( main:0::inccnt:2 [ cnt#1 ] main:0::inccnt:5 [ cnt#1 ] ) -- xby=_inc_xby 
    inx
  //SEG24 inccnt::@return
  //SEG25 [11] return  [ cnt#1 ] ( main:0::inccnt:2 [ cnt#1 ] main:0::inccnt:5 [ cnt#1 ] )
    rts
}

FINAL SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(byte[256]) SCREEN
(const byte[256]) SCREEN#0 SCREEN = (word) 1024
(byte) cnt
(byte) cnt#1 reg byte x 1.6
(byte) cnt#11 reg byte x 4.0
(byte) cnt#12 reg byte x 4.0
(byte) cnt#2 reg byte x 4.0
(void()) inccnt()
(label) inccnt::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return

reg byte x [ cnt#12 cnt#2 ]
reg byte x [ cnt#11 ]
reg byte x [ cnt#1 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @2
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @2 to main [phi:@2->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] call inccnt param-assignment [ cnt#1 ] ( main:0 [ cnt#1 ] )
  //SEG9 [9] phi from main to inccnt [phi:main->inccnt]
  //SEG10 [9] phi (byte) cnt#12 = (byte) 0 [phi:main->inccnt#0] -- xby=coby1 
    ldx #0
    jsr inccnt
  //SEG11 main::@1
  //SEG12 [3] *((const byte[256]) SCREEN#0+(byte) 0) ← (byte) cnt#1 [ cnt#1 ] ( main:0 [ cnt#1 ] ) -- _star_cowo1=xby 
    stx SCREEN+0
  //SEG13 [4] (byte) cnt#2 ← ++ (byte) cnt#1 [ cnt#2 ] ( main:0 [ cnt#2 ] ) -- xby=_inc_xby 
    inx
  //SEG14 [5] call inccnt param-assignment [ cnt#1 ] ( main:0 [ cnt#1 ] )
  //SEG15 [9] phi from main::@1 to inccnt [phi:main::@1->inccnt]
  //SEG16 [9] phi (byte) cnt#12 = (byte) cnt#2 [phi:main::@1->inccnt#0] -- register_copy 
    jsr inccnt
  //SEG17 main::@2
  //SEG18 [6] (byte) cnt#11 ← ++ (byte) cnt#1 [ cnt#11 ] ( main:0 [ cnt#11 ] ) -- xby=_inc_xby 
    inx
  //SEG19 [7] *((const byte[256]) SCREEN#0+(byte) 1) ← (byte) cnt#11 [ ] ( main:0 [ ] ) -- _star_cowo1=xby 
    stx SCREEN+1
  //SEG20 main::@return
  //SEG21 [8] return  [ ] ( main:0 [ ] )
    rts
}
//SEG22 inccnt
inccnt: {
  //SEG23 [10] (byte) cnt#1 ← ++ (byte) cnt#12 [ cnt#1 ] ( main:0::inccnt:2 [ cnt#1 ] main:0::inccnt:5 [ cnt#1 ] ) -- xby=_inc_xby 
    inx
  //SEG24 inccnt::@return
  //SEG25 [11] return  [ cnt#1 ] ( main:0::inccnt:2 [ cnt#1 ] main:0::inccnt:5 [ cnt#1 ] )
    rts
}

