
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] call conio_c64_init
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [9] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [10] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [11] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [12] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/$19-1 )
  [13] gotoxy::y#2 = conio_c64_init::line#2
  [14] call gotoxy
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [15] return 
  to:@return

__stackcall void cputc(char c)
cputc: scope:[cputc]  from
  [16] cputc::c#0 = stackidx(char,cputc::OFFSET_STACK_C)
  [17] if(cputc::c#0=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [18] conio_line_text[conio_cursor_x] = cputc::c#0
  [19] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [20] conio_cursor_x = ++ conio_cursor_x
  [21] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [22] phi()
  [23] call cputln
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [24] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [25] phi()
  [26] call cputln
  to:cputc::@return

void main()
main: scope:[main]  from __start::@1
  [27] phi()
  [28] call clrscr
  to:main::@1
main::@1: scope:[main]  from main main::@8
  [29] main::pStar#2 = phi( main/stars, main::@8/main::pStar#1 )
  [29] main::i#2 = phi( main/0, main::@8/main::i#1 )
  [30] if(main::i#2<5) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [31] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [32] printf_uint::uvalue#0 = (unsigned int)main::pStar#2
  [33] call printf_uint
  to:main::@3
main::@3: scope:[main]  from main::@2
  [34] phi()
  [35] call printf_str
  to:main::@4
main::@4: scope:[main]  from main::@3
  [36] printf_uchar::uvalue#0 = *((char *)main::pStar#2)
  [37] call printf_uchar
  to:main::@5
main::@5: scope:[main]  from main::@4
  [38] phi()
  [39] call printf_str
  to:main::@6
main::@6: scope:[main]  from main::@5
  [40] printf_uchar::uvalue#1 = ((char *)main::pStar#2)[1]
  [41] call printf_uchar
  to:main::@7
main::@7: scope:[main]  from main::@6
  [42] phi()
  [43] call printf_str
  to:main::@8
main::@8: scope:[main]  from main::@7
  [44] main::pStar#1 = main::pStar#2 + 4
  [45] main::i#1 = ++ main::i#2
  to:main::@1

void gotoxy(char x , char y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1
  [46] if(gotoxy::y#2<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [47] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [48] gotoxy::y#4 = phi( gotoxy::@3/gotoxy::y#2, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [49] conio_cursor_x = gotoxy::x#2
  [50] conio_cursor_y = gotoxy::y#4
  [51] gotoxy::$7 = (unsigned int)gotoxy::y#4
  [52] gotoxy::$8 = gotoxy::$7 << 2
  [53] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [54] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [55] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [56] conio_line_text = gotoxy::$5
  [57] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [58] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [59] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [60] conio_line_text = conio_line_text + $28
  [61] conio_line_color = conio_line_color + $28
  [62] conio_cursor_x = 0
  [63] conio_cursor_y = ++ conio_cursor_y
  [64] call cscroll
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [65] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [66] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [67] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [67] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [67] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [68] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [69] conio_cursor_x = 0
  [70] conio_cursor_y = 0
  [71] conio_line_text = DEFAULT_SCREEN
  [72] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [73] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [74] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [75] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [76] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [77] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [78] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [79] clrscr::line_text#5[clrscr::c#2] = ' '
  [80] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE
  [81] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_uint: scope:[printf_uint]  from main::@2
  [82] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [83] *((char *)&printf_buffer) = 0
  [84] utoa::value#1 = printf_uint::uvalue#0
  [85] call utoa
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [86] printf_number_buffer::buffer_sign#0 = *((char *)&printf_buffer)
  [87] call printf_number_buffer
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [88] return 
  to:@return

void printf_str(void (*putc)(char) , const char *s)
printf_str: scope:[printf_str]  from main::@3 main::@5 main::@7 printf_number_buffer::@5
  [89] printf_str::putc#6 = phi( main::@3/&cputc, main::@5/&cputc, main::@7/&cputc, printf_number_buffer::@5/printf_str::putc#0 )
  [89] printf_str::s#6 = phi( main::@3/main::s, main::@5/main::s, main::@7/main::s2, printf_number_buffer::@5/(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@2
  [90] printf_str::s#5 = phi( printf_str/printf_str::s#6, printf_str::@2/printf_str::s#0 )
  [91] printf_str::c#1 = *printf_str::s#5
  [92] printf_str::s#0 = ++ printf_str::s#5
  [93] if(0!=printf_str::c#1) goto printf_str::@2
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@1
  [94] return 
  to:@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [95] stackpush(char) = printf_str::c#1
  [96] callexecute *printf_str::putc#6 
  sideeffect stackpullbytes(1)
  to:printf_str::@1

void printf_uchar(void (*putc)(char) , char uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_uchar: scope:[printf_uchar]  from main::@4 main::@6
  [98] printf_uchar::uvalue#2 = phi( main::@4/printf_uchar::uvalue#0, main::@6/printf_uchar::uvalue#1 )
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [99] *((char *)&printf_buffer) = 0
  [100] uctoa::value#1 = printf_uchar::uvalue#2
  [101] call uctoa
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [102] printf_number_buffer::buffer_sign#1 = *((char *)&printf_buffer)
  [103] call printf_number_buffer
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [104] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [105] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [106] phi()
  [107] call memcpy
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [108] phi()
  [109] call memcpy
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [110] phi()
  [111] call memset
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [112] phi()
  [113] call memset
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [114] conio_line_text = conio_line_text - $28
  [115] conio_line_color = conio_line_color - $28
  [116] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [117] return 
  to:@return

void utoa(unsigned int value , char *buffer , char radix)
utoa: scope:[utoa]  from printf_uint::@1
  [118] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [119] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [119] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [119] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#1 )
  [119] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [120] if(utoa::digit#2<utoa::max_digits#2-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [121] utoa::$11 = (char)utoa::value#2
  [122] *utoa::buffer#11 = DIGITS[utoa::$11]
  [123] utoa::buffer#3 = ++ utoa::buffer#11
  [124] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [125] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [126] utoa::$10 = utoa::digit#2 << 1
  [127] utoa::digit_value#0 = RADIX_HEXADECIMAL_VALUES[utoa::$10]
  [128] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [129] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [130] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [130] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [130] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [131] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [132] utoa_append::buffer#0 = utoa::buffer#11
  [133] utoa_append::value#0 = utoa::value#2
  [134] utoa_append::sub#0 = utoa::digit_value#0
  [135] call utoa_append
  [136] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [137] utoa::value#0 = utoa_append::return#0
  [138] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@2 printf_uint::@2
  [139] printf_number_buffer::format_upper_case#10 = phi( printf_uchar::@2/0, printf_uint::@2/printf_uint::format_upper_case#0 )
  [139] printf_number_buffer::putc#10 = phi( printf_uchar::@2/&cputc, printf_uint::@2/printf_uint::putc#0 )
  [139] printf_number_buffer::buffer_sign#10 = phi( printf_uchar::@2/printf_number_buffer::buffer_sign#1, printf_uint::@2/printf_number_buffer::buffer_sign#0 )
  [139] printf_number_buffer::format_zero_padding#10 = phi( printf_uchar::@2/0, printf_uint::@2/printf_uint::format_zero_padding#0 )
  [139] printf_number_buffer::format_justify_left#10 = phi( printf_uchar::@2/0, printf_uint::@2/printf_uint::format_justify_left#0 )
  [139] printf_number_buffer::format_min_length#2 = phi( printf_uchar::@2/0, printf_uint::@2/printf_uint::format_min_length#0 )
  [140] if(0==printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [141] phi()
  [142] call strlen
  [143] strlen::return#2 = strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [144] printf_number_buffer::$19 = strlen::return#2
  [145] printf_number_buffer::len#0 = (signed char)printf_number_buffer::$19
  [146] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [147] printf_number_buffer::len#1 = ++ printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [148] printf_number_buffer::len#2 = phi( printf_number_buffer::@14/printf_number_buffer::len#0, printf_number_buffer::@7/printf_number_buffer::len#1 )
  [149] printf_number_buffer::padding#1 = (signed char)printf_number_buffer::format_min_length#2 - printf_number_buffer::len#2
  [150] if(printf_number_buffer::padding#1>=0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [151] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [152] printf_number_buffer::padding#10 = phi( printf_number_buffer/0, printf_number_buffer::@21/printf_number_buffer::padding#1, printf_number_buffer::@13/0 )
  [153] if(0!=printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [154] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [155] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [156] printf_padding::putc#0 = printf_number_buffer::putc#10
  [157] printf_padding::length#0 = (char)printf_number_buffer::padding#10
  [158] call printf_padding
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [159] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [160] stackpush(char) = printf_number_buffer::buffer_sign#10
  [161] callexecute *printf_number_buffer::putc#10 
  sideeffect stackpullbytes(1)
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [163] if(0==printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [164] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [165] printf_padding::putc#1 = printf_number_buffer::putc#10
  [166] printf_padding::length#1 = (char)printf_number_buffer::padding#10
  [167] call printf_padding
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [168] if(0==printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [169] phi()
  [170] call strupr
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [171] printf_str::putc#0 = printf_number_buffer::putc#10
  [172] call printf_str
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [173] if(0==printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [174] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [175] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [176] printf_padding::putc#2 = printf_number_buffer::putc#10
  [177] printf_padding::length#2 = (char)printf_number_buffer::padding#10
  [178] call printf_padding
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [179] return 
  to:@return

void uctoa(char value , char *buffer , char radix)
uctoa: scope:[uctoa]  from printf_uchar::@1
  [180] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [181] uctoa::buffer#11 = phi( uctoa::@4/uctoa::buffer#14, uctoa/(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [181] uctoa::started#2 = phi( uctoa::@4/uctoa::started#4, uctoa/0 )
  [181] uctoa::value#2 = phi( uctoa::@4/uctoa::value#6, uctoa/uctoa::value#1 )
  [181] uctoa::digit#2 = phi( uctoa::@4/uctoa::digit#1, uctoa/0 )
  [182] if(uctoa::digit#2<3-1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [183] *uctoa::buffer#11 = DIGITS[uctoa::value#2]
  [184] uctoa::buffer#3 = ++ uctoa::buffer#11
  [185] *uctoa::buffer#3 = 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [186] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [187] uctoa::digit_value#0 = RADIX_DECIMAL_VALUES_CHAR[uctoa::digit#2]
  [188] if(0!=uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [189] if(uctoa::value#2>=uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [190] uctoa::buffer#14 = phi( uctoa::@7/uctoa::buffer#11, uctoa::@6/uctoa::buffer#4 )
  [190] uctoa::started#4 = phi( uctoa::@7/uctoa::started#2, uctoa::@6/1 )
  [190] uctoa::value#6 = phi( uctoa::@7/uctoa::value#2, uctoa::@6/uctoa::value#0 )
  [191] uctoa::digit#1 = ++ uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [192] uctoa_append::buffer#0 = uctoa::buffer#11
  [193] uctoa_append::value#0 = uctoa::value#2
  [194] uctoa_append::sub#0 = uctoa::digit_value#0
  [195] call uctoa_append
  [196] uctoa_append::return#0 = uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [197] uctoa::value#0 = uctoa_append::return#0
  [198] uctoa::buffer#4 = ++ uctoa::buffer#11
  to:uctoa::@4

void * memcpy(void *destination , void *source , unsigned int num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [199] memcpy::destination#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN, cscroll::@2/(void *)COLORRAM )
  [199] memcpy::source#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN+$28, cscroll::@2/(void *)COLORRAM+$28 )
  [200] memcpy::src_end#0 = (char *)memcpy::source#2 + (unsigned int)$19*$28-$28
  [201] memcpy::src#4 = (char *)memcpy::source#2
  [202] memcpy::dst#4 = (char *)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [203] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [203] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [204] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [205] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [206] *memcpy::dst#2 = *memcpy::src#2
  [207] memcpy::dst#1 = ++ memcpy::dst#2
  [208] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [209] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [209] memset::str#3 = phi( cscroll::@3/(void *)DEFAULT_SCREEN+(unsigned int)$19*$28-$28, cscroll::@4/(void *)COLORRAM+(unsigned int)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [210] memset::end#0 = (char *)memset::str#3 + $28
  [211] memset::dst#4 = (char *)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [212] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [213] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [214] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [215] *memset::dst#2 = memset::c#4
  [216] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [217] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [218] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [218] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [219] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [220] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [221] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [222] utoa_append::digit#1 = ++ utoa_append::digit#2
  [223] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

unsigned int strlen(char *str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [224] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [225] strlen::len#2 = phi( strlen/0, strlen::@2/strlen::len#1 )
  [225] strlen::str#2 = phi( strlen/(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS, strlen::@2/strlen::str#0 )
  [226] if(0!=*strlen::str#2) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [227] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [228] strlen::len#1 = ++ strlen::len#2
  [229] strlen::str#0 = ++ strlen::str#2
  to:strlen::@1

void printf_padding(void (*putc)(char) , char pad , char length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [230] printf_padding::putc#5 = phi( printf_number_buffer::@10/printf_padding::putc#1, printf_number_buffer::@12/printf_padding::putc#2, printf_number_buffer::@8/printf_padding::putc#0 )
  [230] printf_padding::pad#5 = phi( printf_number_buffer::@10/'0', printf_number_buffer::@12/' ', printf_number_buffer::@8/' ' )
  [230] printf_padding::length#4 = phi( printf_number_buffer::@10/printf_padding::length#1, printf_number_buffer::@12/printf_padding::length#2, printf_number_buffer::@8/printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [231] printf_padding::i#2 = phi( printf_padding/0, printf_padding::@3/printf_padding::i#1 )
  [232] if(printf_padding::i#2<printf_padding::length#4) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [233] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [234] stackpush(char) = printf_padding::pad#5
  [235] callexecute *printf_padding::putc#5 
  sideeffect stackpullbytes(1)
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [237] printf_padding::i#1 = ++ printf_padding::i#2
  to:printf_padding::@1

char * strupr(char *str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [238] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [239] strupr::src#2 = phi( strupr/strupr::str#0, strupr::@3/strupr::src#1 )
  [240] if(0!=*strupr::src#2) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [241] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [242] toupper::ch#0 = *strupr::src#2
  [243] call toupper
  [244] toupper::return#3 = toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [245] strupr::$0 = toupper::return#3
  [246] *strupr::src#2 = strupr::$0
  [247] strupr::src#1 = ++ strupr::src#2
  to:strupr::@1

char uctoa_append(char *buffer , char value , char sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [248] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [249] uctoa_append::digit#2 = phi( uctoa_append/0, uctoa_append::@2/uctoa_append::digit#1 )
  [249] uctoa_append::value#2 = phi( uctoa_append/uctoa_append::value#0, uctoa_append::@2/uctoa_append::value#1 )
  [250] if(uctoa_append::value#2>=uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [251] *uctoa_append::buffer#0 = DIGITS[uctoa_append::digit#2]
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [252] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [253] uctoa_append::digit#1 = ++ uctoa_append::digit#2
  [254] uctoa_append::value#1 = uctoa_append::value#2 - uctoa_append::sub#0
  to:uctoa_append::@1

char toupper(char ch)
toupper: scope:[toupper]  from strupr::@2
  [255] if(toupper::ch#0<'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [256] if(toupper::ch#0<='z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [257] toupper::return#0 = toupper::ch#0 + 'A'-'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [258] toupper::return#2 = phi( toupper::@1/toupper::return#0, toupper/toupper::ch#0, toupper::@2/toupper::ch#0 )
  [259] return 
  to:@return
