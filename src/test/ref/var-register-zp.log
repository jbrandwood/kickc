Inlined call call __init
Eliminating unused variable with no statement main::$1

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::i = 0
  main::j = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::$0 = main::i < 4
  if(main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::$2 = main::i * SIZEOF_INT
  SCREEN[main::$2] = main::j
  main::i = ++ main::i
  main::j = ++ main::j
  main::$4 = (int)main::i
  main::k#0 = main::$4 * 2
  main::$3 = main::i * SIZEOF_INT
  SCREEN[main::$3] = main::k#0
  main::i = ++ main::i
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
__constant int *SCREEN = (int *)$400
__constant char SIZEOF_INT = 2
void __start()
void main()
bool main::$0
char main::$2
char main::$3
int main::$4
__loadstore char main::i // !zp[-1]:2
__loadstore int main::j // !zp[-1]:4
int main::k
int main::k#0

Adding number conversion cast (unumber) 4 in main::$0 = main::i < 4
Adding number conversion cast (snumber) 2 in main::k#0 = main::$4 * 2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (int *) 1024
Simplifying constant integer cast 4
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 4
Finalized signed number type (signed char) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition main::$0 [3] if(main::i<4) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Rewriting multiplication to use shift [3] main::$2 = main::i * SIZEOF_INT
Rewriting multiplication to use shift [8] main::k#0 = main::$4 * 2
Rewriting multiplication to use shift [9] main::$3 = main::i * SIZEOF_INT
Successful SSA optimization Pass2MultiplyToShiftRewriting
Eliminating unused constant SIZEOF_INT
Successful SSA optimization PassNEliminateUnusedVars
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] main::i = 0
  [1] main::j = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [2] if(main::i<4) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [4] main::$2 = main::i << 1
  [5] SCREEN[main::$2] = main::j
  [6] main::i = ++ main::i
  [7] main::j = ++ main::j
  [8] main::$4 = (int)main::i
  [9] main::k#0 = main::$4 << 1
  [10] main::$3 = main::i << 1
  [11] SCREEN[main::$3] = main::k#0
  [12] main::i = ++ main::i
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
char main::$2 // 22.0
char main::$3 // 22.0
int main::$4 // 22.0
__loadstore char main::i // !zp[-1]:2 6.583333333333334
__loadstore int main::j // !zp[-1]:4 3.1818181818181817
int main::k
int main::k#0 // 11.0

Initial phi equivalence classes
Added variable main::i to live range equivalence class [ main::i ]
Added variable main::j to live range equivalence class [ main::j ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable main::$4 to live range equivalence class [ main::$4 ]
Added variable main::k#0 to live range equivalence class [ main::k#0 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Complete equivalence classes
[ main::i ]
[ main::j ]
[ main::$2 ]
[ main::$4 ]
[ main::k#0 ]
[ main::$3 ]
Allocated zp[1]:3 [ main::$2 ]
Allocated zp[2]:6 [ main::$4 ]
Allocated zp[2]:8 [ main::k#0 ]
Allocated zp[1]:10 [ main::$3 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] main::i = 0 [ main::i ] (  [ main::i ] { }  ) always clobbers reg byte a 
Statement [1] main::j = 0 [ main::i main::j ] (  [ main::i main::j ] { }  ) always clobbers reg byte a 
Statement [2] if(main::i<4) goto main::@2 [ main::i main::j ] (  [ main::i main::j ] { }  ) always clobbers reg byte a 
Statement [4] main::$2 = main::i << 1 [ main::i main::j main::$2 ] (  [ main::i main::j main::$2 ] { }  ) always clobbers reg byte a 
Statement [5] SCREEN[main::$2] = main::j [ main::i main::j ] (  [ main::i main::j ] { }  ) always clobbers reg byte a 
Statement [8] main::$4 = (int)main::i [ main::i main::j main::$4 ] (  [ main::i main::j main::$4 ] { }  ) always clobbers reg byte a 
Statement [9] main::k#0 = main::$4 << 1 [ main::i main::j main::k#0 ] (  [ main::i main::j main::k#0 ] { }  ) always clobbers reg byte a 
Statement [10] main::$3 = main::i << 1 [ main::i main::j main::k#0 main::$3 ] (  [ main::i main::j main::k#0 main::$3 ] { }  ) always clobbers reg byte a 
Statement [11] SCREEN[main::$3] = main::k#0 [ main::i main::j ] (  [ main::i main::j ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i ] : zp[1]:2 , 
Potential registers zp[2]:4 [ main::j ] : zp[2]:4 , 
Potential registers zp[1]:3 [ main::$2 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:6 [ main::$4 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ main::k#0 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ main::$3 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 22: zp[1]:3 [ main::$2 ] 22: zp[2]:6 [ main::$4 ] 22: zp[1]:10 [ main::$3 ] 11: zp[2]:8 [ main::k#0 ] 6.58: zp[1]:2 [ main::i ] 3.18: zp[2]:4 [ main::j ] 
Uplift Scope [] 

Uplifting [main] best 1114 combination reg byte a [ main::$2 ] zp[2]:6 [ main::$4 ] reg byte a [ main::$3 ] zp[2]:8 [ main::k#0 ] zp[1]:2 [ main::i ] zp[2]:4 [ main::j ] 
Uplifting [] best 1114 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::i ]
Uplifting [main] best 1114 combination zp[1]:2 [ main::i ] 
Coalescing zero page register [ zp[2]:6 [ main::$4 ] ] with [ zp[2]:8 [ main::k#0 ] ] - score: 1

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test declaring a variable as register on a specific ZP address
  // Upstart
  // Commodore 64 PRG executable file
.file [name="var-register-zp.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label i = 2
    .label j = 4
    .label __4 = 6
    .label k = 6
    // [0] main::i = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [1] main::j = 0 -- vwsz1=vwsc1 
    lda #<0
    sta.z j
    lda #>0
    sta.z j+1
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::i<4) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #4
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] main::$2 = main::i << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [5] SCREEN[main::$2] = main::j -- pwsc1_derefidx_vbuaa=vwsz1 
    tay
    lda.z j
    sta SCREEN,y
    lda.z j+1
    sta SCREEN+1,y
    // [6] main::i = ++ main::i -- vbuz1=_inc_vbuz1 
    inc.z i
    // [7] main::j = ++ main::j -- vwsz1=_inc_vwsz1 
    inc.z j
    bne !+
    inc.z j+1
  !:
    // [8] main::$4 = (int)main::i -- vwsz1=_sword_vbuz2 
    lda.z i
    sta.z __4
    lda #0
    sta.z __4+1
    // [9] main::k#0 = main::$4 << 1 -- vwsz1=vwsz1_rol_1 
    asl.z k
    rol.z k+1
    // [10] main::$3 = main::i << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [11] SCREEN[main::$3] = main::k#0 -- pwsc1_derefidx_vbuaa=vwsz1 
    tay
    lda.z k
    sta SCREEN,y
    lda.z k+1
    sta SCREEN+1,y
    // [12] main::i = ++ main::i -- vbuz1=_inc_vbuz1 
    inc.z i
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #<0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant int *SCREEN = (int *) 1024
void main()
char main::$2 // reg byte a 22.0
char main::$3 // reg byte a 22.0
int main::$4 // zp[2]:6 22.0
__loadstore char main::i // !zp[-1]:2 zp[1]:2 6.583333333333334
__loadstore int main::j // !zp[-1]:4 zp[2]:4 3.1818181818181817
int main::k
int main::k#0 // k zp[2]:6 11.0

zp[1]:2 [ main::i ]
zp[2]:4 [ main::j ]
reg byte a [ main::$2 ]
zp[2]:6 [ main::$4 main::k#0 ]
reg byte a [ main::$3 ]


FINAL ASSEMBLER
Score: 1017

  // File Comments
// Test declaring a variable as register on a specific ZP address
  // Upstart
  // Commodore 64 PRG executable file
.file [name="var-register-zp.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label i = 2
    .label j = 4
    .label __4 = 6
    .label k = 6
    // __address(0x2) char i=0
    // [0] main::i = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // __address(0x4) int j=0
    // [1] main::j = 0 -- vwsz1=vwsc1 
    sta.z j
    sta.z j+1
    // main::@1
  __b1:
    // while(i<4)
    // [2] if(main::i<4) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #4
    bcc __b2
    // main::@return
    // }
    // [3] return 
    rts
    // main::@2
  __b2:
    // SCREEN[i++] = j++
    // [4] main::$2 = main::i << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [5] SCREEN[main::$2] = main::j -- pwsc1_derefidx_vbuaa=vwsz1 
    tay
    lda.z j
    sta SCREEN,y
    lda.z j+1
    sta SCREEN+1,y
    // SCREEN[i++] = j++;
    // [6] main::i = ++ main::i -- vbuz1=_inc_vbuz1 
    inc.z i
    // [7] main::j = ++ main::j -- vwsz1=_inc_vwsz1 
    inc.z j
    bne !+
    inc.z j+1
  !:
    // int k = (int)i*2
    // [8] main::$4 = (int)main::i -- vwsz1=_sword_vbuz2 
    lda.z i
    sta.z __4
    lda #0
    sta.z __4+1
    // [9] main::k#0 = main::$4 << 1 -- vwsz1=vwsz1_rol_1 
    asl.z k
    rol.z k+1
    // SCREEN[i++] = k
    // [10] main::$3 = main::i << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [11] SCREEN[main::$3] = main::k#0 -- pwsc1_derefidx_vbuaa=vwsz1 
    tay
    lda.z k
    sta SCREEN,y
    lda.z k+1
    sta SCREEN+1,y
    // SCREEN[i++] = k;
    // [12] main::i = ++ main::i -- vbuz1=_inc_vbuz1 
    inc.z i
    jmp __b1
}
  // File Data

