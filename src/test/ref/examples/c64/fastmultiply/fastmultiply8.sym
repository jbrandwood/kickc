__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
signed char fmul8(volatile signed char aa , volatile signed char bb)
__loadstore volatile signed char fmul8::aa // zp[1]:12 33.666666666666664
__loadstore volatile signed char fmul8::bb // zp[1]:11 50.5
__loadstore volatile signed char fmul8::cc // zp[1]:7 1001.0
signed char fmul8::return
signed char fmul8::return#0 // reg byte a 202.0
signed char fmul8::return#1 // reg byte a 2002.0
signed char fmul8::return#2 // reg byte a 367.33333333333337
void init_screen()
char *init_screen::COLS
char *init_screen::COLS#1 // COLS zp[2]:2 67.33333333333333
char *init_screen::COLS#3 // COLS zp[2]:2 121.2
__constant char init_screen::WHITE = 1
char init_screen::l
char init_screen::l#1 // reg byte x 151.5
char init_screen::l#2 // reg byte x 151.5
char init_screen::m
char init_screen::m#1 // reg byte x 151.5
char init_screen::m#2 // reg byte x 33.666666666666664
void main()
char *main::at
char *main::at#1 // at zp[2]:17 7.333333333333333
char *main::at#12 // at_2 zp[2]:8 22.0
char *main::at#2 // at_1 zp[2]:13 2.3157894736842106
char *main::at#3 // at_2 zp[2]:8 27.545454545454547
char *main::at#4 // at zp[2]:17 8.25
char *main::at#6 // at_2 zp[2]:8 213.0
char *main::at_line
char *main::at_line#2 // at_line zp[2]:13 22.0
char main::i
char main::i#1 // i zp[1]:15 16.5
char main::i#2 // i zp[1]:15 7.444444444444445
char main::j
char main::j#1 // j zp[1]:10 151.5
char main::j#2 // j zp[1]:10 30.299999999999997
char main::k
char main::k#1 // k zp[1]:16 16.5
char main::k#2 // k zp[1]:16 6.6000000000000005
signed char main::r
signed char main::r#0 // reg byte a 202.0
void * memset(void *str , char c , unsigned int num)
char memset::c
__constant char memset::c#0 = ' ' // c
char *memset::dst
char *memset::dst#1 // dst zp[2]:4 20002.0
char *memset::dst#2 // dst zp[2]:4 13334.666666666666
char *memset::end
__constant char *memset::end#0 = (char *)memset::str#0+memset::num#0 // end
unsigned int memset::num
__constant unsigned int memset::num#0 = $3e8 // num
void *memset::return
void *memset::str
__constant void *memset::str#0 = (void *)print_screen#0 // str
__constant char mulf_sqr1[$200] = kickasm {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }
 }}
__constant char mulf_sqr2[$200] = kickasm {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }
 }}
void print_char_at(char ch , char *at)
char *print_char_at::at
char *print_char_at::at#0 // at zp[2]:2 2002.0
char *print_char_at::at#1 // at zp[2]:2 2002.0
char *print_char_at::at#2 // at zp[2]:2 20002.0
char *print_char_at::at#3 // at zp[2]:2 10001.0
char *print_char_at::at#4 // at zp[2]:2 122005.0
char print_char_at::ch
char print_char_at::ch#2 // reg byte x 10001.0
char print_char_at::ch#3 // reg byte x 20002.0
char print_char_at::ch#4 // reg byte x 120003.0
void print_cls()
__constant const char print_hextab[] = "0123456789abcdef"z
void print_schar_at(signed char b , char *at)
char *print_schar_at::at
char *print_schar_at::at#0 // at zp[2]:2 22.0
char *print_schar_at::at#1 // at zp[2]:2 22.0
char *print_schar_at::at#2 // at zp[2]:2 202.0
char *print_schar_at::at#3 // at zp[2]:2 390.75
signed char print_schar_at::b
signed char print_schar_at::b#0 // b zp[1]:6 2002.0
signed char print_schar_at::b#1 // b zp[1]:6 11.0
signed char print_schar_at::b#2 // b zp[1]:6 11.0
signed char print_schar_at::b#3 // b zp[1]:6 101.0
signed char print_schar_at::b#4 // b zp[1]:6 521.0
signed char print_schar_at::b#6 // b zp[1]:6 1001.0
char *print_screen
__constant char *print_screen#0 = (char *) 1024 // print_screen
void print_uchar_at(char b , char *at)
char print_uchar_at::$0 // reg byte a 20002.0
char print_uchar_at::$2 // reg byte y 10001.0
char *print_uchar_at::at
char *print_uchar_at::at#0 // at zp[2]:2 3000.4285714285716
char print_uchar_at::b
char print_uchar_at::b#0 // b zp[1]:6 4200.6
__constant signed char vals[] = { -$5f, -$40, -$20, -$10, 0, $10, $20, $40, $5f }

zp[1]:16 [ main::k#2 main::k#1 ]
zp[2]:17 [ main::at#4 main::at#1 ]
zp[2]:13 [ main::at_line#2 main::at#2 ]
zp[1]:15 [ main::i#2 main::i#1 ]
zp[2]:8 [ main::at#6 main::at#3 main::at#12 ]
zp[1]:10 [ main::j#2 main::j#1 ]
reg byte x [ init_screen::l#2 init_screen::l#1 ]
reg byte x [ init_screen::m#2 init_screen::m#1 ]
zp[2]:2 [ print_schar_at::at#3 print_schar_at::at#0 print_schar_at::at#1 print_schar_at::at#2 print_char_at::at#4 print_char_at::at#0 print_char_at::at#1 print_char_at::at#2 print_char_at::at#3 print_uchar_at::at#0 init_screen::COLS#3 init_screen::COLS#1 ]
zp[1]:6 [ print_schar_at::b#6 print_schar_at::b#0 print_schar_at::b#4 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 print_uchar_at::b#0 ]
reg byte x [ print_char_at::ch#4 print_char_at::ch#2 print_char_at::ch#3 ]
zp[2]:4 [ memset::dst#2 memset::dst#1 ]
zp[1]:12 [ fmul8::aa ]
zp[1]:11 [ fmul8::bb ]
reg byte a [ fmul8::return#0 ]
reg byte a [ main::r#0 ]
zp[1]:7 [ fmul8::cc ]
reg byte a [ fmul8::return#1 ]
reg byte a [ fmul8::return#2 ]
reg byte a [ print_uchar_at::$0 ]
reg byte y [ print_uchar_at::$2 ]
