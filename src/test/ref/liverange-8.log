Culled Empty Block (label) main::@2
Culled Empty Block (label) @1
Culled Empty Block (label) @2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) idx#0 ← (byte) 0
  to:@3

(void()) main()
main: scope:[main]  from @3
  (byte) idx#20 ← phi( @3/(byte) idx#19 )
  (byte) main::c#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) idx#17 ← phi( main/(byte) idx#20 main::@3/(byte) idx#1 )
  (byte) main::c#2 ← phi( main/(byte) main::c#0 main::@3/(byte) main::c#1 )
  (byte) out2::c#0 ← (byte) main::c#2
  call out2 
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::c#3 ← phi( main::@1/(byte) main::c#2 )
  (byte) idx#9 ← phi( main::@1/(byte) idx#5 )
  (byte) idx#1 ← (byte) idx#9
  (byte) main::c#1 ← (byte) main::c#3 + rangenext(0,$27)
  (bool~) main::$1 ← (byte) main::c#1 != rangelast(0,$27)
  if((bool~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  (byte) idx#10 ← phi( main::@3/(byte) idx#1 )
  (byte) idx#2 ← (byte) idx#10
  return 
  to:@return

(void()) out2((byte) out2::c)
out2: scope:[out2]  from main::@1
  (byte) idx#18 ← phi( main::@1/(byte) idx#17 )
  (byte) out2::c#1 ← phi( main::@1/(byte) out2::c#0 )
  (byte) out::c#0 ← (byte) out2::c#1
  call out 
  to:out2::@1
out2::@1: scope:[out2]  from out2
  (byte) out2::c#2 ← phi( out2/(byte) out2::c#1 )
  (byte) idx#11 ← phi( out2/(byte) idx#7 )
  (byte) idx#3 ← (byte) idx#11
  (byte) out::c#1 ← (byte) out2::c#2
  call out 
  to:out2::@2
out2::@2: scope:[out2]  from out2::@1
  (byte) idx#12 ← phi( out2::@1/(byte) idx#7 )
  (byte) idx#4 ← (byte) idx#12
  to:out2::@return
out2::@return: scope:[out2]  from out2::@2
  (byte) idx#13 ← phi( out2::@2/(byte) idx#4 )
  (byte) idx#5 ← (byte) idx#13
  return 
  to:@return

(void()) out((byte) out::c)
out: scope:[out]  from out2 out2::@1
  (byte) out::c#2 ← phi( out2/(byte) out::c#0 out2::@1/(byte) out::c#1 )
  (byte) idx#14 ← phi( out2/(byte) idx#18 out2::@1/(byte) idx#3 )
  (byte) idx#6 ← ++ (byte) idx#14
  *((const byte*) SCREEN + (byte) idx#6) ← (byte) out::c#2
  to:out::@return
out::@return: scope:[out]  from out
  (byte) idx#15 ← phi( out/(byte) idx#6 )
  (byte) idx#7 ← (byte) idx#15
  return 
  to:@return
@3: scope:[]  from @begin
  (byte) idx#19 ← phi( @begin/(byte) idx#0 )
  call main 
  to:@4
@4: scope:[]  from @3
  (byte) idx#16 ← phi( @3/(byte) idx#2 )
  (byte) idx#8 ← (byte) idx#16
  to:@end
@end: scope:[]  from @4

SYMBOL TABLE SSA
(label) @3
(label) @4
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*)(number) $400
(byte) idx
(byte) idx#0
(byte) idx#1
(byte) idx#10
(byte) idx#11
(byte) idx#12
(byte) idx#13
(byte) idx#14
(byte) idx#15
(byte) idx#16
(byte) idx#17
(byte) idx#18
(byte) idx#19
(byte) idx#2
(byte) idx#20
(byte) idx#3
(byte) idx#4
(byte) idx#5
(byte) idx#6
(byte) idx#7
(byte) idx#8
(byte) idx#9
(void()) main()
(bool~) main::$1
(label) main::@1
(label) main::@3
(label) main::@return
(byte) main::c
(byte) main::c#0
(byte) main::c#1
(byte) main::c#2
(byte) main::c#3
(void()) out((byte) out::c)
(label) out::@return
(byte) out::c
(byte) out::c#0
(byte) out::c#1
(byte) out::c#2
(void()) out2((byte) out2::c)
(label) out2::@1
(label) out2::@2
(label) out2::@return
(byte) out2::c
(byte) out2::c#0
(byte) out2::c#1
(byte) out2::c#2

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias main::c#2 = main::c#3 
Alias idx#1 = idx#9 idx#10 idx#2 
Alias out2::c#1 = out2::c#2 
Alias idx#11 = idx#3 
Alias idx#12 = idx#4 idx#13 idx#5 
Alias idx#15 = idx#6 idx#7 
Alias idx#0 = idx#19 
Alias idx#16 = idx#8 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) idx#20 (byte) idx#0
Identical Phi Values (byte) idx#1 (byte) idx#12
Identical Phi Values (byte) out2::c#1 (byte) out2::c#0
Identical Phi Values (byte) idx#18 (byte) idx#17
Identical Phi Values (byte) idx#11 (byte) idx#15
Identical Phi Values (byte) idx#12 (byte) idx#15
Identical Phi Values (byte) idx#16 (byte) idx#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$1 [9] if((byte) main::c#1!=rangelast(0,$27)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) idx#0 = 0
Constant (const byte) main::c#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [7] main::c#1 ← ++ main::c#2 to ++
Resolved ranged comparison value [9] if(main::c#1!=rangelast(0,$27)) goto main::@1 to (number) $28
Adding number conversion cast (unumber) $28 in if((byte) main::c#1!=(number) $28) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::c#0
Inlining constant with var siblings (const byte) idx#0
Constant inlined idx#0 = (byte) 0
Constant inlined main::c#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@4(between main::@3 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @4
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of out2::@2
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to out2:8 
Calls in [out2] to out:17 out:21 

Created 4 initial phi equivalence classes
Coalesced [12] main::c#4 ← main::c#1
Coalesced [13] idx#21 ← idx#15
Coalesced [15] idx#22 ← idx#17
Coalesced [16] out::c#3 ← out::c#0
Coalesced (already) [19] idx#23 ← idx#15
Coalesced [20] out::c#4 ← out::c#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) @4
Culled Empty Block (label) main::@4
Culled Empty Block (label) out2::@2
Renumbering block @3 to @1
Renumbering block main::@3 to main::@2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) idx#17 ← phi( main/(byte) 0 main::@2/(byte) idx#15 )
  [5] (byte) main::c#2 ← phi( main/(byte) 0 main::@2/(byte) main::c#1 )
  [6] (byte) out2::c#0 ← (byte) main::c#2
  [7] call out2 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] (byte) main::c#1 ← ++ (byte) main::c#2
  [9] if((byte) main::c#1!=(byte) $28) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return

(void()) out2((byte) out2::c)
out2: scope:[out2]  from main::@1
  [11] (byte) out::c#0 ← (byte) out2::c#0
  [12] call out 
  to:out2::@1
out2::@1: scope:[out2]  from out2
  [13] (byte) out::c#1 ← (byte) out2::c#0
  [14] call out 
  to:out2::@return
out2::@return: scope:[out2]  from out2::@1
  [15] return 
  to:@return

(void()) out((byte) out::c)
out: scope:[out]  from out2 out2::@1
  [16] (byte) out::c#2 ← phi( out2/(byte) out::c#0 out2::@1/(byte) out::c#1 )
  [16] (byte) idx#14 ← phi( out2/(byte) idx#17 out2::@1/(byte) idx#15 )
  [17] (byte) idx#15 ← ++ (byte) idx#14
  [18] *((const byte*) SCREEN + (byte) idx#15) ← (byte) out::c#2
  to:out::@return
out::@return: scope:[out]  from out
  [19] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) idx
(byte) idx#14 12003.0
(byte) idx#15 2110.4
(byte) idx#17 367.33333333333337
(void()) main()
(byte) main::c
(byte) main::c#1 151.5
(byte) main::c#2 101.0
(void()) out((byte) out::c)
(byte) out::c
(byte) out::c#0 2002.0
(byte) out::c#1 2002.0
(byte) out::c#2 6001.5
(void()) out2((byte) out2::c)
(byte) out2::c
(byte) out2::c#0 701.0

Initial phi equivalence classes
[ main::c#2 main::c#1 ]
[ idx#14 idx#17 idx#15 ]
[ out::c#2 out::c#0 out::c#1 ]
Added variable out2::c#0 to live range equivalence class [ out2::c#0 ]
Complete equivalence classes
[ main::c#2 main::c#1 ]
[ idx#14 idx#17 idx#15 ]
[ out::c#2 out::c#0 out::c#1 ]
[ out2::c#0 ]
Allocated zp[1]:2 [ main::c#2 main::c#1 ]
Allocated zp[1]:3 [ idx#14 idx#17 idx#15 ]
Allocated zp[1]:4 [ out::c#2 out::c#0 out::c#1 ]
Allocated zp[1]:5 [ out2::c#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test effective live range and register allocation
// Here main::c, out2::c and out::c can all have the same allocation - and the global idx can be allocated to a hardware register.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label idx = 3
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label c = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) idx#17 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [5] phi (byte) main::c#2 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b1
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) idx#17 = (byte) idx#15 [phi:main::@2->main::@1#0] -- register_copy 
    // [5] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte) out2::c#0 ← (byte) main::c#2 -- vbuz1=vbuz2 
    lda.z c
    sta.z out2.c
    // [7] call out2 
    jsr out2
    jmp __b2
    // main::@2
  __b2:
    // [8] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [9] if((byte) main::c#1!=(byte) $28) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z c
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // out2
// out2(byte zp(5) c)
out2: {
    .label c = 5
    // [11] (byte) out::c#0 ← (byte) out2::c#0 -- vbuz1=vbuz2 
    lda.z c
    sta.z out.c
    // [12] call out 
    // [16] phi from out2 to out [phi:out2->out]
  out_from_out2:
    // [16] phi (byte) out::c#2 = (byte) out::c#0 [phi:out2->out#0] -- register_copy 
    // [16] phi (byte) idx#14 = (byte) idx#17 [phi:out2->out#1] -- register_copy 
    jsr out
    jmp __b1
    // out2::@1
  __b1:
    // [13] (byte) out::c#1 ← (byte) out2::c#0 -- vbuz1=vbuz2 
    lda.z c
    sta.z out.c
    // [14] call out 
    // [16] phi from out2::@1 to out [phi:out2::@1->out]
  out_from___b1:
    // [16] phi (byte) out::c#2 = (byte) out::c#1 [phi:out2::@1->out#0] -- register_copy 
    // [16] phi (byte) idx#14 = (byte) idx#15 [phi:out2::@1->out#1] -- register_copy 
    jsr out
    jmp __breturn
    // out2::@return
  __breturn:
    // [15] return 
    rts
}
  // out
// out(byte zp(4) c)
out: {
    .label c = 4
    // [17] (byte) idx#15 ← ++ (byte) idx#14 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [18] *((const byte*) SCREEN + (byte) idx#15) ← (byte) out::c#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z c
    ldy.z idx
    sta SCREEN,y
    jmp __breturn
    // out::@return
  __breturn:
    // [19] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::c#2 main::c#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ idx#14 idx#17 idx#15 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ out::c#2 out::c#0 out::c#1 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ out2::c#0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 14,480.73: zp[1]:3 [ idx#14 idx#17 idx#15 ] 
Uplift Scope [out] 10,005.5: zp[1]:4 [ out::c#2 out::c#0 out::c#1 ] 
Uplift Scope [out2] 701: zp[1]:5 [ out2::c#0 ] 
Uplift Scope [main] 252.5: zp[1]:2 [ main::c#2 main::c#1 ] 

Uplifting [] best 508 combination reg byte x [ idx#14 idx#17 idx#15 ] 
Uplifting [out] best 499 combination reg byte a [ out::c#2 out::c#0 out::c#1 ] 
Uplifting [out2] best 467 combination reg byte y [ out2::c#0 ] 
Uplifting [main] best 467 combination zp[1]:2 [ main::c#2 main::c#1 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::c#2 main::c#1 ]
Uplifting [main] best 467 combination zp[1]:2 [ main::c#2 main::c#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test effective live range and register allocation
// Here main::c, out2::c and out::c can all have the same allocation - and the global idx can be allocated to a hardware register.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label c = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) idx#17 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte) main::c#2 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b1
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) idx#17 = (byte) idx#15 [phi:main::@2->main::@1#0] -- register_copy 
    // [5] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte) out2::c#0 ← (byte) main::c#2 -- vbuyy=vbuz1 
    ldy.z c
    // [7] call out2 
    jsr out2
    jmp __b2
    // main::@2
  __b2:
    // [8] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [9] if((byte) main::c#1!=(byte) $28) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z c
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // out2
// out2(byte register(Y) c)
out2: {
    // [11] (byte) out::c#0 ← (byte) out2::c#0 -- vbuaa=vbuyy 
    tya
    // [12] call out 
    // [16] phi from out2 to out [phi:out2->out]
  out_from_out2:
    // [16] phi (byte) out::c#2 = (byte) out::c#0 [phi:out2->out#0] -- register_copy 
    // [16] phi (byte) idx#14 = (byte) idx#17 [phi:out2->out#1] -- register_copy 
    jsr out
    jmp __b1
    // out2::@1
  __b1:
    // [13] (byte) out::c#1 ← (byte) out2::c#0 -- vbuaa=vbuyy 
    tya
    // [14] call out 
    // [16] phi from out2::@1 to out [phi:out2::@1->out]
  out_from___b1:
    // [16] phi (byte) out::c#2 = (byte) out::c#1 [phi:out2::@1->out#0] -- register_copy 
    // [16] phi (byte) idx#14 = (byte) idx#15 [phi:out2::@1->out#1] -- register_copy 
    jsr out
    jmp __breturn
    // out2::@return
  __breturn:
    // [15] return 
    rts
}
  // out
// out(byte register(A) c)
out: {
    // [17] (byte) idx#15 ← ++ (byte) idx#14 -- vbuxx=_inc_vbuxx 
    inx
    // [18] *((const byte*) SCREEN + (byte) idx#15) ← (byte) out::c#2 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    jmp __breturn
    // out::@return
  __breturn:
    // [19] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #0 with TXA
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction out_from_out2:
Removing instruction __b1:
Removing instruction out_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*) 1024
(byte) idx
(byte) idx#14 reg byte x 12003.0
(byte) idx#15 reg byte x 2110.4
(byte) idx#17 reg byte x 367.33333333333337
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::c
(byte) main::c#1 c zp[1]:2 151.5
(byte) main::c#2 c zp[1]:2 101.0
(void()) out((byte) out::c)
(label) out::@return
(byte) out::c
(byte) out::c#0 reg byte a 2002.0
(byte) out::c#1 reg byte a 2002.0
(byte) out::c#2 reg byte a 6001.5
(void()) out2((byte) out2::c)
(label) out2::@1
(label) out2::@return
(byte) out2::c
(byte) out2::c#0 reg byte y 701.0

zp[1]:2 [ main::c#2 main::c#1 ]
reg byte x [ idx#14 idx#17 idx#15 ]
reg byte a [ out::c#2 out::c#0 out::c#1 ]
reg byte y [ out2::c#0 ]


FINAL ASSEMBLER
Score: 326

  // File Comments
// Test effective live range and register allocation
// Here main::c, out2::c and out::c can all have the same allocation - and the global idx can be allocated to a hardware register.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label c = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) idx#17 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte) main::c#2 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    txa
    sta.z c
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [5] phi (byte) idx#17 = (byte) idx#15 [phi:main::@2->main::@1#0] -- register_copy 
    // [5] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@2->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // out2(c)
    // [6] (byte) out2::c#0 ← (byte) main::c#2 -- vbuyy=vbuz1 
    ldy.z c
    // [7] call out2 
    jsr out2
    // main::@2
    // for(char c: 0..39 )
    // [8] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [9] if((byte) main::c#1!=(byte) $28) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z c
    bne __b1
    // main::@return
    // }
    // [10] return 
    rts
}
  // out2
// out2(byte register(Y) c)
out2: {
    // out(c)
    // [11] (byte) out::c#0 ← (byte) out2::c#0 -- vbuaa=vbuyy 
    tya
    // [12] call out 
    // [16] phi from out2 to out [phi:out2->out]
    // [16] phi (byte) out::c#2 = (byte) out::c#0 [phi:out2->out#0] -- register_copy 
    // [16] phi (byte) idx#14 = (byte) idx#17 [phi:out2->out#1] -- register_copy 
    jsr out
    // out2::@1
    // out(c)
    // [13] (byte) out::c#1 ← (byte) out2::c#0 -- vbuaa=vbuyy 
    tya
    // [14] call out 
    // [16] phi from out2::@1 to out [phi:out2::@1->out]
    // [16] phi (byte) out::c#2 = (byte) out::c#1 [phi:out2::@1->out#0] -- register_copy 
    // [16] phi (byte) idx#14 = (byte) idx#15 [phi:out2::@1->out#1] -- register_copy 
    jsr out
    // out2::@return
    // }
    // [15] return 
    rts
}
  // out
// out(byte register(A) c)
out: {
    // idx++;
    // [17] (byte) idx#15 ← ++ (byte) idx#14 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx] = c
    // [18] *((const byte*) SCREEN + (byte) idx#15) ← (byte) out::c#2 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // out::@return
    // }
    // [19] return 
    rts
}
  // File Data

