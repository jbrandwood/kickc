
interrupt(KERNEL_MIN)(void()) irq()
irq: scope:[irq]  from
  [0] *((const nomodify byte*) BG_COLOR) ← ++ *((const nomodify byte*) BG_COLOR)
  [1] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  [2] if(*((const nomodify byte*) RASTER)<(byte) $32+(byte) 1) goto irq::@1
  to:irq::@2
irq::@2: scope:[irq]  from irq
  [3] phi()
  to:irq::@1
irq::@1: scope:[irq]  from irq irq::@2
  [4] *((const nomodify byte*) BG_COLOR) ← -- *((const nomodify byte*) BG_COLOR)
  to:irq::@return
irq::@return: scope:[irq]  from irq::@1
  [5] return 
  to:@return

(void()) main()
main: scope:[main]  from
  asm { sei  }
  [7] *((const nomodify byte*) CIA1_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR
  [8] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (byte) $7f
  [9] *((const nomodify byte*) RASTER) ← (byte) $fd
  [10] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER
  [11] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq()
  asm { cli  }
  to:main::@1
main::@1: scope:[main]  from main main::@1 main::@2
  [13] if(*((const nomodify byte*) RASTER)>=(byte) $14) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [14] phi()
  to:main::@1
