
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) print_screen#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@12
print_ln: scope:[print_ln]  from main::@5
  (byte*) print_char_cursor#39 ← phi( main::@5/(byte*) print_char_cursor#16 )
  (byte*) print_line_cursor#12 ← phi( main::@5/(byte*) print_line_cursor#13 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#20 ← phi( print_ln/(byte*) print_char_cursor#39 print_ln::@1/(byte*) print_char_cursor#20 )
  (byte*) print_line_cursor#6 ← phi( print_ln/(byte*) print_line_cursor#12 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#20
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#7 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#1 ← (byte*) print_line_cursor#7
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#21 ← phi( print_ln::@2/(byte*) print_char_cursor#1 )
  (byte*) print_line_cursor#8 ← phi( print_ln::@2/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#8
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#21
  return 
  to:@return
print_sword: scope:[print_sword]  from main::@1
  (byte*) print_char_cursor#46 ← phi( main::@1/(byte*) print_char_cursor#44 )
  (signed word) print_sword::w#2 ← phi( main::@1/(signed word) print_sword::w#1 )
  (bool~) print_sword::$0 ← (signed word) print_sword::w#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) print_sword::$1 ← ! (bool~) print_sword::$0
  if((bool~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@4
  (byte*) print_char_cursor#40 ← phi( print_sword/(byte*) print_char_cursor#46 print_sword::@4/(byte*) print_char_cursor#4 )
  (signed word) print_sword::w#3 ← phi( print_sword/(signed word) print_sword::w#2 print_sword::@4/(signed word) print_sword::w#0 )
  (word~) print_sword::$2 ← ((word)) (signed word) print_sword::w#3
  (word) print_word::w#0 ← (word~) print_sword::$2
  call print_word 
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword::@1
  (byte*) print_char_cursor#22 ← phi( print_sword::@1/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#22
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (signed word) print_sword::w#5 ← phi( print_sword/(signed word) print_sword::w#2 )
  (byte*) print_char_cursor#41 ← phi( print_sword/(byte*) print_char_cursor#46 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char 
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@2
  (signed word) print_sword::w#4 ← phi( print_sword::@2/(signed word) print_sword::w#5 )
  (byte*) print_char_cursor#23 ← phi( print_sword::@2/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#23
  (signed word~) print_sword::$5 ← - (signed word) print_sword::w#4
  (signed word) print_sword::w#0 ← (signed word~) print_sword::$5
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@3
  (byte*) print_char_cursor#24 ← phi( print_sword::@3/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#24
  return 
  to:@return
print_word: scope:[print_word]  from main::@4 print_sword::@1
  (byte*) print_char_cursor#42 ← phi( main::@4/(byte*) print_char_cursor#15 print_sword::@1/(byte*) print_char_cursor#40 )
  (word) print_word::w#2 ← phi( main::@4/(word) print_word::w#1 print_sword::@1/(word) print_word::w#0 )
  (byte~) print_word::$0 ← > (word) print_word::w#2
  (byte) print_byte::b#0 ← (byte~) print_word::$0
  call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#3 ← phi( print_word/(word) print_word::w#2 )
  (byte*) print_char_cursor#25 ← phi( print_word/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#25
  (byte~) print_word::$2 ← < (word) print_word::w#3
  (byte) print_byte::b#1 ← (byte~) print_word::$2
  call print_byte 
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) print_char_cursor#26 ← phi( print_word::@1/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#26
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) print_char_cursor#27 ← phi( print_word::@2/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#27
  return 
  to:@return
@12: scope:[]  from @begin
  (byte*) print_line_cursor#16 ← phi( @begin/(byte*) print_line_cursor#0 )
  (byte*) print_char_cursor#48 ← phi( @begin/(byte*) print_char_cursor#0 )
  (byte[]) print_hextab#0 ← (const string) $0
  to:@20
print_byte: scope:[print_byte]  from print_word print_word::@1
  (byte*) print_char_cursor#43 ← phi( print_word/(byte*) print_char_cursor#42 print_word::@1/(byte*) print_char_cursor#6 )
  (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) print_char::ch#1 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#3 ← phi( print_byte/(byte) print_byte::b#2 )
  (byte*) print_char_cursor#28 ← phi( print_byte/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#28
  (byte~) print_byte::$2 ← (byte) print_byte::b#3 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte) print_char::ch#2 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#29 ← phi( print_byte::@1/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#29
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#30 ← phi( print_byte::@2/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#30
  return 
  to:@return
print_char: scope:[print_char]  from main::@3 print_byte print_byte::@1 print_sword::@2
  (byte*) print_char_cursor#31 ← phi( main::@3/(byte*) print_char_cursor#14 print_byte/(byte*) print_char_cursor#43 print_byte::@1/(byte*) print_char_cursor#9 print_sword::@2/(byte*) print_char_cursor#41 )
  (byte) print_char::ch#4 ← phi( main::@3/(byte) print_char::ch#3 print_byte/(byte) print_char::ch#1 print_byte::@1/(byte) print_char::ch#2 print_sword::@2/(byte) print_char::ch#0 )
  *((byte*) print_char_cursor#31) ← (byte) print_char::ch#4
  (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#31
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#32 ← phi( print_char/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#32
  return 
  to:@return
main: scope:[main]  from @20
  (byte*) print_line_cursor#19 ← phi( @20/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#47 ← phi( @20/(byte*) print_char_cursor#45 )
  (signed word/signed dword~) main::$0 ← - (word/signed word/dword/signed dword) $3ff
  (signed word) main::a#0 ← (signed word/signed dword~) main::$0
  (word) main::b#0 ← (word/signed word/dword/signed dword) $1024
  (byte) main::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@6
  (byte) main::i#6 ← phi( main/(byte) main::i#0 main::@6/(byte) main::i#1 )
  (byte*) print_line_cursor#18 ← phi( main/(byte*) print_line_cursor#19 main::@6/(byte*) print_line_cursor#3 )
  (byte*) print_char_cursor#44 ← phi( main/(byte*) print_char_cursor#47 main::@6/(byte*) print_char_cursor#17 )
  (word) main::b#2 ← phi( main/(word) main::b#0 main::@6/(word) main::b#4 )
  (signed word) main::a#2 ← phi( main/(signed word) main::a#0 main::@6/(signed word) main::a#3 )
  (signed byte/signed word/signed dword~) main::$1 ← - (byte/signed byte/word/signed word/dword/signed dword) 7
  (signed word) main::a#1 ← (signed word) main::a#2 + (signed byte/signed word/signed dword~) main::$1
  (word) main::b#1 ← (word) main::b#2 + (word/signed word/dword/signed dword) $141
  (signed word) print_sword::w#1 ← (signed word) main::a#1
  call print_sword 
  to:main::@3
main::@3: scope:[main]  from main::@1
  (signed word) main::a#6 ← phi( main::@1/(signed word) main::a#1 )
  (byte) main::i#5 ← phi( main::@1/(byte) main::i#6 )
  (byte*) print_line_cursor#17 ← phi( main::@1/(byte*) print_line_cursor#18 )
  (word) main::b#5 ← phi( main::@1/(word) main::b#1 )
  (byte*) print_char_cursor#33 ← phi( main::@1/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#33
  (byte) print_char::ch#3 ← (byte) ' '
  call print_char 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (signed word) main::a#5 ← phi( main::@3/(signed word) main::a#6 )
  (byte) main::i#4 ← phi( main::@3/(byte) main::i#5 )
  (byte*) print_line_cursor#15 ← phi( main::@3/(byte*) print_line_cursor#17 )
  (word) main::b#3 ← phi( main::@3/(word) main::b#5 )
  (byte*) print_char_cursor#34 ← phi( main::@3/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#34
  (word) print_word::w#1 ← (word) main::b#3
  call print_word 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (word) main::b#6 ← phi( main::@4/(word) main::b#3 )
  (signed word) main::a#4 ← phi( main::@4/(signed word) main::a#5 )
  (byte) main::i#3 ← phi( main::@4/(byte) main::i#4 )
  (byte*) print_line_cursor#13 ← phi( main::@4/(byte*) print_line_cursor#15 )
  (byte*) print_char_cursor#35 ← phi( main::@4/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#35
  call print_ln 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (word) main::b#4 ← phi( main::@5/(word) main::b#6 )
  (signed word) main::a#3 ← phi( main::@5/(signed word) main::a#4 )
  (byte) main::i#2 ← phi( main::@5/(byte) main::i#3 )
  (byte*) print_char_cursor#36 ← phi( main::@5/(byte*) print_char_cursor#2 )
  (byte*) print_line_cursor#9 ← phi( main::@5/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_line_cursor#9
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#36
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,5)
  (bool~) main::$6 ← (byte) main::i#1 != rangelast(0,5)
  if((bool~) main::$6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@6
  (byte*) print_line_cursor#10 ← phi( main::@6/(byte*) print_line_cursor#3 )
  (byte*) print_char_cursor#37 ← phi( main::@6/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#37
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#10
  return 
  to:@return
@20: scope:[]  from @12
  (byte*) print_line_cursor#14 ← phi( @12/(byte*) print_line_cursor#16 )
  (byte*) print_char_cursor#45 ← phi( @12/(byte*) print_char_cursor#48 )
  call main 
  to:@21
@21: scope:[]  from @20
  (byte*) print_line_cursor#11 ← phi( @20/(byte*) print_line_cursor#4 )
  (byte*) print_char_cursor#38 ← phi( @20/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#38
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#11
  to:@end
@end: scope:[]  from @21

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"
(label) @12
(label) @20
(label) @21
(label) @begin
(label) @end
(void()) main()
(signed word/signed dword~) main::$0
(signed byte/signed word/signed dword~) main::$1
(bool~) main::$6
(label) main::@1
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(signed word) main::a
(signed word) main::a#0
(signed word) main::a#1
(signed word) main::a#2
(signed word) main::a#3
(signed word) main::a#4
(signed word) main::a#5
(signed word) main::a#6
(word) main::b
(word) main::b#0
(word) main::b#1
(word) main::b#2
(word) main::b#3
(word) main::b#4
(word) main::b#5
(word) main::b#6
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(byte~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#5
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#3
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(void()) print_sword((signed word) print_sword::w)
(bool~) print_sword::$0
(bool~) print_sword::$1
(word~) print_sword::$2
(signed word~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0
(signed word) print_sword::w#1
(signed word) print_sword::w#2
(signed word) print_sword::w#3
(signed word) print_sword::w#4
(signed word) print_sword::w#5
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(word) print_word::w#3

Inversing boolean not [17] (bool~) print_sword::$1 ← (signed word) print_sword::w#2 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from [16] (bool~) print_sword::$0 ← (signed word) print_sword::w#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) print_char_cursor#0 = (byte*) print_line_cursor#0 (byte*) print_screen#0 (byte*) print_char_cursor#48 (byte*) print_line_cursor#16 (byte*) print_char_cursor#45 (byte*) print_line_cursor#14 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#7 (byte*) print_char_cursor#1 (byte*) print_line_cursor#8 (byte*) print_char_cursor#21 (byte*) print_line_cursor#2 (byte*) print_char_cursor#2 
Alias (word) print_word::w#0 = (word~) print_sword::$2 
Alias (byte*) print_char_cursor#22 = (byte*) print_char_cursor#3 (byte*) print_char_cursor#24 (byte*) print_char_cursor#5 
Alias (byte*) print_char_cursor#41 = (byte*) print_char_cursor#46 
Alias (signed word) print_sword::w#2 = (signed word) print_sword::w#5 (signed word) print_sword::w#4 
Alias (byte*) print_char_cursor#23 = (byte*) print_char_cursor#4 
Alias (signed word) print_sword::w#0 = (signed word~) print_sword::$5 
Alias (byte) print_byte::b#0 = (byte~) print_word::$0 
Alias (word) print_word::w#2 = (word) print_word::w#3 
Alias (byte*) print_char_cursor#25 = (byte*) print_char_cursor#6 
Alias (byte) print_byte::b#1 = (byte~) print_word::$2 
Alias (byte*) print_char_cursor#26 = (byte*) print_char_cursor#7 (byte*) print_char_cursor#27 (byte*) print_char_cursor#8 
Alias (byte) print_byte::b#2 = (byte) print_byte::b#3 
Alias (byte*) print_char_cursor#28 = (byte*) print_char_cursor#9 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#29 (byte*) print_char_cursor#30 (byte*) print_char_cursor#11 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#32 (byte*) print_char_cursor#13 
Alias (signed word) main::a#0 = (signed word/signed dword~) main::$0 
Alias (word) main::b#1 = (word) main::b#5 (word) main::b#3 (word) main::b#6 (word) main::b#4 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#17 (byte*) print_line_cursor#18 (byte*) print_line_cursor#15 
Alias (byte) main::i#2 = (byte) main::i#5 (byte) main::i#6 (byte) main::i#4 (byte) main::i#3 
Alias (signed word) main::a#1 = (signed word) main::a#6 (signed word) main::a#5 (signed word) main::a#4 (signed word) main::a#3 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#33 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#34 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#35 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#3 (byte*) print_line_cursor#9 (byte*) print_line_cursor#4 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#36 (byte*) print_char_cursor#37 (byte*) print_char_cursor#18 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#38 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#5 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) print_char_cursor#20
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) print_line_cursor#12 (byte*) print_line_cursor#13
Redundant Phi (byte*) print_char_cursor#39 (byte*) print_char_cursor#16
Redundant Phi (byte*) print_char_cursor#20 (byte*) print_char_cursor#39
Redundant Phi (signed word) print_sword::w#2 (signed word) print_sword::w#1
Redundant Phi (byte*) print_char_cursor#41 (byte*) print_char_cursor#44
Redundant Phi (byte*) print_char_cursor#22 (byte*) print_char_cursor#26
Redundant Phi (byte*) print_char_cursor#23 (byte*) print_char_cursor#12
Redundant Phi (byte*) print_char_cursor#25 (byte*) print_char_cursor#10
Redundant Phi (byte*) print_char_cursor#26 (byte*) print_char_cursor#10
Redundant Phi (byte*) print_char_cursor#28 (byte*) print_char_cursor#12
Redundant Phi (byte*) print_char_cursor#10 (byte*) print_char_cursor#12
Redundant Phi (byte*) print_char_cursor#47 (byte*) print_char_cursor#0
Redundant Phi (byte*) print_line_cursor#19 (byte*) print_char_cursor#0
Redundant Phi (byte*) print_char_cursor#14 (byte*) print_char_cursor#22
Redundant Phi (byte*) print_char_cursor#15 (byte*) print_char_cursor#12
Redundant Phi (byte*) print_char_cursor#16 (byte*) print_char_cursor#26
Redundant Phi (byte*) print_line_cursor#10 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#17 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#19 (byte*) print_char_cursor#17
Redundant Phi (byte*) print_line_cursor#11 (byte*) print_line_cursor#10
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) print_ln::$1 [8] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1
Simple Condition (bool~) print_sword::$1 [18] if((signed word) print_sword::w#1>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1
Simple Condition (bool~) main::$6 [98] if((byte) main::i#1!=rangelast(0,5)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print_char_cursor#0 = ((byte*))$400
Constant (const byte) print_char::ch#0 = '-'
Constant (const byte[]) print_hextab#0 = $0
Constant (const signed word) main::a#0 = -$3ff
Constant (const word) main::b#0 = $1024
Constant (const byte) main::i#0 = 0
Constant (const signed byte/signed word/signed dword) main::$1 = -7
Constant (const byte) print_char::ch#3 = ' '
Successful SSA optimization Pass2ConstantIdentification
Eliminating Noop Cast (word) print_word::w#0 ← ((word)) (signed word) print_sword::w#3
Successful SSA optimization Pass2NopCastElimination
Resolved ranged next value main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value if(main::i#1!=rangelast(0,5)) goto main::@1 to (byte/signed byte/word/signed word/dword/signed dword) 6
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_sword::@3
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) @12
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) @21
Successful SSA optimization Pass2CullEmptyBlocks
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#3
Inlining constant with var siblings (const signed word) main::a#0
Inlining constant with var siblings (const word) main::b#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte*) print_char_cursor#0
Constant inlined print_char::ch#3 = (byte) ' '
Constant inlined main::a#0 = -(word/signed word/dword/signed dword) $3ff
Constant inlined print_char_cursor#0 = ((byte*))(word/signed word/dword/signed dword) $400
Constant inlined main::b#0 = (word/signed word/dword/signed dword) $1024
Constant inlined main::$1 = -(byte/signed byte/word/signed word/dword/signed dword) 7
Constant inlined print_char::ch#0 = (byte) '-'
Constant inlined main::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined $0 = (const byte[]) print_hextab#0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@7(between main::@6 and main::@1)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting print_sword::@5(between print_sword and print_sword::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @20
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@5
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to print_sword:9 print_char:11 print_word:15 print_ln:17 
Calls in [print_word] to print_byte:36 print_byte:40 
Calls in [print_byte] to print_char:47 print_char:52 
Calls in [print_sword] to print_char:60 print_word:67 

Created 14 initial phi equivalence classes
Coalesced [10] print_char_cursor#54 ← print_char_cursor#12
Coalesced [13] print_word::w#4 ← print_word::w#1
Coalesced [14] print_char_cursor#50 ← print_char_cursor#12
Coalesced [21] main::a#7 ← main::a#1
Coalesced [22] main::b#7 ← main::b#1
Not coalescing [23] print_char_cursor#49 ← print_line_cursor#1
Coalesced [24] print_line_cursor#20 ← print_line_cursor#1
Coalesced [25] main::i#7 ← main::i#1
Coalesced [26] print_line_cursor#21 ← print_line_cursor#13
Coalesced (already) [31] print_line_cursor#22 ← print_line_cursor#1
Coalesced [34] print_byte::b#4 ← print_byte::b#0
Coalesced [35] print_char_cursor#52 ← print_char_cursor#42
Coalesced [38] print_byte::b#5 ← print_byte::b#1
Coalesced (already) [39] print_char_cursor#53 ← print_char_cursor#12
Coalesced [45] print_char::ch#5 ← print_char::ch#1
Coalesced (already) [46] print_char_cursor#55 ← print_char_cursor#43
Coalesced [50] print_char::ch#6 ← print_char::ch#2
Coalesced (already) [51] print_char_cursor#56 ← print_char_cursor#12
Coalesced [59] print_char_cursor#57 ← print_char_cursor#44
Coalesced [62] print_sword::w#7 ← print_sword::w#0
Coalesced [63] print_char_cursor#59 ← print_char_cursor#12
Coalesced (already) [66] print_char_cursor#51 ← print_char_cursor#40
Coalesced [69] print_sword::w#6 ← print_sword::w#1
Coalesced (already) [70] print_char_cursor#58 ← print_char_cursor#44
Coalesced down to 9 phi equivalence classes
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_sword::@5
Renumbering block @20 to @1
Renumbering block print_sword::@4 to print_sword::@3
Renumbering block main::@3 to main::@2
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Renumbering block main::@7 to main::@6
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_sword::@2

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@6
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@6/(byte) main::i#1 )
  [5] (byte*) print_line_cursor#13 ← phi( main/((byte*))(word/signed word/dword/signed dword) $400 main::@6/(byte*) print_line_cursor#1 )
  [5] (byte*) print_char_cursor#44 ← phi( main/((byte*))(word/signed word/dword/signed dword) $400 main::@6/(byte*~) print_char_cursor#49 )
  [5] (word) main::b#2 ← phi( main/(word/signed word/dword/signed dword) $1024 main::@6/(word) main::b#1 )
  [5] (signed word) main::a#2 ← phi( main/-(word/signed word/dword/signed dword) $3ff main::@6/(signed word) main::a#1 )
  [6] (signed word) main::a#1 ← (signed word) main::a#2 + -(byte/signed byte/word/signed word/dword/signed dword) 7
  [7] (word) main::b#1 ← (word) main::b#2 + (word/signed word/dword/signed dword) $141
  [8] (signed word) print_sword::w#1 ← (signed word) main::a#1
  [9] call print_sword 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [10] phi()
  [11] call print_char 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [12] (word) print_word::w#1 ← (word) main::b#1
  [13] call print_word 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [14] phi()
  [15] call print_ln 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [16] (byte) main::i#1 ← ++ (byte) main::i#2
  [17] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto main::@6
  to:main::@return
main::@return: scope:[main]  from main::@5
  [18] return 
  to:@return
main::@6: scope:[main]  from main::@5
  [19] (byte*~) print_char_cursor#49 ← (byte*) print_line_cursor#1
  to:main::@1
print_ln: scope:[print_ln]  from main::@4
  [20] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [21] (byte*) print_line_cursor#6 ← phi( print_ln/(byte*) print_line_cursor#13 print_ln::@1/(byte*) print_line_cursor#1 )
  [22] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) $28
  [23] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [24] return 
  to:@return
print_word: scope:[print_word]  from main::@3 print_sword::@1
  [25] (byte*) print_char_cursor#42 ← phi( main::@3/(byte*) print_char_cursor#12 print_sword::@1/(byte*) print_char_cursor#40 )
  [25] (word) print_word::w#2 ← phi( main::@3/(word) print_word::w#1 print_sword::@1/(word~) print_word::w#5 )
  [26] (byte) print_byte::b#0 ← > (word) print_word::w#2
  [27] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [28] (byte) print_byte::b#1 ← < (word) print_word::w#2
  [29] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [30] return 
  to:@return
print_byte: scope:[print_byte]  from print_word print_word::@1
  [31] (byte*) print_char_cursor#43 ← phi( print_word/(byte*) print_char_cursor#42 print_word::@1/(byte*) print_char_cursor#12 )
  [31] (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  [32] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [33] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [34] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [35] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [36] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [37] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [38] return 
  to:@return
print_char: scope:[print_char]  from main::@2 print_byte print_byte::@1 print_sword::@2
  [39] (byte*) print_char_cursor#31 ← phi( main::@2/(byte*) print_char_cursor#12 print_byte/(byte*) print_char_cursor#43 print_byte::@1/(byte*) print_char_cursor#12 print_sword::@2/(byte*) print_char_cursor#44 )
  [39] (byte) print_char::ch#4 ← phi( main::@2/(byte) ' ' print_byte/(byte) print_char::ch#1 print_byte::@1/(byte) print_char::ch#2 print_sword::@2/(byte) '-' )
  [40] *((byte*) print_char_cursor#31) ← (byte) print_char::ch#4
  [41] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#31
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [42] return 
  to:@return
print_sword: scope:[print_sword]  from main::@1
  [43] if((signed word) print_sword::w#1>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword
  [44] phi()
  [45] call print_char 
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword::@2
  [46] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1
  to:print_sword::@1
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@3
  [47] (byte*) print_char_cursor#40 ← phi( print_sword/(byte*) print_char_cursor#44 print_sword::@3/(byte*) print_char_cursor#12 )
  [47] (signed word) print_sword::w#3 ← phi( print_sword/(signed word) print_sword::w#1 print_sword::@3/(signed word) print_sword::w#0 )
  [48] (word~) print_word::w#5 ← (word)(signed word) print_sword::w#3
  [49] call print_word 
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@1
  [50] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(signed word) main::a
(signed word) main::a#1 2.5384615384615383
(signed word) main::a#2 22.0
(word) main::b
(word) main::b#1 2.75
(word) main::b#2 11.0
(byte) main::i
(byte) main::i#1 11.0
(byte) main::i#2 2.0
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 2.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#1 4.0
(byte) print_char::ch#2 4.0
(byte) print_char::ch#4 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#12 5.240000000000001
(byte*) print_char_cursor#31 10.5
(byte*) print_char_cursor#40 3.0
(byte*) print_char_cursor#42 7.5
(byte*) print_char_cursor#43 2.0
(byte*) print_char_cursor#44 2.5
(byte*~) print_char_cursor#49 22.0
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#1 46.42857142857143
(byte*) print_line_cursor#13 1.1818181818181819
(byte*) print_line_cursor#6 204.0
(void()) print_ln()
(byte*) print_screen
(void()) print_sword((signed word) print_sword::w)
(signed word) print_sword::w
(signed word) print_sword::w#0 4.0
(signed word) print_sword::w#1 4.25
(signed word) print_sword::w#3 4.0
(void()) print_word((word) print_word::w)
(word) print_word::w
(word) print_word::w#1 22.0
(word) print_word::w#2 5.666666666666667
(word~) print_word::w#5 4.0

Initial phi equivalence classes
[ main::a#2 main::a#1 ]
[ main::b#2 main::b#1 ]
[ main::i#2 main::i#1 ]
[ print_line_cursor#6 print_line_cursor#13 print_line_cursor#1 ]
[ print_word::w#2 print_word::w#1 print_word::w#5 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#4 print_char::ch#1 print_char::ch#2 ]
[ print_char_cursor#31 print_char_cursor#43 print_char_cursor#42 print_char_cursor#12 print_char_cursor#40 print_char_cursor#44 print_char_cursor#49 ]
[ print_sword::w#3 print_sword::w#1 print_sword::w#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Complete equivalence classes
[ main::a#2 main::a#1 ]
[ main::b#2 main::b#1 ]
[ main::i#2 main::i#1 ]
[ print_line_cursor#6 print_line_cursor#13 print_line_cursor#1 ]
[ print_word::w#2 print_word::w#1 print_word::w#5 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#4 print_char::ch#1 print_char::ch#2 ]
[ print_char_cursor#31 print_char_cursor#43 print_char_cursor#42 print_char_cursor#12 print_char_cursor#40 print_char_cursor#44 print_char_cursor#49 ]
[ print_sword::w#3 print_sword::w#1 print_sword::w#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
Allocated zp ZP_WORD:2 [ main::a#2 main::a#1 ]
Allocated zp ZP_WORD:4 [ main::b#2 main::b#1 ]
Allocated zp ZP_BYTE:6 [ main::i#2 main::i#1 ]
Allocated zp ZP_WORD:7 [ print_line_cursor#6 print_line_cursor#13 print_line_cursor#1 ]
Allocated zp ZP_WORD:9 [ print_word::w#2 print_word::w#1 print_word::w#5 ]
Allocated zp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated zp ZP_BYTE:12 [ print_char::ch#4 print_char::ch#1 print_char::ch#2 ]
Allocated zp ZP_WORD:13 [ print_char_cursor#31 print_char_cursor#43 print_char_cursor#42 print_char_cursor#12 print_char_cursor#40 print_char_cursor#44 print_char_cursor#49 ]
Allocated zp ZP_WORD:15 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 ]
Allocated zp ZP_BYTE:17 [ print_byte::$0 ]
Allocated zp ZP_BYTE:18 [ print_byte::$2 ]

INITIAL ASM
//SEG0 File Comments
// Tests the special "signed" / "unsigned" without a simple type name
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label print_line_cursor = 7
  .label print_char_cursor = $d
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label a = 2
    .label b = 4
    .label i = 6
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG13 [5] phi (byte*) print_line_cursor#13 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG14 [5] phi (byte*) print_char_cursor#44 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG15 [5] phi (word) main::b#2 = (word/signed word/dword/signed dword) $1024 [phi:main->main::@1#3] -- vwuz1=vwuc1 
    lda #<$1024
    sta b
    lda #>$1024
    sta b+1
  //SEG16 [5] phi (signed word) main::a#2 = -(word/signed word/dword/signed dword) $3ff [phi:main->main::@1#4] -- vwsz1=vwsc1 
    lda #<-$3ff
    sta a
    lda #>-$3ff
    sta a+1
    jmp b1
  //SEG17 main::@1
  b1:
  //SEG18 [6] (signed word) main::a#1 ← (signed word) main::a#2 + -(byte/signed byte/word/signed word/dword/signed dword) 7 -- vwsz1=vwsz1_plus_vbsc1 
    lda #-7
    sta $fe
    ora #$7f
    bmi !+
    lda #0
  !:
    sta $ff
    clc
    lda a
    adc $fe
    sta a
    lda a+1
    adc $ff
    sta a+1
  //SEG19 [7] (word) main::b#1 ← (word) main::b#2 + (word/signed word/dword/signed dword) $141 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda b
    adc #<$141
    sta b
    lda b+1
    adc #>$141
    sta b+1
  //SEG20 [8] (signed word) print_sword::w#1 ← (signed word) main::a#1 -- vwsz1=vwsz2 
    lda a
    sta print_sword.w
    lda a+1
    sta print_sword.w+1
  //SEG21 [9] call print_sword 
    jsr print_sword
  //SEG22 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG23 main::@2
  b2:
  //SEG24 [11] call print_char 
  //SEG25 [39] phi from main::@2 to print_char [phi:main::@2->print_char]
  print_char_from_b2:
  //SEG26 [39] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#12 [phi:main::@2->print_char#0] -- register_copy 
  //SEG27 [39] phi (byte) print_char::ch#4 = (byte) ' ' [phi:main::@2->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta print_char.ch
    jsr print_char
    jmp b3
  //SEG28 main::@3
  b3:
  //SEG29 [12] (word) print_word::w#1 ← (word) main::b#1 -- vwuz1=vwuz2 
    lda b
    sta print_word.w
    lda b+1
    sta print_word.w+1
  //SEG30 [13] call print_word 
  //SEG31 [25] phi from main::@3 to print_word [phi:main::@3->print_word]
  print_word_from_b3:
  //SEG32 [25] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#12 [phi:main::@3->print_word#0] -- register_copy 
  //SEG33 [25] phi (word) print_word::w#2 = (word) print_word::w#1 [phi:main::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG34 [14] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG35 main::@4
  b4:
  //SEG36 [15] call print_ln 
  //SEG37 [20] phi from main::@4 to print_ln [phi:main::@4->print_ln]
  print_ln_from_b4:
    jsr print_ln
    jmp b5
  //SEG38 main::@5
  b5:
  //SEG39 [16] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG40 [17] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto main::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp i
    bne b6
    jmp breturn
  //SEG41 main::@return
  breturn:
  //SEG42 [18] return 
    rts
  //SEG43 main::@6
  b6:
  //SEG44 [19] (byte*~) print_char_cursor#49 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG45 [5] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  b1_from_b6:
  //SEG46 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
  //SEG47 [5] phi (byte*) print_line_cursor#13 = (byte*) print_line_cursor#1 [phi:main::@6->main::@1#1] -- register_copy 
  //SEG48 [5] phi (byte*) print_char_cursor#44 = (byte*~) print_char_cursor#49 [phi:main::@6->main::@1#2] -- register_copy 
  //SEG49 [5] phi (word) main::b#2 = (word) main::b#1 [phi:main::@6->main::@1#3] -- register_copy 
  //SEG50 [5] phi (signed word) main::a#2 = (signed word) main::a#1 [phi:main::@6->main::@1#4] -- register_copy 
    jmp b1
}
//SEG51 print_ln
// Print a newline
print_ln: {
  //SEG52 [21] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG53 [21] phi (byte*) print_line_cursor#6 = (byte*) print_line_cursor#13 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG54 print_ln::@1
  b1:
  //SEG55 [22] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG56 [23] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG57 print_ln::@return
  breturn:
  //SEG58 [24] return 
    rts
}
//SEG59 print_word
// Print a word as HEX
// print_word(word zeropage(9) w)
print_word: {
    .label w = 9
  //SEG60 [26] (byte) print_byte::b#0 ← > (word) print_word::w#2 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG61 [27] call print_byte 
  //SEG62 [31] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG63 [31] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#42 [phi:print_word->print_byte#0] -- register_copy 
  //SEG64 [31] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG65 print_word::@1
  b1:
  //SEG66 [28] (byte) print_byte::b#1 ← < (word) print_word::w#2 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG67 [29] call print_byte 
  //SEG68 [31] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG69 [31] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG70 [31] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG71 print_word::@return
  breturn:
  //SEG72 [30] return 
    rts
}
//SEG73 print_byte
// Print a byte as HEX
// print_byte(byte zeropage($b) b)
print_byte: {
    .label _0 = $11
    .label _2 = $12
    .label b = $b
  //SEG74 [32] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG75 [33] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda print_hextab,y
    sta print_char.ch
  //SEG76 [34] call print_char 
  //SEG77 [39] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG78 [39] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#43 [phi:print_byte->print_char#0] -- register_copy 
  //SEG79 [39] phi (byte) print_char::ch#4 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG80 print_byte::@1
  b1:
  //SEG81 [35] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
  //SEG82 [36] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda print_hextab,y
    sta print_char.ch
  //SEG83 [37] call print_char 
  //SEG84 [39] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG85 [39] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG86 [39] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG87 print_byte::@return
  breturn:
  //SEG88 [38] return 
    rts
}
//SEG89 print_char
// Print a single char
// print_char(byte zeropage($c) ch)
print_char: {
    .label ch = $c
  //SEG90 [40] *((byte*) print_char_cursor#31) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (print_char_cursor),y
  //SEG91 [41] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#31 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG92 print_char::@return
  breturn:
  //SEG93 [42] return 
    rts
}
//SEG94 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage($f) w)
print_sword: {
    .label w = $f
  //SEG95 [43] if((signed word) print_sword::w#1>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1_from_print_sword
  //SEG96 [44] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG97 print_sword::@2
  b2:
  //SEG98 [45] call print_char 
  //SEG99 [39] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG100 [39] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#44 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG101 [39] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char.ch
    jsr print_char
    jmp b3
  //SEG102 print_sword::@3
  b3:
  //SEG103 [46] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG104 [47] phi from print_sword print_sword::@3 to print_sword::@1 [phi:print_sword/print_sword::@3->print_sword::@1]
  b1_from_print_sword:
  b1_from_b3:
  //SEG105 [47] phi (byte*) print_char_cursor#40 = (byte*) print_char_cursor#44 [phi:print_sword/print_sword::@3->print_sword::@1#0] -- register_copy 
  //SEG106 [47] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:print_sword/print_sword::@3->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG107 print_sword::@1
  b1:
  //SEG108 [48] (word~) print_word::w#5 ← (word)(signed word) print_sword::w#3 -- vwuz1=vwuz2 
    lda w
    sta print_word.w
    lda w+1
    sta print_word.w+1
  //SEG109 [49] call print_word 
  //SEG110 [25] phi from print_sword::@1 to print_word [phi:print_sword::@1->print_word]
  print_word_from_b1:
  //SEG111 [25] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#40 [phi:print_sword::@1->print_word#0] -- register_copy 
  //SEG112 [25] phi (word) print_word::w#2 = (word~) print_word::w#5 [phi:print_sword::@1->print_word#1] -- register_copy 
    jsr print_word
    jmp breturn
  //SEG113 print_sword::@return
  breturn:
  //SEG114 [50] return 
    rts
}
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] (signed word) main::a#1 ← (signed word) main::a#2 + -(byte/signed byte/word/signed word/dword/signed dword) 7 [ main::b#2 print_char_cursor#44 print_line_cursor#13 main::i#2 main::a#1 ] ( main:2 [ main::b#2 print_char_cursor#44 print_line_cursor#13 main::i#2 main::a#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ main::i#2 main::i#1 ]
Statement [7] (word) main::b#1 ← (word) main::b#2 + (word/signed word/dword/signed dword) $141 [ print_char_cursor#44 print_line_cursor#13 main::i#2 main::a#1 main::b#1 ] ( main:2 [ print_char_cursor#44 print_line_cursor#13 main::i#2 main::a#1 main::b#1 ] ) always clobbers reg byte a 
Statement [8] (signed word) print_sword::w#1 ← (signed word) main::a#1 [ print_char_cursor#44 print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_sword::w#1 ] ( main:2 [ print_char_cursor#44 print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [12] (word) print_word::w#1 ← (word) main::b#1 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#1 print_char_cursor#12 ] ( main:2 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [19] (byte*~) print_char_cursor#49 ← (byte*) print_line_cursor#1 [ main::a#1 main::b#1 print_char_cursor#49 print_line_cursor#1 main::i#1 ] ( main:2 [ main::a#1 main::b#1 print_char_cursor#49 print_line_cursor#1 main::i#1 ] ) always clobbers reg byte a 
Statement [22] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) $28 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:15 [ main::i#2 main::a#1 main::b#1 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [23] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:15 [ main::i#2 main::a#1 main::b#1 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [26] (byte) print_byte::b#0 ← > (word) print_word::w#2 [ print_word::w#2 print_char_cursor#42 print_byte::b#0 ] ( main:2::print_word:13 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_char_cursor#42 print_byte::b#0 ] main:2::print_sword:9::print_word:49 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_char_cursor#42 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [28] (byte) print_byte::b#1 ← < (word) print_word::w#2 [ print_char_cursor#12 print_byte::b#1 ] ( main:2::print_word:13 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_byte::b#1 ] main:2::print_sword:9::print_word:49 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [32] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#2 print_char_cursor#43 print_byte::$0 ] ( main:2::print_word:13::print_byte:27 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_byte::b#2 print_char_cursor#43 print_byte::$0 ] main:2::print_sword:9::print_word:49::print_byte:27 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_byte::b#2 print_char_cursor#43 print_byte::$0 ] main:2::print_word:13::print_byte:29 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_byte::b#2 print_char_cursor#43 print_byte::$0 ] main:2::print_sword:9::print_word:49::print_byte:29 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_byte::b#2 print_char_cursor#43 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [35] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ print_char_cursor#12 print_byte::$2 ] ( main:2::print_word:13::print_byte:27 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_char_cursor#12 print_byte::$2 ] main:2::print_sword:9::print_word:49::print_byte:27 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_char_cursor#12 print_byte::$2 ] main:2::print_word:13::print_byte:29 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_byte::$2 ] main:2::print_sword:9::print_word:49::print_byte:29 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_byte::$2 ] ) always clobbers reg byte a 
Statement [40] *((byte*) print_char_cursor#31) ← (byte) print_char::ch#4 [ print_char_cursor#31 ] ( main:2::print_char:11 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#31 ] main:2::print_word:13::print_byte:27::print_char:34 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_byte::b#2 print_char_cursor#31 ] main:2::print_sword:9::print_word:49::print_byte:27::print_char:34 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_byte::b#2 print_char_cursor#31 ] main:2::print_word:13::print_byte:29::print_char:34 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_byte::b#2 print_char_cursor#31 ] main:2::print_sword:9::print_word:49::print_byte:29::print_char:34 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_byte::b#2 print_char_cursor#31 ] main:2::print_word:13::print_byte:27::print_char:37 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_char_cursor#31 ] main:2::print_sword:9::print_word:49::print_byte:27::print_char:37 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_char_cursor#31 ] main:2::print_word:13::print_byte:29::print_char:37 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#31 ] main:2::print_sword:9::print_word:49::print_byte:29::print_char:37 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#31 ] main:2::print_sword:9::print_char:45 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_sword::w#1 print_char_cursor#31 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:6 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [43] if((signed word) print_sword::w#1>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_char_cursor#44 print_sword::w#1 ] ( main:2::print_sword:9 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#44 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [46] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 [ print_char_cursor#12 print_sword::w#0 ] ( main:2::print_sword:9 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [48] (word~) print_word::w#5 ← (word)(signed word) print_sword::w#3 [ print_word::w#5 print_char_cursor#40 ] ( main:2::print_sword:9 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#5 print_char_cursor#40 ] ) always clobbers reg byte a 
Statement [6] (signed word) main::a#1 ← (signed word) main::a#2 + -(byte/signed byte/word/signed word/dword/signed dword) 7 [ main::b#2 print_char_cursor#44 print_line_cursor#13 main::i#2 main::a#1 ] ( main:2 [ main::b#2 print_char_cursor#44 print_line_cursor#13 main::i#2 main::a#1 ] ) always clobbers reg byte a 
Statement [7] (word) main::b#1 ← (word) main::b#2 + (word/signed word/dword/signed dword) $141 [ print_char_cursor#44 print_line_cursor#13 main::i#2 main::a#1 main::b#1 ] ( main:2 [ print_char_cursor#44 print_line_cursor#13 main::i#2 main::a#1 main::b#1 ] ) always clobbers reg byte a 
Statement [8] (signed word) print_sword::w#1 ← (signed word) main::a#1 [ print_char_cursor#44 print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_sword::w#1 ] ( main:2 [ print_char_cursor#44 print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [12] (word) print_word::w#1 ← (word) main::b#1 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#1 print_char_cursor#12 ] ( main:2 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [19] (byte*~) print_char_cursor#49 ← (byte*) print_line_cursor#1 [ main::a#1 main::b#1 print_char_cursor#49 print_line_cursor#1 main::i#1 ] ( main:2 [ main::a#1 main::b#1 print_char_cursor#49 print_line_cursor#1 main::i#1 ] ) always clobbers reg byte a 
Statement [22] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) $28 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:15 [ main::i#2 main::a#1 main::b#1 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [23] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:15 [ main::i#2 main::a#1 main::b#1 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [26] (byte) print_byte::b#0 ← > (word) print_word::w#2 [ print_word::w#2 print_char_cursor#42 print_byte::b#0 ] ( main:2::print_word:13 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_char_cursor#42 print_byte::b#0 ] main:2::print_sword:9::print_word:49 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_char_cursor#42 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [28] (byte) print_byte::b#1 ← < (word) print_word::w#2 [ print_char_cursor#12 print_byte::b#1 ] ( main:2::print_word:13 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_byte::b#1 ] main:2::print_sword:9::print_word:49 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [32] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#2 print_char_cursor#43 print_byte::$0 ] ( main:2::print_word:13::print_byte:27 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_byte::b#2 print_char_cursor#43 print_byte::$0 ] main:2::print_sword:9::print_word:49::print_byte:27 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_byte::b#2 print_char_cursor#43 print_byte::$0 ] main:2::print_word:13::print_byte:29 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_byte::b#2 print_char_cursor#43 print_byte::$0 ] main:2::print_sword:9::print_word:49::print_byte:29 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_byte::b#2 print_char_cursor#43 print_byte::$0 ] ) always clobbers reg byte a 
Statement [35] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ print_char_cursor#12 print_byte::$2 ] ( main:2::print_word:13::print_byte:27 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_char_cursor#12 print_byte::$2 ] main:2::print_sword:9::print_word:49::print_byte:27 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_char_cursor#12 print_byte::$2 ] main:2::print_word:13::print_byte:29 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_byte::$2 ] main:2::print_sword:9::print_word:49::print_byte:29 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_byte::$2 ] ) always clobbers reg byte a 
Statement [40] *((byte*) print_char_cursor#31) ← (byte) print_char::ch#4 [ print_char_cursor#31 ] ( main:2::print_char:11 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#31 ] main:2::print_word:13::print_byte:27::print_char:34 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_byte::b#2 print_char_cursor#31 ] main:2::print_sword:9::print_word:49::print_byte:27::print_char:34 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_byte::b#2 print_char_cursor#31 ] main:2::print_word:13::print_byte:29::print_char:34 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_byte::b#2 print_char_cursor#31 ] main:2::print_sword:9::print_word:49::print_byte:29::print_char:34 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_byte::b#2 print_char_cursor#31 ] main:2::print_word:13::print_byte:27::print_char:37 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_char_cursor#31 ] main:2::print_sword:9::print_word:49::print_byte:27::print_char:37 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#2 print_char_cursor#31 ] main:2::print_word:13::print_byte:29::print_char:37 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#31 ] main:2::print_sword:9::print_word:49::print_byte:29::print_char:37 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#31 ] main:2::print_sword:9::print_char:45 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_sword::w#1 print_char_cursor#31 ] ) always clobbers reg byte y 
Statement [43] if((signed word) print_sword::w#1>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_char_cursor#44 print_sword::w#1 ] ( main:2::print_sword:9 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#44 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [46] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 [ print_char_cursor#12 print_sword::w#0 ] ( main:2::print_sword:9 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [48] (word~) print_word::w#5 ← (word)(signed word) print_sword::w#3 [ print_word::w#5 print_char_cursor#40 ] ( main:2::print_sword:9 [ print_line_cursor#13 main::i#2 main::a#1 main::b#1 print_word::w#5 print_char_cursor#40 ] ) always clobbers reg byte a 
Potential registers zp ZP_WORD:2 [ main::a#2 main::a#1 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_WORD:4 [ main::b#2 main::b#1 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_BYTE:6 [ main::i#2 main::i#1 ] : zp ZP_BYTE:6 , reg byte x , 
Potential registers zp ZP_WORD:7 [ print_line_cursor#6 print_line_cursor#13 print_line_cursor#1 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_WORD:9 [ print_word::w#2 print_word::w#1 print_word::w#5 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] : zp ZP_BYTE:11 , reg byte x , 
Potential registers zp ZP_BYTE:12 [ print_char::ch#4 print_char::ch#1 print_char::ch#2 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:13 [ print_char_cursor#31 print_char_cursor#43 print_char_cursor#42 print_char_cursor#12 print_char_cursor#40 print_char_cursor#44 print_char_cursor#49 ] : zp ZP_WORD:13 , 
Potential registers zp ZP_WORD:15 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_BYTE:17 [ print_byte::$0 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ print_byte::$2 ] : zp ZP_BYTE:18 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 251.61: zp ZP_WORD:7 [ print_line_cursor#6 print_line_cursor#13 print_line_cursor#1 ] 52.74: zp ZP_WORD:13 [ print_char_cursor#31 print_char_cursor#43 print_char_cursor#42 print_char_cursor#12 print_char_cursor#40 print_char_cursor#44 print_char_cursor#49 ] 
Uplift Scope [main] 24.54: zp ZP_WORD:2 [ main::a#2 main::a#1 ] 13.75: zp ZP_WORD:4 [ main::b#2 main::b#1 ] 13: zp ZP_BYTE:6 [ main::i#2 main::i#1 ] 
Uplift Scope [print_word] 31.67: zp ZP_WORD:9 [ print_word::w#2 print_word::w#1 print_word::w#5 ] 
Uplift Scope [print_byte] 10: zp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 4: zp ZP_BYTE:17 [ print_byte::$0 ] 4: zp ZP_BYTE:18 [ print_byte::$2 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:12 [ print_char::ch#4 print_char::ch#1 print_char::ch#2 ] 
Uplift Scope [print_sword] 12.25: zp ZP_WORD:15 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 ] 
Uplift Scope [print_ln] 

Uplifting [] best 6231 combination zp ZP_WORD:7 [ print_line_cursor#6 print_line_cursor#13 print_line_cursor#1 ] zp ZP_WORD:13 [ print_char_cursor#31 print_char_cursor#43 print_char_cursor#42 print_char_cursor#12 print_char_cursor#40 print_char_cursor#44 print_char_cursor#49 ] 
Uplifting [main] best 6141 combination zp ZP_WORD:2 [ main::a#2 main::a#1 ] zp ZP_WORD:4 [ main::b#2 main::b#1 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [print_word] best 6141 combination zp ZP_WORD:9 [ print_word::w#2 print_word::w#1 print_word::w#5 ] 
Uplifting [print_byte] best 6133 combination zp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [print_char] best 6118 combination reg byte a [ print_char::ch#4 print_char::ch#1 print_char::ch#2 ] 
Uplifting [print_sword] best 6118 combination zp ZP_WORD:15 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 ] 
Uplifting [print_ln] best 6118 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Uplifting [print_byte] best 6118 combination zp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:9 [ print_word::w#2 print_word::w#1 print_word::w#5 ] ] with [ zp ZP_WORD:15 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 ] ] - score: 1
Allocated (was zp ZP_WORD:7) zp ZP_WORD:6 [ print_line_cursor#6 print_line_cursor#13 print_line_cursor#1 ]
Allocated (was zp ZP_WORD:9) zp ZP_WORD:8 [ print_word::w#2 print_word::w#1 print_word::w#5 print_sword::w#3 print_sword::w#1 print_sword::w#0 ]
Allocated (was zp ZP_BYTE:11) zp ZP_BYTE:10 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated (was zp ZP_WORD:13) zp ZP_WORD:11 [ print_char_cursor#31 print_char_cursor#43 print_char_cursor#42 print_char_cursor#12 print_char_cursor#40 print_char_cursor#44 print_char_cursor#49 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Tests the special "signed" / "unsigned" without a simple type name
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label print_line_cursor = 6
  .label print_char_cursor = $b
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label a = 2
    .label b = 4
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG13 [5] phi (byte*) print_line_cursor#13 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG14 [5] phi (byte*) print_char_cursor#44 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG15 [5] phi (word) main::b#2 = (word/signed word/dword/signed dword) $1024 [phi:main->main::@1#3] -- vwuz1=vwuc1 
    lda #<$1024
    sta b
    lda #>$1024
    sta b+1
  //SEG16 [5] phi (signed word) main::a#2 = -(word/signed word/dword/signed dword) $3ff [phi:main->main::@1#4] -- vwsz1=vwsc1 
    lda #<-$3ff
    sta a
    lda #>-$3ff
    sta a+1
    jmp b1
  //SEG17 main::@1
  b1:
  //SEG18 [6] (signed word) main::a#1 ← (signed word) main::a#2 + -(byte/signed byte/word/signed word/dword/signed dword) 7 -- vwsz1=vwsz1_plus_vbsc1 
    lda #-7
    sta $fe
    ora #$7f
    bmi !+
    lda #0
  !:
    sta $ff
    clc
    lda a
    adc $fe
    sta a
    lda a+1
    adc $ff
    sta a+1
  //SEG19 [7] (word) main::b#1 ← (word) main::b#2 + (word/signed word/dword/signed dword) $141 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda b
    adc #<$141
    sta b
    lda b+1
    adc #>$141
    sta b+1
  //SEG20 [8] (signed word) print_sword::w#1 ← (signed word) main::a#1 -- vwsz1=vwsz2 
    lda a
    sta print_sword.w
    lda a+1
    sta print_sword.w+1
  //SEG21 [9] call print_sword 
    jsr print_sword
  //SEG22 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG23 main::@2
  b2:
  //SEG24 [11] call print_char 
  //SEG25 [39] phi from main::@2 to print_char [phi:main::@2->print_char]
  print_char_from_b2:
  //SEG26 [39] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#12 [phi:main::@2->print_char#0] -- register_copy 
  //SEG27 [39] phi (byte) print_char::ch#4 = (byte) ' ' [phi:main::@2->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp b3
  //SEG28 main::@3
  b3:
  //SEG29 [12] (word) print_word::w#1 ← (word) main::b#1 -- vwuz1=vwuz2 
    lda b
    sta print_word.w
    lda b+1
    sta print_word.w+1
  //SEG30 [13] call print_word 
  //SEG31 [25] phi from main::@3 to print_word [phi:main::@3->print_word]
  print_word_from_b3:
  //SEG32 [25] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#12 [phi:main::@3->print_word#0] -- register_copy 
  //SEG33 [25] phi (word) print_word::w#2 = (word) print_word::w#1 [phi:main::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG34 [14] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG35 main::@4
  b4:
  //SEG36 [15] call print_ln 
  //SEG37 [20] phi from main::@4 to print_ln [phi:main::@4->print_ln]
  print_ln_from_b4:
    jsr print_ln
    jmp b5
  //SEG38 main::@5
  b5:
  //SEG39 [16] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG40 [17] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto main::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne b6
    jmp breturn
  //SEG41 main::@return
  breturn:
  //SEG42 [18] return 
    rts
  //SEG43 main::@6
  b6:
  //SEG44 [19] (byte*~) print_char_cursor#49 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG45 [5] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  b1_from_b6:
  //SEG46 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
  //SEG47 [5] phi (byte*) print_line_cursor#13 = (byte*) print_line_cursor#1 [phi:main::@6->main::@1#1] -- register_copy 
  //SEG48 [5] phi (byte*) print_char_cursor#44 = (byte*~) print_char_cursor#49 [phi:main::@6->main::@1#2] -- register_copy 
  //SEG49 [5] phi (word) main::b#2 = (word) main::b#1 [phi:main::@6->main::@1#3] -- register_copy 
  //SEG50 [5] phi (signed word) main::a#2 = (signed word) main::a#1 [phi:main::@6->main::@1#4] -- register_copy 
    jmp b1
}
//SEG51 print_ln
// Print a newline
print_ln: {
  //SEG52 [21] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG53 [21] phi (byte*) print_line_cursor#6 = (byte*) print_line_cursor#13 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG54 print_ln::@1
  b1:
  //SEG55 [22] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG56 [23] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG57 print_ln::@return
  breturn:
  //SEG58 [24] return 
    rts
}
//SEG59 print_word
// Print a word as HEX
// print_word(word zeropage(8) w)
print_word: {
    .label w = 8
  //SEG60 [26] (byte) print_byte::b#0 ← > (word) print_word::w#2 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG61 [27] call print_byte 
  //SEG62 [31] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG63 [31] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#42 [phi:print_word->print_byte#0] -- register_copy 
  //SEG64 [31] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG65 print_word::@1
  b1:
  //SEG66 [28] (byte) print_byte::b#1 ← < (word) print_word::w#2 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG67 [29] call print_byte 
  //SEG68 [31] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG69 [31] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG70 [31] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG71 print_word::@return
  breturn:
  //SEG72 [30] return 
    rts
}
//SEG73 print_byte
// Print a byte as HEX
// print_byte(byte zeropage($a) b)
print_byte: {
    .label b = $a
  //SEG74 [32] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG75 [33] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG76 [34] call print_char 
  //SEG77 [39] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG78 [39] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#43 [phi:print_byte->print_char#0] -- register_copy 
  //SEG79 [39] phi (byte) print_char::ch#4 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG80 print_byte::@1
  b1:
  //SEG81 [35] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG82 [36] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG83 [37] call print_char 
  //SEG84 [39] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG85 [39] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG86 [39] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG87 print_byte::@return
  breturn:
  //SEG88 [38] return 
    rts
}
//SEG89 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG90 [40] *((byte*) print_char_cursor#31) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG91 [41] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#31 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG92 print_char::@return
  breturn:
  //SEG93 [42] return 
    rts
}
//SEG94 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(8) w)
print_sword: {
    .label w = 8
  //SEG95 [43] if((signed word) print_sword::w#1>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1_from_print_sword
  //SEG96 [44] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG97 print_sword::@2
  b2:
  //SEG98 [45] call print_char 
  //SEG99 [39] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG100 [39] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#44 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG101 [39] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b3
  //SEG102 print_sword::@3
  b3:
  //SEG103 [46] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG104 [47] phi from print_sword print_sword::@3 to print_sword::@1 [phi:print_sword/print_sword::@3->print_sword::@1]
  b1_from_print_sword:
  b1_from_b3:
  //SEG105 [47] phi (byte*) print_char_cursor#40 = (byte*) print_char_cursor#44 [phi:print_sword/print_sword::@3->print_sword::@1#0] -- register_copy 
  //SEG106 [47] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:print_sword/print_sword::@3->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG107 print_sword::@1
  b1:
  //SEG108 [48] (word~) print_word::w#5 ← (word)(signed word) print_sword::w#3
  //SEG109 [49] call print_word 
  //SEG110 [25] phi from print_sword::@1 to print_word [phi:print_sword::@1->print_word]
  print_word_from_b1:
  //SEG111 [25] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#40 [phi:print_sword::@1->print_word#0] -- register_copy 
  //SEG112 [25] phi (word) print_word::w#2 = (word~) print_word::w#5 [phi:print_sword::@1->print_word#1] -- register_copy 
    jsr print_word
    jmp breturn
  //SEG113 print_sword::@return
  breturn:
  //SEG114 [50] return 
    rts
}
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_print_sword with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b2_from_b1:
Removing instruction print_char_from_b2:
Removing instruction b4_from_b3:
Removing instruction print_ln_from_b4:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b2_from_print_sword:
Removing instruction print_char_from_b2:
Removing instruction b1_from_print_sword:
Removing instruction b1_from_b3:
Removing instruction print_word_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b2:
Removing instruction b3:
Removing instruction print_word_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b1_from_b6:
Removing instruction breturn:
Removing instruction print_byte_from_print_word:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b3:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(signed word) main::a
(signed word) main::a#1 a zp ZP_WORD:2 2.5384615384615383
(signed word) main::a#2 a zp ZP_WORD:2 22.0
(word) main::b
(word) main::b#1 b zp ZP_WORD:4 2.75
(word) main::b#2 b zp ZP_WORD:4 11.0
(byte) main::i
(byte) main::i#1 reg byte x 11.0
(byte) main::i#2 reg byte x 2.0
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 b zp ZP_BYTE:10 4.0
(byte) print_byte::b#1 b zp ZP_BYTE:10 4.0
(byte) print_byte::b#2 b zp ZP_BYTE:10 2.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#2 reg byte a 4.0
(byte) print_char::ch#4 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#12 print_char_cursor zp ZP_WORD:11 5.240000000000001
(byte*) print_char_cursor#31 print_char_cursor zp ZP_WORD:11 10.5
(byte*) print_char_cursor#40 print_char_cursor zp ZP_WORD:11 3.0
(byte*) print_char_cursor#42 print_char_cursor zp ZP_WORD:11 7.5
(byte*) print_char_cursor#43 print_char_cursor zp ZP_WORD:11 2.0
(byte*) print_char_cursor#44 print_char_cursor zp ZP_WORD:11 2.5
(byte*~) print_char_cursor#49 print_char_cursor zp ZP_WORD:11 22.0
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:6 46.42857142857143
(byte*) print_line_cursor#13 print_line_cursor zp ZP_WORD:6 1.1818181818181819
(byte*) print_line_cursor#6 print_line_cursor zp ZP_WORD:6 204.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_sword((signed word) print_sword::w)
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0 w zp ZP_WORD:8 4.0
(signed word) print_sword::w#1 w zp ZP_WORD:8 4.25
(signed word) print_sword::w#3 w zp ZP_WORD:8 4.0
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#1 w zp ZP_WORD:8 22.0
(word) print_word::w#2 w zp ZP_WORD:8 5.666666666666667
(word~) print_word::w#5 w zp ZP_WORD:8 4.0

zp ZP_WORD:2 [ main::a#2 main::a#1 ]
zp ZP_WORD:4 [ main::b#2 main::b#1 ]
reg byte x [ main::i#2 main::i#1 ]
zp ZP_WORD:6 [ print_line_cursor#6 print_line_cursor#13 print_line_cursor#1 ]
zp ZP_WORD:8 [ print_word::w#2 print_word::w#1 print_word::w#5 print_sword::w#3 print_sword::w#1 print_sword::w#0 ]
zp ZP_BYTE:10 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
reg byte a [ print_char::ch#4 print_char::ch#1 print_char::ch#2 ]
zp ZP_WORD:11 [ print_char_cursor#31 print_char_cursor#43 print_char_cursor#42 print_char_cursor#12 print_char_cursor#40 print_char_cursor#44 print_char_cursor#49 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]


FINAL ASSEMBLER
Score: 5341

//SEG0 File Comments
// Tests the special "signed" / "unsigned" without a simple type name
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label print_line_cursor = 6
  .label print_char_cursor = $b
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
    .label a = 2
    .label b = 4
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG13 [5] phi (byte*) print_line_cursor#13 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG14 [5] phi (byte*) print_char_cursor#44 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG15 [5] phi (word) main::b#2 = (word/signed word/dword/signed dword) $1024 [phi:main->main::@1#3] -- vwuz1=vwuc1 
    lda #<$1024
    sta b
    lda #>$1024
    sta b+1
  //SEG16 [5] phi (signed word) main::a#2 = -(word/signed word/dword/signed dword) $3ff [phi:main->main::@1#4] -- vwsz1=vwsc1 
    lda #<-$3ff
    sta a
    lda #>-$3ff
    sta a+1
  //SEG17 main::@1
  b1:
  //SEG18 [6] (signed word) main::a#1 ← (signed word) main::a#2 + -(byte/signed byte/word/signed word/dword/signed dword) 7 -- vwsz1=vwsz1_plus_vbsc1 
    lda #-7
    sta $fe
    ora #$7f
    bmi !+
    lda #0
  !:
    sta $ff
    clc
    lda a
    adc $fe
    sta a
    lda a+1
    adc $ff
    sta a+1
  //SEG19 [7] (word) main::b#1 ← (word) main::b#2 + (word/signed word/dword/signed dword) $141 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda b
    adc #<$141
    sta b
    lda b+1
    adc #>$141
    sta b+1
  //SEG20 [8] (signed word) print_sword::w#1 ← (signed word) main::a#1 -- vwsz1=vwsz2 
    lda a
    sta print_sword.w
    lda a+1
    sta print_sword.w+1
  //SEG21 [9] call print_sword 
    jsr print_sword
  //SEG22 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG23 main::@2
  //SEG24 [11] call print_char 
  //SEG25 [39] phi from main::@2 to print_char [phi:main::@2->print_char]
  //SEG26 [39] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#12 [phi:main::@2->print_char#0] -- register_copy 
  //SEG27 [39] phi (byte) print_char::ch#4 = (byte) ' ' [phi:main::@2->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
  //SEG28 main::@3
  //SEG29 [12] (word) print_word::w#1 ← (word) main::b#1 -- vwuz1=vwuz2 
    lda b
    sta print_word.w
    lda b+1
    sta print_word.w+1
  //SEG30 [13] call print_word 
  //SEG31 [25] phi from main::@3 to print_word [phi:main::@3->print_word]
  //SEG32 [25] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#12 [phi:main::@3->print_word#0] -- register_copy 
  //SEG33 [25] phi (word) print_word::w#2 = (word) print_word::w#1 [phi:main::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG34 [14] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  //SEG35 main::@4
  //SEG36 [15] call print_ln 
  //SEG37 [20] phi from main::@4 to print_ln [phi:main::@4->print_ln]
    jsr print_ln
  //SEG38 main::@5
  //SEG39 [16] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG40 [17] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto main::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne b6
  //SEG41 main::@return
  //SEG42 [18] return 
    rts
  //SEG43 main::@6
  b6:
  //SEG44 [19] (byte*~) print_char_cursor#49 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG45 [5] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  //SEG46 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
  //SEG47 [5] phi (byte*) print_line_cursor#13 = (byte*) print_line_cursor#1 [phi:main::@6->main::@1#1] -- register_copy 
  //SEG48 [5] phi (byte*) print_char_cursor#44 = (byte*~) print_char_cursor#49 [phi:main::@6->main::@1#2] -- register_copy 
  //SEG49 [5] phi (word) main::b#2 = (word) main::b#1 [phi:main::@6->main::@1#3] -- register_copy 
  //SEG50 [5] phi (signed word) main::a#2 = (signed word) main::a#1 [phi:main::@6->main::@1#4] -- register_copy 
    jmp b1
}
//SEG51 print_ln
// Print a newline
print_ln: {
  //SEG52 [21] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG53 [21] phi (byte*) print_line_cursor#6 = (byte*) print_line_cursor#13 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG54 print_ln::@1
  b1:
  //SEG55 [22] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG56 [23] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1
  !:
  //SEG57 print_ln::@return
  //SEG58 [24] return 
    rts
}
//SEG59 print_word
// Print a word as HEX
// print_word(word zeropage(8) w)
print_word: {
    .label w = 8
  //SEG60 [26] (byte) print_byte::b#0 ← > (word) print_word::w#2 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG61 [27] call print_byte 
  //SEG62 [31] phi from print_word to print_byte [phi:print_word->print_byte]
  //SEG63 [31] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#42 [phi:print_word->print_byte#0] -- register_copy 
  //SEG64 [31] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG65 print_word::@1
  //SEG66 [28] (byte) print_byte::b#1 ← < (word) print_word::w#2 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG67 [29] call print_byte 
  //SEG68 [31] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  //SEG69 [31] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG70 [31] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG71 print_word::@return
  //SEG72 [30] return 
    rts
}
//SEG73 print_byte
// Print a byte as HEX
// print_byte(byte zeropage($a) b)
print_byte: {
    .label b = $a
  //SEG74 [32] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG75 [33] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG76 [34] call print_char 
  //SEG77 [39] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG78 [39] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#43 [phi:print_byte->print_char#0] -- register_copy 
  //SEG79 [39] phi (byte) print_char::ch#4 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG80 print_byte::@1
  //SEG81 [35] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG82 [36] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG83 [37] call print_char 
  //SEG84 [39] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG85 [39] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG86 [39] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG87 print_byte::@return
  //SEG88 [38] return 
    rts
}
//SEG89 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG90 [40] *((byte*) print_char_cursor#31) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG91 [41] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#31 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG92 print_char::@return
  //SEG93 [42] return 
    rts
}
//SEG94 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(8) w)
print_sword: {
    .label w = 8
  //SEG95 [43] if((signed word) print_sword::w#1>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1
  //SEG96 [44] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  //SEG97 print_sword::@2
  //SEG98 [45] call print_char 
  //SEG99 [39] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  //SEG100 [39] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#44 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG101 [39] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
  //SEG102 print_sword::@3
  //SEG103 [46] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG104 [47] phi from print_sword print_sword::@3 to print_sword::@1 [phi:print_sword/print_sword::@3->print_sword::@1]
  //SEG105 [47] phi (byte*) print_char_cursor#40 = (byte*) print_char_cursor#44 [phi:print_sword/print_sword::@3->print_sword::@1#0] -- register_copy 
  //SEG106 [47] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:print_sword/print_sword::@3->print_sword::@1#1] -- register_copy 
  //SEG107 print_sword::@1
  b1:
  //SEG108 [48] (word~) print_word::w#5 ← (word)(signed word) print_sword::w#3
  //SEG109 [49] call print_word 
  //SEG110 [25] phi from print_sword::@1 to print_word [phi:print_sword::@1->print_word]
  //SEG111 [25] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#40 [phi:print_sword::@1->print_word#0] -- register_copy 
  //SEG112 [25] phi (word) print_word::w#2 = (word~) print_word::w#5 [phi:print_sword::@1->print_word#1] -- register_copy 
    jsr print_word
  //SEG113 print_sword::@return
  //SEG114 [50] return 
    rts
}
  print_hextab: .text "0123456789abcdef"

