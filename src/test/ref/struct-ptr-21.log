Fixing pointer array-indexing *((word[]) seq + (number) 0)
Fixing pointer array-indexing *((struct Setting[]) settings + (number) 0)
Fixing pointer array-indexing *(*((struct Setting*) main::setting).buf + (byte) main::i)
Fixing pointer array-indexing *((word*) SCREEN + (byte) main::i)
Rewriting struct pointer member access *((struct Setting*) main::setting).len
Rewriting struct pointer member access *((struct Setting*) main::setting).buf
Identified constant variable (byte) main::idx
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (word*) SCREEN#0 ← ((word*)) (number) $400
  (word[]) seq#0 ← { (number) 1, (number) 2, (number) 3 }
  (number~) $1 ← (number) 0 * (const byte) SIZEOF_WORD
  (word*~) $0 ← & *((word[]) seq#0 + (number~) $1)
  (struct Setting[]) settings#0 ← { { (number) 3, (word*~) $0 } }
  to:@1
main: scope:[main]  from @1
  (number~) main::$2 ← (number) 0 * (const byte) SIZEOF_STRUCT_SETTING
  (struct Setting*~) main::$0 ← & *((struct Setting[]) settings#0 + (number~) main::$2)
  (struct Setting*) main::setting#0 ← (struct Setting*~) main::$0
  (byte) main::i#0 ← (number) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (struct Setting*) main::setting#1 ← phi( main/(struct Setting*) main::setting#0 main::@2/(struct Setting*) main::setting#2 )
  (byte*) main::$4 ← (byte*)(struct Setting*) main::setting#1 + (const byte) OFFSET_STRUCT_SETTING_LEN
  (bool~) main::$1 ← (byte) main::i#2 < *((byte*) main::$4)
  if((bool~) main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (struct Setting*) main::setting#2 ← phi( main::@1/(struct Setting*) main::setting#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte~) main::$3 ← (byte) main::i#3 * (const byte) SIZEOF_WORD
  (word**) main::$5 ← (word**)(struct Setting*) main::setting#2 + (const byte) OFFSET_STRUCT_SETTING_BUF
  *((word*) SCREEN#0 + (byte~) main::$3) ← *(*((word**) main::$5) + (byte~) main::$3)
  (byte) main::i#1 ← ++ (byte) main::i#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(word*~) $0
(number~) $1
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_SETTING_BUF = (byte) 1
(const byte) OFFSET_STRUCT_SETTING_LEN = (byte) 0
(word*) SCREEN
(word*) SCREEN#0
(const byte) SIZEOF_STRUCT_SETTING = (byte) 3
(const byte) SIZEOF_WORD = (byte) 2
(word*) Setting::buf
(byte) Setting::len
(void()) main()
(struct Setting*~) main::$0
(bool~) main::$1
(number~) main::$2
(byte~) main::$3
(byte*) main::$4
(word**) main::$5
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(struct Setting*) main::setting
(struct Setting*) main::setting#0
(struct Setting*) main::setting#1
(struct Setting*) main::setting#2
(word[]) seq
(word[]) seq#0
(struct Setting[]) settings
(struct Setting[]) settings#0

Adding number conversion cast (unumber) 0 in (number~) $1 ← (number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) $1 in (number~) $1 ← (unumber)(number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 0 in (number~) main::$2 ← (number) 0 * (const byte) SIZEOF_STRUCT_SETTING
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← (unumber)(number) 0 * (const byte) SIZEOF_STRUCT_SETTING
Adding number conversion cast (unumber) 0 in (byte) main::i#0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Added casts to value list in (word[]) seq#0 ← (word[]){ (word)(number) 1, (word)(number) 2, (word)(number) 3 }
Added casts to value list in (struct Setting[]) settings#0 ← (struct Setting[]){ (struct Setting){ (byte)(number) 3, (word*~) $0 } }
Successful SSA optimization PassNAddInitializerValueListTypeCasts
Inlining cast (word*) SCREEN#0 ← (word*)(number) $400
Inlining cast (byte) main::i#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (word*) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) $1 ← (byte) 0 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) main::$2 ← (byte) 0 * (const byte) SIZEOF_STRUCT_SETTING
Alias (struct Setting*) main::setting#0 = (struct Setting*~) main::$0 
Alias (byte) main::i#2 = (byte) main::i#3 
Alias (struct Setting*) main::setting#1 = (struct Setting*) main::setting#2 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (struct Setting*) main::setting#1 (struct Setting*) main::setting#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$1 [12] if((byte) main::i#2<*((byte*) main::$4)) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting array member address-of to pointer addition [3] (word*~) $0 ← (word[]) seq#0 + (byte~) $1
Rewriting array member address-of to pointer addition [6] (struct Setting*) main::setting#0 ← (struct Setting[]) settings#0 + (byte~) main::$2
Successful SSA optimization PassNArrayElementAddressOfRewriting
Constant right-side identified [2] (byte~) $1 ← (byte) 0 * (const byte) SIZEOF_WORD
Constant right-side identified [5] (byte~) main::$2 ← (byte) 0 * (const byte) SIZEOF_STRUCT_SETTING
Successful SSA optimization Pass2ConstantRValueConsolidation
Identified constant from value list (word[]) { (word) 1, (word) 2, (word) 3 }
Successful SSA optimization Pass2ConstantInitializerValueLists
Constant (const word*) SCREEN#0 = (word*) 1024
Constant (const word[]) seq#0 = { 1, 2, 3 }
Constant (const byte) $1 = 0*SIZEOF_WORD
Constant (const byte) main::$2 = 0*SIZEOF_STRUCT_SETTING
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [12] if((byte) main::i#2<*((byte*) main::$4)) goto main::@2  -- *((byte*)main::setting#0 + OFFSET_STRUCT_SETTING_LEN)
Converting *(pointer+n) to pointer[n] [16] *((const word*) SCREEN#0 + (byte~) main::$3) ← *(*((word**) main::$5) + (byte~) main::$3)  -- *((word**)main::setting#0 + OFFSET_STRUCT_SETTING_BUF)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_STRUCT_SETTING in 
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_WORD in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero seq#0 in [3] (word*~) $0 ← (const word[]) seq#0 + (const byte) $1
Simplifying expression containing zero settings#0 in [6] (struct Setting*) main::setting#0 ← (struct Setting[]) settings#0 + (const byte) main::$2
Simplifying expression containing zero (byte*)main::setting#0 in [10] (byte*) main::$4 ← (byte*)(struct Setting*) main::setting#0 + (const byte) OFFSET_STRUCT_SETTING_LEN
Simplifying expression containing zero (byte*)main::setting#0 in [12] if((byte) main::i#2<*((byte*)(struct Setting*) main::setting#0 + (const byte) OFFSET_STRUCT_SETTING_LEN)) goto main::@2
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*) main::$4 and assignment [4] (byte*) main::$4 ← (byte*)(struct Setting*) main::setting#0
Eliminating unused variable (word**) main::$5 and assignment [7] (word**) main::$5 ← (word**)(struct Setting*) main::setting#0 + (const byte) OFFSET_STRUCT_SETTING_BUF
Eliminating unused constant (const byte) main::$2
Eliminating unused constant (const byte) SIZEOF_STRUCT_SETTING
Eliminating unused constant (const byte) OFFSET_STRUCT_SETTING_LEN
Eliminating unused constant (const byte) $1
Successful SSA optimization PassNEliminateUnusedVars
Constant (const word*) $0 = seq#0
Successful SSA optimization Pass2ConstantIdentification
Identified constant from value list (struct Setting) { len: (byte) 3, buf: (const word*) $0 }
Successful SSA optimization Pass2ConstantInitializerValueLists
Identified constant from value list (struct Setting[]) { { len: (byte) 3, buf: (const word*) $0 } }
Successful SSA optimization Pass2ConstantInitializerValueLists
Constant (const struct Setting[]) settings#0 = { { len: 3, buf: $0 } }
Successful SSA optimization Pass2ConstantIdentification
Constant (const struct Setting*) main::setting#0 = settings#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte*)main::setting#0 in [3] if((byte) main::i#2<*((byte*)(const struct Setting*) main::setting#0)) goto main::@2
Constant value identified (word**)main::setting#0 in [5] *((const word*) SCREEN#0 + (byte~) main::$3) ← *(*((word**)(const struct Setting*) main::setting#0 + (const byte) OFFSET_STRUCT_SETTING_BUF) + (byte~) main::$3)
Successful SSA optimization Pass2ConstantValues
Rewriting multiplication to use shift [2] (byte~) main::$3 ← (byte) main::i#2 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) main::i#0
Constant inlined $0 = (const word[]) seq#0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::setting#0 = (const struct Setting[]) settings#0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((word**)settings#0+OFFSET_STRUCT_SETTING_BUF)
Successful SSA optimization Pass2ConstantAdditionElimination
Eliminating unused constant (const byte) SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 1 initial phi equivalence classes
Coalesced [12] main::i#4 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  [6] if((byte) main::i#2<*((byte*)(const struct Setting[]) settings#0)) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [8] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1
  [9] *((const word*) SCREEN#0 + (byte~) main::$3) ← *(*((word**)(const struct Setting[]) settings#0+(const byte) OFFSET_STRUCT_SETTING_BUF) + (byte~) main::$3)
  [10] (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
(word*) SCREEN
(word*) Setting::buf
(byte) Setting::len
(void()) main()
(byte~) main::$3 33.0
(byte) main::i
(byte) main::i#1 22.0
(byte) main::i#2 11.0
(struct Setting*) main::setting
(word[]) seq
(struct Setting[]) settings

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$3 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::$3 ]

INITIAL ASM
Target platform is c64basic / 6502X
  // File Comments
// Demonstrates problem with conditions using negated struct references
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_SETTING_BUF = 1
  .label SCREEN = $400
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label _3 = 3
    .label i = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp b1
    // main::@1
  b1:
    // [6] if((byte) main::i#2<*((byte*)(const struct Setting[]) settings#0)) goto main::@2 -- vbuz1_lt__deref_pbuc1_then_la1 
    lda.z i
    cmp settings
    bcc b2
    jmp breturn
    // main::@return
  breturn:
    // [7] return 
    rts
    // main::@2
  b2:
    // [8] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z _3
    // [9] *((const word*) SCREEN#0 + (byte~) main::$3) ← *(*((word**)(const struct Setting[]) settings#0+(const byte) OFFSET_STRUCT_SETTING_BUF) + (byte~) main::$3) -- pwuc1_derefidx_vbuz1=(_deref_pptc2)_derefidx_vbuz1 
    ldy.z _3
    lda settings+OFFSET_STRUCT_SETTING_BUF
    sta.z $fe
    lda settings+OFFSET_STRUCT_SETTING_BUF+1
    sta.z $ff
    lda ($fe),y
    sta SCREEN,y
    iny
    lda ($fe),y
    sta SCREEN,y
    // [10] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b1
}
  // File Data
  seq: .word 1, 2, 3
settings:
  .byte 3
  .word seq

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [8] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::$3 ] ( main:2 [ main::i#2 main::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [9] *((const word*) SCREEN#0 + (byte~) main::$3) ← *(*((word**)(const struct Setting[]) settings#0+(const byte) OFFSET_STRUCT_SETTING_BUF) + (byte~) main::$3) [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [8] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::$3 ] ( main:2 [ main::i#2 main::$3 ] ) always clobbers reg byte a 
Statement [9] *((const word*) SCREEN#0 + (byte~) main::$3) ← *(*((word**)(const struct Setting[]) settings#0+(const byte) OFFSET_STRUCT_SETTING_BUF) + (byte~) main::$3) [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a reg byte y 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_BYTE:3 [ main::$3 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 33: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 33: zp ZP_BYTE:3 [ main::$3 ] 
Uplift Scope [Setting] 
Uplift Scope [] 

Uplifting [main] best 643 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$3 ] 
Uplifting [Setting] best 643 combination 
Uplifting [] best 643 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Demonstrates problem with conditions using negated struct references
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_SETTING_BUF = 1
  .label SCREEN = $400
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
    // main::@1
  b1:
    // [6] if((byte) main::i#2<*((byte*)(const struct Setting[]) settings#0)) goto main::@2 -- vbuxx_lt__deref_pbuc1_then_la1 
    cpx settings
    bcc b2
    jmp breturn
    // main::@return
  breturn:
    // [7] return 
    rts
    // main::@2
  b2:
    // [8] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [9] *((const word*) SCREEN#0 + (byte~) main::$3) ← *(*((word**)(const struct Setting[]) settings#0+(const byte) OFFSET_STRUCT_SETTING_BUF) + (byte~) main::$3) -- pwuc1_derefidx_vbuaa=(_deref_pptc2)_derefidx_vbuaa 
    tay
    lda settings+OFFSET_STRUCT_SETTING_BUF
    sta.z $fe
    lda settings+OFFSET_STRUCT_SETTING_BUF+1
    sta.z $ff
    lda ($fe),y
    sta SCREEN,y
    iny
    lda ($fe),y
    sta SCREEN,y
    // [10] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b1
}
  // File Data
  seq: .word 1, 2, 3
settings:
  .byte 3
  .word seq

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Removing instruction b1_from_b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_SETTING_BUF OFFSET_STRUCT_SETTING_BUF = (byte) 1
(word*) SCREEN
(const word*) SCREEN#0 SCREEN = (word*) 1024
(word*) Setting::buf
(byte) Setting::len
(void()) main()
(byte~) main::$3 reg byte a 33.0
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 22.0
(byte) main::i#2 reg byte x 11.0
(struct Setting*) main::setting
(word[]) seq
(const word[]) seq#0 seq = { (word) 1, (word) 2, (word) 3 }
(struct Setting[]) settings
(const struct Setting[]) settings#0 settings = { { len: (byte) 3, buf: (const word[]) seq#0 } }

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::$3 ]


FINAL ASSEMBLER
Score: 571

  // File Comments
// Demonstrates problem with conditions using negated struct references
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_SETTING_BUF = 1
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // main::@1
  b1:
    // for( char i=0;i<setting->len;i++)
    // [6] if((byte) main::i#2<*((byte*)(const struct Setting[]) settings#0)) goto main::@2 -- vbuxx_lt__deref_pbuc1_then_la1 
    cpx settings
    bcc b2
    // main::@return
    // }
    // [7] return 
    rts
    // main::@2
  b2:
    // SCREEN[i] = setting->buf[i]
    // [8] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [9] *((const word*) SCREEN#0 + (byte~) main::$3) ← *(*((word**)(const struct Setting[]) settings#0+(const byte) OFFSET_STRUCT_SETTING_BUF) + (byte~) main::$3) -- pwuc1_derefidx_vbuaa=(_deref_pptc2)_derefidx_vbuaa 
    tay
    lda settings+OFFSET_STRUCT_SETTING_BUF
    sta.z $fe
    lda settings+OFFSET_STRUCT_SETTING_BUF+1
    sta.z $ff
    lda ($fe),y
    sta SCREEN,y
    iny
    lda ($fe),y
    sta SCREEN,y
    // for( char i=0;i<setting->len;i++)
    // [10] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b1
}
  // File Data
  seq: .word 1, 2, 3
settings:
  .byte 3
  .word seq

