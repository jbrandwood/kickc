Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) PROCPORT_DDR#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte*) PROCPORT#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) PROCPORT_RAM_ALL#0 ← (byte/signed byte/word/signed word/dword/signed dword) $30
  (byte) PROCPORT_RAM_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $35
  (byte) PROCPORT_RAM_CHARROM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $31
  (byte) PROCPORT_KERNEL_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $36
  (byte) PROCPORT_BASIC_KERNEL_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $37
  (byte*) CHARGEN#0 ← ((byte*)) (word/dword/signed dword) $d000
  (word) SPRITE_PTRS#0 ← (word/signed word/dword/signed dword) $3f8
  (byte*) SPRITES_XPOS#0 ← ((byte*)) (word/dword/signed dword) $d000
  (byte*) SPRITES_YPOS#0 ← ((byte*)) (word/dword/signed dword) $d001
  (byte*) SPRITES_XMSB#0 ← ((byte*)) (word/dword/signed dword) $d010
  (byte*) RASTER#0 ← ((byte*)) (word/dword/signed dword) $d012
  (byte*) SPRITES_ENABLE#0 ← ((byte*)) (word/dword/signed dword) $d015
  (byte*) SPRITES_EXPAND_Y#0 ← ((byte*)) (word/dword/signed dword) $d017
  (byte*) SPRITES_PRIORITY#0 ← ((byte*)) (word/dword/signed dword) $d01b
  (byte*) SPRITES_MC#0 ← ((byte*)) (word/dword/signed dword) $d01c
  (byte*) SPRITES_EXPAND_X#0 ← ((byte*)) (word/dword/signed dword) $d01d
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) $d020
  (byte*) BGCOL#0 ← ((byte*)) (word/dword/signed dword) $d021
  (byte*) BGCOL1#0 ← ((byte*)) (word/dword/signed dword) $d021
  (byte*) BGCOL2#0 ← ((byte*)) (word/dword/signed dword) $d022
  (byte*) BGCOL3#0 ← ((byte*)) (word/dword/signed dword) $d023
  (byte*) BGCOL4#0 ← ((byte*)) (word/dword/signed dword) $d024
  (byte*) SPRITES_MC1#0 ← ((byte*)) (word/dword/signed dword) $d025
  (byte*) SPRITES_MC2#0 ← ((byte*)) (word/dword/signed dword) $d026
  (byte*) SPRITES_COLS#0 ← ((byte*)) (word/dword/signed dword) $d027
  (byte*) VIC_CONTROL#0 ← ((byte*)) (word/dword/signed dword) $d011
  (byte*) D011#0 ← ((byte*)) (word/dword/signed dword) $d011
  (byte) VIC_RST8#0 ← (byte/word/signed word/dword/signed dword) $80
  (byte) VIC_ECM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $40
  (byte) VIC_BMM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $20
  (byte) VIC_DEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) VIC_RSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_CONTROL2#0 ← ((byte*)) (word/dword/signed dword) $d016
  (byte*) D016#0 ← ((byte*)) (word/dword/signed dword) $d016
  (byte) VIC_MCM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) VIC_CSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) D018#0 ← ((byte*)) (word/dword/signed dword) $d018
  (byte*) VIC_MEMORY#0 ← ((byte*)) (word/dword/signed dword) $d018
  (byte*) LIGHTPEN_X#0 ← ((byte*)) (word/dword/signed dword) $d013
  (byte*) LIGHTPEN_Y#0 ← ((byte*)) (word/dword/signed dword) $d014
  (byte*) IRQ_STATUS#0 ← ((byte*)) (word/dword/signed dword) $d019
  (byte*) IRQ_ENABLE#0 ← ((byte*)) (word/dword/signed dword) $d01a
  (byte) IRQ_RASTER#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) IRQ_COLLISION_BG#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) IRQ_COLLISION_SPRITE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) IRQ_LIGHTPEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) COLS#0 ← ((byte*)) (word/dword/signed dword) $d800
  (byte*) CIA1_PORT_A#0 ← ((byte*)) (word/dword/signed dword) $dc00
  (byte*) CIA1_PORT_B#0 ← ((byte*)) (word/dword/signed dword) $dc01
  (byte*) CIA1_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) $dc02
  (byte*) CIA1_PORT_B_DDR#0 ← ((byte*)) (word/dword/signed dword) $dc03
  (byte*) CIA1_INTERRUPT#0 ← ((byte*)) (word/dword/signed dword) $dc0d
  (byte) CIA_INTERRUPT_CLEAR#0 ← (byte/signed byte/word/signed word/dword/signed dword) $7f
  (byte*) CIA2_PORT_A#0 ← ((byte*)) (word/dword/signed dword) $dd00
  (byte*) CIA2_PORT_B#0 ← ((byte*)) (word/dword/signed dword) $dd01
  (byte*) CIA2_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) $dd02
  (byte*) CIA2_PORT_B_DDR#0 ← ((byte*)) (word/dword/signed dword) $dd03
  (byte*) CIA2_INTERRUPT#0 ← ((byte*)) (word/dword/signed dword) $dd0d
  (void()**) KERNEL_IRQ#0 ← ((void()**)) (word/signed word/dword/signed dword) $314
  (void()**) HARDWARE_IRQ#0 ← ((void()**)) (word/dword/signed dword) $fffe
  (byte) BLACK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) WHITE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) RED#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) CYAN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) PURPLE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) YELLOW#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) ORANGE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) BROWN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) PINK#0 ← (byte/signed byte/word/signed word/dword/signed dword) $a
  (byte) DARK_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $b
  (byte) GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $c
  (byte) LIGHT_GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) $d
  (byte) LIGHT_BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) $e
  (byte) LIGHT_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f
  to:@4
@4: scope:[]  from @begin
  (byte*) DTV_FEATURE#0 ← ((byte*)) (word/dword/signed dword) $d03f
  (byte) DTV_FEATURE_ENABLE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_FEATURE_DISABLE_TIL_RESET#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte*) DTV_CONTROL#0 ← ((byte*)) (word/dword/signed dword) $d03c
  (byte) DTV_LINEAR#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BORDER_OFF#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) DTV_HIGHCOLOR#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_OVERSCAN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) DTV_COLORRAM_OFF#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) DTV_BADLINE_OFF#0 ← (byte/signed byte/word/signed word/dword/signed dword) $20
  (byte) DTV_CHUNKY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $40
  (byte*) DTV_PALETTE#0 ← ((byte*)) (word/dword/signed dword) $d200
  (byte[$10]) DTV_PALETTE_DEFAULT#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $36, (byte/word/signed word/dword/signed dword) $be, (byte/signed byte/word/signed word/dword/signed dword) $58, (byte/word/signed word/dword/signed dword) $db, (byte/word/signed word/dword/signed dword) $86, (byte/word/signed word/dword/signed dword) $ff, (byte/signed byte/word/signed word/dword/signed dword) $29, (byte/signed byte/word/signed word/dword/signed dword) $26, (byte/signed byte/word/signed word/dword/signed dword) $3b, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/word/signed word/dword/signed dword) $df, (byte/word/signed word/dword/signed dword) $9a, (byte/signed byte/word/signed word/dword/signed dword) $a }
  (byte*) DTV_PLANEA_START_LO#0 ← ((byte*)) (word/dword/signed dword) $d03a
  (byte*) DTV_PLANEA_START_MI#0 ← ((byte*)) (word/dword/signed dword) $d03b
  (byte*) DTV_PLANEA_START_HI#0 ← ((byte*)) (word/dword/signed dword) $d045
  (byte*) DTV_PLANEA_STEP#0 ← ((byte*)) (word/dword/signed dword) $d046
  (byte*) DTV_PLANEA_MODULO_LO#0 ← ((byte*)) (word/dword/signed dword) $d038
  (byte*) DTV_PLANEA_MODULO_HI#0 ← ((byte*)) (word/dword/signed dword) $d039
  (byte*) DTV_PLANEB_START_LO#0 ← ((byte*)) (word/dword/signed dword) $d049
  (byte*) DTV_PLANEB_START_MI#0 ← ((byte*)) (word/dword/signed dword) $d04a
  (byte*) DTV_PLANEB_START_HI#0 ← ((byte*)) (word/dword/signed dword) $d04b
  (byte*) DTV_PLANEB_STEP#0 ← ((byte*)) (word/dword/signed dword) $d04c
  (byte*) DTV_PLANEB_MODULO_LO#0 ← ((byte*)) (word/dword/signed dword) $d047
  (byte*) DTV_PLANEB_MODULO_HI#0 ← ((byte*)) (word/dword/signed dword) $d048
  (byte*) DTV_SPRITE_BANK#0 ← ((byte*)) (word/dword/signed dword) $d04d
  (byte*) DTV_COLOR_BANK_LO#0 ← ((byte*)) (word/dword/signed dword) $d036
  (byte*) DTV_COLOR_BANK_HI#0 ← ((byte*)) (word/dword/signed dword) $d037
  (dword) DTV_COLOR_BANK_DEFAULT#0 ← (dword/signed dword) $1d800
  (byte*) DTV_GRAPHICS_VIC_BANK#0 ← ((byte*)) (word/dword/signed dword) $d03d
  (byte*) DTV_GRAPHICS_HICOL_BANK#0 ← ((byte*)) (word/dword/signed dword) $d03e
  to:@5
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from mode_8bppchunkybmm::@5 mode_8bppchunkybmm::@6 mode_8bppchunkybmm::@8
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 ← phi( mode_8bppchunkybmm::@5/(byte) dtvSetCpuBankSegment1::cpuBankIdx#0 mode_8bppchunkybmm::@6/(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 mode_8bppchunkybmm::@8/(byte) dtvSetCpuBankSegment1::cpuBankIdx#2 )
  (byte*) dtvSetCpuBankSegment1::cpuBank#0 ← ((byte*)) (byte/word/signed word/dword/signed dword) $ff
  *((byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#3
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  return 
  to:@return
@5: scope:[]  from @4
  (byte*) DTV_BLITTER_SRCA_LO#0 ← ((byte*)) (word/dword/signed dword) $d320
  (byte*) DTV_BLITTER_SRCA_MI#0 ← ((byte*)) (word/dword/signed dword) $d321
  (byte*) DTV_BLITTER_SRCA_HI#0 ← ((byte*)) (word/dword/signed dword) $d322
  (byte*) DTV_BLITTER_SRCA_MOD_LO#0 ← ((byte*)) (word/dword/signed dword) $d323
  (byte*) DTV_BLITTER_SRCA_MOD_HI#0 ← ((byte*)) (word/dword/signed dword) $d324
  (byte*) DTV_BLITTER_SRCA_LIN_LO#0 ← ((byte*)) (word/dword/signed dword) $d325
  (byte*) DTV_BLITTER_SRCA_LIN_HI#0 ← ((byte*)) (word/dword/signed dword) $d326
  (byte*) DTV_BLITTER_SRCA_STEP#0 ← ((byte*)) (word/dword/signed dword) $d327
  (byte*) DTV_BLITTER_SRCB_LO#0 ← ((byte*)) (word/dword/signed dword) $d328
  (byte*) DTV_BLITTER_SRCB_MI#0 ← ((byte*)) (word/dword/signed dword) $d329
  (byte*) DTV_BLITTER_SRCB_HI#0 ← ((byte*)) (word/dword/signed dword) $d32a
  (byte*) DTV_BLITTER_SRCB_MOD_LO#0 ← ((byte*)) (word/dword/signed dword) $d32b
  (byte*) DTV_BLITTER_SRCB_MOD_HI#0 ← ((byte*)) (word/dword/signed dword) $d32c
  (byte*) DTV_BLITTER_SRCB_LIN_LO#0 ← ((byte*)) (word/dword/signed dword) $d32d
  (byte*) DTV_BLITTER_SRCB_LIN_HI#0 ← ((byte*)) (word/dword/signed dword) $d32e
  (byte*) DTV_BLITTER_SRCB_STEP#0 ← ((byte*)) (word/dword/signed dword) $d32f
  (byte*) DTV_BLITTER_DEST_LO#0 ← ((byte*)) (word/dword/signed dword) $d330
  (byte*) DTV_BLITTER_DEST_MI#0 ← ((byte*)) (word/dword/signed dword) $d331
  (byte*) DTV_BLITTER_DEST_HI#0 ← ((byte*)) (word/dword/signed dword) $d332
  (byte*) DTV_BLITTER_DEST_MOD_LO#0 ← ((byte*)) (word/dword/signed dword) $d333
  (byte*) DTV_BLITTER_DEST_MOD_HI#0 ← ((byte*)) (word/dword/signed dword) $d334
  (byte*) DTV_BLITTER_DEST_LIN_LO#0 ← ((byte*)) (word/dword/signed dword) $d335
  (byte*) DTV_BLITTER_DEST_LIN_HI#0 ← ((byte*)) (word/dword/signed dword) $d336
  (byte*) DTV_BLITTER_DEST_STEP#0 ← ((byte*)) (word/dword/signed dword) $d337
  (byte*) DTV_BLITTER_LEN_LO#0 ← ((byte*)) (word/dword/signed dword) $d338
  (byte*) DTV_BLITTER_LEN_HI#0 ← ((byte*)) (word/dword/signed dword) $d339
  (byte*) DTV_BLITTER_CONTROL#0 ← ((byte*)) (word/dword/signed dword) $d33a
  (byte) DTV_BLIT_FORCE_START#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BLIT_SRCA_FWD#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) DTV_BLIT_SRCB_FWD#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_BLIT_DEST_FWD#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) DTV_BLIT_VIC_IRQ#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) DTV_BLIT_CIA_IRQ#0 ← (byte/signed byte/word/signed word/dword/signed dword) $20
  (byte) DTV_BLIT_VBLANK#0 ← (byte/signed byte/word/signed word/dword/signed dword) $40
  (byte) DTV_BLIT_IRQ_EN#0 ← (byte/word/signed word/dword/signed dword) $80
  (byte*) DTV_BLITTER_TRANSPARANCY#0 ← ((byte*)) (word/dword/signed dword) $d33b
  (byte) DTV_BLIT_DISABLE_B#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BLIT_WRITE_TRANSPARENT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) DTV_BLIT_WRITE_NONTRANSPARENT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_BLIT_TRANSPARANCY_NONE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) DTV_BLITTER_ALU#0 ← ((byte*)) (word/dword/signed dword) $d33e
  (byte) DTV_BLIT_SHIFT0#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) DTV_BLIT_SHIFT1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BLIT_SHIFT2#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) DTV_BLIT_SHIFT3#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) DTV_BLIT_SHIFT4#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_BLIT_SHIFT5#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) DTV_BLIT_SHIFT6#0 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) DTV_BLIT_SHIFT7#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) DTV_BLIT_AND#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) DTV_BLIT_NAND#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) DTV_BLIT_NOR#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) DTV_BLIT_OR#0 ← (byte/signed byte/word/signed word/dword/signed dword) $18
  (byte) DTV_BLIT_XOR#0 ← (byte/signed byte/word/signed word/dword/signed dword) $20
  (byte) DTV_BLIT_XNOR#0 ← (byte/signed byte/word/signed word/dword/signed dword) $28
  (byte) DTV_BLIT_ADD#0 ← (byte/signed byte/word/signed word/dword/signed dword) $30
  (byte) DTV_BLIT_SUB#0 ← (byte/signed byte/word/signed word/dword/signed dword) $38
  (byte*) DTV_BLITTER_CONTROL2#0 ← ((byte*)) (word/dword/signed dword) $d33f
  (byte) DTV_BLIT_CLEAR_IRQ#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BLIT_SRCA_CONT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) DTV_BLIT_SRCB_CONT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_BLIT_DEST_CONT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) DTV_BLIT_STATUS_BUSY#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BLIT_STATUS_IRQ#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte*) print_screen#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@17
print_str_lines: scope:[print_str_lines]  from menu::@48
  (byte*) print_line_cursor#50 ← phi( menu::@48/(byte*) print_line_cursor#12 )
  (byte*) print_char_cursor#52 ← phi( menu::@48/(byte*) print_char_cursor#13 )
  (byte*) print_str_lines::str#4 ← phi( menu::@48/(byte*) print_str_lines::str#1 )
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@11
  (byte*) print_line_cursor#31 ← phi( print_str_lines/(byte*) print_line_cursor#50 print_str_lines::@11/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#33 ← phi( print_str_lines/(byte*) print_char_cursor#52 print_str_lines::@11/(byte*) print_char_cursor#2 )
  (byte*) print_str_lines::str#2 ← phi( print_str_lines/(byte*) print_str_lines::str#4 print_str_lines::@11/(byte*) print_str_lines::str#5 )
  (bool~) print_str_lines::$0 ← *((byte*) print_str_lines::str#2) != (byte) '@'
  if((bool~) print_str_lines::$0) goto print_str_lines::@2
  to:print_str_lines::@return
print_str_lines::@2: scope:[print_str_lines]  from print_str_lines::@1
  (byte*) print_line_cursor#84 ← phi( print_str_lines::@1/(byte*) print_line_cursor#31 )
  (byte*) print_char_cursor#53 ← phi( print_str_lines::@1/(byte*) print_char_cursor#33 )
  (byte*) print_str_lines::str#6 ← phi( print_str_lines::@1/(byte*) print_str_lines::str#2 )
  to:print_str_lines::@4
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@2 print_str_lines::@5
  (byte*) print_line_cursor#68 ← phi( print_str_lines::@2/(byte*) print_line_cursor#84 print_str_lines::@5/(byte*) print_line_cursor#51 )
  (byte*) print_char_cursor#31 ← phi( print_str_lines::@2/(byte*) print_char_cursor#53 print_str_lines::@5/(byte*) print_char_cursor#54 )
  (byte*) print_str_lines::str#3 ← phi( print_str_lines::@2/(byte*) print_str_lines::str#6 print_str_lines::@5/(byte*) print_str_lines::str#7 )
  (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#3)
  (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#3
  (bool~) print_str_lines::$1 ← (byte) print_str_lines::ch#0 != (byte) '@'
  (bool~) print_str_lines::$2 ← ! (bool~) print_str_lines::$1
  if((bool~) print_str_lines::$2) goto print_str_lines::@5
  to:print_str_lines::@8
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@4 print_str_lines::@8
  (byte*) print_line_cursor#51 ← phi( print_str_lines::@4/(byte*) print_line_cursor#68 print_str_lines::@8/(byte*) print_line_cursor#69 )
  (byte*) print_char_cursor#54 ← phi( print_str_lines::@4/(byte*) print_char_cursor#31 print_str_lines::@8/(byte*) print_char_cursor#1 )
  (byte*) print_str_lines::str#7 ← phi( print_str_lines::@4/(byte*) print_str_lines::str#0 print_str_lines::@8/(byte*) print_str_lines::str#8 )
  (byte) print_str_lines::ch#1 ← phi( print_str_lines::@4/(byte) print_str_lines::ch#0 print_str_lines::@8/(byte) print_str_lines::ch#2 )
  (bool~) print_str_lines::$3 ← (byte) print_str_lines::ch#1 != (byte) '@'
  if((bool~) print_str_lines::$3) goto print_str_lines::@4
  to:print_str_lines::@9
print_str_lines::@8: scope:[print_str_lines]  from print_str_lines::@4
  (byte*) print_line_cursor#69 ← phi( print_str_lines::@4/(byte*) print_line_cursor#68 )
  (byte*) print_str_lines::str#8 ← phi( print_str_lines::@4/(byte*) print_str_lines::str#0 )
  (byte*) print_char_cursor#17 ← phi( print_str_lines::@4/(byte*) print_char_cursor#31 )
  (byte) print_str_lines::ch#2 ← phi( print_str_lines::@4/(byte) print_str_lines::ch#0 )
  *((byte*) print_char_cursor#17) ← (byte) print_str_lines::ch#2
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#17
  to:print_str_lines::@5
print_str_lines::@9: scope:[print_str_lines]  from print_str_lines::@5
  (byte*) print_str_lines::str#9 ← phi( print_str_lines::@5/(byte*) print_str_lines::str#7 )
  (byte*) print_char_cursor#32 ← phi( print_str_lines::@5/(byte*) print_char_cursor#54 )
  (byte*) print_line_cursor#30 ← phi( print_str_lines::@5/(byte*) print_line_cursor#51 )
  call print_ln 
  to:print_str_lines::@11
print_str_lines::@11: scope:[print_str_lines]  from print_str_lines::@9
  (byte*) print_str_lines::str#5 ← phi( print_str_lines::@9/(byte*) print_str_lines::str#9 )
  (byte*) print_char_cursor#18 ← phi( print_str_lines::@9/(byte*) print_char_cursor#5 )
  (byte*) print_line_cursor#16 ← phi( print_str_lines::@9/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#18
  to:print_str_lines::@1
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@1
  (byte*) print_line_cursor#17 ← phi( print_str_lines::@1/(byte*) print_line_cursor#31 )
  (byte*) print_char_cursor#19 ← phi( print_str_lines::@1/(byte*) print_char_cursor#33 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#19
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#17
  return 
  to:@return
print_ln: scope:[print_ln]  from print_str_lines::@9
  (byte*) print_char_cursor#34 ← phi( print_str_lines::@9/(byte*) print_char_cursor#32 )
  (byte*) print_line_cursor#32 ← phi( print_str_lines::@9/(byte*) print_line_cursor#30 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#20 ← phi( print_ln/(byte*) print_char_cursor#34 print_ln::@1/(byte*) print_char_cursor#20 )
  (byte*) print_line_cursor#18 ← phi( print_ln/(byte*) print_line_cursor#32 print_ln::@1/(byte*) print_line_cursor#3 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#18 + (byte/signed byte/word/signed word/dword/signed dword) $28
  (byte*) print_line_cursor#3 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#3 < (byte*) print_char_cursor#20
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#19 ← phi( print_ln::@1/(byte*) print_line_cursor#3 )
  (byte*) print_char_cursor#4 ← (byte*) print_line_cursor#19
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#21 ← phi( print_ln::@2/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#20 ← phi( print_ln::@2/(byte*) print_line_cursor#19 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#20
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#21
  return 
  to:@return
@17: scope:[]  from @5
  (byte*) print_char_cursor#102 ← phi( @5/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#102 ← phi( @5/(byte*) print_line_cursor#0 )
  (byte*) print_screen#83 ← phi( @5/(byte*) print_screen#0 )
  (byte[]) print_hextab#0 ← (const string) $21
  to:@24
print_cls: scope:[print_cls]  from menu::@47
  (byte*) print_screen#8 ← phi( menu::@47/(byte*) print_screen#5 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#8
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#9 ← phi( print_cls/(byte*) print_screen#8 print_cls::@1/(byte*) print_screen#9 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#9 + (word/signed word/dword/signed dword) $3e8
  (bool~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((bool~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#10 ← phi( print_cls::@1/(byte*) print_screen#9 )
  (byte*) print_line_cursor#5 ← (byte*) print_screen#10
  (byte*) print_char_cursor#6 ← (byte*) print_line_cursor#5
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#22 ← phi( print_cls::@2/(byte*) print_char_cursor#6 )
  (byte*) print_line_cursor#21 ← phi( print_cls::@2/(byte*) print_line_cursor#5 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#21
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#22
  return 
  to:@return
print_set_screen: scope:[print_set_screen]  from menu::@19
  (byte*) print_set_screen::screen#1 ← phi( menu::@19/(byte*) print_set_screen::screen#0 )
  (byte*) print_screen#1 ← (byte*) print_set_screen::screen#1
  (byte*) print_line_cursor#7 ← (byte*) print_screen#1
  (byte*) print_char_cursor#8 ← (byte*) print_line_cursor#7
  to:print_set_screen::@return
print_set_screen::@return: scope:[print_set_screen]  from print_set_screen
  (byte*) print_char_cursor#23 ← phi( print_set_screen/(byte*) print_char_cursor#8 )
  (byte*) print_line_cursor#22 ← phi( print_set_screen/(byte*) print_line_cursor#7 )
  (byte*) print_screen#11 ← phi( print_set_screen/(byte*) print_screen#1 )
  (byte*) print_screen#2 ← (byte*) print_screen#11
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#22
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#23
  return 
  to:@return
@24: scope:[]  from @17
  (byte*) print_char_cursor#101 ← phi( @17/(byte*) print_char_cursor#102 )
  (byte*) print_line_cursor#101 ← phi( @17/(byte*) print_line_cursor#102 )
  (byte*) print_screen#82 ← phi( @17/(byte*) print_screen#83 )
  (byte) KEY_DEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) KEY_RETURN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) KEY_CRSR_RIGHT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) KEY_F7#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) KEY_F1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) KEY_F3#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) KEY_F5#0 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) KEY_CRSR_DOWN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) KEY_3#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) KEY_W#0 ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) KEY_A#0 ← (byte/signed byte/word/signed word/dword/signed dword) $a
  (byte) KEY_4#0 ← (byte/signed byte/word/signed word/dword/signed dword) $b
  (byte) KEY_Z#0 ← (byte/signed byte/word/signed word/dword/signed dword) $c
  (byte) KEY_S#0 ← (byte/signed byte/word/signed word/dword/signed dword) $d
  (byte) KEY_E#0 ← (byte/signed byte/word/signed word/dword/signed dword) $e
  (byte) KEY_LSHIFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte) KEY_5#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) KEY_R#0 ← (byte/signed byte/word/signed word/dword/signed dword) $11
  (byte) KEY_D#0 ← (byte/signed byte/word/signed word/dword/signed dword) $12
  (byte) KEY_6#0 ← (byte/signed byte/word/signed word/dword/signed dword) $13
  (byte) KEY_C#0 ← (byte/signed byte/word/signed word/dword/signed dword) $14
  (byte) KEY_F#0 ← (byte/signed byte/word/signed word/dword/signed dword) $15
  (byte) KEY_T#0 ← (byte/signed byte/word/signed word/dword/signed dword) $16
  (byte) KEY_X#0 ← (byte/signed byte/word/signed word/dword/signed dword) $17
  (byte) KEY_7#0 ← (byte/signed byte/word/signed word/dword/signed dword) $18
  (byte) KEY_Y#0 ← (byte/signed byte/word/signed word/dword/signed dword) $19
  (byte) KEY_G#0 ← (byte/signed byte/word/signed word/dword/signed dword) $1a
  (byte) KEY_8#0 ← (byte/signed byte/word/signed word/dword/signed dword) $1b
  (byte) KEY_B#0 ← (byte/signed byte/word/signed word/dword/signed dword) $1c
  (byte) KEY_H#0 ← (byte/signed byte/word/signed word/dword/signed dword) $1d
  (byte) KEY_U#0 ← (byte/signed byte/word/signed word/dword/signed dword) $1e
  (byte) KEY_V#0 ← (byte/signed byte/word/signed word/dword/signed dword) $1f
  (byte) KEY_9#0 ← (byte/signed byte/word/signed word/dword/signed dword) $20
  (byte) KEY_I#0 ← (byte/signed byte/word/signed word/dword/signed dword) $21
  (byte) KEY_J#0 ← (byte/signed byte/word/signed word/dword/signed dword) $22
  (byte) KEY_0#0 ← (byte/signed byte/word/signed word/dword/signed dword) $23
  (byte) KEY_M#0 ← (byte/signed byte/word/signed word/dword/signed dword) $24
  (byte) KEY_K#0 ← (byte/signed byte/word/signed word/dword/signed dword) $25
  (byte) KEY_O#0 ← (byte/signed byte/word/signed word/dword/signed dword) $26
  (byte) KEY_N#0 ← (byte/signed byte/word/signed word/dword/signed dword) $27
  (byte) KEY_PLUS#0 ← (byte/signed byte/word/signed word/dword/signed dword) $28
  (byte) KEY_P#0 ← (byte/signed byte/word/signed word/dword/signed dword) $29
  (byte) KEY_L#0 ← (byte/signed byte/word/signed word/dword/signed dword) $2a
  (byte) KEY_MINUS#0 ← (byte/signed byte/word/signed word/dword/signed dword) $2b
  (byte) KEY_DOT#0 ← (byte/signed byte/word/signed word/dword/signed dword) $2c
  (byte) KEY_COLON#0 ← (byte/signed byte/word/signed word/dword/signed dword) $2d
  (byte) KEY_AT#0 ← (byte/signed byte/word/signed word/dword/signed dword) $2e
  (byte) KEY_COMMA#0 ← (byte/signed byte/word/signed word/dword/signed dword) $2f
  (byte) KEY_POUND#0 ← (byte/signed byte/word/signed word/dword/signed dword) $30
  (byte) KEY_ASTERISK#0 ← (byte/signed byte/word/signed word/dword/signed dword) $31
  (byte) KEY_SEMICOLON#0 ← (byte/signed byte/word/signed word/dword/signed dword) $32
  (byte) KEY_HOME#0 ← (byte/signed byte/word/signed word/dword/signed dword) $33
  (byte) KEY_RSHIFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) $34
  (byte) KEY_EQUALS#0 ← (byte/signed byte/word/signed word/dword/signed dword) $35
  (byte) KEY_ARROW_UP#0 ← (byte/signed byte/word/signed word/dword/signed dword) $36
  (byte) KEY_SLASH#0 ← (byte/signed byte/word/signed word/dword/signed dword) $37
  (byte) KEY_1#0 ← (byte/signed byte/word/signed word/dword/signed dword) $38
  (byte) KEY_ARROW_LEFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) $39
  (byte) KEY_CTRL#0 ← (byte/signed byte/word/signed word/dword/signed dword) $3a
  (byte) KEY_2#0 ← (byte/signed byte/word/signed word/dword/signed dword) $3b
  (byte) KEY_SPACE#0 ← (byte/signed byte/word/signed word/dword/signed dword) $3c
  (byte) KEY_COMMODORE#0 ← (byte/signed byte/word/signed word/dword/signed dword) $3d
  (byte) KEY_Q#0 ← (byte/signed byte/word/signed word/dword/signed dword) $3e
  (byte) KEY_RUNSTOP#0 ← (byte/signed byte/word/signed word/dword/signed dword) $3f
  (byte[]) keyboard_char_keycodes#0 ← { (byte) KEY_AT#0, (byte) KEY_A#0, (byte) KEY_B#0, (byte) KEY_C#0, (byte) KEY_D#0, (byte) KEY_E#0, (byte) KEY_F#0, (byte) KEY_G#0, (byte) KEY_H#0, (byte) KEY_I#0, (byte) KEY_J#0, (byte) KEY_K#0, (byte) KEY_L#0, (byte) KEY_M#0, (byte) KEY_N#0, (byte) KEY_O#0, (byte) KEY_P#0, (byte) KEY_Q#0, (byte) KEY_R#0, (byte) KEY_S#0, (byte) KEY_T#0, (byte) KEY_U#0, (byte) KEY_V#0, (byte) KEY_W#0, (byte) KEY_X#0, (byte) KEY_Y#0, (byte) KEY_Z#0, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte) KEY_POUND#0, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte) KEY_ARROW_UP#0, (byte) KEY_ARROW_LEFT#0, (byte) KEY_SPACE#0, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte) KEY_ASTERISK#0, (byte) KEY_PLUS#0, (byte) KEY_COMMA#0, (byte) KEY_MINUS#0, (byte) KEY_DOT#0, (byte) KEY_SLASH#0, (byte) KEY_0#0, (byte) KEY_1#0, (byte) KEY_2#0, (byte) KEY_3#0, (byte) KEY_4#0, (byte) KEY_5#0, (byte) KEY_6#0, (byte) KEY_7#0, (byte) KEY_8#0, (byte) KEY_9#0, (byte) KEY_COLON#0, (byte) KEY_SEMICOLON#0, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte) KEY_EQUALS#0, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f }
  (byte[8]) keyboard_matrix_row_bitmask#0 ← { (byte/word/signed word/dword/signed dword) $fe, (byte/word/signed word/dword/signed dword) $fd, (byte/word/signed word/dword/signed dword) $fb, (byte/word/signed word/dword/signed dword) $f7, (byte/word/signed word/dword/signed dword) $ef, (byte/word/signed word/dword/signed dword) $df, (byte/word/signed word/dword/signed dword) $bf, (byte/signed byte/word/signed word/dword/signed dword) $7f }
  (byte[8]) keyboard_matrix_col_bitmask#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) $10, (byte/signed byte/word/signed word/dword/signed dword) $20, (byte/signed byte/word/signed word/dword/signed dword) $40, (byte/word/signed word/dword/signed dword) $80 }
  to:@28
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_key_pressed
  (byte) keyboard_matrix_read::rowid#1 ← phi( keyboard_key_pressed/(byte) keyboard_matrix_read::rowid#0 )
  *((byte*) CIA1_PORT_A#0) ← *((byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#1)
  (byte~) keyboard_matrix_read::$0 ← ~ *((byte*) CIA1_PORT_B#0)
  (byte) keyboard_matrix_read::row_pressed_bits#0 ← (byte~) keyboard_matrix_read::$0
  (byte) keyboard_matrix_read::return#0 ← (byte) keyboard_matrix_read::row_pressed_bits#0
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  (byte) keyboard_matrix_read::return#3 ← phi( keyboard_matrix_read/(byte) keyboard_matrix_read::return#0 )
  (byte) keyboard_matrix_read::return#1 ← (byte) keyboard_matrix_read::return#3
  return 
  to:@return
keyboard_key_pressed: scope:[keyboard_key_pressed]  from menu::@10 menu::@11 menu::@12 menu::@13 menu::@14 menu::@15 menu::@16 menu::@4 menu::@6 menu::@7 menu::@8 menu::@9 mode_ctrl::@10 mode_ctrl::@11 mode_ctrl::@12 mode_ctrl::@13 mode_ctrl::@6 mode_ctrl::@7 mode_ctrl::@8 mode_ctrl::@9
  (byte) keyboard_key_pressed::key#20 ← phi( menu::@10/(byte) keyboard_key_pressed::key#5 menu::@11/(byte) keyboard_key_pressed::key#6 menu::@12/(byte) keyboard_key_pressed::key#7 menu::@13/(byte) keyboard_key_pressed::key#8 menu::@14/(byte) keyboard_key_pressed::key#9 menu::@15/(byte) keyboard_key_pressed::key#10 menu::@16/(byte) keyboard_key_pressed::key#11 menu::@4/(byte) keyboard_key_pressed::key#0 menu::@6/(byte) keyboard_key_pressed::key#1 menu::@7/(byte) keyboard_key_pressed::key#2 menu::@8/(byte) keyboard_key_pressed::key#3 menu::@9/(byte) keyboard_key_pressed::key#4 mode_ctrl::@10/(byte) keyboard_key_pressed::key#16 mode_ctrl::@11/(byte) keyboard_key_pressed::key#17 mode_ctrl::@12/(byte) keyboard_key_pressed::key#18 mode_ctrl::@13/(byte) keyboard_key_pressed::key#19 mode_ctrl::@6/(byte) keyboard_key_pressed::key#12 mode_ctrl::@7/(byte) keyboard_key_pressed::key#13 mode_ctrl::@8/(byte) keyboard_key_pressed::key#14 mode_ctrl::@9/(byte) keyboard_key_pressed::key#15 )
  (byte~) keyboard_key_pressed::$0 ← (byte) keyboard_key_pressed::key#20 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) keyboard_key_pressed::colidx#0 ← (byte~) keyboard_key_pressed::$0
  (byte~) keyboard_key_pressed::$1 ← (byte) keyboard_key_pressed::key#20 >> (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) keyboard_key_pressed::rowidx#0 ← (byte~) keyboard_key_pressed::$1
  (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_key_pressed::rowidx#0
  call keyboard_matrix_read 
  (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#1
  to:keyboard_key_pressed::@2
keyboard_key_pressed::@2: scope:[keyboard_key_pressed]  from keyboard_key_pressed
  (byte) keyboard_key_pressed::colidx#1 ← phi( keyboard_key_pressed/(byte) keyboard_key_pressed::colidx#0 )
  (byte) keyboard_matrix_read::return#4 ← phi( keyboard_key_pressed/(byte) keyboard_matrix_read::return#2 )
  (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#4
  (byte~) keyboard_key_pressed::$3 ← (byte~) keyboard_key_pressed::$2 & *((byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#1)
  (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$3
  to:keyboard_key_pressed::@return
keyboard_key_pressed::@return: scope:[keyboard_key_pressed]  from keyboard_key_pressed::@2
  (byte) keyboard_key_pressed::return#22 ← phi( keyboard_key_pressed::@2/(byte) keyboard_key_pressed::return#0 )
  (byte) keyboard_key_pressed::return#1 ← (byte) keyboard_key_pressed::return#22
  return 
  to:@return
@28: scope:[]  from @24
  (byte*) print_char_cursor#99 ← phi( @24/(byte*) print_char_cursor#101 )
  (byte*) print_line_cursor#99 ← phi( @24/(byte*) print_line_cursor#101 )
  (byte*) print_screen#80 ← phi( @24/(byte*) print_screen#82 )
  (byte[8]) keyboard_events#0 ← { fill( 8, 0) }
  (byte) keyboard_events_size#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) keyboard_modifiers#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) KEY_MODIFIER_LSHIFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) KEY_MODIFIER_RSHIFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) KEY_MODIFIER_CTRL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) KEY_MODIFIER_COMMODORE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte~) $0 ← (byte) KEY_MODIFIER_LSHIFT#0 | (byte) KEY_MODIFIER_RSHIFT#0
  (byte) KEY_MODIFIER_SHIFT#0 ← (byte~) $0
  (byte[8]) keyboard_scan_values#0 ← { fill( 8, 0) }
  to:@31
@31: scope:[]  from @28
  (byte*) print_char_cursor#85 ← phi( @28/(byte*) print_char_cursor#99 )
  (byte*) print_line_cursor#85 ← phi( @28/(byte*) print_line_cursor#99 )
  (byte*) print_screen#66 ← phi( @28/(byte*) print_screen#80 )
  (byte[$100]) bitmap_plot_xlo#0 ← { fill( $100, 0) }
  (byte[$100]) bitmap_plot_xhi#0 ← { fill( $100, 0) }
  (byte[$100]) bitmap_plot_ylo#0 ← { fill( $100, 0) }
  (byte[$100]) bitmap_plot_yhi#0 ← { fill( $100, 0) }
  (byte[$100]) bitmap_plot_bit#0 ← { fill( $100, 0) }
  to:@40
bitmap_init: scope:[bitmap_init]  from mode_stdbitmap::@7
  (byte*) bitmap_init::bitmap#2 ← phi( mode_stdbitmap::@7/(byte*) bitmap_init::bitmap#0 )
  (byte) bitmap_init::bits#0 ← (byte/word/signed word/dword/signed dword) $80
  (byte) bitmap_init::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte) bitmap_init::bits#0 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  (byte*) bitmap_init::bitmap#1 ← phi( bitmap_init/(byte*) bitmap_init::bitmap#2 bitmap_init::@2/(byte*) bitmap_init::bitmap#3 )
  (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte) bitmap_init::x#0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte/word/signed word/dword/signed dword) $f8
  *((byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0
  (byte~) bitmap_init::$1 ← > (byte*) bitmap_init::bitmap#1
  *((byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$1
  *((byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  (byte~) bitmap_init::$2 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) bitmap_init::bits#1 ← (byte~) bitmap_init::$2
  (bool~) bitmap_init::$3 ← (byte) bitmap_init::bits#1 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) bitmap_init::$4 ← ! (bool~) bitmap_init::$3
  if((bool~) bitmap_init::$4) goto bitmap_init::@2
  to:bitmap_init::@5
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@5
  (byte) bitmap_init::bits#4 ← phi( bitmap_init::@1/(byte) bitmap_init::bits#1 bitmap_init::@5/(byte) bitmap_init::bits#2 )
  (byte*) bitmap_init::bitmap#3 ← phi( bitmap_init::@1/(byte*) bitmap_init::bitmap#1 bitmap_init::@5/(byte*) bitmap_init::bitmap#4 )
  (byte) bitmap_init::x#3 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 bitmap_init::@5/(byte) bitmap_init::x#4 )
  (byte) bitmap_init::x#1 ← (byte) bitmap_init::x#3 + rangenext(0,$ff)
  (bool~) bitmap_init::$5 ← (byte) bitmap_init::x#1 != rangelast(0,$ff)
  if((bool~) bitmap_init::$5) goto bitmap_init::@1
  to:bitmap_init::@6
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@1
  (byte*) bitmap_init::bitmap#4 ← phi( bitmap_init::@1/(byte*) bitmap_init::bitmap#1 )
  (byte) bitmap_init::x#4 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 )
  (byte) bitmap_init::bits#2 ← (byte/word/signed word/dword/signed dword) $80
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@2
  (byte*) bitmap_init::yoffs#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) bitmap_init::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@4 bitmap_init::@6
  (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@4/(byte*) bitmap_init::yoffs#4 bitmap_init::@6/(byte*) bitmap_init::yoffs#0 )
  (byte) bitmap_init::y#2 ← phi( bitmap_init::@4/(byte) bitmap_init::y#1 bitmap_init::@6/(byte) bitmap_init::y#0 )
  (byte~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2
  (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$6 | (byte~) bitmap_init::$7
  *((byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8
  (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2
  *((byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9
  (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (bool~) bitmap_init::$11 ← (byte~) bitmap_init::$10 == (byte/signed byte/word/signed word/dword/signed dword) 7
  (bool~) bitmap_init::$12 ← ! (bool~) bitmap_init::$11
  if((bool~) bitmap_init::$12) goto bitmap_init::@4
  to:bitmap_init::@7
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@7
  (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 bitmap_init::@7/(byte*) bitmap_init::yoffs#1 )
  (byte) bitmap_init::y#3 ← phi( bitmap_init::@3/(byte) bitmap_init::y#2 bitmap_init::@7/(byte) bitmap_init::y#4 )
  (byte) bitmap_init::y#1 ← (byte) bitmap_init::y#3 + rangenext(0,$ff)
  (bool~) bitmap_init::$15 ← (byte) bitmap_init::y#1 != rangelast(0,$ff)
  if((bool~) bitmap_init::$15) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@3
  (byte) bitmap_init::y#4 ← phi( bitmap_init::@3/(byte) bitmap_init::y#2 )
  (byte*) bitmap_init::yoffs#3 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 )
  (word/signed word/dword/signed dword~) bitmap_init::$13 ← (byte/signed byte/word/signed word/dword/signed dword) $28 * (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*~) bitmap_init::$14 ← (byte*) bitmap_init::yoffs#3 + (word/signed word/dword/signed dword~) bitmap_init::$13
  (byte*) bitmap_init::yoffs#1 ← (byte*~) bitmap_init::$14
  to:bitmap_init::@4
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  return 
  to:@return
bitmap_clear: scope:[bitmap_clear]  from mode_stdbitmap::@9
  (byte*~) bitmap_clear::$0 ← ((byte*)) { *((byte[$100]) bitmap_plot_xhi#0 + (byte/signed byte/word/signed word/dword/signed dword) 0), *((byte[$100]) bitmap_plot_xlo#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) }
  (byte*) bitmap_clear::bitmap#0 ← (byte*~) bitmap_clear::$0
  (byte) bitmap_clear::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  (byte) bitmap_clear::y#4 ← phi( bitmap_clear/(byte) bitmap_clear::y#0 bitmap_clear::@3/(byte) bitmap_clear::y#1 )
  (byte*) bitmap_clear::bitmap#3 ← phi( bitmap_clear/(byte*) bitmap_clear::bitmap#0 bitmap_clear::@3/(byte*) bitmap_clear::bitmap#4 )
  (byte) bitmap_clear::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  (byte) bitmap_clear::y#3 ← phi( bitmap_clear::@1/(byte) bitmap_clear::y#4 bitmap_clear::@2/(byte) bitmap_clear::y#3 )
  (byte) bitmap_clear::x#2 ← phi( bitmap_clear::@1/(byte) bitmap_clear::x#0 bitmap_clear::@2/(byte) bitmap_clear::x#1 )
  (byte*) bitmap_clear::bitmap#2 ← phi( bitmap_clear::@1/(byte*) bitmap_clear::bitmap#3 bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2
  (byte) bitmap_clear::x#1 ← (byte) bitmap_clear::x#2 + rangenext(0,$c7)
  (bool~) bitmap_clear::$1 ← (byte) bitmap_clear::x#1 != rangelast(0,$c7)
  if((bool~) bitmap_clear::$1) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  (byte*) bitmap_clear::bitmap#4 ← phi( bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  (byte) bitmap_clear::y#2 ← phi( bitmap_clear::@2/(byte) bitmap_clear::y#3 )
  (byte) bitmap_clear::y#1 ← (byte) bitmap_clear::y#2 + rangenext(0,$27)
  (bool~) bitmap_clear::$2 ← (byte) bitmap_clear::y#1 != rangelast(0,$27)
  if((bool~) bitmap_clear::$2) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  return 
  to:@return
bitmap_plot: scope:[bitmap_plot]  from bitmap_line_xdyd::@1 bitmap_line_xdyi::@1 bitmap_line_ydxd::@1 bitmap_line_ydxi::@1
  (byte) bitmap_plot::y#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::y#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::y#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::y#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::y#2 )
  (byte) bitmap_plot::x#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::x#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::x#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::x#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::x#2 )
  (word) bitmap_plot::plotter_x#0 ← { *((byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_plot::x#4), *((byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_plot::x#4) }
  (word) bitmap_plot::plotter_y#0 ← { *((byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#4), *((byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#4) }
  (word~) bitmap_plot::$0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0
  (byte*) bitmap_plot::plotter#0 ← ((byte*)) (word~) bitmap_plot::$0
  (byte~) bitmap_plot::$1 ← *((byte*) bitmap_plot::plotter#0) | *((byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_plot::x#4)
  *((byte*) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  return 
  to:@return
bitmap_line: scope:[bitmap_line]  from mode_stdbitmap::@4
  (byte) bitmap_line::y1#13 ← phi( mode_stdbitmap::@4/(byte) bitmap_line::y1#0 )
  (byte) bitmap_line::y0#13 ← phi( mode_stdbitmap::@4/(byte) bitmap_line::y0#0 )
  (byte) bitmap_line::x1#1 ← phi( mode_stdbitmap::@4/(byte) bitmap_line::x1#0 )
  (byte) bitmap_line::x0#1 ← phi( mode_stdbitmap::@4/(byte) bitmap_line::x0#0 )
  (byte) bitmap_line::xd#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) bitmap_line::yd#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) bitmap_line::$0 ← (byte) bitmap_line::x0#1 < (byte) bitmap_line::x1#1
  if((bool~) bitmap_line::$0) goto bitmap_line::@1
  to:bitmap_line::@15
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line
  (byte) bitmap_line::y1#1 ← phi( bitmap_line/(byte) bitmap_line::y1#13 )
  (byte) bitmap_line::y0#1 ← phi( bitmap_line/(byte) bitmap_line::y0#13 )
  (byte) bitmap_line::x0#2 ← phi( bitmap_line/(byte) bitmap_line::x0#1 )
  (byte) bitmap_line::x1#2 ← phi( bitmap_line/(byte) bitmap_line::x1#1 )
  (byte~) bitmap_line::$11 ← (byte) bitmap_line::x1#2 - (byte) bitmap_line::x0#2
  (byte) bitmap_line::xd#1 ← (byte~) bitmap_line::$11
  (bool~) bitmap_line::$12 ← (byte) bitmap_line::y0#1 < (byte) bitmap_line::y1#1
  if((bool~) bitmap_line::$12) goto bitmap_line::@9
  to:bitmap_line::@23
bitmap_line::@15: scope:[bitmap_line]  from bitmap_line
  (byte) bitmap_line::y1#2 ← phi( bitmap_line/(byte) bitmap_line::y1#13 )
  (byte) bitmap_line::y0#2 ← phi( bitmap_line/(byte) bitmap_line::y0#13 )
  (byte) bitmap_line::x1#3 ← phi( bitmap_line/(byte) bitmap_line::x1#1 )
  (byte) bitmap_line::x0#3 ← phi( bitmap_line/(byte) bitmap_line::x0#1 )
  (byte~) bitmap_line::$1 ← (byte) bitmap_line::x0#3 - (byte) bitmap_line::x1#3
  (byte) bitmap_line::xd#2 ← (byte~) bitmap_line::$1
  (bool~) bitmap_line::$2 ← (byte) bitmap_line::y0#2 < (byte) bitmap_line::y1#2
  if((bool~) bitmap_line::$2) goto bitmap_line::@2
  to:bitmap_line::@16
bitmap_line::@2: scope:[bitmap_line]  from bitmap_line::@15
  (byte) bitmap_line::x0#11 ← phi( bitmap_line::@15/(byte) bitmap_line::x0#3 )
  (byte) bitmap_line::x1#11 ← phi( bitmap_line::@15/(byte) bitmap_line::x1#3 )
  (byte) bitmap_line::xd#3 ← phi( bitmap_line::@15/(byte) bitmap_line::xd#2 )
  (byte) bitmap_line::y0#3 ← phi( bitmap_line::@15/(byte) bitmap_line::y0#2 )
  (byte) bitmap_line::y1#3 ← phi( bitmap_line::@15/(byte) bitmap_line::y1#2 )
  (byte~) bitmap_line::$7 ← (byte) bitmap_line::y1#3 - (byte) bitmap_line::y0#3
  (byte) bitmap_line::yd#1 ← (byte~) bitmap_line::$7
  (bool~) bitmap_line::$8 ← (byte) bitmap_line::yd#1 < (byte) bitmap_line::xd#3
  if((bool~) bitmap_line::$8) goto bitmap_line::@6
  to:bitmap_line::@20
bitmap_line::@16: scope:[bitmap_line]  from bitmap_line::@15
  (byte) bitmap_line::x0#10 ← phi( bitmap_line::@15/(byte) bitmap_line::x0#3 )
  (byte) bitmap_line::x1#10 ← phi( bitmap_line::@15/(byte) bitmap_line::x1#3 )
  (byte) bitmap_line::xd#4 ← phi( bitmap_line::@15/(byte) bitmap_line::xd#2 )
  (byte) bitmap_line::y1#4 ← phi( bitmap_line::@15/(byte) bitmap_line::y1#2 )
  (byte) bitmap_line::y0#4 ← phi( bitmap_line::@15/(byte) bitmap_line::y0#2 )
  (byte~) bitmap_line::$3 ← (byte) bitmap_line::y0#4 - (byte) bitmap_line::y1#4
  (byte) bitmap_line::yd#2 ← (byte~) bitmap_line::$3
  (bool~) bitmap_line::$4 ← (byte) bitmap_line::yd#2 < (byte) bitmap_line::xd#4
  if((bool~) bitmap_line::$4) goto bitmap_line::@3
  to:bitmap_line::@17
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line::@16
  (byte) bitmap_line::yd#5 ← phi( bitmap_line::@16/(byte) bitmap_line::yd#2 )
  (byte) bitmap_line::xd#5 ← phi( bitmap_line::@16/(byte) bitmap_line::xd#4 )
  (byte) bitmap_line::x0#4 ← phi( bitmap_line::@16/(byte) bitmap_line::x0#10 )
  (byte) bitmap_line::y1#5 ← phi( bitmap_line::@16/(byte) bitmap_line::y1#4 )
  (byte) bitmap_line::x1#4 ← phi( bitmap_line::@16/(byte) bitmap_line::x1#10 )
  (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#4
  (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#5
  (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#4
  (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#5
  (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#5
  call bitmap_line_xdyi 
  to:bitmap_line::@29
bitmap_line::@29: scope:[bitmap_line]  from bitmap_line::@3
  to:bitmap_line::@return
bitmap_line::@17: scope:[bitmap_line]  from bitmap_line::@16
  (byte) bitmap_line::xd#6 ← phi( bitmap_line::@16/(byte) bitmap_line::xd#4 )
  (byte) bitmap_line::yd#6 ← phi( bitmap_line::@16/(byte) bitmap_line::yd#2 )
  (byte) bitmap_line::y0#5 ← phi( bitmap_line::@16/(byte) bitmap_line::y0#4 )
  (byte) bitmap_line::x1#5 ← phi( bitmap_line::@16/(byte) bitmap_line::x1#10 )
  (byte) bitmap_line::y1#6 ← phi( bitmap_line::@16/(byte) bitmap_line::y1#4 )
  (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#6
  (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#5
  (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#5
  (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#6
  (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#6
  call bitmap_line_ydxi 
  to:bitmap_line::@30
bitmap_line::@30: scope:[bitmap_line]  from bitmap_line::@17
  to:bitmap_line::@return
bitmap_line::@6: scope:[bitmap_line]  from bitmap_line::@2
  (byte) bitmap_line::yd#7 ← phi( bitmap_line::@2/(byte) bitmap_line::yd#1 )
  (byte) bitmap_line::xd#7 ← phi( bitmap_line::@2/(byte) bitmap_line::xd#3 )
  (byte) bitmap_line::x0#5 ← phi( bitmap_line::@2/(byte) bitmap_line::x0#11 )
  (byte) bitmap_line::y1#7 ← phi( bitmap_line::@2/(byte) bitmap_line::y1#3 )
  (byte) bitmap_line::x1#6 ← phi( bitmap_line::@2/(byte) bitmap_line::x1#11 )
  (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#6
  (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#7
  (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#5
  (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#7
  (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#7
  call bitmap_line_xdyd 
  to:bitmap_line::@31
bitmap_line::@31: scope:[bitmap_line]  from bitmap_line::@6
  to:bitmap_line::@return
bitmap_line::@20: scope:[bitmap_line]  from bitmap_line::@2
  (byte) bitmap_line::xd#8 ← phi( bitmap_line::@2/(byte) bitmap_line::xd#3 )
  (byte) bitmap_line::yd#8 ← phi( bitmap_line::@2/(byte) bitmap_line::yd#1 )
  (byte) bitmap_line::y1#8 ← phi( bitmap_line::@2/(byte) bitmap_line::y1#3 )
  (byte) bitmap_line::x0#6 ← phi( bitmap_line::@2/(byte) bitmap_line::x0#11 )
  (byte) bitmap_line::y0#6 ← phi( bitmap_line::@2/(byte) bitmap_line::y0#3 )
  (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#6
  (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#6
  (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#8
  (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#8
  (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#8
  call bitmap_line_ydxd 
  to:bitmap_line::@32
bitmap_line::@32: scope:[bitmap_line]  from bitmap_line::@20
  to:bitmap_line::@return
bitmap_line::@9: scope:[bitmap_line]  from bitmap_line::@1
  (byte) bitmap_line::x1#13 ← phi( bitmap_line::@1/(byte) bitmap_line::x1#2 )
  (byte) bitmap_line::x0#13 ← phi( bitmap_line::@1/(byte) bitmap_line::x0#2 )
  (byte) bitmap_line::xd#9 ← phi( bitmap_line::@1/(byte) bitmap_line::xd#1 )
  (byte) bitmap_line::y0#7 ← phi( bitmap_line::@1/(byte) bitmap_line::y0#1 )
  (byte) bitmap_line::y1#9 ← phi( bitmap_line::@1/(byte) bitmap_line::y1#1 )
  (byte~) bitmap_line::$17 ← (byte) bitmap_line::y1#9 - (byte) bitmap_line::y0#7
  (byte) bitmap_line::yd#3 ← (byte~) bitmap_line::$17
  (bool~) bitmap_line::$18 ← (byte) bitmap_line::yd#3 < (byte) bitmap_line::xd#9
  if((bool~) bitmap_line::$18) goto bitmap_line::@13
  to:bitmap_line::@27
bitmap_line::@23: scope:[bitmap_line]  from bitmap_line::@1
  (byte) bitmap_line::x1#12 ← phi( bitmap_line::@1/(byte) bitmap_line::x1#2 )
  (byte) bitmap_line::x0#12 ← phi( bitmap_line::@1/(byte) bitmap_line::x0#2 )
  (byte) bitmap_line::xd#10 ← phi( bitmap_line::@1/(byte) bitmap_line::xd#1 )
  (byte) bitmap_line::y1#10 ← phi( bitmap_line::@1/(byte) bitmap_line::y1#1 )
  (byte) bitmap_line::y0#8 ← phi( bitmap_line::@1/(byte) bitmap_line::y0#1 )
  (byte~) bitmap_line::$13 ← (byte) bitmap_line::y0#8 - (byte) bitmap_line::y1#10
  (byte) bitmap_line::yd#4 ← (byte~) bitmap_line::$13
  (bool~) bitmap_line::$14 ← (byte) bitmap_line::yd#4 < (byte) bitmap_line::xd#10
  if((bool~) bitmap_line::$14) goto bitmap_line::@10
  to:bitmap_line::@24
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@23
  (byte) bitmap_line::yd#9 ← phi( bitmap_line::@23/(byte) bitmap_line::yd#4 )
  (byte) bitmap_line::xd#11 ← phi( bitmap_line::@23/(byte) bitmap_line::xd#10 )
  (byte) bitmap_line::x1#7 ← phi( bitmap_line::@23/(byte) bitmap_line::x1#12 )
  (byte) bitmap_line::y0#9 ← phi( bitmap_line::@23/(byte) bitmap_line::y0#8 )
  (byte) bitmap_line::x0#7 ← phi( bitmap_line::@23/(byte) bitmap_line::x0#12 )
  (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#7
  (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#9
  (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#7
  (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#11
  (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#9
  call bitmap_line_xdyd 
  to:bitmap_line::@33
bitmap_line::@33: scope:[bitmap_line]  from bitmap_line::@10
  to:bitmap_line::@return
bitmap_line::@24: scope:[bitmap_line]  from bitmap_line::@23
  (byte) bitmap_line::xd#12 ← phi( bitmap_line::@23/(byte) bitmap_line::xd#10 )
  (byte) bitmap_line::yd#10 ← phi( bitmap_line::@23/(byte) bitmap_line::yd#4 )
  (byte) bitmap_line::y0#10 ← phi( bitmap_line::@23/(byte) bitmap_line::y0#8 )
  (byte) bitmap_line::x1#8 ← phi( bitmap_line::@23/(byte) bitmap_line::x1#12 )
  (byte) bitmap_line::y1#11 ← phi( bitmap_line::@23/(byte) bitmap_line::y1#10 )
  (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#11
  (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#8
  (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#10
  (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10
  (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#12
  call bitmap_line_ydxd 
  to:bitmap_line::@34
bitmap_line::@34: scope:[bitmap_line]  from bitmap_line::@24
  to:bitmap_line::@return
bitmap_line::@13: scope:[bitmap_line]  from bitmap_line::@9
  (byte) bitmap_line::yd#11 ← phi( bitmap_line::@9/(byte) bitmap_line::yd#3 )
  (byte) bitmap_line::xd#13 ← phi( bitmap_line::@9/(byte) bitmap_line::xd#9 )
  (byte) bitmap_line::x1#9 ← phi( bitmap_line::@9/(byte) bitmap_line::x1#13 )
  (byte) bitmap_line::y0#11 ← phi( bitmap_line::@9/(byte) bitmap_line::y0#7 )
  (byte) bitmap_line::x0#8 ← phi( bitmap_line::@9/(byte) bitmap_line::x0#13 )
  (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#8
  (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#11
  (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#9
  (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#13
  (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11
  call bitmap_line_xdyi 
  to:bitmap_line::@35
bitmap_line::@35: scope:[bitmap_line]  from bitmap_line::@13
  to:bitmap_line::@return
bitmap_line::@27: scope:[bitmap_line]  from bitmap_line::@9
  (byte) bitmap_line::xd#14 ← phi( bitmap_line::@9/(byte) bitmap_line::xd#9 )
  (byte) bitmap_line::yd#12 ← phi( bitmap_line::@9/(byte) bitmap_line::yd#3 )
  (byte) bitmap_line::y1#12 ← phi( bitmap_line::@9/(byte) bitmap_line::y1#9 )
  (byte) bitmap_line::x0#9 ← phi( bitmap_line::@9/(byte) bitmap_line::x0#13 )
  (byte) bitmap_line::y0#12 ← phi( bitmap_line::@9/(byte) bitmap_line::y0#7 )
  (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#12
  (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#9
  (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#12
  (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#12
  (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#14
  call bitmap_line_ydxi 
  to:bitmap_line::@36
bitmap_line::@36: scope:[bitmap_line]  from bitmap_line::@27
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@29 bitmap_line::@30 bitmap_line::@31 bitmap_line::@32 bitmap_line::@33 bitmap_line::@34 bitmap_line::@35 bitmap_line::@36
  return 
  to:@return
bitmap_line_xdyi: scope:[bitmap_line_xdyi]  from bitmap_line::@13 bitmap_line::@3
  (byte) bitmap_line_xdyi::x1#6 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::x1#1 bitmap_line::@3/(byte) bitmap_line_xdyi::x1#0 )
  (byte) bitmap_line_xdyi::xd#5 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::xd#1 bitmap_line::@3/(byte) bitmap_line_xdyi::xd#0 )
  (byte) bitmap_line_xdyi::y#5 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::y#1 bitmap_line::@3/(byte) bitmap_line_xdyi::y#0 )
  (byte) bitmap_line_xdyi::x#6 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::x#1 bitmap_line::@3/(byte) bitmap_line_xdyi::x#0 )
  (byte) bitmap_line_xdyi::yd#2 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::yd#1 bitmap_line::@3/(byte) bitmap_line_xdyi::yd#0 )
  (byte~) bitmap_line_xdyi::$0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) bitmap_line_xdyi::e#0 ← (byte~) bitmap_line_xdyi::$0
  to:bitmap_line_xdyi::@1
bitmap_line_xdyi::@1: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi bitmap_line_xdyi::@2
  (byte) bitmap_line_xdyi::x1#5 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::x1#6 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::x1#2 )
  (byte) bitmap_line_xdyi::xd#4 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::xd#5 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::xd#6 )
  (byte) bitmap_line_xdyi::yd#4 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::yd#2 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::yd#5 )
  (byte) bitmap_line_xdyi::e#5 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::e#0 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::e#6 )
  (byte) bitmap_line_xdyi::y#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::y#5 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::y#6 )
  (byte) bitmap_line_xdyi::x#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::x#6 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::x#5 )
  (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3
  (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3
  call bitmap_plot 
  to:bitmap_line_xdyi::@5
bitmap_line_xdyi::@5: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@1
  (byte) bitmap_line_xdyi::y#7 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::y#3 )
  (byte) bitmap_line_xdyi::x1#4 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::x1#5 )
  (byte) bitmap_line_xdyi::xd#2 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::xd#4 )
  (byte) bitmap_line_xdyi::yd#3 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::yd#4 )
  (byte) bitmap_line_xdyi::e#3 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::e#5 )
  (byte) bitmap_line_xdyi::x#4 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::x#3 )
  (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#4
  (byte~) bitmap_line_xdyi::$2 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#3
  (byte) bitmap_line_xdyi::e#1 ← (byte~) bitmap_line_xdyi::$2
  (bool~) bitmap_line_xdyi::$3 ← (byte) bitmap_line_xdyi::xd#2 < (byte) bitmap_line_xdyi::e#1
  (bool~) bitmap_line_xdyi::$4 ← ! (bool~) bitmap_line_xdyi::$3
  if((bool~) bitmap_line_xdyi::$4) goto bitmap_line_xdyi::@2
  to:bitmap_line_xdyi::@3
bitmap_line_xdyi::@2: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@3 bitmap_line_xdyi::@5
  (byte) bitmap_line_xdyi::xd#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::xd#3 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::xd#2 )
  (byte) bitmap_line_xdyi::yd#5 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::yd#6 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::yd#3 )
  (byte) bitmap_line_xdyi::e#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::e#2 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::e#1 )
  (byte) bitmap_line_xdyi::y#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::y#2 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::y#7 )
  (byte) bitmap_line_xdyi::x#5 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::x#7 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::x#2 )
  (byte) bitmap_line_xdyi::x1#2 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::x1#3 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::x1#4 )
  (byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#2 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) bitmap_line_xdyi::$7 ← (byte) bitmap_line_xdyi::x#5 != (byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6
  if((bool~) bitmap_line_xdyi::$7) goto bitmap_line_xdyi::@1
  to:bitmap_line_xdyi::@return
bitmap_line_xdyi::@3: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@5
  (byte) bitmap_line_xdyi::yd#6 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::yd#3 )
  (byte) bitmap_line_xdyi::x#7 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::x#2 )
  (byte) bitmap_line_xdyi::x1#3 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::x1#4 )
  (byte) bitmap_line_xdyi::xd#3 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::xd#2 )
  (byte) bitmap_line_xdyi::e#4 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::e#1 )
  (byte) bitmap_line_xdyi::y#4 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::y#7 )
  (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#4
  (byte~) bitmap_line_xdyi::$5 ← (byte) bitmap_line_xdyi::e#4 - (byte) bitmap_line_xdyi::xd#3
  (byte) bitmap_line_xdyi::e#2 ← (byte~) bitmap_line_xdyi::$5
  to:bitmap_line_xdyi::@2
bitmap_line_xdyi::@return: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@2
  return 
  to:@return
bitmap_line_xdyd: scope:[bitmap_line_xdyd]  from bitmap_line::@10 bitmap_line::@6
  (byte) bitmap_line_xdyd::x1#6 ← phi( bitmap_line::@10/(byte) bitmap_line_xdyd::x1#1 bitmap_line::@6/(byte) bitmap_line_xdyd::x1#0 )
  (byte) bitmap_line_xdyd::xd#5 ← phi( bitmap_line::@10/(byte) bitmap_line_xdyd::xd#1 bitmap_line::@6/(byte) bitmap_line_xdyd::xd#0 )
  (byte) bitmap_line_xdyd::y#5 ← phi( bitmap_line::@10/(byte) bitmap_line_xdyd::y#1 bitmap_line::@6/(byte) bitmap_line_xdyd::y#0 )
  (byte) bitmap_line_xdyd::x#6 ← phi( bitmap_line::@10/(byte) bitmap_line_xdyd::x#1 bitmap_line::@6/(byte) bitmap_line_xdyd::x#0 )
  (byte) bitmap_line_xdyd::yd#2 ← phi( bitmap_line::@10/(byte) bitmap_line_xdyd::yd#1 bitmap_line::@6/(byte) bitmap_line_xdyd::yd#0 )
  (byte~) bitmap_line_xdyd::$0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) bitmap_line_xdyd::e#0 ← (byte~) bitmap_line_xdyd::$0
  to:bitmap_line_xdyd::@1
bitmap_line_xdyd::@1: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd bitmap_line_xdyd::@2
  (byte) bitmap_line_xdyd::x1#5 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::x1#6 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::x1#2 )
  (byte) bitmap_line_xdyd::xd#4 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::xd#5 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::xd#6 )
  (byte) bitmap_line_xdyd::yd#4 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::yd#2 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::yd#5 )
  (byte) bitmap_line_xdyd::e#5 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::e#0 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::e#6 )
  (byte) bitmap_line_xdyd::y#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::y#5 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::y#6 )
  (byte) bitmap_line_xdyd::x#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::x#6 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::x#5 )
  (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3
  (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3
  call bitmap_plot 
  to:bitmap_line_xdyd::@5
bitmap_line_xdyd::@5: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@1
  (byte) bitmap_line_xdyd::y#7 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::y#3 )
  (byte) bitmap_line_xdyd::x1#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::x1#5 )
  (byte) bitmap_line_xdyd::xd#2 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::xd#4 )
  (byte) bitmap_line_xdyd::yd#3 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::yd#4 )
  (byte) bitmap_line_xdyd::e#3 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::e#5 )
  (byte) bitmap_line_xdyd::x#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::x#3 )
  (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#4
  (byte~) bitmap_line_xdyd::$2 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#3
  (byte) bitmap_line_xdyd::e#1 ← (byte~) bitmap_line_xdyd::$2
  (bool~) bitmap_line_xdyd::$3 ← (byte) bitmap_line_xdyd::xd#2 < (byte) bitmap_line_xdyd::e#1
  (bool~) bitmap_line_xdyd::$4 ← ! (bool~) bitmap_line_xdyd::$3
  if((bool~) bitmap_line_xdyd::$4) goto bitmap_line_xdyd::@2
  to:bitmap_line_xdyd::@3
bitmap_line_xdyd::@2: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@3 bitmap_line_xdyd::@5
  (byte) bitmap_line_xdyd::xd#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::xd#3 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::xd#2 )
  (byte) bitmap_line_xdyd::yd#5 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::yd#6 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::yd#3 )
  (byte) bitmap_line_xdyd::e#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::e#2 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::e#1 )
  (byte) bitmap_line_xdyd::y#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::y#2 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::y#7 )
  (byte) bitmap_line_xdyd::x#5 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::x#7 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::x#2 )
  (byte) bitmap_line_xdyd::x1#2 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::x1#3 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::x1#4 )
  (byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#2 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) bitmap_line_xdyd::$7 ← (byte) bitmap_line_xdyd::x#5 != (byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6
  if((bool~) bitmap_line_xdyd::$7) goto bitmap_line_xdyd::@1
  to:bitmap_line_xdyd::@return
bitmap_line_xdyd::@3: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@5
  (byte) bitmap_line_xdyd::yd#6 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::yd#3 )
  (byte) bitmap_line_xdyd::x#7 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::x#2 )
  (byte) bitmap_line_xdyd::x1#3 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::x1#4 )
  (byte) bitmap_line_xdyd::xd#3 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::xd#2 )
  (byte) bitmap_line_xdyd::e#4 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::e#1 )
  (byte) bitmap_line_xdyd::y#4 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::y#7 )
  (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#4
  (byte~) bitmap_line_xdyd::$5 ← (byte) bitmap_line_xdyd::e#4 - (byte) bitmap_line_xdyd::xd#3
  (byte) bitmap_line_xdyd::e#2 ← (byte~) bitmap_line_xdyd::$5
  to:bitmap_line_xdyd::@2
bitmap_line_xdyd::@return: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@2
  return 
  to:@return
bitmap_line_ydxi: scope:[bitmap_line_ydxi]  from bitmap_line::@17 bitmap_line::@27
  (byte) bitmap_line_ydxi::y1#6 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxi::y1#0 bitmap_line::@27/(byte) bitmap_line_ydxi::y1#1 )
  (byte) bitmap_line_ydxi::yd#5 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxi::yd#0 bitmap_line::@27/(byte) bitmap_line_ydxi::yd#1 )
  (byte) bitmap_line_ydxi::y#6 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxi::y#0 bitmap_line::@27/(byte) bitmap_line_ydxi::y#1 )
  (byte) bitmap_line_ydxi::x#5 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxi::x#0 bitmap_line::@27/(byte) bitmap_line_ydxi::x#1 )
  (byte) bitmap_line_ydxi::xd#2 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxi::xd#0 bitmap_line::@27/(byte) bitmap_line_ydxi::xd#1 )
  (byte~) bitmap_line_ydxi::$0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) bitmap_line_ydxi::e#0 ← (byte~) bitmap_line_ydxi::$0
  to:bitmap_line_ydxi::@1
bitmap_line_ydxi::@1: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi bitmap_line_ydxi::@2
  (byte) bitmap_line_ydxi::y1#5 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::y1#6 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::y1#2 )
  (byte) bitmap_line_ydxi::yd#4 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::yd#5 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::yd#6 )
  (byte) bitmap_line_ydxi::xd#4 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::xd#2 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::xd#5 )
  (byte) bitmap_line_ydxi::e#5 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::e#0 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::e#6 )
  (byte) bitmap_line_ydxi::y#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::y#6 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::y#5 )
  (byte) bitmap_line_ydxi::x#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::x#5 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::x#6 )
  (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3
  (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3
  call bitmap_plot 
  to:bitmap_line_ydxi::@5
bitmap_line_ydxi::@5: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@1
  (byte) bitmap_line_ydxi::x#7 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::x#3 )
  (byte) bitmap_line_ydxi::y1#4 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::y1#5 )
  (byte) bitmap_line_ydxi::yd#2 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::yd#4 )
  (byte) bitmap_line_ydxi::xd#3 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::xd#4 )
  (byte) bitmap_line_ydxi::e#3 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::e#5 )
  (byte) bitmap_line_ydxi::y#4 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::y#3 )
  (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#4
  (byte~) bitmap_line_ydxi::$2 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#3
  (byte) bitmap_line_ydxi::e#1 ← (byte~) bitmap_line_ydxi::$2
  (bool~) bitmap_line_ydxi::$3 ← (byte) bitmap_line_ydxi::yd#2 < (byte) bitmap_line_ydxi::e#1
  (bool~) bitmap_line_ydxi::$4 ← ! (bool~) bitmap_line_ydxi::$3
  if((bool~) bitmap_line_ydxi::$4) goto bitmap_line_ydxi::@2
  to:bitmap_line_ydxi::@3
bitmap_line_ydxi::@2: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@3 bitmap_line_ydxi::@5
  (byte) bitmap_line_ydxi::yd#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::yd#3 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::yd#2 )
  (byte) bitmap_line_ydxi::xd#5 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::xd#6 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::xd#3 )
  (byte) bitmap_line_ydxi::e#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::e#2 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::e#1 )
  (byte) bitmap_line_ydxi::x#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::x#2 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::x#7 )
  (byte) bitmap_line_ydxi::y#5 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::y#7 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::y#2 )
  (byte) bitmap_line_ydxi::y1#2 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::y1#3 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::y1#4 )
  (byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#2 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) bitmap_line_ydxi::$7 ← (byte) bitmap_line_ydxi::y#5 != (byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6
  if((bool~) bitmap_line_ydxi::$7) goto bitmap_line_ydxi::@1
  to:bitmap_line_ydxi::@return
bitmap_line_ydxi::@3: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@5
  (byte) bitmap_line_ydxi::xd#6 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::xd#3 )
  (byte) bitmap_line_ydxi::y#7 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::y#2 )
  (byte) bitmap_line_ydxi::y1#3 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::y1#4 )
  (byte) bitmap_line_ydxi::yd#3 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::yd#2 )
  (byte) bitmap_line_ydxi::e#4 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::e#1 )
  (byte) bitmap_line_ydxi::x#4 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::x#7 )
  (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#4
  (byte~) bitmap_line_ydxi::$5 ← (byte) bitmap_line_ydxi::e#4 - (byte) bitmap_line_ydxi::yd#3
  (byte) bitmap_line_ydxi::e#2 ← (byte~) bitmap_line_ydxi::$5
  to:bitmap_line_ydxi::@2
bitmap_line_ydxi::@return: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@2
  return 
  to:@return
bitmap_line_ydxd: scope:[bitmap_line_ydxd]  from bitmap_line::@20 bitmap_line::@24
  (byte) bitmap_line_ydxd::y1#6 ← phi( bitmap_line::@20/(byte) bitmap_line_ydxd::y1#0 bitmap_line::@24/(byte) bitmap_line_ydxd::y1#1 )
  (byte) bitmap_line_ydxd::yd#5 ← phi( bitmap_line::@20/(byte) bitmap_line_ydxd::yd#0 bitmap_line::@24/(byte) bitmap_line_ydxd::yd#1 )
  (byte) bitmap_line_ydxd::y#7 ← phi( bitmap_line::@20/(byte) bitmap_line_ydxd::y#0 bitmap_line::@24/(byte) bitmap_line_ydxd::y#1 )
  (byte) bitmap_line_ydxd::x#5 ← phi( bitmap_line::@20/(byte) bitmap_line_ydxd::x#0 bitmap_line::@24/(byte) bitmap_line_ydxd::x#1 )
  (byte) bitmap_line_ydxd::xd#2 ← phi( bitmap_line::@20/(byte) bitmap_line_ydxd::xd#0 bitmap_line::@24/(byte) bitmap_line_ydxd::xd#1 )
  (byte~) bitmap_line_ydxd::$0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) bitmap_line_ydxd::e#0 ← (byte~) bitmap_line_ydxd::$0
  to:bitmap_line_ydxd::@1
bitmap_line_ydxd::@1: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd bitmap_line_ydxd::@2
  (byte) bitmap_line_ydxd::y1#5 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::y1#6 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::y1#2 )
  (byte) bitmap_line_ydxd::yd#4 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::yd#5 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::yd#6 )
  (byte) bitmap_line_ydxd::xd#4 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::xd#2 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::xd#5 )
  (byte) bitmap_line_ydxd::e#5 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::e#0 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::e#6 )
  (byte) bitmap_line_ydxd::y#4 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::y#7 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::y#6 )
  (byte) bitmap_line_ydxd::x#3 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::x#5 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::x#6 )
  (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3
  (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#4
  call bitmap_plot 
  to:bitmap_line_ydxd::@5
bitmap_line_ydxd::@5: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@1
  (byte) bitmap_line_ydxd::x#7 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::x#3 )
  (byte) bitmap_line_ydxd::y1#4 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::y1#5 )
  (byte) bitmap_line_ydxd::yd#2 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::yd#4 )
  (byte) bitmap_line_ydxd::xd#3 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::xd#4 )
  (byte) bitmap_line_ydxd::e#3 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::e#5 )
  (byte) bitmap_line_ydxd::y#5 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::y#4 )
  (byte) bitmap_line_ydxd::y#2 ← (byte) bitmap_line_ydxd::y#5
  (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2
  (byte~) bitmap_line_ydxd::$2 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#3
  (byte) bitmap_line_ydxd::e#1 ← (byte~) bitmap_line_ydxd::$2
  (bool~) bitmap_line_ydxd::$3 ← (byte) bitmap_line_ydxd::yd#2 < (byte) bitmap_line_ydxd::e#1
  (bool~) bitmap_line_ydxd::$4 ← ! (bool~) bitmap_line_ydxd::$3
  if((bool~) bitmap_line_ydxd::$4) goto bitmap_line_ydxd::@2
  to:bitmap_line_ydxd::@3
bitmap_line_ydxd::@2: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@3 bitmap_line_ydxd::@5
  (byte) bitmap_line_ydxd::yd#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::yd#3 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::yd#2 )
  (byte) bitmap_line_ydxd::xd#5 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::xd#6 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::xd#3 )
  (byte) bitmap_line_ydxd::e#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::e#2 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::e#1 )
  (byte) bitmap_line_ydxd::x#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::x#2 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::x#7 )
  (byte) bitmap_line_ydxd::y#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::y#8 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::y#3 )
  (byte) bitmap_line_ydxd::y1#2 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::y1#3 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::y1#4 )
  (byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#2 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) bitmap_line_ydxd::$7 ← (byte) bitmap_line_ydxd::y#6 != (byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6
  if((bool~) bitmap_line_ydxd::$7) goto bitmap_line_ydxd::@1
  to:bitmap_line_ydxd::@return
bitmap_line_ydxd::@3: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@5
  (byte) bitmap_line_ydxd::xd#6 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::xd#3 )
  (byte) bitmap_line_ydxd::y#8 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::y#3 )
  (byte) bitmap_line_ydxd::y1#3 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::y1#4 )
  (byte) bitmap_line_ydxd::yd#3 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::yd#2 )
  (byte) bitmap_line_ydxd::e#4 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::e#1 )
  (byte) bitmap_line_ydxd::x#4 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::x#7 )
  (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#4
  (byte~) bitmap_line_ydxd::$5 ← (byte) bitmap_line_ydxd::e#4 - (byte) bitmap_line_ydxd::yd#3
  (byte) bitmap_line_ydxd::e#2 ← (byte~) bitmap_line_ydxd::$5
  to:bitmap_line_ydxd::@2
bitmap_line_ydxd::@return: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@2
  return 
  to:@return
main: scope:[main]  from @54
  (byte) dtv_control#130 ← phi( @54/(byte) dtv_control#129 )
  (byte*) print_char_cursor#55 ← phi( @54/(byte*) print_char_cursor#51 )
  (byte*) print_line_cursor#52 ← phi( @54/(byte*) print_line_cursor#49 )
  (byte*) print_screen#34 ← phi( @54/(byte*) print_screen#33 )
  asm { sei  }
  *((byte*) PROCPORT_DDR#0) ← (byte) PROCPORT_DDR_MEMORY_MASK#0
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_IO#0
  *((byte*) DTV_FEATURE#0) ← (byte) DTV_FEATURE_ENABLE#0
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte) dtv_control#99 ← phi( main/(byte) dtv_control#130 main::@7/(byte) dtv_control#0 )
  (byte*) print_char_cursor#36 ← phi( main/(byte*) print_char_cursor#55 main::@7/(byte*) print_char_cursor#10 )
  (byte*) print_line_cursor#34 ← phi( main/(byte*) print_line_cursor#52 main::@7/(byte*) print_line_cursor#9 )
  (byte*) print_screen#18 ← phi( main/(byte*) print_screen#34 main::@7/(byte*) print_screen#3 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) dtv_control#98 ← phi( main::@1/(byte) dtv_control#99 )
  (byte*) print_char_cursor#35 ← phi( main::@1/(byte*) print_char_cursor#36 )
  (byte*) print_line_cursor#33 ← phi( main::@1/(byte*) print_line_cursor#34 )
  (byte*) print_screen#17 ← phi( main::@1/(byte*) print_screen#18 )
  call menu 
  to:main::@7
main::@7: scope:[main]  from main::@2
  (byte) dtv_control#55 ← phi( main::@2/(byte) dtv_control#3 )
  (byte*) print_char_cursor#24 ← phi( main::@2/(byte*) print_char_cursor#15 )
  (byte*) print_line_cursor#23 ← phi( main::@2/(byte*) print_line_cursor#14 )
  (byte*) print_screen#12 ← phi( main::@2/(byte*) print_screen#6 )
  (byte*) print_screen#3 ← (byte*) print_screen#12
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#23
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#24
  (byte) dtv_control#0 ← (byte) dtv_control#55
  to:main::@1
main::@return: scope:[main]  from main::@1
  (byte) dtv_control#56 ← phi( main::@1/(byte) dtv_control#99 )
  (byte*) print_char_cursor#25 ← phi( main::@1/(byte*) print_char_cursor#36 )
  (byte*) print_line_cursor#24 ← phi( main::@1/(byte*) print_line_cursor#34 )
  (byte*) print_screen#13 ← phi( main::@1/(byte*) print_screen#18 )
  (byte*) print_screen#4 ← (byte*) print_screen#13
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#24
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#25
  (byte) dtv_control#1 ← (byte) dtv_control#56
  return 
  to:@return
@40: scope:[]  from @31
  (byte*) print_char_cursor#84 ← phi( @31/(byte*) print_char_cursor#85 )
  (byte*) print_line_cursor#83 ← phi( @31/(byte*) print_line_cursor#85 )
  (byte*) print_screen#65 ← phi( @31/(byte*) print_screen#66 )
  (string~) $1 ← (const string) $22 + (const string) $23
  (string~) $2 ← (string~) $1 + (const string) $24
  (string~) $3 ← (string~) $2 + (const string) $25
  (string~) $4 ← (string~) $3 + (const string) $26
  (string~) $5 ← (string~) $4 + (const string) $27
  (string~) $6 ← (string~) $5 + (const string) $28
  (string~) $7 ← (string~) $6 + (const string) $29
  (string~) $8 ← (string~) $7 + (const string) $30
  (string~) $9 ← (string~) $8 + (const string) $31
  (string~) $10 ← (string~) $9 + (const string) $32
  (string~) $11 ← (string~) $10 + (const string) $33
  (string~) $12 ← (string~) $11 + (const string) $34
  (string~) $13 ← (string~) $12 + (const string) $35
  (string~) $14 ← (string~) $13 + (const string) $36
  (string~) $15 ← (string~) $14 + (const string) $37
  (string~) $16 ← (string~) $15 + (const string) $38
  (string~) $17 ← (string~) $16 + (const string) $39
  (string~) $18 ← (string~) $17 + (const string) $40
  (string~) $19 ← (string~) $18 + (const string) $41
  (string~) $20 ← (string~) $19 + (const string) $42
  (byte[]) MENU_TEXT#0 ← (string~) $20
  to:@41
menu: scope:[menu]  from main::@2
  (byte) dtv_control#255 ← phi( main::@2/(byte) dtv_control#98 )
  (byte*) print_char_cursor#100 ← phi( main::@2/(byte*) print_char_cursor#35 )
  (byte*) print_line_cursor#100 ← phi( main::@2/(byte*) print_line_cursor#33 )
  (byte*) print_screen#81 ← phi( main::@2/(byte*) print_screen#17 )
  (byte*) menu::SCREEN#0 ← ((byte*)) (word/dword/signed dword) $8000
  (byte*) menu::CHARSET#0 ← ((byte*)) (word/dword/signed dword) $9800
  (dword~) menu::$0 ← ((dword)) (byte*) menu::CHARSET#0
  (dword~) menu::$1 ← (dword~) menu::$0 / (dword/signed dword) $10000
  (byte~) menu::$2 ← ((byte)) (dword~) menu::$1
  *((byte*) DTV_GRAPHICS_VIC_BANK#0) ← (byte~) menu::$2
  (dword~) menu::$3 ← (dword) DTV_COLOR_BANK_DEFAULT#0 / (word/signed word/dword/signed dword) $400
  (word~) menu::$4 ← ((word)) (dword~) menu::$3
  (byte~) menu::$5 ← < (word~) menu::$4
  *((byte*) DTV_COLOR_BANK_LO#0) ← (byte~) menu::$5
  (dword~) menu::$6 ← (dword) DTV_COLOR_BANK_DEFAULT#0 / (word/signed word/dword/signed dword) $400
  (word~) menu::$7 ← ((word)) (dword~) menu::$6
  (byte~) menu::$8 ← > (word~) menu::$7
  *((byte*) DTV_COLOR_BANK_HI#0) ← (byte~) menu::$8
  *((byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) menu::$9 ← ((word)) (byte*) menu::CHARSET#0
  (word/signed dword/dword~) menu::$10 ← (word~) menu::$9 / (word/signed word/dword/signed dword) $4000
  (byte~) menu::$11 ← ((byte)) (word/signed dword/dword~) menu::$10
  (byte/word/dword~) menu::$12 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) menu::$11
  *((byte*) CIA2_PORT_A#0) ← (byte/word/dword~) menu::$12
  (byte~) menu::$13 ← (byte) VIC_DEN#0 | (byte) VIC_RSEL#0
  (byte/word/dword~) menu::$14 ← (byte~) menu::$13 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) menu::$14
  *((byte*) VIC_CONTROL2#0) ← (byte) VIC_CSEL#0
  (word~) menu::$15 ← ((word)) (byte*) menu::SCREEN#0
  (word~) menu::$16 ← (word~) menu::$15 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) menu::$17 ← (word~) menu::$16 / (byte/signed byte/word/signed word/dword/signed dword) $40
  (word~) menu::$18 ← ((word)) (byte*) menu::CHARSET#0
  (word~) menu::$19 ← (word~) menu::$18 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) menu::$20 ← (word~) menu::$19 / (word/signed word/dword/signed dword) $400
  (word/dword~) menu::$21 ← (word/signed dword/dword~) menu::$17 | (word/signed dword/dword~) menu::$20
  (byte~) menu::$22 ← ((byte)) (word/dword~) menu::$21
  *((byte*) VIC_MEMORY#0) ← (byte~) menu::$22
  (byte) menu::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:menu::@1
menu::@1: scope:[menu]  from menu menu::@1
  (byte) dtv_control#246 ← phi( menu/(byte) dtv_control#255 menu::@1/(byte) dtv_control#246 )
  (byte*) print_char_cursor#86 ← phi( menu/(byte*) print_char_cursor#100 menu::@1/(byte*) print_char_cursor#86 )
  (byte*) print_line_cursor#86 ← phi( menu/(byte*) print_line_cursor#100 menu::@1/(byte*) print_line_cursor#86 )
  (byte*) print_screen#67 ← phi( menu/(byte*) print_screen#81 menu::@1/(byte*) print_screen#67 )
  (byte) menu::i#2 ← phi( menu/(byte) menu::i#0 menu::@1/(byte) menu::i#1 )
  *((byte*) DTV_PALETTE#0 + (byte) menu::i#2) ← *((byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) menu::i#2)
  (byte) menu::i#1 ← (byte) menu::i#2 + rangenext(0,$f)
  (bool~) menu::$23 ← (byte) menu::i#1 != rangelast(0,$f)
  if((bool~) menu::$23) goto menu::@1
  to:menu::@18
menu::@18: scope:[menu]  from menu::@1
  (byte) dtv_control#237 ← phi( menu::@1/(byte) dtv_control#246 )
  (byte*) print_char_cursor#71 ← phi( menu::@1/(byte*) print_char_cursor#86 )
  (byte*) print_line_cursor#70 ← phi( menu::@1/(byte*) print_line_cursor#86 )
  (byte*) print_screen#51 ← phi( menu::@1/(byte*) print_screen#67 )
  (byte*) menu::c#0 ← (byte*) COLS#0
  to:menu::@2
menu::@2: scope:[menu]  from menu::@18 menu::@2
  (byte) dtv_control#222 ← phi( menu::@18/(byte) dtv_control#237 menu::@2/(byte) dtv_control#222 )
  (byte*) print_char_cursor#56 ← phi( menu::@18/(byte*) print_char_cursor#71 menu::@2/(byte*) print_char_cursor#56 )
  (byte*) print_line_cursor#53 ← phi( menu::@18/(byte*) print_line_cursor#70 menu::@2/(byte*) print_line_cursor#53 )
  (byte*) print_screen#35 ← phi( menu::@18/(byte*) print_screen#51 menu::@2/(byte*) print_screen#35 )
  (byte*) menu::c#2 ← phi( menu::@18/(byte*) menu::c#0 menu::@2/(byte*) menu::c#1 )
  *((byte*) menu::c#2) ← (byte) LIGHT_GREEN#0
  (byte*) menu::c#1 ← ++ (byte*) menu::c#2
  (byte*~) menu::$24 ← (byte*) COLS#0 + (word/signed word/dword/signed dword) $3e8
  (bool~) menu::$25 ← (byte*) menu::c#1 != (byte*~) menu::$24
  if((bool~) menu::$25) goto menu::@2
  to:menu::@19
menu::@19: scope:[menu]  from menu::@2
  (byte) dtv_control#205 ← phi( menu::@2/(byte) dtv_control#222 )
  (byte*) print_char_cursor#37 ← phi( menu::@2/(byte*) print_char_cursor#56 )
  (byte*) print_line_cursor#35 ← phi( menu::@2/(byte*) print_line_cursor#53 )
  (byte*) print_screen#19 ← phi( menu::@2/(byte*) print_screen#35 )
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) print_set_screen::screen#0 ← (byte*) menu::SCREEN#0
  call print_set_screen 
  to:menu::@47
menu::@47: scope:[menu]  from menu::@19
  (byte) dtv_control#189 ← phi( menu::@19/(byte) dtv_control#205 )
  (byte*) print_char_cursor#26 ← phi( menu::@19/(byte*) print_char_cursor#9 )
  (byte*) print_line_cursor#25 ← phi( menu::@19/(byte*) print_line_cursor#8 )
  (byte*) print_screen#14 ← phi( menu::@19/(byte*) print_screen#2 )
  (byte*) print_screen#5 ← (byte*) print_screen#14
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#25
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#26
  call print_cls 
  to:menu::@48
menu::@48: scope:[menu]  from menu::@47
  (byte) dtv_control#161 ← phi( menu::@47/(byte) dtv_control#189 )
  (byte*) print_screen#52 ← phi( menu::@47/(byte*) print_screen#5 )
  (byte*) print_char_cursor#27 ← phi( menu::@47/(byte*) print_char_cursor#7 )
  (byte*) print_line_cursor#26 ← phi( menu::@47/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#12 ← (byte*) print_line_cursor#26
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#27
  (byte*) print_str_lines::str#1 ← (byte[]) MENU_TEXT#0
  call print_str_lines 
  to:menu::@49
menu::@49: scope:[menu]  from menu::@48
  (byte) dtv_control#132 ← phi( menu::@48/(byte) dtv_control#161 )
  (byte*) print_screen#37 ← phi( menu::@48/(byte*) print_screen#52 )
  (byte*) print_line_cursor#27 ← phi( menu::@48/(byte*) print_line_cursor#2 )
  (byte*) print_char_cursor#28 ← phi( menu::@48/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#28
  (byte*) print_line_cursor#13 ← (byte*) print_line_cursor#27
  to:menu::@3
menu::@3: scope:[menu]  from menu::@17 menu::@49
  (byte) dtv_control#101 ← phi( menu::@17/(byte) dtv_control#131 menu::@49/(byte) dtv_control#132 )
  (byte*) print_char_cursor#38 ← phi( menu::@17/(byte*) print_char_cursor#57 menu::@49/(byte*) print_char_cursor#14 )
  (byte*) print_line_cursor#36 ← phi( menu::@17/(byte*) print_line_cursor#54 menu::@49/(byte*) print_line_cursor#13 )
  (byte*) print_screen#20 ← phi( menu::@17/(byte*) print_screen#36 menu::@49/(byte*) print_screen#37 )
  if(true) goto menu::@4
  to:menu::@return
menu::@4: scope:[menu]  from menu::@3
  (byte*) print_char_cursor#87 ← phi( menu::@3/(byte*) print_char_cursor#38 )
  (byte*) print_line_cursor#87 ← phi( menu::@3/(byte*) print_line_cursor#36 )
  (byte*) print_screen#68 ← phi( menu::@3/(byte*) print_screen#20 )
  (byte) dtv_control#162 ← phi( menu::@3/(byte) dtv_control#101 )
  (byte) keyboard_key_pressed::key#0 ← (byte) KEY_1#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#1
  to:menu::@50
menu::@50: scope:[menu]  from menu::@4
  (byte*) print_char_cursor#72 ← phi( menu::@4/(byte*) print_char_cursor#87 )
  (byte*) print_line_cursor#71 ← phi( menu::@4/(byte*) print_line_cursor#87 )
  (byte*) print_screen#53 ← phi( menu::@4/(byte*) print_screen#68 )
  (byte) dtv_control#133 ← phi( menu::@4/(byte) dtv_control#162 )
  (byte) keyboard_key_pressed::return#23 ← phi( menu::@4/(byte) keyboard_key_pressed::return#2 )
  (byte~) menu::$29 ← (byte) keyboard_key_pressed::return#23
  (bool~) menu::$30 ← (byte~) menu::$29 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) menu::$31 ← ! (bool~) menu::$30
  if((bool~) menu::$31) goto menu::@6
  to:menu::@22
menu::@6: scope:[menu]  from menu::@50
  (byte*) print_char_cursor#88 ← phi( menu::@50/(byte*) print_char_cursor#72 )
  (byte*) print_line_cursor#88 ← phi( menu::@50/(byte*) print_line_cursor#71 )
  (byte*) print_screen#69 ← phi( menu::@50/(byte*) print_screen#53 )
  (byte) dtv_control#163 ← phi( menu::@50/(byte) dtv_control#133 )
  (byte) keyboard_key_pressed::key#1 ← (byte) KEY_2#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#3 ← (byte) keyboard_key_pressed::return#1
  to:menu::@51
menu::@51: scope:[menu]  from menu::@6
  (byte*) print_char_cursor#73 ← phi( menu::@6/(byte*) print_char_cursor#88 )
  (byte*) print_line_cursor#72 ← phi( menu::@6/(byte*) print_line_cursor#88 )
  (byte*) print_screen#54 ← phi( menu::@6/(byte*) print_screen#69 )
  (byte) dtv_control#134 ← phi( menu::@6/(byte) dtv_control#163 )
  (byte) keyboard_key_pressed::return#24 ← phi( menu::@6/(byte) keyboard_key_pressed::return#3 )
  (byte~) menu::$33 ← (byte) keyboard_key_pressed::return#24
  (bool~) menu::$34 ← (byte~) menu::$33 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) menu::$35 ← ! (bool~) menu::$34
  if((bool~) menu::$35) goto menu::@7
  to:menu::@24
menu::@22: scope:[menu]  from menu::@50
  (byte*) print_char_cursor#58 ← phi( menu::@50/(byte*) print_char_cursor#72 )
  (byte*) print_line_cursor#55 ← phi( menu::@50/(byte*) print_line_cursor#71 )
  (byte*) print_screen#38 ← phi( menu::@50/(byte*) print_screen#53 )
  (byte) dtv_control#100 ← phi( menu::@50/(byte) dtv_control#133 )
  call mode_stdchar 
  to:menu::@52
menu::@52: scope:[menu]  from menu::@22
  (byte*) print_char_cursor#39 ← phi( menu::@22/(byte*) print_char_cursor#58 )
  (byte*) print_line_cursor#37 ← phi( menu::@22/(byte*) print_line_cursor#55 )
  (byte*) print_screen#21 ← phi( menu::@22/(byte*) print_screen#38 )
  (byte) dtv_control#57 ← phi( menu::@22/(byte) dtv_control#20 )
  (byte) dtv_control#2 ← (byte) dtv_control#57
  to:menu::@return
menu::@return: scope:[menu]  from menu::@3 menu::@52 menu::@54 menu::@56 menu::@58 menu::@60 menu::@62 menu::@64 menu::@66 menu::@68 menu::@70 menu::@72 menu::@73
  (byte) dtv_control#58 ← phi( menu::@3/(byte) dtv_control#101 menu::@52/(byte) dtv_control#2 menu::@54/(byte) dtv_control#4 menu::@56/(byte) dtv_control#5 menu::@58/(byte) dtv_control#6 menu::@60/(byte) dtv_control#7 menu::@62/(byte) dtv_control#8 menu::@64/(byte) dtv_control#9 menu::@66/(byte) dtv_control#10 menu::@68/(byte) dtv_control#11 menu::@70/(byte) dtv_control#12 menu::@72/(byte) dtv_control#13 menu::@73/(byte) dtv_control#14 )
  (byte*) print_char_cursor#29 ← phi( menu::@3/(byte*) print_char_cursor#38 menu::@52/(byte*) print_char_cursor#39 menu::@54/(byte*) print_char_cursor#40 menu::@56/(byte*) print_char_cursor#41 menu::@58/(byte*) print_char_cursor#42 menu::@60/(byte*) print_char_cursor#43 menu::@62/(byte*) print_char_cursor#44 menu::@64/(byte*) print_char_cursor#45 menu::@66/(byte*) print_char_cursor#46 menu::@68/(byte*) print_char_cursor#47 menu::@70/(byte*) print_char_cursor#48 menu::@72/(byte*) print_char_cursor#49 menu::@73/(byte*) print_char_cursor#50 )
  (byte*) print_line_cursor#28 ← phi( menu::@3/(byte*) print_line_cursor#36 menu::@52/(byte*) print_line_cursor#37 menu::@54/(byte*) print_line_cursor#38 menu::@56/(byte*) print_line_cursor#39 menu::@58/(byte*) print_line_cursor#40 menu::@60/(byte*) print_line_cursor#41 menu::@62/(byte*) print_line_cursor#42 menu::@64/(byte*) print_line_cursor#43 menu::@66/(byte*) print_line_cursor#44 menu::@68/(byte*) print_line_cursor#45 menu::@70/(byte*) print_line_cursor#46 menu::@72/(byte*) print_line_cursor#47 menu::@73/(byte*) print_line_cursor#48 )
  (byte*) print_screen#15 ← phi( menu::@3/(byte*) print_screen#20 menu::@52/(byte*) print_screen#21 menu::@54/(byte*) print_screen#22 menu::@56/(byte*) print_screen#23 menu::@58/(byte*) print_screen#24 menu::@60/(byte*) print_screen#25 menu::@62/(byte*) print_screen#26 menu::@64/(byte*) print_screen#27 menu::@66/(byte*) print_screen#28 menu::@68/(byte*) print_screen#29 menu::@70/(byte*) print_screen#30 menu::@72/(byte*) print_screen#31 menu::@73/(byte*) print_screen#32 )
  (byte*) print_screen#6 ← (byte*) print_screen#15
  (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#28
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#29
  (byte) dtv_control#3 ← (byte) dtv_control#58
  return 
  to:@return
menu::@7: scope:[menu]  from menu::@51
  (byte*) print_char_cursor#89 ← phi( menu::@51/(byte*) print_char_cursor#73 )
  (byte*) print_line_cursor#89 ← phi( menu::@51/(byte*) print_line_cursor#72 )
  (byte*) print_screen#70 ← phi( menu::@51/(byte*) print_screen#54 )
  (byte) dtv_control#164 ← phi( menu::@51/(byte) dtv_control#134 )
  (byte) keyboard_key_pressed::key#2 ← (byte) KEY_3#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#4 ← (byte) keyboard_key_pressed::return#1
  to:menu::@53
menu::@53: scope:[menu]  from menu::@7
  (byte*) print_char_cursor#74 ← phi( menu::@7/(byte*) print_char_cursor#89 )
  (byte*) print_line_cursor#73 ← phi( menu::@7/(byte*) print_line_cursor#89 )
  (byte*) print_screen#55 ← phi( menu::@7/(byte*) print_screen#70 )
  (byte) dtv_control#135 ← phi( menu::@7/(byte) dtv_control#164 )
  (byte) keyboard_key_pressed::return#25 ← phi( menu::@7/(byte) keyboard_key_pressed::return#4 )
  (byte~) menu::$37 ← (byte) keyboard_key_pressed::return#25
  (bool~) menu::$38 ← (byte~) menu::$37 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) menu::$39 ← ! (bool~) menu::$38
  if((bool~) menu::$39) goto menu::@8
  to:menu::@26
menu::@24: scope:[menu]  from menu::@51
  (byte*) print_char_cursor#59 ← phi( menu::@51/(byte*) print_char_cursor#73 )
  (byte*) print_line_cursor#56 ← phi( menu::@51/(byte*) print_line_cursor#72 )
  (byte*) print_screen#39 ← phi( menu::@51/(byte*) print_screen#54 )
  (byte) dtv_control#102 ← phi( menu::@51/(byte) dtv_control#134 )
  call mode_ecmchar 
  to:menu::@54
menu::@54: scope:[menu]  from menu::@24
  (byte*) print_char_cursor#40 ← phi( menu::@24/(byte*) print_char_cursor#59 )
  (byte*) print_line_cursor#38 ← phi( menu::@24/(byte*) print_line_cursor#56 )
  (byte*) print_screen#22 ← phi( menu::@24/(byte*) print_screen#39 )
  (byte) dtv_control#59 ← phi( menu::@24/(byte) dtv_control#23 )
  (byte) dtv_control#4 ← (byte) dtv_control#59
  to:menu::@return
menu::@8: scope:[menu]  from menu::@53
  (byte*) print_char_cursor#90 ← phi( menu::@53/(byte*) print_char_cursor#74 )
  (byte*) print_line_cursor#90 ← phi( menu::@53/(byte*) print_line_cursor#73 )
  (byte*) print_screen#71 ← phi( menu::@53/(byte*) print_screen#55 )
  (byte) dtv_control#165 ← phi( menu::@53/(byte) dtv_control#135 )
  (byte) keyboard_key_pressed::key#3 ← (byte) KEY_4#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#5 ← (byte) keyboard_key_pressed::return#1
  to:menu::@55
menu::@55: scope:[menu]  from menu::@8
  (byte*) print_char_cursor#75 ← phi( menu::@8/(byte*) print_char_cursor#90 )
  (byte*) print_line_cursor#74 ← phi( menu::@8/(byte*) print_line_cursor#90 )
  (byte*) print_screen#56 ← phi( menu::@8/(byte*) print_screen#71 )
  (byte) dtv_control#136 ← phi( menu::@8/(byte) dtv_control#165 )
  (byte) keyboard_key_pressed::return#26 ← phi( menu::@8/(byte) keyboard_key_pressed::return#5 )
  (byte~) menu::$41 ← (byte) keyboard_key_pressed::return#26
  (bool~) menu::$42 ← (byte~) menu::$41 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) menu::$43 ← ! (bool~) menu::$42
  if((bool~) menu::$43) goto menu::@9
  to:menu::@28
menu::@26: scope:[menu]  from menu::@53
  (byte*) print_char_cursor#60 ← phi( menu::@53/(byte*) print_char_cursor#74 )
  (byte*) print_line_cursor#57 ← phi( menu::@53/(byte*) print_line_cursor#73 )
  (byte*) print_screen#40 ← phi( menu::@53/(byte*) print_screen#55 )
  (byte) dtv_control#103 ← phi( menu::@53/(byte) dtv_control#135 )
  call mode_mcchar 
  to:menu::@56
menu::@56: scope:[menu]  from menu::@26
  (byte*) print_char_cursor#41 ← phi( menu::@26/(byte*) print_char_cursor#60 )
  (byte*) print_line_cursor#39 ← phi( menu::@26/(byte*) print_line_cursor#57 )
  (byte*) print_screen#23 ← phi( menu::@26/(byte*) print_screen#40 )
  (byte) dtv_control#60 ← phi( menu::@26/(byte) dtv_control#26 )
  (byte) dtv_control#5 ← (byte) dtv_control#60
  to:menu::@return
menu::@9: scope:[menu]  from menu::@55
  (byte*) print_char_cursor#91 ← phi( menu::@55/(byte*) print_char_cursor#75 )
  (byte*) print_line_cursor#91 ← phi( menu::@55/(byte*) print_line_cursor#74 )
  (byte*) print_screen#72 ← phi( menu::@55/(byte*) print_screen#56 )
  (byte) dtv_control#166 ← phi( menu::@55/(byte) dtv_control#136 )
  (byte) keyboard_key_pressed::key#4 ← (byte) KEY_6#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#6 ← (byte) keyboard_key_pressed::return#1
  to:menu::@57
menu::@57: scope:[menu]  from menu::@9
  (byte*) print_char_cursor#76 ← phi( menu::@9/(byte*) print_char_cursor#91 )
  (byte*) print_line_cursor#75 ← phi( menu::@9/(byte*) print_line_cursor#91 )
  (byte*) print_screen#57 ← phi( menu::@9/(byte*) print_screen#72 )
  (byte) dtv_control#137 ← phi( menu::@9/(byte) dtv_control#166 )
  (byte) keyboard_key_pressed::return#27 ← phi( menu::@9/(byte) keyboard_key_pressed::return#6 )
  (byte~) menu::$45 ← (byte) keyboard_key_pressed::return#27
  (bool~) menu::$46 ← (byte~) menu::$45 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) menu::$47 ← ! (bool~) menu::$46
  if((bool~) menu::$47) goto menu::@10
  to:menu::@30
menu::@28: scope:[menu]  from menu::@55
  (byte*) print_char_cursor#61 ← phi( menu::@55/(byte*) print_char_cursor#75 )
  (byte*) print_line_cursor#58 ← phi( menu::@55/(byte*) print_line_cursor#74 )
  (byte*) print_screen#41 ← phi( menu::@55/(byte*) print_screen#56 )
  (byte) dtv_control#104 ← phi( menu::@55/(byte) dtv_control#136 )
  call mode_stdbitmap 
  to:menu::@58
menu::@58: scope:[menu]  from menu::@28
  (byte*) print_char_cursor#42 ← phi( menu::@28/(byte*) print_char_cursor#61 )
  (byte*) print_line_cursor#40 ← phi( menu::@28/(byte*) print_line_cursor#58 )
  (byte*) print_screen#24 ← phi( menu::@28/(byte*) print_screen#41 )
  (byte) dtv_control#61 ← phi( menu::@28/(byte) dtv_control#29 )
  (byte) dtv_control#6 ← (byte) dtv_control#61
  to:menu::@return
menu::@10: scope:[menu]  from menu::@57
  (byte*) print_char_cursor#92 ← phi( menu::@57/(byte*) print_char_cursor#76 )
  (byte*) print_line_cursor#92 ← phi( menu::@57/(byte*) print_line_cursor#75 )
  (byte*) print_screen#73 ← phi( menu::@57/(byte*) print_screen#57 )
  (byte) dtv_control#167 ← phi( menu::@57/(byte) dtv_control#137 )
  (byte) keyboard_key_pressed::key#5 ← (byte) KEY_7#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#7 ← (byte) keyboard_key_pressed::return#1
  to:menu::@59
menu::@59: scope:[menu]  from menu::@10
  (byte*) print_char_cursor#77 ← phi( menu::@10/(byte*) print_char_cursor#92 )
  (byte*) print_line_cursor#76 ← phi( menu::@10/(byte*) print_line_cursor#92 )
  (byte*) print_screen#58 ← phi( menu::@10/(byte*) print_screen#73 )
  (byte) dtv_control#138 ← phi( menu::@10/(byte) dtv_control#167 )
  (byte) keyboard_key_pressed::return#28 ← phi( menu::@10/(byte) keyboard_key_pressed::return#7 )
  (byte~) menu::$49 ← (byte) keyboard_key_pressed::return#28
  (bool~) menu::$50 ← (byte~) menu::$49 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) menu::$51 ← ! (bool~) menu::$50
  if((bool~) menu::$51) goto menu::@11
  to:menu::@32
menu::@30: scope:[menu]  from menu::@57
  (byte*) print_char_cursor#62 ← phi( menu::@57/(byte*) print_char_cursor#76 )
  (byte*) print_line_cursor#59 ← phi( menu::@57/(byte*) print_line_cursor#75 )
  (byte*) print_screen#42 ← phi( menu::@57/(byte*) print_screen#57 )
  (byte) dtv_control#105 ← phi( menu::@57/(byte) dtv_control#137 )
  call mode_hicolstdchar 
  to:menu::@60
menu::@60: scope:[menu]  from menu::@30
  (byte*) print_char_cursor#43 ← phi( menu::@30/(byte*) print_char_cursor#62 )
  (byte*) print_line_cursor#41 ← phi( menu::@30/(byte*) print_line_cursor#59 )
  (byte*) print_screen#25 ← phi( menu::@30/(byte*) print_screen#42 )
  (byte) dtv_control#62 ← phi( menu::@30/(byte) dtv_control#32 )
  (byte) dtv_control#7 ← (byte) dtv_control#62
  to:menu::@return
menu::@11: scope:[menu]  from menu::@59
  (byte*) print_char_cursor#93 ← phi( menu::@59/(byte*) print_char_cursor#77 )
  (byte*) print_line_cursor#93 ← phi( menu::@59/(byte*) print_line_cursor#76 )
  (byte*) print_screen#74 ← phi( menu::@59/(byte*) print_screen#58 )
  (byte) dtv_control#168 ← phi( menu::@59/(byte) dtv_control#138 )
  (byte) keyboard_key_pressed::key#6 ← (byte) KEY_8#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#8 ← (byte) keyboard_key_pressed::return#1
  to:menu::@61
menu::@61: scope:[menu]  from menu::@11
  (byte*) print_char_cursor#78 ← phi( menu::@11/(byte*) print_char_cursor#93 )
  (byte*) print_line_cursor#77 ← phi( menu::@11/(byte*) print_line_cursor#93 )
  (byte*) print_screen#59 ← phi( menu::@11/(byte*) print_screen#74 )
  (byte) dtv_control#139 ← phi( menu::@11/(byte) dtv_control#168 )
  (byte) keyboard_key_pressed::return#29 ← phi( menu::@11/(byte) keyboard_key_pressed::return#8 )
  (byte~) menu::$53 ← (byte) keyboard_key_pressed::return#29
  (bool~) menu::$54 ← (byte~) menu::$53 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) menu::$55 ← ! (bool~) menu::$54
  if((bool~) menu::$55) goto menu::@12
  to:menu::@34
menu::@32: scope:[menu]  from menu::@59
  (byte*) print_char_cursor#63 ← phi( menu::@59/(byte*) print_char_cursor#77 )
  (byte*) print_line_cursor#60 ← phi( menu::@59/(byte*) print_line_cursor#76 )
  (byte*) print_screen#43 ← phi( menu::@59/(byte*) print_screen#58 )
  (byte) dtv_control#106 ← phi( menu::@59/(byte) dtv_control#138 )
  call mode_hicolecmchar 
  to:menu::@62
menu::@62: scope:[menu]  from menu::@32
  (byte*) print_char_cursor#44 ← phi( menu::@32/(byte*) print_char_cursor#63 )
  (byte*) print_line_cursor#42 ← phi( menu::@32/(byte*) print_line_cursor#60 )
  (byte*) print_screen#26 ← phi( menu::@32/(byte*) print_screen#43 )
  (byte) dtv_control#63 ← phi( menu::@32/(byte) dtv_control#35 )
  (byte) dtv_control#8 ← (byte) dtv_control#63
  to:menu::@return
menu::@12: scope:[menu]  from menu::@61
  (byte*) print_char_cursor#94 ← phi( menu::@61/(byte*) print_char_cursor#78 )
  (byte*) print_line_cursor#94 ← phi( menu::@61/(byte*) print_line_cursor#77 )
  (byte*) print_screen#75 ← phi( menu::@61/(byte*) print_screen#59 )
  (byte) dtv_control#169 ← phi( menu::@61/(byte) dtv_control#139 )
  (byte) keyboard_key_pressed::key#7 ← (byte) KEY_A#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#9 ← (byte) keyboard_key_pressed::return#1
  to:menu::@63
menu::@63: scope:[menu]  from menu::@12
  (byte*) print_char_cursor#79 ← phi( menu::@12/(byte*) print_char_cursor#94 )
  (byte*) print_line_cursor#78 ← phi( menu::@12/(byte*) print_line_cursor#94 )
  (byte*) print_screen#60 ← phi( menu::@12/(byte*) print_screen#75 )
  (byte) dtv_control#140 ← phi( menu::@12/(byte) dtv_control#169 )
  (byte) keyboard_key_pressed::return#30 ← phi( menu::@12/(byte) keyboard_key_pressed::return#9 )
  (byte~) menu::$57 ← (byte) keyboard_key_pressed::return#30
  (bool~) menu::$58 ← (byte~) menu::$57 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) menu::$59 ← ! (bool~) menu::$58
  if((bool~) menu::$59) goto menu::@13
  to:menu::@36
menu::@34: scope:[menu]  from menu::@61
  (byte*) print_char_cursor#64 ← phi( menu::@61/(byte*) print_char_cursor#78 )
  (byte*) print_line_cursor#61 ← phi( menu::@61/(byte*) print_line_cursor#77 )
  (byte*) print_screen#44 ← phi( menu::@61/(byte*) print_screen#59 )
  (byte) dtv_control#107 ← phi( menu::@61/(byte) dtv_control#139 )
  call mode_hicolmcchar 
  to:menu::@64
menu::@64: scope:[menu]  from menu::@34
  (byte*) print_char_cursor#45 ← phi( menu::@34/(byte*) print_char_cursor#64 )
  (byte*) print_line_cursor#43 ← phi( menu::@34/(byte*) print_line_cursor#61 )
  (byte*) print_screen#27 ← phi( menu::@34/(byte*) print_screen#44 )
  (byte) dtv_control#64 ← phi( menu::@34/(byte) dtv_control#38 )
  (byte) dtv_control#9 ← (byte) dtv_control#64
  to:menu::@return
menu::@13: scope:[menu]  from menu::@63
  (byte*) print_char_cursor#95 ← phi( menu::@63/(byte*) print_char_cursor#79 )
  (byte*) print_line_cursor#95 ← phi( menu::@63/(byte*) print_line_cursor#78 )
  (byte*) print_screen#76 ← phi( menu::@63/(byte*) print_screen#60 )
  (byte) dtv_control#170 ← phi( menu::@63/(byte) dtv_control#140 )
  (byte) keyboard_key_pressed::key#8 ← (byte) KEY_B#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#10 ← (byte) keyboard_key_pressed::return#1
  to:menu::@65
menu::@65: scope:[menu]  from menu::@13
  (byte*) print_char_cursor#80 ← phi( menu::@13/(byte*) print_char_cursor#95 )
  (byte*) print_line_cursor#79 ← phi( menu::@13/(byte*) print_line_cursor#95 )
  (byte*) print_screen#61 ← phi( menu::@13/(byte*) print_screen#76 )
  (byte) dtv_control#141 ← phi( menu::@13/(byte) dtv_control#170 )
  (byte) keyboard_key_pressed::return#31 ← phi( menu::@13/(byte) keyboard_key_pressed::return#10 )
  (byte~) menu::$61 ← (byte) keyboard_key_pressed::return#31
  (bool~) menu::$62 ← (byte~) menu::$61 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) menu::$63 ← ! (bool~) menu::$62
  if((bool~) menu::$63) goto menu::@14
  to:menu::@38
menu::@36: scope:[menu]  from menu::@63
  (byte*) print_char_cursor#65 ← phi( menu::@63/(byte*) print_char_cursor#79 )
  (byte*) print_line_cursor#62 ← phi( menu::@63/(byte*) print_line_cursor#78 )
  (byte*) print_screen#45 ← phi( menu::@63/(byte*) print_screen#60 )
  (byte) dtv_control#108 ← phi( menu::@63/(byte) dtv_control#140 )
  call mode_sixsfred2 
  to:menu::@66
menu::@66: scope:[menu]  from menu::@36
  (byte*) print_char_cursor#46 ← phi( menu::@36/(byte*) print_char_cursor#65 )
  (byte*) print_line_cursor#44 ← phi( menu::@36/(byte*) print_line_cursor#62 )
  (byte*) print_screen#28 ← phi( menu::@36/(byte*) print_screen#45 )
  (byte) dtv_control#65 ← phi( menu::@36/(byte) dtv_control#47 )
  (byte) dtv_control#10 ← (byte) dtv_control#65
  to:menu::@return
menu::@14: scope:[menu]  from menu::@65
  (byte*) print_char_cursor#96 ← phi( menu::@65/(byte*) print_char_cursor#80 )
  (byte*) print_line_cursor#96 ← phi( menu::@65/(byte*) print_line_cursor#79 )
  (byte*) print_screen#77 ← phi( menu::@65/(byte*) print_screen#61 )
  (byte) dtv_control#171 ← phi( menu::@65/(byte) dtv_control#141 )
  (byte) keyboard_key_pressed::key#9 ← (byte) KEY_C#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#11 ← (byte) keyboard_key_pressed::return#1
  to:menu::@67
menu::@67: scope:[menu]  from menu::@14
  (byte*) print_char_cursor#81 ← phi( menu::@14/(byte*) print_char_cursor#96 )
  (byte*) print_line_cursor#80 ← phi( menu::@14/(byte*) print_line_cursor#96 )
  (byte*) print_screen#62 ← phi( menu::@14/(byte*) print_screen#77 )
  (byte) dtv_control#142 ← phi( menu::@14/(byte) dtv_control#171 )
  (byte) keyboard_key_pressed::return#32 ← phi( menu::@14/(byte) keyboard_key_pressed::return#11 )
  (byte~) menu::$65 ← (byte) keyboard_key_pressed::return#32
  (bool~) menu::$66 ← (byte~) menu::$65 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) menu::$67 ← ! (bool~) menu::$66
  if((bool~) menu::$67) goto menu::@15
  to:menu::@40
menu::@38: scope:[menu]  from menu::@65
  (byte*) print_char_cursor#66 ← phi( menu::@65/(byte*) print_char_cursor#80 )
  (byte*) print_line_cursor#63 ← phi( menu::@65/(byte*) print_line_cursor#79 )
  (byte*) print_screen#46 ← phi( menu::@65/(byte*) print_screen#61 )
  (byte) dtv_control#109 ← phi( menu::@65/(byte) dtv_control#141 )
  call mode_twoplanebitmap 
  to:menu::@68
menu::@68: scope:[menu]  from menu::@38
  (byte*) print_char_cursor#47 ← phi( menu::@38/(byte*) print_char_cursor#66 )
  (byte*) print_line_cursor#45 ← phi( menu::@38/(byte*) print_line_cursor#63 )
  (byte*) print_screen#29 ← phi( menu::@38/(byte*) print_screen#46 )
  (byte) dtv_control#66 ← phi( menu::@38/(byte) dtv_control#41 )
  (byte) dtv_control#11 ← (byte) dtv_control#66
  to:menu::@return
menu::@15: scope:[menu]  from menu::@67
  (byte*) print_char_cursor#97 ← phi( menu::@67/(byte*) print_char_cursor#81 )
  (byte*) print_line_cursor#97 ← phi( menu::@67/(byte*) print_line_cursor#80 )
  (byte*) print_screen#78 ← phi( menu::@67/(byte*) print_screen#62 )
  (byte) dtv_control#172 ← phi( menu::@67/(byte) dtv_control#142 )
  (byte) keyboard_key_pressed::key#10 ← (byte) KEY_D#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#12 ← (byte) keyboard_key_pressed::return#1
  to:menu::@69
menu::@69: scope:[menu]  from menu::@15
  (byte*) print_char_cursor#82 ← phi( menu::@15/(byte*) print_char_cursor#97 )
  (byte*) print_line_cursor#81 ← phi( menu::@15/(byte*) print_line_cursor#97 )
  (byte*) print_screen#63 ← phi( menu::@15/(byte*) print_screen#78 )
  (byte) dtv_control#143 ← phi( menu::@15/(byte) dtv_control#172 )
  (byte) keyboard_key_pressed::return#33 ← phi( menu::@15/(byte) keyboard_key_pressed::return#12 )
  (byte~) menu::$69 ← (byte) keyboard_key_pressed::return#33
  (bool~) menu::$70 ← (byte~) menu::$69 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) menu::$71 ← ! (bool~) menu::$70
  if((bool~) menu::$71) goto menu::@16
  to:menu::@42
menu::@40: scope:[menu]  from menu::@67
  (byte*) print_char_cursor#67 ← phi( menu::@67/(byte*) print_char_cursor#81 )
  (byte*) print_line_cursor#64 ← phi( menu::@67/(byte*) print_line_cursor#80 )
  (byte*) print_screen#47 ← phi( menu::@67/(byte*) print_screen#62 )
  (byte) dtv_control#110 ← phi( menu::@67/(byte) dtv_control#142 )
  call mode_sixsfred 
  to:menu::@70
menu::@70: scope:[menu]  from menu::@40
  (byte*) print_char_cursor#48 ← phi( menu::@40/(byte*) print_char_cursor#67 )
  (byte*) print_line_cursor#46 ← phi( menu::@40/(byte*) print_line_cursor#64 )
  (byte*) print_screen#30 ← phi( menu::@40/(byte*) print_screen#47 )
  (byte) dtv_control#67 ← phi( menu::@40/(byte) dtv_control#44 )
  (byte) dtv_control#12 ← (byte) dtv_control#67
  to:menu::@return
menu::@16: scope:[menu]  from menu::@69
  (byte*) print_char_cursor#98 ← phi( menu::@69/(byte*) print_char_cursor#82 )
  (byte*) print_line_cursor#98 ← phi( menu::@69/(byte*) print_line_cursor#81 )
  (byte*) print_screen#79 ← phi( menu::@69/(byte*) print_screen#63 )
  (byte) dtv_control#173 ← phi( menu::@69/(byte) dtv_control#143 )
  (byte) keyboard_key_pressed::key#11 ← (byte) KEY_E#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#13 ← (byte) keyboard_key_pressed::return#1
  to:menu::@71
menu::@71: scope:[menu]  from menu::@16
  (byte*) print_char_cursor#83 ← phi( menu::@16/(byte*) print_char_cursor#98 )
  (byte*) print_line_cursor#82 ← phi( menu::@16/(byte*) print_line_cursor#98 )
  (byte*) print_screen#64 ← phi( menu::@16/(byte*) print_screen#79 )
  (byte) dtv_control#144 ← phi( menu::@16/(byte) dtv_control#173 )
  (byte) keyboard_key_pressed::return#34 ← phi( menu::@16/(byte) keyboard_key_pressed::return#13 )
  (byte~) menu::$73 ← (byte) keyboard_key_pressed::return#34
  (bool~) menu::$74 ← (byte~) menu::$73 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) menu::$75 ← ! (bool~) menu::$74
  if((bool~) menu::$75) goto menu::@17
  to:menu::@44
menu::@42: scope:[menu]  from menu::@69
  (byte*) print_char_cursor#68 ← phi( menu::@69/(byte*) print_char_cursor#82 )
  (byte*) print_line_cursor#65 ← phi( menu::@69/(byte*) print_line_cursor#81 )
  (byte*) print_screen#48 ← phi( menu::@69/(byte*) print_screen#63 )
  (byte) dtv_control#111 ← phi( menu::@69/(byte) dtv_control#143 )
  call mode_8bpppixelcell 
  to:menu::@72
menu::@72: scope:[menu]  from menu::@42
  (byte*) print_char_cursor#49 ← phi( menu::@42/(byte*) print_char_cursor#68 )
  (byte*) print_line_cursor#47 ← phi( menu::@42/(byte*) print_line_cursor#65 )
  (byte*) print_screen#31 ← phi( menu::@42/(byte*) print_screen#48 )
  (byte) dtv_control#68 ← phi( menu::@42/(byte) dtv_control#50 )
  (byte) dtv_control#13 ← (byte) dtv_control#68
  to:menu::@return
menu::@17: scope:[menu]  from menu::@71
  (byte) dtv_control#131 ← phi( menu::@71/(byte) dtv_control#144 )
  (byte*) print_char_cursor#57 ← phi( menu::@71/(byte*) print_char_cursor#83 )
  (byte*) print_line_cursor#54 ← phi( menu::@71/(byte*) print_line_cursor#82 )
  (byte*) print_screen#36 ← phi( menu::@71/(byte*) print_screen#64 )
  to:menu::@3
menu::@44: scope:[menu]  from menu::@71
  (byte*) print_char_cursor#69 ← phi( menu::@71/(byte*) print_char_cursor#83 )
  (byte*) print_line_cursor#66 ← phi( menu::@71/(byte*) print_line_cursor#82 )
  (byte*) print_screen#49 ← phi( menu::@71/(byte*) print_screen#64 )
  (byte) dtv_control#112 ← phi( menu::@71/(byte) dtv_control#144 )
  call mode_8bppchunkybmm 
  to:menu::@73
menu::@73: scope:[menu]  from menu::@44
  (byte*) print_char_cursor#50 ← phi( menu::@44/(byte*) print_char_cursor#69 )
  (byte*) print_line_cursor#48 ← phi( menu::@44/(byte*) print_line_cursor#66 )
  (byte*) print_screen#32 ← phi( menu::@44/(byte*) print_screen#49 )
  (byte) dtv_control#69 ← phi( menu::@44/(byte) dtv_control#53 )
  (byte) dtv_control#14 ← (byte) dtv_control#69
  to:menu::@return
@41: scope:[]  from @40
  (byte*) print_char_cursor#70 ← phi( @40/(byte*) print_char_cursor#84 )
  (byte*) print_line_cursor#67 ← phi( @40/(byte*) print_line_cursor#83 )
  (byte*) print_screen#50 ← phi( @40/(byte*) print_screen#65 )
  (byte) dtv_control#15 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@54
mode_ctrl: scope:[mode_ctrl]  from mode_8bppchunkybmm::@11 mode_8bpppixelcell::@14 mode_ecmchar::@6 mode_hicolecmchar::@6 mode_hicolmcchar::@6 mode_hicolstdchar::@6 mode_mcchar::@6 mode_sixsfred2::@14 mode_sixsfred::@14 mode_stdbitmap::@8 mode_stdchar::@6 mode_twoplanebitmap::@18
  (byte) dtv_control#145 ← phi( mode_8bppchunkybmm::@11/(byte) dtv_control#128 mode_8bpppixelcell::@14/(byte) dtv_control#127 mode_ecmchar::@6/(byte) dtv_control#118 mode_hicolecmchar::@6/(byte) dtv_control#122 mode_hicolmcchar::@6/(byte) dtv_control#123 mode_hicolstdchar::@6/(byte) dtv_control#121 mode_mcchar::@6/(byte) dtv_control#119 mode_sixsfred2::@14/(byte) dtv_control#126 mode_sixsfred::@14/(byte) dtv_control#125 mode_stdbitmap::@8/(byte) dtv_control#120 mode_stdchar::@6/(byte) dtv_control#117 mode_twoplanebitmap::@18/(byte) dtv_control#124 )
  to:mode_ctrl::@1
mode_ctrl::@1: scope:[mode_ctrl]  from mode_ctrl mode_ctrl::@15 mode_ctrl::@30
  (byte) dtv_control#114 ← phi( mode_ctrl/(byte) dtv_control#145 mode_ctrl::@15/(byte) dtv_control#146 mode_ctrl::@30/(byte) dtv_control#17 )
  if(true) goto mode_ctrl::@2
  to:mode_ctrl::@return
mode_ctrl::@2: scope:[mode_ctrl]  from mode_ctrl::@1
  (byte) dtv_control#190 ← phi( mode_ctrl::@1/(byte) dtv_control#114 )
  to:mode_ctrl::@4
mode_ctrl::@4: scope:[mode_ctrl]  from mode_ctrl::@2 mode_ctrl::@5
  (byte) dtv_control#174 ← phi( mode_ctrl::@2/(byte) dtv_control#190 mode_ctrl::@5/(byte) dtv_control#191 )
  (bool~) mode_ctrl::$0 ← *((byte*) RASTER#0) != (byte/word/signed word/dword/signed dword) $ff
  if((bool~) mode_ctrl::$0) goto mode_ctrl::@5
  to:mode_ctrl::@6
mode_ctrl::@5: scope:[mode_ctrl]  from mode_ctrl::@4
  (byte) dtv_control#191 ← phi( mode_ctrl::@4/(byte) dtv_control#174 )
  to:mode_ctrl::@4
mode_ctrl::@6: scope:[mode_ctrl]  from mode_ctrl::@4
  (byte) dtv_control#147 ← phi( mode_ctrl::@4/(byte) dtv_control#174 )
  (byte) keyboard_key_pressed::key#12 ← (byte) KEY_SPACE#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#14 ← (byte) keyboard_key_pressed::return#1
  to:mode_ctrl::@32
mode_ctrl::@32: scope:[mode_ctrl]  from mode_ctrl::@6
  (byte) dtv_control#113 ← phi( mode_ctrl::@6/(byte) dtv_control#147 )
  (byte) keyboard_key_pressed::return#35 ← phi( mode_ctrl::@6/(byte) keyboard_key_pressed::return#14 )
  (byte~) mode_ctrl::$1 ← (byte) keyboard_key_pressed::return#35
  (bool~) mode_ctrl::$2 ← (byte~) mode_ctrl::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mode_ctrl::$3 ← ! (bool~) mode_ctrl::$2
  if((bool~) mode_ctrl::$3) goto mode_ctrl::@7
  to:mode_ctrl::@return
mode_ctrl::@7: scope:[mode_ctrl]  from mode_ctrl::@32
  (byte) dtv_control#70 ← phi( mode_ctrl::@32/(byte) dtv_control#113 )
  (byte) mode_ctrl::ctrl#0 ← (byte) dtv_control#70
  (byte) keyboard_key_pressed::key#13 ← (byte) KEY_L#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#15 ← (byte) keyboard_key_pressed::return#1
  to:mode_ctrl::@33
mode_ctrl::@33: scope:[mode_ctrl]  from mode_ctrl::@7
  (byte) dtv_control#283 ← phi( mode_ctrl::@7/(byte) dtv_control#70 )
  (byte) mode_ctrl::ctrl#16 ← phi( mode_ctrl::@7/(byte) mode_ctrl::ctrl#0 )
  (byte) keyboard_key_pressed::return#36 ← phi( mode_ctrl::@7/(byte) keyboard_key_pressed::return#15 )
  (byte~) mode_ctrl::$4 ← (byte) keyboard_key_pressed::return#36
  (bool~) mode_ctrl::$5 ← (byte~) mode_ctrl::$4 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mode_ctrl::$6 ← ! (bool~) mode_ctrl::$5
  if((bool~) mode_ctrl::$6) goto mode_ctrl::@8
  to:mode_ctrl::@23
mode_ctrl::@return: scope:[mode_ctrl]  from mode_ctrl::@1 mode_ctrl::@32
  (byte) dtv_control#71 ← phi( mode_ctrl::@1/(byte) dtv_control#114 mode_ctrl::@32/(byte) dtv_control#113 )
  (byte) dtv_control#16 ← (byte) dtv_control#71
  return 
  to:@return
mode_ctrl::@8: scope:[mode_ctrl]  from mode_ctrl::@23 mode_ctrl::@33
  (byte) dtv_control#277 ← phi( mode_ctrl::@23/(byte) dtv_control#282 mode_ctrl::@33/(byte) dtv_control#283 )
  (byte) mode_ctrl::ctrl#23 ← phi( mode_ctrl::@23/(byte) mode_ctrl::ctrl#1 mode_ctrl::@33/(byte) mode_ctrl::ctrl#16 )
  (byte) keyboard_key_pressed::key#14 ← (byte) KEY_H#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#16 ← (byte) keyboard_key_pressed::return#1
  to:mode_ctrl::@34
mode_ctrl::@34: scope:[mode_ctrl]  from mode_ctrl::@8
  (byte) dtv_control#271 ← phi( mode_ctrl::@8/(byte) dtv_control#277 )
  (byte) mode_ctrl::ctrl#17 ← phi( mode_ctrl::@8/(byte) mode_ctrl::ctrl#23 )
  (byte) keyboard_key_pressed::return#37 ← phi( mode_ctrl::@8/(byte) keyboard_key_pressed::return#16 )
  (byte~) mode_ctrl::$8 ← (byte) keyboard_key_pressed::return#37
  (bool~) mode_ctrl::$9 ← (byte~) mode_ctrl::$8 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mode_ctrl::$10 ← ! (bool~) mode_ctrl::$9
  if((bool~) mode_ctrl::$10) goto mode_ctrl::@9
  to:mode_ctrl::@24
mode_ctrl::@23: scope:[mode_ctrl]  from mode_ctrl::@33
  (byte) dtv_control#282 ← phi( mode_ctrl::@33/(byte) dtv_control#283 )
  (byte) mode_ctrl::ctrl#8 ← phi( mode_ctrl::@33/(byte) mode_ctrl::ctrl#16 )
  (byte~) mode_ctrl::$7 ← (byte) mode_ctrl::ctrl#8 | (byte) DTV_LINEAR#0
  (byte) mode_ctrl::ctrl#1 ← (byte~) mode_ctrl::$7
  to:mode_ctrl::@8
mode_ctrl::@9: scope:[mode_ctrl]  from mode_ctrl::@24 mode_ctrl::@34
  (byte) dtv_control#264 ← phi( mode_ctrl::@24/(byte) dtv_control#270 mode_ctrl::@34/(byte) dtv_control#271 )
  (byte) mode_ctrl::ctrl#24 ← phi( mode_ctrl::@24/(byte) mode_ctrl::ctrl#2 mode_ctrl::@34/(byte) mode_ctrl::ctrl#17 )
  (byte) keyboard_key_pressed::key#15 ← (byte) KEY_O#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#17 ← (byte) keyboard_key_pressed::return#1
  to:mode_ctrl::@35
mode_ctrl::@35: scope:[mode_ctrl]  from mode_ctrl::@9
  (byte) dtv_control#257 ← phi( mode_ctrl::@9/(byte) dtv_control#264 )
  (byte) mode_ctrl::ctrl#18 ← phi( mode_ctrl::@9/(byte) mode_ctrl::ctrl#24 )
  (byte) keyboard_key_pressed::return#38 ← phi( mode_ctrl::@9/(byte) keyboard_key_pressed::return#17 )
  (byte~) mode_ctrl::$12 ← (byte) keyboard_key_pressed::return#38
  (bool~) mode_ctrl::$13 ← (byte~) mode_ctrl::$12 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mode_ctrl::$14 ← ! (bool~) mode_ctrl::$13
  if((bool~) mode_ctrl::$14) goto mode_ctrl::@10
  to:mode_ctrl::@25
mode_ctrl::@24: scope:[mode_ctrl]  from mode_ctrl::@34
  (byte) dtv_control#270 ← phi( mode_ctrl::@34/(byte) dtv_control#271 )
  (byte) mode_ctrl::ctrl#9 ← phi( mode_ctrl::@34/(byte) mode_ctrl::ctrl#17 )
  (byte~) mode_ctrl::$11 ← (byte) mode_ctrl::ctrl#9 | (byte) DTV_HIGHCOLOR#0
  (byte) mode_ctrl::ctrl#2 ← (byte~) mode_ctrl::$11
  to:mode_ctrl::@9
mode_ctrl::@10: scope:[mode_ctrl]  from mode_ctrl::@25 mode_ctrl::@35
  (byte) dtv_control#247 ← phi( mode_ctrl::@25/(byte) dtv_control#256 mode_ctrl::@35/(byte) dtv_control#257 )
  (byte) mode_ctrl::ctrl#25 ← phi( mode_ctrl::@25/(byte) mode_ctrl::ctrl#3 mode_ctrl::@35/(byte) mode_ctrl::ctrl#18 )
  (byte) keyboard_key_pressed::key#16 ← (byte) KEY_B#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#18 ← (byte) keyboard_key_pressed::return#1
  to:mode_ctrl::@36
mode_ctrl::@36: scope:[mode_ctrl]  from mode_ctrl::@10
  (byte) dtv_control#239 ← phi( mode_ctrl::@10/(byte) dtv_control#247 )
  (byte) mode_ctrl::ctrl#19 ← phi( mode_ctrl::@10/(byte) mode_ctrl::ctrl#25 )
  (byte) keyboard_key_pressed::return#39 ← phi( mode_ctrl::@10/(byte) keyboard_key_pressed::return#18 )
  (byte~) mode_ctrl::$16 ← (byte) keyboard_key_pressed::return#39
  (bool~) mode_ctrl::$17 ← (byte~) mode_ctrl::$16 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mode_ctrl::$18 ← ! (bool~) mode_ctrl::$17
  if((bool~) mode_ctrl::$18) goto mode_ctrl::@11
  to:mode_ctrl::@26
mode_ctrl::@25: scope:[mode_ctrl]  from mode_ctrl::@35
  (byte) dtv_control#256 ← phi( mode_ctrl::@35/(byte) dtv_control#257 )
  (byte) mode_ctrl::ctrl#10 ← phi( mode_ctrl::@35/(byte) mode_ctrl::ctrl#18 )
  (byte~) mode_ctrl::$15 ← (byte) mode_ctrl::ctrl#10 | (byte) DTV_OVERSCAN#0
  (byte) mode_ctrl::ctrl#3 ← (byte~) mode_ctrl::$15
  to:mode_ctrl::@10
mode_ctrl::@11: scope:[mode_ctrl]  from mode_ctrl::@26 mode_ctrl::@36
  (byte) dtv_control#223 ← phi( mode_ctrl::@26/(byte) dtv_control#238 mode_ctrl::@36/(byte) dtv_control#239 )
  (byte) mode_ctrl::ctrl#26 ← phi( mode_ctrl::@26/(byte) mode_ctrl::ctrl#4 mode_ctrl::@36/(byte) mode_ctrl::ctrl#19 )
  (byte) keyboard_key_pressed::key#17 ← (byte) KEY_U#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#19 ← (byte) keyboard_key_pressed::return#1
  to:mode_ctrl::@37
mode_ctrl::@37: scope:[mode_ctrl]  from mode_ctrl::@11
  (byte) dtv_control#207 ← phi( mode_ctrl::@11/(byte) dtv_control#223 )
  (byte) mode_ctrl::ctrl#20 ← phi( mode_ctrl::@11/(byte) mode_ctrl::ctrl#26 )
  (byte) keyboard_key_pressed::return#40 ← phi( mode_ctrl::@11/(byte) keyboard_key_pressed::return#19 )
  (byte~) mode_ctrl::$20 ← (byte) keyboard_key_pressed::return#40
  (bool~) mode_ctrl::$21 ← (byte~) mode_ctrl::$20 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mode_ctrl::$22 ← ! (bool~) mode_ctrl::$21
  if((bool~) mode_ctrl::$22) goto mode_ctrl::@12
  to:mode_ctrl::@27
mode_ctrl::@26: scope:[mode_ctrl]  from mode_ctrl::@36
  (byte) dtv_control#238 ← phi( mode_ctrl::@36/(byte) dtv_control#239 )
  (byte) mode_ctrl::ctrl#11 ← phi( mode_ctrl::@36/(byte) mode_ctrl::ctrl#19 )
  (byte~) mode_ctrl::$19 ← (byte) mode_ctrl::ctrl#11 | (byte) DTV_BORDER_OFF#0
  (byte) mode_ctrl::ctrl#4 ← (byte~) mode_ctrl::$19
  to:mode_ctrl::@11
mode_ctrl::@12: scope:[mode_ctrl]  from mode_ctrl::@27 mode_ctrl::@37
  (byte) dtv_control#192 ← phi( mode_ctrl::@27/(byte) dtv_control#206 mode_ctrl::@37/(byte) dtv_control#207 )
  (byte) mode_ctrl::ctrl#27 ← phi( mode_ctrl::@27/(byte) mode_ctrl::ctrl#5 mode_ctrl::@37/(byte) mode_ctrl::ctrl#20 )
  (byte) keyboard_key_pressed::key#18 ← (byte) KEY_C#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#20 ← (byte) keyboard_key_pressed::return#1
  to:mode_ctrl::@38
mode_ctrl::@38: scope:[mode_ctrl]  from mode_ctrl::@12
  (byte) dtv_control#176 ← phi( mode_ctrl::@12/(byte) dtv_control#192 )
  (byte) mode_ctrl::ctrl#21 ← phi( mode_ctrl::@12/(byte) mode_ctrl::ctrl#27 )
  (byte) keyboard_key_pressed::return#41 ← phi( mode_ctrl::@12/(byte) keyboard_key_pressed::return#20 )
  (byte~) mode_ctrl::$24 ← (byte) keyboard_key_pressed::return#41
  (bool~) mode_ctrl::$25 ← (byte~) mode_ctrl::$24 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mode_ctrl::$26 ← ! (bool~) mode_ctrl::$25
  if((bool~) mode_ctrl::$26) goto mode_ctrl::@13
  to:mode_ctrl::@28
mode_ctrl::@27: scope:[mode_ctrl]  from mode_ctrl::@37
  (byte) dtv_control#206 ← phi( mode_ctrl::@37/(byte) dtv_control#207 )
  (byte) mode_ctrl::ctrl#12 ← phi( mode_ctrl::@37/(byte) mode_ctrl::ctrl#20 )
  (byte~) mode_ctrl::$23 ← (byte) mode_ctrl::ctrl#12 | (byte) DTV_CHUNKY#0
  (byte) mode_ctrl::ctrl#5 ← (byte~) mode_ctrl::$23
  to:mode_ctrl::@12
mode_ctrl::@13: scope:[mode_ctrl]  from mode_ctrl::@28 mode_ctrl::@38
  (byte) dtv_control#148 ← phi( mode_ctrl::@28/(byte) dtv_control#175 mode_ctrl::@38/(byte) dtv_control#176 )
  (byte) mode_ctrl::ctrl#28 ← phi( mode_ctrl::@28/(byte) mode_ctrl::ctrl#6 mode_ctrl::@38/(byte) mode_ctrl::ctrl#21 )
  (byte) keyboard_key_pressed::key#19 ← (byte) KEY_0#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#21 ← (byte) keyboard_key_pressed::return#1
  to:mode_ctrl::@39
mode_ctrl::@39: scope:[mode_ctrl]  from mode_ctrl::@13
  (byte) dtv_control#116 ← phi( mode_ctrl::@13/(byte) dtv_control#148 )
  (byte) mode_ctrl::ctrl#22 ← phi( mode_ctrl::@13/(byte) mode_ctrl::ctrl#28 )
  (byte) keyboard_key_pressed::return#42 ← phi( mode_ctrl::@13/(byte) keyboard_key_pressed::return#21 )
  (byte~) mode_ctrl::$28 ← (byte) keyboard_key_pressed::return#42
  (bool~) mode_ctrl::$29 ← (byte~) mode_ctrl::$28 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mode_ctrl::$30 ← ! (bool~) mode_ctrl::$29
  if((bool~) mode_ctrl::$30) goto mode_ctrl::@14
  to:mode_ctrl::@29
mode_ctrl::@28: scope:[mode_ctrl]  from mode_ctrl::@38
  (byte) dtv_control#175 ← phi( mode_ctrl::@38/(byte) dtv_control#176 )
  (byte) mode_ctrl::ctrl#13 ← phi( mode_ctrl::@38/(byte) mode_ctrl::ctrl#21 )
  (byte~) mode_ctrl::$27 ← (byte) mode_ctrl::ctrl#13 | (byte) DTV_COLORRAM_OFF#0
  (byte) mode_ctrl::ctrl#6 ← (byte~) mode_ctrl::$27
  to:mode_ctrl::@13
mode_ctrl::@14: scope:[mode_ctrl]  from mode_ctrl::@29 mode_ctrl::@39
  (byte) dtv_control#72 ← phi( mode_ctrl::@29/(byte) dtv_control#115 mode_ctrl::@39/(byte) dtv_control#116 )
  (byte) mode_ctrl::ctrl#14 ← phi( mode_ctrl::@29/(byte) mode_ctrl::ctrl#7 mode_ctrl::@39/(byte) mode_ctrl::ctrl#22 )
  (bool~) mode_ctrl::$31 ← (byte) mode_ctrl::ctrl#14 != (byte) dtv_control#72
  (bool~) mode_ctrl::$32 ← ! (bool~) mode_ctrl::$31
  if((bool~) mode_ctrl::$32) goto mode_ctrl::@15
  to:mode_ctrl::@30
mode_ctrl::@29: scope:[mode_ctrl]  from mode_ctrl::@39
  (byte) dtv_control#115 ← phi( mode_ctrl::@39/(byte) dtv_control#116 )
  (byte) mode_ctrl::ctrl#7 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_ctrl::@14
mode_ctrl::@15: scope:[mode_ctrl]  from mode_ctrl::@14
  (byte) dtv_control#146 ← phi( mode_ctrl::@14/(byte) dtv_control#72 )
  to:mode_ctrl::@1
mode_ctrl::@30: scope:[mode_ctrl]  from mode_ctrl::@14
  (byte) mode_ctrl::ctrl#15 ← phi( mode_ctrl::@14/(byte) mode_ctrl::ctrl#14 )
  (byte) dtv_control#17 ← (byte) mode_ctrl::ctrl#15
  *((byte*) DTV_CONTROL#0) ← (byte) mode_ctrl::ctrl#15
  *((byte*) BORDERCOL#0) ← (byte) mode_ctrl::ctrl#15
  to:mode_ctrl::@1
mode_stdchar: scope:[mode_stdchar]  from menu::@22
  (byte*) mode_stdchar::SCREEN#0 ← ((byte*)) (word/dword/signed dword) $8000
  (byte*) mode_stdchar::CHARSET#0 ← ((byte*)) (word/dword/signed dword) $9000
  (byte*) mode_stdchar::COLORS#0 ← ((byte*)) (word/dword/signed dword) $d800
  (dword~) mode_stdchar::$0 ← ((dword)) (byte*) mode_stdchar::CHARSET#0
  (dword~) mode_stdchar::$1 ← (dword~) mode_stdchar::$0 / (dword/signed dword) $10000
  (byte~) mode_stdchar::$2 ← ((byte)) (dword~) mode_stdchar::$1
  *((byte*) DTV_GRAPHICS_VIC_BANK#0) ← (byte~) mode_stdchar::$2
  (dword~) mode_stdchar::$3 ← (dword) DTV_COLOR_BANK_DEFAULT#0 / (word/signed word/dword/signed dword) $400
  (word~) mode_stdchar::$4 ← ((word)) (dword~) mode_stdchar::$3
  (byte~) mode_stdchar::$5 ← < (word~) mode_stdchar::$4
  *((byte*) DTV_COLOR_BANK_LO#0) ← (byte~) mode_stdchar::$5
  (dword~) mode_stdchar::$6 ← (dword) DTV_COLOR_BANK_DEFAULT#0 / (word/signed word/dword/signed dword) $400
  (word~) mode_stdchar::$7 ← ((word)) (dword~) mode_stdchar::$6
  (byte~) mode_stdchar::$8 ← > (word~) mode_stdchar::$7
  *((byte*) DTV_COLOR_BANK_HI#0) ← (byte~) mode_stdchar::$8
  (byte) dtv_control#18 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) mode_stdchar::$9 ← ((word)) (byte*) mode_stdchar::CHARSET#0
  (word/signed dword/dword~) mode_stdchar::$10 ← (word~) mode_stdchar::$9 / (word/signed word/dword/signed dword) $4000
  (byte~) mode_stdchar::$11 ← ((byte)) (word/signed dword/dword~) mode_stdchar::$10
  (byte/word/dword~) mode_stdchar::$12 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) mode_stdchar::$11
  *((byte*) CIA2_PORT_A#0) ← (byte/word/dword~) mode_stdchar::$12
  (byte~) mode_stdchar::$13 ← (byte) VIC_DEN#0 | (byte) VIC_RSEL#0
  (byte/word/dword~) mode_stdchar::$14 ← (byte~) mode_stdchar::$13 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) mode_stdchar::$14
  *((byte*) VIC_CONTROL2#0) ← (byte) VIC_CSEL#0
  (word~) mode_stdchar::$15 ← ((word)) (byte*) mode_stdchar::SCREEN#0
  (word~) mode_stdchar::$16 ← (word~) mode_stdchar::$15 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) mode_stdchar::$17 ← (word~) mode_stdchar::$16 / (byte/signed byte/word/signed word/dword/signed dword) $40
  (word~) mode_stdchar::$18 ← ((word)) (byte*) mode_stdchar::CHARSET#0
  (word~) mode_stdchar::$19 ← (word~) mode_stdchar::$18 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) mode_stdchar::$20 ← (word~) mode_stdchar::$19 / (word/signed word/dword/signed dword) $400
  (word/dword~) mode_stdchar::$21 ← (word/signed dword/dword~) mode_stdchar::$17 | (word/signed dword/dword~) mode_stdchar::$20
  (byte~) mode_stdchar::$22 ← ((byte)) (word/dword~) mode_stdchar::$21
  *((byte*) VIC_MEMORY#0) ← (byte~) mode_stdchar::$22
  (byte) mode_stdchar::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_stdchar::@1
mode_stdchar::@1: scope:[mode_stdchar]  from mode_stdchar mode_stdchar::@1
  (byte) dtv_control#224 ← phi( mode_stdchar/(byte) dtv_control#18 mode_stdchar::@1/(byte) dtv_control#224 )
  (byte) mode_stdchar::i#2 ← phi( mode_stdchar/(byte) mode_stdchar::i#0 mode_stdchar::@1/(byte) mode_stdchar::i#1 )
  *((byte*) DTV_PALETTE#0 + (byte) mode_stdchar::i#2) ← *((byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_stdchar::i#2)
  (byte) mode_stdchar::i#1 ← (byte) mode_stdchar::i#2 + rangenext(0,$f)
  (bool~) mode_stdchar::$23 ← (byte) mode_stdchar::i#1 != rangelast(0,$f)
  if((bool~) mode_stdchar::$23) goto mode_stdchar::@1
  to:mode_stdchar::@4
mode_stdchar::@4: scope:[mode_stdchar]  from mode_stdchar::@1
  (byte) dtv_control#208 ← phi( mode_stdchar::@1/(byte) dtv_control#224 )
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) mode_stdchar::col#0 ← (byte*) mode_stdchar::COLORS#0
  (byte*) mode_stdchar::ch#0 ← (byte*) mode_stdchar::SCREEN#0
  (byte) mode_stdchar::cy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_stdchar::@2
mode_stdchar::@2: scope:[mode_stdchar]  from mode_stdchar::@4 mode_stdchar::@5
  (byte) dtv_control#193 ← phi( mode_stdchar::@4/(byte) dtv_control#208 mode_stdchar::@5/(byte) dtv_control#149 )
  (byte*) mode_stdchar::ch#3 ← phi( mode_stdchar::@4/(byte*) mode_stdchar::ch#0 mode_stdchar::@5/(byte*) mode_stdchar::ch#4 )
  (byte*) mode_stdchar::col#3 ← phi( mode_stdchar::@4/(byte*) mode_stdchar::col#0 mode_stdchar::@5/(byte*) mode_stdchar::col#4 )
  (byte) mode_stdchar::cy#4 ← phi( mode_stdchar::@4/(byte) mode_stdchar::cy#0 mode_stdchar::@5/(byte) mode_stdchar::cy#1 )
  (byte) mode_stdchar::cx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_stdchar::@3
mode_stdchar::@3: scope:[mode_stdchar]  from mode_stdchar::@2 mode_stdchar::@3
  (byte) dtv_control#177 ← phi( mode_stdchar::@2/(byte) dtv_control#193 mode_stdchar::@3/(byte) dtv_control#177 )
  (byte*) mode_stdchar::ch#2 ← phi( mode_stdchar::@2/(byte*) mode_stdchar::ch#3 mode_stdchar::@3/(byte*) mode_stdchar::ch#1 )
  (byte*) mode_stdchar::col#2 ← phi( mode_stdchar::@2/(byte*) mode_stdchar::col#3 mode_stdchar::@3/(byte*) mode_stdchar::col#1 )
  (byte) mode_stdchar::cy#2 ← phi( mode_stdchar::@2/(byte) mode_stdchar::cy#4 mode_stdchar::@3/(byte) mode_stdchar::cy#2 )
  (byte) mode_stdchar::cx#2 ← phi( mode_stdchar::@2/(byte) mode_stdchar::cx#0 mode_stdchar::@3/(byte) mode_stdchar::cx#1 )
  (byte~) mode_stdchar::$24 ← (byte) mode_stdchar::cx#2 + (byte) mode_stdchar::cy#2
  (byte~) mode_stdchar::$25 ← (byte~) mode_stdchar::$24 & (byte/signed byte/word/signed word/dword/signed dword) $f
  *((byte*) mode_stdchar::col#2) ← (byte~) mode_stdchar::$25
  (byte*) mode_stdchar::col#1 ← ++ (byte*) mode_stdchar::col#2
  (byte~) mode_stdchar::$26 ← (byte) mode_stdchar::cy#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) mode_stdchar::$27 ← (byte~) mode_stdchar::$26 << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) mode_stdchar::$28 ← (byte) mode_stdchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) mode_stdchar::$29 ← (byte~) mode_stdchar::$27 | (byte~) mode_stdchar::$28
  *((byte*) mode_stdchar::ch#2) ← (byte~) mode_stdchar::$29
  (byte*) mode_stdchar::ch#1 ← ++ (byte*) mode_stdchar::ch#2
  (byte) mode_stdchar::cx#1 ← (byte) mode_stdchar::cx#2 + rangenext(0,$27)
  (bool~) mode_stdchar::$30 ← (byte) mode_stdchar::cx#1 != rangelast(0,$27)
  if((bool~) mode_stdchar::$30) goto mode_stdchar::@3
  to:mode_stdchar::@5
mode_stdchar::@5: scope:[mode_stdchar]  from mode_stdchar::@3
  (byte) dtv_control#149 ← phi( mode_stdchar::@3/(byte) dtv_control#177 )
  (byte*) mode_stdchar::ch#4 ← phi( mode_stdchar::@3/(byte*) mode_stdchar::ch#1 )
  (byte*) mode_stdchar::col#4 ← phi( mode_stdchar::@3/(byte*) mode_stdchar::col#1 )
  (byte) mode_stdchar::cy#3 ← phi( mode_stdchar::@3/(byte) mode_stdchar::cy#2 )
  (byte) mode_stdchar::cy#1 ← (byte) mode_stdchar::cy#3 + rangenext(0,$18)
  (bool~) mode_stdchar::$31 ← (byte) mode_stdchar::cy#1 != rangelast(0,$18)
  if((bool~) mode_stdchar::$31) goto mode_stdchar::@2
  to:mode_stdchar::@6
mode_stdchar::@6: scope:[mode_stdchar]  from mode_stdchar::@5
  (byte) dtv_control#117 ← phi( mode_stdchar::@5/(byte) dtv_control#149 )
  call mode_ctrl 
  to:mode_stdchar::@7
mode_stdchar::@7: scope:[mode_stdchar]  from mode_stdchar::@6
  (byte) dtv_control#73 ← phi( mode_stdchar::@6/(byte) dtv_control#16 )
  (byte) dtv_control#19 ← (byte) dtv_control#73
  to:mode_stdchar::@return
mode_stdchar::@return: scope:[mode_stdchar]  from mode_stdchar::@7
  (byte) dtv_control#74 ← phi( mode_stdchar::@7/(byte) dtv_control#19 )
  (byte) dtv_control#20 ← (byte) dtv_control#74
  return 
  to:@return
mode_ecmchar: scope:[mode_ecmchar]  from menu::@24
  (byte*) mode_ecmchar::SCREEN#0 ← ((byte*)) (word/dword/signed dword) $8000
  (byte*) mode_ecmchar::CHARSET#0 ← ((byte*)) (word/dword/signed dword) $9000
  (byte*) mode_ecmchar::COLORS#0 ← ((byte*)) (word/dword/signed dword) $d800
  (dword~) mode_ecmchar::$0 ← ((dword)) (byte*) mode_ecmchar::CHARSET#0
  (dword~) mode_ecmchar::$1 ← (dword~) mode_ecmchar::$0 / (dword/signed dword) $10000
  (byte~) mode_ecmchar::$2 ← ((byte)) (dword~) mode_ecmchar::$1
  *((byte*) DTV_GRAPHICS_VIC_BANK#0) ← (byte~) mode_ecmchar::$2
  (dword~) mode_ecmchar::$3 ← (dword) DTV_COLOR_BANK_DEFAULT#0 / (word/signed word/dword/signed dword) $400
  (word~) mode_ecmchar::$4 ← ((word)) (dword~) mode_ecmchar::$3
  (byte~) mode_ecmchar::$5 ← < (word~) mode_ecmchar::$4
  *((byte*) DTV_COLOR_BANK_LO#0) ← (byte~) mode_ecmchar::$5
  (dword~) mode_ecmchar::$6 ← (dword) DTV_COLOR_BANK_DEFAULT#0 / (word/signed word/dword/signed dword) $400
  (word~) mode_ecmchar::$7 ← ((word)) (dword~) mode_ecmchar::$6
  (byte~) mode_ecmchar::$8 ← > (word~) mode_ecmchar::$7
  *((byte*) DTV_COLOR_BANK_HI#0) ← (byte~) mode_ecmchar::$8
  (byte) dtv_control#21 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) mode_ecmchar::$9 ← ((word)) (byte*) mode_ecmchar::CHARSET#0
  (word/signed dword/dword~) mode_ecmchar::$10 ← (word~) mode_ecmchar::$9 / (word/signed word/dword/signed dword) $4000
  (byte~) mode_ecmchar::$11 ← ((byte)) (word/signed dword/dword~) mode_ecmchar::$10
  (byte/word/dword~) mode_ecmchar::$12 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) mode_ecmchar::$11
  *((byte*) CIA2_PORT_A#0) ← (byte/word/dword~) mode_ecmchar::$12
  (byte~) mode_ecmchar::$13 ← (byte) VIC_DEN#0 | (byte) VIC_RSEL#0
  (byte~) mode_ecmchar::$14 ← (byte~) mode_ecmchar::$13 | (byte) VIC_ECM#0
  (byte/word/dword~) mode_ecmchar::$15 ← (byte~) mode_ecmchar::$14 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) mode_ecmchar::$15
  *((byte*) VIC_CONTROL2#0) ← (byte) VIC_CSEL#0
  (word~) mode_ecmchar::$16 ← ((word)) (byte*) mode_ecmchar::SCREEN#0
  (word~) mode_ecmchar::$17 ← (word~) mode_ecmchar::$16 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) mode_ecmchar::$18 ← (word~) mode_ecmchar::$17 / (byte/signed byte/word/signed word/dword/signed dword) $40
  (word~) mode_ecmchar::$19 ← ((word)) (byte*) mode_ecmchar::CHARSET#0
  (word~) mode_ecmchar::$20 ← (word~) mode_ecmchar::$19 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) mode_ecmchar::$21 ← (word~) mode_ecmchar::$20 / (word/signed word/dword/signed dword) $400
  (word/dword~) mode_ecmchar::$22 ← (word/signed dword/dword~) mode_ecmchar::$18 | (word/signed dword/dword~) mode_ecmchar::$21
  (byte~) mode_ecmchar::$23 ← ((byte)) (word/dword~) mode_ecmchar::$22
  *((byte*) VIC_MEMORY#0) ← (byte~) mode_ecmchar::$23
  (byte) mode_ecmchar::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_ecmchar::@1
mode_ecmchar::@1: scope:[mode_ecmchar]  from mode_ecmchar mode_ecmchar::@1
  (byte) dtv_control#225 ← phi( mode_ecmchar/(byte) dtv_control#21 mode_ecmchar::@1/(byte) dtv_control#225 )
  (byte) mode_ecmchar::i#2 ← phi( mode_ecmchar/(byte) mode_ecmchar::i#0 mode_ecmchar::@1/(byte) mode_ecmchar::i#1 )
  *((byte*) DTV_PALETTE#0 + (byte) mode_ecmchar::i#2) ← *((byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_ecmchar::i#2)
  (byte) mode_ecmchar::i#1 ← (byte) mode_ecmchar::i#2 + rangenext(0,$f)
  (bool~) mode_ecmchar::$24 ← (byte) mode_ecmchar::i#1 != rangelast(0,$f)
  if((bool~) mode_ecmchar::$24) goto mode_ecmchar::@1
  to:mode_ecmchar::@4
mode_ecmchar::@4: scope:[mode_ecmchar]  from mode_ecmchar::@1
  (byte) dtv_control#209 ← phi( mode_ecmchar::@1/(byte) dtv_control#225 )
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2
  *((byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) 5
  *((byte*) BGCOL4#0) ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte*) mode_ecmchar::col#0 ← (byte*) mode_ecmchar::COLORS#0
  (byte*) mode_ecmchar::ch#0 ← (byte*) mode_ecmchar::SCREEN#0
  (byte) mode_ecmchar::cy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_ecmchar::@2
mode_ecmchar::@2: scope:[mode_ecmchar]  from mode_ecmchar::@4 mode_ecmchar::@5
  (byte) dtv_control#194 ← phi( mode_ecmchar::@4/(byte) dtv_control#209 mode_ecmchar::@5/(byte) dtv_control#150 )
  (byte*) mode_ecmchar::ch#3 ← phi( mode_ecmchar::@4/(byte*) mode_ecmchar::ch#0 mode_ecmchar::@5/(byte*) mode_ecmchar::ch#4 )
  (byte*) mode_ecmchar::col#3 ← phi( mode_ecmchar::@4/(byte*) mode_ecmchar::col#0 mode_ecmchar::@5/(byte*) mode_ecmchar::col#4 )
  (byte) mode_ecmchar::cy#4 ← phi( mode_ecmchar::@4/(byte) mode_ecmchar::cy#0 mode_ecmchar::@5/(byte) mode_ecmchar::cy#1 )
  (byte) mode_ecmchar::cx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_ecmchar::@3
mode_ecmchar::@3: scope:[mode_ecmchar]  from mode_ecmchar::@2 mode_ecmchar::@3
  (byte) dtv_control#178 ← phi( mode_ecmchar::@2/(byte) dtv_control#194 mode_ecmchar::@3/(byte) dtv_control#178 )
  (byte*) mode_ecmchar::ch#2 ← phi( mode_ecmchar::@2/(byte*) mode_ecmchar::ch#3 mode_ecmchar::@3/(byte*) mode_ecmchar::ch#1 )
  (byte*) mode_ecmchar::col#2 ← phi( mode_ecmchar::@2/(byte*) mode_ecmchar::col#3 mode_ecmchar::@3/(byte*) mode_ecmchar::col#1 )
  (byte) mode_ecmchar::cy#2 ← phi( mode_ecmchar::@2/(byte) mode_ecmchar::cy#4 mode_ecmchar::@3/(byte) mode_ecmchar::cy#2 )
  (byte) mode_ecmchar::cx#2 ← phi( mode_ecmchar::@2/(byte) mode_ecmchar::cx#0 mode_ecmchar::@3/(byte) mode_ecmchar::cx#1 )
  (byte~) mode_ecmchar::$25 ← (byte) mode_ecmchar::cx#2 + (byte) mode_ecmchar::cy#2
  (byte~) mode_ecmchar::$26 ← (byte~) mode_ecmchar::$25 & (byte/signed byte/word/signed word/dword/signed dword) $f
  *((byte*) mode_ecmchar::col#2) ← (byte~) mode_ecmchar::$26
  (byte*) mode_ecmchar::col#1 ← ++ (byte*) mode_ecmchar::col#2
  (byte~) mode_ecmchar::$27 ← (byte) mode_ecmchar::cy#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) mode_ecmchar::$28 ← (byte~) mode_ecmchar::$27 << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) mode_ecmchar::$29 ← (byte) mode_ecmchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) mode_ecmchar::$30 ← (byte~) mode_ecmchar::$28 | (byte~) mode_ecmchar::$29
  *((byte*) mode_ecmchar::ch#2) ← (byte~) mode_ecmchar::$30
  (byte*) mode_ecmchar::ch#1 ← ++ (byte*) mode_ecmchar::ch#2
  (byte) mode_ecmchar::cx#1 ← (byte) mode_ecmchar::cx#2 + rangenext(0,$27)
  (bool~) mode_ecmchar::$31 ← (byte) mode_ecmchar::cx#1 != rangelast(0,$27)
  if((bool~) mode_ecmchar::$31) goto mode_ecmchar::@3
  to:mode_ecmchar::@5
mode_ecmchar::@5: scope:[mode_ecmchar]  from mode_ecmchar::@3
  (byte) dtv_control#150 ← phi( mode_ecmchar::@3/(byte) dtv_control#178 )
  (byte*) mode_ecmchar::ch#4 ← phi( mode_ecmchar::@3/(byte*) mode_ecmchar::ch#1 )
  (byte*) mode_ecmchar::col#4 ← phi( mode_ecmchar::@3/(byte*) mode_ecmchar::col#1 )
  (byte) mode_ecmchar::cy#3 ← phi( mode_ecmchar::@3/(byte) mode_ecmchar::cy#2 )
  (byte) mode_ecmchar::cy#1 ← (byte) mode_ecmchar::cy#3 + rangenext(0,$18)
  (bool~) mode_ecmchar::$32 ← (byte) mode_ecmchar::cy#1 != rangelast(0,$18)
  if((bool~) mode_ecmchar::$32) goto mode_ecmchar::@2
  to:mode_ecmchar::@6
mode_ecmchar::@6: scope:[mode_ecmchar]  from mode_ecmchar::@5
  (byte) dtv_control#118 ← phi( mode_ecmchar::@5/(byte) dtv_control#150 )
  call mode_ctrl 
  to:mode_ecmchar::@7
mode_ecmchar::@7: scope:[mode_ecmchar]  from mode_ecmchar::@6
  (byte) dtv_control#75 ← phi( mode_ecmchar::@6/(byte) dtv_control#16 )
  (byte) dtv_control#22 ← (byte) dtv_control#75
  to:mode_ecmchar::@return
mode_ecmchar::@return: scope:[mode_ecmchar]  from mode_ecmchar::@7
  (byte) dtv_control#76 ← phi( mode_ecmchar::@7/(byte) dtv_control#22 )
  (byte) dtv_control#23 ← (byte) dtv_control#76
  return 
  to:@return
mode_mcchar: scope:[mode_mcchar]  from menu::@26
  (byte*) mode_mcchar::SCREEN#0 ← ((byte*)) (word/dword/signed dword) $8000
  (byte*) mode_mcchar::CHARSET#0 ← ((byte*)) (word/dword/signed dword) $9000
  (byte*) mode_mcchar::COLORS#0 ← ((byte*)) (word/dword/signed dword) $d800
  (dword~) mode_mcchar::$0 ← ((dword)) (byte*) mode_mcchar::CHARSET#0
  (dword~) mode_mcchar::$1 ← (dword~) mode_mcchar::$0 / (dword/signed dword) $10000
  (byte~) mode_mcchar::$2 ← ((byte)) (dword~) mode_mcchar::$1
  *((byte*) DTV_GRAPHICS_VIC_BANK#0) ← (byte~) mode_mcchar::$2
  (dword~) mode_mcchar::$3 ← (dword) DTV_COLOR_BANK_DEFAULT#0 / (word/signed word/dword/signed dword) $400
  (word~) mode_mcchar::$4 ← ((word)) (dword~) mode_mcchar::$3
  (byte~) mode_mcchar::$5 ← < (word~) mode_mcchar::$4
  *((byte*) DTV_COLOR_BANK_LO#0) ← (byte~) mode_mcchar::$5
  (dword~) mode_mcchar::$6 ← (dword) DTV_COLOR_BANK_DEFAULT#0 / (word/signed word/dword/signed dword) $400
  (word~) mode_mcchar::$7 ← ((word)) (dword~) mode_mcchar::$6
  (byte~) mode_mcchar::$8 ← > (word~) mode_mcchar::$7
  *((byte*) DTV_COLOR_BANK_HI#0) ← (byte~) mode_mcchar::$8
  (byte) dtv_control#24 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) mode_mcchar::$9 ← ((word)) (byte*) mode_mcchar::CHARSET#0
  (word/signed dword/dword~) mode_mcchar::$10 ← (word~) mode_mcchar::$9 / (word/signed word/dword/signed dword) $4000
  (byte~) mode_mcchar::$11 ← ((byte)) (word/signed dword/dword~) mode_mcchar::$10
  (byte/word/dword~) mode_mcchar::$12 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) mode_mcchar::$11
  *((byte*) CIA2_PORT_A#0) ← (byte/word/dword~) mode_mcchar::$12
  (byte~) mode_mcchar::$13 ← (byte) VIC_DEN#0 | (byte) VIC_RSEL#0
  (byte/word/dword~) mode_mcchar::$14 ← (byte~) mode_mcchar::$13 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) mode_mcchar::$14
  (byte~) mode_mcchar::$15 ← (byte) VIC_CSEL#0 | (byte) VIC_MCM#0
  *((byte*) VIC_CONTROL2#0) ← (byte~) mode_mcchar::$15
  (word~) mode_mcchar::$16 ← ((word)) (byte*) mode_mcchar::SCREEN#0
  (word~) mode_mcchar::$17 ← (word~) mode_mcchar::$16 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) mode_mcchar::$18 ← (word~) mode_mcchar::$17 / (byte/signed byte/word/signed word/dword/signed dword) $40
  (word~) mode_mcchar::$19 ← ((word)) (byte*) mode_mcchar::CHARSET#0
  (word~) mode_mcchar::$20 ← (word~) mode_mcchar::$19 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) mode_mcchar::$21 ← (word~) mode_mcchar::$20 / (word/signed word/dword/signed dword) $400
  (word/dword~) mode_mcchar::$22 ← (word/signed dword/dword~) mode_mcchar::$18 | (word/signed dword/dword~) mode_mcchar::$21
  (byte~) mode_mcchar::$23 ← ((byte)) (word/dword~) mode_mcchar::$22
  *((byte*) VIC_MEMORY#0) ← (byte~) mode_mcchar::$23
  (byte) mode_mcchar::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_mcchar::@1
mode_mcchar::@1: scope:[mode_mcchar]  from mode_mcchar mode_mcchar::@1
  (byte) dtv_control#226 ← phi( mode_mcchar/(byte) dtv_control#24 mode_mcchar::@1/(byte) dtv_control#226 )
  (byte) mode_mcchar::i#2 ← phi( mode_mcchar/(byte) mode_mcchar::i#0 mode_mcchar::@1/(byte) mode_mcchar::i#1 )
  *((byte*) DTV_PALETTE#0 + (byte) mode_mcchar::i#2) ← *((byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_mcchar::i#2)
  (byte) mode_mcchar::i#1 ← (byte) mode_mcchar::i#2 + rangenext(0,$f)
  (bool~) mode_mcchar::$24 ← (byte) mode_mcchar::i#1 != rangelast(0,$f)
  if((bool~) mode_mcchar::$24) goto mode_mcchar::@1
  to:mode_mcchar::@4
mode_mcchar::@4: scope:[mode_mcchar]  from mode_mcchar::@1
  (byte) dtv_control#210 ← phi( mode_mcchar::@1/(byte) dtv_control#226 )
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BGCOL1#0) ← (byte) BLACK#0
  *((byte*) BGCOL2#0) ← (byte) GREEN#0
  *((byte*) BGCOL3#0) ← (byte) BLUE#0
  (byte*) mode_mcchar::col#0 ← (byte*) mode_mcchar::COLORS#0
  (byte*) mode_mcchar::ch#0 ← (byte*) mode_mcchar::SCREEN#0
  (byte) mode_mcchar::cy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_mcchar::@2
mode_mcchar::@2: scope:[mode_mcchar]  from mode_mcchar::@4 mode_mcchar::@5
  (byte) dtv_control#195 ← phi( mode_mcchar::@4/(byte) dtv_control#210 mode_mcchar::@5/(byte) dtv_control#151 )
  (byte*) mode_mcchar::ch#3 ← phi( mode_mcchar::@4/(byte*) mode_mcchar::ch#0 mode_mcchar::@5/(byte*) mode_mcchar::ch#4 )
  (byte*) mode_mcchar::col#3 ← phi( mode_mcchar::@4/(byte*) mode_mcchar::col#0 mode_mcchar::@5/(byte*) mode_mcchar::col#4 )
  (byte) mode_mcchar::cy#4 ← phi( mode_mcchar::@4/(byte) mode_mcchar::cy#0 mode_mcchar::@5/(byte) mode_mcchar::cy#1 )
  (byte) mode_mcchar::cx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_mcchar::@3
mode_mcchar::@3: scope:[mode_mcchar]  from mode_mcchar::@2 mode_mcchar::@3
  (byte) dtv_control#179 ← phi( mode_mcchar::@2/(byte) dtv_control#195 mode_mcchar::@3/(byte) dtv_control#179 )
  (byte*) mode_mcchar::ch#2 ← phi( mode_mcchar::@2/(byte*) mode_mcchar::ch#3 mode_mcchar::@3/(byte*) mode_mcchar::ch#1 )
  (byte*) mode_mcchar::col#2 ← phi( mode_mcchar::@2/(byte*) mode_mcchar::col#3 mode_mcchar::@3/(byte*) mode_mcchar::col#1 )
  (byte) mode_mcchar::cy#2 ← phi( mode_mcchar::@2/(byte) mode_mcchar::cy#4 mode_mcchar::@3/(byte) mode_mcchar::cy#2 )
  (byte) mode_mcchar::cx#2 ← phi( mode_mcchar::@2/(byte) mode_mcchar::cx#0 mode_mcchar::@3/(byte) mode_mcchar::cx#1 )
  (byte~) mode_mcchar::$25 ← (byte) mode_mcchar::cx#2 + (byte) mode_mcchar::cy#2
  (byte~) mode_mcchar::$26 ← (byte~) mode_mcchar::$25 & (byte/signed byte/word/signed word/dword/signed dword) $f
  *((byte*) mode_mcchar::col#2) ← (byte~) mode_mcchar::$26
  (byte*) mode_mcchar::col#1 ← ++ (byte*) mode_mcchar::col#2
  (byte~) mode_mcchar::$27 ← (byte) mode_mcchar::cy#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) mode_mcchar::$28 ← (byte~) mode_mcchar::$27 << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) mode_mcchar::$29 ← (byte) mode_mcchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) mode_mcchar::$30 ← (byte~) mode_mcchar::$28 | (byte~) mode_mcchar::$29
  *((byte*) mode_mcchar::ch#2) ← (byte~) mode_mcchar::$30
  (byte*) mode_mcchar::ch#1 ← ++ (byte*) mode_mcchar::ch#2
  (byte) mode_mcchar::cx#1 ← (byte) mode_mcchar::cx#2 + rangenext(0,$27)
  (bool~) mode_mcchar::$31 ← (byte) mode_mcchar::cx#1 != rangelast(0,$27)
  if((bool~) mode_mcchar::$31) goto mode_mcchar::@3
  to:mode_mcchar::@5
mode_mcchar::@5: scope:[mode_mcchar]  from mode_mcchar::@3
  (byte) dtv_control#151 ← phi( mode_mcchar::@3/(byte) dtv_control#179 )
  (byte*) mode_mcchar::ch#4 ← phi( mode_mcchar::@3/(byte*) mode_mcchar::ch#1 )
  (byte*) mode_mcchar::col#4 ← phi( mode_mcchar::@3/(byte*) mode_mcchar::col#1 )
  (byte) mode_mcchar::cy#3 ← phi( mode_mcchar::@3/(byte) mode_mcchar::cy#2 )
  (byte) mode_mcchar::cy#1 ← (byte) mode_mcchar::cy#3 + rangenext(0,$18)
  (bool~) mode_mcchar::$32 ← (byte) mode_mcchar::cy#1 != rangelast(0,$18)
  if((bool~) mode_mcchar::$32) goto mode_mcchar::@2
  to:mode_mcchar::@6
mode_mcchar::@6: scope:[mode_mcchar]  from mode_mcchar::@5
  (byte) dtv_control#119 ← phi( mode_mcchar::@5/(byte) dtv_control#151 )
  call mode_ctrl 
  to:mode_mcchar::@7
mode_mcchar::@7: scope:[mode_mcchar]  from mode_mcchar::@6
  (byte) dtv_control#77 ← phi( mode_mcchar::@6/(byte) dtv_control#16 )
  (byte) dtv_control#25 ← (byte) dtv_control#77
  to:mode_mcchar::@return
mode_mcchar::@return: scope:[mode_mcchar]  from mode_mcchar::@7
  (byte) dtv_control#78 ← phi( mode_mcchar::@7/(byte) dtv_control#25 )
  (byte) dtv_control#26 ← (byte) dtv_control#78
  return 
  to:@return
mode_stdbitmap: scope:[mode_stdbitmap]  from menu::@28
  (byte*) mode_stdbitmap::SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) $4000
  (byte*) mode_stdbitmap::BITMAP#0 ← ((byte*)) (word/signed word/dword/signed dword) $6000
  (dword~) mode_stdbitmap::$0 ← ((dword)) (byte*) mode_stdbitmap::BITMAP#0
  (dword~) mode_stdbitmap::$1 ← (dword~) mode_stdbitmap::$0 / (dword/signed dword) $10000
  (byte~) mode_stdbitmap::$2 ← ((byte)) (dword~) mode_stdbitmap::$1
  *((byte*) DTV_GRAPHICS_VIC_BANK#0) ← (byte~) mode_stdbitmap::$2
  (byte) dtv_control#27 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) mode_stdbitmap::$3 ← ((word)) (byte*) mode_stdbitmap::BITMAP#0
  (word/signed dword/dword~) mode_stdbitmap::$4 ← (word~) mode_stdbitmap::$3 / (word/signed word/dword/signed dword) $4000
  (byte~) mode_stdbitmap::$5 ← ((byte)) (word/signed dword/dword~) mode_stdbitmap::$4
  (byte/word/dword~) mode_stdbitmap::$6 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) mode_stdbitmap::$5
  *((byte*) CIA2_PORT_A#0) ← (byte/word/dword~) mode_stdbitmap::$6
  (byte~) mode_stdbitmap::$7 ← (byte) VIC_BMM#0 | (byte) VIC_DEN#0
  (byte~) mode_stdbitmap::$8 ← (byte~) mode_stdbitmap::$7 | (byte) VIC_RSEL#0
  (byte/word/dword~) mode_stdbitmap::$9 ← (byte~) mode_stdbitmap::$8 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) mode_stdbitmap::$9
  *((byte*) VIC_CONTROL2#0) ← (byte) VIC_CSEL#0
  (word~) mode_stdbitmap::$10 ← ((word)) (byte*) mode_stdbitmap::SCREEN#0
  (word~) mode_stdbitmap::$11 ← (word~) mode_stdbitmap::$10 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) mode_stdbitmap::$12 ← (word~) mode_stdbitmap::$11 / (byte/signed byte/word/signed word/dword/signed dword) $40
  (word~) mode_stdbitmap::$13 ← ((word)) (byte*) mode_stdbitmap::BITMAP#0
  (word~) mode_stdbitmap::$14 ← (word~) mode_stdbitmap::$13 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) mode_stdbitmap::$15 ← (word~) mode_stdbitmap::$14 / (word/signed word/dword/signed dword) $400
  (word/dword~) mode_stdbitmap::$16 ← (word/signed dword/dword~) mode_stdbitmap::$12 | (word/signed dword/dword~) mode_stdbitmap::$15
  (byte~) mode_stdbitmap::$17 ← ((byte)) (word/dword~) mode_stdbitmap::$16
  *((byte*) VIC_MEMORY#0) ← (byte~) mode_stdbitmap::$17
  (byte) mode_stdbitmap::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_stdbitmap::@1
mode_stdbitmap::@1: scope:[mode_stdbitmap]  from mode_stdbitmap mode_stdbitmap::@1
  (byte) dtv_control#272 ← phi( mode_stdbitmap/(byte) dtv_control#27 mode_stdbitmap::@1/(byte) dtv_control#272 )
  (byte) mode_stdbitmap::i#2 ← phi( mode_stdbitmap/(byte) mode_stdbitmap::i#0 mode_stdbitmap::@1/(byte) mode_stdbitmap::i#1 )
  *((byte*) DTV_PALETTE#0 + (byte) mode_stdbitmap::i#2) ← *((byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_stdbitmap::i#2)
  (byte) mode_stdbitmap::i#1 ← (byte) mode_stdbitmap::i#2 + rangenext(0,$f)
  (bool~) mode_stdbitmap::$18 ← (byte) mode_stdbitmap::i#1 != rangelast(0,$f)
  if((bool~) mode_stdbitmap::$18) goto mode_stdbitmap::@1
  to:mode_stdbitmap::@5
mode_stdbitmap::@5: scope:[mode_stdbitmap]  from mode_stdbitmap::@1
  (byte) dtv_control#265 ← phi( mode_stdbitmap::@1/(byte) dtv_control#272 )
  *((byte*) BGCOL#0) ← (byte) BLACK#0
  *((byte*) BORDERCOL#0) ← (byte) BLACK#0
  (byte*) mode_stdbitmap::ch#0 ← (byte*) mode_stdbitmap::SCREEN#0
  (byte) mode_stdbitmap::cy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_stdbitmap::@2
mode_stdbitmap::@2: scope:[mode_stdbitmap]  from mode_stdbitmap::@5 mode_stdbitmap::@6
  (byte) dtv_control#258 ← phi( mode_stdbitmap::@5/(byte) dtv_control#265 mode_stdbitmap::@6/(byte) dtv_control#240 )
  (byte*) mode_stdbitmap::ch#3 ← phi( mode_stdbitmap::@5/(byte*) mode_stdbitmap::ch#0 mode_stdbitmap::@6/(byte*) mode_stdbitmap::ch#4 )
  (byte) mode_stdbitmap::cy#4 ← phi( mode_stdbitmap::@5/(byte) mode_stdbitmap::cy#0 mode_stdbitmap::@6/(byte) mode_stdbitmap::cy#1 )
  (byte) mode_stdbitmap::cx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_stdbitmap::@3
mode_stdbitmap::@3: scope:[mode_stdbitmap]  from mode_stdbitmap::@2 mode_stdbitmap::@3
  (byte) dtv_control#248 ← phi( mode_stdbitmap::@2/(byte) dtv_control#258 mode_stdbitmap::@3/(byte) dtv_control#248 )
  (byte*) mode_stdbitmap::ch#2 ← phi( mode_stdbitmap::@2/(byte*) mode_stdbitmap::ch#3 mode_stdbitmap::@3/(byte*) mode_stdbitmap::ch#1 )
  (byte) mode_stdbitmap::cy#2 ← phi( mode_stdbitmap::@2/(byte) mode_stdbitmap::cy#4 mode_stdbitmap::@3/(byte) mode_stdbitmap::cy#2 )
  (byte) mode_stdbitmap::cx#2 ← phi( mode_stdbitmap::@2/(byte) mode_stdbitmap::cx#0 mode_stdbitmap::@3/(byte) mode_stdbitmap::cx#1 )
  (byte~) mode_stdbitmap::$19 ← (byte) mode_stdbitmap::cx#2 + (byte) mode_stdbitmap::cy#2
  (byte~) mode_stdbitmap::$20 ← (byte~) mode_stdbitmap::$19 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte) mode_stdbitmap::col#0 ← (byte~) mode_stdbitmap::$20
  (byte/signed word/word/dword/signed dword~) mode_stdbitmap::$21 ← (byte/signed byte/word/signed word/dword/signed dword) $f - (byte) mode_stdbitmap::col#0
  (byte) mode_stdbitmap::col2#0 ← (byte/signed word/word/dword/signed dword~) mode_stdbitmap::$21
  (byte~) mode_stdbitmap::$22 ← (byte) mode_stdbitmap::col#0 << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) mode_stdbitmap::$23 ← (byte~) mode_stdbitmap::$22 | (byte) mode_stdbitmap::col2#0
  *((byte*) mode_stdbitmap::ch#2) ← (byte~) mode_stdbitmap::$23
  (byte*) mode_stdbitmap::ch#1 ← ++ (byte*) mode_stdbitmap::ch#2
  (byte) mode_stdbitmap::cx#1 ← (byte) mode_stdbitmap::cx#2 + rangenext(0,$27)
  (bool~) mode_stdbitmap::$24 ← (byte) mode_stdbitmap::cx#1 != rangelast(0,$27)
  if((bool~) mode_stdbitmap::$24) goto mode_stdbitmap::@3
  to:mode_stdbitmap::@6
mode_stdbitmap::@6: scope:[mode_stdbitmap]  from mode_stdbitmap::@3
  (byte) dtv_control#240 ← phi( mode_stdbitmap::@3/(byte) dtv_control#248 )
  (byte*) mode_stdbitmap::ch#4 ← phi( mode_stdbitmap::@3/(byte*) mode_stdbitmap::ch#1 )
  (byte) mode_stdbitmap::cy#3 ← phi( mode_stdbitmap::@3/(byte) mode_stdbitmap::cy#2 )
  (byte) mode_stdbitmap::cy#1 ← (byte) mode_stdbitmap::cy#3 + rangenext(0,$18)
  (bool~) mode_stdbitmap::$25 ← (byte) mode_stdbitmap::cy#1 != rangelast(0,$18)
  if((bool~) mode_stdbitmap::$25) goto mode_stdbitmap::@2
  to:mode_stdbitmap::@7
mode_stdbitmap::@7: scope:[mode_stdbitmap]  from mode_stdbitmap::@6
  (byte) dtv_control#227 ← phi( mode_stdbitmap::@6/(byte) dtv_control#240 )
  (byte*) bitmap_init::bitmap#0 ← (byte*) mode_stdbitmap::BITMAP#0
  call bitmap_init 
  to:mode_stdbitmap::@9
mode_stdbitmap::@9: scope:[mode_stdbitmap]  from mode_stdbitmap::@7
  (byte) dtv_control#211 ← phi( mode_stdbitmap::@7/(byte) dtv_control#227 )
  call bitmap_clear 
  to:mode_stdbitmap::@10
mode_stdbitmap::@10: scope:[mode_stdbitmap]  from mode_stdbitmap::@9
  (byte) dtv_control#196 ← phi( mode_stdbitmap::@9/(byte) dtv_control#211 )
  (byte[]) mode_stdbitmap::lines_x#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $ff, (byte/word/signed word/dword/signed dword) $ff, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $80, (byte/word/signed word/dword/signed dword) $ff, (byte/word/signed word/dword/signed dword) $80, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $80 }
  (byte[]) mode_stdbitmap::lines_y#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $c7, (byte/word/signed word/dword/signed dword) $c7, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $64, (byte/word/signed word/dword/signed dword) $c7, (byte/signed byte/word/signed word/dword/signed dword) $64, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte) mode_stdbitmap::lines_cnt#0 ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) mode_stdbitmap::l#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_stdbitmap::@4
mode_stdbitmap::@4: scope:[mode_stdbitmap]  from mode_stdbitmap::@10 mode_stdbitmap::@11
  (byte) dtv_control#180 ← phi( mode_stdbitmap::@10/(byte) dtv_control#196 mode_stdbitmap::@11/(byte) dtv_control#152 )
  (byte) mode_stdbitmap::lines_cnt#2 ← phi( mode_stdbitmap::@10/(byte) mode_stdbitmap::lines_cnt#0 mode_stdbitmap::@11/(byte) mode_stdbitmap::lines_cnt#1 )
  (byte) mode_stdbitmap::l#2 ← phi( mode_stdbitmap::@10/(byte) mode_stdbitmap::l#0 mode_stdbitmap::@11/(byte) mode_stdbitmap::l#1 )
  (byte/signed word/word/dword/signed dword~) mode_stdbitmap::$28 ← (byte) mode_stdbitmap::l#2 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte/signed word/word/dword/signed dword~) mode_stdbitmap::$29 ← (byte) mode_stdbitmap::l#2 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) bitmap_line::x0#0 ← *((byte[]) mode_stdbitmap::lines_x#0 + (byte) mode_stdbitmap::l#2)
  (byte) bitmap_line::x1#0 ← *((byte[]) mode_stdbitmap::lines_x#0 + (byte/signed word/word/dword/signed dword~) mode_stdbitmap::$28)
  (byte) bitmap_line::y0#0 ← *((byte[]) mode_stdbitmap::lines_y#0 + (byte) mode_stdbitmap::l#2)
  (byte) bitmap_line::y1#0 ← *((byte[]) mode_stdbitmap::lines_y#0 + (byte/signed word/word/dword/signed dword~) mode_stdbitmap::$29)
  call bitmap_line 
  to:mode_stdbitmap::@11
mode_stdbitmap::@11: scope:[mode_stdbitmap]  from mode_stdbitmap::@4
  (byte) dtv_control#152 ← phi( mode_stdbitmap::@4/(byte) dtv_control#180 )
  (byte) mode_stdbitmap::lines_cnt#1 ← phi( mode_stdbitmap::@4/(byte) mode_stdbitmap::lines_cnt#2 )
  (byte) mode_stdbitmap::l#3 ← phi( mode_stdbitmap::@4/(byte) mode_stdbitmap::l#2 )
  (byte) mode_stdbitmap::l#1 ← ++ (byte) mode_stdbitmap::l#3
  (bool~) mode_stdbitmap::$31 ← (byte) mode_stdbitmap::l#1 < (byte) mode_stdbitmap::lines_cnt#1
  if((bool~) mode_stdbitmap::$31) goto mode_stdbitmap::@4
  to:mode_stdbitmap::@8
mode_stdbitmap::@8: scope:[mode_stdbitmap]  from mode_stdbitmap::@11
  (byte) dtv_control#120 ← phi( mode_stdbitmap::@11/(byte) dtv_control#152 )
  call mode_ctrl 
  to:mode_stdbitmap::@12
mode_stdbitmap::@12: scope:[mode_stdbitmap]  from mode_stdbitmap::@8
  (byte) dtv_control#79 ← phi( mode_stdbitmap::@8/(byte) dtv_control#16 )
  (byte) dtv_control#28 ← (byte) dtv_control#79
  to:mode_stdbitmap::@return
mode_stdbitmap::@return: scope:[mode_stdbitmap]  from mode_stdbitmap::@12
  (byte) dtv_control#80 ← phi( mode_stdbitmap::@12/(byte) dtv_control#28 )
  (byte) dtv_control#29 ← (byte) dtv_control#80
  return 
  to:@return
mode_hicolstdchar: scope:[mode_hicolstdchar]  from menu::@30
  (byte*) mode_hicolstdchar::SCREEN#0 ← ((byte*)) (word/dword/signed dword) $8000
  (byte*) mode_hicolstdchar::CHARSET#0 ← ((byte*)) (word/dword/signed dword) $9000
  (byte*) mode_hicolstdchar::COLORS#0 ← ((byte*)) (word/dword/signed dword) $8400
  (dword~) mode_hicolstdchar::$0 ← ((dword)) (byte*) mode_hicolstdchar::CHARSET#0
  (dword~) mode_hicolstdchar::$1 ← (dword~) mode_hicolstdchar::$0 / (dword/signed dword) $10000
  (byte~) mode_hicolstdchar::$2 ← ((byte)) (dword~) mode_hicolstdchar::$1
  *((byte*) DTV_GRAPHICS_VIC_BANK#0) ← (byte~) mode_hicolstdchar::$2
  (byte*~) mode_hicolstdchar::$3 ← (byte*) mode_hicolstdchar::COLORS#0 / (word/signed word/dword/signed dword) $400
  (word~) mode_hicolstdchar::$4 ← ((word)) (byte*~) mode_hicolstdchar::$3
  (byte~) mode_hicolstdchar::$5 ← < (word~) mode_hicolstdchar::$4
  *((byte*) DTV_COLOR_BANK_LO#0) ← (byte~) mode_hicolstdchar::$5
  (byte*~) mode_hicolstdchar::$6 ← (byte*) mode_hicolstdchar::COLORS#0 / (word/signed word/dword/signed dword) $400
  (word~) mode_hicolstdchar::$7 ← ((word)) (byte*~) mode_hicolstdchar::$6
  (byte~) mode_hicolstdchar::$8 ← > (word~) mode_hicolstdchar::$7
  *((byte*) DTV_COLOR_BANK_HI#0) ← (byte~) mode_hicolstdchar::$8
  (byte) dtv_control#30 ← (byte) DTV_HIGHCOLOR#0
  *((byte*) DTV_CONTROL#0) ← (byte) DTV_HIGHCOLOR#0
  *((byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) mode_hicolstdchar::$9 ← ((word)) (byte*) mode_hicolstdchar::CHARSET#0
  (word/signed dword/dword~) mode_hicolstdchar::$10 ← (word~) mode_hicolstdchar::$9 / (word/signed word/dword/signed dword) $4000
  (byte~) mode_hicolstdchar::$11 ← ((byte)) (word/signed dword/dword~) mode_hicolstdchar::$10
  (byte/word/dword~) mode_hicolstdchar::$12 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) mode_hicolstdchar::$11
  *((byte*) CIA2_PORT_A#0) ← (byte/word/dword~) mode_hicolstdchar::$12
  (byte~) mode_hicolstdchar::$13 ← (byte) VIC_DEN#0 | (byte) VIC_RSEL#0
  (byte/word/dword~) mode_hicolstdchar::$14 ← (byte~) mode_hicolstdchar::$13 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) mode_hicolstdchar::$14
  *((byte*) VIC_CONTROL2#0) ← (byte) VIC_CSEL#0
  (word~) mode_hicolstdchar::$15 ← ((word)) (byte*) mode_hicolstdchar::SCREEN#0
  (word~) mode_hicolstdchar::$16 ← (word~) mode_hicolstdchar::$15 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) mode_hicolstdchar::$17 ← (word~) mode_hicolstdchar::$16 / (byte/signed byte/word/signed word/dword/signed dword) $40
  (word~) mode_hicolstdchar::$18 ← ((word)) (byte*) mode_hicolstdchar::CHARSET#0
  (word~) mode_hicolstdchar::$19 ← (word~) mode_hicolstdchar::$18 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) mode_hicolstdchar::$20 ← (word~) mode_hicolstdchar::$19 / (word/signed word/dword/signed dword) $400
  (word/dword~) mode_hicolstdchar::$21 ← (word/signed dword/dword~) mode_hicolstdchar::$17 | (word/signed dword/dword~) mode_hicolstdchar::$20
  (byte~) mode_hicolstdchar::$22 ← ((byte)) (word/dword~) mode_hicolstdchar::$21
  *((byte*) VIC_MEMORY#0) ← (byte~) mode_hicolstdchar::$22
  (byte) mode_hicolstdchar::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_hicolstdchar::@1
mode_hicolstdchar::@1: scope:[mode_hicolstdchar]  from mode_hicolstdchar mode_hicolstdchar::@1
  (byte) dtv_control#228 ← phi( mode_hicolstdchar/(byte) dtv_control#30 mode_hicolstdchar::@1/(byte) dtv_control#228 )
  (byte) mode_hicolstdchar::i#2 ← phi( mode_hicolstdchar/(byte) mode_hicolstdchar::i#0 mode_hicolstdchar::@1/(byte) mode_hicolstdchar::i#1 )
  *((byte*) DTV_PALETTE#0 + (byte) mode_hicolstdchar::i#2) ← (byte) mode_hicolstdchar::i#2
  (byte) mode_hicolstdchar::i#1 ← (byte) mode_hicolstdchar::i#2 + rangenext(0,$f)
  (bool~) mode_hicolstdchar::$23 ← (byte) mode_hicolstdchar::i#1 != rangelast(0,$f)
  if((bool~) mode_hicolstdchar::$23) goto mode_hicolstdchar::@1
  to:mode_hicolstdchar::@4
mode_hicolstdchar::@4: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@1
  (byte) dtv_control#212 ← phi( mode_hicolstdchar::@1/(byte) dtv_control#228 )
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) mode_hicolstdchar::col#0 ← (byte*) mode_hicolstdchar::COLORS#0
  (byte*) mode_hicolstdchar::ch#0 ← (byte*) mode_hicolstdchar::SCREEN#0
  (byte) mode_hicolstdchar::cy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_hicolstdchar::@2
mode_hicolstdchar::@2: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@4 mode_hicolstdchar::@5
  (byte) dtv_control#197 ← phi( mode_hicolstdchar::@4/(byte) dtv_control#212 mode_hicolstdchar::@5/(byte) dtv_control#153 )
  (byte*) mode_hicolstdchar::ch#3 ← phi( mode_hicolstdchar::@4/(byte*) mode_hicolstdchar::ch#0 mode_hicolstdchar::@5/(byte*) mode_hicolstdchar::ch#4 )
  (byte*) mode_hicolstdchar::col#3 ← phi( mode_hicolstdchar::@4/(byte*) mode_hicolstdchar::col#0 mode_hicolstdchar::@5/(byte*) mode_hicolstdchar::col#4 )
  (byte) mode_hicolstdchar::cy#4 ← phi( mode_hicolstdchar::@4/(byte) mode_hicolstdchar::cy#0 mode_hicolstdchar::@5/(byte) mode_hicolstdchar::cy#1 )
  (byte) mode_hicolstdchar::cx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_hicolstdchar::@3
mode_hicolstdchar::@3: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@2 mode_hicolstdchar::@3
  (byte) dtv_control#181 ← phi( mode_hicolstdchar::@2/(byte) dtv_control#197 mode_hicolstdchar::@3/(byte) dtv_control#181 )
  (byte*) mode_hicolstdchar::ch#2 ← phi( mode_hicolstdchar::@2/(byte*) mode_hicolstdchar::ch#3 mode_hicolstdchar::@3/(byte*) mode_hicolstdchar::ch#1 )
  (byte*) mode_hicolstdchar::col#2 ← phi( mode_hicolstdchar::@2/(byte*) mode_hicolstdchar::col#3 mode_hicolstdchar::@3/(byte*) mode_hicolstdchar::col#1 )
  (byte) mode_hicolstdchar::cx#2 ← phi( mode_hicolstdchar::@2/(byte) mode_hicolstdchar::cx#0 mode_hicolstdchar::@3/(byte) mode_hicolstdchar::cx#1 )
  (byte) mode_hicolstdchar::cy#2 ← phi( mode_hicolstdchar::@2/(byte) mode_hicolstdchar::cy#4 mode_hicolstdchar::@3/(byte) mode_hicolstdchar::cy#2 )
  (byte~) mode_hicolstdchar::$24 ← (byte) mode_hicolstdchar::cy#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) mode_hicolstdchar::$25 ← (byte~) mode_hicolstdchar::$24 << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) mode_hicolstdchar::$26 ← (byte) mode_hicolstdchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) mode_hicolstdchar::$27 ← (byte~) mode_hicolstdchar::$25 | (byte~) mode_hicolstdchar::$26
  (byte) mode_hicolstdchar::v#0 ← (byte~) mode_hicolstdchar::$27
  *((byte*) mode_hicolstdchar::col#2) ← (byte) mode_hicolstdchar::v#0
  (byte*) mode_hicolstdchar::col#1 ← ++ (byte*) mode_hicolstdchar::col#2
  *((byte*) mode_hicolstdchar::ch#2) ← (byte) mode_hicolstdchar::v#0
  (byte*) mode_hicolstdchar::ch#1 ← ++ (byte*) mode_hicolstdchar::ch#2
  (byte) mode_hicolstdchar::cx#1 ← (byte) mode_hicolstdchar::cx#2 + rangenext(0,$27)
  (bool~) mode_hicolstdchar::$28 ← (byte) mode_hicolstdchar::cx#1 != rangelast(0,$27)
  if((bool~) mode_hicolstdchar::$28) goto mode_hicolstdchar::@3
  to:mode_hicolstdchar::@5
mode_hicolstdchar::@5: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@3
  (byte) dtv_control#153 ← phi( mode_hicolstdchar::@3/(byte) dtv_control#181 )
  (byte*) mode_hicolstdchar::ch#4 ← phi( mode_hicolstdchar::@3/(byte*) mode_hicolstdchar::ch#1 )
  (byte*) mode_hicolstdchar::col#4 ← phi( mode_hicolstdchar::@3/(byte*) mode_hicolstdchar::col#1 )
  (byte) mode_hicolstdchar::cy#3 ← phi( mode_hicolstdchar::@3/(byte) mode_hicolstdchar::cy#2 )
  (byte) mode_hicolstdchar::cy#1 ← (byte) mode_hicolstdchar::cy#3 + rangenext(0,$18)
  (bool~) mode_hicolstdchar::$29 ← (byte) mode_hicolstdchar::cy#1 != rangelast(0,$18)
  if((bool~) mode_hicolstdchar::$29) goto mode_hicolstdchar::@2
  to:mode_hicolstdchar::@6
mode_hicolstdchar::@6: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@5
  (byte) dtv_control#121 ← phi( mode_hicolstdchar::@5/(byte) dtv_control#153 )
  call mode_ctrl 
  to:mode_hicolstdchar::@7
mode_hicolstdchar::@7: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@6
  (byte) dtv_control#81 ← phi( mode_hicolstdchar::@6/(byte) dtv_control#16 )
  (byte) dtv_control#31 ← (byte) dtv_control#81
  to:mode_hicolstdchar::@return
mode_hicolstdchar::@return: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@7
  (byte) dtv_control#82 ← phi( mode_hicolstdchar::@7/(byte) dtv_control#31 )
  (byte) dtv_control#32 ← (byte) dtv_control#82
  return 
  to:@return
mode_hicolecmchar: scope:[mode_hicolecmchar]  from menu::@32
  (byte*) mode_hicolecmchar::SCREEN#0 ← ((byte*)) (word/dword/signed dword) $8000
  (byte*) mode_hicolecmchar::CHARSET#0 ← ((byte*)) (word/dword/signed dword) $9000
  (byte*) mode_hicolecmchar::COLORS#0 ← ((byte*)) (word/dword/signed dword) $8400
  (dword~) mode_hicolecmchar::$0 ← ((dword)) (byte*) mode_hicolecmchar::CHARSET#0
  (dword~) mode_hicolecmchar::$1 ← (dword~) mode_hicolecmchar::$0 / (dword/signed dword) $10000
  (byte~) mode_hicolecmchar::$2 ← ((byte)) (dword~) mode_hicolecmchar::$1
  *((byte*) DTV_GRAPHICS_VIC_BANK#0) ← (byte~) mode_hicolecmchar::$2
  (byte*~) mode_hicolecmchar::$3 ← (byte*) mode_hicolecmchar::COLORS#0 / (word/signed word/dword/signed dword) $400
  (word~) mode_hicolecmchar::$4 ← ((word)) (byte*~) mode_hicolecmchar::$3
  (byte~) mode_hicolecmchar::$5 ← < (word~) mode_hicolecmchar::$4
  *((byte*) DTV_COLOR_BANK_LO#0) ← (byte~) mode_hicolecmchar::$5
  (byte*~) mode_hicolecmchar::$6 ← (byte*) mode_hicolecmchar::COLORS#0 / (word/signed word/dword/signed dword) $400
  (word~) mode_hicolecmchar::$7 ← ((word)) (byte*~) mode_hicolecmchar::$6
  (byte~) mode_hicolecmchar::$8 ← > (word~) mode_hicolecmchar::$7
  *((byte*) DTV_COLOR_BANK_HI#0) ← (byte~) mode_hicolecmchar::$8
  (byte) dtv_control#33 ← (byte) DTV_HIGHCOLOR#0
  *((byte*) DTV_CONTROL#0) ← (byte) DTV_HIGHCOLOR#0
  *((byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) mode_hicolecmchar::$9 ← ((word)) (byte*) mode_hicolecmchar::CHARSET#0
  (word/signed dword/dword~) mode_hicolecmchar::$10 ← (word~) mode_hicolecmchar::$9 / (word/signed word/dword/signed dword) $4000
  (byte~) mode_hicolecmchar::$11 ← ((byte)) (word/signed dword/dword~) mode_hicolecmchar::$10
  (byte/word/dword~) mode_hicolecmchar::$12 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) mode_hicolecmchar::$11
  *((byte*) CIA2_PORT_A#0) ← (byte/word/dword~) mode_hicolecmchar::$12
  (byte~) mode_hicolecmchar::$13 ← (byte) VIC_DEN#0 | (byte) VIC_RSEL#0
  (byte~) mode_hicolecmchar::$14 ← (byte~) mode_hicolecmchar::$13 | (byte) VIC_ECM#0
  (byte/word/dword~) mode_hicolecmchar::$15 ← (byte~) mode_hicolecmchar::$14 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) mode_hicolecmchar::$15
  *((byte*) VIC_CONTROL2#0) ← (byte) VIC_CSEL#0
  (word~) mode_hicolecmchar::$16 ← ((word)) (byte*) mode_hicolecmchar::SCREEN#0
  (word~) mode_hicolecmchar::$17 ← (word~) mode_hicolecmchar::$16 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) mode_hicolecmchar::$18 ← (word~) mode_hicolecmchar::$17 / (byte/signed byte/word/signed word/dword/signed dword) $40
  (word~) mode_hicolecmchar::$19 ← ((word)) (byte*) mode_hicolecmchar::CHARSET#0
  (word~) mode_hicolecmchar::$20 ← (word~) mode_hicolecmchar::$19 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) mode_hicolecmchar::$21 ← (word~) mode_hicolecmchar::$20 / (word/signed word/dword/signed dword) $400
  (word/dword~) mode_hicolecmchar::$22 ← (word/signed dword/dword~) mode_hicolecmchar::$18 | (word/signed dword/dword~) mode_hicolecmchar::$21
  (byte~) mode_hicolecmchar::$23 ← ((byte)) (word/dword~) mode_hicolecmchar::$22
  *((byte*) VIC_MEMORY#0) ← (byte~) mode_hicolecmchar::$23
  (byte) mode_hicolecmchar::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_hicolecmchar::@1
mode_hicolecmchar::@1: scope:[mode_hicolecmchar]  from mode_hicolecmchar mode_hicolecmchar::@1
  (byte) dtv_control#229 ← phi( mode_hicolecmchar/(byte) dtv_control#33 mode_hicolecmchar::@1/(byte) dtv_control#229 )
  (byte) mode_hicolecmchar::i#2 ← phi( mode_hicolecmchar/(byte) mode_hicolecmchar::i#0 mode_hicolecmchar::@1/(byte) mode_hicolecmchar::i#1 )
  *((byte*) DTV_PALETTE#0 + (byte) mode_hicolecmchar::i#2) ← (byte) mode_hicolecmchar::i#2
  (byte) mode_hicolecmchar::i#1 ← (byte) mode_hicolecmchar::i#2 + rangenext(0,$f)
  (bool~) mode_hicolecmchar::$24 ← (byte) mode_hicolecmchar::i#1 != rangelast(0,$f)
  if((bool~) mode_hicolecmchar::$24) goto mode_hicolecmchar::@1
  to:mode_hicolecmchar::@4
mode_hicolecmchar::@4: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@1
  (byte) dtv_control#213 ← phi( mode_hicolecmchar::@1/(byte) dtv_control#229 )
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $50
  *((byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) $54
  *((byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) $58
  *((byte*) BGCOL4#0) ← (byte/signed byte/word/signed word/dword/signed dword) $5c
  (byte*) mode_hicolecmchar::col#0 ← (byte*) mode_hicolecmchar::COLORS#0
  (byte*) mode_hicolecmchar::ch#0 ← (byte*) mode_hicolecmchar::SCREEN#0
  (byte) mode_hicolecmchar::cy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_hicolecmchar::@2
mode_hicolecmchar::@2: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@4 mode_hicolecmchar::@5
  (byte) dtv_control#198 ← phi( mode_hicolecmchar::@4/(byte) dtv_control#213 mode_hicolecmchar::@5/(byte) dtv_control#154 )
  (byte*) mode_hicolecmchar::ch#3 ← phi( mode_hicolecmchar::@4/(byte*) mode_hicolecmchar::ch#0 mode_hicolecmchar::@5/(byte*) mode_hicolecmchar::ch#4 )
  (byte*) mode_hicolecmchar::col#3 ← phi( mode_hicolecmchar::@4/(byte*) mode_hicolecmchar::col#0 mode_hicolecmchar::@5/(byte*) mode_hicolecmchar::col#4 )
  (byte) mode_hicolecmchar::cy#4 ← phi( mode_hicolecmchar::@4/(byte) mode_hicolecmchar::cy#0 mode_hicolecmchar::@5/(byte) mode_hicolecmchar::cy#1 )
  (byte) mode_hicolecmchar::cx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_hicolecmchar::@3
mode_hicolecmchar::@3: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@2 mode_hicolecmchar::@3
  (byte) dtv_control#182 ← phi( mode_hicolecmchar::@2/(byte) dtv_control#198 mode_hicolecmchar::@3/(byte) dtv_control#182 )
  (byte*) mode_hicolecmchar::ch#2 ← phi( mode_hicolecmchar::@2/(byte*) mode_hicolecmchar::ch#3 mode_hicolecmchar::@3/(byte*) mode_hicolecmchar::ch#1 )
  (byte*) mode_hicolecmchar::col#2 ← phi( mode_hicolecmchar::@2/(byte*) mode_hicolecmchar::col#3 mode_hicolecmchar::@3/(byte*) mode_hicolecmchar::col#1 )
  (byte) mode_hicolecmchar::cx#2 ← phi( mode_hicolecmchar::@2/(byte) mode_hicolecmchar::cx#0 mode_hicolecmchar::@3/(byte) mode_hicolecmchar::cx#1 )
  (byte) mode_hicolecmchar::cy#2 ← phi( mode_hicolecmchar::@2/(byte) mode_hicolecmchar::cy#4 mode_hicolecmchar::@3/(byte) mode_hicolecmchar::cy#2 )
  (byte~) mode_hicolecmchar::$25 ← (byte) mode_hicolecmchar::cy#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) mode_hicolecmchar::$26 ← (byte~) mode_hicolecmchar::$25 << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) mode_hicolecmchar::$27 ← (byte) mode_hicolecmchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) mode_hicolecmchar::$28 ← (byte~) mode_hicolecmchar::$26 | (byte~) mode_hicolecmchar::$27
  (byte) mode_hicolecmchar::v#0 ← (byte~) mode_hicolecmchar::$28
  *((byte*) mode_hicolecmchar::col#2) ← (byte) mode_hicolecmchar::v#0
  (byte*) mode_hicolecmchar::col#1 ← ++ (byte*) mode_hicolecmchar::col#2
  *((byte*) mode_hicolecmchar::ch#2) ← (byte) mode_hicolecmchar::v#0
  (byte*) mode_hicolecmchar::ch#1 ← ++ (byte*) mode_hicolecmchar::ch#2
  (byte) mode_hicolecmchar::cx#1 ← (byte) mode_hicolecmchar::cx#2 + rangenext(0,$27)
  (bool~) mode_hicolecmchar::$29 ← (byte) mode_hicolecmchar::cx#1 != rangelast(0,$27)
  if((bool~) mode_hicolecmchar::$29) goto mode_hicolecmchar::@3
  to:mode_hicolecmchar::@5
mode_hicolecmchar::@5: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@3
  (byte) dtv_control#154 ← phi( mode_hicolecmchar::@3/(byte) dtv_control#182 )
  (byte*) mode_hicolecmchar::ch#4 ← phi( mode_hicolecmchar::@3/(byte*) mode_hicolecmchar::ch#1 )
  (byte*) mode_hicolecmchar::col#4 ← phi( mode_hicolecmchar::@3/(byte*) mode_hicolecmchar::col#1 )
  (byte) mode_hicolecmchar::cy#3 ← phi( mode_hicolecmchar::@3/(byte) mode_hicolecmchar::cy#2 )
  (byte) mode_hicolecmchar::cy#1 ← (byte) mode_hicolecmchar::cy#3 + rangenext(0,$18)
  (bool~) mode_hicolecmchar::$30 ← (byte) mode_hicolecmchar::cy#1 != rangelast(0,$18)
  if((bool~) mode_hicolecmchar::$30) goto mode_hicolecmchar::@2
  to:mode_hicolecmchar::@6
mode_hicolecmchar::@6: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@5
  (byte) dtv_control#122 ← phi( mode_hicolecmchar::@5/(byte) dtv_control#154 )
  call mode_ctrl 
  to:mode_hicolecmchar::@7
mode_hicolecmchar::@7: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@6
  (byte) dtv_control#83 ← phi( mode_hicolecmchar::@6/(byte) dtv_control#16 )
  (byte) dtv_control#34 ← (byte) dtv_control#83
  to:mode_hicolecmchar::@return
mode_hicolecmchar::@return: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@7
  (byte) dtv_control#84 ← phi( mode_hicolecmchar::@7/(byte) dtv_control#34 )
  (byte) dtv_control#35 ← (byte) dtv_control#84
  return 
  to:@return
mode_hicolmcchar: scope:[mode_hicolmcchar]  from menu::@34
  (byte*) mode_hicolmcchar::SCREEN#0 ← ((byte*)) (word/dword/signed dword) $8000
  (byte*) mode_hicolmcchar::CHARSET#0 ← ((byte*)) (word/dword/signed dword) $9000
  (byte*) mode_hicolmcchar::COLORS#0 ← ((byte*)) (word/dword/signed dword) $8400
  (dword~) mode_hicolmcchar::$0 ← ((dword)) (byte*) mode_hicolmcchar::CHARSET#0
  (dword~) mode_hicolmcchar::$1 ← (dword~) mode_hicolmcchar::$0 / (dword/signed dword) $10000
  (byte~) mode_hicolmcchar::$2 ← ((byte)) (dword~) mode_hicolmcchar::$1
  *((byte*) DTV_GRAPHICS_VIC_BANK#0) ← (byte~) mode_hicolmcchar::$2
  (byte*~) mode_hicolmcchar::$3 ← (byte*) mode_hicolmcchar::COLORS#0 / (word/signed word/dword/signed dword) $400
  (word~) mode_hicolmcchar::$4 ← ((word)) (byte*~) mode_hicolmcchar::$3
  (byte~) mode_hicolmcchar::$5 ← < (word~) mode_hicolmcchar::$4
  *((byte*) DTV_COLOR_BANK_LO#0) ← (byte~) mode_hicolmcchar::$5
  (byte*~) mode_hicolmcchar::$6 ← (byte*) mode_hicolmcchar::COLORS#0 / (word/signed word/dword/signed dword) $400
  (word~) mode_hicolmcchar::$7 ← ((word)) (byte*~) mode_hicolmcchar::$6
  (byte~) mode_hicolmcchar::$8 ← > (word~) mode_hicolmcchar::$7
  *((byte*) DTV_COLOR_BANK_HI#0) ← (byte~) mode_hicolmcchar::$8
  (byte) dtv_control#36 ← (byte) DTV_HIGHCOLOR#0
  *((byte*) DTV_CONTROL#0) ← (byte) DTV_HIGHCOLOR#0
  *((byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) mode_hicolmcchar::$9 ← ((word)) (byte*) mode_hicolmcchar::CHARSET#0
  (word/signed dword/dword~) mode_hicolmcchar::$10 ← (word~) mode_hicolmcchar::$9 / (word/signed word/dword/signed dword) $4000
  (byte~) mode_hicolmcchar::$11 ← ((byte)) (word/signed dword/dword~) mode_hicolmcchar::$10
  (byte/word/dword~) mode_hicolmcchar::$12 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) mode_hicolmcchar::$11
  *((byte*) CIA2_PORT_A#0) ← (byte/word/dword~) mode_hicolmcchar::$12
  (byte~) mode_hicolmcchar::$13 ← (byte) VIC_DEN#0 | (byte) VIC_RSEL#0
  (byte/word/dword~) mode_hicolmcchar::$14 ← (byte~) mode_hicolmcchar::$13 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) mode_hicolmcchar::$14
  (byte~) mode_hicolmcchar::$15 ← (byte) VIC_CSEL#0 | (byte) VIC_MCM#0
  *((byte*) VIC_CONTROL2#0) ← (byte~) mode_hicolmcchar::$15
  (word~) mode_hicolmcchar::$16 ← ((word)) (byte*) mode_hicolmcchar::SCREEN#0
  (word~) mode_hicolmcchar::$17 ← (word~) mode_hicolmcchar::$16 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) mode_hicolmcchar::$18 ← (word~) mode_hicolmcchar::$17 / (byte/signed byte/word/signed word/dword/signed dword) $40
  (word~) mode_hicolmcchar::$19 ← ((word)) (byte*) mode_hicolmcchar::CHARSET#0
  (word~) mode_hicolmcchar::$20 ← (word~) mode_hicolmcchar::$19 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) mode_hicolmcchar::$21 ← (word~) mode_hicolmcchar::$20 / (word/signed word/dword/signed dword) $400
  (word/dword~) mode_hicolmcchar::$22 ← (word/signed dword/dword~) mode_hicolmcchar::$18 | (word/signed dword/dword~) mode_hicolmcchar::$21
  (byte~) mode_hicolmcchar::$23 ← ((byte)) (word/dword~) mode_hicolmcchar::$22
  *((byte*) VIC_MEMORY#0) ← (byte~) mode_hicolmcchar::$23
  (byte) mode_hicolmcchar::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_hicolmcchar::@1
mode_hicolmcchar::@1: scope:[mode_hicolmcchar]  from mode_hicolmcchar mode_hicolmcchar::@1
  (byte) dtv_control#230 ← phi( mode_hicolmcchar/(byte) dtv_control#36 mode_hicolmcchar::@1/(byte) dtv_control#230 )
  (byte) mode_hicolmcchar::i#2 ← phi( mode_hicolmcchar/(byte) mode_hicolmcchar::i#0 mode_hicolmcchar::@1/(byte) mode_hicolmcchar::i#1 )
  *((byte*) DTV_PALETTE#0 + (byte) mode_hicolmcchar::i#2) ← (byte) mode_hicolmcchar::i#2
  (byte) mode_hicolmcchar::i#1 ← (byte) mode_hicolmcchar::i#2 + rangenext(0,$f)
  (bool~) mode_hicolmcchar::$24 ← (byte) mode_hicolmcchar::i#1 != rangelast(0,$f)
  if((bool~) mode_hicolmcchar::$24) goto mode_hicolmcchar::@1
  to:mode_hicolmcchar::@4
mode_hicolmcchar::@4: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@1
  (byte) dtv_control#214 ← phi( mode_hicolmcchar::@1/(byte) dtv_control#230 )
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $50
  *((byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) $54
  *((byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) $58
  (byte*) mode_hicolmcchar::col#0 ← (byte*) mode_hicolmcchar::COLORS#0
  (byte*) mode_hicolmcchar::ch#0 ← (byte*) mode_hicolmcchar::SCREEN#0
  (byte) mode_hicolmcchar::cy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_hicolmcchar::@2
mode_hicolmcchar::@2: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@4 mode_hicolmcchar::@5
  (byte) dtv_control#199 ← phi( mode_hicolmcchar::@4/(byte) dtv_control#214 mode_hicolmcchar::@5/(byte) dtv_control#155 )
  (byte*) mode_hicolmcchar::ch#3 ← phi( mode_hicolmcchar::@4/(byte*) mode_hicolmcchar::ch#0 mode_hicolmcchar::@5/(byte*) mode_hicolmcchar::ch#4 )
  (byte*) mode_hicolmcchar::col#3 ← phi( mode_hicolmcchar::@4/(byte*) mode_hicolmcchar::col#0 mode_hicolmcchar::@5/(byte*) mode_hicolmcchar::col#4 )
  (byte) mode_hicolmcchar::cy#4 ← phi( mode_hicolmcchar::@4/(byte) mode_hicolmcchar::cy#0 mode_hicolmcchar::@5/(byte) mode_hicolmcchar::cy#1 )
  (byte) mode_hicolmcchar::cx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_hicolmcchar::@3
mode_hicolmcchar::@3: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@2 mode_hicolmcchar::@3
  (byte) dtv_control#183 ← phi( mode_hicolmcchar::@2/(byte) dtv_control#199 mode_hicolmcchar::@3/(byte) dtv_control#183 )
  (byte*) mode_hicolmcchar::ch#2 ← phi( mode_hicolmcchar::@2/(byte*) mode_hicolmcchar::ch#3 mode_hicolmcchar::@3/(byte*) mode_hicolmcchar::ch#1 )
  (byte*) mode_hicolmcchar::col#2 ← phi( mode_hicolmcchar::@2/(byte*) mode_hicolmcchar::col#3 mode_hicolmcchar::@3/(byte*) mode_hicolmcchar::col#1 )
  (byte) mode_hicolmcchar::cx#2 ← phi( mode_hicolmcchar::@2/(byte) mode_hicolmcchar::cx#0 mode_hicolmcchar::@3/(byte) mode_hicolmcchar::cx#1 )
  (byte) mode_hicolmcchar::cy#2 ← phi( mode_hicolmcchar::@2/(byte) mode_hicolmcchar::cy#4 mode_hicolmcchar::@3/(byte) mode_hicolmcchar::cy#2 )
  (byte~) mode_hicolmcchar::$25 ← (byte) mode_hicolmcchar::cy#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) mode_hicolmcchar::$26 ← (byte~) mode_hicolmcchar::$25 << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) mode_hicolmcchar::$27 ← (byte) mode_hicolmcchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) mode_hicolmcchar::$28 ← (byte~) mode_hicolmcchar::$26 | (byte~) mode_hicolmcchar::$27
  (byte) mode_hicolmcchar::v#0 ← (byte~) mode_hicolmcchar::$28
  *((byte*) mode_hicolmcchar::col#2) ← (byte) mode_hicolmcchar::v#0
  (byte*) mode_hicolmcchar::col#1 ← ++ (byte*) mode_hicolmcchar::col#2
  *((byte*) mode_hicolmcchar::ch#2) ← (byte) mode_hicolmcchar::v#0
  (byte*) mode_hicolmcchar::ch#1 ← ++ (byte*) mode_hicolmcchar::ch#2
  (byte) mode_hicolmcchar::cx#1 ← (byte) mode_hicolmcchar::cx#2 + rangenext(0,$27)
  (bool~) mode_hicolmcchar::$29 ← (byte) mode_hicolmcchar::cx#1 != rangelast(0,$27)
  if((bool~) mode_hicolmcchar::$29) goto mode_hicolmcchar::@3
  to:mode_hicolmcchar::@5
mode_hicolmcchar::@5: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@3
  (byte) dtv_control#155 ← phi( mode_hicolmcchar::@3/(byte) dtv_control#183 )
  (byte*) mode_hicolmcchar::ch#4 ← phi( mode_hicolmcchar::@3/(byte*) mode_hicolmcchar::ch#1 )
  (byte*) mode_hicolmcchar::col#4 ← phi( mode_hicolmcchar::@3/(byte*) mode_hicolmcchar::col#1 )
  (byte) mode_hicolmcchar::cy#3 ← phi( mode_hicolmcchar::@3/(byte) mode_hicolmcchar::cy#2 )
  (byte) mode_hicolmcchar::cy#1 ← (byte) mode_hicolmcchar::cy#3 + rangenext(0,$18)
  (bool~) mode_hicolmcchar::$30 ← (byte) mode_hicolmcchar::cy#1 != rangelast(0,$18)
  if((bool~) mode_hicolmcchar::$30) goto mode_hicolmcchar::@2
  to:mode_hicolmcchar::@6
mode_hicolmcchar::@6: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@5
  (byte) dtv_control#123 ← phi( mode_hicolmcchar::@5/(byte) dtv_control#155 )
  call mode_ctrl 
  to:mode_hicolmcchar::@7
mode_hicolmcchar::@7: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@6
  (byte) dtv_control#85 ← phi( mode_hicolmcchar::@6/(byte) dtv_control#16 )
  (byte) dtv_control#37 ← (byte) dtv_control#85
  to:mode_hicolmcchar::@return
mode_hicolmcchar::@return: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@7
  (byte) dtv_control#86 ← phi( mode_hicolmcchar::@7/(byte) dtv_control#37 )
  (byte) dtv_control#38 ← (byte) dtv_control#86
  return 
  to:@return
mode_twoplanebitmap: scope:[mode_twoplanebitmap]  from menu::@38
  (byte*) mode_twoplanebitmap::PLANEA#0 ← ((byte*)) (word/signed word/dword/signed dword) $4000
  (byte*) mode_twoplanebitmap::PLANEB#0 ← ((byte*)) (word/signed word/dword/signed dword) $6000
  (byte*) mode_twoplanebitmap::COLORS#0 ← ((byte*)) (word/dword/signed dword) $8000
  (byte~) mode_twoplanebitmap::$0 ← (byte) DTV_HIGHCOLOR#0 | (byte) DTV_LINEAR#0
  (byte) dtv_control#39 ← (byte~) mode_twoplanebitmap::$0
  (byte~) mode_twoplanebitmap::$1 ← (byte) DTV_HIGHCOLOR#0 | (byte) DTV_LINEAR#0
  *((byte*) DTV_CONTROL#0) ← (byte~) mode_twoplanebitmap::$1
  (byte~) mode_twoplanebitmap::$2 ← (byte) VIC_ECM#0 | (byte) VIC_BMM#0
  (byte~) mode_twoplanebitmap::$3 ← (byte~) mode_twoplanebitmap::$2 | (byte) VIC_DEN#0
  (byte~) mode_twoplanebitmap::$4 ← (byte~) mode_twoplanebitmap::$3 | (byte) VIC_RSEL#0
  (byte/word/dword~) mode_twoplanebitmap::$5 ← (byte~) mode_twoplanebitmap::$4 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) mode_twoplanebitmap::$5
  *((byte*) VIC_CONTROL2#0) ← (byte) VIC_CSEL#0
  (byte~) mode_twoplanebitmap::$6 ← < (byte*) mode_twoplanebitmap::PLANEA#0
  *((byte*) DTV_PLANEA_START_LO#0) ← (byte~) mode_twoplanebitmap::$6
  (byte~) mode_twoplanebitmap::$7 ← > (byte*) mode_twoplanebitmap::PLANEA#0
  *((byte*) DTV_PLANEA_START_MI#0) ← (byte~) mode_twoplanebitmap::$7
  *((byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) mode_twoplanebitmap::$8 ← < (byte*) mode_twoplanebitmap::PLANEB#0
  *((byte*) DTV_PLANEB_START_LO#0) ← (byte~) mode_twoplanebitmap::$8
  (byte~) mode_twoplanebitmap::$9 ← > (byte*) mode_twoplanebitmap::PLANEB#0
  *((byte*) DTV_PLANEB_START_MI#0) ← (byte~) mode_twoplanebitmap::$9
  *((byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*~) mode_twoplanebitmap::$10 ← (byte*) mode_twoplanebitmap::COLORS#0 / (word/signed word/dword/signed dword) $400
  (byte~) mode_twoplanebitmap::$11 ← < (byte*~) mode_twoplanebitmap::$10
  *((byte*) DTV_COLOR_BANK_LO#0) ← (byte~) mode_twoplanebitmap::$11
  (byte*~) mode_twoplanebitmap::$12 ← (byte*) mode_twoplanebitmap::COLORS#0 / (word/signed word/dword/signed dword) $400
  (byte~) mode_twoplanebitmap::$13 ← > (byte*~) mode_twoplanebitmap::$12
  *((byte*) DTV_COLOR_BANK_HI#0) ← (byte~) mode_twoplanebitmap::$13
  (byte) mode_twoplanebitmap::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_twoplanebitmap::@1
mode_twoplanebitmap::@1: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap mode_twoplanebitmap::@1
  (byte) dtv_control#292 ← phi( mode_twoplanebitmap/(byte) dtv_control#39 mode_twoplanebitmap::@1/(byte) dtv_control#292 )
  (byte) mode_twoplanebitmap::i#2 ← phi( mode_twoplanebitmap/(byte) mode_twoplanebitmap::i#0 mode_twoplanebitmap::@1/(byte) mode_twoplanebitmap::i#1 )
  *((byte*) DTV_PALETTE#0 + (byte) mode_twoplanebitmap::i#2) ← (byte) mode_twoplanebitmap::i#2
  (byte) mode_twoplanebitmap::i#1 ← (byte) mode_twoplanebitmap::i#2 + rangenext(0,$f)
  (bool~) mode_twoplanebitmap::$14 ← (byte) mode_twoplanebitmap::i#1 != rangelast(0,$f)
  if((bool~) mode_twoplanebitmap::$14) goto mode_twoplanebitmap::@1
  to:mode_twoplanebitmap::@10
mode_twoplanebitmap::@10: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@1
  (byte) dtv_control#291 ← phi( mode_twoplanebitmap::@1/(byte) dtv_control#292 )
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $70
  *((byte*) BGCOL2#0) ← (byte/word/signed word/dword/signed dword) $d4
  (byte*) mode_twoplanebitmap::col#0 ← (byte*) mode_twoplanebitmap::COLORS#0
  (byte) mode_twoplanebitmap::cy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_twoplanebitmap::@2
mode_twoplanebitmap::@2: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@10 mode_twoplanebitmap::@11
  (byte) dtv_control#288 ← phi( mode_twoplanebitmap::@10/(byte) dtv_control#291 mode_twoplanebitmap::@11/(byte) dtv_control#278 )
  (byte*) mode_twoplanebitmap::col#3 ← phi( mode_twoplanebitmap::@10/(byte*) mode_twoplanebitmap::col#0 mode_twoplanebitmap::@11/(byte*) mode_twoplanebitmap::col#4 )
  (byte) mode_twoplanebitmap::cy#4 ← phi( mode_twoplanebitmap::@10/(byte) mode_twoplanebitmap::cy#0 mode_twoplanebitmap::@11/(byte) mode_twoplanebitmap::cy#1 )
  (byte) mode_twoplanebitmap::cx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_twoplanebitmap::@3
mode_twoplanebitmap::@3: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@2 mode_twoplanebitmap::@3
  (byte) dtv_control#284 ← phi( mode_twoplanebitmap::@2/(byte) dtv_control#288 mode_twoplanebitmap::@3/(byte) dtv_control#284 )
  (byte*) mode_twoplanebitmap::col#2 ← phi( mode_twoplanebitmap::@2/(byte*) mode_twoplanebitmap::col#3 mode_twoplanebitmap::@3/(byte*) mode_twoplanebitmap::col#1 )
  (byte) mode_twoplanebitmap::cx#2 ← phi( mode_twoplanebitmap::@2/(byte) mode_twoplanebitmap::cx#0 mode_twoplanebitmap::@3/(byte) mode_twoplanebitmap::cx#1 )
  (byte) mode_twoplanebitmap::cy#2 ← phi( mode_twoplanebitmap::@2/(byte) mode_twoplanebitmap::cy#4 mode_twoplanebitmap::@3/(byte) mode_twoplanebitmap::cy#2 )
  (byte~) mode_twoplanebitmap::$15 ← (byte) mode_twoplanebitmap::cy#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) mode_twoplanebitmap::$16 ← (byte~) mode_twoplanebitmap::$15 << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) mode_twoplanebitmap::$17 ← (byte) mode_twoplanebitmap::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) mode_twoplanebitmap::$18 ← (byte~) mode_twoplanebitmap::$16 | (byte~) mode_twoplanebitmap::$17
  *((byte*) mode_twoplanebitmap::col#2) ← (byte~) mode_twoplanebitmap::$18
  (byte*) mode_twoplanebitmap::col#1 ← ++ (byte*) mode_twoplanebitmap::col#2
  (byte) mode_twoplanebitmap::cx#1 ← (byte) mode_twoplanebitmap::cx#2 + rangenext(0,$27)
  (bool~) mode_twoplanebitmap::$19 ← (byte) mode_twoplanebitmap::cx#1 != rangelast(0,$27)
  if((bool~) mode_twoplanebitmap::$19) goto mode_twoplanebitmap::@3
  to:mode_twoplanebitmap::@11
mode_twoplanebitmap::@11: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@3
  (byte) dtv_control#278 ← phi( mode_twoplanebitmap::@3/(byte) dtv_control#284 )
  (byte*) mode_twoplanebitmap::col#4 ← phi( mode_twoplanebitmap::@3/(byte*) mode_twoplanebitmap::col#1 )
  (byte) mode_twoplanebitmap::cy#3 ← phi( mode_twoplanebitmap::@3/(byte) mode_twoplanebitmap::cy#2 )
  (byte) mode_twoplanebitmap::cy#1 ← (byte) mode_twoplanebitmap::cy#3 + rangenext(0,$18)
  (bool~) mode_twoplanebitmap::$20 ← (byte) mode_twoplanebitmap::cy#1 != rangelast(0,$18)
  if((bool~) mode_twoplanebitmap::$20) goto mode_twoplanebitmap::@2
  to:mode_twoplanebitmap::@12
mode_twoplanebitmap::@12: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@11
  (byte) dtv_control#273 ← phi( mode_twoplanebitmap::@11/(byte) dtv_control#278 )
  (byte*) mode_twoplanebitmap::gfxa#0 ← (byte*) mode_twoplanebitmap::PLANEA#0
  (byte) mode_twoplanebitmap::ay#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_twoplanebitmap::@4
mode_twoplanebitmap::@4: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@12 mode_twoplanebitmap::@15
  (byte) dtv_control#266 ← phi( mode_twoplanebitmap::@12/(byte) dtv_control#273 mode_twoplanebitmap::@15/(byte) dtv_control#231 )
  (byte*) mode_twoplanebitmap::gfxa#6 ← phi( mode_twoplanebitmap::@12/(byte*) mode_twoplanebitmap::gfxa#0 mode_twoplanebitmap::@15/(byte*) mode_twoplanebitmap::gfxa#8 )
  (byte) mode_twoplanebitmap::ay#4 ← phi( mode_twoplanebitmap::@12/(byte) mode_twoplanebitmap::ay#0 mode_twoplanebitmap::@15/(byte) mode_twoplanebitmap::ay#1 )
  (byte) mode_twoplanebitmap::ax#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_twoplanebitmap::@5
mode_twoplanebitmap::@5: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@4 mode_twoplanebitmap::@7
  (byte) dtv_control#259 ← phi( mode_twoplanebitmap::@4/(byte) dtv_control#266 mode_twoplanebitmap::@7/(byte) dtv_control#241 )
  (byte) mode_twoplanebitmap::ax#5 ← phi( mode_twoplanebitmap::@4/(byte) mode_twoplanebitmap::ax#0 mode_twoplanebitmap::@7/(byte) mode_twoplanebitmap::ax#1 )
  (byte*) mode_twoplanebitmap::gfxa#5 ← phi( mode_twoplanebitmap::@4/(byte*) mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::@7/(byte*) mode_twoplanebitmap::gfxa#7 )
  (byte) mode_twoplanebitmap::ay#2 ← phi( mode_twoplanebitmap::@4/(byte) mode_twoplanebitmap::ay#4 mode_twoplanebitmap::@7/(byte) mode_twoplanebitmap::ay#5 )
  (byte~) mode_twoplanebitmap::$21 ← (byte) mode_twoplanebitmap::ay#2 & (byte/signed byte/word/signed word/dword/signed dword) 4
  (bool~) mode_twoplanebitmap::$22 ← (byte~) mode_twoplanebitmap::$21 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) mode_twoplanebitmap::$22) goto mode_twoplanebitmap::@6
  to:mode_twoplanebitmap::@13
mode_twoplanebitmap::@6: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@5
  (byte) dtv_control#250 ← phi( mode_twoplanebitmap::@5/(byte) dtv_control#259 )
  (byte) mode_twoplanebitmap::ay#7 ← phi( mode_twoplanebitmap::@5/(byte) mode_twoplanebitmap::ay#2 )
  (byte) mode_twoplanebitmap::ax#4 ← phi( mode_twoplanebitmap::@5/(byte) mode_twoplanebitmap::ax#5 )
  (byte*) mode_twoplanebitmap::gfxa#3 ← phi( mode_twoplanebitmap::@5/(byte*) mode_twoplanebitmap::gfxa#5 )
  *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) mode_twoplanebitmap::gfxa#1 ← ++ (byte*) mode_twoplanebitmap::gfxa#3
  to:mode_twoplanebitmap::@7
mode_twoplanebitmap::@13: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@5
  (byte) dtv_control#249 ← phi( mode_twoplanebitmap::@5/(byte) dtv_control#259 )
  (byte) mode_twoplanebitmap::ay#6 ← phi( mode_twoplanebitmap::@5/(byte) mode_twoplanebitmap::ay#2 )
  (byte) mode_twoplanebitmap::ax#3 ← phi( mode_twoplanebitmap::@5/(byte) mode_twoplanebitmap::ax#5 )
  (byte*) mode_twoplanebitmap::gfxa#4 ← phi( mode_twoplanebitmap::@5/(byte*) mode_twoplanebitmap::gfxa#5 )
  *((byte*) mode_twoplanebitmap::gfxa#4) ← (byte/word/signed word/dword/signed dword) $ff
  (byte*) mode_twoplanebitmap::gfxa#2 ← ++ (byte*) mode_twoplanebitmap::gfxa#4
  to:mode_twoplanebitmap::@7
mode_twoplanebitmap::@7: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@13 mode_twoplanebitmap::@6
  (byte) dtv_control#241 ← phi( mode_twoplanebitmap::@13/(byte) dtv_control#249 mode_twoplanebitmap::@6/(byte) dtv_control#250 )
  (byte*) mode_twoplanebitmap::gfxa#7 ← phi( mode_twoplanebitmap::@13/(byte*) mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::@6/(byte*) mode_twoplanebitmap::gfxa#1 )
  (byte) mode_twoplanebitmap::ay#5 ← phi( mode_twoplanebitmap::@13/(byte) mode_twoplanebitmap::ay#6 mode_twoplanebitmap::@6/(byte) mode_twoplanebitmap::ay#7 )
  (byte) mode_twoplanebitmap::ax#2 ← phi( mode_twoplanebitmap::@13/(byte) mode_twoplanebitmap::ax#3 mode_twoplanebitmap::@6/(byte) mode_twoplanebitmap::ax#4 )
  (byte) mode_twoplanebitmap::ax#1 ← (byte) mode_twoplanebitmap::ax#2 + rangenext(0,$27)
  (bool~) mode_twoplanebitmap::$23 ← (byte) mode_twoplanebitmap::ax#1 != rangelast(0,$27)
  if((bool~) mode_twoplanebitmap::$23) goto mode_twoplanebitmap::@5
  to:mode_twoplanebitmap::@15
mode_twoplanebitmap::@15: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@7
  (byte) dtv_control#231 ← phi( mode_twoplanebitmap::@7/(byte) dtv_control#241 )
  (byte*) mode_twoplanebitmap::gfxa#8 ← phi( mode_twoplanebitmap::@7/(byte*) mode_twoplanebitmap::gfxa#7 )
  (byte) mode_twoplanebitmap::ay#3 ← phi( mode_twoplanebitmap::@7/(byte) mode_twoplanebitmap::ay#5 )
  (byte) mode_twoplanebitmap::ay#1 ← (byte) mode_twoplanebitmap::ay#3 + rangenext(0,$c7)
  (bool~) mode_twoplanebitmap::$24 ← (byte) mode_twoplanebitmap::ay#1 != rangelast(0,$c7)
  if((bool~) mode_twoplanebitmap::$24) goto mode_twoplanebitmap::@4
  to:mode_twoplanebitmap::@16
mode_twoplanebitmap::@16: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@15
  (byte) dtv_control#215 ← phi( mode_twoplanebitmap::@15/(byte) dtv_control#231 )
  (byte*) mode_twoplanebitmap::gfxb#0 ← (byte*) mode_twoplanebitmap::PLANEB#0
  (byte) mode_twoplanebitmap::by#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_twoplanebitmap::@8
mode_twoplanebitmap::@8: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@16 mode_twoplanebitmap::@17
  (byte) dtv_control#200 ← phi( mode_twoplanebitmap::@16/(byte) dtv_control#215 mode_twoplanebitmap::@17/(byte) dtv_control#156 )
  (byte) mode_twoplanebitmap::by#4 ← phi( mode_twoplanebitmap::@16/(byte) mode_twoplanebitmap::by#0 mode_twoplanebitmap::@17/(byte) mode_twoplanebitmap::by#1 )
  (byte*) mode_twoplanebitmap::gfxb#3 ← phi( mode_twoplanebitmap::@16/(byte*) mode_twoplanebitmap::gfxb#0 mode_twoplanebitmap::@17/(byte*) mode_twoplanebitmap::gfxb#4 )
  (byte) mode_twoplanebitmap::bx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_twoplanebitmap::@9
mode_twoplanebitmap::@9: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@8 mode_twoplanebitmap::@9
  (byte) dtv_control#184 ← phi( mode_twoplanebitmap::@8/(byte) dtv_control#200 mode_twoplanebitmap::@9/(byte) dtv_control#184 )
  (byte) mode_twoplanebitmap::by#3 ← phi( mode_twoplanebitmap::@8/(byte) mode_twoplanebitmap::by#4 mode_twoplanebitmap::@9/(byte) mode_twoplanebitmap::by#3 )
  (byte) mode_twoplanebitmap::bx#2 ← phi( mode_twoplanebitmap::@8/(byte) mode_twoplanebitmap::bx#0 mode_twoplanebitmap::@9/(byte) mode_twoplanebitmap::bx#1 )
  (byte*) mode_twoplanebitmap::gfxb#2 ← phi( mode_twoplanebitmap::@8/(byte*) mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::@9/(byte*) mode_twoplanebitmap::gfxb#1 )
  *((byte*) mode_twoplanebitmap::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte*) mode_twoplanebitmap::gfxb#1 ← ++ (byte*) mode_twoplanebitmap::gfxb#2
  (byte) mode_twoplanebitmap::bx#1 ← (byte) mode_twoplanebitmap::bx#2 + rangenext(0,$27)
  (bool~) mode_twoplanebitmap::$25 ← (byte) mode_twoplanebitmap::bx#1 != rangelast(0,$27)
  if((bool~) mode_twoplanebitmap::$25) goto mode_twoplanebitmap::@9
  to:mode_twoplanebitmap::@17
mode_twoplanebitmap::@17: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@9
  (byte) dtv_control#156 ← phi( mode_twoplanebitmap::@9/(byte) dtv_control#184 )
  (byte*) mode_twoplanebitmap::gfxb#4 ← phi( mode_twoplanebitmap::@9/(byte*) mode_twoplanebitmap::gfxb#1 )
  (byte) mode_twoplanebitmap::by#2 ← phi( mode_twoplanebitmap::@9/(byte) mode_twoplanebitmap::by#3 )
  (byte) mode_twoplanebitmap::by#1 ← (byte) mode_twoplanebitmap::by#2 + rangenext(0,$c7)
  (bool~) mode_twoplanebitmap::$26 ← (byte) mode_twoplanebitmap::by#1 != rangelast(0,$c7)
  if((bool~) mode_twoplanebitmap::$26) goto mode_twoplanebitmap::@8
  to:mode_twoplanebitmap::@18
mode_twoplanebitmap::@18: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@17
  (byte) dtv_control#124 ← phi( mode_twoplanebitmap::@17/(byte) dtv_control#156 )
  call mode_ctrl 
  to:mode_twoplanebitmap::@19
mode_twoplanebitmap::@19: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@18
  (byte) dtv_control#87 ← phi( mode_twoplanebitmap::@18/(byte) dtv_control#16 )
  (byte) dtv_control#40 ← (byte) dtv_control#87
  to:mode_twoplanebitmap::@return
mode_twoplanebitmap::@return: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@19
  (byte) dtv_control#88 ← phi( mode_twoplanebitmap::@19/(byte) dtv_control#40 )
  (byte) dtv_control#41 ← (byte) dtv_control#88
  return 
  to:@return
mode_sixsfred: scope:[mode_sixsfred]  from menu::@40
  (byte*) mode_sixsfred::PLANEA#0 ← ((byte*)) (word/signed word/dword/signed dword) $4000
  (byte*) mode_sixsfred::PLANEB#0 ← ((byte*)) (word/signed word/dword/signed dword) $6000
  (byte*) mode_sixsfred::COLORS#0 ← ((byte*)) (word/dword/signed dword) $8000
  (byte~) mode_sixsfred::$0 ← (byte) DTV_HIGHCOLOR#0 | (byte) DTV_LINEAR#0
  (byte) dtv_control#42 ← (byte~) mode_sixsfred::$0
  (byte~) mode_sixsfred::$1 ← (byte) DTV_HIGHCOLOR#0 | (byte) DTV_LINEAR#0
  *((byte*) DTV_CONTROL#0) ← (byte~) mode_sixsfred::$1
  (byte~) mode_sixsfred::$2 ← (byte) VIC_ECM#0 | (byte) VIC_BMM#0
  (byte~) mode_sixsfred::$3 ← (byte~) mode_sixsfred::$2 | (byte) VIC_DEN#0
  (byte~) mode_sixsfred::$4 ← (byte~) mode_sixsfred::$3 | (byte) VIC_RSEL#0
  (byte/word/dword~) mode_sixsfred::$5 ← (byte~) mode_sixsfred::$4 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) mode_sixsfred::$5
  (byte~) mode_sixsfred::$6 ← (byte) VIC_MCM#0 | (byte) VIC_CSEL#0
  *((byte*) VIC_CONTROL2#0) ← (byte~) mode_sixsfred::$6
  (byte~) mode_sixsfred::$7 ← < (byte*) mode_sixsfred::PLANEA#0
  *((byte*) DTV_PLANEA_START_LO#0) ← (byte~) mode_sixsfred::$7
  (byte~) mode_sixsfred::$8 ← > (byte*) mode_sixsfred::PLANEA#0
  *((byte*) DTV_PLANEA_START_MI#0) ← (byte~) mode_sixsfred::$8
  *((byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) mode_sixsfred::$9 ← < (byte*) mode_sixsfred::PLANEB#0
  *((byte*) DTV_PLANEB_START_LO#0) ← (byte~) mode_sixsfred::$9
  (byte~) mode_sixsfred::$10 ← > (byte*) mode_sixsfred::PLANEB#0
  *((byte*) DTV_PLANEB_START_MI#0) ← (byte~) mode_sixsfred::$10
  *((byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*~) mode_sixsfred::$11 ← (byte*) mode_sixsfred::COLORS#0 / (word/signed word/dword/signed dword) $400
  (byte~) mode_sixsfred::$12 ← < (byte*~) mode_sixsfred::$11
  *((byte*) DTV_COLOR_BANK_LO#0) ← (byte~) mode_sixsfred::$12
  (byte*~) mode_sixsfred::$13 ← (byte*) mode_sixsfred::COLORS#0 / (word/signed word/dword/signed dword) $400
  (byte~) mode_sixsfred::$14 ← > (byte*~) mode_sixsfred::$13
  *((byte*) DTV_COLOR_BANK_HI#0) ← (byte~) mode_sixsfred::$14
  (byte) mode_sixsfred::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_sixsfred::@1
mode_sixsfred::@1: scope:[mode_sixsfred]  from mode_sixsfred mode_sixsfred::@1
  (byte) dtv_control#289 ← phi( mode_sixsfred/(byte) dtv_control#42 mode_sixsfred::@1/(byte) dtv_control#289 )
  (byte) mode_sixsfred::i#2 ← phi( mode_sixsfred/(byte) mode_sixsfred::i#0 mode_sixsfred::@1/(byte) mode_sixsfred::i#1 )
  *((byte*) DTV_PALETTE#0 + (byte) mode_sixsfred::i#2) ← (byte) mode_sixsfred::i#2
  (byte) mode_sixsfred::i#1 ← (byte) mode_sixsfred::i#2 + rangenext(0,$f)
  (bool~) mode_sixsfred::$15 ← (byte) mode_sixsfred::i#1 != rangelast(0,$f)
  if((bool~) mode_sixsfred::$15) goto mode_sixsfred::@1
  to:mode_sixsfred::@8
mode_sixsfred::@8: scope:[mode_sixsfred]  from mode_sixsfred::@1
  (byte) dtv_control#285 ← phi( mode_sixsfred::@1/(byte) dtv_control#289 )
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) mode_sixsfred::col#0 ← (byte*) mode_sixsfred::COLORS#0
  (byte) mode_sixsfred::cy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_sixsfred::@2
mode_sixsfred::@2: scope:[mode_sixsfred]  from mode_sixsfred::@8 mode_sixsfred::@9
  (byte) dtv_control#279 ← phi( mode_sixsfred::@8/(byte) dtv_control#285 mode_sixsfred::@9/(byte) dtv_control#267 )
  (byte*) mode_sixsfred::col#3 ← phi( mode_sixsfred::@8/(byte*) mode_sixsfred::col#0 mode_sixsfred::@9/(byte*) mode_sixsfred::col#4 )
  (byte) mode_sixsfred::cy#4 ← phi( mode_sixsfred::@8/(byte) mode_sixsfred::cy#0 mode_sixsfred::@9/(byte) mode_sixsfred::cy#1 )
  (byte) mode_sixsfred::cx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_sixsfred::@3
mode_sixsfred::@3: scope:[mode_sixsfred]  from mode_sixsfred::@2 mode_sixsfred::@3
  (byte) dtv_control#274 ← phi( mode_sixsfred::@2/(byte) dtv_control#279 mode_sixsfred::@3/(byte) dtv_control#274 )
  (byte*) mode_sixsfred::col#2 ← phi( mode_sixsfred::@2/(byte*) mode_sixsfred::col#3 mode_sixsfred::@3/(byte*) mode_sixsfred::col#1 )
  (byte) mode_sixsfred::cy#2 ← phi( mode_sixsfred::@2/(byte) mode_sixsfred::cy#4 mode_sixsfred::@3/(byte) mode_sixsfred::cy#2 )
  (byte) mode_sixsfred::cx#2 ← phi( mode_sixsfred::@2/(byte) mode_sixsfred::cx#0 mode_sixsfred::@3/(byte) mode_sixsfred::cx#1 )
  (byte~) mode_sixsfred::$16 ← (byte) mode_sixsfred::cx#2 + (byte) mode_sixsfred::cy#2
  (byte~) mode_sixsfred::$17 ← (byte~) mode_sixsfred::$16 & (byte/signed byte/word/signed word/dword/signed dword) $f
  *((byte*) mode_sixsfred::col#2) ← (byte~) mode_sixsfred::$17
  (byte*) mode_sixsfred::col#1 ← ++ (byte*) mode_sixsfred::col#2
  (byte) mode_sixsfred::cx#1 ← (byte) mode_sixsfred::cx#2 + rangenext(0,$27)
  (bool~) mode_sixsfred::$18 ← (byte) mode_sixsfred::cx#1 != rangelast(0,$27)
  if((bool~) mode_sixsfred::$18) goto mode_sixsfred::@3
  to:mode_sixsfred::@9
mode_sixsfred::@9: scope:[mode_sixsfred]  from mode_sixsfred::@3
  (byte) dtv_control#267 ← phi( mode_sixsfred::@3/(byte) dtv_control#274 )
  (byte*) mode_sixsfred::col#4 ← phi( mode_sixsfred::@3/(byte*) mode_sixsfred::col#1 )
  (byte) mode_sixsfred::cy#3 ← phi( mode_sixsfred::@3/(byte) mode_sixsfred::cy#2 )
  (byte) mode_sixsfred::cy#1 ← (byte) mode_sixsfred::cy#3 + rangenext(0,$18)
  (bool~) mode_sixsfred::$19 ← (byte) mode_sixsfred::cy#1 != rangelast(0,$18)
  if((bool~) mode_sixsfred::$19) goto mode_sixsfred::@2
  to:mode_sixsfred::@10
mode_sixsfred::@10: scope:[mode_sixsfred]  from mode_sixsfred::@9
  (byte) dtv_control#260 ← phi( mode_sixsfred::@9/(byte) dtv_control#267 )
  (byte*) mode_sixsfred::gfxa#0 ← (byte*) mode_sixsfred::PLANEA#0
  (byte[]) mode_sixsfred::row_bitmask#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $55, (byte/word/signed word/dword/signed dword) $aa, (byte/word/signed word/dword/signed dword) $ff }
  (byte) mode_sixsfred::ay#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_sixsfred::@4
mode_sixsfred::@4: scope:[mode_sixsfred]  from mode_sixsfred::@10 mode_sixsfred::@11
  (byte) dtv_control#251 ← phi( mode_sixsfred::@10/(byte) dtv_control#260 mode_sixsfred::@11/(byte) dtv_control#232 )
  (byte*) mode_sixsfred::gfxa#3 ← phi( mode_sixsfred::@10/(byte*) mode_sixsfred::gfxa#0 mode_sixsfred::@11/(byte*) mode_sixsfred::gfxa#4 )
  (byte) mode_sixsfred::ay#4 ← phi( mode_sixsfred::@10/(byte) mode_sixsfred::ay#0 mode_sixsfred::@11/(byte) mode_sixsfred::ay#1 )
  (byte) mode_sixsfred::ax#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_sixsfred::@5
mode_sixsfred::@5: scope:[mode_sixsfred]  from mode_sixsfred::@4 mode_sixsfred::@5
  (byte) dtv_control#242 ← phi( mode_sixsfred::@4/(byte) dtv_control#251 mode_sixsfred::@5/(byte) dtv_control#242 )
  (byte) mode_sixsfred::ax#2 ← phi( mode_sixsfred::@4/(byte) mode_sixsfred::ax#0 mode_sixsfred::@5/(byte) mode_sixsfred::ax#1 )
  (byte*) mode_sixsfred::gfxa#2 ← phi( mode_sixsfred::@4/(byte*) mode_sixsfred::gfxa#3 mode_sixsfred::@5/(byte*) mode_sixsfred::gfxa#1 )
  (byte) mode_sixsfred::ay#2 ← phi( mode_sixsfred::@4/(byte) mode_sixsfred::ay#4 mode_sixsfred::@5/(byte) mode_sixsfred::ay#2 )
  (byte~) mode_sixsfred::$20 ← (byte) mode_sixsfred::ay#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte~) mode_sixsfred::$21 ← (byte~) mode_sixsfred::$20 & (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) mode_sixsfred::row#0 ← (byte~) mode_sixsfred::$21
  *((byte*) mode_sixsfred::gfxa#2) ← *((byte[]) mode_sixsfred::row_bitmask#0 + (byte) mode_sixsfred::row#0)
  (byte*) mode_sixsfred::gfxa#1 ← ++ (byte*) mode_sixsfred::gfxa#2
  (byte) mode_sixsfred::ax#1 ← (byte) mode_sixsfred::ax#2 + rangenext(0,$27)
  (bool~) mode_sixsfred::$22 ← (byte) mode_sixsfred::ax#1 != rangelast(0,$27)
  if((bool~) mode_sixsfred::$22) goto mode_sixsfred::@5
  to:mode_sixsfred::@11
mode_sixsfred::@11: scope:[mode_sixsfred]  from mode_sixsfred::@5
  (byte) dtv_control#232 ← phi( mode_sixsfred::@5/(byte) dtv_control#242 )
  (byte*) mode_sixsfred::gfxa#4 ← phi( mode_sixsfred::@5/(byte*) mode_sixsfred::gfxa#1 )
  (byte) mode_sixsfred::ay#3 ← phi( mode_sixsfred::@5/(byte) mode_sixsfred::ay#2 )
  (byte) mode_sixsfred::ay#1 ← (byte) mode_sixsfred::ay#3 + rangenext(0,$c7)
  (bool~) mode_sixsfred::$23 ← (byte) mode_sixsfred::ay#1 != rangelast(0,$c7)
  if((bool~) mode_sixsfred::$23) goto mode_sixsfred::@4
  to:mode_sixsfred::@12
mode_sixsfred::@12: scope:[mode_sixsfred]  from mode_sixsfred::@11
  (byte) dtv_control#216 ← phi( mode_sixsfred::@11/(byte) dtv_control#232 )
  (byte*) mode_sixsfred::gfxb#0 ← (byte*) mode_sixsfred::PLANEB#0
  (byte) mode_sixsfred::by#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_sixsfred::@6
mode_sixsfred::@6: scope:[mode_sixsfred]  from mode_sixsfred::@12 mode_sixsfred::@13
  (byte) dtv_control#201 ← phi( mode_sixsfred::@12/(byte) dtv_control#216 mode_sixsfred::@13/(byte) dtv_control#157 )
  (byte) mode_sixsfred::by#4 ← phi( mode_sixsfred::@12/(byte) mode_sixsfred::by#0 mode_sixsfred::@13/(byte) mode_sixsfred::by#1 )
  (byte*) mode_sixsfred::gfxb#3 ← phi( mode_sixsfred::@12/(byte*) mode_sixsfred::gfxb#0 mode_sixsfred::@13/(byte*) mode_sixsfred::gfxb#4 )
  (byte) mode_sixsfred::bx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_sixsfred::@7
mode_sixsfred::@7: scope:[mode_sixsfred]  from mode_sixsfred::@6 mode_sixsfred::@7
  (byte) dtv_control#185 ← phi( mode_sixsfred::@6/(byte) dtv_control#201 mode_sixsfred::@7/(byte) dtv_control#185 )
  (byte) mode_sixsfred::by#3 ← phi( mode_sixsfred::@6/(byte) mode_sixsfred::by#4 mode_sixsfred::@7/(byte) mode_sixsfred::by#3 )
  (byte) mode_sixsfred::bx#2 ← phi( mode_sixsfred::@6/(byte) mode_sixsfred::bx#0 mode_sixsfred::@7/(byte) mode_sixsfred::bx#1 )
  (byte*) mode_sixsfred::gfxb#2 ← phi( mode_sixsfred::@6/(byte*) mode_sixsfred::gfxb#3 mode_sixsfred::@7/(byte*) mode_sixsfred::gfxb#1 )
  *((byte*) mode_sixsfred::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $1b
  (byte*) mode_sixsfred::gfxb#1 ← ++ (byte*) mode_sixsfred::gfxb#2
  (byte) mode_sixsfred::bx#1 ← (byte) mode_sixsfred::bx#2 + rangenext(0,$27)
  (bool~) mode_sixsfred::$24 ← (byte) mode_sixsfred::bx#1 != rangelast(0,$27)
  if((bool~) mode_sixsfred::$24) goto mode_sixsfred::@7
  to:mode_sixsfred::@13
mode_sixsfred::@13: scope:[mode_sixsfred]  from mode_sixsfred::@7
  (byte) dtv_control#157 ← phi( mode_sixsfred::@7/(byte) dtv_control#185 )
  (byte*) mode_sixsfred::gfxb#4 ← phi( mode_sixsfred::@7/(byte*) mode_sixsfred::gfxb#1 )
  (byte) mode_sixsfred::by#2 ← phi( mode_sixsfred::@7/(byte) mode_sixsfred::by#3 )
  (byte) mode_sixsfred::by#1 ← (byte) mode_sixsfred::by#2 + rangenext(0,$c7)
  (bool~) mode_sixsfred::$25 ← (byte) mode_sixsfred::by#1 != rangelast(0,$c7)
  if((bool~) mode_sixsfred::$25) goto mode_sixsfred::@6
  to:mode_sixsfred::@14
mode_sixsfred::@14: scope:[mode_sixsfred]  from mode_sixsfred::@13
  (byte) dtv_control#125 ← phi( mode_sixsfred::@13/(byte) dtv_control#157 )
  call mode_ctrl 
  to:mode_sixsfred::@15
mode_sixsfred::@15: scope:[mode_sixsfred]  from mode_sixsfred::@14
  (byte) dtv_control#89 ← phi( mode_sixsfred::@14/(byte) dtv_control#16 )
  (byte) dtv_control#43 ← (byte) dtv_control#89
  to:mode_sixsfred::@return
mode_sixsfred::@return: scope:[mode_sixsfred]  from mode_sixsfred::@15
  (byte) dtv_control#90 ← phi( mode_sixsfred::@15/(byte) dtv_control#43 )
  (byte) dtv_control#44 ← (byte) dtv_control#90
  return 
  to:@return
mode_sixsfred2: scope:[mode_sixsfred2]  from menu::@36
  (byte*) mode_sixsfred2::PLANEA#0 ← ((byte*)) (word/signed word/dword/signed dword) $4000
  (byte*) mode_sixsfred2::PLANEB#0 ← ((byte*)) (word/signed word/dword/signed dword) $6000
  (byte*) mode_sixsfred2::COLORS#0 ← ((byte*)) (word/dword/signed dword) $8000
  (byte) dtv_control#45 ← (byte) DTV_LINEAR#0
  *((byte*) DTV_CONTROL#0) ← (byte) DTV_LINEAR#0
  (byte~) mode_sixsfred2::$0 ← (byte) VIC_ECM#0 | (byte) VIC_BMM#0
  (byte~) mode_sixsfred2::$1 ← (byte~) mode_sixsfred2::$0 | (byte) VIC_DEN#0
  (byte~) mode_sixsfred2::$2 ← (byte~) mode_sixsfred2::$1 | (byte) VIC_RSEL#0
  (byte/word/dword~) mode_sixsfred2::$3 ← (byte~) mode_sixsfred2::$2 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) mode_sixsfred2::$3
  (byte~) mode_sixsfred2::$4 ← (byte) VIC_MCM#0 | (byte) VIC_CSEL#0
  *((byte*) VIC_CONTROL2#0) ← (byte~) mode_sixsfred2::$4
  (byte~) mode_sixsfred2::$5 ← < (byte*) mode_sixsfred2::PLANEA#0
  *((byte*) DTV_PLANEA_START_LO#0) ← (byte~) mode_sixsfred2::$5
  (byte~) mode_sixsfred2::$6 ← > (byte*) mode_sixsfred2::PLANEA#0
  *((byte*) DTV_PLANEA_START_MI#0) ← (byte~) mode_sixsfred2::$6
  *((byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) mode_sixsfred2::$7 ← < (byte*) mode_sixsfred2::PLANEB#0
  *((byte*) DTV_PLANEB_START_LO#0) ← (byte~) mode_sixsfred2::$7
  (byte~) mode_sixsfred2::$8 ← > (byte*) mode_sixsfred2::PLANEB#0
  *((byte*) DTV_PLANEB_START_MI#0) ← (byte~) mode_sixsfred2::$8
  *((byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*~) mode_sixsfred2::$9 ← (byte*) mode_sixsfred2::COLORS#0 / (word/signed word/dword/signed dword) $400
  (byte~) mode_sixsfred2::$10 ← < (byte*~) mode_sixsfred2::$9
  *((byte*) DTV_COLOR_BANK_LO#0) ← (byte~) mode_sixsfred2::$10
  (byte*~) mode_sixsfred2::$11 ← (byte*) mode_sixsfred2::COLORS#0 / (word/signed word/dword/signed dword) $400
  (byte~) mode_sixsfred2::$12 ← > (byte*~) mode_sixsfred2::$11
  *((byte*) DTV_COLOR_BANK_HI#0) ← (byte~) mode_sixsfred2::$12
  (byte) mode_sixsfred2::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_sixsfred2::@1
mode_sixsfred2::@1: scope:[mode_sixsfred2]  from mode_sixsfred2 mode_sixsfred2::@1
  (byte) dtv_control#290 ← phi( mode_sixsfred2/(byte) dtv_control#45 mode_sixsfred2::@1/(byte) dtv_control#290 )
  (byte) mode_sixsfred2::i#2 ← phi( mode_sixsfred2/(byte) mode_sixsfred2::i#0 mode_sixsfred2::@1/(byte) mode_sixsfred2::i#1 )
  *((byte*) DTV_PALETTE#0 + (byte) mode_sixsfred2::i#2) ← (byte) mode_sixsfred2::i#2
  (byte) mode_sixsfred2::i#1 ← (byte) mode_sixsfred2::i#2 + rangenext(0,$f)
  (bool~) mode_sixsfred2::$13 ← (byte) mode_sixsfred2::i#1 != rangelast(0,$f)
  if((bool~) mode_sixsfred2::$13) goto mode_sixsfred2::@1
  to:mode_sixsfred2::@8
mode_sixsfred2::@8: scope:[mode_sixsfred2]  from mode_sixsfred2::@1
  (byte) dtv_control#286 ← phi( mode_sixsfred2::@1/(byte) dtv_control#290 )
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) mode_sixsfred2::col#0 ← (byte*) mode_sixsfred2::COLORS#0
  (byte) mode_sixsfred2::cy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_sixsfred2::@2
mode_sixsfred2::@2: scope:[mode_sixsfred2]  from mode_sixsfred2::@8 mode_sixsfred2::@9
  (byte) dtv_control#280 ← phi( mode_sixsfred2::@8/(byte) dtv_control#286 mode_sixsfred2::@9/(byte) dtv_control#268 )
  (byte*) mode_sixsfred2::col#3 ← phi( mode_sixsfred2::@8/(byte*) mode_sixsfred2::col#0 mode_sixsfred2::@9/(byte*) mode_sixsfred2::col#4 )
  (byte) mode_sixsfred2::cy#4 ← phi( mode_sixsfred2::@8/(byte) mode_sixsfred2::cy#0 mode_sixsfred2::@9/(byte) mode_sixsfred2::cy#1 )
  (byte) mode_sixsfred2::cx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_sixsfred2::@3
mode_sixsfred2::@3: scope:[mode_sixsfred2]  from mode_sixsfred2::@2 mode_sixsfred2::@3
  (byte) dtv_control#275 ← phi( mode_sixsfred2::@2/(byte) dtv_control#280 mode_sixsfred2::@3/(byte) dtv_control#275 )
  (byte*) mode_sixsfred2::col#2 ← phi( mode_sixsfred2::@2/(byte*) mode_sixsfred2::col#3 mode_sixsfred2::@3/(byte*) mode_sixsfred2::col#1 )
  (byte) mode_sixsfred2::cy#2 ← phi( mode_sixsfred2::@2/(byte) mode_sixsfred2::cy#4 mode_sixsfred2::@3/(byte) mode_sixsfred2::cy#2 )
  (byte) mode_sixsfred2::cx#2 ← phi( mode_sixsfred2::@2/(byte) mode_sixsfred2::cx#0 mode_sixsfred2::@3/(byte) mode_sixsfred2::cx#1 )
  (byte~) mode_sixsfred2::$14 ← (byte) mode_sixsfred2::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte~) mode_sixsfred2::$15 ← (byte~) mode_sixsfred2::$14 << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) mode_sixsfred2::$16 ← (byte) mode_sixsfred2::cy#2 & (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte~) mode_sixsfred2::$17 ← (byte~) mode_sixsfred2::$15 | (byte~) mode_sixsfred2::$16
  *((byte*) mode_sixsfred2::col#2) ← (byte~) mode_sixsfred2::$17
  (byte*) mode_sixsfred2::col#1 ← ++ (byte*) mode_sixsfred2::col#2
  (byte) mode_sixsfred2::cx#1 ← (byte) mode_sixsfred2::cx#2 + rangenext(0,$27)
  (bool~) mode_sixsfred2::$18 ← (byte) mode_sixsfred2::cx#1 != rangelast(0,$27)
  if((bool~) mode_sixsfred2::$18) goto mode_sixsfred2::@3
  to:mode_sixsfred2::@9
mode_sixsfred2::@9: scope:[mode_sixsfred2]  from mode_sixsfred2::@3
  (byte) dtv_control#268 ← phi( mode_sixsfred2::@3/(byte) dtv_control#275 )
  (byte*) mode_sixsfred2::col#4 ← phi( mode_sixsfred2::@3/(byte*) mode_sixsfred2::col#1 )
  (byte) mode_sixsfred2::cy#3 ← phi( mode_sixsfred2::@3/(byte) mode_sixsfred2::cy#2 )
  (byte) mode_sixsfred2::cy#1 ← (byte) mode_sixsfred2::cy#3 + rangenext(0,$18)
  (bool~) mode_sixsfred2::$19 ← (byte) mode_sixsfred2::cy#1 != rangelast(0,$18)
  if((bool~) mode_sixsfred2::$19) goto mode_sixsfred2::@2
  to:mode_sixsfred2::@10
mode_sixsfred2::@10: scope:[mode_sixsfred2]  from mode_sixsfred2::@9
  (byte) dtv_control#261 ← phi( mode_sixsfred2::@9/(byte) dtv_control#268 )
  (byte*) mode_sixsfred2::gfxa#0 ← (byte*) mode_sixsfred2::PLANEA#0
  (byte[]) mode_sixsfred2::row_bitmask#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $55, (byte/word/signed word/dword/signed dword) $aa, (byte/word/signed word/dword/signed dword) $ff }
  (byte) mode_sixsfred2::ay#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_sixsfred2::@4
mode_sixsfred2::@4: scope:[mode_sixsfred2]  from mode_sixsfred2::@10 mode_sixsfred2::@11
  (byte) dtv_control#252 ← phi( mode_sixsfred2::@10/(byte) dtv_control#261 mode_sixsfred2::@11/(byte) dtv_control#233 )
  (byte*) mode_sixsfred2::gfxa#3 ← phi( mode_sixsfred2::@10/(byte*) mode_sixsfred2::gfxa#0 mode_sixsfred2::@11/(byte*) mode_sixsfred2::gfxa#4 )
  (byte) mode_sixsfred2::ay#4 ← phi( mode_sixsfred2::@10/(byte) mode_sixsfred2::ay#0 mode_sixsfred2::@11/(byte) mode_sixsfred2::ay#1 )
  (byte) mode_sixsfred2::ax#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_sixsfred2::@5
mode_sixsfred2::@5: scope:[mode_sixsfred2]  from mode_sixsfred2::@4 mode_sixsfred2::@5
  (byte) dtv_control#243 ← phi( mode_sixsfred2::@4/(byte) dtv_control#252 mode_sixsfred2::@5/(byte) dtv_control#243 )
  (byte) mode_sixsfred2::ax#2 ← phi( mode_sixsfred2::@4/(byte) mode_sixsfred2::ax#0 mode_sixsfred2::@5/(byte) mode_sixsfred2::ax#1 )
  (byte*) mode_sixsfred2::gfxa#2 ← phi( mode_sixsfred2::@4/(byte*) mode_sixsfred2::gfxa#3 mode_sixsfred2::@5/(byte*) mode_sixsfred2::gfxa#1 )
  (byte) mode_sixsfred2::ay#2 ← phi( mode_sixsfred2::@4/(byte) mode_sixsfred2::ay#4 mode_sixsfred2::@5/(byte) mode_sixsfred2::ay#2 )
  (byte~) mode_sixsfred2::$20 ← (byte) mode_sixsfred2::ay#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte~) mode_sixsfred2::$21 ← (byte~) mode_sixsfred2::$20 & (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) mode_sixsfred2::row#0 ← (byte~) mode_sixsfred2::$21
  *((byte*) mode_sixsfred2::gfxa#2) ← *((byte[]) mode_sixsfred2::row_bitmask#0 + (byte) mode_sixsfred2::row#0)
  (byte*) mode_sixsfred2::gfxa#1 ← ++ (byte*) mode_sixsfred2::gfxa#2
  (byte) mode_sixsfred2::ax#1 ← (byte) mode_sixsfred2::ax#2 + rangenext(0,$27)
  (bool~) mode_sixsfred2::$22 ← (byte) mode_sixsfred2::ax#1 != rangelast(0,$27)
  if((bool~) mode_sixsfred2::$22) goto mode_sixsfred2::@5
  to:mode_sixsfred2::@11
mode_sixsfred2::@11: scope:[mode_sixsfred2]  from mode_sixsfred2::@5
  (byte) dtv_control#233 ← phi( mode_sixsfred2::@5/(byte) dtv_control#243 )
  (byte*) mode_sixsfred2::gfxa#4 ← phi( mode_sixsfred2::@5/(byte*) mode_sixsfred2::gfxa#1 )
  (byte) mode_sixsfred2::ay#3 ← phi( mode_sixsfred2::@5/(byte) mode_sixsfred2::ay#2 )
  (byte) mode_sixsfred2::ay#1 ← (byte) mode_sixsfred2::ay#3 + rangenext(0,$c7)
  (bool~) mode_sixsfred2::$23 ← (byte) mode_sixsfred2::ay#1 != rangelast(0,$c7)
  if((bool~) mode_sixsfred2::$23) goto mode_sixsfred2::@4
  to:mode_sixsfred2::@12
mode_sixsfred2::@12: scope:[mode_sixsfred2]  from mode_sixsfred2::@11
  (byte) dtv_control#217 ← phi( mode_sixsfred2::@11/(byte) dtv_control#233 )
  (byte*) mode_sixsfred2::gfxb#0 ← (byte*) mode_sixsfred2::PLANEB#0
  (byte) mode_sixsfred2::by#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_sixsfred2::@6
mode_sixsfred2::@6: scope:[mode_sixsfred2]  from mode_sixsfred2::@12 mode_sixsfred2::@13
  (byte) dtv_control#202 ← phi( mode_sixsfred2::@12/(byte) dtv_control#217 mode_sixsfred2::@13/(byte) dtv_control#158 )
  (byte) mode_sixsfred2::by#4 ← phi( mode_sixsfred2::@12/(byte) mode_sixsfred2::by#0 mode_sixsfred2::@13/(byte) mode_sixsfred2::by#1 )
  (byte*) mode_sixsfred2::gfxb#3 ← phi( mode_sixsfred2::@12/(byte*) mode_sixsfred2::gfxb#0 mode_sixsfred2::@13/(byte*) mode_sixsfred2::gfxb#4 )
  (byte) mode_sixsfred2::bx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_sixsfred2::@7
mode_sixsfred2::@7: scope:[mode_sixsfred2]  from mode_sixsfred2::@6 mode_sixsfred2::@7
  (byte) dtv_control#186 ← phi( mode_sixsfred2::@6/(byte) dtv_control#202 mode_sixsfred2::@7/(byte) dtv_control#186 )
  (byte) mode_sixsfred2::by#3 ← phi( mode_sixsfred2::@6/(byte) mode_sixsfred2::by#4 mode_sixsfred2::@7/(byte) mode_sixsfred2::by#3 )
  (byte) mode_sixsfred2::bx#2 ← phi( mode_sixsfred2::@6/(byte) mode_sixsfred2::bx#0 mode_sixsfred2::@7/(byte) mode_sixsfred2::bx#1 )
  (byte*) mode_sixsfred2::gfxb#2 ← phi( mode_sixsfred2::@6/(byte*) mode_sixsfred2::gfxb#3 mode_sixsfred2::@7/(byte*) mode_sixsfred2::gfxb#1 )
  *((byte*) mode_sixsfred2::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $1b
  (byte*) mode_sixsfred2::gfxb#1 ← ++ (byte*) mode_sixsfred2::gfxb#2
  (byte) mode_sixsfred2::bx#1 ← (byte) mode_sixsfred2::bx#2 + rangenext(0,$27)
  (bool~) mode_sixsfred2::$24 ← (byte) mode_sixsfred2::bx#1 != rangelast(0,$27)
  if((bool~) mode_sixsfred2::$24) goto mode_sixsfred2::@7
  to:mode_sixsfred2::@13
mode_sixsfred2::@13: scope:[mode_sixsfred2]  from mode_sixsfred2::@7
  (byte) dtv_control#158 ← phi( mode_sixsfred2::@7/(byte) dtv_control#186 )
  (byte*) mode_sixsfred2::gfxb#4 ← phi( mode_sixsfred2::@7/(byte*) mode_sixsfred2::gfxb#1 )
  (byte) mode_sixsfred2::by#2 ← phi( mode_sixsfred2::@7/(byte) mode_sixsfred2::by#3 )
  (byte) mode_sixsfred2::by#1 ← (byte) mode_sixsfred2::by#2 + rangenext(0,$c7)
  (bool~) mode_sixsfred2::$25 ← (byte) mode_sixsfred2::by#1 != rangelast(0,$c7)
  if((bool~) mode_sixsfred2::$25) goto mode_sixsfred2::@6
  to:mode_sixsfred2::@14
mode_sixsfred2::@14: scope:[mode_sixsfred2]  from mode_sixsfred2::@13
  (byte) dtv_control#126 ← phi( mode_sixsfred2::@13/(byte) dtv_control#158 )
  call mode_ctrl 
  to:mode_sixsfred2::@15
mode_sixsfred2::@15: scope:[mode_sixsfred2]  from mode_sixsfred2::@14
  (byte) dtv_control#91 ← phi( mode_sixsfred2::@14/(byte) dtv_control#16 )
  (byte) dtv_control#46 ← (byte) dtv_control#91
  to:mode_sixsfred2::@return
mode_sixsfred2::@return: scope:[mode_sixsfred2]  from mode_sixsfred2::@15
  (byte) dtv_control#92 ← phi( mode_sixsfred2::@15/(byte) dtv_control#46 )
  (byte) dtv_control#47 ← (byte) dtv_control#92
  return 
  to:@return
mode_8bpppixelcell: scope:[mode_8bpppixelcell]  from menu::@42
  (byte*) mode_8bpppixelcell::PLANEA#0 ← ((byte*)) (word/signed word/dword/signed dword) $3c00
  (byte*) mode_8bpppixelcell::PLANEB#0 ← ((byte*)) (word/signed word/dword/signed dword) $4000
  (byte~) mode_8bpppixelcell::$0 ← (byte) DTV_HIGHCOLOR#0 | (byte) DTV_LINEAR#0
  (byte~) mode_8bpppixelcell::$1 ← (byte~) mode_8bpppixelcell::$0 | (byte) DTV_CHUNKY#0
  (byte) dtv_control#48 ← (byte~) mode_8bpppixelcell::$1
  (byte~) mode_8bpppixelcell::$2 ← (byte) DTV_HIGHCOLOR#0 | (byte) DTV_LINEAR#0
  (byte~) mode_8bpppixelcell::$3 ← (byte~) mode_8bpppixelcell::$2 | (byte) DTV_CHUNKY#0
  *((byte*) DTV_CONTROL#0) ← (byte~) mode_8bpppixelcell::$3
  (byte~) mode_8bpppixelcell::$4 ← (byte) VIC_ECM#0 | (byte) VIC_DEN#0
  (byte~) mode_8bpppixelcell::$5 ← (byte~) mode_8bpppixelcell::$4 | (byte) VIC_RSEL#0
  (byte/word/dword~) mode_8bpppixelcell::$6 ← (byte~) mode_8bpppixelcell::$5 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) mode_8bpppixelcell::$6
  (byte~) mode_8bpppixelcell::$7 ← (byte) VIC_MCM#0 | (byte) VIC_CSEL#0
  *((byte*) VIC_CONTROL2#0) ← (byte~) mode_8bpppixelcell::$7
  (byte~) mode_8bpppixelcell::$8 ← < (byte*) mode_8bpppixelcell::PLANEA#0
  *((byte*) DTV_PLANEA_START_LO#0) ← (byte~) mode_8bpppixelcell::$8
  (byte~) mode_8bpppixelcell::$9 ← > (byte*) mode_8bpppixelcell::PLANEA#0
  *((byte*) DTV_PLANEA_START_MI#0) ← (byte~) mode_8bpppixelcell::$9
  *((byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) mode_8bpppixelcell::$10 ← < (byte*) mode_8bpppixelcell::PLANEB#0
  *((byte*) DTV_PLANEB_START_LO#0) ← (byte~) mode_8bpppixelcell::$10
  (byte~) mode_8bpppixelcell::$11 ← > (byte*) mode_8bpppixelcell::PLANEB#0
  *((byte*) DTV_PLANEB_START_MI#0) ← (byte~) mode_8bpppixelcell::$11
  *((byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) mode_8bpppixelcell::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_8bpppixelcell::@1
mode_8bpppixelcell::@1: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell mode_8bpppixelcell::@1
  (byte) dtv_control#287 ← phi( mode_8bpppixelcell/(byte) dtv_control#48 mode_8bpppixelcell::@1/(byte) dtv_control#287 )
  (byte) mode_8bpppixelcell::i#2 ← phi( mode_8bpppixelcell/(byte) mode_8bpppixelcell::i#0 mode_8bpppixelcell::@1/(byte) mode_8bpppixelcell::i#1 )
  *((byte*) DTV_PALETTE#0 + (byte) mode_8bpppixelcell::i#2) ← (byte) mode_8bpppixelcell::i#2
  (byte) mode_8bpppixelcell::i#1 ← (byte) mode_8bpppixelcell::i#2 + rangenext(0,$f)
  (bool~) mode_8bpppixelcell::$12 ← (byte) mode_8bpppixelcell::i#1 != rangelast(0,$f)
  if((bool~) mode_8bpppixelcell::$12) goto mode_8bpppixelcell::@1
  to:mode_8bpppixelcell::@8
mode_8bpppixelcell::@8: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@1
  (byte) dtv_control#281 ← phi( mode_8bpppixelcell::@1/(byte) dtv_control#287 )
  (byte*) mode_8bpppixelcell::gfxa#0 ← (byte*) mode_8bpppixelcell::PLANEA#0
  (byte) mode_8bpppixelcell::ay#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_8bpppixelcell::@2
mode_8bpppixelcell::@2: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@8 mode_8bpppixelcell::@9
  (byte) dtv_control#276 ← phi( mode_8bpppixelcell::@8/(byte) dtv_control#281 mode_8bpppixelcell::@9/(byte) dtv_control#262 )
  (byte*) mode_8bpppixelcell::gfxa#3 ← phi( mode_8bpppixelcell::@8/(byte*) mode_8bpppixelcell::gfxa#0 mode_8bpppixelcell::@9/(byte*) mode_8bpppixelcell::gfxa#4 )
  (byte) mode_8bpppixelcell::ay#4 ← phi( mode_8bpppixelcell::@8/(byte) mode_8bpppixelcell::ay#0 mode_8bpppixelcell::@9/(byte) mode_8bpppixelcell::ay#1 )
  (byte) mode_8bpppixelcell::ax#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_8bpppixelcell::@3
mode_8bpppixelcell::@3: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@2 mode_8bpppixelcell::@3
  (byte) dtv_control#269 ← phi( mode_8bpppixelcell::@2/(byte) dtv_control#276 mode_8bpppixelcell::@3/(byte) dtv_control#269 )
  (byte*) mode_8bpppixelcell::gfxa#2 ← phi( mode_8bpppixelcell::@2/(byte*) mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::@3/(byte*) mode_8bpppixelcell::gfxa#1 )
  (byte) mode_8bpppixelcell::ax#2 ← phi( mode_8bpppixelcell::@2/(byte) mode_8bpppixelcell::ax#0 mode_8bpppixelcell::@3/(byte) mode_8bpppixelcell::ax#1 )
  (byte) mode_8bpppixelcell::ay#2 ← phi( mode_8bpppixelcell::@2/(byte) mode_8bpppixelcell::ay#4 mode_8bpppixelcell::@3/(byte) mode_8bpppixelcell::ay#2 )
  (byte~) mode_8bpppixelcell::$13 ← (byte) mode_8bpppixelcell::ay#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) mode_8bpppixelcell::$14 ← (byte~) mode_8bpppixelcell::$13 << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) mode_8bpppixelcell::$15 ← (byte) mode_8bpppixelcell::ax#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) mode_8bpppixelcell::$16 ← (byte~) mode_8bpppixelcell::$14 | (byte~) mode_8bpppixelcell::$15
  *((byte*) mode_8bpppixelcell::gfxa#2) ← (byte~) mode_8bpppixelcell::$16
  (byte*) mode_8bpppixelcell::gfxa#1 ← ++ (byte*) mode_8bpppixelcell::gfxa#2
  (byte) mode_8bpppixelcell::ax#1 ← (byte) mode_8bpppixelcell::ax#2 + rangenext(0,$27)
  (bool~) mode_8bpppixelcell::$17 ← (byte) mode_8bpppixelcell::ax#1 != rangelast(0,$27)
  if((bool~) mode_8bpppixelcell::$17) goto mode_8bpppixelcell::@3
  to:mode_8bpppixelcell::@9
mode_8bpppixelcell::@9: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@3
  (byte) dtv_control#262 ← phi( mode_8bpppixelcell::@3/(byte) dtv_control#269 )
  (byte*) mode_8bpppixelcell::gfxa#4 ← phi( mode_8bpppixelcell::@3/(byte*) mode_8bpppixelcell::gfxa#1 )
  (byte) mode_8bpppixelcell::ay#3 ← phi( mode_8bpppixelcell::@3/(byte) mode_8bpppixelcell::ay#2 )
  (byte) mode_8bpppixelcell::ay#1 ← (byte) mode_8bpppixelcell::ay#3 + rangenext(0,$18)
  (bool~) mode_8bpppixelcell::$18 ← (byte) mode_8bpppixelcell::ay#1 != rangelast(0,$18)
  if((bool~) mode_8bpppixelcell::$18) goto mode_8bpppixelcell::@2
  to:mode_8bpppixelcell::@10
mode_8bpppixelcell::@10: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@9
  (byte) dtv_control#253 ← phi( mode_8bpppixelcell::@9/(byte) dtv_control#262 )
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_CHARROM#0
  (byte*) mode_8bpppixelcell::CHARGEN#0 ← ((byte*)) (word/dword/signed dword) $d000
  (byte*) mode_8bpppixelcell::gfxb#0 ← (byte*) mode_8bpppixelcell::PLANEB#0
  (byte*) mode_8bpppixelcell::chargen#0 ← (byte*) mode_8bpppixelcell::CHARGEN#0
  (byte) mode_8bpppixelcell::col#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) mode_8bpppixelcell::ch#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_8bpppixelcell::@4
mode_8bpppixelcell::@4: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@10 mode_8bpppixelcell::@13
  (byte) dtv_control#244 ← phi( mode_8bpppixelcell::@10/(byte) dtv_control#253 mode_8bpppixelcell::@13/(byte) dtv_control#159 )
  (byte) mode_8bpppixelcell::ch#8 ← phi( mode_8bpppixelcell::@10/(byte) mode_8bpppixelcell::ch#0 mode_8bpppixelcell::@13/(byte) mode_8bpppixelcell::ch#1 )
  (byte) mode_8bpppixelcell::col#7 ← phi( mode_8bpppixelcell::@10/(byte) mode_8bpppixelcell::col#0 mode_8bpppixelcell::@13/(byte) mode_8bpppixelcell::col#8 )
  (byte*) mode_8bpppixelcell::gfxb#7 ← phi( mode_8bpppixelcell::@10/(byte*) mode_8bpppixelcell::gfxb#0 mode_8bpppixelcell::@13/(byte*) mode_8bpppixelcell::gfxb#8 )
  (byte*) mode_8bpppixelcell::chargen#4 ← phi( mode_8bpppixelcell::@10/(byte*) mode_8bpppixelcell::chargen#0 mode_8bpppixelcell::@13/(byte*) mode_8bpppixelcell::chargen#5 )
  (byte) mode_8bpppixelcell::cr#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_8bpppixelcell::@5
mode_8bpppixelcell::@5: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@12 mode_8bpppixelcell::@4
  (byte) dtv_control#234 ← phi( mode_8bpppixelcell::@12/(byte) dtv_control#187 mode_8bpppixelcell::@4/(byte) dtv_control#244 )
  (byte) mode_8bpppixelcell::ch#7 ← phi( mode_8bpppixelcell::@12/(byte) mode_8bpppixelcell::ch#3 mode_8bpppixelcell::@4/(byte) mode_8bpppixelcell::ch#8 )
  (byte) mode_8bpppixelcell::cr#6 ← phi( mode_8bpppixelcell::@12/(byte) mode_8bpppixelcell::cr#1 mode_8bpppixelcell::@4/(byte) mode_8bpppixelcell::cr#0 )
  (byte) mode_8bpppixelcell::col#5 ← phi( mode_8bpppixelcell::@12/(byte) mode_8bpppixelcell::col#6 mode_8bpppixelcell::@4/(byte) mode_8bpppixelcell::col#7 )
  (byte*) mode_8bpppixelcell::gfxb#5 ← phi( mode_8bpppixelcell::@12/(byte*) mode_8bpppixelcell::gfxb#6 mode_8bpppixelcell::@4/(byte*) mode_8bpppixelcell::gfxb#7 )
  (byte*) mode_8bpppixelcell::chargen#2 ← phi( mode_8bpppixelcell::@12/(byte*) mode_8bpppixelcell::chargen#3 mode_8bpppixelcell::@4/(byte*) mode_8bpppixelcell::chargen#4 )
  (byte) mode_8bpppixelcell::bits#0 ← *((byte*) mode_8bpppixelcell::chargen#2)
  (byte*) mode_8bpppixelcell::chargen#1 ← ++ (byte*) mode_8bpppixelcell::chargen#2
  (byte) mode_8bpppixelcell::cp#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_8bpppixelcell::@6
mode_8bpppixelcell::@6: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@5 mode_8bpppixelcell::@7
  (byte) dtv_control#219 ← phi( mode_8bpppixelcell::@5/(byte) dtv_control#234 mode_8bpppixelcell::@7/(byte) dtv_control#203 )
  (byte) mode_8bpppixelcell::ch#6 ← phi( mode_8bpppixelcell::@5/(byte) mode_8bpppixelcell::ch#7 mode_8bpppixelcell::@7/(byte) mode_8bpppixelcell::ch#4 )
  (byte*) mode_8bpppixelcell::chargen#8 ← phi( mode_8bpppixelcell::@5/(byte*) mode_8bpppixelcell::chargen#1 mode_8bpppixelcell::@7/(byte*) mode_8bpppixelcell::chargen#6 )
  (byte) mode_8bpppixelcell::cr#5 ← phi( mode_8bpppixelcell::@5/(byte) mode_8bpppixelcell::cr#6 mode_8bpppixelcell::@7/(byte) mode_8bpppixelcell::cr#3 )
  (byte) mode_8bpppixelcell::cp#4 ← phi( mode_8bpppixelcell::@5/(byte) mode_8bpppixelcell::cp#0 mode_8bpppixelcell::@7/(byte) mode_8bpppixelcell::cp#1 )
  (byte) mode_8bpppixelcell::col#4 ← phi( mode_8bpppixelcell::@5/(byte) mode_8bpppixelcell::col#5 mode_8bpppixelcell::@7/(byte) mode_8bpppixelcell::col#1 )
  (byte*) mode_8bpppixelcell::gfxb#4 ← phi( mode_8bpppixelcell::@5/(byte*) mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::@7/(byte*) mode_8bpppixelcell::gfxb#1 )
  (byte) mode_8bpppixelcell::bits#2 ← phi( mode_8bpppixelcell::@5/(byte) mode_8bpppixelcell::bits#0 mode_8bpppixelcell::@7/(byte) mode_8bpppixelcell::bits#1 )
  (byte) mode_8bpppixelcell::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) mode_8bpppixelcell::$19 ← (byte) mode_8bpppixelcell::bits#2 & (byte/word/signed word/dword/signed dword) $80
  (bool~) mode_8bpppixelcell::$20 ← (byte~) mode_8bpppixelcell::$19 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mode_8bpppixelcell::$21 ← ! (bool~) mode_8bpppixelcell::$20
  if((bool~) mode_8bpppixelcell::$21) goto mode_8bpppixelcell::@7
  to:mode_8bpppixelcell::@11
mode_8bpppixelcell::@7: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@11 mode_8bpppixelcell::@6
  (byte) dtv_control#203 ← phi( mode_8bpppixelcell::@11/(byte) dtv_control#218 mode_8bpppixelcell::@6/(byte) dtv_control#219 )
  (byte) mode_8bpppixelcell::ch#4 ← phi( mode_8bpppixelcell::@11/(byte) mode_8bpppixelcell::ch#5 mode_8bpppixelcell::@6/(byte) mode_8bpppixelcell::ch#6 )
  (byte*) mode_8bpppixelcell::chargen#6 ← phi( mode_8bpppixelcell::@11/(byte*) mode_8bpppixelcell::chargen#7 mode_8bpppixelcell::@6/(byte*) mode_8bpppixelcell::chargen#8 )
  (byte) mode_8bpppixelcell::cr#3 ← phi( mode_8bpppixelcell::@11/(byte) mode_8bpppixelcell::cr#4 mode_8bpppixelcell::@6/(byte) mode_8bpppixelcell::cr#5 )
  (byte) mode_8bpppixelcell::cp#2 ← phi( mode_8bpppixelcell::@11/(byte) mode_8bpppixelcell::cp#3 mode_8bpppixelcell::@6/(byte) mode_8bpppixelcell::cp#4 )
  (byte) mode_8bpppixelcell::col#2 ← phi( mode_8bpppixelcell::@11/(byte) mode_8bpppixelcell::col#3 mode_8bpppixelcell::@6/(byte) mode_8bpppixelcell::col#4 )
  (byte) mode_8bpppixelcell::bits#3 ← phi( mode_8bpppixelcell::@11/(byte) mode_8bpppixelcell::bits#4 mode_8bpppixelcell::@6/(byte) mode_8bpppixelcell::bits#2 )
  (byte*) mode_8bpppixelcell::gfxb#2 ← phi( mode_8bpppixelcell::@11/(byte*) mode_8bpppixelcell::gfxb#3 mode_8bpppixelcell::@6/(byte*) mode_8bpppixelcell::gfxb#4 )
  (byte) mode_8bpppixelcell::c#2 ← phi( mode_8bpppixelcell::@11/(byte) mode_8bpppixelcell::c#1 mode_8bpppixelcell::@6/(byte) mode_8bpppixelcell::c#0 )
  *((byte*) mode_8bpppixelcell::gfxb#2) ← (byte) mode_8bpppixelcell::c#2
  (byte*) mode_8bpppixelcell::gfxb#1 ← ++ (byte*) mode_8bpppixelcell::gfxb#2
  (byte~) mode_8bpppixelcell::$22 ← (byte) mode_8bpppixelcell::bits#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) mode_8bpppixelcell::bits#1 ← (byte~) mode_8bpppixelcell::$22
  (byte) mode_8bpppixelcell::col#1 ← ++ (byte) mode_8bpppixelcell::col#2
  (byte) mode_8bpppixelcell::cp#1 ← (byte) mode_8bpppixelcell::cp#2 + rangenext(0,7)
  (bool~) mode_8bpppixelcell::$23 ← (byte) mode_8bpppixelcell::cp#1 != rangelast(0,7)
  if((bool~) mode_8bpppixelcell::$23) goto mode_8bpppixelcell::@6
  to:mode_8bpppixelcell::@12
mode_8bpppixelcell::@11: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@6
  (byte) dtv_control#218 ← phi( mode_8bpppixelcell::@6/(byte) dtv_control#219 )
  (byte) mode_8bpppixelcell::ch#5 ← phi( mode_8bpppixelcell::@6/(byte) mode_8bpppixelcell::ch#6 )
  (byte*) mode_8bpppixelcell::chargen#7 ← phi( mode_8bpppixelcell::@6/(byte*) mode_8bpppixelcell::chargen#8 )
  (byte) mode_8bpppixelcell::cr#4 ← phi( mode_8bpppixelcell::@6/(byte) mode_8bpppixelcell::cr#5 )
  (byte) mode_8bpppixelcell::cp#3 ← phi( mode_8bpppixelcell::@6/(byte) mode_8bpppixelcell::cp#4 )
  (byte) mode_8bpppixelcell::bits#4 ← phi( mode_8bpppixelcell::@6/(byte) mode_8bpppixelcell::bits#2 )
  (byte*) mode_8bpppixelcell::gfxb#3 ← phi( mode_8bpppixelcell::@6/(byte*) mode_8bpppixelcell::gfxb#4 )
  (byte) mode_8bpppixelcell::col#3 ← phi( mode_8bpppixelcell::@6/(byte) mode_8bpppixelcell::col#4 )
  (byte) mode_8bpppixelcell::c#1 ← (byte) mode_8bpppixelcell::col#3
  to:mode_8bpppixelcell::@7
mode_8bpppixelcell::@12: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@7
  (byte) dtv_control#187 ← phi( mode_8bpppixelcell::@7/(byte) dtv_control#203 )
  (byte) mode_8bpppixelcell::col#6 ← phi( mode_8bpppixelcell::@7/(byte) mode_8bpppixelcell::col#1 )
  (byte*) mode_8bpppixelcell::gfxb#6 ← phi( mode_8bpppixelcell::@7/(byte*) mode_8bpppixelcell::gfxb#1 )
  (byte) mode_8bpppixelcell::ch#3 ← phi( mode_8bpppixelcell::@7/(byte) mode_8bpppixelcell::ch#4 )
  (byte*) mode_8bpppixelcell::chargen#3 ← phi( mode_8bpppixelcell::@7/(byte*) mode_8bpppixelcell::chargen#6 )
  (byte) mode_8bpppixelcell::cr#2 ← phi( mode_8bpppixelcell::@7/(byte) mode_8bpppixelcell::cr#3 )
  (byte) mode_8bpppixelcell::cr#1 ← (byte) mode_8bpppixelcell::cr#2 + rangenext(0,7)
  (bool~) mode_8bpppixelcell::$24 ← (byte) mode_8bpppixelcell::cr#1 != rangelast(0,7)
  if((bool~) mode_8bpppixelcell::$24) goto mode_8bpppixelcell::@5
  to:mode_8bpppixelcell::@13
mode_8bpppixelcell::@13: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@12
  (byte) mode_8bpppixelcell::col#8 ← phi( mode_8bpppixelcell::@12/(byte) mode_8bpppixelcell::col#6 )
  (byte*) mode_8bpppixelcell::gfxb#8 ← phi( mode_8bpppixelcell::@12/(byte*) mode_8bpppixelcell::gfxb#6 )
  (byte) dtv_control#159 ← phi( mode_8bpppixelcell::@12/(byte) dtv_control#187 )
  (byte*) mode_8bpppixelcell::chargen#5 ← phi( mode_8bpppixelcell::@12/(byte*) mode_8bpppixelcell::chargen#3 )
  (byte) mode_8bpppixelcell::ch#2 ← phi( mode_8bpppixelcell::@12/(byte) mode_8bpppixelcell::ch#3 )
  (byte) mode_8bpppixelcell::ch#1 ← (byte) mode_8bpppixelcell::ch#2 + rangenext(0,$ff)
  (bool~) mode_8bpppixelcell::$25 ← (byte) mode_8bpppixelcell::ch#1 != rangelast(0,$ff)
  if((bool~) mode_8bpppixelcell::$25) goto mode_8bpppixelcell::@4
  to:mode_8bpppixelcell::@14
mode_8bpppixelcell::@14: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@13
  (byte) dtv_control#127 ← phi( mode_8bpppixelcell::@13/(byte) dtv_control#159 )
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_IO#0
  call mode_ctrl 
  to:mode_8bpppixelcell::@15
mode_8bpppixelcell::@15: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@14
  (byte) dtv_control#93 ← phi( mode_8bpppixelcell::@14/(byte) dtv_control#16 )
  (byte) dtv_control#49 ← (byte) dtv_control#93
  to:mode_8bpppixelcell::@return
mode_8bpppixelcell::@return: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@15
  (byte) dtv_control#94 ← phi( mode_8bpppixelcell::@15/(byte) dtv_control#49 )
  (byte) dtv_control#50 ← (byte) dtv_control#94
  return 
  to:@return
mode_8bppchunkybmm: scope:[mode_8bppchunkybmm]  from menu::@44
  (dword) mode_8bppchunkybmm::PLANEB#0 ← (dword/signed dword) $20000
  (byte~) mode_8bppchunkybmm::$0 ← (byte) DTV_HIGHCOLOR#0 | (byte) DTV_LINEAR#0
  (byte~) mode_8bppchunkybmm::$1 ← (byte~) mode_8bppchunkybmm::$0 | (byte) DTV_CHUNKY#0
  (byte~) mode_8bppchunkybmm::$2 ← (byte~) mode_8bppchunkybmm::$1 | (byte) DTV_COLORRAM_OFF#0
  (byte) dtv_control#51 ← (byte~) mode_8bppchunkybmm::$2
  (byte~) mode_8bppchunkybmm::$3 ← (byte) DTV_HIGHCOLOR#0 | (byte) DTV_LINEAR#0
  (byte~) mode_8bppchunkybmm::$4 ← (byte~) mode_8bppchunkybmm::$3 | (byte) DTV_CHUNKY#0
  (byte~) mode_8bppchunkybmm::$5 ← (byte~) mode_8bppchunkybmm::$4 | (byte) DTV_COLORRAM_OFF#0
  *((byte*) DTV_CONTROL#0) ← (byte~) mode_8bppchunkybmm::$5
  (byte~) mode_8bppchunkybmm::$6 ← (byte) VIC_ECM#0 | (byte) VIC_DEN#0
  (byte~) mode_8bppchunkybmm::$7 ← (byte~) mode_8bppchunkybmm::$6 | (byte) VIC_RSEL#0
  (byte/word/dword~) mode_8bppchunkybmm::$8 ← (byte~) mode_8bppchunkybmm::$7 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) mode_8bppchunkybmm::$8
  (byte~) mode_8bppchunkybmm::$9 ← (byte) VIC_MCM#0 | (byte) VIC_CSEL#0
  *((byte*) VIC_CONTROL2#0) ← (byte~) mode_8bppchunkybmm::$9
  (word~) mode_8bppchunkybmm::$10 ← < (dword) mode_8bppchunkybmm::PLANEB#0
  (byte~) mode_8bppchunkybmm::$11 ← < (word~) mode_8bppchunkybmm::$10
  *((byte*) DTV_PLANEB_START_LO#0) ← (byte~) mode_8bppchunkybmm::$11
  (word~) mode_8bppchunkybmm::$12 ← < (dword) mode_8bppchunkybmm::PLANEB#0
  (byte~) mode_8bppchunkybmm::$13 ← > (word~) mode_8bppchunkybmm::$12
  *((byte*) DTV_PLANEB_START_MI#0) ← (byte~) mode_8bppchunkybmm::$13
  (word~) mode_8bppchunkybmm::$14 ← > (dword) mode_8bppchunkybmm::PLANEB#0
  (byte~) mode_8bppchunkybmm::$15 ← < (word~) mode_8bppchunkybmm::$14
  *((byte*) DTV_PLANEB_START_HI#0) ← (byte~) mode_8bppchunkybmm::$15
  *((byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 8
  *((byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) mode_8bppchunkybmm::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_8bppchunkybmm::@1
mode_8bppchunkybmm::@1: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm mode_8bppchunkybmm::@1
  (byte) dtv_control#263 ← phi( mode_8bppchunkybmm/(byte) dtv_control#51 mode_8bppchunkybmm::@1/(byte) dtv_control#263 )
  (byte) mode_8bppchunkybmm::i#2 ← phi( mode_8bppchunkybmm/(byte) mode_8bppchunkybmm::i#0 mode_8bppchunkybmm::@1/(byte) mode_8bppchunkybmm::i#1 )
  *((byte*) DTV_PALETTE#0 + (byte) mode_8bppchunkybmm::i#2) ← (byte) mode_8bppchunkybmm::i#2
  (byte) mode_8bppchunkybmm::i#1 ← (byte) mode_8bppchunkybmm::i#2 + rangenext(0,$f)
  (bool~) mode_8bppchunkybmm::$16 ← (byte) mode_8bppchunkybmm::i#1 != rangelast(0,$f)
  if((bool~) mode_8bppchunkybmm::$16) goto mode_8bppchunkybmm::@1
  to:mode_8bppchunkybmm::@5
mode_8bppchunkybmm::@5: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@1
  (byte) dtv_control#254 ← phi( mode_8bppchunkybmm::@1/(byte) dtv_control#263 )
  (dword~) mode_8bppchunkybmm::$17 ← (dword) mode_8bppchunkybmm::PLANEB#0 / (word/signed word/dword/signed dword) $4000
  (byte~) mode_8bppchunkybmm::$18 ← ((byte)) (dword~) mode_8bppchunkybmm::$17
  (byte) mode_8bppchunkybmm::gfxbCpuBank#0 ← (byte~) mode_8bppchunkybmm::$18
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#0 ← (byte) mode_8bppchunkybmm::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:mode_8bppchunkybmm::@9
mode_8bppchunkybmm::@9: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@5
  (byte) dtv_control#245 ← phi( mode_8bppchunkybmm::@5/(byte) dtv_control#254 )
  (byte) mode_8bppchunkybmm::gfxbCpuBank#3 ← phi( mode_8bppchunkybmm::@5/(byte) mode_8bppchunkybmm::gfxbCpuBank#0 )
  (byte) mode_8bppchunkybmm::gfxbCpuBank#1 ← ++ (byte) mode_8bppchunkybmm::gfxbCpuBank#3
  (byte*) mode_8bppchunkybmm::gfxb#0 ← ((byte*)) (word/signed word/dword/signed dword) $4000
  (byte) mode_8bppchunkybmm::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_8bppchunkybmm::@2
mode_8bppchunkybmm::@2: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@7 mode_8bppchunkybmm::@9
  (byte) dtv_control#235 ← phi( mode_8bppchunkybmm::@7/(byte) dtv_control#188 mode_8bppchunkybmm::@9/(byte) dtv_control#245 )
  (byte) mode_8bppchunkybmm::gfxbCpuBank#7 ← phi( mode_8bppchunkybmm::@7/(byte) mode_8bppchunkybmm::gfxbCpuBank#9 mode_8bppchunkybmm::@9/(byte) mode_8bppchunkybmm::gfxbCpuBank#1 )
  (byte) mode_8bppchunkybmm::y#6 ← phi( mode_8bppchunkybmm::@7/(byte) mode_8bppchunkybmm::y#1 mode_8bppchunkybmm::@9/(byte) mode_8bppchunkybmm::y#0 )
  (byte*) mode_8bppchunkybmm::gfxb#5 ← phi( mode_8bppchunkybmm::@7/(byte*) mode_8bppchunkybmm::gfxb#6 mode_8bppchunkybmm::@9/(byte*) mode_8bppchunkybmm::gfxb#0 )
  (word) mode_8bppchunkybmm::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_8bppchunkybmm::@3
mode_8bppchunkybmm::@3: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@2 mode_8bppchunkybmm::@4
  (byte) dtv_control#221 ← phi( mode_8bppchunkybmm::@2/(byte) dtv_control#235 mode_8bppchunkybmm::@4/(byte) dtv_control#204 )
  (byte) mode_8bppchunkybmm::gfxbCpuBank#6 ← phi( mode_8bppchunkybmm::@2/(byte) mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::@4/(byte) mode_8bppchunkybmm::gfxbCpuBank#8 )
  (byte) mode_8bppchunkybmm::y#5 ← phi( mode_8bppchunkybmm::@2/(byte) mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::@4/(byte) mode_8bppchunkybmm::y#2 )
  (word) mode_8bppchunkybmm::x#4 ← phi( mode_8bppchunkybmm::@2/(word) mode_8bppchunkybmm::x#0 mode_8bppchunkybmm::@4/(word) mode_8bppchunkybmm::x#1 )
  (byte*) mode_8bppchunkybmm::gfxb#3 ← phi( mode_8bppchunkybmm::@2/(byte*) mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::@4/(byte*) mode_8bppchunkybmm::gfxb#1 )
  (bool~) mode_8bppchunkybmm::$20 ← (byte*) mode_8bppchunkybmm::gfxb#3 == (word/dword/signed dword) $8000
  (bool~) mode_8bppchunkybmm::$21 ← ! (bool~) mode_8bppchunkybmm::$20
  if((bool~) mode_8bppchunkybmm::$21) goto mode_8bppchunkybmm::@4
  to:mode_8bppchunkybmm::@6
mode_8bppchunkybmm::@4: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@10 mode_8bppchunkybmm::@3
  (byte) dtv_control#204 ← phi( mode_8bppchunkybmm::@10/(byte) dtv_control#220 mode_8bppchunkybmm::@3/(byte) dtv_control#221 )
  (byte) mode_8bppchunkybmm::gfxbCpuBank#8 ← phi( mode_8bppchunkybmm::@10/(byte) mode_8bppchunkybmm::gfxbCpuBank#2 mode_8bppchunkybmm::@3/(byte) mode_8bppchunkybmm::gfxbCpuBank#6 )
  (byte*) mode_8bppchunkybmm::gfxb#4 ← phi( mode_8bppchunkybmm::@10/(byte*) mode_8bppchunkybmm::gfxb#2 mode_8bppchunkybmm::@3/(byte*) mode_8bppchunkybmm::gfxb#3 )
  (byte) mode_8bppchunkybmm::y#2 ← phi( mode_8bppchunkybmm::@10/(byte) mode_8bppchunkybmm::y#4 mode_8bppchunkybmm::@3/(byte) mode_8bppchunkybmm::y#5 )
  (word) mode_8bppchunkybmm::x#2 ← phi( mode_8bppchunkybmm::@10/(word) mode_8bppchunkybmm::x#3 mode_8bppchunkybmm::@3/(word) mode_8bppchunkybmm::x#4 )
  (word~) mode_8bppchunkybmm::$23 ← (word) mode_8bppchunkybmm::x#2 + (byte) mode_8bppchunkybmm::y#2
  (byte~) mode_8bppchunkybmm::$24 ← ((byte)) (word~) mode_8bppchunkybmm::$23
  (byte) mode_8bppchunkybmm::c#0 ← (byte~) mode_8bppchunkybmm::$24
  *((byte*) mode_8bppchunkybmm::gfxb#4) ← (byte) mode_8bppchunkybmm::c#0
  (byte*) mode_8bppchunkybmm::gfxb#1 ← ++ (byte*) mode_8bppchunkybmm::gfxb#4
  (word) mode_8bppchunkybmm::x#1 ← (word) mode_8bppchunkybmm::x#2 + rangenext(0,$13f)
  (bool~) mode_8bppchunkybmm::$25 ← (word) mode_8bppchunkybmm::x#1 != rangelast(0,$13f)
  if((bool~) mode_8bppchunkybmm::$25) goto mode_8bppchunkybmm::@3
  to:mode_8bppchunkybmm::@7
mode_8bppchunkybmm::@6: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@3
  (byte) dtv_control#236 ← phi( mode_8bppchunkybmm::@3/(byte) dtv_control#221 )
  (byte) mode_8bppchunkybmm::y#7 ← phi( mode_8bppchunkybmm::@3/(byte) mode_8bppchunkybmm::y#5 )
  (word) mode_8bppchunkybmm::x#5 ← phi( mode_8bppchunkybmm::@3/(word) mode_8bppchunkybmm::x#4 )
  (byte) mode_8bppchunkybmm::gfxbCpuBank#4 ← phi( mode_8bppchunkybmm::@3/(byte) mode_8bppchunkybmm::gfxbCpuBank#6 )
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) mode_8bppchunkybmm::gfxbCpuBank#4
  call dtvSetCpuBankSegment1 
  to:mode_8bppchunkybmm::@10
mode_8bppchunkybmm::@10: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@6
  (byte) dtv_control#220 ← phi( mode_8bppchunkybmm::@6/(byte) dtv_control#236 )
  (byte) mode_8bppchunkybmm::y#4 ← phi( mode_8bppchunkybmm::@6/(byte) mode_8bppchunkybmm::y#7 )
  (word) mode_8bppchunkybmm::x#3 ← phi( mode_8bppchunkybmm::@6/(word) mode_8bppchunkybmm::x#5 )
  (byte) mode_8bppchunkybmm::gfxbCpuBank#5 ← phi( mode_8bppchunkybmm::@6/(byte) mode_8bppchunkybmm::gfxbCpuBank#4 )
  (byte) mode_8bppchunkybmm::gfxbCpuBank#2 ← ++ (byte) mode_8bppchunkybmm::gfxbCpuBank#5
  (byte*) mode_8bppchunkybmm::gfxb#2 ← ((byte*)) (word/signed word/dword/signed dword) $4000
  to:mode_8bppchunkybmm::@4
mode_8bppchunkybmm::@7: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@4
  (byte) dtv_control#188 ← phi( mode_8bppchunkybmm::@4/(byte) dtv_control#204 )
  (byte) mode_8bppchunkybmm::gfxbCpuBank#9 ← phi( mode_8bppchunkybmm::@4/(byte) mode_8bppchunkybmm::gfxbCpuBank#8 )
  (byte*) mode_8bppchunkybmm::gfxb#6 ← phi( mode_8bppchunkybmm::@4/(byte*) mode_8bppchunkybmm::gfxb#1 )
  (byte) mode_8bppchunkybmm::y#3 ← phi( mode_8bppchunkybmm::@4/(byte) mode_8bppchunkybmm::y#2 )
  (byte) mode_8bppchunkybmm::y#1 ← (byte) mode_8bppchunkybmm::y#3 + rangenext(0,$c7)
  (bool~) mode_8bppchunkybmm::$26 ← (byte) mode_8bppchunkybmm::y#1 != rangelast(0,$c7)
  if((bool~) mode_8bppchunkybmm::$26) goto mode_8bppchunkybmm::@2
  to:mode_8bppchunkybmm::@8
mode_8bppchunkybmm::@8: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@7
  (byte) dtv_control#160 ← phi( mode_8bppchunkybmm::@7/(byte) dtv_control#188 )
  (byte/signed byte/word/signed word/dword/signed dword~) mode_8bppchunkybmm::$27 ← (word/signed word/dword/signed dword) $4000 / (word/signed word/dword/signed dword) $4000
  (byte~) mode_8bppchunkybmm::$28 ← ((byte)) (byte/signed byte/word/signed word/dword/signed dword~) mode_8bppchunkybmm::$27
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 ← (byte~) mode_8bppchunkybmm::$28
  call dtvSetCpuBankSegment1 
  to:mode_8bppchunkybmm::@11
mode_8bppchunkybmm::@11: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@8
  (byte) dtv_control#128 ← phi( mode_8bppchunkybmm::@8/(byte) dtv_control#160 )
  call mode_ctrl 
  to:mode_8bppchunkybmm::@12
mode_8bppchunkybmm::@12: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@11
  (byte) dtv_control#95 ← phi( mode_8bppchunkybmm::@11/(byte) dtv_control#16 )
  (byte) dtv_control#52 ← (byte) dtv_control#95
  to:mode_8bppchunkybmm::@return
mode_8bppchunkybmm::@return: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@12
  (byte) dtv_control#96 ← phi( mode_8bppchunkybmm::@12/(byte) dtv_control#52 )
  (byte) dtv_control#53 ← (byte) dtv_control#96
  return 
  to:@return
@54: scope:[]  from @41
  (byte) dtv_control#129 ← phi( @41/(byte) dtv_control#15 )
  (byte*) print_char_cursor#51 ← phi( @41/(byte*) print_char_cursor#70 )
  (byte*) print_line_cursor#49 ← phi( @41/(byte*) print_line_cursor#67 )
  (byte*) print_screen#33 ← phi( @41/(byte*) print_screen#50 )
  call main 
  to:@55
@55: scope:[]  from @54
  (byte) dtv_control#97 ← phi( @54/(byte) dtv_control#1 )
  (byte*) print_char_cursor#30 ← phi( @54/(byte*) print_char_cursor#11 )
  (byte*) print_line_cursor#29 ← phi( @54/(byte*) print_line_cursor#10 )
  (byte*) print_screen#16 ← phi( @54/(byte*) print_screen#4 )
  (byte*) print_screen#7 ← (byte*) print_screen#16
  (byte*) print_line_cursor#15 ← (byte*) print_line_cursor#29
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#30
  (byte) dtv_control#54 ← (byte) dtv_control#97
  to:@end
@end: scope:[]  from @55

SYMBOL TABLE SSA
(byte~) $0
(string~) $1
(string~) $10
(string~) $11
(string~) $12
(string~) $13
(string~) $14
(string~) $15
(string~) $16
(string~) $17
(string~) $18
(string~) $19
(string~) $2
(string~) $20
(const string) $21 = (string) "0123456789abcdef"
(const string) $22 = (string) "C64DTV Graphics Modes            CCLHBME@"
(const string) $23 = (string) "                                 OHIIMCC@"
(const string) $24 = (string) "                                 LUNCMMM@"
(const string) $25 = (string) "----------------------------------------@"
(const string) $26 = (string) "1. Standard Char             (V) 0000000@"
(const string) $27 = (string) "2. Extended Color Char       (V) 0000001@"
(const string) $28 = (string) "3. Multicolor Char           (V) 0000010@"
(const string) $29 = (string) "4. Standard Bitmap           (V) 0000100@"
(string~) $3
(const string) $30 = (string) "5. Multicolor Bitmap         (V) 0000110@"
(const string) $31 = (string) "6. High Color Standard Char  (H) 0001000@"
(const string) $32 = (string) "7. High Extended Color Char  (H) 0001001@"
(const string) $33 = (string) "8. High Multicolor Char      (H) 0001010@"
(const string) $34 = (string) "9. High Multicolor Bitmap    (H) 0001110@"
(const string) $35 = (string) "a. Sixs Fred 2               (D) 0010111@"
(const string) $36 = (string) "b. Two Plane Bitmap          (D) 0011101@"
(const string) $37 = (string) "c. Sixs Fred (2 Plane MC BM) (D) 0011111@"
(const string) $38 = (string) "d. 8bpp Pixel Cell           (D) 0111011@"
(const string) $39 = (string) "e. Chunky 8bpp Bitmap        (D) 1111011@"
(string~) $4
(const string) $40 = (string) "----------------------------------------@"
(const string) $41 = (string) "    (V) vicII (H) vicII+hicol (D) c64dtv@"
(const string) $42 = (string) "@"
(string~) $5
(string~) $6
(string~) $7
(string~) $8
(string~) $9
(label) @17
(label) @24
(label) @28
(label) @31
(label) @4
(label) @40
(label) @41
(label) @5
(label) @54
(label) @55
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BGCOL1
(byte*) BGCOL1#0
(byte*) BGCOL2
(byte*) BGCOL2#0
(byte*) BGCOL3
(byte*) BGCOL3#0
(byte*) BGCOL4
(byte*) BGCOL4#0
(byte) BLACK
(byte) BLACK#0
(byte) BLUE
(byte) BLUE#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte) BROWN
(byte) BROWN#0
(byte*) CHARGEN
(byte*) CHARGEN#0
(byte*) CIA1_INTERRUPT
(byte*) CIA1_INTERRUPT#0
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A#0
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_A_DDR#0
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B#0
(byte*) CIA1_PORT_B_DDR
(byte*) CIA1_PORT_B_DDR#0
(byte*) CIA2_INTERRUPT
(byte*) CIA2_INTERRUPT#0
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A#0
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_A_DDR#0
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B#0
(byte*) CIA2_PORT_B_DDR
(byte*) CIA2_PORT_B_DDR#0
(byte) CIA_INTERRUPT_CLEAR
(byte) CIA_INTERRUPT_CLEAR#0
(byte*) COLS
(byte*) COLS#0
(byte) CYAN
(byte) CYAN#0
(byte*) D011
(byte*) D011#0
(byte*) D016
(byte*) D016#0
(byte*) D018
(byte*) D018#0
(byte) DARK_GREY
(byte) DARK_GREY#0
(byte) DTV_BADLINE_OFF
(byte) DTV_BADLINE_OFF#0
(byte*) DTV_BLITTER_ALU
(byte*) DTV_BLITTER_ALU#0
(byte*) DTV_BLITTER_CONTROL
(byte*) DTV_BLITTER_CONTROL#0
(byte*) DTV_BLITTER_CONTROL2
(byte*) DTV_BLITTER_CONTROL2#0
(byte*) DTV_BLITTER_DEST_HI
(byte*) DTV_BLITTER_DEST_HI#0
(byte*) DTV_BLITTER_DEST_LIN_HI
(byte*) DTV_BLITTER_DEST_LIN_HI#0
(byte*) DTV_BLITTER_DEST_LIN_LO
(byte*) DTV_BLITTER_DEST_LIN_LO#0
(byte*) DTV_BLITTER_DEST_LO
(byte*) DTV_BLITTER_DEST_LO#0
(byte*) DTV_BLITTER_DEST_MI
(byte*) DTV_BLITTER_DEST_MI#0
(byte*) DTV_BLITTER_DEST_MOD_HI
(byte*) DTV_BLITTER_DEST_MOD_HI#0
(byte*) DTV_BLITTER_DEST_MOD_LO
(byte*) DTV_BLITTER_DEST_MOD_LO#0
(byte*) DTV_BLITTER_DEST_STEP
(byte*) DTV_BLITTER_DEST_STEP#0
(byte*) DTV_BLITTER_LEN_HI
(byte*) DTV_BLITTER_LEN_HI#0
(byte*) DTV_BLITTER_LEN_LO
(byte*) DTV_BLITTER_LEN_LO#0
(byte*) DTV_BLITTER_SRCA_HI
(byte*) DTV_BLITTER_SRCA_HI#0
(byte*) DTV_BLITTER_SRCA_LIN_HI
(byte*) DTV_BLITTER_SRCA_LIN_HI#0
(byte*) DTV_BLITTER_SRCA_LIN_LO
(byte*) DTV_BLITTER_SRCA_LIN_LO#0
(byte*) DTV_BLITTER_SRCA_LO
(byte*) DTV_BLITTER_SRCA_LO#0
(byte*) DTV_BLITTER_SRCA_MI
(byte*) DTV_BLITTER_SRCA_MI#0
(byte*) DTV_BLITTER_SRCA_MOD_HI
(byte*) DTV_BLITTER_SRCA_MOD_HI#0
(byte*) DTV_BLITTER_SRCA_MOD_LO
(byte*) DTV_BLITTER_SRCA_MOD_LO#0
(byte*) DTV_BLITTER_SRCA_STEP
(byte*) DTV_BLITTER_SRCA_STEP#0
(byte*) DTV_BLITTER_SRCB_HI
(byte*) DTV_BLITTER_SRCB_HI#0
(byte*) DTV_BLITTER_SRCB_LIN_HI
(byte*) DTV_BLITTER_SRCB_LIN_HI#0
(byte*) DTV_BLITTER_SRCB_LIN_LO
(byte*) DTV_BLITTER_SRCB_LIN_LO#0
(byte*) DTV_BLITTER_SRCB_LO
(byte*) DTV_BLITTER_SRCB_LO#0
(byte*) DTV_BLITTER_SRCB_MI
(byte*) DTV_BLITTER_SRCB_MI#0
(byte*) DTV_BLITTER_SRCB_MOD_HI
(byte*) DTV_BLITTER_SRCB_MOD_HI#0
(byte*) DTV_BLITTER_SRCB_MOD_LO
(byte*) DTV_BLITTER_SRCB_MOD_LO#0
(byte*) DTV_BLITTER_SRCB_STEP
(byte*) DTV_BLITTER_SRCB_STEP#0
(byte*) DTV_BLITTER_TRANSPARANCY
(byte*) DTV_BLITTER_TRANSPARANCY#0
(byte) DTV_BLIT_ADD
(byte) DTV_BLIT_ADD#0
(byte) DTV_BLIT_AND
(byte) DTV_BLIT_AND#0
(byte) DTV_BLIT_CIA_IRQ
(byte) DTV_BLIT_CIA_IRQ#0
(byte) DTV_BLIT_CLEAR_IRQ
(byte) DTV_BLIT_CLEAR_IRQ#0
(byte) DTV_BLIT_DEST_CONT
(byte) DTV_BLIT_DEST_CONT#0
(byte) DTV_BLIT_DEST_FWD
(byte) DTV_BLIT_DEST_FWD#0
(byte) DTV_BLIT_DISABLE_B
(byte) DTV_BLIT_DISABLE_B#0
(byte) DTV_BLIT_FORCE_START
(byte) DTV_BLIT_FORCE_START#0
(byte) DTV_BLIT_IRQ_EN
(byte) DTV_BLIT_IRQ_EN#0
(byte) DTV_BLIT_NAND
(byte) DTV_BLIT_NAND#0
(byte) DTV_BLIT_NOR
(byte) DTV_BLIT_NOR#0
(byte) DTV_BLIT_OR
(byte) DTV_BLIT_OR#0
(byte) DTV_BLIT_SHIFT0
(byte) DTV_BLIT_SHIFT0#0
(byte) DTV_BLIT_SHIFT1
(byte) DTV_BLIT_SHIFT1#0
(byte) DTV_BLIT_SHIFT2
(byte) DTV_BLIT_SHIFT2#0
(byte) DTV_BLIT_SHIFT3
(byte) DTV_BLIT_SHIFT3#0
(byte) DTV_BLIT_SHIFT4
(byte) DTV_BLIT_SHIFT4#0
(byte) DTV_BLIT_SHIFT5
(byte) DTV_BLIT_SHIFT5#0
(byte) DTV_BLIT_SHIFT6
(byte) DTV_BLIT_SHIFT6#0
(byte) DTV_BLIT_SHIFT7
(byte) DTV_BLIT_SHIFT7#0
(byte) DTV_BLIT_SRCA_CONT
(byte) DTV_BLIT_SRCA_CONT#0
(byte) DTV_BLIT_SRCA_FWD
(byte) DTV_BLIT_SRCA_FWD#0
(byte) DTV_BLIT_SRCB_CONT
(byte) DTV_BLIT_SRCB_CONT#0
(byte) DTV_BLIT_SRCB_FWD
(byte) DTV_BLIT_SRCB_FWD#0
(byte) DTV_BLIT_STATUS_BUSY
(byte) DTV_BLIT_STATUS_BUSY#0
(byte) DTV_BLIT_STATUS_IRQ
(byte) DTV_BLIT_STATUS_IRQ#0
(byte) DTV_BLIT_SUB
(byte) DTV_BLIT_SUB#0
(byte) DTV_BLIT_TRANSPARANCY_NONE
(byte) DTV_BLIT_TRANSPARANCY_NONE#0
(byte) DTV_BLIT_VBLANK
(byte) DTV_BLIT_VBLANK#0
(byte) DTV_BLIT_VIC_IRQ
(byte) DTV_BLIT_VIC_IRQ#0
(byte) DTV_BLIT_WRITE_NONTRANSPARENT
(byte) DTV_BLIT_WRITE_NONTRANSPARENT#0
(byte) DTV_BLIT_WRITE_TRANSPARENT
(byte) DTV_BLIT_WRITE_TRANSPARENT#0
(byte) DTV_BLIT_XNOR
(byte) DTV_BLIT_XNOR#0
(byte) DTV_BLIT_XOR
(byte) DTV_BLIT_XOR#0
(byte) DTV_BORDER_OFF
(byte) DTV_BORDER_OFF#0
(byte) DTV_CHUNKY
(byte) DTV_CHUNKY#0
(byte) DTV_COLORRAM_OFF
(byte) DTV_COLORRAM_OFF#0
(dword) DTV_COLOR_BANK_DEFAULT
(dword) DTV_COLOR_BANK_DEFAULT#0
(byte*) DTV_COLOR_BANK_HI
(byte*) DTV_COLOR_BANK_HI#0
(byte*) DTV_COLOR_BANK_LO
(byte*) DTV_COLOR_BANK_LO#0
(byte*) DTV_CONTROL
(byte*) DTV_CONTROL#0
(byte*) DTV_FEATURE
(byte*) DTV_FEATURE#0
(byte) DTV_FEATURE_DISABLE_TIL_RESET
(byte) DTV_FEATURE_DISABLE_TIL_RESET#0
(byte) DTV_FEATURE_ENABLE
(byte) DTV_FEATURE_ENABLE#0
(byte*) DTV_GRAPHICS_HICOL_BANK
(byte*) DTV_GRAPHICS_HICOL_BANK#0
(byte*) DTV_GRAPHICS_VIC_BANK
(byte*) DTV_GRAPHICS_VIC_BANK#0
(byte) DTV_HIGHCOLOR
(byte) DTV_HIGHCOLOR#0
(byte) DTV_LINEAR
(byte) DTV_LINEAR#0
(byte) DTV_OVERSCAN
(byte) DTV_OVERSCAN#0
(byte*) DTV_PALETTE
(byte*) DTV_PALETTE#0
(byte[$10]) DTV_PALETTE_DEFAULT
(byte[$10]) DTV_PALETTE_DEFAULT#0
(byte*) DTV_PLANEA_MODULO_HI
(byte*) DTV_PLANEA_MODULO_HI#0
(byte*) DTV_PLANEA_MODULO_LO
(byte*) DTV_PLANEA_MODULO_LO#0
(byte*) DTV_PLANEA_START_HI
(byte*) DTV_PLANEA_START_HI#0
(byte*) DTV_PLANEA_START_LO
(byte*) DTV_PLANEA_START_LO#0
(byte*) DTV_PLANEA_START_MI
(byte*) DTV_PLANEA_START_MI#0
(byte*) DTV_PLANEA_STEP
(byte*) DTV_PLANEA_STEP#0
(byte*) DTV_PLANEB_MODULO_HI
(byte*) DTV_PLANEB_MODULO_HI#0
(byte*) DTV_PLANEB_MODULO_LO
(byte*) DTV_PLANEB_MODULO_LO#0
(byte*) DTV_PLANEB_START_HI
(byte*) DTV_PLANEB_START_HI#0
(byte*) DTV_PLANEB_START_LO
(byte*) DTV_PLANEB_START_LO#0
(byte*) DTV_PLANEB_START_MI
(byte*) DTV_PLANEB_START_MI#0
(byte*) DTV_PLANEB_STEP
(byte*) DTV_PLANEB_STEP#0
(byte*) DTV_SPRITE_BANK
(byte*) DTV_SPRITE_BANK#0
(byte) GREEN
(byte) GREEN#0
(byte) GREY
(byte) GREY#0
(void()**) HARDWARE_IRQ
(void()**) HARDWARE_IRQ#0
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_BG#0
(byte) IRQ_COLLISION_SPRITE
(byte) IRQ_COLLISION_SPRITE#0
(byte*) IRQ_ENABLE
(byte*) IRQ_ENABLE#0
(byte) IRQ_LIGHTPEN
(byte) IRQ_LIGHTPEN#0
(byte) IRQ_RASTER
(byte) IRQ_RASTER#0
(byte*) IRQ_STATUS
(byte*) IRQ_STATUS#0
(void()**) KERNEL_IRQ
(void()**) KERNEL_IRQ#0
(byte) KEY_0
(byte) KEY_0#0
(byte) KEY_1
(byte) KEY_1#0
(byte) KEY_2
(byte) KEY_2#0
(byte) KEY_3
(byte) KEY_3#0
(byte) KEY_4
(byte) KEY_4#0
(byte) KEY_5
(byte) KEY_5#0
(byte) KEY_6
(byte) KEY_6#0
(byte) KEY_7
(byte) KEY_7#0
(byte) KEY_8
(byte) KEY_8#0
(byte) KEY_9
(byte) KEY_9#0
(byte) KEY_A
(byte) KEY_A#0
(byte) KEY_ARROW_LEFT
(byte) KEY_ARROW_LEFT#0
(byte) KEY_ARROW_UP
(byte) KEY_ARROW_UP#0
(byte) KEY_ASTERISK
(byte) KEY_ASTERISK#0
(byte) KEY_AT
(byte) KEY_AT#0
(byte) KEY_B
(byte) KEY_B#0
(byte) KEY_C
(byte) KEY_C#0
(byte) KEY_COLON
(byte) KEY_COLON#0
(byte) KEY_COMMA
(byte) KEY_COMMA#0
(byte) KEY_COMMODORE
(byte) KEY_COMMODORE#0
(byte) KEY_CRSR_DOWN
(byte) KEY_CRSR_DOWN#0
(byte) KEY_CRSR_RIGHT
(byte) KEY_CRSR_RIGHT#0
(byte) KEY_CTRL
(byte) KEY_CTRL#0
(byte) KEY_D
(byte) KEY_D#0
(byte) KEY_DEL
(byte) KEY_DEL#0
(byte) KEY_DOT
(byte) KEY_DOT#0
(byte) KEY_E
(byte) KEY_E#0
(byte) KEY_EQUALS
(byte) KEY_EQUALS#0
(byte) KEY_F
(byte) KEY_F#0
(byte) KEY_F1
(byte) KEY_F1#0
(byte) KEY_F3
(byte) KEY_F3#0
(byte) KEY_F5
(byte) KEY_F5#0
(byte) KEY_F7
(byte) KEY_F7#0
(byte) KEY_G
(byte) KEY_G#0
(byte) KEY_H
(byte) KEY_H#0
(byte) KEY_HOME
(byte) KEY_HOME#0
(byte) KEY_I
(byte) KEY_I#0
(byte) KEY_J
(byte) KEY_J#0
(byte) KEY_K
(byte) KEY_K#0
(byte) KEY_L
(byte) KEY_L#0
(byte) KEY_LSHIFT
(byte) KEY_LSHIFT#0
(byte) KEY_M
(byte) KEY_M#0
(byte) KEY_MINUS
(byte) KEY_MINUS#0
(byte) KEY_MODIFIER_COMMODORE
(byte) KEY_MODIFIER_COMMODORE#0
(byte) KEY_MODIFIER_CTRL
(byte) KEY_MODIFIER_CTRL#0
(byte) KEY_MODIFIER_LSHIFT
(byte) KEY_MODIFIER_LSHIFT#0
(byte) KEY_MODIFIER_RSHIFT
(byte) KEY_MODIFIER_RSHIFT#0
(byte) KEY_MODIFIER_SHIFT
(byte) KEY_MODIFIER_SHIFT#0
(byte) KEY_N
(byte) KEY_N#0
(byte) KEY_O
(byte) KEY_O#0
(byte) KEY_P
(byte) KEY_P#0
(byte) KEY_PLUS
(byte) KEY_PLUS#0
(byte) KEY_POUND
(byte) KEY_POUND#0
(byte) KEY_Q
(byte) KEY_Q#0
(byte) KEY_R
(byte) KEY_R#0
(byte) KEY_RETURN
(byte) KEY_RETURN#0
(byte) KEY_RSHIFT
(byte) KEY_RSHIFT#0
(byte) KEY_RUNSTOP
(byte) KEY_RUNSTOP#0
(byte) KEY_S
(byte) KEY_S#0
(byte) KEY_SEMICOLON
(byte) KEY_SEMICOLON#0
(byte) KEY_SLASH
(byte) KEY_SLASH#0
(byte) KEY_SPACE
(byte) KEY_SPACE#0
(byte) KEY_T
(byte) KEY_T#0
(byte) KEY_U
(byte) KEY_U#0
(byte) KEY_V
(byte) KEY_V#0
(byte) KEY_W
(byte) KEY_W#0
(byte) KEY_X
(byte) KEY_X#0
(byte) KEY_Y
(byte) KEY_Y#0
(byte) KEY_Z
(byte) KEY_Z#0
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_X#0
(byte*) LIGHTPEN_Y
(byte*) LIGHTPEN_Y#0
(byte) LIGHT_BLUE
(byte) LIGHT_BLUE#0
(byte) LIGHT_GREEN
(byte) LIGHT_GREEN#0
(byte) LIGHT_GREY
(byte) LIGHT_GREY#0
(byte[]) MENU_TEXT
(byte[]) MENU_TEXT#0
(byte) ORANGE
(byte) ORANGE#0
(byte) PINK
(byte) PINK#0
(byte*) PROCPORT
(byte*) PROCPORT#0
(byte) PROCPORT_BASIC_KERNEL_IO
(byte) PROCPORT_BASIC_KERNEL_IO#0
(byte*) PROCPORT_DDR
(byte*) PROCPORT_DDR#0
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_DDR_MEMORY_MASK#0
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_KERNEL_IO#0
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_ALL#0
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_CHARROM#0
(byte) PROCPORT_RAM_IO
(byte) PROCPORT_RAM_IO#0
(byte) PURPLE
(byte) PURPLE#0
(byte*) RASTER
(byte*) RASTER#0
(byte) RED
(byte) RED#0
(byte*) SPRITES_COLS
(byte*) SPRITES_COLS#0
(byte*) SPRITES_ENABLE
(byte*) SPRITES_ENABLE#0
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_X#0
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_EXPAND_Y#0
(byte*) SPRITES_MC
(byte*) SPRITES_MC#0
(byte*) SPRITES_MC1
(byte*) SPRITES_MC1#0
(byte*) SPRITES_MC2
(byte*) SPRITES_MC2#0
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_PRIORITY#0
(byte*) SPRITES_XMSB
(byte*) SPRITES_XMSB#0
(byte*) SPRITES_XPOS
(byte*) SPRITES_XPOS#0
(byte*) SPRITES_YPOS
(byte*) SPRITES_YPOS#0
(word) SPRITE_PTRS
(word) SPRITE_PTRS#0
(byte) VIC_BMM
(byte) VIC_BMM#0
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL#0
(byte*) VIC_CONTROL2
(byte*) VIC_CONTROL2#0
(byte) VIC_CSEL
(byte) VIC_CSEL#0
(byte) VIC_DEN
(byte) VIC_DEN#0
(byte) VIC_ECM
(byte) VIC_ECM#0
(byte) VIC_MCM
(byte) VIC_MCM#0
(byte*) VIC_MEMORY
(byte*) VIC_MEMORY#0
(byte) VIC_RSEL
(byte) VIC_RSEL#0
(byte) VIC_RST8
(byte) VIC_RST8#0
(byte) WHITE
(byte) WHITE#0
(byte) YELLOW
(byte) YELLOW#0
(void()) bitmap_clear()
(byte*~) bitmap_clear::$0
(bool~) bitmap_clear::$1
(bool~) bitmap_clear::$2
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@3
(label) bitmap_clear::@return
(byte*) bitmap_clear::bitmap
(byte*) bitmap_clear::bitmap#0
(byte*) bitmap_clear::bitmap#1
(byte*) bitmap_clear::bitmap#2
(byte*) bitmap_clear::bitmap#3
(byte*) bitmap_clear::bitmap#4
(byte) bitmap_clear::x
(byte) bitmap_clear::x#0
(byte) bitmap_clear::x#1
(byte) bitmap_clear::x#2
(byte) bitmap_clear::y
(byte) bitmap_clear::y#0
(byte) bitmap_clear::y#1
(byte) bitmap_clear::y#2
(byte) bitmap_clear::y#3
(byte) bitmap_clear::y#4
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(byte~) bitmap_init::$0
(byte~) bitmap_init::$1
(byte~) bitmap_init::$10
(bool~) bitmap_init::$11
(bool~) bitmap_init::$12
(word/signed word/dword/signed dword~) bitmap_init::$13
(byte*~) bitmap_init::$14
(bool~) bitmap_init::$15
(byte~) bitmap_init::$2
(bool~) bitmap_init::$3
(bool~) bitmap_init::$4
(bool~) bitmap_init::$5
(byte~) bitmap_init::$6
(byte~) bitmap_init::$7
(byte~) bitmap_init::$8
(byte~) bitmap_init::$9
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@7
(label) bitmap_init::@return
(byte*) bitmap_init::bitmap
(byte*) bitmap_init::bitmap#0
(byte*) bitmap_init::bitmap#1
(byte*) bitmap_init::bitmap#2
(byte*) bitmap_init::bitmap#3
(byte*) bitmap_init::bitmap#4
(byte) bitmap_init::bits
(byte) bitmap_init::bits#0
(byte) bitmap_init::bits#1
(byte) bitmap_init::bits#2
(byte) bitmap_init::bits#3
(byte) bitmap_init::bits#4
(byte) bitmap_init::x
(byte) bitmap_init::x#0
(byte) bitmap_init::x#1
(byte) bitmap_init::x#2
(byte) bitmap_init::x#3
(byte) bitmap_init::x#4
(byte) bitmap_init::y
(byte) bitmap_init::y#0
(byte) bitmap_init::y#1
(byte) bitmap_init::y#2
(byte) bitmap_init::y#3
(byte) bitmap_init::y#4
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#0
(byte*) bitmap_init::yoffs#1
(byte*) bitmap_init::yoffs#2
(byte*) bitmap_init::yoffs#3
(byte*) bitmap_init::yoffs#4
(void()) bitmap_line((byte) bitmap_line::x0 , (byte) bitmap_line::x1 , (byte) bitmap_line::y0 , (byte) bitmap_line::y1)
(bool~) bitmap_line::$0
(byte~) bitmap_line::$1
(byte~) bitmap_line::$11
(bool~) bitmap_line::$12
(byte~) bitmap_line::$13
(bool~) bitmap_line::$14
(byte~) bitmap_line::$17
(bool~) bitmap_line::$18
(bool~) bitmap_line::$2
(byte~) bitmap_line::$3
(bool~) bitmap_line::$4
(byte~) bitmap_line::$7
(bool~) bitmap_line::$8
(label) bitmap_line::@1
(label) bitmap_line::@10
(label) bitmap_line::@13
(label) bitmap_line::@15
(label) bitmap_line::@16
(label) bitmap_line::@17
(label) bitmap_line::@2
(label) bitmap_line::@20
(label) bitmap_line::@23
(label) bitmap_line::@24
(label) bitmap_line::@27
(label) bitmap_line::@29
(label) bitmap_line::@3
(label) bitmap_line::@30
(label) bitmap_line::@31
(label) bitmap_line::@32
(label) bitmap_line::@33
(label) bitmap_line::@34
(label) bitmap_line::@35
(label) bitmap_line::@36
(label) bitmap_line::@6
(label) bitmap_line::@9
(label) bitmap_line::@return
(byte) bitmap_line::x0
(byte) bitmap_line::x0#0
(byte) bitmap_line::x0#1
(byte) bitmap_line::x0#10
(byte) bitmap_line::x0#11
(byte) bitmap_line::x0#12
(byte) bitmap_line::x0#13
(byte) bitmap_line::x0#2
(byte) bitmap_line::x0#3
(byte) bitmap_line::x0#4
(byte) bitmap_line::x0#5
(byte) bitmap_line::x0#6
(byte) bitmap_line::x0#7
(byte) bitmap_line::x0#8
(byte) bitmap_line::x0#9
(byte) bitmap_line::x1
(byte) bitmap_line::x1#0
(byte) bitmap_line::x1#1
(byte) bitmap_line::x1#10
(byte) bitmap_line::x1#11
(byte) bitmap_line::x1#12
(byte) bitmap_line::x1#13
(byte) bitmap_line::x1#2
(byte) bitmap_line::x1#3
(byte) bitmap_line::x1#4
(byte) bitmap_line::x1#5
(byte) bitmap_line::x1#6
(byte) bitmap_line::x1#7
(byte) bitmap_line::x1#8
(byte) bitmap_line::x1#9
(byte) bitmap_line::xd
(byte) bitmap_line::xd#0
(byte) bitmap_line::xd#1
(byte) bitmap_line::xd#10
(byte) bitmap_line::xd#11
(byte) bitmap_line::xd#12
(byte) bitmap_line::xd#13
(byte) bitmap_line::xd#14
(byte) bitmap_line::xd#2
(byte) bitmap_line::xd#3
(byte) bitmap_line::xd#4
(byte) bitmap_line::xd#5
(byte) bitmap_line::xd#6
(byte) bitmap_line::xd#7
(byte) bitmap_line::xd#8
(byte) bitmap_line::xd#9
(byte) bitmap_line::y0
(byte) bitmap_line::y0#0
(byte) bitmap_line::y0#1
(byte) bitmap_line::y0#10
(byte) bitmap_line::y0#11
(byte) bitmap_line::y0#12
(byte) bitmap_line::y0#13
(byte) bitmap_line::y0#2
(byte) bitmap_line::y0#3
(byte) bitmap_line::y0#4
(byte) bitmap_line::y0#5
(byte) bitmap_line::y0#6
(byte) bitmap_line::y0#7
(byte) bitmap_line::y0#8
(byte) bitmap_line::y0#9
(byte) bitmap_line::y1
(byte) bitmap_line::y1#0
(byte) bitmap_line::y1#1
(byte) bitmap_line::y1#10
(byte) bitmap_line::y1#11
(byte) bitmap_line::y1#12
(byte) bitmap_line::y1#13
(byte) bitmap_line::y1#2
(byte) bitmap_line::y1#3
(byte) bitmap_line::y1#4
(byte) bitmap_line::y1#5
(byte) bitmap_line::y1#6
(byte) bitmap_line::y1#7
(byte) bitmap_line::y1#8
(byte) bitmap_line::y1#9
(byte) bitmap_line::yd
(byte) bitmap_line::yd#0
(byte) bitmap_line::yd#1
(byte) bitmap_line::yd#10
(byte) bitmap_line::yd#11
(byte) bitmap_line::yd#12
(byte) bitmap_line::yd#2
(byte) bitmap_line::yd#3
(byte) bitmap_line::yd#4
(byte) bitmap_line::yd#5
(byte) bitmap_line::yd#6
(byte) bitmap_line::yd#7
(byte) bitmap_line::yd#8
(byte) bitmap_line::yd#9
(void()) bitmap_line_xdyd((byte) bitmap_line_xdyd::x , (byte) bitmap_line_xdyd::y , (byte) bitmap_line_xdyd::x1 , (byte) bitmap_line_xdyd::xd , (byte) bitmap_line_xdyd::yd)
(byte~) bitmap_line_xdyd::$0
(byte~) bitmap_line_xdyd::$2
(bool~) bitmap_line_xdyd::$3
(bool~) bitmap_line_xdyd::$4
(byte~) bitmap_line_xdyd::$5
(byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6
(bool~) bitmap_line_xdyd::$7
(label) bitmap_line_xdyd::@1
(label) bitmap_line_xdyd::@2
(label) bitmap_line_xdyd::@3
(label) bitmap_line_xdyd::@5
(label) bitmap_line_xdyd::@return
(byte) bitmap_line_xdyd::e
(byte) bitmap_line_xdyd::e#0
(byte) bitmap_line_xdyd::e#1
(byte) bitmap_line_xdyd::e#2
(byte) bitmap_line_xdyd::e#3
(byte) bitmap_line_xdyd::e#4
(byte) bitmap_line_xdyd::e#5
(byte) bitmap_line_xdyd::e#6
(byte) bitmap_line_xdyd::x
(byte) bitmap_line_xdyd::x#0
(byte) bitmap_line_xdyd::x#1
(byte) bitmap_line_xdyd::x#2
(byte) bitmap_line_xdyd::x#3
(byte) bitmap_line_xdyd::x#4
(byte) bitmap_line_xdyd::x#5
(byte) bitmap_line_xdyd::x#6
(byte) bitmap_line_xdyd::x#7
(byte) bitmap_line_xdyd::x1
(byte) bitmap_line_xdyd::x1#0
(byte) bitmap_line_xdyd::x1#1
(byte) bitmap_line_xdyd::x1#2
(byte) bitmap_line_xdyd::x1#3
(byte) bitmap_line_xdyd::x1#4
(byte) bitmap_line_xdyd::x1#5
(byte) bitmap_line_xdyd::x1#6
(byte) bitmap_line_xdyd::xd
(byte) bitmap_line_xdyd::xd#0
(byte) bitmap_line_xdyd::xd#1
(byte) bitmap_line_xdyd::xd#2
(byte) bitmap_line_xdyd::xd#3
(byte) bitmap_line_xdyd::xd#4
(byte) bitmap_line_xdyd::xd#5
(byte) bitmap_line_xdyd::xd#6
(byte) bitmap_line_xdyd::y
(byte) bitmap_line_xdyd::y#0
(byte) bitmap_line_xdyd::y#1
(byte) bitmap_line_xdyd::y#2
(byte) bitmap_line_xdyd::y#3
(byte) bitmap_line_xdyd::y#4
(byte) bitmap_line_xdyd::y#5
(byte) bitmap_line_xdyd::y#6
(byte) bitmap_line_xdyd::y#7
(byte) bitmap_line_xdyd::yd
(byte) bitmap_line_xdyd::yd#0
(byte) bitmap_line_xdyd::yd#1
(byte) bitmap_line_xdyd::yd#2
(byte) bitmap_line_xdyd::yd#3
(byte) bitmap_line_xdyd::yd#4
(byte) bitmap_line_xdyd::yd#5
(byte) bitmap_line_xdyd::yd#6
(void()) bitmap_line_xdyi((byte) bitmap_line_xdyi::x , (byte) bitmap_line_xdyi::y , (byte) bitmap_line_xdyi::x1 , (byte) bitmap_line_xdyi::xd , (byte) bitmap_line_xdyi::yd)
(byte~) bitmap_line_xdyi::$0
(byte~) bitmap_line_xdyi::$2
(bool~) bitmap_line_xdyi::$3
(bool~) bitmap_line_xdyi::$4
(byte~) bitmap_line_xdyi::$5
(byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6
(bool~) bitmap_line_xdyi::$7
(label) bitmap_line_xdyi::@1
(label) bitmap_line_xdyi::@2
(label) bitmap_line_xdyi::@3
(label) bitmap_line_xdyi::@5
(label) bitmap_line_xdyi::@return
(byte) bitmap_line_xdyi::e
(byte) bitmap_line_xdyi::e#0
(byte) bitmap_line_xdyi::e#1
(byte) bitmap_line_xdyi::e#2
(byte) bitmap_line_xdyi::e#3
(byte) bitmap_line_xdyi::e#4
(byte) bitmap_line_xdyi::e#5
(byte) bitmap_line_xdyi::e#6
(byte) bitmap_line_xdyi::x
(byte) bitmap_line_xdyi::x#0
(byte) bitmap_line_xdyi::x#1
(byte) bitmap_line_xdyi::x#2
(byte) bitmap_line_xdyi::x#3
(byte) bitmap_line_xdyi::x#4
(byte) bitmap_line_xdyi::x#5
(byte) bitmap_line_xdyi::x#6
(byte) bitmap_line_xdyi::x#7
(byte) bitmap_line_xdyi::x1
(byte) bitmap_line_xdyi::x1#0
(byte) bitmap_line_xdyi::x1#1
(byte) bitmap_line_xdyi::x1#2
(byte) bitmap_line_xdyi::x1#3
(byte) bitmap_line_xdyi::x1#4
(byte) bitmap_line_xdyi::x1#5
(byte) bitmap_line_xdyi::x1#6
(byte) bitmap_line_xdyi::xd
(byte) bitmap_line_xdyi::xd#0
(byte) bitmap_line_xdyi::xd#1
(byte) bitmap_line_xdyi::xd#2
(byte) bitmap_line_xdyi::xd#3
(byte) bitmap_line_xdyi::xd#4
(byte) bitmap_line_xdyi::xd#5
(byte) bitmap_line_xdyi::xd#6
(byte) bitmap_line_xdyi::y
(byte) bitmap_line_xdyi::y#0
(byte) bitmap_line_xdyi::y#1
(byte) bitmap_line_xdyi::y#2
(byte) bitmap_line_xdyi::y#3
(byte) bitmap_line_xdyi::y#4
(byte) bitmap_line_xdyi::y#5
(byte) bitmap_line_xdyi::y#6
(byte) bitmap_line_xdyi::y#7
(byte) bitmap_line_xdyi::yd
(byte) bitmap_line_xdyi::yd#0
(byte) bitmap_line_xdyi::yd#1
(byte) bitmap_line_xdyi::yd#2
(byte) bitmap_line_xdyi::yd#3
(byte) bitmap_line_xdyi::yd#4
(byte) bitmap_line_xdyi::yd#5
(byte) bitmap_line_xdyi::yd#6
(void()) bitmap_line_ydxd((byte) bitmap_line_ydxd::y , (byte) bitmap_line_ydxd::x , (byte) bitmap_line_ydxd::y1 , (byte) bitmap_line_ydxd::yd , (byte) bitmap_line_ydxd::xd)
(byte~) bitmap_line_ydxd::$0
(byte~) bitmap_line_ydxd::$2
(bool~) bitmap_line_ydxd::$3
(bool~) bitmap_line_ydxd::$4
(byte~) bitmap_line_ydxd::$5
(byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6
(bool~) bitmap_line_ydxd::$7
(label) bitmap_line_ydxd::@1
(label) bitmap_line_ydxd::@2
(label) bitmap_line_ydxd::@3
(label) bitmap_line_ydxd::@5
(label) bitmap_line_ydxd::@return
(byte) bitmap_line_ydxd::e
(byte) bitmap_line_ydxd::e#0
(byte) bitmap_line_ydxd::e#1
(byte) bitmap_line_ydxd::e#2
(byte) bitmap_line_ydxd::e#3
(byte) bitmap_line_ydxd::e#4
(byte) bitmap_line_ydxd::e#5
(byte) bitmap_line_ydxd::e#6
(byte) bitmap_line_ydxd::x
(byte) bitmap_line_ydxd::x#0
(byte) bitmap_line_ydxd::x#1
(byte) bitmap_line_ydxd::x#2
(byte) bitmap_line_ydxd::x#3
(byte) bitmap_line_ydxd::x#4
(byte) bitmap_line_ydxd::x#5
(byte) bitmap_line_ydxd::x#6
(byte) bitmap_line_ydxd::x#7
(byte) bitmap_line_ydxd::xd
(byte) bitmap_line_ydxd::xd#0
(byte) bitmap_line_ydxd::xd#1
(byte) bitmap_line_ydxd::xd#2
(byte) bitmap_line_ydxd::xd#3
(byte) bitmap_line_ydxd::xd#4
(byte) bitmap_line_ydxd::xd#5
(byte) bitmap_line_ydxd::xd#6
(byte) bitmap_line_ydxd::y
(byte) bitmap_line_ydxd::y#0
(byte) bitmap_line_ydxd::y#1
(byte) bitmap_line_ydxd::y#2
(byte) bitmap_line_ydxd::y#3
(byte) bitmap_line_ydxd::y#4
(byte) bitmap_line_ydxd::y#5
(byte) bitmap_line_ydxd::y#6
(byte) bitmap_line_ydxd::y#7
(byte) bitmap_line_ydxd::y#8
(byte) bitmap_line_ydxd::y1
(byte) bitmap_line_ydxd::y1#0
(byte) bitmap_line_ydxd::y1#1
(byte) bitmap_line_ydxd::y1#2
(byte) bitmap_line_ydxd::y1#3
(byte) bitmap_line_ydxd::y1#4
(byte) bitmap_line_ydxd::y1#5
(byte) bitmap_line_ydxd::y1#6
(byte) bitmap_line_ydxd::yd
(byte) bitmap_line_ydxd::yd#0
(byte) bitmap_line_ydxd::yd#1
(byte) bitmap_line_ydxd::yd#2
(byte) bitmap_line_ydxd::yd#3
(byte) bitmap_line_ydxd::yd#4
(byte) bitmap_line_ydxd::yd#5
(byte) bitmap_line_ydxd::yd#6
(void()) bitmap_line_ydxi((byte) bitmap_line_ydxi::y , (byte) bitmap_line_ydxi::x , (byte) bitmap_line_ydxi::y1 , (byte) bitmap_line_ydxi::yd , (byte) bitmap_line_ydxi::xd)
(byte~) bitmap_line_ydxi::$0
(byte~) bitmap_line_ydxi::$2
(bool~) bitmap_line_ydxi::$3
(bool~) bitmap_line_ydxi::$4
(byte~) bitmap_line_ydxi::$5
(byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6
(bool~) bitmap_line_ydxi::$7
(label) bitmap_line_ydxi::@1
(label) bitmap_line_ydxi::@2
(label) bitmap_line_ydxi::@3
(label) bitmap_line_ydxi::@5
(label) bitmap_line_ydxi::@return
(byte) bitmap_line_ydxi::e
(byte) bitmap_line_ydxi::e#0
(byte) bitmap_line_ydxi::e#1
(byte) bitmap_line_ydxi::e#2
(byte) bitmap_line_ydxi::e#3
(byte) bitmap_line_ydxi::e#4
(byte) bitmap_line_ydxi::e#5
(byte) bitmap_line_ydxi::e#6
(byte) bitmap_line_ydxi::x
(byte) bitmap_line_ydxi::x#0
(byte) bitmap_line_ydxi::x#1
(byte) bitmap_line_ydxi::x#2
(byte) bitmap_line_ydxi::x#3
(byte) bitmap_line_ydxi::x#4
(byte) bitmap_line_ydxi::x#5
(byte) bitmap_line_ydxi::x#6
(byte) bitmap_line_ydxi::x#7
(byte) bitmap_line_ydxi::xd
(byte) bitmap_line_ydxi::xd#0
(byte) bitmap_line_ydxi::xd#1
(byte) bitmap_line_ydxi::xd#2
(byte) bitmap_line_ydxi::xd#3
(byte) bitmap_line_ydxi::xd#4
(byte) bitmap_line_ydxi::xd#5
(byte) bitmap_line_ydxi::xd#6
(byte) bitmap_line_ydxi::y
(byte) bitmap_line_ydxi::y#0
(byte) bitmap_line_ydxi::y#1
(byte) bitmap_line_ydxi::y#2
(byte) bitmap_line_ydxi::y#3
(byte) bitmap_line_ydxi::y#4
(byte) bitmap_line_ydxi::y#5
(byte) bitmap_line_ydxi::y#6
(byte) bitmap_line_ydxi::y#7
(byte) bitmap_line_ydxi::y1
(byte) bitmap_line_ydxi::y1#0
(byte) bitmap_line_ydxi::y1#1
(byte) bitmap_line_ydxi::y1#2
(byte) bitmap_line_ydxi::y1#3
(byte) bitmap_line_ydxi::y1#4
(byte) bitmap_line_ydxi::y1#5
(byte) bitmap_line_ydxi::y1#6
(byte) bitmap_line_ydxi::yd
(byte) bitmap_line_ydxi::yd#0
(byte) bitmap_line_ydxi::yd#1
(byte) bitmap_line_ydxi::yd#2
(byte) bitmap_line_ydxi::yd#3
(byte) bitmap_line_ydxi::yd#4
(byte) bitmap_line_ydxi::yd#5
(byte) bitmap_line_ydxi::yd#6
(void()) bitmap_plot((byte) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$0
(byte~) bitmap_plot::$1
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(byte*) bitmap_plot::plotter#0
(word) bitmap_plot::plotter_x
(word) bitmap_plot::plotter_x#0
(word) bitmap_plot::plotter_y
(word) bitmap_plot::plotter_y#0
(byte) bitmap_plot::x
(byte) bitmap_plot::x#0
(byte) bitmap_plot::x#1
(byte) bitmap_plot::x#2
(byte) bitmap_plot::x#3
(byte) bitmap_plot::x#4
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0
(byte) bitmap_plot::y#1
(byte) bitmap_plot::y#2
(byte) bitmap_plot::y#3
(byte) bitmap_plot::y#4
(byte[$100]) bitmap_plot_bit
(byte[$100]) bitmap_plot_bit#0
(byte[$100]) bitmap_plot_xhi
(byte[$100]) bitmap_plot_xhi#0
(byte[$100]) bitmap_plot_xlo
(byte[$100]) bitmap_plot_xlo#0
(byte[$100]) bitmap_plot_yhi
(byte[$100]) bitmap_plot_yhi#0
(byte[$100]) bitmap_plot_ylo
(byte[$100]) bitmap_plot_ylo#0
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(label) dtvSetCpuBankSegment1::@return
(byte*) dtvSetCpuBankSegment1::cpuBank
(byte*) dtvSetCpuBankSegment1::cpuBank#0
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#1
(byte) dtvSetCpuBankSegment1::cpuBankIdx#2
(byte) dtvSetCpuBankSegment1::cpuBankIdx#3
(byte) dtv_control
(byte) dtv_control#0
(byte) dtv_control#1
(byte) dtv_control#10
(byte) dtv_control#100
(byte) dtv_control#101
(byte) dtv_control#102
(byte) dtv_control#103
(byte) dtv_control#104
(byte) dtv_control#105
(byte) dtv_control#106
(byte) dtv_control#107
(byte) dtv_control#108
(byte) dtv_control#109
(byte) dtv_control#11
(byte) dtv_control#110
(byte) dtv_control#111
(byte) dtv_control#112
(byte) dtv_control#113
(byte) dtv_control#114
(byte) dtv_control#115
(byte) dtv_control#116
(byte) dtv_control#117
(byte) dtv_control#118
(byte) dtv_control#119
(byte) dtv_control#12
(byte) dtv_control#120
(byte) dtv_control#121
(byte) dtv_control#122
(byte) dtv_control#123
(byte) dtv_control#124
(byte) dtv_control#125
(byte) dtv_control#126
(byte) dtv_control#127
(byte) dtv_control#128
(byte) dtv_control#129
(byte) dtv_control#13
(byte) dtv_control#130
(byte) dtv_control#131
(byte) dtv_control#132
(byte) dtv_control#133
(byte) dtv_control#134
(byte) dtv_control#135
(byte) dtv_control#136
(byte) dtv_control#137
(byte) dtv_control#138
(byte) dtv_control#139
(byte) dtv_control#14
(byte) dtv_control#140
(byte) dtv_control#141
(byte) dtv_control#142
(byte) dtv_control#143
(byte) dtv_control#144
(byte) dtv_control#145
(byte) dtv_control#146
(byte) dtv_control#147
(byte) dtv_control#148
(byte) dtv_control#149
(byte) dtv_control#15
(byte) dtv_control#150
(byte) dtv_control#151
(byte) dtv_control#152
(byte) dtv_control#153
(byte) dtv_control#154
(byte) dtv_control#155
(byte) dtv_control#156
(byte) dtv_control#157
(byte) dtv_control#158
(byte) dtv_control#159
(byte) dtv_control#16
(byte) dtv_control#160
(byte) dtv_control#161
(byte) dtv_control#162
(byte) dtv_control#163
(byte) dtv_control#164
(byte) dtv_control#165
(byte) dtv_control#166
(byte) dtv_control#167
(byte) dtv_control#168
(byte) dtv_control#169
(byte) dtv_control#17
(byte) dtv_control#170
(byte) dtv_control#171
(byte) dtv_control#172
(byte) dtv_control#173
(byte) dtv_control#174
(byte) dtv_control#175
(byte) dtv_control#176
(byte) dtv_control#177
(byte) dtv_control#178
(byte) dtv_control#179
(byte) dtv_control#18
(byte) dtv_control#180
(byte) dtv_control#181
(byte) dtv_control#182
(byte) dtv_control#183
(byte) dtv_control#184
(byte) dtv_control#185
(byte) dtv_control#186
(byte) dtv_control#187
(byte) dtv_control#188
(byte) dtv_control#189
(byte) dtv_control#19
(byte) dtv_control#190
(byte) dtv_control#191
(byte) dtv_control#192
(byte) dtv_control#193
(byte) dtv_control#194
(byte) dtv_control#195
(byte) dtv_control#196
(byte) dtv_control#197
(byte) dtv_control#198
(byte) dtv_control#199
(byte) dtv_control#2
(byte) dtv_control#20
(byte) dtv_control#200
(byte) dtv_control#201
(byte) dtv_control#202
(byte) dtv_control#203
(byte) dtv_control#204
(byte) dtv_control#205
(byte) dtv_control#206
(byte) dtv_control#207
(byte) dtv_control#208
(byte) dtv_control#209
(byte) dtv_control#21
(byte) dtv_control#210
(byte) dtv_control#211
(byte) dtv_control#212
(byte) dtv_control#213
(byte) dtv_control#214
(byte) dtv_control#215
(byte) dtv_control#216
(byte) dtv_control#217
(byte) dtv_control#218
(byte) dtv_control#219
(byte) dtv_control#22
(byte) dtv_control#220
(byte) dtv_control#221
(byte) dtv_control#222
(byte) dtv_control#223
(byte) dtv_control#224
(byte) dtv_control#225
(byte) dtv_control#226
(byte) dtv_control#227
(byte) dtv_control#228
(byte) dtv_control#229
(byte) dtv_control#23
(byte) dtv_control#230
(byte) dtv_control#231
(byte) dtv_control#232
(byte) dtv_control#233
(byte) dtv_control#234
(byte) dtv_control#235
(byte) dtv_control#236
(byte) dtv_control#237
(byte) dtv_control#238
(byte) dtv_control#239
(byte) dtv_control#24
(byte) dtv_control#240
(byte) dtv_control#241
(byte) dtv_control#242
(byte) dtv_control#243
(byte) dtv_control#244
(byte) dtv_control#245
(byte) dtv_control#246
(byte) dtv_control#247
(byte) dtv_control#248
(byte) dtv_control#249
(byte) dtv_control#25
(byte) dtv_control#250
(byte) dtv_control#251
(byte) dtv_control#252
(byte) dtv_control#253
(byte) dtv_control#254
(byte) dtv_control#255
(byte) dtv_control#256
(byte) dtv_control#257
(byte) dtv_control#258
(byte) dtv_control#259
(byte) dtv_control#26
(byte) dtv_control#260
(byte) dtv_control#261
(byte) dtv_control#262
(byte) dtv_control#263
(byte) dtv_control#264
(byte) dtv_control#265
(byte) dtv_control#266
(byte) dtv_control#267
(byte) dtv_control#268
(byte) dtv_control#269
(byte) dtv_control#27
(byte) dtv_control#270
(byte) dtv_control#271
(byte) dtv_control#272
(byte) dtv_control#273
(byte) dtv_control#274
(byte) dtv_control#275
(byte) dtv_control#276
(byte) dtv_control#277
(byte) dtv_control#278
(byte) dtv_control#279
(byte) dtv_control#28
(byte) dtv_control#280
(byte) dtv_control#281
(byte) dtv_control#282
(byte) dtv_control#283
(byte) dtv_control#284
(byte) dtv_control#285
(byte) dtv_control#286
(byte) dtv_control#287
(byte) dtv_control#288
(byte) dtv_control#289
(byte) dtv_control#29
(byte) dtv_control#290
(byte) dtv_control#291
(byte) dtv_control#292
(byte) dtv_control#3
(byte) dtv_control#30
(byte) dtv_control#31
(byte) dtv_control#32
(byte) dtv_control#33
(byte) dtv_control#34
(byte) dtv_control#35
(byte) dtv_control#36
(byte) dtv_control#37
(byte) dtv_control#38
(byte) dtv_control#39
(byte) dtv_control#4
(byte) dtv_control#40
(byte) dtv_control#41
(byte) dtv_control#42
(byte) dtv_control#43
(byte) dtv_control#44
(byte) dtv_control#45
(byte) dtv_control#46
(byte) dtv_control#47
(byte) dtv_control#48
(byte) dtv_control#49
(byte) dtv_control#5
(byte) dtv_control#50
(byte) dtv_control#51
(byte) dtv_control#52
(byte) dtv_control#53
(byte) dtv_control#54
(byte) dtv_control#55
(byte) dtv_control#56
(byte) dtv_control#57
(byte) dtv_control#58
(byte) dtv_control#59
(byte) dtv_control#6
(byte) dtv_control#60
(byte) dtv_control#61
(byte) dtv_control#62
(byte) dtv_control#63
(byte) dtv_control#64
(byte) dtv_control#65
(byte) dtv_control#66
(byte) dtv_control#67
(byte) dtv_control#68
(byte) dtv_control#69
(byte) dtv_control#7
(byte) dtv_control#70
(byte) dtv_control#71
(byte) dtv_control#72
(byte) dtv_control#73
(byte) dtv_control#74
(byte) dtv_control#75
(byte) dtv_control#76
(byte) dtv_control#77
(byte) dtv_control#78
(byte) dtv_control#79
(byte) dtv_control#8
(byte) dtv_control#80
(byte) dtv_control#81
(byte) dtv_control#82
(byte) dtv_control#83
(byte) dtv_control#84
(byte) dtv_control#85
(byte) dtv_control#86
(byte) dtv_control#87
(byte) dtv_control#88
(byte) dtv_control#89
(byte) dtv_control#9
(byte) dtv_control#90
(byte) dtv_control#91
(byte) dtv_control#92
(byte) dtv_control#93
(byte) dtv_control#94
(byte) dtv_control#95
(byte) dtv_control#96
(byte) dtv_control#97
(byte) dtv_control#98
(byte) dtv_control#99
(byte[]) keyboard_char_keycodes
(byte[]) keyboard_char_keycodes#0
(byte[8]) keyboard_events
(byte[8]) keyboard_events#0
(byte) keyboard_events_size
(byte) keyboard_events_size#0
(byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
(byte~) keyboard_key_pressed::$0
(byte~) keyboard_key_pressed::$1
(byte~) keyboard_key_pressed::$2
(byte~) keyboard_key_pressed::$3
(label) keyboard_key_pressed::@2
(label) keyboard_key_pressed::@return
(byte) keyboard_key_pressed::colidx
(byte) keyboard_key_pressed::colidx#0
(byte) keyboard_key_pressed::colidx#1
(byte) keyboard_key_pressed::key
(byte) keyboard_key_pressed::key#0
(byte) keyboard_key_pressed::key#1
(byte) keyboard_key_pressed::key#10
(byte) keyboard_key_pressed::key#11
(byte) keyboard_key_pressed::key#12
(byte) keyboard_key_pressed::key#13
(byte) keyboard_key_pressed::key#14
(byte) keyboard_key_pressed::key#15
(byte) keyboard_key_pressed::key#16
(byte) keyboard_key_pressed::key#17
(byte) keyboard_key_pressed::key#18
(byte) keyboard_key_pressed::key#19
(byte) keyboard_key_pressed::key#2
(byte) keyboard_key_pressed::key#20
(byte) keyboard_key_pressed::key#3
(byte) keyboard_key_pressed::key#4
(byte) keyboard_key_pressed::key#5
(byte) keyboard_key_pressed::key#6
(byte) keyboard_key_pressed::key#7
(byte) keyboard_key_pressed::key#8
(byte) keyboard_key_pressed::key#9
(byte) keyboard_key_pressed::return
(byte) keyboard_key_pressed::return#0
(byte) keyboard_key_pressed::return#1
(byte) keyboard_key_pressed::return#10
(byte) keyboard_key_pressed::return#11
(byte) keyboard_key_pressed::return#12
(byte) keyboard_key_pressed::return#13
(byte) keyboard_key_pressed::return#14
(byte) keyboard_key_pressed::return#15
(byte) keyboard_key_pressed::return#16
(byte) keyboard_key_pressed::return#17
(byte) keyboard_key_pressed::return#18
(byte) keyboard_key_pressed::return#19
(byte) keyboard_key_pressed::return#2
(byte) keyboard_key_pressed::return#20
(byte) keyboard_key_pressed::return#21
(byte) keyboard_key_pressed::return#22
(byte) keyboard_key_pressed::return#23
(byte) keyboard_key_pressed::return#24
(byte) keyboard_key_pressed::return#25
(byte) keyboard_key_pressed::return#26
(byte) keyboard_key_pressed::return#27
(byte) keyboard_key_pressed::return#28
(byte) keyboard_key_pressed::return#29
(byte) keyboard_key_pressed::return#3
(byte) keyboard_key_pressed::return#30
(byte) keyboard_key_pressed::return#31
(byte) keyboard_key_pressed::return#32
(byte) keyboard_key_pressed::return#33
(byte) keyboard_key_pressed::return#34
(byte) keyboard_key_pressed::return#35
(byte) keyboard_key_pressed::return#36
(byte) keyboard_key_pressed::return#37
(byte) keyboard_key_pressed::return#38
(byte) keyboard_key_pressed::return#39
(byte) keyboard_key_pressed::return#4
(byte) keyboard_key_pressed::return#40
(byte) keyboard_key_pressed::return#41
(byte) keyboard_key_pressed::return#42
(byte) keyboard_key_pressed::return#5
(byte) keyboard_key_pressed::return#6
(byte) keyboard_key_pressed::return#7
(byte) keyboard_key_pressed::return#8
(byte) keyboard_key_pressed::return#9
(byte) keyboard_key_pressed::rowidx
(byte) keyboard_key_pressed::rowidx#0
(byte[8]) keyboard_matrix_col_bitmask
(byte[8]) keyboard_matrix_col_bitmask#0
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte~) keyboard_matrix_read::$0
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0
(byte) keyboard_matrix_read::return#1
(byte) keyboard_matrix_read::return#2
(byte) keyboard_matrix_read::return#3
(byte) keyboard_matrix_read::return#4
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::row_pressed_bits#0
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0
(byte) keyboard_matrix_read::rowid#1
(byte[8]) keyboard_matrix_row_bitmask
(byte[8]) keyboard_matrix_row_bitmask#0
(byte) keyboard_modifiers
(byte) keyboard_modifiers#0
(byte[8]) keyboard_scan_values
(byte[8]) keyboard_scan_values#0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@7
(label) main::@return
(void()) menu()
(dword~) menu::$0
(dword~) menu::$1
(word/signed dword/dword~) menu::$10
(byte~) menu::$11
(byte/word/dword~) menu::$12
(byte~) menu::$13
(byte/word/dword~) menu::$14
(word~) menu::$15
(word~) menu::$16
(word/signed dword/dword~) menu::$17
(word~) menu::$18
(word~) menu::$19
(byte~) menu::$2
(word/signed dword/dword~) menu::$20
(word/dword~) menu::$21
(byte~) menu::$22
(bool~) menu::$23
(byte*~) menu::$24
(bool~) menu::$25
(byte~) menu::$29
(dword~) menu::$3
(bool~) menu::$30
(bool~) menu::$31
(byte~) menu::$33
(bool~) menu::$34
(bool~) menu::$35
(byte~) menu::$37
(bool~) menu::$38
(bool~) menu::$39
(word~) menu::$4
(byte~) menu::$41
(bool~) menu::$42
(bool~) menu::$43
(byte~) menu::$45
(bool~) menu::$46
(bool~) menu::$47
(byte~) menu::$49
(byte~) menu::$5
(bool~) menu::$50
(bool~) menu::$51
(byte~) menu::$53
(bool~) menu::$54
(bool~) menu::$55
(byte~) menu::$57
(bool~) menu::$58
(bool~) menu::$59
(dword~) menu::$6
(byte~) menu::$61
(bool~) menu::$62
(bool~) menu::$63
(byte~) menu::$65
(bool~) menu::$66
(bool~) menu::$67
(byte~) menu::$69
(word~) menu::$7
(bool~) menu::$70
(bool~) menu::$71
(byte~) menu::$73
(bool~) menu::$74
(bool~) menu::$75
(byte~) menu::$8
(word~) menu::$9
(label) menu::@1
(label) menu::@10
(label) menu::@11
(label) menu::@12
(label) menu::@13
(label) menu::@14
(label) menu::@15
(label) menu::@16
(label) menu::@17
(label) menu::@18
(label) menu::@19
(label) menu::@2
(label) menu::@22
(label) menu::@24
(label) menu::@26
(label) menu::@28
(label) menu::@3
(label) menu::@30
(label) menu::@32
(label) menu::@34
(label) menu::@36
(label) menu::@38
(label) menu::@4
(label) menu::@40
(label) menu::@42
(label) menu::@44
(label) menu::@47
(label) menu::@48
(label) menu::@49
(label) menu::@50
(label) menu::@51
(label) menu::@52
(label) menu::@53
(label) menu::@54
(label) menu::@55
(label) menu::@56
(label) menu::@57
(label) menu::@58
(label) menu::@59
(label) menu::@6
(label) menu::@60
(label) menu::@61
(label) menu::@62
(label) menu::@63
(label) menu::@64
(label) menu::@65
(label) menu::@66
(label) menu::@67
(label) menu::@68
(label) menu::@69
(label) menu::@7
(label) menu::@70
(label) menu::@71
(label) menu::@72
(label) menu::@73
(label) menu::@8
(label) menu::@9
(label) menu::@return
(byte*) menu::CHARSET
(byte*) menu::CHARSET#0
(byte*) menu::SCREEN
(byte*) menu::SCREEN#0
(byte*) menu::c
(byte*) menu::c#0
(byte*) menu::c#1
(byte*) menu::c#2
(byte) menu::i
(byte) menu::i#0
(byte) menu::i#1
(byte) menu::i#2
(void()) mode_8bppchunkybmm()
(byte~) mode_8bppchunkybmm::$0
(byte~) mode_8bppchunkybmm::$1
(word~) mode_8bppchunkybmm::$10
(byte~) mode_8bppchunkybmm::$11
(word~) mode_8bppchunkybmm::$12
(byte~) mode_8bppchunkybmm::$13
(word~) mode_8bppchunkybmm::$14
(byte~) mode_8bppchunkybmm::$15
(bool~) mode_8bppchunkybmm::$16
(dword~) mode_8bppchunkybmm::$17
(byte~) mode_8bppchunkybmm::$18
(byte~) mode_8bppchunkybmm::$2
(bool~) mode_8bppchunkybmm::$20
(bool~) mode_8bppchunkybmm::$21
(word~) mode_8bppchunkybmm::$23
(byte~) mode_8bppchunkybmm::$24
(bool~) mode_8bppchunkybmm::$25
(bool~) mode_8bppchunkybmm::$26
(byte/signed byte/word/signed word/dword/signed dword~) mode_8bppchunkybmm::$27
(byte~) mode_8bppchunkybmm::$28
(byte~) mode_8bppchunkybmm::$3
(byte~) mode_8bppchunkybmm::$4
(byte~) mode_8bppchunkybmm::$5
(byte~) mode_8bppchunkybmm::$6
(byte~) mode_8bppchunkybmm::$7
(byte/word/dword~) mode_8bppchunkybmm::$8
(byte~) mode_8bppchunkybmm::$9
(label) mode_8bppchunkybmm::@1
(label) mode_8bppchunkybmm::@10
(label) mode_8bppchunkybmm::@11
(label) mode_8bppchunkybmm::@12
(label) mode_8bppchunkybmm::@2
(label) mode_8bppchunkybmm::@3
(label) mode_8bppchunkybmm::@4
(label) mode_8bppchunkybmm::@5
(label) mode_8bppchunkybmm::@6
(label) mode_8bppchunkybmm::@7
(label) mode_8bppchunkybmm::@8
(label) mode_8bppchunkybmm::@9
(label) mode_8bppchunkybmm::@return
(dword) mode_8bppchunkybmm::PLANEB
(dword) mode_8bppchunkybmm::PLANEB#0
(byte) mode_8bppchunkybmm::c
(byte) mode_8bppchunkybmm::c#0
(byte*) mode_8bppchunkybmm::gfxb
(byte*) mode_8bppchunkybmm::gfxb#0
(byte*) mode_8bppchunkybmm::gfxb#1
(byte*) mode_8bppchunkybmm::gfxb#2
(byte*) mode_8bppchunkybmm::gfxb#3
(byte*) mode_8bppchunkybmm::gfxb#4
(byte*) mode_8bppchunkybmm::gfxb#5
(byte*) mode_8bppchunkybmm::gfxb#6
(byte) mode_8bppchunkybmm::gfxbCpuBank
(byte) mode_8bppchunkybmm::gfxbCpuBank#0
(byte) mode_8bppchunkybmm::gfxbCpuBank#1
(byte) mode_8bppchunkybmm::gfxbCpuBank#2
(byte) mode_8bppchunkybmm::gfxbCpuBank#3
(byte) mode_8bppchunkybmm::gfxbCpuBank#4
(byte) mode_8bppchunkybmm::gfxbCpuBank#5
(byte) mode_8bppchunkybmm::gfxbCpuBank#6
(byte) mode_8bppchunkybmm::gfxbCpuBank#7
(byte) mode_8bppchunkybmm::gfxbCpuBank#8
(byte) mode_8bppchunkybmm::gfxbCpuBank#9
(byte) mode_8bppchunkybmm::i
(byte) mode_8bppchunkybmm::i#0
(byte) mode_8bppchunkybmm::i#1
(byte) mode_8bppchunkybmm::i#2
(word) mode_8bppchunkybmm::x
(word) mode_8bppchunkybmm::x#0
(word) mode_8bppchunkybmm::x#1
(word) mode_8bppchunkybmm::x#2
(word) mode_8bppchunkybmm::x#3
(word) mode_8bppchunkybmm::x#4
(word) mode_8bppchunkybmm::x#5
(byte) mode_8bppchunkybmm::y
(byte) mode_8bppchunkybmm::y#0
(byte) mode_8bppchunkybmm::y#1
(byte) mode_8bppchunkybmm::y#2
(byte) mode_8bppchunkybmm::y#3
(byte) mode_8bppchunkybmm::y#4
(byte) mode_8bppchunkybmm::y#5
(byte) mode_8bppchunkybmm::y#6
(byte) mode_8bppchunkybmm::y#7
(void()) mode_8bpppixelcell()
(byte~) mode_8bpppixelcell::$0
(byte~) mode_8bpppixelcell::$1
(byte~) mode_8bpppixelcell::$10
(byte~) mode_8bpppixelcell::$11
(bool~) mode_8bpppixelcell::$12
(byte~) mode_8bpppixelcell::$13
(byte~) mode_8bpppixelcell::$14
(byte~) mode_8bpppixelcell::$15
(byte~) mode_8bpppixelcell::$16
(bool~) mode_8bpppixelcell::$17
(bool~) mode_8bpppixelcell::$18
(byte~) mode_8bpppixelcell::$19
(byte~) mode_8bpppixelcell::$2
(bool~) mode_8bpppixelcell::$20
(bool~) mode_8bpppixelcell::$21
(byte~) mode_8bpppixelcell::$22
(bool~) mode_8bpppixelcell::$23
(bool~) mode_8bpppixelcell::$24
(bool~) mode_8bpppixelcell::$25
(byte~) mode_8bpppixelcell::$3
(byte~) mode_8bpppixelcell::$4
(byte~) mode_8bpppixelcell::$5
(byte/word/dword~) mode_8bpppixelcell::$6
(byte~) mode_8bpppixelcell::$7
(byte~) mode_8bpppixelcell::$8
(byte~) mode_8bpppixelcell::$9
(label) mode_8bpppixelcell::@1
(label) mode_8bpppixelcell::@10
(label) mode_8bpppixelcell::@11
(label) mode_8bpppixelcell::@12
(label) mode_8bpppixelcell::@13
(label) mode_8bpppixelcell::@14
(label) mode_8bpppixelcell::@15
(label) mode_8bpppixelcell::@2
(label) mode_8bpppixelcell::@3
(label) mode_8bpppixelcell::@4
(label) mode_8bpppixelcell::@5
(label) mode_8bpppixelcell::@6
(label) mode_8bpppixelcell::@7
(label) mode_8bpppixelcell::@8
(label) mode_8bpppixelcell::@9
(label) mode_8bpppixelcell::@return
(byte*) mode_8bpppixelcell::CHARGEN
(byte*) mode_8bpppixelcell::CHARGEN#0
(byte*) mode_8bpppixelcell::PLANEA
(byte*) mode_8bpppixelcell::PLANEA#0
(byte*) mode_8bpppixelcell::PLANEB
(byte*) mode_8bpppixelcell::PLANEB#0
(byte) mode_8bpppixelcell::ax
(byte) mode_8bpppixelcell::ax#0
(byte) mode_8bpppixelcell::ax#1
(byte) mode_8bpppixelcell::ax#2
(byte) mode_8bpppixelcell::ay
(byte) mode_8bpppixelcell::ay#0
(byte) mode_8bpppixelcell::ay#1
(byte) mode_8bpppixelcell::ay#2
(byte) mode_8bpppixelcell::ay#3
(byte) mode_8bpppixelcell::ay#4
(byte) mode_8bpppixelcell::bits
(byte) mode_8bpppixelcell::bits#0
(byte) mode_8bpppixelcell::bits#1
(byte) mode_8bpppixelcell::bits#2
(byte) mode_8bpppixelcell::bits#3
(byte) mode_8bpppixelcell::bits#4
(byte) mode_8bpppixelcell::c
(byte) mode_8bpppixelcell::c#0
(byte) mode_8bpppixelcell::c#1
(byte) mode_8bpppixelcell::c#2
(byte) mode_8bpppixelcell::ch
(byte) mode_8bpppixelcell::ch#0
(byte) mode_8bpppixelcell::ch#1
(byte) mode_8bpppixelcell::ch#2
(byte) mode_8bpppixelcell::ch#3
(byte) mode_8bpppixelcell::ch#4
(byte) mode_8bpppixelcell::ch#5
(byte) mode_8bpppixelcell::ch#6
(byte) mode_8bpppixelcell::ch#7
(byte) mode_8bpppixelcell::ch#8
(byte*) mode_8bpppixelcell::chargen
(byte*) mode_8bpppixelcell::chargen#0
(byte*) mode_8bpppixelcell::chargen#1
(byte*) mode_8bpppixelcell::chargen#2
(byte*) mode_8bpppixelcell::chargen#3
(byte*) mode_8bpppixelcell::chargen#4
(byte*) mode_8bpppixelcell::chargen#5
(byte*) mode_8bpppixelcell::chargen#6
(byte*) mode_8bpppixelcell::chargen#7
(byte*) mode_8bpppixelcell::chargen#8
(byte) mode_8bpppixelcell::col
(byte) mode_8bpppixelcell::col#0
(byte) mode_8bpppixelcell::col#1
(byte) mode_8bpppixelcell::col#2
(byte) mode_8bpppixelcell::col#3
(byte) mode_8bpppixelcell::col#4
(byte) mode_8bpppixelcell::col#5
(byte) mode_8bpppixelcell::col#6
(byte) mode_8bpppixelcell::col#7
(byte) mode_8bpppixelcell::col#8
(byte) mode_8bpppixelcell::cp
(byte) mode_8bpppixelcell::cp#0
(byte) mode_8bpppixelcell::cp#1
(byte) mode_8bpppixelcell::cp#2
(byte) mode_8bpppixelcell::cp#3
(byte) mode_8bpppixelcell::cp#4
(byte) mode_8bpppixelcell::cr
(byte) mode_8bpppixelcell::cr#0
(byte) mode_8bpppixelcell::cr#1
(byte) mode_8bpppixelcell::cr#2
(byte) mode_8bpppixelcell::cr#3
(byte) mode_8bpppixelcell::cr#4
(byte) mode_8bpppixelcell::cr#5
(byte) mode_8bpppixelcell::cr#6
(byte*) mode_8bpppixelcell::gfxa
(byte*) mode_8bpppixelcell::gfxa#0
(byte*) mode_8bpppixelcell::gfxa#1
(byte*) mode_8bpppixelcell::gfxa#2
(byte*) mode_8bpppixelcell::gfxa#3
(byte*) mode_8bpppixelcell::gfxa#4
(byte*) mode_8bpppixelcell::gfxb
(byte*) mode_8bpppixelcell::gfxb#0
(byte*) mode_8bpppixelcell::gfxb#1
(byte*) mode_8bpppixelcell::gfxb#2
(byte*) mode_8bpppixelcell::gfxb#3
(byte*) mode_8bpppixelcell::gfxb#4
(byte*) mode_8bpppixelcell::gfxb#5
(byte*) mode_8bpppixelcell::gfxb#6
(byte*) mode_8bpppixelcell::gfxb#7
(byte*) mode_8bpppixelcell::gfxb#8
(byte) mode_8bpppixelcell::i
(byte) mode_8bpppixelcell::i#0
(byte) mode_8bpppixelcell::i#1
(byte) mode_8bpppixelcell::i#2
(void()) mode_ctrl()
(bool~) mode_ctrl::$0
(byte~) mode_ctrl::$1
(bool~) mode_ctrl::$10
(byte~) mode_ctrl::$11
(byte~) mode_ctrl::$12
(bool~) mode_ctrl::$13
(bool~) mode_ctrl::$14
(byte~) mode_ctrl::$15
(byte~) mode_ctrl::$16
(bool~) mode_ctrl::$17
(bool~) mode_ctrl::$18
(byte~) mode_ctrl::$19
(bool~) mode_ctrl::$2
(byte~) mode_ctrl::$20
(bool~) mode_ctrl::$21
(bool~) mode_ctrl::$22
(byte~) mode_ctrl::$23
(byte~) mode_ctrl::$24
(bool~) mode_ctrl::$25
(bool~) mode_ctrl::$26
(byte~) mode_ctrl::$27
(byte~) mode_ctrl::$28
(bool~) mode_ctrl::$29
(bool~) mode_ctrl::$3
(bool~) mode_ctrl::$30
(bool~) mode_ctrl::$31
(bool~) mode_ctrl::$32
(byte~) mode_ctrl::$4
(bool~) mode_ctrl::$5
(bool~) mode_ctrl::$6
(byte~) mode_ctrl::$7
(byte~) mode_ctrl::$8
(bool~) mode_ctrl::$9
(label) mode_ctrl::@1
(label) mode_ctrl::@10
(label) mode_ctrl::@11
(label) mode_ctrl::@12
(label) mode_ctrl::@13
(label) mode_ctrl::@14
(label) mode_ctrl::@15
(label) mode_ctrl::@2
(label) mode_ctrl::@23
(label) mode_ctrl::@24
(label) mode_ctrl::@25
(label) mode_ctrl::@26
(label) mode_ctrl::@27
(label) mode_ctrl::@28
(label) mode_ctrl::@29
(label) mode_ctrl::@30
(label) mode_ctrl::@32
(label) mode_ctrl::@33
(label) mode_ctrl::@34
(label) mode_ctrl::@35
(label) mode_ctrl::@36
(label) mode_ctrl::@37
(label) mode_ctrl::@38
(label) mode_ctrl::@39
(label) mode_ctrl::@4
(label) mode_ctrl::@5
(label) mode_ctrl::@6
(label) mode_ctrl::@7
(label) mode_ctrl::@8
(label) mode_ctrl::@9
(label) mode_ctrl::@return
(byte) mode_ctrl::ctrl
(byte) mode_ctrl::ctrl#0
(byte) mode_ctrl::ctrl#1
(byte) mode_ctrl::ctrl#10
(byte) mode_ctrl::ctrl#11
(byte) mode_ctrl::ctrl#12
(byte) mode_ctrl::ctrl#13
(byte) mode_ctrl::ctrl#14
(byte) mode_ctrl::ctrl#15
(byte) mode_ctrl::ctrl#16
(byte) mode_ctrl::ctrl#17
(byte) mode_ctrl::ctrl#18
(byte) mode_ctrl::ctrl#19
(byte) mode_ctrl::ctrl#2
(byte) mode_ctrl::ctrl#20
(byte) mode_ctrl::ctrl#21
(byte) mode_ctrl::ctrl#22
(byte) mode_ctrl::ctrl#23
(byte) mode_ctrl::ctrl#24
(byte) mode_ctrl::ctrl#25
(byte) mode_ctrl::ctrl#26
(byte) mode_ctrl::ctrl#27
(byte) mode_ctrl::ctrl#28
(byte) mode_ctrl::ctrl#3
(byte) mode_ctrl::ctrl#4
(byte) mode_ctrl::ctrl#5
(byte) mode_ctrl::ctrl#6
(byte) mode_ctrl::ctrl#7
(byte) mode_ctrl::ctrl#8
(byte) mode_ctrl::ctrl#9
(void()) mode_ecmchar()
(dword~) mode_ecmchar::$0
(dword~) mode_ecmchar::$1
(word/signed dword/dword~) mode_ecmchar::$10
(byte~) mode_ecmchar::$11
(byte/word/dword~) mode_ecmchar::$12
(byte~) mode_ecmchar::$13
(byte~) mode_ecmchar::$14
(byte/word/dword~) mode_ecmchar::$15
(word~) mode_ecmchar::$16
(word~) mode_ecmchar::$17
(word/signed dword/dword~) mode_ecmchar::$18
(word~) mode_ecmchar::$19
(byte~) mode_ecmchar::$2
(word~) mode_ecmchar::$20
(word/signed dword/dword~) mode_ecmchar::$21
(word/dword~) mode_ecmchar::$22
(byte~) mode_ecmchar::$23
(bool~) mode_ecmchar::$24
(byte~) mode_ecmchar::$25
(byte~) mode_ecmchar::$26
(byte~) mode_ecmchar::$27
(byte~) mode_ecmchar::$28
(byte~) mode_ecmchar::$29
(dword~) mode_ecmchar::$3
(byte~) mode_ecmchar::$30
(bool~) mode_ecmchar::$31
(bool~) mode_ecmchar::$32
(word~) mode_ecmchar::$4
(byte~) mode_ecmchar::$5
(dword~) mode_ecmchar::$6
(word~) mode_ecmchar::$7
(byte~) mode_ecmchar::$8
(word~) mode_ecmchar::$9
(label) mode_ecmchar::@1
(label) mode_ecmchar::@2
(label) mode_ecmchar::@3
(label) mode_ecmchar::@4
(label) mode_ecmchar::@5
(label) mode_ecmchar::@6
(label) mode_ecmchar::@7
(label) mode_ecmchar::@return
(byte*) mode_ecmchar::CHARSET
(byte*) mode_ecmchar::CHARSET#0
(byte*) mode_ecmchar::COLORS
(byte*) mode_ecmchar::COLORS#0
(byte*) mode_ecmchar::SCREEN
(byte*) mode_ecmchar::SCREEN#0
(byte*) mode_ecmchar::ch
(byte*) mode_ecmchar::ch#0
(byte*) mode_ecmchar::ch#1
(byte*) mode_ecmchar::ch#2
(byte*) mode_ecmchar::ch#3
(byte*) mode_ecmchar::ch#4
(byte*) mode_ecmchar::col
(byte*) mode_ecmchar::col#0
(byte*) mode_ecmchar::col#1
(byte*) mode_ecmchar::col#2
(byte*) mode_ecmchar::col#3
(byte*) mode_ecmchar::col#4
(byte) mode_ecmchar::cx
(byte) mode_ecmchar::cx#0
(byte) mode_ecmchar::cx#1
(byte) mode_ecmchar::cx#2
(byte) mode_ecmchar::cy
(byte) mode_ecmchar::cy#0
(byte) mode_ecmchar::cy#1
(byte) mode_ecmchar::cy#2
(byte) mode_ecmchar::cy#3
(byte) mode_ecmchar::cy#4
(byte) mode_ecmchar::i
(byte) mode_ecmchar::i#0
(byte) mode_ecmchar::i#1
(byte) mode_ecmchar::i#2
(void()) mode_hicolecmchar()
(dword~) mode_hicolecmchar::$0
(dword~) mode_hicolecmchar::$1
(word/signed dword/dword~) mode_hicolecmchar::$10
(byte~) mode_hicolecmchar::$11
(byte/word/dword~) mode_hicolecmchar::$12
(byte~) mode_hicolecmchar::$13
(byte~) mode_hicolecmchar::$14
(byte/word/dword~) mode_hicolecmchar::$15
(word~) mode_hicolecmchar::$16
(word~) mode_hicolecmchar::$17
(word/signed dword/dword~) mode_hicolecmchar::$18
(word~) mode_hicolecmchar::$19
(byte~) mode_hicolecmchar::$2
(word~) mode_hicolecmchar::$20
(word/signed dword/dword~) mode_hicolecmchar::$21
(word/dword~) mode_hicolecmchar::$22
(byte~) mode_hicolecmchar::$23
(bool~) mode_hicolecmchar::$24
(byte~) mode_hicolecmchar::$25
(byte~) mode_hicolecmchar::$26
(byte~) mode_hicolecmchar::$27
(byte~) mode_hicolecmchar::$28
(bool~) mode_hicolecmchar::$29
(byte*~) mode_hicolecmchar::$3
(bool~) mode_hicolecmchar::$30
(word~) mode_hicolecmchar::$4
(byte~) mode_hicolecmchar::$5
(byte*~) mode_hicolecmchar::$6
(word~) mode_hicolecmchar::$7
(byte~) mode_hicolecmchar::$8
(word~) mode_hicolecmchar::$9
(label) mode_hicolecmchar::@1
(label) mode_hicolecmchar::@2
(label) mode_hicolecmchar::@3
(label) mode_hicolecmchar::@4
(label) mode_hicolecmchar::@5
(label) mode_hicolecmchar::@6
(label) mode_hicolecmchar::@7
(label) mode_hicolecmchar::@return
(byte*) mode_hicolecmchar::CHARSET
(byte*) mode_hicolecmchar::CHARSET#0
(byte*) mode_hicolecmchar::COLORS
(byte*) mode_hicolecmchar::COLORS#0
(byte*) mode_hicolecmchar::SCREEN
(byte*) mode_hicolecmchar::SCREEN#0
(byte*) mode_hicolecmchar::ch
(byte*) mode_hicolecmchar::ch#0
(byte*) mode_hicolecmchar::ch#1
(byte*) mode_hicolecmchar::ch#2
(byte*) mode_hicolecmchar::ch#3
(byte*) mode_hicolecmchar::ch#4
(byte*) mode_hicolecmchar::col
(byte*) mode_hicolecmchar::col#0
(byte*) mode_hicolecmchar::col#1
(byte*) mode_hicolecmchar::col#2
(byte*) mode_hicolecmchar::col#3
(byte*) mode_hicolecmchar::col#4
(byte) mode_hicolecmchar::cx
(byte) mode_hicolecmchar::cx#0
(byte) mode_hicolecmchar::cx#1
(byte) mode_hicolecmchar::cx#2
(byte) mode_hicolecmchar::cy
(byte) mode_hicolecmchar::cy#0
(byte) mode_hicolecmchar::cy#1
(byte) mode_hicolecmchar::cy#2
(byte) mode_hicolecmchar::cy#3
(byte) mode_hicolecmchar::cy#4
(byte) mode_hicolecmchar::i
(byte) mode_hicolecmchar::i#0
(byte) mode_hicolecmchar::i#1
(byte) mode_hicolecmchar::i#2
(byte) mode_hicolecmchar::v
(byte) mode_hicolecmchar::v#0
(void()) mode_hicolmcchar()
(dword~) mode_hicolmcchar::$0
(dword~) mode_hicolmcchar::$1
(word/signed dword/dword~) mode_hicolmcchar::$10
(byte~) mode_hicolmcchar::$11
(byte/word/dword~) mode_hicolmcchar::$12
(byte~) mode_hicolmcchar::$13
(byte/word/dword~) mode_hicolmcchar::$14
(byte~) mode_hicolmcchar::$15
(word~) mode_hicolmcchar::$16
(word~) mode_hicolmcchar::$17
(word/signed dword/dword~) mode_hicolmcchar::$18
(word~) mode_hicolmcchar::$19
(byte~) mode_hicolmcchar::$2
(word~) mode_hicolmcchar::$20
(word/signed dword/dword~) mode_hicolmcchar::$21
(word/dword~) mode_hicolmcchar::$22
(byte~) mode_hicolmcchar::$23
(bool~) mode_hicolmcchar::$24
(byte~) mode_hicolmcchar::$25
(byte~) mode_hicolmcchar::$26
(byte~) mode_hicolmcchar::$27
(byte~) mode_hicolmcchar::$28
(bool~) mode_hicolmcchar::$29
(byte*~) mode_hicolmcchar::$3
(bool~) mode_hicolmcchar::$30
(word~) mode_hicolmcchar::$4
(byte~) mode_hicolmcchar::$5
(byte*~) mode_hicolmcchar::$6
(word~) mode_hicolmcchar::$7
(byte~) mode_hicolmcchar::$8
(word~) mode_hicolmcchar::$9
(label) mode_hicolmcchar::@1
(label) mode_hicolmcchar::@2
(label) mode_hicolmcchar::@3
(label) mode_hicolmcchar::@4
(label) mode_hicolmcchar::@5
(label) mode_hicolmcchar::@6
(label) mode_hicolmcchar::@7
(label) mode_hicolmcchar::@return
(byte*) mode_hicolmcchar::CHARSET
(byte*) mode_hicolmcchar::CHARSET#0
(byte*) mode_hicolmcchar::COLORS
(byte*) mode_hicolmcchar::COLORS#0
(byte*) mode_hicolmcchar::SCREEN
(byte*) mode_hicolmcchar::SCREEN#0
(byte*) mode_hicolmcchar::ch
(byte*) mode_hicolmcchar::ch#0
(byte*) mode_hicolmcchar::ch#1
(byte*) mode_hicolmcchar::ch#2
(byte*) mode_hicolmcchar::ch#3
(byte*) mode_hicolmcchar::ch#4
(byte*) mode_hicolmcchar::col
(byte*) mode_hicolmcchar::col#0
(byte*) mode_hicolmcchar::col#1
(byte*) mode_hicolmcchar::col#2
(byte*) mode_hicolmcchar::col#3
(byte*) mode_hicolmcchar::col#4
(byte) mode_hicolmcchar::cx
(byte) mode_hicolmcchar::cx#0
(byte) mode_hicolmcchar::cx#1
(byte) mode_hicolmcchar::cx#2
(byte) mode_hicolmcchar::cy
(byte) mode_hicolmcchar::cy#0
(byte) mode_hicolmcchar::cy#1
(byte) mode_hicolmcchar::cy#2
(byte) mode_hicolmcchar::cy#3
(byte) mode_hicolmcchar::cy#4
(byte) mode_hicolmcchar::i
(byte) mode_hicolmcchar::i#0
(byte) mode_hicolmcchar::i#1
(byte) mode_hicolmcchar::i#2
(byte) mode_hicolmcchar::v
(byte) mode_hicolmcchar::v#0
(void()) mode_hicolstdchar()
(dword~) mode_hicolstdchar::$0
(dword~) mode_hicolstdchar::$1
(word/signed dword/dword~) mode_hicolstdchar::$10
(byte~) mode_hicolstdchar::$11
(byte/word/dword~) mode_hicolstdchar::$12
(byte~) mode_hicolstdchar::$13
(byte/word/dword~) mode_hicolstdchar::$14
(word~) mode_hicolstdchar::$15
(word~) mode_hicolstdchar::$16
(word/signed dword/dword~) mode_hicolstdchar::$17
(word~) mode_hicolstdchar::$18
(word~) mode_hicolstdchar::$19
(byte~) mode_hicolstdchar::$2
(word/signed dword/dword~) mode_hicolstdchar::$20
(word/dword~) mode_hicolstdchar::$21
(byte~) mode_hicolstdchar::$22
(bool~) mode_hicolstdchar::$23
(byte~) mode_hicolstdchar::$24
(byte~) mode_hicolstdchar::$25
(byte~) mode_hicolstdchar::$26
(byte~) mode_hicolstdchar::$27
(bool~) mode_hicolstdchar::$28
(bool~) mode_hicolstdchar::$29
(byte*~) mode_hicolstdchar::$3
(word~) mode_hicolstdchar::$4
(byte~) mode_hicolstdchar::$5
(byte*~) mode_hicolstdchar::$6
(word~) mode_hicolstdchar::$7
(byte~) mode_hicolstdchar::$8
(word~) mode_hicolstdchar::$9
(label) mode_hicolstdchar::@1
(label) mode_hicolstdchar::@2
(label) mode_hicolstdchar::@3
(label) mode_hicolstdchar::@4
(label) mode_hicolstdchar::@5
(label) mode_hicolstdchar::@6
(label) mode_hicolstdchar::@7
(label) mode_hicolstdchar::@return
(byte*) mode_hicolstdchar::CHARSET
(byte*) mode_hicolstdchar::CHARSET#0
(byte*) mode_hicolstdchar::COLORS
(byte*) mode_hicolstdchar::COLORS#0
(byte*) mode_hicolstdchar::SCREEN
(byte*) mode_hicolstdchar::SCREEN#0
(byte*) mode_hicolstdchar::ch
(byte*) mode_hicolstdchar::ch#0
(byte*) mode_hicolstdchar::ch#1
(byte*) mode_hicolstdchar::ch#2
(byte*) mode_hicolstdchar::ch#3
(byte*) mode_hicolstdchar::ch#4
(byte*) mode_hicolstdchar::col
(byte*) mode_hicolstdchar::col#0
(byte*) mode_hicolstdchar::col#1
(byte*) mode_hicolstdchar::col#2
(byte*) mode_hicolstdchar::col#3
(byte*) mode_hicolstdchar::col#4
(byte) mode_hicolstdchar::cx
(byte) mode_hicolstdchar::cx#0
(byte) mode_hicolstdchar::cx#1
(byte) mode_hicolstdchar::cx#2
(byte) mode_hicolstdchar::cy
(byte) mode_hicolstdchar::cy#0
(byte) mode_hicolstdchar::cy#1
(byte) mode_hicolstdchar::cy#2
(byte) mode_hicolstdchar::cy#3
(byte) mode_hicolstdchar::cy#4
(byte) mode_hicolstdchar::i
(byte) mode_hicolstdchar::i#0
(byte) mode_hicolstdchar::i#1
(byte) mode_hicolstdchar::i#2
(byte) mode_hicolstdchar::v
(byte) mode_hicolstdchar::v#0
(void()) mode_mcchar()
(dword~) mode_mcchar::$0
(dword~) mode_mcchar::$1
(word/signed dword/dword~) mode_mcchar::$10
(byte~) mode_mcchar::$11
(byte/word/dword~) mode_mcchar::$12
(byte~) mode_mcchar::$13
(byte/word/dword~) mode_mcchar::$14
(byte~) mode_mcchar::$15
(word~) mode_mcchar::$16
(word~) mode_mcchar::$17
(word/signed dword/dword~) mode_mcchar::$18
(word~) mode_mcchar::$19
(byte~) mode_mcchar::$2
(word~) mode_mcchar::$20
(word/signed dword/dword~) mode_mcchar::$21
(word/dword~) mode_mcchar::$22
(byte~) mode_mcchar::$23
(bool~) mode_mcchar::$24
(byte~) mode_mcchar::$25
(byte~) mode_mcchar::$26
(byte~) mode_mcchar::$27
(byte~) mode_mcchar::$28
(byte~) mode_mcchar::$29
(dword~) mode_mcchar::$3
(byte~) mode_mcchar::$30
(bool~) mode_mcchar::$31
(bool~) mode_mcchar::$32
(word~) mode_mcchar::$4
(byte~) mode_mcchar::$5
(dword~) mode_mcchar::$6
(word~) mode_mcchar::$7
(byte~) mode_mcchar::$8
(word~) mode_mcchar::$9
(label) mode_mcchar::@1
(label) mode_mcchar::@2
(label) mode_mcchar::@3
(label) mode_mcchar::@4
(label) mode_mcchar::@5
(label) mode_mcchar::@6
(label) mode_mcchar::@7
(label) mode_mcchar::@return
(byte*) mode_mcchar::CHARSET
(byte*) mode_mcchar::CHARSET#0
(byte*) mode_mcchar::COLORS
(byte*) mode_mcchar::COLORS#0
(byte*) mode_mcchar::SCREEN
(byte*) mode_mcchar::SCREEN#0
(byte*) mode_mcchar::ch
(byte*) mode_mcchar::ch#0
(byte*) mode_mcchar::ch#1
(byte*) mode_mcchar::ch#2
(byte*) mode_mcchar::ch#3
(byte*) mode_mcchar::ch#4
(byte*) mode_mcchar::col
(byte*) mode_mcchar::col#0
(byte*) mode_mcchar::col#1
(byte*) mode_mcchar::col#2
(byte*) mode_mcchar::col#3
(byte*) mode_mcchar::col#4
(byte) mode_mcchar::cx
(byte) mode_mcchar::cx#0
(byte) mode_mcchar::cx#1
(byte) mode_mcchar::cx#2
(byte) mode_mcchar::cy
(byte) mode_mcchar::cy#0
(byte) mode_mcchar::cy#1
(byte) mode_mcchar::cy#2
(byte) mode_mcchar::cy#3
(byte) mode_mcchar::cy#4
(byte) mode_mcchar::i
(byte) mode_mcchar::i#0
(byte) mode_mcchar::i#1
(byte) mode_mcchar::i#2
(void()) mode_sixsfred()
(byte~) mode_sixsfred::$0
(byte~) mode_sixsfred::$1
(byte~) mode_sixsfred::$10
(byte*~) mode_sixsfred::$11
(byte~) mode_sixsfred::$12
(byte*~) mode_sixsfred::$13
(byte~) mode_sixsfred::$14
(bool~) mode_sixsfred::$15
(byte~) mode_sixsfred::$16
(byte~) mode_sixsfred::$17
(bool~) mode_sixsfred::$18
(bool~) mode_sixsfred::$19
(byte~) mode_sixsfred::$2
(byte~) mode_sixsfred::$20
(byte~) mode_sixsfred::$21
(bool~) mode_sixsfred::$22
(bool~) mode_sixsfred::$23
(bool~) mode_sixsfred::$24
(bool~) mode_sixsfred::$25
(byte~) mode_sixsfred::$3
(byte~) mode_sixsfred::$4
(byte/word/dword~) mode_sixsfred::$5
(byte~) mode_sixsfred::$6
(byte~) mode_sixsfred::$7
(byte~) mode_sixsfred::$8
(byte~) mode_sixsfred::$9
(label) mode_sixsfred::@1
(label) mode_sixsfred::@10
(label) mode_sixsfred::@11
(label) mode_sixsfred::@12
(label) mode_sixsfred::@13
(label) mode_sixsfred::@14
(label) mode_sixsfred::@15
(label) mode_sixsfred::@2
(label) mode_sixsfred::@3
(label) mode_sixsfred::@4
(label) mode_sixsfred::@5
(label) mode_sixsfred::@6
(label) mode_sixsfred::@7
(label) mode_sixsfred::@8
(label) mode_sixsfred::@9
(label) mode_sixsfred::@return
(byte*) mode_sixsfred::COLORS
(byte*) mode_sixsfred::COLORS#0
(byte*) mode_sixsfred::PLANEA
(byte*) mode_sixsfred::PLANEA#0
(byte*) mode_sixsfred::PLANEB
(byte*) mode_sixsfred::PLANEB#0
(byte) mode_sixsfred::ax
(byte) mode_sixsfred::ax#0
(byte) mode_sixsfred::ax#1
(byte) mode_sixsfred::ax#2
(byte) mode_sixsfred::ay
(byte) mode_sixsfred::ay#0
(byte) mode_sixsfred::ay#1
(byte) mode_sixsfred::ay#2
(byte) mode_sixsfred::ay#3
(byte) mode_sixsfred::ay#4
(byte) mode_sixsfred::bx
(byte) mode_sixsfred::bx#0
(byte) mode_sixsfred::bx#1
(byte) mode_sixsfred::bx#2
(byte) mode_sixsfred::by
(byte) mode_sixsfred::by#0
(byte) mode_sixsfred::by#1
(byte) mode_sixsfred::by#2
(byte) mode_sixsfred::by#3
(byte) mode_sixsfred::by#4
(byte*) mode_sixsfred::col
(byte*) mode_sixsfred::col#0
(byte*) mode_sixsfred::col#1
(byte*) mode_sixsfred::col#2
(byte*) mode_sixsfred::col#3
(byte*) mode_sixsfred::col#4
(byte) mode_sixsfred::cx
(byte) mode_sixsfred::cx#0
(byte) mode_sixsfred::cx#1
(byte) mode_sixsfred::cx#2
(byte) mode_sixsfred::cy
(byte) mode_sixsfred::cy#0
(byte) mode_sixsfred::cy#1
(byte) mode_sixsfred::cy#2
(byte) mode_sixsfred::cy#3
(byte) mode_sixsfred::cy#4
(byte*) mode_sixsfred::gfxa
(byte*) mode_sixsfred::gfxa#0
(byte*) mode_sixsfred::gfxa#1
(byte*) mode_sixsfred::gfxa#2
(byte*) mode_sixsfred::gfxa#3
(byte*) mode_sixsfred::gfxa#4
(byte*) mode_sixsfred::gfxb
(byte*) mode_sixsfred::gfxb#0
(byte*) mode_sixsfred::gfxb#1
(byte*) mode_sixsfred::gfxb#2
(byte*) mode_sixsfred::gfxb#3
(byte*) mode_sixsfred::gfxb#4
(byte) mode_sixsfred::i
(byte) mode_sixsfred::i#0
(byte) mode_sixsfred::i#1
(byte) mode_sixsfred::i#2
(byte) mode_sixsfred::row
(byte) mode_sixsfred::row#0
(byte[]) mode_sixsfred::row_bitmask
(byte[]) mode_sixsfred::row_bitmask#0
(void()) mode_sixsfred2()
(byte~) mode_sixsfred2::$0
(byte~) mode_sixsfred2::$1
(byte~) mode_sixsfred2::$10
(byte*~) mode_sixsfred2::$11
(byte~) mode_sixsfred2::$12
(bool~) mode_sixsfred2::$13
(byte~) mode_sixsfred2::$14
(byte~) mode_sixsfred2::$15
(byte~) mode_sixsfred2::$16
(byte~) mode_sixsfred2::$17
(bool~) mode_sixsfred2::$18
(bool~) mode_sixsfred2::$19
(byte~) mode_sixsfred2::$2
(byte~) mode_sixsfred2::$20
(byte~) mode_sixsfred2::$21
(bool~) mode_sixsfred2::$22
(bool~) mode_sixsfred2::$23
(bool~) mode_sixsfred2::$24
(bool~) mode_sixsfred2::$25
(byte/word/dword~) mode_sixsfred2::$3
(byte~) mode_sixsfred2::$4
(byte~) mode_sixsfred2::$5
(byte~) mode_sixsfred2::$6
(byte~) mode_sixsfred2::$7
(byte~) mode_sixsfred2::$8
(byte*~) mode_sixsfred2::$9
(label) mode_sixsfred2::@1
(label) mode_sixsfred2::@10
(label) mode_sixsfred2::@11
(label) mode_sixsfred2::@12
(label) mode_sixsfred2::@13
(label) mode_sixsfred2::@14
(label) mode_sixsfred2::@15
(label) mode_sixsfred2::@2
(label) mode_sixsfred2::@3
(label) mode_sixsfred2::@4
(label) mode_sixsfred2::@5
(label) mode_sixsfred2::@6
(label) mode_sixsfred2::@7
(label) mode_sixsfred2::@8
(label) mode_sixsfred2::@9
(label) mode_sixsfred2::@return
(byte*) mode_sixsfred2::COLORS
(byte*) mode_sixsfred2::COLORS#0
(byte*) mode_sixsfred2::PLANEA
(byte*) mode_sixsfred2::PLANEA#0
(byte*) mode_sixsfred2::PLANEB
(byte*) mode_sixsfred2::PLANEB#0
(byte) mode_sixsfred2::ax
(byte) mode_sixsfred2::ax#0
(byte) mode_sixsfred2::ax#1
(byte) mode_sixsfred2::ax#2
(byte) mode_sixsfred2::ay
(byte) mode_sixsfred2::ay#0
(byte) mode_sixsfred2::ay#1
(byte) mode_sixsfred2::ay#2
(byte) mode_sixsfred2::ay#3
(byte) mode_sixsfred2::ay#4
(byte) mode_sixsfred2::bx
(byte) mode_sixsfred2::bx#0
(byte) mode_sixsfred2::bx#1
(byte) mode_sixsfred2::bx#2
(byte) mode_sixsfred2::by
(byte) mode_sixsfred2::by#0
(byte) mode_sixsfred2::by#1
(byte) mode_sixsfred2::by#2
(byte) mode_sixsfred2::by#3
(byte) mode_sixsfred2::by#4
(byte*) mode_sixsfred2::col
(byte*) mode_sixsfred2::col#0
(byte*) mode_sixsfred2::col#1
(byte*) mode_sixsfred2::col#2
(byte*) mode_sixsfred2::col#3
(byte*) mode_sixsfred2::col#4
(byte) mode_sixsfred2::cx
(byte) mode_sixsfred2::cx#0
(byte) mode_sixsfred2::cx#1
(byte) mode_sixsfred2::cx#2
(byte) mode_sixsfred2::cy
(byte) mode_sixsfred2::cy#0
(byte) mode_sixsfred2::cy#1
(byte) mode_sixsfred2::cy#2
(byte) mode_sixsfred2::cy#3
(byte) mode_sixsfred2::cy#4
(byte*) mode_sixsfred2::gfxa
(byte*) mode_sixsfred2::gfxa#0
(byte*) mode_sixsfred2::gfxa#1
(byte*) mode_sixsfred2::gfxa#2
(byte*) mode_sixsfred2::gfxa#3
(byte*) mode_sixsfred2::gfxa#4
(byte*) mode_sixsfred2::gfxb
(byte*) mode_sixsfred2::gfxb#0
(byte*) mode_sixsfred2::gfxb#1
(byte*) mode_sixsfred2::gfxb#2
(byte*) mode_sixsfred2::gfxb#3
(byte*) mode_sixsfred2::gfxb#4
(byte) mode_sixsfred2::i
(byte) mode_sixsfred2::i#0
(byte) mode_sixsfred2::i#1
(byte) mode_sixsfred2::i#2
(byte) mode_sixsfred2::row
(byte) mode_sixsfred2::row#0
(byte[]) mode_sixsfred2::row_bitmask
(byte[]) mode_sixsfred2::row_bitmask#0
(void()) mode_stdbitmap()
(dword~) mode_stdbitmap::$0
(dword~) mode_stdbitmap::$1
(word~) mode_stdbitmap::$10
(word~) mode_stdbitmap::$11
(word/signed dword/dword~) mode_stdbitmap::$12
(word~) mode_stdbitmap::$13
(word~) mode_stdbitmap::$14
(word/signed dword/dword~) mode_stdbitmap::$15
(word/dword~) mode_stdbitmap::$16
(byte~) mode_stdbitmap::$17
(bool~) mode_stdbitmap::$18
(byte~) mode_stdbitmap::$19
(byte~) mode_stdbitmap::$2
(byte~) mode_stdbitmap::$20
(byte/signed word/word/dword/signed dword~) mode_stdbitmap::$21
(byte~) mode_stdbitmap::$22
(byte~) mode_stdbitmap::$23
(bool~) mode_stdbitmap::$24
(bool~) mode_stdbitmap::$25
(byte/signed word/word/dword/signed dword~) mode_stdbitmap::$28
(byte/signed word/word/dword/signed dword~) mode_stdbitmap::$29
(word~) mode_stdbitmap::$3
(bool~) mode_stdbitmap::$31
(word/signed dword/dword~) mode_stdbitmap::$4
(byte~) mode_stdbitmap::$5
(byte/word/dword~) mode_stdbitmap::$6
(byte~) mode_stdbitmap::$7
(byte~) mode_stdbitmap::$8
(byte/word/dword~) mode_stdbitmap::$9
(label) mode_stdbitmap::@1
(label) mode_stdbitmap::@10
(label) mode_stdbitmap::@11
(label) mode_stdbitmap::@12
(label) mode_stdbitmap::@2
(label) mode_stdbitmap::@3
(label) mode_stdbitmap::@4
(label) mode_stdbitmap::@5
(label) mode_stdbitmap::@6
(label) mode_stdbitmap::@7
(label) mode_stdbitmap::@8
(label) mode_stdbitmap::@9
(label) mode_stdbitmap::@return
(byte*) mode_stdbitmap::BITMAP
(byte*) mode_stdbitmap::BITMAP#0
(byte*) mode_stdbitmap::SCREEN
(byte*) mode_stdbitmap::SCREEN#0
(byte*) mode_stdbitmap::ch
(byte*) mode_stdbitmap::ch#0
(byte*) mode_stdbitmap::ch#1
(byte*) mode_stdbitmap::ch#2
(byte*) mode_stdbitmap::ch#3
(byte*) mode_stdbitmap::ch#4
(byte) mode_stdbitmap::col
(byte) mode_stdbitmap::col#0
(byte) mode_stdbitmap::col2
(byte) mode_stdbitmap::col2#0
(byte) mode_stdbitmap::cx
(byte) mode_stdbitmap::cx#0
(byte) mode_stdbitmap::cx#1
(byte) mode_stdbitmap::cx#2
(byte) mode_stdbitmap::cy
(byte) mode_stdbitmap::cy#0
(byte) mode_stdbitmap::cy#1
(byte) mode_stdbitmap::cy#2
(byte) mode_stdbitmap::cy#3
(byte) mode_stdbitmap::cy#4
(byte) mode_stdbitmap::i
(byte) mode_stdbitmap::i#0
(byte) mode_stdbitmap::i#1
(byte) mode_stdbitmap::i#2
(byte) mode_stdbitmap::l
(byte) mode_stdbitmap::l#0
(byte) mode_stdbitmap::l#1
(byte) mode_stdbitmap::l#2
(byte) mode_stdbitmap::l#3
(byte) mode_stdbitmap::lines_cnt
(byte) mode_stdbitmap::lines_cnt#0
(byte) mode_stdbitmap::lines_cnt#1
(byte) mode_stdbitmap::lines_cnt#2
(byte[]) mode_stdbitmap::lines_x
(byte[]) mode_stdbitmap::lines_x#0
(byte[]) mode_stdbitmap::lines_y
(byte[]) mode_stdbitmap::lines_y#0
(void()) mode_stdchar()
(dword~) mode_stdchar::$0
(dword~) mode_stdchar::$1
(word/signed dword/dword~) mode_stdchar::$10
(byte~) mode_stdchar::$11
(byte/word/dword~) mode_stdchar::$12
(byte~) mode_stdchar::$13
(byte/word/dword~) mode_stdchar::$14
(word~) mode_stdchar::$15
(word~) mode_stdchar::$16
(word/signed dword/dword~) mode_stdchar::$17
(word~) mode_stdchar::$18
(word~) mode_stdchar::$19
(byte~) mode_stdchar::$2
(word/signed dword/dword~) mode_stdchar::$20
(word/dword~) mode_stdchar::$21
(byte~) mode_stdchar::$22
(bool~) mode_stdchar::$23
(byte~) mode_stdchar::$24
(byte~) mode_stdchar::$25
(byte~) mode_stdchar::$26
(byte~) mode_stdchar::$27
(byte~) mode_stdchar::$28
(byte~) mode_stdchar::$29
(dword~) mode_stdchar::$3
(bool~) mode_stdchar::$30
(bool~) mode_stdchar::$31
(word~) mode_stdchar::$4
(byte~) mode_stdchar::$5
(dword~) mode_stdchar::$6
(word~) mode_stdchar::$7
(byte~) mode_stdchar::$8
(word~) mode_stdchar::$9
(label) mode_stdchar::@1
(label) mode_stdchar::@2
(label) mode_stdchar::@3
(label) mode_stdchar::@4
(label) mode_stdchar::@5
(label) mode_stdchar::@6
(label) mode_stdchar::@7
(label) mode_stdchar::@return
(byte*) mode_stdchar::CHARSET
(byte*) mode_stdchar::CHARSET#0
(byte*) mode_stdchar::COLORS
(byte*) mode_stdchar::COLORS#0
(byte*) mode_stdchar::SCREEN
(byte*) mode_stdchar::SCREEN#0
(byte*) mode_stdchar::ch
(byte*) mode_stdchar::ch#0
(byte*) mode_stdchar::ch#1
(byte*) mode_stdchar::ch#2
(byte*) mode_stdchar::ch#3
(byte*) mode_stdchar::ch#4
(byte*) mode_stdchar::col
(byte*) mode_stdchar::col#0
(byte*) mode_stdchar::col#1
(byte*) mode_stdchar::col#2
(byte*) mode_stdchar::col#3
(byte*) mode_stdchar::col#4
(byte) mode_stdchar::cx
(byte) mode_stdchar::cx#0
(byte) mode_stdchar::cx#1
(byte) mode_stdchar::cx#2
(byte) mode_stdchar::cy
(byte) mode_stdchar::cy#0
(byte) mode_stdchar::cy#1
(byte) mode_stdchar::cy#2
(byte) mode_stdchar::cy#3
(byte) mode_stdchar::cy#4
(byte) mode_stdchar::i
(byte) mode_stdchar::i#0
(byte) mode_stdchar::i#1
(byte) mode_stdchar::i#2
(void()) mode_twoplanebitmap()
(byte~) mode_twoplanebitmap::$0
(byte~) mode_twoplanebitmap::$1
(byte*~) mode_twoplanebitmap::$10
(byte~) mode_twoplanebitmap::$11
(byte*~) mode_twoplanebitmap::$12
(byte~) mode_twoplanebitmap::$13
(bool~) mode_twoplanebitmap::$14
(byte~) mode_twoplanebitmap::$15
(byte~) mode_twoplanebitmap::$16
(byte~) mode_twoplanebitmap::$17
(byte~) mode_twoplanebitmap::$18
(bool~) mode_twoplanebitmap::$19
(byte~) mode_twoplanebitmap::$2
(bool~) mode_twoplanebitmap::$20
(byte~) mode_twoplanebitmap::$21
(bool~) mode_twoplanebitmap::$22
(bool~) mode_twoplanebitmap::$23
(bool~) mode_twoplanebitmap::$24
(bool~) mode_twoplanebitmap::$25
(bool~) mode_twoplanebitmap::$26
(byte~) mode_twoplanebitmap::$3
(byte~) mode_twoplanebitmap::$4
(byte/word/dword~) mode_twoplanebitmap::$5
(byte~) mode_twoplanebitmap::$6
(byte~) mode_twoplanebitmap::$7
(byte~) mode_twoplanebitmap::$8
(byte~) mode_twoplanebitmap::$9
(label) mode_twoplanebitmap::@1
(label) mode_twoplanebitmap::@10
(label) mode_twoplanebitmap::@11
(label) mode_twoplanebitmap::@12
(label) mode_twoplanebitmap::@13
(label) mode_twoplanebitmap::@15
(label) mode_twoplanebitmap::@16
(label) mode_twoplanebitmap::@17
(label) mode_twoplanebitmap::@18
(label) mode_twoplanebitmap::@19
(label) mode_twoplanebitmap::@2
(label) mode_twoplanebitmap::@3
(label) mode_twoplanebitmap::@4
(label) mode_twoplanebitmap::@5
(label) mode_twoplanebitmap::@6
(label) mode_twoplanebitmap::@7
(label) mode_twoplanebitmap::@8
(label) mode_twoplanebitmap::@9
(label) mode_twoplanebitmap::@return
(byte*) mode_twoplanebitmap::COLORS
(byte*) mode_twoplanebitmap::COLORS#0
(byte*) mode_twoplanebitmap::PLANEA
(byte*) mode_twoplanebitmap::PLANEA#0
(byte*) mode_twoplanebitmap::PLANEB
(byte*) mode_twoplanebitmap::PLANEB#0
(byte) mode_twoplanebitmap::ax
(byte) mode_twoplanebitmap::ax#0
(byte) mode_twoplanebitmap::ax#1
(byte) mode_twoplanebitmap::ax#2
(byte) mode_twoplanebitmap::ax#3
(byte) mode_twoplanebitmap::ax#4
(byte) mode_twoplanebitmap::ax#5
(byte) mode_twoplanebitmap::ay
(byte) mode_twoplanebitmap::ay#0
(byte) mode_twoplanebitmap::ay#1
(byte) mode_twoplanebitmap::ay#2
(byte) mode_twoplanebitmap::ay#3
(byte) mode_twoplanebitmap::ay#4
(byte) mode_twoplanebitmap::ay#5
(byte) mode_twoplanebitmap::ay#6
(byte) mode_twoplanebitmap::ay#7
(byte) mode_twoplanebitmap::bx
(byte) mode_twoplanebitmap::bx#0
(byte) mode_twoplanebitmap::bx#1
(byte) mode_twoplanebitmap::bx#2
(byte) mode_twoplanebitmap::by
(byte) mode_twoplanebitmap::by#0
(byte) mode_twoplanebitmap::by#1
(byte) mode_twoplanebitmap::by#2
(byte) mode_twoplanebitmap::by#3
(byte) mode_twoplanebitmap::by#4
(byte*) mode_twoplanebitmap::col
(byte*) mode_twoplanebitmap::col#0
(byte*) mode_twoplanebitmap::col#1
(byte*) mode_twoplanebitmap::col#2
(byte*) mode_twoplanebitmap::col#3
(byte*) mode_twoplanebitmap::col#4
(byte) mode_twoplanebitmap::cx
(byte) mode_twoplanebitmap::cx#0
(byte) mode_twoplanebitmap::cx#1
(byte) mode_twoplanebitmap::cx#2
(byte) mode_twoplanebitmap::cy
(byte) mode_twoplanebitmap::cy#0
(byte) mode_twoplanebitmap::cy#1
(byte) mode_twoplanebitmap::cy#2
(byte) mode_twoplanebitmap::cy#3
(byte) mode_twoplanebitmap::cy#4
(byte*) mode_twoplanebitmap::gfxa
(byte*) mode_twoplanebitmap::gfxa#0
(byte*) mode_twoplanebitmap::gfxa#1
(byte*) mode_twoplanebitmap::gfxa#2
(byte*) mode_twoplanebitmap::gfxa#3
(byte*) mode_twoplanebitmap::gfxa#4
(byte*) mode_twoplanebitmap::gfxa#5
(byte*) mode_twoplanebitmap::gfxa#6
(byte*) mode_twoplanebitmap::gfxa#7
(byte*) mode_twoplanebitmap::gfxa#8
(byte*) mode_twoplanebitmap::gfxb
(byte*) mode_twoplanebitmap::gfxb#0
(byte*) mode_twoplanebitmap::gfxb#1
(byte*) mode_twoplanebitmap::gfxb#2
(byte*) mode_twoplanebitmap::gfxb#3
(byte*) mode_twoplanebitmap::gfxb#4
(byte) mode_twoplanebitmap::i
(byte) mode_twoplanebitmap::i#0
(byte) mode_twoplanebitmap::i#1
(byte) mode_twoplanebitmap::i#2
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#100
(byte*) print_char_cursor#101
(byte*) print_char_cursor#102
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#77
(byte*) print_char_cursor#78
(byte*) print_char_cursor#79
(byte*) print_char_cursor#8
(byte*) print_char_cursor#80
(byte*) print_char_cursor#81
(byte*) print_char_cursor#82
(byte*) print_char_cursor#83
(byte*) print_char_cursor#84
(byte*) print_char_cursor#85
(byte*) print_char_cursor#86
(byte*) print_char_cursor#87
(byte*) print_char_cursor#88
(byte*) print_char_cursor#89
(byte*) print_char_cursor#9
(byte*) print_char_cursor#90
(byte*) print_char_cursor#91
(byte*) print_char_cursor#92
(byte*) print_char_cursor#93
(byte*) print_char_cursor#94
(byte*) print_char_cursor#95
(byte*) print_char_cursor#96
(byte*) print_char_cursor#97
(byte*) print_char_cursor#98
(byte*) print_char_cursor#99
(void()) print_cls()
(byte*~) print_cls::$0
(bool~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#100
(byte*) print_line_cursor#101
(byte*) print_line_cursor#102
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#45
(byte*) print_line_cursor#46
(byte*) print_line_cursor#47
(byte*) print_line_cursor#48
(byte*) print_line_cursor#49
(byte*) print_line_cursor#5
(byte*) print_line_cursor#50
(byte*) print_line_cursor#51
(byte*) print_line_cursor#52
(byte*) print_line_cursor#53
(byte*) print_line_cursor#54
(byte*) print_line_cursor#55
(byte*) print_line_cursor#56
(byte*) print_line_cursor#57
(byte*) print_line_cursor#58
(byte*) print_line_cursor#59
(byte*) print_line_cursor#6
(byte*) print_line_cursor#60
(byte*) print_line_cursor#61
(byte*) print_line_cursor#62
(byte*) print_line_cursor#63
(byte*) print_line_cursor#64
(byte*) print_line_cursor#65
(byte*) print_line_cursor#66
(byte*) print_line_cursor#67
(byte*) print_line_cursor#68
(byte*) print_line_cursor#69
(byte*) print_line_cursor#7
(byte*) print_line_cursor#70
(byte*) print_line_cursor#71
(byte*) print_line_cursor#72
(byte*) print_line_cursor#73
(byte*) print_line_cursor#74
(byte*) print_line_cursor#75
(byte*) print_line_cursor#76
(byte*) print_line_cursor#77
(byte*) print_line_cursor#78
(byte*) print_line_cursor#79
(byte*) print_line_cursor#8
(byte*) print_line_cursor#80
(byte*) print_line_cursor#81
(byte*) print_line_cursor#82
(byte*) print_line_cursor#83
(byte*) print_line_cursor#84
(byte*) print_line_cursor#85
(byte*) print_line_cursor#86
(byte*) print_line_cursor#87
(byte*) print_line_cursor#88
(byte*) print_line_cursor#89
(byte*) print_line_cursor#9
(byte*) print_line_cursor#90
(byte*) print_line_cursor#91
(byte*) print_line_cursor#92
(byte*) print_line_cursor#93
(byte*) print_line_cursor#94
(byte*) print_line_cursor#95
(byte*) print_line_cursor#96
(byte*) print_line_cursor#97
(byte*) print_line_cursor#98
(byte*) print_line_cursor#99
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#10
(byte*) print_screen#11
(byte*) print_screen#12
(byte*) print_screen#13
(byte*) print_screen#14
(byte*) print_screen#15
(byte*) print_screen#16
(byte*) print_screen#17
(byte*) print_screen#18
(byte*) print_screen#19
(byte*) print_screen#2
(byte*) print_screen#20
(byte*) print_screen#21
(byte*) print_screen#22
(byte*) print_screen#23
(byte*) print_screen#24
(byte*) print_screen#25
(byte*) print_screen#26
(byte*) print_screen#27
(byte*) print_screen#28
(byte*) print_screen#29
(byte*) print_screen#3
(byte*) print_screen#30
(byte*) print_screen#31
(byte*) print_screen#32
(byte*) print_screen#33
(byte*) print_screen#34
(byte*) print_screen#35
(byte*) print_screen#36
(byte*) print_screen#37
(byte*) print_screen#38
(byte*) print_screen#39
(byte*) print_screen#4
(byte*) print_screen#40
(byte*) print_screen#41
(byte*) print_screen#42
(byte*) print_screen#43
(byte*) print_screen#44
(byte*) print_screen#45
(byte*) print_screen#46
(byte*) print_screen#47
(byte*) print_screen#48
(byte*) print_screen#49
(byte*) print_screen#5
(byte*) print_screen#50
(byte*) print_screen#51
(byte*) print_screen#52
(byte*) print_screen#53
(byte*) print_screen#54
(byte*) print_screen#55
(byte*) print_screen#56
(byte*) print_screen#57
(byte*) print_screen#58
(byte*) print_screen#59
(byte*) print_screen#6
(byte*) print_screen#60
(byte*) print_screen#61
(byte*) print_screen#62
(byte*) print_screen#63
(byte*) print_screen#64
(byte*) print_screen#65
(byte*) print_screen#66
(byte*) print_screen#67
(byte*) print_screen#68
(byte*) print_screen#69
(byte*) print_screen#7
(byte*) print_screen#70
(byte*) print_screen#71
(byte*) print_screen#72
(byte*) print_screen#73
(byte*) print_screen#74
(byte*) print_screen#75
(byte*) print_screen#76
(byte*) print_screen#77
(byte*) print_screen#78
(byte*) print_screen#79
(byte*) print_screen#8
(byte*) print_screen#80
(byte*) print_screen#81
(byte*) print_screen#82
(byte*) print_screen#83
(byte*) print_screen#9
(void()) print_set_screen((byte*) print_set_screen::screen)
(label) print_set_screen::@return
(byte*) print_set_screen::screen
(byte*) print_set_screen::screen#0
(byte*) print_set_screen::screen#1
(void()) print_str_lines((byte*) print_str_lines::str)
(bool~) print_str_lines::$0
(bool~) print_str_lines::$1
(bool~) print_str_lines::$2
(bool~) print_str_lines::$3
(label) print_str_lines::@1
(label) print_str_lines::@11
(label) print_str_lines::@2
(label) print_str_lines::@4
(label) print_str_lines::@5
(label) print_str_lines::@8
(label) print_str_lines::@9
(label) print_str_lines::@return
(byte) print_str_lines::ch
(byte) print_str_lines::ch#0
(byte) print_str_lines::ch#1
(byte) print_str_lines::ch#2
(byte*) print_str_lines::str
(byte*) print_str_lines::str#0
(byte*) print_str_lines::str#1
(byte*) print_str_lines::str#2
(byte*) print_str_lines::str#3
(byte*) print_str_lines::str#4
(byte*) print_str_lines::str#5
(byte*) print_str_lines::str#6
(byte*) print_str_lines::str#7
(byte*) print_str_lines::str#8
(byte*) print_str_lines::str#9

Culled Empty Block (label) bitmap_line::@29
Culled Empty Block (label) bitmap_line::@30
Culled Empty Block (label) bitmap_line::@31
Culled Empty Block (label) bitmap_line::@32
Culled Empty Block (label) bitmap_line::@33
Culled Empty Block (label) bitmap_line::@34
Culled Empty Block (label) bitmap_line::@35
Culled Empty Block (label) bitmap_line::@36
Successful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not [191] (bool~) print_str_lines::$2 ← (byte) print_str_lines::ch#0 == (byte) '@' from [190] (bool~) print_str_lines::$1 ← (byte) print_str_lines::ch#0 != (byte) '@'
Inversing boolean not [366] (bool~) bitmap_init::$4 ← (byte) bitmap_init::bits#1 != (byte/signed byte/word/signed word/dword/signed dword) 0 from [365] (bool~) bitmap_init::$3 ← (byte) bitmap_init::bits#1 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [385] (bool~) bitmap_init::$12 ← (byte~) bitmap_init::$10 != (byte/signed byte/word/signed word/dword/signed dword) 7 from [384] (bool~) bitmap_init::$11 ← (byte~) bitmap_init::$10 == (byte/signed byte/word/signed word/dword/signed dword) 7
Inversing boolean not [524] (bool~) bitmap_line_xdyi::$4 ← (byte) bitmap_line_xdyi::xd#2 >= (byte) bitmap_line_xdyi::e#1 from [523] (bool~) bitmap_line_xdyi::$3 ← (byte) bitmap_line_xdyi::xd#2 < (byte) bitmap_line_xdyi::e#1
Inversing boolean not [547] (bool~) bitmap_line_xdyd::$4 ← (byte) bitmap_line_xdyd::xd#2 >= (byte) bitmap_line_xdyd::e#1 from [546] (bool~) bitmap_line_xdyd::$3 ← (byte) bitmap_line_xdyd::xd#2 < (byte) bitmap_line_xdyd::e#1
Inversing boolean not [570] (bool~) bitmap_line_ydxi::$4 ← (byte) bitmap_line_ydxi::yd#2 >= (byte) bitmap_line_ydxi::e#1 from [569] (bool~) bitmap_line_ydxi::$3 ← (byte) bitmap_line_ydxi::yd#2 < (byte) bitmap_line_ydxi::e#1
Inversing boolean not [594] (bool~) bitmap_line_ydxd::$4 ← (byte) bitmap_line_ydxd::yd#2 >= (byte) bitmap_line_ydxd::e#1 from [593] (bool~) bitmap_line_ydxd::$3 ← (byte) bitmap_line_ydxd::yd#2 < (byte) bitmap_line_ydxd::e#1
Inversing boolean not [723] (bool~) menu::$31 ← (byte~) menu::$29 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [722] (bool~) menu::$30 ← (byte~) menu::$29 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [732] (bool~) menu::$35 ← (byte~) menu::$33 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [731] (bool~) menu::$34 ← (byte~) menu::$33 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [751] (bool~) menu::$39 ← (byte~) menu::$37 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [750] (bool~) menu::$38 ← (byte~) menu::$37 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [764] (bool~) menu::$43 ← (byte~) menu::$41 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [763] (bool~) menu::$42 ← (byte~) menu::$41 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [777] (bool~) menu::$47 ← (byte~) menu::$45 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [776] (bool~) menu::$46 ← (byte~) menu::$45 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [790] (bool~) menu::$51 ← (byte~) menu::$49 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [789] (bool~) menu::$50 ← (byte~) menu::$49 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [803] (bool~) menu::$55 ← (byte~) menu::$53 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [802] (bool~) menu::$54 ← (byte~) menu::$53 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [816] (bool~) menu::$59 ← (byte~) menu::$57 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [815] (bool~) menu::$58 ← (byte~) menu::$57 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [829] (bool~) menu::$63 ← (byte~) menu::$61 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [828] (bool~) menu::$62 ← (byte~) menu::$61 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [842] (bool~) menu::$67 ← (byte~) menu::$65 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [841] (bool~) menu::$66 ← (byte~) menu::$65 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [855] (bool~) menu::$71 ← (byte~) menu::$69 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [854] (bool~) menu::$70 ← (byte~) menu::$69 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [868] (bool~) menu::$75 ← (byte~) menu::$73 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [867] (bool~) menu::$74 ← (byte~) menu::$73 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [896] (bool~) mode_ctrl::$3 ← (byte~) mode_ctrl::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [895] (bool~) mode_ctrl::$2 ← (byte~) mode_ctrl::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [906] (bool~) mode_ctrl::$6 ← (byte~) mode_ctrl::$4 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [905] (bool~) mode_ctrl::$5 ← (byte~) mode_ctrl::$4 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [918] (bool~) mode_ctrl::$10 ← (byte~) mode_ctrl::$8 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [917] (bool~) mode_ctrl::$9 ← (byte~) mode_ctrl::$8 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [930] (bool~) mode_ctrl::$14 ← (byte~) mode_ctrl::$12 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [929] (bool~) mode_ctrl::$13 ← (byte~) mode_ctrl::$12 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [942] (bool~) mode_ctrl::$18 ← (byte~) mode_ctrl::$16 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [941] (bool~) mode_ctrl::$17 ← (byte~) mode_ctrl::$16 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [954] (bool~) mode_ctrl::$22 ← (byte~) mode_ctrl::$20 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [953] (bool~) mode_ctrl::$21 ← (byte~) mode_ctrl::$20 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [966] (bool~) mode_ctrl::$26 ← (byte~) mode_ctrl::$24 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [965] (bool~) mode_ctrl::$25 ← (byte~) mode_ctrl::$24 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [978] (bool~) mode_ctrl::$30 ← (byte~) mode_ctrl::$28 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [977] (bool~) mode_ctrl::$29 ← (byte~) mode_ctrl::$28 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [985] (bool~) mode_ctrl::$32 ← (byte) mode_ctrl::ctrl#14 == (byte) dtv_control#72 from [984] (bool~) mode_ctrl::$31 ← (byte) mode_ctrl::ctrl#14 != (byte) dtv_control#72
Inversing boolean not [1925] (bool~) mode_8bpppixelcell::$21 ← (byte~) mode_8bpppixelcell::$19 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [1924] (bool~) mode_8bpppixelcell::$20 ← (byte~) mode_8bpppixelcell::$19 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [2002] (bool~) mode_8bppchunkybmm::$21 ← (byte*) mode_8bppchunkybmm::gfxb#3 != (word/dword/signed dword) $8000 from [2001] (bool~) mode_8bppchunkybmm::$20 ← (byte*) mode_8bppchunkybmm::gfxb#3 == (word/dword/signed dword) $8000
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) print_screen#0 = (byte*) print_line_cursor#0 (byte*) print_char_cursor#0 (byte*) print_screen#83 (byte*) print_line_cursor#102 (byte*) print_char_cursor#102 (byte*) print_screen#82 (byte*) print_line_cursor#101 (byte*) print_char_cursor#101 (byte*) print_screen#80 (byte*) print_line_cursor#99 (byte*) print_char_cursor#99 (byte*) print_screen#66 (byte*) print_line_cursor#85 (byte*) print_char_cursor#85 (byte*) print_screen#65 (byte*) print_line_cursor#83 (byte*) print_char_cursor#84 (byte*) print_screen#50 (byte*) print_line_cursor#67 (byte*) print_char_cursor#70 (byte*) print_screen#33 (byte*) print_line_cursor#49 (byte*) print_char_cursor#51 
Alias (byte*) print_str_lines::str#2 = (byte*) print_str_lines::str#6 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#53 (byte*) print_char_cursor#33 (byte*) print_char_cursor#3 
Alias (byte*) print_line_cursor#17 = (byte*) print_line_cursor#84 (byte*) print_line_cursor#31 (byte*) print_line_cursor#2 
Alias (byte) print_str_lines::ch#0 = (byte) print_str_lines::ch#2 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#31 
Alias (byte*) print_str_lines::str#0 = (byte*) print_str_lines::str#8 
Alias (byte*) print_line_cursor#68 = (byte*) print_line_cursor#69 
Alias (byte*) print_line_cursor#30 = (byte*) print_line_cursor#51 
Alias (byte*) print_char_cursor#32 = (byte*) print_char_cursor#54 
Alias (byte*) print_str_lines::str#5 = (byte*) print_str_lines::str#9 (byte*) print_str_lines::str#7 
Alias (byte*) print_line_cursor#1 = (byte*) print_line_cursor#16 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#2 
Alias (byte*) print_line_cursor#19 = (byte*) print_line_cursor#3 (byte*~) print_ln::$0 (byte*) print_char_cursor#4 (byte*) print_line_cursor#20 (byte*) print_char_cursor#21 (byte*) print_line_cursor#4 (byte*) print_char_cursor#5 
Alias (byte*) print_line_cursor#21 = (byte*) print_screen#10 (byte*) print_screen#9 (byte*) print_line_cursor#5 (byte*) print_char_cursor#6 (byte*) print_char_cursor#22 (byte*) print_line_cursor#6 (byte*) print_char_cursor#7 
Alias (byte*) print_screen#1 = (byte*) print_line_cursor#7 (byte*) print_char_cursor#8 (byte*) print_screen#11 (byte*) print_line_cursor#22 (byte*) print_char_cursor#23 (byte*) print_screen#2 (byte*) print_line_cursor#8 (byte*) print_char_cursor#9 
Alias (byte) keyboard_matrix_read::return#0 = (byte) keyboard_matrix_read::row_pressed_bits#0 (byte~) keyboard_matrix_read::$0 (byte) keyboard_matrix_read::return#3 (byte) keyboard_matrix_read::return#1 
Alias (byte) keyboard_key_pressed::colidx#0 = (byte~) keyboard_key_pressed::$0 (byte) keyboard_key_pressed::colidx#1 
Alias (byte) keyboard_key_pressed::rowidx#0 = (byte~) keyboard_key_pressed::$1 
Alias (byte) keyboard_matrix_read::return#2 = (byte) keyboard_matrix_read::return#4 
Alias (byte) keyboard_key_pressed::return#0 = (byte~) keyboard_key_pressed::$3 (byte) keyboard_key_pressed::return#22 (byte) keyboard_key_pressed::return#1 
Alias (byte) KEY_MODIFIER_SHIFT#0 = (byte~) $0 
Alias (byte) bitmap_init::bits#1 = (byte~) bitmap_init::$2 
Alias (byte) bitmap_init::x#2 = (byte) bitmap_init::x#4 
Alias (byte*) bitmap_init::bitmap#1 = (byte*) bitmap_init::bitmap#4 
Alias (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#3 
Alias (byte) bitmap_init::y#2 = (byte) bitmap_init::y#4 
Alias (byte*) bitmap_init::yoffs#1 = (byte*~) bitmap_init::$14 
Alias (byte*) bitmap_clear::bitmap#0 = (byte*~) bitmap_clear::$0 
Alias (byte) bitmap_clear::y#2 = (byte) bitmap_clear::y#3 
Alias (byte*) bitmap_clear::bitmap#1 = (byte*) bitmap_clear::bitmap#4 
Alias (byte) bitmap_line::x1#1 = (byte) bitmap_line::x1#2 (byte) bitmap_line::x1#3 (byte) bitmap_line::x1#11 (byte) bitmap_line::x1#10 (byte) bitmap_line::x1#4 (byte) bitmap_line::x1#5 (byte) bitmap_line::x1#6 (byte) bitmap_line::x1#13 (byte) bitmap_line::x1#12 (byte) bitmap_line::x1#7 (byte) bitmap_line::x1#8 (byte) bitmap_line::x1#9 
Alias (byte) bitmap_line::x0#1 = (byte) bitmap_line::x0#2 (byte) bitmap_line::x0#3 (byte) bitmap_line::x0#11 (byte) bitmap_line::x0#10 (byte) bitmap_line::x0#4 (byte) bitmap_line::x0#5 (byte) bitmap_line::x0#6 (byte) bitmap_line::x0#13 (byte) bitmap_line::x0#12 (byte) bitmap_line::x0#7 (byte) bitmap_line::x0#8 (byte) bitmap_line::x0#9 
Alias (byte) bitmap_line::y0#1 = (byte) bitmap_line::y0#13 (byte) bitmap_line::y0#2 (byte) bitmap_line::y0#3 (byte) bitmap_line::y0#4 (byte) bitmap_line::y0#5 (byte) bitmap_line::y0#6 (byte) bitmap_line::y0#7 (byte) bitmap_line::y0#8 (byte) bitmap_line::y0#9 (byte) bitmap_line::y0#10 (byte) bitmap_line::y0#11 (byte) bitmap_line::y0#12 
Alias (byte) bitmap_line::y1#1 = (byte) bitmap_line::y1#13 (byte) bitmap_line::y1#2 (byte) bitmap_line::y1#3 (byte) bitmap_line::y1#4 (byte) bitmap_line::y1#5 (byte) bitmap_line::y1#6 (byte) bitmap_line::y1#7 (byte) bitmap_line::y1#8 (byte) bitmap_line::y1#9 (byte) bitmap_line::y1#10 (byte) bitmap_line::y1#11 (byte) bitmap_line::y1#12 
Alias (byte) bitmap_line::xd#1 = (byte~) bitmap_line::$11 (byte) bitmap_line::xd#9 (byte) bitmap_line::xd#10 (byte) bitmap_line::xd#11 (byte) bitmap_line::xd#12 (byte) bitmap_line::xd#13 (byte) bitmap_line::xd#14 
Alias (byte) bitmap_line::xd#2 = (byte~) bitmap_line::$1 (byte) bitmap_line::xd#3 (byte) bitmap_line::xd#4 (byte) bitmap_line::xd#5 (byte) bitmap_line::xd#6 (byte) bitmap_line::xd#7 (byte) bitmap_line::xd#8 
Alias (byte) bitmap_line::yd#1 = (byte~) bitmap_line::$7 (byte) bitmap_line::yd#7 (byte) bitmap_line::yd#8 
Alias (byte) bitmap_line::yd#2 = (byte~) bitmap_line::$3 (byte) bitmap_line::yd#5 (byte) bitmap_line::yd#6 
Alias (byte) bitmap_line::yd#11 = (byte) bitmap_line::yd#3 (byte~) bitmap_line::$17 (byte) bitmap_line::yd#12 
Alias (byte) bitmap_line::yd#10 = (byte) bitmap_line::yd#4 (byte~) bitmap_line::$13 (byte) bitmap_line::yd#9 
Alias (byte) bitmap_line_xdyi::e#0 = (byte~) bitmap_line_xdyi::$0 
Alias (byte) bitmap_line_xdyi::x#3 = (byte) bitmap_line_xdyi::x#4 
Alias (byte) bitmap_line_xdyi::e#3 = (byte) bitmap_line_xdyi::e#5 
Alias (byte) bitmap_line_xdyi::yd#3 = (byte) bitmap_line_xdyi::yd#4 (byte) bitmap_line_xdyi::yd#6 
Alias (byte) bitmap_line_xdyi::xd#2 = (byte) bitmap_line_xdyi::xd#4 (byte) bitmap_line_xdyi::xd#3 
Alias (byte) bitmap_line_xdyi::x1#3 = (byte) bitmap_line_xdyi::x1#4 (byte) bitmap_line_xdyi::x1#5 
Alias (byte) bitmap_line_xdyi::y#3 = (byte) bitmap_line_xdyi::y#7 (byte) bitmap_line_xdyi::y#4 
Alias (byte) bitmap_line_xdyi::e#1 = (byte~) bitmap_line_xdyi::$2 (byte) bitmap_line_xdyi::e#4 
Alias (byte) bitmap_line_xdyi::x#2 = (byte) bitmap_line_xdyi::x#7 
Alias (byte) bitmap_line_xdyi::e#2 = (byte~) bitmap_line_xdyi::$5 
Alias (byte) bitmap_line_xdyd::e#0 = (byte~) bitmap_line_xdyd::$0 
Alias (byte) bitmap_line_xdyd::x#3 = (byte) bitmap_line_xdyd::x#4 
Alias (byte) bitmap_line_xdyd::e#3 = (byte) bitmap_line_xdyd::e#5 
Alias (byte) bitmap_line_xdyd::yd#3 = (byte) bitmap_line_xdyd::yd#4 (byte) bitmap_line_xdyd::yd#6 
Alias (byte) bitmap_line_xdyd::xd#2 = (byte) bitmap_line_xdyd::xd#4 (byte) bitmap_line_xdyd::xd#3 
Alias (byte) bitmap_line_xdyd::x1#3 = (byte) bitmap_line_xdyd::x1#4 (byte) bitmap_line_xdyd::x1#5 
Alias (byte) bitmap_line_xdyd::y#3 = (byte) bitmap_line_xdyd::y#7 (byte) bitmap_line_xdyd::y#4 
Alias (byte) bitmap_line_xdyd::e#1 = (byte~) bitmap_line_xdyd::$2 (byte) bitmap_line_xdyd::e#4 
Alias (byte) bitmap_line_xdyd::x#2 = (byte) bitmap_line_xdyd::x#7 
Alias (byte) bitmap_line_xdyd::e#2 = (byte~) bitmap_line_xdyd::$5 
Alias (byte) bitmap_line_ydxi::e#0 = (byte~) bitmap_line_ydxi::$0 
Alias (byte) bitmap_line_ydxi::y#3 = (byte) bitmap_line_ydxi::y#4 
Alias (byte) bitmap_line_ydxi::e#3 = (byte) bitmap_line_ydxi::e#5 
Alias (byte) bitmap_line_ydxi::xd#3 = (byte) bitmap_line_ydxi::xd#4 (byte) bitmap_line_ydxi::xd#6 
Alias (byte) bitmap_line_ydxi::yd#2 = (byte) bitmap_line_ydxi::yd#4 (byte) bitmap_line_ydxi::yd#3 
Alias (byte) bitmap_line_ydxi::y1#3 = (byte) bitmap_line_ydxi::y1#4 (byte) bitmap_line_ydxi::y1#5 
Alias (byte) bitmap_line_ydxi::x#3 = (byte) bitmap_line_ydxi::x#7 (byte) bitmap_line_ydxi::x#4 
Alias (byte) bitmap_line_ydxi::e#1 = (byte~) bitmap_line_ydxi::$2 (byte) bitmap_line_ydxi::e#4 
Alias (byte) bitmap_line_ydxi::y#2 = (byte) bitmap_line_ydxi::y#7 
Alias (byte) bitmap_line_ydxi::e#2 = (byte~) bitmap_line_ydxi::$5 
Alias (byte) bitmap_line_ydxd::e#0 = (byte~) bitmap_line_ydxd::$0 
Alias (byte) bitmap_line_ydxd::y#2 = (byte) bitmap_line_ydxd::y#5 (byte) bitmap_line_ydxd::y#4 
Alias (byte) bitmap_line_ydxd::e#3 = (byte) bitmap_line_ydxd::e#5 
Alias (byte) bitmap_line_ydxd::xd#3 = (byte) bitmap_line_ydxd::xd#4 (byte) bitmap_line_ydxd::xd#6 
Alias (byte) bitmap_line_ydxd::yd#2 = (byte) bitmap_line_ydxd::yd#4 (byte) bitmap_line_ydxd::yd#3 
Alias (byte) bitmap_line_ydxd::y1#3 = (byte) bitmap_line_ydxd::y1#4 (byte) bitmap_line_ydxd::y1#5 
Alias (byte) bitmap_line_ydxd::x#3 = (byte) bitmap_line_ydxd::x#7 (byte) bitmap_line_ydxd::x#4 
Alias (byte) bitmap_line_ydxd::e#1 = (byte~) bitmap_line_ydxd::$2 (byte) bitmap_line_ydxd::e#4 
Alias (byte) bitmap_line_ydxd::y#3 = (byte) bitmap_line_ydxd::y#8 
Alias (byte) bitmap_line_ydxd::e#2 = (byte~) bitmap_line_ydxd::$5 
Alias (byte*) print_screen#13 = (byte*) print_screen#17 (byte*) print_screen#18 (byte*) print_screen#4 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#33 (byte*) print_line_cursor#34 (byte*) print_line_cursor#24 
Alias (byte*) print_char_cursor#11 = (byte*) print_char_cursor#35 (byte*) print_char_cursor#36 (byte*) print_char_cursor#25 
Alias (byte) dtv_control#1 = (byte) dtv_control#98 (byte) dtv_control#99 (byte) dtv_control#56 
Alias (byte*) print_screen#12 = (byte*) print_screen#3 
Alias (byte*) print_line_cursor#23 = (byte*) print_line_cursor#9 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#24 
Alias (byte) dtv_control#0 = (byte) dtv_control#55 
Alias (byte[]) MENU_TEXT#0 = (string~) $20 
Alias (byte*) print_screen#51 = (byte*) print_screen#67 
Alias (byte*) print_line_cursor#70 = (byte*) print_line_cursor#86 
Alias (byte*) print_char_cursor#71 = (byte*) print_char_cursor#86 
Alias (byte) dtv_control#237 = (byte) dtv_control#246 
Alias (byte*) print_screen#19 = (byte*) print_screen#35 
Alias (byte*) print_line_cursor#35 = (byte*) print_line_cursor#53 
Alias (byte*) print_char_cursor#37 = (byte*) print_char_cursor#56 
Alias (byte) dtv_control#132 = (byte) dtv_control#205 (byte) dtv_control#222 (byte) dtv_control#189 (byte) dtv_control#161 
Alias (byte*) print_screen#14 = (byte*) print_screen#5 (byte*) print_screen#52 (byte*) print_screen#37 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#25 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#26 
Alias (byte*) print_line_cursor#12 = (byte*) print_line_cursor#26 
Alias (byte*) print_char_cursor#13 = (byte*) print_char_cursor#27 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#28 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#27 
Alias (byte) dtv_control#100 = (byte) dtv_control#162 (byte) dtv_control#101 (byte) dtv_control#133 (byte) dtv_control#163 (byte) dtv_control#134 (byte) dtv_control#164 (byte) dtv_control#135 (byte) dtv_control#102 (byte) dtv_control#165 (byte) dtv_control#136 (byte) dtv_control#103 (byte) dtv_control#166 (byte) dtv_control#137 (byte) dtv_control#104 (byte) dtv_control#167 (byte) dtv_control#138 (byte) dtv_control#105 (byte) dtv_control#168 (byte) dtv_control#139 (byte) dtv_control#106 (byte) dtv_control#169 (byte) dtv_control#140 (byte) dtv_control#107 (byte) dtv_control#170 (byte) dtv_control#141 (byte) dtv_control#108 (byte) dtv_control#171 (byte) dtv_control#142 (byte) dtv_control#109 (byte) dtv_control#172 (byte) dtv_control#143 (byte) dtv_control#110 (byte) dtv_control#173 (byte) dtv_control#144 (byte) dtv_control#111 (byte) dtv_control#131 (byte) dtv_control#112 
Alias (byte*) print_screen#20 = (byte*) print_screen#68 (byte*) print_screen#53 (byte*) print_screen#69 (byte*) print_screen#54 (byte*) print_screen#38 (byte*) print_screen#21 (byte*) print_screen#70 (byte*) print_screen#55 (byte*) print_screen#39 (byte*) print_screen#22 (byte*) print_screen#71 (byte*) print_screen#56 (byte*) print_screen#40 (byte*) print_screen#23 (byte*) print_screen#72 (byte*) print_screen#57 (byte*) print_screen#41 (byte*) print_screen#24 (byte*) print_screen#73 (byte*) print_screen#58 (byte*) print_screen#42 (byte*) print_screen#25 (byte*) print_screen#74 (byte*) print_screen#59 (byte*) print_screen#43 (byte*) print_screen#26 (byte*) print_screen#75 (byte*) print_screen#60 (byte*) print_screen#44 (byte*) print_screen#27 (byte*) print_screen#76 (byte*) print_screen#61 (byte*) print_screen#45 (byte*) print_screen#28 (byte*) print_screen#77 (byte*) print_screen#62 (byte*) print_screen#46 (byte*) print_screen#29 (byte*) print_screen#78 (byte*) print_screen#63 (byte*) print_screen#47 (byte*) print_screen#30 (byte*) print_screen#79 (byte*) print_screen#64 (byte*) print_screen#48 (byte*) print_screen#31 (byte*) print_screen#36 (byte*) print_screen#49 (byte*) print_screen#32 
Alias (byte*) print_line_cursor#36 = (byte*) print_line_cursor#87 (byte*) print_line_cursor#71 (byte*) print_line_cursor#88 (byte*) print_line_cursor#72 (byte*) print_line_cursor#55 (byte*) print_line_cursor#37 (byte*) print_line_cursor#89 (byte*) print_line_cursor#73 (byte*) print_line_cursor#56 (byte*) print_line_cursor#38 (byte*) print_line_cursor#90 (byte*) print_line_cursor#74 (byte*) print_line_cursor#57 (byte*) print_line_cursor#39 (byte*) print_line_cursor#91 (byte*) print_line_cursor#75 (byte*) print_line_cursor#58 (byte*) print_line_cursor#40 (byte*) print_line_cursor#92 (byte*) print_line_cursor#76 (byte*) print_line_cursor#59 (byte*) print_line_cursor#41 (byte*) print_line_cursor#93 (byte*) print_line_cursor#77 (byte*) print_line_cursor#60 (byte*) print_line_cursor#42 (byte*) print_line_cursor#94 (byte*) print_line_cursor#78 (byte*) print_line_cursor#61 (byte*) print_line_cursor#43 (byte*) print_line_cursor#95 (byte*) print_line_cursor#79 (byte*) print_line_cursor#62 (byte*) print_line_cursor#44 (byte*) print_line_cursor#96 (byte*) print_line_cursor#80 (byte*) print_line_cursor#63 (byte*) print_line_cursor#45 (byte*) print_line_cursor#97 (byte*) print_line_cursor#81 (byte*) print_line_cursor#64 (byte*) print_line_cursor#46 (byte*) print_line_cursor#98 (byte*) print_line_cursor#82 (byte*) print_line_cursor#65 (byte*) print_line_cursor#47 (byte*) print_line_cursor#54 (byte*) print_line_cursor#66 (byte*) print_line_cursor#48 
Alias (byte*) print_char_cursor#38 = (byte*) print_char_cursor#87 (byte*) print_char_cursor#72 (byte*) print_char_cursor#88 (byte*) print_char_cursor#73 (byte*) print_char_cursor#58 (byte*) print_char_cursor#39 (byte*) print_char_cursor#89 (byte*) print_char_cursor#74 (byte*) print_char_cursor#59 (byte*) print_char_cursor#40 (byte*) print_char_cursor#90 (byte*) print_char_cursor#75 (byte*) print_char_cursor#60 (byte*) print_char_cursor#41 (byte*) print_char_cursor#91 (byte*) print_char_cursor#76 (byte*) print_char_cursor#61 (byte*) print_char_cursor#42 (byte*) print_char_cursor#92 (byte*) print_char_cursor#77 (byte*) print_char_cursor#62 (byte*) print_char_cursor#43 (byte*) print_char_cursor#93 (byte*) print_char_cursor#78 (byte*) print_char_cursor#63 (byte*) print_char_cursor#44 (byte*) print_char_cursor#94 (byte*) print_char_cursor#79 (byte*) print_char_cursor#64 (byte*) print_char_cursor#45 (byte*) print_char_cursor#95 (byte*) print_char_cursor#80 (byte*) print_char_cursor#65 (byte*) print_char_cursor#46 (byte*) print_char_cursor#96 (byte*) print_char_cursor#81 (byte*) print_char_cursor#66 (byte*) print_char_cursor#47 (byte*) print_char_cursor#97 (byte*) print_char_cursor#82 (byte*) print_char_cursor#67 (byte*) print_char_cursor#48 (byte*) print_char_cursor#98 (byte*) print_char_cursor#83 (byte*) print_char_cursor#68 (byte*) print_char_cursor#49 (byte*) print_char_cursor#57 (byte*) print_char_cursor#69 (byte*) print_char_cursor#50 
Alias (byte) keyboard_key_pressed::return#2 = (byte) keyboard_key_pressed::return#23 
Alias (byte) keyboard_key_pressed::return#24 = (byte) keyboard_key_pressed::return#3 
Alias (byte) dtv_control#2 = (byte) dtv_control#57 
Alias (byte*) print_screen#15 = (byte*) print_screen#6 
Alias (byte*) print_line_cursor#14 = (byte*) print_line_cursor#28 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#29 
Alias (byte) dtv_control#3 = (byte) dtv_control#58 
Alias (byte) keyboard_key_pressed::return#25 = (byte) keyboard_key_pressed::return#4 
Alias (byte) dtv_control#4 = (byte) dtv_control#59 
Alias (byte) keyboard_key_pressed::return#26 = (byte) keyboard_key_pressed::return#5 
Alias (byte) dtv_control#5 = (byte) dtv_control#60 
Alias (byte) keyboard_key_pressed::return#27 = (byte) keyboard_key_pressed::return#6 
Alias (byte) dtv_control#6 = (byte) dtv_control#61 
Alias (byte) keyboard_key_pressed::return#28 = (byte) keyboard_key_pressed::return#7 
Alias (byte) dtv_control#62 = (byte) dtv_control#7 
Alias (byte) keyboard_key_pressed::return#29 = (byte) keyboard_key_pressed::return#8 
Alias (byte) dtv_control#63 = (byte) dtv_control#8 
Alias (byte) keyboard_key_pressed::return#30 = (byte) keyboard_key_pressed::return#9 
Alias (byte) dtv_control#64 = (byte) dtv_control#9 
Alias (byte) keyboard_key_pressed::return#10 = (byte) keyboard_key_pressed::return#31 
Alias (byte) dtv_control#10 = (byte) dtv_control#65 
Alias (byte) keyboard_key_pressed::return#11 = (byte) keyboard_key_pressed::return#32 
Alias (byte) dtv_control#11 = (byte) dtv_control#66 
Alias (byte) keyboard_key_pressed::return#12 = (byte) keyboard_key_pressed::return#33 
Alias (byte) dtv_control#12 = (byte) dtv_control#67 
Alias (byte) keyboard_key_pressed::return#13 = (byte) keyboard_key_pressed::return#34 
Alias (byte) dtv_control#13 = (byte) dtv_control#68 
Alias (byte) dtv_control#14 = (byte) dtv_control#69 
Alias (byte) dtv_control#114 = (byte) dtv_control#190 
Alias (byte) dtv_control#113 = (byte) dtv_control#191 (byte) dtv_control#174 (byte) dtv_control#147 (byte) dtv_control#70 (byte) dtv_control#283 (byte) dtv_control#282 
Alias (byte) keyboard_key_pressed::return#14 = (byte) keyboard_key_pressed::return#35 
Alias (byte) keyboard_key_pressed::return#15 = (byte) keyboard_key_pressed::return#36 
Alias (byte) mode_ctrl::ctrl#0 = (byte) mode_ctrl::ctrl#16 (byte) mode_ctrl::ctrl#8 
Alias (byte) dtv_control#16 = (byte) dtv_control#71 
Alias (byte) keyboard_key_pressed::return#16 = (byte) keyboard_key_pressed::return#37 
Alias (byte) mode_ctrl::ctrl#17 = (byte) mode_ctrl::ctrl#23 (byte) mode_ctrl::ctrl#9 
Alias (byte) dtv_control#270 = (byte) dtv_control#271 (byte) dtv_control#277 
Alias (byte) mode_ctrl::ctrl#1 = (byte~) mode_ctrl::$7 
Alias (byte) keyboard_key_pressed::return#17 = (byte) keyboard_key_pressed::return#38 
Alias (byte) mode_ctrl::ctrl#10 = (byte) mode_ctrl::ctrl#18 (byte) mode_ctrl::ctrl#24 
Alias (byte) dtv_control#256 = (byte) dtv_control#257 (byte) dtv_control#264 
Alias (byte) mode_ctrl::ctrl#2 = (byte~) mode_ctrl::$11 
Alias (byte) keyboard_key_pressed::return#18 = (byte) keyboard_key_pressed::return#39 
Alias (byte) mode_ctrl::ctrl#11 = (byte) mode_ctrl::ctrl#19 (byte) mode_ctrl::ctrl#25 
Alias (byte) dtv_control#238 = (byte) dtv_control#239 (byte) dtv_control#247 
Alias (byte) mode_ctrl::ctrl#3 = (byte~) mode_ctrl::$15 
Alias (byte) keyboard_key_pressed::return#19 = (byte) keyboard_key_pressed::return#40 
Alias (byte) mode_ctrl::ctrl#12 = (byte) mode_ctrl::ctrl#20 (byte) mode_ctrl::ctrl#26 
Alias (byte) dtv_control#206 = (byte) dtv_control#207 (byte) dtv_control#223 
Alias (byte) mode_ctrl::ctrl#4 = (byte~) mode_ctrl::$19 
Alias (byte) keyboard_key_pressed::return#20 = (byte) keyboard_key_pressed::return#41 
Alias (byte) mode_ctrl::ctrl#13 = (byte) mode_ctrl::ctrl#21 (byte) mode_ctrl::ctrl#27 
Alias (byte) dtv_control#175 = (byte) dtv_control#176 (byte) dtv_control#192 
Alias (byte) mode_ctrl::ctrl#5 = (byte~) mode_ctrl::$23 
Alias (byte) keyboard_key_pressed::return#21 = (byte) keyboard_key_pressed::return#42 
Alias (byte) mode_ctrl::ctrl#22 = (byte) mode_ctrl::ctrl#28 
Alias (byte) dtv_control#115 = (byte) dtv_control#116 (byte) dtv_control#148 
Alias (byte) mode_ctrl::ctrl#6 = (byte~) mode_ctrl::$27 
Alias (byte) dtv_control#146 = (byte) dtv_control#72 
Alias (byte) mode_ctrl::ctrl#14 = (byte) mode_ctrl::ctrl#15 
Alias (byte) dtv_control#208 = (byte) dtv_control#224 
Alias (byte*) mode_stdchar::COLORS#0 = (byte*) mode_stdchar::col#0 
Alias (byte*) mode_stdchar::SCREEN#0 = (byte*) mode_stdchar::ch#0 
Alias (byte) mode_stdchar::cy#2 = (byte) mode_stdchar::cy#3 
Alias (byte*) mode_stdchar::col#1 = (byte*) mode_stdchar::col#4 
Alias (byte*) mode_stdchar::ch#1 = (byte*) mode_stdchar::ch#4 
Alias (byte) dtv_control#117 = (byte) dtv_control#149 (byte) dtv_control#177 
Alias (byte) dtv_control#19 = (byte) dtv_control#73 (byte) dtv_control#74 (byte) dtv_control#20 
Alias (byte) dtv_control#209 = (byte) dtv_control#225 
Alias (byte*) mode_ecmchar::COLORS#0 = (byte*) mode_ecmchar::col#0 
Alias (byte*) mode_ecmchar::SCREEN#0 = (byte*) mode_ecmchar::ch#0 
Alias (byte) mode_ecmchar::cy#2 = (byte) mode_ecmchar::cy#3 
Alias (byte*) mode_ecmchar::col#1 = (byte*) mode_ecmchar::col#4 
Alias (byte*) mode_ecmchar::ch#1 = (byte*) mode_ecmchar::ch#4 
Alias (byte) dtv_control#118 = (byte) dtv_control#150 (byte) dtv_control#178 
Alias (byte) dtv_control#22 = (byte) dtv_control#75 (byte) dtv_control#76 (byte) dtv_control#23 
Alias (byte) dtv_control#210 = (byte) dtv_control#226 
Alias (byte*) mode_mcchar::COLORS#0 = (byte*) mode_mcchar::col#0 
Alias (byte*) mode_mcchar::SCREEN#0 = (byte*) mode_mcchar::ch#0 
Alias (byte) mode_mcchar::cy#2 = (byte) mode_mcchar::cy#3 
Alias (byte*) mode_mcchar::col#1 = (byte*) mode_mcchar::col#4 
Alias (byte*) mode_mcchar::ch#1 = (byte*) mode_mcchar::ch#4 
Alias (byte) dtv_control#119 = (byte) dtv_control#151 (byte) dtv_control#179 
Alias (byte) dtv_control#25 = (byte) dtv_control#77 (byte) dtv_control#78 (byte) dtv_control#26 
Alias (byte) dtv_control#265 = (byte) dtv_control#272 
Alias (byte*) mode_stdbitmap::SCREEN#0 = (byte*) mode_stdbitmap::ch#0 
Alias (byte) mode_stdbitmap::col#0 = (byte~) mode_stdbitmap::$20 
Alias (byte) mode_stdbitmap::col2#0 = (byte/signed word/word/dword/signed dword~) mode_stdbitmap::$21 
Alias (byte) mode_stdbitmap::cy#2 = (byte) mode_stdbitmap::cy#3 
Alias (byte*) mode_stdbitmap::ch#1 = (byte*) mode_stdbitmap::ch#4 
Alias (byte) dtv_control#196 = (byte) dtv_control#240 (byte) dtv_control#248 (byte) dtv_control#227 (byte) dtv_control#211 
Alias (byte) mode_stdbitmap::l#2 = (byte) mode_stdbitmap::l#3 
Alias (byte) mode_stdbitmap::lines_cnt#1 = (byte) mode_stdbitmap::lines_cnt#2 
Alias (byte) dtv_control#120 = (byte) dtv_control#152 (byte) dtv_control#180 
Alias (byte) dtv_control#28 = (byte) dtv_control#79 (byte) dtv_control#80 (byte) dtv_control#29 
Alias (byte) dtv_control#212 = (byte) dtv_control#228 
Alias (byte*) mode_hicolstdchar::COLORS#0 = (byte*) mode_hicolstdchar::col#0 
Alias (byte*) mode_hicolstdchar::SCREEN#0 = (byte*) mode_hicolstdchar::ch#0 
Alias (byte) mode_hicolstdchar::v#0 = (byte~) mode_hicolstdchar::$27 
Alias (byte) mode_hicolstdchar::cy#2 = (byte) mode_hicolstdchar::cy#3 
Alias (byte*) mode_hicolstdchar::col#1 = (byte*) mode_hicolstdchar::col#4 
Alias (byte*) mode_hicolstdchar::ch#1 = (byte*) mode_hicolstdchar::ch#4 
Alias (byte) dtv_control#121 = (byte) dtv_control#153 (byte) dtv_control#181 
Alias (byte) dtv_control#31 = (byte) dtv_control#81 (byte) dtv_control#82 (byte) dtv_control#32 
Alias (byte) dtv_control#213 = (byte) dtv_control#229 
Alias (byte*) mode_hicolecmchar::COLORS#0 = (byte*) mode_hicolecmchar::col#0 
Alias (byte*) mode_hicolecmchar::SCREEN#0 = (byte*) mode_hicolecmchar::ch#0 
Alias (byte) mode_hicolecmchar::v#0 = (byte~) mode_hicolecmchar::$28 
Alias (byte) mode_hicolecmchar::cy#2 = (byte) mode_hicolecmchar::cy#3 
Alias (byte*) mode_hicolecmchar::col#1 = (byte*) mode_hicolecmchar::col#4 
Alias (byte*) mode_hicolecmchar::ch#1 = (byte*) mode_hicolecmchar::ch#4 
Alias (byte) dtv_control#122 = (byte) dtv_control#154 (byte) dtv_control#182 
Alias (byte) dtv_control#34 = (byte) dtv_control#83 (byte) dtv_control#84 (byte) dtv_control#35 
Alias (byte) dtv_control#214 = (byte) dtv_control#230 
Alias (byte*) mode_hicolmcchar::COLORS#0 = (byte*) mode_hicolmcchar::col#0 
Alias (byte*) mode_hicolmcchar::SCREEN#0 = (byte*) mode_hicolmcchar::ch#0 
Alias (byte) mode_hicolmcchar::v#0 = (byte~) mode_hicolmcchar::$28 
Alias (byte) mode_hicolmcchar::cy#2 = (byte) mode_hicolmcchar::cy#3 
Alias (byte*) mode_hicolmcchar::col#1 = (byte*) mode_hicolmcchar::col#4 
Alias (byte*) mode_hicolmcchar::ch#1 = (byte*) mode_hicolmcchar::ch#4 
Alias (byte) dtv_control#123 = (byte) dtv_control#155 (byte) dtv_control#183 
Alias (byte) dtv_control#37 = (byte) dtv_control#85 (byte) dtv_control#86 (byte) dtv_control#38 
Alias (byte) dtv_control#39 = (byte~) mode_twoplanebitmap::$0 
Alias (byte) dtv_control#291 = (byte) dtv_control#292 
Alias (byte*) mode_twoplanebitmap::COLORS#0 = (byte*) mode_twoplanebitmap::col#0 
Alias (byte) mode_twoplanebitmap::cy#2 = (byte) mode_twoplanebitmap::cy#3 
Alias (byte*) mode_twoplanebitmap::col#1 = (byte*) mode_twoplanebitmap::col#4 
Alias (byte) dtv_control#273 = (byte) dtv_control#278 (byte) dtv_control#284 
Alias (byte*) mode_twoplanebitmap::PLANEA#0 = (byte*) mode_twoplanebitmap::gfxa#0 
Alias (byte*) mode_twoplanebitmap::gfxa#3 = (byte*) mode_twoplanebitmap::gfxa#5 (byte*) mode_twoplanebitmap::gfxa#4 
Alias (byte) mode_twoplanebitmap::ax#3 = (byte) mode_twoplanebitmap::ax#4 (byte) mode_twoplanebitmap::ax#5 
Alias (byte) mode_twoplanebitmap::ay#2 = (byte) mode_twoplanebitmap::ay#7 (byte) mode_twoplanebitmap::ay#6 
Alias (byte) dtv_control#249 = (byte) dtv_control#250 (byte) dtv_control#259 
Alias (byte) mode_twoplanebitmap::ay#3 = (byte) mode_twoplanebitmap::ay#5 
Alias (byte*) mode_twoplanebitmap::gfxa#7 = (byte*) mode_twoplanebitmap::gfxa#8 
Alias (byte) dtv_control#215 = (byte) dtv_control#231 (byte) dtv_control#241 
Alias (byte*) mode_twoplanebitmap::PLANEB#0 = (byte*) mode_twoplanebitmap::gfxb#0 
Alias (byte) mode_twoplanebitmap::by#2 = (byte) mode_twoplanebitmap::by#3 
Alias (byte*) mode_twoplanebitmap::gfxb#1 = (byte*) mode_twoplanebitmap::gfxb#4 
Alias (byte) dtv_control#124 = (byte) dtv_control#156 (byte) dtv_control#184 
Alias (byte) dtv_control#40 = (byte) dtv_control#87 (byte) dtv_control#88 (byte) dtv_control#41 
Alias (byte) dtv_control#42 = (byte~) mode_sixsfred::$0 
Alias (byte) dtv_control#285 = (byte) dtv_control#289 
Alias (byte*) mode_sixsfred::COLORS#0 = (byte*) mode_sixsfred::col#0 
Alias (byte) mode_sixsfred::cy#2 = (byte) mode_sixsfred::cy#3 
Alias (byte*) mode_sixsfred::col#1 = (byte*) mode_sixsfred::col#4 
Alias (byte) dtv_control#260 = (byte) dtv_control#267 (byte) dtv_control#274 
Alias (byte*) mode_sixsfred::PLANEA#0 = (byte*) mode_sixsfred::gfxa#0 
Alias (byte) mode_sixsfred::row#0 = (byte~) mode_sixsfred::$21 
Alias (byte) mode_sixsfred::ay#2 = (byte) mode_sixsfred::ay#3 
Alias (byte*) mode_sixsfred::gfxa#1 = (byte*) mode_sixsfred::gfxa#4 
Alias (byte) dtv_control#216 = (byte) dtv_control#232 (byte) dtv_control#242 
Alias (byte*) mode_sixsfred::PLANEB#0 = (byte*) mode_sixsfred::gfxb#0 
Alias (byte) mode_sixsfred::by#2 = (byte) mode_sixsfred::by#3 
Alias (byte*) mode_sixsfred::gfxb#1 = (byte*) mode_sixsfred::gfxb#4 
Alias (byte) dtv_control#125 = (byte) dtv_control#157 (byte) dtv_control#185 
Alias (byte) dtv_control#43 = (byte) dtv_control#89 (byte) dtv_control#90 (byte) dtv_control#44 
Alias (byte) dtv_control#286 = (byte) dtv_control#290 
Alias (byte*) mode_sixsfred2::COLORS#0 = (byte*) mode_sixsfred2::col#0 
Alias (byte) mode_sixsfred2::cy#2 = (byte) mode_sixsfred2::cy#3 
Alias (byte*) mode_sixsfred2::col#1 = (byte*) mode_sixsfred2::col#4 
Alias (byte) dtv_control#261 = (byte) dtv_control#268 (byte) dtv_control#275 
Alias (byte*) mode_sixsfred2::PLANEA#0 = (byte*) mode_sixsfred2::gfxa#0 
Alias (byte) mode_sixsfred2::row#0 = (byte~) mode_sixsfred2::$21 
Alias (byte) mode_sixsfred2::ay#2 = (byte) mode_sixsfred2::ay#3 
Alias (byte*) mode_sixsfred2::gfxa#1 = (byte*) mode_sixsfred2::gfxa#4 
Alias (byte) dtv_control#217 = (byte) dtv_control#233 (byte) dtv_control#243 
Alias (byte*) mode_sixsfred2::PLANEB#0 = (byte*) mode_sixsfred2::gfxb#0 
Alias (byte) mode_sixsfred2::by#2 = (byte) mode_sixsfred2::by#3 
Alias (byte*) mode_sixsfred2::gfxb#1 = (byte*) mode_sixsfred2::gfxb#4 
Alias (byte) dtv_control#126 = (byte) dtv_control#158 (byte) dtv_control#186 
Alias (byte) dtv_control#46 = (byte) dtv_control#91 (byte) dtv_control#92 (byte) dtv_control#47 
Alias (byte) dtv_control#48 = (byte~) mode_8bpppixelcell::$1 
Alias (byte) dtv_control#281 = (byte) dtv_control#287 
Alias (byte*) mode_8bpppixelcell::PLANEA#0 = (byte*) mode_8bpppixelcell::gfxa#0 
Alias (byte) mode_8bpppixelcell::ay#2 = (byte) mode_8bpppixelcell::ay#3 
Alias (byte*) mode_8bpppixelcell::gfxa#1 = (byte*) mode_8bpppixelcell::gfxa#4 
Alias (byte) dtv_control#253 = (byte) dtv_control#262 (byte) dtv_control#269 
Alias (byte*) mode_8bpppixelcell::PLANEB#0 = (byte*) mode_8bpppixelcell::gfxb#0 
Alias (byte*) mode_8bpppixelcell::chargen#0 = (byte*) mode_8bpppixelcell::CHARGEN#0 
Alias (byte) mode_8bpppixelcell::bits#1 = (byte~) mode_8bpppixelcell::$22 
Alias (byte) mode_8bpppixelcell::col#3 = (byte) mode_8bpppixelcell::col#4 (byte) mode_8bpppixelcell::c#1 
Alias (byte*) mode_8bpppixelcell::gfxb#3 = (byte*) mode_8bpppixelcell::gfxb#4 
Alias (byte) mode_8bpppixelcell::bits#2 = (byte) mode_8bpppixelcell::bits#4 
Alias (byte) mode_8bpppixelcell::cp#3 = (byte) mode_8bpppixelcell::cp#4 
Alias (byte) mode_8bpppixelcell::cr#4 = (byte) mode_8bpppixelcell::cr#5 
Alias (byte*) mode_8bpppixelcell::chargen#7 = (byte*) mode_8bpppixelcell::chargen#8 
Alias (byte) mode_8bpppixelcell::ch#5 = (byte) mode_8bpppixelcell::ch#6 
Alias (byte) dtv_control#218 = (byte) dtv_control#219 
Alias (byte) mode_8bpppixelcell::cr#2 = (byte) mode_8bpppixelcell::cr#3 
Alias (byte*) mode_8bpppixelcell::chargen#3 = (byte*) mode_8bpppixelcell::chargen#6 (byte*) mode_8bpppixelcell::chargen#5 
Alias (byte) mode_8bpppixelcell::ch#2 = (byte) mode_8bpppixelcell::ch#3 (byte) mode_8bpppixelcell::ch#4 
Alias (byte*) mode_8bpppixelcell::gfxb#1 = (byte*) mode_8bpppixelcell::gfxb#6 (byte*) mode_8bpppixelcell::gfxb#8 
Alias (byte) mode_8bpppixelcell::col#1 = (byte) mode_8bpppixelcell::col#6 (byte) mode_8bpppixelcell::col#8 
Alias (byte) dtv_control#127 = (byte) dtv_control#187 (byte) dtv_control#203 (byte) dtv_control#159 
Alias (byte) dtv_control#49 = (byte) dtv_control#93 (byte) dtv_control#94 (byte) dtv_control#50 
Alias (byte) dtv_control#51 = (byte~) mode_8bppchunkybmm::$2 
Alias (byte) dtv_control#245 = (byte) dtv_control#254 (byte) dtv_control#263 
Alias (byte) mode_8bppchunkybmm::gfxbCpuBank#0 = (byte~) mode_8bppchunkybmm::$18 (byte) mode_8bppchunkybmm::gfxbCpuBank#3 
Alias (byte) mode_8bppchunkybmm::c#0 = (byte~) mode_8bppchunkybmm::$24 
Alias (byte) mode_8bppchunkybmm::gfxbCpuBank#4 = (byte) mode_8bppchunkybmm::gfxbCpuBank#6 (byte) mode_8bppchunkybmm::gfxbCpuBank#5 
Alias (word) mode_8bppchunkybmm::x#3 = (word) mode_8bppchunkybmm::x#5 (word) mode_8bppchunkybmm::x#4 
Alias (byte) mode_8bppchunkybmm::y#4 = (byte) mode_8bppchunkybmm::y#7 (byte) mode_8bppchunkybmm::y#5 
Alias (byte) dtv_control#220 = (byte) dtv_control#236 (byte) dtv_control#221 
Alias (byte) mode_8bppchunkybmm::y#2 = (byte) mode_8bppchunkybmm::y#3 
Alias (byte*) mode_8bppchunkybmm::gfxb#1 = (byte*) mode_8bppchunkybmm::gfxb#6 
Alias (byte) mode_8bppchunkybmm::gfxbCpuBank#8 = (byte) mode_8bppchunkybmm::gfxbCpuBank#9 
Alias (byte) dtv_control#128 = (byte) dtv_control#188 (byte) dtv_control#204 (byte) dtv_control#160 
Alias (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 = (byte~) mode_8bppchunkybmm::$28 
Alias (byte) dtv_control#52 = (byte) dtv_control#95 (byte) dtv_control#96 (byte) dtv_control#53 
Alias (byte) dtv_control#129 = (byte) dtv_control#15 
Alias (byte*) print_screen#16 = (byte*) print_screen#7 
Alias (byte*) print_line_cursor#15 = (byte*) print_line_cursor#29 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#30 
Alias (byte) dtv_control#54 = (byte) dtv_control#97 
Successful SSA optimization Pass2AliasElimination
Alias (byte) print_str_lines::ch#0 = (byte) print_str_lines::ch#1 
Alias (byte*) print_str_lines::str#0 = (byte*) print_str_lines::str#5 
Alias (byte*) print_line_cursor#30 = (byte*) print_line_cursor#68 
Alias (byte) bitmap_init::x#2 = (byte) bitmap_init::x#3 
Alias (byte*) bitmap_init::bitmap#1 = (byte*) bitmap_init::bitmap#3 
Alias (byte) bitmap_init::y#2 = (byte) bitmap_init::y#3 
Alias (byte) bitmap_line_xdyi::x1#2 = (byte) bitmap_line_xdyi::x1#3 
Alias (byte) bitmap_line_xdyi::x#2 = (byte) bitmap_line_xdyi::x#5 
Alias (byte) bitmap_line_xdyi::yd#3 = (byte) bitmap_line_xdyi::yd#5 
Alias (byte) bitmap_line_xdyi::xd#2 = (byte) bitmap_line_xdyi::xd#6 
Alias (byte) bitmap_line_xdyd::x1#2 = (byte) bitmap_line_xdyd::x1#3 
Alias (byte) bitmap_line_xdyd::x#2 = (byte) bitmap_line_xdyd::x#5 
Alias (byte) bitmap_line_xdyd::yd#3 = (byte) bitmap_line_xdyd::yd#5 
Alias (byte) bitmap_line_xdyd::xd#2 = (byte) bitmap_line_xdyd::xd#6 
Alias (byte) bitmap_line_ydxi::y1#2 = (byte) bitmap_line_ydxi::y1#3 
Alias (byte) bitmap_line_ydxi::y#2 = (byte) bitmap_line_ydxi::y#5 
Alias (byte) bitmap_line_ydxi::xd#3 = (byte) bitmap_line_ydxi::xd#5 
Alias (byte) bitmap_line_ydxi::yd#2 = (byte) bitmap_line_ydxi::yd#6 
Alias (byte) bitmap_line_ydxd::y1#2 = (byte) bitmap_line_ydxd::y1#3 
Alias (byte) bitmap_line_ydxd::y#3 = (byte) bitmap_line_ydxd::y#6 
Alias (byte) bitmap_line_ydxd::xd#3 = (byte) bitmap_line_ydxd::xd#5 
Alias (byte) bitmap_line_ydxd::yd#2 = (byte) bitmap_line_ydxd::yd#6 
Alias (byte*) print_screen#15 = (byte*) print_screen#20 
Alias (byte*) print_line_cursor#14 = (byte*) print_line_cursor#36 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#38 
Alias (byte) dtv_control#113 = (byte) dtv_control#270 (byte) dtv_control#256 (byte) dtv_control#238 (byte) dtv_control#206 (byte) dtv_control#175 (byte) dtv_control#115 (byte) dtv_control#146 
Alias (byte) mode_twoplanebitmap::ax#2 = (byte) mode_twoplanebitmap::ax#3 
Alias (byte) mode_twoplanebitmap::ay#2 = (byte) mode_twoplanebitmap::ay#3 
Alias (byte) dtv_control#215 = (byte) dtv_control#249 
Alias (byte*) mode_8bpppixelcell::gfxb#2 = (byte*) mode_8bpppixelcell::gfxb#3 
Alias (byte) mode_8bpppixelcell::bits#2 = (byte) mode_8bpppixelcell::bits#3 
Alias (byte) mode_8bpppixelcell::col#2 = (byte) mode_8bpppixelcell::col#3 
Alias (byte) mode_8bpppixelcell::cp#2 = (byte) mode_8bpppixelcell::cp#3 
Alias (byte) mode_8bpppixelcell::cr#2 = (byte) mode_8bpppixelcell::cr#4 
Alias (byte*) mode_8bpppixelcell::chargen#3 = (byte*) mode_8bpppixelcell::chargen#7 
Alias (byte) mode_8bpppixelcell::ch#2 = (byte) mode_8bpppixelcell::ch#5 
Alias (byte) dtv_control#127 = (byte) dtv_control#218 
Alias (word) mode_8bppchunkybmm::x#2 = (word) mode_8bppchunkybmm::x#3 
Alias (byte) mode_8bppchunkybmm::y#2 = (byte) mode_8bppchunkybmm::y#4 
Alias (byte) dtv_control#128 = (byte) dtv_control#220 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) print_line_cursor#30
Self Phi Eliminated (byte*) print_char_cursor#20
Self Phi Eliminated (byte*) print_line_cursor#21
Self Phi Eliminated (byte*) bitmap_init::bitmap#1
Self Phi Eliminated (byte) bitmap_clear::y#2
Self Phi Eliminated (byte) bitmap_line_xdyi::yd#3
Self Phi Eliminated (byte) bitmap_line_xdyi::xd#2
Self Phi Eliminated (byte) bitmap_line_xdyi::x1#2
Self Phi Eliminated (byte) bitmap_line_xdyd::yd#3
Self Phi Eliminated (byte) bitmap_line_xdyd::xd#2
Self Phi Eliminated (byte) bitmap_line_xdyd::x1#2
Self Phi Eliminated (byte) bitmap_line_ydxi::xd#3
Self Phi Eliminated (byte) bitmap_line_ydxi::yd#2
Self Phi Eliminated (byte) bitmap_line_ydxi::y1#2
Self Phi Eliminated (byte) bitmap_line_ydxd::xd#3
Self Phi Eliminated (byte) bitmap_line_ydxd::yd#2
Self Phi Eliminated (byte) bitmap_line_ydxd::y1#2
Self Phi Eliminated (byte*) print_screen#51
Self Phi Eliminated (byte*) print_line_cursor#70
Self Phi Eliminated (byte*) print_char_cursor#71
Self Phi Eliminated (byte) dtv_control#237
Self Phi Eliminated (byte*) print_screen#19
Self Phi Eliminated (byte*) print_line_cursor#35
Self Phi Eliminated (byte*) print_char_cursor#37
Self Phi Eliminated (byte) dtv_control#132
Self Phi Eliminated (byte*) print_screen#15
Self Phi Eliminated (byte*) print_line_cursor#14
Self Phi Eliminated (byte*) print_char_cursor#15
Self Phi Eliminated (byte) dtv_control#100
Self Phi Eliminated (byte) dtv_control#113
Self Phi Eliminated (byte) dtv_control#208
Self Phi Eliminated (byte) mode_stdchar::cy#2
Self Phi Eliminated (byte) dtv_control#117
Self Phi Eliminated (byte) dtv_control#209
Self Phi Eliminated (byte) mode_ecmchar::cy#2
Self Phi Eliminated (byte) dtv_control#118
Self Phi Eliminated (byte) dtv_control#210
Self Phi Eliminated (byte) mode_mcchar::cy#2
Self Phi Eliminated (byte) dtv_control#119
Self Phi Eliminated (byte) dtv_control#265
Self Phi Eliminated (byte) mode_stdbitmap::cy#2
Self Phi Eliminated (byte) dtv_control#196
Self Phi Eliminated (byte) mode_stdbitmap::lines_cnt#1
Self Phi Eliminated (byte) dtv_control#120
Self Phi Eliminated (byte) dtv_control#212
Self Phi Eliminated (byte) mode_hicolstdchar::cy#2
Self Phi Eliminated (byte) dtv_control#121
Self Phi Eliminated (byte) dtv_control#213
Self Phi Eliminated (byte) mode_hicolecmchar::cy#2
Self Phi Eliminated (byte) dtv_control#122
Self Phi Eliminated (byte) dtv_control#214
Self Phi Eliminated (byte) mode_hicolmcchar::cy#2
Self Phi Eliminated (byte) dtv_control#123
Self Phi Eliminated (byte) dtv_control#291
Self Phi Eliminated (byte) mode_twoplanebitmap::cy#2
Self Phi Eliminated (byte) dtv_control#273
Self Phi Eliminated (byte) mode_twoplanebitmap::ay#2
Self Phi Eliminated (byte) dtv_control#215
Self Phi Eliminated (byte) mode_twoplanebitmap::by#2
Self Phi Eliminated (byte) dtv_control#124
Self Phi Eliminated (byte) dtv_control#285
Self Phi Eliminated (byte) mode_sixsfred::cy#2
Self Phi Eliminated (byte) dtv_control#260
Self Phi Eliminated (byte) mode_sixsfred::ay#2
Self Phi Eliminated (byte) dtv_control#216
Self Phi Eliminated (byte) mode_sixsfred::by#2
Self Phi Eliminated (byte) dtv_control#125
Self Phi Eliminated (byte) dtv_control#286
Self Phi Eliminated (byte) mode_sixsfred2::cy#2
Self Phi Eliminated (byte) dtv_control#261
Self Phi Eliminated (byte) mode_sixsfred2::ay#2
Self Phi Eliminated (byte) dtv_control#217
Self Phi Eliminated (byte) mode_sixsfred2::by#2
Self Phi Eliminated (byte) dtv_control#126
Self Phi Eliminated (byte) dtv_control#281
Self Phi Eliminated (byte) mode_8bpppixelcell::ay#2
Self Phi Eliminated (byte) dtv_control#253
Self Phi Eliminated (byte) mode_8bpppixelcell::cr#2
Self Phi Eliminated (byte*) mode_8bpppixelcell::chargen#3
Self Phi Eliminated (byte) mode_8bpppixelcell::ch#2
Self Phi Eliminated (byte) dtv_control#127
Self Phi Eliminated (byte) dtv_control#245
Self Phi Eliminated (byte) mode_8bppchunkybmm::y#2
Self Phi Eliminated (byte) dtv_control#128
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) print_str_lines::str#4 (byte*) print_str_lines::str#1
Redundant Phi (byte*) print_char_cursor#52 (byte*) print_char_cursor#13
Redundant Phi (byte*) print_line_cursor#50 (byte*) print_line_cursor#12
Redundant Phi (byte*) print_line_cursor#30 (byte*) print_line_cursor#17
Redundant Phi (byte*) print_line_cursor#1 (byte*) print_line_cursor#19
Redundant Phi (byte*) print_char_cursor#18 (byte*) print_line_cursor#19
Redundant Phi (byte*) print_line_cursor#32 (byte*) print_line_cursor#30
Redundant Phi (byte*) print_char_cursor#34 (byte*) print_char_cursor#32
Redundant Phi (byte*) print_char_cursor#20 (byte*) print_char_cursor#34
Redundant Phi (byte*) print_screen#8 (byte*) print_screen#14
Redundant Phi (byte*) print_line_cursor#21 (byte*) print_screen#8
Redundant Phi (byte*) print_set_screen::screen#1 (byte*) print_set_screen::screen#0
Redundant Phi (byte) keyboard_matrix_read::rowid#1 (byte) keyboard_matrix_read::rowid#0
Redundant Phi (byte*) bitmap_init::bitmap#2 (byte*) bitmap_init::bitmap#0
Redundant Phi (byte*) bitmap_init::bitmap#1 (byte*) bitmap_init::bitmap#2
Redundant Phi (byte) bitmap_clear::y#2 (byte) bitmap_clear::y#4
Redundant Phi (byte) bitmap_line::x0#1 (byte) bitmap_line::x0#0
Redundant Phi (byte) bitmap_line::x1#1 (byte) bitmap_line::x1#0
Redundant Phi (byte) bitmap_line::y0#1 (byte) bitmap_line::y0#0
Redundant Phi (byte) bitmap_line::y1#1 (byte) bitmap_line::y1#0
Redundant Phi (byte) bitmap_line_xdyi::yd#3 (byte) bitmap_line_xdyi::yd#2
Redundant Phi (byte) bitmap_line_xdyi::xd#2 (byte) bitmap_line_xdyi::xd#5
Redundant Phi (byte) bitmap_line_xdyi::x1#2 (byte) bitmap_line_xdyi::x1#6
Redundant Phi (byte) bitmap_line_xdyd::yd#3 (byte) bitmap_line_xdyd::yd#2
Redundant Phi (byte) bitmap_line_xdyd::xd#2 (byte) bitmap_line_xdyd::xd#5
Redundant Phi (byte) bitmap_line_xdyd::x1#2 (byte) bitmap_line_xdyd::x1#6
Redundant Phi (byte) bitmap_line_ydxi::xd#3 (byte) bitmap_line_ydxi::xd#2
Redundant Phi (byte) bitmap_line_ydxi::yd#2 (byte) bitmap_line_ydxi::yd#5
Redundant Phi (byte) bitmap_line_ydxi::y1#2 (byte) bitmap_line_ydxi::y1#6
Redundant Phi (byte) bitmap_line_ydxd::xd#3 (byte) bitmap_line_ydxd::xd#2
Redundant Phi (byte) bitmap_line_ydxd::yd#2 (byte) bitmap_line_ydxd::yd#5
Redundant Phi (byte) bitmap_line_ydxd::y1#2 (byte) bitmap_line_ydxd::y1#6
Redundant Phi (byte*) print_screen#34 (byte*) print_screen#0
Redundant Phi (byte*) print_line_cursor#52 (byte*) print_screen#0
Redundant Phi (byte*) print_char_cursor#55 (byte*) print_screen#0
Redundant Phi (byte) dtv_control#130 (byte) dtv_control#129
Redundant Phi (byte*) print_screen#12 (byte*) print_screen#15
Redundant Phi (byte*) print_line_cursor#23 (byte*) print_line_cursor#14
Redundant Phi (byte*) print_char_cursor#10 (byte*) print_char_cursor#15
Redundant Phi (byte) dtv_control#0 (byte) dtv_control#3
Redundant Phi (byte*) print_screen#81 (byte*) print_screen#13
Redundant Phi (byte*) print_line_cursor#100 (byte*) print_line_cursor#10
Redundant Phi (byte*) print_char_cursor#100 (byte*) print_char_cursor#11
Redundant Phi (byte) dtv_control#255 (byte) dtv_control#1
Redundant Phi (byte*) print_screen#51 (byte*) print_screen#81
Redundant Phi (byte*) print_line_cursor#70 (byte*) print_line_cursor#100
Redundant Phi (byte*) print_char_cursor#71 (byte*) print_char_cursor#100
Redundant Phi (byte) dtv_control#237 (byte) dtv_control#255
Redundant Phi (byte*) print_screen#19 (byte*) print_screen#51
Redundant Phi (byte*) print_line_cursor#35 (byte*) print_line_cursor#70
Redundant Phi (byte*) print_char_cursor#37 (byte*) print_char_cursor#71
Redundant Phi (byte) dtv_control#132 (byte) dtv_control#237
Redundant Phi (byte*) print_screen#14 (byte*) print_screen#1
Redundant Phi (byte*) print_line_cursor#11 (byte*) print_screen#1
Redundant Phi (byte*) print_char_cursor#12 (byte*) print_screen#1
Redundant Phi (byte*) print_line_cursor#12 (byte*) print_line_cursor#21
Redundant Phi (byte*) print_char_cursor#13 (byte*) print_line_cursor#21
Redundant Phi (byte*) print_char_cursor#14 (byte*) print_char_cursor#19
Redundant Phi (byte*) print_line_cursor#13 (byte*) print_line_cursor#17
Redundant Phi (byte*) print_screen#15 (byte*) print_screen#14
Redundant Phi (byte*) print_line_cursor#14 (byte*) print_line_cursor#13
Redundant Phi (byte*) print_char_cursor#15 (byte*) print_char_cursor#14
Redundant Phi (byte) dtv_control#100 (byte) dtv_control#132
Redundant Phi (byte) dtv_control#2 (byte) dtv_control#19
Redundant Phi (byte) dtv_control#4 (byte) dtv_control#22
Redundant Phi (byte) dtv_control#5 (byte) dtv_control#25
Redundant Phi (byte) dtv_control#6 (byte) dtv_control#28
Redundant Phi (byte) dtv_control#62 (byte) dtv_control#31
Redundant Phi (byte) dtv_control#63 (byte) dtv_control#34
Redundant Phi (byte) dtv_control#64 (byte) dtv_control#37
Redundant Phi (byte) dtv_control#10 (byte) dtv_control#46
Redundant Phi (byte) dtv_control#11 (byte) dtv_control#40
Redundant Phi (byte) dtv_control#12 (byte) dtv_control#43
Redundant Phi (byte) dtv_control#13 (byte) dtv_control#49
Redundant Phi (byte) dtv_control#14 (byte) dtv_control#52
Redundant Phi (byte) dtv_control#113 (byte) dtv_control#114
Redundant Phi (byte) dtv_control#208 (byte) dtv_control#18
Redundant Phi (byte) mode_stdchar::cy#2 (byte) mode_stdchar::cy#4
Redundant Phi (byte) dtv_control#117 (byte) dtv_control#193
Redundant Phi (byte) dtv_control#19 (byte) dtv_control#16
Redundant Phi (byte) dtv_control#209 (byte) dtv_control#21
Redundant Phi (byte) mode_ecmchar::cy#2 (byte) mode_ecmchar::cy#4
Redundant Phi (byte) dtv_control#118 (byte) dtv_control#194
Redundant Phi (byte) dtv_control#22 (byte) dtv_control#16
Redundant Phi (byte) dtv_control#210 (byte) dtv_control#24
Redundant Phi (byte) mode_mcchar::cy#2 (byte) mode_mcchar::cy#4
Redundant Phi (byte) dtv_control#119 (byte) dtv_control#195
Redundant Phi (byte) dtv_control#25 (byte) dtv_control#16
Redundant Phi (byte) dtv_control#265 (byte) dtv_control#27
Redundant Phi (byte) mode_stdbitmap::cy#2 (byte) mode_stdbitmap::cy#4
Redundant Phi (byte) dtv_control#196 (byte) dtv_control#258
Redundant Phi (byte) mode_stdbitmap::lines_cnt#1 (byte) mode_stdbitmap::lines_cnt#0
Redundant Phi (byte) dtv_control#120 (byte) dtv_control#196
Redundant Phi (byte) dtv_control#28 (byte) dtv_control#16
Redundant Phi (byte) dtv_control#212 (byte) dtv_control#30
Redundant Phi (byte) mode_hicolstdchar::cy#2 (byte) mode_hicolstdchar::cy#4
Redundant Phi (byte) dtv_control#121 (byte) dtv_control#197
Redundant Phi (byte) dtv_control#31 (byte) dtv_control#16
Redundant Phi (byte) dtv_control#213 (byte) dtv_control#33
Redundant Phi (byte) mode_hicolecmchar::cy#2 (byte) mode_hicolecmchar::cy#4
Redundant Phi (byte) dtv_control#122 (byte) dtv_control#198
Redundant Phi (byte) dtv_control#34 (byte) dtv_control#16
Redundant Phi (byte) dtv_control#214 (byte) dtv_control#36
Redundant Phi (byte) mode_hicolmcchar::cy#2 (byte) mode_hicolmcchar::cy#4
Redundant Phi (byte) dtv_control#123 (byte) dtv_control#199
Redundant Phi (byte) dtv_control#37 (byte) dtv_control#16
Redundant Phi (byte) dtv_control#291 (byte) dtv_control#39
Redundant Phi (byte) mode_twoplanebitmap::cy#2 (byte) mode_twoplanebitmap::cy#4
Redundant Phi (byte) dtv_control#273 (byte) dtv_control#288
Redundant Phi (byte) mode_twoplanebitmap::ay#2 (byte) mode_twoplanebitmap::ay#4
Redundant Phi (byte) dtv_control#215 (byte) dtv_control#266
Redundant Phi (byte) mode_twoplanebitmap::by#2 (byte) mode_twoplanebitmap::by#4
Redundant Phi (byte) dtv_control#124 (byte) dtv_control#200
Redundant Phi (byte) dtv_control#40 (byte) dtv_control#16
Redundant Phi (byte) dtv_control#285 (byte) dtv_control#42
Redundant Phi (byte) mode_sixsfred::cy#2 (byte) mode_sixsfred::cy#4
Redundant Phi (byte) dtv_control#260 (byte) dtv_control#279
Redundant Phi (byte) mode_sixsfred::ay#2 (byte) mode_sixsfred::ay#4
Redundant Phi (byte) dtv_control#216 (byte) dtv_control#251
Redundant Phi (byte) mode_sixsfred::by#2 (byte) mode_sixsfred::by#4
Redundant Phi (byte) dtv_control#125 (byte) dtv_control#201
Redundant Phi (byte) dtv_control#43 (byte) dtv_control#16
Redundant Phi (byte) dtv_control#286 (byte) dtv_control#45
Redundant Phi (byte) mode_sixsfred2::cy#2 (byte) mode_sixsfred2::cy#4
Redundant Phi (byte) dtv_control#261 (byte) dtv_control#280
Redundant Phi (byte) mode_sixsfred2::ay#2 (byte) mode_sixsfred2::ay#4
Redundant Phi (byte) dtv_control#217 (byte) dtv_control#252
Redundant Phi (byte) mode_sixsfred2::by#2 (byte) mode_sixsfred2::by#4
Redundant Phi (byte) dtv_control#126 (byte) dtv_control#202
Redundant Phi (byte) dtv_control#46 (byte) dtv_control#16
Redundant Phi (byte) dtv_control#281 (byte) dtv_control#48
Redundant Phi (byte) mode_8bpppixelcell::ay#2 (byte) mode_8bpppixelcell::ay#4
Redundant Phi (byte) dtv_control#253 (byte) dtv_control#276
Redundant Phi (byte) mode_8bpppixelcell::cr#2 (byte) mode_8bpppixelcell::cr#6
Redundant Phi (byte*) mode_8bpppixelcell::chargen#3 (byte*) mode_8bpppixelcell::chargen#1
Redundant Phi (byte) mode_8bpppixelcell::ch#2 (byte) mode_8bpppixelcell::ch#7
Redundant Phi (byte) dtv_control#127 (byte) dtv_control#234
Redundant Phi (byte) dtv_control#49 (byte) dtv_control#16
Redundant Phi (byte) dtv_control#245 (byte) dtv_control#51
Redundant Phi (byte) mode_8bppchunkybmm::y#2 (byte) mode_8bppchunkybmm::y#6
Redundant Phi (byte) dtv_control#128 (byte) dtv_control#235
Redundant Phi (byte) dtv_control#52 (byte) dtv_control#16
Redundant Phi (byte*) print_screen#16 (byte*) print_screen#13
Redundant Phi (byte*) print_line_cursor#15 (byte*) print_line_cursor#10
Redundant Phi (byte*) print_char_cursor#16 (byte*) print_char_cursor#11
Redundant Phi (byte) dtv_control#54 (byte) dtv_control#1
Successful SSA optimization Pass2RedundantPhiElimination
Redundant Phi (byte) dtv_control#16 (byte) dtv_control#114
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) print_str_lines::$0 [185] if(*((byte*) print_str_lines::str#2)!=(byte) '@') goto print_str_lines::@2
Simple Condition (bool~) print_str_lines::$2 [192] if((byte) print_str_lines::ch#0==(byte) '@') goto print_str_lines::@5
Simple Condition (bool~) print_str_lines::$3 [195] if((byte) print_str_lines::ch#0!=(byte) '@') goto print_str_lines::@4
Simple Condition (bool~) print_ln::$1 [213] if((byte*) print_line_cursor#19<(byte*) print_char_cursor#32) goto print_ln::@1
Simple Condition (bool~) print_cls::$1 [229] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (bool~) bitmap_init::$4 [367] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@2
Simple Condition (bool~) bitmap_init::$5 [371] if((byte) bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1
Simple Condition (bool~) bitmap_init::$12 [386] if((byte~) bitmap_init::$10!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4
Simple Condition (bool~) bitmap_init::$15 [390] if((byte) bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@3
Simple Condition (bool~) bitmap_clear::$1 [406] if((byte) bitmap_clear::x#1!=rangelast(0,$c7)) goto bitmap_clear::@2
Simple Condition (bool~) bitmap_clear::$2 [410] if((byte) bitmap_clear::y#1!=rangelast(0,$27)) goto bitmap_clear::@1
Simple Condition (bool~) bitmap_line::$0 [424] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1
Simple Condition (bool~) bitmap_line::$12 [429] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@9
Simple Condition (bool~) bitmap_line::$2 [434] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@2
Simple Condition (bool~) bitmap_line::$8 [439] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@6
Simple Condition (bool~) bitmap_line::$4 [444] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@3
Simple Condition (bool~) bitmap_line::$18 [477] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13
Simple Condition (bool~) bitmap_line::$14 [482] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@10
Simple Condition (bool~) bitmap_line_xdyi::$4 [525] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2
Simple Condition (bool~) bitmap_line_xdyi::$7 [529] if((byte) bitmap_line_xdyi::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1
Simple Condition (bool~) bitmap_line_xdyd::$4 [548] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2
Simple Condition (bool~) bitmap_line_xdyd::$7 [552] if((byte) bitmap_line_xdyd::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1
Simple Condition (bool~) bitmap_line_ydxi::$4 [571] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2
Simple Condition (bool~) bitmap_line_ydxi::$7 [575] if((byte) bitmap_line_ydxi::y#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1
Simple Condition (bool~) bitmap_line_ydxd::$4 [595] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2
Simple Condition (bool~) bitmap_line_ydxd::$7 [599] if((byte) bitmap_line_ydxd::y#3!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1
Simple Condition (bool~) menu::$23 [687] if((byte) menu::i#1!=rangelast(0,$f)) goto menu::@1
Simple Condition (bool~) menu::$25 [695] if((byte*) menu::c#1!=(byte*~) menu::$24) goto menu::@2
Simple Condition (bool~) menu::$31 [724] if((byte~) menu::$29==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@6
Simple Condition (bool~) menu::$35 [733] if((byte~) menu::$33==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@7
Simple Condition (bool~) menu::$39 [752] if((byte~) menu::$37==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@8
Simple Condition (bool~) menu::$43 [765] if((byte~) menu::$41==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@9
Simple Condition (bool~) menu::$47 [778] if((byte~) menu::$45==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@10
Simple Condition (bool~) menu::$51 [791] if((byte~) menu::$49==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@11
Simple Condition (bool~) menu::$55 [804] if((byte~) menu::$53==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@12
Simple Condition (bool~) menu::$59 [817] if((byte~) menu::$57==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@13
Simple Condition (bool~) menu::$63 [830] if((byte~) menu::$61==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@14
Simple Condition (bool~) menu::$67 [843] if((byte~) menu::$65==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@15
Simple Condition (bool~) menu::$71 [856] if((byte~) menu::$69==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@16
Simple Condition (bool~) menu::$75 [869] if((byte~) menu::$73==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@17
Simple Condition (bool~) mode_ctrl::$0 [887] if(*((byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto mode_ctrl::@5
Simple Condition (bool~) mode_ctrl::$3 [897] if((byte~) mode_ctrl::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@7
Simple Condition (bool~) mode_ctrl::$6 [907] if((byte~) mode_ctrl::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@8
Simple Condition (bool~) mode_ctrl::$10 [919] if((byte~) mode_ctrl::$8==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@9
Simple Condition (bool~) mode_ctrl::$14 [931] if((byte~) mode_ctrl::$12==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@10
Simple Condition (bool~) mode_ctrl::$18 [943] if((byte~) mode_ctrl::$16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@11
Simple Condition (bool~) mode_ctrl::$22 [955] if((byte~) mode_ctrl::$20==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@12
Simple Condition (bool~) mode_ctrl::$26 [967] if((byte~) mode_ctrl::$24==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@13
Simple Condition (bool~) mode_ctrl::$30 [979] if((byte~) mode_ctrl::$28==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@14
Simple Condition (bool~) mode_ctrl::$32 [986] if((byte) mode_ctrl::ctrl#14==(byte) dtv_control#114) goto mode_ctrl::@15
Simple Condition (bool~) mode_stdchar::$23 [1035] if((byte) mode_stdchar::i#1!=rangelast(0,$f)) goto mode_stdchar::@1
Simple Condition (bool~) mode_stdchar::$30 [1057] if((byte) mode_stdchar::cx#1!=rangelast(0,$27)) goto mode_stdchar::@3
Simple Condition (bool~) mode_stdchar::$31 [1061] if((byte) mode_stdchar::cy#1!=rangelast(0,$18)) goto mode_stdchar::@2
Simple Condition (bool~) mode_ecmchar::$24 [1111] if((byte) mode_ecmchar::i#1!=rangelast(0,$f)) goto mode_ecmchar::@1
Simple Condition (bool~) mode_ecmchar::$31 [1136] if((byte) mode_ecmchar::cx#1!=rangelast(0,$27)) goto mode_ecmchar::@3
Simple Condition (bool~) mode_ecmchar::$32 [1140] if((byte) mode_ecmchar::cy#1!=rangelast(0,$18)) goto mode_ecmchar::@2
Simple Condition (bool~) mode_mcchar::$24 [1190] if((byte) mode_mcchar::i#1!=rangelast(0,$f)) goto mode_mcchar::@1
Simple Condition (bool~) mode_mcchar::$31 [1214] if((byte) mode_mcchar::cx#1!=rangelast(0,$27)) goto mode_mcchar::@3
Simple Condition (bool~) mode_mcchar::$32 [1218] if((byte) mode_mcchar::cy#1!=rangelast(0,$18)) goto mode_mcchar::@2
Simple Condition (bool~) mode_stdbitmap::$18 [1259] if((byte) mode_stdbitmap::i#1!=rangelast(0,$f)) goto mode_stdbitmap::@1
Simple Condition (bool~) mode_stdbitmap::$24 [1279] if((byte) mode_stdbitmap::cx#1!=rangelast(0,$27)) goto mode_stdbitmap::@3
Simple Condition (bool~) mode_stdbitmap::$25 [1283] if((byte) mode_stdbitmap::cy#1!=rangelast(0,$18)) goto mode_stdbitmap::@2
Simple Condition (bool~) mode_stdbitmap::$31 [1305] if((byte) mode_stdbitmap::l#1<(byte) mode_stdbitmap::lines_cnt#0) goto mode_stdbitmap::@4
Simple Condition (bool~) mode_hicolstdchar::$23 [1354] if((byte) mode_hicolstdchar::i#1!=rangelast(0,$f)) goto mode_hicolstdchar::@1
Simple Condition (bool~) mode_hicolstdchar::$28 [1375] if((byte) mode_hicolstdchar::cx#1!=rangelast(0,$27)) goto mode_hicolstdchar::@3
Simple Condition (bool~) mode_hicolstdchar::$29 [1379] if((byte) mode_hicolstdchar::cy#1!=rangelast(0,$18)) goto mode_hicolstdchar::@2
Simple Condition (bool~) mode_hicolecmchar::$24 [1429] if((byte) mode_hicolecmchar::i#1!=rangelast(0,$f)) goto mode_hicolecmchar::@1
Simple Condition (bool~) mode_hicolecmchar::$29 [1453] if((byte) mode_hicolecmchar::cx#1!=rangelast(0,$27)) goto mode_hicolecmchar::@3
Simple Condition (bool~) mode_hicolecmchar::$30 [1457] if((byte) mode_hicolecmchar::cy#1!=rangelast(0,$18)) goto mode_hicolecmchar::@2
Simple Condition (bool~) mode_hicolmcchar::$24 [1507] if((byte) mode_hicolmcchar::i#1!=rangelast(0,$f)) goto mode_hicolmcchar::@1
Simple Condition (bool~) mode_hicolmcchar::$29 [1530] if((byte) mode_hicolmcchar::cx#1!=rangelast(0,$27)) goto mode_hicolmcchar::@3
Simple Condition (bool~) mode_hicolmcchar::$30 [1534] if((byte) mode_hicolmcchar::cy#1!=rangelast(0,$18)) goto mode_hicolmcchar::@2
Simple Condition (bool~) mode_twoplanebitmap::$14 [1582] if((byte) mode_twoplanebitmap::i#1!=rangelast(0,$f)) goto mode_twoplanebitmap::@1
Simple Condition (bool~) mode_twoplanebitmap::$19 [1600] if((byte) mode_twoplanebitmap::cx#1!=rangelast(0,$27)) goto mode_twoplanebitmap::@3
Simple Condition (bool~) mode_twoplanebitmap::$20 [1604] if((byte) mode_twoplanebitmap::cy#1!=rangelast(0,$18)) goto mode_twoplanebitmap::@2
Simple Condition (bool~) mode_twoplanebitmap::$22 [1613] if((byte~) mode_twoplanebitmap::$21==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_twoplanebitmap::@6
Simple Condition (bool~) mode_twoplanebitmap::$23 [1623] if((byte) mode_twoplanebitmap::ax#1!=rangelast(0,$27)) goto mode_twoplanebitmap::@5
Simple Condition (bool~) mode_twoplanebitmap::$24 [1627] if((byte) mode_twoplanebitmap::ay#1!=rangelast(0,$c7)) goto mode_twoplanebitmap::@4
Simple Condition (bool~) mode_twoplanebitmap::$25 [1638] if((byte) mode_twoplanebitmap::bx#1!=rangelast(0,$27)) goto mode_twoplanebitmap::@9
Simple Condition (bool~) mode_twoplanebitmap::$26 [1642] if((byte) mode_twoplanebitmap::by#1!=rangelast(0,$c7)) goto mode_twoplanebitmap::@8
Simple Condition (bool~) mode_sixsfred::$15 [1691] if((byte) mode_sixsfred::i#1!=rangelast(0,$f)) goto mode_sixsfred::@1
Simple Condition (bool~) mode_sixsfred::$18 [1705] if((byte) mode_sixsfred::cx#1!=rangelast(0,$27)) goto mode_sixsfred::@3
Simple Condition (bool~) mode_sixsfred::$19 [1709] if((byte) mode_sixsfred::cy#1!=rangelast(0,$18)) goto mode_sixsfred::@2
Simple Condition (bool~) mode_sixsfred::$22 [1724] if((byte) mode_sixsfred::ax#1!=rangelast(0,$27)) goto mode_sixsfred::@5
Simple Condition (bool~) mode_sixsfred::$23 [1728] if((byte) mode_sixsfred::ay#1!=rangelast(0,$c7)) goto mode_sixsfred::@4
Simple Condition (bool~) mode_sixsfred::$24 [1739] if((byte) mode_sixsfred::bx#1!=rangelast(0,$27)) goto mode_sixsfred::@7
Simple Condition (bool~) mode_sixsfred::$25 [1743] if((byte) mode_sixsfred::by#1!=rangelast(0,$c7)) goto mode_sixsfred::@6
Simple Condition (bool~) mode_sixsfred2::$13 [1790] if((byte) mode_sixsfred2::i#1!=rangelast(0,$f)) goto mode_sixsfred2::@1
Simple Condition (bool~) mode_sixsfred2::$18 [1806] if((byte) mode_sixsfred2::cx#1!=rangelast(0,$27)) goto mode_sixsfred2::@3
Simple Condition (bool~) mode_sixsfred2::$19 [1810] if((byte) mode_sixsfred2::cy#1!=rangelast(0,$18)) goto mode_sixsfred2::@2
Simple Condition (bool~) mode_sixsfred2::$22 [1825] if((byte) mode_sixsfred2::ax#1!=rangelast(0,$27)) goto mode_sixsfred2::@5
Simple Condition (bool~) mode_sixsfred2::$23 [1829] if((byte) mode_sixsfred2::ay#1!=rangelast(0,$c7)) goto mode_sixsfred2::@4
Simple Condition (bool~) mode_sixsfred2::$24 [1840] if((byte) mode_sixsfred2::bx#1!=rangelast(0,$27)) goto mode_sixsfred2::@7
Simple Condition (bool~) mode_sixsfred2::$25 [1844] if((byte) mode_sixsfred2::by#1!=rangelast(0,$c7)) goto mode_sixsfred2::@6
Simple Condition (bool~) mode_8bpppixelcell::$12 [1888] if((byte) mode_8bpppixelcell::i#1!=rangelast(0,$f)) goto mode_8bpppixelcell::@1
Simple Condition (bool~) mode_8bpppixelcell::$17 [1903] if((byte) mode_8bpppixelcell::ax#1!=rangelast(0,$27)) goto mode_8bpppixelcell::@3
Simple Condition (bool~) mode_8bpppixelcell::$18 [1907] if((byte) mode_8bpppixelcell::ay#1!=rangelast(0,$18)) goto mode_8bpppixelcell::@2
Simple Condition (bool~) mode_8bpppixelcell::$21 [1926] if((byte~) mode_8bpppixelcell::$19==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_8bpppixelcell::@7
Simple Condition (bool~) mode_8bpppixelcell::$23 [1935] if((byte) mode_8bpppixelcell::cp#1!=rangelast(0,7)) goto mode_8bpppixelcell::@6
Simple Condition (bool~) mode_8bpppixelcell::$24 [1941] if((byte) mode_8bpppixelcell::cr#1!=rangelast(0,7)) goto mode_8bpppixelcell::@5
Simple Condition (bool~) mode_8bpppixelcell::$25 [1945] if((byte) mode_8bpppixelcell::ch#1!=rangelast(0,$ff)) goto mode_8bpppixelcell::@4
Simple Condition (bool~) mode_8bppchunkybmm::$16 [1987] if((byte) mode_8bppchunkybmm::i#1!=rangelast(0,$f)) goto mode_8bppchunkybmm::@1
Simple Condition (bool~) mode_8bppchunkybmm::$21 [2003] if((byte*) mode_8bppchunkybmm::gfxb#3!=(word/dword/signed dword) $8000) goto mode_8bppchunkybmm::@4
Simple Condition (bool~) mode_8bppchunkybmm::$25 [2012] if((word) mode_8bppchunkybmm::x#1!=rangelast(0,$13f)) goto mode_8bppchunkybmm::@3
Simple Condition (bool~) mode_8bppchunkybmm::$26 [2022] if((byte) mode_8bppchunkybmm::y#1!=rangelast(0,$c7)) goto mode_8bppchunkybmm::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) PROCPORT_DDR#0 = ((byte*))0
Constant (const byte) PROCPORT_DDR_MEMORY_MASK#0 = 7
Constant (const byte*) PROCPORT#0 = ((byte*))1
Constant (const byte) PROCPORT_RAM_ALL#0 = $30
Constant (const byte) PROCPORT_RAM_IO#0 = $35
Constant (const byte) PROCPORT_RAM_CHARROM#0 = $31
Constant (const byte) PROCPORT_KERNEL_IO#0 = $36
Constant (const byte) PROCPORT_BASIC_KERNEL_IO#0 = $37
Constant (const byte*) CHARGEN#0 = ((byte*))$d000
Constant (const word) SPRITE_PTRS#0 = $3f8
Constant (const byte*) SPRITES_XPOS#0 = ((byte*))$d000
Constant (const byte*) SPRITES_YPOS#0 = ((byte*))$d001
Constant (const byte*) SPRITES_XMSB#0 = ((byte*))$d010
Constant (const byte*) RASTER#0 = ((byte*))$d012
Constant (const byte*) SPRITES_ENABLE#0 = ((byte*))$d015
Constant (const byte*) SPRITES_EXPAND_Y#0 = ((byte*))$d017
Constant (const byte*) SPRITES_PRIORITY#0 = ((byte*))$d01b
Constant (const byte*) SPRITES_MC#0 = ((byte*))$d01c
Constant (const byte*) SPRITES_EXPAND_X#0 = ((byte*))$d01d
Constant (const byte*) BORDERCOL#0 = ((byte*))$d020
Constant (const byte*) BGCOL#0 = ((byte*))$d021
Constant (const byte*) BGCOL1#0 = ((byte*))$d021
Constant (const byte*) BGCOL2#0 = ((byte*))$d022
Constant (const byte*) BGCOL3#0 = ((byte*))$d023
Constant (const byte*) BGCOL4#0 = ((byte*))$d024
Constant (const byte*) SPRITES_MC1#0 = ((byte*))$d025
Constant (const byte*) SPRITES_MC2#0 = ((byte*))$d026
Constant (const byte*) SPRITES_COLS#0 = ((byte*))$d027
Constant (const byte*) VIC_CONTROL#0 = ((byte*))$d011
Constant (const byte*) D011#0 = ((byte*))$d011
Constant (const byte) VIC_RST8#0 = $80
Constant (const byte) VIC_ECM#0 = $40
Constant (const byte) VIC_BMM#0 = $20
Constant (const byte) VIC_DEN#0 = $10
Constant (const byte) VIC_RSEL#0 = 8
Constant (const byte*) VIC_CONTROL2#0 = ((byte*))$d016
Constant (const byte*) D016#0 = ((byte*))$d016
Constant (const byte) VIC_MCM#0 = $10
Constant (const byte) VIC_CSEL#0 = 8
Constant (const byte*) D018#0 = ((byte*))$d018
Constant (const byte*) VIC_MEMORY#0 = ((byte*))$d018
Constant (const byte*) LIGHTPEN_X#0 = ((byte*))$d013
Constant (const byte*) LIGHTPEN_Y#0 = ((byte*))$d014
Constant (const byte*) IRQ_STATUS#0 = ((byte*))$d019
Constant (const byte*) IRQ_ENABLE#0 = ((byte*))$d01a
Constant (const byte) IRQ_RASTER#0 = 1
Constant (const byte) IRQ_COLLISION_BG#0 = 2
Constant (const byte) IRQ_COLLISION_SPRITE#0 = 4
Constant (const byte) IRQ_LIGHTPEN#0 = 8
Constant (const byte*) COLS#0 = ((byte*))$d800
Constant (const byte*) CIA1_PORT_A#0 = ((byte*))$dc00
Constant (const byte*) CIA1_PORT_B#0 = ((byte*))$dc01
Constant (const byte*) CIA1_PORT_A_DDR#0 = ((byte*))$dc02
Constant (const byte*) CIA1_PORT_B_DDR#0 = ((byte*))$dc03
Constant (const byte*) CIA1_INTERRUPT#0 = ((byte*))$dc0d
Constant (const byte) CIA_INTERRUPT_CLEAR#0 = $7f
Constant (const byte*) CIA2_PORT_A#0 = ((byte*))$dd00
Constant (const byte*) CIA2_PORT_B#0 = ((byte*))$dd01
Constant (const byte*) CIA2_PORT_A_DDR#0 = ((byte*))$dd02
Constant (const byte*) CIA2_PORT_B_DDR#0 = ((byte*))$dd03
Constant (const byte*) CIA2_INTERRUPT#0 = ((byte*))$dd0d
Constant (const void()**) KERNEL_IRQ#0 = ((void()**))$314
Constant (const void()**) HARDWARE_IRQ#0 = ((void()**))$fffe
Constant (const byte) BLACK#0 = 0
Constant (const byte) WHITE#0 = 1
Constant (const byte) RED#0 = 2
Constant (const byte) CYAN#0 = 3
Constant (const byte) PURPLE#0 = 4
Constant (const byte) GREEN#0 = 5
Constant (const byte) BLUE#0 = 6
Constant (const byte) YELLOW#0 = 7
Constant (const byte) ORANGE#0 = 8
Constant (const byte) BROWN#0 = 9
Constant (const byte) PINK#0 = $a
Constant (const byte) DARK_GREY#0 = $b
Constant (const byte) GREY#0 = $c
Constant (const byte) LIGHT_GREEN#0 = $d
Constant (const byte) LIGHT_BLUE#0 = $e
Constant (const byte) LIGHT_GREY#0 = $f
Constant (const byte*) DTV_FEATURE#0 = ((byte*))$d03f
Constant (const byte) DTV_FEATURE_ENABLE#0 = 1
Constant (const byte) DTV_FEATURE_DISABLE_TIL_RESET#0 = 2
Constant (const byte*) DTV_CONTROL#0 = ((byte*))$d03c
Constant (const byte) DTV_LINEAR#0 = 1
Constant (const byte) DTV_BORDER_OFF#0 = 2
Constant (const byte) DTV_HIGHCOLOR#0 = 4
Constant (const byte) DTV_OVERSCAN#0 = 8
Constant (const byte) DTV_COLORRAM_OFF#0 = $10
Constant (const byte) DTV_BADLINE_OFF#0 = $20
Constant (const byte) DTV_CHUNKY#0 = $40
Constant (const byte*) DTV_PALETTE#0 = ((byte*))$d200
Constant (const byte[$10]) DTV_PALETTE_DEFAULT#0 = { 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a }
Constant (const byte*) DTV_PLANEA_START_LO#0 = ((byte*))$d03a
Constant (const byte*) DTV_PLANEA_START_MI#0 = ((byte*))$d03b
Constant (const byte*) DTV_PLANEA_START_HI#0 = ((byte*))$d045
Constant (const byte*) DTV_PLANEA_STEP#0 = ((byte*))$d046
Constant (const byte*) DTV_PLANEA_MODULO_LO#0 = ((byte*))$d038
Constant (const byte*) DTV_PLANEA_MODULO_HI#0 = ((byte*))$d039
Constant (const byte*) DTV_PLANEB_START_LO#0 = ((byte*))$d049
Constant (const byte*) DTV_PLANEB_START_MI#0 = ((byte*))$d04a
Constant (const byte*) DTV_PLANEB_START_HI#0 = ((byte*))$d04b
Constant (const byte*) DTV_PLANEB_STEP#0 = ((byte*))$d04c
Constant (const byte*) DTV_PLANEB_MODULO_LO#0 = ((byte*))$d047
Constant (const byte*) DTV_PLANEB_MODULO_HI#0 = ((byte*))$d048
Constant (const byte*) DTV_SPRITE_BANK#0 = ((byte*))$d04d
Constant (const byte*) DTV_COLOR_BANK_LO#0 = ((byte*))$d036
Constant (const byte*) DTV_COLOR_BANK_HI#0 = ((byte*))$d037
Constant (const dword) DTV_COLOR_BANK_DEFAULT#0 = $1d800
Constant (const byte*) DTV_GRAPHICS_VIC_BANK#0 = ((byte*))$d03d
Constant (const byte*) DTV_GRAPHICS_HICOL_BANK#0 = ((byte*))$d03e
Constant (const byte*) dtvSetCpuBankSegment1::cpuBank#0 = ((byte*))$ff
Constant (const byte*) DTV_BLITTER_SRCA_LO#0 = ((byte*))$d320
Constant (const byte*) DTV_BLITTER_SRCA_MI#0 = ((byte*))$d321
Constant (const byte*) DTV_BLITTER_SRCA_HI#0 = ((byte*))$d322
Constant (const byte*) DTV_BLITTER_SRCA_MOD_LO#0 = ((byte*))$d323
Constant (const byte*) DTV_BLITTER_SRCA_MOD_HI#0 = ((byte*))$d324
Constant (const byte*) DTV_BLITTER_SRCA_LIN_LO#0 = ((byte*))$d325
Constant (const byte*) DTV_BLITTER_SRCA_LIN_HI#0 = ((byte*))$d326
Constant (const byte*) DTV_BLITTER_SRCA_STEP#0 = ((byte*))$d327
Constant (const byte*) DTV_BLITTER_SRCB_LO#0 = ((byte*))$d328
Constant (const byte*) DTV_BLITTER_SRCB_MI#0 = ((byte*))$d329
Constant (const byte*) DTV_BLITTER_SRCB_HI#0 = ((byte*))$d32a
Constant (const byte*) DTV_BLITTER_SRCB_MOD_LO#0 = ((byte*))$d32b
Constant (const byte*) DTV_BLITTER_SRCB_MOD_HI#0 = ((byte*))$d32c
Constant (const byte*) DTV_BLITTER_SRCB_LIN_LO#0 = ((byte*))$d32d
Constant (const byte*) DTV_BLITTER_SRCB_LIN_HI#0 = ((byte*))$d32e
Constant (const byte*) DTV_BLITTER_SRCB_STEP#0 = ((byte*))$d32f
Constant (const byte*) DTV_BLITTER_DEST_LO#0 = ((byte*))$d330
Constant (const byte*) DTV_BLITTER_DEST_MI#0 = ((byte*))$d331
Constant (const byte*) DTV_BLITTER_DEST_HI#0 = ((byte*))$d332
Constant (const byte*) DTV_BLITTER_DEST_MOD_LO#0 = ((byte*))$d333
Constant (const byte*) DTV_BLITTER_DEST_MOD_HI#0 = ((byte*))$d334
Constant (const byte*) DTV_BLITTER_DEST_LIN_LO#0 = ((byte*))$d335
Constant (const byte*) DTV_BLITTER_DEST_LIN_HI#0 = ((byte*))$d336
Constant (const byte*) DTV_BLITTER_DEST_STEP#0 = ((byte*))$d337
Constant (const byte*) DTV_BLITTER_LEN_LO#0 = ((byte*))$d338
Constant (const byte*) DTV_BLITTER_LEN_HI#0 = ((byte*))$d339
Constant (const byte*) DTV_BLITTER_CONTROL#0 = ((byte*))$d33a
Constant (const byte) DTV_BLIT_FORCE_START#0 = 1
Constant (const byte) DTV_BLIT_SRCA_FWD#0 = 2
Constant (const byte) DTV_BLIT_SRCB_FWD#0 = 4
Constant (const byte) DTV_BLIT_DEST_FWD#0 = 8
Constant (const byte) DTV_BLIT_VIC_IRQ#0 = $10
Constant (const byte) DTV_BLIT_CIA_IRQ#0 = $20
Constant (const byte) DTV_BLIT_VBLANK#0 = $40
Constant (const byte) DTV_BLIT_IRQ_EN#0 = $80
Constant (const byte*) DTV_BLITTER_TRANSPARANCY#0 = ((byte*))$d33b
Constant (const byte) DTV_BLIT_DISABLE_B#0 = 1
Constant (const byte) DTV_BLIT_WRITE_TRANSPARENT#0 = 2
Constant (const byte) DTV_BLIT_WRITE_NONTRANSPARENT#0 = 4
Constant (const byte) DTV_BLIT_TRANSPARANCY_NONE#0 = 0
Constant (const byte*) DTV_BLITTER_ALU#0 = ((byte*))$d33e
Constant (const byte) DTV_BLIT_SHIFT0#0 = 0
Constant (const byte) DTV_BLIT_SHIFT1#0 = 1
Constant (const byte) DTV_BLIT_SHIFT2#0 = 2
Constant (const byte) DTV_BLIT_SHIFT3#0 = 3
Constant (const byte) DTV_BLIT_SHIFT4#0 = 4
Constant (const byte) DTV_BLIT_SHIFT5#0 = 5
Constant (const byte) DTV_BLIT_SHIFT6#0 = 6
Constant (const byte) DTV_BLIT_SHIFT7#0 = 7
Constant (const byte) DTV_BLIT_AND#0 = 0
Constant (const byte) DTV_BLIT_NAND#0 = 8
Constant (const byte) DTV_BLIT_NOR#0 = $10
Constant (const byte) DTV_BLIT_OR#0 = $18
Constant (const byte) DTV_BLIT_XOR#0 = $20
Constant (const byte) DTV_BLIT_XNOR#0 = $28
Constant (const byte) DTV_BLIT_ADD#0 = $30
Constant (const byte) DTV_BLIT_SUB#0 = $38
Constant (const byte*) DTV_BLITTER_CONTROL2#0 = ((byte*))$d33f
Constant (const byte) DTV_BLIT_CLEAR_IRQ#0 = 1
Constant (const byte) DTV_BLIT_SRCA_CONT#0 = 2
Constant (const byte) DTV_BLIT_SRCB_CONT#0 = 4
Constant (const byte) DTV_BLIT_DEST_CONT#0 = 8
Constant (const byte) DTV_BLIT_STATUS_BUSY#0 = 1
Constant (const byte) DTV_BLIT_STATUS_IRQ#0 = 2
Constant (const byte*) print_screen#0 = ((byte*))$400
Constant (const byte[]) print_hextab#0 = $21
Constant (const byte) KEY_DEL#0 = 0
Constant (const byte) KEY_RETURN#0 = 1
Constant (const byte) KEY_CRSR_RIGHT#0 = 2
Constant (const byte) KEY_F7#0 = 3
Constant (const byte) KEY_F1#0 = 4
Constant (const byte) KEY_F3#0 = 5
Constant (const byte) KEY_F5#0 = 6
Constant (const byte) KEY_CRSR_DOWN#0 = 7
Constant (const byte) KEY_3#0 = 8
Constant (const byte) KEY_W#0 = 9
Constant (const byte) KEY_A#0 = $a
Constant (const byte) KEY_4#0 = $b
Constant (const byte) KEY_Z#0 = $c
Constant (const byte) KEY_S#0 = $d
Constant (const byte) KEY_E#0 = $e
Constant (const byte) KEY_LSHIFT#0 = $f
Constant (const byte) KEY_5#0 = $10
Constant (const byte) KEY_R#0 = $11
Constant (const byte) KEY_D#0 = $12
Constant (const byte) KEY_6#0 = $13
Constant (const byte) KEY_C#0 = $14
Constant (const byte) KEY_F#0 = $15
Constant (const byte) KEY_T#0 = $16
Constant (const byte) KEY_X#0 = $17
Constant (const byte) KEY_7#0 = $18
Constant (const byte) KEY_Y#0 = $19
Constant (const byte) KEY_G#0 = $1a
Constant (const byte) KEY_8#0 = $1b
Constant (const byte) KEY_B#0 = $1c
Constant (const byte) KEY_H#0 = $1d
Constant (const byte) KEY_U#0 = $1e
Constant (const byte) KEY_V#0 = $1f
Constant (const byte) KEY_9#0 = $20
Constant (const byte) KEY_I#0 = $21
Constant (const byte) KEY_J#0 = $22
Constant (const byte) KEY_0#0 = $23
Constant (const byte) KEY_M#0 = $24
Constant (const byte) KEY_K#0 = $25
Constant (const byte) KEY_O#0 = $26
Constant (const byte) KEY_N#0 = $27
Constant (const byte) KEY_PLUS#0 = $28
Constant (const byte) KEY_P#0 = $29
Constant (const byte) KEY_L#0 = $2a
Constant (const byte) KEY_MINUS#0 = $2b
Constant (const byte) KEY_DOT#0 = $2c
Constant (const byte) KEY_COLON#0 = $2d
Constant (const byte) KEY_AT#0 = $2e
Constant (const byte) KEY_COMMA#0 = $2f
Constant (const byte) KEY_POUND#0 = $30
Constant (const byte) KEY_ASTERISK#0 = $31
Constant (const byte) KEY_SEMICOLON#0 = $32
Constant (const byte) KEY_HOME#0 = $33
Constant (const byte) KEY_RSHIFT#0 = $34
Constant (const byte) KEY_EQUALS#0 = $35
Constant (const byte) KEY_ARROW_UP#0 = $36
Constant (const byte) KEY_SLASH#0 = $37
Constant (const byte) KEY_1#0 = $38
Constant (const byte) KEY_ARROW_LEFT#0 = $39
Constant (const byte) KEY_CTRL#0 = $3a
Constant (const byte) KEY_2#0 = $3b
Constant (const byte) KEY_SPACE#0 = $3c
Constant (const byte) KEY_COMMODORE#0 = $3d
Constant (const byte) KEY_Q#0 = $3e
Constant (const byte) KEY_RUNSTOP#0 = $3f
Constant (const byte[8]) keyboard_matrix_row_bitmask#0 = { $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f }
Constant (const byte[8]) keyboard_matrix_col_bitmask#0 = { 1, 2, 4, 8, $10, $20, $40, $80 }
Constant (const byte[8]) keyboard_events#0 = { fill( 8, 0) }
Constant (const byte) keyboard_events_size#0 = 0
Constant (const byte) keyboard_modifiers#0 = 0
Constant (const byte) KEY_MODIFIER_LSHIFT#0 = 1
Constant (const byte) KEY_MODIFIER_RSHIFT#0 = 2
Constant (const byte) KEY_MODIFIER_CTRL#0 = 4
Constant (const byte) KEY_MODIFIER_COMMODORE#0 = 8
Constant (const byte[8]) keyboard_scan_values#0 = { fill( 8, 0) }
Constant (const byte[$100]) bitmap_plot_xlo#0 = { fill( $100, 0) }
Constant (const byte[$100]) bitmap_plot_xhi#0 = { fill( $100, 0) }
Constant (const byte[$100]) bitmap_plot_ylo#0 = { fill( $100, 0) }
Constant (const byte[$100]) bitmap_plot_yhi#0 = { fill( $100, 0) }
Constant (const byte[$100]) bitmap_plot_bit#0 = { fill( $100, 0) }
Constant (const byte) bitmap_init::bits#0 = $80
Constant (const byte) bitmap_init::x#0 = 0
Constant (const byte) bitmap_init::bits#2 = $80
Constant (const byte*) bitmap_init::yoffs#0 = ((byte*))0
Constant (const byte) bitmap_init::y#0 = 0
Constant (const word/signed word/dword/signed dword) bitmap_init::$13 = $28*8
Constant (const byte) bitmap_clear::y#0 = 0
Constant (const byte) bitmap_clear::x#0 = 0
Constant (const byte) bitmap_line::xd#0 = 0
Constant (const byte) bitmap_line::yd#0 = 0
Constant (const string) $1 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"
Constant (const byte*) menu::SCREEN#0 = ((byte*))$8000
Constant (const byte*) menu::CHARSET#0 = ((byte*))$9800
Constant (const byte) menu::i#0 = 0
Constant (const byte) dtv_control#129 = 0
Constant (const byte) mode_ctrl::ctrl#7 = 0
Constant (const byte*) mode_stdchar::SCREEN#0 = ((byte*))$8000
Constant (const byte*) mode_stdchar::CHARSET#0 = ((byte*))$9000
Constant (const byte*) mode_stdchar::COLORS#0 = ((byte*))$d800
Constant (const byte) dtv_control#18 = 0
Constant (const byte) mode_stdchar::i#0 = 0
Constant (const byte) mode_stdchar::cy#0 = 0
Constant (const byte) mode_stdchar::cx#0 = 0
Constant (const byte*) mode_ecmchar::SCREEN#0 = ((byte*))$8000
Constant (const byte*) mode_ecmchar::CHARSET#0 = ((byte*))$9000
Constant (const byte*) mode_ecmchar::COLORS#0 = ((byte*))$d800
Constant (const byte) dtv_control#21 = 0
Constant (const byte) mode_ecmchar::i#0 = 0
Constant (const byte) mode_ecmchar::cy#0 = 0
Constant (const byte) mode_ecmchar::cx#0 = 0
Constant (const byte*) mode_mcchar::SCREEN#0 = ((byte*))$8000
Constant (const byte*) mode_mcchar::CHARSET#0 = ((byte*))$9000
Constant (const byte*) mode_mcchar::COLORS#0 = ((byte*))$d800
Constant (const byte) dtv_control#24 = 0
Constant (const byte) mode_mcchar::i#0 = 0
Constant (const byte) mode_mcchar::cy#0 = 0
Constant (const byte) mode_mcchar::cx#0 = 0
Constant (const byte*) mode_stdbitmap::SCREEN#0 = ((byte*))$4000
Constant (const byte*) mode_stdbitmap::BITMAP#0 = ((byte*))$6000
Constant (const byte) dtv_control#27 = 0
Constant (const byte) mode_stdbitmap::i#0 = 0
Constant (const byte) mode_stdbitmap::cy#0 = 0
Constant (const byte) mode_stdbitmap::cx#0 = 0
Constant (const byte[]) mode_stdbitmap::lines_x#0 = { 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80 }
Constant (const byte[]) mode_stdbitmap::lines_y#0 = { 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0 }
Constant (const byte) mode_stdbitmap::lines_cnt#0 = 9
Constant (const byte) mode_stdbitmap::l#0 = 0
Constant (const byte*) mode_hicolstdchar::SCREEN#0 = ((byte*))$8000
Constant (const byte*) mode_hicolstdchar::CHARSET#0 = ((byte*))$9000
Constant (const byte*) mode_hicolstdchar::COLORS#0 = ((byte*))$8400
Constant (const byte) mode_hicolstdchar::i#0 = 0
Constant (const byte) mode_hicolstdchar::cy#0 = 0
Constant (const byte) mode_hicolstdchar::cx#0 = 0
Constant (const byte*) mode_hicolecmchar::SCREEN#0 = ((byte*))$8000
Constant (const byte*) mode_hicolecmchar::CHARSET#0 = ((byte*))$9000
Constant (const byte*) mode_hicolecmchar::COLORS#0 = ((byte*))$8400
Constant (const byte) mode_hicolecmchar::i#0 = 0
Constant (const byte) mode_hicolecmchar::cy#0 = 0
Constant (const byte) mode_hicolecmchar::cx#0 = 0
Constant (const byte*) mode_hicolmcchar::SCREEN#0 = ((byte*))$8000
Constant (const byte*) mode_hicolmcchar::CHARSET#0 = ((byte*))$9000
Constant (const byte*) mode_hicolmcchar::COLORS#0 = ((byte*))$8400
Constant (const byte) mode_hicolmcchar::i#0 = 0
Constant (const byte) mode_hicolmcchar::cy#0 = 0
Constant (const byte) mode_hicolmcchar::cx#0 = 0
Constant (const byte*) mode_twoplanebitmap::PLANEA#0 = ((byte*))$4000
Constant (const byte*) mode_twoplanebitmap::PLANEB#0 = ((byte*))$6000
Constant (const byte*) mode_twoplanebitmap::COLORS#0 = ((byte*))$8000
Constant (const byte) mode_twoplanebitmap::i#0 = 0
Constant (const byte) mode_twoplanebitmap::cy#0 = 0
Constant (const byte) mode_twoplanebitmap::cx#0 = 0
Constant (const byte) mode_twoplanebitmap::ay#0 = 0
Constant (const byte) mode_twoplanebitmap::ax#0 = 0
Constant (const byte) mode_twoplanebitmap::by#0 = 0
Constant (const byte) mode_twoplanebitmap::bx#0 = 0
Constant (const byte*) mode_sixsfred::PLANEA#0 = ((byte*))$4000
Constant (const byte*) mode_sixsfred::PLANEB#0 = ((byte*))$6000
Constant (const byte*) mode_sixsfred::COLORS#0 = ((byte*))$8000
Constant (const byte) mode_sixsfred::i#0 = 0
Constant (const byte) mode_sixsfred::cy#0 = 0
Constant (const byte) mode_sixsfred::cx#0 = 0
Constant (const byte[]) mode_sixsfred::row_bitmask#0 = { 0, $55, $aa, $ff }
Constant (const byte) mode_sixsfred::ay#0 = 0
Constant (const byte) mode_sixsfred::ax#0 = 0
Constant (const byte) mode_sixsfred::by#0 = 0
Constant (const byte) mode_sixsfred::bx#0 = 0
Constant (const byte*) mode_sixsfred2::PLANEA#0 = ((byte*))$4000
Constant (const byte*) mode_sixsfred2::PLANEB#0 = ((byte*))$6000
Constant (const byte*) mode_sixsfred2::COLORS#0 = ((byte*))$8000
Constant (const byte) mode_sixsfred2::i#0 = 0
Constant (const byte) mode_sixsfred2::cy#0 = 0
Constant (const byte) mode_sixsfred2::cx#0 = 0
Constant (const byte[]) mode_sixsfred2::row_bitmask#0 = { 0, $55, $aa, $ff }
Constant (const byte) mode_sixsfred2::ay#0 = 0
Constant (const byte) mode_sixsfred2::ax#0 = 0
Constant (const byte) mode_sixsfred2::by#0 = 0
Constant (const byte) mode_sixsfred2::bx#0 = 0
Constant (const byte*) mode_8bpppixelcell::PLANEA#0 = ((byte*))$3c00
Constant (const byte*) mode_8bpppixelcell::PLANEB#0 = ((byte*))$4000
Constant (const byte) mode_8bpppixelcell::i#0 = 0
Constant (const byte) mode_8bpppixelcell::ay#0 = 0
Constant (const byte) mode_8bpppixelcell::ax#0 = 0
Constant (const byte*) mode_8bpppixelcell::chargen#0 = ((byte*))$d000
Constant (const byte) mode_8bpppixelcell::col#0 = 0
Constant (const byte) mode_8bpppixelcell::ch#0 = 0
Constant (const byte) mode_8bpppixelcell::cr#0 = 0
Constant (const byte) mode_8bpppixelcell::cp#0 = 0
Constant (const byte) mode_8bpppixelcell::c#0 = 0
Constant (const dword) mode_8bppchunkybmm::PLANEB#0 = $20000
Constant (const byte) mode_8bppchunkybmm::i#0 = 0
Constant (const byte*) mode_8bppchunkybmm::gfxb#0 = ((byte*))$4000
Constant (const byte) mode_8bppchunkybmm::y#0 = 0
Constant (const word) mode_8bppchunkybmm::x#0 = 0
Constant (const byte*) mode_8bppchunkybmm::gfxb#2 = ((byte*))$4000
Constant (const byte/signed byte/word/signed word/dword/signed dword) mode_8bppchunkybmm::$27 = $4000/$4000
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte[]) keyboard_char_keycodes#0 = { KEY_AT#0, KEY_A#0, KEY_B#0, KEY_C#0, KEY_D#0, KEY_E#0, KEY_F#0, KEY_G#0, KEY_H#0, KEY_I#0, KEY_J#0, KEY_K#0, KEY_L#0, KEY_M#0, KEY_N#0, KEY_O#0, KEY_P#0, KEY_Q#0, KEY_R#0, KEY_S#0, KEY_T#0, KEY_U#0, KEY_V#0, KEY_W#0, KEY_X#0, KEY_Y#0, KEY_Z#0, $3f, KEY_POUND#0, $3f, KEY_ARROW_UP#0, KEY_ARROW_LEFT#0, KEY_SPACE#0, $3f, $3f, $3f, $3f, $3f, $3f, $3f, $3f, $3f, KEY_ASTERISK#0, KEY_PLUS#0, KEY_COMMA#0, KEY_MINUS#0, KEY_DOT#0, KEY_SLASH#0, KEY_0#0, KEY_1#0, KEY_2#0, KEY_3#0, KEY_4#0, KEY_5#0, KEY_6#0, KEY_7#0, KEY_8#0, KEY_9#0, KEY_COLON#0, KEY_SEMICOLON#0, $3f, KEY_EQUALS#0, $3f, $3f }
Constant (const byte) KEY_MODIFIER_SHIFT#0 = KEY_MODIFIER_LSHIFT#0|KEY_MODIFIER_RSHIFT#0
Constant (const string) $2 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"
Constant (const dword) menu::$0 = ((dword))menu::CHARSET#0
Constant (const dword) menu::$3 = DTV_COLOR_BANK_DEFAULT#0/$400
Constant (const dword) menu::$6 = DTV_COLOR_BANK_DEFAULT#0/$400
Constant (const word) menu::$9 = ((word))menu::CHARSET#0
Constant (const byte) menu::$13 = VIC_DEN#0|VIC_RSEL#0
Constant (const word) menu::$15 = ((word))menu::SCREEN#0
Constant (const word) menu::$18 = ((word))menu::CHARSET#0
Constant (const byte*) menu::c#0 = COLS#0
Constant (const byte*) menu::$24 = COLS#0+$3e8
Constant (const byte*) print_set_screen::screen#0 = menu::SCREEN#0
Constant (const byte) keyboard_key_pressed::key#0 = KEY_1#0
Constant (const byte) keyboard_key_pressed::key#1 = KEY_2#0
Constant (const byte) keyboard_key_pressed::key#2 = KEY_3#0
Constant (const byte) keyboard_key_pressed::key#3 = KEY_4#0
Constant (const byte) keyboard_key_pressed::key#4 = KEY_6#0
Constant (const byte) keyboard_key_pressed::key#5 = KEY_7#0
Constant (const byte) keyboard_key_pressed::key#6 = KEY_8#0
Constant (const byte) keyboard_key_pressed::key#7 = KEY_A#0
Constant (const byte) keyboard_key_pressed::key#8 = KEY_B#0
Constant (const byte) keyboard_key_pressed::key#9 = KEY_C#0
Constant (const byte) keyboard_key_pressed::key#10 = KEY_D#0
Constant (const byte) keyboard_key_pressed::key#11 = KEY_E#0
Constant (const byte) keyboard_key_pressed::key#12 = KEY_SPACE#0
Constant (const byte) keyboard_key_pressed::key#13 = KEY_L#0
Constant (const byte) keyboard_key_pressed::key#14 = KEY_H#0
Constant (const byte) keyboard_key_pressed::key#15 = KEY_O#0
Constant (const byte) keyboard_key_pressed::key#16 = KEY_B#0
Constant (const byte) keyboard_key_pressed::key#17 = KEY_U#0
Constant (const byte) keyboard_key_pressed::key#18 = KEY_C#0
Constant (const byte) keyboard_key_pressed::key#19 = KEY_0#0
Constant (const dword) mode_stdchar::$0 = ((dword))mode_stdchar::CHARSET#0
Constant (const dword) mode_stdchar::$3 = DTV_COLOR_BANK_DEFAULT#0/$400
Constant (const dword) mode_stdchar::$6 = DTV_COLOR_BANK_DEFAULT#0/$400
Constant (const word) mode_stdchar::$9 = ((word))mode_stdchar::CHARSET#0
Constant (const byte) mode_stdchar::$13 = VIC_DEN#0|VIC_RSEL#0
Constant (const word) mode_stdchar::$15 = ((word))mode_stdchar::SCREEN#0
Constant (const word) mode_stdchar::$18 = ((word))mode_stdchar::CHARSET#0
Constant (const dword) mode_ecmchar::$0 = ((dword))mode_ecmchar::CHARSET#0
Constant (const dword) mode_ecmchar::$3 = DTV_COLOR_BANK_DEFAULT#0/$400
Constant (const dword) mode_ecmchar::$6 = DTV_COLOR_BANK_DEFAULT#0/$400
Constant (const word) mode_ecmchar::$9 = ((word))mode_ecmchar::CHARSET#0
Constant (const byte) mode_ecmchar::$13 = VIC_DEN#0|VIC_RSEL#0
Constant (const word) mode_ecmchar::$16 = ((word))mode_ecmchar::SCREEN#0
Constant (const word) mode_ecmchar::$19 = ((word))mode_ecmchar::CHARSET#0
Constant (const dword) mode_mcchar::$0 = ((dword))mode_mcchar::CHARSET#0
Constant (const dword) mode_mcchar::$3 = DTV_COLOR_BANK_DEFAULT#0/$400
Constant (const dword) mode_mcchar::$6 = DTV_COLOR_BANK_DEFAULT#0/$400
Constant (const word) mode_mcchar::$9 = ((word))mode_mcchar::CHARSET#0
Constant (const byte) mode_mcchar::$13 = VIC_DEN#0|VIC_RSEL#0
Constant (const byte) mode_mcchar::$15 = VIC_CSEL#0|VIC_MCM#0
Constant (const word) mode_mcchar::$16 = ((word))mode_mcchar::SCREEN#0
Constant (const word) mode_mcchar::$19 = ((word))mode_mcchar::CHARSET#0
Constant (const dword) mode_stdbitmap::$0 = ((dword))mode_stdbitmap::BITMAP#0
Constant (const word) mode_stdbitmap::$3 = ((word))mode_stdbitmap::BITMAP#0
Constant (const byte) mode_stdbitmap::$7 = VIC_BMM#0|VIC_DEN#0
Constant (const word) mode_stdbitmap::$10 = ((word))mode_stdbitmap::SCREEN#0
Constant (const word) mode_stdbitmap::$13 = ((word))mode_stdbitmap::BITMAP#0
Constant (const byte*) bitmap_init::bitmap#0 = mode_stdbitmap::BITMAP#0
Constant (const dword) mode_hicolstdchar::$0 = ((dword))mode_hicolstdchar::CHARSET#0
Constant (const byte*) mode_hicolstdchar::$3 = mode_hicolstdchar::COLORS#0/$400
Constant (const byte*) mode_hicolstdchar::$6 = mode_hicolstdchar::COLORS#0/$400
Constant (const byte) dtv_control#30 = DTV_HIGHCOLOR#0
Constant (const word) mode_hicolstdchar::$9 = ((word))mode_hicolstdchar::CHARSET#0
Constant (const byte) mode_hicolstdchar::$13 = VIC_DEN#0|VIC_RSEL#0
Constant (const word) mode_hicolstdchar::$15 = ((word))mode_hicolstdchar::SCREEN#0
Constant (const word) mode_hicolstdchar::$18 = ((word))mode_hicolstdchar::CHARSET#0
Constant (const dword) mode_hicolecmchar::$0 = ((dword))mode_hicolecmchar::CHARSET#0
Constant (const byte*) mode_hicolecmchar::$3 = mode_hicolecmchar::COLORS#0/$400
Constant (const byte*) mode_hicolecmchar::$6 = mode_hicolecmchar::COLORS#0/$400
Constant (const byte) dtv_control#33 = DTV_HIGHCOLOR#0
Constant (const word) mode_hicolecmchar::$9 = ((word))mode_hicolecmchar::CHARSET#0
Constant (const byte) mode_hicolecmchar::$13 = VIC_DEN#0|VIC_RSEL#0
Constant (const word) mode_hicolecmchar::$16 = ((word))mode_hicolecmchar::SCREEN#0
Constant (const word) mode_hicolecmchar::$19 = ((word))mode_hicolecmchar::CHARSET#0
Constant (const dword) mode_hicolmcchar::$0 = ((dword))mode_hicolmcchar::CHARSET#0
Constant (const byte*) mode_hicolmcchar::$3 = mode_hicolmcchar::COLORS#0/$400
Constant (const byte*) mode_hicolmcchar::$6 = mode_hicolmcchar::COLORS#0/$400
Constant (const byte) dtv_control#36 = DTV_HIGHCOLOR#0
Constant (const word) mode_hicolmcchar::$9 = ((word))mode_hicolmcchar::CHARSET#0
Constant (const byte) mode_hicolmcchar::$13 = VIC_DEN#0|VIC_RSEL#0
Constant (const byte) mode_hicolmcchar::$15 = VIC_CSEL#0|VIC_MCM#0
Constant (const word) mode_hicolmcchar::$16 = ((word))mode_hicolmcchar::SCREEN#0
Constant (const word) mode_hicolmcchar::$19 = ((word))mode_hicolmcchar::CHARSET#0
Constant (const byte) dtv_control#39 = DTV_HIGHCOLOR#0|DTV_LINEAR#0
Constant (const byte) mode_twoplanebitmap::$1 = DTV_HIGHCOLOR#0|DTV_LINEAR#0
Constant (const byte) mode_twoplanebitmap::$2 = VIC_ECM#0|VIC_BMM#0
Constant (const byte) mode_twoplanebitmap::$6 = <mode_twoplanebitmap::PLANEA#0
Constant (const byte) mode_twoplanebitmap::$7 = >mode_twoplanebitmap::PLANEA#0
Constant (const byte) mode_twoplanebitmap::$8 = <mode_twoplanebitmap::PLANEB#0
Constant (const byte) mode_twoplanebitmap::$9 = >mode_twoplanebitmap::PLANEB#0
Constant (const byte*) mode_twoplanebitmap::$10 = mode_twoplanebitmap::COLORS#0/$400
Constant (const byte*) mode_twoplanebitmap::$12 = mode_twoplanebitmap::COLORS#0/$400
Constant (const byte) dtv_control#42 = DTV_HIGHCOLOR#0|DTV_LINEAR#0
Constant (const byte) mode_sixsfred::$1 = DTV_HIGHCOLOR#0|DTV_LINEAR#0
Constant (const byte) mode_sixsfred::$2 = VIC_ECM#0|VIC_BMM#0
Constant (const byte) mode_sixsfred::$6 = VIC_MCM#0|VIC_CSEL#0
Constant (const byte) mode_sixsfred::$7 = <mode_sixsfred::PLANEA#0
Constant (const byte) mode_sixsfred::$8 = >mode_sixsfred::PLANEA#0
Constant (const byte) mode_sixsfred::$9 = <mode_sixsfred::PLANEB#0
Constant (const byte) mode_sixsfred::$10 = >mode_sixsfred::PLANEB#0
Constant (const byte*) mode_sixsfred::$11 = mode_sixsfred::COLORS#0/$400
Constant (const byte*) mode_sixsfred::$13 = mode_sixsfred::COLORS#0/$400
Constant (const byte) dtv_control#45 = DTV_LINEAR#0
Constant (const byte) mode_sixsfred2::$0 = VIC_ECM#0|VIC_BMM#0
Constant (const byte) mode_sixsfred2::$4 = VIC_MCM#0|VIC_CSEL#0
Constant (const byte) mode_sixsfred2::$5 = <mode_sixsfred2::PLANEA#0
Constant (const byte) mode_sixsfred2::$6 = >mode_sixsfred2::PLANEA#0
Constant (const byte) mode_sixsfred2::$7 = <mode_sixsfred2::PLANEB#0
Constant (const byte) mode_sixsfred2::$8 = >mode_sixsfred2::PLANEB#0
Constant (const byte*) mode_sixsfred2::$9 = mode_sixsfred2::COLORS#0/$400
Constant (const byte*) mode_sixsfred2::$11 = mode_sixsfred2::COLORS#0/$400
Constant (const byte) mode_8bpppixelcell::$0 = DTV_HIGHCOLOR#0|DTV_LINEAR#0
Constant (const byte) mode_8bpppixelcell::$2 = DTV_HIGHCOLOR#0|DTV_LINEAR#0
Constant (const byte) mode_8bpppixelcell::$4 = VIC_ECM#0|VIC_DEN#0
Constant (const byte) mode_8bpppixelcell::$7 = VIC_MCM#0|VIC_CSEL#0
Constant (const byte) mode_8bpppixelcell::$8 = <mode_8bpppixelcell::PLANEA#0
Constant (const byte) mode_8bpppixelcell::$9 = >mode_8bpppixelcell::PLANEA#0
Constant (const byte) mode_8bpppixelcell::$10 = <mode_8bpppixelcell::PLANEB#0
Constant (const byte) mode_8bpppixelcell::$11 = >mode_8bpppixelcell::PLANEB#0
Constant (const byte) mode_8bppchunkybmm::$0 = DTV_HIGHCOLOR#0|DTV_LINEAR#0
Constant (const byte) mode_8bppchunkybmm::$3 = DTV_HIGHCOLOR#0|DTV_LINEAR#0
Constant (const byte) mode_8bppchunkybmm::$6 = VIC_ECM#0|VIC_DEN#0
Constant (const byte) mode_8bppchunkybmm::$9 = VIC_MCM#0|VIC_CSEL#0
Constant (const word) mode_8bppchunkybmm::$10 = <mode_8bppchunkybmm::PLANEB#0
Constant (const word) mode_8bppchunkybmm::$12 = <mode_8bppchunkybmm::PLANEB#0
Constant (const word) mode_8bppchunkybmm::$14 = >mode_8bppchunkybmm::PLANEB#0
Constant (const dword) mode_8bppchunkybmm::$17 = mode_8bppchunkybmm::PLANEB#0/$4000
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#2 = ((byte))mode_8bppchunkybmm::$27
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_screen#1 = print_set_screen::screen#0
Constant (const byte) bitmap_init::$1 = >bitmap_init::bitmap#0
Constant (const string) $3 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"
Constant (const dword) menu::$1 = menu::$0/$10000
Constant (const word) menu::$4 = ((word))menu::$3
Constant (const word) menu::$7 = ((word))menu::$6
Constant (const word/signed dword/dword) menu::$10 = menu::$9/$4000
Constant (const byte/word/dword) menu::$14 = menu::$13|3
Constant (const word) menu::$16 = menu::$15&$3fff
Constant (const word) menu::$19 = menu::$18&$3fff
Constant (const dword) mode_stdchar::$1 = mode_stdchar::$0/$10000
Constant (const word) mode_stdchar::$4 = ((word))mode_stdchar::$3
Constant (const word) mode_stdchar::$7 = ((word))mode_stdchar::$6
Constant (const word/signed dword/dword) mode_stdchar::$10 = mode_stdchar::$9/$4000
Constant (const byte/word/dword) mode_stdchar::$14 = mode_stdchar::$13|3
Constant (const word) mode_stdchar::$16 = mode_stdchar::$15&$3fff
Constant (const word) mode_stdchar::$19 = mode_stdchar::$18&$3fff
Constant (const dword) mode_ecmchar::$1 = mode_ecmchar::$0/$10000
Constant (const word) mode_ecmchar::$4 = ((word))mode_ecmchar::$3
Constant (const word) mode_ecmchar::$7 = ((word))mode_ecmchar::$6
Constant (const word/signed dword/dword) mode_ecmchar::$10 = mode_ecmchar::$9/$4000
Constant (const byte) mode_ecmchar::$14 = mode_ecmchar::$13|VIC_ECM#0
Constant (const word) mode_ecmchar::$17 = mode_ecmchar::$16&$3fff
Constant (const word) mode_ecmchar::$20 = mode_ecmchar::$19&$3fff
Constant (const dword) mode_mcchar::$1 = mode_mcchar::$0/$10000
Constant (const word) mode_mcchar::$4 = ((word))mode_mcchar::$3
Constant (const word) mode_mcchar::$7 = ((word))mode_mcchar::$6
Constant (const word/signed dword/dword) mode_mcchar::$10 = mode_mcchar::$9/$4000
Constant (const byte/word/dword) mode_mcchar::$14 = mode_mcchar::$13|3
Constant (const word) mode_mcchar::$17 = mode_mcchar::$16&$3fff
Constant (const word) mode_mcchar::$20 = mode_mcchar::$19&$3fff
Constant (const dword) mode_stdbitmap::$1 = mode_stdbitmap::$0/$10000
Constant (const word/signed dword/dword) mode_stdbitmap::$4 = mode_stdbitmap::$3/$4000
Constant (const byte) mode_stdbitmap::$8 = mode_stdbitmap::$7|VIC_RSEL#0
Constant (const word) mode_stdbitmap::$11 = mode_stdbitmap::$10&$3fff
Constant (const word) mode_stdbitmap::$14 = mode_stdbitmap::$13&$3fff
Constant (const dword) mode_hicolstdchar::$1 = mode_hicolstdchar::$0/$10000
Constant (const word) mode_hicolstdchar::$4 = ((word))mode_hicolstdchar::$3
Constant (const word) mode_hicolstdchar::$7 = ((word))mode_hicolstdchar::$6
Constant (const word/signed dword/dword) mode_hicolstdchar::$10 = mode_hicolstdchar::$9/$4000
Constant (const byte/word/dword) mode_hicolstdchar::$14 = mode_hicolstdchar::$13|3
Constant (const word) mode_hicolstdchar::$16 = mode_hicolstdchar::$15&$3fff
Constant (const word) mode_hicolstdchar::$19 = mode_hicolstdchar::$18&$3fff
Constant (const dword) mode_hicolecmchar::$1 = mode_hicolecmchar::$0/$10000
Constant (const word) mode_hicolecmchar::$4 = ((word))mode_hicolecmchar::$3
Constant (const word) mode_hicolecmchar::$7 = ((word))mode_hicolecmchar::$6
Constant (const word/signed dword/dword) mode_hicolecmchar::$10 = mode_hicolecmchar::$9/$4000
Constant (const byte) mode_hicolecmchar::$14 = mode_hicolecmchar::$13|VIC_ECM#0
Constant (const word) mode_hicolecmchar::$17 = mode_hicolecmchar::$16&$3fff
Constant (const word) mode_hicolecmchar::$20 = mode_hicolecmchar::$19&$3fff
Constant (const dword) mode_hicolmcchar::$1 = mode_hicolmcchar::$0/$10000
Constant (const word) mode_hicolmcchar::$4 = ((word))mode_hicolmcchar::$3
Constant (const word) mode_hicolmcchar::$7 = ((word))mode_hicolmcchar::$6
Constant (const word/signed dword/dword) mode_hicolmcchar::$10 = mode_hicolmcchar::$9/$4000
Constant (const byte/word/dword) mode_hicolmcchar::$14 = mode_hicolmcchar::$13|3
Constant (const word) mode_hicolmcchar::$17 = mode_hicolmcchar::$16&$3fff
Constant (const word) mode_hicolmcchar::$20 = mode_hicolmcchar::$19&$3fff
Constant (const byte) mode_twoplanebitmap::$3 = mode_twoplanebitmap::$2|VIC_DEN#0
Constant (const byte) mode_twoplanebitmap::$11 = <mode_twoplanebitmap::$10
Constant (const byte) mode_twoplanebitmap::$13 = >mode_twoplanebitmap::$12
Constant (const byte) mode_sixsfred::$3 = mode_sixsfred::$2|VIC_DEN#0
Constant (const byte) mode_sixsfred::$12 = <mode_sixsfred::$11
Constant (const byte) mode_sixsfred::$14 = >mode_sixsfred::$13
Constant (const byte) mode_sixsfred2::$1 = mode_sixsfred2::$0|VIC_DEN#0
Constant (const byte) mode_sixsfred2::$10 = <mode_sixsfred2::$9
Constant (const byte) mode_sixsfred2::$12 = >mode_sixsfred2::$11
Constant (const byte) dtv_control#48 = mode_8bpppixelcell::$0|DTV_CHUNKY#0
Constant (const byte) mode_8bpppixelcell::$3 = mode_8bpppixelcell::$2|DTV_CHUNKY#0
Constant (const byte) mode_8bpppixelcell::$5 = mode_8bpppixelcell::$4|VIC_RSEL#0
Constant (const byte) mode_8bppchunkybmm::$1 = mode_8bppchunkybmm::$0|DTV_CHUNKY#0
Constant (const byte) mode_8bppchunkybmm::$4 = mode_8bppchunkybmm::$3|DTV_CHUNKY#0
Constant (const byte) mode_8bppchunkybmm::$7 = mode_8bppchunkybmm::$6|VIC_RSEL#0
Constant (const byte) mode_8bppchunkybmm::$11 = <mode_8bppchunkybmm::$10
Constant (const byte) mode_8bppchunkybmm::$13 = >mode_8bppchunkybmm::$12
Constant (const byte) mode_8bppchunkybmm::$15 = <mode_8bppchunkybmm::$14
Constant (const byte) mode_8bppchunkybmm::gfxbCpuBank#0 = ((byte))mode_8bppchunkybmm::$17
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_cls::sc#0 = print_screen#1
Constant (const byte*) print_cls::$0 = print_screen#1+$3e8
Constant (const string) $4 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"
Constant (const byte) menu::$2 = ((byte))menu::$1
Constant (const byte) menu::$5 = <menu::$4
Constant (const byte) menu::$8 = >menu::$7
Constant (const byte) menu::$11 = ((byte))menu::$10
Constant (const word/signed dword/dword) menu::$17 = menu::$16/$40
Constant (const word/signed dword/dword) menu::$20 = menu::$19/$400
Constant (const byte) mode_stdchar::$2 = ((byte))mode_stdchar::$1
Constant (const byte) mode_stdchar::$5 = <mode_stdchar::$4
Constant (const byte) mode_stdchar::$8 = >mode_stdchar::$7
Constant (const byte) mode_stdchar::$11 = ((byte))mode_stdchar::$10
Constant (const word/signed dword/dword) mode_stdchar::$17 = mode_stdchar::$16/$40
Constant (const word/signed dword/dword) mode_stdchar::$20 = mode_stdchar::$19/$400
Constant (const byte) mode_ecmchar::$2 = ((byte))mode_ecmchar::$1
Constant (const byte) mode_ecmchar::$5 = <mode_ecmchar::$4
Constant (const byte) mode_ecmchar::$8 = >mode_ecmchar::$7
Constant (const byte) mode_ecmchar::$11 = ((byte))mode_ecmchar::$10
Constant (const byte/word/dword) mode_ecmchar::$15 = mode_ecmchar::$14|3
Constant (const word/signed dword/dword) mode_ecmchar::$18 = mode_ecmchar::$17/$40
Constant (const word/signed dword/dword) mode_ecmchar::$21 = mode_ecmchar::$20/$400
Constant (const byte) mode_mcchar::$2 = ((byte))mode_mcchar::$1
Constant (const byte) mode_mcchar::$5 = <mode_mcchar::$4
Constant (const byte) mode_mcchar::$8 = >mode_mcchar::$7
Constant (const byte) mode_mcchar::$11 = ((byte))mode_mcchar::$10
Constant (const word/signed dword/dword) mode_mcchar::$18 = mode_mcchar::$17/$40
Constant (const word/signed dword/dword) mode_mcchar::$21 = mode_mcchar::$20/$400
Constant (const byte) mode_stdbitmap::$2 = ((byte))mode_stdbitmap::$1
Constant (const byte) mode_stdbitmap::$5 = ((byte))mode_stdbitmap::$4
Constant (const byte/word/dword) mode_stdbitmap::$9 = mode_stdbitmap::$8|3
Constant (const word/signed dword/dword) mode_stdbitmap::$12 = mode_stdbitmap::$11/$40
Constant (const word/signed dword/dword) mode_stdbitmap::$15 = mode_stdbitmap::$14/$400
Constant (const byte) mode_hicolstdchar::$2 = ((byte))mode_hicolstdchar::$1
Constant (const byte) mode_hicolstdchar::$5 = <mode_hicolstdchar::$4
Constant (const byte) mode_hicolstdchar::$8 = >mode_hicolstdchar::$7
Constant (const byte) mode_hicolstdchar::$11 = ((byte))mode_hicolstdchar::$10
Constant (const word/signed dword/dword) mode_hicolstdchar::$17 = mode_hicolstdchar::$16/$40
Constant (const word/signed dword/dword) mode_hicolstdchar::$20 = mode_hicolstdchar::$19/$400
Constant (const byte) mode_hicolecmchar::$2 = ((byte))mode_hicolecmchar::$1
Constant (const byte) mode_hicolecmchar::$5 = <mode_hicolecmchar::$4
Constant (const byte) mode_hicolecmchar::$8 = >mode_hicolecmchar::$7
Constant (const byte) mode_hicolecmchar::$11 = ((byte))mode_hicolecmchar::$10
Constant (const byte/word/dword) mode_hicolecmchar::$15 = mode_hicolecmchar::$14|3
Constant (const word/signed dword/dword) mode_hicolecmchar::$18 = mode_hicolecmchar::$17/$40
Constant (const word/signed dword/dword) mode_hicolecmchar::$21 = mode_hicolecmchar::$20/$400
Constant (const byte) mode_hicolmcchar::$2 = ((byte))mode_hicolmcchar::$1
Constant (const byte) mode_hicolmcchar::$5 = <mode_hicolmcchar::$4
Constant (const byte) mode_hicolmcchar::$8 = >mode_hicolmcchar::$7
Constant (const byte) mode_hicolmcchar::$11 = ((byte))mode_hicolmcchar::$10
Constant (const word/signed dword/dword) mode_hicolmcchar::$18 = mode_hicolmcchar::$17/$40
Constant (const word/signed dword/dword) mode_hicolmcchar::$21 = mode_hicolmcchar::$20/$400
Constant (const byte) mode_twoplanebitmap::$4 = mode_twoplanebitmap::$3|VIC_RSEL#0
Constant (const byte) mode_sixsfred::$4 = mode_sixsfred::$3|VIC_RSEL#0
Constant (const byte) mode_sixsfred2::$2 = mode_sixsfred2::$1|VIC_RSEL#0
Constant (const byte/word/dword) mode_8bpppixelcell::$6 = mode_8bpppixelcell::$5|3
Constant (const byte) dtv_control#51 = mode_8bppchunkybmm::$1|DTV_COLORRAM_OFF#0
Constant (const byte) mode_8bppchunkybmm::$5 = mode_8bppchunkybmm::$4|DTV_COLORRAM_OFF#0
Constant (const byte/word/dword) mode_8bppchunkybmm::$8 = mode_8bppchunkybmm::$7|3
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#0 = mode_8bppchunkybmm::gfxbCpuBank#0
Constant (const byte) mode_8bppchunkybmm::gfxbCpuBank#1 = ++mode_8bppchunkybmm::gfxbCpuBank#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $5 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"
Constant (const byte/word/dword) menu::$12 = 3^menu::$11
Constant (const word/dword) menu::$21 = menu::$17|menu::$20
Constant (const byte/word/dword) mode_stdchar::$12 = 3^mode_stdchar::$11
Constant (const word/dword) mode_stdchar::$21 = mode_stdchar::$17|mode_stdchar::$20
Constant (const byte/word/dword) mode_ecmchar::$12 = 3^mode_ecmchar::$11
Constant (const word/dword) mode_ecmchar::$22 = mode_ecmchar::$18|mode_ecmchar::$21
Constant (const byte/word/dword) mode_mcchar::$12 = 3^mode_mcchar::$11
Constant (const word/dword) mode_mcchar::$22 = mode_mcchar::$18|mode_mcchar::$21
Constant (const byte/word/dword) mode_stdbitmap::$6 = 3^mode_stdbitmap::$5
Constant (const word/dword) mode_stdbitmap::$16 = mode_stdbitmap::$12|mode_stdbitmap::$15
Constant (const byte/word/dword) mode_hicolstdchar::$12 = 3^mode_hicolstdchar::$11
Constant (const word/dword) mode_hicolstdchar::$21 = mode_hicolstdchar::$17|mode_hicolstdchar::$20
Constant (const byte/word/dword) mode_hicolecmchar::$12 = 3^mode_hicolecmchar::$11
Constant (const word/dword) mode_hicolecmchar::$22 = mode_hicolecmchar::$18|mode_hicolecmchar::$21
Constant (const byte/word/dword) mode_hicolmcchar::$12 = 3^mode_hicolmcchar::$11
Constant (const word/dword) mode_hicolmcchar::$22 = mode_hicolmcchar::$18|mode_hicolmcchar::$21
Constant (const byte/word/dword) mode_twoplanebitmap::$5 = mode_twoplanebitmap::$4|3
Constant (const byte/word/dword) mode_sixsfred::$5 = mode_sixsfred::$4|3
Constant (const byte/word/dword) mode_sixsfred2::$3 = mode_sixsfred2::$2|3
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $6 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"
Constant (const byte) menu::$22 = ((byte))menu::$21
Constant (const byte) mode_stdchar::$22 = ((byte))mode_stdchar::$21
Constant (const byte) mode_ecmchar::$23 = ((byte))mode_ecmchar::$22
Constant (const byte) mode_mcchar::$23 = ((byte))mode_mcchar::$22
Constant (const byte) mode_stdbitmap::$17 = ((byte))mode_stdbitmap::$16
Constant (const byte) mode_hicolstdchar::$22 = ((byte))mode_hicolstdchar::$21
Constant (const byte) mode_hicolecmchar::$23 = ((byte))mode_hicolecmchar::$22
Constant (const byte) mode_hicolmcchar::$23 = ((byte))mode_hicolmcchar::$22
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $7 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"+"4. Standard Bitmap           (V) 0000100@"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $8 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"+"4. Standard Bitmap           (V) 0000100@"+"5. Multicolor Bitmap         (V) 0000110@"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $9 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"+"4. Standard Bitmap           (V) 0000100@"+"5. Multicolor Bitmap         (V) 0000110@"+"6. High Color Standard Char  (H) 0001000@"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $10 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"+"4. Standard Bitmap           (V) 0000100@"+"5. Multicolor Bitmap         (V) 0000110@"+"6. High Color Standard Char  (H) 0001000@"+"7. High Extended Color Char  (H) 0001001@"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $11 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"+"4. Standard Bitmap           (V) 0000100@"+"5. Multicolor Bitmap         (V) 0000110@"+"6. High Color Standard Char  (H) 0001000@"+"7. High Extended Color Char  (H) 0001001@"+"8. High Multicolor Char      (H) 0001010@"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $12 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"+"4. Standard Bitmap           (V) 0000100@"+"5. Multicolor Bitmap         (V) 0000110@"+"6. High Color Standard Char  (H) 0001000@"+"7. High Extended Color Char  (H) 0001001@"+"8. High Multicolor Char      (H) 0001010@"+"9. High Multicolor Bitmap    (H) 0001110@"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $13 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"+"4. Standard Bitmap           (V) 0000100@"+"5. Multicolor Bitmap         (V) 0000110@"+"6. High Color Standard Char  (H) 0001000@"+"7. High Extended Color Char  (H) 0001001@"+"8. High Multicolor Char      (H) 0001010@"+"9. High Multicolor Bitmap    (H) 0001110@"+"a. Sixs Fred 2               (D) 0010111@"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $14 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"+"4. Standard Bitmap           (V) 0000100@"+"5. Multicolor Bitmap         (V) 0000110@"+"6. High Color Standard Char  (H) 0001000@"+"7. High Extended Color Char  (H) 0001001@"+"8. High Multicolor Char      (H) 0001010@"+"9. High Multicolor Bitmap    (H) 0001110@"+"a. Sixs Fred 2               (D) 0010111@"+"b. Two Plane Bitmap          (D) 0011101@"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $15 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"+"4. Standard Bitmap           (V) 0000100@"+"5. Multicolor Bitmap         (V) 0000110@"+"6. High Color Standard Char  (H) 0001000@"+"7. High Extended Color Char  (H) 0001001@"+"8. High Multicolor Char      (H) 0001010@"+"9. High Multicolor Bitmap    (H) 0001110@"+"a. Sixs Fred 2               (D) 0010111@"+"b. Two Plane Bitmap          (D) 0011101@"+"c. Sixs Fred (2 Plane MC BM) (D) 0011111@"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $16 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"+"4. Standard Bitmap           (V) 0000100@"+"5. Multicolor Bitmap         (V) 0000110@"+"6. High Color Standard Char  (H) 0001000@"+"7. High Extended Color Char  (H) 0001001@"+"8. High Multicolor Char      (H) 0001010@"+"9. High Multicolor Bitmap    (H) 0001110@"+"a. Sixs Fred 2               (D) 0010111@"+"b. Two Plane Bitmap          (D) 0011101@"+"c. Sixs Fred (2 Plane MC BM) (D) 0011111@"+"d. 8bpp Pixel Cell           (D) 0111011@"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $17 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"+"4. Standard Bitmap           (V) 0000100@"+"5. Multicolor Bitmap         (V) 0000110@"+"6. High Color Standard Char  (H) 0001000@"+"7. High Extended Color Char  (H) 0001001@"+"8. High Multicolor Char      (H) 0001010@"+"9. High Multicolor Bitmap    (H) 0001110@"+"a. Sixs Fred 2               (D) 0010111@"+"b. Two Plane Bitmap          (D) 0011101@"+"c. Sixs Fred (2 Plane MC BM) (D) 0011111@"+"d. 8bpp Pixel Cell           (D) 0111011@"+"e. Chunky 8bpp Bitmap        (D) 1111011@"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $18 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"+"4. Standard Bitmap           (V) 0000100@"+"5. Multicolor Bitmap         (V) 0000110@"+"6. High Color Standard Char  (H) 0001000@"+"7. High Extended Color Char  (H) 0001001@"+"8. High Multicolor Char      (H) 0001010@"+"9. High Multicolor Bitmap    (H) 0001110@"+"a. Sixs Fred 2               (D) 0010111@"+"b. Two Plane Bitmap          (D) 0011101@"+"c. Sixs Fred (2 Plane MC BM) (D) 0011111@"+"d. 8bpp Pixel Cell           (D) 0111011@"+"e. Chunky 8bpp Bitmap        (D) 1111011@"+"----------------------------------------@"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $19 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"+"4. Standard Bitmap           (V) 0000100@"+"5. Multicolor Bitmap         (V) 0000110@"+"6. High Color Standard Char  (H) 0001000@"+"7. High Extended Color Char  (H) 0001001@"+"8. High Multicolor Char      (H) 0001010@"+"9. High Multicolor Bitmap    (H) 0001110@"+"a. Sixs Fred 2               (D) 0010111@"+"b. Two Plane Bitmap          (D) 0011101@"+"c. Sixs Fred (2 Plane MC BM) (D) 0011111@"+"d. 8bpp Pixel Cell           (D) 0111011@"+"e. Chunky 8bpp Bitmap        (D) 1111011@"+"----------------------------------------@"+"    (V) vicII (H) vicII+hicol (D) c64dtv@"
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte[]) MENU_TEXT#0 = "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"+"4. Standard Bitmap           (V) 0000100@"+"5. Multicolor Bitmap         (V) 0000110@"+"6. High Color Standard Char  (H) 0001000@"+"7. High Extended Color Char  (H) 0001001@"+"8. High Multicolor Char      (H) 0001010@"+"9. High Multicolor Bitmap    (H) 0001110@"+"a. Sixs Fred 2               (D) 0010111@"+"b. Two Plane Bitmap          (D) 0011101@"+"c. Sixs Fred (2 Plane MC BM) (D) 0011111@"+"d. 8bpp Pixel Cell           (D) 0111011@"+"e. Chunky 8bpp Bitmap        (D) 1111011@"+"----------------------------------------@"+"    (V) vicII (H) vicII+hicol (D) c64dtv@"+"@"
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_str_lines::str#1 = MENU_TEXT#0
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in assignment *(mode_stdbitmap::lines_x#0+1 + mode_stdbitmap::$28)
Consolidated array index constant in assignment *(mode_stdbitmap::lines_y#0+1 + mode_stdbitmap::$29)
Successful SSA optimization Pass2ConstantAdditionElimination
if() condition always true - replacing block destination [207] if(true) goto main::@2
Removing PHI-reference to removed block (menu::@3) in block menu::@return
if() condition always true - replacing block destination [232] if(true) goto menu::@4
if() condition always true - replacing block destination [297] if(true) goto mode_ctrl::@2
Successful SSA optimization Pass2ConstantIfs
Successful SSA optimization Pass2ConstantStringConsolidation
Fixing inline constructor with bitmap_clear::$3 ← *(bitmap_plot_xhi#0 + 0) w= *(bitmap_plot_xlo#0 + 0)
Fixing inline constructor with bitmap_plot::$2 ← *(bitmap_plot_xhi#0 + bitmap_plot::x#4) w= *(bitmap_plot_xlo#0 + bitmap_plot::x#4)
Fixing inline constructor with bitmap_plot::$3 ← *(bitmap_plot_yhi#0 + bitmap_plot::y#4) w= *(bitmap_plot_ylo#0 + bitmap_plot::y#4)
Successful SSA optimization Pass2FixInlineConstructors
Inferred type updated to byte in [483] (byte/signed word/word/dword/signed dword~) mode_stdbitmap::$28 ← (byte) mode_stdbitmap::l#2
Inferred type updated to byte in [484] (byte/signed word/word/dword/signed dword~) mode_stdbitmap::$29 ← (byte) mode_stdbitmap::l#2
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization PassNEliminateUnusedVars
Eliminating Noop Cast (byte*) bitmap_clear::bitmap#0 ← ((byte*)) (word~) bitmap_clear::$3
Eliminating Noop Cast (byte*) bitmap_plot::plotter#0 ← ((byte*)) (word~) bitmap_plot::$0
Successful SSA optimization Pass2NopCastElimination
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolved ranged next value bitmap_init::x#1 ← ++ bitmap_init::x#2 to ++
Resolved ranged comparison value if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1 to (byte/signed byte/word/signed word/dword/signed dword) 0
Resolved ranged next value bitmap_init::y#1 ← ++ bitmap_init::y#2 to ++
Resolved ranged comparison value if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@3 to (byte/signed byte/word/signed word/dword/signed dword) 0
Resolved ranged next value bitmap_clear::x#1 ← ++ bitmap_clear::x#2 to ++
Resolved ranged comparison value if(bitmap_clear::x#1!=rangelast(0,$c7)) goto bitmap_clear::@2 to (byte/word/signed word/dword/signed dword) $c8
Resolved ranged next value bitmap_clear::y#1 ← ++ bitmap_clear::y#4 to ++
Resolved ranged comparison value if(bitmap_clear::y#1!=rangelast(0,$27)) goto bitmap_clear::@1 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value menu::i#1 ← ++ menu::i#2 to ++
Resolved ranged comparison value if(menu::i#1!=rangelast(0,$f)) goto menu::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value mode_stdchar::i#1 ← ++ mode_stdchar::i#2 to ++
Resolved ranged comparison value if(mode_stdchar::i#1!=rangelast(0,$f)) goto mode_stdchar::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value mode_stdchar::cx#1 ← ++ mode_stdchar::cx#2 to ++
Resolved ranged comparison value if(mode_stdchar::cx#1!=rangelast(0,$27)) goto mode_stdchar::@3 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value mode_stdchar::cy#1 ← ++ mode_stdchar::cy#4 to ++
Resolved ranged comparison value if(mode_stdchar::cy#1!=rangelast(0,$18)) goto mode_stdchar::@2 to (byte/signed byte/word/signed word/dword/signed dword) $19
Resolved ranged next value mode_ecmchar::i#1 ← ++ mode_ecmchar::i#2 to ++
Resolved ranged comparison value if(mode_ecmchar::i#1!=rangelast(0,$f)) goto mode_ecmchar::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value mode_ecmchar::cx#1 ← ++ mode_ecmchar::cx#2 to ++
Resolved ranged comparison value if(mode_ecmchar::cx#1!=rangelast(0,$27)) goto mode_ecmchar::@3 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value mode_ecmchar::cy#1 ← ++ mode_ecmchar::cy#4 to ++
Resolved ranged comparison value if(mode_ecmchar::cy#1!=rangelast(0,$18)) goto mode_ecmchar::@2 to (byte/signed byte/word/signed word/dword/signed dword) $19
Resolved ranged next value mode_mcchar::i#1 ← ++ mode_mcchar::i#2 to ++
Resolved ranged comparison value if(mode_mcchar::i#1!=rangelast(0,$f)) goto mode_mcchar::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value mode_mcchar::cx#1 ← ++ mode_mcchar::cx#2 to ++
Resolved ranged comparison value if(mode_mcchar::cx#1!=rangelast(0,$27)) goto mode_mcchar::@3 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value mode_mcchar::cy#1 ← ++ mode_mcchar::cy#4 to ++
Resolved ranged comparison value if(mode_mcchar::cy#1!=rangelast(0,$18)) goto mode_mcchar::@2 to (byte/signed byte/word/signed word/dword/signed dword) $19
Resolved ranged next value mode_stdbitmap::i#1 ← ++ mode_stdbitmap::i#2 to ++
Resolved ranged comparison value if(mode_stdbitmap::i#1!=rangelast(0,$f)) goto mode_stdbitmap::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value mode_stdbitmap::cx#1 ← ++ mode_stdbitmap::cx#2 to ++
Resolved ranged comparison value if(mode_stdbitmap::cx#1!=rangelast(0,$27)) goto mode_stdbitmap::@3 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value mode_stdbitmap::cy#1 ← ++ mode_stdbitmap::cy#4 to ++
Resolved ranged comparison value if(mode_stdbitmap::cy#1!=rangelast(0,$18)) goto mode_stdbitmap::@2 to (byte/signed byte/word/signed word/dword/signed dword) $19
Resolved ranged next value mode_hicolstdchar::i#1 ← ++ mode_hicolstdchar::i#2 to ++
Resolved ranged comparison value if(mode_hicolstdchar::i#1!=rangelast(0,$f)) goto mode_hicolstdchar::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value mode_hicolstdchar::cx#1 ← ++ mode_hicolstdchar::cx#2 to ++
Resolved ranged comparison value if(mode_hicolstdchar::cx#1!=rangelast(0,$27)) goto mode_hicolstdchar::@3 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value mode_hicolstdchar::cy#1 ← ++ mode_hicolstdchar::cy#4 to ++
Resolved ranged comparison value if(mode_hicolstdchar::cy#1!=rangelast(0,$18)) goto mode_hicolstdchar::@2 to (byte/signed byte/word/signed word/dword/signed dword) $19
Resolved ranged next value mode_hicolecmchar::i#1 ← ++ mode_hicolecmchar::i#2 to ++
Resolved ranged comparison value if(mode_hicolecmchar::i#1!=rangelast(0,$f)) goto mode_hicolecmchar::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value mode_hicolecmchar::cx#1 ← ++ mode_hicolecmchar::cx#2 to ++
Resolved ranged comparison value if(mode_hicolecmchar::cx#1!=rangelast(0,$27)) goto mode_hicolecmchar::@3 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value mode_hicolecmchar::cy#1 ← ++ mode_hicolecmchar::cy#4 to ++
Resolved ranged comparison value if(mode_hicolecmchar::cy#1!=rangelast(0,$18)) goto mode_hicolecmchar::@2 to (byte/signed byte/word/signed word/dword/signed dword) $19
Resolved ranged next value mode_hicolmcchar::i#1 ← ++ mode_hicolmcchar::i#2 to ++
Resolved ranged comparison value if(mode_hicolmcchar::i#1!=rangelast(0,$f)) goto mode_hicolmcchar::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value mode_hicolmcchar::cx#1 ← ++ mode_hicolmcchar::cx#2 to ++
Resolved ranged comparison value if(mode_hicolmcchar::cx#1!=rangelast(0,$27)) goto mode_hicolmcchar::@3 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value mode_hicolmcchar::cy#1 ← ++ mode_hicolmcchar::cy#4 to ++
Resolved ranged comparison value if(mode_hicolmcchar::cy#1!=rangelast(0,$18)) goto mode_hicolmcchar::@2 to (byte/signed byte/word/signed word/dword/signed dword) $19
Resolved ranged next value mode_twoplanebitmap::i#1 ← ++ mode_twoplanebitmap::i#2 to ++
Resolved ranged comparison value if(mode_twoplanebitmap::i#1!=rangelast(0,$f)) goto mode_twoplanebitmap::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value mode_twoplanebitmap::cx#1 ← ++ mode_twoplanebitmap::cx#2 to ++
Resolved ranged comparison value if(mode_twoplanebitmap::cx#1!=rangelast(0,$27)) goto mode_twoplanebitmap::@3 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value mode_twoplanebitmap::cy#1 ← ++ mode_twoplanebitmap::cy#4 to ++
Resolved ranged comparison value if(mode_twoplanebitmap::cy#1!=rangelast(0,$18)) goto mode_twoplanebitmap::@2 to (byte/signed byte/word/signed word/dword/signed dword) $19
Resolved ranged next value mode_twoplanebitmap::ax#1 ← ++ mode_twoplanebitmap::ax#2 to ++
Resolved ranged comparison value if(mode_twoplanebitmap::ax#1!=rangelast(0,$27)) goto mode_twoplanebitmap::@5 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value mode_twoplanebitmap::ay#1 ← ++ mode_twoplanebitmap::ay#4 to ++
Resolved ranged comparison value if(mode_twoplanebitmap::ay#1!=rangelast(0,$c7)) goto mode_twoplanebitmap::@4 to (byte/word/signed word/dword/signed dword) $c8
Resolved ranged next value mode_twoplanebitmap::bx#1 ← ++ mode_twoplanebitmap::bx#2 to ++
Resolved ranged comparison value if(mode_twoplanebitmap::bx#1!=rangelast(0,$27)) goto mode_twoplanebitmap::@9 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value mode_twoplanebitmap::by#1 ← ++ mode_twoplanebitmap::by#4 to ++
Resolved ranged comparison value if(mode_twoplanebitmap::by#1!=rangelast(0,$c7)) goto mode_twoplanebitmap::@8 to (byte/word/signed word/dword/signed dword) $c8
Resolved ranged next value mode_sixsfred::i#1 ← ++ mode_sixsfred::i#2 to ++
Resolved ranged comparison value if(mode_sixsfred::i#1!=rangelast(0,$f)) goto mode_sixsfred::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value mode_sixsfred::cx#1 ← ++ mode_sixsfred::cx#2 to ++
Resolved ranged comparison value if(mode_sixsfred::cx#1!=rangelast(0,$27)) goto mode_sixsfred::@3 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value mode_sixsfred::cy#1 ← ++ mode_sixsfred::cy#4 to ++
Resolved ranged comparison value if(mode_sixsfred::cy#1!=rangelast(0,$18)) goto mode_sixsfred::@2 to (byte/signed byte/word/signed word/dword/signed dword) $19
Resolved ranged next value mode_sixsfred::ax#1 ← ++ mode_sixsfred::ax#2 to ++
Resolved ranged comparison value if(mode_sixsfred::ax#1!=rangelast(0,$27)) goto mode_sixsfred::@5 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value mode_sixsfred::ay#1 ← ++ mode_sixsfred::ay#4 to ++
Resolved ranged comparison value if(mode_sixsfred::ay#1!=rangelast(0,$c7)) goto mode_sixsfred::@4 to (byte/word/signed word/dword/signed dword) $c8
Resolved ranged next value mode_sixsfred::bx#1 ← ++ mode_sixsfred::bx#2 to ++
Resolved ranged comparison value if(mode_sixsfred::bx#1!=rangelast(0,$27)) goto mode_sixsfred::@7 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value mode_sixsfred::by#1 ← ++ mode_sixsfred::by#4 to ++
Resolved ranged comparison value if(mode_sixsfred::by#1!=rangelast(0,$c7)) goto mode_sixsfred::@6 to (byte/word/signed word/dword/signed dword) $c8
Resolved ranged next value mode_sixsfred2::i#1 ← ++ mode_sixsfred2::i#2 to ++
Resolved ranged comparison value if(mode_sixsfred2::i#1!=rangelast(0,$f)) goto mode_sixsfred2::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value mode_sixsfred2::cx#1 ← ++ mode_sixsfred2::cx#2 to ++
Resolved ranged comparison value if(mode_sixsfred2::cx#1!=rangelast(0,$27)) goto mode_sixsfred2::@3 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value mode_sixsfred2::cy#1 ← ++ mode_sixsfred2::cy#4 to ++
Resolved ranged comparison value if(mode_sixsfred2::cy#1!=rangelast(0,$18)) goto mode_sixsfred2::@2 to (byte/signed byte/word/signed word/dword/signed dword) $19
Resolved ranged next value mode_sixsfred2::ax#1 ← ++ mode_sixsfred2::ax#2 to ++
Resolved ranged comparison value if(mode_sixsfred2::ax#1!=rangelast(0,$27)) goto mode_sixsfred2::@5 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value mode_sixsfred2::ay#1 ← ++ mode_sixsfred2::ay#4 to ++
Resolved ranged comparison value if(mode_sixsfred2::ay#1!=rangelast(0,$c7)) goto mode_sixsfred2::@4 to (byte/word/signed word/dword/signed dword) $c8
Resolved ranged next value mode_sixsfred2::bx#1 ← ++ mode_sixsfred2::bx#2 to ++
Resolved ranged comparison value if(mode_sixsfred2::bx#1!=rangelast(0,$27)) goto mode_sixsfred2::@7 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value mode_sixsfred2::by#1 ← ++ mode_sixsfred2::by#4 to ++
Resolved ranged comparison value if(mode_sixsfred2::by#1!=rangelast(0,$c7)) goto mode_sixsfred2::@6 to (byte/word/signed word/dword/signed dword) $c8
Resolved ranged next value mode_8bpppixelcell::i#1 ← ++ mode_8bpppixelcell::i#2 to ++
Resolved ranged comparison value if(mode_8bpppixelcell::i#1!=rangelast(0,$f)) goto mode_8bpppixelcell::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value mode_8bpppixelcell::ax#1 ← ++ mode_8bpppixelcell::ax#2 to ++
Resolved ranged comparison value if(mode_8bpppixelcell::ax#1!=rangelast(0,$27)) goto mode_8bpppixelcell::@3 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value mode_8bpppixelcell::ay#1 ← ++ mode_8bpppixelcell::ay#4 to ++
Resolved ranged comparison value if(mode_8bpppixelcell::ay#1!=rangelast(0,$18)) goto mode_8bpppixelcell::@2 to (byte/signed byte/word/signed word/dword/signed dword) $19
Resolved ranged next value mode_8bpppixelcell::cp#1 ← ++ mode_8bpppixelcell::cp#2 to ++
Resolved ranged comparison value if(mode_8bpppixelcell::cp#1!=rangelast(0,7)) goto mode_8bpppixelcell::@6 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value mode_8bpppixelcell::cr#1 ← ++ mode_8bpppixelcell::cr#6 to ++
Resolved ranged comparison value if(mode_8bpppixelcell::cr#1!=rangelast(0,7)) goto mode_8bpppixelcell::@5 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value mode_8bpppixelcell::ch#1 ← ++ mode_8bpppixelcell::ch#7 to ++
Resolved ranged comparison value if(mode_8bpppixelcell::ch#1!=rangelast(0,$ff)) goto mode_8bpppixelcell::@4 to (byte/signed byte/word/signed word/dword/signed dword) 0
Resolved ranged next value mode_8bppchunkybmm::i#1 ← ++ mode_8bppchunkybmm::i#2 to ++
Resolved ranged comparison value if(mode_8bppchunkybmm::i#1!=rangelast(0,$f)) goto mode_8bppchunkybmm::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value mode_8bppchunkybmm::x#1 ← ++ mode_8bppchunkybmm::x#2 to ++
Resolved ranged comparison value if(mode_8bppchunkybmm::x#1!=rangelast(0,$13f)) goto mode_8bppchunkybmm::@3 to (word/signed word/dword/signed dword) $140
Resolved ranged next value mode_8bppchunkybmm::y#1 ← ++ mode_8bppchunkybmm::y#6 to ++
Resolved ranged comparison value if(mode_8bppchunkybmm::y#1!=rangelast(0,$c7)) goto mode_8bppchunkybmm::@2 to (byte/word/signed word/dword/signed dword) $c8
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) print_str_lines::@2
Culled Empty Block (label) print_str_lines::@11
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) @17
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) @24
Culled Empty Block (label) @28
Culled Empty Block (label) @31
Culled Empty Block (label) bitmap_init::@6
Culled Empty Block (label) main::@7
Culled Empty Block (label) @40
Culled Empty Block (label) menu::@18
Culled Empty Block (label) menu::@49
Culled Empty Block (label) menu::@3
Culled Empty Block (label) menu::@52
Culled Empty Block (label) menu::@54
Culled Empty Block (label) menu::@56
Culled Empty Block (label) menu::@58
Culled Empty Block (label) menu::@60
Culled Empty Block (label) menu::@62
Culled Empty Block (label) menu::@64
Culled Empty Block (label) menu::@66
Culled Empty Block (label) menu::@68
Culled Empty Block (label) menu::@70
Culled Empty Block (label) menu::@72
Culled Empty Block (label) menu::@17
Culled Empty Block (label) menu::@73
Culled Empty Block (label) @41
Culled Empty Block (label) mode_ctrl::@2
Culled Empty Block (label) mode_ctrl::@5
Culled Empty Block (label) mode_ctrl::@15
Culled Empty Block (label) mode_stdchar::@7
Culled Empty Block (label) mode_ecmchar::@7
Culled Empty Block (label) mode_mcchar::@7
Culled Empty Block (label) mode_stdbitmap::@10
Culled Empty Block (label) mode_stdbitmap::@12
Culled Empty Block (label) mode_hicolstdchar::@7
Culled Empty Block (label) mode_hicolecmchar::@7
Culled Empty Block (label) mode_hicolmcchar::@7
Culled Empty Block (label) mode_twoplanebitmap::@12
Culled Empty Block (label) mode_twoplanebitmap::@16
Culled Empty Block (label) mode_twoplanebitmap::@19
Culled Empty Block (label) mode_sixsfred::@10
Culled Empty Block (label) mode_sixsfred::@12
Culled Empty Block (label) mode_sixsfred::@15
Culled Empty Block (label) mode_sixsfred2::@10
Culled Empty Block (label) mode_sixsfred2::@12
Culled Empty Block (label) mode_sixsfred2::@15
Culled Empty Block (label) mode_8bpppixelcell::@8
Culled Empty Block (label) mode_8bpppixelcell::@15
Culled Empty Block (label) mode_8bppchunkybmm::@9
Culled Empty Block (label) mode_8bppchunkybmm::@12
Culled Empty Block (label) @55
Successful SSA optimization Pass2CullEmptyBlocks
Alias (word) bitmap_plot::plotter_x#0 = (word~) bitmap_plot::$2 
Alias (word) bitmap_plot::plotter_y#0 = (word~) bitmap_plot::$3 
Alias (byte) mode_stdbitmap::l#2 = (byte~) mode_stdbitmap::$28 (byte~) mode_stdbitmap::$29 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte) dtv_control#114
Self Phi Eliminated (byte) dtv_control#193
Self Phi Eliminated (byte) dtv_control#194
Self Phi Eliminated (byte) dtv_control#195
Self Phi Eliminated (byte) dtv_control#258
Self Phi Eliminated (byte) dtv_control#197
Self Phi Eliminated (byte) dtv_control#198
Self Phi Eliminated (byte) dtv_control#199
Self Phi Eliminated (byte) dtv_control#288
Self Phi Eliminated (byte) dtv_control#266
Self Phi Eliminated (byte) dtv_control#200
Self Phi Eliminated (byte) dtv_control#279
Self Phi Eliminated (byte) dtv_control#251
Self Phi Eliminated (byte) dtv_control#201
Self Phi Eliminated (byte) dtv_control#280
Self Phi Eliminated (byte) dtv_control#252
Self Phi Eliminated (byte) dtv_control#202
Self Phi Eliminated (byte) dtv_control#276
Self Phi Eliminated (byte) mode_8bpppixelcell::ch#7
Self Phi Eliminated (byte) dtv_control#234
Self Phi Eliminated (byte) dtv_control#235
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) dtv_control#193 (const byte) dtv_control#18
Redundant Phi (byte) dtv_control#194 (const byte) dtv_control#21
Redundant Phi (byte) dtv_control#195 (const byte) dtv_control#24
Redundant Phi (byte) dtv_control#258 (const byte) dtv_control#27
Redundant Phi (byte) dtv_control#197 (const byte) dtv_control#30
Redundant Phi (byte) dtv_control#198 (const byte) dtv_control#33
Redundant Phi (byte) dtv_control#199 (const byte) dtv_control#36
Redundant Phi (byte) dtv_control#288 (const byte) dtv_control#39
Redundant Phi (byte) dtv_control#266 (byte) dtv_control#288
Redundant Phi (byte) dtv_control#200 (byte) dtv_control#266
Redundant Phi (byte) dtv_control#279 (const byte) dtv_control#42
Redundant Phi (byte) dtv_control#251 (byte) dtv_control#279
Redundant Phi (byte) dtv_control#201 (byte) dtv_control#251
Redundant Phi (byte) dtv_control#280 (const byte) dtv_control#45
Redundant Phi (byte) dtv_control#252 (byte) dtv_control#280
Redundant Phi (byte) dtv_control#202 (byte) dtv_control#252
Redundant Phi (byte) dtv_control#276 (const byte) dtv_control#48
Redundant Phi (byte) mode_8bpppixelcell::ch#7 (byte) mode_8bpppixelcell::ch#8
Redundant Phi (byte) dtv_control#234 (byte) dtv_control#244
Redundant Phi (byte) dtv_control#235 (const byte) dtv_control#51
Successful SSA optimization Pass2RedundantPhiElimination
Consolidated array index constant in *(bitmap_plot_xhi#0+0)
Consolidated array index constant in *(bitmap_plot_xlo#0+0)
Successful SSA optimization Pass2ConstantAdditionElimination
Culled Empty Block (label) main::@1
Successful SSA optimization Pass2CullEmptyBlocks
Self Phi Eliminated (byte) dtv_control#244
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) dtv_control#244 (const byte) dtv_control#48
Successful SSA optimization Pass2RedundantPhiElimination
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#2
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#0
Inlining constant with var siblings (const byte*) print_str_lines::str#1
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#0
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#1
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#2
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#3
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#4
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#5
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#6
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#7
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#8
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#9
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#10
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#11
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#12
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#13
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#14
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#15
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#16
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#17
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#18
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#19
Inlining constant with var siblings (const byte) bitmap_init::bits#0
Inlining constant with var siblings (const byte) bitmap_init::x#0
Inlining constant with var siblings (const byte) bitmap_init::bits#2
Inlining constant with var siblings (const byte*) bitmap_init::yoffs#0
Inlining constant with var siblings (const byte) bitmap_init::y#0
Inlining constant with var siblings (const byte) bitmap_clear::y#0
Inlining constant with var siblings (const byte) bitmap_clear::x#0
Inlining constant with var siblings (const byte) menu::i#0
Inlining constant with var siblings (const byte*) menu::c#0
Inlining constant with var siblings (const byte) mode_ctrl::ctrl#7
Inlining constant with var siblings (const byte) mode_stdchar::i#0
Inlining constant with var siblings (const byte) mode_stdchar::cy#0
Inlining constant with var siblings (const byte) mode_stdchar::cx#0
Inlining constant with var siblings (const byte) mode_ecmchar::i#0
Inlining constant with var siblings (const byte) mode_ecmchar::cy#0
Inlining constant with var siblings (const byte) mode_ecmchar::cx#0
Inlining constant with var siblings (const byte) mode_mcchar::i#0
Inlining constant with var siblings (const byte) mode_mcchar::cy#0
Inlining constant with var siblings (const byte) mode_mcchar::cx#0
Inlining constant with var siblings (const byte) mode_stdbitmap::i#0
Inlining constant with var siblings (const byte) mode_stdbitmap::cy#0
Inlining constant with var siblings (const byte) mode_stdbitmap::cx#0
Inlining constant with var siblings (const byte) mode_stdbitmap::l#0
Inlining constant with var siblings (const byte) mode_hicolstdchar::i#0
Inlining constant with var siblings (const byte) mode_hicolstdchar::cy#0
Inlining constant with var siblings (const byte) mode_hicolstdchar::cx#0
Inlining constant with var siblings (const byte) mode_hicolecmchar::i#0
Inlining constant with var siblings (const byte) mode_hicolecmchar::cy#0
Inlining constant with var siblings (const byte) mode_hicolecmchar::cx#0
Inlining constant with var siblings (const byte) mode_hicolmcchar::i#0
Inlining constant with var siblings (const byte) mode_hicolmcchar::cy#0
Inlining constant with var siblings (const byte) mode_hicolmcchar::cx#0
Inlining constant with var siblings (const byte) mode_twoplanebitmap::i#0
Inlining constant with var siblings (const byte) mode_twoplanebitmap::cy#0
Inlining constant with var siblings (const byte) mode_twoplanebitmap::cx#0
Inlining constant with var siblings (const byte) mode_twoplanebitmap::ay#0
Inlining constant with var siblings (const byte) mode_twoplanebitmap::ax#0
Inlining constant with var siblings (const byte) mode_twoplanebitmap::by#0
Inlining constant with var siblings (const byte) mode_twoplanebitmap::bx#0
Inlining constant with var siblings (const byte) mode_sixsfred::i#0
Inlining constant with var siblings (const byte) mode_sixsfred::cy#0
Inlining constant with var siblings (const byte) mode_sixsfred::cx#0
Inlining constant with var siblings (const byte) mode_sixsfred::ay#0
Inlining constant with var siblings (const byte) mode_sixsfred::ax#0
Inlining constant with var siblings (const byte) mode_sixsfred::by#0
Inlining constant with var siblings (const byte) mode_sixsfred::bx#0
Inlining constant with var siblings (const byte) mode_sixsfred2::i#0
Inlining constant with var siblings (const byte) mode_sixsfred2::cy#0
Inlining constant with var siblings (const byte) mode_sixsfred2::cx#0
Inlining constant with var siblings (const byte) mode_sixsfred2::ay#0
Inlining constant with var siblings (const byte) mode_sixsfred2::ax#0
Inlining constant with var siblings (const byte) mode_sixsfred2::by#0
Inlining constant with var siblings (const byte) mode_sixsfred2::bx#0
Inlining constant with var siblings (const byte) mode_8bpppixelcell::i#0
Inlining constant with var siblings (const byte) mode_8bpppixelcell::ay#0
Inlining constant with var siblings (const byte) mode_8bpppixelcell::ax#0
Inlining constant with var siblings (const byte*) mode_8bpppixelcell::chargen#0
Inlining constant with var siblings (const byte) mode_8bpppixelcell::col#0
Inlining constant with var siblings (const byte) mode_8bpppixelcell::ch#0
Inlining constant with var siblings (const byte) mode_8bpppixelcell::cr#0
Inlining constant with var siblings (const byte) mode_8bpppixelcell::cp#0
Inlining constant with var siblings (const byte) mode_8bpppixelcell::c#0
Inlining constant with var siblings (const byte) mode_8bppchunkybmm::i#0
Inlining constant with var siblings (const byte*) mode_8bppchunkybmm::gfxb#0
Inlining constant with var siblings (const byte) mode_8bppchunkybmm::y#0
Inlining constant with var siblings (const word) mode_8bppchunkybmm::x#0
Inlining constant with var siblings (const byte*) mode_8bppchunkybmm::gfxb#2
Inlining constant with var siblings (const byte) mode_8bppchunkybmm::gfxbCpuBank#0
Inlining constant with var siblings (const byte) mode_8bppchunkybmm::gfxbCpuBank#1
Inlining constant with var siblings (const byte) dtv_control#18
Inlining constant with var siblings (const byte) dtv_control#21
Inlining constant with var siblings (const byte) dtv_control#24
Inlining constant with var siblings (const byte) dtv_control#27
Inlining constant with var siblings (const byte) dtv_control#30
Inlining constant with var siblings (const byte) dtv_control#33
Inlining constant with var siblings (const byte) dtv_control#36
Inlining constant with var siblings (const byte) dtv_control#39
Inlining constant with var siblings (const byte) dtv_control#42
Inlining constant with var siblings (const byte) dtv_control#45
Inlining constant with var siblings (const byte) dtv_control#48
Inlining constant with var siblings (const byte) dtv_control#51
Constant inlined mode_hicolecmchar::cx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined menu::c#0 = (const byte*) COLS#0
Constant inlined mode_hicolecmchar::$0 = ((dword))(const byte*) mode_hicolecmchar::CHARSET#0
Constant inlined mode_hicolecmchar::$1 = ((dword))(const byte*) mode_hicolecmchar::CHARSET#0/(dword/signed dword) $10000
Constant inlined mode_stdbitmap::$6 = (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_stdbitmap::BITMAP#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_hicolecmchar::$4 = ((word))(const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_stdbitmap::$7 = (const byte) VIC_BMM#0|(const byte) VIC_DEN#0
Constant inlined mode_hicolecmchar::$5 = <((word))(const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_stdbitmap::$8 = (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined mode_hicolecmchar::$2 = ((byte))((dword))(const byte*) mode_hicolecmchar::CHARSET#0/(dword/signed dword) $10000
Constant inlined mode_stdbitmap::$9 = (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined mode_hicolecmchar::$3 = (const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolecmchar::$8 = >((word))(const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolecmchar::$9 = ((word))(const byte*) mode_hicolecmchar::CHARSET#0
Constant inlined mode_hicolecmchar::$6 = (const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolecmchar::$7 = ((word))(const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_stdbitmap::$0 = ((dword))(const byte*) mode_stdbitmap::BITMAP#0
Constant inlined mode_stdbitmap::$1 = ((dword))(const byte*) mode_stdbitmap::BITMAP#0/(dword/signed dword) $10000
Constant inlined mode_stdbitmap::$2 = ((byte))((dword))(const byte*) mode_stdbitmap::BITMAP#0/(dword/signed dword) $10000
Constant inlined mode_stdbitmap::$3 = ((word))(const byte*) mode_stdbitmap::BITMAP#0
Constant inlined mode_stdbitmap::$4 = ((word))(const byte*) mode_stdbitmap::BITMAP#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_stdbitmap::$5 = ((byte))((word))(const byte*) mode_stdbitmap::BITMAP#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_mcchar::$6 = (const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_twoplanebitmap::$5 = (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined mode_mcchar::$7 = ((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_twoplanebitmap::$6 = <(const byte*) mode_twoplanebitmap::PLANEA#0
Constant inlined bitmap_init::yoffs#0 = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_mcchar::$4 = ((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_twoplanebitmap::$7 = >(const byte*) mode_twoplanebitmap::PLANEA#0
Constant inlined mode_mcchar::$5 = <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_twoplanebitmap::$8 = <(const byte*) mode_twoplanebitmap::PLANEB#0
Constant inlined mode_twoplanebitmap::$1 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0
Constant inlined mode_twoplanebitmap::$2 = (const byte) VIC_ECM#0|(const byte) VIC_BMM#0
Constant inlined mode_mcchar::$8 = >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_twoplanebitmap::$3 = (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0
Constant inlined mode_mcchar::$9 = ((word))(const byte*) mode_mcchar::CHARSET#0
Constant inlined mode_twoplanebitmap::$4 = (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined mode_mcchar::$2 = ((byte))((dword))(const byte*) mode_mcchar::CHARSET#0/(dword/signed dword) $10000
Constant inlined mode_mcchar::$3 = (const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_mcchar::$0 = ((dword))(const byte*) mode_mcchar::CHARSET#0
Constant inlined mode_mcchar::$1 = ((dword))(const byte*) mode_mcchar::CHARSET#0/(dword/signed dword) $10000
Constant inlined mode_hicolmcchar::$8 = >((word))(const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolmcchar::$7 = ((word))(const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_8bpppixelcell::chargen#0 = ((byte*))(word/dword/signed dword) $d000
Constant inlined mode_hicolmcchar::$6 = (const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolmcchar::$5 = <((word))(const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolmcchar::$9 = ((word))(const byte*) mode_hicolmcchar::CHARSET#0
Constant inlined mode_twoplanebitmap::$9 = >(const byte*) mode_twoplanebitmap::PLANEB#0
Constant inlined mode_hicolecmchar::$15 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(const byte) VIC_ECM#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined mode_hicolecmchar::$16 = ((word))(const byte*) mode_hicolecmchar::SCREEN#0
Constant inlined menu::$9 = ((word))(const byte*) menu::CHARSET#0
Constant inlined mode_hicolecmchar::$13 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined mode_8bpppixelcell::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_hicolecmchar::$14 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(const byte) VIC_ECM#0
Constant inlined menu::$7 = ((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolecmchar::$11 = ((byte))((word))(const byte*) mode_hicolecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined menu::$8 = >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolecmchar::$12 = (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined menu::$5 = <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined menu::$6 = (const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolecmchar::$10 = ((word))(const byte*) mode_hicolecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_mcchar::$15 = (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0
Constant inlined mode_hicolmcchar::$0 = ((dword))(const byte*) mode_hicolmcchar::CHARSET#0
Constant inlined mode_mcchar::$16 = ((word))(const byte*) mode_mcchar::SCREEN#0
Constant inlined mode_mcchar::$17 = ((word))(const byte*) mode_mcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff
Constant inlined mode_mcchar::$18 = ((word))(const byte*) mode_mcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40
Constant inlined mode_mcchar::$19 = ((word))(const byte*) mode_mcchar::CHARSET#0
Constant inlined mode_hicolecmchar::$19 = ((word))(const byte*) mode_hicolecmchar::CHARSET#0
Constant inlined mode_hicolmcchar::$4 = ((word))(const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolmcchar::$3 = (const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolecmchar::$17 = ((word))(const byte*) mode_hicolecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff
Constant inlined mode_hicolmcchar::$2 = ((byte))((dword))(const byte*) mode_hicolmcchar::CHARSET#0/(dword/signed dword) $10000
Constant inlined mode_hicolecmchar::$18 = ((word))(const byte*) mode_hicolecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40
Constant inlined mode_hicolmcchar::$1 = ((dword))(const byte*) mode_hicolmcchar::CHARSET#0/(dword/signed dword) $10000
Constant inlined mode_mcchar::$20 = ((word))(const byte*) mode_mcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff
Constant inlined mode_mcchar::$21 = ((word))(const byte*) mode_mcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_mcchar::$22 = ((word))(const byte*) mode_mcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_mcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolstdchar::$6 = (const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_mcchar::$23 = ((byte))((word))(const byte*) mode_mcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_mcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolstdchar::$7 = ((word))(const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolstdchar::$8 = >((word))(const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolstdchar::$9 = ((word))(const byte*) mode_hicolstdchar::CHARSET#0
Constant inlined menu::$3 = (const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolstdchar::$2 = ((byte))((dword))(const byte*) mode_hicolstdchar::CHARSET#0/(dword/signed dword) $10000
Constant inlined menu::$4 = ((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolstdchar::$3 = (const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined menu::$1 = ((dword))(const byte*) menu::CHARSET#0/(dword/signed dword) $10000
Constant inlined mode_hicolstdchar::$4 = ((word))(const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined menu::$2 = ((byte))((dword))(const byte*) menu::CHARSET#0/(dword/signed dword) $10000
Constant inlined mode_hicolstdchar::$5 = <((word))(const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined menu::$0 = ((dword))(const byte*) menu::CHARSET#0
Constant inlined mode_hicolstdchar::$0 = ((dword))(const byte*) mode_hicolstdchar::CHARSET#0
Constant inlined mode_hicolstdchar::$1 = ((dword))(const byte*) mode_hicolstdchar::CHARSET#0/(dword/signed dword) $10000
Constant inlined mode_stdbitmap::l#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_hicolecmchar::$22 = ((word))(const byte*) mode_hicolecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolecmchar::$23 = ((byte))((word))(const byte*) mode_hicolecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolecmchar::$20 = ((word))(const byte*) mode_hicolecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff
Constant inlined mode_hicolecmchar::$21 = ((word))(const byte*) mode_hicolecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_stdchar::$1 = ((dword))(const byte*) mode_stdchar::CHARSET#0/(dword/signed dword) $10000
Constant inlined mode_stdchar::$2 = ((byte))((dword))(const byte*) mode_stdchar::CHARSET#0/(dword/signed dword) $10000
Constant inlined mode_stdchar::$0 = ((dword))(const byte*) mode_stdchar::CHARSET#0
Constant inlined mode_stdchar::$5 = <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined print_cls::sc#0 = (const byte*) menu::SCREEN#0
Constant inlined mode_stdchar::$6 = (const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_stdchar::$3 = (const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_stdchar::$4 = ((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_stdchar::$9 = ((word))(const byte*) mode_stdchar::CHARSET#0
Constant inlined mode_stdchar::$7 = ((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_stdchar::$8 = >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_twoplanebitmap::$13 = >(const byte*) mode_twoplanebitmap::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_twoplanebitmap::$12 = (const byte*) mode_twoplanebitmap::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_twoplanebitmap::$11 = <(const byte*) mode_twoplanebitmap::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_twoplanebitmap::$10 = (const byte*) mode_twoplanebitmap::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined bitmap_init::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_sixsfred2::cx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_screen#1 = (const byte*) menu::SCREEN#0
Constant inlined mode_twoplanebitmap::bx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_sixsfred2::bx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_sixsfred::ax#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_sixsfred2::cy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_twoplanebitmap::cy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bitmap_init::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_8bppchunkybmm::gfxb#2 = ((byte*))(word/signed word/dword/signed dword) $4000
Constant inlined mode_hicolmcchar::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_8bppchunkybmm::gfxbCpuBank#1 = ++((byte))(const dword) mode_8bppchunkybmm::PLANEB#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_8bppchunkybmm::gfxb#0 = ((byte*))(word/signed word/dword/signed dword) $4000
Constant inlined mode_8bppchunkybmm::gfxbCpuBank#0 = ((byte))(const dword) mode_8bppchunkybmm::PLANEB#0/(word/signed word/dword/signed dword) $4000
Constant inlined menu::$16 = ((word))(const byte*) menu::SCREEN#0&(word/signed word/dword/signed dword) $3fff
Constant inlined menu::$17 = ((word))(const byte*) menu::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40
Constant inlined menu::$14 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined menu::$15 = ((word))(const byte*) menu::SCREEN#0
Constant inlined menu::$18 = ((word))(const byte*) menu::CHARSET#0
Constant inlined mode_8bpppixelcell::ch#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined menu::$19 = ((word))(const byte*) menu::CHARSET#0&(word/signed word/dword/signed dword) $3fff
Constant inlined mode_8bpppixelcell::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_hicolstdchar::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bitmap_init::$13 = (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8
Constant inlined mode_sixsfred2::by#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined menu::$12 = (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) menu::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined menu::$13 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined menu::$10 = ((word))(const byte*) menu::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_8bpppixelcell::cp#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined menu::$11 = ((byte))((word))(const byte*) menu::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_sixsfred::ay#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_ctrl::ctrl#7 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_stdbitmap::$16 = ((word))(const byte*) mode_stdbitmap::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_stdbitmap::BITMAP#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_8bpppixelcell::$4 = (const byte) VIC_ECM#0|(const byte) VIC_DEN#0
Constant inlined mode_8bpppixelcell::col#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_stdbitmap::$15 = ((word))(const byte*) mode_stdbitmap::BITMAP#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_8bpppixelcell::$5 = (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined mode_stdbitmap::$14 = ((word))(const byte*) mode_stdbitmap::BITMAP#0&(word/signed word/dword/signed dword) $3fff
Constant inlined mode_8bpppixelcell::$2 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0
Constant inlined mode_stdbitmap::$13 = ((word))(const byte*) mode_stdbitmap::BITMAP#0
Constant inlined mode_8bpppixelcell::$3 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0
Constant inlined mode_8bpppixelcell::$8 = <(const byte*) mode_8bpppixelcell::PLANEA#0
Constant inlined mode_8bpppixelcell::$9 = >(const byte*) mode_8bpppixelcell::PLANEA#0
Constant inlined mode_8bpppixelcell::$6 = (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined mode_stdbitmap::$17 = ((byte))((word))(const byte*) mode_stdbitmap::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_stdbitmap::BITMAP#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_8bpppixelcell::$7 = (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0
Constant inlined mode_sixsfred::$10 = >(const byte*) mode_sixsfred::PLANEB#0
Constant inlined mode_stdbitmap::$12 = ((word))(const byte*) mode_stdbitmap::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40
Constant inlined mode_sixsfred::$11 = (const byte*) mode_sixsfred::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_8bpppixelcell::$0 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0
Constant inlined mode_stdbitmap::$11 = ((word))(const byte*) mode_stdbitmap::SCREEN#0&(word/signed word/dword/signed dword) $3fff
Constant inlined mode_sixsfred::$12 = <(const byte*) mode_sixsfred::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_stdbitmap::$10 = ((word))(const byte*) mode_stdbitmap::SCREEN#0
Constant inlined mode_sixsfred::$13 = (const byte*) mode_sixsfred::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_sixsfred::$14 = >(const byte*) mode_sixsfred::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined menu::$20 = ((word))(const byte*) menu::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_twoplanebitmap::cx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined menu::$24 = (const byte*) COLS#0+(word/signed word/dword/signed dword) $3e8
Constant inlined menu::$21 = ((word))(const byte*) menu::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) menu::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined menu::$22 = ((byte))((word))(const byte*) menu::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) menu::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_8bppchunkybmm::$11 = <<(const dword) mode_8bppchunkybmm::PLANEB#0
Constant inlined mode_8bppchunkybmm::$12 = <(const dword) mode_8bppchunkybmm::PLANEB#0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#0 = ((byte))(const dword) mode_8bppchunkybmm::PLANEB#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_8bppchunkybmm::$13 = ><(const dword) mode_8bppchunkybmm::PLANEB#0
Constant inlined mode_8bppchunkybmm::$14 = >(const dword) mode_8bppchunkybmm::PLANEB#0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#2 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000
Constant inlined mode_twoplanebitmap::ay#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_8bppchunkybmm::$10 = <(const dword) mode_8bppchunkybmm::PLANEB#0
Constant inlined mode_mcchar::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_sixsfred::bx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_mcchar::cx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_8bppchunkybmm::$15 = <>(const dword) mode_8bppchunkybmm::PLANEB#0
Constant inlined mode_8bppchunkybmm::$17 = (const dword) mode_8bppchunkybmm::PLANEB#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_8bppchunkybmm::$3 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0
Constant inlined mode_8bppchunkybmm::$0 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0
Constant inlined mode_8bppchunkybmm::$1 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0
Constant inlined mode_hicolecmchar::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_ecmchar::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_stdbitmap::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_stdbitmap::cx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined keyboard_key_pressed::key#0 = (const byte) KEY_1#0
Constant inlined keyboard_key_pressed::key#13 = (const byte) KEY_L#0
Constant inlined keyboard_key_pressed::key#1 = (const byte) KEY_2#0
Constant inlined keyboard_key_pressed::key#14 = (const byte) KEY_H#0
Constant inlined keyboard_key_pressed::key#15 = (const byte) KEY_O#0
Constant inlined keyboard_key_pressed::key#16 = (const byte) KEY_B#0
Constant inlined mode_hicolmcchar::cy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined keyboard_key_pressed::key#4 = (const byte) KEY_6#0
Constant inlined keyboard_key_pressed::key#17 = (const byte) KEY_U#0
Constant inlined keyboard_key_pressed::key#5 = (const byte) KEY_7#0
Constant inlined keyboard_key_pressed::key#18 = (const byte) KEY_C#0
Constant inlined keyboard_key_pressed::key#2 = (const byte) KEY_3#0
Constant inlined keyboard_key_pressed::key#19 = (const byte) KEY_0#0
Constant inlined keyboard_key_pressed::key#3 = (const byte) KEY_4#0
Constant inlined mode_sixsfred::cy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined keyboard_key_pressed::key#8 = (const byte) KEY_B#0
Constant inlined keyboard_key_pressed::key#9 = (const byte) KEY_C#0
Constant inlined mode_8bppchunkybmm::$8 = (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined keyboard_key_pressed::key#6 = (const byte) KEY_8#0
Constant inlined mode_8bppchunkybmm::$9 = (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0
Constant inlined keyboard_key_pressed::key#7 = (const byte) KEY_A#0
Constant inlined mode_8bppchunkybmm::$6 = (const byte) VIC_ECM#0|(const byte) VIC_DEN#0
Constant inlined mode_ecmchar::cx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_8bppchunkybmm::$7 = (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined mode_8bppchunkybmm::$4 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0
Constant inlined mode_8bppchunkybmm::$5 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_COLORRAM_OFF#0
Constant inlined print_str_lines::str#1 = (const byte[]) MENU_TEXT#0
Constant inlined mode_twoplanebitmap::ax#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_sixsfred2::ax#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined keyboard_key_pressed::key#10 = (const byte) KEY_D#0
Constant inlined keyboard_key_pressed::key#11 = (const byte) KEY_E#0
Constant inlined keyboard_key_pressed::key#12 = (const byte) KEY_SPACE#0
Constant inlined mode_stdchar::$12 = (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_stdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_sixsfred2::$2 = (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined mode_sixsfred::by#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_stdchar::$13 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined mode_sixsfred2::$3 = (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined mode_stdchar::$14 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined mode_sixsfred2::$4 = (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0
Constant inlined mode_stdchar::$15 = ((word))(const byte*) mode_stdchar::SCREEN#0
Constant inlined mode_sixsfred2::$5 = <(const byte*) mode_sixsfred2::PLANEA#0
Constant inlined print_cls::$0 = (const byte*) menu::SCREEN#0+(word/signed word/dword/signed dword) $3e8
Constant inlined mode_stdchar::$16 = ((word))(const byte*) mode_stdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff
Constant inlined mode_sixsfred2::$6 = >(const byte*) mode_sixsfred2::PLANEA#0
Constant inlined mode_stdchar::$17 = ((word))(const byte*) mode_stdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40
Constant inlined mode_sixsfred2::$7 = <(const byte*) mode_sixsfred2::PLANEB#0
Constant inlined mode_stdchar::$18 = ((word))(const byte*) mode_stdchar::CHARSET#0
Constant inlined mode_sixsfred2::$8 = >(const byte*) mode_sixsfred2::PLANEB#0
Constant inlined mode_stdchar::$19 = ((word))(const byte*) mode_stdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff
Constant inlined mode_sixsfred2::$9 = (const byte*) mode_sixsfred2::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_sixsfred2::$11 = (const byte*) mode_sixsfred2::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_sixsfred2::$12 = >(const byte*) mode_sixsfred2::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_mcchar::cy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_sixsfred2::$10 = <(const byte*) mode_sixsfred2::COLORS#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_stdchar::$10 = ((word))(const byte*) mode_stdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_sixsfred2::$0 = (const byte) VIC_ECM#0|(const byte) VIC_BMM#0
Constant inlined mode_stdchar::$11 = ((byte))((word))(const byte*) mode_stdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_sixsfred2::$1 = (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0
Constant inlined mode_twoplanebitmap::by#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_8bpppixelcell::cr#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_stdbitmap::cy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_ecmchar::cy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_8bpppixelcell::ax#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_hicolstdchar::$13 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined mode_hicolstdchar::$14 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined bitmap_clear::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_hicolstdchar::cy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_hicolstdchar::$15 = ((word))(const byte*) mode_hicolstdchar::SCREEN#0
Constant inlined mode_hicolstdchar::$16 = ((word))(const byte*) mode_hicolstdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff
Constant inlined mode_hicolstdchar::$17 = ((word))(const byte*) mode_hicolstdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40
Constant inlined mode_stdchar::$20 = ((word))(const byte*) mode_stdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolstdchar::$18 = ((word))(const byte*) mode_hicolstdchar::CHARSET#0
Constant inlined mode_8bppchunkybmm::$27 = (word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000
Constant inlined mode_stdchar::$21 = ((word))(const byte*) mode_stdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_stdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolstdchar::$19 = ((word))(const byte*) mode_hicolstdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff
Constant inlined mode_stdchar::$22 = ((byte))((word))(const byte*) mode_stdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_stdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolmcchar::$12 = (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolmcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_hicolstdchar::$10 = ((word))(const byte*) mode_hicolstdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_hicolmcchar::$13 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined mode_hicolstdchar::$11 = ((byte))((word))(const byte*) mode_hicolstdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_hicolmcchar::$10 = ((word))(const byte*) mode_hicolmcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_hicolstdchar::$12 = (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolstdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_hicolmcchar::$11 = ((byte))((word))(const byte*) mode_hicolmcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_hicolmcchar::$16 = ((word))(const byte*) mode_hicolmcchar::SCREEN#0
Constant inlined mode_hicolmcchar::$17 = ((word))(const byte*) mode_hicolmcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff
Constant inlined mode_hicolmcchar::$14 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined mode_hicolmcchar::$15 = (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0
Constant inlined mode_sixsfred2::ay#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_hicolmcchar::$18 = ((word))(const byte*) mode_hicolmcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40
Constant inlined mode_hicolmcchar::$19 = ((word))(const byte*) mode_hicolmcchar::CHARSET#0
Constant inlined dtv_control#33 = (const byte) DTV_HIGHCOLOR#0
Constant inlined dtv_control#30 = (const byte) DTV_HIGHCOLOR#0
Constant inlined menu::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_stdchar::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_hicolmcchar::$20 = ((word))(const byte*) mode_hicolmcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff
Constant inlined mode_hicolstdchar::$20 = ((word))(const byte*) mode_hicolstdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolmcchar::$23 = ((byte))((word))(const byte*) mode_hicolmcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolmcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_8bpppixelcell::$10 = <(const byte*) mode_8bpppixelcell::PLANEB#0
Constant inlined mode_hicolstdchar::$21 = ((word))(const byte*) mode_hicolstdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolstdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolstdchar::$22 = ((byte))((word))(const byte*) mode_hicolstdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolstdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolmcchar::$21 = ((word))(const byte*) mode_hicolmcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_hicolmcchar::$22 = ((word))(const byte*) mode_hicolmcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolmcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_8bpppixelcell::$11 = >(const byte*) mode_8bpppixelcell::PLANEB#0
Constant inlined dtv_control#27 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined dtv_control#24 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_sixsfred2::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined dtv_control#21 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_8bppchunkybmm::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_8bpppixelcell::ay#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_sixsfred::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bitmap_clear::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_hicolstdchar::cx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_mcchar::$10 = ((word))(const byte*) mode_mcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_8bppchunkybmm::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_mcchar::$11 = ((byte))((word))(const byte*) mode_mcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_mcchar::$12 = (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_mcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_mcchar::$13 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined mode_mcchar::$14 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined dtv_control#18 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bitmap_init::bitmap#0 = (const byte*) mode_stdbitmap::BITMAP#0
Constant inlined mode_hicolecmchar::cy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_sixsfred::$1 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0
Constant inlined dtv_control#51 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_COLORRAM_OFF#0
Constant inlined mode_sixsfred::$3 = (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0
Constant inlined mode_sixsfred::$2 = (const byte) VIC_ECM#0|(const byte) VIC_BMM#0
Constant inlined mode_sixsfred::$5 = (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined mode_sixsfred::$4 = (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined mode_sixsfred::$7 = <(const byte*) mode_sixsfred::PLANEA#0
Constant inlined mode_ecmchar::$23 = ((byte))((word))(const byte*) mode_ecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_ecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_sixsfred::$6 = (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0
Constant inlined bitmap_init::bits#0 = (byte/word/signed word/dword/signed dword) $80
Constant inlined mode_stdchar::cx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_ecmchar::$22 = ((word))(const byte*) mode_ecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_ecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_sixsfred::$9 = <(const byte*) mode_sixsfred::PLANEB#0
Constant inlined mode_ecmchar::$21 = ((word))(const byte*) mode_ecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined mode_sixsfred::$8 = >(const byte*) mode_sixsfred::PLANEA#0
Constant inlined bitmap_init::bits#2 = (byte/word/signed word/dword/signed dword) $80
Constant inlined mode_ecmchar::$20 = ((word))(const byte*) mode_ecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff
Constant inlined mode_ecmchar::$2 = ((byte))((dword))(const byte*) mode_ecmchar::CHARSET#0/(dword/signed dword) $10000
Constant inlined mode_ecmchar::$1 = ((dword))(const byte*) mode_ecmchar::CHARSET#0/(dword/signed dword) $10000
Constant inlined mode_ecmchar::$0 = ((dword))(const byte*) mode_ecmchar::CHARSET#0
Constant inlined mode_ecmchar::$19 = ((word))(const byte*) mode_ecmchar::CHARSET#0
Constant inlined mode_ecmchar::$18 = ((word))(const byte*) mode_ecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40
Constant inlined mode_ecmchar::$17 = ((word))(const byte*) mode_ecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff
Constant inlined print_set_screen::screen#0 = (const byte*) menu::SCREEN#0
Constant inlined mode_ecmchar::$16 = ((word))(const byte*) mode_ecmchar::SCREEN#0
Constant inlined mode_ecmchar::$9 = ((word))(const byte*) mode_ecmchar::CHARSET#0
Constant inlined mode_ecmchar::$8 = >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_ecmchar::$7 = ((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_twoplanebitmap::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_ecmchar::$6 = (const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined dtv_control#48 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0
Constant inlined mode_ecmchar::$5 = <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_ecmchar::$4 = ((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined mode_ecmchar::$3 = (const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined dtv_control#45 = (const byte) DTV_LINEAR#0
Constant inlined mode_hicolmcchar::cx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_8bppchunkybmm::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined dtv_control#42 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0
Constant inlined mode_sixsfred::cx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mode_ecmchar::$15 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(const byte) VIC_ECM#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined mode_ecmchar::$14 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(const byte) VIC_ECM#0
Constant inlined mode_ecmchar::$13 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined mode_ecmchar::$12 = (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_ecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_ecmchar::$11 = ((byte))((word))(const byte*) mode_ecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_ecmchar::$10 = ((word))(const byte*) mode_ecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined mode_stdchar::cy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bitmap_init::$1 = >(const byte*) mode_stdbitmap::BITMAP#0
Constant inlined dtv_control#39 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0
Constant inlined dtv_control#36 = (const byte) DTV_HIGHCOLOR#0
Successful SSA optimization Pass2ConstantInlining
Simplifying constant plus zero bitmap_plot_xhi#0+0
Simplifying constant plus zero bitmap_plot_xlo#0+0
Added new block during phi lifting menu::@74(between menu::@1 and menu::@1)
Added new block during phi lifting menu::@75(between menu::@2 and menu::@2)
Added new block during phi lifting mode_8bppchunkybmm::@13(between mode_8bppchunkybmm::@1 and mode_8bppchunkybmm::@1)
Added new block during phi lifting mode_8bppchunkybmm::@14(between mode_8bppchunkybmm::@7 and mode_8bppchunkybmm::@2)
Added new block during phi lifting mode_8bppchunkybmm::@15(between mode_8bppchunkybmm::@4 and mode_8bppchunkybmm::@3)
Added new block during phi lifting mode_8bppchunkybmm::@16(between mode_8bppchunkybmm::@3 and mode_8bppchunkybmm::@4)
Added new block during phi lifting mode_ctrl::@40(between mode_ctrl::@33 and mode_ctrl::@8)
Added new block during phi lifting mode_ctrl::@41(between mode_ctrl::@34 and mode_ctrl::@9)
Added new block during phi lifting mode_ctrl::@42(between mode_ctrl::@35 and mode_ctrl::@10)
Added new block during phi lifting mode_ctrl::@43(between mode_ctrl::@36 and mode_ctrl::@11)
Added new block during phi lifting mode_ctrl::@44(between mode_ctrl::@37 and mode_ctrl::@12)
Added new block during phi lifting mode_ctrl::@45(between mode_ctrl::@38 and mode_ctrl::@13)
Added new block during phi lifting mode_ctrl::@46(between mode_ctrl::@39 and mode_ctrl::@14)
Added new block during phi lifting mode_8bpppixelcell::@16(between mode_8bpppixelcell::@1 and mode_8bpppixelcell::@1)
Added new block during phi lifting mode_8bpppixelcell::@17(between mode_8bpppixelcell::@9 and mode_8bpppixelcell::@2)
Added new block during phi lifting mode_8bpppixelcell::@18(between mode_8bpppixelcell::@3 and mode_8bpppixelcell::@3)
Added new block during phi lifting mode_8bpppixelcell::@19(between mode_8bpppixelcell::@13 and mode_8bpppixelcell::@4)
Added new block during phi lifting mode_8bpppixelcell::@20(between mode_8bpppixelcell::@12 and mode_8bpppixelcell::@5)
Added new block during phi lifting mode_8bpppixelcell::@21(between mode_8bpppixelcell::@7 and mode_8bpppixelcell::@6)
Added new block during phi lifting mode_sixsfred::@16(between mode_sixsfred::@1 and mode_sixsfred::@1)
Added new block during phi lifting mode_sixsfred::@17(between mode_sixsfred::@9 and mode_sixsfred::@2)
Added new block during phi lifting mode_sixsfred::@18(between mode_sixsfred::@3 and mode_sixsfred::@3)
Added new block during phi lifting mode_sixsfred::@19(between mode_sixsfred::@11 and mode_sixsfred::@4)
Added new block during phi lifting mode_sixsfred::@20(between mode_sixsfred::@5 and mode_sixsfred::@5)
Added new block during phi lifting mode_sixsfred::@21(between mode_sixsfred::@13 and mode_sixsfred::@6)
Added new block during phi lifting mode_sixsfred::@22(between mode_sixsfred::@7 and mode_sixsfred::@7)
Added new block during phi lifting mode_twoplanebitmap::@20(between mode_twoplanebitmap::@1 and mode_twoplanebitmap::@1)
Added new block during phi lifting mode_twoplanebitmap::@21(between mode_twoplanebitmap::@11 and mode_twoplanebitmap::@2)
Added new block during phi lifting mode_twoplanebitmap::@22(between mode_twoplanebitmap::@3 and mode_twoplanebitmap::@3)
Added new block during phi lifting mode_twoplanebitmap::@23(between mode_twoplanebitmap::@15 and mode_twoplanebitmap::@4)
Added new block during phi lifting mode_twoplanebitmap::@24(between mode_twoplanebitmap::@7 and mode_twoplanebitmap::@5)
Added new block during phi lifting mode_twoplanebitmap::@25(between mode_twoplanebitmap::@17 and mode_twoplanebitmap::@8)
Added new block during phi lifting mode_twoplanebitmap::@26(between mode_twoplanebitmap::@9 and mode_twoplanebitmap::@9)
Added new block during phi lifting mode_sixsfred2::@16(between mode_sixsfred2::@1 and mode_sixsfred2::@1)
Added new block during phi lifting mode_sixsfred2::@17(between mode_sixsfred2::@9 and mode_sixsfred2::@2)
Added new block during phi lifting mode_sixsfred2::@18(between mode_sixsfred2::@3 and mode_sixsfred2::@3)
Added new block during phi lifting mode_sixsfred2::@19(between mode_sixsfred2::@11 and mode_sixsfred2::@4)
Added new block during phi lifting mode_sixsfred2::@20(between mode_sixsfred2::@5 and mode_sixsfred2::@5)
Added new block during phi lifting mode_sixsfred2::@21(between mode_sixsfred2::@13 and mode_sixsfred2::@6)
Added new block during phi lifting mode_sixsfred2::@22(between mode_sixsfred2::@7 and mode_sixsfred2::@7)
Added new block during phi lifting mode_hicolmcchar::@8(between mode_hicolmcchar::@1 and mode_hicolmcchar::@1)
Added new block during phi lifting mode_hicolmcchar::@9(between mode_hicolmcchar::@5 and mode_hicolmcchar::@2)
Added new block during phi lifting mode_hicolmcchar::@10(between mode_hicolmcchar::@3 and mode_hicolmcchar::@3)
Added new block during phi lifting mode_hicolecmchar::@8(between mode_hicolecmchar::@1 and mode_hicolecmchar::@1)
Added new block during phi lifting mode_hicolecmchar::@9(between mode_hicolecmchar::@5 and mode_hicolecmchar::@2)
Added new block during phi lifting mode_hicolecmchar::@10(between mode_hicolecmchar::@3 and mode_hicolecmchar::@3)
Added new block during phi lifting mode_hicolstdchar::@8(between mode_hicolstdchar::@1 and mode_hicolstdchar::@1)
Added new block during phi lifting mode_hicolstdchar::@9(between mode_hicolstdchar::@5 and mode_hicolstdchar::@2)
Added new block during phi lifting mode_hicolstdchar::@10(between mode_hicolstdchar::@3 and mode_hicolstdchar::@3)
Added new block during phi lifting mode_stdbitmap::@13(between mode_stdbitmap::@1 and mode_stdbitmap::@1)
Added new block during phi lifting mode_stdbitmap::@14(between mode_stdbitmap::@6 and mode_stdbitmap::@2)
Added new block during phi lifting mode_stdbitmap::@15(between mode_stdbitmap::@3 and mode_stdbitmap::@3)
Added new block during phi lifting mode_stdbitmap::@16(between mode_stdbitmap::@11 and mode_stdbitmap::@4)
Added new block during phi lifting bitmap_line_xdyi::@6(between bitmap_line_xdyi::@2 and bitmap_line_xdyi::@1)
Added new block during phi lifting bitmap_line_xdyi::@7(between bitmap_line_xdyi::@5 and bitmap_line_xdyi::@2)
Added new block during phi lifting bitmap_line_ydxi::@6(between bitmap_line_ydxi::@2 and bitmap_line_ydxi::@1)
Added new block during phi lifting bitmap_line_ydxi::@7(between bitmap_line_ydxi::@5 and bitmap_line_ydxi::@2)
Added new block during phi lifting bitmap_line_xdyd::@6(between bitmap_line_xdyd::@2 and bitmap_line_xdyd::@1)
Added new block during phi lifting bitmap_line_xdyd::@7(between bitmap_line_xdyd::@5 and bitmap_line_xdyd::@2)
Added new block during phi lifting bitmap_line_ydxd::@6(between bitmap_line_ydxd::@2 and bitmap_line_ydxd::@1)
Added new block during phi lifting bitmap_line_ydxd::@7(between bitmap_line_ydxd::@5 and bitmap_line_ydxd::@2)
Added new block during phi lifting bitmap_clear::@5(between bitmap_clear::@3 and bitmap_clear::@1)
Added new block during phi lifting bitmap_clear::@6(between bitmap_clear::@2 and bitmap_clear::@2)
Added new block during phi lifting bitmap_init::@9(between bitmap_init::@2 and bitmap_init::@1)
Added new block during phi lifting bitmap_init::@10(between bitmap_init::@1 and bitmap_init::@2)
Added new block during phi lifting bitmap_init::@11(between bitmap_init::@4 and bitmap_init::@3)
Added new block during phi lifting bitmap_init::@12(between bitmap_init::@3 and bitmap_init::@4)
Added new block during phi lifting mode_mcchar::@8(between mode_mcchar::@1 and mode_mcchar::@1)
Added new block during phi lifting mode_mcchar::@9(between mode_mcchar::@5 and mode_mcchar::@2)
Added new block during phi lifting mode_mcchar::@10(between mode_mcchar::@3 and mode_mcchar::@3)
Added new block during phi lifting mode_ecmchar::@8(between mode_ecmchar::@1 and mode_ecmchar::@1)
Added new block during phi lifting mode_ecmchar::@9(between mode_ecmchar::@5 and mode_ecmchar::@2)
Added new block during phi lifting mode_ecmchar::@10(between mode_ecmchar::@3 and mode_ecmchar::@3)
Added new block during phi lifting mode_stdchar::@8(between mode_stdchar::@1 and mode_stdchar::@1)
Added new block during phi lifting mode_stdchar::@9(between mode_stdchar::@5 and mode_stdchar::@2)
Added new block during phi lifting mode_stdchar::@10(between mode_stdchar::@3 and mode_stdchar::@3)
Added new block during phi lifting print_str_lines::@12(between print_str_lines::@1 and print_str_lines::@4)
Added new block during phi lifting print_str_lines::@13(between print_str_lines::@5 and print_str_lines::@4)
Added new block during phi lifting print_str_lines::@14(between print_str_lines::@4 and print_str_lines::@5)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @54
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of menu::@47
Adding NOP phi() at start of menu::@48
Adding NOP phi() at start of menu::@4
Adding NOP phi() at start of menu::@22
Adding NOP phi() at start of menu::@6
Adding NOP phi() at start of menu::@24
Adding NOP phi() at start of menu::@7
Adding NOP phi() at start of menu::@26
Adding NOP phi() at start of menu::@8
Adding NOP phi() at start of menu::@28
Adding NOP phi() at start of menu::@9
Adding NOP phi() at start of menu::@30
Adding NOP phi() at start of menu::@10
Adding NOP phi() at start of menu::@32
Adding NOP phi() at start of menu::@11
Adding NOP phi() at start of menu::@34
Adding NOP phi() at start of menu::@12
Adding NOP phi() at start of menu::@36
Adding NOP phi() at start of menu::@13
Adding NOP phi() at start of menu::@38
Adding NOP phi() at start of menu::@14
Adding NOP phi() at start of menu::@40
Adding NOP phi() at start of menu::@15
Adding NOP phi() at start of menu::@42
Adding NOP phi() at start of menu::@16
Adding NOP phi() at start of menu::@44
Adding NOP phi() at start of mode_8bppchunkybmm::@5
Adding NOP phi() at start of mode_8bppchunkybmm::@8
Adding NOP phi() at start of mode_8bppchunkybmm::@11
Adding NOP phi() at start of mode_ctrl::@6
Adding NOP phi() at start of mode_ctrl::@29
Adding NOP phi() at start of mode_sixsfred::@14
Adding NOP phi() at start of mode_twoplanebitmap::@18
Adding NOP phi() at start of mode_sixsfred2::@14
Adding NOP phi() at start of mode_hicolmcchar::@6
Adding NOP phi() at start of mode_hicolecmchar::@6
Adding NOP phi() at start of mode_hicolstdchar::@6
Adding NOP phi() at start of mode_stdbitmap::@7
Adding NOP phi() at start of mode_stdbitmap::@9
Adding NOP phi() at start of mode_stdbitmap::@8
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@5
Adding NOP phi() at start of mode_mcchar::@6
Adding NOP phi() at start of mode_ecmchar::@6
Adding NOP phi() at start of mode_stdchar::@6
Adding NOP phi() at start of print_str_lines
Adding NOP phi() at start of print_str_lines::@9
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_set_screen
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to menu:9 
Calls in [menu] to print_set_screen:29 print_cls:31 print_str_lines:33 keyboard_key_pressed:35 mode_stdchar:40 keyboard_key_pressed:43 mode_ecmchar:48 keyboard_key_pressed:50 mode_mcchar:55 keyboard_key_pressed:57 mode_stdbitmap:62 keyboard_key_pressed:64 mode_hicolstdchar:69 keyboard_key_pressed:71 mode_hicolecmchar:76 keyboard_key_pressed:78 mode_hicolmcchar:83 keyboard_key_pressed:85 mode_sixsfred2:90 keyboard_key_pressed:92 mode_twoplanebitmap:97 keyboard_key_pressed:99 mode_sixsfred:104 keyboard_key_pressed:106 mode_8bpppixelcell:111 keyboard_key_pressed:113 mode_8bppchunkybmm:118 
Calls in [mode_8bppchunkybmm] to dtvSetCpuBankSegment1:136 dtvSetCpuBankSegment1:144 dtvSetCpuBankSegment1:157 mode_ctrl:159 
Calls in [mode_ctrl] to keyboard_key_pressed:175 keyboard_key_pressed:181 keyboard_key_pressed:188 keyboard_key_pressed:195 keyboard_key_pressed:202 keyboard_key_pressed:209 keyboard_key_pressed:216 keyboard_key_pressed:223 
Calls in [keyboard_key_pressed] to keyboard_matrix_read:245 
Calls in [mode_8bpppixelcell] to mode_ctrl:317 
Calls in [mode_sixsfred] to mode_ctrl:390 
Calls in [mode_twoplanebitmap] to mode_ctrl:465 
Calls in [mode_sixsfred2] to mode_ctrl:539 
Calls in [mode_hicolmcchar] to mode_ctrl:588 
Calls in [mode_hicolecmchar] to mode_ctrl:632 
Calls in [mode_hicolstdchar] to mode_ctrl:673 
Calls in [mode_stdbitmap] to bitmap_init:710 bitmap_clear:712 bitmap_line:718 mode_ctrl:722 
Calls in [bitmap_line] to bitmap_line_ydxi:745 bitmap_line_xdyi:757 bitmap_line_ydxd:770 bitmap_line_xdyd:781 bitmap_line_ydxd:796 bitmap_line_xdyd:807 bitmap_line_ydxi:820 bitmap_line_xdyi:831 
Calls in [bitmap_line_xdyi] to bitmap_plot:842 
Calls in [bitmap_line_ydxi] to bitmap_plot:876 
Calls in [bitmap_line_xdyd] to bitmap_plot:903 
Calls in [bitmap_line_ydxd] to bitmap_plot:930 
Calls in [mode_mcchar] to mode_ctrl:1032 
Calls in [mode_ecmchar] to mode_ctrl:1078 
Calls in [mode_stdchar] to mode_ctrl:1121 
Calls in [print_str_lines] to print_ln:1146 

Created 188 initial phi equivalence classes
Coalesced [119] menu::c#3 ← menu::c#1
Coalesced [120] menu::i#3 ← menu::i#1
Coalesced [138] mode_8bppchunkybmm::gfxb#8 ← mode_8bppchunkybmm::gfxb#5
Coalesced [139] mode_8bppchunkybmm::gfxbCpuBank#11 ← mode_8bppchunkybmm::gfxbCpuBank#7
Coalesced [143] dtvSetCpuBankSegment1::cpuBankIdx#4 ← dtvSetCpuBankSegment1::cpuBankIdx#1
Coalesced [146] mode_8bppchunkybmm::gfxbCpuBank#13 ← mode_8bppchunkybmm::gfxbCpuBank#2
Coalesced [161] mode_8bppchunkybmm::gfxb#7 ← mode_8bppchunkybmm::gfxb#1
Coalesced [162] mode_8bppchunkybmm::y#8 ← mode_8bppchunkybmm::y#1
Coalesced [163] mode_8bppchunkybmm::gfxbCpuBank#10 ← mode_8bppchunkybmm::gfxbCpuBank#8
Coalesced (already) [164] mode_8bppchunkybmm::gfxb#9 ← mode_8bppchunkybmm::gfxb#1
Coalesced [165] mode_8bppchunkybmm::x#6 ← mode_8bppchunkybmm::x#1
Coalesced (already) [166] mode_8bppchunkybmm::gfxbCpuBank#12 ← mode_8bppchunkybmm::gfxbCpuBank#8
Coalesced [167] mode_8bppchunkybmm::gfxb#10 ← mode_8bppchunkybmm::gfxb#3
Coalesced (already) [168] mode_8bppchunkybmm::gfxbCpuBank#14 ← mode_8bppchunkybmm::gfxbCpuBank#4
Coalesced [169] mode_8bppchunkybmm::i#3 ← mode_8bppchunkybmm::i#1
Coalesced [171] dtv_control#293 ← dtv_control#145
Coalesced [186] mode_ctrl::ctrl#29 ← mode_ctrl::ctrl#1
Coalesced [193] mode_ctrl::ctrl#31 ← mode_ctrl::ctrl#2
Coalesced [200] mode_ctrl::ctrl#33 ← mode_ctrl::ctrl#3
Coalesced [207] mode_ctrl::ctrl#35 ← mode_ctrl::ctrl#4
Coalesced [214] mode_ctrl::ctrl#37 ← mode_ctrl::ctrl#5
Coalesced [221] mode_ctrl::ctrl#39 ← mode_ctrl::ctrl#6
Coalesced [233] dtv_control#294 ← dtv_control#17
Coalesced [234] mode_ctrl::ctrl#41 ← mode_ctrl::ctrl#22
Coalesced [235] mode_ctrl::ctrl#40 ← mode_ctrl::ctrl#13
Coalesced [236] mode_ctrl::ctrl#38 ← mode_ctrl::ctrl#12
Coalesced [237] mode_ctrl::ctrl#36 ← mode_ctrl::ctrl#11
Coalesced [238] mode_ctrl::ctrl#34 ← mode_ctrl::ctrl#10
Coalesced [239] mode_ctrl::ctrl#32 ← mode_ctrl::ctrl#17
Coalesced [240] mode_ctrl::ctrl#30 ← mode_ctrl::ctrl#0
Coalesced [278] mode_8bpppixelcell::gfxa#6 ← mode_8bpppixelcell::gfxa#3
Coalesced [292] mode_8bpppixelcell::chargen#11 ← mode_8bpppixelcell::chargen#4
Coalesced [293] mode_8bpppixelcell::gfxb#11 ← mode_8bpppixelcell::gfxb#7
Coalesced [294] mode_8bpppixelcell::col#11 ← mode_8bpppixelcell::col#7
Coalesced [298] mode_8bpppixelcell::bits#5 ← mode_8bpppixelcell::bits#0
Coalesced [299] mode_8bpppixelcell::gfxb#12 ← mode_8bpppixelcell::gfxb#5
Coalesced [300] mode_8bpppixelcell::col#12 ← mode_8bpppixelcell::col#5
Not coalescing [304] mode_8bpppixelcell::c#3 ← mode_8bpppixelcell::col#2
Coalesced [319] mode_8bpppixelcell::chargen#9 ← mode_8bpppixelcell::chargen#1
Coalesced [320] mode_8bpppixelcell::gfxb#9 ← mode_8bpppixelcell::gfxb#1
Coalesced [321] mode_8bpppixelcell::col#9 ← mode_8bpppixelcell::col#1
Coalesced [322] mode_8bpppixelcell::ch#9 ← mode_8bpppixelcell::ch#1
Coalesced (already) [323] mode_8bpppixelcell::chargen#10 ← mode_8bpppixelcell::chargen#1
Coalesced (already) [324] mode_8bpppixelcell::gfxb#10 ← mode_8bpppixelcell::gfxb#1
Coalesced (already) [325] mode_8bpppixelcell::col#10 ← mode_8bpppixelcell::col#1
Coalesced [326] mode_8bpppixelcell::cr#7 ← mode_8bpppixelcell::cr#1
Coalesced [327] mode_8bpppixelcell::bits#6 ← mode_8bpppixelcell::bits#1
Coalesced (already) [328] mode_8bpppixelcell::gfxb#13 ← mode_8bpppixelcell::gfxb#1
Coalesced (already) [329] mode_8bpppixelcell::col#13 ← mode_8bpppixelcell::col#1
Coalesced [330] mode_8bpppixelcell::cp#5 ← mode_8bpppixelcell::cp#1
Coalesced [331] mode_8bpppixelcell::ay#5 ← mode_8bpppixelcell::ay#1
Coalesced [332] mode_8bpppixelcell::gfxa#5 ← mode_8bpppixelcell::gfxa#1
Coalesced [333] mode_8bpppixelcell::ax#3 ← mode_8bpppixelcell::ax#1
Coalesced (already) [334] mode_8bpppixelcell::gfxa#7 ← mode_8bpppixelcell::gfxa#1
Coalesced [335] mode_8bpppixelcell::i#3 ← mode_8bpppixelcell::i#1
Coalesced [359] mode_sixsfred::col#6 ← mode_sixsfred::col#3
Coalesced [370] mode_sixsfred::gfxa#6 ← mode_sixsfred::gfxa#3
Coalesced [381] mode_sixsfred::gfxb#6 ← mode_sixsfred::gfxb#3
Coalesced [392] mode_sixsfred::gfxb#5 ← mode_sixsfred::gfxb#1
Coalesced [393] mode_sixsfred::by#5 ← mode_sixsfred::by#1
Coalesced (already) [394] mode_sixsfred::gfxb#7 ← mode_sixsfred::gfxb#1
Coalesced [395] mode_sixsfred::bx#3 ← mode_sixsfred::bx#1
Coalesced [396] mode_sixsfred::ay#5 ← mode_sixsfred::ay#1
Coalesced [397] mode_sixsfred::gfxa#5 ← mode_sixsfred::gfxa#1
Coalesced (already) [398] mode_sixsfred::gfxa#7 ← mode_sixsfred::gfxa#1
Coalesced [399] mode_sixsfred::ax#3 ← mode_sixsfred::ax#1
Coalesced [400] mode_sixsfred::cy#5 ← mode_sixsfred::cy#1
Coalesced [401] mode_sixsfred::col#5 ← mode_sixsfred::col#1
Coalesced [402] mode_sixsfred::cx#3 ← mode_sixsfred::cx#1
Coalesced (already) [403] mode_sixsfred::col#7 ← mode_sixsfred::col#1
Coalesced [404] mode_sixsfred::i#3 ← mode_sixsfred::i#1
Coalesced [430] mode_twoplanebitmap::col#6 ← mode_twoplanebitmap::col#3
Coalesced [443] mode_twoplanebitmap::gfxa#10 ← mode_twoplanebitmap::gfxa#6
Coalesced [449] mode_twoplanebitmap::gfxa#12 ← mode_twoplanebitmap::gfxa#2
Coalesced [456] mode_twoplanebitmap::gfxb#6 ← mode_twoplanebitmap::gfxb#3
Coalesced [467] mode_twoplanebitmap::gfxb#5 ← mode_twoplanebitmap::gfxb#1
Coalesced [468] mode_twoplanebitmap::by#5 ← mode_twoplanebitmap::by#1
Coalesced (already) [469] mode_twoplanebitmap::gfxb#7 ← mode_twoplanebitmap::gfxb#1
Coalesced [470] mode_twoplanebitmap::bx#3 ← mode_twoplanebitmap::bx#1
Coalesced [471] mode_twoplanebitmap::ay#8 ← mode_twoplanebitmap::ay#1
Coalesced [472] mode_twoplanebitmap::gfxa#9 ← mode_twoplanebitmap::gfxa#7
Coalesced (already) [473] mode_twoplanebitmap::gfxa#11 ← mode_twoplanebitmap::gfxa#7
Coalesced [474] mode_twoplanebitmap::ax#6 ← mode_twoplanebitmap::ax#1
Coalesced [477] mode_twoplanebitmap::gfxa#13 ← mode_twoplanebitmap::gfxa#1
Coalesced [478] mode_twoplanebitmap::cy#5 ← mode_twoplanebitmap::cy#1
Coalesced [479] mode_twoplanebitmap::col#5 ← mode_twoplanebitmap::col#1
Coalesced [480] mode_twoplanebitmap::cx#3 ← mode_twoplanebitmap::cx#1
Coalesced (already) [481] mode_twoplanebitmap::col#7 ← mode_twoplanebitmap::col#1
Coalesced [482] mode_twoplanebitmap::i#3 ← mode_twoplanebitmap::i#1
Coalesced [506] mode_sixsfred2::col#6 ← mode_sixsfred2::col#3
Coalesced [519] mode_sixsfred2::gfxa#6 ← mode_sixsfred2::gfxa#3
Coalesced [530] mode_sixsfred2::gfxb#6 ← mode_sixsfred2::gfxb#3
Coalesced [541] mode_sixsfred2::gfxb#5 ← mode_sixsfred2::gfxb#1
Coalesced [542] mode_sixsfred2::by#5 ← mode_sixsfred2::by#1
Coalesced (already) [543] mode_sixsfred2::gfxb#7 ← mode_sixsfred2::gfxb#1
Coalesced [544] mode_sixsfred2::bx#3 ← mode_sixsfred2::bx#1
Coalesced [545] mode_sixsfred2::ay#5 ← mode_sixsfred2::ay#1
Coalesced [546] mode_sixsfred2::gfxa#5 ← mode_sixsfred2::gfxa#1
Coalesced (already) [547] mode_sixsfred2::gfxa#7 ← mode_sixsfred2::gfxa#1
Coalesced [548] mode_sixsfred2::ax#3 ← mode_sixsfred2::ax#1
Coalesced [549] mode_sixsfred2::cy#5 ← mode_sixsfred2::cy#1
Coalesced [550] mode_sixsfred2::col#5 ← mode_sixsfred2::col#1
Coalesced [551] mode_sixsfred2::cx#3 ← mode_sixsfred2::cx#1
Coalesced (already) [552] mode_sixsfred2::col#7 ← mode_sixsfred2::col#1
Coalesced [553] mode_sixsfred2::i#3 ← mode_sixsfred2::i#1
Coalesced [572] mode_hicolmcchar::col#6 ← mode_hicolmcchar::col#3
Coalesced [573] mode_hicolmcchar::ch#6 ← mode_hicolmcchar::ch#3
Coalesced [590] mode_hicolmcchar::cy#5 ← mode_hicolmcchar::cy#1
Coalesced [591] mode_hicolmcchar::col#5 ← mode_hicolmcchar::col#1
Coalesced [592] mode_hicolmcchar::ch#5 ← mode_hicolmcchar::ch#1
Coalesced [593] mode_hicolmcchar::cx#3 ← mode_hicolmcchar::cx#1
Coalesced (already) [594] mode_hicolmcchar::col#7 ← mode_hicolmcchar::col#1
Coalesced (already) [595] mode_hicolmcchar::ch#7 ← mode_hicolmcchar::ch#1
Coalesced [596] mode_hicolmcchar::i#3 ← mode_hicolmcchar::i#1
Coalesced [616] mode_hicolecmchar::col#6 ← mode_hicolecmchar::col#3
Coalesced [617] mode_hicolecmchar::ch#6 ← mode_hicolecmchar::ch#3
Coalesced [634] mode_hicolecmchar::cy#5 ← mode_hicolecmchar::cy#1
Coalesced [635] mode_hicolecmchar::col#5 ← mode_hicolecmchar::col#1
Coalesced [636] mode_hicolecmchar::ch#5 ← mode_hicolecmchar::ch#1
Coalesced [637] mode_hicolecmchar::cx#3 ← mode_hicolecmchar::cx#1
Coalesced (already) [638] mode_hicolecmchar::col#7 ← mode_hicolecmchar::col#1
Coalesced (already) [639] mode_hicolecmchar::ch#7 ← mode_hicolecmchar::ch#1
Coalesced [640] mode_hicolecmchar::i#3 ← mode_hicolecmchar::i#1
Coalesced [657] mode_hicolstdchar::col#6 ← mode_hicolstdchar::col#3
Coalesced [658] mode_hicolstdchar::ch#6 ← mode_hicolstdchar::ch#3
Coalesced [675] mode_hicolstdchar::cy#5 ← mode_hicolstdchar::cy#1
Coalesced [676] mode_hicolstdchar::col#5 ← mode_hicolstdchar::col#1
Coalesced [677] mode_hicolstdchar::ch#5 ← mode_hicolstdchar::ch#1
Coalesced [678] mode_hicolstdchar::cx#3 ← mode_hicolstdchar::cx#1
Coalesced (already) [679] mode_hicolstdchar::col#7 ← mode_hicolstdchar::col#1
Coalesced (already) [680] mode_hicolstdchar::ch#7 ← mode_hicolstdchar::ch#1
Coalesced [681] mode_hicolstdchar::i#3 ← mode_hicolstdchar::i#1
Coalesced [696] mode_stdbitmap::ch#6 ← mode_stdbitmap::ch#3
Coalesced [724] mode_stdbitmap::l#4 ← mode_stdbitmap::l#1
Coalesced [725] mode_stdbitmap::cy#5 ← mode_stdbitmap::cy#1
Coalesced [726] mode_stdbitmap::ch#5 ← mode_stdbitmap::ch#1
Coalesced [727] mode_stdbitmap::cx#3 ← mode_stdbitmap::cx#1
Coalesced (already) [728] mode_stdbitmap::ch#7 ← mode_stdbitmap::ch#1
Coalesced [729] mode_stdbitmap::i#3 ← mode_stdbitmap::i#1
Coalesced [740] bitmap_line_ydxi::xd#7 ← bitmap_line_ydxi::xd#0
Coalesced [741] bitmap_line_ydxi::x#8 ← bitmap_line_ydxi::x#0
Coalesced [742] bitmap_line_ydxi::y#8 ← bitmap_line_ydxi::y#0
Coalesced [743] bitmap_line_ydxi::yd#7 ← bitmap_line_ydxi::yd#0
Coalesced [744] bitmap_line_ydxi::y1#7 ← bitmap_line_ydxi::y1#0
Coalesced [752] bitmap_line_xdyi::yd#8 ← bitmap_line_xdyi::yd#0
Coalesced [753] bitmap_line_xdyi::x#9 ← bitmap_line_xdyi::x#0
Coalesced [754] bitmap_line_xdyi::y#9 ← bitmap_line_xdyi::y#0
Coalesced [755] bitmap_line_xdyi::xd#8 ← bitmap_line_xdyi::xd#0
Coalesced [756] bitmap_line_xdyi::x1#8 ← bitmap_line_xdyi::x1#0
Coalesced [765] bitmap_line_ydxd::xd#7 ← bitmap_line_ydxd::xd#0
Coalesced [766] bitmap_line_ydxd::x#8 ← bitmap_line_ydxd::x#0
Coalesced [767] bitmap_line_ydxd::y#9 ← bitmap_line_ydxd::y#0
Coalesced [768] bitmap_line_ydxd::yd#7 ← bitmap_line_ydxd::yd#0
Coalesced [769] bitmap_line_ydxd::y1#7 ← bitmap_line_ydxd::y1#0
Coalesced [776] bitmap_line_xdyd::yd#8 ← bitmap_line_xdyd::yd#0
Coalesced [777] bitmap_line_xdyd::x#9 ← bitmap_line_xdyd::x#0
Coalesced [778] bitmap_line_xdyd::y#9 ← bitmap_line_xdyd::y#0
Coalesced [779] bitmap_line_xdyd::xd#8 ← bitmap_line_xdyd::xd#0
Coalesced [780] bitmap_line_xdyd::x1#8 ← bitmap_line_xdyd::x1#0
Coalesced [791] bitmap_line_ydxd::xd#8 ← bitmap_line_ydxd::xd#1
Coalesced [792] bitmap_line_ydxd::x#9 ← bitmap_line_ydxd::x#1
Coalesced [793] bitmap_line_ydxd::y#10 ← bitmap_line_ydxd::y#1
Coalesced [794] bitmap_line_ydxd::yd#8 ← bitmap_line_ydxd::yd#1
Coalesced [795] bitmap_line_ydxd::y1#8 ← bitmap_line_ydxd::y1#1
Coalesced [802] bitmap_line_xdyd::yd#7 ← bitmap_line_xdyd::yd#1
Coalesced [803] bitmap_line_xdyd::x#8 ← bitmap_line_xdyd::x#1
Coalesced [804] bitmap_line_xdyd::y#8 ← bitmap_line_xdyd::y#1
Coalesced [805] bitmap_line_xdyd::xd#7 ← bitmap_line_xdyd::xd#1
Coalesced [806] bitmap_line_xdyd::x1#7 ← bitmap_line_xdyd::x1#1
Coalesced [815] bitmap_line_ydxi::xd#8 ← bitmap_line_ydxi::xd#1
Coalesced [816] bitmap_line_ydxi::x#9 ← bitmap_line_ydxi::x#1
Coalesced [817] bitmap_line_ydxi::y#9 ← bitmap_line_ydxi::y#1
Coalesced [818] bitmap_line_ydxi::yd#8 ← bitmap_line_ydxi::yd#1
Coalesced [819] bitmap_line_ydxi::y1#8 ← bitmap_line_ydxi::y1#1
Coalesced [826] bitmap_line_xdyi::yd#7 ← bitmap_line_xdyi::yd#1
Coalesced [827] bitmap_line_xdyi::x#8 ← bitmap_line_xdyi::x#1
Coalesced [828] bitmap_line_xdyi::y#8 ← bitmap_line_xdyi::y#1
Coalesced [829] bitmap_line_xdyi::xd#7 ← bitmap_line_xdyi::xd#1
Coalesced [830] bitmap_line_xdyi::x1#7 ← bitmap_line_xdyi::x1#1
Coalesced [834] bitmap_line_xdyi::x#10 ← bitmap_line_xdyi::x#6
Coalesced [835] bitmap_line_xdyi::y#10 ← bitmap_line_xdyi::y#5
Coalesced [836] bitmap_line_xdyi::e#7 ← bitmap_line_xdyi::e#0
Coalesced [840] bitmap_plot::x#6 ← bitmap_plot::x#0
Coalesced [841] bitmap_plot::y#6 ← bitmap_plot::y#0
Coalesced [848] bitmap_line_xdyi::y#12 ← bitmap_line_xdyi::y#2
Coalesced [849] bitmap_line_xdyi::e#9 ← bitmap_line_xdyi::e#2
Coalesced [854] bitmap_line_xdyi::x#11 ← bitmap_line_xdyi::x#2
Coalesced [855] bitmap_line_xdyi::y#11 ← bitmap_line_xdyi::y#6
Coalesced [856] bitmap_line_xdyi::e#8 ← bitmap_line_xdyi::e#6
Coalesced (already) [857] bitmap_line_xdyi::y#13 ← bitmap_line_xdyi::y#3
Coalesced [858] bitmap_line_xdyi::e#10 ← bitmap_line_xdyi::e#1
Coalesced [868] bitmap_line_ydxi::x#10 ← bitmap_line_ydxi::x#5
Coalesced [869] bitmap_line_ydxi::y#10 ← bitmap_line_ydxi::y#6
Coalesced [870] bitmap_line_ydxi::e#7 ← bitmap_line_ydxi::e#0
Coalesced [874] bitmap_plot::x#8 ← bitmap_plot::x#2
Coalesced [875] bitmap_plot::y#8 ← bitmap_plot::y#2
Coalesced [882] bitmap_line_ydxi::x#12 ← bitmap_line_ydxi::x#2
Coalesced [883] bitmap_line_ydxi::e#9 ← bitmap_line_ydxi::e#2
Coalesced [888] bitmap_line_ydxi::x#11 ← bitmap_line_ydxi::x#6
Coalesced [889] bitmap_line_ydxi::y#11 ← bitmap_line_ydxi::y#2
Coalesced [890] bitmap_line_ydxi::e#8 ← bitmap_line_ydxi::e#6
Coalesced (already) [891] bitmap_line_ydxi::x#13 ← bitmap_line_ydxi::x#3
Coalesced [892] bitmap_line_ydxi::e#10 ← bitmap_line_ydxi::e#1
Coalesced [895] bitmap_line_xdyd::x#10 ← bitmap_line_xdyd::x#6
Coalesced [896] bitmap_line_xdyd::y#10 ← bitmap_line_xdyd::y#5
Coalesced [897] bitmap_line_xdyd::e#7 ← bitmap_line_xdyd::e#0
Coalesced [901] bitmap_plot::x#5 ← bitmap_plot::x#1
Coalesced [902] bitmap_plot::y#5 ← bitmap_plot::y#1
Coalesced [909] bitmap_line_xdyd::y#12 ← bitmap_line_xdyd::y#2
Coalesced [910] bitmap_line_xdyd::e#9 ← bitmap_line_xdyd::e#2
Coalesced [915] bitmap_line_xdyd::x#11 ← bitmap_line_xdyd::x#2
Coalesced [916] bitmap_line_xdyd::y#11 ← bitmap_line_xdyd::y#6
Coalesced [917] bitmap_line_xdyd::e#8 ← bitmap_line_xdyd::e#6
Coalesced (already) [918] bitmap_line_xdyd::y#13 ← bitmap_line_xdyd::y#3
Coalesced [919] bitmap_line_xdyd::e#10 ← bitmap_line_xdyd::e#1
Coalesced [922] bitmap_line_ydxd::x#10 ← bitmap_line_ydxd::x#5
Coalesced [923] bitmap_line_ydxd::y#11 ← bitmap_line_ydxd::y#7
Coalesced [924] bitmap_line_ydxd::e#7 ← bitmap_line_ydxd::e#0
Coalesced [928] bitmap_plot::x#7 ← bitmap_plot::x#3
Coalesced [929] bitmap_plot::y#7 ← bitmap_plot::y#3
Coalesced [936] bitmap_line_ydxd::x#12 ← bitmap_line_ydxd::x#2
Coalesced [937] bitmap_line_ydxd::e#9 ← bitmap_line_ydxd::e#2
Coalesced [942] bitmap_line_ydxd::x#11 ← bitmap_line_ydxd::x#6
Coalesced [943] bitmap_line_ydxd::y#12 ← bitmap_line_ydxd::y#3
Coalesced [944] bitmap_line_ydxd::e#8 ← bitmap_line_ydxd::e#6
Coalesced (already) [945] bitmap_line_ydxd::x#13 ← bitmap_line_ydxd::x#3
Coalesced [946] bitmap_line_ydxd::e#10 ← bitmap_line_ydxd::e#1
Coalesced [950] bitmap_clear::bitmap#7 ← bitmap_clear::bitmap#3
Coalesced [959] bitmap_clear::bitmap#6 ← bitmap_clear::bitmap#1
Coalesced [960] bitmap_clear::y#5 ← bitmap_clear::y#1
Coalesced (already) [961] bitmap_clear::bitmap#8 ← bitmap_clear::bitmap#1
Coalesced [962] bitmap_clear::x#3 ← bitmap_clear::x#1
Coalesced [985] bitmap_init::yoffs#7 ← bitmap_init::yoffs#1
Coalesced [990] bitmap_init::y#5 ← bitmap_init::y#1
Coalesced [991] bitmap_init::yoffs#5 ← bitmap_init::yoffs#4
Coalesced (already) [992] bitmap_init::yoffs#6 ← bitmap_init::yoffs#2
Coalesced [993] bitmap_init::x#5 ← bitmap_init::x#1
Coalesced [994] bitmap_init::bits#5 ← bitmap_init::bits#4
Coalesced [995] bitmap_init::bits#6 ← bitmap_init::bits#1
Coalesced [1014] mode_mcchar::col#6 ← mode_mcchar::col#3
Coalesced [1015] mode_mcchar::ch#6 ← mode_mcchar::ch#3
Coalesced [1034] mode_mcchar::cy#5 ← mode_mcchar::cy#1
Coalesced [1035] mode_mcchar::col#5 ← mode_mcchar::col#1
Coalesced [1036] mode_mcchar::ch#5 ← mode_mcchar::ch#1
Coalesced [1037] mode_mcchar::cx#3 ← mode_mcchar::cx#1
Coalesced (already) [1038] mode_mcchar::col#7 ← mode_mcchar::col#1
Coalesced (already) [1039] mode_mcchar::ch#7 ← mode_mcchar::ch#1
Coalesced [1040] mode_mcchar::i#3 ← mode_mcchar::i#1
Coalesced [1060] mode_ecmchar::col#6 ← mode_ecmchar::col#3
Coalesced [1061] mode_ecmchar::ch#6 ← mode_ecmchar::ch#3
Coalesced [1080] mode_ecmchar::cy#5 ← mode_ecmchar::cy#1
Coalesced [1081] mode_ecmchar::col#5 ← mode_ecmchar::col#1
Coalesced [1082] mode_ecmchar::ch#5 ← mode_ecmchar::ch#1
Coalesced [1083] mode_ecmchar::cx#3 ← mode_ecmchar::cx#1
Coalesced (already) [1084] mode_ecmchar::col#7 ← mode_ecmchar::col#1
Coalesced (already) [1085] mode_ecmchar::ch#7 ← mode_ecmchar::ch#1
Coalesced [1086] mode_ecmchar::i#3 ← mode_ecmchar::i#1
Coalesced [1103] mode_stdchar::col#6 ← mode_stdchar::col#3
Coalesced [1104] mode_stdchar::ch#6 ← mode_stdchar::ch#3
Coalesced [1123] mode_stdchar::cy#5 ← mode_stdchar::cy#1
Coalesced [1124] mode_stdchar::col#5 ← mode_stdchar::col#1
Coalesced [1125] mode_stdchar::ch#5 ← mode_stdchar::ch#1
Coalesced [1126] mode_stdchar::cx#3 ← mode_stdchar::cx#1
Coalesced (already) [1127] mode_stdchar::col#7 ← mode_stdchar::col#1
Coalesced (already) [1128] mode_stdchar::ch#7 ← mode_stdchar::ch#1
Coalesced [1129] mode_stdchar::i#3 ← mode_stdchar::i#1
Coalesced [1134] print_str_lines::str#11 ← print_str_lines::str#2
Coalesced [1135] print_char_cursor#104 ← print_char_cursor#19
Coalesced [1142] print_char_cursor#107 ← print_char_cursor#1
Coalesced [1147] print_str_lines::str#10 ← print_str_lines::str#0
Not coalescing [1148] print_char_cursor#103 ← print_line_cursor#19
Coalesced [1149] print_line_cursor#103 ← print_line_cursor#19
Coalesced (already) [1150] print_str_lines::str#12 ← print_str_lines::str#0
Coalesced [1151] print_char_cursor#105 ← print_char_cursor#32
Coalesced (already) [1152] print_char_cursor#106 ← print_char_cursor#17
Coalesced [1153] print_line_cursor#104 ← print_line_cursor#17
Coalesced (already) [1158] print_line_cursor#105 ← print_line_cursor#19
Coalesced [1165] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 125 phi equivalence classes
Culled Empty Block (label) menu::@75
Culled Empty Block (label) menu::@74
Culled Empty Block (label) mode_8bppchunkybmm::@14
Culled Empty Block (label) mode_8bppchunkybmm::@15
Culled Empty Block (label) mode_8bppchunkybmm::@16
Culled Empty Block (label) mode_8bppchunkybmm::@13
Culled Empty Block (label) mode_ctrl::@29
Culled Empty Block (label) mode_ctrl::@45
Culled Empty Block (label) mode_ctrl::@44
Culled Empty Block (label) mode_ctrl::@43
Culled Empty Block (label) mode_ctrl::@42
Culled Empty Block (label) mode_ctrl::@41
Culled Empty Block (label) mode_ctrl::@40
Culled Empty Block (label) mode_8bpppixelcell::@19
Culled Empty Block (label) mode_8bpppixelcell::@20
Culled Empty Block (label) mode_8bpppixelcell::@21
Culled Empty Block (label) mode_8bpppixelcell::@17
Culled Empty Block (label) mode_8bpppixelcell::@18
Culled Empty Block (label) mode_8bpppixelcell::@16
Culled Empty Block (label) mode_sixsfred::@21
Culled Empty Block (label) mode_sixsfred::@22
Culled Empty Block (label) mode_sixsfred::@19
Culled Empty Block (label) mode_sixsfred::@20
Culled Empty Block (label) mode_sixsfred::@17
Culled Empty Block (label) mode_sixsfred::@18
Culled Empty Block (label) mode_sixsfred::@16
Culled Empty Block (label) mode_twoplanebitmap::@25
Culled Empty Block (label) mode_twoplanebitmap::@26
Culled Empty Block (label) mode_twoplanebitmap::@23
Culled Empty Block (label) mode_twoplanebitmap::@24
Culled Empty Block (label) mode_twoplanebitmap::@21
Culled Empty Block (label) mode_twoplanebitmap::@22
Culled Empty Block (label) mode_twoplanebitmap::@20
Culled Empty Block (label) mode_sixsfred2::@21
Culled Empty Block (label) mode_sixsfred2::@22
Culled Empty Block (label) mode_sixsfred2::@19
Culled Empty Block (label) mode_sixsfred2::@20
Culled Empty Block (label) mode_sixsfred2::@17
Culled Empty Block (label) mode_sixsfred2::@18
Culled Empty Block (label) mode_sixsfred2::@16
Culled Empty Block (label) mode_hicolmcchar::@9
Culled Empty Block (label) mode_hicolmcchar::@10
Culled Empty Block (label) mode_hicolmcchar::@8
Culled Empty Block (label) mode_hicolecmchar::@9
Culled Empty Block (label) mode_hicolecmchar::@10
Culled Empty Block (label) mode_hicolecmchar::@8
Culled Empty Block (label) mode_hicolstdchar::@9
Culled Empty Block (label) mode_hicolstdchar::@10
Culled Empty Block (label) mode_hicolstdchar::@8
Culled Empty Block (label) mode_stdbitmap::@16
Culled Empty Block (label) mode_stdbitmap::@14
Culled Empty Block (label) mode_stdbitmap::@15
Culled Empty Block (label) mode_stdbitmap::@13
Culled Empty Block (label) bitmap_line_xdyi::@6
Culled Empty Block (label) bitmap_line_xdyi::@7
Culled Empty Block (label) bitmap_line_ydxi::@6
Culled Empty Block (label) bitmap_line_ydxi::@7
Culled Empty Block (label) bitmap_line_xdyd::@6
Culled Empty Block (label) bitmap_line_xdyd::@7
Culled Empty Block (label) bitmap_line_ydxd::@6
Culled Empty Block (label) bitmap_line_ydxd::@7
Culled Empty Block (label) bitmap_clear::@5
Culled Empty Block (label) bitmap_clear::@6
Culled Empty Block (label) bitmap_init::@5
Culled Empty Block (label) bitmap_init::@11
Culled Empty Block (label) bitmap_init::@12
Culled Empty Block (label) bitmap_init::@9
Culled Empty Block (label) mode_mcchar::@9
Culled Empty Block (label) mode_mcchar::@10
Culled Empty Block (label) mode_mcchar::@8
Culled Empty Block (label) mode_ecmchar::@9
Culled Empty Block (label) mode_ecmchar::@10
Culled Empty Block (label) mode_ecmchar::@8
Culled Empty Block (label) mode_stdchar::@9
Culled Empty Block (label) mode_stdchar::@10
Culled Empty Block (label) mode_stdchar::@8
Culled Empty Block (label) print_str_lines::@12
Culled Empty Block (label) print_str_lines::@13
Culled Empty Block (label) print_str_lines::@14
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_cls::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @54
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of menu::@47
Adding NOP phi() at start of menu::@48
Adding NOP phi() at start of menu::@4
Adding NOP phi() at start of menu::@22
Adding NOP phi() at start of menu::@6
Adding NOP phi() at start of menu::@24
Adding NOP phi() at start of menu::@7
Adding NOP phi() at start of menu::@26
Adding NOP phi() at start of menu::@8
Adding NOP phi() at start of menu::@28
Adding NOP phi() at start of menu::@9
Adding NOP phi() at start of menu::@30
Adding NOP phi() at start of menu::@10
Adding NOP phi() at start of menu::@32
Adding NOP phi() at start of menu::@11
Adding NOP phi() at start of menu::@34
Adding NOP phi() at start of menu::@12
Adding NOP phi() at start of menu::@36
Adding NOP phi() at start of menu::@13
Adding NOP phi() at start of menu::@38
Adding NOP phi() at start of menu::@14
Adding NOP phi() at start of menu::@40
Adding NOP phi() at start of menu::@15
Adding NOP phi() at start of menu::@42
Adding NOP phi() at start of menu::@16
Adding NOP phi() at start of menu::@44
Adding NOP phi() at start of mode_8bppchunkybmm::@5
Adding NOP phi() at start of mode_8bppchunkybmm::@8
Adding NOP phi() at start of mode_8bppchunkybmm::@11
Adding NOP phi() at start of mode_ctrl::@6
Adding NOP phi() at start of mode_ctrl::@46
Adding NOP phi() at start of mode_sixsfred::@14
Adding NOP phi() at start of mode_twoplanebitmap::@18
Adding NOP phi() at start of mode_sixsfred2::@14
Adding NOP phi() at start of mode_hicolmcchar::@6
Adding NOP phi() at start of mode_hicolecmchar::@6
Adding NOP phi() at start of mode_hicolstdchar::@6
Adding NOP phi() at start of mode_stdbitmap::@7
Adding NOP phi() at start of mode_stdbitmap::@9
Adding NOP phi() at start of mode_stdbitmap::@8
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@10
Adding NOP phi() at start of mode_mcchar::@6
Adding NOP phi() at start of mode_ecmchar::@6
Adding NOP phi() at start of mode_stdchar::@6
Adding NOP phi() at start of print_str_lines
Adding NOP phi() at start of print_str_lines::@9
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_set_screen

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@54
@54: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @54
  [3] phi()
main: scope:[main]  from @54
  asm { sei  }
  [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0
  [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [7] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0
  to:main::@2
main::@2: scope:[main]  from main main::@2
  [8] phi()
  [9] call menu 
  to:main::@2
menu: scope:[menu]  from main::@2
  [10] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) menu::CHARSET#0/(dword/signed dword) $10000
  [11] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
  [12] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
  [13] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [14] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  [15] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) menu::CHARSET#0/(word/signed word/dword/signed dword) $4000
  [16] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [17] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0
  [18] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) menu::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) menu::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
  to:menu::@1
menu::@1: scope:[menu]  from menu menu::@1
  [19] (byte) menu::i#2 ← phi( menu/(byte/signed byte/word/signed word/dword/signed dword) 0 menu::@1/(byte) menu::i#1 )
  [20] *((const byte*) DTV_PALETTE#0 + (byte) menu::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) menu::i#2)
  [21] (byte) menu::i#1 ← ++ (byte) menu::i#2
  [22] if((byte) menu::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto menu::@1
  to:menu::@2
menu::@2: scope:[menu]  from menu::@1 menu::@2
  [23] (byte*) menu::c#2 ← phi( menu::@1/(const byte*) COLS#0 menu::@2/(byte*) menu::c#1 )
  [24] *((byte*) menu::c#2) ← (const byte) LIGHT_GREEN#0
  [25] (byte*) menu::c#1 ← ++ (byte*) menu::c#2
  [26] if((byte*) menu::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) $3e8) goto menu::@2
  to:menu::@19
menu::@19: scope:[menu]  from menu::@2
  [27] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [28] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [29] call print_set_screen 
  to:menu::@47
menu::@47: scope:[menu]  from menu::@19
  [30] phi()
  [31] call print_cls 
  to:menu::@48
menu::@48: scope:[menu]  from menu::@47
  [32] phi()
  [33] call print_str_lines 
  to:menu::@4
menu::@4: scope:[menu]  from menu::@48 menu::@71
  [34] phi()
  [35] call keyboard_key_pressed 
  [36] (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#0
  to:menu::@50
menu::@50: scope:[menu]  from menu::@4
  [37] (byte~) menu::$29 ← (byte) keyboard_key_pressed::return#2
  [38] if((byte~) menu::$29==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@6
  to:menu::@22
menu::@22: scope:[menu]  from menu::@50
  [39] phi()
  [40] call mode_stdchar 
  to:menu::@return
menu::@return: scope:[menu]  from menu::@22 menu::@24 menu::@26 menu::@28 menu::@30 menu::@32 menu::@34 menu::@36 menu::@38 menu::@40 menu::@42 menu::@44
  [41] return 
  to:@return
menu::@6: scope:[menu]  from menu::@50
  [42] phi()
  [43] call keyboard_key_pressed 
  [44] (byte) keyboard_key_pressed::return#24 ← (byte) keyboard_key_pressed::return#0
  to:menu::@51
menu::@51: scope:[menu]  from menu::@6
  [45] (byte~) menu::$33 ← (byte) keyboard_key_pressed::return#24
  [46] if((byte~) menu::$33==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@7
  to:menu::@24
menu::@24: scope:[menu]  from menu::@51
  [47] phi()
  [48] call mode_ecmchar 
  to:menu::@return
menu::@7: scope:[menu]  from menu::@51
  [49] phi()
  [50] call keyboard_key_pressed 
  [51] (byte) keyboard_key_pressed::return#25 ← (byte) keyboard_key_pressed::return#0
  to:menu::@53
menu::@53: scope:[menu]  from menu::@7
  [52] (byte~) menu::$37 ← (byte) keyboard_key_pressed::return#25
  [53] if((byte~) menu::$37==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@8
  to:menu::@26
menu::@26: scope:[menu]  from menu::@53
  [54] phi()
  [55] call mode_mcchar 
  to:menu::@return
menu::@8: scope:[menu]  from menu::@53
  [56] phi()
  [57] call keyboard_key_pressed 
  [58] (byte) keyboard_key_pressed::return#26 ← (byte) keyboard_key_pressed::return#0
  to:menu::@55
menu::@55: scope:[menu]  from menu::@8
  [59] (byte~) menu::$41 ← (byte) keyboard_key_pressed::return#26
  [60] if((byte~) menu::$41==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@9
  to:menu::@28
menu::@28: scope:[menu]  from menu::@55
  [61] phi()
  [62] call mode_stdbitmap 
  to:menu::@return
menu::@9: scope:[menu]  from menu::@55
  [63] phi()
  [64] call keyboard_key_pressed 
  [65] (byte) keyboard_key_pressed::return#27 ← (byte) keyboard_key_pressed::return#0
  to:menu::@57
menu::@57: scope:[menu]  from menu::@9
  [66] (byte~) menu::$45 ← (byte) keyboard_key_pressed::return#27
  [67] if((byte~) menu::$45==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@10
  to:menu::@30
menu::@30: scope:[menu]  from menu::@57
  [68] phi()
  [69] call mode_hicolstdchar 
  to:menu::@return
menu::@10: scope:[menu]  from menu::@57
  [70] phi()
  [71] call keyboard_key_pressed 
  [72] (byte) keyboard_key_pressed::return#28 ← (byte) keyboard_key_pressed::return#0
  to:menu::@59
menu::@59: scope:[menu]  from menu::@10
  [73] (byte~) menu::$49 ← (byte) keyboard_key_pressed::return#28
  [74] if((byte~) menu::$49==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@11
  to:menu::@32
menu::@32: scope:[menu]  from menu::@59
  [75] phi()
  [76] call mode_hicolecmchar 
  to:menu::@return
menu::@11: scope:[menu]  from menu::@59
  [77] phi()
  [78] call keyboard_key_pressed 
  [79] (byte) keyboard_key_pressed::return#29 ← (byte) keyboard_key_pressed::return#0
  to:menu::@61
menu::@61: scope:[menu]  from menu::@11
  [80] (byte~) menu::$53 ← (byte) keyboard_key_pressed::return#29
  [81] if((byte~) menu::$53==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@12
  to:menu::@34
menu::@34: scope:[menu]  from menu::@61
  [82] phi()
  [83] call mode_hicolmcchar 
  to:menu::@return
menu::@12: scope:[menu]  from menu::@61
  [84] phi()
  [85] call keyboard_key_pressed 
  [86] (byte) keyboard_key_pressed::return#30 ← (byte) keyboard_key_pressed::return#0
  to:menu::@63
menu::@63: scope:[menu]  from menu::@12
  [87] (byte~) menu::$57 ← (byte) keyboard_key_pressed::return#30
  [88] if((byte~) menu::$57==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@13
  to:menu::@36
menu::@36: scope:[menu]  from menu::@63
  [89] phi()
  [90] call mode_sixsfred2 
  to:menu::@return
menu::@13: scope:[menu]  from menu::@63
  [91] phi()
  [92] call keyboard_key_pressed 
  [93] (byte) keyboard_key_pressed::return#10 ← (byte) keyboard_key_pressed::return#0
  to:menu::@65
menu::@65: scope:[menu]  from menu::@13
  [94] (byte~) menu::$61 ← (byte) keyboard_key_pressed::return#10
  [95] if((byte~) menu::$61==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@14
  to:menu::@38
menu::@38: scope:[menu]  from menu::@65
  [96] phi()
  [97] call mode_twoplanebitmap 
  to:menu::@return
menu::@14: scope:[menu]  from menu::@65
  [98] phi()
  [99] call keyboard_key_pressed 
  [100] (byte) keyboard_key_pressed::return#11 ← (byte) keyboard_key_pressed::return#0
  to:menu::@67
menu::@67: scope:[menu]  from menu::@14
  [101] (byte~) menu::$65 ← (byte) keyboard_key_pressed::return#11
  [102] if((byte~) menu::$65==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@15
  to:menu::@40
menu::@40: scope:[menu]  from menu::@67
  [103] phi()
  [104] call mode_sixsfred 
  to:menu::@return
menu::@15: scope:[menu]  from menu::@67
  [105] phi()
  [106] call keyboard_key_pressed 
  [107] (byte) keyboard_key_pressed::return#12 ← (byte) keyboard_key_pressed::return#0
  to:menu::@69
menu::@69: scope:[menu]  from menu::@15
  [108] (byte~) menu::$69 ← (byte) keyboard_key_pressed::return#12
  [109] if((byte~) menu::$69==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@16
  to:menu::@42
menu::@42: scope:[menu]  from menu::@69
  [110] phi()
  [111] call mode_8bpppixelcell 
  to:menu::@return
menu::@16: scope:[menu]  from menu::@69
  [112] phi()
  [113] call keyboard_key_pressed 
  [114] (byte) keyboard_key_pressed::return#13 ← (byte) keyboard_key_pressed::return#0
  to:menu::@71
menu::@71: scope:[menu]  from menu::@16
  [115] (byte~) menu::$73 ← (byte) keyboard_key_pressed::return#13
  [116] if((byte~) menu::$73==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@4
  to:menu::@44
menu::@44: scope:[menu]  from menu::@71
  [117] phi()
  [118] call mode_8bppchunkybmm 
  to:menu::@return
mode_8bppchunkybmm: scope:[mode_8bppchunkybmm]  from menu::@44
  [119] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_COLORRAM_OFF#0
  [120] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [121] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0
  [122] *((const byte*) DTV_PLANEB_START_LO#0) ← <<(const dword) mode_8bppchunkybmm::PLANEB#0
  [123] *((const byte*) DTV_PLANEB_START_MI#0) ← ><(const dword) mode_8bppchunkybmm::PLANEB#0
  [124] *((const byte*) DTV_PLANEB_START_HI#0) ← <>(const dword) mode_8bppchunkybmm::PLANEB#0
  [125] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 8
  [126] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [127] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [128] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_8bppchunkybmm::@1
mode_8bppchunkybmm::@1: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm mode_8bppchunkybmm::@1
  [129] (byte) mode_8bppchunkybmm::i#2 ← phi( mode_8bppchunkybmm/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_8bppchunkybmm::@1/(byte) mode_8bppchunkybmm::i#1 )
  [130] *((const byte*) DTV_PALETTE#0 + (byte) mode_8bppchunkybmm::i#2) ← (byte) mode_8bppchunkybmm::i#2
  [131] (byte) mode_8bppchunkybmm::i#1 ← ++ (byte) mode_8bppchunkybmm::i#2
  [132] if((byte) mode_8bppchunkybmm::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_8bppchunkybmm::@1
  to:mode_8bppchunkybmm::@5
mode_8bppchunkybmm::@5: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@1
  [133] phi()
  [134] call dtvSetCpuBankSegment1 
  to:mode_8bppchunkybmm::@2
mode_8bppchunkybmm::@2: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@5 mode_8bppchunkybmm::@7
  [135] (byte) mode_8bppchunkybmm::gfxbCpuBank#7 ← phi( mode_8bppchunkybmm::@7/(byte) mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::@5/++((byte))(const dword) mode_8bppchunkybmm::PLANEB#0/(word/signed word/dword/signed dword) $4000 )
  [135] (byte) mode_8bppchunkybmm::y#6 ← phi( mode_8bppchunkybmm::@7/(byte) mode_8bppchunkybmm::y#1 mode_8bppchunkybmm::@5/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [135] (byte*) mode_8bppchunkybmm::gfxb#5 ← phi( mode_8bppchunkybmm::@7/(byte*) mode_8bppchunkybmm::gfxb#1 mode_8bppchunkybmm::@5/((byte*))(word/signed word/dword/signed dword) $4000 )
  to:mode_8bppchunkybmm::@3
mode_8bppchunkybmm::@3: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@2 mode_8bppchunkybmm::@4
  [136] (byte) mode_8bppchunkybmm::gfxbCpuBank#4 ← phi( mode_8bppchunkybmm::@2/(byte) mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::@4/(byte) mode_8bppchunkybmm::gfxbCpuBank#8 )
  [136] (word) mode_8bppchunkybmm::x#2 ← phi( mode_8bppchunkybmm::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_8bppchunkybmm::@4/(word) mode_8bppchunkybmm::x#1 )
  [136] (byte*) mode_8bppchunkybmm::gfxb#3 ← phi( mode_8bppchunkybmm::@2/(byte*) mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::@4/(byte*) mode_8bppchunkybmm::gfxb#1 )
  [137] if((byte*) mode_8bppchunkybmm::gfxb#3!=(word/dword/signed dword) $8000) goto mode_8bppchunkybmm::@4
  to:mode_8bppchunkybmm::@6
mode_8bppchunkybmm::@6: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@3
  [138] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) mode_8bppchunkybmm::gfxbCpuBank#4
  [139] call dtvSetCpuBankSegment1 
  to:mode_8bppchunkybmm::@10
mode_8bppchunkybmm::@10: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@6
  [140] (byte) mode_8bppchunkybmm::gfxbCpuBank#2 ← ++ (byte) mode_8bppchunkybmm::gfxbCpuBank#4
  to:mode_8bppchunkybmm::@4
mode_8bppchunkybmm::@4: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@10 mode_8bppchunkybmm::@3
  [141] (byte) mode_8bppchunkybmm::gfxbCpuBank#8 ← phi( mode_8bppchunkybmm::@10/(byte) mode_8bppchunkybmm::gfxbCpuBank#2 mode_8bppchunkybmm::@3/(byte) mode_8bppchunkybmm::gfxbCpuBank#4 )
  [141] (byte*) mode_8bppchunkybmm::gfxb#4 ← phi( mode_8bppchunkybmm::@10/((byte*))(word/signed word/dword/signed dword) $4000 mode_8bppchunkybmm::@3/(byte*) mode_8bppchunkybmm::gfxb#3 )
  [142] (word~) mode_8bppchunkybmm::$23 ← (word) mode_8bppchunkybmm::x#2 + (byte) mode_8bppchunkybmm::y#6
  [143] (byte) mode_8bppchunkybmm::c#0 ← ((byte)) (word~) mode_8bppchunkybmm::$23
  [144] *((byte*) mode_8bppchunkybmm::gfxb#4) ← (byte) mode_8bppchunkybmm::c#0
  [145] (byte*) mode_8bppchunkybmm::gfxb#1 ← ++ (byte*) mode_8bppchunkybmm::gfxb#4
  [146] (word) mode_8bppchunkybmm::x#1 ← ++ (word) mode_8bppchunkybmm::x#2
  [147] if((word) mode_8bppchunkybmm::x#1!=(word/signed word/dword/signed dword) $140) goto mode_8bppchunkybmm::@3
  to:mode_8bppchunkybmm::@7
mode_8bppchunkybmm::@7: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@4
  [148] (byte) mode_8bppchunkybmm::y#1 ← ++ (byte) mode_8bppchunkybmm::y#6
  [149] if((byte) mode_8bppchunkybmm::y#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_8bppchunkybmm::@2
  to:mode_8bppchunkybmm::@8
mode_8bppchunkybmm::@8: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@7
  [150] phi()
  [151] call dtvSetCpuBankSegment1 
  to:mode_8bppchunkybmm::@11
mode_8bppchunkybmm::@11: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@8
  [152] phi()
  [153] call mode_ctrl 
  to:mode_8bppchunkybmm::@return
mode_8bppchunkybmm::@return: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@11
  [154] return 
  to:@return
mode_ctrl: scope:[mode_ctrl]  from mode_8bppchunkybmm::@11 mode_8bpppixelcell::@14 mode_ecmchar::@6 mode_hicolecmchar::@6 mode_hicolmcchar::@6 mode_hicolstdchar::@6 mode_mcchar::@6 mode_sixsfred2::@14 mode_sixsfred::@14 mode_stdbitmap::@8 mode_stdchar::@6 mode_twoplanebitmap::@18
  [155] (byte) dtv_control#145 ← phi( mode_8bppchunkybmm::@11/(const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_COLORRAM_OFF#0 mode_8bpppixelcell::@14/(const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0 mode_ecmchar::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_hicolecmchar::@6/(const byte) DTV_HIGHCOLOR#0 mode_hicolmcchar::@6/(const byte) DTV_HIGHCOLOR#0 mode_hicolstdchar::@6/(const byte) DTV_HIGHCOLOR#0 mode_mcchar::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_sixsfred2::@14/(const byte) DTV_LINEAR#0 mode_sixsfred::@14/(const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 mode_stdbitmap::@8/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_stdchar::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_twoplanebitmap::@18/(const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 )
  to:mode_ctrl::@1
mode_ctrl::@1: scope:[mode_ctrl]  from mode_ctrl mode_ctrl::@14 mode_ctrl::@30
  [156] (byte) dtv_control#114 ← phi( mode_ctrl/(byte) dtv_control#145 mode_ctrl::@30/(byte) dtv_control#17 )
  to:mode_ctrl::@4
mode_ctrl::@4: scope:[mode_ctrl]  from mode_ctrl::@1 mode_ctrl::@4
  [157] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto mode_ctrl::@4
  to:mode_ctrl::@6
mode_ctrl::@6: scope:[mode_ctrl]  from mode_ctrl::@4
  [158] phi()
  [159] call keyboard_key_pressed 
  [160] (byte) keyboard_key_pressed::return#14 ← (byte) keyboard_key_pressed::return#0
  to:mode_ctrl::@32
mode_ctrl::@32: scope:[mode_ctrl]  from mode_ctrl::@6
  [161] (byte~) mode_ctrl::$1 ← (byte) keyboard_key_pressed::return#14
  [162] if((byte~) mode_ctrl::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@7
  to:mode_ctrl::@return
mode_ctrl::@return: scope:[mode_ctrl]  from mode_ctrl::@32
  [163] return 
  to:@return
mode_ctrl::@7: scope:[mode_ctrl]  from mode_ctrl::@32
  [164] (byte) mode_ctrl::ctrl#0 ← (byte) dtv_control#114
  [165] call keyboard_key_pressed 
  [166] (byte) keyboard_key_pressed::return#15 ← (byte) keyboard_key_pressed::return#0
  to:mode_ctrl::@33
mode_ctrl::@33: scope:[mode_ctrl]  from mode_ctrl::@7
  [167] (byte~) mode_ctrl::$4 ← (byte) keyboard_key_pressed::return#15
  [168] if((byte~) mode_ctrl::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@8
  to:mode_ctrl::@23
mode_ctrl::@23: scope:[mode_ctrl]  from mode_ctrl::@33
  [169] (byte) mode_ctrl::ctrl#1 ← (byte) mode_ctrl::ctrl#0 | (const byte) DTV_LINEAR#0
  to:mode_ctrl::@8
mode_ctrl::@8: scope:[mode_ctrl]  from mode_ctrl::@23 mode_ctrl::@33
  [170] (byte) mode_ctrl::ctrl#17 ← phi( mode_ctrl::@23/(byte) mode_ctrl::ctrl#1 mode_ctrl::@33/(byte) mode_ctrl::ctrl#0 )
  [171] call keyboard_key_pressed 
  [172] (byte) keyboard_key_pressed::return#16 ← (byte) keyboard_key_pressed::return#0
  to:mode_ctrl::@34
mode_ctrl::@34: scope:[mode_ctrl]  from mode_ctrl::@8
  [173] (byte~) mode_ctrl::$8 ← (byte) keyboard_key_pressed::return#16
  [174] if((byte~) mode_ctrl::$8==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@9
  to:mode_ctrl::@24
mode_ctrl::@24: scope:[mode_ctrl]  from mode_ctrl::@34
  [175] (byte) mode_ctrl::ctrl#2 ← (byte) mode_ctrl::ctrl#17 | (const byte) DTV_HIGHCOLOR#0
  to:mode_ctrl::@9
mode_ctrl::@9: scope:[mode_ctrl]  from mode_ctrl::@24 mode_ctrl::@34
  [176] (byte) mode_ctrl::ctrl#10 ← phi( mode_ctrl::@24/(byte) mode_ctrl::ctrl#2 mode_ctrl::@34/(byte) mode_ctrl::ctrl#17 )
  [177] call keyboard_key_pressed 
  [178] (byte) keyboard_key_pressed::return#17 ← (byte) keyboard_key_pressed::return#0
  to:mode_ctrl::@35
mode_ctrl::@35: scope:[mode_ctrl]  from mode_ctrl::@9
  [179] (byte~) mode_ctrl::$12 ← (byte) keyboard_key_pressed::return#17
  [180] if((byte~) mode_ctrl::$12==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@10
  to:mode_ctrl::@25
mode_ctrl::@25: scope:[mode_ctrl]  from mode_ctrl::@35
  [181] (byte) mode_ctrl::ctrl#3 ← (byte) mode_ctrl::ctrl#10 | (const byte) DTV_OVERSCAN#0
  to:mode_ctrl::@10
mode_ctrl::@10: scope:[mode_ctrl]  from mode_ctrl::@25 mode_ctrl::@35
  [182] (byte) mode_ctrl::ctrl#11 ← phi( mode_ctrl::@25/(byte) mode_ctrl::ctrl#3 mode_ctrl::@35/(byte) mode_ctrl::ctrl#10 )
  [183] call keyboard_key_pressed 
  [184] (byte) keyboard_key_pressed::return#18 ← (byte) keyboard_key_pressed::return#0
  to:mode_ctrl::@36
mode_ctrl::@36: scope:[mode_ctrl]  from mode_ctrl::@10
  [185] (byte~) mode_ctrl::$16 ← (byte) keyboard_key_pressed::return#18
  [186] if((byte~) mode_ctrl::$16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@11
  to:mode_ctrl::@26
mode_ctrl::@26: scope:[mode_ctrl]  from mode_ctrl::@36
  [187] (byte) mode_ctrl::ctrl#4 ← (byte) mode_ctrl::ctrl#11 | (const byte) DTV_BORDER_OFF#0
  to:mode_ctrl::@11
mode_ctrl::@11: scope:[mode_ctrl]  from mode_ctrl::@26 mode_ctrl::@36
  [188] (byte) mode_ctrl::ctrl#12 ← phi( mode_ctrl::@26/(byte) mode_ctrl::ctrl#4 mode_ctrl::@36/(byte) mode_ctrl::ctrl#11 )
  [189] call keyboard_key_pressed 
  [190] (byte) keyboard_key_pressed::return#19 ← (byte) keyboard_key_pressed::return#0
  to:mode_ctrl::@37
mode_ctrl::@37: scope:[mode_ctrl]  from mode_ctrl::@11
  [191] (byte~) mode_ctrl::$20 ← (byte) keyboard_key_pressed::return#19
  [192] if((byte~) mode_ctrl::$20==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@12
  to:mode_ctrl::@27
mode_ctrl::@27: scope:[mode_ctrl]  from mode_ctrl::@37
  [193] (byte) mode_ctrl::ctrl#5 ← (byte) mode_ctrl::ctrl#12 | (const byte) DTV_CHUNKY#0
  to:mode_ctrl::@12
mode_ctrl::@12: scope:[mode_ctrl]  from mode_ctrl::@27 mode_ctrl::@37
  [194] (byte) mode_ctrl::ctrl#13 ← phi( mode_ctrl::@27/(byte) mode_ctrl::ctrl#5 mode_ctrl::@37/(byte) mode_ctrl::ctrl#12 )
  [195] call keyboard_key_pressed 
  [196] (byte) keyboard_key_pressed::return#20 ← (byte) keyboard_key_pressed::return#0
  to:mode_ctrl::@38
mode_ctrl::@38: scope:[mode_ctrl]  from mode_ctrl::@12
  [197] (byte~) mode_ctrl::$24 ← (byte) keyboard_key_pressed::return#20
  [198] if((byte~) mode_ctrl::$24==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@13
  to:mode_ctrl::@28
mode_ctrl::@28: scope:[mode_ctrl]  from mode_ctrl::@38
  [199] (byte) mode_ctrl::ctrl#6 ← (byte) mode_ctrl::ctrl#13 | (const byte) DTV_COLORRAM_OFF#0
  to:mode_ctrl::@13
mode_ctrl::@13: scope:[mode_ctrl]  from mode_ctrl::@28 mode_ctrl::@38
  [200] (byte) mode_ctrl::ctrl#22 ← phi( mode_ctrl::@28/(byte) mode_ctrl::ctrl#6 mode_ctrl::@38/(byte) mode_ctrl::ctrl#13 )
  [201] call keyboard_key_pressed 
  [202] (byte) keyboard_key_pressed::return#21 ← (byte) keyboard_key_pressed::return#0
  to:mode_ctrl::@39
mode_ctrl::@39: scope:[mode_ctrl]  from mode_ctrl::@13
  [203] (byte~) mode_ctrl::$28 ← (byte) keyboard_key_pressed::return#21
  [204] if((byte~) mode_ctrl::$28==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@46
  to:mode_ctrl::@14
mode_ctrl::@14: scope:[mode_ctrl]  from mode_ctrl::@39 mode_ctrl::@46
  [205] (byte) mode_ctrl::ctrl#14 ← phi( mode_ctrl::@39/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_ctrl::@46/(byte) mode_ctrl::ctrl#22 )
  [206] if((byte) mode_ctrl::ctrl#14==(byte) dtv_control#114) goto mode_ctrl::@1
  to:mode_ctrl::@30
mode_ctrl::@30: scope:[mode_ctrl]  from mode_ctrl::@14
  [207] (byte) dtv_control#17 ← (byte) mode_ctrl::ctrl#14
  [208] *((const byte*) DTV_CONTROL#0) ← (byte) mode_ctrl::ctrl#14
  [209] *((const byte*) BORDERCOL#0) ← (byte) mode_ctrl::ctrl#14
  to:mode_ctrl::@1
mode_ctrl::@46: scope:[mode_ctrl]  from mode_ctrl::@39
  [210] phi()
  to:mode_ctrl::@14
keyboard_key_pressed: scope:[keyboard_key_pressed]  from menu::@10 menu::@11 menu::@12 menu::@13 menu::@14 menu::@15 menu::@16 menu::@4 menu::@6 menu::@7 menu::@8 menu::@9 mode_ctrl::@10 mode_ctrl::@11 mode_ctrl::@12 mode_ctrl::@13 mode_ctrl::@6 mode_ctrl::@7 mode_ctrl::@8 mode_ctrl::@9
  [211] (byte) keyboard_key_pressed::key#20 ← phi( menu::@10/(const byte) KEY_7#0 menu::@11/(const byte) KEY_8#0 menu::@12/(const byte) KEY_A#0 menu::@13/(const byte) KEY_B#0 menu::@14/(const byte) KEY_C#0 menu::@15/(const byte) KEY_D#0 menu::@16/(const byte) KEY_E#0 menu::@4/(const byte) KEY_1#0 menu::@6/(const byte) KEY_2#0 menu::@7/(const byte) KEY_3#0 menu::@8/(const byte) KEY_4#0 menu::@9/(const byte) KEY_6#0 mode_ctrl::@10/(const byte) KEY_B#0 mode_ctrl::@11/(const byte) KEY_U#0 mode_ctrl::@12/(const byte) KEY_C#0 mode_ctrl::@13/(const byte) KEY_0#0 mode_ctrl::@6/(const byte) KEY_SPACE#0 mode_ctrl::@7/(const byte) KEY_L#0 mode_ctrl::@8/(const byte) KEY_H#0 mode_ctrl::@9/(const byte) KEY_O#0 )
  [212] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#20 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [213] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#20 >> (byte/signed byte/word/signed word/dword/signed dword) 3
  [214] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_key_pressed::rowidx#0
  [215] call keyboard_matrix_read 
  [216] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_key_pressed::@2
keyboard_key_pressed::@2: scope:[keyboard_key_pressed]  from keyboard_key_pressed
  [217] (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#2
  [218] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0)
  to:keyboard_key_pressed::@return
keyboard_key_pressed::@return: scope:[keyboard_key_pressed]  from keyboard_key_pressed::@2
  [219] return 
  to:@return
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_key_pressed
  [220] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0)
  [221] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [222] return 
  to:@return
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from mode_8bppchunkybmm::@5 mode_8bppchunkybmm::@6 mode_8bppchunkybmm::@8
  [223] (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 ← phi( mode_8bppchunkybmm::@5/((byte))(const dword) mode_8bppchunkybmm::PLANEB#0/(word/signed word/dword/signed dword) $4000 mode_8bppchunkybmm::@6/(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 mode_8bppchunkybmm::@8/((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 )
  [224] *((const byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#3
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  [226] return 
  to:@return
mode_8bpppixelcell: scope:[mode_8bpppixelcell]  from menu::@42
  [227] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0
  [228] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [229] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0
  [230] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_8bpppixelcell::PLANEA#0
  [231] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_8bpppixelcell::PLANEA#0
  [232] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [233] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  [234] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [235] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [236] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_8bpppixelcell::PLANEB#0
  [237] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_8bpppixelcell::PLANEB#0
  [238] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [239] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [240] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [241] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [242] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_8bpppixelcell::@1
mode_8bpppixelcell::@1: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell mode_8bpppixelcell::@1
  [243] (byte) mode_8bpppixelcell::i#2 ← phi( mode_8bpppixelcell/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_8bpppixelcell::@1/(byte) mode_8bpppixelcell::i#1 )
  [244] *((const byte*) DTV_PALETTE#0 + (byte) mode_8bpppixelcell::i#2) ← (byte) mode_8bpppixelcell::i#2
  [245] (byte) mode_8bpppixelcell::i#1 ← ++ (byte) mode_8bpppixelcell::i#2
  [246] if((byte) mode_8bpppixelcell::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_8bpppixelcell::@1
  to:mode_8bpppixelcell::@2
mode_8bpppixelcell::@2: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@1 mode_8bpppixelcell::@9
  [247] (byte*) mode_8bpppixelcell::gfxa#3 ← phi( mode_8bpppixelcell::@1/(const byte*) mode_8bpppixelcell::PLANEA#0 mode_8bpppixelcell::@9/(byte*) mode_8bpppixelcell::gfxa#1 )
  [247] (byte) mode_8bpppixelcell::ay#4 ← phi( mode_8bpppixelcell::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_8bpppixelcell::@9/(byte) mode_8bpppixelcell::ay#1 )
  to:mode_8bpppixelcell::@3
mode_8bpppixelcell::@3: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@2 mode_8bpppixelcell::@3
  [248] (byte*) mode_8bpppixelcell::gfxa#2 ← phi( mode_8bpppixelcell::@2/(byte*) mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::@3/(byte*) mode_8bpppixelcell::gfxa#1 )
  [248] (byte) mode_8bpppixelcell::ax#2 ← phi( mode_8bpppixelcell::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_8bpppixelcell::@3/(byte) mode_8bpppixelcell::ax#1 )
  [249] (byte~) mode_8bpppixelcell::$13 ← (byte) mode_8bpppixelcell::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [250] (byte~) mode_8bpppixelcell::$14 ← (byte~) mode_8bpppixelcell::$13 << (byte/signed byte/word/signed word/dword/signed dword) 4
  [251] (byte~) mode_8bpppixelcell::$15 ← (byte) mode_8bpppixelcell::ax#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [252] (byte~) mode_8bpppixelcell::$16 ← (byte~) mode_8bpppixelcell::$14 | (byte~) mode_8bpppixelcell::$15
  [253] *((byte*) mode_8bpppixelcell::gfxa#2) ← (byte~) mode_8bpppixelcell::$16
  [254] (byte*) mode_8bpppixelcell::gfxa#1 ← ++ (byte*) mode_8bpppixelcell::gfxa#2
  [255] (byte) mode_8bpppixelcell::ax#1 ← ++ (byte) mode_8bpppixelcell::ax#2
  [256] if((byte) mode_8bpppixelcell::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_8bpppixelcell::@3
  to:mode_8bpppixelcell::@9
mode_8bpppixelcell::@9: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@3
  [257] (byte) mode_8bpppixelcell::ay#1 ← ++ (byte) mode_8bpppixelcell::ay#4
  [258] if((byte) mode_8bpppixelcell::ay#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_8bpppixelcell::@2
  to:mode_8bpppixelcell::@10
mode_8bpppixelcell::@10: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@9
  [259] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0
  to:mode_8bpppixelcell::@4
mode_8bpppixelcell::@4: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@10 mode_8bpppixelcell::@13
  [260] (byte) mode_8bpppixelcell::ch#8 ← phi( mode_8bpppixelcell::@10/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_8bpppixelcell::@13/(byte) mode_8bpppixelcell::ch#1 )
  [260] (byte) mode_8bpppixelcell::col#7 ← phi( mode_8bpppixelcell::@10/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_8bpppixelcell::@13/(byte) mode_8bpppixelcell::col#1 )
  [260] (byte*) mode_8bpppixelcell::gfxb#7 ← phi( mode_8bpppixelcell::@10/(const byte*) mode_8bpppixelcell::PLANEB#0 mode_8bpppixelcell::@13/(byte*) mode_8bpppixelcell::gfxb#1 )
  [260] (byte*) mode_8bpppixelcell::chargen#4 ← phi( mode_8bpppixelcell::@10/((byte*))(word/dword/signed dword) $d000 mode_8bpppixelcell::@13/(byte*) mode_8bpppixelcell::chargen#1 )
  to:mode_8bpppixelcell::@5
mode_8bpppixelcell::@5: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@12 mode_8bpppixelcell::@4
  [261] (byte) mode_8bpppixelcell::cr#6 ← phi( mode_8bpppixelcell::@12/(byte) mode_8bpppixelcell::cr#1 mode_8bpppixelcell::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [261] (byte) mode_8bpppixelcell::col#5 ← phi( mode_8bpppixelcell::@12/(byte) mode_8bpppixelcell::col#1 mode_8bpppixelcell::@4/(byte) mode_8bpppixelcell::col#7 )
  [261] (byte*) mode_8bpppixelcell::gfxb#5 ← phi( mode_8bpppixelcell::@12/(byte*) mode_8bpppixelcell::gfxb#1 mode_8bpppixelcell::@4/(byte*) mode_8bpppixelcell::gfxb#7 )
  [261] (byte*) mode_8bpppixelcell::chargen#2 ← phi( mode_8bpppixelcell::@12/(byte*) mode_8bpppixelcell::chargen#1 mode_8bpppixelcell::@4/(byte*) mode_8bpppixelcell::chargen#4 )
  [262] (byte) mode_8bpppixelcell::bits#0 ← *((byte*) mode_8bpppixelcell::chargen#2)
  [263] (byte*) mode_8bpppixelcell::chargen#1 ← ++ (byte*) mode_8bpppixelcell::chargen#2
  to:mode_8bpppixelcell::@6
mode_8bpppixelcell::@6: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@5 mode_8bpppixelcell::@7
  [264] (byte) mode_8bpppixelcell::cp#2 ← phi( mode_8bpppixelcell::@5/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_8bpppixelcell::@7/(byte) mode_8bpppixelcell::cp#1 )
  [264] (byte) mode_8bpppixelcell::col#2 ← phi( mode_8bpppixelcell::@5/(byte) mode_8bpppixelcell::col#5 mode_8bpppixelcell::@7/(byte) mode_8bpppixelcell::col#1 )
  [264] (byte*) mode_8bpppixelcell::gfxb#2 ← phi( mode_8bpppixelcell::@5/(byte*) mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::@7/(byte*) mode_8bpppixelcell::gfxb#1 )
  [264] (byte) mode_8bpppixelcell::bits#2 ← phi( mode_8bpppixelcell::@5/(byte) mode_8bpppixelcell::bits#0 mode_8bpppixelcell::@7/(byte) mode_8bpppixelcell::bits#1 )
  [265] (byte~) mode_8bpppixelcell::$19 ← (byte) mode_8bpppixelcell::bits#2 & (byte/word/signed word/dword/signed dword) $80
  [266] if((byte~) mode_8bpppixelcell::$19==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_8bpppixelcell::@7
  to:mode_8bpppixelcell::@11
mode_8bpppixelcell::@11: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@6
  [267] (byte~) mode_8bpppixelcell::c#3 ← (byte) mode_8bpppixelcell::col#2
  to:mode_8bpppixelcell::@7
mode_8bpppixelcell::@7: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@11 mode_8bpppixelcell::@6
  [268] (byte) mode_8bpppixelcell::c#2 ← phi( mode_8bpppixelcell::@11/(byte~) mode_8bpppixelcell::c#3 mode_8bpppixelcell::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [269] *((byte*) mode_8bpppixelcell::gfxb#2) ← (byte) mode_8bpppixelcell::c#2
  [270] (byte*) mode_8bpppixelcell::gfxb#1 ← ++ (byte*) mode_8bpppixelcell::gfxb#2
  [271] (byte) mode_8bpppixelcell::bits#1 ← (byte) mode_8bpppixelcell::bits#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [272] (byte) mode_8bpppixelcell::col#1 ← ++ (byte) mode_8bpppixelcell::col#2
  [273] (byte) mode_8bpppixelcell::cp#1 ← ++ (byte) mode_8bpppixelcell::cp#2
  [274] if((byte) mode_8bpppixelcell::cp#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto mode_8bpppixelcell::@6
  to:mode_8bpppixelcell::@12
mode_8bpppixelcell::@12: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@7
  [275] (byte) mode_8bpppixelcell::cr#1 ← ++ (byte) mode_8bpppixelcell::cr#6
  [276] if((byte) mode_8bpppixelcell::cr#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto mode_8bpppixelcell::@5
  to:mode_8bpppixelcell::@13
mode_8bpppixelcell::@13: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@12
  [277] (byte) mode_8bpppixelcell::ch#1 ← ++ (byte) mode_8bpppixelcell::ch#8
  [278] if((byte) mode_8bpppixelcell::ch#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_8bpppixelcell::@4
  to:mode_8bpppixelcell::@14
mode_8bpppixelcell::@14: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@13
  [279] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [280] call mode_ctrl 
  to:mode_8bpppixelcell::@return
mode_8bpppixelcell::@return: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@14
  [281] return 
  to:@return
mode_sixsfred: scope:[mode_sixsfred]  from menu::@40
  [282] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0
  [283] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [284] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0
  [285] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_sixsfred::PLANEA#0
  [286] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_sixsfred::PLANEA#0
  [287] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [288] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  [289] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [290] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [291] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_sixsfred::PLANEB#0
  [292] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_sixsfred::PLANEB#0
  [293] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [294] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  [295] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [296] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [297] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_sixsfred::COLORS#0/(word/signed word/dword/signed dword) $400
  [298] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_sixsfred::COLORS#0/(word/signed word/dword/signed dword) $400
  to:mode_sixsfred::@1
mode_sixsfred::@1: scope:[mode_sixsfred]  from mode_sixsfred mode_sixsfred::@1
  [299] (byte) mode_sixsfred::i#2 ← phi( mode_sixsfred/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_sixsfred::@1/(byte) mode_sixsfred::i#1 )
  [300] *((const byte*) DTV_PALETTE#0 + (byte) mode_sixsfred::i#2) ← (byte) mode_sixsfred::i#2
  [301] (byte) mode_sixsfred::i#1 ← ++ (byte) mode_sixsfred::i#2
  [302] if((byte) mode_sixsfred::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_sixsfred::@1
  to:mode_sixsfred::@8
mode_sixsfred::@8: scope:[mode_sixsfred]  from mode_sixsfred::@1
  [303] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_sixsfred::@2
mode_sixsfred::@2: scope:[mode_sixsfred]  from mode_sixsfred::@8 mode_sixsfred::@9
  [304] (byte*) mode_sixsfred::col#3 ← phi( mode_sixsfred::@8/(const byte*) mode_sixsfred::COLORS#0 mode_sixsfred::@9/(byte*) mode_sixsfred::col#1 )
  [304] (byte) mode_sixsfred::cy#4 ← phi( mode_sixsfred::@8/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_sixsfred::@9/(byte) mode_sixsfred::cy#1 )
  to:mode_sixsfred::@3
mode_sixsfred::@3: scope:[mode_sixsfred]  from mode_sixsfred::@2 mode_sixsfred::@3
  [305] (byte*) mode_sixsfred::col#2 ← phi( mode_sixsfred::@2/(byte*) mode_sixsfred::col#3 mode_sixsfred::@3/(byte*) mode_sixsfred::col#1 )
  [305] (byte) mode_sixsfred::cx#2 ← phi( mode_sixsfred::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_sixsfred::@3/(byte) mode_sixsfred::cx#1 )
  [306] (byte~) mode_sixsfred::$16 ← (byte) mode_sixsfred::cx#2 + (byte) mode_sixsfred::cy#4
  [307] (byte~) mode_sixsfred::$17 ← (byte~) mode_sixsfred::$16 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [308] *((byte*) mode_sixsfred::col#2) ← (byte~) mode_sixsfred::$17
  [309] (byte*) mode_sixsfred::col#1 ← ++ (byte*) mode_sixsfred::col#2
  [310] (byte) mode_sixsfred::cx#1 ← ++ (byte) mode_sixsfred::cx#2
  [311] if((byte) mode_sixsfred::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred::@3
  to:mode_sixsfred::@9
mode_sixsfred::@9: scope:[mode_sixsfred]  from mode_sixsfred::@3
  [312] (byte) mode_sixsfred::cy#1 ← ++ (byte) mode_sixsfred::cy#4
  [313] if((byte) mode_sixsfred::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_sixsfred::@2
  to:mode_sixsfred::@4
mode_sixsfred::@4: scope:[mode_sixsfred]  from mode_sixsfred::@11 mode_sixsfred::@9
  [314] (byte*) mode_sixsfred::gfxa#3 ← phi( mode_sixsfred::@9/(const byte*) mode_sixsfred::PLANEA#0 mode_sixsfred::@11/(byte*) mode_sixsfred::gfxa#1 )
  [314] (byte) mode_sixsfred::ay#4 ← phi( mode_sixsfred::@9/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_sixsfred::@11/(byte) mode_sixsfred::ay#1 )
  to:mode_sixsfred::@5
mode_sixsfred::@5: scope:[mode_sixsfred]  from mode_sixsfred::@4 mode_sixsfred::@5
  [315] (byte) mode_sixsfred::ax#2 ← phi( mode_sixsfred::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_sixsfred::@5/(byte) mode_sixsfred::ax#1 )
  [315] (byte*) mode_sixsfred::gfxa#2 ← phi( mode_sixsfred::@4/(byte*) mode_sixsfred::gfxa#3 mode_sixsfred::@5/(byte*) mode_sixsfred::gfxa#1 )
  [316] (byte~) mode_sixsfred::$20 ← (byte) mode_sixsfred::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  [317] (byte) mode_sixsfred::row#0 ← (byte~) mode_sixsfred::$20 & (byte/signed byte/word/signed word/dword/signed dword) 3
  [318] *((byte*) mode_sixsfred::gfxa#2) ← *((const byte[]) mode_sixsfred::row_bitmask#0 + (byte) mode_sixsfred::row#0)
  [319] (byte*) mode_sixsfred::gfxa#1 ← ++ (byte*) mode_sixsfred::gfxa#2
  [320] (byte) mode_sixsfred::ax#1 ← ++ (byte) mode_sixsfred::ax#2
  [321] if((byte) mode_sixsfred::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred::@5
  to:mode_sixsfred::@11
mode_sixsfred::@11: scope:[mode_sixsfred]  from mode_sixsfred::@5
  [322] (byte) mode_sixsfred::ay#1 ← ++ (byte) mode_sixsfred::ay#4
  [323] if((byte) mode_sixsfred::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_sixsfred::@4
  to:mode_sixsfred::@6
mode_sixsfred::@6: scope:[mode_sixsfred]  from mode_sixsfred::@11 mode_sixsfred::@13
  [324] (byte) mode_sixsfred::by#4 ← phi( mode_sixsfred::@11/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_sixsfred::@13/(byte) mode_sixsfred::by#1 )
  [324] (byte*) mode_sixsfred::gfxb#3 ← phi( mode_sixsfred::@11/(const byte*) mode_sixsfred::PLANEB#0 mode_sixsfred::@13/(byte*) mode_sixsfred::gfxb#1 )
  to:mode_sixsfred::@7
mode_sixsfred::@7: scope:[mode_sixsfred]  from mode_sixsfred::@6 mode_sixsfred::@7
  [325] (byte) mode_sixsfred::bx#2 ← phi( mode_sixsfred::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_sixsfred::@7/(byte) mode_sixsfred::bx#1 )
  [325] (byte*) mode_sixsfred::gfxb#2 ← phi( mode_sixsfred::@6/(byte*) mode_sixsfred::gfxb#3 mode_sixsfred::@7/(byte*) mode_sixsfred::gfxb#1 )
  [326] *((byte*) mode_sixsfred::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $1b
  [327] (byte*) mode_sixsfred::gfxb#1 ← ++ (byte*) mode_sixsfred::gfxb#2
  [328] (byte) mode_sixsfred::bx#1 ← ++ (byte) mode_sixsfred::bx#2
  [329] if((byte) mode_sixsfred::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred::@7
  to:mode_sixsfred::@13
mode_sixsfred::@13: scope:[mode_sixsfred]  from mode_sixsfred::@7
  [330] (byte) mode_sixsfred::by#1 ← ++ (byte) mode_sixsfred::by#4
  [331] if((byte) mode_sixsfred::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_sixsfred::@6
  to:mode_sixsfred::@14
mode_sixsfred::@14: scope:[mode_sixsfred]  from mode_sixsfred::@13
  [332] phi()
  [333] call mode_ctrl 
  to:mode_sixsfred::@return
mode_sixsfred::@return: scope:[mode_sixsfred]  from mode_sixsfred::@14
  [334] return 
  to:@return
mode_twoplanebitmap: scope:[mode_twoplanebitmap]  from menu::@38
  [335] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0
  [336] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [337] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0
  [338] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_twoplanebitmap::PLANEA#0
  [339] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_twoplanebitmap::PLANEA#0
  [340] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [341] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  [342] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [343] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [344] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_twoplanebitmap::PLANEB#0
  [345] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_twoplanebitmap::PLANEB#0
  [346] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [347] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  [348] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [349] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [350] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_twoplanebitmap::COLORS#0/(word/signed word/dword/signed dword) $400
  [351] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_twoplanebitmap::COLORS#0/(word/signed word/dword/signed dword) $400
  to:mode_twoplanebitmap::@1
mode_twoplanebitmap::@1: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap mode_twoplanebitmap::@1
  [352] (byte) mode_twoplanebitmap::i#2 ← phi( mode_twoplanebitmap/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_twoplanebitmap::@1/(byte) mode_twoplanebitmap::i#1 )
  [353] *((const byte*) DTV_PALETTE#0 + (byte) mode_twoplanebitmap::i#2) ← (byte) mode_twoplanebitmap::i#2
  [354] (byte) mode_twoplanebitmap::i#1 ← ++ (byte) mode_twoplanebitmap::i#2
  [355] if((byte) mode_twoplanebitmap::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_twoplanebitmap::@1
  to:mode_twoplanebitmap::@10
mode_twoplanebitmap::@10: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@1
  [356] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [357] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $70
  [358] *((const byte*) BGCOL2#0) ← (byte/word/signed word/dword/signed dword) $d4
  to:mode_twoplanebitmap::@2
mode_twoplanebitmap::@2: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@10 mode_twoplanebitmap::@11
  [359] (byte*) mode_twoplanebitmap::col#3 ← phi( mode_twoplanebitmap::@10/(const byte*) mode_twoplanebitmap::COLORS#0 mode_twoplanebitmap::@11/(byte*) mode_twoplanebitmap::col#1 )
  [359] (byte) mode_twoplanebitmap::cy#4 ← phi( mode_twoplanebitmap::@10/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_twoplanebitmap::@11/(byte) mode_twoplanebitmap::cy#1 )
  to:mode_twoplanebitmap::@3
mode_twoplanebitmap::@3: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@2 mode_twoplanebitmap::@3
  [360] (byte*) mode_twoplanebitmap::col#2 ← phi( mode_twoplanebitmap::@2/(byte*) mode_twoplanebitmap::col#3 mode_twoplanebitmap::@3/(byte*) mode_twoplanebitmap::col#1 )
  [360] (byte) mode_twoplanebitmap::cx#2 ← phi( mode_twoplanebitmap::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_twoplanebitmap::@3/(byte) mode_twoplanebitmap::cx#1 )
  [361] (byte~) mode_twoplanebitmap::$15 ← (byte) mode_twoplanebitmap::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [362] (byte~) mode_twoplanebitmap::$16 ← (byte~) mode_twoplanebitmap::$15 << (byte/signed byte/word/signed word/dword/signed dword) 4
  [363] (byte~) mode_twoplanebitmap::$17 ← (byte) mode_twoplanebitmap::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [364] (byte~) mode_twoplanebitmap::$18 ← (byte~) mode_twoplanebitmap::$16 | (byte~) mode_twoplanebitmap::$17
  [365] *((byte*) mode_twoplanebitmap::col#2) ← (byte~) mode_twoplanebitmap::$18
  [366] (byte*) mode_twoplanebitmap::col#1 ← ++ (byte*) mode_twoplanebitmap::col#2
  [367] (byte) mode_twoplanebitmap::cx#1 ← ++ (byte) mode_twoplanebitmap::cx#2
  [368] if((byte) mode_twoplanebitmap::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_twoplanebitmap::@3
  to:mode_twoplanebitmap::@11
mode_twoplanebitmap::@11: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@3
  [369] (byte) mode_twoplanebitmap::cy#1 ← ++ (byte) mode_twoplanebitmap::cy#4
  [370] if((byte) mode_twoplanebitmap::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_twoplanebitmap::@2
  to:mode_twoplanebitmap::@4
mode_twoplanebitmap::@4: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@11 mode_twoplanebitmap::@15
  [371] (byte*) mode_twoplanebitmap::gfxa#6 ← phi( mode_twoplanebitmap::@11/(const byte*) mode_twoplanebitmap::PLANEA#0 mode_twoplanebitmap::@15/(byte*) mode_twoplanebitmap::gfxa#7 )
  [371] (byte) mode_twoplanebitmap::ay#4 ← phi( mode_twoplanebitmap::@11/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_twoplanebitmap::@15/(byte) mode_twoplanebitmap::ay#1 )
  to:mode_twoplanebitmap::@5
mode_twoplanebitmap::@5: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@4 mode_twoplanebitmap::@7
  [372] (byte) mode_twoplanebitmap::ax#2 ← phi( mode_twoplanebitmap::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_twoplanebitmap::@7/(byte) mode_twoplanebitmap::ax#1 )
  [372] (byte*) mode_twoplanebitmap::gfxa#3 ← phi( mode_twoplanebitmap::@4/(byte*) mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::@7/(byte*) mode_twoplanebitmap::gfxa#7 )
  [373] (byte~) mode_twoplanebitmap::$21 ← (byte) mode_twoplanebitmap::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) 4
  [374] if((byte~) mode_twoplanebitmap::$21==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_twoplanebitmap::@6
  to:mode_twoplanebitmap::@13
mode_twoplanebitmap::@13: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@5
  [375] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/word/signed word/dword/signed dword) $ff
  [376] (byte*) mode_twoplanebitmap::gfxa#2 ← ++ (byte*) mode_twoplanebitmap::gfxa#3
  to:mode_twoplanebitmap::@7
mode_twoplanebitmap::@7: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@13 mode_twoplanebitmap::@6
  [377] (byte*) mode_twoplanebitmap::gfxa#7 ← phi( mode_twoplanebitmap::@13/(byte*) mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::@6/(byte*) mode_twoplanebitmap::gfxa#1 )
  [378] (byte) mode_twoplanebitmap::ax#1 ← ++ (byte) mode_twoplanebitmap::ax#2
  [379] if((byte) mode_twoplanebitmap::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_twoplanebitmap::@5
  to:mode_twoplanebitmap::@15
mode_twoplanebitmap::@15: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@7
  [380] (byte) mode_twoplanebitmap::ay#1 ← ++ (byte) mode_twoplanebitmap::ay#4
  [381] if((byte) mode_twoplanebitmap::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_twoplanebitmap::@4
  to:mode_twoplanebitmap::@8
mode_twoplanebitmap::@8: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@15 mode_twoplanebitmap::@17
  [382] (byte) mode_twoplanebitmap::by#4 ← phi( mode_twoplanebitmap::@15/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_twoplanebitmap::@17/(byte) mode_twoplanebitmap::by#1 )
  [382] (byte*) mode_twoplanebitmap::gfxb#3 ← phi( mode_twoplanebitmap::@15/(const byte*) mode_twoplanebitmap::PLANEB#0 mode_twoplanebitmap::@17/(byte*) mode_twoplanebitmap::gfxb#1 )
  to:mode_twoplanebitmap::@9
mode_twoplanebitmap::@9: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@8 mode_twoplanebitmap::@9
  [383] (byte) mode_twoplanebitmap::bx#2 ← phi( mode_twoplanebitmap::@8/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_twoplanebitmap::@9/(byte) mode_twoplanebitmap::bx#1 )
  [383] (byte*) mode_twoplanebitmap::gfxb#2 ← phi( mode_twoplanebitmap::@8/(byte*) mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::@9/(byte*) mode_twoplanebitmap::gfxb#1 )
  [384] *((byte*) mode_twoplanebitmap::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $f
  [385] (byte*) mode_twoplanebitmap::gfxb#1 ← ++ (byte*) mode_twoplanebitmap::gfxb#2
  [386] (byte) mode_twoplanebitmap::bx#1 ← ++ (byte) mode_twoplanebitmap::bx#2
  [387] if((byte) mode_twoplanebitmap::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_twoplanebitmap::@9
  to:mode_twoplanebitmap::@17
mode_twoplanebitmap::@17: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@9
  [388] (byte) mode_twoplanebitmap::by#1 ← ++ (byte) mode_twoplanebitmap::by#4
  [389] if((byte) mode_twoplanebitmap::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_twoplanebitmap::@8
  to:mode_twoplanebitmap::@18
mode_twoplanebitmap::@18: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@17
  [390] phi()
  [391] call mode_ctrl 
  to:mode_twoplanebitmap::@return
mode_twoplanebitmap::@return: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@18
  [392] return 
  to:@return
mode_twoplanebitmap::@6: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@5
  [393] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [394] (byte*) mode_twoplanebitmap::gfxa#1 ← ++ (byte*) mode_twoplanebitmap::gfxa#3
  to:mode_twoplanebitmap::@7
mode_sixsfred2: scope:[mode_sixsfred2]  from menu::@36
  [395] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_LINEAR#0
  [396] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [397] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0
  [398] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_sixsfred2::PLANEA#0
  [399] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_sixsfred2::PLANEA#0
  [400] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [401] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  [402] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [403] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [404] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_sixsfred2::PLANEB#0
  [405] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_sixsfred2::PLANEB#0
  [406] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [407] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  [408] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [409] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [410] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_sixsfred2::COLORS#0/(word/signed word/dword/signed dword) $400
  [411] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_sixsfred2::COLORS#0/(word/signed word/dword/signed dword) $400
  to:mode_sixsfred2::@1
mode_sixsfred2::@1: scope:[mode_sixsfred2]  from mode_sixsfred2 mode_sixsfred2::@1
  [412] (byte) mode_sixsfred2::i#2 ← phi( mode_sixsfred2/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_sixsfred2::@1/(byte) mode_sixsfred2::i#1 )
  [413] *((const byte*) DTV_PALETTE#0 + (byte) mode_sixsfred2::i#2) ← (byte) mode_sixsfred2::i#2
  [414] (byte) mode_sixsfred2::i#1 ← ++ (byte) mode_sixsfred2::i#2
  [415] if((byte) mode_sixsfred2::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_sixsfred2::@1
  to:mode_sixsfred2::@8
mode_sixsfred2::@8: scope:[mode_sixsfred2]  from mode_sixsfred2::@1
  [416] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_sixsfred2::@2
mode_sixsfred2::@2: scope:[mode_sixsfred2]  from mode_sixsfred2::@8 mode_sixsfred2::@9
  [417] (byte*) mode_sixsfred2::col#3 ← phi( mode_sixsfred2::@8/(const byte*) mode_sixsfred2::COLORS#0 mode_sixsfred2::@9/(byte*) mode_sixsfred2::col#1 )
  [417] (byte) mode_sixsfred2::cy#4 ← phi( mode_sixsfred2::@8/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_sixsfred2::@9/(byte) mode_sixsfred2::cy#1 )
  to:mode_sixsfred2::@3
mode_sixsfred2::@3: scope:[mode_sixsfred2]  from mode_sixsfred2::@2 mode_sixsfred2::@3
  [418] (byte*) mode_sixsfred2::col#2 ← phi( mode_sixsfred2::@2/(byte*) mode_sixsfred2::col#3 mode_sixsfred2::@3/(byte*) mode_sixsfred2::col#1 )
  [418] (byte) mode_sixsfred2::cx#2 ← phi( mode_sixsfred2::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_sixsfred2::@3/(byte) mode_sixsfred2::cx#1 )
  [419] (byte~) mode_sixsfred2::$14 ← (byte) mode_sixsfred2::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 3
  [420] (byte~) mode_sixsfred2::$15 ← (byte~) mode_sixsfred2::$14 << (byte/signed byte/word/signed word/dword/signed dword) 4
  [421] (byte~) mode_sixsfred2::$16 ← (byte) mode_sixsfred2::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 3
  [422] (byte~) mode_sixsfred2::$17 ← (byte~) mode_sixsfred2::$15 | (byte~) mode_sixsfred2::$16
  [423] *((byte*) mode_sixsfred2::col#2) ← (byte~) mode_sixsfred2::$17
  [424] (byte*) mode_sixsfred2::col#1 ← ++ (byte*) mode_sixsfred2::col#2
  [425] (byte) mode_sixsfred2::cx#1 ← ++ (byte) mode_sixsfred2::cx#2
  [426] if((byte) mode_sixsfred2::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred2::@3
  to:mode_sixsfred2::@9
mode_sixsfred2::@9: scope:[mode_sixsfred2]  from mode_sixsfred2::@3
  [427] (byte) mode_sixsfred2::cy#1 ← ++ (byte) mode_sixsfred2::cy#4
  [428] if((byte) mode_sixsfred2::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_sixsfred2::@2
  to:mode_sixsfred2::@4
mode_sixsfred2::@4: scope:[mode_sixsfred2]  from mode_sixsfred2::@11 mode_sixsfred2::@9
  [429] (byte*) mode_sixsfred2::gfxa#3 ← phi( mode_sixsfred2::@9/(const byte*) mode_sixsfred2::PLANEA#0 mode_sixsfred2::@11/(byte*) mode_sixsfred2::gfxa#1 )
  [429] (byte) mode_sixsfred2::ay#4 ← phi( mode_sixsfred2::@9/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_sixsfred2::@11/(byte) mode_sixsfred2::ay#1 )
  to:mode_sixsfred2::@5
mode_sixsfred2::@5: scope:[mode_sixsfred2]  from mode_sixsfred2::@4 mode_sixsfred2::@5
  [430] (byte) mode_sixsfred2::ax#2 ← phi( mode_sixsfred2::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_sixsfred2::@5/(byte) mode_sixsfred2::ax#1 )
  [430] (byte*) mode_sixsfred2::gfxa#2 ← phi( mode_sixsfred2::@4/(byte*) mode_sixsfred2::gfxa#3 mode_sixsfred2::@5/(byte*) mode_sixsfred2::gfxa#1 )
  [431] (byte~) mode_sixsfred2::$20 ← (byte) mode_sixsfred2::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  [432] (byte) mode_sixsfred2::row#0 ← (byte~) mode_sixsfred2::$20 & (byte/signed byte/word/signed word/dword/signed dword) 3
  [433] *((byte*) mode_sixsfred2::gfxa#2) ← *((const byte[]) mode_sixsfred2::row_bitmask#0 + (byte) mode_sixsfred2::row#0)
  [434] (byte*) mode_sixsfred2::gfxa#1 ← ++ (byte*) mode_sixsfred2::gfxa#2
  [435] (byte) mode_sixsfred2::ax#1 ← ++ (byte) mode_sixsfred2::ax#2
  [436] if((byte) mode_sixsfred2::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred2::@5
  to:mode_sixsfred2::@11
mode_sixsfred2::@11: scope:[mode_sixsfred2]  from mode_sixsfred2::@5
  [437] (byte) mode_sixsfred2::ay#1 ← ++ (byte) mode_sixsfred2::ay#4
  [438] if((byte) mode_sixsfred2::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_sixsfred2::@4
  to:mode_sixsfred2::@6
mode_sixsfred2::@6: scope:[mode_sixsfred2]  from mode_sixsfred2::@11 mode_sixsfred2::@13
  [439] (byte) mode_sixsfred2::by#4 ← phi( mode_sixsfred2::@11/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_sixsfred2::@13/(byte) mode_sixsfred2::by#1 )
  [439] (byte*) mode_sixsfred2::gfxb#3 ← phi( mode_sixsfred2::@11/(const byte*) mode_sixsfred2::PLANEB#0 mode_sixsfred2::@13/(byte*) mode_sixsfred2::gfxb#1 )
  to:mode_sixsfred2::@7
mode_sixsfred2::@7: scope:[mode_sixsfred2]  from mode_sixsfred2::@6 mode_sixsfred2::@7
  [440] (byte) mode_sixsfred2::bx#2 ← phi( mode_sixsfred2::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_sixsfred2::@7/(byte) mode_sixsfred2::bx#1 )
  [440] (byte*) mode_sixsfred2::gfxb#2 ← phi( mode_sixsfred2::@6/(byte*) mode_sixsfred2::gfxb#3 mode_sixsfred2::@7/(byte*) mode_sixsfred2::gfxb#1 )
  [441] *((byte*) mode_sixsfred2::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $1b
  [442] (byte*) mode_sixsfred2::gfxb#1 ← ++ (byte*) mode_sixsfred2::gfxb#2
  [443] (byte) mode_sixsfred2::bx#1 ← ++ (byte) mode_sixsfred2::bx#2
  [444] if((byte) mode_sixsfred2::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred2::@7
  to:mode_sixsfred2::@13
mode_sixsfred2::@13: scope:[mode_sixsfred2]  from mode_sixsfred2::@7
  [445] (byte) mode_sixsfred2::by#1 ← ++ (byte) mode_sixsfred2::by#4
  [446] if((byte) mode_sixsfred2::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_sixsfred2::@6
  to:mode_sixsfred2::@14
mode_sixsfred2::@14: scope:[mode_sixsfred2]  from mode_sixsfred2::@13
  [447] phi()
  [448] call mode_ctrl 
  to:mode_sixsfred2::@return
mode_sixsfred2::@return: scope:[mode_sixsfred2]  from mode_sixsfred2::@14
  [449] return 
  to:@return
mode_hicolmcchar: scope:[mode_hicolmcchar]  from menu::@34
  [450] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolmcchar::CHARSET#0/(dword/signed dword) $10000
  [451] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400
  [452] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400
  [453] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0
  [454] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  [455] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolmcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
  [456] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [457] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0
  [458] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolmcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolmcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
  to:mode_hicolmcchar::@1
mode_hicolmcchar::@1: scope:[mode_hicolmcchar]  from mode_hicolmcchar mode_hicolmcchar::@1
  [459] (byte) mode_hicolmcchar::i#2 ← phi( mode_hicolmcchar/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_hicolmcchar::@1/(byte) mode_hicolmcchar::i#1 )
  [460] *((const byte*) DTV_PALETTE#0 + (byte) mode_hicolmcchar::i#2) ← (byte) mode_hicolmcchar::i#2
  [461] (byte) mode_hicolmcchar::i#1 ← ++ (byte) mode_hicolmcchar::i#2
  [462] if((byte) mode_hicolmcchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_hicolmcchar::@1
  to:mode_hicolmcchar::@4
mode_hicolmcchar::@4: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@1
  [463] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [464] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $50
  [465] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) $54
  [466] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) $58
  to:mode_hicolmcchar::@2
mode_hicolmcchar::@2: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@4 mode_hicolmcchar::@5
  [467] (byte*) mode_hicolmcchar::ch#3 ← phi( mode_hicolmcchar::@4/(const byte*) mode_hicolmcchar::SCREEN#0 mode_hicolmcchar::@5/(byte*) mode_hicolmcchar::ch#1 )
  [467] (byte*) mode_hicolmcchar::col#3 ← phi( mode_hicolmcchar::@4/(const byte*) mode_hicolmcchar::COLORS#0 mode_hicolmcchar::@5/(byte*) mode_hicolmcchar::col#1 )
  [467] (byte) mode_hicolmcchar::cy#4 ← phi( mode_hicolmcchar::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_hicolmcchar::@5/(byte) mode_hicolmcchar::cy#1 )
  to:mode_hicolmcchar::@3
mode_hicolmcchar::@3: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@2 mode_hicolmcchar::@3
  [468] (byte*) mode_hicolmcchar::ch#2 ← phi( mode_hicolmcchar::@2/(byte*) mode_hicolmcchar::ch#3 mode_hicolmcchar::@3/(byte*) mode_hicolmcchar::ch#1 )
  [468] (byte*) mode_hicolmcchar::col#2 ← phi( mode_hicolmcchar::@2/(byte*) mode_hicolmcchar::col#3 mode_hicolmcchar::@3/(byte*) mode_hicolmcchar::col#1 )
  [468] (byte) mode_hicolmcchar::cx#2 ← phi( mode_hicolmcchar::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_hicolmcchar::@3/(byte) mode_hicolmcchar::cx#1 )
  [469] (byte~) mode_hicolmcchar::$25 ← (byte) mode_hicolmcchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [470] (byte~) mode_hicolmcchar::$26 ← (byte~) mode_hicolmcchar::$25 << (byte/signed byte/word/signed word/dword/signed dword) 4
  [471] (byte~) mode_hicolmcchar::$27 ← (byte) mode_hicolmcchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [472] (byte) mode_hicolmcchar::v#0 ← (byte~) mode_hicolmcchar::$26 | (byte~) mode_hicolmcchar::$27
  [473] *((byte*) mode_hicolmcchar::col#2) ← (byte) mode_hicolmcchar::v#0
  [474] (byte*) mode_hicolmcchar::col#1 ← ++ (byte*) mode_hicolmcchar::col#2
  [475] *((byte*) mode_hicolmcchar::ch#2) ← (byte) mode_hicolmcchar::v#0
  [476] (byte*) mode_hicolmcchar::ch#1 ← ++ (byte*) mode_hicolmcchar::ch#2
  [477] (byte) mode_hicolmcchar::cx#1 ← ++ (byte) mode_hicolmcchar::cx#2
  [478] if((byte) mode_hicolmcchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_hicolmcchar::@3
  to:mode_hicolmcchar::@5
mode_hicolmcchar::@5: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@3
  [479] (byte) mode_hicolmcchar::cy#1 ← ++ (byte) mode_hicolmcchar::cy#4
  [480] if((byte) mode_hicolmcchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_hicolmcchar::@2
  to:mode_hicolmcchar::@6
mode_hicolmcchar::@6: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@5
  [481] phi()
  [482] call mode_ctrl 
  to:mode_hicolmcchar::@return
mode_hicolmcchar::@return: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@6
  [483] return 
  to:@return
mode_hicolecmchar: scope:[mode_hicolecmchar]  from menu::@32
  [484] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolecmchar::CHARSET#0/(dword/signed dword) $10000
  [485] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400
  [486] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400
  [487] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0
  [488] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  [489] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
  [490] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(const byte) VIC_ECM#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [491] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0
  [492] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
  to:mode_hicolecmchar::@1
mode_hicolecmchar::@1: scope:[mode_hicolecmchar]  from mode_hicolecmchar mode_hicolecmchar::@1
  [493] (byte) mode_hicolecmchar::i#2 ← phi( mode_hicolecmchar/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_hicolecmchar::@1/(byte) mode_hicolecmchar::i#1 )
  [494] *((const byte*) DTV_PALETTE#0 + (byte) mode_hicolecmchar::i#2) ← (byte) mode_hicolecmchar::i#2
  [495] (byte) mode_hicolecmchar::i#1 ← ++ (byte) mode_hicolecmchar::i#2
  [496] if((byte) mode_hicolecmchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_hicolecmchar::@1
  to:mode_hicolecmchar::@4
mode_hicolecmchar::@4: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@1
  [497] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [498] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $50
  [499] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) $54
  [500] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) $58
  [501] *((const byte*) BGCOL4#0) ← (byte/signed byte/word/signed word/dword/signed dword) $5c
  to:mode_hicolecmchar::@2
mode_hicolecmchar::@2: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@4 mode_hicolecmchar::@5
  [502] (byte*) mode_hicolecmchar::ch#3 ← phi( mode_hicolecmchar::@4/(const byte*) mode_hicolecmchar::SCREEN#0 mode_hicolecmchar::@5/(byte*) mode_hicolecmchar::ch#1 )
  [502] (byte*) mode_hicolecmchar::col#3 ← phi( mode_hicolecmchar::@4/(const byte*) mode_hicolecmchar::COLORS#0 mode_hicolecmchar::@5/(byte*) mode_hicolecmchar::col#1 )
  [502] (byte) mode_hicolecmchar::cy#4 ← phi( mode_hicolecmchar::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_hicolecmchar::@5/(byte) mode_hicolecmchar::cy#1 )
  to:mode_hicolecmchar::@3
mode_hicolecmchar::@3: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@2 mode_hicolecmchar::@3
  [503] (byte*) mode_hicolecmchar::ch#2 ← phi( mode_hicolecmchar::@2/(byte*) mode_hicolecmchar::ch#3 mode_hicolecmchar::@3/(byte*) mode_hicolecmchar::ch#1 )
  [503] (byte*) mode_hicolecmchar::col#2 ← phi( mode_hicolecmchar::@2/(byte*) mode_hicolecmchar::col#3 mode_hicolecmchar::@3/(byte*) mode_hicolecmchar::col#1 )
  [503] (byte) mode_hicolecmchar::cx#2 ← phi( mode_hicolecmchar::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_hicolecmchar::@3/(byte) mode_hicolecmchar::cx#1 )
  [504] (byte~) mode_hicolecmchar::$25 ← (byte) mode_hicolecmchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [505] (byte~) mode_hicolecmchar::$26 ← (byte~) mode_hicolecmchar::$25 << (byte/signed byte/word/signed word/dword/signed dword) 4
  [506] (byte~) mode_hicolecmchar::$27 ← (byte) mode_hicolecmchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [507] (byte) mode_hicolecmchar::v#0 ← (byte~) mode_hicolecmchar::$26 | (byte~) mode_hicolecmchar::$27
  [508] *((byte*) mode_hicolecmchar::col#2) ← (byte) mode_hicolecmchar::v#0
  [509] (byte*) mode_hicolecmchar::col#1 ← ++ (byte*) mode_hicolecmchar::col#2
  [510] *((byte*) mode_hicolecmchar::ch#2) ← (byte) mode_hicolecmchar::v#0
  [511] (byte*) mode_hicolecmchar::ch#1 ← ++ (byte*) mode_hicolecmchar::ch#2
  [512] (byte) mode_hicolecmchar::cx#1 ← ++ (byte) mode_hicolecmchar::cx#2
  [513] if((byte) mode_hicolecmchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_hicolecmchar::@3
  to:mode_hicolecmchar::@5
mode_hicolecmchar::@5: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@3
  [514] (byte) mode_hicolecmchar::cy#1 ← ++ (byte) mode_hicolecmchar::cy#4
  [515] if((byte) mode_hicolecmchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_hicolecmchar::@2
  to:mode_hicolecmchar::@6
mode_hicolecmchar::@6: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@5
  [516] phi()
  [517] call mode_ctrl 
  to:mode_hicolecmchar::@return
mode_hicolecmchar::@return: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@6
  [518] return 
  to:@return
mode_hicolstdchar: scope:[mode_hicolstdchar]  from menu::@30
  [519] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolstdchar::CHARSET#0/(dword/signed dword) $10000
  [520] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400
  [521] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400
  [522] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0
  [523] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  [524] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolstdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
  [525] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [526] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0
  [527] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolstdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolstdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
  to:mode_hicolstdchar::@1
mode_hicolstdchar::@1: scope:[mode_hicolstdchar]  from mode_hicolstdchar mode_hicolstdchar::@1
  [528] (byte) mode_hicolstdchar::i#2 ← phi( mode_hicolstdchar/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_hicolstdchar::@1/(byte) mode_hicolstdchar::i#1 )
  [529] *((const byte*) DTV_PALETTE#0 + (byte) mode_hicolstdchar::i#2) ← (byte) mode_hicolstdchar::i#2
  [530] (byte) mode_hicolstdchar::i#1 ← ++ (byte) mode_hicolstdchar::i#2
  [531] if((byte) mode_hicolstdchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_hicolstdchar::@1
  to:mode_hicolstdchar::@4
mode_hicolstdchar::@4: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@1
  [532] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [533] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_hicolstdchar::@2
mode_hicolstdchar::@2: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@4 mode_hicolstdchar::@5
  [534] (byte*) mode_hicolstdchar::ch#3 ← phi( mode_hicolstdchar::@4/(const byte*) mode_hicolstdchar::SCREEN#0 mode_hicolstdchar::@5/(byte*) mode_hicolstdchar::ch#1 )
  [534] (byte*) mode_hicolstdchar::col#3 ← phi( mode_hicolstdchar::@4/(const byte*) mode_hicolstdchar::COLORS#0 mode_hicolstdchar::@5/(byte*) mode_hicolstdchar::col#1 )
  [534] (byte) mode_hicolstdchar::cy#4 ← phi( mode_hicolstdchar::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_hicolstdchar::@5/(byte) mode_hicolstdchar::cy#1 )
  to:mode_hicolstdchar::@3
mode_hicolstdchar::@3: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@2 mode_hicolstdchar::@3
  [535] (byte*) mode_hicolstdchar::ch#2 ← phi( mode_hicolstdchar::@2/(byte*) mode_hicolstdchar::ch#3 mode_hicolstdchar::@3/(byte*) mode_hicolstdchar::ch#1 )
  [535] (byte*) mode_hicolstdchar::col#2 ← phi( mode_hicolstdchar::@2/(byte*) mode_hicolstdchar::col#3 mode_hicolstdchar::@3/(byte*) mode_hicolstdchar::col#1 )
  [535] (byte) mode_hicolstdchar::cx#2 ← phi( mode_hicolstdchar::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_hicolstdchar::@3/(byte) mode_hicolstdchar::cx#1 )
  [536] (byte~) mode_hicolstdchar::$24 ← (byte) mode_hicolstdchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [537] (byte~) mode_hicolstdchar::$25 ← (byte~) mode_hicolstdchar::$24 << (byte/signed byte/word/signed word/dword/signed dword) 4
  [538] (byte~) mode_hicolstdchar::$26 ← (byte) mode_hicolstdchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [539] (byte) mode_hicolstdchar::v#0 ← (byte~) mode_hicolstdchar::$25 | (byte~) mode_hicolstdchar::$26
  [540] *((byte*) mode_hicolstdchar::col#2) ← (byte) mode_hicolstdchar::v#0
  [541] (byte*) mode_hicolstdchar::col#1 ← ++ (byte*) mode_hicolstdchar::col#2
  [542] *((byte*) mode_hicolstdchar::ch#2) ← (byte) mode_hicolstdchar::v#0
  [543] (byte*) mode_hicolstdchar::ch#1 ← ++ (byte*) mode_hicolstdchar::ch#2
  [544] (byte) mode_hicolstdchar::cx#1 ← ++ (byte) mode_hicolstdchar::cx#2
  [545] if((byte) mode_hicolstdchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_hicolstdchar::@3
  to:mode_hicolstdchar::@5
mode_hicolstdchar::@5: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@3
  [546] (byte) mode_hicolstdchar::cy#1 ← ++ (byte) mode_hicolstdchar::cy#4
  [547] if((byte) mode_hicolstdchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_hicolstdchar::@2
  to:mode_hicolstdchar::@6
mode_hicolstdchar::@6: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@5
  [548] phi()
  [549] call mode_ctrl 
  to:mode_hicolstdchar::@return
mode_hicolstdchar::@return: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@6
  [550] return 
  to:@return
mode_stdbitmap: scope:[mode_stdbitmap]  from menu::@28
  [551] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_stdbitmap::BITMAP#0/(dword/signed dword) $10000
  [552] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [553] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  [554] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_stdbitmap::BITMAP#0/(word/signed word/dword/signed dword) $4000
  [555] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [556] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0
  [557] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_stdbitmap::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_stdbitmap::BITMAP#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
  to:mode_stdbitmap::@1
mode_stdbitmap::@1: scope:[mode_stdbitmap]  from mode_stdbitmap mode_stdbitmap::@1
  [558] (byte) mode_stdbitmap::i#2 ← phi( mode_stdbitmap/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_stdbitmap::@1/(byte) mode_stdbitmap::i#1 )
  [559] *((const byte*) DTV_PALETTE#0 + (byte) mode_stdbitmap::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_stdbitmap::i#2)
  [560] (byte) mode_stdbitmap::i#1 ← ++ (byte) mode_stdbitmap::i#2
  [561] if((byte) mode_stdbitmap::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_stdbitmap::@1
  to:mode_stdbitmap::@5
mode_stdbitmap::@5: scope:[mode_stdbitmap]  from mode_stdbitmap::@1
  [562] *((const byte*) BGCOL#0) ← (const byte) BLACK#0
  [563] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0
  to:mode_stdbitmap::@2
mode_stdbitmap::@2: scope:[mode_stdbitmap]  from mode_stdbitmap::@5 mode_stdbitmap::@6
  [564] (byte*) mode_stdbitmap::ch#3 ← phi( mode_stdbitmap::@5/(const byte*) mode_stdbitmap::SCREEN#0 mode_stdbitmap::@6/(byte*) mode_stdbitmap::ch#1 )
  [564] (byte) mode_stdbitmap::cy#4 ← phi( mode_stdbitmap::@5/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_stdbitmap::@6/(byte) mode_stdbitmap::cy#1 )
  to:mode_stdbitmap::@3
mode_stdbitmap::@3: scope:[mode_stdbitmap]  from mode_stdbitmap::@2 mode_stdbitmap::@3
  [565] (byte*) mode_stdbitmap::ch#2 ← phi( mode_stdbitmap::@2/(byte*) mode_stdbitmap::ch#3 mode_stdbitmap::@3/(byte*) mode_stdbitmap::ch#1 )
  [565] (byte) mode_stdbitmap::cx#2 ← phi( mode_stdbitmap::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_stdbitmap::@3/(byte) mode_stdbitmap::cx#1 )
  [566] (byte~) mode_stdbitmap::$19 ← (byte) mode_stdbitmap::cx#2 + (byte) mode_stdbitmap::cy#4
  [567] (byte) mode_stdbitmap::col#0 ← (byte~) mode_stdbitmap::$19 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [568] (byte) mode_stdbitmap::col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f - (byte) mode_stdbitmap::col#0
  [569] (byte~) mode_stdbitmap::$22 ← (byte) mode_stdbitmap::col#0 << (byte/signed byte/word/signed word/dword/signed dword) 4
  [570] (byte~) mode_stdbitmap::$23 ← (byte~) mode_stdbitmap::$22 | (byte) mode_stdbitmap::col2#0
  [571] *((byte*) mode_stdbitmap::ch#2) ← (byte~) mode_stdbitmap::$23
  [572] (byte*) mode_stdbitmap::ch#1 ← ++ (byte*) mode_stdbitmap::ch#2
  [573] (byte) mode_stdbitmap::cx#1 ← ++ (byte) mode_stdbitmap::cx#2
  [574] if((byte) mode_stdbitmap::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_stdbitmap::@3
  to:mode_stdbitmap::@6
mode_stdbitmap::@6: scope:[mode_stdbitmap]  from mode_stdbitmap::@3
  [575] (byte) mode_stdbitmap::cy#1 ← ++ (byte) mode_stdbitmap::cy#4
  [576] if((byte) mode_stdbitmap::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_stdbitmap::@2
  to:mode_stdbitmap::@7
mode_stdbitmap::@7: scope:[mode_stdbitmap]  from mode_stdbitmap::@6
  [577] phi()
  [578] call bitmap_init 
  to:mode_stdbitmap::@9
mode_stdbitmap::@9: scope:[mode_stdbitmap]  from mode_stdbitmap::@7
  [579] phi()
  [580] call bitmap_clear 
  to:mode_stdbitmap::@4
mode_stdbitmap::@4: scope:[mode_stdbitmap]  from mode_stdbitmap::@11 mode_stdbitmap::@9
  [581] (byte) mode_stdbitmap::l#2 ← phi( mode_stdbitmap::@9/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_stdbitmap::@11/(byte) mode_stdbitmap::l#1 )
  [582] (byte) bitmap_line::x0#0 ← *((const byte[]) mode_stdbitmap::lines_x#0 + (byte) mode_stdbitmap::l#2)
  [583] (byte) bitmap_line::x1#0 ← *((const byte[]) mode_stdbitmap::lines_x#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mode_stdbitmap::l#2)
  [584] (byte) bitmap_line::y0#0 ← *((const byte[]) mode_stdbitmap::lines_y#0 + (byte) mode_stdbitmap::l#2)
  [585] (byte) bitmap_line::y1#0 ← *((const byte[]) mode_stdbitmap::lines_y#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mode_stdbitmap::l#2)
  [586] call bitmap_line 
  to:mode_stdbitmap::@11
mode_stdbitmap::@11: scope:[mode_stdbitmap]  from mode_stdbitmap::@4
  [587] (byte) mode_stdbitmap::l#1 ← ++ (byte) mode_stdbitmap::l#2
  [588] if((byte) mode_stdbitmap::l#1<(const byte) mode_stdbitmap::lines_cnt#0) goto mode_stdbitmap::@4
  to:mode_stdbitmap::@8
mode_stdbitmap::@8: scope:[mode_stdbitmap]  from mode_stdbitmap::@11
  [589] phi()
  [590] call mode_ctrl 
  to:mode_stdbitmap::@return
mode_stdbitmap::@return: scope:[mode_stdbitmap]  from mode_stdbitmap::@8
  [591] return 
  to:@return
bitmap_line: scope:[bitmap_line]  from mode_stdbitmap::@4
  [592] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1
  to:bitmap_line::@15
bitmap_line::@15: scope:[bitmap_line]  from bitmap_line
  [593] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0
  [594] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@2
  to:bitmap_line::@16
bitmap_line::@16: scope:[bitmap_line]  from bitmap_line::@15
  [595] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0
  [596] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@3
  to:bitmap_line::@17
bitmap_line::@17: scope:[bitmap_line]  from bitmap_line::@16
  [597] (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#0
  [598] (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#0
  [599] (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#0
  [600] (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#2
  [601] (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#2
  [602] call bitmap_line_ydxi 
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@13 bitmap_line::@17 bitmap_line::@20 bitmap_line::@24 bitmap_line::@27 bitmap_line::@3 bitmap_line::@6
  [603] return 
  to:@return
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line::@16
  [604] (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#0
  [605] (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#0
  [606] (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#0
  [607] (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#2
  [608] (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#2
  [609] call bitmap_line_xdyi 
  to:bitmap_line::@return
bitmap_line::@2: scope:[bitmap_line]  from bitmap_line::@15
  [610] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0
  [611] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@6
  to:bitmap_line::@20
bitmap_line::@20: scope:[bitmap_line]  from bitmap_line::@2
  [612] (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#0
  [613] (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#0
  [614] (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#0
  [615] (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#1
  [616] (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#2
  [617] call bitmap_line_ydxd 
  to:bitmap_line::@return
bitmap_line::@6: scope:[bitmap_line]  from bitmap_line::@2
  [618] (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#0
  [619] (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#0
  [620] (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#0
  [621] (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#2
  [622] (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#1
  [623] call bitmap_line_xdyd 
  to:bitmap_line::@return
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line
  [624] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0
  [625] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@9
  to:bitmap_line::@23
bitmap_line::@23: scope:[bitmap_line]  from bitmap_line::@1
  [626] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0
  [627] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@10
  to:bitmap_line::@24
bitmap_line::@24: scope:[bitmap_line]  from bitmap_line::@23
  [628] (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#0
  [629] (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#0
  [630] (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#0
  [631] (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10
  [632] (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#1
  [633] call bitmap_line_ydxd 
  to:bitmap_line::@return
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@23
  [634] (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#0
  [635] (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#0
  [636] (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#0
  [637] (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#1
  [638] (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#10
  [639] call bitmap_line_xdyd 
  to:bitmap_line::@return
bitmap_line::@9: scope:[bitmap_line]  from bitmap_line::@1
  [640] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0
  [641] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13
  to:bitmap_line::@27
bitmap_line::@27: scope:[bitmap_line]  from bitmap_line::@9
  [642] (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#0
  [643] (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#0
  [644] (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#0
  [645] (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#11
  [646] (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#1
  [647] call bitmap_line_ydxi 
  to:bitmap_line::@return
bitmap_line::@13: scope:[bitmap_line]  from bitmap_line::@9
  [648] (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#0
  [649] (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#0
  [650] (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#0
  [651] (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#1
  [652] (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11
  [653] call bitmap_line_xdyi 
  to:bitmap_line::@return
bitmap_line_xdyi: scope:[bitmap_line_xdyi]  from bitmap_line::@13 bitmap_line::@3
  [654] (byte) bitmap_line_xdyi::x1#6 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::x1#1 bitmap_line::@3/(byte) bitmap_line_xdyi::x1#0 )
  [654] (byte) bitmap_line_xdyi::xd#5 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::xd#1 bitmap_line::@3/(byte) bitmap_line_xdyi::xd#0 )
  [654] (byte) bitmap_line_xdyi::y#5 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::y#1 bitmap_line::@3/(byte) bitmap_line_xdyi::y#0 )
  [654] (byte) bitmap_line_xdyi::x#6 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::x#1 bitmap_line::@3/(byte) bitmap_line_xdyi::x#0 )
  [654] (byte) bitmap_line_xdyi::yd#2 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::yd#1 bitmap_line::@3/(byte) bitmap_line_xdyi::yd#0 )
  [655] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  to:bitmap_line_xdyi::@1
bitmap_line_xdyi::@1: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi bitmap_line_xdyi::@2
  [656] (byte) bitmap_line_xdyi::e#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::e#0 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::e#6 )
  [656] (byte) bitmap_line_xdyi::y#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::y#5 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::y#6 )
  [656] (byte) bitmap_line_xdyi::x#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::x#6 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::x#2 )
  [657] (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3
  [658] (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3
  [659] call bitmap_plot 
  to:bitmap_line_xdyi::@5
bitmap_line_xdyi::@5: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@1
  [660] (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#3
  [661] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2
  [662] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2
  to:bitmap_line_xdyi::@3
bitmap_line_xdyi::@3: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@5
  [663] (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#3
  [664] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5
  to:bitmap_line_xdyi::@2
bitmap_line_xdyi::@2: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@3 bitmap_line_xdyi::@5
  [665] (byte) bitmap_line_xdyi::e#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::e#2 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::e#1 )
  [665] (byte) bitmap_line_xdyi::y#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::y#2 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::y#3 )
  [666] (byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [667] if((byte) bitmap_line_xdyi::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1
  to:bitmap_line_xdyi::@return
bitmap_line_xdyi::@return: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@2
  [668] return 
  to:@return
bitmap_plot: scope:[bitmap_plot]  from bitmap_line_xdyd::@1 bitmap_line_xdyi::@1 bitmap_line_ydxd::@1 bitmap_line_ydxi::@1
  [669] (byte) bitmap_plot::y#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::y#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::y#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::y#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::y#2 )
  [669] (byte) bitmap_plot::x#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::x#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::x#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::x#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::x#2 )
  [670] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_plot::x#4)
  [671] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#4)
  [672] (word~) bitmap_plot::$0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0
  [673] (byte~) bitmap_plot::$1 ← *((byte*)(word~) bitmap_plot::$0) | *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_plot::x#4)
  [674] *((byte*)(word~) bitmap_plot::$0) ← (byte~) bitmap_plot::$1
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [675] return 
  to:@return
bitmap_line_ydxi: scope:[bitmap_line_ydxi]  from bitmap_line::@17 bitmap_line::@27
  [676] (byte) bitmap_line_ydxi::y1#6 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxi::y1#0 bitmap_line::@27/(byte) bitmap_line_ydxi::y1#1 )
  [676] (byte) bitmap_line_ydxi::yd#5 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxi::yd#0 bitmap_line::@27/(byte) bitmap_line_ydxi::yd#1 )
  [676] (byte) bitmap_line_ydxi::y#6 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxi::y#0 bitmap_line::@27/(byte) bitmap_line_ydxi::y#1 )
  [676] (byte) bitmap_line_ydxi::x#5 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxi::x#0 bitmap_line::@27/(byte) bitmap_line_ydxi::x#1 )
  [676] (byte) bitmap_line_ydxi::xd#2 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxi::xd#0 bitmap_line::@27/(byte) bitmap_line_ydxi::xd#1 )
  [677] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  to:bitmap_line_ydxi::@1
bitmap_line_ydxi::@1: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi bitmap_line_ydxi::@2
  [678] (byte) bitmap_line_ydxi::e#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::e#0 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::e#6 )
  [678] (byte) bitmap_line_ydxi::y#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::y#6 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::y#2 )
  [678] (byte) bitmap_line_ydxi::x#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::x#5 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::x#6 )
  [679] (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3
  [680] (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3
  [681] call bitmap_plot 
  to:bitmap_line_ydxi::@5
bitmap_line_ydxi::@5: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@1
  [682] (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#3
  [683] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2
  [684] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2
  to:bitmap_line_ydxi::@3
bitmap_line_ydxi::@3: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@5
  [685] (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#3
  [686] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5
  to:bitmap_line_ydxi::@2
bitmap_line_ydxi::@2: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@3 bitmap_line_ydxi::@5
  [687] (byte) bitmap_line_ydxi::e#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::e#2 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::e#1 )
  [687] (byte) bitmap_line_ydxi::x#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::x#2 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::x#3 )
  [688] (byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [689] if((byte) bitmap_line_ydxi::y#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1
  to:bitmap_line_ydxi::@return
bitmap_line_ydxi::@return: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@2
  [690] return 
  to:@return
bitmap_line_xdyd: scope:[bitmap_line_xdyd]  from bitmap_line::@10 bitmap_line::@6
  [691] (byte) bitmap_line_xdyd::x1#6 ← phi( bitmap_line::@10/(byte) bitmap_line_xdyd::x1#1 bitmap_line::@6/(byte) bitmap_line_xdyd::x1#0 )
  [691] (byte) bitmap_line_xdyd::xd#5 ← phi( bitmap_line::@10/(byte) bitmap_line_xdyd::xd#1 bitmap_line::@6/(byte) bitmap_line_xdyd::xd#0 )
  [691] (byte) bitmap_line_xdyd::y#5 ← phi( bitmap_line::@10/(byte) bitmap_line_xdyd::y#1 bitmap_line::@6/(byte) bitmap_line_xdyd::y#0 )
  [691] (byte) bitmap_line_xdyd::x#6 ← phi( bitmap_line::@10/(byte) bitmap_line_xdyd::x#1 bitmap_line::@6/(byte) bitmap_line_xdyd::x#0 )
  [691] (byte) bitmap_line_xdyd::yd#2 ← phi( bitmap_line::@10/(byte) bitmap_line_xdyd::yd#1 bitmap_line::@6/(byte) bitmap_line_xdyd::yd#0 )
  [692] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  to:bitmap_line_xdyd::@1
bitmap_line_xdyd::@1: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd bitmap_line_xdyd::@2
  [693] (byte) bitmap_line_xdyd::e#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::e#0 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::e#6 )
  [693] (byte) bitmap_line_xdyd::y#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::y#5 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::y#6 )
  [693] (byte) bitmap_line_xdyd::x#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::x#6 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::x#2 )
  [694] (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3
  [695] (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3
  [696] call bitmap_plot 
  to:bitmap_line_xdyd::@5
bitmap_line_xdyd::@5: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@1
  [697] (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#3
  [698] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2
  [699] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2
  to:bitmap_line_xdyd::@3
bitmap_line_xdyd::@3: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@5
  [700] (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#3
  [701] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5
  to:bitmap_line_xdyd::@2
bitmap_line_xdyd::@2: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@3 bitmap_line_xdyd::@5
  [702] (byte) bitmap_line_xdyd::e#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::e#2 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::e#1 )
  [702] (byte) bitmap_line_xdyd::y#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::y#2 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::y#3 )
  [703] (byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [704] if((byte) bitmap_line_xdyd::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1
  to:bitmap_line_xdyd::@return
bitmap_line_xdyd::@return: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@2
  [705] return 
  to:@return
bitmap_line_ydxd: scope:[bitmap_line_ydxd]  from bitmap_line::@20 bitmap_line::@24
  [706] (byte) bitmap_line_ydxd::y1#6 ← phi( bitmap_line::@20/(byte) bitmap_line_ydxd::y1#0 bitmap_line::@24/(byte) bitmap_line_ydxd::y1#1 )
  [706] (byte) bitmap_line_ydxd::yd#5 ← phi( bitmap_line::@20/(byte) bitmap_line_ydxd::yd#0 bitmap_line::@24/(byte) bitmap_line_ydxd::yd#1 )
  [706] (byte) bitmap_line_ydxd::y#7 ← phi( bitmap_line::@20/(byte) bitmap_line_ydxd::y#0 bitmap_line::@24/(byte) bitmap_line_ydxd::y#1 )
  [706] (byte) bitmap_line_ydxd::x#5 ← phi( bitmap_line::@20/(byte) bitmap_line_ydxd::x#0 bitmap_line::@24/(byte) bitmap_line_ydxd::x#1 )
  [706] (byte) bitmap_line_ydxd::xd#2 ← phi( bitmap_line::@20/(byte) bitmap_line_ydxd::xd#0 bitmap_line::@24/(byte) bitmap_line_ydxd::xd#1 )
  [707] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  to:bitmap_line_ydxd::@1
bitmap_line_ydxd::@1: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd bitmap_line_ydxd::@2
  [708] (byte) bitmap_line_ydxd::e#3 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::e#0 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::e#6 )
  [708] (byte) bitmap_line_ydxd::y#2 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::y#7 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::y#3 )
  [708] (byte) bitmap_line_ydxd::x#3 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::x#5 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::x#6 )
  [709] (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3
  [710] (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#2
  [711] call bitmap_plot 
  to:bitmap_line_ydxd::@5
bitmap_line_ydxd::@5: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@1
  [712] (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2
  [713] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2
  [714] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2
  to:bitmap_line_ydxd::@3
bitmap_line_ydxd::@3: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@5
  [715] (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#3
  [716] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5
  to:bitmap_line_ydxd::@2
bitmap_line_ydxd::@2: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@3 bitmap_line_ydxd::@5
  [717] (byte) bitmap_line_ydxd::e#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::e#2 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::e#1 )
  [717] (byte) bitmap_line_ydxd::x#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::x#2 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::x#3 )
  [718] (byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [719] if((byte) bitmap_line_ydxd::y#3!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1
  to:bitmap_line_ydxd::@return
bitmap_line_ydxd::@return: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@2
  [720] return 
  to:@return
bitmap_clear: scope:[bitmap_clear]  from mode_stdbitmap::@9
  [721] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_xhi#0) w= *((const byte[$100]) bitmap_plot_xlo#0)
  [722] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  [723] (byte) bitmap_clear::y#4 ← phi( bitmap_clear/(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_clear::@3/(byte) bitmap_clear::y#1 )
  [723] (byte*) bitmap_clear::bitmap#3 ← phi( bitmap_clear/(byte*~) bitmap_clear::bitmap#5 bitmap_clear::@3/(byte*) bitmap_clear::bitmap#1 )
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  [724] (byte) bitmap_clear::x#2 ← phi( bitmap_clear::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_clear::@2/(byte) bitmap_clear::x#1 )
  [724] (byte*) bitmap_clear::bitmap#2 ← phi( bitmap_clear::@1/(byte*) bitmap_clear::bitmap#3 bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  [725] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [726] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2
  [727] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2
  [728] if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) $c8) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  [729] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4
  [730] if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  [731] return 
  to:@return
bitmap_init: scope:[bitmap_init]  from mode_stdbitmap::@7
  [732] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [733] (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte/word/signed word/dword/signed dword) $80 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  [733] (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  [734] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte/word/signed word/dword/signed dword) $f8
  [735] *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0
  [736] *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_init::x#2) ← >(const byte*) mode_stdbitmap::BITMAP#0
  [737] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  [738] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  [739] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@10
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@10
  [740] (byte) bitmap_init::bits#4 ← phi( bitmap_init::@10/(byte) bitmap_init::bits#1 bitmap_init::@1/(byte/word/signed word/dword/signed dword) $80 )
  [741] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2
  [742] if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [743] (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@4/(byte*) bitmap_init::yoffs#4 bitmap_init::@2/((byte*))(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [743] (byte) bitmap_init::y#2 ← phi( bitmap_init::@4/(byte) bitmap_init::y#1 bitmap_init::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [744] (byte~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [745] (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2
  [746] (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$6 | (byte~) bitmap_init::$7
  [747] *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8
  [748] (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2
  [749] *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9
  [750] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [751] if((byte~) bitmap_init::$10!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4
  to:bitmap_init::@7
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@3
  [752] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@7
  [753] (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 bitmap_init::@7/(byte*) bitmap_init::yoffs#1 )
  [754] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2
  [755] if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [756] return 
  to:@return
bitmap_init::@10: scope:[bitmap_init]  from bitmap_init::@1
  [757] phi()
  to:bitmap_init::@2
mode_mcchar: scope:[mode_mcchar]  from menu::@26
  [758] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_mcchar::CHARSET#0/(dword/signed dword) $10000
  [759] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
  [760] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
  [761] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [762] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  [763] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_mcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
  [764] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [765] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0
  [766] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_mcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_mcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
  to:mode_mcchar::@1
mode_mcchar::@1: scope:[mode_mcchar]  from mode_mcchar mode_mcchar::@1
  [767] (byte) mode_mcchar::i#2 ← phi( mode_mcchar/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_mcchar::@1/(byte) mode_mcchar::i#1 )
  [768] *((const byte*) DTV_PALETTE#0 + (byte) mode_mcchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_mcchar::i#2)
  [769] (byte) mode_mcchar::i#1 ← ++ (byte) mode_mcchar::i#2
  [770] if((byte) mode_mcchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_mcchar::@1
  to:mode_mcchar::@4
mode_mcchar::@4: scope:[mode_mcchar]  from mode_mcchar::@1
  [771] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [772] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0
  [773] *((const byte*) BGCOL2#0) ← (const byte) GREEN#0
  [774] *((const byte*) BGCOL3#0) ← (const byte) BLUE#0
  to:mode_mcchar::@2
mode_mcchar::@2: scope:[mode_mcchar]  from mode_mcchar::@4 mode_mcchar::@5
  [775] (byte*) mode_mcchar::ch#3 ← phi( mode_mcchar::@4/(const byte*) mode_mcchar::SCREEN#0 mode_mcchar::@5/(byte*) mode_mcchar::ch#1 )
  [775] (byte*) mode_mcchar::col#3 ← phi( mode_mcchar::@4/(const byte*) mode_mcchar::COLORS#0 mode_mcchar::@5/(byte*) mode_mcchar::col#1 )
  [775] (byte) mode_mcchar::cy#4 ← phi( mode_mcchar::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_mcchar::@5/(byte) mode_mcchar::cy#1 )
  to:mode_mcchar::@3
mode_mcchar::@3: scope:[mode_mcchar]  from mode_mcchar::@2 mode_mcchar::@3
  [776] (byte*) mode_mcchar::ch#2 ← phi( mode_mcchar::@2/(byte*) mode_mcchar::ch#3 mode_mcchar::@3/(byte*) mode_mcchar::ch#1 )
  [776] (byte*) mode_mcchar::col#2 ← phi( mode_mcchar::@2/(byte*) mode_mcchar::col#3 mode_mcchar::@3/(byte*) mode_mcchar::col#1 )
  [776] (byte) mode_mcchar::cx#2 ← phi( mode_mcchar::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_mcchar::@3/(byte) mode_mcchar::cx#1 )
  [777] (byte~) mode_mcchar::$25 ← (byte) mode_mcchar::cx#2 + (byte) mode_mcchar::cy#4
  [778] (byte~) mode_mcchar::$26 ← (byte~) mode_mcchar::$25 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [779] *((byte*) mode_mcchar::col#2) ← (byte~) mode_mcchar::$26
  [780] (byte*) mode_mcchar::col#1 ← ++ (byte*) mode_mcchar::col#2
  [781] (byte~) mode_mcchar::$27 ← (byte) mode_mcchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [782] (byte~) mode_mcchar::$28 ← (byte~) mode_mcchar::$27 << (byte/signed byte/word/signed word/dword/signed dword) 4
  [783] (byte~) mode_mcchar::$29 ← (byte) mode_mcchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [784] (byte~) mode_mcchar::$30 ← (byte~) mode_mcchar::$28 | (byte~) mode_mcchar::$29
  [785] *((byte*) mode_mcchar::ch#2) ← (byte~) mode_mcchar::$30
  [786] (byte*) mode_mcchar::ch#1 ← ++ (byte*) mode_mcchar::ch#2
  [787] (byte) mode_mcchar::cx#1 ← ++ (byte) mode_mcchar::cx#2
  [788] if((byte) mode_mcchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_mcchar::@3
  to:mode_mcchar::@5
mode_mcchar::@5: scope:[mode_mcchar]  from mode_mcchar::@3
  [789] (byte) mode_mcchar::cy#1 ← ++ (byte) mode_mcchar::cy#4
  [790] if((byte) mode_mcchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_mcchar::@2
  to:mode_mcchar::@6
mode_mcchar::@6: scope:[mode_mcchar]  from mode_mcchar::@5
  [791] phi()
  [792] call mode_ctrl 
  to:mode_mcchar::@return
mode_mcchar::@return: scope:[mode_mcchar]  from mode_mcchar::@6
  [793] return 
  to:@return
mode_ecmchar: scope:[mode_ecmchar]  from menu::@24
  [794] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_ecmchar::CHARSET#0/(dword/signed dword) $10000
  [795] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
  [796] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
  [797] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [798] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  [799] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_ecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
  [800] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(const byte) VIC_ECM#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [801] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0
  [802] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_ecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_ecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
  to:mode_ecmchar::@1
mode_ecmchar::@1: scope:[mode_ecmchar]  from mode_ecmchar mode_ecmchar::@1
  [803] (byte) mode_ecmchar::i#2 ← phi( mode_ecmchar/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_ecmchar::@1/(byte) mode_ecmchar::i#1 )
  [804] *((const byte*) DTV_PALETTE#0 + (byte) mode_ecmchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_ecmchar::i#2)
  [805] (byte) mode_ecmchar::i#1 ← ++ (byte) mode_ecmchar::i#2
  [806] if((byte) mode_ecmchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_ecmchar::@1
  to:mode_ecmchar::@4
mode_ecmchar::@4: scope:[mode_ecmchar]  from mode_ecmchar::@1
  [807] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [808] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [809] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2
  [810] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) 5
  [811] *((const byte*) BGCOL4#0) ← (byte/signed byte/word/signed word/dword/signed dword) 6
  to:mode_ecmchar::@2
mode_ecmchar::@2: scope:[mode_ecmchar]  from mode_ecmchar::@4 mode_ecmchar::@5
  [812] (byte*) mode_ecmchar::ch#3 ← phi( mode_ecmchar::@4/(const byte*) mode_ecmchar::SCREEN#0 mode_ecmchar::@5/(byte*) mode_ecmchar::ch#1 )
  [812] (byte*) mode_ecmchar::col#3 ← phi( mode_ecmchar::@4/(const byte*) mode_ecmchar::COLORS#0 mode_ecmchar::@5/(byte*) mode_ecmchar::col#1 )
  [812] (byte) mode_ecmchar::cy#4 ← phi( mode_ecmchar::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_ecmchar::@5/(byte) mode_ecmchar::cy#1 )
  to:mode_ecmchar::@3
mode_ecmchar::@3: scope:[mode_ecmchar]  from mode_ecmchar::@2 mode_ecmchar::@3
  [813] (byte*) mode_ecmchar::ch#2 ← phi( mode_ecmchar::@2/(byte*) mode_ecmchar::ch#3 mode_ecmchar::@3/(byte*) mode_ecmchar::ch#1 )
  [813] (byte*) mode_ecmchar::col#2 ← phi( mode_ecmchar::@2/(byte*) mode_ecmchar::col#3 mode_ecmchar::@3/(byte*) mode_ecmchar::col#1 )
  [813] (byte) mode_ecmchar::cx#2 ← phi( mode_ecmchar::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_ecmchar::@3/(byte) mode_ecmchar::cx#1 )
  [814] (byte~) mode_ecmchar::$25 ← (byte) mode_ecmchar::cx#2 + (byte) mode_ecmchar::cy#4
  [815] (byte~) mode_ecmchar::$26 ← (byte~) mode_ecmchar::$25 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [816] *((byte*) mode_ecmchar::col#2) ← (byte~) mode_ecmchar::$26
  [817] (byte*) mode_ecmchar::col#1 ← ++ (byte*) mode_ecmchar::col#2
  [818] (byte~) mode_ecmchar::$27 ← (byte) mode_ecmchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [819] (byte~) mode_ecmchar::$28 ← (byte~) mode_ecmchar::$27 << (byte/signed byte/word/signed word/dword/signed dword) 4
  [820] (byte~) mode_ecmchar::$29 ← (byte) mode_ecmchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [821] (byte~) mode_ecmchar::$30 ← (byte~) mode_ecmchar::$28 | (byte~) mode_ecmchar::$29
  [822] *((byte*) mode_ecmchar::ch#2) ← (byte~) mode_ecmchar::$30
  [823] (byte*) mode_ecmchar::ch#1 ← ++ (byte*) mode_ecmchar::ch#2
  [824] (byte) mode_ecmchar::cx#1 ← ++ (byte) mode_ecmchar::cx#2
  [825] if((byte) mode_ecmchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_ecmchar::@3
  to:mode_ecmchar::@5
mode_ecmchar::@5: scope:[mode_ecmchar]  from mode_ecmchar::@3
  [826] (byte) mode_ecmchar::cy#1 ← ++ (byte) mode_ecmchar::cy#4
  [827] if((byte) mode_ecmchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_ecmchar::@2
  to:mode_ecmchar::@6
mode_ecmchar::@6: scope:[mode_ecmchar]  from mode_ecmchar::@5
  [828] phi()
  [829] call mode_ctrl 
  to:mode_ecmchar::@return
mode_ecmchar::@return: scope:[mode_ecmchar]  from mode_ecmchar::@6
  [830] return 
  to:@return
mode_stdchar: scope:[mode_stdchar]  from menu::@22
  [831] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_stdchar::CHARSET#0/(dword/signed dword) $10000
  [832] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
  [833] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
  [834] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [835] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  [836] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_stdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000
  [837] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [838] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0
  [839] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_stdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_stdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
  to:mode_stdchar::@1
mode_stdchar::@1: scope:[mode_stdchar]  from mode_stdchar mode_stdchar::@1
  [840] (byte) mode_stdchar::i#2 ← phi( mode_stdchar/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_stdchar::@1/(byte) mode_stdchar::i#1 )
  [841] *((const byte*) DTV_PALETTE#0 + (byte) mode_stdchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_stdchar::i#2)
  [842] (byte) mode_stdchar::i#1 ← ++ (byte) mode_stdchar::i#2
  [843] if((byte) mode_stdchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_stdchar::@1
  to:mode_stdchar::@4
mode_stdchar::@4: scope:[mode_stdchar]  from mode_stdchar::@1
  [844] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [845] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_stdchar::@2
mode_stdchar::@2: scope:[mode_stdchar]  from mode_stdchar::@4 mode_stdchar::@5
  [846] (byte*) mode_stdchar::ch#3 ← phi( mode_stdchar::@4/(const byte*) mode_stdchar::SCREEN#0 mode_stdchar::@5/(byte*) mode_stdchar::ch#1 )
  [846] (byte*) mode_stdchar::col#3 ← phi( mode_stdchar::@4/(const byte*) mode_stdchar::COLORS#0 mode_stdchar::@5/(byte*) mode_stdchar::col#1 )
  [846] (byte) mode_stdchar::cy#4 ← phi( mode_stdchar::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_stdchar::@5/(byte) mode_stdchar::cy#1 )
  to:mode_stdchar::@3
mode_stdchar::@3: scope:[mode_stdchar]  from mode_stdchar::@2 mode_stdchar::@3
  [847] (byte*) mode_stdchar::ch#2 ← phi( mode_stdchar::@2/(byte*) mode_stdchar::ch#3 mode_stdchar::@3/(byte*) mode_stdchar::ch#1 )
  [847] (byte*) mode_stdchar::col#2 ← phi( mode_stdchar::@2/(byte*) mode_stdchar::col#3 mode_stdchar::@3/(byte*) mode_stdchar::col#1 )
  [847] (byte) mode_stdchar::cx#2 ← phi( mode_stdchar::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_stdchar::@3/(byte) mode_stdchar::cx#1 )
  [848] (byte~) mode_stdchar::$24 ← (byte) mode_stdchar::cx#2 + (byte) mode_stdchar::cy#4
  [849] (byte~) mode_stdchar::$25 ← (byte~) mode_stdchar::$24 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [850] *((byte*) mode_stdchar::col#2) ← (byte~) mode_stdchar::$25
  [851] (byte*) mode_stdchar::col#1 ← ++ (byte*) mode_stdchar::col#2
  [852] (byte~) mode_stdchar::$26 ← (byte) mode_stdchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [853] (byte~) mode_stdchar::$27 ← (byte~) mode_stdchar::$26 << (byte/signed byte/word/signed word/dword/signed dword) 4
  [854] (byte~) mode_stdchar::$28 ← (byte) mode_stdchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [855] (byte~) mode_stdchar::$29 ← (byte~) mode_stdchar::$27 | (byte~) mode_stdchar::$28
  [856] *((byte*) mode_stdchar::ch#2) ← (byte~) mode_stdchar::$29
  [857] (byte*) mode_stdchar::ch#1 ← ++ (byte*) mode_stdchar::ch#2
  [858] (byte) mode_stdchar::cx#1 ← ++ (byte) mode_stdchar::cx#2
  [859] if((byte) mode_stdchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_stdchar::@3
  to:mode_stdchar::@5
mode_stdchar::@5: scope:[mode_stdchar]  from mode_stdchar::@3
  [860] (byte) mode_stdchar::cy#1 ← ++ (byte) mode_stdchar::cy#4
  [861] if((byte) mode_stdchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_stdchar::@2
  to:mode_stdchar::@6
mode_stdchar::@6: scope:[mode_stdchar]  from mode_stdchar::@5
  [862] phi()
  [863] call mode_ctrl 
  to:mode_stdchar::@return
mode_stdchar::@return: scope:[mode_stdchar]  from mode_stdchar::@6
  [864] return 
  to:@return
print_str_lines: scope:[print_str_lines]  from menu::@48
  [865] phi()
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@9
  [866] (byte*) print_line_cursor#17 ← phi( print_str_lines/(const byte*) menu::SCREEN#0 print_str_lines::@9/(byte*) print_line_cursor#19 )
  [866] (byte*) print_char_cursor#19 ← phi( print_str_lines/(const byte*) menu::SCREEN#0 print_str_lines::@9/(byte*~) print_char_cursor#103 )
  [866] (byte*) print_str_lines::str#2 ← phi( print_str_lines/(const byte[]) MENU_TEXT#0 print_str_lines::@9/(byte*) print_str_lines::str#0 )
  [867] if(*((byte*) print_str_lines::str#2)!=(byte) '@') goto print_str_lines::@4
  to:print_str_lines::@return
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@1
  [868] return 
  to:@return
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@1 print_str_lines::@5
  [869] (byte*) print_char_cursor#17 ← phi( print_str_lines::@1/(byte*) print_char_cursor#19 print_str_lines::@5/(byte*) print_char_cursor#32 )
  [869] (byte*) print_str_lines::str#3 ← phi( print_str_lines::@1/(byte*) print_str_lines::str#2 print_str_lines::@5/(byte*) print_str_lines::str#0 )
  [870] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#3)
  [871] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#3
  [872] if((byte) print_str_lines::ch#0==(byte) '@') goto print_str_lines::@5
  to:print_str_lines::@8
print_str_lines::@8: scope:[print_str_lines]  from print_str_lines::@4
  [873] *((byte*) print_char_cursor#17) ← (byte) print_str_lines::ch#0
  [874] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#17
  to:print_str_lines::@5
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@4 print_str_lines::@8
  [875] (byte*) print_char_cursor#32 ← phi( print_str_lines::@4/(byte*) print_char_cursor#17 print_str_lines::@8/(byte*) print_char_cursor#1 )
  [876] if((byte) print_str_lines::ch#0!=(byte) '@') goto print_str_lines::@4
  to:print_str_lines::@9
print_str_lines::@9: scope:[print_str_lines]  from print_str_lines::@5
  [877] phi()
  [878] call print_ln 
  [879] (byte*~) print_char_cursor#103 ← (byte*) print_line_cursor#19
  to:print_str_lines::@1
print_ln: scope:[print_ln]  from print_str_lines::@9
  [880] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [881] (byte*) print_line_cursor#18 ← phi( print_ln/(byte*) print_line_cursor#17 print_ln::@1/(byte*) print_line_cursor#19 )
  [882] (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#18 + (byte/signed byte/word/signed word/dword/signed dword) $28
  [883] if((byte*) print_line_cursor#19<(byte*) print_char_cursor#32) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [884] return 
  to:@return
print_cls: scope:[print_cls]  from menu::@47
  [885] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [886] (byte*) print_cls::sc#2 ← phi( print_cls/(const byte*) menu::SCREEN#0 print_cls::@1/(byte*) print_cls::sc#1 )
  [887] *((byte*) print_cls::sc#2) ← (byte) ' '
  [888] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [889] if((byte*) print_cls::sc#1!=(const byte*) menu::SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [890] return 
  to:@return
print_set_screen: scope:[print_set_screen]  from menu::@19
  [891] phi()
  to:print_set_screen::@return
print_set_screen::@return: scope:[print_set_screen]  from print_set_screen
  [892] return 
  to:@return

null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@14 blocks: mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@30 blocks: mode_ctrl::@30 mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@14 blocks: mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@30 blocks: mode_ctrl::@30 mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@14 blocks: mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@30 blocks: mode_ctrl::@30 mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@14 blocks: mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@30 blocks: mode_ctrl::@30 mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@14 blocks: mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@30 blocks: mode_ctrl::@30 mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@14 blocks: mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@30 blocks: mode_ctrl::@30 mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@14 blocks: mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@30 blocks: mode_ctrl::@30 mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@14 blocks: mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@30 blocks: mode_ctrl::@30 mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@14 blocks: mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@30 blocks: mode_ctrl::@30 mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@14 blocks: mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@30 blocks: mode_ctrl::@30 mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@14 blocks: mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@30 blocks: mode_ctrl::@30 mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@14 blocks: mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@30 blocks: mode_ctrl::@30 mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@14 blocks: mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@30 blocks: mode_ctrl::@30 mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@14 blocks: mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@30 blocks: mode_ctrl::@30 mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@14 blocks: mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@30 blocks: mode_ctrl::@30 mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@14 blocks: mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed
null depth in calling loop Loop head: mode_ctrl::@1 tails: mode_ctrl::@30 blocks: mode_ctrl::@30 mode_ctrl::@14 mode_ctrl::@39 mode_ctrl::@46 mode_ctrl::@13 mode_ctrl::@28 mode_ctrl::@38 mode_ctrl::@12 mode_ctrl::@27 mode_ctrl::@37 mode_ctrl::@11 mode_ctrl::@26 mode_ctrl::@36 mode_ctrl::@10 mode_ctrl::@25 mode_ctrl::@35 mode_ctrl::@9 mode_ctrl::@24 mode_ctrl::@34 mode_ctrl::@8 mode_ctrl::@23 mode_ctrl::@33 mode_ctrl::@7 mode_ctrl::@32 mode_ctrl::@6 mode_ctrl::@4 mode_ctrl::@1  in scope keyboard_key_pressed

VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(byte) BROWN
(byte*) CHARGEN
(byte*) CIA1_INTERRUPT
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_INTERRUPT
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte) CIA_INTERRUPT_CLEAR
(byte*) COLS
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DARK_GREY
(byte) DTV_BADLINE_OFF
(byte*) DTV_BLITTER_ALU
(byte*) DTV_BLITTER_CONTROL
(byte*) DTV_BLITTER_CONTROL2
(byte*) DTV_BLITTER_DEST_HI
(byte*) DTV_BLITTER_DEST_LIN_HI
(byte*) DTV_BLITTER_DEST_LIN_LO
(byte*) DTV_BLITTER_DEST_LO
(byte*) DTV_BLITTER_DEST_MI
(byte*) DTV_BLITTER_DEST_MOD_HI
(byte*) DTV_BLITTER_DEST_MOD_LO
(byte*) DTV_BLITTER_DEST_STEP
(byte*) DTV_BLITTER_LEN_HI
(byte*) DTV_BLITTER_LEN_LO
(byte*) DTV_BLITTER_SRCA_HI
(byte*) DTV_BLITTER_SRCA_LIN_HI
(byte*) DTV_BLITTER_SRCA_LIN_LO
(byte*) DTV_BLITTER_SRCA_LO
(byte*) DTV_BLITTER_SRCA_MI
(byte*) DTV_BLITTER_SRCA_MOD_HI
(byte*) DTV_BLITTER_SRCA_MOD_LO
(byte*) DTV_BLITTER_SRCA_STEP
(byte*) DTV_BLITTER_SRCB_HI
(byte*) DTV_BLITTER_SRCB_LIN_HI
(byte*) DTV_BLITTER_SRCB_LIN_LO
(byte*) DTV_BLITTER_SRCB_LO
(byte*) DTV_BLITTER_SRCB_MI
(byte*) DTV_BLITTER_SRCB_MOD_HI
(byte*) DTV_BLITTER_SRCB_MOD_LO
(byte*) DTV_BLITTER_SRCB_STEP
(byte*) DTV_BLITTER_TRANSPARANCY
(byte) DTV_BLIT_ADD
(byte) DTV_BLIT_AND
(byte) DTV_BLIT_CIA_IRQ
(byte) DTV_BLIT_CLEAR_IRQ
(byte) DTV_BLIT_DEST_CONT
(byte) DTV_BLIT_DEST_FWD
(byte) DTV_BLIT_DISABLE_B
(byte) DTV_BLIT_FORCE_START
(byte) DTV_BLIT_IRQ_EN
(byte) DTV_BLIT_NAND
(byte) DTV_BLIT_NOR
(byte) DTV_BLIT_OR
(byte) DTV_BLIT_SHIFT0
(byte) DTV_BLIT_SHIFT1
(byte) DTV_BLIT_SHIFT2
(byte) DTV_BLIT_SHIFT3
(byte) DTV_BLIT_SHIFT4
(byte) DTV_BLIT_SHIFT5
(byte) DTV_BLIT_SHIFT6
(byte) DTV_BLIT_SHIFT7
(byte) DTV_BLIT_SRCA_CONT
(byte) DTV_BLIT_SRCA_FWD
(byte) DTV_BLIT_SRCB_CONT
(byte) DTV_BLIT_SRCB_FWD
(byte) DTV_BLIT_STATUS_BUSY
(byte) DTV_BLIT_STATUS_IRQ
(byte) DTV_BLIT_SUB
(byte) DTV_BLIT_TRANSPARANCY_NONE
(byte) DTV_BLIT_VBLANK
(byte) DTV_BLIT_VIC_IRQ
(byte) DTV_BLIT_WRITE_NONTRANSPARENT
(byte) DTV_BLIT_WRITE_TRANSPARENT
(byte) DTV_BLIT_XNOR
(byte) DTV_BLIT_XOR
(byte) DTV_BORDER_OFF
(byte) DTV_CHUNKY
(byte) DTV_COLORRAM_OFF
(dword) DTV_COLOR_BANK_DEFAULT
(byte*) DTV_COLOR_BANK_HI
(byte*) DTV_COLOR_BANK_LO
(byte*) DTV_CONTROL
(byte*) DTV_FEATURE
(byte) DTV_FEATURE_DISABLE_TIL_RESET
(byte) DTV_FEATURE_ENABLE
(byte*) DTV_GRAPHICS_HICOL_BANK
(byte*) DTV_GRAPHICS_VIC_BANK
(byte) DTV_HIGHCOLOR
(byte) DTV_LINEAR
(byte) DTV_OVERSCAN
(byte*) DTV_PALETTE
(byte[$10]) DTV_PALETTE_DEFAULT
(byte*) DTV_PLANEA_MODULO_HI
(byte*) DTV_PLANEA_MODULO_LO
(byte*) DTV_PLANEA_START_HI
(byte*) DTV_PLANEA_START_LO
(byte*) DTV_PLANEA_START_MI
(byte*) DTV_PLANEA_STEP
(byte*) DTV_PLANEB_MODULO_HI
(byte*) DTV_PLANEB_MODULO_LO
(byte*) DTV_PLANEB_START_HI
(byte*) DTV_PLANEB_START_LO
(byte*) DTV_PLANEB_START_MI
(byte*) DTV_PLANEB_STEP
(byte*) DTV_SPRITE_BANK
(byte) GREEN
(byte) GREY
(void()**) HARDWARE_IRQ
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_SPRITE
(byte*) IRQ_ENABLE
(byte) IRQ_LIGHTPEN
(byte) IRQ_RASTER
(byte*) IRQ_STATUS
(void()**) KERNEL_IRQ
(byte) KEY_0
(byte) KEY_1
(byte) KEY_2
(byte) KEY_3
(byte) KEY_4
(byte) KEY_5
(byte) KEY_6
(byte) KEY_7
(byte) KEY_8
(byte) KEY_9
(byte) KEY_A
(byte) KEY_ARROW_LEFT
(byte) KEY_ARROW_UP
(byte) KEY_ASTERISK
(byte) KEY_AT
(byte) KEY_B
(byte) KEY_C
(byte) KEY_COLON
(byte) KEY_COMMA
(byte) KEY_COMMODORE
(byte) KEY_CRSR_DOWN
(byte) KEY_CRSR_RIGHT
(byte) KEY_CTRL
(byte) KEY_D
(byte) KEY_DEL
(byte) KEY_DOT
(byte) KEY_E
(byte) KEY_EQUALS
(byte) KEY_F
(byte) KEY_F1
(byte) KEY_F3
(byte) KEY_F5
(byte) KEY_F7
(byte) KEY_G
(byte) KEY_H
(byte) KEY_HOME
(byte) KEY_I
(byte) KEY_J
(byte) KEY_K
(byte) KEY_L
(byte) KEY_LSHIFT
(byte) KEY_M
(byte) KEY_MINUS
(byte) KEY_MODIFIER_COMMODORE
(byte) KEY_MODIFIER_CTRL
(byte) KEY_MODIFIER_LSHIFT
(byte) KEY_MODIFIER_RSHIFT
(byte) KEY_MODIFIER_SHIFT
(byte) KEY_N
(byte) KEY_O
(byte) KEY_P
(byte) KEY_PLUS
(byte) KEY_POUND
(byte) KEY_Q
(byte) KEY_R
(byte) KEY_RETURN
(byte) KEY_RSHIFT
(byte) KEY_RUNSTOP
(byte) KEY_S
(byte) KEY_SEMICOLON
(byte) KEY_SLASH
(byte) KEY_SPACE
(byte) KEY_T
(byte) KEY_U
(byte) KEY_V
(byte) KEY_W
(byte) KEY_X
(byte) KEY_Y
(byte) KEY_Z
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_Y
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte[]) MENU_TEXT
(byte) ORANGE
(byte) PINK
(byte*) PROCPORT
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(byte) PURPLE
(byte*) RASTER
(byte) RED
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(word) SPRITE_PTRS
(byte) VIC_BMM
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte) VIC_RST8
(byte) WHITE
(byte) YELLOW
(void()) bitmap_clear()
(word~) bitmap_clear::$3 2.0
(byte*) bitmap_clear::bitmap
(byte*) bitmap_clear::bitmap#1 420.59999999999997
(byte*) bitmap_clear::bitmap#2 1552.0
(byte*) bitmap_clear::bitmap#3 204.0
(byte*~) bitmap_clear::bitmap#5 4.0
(byte) bitmap_clear::x
(byte) bitmap_clear::x#1 1501.5
(byte) bitmap_clear::x#2 667.3333333333334
(byte) bitmap_clear::y
(byte) bitmap_clear::y#1 151.5
(byte) bitmap_clear::y#4 33.666666666666664
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(byte~) bitmap_init::$0 202.0
(byte~) bitmap_init::$10 202.0
(byte~) bitmap_init::$6 101.0
(byte~) bitmap_init::$7 202.0
(byte~) bitmap_init::$8 202.0
(byte~) bitmap_init::$9 202.0
(byte*) bitmap_init::bitmap
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 101.0
(byte) bitmap_init::bits#3 60.599999999999994
(byte) bitmap_init::bits#4 67.33333333333333
(byte) bitmap_init::x
(byte) bitmap_init::x#1 151.5
(byte) bitmap_init::x#2 67.33333333333333
(byte) bitmap_init::y
(byte) bitmap_init::y#1 151.5
(byte) bitmap_init::y#2 55.090909090909086
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 202.0
(byte*) bitmap_init::yoffs#2 56.11111111111111
(byte*) bitmap_init::yoffs#4 101.0
(void()) bitmap_line((byte) bitmap_line::x0 , (byte) bitmap_line::x1 , (byte) bitmap_line::y0 , (byte) bitmap_line::y1)
(byte) bitmap_line::x0
(byte) bitmap_line::x0#0 5.173913043478264
(byte) bitmap_line::x1
(byte) bitmap_line::x1#0 5.409090909090908
(byte) bitmap_line::xd
(byte) bitmap_line::xd#1 0.7
(byte) bitmap_line::xd#2 0.7
(byte) bitmap_line::y0
(byte) bitmap_line::y0#0 5.952380952380948
(byte) bitmap_line::y1
(byte) bitmap_line::y1#0 6.249999999999996
(byte) bitmap_line::yd
(byte) bitmap_line::yd#1 0.8888888888888888
(byte) bitmap_line::yd#10 0.8888888888888888
(byte) bitmap_line::yd#11 0.8888888888888888
(byte) bitmap_line::yd#2 0.8888888888888888
(void()) bitmap_line_xdyd((byte) bitmap_line_xdyd::x , (byte) bitmap_line_xdyd::y , (byte) bitmap_line_xdyd::x1 , (byte) bitmap_line_xdyd::xd , (byte) bitmap_line_xdyd::yd)
(byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6 2002.0
(byte) bitmap_line_xdyd::e
(byte) bitmap_line_xdyd::e#0 4.0
(byte) bitmap_line_xdyd::e#1 1334.6666666666667
(byte) bitmap_line_xdyd::e#2 2002.0
(byte) bitmap_line_xdyd::e#3 400.79999999999995
(byte) bitmap_line_xdyd::e#6 1001.0
(byte) bitmap_line_xdyd::x
(byte) bitmap_line_xdyd::x#0 0.8
(byte) bitmap_line_xdyd::x#1 0.8
(byte) bitmap_line_xdyd::x#2 375.375
(byte) bitmap_line_xdyd::x#3 751.25
(byte) bitmap_line_xdyd::x#6 3.0
(byte) bitmap_line_xdyd::x1
(byte) bitmap_line_xdyd::x1#0 1.3333333333333333
(byte) bitmap_line_xdyd::x1#1 1.3333333333333333
(byte) bitmap_line_xdyd::x1#6 71.78571428571429
(byte) bitmap_line_xdyd::xd
(byte) bitmap_line_xdyd::xd#0 2.0
(byte) bitmap_line_xdyd::xd#1 2.0
(byte) bitmap_line_xdyd::xd#5 143.28571428571428
(byte) bitmap_line_xdyd::y
(byte) bitmap_line_xdyd::y#0 1.0
(byte) bitmap_line_xdyd::y#1 1.0
(byte) bitmap_line_xdyd::y#2 1001.0
(byte) bitmap_line_xdyd::y#3 572.2857142857142
(byte) bitmap_line_xdyd::y#5 3.0
(byte) bitmap_line_xdyd::y#6 1001.0
(byte) bitmap_line_xdyd::yd
(byte) bitmap_line_xdyd::yd#0 4.0
(byte) bitmap_line_xdyd::yd#1 4.0
(byte) bitmap_line_xdyd::yd#2 71.92857142857143
(void()) bitmap_line_xdyi((byte) bitmap_line_xdyi::x , (byte) bitmap_line_xdyi::y , (byte) bitmap_line_xdyi::x1 , (byte) bitmap_line_xdyi::xd , (byte) bitmap_line_xdyi::yd)
(byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6 2002.0
(byte) bitmap_line_xdyi::e
(byte) bitmap_line_xdyi::e#0 4.0
(byte) bitmap_line_xdyi::e#1 1334.6666666666667
(byte) bitmap_line_xdyi::e#2 2002.0
(byte) bitmap_line_xdyi::e#3 400.79999999999995
(byte) bitmap_line_xdyi::e#6 1001.0
(byte) bitmap_line_xdyi::x
(byte) bitmap_line_xdyi::x#0 0.8
(byte) bitmap_line_xdyi::x#1 0.8
(byte) bitmap_line_xdyi::x#2 375.375
(byte) bitmap_line_xdyi::x#3 751.25
(byte) bitmap_line_xdyi::x#6 3.0
(byte) bitmap_line_xdyi::x1
(byte) bitmap_line_xdyi::x1#0 1.3333333333333333
(byte) bitmap_line_xdyi::x1#1 1.3333333333333333
(byte) bitmap_line_xdyi::x1#6 71.78571428571429
(byte) bitmap_line_xdyi::xd
(byte) bitmap_line_xdyi::xd#0 2.0
(byte) bitmap_line_xdyi::xd#1 2.0
(byte) bitmap_line_xdyi::xd#5 143.28571428571428
(byte) bitmap_line_xdyi::y
(byte) bitmap_line_xdyi::y#0 1.0
(byte) bitmap_line_xdyi::y#1 1.0
(byte) bitmap_line_xdyi::y#2 1001.0
(byte) bitmap_line_xdyi::y#3 572.2857142857142
(byte) bitmap_line_xdyi::y#5 3.0
(byte) bitmap_line_xdyi::y#6 1001.0
(byte) bitmap_line_xdyi::yd
(byte) bitmap_line_xdyi::yd#0 4.0
(byte) bitmap_line_xdyi::yd#1 4.0
(byte) bitmap_line_xdyi::yd#2 71.92857142857143
(void()) bitmap_line_ydxd((byte) bitmap_line_ydxd::y , (byte) bitmap_line_ydxd::x , (byte) bitmap_line_ydxd::y1 , (byte) bitmap_line_ydxd::yd , (byte) bitmap_line_ydxd::xd)
(byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6 2002.0
(byte) bitmap_line_ydxd::e
(byte) bitmap_line_ydxd::e#0 4.0
(byte) bitmap_line_ydxd::e#1 1334.6666666666667
(byte) bitmap_line_ydxd::e#2 2002.0
(byte) bitmap_line_ydxd::e#3 400.79999999999995
(byte) bitmap_line_ydxd::e#6 1001.0
(byte) bitmap_line_ydxd::x
(byte) bitmap_line_ydxd::x#0 1.0
(byte) bitmap_line_ydxd::x#1 1.0
(byte) bitmap_line_ydxd::x#2 1001.0
(byte) bitmap_line_ydxd::x#3 572.2857142857142
(byte) bitmap_line_ydxd::x#5 3.0
(byte) bitmap_line_ydxd::x#6 1001.0
(byte) bitmap_line_ydxd::xd
(byte) bitmap_line_ydxd::xd#0 4.0
(byte) bitmap_line_ydxd::xd#1 4.0
(byte) bitmap_line_ydxd::xd#2 71.92857142857143
(byte) bitmap_line_ydxd::y
(byte) bitmap_line_ydxd::y#0 0.8
(byte) bitmap_line_ydxd::y#1 0.8
(byte) bitmap_line_ydxd::y#2 751.25
(byte) bitmap_line_ydxd::y#3 375.375
(byte) bitmap_line_ydxd::y#7 3.0
(byte) bitmap_line_ydxd::y1
(byte) bitmap_line_ydxd::y1#0 1.3333333333333333
(byte) bitmap_line_ydxd::y1#1 1.3333333333333333
(byte) bitmap_line_ydxd::y1#6 71.78571428571429
(byte) bitmap_line_ydxd::yd
(byte) bitmap_line_ydxd::yd#0 2.0
(byte) bitmap_line_ydxd::yd#1 2.0
(byte) bitmap_line_ydxd::yd#5 143.28571428571428
(void()) bitmap_line_ydxi((byte) bitmap_line_ydxi::y , (byte) bitmap_line_ydxi::x , (byte) bitmap_line_ydxi::y1 , (byte) bitmap_line_ydxi::yd , (byte) bitmap_line_ydxi::xd)
(byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6 2002.0
(byte) bitmap_line_ydxi::e
(byte) bitmap_line_ydxi::e#0 4.0
(byte) bitmap_line_ydxi::e#1 1334.6666666666667
(byte) bitmap_line_ydxi::e#2 2002.0
(byte) bitmap_line_ydxi::e#3 400.79999999999995
(byte) bitmap_line_ydxi::e#6 1001.0
(byte) bitmap_line_ydxi::x
(byte) bitmap_line_ydxi::x#0 1.0
(byte) bitmap_line_ydxi::x#1 1.0
(byte) bitmap_line_ydxi::x#2 1001.0
(byte) bitmap_line_ydxi::x#3 572.2857142857142
(byte) bitmap_line_ydxi::x#5 3.0
(byte) bitmap_line_ydxi::x#6 1001.0
(byte) bitmap_line_ydxi::xd
(byte) bitmap_line_ydxi::xd#0 4.0
(byte) bitmap_line_ydxi::xd#1 4.0
(byte) bitmap_line_ydxi::xd#2 71.92857142857143
(byte) bitmap_line_ydxi::y
(byte) bitmap_line_ydxi::y#0 0.8
(byte) bitmap_line_ydxi::y#1 0.8
(byte) bitmap_line_ydxi::y#2 375.375
(byte) bitmap_line_ydxi::y#3 751.25
(byte) bitmap_line_ydxi::y#6 3.0
(byte) bitmap_line_ydxi::y1
(byte) bitmap_line_ydxi::y1#0 1.3333333333333333
(byte) bitmap_line_ydxi::y1#1 1.3333333333333333
(byte) bitmap_line_ydxi::y1#6 71.78571428571429
(byte) bitmap_line_ydxi::yd
(byte) bitmap_line_ydxi::yd#0 2.0
(byte) bitmap_line_ydxi::yd#1 2.0
(byte) bitmap_line_ydxi::yd#5 143.28571428571428
(void()) bitmap_plot((byte) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$0 1.0
(byte~) bitmap_plot::$1 4.0
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter_x
(word) bitmap_plot::plotter_x#0 2.0
(word) bitmap_plot::plotter_y
(word) bitmap_plot::plotter_y#0 4.0
(byte) bitmap_plot::x
(byte) bitmap_plot::x#0 1001.0
(byte) bitmap_plot::x#1 1001.0
(byte) bitmap_plot::x#2 1001.0
(byte) bitmap_plot::x#3 1001.0
(byte) bitmap_plot::x#4 1002.5
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 2002.0
(byte) bitmap_plot::y#1 2002.0
(byte) bitmap_plot::y#2 2002.0
(byte) bitmap_plot::y#3 2002.0
(byte) bitmap_plot::y#4 2004.0
(byte[$100]) bitmap_plot_bit
(byte[$100]) bitmap_plot_xhi
(byte[$100]) bitmap_plot_xlo
(byte[$100]) bitmap_plot_yhi
(byte[$100]) bitmap_plot_ylo
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(byte*) dtvSetCpuBankSegment1::cpuBank
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 2002.0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#3 1003.0
(byte) dtv_control
(byte) dtv_control#114 42.099999999999994
(byte) dtv_control#145 2.0
(byte) dtv_control#17 67.33333333333333
(byte[]) keyboard_char_keycodes
(byte[8]) keyboard_events
(byte) keyboard_events_size
(byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
(byte~) keyboard_key_pressed::$2 4.0
(byte) keyboard_key_pressed::colidx
(byte) keyboard_key_pressed::colidx#0 0.6666666666666666
(byte) keyboard_key_pressed::key
(byte) keyboard_key_pressed::key#20 2.0
(byte) keyboard_key_pressed::return
(byte) keyboard_key_pressed::return#0 419.1818181818182
(byte) keyboard_key_pressed::return#10 202.0
(byte) keyboard_key_pressed::return#11 202.0
(byte) keyboard_key_pressed::return#12 202.0
(byte) keyboard_key_pressed::return#13 202.0
(byte) keyboard_key_pressed::return#14 2002.0
(byte) keyboard_key_pressed::return#15 2002.0
(byte) keyboard_key_pressed::return#16 2002.0
(byte) keyboard_key_pressed::return#17 2002.0
(byte) keyboard_key_pressed::return#18 2002.0
(byte) keyboard_key_pressed::return#19 2002.0
(byte) keyboard_key_pressed::return#2 202.0
(byte) keyboard_key_pressed::return#20 2002.0
(byte) keyboard_key_pressed::return#21 2002.0
(byte) keyboard_key_pressed::return#24 202.0
(byte) keyboard_key_pressed::return#25 202.0
(byte) keyboard_key_pressed::return#26 202.0
(byte) keyboard_key_pressed::return#27 202.0
(byte) keyboard_key_pressed::return#28 202.0
(byte) keyboard_key_pressed::return#29 202.0
(byte) keyboard_key_pressed::return#30 202.0
(byte) keyboard_key_pressed::rowidx
(byte) keyboard_key_pressed::rowidx#0 4.0
(byte[8]) keyboard_matrix_col_bitmask
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 1.3333333333333333
(byte) keyboard_matrix_read::return#2 4.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 4.0
(byte[8]) keyboard_matrix_row_bitmask
(byte) keyboard_modifiers
(byte[8]) keyboard_scan_values
(void()) main()
(void()) menu()
(byte~) menu::$29 202.0
(byte~) menu::$33 202.0
(byte~) menu::$37 202.0
(byte~) menu::$41 202.0
(byte~) menu::$45 202.0
(byte~) menu::$49 202.0
(byte~) menu::$53 202.0
(byte~) menu::$57 202.0
(byte~) menu::$61 202.0
(byte~) menu::$65 202.0
(byte~) menu::$69 202.0
(byte~) menu::$73 202.0
(byte*) menu::CHARSET
(byte*) menu::SCREEN
(byte*) menu::c
(byte*) menu::c#1 151.5
(byte*) menu::c#2 151.5
(byte) menu::i
(byte) menu::i#1 151.5
(byte) menu::i#2 202.0
(void()) mode_8bppchunkybmm()
(word~) mode_8bppchunkybmm::$23 2002.0
(dword) mode_8bppchunkybmm::PLANEB
(byte) mode_8bppchunkybmm::c
(byte) mode_8bppchunkybmm::c#0 2002.0
(byte*) mode_8bppchunkybmm::gfxb
(byte*) mode_8bppchunkybmm::gfxb#1 420.59999999999997
(byte*) mode_8bppchunkybmm::gfxb#3 1552.0
(byte*) mode_8bppchunkybmm::gfxb#4 750.75
(byte*) mode_8bppchunkybmm::gfxb#5 202.0
(byte) mode_8bppchunkybmm::gfxbCpuBank
(byte) mode_8bppchunkybmm::gfxbCpuBank#2 2002.0
(byte) mode_8bppchunkybmm::gfxbCpuBank#4 1026.25
(byte) mode_8bppchunkybmm::gfxbCpuBank#7 202.0
(byte) mode_8bppchunkybmm::gfxbCpuBank#8 344.8888888888889
(byte) mode_8bppchunkybmm::i
(byte) mode_8bppchunkybmm::i#1 151.5
(byte) mode_8bppchunkybmm::i#2 202.0
(word) mode_8bppchunkybmm::x
(word) mode_8bppchunkybmm::x#1 1501.5
(word) mode_8bppchunkybmm::x#2 300.29999999999995
(byte) mode_8bppchunkybmm::y
(byte) mode_8bppchunkybmm::y#1 151.5
(byte) mode_8bppchunkybmm::y#6 92.53846153846155
(void()) mode_8bpppixelcell()
(byte~) mode_8bpppixelcell::$13 2002.0
(byte~) mode_8bpppixelcell::$14 1001.0
(byte~) mode_8bpppixelcell::$15 2002.0
(byte~) mode_8bpppixelcell::$16 2002.0
(byte~) mode_8bpppixelcell::$19 20002.0
(byte*) mode_8bpppixelcell::CHARGEN
(byte*) mode_8bpppixelcell::PLANEA
(byte*) mode_8bpppixelcell::PLANEB
(byte) mode_8bpppixelcell::ax
(byte) mode_8bpppixelcell::ax#1 1501.5
(byte) mode_8bpppixelcell::ax#2 429.0
(byte) mode_8bpppixelcell::ay
(byte) mode_8bpppixelcell::ay#1 151.5
(byte) mode_8bpppixelcell::ay#4 120.29999999999998
(byte) mode_8bpppixelcell::bits
(byte) mode_8bpppixelcell::bits#0 1001.0
(byte) mode_8bpppixelcell::bits#1 5000.5
(byte) mode_8bpppixelcell::bits#2 4429.142857142857
(byte) mode_8bpppixelcell::c
(byte) mode_8bpppixelcell::c#2 20002.0
(byte~) mode_8bpppixelcell::c#3 20002.0
(byte) mode_8bpppixelcell::ch
(byte) mode_8bpppixelcell::ch#1 151.5
(byte) mode_8bpppixelcell::ch#8 11.882352941176471
(byte*) mode_8bpppixelcell::chargen
(byte*) mode_8bpppixelcell::chargen#1 131.4375
(byte*) mode_8bpppixelcell::chargen#2 1552.0
(byte*) mode_8bpppixelcell::chargen#4 202.0
(byte) mode_8bpppixelcell::col
(byte) mode_8bpppixelcell::col#1 3014.857142857143
(byte) mode_8bpppixelcell::col#2 3875.5
(byte) mode_8bpppixelcell::col#5 701.0
(byte) mode_8bpppixelcell::col#7 202.0
(byte) mode_8bpppixelcell::cp
(byte) mode_8bpppixelcell::cp#1 15001.5
(byte) mode_8bpppixelcell::cp#2 2222.4444444444443
(byte) mode_8bpppixelcell::cr
(byte) mode_8bpppixelcell::cr#1 1501.5
(byte) mode_8bpppixelcell::cr#6 143.0
(byte*) mode_8bpppixelcell::gfxa
(byte*) mode_8bpppixelcell::gfxa#1 420.59999999999997
(byte*) mode_8bpppixelcell::gfxa#2 517.3333333333334
(byte*) mode_8bpppixelcell::gfxa#3 202.0
(byte*) mode_8bpppixelcell::gfxb
(byte*) mode_8bpppixelcell::gfxb#1 2344.8888888888887
(byte*) mode_8bpppixelcell::gfxb#2 5167.333333333333
(byte*) mode_8bpppixelcell::gfxb#5 701.0
(byte*) mode_8bpppixelcell::gfxb#7 202.0
(byte) mode_8bpppixelcell::i
(byte) mode_8bpppixelcell::i#1 151.5
(byte) mode_8bpppixelcell::i#2 202.0
(void()) mode_ctrl()
(byte~) mode_ctrl::$1 2002.0
(byte~) mode_ctrl::$12 2002.0
(byte~) mode_ctrl::$16 2002.0
(byte~) mode_ctrl::$20 2002.0
(byte~) mode_ctrl::$24 2002.0
(byte~) mode_ctrl::$28 2002.0
(byte~) mode_ctrl::$4 2002.0
(byte~) mode_ctrl::$8 2002.0
(byte) mode_ctrl::ctrl
(byte) mode_ctrl::ctrl#0 600.5999999999999
(byte) mode_ctrl::ctrl#1 2002.0
(byte) mode_ctrl::ctrl#10 800.8
(byte) mode_ctrl::ctrl#11 800.8
(byte) mode_ctrl::ctrl#12 800.8
(byte) mode_ctrl::ctrl#13 800.8
(byte) mode_ctrl::ctrl#14 576.25
(byte) mode_ctrl::ctrl#17 800.8
(byte) mode_ctrl::ctrl#2 2002.0
(byte) mode_ctrl::ctrl#22 500.5
(byte) mode_ctrl::ctrl#3 2002.0
(byte) mode_ctrl::ctrl#4 2002.0
(byte) mode_ctrl::ctrl#5 2002.0
(byte) mode_ctrl::ctrl#6 2002.0
(void()) mode_ecmchar()
(byte~) mode_ecmchar::$25 2002.0
(byte~) mode_ecmchar::$26 2002.0
(byte~) mode_ecmchar::$27 2002.0
(byte~) mode_ecmchar::$28 1001.0
(byte~) mode_ecmchar::$29 2002.0
(byte~) mode_ecmchar::$30 2002.0
(byte*) mode_ecmchar::CHARSET
(byte*) mode_ecmchar::COLORS
(byte*) mode_ecmchar::SCREEN
(byte*) mode_ecmchar::ch
(byte*) mode_ecmchar::ch#1 420.59999999999997
(byte*) mode_ecmchar::ch#2 310.4
(byte*) mode_ecmchar::ch#3 202.0
(byte*) mode_ecmchar::col
(byte*) mode_ecmchar::col#1 191.1818181818182
(byte*) mode_ecmchar::col#2 776.0
(byte*) mode_ecmchar::col#3 202.0
(byte) mode_ecmchar::cx
(byte) mode_ecmchar::cx#1 1501.5
(byte) mode_ecmchar::cx#2 364.0
(byte) mode_ecmchar::cy
(byte) mode_ecmchar::cy#1 151.5
(byte) mode_ecmchar::cy#4 157.42857142857144
(byte) mode_ecmchar::i
(byte) mode_ecmchar::i#1 151.5
(byte) mode_ecmchar::i#2 202.0
(void()) mode_hicolecmchar()
(byte~) mode_hicolecmchar::$25 2002.0
(byte~) mode_hicolecmchar::$26 1001.0
(byte~) mode_hicolecmchar::$27 2002.0
(byte*) mode_hicolecmchar::CHARSET
(byte*) mode_hicolecmchar::COLORS
(byte*) mode_hicolecmchar::SCREEN
(byte*) mode_hicolecmchar::ch
(byte*) mode_hicolecmchar::ch#1 420.59999999999997
(byte*) mode_hicolecmchar::ch#2 388.0
(byte*) mode_hicolecmchar::ch#3 202.0
(byte*) mode_hicolecmchar::col
(byte*) mode_hicolecmchar::col#1 300.42857142857144
(byte*) mode_hicolecmchar::col#2 517.3333333333334
(byte*) mode_hicolecmchar::col#3 202.0
(byte) mode_hicolecmchar::cx
(byte) mode_hicolecmchar::cx#1 1501.5
(byte) mode_hicolecmchar::cx#2 333.6666666666667
(byte) mode_hicolecmchar::cy
(byte) mode_hicolecmchar::cy#1 151.5
(byte) mode_hicolecmchar::cy#4 100.25000000000001
(byte) mode_hicolecmchar::i
(byte) mode_hicolecmchar::i#1 151.5
(byte) mode_hicolecmchar::i#2 202.0
(byte) mode_hicolecmchar::v
(byte) mode_hicolecmchar::v#0 1001.0
(void()) mode_hicolmcchar()
(byte~) mode_hicolmcchar::$25 2002.0
(byte~) mode_hicolmcchar::$26 1001.0
(byte~) mode_hicolmcchar::$27 2002.0
(byte*) mode_hicolmcchar::CHARSET
(byte*) mode_hicolmcchar::COLORS
(byte*) mode_hicolmcchar::SCREEN
(byte*) mode_hicolmcchar::ch
(byte*) mode_hicolmcchar::ch#1 420.59999999999997
(byte*) mode_hicolmcchar::ch#2 388.0
(byte*) mode_hicolmcchar::ch#3 202.0
(byte*) mode_hicolmcchar::col
(byte*) mode_hicolmcchar::col#1 300.42857142857144
(byte*) mode_hicolmcchar::col#2 517.3333333333334
(byte*) mode_hicolmcchar::col#3 202.0
(byte) mode_hicolmcchar::cx
(byte) mode_hicolmcchar::cx#1 1501.5
(byte) mode_hicolmcchar::cx#2 333.6666666666667
(byte) mode_hicolmcchar::cy
(byte) mode_hicolmcchar::cy#1 151.5
(byte) mode_hicolmcchar::cy#4 100.25000000000001
(byte) mode_hicolmcchar::i
(byte) mode_hicolmcchar::i#1 151.5
(byte) mode_hicolmcchar::i#2 202.0
(byte) mode_hicolmcchar::v
(byte) mode_hicolmcchar::v#0 1001.0
(void()) mode_hicolstdchar()
(byte~) mode_hicolstdchar::$24 2002.0
(byte~) mode_hicolstdchar::$25 1001.0
(byte~) mode_hicolstdchar::$26 2002.0
(byte*) mode_hicolstdchar::CHARSET
(byte*) mode_hicolstdchar::COLORS
(byte*) mode_hicolstdchar::SCREEN
(byte*) mode_hicolstdchar::ch
(byte*) mode_hicolstdchar::ch#1 420.59999999999997
(byte*) mode_hicolstdchar::ch#2 388.0
(byte*) mode_hicolstdchar::ch#3 202.0
(byte*) mode_hicolstdchar::col
(byte*) mode_hicolstdchar::col#1 300.42857142857144
(byte*) mode_hicolstdchar::col#2 517.3333333333334
(byte*) mode_hicolstdchar::col#3 202.0
(byte) mode_hicolstdchar::cx
(byte) mode_hicolstdchar::cx#1 1501.5
(byte) mode_hicolstdchar::cx#2 333.6666666666667
(byte) mode_hicolstdchar::cy
(byte) mode_hicolstdchar::cy#1 151.5
(byte) mode_hicolstdchar::cy#4 100.25000000000001
(byte) mode_hicolstdchar::i
(byte) mode_hicolstdchar::i#1 151.5
(byte) mode_hicolstdchar::i#2 202.0
(byte) mode_hicolstdchar::v
(byte) mode_hicolstdchar::v#0 1001.0
(void()) mode_mcchar()
(byte~) mode_mcchar::$25 2002.0
(byte~) mode_mcchar::$26 2002.0
(byte~) mode_mcchar::$27 2002.0
(byte~) mode_mcchar::$28 1001.0
(byte~) mode_mcchar::$29 2002.0
(byte~) mode_mcchar::$30 2002.0
(byte*) mode_mcchar::CHARSET
(byte*) mode_mcchar::COLORS
(byte*) mode_mcchar::SCREEN
(byte*) mode_mcchar::ch
(byte*) mode_mcchar::ch#1 420.59999999999997
(byte*) mode_mcchar::ch#2 310.4
(byte*) mode_mcchar::ch#3 202.0
(byte*) mode_mcchar::col
(byte*) mode_mcchar::col#1 191.1818181818182
(byte*) mode_mcchar::col#2 776.0
(byte*) mode_mcchar::col#3 202.0
(byte) mode_mcchar::cx
(byte) mode_mcchar::cx#1 1501.5
(byte) mode_mcchar::cx#2 364.0
(byte) mode_mcchar::cy
(byte) mode_mcchar::cy#1 151.5
(byte) mode_mcchar::cy#4 157.42857142857144
(byte) mode_mcchar::i
(byte) mode_mcchar::i#1 151.5
(byte) mode_mcchar::i#2 202.0
(void()) mode_sixsfred()
(byte~) mode_sixsfred::$16 2002.0
(byte~) mode_sixsfred::$17 2002.0
(byte~) mode_sixsfred::$20 2002.0
(byte*) mode_sixsfred::COLORS
(byte*) mode_sixsfred::PLANEA
(byte*) mode_sixsfred::PLANEB
(byte) mode_sixsfred::ax
(byte) mode_sixsfred::ax#1 1501.5
(byte) mode_sixsfred::ax#2 400.4
(byte) mode_sixsfred::ay
(byte) mode_sixsfred::ay#1 151.5
(byte) mode_sixsfred::ay#4 150.375
(byte) mode_sixsfred::bx
(byte) mode_sixsfred::bx#1 1501.5
(byte) mode_sixsfred::bx#2 667.3333333333334
(byte) mode_sixsfred::by
(byte) mode_sixsfred::by#1 151.5
(byte) mode_sixsfred::by#4 33.666666666666664
(byte*) mode_sixsfred::col
(byte*) mode_sixsfred::col#1 420.59999999999997
(byte*) mode_sixsfred::col#2 776.0
(byte*) mode_sixsfred::col#3 202.0
(byte) mode_sixsfred::cx
(byte) mode_sixsfred::cx#1 1501.5
(byte) mode_sixsfred::cx#2 600.5999999999999
(byte) mode_sixsfred::cy
(byte) mode_sixsfred::cy#1 151.5
(byte) mode_sixsfred::cy#4 150.375
(byte*) mode_sixsfred::gfxa
(byte*) mode_sixsfred::gfxa#1 420.59999999999997
(byte*) mode_sixsfred::gfxa#2 776.0
(byte*) mode_sixsfred::gfxa#3 202.0
(byte*) mode_sixsfred::gfxb
(byte*) mode_sixsfred::gfxb#1 420.59999999999997
(byte*) mode_sixsfred::gfxb#2 1552.0
(byte*) mode_sixsfred::gfxb#3 202.0
(byte) mode_sixsfred::i
(byte) mode_sixsfred::i#1 151.5
(byte) mode_sixsfred::i#2 202.0
(byte) mode_sixsfred::row
(byte) mode_sixsfred::row#0 2002.0
(byte[]) mode_sixsfred::row_bitmask
(void()) mode_sixsfred2()
(byte~) mode_sixsfred2::$14 2002.0
(byte~) mode_sixsfred2::$15 1001.0
(byte~) mode_sixsfred2::$16 2002.0
(byte~) mode_sixsfred2::$17 2002.0
(byte~) mode_sixsfred2::$20 2002.0
(byte*) mode_sixsfred2::COLORS
(byte*) mode_sixsfred2::PLANEA
(byte*) mode_sixsfred2::PLANEB
(byte) mode_sixsfred2::ax
(byte) mode_sixsfred2::ax#1 1501.5
(byte) mode_sixsfred2::ax#2 400.4
(byte) mode_sixsfred2::ay
(byte) mode_sixsfred2::ay#1 151.5
(byte) mode_sixsfred2::ay#4 150.375
(byte) mode_sixsfred2::bx
(byte) mode_sixsfred2::bx#1 1501.5
(byte) mode_sixsfred2::bx#2 667.3333333333334
(byte) mode_sixsfred2::by
(byte) mode_sixsfred2::by#1 151.5
(byte) mode_sixsfred2::by#4 33.666666666666664
(byte*) mode_sixsfred2::col
(byte*) mode_sixsfred2::col#1 420.59999999999997
(byte*) mode_sixsfred2::col#2 517.3333333333334
(byte*) mode_sixsfred2::col#3 202.0
(byte) mode_sixsfred2::cx
(byte) mode_sixsfred2::cx#1 1501.5
(byte) mode_sixsfred2::cx#2 429.0
(byte) mode_sixsfred2::cy
(byte) mode_sixsfred2::cy#1 151.5
(byte) mode_sixsfred2::cy#4 120.29999999999998
(byte*) mode_sixsfred2::gfxa
(byte*) mode_sixsfred2::gfxa#1 420.59999999999997
(byte*) mode_sixsfred2::gfxa#2 776.0
(byte*) mode_sixsfred2::gfxa#3 202.0
(byte*) mode_sixsfred2::gfxb
(byte*) mode_sixsfred2::gfxb#1 420.59999999999997
(byte*) mode_sixsfred2::gfxb#2 1552.0
(byte*) mode_sixsfred2::gfxb#3 202.0
(byte) mode_sixsfred2::i
(byte) mode_sixsfred2::i#1 151.5
(byte) mode_sixsfred2::i#2 202.0
(byte) mode_sixsfred2::row
(byte) mode_sixsfred2::row#0 2002.0
(byte[]) mode_sixsfred2::row_bitmask
(void()) mode_stdbitmap()
(byte~) mode_stdbitmap::$19 2002.0
(byte~) mode_stdbitmap::$22 2002.0
(byte~) mode_stdbitmap::$23 2002.0
(byte*) mode_stdbitmap::BITMAP
(byte*) mode_stdbitmap::SCREEN
(byte*) mode_stdbitmap::ch
(byte*) mode_stdbitmap::ch#1 420.59999999999997
(byte*) mode_stdbitmap::ch#2 443.42857142857144
(byte*) mode_stdbitmap::ch#3 202.0
(byte) mode_stdbitmap::col
(byte) mode_stdbitmap::col#0 1501.5
(byte) mode_stdbitmap::col2
(byte) mode_stdbitmap::col2#0 1001.0
(byte) mode_stdbitmap::cx
(byte) mode_stdbitmap::cx#1 1501.5
(byte) mode_stdbitmap::cx#2 375.375
(byte) mode_stdbitmap::cy
(byte) mode_stdbitmap::cy#1 151.5
(byte) mode_stdbitmap::cy#4 109.36363636363637
(byte) mode_stdbitmap::i
(byte) mode_stdbitmap::i#1 151.5
(byte) mode_stdbitmap::i#2 202.0
(byte) mode_stdbitmap::l
(byte) mode_stdbitmap::l#1 151.5
(byte) mode_stdbitmap::l#2 100.99999999999999
(byte) mode_stdbitmap::lines_cnt
(byte[]) mode_stdbitmap::lines_x
(byte[]) mode_stdbitmap::lines_y
(void()) mode_stdchar()
(byte~) mode_stdchar::$24 2002.0
(byte~) mode_stdchar::$25 2002.0
(byte~) mode_stdchar::$26 2002.0
(byte~) mode_stdchar::$27 1001.0
(byte~) mode_stdchar::$28 2002.0
(byte~) mode_stdchar::$29 2002.0
(byte*) mode_stdchar::CHARSET
(byte*) mode_stdchar::COLORS
(byte*) mode_stdchar::SCREEN
(byte*) mode_stdchar::ch
(byte*) mode_stdchar::ch#1 420.59999999999997
(byte*) mode_stdchar::ch#2 310.4
(byte*) mode_stdchar::ch#3 202.0
(byte*) mode_stdchar::col
(byte*) mode_stdchar::col#1 191.1818181818182
(byte*) mode_stdchar::col#2 776.0
(byte*) mode_stdchar::col#3 202.0
(byte) mode_stdchar::cx
(byte) mode_stdchar::cx#1 1501.5
(byte) mode_stdchar::cx#2 364.0
(byte) mode_stdchar::cy
(byte) mode_stdchar::cy#1 151.5
(byte) mode_stdchar::cy#4 157.42857142857144
(byte) mode_stdchar::i
(byte) mode_stdchar::i#1 151.5
(byte) mode_stdchar::i#2 202.0
(void()) mode_twoplanebitmap()
(byte~) mode_twoplanebitmap::$15 2002.0
(byte~) mode_twoplanebitmap::$16 1001.0
(byte~) mode_twoplanebitmap::$17 2002.0
(byte~) mode_twoplanebitmap::$18 2002.0
(byte~) mode_twoplanebitmap::$21 2002.0
(byte*) mode_twoplanebitmap::COLORS
(byte*) mode_twoplanebitmap::PLANEA
(byte*) mode_twoplanebitmap::PLANEB
(byte) mode_twoplanebitmap::ax
(byte) mode_twoplanebitmap::ax#1 1501.5
(byte) mode_twoplanebitmap::ax#2 250.25
(byte) mode_twoplanebitmap::ay
(byte) mode_twoplanebitmap::ay#1 151.5
(byte) mode_twoplanebitmap::ay#4 109.36363636363637
(byte) mode_twoplanebitmap::bx
(byte) mode_twoplanebitmap::bx#1 1501.5
(byte) mode_twoplanebitmap::bx#2 667.3333333333334
(byte) mode_twoplanebitmap::by
(byte) mode_twoplanebitmap::by#1 151.5
(byte) mode_twoplanebitmap::by#4 33.666666666666664
(byte*) mode_twoplanebitmap::col
(byte*) mode_twoplanebitmap::col#1 420.59999999999997
(byte*) mode_twoplanebitmap::col#2 517.3333333333334
(byte*) mode_twoplanebitmap::col#3 202.0
(byte) mode_twoplanebitmap::cx
(byte) mode_twoplanebitmap::cx#1 1501.5
(byte) mode_twoplanebitmap::cx#2 429.0
(byte) mode_twoplanebitmap::cy
(byte) mode_twoplanebitmap::cy#1 151.5
(byte) mode_twoplanebitmap::cy#4 120.29999999999998
(byte*) mode_twoplanebitmap::gfxa
(byte*) mode_twoplanebitmap::gfxa#1 2002.0
(byte*) mode_twoplanebitmap::gfxa#2 2002.0
(byte*) mode_twoplanebitmap::gfxa#3 1021.2
(byte*) mode_twoplanebitmap::gfxa#6 202.0
(byte*) mode_twoplanebitmap::gfxa#7 620.8
(byte*) mode_twoplanebitmap::gfxb
(byte*) mode_twoplanebitmap::gfxb#1 420.59999999999997
(byte*) mode_twoplanebitmap::gfxb#2 1552.0
(byte*) mode_twoplanebitmap::gfxb#3 202.0
(byte) mode_twoplanebitmap::i
(byte) mode_twoplanebitmap::i#1 151.5
(byte) mode_twoplanebitmap::i#2 202.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 2002.0
(byte*~) print_char_cursor#103 202.0
(byte*) print_char_cursor#17 821.0
(byte*) print_char_cursor#19 101.0
(byte*) print_char_cursor#32 572.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 151.5
(byte*) print_cls::sc#2 151.5
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#17 8.583333333333332
(byte*) print_line_cursor#18 2004.0
(byte*) print_line_cursor#19 641.0
(void()) print_ln()
(byte*) print_screen
(void()) print_set_screen((byte*) print_set_screen::screen)
(byte*) print_set_screen::screen
(void()) print_str_lines((byte*) print_str_lines::str)
(byte) print_str_lines::ch
(byte) print_str_lines::ch#0 667.3333333333334
(byte*) print_str_lines::str
(byte*) print_str_lines::str#0 233.66666666666669
(byte*) print_str_lines::str#2 151.5
(byte*) print_str_lines::str#3 1552.0

Initial phi equivalence classes
[ menu::i#2 menu::i#1 ]
[ menu::c#2 menu::c#1 ]
[ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ]
[ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ]
[ mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 ]
[ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ]
[ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 ]
[ dtv_control#114 dtv_control#145 dtv_control#17 ]
[ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ]
[ keyboard_key_pressed::key#20 ]
[ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ]
[ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ]
[ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ]
[ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ]
[ mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 ]
[ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ]
[ mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 ]
[ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ]
[ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#0 mode_8bpppixelcell::bits#1 ]
[ mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 ]
[ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ]
[ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ]
[ mode_8bpppixelcell::c#2 mode_8bpppixelcell::c#3 ]
[ mode_sixsfred::i#2 mode_sixsfred::i#1 ]
[ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ]
[ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ]
[ mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 ]
[ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ]
[ mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 ]
[ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ]
[ mode_sixsfred::by#4 mode_sixsfred::by#1 ]
[ mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 ]
[ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ]
[ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ]
[ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ]
[ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ]
[ mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 ]
[ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ]
[ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ]
[ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
[ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
[ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ]
[ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
[ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ]
[ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ]
[ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ]
[ mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 ]
[ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ]
[ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 ]
[ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ]
[ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ]
[ mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ]
[ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ]
[ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ]
[ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ]
[ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ]
[ mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 ]
[ mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 ]
[ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ]
[ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ]
[ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ]
[ mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 ]
[ mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 ]
[ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ]
[ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ]
[ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ]
[ mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 ]
[ mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 ]
[ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ]
[ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ]
[ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ]
[ mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 ]
[ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ]
[ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
[ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
[ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
[ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
[ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
[ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
[ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
[ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
[ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#0 bitmap_line_ydxi::xd#1 ]
[ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 ]
[ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#0 bitmap_line_ydxi::y1#1 ]
[ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
[ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#2 ]
[ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
[ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
[ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
[ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
[ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
[ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
[ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
[ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
[ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
[ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
[ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
[ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
[ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
[ bitmap_clear::y#4 bitmap_clear::y#1 ]
[ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
[ bitmap_clear::x#2 bitmap_clear::x#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ mode_mcchar::i#2 mode_mcchar::i#1 ]
[ mode_mcchar::cy#4 mode_mcchar::cy#1 ]
[ mode_mcchar::cx#2 mode_mcchar::cx#1 ]
[ mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 ]
[ mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 ]
[ mode_ecmchar::i#2 mode_ecmchar::i#1 ]
[ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ]
[ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ]
[ mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 ]
[ mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 ]
[ mode_stdchar::i#2 mode_stdchar::i#1 ]
[ mode_stdchar::cy#4 mode_stdchar::cy#1 ]
[ mode_stdchar::cx#2 mode_stdchar::cx#1 ]
[ mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 ]
[ mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ]
[ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ]
[ print_char_cursor#17 print_char_cursor#19 print_char_cursor#103 print_char_cursor#32 print_char_cursor#1 ]
[ print_line_cursor#18 print_line_cursor#17 print_line_cursor#19 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable keyboard_key_pressed::return#2 to zero page equivalence class [ keyboard_key_pressed::return#2 ]
Added variable menu::$29 to zero page equivalence class [ menu::$29 ]
Added variable keyboard_key_pressed::return#24 to zero page equivalence class [ keyboard_key_pressed::return#24 ]
Added variable menu::$33 to zero page equivalence class [ menu::$33 ]
Added variable keyboard_key_pressed::return#25 to zero page equivalence class [ keyboard_key_pressed::return#25 ]
Added variable menu::$37 to zero page equivalence class [ menu::$37 ]
Added variable keyboard_key_pressed::return#26 to zero page equivalence class [ keyboard_key_pressed::return#26 ]
Added variable menu::$41 to zero page equivalence class [ menu::$41 ]
Added variable keyboard_key_pressed::return#27 to zero page equivalence class [ keyboard_key_pressed::return#27 ]
Added variable menu::$45 to zero page equivalence class [ menu::$45 ]
Added variable keyboard_key_pressed::return#28 to zero page equivalence class [ keyboard_key_pressed::return#28 ]
Added variable menu::$49 to zero page equivalence class [ menu::$49 ]
Added variable keyboard_key_pressed::return#29 to zero page equivalence class [ keyboard_key_pressed::return#29 ]
Added variable menu::$53 to zero page equivalence class [ menu::$53 ]
Added variable keyboard_key_pressed::return#30 to zero page equivalence class [ keyboard_key_pressed::return#30 ]
Added variable menu::$57 to zero page equivalence class [ menu::$57 ]
Added variable keyboard_key_pressed::return#10 to zero page equivalence class [ keyboard_key_pressed::return#10 ]
Added variable menu::$61 to zero page equivalence class [ menu::$61 ]
Added variable keyboard_key_pressed::return#11 to zero page equivalence class [ keyboard_key_pressed::return#11 ]
Added variable menu::$65 to zero page equivalence class [ menu::$65 ]
Added variable keyboard_key_pressed::return#12 to zero page equivalence class [ keyboard_key_pressed::return#12 ]
Added variable menu::$69 to zero page equivalence class [ menu::$69 ]
Added variable keyboard_key_pressed::return#13 to zero page equivalence class [ keyboard_key_pressed::return#13 ]
Added variable menu::$73 to zero page equivalence class [ menu::$73 ]
Added variable mode_8bppchunkybmm::$23 to zero page equivalence class [ mode_8bppchunkybmm::$23 ]
Added variable mode_8bppchunkybmm::c#0 to zero page equivalence class [ mode_8bppchunkybmm::c#0 ]
Added variable keyboard_key_pressed::return#14 to zero page equivalence class [ keyboard_key_pressed::return#14 ]
Added variable mode_ctrl::$1 to zero page equivalence class [ mode_ctrl::$1 ]
Added variable keyboard_key_pressed::return#15 to zero page equivalence class [ keyboard_key_pressed::return#15 ]
Added variable mode_ctrl::$4 to zero page equivalence class [ mode_ctrl::$4 ]
Added variable keyboard_key_pressed::return#16 to zero page equivalence class [ keyboard_key_pressed::return#16 ]
Added variable mode_ctrl::$8 to zero page equivalence class [ mode_ctrl::$8 ]
Added variable keyboard_key_pressed::return#17 to zero page equivalence class [ keyboard_key_pressed::return#17 ]
Added variable mode_ctrl::$12 to zero page equivalence class [ mode_ctrl::$12 ]
Added variable keyboard_key_pressed::return#18 to zero page equivalence class [ keyboard_key_pressed::return#18 ]
Added variable mode_ctrl::$16 to zero page equivalence class [ mode_ctrl::$16 ]
Added variable keyboard_key_pressed::return#19 to zero page equivalence class [ keyboard_key_pressed::return#19 ]
Added variable mode_ctrl::$20 to zero page equivalence class [ mode_ctrl::$20 ]
Added variable keyboard_key_pressed::return#20 to zero page equivalence class [ keyboard_key_pressed::return#20 ]
Added variable mode_ctrl::$24 to zero page equivalence class [ mode_ctrl::$24 ]
Added variable keyboard_key_pressed::return#21 to zero page equivalence class [ keyboard_key_pressed::return#21 ]
Added variable mode_ctrl::$28 to zero page equivalence class [ mode_ctrl::$28 ]
Added variable keyboard_key_pressed::colidx#0 to zero page equivalence class [ keyboard_key_pressed::colidx#0 ]
Added variable keyboard_key_pressed::rowidx#0 to zero page equivalence class [ keyboard_key_pressed::rowidx#0 ]
Added variable keyboard_matrix_read::rowid#0 to zero page equivalence class [ keyboard_matrix_read::rowid#0 ]
Added variable keyboard_matrix_read::return#2 to zero page equivalence class [ keyboard_matrix_read::return#2 ]
Added variable keyboard_key_pressed::$2 to zero page equivalence class [ keyboard_key_pressed::$2 ]
Added variable keyboard_key_pressed::return#0 to zero page equivalence class [ keyboard_key_pressed::return#0 ]
Added variable keyboard_matrix_read::return#0 to zero page equivalence class [ keyboard_matrix_read::return#0 ]
Added variable mode_8bpppixelcell::$13 to zero page equivalence class [ mode_8bpppixelcell::$13 ]
Added variable mode_8bpppixelcell::$14 to zero page equivalence class [ mode_8bpppixelcell::$14 ]
Added variable mode_8bpppixelcell::$15 to zero page equivalence class [ mode_8bpppixelcell::$15 ]
Added variable mode_8bpppixelcell::$16 to zero page equivalence class [ mode_8bpppixelcell::$16 ]
Added variable mode_8bpppixelcell::$19 to zero page equivalence class [ mode_8bpppixelcell::$19 ]
Added variable mode_sixsfred::$16 to zero page equivalence class [ mode_sixsfred::$16 ]
Added variable mode_sixsfred::$17 to zero page equivalence class [ mode_sixsfred::$17 ]
Added variable mode_sixsfred::$20 to zero page equivalence class [ mode_sixsfred::$20 ]
Added variable mode_sixsfred::row#0 to zero page equivalence class [ mode_sixsfred::row#0 ]
Added variable mode_twoplanebitmap::$15 to zero page equivalence class [ mode_twoplanebitmap::$15 ]
Added variable mode_twoplanebitmap::$16 to zero page equivalence class [ mode_twoplanebitmap::$16 ]
Added variable mode_twoplanebitmap::$17 to zero page equivalence class [ mode_twoplanebitmap::$17 ]
Added variable mode_twoplanebitmap::$18 to zero page equivalence class [ mode_twoplanebitmap::$18 ]
Added variable mode_twoplanebitmap::$21 to zero page equivalence class [ mode_twoplanebitmap::$21 ]
Added variable mode_sixsfred2::$14 to zero page equivalence class [ mode_sixsfred2::$14 ]
Added variable mode_sixsfred2::$15 to zero page equivalence class [ mode_sixsfred2::$15 ]
Added variable mode_sixsfred2::$16 to zero page equivalence class [ mode_sixsfred2::$16 ]
Added variable mode_sixsfred2::$17 to zero page equivalence class [ mode_sixsfred2::$17 ]
Added variable mode_sixsfred2::$20 to zero page equivalence class [ mode_sixsfred2::$20 ]
Added variable mode_sixsfred2::row#0 to zero page equivalence class [ mode_sixsfred2::row#0 ]
Added variable mode_hicolmcchar::$25 to zero page equivalence class [ mode_hicolmcchar::$25 ]
Added variable mode_hicolmcchar::$26 to zero page equivalence class [ mode_hicolmcchar::$26 ]
Added variable mode_hicolmcchar::$27 to zero page equivalence class [ mode_hicolmcchar::$27 ]
Added variable mode_hicolmcchar::v#0 to zero page equivalence class [ mode_hicolmcchar::v#0 ]
Added variable mode_hicolecmchar::$25 to zero page equivalence class [ mode_hicolecmchar::$25 ]
Added variable mode_hicolecmchar::$26 to zero page equivalence class [ mode_hicolecmchar::$26 ]
Added variable mode_hicolecmchar::$27 to zero page equivalence class [ mode_hicolecmchar::$27 ]
Added variable mode_hicolecmchar::v#0 to zero page equivalence class [ mode_hicolecmchar::v#0 ]
Added variable mode_hicolstdchar::$24 to zero page equivalence class [ mode_hicolstdchar::$24 ]
Added variable mode_hicolstdchar::$25 to zero page equivalence class [ mode_hicolstdchar::$25 ]
Added variable mode_hicolstdchar::$26 to zero page equivalence class [ mode_hicolstdchar::$26 ]
Added variable mode_hicolstdchar::v#0 to zero page equivalence class [ mode_hicolstdchar::v#0 ]
Added variable mode_stdbitmap::$19 to zero page equivalence class [ mode_stdbitmap::$19 ]
Added variable mode_stdbitmap::col#0 to zero page equivalence class [ mode_stdbitmap::col#0 ]
Added variable mode_stdbitmap::col2#0 to zero page equivalence class [ mode_stdbitmap::col2#0 ]
Added variable mode_stdbitmap::$22 to zero page equivalence class [ mode_stdbitmap::$22 ]
Added variable mode_stdbitmap::$23 to zero page equivalence class [ mode_stdbitmap::$23 ]
Added variable bitmap_line::x0#0 to zero page equivalence class [ bitmap_line::x0#0 ]
Added variable bitmap_line::x1#0 to zero page equivalence class [ bitmap_line::x1#0 ]
Added variable bitmap_line::y0#0 to zero page equivalence class [ bitmap_line::y0#0 ]
Added variable bitmap_line::y1#0 to zero page equivalence class [ bitmap_line::y1#0 ]
Added variable bitmap_line::xd#2 to zero page equivalence class [ bitmap_line::xd#2 ]
Added variable bitmap_line::yd#2 to zero page equivalence class [ bitmap_line::yd#2 ]
Added variable bitmap_line::yd#1 to zero page equivalence class [ bitmap_line::yd#1 ]
Added variable bitmap_line::xd#1 to zero page equivalence class [ bitmap_line::xd#1 ]
Added variable bitmap_line::yd#10 to zero page equivalence class [ bitmap_line::yd#10 ]
Added variable bitmap_line::yd#11 to zero page equivalence class [ bitmap_line::yd#11 ]
Added variable bitmap_line_xdyi::$6 to zero page equivalence class [ bitmap_line_xdyi::$6 ]
Added variable bitmap_plot::plotter_x#0 to zero page equivalence class [ bitmap_plot::plotter_x#0 ]
Added variable bitmap_plot::plotter_y#0 to zero page equivalence class [ bitmap_plot::plotter_y#0 ]
Added variable bitmap_plot::$0 to zero page equivalence class [ bitmap_plot::$0 ]
Added variable bitmap_plot::$1 to zero page equivalence class [ bitmap_plot::$1 ]
Added variable bitmap_line_ydxi::$6 to zero page equivalence class [ bitmap_line_ydxi::$6 ]
Added variable bitmap_line_xdyd::$6 to zero page equivalence class [ bitmap_line_xdyd::$6 ]
Added variable bitmap_line_ydxd::$6 to zero page equivalence class [ bitmap_line_ydxd::$6 ]
Added variable bitmap_clear::$3 to zero page equivalence class [ bitmap_clear::$3 ]
Added variable bitmap_init::$0 to zero page equivalence class [ bitmap_init::$0 ]
Added variable bitmap_init::$6 to zero page equivalence class [ bitmap_init::$6 ]
Added variable bitmap_init::$7 to zero page equivalence class [ bitmap_init::$7 ]
Added variable bitmap_init::$8 to zero page equivalence class [ bitmap_init::$8 ]
Added variable bitmap_init::$9 to zero page equivalence class [ bitmap_init::$9 ]
Added variable bitmap_init::$10 to zero page equivalence class [ bitmap_init::$10 ]
Added variable mode_mcchar::$25 to zero page equivalence class [ mode_mcchar::$25 ]
Added variable mode_mcchar::$26 to zero page equivalence class [ mode_mcchar::$26 ]
Added variable mode_mcchar::$27 to zero page equivalence class [ mode_mcchar::$27 ]
Added variable mode_mcchar::$28 to zero page equivalence class [ mode_mcchar::$28 ]
Added variable mode_mcchar::$29 to zero page equivalence class [ mode_mcchar::$29 ]
Added variable mode_mcchar::$30 to zero page equivalence class [ mode_mcchar::$30 ]
Added variable mode_ecmchar::$25 to zero page equivalence class [ mode_ecmchar::$25 ]
Added variable mode_ecmchar::$26 to zero page equivalence class [ mode_ecmchar::$26 ]
Added variable mode_ecmchar::$27 to zero page equivalence class [ mode_ecmchar::$27 ]
Added variable mode_ecmchar::$28 to zero page equivalence class [ mode_ecmchar::$28 ]
Added variable mode_ecmchar::$29 to zero page equivalence class [ mode_ecmchar::$29 ]
Added variable mode_ecmchar::$30 to zero page equivalence class [ mode_ecmchar::$30 ]
Added variable mode_stdchar::$24 to zero page equivalence class [ mode_stdchar::$24 ]
Added variable mode_stdchar::$25 to zero page equivalence class [ mode_stdchar::$25 ]
Added variable mode_stdchar::$26 to zero page equivalence class [ mode_stdchar::$26 ]
Added variable mode_stdchar::$27 to zero page equivalence class [ mode_stdchar::$27 ]
Added variable mode_stdchar::$28 to zero page equivalence class [ mode_stdchar::$28 ]
Added variable mode_stdchar::$29 to zero page equivalence class [ mode_stdchar::$29 ]
Added variable print_str_lines::ch#0 to zero page equivalence class [ print_str_lines::ch#0 ]
Complete equivalence classes
[ menu::i#2 menu::i#1 ]
[ menu::c#2 menu::c#1 ]
[ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ]
[ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ]
[ mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 ]
[ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ]
[ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 ]
[ dtv_control#114 dtv_control#145 dtv_control#17 ]
[ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ]
[ keyboard_key_pressed::key#20 ]
[ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ]
[ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ]
[ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ]
[ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ]
[ mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 ]
[ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ]
[ mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 ]
[ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ]
[ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#0 mode_8bpppixelcell::bits#1 ]
[ mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 ]
[ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ]
[ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ]
[ mode_8bpppixelcell::c#2 mode_8bpppixelcell::c#3 ]
[ mode_sixsfred::i#2 mode_sixsfred::i#1 ]
[ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ]
[ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ]
[ mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 ]
[ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ]
[ mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 ]
[ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ]
[ mode_sixsfred::by#4 mode_sixsfred::by#1 ]
[ mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 ]
[ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ]
[ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ]
[ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ]
[ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ]
[ mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 ]
[ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ]
[ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ]
[ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
[ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
[ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ]
[ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
[ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ]
[ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ]
[ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ]
[ mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 ]
[ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ]
[ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 ]
[ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ]
[ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ]
[ mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ]
[ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ]
[ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ]
[ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ]
[ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ]
[ mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 ]
[ mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 ]
[ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ]
[ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ]
[ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ]
[ mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 ]
[ mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 ]
[ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ]
[ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ]
[ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ]
[ mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 ]
[ mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 ]
[ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ]
[ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ]
[ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ]
[ mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 ]
[ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ]
[ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
[ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
[ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
[ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
[ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
[ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
[ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
[ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
[ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#0 bitmap_line_ydxi::xd#1 ]
[ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 ]
[ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#0 bitmap_line_ydxi::y1#1 ]
[ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
[ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#2 ]
[ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
[ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
[ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
[ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
[ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
[ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
[ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
[ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
[ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
[ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
[ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
[ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
[ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
[ bitmap_clear::y#4 bitmap_clear::y#1 ]
[ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
[ bitmap_clear::x#2 bitmap_clear::x#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ mode_mcchar::i#2 mode_mcchar::i#1 ]
[ mode_mcchar::cy#4 mode_mcchar::cy#1 ]
[ mode_mcchar::cx#2 mode_mcchar::cx#1 ]
[ mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 ]
[ mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 ]
[ mode_ecmchar::i#2 mode_ecmchar::i#1 ]
[ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ]
[ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ]
[ mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 ]
[ mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 ]
[ mode_stdchar::i#2 mode_stdchar::i#1 ]
[ mode_stdchar::cy#4 mode_stdchar::cy#1 ]
[ mode_stdchar::cx#2 mode_stdchar::cx#1 ]
[ mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 ]
[ mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ]
[ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ]
[ print_char_cursor#17 print_char_cursor#19 print_char_cursor#103 print_char_cursor#32 print_char_cursor#1 ]
[ print_line_cursor#18 print_line_cursor#17 print_line_cursor#19 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ keyboard_key_pressed::return#2 ]
[ menu::$29 ]
[ keyboard_key_pressed::return#24 ]
[ menu::$33 ]
[ keyboard_key_pressed::return#25 ]
[ menu::$37 ]
[ keyboard_key_pressed::return#26 ]
[ menu::$41 ]
[ keyboard_key_pressed::return#27 ]
[ menu::$45 ]
[ keyboard_key_pressed::return#28 ]
[ menu::$49 ]
[ keyboard_key_pressed::return#29 ]
[ menu::$53 ]
[ keyboard_key_pressed::return#30 ]
[ menu::$57 ]
[ keyboard_key_pressed::return#10 ]
[ menu::$61 ]
[ keyboard_key_pressed::return#11 ]
[ menu::$65 ]
[ keyboard_key_pressed::return#12 ]
[ menu::$69 ]
[ keyboard_key_pressed::return#13 ]
[ menu::$73 ]
[ mode_8bppchunkybmm::$23 ]
[ mode_8bppchunkybmm::c#0 ]
[ keyboard_key_pressed::return#14 ]
[ mode_ctrl::$1 ]
[ keyboard_key_pressed::return#15 ]
[ mode_ctrl::$4 ]
[ keyboard_key_pressed::return#16 ]
[ mode_ctrl::$8 ]
[ keyboard_key_pressed::return#17 ]
[ mode_ctrl::$12 ]
[ keyboard_key_pressed::return#18 ]
[ mode_ctrl::$16 ]
[ keyboard_key_pressed::return#19 ]
[ mode_ctrl::$20 ]
[ keyboard_key_pressed::return#20 ]
[ mode_ctrl::$24 ]
[ keyboard_key_pressed::return#21 ]
[ mode_ctrl::$28 ]
[ keyboard_key_pressed::colidx#0 ]
[ keyboard_key_pressed::rowidx#0 ]
[ keyboard_matrix_read::rowid#0 ]
[ keyboard_matrix_read::return#2 ]
[ keyboard_key_pressed::$2 ]
[ keyboard_key_pressed::return#0 ]
[ keyboard_matrix_read::return#0 ]
[ mode_8bpppixelcell::$13 ]
[ mode_8bpppixelcell::$14 ]
[ mode_8bpppixelcell::$15 ]
[ mode_8bpppixelcell::$16 ]
[ mode_8bpppixelcell::$19 ]
[ mode_sixsfred::$16 ]
[ mode_sixsfred::$17 ]
[ mode_sixsfred::$20 ]
[ mode_sixsfred::row#0 ]
[ mode_twoplanebitmap::$15 ]
[ mode_twoplanebitmap::$16 ]
[ mode_twoplanebitmap::$17 ]
[ mode_twoplanebitmap::$18 ]
[ mode_twoplanebitmap::$21 ]
[ mode_sixsfred2::$14 ]
[ mode_sixsfred2::$15 ]
[ mode_sixsfred2::$16 ]
[ mode_sixsfred2::$17 ]
[ mode_sixsfred2::$20 ]
[ mode_sixsfred2::row#0 ]
[ mode_hicolmcchar::$25 ]
[ mode_hicolmcchar::$26 ]
[ mode_hicolmcchar::$27 ]
[ mode_hicolmcchar::v#0 ]
[ mode_hicolecmchar::$25 ]
[ mode_hicolecmchar::$26 ]
[ mode_hicolecmchar::$27 ]
[ mode_hicolecmchar::v#0 ]
[ mode_hicolstdchar::$24 ]
[ mode_hicolstdchar::$25 ]
[ mode_hicolstdchar::$26 ]
[ mode_hicolstdchar::v#0 ]
[ mode_stdbitmap::$19 ]
[ mode_stdbitmap::col#0 ]
[ mode_stdbitmap::col2#0 ]
[ mode_stdbitmap::$22 ]
[ mode_stdbitmap::$23 ]
[ bitmap_line::x0#0 ]
[ bitmap_line::x1#0 ]
[ bitmap_line::y0#0 ]
[ bitmap_line::y1#0 ]
[ bitmap_line::xd#2 ]
[ bitmap_line::yd#2 ]
[ bitmap_line::yd#1 ]
[ bitmap_line::xd#1 ]
[ bitmap_line::yd#10 ]
[ bitmap_line::yd#11 ]
[ bitmap_line_xdyi::$6 ]
[ bitmap_plot::plotter_x#0 ]
[ bitmap_plot::plotter_y#0 ]
[ bitmap_plot::$0 ]
[ bitmap_plot::$1 ]
[ bitmap_line_ydxi::$6 ]
[ bitmap_line_xdyd::$6 ]
[ bitmap_line_ydxd::$6 ]
[ bitmap_clear::$3 ]
[ bitmap_init::$0 ]
[ bitmap_init::$6 ]
[ bitmap_init::$7 ]
[ bitmap_init::$8 ]
[ bitmap_init::$9 ]
[ bitmap_init::$10 ]
[ mode_mcchar::$25 ]
[ mode_mcchar::$26 ]
[ mode_mcchar::$27 ]
[ mode_mcchar::$28 ]
[ mode_mcchar::$29 ]
[ mode_mcchar::$30 ]
[ mode_ecmchar::$25 ]
[ mode_ecmchar::$26 ]
[ mode_ecmchar::$27 ]
[ mode_ecmchar::$28 ]
[ mode_ecmchar::$29 ]
[ mode_ecmchar::$30 ]
[ mode_stdchar::$24 ]
[ mode_stdchar::$25 ]
[ mode_stdchar::$26 ]
[ mode_stdchar::$27 ]
[ mode_stdchar::$28 ]
[ mode_stdchar::$29 ]
[ print_str_lines::ch#0 ]
Allocated zp ZP_BYTE:2 [ menu::i#2 menu::i#1 ]
Allocated zp ZP_WORD:3 [ menu::c#2 menu::c#1 ]
Allocated zp ZP_BYTE:5 [ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ]
Allocated zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ]
Allocated zp ZP_WORD:7 [ mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 ]
Allocated zp ZP_BYTE:9 [ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ]
Allocated zp ZP_WORD:10 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 ]
Allocated zp ZP_BYTE:12 [ dtv_control#114 dtv_control#145 dtv_control#17 ]
Allocated zp ZP_BYTE:13 [ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ]
Allocated zp ZP_BYTE:14 [ keyboard_key_pressed::key#20 ]
Allocated zp ZP_BYTE:15 [ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ]
Allocated zp ZP_BYTE:16 [ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ]
Allocated zp ZP_BYTE:17 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ]
Allocated zp ZP_BYTE:18 [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ]
Allocated zp ZP_WORD:19 [ mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 ]
Allocated zp ZP_BYTE:21 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ]
Allocated zp ZP_WORD:22 [ mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 ]
Allocated zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ]
Allocated zp ZP_BYTE:25 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#0 mode_8bpppixelcell::bits#1 ]
Allocated zp ZP_WORD:26 [ mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 ]
Allocated zp ZP_BYTE:28 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ]
Allocated zp ZP_BYTE:29 [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ]
Allocated zp ZP_BYTE:30 [ mode_8bpppixelcell::c#2 mode_8bpppixelcell::c#3 ]
Allocated zp ZP_BYTE:31 [ mode_sixsfred::i#2 mode_sixsfred::i#1 ]
Allocated zp ZP_BYTE:32 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ]
Allocated zp ZP_BYTE:33 [ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ]
Allocated zp ZP_WORD:34 [ mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 ]
Allocated zp ZP_BYTE:36 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ]
Allocated zp ZP_WORD:37 [ mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 ]
Allocated zp ZP_BYTE:39 [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ]
Allocated zp ZP_BYTE:40 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ]
Allocated zp ZP_WORD:41 [ mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 ]
Allocated zp ZP_BYTE:43 [ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ]
Allocated zp ZP_BYTE:44 [ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ]
Allocated zp ZP_BYTE:45 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ]
Allocated zp ZP_BYTE:46 [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ]
Allocated zp ZP_WORD:47 [ mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 ]
Allocated zp ZP_BYTE:49 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ]
Allocated zp ZP_WORD:50 [ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ]
Allocated zp ZP_BYTE:52 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
Allocated zp ZP_BYTE:53 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
Allocated zp ZP_WORD:54 [ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ]
Allocated zp ZP_BYTE:56 [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
Allocated zp ZP_BYTE:57 [ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ]
Allocated zp ZP_BYTE:58 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ]
Allocated zp ZP_BYTE:59 [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ]
Allocated zp ZP_WORD:60 [ mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 ]
Allocated zp ZP_BYTE:62 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ]
Allocated zp ZP_WORD:63 [ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 ]
Allocated zp ZP_BYTE:65 [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ]
Allocated zp ZP_BYTE:66 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ]
Allocated zp ZP_WORD:67 [ mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ]
Allocated zp ZP_BYTE:69 [ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ]
Allocated zp ZP_BYTE:70 [ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ]
Allocated zp ZP_BYTE:71 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ]
Allocated zp ZP_BYTE:72 [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ]
Allocated zp ZP_WORD:73 [ mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 ]
Allocated zp ZP_WORD:75 [ mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 ]
Allocated zp ZP_BYTE:77 [ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ]
Allocated zp ZP_BYTE:78 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ]
Allocated zp ZP_BYTE:79 [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ]
Allocated zp ZP_WORD:80 [ mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 ]
Allocated zp ZP_WORD:82 [ mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 ]
Allocated zp ZP_BYTE:84 [ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ]
Allocated zp ZP_BYTE:85 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ]
Allocated zp ZP_BYTE:86 [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ]
Allocated zp ZP_WORD:87 [ mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 ]
Allocated zp ZP_WORD:89 [ mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 ]
Allocated zp ZP_BYTE:91 [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ]
Allocated zp ZP_BYTE:92 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ]
Allocated zp ZP_BYTE:93 [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ]
Allocated zp ZP_WORD:94 [ mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 ]
Allocated zp ZP_BYTE:96 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ]
Allocated zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
Allocated zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
Allocated zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
Allocated zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
Allocated zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Allocated zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Allocated zp ZP_BYTE:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
Allocated zp ZP_BYTE:104 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
Allocated zp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#0 bitmap_line_ydxi::xd#1 ]
Allocated zp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 ]
Allocated zp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#0 bitmap_line_ydxi::y1#1 ]
Allocated zp ZP_BYTE:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Allocated zp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#2 ]
Allocated zp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Allocated zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
Allocated zp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
Allocated zp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
Allocated zp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
Allocated zp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Allocated zp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Allocated zp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Allocated zp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Allocated zp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Allocated zp ZP_BYTE:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Allocated zp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Allocated zp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Allocated zp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Allocated zp ZP_WORD:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
Allocated zp ZP_BYTE:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Allocated zp ZP_BYTE:127 [ bitmap_init::x#2 bitmap_init::x#1 ]
Allocated zp ZP_BYTE:128 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Allocated zp ZP_BYTE:129 [ bitmap_init::y#2 bitmap_init::y#1 ]
Allocated zp ZP_WORD:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Allocated zp ZP_BYTE:132 [ mode_mcchar::i#2 mode_mcchar::i#1 ]
Allocated zp ZP_BYTE:133 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ]
Allocated zp ZP_BYTE:134 [ mode_mcchar::cx#2 mode_mcchar::cx#1 ]
Allocated zp ZP_WORD:135 [ mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 ]
Allocated zp ZP_WORD:137 [ mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 ]
Allocated zp ZP_BYTE:139 [ mode_ecmchar::i#2 mode_ecmchar::i#1 ]
Allocated zp ZP_BYTE:140 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ]
Allocated zp ZP_BYTE:141 [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ]
Allocated zp ZP_WORD:142 [ mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 ]
Allocated zp ZP_WORD:144 [ mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 ]
Allocated zp ZP_BYTE:146 [ mode_stdchar::i#2 mode_stdchar::i#1 ]
Allocated zp ZP_BYTE:147 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ]
Allocated zp ZP_BYTE:148 [ mode_stdchar::cx#2 mode_stdchar::cx#1 ]
Allocated zp ZP_WORD:149 [ mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 ]
Allocated zp ZP_WORD:151 [ mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ]
Allocated zp ZP_WORD:153 [ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ]
Allocated zp ZP_WORD:155 [ print_char_cursor#17 print_char_cursor#19 print_char_cursor#103 print_char_cursor#32 print_char_cursor#1 ]
Allocated zp ZP_WORD:157 [ print_line_cursor#18 print_line_cursor#17 print_line_cursor#19 ]
Allocated zp ZP_WORD:159 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_BYTE:161 [ keyboard_key_pressed::return#2 ]
Allocated zp ZP_BYTE:162 [ menu::$29 ]
Allocated zp ZP_BYTE:163 [ keyboard_key_pressed::return#24 ]
Allocated zp ZP_BYTE:164 [ menu::$33 ]
Allocated zp ZP_BYTE:165 [ keyboard_key_pressed::return#25 ]
Allocated zp ZP_BYTE:166 [ menu::$37 ]
Allocated zp ZP_BYTE:167 [ keyboard_key_pressed::return#26 ]
Allocated zp ZP_BYTE:168 [ menu::$41 ]
Allocated zp ZP_BYTE:169 [ keyboard_key_pressed::return#27 ]
Allocated zp ZP_BYTE:170 [ menu::$45 ]
Allocated zp ZP_BYTE:171 [ keyboard_key_pressed::return#28 ]
Allocated zp ZP_BYTE:172 [ menu::$49 ]
Allocated zp ZP_BYTE:173 [ keyboard_key_pressed::return#29 ]
Allocated zp ZP_BYTE:174 [ menu::$53 ]
Allocated zp ZP_BYTE:175 [ keyboard_key_pressed::return#30 ]
Allocated zp ZP_BYTE:176 [ menu::$57 ]
Allocated zp ZP_BYTE:177 [ keyboard_key_pressed::return#10 ]
Allocated zp ZP_BYTE:178 [ menu::$61 ]
Allocated zp ZP_BYTE:179 [ keyboard_key_pressed::return#11 ]
Allocated zp ZP_BYTE:180 [ menu::$65 ]
Allocated zp ZP_BYTE:181 [ keyboard_key_pressed::return#12 ]
Allocated zp ZP_BYTE:182 [ menu::$69 ]
Allocated zp ZP_BYTE:183 [ keyboard_key_pressed::return#13 ]
Allocated zp ZP_BYTE:184 [ menu::$73 ]
Allocated zp ZP_WORD:185 [ mode_8bppchunkybmm::$23 ]
Allocated zp ZP_BYTE:187 [ mode_8bppchunkybmm::c#0 ]
Allocated zp ZP_BYTE:188 [ keyboard_key_pressed::return#14 ]
Allocated zp ZP_BYTE:189 [ mode_ctrl::$1 ]
Allocated zp ZP_BYTE:190 [ keyboard_key_pressed::return#15 ]
Allocated zp ZP_BYTE:191 [ mode_ctrl::$4 ]
Allocated zp ZP_BYTE:192 [ keyboard_key_pressed::return#16 ]
Allocated zp ZP_BYTE:193 [ mode_ctrl::$8 ]
Allocated zp ZP_BYTE:194 [ keyboard_key_pressed::return#17 ]
Allocated zp ZP_BYTE:195 [ mode_ctrl::$12 ]
Allocated zp ZP_BYTE:196 [ keyboard_key_pressed::return#18 ]
Allocated zp ZP_BYTE:197 [ mode_ctrl::$16 ]
Allocated zp ZP_BYTE:198 [ keyboard_key_pressed::return#19 ]
Allocated zp ZP_BYTE:199 [ mode_ctrl::$20 ]
Allocated zp ZP_BYTE:200 [ keyboard_key_pressed::return#20 ]
Allocated zp ZP_BYTE:201 [ mode_ctrl::$24 ]
Allocated zp ZP_BYTE:202 [ keyboard_key_pressed::return#21 ]
Allocated zp ZP_BYTE:203 [ mode_ctrl::$28 ]
Allocated zp ZP_BYTE:204 [ keyboard_key_pressed::colidx#0 ]
Allocated zp ZP_BYTE:205 [ keyboard_key_pressed::rowidx#0 ]
Allocated zp ZP_BYTE:206 [ keyboard_matrix_read::rowid#0 ]
Allocated zp ZP_BYTE:207 [ keyboard_matrix_read::return#2 ]
Allocated zp ZP_BYTE:208 [ keyboard_key_pressed::$2 ]
Allocated zp ZP_BYTE:209 [ keyboard_key_pressed::return#0 ]
Allocated zp ZP_BYTE:210 [ keyboard_matrix_read::return#0 ]
Allocated zp ZP_BYTE:211 [ mode_8bpppixelcell::$13 ]
Allocated zp ZP_BYTE:212 [ mode_8bpppixelcell::$14 ]
Allocated zp ZP_BYTE:213 [ mode_8bpppixelcell::$15 ]
Allocated zp ZP_BYTE:214 [ mode_8bpppixelcell::$16 ]
Allocated zp ZP_BYTE:215 [ mode_8bpppixelcell::$19 ]
Allocated zp ZP_BYTE:216 [ mode_sixsfred::$16 ]
Allocated zp ZP_BYTE:217 [ mode_sixsfred::$17 ]
Allocated zp ZP_BYTE:218 [ mode_sixsfred::$20 ]
Allocated zp ZP_BYTE:219 [ mode_sixsfred::row#0 ]
Allocated zp ZP_BYTE:220 [ mode_twoplanebitmap::$15 ]
Allocated zp ZP_BYTE:221 [ mode_twoplanebitmap::$16 ]
Allocated zp ZP_BYTE:222 [ mode_twoplanebitmap::$17 ]
Allocated zp ZP_BYTE:223 [ mode_twoplanebitmap::$18 ]
Allocated zp ZP_BYTE:224 [ mode_twoplanebitmap::$21 ]
Allocated zp ZP_BYTE:225 [ mode_sixsfred2::$14 ]
Allocated zp ZP_BYTE:226 [ mode_sixsfred2::$15 ]
Allocated zp ZP_BYTE:227 [ mode_sixsfred2::$16 ]
Allocated zp ZP_BYTE:228 [ mode_sixsfred2::$17 ]
Allocated zp ZP_BYTE:229 [ mode_sixsfred2::$20 ]
Allocated zp ZP_BYTE:230 [ mode_sixsfred2::row#0 ]
Allocated zp ZP_BYTE:231 [ mode_hicolmcchar::$25 ]
Allocated zp ZP_BYTE:232 [ mode_hicolmcchar::$26 ]
Allocated zp ZP_BYTE:233 [ mode_hicolmcchar::$27 ]
Allocated zp ZP_BYTE:234 [ mode_hicolmcchar::v#0 ]
Allocated zp ZP_BYTE:235 [ mode_hicolecmchar::$25 ]
Allocated zp ZP_BYTE:236 [ mode_hicolecmchar::$26 ]
Allocated zp ZP_BYTE:237 [ mode_hicolecmchar::$27 ]
Allocated zp ZP_BYTE:238 [ mode_hicolecmchar::v#0 ]
Allocated zp ZP_BYTE:239 [ mode_hicolstdchar::$24 ]
Allocated zp ZP_BYTE:240 [ mode_hicolstdchar::$25 ]
Allocated zp ZP_BYTE:241 [ mode_hicolstdchar::$26 ]
Allocated zp ZP_BYTE:242 [ mode_hicolstdchar::v#0 ]
Allocated zp ZP_BYTE:243 [ mode_stdbitmap::$19 ]
Allocated zp ZP_BYTE:244 [ mode_stdbitmap::col#0 ]
Allocated zp ZP_BYTE:245 [ mode_stdbitmap::col2#0 ]
Allocated zp ZP_BYTE:246 [ mode_stdbitmap::$22 ]
Allocated zp ZP_BYTE:247 [ mode_stdbitmap::$23 ]
Allocated zp ZP_BYTE:248 [ bitmap_line::x0#0 ]
Allocated zp ZP_BYTE:249 [ bitmap_line::x1#0 ]
Allocated zp ZP_BYTE:250 [ bitmap_line::y0#0 ]
Allocated zp ZP_BYTE:251 [ bitmap_line::y1#0 ]
Allocated zp ZP_BYTE:252 [ bitmap_line::xd#2 ]
Allocated zp ZP_BYTE:253 [ bitmap_line::yd#2 ]
Allocated zp ZP_BYTE:254 [ bitmap_line::yd#1 ]
Allocated zp ZP_BYTE:255 [ bitmap_line::xd#1 ]
Allocated zp ZP_BYTE:256 [ bitmap_line::yd#10 ]
Allocated zp ZP_BYTE:257 [ bitmap_line::yd#11 ]
Allocated zp ZP_BYTE:258 [ bitmap_line_xdyi::$6 ]
Allocated zp ZP_WORD:259 [ bitmap_plot::plotter_x#0 ]
Allocated zp ZP_WORD:261 [ bitmap_plot::plotter_y#0 ]
Allocated zp ZP_WORD:263 [ bitmap_plot::$0 ]
Allocated zp ZP_BYTE:265 [ bitmap_plot::$1 ]
Allocated zp ZP_BYTE:266 [ bitmap_line_ydxi::$6 ]
Allocated zp ZP_BYTE:267 [ bitmap_line_xdyd::$6 ]
Allocated zp ZP_BYTE:268 [ bitmap_line_ydxd::$6 ]
Allocated zp ZP_WORD:269 [ bitmap_clear::$3 ]
Allocated zp ZP_BYTE:271 [ bitmap_init::$0 ]
Allocated zp ZP_BYTE:272 [ bitmap_init::$6 ]
Allocated zp ZP_BYTE:273 [ bitmap_init::$7 ]
Allocated zp ZP_BYTE:274 [ bitmap_init::$8 ]
Allocated zp ZP_BYTE:275 [ bitmap_init::$9 ]
Allocated zp ZP_BYTE:276 [ bitmap_init::$10 ]
Allocated zp ZP_BYTE:277 [ mode_mcchar::$25 ]
Allocated zp ZP_BYTE:278 [ mode_mcchar::$26 ]
Allocated zp ZP_BYTE:279 [ mode_mcchar::$27 ]
Allocated zp ZP_BYTE:280 [ mode_mcchar::$28 ]
Allocated zp ZP_BYTE:281 [ mode_mcchar::$29 ]
Allocated zp ZP_BYTE:282 [ mode_mcchar::$30 ]
Allocated zp ZP_BYTE:283 [ mode_ecmchar::$25 ]
Allocated zp ZP_BYTE:284 [ mode_ecmchar::$26 ]
Allocated zp ZP_BYTE:285 [ mode_ecmchar::$27 ]
Allocated zp ZP_BYTE:286 [ mode_ecmchar::$28 ]
Allocated zp ZP_BYTE:287 [ mode_ecmchar::$29 ]
Allocated zp ZP_BYTE:288 [ mode_ecmchar::$30 ]
Allocated zp ZP_BYTE:289 [ mode_stdchar::$24 ]
Allocated zp ZP_BYTE:290 [ mode_stdchar::$25 ]
Allocated zp ZP_BYTE:291 [ mode_stdchar::$26 ]
Allocated zp ZP_BYTE:292 [ mode_stdchar::$27 ]
Allocated zp ZP_BYTE:293 [ mode_stdchar::$28 ]
Allocated zp ZP_BYTE:294 [ mode_stdchar::$29 ]
Allocated zp ZP_BYTE:295 [ print_str_lines::ch#0 ]

INITIAL ASM
//SEG0 File Comments
// Exploring C64DTV Screen Modes
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  // RAM in $A000, $E000 CHAR ROM in $D000
  .const PROCPORT_RAM_CHARROM = $31
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  // Color Ram
  .label COLS = $d800
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CIA1_PORT_B = $dc01
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  // The colors of the C64
  .const BLACK = 0
  .const GREEN = 5
  .const BLUE = 6
  .const LIGHT_GREEN = $d
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  .const DTV_LINEAR = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_OVERSCAN = 8
  .const DTV_COLORRAM_OFF = $10
  .const DTV_CHUNKY = $40
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // Linear Graphics Plane A Counter Control
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  // Linear Graphics Plane B Counter Control
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  // Select memory bank where color data is fetched from (bits 11:0)
  // Memory address of Color RAM is ColorBank*$400
  .label DTV_COLOR_BANK_LO = $d036
  .label DTV_COLOR_BANK_HI = $d037
  .const DTV_COLOR_BANK_DEFAULT = $1d800
  // Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
  // Memory address of VIC Graphics is GraphicsBank*$10000
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  .const KEY_3 = 8
  .const KEY_A = $a
  .const KEY_4 = $b
  .const KEY_E = $e
  .const KEY_D = $12
  .const KEY_6 = $13
  .const KEY_C = $14
  .const KEY_7 = $18
  .const KEY_8 = $1b
  .const KEY_B = $1c
  .const KEY_H = $1d
  .const KEY_U = $1e
  .const KEY_0 = $23
  .const KEY_O = $26
  .const KEY_L = $2a
  .const KEY_1 = $38
  .const KEY_2 = $3b
  .const KEY_SPACE = $3c
  .label print_char_cursor = $9b
  .label dtv_control = $c
  .label print_line_cursor = $9d
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @54 [phi:@begin->@54]
b54_from_bbegin:
  jmp b54
//SEG5 @54
b54:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @54 to @end [phi:@54->@end]
bend_from_b54:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 asm { sei  }
    sei
  //SEG11 [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt (prevent keyboard reading glitches and allows to hide basic/kernal)
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG12 [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG13 [7] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 -- _deref_pbuc1=vbuc2 
    // Enable DTV extended modes
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
  //SEG14 [8] phi from main main::@2 to main::@2 [phi:main/main::@2->main::@2]
  b2_from_main:
  b2_from_b2:
    jmp b2
  //SEG15 main::@2
  b2:
  //SEG16 [9] call menu 
    jsr menu
    jmp b2_from_b2
}
//SEG17 menu
menu: {
    .label SCREEN = $8000
    .label CHARSET = $9800
    .label _29 = $a2
    .label _33 = $a4
    .label _37 = $a6
    .label _41 = $a8
    .label _45 = $aa
    .label _49 = $ac
    .label _53 = $ae
    .label _57 = $b0
    .label _61 = $b2
    .label _65 = $b4
    .label _69 = $b6
    .label _73 = $b8
    .label i = 2
    .label c = 3
  //SEG18 [10] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) menu::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // Charset ROM
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG19 [11] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
  //SEG20 [12] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG21 [13] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Mode
    lda #0
    sta DTV_CONTROL
  //SEG22 [14] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG23 [15] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) menu::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG24 [16] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG25 [17] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG26 [18] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) menu::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) menu::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG27 [19] phi from menu to menu::@1 [phi:menu->menu::@1]
  b1_from_menu:
  //SEG28 [19] phi (byte) menu::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:menu->menu::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // DTV Palette - default
  //SEG29 [19] phi from menu::@1 to menu::@1 [phi:menu::@1->menu::@1]
  b1_from_b1:
  //SEG30 [19] phi (byte) menu::i#2 = (byte) menu::i#1 [phi:menu::@1->menu::@1#0] -- register_copy 
    jmp b1
  //SEG31 menu::@1
  b1:
  //SEG32 [20] *((const byte*) DTV_PALETTE#0 + (byte) menu::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) menu::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy i
    lda DTV_PALETTE_DEFAULT,y
    sta DTV_PALETTE,y
  //SEG33 [21] (byte) menu::i#1 ← ++ (byte) menu::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG34 [22] if((byte) menu::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto menu::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b1
  //SEG35 [23] phi from menu::@1 to menu::@2 [phi:menu::@1->menu::@2]
  b2_from_b1:
  //SEG36 [23] phi (byte*) menu::c#2 = (const byte*) COLS#0 [phi:menu::@1->menu::@2#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta c
    lda #>COLS
    sta c+1
    jmp b2
  // Char Colors
  //SEG37 [23] phi from menu::@2 to menu::@2 [phi:menu::@2->menu::@2]
  b2_from_b2:
  //SEG38 [23] phi (byte*) menu::c#2 = (byte*) menu::c#1 [phi:menu::@2->menu::@2#0] -- register_copy 
    jmp b2
  //SEG39 menu::@2
  b2:
  //SEG40 [24] *((byte*) menu::c#2) ← (const byte) LIGHT_GREEN#0 -- _deref_pbuz1=vbuc1 
    lda #LIGHT_GREEN
    ldy #0
    sta (c),y
  //SEG41 [25] (byte*) menu::c#1 ← ++ (byte*) menu::c#2 -- pbuz1=_inc_pbuz1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG42 [26] if((byte*) menu::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) $3e8) goto menu::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda c+1
    cmp #>COLS+$3e8
    bne b2_from_b2
    lda c
    cmp #<COLS+$3e8
    bne b2_from_b2
    jmp b19
  //SEG43 menu::@19
  b19:
  //SEG44 [27] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BGCOL
  //SEG45 [28] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
  //SEG46 [29] call print_set_screen 
  //SEG47 [891] phi from menu::@19 to print_set_screen [phi:menu::@19->print_set_screen]
  print_set_screen_from_b19:
    jsr print_set_screen
  //SEG48 [30] phi from menu::@19 to menu::@47 [phi:menu::@19->menu::@47]
  b47_from_b19:
    jmp b47
  //SEG49 menu::@47
  b47:
  //SEG50 [31] call print_cls 
  //SEG51 [885] phi from menu::@47 to print_cls [phi:menu::@47->print_cls]
  print_cls_from_b47:
    jsr print_cls
  //SEG52 [32] phi from menu::@47 to menu::@48 [phi:menu::@47->menu::@48]
  b48_from_b47:
    jmp b48
  //SEG53 menu::@48
  b48:
  //SEG54 [33] call print_str_lines 
  //SEG55 [865] phi from menu::@48 to print_str_lines [phi:menu::@48->print_str_lines]
  print_str_lines_from_b48:
    jsr print_str_lines
  //SEG56 [34] phi from menu::@48 menu::@71 to menu::@4 [phi:menu::@48/menu::@71->menu::@4]
  b4_from_b48:
  b4_from_b71:
    jmp b4
  //SEG57 menu::@4
  b4:
  //SEG58 [35] call keyboard_key_pressed 
  //SEG59 [211] phi from menu::@4 to keyboard_key_pressed [phi:menu::@4->keyboard_key_pressed]
  keyboard_key_pressed_from_b4:
  //SEG60 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_1#0 [phi:menu::@4->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_1
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG61 [36] (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_2
    jmp b50
  //SEG62 menu::@50
  b50:
  //SEG63 [37] (byte~) menu::$29 ← (byte) keyboard_key_pressed::return#2 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_2
    sta _29
  //SEG64 [38] if((byte~) menu::$29==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@6 -- vbuz1_eq_0_then_la1 
    lda _29
    cmp #0
    beq b6_from_b50
  //SEG65 [39] phi from menu::@50 to menu::@22 [phi:menu::@50->menu::@22]
  b22_from_b50:
    jmp b22
  //SEG66 menu::@22
  b22:
  //SEG67 [40] call mode_stdchar 
    jsr mode_stdchar
    jmp breturn
  //SEG68 menu::@return
  breturn:
  //SEG69 [41] return 
    rts
  //SEG70 [42] phi from menu::@50 to menu::@6 [phi:menu::@50->menu::@6]
  b6_from_b50:
    jmp b6
  //SEG71 menu::@6
  b6:
  //SEG72 [43] call keyboard_key_pressed 
  //SEG73 [211] phi from menu::@6 to keyboard_key_pressed [phi:menu::@6->keyboard_key_pressed]
  keyboard_key_pressed_from_b6:
  //SEG74 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_2#0 [phi:menu::@6->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_2
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG75 [44] (byte) keyboard_key_pressed::return#24 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_24
    jmp b51
  //SEG76 menu::@51
  b51:
  //SEG77 [45] (byte~) menu::$33 ← (byte) keyboard_key_pressed::return#24 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_24
    sta _33
  //SEG78 [46] if((byte~) menu::$33==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@7 -- vbuz1_eq_0_then_la1 
    lda _33
    cmp #0
    beq b7_from_b51
  //SEG79 [47] phi from menu::@51 to menu::@24 [phi:menu::@51->menu::@24]
  b24_from_b51:
    jmp b24
  //SEG80 menu::@24
  b24:
  //SEG81 [48] call mode_ecmchar 
    jsr mode_ecmchar
    jmp breturn
  //SEG82 [49] phi from menu::@51 to menu::@7 [phi:menu::@51->menu::@7]
  b7_from_b51:
    jmp b7
  //SEG83 menu::@7
  b7:
  //SEG84 [50] call keyboard_key_pressed 
  //SEG85 [211] phi from menu::@7 to keyboard_key_pressed [phi:menu::@7->keyboard_key_pressed]
  keyboard_key_pressed_from_b7:
  //SEG86 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_3#0 [phi:menu::@7->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_3
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG87 [51] (byte) keyboard_key_pressed::return#25 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_25
    jmp b53
  //SEG88 menu::@53
  b53:
  //SEG89 [52] (byte~) menu::$37 ← (byte) keyboard_key_pressed::return#25 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_25
    sta _37
  //SEG90 [53] if((byte~) menu::$37==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@8 -- vbuz1_eq_0_then_la1 
    lda _37
    cmp #0
    beq b8_from_b53
  //SEG91 [54] phi from menu::@53 to menu::@26 [phi:menu::@53->menu::@26]
  b26_from_b53:
    jmp b26
  //SEG92 menu::@26
  b26:
  //SEG93 [55] call mode_mcchar 
    jsr mode_mcchar
    jmp breturn
  //SEG94 [56] phi from menu::@53 to menu::@8 [phi:menu::@53->menu::@8]
  b8_from_b53:
    jmp b8
  //SEG95 menu::@8
  b8:
  //SEG96 [57] call keyboard_key_pressed 
  //SEG97 [211] phi from menu::@8 to keyboard_key_pressed [phi:menu::@8->keyboard_key_pressed]
  keyboard_key_pressed_from_b8:
  //SEG98 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_4#0 [phi:menu::@8->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_4
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG99 [58] (byte) keyboard_key_pressed::return#26 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_26
    jmp b55
  //SEG100 menu::@55
  b55:
  //SEG101 [59] (byte~) menu::$41 ← (byte) keyboard_key_pressed::return#26 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_26
    sta _41
  //SEG102 [60] if((byte~) menu::$41==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@9 -- vbuz1_eq_0_then_la1 
    lda _41
    cmp #0
    beq b9_from_b55
  //SEG103 [61] phi from menu::@55 to menu::@28 [phi:menu::@55->menu::@28]
  b28_from_b55:
    jmp b28
  //SEG104 menu::@28
  b28:
  //SEG105 [62] call mode_stdbitmap 
    jsr mode_stdbitmap
    jmp breturn
  //SEG106 [63] phi from menu::@55 to menu::@9 [phi:menu::@55->menu::@9]
  b9_from_b55:
    jmp b9
  //SEG107 menu::@9
  b9:
  //SEG108 [64] call keyboard_key_pressed 
  //SEG109 [211] phi from menu::@9 to keyboard_key_pressed [phi:menu::@9->keyboard_key_pressed]
  keyboard_key_pressed_from_b9:
  //SEG110 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_6#0 [phi:menu::@9->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_6
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG111 [65] (byte) keyboard_key_pressed::return#27 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_27
    jmp b57
  //SEG112 menu::@57
  b57:
  //SEG113 [66] (byte~) menu::$45 ← (byte) keyboard_key_pressed::return#27 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_27
    sta _45
  //SEG114 [67] if((byte~) menu::$45==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@10 -- vbuz1_eq_0_then_la1 
    lda _45
    cmp #0
    beq b10_from_b57
  //SEG115 [68] phi from menu::@57 to menu::@30 [phi:menu::@57->menu::@30]
  b30_from_b57:
    jmp b30
  //SEG116 menu::@30
  b30:
  //SEG117 [69] call mode_hicolstdchar 
    jsr mode_hicolstdchar
    jmp breturn
  //SEG118 [70] phi from menu::@57 to menu::@10 [phi:menu::@57->menu::@10]
  b10_from_b57:
    jmp b10
  //SEG119 menu::@10
  b10:
  //SEG120 [71] call keyboard_key_pressed 
  //SEG121 [211] phi from menu::@10 to keyboard_key_pressed [phi:menu::@10->keyboard_key_pressed]
  keyboard_key_pressed_from_b10:
  //SEG122 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_7#0 [phi:menu::@10->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_7
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG123 [72] (byte) keyboard_key_pressed::return#28 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_28
    jmp b59
  //SEG124 menu::@59
  b59:
  //SEG125 [73] (byte~) menu::$49 ← (byte) keyboard_key_pressed::return#28 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_28
    sta _49
  //SEG126 [74] if((byte~) menu::$49==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@11 -- vbuz1_eq_0_then_la1 
    lda _49
    cmp #0
    beq b11_from_b59
  //SEG127 [75] phi from menu::@59 to menu::@32 [phi:menu::@59->menu::@32]
  b32_from_b59:
    jmp b32
  //SEG128 menu::@32
  b32:
  //SEG129 [76] call mode_hicolecmchar 
    jsr mode_hicolecmchar
    jmp breturn
  //SEG130 [77] phi from menu::@59 to menu::@11 [phi:menu::@59->menu::@11]
  b11_from_b59:
    jmp b11
  //SEG131 menu::@11
  b11:
  //SEG132 [78] call keyboard_key_pressed 
  //SEG133 [211] phi from menu::@11 to keyboard_key_pressed [phi:menu::@11->keyboard_key_pressed]
  keyboard_key_pressed_from_b11:
  //SEG134 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_8#0 [phi:menu::@11->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_8
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG135 [79] (byte) keyboard_key_pressed::return#29 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_29
    jmp b61
  //SEG136 menu::@61
  b61:
  //SEG137 [80] (byte~) menu::$53 ← (byte) keyboard_key_pressed::return#29 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_29
    sta _53
  //SEG138 [81] if((byte~) menu::$53==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@12 -- vbuz1_eq_0_then_la1 
    lda _53
    cmp #0
    beq b12_from_b61
  //SEG139 [82] phi from menu::@61 to menu::@34 [phi:menu::@61->menu::@34]
  b34_from_b61:
    jmp b34
  //SEG140 menu::@34
  b34:
  //SEG141 [83] call mode_hicolmcchar 
    jsr mode_hicolmcchar
    jmp breturn
  //SEG142 [84] phi from menu::@61 to menu::@12 [phi:menu::@61->menu::@12]
  b12_from_b61:
    jmp b12
  //SEG143 menu::@12
  b12:
  //SEG144 [85] call keyboard_key_pressed 
  //SEG145 [211] phi from menu::@12 to keyboard_key_pressed [phi:menu::@12->keyboard_key_pressed]
  keyboard_key_pressed_from_b12:
  //SEG146 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_A#0 [phi:menu::@12->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_A
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG147 [86] (byte) keyboard_key_pressed::return#30 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_30
    jmp b63
  //SEG148 menu::@63
  b63:
  //SEG149 [87] (byte~) menu::$57 ← (byte) keyboard_key_pressed::return#30 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_30
    sta _57
  //SEG150 [88] if((byte~) menu::$57==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@13 -- vbuz1_eq_0_then_la1 
    lda _57
    cmp #0
    beq b13_from_b63
  //SEG151 [89] phi from menu::@63 to menu::@36 [phi:menu::@63->menu::@36]
  b36_from_b63:
    jmp b36
  //SEG152 menu::@36
  b36:
  //SEG153 [90] call mode_sixsfred2 
    jsr mode_sixsfred2
    jmp breturn
  //SEG154 [91] phi from menu::@63 to menu::@13 [phi:menu::@63->menu::@13]
  b13_from_b63:
    jmp b13
  //SEG155 menu::@13
  b13:
  //SEG156 [92] call keyboard_key_pressed 
  //SEG157 [211] phi from menu::@13 to keyboard_key_pressed [phi:menu::@13->keyboard_key_pressed]
  keyboard_key_pressed_from_b13:
  //SEG158 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_B#0 [phi:menu::@13->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_B
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG159 [93] (byte) keyboard_key_pressed::return#10 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_10
    jmp b65
  //SEG160 menu::@65
  b65:
  //SEG161 [94] (byte~) menu::$61 ← (byte) keyboard_key_pressed::return#10 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_10
    sta _61
  //SEG162 [95] if((byte~) menu::$61==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@14 -- vbuz1_eq_0_then_la1 
    lda _61
    cmp #0
    beq b14_from_b65
  //SEG163 [96] phi from menu::@65 to menu::@38 [phi:menu::@65->menu::@38]
  b38_from_b65:
    jmp b38
  //SEG164 menu::@38
  b38:
  //SEG165 [97] call mode_twoplanebitmap 
    jsr mode_twoplanebitmap
    jmp breturn
  //SEG166 [98] phi from menu::@65 to menu::@14 [phi:menu::@65->menu::@14]
  b14_from_b65:
    jmp b14
  //SEG167 menu::@14
  b14:
  //SEG168 [99] call keyboard_key_pressed 
  //SEG169 [211] phi from menu::@14 to keyboard_key_pressed [phi:menu::@14->keyboard_key_pressed]
  keyboard_key_pressed_from_b14:
  //SEG170 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_C#0 [phi:menu::@14->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_C
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG171 [100] (byte) keyboard_key_pressed::return#11 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_11
    jmp b67
  //SEG172 menu::@67
  b67:
  //SEG173 [101] (byte~) menu::$65 ← (byte) keyboard_key_pressed::return#11 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_11
    sta _65
  //SEG174 [102] if((byte~) menu::$65==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@15 -- vbuz1_eq_0_then_la1 
    lda _65
    cmp #0
    beq b15_from_b67
  //SEG175 [103] phi from menu::@67 to menu::@40 [phi:menu::@67->menu::@40]
  b40_from_b67:
    jmp b40
  //SEG176 menu::@40
  b40:
  //SEG177 [104] call mode_sixsfred 
    jsr mode_sixsfred
    jmp breturn
  //SEG178 [105] phi from menu::@67 to menu::@15 [phi:menu::@67->menu::@15]
  b15_from_b67:
    jmp b15
  //SEG179 menu::@15
  b15:
  //SEG180 [106] call keyboard_key_pressed 
  //SEG181 [211] phi from menu::@15 to keyboard_key_pressed [phi:menu::@15->keyboard_key_pressed]
  keyboard_key_pressed_from_b15:
  //SEG182 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_D#0 [phi:menu::@15->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_D
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG183 [107] (byte) keyboard_key_pressed::return#12 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_12
    jmp b69
  //SEG184 menu::@69
  b69:
  //SEG185 [108] (byte~) menu::$69 ← (byte) keyboard_key_pressed::return#12 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_12
    sta _69
  //SEG186 [109] if((byte~) menu::$69==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@16 -- vbuz1_eq_0_then_la1 
    lda _69
    cmp #0
    beq b16_from_b69
  //SEG187 [110] phi from menu::@69 to menu::@42 [phi:menu::@69->menu::@42]
  b42_from_b69:
    jmp b42
  //SEG188 menu::@42
  b42:
  //SEG189 [111] call mode_8bpppixelcell 
    jsr mode_8bpppixelcell
    jmp breturn
  //SEG190 [112] phi from menu::@69 to menu::@16 [phi:menu::@69->menu::@16]
  b16_from_b69:
    jmp b16
  //SEG191 menu::@16
  b16:
  //SEG192 [113] call keyboard_key_pressed 
  //SEG193 [211] phi from menu::@16 to keyboard_key_pressed [phi:menu::@16->keyboard_key_pressed]
  keyboard_key_pressed_from_b16:
  //SEG194 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_E#0 [phi:menu::@16->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_E
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG195 [114] (byte) keyboard_key_pressed::return#13 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_13
    jmp b71
  //SEG196 menu::@71
  b71:
  //SEG197 [115] (byte~) menu::$73 ← (byte) keyboard_key_pressed::return#13 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_13
    sta _73
  //SEG198 [116] if((byte~) menu::$73==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@4 -- vbuz1_eq_0_then_la1 
    lda _73
    cmp #0
    beq b4_from_b71
  //SEG199 [117] phi from menu::@71 to menu::@44 [phi:menu::@71->menu::@44]
  b44_from_b71:
    jmp b44
  //SEG200 menu::@44
  b44:
  //SEG201 [118] call mode_8bppchunkybmm 
    jsr mode_8bppchunkybmm
    jmp breturn
}
//SEG202 mode_8bppchunkybmm
//Chunky 8bpp Bitmap Mode (BMM = 0, ECM/MCM/HICOL/LINEAR/CHUNK/COLDIS = 1)
// Resolution: 320x200
// Linear Adressing
// CharData/PlaneB Pixel Shifter (8):
// - 8bpp color PlaneB[7:0]
// To set up a linear video frame buffer the step size must be set to 8.
mode_8bppchunkybmm: {
    // 8BPP Chunky Bitmap (contains 8bpp pixels)
    .const PLANEB = $20000
    .label _23 = $b9
    .label i = 5
    .label c = $bb
    .label gfxb = $a
    .label x = 7
    .label gfxbCpuBank = 9
    .label y = 6
  //SEG203 [119] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_COLORRAM_OFF#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF
    sta DTV_CONTROL
  //SEG204 [120] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG205 [121] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG206 [122] *((const byte*) DTV_PLANEB_START_LO#0) ← <<(const dword) mode_8bppchunkybmm::PLANEB#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #PLANEB&$ffff
    sta DTV_PLANEB_START_LO
  //SEG207 [123] *((const byte*) DTV_PLANEB_START_MI#0) ← ><(const dword) mode_8bppchunkybmm::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_MI
  //SEG208 [124] *((const byte*) DTV_PLANEB_START_HI#0) ← <>(const dword) mode_8bppchunkybmm::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #PLANEB>>$10
    sta DTV_PLANEB_START_HI
  //SEG209 [125] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 8 -- _deref_pbuc1=vbuc2 
    lda #8
    sta DTV_PLANEB_STEP
  //SEG210 [126] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG211 [127] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG212 [128] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Border color
    lda #0
    sta BORDERCOL
  //SEG213 [129] phi from mode_8bppchunkybmm to mode_8bppchunkybmm::@1 [phi:mode_8bppchunkybmm->mode_8bppchunkybmm::@1]
  b1_from_mode_8bppchunkybmm:
  //SEG214 [129] phi (byte) mode_8bppchunkybmm::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bppchunkybmm->mode_8bppchunkybmm::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // DTV Palette - Grey Tones
  //SEG215 [129] phi from mode_8bppchunkybmm::@1 to mode_8bppchunkybmm::@1 [phi:mode_8bppchunkybmm::@1->mode_8bppchunkybmm::@1]
  b1_from_b1:
  //SEG216 [129] phi (byte) mode_8bppchunkybmm::i#2 = (byte) mode_8bppchunkybmm::i#1 [phi:mode_8bppchunkybmm::@1->mode_8bppchunkybmm::@1#0] -- register_copy 
    jmp b1
  //SEG217 mode_8bppchunkybmm::@1
  b1:
  //SEG218 [130] *((const byte*) DTV_PALETTE#0 + (byte) mode_8bppchunkybmm::i#2) ← (byte) mode_8bppchunkybmm::i#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy i
    tya
    sta DTV_PALETTE,y
  //SEG219 [131] (byte) mode_8bppchunkybmm::i#1 ← ++ (byte) mode_8bppchunkybmm::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG220 [132] if((byte) mode_8bppchunkybmm::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_8bppchunkybmm::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b1
  //SEG221 [133] phi from mode_8bppchunkybmm::@1 to mode_8bppchunkybmm::@5 [phi:mode_8bppchunkybmm::@1->mode_8bppchunkybmm::@5]
  b5_from_b1:
    jmp b5
  //SEG222 mode_8bppchunkybmm::@5
  b5:
  //SEG223 [134] call dtvSetCpuBankSegment1 
  //SEG224 [223] phi from mode_8bppchunkybmm::@5 to dtvSetCpuBankSegment1 [phi:mode_8bppchunkybmm::@5->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b5:
  //SEG225 [223] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = ((byte))(const dword) mode_8bppchunkybmm::PLANEB#0/(word/signed word/dword/signed dword) $4000 [phi:mode_8bppchunkybmm::@5->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #PLANEB/$4000
    sta dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
  //SEG226 [135] phi from mode_8bppchunkybmm::@5 to mode_8bppchunkybmm::@2 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@2]
  b2_from_b5:
  //SEG227 [135] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#7 = ++((byte))(const dword) mode_8bppchunkybmm::PLANEB#0/(word/signed word/dword/signed dword) $4000 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@2#0] -- vbuz1=vbuc1 
    lda #PLANEB/$4000+1
    sta gfxbCpuBank
  //SEG228 [135] phi (byte) mode_8bppchunkybmm::y#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG229 [135] phi (byte*) mode_8bppchunkybmm::gfxb#5 = ((byte*))(word/signed word/dword/signed dword) $4000 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@2#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
    jmp b2
  //SEG230 [135] phi from mode_8bppchunkybmm::@7 to mode_8bppchunkybmm::@2 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@2]
  b2_from_b7:
  //SEG231 [135] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#7 = (byte) mode_8bppchunkybmm::gfxbCpuBank#8 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@2#0] -- register_copy 
  //SEG232 [135] phi (byte) mode_8bppchunkybmm::y#6 = (byte) mode_8bppchunkybmm::y#1 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@2#1] -- register_copy 
  //SEG233 [135] phi (byte*) mode_8bppchunkybmm::gfxb#5 = (byte*) mode_8bppchunkybmm::gfxb#1 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@2#2] -- register_copy 
    jmp b2
  //SEG234 mode_8bppchunkybmm::@2
  b2:
  //SEG235 [136] phi from mode_8bppchunkybmm::@2 to mode_8bppchunkybmm::@3 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3]
  b3_from_b2:
  //SEG236 [136] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#4 = (byte) mode_8bppchunkybmm::gfxbCpuBank#7 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3#0] -- register_copy 
  //SEG237 [136] phi (word) mode_8bppchunkybmm::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3#1] -- vwuz1=vbuc1 
    lda #<0
    sta x
    lda #>0
    sta x+1
  //SEG238 [136] phi (byte*) mode_8bppchunkybmm::gfxb#3 = (byte*) mode_8bppchunkybmm::gfxb#5 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3#2] -- register_copy 
    jmp b3
  //SEG239 [136] phi from mode_8bppchunkybmm::@4 to mode_8bppchunkybmm::@3 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@3]
  b3_from_b4:
  //SEG240 [136] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#4 = (byte) mode_8bppchunkybmm::gfxbCpuBank#8 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@3#0] -- register_copy 
  //SEG241 [136] phi (word) mode_8bppchunkybmm::x#2 = (word) mode_8bppchunkybmm::x#1 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@3#1] -- register_copy 
  //SEG242 [136] phi (byte*) mode_8bppchunkybmm::gfxb#3 = (byte*) mode_8bppchunkybmm::gfxb#1 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@3#2] -- register_copy 
    jmp b3
  //SEG243 mode_8bppchunkybmm::@3
  b3:
  //SEG244 [137] if((byte*) mode_8bppchunkybmm::gfxb#3!=(word/dword/signed dword) $8000) goto mode_8bppchunkybmm::@4 -- pbuz1_neq_vwuc1_then_la1 
    lda gfxb+1
    cmp #>$8000
    bne b4_from_b3
    lda gfxb
    cmp #<$8000
    bne b4_from_b3
    jmp b6
  //SEG245 mode_8bppchunkybmm::@6
  b6:
  //SEG246 [138] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) mode_8bppchunkybmm::gfxbCpuBank#4 -- vbuz1=vbuz2 
    lda gfxbCpuBank
    sta dtvSetCpuBankSegment1.cpuBankIdx
  //SEG247 [139] call dtvSetCpuBankSegment1 
  //SEG248 [223] phi from mode_8bppchunkybmm::@6 to dtvSetCpuBankSegment1 [phi:mode_8bppchunkybmm::@6->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b6:
  //SEG249 [223] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:mode_8bppchunkybmm::@6->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp b10
  //SEG250 mode_8bppchunkybmm::@10
  b10:
  //SEG251 [140] (byte) mode_8bppchunkybmm::gfxbCpuBank#2 ← ++ (byte) mode_8bppchunkybmm::gfxbCpuBank#4 -- vbuz1=_inc_vbuz1 
    inc gfxbCpuBank
  //SEG252 [141] phi from mode_8bppchunkybmm::@10 to mode_8bppchunkybmm::@4 [phi:mode_8bppchunkybmm::@10->mode_8bppchunkybmm::@4]
  b4_from_b10:
  //SEG253 [141] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#8 = (byte) mode_8bppchunkybmm::gfxbCpuBank#2 [phi:mode_8bppchunkybmm::@10->mode_8bppchunkybmm::@4#0] -- register_copy 
  //SEG254 [141] phi (byte*) mode_8bppchunkybmm::gfxb#4 = ((byte*))(word/signed word/dword/signed dword) $4000 [phi:mode_8bppchunkybmm::@10->mode_8bppchunkybmm::@4#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
    jmp b4
  //SEG255 [141] phi from mode_8bppchunkybmm::@3 to mode_8bppchunkybmm::@4 [phi:mode_8bppchunkybmm::@3->mode_8bppchunkybmm::@4]
  b4_from_b3:
  //SEG256 [141] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#8 = (byte) mode_8bppchunkybmm::gfxbCpuBank#4 [phi:mode_8bppchunkybmm::@3->mode_8bppchunkybmm::@4#0] -- register_copy 
  //SEG257 [141] phi (byte*) mode_8bppchunkybmm::gfxb#4 = (byte*) mode_8bppchunkybmm::gfxb#3 [phi:mode_8bppchunkybmm::@3->mode_8bppchunkybmm::@4#1] -- register_copy 
    jmp b4
  //SEG258 mode_8bppchunkybmm::@4
  b4:
  //SEG259 [142] (word~) mode_8bppchunkybmm::$23 ← (word) mode_8bppchunkybmm::x#2 + (byte) mode_8bppchunkybmm::y#6 -- vwuz1=vwuz2_plus_vbuz3 
    lda y
    clc
    adc x
    sta _23
    lda #0
    adc x+1
    sta _23+1
  //SEG260 [143] (byte) mode_8bppchunkybmm::c#0 ← ((byte)) (word~) mode_8bppchunkybmm::$23 -- vbuz1=_byte_vwuz2 
    lda _23
    sta c
  //SEG261 [144] *((byte*) mode_8bppchunkybmm::gfxb#4) ← (byte) mode_8bppchunkybmm::c#0 -- _deref_pbuz1=vbuz2 
    lda c
    ldy #0
    sta (gfxb),y
  //SEG262 [145] (byte*) mode_8bppchunkybmm::gfxb#1 ← ++ (byte*) mode_8bppchunkybmm::gfxb#4 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG263 [146] (word) mode_8bppchunkybmm::x#1 ← ++ (word) mode_8bppchunkybmm::x#2 -- vwuz1=_inc_vwuz1 
    inc x
    bne !+
    inc x+1
  !:
  //SEG264 [147] if((word) mode_8bppchunkybmm::x#1!=(word/signed word/dword/signed dword) $140) goto mode_8bppchunkybmm::@3 -- vwuz1_neq_vwuc1_then_la1 
    lda x+1
    cmp #>$140
    bne b3_from_b4
    lda x
    cmp #<$140
    bne b3_from_b4
    jmp b7
  //SEG265 mode_8bppchunkybmm::@7
  b7:
  //SEG266 [148] (byte) mode_8bppchunkybmm::y#1 ← ++ (byte) mode_8bppchunkybmm::y#6 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG267 [149] if((byte) mode_8bppchunkybmm::y#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_8bppchunkybmm::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$c8
    bne b2_from_b7
  //SEG268 [150] phi from mode_8bppchunkybmm::@7 to mode_8bppchunkybmm::@8 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@8]
  b8_from_b7:
    jmp b8
  //SEG269 mode_8bppchunkybmm::@8
  b8:
  //SEG270 [151] call dtvSetCpuBankSegment1 
  //SEG271 [223] phi from mode_8bppchunkybmm::@8 to dtvSetCpuBankSegment1 [phi:mode_8bppchunkybmm::@8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b8:
  //SEG272 [223] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:mode_8bppchunkybmm::@8->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
  //SEG273 [152] phi from mode_8bppchunkybmm::@8 to mode_8bppchunkybmm::@11 [phi:mode_8bppchunkybmm::@8->mode_8bppchunkybmm::@11]
  b11_from_b8:
    jmp b11
  //SEG274 mode_8bppchunkybmm::@11
  b11:
  //SEG275 [153] call mode_ctrl 
  //SEG276 [155] phi from mode_8bppchunkybmm::@11 to mode_ctrl [phi:mode_8bppchunkybmm::@11->mode_ctrl]
  mode_ctrl_from_b11:
  //SEG277 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_COLORRAM_OFF#0 [phi:mode_8bppchunkybmm::@11->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG278 mode_8bppchunkybmm::@return
  breturn:
  //SEG279 [154] return 
    rts
}
//SEG280 mode_ctrl
// Allow the user to control the DTV graphics using different keys
mode_ctrl: {
    .label _1 = $bd
    .label _4 = $bf
    .label _8 = $c1
    .label _12 = $c3
    .label _16 = $c5
    .label _20 = $c7
    .label _24 = $c9
    .label _28 = $cb
    .label ctrl = $d
  //SEG281 [156] phi from mode_ctrl mode_ctrl::@30 to mode_ctrl::@1 [phi:mode_ctrl/mode_ctrl::@30->mode_ctrl::@1]
  b1_from_mode_ctrl:
  b1_from_b30:
  //SEG282 [156] phi (byte) dtv_control#114 = (byte) dtv_control#145 [phi:mode_ctrl/mode_ctrl::@30->mode_ctrl::@1#0] -- register_copy 
    jmp b1
  //SEG283 [156] phi from mode_ctrl::@14 to mode_ctrl::@1 [phi:mode_ctrl::@14->mode_ctrl::@1]
  b1_from_b14:
    jmp b1
  //SEG284 mode_ctrl::@1
  b1:
    jmp b4
  // Wait for the raster
  //SEG285 mode_ctrl::@4
  b4:
  //SEG286 [157] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto mode_ctrl::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
  //SEG287 [158] phi from mode_ctrl::@4 to mode_ctrl::@6 [phi:mode_ctrl::@4->mode_ctrl::@6]
  b6_from_b4:
    jmp b6
  //SEG288 mode_ctrl::@6
  b6:
  //SEG289 [159] call keyboard_key_pressed 
  //SEG290 [211] phi from mode_ctrl::@6 to keyboard_key_pressed [phi:mode_ctrl::@6->keyboard_key_pressed]
  keyboard_key_pressed_from_b6:
  //SEG291 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_SPACE#0 [phi:mode_ctrl::@6->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_SPACE
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG292 [160] (byte) keyboard_key_pressed::return#14 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_14
    jmp b32
  //SEG293 mode_ctrl::@32
  b32:
  //SEG294 [161] (byte~) mode_ctrl::$1 ← (byte) keyboard_key_pressed::return#14 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_14
    sta _1
  //SEG295 [162] if((byte~) mode_ctrl::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@7 -- vbuz1_eq_0_then_la1 
    lda _1
    cmp #0
    beq b7
    jmp breturn
  //SEG296 mode_ctrl::@return
  breturn:
  //SEG297 [163] return 
    rts
  //SEG298 mode_ctrl::@7
  b7:
  //SEG299 [164] (byte) mode_ctrl::ctrl#0 ← (byte) dtv_control#114 -- vbuz1=vbuz2 
    // Read the current control byte
    lda dtv_control
    sta ctrl
  //SEG300 [165] call keyboard_key_pressed 
  //SEG301 [211] phi from mode_ctrl::@7 to keyboard_key_pressed [phi:mode_ctrl::@7->keyboard_key_pressed]
  keyboard_key_pressed_from_b7:
  //SEG302 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_L#0 [phi:mode_ctrl::@7->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_L
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG303 [166] (byte) keyboard_key_pressed::return#15 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_15
    jmp b33
  //SEG304 mode_ctrl::@33
  b33:
  //SEG305 [167] (byte~) mode_ctrl::$4 ← (byte) keyboard_key_pressed::return#15 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_15
    sta _4
  //SEG306 [168] if((byte~) mode_ctrl::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@8 -- vbuz1_eq_0_then_la1 
    lda _4
    cmp #0
    beq b8_from_b33
    jmp b23
  //SEG307 mode_ctrl::@23
  b23:
  //SEG308 [169] (byte) mode_ctrl::ctrl#1 ← (byte) mode_ctrl::ctrl#0 | (const byte) DTV_LINEAR#0 -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_LINEAR
    ora ctrl
    sta ctrl
  //SEG309 [170] phi from mode_ctrl::@23 mode_ctrl::@33 to mode_ctrl::@8 [phi:mode_ctrl::@23/mode_ctrl::@33->mode_ctrl::@8]
  b8_from_b23:
  b8_from_b33:
  //SEG310 [170] phi (byte) mode_ctrl::ctrl#17 = (byte) mode_ctrl::ctrl#1 [phi:mode_ctrl::@23/mode_ctrl::@33->mode_ctrl::@8#0] -- register_copy 
    jmp b8
  //SEG311 mode_ctrl::@8
  b8:
  //SEG312 [171] call keyboard_key_pressed 
  //SEG313 [211] phi from mode_ctrl::@8 to keyboard_key_pressed [phi:mode_ctrl::@8->keyboard_key_pressed]
  keyboard_key_pressed_from_b8:
  //SEG314 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_H#0 [phi:mode_ctrl::@8->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_H
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG315 [172] (byte) keyboard_key_pressed::return#16 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_16
    jmp b34
  //SEG316 mode_ctrl::@34
  b34:
  //SEG317 [173] (byte~) mode_ctrl::$8 ← (byte) keyboard_key_pressed::return#16 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_16
    sta _8
  //SEG318 [174] if((byte~) mode_ctrl::$8==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@9 -- vbuz1_eq_0_then_la1 
    lda _8
    cmp #0
    beq b9_from_b34
    jmp b24
  //SEG319 mode_ctrl::@24
  b24:
  //SEG320 [175] (byte) mode_ctrl::ctrl#2 ← (byte) mode_ctrl::ctrl#17 | (const byte) DTV_HIGHCOLOR#0 -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_HIGHCOLOR
    ora ctrl
    sta ctrl
  //SEG321 [176] phi from mode_ctrl::@24 mode_ctrl::@34 to mode_ctrl::@9 [phi:mode_ctrl::@24/mode_ctrl::@34->mode_ctrl::@9]
  b9_from_b24:
  b9_from_b34:
  //SEG322 [176] phi (byte) mode_ctrl::ctrl#10 = (byte) mode_ctrl::ctrl#2 [phi:mode_ctrl::@24/mode_ctrl::@34->mode_ctrl::@9#0] -- register_copy 
    jmp b9
  //SEG323 mode_ctrl::@9
  b9:
  //SEG324 [177] call keyboard_key_pressed 
  //SEG325 [211] phi from mode_ctrl::@9 to keyboard_key_pressed [phi:mode_ctrl::@9->keyboard_key_pressed]
  keyboard_key_pressed_from_b9:
  //SEG326 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_O#0 [phi:mode_ctrl::@9->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_O
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG327 [178] (byte) keyboard_key_pressed::return#17 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_17
    jmp b35
  //SEG328 mode_ctrl::@35
  b35:
  //SEG329 [179] (byte~) mode_ctrl::$12 ← (byte) keyboard_key_pressed::return#17 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_17
    sta _12
  //SEG330 [180] if((byte~) mode_ctrl::$12==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@10 -- vbuz1_eq_0_then_la1 
    lda _12
    cmp #0
    beq b10_from_b35
    jmp b25
  //SEG331 mode_ctrl::@25
  b25:
  //SEG332 [181] (byte) mode_ctrl::ctrl#3 ← (byte) mode_ctrl::ctrl#10 | (const byte) DTV_OVERSCAN#0 -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_OVERSCAN
    ora ctrl
    sta ctrl
  //SEG333 [182] phi from mode_ctrl::@25 mode_ctrl::@35 to mode_ctrl::@10 [phi:mode_ctrl::@25/mode_ctrl::@35->mode_ctrl::@10]
  b10_from_b25:
  b10_from_b35:
  //SEG334 [182] phi (byte) mode_ctrl::ctrl#11 = (byte) mode_ctrl::ctrl#3 [phi:mode_ctrl::@25/mode_ctrl::@35->mode_ctrl::@10#0] -- register_copy 
    jmp b10
  //SEG335 mode_ctrl::@10
  b10:
  //SEG336 [183] call keyboard_key_pressed 
  //SEG337 [211] phi from mode_ctrl::@10 to keyboard_key_pressed [phi:mode_ctrl::@10->keyboard_key_pressed]
  keyboard_key_pressed_from_b10:
  //SEG338 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_B#0 [phi:mode_ctrl::@10->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_B
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG339 [184] (byte) keyboard_key_pressed::return#18 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_18
    jmp b36
  //SEG340 mode_ctrl::@36
  b36:
  //SEG341 [185] (byte~) mode_ctrl::$16 ← (byte) keyboard_key_pressed::return#18 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_18
    sta _16
  //SEG342 [186] if((byte~) mode_ctrl::$16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@11 -- vbuz1_eq_0_then_la1 
    lda _16
    cmp #0
    beq b11_from_b36
    jmp b26
  //SEG343 mode_ctrl::@26
  b26:
  //SEG344 [187] (byte) mode_ctrl::ctrl#4 ← (byte) mode_ctrl::ctrl#11 | (const byte) DTV_BORDER_OFF#0 -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_BORDER_OFF
    ora ctrl
    sta ctrl
  //SEG345 [188] phi from mode_ctrl::@26 mode_ctrl::@36 to mode_ctrl::@11 [phi:mode_ctrl::@26/mode_ctrl::@36->mode_ctrl::@11]
  b11_from_b26:
  b11_from_b36:
  //SEG346 [188] phi (byte) mode_ctrl::ctrl#12 = (byte) mode_ctrl::ctrl#4 [phi:mode_ctrl::@26/mode_ctrl::@36->mode_ctrl::@11#0] -- register_copy 
    jmp b11
  //SEG347 mode_ctrl::@11
  b11:
  //SEG348 [189] call keyboard_key_pressed 
  //SEG349 [211] phi from mode_ctrl::@11 to keyboard_key_pressed [phi:mode_ctrl::@11->keyboard_key_pressed]
  keyboard_key_pressed_from_b11:
  //SEG350 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_U#0 [phi:mode_ctrl::@11->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_U
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG351 [190] (byte) keyboard_key_pressed::return#19 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_19
    jmp b37
  //SEG352 mode_ctrl::@37
  b37:
  //SEG353 [191] (byte~) mode_ctrl::$20 ← (byte) keyboard_key_pressed::return#19 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_19
    sta _20
  //SEG354 [192] if((byte~) mode_ctrl::$20==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@12 -- vbuz1_eq_0_then_la1 
    lda _20
    cmp #0
    beq b12_from_b37
    jmp b27
  //SEG355 mode_ctrl::@27
  b27:
  //SEG356 [193] (byte) mode_ctrl::ctrl#5 ← (byte) mode_ctrl::ctrl#12 | (const byte) DTV_CHUNKY#0 -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_CHUNKY
    ora ctrl
    sta ctrl
  //SEG357 [194] phi from mode_ctrl::@27 mode_ctrl::@37 to mode_ctrl::@12 [phi:mode_ctrl::@27/mode_ctrl::@37->mode_ctrl::@12]
  b12_from_b27:
  b12_from_b37:
  //SEG358 [194] phi (byte) mode_ctrl::ctrl#13 = (byte) mode_ctrl::ctrl#5 [phi:mode_ctrl::@27/mode_ctrl::@37->mode_ctrl::@12#0] -- register_copy 
    jmp b12
  //SEG359 mode_ctrl::@12
  b12:
  //SEG360 [195] call keyboard_key_pressed 
  //SEG361 [211] phi from mode_ctrl::@12 to keyboard_key_pressed [phi:mode_ctrl::@12->keyboard_key_pressed]
  keyboard_key_pressed_from_b12:
  //SEG362 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_C#0 [phi:mode_ctrl::@12->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_C
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG363 [196] (byte) keyboard_key_pressed::return#20 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_20
    jmp b38
  //SEG364 mode_ctrl::@38
  b38:
  //SEG365 [197] (byte~) mode_ctrl::$24 ← (byte) keyboard_key_pressed::return#20 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_20
    sta _24
  //SEG366 [198] if((byte~) mode_ctrl::$24==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@13 -- vbuz1_eq_0_then_la1 
    lda _24
    cmp #0
    beq b13_from_b38
    jmp b28
  //SEG367 mode_ctrl::@28
  b28:
  //SEG368 [199] (byte) mode_ctrl::ctrl#6 ← (byte) mode_ctrl::ctrl#13 | (const byte) DTV_COLORRAM_OFF#0 -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_COLORRAM_OFF
    ora ctrl
    sta ctrl
  //SEG369 [200] phi from mode_ctrl::@28 mode_ctrl::@38 to mode_ctrl::@13 [phi:mode_ctrl::@28/mode_ctrl::@38->mode_ctrl::@13]
  b13_from_b28:
  b13_from_b38:
  //SEG370 [200] phi (byte) mode_ctrl::ctrl#22 = (byte) mode_ctrl::ctrl#6 [phi:mode_ctrl::@28/mode_ctrl::@38->mode_ctrl::@13#0] -- register_copy 
    jmp b13
  //SEG371 mode_ctrl::@13
  b13:
  //SEG372 [201] call keyboard_key_pressed 
  //SEG373 [211] phi from mode_ctrl::@13 to keyboard_key_pressed [phi:mode_ctrl::@13->keyboard_key_pressed]
  keyboard_key_pressed_from_b13:
  //SEG374 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_0#0 [phi:mode_ctrl::@13->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_0
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG375 [202] (byte) keyboard_key_pressed::return#21 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_21
    jmp b39
  //SEG376 mode_ctrl::@39
  b39:
  //SEG377 [203] (byte~) mode_ctrl::$28 ← (byte) keyboard_key_pressed::return#21 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_21
    sta _28
  //SEG378 [204] if((byte~) mode_ctrl::$28==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@46 -- vbuz1_eq_0_then_la1 
    lda _28
    cmp #0
    beq b46_from_b39
  //SEG379 [205] phi from mode_ctrl::@39 to mode_ctrl::@14 [phi:mode_ctrl::@39->mode_ctrl::@14]
  b14_from_b39:
  //SEG380 [205] phi (byte) mode_ctrl::ctrl#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_ctrl::@39->mode_ctrl::@14#0] -- vbuz1=vbuc1 
    lda #0
    sta ctrl
    jmp b14
  //SEG381 mode_ctrl::@14
  b14:
  //SEG382 [206] if((byte) mode_ctrl::ctrl#14==(byte) dtv_control#114) goto mode_ctrl::@1 -- vbuz1_eq_vbuz2_then_la1 
    lda ctrl
    cmp dtv_control
    beq b1_from_b14
    jmp b30
  //SEG383 mode_ctrl::@30
  b30:
  //SEG384 [207] (byte) dtv_control#17 ← (byte) mode_ctrl::ctrl#14 -- vbuz1=vbuz2 
    lda ctrl
    sta dtv_control
  //SEG385 [208] *((const byte*) DTV_CONTROL#0) ← (byte) mode_ctrl::ctrl#14 -- _deref_pbuc1=vbuz1 
    lda ctrl
    sta DTV_CONTROL
  //SEG386 [209] *((const byte*) BORDERCOL#0) ← (byte) mode_ctrl::ctrl#14 -- _deref_pbuc1=vbuz1 
    lda ctrl
    sta BORDERCOL
    jmp b1_from_b30
  //SEG387 [210] phi from mode_ctrl::@39 to mode_ctrl::@46 [phi:mode_ctrl::@39->mode_ctrl::@46]
  b46_from_b39:
    jmp b46
  //SEG388 mode_ctrl::@46
  b46:
  //SEG389 [205] phi from mode_ctrl::@46 to mode_ctrl::@14 [phi:mode_ctrl::@46->mode_ctrl::@14]
  b14_from_b46:
  //SEG390 [205] phi (byte) mode_ctrl::ctrl#14 = (byte) mode_ctrl::ctrl#22 [phi:mode_ctrl::@46->mode_ctrl::@14#0] -- register_copy 
    jmp b14
}
//SEG391 keyboard_key_pressed
// Determines whether a specific key is currently pressed by accessing the matrix directly
// The key is a keyboard code defined from the keyboard matrix by %00rrrccc, where rrr is the row ID (0-7) and ccc is the column ID (0-7)
// All keys exist as as KEY_XXX constants.
// Returns zero if the key is not pressed and a non-zero value if the key is currently pressed
// keyboard_key_pressed(byte zeropage($e) key)
keyboard_key_pressed: {
    .label _2 = $d0
    .label colidx = $cc
    .label rowidx = $cd
    .label return = $d1
    .label return_2 = $a1
    .label return_10 = $b1
    .label return_11 = $b3
    .label return_12 = $b5
    .label return_13 = $b7
    .label return_14 = $bc
    .label return_15 = $be
    .label return_16 = $c0
    .label return_17 = $c2
    .label return_18 = $c4
    .label return_19 = $c6
    .label return_20 = $c8
    .label return_21 = $ca
    .label key = $e
    .label return_24 = $a3
    .label return_25 = $a5
    .label return_26 = $a7
    .label return_27 = $a9
    .label return_28 = $ab
    .label return_29 = $ad
    .label return_30 = $af
  //SEG392 [212] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#20 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and key
    sta colidx
  //SEG393 [213] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#20 >> (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz2_ror_3 
    lda key
    lsr
    lsr
    lsr
    sta rowidx
  //SEG394 [214] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_key_pressed::rowidx#0 -- vbuz1=vbuz2 
    lda rowidx
    sta keyboard_matrix_read.rowid
  //SEG395 [215] call keyboard_matrix_read 
    jsr keyboard_matrix_read
  //SEG396 [216] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0 -- vbuz1=vbuz2 
    lda keyboard_matrix_read.return
    sta keyboard_matrix_read.return_2
    jmp b2
  //SEG397 keyboard_key_pressed::@2
  b2:
  //SEG398 [217] (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuz2 
    lda keyboard_matrix_read.return_2
    sta _2
  //SEG399 [218] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda _2
    ldy colidx
    and keyboard_matrix_col_bitmask,y
    sta return
    jmp breturn
  //SEG400 keyboard_key_pressed::@return
  breturn:
  //SEG401 [219] return 
    rts
}
//SEG402 keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable kill the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte zeropage($ce) rowid)
keyboard_matrix_read: {
    .label return = $d2
    .label rowid = $ce
    .label return_2 = $cf
  //SEG403 [220] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy rowid
    lda keyboard_matrix_row_bitmask,y
    sta CIA1_PORT_A
  //SEG404 [221] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuz1=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    sta return
    jmp breturn
  //SEG405 keyboard_matrix_read::@return
  breturn:
  //SEG406 [222] return 
    rts
}
//SEG407 dtvSetCpuBankSegment1
// Set the memory pointed to by CPU BANK 1 SEGMENT ($4000-$7fff)
// This sets which actual memory is addressed when the CPU reads/writes to $4000-$7fff
// The actual memory addressed will be $4000*cpuSegmentIdx
// dtvSetCpuBankSegment1(byte zeropage($f) cpuBankIdx)
dtvSetCpuBankSegment1: {
    // Move CPU BANK 1 SEGMENT ($4000-$7fff)
    .label cpuBank = $ff
    .label cpuBankIdx = $f
  //SEG408 [224] *((const byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 -- _deref_pbuc1=vbuz1 
    lda cpuBankIdx
    sta cpuBank
  //SEG409 asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda $ff
    .byte $32, $00
    jmp breturn
  //SEG410 dtvSetCpuBankSegment1::@return
  breturn:
  //SEG411 [226] return 
    rts
}
//SEG412 mode_8bpppixelcell
//8bpp Pixel Cell Mode (BMM/COLDIS = 0, ECM/MCM/HICOL/LINEAR/CHUNK = 1)
//Pixel Cell Adressing
//CharData[8]: (PlaneA[21:0])
//GfxData[8]: (PlaneB[21:14] & CharData[7:0] & RowCounter[3:0] & PixelCounter[7:0] )
//GfxData Pixel Shifter (8):
//- 8bpp color GfxData[7:0]
//Pixel cell mode can be thought of as a text mode that uses a 8x8 pixel 8bpp font (64 bytes/char).
//The characters come from counter A and the font (or "cells") from counter B.
//Counter B step and modulo should be set to 0, counter A modulo to 0 and counter A step to 1 for normal operation.
mode_8bpppixelcell: {
    // 8BPP Pixel Cell Screen (contains 40x25=1000 chars)
    .label PLANEA = $3c00
    // 8BPP Pixel Cell Charset (contains 256 64 byte chars)
    .label PLANEB = $4000
    .label _13 = $d3
    .label _14 = $d4
    .label _15 = $d5
    .label _16 = $d6
    .label _19 = $d7
    .label i = $10
    .label gfxa = $13
    .label ax = $12
    .label ay = $11
    .label bits = $19
    .label chargen = $16
    .label gfxb = $1a
    .label col = $1c
    .label cp = $1d
    .label cr = $18
    .label ch = $15
    .label c = $1e
  //SEG413 [227] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY
    sta DTV_CONTROL
  //SEG414 [228] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG415 [229] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG416 [230] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_8bpppixelcell::PLANEA#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #<PLANEA
    sta DTV_PLANEA_START_LO
  //SEG417 [231] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_8bpppixelcell::PLANEA#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
  //SEG418 [232] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG419 [233] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG420 [234] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG421 [235] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
  //SEG422 [236] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_8bpppixelcell::PLANEB#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #<PLANEB
    sta DTV_PLANEB_START_LO
  //SEG423 [237] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_8bpppixelcell::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
  //SEG424 [238] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG425 [239] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_STEP
  //SEG426 [240] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG427 [241] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG428 [242] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Border color
    lda #0
    sta BORDERCOL
  //SEG429 [243] phi from mode_8bpppixelcell to mode_8bpppixelcell::@1 [phi:mode_8bpppixelcell->mode_8bpppixelcell::@1]
  b1_from_mode_8bpppixelcell:
  //SEG430 [243] phi (byte) mode_8bpppixelcell::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell->mode_8bpppixelcell::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // DTV Palette - Grey Tones
  //SEG431 [243] phi from mode_8bpppixelcell::@1 to mode_8bpppixelcell::@1 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@1]
  b1_from_b1:
  //SEG432 [243] phi (byte) mode_8bpppixelcell::i#2 = (byte) mode_8bpppixelcell::i#1 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@1#0] -- register_copy 
    jmp b1
  //SEG433 mode_8bpppixelcell::@1
  b1:
  //SEG434 [244] *((const byte*) DTV_PALETTE#0 + (byte) mode_8bpppixelcell::i#2) ← (byte) mode_8bpppixelcell::i#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy i
    tya
    sta DTV_PALETTE,y
  //SEG435 [245] (byte) mode_8bpppixelcell::i#1 ← ++ (byte) mode_8bpppixelcell::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG436 [246] if((byte) mode_8bpppixelcell::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_8bpppixelcell::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b1
  //SEG437 [247] phi from mode_8bpppixelcell::@1 to mode_8bpppixelcell::@2 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@2]
  b2_from_b1:
  //SEG438 [247] phi (byte*) mode_8bpppixelcell::gfxa#3 = (const byte*) mode_8bpppixelcell::PLANEA#0 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@2#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta gfxa
    lda #>PLANEA
    sta gfxa+1
  //SEG439 [247] phi (byte) mode_8bpppixelcell::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
    jmp b2
  //SEG440 [247] phi from mode_8bpppixelcell::@9 to mode_8bpppixelcell::@2 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@2]
  b2_from_b9:
  //SEG441 [247] phi (byte*) mode_8bpppixelcell::gfxa#3 = (byte*) mode_8bpppixelcell::gfxa#1 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@2#0] -- register_copy 
  //SEG442 [247] phi (byte) mode_8bpppixelcell::ay#4 = (byte) mode_8bpppixelcell::ay#1 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@2#1] -- register_copy 
    jmp b2
  //SEG443 mode_8bpppixelcell::@2
  b2:
  //SEG444 [248] phi from mode_8bpppixelcell::@2 to mode_8bpppixelcell::@3 [phi:mode_8bpppixelcell::@2->mode_8bpppixelcell::@3]
  b3_from_b2:
  //SEG445 [248] phi (byte*) mode_8bpppixelcell::gfxa#2 = (byte*) mode_8bpppixelcell::gfxa#3 [phi:mode_8bpppixelcell::@2->mode_8bpppixelcell::@3#0] -- register_copy 
  //SEG446 [248] phi (byte) mode_8bpppixelcell::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@2->mode_8bpppixelcell::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta ax
    jmp b3
  //SEG447 [248] phi from mode_8bpppixelcell::@3 to mode_8bpppixelcell::@3 [phi:mode_8bpppixelcell::@3->mode_8bpppixelcell::@3]
  b3_from_b3:
  //SEG448 [248] phi (byte*) mode_8bpppixelcell::gfxa#2 = (byte*) mode_8bpppixelcell::gfxa#1 [phi:mode_8bpppixelcell::@3->mode_8bpppixelcell::@3#0] -- register_copy 
  //SEG449 [248] phi (byte) mode_8bpppixelcell::ax#2 = (byte) mode_8bpppixelcell::ax#1 [phi:mode_8bpppixelcell::@3->mode_8bpppixelcell::@3#1] -- register_copy 
    jmp b3
  //SEG450 mode_8bpppixelcell::@3
  b3:
  //SEG451 [249] (byte~) mode_8bpppixelcell::$13 ← (byte) mode_8bpppixelcell::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and ay
    sta _13
  //SEG452 [250] (byte~) mode_8bpppixelcell::$14 ← (byte~) mode_8bpppixelcell::$13 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_rol_4 
    lda _13
    asl
    asl
    asl
    asl
    sta _14
  //SEG453 [251] (byte~) mode_8bpppixelcell::$15 ← (byte) mode_8bpppixelcell::ax#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and ax
    sta _15
  //SEG454 [252] (byte~) mode_8bpppixelcell::$16 ← (byte~) mode_8bpppixelcell::$14 | (byte~) mode_8bpppixelcell::$15 -- vbuz1=vbuz2_bor_vbuz3 
    lda _14
    ora _15
    sta _16
  //SEG455 [253] *((byte*) mode_8bpppixelcell::gfxa#2) ← (byte~) mode_8bpppixelcell::$16 -- _deref_pbuz1=vbuz2 
    lda _16
    ldy #0
    sta (gfxa),y
  //SEG456 [254] (byte*) mode_8bpppixelcell::gfxa#1 ← ++ (byte*) mode_8bpppixelcell::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG457 [255] (byte) mode_8bpppixelcell::ax#1 ← ++ (byte) mode_8bpppixelcell::ax#2 -- vbuz1=_inc_vbuz1 
    inc ax
  //SEG458 [256] if((byte) mode_8bpppixelcell::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_8bpppixelcell::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda ax
    cmp #$28
    bne b3_from_b3
    jmp b9
  //SEG459 mode_8bpppixelcell::@9
  b9:
  //SEG460 [257] (byte) mode_8bpppixelcell::ay#1 ← ++ (byte) mode_8bpppixelcell::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG461 [258] if((byte) mode_8bpppixelcell::ay#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_8bpppixelcell::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda ay
    cmp #$19
    bne b2_from_b9
    jmp b10
  //SEG462 mode_8bpppixelcell::@10
  b10:
  //SEG463 [259] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 -- _deref_pbuc1=vbuc2 
    // 8bpp cells for Plane B (charset) - ROM charset with 256 colors
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
  //SEG464 [260] phi from mode_8bpppixelcell::@10 to mode_8bpppixelcell::@4 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@4]
  b4_from_b10:
  //SEG465 [260] phi (byte) mode_8bpppixelcell::ch#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta ch
  //SEG466 [260] phi (byte) mode_8bpppixelcell::col#7 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta col
  //SEG467 [260] phi (byte*) mode_8bpppixelcell::gfxb#7 = (const byte*) mode_8bpppixelcell::PLANEB#0 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@4#2] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta gfxb
    lda #>PLANEB
    sta gfxb+1
  //SEG468 [260] phi (byte*) mode_8bpppixelcell::chargen#4 = ((byte*))(word/dword/signed dword) $d000 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@4#3] -- pbuz1=pbuc1 
    lda #<$d000
    sta chargen
    lda #>$d000
    sta chargen+1
    jmp b4
  //SEG469 [260] phi from mode_8bpppixelcell::@13 to mode_8bpppixelcell::@4 [phi:mode_8bpppixelcell::@13->mode_8bpppixelcell::@4]
  b4_from_b13:
  //SEG470 [260] phi (byte) mode_8bpppixelcell::ch#8 = (byte) mode_8bpppixelcell::ch#1 [phi:mode_8bpppixelcell::@13->mode_8bpppixelcell::@4#0] -- register_copy 
  //SEG471 [260] phi (byte) mode_8bpppixelcell::col#7 = (byte) mode_8bpppixelcell::col#1 [phi:mode_8bpppixelcell::@13->mode_8bpppixelcell::@4#1] -- register_copy 
  //SEG472 [260] phi (byte*) mode_8bpppixelcell::gfxb#7 = (byte*) mode_8bpppixelcell::gfxb#1 [phi:mode_8bpppixelcell::@13->mode_8bpppixelcell::@4#2] -- register_copy 
  //SEG473 [260] phi (byte*) mode_8bpppixelcell::chargen#4 = (byte*) mode_8bpppixelcell::chargen#1 [phi:mode_8bpppixelcell::@13->mode_8bpppixelcell::@4#3] -- register_copy 
    jmp b4
  //SEG474 mode_8bpppixelcell::@4
  b4:
  //SEG475 [261] phi from mode_8bpppixelcell::@4 to mode_8bpppixelcell::@5 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@5]
  b5_from_b4:
  //SEG476 [261] phi (byte) mode_8bpppixelcell::cr#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta cr
  //SEG477 [261] phi (byte) mode_8bpppixelcell::col#5 = (byte) mode_8bpppixelcell::col#7 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@5#1] -- register_copy 
  //SEG478 [261] phi (byte*) mode_8bpppixelcell::gfxb#5 = (byte*) mode_8bpppixelcell::gfxb#7 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@5#2] -- register_copy 
  //SEG479 [261] phi (byte*) mode_8bpppixelcell::chargen#2 = (byte*) mode_8bpppixelcell::chargen#4 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@5#3] -- register_copy 
    jmp b5
  //SEG480 [261] phi from mode_8bpppixelcell::@12 to mode_8bpppixelcell::@5 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@5]
  b5_from_b12:
  //SEG481 [261] phi (byte) mode_8bpppixelcell::cr#6 = (byte) mode_8bpppixelcell::cr#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@5#0] -- register_copy 
  //SEG482 [261] phi (byte) mode_8bpppixelcell::col#5 = (byte) mode_8bpppixelcell::col#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@5#1] -- register_copy 
  //SEG483 [261] phi (byte*) mode_8bpppixelcell::gfxb#5 = (byte*) mode_8bpppixelcell::gfxb#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@5#2] -- register_copy 
  //SEG484 [261] phi (byte*) mode_8bpppixelcell::chargen#2 = (byte*) mode_8bpppixelcell::chargen#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@5#3] -- register_copy 
    jmp b5
  //SEG485 mode_8bpppixelcell::@5
  b5:
  //SEG486 [262] (byte) mode_8bpppixelcell::bits#0 ← *((byte*) mode_8bpppixelcell::chargen#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta bits
  //SEG487 [263] (byte*) mode_8bpppixelcell::chargen#1 ← ++ (byte*) mode_8bpppixelcell::chargen#2 -- pbuz1=_inc_pbuz1 
    inc chargen
    bne !+
    inc chargen+1
  !:
  //SEG488 [264] phi from mode_8bpppixelcell::@5 to mode_8bpppixelcell::@6 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6]
  b6_from_b5:
  //SEG489 [264] phi (byte) mode_8bpppixelcell::cp#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta cp
  //SEG490 [264] phi (byte) mode_8bpppixelcell::col#2 = (byte) mode_8bpppixelcell::col#5 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#1] -- register_copy 
  //SEG491 [264] phi (byte*) mode_8bpppixelcell::gfxb#2 = (byte*) mode_8bpppixelcell::gfxb#5 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#2] -- register_copy 
  //SEG492 [264] phi (byte) mode_8bpppixelcell::bits#2 = (byte) mode_8bpppixelcell::bits#0 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#3] -- register_copy 
    jmp b6
  //SEG493 [264] phi from mode_8bpppixelcell::@7 to mode_8bpppixelcell::@6 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@6]
  b6_from_b7:
  //SEG494 [264] phi (byte) mode_8bpppixelcell::cp#2 = (byte) mode_8bpppixelcell::cp#1 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@6#0] -- register_copy 
  //SEG495 [264] phi (byte) mode_8bpppixelcell::col#2 = (byte) mode_8bpppixelcell::col#1 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@6#1] -- register_copy 
  //SEG496 [264] phi (byte*) mode_8bpppixelcell::gfxb#2 = (byte*) mode_8bpppixelcell::gfxb#1 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@6#2] -- register_copy 
  //SEG497 [264] phi (byte) mode_8bpppixelcell::bits#2 = (byte) mode_8bpppixelcell::bits#1 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@6#3] -- register_copy 
    jmp b6
  //SEG498 mode_8bpppixelcell::@6
  b6:
  //SEG499 [265] (byte~) mode_8bpppixelcell::$19 ← (byte) mode_8bpppixelcell::bits#2 & (byte/word/signed word/dword/signed dword) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and bits
    sta _19
  //SEG500 [266] if((byte~) mode_8bpppixelcell::$19==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_8bpppixelcell::@7 -- vbuz1_eq_0_then_la1 
    lda _19
    cmp #0
    beq b7_from_b6
    jmp b11
  //SEG501 mode_8bpppixelcell::@11
  b11:
  //SEG502 [267] (byte~) mode_8bpppixelcell::c#3 ← (byte) mode_8bpppixelcell::col#2 -- vbuz1=vbuz2 
    lda col
    sta c
  //SEG503 [268] phi from mode_8bpppixelcell::@11 to mode_8bpppixelcell::@7 [phi:mode_8bpppixelcell::@11->mode_8bpppixelcell::@7]
  b7_from_b11:
  //SEG504 [268] phi (byte) mode_8bpppixelcell::c#2 = (byte~) mode_8bpppixelcell::c#3 [phi:mode_8bpppixelcell::@11->mode_8bpppixelcell::@7#0] -- register_copy 
    jmp b7
  //SEG505 [268] phi from mode_8bpppixelcell::@6 to mode_8bpppixelcell::@7 [phi:mode_8bpppixelcell::@6->mode_8bpppixelcell::@7]
  b7_from_b6:
  //SEG506 [268] phi (byte) mode_8bpppixelcell::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@6->mode_8bpppixelcell::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta c
    jmp b7
  //SEG507 mode_8bpppixelcell::@7
  b7:
  //SEG508 [269] *((byte*) mode_8bpppixelcell::gfxb#2) ← (byte) mode_8bpppixelcell::c#2 -- _deref_pbuz1=vbuz2 
    lda c
    ldy #0
    sta (gfxb),y
  //SEG509 [270] (byte*) mode_8bpppixelcell::gfxb#1 ← ++ (byte*) mode_8bpppixelcell::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG510 [271] (byte) mode_8bpppixelcell::bits#1 ← (byte) mode_8bpppixelcell::bits#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl bits
  //SEG511 [272] (byte) mode_8bpppixelcell::col#1 ← ++ (byte) mode_8bpppixelcell::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG512 [273] (byte) mode_8bpppixelcell::cp#1 ← ++ (byte) mode_8bpppixelcell::cp#2 -- vbuz1=_inc_vbuz1 
    inc cp
  //SEG513 [274] if((byte) mode_8bpppixelcell::cp#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto mode_8bpppixelcell::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda cp
    cmp #8
    bne b6_from_b7
    jmp b12
  //SEG514 mode_8bpppixelcell::@12
  b12:
  //SEG515 [275] (byte) mode_8bpppixelcell::cr#1 ← ++ (byte) mode_8bpppixelcell::cr#6 -- vbuz1=_inc_vbuz1 
    inc cr
  //SEG516 [276] if((byte) mode_8bpppixelcell::cr#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto mode_8bpppixelcell::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda cr
    cmp #8
    bne b5_from_b12
    jmp b13
  //SEG517 mode_8bpppixelcell::@13
  b13:
  //SEG518 [277] (byte) mode_8bpppixelcell::ch#1 ← ++ (byte) mode_8bpppixelcell::ch#8 -- vbuz1=_inc_vbuz1 
    inc ch
  //SEG519 [278] if((byte) mode_8bpppixelcell::ch#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_8bpppixelcell::@4 -- vbuz1_neq_0_then_la1 
    lda ch
    cmp #0
    bne b4_from_b13
    jmp b14
  //SEG520 mode_8bpppixelcell::@14
  b14:
  //SEG521 [279] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG522 [280] call mode_ctrl 
  //SEG523 [155] phi from mode_8bpppixelcell::@14 to mode_ctrl [phi:mode_8bpppixelcell::@14->mode_ctrl]
  mode_ctrl_from_b14:
  //SEG524 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0 [phi:mode_8bpppixelcell::@14->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG525 mode_8bpppixelcell::@return
  breturn:
  //SEG526 [281] return 
    rts
}
//SEG527 mode_sixsfred
// Sixs Fred Mode - 8bpp Packed Bitmap - Generated from the two DTV linear graphics plane counters
// Two Plane MultiColor Bitmap - 8bpp Packed Bitmap (CHUNK/COLDIS = 0, ECM/BMM/MCM/HICOL/LINEAR = 1)
// Resolution: 160x200
// Linear Adressing
// GfxData/PlaneA Pixel Shifter (2), CharData/PlaneB Pixel Shifter (2):
// - 8bpp color (ColorData[3:0],CharData/PlaneB[1:0], GfxData/PlaneA[1:0])
mode_sixsfred: {
    .label PLANEA = $4000
    .label PLANEB = $6000
    .label COLORS = $8000
    .label _16 = $d8
    .label _17 = $d9
    .label _20 = $da
    .label i = $1f
    .label col = $22
    .label cx = $21
    .label cy = $20
    .label row = $db
    .label gfxa = $25
    .label ax = $27
    .label ay = $24
    .label gfxb = $29
    .label bx = $2b
    .label by = $28
  //SEG528 [282] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR
    sta DTV_CONTROL
  //SEG529 [283] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG530 [284] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG531 [285] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_sixsfred::PLANEA#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #<PLANEA
    sta DTV_PLANEA_START_LO
  //SEG532 [286] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_sixsfred::PLANEA#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
  //SEG533 [287] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG534 [288] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG535 [289] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG536 [290] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
  //SEG537 [291] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_sixsfred::PLANEB#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #<PLANEB
    sta DTV_PLANEB_START_LO
  //SEG538 [292] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_sixsfred::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
  //SEG539 [293] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG540 [294] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
  //SEG541 [295] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG542 [296] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG543 [297] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_sixsfred::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG544 [298] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_sixsfred::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #>COLORS/$400
    sta DTV_COLOR_BANK_HI
  //SEG545 [299] phi from mode_sixsfred to mode_sixsfred::@1 [phi:mode_sixsfred->mode_sixsfred::@1]
  b1_from_mode_sixsfred:
  //SEG546 [299] phi (byte) mode_sixsfred::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred->mode_sixsfred::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // DTV Palette - Grey Tones
  //SEG547 [299] phi from mode_sixsfred::@1 to mode_sixsfred::@1 [phi:mode_sixsfred::@1->mode_sixsfred::@1]
  b1_from_b1:
  //SEG548 [299] phi (byte) mode_sixsfred::i#2 = (byte) mode_sixsfred::i#1 [phi:mode_sixsfred::@1->mode_sixsfred::@1#0] -- register_copy 
    jmp b1
  //SEG549 mode_sixsfred::@1
  b1:
  //SEG550 [300] *((const byte*) DTV_PALETTE#0 + (byte) mode_sixsfred::i#2) ← (byte) mode_sixsfred::i#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy i
    tya
    sta DTV_PALETTE,y
  //SEG551 [301] (byte) mode_sixsfred::i#1 ← ++ (byte) mode_sixsfred::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG552 [302] if((byte) mode_sixsfred::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_sixsfred::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b1
    jmp b8
  //SEG553 mode_sixsfred::@8
  b8:
  //SEG554 [303] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG555 [304] phi from mode_sixsfred::@8 to mode_sixsfred::@2 [phi:mode_sixsfred::@8->mode_sixsfred::@2]
  b2_from_b8:
  //SEG556 [304] phi (byte*) mode_sixsfred::col#3 = (const byte*) mode_sixsfred::COLORS#0 [phi:mode_sixsfred::@8->mode_sixsfred::@2#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG557 [304] phi (byte) mode_sixsfred::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@8->mode_sixsfred::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG558 [304] phi from mode_sixsfred::@9 to mode_sixsfred::@2 [phi:mode_sixsfred::@9->mode_sixsfred::@2]
  b2_from_b9:
  //SEG559 [304] phi (byte*) mode_sixsfred::col#3 = (byte*) mode_sixsfred::col#1 [phi:mode_sixsfred::@9->mode_sixsfred::@2#0] -- register_copy 
  //SEG560 [304] phi (byte) mode_sixsfred::cy#4 = (byte) mode_sixsfred::cy#1 [phi:mode_sixsfred::@9->mode_sixsfred::@2#1] -- register_copy 
    jmp b2
  //SEG561 mode_sixsfred::@2
  b2:
  //SEG562 [305] phi from mode_sixsfred::@2 to mode_sixsfred::@3 [phi:mode_sixsfred::@2->mode_sixsfred::@3]
  b3_from_b2:
  //SEG563 [305] phi (byte*) mode_sixsfred::col#2 = (byte*) mode_sixsfred::col#3 [phi:mode_sixsfred::@2->mode_sixsfred::@3#0] -- register_copy 
  //SEG564 [305] phi (byte) mode_sixsfred::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@2->mode_sixsfred::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta cx
    jmp b3
  //SEG565 [305] phi from mode_sixsfred::@3 to mode_sixsfred::@3 [phi:mode_sixsfred::@3->mode_sixsfred::@3]
  b3_from_b3:
  //SEG566 [305] phi (byte*) mode_sixsfred::col#2 = (byte*) mode_sixsfred::col#1 [phi:mode_sixsfred::@3->mode_sixsfred::@3#0] -- register_copy 
  //SEG567 [305] phi (byte) mode_sixsfred::cx#2 = (byte) mode_sixsfred::cx#1 [phi:mode_sixsfred::@3->mode_sixsfred::@3#1] -- register_copy 
    jmp b3
  //SEG568 mode_sixsfred::@3
  b3:
  //SEG569 [306] (byte~) mode_sixsfred::$16 ← (byte) mode_sixsfred::cx#2 + (byte) mode_sixsfred::cy#4 -- vbuz1=vbuz2_plus_vbuz3 
    lda cx
    clc
    adc cy
    sta _16
  //SEG570 [307] (byte~) mode_sixsfred::$17 ← (byte~) mode_sixsfred::$16 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and _16
    sta _17
  //SEG571 [308] *((byte*) mode_sixsfred::col#2) ← (byte~) mode_sixsfred::$17 -- _deref_pbuz1=vbuz2 
    lda _17
    ldy #0
    sta (col),y
  //SEG572 [309] (byte*) mode_sixsfred::col#1 ← ++ (byte*) mode_sixsfred::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG573 [310] (byte) mode_sixsfred::cx#1 ← ++ (byte) mode_sixsfred::cx#2 -- vbuz1=_inc_vbuz1 
    inc cx
  //SEG574 [311] if((byte) mode_sixsfred::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda cx
    cmp #$28
    bne b3_from_b3
    jmp b9
  //SEG575 mode_sixsfred::@9
  b9:
  //SEG576 [312] (byte) mode_sixsfred::cy#1 ← ++ (byte) mode_sixsfred::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG577 [313] if((byte) mode_sixsfred::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_sixsfred::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b9
  //SEG578 [314] phi from mode_sixsfred::@9 to mode_sixsfred::@4 [phi:mode_sixsfred::@9->mode_sixsfred::@4]
  b4_from_b9:
  //SEG579 [314] phi (byte*) mode_sixsfred::gfxa#3 = (const byte*) mode_sixsfred::PLANEA#0 [phi:mode_sixsfred::@9->mode_sixsfred::@4#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta gfxa
    lda #>PLANEA
    sta gfxa+1
  //SEG580 [314] phi (byte) mode_sixsfred::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@9->mode_sixsfred::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
    jmp b4
  //SEG581 [314] phi from mode_sixsfred::@11 to mode_sixsfred::@4 [phi:mode_sixsfred::@11->mode_sixsfred::@4]
  b4_from_b11:
  //SEG582 [314] phi (byte*) mode_sixsfred::gfxa#3 = (byte*) mode_sixsfred::gfxa#1 [phi:mode_sixsfred::@11->mode_sixsfred::@4#0] -- register_copy 
  //SEG583 [314] phi (byte) mode_sixsfred::ay#4 = (byte) mode_sixsfred::ay#1 [phi:mode_sixsfred::@11->mode_sixsfred::@4#1] -- register_copy 
    jmp b4
  //SEG584 mode_sixsfred::@4
  b4:
  //SEG585 [315] phi from mode_sixsfred::@4 to mode_sixsfred::@5 [phi:mode_sixsfred::@4->mode_sixsfred::@5]
  b5_from_b4:
  //SEG586 [315] phi (byte) mode_sixsfred::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@4->mode_sixsfred::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta ax
  //SEG587 [315] phi (byte*) mode_sixsfred::gfxa#2 = (byte*) mode_sixsfred::gfxa#3 [phi:mode_sixsfred::@4->mode_sixsfred::@5#1] -- register_copy 
    jmp b5
  //SEG588 [315] phi from mode_sixsfred::@5 to mode_sixsfred::@5 [phi:mode_sixsfred::@5->mode_sixsfred::@5]
  b5_from_b5:
  //SEG589 [315] phi (byte) mode_sixsfred::ax#2 = (byte) mode_sixsfred::ax#1 [phi:mode_sixsfred::@5->mode_sixsfred::@5#0] -- register_copy 
  //SEG590 [315] phi (byte*) mode_sixsfred::gfxa#2 = (byte*) mode_sixsfred::gfxa#1 [phi:mode_sixsfred::@5->mode_sixsfred::@5#1] -- register_copy 
    jmp b5
  //SEG591 mode_sixsfred::@5
  b5:
  //SEG592 [316] (byte~) mode_sixsfred::$20 ← (byte) mode_sixsfred::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda ay
    lsr
    sta _20
  //SEG593 [317] (byte) mode_sixsfred::row#0 ← (byte~) mode_sixsfred::$20 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz2_band_vbuc1 
    lda #3
    and _20
    sta row
  //SEG594 [318] *((byte*) mode_sixsfred::gfxa#2) ← *((const byte[]) mode_sixsfred::row_bitmask#0 + (byte) mode_sixsfred::row#0) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy row
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
  //SEG595 [319] (byte*) mode_sixsfred::gfxa#1 ← ++ (byte*) mode_sixsfred::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG596 [320] (byte) mode_sixsfred::ax#1 ← ++ (byte) mode_sixsfred::ax#2 -- vbuz1=_inc_vbuz1 
    inc ax
  //SEG597 [321] if((byte) mode_sixsfred::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda ax
    cmp #$28
    bne b5_from_b5
    jmp b11
  //SEG598 mode_sixsfred::@11
  b11:
  //SEG599 [322] (byte) mode_sixsfred::ay#1 ← ++ (byte) mode_sixsfred::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG600 [323] if((byte) mode_sixsfred::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_sixsfred::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda ay
    cmp #$c8
    bne b4_from_b11
  //SEG601 [324] phi from mode_sixsfred::@11 to mode_sixsfred::@6 [phi:mode_sixsfred::@11->mode_sixsfred::@6]
  b6_from_b11:
  //SEG602 [324] phi (byte) mode_sixsfred::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@11->mode_sixsfred::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG603 [324] phi (byte*) mode_sixsfred::gfxb#3 = (const byte*) mode_sixsfred::PLANEB#0 [phi:mode_sixsfred::@11->mode_sixsfred::@6#1] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta gfxb
    lda #>PLANEB
    sta gfxb+1
    jmp b6
  //SEG604 [324] phi from mode_sixsfred::@13 to mode_sixsfred::@6 [phi:mode_sixsfred::@13->mode_sixsfred::@6]
  b6_from_b13:
  //SEG605 [324] phi (byte) mode_sixsfred::by#4 = (byte) mode_sixsfred::by#1 [phi:mode_sixsfred::@13->mode_sixsfred::@6#0] -- register_copy 
  //SEG606 [324] phi (byte*) mode_sixsfred::gfxb#3 = (byte*) mode_sixsfred::gfxb#1 [phi:mode_sixsfred::@13->mode_sixsfred::@6#1] -- register_copy 
    jmp b6
  //SEG607 mode_sixsfred::@6
  b6:
  //SEG608 [325] phi from mode_sixsfred::@6 to mode_sixsfred::@7 [phi:mode_sixsfred::@6->mode_sixsfred::@7]
  b7_from_b6:
  //SEG609 [325] phi (byte) mode_sixsfred::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@6->mode_sixsfred::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta bx
  //SEG610 [325] phi (byte*) mode_sixsfred::gfxb#2 = (byte*) mode_sixsfred::gfxb#3 [phi:mode_sixsfred::@6->mode_sixsfred::@7#1] -- register_copy 
    jmp b7
  //SEG611 [325] phi from mode_sixsfred::@7 to mode_sixsfred::@7 [phi:mode_sixsfred::@7->mode_sixsfred::@7]
  b7_from_b7:
  //SEG612 [325] phi (byte) mode_sixsfred::bx#2 = (byte) mode_sixsfred::bx#1 [phi:mode_sixsfred::@7->mode_sixsfred::@7#0] -- register_copy 
  //SEG613 [325] phi (byte*) mode_sixsfred::gfxb#2 = (byte*) mode_sixsfred::gfxb#1 [phi:mode_sixsfred::@7->mode_sixsfred::@7#1] -- register_copy 
    jmp b7
  //SEG614 mode_sixsfred::@7
  b7:
  //SEG615 [326] *((byte*) mode_sixsfred::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $1b -- _deref_pbuz1=vbuc1 
    lda #$1b
    ldy #0
    sta (gfxb),y
  //SEG616 [327] (byte*) mode_sixsfred::gfxb#1 ← ++ (byte*) mode_sixsfred::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG617 [328] (byte) mode_sixsfred::bx#1 ← ++ (byte) mode_sixsfred::bx#2 -- vbuz1=_inc_vbuz1 
    inc bx
  //SEG618 [329] if((byte) mode_sixsfred::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda bx
    cmp #$28
    bne b7_from_b7
    jmp b13
  //SEG619 mode_sixsfred::@13
  b13:
  //SEG620 [330] (byte) mode_sixsfred::by#1 ← ++ (byte) mode_sixsfred::by#4 -- vbuz1=_inc_vbuz1 
    inc by
  //SEG621 [331] if((byte) mode_sixsfred::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_sixsfred::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda by
    cmp #$c8
    bne b6_from_b13
  //SEG622 [332] phi from mode_sixsfred::@13 to mode_sixsfred::@14 [phi:mode_sixsfred::@13->mode_sixsfred::@14]
  b14_from_b13:
    jmp b14
  //SEG623 mode_sixsfred::@14
  b14:
  //SEG624 [333] call mode_ctrl 
  //SEG625 [155] phi from mode_sixsfred::@14 to mode_ctrl [phi:mode_sixsfred::@14->mode_ctrl]
  mode_ctrl_from_b14:
  //SEG626 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 [phi:mode_sixsfred::@14->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR|DTV_LINEAR
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG627 mode_sixsfred::@return
  breturn:
  //SEG628 [334] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
//SEG629 mode_twoplanebitmap
// Two Plane Bitmap - generated from the two DTV linear graphics plane counters
// Two Plane Bitmap Mode (CHUNK/COLDIS/MCM = 0, ECM/BMM/HICOL/LINEAR = 1)
// Resolution: 320x200
// Linear Adressing
// GfxData/PlaneA Pixel Shifter (1), CharData/PlaneB Pixel Shifter (1):
// - Plane A = 0 Plane B = 0: 8bpp BgColor0[7:0]
// - Plane A = 0 Plane B = 1: 8bpp "0000" & ColorData[7:4]
// - Plane A = 1 Plane B = 0: 8bpp "0000" & ColorData[3:0]
// - Plane A = 1 Plane B = 1: 8bpp BgColor1[7:0]
mode_twoplanebitmap: {
    .label PLANEA = $4000
    .label PLANEB = $6000
    .label COLORS = $8000
    .label _15 = $dc
    .label _16 = $dd
    .label _17 = $de
    .label _18 = $df
    .label _21 = $e0
    .label i = $2c
    .label col = $2f
    .label cx = $2e
    .label cy = $2d
    .label gfxa = $32
    .label ax = $34
    .label ay = $31
    .label gfxb = $36
    .label bx = $38
    .label by = $35
  //SEG630 [335] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR
    sta DTV_CONTROL
  //SEG631 [336] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG632 [337] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG633 [338] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_twoplanebitmap::PLANEA#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #<PLANEA
    sta DTV_PLANEA_START_LO
  //SEG634 [339] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_twoplanebitmap::PLANEA#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
  //SEG635 [340] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG636 [341] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG637 [342] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG638 [343] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
  //SEG639 [344] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_twoplanebitmap::PLANEB#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #<PLANEB
    sta DTV_PLANEB_START_LO
  //SEG640 [345] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_twoplanebitmap::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
  //SEG641 [346] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG642 [347] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
  //SEG643 [348] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG644 [349] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG645 [350] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_twoplanebitmap::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG646 [351] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_twoplanebitmap::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #>COLORS/$400
    sta DTV_COLOR_BANK_HI
  //SEG647 [352] phi from mode_twoplanebitmap to mode_twoplanebitmap::@1 [phi:mode_twoplanebitmap->mode_twoplanebitmap::@1]
  b1_from_mode_twoplanebitmap:
  //SEG648 [352] phi (byte) mode_twoplanebitmap::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap->mode_twoplanebitmap::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // DTV Palette - Grey Tones
  //SEG649 [352] phi from mode_twoplanebitmap::@1 to mode_twoplanebitmap::@1 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@1]
  b1_from_b1:
  //SEG650 [352] phi (byte) mode_twoplanebitmap::i#2 = (byte) mode_twoplanebitmap::i#1 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@1#0] -- register_copy 
    jmp b1
  //SEG651 mode_twoplanebitmap::@1
  b1:
  //SEG652 [353] *((const byte*) DTV_PALETTE#0 + (byte) mode_twoplanebitmap::i#2) ← (byte) mode_twoplanebitmap::i#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy i
    tya
    sta DTV_PALETTE,y
  //SEG653 [354] (byte) mode_twoplanebitmap::i#1 ← ++ (byte) mode_twoplanebitmap::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG654 [355] if((byte) mode_twoplanebitmap::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_twoplanebitmap::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b1
    jmp b10
  //SEG655 mode_twoplanebitmap::@10
  b10:
  //SEG656 [356] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG657 [357] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $70 -- _deref_pbuc1=vbuc2 
    lda #$70
    sta BGCOL1
  //SEG658 [358] *((const byte*) BGCOL2#0) ← (byte/word/signed word/dword/signed dword) $d4 -- _deref_pbuc1=vbuc2 
    // Color for bits 00
    lda #$d4
    sta BGCOL2
  //SEG659 [359] phi from mode_twoplanebitmap::@10 to mode_twoplanebitmap::@2 [phi:mode_twoplanebitmap::@10->mode_twoplanebitmap::@2]
  b2_from_b10:
  //SEG660 [359] phi (byte*) mode_twoplanebitmap::col#3 = (const byte*) mode_twoplanebitmap::COLORS#0 [phi:mode_twoplanebitmap::@10->mode_twoplanebitmap::@2#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG661 [359] phi (byte) mode_twoplanebitmap::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@10->mode_twoplanebitmap::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG662 [359] phi from mode_twoplanebitmap::@11 to mode_twoplanebitmap::@2 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@2]
  b2_from_b11:
  //SEG663 [359] phi (byte*) mode_twoplanebitmap::col#3 = (byte*) mode_twoplanebitmap::col#1 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@2#0] -- register_copy 
  //SEG664 [359] phi (byte) mode_twoplanebitmap::cy#4 = (byte) mode_twoplanebitmap::cy#1 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@2#1] -- register_copy 
    jmp b2
  //SEG665 mode_twoplanebitmap::@2
  b2:
  //SEG666 [360] phi from mode_twoplanebitmap::@2 to mode_twoplanebitmap::@3 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3]
  b3_from_b2:
  //SEG667 [360] phi (byte*) mode_twoplanebitmap::col#2 = (byte*) mode_twoplanebitmap::col#3 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3#0] -- register_copy 
  //SEG668 [360] phi (byte) mode_twoplanebitmap::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta cx
    jmp b3
  //SEG669 [360] phi from mode_twoplanebitmap::@3 to mode_twoplanebitmap::@3 [phi:mode_twoplanebitmap::@3->mode_twoplanebitmap::@3]
  b3_from_b3:
  //SEG670 [360] phi (byte*) mode_twoplanebitmap::col#2 = (byte*) mode_twoplanebitmap::col#1 [phi:mode_twoplanebitmap::@3->mode_twoplanebitmap::@3#0] -- register_copy 
  //SEG671 [360] phi (byte) mode_twoplanebitmap::cx#2 = (byte) mode_twoplanebitmap::cx#1 [phi:mode_twoplanebitmap::@3->mode_twoplanebitmap::@3#1] -- register_copy 
    jmp b3
  //SEG672 mode_twoplanebitmap::@3
  b3:
  //SEG673 [361] (byte~) mode_twoplanebitmap::$15 ← (byte) mode_twoplanebitmap::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cy
    sta _15
  //SEG674 [362] (byte~) mode_twoplanebitmap::$16 ← (byte~) mode_twoplanebitmap::$15 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_rol_4 
    lda _15
    asl
    asl
    asl
    asl
    sta _16
  //SEG675 [363] (byte~) mode_twoplanebitmap::$17 ← (byte) mode_twoplanebitmap::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cx
    sta _17
  //SEG676 [364] (byte~) mode_twoplanebitmap::$18 ← (byte~) mode_twoplanebitmap::$16 | (byte~) mode_twoplanebitmap::$17 -- vbuz1=vbuz2_bor_vbuz3 
    lda _16
    ora _17
    sta _18
  //SEG677 [365] *((byte*) mode_twoplanebitmap::col#2) ← (byte~) mode_twoplanebitmap::$18 -- _deref_pbuz1=vbuz2 
    lda _18
    ldy #0
    sta (col),y
  //SEG678 [366] (byte*) mode_twoplanebitmap::col#1 ← ++ (byte*) mode_twoplanebitmap::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG679 [367] (byte) mode_twoplanebitmap::cx#1 ← ++ (byte) mode_twoplanebitmap::cx#2 -- vbuz1=_inc_vbuz1 
    inc cx
  //SEG680 [368] if((byte) mode_twoplanebitmap::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_twoplanebitmap::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda cx
    cmp #$28
    bne b3_from_b3
    jmp b11
  //SEG681 mode_twoplanebitmap::@11
  b11:
  //SEG682 [369] (byte) mode_twoplanebitmap::cy#1 ← ++ (byte) mode_twoplanebitmap::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG683 [370] if((byte) mode_twoplanebitmap::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_twoplanebitmap::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b11
  //SEG684 [371] phi from mode_twoplanebitmap::@11 to mode_twoplanebitmap::@4 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@4]
  b4_from_b11:
  //SEG685 [371] phi (byte*) mode_twoplanebitmap::gfxa#6 = (const byte*) mode_twoplanebitmap::PLANEA#0 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@4#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta gfxa
    lda #>PLANEA
    sta gfxa+1
  //SEG686 [371] phi (byte) mode_twoplanebitmap::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
    jmp b4
  //SEG687 [371] phi from mode_twoplanebitmap::@15 to mode_twoplanebitmap::@4 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@4]
  b4_from_b15:
  //SEG688 [371] phi (byte*) mode_twoplanebitmap::gfxa#6 = (byte*) mode_twoplanebitmap::gfxa#7 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@4#0] -- register_copy 
  //SEG689 [371] phi (byte) mode_twoplanebitmap::ay#4 = (byte) mode_twoplanebitmap::ay#1 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@4#1] -- register_copy 
    jmp b4
  //SEG690 mode_twoplanebitmap::@4
  b4:
  //SEG691 [372] phi from mode_twoplanebitmap::@4 to mode_twoplanebitmap::@5 [phi:mode_twoplanebitmap::@4->mode_twoplanebitmap::@5]
  b5_from_b4:
  //SEG692 [372] phi (byte) mode_twoplanebitmap::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@4->mode_twoplanebitmap::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta ax
  //SEG693 [372] phi (byte*) mode_twoplanebitmap::gfxa#3 = (byte*) mode_twoplanebitmap::gfxa#6 [phi:mode_twoplanebitmap::@4->mode_twoplanebitmap::@5#1] -- register_copy 
    jmp b5
  //SEG694 [372] phi from mode_twoplanebitmap::@7 to mode_twoplanebitmap::@5 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@5]
  b5_from_b7:
  //SEG695 [372] phi (byte) mode_twoplanebitmap::ax#2 = (byte) mode_twoplanebitmap::ax#1 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@5#0] -- register_copy 
  //SEG696 [372] phi (byte*) mode_twoplanebitmap::gfxa#3 = (byte*) mode_twoplanebitmap::gfxa#7 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@5#1] -- register_copy 
    jmp b5
  //SEG697 mode_twoplanebitmap::@5
  b5:
  //SEG698 [373] (byte~) mode_twoplanebitmap::$21 ← (byte) mode_twoplanebitmap::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_band_vbuc1 
    lda #4
    and ay
    sta _21
  //SEG699 [374] if((byte~) mode_twoplanebitmap::$21==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_twoplanebitmap::@6 -- vbuz1_eq_0_then_la1 
    lda _21
    cmp #0
    beq b6
    jmp b13
  //SEG700 mode_twoplanebitmap::@13
  b13:
  //SEG701 [375] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/word/signed word/dword/signed dword) $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
  //SEG702 [376] (byte*) mode_twoplanebitmap::gfxa#2 ← ++ (byte*) mode_twoplanebitmap::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG703 [377] phi from mode_twoplanebitmap::@13 mode_twoplanebitmap::@6 to mode_twoplanebitmap::@7 [phi:mode_twoplanebitmap::@13/mode_twoplanebitmap::@6->mode_twoplanebitmap::@7]
  b7_from_b13:
  b7_from_b6:
  //SEG704 [377] phi (byte*) mode_twoplanebitmap::gfxa#7 = (byte*) mode_twoplanebitmap::gfxa#2 [phi:mode_twoplanebitmap::@13/mode_twoplanebitmap::@6->mode_twoplanebitmap::@7#0] -- register_copy 
    jmp b7
  //SEG705 mode_twoplanebitmap::@7
  b7:
  //SEG706 [378] (byte) mode_twoplanebitmap::ax#1 ← ++ (byte) mode_twoplanebitmap::ax#2 -- vbuz1=_inc_vbuz1 
    inc ax
  //SEG707 [379] if((byte) mode_twoplanebitmap::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_twoplanebitmap::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda ax
    cmp #$28
    bne b5_from_b7
    jmp b15
  //SEG708 mode_twoplanebitmap::@15
  b15:
  //SEG709 [380] (byte) mode_twoplanebitmap::ay#1 ← ++ (byte) mode_twoplanebitmap::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG710 [381] if((byte) mode_twoplanebitmap::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_twoplanebitmap::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda ay
    cmp #$c8
    bne b4_from_b15
  //SEG711 [382] phi from mode_twoplanebitmap::@15 to mode_twoplanebitmap::@8 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@8]
  b8_from_b15:
  //SEG712 [382] phi (byte) mode_twoplanebitmap::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@8#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG713 [382] phi (byte*) mode_twoplanebitmap::gfxb#3 = (const byte*) mode_twoplanebitmap::PLANEB#0 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@8#1] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta gfxb
    lda #>PLANEB
    sta gfxb+1
    jmp b8
  //SEG714 [382] phi from mode_twoplanebitmap::@17 to mode_twoplanebitmap::@8 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@8]
  b8_from_b17:
  //SEG715 [382] phi (byte) mode_twoplanebitmap::by#4 = (byte) mode_twoplanebitmap::by#1 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@8#0] -- register_copy 
  //SEG716 [382] phi (byte*) mode_twoplanebitmap::gfxb#3 = (byte*) mode_twoplanebitmap::gfxb#1 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@8#1] -- register_copy 
    jmp b8
  //SEG717 mode_twoplanebitmap::@8
  b8:
  //SEG718 [383] phi from mode_twoplanebitmap::@8 to mode_twoplanebitmap::@9 [phi:mode_twoplanebitmap::@8->mode_twoplanebitmap::@9]
  b9_from_b8:
  //SEG719 [383] phi (byte) mode_twoplanebitmap::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@8->mode_twoplanebitmap::@9#0] -- vbuz1=vbuc1 
    lda #0
    sta bx
  //SEG720 [383] phi (byte*) mode_twoplanebitmap::gfxb#2 = (byte*) mode_twoplanebitmap::gfxb#3 [phi:mode_twoplanebitmap::@8->mode_twoplanebitmap::@9#1] -- register_copy 
    jmp b9
  //SEG721 [383] phi from mode_twoplanebitmap::@9 to mode_twoplanebitmap::@9 [phi:mode_twoplanebitmap::@9->mode_twoplanebitmap::@9]
  b9_from_b9:
  //SEG722 [383] phi (byte) mode_twoplanebitmap::bx#2 = (byte) mode_twoplanebitmap::bx#1 [phi:mode_twoplanebitmap::@9->mode_twoplanebitmap::@9#0] -- register_copy 
  //SEG723 [383] phi (byte*) mode_twoplanebitmap::gfxb#2 = (byte*) mode_twoplanebitmap::gfxb#1 [phi:mode_twoplanebitmap::@9->mode_twoplanebitmap::@9#1] -- register_copy 
    jmp b9
  //SEG724 mode_twoplanebitmap::@9
  b9:
  //SEG725 [384] *((byte*) mode_twoplanebitmap::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $f -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
  //SEG726 [385] (byte*) mode_twoplanebitmap::gfxb#1 ← ++ (byte*) mode_twoplanebitmap::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG727 [386] (byte) mode_twoplanebitmap::bx#1 ← ++ (byte) mode_twoplanebitmap::bx#2 -- vbuz1=_inc_vbuz1 
    inc bx
  //SEG728 [387] if((byte) mode_twoplanebitmap::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_twoplanebitmap::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda bx
    cmp #$28
    bne b9_from_b9
    jmp b17
  //SEG729 mode_twoplanebitmap::@17
  b17:
  //SEG730 [388] (byte) mode_twoplanebitmap::by#1 ← ++ (byte) mode_twoplanebitmap::by#4 -- vbuz1=_inc_vbuz1 
    inc by
  //SEG731 [389] if((byte) mode_twoplanebitmap::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_twoplanebitmap::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda by
    cmp #$c8
    bne b8_from_b17
  //SEG732 [390] phi from mode_twoplanebitmap::@17 to mode_twoplanebitmap::@18 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@18]
  b18_from_b17:
    jmp b18
  //SEG733 mode_twoplanebitmap::@18
  b18:
  //SEG734 [391] call mode_ctrl 
  //SEG735 [155] phi from mode_twoplanebitmap::@18 to mode_ctrl [phi:mode_twoplanebitmap::@18->mode_ctrl]
  mode_ctrl_from_b18:
  //SEG736 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 [phi:mode_twoplanebitmap::@18->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR|DTV_LINEAR
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG737 mode_twoplanebitmap::@return
  breturn:
  //SEG738 [392] return 
    rts
  //SEG739 mode_twoplanebitmap::@6
  b6:
  //SEG740 [393] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (gfxa),y
  //SEG741 [394] (byte*) mode_twoplanebitmap::gfxa#1 ← ++ (byte*) mode_twoplanebitmap::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
    jmp b7_from_b6
}
//SEG742 mode_sixsfred2
// Sixs Fred Mode 2 - 8bpp Packed Bitmap - Generated from the two DTV linear graphics plane counters
// Two Plane MultiColor Bitmap - 8bpp Packed Bitmap (CHUNK/COLDIS/HICOL = 0, ECM/BMM/MCM/LINEAR = 1)
// Resolution: 160x200
// Linear Adressing
// PlaneA Pixel Shifter (2), PlaneB Pixel Shifter (2):
// - 8bpp color (PlaneB[1:0],ColorData[5:4],PlaneA[1:0],ColorData[1:0])
mode_sixsfred2: {
    .label PLANEA = $4000
    .label PLANEB = $6000
    .label COLORS = $8000
    .label _14 = $e1
    .label _15 = $e2
    .label _16 = $e3
    .label _17 = $e4
    .label _20 = $e5
    .label i = $39
    .label col = $3c
    .label cx = $3b
    .label cy = $3a
    .label row = $e6
    .label gfxa = $3f
    .label ax = $41
    .label ay = $3e
    .label gfxb = $43
    .label bx = $45
    .label by = $42
  //SEG743 [395] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_LINEAR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_LINEAR
    sta DTV_CONTROL
  //SEG744 [396] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG745 [397] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG746 [398] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_sixsfred2::PLANEA#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #<PLANEA
    sta DTV_PLANEA_START_LO
  //SEG747 [399] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_sixsfred2::PLANEA#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
  //SEG748 [400] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG749 [401] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG750 [402] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG751 [403] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
  //SEG752 [404] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_sixsfred2::PLANEB#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #<PLANEB
    sta DTV_PLANEB_START_LO
  //SEG753 [405] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_sixsfred2::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
  //SEG754 [406] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG755 [407] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
  //SEG756 [408] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG757 [409] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG758 [410] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_sixsfred2::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG759 [411] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_sixsfred2::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #>COLORS/$400
    sta DTV_COLOR_BANK_HI
  //SEG760 [412] phi from mode_sixsfred2 to mode_sixsfred2::@1 [phi:mode_sixsfred2->mode_sixsfred2::@1]
  b1_from_mode_sixsfred2:
  //SEG761 [412] phi (byte) mode_sixsfred2::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2->mode_sixsfred2::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // DTV Palette - Grey Tones
  //SEG762 [412] phi from mode_sixsfred2::@1 to mode_sixsfred2::@1 [phi:mode_sixsfred2::@1->mode_sixsfred2::@1]
  b1_from_b1:
  //SEG763 [412] phi (byte) mode_sixsfred2::i#2 = (byte) mode_sixsfred2::i#1 [phi:mode_sixsfred2::@1->mode_sixsfred2::@1#0] -- register_copy 
    jmp b1
  //SEG764 mode_sixsfred2::@1
  b1:
  //SEG765 [413] *((const byte*) DTV_PALETTE#0 + (byte) mode_sixsfred2::i#2) ← (byte) mode_sixsfred2::i#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy i
    tya
    sta DTV_PALETTE,y
  //SEG766 [414] (byte) mode_sixsfred2::i#1 ← ++ (byte) mode_sixsfred2::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG767 [415] if((byte) mode_sixsfred2::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_sixsfred2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b1
    jmp b8
  //SEG768 mode_sixsfred2::@8
  b8:
  //SEG769 [416] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG770 [417] phi from mode_sixsfred2::@8 to mode_sixsfred2::@2 [phi:mode_sixsfred2::@8->mode_sixsfred2::@2]
  b2_from_b8:
  //SEG771 [417] phi (byte*) mode_sixsfred2::col#3 = (const byte*) mode_sixsfred2::COLORS#0 [phi:mode_sixsfred2::@8->mode_sixsfred2::@2#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG772 [417] phi (byte) mode_sixsfred2::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@8->mode_sixsfred2::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG773 [417] phi from mode_sixsfred2::@9 to mode_sixsfred2::@2 [phi:mode_sixsfred2::@9->mode_sixsfred2::@2]
  b2_from_b9:
  //SEG774 [417] phi (byte*) mode_sixsfred2::col#3 = (byte*) mode_sixsfred2::col#1 [phi:mode_sixsfred2::@9->mode_sixsfred2::@2#0] -- register_copy 
  //SEG775 [417] phi (byte) mode_sixsfred2::cy#4 = (byte) mode_sixsfred2::cy#1 [phi:mode_sixsfred2::@9->mode_sixsfred2::@2#1] -- register_copy 
    jmp b2
  //SEG776 mode_sixsfred2::@2
  b2:
  //SEG777 [418] phi from mode_sixsfred2::@2 to mode_sixsfred2::@3 [phi:mode_sixsfred2::@2->mode_sixsfred2::@3]
  b3_from_b2:
  //SEG778 [418] phi (byte*) mode_sixsfred2::col#2 = (byte*) mode_sixsfred2::col#3 [phi:mode_sixsfred2::@2->mode_sixsfred2::@3#0] -- register_copy 
  //SEG779 [418] phi (byte) mode_sixsfred2::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@2->mode_sixsfred2::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta cx
    jmp b3
  //SEG780 [418] phi from mode_sixsfred2::@3 to mode_sixsfred2::@3 [phi:mode_sixsfred2::@3->mode_sixsfred2::@3]
  b3_from_b3:
  //SEG781 [418] phi (byte*) mode_sixsfred2::col#2 = (byte*) mode_sixsfred2::col#1 [phi:mode_sixsfred2::@3->mode_sixsfred2::@3#0] -- register_copy 
  //SEG782 [418] phi (byte) mode_sixsfred2::cx#2 = (byte) mode_sixsfred2::cx#1 [phi:mode_sixsfred2::@3->mode_sixsfred2::@3#1] -- register_copy 
    jmp b3
  //SEG783 mode_sixsfred2::@3
  b3:
  //SEG784 [419] (byte~) mode_sixsfred2::$14 ← (byte) mode_sixsfred2::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz2_band_vbuc1 
    lda #3
    and cx
    sta _14
  //SEG785 [420] (byte~) mode_sixsfred2::$15 ← (byte~) mode_sixsfred2::$14 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_rol_4 
    lda _14
    asl
    asl
    asl
    asl
    sta _15
  //SEG786 [421] (byte~) mode_sixsfred2::$16 ← (byte) mode_sixsfred2::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz2_band_vbuc1 
    lda #3
    and cy
    sta _16
  //SEG787 [422] (byte~) mode_sixsfred2::$17 ← (byte~) mode_sixsfred2::$15 | (byte~) mode_sixsfred2::$16 -- vbuz1=vbuz2_bor_vbuz3 
    lda _15
    ora _16
    sta _17
  //SEG788 [423] *((byte*) mode_sixsfred2::col#2) ← (byte~) mode_sixsfred2::$17 -- _deref_pbuz1=vbuz2 
    lda _17
    ldy #0
    sta (col),y
  //SEG789 [424] (byte*) mode_sixsfred2::col#1 ← ++ (byte*) mode_sixsfred2::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG790 [425] (byte) mode_sixsfred2::cx#1 ← ++ (byte) mode_sixsfred2::cx#2 -- vbuz1=_inc_vbuz1 
    inc cx
  //SEG791 [426] if((byte) mode_sixsfred2::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred2::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda cx
    cmp #$28
    bne b3_from_b3
    jmp b9
  //SEG792 mode_sixsfred2::@9
  b9:
  //SEG793 [427] (byte) mode_sixsfred2::cy#1 ← ++ (byte) mode_sixsfred2::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG794 [428] if((byte) mode_sixsfred2::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_sixsfred2::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b9
  //SEG795 [429] phi from mode_sixsfred2::@9 to mode_sixsfred2::@4 [phi:mode_sixsfred2::@9->mode_sixsfred2::@4]
  b4_from_b9:
  //SEG796 [429] phi (byte*) mode_sixsfred2::gfxa#3 = (const byte*) mode_sixsfred2::PLANEA#0 [phi:mode_sixsfred2::@9->mode_sixsfred2::@4#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta gfxa
    lda #>PLANEA
    sta gfxa+1
  //SEG797 [429] phi (byte) mode_sixsfred2::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@9->mode_sixsfred2::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
    jmp b4
  //SEG798 [429] phi from mode_sixsfred2::@11 to mode_sixsfred2::@4 [phi:mode_sixsfred2::@11->mode_sixsfred2::@4]
  b4_from_b11:
  //SEG799 [429] phi (byte*) mode_sixsfred2::gfxa#3 = (byte*) mode_sixsfred2::gfxa#1 [phi:mode_sixsfred2::@11->mode_sixsfred2::@4#0] -- register_copy 
  //SEG800 [429] phi (byte) mode_sixsfred2::ay#4 = (byte) mode_sixsfred2::ay#1 [phi:mode_sixsfred2::@11->mode_sixsfred2::@4#1] -- register_copy 
    jmp b4
  //SEG801 mode_sixsfred2::@4
  b4:
  //SEG802 [430] phi from mode_sixsfred2::@4 to mode_sixsfred2::@5 [phi:mode_sixsfred2::@4->mode_sixsfred2::@5]
  b5_from_b4:
  //SEG803 [430] phi (byte) mode_sixsfred2::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@4->mode_sixsfred2::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta ax
  //SEG804 [430] phi (byte*) mode_sixsfred2::gfxa#2 = (byte*) mode_sixsfred2::gfxa#3 [phi:mode_sixsfred2::@4->mode_sixsfred2::@5#1] -- register_copy 
    jmp b5
  //SEG805 [430] phi from mode_sixsfred2::@5 to mode_sixsfred2::@5 [phi:mode_sixsfred2::@5->mode_sixsfred2::@5]
  b5_from_b5:
  //SEG806 [430] phi (byte) mode_sixsfred2::ax#2 = (byte) mode_sixsfred2::ax#1 [phi:mode_sixsfred2::@5->mode_sixsfred2::@5#0] -- register_copy 
  //SEG807 [430] phi (byte*) mode_sixsfred2::gfxa#2 = (byte*) mode_sixsfred2::gfxa#1 [phi:mode_sixsfred2::@5->mode_sixsfred2::@5#1] -- register_copy 
    jmp b5
  //SEG808 mode_sixsfred2::@5
  b5:
  //SEG809 [431] (byte~) mode_sixsfred2::$20 ← (byte) mode_sixsfred2::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda ay
    lsr
    sta _20
  //SEG810 [432] (byte) mode_sixsfred2::row#0 ← (byte~) mode_sixsfred2::$20 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz2_band_vbuc1 
    lda #3
    and _20
    sta row
  //SEG811 [433] *((byte*) mode_sixsfred2::gfxa#2) ← *((const byte[]) mode_sixsfred2::row_bitmask#0 + (byte) mode_sixsfred2::row#0) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy row
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
  //SEG812 [434] (byte*) mode_sixsfred2::gfxa#1 ← ++ (byte*) mode_sixsfred2::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG813 [435] (byte) mode_sixsfred2::ax#1 ← ++ (byte) mode_sixsfred2::ax#2 -- vbuz1=_inc_vbuz1 
    inc ax
  //SEG814 [436] if((byte) mode_sixsfred2::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred2::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda ax
    cmp #$28
    bne b5_from_b5
    jmp b11
  //SEG815 mode_sixsfred2::@11
  b11:
  //SEG816 [437] (byte) mode_sixsfred2::ay#1 ← ++ (byte) mode_sixsfred2::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG817 [438] if((byte) mode_sixsfred2::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_sixsfred2::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda ay
    cmp #$c8
    bne b4_from_b11
  //SEG818 [439] phi from mode_sixsfred2::@11 to mode_sixsfred2::@6 [phi:mode_sixsfred2::@11->mode_sixsfred2::@6]
  b6_from_b11:
  //SEG819 [439] phi (byte) mode_sixsfred2::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@11->mode_sixsfred2::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG820 [439] phi (byte*) mode_sixsfred2::gfxb#3 = (const byte*) mode_sixsfred2::PLANEB#0 [phi:mode_sixsfred2::@11->mode_sixsfred2::@6#1] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta gfxb
    lda #>PLANEB
    sta gfxb+1
    jmp b6
  //SEG821 [439] phi from mode_sixsfred2::@13 to mode_sixsfred2::@6 [phi:mode_sixsfred2::@13->mode_sixsfred2::@6]
  b6_from_b13:
  //SEG822 [439] phi (byte) mode_sixsfred2::by#4 = (byte) mode_sixsfred2::by#1 [phi:mode_sixsfred2::@13->mode_sixsfred2::@6#0] -- register_copy 
  //SEG823 [439] phi (byte*) mode_sixsfred2::gfxb#3 = (byte*) mode_sixsfred2::gfxb#1 [phi:mode_sixsfred2::@13->mode_sixsfred2::@6#1] -- register_copy 
    jmp b6
  //SEG824 mode_sixsfred2::@6
  b6:
  //SEG825 [440] phi from mode_sixsfred2::@6 to mode_sixsfred2::@7 [phi:mode_sixsfred2::@6->mode_sixsfred2::@7]
  b7_from_b6:
  //SEG826 [440] phi (byte) mode_sixsfred2::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@6->mode_sixsfred2::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta bx
  //SEG827 [440] phi (byte*) mode_sixsfred2::gfxb#2 = (byte*) mode_sixsfred2::gfxb#3 [phi:mode_sixsfred2::@6->mode_sixsfred2::@7#1] -- register_copy 
    jmp b7
  //SEG828 [440] phi from mode_sixsfred2::@7 to mode_sixsfred2::@7 [phi:mode_sixsfred2::@7->mode_sixsfred2::@7]
  b7_from_b7:
  //SEG829 [440] phi (byte) mode_sixsfred2::bx#2 = (byte) mode_sixsfred2::bx#1 [phi:mode_sixsfred2::@7->mode_sixsfred2::@7#0] -- register_copy 
  //SEG830 [440] phi (byte*) mode_sixsfred2::gfxb#2 = (byte*) mode_sixsfred2::gfxb#1 [phi:mode_sixsfred2::@7->mode_sixsfred2::@7#1] -- register_copy 
    jmp b7
  //SEG831 mode_sixsfred2::@7
  b7:
  //SEG832 [441] *((byte*) mode_sixsfred2::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $1b -- _deref_pbuz1=vbuc1 
    lda #$1b
    ldy #0
    sta (gfxb),y
  //SEG833 [442] (byte*) mode_sixsfred2::gfxb#1 ← ++ (byte*) mode_sixsfred2::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG834 [443] (byte) mode_sixsfred2::bx#1 ← ++ (byte) mode_sixsfred2::bx#2 -- vbuz1=_inc_vbuz1 
    inc bx
  //SEG835 [444] if((byte) mode_sixsfred2::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred2::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda bx
    cmp #$28
    bne b7_from_b7
    jmp b13
  //SEG836 mode_sixsfred2::@13
  b13:
  //SEG837 [445] (byte) mode_sixsfred2::by#1 ← ++ (byte) mode_sixsfred2::by#4 -- vbuz1=_inc_vbuz1 
    inc by
  //SEG838 [446] if((byte) mode_sixsfred2::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_sixsfred2::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda by
    cmp #$c8
    bne b6_from_b13
  //SEG839 [447] phi from mode_sixsfred2::@13 to mode_sixsfred2::@14 [phi:mode_sixsfred2::@13->mode_sixsfred2::@14]
  b14_from_b13:
    jmp b14
  //SEG840 mode_sixsfred2::@14
  b14:
  //SEG841 [448] call mode_ctrl 
  //SEG842 [155] phi from mode_sixsfred2::@14 to mode_ctrl [phi:mode_sixsfred2::@14->mode_ctrl]
  mode_ctrl_from_b14:
  //SEG843 [155] phi (byte) dtv_control#145 = (const byte) DTV_LINEAR#0 [phi:mode_sixsfred2::@14->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_LINEAR
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG844 mode_sixsfred2::@return
  breturn:
  //SEG845 [449] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
//SEG846 mode_hicolmcchar
// High Color Multicolor Character Mode (LINEAR/CHUNK/COLDIS/BMM/ECM = 0, MCM/HICOL = 1)
// Resolution: 160x200 (320x200)
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
//GfxData Pixel Shifter (1) if ColorData[3:3] = 0:
// - 0: 8bpp BgColor0[7:0]
// - 1: 8bpp ColorData[7:4] "0" & Color[2:0]
//GfxData Pixel Shifter (2) if ColorData[3:3] = 1:
// - 00: 8bpp BgColor0[7:0]
// - 01: 8bpp BgColor1[7:0]
// - 10: 8bpp BgColor2[7:0]
// - 11: 8bpp ColorData[7:4] "0" & Color[2:0]
mode_hicolmcchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $8400
    .label _25 = $e7
    .label _26 = $e8
    .label _27 = $e9
    .label i = $46
    .label v = $ea
    .label col = $49
    .label ch = $4b
    .label cx = $48
    .label cy = $47
  //SEG847 [450] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolmcchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG848 [451] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG849 [452] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG850 [453] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR
    sta DTV_CONTROL
  //SEG851 [454] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG852 [455] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolmcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG853 [456] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG854 [457] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL|VIC_MCM
    sta VIC_CONTROL2
  //SEG855 [458] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolmcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolmcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG856 [459] phi from mode_hicolmcchar to mode_hicolmcchar::@1 [phi:mode_hicolmcchar->mode_hicolmcchar::@1]
  b1_from_mode_hicolmcchar:
  //SEG857 [459] phi (byte) mode_hicolmcchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolmcchar->mode_hicolmcchar::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // DTV Palette - Grey Tones
  //SEG858 [459] phi from mode_hicolmcchar::@1 to mode_hicolmcchar::@1 [phi:mode_hicolmcchar::@1->mode_hicolmcchar::@1]
  b1_from_b1:
  //SEG859 [459] phi (byte) mode_hicolmcchar::i#2 = (byte) mode_hicolmcchar::i#1 [phi:mode_hicolmcchar::@1->mode_hicolmcchar::@1#0] -- register_copy 
    jmp b1
  //SEG860 mode_hicolmcchar::@1
  b1:
  //SEG861 [460] *((const byte*) DTV_PALETTE#0 + (byte) mode_hicolmcchar::i#2) ← (byte) mode_hicolmcchar::i#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy i
    tya
    sta DTV_PALETTE,y
  //SEG862 [461] (byte) mode_hicolmcchar::i#1 ← ++ (byte) mode_hicolmcchar::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG863 [462] if((byte) mode_hicolmcchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_hicolmcchar::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b1
    jmp b4
  //SEG864 mode_hicolmcchar::@4
  b4:
  //SEG865 [463] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG866 [464] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $50 -- _deref_pbuc1=vbuc2 
    lda #$50
    sta BGCOL1
  //SEG867 [465] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) $54 -- _deref_pbuc1=vbuc2 
    lda #$54
    sta BGCOL2
  //SEG868 [466] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) $58 -- _deref_pbuc1=vbuc2 
    lda #$58
    sta BGCOL3
  //SEG869 [467] phi from mode_hicolmcchar::@4 to mode_hicolmcchar::@2 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@2]
  b2_from_b4:
  //SEG870 [467] phi (byte*) mode_hicolmcchar::ch#3 = (const byte*) mode_hicolmcchar::SCREEN#0 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG871 [467] phi (byte*) mode_hicolmcchar::col#3 = (const byte*) mode_hicolmcchar::COLORS#0 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG872 [467] phi (byte) mode_hicolmcchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG873 [467] phi from mode_hicolmcchar::@5 to mode_hicolmcchar::@2 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@2]
  b2_from_b5:
  //SEG874 [467] phi (byte*) mode_hicolmcchar::ch#3 = (byte*) mode_hicolmcchar::ch#1 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@2#0] -- register_copy 
  //SEG875 [467] phi (byte*) mode_hicolmcchar::col#3 = (byte*) mode_hicolmcchar::col#1 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@2#1] -- register_copy 
  //SEG876 [467] phi (byte) mode_hicolmcchar::cy#4 = (byte) mode_hicolmcchar::cy#1 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@2#2] -- register_copy 
    jmp b2
  //SEG877 mode_hicolmcchar::@2
  b2:
  //SEG878 [468] phi from mode_hicolmcchar::@2 to mode_hicolmcchar::@3 [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3]
  b3_from_b2:
  //SEG879 [468] phi (byte*) mode_hicolmcchar::ch#2 = (byte*) mode_hicolmcchar::ch#3 [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3#0] -- register_copy 
  //SEG880 [468] phi (byte*) mode_hicolmcchar::col#2 = (byte*) mode_hicolmcchar::col#3 [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3#1] -- register_copy 
  //SEG881 [468] phi (byte) mode_hicolmcchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta cx
    jmp b3
  //SEG882 [468] phi from mode_hicolmcchar::@3 to mode_hicolmcchar::@3 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@3]
  b3_from_b3:
  //SEG883 [468] phi (byte*) mode_hicolmcchar::ch#2 = (byte*) mode_hicolmcchar::ch#1 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@3#0] -- register_copy 
  //SEG884 [468] phi (byte*) mode_hicolmcchar::col#2 = (byte*) mode_hicolmcchar::col#1 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@3#1] -- register_copy 
  //SEG885 [468] phi (byte) mode_hicolmcchar::cx#2 = (byte) mode_hicolmcchar::cx#1 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@3#2] -- register_copy 
    jmp b3
  //SEG886 mode_hicolmcchar::@3
  b3:
  //SEG887 [469] (byte~) mode_hicolmcchar::$25 ← (byte) mode_hicolmcchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cy
    sta _25
  //SEG888 [470] (byte~) mode_hicolmcchar::$26 ← (byte~) mode_hicolmcchar::$25 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_rol_4 
    lda _25
    asl
    asl
    asl
    asl
    sta _26
  //SEG889 [471] (byte~) mode_hicolmcchar::$27 ← (byte) mode_hicolmcchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cx
    sta _27
  //SEG890 [472] (byte) mode_hicolmcchar::v#0 ← (byte~) mode_hicolmcchar::$26 | (byte~) mode_hicolmcchar::$27 -- vbuz1=vbuz2_bor_vbuz3 
    lda _26
    ora _27
    sta v
  //SEG891 [473] *((byte*) mode_hicolmcchar::col#2) ← (byte) mode_hicolmcchar::v#0 -- _deref_pbuz1=vbuz2 
    lda v
    ldy #0
    sta (col),y
  //SEG892 [474] (byte*) mode_hicolmcchar::col#1 ← ++ (byte*) mode_hicolmcchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG893 [475] *((byte*) mode_hicolmcchar::ch#2) ← (byte) mode_hicolmcchar::v#0 -- _deref_pbuz1=vbuz2 
    lda v
    ldy #0
    sta (ch),y
  //SEG894 [476] (byte*) mode_hicolmcchar::ch#1 ← ++ (byte*) mode_hicolmcchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG895 [477] (byte) mode_hicolmcchar::cx#1 ← ++ (byte) mode_hicolmcchar::cx#2 -- vbuz1=_inc_vbuz1 
    inc cx
  //SEG896 [478] if((byte) mode_hicolmcchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_hicolmcchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda cx
    cmp #$28
    bne b3_from_b3
    jmp b5
  //SEG897 mode_hicolmcchar::@5
  b5:
  //SEG898 [479] (byte) mode_hicolmcchar::cy#1 ← ++ (byte) mode_hicolmcchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG899 [480] if((byte) mode_hicolmcchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_hicolmcchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b5
  //SEG900 [481] phi from mode_hicolmcchar::@5 to mode_hicolmcchar::@6 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@6]
  b6_from_b5:
    jmp b6
  //SEG901 mode_hicolmcchar::@6
  b6:
  //SEG902 [482] call mode_ctrl 
  //SEG903 [155] phi from mode_hicolmcchar::@6 to mode_ctrl [phi:mode_hicolmcchar::@6->mode_ctrl]
  mode_ctrl_from_b6:
  //SEG904 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0 [phi:mode_hicolmcchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG905 mode_hicolmcchar::@return
  breturn:
  //SEG906 [483] return 
    rts
}
//SEG907 mode_hicolecmchar
// High Color Extended Background Color Character Mode (LINEAR/CHUNK/COLDIS/MCM/BMM = 0, ECM/HICOL = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & "00" & CharData[5:0] & RowCounter[2:0] )
// GfxData Pixel Shifter (1)
//  - 0: 8bpp Background Color
//    - CharData[7:6] 00: 8bpp BgColor0[7:0]
//    - CharData[7:6] 01: 8bpp BgColor1[7:0]
//    - CharData[7:6] 10: 8bpp BgColor2[7:0]
//    - CharData[7:6] 11: 8bpp BgColor3[7:0]
//  - 1: 8bpp ColorData[7:0]
mode_hicolecmchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $8400
    .label _25 = $eb
    .label _26 = $ec
    .label _27 = $ed
    .label i = $4d
    .label v = $ee
    .label col = $50
    .label ch = $52
    .label cx = $4f
    .label cy = $4e
  //SEG908 [484] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolecmchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG909 [485] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG910 [486] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG911 [487] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR
    sta DTV_CONTROL
  //SEG912 [488] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG913 [489] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG914 [490] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(const byte) VIC_ECM#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|VIC_ECM|3
    sta VIC_CONTROL
  //SEG915 [491] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG916 [492] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG917 [493] phi from mode_hicolecmchar to mode_hicolecmchar::@1 [phi:mode_hicolecmchar->mode_hicolecmchar::@1]
  b1_from_mode_hicolecmchar:
  //SEG918 [493] phi (byte) mode_hicolecmchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolecmchar->mode_hicolecmchar::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // DTV Palette - Grey Tones
  //SEG919 [493] phi from mode_hicolecmchar::@1 to mode_hicolecmchar::@1 [phi:mode_hicolecmchar::@1->mode_hicolecmchar::@1]
  b1_from_b1:
  //SEG920 [493] phi (byte) mode_hicolecmchar::i#2 = (byte) mode_hicolecmchar::i#1 [phi:mode_hicolecmchar::@1->mode_hicolecmchar::@1#0] -- register_copy 
    jmp b1
  //SEG921 mode_hicolecmchar::@1
  b1:
  //SEG922 [494] *((const byte*) DTV_PALETTE#0 + (byte) mode_hicolecmchar::i#2) ← (byte) mode_hicolecmchar::i#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy i
    tya
    sta DTV_PALETTE,y
  //SEG923 [495] (byte) mode_hicolecmchar::i#1 ← ++ (byte) mode_hicolecmchar::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG924 [496] if((byte) mode_hicolecmchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_hicolecmchar::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b1
    jmp b4
  //SEG925 mode_hicolecmchar::@4
  b4:
  //SEG926 [497] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG927 [498] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $50 -- _deref_pbuc1=vbuc2 
    lda #$50
    sta BGCOL1
  //SEG928 [499] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) $54 -- _deref_pbuc1=vbuc2 
    lda #$54
    sta BGCOL2
  //SEG929 [500] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) $58 -- _deref_pbuc1=vbuc2 
    lda #$58
    sta BGCOL3
  //SEG930 [501] *((const byte*) BGCOL4#0) ← (byte/signed byte/word/signed word/dword/signed dword) $5c -- _deref_pbuc1=vbuc2 
    lda #$5c
    sta BGCOL4
  //SEG931 [502] phi from mode_hicolecmchar::@4 to mode_hicolecmchar::@2 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@2]
  b2_from_b4:
  //SEG932 [502] phi (byte*) mode_hicolecmchar::ch#3 = (const byte*) mode_hicolecmchar::SCREEN#0 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG933 [502] phi (byte*) mode_hicolecmchar::col#3 = (const byte*) mode_hicolecmchar::COLORS#0 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG934 [502] phi (byte) mode_hicolecmchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG935 [502] phi from mode_hicolecmchar::@5 to mode_hicolecmchar::@2 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@2]
  b2_from_b5:
  //SEG936 [502] phi (byte*) mode_hicolecmchar::ch#3 = (byte*) mode_hicolecmchar::ch#1 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@2#0] -- register_copy 
  //SEG937 [502] phi (byte*) mode_hicolecmchar::col#3 = (byte*) mode_hicolecmchar::col#1 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@2#1] -- register_copy 
  //SEG938 [502] phi (byte) mode_hicolecmchar::cy#4 = (byte) mode_hicolecmchar::cy#1 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@2#2] -- register_copy 
    jmp b2
  //SEG939 mode_hicolecmchar::@2
  b2:
  //SEG940 [503] phi from mode_hicolecmchar::@2 to mode_hicolecmchar::@3 [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3]
  b3_from_b2:
  //SEG941 [503] phi (byte*) mode_hicolecmchar::ch#2 = (byte*) mode_hicolecmchar::ch#3 [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3#0] -- register_copy 
  //SEG942 [503] phi (byte*) mode_hicolecmchar::col#2 = (byte*) mode_hicolecmchar::col#3 [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3#1] -- register_copy 
  //SEG943 [503] phi (byte) mode_hicolecmchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta cx
    jmp b3
  //SEG944 [503] phi from mode_hicolecmchar::@3 to mode_hicolecmchar::@3 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@3]
  b3_from_b3:
  //SEG945 [503] phi (byte*) mode_hicolecmchar::ch#2 = (byte*) mode_hicolecmchar::ch#1 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@3#0] -- register_copy 
  //SEG946 [503] phi (byte*) mode_hicolecmchar::col#2 = (byte*) mode_hicolecmchar::col#1 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@3#1] -- register_copy 
  //SEG947 [503] phi (byte) mode_hicolecmchar::cx#2 = (byte) mode_hicolecmchar::cx#1 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@3#2] -- register_copy 
    jmp b3
  //SEG948 mode_hicolecmchar::@3
  b3:
  //SEG949 [504] (byte~) mode_hicolecmchar::$25 ← (byte) mode_hicolecmchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cy
    sta _25
  //SEG950 [505] (byte~) mode_hicolecmchar::$26 ← (byte~) mode_hicolecmchar::$25 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_rol_4 
    lda _25
    asl
    asl
    asl
    asl
    sta _26
  //SEG951 [506] (byte~) mode_hicolecmchar::$27 ← (byte) mode_hicolecmchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cx
    sta _27
  //SEG952 [507] (byte) mode_hicolecmchar::v#0 ← (byte~) mode_hicolecmchar::$26 | (byte~) mode_hicolecmchar::$27 -- vbuz1=vbuz2_bor_vbuz3 
    lda _26
    ora _27
    sta v
  //SEG953 [508] *((byte*) mode_hicolecmchar::col#2) ← (byte) mode_hicolecmchar::v#0 -- _deref_pbuz1=vbuz2 
    lda v
    ldy #0
    sta (col),y
  //SEG954 [509] (byte*) mode_hicolecmchar::col#1 ← ++ (byte*) mode_hicolecmchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG955 [510] *((byte*) mode_hicolecmchar::ch#2) ← (byte) mode_hicolecmchar::v#0 -- _deref_pbuz1=vbuz2 
    lda v
    ldy #0
    sta (ch),y
  //SEG956 [511] (byte*) mode_hicolecmchar::ch#1 ← ++ (byte*) mode_hicolecmchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG957 [512] (byte) mode_hicolecmchar::cx#1 ← ++ (byte) mode_hicolecmchar::cx#2 -- vbuz1=_inc_vbuz1 
    inc cx
  //SEG958 [513] if((byte) mode_hicolecmchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_hicolecmchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda cx
    cmp #$28
    bne b3_from_b3
    jmp b5
  //SEG959 mode_hicolecmchar::@5
  b5:
  //SEG960 [514] (byte) mode_hicolecmchar::cy#1 ← ++ (byte) mode_hicolecmchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG961 [515] if((byte) mode_hicolecmchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_hicolecmchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b5
  //SEG962 [516] phi from mode_hicolecmchar::@5 to mode_hicolecmchar::@6 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@6]
  b6_from_b5:
    jmp b6
  //SEG963 mode_hicolecmchar::@6
  b6:
  //SEG964 [517] call mode_ctrl 
  //SEG965 [155] phi from mode_hicolecmchar::@6 to mode_ctrl [phi:mode_hicolecmchar::@6->mode_ctrl]
  mode_ctrl_from_b6:
  //SEG966 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0 [phi:mode_hicolecmchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG967 mode_hicolecmchar::@return
  breturn:
  //SEG968 [518] return 
    rts
}
//SEG969 mode_hicolstdchar
// High Color Standard Character Mode (LINEAR/CHUNK/COLDIS/ECM/MCM/BMM = 0, HICOL = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
// Pixel Shifter (1)
//  - 0: 8bpp BgColor0[7:0]
//  - 1: 8bpp ColorData[7:0]
mode_hicolstdchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $8400
    .label _24 = $ef
    .label _25 = $f0
    .label _26 = $f1
    .label i = $54
    .label v = $f2
    .label col = $57
    .label ch = $59
    .label cx = $56
    .label cy = $55
  //SEG970 [519] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolstdchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG971 [520] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG972 [521] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG973 [522] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR
    sta DTV_CONTROL
  //SEG974 [523] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG975 [524] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolstdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG976 [525] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG977 [526] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG978 [527] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolstdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolstdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG979 [528] phi from mode_hicolstdchar to mode_hicolstdchar::@1 [phi:mode_hicolstdchar->mode_hicolstdchar::@1]
  b1_from_mode_hicolstdchar:
  //SEG980 [528] phi (byte) mode_hicolstdchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolstdchar->mode_hicolstdchar::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // DTV Palette - Grey Tones
  //SEG981 [528] phi from mode_hicolstdchar::@1 to mode_hicolstdchar::@1 [phi:mode_hicolstdchar::@1->mode_hicolstdchar::@1]
  b1_from_b1:
  //SEG982 [528] phi (byte) mode_hicolstdchar::i#2 = (byte) mode_hicolstdchar::i#1 [phi:mode_hicolstdchar::@1->mode_hicolstdchar::@1#0] -- register_copy 
    jmp b1
  //SEG983 mode_hicolstdchar::@1
  b1:
  //SEG984 [529] *((const byte*) DTV_PALETTE#0 + (byte) mode_hicolstdchar::i#2) ← (byte) mode_hicolstdchar::i#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy i
    tya
    sta DTV_PALETTE,y
  //SEG985 [530] (byte) mode_hicolstdchar::i#1 ← ++ (byte) mode_hicolstdchar::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG986 [531] if((byte) mode_hicolstdchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_hicolstdchar::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b1
    jmp b4
  //SEG987 mode_hicolstdchar::@4
  b4:
  //SEG988 [532] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BGCOL
  //SEG989 [533] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
  //SEG990 [534] phi from mode_hicolstdchar::@4 to mode_hicolstdchar::@2 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@2]
  b2_from_b4:
  //SEG991 [534] phi (byte*) mode_hicolstdchar::ch#3 = (const byte*) mode_hicolstdchar::SCREEN#0 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG992 [534] phi (byte*) mode_hicolstdchar::col#3 = (const byte*) mode_hicolstdchar::COLORS#0 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG993 [534] phi (byte) mode_hicolstdchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG994 [534] phi from mode_hicolstdchar::@5 to mode_hicolstdchar::@2 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@2]
  b2_from_b5:
  //SEG995 [534] phi (byte*) mode_hicolstdchar::ch#3 = (byte*) mode_hicolstdchar::ch#1 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@2#0] -- register_copy 
  //SEG996 [534] phi (byte*) mode_hicolstdchar::col#3 = (byte*) mode_hicolstdchar::col#1 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@2#1] -- register_copy 
  //SEG997 [534] phi (byte) mode_hicolstdchar::cy#4 = (byte) mode_hicolstdchar::cy#1 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@2#2] -- register_copy 
    jmp b2
  //SEG998 mode_hicolstdchar::@2
  b2:
  //SEG999 [535] phi from mode_hicolstdchar::@2 to mode_hicolstdchar::@3 [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3]
  b3_from_b2:
  //SEG1000 [535] phi (byte*) mode_hicolstdchar::ch#2 = (byte*) mode_hicolstdchar::ch#3 [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3#0] -- register_copy 
  //SEG1001 [535] phi (byte*) mode_hicolstdchar::col#2 = (byte*) mode_hicolstdchar::col#3 [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3#1] -- register_copy 
  //SEG1002 [535] phi (byte) mode_hicolstdchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta cx
    jmp b3
  //SEG1003 [535] phi from mode_hicolstdchar::@3 to mode_hicolstdchar::@3 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@3]
  b3_from_b3:
  //SEG1004 [535] phi (byte*) mode_hicolstdchar::ch#2 = (byte*) mode_hicolstdchar::ch#1 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@3#0] -- register_copy 
  //SEG1005 [535] phi (byte*) mode_hicolstdchar::col#2 = (byte*) mode_hicolstdchar::col#1 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@3#1] -- register_copy 
  //SEG1006 [535] phi (byte) mode_hicolstdchar::cx#2 = (byte) mode_hicolstdchar::cx#1 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@3#2] -- register_copy 
    jmp b3
  //SEG1007 mode_hicolstdchar::@3
  b3:
  //SEG1008 [536] (byte~) mode_hicolstdchar::$24 ← (byte) mode_hicolstdchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cy
    sta _24
  //SEG1009 [537] (byte~) mode_hicolstdchar::$25 ← (byte~) mode_hicolstdchar::$24 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_rol_4 
    lda _24
    asl
    asl
    asl
    asl
    sta _25
  //SEG1010 [538] (byte~) mode_hicolstdchar::$26 ← (byte) mode_hicolstdchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cx
    sta _26
  //SEG1011 [539] (byte) mode_hicolstdchar::v#0 ← (byte~) mode_hicolstdchar::$25 | (byte~) mode_hicolstdchar::$26 -- vbuz1=vbuz2_bor_vbuz3 
    lda _25
    ora _26
    sta v
  //SEG1012 [540] *((byte*) mode_hicolstdchar::col#2) ← (byte) mode_hicolstdchar::v#0 -- _deref_pbuz1=vbuz2 
    lda v
    ldy #0
    sta (col),y
  //SEG1013 [541] (byte*) mode_hicolstdchar::col#1 ← ++ (byte*) mode_hicolstdchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG1014 [542] *((byte*) mode_hicolstdchar::ch#2) ← (byte) mode_hicolstdchar::v#0 -- _deref_pbuz1=vbuz2 
    lda v
    ldy #0
    sta (ch),y
  //SEG1015 [543] (byte*) mode_hicolstdchar::ch#1 ← ++ (byte*) mode_hicolstdchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1016 [544] (byte) mode_hicolstdchar::cx#1 ← ++ (byte) mode_hicolstdchar::cx#2 -- vbuz1=_inc_vbuz1 
    inc cx
  //SEG1017 [545] if((byte) mode_hicolstdchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_hicolstdchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda cx
    cmp #$28
    bne b3_from_b3
    jmp b5
  //SEG1018 mode_hicolstdchar::@5
  b5:
  //SEG1019 [546] (byte) mode_hicolstdchar::cy#1 ← ++ (byte) mode_hicolstdchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1020 [547] if((byte) mode_hicolstdchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_hicolstdchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b5
  //SEG1021 [548] phi from mode_hicolstdchar::@5 to mode_hicolstdchar::@6 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@6]
  b6_from_b5:
    jmp b6
  //SEG1022 mode_hicolstdchar::@6
  b6:
  //SEG1023 [549] call mode_ctrl 
  //SEG1024 [155] phi from mode_hicolstdchar::@6 to mode_ctrl [phi:mode_hicolstdchar::@6->mode_ctrl]
  mode_ctrl_from_b6:
  //SEG1025 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0 [phi:mode_hicolstdchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG1026 mode_hicolstdchar::@return
  breturn:
  //SEG1027 [550] return 
    rts
}
//SEG1028 mode_stdbitmap
// Standard Bitmap Mode (LINEAR/HICOL/CHUNK/COLDIS/MCM/ECM = 0, BMM = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:2] & Matrix[9:0] & RowCounter[2:0] )
// Pixel Shifter (1)
//  - 0: 4bpp CharData[3:0]
//  - 1: 4bpp CharData[7:4]
mode_stdbitmap: {
    .label SCREEN = $4000
    .label BITMAP = $6000
    .const lines_cnt = 9
    .label _19 = $f3
    .label _22 = $f6
    .label _23 = $f7
    .label i = $5b
    .label col = $f4
    .label col2 = $f5
    .label ch = $5e
    .label cx = $5d
    .label cy = $5c
    .label l = $60
  //SEG1029 [551] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_stdbitmap::BITMAP#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&BITMAP)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG1030 [552] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_CONTROL
  //SEG1031 [553] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG1032 [554] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_stdbitmap::BITMAP#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^BITMAP/$4000
    sta CIA2_PORT_A
  //SEG1033 [555] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG1034 [556] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG1035 [557] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_stdbitmap::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_stdbitmap::BITMAP#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(BITMAP&$3fff)/$400
    sta VIC_MEMORY
  //SEG1036 [558] phi from mode_stdbitmap to mode_stdbitmap::@1 [phi:mode_stdbitmap->mode_stdbitmap::@1]
  b1_from_mode_stdbitmap:
  //SEG1037 [558] phi (byte) mode_stdbitmap::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdbitmap->mode_stdbitmap::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // DTV Palette - default
  //SEG1038 [558] phi from mode_stdbitmap::@1 to mode_stdbitmap::@1 [phi:mode_stdbitmap::@1->mode_stdbitmap::@1]
  b1_from_b1:
  //SEG1039 [558] phi (byte) mode_stdbitmap::i#2 = (byte) mode_stdbitmap::i#1 [phi:mode_stdbitmap::@1->mode_stdbitmap::@1#0] -- register_copy 
    jmp b1
  //SEG1040 mode_stdbitmap::@1
  b1:
  //SEG1041 [559] *((const byte*) DTV_PALETTE#0 + (byte) mode_stdbitmap::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_stdbitmap::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy i
    lda DTV_PALETTE_DEFAULT,y
    sta DTV_PALETTE,y
  //SEG1042 [560] (byte) mode_stdbitmap::i#1 ← ++ (byte) mode_stdbitmap::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG1043 [561] if((byte) mode_stdbitmap::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_stdbitmap::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b1
    jmp b5
  //SEG1044 mode_stdbitmap::@5
  b5:
  //SEG1045 [562] *((const byte*) BGCOL#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #BLACK
    sta BGCOL
  //SEG1046 [563] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
  //SEG1047 [564] phi from mode_stdbitmap::@5 to mode_stdbitmap::@2 [phi:mode_stdbitmap::@5->mode_stdbitmap::@2]
  b2_from_b5:
  //SEG1048 [564] phi (byte*) mode_stdbitmap::ch#3 = (const byte*) mode_stdbitmap::SCREEN#0 [phi:mode_stdbitmap::@5->mode_stdbitmap::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG1049 [564] phi (byte) mode_stdbitmap::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdbitmap::@5->mode_stdbitmap::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG1050 [564] phi from mode_stdbitmap::@6 to mode_stdbitmap::@2 [phi:mode_stdbitmap::@6->mode_stdbitmap::@2]
  b2_from_b6:
  //SEG1051 [564] phi (byte*) mode_stdbitmap::ch#3 = (byte*) mode_stdbitmap::ch#1 [phi:mode_stdbitmap::@6->mode_stdbitmap::@2#0] -- register_copy 
  //SEG1052 [564] phi (byte) mode_stdbitmap::cy#4 = (byte) mode_stdbitmap::cy#1 [phi:mode_stdbitmap::@6->mode_stdbitmap::@2#1] -- register_copy 
    jmp b2
  //SEG1053 mode_stdbitmap::@2
  b2:
  //SEG1054 [565] phi from mode_stdbitmap::@2 to mode_stdbitmap::@3 [phi:mode_stdbitmap::@2->mode_stdbitmap::@3]
  b3_from_b2:
  //SEG1055 [565] phi (byte*) mode_stdbitmap::ch#2 = (byte*) mode_stdbitmap::ch#3 [phi:mode_stdbitmap::@2->mode_stdbitmap::@3#0] -- register_copy 
  //SEG1056 [565] phi (byte) mode_stdbitmap::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdbitmap::@2->mode_stdbitmap::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta cx
    jmp b3
  //SEG1057 [565] phi from mode_stdbitmap::@3 to mode_stdbitmap::@3 [phi:mode_stdbitmap::@3->mode_stdbitmap::@3]
  b3_from_b3:
  //SEG1058 [565] phi (byte*) mode_stdbitmap::ch#2 = (byte*) mode_stdbitmap::ch#1 [phi:mode_stdbitmap::@3->mode_stdbitmap::@3#0] -- register_copy 
  //SEG1059 [565] phi (byte) mode_stdbitmap::cx#2 = (byte) mode_stdbitmap::cx#1 [phi:mode_stdbitmap::@3->mode_stdbitmap::@3#1] -- register_copy 
    jmp b3
  //SEG1060 mode_stdbitmap::@3
  b3:
  //SEG1061 [566] (byte~) mode_stdbitmap::$19 ← (byte) mode_stdbitmap::cx#2 + (byte) mode_stdbitmap::cy#4 -- vbuz1=vbuz2_plus_vbuz3 
    lda cx
    clc
    adc cy
    sta _19
  //SEG1062 [567] (byte) mode_stdbitmap::col#0 ← (byte~) mode_stdbitmap::$19 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and _19
    sta col
  //SEG1063 [568] (byte) mode_stdbitmap::col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f - (byte) mode_stdbitmap::col#0 -- vbuz1=vbuc1_minus_vbuz2 
    lda #$f
    sec
    sbc col
    sta col2
  //SEG1064 [569] (byte~) mode_stdbitmap::$22 ← (byte) mode_stdbitmap::col#0 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_rol_4 
    lda col
    asl
    asl
    asl
    asl
    sta _22
  //SEG1065 [570] (byte~) mode_stdbitmap::$23 ← (byte~) mode_stdbitmap::$22 | (byte) mode_stdbitmap::col2#0 -- vbuz1=vbuz2_bor_vbuz3 
    lda _22
    ora col2
    sta _23
  //SEG1066 [571] *((byte*) mode_stdbitmap::ch#2) ← (byte~) mode_stdbitmap::$23 -- _deref_pbuz1=vbuz2 
    lda _23
    ldy #0
    sta (ch),y
  //SEG1067 [572] (byte*) mode_stdbitmap::ch#1 ← ++ (byte*) mode_stdbitmap::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1068 [573] (byte) mode_stdbitmap::cx#1 ← ++ (byte) mode_stdbitmap::cx#2 -- vbuz1=_inc_vbuz1 
    inc cx
  //SEG1069 [574] if((byte) mode_stdbitmap::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_stdbitmap::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda cx
    cmp #$28
    bne b3_from_b3
    jmp b6
  //SEG1070 mode_stdbitmap::@6
  b6:
  //SEG1071 [575] (byte) mode_stdbitmap::cy#1 ← ++ (byte) mode_stdbitmap::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1072 [576] if((byte) mode_stdbitmap::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_stdbitmap::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b6
  //SEG1073 [577] phi from mode_stdbitmap::@6 to mode_stdbitmap::@7 [phi:mode_stdbitmap::@6->mode_stdbitmap::@7]
  b7_from_b6:
    jmp b7
  //SEG1074 mode_stdbitmap::@7
  b7:
  //SEG1075 [578] call bitmap_init 
  //SEG1076 [732] phi from mode_stdbitmap::@7 to bitmap_init [phi:mode_stdbitmap::@7->bitmap_init]
  bitmap_init_from_b7:
    jsr bitmap_init
  //SEG1077 [579] phi from mode_stdbitmap::@7 to mode_stdbitmap::@9 [phi:mode_stdbitmap::@7->mode_stdbitmap::@9]
  b9_from_b7:
    jmp b9
  //SEG1078 mode_stdbitmap::@9
  b9:
  //SEG1079 [580] call bitmap_clear 
    jsr bitmap_clear
  //SEG1080 [581] phi from mode_stdbitmap::@9 to mode_stdbitmap::@4 [phi:mode_stdbitmap::@9->mode_stdbitmap::@4]
  b4_from_b9:
  //SEG1081 [581] phi (byte) mode_stdbitmap::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdbitmap::@9->mode_stdbitmap::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta l
    jmp b4
  //SEG1082 [581] phi from mode_stdbitmap::@11 to mode_stdbitmap::@4 [phi:mode_stdbitmap::@11->mode_stdbitmap::@4]
  b4_from_b11:
  //SEG1083 [581] phi (byte) mode_stdbitmap::l#2 = (byte) mode_stdbitmap::l#1 [phi:mode_stdbitmap::@11->mode_stdbitmap::@4#0] -- register_copy 
    jmp b4
  //SEG1084 mode_stdbitmap::@4
  b4:
  //SEG1085 [582] (byte) bitmap_line::x0#0 ← *((const byte[]) mode_stdbitmap::lines_x#0 + (byte) mode_stdbitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy l
    lda lines_x,y
    sta bitmap_line.x0
  //SEG1086 [583] (byte) bitmap_line::x1#0 ← *((const byte[]) mode_stdbitmap::lines_x#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mode_stdbitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy l
    lda lines_x+1,y
    sta bitmap_line.x1
  //SEG1087 [584] (byte) bitmap_line::y0#0 ← *((const byte[]) mode_stdbitmap::lines_y#0 + (byte) mode_stdbitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy l
    lda lines_y,y
    sta bitmap_line.y0
  //SEG1088 [585] (byte) bitmap_line::y1#0 ← *((const byte[]) mode_stdbitmap::lines_y#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mode_stdbitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy l
    lda lines_y+1,y
    sta bitmap_line.y1
  //SEG1089 [586] call bitmap_line 
    jsr bitmap_line
    jmp b11
  //SEG1090 mode_stdbitmap::@11
  b11:
  //SEG1091 [587] (byte) mode_stdbitmap::l#1 ← ++ (byte) mode_stdbitmap::l#2 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG1092 [588] if((byte) mode_stdbitmap::l#1<(const byte) mode_stdbitmap::lines_cnt#0) goto mode_stdbitmap::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda l
    cmp #lines_cnt
    bcc b4_from_b11
  //SEG1093 [589] phi from mode_stdbitmap::@11 to mode_stdbitmap::@8 [phi:mode_stdbitmap::@11->mode_stdbitmap::@8]
  b8_from_b11:
    jmp b8
  //SEG1094 mode_stdbitmap::@8
  b8:
  //SEG1095 [590] call mode_ctrl 
  //SEG1096 [155] phi from mode_stdbitmap::@8 to mode_ctrl [phi:mode_stdbitmap::@8->mode_ctrl]
  mode_ctrl_from_b8:
  //SEG1097 [155] phi (byte) dtv_control#145 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdbitmap::@8->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #0
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG1098 mode_stdbitmap::@return
  breturn:
  //SEG1099 [591] return 
    rts
    lines_x: .byte 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80
    lines_y: .byte 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0
}
//SEG1100 bitmap_line
// Draw a line on the bitmap
// bitmap_line(byte zeropage($f8) x0, byte zeropage($f9) x1, byte zeropage($fa) y0, byte zeropage($fb) y1)
bitmap_line: {
    .label xd = $ff
    .label xd_2 = $fc
    .label yd = $fe
    .label yd_2 = $fd
    .label x0 = $f8
    .label x1 = $f9
    .label y0 = $fa
    .label y1 = $fb
    .label yd_10 = $100
    .label yd_11 = $101
  //SEG1101 [592] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda x0
    cmp x1
    bcc b1
    jmp b15
  //SEG1102 bitmap_line::@15
  b15:
  //SEG1103 [593] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda x0
    sec
    sbc x1
    sta xd_2
  //SEG1104 [594] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda y0
    cmp y1
    bcc b2
    jmp b16
  //SEG1105 bitmap_line::@16
  b16:
  //SEG1106 [595] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda y0
    sec
    sbc y1
    sta yd_2
  //SEG1107 [596] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@3 -- vbuz1_lt_vbuz2_then_la1 
    lda yd_2
    cmp xd_2
    bcc b3
    jmp b17
  //SEG1108 bitmap_line::@17
  b17:
  //SEG1109 [597] (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_ydxi.y
  //SEG1110 [598] (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_ydxi.x
  //SEG1111 [599] (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxi.y1
  //SEG1112 [600] (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuz2 
    lda yd_2
    sta bitmap_line_ydxi.yd
  //SEG1113 [601] (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#2 -- vbuz1=vbuz2 
    lda xd_2
    sta bitmap_line_ydxi.xd
  //SEG1114 [602] call bitmap_line_ydxi 
  //SEG1115 [676] phi from bitmap_line::@17 to bitmap_line_ydxi [phi:bitmap_line::@17->bitmap_line_ydxi]
  bitmap_line_ydxi_from_b17:
  //SEG1116 [676] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#0 [phi:bitmap_line::@17->bitmap_line_ydxi#0] -- register_copy 
  //SEG1117 [676] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#0 [phi:bitmap_line::@17->bitmap_line_ydxi#1] -- register_copy 
  //SEG1118 [676] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#0 [phi:bitmap_line::@17->bitmap_line_ydxi#2] -- register_copy 
  //SEG1119 [676] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#0 [phi:bitmap_line::@17->bitmap_line_ydxi#3] -- register_copy 
  //SEG1120 [676] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#0 [phi:bitmap_line::@17->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp breturn
  //SEG1121 bitmap_line::@return
  breturn:
  //SEG1122 [603] return 
    rts
  //SEG1123 bitmap_line::@3
  b3:
  //SEG1124 [604] (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_xdyi.x
  //SEG1125 [605] (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_xdyi.y
  //SEG1126 [606] (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyi.x1
  //SEG1127 [607] (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#2 -- vbuz1=vbuz2 
    lda xd_2
    sta bitmap_line_xdyi.xd
  //SEG1128 [608] (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuz2 
    lda yd_2
    sta bitmap_line_xdyi.yd
  //SEG1129 [609] call bitmap_line_xdyi 
  //SEG1130 [654] phi from bitmap_line::@3 to bitmap_line_xdyi [phi:bitmap_line::@3->bitmap_line_xdyi]
  bitmap_line_xdyi_from_b3:
  //SEG1131 [654] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#0 [phi:bitmap_line::@3->bitmap_line_xdyi#0] -- register_copy 
  //SEG1132 [654] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#0 [phi:bitmap_line::@3->bitmap_line_xdyi#1] -- register_copy 
  //SEG1133 [654] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#0 [phi:bitmap_line::@3->bitmap_line_xdyi#2] -- register_copy 
  //SEG1134 [654] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#0 [phi:bitmap_line::@3->bitmap_line_xdyi#3] -- register_copy 
  //SEG1135 [654] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#0 [phi:bitmap_line::@3->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp breturn
  //SEG1136 bitmap_line::@2
  b2:
  //SEG1137 [610] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda y1
    sec
    sbc y0
    sta yd
  //SEG1138 [611] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@6 -- vbuz1_lt_vbuz2_then_la1 
    lda yd
    cmp xd_2
    bcc b6
    jmp b20
  //SEG1139 bitmap_line::@20
  b20:
  //SEG1140 [612] (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxd.y
  //SEG1141 [613] (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_ydxd.x
  //SEG1142 [614] (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_ydxd.y1
  //SEG1143 [615] (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuz2 
    lda yd
    sta bitmap_line_ydxd.yd
  //SEG1144 [616] (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#2 -- vbuz1=vbuz2 
    lda xd_2
    sta bitmap_line_ydxd.xd
  //SEG1145 [617] call bitmap_line_ydxd 
  //SEG1146 [706] phi from bitmap_line::@20 to bitmap_line_ydxd [phi:bitmap_line::@20->bitmap_line_ydxd]
  bitmap_line_ydxd_from_b20:
  //SEG1147 [706] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#0 [phi:bitmap_line::@20->bitmap_line_ydxd#0] -- register_copy 
  //SEG1148 [706] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#0 [phi:bitmap_line::@20->bitmap_line_ydxd#1] -- register_copy 
  //SEG1149 [706] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#0 [phi:bitmap_line::@20->bitmap_line_ydxd#2] -- register_copy 
  //SEG1150 [706] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#0 [phi:bitmap_line::@20->bitmap_line_ydxd#3] -- register_copy 
  //SEG1151 [706] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#0 [phi:bitmap_line::@20->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp breturn
  //SEG1152 bitmap_line::@6
  b6:
  //SEG1153 [618] (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_xdyd.x
  //SEG1154 [619] (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_xdyd.y
  //SEG1155 [620] (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyd.x1
  //SEG1156 [621] (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#2 -- vbuz1=vbuz2 
    lda xd_2
    sta bitmap_line_xdyd.xd
  //SEG1157 [622] (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuz2 
    lda yd
    sta bitmap_line_xdyd.yd
  //SEG1158 [623] call bitmap_line_xdyd 
  //SEG1159 [691] phi from bitmap_line::@6 to bitmap_line_xdyd [phi:bitmap_line::@6->bitmap_line_xdyd]
  bitmap_line_xdyd_from_b6:
  //SEG1160 [691] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#0 [phi:bitmap_line::@6->bitmap_line_xdyd#0] -- register_copy 
  //SEG1161 [691] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#0 [phi:bitmap_line::@6->bitmap_line_xdyd#1] -- register_copy 
  //SEG1162 [691] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#0 [phi:bitmap_line::@6->bitmap_line_xdyd#2] -- register_copy 
  //SEG1163 [691] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#0 [phi:bitmap_line::@6->bitmap_line_xdyd#3] -- register_copy 
  //SEG1164 [691] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#0 [phi:bitmap_line::@6->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp breturn
  //SEG1165 bitmap_line::@1
  b1:
  //SEG1166 [624] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda x1
    sec
    sbc x0
    sta xd
  //SEG1167 [625] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@9 -- vbuz1_lt_vbuz2_then_la1 
    lda y0
    cmp y1
    bcc b9
    jmp b23
  //SEG1168 bitmap_line::@23
  b23:
  //SEG1169 [626] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda y0
    sec
    sbc y1
    sta yd_10
  //SEG1170 [627] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@10 -- vbuz1_lt_vbuz2_then_la1 
    lda yd_10
    cmp xd
    bcc b10
    jmp b24
  //SEG1171 bitmap_line::@24
  b24:
  //SEG1172 [628] (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_ydxd.y
  //SEG1173 [629] (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_ydxd.x
  //SEG1174 [630] (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxd.y1
  //SEG1175 [631] (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuz2 
    lda yd_10
    sta bitmap_line_ydxd.yd
  //SEG1176 [632] (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#1 -- vbuz1=vbuz2 
    lda xd
    sta bitmap_line_ydxd.xd
  //SEG1177 [633] call bitmap_line_ydxd 
  //SEG1178 [706] phi from bitmap_line::@24 to bitmap_line_ydxd [phi:bitmap_line::@24->bitmap_line_ydxd]
  bitmap_line_ydxd_from_b24:
  //SEG1179 [706] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#1 [phi:bitmap_line::@24->bitmap_line_ydxd#0] -- register_copy 
  //SEG1180 [706] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#1 [phi:bitmap_line::@24->bitmap_line_ydxd#1] -- register_copy 
  //SEG1181 [706] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#1 [phi:bitmap_line::@24->bitmap_line_ydxd#2] -- register_copy 
  //SEG1182 [706] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#1 [phi:bitmap_line::@24->bitmap_line_ydxd#3] -- register_copy 
  //SEG1183 [706] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#1 [phi:bitmap_line::@24->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp breturn
  //SEG1184 bitmap_line::@10
  b10:
  //SEG1185 [634] (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyd.x
  //SEG1186 [635] (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_xdyd.y
  //SEG1187 [636] (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_xdyd.x1
  //SEG1188 [637] (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#1 -- vbuz1=vbuz2 
    lda xd
    sta bitmap_line_xdyd.xd
  //SEG1189 [638] (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuz2 
    lda yd_10
    sta bitmap_line_xdyd.yd
  //SEG1190 [639] call bitmap_line_xdyd 
  //SEG1191 [691] phi from bitmap_line::@10 to bitmap_line_xdyd [phi:bitmap_line::@10->bitmap_line_xdyd]
  bitmap_line_xdyd_from_b10:
  //SEG1192 [691] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#1 [phi:bitmap_line::@10->bitmap_line_xdyd#0] -- register_copy 
  //SEG1193 [691] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#1 [phi:bitmap_line::@10->bitmap_line_xdyd#1] -- register_copy 
  //SEG1194 [691] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#1 [phi:bitmap_line::@10->bitmap_line_xdyd#2] -- register_copy 
  //SEG1195 [691] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#1 [phi:bitmap_line::@10->bitmap_line_xdyd#3] -- register_copy 
  //SEG1196 [691] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#1 [phi:bitmap_line::@10->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp breturn
  //SEG1197 bitmap_line::@9
  b9:
  //SEG1198 [640] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda y1
    sec
    sbc y0
    sta yd_11
  //SEG1199 [641] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13 -- vbuz1_lt_vbuz2_then_la1 
    lda yd_11
    cmp xd
    bcc b13
    jmp b27
  //SEG1200 bitmap_line::@27
  b27:
  //SEG1201 [642] (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxi.y
  //SEG1202 [643] (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_ydxi.x
  //SEG1203 [644] (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_ydxi.y1
  //SEG1204 [645] (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuz2 
    lda yd_11
    sta bitmap_line_ydxi.yd
  //SEG1205 [646] (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#1 -- vbuz1=vbuz2 
    lda xd
    sta bitmap_line_ydxi.xd
  //SEG1206 [647] call bitmap_line_ydxi 
  //SEG1207 [676] phi from bitmap_line::@27 to bitmap_line_ydxi [phi:bitmap_line::@27->bitmap_line_ydxi]
  bitmap_line_ydxi_from_b27:
  //SEG1208 [676] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#1 [phi:bitmap_line::@27->bitmap_line_ydxi#0] -- register_copy 
  //SEG1209 [676] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#1 [phi:bitmap_line::@27->bitmap_line_ydxi#1] -- register_copy 
  //SEG1210 [676] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#1 [phi:bitmap_line::@27->bitmap_line_ydxi#2] -- register_copy 
  //SEG1211 [676] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#1 [phi:bitmap_line::@27->bitmap_line_ydxi#3] -- register_copy 
  //SEG1212 [676] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#1 [phi:bitmap_line::@27->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp breturn
  //SEG1213 bitmap_line::@13
  b13:
  //SEG1214 [648] (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyi.x
  //SEG1215 [649] (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_xdyi.y
  //SEG1216 [650] (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_xdyi.x1
  //SEG1217 [651] (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#1 -- vbuz1=vbuz2 
    lda xd
    sta bitmap_line_xdyi.xd
  //SEG1218 [652] (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuz2 
    lda yd_11
    sta bitmap_line_xdyi.yd
  //SEG1219 [653] call bitmap_line_xdyi 
  //SEG1220 [654] phi from bitmap_line::@13 to bitmap_line_xdyi [phi:bitmap_line::@13->bitmap_line_xdyi]
  bitmap_line_xdyi_from_b13:
  //SEG1221 [654] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#1 [phi:bitmap_line::@13->bitmap_line_xdyi#0] -- register_copy 
  //SEG1222 [654] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#1] -- register_copy 
  //SEG1223 [654] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#1 [phi:bitmap_line::@13->bitmap_line_xdyi#2] -- register_copy 
  //SEG1224 [654] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#1 [phi:bitmap_line::@13->bitmap_line_xdyi#3] -- register_copy 
  //SEG1225 [654] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp breturn
}
//SEG1226 bitmap_line_xdyi
// bitmap_line_xdyi(byte zeropage($64) x, byte zeropage($65) y, byte zeropage($63) x1, byte zeropage($62) xd, byte zeropage($61) yd)
bitmap_line_xdyi: {
    .label _6 = $102
    .label x = $64
    .label y = $65
    .label x1 = $63
    .label xd = $62
    .label yd = $61
    .label e = $66
  //SEG1227 [655] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda yd
    lsr
    sta e
  //SEG1228 [656] phi from bitmap_line_xdyi bitmap_line_xdyi::@2 to bitmap_line_xdyi::@1 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1]
  b1_from_bitmap_line_xdyi:
  b1_from_b2:
  //SEG1229 [656] phi (byte) bitmap_line_xdyi::e#3 = (byte) bitmap_line_xdyi::e#0 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#0] -- register_copy 
  //SEG1230 [656] phi (byte) bitmap_line_xdyi::y#3 = (byte) bitmap_line_xdyi::y#5 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#1] -- register_copy 
  //SEG1231 [656] phi (byte) bitmap_line_xdyi::x#3 = (byte) bitmap_line_xdyi::x#6 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#2] -- register_copy 
    jmp b1
  //SEG1232 bitmap_line_xdyi::@1
  b1:
  //SEG1233 [657] (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3 -- vbuz1=vbuz2 
    lda x
    sta bitmap_plot.x
  //SEG1234 [658] (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3 -- vbuz1=vbuz2 
    lda y
    sta bitmap_plot.y
  //SEG1235 [659] call bitmap_plot 
  //SEG1236 [669] phi from bitmap_line_xdyi::@1 to bitmap_plot [phi:bitmap_line_xdyi::@1->bitmap_plot]
  bitmap_plot_from_b1:
  //SEG1237 [669] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#0] -- register_copy 
  //SEG1238 [669] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b5
  //SEG1239 bitmap_line_xdyi::@5
  b5:
  //SEG1240 [660] (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#3 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1241 [661] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc yd
    sta e
  //SEG1242 [662] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda xd
    cmp e
    bcs b2_from_b5
    jmp b3
  //SEG1243 bitmap_line_xdyi::@3
  b3:
  //SEG1244 [663] (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#3 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1245 [664] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc xd
    sta e
  //SEG1246 [665] phi from bitmap_line_xdyi::@3 bitmap_line_xdyi::@5 to bitmap_line_xdyi::@2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@5->bitmap_line_xdyi::@2]
  b2_from_b3:
  b2_from_b5:
  //SEG1247 [665] phi (byte) bitmap_line_xdyi::e#6 = (byte) bitmap_line_xdyi::e#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@5->bitmap_line_xdyi::@2#0] -- register_copy 
  //SEG1248 [665] phi (byte) bitmap_line_xdyi::y#6 = (byte) bitmap_line_xdyi::y#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@5->bitmap_line_xdyi::@2#1] -- register_copy 
    jmp b2
  //SEG1249 bitmap_line_xdyi::@2
  b2:
  //SEG1250 [666] (byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_plus_1 
    ldy x1
    iny
    sty _6
  //SEG1251 [667] if((byte) bitmap_line_xdyi::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1 -- vbuz1_neq_vbuz2_then_la1 
    lda x
    cmp _6
    bne b1_from_b2
    jmp breturn
  //SEG1252 bitmap_line_xdyi::@return
  breturn:
  //SEG1253 [668] return 
    rts
}
//SEG1254 bitmap_plot
// bitmap_plot(byte zeropage($67) x, byte zeropage($68) y)
bitmap_plot: {
    .label _0 = $107
    .label _1 = $109
    .label plotter_x = $103
    .label plotter_y = $105
    .label x = $67
    .label y = $68
  //SEG1255 [670] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_plot::x#4) -- vwuz1=pbuc1_derefidx_vbuz2_word_pbuc2_derefidx_vbuz2 
    ldy x
    lda bitmap_plot_xhi,y
    sta plotter_x+1
    lda bitmap_plot_xlo,y
    sta plotter_x
  //SEG1256 [671] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuz2_word_pbuc2_derefidx_vbuz2 
    ldy y
    lda bitmap_plot_yhi,y
    sta plotter_y+1
    lda bitmap_plot_ylo,y
    sta plotter_y
  //SEG1257 [672] (word~) bitmap_plot::$0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 -- vwuz1=vwuz2_plus_vwuz3 
    lda plotter_x
    clc
    adc plotter_y
    sta _0
    lda plotter_x+1
    adc plotter_y+1
    sta _0+1
  //SEG1258 [673] (byte~) bitmap_plot::$1 ← *((byte*)(word~) bitmap_plot::$0) | *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_plot::x#4) -- vbuz1=_deref_pbuz2_bor_pbuc1_derefidx_vbuz3 
    ldy #0
    lda (_0),y
    ldy x
    ora bitmap_plot_bit,y
    sta _1
  //SEG1259 [674] *((byte*)(word~) bitmap_plot::$0) ← (byte~) bitmap_plot::$1 -- _deref_pbuz1=vbuz2 
    lda _1
    ldy #0
    sta (_0),y
    jmp breturn
  //SEG1260 bitmap_plot::@return
  breturn:
  //SEG1261 [675] return 
    rts
}
//SEG1262 bitmap_line_ydxi
// bitmap_line_ydxi(byte zeropage($6d) y, byte zeropage($6c) x, byte zeropage($6b) y1, byte zeropage($6a) yd, byte zeropage($69) xd)
bitmap_line_ydxi: {
    .label _6 = $10a
    .label y = $6d
    .label x = $6c
    .label y1 = $6b
    .label yd = $6a
    .label xd = $69
    .label e = $6e
  //SEG1263 [677] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda xd
    lsr
    sta e
  //SEG1264 [678] phi from bitmap_line_ydxi bitmap_line_ydxi::@2 to bitmap_line_ydxi::@1 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1]
  b1_from_bitmap_line_ydxi:
  b1_from_b2:
  //SEG1265 [678] phi (byte) bitmap_line_ydxi::e#3 = (byte) bitmap_line_ydxi::e#0 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#0] -- register_copy 
  //SEG1266 [678] phi (byte) bitmap_line_ydxi::y#3 = (byte) bitmap_line_ydxi::y#6 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#1] -- register_copy 
  //SEG1267 [678] phi (byte) bitmap_line_ydxi::x#3 = (byte) bitmap_line_ydxi::x#5 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#2] -- register_copy 
    jmp b1
  //SEG1268 bitmap_line_ydxi::@1
  b1:
  //SEG1269 [679] (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3 -- vbuz1=vbuz2 
    lda x
    sta bitmap_plot.x
  //SEG1270 [680] (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3 -- vbuz1=vbuz2 
    lda y
    sta bitmap_plot.y
  //SEG1271 [681] call bitmap_plot 
  //SEG1272 [669] phi from bitmap_line_ydxi::@1 to bitmap_plot [phi:bitmap_line_ydxi::@1->bitmap_plot]
  bitmap_plot_from_b1:
  //SEG1273 [669] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#0] -- register_copy 
  //SEG1274 [669] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b5
  //SEG1275 bitmap_line_ydxi::@5
  b5:
  //SEG1276 [682] (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#3 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1277 [683] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc xd
    sta e
  //SEG1278 [684] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda yd
    cmp e
    bcs b2_from_b5
    jmp b3
  //SEG1279 bitmap_line_ydxi::@3
  b3:
  //SEG1280 [685] (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#3 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1281 [686] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc yd
    sta e
  //SEG1282 [687] phi from bitmap_line_ydxi::@3 bitmap_line_ydxi::@5 to bitmap_line_ydxi::@2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@5->bitmap_line_ydxi::@2]
  b2_from_b3:
  b2_from_b5:
  //SEG1283 [687] phi (byte) bitmap_line_ydxi::e#6 = (byte) bitmap_line_ydxi::e#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@5->bitmap_line_ydxi::@2#0] -- register_copy 
  //SEG1284 [687] phi (byte) bitmap_line_ydxi::x#6 = (byte) bitmap_line_ydxi::x#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@5->bitmap_line_ydxi::@2#1] -- register_copy 
    jmp b2
  //SEG1285 bitmap_line_ydxi::@2
  b2:
  //SEG1286 [688] (byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_plus_1 
    ldy y1
    iny
    sty _6
  //SEG1287 [689] if((byte) bitmap_line_ydxi::y#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1 -- vbuz1_neq_vbuz2_then_la1 
    lda y
    cmp _6
    bne b1_from_b2
    jmp breturn
  //SEG1288 bitmap_line_ydxi::@return
  breturn:
  //SEG1289 [690] return 
    rts
}
//SEG1290 bitmap_line_xdyd
// bitmap_line_xdyd(byte zeropage($72) x, byte zeropage($73) y, byte zeropage($71) x1, byte zeropage($70) xd, byte zeropage($6f) yd)
bitmap_line_xdyd: {
    .label _6 = $10b
    .label x = $72
    .label y = $73
    .label x1 = $71
    .label xd = $70
    .label yd = $6f
    .label e = $74
  //SEG1291 [692] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda yd
    lsr
    sta e
  //SEG1292 [693] phi from bitmap_line_xdyd bitmap_line_xdyd::@2 to bitmap_line_xdyd::@1 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1]
  b1_from_bitmap_line_xdyd:
  b1_from_b2:
  //SEG1293 [693] phi (byte) bitmap_line_xdyd::e#3 = (byte) bitmap_line_xdyd::e#0 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#0] -- register_copy 
  //SEG1294 [693] phi (byte) bitmap_line_xdyd::y#3 = (byte) bitmap_line_xdyd::y#5 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#1] -- register_copy 
  //SEG1295 [693] phi (byte) bitmap_line_xdyd::x#3 = (byte) bitmap_line_xdyd::x#6 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#2] -- register_copy 
    jmp b1
  //SEG1296 bitmap_line_xdyd::@1
  b1:
  //SEG1297 [694] (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3 -- vbuz1=vbuz2 
    lda x
    sta bitmap_plot.x
  //SEG1298 [695] (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3 -- vbuz1=vbuz2 
    lda y
    sta bitmap_plot.y
  //SEG1299 [696] call bitmap_plot 
  //SEG1300 [669] phi from bitmap_line_xdyd::@1 to bitmap_plot [phi:bitmap_line_xdyd::@1->bitmap_plot]
  bitmap_plot_from_b1:
  //SEG1301 [669] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#0] -- register_copy 
  //SEG1302 [669] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b5
  //SEG1303 bitmap_line_xdyd::@5
  b5:
  //SEG1304 [697] (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#3 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1305 [698] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc yd
    sta e
  //SEG1306 [699] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda xd
    cmp e
    bcs b2_from_b5
    jmp b3
  //SEG1307 bitmap_line_xdyd::@3
  b3:
  //SEG1308 [700] (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#3 -- vbuz1=_dec_vbuz1 
    dec y
  //SEG1309 [701] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc xd
    sta e
  //SEG1310 [702] phi from bitmap_line_xdyd::@3 bitmap_line_xdyd::@5 to bitmap_line_xdyd::@2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@5->bitmap_line_xdyd::@2]
  b2_from_b3:
  b2_from_b5:
  //SEG1311 [702] phi (byte) bitmap_line_xdyd::e#6 = (byte) bitmap_line_xdyd::e#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@5->bitmap_line_xdyd::@2#0] -- register_copy 
  //SEG1312 [702] phi (byte) bitmap_line_xdyd::y#6 = (byte) bitmap_line_xdyd::y#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@5->bitmap_line_xdyd::@2#1] -- register_copy 
    jmp b2
  //SEG1313 bitmap_line_xdyd::@2
  b2:
  //SEG1314 [703] (byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_plus_1 
    ldy x1
    iny
    sty _6
  //SEG1315 [704] if((byte) bitmap_line_xdyd::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1 -- vbuz1_neq_vbuz2_then_la1 
    lda x
    cmp _6
    bne b1_from_b2
    jmp breturn
  //SEG1316 bitmap_line_xdyd::@return
  breturn:
  //SEG1317 [705] return 
    rts
}
//SEG1318 bitmap_line_ydxd
// bitmap_line_ydxd(byte zeropage($79) y, byte zeropage($78) x, byte zeropage($77) y1, byte zeropage($76) yd, byte zeropage($75) xd)
bitmap_line_ydxd: {
    .label _6 = $10c
    .label y = $79
    .label x = $78
    .label y1 = $77
    .label yd = $76
    .label xd = $75
    .label e = $7a
  //SEG1319 [707] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda xd
    lsr
    sta e
  //SEG1320 [708] phi from bitmap_line_ydxd bitmap_line_ydxd::@2 to bitmap_line_ydxd::@1 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1]
  b1_from_bitmap_line_ydxd:
  b1_from_b2:
  //SEG1321 [708] phi (byte) bitmap_line_ydxd::e#3 = (byte) bitmap_line_ydxd::e#0 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#0] -- register_copy 
  //SEG1322 [708] phi (byte) bitmap_line_ydxd::y#2 = (byte) bitmap_line_ydxd::y#7 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#1] -- register_copy 
  //SEG1323 [708] phi (byte) bitmap_line_ydxd::x#3 = (byte) bitmap_line_ydxd::x#5 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#2] -- register_copy 
    jmp b1
  //SEG1324 bitmap_line_ydxd::@1
  b1:
  //SEG1325 [709] (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3 -- vbuz1=vbuz2 
    lda x
    sta bitmap_plot.x
  //SEG1326 [710] (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#2 -- vbuz1=vbuz2 
    lda y
    sta bitmap_plot.y
  //SEG1327 [711] call bitmap_plot 
  //SEG1328 [669] phi from bitmap_line_ydxd::@1 to bitmap_plot [phi:bitmap_line_ydxd::@1->bitmap_plot]
  bitmap_plot_from_b1:
  //SEG1329 [669] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#0] -- register_copy 
  //SEG1330 [669] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b5
  //SEG1331 bitmap_line_ydxd::@5
  b5:
  //SEG1332 [712] (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1333 [713] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc xd
    sta e
  //SEG1334 [714] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda yd
    cmp e
    bcs b2_from_b5
    jmp b3
  //SEG1335 bitmap_line_ydxd::@3
  b3:
  //SEG1336 [715] (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#3 -- vbuz1=_dec_vbuz1 
    dec x
  //SEG1337 [716] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc yd
    sta e
  //SEG1338 [717] phi from bitmap_line_ydxd::@3 bitmap_line_ydxd::@5 to bitmap_line_ydxd::@2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@5->bitmap_line_ydxd::@2]
  b2_from_b3:
  b2_from_b5:
  //SEG1339 [717] phi (byte) bitmap_line_ydxd::e#6 = (byte) bitmap_line_ydxd::e#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@5->bitmap_line_ydxd::@2#0] -- register_copy 
  //SEG1340 [717] phi (byte) bitmap_line_ydxd::x#6 = (byte) bitmap_line_ydxd::x#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@5->bitmap_line_ydxd::@2#1] -- register_copy 
    jmp b2
  //SEG1341 bitmap_line_ydxd::@2
  b2:
  //SEG1342 [718] (byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_plus_1 
    ldy y1
    iny
    sty _6
  //SEG1343 [719] if((byte) bitmap_line_ydxd::y#3!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1 -- vbuz1_neq_vbuz2_then_la1 
    lda y
    cmp _6
    bne b1_from_b2
    jmp breturn
  //SEG1344 bitmap_line_ydxd::@return
  breturn:
  //SEG1345 [720] return 
    rts
}
//SEG1346 bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = $7c
    .label x = $7e
    .label y = $7b
    .label _3 = $10d
  //SEG1347 [721] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_xhi#0) w= *((const byte[$100]) bitmap_plot_xlo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_xlo
    sta _3
    lda bitmap_plot_xhi
    sta _3+1
  //SEG1348 [722] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3 -- pbuz1=pbuz2 
    lda _3
    sta bitmap
    lda _3+1
    sta bitmap+1
  //SEG1349 [723] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  b1_from_bitmap_clear:
  //SEG1350 [723] phi (byte) bitmap_clear::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG1351 [723] phi (byte*) bitmap_clear::bitmap#3 = (byte*~) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    jmp b1
  //SEG1352 [723] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  b1_from_b3:
  //SEG1353 [723] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
  //SEG1354 [723] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    jmp b1
  //SEG1355 bitmap_clear::@1
  b1:
  //SEG1356 [724] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  b2_from_b1:
  //SEG1357 [724] phi (byte) bitmap_clear::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG1358 [724] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    jmp b2
  //SEG1359 [724] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  b2_from_b2:
  //SEG1360 [724] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
  //SEG1361 [724] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    jmp b2
  //SEG1362 bitmap_clear::@2
  b2:
  //SEG1363 [725] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (bitmap),y
  //SEG1364 [726] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc bitmap
    bne !+
    inc bitmap+1
  !:
  //SEG1365 [727] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1366 [728] if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) $c8) goto bitmap_clear::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda x
    cmp #$c8
    bne b2_from_b2
    jmp b3
  //SEG1367 bitmap_clear::@3
  b3:
  //SEG1368 [729] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1369 [730] if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$28
    bne b1_from_b3
    jmp breturn
  //SEG1370 bitmap_clear::@return
  breturn:
  //SEG1371 [731] return 
    rts
}
//SEG1372 bitmap_init
// Initialize the bitmap plotter tables for a specific bitmap
bitmap_init: {
    .label _0 = $10f
    .label _6 = $110
    .label _7 = $111
    .label _8 = $112
    .label _9 = $113
    .label _10 = $114
    .label bits = $80
    .label x = $7f
    .label y = $81
    .label yoffs = $82
  //SEG1373 [733] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  b1_from_bitmap_init:
  //SEG1374 [733] phi (byte) bitmap_init::bits#3 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init->bitmap_init::@1#0] -- vbuz1=vbuc1 
    lda #$80
    sta bits
  //SEG1375 [733] phi (byte) bitmap_init::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init->bitmap_init::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta x
    jmp b1
  //SEG1376 [733] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  b1_from_b2:
  //SEG1377 [733] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
  //SEG1378 [733] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp b1
  //SEG1379 bitmap_init::@1
  b1:
  //SEG1380 [734] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte/word/signed word/dword/signed dword) $f8 -- vbuz1=vbuz2_band_vbuc1 
    lda #$f8
    and x
    sta _0
  //SEG1381 [735] *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _0
    ldy x
    sta bitmap_plot_xlo,y
  //SEG1382 [736] *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_init::x#2) ← >(const byte*) mode_stdbitmap::BITMAP#0 -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy x
    lda #>mode_stdbitmap.BITMAP
    sta bitmap_plot_xhi,y
  //SEG1383 [737] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda bits
    ldy x
    sta bitmap_plot_bit,y
  //SEG1384 [738] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_ror_1 
    lsr bits
  //SEG1385 [739] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@10 -- vbuz1_neq_0_then_la1 
    lda bits
    cmp #0
    bne b10_from_b1
  //SEG1386 [740] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  b2_from_b1:
  //SEG1387 [740] phi (byte) bitmap_init::bits#4 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuz1=vbuc1 
    lda #$80
    sta bits
    jmp b2
  //SEG1388 bitmap_init::@2
  b2:
  //SEG1389 [741] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1390 [742] if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1 -- vbuz1_neq_0_then_la1 
    lda x
    cmp #0
    bne b1_from_b2
  //SEG1391 [743] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  b3_from_b2:
  //SEG1392 [743] phi (byte*) bitmap_init::yoffs#2 = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta yoffs
    lda #>0
    sta yoffs+1
  //SEG1393 [743] phi (byte) bitmap_init::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b3
  //SEG1394 [743] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  b3_from_b4:
  //SEG1395 [743] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
  //SEG1396 [743] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp b3
  //SEG1397 bitmap_init::@3
  b3:
  //SEG1398 [744] (byte~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and y
    sta _6
  //SEG1399 [745] (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2 -- vbuz1=_lo_pbuz2 
    lda yoffs
    sta _7
  //SEG1400 [746] (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$6 | (byte~) bitmap_init::$7 -- vbuz1=vbuz2_bor_vbuz3 
    lda _6
    ora _7
    sta _8
  //SEG1401 [747] *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _8
    ldy y
    sta bitmap_plot_ylo,y
  //SEG1402 [748] (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2 -- vbuz1=_hi_pbuz2 
    lda yoffs+1
    sta _9
  //SEG1403 [749] *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _9
    ldy y
    sta bitmap_plot_yhi,y
  //SEG1404 [750] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and y
    sta _10
  //SEG1405 [751] if((byte~) bitmap_init::$10!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda _10
    cmp #7
    bne b4_from_b3
    jmp b7
  //SEG1406 bitmap_init::@7
  b7:
  //SEG1407 [752] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda yoffs
    adc #<$28*8
    sta yoffs
    lda yoffs+1
    adc #>$28*8
    sta yoffs+1
  //SEG1408 [753] phi from bitmap_init::@3 bitmap_init::@7 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG1409 [753] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4#0] -- register_copy 
    jmp b4
  //SEG1410 bitmap_init::@4
  b4:
  //SEG1411 [754] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1412 [755] if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3 -- vbuz1_neq_0_then_la1 
    lda y
    cmp #0
    bne b3_from_b4
    jmp breturn
  //SEG1413 bitmap_init::@return
  breturn:
  //SEG1414 [756] return 
    rts
  //SEG1415 [757] phi from bitmap_init::@1 to bitmap_init::@10 [phi:bitmap_init::@1->bitmap_init::@10]
  b10_from_b1:
    jmp b10
  //SEG1416 bitmap_init::@10
  b10:
  //SEG1417 [740] phi from bitmap_init::@10 to bitmap_init::@2 [phi:bitmap_init::@10->bitmap_init::@2]
  b2_from_b10:
  //SEG1418 [740] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@10->bitmap_init::@2#0] -- register_copy 
    jmp b2
}
//SEG1419 mode_mcchar
// Multicolor Character Mode (LINEAR/HICOL/CHUNK/COLDIS/BMM/ECM = 0, MCM = 1)
// Resolution: 160x200 (320x200)
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
// GfxData Pixel Shifter (1) if ColorData[3:3] = 0:
//  - 0: 4bpp BgColor0[3:0]
//  - 1: 4bpp ColorData[2:0]
// GfxData Pixel Shifter (2) if ColorData[3:3] = 1:
//  - 00: 4bpp BgColor0[3:0]
//  - 01: 4bpp BgColor1[3:0]
//  - 10: 4bpp BgColor2[3:0]
//  - 11: 4bpp ColorData[2:0]// Standard Character Mode (LINEAR/HICOL/CHUNK/COLDIS/ECM/MCM/BMM = 0)
mode_mcchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $d800
    .label _25 = $115
    .label _26 = $116
    .label _27 = $117
    .label _28 = $118
    .label _29 = $119
    .label _30 = $11a
    .label i = $84
    .label col = $87
    .label ch = $89
    .label cx = $86
    .label cy = $85
  //SEG1420 [758] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_mcchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG1421 [759] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
  //SEG1422 [760] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG1423 [761] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_CONTROL
  //SEG1424 [762] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG1425 [763] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_mcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG1426 [764] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG1427 [765] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL|VIC_MCM
    sta VIC_CONTROL2
  //SEG1428 [766] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_mcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_mcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG1429 [767] phi from mode_mcchar to mode_mcchar::@1 [phi:mode_mcchar->mode_mcchar::@1]
  b1_from_mode_mcchar:
  //SEG1430 [767] phi (byte) mode_mcchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_mcchar->mode_mcchar::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // DTV Palette - default
  //SEG1431 [767] phi from mode_mcchar::@1 to mode_mcchar::@1 [phi:mode_mcchar::@1->mode_mcchar::@1]
  b1_from_b1:
  //SEG1432 [767] phi (byte) mode_mcchar::i#2 = (byte) mode_mcchar::i#1 [phi:mode_mcchar::@1->mode_mcchar::@1#0] -- register_copy 
    jmp b1
  //SEG1433 mode_mcchar::@1
  b1:
  //SEG1434 [768] *((const byte*) DTV_PALETTE#0 + (byte) mode_mcchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_mcchar::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy i
    lda DTV_PALETTE_DEFAULT,y
    sta DTV_PALETTE,y
  //SEG1435 [769] (byte) mode_mcchar::i#1 ← ++ (byte) mode_mcchar::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG1436 [770] if((byte) mode_mcchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_mcchar::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b1
    jmp b4
  //SEG1437 mode_mcchar::@4
  b4:
  //SEG1438 [771] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG1439 [772] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BGCOL1
  //SEG1440 [773] *((const byte*) BGCOL2#0) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BGCOL2
  //SEG1441 [774] *((const byte*) BGCOL3#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL3
  //SEG1442 [775] phi from mode_mcchar::@4 to mode_mcchar::@2 [phi:mode_mcchar::@4->mode_mcchar::@2]
  b2_from_b4:
  //SEG1443 [775] phi (byte*) mode_mcchar::ch#3 = (const byte*) mode_mcchar::SCREEN#0 [phi:mode_mcchar::@4->mode_mcchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG1444 [775] phi (byte*) mode_mcchar::col#3 = (const byte*) mode_mcchar::COLORS#0 [phi:mode_mcchar::@4->mode_mcchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG1445 [775] phi (byte) mode_mcchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_mcchar::@4->mode_mcchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG1446 [775] phi from mode_mcchar::@5 to mode_mcchar::@2 [phi:mode_mcchar::@5->mode_mcchar::@2]
  b2_from_b5:
  //SEG1447 [775] phi (byte*) mode_mcchar::ch#3 = (byte*) mode_mcchar::ch#1 [phi:mode_mcchar::@5->mode_mcchar::@2#0] -- register_copy 
  //SEG1448 [775] phi (byte*) mode_mcchar::col#3 = (byte*) mode_mcchar::col#1 [phi:mode_mcchar::@5->mode_mcchar::@2#1] -- register_copy 
  //SEG1449 [775] phi (byte) mode_mcchar::cy#4 = (byte) mode_mcchar::cy#1 [phi:mode_mcchar::@5->mode_mcchar::@2#2] -- register_copy 
    jmp b2
  //SEG1450 mode_mcchar::@2
  b2:
  //SEG1451 [776] phi from mode_mcchar::@2 to mode_mcchar::@3 [phi:mode_mcchar::@2->mode_mcchar::@3]
  b3_from_b2:
  //SEG1452 [776] phi (byte*) mode_mcchar::ch#2 = (byte*) mode_mcchar::ch#3 [phi:mode_mcchar::@2->mode_mcchar::@3#0] -- register_copy 
  //SEG1453 [776] phi (byte*) mode_mcchar::col#2 = (byte*) mode_mcchar::col#3 [phi:mode_mcchar::@2->mode_mcchar::@3#1] -- register_copy 
  //SEG1454 [776] phi (byte) mode_mcchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_mcchar::@2->mode_mcchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta cx
    jmp b3
  //SEG1455 [776] phi from mode_mcchar::@3 to mode_mcchar::@3 [phi:mode_mcchar::@3->mode_mcchar::@3]
  b3_from_b3:
  //SEG1456 [776] phi (byte*) mode_mcchar::ch#2 = (byte*) mode_mcchar::ch#1 [phi:mode_mcchar::@3->mode_mcchar::@3#0] -- register_copy 
  //SEG1457 [776] phi (byte*) mode_mcchar::col#2 = (byte*) mode_mcchar::col#1 [phi:mode_mcchar::@3->mode_mcchar::@3#1] -- register_copy 
  //SEG1458 [776] phi (byte) mode_mcchar::cx#2 = (byte) mode_mcchar::cx#1 [phi:mode_mcchar::@3->mode_mcchar::@3#2] -- register_copy 
    jmp b3
  //SEG1459 mode_mcchar::@3
  b3:
  //SEG1460 [777] (byte~) mode_mcchar::$25 ← (byte) mode_mcchar::cx#2 + (byte) mode_mcchar::cy#4 -- vbuz1=vbuz2_plus_vbuz3 
    lda cx
    clc
    adc cy
    sta _25
  //SEG1461 [778] (byte~) mode_mcchar::$26 ← (byte~) mode_mcchar::$25 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and _25
    sta _26
  //SEG1462 [779] *((byte*) mode_mcchar::col#2) ← (byte~) mode_mcchar::$26 -- _deref_pbuz1=vbuz2 
    lda _26
    ldy #0
    sta (col),y
  //SEG1463 [780] (byte*) mode_mcchar::col#1 ← ++ (byte*) mode_mcchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG1464 [781] (byte~) mode_mcchar::$27 ← (byte) mode_mcchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cy
    sta _27
  //SEG1465 [782] (byte~) mode_mcchar::$28 ← (byte~) mode_mcchar::$27 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_rol_4 
    lda _27
    asl
    asl
    asl
    asl
    sta _28
  //SEG1466 [783] (byte~) mode_mcchar::$29 ← (byte) mode_mcchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cx
    sta _29
  //SEG1467 [784] (byte~) mode_mcchar::$30 ← (byte~) mode_mcchar::$28 | (byte~) mode_mcchar::$29 -- vbuz1=vbuz2_bor_vbuz3 
    lda _28
    ora _29
    sta _30
  //SEG1468 [785] *((byte*) mode_mcchar::ch#2) ← (byte~) mode_mcchar::$30 -- _deref_pbuz1=vbuz2 
    lda _30
    ldy #0
    sta (ch),y
  //SEG1469 [786] (byte*) mode_mcchar::ch#1 ← ++ (byte*) mode_mcchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1470 [787] (byte) mode_mcchar::cx#1 ← ++ (byte) mode_mcchar::cx#2 -- vbuz1=_inc_vbuz1 
    inc cx
  //SEG1471 [788] if((byte) mode_mcchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_mcchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda cx
    cmp #$28
    bne b3_from_b3
    jmp b5
  //SEG1472 mode_mcchar::@5
  b5:
  //SEG1473 [789] (byte) mode_mcchar::cy#1 ← ++ (byte) mode_mcchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1474 [790] if((byte) mode_mcchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_mcchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b5
  //SEG1475 [791] phi from mode_mcchar::@5 to mode_mcchar::@6 [phi:mode_mcchar::@5->mode_mcchar::@6]
  b6_from_b5:
    jmp b6
  //SEG1476 mode_mcchar::@6
  b6:
  //SEG1477 [792] call mode_ctrl 
  //SEG1478 [155] phi from mode_mcchar::@6 to mode_ctrl [phi:mode_mcchar::@6->mode_ctrl]
  mode_ctrl_from_b6:
  //SEG1479 [155] phi (byte) dtv_control#145 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_mcchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #0
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG1480 mode_mcchar::@return
  breturn:
  //SEG1481 [793] return 
    rts
}
//SEG1482 mode_ecmchar
// Extended Background Color Character Mode (LINEAR/HICOL/CHUNK/COLDIS/MCM/BMM = 0, ECM = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & "00" & CharData[5:0] & RowCounter[2:0] ) 
// GfxData Pixel Shifter (1)
//  - 0: 4bpp Background Color
//    - CharData[7:6] 00: 4bpp BgColor0[3:0]
//    - CharData[7:6] 01: 4bpp BgColor1[3:0]
//    - CharData[7:6] 10: 4bpp BgColor2[3:0]
//    - CharData[7:6] 11: 4bpp BgColor3[3:0]
//  - 1: 4bpp ColorData[3:0]
mode_ecmchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $d800
    .label _25 = $11b
    .label _26 = $11c
    .label _27 = $11d
    .label _28 = $11e
    .label _29 = $11f
    .label _30 = $120
    .label i = $8b
    .label col = $8e
    .label ch = $90
    .label cx = $8d
    .label cy = $8c
  //SEG1483 [794] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_ecmchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG1484 [795] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
  //SEG1485 [796] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG1486 [797] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_CONTROL
  //SEG1487 [798] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG1488 [799] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_ecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG1489 [800] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(const byte) VIC_ECM#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|VIC_ECM|3
    sta VIC_CONTROL
  //SEG1490 [801] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG1491 [802] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_ecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_ecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG1492 [803] phi from mode_ecmchar to mode_ecmchar::@1 [phi:mode_ecmchar->mode_ecmchar::@1]
  b1_from_mode_ecmchar:
  //SEG1493 [803] phi (byte) mode_ecmchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_ecmchar->mode_ecmchar::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // DTV Palette - default
  //SEG1494 [803] phi from mode_ecmchar::@1 to mode_ecmchar::@1 [phi:mode_ecmchar::@1->mode_ecmchar::@1]
  b1_from_b1:
  //SEG1495 [803] phi (byte) mode_ecmchar::i#2 = (byte) mode_ecmchar::i#1 [phi:mode_ecmchar::@1->mode_ecmchar::@1#0] -- register_copy 
    jmp b1
  //SEG1496 mode_ecmchar::@1
  b1:
  //SEG1497 [804] *((const byte*) DTV_PALETTE#0 + (byte) mode_ecmchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_ecmchar::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy i
    lda DTV_PALETTE_DEFAULT,y
    sta DTV_PALETTE,y
  //SEG1498 [805] (byte) mode_ecmchar::i#1 ← ++ (byte) mode_ecmchar::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG1499 [806] if((byte) mode_ecmchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_ecmchar::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b1
    jmp b4
  //SEG1500 mode_ecmchar::@4
  b4:
  //SEG1501 [807] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG1502 [808] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BGCOL1
  //SEG1503 [809] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL2
  //SEG1504 [810] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BGCOL3
  //SEG1505 [811] *((const byte*) BGCOL4#0) ← (byte/signed byte/word/signed word/dword/signed dword) 6 -- _deref_pbuc1=vbuc2 
    lda #6
    sta BGCOL4
  //SEG1506 [812] phi from mode_ecmchar::@4 to mode_ecmchar::@2 [phi:mode_ecmchar::@4->mode_ecmchar::@2]
  b2_from_b4:
  //SEG1507 [812] phi (byte*) mode_ecmchar::ch#3 = (const byte*) mode_ecmchar::SCREEN#0 [phi:mode_ecmchar::@4->mode_ecmchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG1508 [812] phi (byte*) mode_ecmchar::col#3 = (const byte*) mode_ecmchar::COLORS#0 [phi:mode_ecmchar::@4->mode_ecmchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG1509 [812] phi (byte) mode_ecmchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_ecmchar::@4->mode_ecmchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG1510 [812] phi from mode_ecmchar::@5 to mode_ecmchar::@2 [phi:mode_ecmchar::@5->mode_ecmchar::@2]
  b2_from_b5:
  //SEG1511 [812] phi (byte*) mode_ecmchar::ch#3 = (byte*) mode_ecmchar::ch#1 [phi:mode_ecmchar::@5->mode_ecmchar::@2#0] -- register_copy 
  //SEG1512 [812] phi (byte*) mode_ecmchar::col#3 = (byte*) mode_ecmchar::col#1 [phi:mode_ecmchar::@5->mode_ecmchar::@2#1] -- register_copy 
  //SEG1513 [812] phi (byte) mode_ecmchar::cy#4 = (byte) mode_ecmchar::cy#1 [phi:mode_ecmchar::@5->mode_ecmchar::@2#2] -- register_copy 
    jmp b2
  //SEG1514 mode_ecmchar::@2
  b2:
  //SEG1515 [813] phi from mode_ecmchar::@2 to mode_ecmchar::@3 [phi:mode_ecmchar::@2->mode_ecmchar::@3]
  b3_from_b2:
  //SEG1516 [813] phi (byte*) mode_ecmchar::ch#2 = (byte*) mode_ecmchar::ch#3 [phi:mode_ecmchar::@2->mode_ecmchar::@3#0] -- register_copy 
  //SEG1517 [813] phi (byte*) mode_ecmchar::col#2 = (byte*) mode_ecmchar::col#3 [phi:mode_ecmchar::@2->mode_ecmchar::@3#1] -- register_copy 
  //SEG1518 [813] phi (byte) mode_ecmchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_ecmchar::@2->mode_ecmchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta cx
    jmp b3
  //SEG1519 [813] phi from mode_ecmchar::@3 to mode_ecmchar::@3 [phi:mode_ecmchar::@3->mode_ecmchar::@3]
  b3_from_b3:
  //SEG1520 [813] phi (byte*) mode_ecmchar::ch#2 = (byte*) mode_ecmchar::ch#1 [phi:mode_ecmchar::@3->mode_ecmchar::@3#0] -- register_copy 
  //SEG1521 [813] phi (byte*) mode_ecmchar::col#2 = (byte*) mode_ecmchar::col#1 [phi:mode_ecmchar::@3->mode_ecmchar::@3#1] -- register_copy 
  //SEG1522 [813] phi (byte) mode_ecmchar::cx#2 = (byte) mode_ecmchar::cx#1 [phi:mode_ecmchar::@3->mode_ecmchar::@3#2] -- register_copy 
    jmp b3
  //SEG1523 mode_ecmchar::@3
  b3:
  //SEG1524 [814] (byte~) mode_ecmchar::$25 ← (byte) mode_ecmchar::cx#2 + (byte) mode_ecmchar::cy#4 -- vbuz1=vbuz2_plus_vbuz3 
    lda cx
    clc
    adc cy
    sta _25
  //SEG1525 [815] (byte~) mode_ecmchar::$26 ← (byte~) mode_ecmchar::$25 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and _25
    sta _26
  //SEG1526 [816] *((byte*) mode_ecmchar::col#2) ← (byte~) mode_ecmchar::$26 -- _deref_pbuz1=vbuz2 
    lda _26
    ldy #0
    sta (col),y
  //SEG1527 [817] (byte*) mode_ecmchar::col#1 ← ++ (byte*) mode_ecmchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG1528 [818] (byte~) mode_ecmchar::$27 ← (byte) mode_ecmchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cy
    sta _27
  //SEG1529 [819] (byte~) mode_ecmchar::$28 ← (byte~) mode_ecmchar::$27 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_rol_4 
    lda _27
    asl
    asl
    asl
    asl
    sta _28
  //SEG1530 [820] (byte~) mode_ecmchar::$29 ← (byte) mode_ecmchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cx
    sta _29
  //SEG1531 [821] (byte~) mode_ecmchar::$30 ← (byte~) mode_ecmchar::$28 | (byte~) mode_ecmchar::$29 -- vbuz1=vbuz2_bor_vbuz3 
    lda _28
    ora _29
    sta _30
  //SEG1532 [822] *((byte*) mode_ecmchar::ch#2) ← (byte~) mode_ecmchar::$30 -- _deref_pbuz1=vbuz2 
    lda _30
    ldy #0
    sta (ch),y
  //SEG1533 [823] (byte*) mode_ecmchar::ch#1 ← ++ (byte*) mode_ecmchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1534 [824] (byte) mode_ecmchar::cx#1 ← ++ (byte) mode_ecmchar::cx#2 -- vbuz1=_inc_vbuz1 
    inc cx
  //SEG1535 [825] if((byte) mode_ecmchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_ecmchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda cx
    cmp #$28
    bne b3_from_b3
    jmp b5
  //SEG1536 mode_ecmchar::@5
  b5:
  //SEG1537 [826] (byte) mode_ecmchar::cy#1 ← ++ (byte) mode_ecmchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1538 [827] if((byte) mode_ecmchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_ecmchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b5
  //SEG1539 [828] phi from mode_ecmchar::@5 to mode_ecmchar::@6 [phi:mode_ecmchar::@5->mode_ecmchar::@6]
  b6_from_b5:
    jmp b6
  //SEG1540 mode_ecmchar::@6
  b6:
  //SEG1541 [829] call mode_ctrl 
  //SEG1542 [155] phi from mode_ecmchar::@6 to mode_ctrl [phi:mode_ecmchar::@6->mode_ctrl]
  mode_ctrl_from_b6:
  //SEG1543 [155] phi (byte) dtv_control#145 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_ecmchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #0
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG1544 mode_ecmchar::@return
  breturn:
  //SEG1545 [830] return 
    rts
}
//SEG1546 mode_stdchar
// Standard Character Mode (LINEAR/HICOL/CHUNK/COLDIS/ECM/MCM/BMM = 0)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
// Pixel Shifter (1)
// - 0: 4bpp BgColor0[3:0]
// - 1: 4bpp ColorData[3:0]
mode_stdchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $d800
    .label _24 = $121
    .label _25 = $122
    .label _26 = $123
    .label _27 = $124
    .label _28 = $125
    .label _29 = $126
    .label i = $92
    .label col = $95
    .label ch = $97
    .label cx = $94
    .label cy = $93
  //SEG1547 [831] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_stdchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG1548 [832] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
  //SEG1549 [833] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG1550 [834] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_CONTROL
  //SEG1551 [835] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG1552 [836] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_stdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG1553 [837] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG1554 [838] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG1555 [839] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_stdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_stdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG1556 [840] phi from mode_stdchar to mode_stdchar::@1 [phi:mode_stdchar->mode_stdchar::@1]
  b1_from_mode_stdchar:
  //SEG1557 [840] phi (byte) mode_stdchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdchar->mode_stdchar::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // DTV Palette - default
  //SEG1558 [840] phi from mode_stdchar::@1 to mode_stdchar::@1 [phi:mode_stdchar::@1->mode_stdchar::@1]
  b1_from_b1:
  //SEG1559 [840] phi (byte) mode_stdchar::i#2 = (byte) mode_stdchar::i#1 [phi:mode_stdchar::@1->mode_stdchar::@1#0] -- register_copy 
    jmp b1
  //SEG1560 mode_stdchar::@1
  b1:
  //SEG1561 [841] *((const byte*) DTV_PALETTE#0 + (byte) mode_stdchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_stdchar::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy i
    lda DTV_PALETTE_DEFAULT,y
    sta DTV_PALETTE,y
  //SEG1562 [842] (byte) mode_stdchar::i#1 ← ++ (byte) mode_stdchar::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG1563 [843] if((byte) mode_stdchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_stdchar::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b1
    jmp b4
  //SEG1564 mode_stdchar::@4
  b4:
  //SEG1565 [844] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BGCOL
  //SEG1566 [845] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
  //SEG1567 [846] phi from mode_stdchar::@4 to mode_stdchar::@2 [phi:mode_stdchar::@4->mode_stdchar::@2]
  b2_from_b4:
  //SEG1568 [846] phi (byte*) mode_stdchar::ch#3 = (const byte*) mode_stdchar::SCREEN#0 [phi:mode_stdchar::@4->mode_stdchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG1569 [846] phi (byte*) mode_stdchar::col#3 = (const byte*) mode_stdchar::COLORS#0 [phi:mode_stdchar::@4->mode_stdchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG1570 [846] phi (byte) mode_stdchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdchar::@4->mode_stdchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG1571 [846] phi from mode_stdchar::@5 to mode_stdchar::@2 [phi:mode_stdchar::@5->mode_stdchar::@2]
  b2_from_b5:
  //SEG1572 [846] phi (byte*) mode_stdchar::ch#3 = (byte*) mode_stdchar::ch#1 [phi:mode_stdchar::@5->mode_stdchar::@2#0] -- register_copy 
  //SEG1573 [846] phi (byte*) mode_stdchar::col#3 = (byte*) mode_stdchar::col#1 [phi:mode_stdchar::@5->mode_stdchar::@2#1] -- register_copy 
  //SEG1574 [846] phi (byte) mode_stdchar::cy#4 = (byte) mode_stdchar::cy#1 [phi:mode_stdchar::@5->mode_stdchar::@2#2] -- register_copy 
    jmp b2
  //SEG1575 mode_stdchar::@2
  b2:
  //SEG1576 [847] phi from mode_stdchar::@2 to mode_stdchar::@3 [phi:mode_stdchar::@2->mode_stdchar::@3]
  b3_from_b2:
  //SEG1577 [847] phi (byte*) mode_stdchar::ch#2 = (byte*) mode_stdchar::ch#3 [phi:mode_stdchar::@2->mode_stdchar::@3#0] -- register_copy 
  //SEG1578 [847] phi (byte*) mode_stdchar::col#2 = (byte*) mode_stdchar::col#3 [phi:mode_stdchar::@2->mode_stdchar::@3#1] -- register_copy 
  //SEG1579 [847] phi (byte) mode_stdchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdchar::@2->mode_stdchar::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta cx
    jmp b3
  //SEG1580 [847] phi from mode_stdchar::@3 to mode_stdchar::@3 [phi:mode_stdchar::@3->mode_stdchar::@3]
  b3_from_b3:
  //SEG1581 [847] phi (byte*) mode_stdchar::ch#2 = (byte*) mode_stdchar::ch#1 [phi:mode_stdchar::@3->mode_stdchar::@3#0] -- register_copy 
  //SEG1582 [847] phi (byte*) mode_stdchar::col#2 = (byte*) mode_stdchar::col#1 [phi:mode_stdchar::@3->mode_stdchar::@3#1] -- register_copy 
  //SEG1583 [847] phi (byte) mode_stdchar::cx#2 = (byte) mode_stdchar::cx#1 [phi:mode_stdchar::@3->mode_stdchar::@3#2] -- register_copy 
    jmp b3
  //SEG1584 mode_stdchar::@3
  b3:
  //SEG1585 [848] (byte~) mode_stdchar::$24 ← (byte) mode_stdchar::cx#2 + (byte) mode_stdchar::cy#4 -- vbuz1=vbuz2_plus_vbuz3 
    lda cx
    clc
    adc cy
    sta _24
  //SEG1586 [849] (byte~) mode_stdchar::$25 ← (byte~) mode_stdchar::$24 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and _24
    sta _25
  //SEG1587 [850] *((byte*) mode_stdchar::col#2) ← (byte~) mode_stdchar::$25 -- _deref_pbuz1=vbuz2 
    lda _25
    ldy #0
    sta (col),y
  //SEG1588 [851] (byte*) mode_stdchar::col#1 ← ++ (byte*) mode_stdchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG1589 [852] (byte~) mode_stdchar::$26 ← (byte) mode_stdchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cy
    sta _26
  //SEG1590 [853] (byte~) mode_stdchar::$27 ← (byte~) mode_stdchar::$26 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_rol_4 
    lda _26
    asl
    asl
    asl
    asl
    sta _27
  //SEG1591 [854] (byte~) mode_stdchar::$28 ← (byte) mode_stdchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cx
    sta _28
  //SEG1592 [855] (byte~) mode_stdchar::$29 ← (byte~) mode_stdchar::$27 | (byte~) mode_stdchar::$28 -- vbuz1=vbuz2_bor_vbuz3 
    lda _27
    ora _28
    sta _29
  //SEG1593 [856] *((byte*) mode_stdchar::ch#2) ← (byte~) mode_stdchar::$29 -- _deref_pbuz1=vbuz2 
    lda _29
    ldy #0
    sta (ch),y
  //SEG1594 [857] (byte*) mode_stdchar::ch#1 ← ++ (byte*) mode_stdchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1595 [858] (byte) mode_stdchar::cx#1 ← ++ (byte) mode_stdchar::cx#2 -- vbuz1=_inc_vbuz1 
    inc cx
  //SEG1596 [859] if((byte) mode_stdchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_stdchar::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda cx
    cmp #$28
    bne b3_from_b3
    jmp b5
  //SEG1597 mode_stdchar::@5
  b5:
  //SEG1598 [860] (byte) mode_stdchar::cy#1 ← ++ (byte) mode_stdchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1599 [861] if((byte) mode_stdchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_stdchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b5
  //SEG1600 [862] phi from mode_stdchar::@5 to mode_stdchar::@6 [phi:mode_stdchar::@5->mode_stdchar::@6]
  b6_from_b5:
    jmp b6
  //SEG1601 mode_stdchar::@6
  b6:
  //SEG1602 [863] call mode_ctrl 
  //SEG1603 [155] phi from mode_stdchar::@6 to mode_ctrl [phi:mode_stdchar::@6->mode_ctrl]
  mode_ctrl_from_b6:
  //SEG1604 [155] phi (byte) dtv_control#145 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #0
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG1605 mode_stdchar::@return
  breturn:
  //SEG1606 [864] return 
    rts
}
//SEG1607 print_str_lines
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
// print_str_lines(byte* zeropage($99) str)
print_str_lines: {
    .label ch = $127
    .label str = $99
  //SEG1608 [866] phi from print_str_lines to print_str_lines::@1 [phi:print_str_lines->print_str_lines::@1]
  b1_from_print_str_lines:
  //SEG1609 [866] phi (byte*) print_line_cursor#17 = (const byte*) menu::SCREEN#0 [phi:print_str_lines->print_str_lines::@1#0] -- pbuz1=pbuc1 
    lda #<menu.SCREEN
    sta print_line_cursor
    lda #>menu.SCREEN
    sta print_line_cursor+1
  //SEG1610 [866] phi (byte*) print_char_cursor#19 = (const byte*) menu::SCREEN#0 [phi:print_str_lines->print_str_lines::@1#1] -- pbuz1=pbuc1 
    lda #<menu.SCREEN
    sta print_char_cursor
    lda #>menu.SCREEN
    sta print_char_cursor+1
  //SEG1611 [866] phi (byte*) print_str_lines::str#2 = (const byte[]) MENU_TEXT#0 [phi:print_str_lines->print_str_lines::@1#2] -- pbuz1=pbuc1 
    lda #<MENU_TEXT
    sta str
    lda #>MENU_TEXT
    sta str+1
    jmp b1
  //SEG1612 print_str_lines::@1
  b1:
  //SEG1613 [867] if(*((byte*) print_str_lines::str#2)!=(byte) '@') goto print_str_lines::@4 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b4_from_b1
    jmp breturn
  //SEG1614 print_str_lines::@return
  breturn:
  //SEG1615 [868] return 
    rts
  //SEG1616 [869] phi from print_str_lines::@1 print_str_lines::@5 to print_str_lines::@4 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4]
  b4_from_b1:
  b4_from_b5:
  //SEG1617 [869] phi (byte*) print_char_cursor#17 = (byte*) print_char_cursor#19 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4#0] -- register_copy 
  //SEG1618 [869] phi (byte*) print_str_lines::str#3 = (byte*) print_str_lines::str#2 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4#1] -- register_copy 
    jmp b4
  //SEG1619 print_str_lines::@4
  b4:
  //SEG1620 [870] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#3) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta ch
  //SEG1621 [871] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#3 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG1622 [872] if((byte) print_str_lines::ch#0==(byte) '@') goto print_str_lines::@5 -- vbuz1_eq_vbuc1_then_la1 
    lda ch
    cmp #'@'
    beq b5_from_b4
    jmp b8
  //SEG1623 print_str_lines::@8
  b8:
  //SEG1624 [873] *((byte*) print_char_cursor#17) ← (byte) print_str_lines::ch#0 -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (print_char_cursor),y
  //SEG1625 [874] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#17 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG1626 [875] phi from print_str_lines::@4 print_str_lines::@8 to print_str_lines::@5 [phi:print_str_lines::@4/print_str_lines::@8->print_str_lines::@5]
  b5_from_b4:
  b5_from_b8:
  //SEG1627 [875] phi (byte*) print_char_cursor#32 = (byte*) print_char_cursor#17 [phi:print_str_lines::@4/print_str_lines::@8->print_str_lines::@5#0] -- register_copy 
    jmp b5
  //SEG1628 print_str_lines::@5
  b5:
  //SEG1629 [876] if((byte) print_str_lines::ch#0!=(byte) '@') goto print_str_lines::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda ch
    cmp #'@'
    bne b4_from_b5
  //SEG1630 [877] phi from print_str_lines::@5 to print_str_lines::@9 [phi:print_str_lines::@5->print_str_lines::@9]
  b9_from_b5:
    jmp b9
  //SEG1631 print_str_lines::@9
  b9:
  //SEG1632 [878] call print_ln 
  //SEG1633 [880] phi from print_str_lines::@9 to print_ln [phi:print_str_lines::@9->print_ln]
  print_ln_from_b9:
    jsr print_ln
  //SEG1634 [879] (byte*~) print_char_cursor#103 ← (byte*) print_line_cursor#19 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG1635 [866] phi from print_str_lines::@9 to print_str_lines::@1 [phi:print_str_lines::@9->print_str_lines::@1]
  b1_from_b9:
  //SEG1636 [866] phi (byte*) print_line_cursor#17 = (byte*) print_line_cursor#19 [phi:print_str_lines::@9->print_str_lines::@1#0] -- register_copy 
  //SEG1637 [866] phi (byte*) print_char_cursor#19 = (byte*~) print_char_cursor#103 [phi:print_str_lines::@9->print_str_lines::@1#1] -- register_copy 
  //SEG1638 [866] phi (byte*) print_str_lines::str#2 = (byte*) print_str_lines::str#0 [phi:print_str_lines::@9->print_str_lines::@1#2] -- register_copy 
    jmp b1
}
//SEG1639 print_ln
// Print a newline
print_ln: {
  //SEG1640 [881] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG1641 [881] phi (byte*) print_line_cursor#18 = (byte*) print_line_cursor#17 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG1642 print_ln::@1
  b1:
  //SEG1643 [882] (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#18 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG1644 [883] if((byte*) print_line_cursor#19<(byte*) print_char_cursor#32) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG1645 print_ln::@return
  breturn:
  //SEG1646 [884] return 
    rts
}
//SEG1647 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $9f
  //SEG1648 [886] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG1649 [886] phi (byte*) print_cls::sc#2 = (const byte*) menu::SCREEN#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<menu.SCREEN
    sta sc
    lda #>menu.SCREEN
    sta sc+1
    jmp b1
  //SEG1650 [886] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG1651 [886] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG1652 print_cls::@1
  b1:
  //SEG1653 [887] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG1654 [888] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG1655 [889] if((byte*) print_cls::sc#1!=(const byte*) menu::SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>menu.SCREEN+$3e8
    bne b1_from_b1
    lda sc
    cmp #<menu.SCREEN+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG1656 print_cls::@return
  breturn:
  //SEG1657 [890] return 
    rts
}
//SEG1658 print_set_screen
// Set the screen to print on. Also resets current line/char cursor.
print_set_screen: {
    jmp breturn
  //SEG1659 print_set_screen::@return
  breturn:
  //SEG1660 [892] return 
    rts
}
  // Default vallues for the palette
  DTV_PALETTE_DEFAULT: .byte 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Tables for the plotter - initialized by calling bitmap_draw_init();
  bitmap_plot_xlo: .fill $100, 0
  bitmap_plot_xhi: .fill $100, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  MENU_TEXT: .text "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"+"4. Standard Bitmap           (V) 0000100@"+"5. Multicolor Bitmap         (V) 0000110@"+"6. High Color Standard Char  (H) 0001000@"+"7. High Extended Color Char  (H) 0001001@"+"8. High Multicolor Char      (H) 0001010@"+"9. High Multicolor Bitmap    (H) 0001110@"+"a. Sixs Fred 2               (D) 0010111@"+"b. Two Plane Bitmap          (D) 0011101@"+"c. Sixs Fred (2 Plane MC BM) (D) 0011111@"+"d. 8bpp Pixel Cell           (D) 0111011@"+"e. Chunky 8bpp Bitmap        (D) 1111011@"+"----------------------------------------@"+"    (V) vicII (H) vicII+hicol (D) c64dtv@"+"@"

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp ZP_BYTE:273 [ bitmap_init::$7 ] has ALU potential.
Statement [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) menu::CHARSET#0/(dword/signed dword) $10000 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [15] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) menu::CHARSET#0/(word/signed word/dword/signed dword) $4000 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [16] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [17] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [18] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) menu::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) menu::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [20] *((const byte*) DTV_PALETTE#0 + (byte) menu::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) menu::i#2) [ menu::i#2 ] ( main:2::menu:9 [ menu::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ menu::i#2 menu::i#1 ]
Statement [24] *((byte*) menu::c#2) ← (const byte) LIGHT_GREEN#0 [ menu::c#2 ] ( main:2::menu:9 [ menu::c#2 ] ) always clobbers reg byte a reg byte y 
Statement [26] if((byte*) menu::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) $3e8) goto menu::@2 [ menu::c#1 ] ( main:2::menu:9 [ menu::c#1 ] ) always clobbers reg byte a 
Statement [27] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [28] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [119] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_COLORRAM_OFF#0 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [120] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [121] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [122] *((const byte*) DTV_PLANEB_START_LO#0) ← <<(const dword) mode_8bppchunkybmm::PLANEB#0 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [123] *((const byte*) DTV_PLANEB_START_MI#0) ← ><(const dword) mode_8bppchunkybmm::PLANEB#0 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [124] *((const byte*) DTV_PLANEB_START_HI#0) ← <>(const dword) mode_8bppchunkybmm::PLANEB#0 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [125] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 8 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [126] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [127] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [128] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [137] if((byte*) mode_8bppchunkybmm::gfxb#3!=(word/dword/signed dword) $8000) goto mode_8bppchunkybmm::@4 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxbCpuBank#4 ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxbCpuBank#4 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ]
Statement [142] (word~) mode_8bppchunkybmm::$23 ← (word) mode_8bppchunkybmm::x#2 + (byte) mode_8bppchunkybmm::y#6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::$23 ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::$23 ] ) always clobbers reg byte a 
Statement [143] (byte) mode_8bppchunkybmm::c#0 ← ((byte)) (word~) mode_8bppchunkybmm::$23 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::c#0 ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::c#0 ] ) always clobbers reg byte a 
Statement [144] *((byte*) mode_8bppchunkybmm::gfxb#4) ← (byte) mode_8bppchunkybmm::c#0 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:9 [ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ]
Statement [147] if((word) mode_8bppchunkybmm::x#1!=(word/signed word/dword/signed dword) $140) goto mode_8bppchunkybmm::@3 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxb#1 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#1 ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxb#1 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#1 ] ) always clobbers reg byte a 
Statement [157] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto mode_ctrl::@4 [ dtv_control#114 ] ( main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153 [ dtv_control#114 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280 [ dtv_control#114 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333 [ dtv_control#114 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391 [ dtv_control#114 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448 [ dtv_control#114 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482 [ dtv_control#114 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517 [ dtv_control#114 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549 [ dtv_control#114 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590 [ dtv_control#114 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792 [ dtv_control#114 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829 [ dtv_control#114 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863 [ dtv_control#114 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:12 [ dtv_control#114 dtv_control#145 dtv_control#17 ]
Statement [169] (byte) mode_ctrl::ctrl#1 ← (byte) mode_ctrl::ctrl#0 | (const byte) DTV_LINEAR#0 [ dtv_control#114 mode_ctrl::ctrl#1 ] ( main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863 [ dtv_control#114 mode_ctrl::ctrl#1 ] ) always clobbers reg byte a 
Statement [175] (byte) mode_ctrl::ctrl#2 ← (byte) mode_ctrl::ctrl#17 | (const byte) DTV_HIGHCOLOR#0 [ dtv_control#114 mode_ctrl::ctrl#2 ] ( main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863 [ dtv_control#114 mode_ctrl::ctrl#2 ] ) always clobbers reg byte a 
Statement [181] (byte) mode_ctrl::ctrl#3 ← (byte) mode_ctrl::ctrl#10 | (const byte) DTV_OVERSCAN#0 [ dtv_control#114 mode_ctrl::ctrl#3 ] ( main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863 [ dtv_control#114 mode_ctrl::ctrl#3 ] ) always clobbers reg byte a 
Statement [187] (byte) mode_ctrl::ctrl#4 ← (byte) mode_ctrl::ctrl#11 | (const byte) DTV_BORDER_OFF#0 [ dtv_control#114 mode_ctrl::ctrl#4 ] ( main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863 [ dtv_control#114 mode_ctrl::ctrl#4 ] ) always clobbers reg byte a 
Statement [193] (byte) mode_ctrl::ctrl#5 ← (byte) mode_ctrl::ctrl#12 | (const byte) DTV_CHUNKY#0 [ dtv_control#114 mode_ctrl::ctrl#5 ] ( main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863 [ dtv_control#114 mode_ctrl::ctrl#5 ] ) always clobbers reg byte a 
Statement [199] (byte) mode_ctrl::ctrl#6 ← (byte) mode_ctrl::ctrl#13 | (const byte) DTV_COLORRAM_OFF#0 [ dtv_control#114 mode_ctrl::ctrl#6 ] ( main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863 [ dtv_control#114 mode_ctrl::ctrl#6 ] ) always clobbers reg byte a 
Statement [212] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#20 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] ( main:2::menu:9::keyboard_key_pressed:35 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:43 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:50 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:57 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:64 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:71 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:78 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:85 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:92 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:99 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:106 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:113 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:14 [ keyboard_key_pressed::key#20 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:13 [ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ]
Statement [213] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#20 >> (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ( main:2::menu:9::keyboard_key_pressed:35 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:43 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:50 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:57 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:64 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:71 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:78 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:85 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:92 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:99 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:106 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:113 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:204 [ keyboard_key_pressed::colidx#0 ]
Statement [218] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0) [ keyboard_key_pressed::return#0 ] ( main:2::menu:9::keyboard_key_pressed:35 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:43 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:50 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:57 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:64 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:71 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:78 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:85 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:92 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:99 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:106 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:113 [ keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] ) always clobbers reg byte a 
Statement [220] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:2::menu:9::keyboard_key_pressed:35::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:43::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:50::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:57::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:64::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:71::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:78::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:85::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:92::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:99::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:106::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:113::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] ) always clobbers reg byte a 
Statement [221] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:2::menu:9::keyboard_key_pressed:35::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:43::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:50::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:57::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:64::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:71::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:78::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:85::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:92::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:99::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:106::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:113::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Statement asm { .byte$32,$dd lda$ff .byte$32,$00  } always clobbers reg byte a 
Statement [227] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [228] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [229] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [230] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_8bpppixelcell::PLANEA#0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [231] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_8bpppixelcell::PLANEA#0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [232] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [233] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [234] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [235] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [236] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_8bpppixelcell::PLANEB#0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [237] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_8bpppixelcell::PLANEB#0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [238] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [239] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [240] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [241] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [242] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [249] (byte~) mode_8bpppixelcell::$13 ← (byte) mode_8bpppixelcell::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$13 ] ( main:2::menu:9::mode_8bpppixelcell:111 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$13 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:17 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:18 [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ]
Statement [250] (byte~) mode_8bpppixelcell::$14 ← (byte~) mode_8bpppixelcell::$13 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$14 ] ( main:2::menu:9::mode_8bpppixelcell:111 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$14 ] ) always clobbers reg byte a 
Statement [251] (byte~) mode_8bpppixelcell::$15 ← (byte) mode_8bpppixelcell::ax#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$14 mode_8bpppixelcell::$15 ] ( main:2::menu:9::mode_8bpppixelcell:111 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$14 mode_8bpppixelcell::$15 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:212 [ mode_8bpppixelcell::$14 ]
Statement [253] *((byte*) mode_8bpppixelcell::gfxa#2) ← (byte~) mode_8bpppixelcell::$16 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 ] ( main:2::menu:9::mode_8bpppixelcell:111 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:17 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:18 [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ]
Statement [259] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [262] (byte) mode_8bpppixelcell::bits#0 ← *((byte*) mode_8bpppixelcell::chargen#2) [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::col#5 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#0 ] ( main:2::menu:9::mode_8bpppixelcell:111 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::col#5 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:21 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:21 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:28 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:28 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ]
Statement [265] (byte~) mode_8bpppixelcell::$19 ← (byte) mode_8bpppixelcell::bits#2 & (byte/word/signed word/dword/signed dword) $80 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#1 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::col#2 mode_8bpppixelcell::cp#2 mode_8bpppixelcell::$19 ] ( main:2::menu:9::mode_8bpppixelcell:111 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#1 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::col#2 mode_8bpppixelcell::cp#2 mode_8bpppixelcell::$19 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:25 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#0 mode_8bpppixelcell::bits#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:29 [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ]
Statement [269] *((byte*) mode_8bpppixelcell::gfxb#2) ← (byte) mode_8bpppixelcell::c#2 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#1 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::col#2 mode_8bpppixelcell::cp#2 ] ( main:2::menu:9::mode_8bpppixelcell:111 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#1 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::col#2 mode_8bpppixelcell::cp#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:25 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#0 mode_8bpppixelcell::bits#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:29 [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ]
Statement [279] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [282] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [283] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [284] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [285] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_sixsfred::PLANEA#0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [286] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_sixsfred::PLANEA#0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [287] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [288] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [289] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [290] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [291] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_sixsfred::PLANEB#0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [292] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_sixsfred::PLANEB#0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [293] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [294] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [295] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [296] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [297] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_sixsfred::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [298] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_sixsfred::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [303] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [306] (byte~) mode_sixsfred::$16 ← (byte) mode_sixsfred::cx#2 + (byte) mode_sixsfred::cy#4 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 mode_sixsfred::$16 ] ( main:2::menu:9::mode_sixsfred:104 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 mode_sixsfred::$16 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:32 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:33 [ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ]
Statement [307] (byte~) mode_sixsfred::$17 ← (byte~) mode_sixsfred::$16 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 mode_sixsfred::$17 ] ( main:2::menu:9::mode_sixsfred:104 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 mode_sixsfred::$17 ] ) always clobbers reg byte a 
Statement [308] *((byte*) mode_sixsfred::col#2) ← (byte~) mode_sixsfred::$17 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 ] ( main:2::menu:9::mode_sixsfred:104 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:32 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:33 [ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ]
Statement [316] (byte~) mode_sixsfred::$20 ← (byte) mode_sixsfred::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 mode_sixsfred::$20 ] ( main:2::menu:9::mode_sixsfred:104 [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 mode_sixsfred::$20 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:36 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:39 [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ]
Statement [317] (byte) mode_sixsfred::row#0 ← (byte~) mode_sixsfred::$20 & (byte/signed byte/word/signed word/dword/signed dword) 3 [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 mode_sixsfred::row#0 ] ( main:2::menu:9::mode_sixsfred:104 [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 mode_sixsfred::row#0 ] ) always clobbers reg byte a 
Statement [318] *((byte*) mode_sixsfred::gfxa#2) ← *((const byte[]) mode_sixsfred::row_bitmask#0 + (byte) mode_sixsfred::row#0) [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 ] ( main:2::menu:9::mode_sixsfred:104 [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:36 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:39 [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ]
Statement [326] *((byte*) mode_sixsfred::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $1b [ mode_sixsfred::by#4 mode_sixsfred::gfxb#2 mode_sixsfred::bx#2 ] ( main:2::menu:9::mode_sixsfred:104 [ mode_sixsfred::by#4 mode_sixsfred::gfxb#2 mode_sixsfred::bx#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:40 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:40 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:43 [ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:43 [ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ]
Statement [335] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [336] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [337] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [338] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_twoplanebitmap::PLANEA#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [339] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_twoplanebitmap::PLANEA#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [340] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [341] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [342] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [343] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [344] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_twoplanebitmap::PLANEB#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [345] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_twoplanebitmap::PLANEB#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [346] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [347] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [348] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [349] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [350] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_twoplanebitmap::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [351] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_twoplanebitmap::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [356] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [357] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $70 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [358] *((const byte*) BGCOL2#0) ← (byte/word/signed word/dword/signed dword) $d4 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [361] (byte~) mode_twoplanebitmap::$15 ← (byte) mode_twoplanebitmap::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$15 ] ( main:2::menu:9::mode_twoplanebitmap:97 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$15 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:45 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:46 [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ]
Statement [362] (byte~) mode_twoplanebitmap::$16 ← (byte~) mode_twoplanebitmap::$15 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$16 ] ( main:2::menu:9::mode_twoplanebitmap:97 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$16 ] ) always clobbers reg byte a 
Statement [363] (byte~) mode_twoplanebitmap::$17 ← (byte) mode_twoplanebitmap::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$16 mode_twoplanebitmap::$17 ] ( main:2::menu:9::mode_twoplanebitmap:97 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$16 mode_twoplanebitmap::$17 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:221 [ mode_twoplanebitmap::$16 ]
Statement [365] *((byte*) mode_twoplanebitmap::col#2) ← (byte~) mode_twoplanebitmap::$18 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 ] ( main:2::menu:9::mode_twoplanebitmap:97 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:45 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:46 [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ]
Statement [373] (byte~) mode_twoplanebitmap::$21 ← (byte) mode_twoplanebitmap::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$21 ] ( main:2::menu:9::mode_twoplanebitmap:97 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$21 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:49 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:52 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
Statement [375] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/word/signed word/dword/signed dword) $ff [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:97 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:49 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:52 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
Statement [384] *((byte*) mode_twoplanebitmap::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ( main:2::menu:9::mode_twoplanebitmap:97 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:53 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:53 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:56 [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:56 [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
Statement [393] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:97 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [395] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_LINEAR#0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [396] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [397] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [398] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_sixsfred2::PLANEA#0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [399] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_sixsfred2::PLANEA#0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [400] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [401] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [402] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [403] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [404] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_sixsfred2::PLANEB#0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [405] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_sixsfred2::PLANEB#0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [406] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [407] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [408] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [409] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [410] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_sixsfred2::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [411] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_sixsfred2::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [416] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [419] (byte~) mode_sixsfred2::$14 ← (byte) mode_sixsfred2::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 3 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$14 ] ( main:2::menu:9::mode_sixsfred2:90 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$14 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:58 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:59 [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ]
Statement [420] (byte~) mode_sixsfred2::$15 ← (byte~) mode_sixsfred2::$14 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$15 ] ( main:2::menu:9::mode_sixsfred2:90 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$15 ] ) always clobbers reg byte a 
Statement [421] (byte~) mode_sixsfred2::$16 ← (byte) mode_sixsfred2::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 3 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$15 mode_sixsfred2::$16 ] ( main:2::menu:9::mode_sixsfred2:90 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$15 mode_sixsfred2::$16 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:226 [ mode_sixsfred2::$15 ]
Statement [423] *((byte*) mode_sixsfred2::col#2) ← (byte~) mode_sixsfred2::$17 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 ] ( main:2::menu:9::mode_sixsfred2:90 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:58 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:59 [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ]
Statement [431] (byte~) mode_sixsfred2::$20 ← (byte) mode_sixsfred2::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 mode_sixsfred2::$20 ] ( main:2::menu:9::mode_sixsfred2:90 [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 mode_sixsfred2::$20 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:62 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:65 [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ]
Statement [432] (byte) mode_sixsfred2::row#0 ← (byte~) mode_sixsfred2::$20 & (byte/signed byte/word/signed word/dword/signed dword) 3 [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 mode_sixsfred2::row#0 ] ( main:2::menu:9::mode_sixsfred2:90 [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 mode_sixsfred2::row#0 ] ) always clobbers reg byte a 
Statement [433] *((byte*) mode_sixsfred2::gfxa#2) ← *((const byte[]) mode_sixsfred2::row_bitmask#0 + (byte) mode_sixsfred2::row#0) [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 ] ( main:2::menu:9::mode_sixsfred2:90 [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:62 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:65 [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ]
Statement [441] *((byte*) mode_sixsfred2::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $1b [ mode_sixsfred2::by#4 mode_sixsfred2::gfxb#2 mode_sixsfred2::bx#2 ] ( main:2::menu:9::mode_sixsfred2:90 [ mode_sixsfred2::by#4 mode_sixsfred2::gfxb#2 mode_sixsfred2::bx#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:66 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:66 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:69 [ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:69 [ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ]
Statement [450] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolmcchar::CHARSET#0/(dword/signed dword) $10000 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [451] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [452] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [453] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [454] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [455] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolmcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [456] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [457] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [458] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolmcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolmcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [463] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [464] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $50 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [465] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) $54 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [466] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) $58 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [469] (byte~) mode_hicolmcchar::$25 ← (byte) mode_hicolmcchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$25 ] ( main:2::menu:9::mode_hicolmcchar:83 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$25 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:71 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:72 [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ]
Statement [470] (byte~) mode_hicolmcchar::$26 ← (byte~) mode_hicolmcchar::$25 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$26 ] ( main:2::menu:9::mode_hicolmcchar:83 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$26 ] ) always clobbers reg byte a 
Statement [471] (byte~) mode_hicolmcchar::$27 ← (byte) mode_hicolmcchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$26 mode_hicolmcchar::$27 ] ( main:2::menu:9::mode_hicolmcchar:83 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$26 mode_hicolmcchar::$27 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:232 [ mode_hicolmcchar::$26 ]
Statement [473] *((byte*) mode_hicolmcchar::col#2) ← (byte) mode_hicolmcchar::v#0 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::v#0 ] ( main:2::menu:9::mode_hicolmcchar:83 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::v#0 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:71 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:72 [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:234 [ mode_hicolmcchar::v#0 ]
Statement [475] *((byte*) mode_hicolmcchar::ch#2) ← (byte) mode_hicolmcchar::v#0 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::col#1 mode_hicolmcchar::cx#2 mode_hicolmcchar::ch#2 ] ( main:2::menu:9::mode_hicolmcchar:83 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::col#1 mode_hicolmcchar::cx#2 mode_hicolmcchar::ch#2 ] ) always clobbers reg byte y 
Statement [484] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolecmchar::CHARSET#0/(dword/signed dword) $10000 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [485] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [486] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [487] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [488] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [489] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [490] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(const byte) VIC_ECM#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [491] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [492] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [497] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [498] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $50 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [499] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) $54 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [500] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) $58 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [501] *((const byte*) BGCOL4#0) ← (byte/signed byte/word/signed word/dword/signed dword) $5c [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [504] (byte~) mode_hicolecmchar::$25 ← (byte) mode_hicolecmchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$25 ] ( main:2::menu:9::mode_hicolecmchar:76 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$25 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:78 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:79 [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ]
Statement [505] (byte~) mode_hicolecmchar::$26 ← (byte~) mode_hicolecmchar::$25 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$26 ] ( main:2::menu:9::mode_hicolecmchar:76 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$26 ] ) always clobbers reg byte a 
Statement [506] (byte~) mode_hicolecmchar::$27 ← (byte) mode_hicolecmchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$26 mode_hicolecmchar::$27 ] ( main:2::menu:9::mode_hicolecmchar:76 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$26 mode_hicolecmchar::$27 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:236 [ mode_hicolecmchar::$26 ]
Statement [508] *((byte*) mode_hicolecmchar::col#2) ← (byte) mode_hicolecmchar::v#0 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::v#0 ] ( main:2::menu:9::mode_hicolecmchar:76 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::v#0 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:78 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:79 [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:238 [ mode_hicolecmchar::v#0 ]
Statement [510] *((byte*) mode_hicolecmchar::ch#2) ← (byte) mode_hicolecmchar::v#0 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::col#1 mode_hicolecmchar::cx#2 mode_hicolecmchar::ch#2 ] ( main:2::menu:9::mode_hicolecmchar:76 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::col#1 mode_hicolecmchar::cx#2 mode_hicolecmchar::ch#2 ] ) always clobbers reg byte y 
Statement [519] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolstdchar::CHARSET#0/(dword/signed dword) $10000 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [520] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [521] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [522] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [523] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [524] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolstdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [525] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [526] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [527] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolstdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolstdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [532] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [533] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [536] (byte~) mode_hicolstdchar::$24 ← (byte) mode_hicolstdchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$24 ] ( main:2::menu:9::mode_hicolstdchar:69 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$24 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:85 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:86 [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ]
Statement [537] (byte~) mode_hicolstdchar::$25 ← (byte~) mode_hicolstdchar::$24 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$25 ] ( main:2::menu:9::mode_hicolstdchar:69 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$25 ] ) always clobbers reg byte a 
Statement [538] (byte~) mode_hicolstdchar::$26 ← (byte) mode_hicolstdchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$25 mode_hicolstdchar::$26 ] ( main:2::menu:9::mode_hicolstdchar:69 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$25 mode_hicolstdchar::$26 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:240 [ mode_hicolstdchar::$25 ]
Statement [540] *((byte*) mode_hicolstdchar::col#2) ← (byte) mode_hicolstdchar::v#0 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::v#0 ] ( main:2::menu:9::mode_hicolstdchar:69 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::v#0 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:85 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:86 [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:242 [ mode_hicolstdchar::v#0 ]
Statement [542] *((byte*) mode_hicolstdchar::ch#2) ← (byte) mode_hicolstdchar::v#0 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::col#1 mode_hicolstdchar::cx#2 mode_hicolstdchar::ch#2 ] ( main:2::menu:9::mode_hicolstdchar:69 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::col#1 mode_hicolstdchar::cx#2 mode_hicolstdchar::ch#2 ] ) always clobbers reg byte y 
Statement [551] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_stdbitmap::BITMAP#0/(dword/signed dword) $10000 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [552] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [553] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [554] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_stdbitmap::BITMAP#0/(word/signed word/dword/signed dword) $4000 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [555] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [556] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [557] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_stdbitmap::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_stdbitmap::BITMAP#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [559] *((const byte*) DTV_PALETTE#0 + (byte) mode_stdbitmap::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_stdbitmap::i#2) [ mode_stdbitmap::i#2 ] ( main:2::menu:9::mode_stdbitmap:62 [ mode_stdbitmap::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:91 [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ]
Statement [562] *((const byte*) BGCOL#0) ← (const byte) BLACK#0 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [563] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [566] (byte~) mode_stdbitmap::$19 ← (byte) mode_stdbitmap::cx#2 + (byte) mode_stdbitmap::cy#4 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::$19 ] ( main:2::menu:9::mode_stdbitmap:62 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::$19 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:92 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:93 [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ]
Statement [567] (byte) mode_stdbitmap::col#0 ← (byte~) mode_stdbitmap::$19 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col#0 ] ( main:2::menu:9::mode_stdbitmap:62 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col#0 ] ) always clobbers reg byte a 
Statement [568] (byte) mode_stdbitmap::col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f - (byte) mode_stdbitmap::col#0 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col#0 mode_stdbitmap::col2#0 ] ( main:2::menu:9::mode_stdbitmap:62 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col#0 mode_stdbitmap::col2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:244 [ mode_stdbitmap::col#0 ]
Statement [569] (byte~) mode_stdbitmap::$22 ← (byte) mode_stdbitmap::col#0 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col2#0 mode_stdbitmap::$22 ] ( main:2::menu:9::mode_stdbitmap:62 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col2#0 mode_stdbitmap::$22 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:245 [ mode_stdbitmap::col2#0 ]
Statement [571] *((byte*) mode_stdbitmap::ch#2) ← (byte~) mode_stdbitmap::$23 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 ] ( main:2::menu:9::mode_stdbitmap:62 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:92 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:93 [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ]
Statement [593] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:96 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:248 [ bitmap_line::x0#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:249 [ bitmap_line::x1#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:250 [ bitmap_line::y0#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:251 [ bitmap_line::y1#0 ]
Statement [595] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:252 [ bitmap_line::xd#2 ]
Statement [610] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ) always clobbers reg byte a 
Statement [624] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ) always clobbers reg byte a 
Statement [626] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:255 [ bitmap_line::xd#1 ]
Statement [640] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ) always clobbers reg byte a 
Statement [655] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:609 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:653 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
Statement [661] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:609 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:653 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ) always clobbers reg byte a 
Statement [664] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:609 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:653 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ) always clobbers reg byte a 
Statement [670] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_plot::x#4) [ bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:609::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:653::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:602::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:647::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:623::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:639::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:617::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:633::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:104 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#0 bitmap_line_ydxi::xd#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#0 bitmap_line_ydxi::y1#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Statement [671] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#4) [ bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:609::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:653::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:602::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:647::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:623::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:639::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:617::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:633::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ) always clobbers reg byte a 
Statement [672] (word~) bitmap_plot::$0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 [ bitmap_plot::x#4 bitmap_plot::$0 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:609::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:653::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:602::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:647::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:623::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:639::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:617::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:633::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] ) always clobbers reg byte a 
Statement [673] (byte~) bitmap_plot::$1 ← *((byte*)(word~) bitmap_plot::$0) | *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_plot::x#4) [ bitmap_plot::$0 bitmap_plot::$1 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:609::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:653::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:602::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:647::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:623::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:639::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:617::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:633::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::$0 bitmap_plot::$1 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:96 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#0 bitmap_line_ydxi::xd#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#0 bitmap_line_ydxi::y1#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Statement [674] *((byte*)(word~) bitmap_plot::$0) ← (byte~) bitmap_plot::$1 [ ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:609::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:653::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:602::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:647::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:623::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:639::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:617::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:633::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] ) always clobbers reg byte y 
Statement [677] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:602 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:647 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ) always clobbers reg byte a 
Statement [683] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:602 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:647 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ) always clobbers reg byte a 
Statement [686] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:602 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:647 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ) always clobbers reg byte a 
Statement [692] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:623 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:639 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ) always clobbers reg byte a 
Statement [698] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:623 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:639 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ) always clobbers reg byte a 
Statement [701] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:623 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:639 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ) always clobbers reg byte a 
Statement [707] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:617 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:633 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ) always clobbers reg byte a 
Statement [713] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:617 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:633 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ) always clobbers reg byte a 
Statement [716] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:617 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:633 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ) always clobbers reg byte a 
Statement [721] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_xhi#0) w= *((const byte[$100]) bitmap_plot_xlo#0) [ bitmap_clear::$3 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_clear:580 [ bitmap_clear::$3 ] ) always clobbers reg byte a 
Statement [722] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3 [ bitmap_clear::bitmap#5 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_clear:580 [ bitmap_clear::bitmap#5 ] ) always clobbers reg byte a 
Statement [725] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_clear:580 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Statement [734] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte/word/signed word/dword/signed dword) $f8 [ bitmap_init::x#2 bitmap_init::bits#3 bitmap_init::$0 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_init:578 [ bitmap_init::x#2 bitmap_init::bits#3 bitmap_init::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:127 [ bitmap_init::x#2 bitmap_init::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:128 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Statement [736] *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_init::x#2) ← >(const byte*) mode_stdbitmap::BITMAP#0 [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_init:578 [ bitmap_init::x#2 bitmap_init::bits#3 ] ) always clobbers reg byte a 
Statement [737] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_init:578 [ bitmap_init::x#2 bitmap_init::bits#3 ] ) always clobbers reg byte a 
Statement [744] (byte~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$6 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_init:578 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:129 [ bitmap_init::y#2 bitmap_init::y#1 ]
Statement [750] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$10 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_init:578 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$10 ] ) always clobbers reg byte a 
Statement [752] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_init:578 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ) always clobbers reg byte a 
Statement [758] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_mcchar::CHARSET#0/(dword/signed dword) $10000 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [759] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [760] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [761] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [762] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [763] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_mcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [764] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [765] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [766] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_mcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_mcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [768] *((const byte*) DTV_PALETTE#0 + (byte) mode_mcchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_mcchar::i#2) [ mode_mcchar::i#2 ] ( main:2::menu:9::mode_mcchar:55 [ mode_mcchar::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:132 [ mode_mcchar::i#2 mode_mcchar::i#1 ]
Statement [771] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [772] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [773] *((const byte*) BGCOL2#0) ← (const byte) GREEN#0 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [774] *((const byte*) BGCOL3#0) ← (const byte) BLUE#0 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [777] (byte~) mode_mcchar::$25 ← (byte) mode_mcchar::cx#2 + (byte) mode_mcchar::cy#4 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 mode_mcchar::$25 ] ( main:2::menu:9::mode_mcchar:55 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 mode_mcchar::$25 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:133 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:134 [ mode_mcchar::cx#2 mode_mcchar::cx#1 ]
Statement [778] (byte~) mode_mcchar::$26 ← (byte~) mode_mcchar::$25 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 mode_mcchar::$26 ] ( main:2::menu:9::mode_mcchar:55 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 mode_mcchar::$26 ] ) always clobbers reg byte a 
Statement [779] *((byte*) mode_mcchar::col#2) ← (byte~) mode_mcchar::$26 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 ] ( main:2::menu:9::mode_mcchar:55 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:133 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:134 [ mode_mcchar::cx#2 mode_mcchar::cx#1 ]
Statement [781] (byte~) mode_mcchar::$27 ← (byte) mode_mcchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$27 ] ( main:2::menu:9::mode_mcchar:55 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$27 ] ) always clobbers reg byte a 
Statement [782] (byte~) mode_mcchar::$28 ← (byte~) mode_mcchar::$27 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$28 ] ( main:2::menu:9::mode_mcchar:55 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$28 ] ) always clobbers reg byte a 
Statement [783] (byte~) mode_mcchar::$29 ← (byte) mode_mcchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$28 mode_mcchar::$29 ] ( main:2::menu:9::mode_mcchar:55 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$28 mode_mcchar::$29 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:280 [ mode_mcchar::$28 ]
Statement [785] *((byte*) mode_mcchar::ch#2) ← (byte~) mode_mcchar::$30 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 ] ( main:2::menu:9::mode_mcchar:55 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 ] ) always clobbers reg byte y 
Statement [794] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_ecmchar::CHARSET#0/(dword/signed dword) $10000 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [795] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [796] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [797] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [798] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [799] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_ecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [800] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(const byte) VIC_ECM#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [801] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [802] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_ecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_ecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [804] *((const byte*) DTV_PALETTE#0 + (byte) mode_ecmchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_ecmchar::i#2) [ mode_ecmchar::i#2 ] ( main:2::menu:9::mode_ecmchar:48 [ mode_ecmchar::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:139 [ mode_ecmchar::i#2 mode_ecmchar::i#1 ]
Statement [807] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [808] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [809] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [810] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) 5 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [811] *((const byte*) BGCOL4#0) ← (byte/signed byte/word/signed word/dword/signed dword) 6 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [814] (byte~) mode_ecmchar::$25 ← (byte) mode_ecmchar::cx#2 + (byte) mode_ecmchar::cy#4 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 mode_ecmchar::$25 ] ( main:2::menu:9::mode_ecmchar:48 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 mode_ecmchar::$25 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:140 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:141 [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ]
Statement [815] (byte~) mode_ecmchar::$26 ← (byte~) mode_ecmchar::$25 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 mode_ecmchar::$26 ] ( main:2::menu:9::mode_ecmchar:48 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 mode_ecmchar::$26 ] ) always clobbers reg byte a 
Statement [816] *((byte*) mode_ecmchar::col#2) ← (byte~) mode_ecmchar::$26 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 ] ( main:2::menu:9::mode_ecmchar:48 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:140 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:141 [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ]
Statement [818] (byte~) mode_ecmchar::$27 ← (byte) mode_ecmchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$27 ] ( main:2::menu:9::mode_ecmchar:48 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$27 ] ) always clobbers reg byte a 
Statement [819] (byte~) mode_ecmchar::$28 ← (byte~) mode_ecmchar::$27 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$28 ] ( main:2::menu:9::mode_ecmchar:48 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$28 ] ) always clobbers reg byte a 
Statement [820] (byte~) mode_ecmchar::$29 ← (byte) mode_ecmchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$28 mode_ecmchar::$29 ] ( main:2::menu:9::mode_ecmchar:48 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$28 mode_ecmchar::$29 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:286 [ mode_ecmchar::$28 ]
Statement [822] *((byte*) mode_ecmchar::ch#2) ← (byte~) mode_ecmchar::$30 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 ] ( main:2::menu:9::mode_ecmchar:48 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 ] ) always clobbers reg byte y 
Statement [831] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_stdchar::CHARSET#0/(dword/signed dword) $10000 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [832] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [833] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [834] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [835] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [836] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_stdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [837] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [838] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [839] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_stdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_stdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [841] *((const byte*) DTV_PALETTE#0 + (byte) mode_stdchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_stdchar::i#2) [ mode_stdchar::i#2 ] ( main:2::menu:9::mode_stdchar:40 [ mode_stdchar::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:146 [ mode_stdchar::i#2 mode_stdchar::i#1 ]
Statement [844] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [845] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [848] (byte~) mode_stdchar::$24 ← (byte) mode_stdchar::cx#2 + (byte) mode_stdchar::cy#4 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 mode_stdchar::$24 ] ( main:2::menu:9::mode_stdchar:40 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 mode_stdchar::$24 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:147 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:148 [ mode_stdchar::cx#2 mode_stdchar::cx#1 ]
Statement [849] (byte~) mode_stdchar::$25 ← (byte~) mode_stdchar::$24 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 mode_stdchar::$25 ] ( main:2::menu:9::mode_stdchar:40 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 mode_stdchar::$25 ] ) always clobbers reg byte a 
Statement [850] *((byte*) mode_stdchar::col#2) ← (byte~) mode_stdchar::$25 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 ] ( main:2::menu:9::mode_stdchar:40 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:147 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:148 [ mode_stdchar::cx#2 mode_stdchar::cx#1 ]
Statement [852] (byte~) mode_stdchar::$26 ← (byte) mode_stdchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$26 ] ( main:2::menu:9::mode_stdchar:40 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$26 ] ) always clobbers reg byte a 
Statement [853] (byte~) mode_stdchar::$27 ← (byte~) mode_stdchar::$26 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$27 ] ( main:2::menu:9::mode_stdchar:40 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$27 ] ) always clobbers reg byte a 
Statement [854] (byte~) mode_stdchar::$28 ← (byte) mode_stdchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$27 mode_stdchar::$28 ] ( main:2::menu:9::mode_stdchar:40 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$27 mode_stdchar::$28 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:292 [ mode_stdchar::$27 ]
Statement [856] *((byte*) mode_stdchar::ch#2) ← (byte~) mode_stdchar::$29 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 ] ( main:2::menu:9::mode_stdchar:40 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 ] ) always clobbers reg byte y 
Statement [867] if(*((byte*) print_str_lines::str#2)!=(byte) '@') goto print_str_lines::@4 [ print_str_lines::str#2 print_char_cursor#19 print_line_cursor#17 ] ( main:2::menu:9::print_str_lines:33 [ print_str_lines::str#2 print_char_cursor#19 print_line_cursor#17 ] ) always clobbers reg byte a reg byte y 
Statement [870] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#3) [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:33 [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 print_str_lines::ch#0 ] ) always clobbers reg byte a reg byte y 
Statement [873] *((byte*) print_char_cursor#17) ← (byte) print_str_lines::ch#0 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:33 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:295 [ print_str_lines::ch#0 ]
Statement [879] (byte*~) print_char_cursor#103 ← (byte*) print_line_cursor#19 [ print_str_lines::str#0 print_char_cursor#103 print_line_cursor#19 ] ( main:2::menu:9::print_str_lines:33 [ print_str_lines::str#0 print_char_cursor#103 print_line_cursor#19 ] ) always clobbers reg byte a 
Statement [882] (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#18 + (byte/signed byte/word/signed word/dword/signed dword) $28 [ print_line_cursor#19 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:33::print_ln:878 [ print_str_lines::str#0 print_line_cursor#19 print_char_cursor#32 ] ) always clobbers reg byte a 
Statement [883] if((byte*) print_line_cursor#19<(byte*) print_char_cursor#32) goto print_ln::@1 [ print_line_cursor#19 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:33::print_ln:878 [ print_str_lines::str#0 print_line_cursor#19 print_char_cursor#32 ] ) always clobbers reg byte a 
Statement [887] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::menu:9::print_cls:31 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [889] if((byte*) print_cls::sc#1!=(const byte*) menu::SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::menu:9::print_cls:31 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) menu::CHARSET#0/(dword/signed dword) $10000 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [15] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) menu::CHARSET#0/(word/signed word/dword/signed dword) $4000 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [16] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [17] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [18] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) menu::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) menu::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [20] *((const byte*) DTV_PALETTE#0 + (byte) menu::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) menu::i#2) [ menu::i#2 ] ( main:2::menu:9 [ menu::i#2 ] ) always clobbers reg byte a 
Statement [24] *((byte*) menu::c#2) ← (const byte) LIGHT_GREEN#0 [ menu::c#2 ] ( main:2::menu:9 [ menu::c#2 ] ) always clobbers reg byte a reg byte y 
Statement [26] if((byte*) menu::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) $3e8) goto menu::@2 [ menu::c#1 ] ( main:2::menu:9 [ menu::c#1 ] ) always clobbers reg byte a 
Statement [27] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [28] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [119] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_COLORRAM_OFF#0 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [120] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [121] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [122] *((const byte*) DTV_PLANEB_START_LO#0) ← <<(const dword) mode_8bppchunkybmm::PLANEB#0 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [123] *((const byte*) DTV_PLANEB_START_MI#0) ← ><(const dword) mode_8bppchunkybmm::PLANEB#0 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [124] *((const byte*) DTV_PLANEB_START_HI#0) ← <>(const dword) mode_8bppchunkybmm::PLANEB#0 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [125] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 8 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [126] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [127] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [128] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ ] ) always clobbers reg byte a 
Statement [137] if((byte*) mode_8bppchunkybmm::gfxb#3!=(word/dword/signed dword) $8000) goto mode_8bppchunkybmm::@4 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxbCpuBank#4 ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxbCpuBank#4 ] ) always clobbers reg byte a 
Statement [142] (word~) mode_8bppchunkybmm::$23 ← (word) mode_8bppchunkybmm::x#2 + (byte) mode_8bppchunkybmm::y#6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::$23 ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::$23 ] ) always clobbers reg byte a 
Statement [143] (byte) mode_8bppchunkybmm::c#0 ← ((byte)) (word~) mode_8bppchunkybmm::$23 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::c#0 ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::c#0 ] ) always clobbers reg byte a 
Statement [144] *((byte*) mode_8bppchunkybmm::gfxb#4) ← (byte) mode_8bppchunkybmm::c#0 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::gfxb#4 ] ) always clobbers reg byte y 
Statement [147] if((word) mode_8bppchunkybmm::x#1!=(word/signed word/dword/signed dword) $140) goto mode_8bppchunkybmm::@3 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxb#1 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#1 ] ( main:2::menu:9::mode_8bppchunkybmm:118 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::gfxb#1 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::x#1 ] ) always clobbers reg byte a 
Statement [157] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto mode_ctrl::@4 [ dtv_control#114 ] ( main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153 [ dtv_control#114 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280 [ dtv_control#114 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333 [ dtv_control#114 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391 [ dtv_control#114 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448 [ dtv_control#114 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482 [ dtv_control#114 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517 [ dtv_control#114 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549 [ dtv_control#114 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590 [ dtv_control#114 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792 [ dtv_control#114 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829 [ dtv_control#114 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863 [ dtv_control#114 ] ) always clobbers reg byte a 
Statement [169] (byte) mode_ctrl::ctrl#1 ← (byte) mode_ctrl::ctrl#0 | (const byte) DTV_LINEAR#0 [ dtv_control#114 mode_ctrl::ctrl#1 ] ( main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829 [ dtv_control#114 mode_ctrl::ctrl#1 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863 [ dtv_control#114 mode_ctrl::ctrl#1 ] ) always clobbers reg byte a 
Statement [175] (byte) mode_ctrl::ctrl#2 ← (byte) mode_ctrl::ctrl#17 | (const byte) DTV_HIGHCOLOR#0 [ dtv_control#114 mode_ctrl::ctrl#2 ] ( main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829 [ dtv_control#114 mode_ctrl::ctrl#2 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863 [ dtv_control#114 mode_ctrl::ctrl#2 ] ) always clobbers reg byte a 
Statement [181] (byte) mode_ctrl::ctrl#3 ← (byte) mode_ctrl::ctrl#10 | (const byte) DTV_OVERSCAN#0 [ dtv_control#114 mode_ctrl::ctrl#3 ] ( main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829 [ dtv_control#114 mode_ctrl::ctrl#3 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863 [ dtv_control#114 mode_ctrl::ctrl#3 ] ) always clobbers reg byte a 
Statement [187] (byte) mode_ctrl::ctrl#4 ← (byte) mode_ctrl::ctrl#11 | (const byte) DTV_BORDER_OFF#0 [ dtv_control#114 mode_ctrl::ctrl#4 ] ( main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829 [ dtv_control#114 mode_ctrl::ctrl#4 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863 [ dtv_control#114 mode_ctrl::ctrl#4 ] ) always clobbers reg byte a 
Statement [193] (byte) mode_ctrl::ctrl#5 ← (byte) mode_ctrl::ctrl#12 | (const byte) DTV_CHUNKY#0 [ dtv_control#114 mode_ctrl::ctrl#5 ] ( main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829 [ dtv_control#114 mode_ctrl::ctrl#5 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863 [ dtv_control#114 mode_ctrl::ctrl#5 ] ) always clobbers reg byte a 
Statement [199] (byte) mode_ctrl::ctrl#6 ← (byte) mode_ctrl::ctrl#13 | (const byte) DTV_COLORRAM_OFF#0 [ dtv_control#114 mode_ctrl::ctrl#6 ] ( main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829 [ dtv_control#114 mode_ctrl::ctrl#6 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863 [ dtv_control#114 mode_ctrl::ctrl#6 ] ) always clobbers reg byte a 
Statement [212] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#20 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] ( main:2::menu:9::keyboard_key_pressed:35 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:43 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:50 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:57 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:64 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:71 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:78 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:85 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:92 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:99 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:106 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:113 [ keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::key#20 keyboard_key_pressed::colidx#0 ] ) always clobbers reg byte a 
Statement [213] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#20 >> (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ( main:2::menu:9::keyboard_key_pressed:35 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:43 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:50 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:57 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:64 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:71 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:78 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:85 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:92 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:99 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:106 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::keyboard_key_pressed:113 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ) always clobbers reg byte a 
Statement [218] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0) [ keyboard_key_pressed::return#0 ] ( main:2::menu:9::keyboard_key_pressed:35 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:43 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:50 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:57 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:64 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:71 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:78 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:85 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:92 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:99 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:106 [ keyboard_key_pressed::return#0 ] main:2::menu:9::keyboard_key_pressed:113 [ keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:159 [ dtv_control#114 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:165 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:171 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:177 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:183 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:189 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:195 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:201 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::return#0 ] ) always clobbers reg byte a 
Statement [220] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:2::menu:9::keyboard_key_pressed:35::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:43::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:50::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:57::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:64::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:71::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:78::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:85::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:92::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:99::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:106::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::keyboard_key_pressed:113::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 ] ) always clobbers reg byte a 
Statement [221] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:2::menu:9::keyboard_key_pressed:35::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:43::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:50::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:57::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:64::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:71::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:78::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:85::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:92::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:99::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:106::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::keyboard_key_pressed:113::keyboard_matrix_read:215 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:159::keyboard_matrix_read:215 [ dtv_control#114 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:165::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#0 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:171::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#17 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:177::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#10 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:183::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#11 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:189::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#12 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:195::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#13 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bppchunkybmm:118::mode_ctrl:153::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_8bpppixelcell:111::mode_ctrl:280::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred:104::mode_ctrl:333::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:97::mode_ctrl:391::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_sixsfred2:90::mode_ctrl:448::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolmcchar:83::mode_ctrl:482::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolecmchar:76::mode_ctrl:517::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_hicolstdchar:69::mode_ctrl:549::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdbitmap:62::mode_ctrl:590::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_mcchar:55::mode_ctrl:792::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_ecmchar:48::mode_ctrl:829::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_stdchar:40::mode_ctrl:863::keyboard_key_pressed:201::keyboard_matrix_read:215 [ dtv_control#114 mode_ctrl::ctrl#22 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Statement asm { .byte$32,$dd lda$ff .byte$32,$00  } always clobbers reg byte a 
Statement [227] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [228] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [229] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [230] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_8bpppixelcell::PLANEA#0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [231] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_8bpppixelcell::PLANEA#0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [232] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [233] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [234] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [235] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [236] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_8bpppixelcell::PLANEB#0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [237] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_8bpppixelcell::PLANEB#0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [238] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [239] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [240] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [241] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [242] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [249] (byte~) mode_8bpppixelcell::$13 ← (byte) mode_8bpppixelcell::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$13 ] ( main:2::menu:9::mode_8bpppixelcell:111 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$13 ] ) always clobbers reg byte a 
Statement [250] (byte~) mode_8bpppixelcell::$14 ← (byte~) mode_8bpppixelcell::$13 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$14 ] ( main:2::menu:9::mode_8bpppixelcell:111 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$14 ] ) always clobbers reg byte a 
Statement [251] (byte~) mode_8bpppixelcell::$15 ← (byte) mode_8bpppixelcell::ax#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$14 mode_8bpppixelcell::$15 ] ( main:2::menu:9::mode_8bpppixelcell:111 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::$14 mode_8bpppixelcell::$15 ] ) always clobbers reg byte a 
Statement [253] *((byte*) mode_8bpppixelcell::gfxa#2) ← (byte~) mode_8bpppixelcell::$16 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 ] ( main:2::menu:9::mode_8bpppixelcell:111 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ax#2 mode_8bpppixelcell::gfxa#2 ] ) always clobbers reg byte y 
Statement [259] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [262] (byte) mode_8bpppixelcell::bits#0 ← *((byte*) mode_8bpppixelcell::chargen#2) [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::col#5 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#0 ] ( main:2::menu:9::mode_8bpppixelcell:111 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::col#5 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#0 ] ) always clobbers reg byte a reg byte y 
Statement [265] (byte~) mode_8bpppixelcell::$19 ← (byte) mode_8bpppixelcell::bits#2 & (byte/word/signed word/dword/signed dword) $80 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#1 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::col#2 mode_8bpppixelcell::cp#2 mode_8bpppixelcell::$19 ] ( main:2::menu:9::mode_8bpppixelcell:111 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#1 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::col#2 mode_8bpppixelcell::cp#2 mode_8bpppixelcell::$19 ] ) always clobbers reg byte a 
Statement [269] *((byte*) mode_8bpppixelcell::gfxb#2) ← (byte) mode_8bpppixelcell::c#2 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#1 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::col#2 mode_8bpppixelcell::cp#2 ] ( main:2::menu:9::mode_8bpppixelcell:111 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::chargen#1 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::col#2 mode_8bpppixelcell::cp#2 ] ) always clobbers reg byte y 
Statement [279] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2::menu:9::mode_8bpppixelcell:111 [ ] ) always clobbers reg byte a 
Statement [282] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [283] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [284] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [285] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_sixsfred::PLANEA#0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [286] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_sixsfred::PLANEA#0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [287] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [288] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [289] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [290] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [291] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_sixsfred::PLANEB#0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [292] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_sixsfred::PLANEB#0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [293] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [294] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [295] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [296] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [297] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_sixsfred::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [298] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_sixsfred::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [303] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred:104 [ ] ) always clobbers reg byte a 
Statement [306] (byte~) mode_sixsfred::$16 ← (byte) mode_sixsfred::cx#2 + (byte) mode_sixsfred::cy#4 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 mode_sixsfred::$16 ] ( main:2::menu:9::mode_sixsfred:104 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 mode_sixsfred::$16 ] ) always clobbers reg byte a 
Statement [307] (byte~) mode_sixsfred::$17 ← (byte~) mode_sixsfred::$16 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 mode_sixsfred::$17 ] ( main:2::menu:9::mode_sixsfred:104 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 mode_sixsfred::$17 ] ) always clobbers reg byte a 
Statement [308] *((byte*) mode_sixsfred::col#2) ← (byte~) mode_sixsfred::$17 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 ] ( main:2::menu:9::mode_sixsfred:104 [ mode_sixsfred::cy#4 mode_sixsfred::cx#2 mode_sixsfred::col#2 ] ) always clobbers reg byte y 
Statement [316] (byte~) mode_sixsfred::$20 ← (byte) mode_sixsfred::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 mode_sixsfred::$20 ] ( main:2::menu:9::mode_sixsfred:104 [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 mode_sixsfred::$20 ] ) always clobbers reg byte a 
Statement [317] (byte) mode_sixsfred::row#0 ← (byte~) mode_sixsfred::$20 & (byte/signed byte/word/signed word/dword/signed dword) 3 [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 mode_sixsfred::row#0 ] ( main:2::menu:9::mode_sixsfred:104 [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 mode_sixsfred::row#0 ] ) always clobbers reg byte a 
Statement [318] *((byte*) mode_sixsfred::gfxa#2) ← *((const byte[]) mode_sixsfred::row_bitmask#0 + (byte) mode_sixsfred::row#0) [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 ] ( main:2::menu:9::mode_sixsfred:104 [ mode_sixsfred::ay#4 mode_sixsfred::gfxa#2 mode_sixsfred::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [326] *((byte*) mode_sixsfred::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $1b [ mode_sixsfred::by#4 mode_sixsfred::gfxb#2 mode_sixsfred::bx#2 ] ( main:2::menu:9::mode_sixsfred:104 [ mode_sixsfred::by#4 mode_sixsfred::gfxb#2 mode_sixsfred::bx#2 ] ) always clobbers reg byte a reg byte y 
Statement [335] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [336] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [337] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [338] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_twoplanebitmap::PLANEA#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [339] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_twoplanebitmap::PLANEA#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [340] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [341] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [342] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [343] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [344] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_twoplanebitmap::PLANEB#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [345] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_twoplanebitmap::PLANEB#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [346] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [347] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [348] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [349] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [350] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_twoplanebitmap::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [351] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_twoplanebitmap::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [356] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [357] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $70 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [358] *((const byte*) BGCOL2#0) ← (byte/word/signed word/dword/signed dword) $d4 [ ] ( main:2::menu:9::mode_twoplanebitmap:97 [ ] ) always clobbers reg byte a 
Statement [361] (byte~) mode_twoplanebitmap::$15 ← (byte) mode_twoplanebitmap::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$15 ] ( main:2::menu:9::mode_twoplanebitmap:97 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$15 ] ) always clobbers reg byte a 
Statement [362] (byte~) mode_twoplanebitmap::$16 ← (byte~) mode_twoplanebitmap::$15 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$16 ] ( main:2::menu:9::mode_twoplanebitmap:97 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$16 ] ) always clobbers reg byte a 
Statement [363] (byte~) mode_twoplanebitmap::$17 ← (byte) mode_twoplanebitmap::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$16 mode_twoplanebitmap::$17 ] ( main:2::menu:9::mode_twoplanebitmap:97 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 mode_twoplanebitmap::$16 mode_twoplanebitmap::$17 ] ) always clobbers reg byte a 
Statement [365] *((byte*) mode_twoplanebitmap::col#2) ← (byte~) mode_twoplanebitmap::$18 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 ] ( main:2::menu:9::mode_twoplanebitmap:97 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cx#2 mode_twoplanebitmap::col#2 ] ) always clobbers reg byte y 
Statement [373] (byte~) mode_twoplanebitmap::$21 ← (byte) mode_twoplanebitmap::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$21 ] ( main:2::menu:9::mode_twoplanebitmap:97 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$21 ] ) always clobbers reg byte a 
Statement [375] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/word/signed word/dword/signed dword) $ff [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:97 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [384] *((byte*) mode_twoplanebitmap::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ( main:2::menu:9::mode_twoplanebitmap:97 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ) always clobbers reg byte a reg byte y 
Statement [393] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:97 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [395] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_LINEAR#0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [396] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [397] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [398] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_sixsfred2::PLANEA#0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [399] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_sixsfred2::PLANEA#0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [400] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [401] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [402] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [403] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [404] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_sixsfred2::PLANEB#0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [405] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_sixsfred2::PLANEB#0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [406] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [407] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [408] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [409] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [410] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_sixsfred2::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [411] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_sixsfred2::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [416] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_sixsfred2:90 [ ] ) always clobbers reg byte a 
Statement [419] (byte~) mode_sixsfred2::$14 ← (byte) mode_sixsfred2::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 3 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$14 ] ( main:2::menu:9::mode_sixsfred2:90 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$14 ] ) always clobbers reg byte a 
Statement [420] (byte~) mode_sixsfred2::$15 ← (byte~) mode_sixsfred2::$14 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$15 ] ( main:2::menu:9::mode_sixsfred2:90 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$15 ] ) always clobbers reg byte a 
Statement [421] (byte~) mode_sixsfred2::$16 ← (byte) mode_sixsfred2::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 3 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$15 mode_sixsfred2::$16 ] ( main:2::menu:9::mode_sixsfred2:90 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 mode_sixsfred2::$15 mode_sixsfred2::$16 ] ) always clobbers reg byte a 
Statement [423] *((byte*) mode_sixsfred2::col#2) ← (byte~) mode_sixsfred2::$17 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 ] ( main:2::menu:9::mode_sixsfred2:90 [ mode_sixsfred2::cy#4 mode_sixsfred2::cx#2 mode_sixsfred2::col#2 ] ) always clobbers reg byte y 
Statement [431] (byte~) mode_sixsfred2::$20 ← (byte) mode_sixsfred2::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 mode_sixsfred2::$20 ] ( main:2::menu:9::mode_sixsfred2:90 [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 mode_sixsfred2::$20 ] ) always clobbers reg byte a 
Statement [432] (byte) mode_sixsfred2::row#0 ← (byte~) mode_sixsfred2::$20 & (byte/signed byte/word/signed word/dword/signed dword) 3 [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 mode_sixsfred2::row#0 ] ( main:2::menu:9::mode_sixsfred2:90 [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 mode_sixsfred2::row#0 ] ) always clobbers reg byte a 
Statement [433] *((byte*) mode_sixsfred2::gfxa#2) ← *((const byte[]) mode_sixsfred2::row_bitmask#0 + (byte) mode_sixsfred2::row#0) [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 ] ( main:2::menu:9::mode_sixsfred2:90 [ mode_sixsfred2::ay#4 mode_sixsfred2::gfxa#2 mode_sixsfred2::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [441] *((byte*) mode_sixsfred2::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $1b [ mode_sixsfred2::by#4 mode_sixsfred2::gfxb#2 mode_sixsfred2::bx#2 ] ( main:2::menu:9::mode_sixsfred2:90 [ mode_sixsfred2::by#4 mode_sixsfred2::gfxb#2 mode_sixsfred2::bx#2 ] ) always clobbers reg byte a reg byte y 
Statement [450] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolmcchar::CHARSET#0/(dword/signed dword) $10000 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [451] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [452] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [453] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [454] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [455] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolmcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [456] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [457] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [458] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolmcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolmcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [463] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [464] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $50 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [465] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) $54 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [466] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) $58 [ ] ( main:2::menu:9::mode_hicolmcchar:83 [ ] ) always clobbers reg byte a 
Statement [469] (byte~) mode_hicolmcchar::$25 ← (byte) mode_hicolmcchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$25 ] ( main:2::menu:9::mode_hicolmcchar:83 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$25 ] ) always clobbers reg byte a 
Statement [470] (byte~) mode_hicolmcchar::$26 ← (byte~) mode_hicolmcchar::$25 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$26 ] ( main:2::menu:9::mode_hicolmcchar:83 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$26 ] ) always clobbers reg byte a 
Statement [471] (byte~) mode_hicolmcchar::$27 ← (byte) mode_hicolmcchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$26 mode_hicolmcchar::$27 ] ( main:2::menu:9::mode_hicolmcchar:83 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::$26 mode_hicolmcchar::$27 ] ) always clobbers reg byte a 
Statement [473] *((byte*) mode_hicolmcchar::col#2) ← (byte) mode_hicolmcchar::v#0 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::v#0 ] ( main:2::menu:9::mode_hicolmcchar:83 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cx#2 mode_hicolmcchar::col#2 mode_hicolmcchar::ch#2 mode_hicolmcchar::v#0 ] ) always clobbers reg byte y 
Statement [475] *((byte*) mode_hicolmcchar::ch#2) ← (byte) mode_hicolmcchar::v#0 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::col#1 mode_hicolmcchar::cx#2 mode_hicolmcchar::ch#2 ] ( main:2::menu:9::mode_hicolmcchar:83 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::col#1 mode_hicolmcchar::cx#2 mode_hicolmcchar::ch#2 ] ) always clobbers reg byte y 
Statement [484] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolecmchar::CHARSET#0/(dword/signed dword) $10000 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [485] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [486] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [487] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [488] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [489] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [490] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(const byte) VIC_ECM#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [491] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [492] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [497] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [498] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $50 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [499] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) $54 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [500] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) $58 [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [501] *((const byte*) BGCOL4#0) ← (byte/signed byte/word/signed word/dword/signed dword) $5c [ ] ( main:2::menu:9::mode_hicolecmchar:76 [ ] ) always clobbers reg byte a 
Statement [504] (byte~) mode_hicolecmchar::$25 ← (byte) mode_hicolecmchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$25 ] ( main:2::menu:9::mode_hicolecmchar:76 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$25 ] ) always clobbers reg byte a 
Statement [505] (byte~) mode_hicolecmchar::$26 ← (byte~) mode_hicolecmchar::$25 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$26 ] ( main:2::menu:9::mode_hicolecmchar:76 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$26 ] ) always clobbers reg byte a 
Statement [506] (byte~) mode_hicolecmchar::$27 ← (byte) mode_hicolecmchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$26 mode_hicolecmchar::$27 ] ( main:2::menu:9::mode_hicolecmchar:76 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::$26 mode_hicolecmchar::$27 ] ) always clobbers reg byte a 
Statement [508] *((byte*) mode_hicolecmchar::col#2) ← (byte) mode_hicolecmchar::v#0 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::v#0 ] ( main:2::menu:9::mode_hicolecmchar:76 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cx#2 mode_hicolecmchar::col#2 mode_hicolecmchar::ch#2 mode_hicolecmchar::v#0 ] ) always clobbers reg byte y 
Statement [510] *((byte*) mode_hicolecmchar::ch#2) ← (byte) mode_hicolecmchar::v#0 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::col#1 mode_hicolecmchar::cx#2 mode_hicolecmchar::ch#2 ] ( main:2::menu:9::mode_hicolecmchar:76 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::col#1 mode_hicolecmchar::cx#2 mode_hicolecmchar::ch#2 ] ) always clobbers reg byte y 
Statement [519] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolstdchar::CHARSET#0/(dword/signed dword) $10000 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [520] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [521] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [522] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [523] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [524] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolstdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [525] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [526] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [527] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolstdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolstdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [532] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [533] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_hicolstdchar:69 [ ] ) always clobbers reg byte a 
Statement [536] (byte~) mode_hicolstdchar::$24 ← (byte) mode_hicolstdchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$24 ] ( main:2::menu:9::mode_hicolstdchar:69 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$24 ] ) always clobbers reg byte a 
Statement [537] (byte~) mode_hicolstdchar::$25 ← (byte~) mode_hicolstdchar::$24 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$25 ] ( main:2::menu:9::mode_hicolstdchar:69 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$25 ] ) always clobbers reg byte a 
Statement [538] (byte~) mode_hicolstdchar::$26 ← (byte) mode_hicolstdchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$25 mode_hicolstdchar::$26 ] ( main:2::menu:9::mode_hicolstdchar:69 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::$25 mode_hicolstdchar::$26 ] ) always clobbers reg byte a 
Statement [540] *((byte*) mode_hicolstdchar::col#2) ← (byte) mode_hicolstdchar::v#0 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::v#0 ] ( main:2::menu:9::mode_hicolstdchar:69 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cx#2 mode_hicolstdchar::col#2 mode_hicolstdchar::ch#2 mode_hicolstdchar::v#0 ] ) always clobbers reg byte y 
Statement [542] *((byte*) mode_hicolstdchar::ch#2) ← (byte) mode_hicolstdchar::v#0 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::col#1 mode_hicolstdchar::cx#2 mode_hicolstdchar::ch#2 ] ( main:2::menu:9::mode_hicolstdchar:69 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::col#1 mode_hicolstdchar::cx#2 mode_hicolstdchar::ch#2 ] ) always clobbers reg byte y 
Statement [551] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_stdbitmap::BITMAP#0/(dword/signed dword) $10000 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [552] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [553] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [554] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_stdbitmap::BITMAP#0/(word/signed word/dword/signed dword) $4000 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [555] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [556] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [557] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_stdbitmap::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_stdbitmap::BITMAP#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [559] *((const byte*) DTV_PALETTE#0 + (byte) mode_stdbitmap::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_stdbitmap::i#2) [ mode_stdbitmap::i#2 ] ( main:2::menu:9::mode_stdbitmap:62 [ mode_stdbitmap::i#2 ] ) always clobbers reg byte a 
Statement [562] *((const byte*) BGCOL#0) ← (const byte) BLACK#0 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [563] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ ] ( main:2::menu:9::mode_stdbitmap:62 [ ] ) always clobbers reg byte a 
Statement [566] (byte~) mode_stdbitmap::$19 ← (byte) mode_stdbitmap::cx#2 + (byte) mode_stdbitmap::cy#4 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::$19 ] ( main:2::menu:9::mode_stdbitmap:62 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::$19 ] ) always clobbers reg byte a 
Statement [567] (byte) mode_stdbitmap::col#0 ← (byte~) mode_stdbitmap::$19 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col#0 ] ( main:2::menu:9::mode_stdbitmap:62 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col#0 ] ) always clobbers reg byte a 
Statement [568] (byte) mode_stdbitmap::col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f - (byte) mode_stdbitmap::col#0 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col#0 mode_stdbitmap::col2#0 ] ( main:2::menu:9::mode_stdbitmap:62 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col#0 mode_stdbitmap::col2#0 ] ) always clobbers reg byte a 
Statement [569] (byte~) mode_stdbitmap::$22 ← (byte) mode_stdbitmap::col#0 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col2#0 mode_stdbitmap::$22 ] ( main:2::menu:9::mode_stdbitmap:62 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 mode_stdbitmap::col2#0 mode_stdbitmap::$22 ] ) always clobbers reg byte a 
Statement [571] *((byte*) mode_stdbitmap::ch#2) ← (byte~) mode_stdbitmap::$23 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 ] ( main:2::menu:9::mode_stdbitmap:62 [ mode_stdbitmap::cy#4 mode_stdbitmap::cx#2 mode_stdbitmap::ch#2 ] ) always clobbers reg byte y 
Statement [593] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ) always clobbers reg byte a 
Statement [595] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ) always clobbers reg byte a 
Statement [610] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ) always clobbers reg byte a 
Statement [624] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ) always clobbers reg byte a 
Statement [626] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ) always clobbers reg byte a 
Statement [640] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586 [ mode_stdbitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ) always clobbers reg byte a 
Statement [655] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:609 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:653 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ) always clobbers reg byte a 
Statement [661] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:609 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:653 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ) always clobbers reg byte a 
Statement [664] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:609 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:653 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ) always clobbers reg byte a 
Statement [670] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_plot::x#4) [ bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:609::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:653::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:602::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:647::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:623::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:639::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:617::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:633::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ) always clobbers reg byte a 
Statement [671] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#4) [ bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:609::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:653::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:602::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:647::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:623::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:639::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:617::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:633::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ) always clobbers reg byte a 
Statement [672] (word~) bitmap_plot::$0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 [ bitmap_plot::x#4 bitmap_plot::$0 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:609::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:653::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:602::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:647::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:623::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:639::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:617::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:633::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] ) always clobbers reg byte a 
Statement [673] (byte~) bitmap_plot::$1 ← *((byte*)(word~) bitmap_plot::$0) | *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_plot::x#4) [ bitmap_plot::$0 bitmap_plot::$1 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:609::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:653::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:602::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:647::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:623::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:639::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:617::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:633::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::$0 bitmap_plot::$1 ] ) always clobbers reg byte a reg byte y 
Statement [674] *((byte*)(word~) bitmap_plot::$0) ← (byte~) bitmap_plot::$1 [ ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:609::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyi:653::bitmap_plot:659 [ mode_stdbitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:602::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:647::bitmap_plot:681 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:623::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:639::bitmap_plot:696 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:617::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:633::bitmap_plot:711 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] ) always clobbers reg byte y 
Statement [677] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:602 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:647 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ) always clobbers reg byte a 
Statement [683] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:602 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:647 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ) always clobbers reg byte a 
Statement [686] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:602 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxi:647 [ mode_stdbitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ) always clobbers reg byte a 
Statement [692] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:623 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:639 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ) always clobbers reg byte a 
Statement [698] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:623 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:639 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ) always clobbers reg byte a 
Statement [701] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:623 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_xdyd:639 [ mode_stdbitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ) always clobbers reg byte a 
Statement [707] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:617 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:633 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ) always clobbers reg byte a 
Statement [713] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:617 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:633 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ) always clobbers reg byte a 
Statement [716] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:617 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] main:2::menu:9::mode_stdbitmap:62::bitmap_line:586::bitmap_line_ydxd:633 [ mode_stdbitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ) always clobbers reg byte a 
Statement [721] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_xhi#0) w= *((const byte[$100]) bitmap_plot_xlo#0) [ bitmap_clear::$3 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_clear:580 [ bitmap_clear::$3 ] ) always clobbers reg byte a 
Statement [722] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3 [ bitmap_clear::bitmap#5 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_clear:580 [ bitmap_clear::bitmap#5 ] ) always clobbers reg byte a 
Statement [725] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_clear:580 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ) always clobbers reg byte a reg byte y 
Statement [734] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte/word/signed word/dword/signed dword) $f8 [ bitmap_init::x#2 bitmap_init::bits#3 bitmap_init::$0 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_init:578 [ bitmap_init::x#2 bitmap_init::bits#3 bitmap_init::$0 ] ) always clobbers reg byte a 
Statement [736] *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_init::x#2) ← >(const byte*) mode_stdbitmap::BITMAP#0 [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_init:578 [ bitmap_init::x#2 bitmap_init::bits#3 ] ) always clobbers reg byte a 
Statement [737] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_init:578 [ bitmap_init::x#2 bitmap_init::bits#3 ] ) always clobbers reg byte a 
Statement [744] (byte~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$6 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_init:578 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$6 ] ) always clobbers reg byte a 
Statement [750] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$10 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_init:578 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$10 ] ) always clobbers reg byte a 
Statement [752] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:2::menu:9::mode_stdbitmap:62::bitmap_init:578 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ) always clobbers reg byte a 
Statement [758] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_mcchar::CHARSET#0/(dword/signed dword) $10000 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [759] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [760] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [761] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [762] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [763] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_mcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [764] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [765] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [766] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_mcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_mcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [768] *((const byte*) DTV_PALETTE#0 + (byte) mode_mcchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_mcchar::i#2) [ mode_mcchar::i#2 ] ( main:2::menu:9::mode_mcchar:55 [ mode_mcchar::i#2 ] ) always clobbers reg byte a 
Statement [771] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [772] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [773] *((const byte*) BGCOL2#0) ← (const byte) GREEN#0 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [774] *((const byte*) BGCOL3#0) ← (const byte) BLUE#0 [ ] ( main:2::menu:9::mode_mcchar:55 [ ] ) always clobbers reg byte a 
Statement [777] (byte~) mode_mcchar::$25 ← (byte) mode_mcchar::cx#2 + (byte) mode_mcchar::cy#4 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 mode_mcchar::$25 ] ( main:2::menu:9::mode_mcchar:55 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 mode_mcchar::$25 ] ) always clobbers reg byte a 
Statement [778] (byte~) mode_mcchar::$26 ← (byte~) mode_mcchar::$25 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 mode_mcchar::$26 ] ( main:2::menu:9::mode_mcchar:55 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 mode_mcchar::$26 ] ) always clobbers reg byte a 
Statement [779] *((byte*) mode_mcchar::col#2) ← (byte~) mode_mcchar::$26 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 ] ( main:2::menu:9::mode_mcchar:55 [ mode_mcchar::cy#4 mode_mcchar::cx#2 mode_mcchar::col#2 mode_mcchar::ch#2 ] ) always clobbers reg byte y 
Statement [781] (byte~) mode_mcchar::$27 ← (byte) mode_mcchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$27 ] ( main:2::menu:9::mode_mcchar:55 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$27 ] ) always clobbers reg byte a 
Statement [782] (byte~) mode_mcchar::$28 ← (byte~) mode_mcchar::$27 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$28 ] ( main:2::menu:9::mode_mcchar:55 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$28 ] ) always clobbers reg byte a 
Statement [783] (byte~) mode_mcchar::$29 ← (byte) mode_mcchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$28 mode_mcchar::$29 ] ( main:2::menu:9::mode_mcchar:55 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 mode_mcchar::$28 mode_mcchar::$29 ] ) always clobbers reg byte a 
Statement [785] *((byte*) mode_mcchar::ch#2) ← (byte~) mode_mcchar::$30 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 ] ( main:2::menu:9::mode_mcchar:55 [ mode_mcchar::cy#4 mode_mcchar::col#1 mode_mcchar::cx#2 mode_mcchar::ch#2 ] ) always clobbers reg byte y 
Statement [794] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_ecmchar::CHARSET#0/(dword/signed dword) $10000 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [795] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [796] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [797] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [798] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [799] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_ecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [800] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(const byte) VIC_ECM#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [801] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [802] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_ecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_ecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [804] *((const byte*) DTV_PALETTE#0 + (byte) mode_ecmchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_ecmchar::i#2) [ mode_ecmchar::i#2 ] ( main:2::menu:9::mode_ecmchar:48 [ mode_ecmchar::i#2 ] ) always clobbers reg byte a 
Statement [807] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [808] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [809] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [810] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) 5 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [811] *((const byte*) BGCOL4#0) ← (byte/signed byte/word/signed word/dword/signed dword) 6 [ ] ( main:2::menu:9::mode_ecmchar:48 [ ] ) always clobbers reg byte a 
Statement [814] (byte~) mode_ecmchar::$25 ← (byte) mode_ecmchar::cx#2 + (byte) mode_ecmchar::cy#4 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 mode_ecmchar::$25 ] ( main:2::menu:9::mode_ecmchar:48 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 mode_ecmchar::$25 ] ) always clobbers reg byte a 
Statement [815] (byte~) mode_ecmchar::$26 ← (byte~) mode_ecmchar::$25 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 mode_ecmchar::$26 ] ( main:2::menu:9::mode_ecmchar:48 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 mode_ecmchar::$26 ] ) always clobbers reg byte a 
Statement [816] *((byte*) mode_ecmchar::col#2) ← (byte~) mode_ecmchar::$26 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 ] ( main:2::menu:9::mode_ecmchar:48 [ mode_ecmchar::cy#4 mode_ecmchar::cx#2 mode_ecmchar::col#2 mode_ecmchar::ch#2 ] ) always clobbers reg byte y 
Statement [818] (byte~) mode_ecmchar::$27 ← (byte) mode_ecmchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$27 ] ( main:2::menu:9::mode_ecmchar:48 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$27 ] ) always clobbers reg byte a 
Statement [819] (byte~) mode_ecmchar::$28 ← (byte~) mode_ecmchar::$27 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$28 ] ( main:2::menu:9::mode_ecmchar:48 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$28 ] ) always clobbers reg byte a 
Statement [820] (byte~) mode_ecmchar::$29 ← (byte) mode_ecmchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$28 mode_ecmchar::$29 ] ( main:2::menu:9::mode_ecmchar:48 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 mode_ecmchar::$28 mode_ecmchar::$29 ] ) always clobbers reg byte a 
Statement [822] *((byte*) mode_ecmchar::ch#2) ← (byte~) mode_ecmchar::$30 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 ] ( main:2::menu:9::mode_ecmchar:48 [ mode_ecmchar::cy#4 mode_ecmchar::col#1 mode_ecmchar::cx#2 mode_ecmchar::ch#2 ] ) always clobbers reg byte y 
Statement [831] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_stdchar::CHARSET#0/(dword/signed dword) $10000 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [832] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [833] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [834] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [835] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [836] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_stdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [837] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [838] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [839] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_stdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_stdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [841] *((const byte*) DTV_PALETTE#0 + (byte) mode_stdchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_stdchar::i#2) [ mode_stdchar::i#2 ] ( main:2::menu:9::mode_stdchar:40 [ mode_stdchar::i#2 ] ) always clobbers reg byte a 
Statement [844] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [845] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_stdchar:40 [ ] ) always clobbers reg byte a 
Statement [848] (byte~) mode_stdchar::$24 ← (byte) mode_stdchar::cx#2 + (byte) mode_stdchar::cy#4 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 mode_stdchar::$24 ] ( main:2::menu:9::mode_stdchar:40 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 mode_stdchar::$24 ] ) always clobbers reg byte a 
Statement [849] (byte~) mode_stdchar::$25 ← (byte~) mode_stdchar::$24 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 mode_stdchar::$25 ] ( main:2::menu:9::mode_stdchar:40 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 mode_stdchar::$25 ] ) always clobbers reg byte a 
Statement [850] *((byte*) mode_stdchar::col#2) ← (byte~) mode_stdchar::$25 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 ] ( main:2::menu:9::mode_stdchar:40 [ mode_stdchar::cy#4 mode_stdchar::cx#2 mode_stdchar::col#2 mode_stdchar::ch#2 ] ) always clobbers reg byte y 
Statement [852] (byte~) mode_stdchar::$26 ← (byte) mode_stdchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$26 ] ( main:2::menu:9::mode_stdchar:40 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$26 ] ) always clobbers reg byte a 
Statement [853] (byte~) mode_stdchar::$27 ← (byte~) mode_stdchar::$26 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$27 ] ( main:2::menu:9::mode_stdchar:40 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$27 ] ) always clobbers reg byte a 
Statement [854] (byte~) mode_stdchar::$28 ← (byte) mode_stdchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$27 mode_stdchar::$28 ] ( main:2::menu:9::mode_stdchar:40 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 mode_stdchar::$27 mode_stdchar::$28 ] ) always clobbers reg byte a 
Statement [856] *((byte*) mode_stdchar::ch#2) ← (byte~) mode_stdchar::$29 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 ] ( main:2::menu:9::mode_stdchar:40 [ mode_stdchar::cy#4 mode_stdchar::col#1 mode_stdchar::cx#2 mode_stdchar::ch#2 ] ) always clobbers reg byte y 
Statement [867] if(*((byte*) print_str_lines::str#2)!=(byte) '@') goto print_str_lines::@4 [ print_str_lines::str#2 print_char_cursor#19 print_line_cursor#17 ] ( main:2::menu:9::print_str_lines:33 [ print_str_lines::str#2 print_char_cursor#19 print_line_cursor#17 ] ) always clobbers reg byte a reg byte y 
Statement [870] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#3) [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:33 [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 print_str_lines::ch#0 ] ) always clobbers reg byte a reg byte y 
Statement [873] *((byte*) print_char_cursor#17) ← (byte) print_str_lines::ch#0 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:33 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ) always clobbers reg byte y 
Statement [879] (byte*~) print_char_cursor#103 ← (byte*) print_line_cursor#19 [ print_str_lines::str#0 print_char_cursor#103 print_line_cursor#19 ] ( main:2::menu:9::print_str_lines:33 [ print_str_lines::str#0 print_char_cursor#103 print_line_cursor#19 ] ) always clobbers reg byte a 
Statement [882] (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#18 + (byte/signed byte/word/signed word/dword/signed dword) $28 [ print_line_cursor#19 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:33::print_ln:878 [ print_str_lines::str#0 print_line_cursor#19 print_char_cursor#32 ] ) always clobbers reg byte a 
Statement [883] if((byte*) print_line_cursor#19<(byte*) print_char_cursor#32) goto print_ln::@1 [ print_line_cursor#19 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:33::print_ln:878 [ print_str_lines::str#0 print_line_cursor#19 print_char_cursor#32 ] ) always clobbers reg byte a 
Statement [887] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::menu:9::print_cls:31 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [889] if((byte*) print_cls::sc#1!=(const byte*) menu::SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::menu:9::print_cls:31 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ menu::i#2 menu::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:3 [ menu::c#2 menu::c#1 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_BYTE:5 [ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ] : zp ZP_BYTE:6 , reg byte x , 
Potential registers zp ZP_WORD:7 [ mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_BYTE:9 [ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ] : zp ZP_BYTE:9 , reg byte x , 
Potential registers zp ZP_WORD:10 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 ] : zp ZP_WORD:10 , 
Potential registers zp ZP_BYTE:12 [ dtv_control#114 dtv_control#145 dtv_control#17 ] : zp ZP_BYTE:12 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ] : zp ZP_BYTE:13 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ keyboard_key_pressed::key#20 ] : zp ZP_BYTE:14 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ] : zp ZP_BYTE:17 , reg byte x , 
Potential registers zp ZP_BYTE:18 [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ] : zp ZP_BYTE:18 , reg byte x , 
Potential registers zp ZP_WORD:19 [ mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 ] : zp ZP_WORD:19 , 
Potential registers zp ZP_BYTE:21 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ] : zp ZP_BYTE:21 , reg byte x , 
Potential registers zp ZP_WORD:22 [ mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 ] : zp ZP_WORD:22 , 
Potential registers zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ] : zp ZP_BYTE:24 , reg byte x , 
Potential registers zp ZP_BYTE:25 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#0 mode_8bpppixelcell::bits#1 ] : zp ZP_BYTE:25 , reg byte x , 
Potential registers zp ZP_WORD:26 [ mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 ] : zp ZP_WORD:26 , 
Potential registers zp ZP_BYTE:28 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ] : zp ZP_BYTE:28 , reg byte x , 
Potential registers zp ZP_BYTE:29 [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ] : zp ZP_BYTE:29 , reg byte x , 
Potential registers zp ZP_BYTE:30 [ mode_8bpppixelcell::c#2 mode_8bpppixelcell::c#3 ] : zp ZP_BYTE:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ mode_sixsfred::i#2 mode_sixsfred::i#1 ] : zp ZP_BYTE:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ] : zp ZP_BYTE:32 , reg byte x , 
Potential registers zp ZP_BYTE:33 [ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ] : zp ZP_BYTE:33 , reg byte x , 
Potential registers zp ZP_WORD:34 [ mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 ] : zp ZP_WORD:34 , 
Potential registers zp ZP_BYTE:36 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ] : zp ZP_BYTE:36 , reg byte x , 
Potential registers zp ZP_WORD:37 [ mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 ] : zp ZP_WORD:37 , 
Potential registers zp ZP_BYTE:39 [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ] : zp ZP_BYTE:39 , reg byte x , 
Potential registers zp ZP_BYTE:40 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ] : zp ZP_BYTE:40 , reg byte x , 
Potential registers zp ZP_WORD:41 [ mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 ] : zp ZP_WORD:41 , 
Potential registers zp ZP_BYTE:43 [ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ] : zp ZP_BYTE:43 , reg byte x , 
Potential registers zp ZP_BYTE:44 [ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ] : zp ZP_BYTE:44 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:45 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ] : zp ZP_BYTE:45 , reg byte x , 
Potential registers zp ZP_BYTE:46 [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ] : zp ZP_BYTE:46 , reg byte x , 
Potential registers zp ZP_WORD:47 [ mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 ] : zp ZP_WORD:47 , 
Potential registers zp ZP_BYTE:49 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ] : zp ZP_BYTE:49 , reg byte x , 
Potential registers zp ZP_WORD:50 [ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ] : zp ZP_WORD:50 , 
Potential registers zp ZP_BYTE:52 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ] : zp ZP_BYTE:52 , reg byte x , 
Potential registers zp ZP_BYTE:53 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ] : zp ZP_BYTE:53 , reg byte x , 
Potential registers zp ZP_WORD:54 [ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ] : zp ZP_WORD:54 , 
Potential registers zp ZP_BYTE:56 [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ] : zp ZP_BYTE:56 , reg byte x , 
Potential registers zp ZP_BYTE:57 [ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ] : zp ZP_BYTE:57 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:58 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ] : zp ZP_BYTE:58 , reg byte x , 
Potential registers zp ZP_BYTE:59 [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ] : zp ZP_BYTE:59 , reg byte x , 
Potential registers zp ZP_WORD:60 [ mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 ] : zp ZP_WORD:60 , 
Potential registers zp ZP_BYTE:62 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ] : zp ZP_BYTE:62 , reg byte x , 
Potential registers zp ZP_WORD:63 [ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 ] : zp ZP_WORD:63 , 
Potential registers zp ZP_BYTE:65 [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ] : zp ZP_BYTE:65 , reg byte x , 
Potential registers zp ZP_BYTE:66 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ] : zp ZP_BYTE:66 , reg byte x , 
Potential registers zp ZP_WORD:67 [ mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ] : zp ZP_WORD:67 , 
Potential registers zp ZP_BYTE:69 [ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ] : zp ZP_BYTE:69 , reg byte x , 
Potential registers zp ZP_BYTE:70 [ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ] : zp ZP_BYTE:70 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:71 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ] : zp ZP_BYTE:71 , reg byte x , 
Potential registers zp ZP_BYTE:72 [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ] : zp ZP_BYTE:72 , reg byte x , 
Potential registers zp ZP_WORD:73 [ mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 ] : zp ZP_WORD:73 , 
Potential registers zp ZP_WORD:75 [ mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 ] : zp ZP_WORD:75 , 
Potential registers zp ZP_BYTE:77 [ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ] : zp ZP_BYTE:77 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:78 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ] : zp ZP_BYTE:78 , reg byte x , 
Potential registers zp ZP_BYTE:79 [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ] : zp ZP_BYTE:79 , reg byte x , 
Potential registers zp ZP_WORD:80 [ mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 ] : zp ZP_WORD:80 , 
Potential registers zp ZP_WORD:82 [ mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 ] : zp ZP_WORD:82 , 
Potential registers zp ZP_BYTE:84 [ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ] : zp ZP_BYTE:84 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:85 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ] : zp ZP_BYTE:85 , reg byte x , 
Potential registers zp ZP_BYTE:86 [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ] : zp ZP_BYTE:86 , reg byte x , 
Potential registers zp ZP_WORD:87 [ mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 ] : zp ZP_WORD:87 , 
Potential registers zp ZP_WORD:89 [ mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 ] : zp ZP_WORD:89 , 
Potential registers zp ZP_BYTE:91 [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ] : zp ZP_BYTE:91 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:92 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ] : zp ZP_BYTE:92 , reg byte x , 
Potential registers zp ZP_BYTE:93 [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ] : zp ZP_BYTE:93 , reg byte x , 
Potential registers zp ZP_WORD:94 [ mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 ] : zp ZP_WORD:94 , 
Potential registers zp ZP_BYTE:96 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ] : zp ZP_BYTE:96 , reg byte x , 
Potential registers zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] : zp ZP_BYTE:97 , reg byte x , 
Potential registers zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] : zp ZP_BYTE:98 , reg byte x , 
Potential registers zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] : zp ZP_BYTE:99 , reg byte x , 
Potential registers zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] : zp ZP_BYTE:100 , reg byte x , 
Potential registers zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] : zp ZP_BYTE:101 , reg byte x , 
Potential registers zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] : zp ZP_BYTE:102 , reg byte x , 
Potential registers zp ZP_BYTE:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] : zp ZP_BYTE:103 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:104 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] : zp ZP_BYTE:104 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#0 bitmap_line_ydxi::xd#1 ] : zp ZP_BYTE:105 , reg byte x , 
Potential registers zp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 ] : zp ZP_BYTE:106 , reg byte x , 
Potential registers zp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#0 bitmap_line_ydxi::y1#1 ] : zp ZP_BYTE:107 , reg byte x , 
Potential registers zp ZP_BYTE:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] : zp ZP_BYTE:108 , reg byte x , 
Potential registers zp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#2 ] : zp ZP_BYTE:109 , reg byte x , 
Potential registers zp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] : zp ZP_BYTE:110 , reg byte x , 
Potential registers zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] : zp ZP_BYTE:111 , reg byte x , 
Potential registers zp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] : zp ZP_BYTE:112 , reg byte x , 
Potential registers zp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] : zp ZP_BYTE:113 , reg byte x , 
Potential registers zp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] : zp ZP_BYTE:114 , reg byte x , 
Potential registers zp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] : zp ZP_BYTE:115 , reg byte x , 
Potential registers zp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] : zp ZP_BYTE:116 , reg byte x , 
Potential registers zp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] : zp ZP_BYTE:117 , reg byte x , 
Potential registers zp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] : zp ZP_BYTE:118 , reg byte x , 
Potential registers zp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] : zp ZP_BYTE:119 , reg byte x , 
Potential registers zp ZP_BYTE:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] : zp ZP_BYTE:120 , reg byte x , 
Potential registers zp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] : zp ZP_BYTE:121 , reg byte x , 
Potential registers zp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] : zp ZP_BYTE:122 , reg byte x , 
Potential registers zp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] : zp ZP_BYTE:123 , reg byte x , 
Potential registers zp ZP_WORD:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] : zp ZP_WORD:124 , 
Potential registers zp ZP_BYTE:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ] : zp ZP_BYTE:126 , reg byte x , 
Potential registers zp ZP_BYTE:127 [ bitmap_init::x#2 bitmap_init::x#1 ] : zp ZP_BYTE:127 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:128 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] : zp ZP_BYTE:128 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:129 [ bitmap_init::y#2 bitmap_init::y#1 ] : zp ZP_BYTE:129 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] : zp ZP_WORD:130 , 
Potential registers zp ZP_BYTE:132 [ mode_mcchar::i#2 mode_mcchar::i#1 ] : zp ZP_BYTE:132 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:133 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ] : zp ZP_BYTE:133 , reg byte x , 
Potential registers zp ZP_BYTE:134 [ mode_mcchar::cx#2 mode_mcchar::cx#1 ] : zp ZP_BYTE:134 , reg byte x , 
Potential registers zp ZP_WORD:135 [ mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 ] : zp ZP_WORD:135 , 
Potential registers zp ZP_WORD:137 [ mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 ] : zp ZP_WORD:137 , 
Potential registers zp ZP_BYTE:139 [ mode_ecmchar::i#2 mode_ecmchar::i#1 ] : zp ZP_BYTE:139 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:140 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ] : zp ZP_BYTE:140 , reg byte x , 
Potential registers zp ZP_BYTE:141 [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ] : zp ZP_BYTE:141 , reg byte x , 
Potential registers zp ZP_WORD:142 [ mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 ] : zp ZP_WORD:142 , 
Potential registers zp ZP_WORD:144 [ mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 ] : zp ZP_WORD:144 , 
Potential registers zp ZP_BYTE:146 [ mode_stdchar::i#2 mode_stdchar::i#1 ] : zp ZP_BYTE:146 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:147 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ] : zp ZP_BYTE:147 , reg byte x , 
Potential registers zp ZP_BYTE:148 [ mode_stdchar::cx#2 mode_stdchar::cx#1 ] : zp ZP_BYTE:148 , reg byte x , 
Potential registers zp ZP_WORD:149 [ mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 ] : zp ZP_WORD:149 , 
Potential registers zp ZP_WORD:151 [ mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ] : zp ZP_WORD:151 , 
Potential registers zp ZP_WORD:153 [ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ] : zp ZP_WORD:153 , 
Potential registers zp ZP_WORD:155 [ print_char_cursor#17 print_char_cursor#19 print_char_cursor#103 print_char_cursor#32 print_char_cursor#1 ] : zp ZP_WORD:155 , 
Potential registers zp ZP_WORD:157 [ print_line_cursor#18 print_line_cursor#17 print_line_cursor#19 ] : zp ZP_WORD:157 , 
Potential registers zp ZP_WORD:159 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:159 , 
Potential registers zp ZP_BYTE:161 [ keyboard_key_pressed::return#2 ] : zp ZP_BYTE:161 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:162 [ menu::$29 ] : zp ZP_BYTE:162 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:163 [ keyboard_key_pressed::return#24 ] : zp ZP_BYTE:163 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:164 [ menu::$33 ] : zp ZP_BYTE:164 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:165 [ keyboard_key_pressed::return#25 ] : zp ZP_BYTE:165 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:166 [ menu::$37 ] : zp ZP_BYTE:166 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:167 [ keyboard_key_pressed::return#26 ] : zp ZP_BYTE:167 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:168 [ menu::$41 ] : zp ZP_BYTE:168 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:169 [ keyboard_key_pressed::return#27 ] : zp ZP_BYTE:169 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:170 [ menu::$45 ] : zp ZP_BYTE:170 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:171 [ keyboard_key_pressed::return#28 ] : zp ZP_BYTE:171 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:172 [ menu::$49 ] : zp ZP_BYTE:172 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:173 [ keyboard_key_pressed::return#29 ] : zp ZP_BYTE:173 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:174 [ menu::$53 ] : zp ZP_BYTE:174 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:175 [ keyboard_key_pressed::return#30 ] : zp ZP_BYTE:175 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:176 [ menu::$57 ] : zp ZP_BYTE:176 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:177 [ keyboard_key_pressed::return#10 ] : zp ZP_BYTE:177 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:178 [ menu::$61 ] : zp ZP_BYTE:178 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:179 [ keyboard_key_pressed::return#11 ] : zp ZP_BYTE:179 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:180 [ menu::$65 ] : zp ZP_BYTE:180 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:181 [ keyboard_key_pressed::return#12 ] : zp ZP_BYTE:181 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:182 [ menu::$69 ] : zp ZP_BYTE:182 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:183 [ keyboard_key_pressed::return#13 ] : zp ZP_BYTE:183 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:184 [ menu::$73 ] : zp ZP_BYTE:184 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:185 [ mode_8bppchunkybmm::$23 ] : zp ZP_WORD:185 , 
Potential registers zp ZP_BYTE:187 [ mode_8bppchunkybmm::c#0 ] : zp ZP_BYTE:187 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:188 [ keyboard_key_pressed::return#14 ] : zp ZP_BYTE:188 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:189 [ mode_ctrl::$1 ] : zp ZP_BYTE:189 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:190 [ keyboard_key_pressed::return#15 ] : zp ZP_BYTE:190 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:191 [ mode_ctrl::$4 ] : zp ZP_BYTE:191 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:192 [ keyboard_key_pressed::return#16 ] : zp ZP_BYTE:192 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:193 [ mode_ctrl::$8 ] : zp ZP_BYTE:193 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:194 [ keyboard_key_pressed::return#17 ] : zp ZP_BYTE:194 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:195 [ mode_ctrl::$12 ] : zp ZP_BYTE:195 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:196 [ keyboard_key_pressed::return#18 ] : zp ZP_BYTE:196 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:197 [ mode_ctrl::$16 ] : zp ZP_BYTE:197 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:198 [ keyboard_key_pressed::return#19 ] : zp ZP_BYTE:198 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:199 [ mode_ctrl::$20 ] : zp ZP_BYTE:199 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:200 [ keyboard_key_pressed::return#20 ] : zp ZP_BYTE:200 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:201 [ mode_ctrl::$24 ] : zp ZP_BYTE:201 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:202 [ keyboard_key_pressed::return#21 ] : zp ZP_BYTE:202 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:203 [ mode_ctrl::$28 ] : zp ZP_BYTE:203 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:204 [ keyboard_key_pressed::colidx#0 ] : zp ZP_BYTE:204 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:205 [ keyboard_key_pressed::rowidx#0 ] : zp ZP_BYTE:205 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:206 [ keyboard_matrix_read::rowid#0 ] : zp ZP_BYTE:206 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:207 [ keyboard_matrix_read::return#2 ] : zp ZP_BYTE:207 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:208 [ keyboard_key_pressed::$2 ] : zp ZP_BYTE:208 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:209 [ keyboard_key_pressed::return#0 ] : zp ZP_BYTE:209 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:210 [ keyboard_matrix_read::return#0 ] : zp ZP_BYTE:210 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:211 [ mode_8bpppixelcell::$13 ] : zp ZP_BYTE:211 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:212 [ mode_8bpppixelcell::$14 ] : zp ZP_BYTE:212 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:213 [ mode_8bpppixelcell::$15 ] : zp ZP_BYTE:213 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:214 [ mode_8bpppixelcell::$16 ] : zp ZP_BYTE:214 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:215 [ mode_8bpppixelcell::$19 ] : zp ZP_BYTE:215 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:216 [ mode_sixsfred::$16 ] : zp ZP_BYTE:216 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:217 [ mode_sixsfred::$17 ] : zp ZP_BYTE:217 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:218 [ mode_sixsfred::$20 ] : zp ZP_BYTE:218 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:219 [ mode_sixsfred::row#0 ] : zp ZP_BYTE:219 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:220 [ mode_twoplanebitmap::$15 ] : zp ZP_BYTE:220 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:221 [ mode_twoplanebitmap::$16 ] : zp ZP_BYTE:221 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:222 [ mode_twoplanebitmap::$17 ] : zp ZP_BYTE:222 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:223 [ mode_twoplanebitmap::$18 ] : zp ZP_BYTE:223 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:224 [ mode_twoplanebitmap::$21 ] : zp ZP_BYTE:224 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:225 [ mode_sixsfred2::$14 ] : zp ZP_BYTE:225 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:226 [ mode_sixsfred2::$15 ] : zp ZP_BYTE:226 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:227 [ mode_sixsfred2::$16 ] : zp ZP_BYTE:227 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:228 [ mode_sixsfred2::$17 ] : zp ZP_BYTE:228 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:229 [ mode_sixsfred2::$20 ] : zp ZP_BYTE:229 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:230 [ mode_sixsfred2::row#0 ] : zp ZP_BYTE:230 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:231 [ mode_hicolmcchar::$25 ] : zp ZP_BYTE:231 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:232 [ mode_hicolmcchar::$26 ] : zp ZP_BYTE:232 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:233 [ mode_hicolmcchar::$27 ] : zp ZP_BYTE:233 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:234 [ mode_hicolmcchar::v#0 ] : zp ZP_BYTE:234 , reg byte a , reg byte x , 
Potential registers zp ZP_BYTE:235 [ mode_hicolecmchar::$25 ] : zp ZP_BYTE:235 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:236 [ mode_hicolecmchar::$26 ] : zp ZP_BYTE:236 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:237 [ mode_hicolecmchar::$27 ] : zp ZP_BYTE:237 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:238 [ mode_hicolecmchar::v#0 ] : zp ZP_BYTE:238 , reg byte a , reg byte x , 
Potential registers zp ZP_BYTE:239 [ mode_hicolstdchar::$24 ] : zp ZP_BYTE:239 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:240 [ mode_hicolstdchar::$25 ] : zp ZP_BYTE:240 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:241 [ mode_hicolstdchar::$26 ] : zp ZP_BYTE:241 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:242 [ mode_hicolstdchar::v#0 ] : zp ZP_BYTE:242 , reg byte a , reg byte x , 
Potential registers zp ZP_BYTE:243 [ mode_stdbitmap::$19 ] : zp ZP_BYTE:243 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:244 [ mode_stdbitmap::col#0 ] : zp ZP_BYTE:244 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:245 [ mode_stdbitmap::col2#0 ] : zp ZP_BYTE:245 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:246 [ mode_stdbitmap::$22 ] : zp ZP_BYTE:246 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:247 [ mode_stdbitmap::$23 ] : zp ZP_BYTE:247 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:248 [ bitmap_line::x0#0 ] : zp ZP_BYTE:248 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:249 [ bitmap_line::x1#0 ] : zp ZP_BYTE:249 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:250 [ bitmap_line::y0#0 ] : zp ZP_BYTE:250 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:251 [ bitmap_line::y1#0 ] : zp ZP_BYTE:251 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:252 [ bitmap_line::xd#2 ] : zp ZP_BYTE:252 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:253 [ bitmap_line::yd#2 ] : zp ZP_BYTE:253 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:254 [ bitmap_line::yd#1 ] : zp ZP_BYTE:254 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:255 [ bitmap_line::xd#1 ] : zp ZP_BYTE:255 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:256 [ bitmap_line::yd#10 ] : zp ZP_BYTE:256 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:257 [ bitmap_line::yd#11 ] : zp ZP_BYTE:257 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:258 [ bitmap_line_xdyi::$6 ] : zp ZP_BYTE:258 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:259 [ bitmap_plot::plotter_x#0 ] : zp ZP_WORD:259 , 
Potential registers zp ZP_WORD:261 [ bitmap_plot::plotter_y#0 ] : zp ZP_WORD:261 , 
Potential registers zp ZP_WORD:263 [ bitmap_plot::$0 ] : zp ZP_WORD:263 , 
Potential registers zp ZP_BYTE:265 [ bitmap_plot::$1 ] : zp ZP_BYTE:265 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:266 [ bitmap_line_ydxi::$6 ] : zp ZP_BYTE:266 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:267 [ bitmap_line_xdyd::$6 ] : zp ZP_BYTE:267 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:268 [ bitmap_line_ydxd::$6 ] : zp ZP_BYTE:268 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:269 [ bitmap_clear::$3 ] : zp ZP_WORD:269 , 
Potential registers zp ZP_BYTE:271 [ bitmap_init::$0 ] : zp ZP_BYTE:271 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:272 [ bitmap_init::$6 ] : zp ZP_BYTE:272 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:273 [ bitmap_init::$7 ] : zp ZP_BYTE:273 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:274 [ bitmap_init::$8 ] : zp ZP_BYTE:274 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:275 [ bitmap_init::$9 ] : zp ZP_BYTE:275 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:276 [ bitmap_init::$10 ] : zp ZP_BYTE:276 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:277 [ mode_mcchar::$25 ] : zp ZP_BYTE:277 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:278 [ mode_mcchar::$26 ] : zp ZP_BYTE:278 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:279 [ mode_mcchar::$27 ] : zp ZP_BYTE:279 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:280 [ mode_mcchar::$28 ] : zp ZP_BYTE:280 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:281 [ mode_mcchar::$29 ] : zp ZP_BYTE:281 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:282 [ mode_mcchar::$30 ] : zp ZP_BYTE:282 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:283 [ mode_ecmchar::$25 ] : zp ZP_BYTE:283 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:284 [ mode_ecmchar::$26 ] : zp ZP_BYTE:284 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:285 [ mode_ecmchar::$27 ] : zp ZP_BYTE:285 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:286 [ mode_ecmchar::$28 ] : zp ZP_BYTE:286 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:287 [ mode_ecmchar::$29 ] : zp ZP_BYTE:287 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:288 [ mode_ecmchar::$30 ] : zp ZP_BYTE:288 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:289 [ mode_stdchar::$24 ] : zp ZP_BYTE:289 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:290 [ mode_stdchar::$25 ] : zp ZP_BYTE:290 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:291 [ mode_stdchar::$26 ] : zp ZP_BYTE:291 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:292 [ mode_stdchar::$27 ] : zp ZP_BYTE:292 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:293 [ mode_stdchar::$28 ] : zp ZP_BYTE:293 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:294 [ mode_stdchar::$29 ] : zp ZP_BYTE:294 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:295 [ print_str_lines::ch#0 ] : zp ZP_BYTE:295 , reg byte a , reg byte x , 

REGISTER UPLIFT SCOPES
Uplift Scope [mode_8bpppixelcell] 40,004: zp ZP_BYTE:30 [ mode_8bpppixelcell::c#2 mode_8bpppixelcell::c#3 ] 20,002: zp ZP_BYTE:215 [ mode_8bpppixelcell::$19 ] 17,223.94: zp ZP_BYTE:29 [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ] 10,430.64: zp ZP_BYTE:25 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#0 mode_8bpppixelcell::bits#1 ] 8,415.22: zp ZP_WORD:26 [ mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 ] 7,793.36: zp ZP_BYTE:28 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ] 2,002: zp ZP_BYTE:211 [ mode_8bpppixelcell::$13 ] 2,002: zp ZP_BYTE:213 [ mode_8bpppixelcell::$15 ] 2,002: zp ZP_BYTE:214 [ mode_8bpppixelcell::$16 ] 1,930.5: zp ZP_BYTE:18 [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ] 1,885.44: zp ZP_WORD:22 [ mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 ] 1,644.5: zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ] 1,139.93: zp ZP_WORD:19 [ mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 ] 1,001: zp ZP_BYTE:212 [ mode_8bpppixelcell::$14 ] 353.5: zp ZP_BYTE:16 [ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ] 271.8: zp ZP_BYTE:17 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ] 163.38: zp ZP_BYTE:21 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ] 
Uplift Scope [mode_ctrl] 17,693.35: zp ZP_BYTE:13 [ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ] 2,002: zp ZP_BYTE:189 [ mode_ctrl::$1 ] 2,002: zp ZP_BYTE:191 [ mode_ctrl::$4 ] 2,002: zp ZP_BYTE:193 [ mode_ctrl::$8 ] 2,002: zp ZP_BYTE:195 [ mode_ctrl::$12 ] 2,002: zp ZP_BYTE:197 [ mode_ctrl::$16 ] 2,002: zp ZP_BYTE:199 [ mode_ctrl::$20 ] 2,002: zp ZP_BYTE:201 [ mode_ctrl::$24 ] 2,002: zp ZP_BYTE:203 [ mode_ctrl::$28 ] 
Uplift Scope [mode_twoplanebitmap] 5,848: zp ZP_WORD:50 [ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ] 2,174.6: zp ZP_WORD:54 [ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ] 2,168.83: zp ZP_BYTE:56 [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ] 2,002: zp ZP_BYTE:220 [ mode_twoplanebitmap::$15 ] 2,002: zp ZP_BYTE:222 [ mode_twoplanebitmap::$17 ] 2,002: zp ZP_BYTE:223 [ mode_twoplanebitmap::$18 ] 2,002: zp ZP_BYTE:224 [ mode_twoplanebitmap::$21 ] 1,930.5: zp ZP_BYTE:46 [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ] 1,751.75: zp ZP_BYTE:52 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ] 1,139.93: zp ZP_WORD:47 [ mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 ] 1,001: zp ZP_BYTE:221 [ mode_twoplanebitmap::$16 ] 353.5: zp ZP_BYTE:44 [ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ] 271.8: zp ZP_BYTE:45 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ] 260.86: zp ZP_BYTE:49 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ] 185.17: zp ZP_BYTE:53 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ] 
Uplift Scope [mode_sixsfred2] 2,174.6: zp ZP_WORD:67 [ mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ] 2,168.83: zp ZP_BYTE:69 [ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ] 2,002: zp ZP_BYTE:225 [ mode_sixsfred2::$14 ] 2,002: zp ZP_BYTE:227 [ mode_sixsfred2::$16 ] 2,002: zp ZP_BYTE:228 [ mode_sixsfred2::$17 ] 2,002: zp ZP_BYTE:229 [ mode_sixsfred2::$20 ] 2,002: zp ZP_BYTE:230 [ mode_sixsfred2::row#0 ] 1,930.5: zp ZP_BYTE:59 [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ] 1,901.9: zp ZP_BYTE:65 [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ] 1,398.6: zp ZP_WORD:63 [ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 ] 1,139.93: zp ZP_WORD:60 [ mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 ] 1,001: zp ZP_BYTE:226 [ mode_sixsfred2::$15 ] 353.5: zp ZP_BYTE:57 [ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ] 301.88: zp ZP_BYTE:62 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ] 271.8: zp ZP_BYTE:58 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ] 185.17: zp ZP_BYTE:66 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ] 
Uplift Scope [mode_sixsfred] 2,174.6: zp ZP_WORD:41 [ mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 ] 2,168.83: zp ZP_BYTE:43 [ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ] 2,102.1: zp ZP_BYTE:33 [ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ] 2,002: zp ZP_BYTE:216 [ mode_sixsfred::$16 ] 2,002: zp ZP_BYTE:217 [ mode_sixsfred::$17 ] 2,002: zp ZP_BYTE:218 [ mode_sixsfred::$20 ] 2,002: zp ZP_BYTE:219 [ mode_sixsfred::row#0 ] 1,901.9: zp ZP_BYTE:39 [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ] 1,398.6: zp ZP_WORD:34 [ mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 ] 1,398.6: zp ZP_WORD:37 [ mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 ] 353.5: zp ZP_BYTE:31 [ mode_sixsfred::i#2 mode_sixsfred::i#1 ] 301.88: zp ZP_BYTE:32 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ] 301.88: zp ZP_BYTE:36 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ] 185.17: zp ZP_BYTE:40 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ] 
Uplift Scope [keyboard_key_pressed] 2,002: zp ZP_BYTE:188 [ keyboard_key_pressed::return#14 ] 2,002: zp ZP_BYTE:190 [ keyboard_key_pressed::return#15 ] 2,002: zp ZP_BYTE:192 [ keyboard_key_pressed::return#16 ] 2,002: zp ZP_BYTE:194 [ keyboard_key_pressed::return#17 ] 2,002: zp ZP_BYTE:196 [ keyboard_key_pressed::return#18 ] 2,002: zp ZP_BYTE:198 [ keyboard_key_pressed::return#19 ] 2,002: zp ZP_BYTE:200 [ keyboard_key_pressed::return#20 ] 2,002: zp ZP_BYTE:202 [ keyboard_key_pressed::return#21 ] 419.18: zp ZP_BYTE:209 [ keyboard_key_pressed::return#0 ] 202: zp ZP_BYTE:161 [ keyboard_key_pressed::return#2 ] 202: zp ZP_BYTE:163 [ keyboard_key_pressed::return#24 ] 202: zp ZP_BYTE:165 [ keyboard_key_pressed::return#25 ] 202: zp ZP_BYTE:167 [ keyboard_key_pressed::return#26 ] 202: zp ZP_BYTE:169 [ keyboard_key_pressed::return#27 ] 202: zp ZP_BYTE:171 [ keyboard_key_pressed::return#28 ] 202: zp ZP_BYTE:173 [ keyboard_key_pressed::return#29 ] 202: zp ZP_BYTE:175 [ keyboard_key_pressed::return#30 ] 202: zp ZP_BYTE:177 [ keyboard_key_pressed::return#10 ] 202: zp ZP_BYTE:179 [ keyboard_key_pressed::return#11 ] 202: zp ZP_BYTE:181 [ keyboard_key_pressed::return#12 ] 202: zp ZP_BYTE:183 [ keyboard_key_pressed::return#13 ] 4: zp ZP_BYTE:205 [ keyboard_key_pressed::rowidx#0 ] 4: zp ZP_BYTE:208 [ keyboard_key_pressed::$2 ] 2: zp ZP_BYTE:14 [ keyboard_key_pressed::key#20 ] 0.67: zp ZP_BYTE:204 [ keyboard_key_pressed::colidx#0 ] 
Uplift Scope [mode_stdchar] 2,002: zp ZP_BYTE:289 [ mode_stdchar::$24 ] 2,002: zp ZP_BYTE:290 [ mode_stdchar::$25 ] 2,002: zp ZP_BYTE:291 [ mode_stdchar::$26 ] 2,002: zp ZP_BYTE:293 [ mode_stdchar::$28 ] 2,002: zp ZP_BYTE:294 [ mode_stdchar::$29 ] 1,865.5: zp ZP_BYTE:148 [ mode_stdchar::cx#2 mode_stdchar::cx#1 ] 1,169.18: zp ZP_WORD:149 [ mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 ] 1,001: zp ZP_BYTE:292 [ mode_stdchar::$27 ] 933: zp ZP_WORD:151 [ mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ] 353.5: zp ZP_BYTE:146 [ mode_stdchar::i#2 mode_stdchar::i#1 ] 308.93: zp ZP_BYTE:147 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ] 
Uplift Scope [mode_ecmchar] 2,002: zp ZP_BYTE:283 [ mode_ecmchar::$25 ] 2,002: zp ZP_BYTE:284 [ mode_ecmchar::$26 ] 2,002: zp ZP_BYTE:285 [ mode_ecmchar::$27 ] 2,002: zp ZP_BYTE:287 [ mode_ecmchar::$29 ] 2,002: zp ZP_BYTE:288 [ mode_ecmchar::$30 ] 1,865.5: zp ZP_BYTE:141 [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ] 1,169.18: zp ZP_WORD:142 [ mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 ] 1,001: zp ZP_BYTE:286 [ mode_ecmchar::$28 ] 933: zp ZP_WORD:144 [ mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 ] 353.5: zp ZP_BYTE:139 [ mode_ecmchar::i#2 mode_ecmchar::i#1 ] 308.93: zp ZP_BYTE:140 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ] 
Uplift Scope [mode_mcchar] 2,002: zp ZP_BYTE:277 [ mode_mcchar::$25 ] 2,002: zp ZP_BYTE:278 [ mode_mcchar::$26 ] 2,002: zp ZP_BYTE:279 [ mode_mcchar::$27 ] 2,002: zp ZP_BYTE:281 [ mode_mcchar::$29 ] 2,002: zp ZP_BYTE:282 [ mode_mcchar::$30 ] 1,865.5: zp ZP_BYTE:134 [ mode_mcchar::cx#2 mode_mcchar::cx#1 ] 1,169.18: zp ZP_WORD:135 [ mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 ] 1,001: zp ZP_BYTE:280 [ mode_mcchar::$28 ] 933: zp ZP_WORD:137 [ mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 ] 353.5: zp ZP_BYTE:132 [ mode_mcchar::i#2 mode_mcchar::i#1 ] 308.93: zp ZP_BYTE:133 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ] 
Uplift Scope [bitmap_plot] 10,012: zp ZP_BYTE:104 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] 5,006.5: zp ZP_BYTE:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] 4: zp ZP_WORD:261 [ bitmap_plot::plotter_y#0 ] 4: zp ZP_BYTE:265 [ bitmap_plot::$1 ] 2: zp ZP_WORD:259 [ bitmap_plot::plotter_x#0 ] 1: zp ZP_WORD:263 [ bitmap_plot::$0 ] 
Uplift Scope [mode_8bppchunkybmm] 3,575.14: zp ZP_BYTE:9 [ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ] 2,925.35: zp ZP_WORD:10 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 ] 2,002: zp ZP_WORD:185 [ mode_8bppchunkybmm::$23 ] 2,002: zp ZP_BYTE:187 [ mode_8bppchunkybmm::c#0 ] 1,801.8: zp ZP_WORD:7 [ mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 ] 353.5: zp ZP_BYTE:5 [ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ] 244.04: zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ] 
Uplift Scope [mode_stdbitmap] 2,002: zp ZP_BYTE:243 [ mode_stdbitmap::$19 ] 2,002: zp ZP_BYTE:246 [ mode_stdbitmap::$22 ] 2,002: zp ZP_BYTE:247 [ mode_stdbitmap::$23 ] 1,876.88: zp ZP_BYTE:93 [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ] 1,501.5: zp ZP_BYTE:244 [ mode_stdbitmap::col#0 ] 1,066.03: zp ZP_WORD:94 [ mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 ] 1,001: zp ZP_BYTE:245 [ mode_stdbitmap::col2#0 ] 353.5: zp ZP_BYTE:91 [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ] 260.86: zp ZP_BYTE:92 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ] 252.5: zp ZP_BYTE:96 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ] 
Uplift Scope [bitmap_line_xdyi] 4,742.47: zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] 2,579.29: zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] 2,002: zp ZP_BYTE:258 [ bitmap_line_xdyi::$6 ] 1,131.22: zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] 147.29: zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] 79.93: zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] 74.45: zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] 
Uplift Scope [bitmap_line_xdyd] 4,742.47: zp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] 2,579.29: zp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] 2,002: zp ZP_BYTE:267 [ bitmap_line_xdyd::$6 ] 1,131.22: zp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] 147.29: zp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] 79.93: zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] 74.45: zp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] 
Uplift Scope [bitmap_line_ydxi] 4,742.47: zp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] 2,579.29: zp ZP_BYTE:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] 2,002: zp ZP_BYTE:266 [ bitmap_line_ydxi::$6 ] 1,131.22: zp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#2 ] 147.29: zp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 ] 79.93: zp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#0 bitmap_line_ydxi::xd#1 ] 74.45: zp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#0 bitmap_line_ydxi::y1#1 ] 
Uplift Scope [bitmap_line_ydxd] 4,742.47: zp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] 2,579.29: zp ZP_BYTE:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] 2,002: zp ZP_BYTE:268 [ bitmap_line_ydxd::$6 ] 1,131.22: zp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] 147.29: zp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] 79.93: zp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] 74.45: zp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Uplift Scope [mode_hicolstdchar] 2,002: zp ZP_BYTE:239 [ mode_hicolstdchar::$24 ] 2,002: zp ZP_BYTE:241 [ mode_hicolstdchar::$26 ] 1,835.17: zp ZP_BYTE:86 [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ] 1,019.76: zp ZP_WORD:87 [ mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 ] 1,010.6: zp ZP_WORD:89 [ mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 ] 1,001: zp ZP_BYTE:240 [ mode_hicolstdchar::$25 ] 1,001: zp ZP_BYTE:242 [ mode_hicolstdchar::v#0 ] 353.5: zp ZP_BYTE:84 [ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ] 251.75: zp ZP_BYTE:85 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ] 
Uplift Scope [mode_hicolecmchar] 2,002: zp ZP_BYTE:235 [ mode_hicolecmchar::$25 ] 2,002: zp ZP_BYTE:237 [ mode_hicolecmchar::$27 ] 1,835.17: zp ZP_BYTE:79 [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ] 1,019.76: zp ZP_WORD:80 [ mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 ] 1,010.6: zp ZP_WORD:82 [ mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 ] 1,001: zp ZP_BYTE:236 [ mode_hicolecmchar::$26 ] 1,001: zp ZP_BYTE:238 [ mode_hicolecmchar::v#0 ] 353.5: zp ZP_BYTE:77 [ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ] 251.75: zp ZP_BYTE:78 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ] 
Uplift Scope [mode_hicolmcchar] 2,002: zp ZP_BYTE:231 [ mode_hicolmcchar::$25 ] 2,002: zp ZP_BYTE:233 [ mode_hicolmcchar::$27 ] 1,835.17: zp ZP_BYTE:72 [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ] 1,019.76: zp ZP_WORD:73 [ mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 ] 1,010.6: zp ZP_WORD:75 [ mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 ] 1,001: zp ZP_BYTE:232 [ mode_hicolmcchar::$26 ] 1,001: zp ZP_BYTE:234 [ mode_hicolmcchar::v#0 ] 353.5: zp ZP_BYTE:70 [ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ] 251.75: zp ZP_BYTE:71 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ] 
Uplift Scope [] 3,698: zp ZP_WORD:155 [ print_char_cursor#17 print_char_cursor#19 print_char_cursor#103 print_char_cursor#32 print_char_cursor#1 ] 2,653.58: zp ZP_WORD:157 [ print_line_cursor#18 print_line_cursor#17 print_line_cursor#19 ] 111.43: zp ZP_BYTE:12 [ dtv_control#114 dtv_control#145 dtv_control#17 ] 
Uplift Scope [bitmap_clear] 2,180.6: zp ZP_WORD:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] 2,168.83: zp ZP_BYTE:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ] 185.17: zp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] 2: zp ZP_WORD:269 [ bitmap_clear::$3 ] 
Uplift Scope [menu] 353.5: zp ZP_BYTE:2 [ menu::i#2 menu::i#1 ] 303: zp ZP_WORD:3 [ menu::c#2 menu::c#1 ] 202: zp ZP_BYTE:162 [ menu::$29 ] 202: zp ZP_BYTE:164 [ menu::$33 ] 202: zp ZP_BYTE:166 [ menu::$37 ] 202: zp ZP_BYTE:168 [ menu::$41 ] 202: zp ZP_BYTE:170 [ menu::$45 ] 202: zp ZP_BYTE:172 [ menu::$49 ] 202: zp ZP_BYTE:174 [ menu::$53 ] 202: zp ZP_BYTE:176 [ menu::$57 ] 202: zp ZP_BYTE:178 [ menu::$61 ] 202: zp ZP_BYTE:180 [ menu::$65 ] 202: zp ZP_BYTE:182 [ menu::$69 ] 202: zp ZP_BYTE:184 [ menu::$73 ] 
Uplift Scope [dtvSetCpuBankSegment1] 3,005: zp ZP_BYTE:15 [ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ] 
Uplift Scope [print_str_lines] 1,937.17: zp ZP_WORD:153 [ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ] 667.33: zp ZP_BYTE:295 [ print_str_lines::ch#0 ] 
Uplift Scope [bitmap_init] 359.11: zp ZP_WORD:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] 228.93: zp ZP_BYTE:128 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] 218.83: zp ZP_BYTE:127 [ bitmap_init::x#2 bitmap_init::x#1 ] 206.59: zp ZP_BYTE:129 [ bitmap_init::y#2 bitmap_init::y#1 ] 202: zp ZP_BYTE:271 [ bitmap_init::$0 ] 202: zp ZP_BYTE:273 [ bitmap_init::$7 ] 202: zp ZP_BYTE:274 [ bitmap_init::$8 ] 202: zp ZP_BYTE:275 [ bitmap_init::$9 ] 202: zp ZP_BYTE:276 [ bitmap_init::$10 ] 101: zp ZP_BYTE:272 [ bitmap_init::$6 ] 
Uplift Scope [print_cls] 303: zp ZP_WORD:159 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [bitmap_line] 6.25: zp ZP_BYTE:251 [ bitmap_line::y1#0 ] 5.95: zp ZP_BYTE:250 [ bitmap_line::y0#0 ] 5.41: zp ZP_BYTE:249 [ bitmap_line::x1#0 ] 5.17: zp ZP_BYTE:248 [ bitmap_line::x0#0 ] 0.89: zp ZP_BYTE:253 [ bitmap_line::yd#2 ] 0.89: zp ZP_BYTE:254 [ bitmap_line::yd#1 ] 0.89: zp ZP_BYTE:256 [ bitmap_line::yd#10 ] 0.89: zp ZP_BYTE:257 [ bitmap_line::yd#11 ] 0.7: zp ZP_BYTE:252 [ bitmap_line::xd#2 ] 0.7: zp ZP_BYTE:255 [ bitmap_line::xd#1 ] 
Uplift Scope [keyboard_matrix_read] 4: zp ZP_BYTE:206 [ keyboard_matrix_read::rowid#0 ] 4: zp ZP_BYTE:207 [ keyboard_matrix_read::return#2 ] 1.33: zp ZP_BYTE:210 [ keyboard_matrix_read::return#0 ] 
Uplift Scope [print_ln] 
Uplift Scope [print_set_screen] 
Uplift Scope [main] 

Uplifting [mode_8bpppixelcell] best 3633502 combination reg byte a [ mode_8bpppixelcell::c#2 mode_8bpppixelcell::c#3 ] reg byte a [ mode_8bpppixelcell::$19 ] zp ZP_BYTE:29 [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ] zp ZP_BYTE:25 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#0 mode_8bpppixelcell::bits#1 ] zp ZP_WORD:26 [ mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 ] zp ZP_BYTE:28 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ] zp ZP_BYTE:211 [ mode_8bpppixelcell::$13 ] zp ZP_BYTE:213 [ mode_8bpppixelcell::$15 ] zp ZP_BYTE:214 [ mode_8bpppixelcell::$16 ] zp ZP_BYTE:18 [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ] zp ZP_WORD:22 [ mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 ] zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ] zp ZP_WORD:19 [ mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 ] zp ZP_BYTE:212 [ mode_8bpppixelcell::$14 ] zp ZP_BYTE:16 [ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ] zp ZP_BYTE:17 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ] zp ZP_BYTE:21 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ] 
Limited combination testing to 10 combinations of 1572864 possible.
Uplifting [mode_ctrl] best 3605602 combination reg byte x [ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ] reg byte a [ mode_ctrl::$1 ] zp ZP_BYTE:191 [ mode_ctrl::$4 ] zp ZP_BYTE:193 [ mode_ctrl::$8 ] zp ZP_BYTE:195 [ mode_ctrl::$12 ] zp ZP_BYTE:197 [ mode_ctrl::$16 ] zp ZP_BYTE:199 [ mode_ctrl::$20 ] zp ZP_BYTE:201 [ mode_ctrl::$24 ] zp ZP_BYTE:203 [ mode_ctrl::$28 ] 
Limited combination testing to 10 combinations of 196608 possible.
Uplifting [mode_twoplanebitmap] best 3590602 combination zp ZP_WORD:50 [ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ] zp ZP_WORD:54 [ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ] reg byte x [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ] reg byte a [ mode_twoplanebitmap::$15 ] zp ZP_BYTE:222 [ mode_twoplanebitmap::$17 ] zp ZP_BYTE:223 [ mode_twoplanebitmap::$18 ] zp ZP_BYTE:224 [ mode_twoplanebitmap::$21 ] zp ZP_BYTE:46 [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ] zp ZP_BYTE:52 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ] zp ZP_WORD:47 [ mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 ] zp ZP_BYTE:221 [ mode_twoplanebitmap::$16 ] zp ZP_BYTE:44 [ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ] zp ZP_BYTE:45 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ] zp ZP_BYTE:49 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ] zp ZP_BYTE:53 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ] 
Limited combination testing to 10 combinations of 196608 possible.
Uplifting [mode_sixsfred2] best 3575602 combination zp ZP_WORD:67 [ mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ] reg byte x [ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ] reg byte a [ mode_sixsfred2::$14 ] zp ZP_BYTE:227 [ mode_sixsfred2::$16 ] zp ZP_BYTE:228 [ mode_sixsfred2::$17 ] zp ZP_BYTE:229 [ mode_sixsfred2::$20 ] zp ZP_BYTE:230 [ mode_sixsfred2::row#0 ] zp ZP_BYTE:59 [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ] zp ZP_BYTE:65 [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ] zp ZP_WORD:63 [ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 ] zp ZP_WORD:60 [ mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 ] zp ZP_BYTE:226 [ mode_sixsfred2::$15 ] zp ZP_BYTE:57 [ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ] zp ZP_BYTE:62 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ] zp ZP_BYTE:58 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ] zp ZP_BYTE:66 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ] 
Limited combination testing to 10 combinations of 786432 possible.
Uplifting [mode_sixsfred] best 3550602 combination zp ZP_WORD:41 [ mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 ] reg byte x [ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ] reg byte x [ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ] reg byte a [ mode_sixsfred::$16 ] zp ZP_BYTE:217 [ mode_sixsfred::$17 ] zp ZP_BYTE:218 [ mode_sixsfred::$20 ] zp ZP_BYTE:219 [ mode_sixsfred::row#0 ] zp ZP_BYTE:39 [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ] zp ZP_WORD:34 [ mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 ] zp ZP_WORD:37 [ mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 ] zp ZP_BYTE:31 [ mode_sixsfred::i#2 mode_sixsfred::i#1 ] zp ZP_BYTE:32 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ] zp ZP_BYTE:36 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ] zp ZP_BYTE:40 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ] 
Limited combination testing to 10 combinations of 65536 possible.
Uplifting [mode_stdchar] best 3538602 combination reg byte a [ mode_stdchar::$24 ] reg byte a [ mode_stdchar::$25 ] zp ZP_BYTE:291 [ mode_stdchar::$26 ] zp ZP_BYTE:293 [ mode_stdchar::$28 ] zp ZP_BYTE:294 [ mode_stdchar::$29 ] zp ZP_BYTE:148 [ mode_stdchar::cx#2 mode_stdchar::cx#1 ] zp ZP_WORD:149 [ mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 ] zp ZP_BYTE:292 [ mode_stdchar::$27 ] zp ZP_WORD:151 [ mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ] zp ZP_BYTE:146 [ mode_stdchar::i#2 mode_stdchar::i#1 ] zp ZP_BYTE:147 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ] 
Limited combination testing to 10 combinations of 36864 possible.
Uplifting [mode_ecmchar] best 3526602 combination reg byte a [ mode_ecmchar::$25 ] reg byte a [ mode_ecmchar::$26 ] zp ZP_BYTE:285 [ mode_ecmchar::$27 ] zp ZP_BYTE:287 [ mode_ecmchar::$29 ] zp ZP_BYTE:288 [ mode_ecmchar::$30 ] zp ZP_BYTE:141 [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ] zp ZP_WORD:142 [ mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 ] zp ZP_BYTE:286 [ mode_ecmchar::$28 ] zp ZP_WORD:144 [ mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 ] zp ZP_BYTE:139 [ mode_ecmchar::i#2 mode_ecmchar::i#1 ] zp ZP_BYTE:140 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ] 
Limited combination testing to 10 combinations of 36864 possible.
Uplifting [mode_mcchar] best 3514602 combination reg byte a [ mode_mcchar::$25 ] reg byte a [ mode_mcchar::$26 ] zp ZP_BYTE:279 [ mode_mcchar::$27 ] zp ZP_BYTE:281 [ mode_mcchar::$29 ] zp ZP_BYTE:282 [ mode_mcchar::$30 ] zp ZP_BYTE:134 [ mode_mcchar::cx#2 mode_mcchar::cx#1 ] zp ZP_WORD:135 [ mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 ] zp ZP_BYTE:280 [ mode_mcchar::$28 ] zp ZP_WORD:137 [ mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 ] zp ZP_BYTE:132 [ mode_mcchar::i#2 mode_mcchar::i#1 ] zp ZP_BYTE:133 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ] 
Limited combination testing to 10 combinations of 36864 possible.
Uplifting [bitmap_plot] best 3490593 combination reg byte y [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] reg byte x [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] zp ZP_WORD:261 [ bitmap_plot::plotter_y#0 ] zp ZP_BYTE:265 [ bitmap_plot::$1 ] zp ZP_WORD:259 [ bitmap_plot::plotter_x#0 ] zp ZP_WORD:263 [ bitmap_plot::$0 ] 
Limited combination testing to 10 combinations of 36 possible.
Uplifting [mode_8bppchunkybmm] best 3478293 combination reg byte x [ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ] zp ZP_WORD:10 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 ] zp ZP_WORD:185 [ mode_8bppchunkybmm::$23 ] reg byte a [ mode_8bppchunkybmm::c#0 ] zp ZP_WORD:7 [ mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 ] zp ZP_BYTE:5 [ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ] zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [mode_stdbitmap] best 3466293 combination reg byte a [ mode_stdbitmap::$19 ] reg byte a [ mode_stdbitmap::$22 ] zp ZP_BYTE:247 [ mode_stdbitmap::$23 ] zp ZP_BYTE:93 [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ] zp ZP_BYTE:244 [ mode_stdbitmap::col#0 ] zp ZP_WORD:94 [ mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 ] zp ZP_BYTE:245 [ mode_stdbitmap::col2#0 ] zp ZP_BYTE:91 [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ] zp ZP_BYTE:92 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ] zp ZP_BYTE:96 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ] 
Limited combination testing to 10 combinations of 13824 possible.
Uplifting [bitmap_line_xdyi] best 3460293 combination zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] reg byte x [ bitmap_line_xdyi::$6 ] zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [bitmap_line_xdyd] best 3454293 combination zp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] zp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] reg byte x [ bitmap_line_xdyd::$6 ] zp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] zp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] zp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [bitmap_line_ydxi] best 3444287 combination zp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] reg byte x [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] reg byte a [ bitmap_line_ydxi::$6 ] zp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#2 ] zp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 ] zp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#0 bitmap_line_ydxi::xd#1 ] zp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#0 bitmap_line_ydxi::y1#1 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [bitmap_line_ydxd] best 3434281 combination zp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] reg byte x [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] reg byte a [ bitmap_line_ydxd::$6 ] zp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] zp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] zp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] zp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [mode_hicolstdchar] best 3422281 combination reg byte a [ mode_hicolstdchar::$24 ] reg byte a [ mode_hicolstdchar::$26 ] zp ZP_BYTE:86 [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ] zp ZP_WORD:87 [ mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 ] zp ZP_WORD:89 [ mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 ] zp ZP_BYTE:240 [ mode_hicolstdchar::$25 ] zp ZP_BYTE:242 [ mode_hicolstdchar::v#0 ] zp ZP_BYTE:84 [ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ] zp ZP_BYTE:85 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ] 
Limited combination testing to 10 combinations of 2304 possible.
Uplifting [mode_hicolecmchar] best 3410281 combination reg byte a [ mode_hicolecmchar::$25 ] reg byte a [ mode_hicolecmchar::$27 ] zp ZP_BYTE:79 [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ] zp ZP_WORD:80 [ mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 ] zp ZP_WORD:82 [ mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 ] zp ZP_BYTE:236 [ mode_hicolecmchar::$26 ] zp ZP_BYTE:238 [ mode_hicolecmchar::v#0 ] zp ZP_BYTE:77 [ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ] zp ZP_BYTE:78 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ] 
Limited combination testing to 10 combinations of 2304 possible.
Uplifting [mode_hicolmcchar] best 3398281 combination reg byte a [ mode_hicolmcchar::$25 ] reg byte a [ mode_hicolmcchar::$27 ] zp ZP_BYTE:72 [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ] zp ZP_WORD:73 [ mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 ] zp ZP_WORD:75 [ mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 ] zp ZP_BYTE:232 [ mode_hicolmcchar::$26 ] zp ZP_BYTE:234 [ mode_hicolmcchar::v#0 ] zp ZP_BYTE:70 [ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ] zp ZP_BYTE:71 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ] 
Limited combination testing to 10 combinations of 2304 possible.
Uplifting [] best 3398281 combination zp ZP_WORD:155 [ print_char_cursor#17 print_char_cursor#19 print_char_cursor#103 print_char_cursor#32 print_char_cursor#1 ] zp ZP_WORD:157 [ print_line_cursor#18 print_line_cursor#17 print_line_cursor#19 ] zp ZP_BYTE:12 [ dtv_control#114 dtv_control#145 dtv_control#17 ] 
Uplifting [bitmap_clear] best 3389281 combination zp ZP_WORD:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ] zp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] zp ZP_WORD:269 [ bitmap_clear::$3 ] 
Uplifting [menu] best 3387481 combination reg byte x [ menu::i#2 menu::i#1 ] zp ZP_WORD:3 [ menu::c#2 menu::c#1 ] reg byte a [ menu::$29 ] zp ZP_BYTE:164 [ menu::$33 ] zp ZP_BYTE:166 [ menu::$37 ] zp ZP_BYTE:168 [ menu::$41 ] zp ZP_BYTE:170 [ menu::$45 ] zp ZP_BYTE:172 [ menu::$49 ] zp ZP_BYTE:174 [ menu::$53 ] zp ZP_BYTE:176 [ menu::$57 ] zp ZP_BYTE:178 [ menu::$61 ] zp ZP_BYTE:180 [ menu::$65 ] zp ZP_BYTE:182 [ menu::$69 ] zp ZP_BYTE:184 [ menu::$73 ] 
Limited combination testing to 10 combinations of 50331648 possible.
Uplifting [dtvSetCpuBankSegment1] best 3386472 combination reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ] 
Uplifting [print_str_lines] best 3374472 combination zp ZP_WORD:153 [ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ] reg byte a [ print_str_lines::ch#0 ] 
Uplifting [bitmap_init] best 3371672 combination zp ZP_WORD:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] reg byte y [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ] zp ZP_BYTE:129 [ bitmap_init::y#2 bitmap_init::y#1 ] zp ZP_BYTE:271 [ bitmap_init::$0 ] zp ZP_BYTE:273 [ bitmap_init::$7 ] zp ZP_BYTE:274 [ bitmap_init::$8 ] zp ZP_BYTE:275 [ bitmap_init::$9 ] zp ZP_BYTE:276 [ bitmap_init::$10 ] zp ZP_BYTE:272 [ bitmap_init::$6 ] 
Limited combination testing to 10 combinations of 138240 possible.
Uplifting [print_cls] best 3371672 combination zp ZP_WORD:159 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [bitmap_line] best 3371358 combination reg byte y [ bitmap_line::y1#0 ] zp ZP_BYTE:250 [ bitmap_line::y0#0 ] zp ZP_BYTE:249 [ bitmap_line::x1#0 ] zp ZP_BYTE:248 [ bitmap_line::x0#0 ] zp ZP_BYTE:253 [ bitmap_line::yd#2 ] zp ZP_BYTE:254 [ bitmap_line::yd#1 ] zp ZP_BYTE:256 [ bitmap_line::yd#10 ] zp ZP_BYTE:257 [ bitmap_line::yd#11 ] zp ZP_BYTE:252 [ bitmap_line::xd#2 ] zp ZP_BYTE:255 [ bitmap_line::xd#1 ] 
Limited combination testing to 10 combinations of 186624 possible.
Uplifting [keyboard_matrix_read] best 3371346 combination reg byte y [ keyboard_matrix_read::rowid#0 ] reg byte a [ keyboard_matrix_read::return#2 ] zp ZP_BYTE:210 [ keyboard_matrix_read::return#0 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [print_ln] best 3371346 combination 
Uplifting [print_set_screen] best 3371346 combination 
Uplifting [main] best 3371346 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:29 [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ]
Uplifting [mode_8bpppixelcell] best 3281346 combination reg byte x [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:25 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#0 mode_8bpppixelcell::bits#1 ]
Uplifting [mode_8bpppixelcell] best 3281346 combination zp ZP_BYTE:25 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#0 mode_8bpppixelcell::bits#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:28 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ]
Uplifting [mode_8bpppixelcell] best 3281346 combination zp ZP_BYTE:28 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Uplifting [bitmap_line_xdyi] best 3281346 combination zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Uplifting [bitmap_line_ydxi] best 3281346 combination zp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Uplifting [bitmap_line_xdyd] best 3281346 combination zp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Uplifting [bitmap_line_ydxd] best 3281346 combination zp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Uplifting [bitmap_line_xdyi] best 3281346 combination zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Uplifting [bitmap_line_xdyd] best 3281346 combination zp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:188 [ keyboard_key_pressed::return#14 ]
Uplifting [keyboard_key_pressed] best 3275346 combination reg byte a [ keyboard_key_pressed::return#14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:190 [ keyboard_key_pressed::return#15 ]
Uplifting [keyboard_key_pressed] best 3269346 combination reg byte a [ keyboard_key_pressed::return#15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:191 [ mode_ctrl::$4 ]
Uplifting [mode_ctrl] best 3263346 combination reg byte a [ mode_ctrl::$4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:192 [ keyboard_key_pressed::return#16 ]
Uplifting [keyboard_key_pressed] best 3257346 combination reg byte a [ keyboard_key_pressed::return#16 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:193 [ mode_ctrl::$8 ]
Uplifting [mode_ctrl] best 3251346 combination reg byte a [ mode_ctrl::$8 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:194 [ keyboard_key_pressed::return#17 ]
Uplifting [keyboard_key_pressed] best 3245346 combination reg byte a [ keyboard_key_pressed::return#17 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:195 [ mode_ctrl::$12 ]
Uplifting [mode_ctrl] best 3239346 combination reg byte a [ mode_ctrl::$12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:196 [ keyboard_key_pressed::return#18 ]
Uplifting [keyboard_key_pressed] best 3233346 combination reg byte a [ keyboard_key_pressed::return#18 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:197 [ mode_ctrl::$16 ]
Uplifting [mode_ctrl] best 3227346 combination reg byte a [ mode_ctrl::$16 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:198 [ keyboard_key_pressed::return#19 ]
Uplifting [keyboard_key_pressed] best 3221346 combination reg byte a [ keyboard_key_pressed::return#19 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:199 [ mode_ctrl::$20 ]
Uplifting [mode_ctrl] best 3215346 combination reg byte a [ mode_ctrl::$20 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:200 [ keyboard_key_pressed::return#20 ]
Uplifting [keyboard_key_pressed] best 3209346 combination reg byte a [ keyboard_key_pressed::return#20 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:201 [ mode_ctrl::$24 ]
Uplifting [mode_ctrl] best 3203346 combination reg byte a [ mode_ctrl::$24 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:202 [ keyboard_key_pressed::return#21 ]
Uplifting [keyboard_key_pressed] best 3197346 combination reg byte a [ keyboard_key_pressed::return#21 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:203 [ mode_ctrl::$28 ]
Uplifting [mode_ctrl] best 3191346 combination reg byte a [ mode_ctrl::$28 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:211 [ mode_8bpppixelcell::$13 ]
Uplifting [mode_8bpppixelcell] best 3185346 combination reg byte a [ mode_8bpppixelcell::$13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:213 [ mode_8bpppixelcell::$15 ]
Uplifting [mode_8bpppixelcell] best 3179346 combination reg byte a [ mode_8bpppixelcell::$15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:214 [ mode_8bpppixelcell::$16 ]
Uplifting [mode_8bpppixelcell] best 3173346 combination reg byte a [ mode_8bpppixelcell::$16 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:217 [ mode_sixsfred::$17 ]
Uplifting [mode_sixsfred] best 3167346 combination reg byte a [ mode_sixsfred::$17 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:218 [ mode_sixsfred::$20 ]
Uplifting [mode_sixsfred] best 3161346 combination reg byte a [ mode_sixsfred::$20 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:219 [ mode_sixsfred::row#0 ]
Uplifting [mode_sixsfred] best 3157346 combination reg byte a [ mode_sixsfred::row#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:222 [ mode_twoplanebitmap::$17 ]
Uplifting [mode_twoplanebitmap] best 3151346 combination reg byte a [ mode_twoplanebitmap::$17 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:223 [ mode_twoplanebitmap::$18 ]
Uplifting [mode_twoplanebitmap] best 3145346 combination reg byte a [ mode_twoplanebitmap::$18 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:224 [ mode_twoplanebitmap::$21 ]
Uplifting [mode_twoplanebitmap] best 3139346 combination reg byte a [ mode_twoplanebitmap::$21 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:227 [ mode_sixsfred2::$16 ]
Uplifting [mode_sixsfred2] best 3133346 combination reg byte a [ mode_sixsfred2::$16 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:228 [ mode_sixsfred2::$17 ]
Uplifting [mode_sixsfred2] best 3127346 combination reg byte a [ mode_sixsfred2::$17 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:229 [ mode_sixsfred2::$20 ]
Uplifting [mode_sixsfred2] best 3121346 combination reg byte a [ mode_sixsfred2::$20 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:230 [ mode_sixsfred2::row#0 ]
Uplifting [mode_sixsfred2] best 3117346 combination reg byte a [ mode_sixsfred2::row#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:247 [ mode_stdbitmap::$23 ]
Uplifting [mode_stdbitmap] best 3111346 combination reg byte a [ mode_stdbitmap::$23 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:279 [ mode_mcchar::$27 ]
Uplifting [mode_mcchar] best 3105346 combination reg byte a [ mode_mcchar::$27 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:281 [ mode_mcchar::$29 ]
Uplifting [mode_mcchar] best 3099346 combination reg byte a [ mode_mcchar::$29 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:282 [ mode_mcchar::$30 ]
Uplifting [mode_mcchar] best 3093346 combination reg byte a [ mode_mcchar::$30 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:285 [ mode_ecmchar::$27 ]
Uplifting [mode_ecmchar] best 3087346 combination reg byte a [ mode_ecmchar::$27 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:287 [ mode_ecmchar::$29 ]
Uplifting [mode_ecmchar] best 3081346 combination reg byte a [ mode_ecmchar::$29 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:288 [ mode_ecmchar::$30 ]
Uplifting [mode_ecmchar] best 3075346 combination reg byte a [ mode_ecmchar::$30 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:291 [ mode_stdchar::$26 ]
Uplifting [mode_stdchar] best 3069346 combination reg byte a [ mode_stdchar::$26 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:293 [ mode_stdchar::$28 ]
Uplifting [mode_stdchar] best 3063346 combination reg byte a [ mode_stdchar::$28 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:294 [ mode_stdchar::$29 ]
Uplifting [mode_stdchar] best 3057346 combination reg byte a [ mode_stdchar::$29 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ]
Uplifting [mode_8bpppixelcell] best 3047346 combination reg byte x [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:46 [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ]
Uplifting [mode_twoplanebitmap] best 3037346 combination reg byte x [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:59 [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ]
Uplifting [mode_sixsfred2] best 3027346 combination reg byte x [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:39 [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ]
Uplifting [mode_sixsfred] best 3018346 combination reg byte x [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:65 [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ]
Uplifting [mode_sixsfred2] best 3009346 combination reg byte x [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:93 [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ]
Uplifting [mode_stdbitmap] best 2999346 combination reg byte x [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:134 [ mode_mcchar::cx#2 mode_mcchar::cx#1 ]
Uplifting [mode_mcchar] best 2988346 combination reg byte x [ mode_mcchar::cx#2 mode_mcchar::cx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:141 [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ]
Uplifting [mode_ecmchar] best 2977346 combination reg byte x [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:148 [ mode_stdchar::cx#2 mode_stdchar::cx#1 ]
Uplifting [mode_stdchar] best 2966346 combination reg byte x [ mode_stdchar::cx#2 mode_stdchar::cx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:72 [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ]
Uplifting [mode_hicolmcchar] best 2956346 combination reg byte x [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:79 [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ]
Uplifting [mode_hicolecmchar] best 2946346 combination reg byte x [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:86 [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ]
Uplifting [mode_hicolstdchar] best 2936346 combination reg byte x [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:52 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
Uplifting [mode_twoplanebitmap] best 2927346 combination reg byte x [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ]
Uplifting [mode_8bpppixelcell] best 2927346 combination zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:244 [ mode_stdbitmap::col#0 ]
Uplifting [mode_stdbitmap] best 2926346 combination reg byte y [ mode_stdbitmap::col#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
Uplifting [bitmap_line_xdyi] best 2926346 combination zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#2 ]
Uplifting [bitmap_line_ydxi] best 2926346 combination zp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
Uplifting [bitmap_line_xdyd] best 2926346 combination zp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Uplifting [bitmap_line_ydxd] best 2926346 combination zp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:212 [ mode_8bpppixelcell::$14 ]
Uplifting [mode_8bpppixelcell] best 2926346 combination zp ZP_BYTE:212 [ mode_8bpppixelcell::$14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:221 [ mode_twoplanebitmap::$16 ]
Uplifting [mode_twoplanebitmap] best 2926346 combination zp ZP_BYTE:221 [ mode_twoplanebitmap::$16 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:226 [ mode_sixsfred2::$15 ]
Uplifting [mode_sixsfred2] best 2926346 combination zp ZP_BYTE:226 [ mode_sixsfred2::$15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:232 [ mode_hicolmcchar::$26 ]
Uplifting [mode_hicolmcchar] best 2926346 combination zp ZP_BYTE:232 [ mode_hicolmcchar::$26 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:234 [ mode_hicolmcchar::v#0 ]
Uplifting [mode_hicolmcchar] best 2917346 combination reg byte a [ mode_hicolmcchar::v#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:236 [ mode_hicolecmchar::$26 ]
Uplifting [mode_hicolecmchar] best 2917346 combination zp ZP_BYTE:236 [ mode_hicolecmchar::$26 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:238 [ mode_hicolecmchar::v#0 ]
Uplifting [mode_hicolecmchar] best 2908346 combination reg byte a [ mode_hicolecmchar::v#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:240 [ mode_hicolstdchar::$25 ]
Uplifting [mode_hicolstdchar] best 2908346 combination zp ZP_BYTE:240 [ mode_hicolstdchar::$25 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:242 [ mode_hicolstdchar::v#0 ]
Uplifting [mode_hicolstdchar] best 2899346 combination reg byte a [ mode_hicolstdchar::v#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:245 [ mode_stdbitmap::col2#0 ]
Uplifting [mode_stdbitmap] best 2899346 combination zp ZP_BYTE:245 [ mode_stdbitmap::col2#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:280 [ mode_mcchar::$28 ]
Uplifting [mode_mcchar] best 2899346 combination zp ZP_BYTE:280 [ mode_mcchar::$28 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:286 [ mode_ecmchar::$28 ]
Uplifting [mode_ecmchar] best 2899346 combination zp ZP_BYTE:286 [ mode_ecmchar::$28 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:292 [ mode_stdchar::$27 ]
Uplifting [mode_stdchar] best 2899346 combination zp ZP_BYTE:292 [ mode_stdchar::$27 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:209 [ keyboard_key_pressed::return#0 ]
Uplifting [keyboard_key_pressed] best 2871743 combination reg byte a [ keyboard_key_pressed::return#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ]
Uplifting [mode_8bppchunkybmm] best 2870543 combination reg byte x [ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:16 [ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ]
Uplifting [mode_8bpppixelcell] best 2869343 combination reg byte x [ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:31 [ mode_sixsfred::i#2 mode_sixsfred::i#1 ]
Uplifting [mode_sixsfred] best 2868143 combination reg byte x [ mode_sixsfred::i#2 mode_sixsfred::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:44 [ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ]
Uplifting [mode_twoplanebitmap] best 2866943 combination reg byte x [ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:57 [ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ]
Uplifting [mode_sixsfred2] best 2865743 combination reg byte x [ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:70 [ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ]
Uplifting [mode_hicolmcchar] best 2864543 combination reg byte x [ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:77 [ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ]
Uplifting [mode_hicolecmchar] best 2863343 combination reg byte x [ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:84 [ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ]
Uplifting [mode_hicolstdchar] best 2862143 combination reg byte x [ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:91 [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ]
Uplifting [mode_stdbitmap] best 2860943 combination reg byte x [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:132 [ mode_mcchar::i#2 mode_mcchar::i#1 ]
Uplifting [mode_mcchar] best 2859743 combination reg byte x [ mode_mcchar::i#2 mode_mcchar::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:139 [ mode_ecmchar::i#2 mode_ecmchar::i#1 ]
Uplifting [mode_ecmchar] best 2858543 combination reg byte x [ mode_ecmchar::i#2 mode_ecmchar::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:146 [ mode_stdchar::i#2 mode_stdchar::i#1 ]
Uplifting [mode_stdchar] best 2857343 combination reg byte x [ mode_stdchar::i#2 mode_stdchar::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:133 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ]
Uplifting [mode_mcchar] best 2857343 combination zp ZP_BYTE:133 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:140 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ]
Uplifting [mode_ecmchar] best 2857343 combination zp ZP_BYTE:140 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:147 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ]
Uplifting [mode_stdchar] best 2857343 combination zp ZP_BYTE:147 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:32 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ]
Uplifting [mode_sixsfred] best 2857343 combination zp ZP_BYTE:32 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:36 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ]
Uplifting [mode_sixsfred] best 2857343 combination zp ZP_BYTE:36 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:62 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ]
Uplifting [mode_sixsfred2] best 2857343 combination zp ZP_BYTE:62 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ]
Uplifting [mode_8bpppixelcell] best 2857343 combination zp ZP_BYTE:17 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:45 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ]
Uplifting [mode_twoplanebitmap] best 2857343 combination zp ZP_BYTE:45 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:58 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ]
Uplifting [mode_sixsfred2] best 2857343 combination zp ZP_BYTE:58 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:49 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ]
Uplifting [mode_twoplanebitmap] best 2857343 combination zp ZP_BYTE:49 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:92 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ]
Uplifting [mode_stdbitmap] best 2857343 combination zp ZP_BYTE:92 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:96 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ]
Uplifting [mode_stdbitmap] best 2857343 combination zp ZP_BYTE:96 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:71 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ]
Uplifting [mode_hicolmcchar] best 2857343 combination zp ZP_BYTE:71 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:78 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ]
Uplifting [mode_hicolecmchar] best 2857343 combination zp ZP_BYTE:78 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:85 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ]
Uplifting [mode_hicolstdchar] best 2857343 combination zp ZP_BYTE:85 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ]
Uplifting [mode_8bppchunkybmm] best 2857343 combination zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:129 [ bitmap_init::y#2 bitmap_init::y#1 ]
Uplifting [bitmap_init] best 2855643 combination reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:161 [ keyboard_key_pressed::return#2 ]
Uplifting [keyboard_key_pressed] best 2855043 combination reg byte a [ keyboard_key_pressed::return#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:163 [ keyboard_key_pressed::return#24 ]
Uplifting [keyboard_key_pressed] best 2854443 combination reg byte a [ keyboard_key_pressed::return#24 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:164 [ menu::$33 ]
Uplifting [menu] best 2853843 combination reg byte a [ menu::$33 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:165 [ keyboard_key_pressed::return#25 ]
Uplifting [keyboard_key_pressed] best 2853243 combination reg byte a [ keyboard_key_pressed::return#25 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:166 [ menu::$37 ]
Uplifting [menu] best 2852643 combination reg byte a [ menu::$37 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:167 [ keyboard_key_pressed::return#26 ]
Uplifting [keyboard_key_pressed] best 2852043 combination reg byte a [ keyboard_key_pressed::return#26 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:168 [ menu::$41 ]
Uplifting [menu] best 2851443 combination reg byte a [ menu::$41 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:169 [ keyboard_key_pressed::return#27 ]
Uplifting [keyboard_key_pressed] best 2850843 combination reg byte a [ keyboard_key_pressed::return#27 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:170 [ menu::$45 ]
Uplifting [menu] best 2850243 combination reg byte a [ menu::$45 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:171 [ keyboard_key_pressed::return#28 ]
Uplifting [keyboard_key_pressed] best 2849643 combination reg byte a [ keyboard_key_pressed::return#28 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:172 [ menu::$49 ]
Uplifting [menu] best 2849043 combination reg byte a [ menu::$49 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:173 [ keyboard_key_pressed::return#29 ]
Uplifting [keyboard_key_pressed] best 2848443 combination reg byte a [ keyboard_key_pressed::return#29 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:174 [ menu::$53 ]
Uplifting [menu] best 2847843 combination reg byte a [ menu::$53 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:175 [ keyboard_key_pressed::return#30 ]
Uplifting [keyboard_key_pressed] best 2847243 combination reg byte a [ keyboard_key_pressed::return#30 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:176 [ menu::$57 ]
Uplifting [menu] best 2846643 combination reg byte a [ menu::$57 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:177 [ keyboard_key_pressed::return#10 ]
Uplifting [keyboard_key_pressed] best 2846043 combination reg byte a [ keyboard_key_pressed::return#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:178 [ menu::$61 ]
Uplifting [menu] best 2845443 combination reg byte a [ menu::$61 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:179 [ keyboard_key_pressed::return#11 ]
Uplifting [keyboard_key_pressed] best 2844843 combination reg byte a [ keyboard_key_pressed::return#11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:180 [ menu::$65 ]
Uplifting [menu] best 2844243 combination reg byte a [ menu::$65 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:181 [ keyboard_key_pressed::return#12 ]
Uplifting [keyboard_key_pressed] best 2843643 combination reg byte a [ keyboard_key_pressed::return#12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:182 [ menu::$69 ]
Uplifting [menu] best 2843043 combination reg byte a [ menu::$69 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:183 [ keyboard_key_pressed::return#13 ]
Uplifting [keyboard_key_pressed] best 2842443 combination reg byte a [ keyboard_key_pressed::return#13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:184 [ menu::$73 ]
Uplifting [menu] best 2841843 combination reg byte a [ menu::$73 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:271 [ bitmap_init::$0 ]
Uplifting [bitmap_init] best 2841243 combination reg byte a [ bitmap_init::$0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:273 [ bitmap_init::$7 ]
Uplifting [bitmap_init] best 2840643 combination reg byte a [ bitmap_init::$7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:274 [ bitmap_init::$8 ]
Uplifting [bitmap_init] best 2840043 combination reg byte a [ bitmap_init::$8 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:275 [ bitmap_init::$9 ]
Uplifting [bitmap_init] best 2839443 combination reg byte a [ bitmap_init::$9 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:276 [ bitmap_init::$10 ]
Uplifting [bitmap_init] best 2838843 combination reg byte a [ bitmap_init::$10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:40 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ]
Uplifting [mode_sixsfred] best 2838843 combination zp ZP_BYTE:40 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:53 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
Uplifting [mode_twoplanebitmap] best 2838843 combination zp ZP_BYTE:53 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:66 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ]
Uplifting [mode_sixsfred2] best 2838843 combination zp ZP_BYTE:66 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Uplifting [bitmap_clear] best 2838843 combination zp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:21 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ]
Uplifting [mode_8bpppixelcell] best 2838843 combination zp ZP_BYTE:21 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
Uplifting [bitmap_line_xdyi] best 2838843 combination zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 ]
Uplifting [bitmap_line_ydxi] best 2838843 combination zp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
Uplifting [bitmap_line_xdyd] best 2838843 combination zp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Uplifting [bitmap_line_ydxd] best 2838843 combination zp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:12 [ dtv_control#114 dtv_control#145 dtv_control#17 ]
Uplifting [] best 2838843 combination zp ZP_BYTE:12 [ dtv_control#114 dtv_control#145 dtv_control#17 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:272 [ bitmap_init::$6 ]
Uplifting [bitmap_init] best 2838843 combination zp ZP_BYTE:272 [ bitmap_init::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
Uplifting [bitmap_line_xdyi] best 2838843 combination zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#0 bitmap_line_ydxi::xd#1 ]
Uplifting [bitmap_line_ydxi] best 2838843 combination zp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#0 bitmap_line_ydxi::xd#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
Uplifting [bitmap_line_xdyd] best 2838843 combination zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Uplifting [bitmap_line_ydxd] best 2838843 combination zp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
Uplifting [bitmap_line_xdyi] best 2838843 combination zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#0 bitmap_line_ydxi::y1#1 ]
Uplifting [bitmap_line_ydxi] best 2838843 combination zp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#0 bitmap_line_ydxi::y1#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
Uplifting [bitmap_line_xdyd] best 2838843 combination zp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Uplifting [bitmap_line_ydxd] best 2838843 combination zp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:250 [ bitmap_line::y0#0 ]
Uplifting [bitmap_line] best 2838843 combination zp ZP_BYTE:250 [ bitmap_line::y0#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:249 [ bitmap_line::x1#0 ]
Uplifting [bitmap_line] best 2838843 combination zp ZP_BYTE:249 [ bitmap_line::x1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:248 [ bitmap_line::x0#0 ]
Uplifting [bitmap_line] best 2838843 combination zp ZP_BYTE:248 [ bitmap_line::x0#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:205 [ keyboard_key_pressed::rowidx#0 ]
Uplifting [keyboard_key_pressed] best 2838839 combination reg byte a [ keyboard_key_pressed::rowidx#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:208 [ keyboard_key_pressed::$2 ]
Uplifting [keyboard_key_pressed] best 2838833 combination reg byte a [ keyboard_key_pressed::$2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:265 [ bitmap_plot::$1 ]
Uplifting [bitmap_plot] best 2838827 combination reg byte a [ bitmap_plot::$1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ keyboard_key_pressed::key#20 ]
Uplifting [keyboard_key_pressed] best 2838765 combination reg byte y [ keyboard_key_pressed::key#20 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:210 [ keyboard_matrix_read::return#0 ]
Uplifting [keyboard_matrix_read] best 2838759 combination reg byte a [ keyboard_matrix_read::return#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:253 [ bitmap_line::yd#2 ]
Uplifting [bitmap_line] best 2838759 combination zp ZP_BYTE:253 [ bitmap_line::yd#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:254 [ bitmap_line::yd#1 ]
Uplifting [bitmap_line] best 2838759 combination zp ZP_BYTE:254 [ bitmap_line::yd#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:256 [ bitmap_line::yd#10 ]
Uplifting [bitmap_line] best 2838759 combination zp ZP_BYTE:256 [ bitmap_line::yd#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:257 [ bitmap_line::yd#11 ]
Uplifting [bitmap_line] best 2838759 combination zp ZP_BYTE:257 [ bitmap_line::yd#11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:252 [ bitmap_line::xd#2 ]
Uplifting [bitmap_line] best 2838759 combination zp ZP_BYTE:252 [ bitmap_line::xd#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:255 [ bitmap_line::xd#1 ]
Uplifting [bitmap_line] best 2838759 combination zp ZP_BYTE:255 [ bitmap_line::xd#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:204 [ keyboard_key_pressed::colidx#0 ]
Uplifting [keyboard_key_pressed] best 2838759 combination zp ZP_BYTE:204 [ keyboard_key_pressed::colidx#0 ] 
Coalescing zero page register with common assignment [ zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] ] with [ zp ZP_BYTE:253 [ bitmap_line::yd#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line::yd#2 ] ] with [ zp ZP_BYTE:257 [ bitmap_line::yd#11 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] ] with [ zp ZP_BYTE:252 [ bitmap_line::xd#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line::xd#2 ] ] with [ zp ZP_BYTE:255 [ bitmap_line::xd#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] ] with [ zp ZP_BYTE:248 [ bitmap_line::x0#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] ] with [ zp ZP_BYTE:250 [ bitmap_line::y0#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] ] with [ zp ZP_BYTE:254 [ bitmap_line::yd#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line::yd#1 ] ] with [ zp ZP_BYTE:256 [ bitmap_line::yd#10 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] ] with [ zp ZP_BYTE:249 [ bitmap_line::x1#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] ] with [ zp ZP_WORD:269 [ bitmap_clear::$3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:259 [ bitmap_plot::plotter_x#0 ] ] with [ zp ZP_WORD:263 [ bitmap_plot::$0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 ] ] with [ zp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 ] ] with [ zp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#0 bitmap_line_ydxi::xd#1 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#0 bitmap_line_ydxi::xd#1 ] ] with [ zp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#0 bitmap_line_ydxi::xd#1 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] ] with [ zp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line::yd#1 bitmap_line::yd#10 ] ] with [ zp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line::y0#0 ] ] with [ zp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#0 bitmap_line_ydxi::y1#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line::y0#0 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#0 bitmap_line_ydxi::y1#1 ] ] with [ zp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line::y0#0 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#0 bitmap_line_ydxi::y1#1 bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] ] with [ zp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 ] ] with [ zp ZP_WORD:7 [ mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 ] ] with [ zp ZP_WORD:19 [ mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 ] ] with [ zp ZP_WORD:22 [ mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 ] ] with [ zp ZP_WORD:34 [ mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 ] ] with [ zp ZP_WORD:37 [ mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 ] ] with [ zp ZP_WORD:41 [ mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 ] ] with [ zp ZP_WORD:47 [ mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 ] ] with [ zp ZP_WORD:50 [ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ] ] with [ zp ZP_WORD:54 [ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ] ] with [ zp ZP_WORD:60 [ mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 ] ] with [ zp ZP_WORD:63 [ mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 ] ] with [ zp ZP_WORD:67 [ mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ] ] with [ zp ZP_WORD:73 [ mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 ] ] with [ zp ZP_WORD:80 [ mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 ] ] with [ zp ZP_WORD:87 [ mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 ] ] with [ zp ZP_WORD:94 [ mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 ] ] with [ zp ZP_WORD:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 ] ] with [ zp ZP_WORD:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ] with [ zp ZP_WORD:135 [ mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 ] ] with [ zp ZP_WORD:142 [ mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 ] ] with [ zp ZP_WORD:149 [ mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 ] ] with [ zp ZP_WORD:153 [ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ] ] with [ zp ZP_WORD:159 [ print_cls::sc#2 print_cls::sc#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#1 ] ] with [ zp ZP_WORD:259 [ bitmap_plot::plotter_x#0 bitmap_plot::$0 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ] ] with [ zp ZP_BYTE:12 [ dtv_control#114 dtv_control#145 dtv_control#17 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 ] ] with [ zp ZP_BYTE:17 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 ] ] with [ zp ZP_BYTE:21 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ] ] with [ zp ZP_BYTE:32 [ mode_sixsfred::cy#4 mode_sixsfred::cy#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 ] ] with [ zp ZP_BYTE:36 [ mode_sixsfred::ay#4 mode_sixsfred::ay#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 ] ] with [ zp ZP_BYTE:40 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 ] ] with [ zp ZP_BYTE:45 [ mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 ] ] with [ zp ZP_BYTE:49 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ] ] with [ zp ZP_BYTE:53 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ] ] with [ zp ZP_BYTE:58 [ mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 ] ] with [ zp ZP_BYTE:62 [ mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ] ] with [ zp ZP_BYTE:66 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 mode_sixsfred2::by#4 mode_sixsfred2::by#1 ] ] with [ zp ZP_BYTE:71 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 mode_sixsfred2::by#4 mode_sixsfred2::by#1 mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ] ] with [ zp ZP_BYTE:78 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 mode_sixsfred2::by#4 mode_sixsfred2::by#1 mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ] ] with [ zp ZP_BYTE:85 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 mode_sixsfred2::by#4 mode_sixsfred2::by#1 mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ] ] with [ zp ZP_BYTE:92 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 mode_sixsfred2::by#4 mode_sixsfred2::by#1 mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ] ] with [ zp ZP_BYTE:96 [ mode_stdbitmap::l#2 mode_stdbitmap::l#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 mode_sixsfred2::by#4 mode_sixsfred2::by#1 mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 mode_stdbitmap::l#2 mode_stdbitmap::l#1 ] ] with [ zp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 mode_sixsfred2::by#4 mode_sixsfred2::by#1 mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 mode_stdbitmap::l#2 mode_stdbitmap::l#1 bitmap_clear::y#4 bitmap_clear::y#1 ] ] with [ zp ZP_BYTE:133 [ mode_mcchar::cy#4 mode_mcchar::cy#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 mode_sixsfred2::by#4 mode_sixsfred2::by#1 mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 mode_stdbitmap::l#2 mode_stdbitmap::l#1 bitmap_clear::y#4 bitmap_clear::y#1 mode_mcchar::cy#4 mode_mcchar::cy#1 ] ] with [ zp ZP_BYTE:140 [ mode_ecmchar::cy#4 mode_ecmchar::cy#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 mode_sixsfred2::by#4 mode_sixsfred2::by#1 mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 mode_stdbitmap::l#2 mode_stdbitmap::l#1 bitmap_clear::y#4 bitmap_clear::y#1 mode_mcchar::cy#4 mode_mcchar::cy#1 mode_ecmchar::cy#4 mode_ecmchar::cy#1 ] ] with [ zp ZP_BYTE:147 [ mode_stdchar::cy#4 mode_stdchar::cy#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 mode_sixsfred2::by#4 mode_sixsfred2::by#1 mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 mode_stdbitmap::l#2 mode_stdbitmap::l#1 bitmap_clear::y#4 bitmap_clear::y#1 mode_mcchar::cy#4 mode_mcchar::cy#1 mode_ecmchar::cy#4 mode_ecmchar::cy#1 mode_stdchar::cy#4 mode_stdchar::cy#1 ] ] with [ zp ZP_BYTE:272 [ bitmap_init::$6 ] ]
Coalescing zero page register [ zp ZP_WORD:10 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 ] ] with [ zp ZP_WORD:26 [ mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 ] ]
Coalescing zero page register [ zp ZP_WORD:10 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 ] ] with [ zp ZP_WORD:75 [ mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 ] ]
Coalescing zero page register [ zp ZP_WORD:10 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 ] ] with [ zp ZP_WORD:82 [ mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 ] ]
Coalescing zero page register [ zp ZP_WORD:10 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 ] ] with [ zp ZP_WORD:89 [ mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 ] ]
Coalescing zero page register [ zp ZP_WORD:10 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 ] ] with [ zp ZP_WORD:137 [ mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 ] ]
Coalescing zero page register [ zp ZP_WORD:10 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 ] ] with [ zp ZP_WORD:144 [ mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 ] ]
Coalescing zero page register [ zp ZP_WORD:10 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 ] ] with [ zp ZP_WORD:151 [ mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ] ]
Coalescing zero page register [ zp ZP_WORD:10 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ] ] with [ zp ZP_WORD:155 [ print_char_cursor#17 print_char_cursor#19 print_char_cursor#103 print_char_cursor#32 print_char_cursor#1 ] ]
Coalescing zero page register [ zp ZP_WORD:10 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 print_char_cursor#17 print_char_cursor#19 print_char_cursor#103 print_char_cursor#32 print_char_cursor#1 ] ] with [ zp ZP_WORD:261 [ bitmap_plot::plotter_y#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 ] ] with [ zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 ] ] with [ zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line::yd#1 bitmap_line::yd#10 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line::yd#1 bitmap_line::yd#10 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] ] with [ zp ZP_BYTE:204 [ keyboard_key_pressed::colidx#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line::yd#1 bitmap_line::yd#10 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 keyboard_key_pressed::colidx#0 ] ] with [ zp ZP_BYTE:212 [ mode_8bpppixelcell::$14 ] ]
Coalescing zero page register [ zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line::yd#1 bitmap_line::yd#10 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 keyboard_key_pressed::colidx#0 mode_8bpppixelcell::$14 ] ] with [ zp ZP_BYTE:221 [ mode_twoplanebitmap::$16 ] ]
Coalescing zero page register [ zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line::yd#1 bitmap_line::yd#10 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 keyboard_key_pressed::colidx#0 mode_8bpppixelcell::$14 mode_twoplanebitmap::$16 ] ] with [ zp ZP_BYTE:226 [ mode_sixsfred2::$15 ] ]
Coalescing zero page register [ zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line::yd#1 bitmap_line::yd#10 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 keyboard_key_pressed::colidx#0 mode_8bpppixelcell::$14 mode_twoplanebitmap::$16 mode_sixsfred2::$15 ] ] with [ zp ZP_BYTE:232 [ mode_hicolmcchar::$26 ] ]
Coalescing zero page register [ zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line::yd#1 bitmap_line::yd#10 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 keyboard_key_pressed::colidx#0 mode_8bpppixelcell::$14 mode_twoplanebitmap::$16 mode_sixsfred2::$15 mode_hicolmcchar::$26 ] ] with [ zp ZP_BYTE:236 [ mode_hicolecmchar::$26 ] ]
Coalescing zero page register [ zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line::yd#1 bitmap_line::yd#10 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 keyboard_key_pressed::colidx#0 mode_8bpppixelcell::$14 mode_twoplanebitmap::$16 mode_sixsfred2::$15 mode_hicolmcchar::$26 mode_hicolecmchar::$26 ] ] with [ zp ZP_BYTE:240 [ mode_hicolstdchar::$25 ] ]
Coalescing zero page register [ zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line::yd#1 bitmap_line::yd#10 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 keyboard_key_pressed::colidx#0 mode_8bpppixelcell::$14 mode_twoplanebitmap::$16 mode_sixsfred2::$15 mode_hicolmcchar::$26 mode_hicolecmchar::$26 mode_hicolstdchar::$25 ] ] with [ zp ZP_BYTE:245 [ mode_stdbitmap::col2#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line::yd#1 bitmap_line::yd#10 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 keyboard_key_pressed::colidx#0 mode_8bpppixelcell::$14 mode_twoplanebitmap::$16 mode_sixsfred2::$15 mode_hicolmcchar::$26 mode_hicolecmchar::$26 mode_hicolstdchar::$25 mode_stdbitmap::col2#0 ] ] with [ zp ZP_BYTE:280 [ mode_mcchar::$28 ] ]
Coalescing zero page register [ zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line::yd#1 bitmap_line::yd#10 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 keyboard_key_pressed::colidx#0 mode_8bpppixelcell::$14 mode_twoplanebitmap::$16 mode_sixsfred2::$15 mode_hicolmcchar::$26 mode_hicolecmchar::$26 mode_hicolstdchar::$25 mode_stdbitmap::col2#0 mode_mcchar::$28 ] ] with [ zp ZP_BYTE:286 [ mode_ecmchar::$28 ] ]
Coalescing zero page register [ zp ZP_BYTE:24 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line::yd#1 bitmap_line::yd#10 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 keyboard_key_pressed::colidx#0 mode_8bpppixelcell::$14 mode_twoplanebitmap::$16 mode_sixsfred2::$15 mode_hicolmcchar::$26 mode_hicolecmchar::$26 mode_hicolstdchar::$25 mode_stdbitmap::col2#0 mode_mcchar::$28 mode_ecmchar::$28 ] ] with [ zp ZP_BYTE:292 [ mode_stdchar::$27 ] ]
Coalescing zero page register [ zp ZP_BYTE:25 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#0 mode_8bpppixelcell::bits#1 ] ] with [ zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#0 bitmap_line_ydxi::xd#1 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:28 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ] ] with [ zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x0#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:28 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x0#0 ] ] with [ zp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:28 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x0#0 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] ] with [ zp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:28 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x0#0 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] ] with [ zp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] ] with [ zp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#2 ] ]
Coalescing zero page register [ zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#2 ] ] with [ zp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] ]
Coalescing zero page register [ zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#2 bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] ] with [ zp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] ]
Coalescing zero page register [ zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] ] with [ zp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 bitmap_line::x1#0 ] ]
Coalescing zero page register [ zp ZP_WORD:157 [ print_line_cursor#18 print_line_cursor#17 print_line_cursor#19 ] ] with [ zp ZP_WORD:185 [ mode_8bppchunkybmm::$23 ] ]
Allocated (was zp ZP_WORD:3) zp ZP_WORD:2 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#1 bitmap_plot::plotter_x#0 bitmap_plot::$0 ]
Allocated (was zp ZP_BYTE:6) zp ZP_BYTE:4 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 mode_sixsfred2::by#4 mode_sixsfred2::by#1 mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 mode_stdbitmap::l#2 mode_stdbitmap::l#1 bitmap_clear::y#4 bitmap_clear::y#1 mode_mcchar::cy#4 mode_mcchar::cy#1 mode_ecmchar::cy#4 mode_ecmchar::cy#1 mode_stdchar::cy#4 mode_stdchar::cy#1 bitmap_init::$6 ]
Allocated (was zp ZP_WORD:10) zp ZP_WORD:5 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 print_char_cursor#17 print_char_cursor#19 print_char_cursor#103 print_char_cursor#32 print_char_cursor#1 bitmap_plot::plotter_y#0 ]
Allocated (was zp ZP_BYTE:24) zp ZP_BYTE:7 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line::yd#1 bitmap_line::yd#10 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 keyboard_key_pressed::colidx#0 mode_8bpppixelcell::$14 mode_twoplanebitmap::$16 mode_sixsfred2::$15 mode_hicolmcchar::$26 mode_hicolecmchar::$26 mode_hicolstdchar::$25 mode_stdbitmap::col2#0 mode_mcchar::$28 mode_ecmchar::$28 mode_stdchar::$27 ]
Allocated (was zp ZP_BYTE:25) zp ZP_BYTE:8 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#0 mode_8bpppixelcell::bits#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#0 bitmap_line_ydxi::xd#1 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Allocated (was zp ZP_BYTE:28) zp ZP_BYTE:9 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x0#0 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Allocated (was zp ZP_BYTE:100) zp ZP_BYTE:10 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#2 bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Allocated (was zp ZP_BYTE:101) zp ZP_BYTE:11 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line::y0#0 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#0 bitmap_line_ydxi::y1#1 bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Allocated (was zp ZP_BYTE:102) zp ZP_BYTE:12 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 bitmap_line::x1#0 ]
Allocated (was zp ZP_WORD:157) zp ZP_WORD:13 [ print_line_cursor#18 print_line_cursor#17 print_line_cursor#19 mode_8bppchunkybmm::$23 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Exploring C64DTV Screen Modes
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  // RAM in $A000, $E000 CHAR ROM in $D000
  .const PROCPORT_RAM_CHARROM = $31
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  // Color Ram
  .label COLS = $d800
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CIA1_PORT_B = $dc01
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  // The colors of the C64
  .const BLACK = 0
  .const GREEN = 5
  .const BLUE = 6
  .const LIGHT_GREEN = $d
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  .const DTV_LINEAR = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_OVERSCAN = 8
  .const DTV_COLORRAM_OFF = $10
  .const DTV_CHUNKY = $40
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // Linear Graphics Plane A Counter Control
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  // Linear Graphics Plane B Counter Control
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  // Select memory bank where color data is fetched from (bits 11:0)
  // Memory address of Color RAM is ColorBank*$400
  .label DTV_COLOR_BANK_LO = $d036
  .label DTV_COLOR_BANK_HI = $d037
  .const DTV_COLOR_BANK_DEFAULT = $1d800
  // Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
  // Memory address of VIC Graphics is GraphicsBank*$10000
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  .const KEY_3 = 8
  .const KEY_A = $a
  .const KEY_4 = $b
  .const KEY_E = $e
  .const KEY_D = $12
  .const KEY_6 = $13
  .const KEY_C = $14
  .const KEY_7 = $18
  .const KEY_8 = $1b
  .const KEY_B = $1c
  .const KEY_H = $1d
  .const KEY_U = $1e
  .const KEY_0 = $23
  .const KEY_O = $26
  .const KEY_L = $2a
  .const KEY_1 = $38
  .const KEY_2 = $3b
  .const KEY_SPACE = $3c
  .label print_char_cursor = 5
  .label dtv_control = 4
  .label print_line_cursor = $d
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @54 [phi:@begin->@54]
b54_from_bbegin:
  jmp b54
//SEG5 @54
b54:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @54 to @end [phi:@54->@end]
bend_from_b54:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 asm { sei  }
    sei
  //SEG11 [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt (prevent keyboard reading glitches and allows to hide basic/kernal)
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG12 [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG13 [7] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 -- _deref_pbuc1=vbuc2 
    // Enable DTV extended modes
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
  //SEG14 [8] phi from main main::@2 to main::@2 [phi:main/main::@2->main::@2]
  b2_from_main:
  b2_from_b2:
    jmp b2
  //SEG15 main::@2
  b2:
  //SEG16 [9] call menu 
    jsr menu
    jmp b2_from_b2
}
//SEG17 menu
menu: {
    .label SCREEN = $8000
    .label CHARSET = $9800
    .label c = 2
  //SEG18 [10] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) menu::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // Charset ROM
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG19 [11] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
  //SEG20 [12] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG21 [13] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Mode
    lda #0
    sta DTV_CONTROL
  //SEG22 [14] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG23 [15] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) menu::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG24 [16] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG25 [17] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG26 [18] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) menu::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) menu::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG27 [19] phi from menu to menu::@1 [phi:menu->menu::@1]
  b1_from_menu:
  //SEG28 [19] phi (byte) menu::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:menu->menu::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  // DTV Palette - default
  //SEG29 [19] phi from menu::@1 to menu::@1 [phi:menu::@1->menu::@1]
  b1_from_b1:
  //SEG30 [19] phi (byte) menu::i#2 = (byte) menu::i#1 [phi:menu::@1->menu::@1#0] -- register_copy 
    jmp b1
  //SEG31 menu::@1
  b1:
  //SEG32 [20] *((const byte*) DTV_PALETTE#0 + (byte) menu::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) menu::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
  //SEG33 [21] (byte) menu::i#1 ← ++ (byte) menu::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG34 [22] if((byte) menu::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto menu::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b1
  //SEG35 [23] phi from menu::@1 to menu::@2 [phi:menu::@1->menu::@2]
  b2_from_b1:
  //SEG36 [23] phi (byte*) menu::c#2 = (const byte*) COLS#0 [phi:menu::@1->menu::@2#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta c
    lda #>COLS
    sta c+1
    jmp b2
  // Char Colors
  //SEG37 [23] phi from menu::@2 to menu::@2 [phi:menu::@2->menu::@2]
  b2_from_b2:
  //SEG38 [23] phi (byte*) menu::c#2 = (byte*) menu::c#1 [phi:menu::@2->menu::@2#0] -- register_copy 
    jmp b2
  //SEG39 menu::@2
  b2:
  //SEG40 [24] *((byte*) menu::c#2) ← (const byte) LIGHT_GREEN#0 -- _deref_pbuz1=vbuc1 
    lda #LIGHT_GREEN
    ldy #0
    sta (c),y
  //SEG41 [25] (byte*) menu::c#1 ← ++ (byte*) menu::c#2 -- pbuz1=_inc_pbuz1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG42 [26] if((byte*) menu::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) $3e8) goto menu::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda c+1
    cmp #>COLS+$3e8
    bne b2_from_b2
    lda c
    cmp #<COLS+$3e8
    bne b2_from_b2
    jmp b19
  //SEG43 menu::@19
  b19:
  //SEG44 [27] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BGCOL
  //SEG45 [28] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
  //SEG46 [29] call print_set_screen 
  //SEG47 [891] phi from menu::@19 to print_set_screen [phi:menu::@19->print_set_screen]
  print_set_screen_from_b19:
    jsr print_set_screen
  //SEG48 [30] phi from menu::@19 to menu::@47 [phi:menu::@19->menu::@47]
  b47_from_b19:
    jmp b47
  //SEG49 menu::@47
  b47:
  //SEG50 [31] call print_cls 
  //SEG51 [885] phi from menu::@47 to print_cls [phi:menu::@47->print_cls]
  print_cls_from_b47:
    jsr print_cls
  //SEG52 [32] phi from menu::@47 to menu::@48 [phi:menu::@47->menu::@48]
  b48_from_b47:
    jmp b48
  //SEG53 menu::@48
  b48:
  //SEG54 [33] call print_str_lines 
  //SEG55 [865] phi from menu::@48 to print_str_lines [phi:menu::@48->print_str_lines]
  print_str_lines_from_b48:
    jsr print_str_lines
  //SEG56 [34] phi from menu::@48 menu::@71 to menu::@4 [phi:menu::@48/menu::@71->menu::@4]
  b4_from_b48:
  b4_from_b71:
    jmp b4
  //SEG57 menu::@4
  b4:
  //SEG58 [35] call keyboard_key_pressed 
  //SEG59 [211] phi from menu::@4 to keyboard_key_pressed [phi:menu::@4->keyboard_key_pressed]
  keyboard_key_pressed_from_b4:
  //SEG60 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_1#0 [phi:menu::@4->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_1
    jsr keyboard_key_pressed
  //SEG61 [36] (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#0
    jmp b50
  //SEG62 menu::@50
  b50:
  //SEG63 [37] (byte~) menu::$29 ← (byte) keyboard_key_pressed::return#2
  //SEG64 [38] if((byte~) menu::$29==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b6_from_b50
  //SEG65 [39] phi from menu::@50 to menu::@22 [phi:menu::@50->menu::@22]
  b22_from_b50:
    jmp b22
  //SEG66 menu::@22
  b22:
  //SEG67 [40] call mode_stdchar 
    jsr mode_stdchar
    jmp breturn
  //SEG68 menu::@return
  breturn:
  //SEG69 [41] return 
    rts
  //SEG70 [42] phi from menu::@50 to menu::@6 [phi:menu::@50->menu::@6]
  b6_from_b50:
    jmp b6
  //SEG71 menu::@6
  b6:
  //SEG72 [43] call keyboard_key_pressed 
  //SEG73 [211] phi from menu::@6 to keyboard_key_pressed [phi:menu::@6->keyboard_key_pressed]
  keyboard_key_pressed_from_b6:
  //SEG74 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_2#0 [phi:menu::@6->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_2
    jsr keyboard_key_pressed
  //SEG75 [44] (byte) keyboard_key_pressed::return#24 ← (byte) keyboard_key_pressed::return#0
    jmp b51
  //SEG76 menu::@51
  b51:
  //SEG77 [45] (byte~) menu::$33 ← (byte) keyboard_key_pressed::return#24
  //SEG78 [46] if((byte~) menu::$33==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@7 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b7_from_b51
  //SEG79 [47] phi from menu::@51 to menu::@24 [phi:menu::@51->menu::@24]
  b24_from_b51:
    jmp b24
  //SEG80 menu::@24
  b24:
  //SEG81 [48] call mode_ecmchar 
    jsr mode_ecmchar
    jmp breturn
  //SEG82 [49] phi from menu::@51 to menu::@7 [phi:menu::@51->menu::@7]
  b7_from_b51:
    jmp b7
  //SEG83 menu::@7
  b7:
  //SEG84 [50] call keyboard_key_pressed 
  //SEG85 [211] phi from menu::@7 to keyboard_key_pressed [phi:menu::@7->keyboard_key_pressed]
  keyboard_key_pressed_from_b7:
  //SEG86 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_3#0 [phi:menu::@7->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_3
    jsr keyboard_key_pressed
  //SEG87 [51] (byte) keyboard_key_pressed::return#25 ← (byte) keyboard_key_pressed::return#0
    jmp b53
  //SEG88 menu::@53
  b53:
  //SEG89 [52] (byte~) menu::$37 ← (byte) keyboard_key_pressed::return#25
  //SEG90 [53] if((byte~) menu::$37==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@8 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b8_from_b53
  //SEG91 [54] phi from menu::@53 to menu::@26 [phi:menu::@53->menu::@26]
  b26_from_b53:
    jmp b26
  //SEG92 menu::@26
  b26:
  //SEG93 [55] call mode_mcchar 
    jsr mode_mcchar
    jmp breturn
  //SEG94 [56] phi from menu::@53 to menu::@8 [phi:menu::@53->menu::@8]
  b8_from_b53:
    jmp b8
  //SEG95 menu::@8
  b8:
  //SEG96 [57] call keyboard_key_pressed 
  //SEG97 [211] phi from menu::@8 to keyboard_key_pressed [phi:menu::@8->keyboard_key_pressed]
  keyboard_key_pressed_from_b8:
  //SEG98 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_4#0 [phi:menu::@8->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_4
    jsr keyboard_key_pressed
  //SEG99 [58] (byte) keyboard_key_pressed::return#26 ← (byte) keyboard_key_pressed::return#0
    jmp b55
  //SEG100 menu::@55
  b55:
  //SEG101 [59] (byte~) menu::$41 ← (byte) keyboard_key_pressed::return#26
  //SEG102 [60] if((byte~) menu::$41==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@9 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b9_from_b55
  //SEG103 [61] phi from menu::@55 to menu::@28 [phi:menu::@55->menu::@28]
  b28_from_b55:
    jmp b28
  //SEG104 menu::@28
  b28:
  //SEG105 [62] call mode_stdbitmap 
    jsr mode_stdbitmap
    jmp breturn
  //SEG106 [63] phi from menu::@55 to menu::@9 [phi:menu::@55->menu::@9]
  b9_from_b55:
    jmp b9
  //SEG107 menu::@9
  b9:
  //SEG108 [64] call keyboard_key_pressed 
  //SEG109 [211] phi from menu::@9 to keyboard_key_pressed [phi:menu::@9->keyboard_key_pressed]
  keyboard_key_pressed_from_b9:
  //SEG110 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_6#0 [phi:menu::@9->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_6
    jsr keyboard_key_pressed
  //SEG111 [65] (byte) keyboard_key_pressed::return#27 ← (byte) keyboard_key_pressed::return#0
    jmp b57
  //SEG112 menu::@57
  b57:
  //SEG113 [66] (byte~) menu::$45 ← (byte) keyboard_key_pressed::return#27
  //SEG114 [67] if((byte~) menu::$45==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b10_from_b57
  //SEG115 [68] phi from menu::@57 to menu::@30 [phi:menu::@57->menu::@30]
  b30_from_b57:
    jmp b30
  //SEG116 menu::@30
  b30:
  //SEG117 [69] call mode_hicolstdchar 
    jsr mode_hicolstdchar
    jmp breturn
  //SEG118 [70] phi from menu::@57 to menu::@10 [phi:menu::@57->menu::@10]
  b10_from_b57:
    jmp b10
  //SEG119 menu::@10
  b10:
  //SEG120 [71] call keyboard_key_pressed 
  //SEG121 [211] phi from menu::@10 to keyboard_key_pressed [phi:menu::@10->keyboard_key_pressed]
  keyboard_key_pressed_from_b10:
  //SEG122 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_7#0 [phi:menu::@10->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_7
    jsr keyboard_key_pressed
  //SEG123 [72] (byte) keyboard_key_pressed::return#28 ← (byte) keyboard_key_pressed::return#0
    jmp b59
  //SEG124 menu::@59
  b59:
  //SEG125 [73] (byte~) menu::$49 ← (byte) keyboard_key_pressed::return#28
  //SEG126 [74] if((byte~) menu::$49==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b11_from_b59
  //SEG127 [75] phi from menu::@59 to menu::@32 [phi:menu::@59->menu::@32]
  b32_from_b59:
    jmp b32
  //SEG128 menu::@32
  b32:
  //SEG129 [76] call mode_hicolecmchar 
    jsr mode_hicolecmchar
    jmp breturn
  //SEG130 [77] phi from menu::@59 to menu::@11 [phi:menu::@59->menu::@11]
  b11_from_b59:
    jmp b11
  //SEG131 menu::@11
  b11:
  //SEG132 [78] call keyboard_key_pressed 
  //SEG133 [211] phi from menu::@11 to keyboard_key_pressed [phi:menu::@11->keyboard_key_pressed]
  keyboard_key_pressed_from_b11:
  //SEG134 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_8#0 [phi:menu::@11->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_8
    jsr keyboard_key_pressed
  //SEG135 [79] (byte) keyboard_key_pressed::return#29 ← (byte) keyboard_key_pressed::return#0
    jmp b61
  //SEG136 menu::@61
  b61:
  //SEG137 [80] (byte~) menu::$53 ← (byte) keyboard_key_pressed::return#29
  //SEG138 [81] if((byte~) menu::$53==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@12 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b12_from_b61
  //SEG139 [82] phi from menu::@61 to menu::@34 [phi:menu::@61->menu::@34]
  b34_from_b61:
    jmp b34
  //SEG140 menu::@34
  b34:
  //SEG141 [83] call mode_hicolmcchar 
    jsr mode_hicolmcchar
    jmp breturn
  //SEG142 [84] phi from menu::@61 to menu::@12 [phi:menu::@61->menu::@12]
  b12_from_b61:
    jmp b12
  //SEG143 menu::@12
  b12:
  //SEG144 [85] call keyboard_key_pressed 
  //SEG145 [211] phi from menu::@12 to keyboard_key_pressed [phi:menu::@12->keyboard_key_pressed]
  keyboard_key_pressed_from_b12:
  //SEG146 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_A#0 [phi:menu::@12->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_A
    jsr keyboard_key_pressed
  //SEG147 [86] (byte) keyboard_key_pressed::return#30 ← (byte) keyboard_key_pressed::return#0
    jmp b63
  //SEG148 menu::@63
  b63:
  //SEG149 [87] (byte~) menu::$57 ← (byte) keyboard_key_pressed::return#30
  //SEG150 [88] if((byte~) menu::$57==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@13 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b13_from_b63
  //SEG151 [89] phi from menu::@63 to menu::@36 [phi:menu::@63->menu::@36]
  b36_from_b63:
    jmp b36
  //SEG152 menu::@36
  b36:
  //SEG153 [90] call mode_sixsfred2 
    jsr mode_sixsfred2
    jmp breturn
  //SEG154 [91] phi from menu::@63 to menu::@13 [phi:menu::@63->menu::@13]
  b13_from_b63:
    jmp b13
  //SEG155 menu::@13
  b13:
  //SEG156 [92] call keyboard_key_pressed 
  //SEG157 [211] phi from menu::@13 to keyboard_key_pressed [phi:menu::@13->keyboard_key_pressed]
  keyboard_key_pressed_from_b13:
  //SEG158 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_B#0 [phi:menu::@13->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_B
    jsr keyboard_key_pressed
  //SEG159 [93] (byte) keyboard_key_pressed::return#10 ← (byte) keyboard_key_pressed::return#0
    jmp b65
  //SEG160 menu::@65
  b65:
  //SEG161 [94] (byte~) menu::$61 ← (byte) keyboard_key_pressed::return#10
  //SEG162 [95] if((byte~) menu::$61==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@14 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b14_from_b65
  //SEG163 [96] phi from menu::@65 to menu::@38 [phi:menu::@65->menu::@38]
  b38_from_b65:
    jmp b38
  //SEG164 menu::@38
  b38:
  //SEG165 [97] call mode_twoplanebitmap 
    jsr mode_twoplanebitmap
    jmp breturn
  //SEG166 [98] phi from menu::@65 to menu::@14 [phi:menu::@65->menu::@14]
  b14_from_b65:
    jmp b14
  //SEG167 menu::@14
  b14:
  //SEG168 [99] call keyboard_key_pressed 
  //SEG169 [211] phi from menu::@14 to keyboard_key_pressed [phi:menu::@14->keyboard_key_pressed]
  keyboard_key_pressed_from_b14:
  //SEG170 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_C#0 [phi:menu::@14->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_C
    jsr keyboard_key_pressed
  //SEG171 [100] (byte) keyboard_key_pressed::return#11 ← (byte) keyboard_key_pressed::return#0
    jmp b67
  //SEG172 menu::@67
  b67:
  //SEG173 [101] (byte~) menu::$65 ← (byte) keyboard_key_pressed::return#11
  //SEG174 [102] if((byte~) menu::$65==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@15 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b15_from_b67
  //SEG175 [103] phi from menu::@67 to menu::@40 [phi:menu::@67->menu::@40]
  b40_from_b67:
    jmp b40
  //SEG176 menu::@40
  b40:
  //SEG177 [104] call mode_sixsfred 
    jsr mode_sixsfred
    jmp breturn
  //SEG178 [105] phi from menu::@67 to menu::@15 [phi:menu::@67->menu::@15]
  b15_from_b67:
    jmp b15
  //SEG179 menu::@15
  b15:
  //SEG180 [106] call keyboard_key_pressed 
  //SEG181 [211] phi from menu::@15 to keyboard_key_pressed [phi:menu::@15->keyboard_key_pressed]
  keyboard_key_pressed_from_b15:
  //SEG182 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_D#0 [phi:menu::@15->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_D
    jsr keyboard_key_pressed
  //SEG183 [107] (byte) keyboard_key_pressed::return#12 ← (byte) keyboard_key_pressed::return#0
    jmp b69
  //SEG184 menu::@69
  b69:
  //SEG185 [108] (byte~) menu::$69 ← (byte) keyboard_key_pressed::return#12
  //SEG186 [109] if((byte~) menu::$69==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@16 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b16_from_b69
  //SEG187 [110] phi from menu::@69 to menu::@42 [phi:menu::@69->menu::@42]
  b42_from_b69:
    jmp b42
  //SEG188 menu::@42
  b42:
  //SEG189 [111] call mode_8bpppixelcell 
    jsr mode_8bpppixelcell
    jmp breturn
  //SEG190 [112] phi from menu::@69 to menu::@16 [phi:menu::@69->menu::@16]
  b16_from_b69:
    jmp b16
  //SEG191 menu::@16
  b16:
  //SEG192 [113] call keyboard_key_pressed 
  //SEG193 [211] phi from menu::@16 to keyboard_key_pressed [phi:menu::@16->keyboard_key_pressed]
  keyboard_key_pressed_from_b16:
  //SEG194 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_E#0 [phi:menu::@16->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_E
    jsr keyboard_key_pressed
  //SEG195 [114] (byte) keyboard_key_pressed::return#13 ← (byte) keyboard_key_pressed::return#0
    jmp b71
  //SEG196 menu::@71
  b71:
  //SEG197 [115] (byte~) menu::$73 ← (byte) keyboard_key_pressed::return#13
  //SEG198 [116] if((byte~) menu::$73==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4_from_b71
  //SEG199 [117] phi from menu::@71 to menu::@44 [phi:menu::@71->menu::@44]
  b44_from_b71:
    jmp b44
  //SEG200 menu::@44
  b44:
  //SEG201 [118] call mode_8bppchunkybmm 
    jsr mode_8bppchunkybmm
    jmp breturn
}
//SEG202 mode_8bppchunkybmm
//Chunky 8bpp Bitmap Mode (BMM = 0, ECM/MCM/HICOL/LINEAR/CHUNK/COLDIS = 1)
// Resolution: 320x200
// Linear Adressing
// CharData/PlaneB Pixel Shifter (8):
// - 8bpp color PlaneB[7:0]
// To set up a linear video frame buffer the step size must be set to 8.
mode_8bppchunkybmm: {
    // 8BPP Chunky Bitmap (contains 8bpp pixels)
    .const PLANEB = $20000
    .label _23 = $d
    .label gfxb = 5
    .label x = 2
    .label y = 4
  //SEG203 [119] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_COLORRAM_OFF#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF
    sta DTV_CONTROL
  //SEG204 [120] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG205 [121] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG206 [122] *((const byte*) DTV_PLANEB_START_LO#0) ← <<(const dword) mode_8bppchunkybmm::PLANEB#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #PLANEB&$ffff
    sta DTV_PLANEB_START_LO
  //SEG207 [123] *((const byte*) DTV_PLANEB_START_MI#0) ← ><(const dword) mode_8bppchunkybmm::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_MI
  //SEG208 [124] *((const byte*) DTV_PLANEB_START_HI#0) ← <>(const dword) mode_8bppchunkybmm::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #PLANEB>>$10
    sta DTV_PLANEB_START_HI
  //SEG209 [125] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 8 -- _deref_pbuc1=vbuc2 
    lda #8
    sta DTV_PLANEB_STEP
  //SEG210 [126] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG211 [127] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG212 [128] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Border color
    lda #0
    sta BORDERCOL
  //SEG213 [129] phi from mode_8bppchunkybmm to mode_8bppchunkybmm::@1 [phi:mode_8bppchunkybmm->mode_8bppchunkybmm::@1]
  b1_from_mode_8bppchunkybmm:
  //SEG214 [129] phi (byte) mode_8bppchunkybmm::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bppchunkybmm->mode_8bppchunkybmm::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  // DTV Palette - Grey Tones
  //SEG215 [129] phi from mode_8bppchunkybmm::@1 to mode_8bppchunkybmm::@1 [phi:mode_8bppchunkybmm::@1->mode_8bppchunkybmm::@1]
  b1_from_b1:
  //SEG216 [129] phi (byte) mode_8bppchunkybmm::i#2 = (byte) mode_8bppchunkybmm::i#1 [phi:mode_8bppchunkybmm::@1->mode_8bppchunkybmm::@1#0] -- register_copy 
    jmp b1
  //SEG217 mode_8bppchunkybmm::@1
  b1:
  //SEG218 [130] *((const byte*) DTV_PALETTE#0 + (byte) mode_8bppchunkybmm::i#2) ← (byte) mode_8bppchunkybmm::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG219 [131] (byte) mode_8bppchunkybmm::i#1 ← ++ (byte) mode_8bppchunkybmm::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG220 [132] if((byte) mode_8bppchunkybmm::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_8bppchunkybmm::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b1
  //SEG221 [133] phi from mode_8bppchunkybmm::@1 to mode_8bppchunkybmm::@5 [phi:mode_8bppchunkybmm::@1->mode_8bppchunkybmm::@5]
  b5_from_b1:
    jmp b5
  //SEG222 mode_8bppchunkybmm::@5
  b5:
  //SEG223 [134] call dtvSetCpuBankSegment1 
  //SEG224 [223] phi from mode_8bppchunkybmm::@5 to dtvSetCpuBankSegment1 [phi:mode_8bppchunkybmm::@5->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b5:
  //SEG225 [223] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = ((byte))(const dword) mode_8bppchunkybmm::PLANEB#0/(word/signed word/dword/signed dword) $4000 [phi:mode_8bppchunkybmm::@5->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #PLANEB/$4000
    jsr dtvSetCpuBankSegment1
  //SEG226 [135] phi from mode_8bppchunkybmm::@5 to mode_8bppchunkybmm::@2 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@2]
  b2_from_b5:
  //SEG227 [135] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#7 = ++((byte))(const dword) mode_8bppchunkybmm::PLANEB#0/(word/signed word/dword/signed dword) $4000 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@2#0] -- vbuxx=vbuc1 
    ldx #PLANEB/$4000+1
  //SEG228 [135] phi (byte) mode_8bppchunkybmm::y#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG229 [135] phi (byte*) mode_8bppchunkybmm::gfxb#5 = ((byte*))(word/signed word/dword/signed dword) $4000 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@2#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
    jmp b2
  //SEG230 [135] phi from mode_8bppchunkybmm::@7 to mode_8bppchunkybmm::@2 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@2]
  b2_from_b7:
  //SEG231 [135] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#7 = (byte) mode_8bppchunkybmm::gfxbCpuBank#8 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@2#0] -- register_copy 
  //SEG232 [135] phi (byte) mode_8bppchunkybmm::y#6 = (byte) mode_8bppchunkybmm::y#1 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@2#1] -- register_copy 
  //SEG233 [135] phi (byte*) mode_8bppchunkybmm::gfxb#5 = (byte*) mode_8bppchunkybmm::gfxb#1 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@2#2] -- register_copy 
    jmp b2
  //SEG234 mode_8bppchunkybmm::@2
  b2:
  //SEG235 [136] phi from mode_8bppchunkybmm::@2 to mode_8bppchunkybmm::@3 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3]
  b3_from_b2:
  //SEG236 [136] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#4 = (byte) mode_8bppchunkybmm::gfxbCpuBank#7 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3#0] -- register_copy 
  //SEG237 [136] phi (word) mode_8bppchunkybmm::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3#1] -- vwuz1=vbuc1 
    lda #<0
    sta x
    lda #>0
    sta x+1
  //SEG238 [136] phi (byte*) mode_8bppchunkybmm::gfxb#3 = (byte*) mode_8bppchunkybmm::gfxb#5 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3#2] -- register_copy 
    jmp b3
  //SEG239 [136] phi from mode_8bppchunkybmm::@4 to mode_8bppchunkybmm::@3 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@3]
  b3_from_b4:
  //SEG240 [136] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#4 = (byte) mode_8bppchunkybmm::gfxbCpuBank#8 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@3#0] -- register_copy 
  //SEG241 [136] phi (word) mode_8bppchunkybmm::x#2 = (word) mode_8bppchunkybmm::x#1 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@3#1] -- register_copy 
  //SEG242 [136] phi (byte*) mode_8bppchunkybmm::gfxb#3 = (byte*) mode_8bppchunkybmm::gfxb#1 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@3#2] -- register_copy 
    jmp b3
  //SEG243 mode_8bppchunkybmm::@3
  b3:
  //SEG244 [137] if((byte*) mode_8bppchunkybmm::gfxb#3!=(word/dword/signed dword) $8000) goto mode_8bppchunkybmm::@4 -- pbuz1_neq_vwuc1_then_la1 
    lda gfxb+1
    cmp #>$8000
    bne b4_from_b3
    lda gfxb
    cmp #<$8000
    bne b4_from_b3
    jmp b6
  //SEG245 mode_8bppchunkybmm::@6
  b6:
  //SEG246 [138] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) mode_8bppchunkybmm::gfxbCpuBank#4 -- vbuaa=vbuxx 
    txa
  //SEG247 [139] call dtvSetCpuBankSegment1 
  //SEG248 [223] phi from mode_8bppchunkybmm::@6 to dtvSetCpuBankSegment1 [phi:mode_8bppchunkybmm::@6->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b6:
  //SEG249 [223] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:mode_8bppchunkybmm::@6->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp b10
  //SEG250 mode_8bppchunkybmm::@10
  b10:
  //SEG251 [140] (byte) mode_8bppchunkybmm::gfxbCpuBank#2 ← ++ (byte) mode_8bppchunkybmm::gfxbCpuBank#4 -- vbuxx=_inc_vbuxx 
    inx
  //SEG252 [141] phi from mode_8bppchunkybmm::@10 to mode_8bppchunkybmm::@4 [phi:mode_8bppchunkybmm::@10->mode_8bppchunkybmm::@4]
  b4_from_b10:
  //SEG253 [141] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#8 = (byte) mode_8bppchunkybmm::gfxbCpuBank#2 [phi:mode_8bppchunkybmm::@10->mode_8bppchunkybmm::@4#0] -- register_copy 
  //SEG254 [141] phi (byte*) mode_8bppchunkybmm::gfxb#4 = ((byte*))(word/signed word/dword/signed dword) $4000 [phi:mode_8bppchunkybmm::@10->mode_8bppchunkybmm::@4#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
    jmp b4
  //SEG255 [141] phi from mode_8bppchunkybmm::@3 to mode_8bppchunkybmm::@4 [phi:mode_8bppchunkybmm::@3->mode_8bppchunkybmm::@4]
  b4_from_b3:
  //SEG256 [141] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#8 = (byte) mode_8bppchunkybmm::gfxbCpuBank#4 [phi:mode_8bppchunkybmm::@3->mode_8bppchunkybmm::@4#0] -- register_copy 
  //SEG257 [141] phi (byte*) mode_8bppchunkybmm::gfxb#4 = (byte*) mode_8bppchunkybmm::gfxb#3 [phi:mode_8bppchunkybmm::@3->mode_8bppchunkybmm::@4#1] -- register_copy 
    jmp b4
  //SEG258 mode_8bppchunkybmm::@4
  b4:
  //SEG259 [142] (word~) mode_8bppchunkybmm::$23 ← (word) mode_8bppchunkybmm::x#2 + (byte) mode_8bppchunkybmm::y#6 -- vwuz1=vwuz2_plus_vbuz3 
    lda y
    clc
    adc x
    sta _23
    lda #0
    adc x+1
    sta _23+1
  //SEG260 [143] (byte) mode_8bppchunkybmm::c#0 ← ((byte)) (word~) mode_8bppchunkybmm::$23 -- vbuaa=_byte_vwuz1 
    lda _23
  //SEG261 [144] *((byte*) mode_8bppchunkybmm::gfxb#4) ← (byte) mode_8bppchunkybmm::c#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
  //SEG262 [145] (byte*) mode_8bppchunkybmm::gfxb#1 ← ++ (byte*) mode_8bppchunkybmm::gfxb#4 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG263 [146] (word) mode_8bppchunkybmm::x#1 ← ++ (word) mode_8bppchunkybmm::x#2 -- vwuz1=_inc_vwuz1 
    inc x
    bne !+
    inc x+1
  !:
  //SEG264 [147] if((word) mode_8bppchunkybmm::x#1!=(word/signed word/dword/signed dword) $140) goto mode_8bppchunkybmm::@3 -- vwuz1_neq_vwuc1_then_la1 
    lda x+1
    cmp #>$140
    bne b3_from_b4
    lda x
    cmp #<$140
    bne b3_from_b4
    jmp b7
  //SEG265 mode_8bppchunkybmm::@7
  b7:
  //SEG266 [148] (byte) mode_8bppchunkybmm::y#1 ← ++ (byte) mode_8bppchunkybmm::y#6 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG267 [149] if((byte) mode_8bppchunkybmm::y#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_8bppchunkybmm::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$c8
    bne b2_from_b7
  //SEG268 [150] phi from mode_8bppchunkybmm::@7 to mode_8bppchunkybmm::@8 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@8]
  b8_from_b7:
    jmp b8
  //SEG269 mode_8bppchunkybmm::@8
  b8:
  //SEG270 [151] call dtvSetCpuBankSegment1 
  //SEG271 [223] phi from mode_8bppchunkybmm::@8 to dtvSetCpuBankSegment1 [phi:mode_8bppchunkybmm::@8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b8:
  //SEG272 [223] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:mode_8bppchunkybmm::@8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
  //SEG273 [152] phi from mode_8bppchunkybmm::@8 to mode_8bppchunkybmm::@11 [phi:mode_8bppchunkybmm::@8->mode_8bppchunkybmm::@11]
  b11_from_b8:
    jmp b11
  //SEG274 mode_8bppchunkybmm::@11
  b11:
  //SEG275 [153] call mode_ctrl 
  //SEG276 [155] phi from mode_8bppchunkybmm::@11 to mode_ctrl [phi:mode_8bppchunkybmm::@11->mode_ctrl]
  mode_ctrl_from_b11:
  //SEG277 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_COLORRAM_OFF#0 [phi:mode_8bppchunkybmm::@11->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG278 mode_8bppchunkybmm::@return
  breturn:
  //SEG279 [154] return 
    rts
}
//SEG280 mode_ctrl
// Allow the user to control the DTV graphics using different keys
mode_ctrl: {
  //SEG281 [156] phi from mode_ctrl mode_ctrl::@30 to mode_ctrl::@1 [phi:mode_ctrl/mode_ctrl::@30->mode_ctrl::@1]
  b1_from_mode_ctrl:
  b1_from_b30:
  //SEG282 [156] phi (byte) dtv_control#114 = (byte) dtv_control#145 [phi:mode_ctrl/mode_ctrl::@30->mode_ctrl::@1#0] -- register_copy 
    jmp b1
  //SEG283 [156] phi from mode_ctrl::@14 to mode_ctrl::@1 [phi:mode_ctrl::@14->mode_ctrl::@1]
  b1_from_b14:
    jmp b1
  //SEG284 mode_ctrl::@1
  b1:
    jmp b4
  // Wait for the raster
  //SEG285 mode_ctrl::@4
  b4:
  //SEG286 [157] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto mode_ctrl::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
  //SEG287 [158] phi from mode_ctrl::@4 to mode_ctrl::@6 [phi:mode_ctrl::@4->mode_ctrl::@6]
  b6_from_b4:
    jmp b6
  //SEG288 mode_ctrl::@6
  b6:
  //SEG289 [159] call keyboard_key_pressed 
  //SEG290 [211] phi from mode_ctrl::@6 to keyboard_key_pressed [phi:mode_ctrl::@6->keyboard_key_pressed]
  keyboard_key_pressed_from_b6:
  //SEG291 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_SPACE#0 [phi:mode_ctrl::@6->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_SPACE
    jsr keyboard_key_pressed
  //SEG292 [160] (byte) keyboard_key_pressed::return#14 ← (byte) keyboard_key_pressed::return#0
    jmp b32
  //SEG293 mode_ctrl::@32
  b32:
  //SEG294 [161] (byte~) mode_ctrl::$1 ← (byte) keyboard_key_pressed::return#14
  //SEG295 [162] if((byte~) mode_ctrl::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@7 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b7
    jmp breturn
  //SEG296 mode_ctrl::@return
  breturn:
  //SEG297 [163] return 
    rts
  //SEG298 mode_ctrl::@7
  b7:
  //SEG299 [164] (byte) mode_ctrl::ctrl#0 ← (byte) dtv_control#114 -- vbuxx=vbuz1 
    // Read the current control byte
    ldx dtv_control
  //SEG300 [165] call keyboard_key_pressed 
  //SEG301 [211] phi from mode_ctrl::@7 to keyboard_key_pressed [phi:mode_ctrl::@7->keyboard_key_pressed]
  keyboard_key_pressed_from_b7:
  //SEG302 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_L#0 [phi:mode_ctrl::@7->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_L
    jsr keyboard_key_pressed
  //SEG303 [166] (byte) keyboard_key_pressed::return#15 ← (byte) keyboard_key_pressed::return#0
    jmp b33
  //SEG304 mode_ctrl::@33
  b33:
  //SEG305 [167] (byte~) mode_ctrl::$4 ← (byte) keyboard_key_pressed::return#15
  //SEG306 [168] if((byte~) mode_ctrl::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@8 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b8_from_b33
    jmp b23
  //SEG307 mode_ctrl::@23
  b23:
  //SEG308 [169] (byte) mode_ctrl::ctrl#1 ← (byte) mode_ctrl::ctrl#0 | (const byte) DTV_LINEAR#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_LINEAR
    tax
  //SEG309 [170] phi from mode_ctrl::@23 mode_ctrl::@33 to mode_ctrl::@8 [phi:mode_ctrl::@23/mode_ctrl::@33->mode_ctrl::@8]
  b8_from_b23:
  b8_from_b33:
  //SEG310 [170] phi (byte) mode_ctrl::ctrl#17 = (byte) mode_ctrl::ctrl#1 [phi:mode_ctrl::@23/mode_ctrl::@33->mode_ctrl::@8#0] -- register_copy 
    jmp b8
  //SEG311 mode_ctrl::@8
  b8:
  //SEG312 [171] call keyboard_key_pressed 
  //SEG313 [211] phi from mode_ctrl::@8 to keyboard_key_pressed [phi:mode_ctrl::@8->keyboard_key_pressed]
  keyboard_key_pressed_from_b8:
  //SEG314 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_H#0 [phi:mode_ctrl::@8->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_H
    jsr keyboard_key_pressed
  //SEG315 [172] (byte) keyboard_key_pressed::return#16 ← (byte) keyboard_key_pressed::return#0
    jmp b34
  //SEG316 mode_ctrl::@34
  b34:
  //SEG317 [173] (byte~) mode_ctrl::$8 ← (byte) keyboard_key_pressed::return#16
  //SEG318 [174] if((byte~) mode_ctrl::$8==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@9 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b9_from_b34
    jmp b24
  //SEG319 mode_ctrl::@24
  b24:
  //SEG320 [175] (byte) mode_ctrl::ctrl#2 ← (byte) mode_ctrl::ctrl#17 | (const byte) DTV_HIGHCOLOR#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_HIGHCOLOR
    tax
  //SEG321 [176] phi from mode_ctrl::@24 mode_ctrl::@34 to mode_ctrl::@9 [phi:mode_ctrl::@24/mode_ctrl::@34->mode_ctrl::@9]
  b9_from_b24:
  b9_from_b34:
  //SEG322 [176] phi (byte) mode_ctrl::ctrl#10 = (byte) mode_ctrl::ctrl#2 [phi:mode_ctrl::@24/mode_ctrl::@34->mode_ctrl::@9#0] -- register_copy 
    jmp b9
  //SEG323 mode_ctrl::@9
  b9:
  //SEG324 [177] call keyboard_key_pressed 
  //SEG325 [211] phi from mode_ctrl::@9 to keyboard_key_pressed [phi:mode_ctrl::@9->keyboard_key_pressed]
  keyboard_key_pressed_from_b9:
  //SEG326 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_O#0 [phi:mode_ctrl::@9->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_O
    jsr keyboard_key_pressed
  //SEG327 [178] (byte) keyboard_key_pressed::return#17 ← (byte) keyboard_key_pressed::return#0
    jmp b35
  //SEG328 mode_ctrl::@35
  b35:
  //SEG329 [179] (byte~) mode_ctrl::$12 ← (byte) keyboard_key_pressed::return#17
  //SEG330 [180] if((byte~) mode_ctrl::$12==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b10_from_b35
    jmp b25
  //SEG331 mode_ctrl::@25
  b25:
  //SEG332 [181] (byte) mode_ctrl::ctrl#3 ← (byte) mode_ctrl::ctrl#10 | (const byte) DTV_OVERSCAN#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_OVERSCAN
    tax
  //SEG333 [182] phi from mode_ctrl::@25 mode_ctrl::@35 to mode_ctrl::@10 [phi:mode_ctrl::@25/mode_ctrl::@35->mode_ctrl::@10]
  b10_from_b25:
  b10_from_b35:
  //SEG334 [182] phi (byte) mode_ctrl::ctrl#11 = (byte) mode_ctrl::ctrl#3 [phi:mode_ctrl::@25/mode_ctrl::@35->mode_ctrl::@10#0] -- register_copy 
    jmp b10
  //SEG335 mode_ctrl::@10
  b10:
  //SEG336 [183] call keyboard_key_pressed 
  //SEG337 [211] phi from mode_ctrl::@10 to keyboard_key_pressed [phi:mode_ctrl::@10->keyboard_key_pressed]
  keyboard_key_pressed_from_b10:
  //SEG338 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_B#0 [phi:mode_ctrl::@10->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_B
    jsr keyboard_key_pressed
  //SEG339 [184] (byte) keyboard_key_pressed::return#18 ← (byte) keyboard_key_pressed::return#0
    jmp b36
  //SEG340 mode_ctrl::@36
  b36:
  //SEG341 [185] (byte~) mode_ctrl::$16 ← (byte) keyboard_key_pressed::return#18
  //SEG342 [186] if((byte~) mode_ctrl::$16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b11_from_b36
    jmp b26
  //SEG343 mode_ctrl::@26
  b26:
  //SEG344 [187] (byte) mode_ctrl::ctrl#4 ← (byte) mode_ctrl::ctrl#11 | (const byte) DTV_BORDER_OFF#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_BORDER_OFF
    tax
  //SEG345 [188] phi from mode_ctrl::@26 mode_ctrl::@36 to mode_ctrl::@11 [phi:mode_ctrl::@26/mode_ctrl::@36->mode_ctrl::@11]
  b11_from_b26:
  b11_from_b36:
  //SEG346 [188] phi (byte) mode_ctrl::ctrl#12 = (byte) mode_ctrl::ctrl#4 [phi:mode_ctrl::@26/mode_ctrl::@36->mode_ctrl::@11#0] -- register_copy 
    jmp b11
  //SEG347 mode_ctrl::@11
  b11:
  //SEG348 [189] call keyboard_key_pressed 
  //SEG349 [211] phi from mode_ctrl::@11 to keyboard_key_pressed [phi:mode_ctrl::@11->keyboard_key_pressed]
  keyboard_key_pressed_from_b11:
  //SEG350 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_U#0 [phi:mode_ctrl::@11->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_U
    jsr keyboard_key_pressed
  //SEG351 [190] (byte) keyboard_key_pressed::return#19 ← (byte) keyboard_key_pressed::return#0
    jmp b37
  //SEG352 mode_ctrl::@37
  b37:
  //SEG353 [191] (byte~) mode_ctrl::$20 ← (byte) keyboard_key_pressed::return#19
  //SEG354 [192] if((byte~) mode_ctrl::$20==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@12 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b12_from_b37
    jmp b27
  //SEG355 mode_ctrl::@27
  b27:
  //SEG356 [193] (byte) mode_ctrl::ctrl#5 ← (byte) mode_ctrl::ctrl#12 | (const byte) DTV_CHUNKY#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_CHUNKY
    tax
  //SEG357 [194] phi from mode_ctrl::@27 mode_ctrl::@37 to mode_ctrl::@12 [phi:mode_ctrl::@27/mode_ctrl::@37->mode_ctrl::@12]
  b12_from_b27:
  b12_from_b37:
  //SEG358 [194] phi (byte) mode_ctrl::ctrl#13 = (byte) mode_ctrl::ctrl#5 [phi:mode_ctrl::@27/mode_ctrl::@37->mode_ctrl::@12#0] -- register_copy 
    jmp b12
  //SEG359 mode_ctrl::@12
  b12:
  //SEG360 [195] call keyboard_key_pressed 
  //SEG361 [211] phi from mode_ctrl::@12 to keyboard_key_pressed [phi:mode_ctrl::@12->keyboard_key_pressed]
  keyboard_key_pressed_from_b12:
  //SEG362 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_C#0 [phi:mode_ctrl::@12->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_C
    jsr keyboard_key_pressed
  //SEG363 [196] (byte) keyboard_key_pressed::return#20 ← (byte) keyboard_key_pressed::return#0
    jmp b38
  //SEG364 mode_ctrl::@38
  b38:
  //SEG365 [197] (byte~) mode_ctrl::$24 ← (byte) keyboard_key_pressed::return#20
  //SEG366 [198] if((byte~) mode_ctrl::$24==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@13 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b13_from_b38
    jmp b28
  //SEG367 mode_ctrl::@28
  b28:
  //SEG368 [199] (byte) mode_ctrl::ctrl#6 ← (byte) mode_ctrl::ctrl#13 | (const byte) DTV_COLORRAM_OFF#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_COLORRAM_OFF
    tax
  //SEG369 [200] phi from mode_ctrl::@28 mode_ctrl::@38 to mode_ctrl::@13 [phi:mode_ctrl::@28/mode_ctrl::@38->mode_ctrl::@13]
  b13_from_b28:
  b13_from_b38:
  //SEG370 [200] phi (byte) mode_ctrl::ctrl#22 = (byte) mode_ctrl::ctrl#6 [phi:mode_ctrl::@28/mode_ctrl::@38->mode_ctrl::@13#0] -- register_copy 
    jmp b13
  //SEG371 mode_ctrl::@13
  b13:
  //SEG372 [201] call keyboard_key_pressed 
  //SEG373 [211] phi from mode_ctrl::@13 to keyboard_key_pressed [phi:mode_ctrl::@13->keyboard_key_pressed]
  keyboard_key_pressed_from_b13:
  //SEG374 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_0#0 [phi:mode_ctrl::@13->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_0
    jsr keyboard_key_pressed
  //SEG375 [202] (byte) keyboard_key_pressed::return#21 ← (byte) keyboard_key_pressed::return#0
    jmp b39
  //SEG376 mode_ctrl::@39
  b39:
  //SEG377 [203] (byte~) mode_ctrl::$28 ← (byte) keyboard_key_pressed::return#21
  //SEG378 [204] if((byte~) mode_ctrl::$28==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@46 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b46_from_b39
  //SEG379 [205] phi from mode_ctrl::@39 to mode_ctrl::@14 [phi:mode_ctrl::@39->mode_ctrl::@14]
  b14_from_b39:
  //SEG380 [205] phi (byte) mode_ctrl::ctrl#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_ctrl::@39->mode_ctrl::@14#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b14
  //SEG381 mode_ctrl::@14
  b14:
  //SEG382 [206] if((byte) mode_ctrl::ctrl#14==(byte) dtv_control#114) goto mode_ctrl::@1 -- vbuxx_eq_vbuz1_then_la1 
    cpx dtv_control
    beq b1_from_b14
    jmp b30
  //SEG383 mode_ctrl::@30
  b30:
  //SEG384 [207] (byte) dtv_control#17 ← (byte) mode_ctrl::ctrl#14 -- vbuz1=vbuxx 
    stx dtv_control
  //SEG385 [208] *((const byte*) DTV_CONTROL#0) ← (byte) mode_ctrl::ctrl#14 -- _deref_pbuc1=vbuxx 
    stx DTV_CONTROL
  //SEG386 [209] *((const byte*) BORDERCOL#0) ← (byte) mode_ctrl::ctrl#14 -- _deref_pbuc1=vbuxx 
    stx BORDERCOL
    jmp b1_from_b30
  //SEG387 [210] phi from mode_ctrl::@39 to mode_ctrl::@46 [phi:mode_ctrl::@39->mode_ctrl::@46]
  b46_from_b39:
    jmp b46
  //SEG388 mode_ctrl::@46
  b46:
  //SEG389 [205] phi from mode_ctrl::@46 to mode_ctrl::@14 [phi:mode_ctrl::@46->mode_ctrl::@14]
  b14_from_b46:
  //SEG390 [205] phi (byte) mode_ctrl::ctrl#14 = (byte) mode_ctrl::ctrl#22 [phi:mode_ctrl::@46->mode_ctrl::@14#0] -- register_copy 
    jmp b14
}
//SEG391 keyboard_key_pressed
// Determines whether a specific key is currently pressed by accessing the matrix directly
// The key is a keyboard code defined from the keyboard matrix by %00rrrccc, where rrr is the row ID (0-7) and ccc is the column ID (0-7)
// All keys exist as as KEY_XXX constants.
// Returns zero if the key is not pressed and a non-zero value if the key is currently pressed
// keyboard_key_pressed(byte register(Y) key)
keyboard_key_pressed: {
    .label colidx = 7
  //SEG392 [212] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#20 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuyy_band_vbuc1 
    tya
    and #7
    sta colidx
  //SEG393 [213] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#20 >> (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuyy_ror_3 
    tya
    lsr
    lsr
    lsr
  //SEG394 [214] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_key_pressed::rowidx#0 -- vbuyy=vbuaa 
    tay
  //SEG395 [215] call keyboard_matrix_read 
    jsr keyboard_matrix_read
  //SEG396 [216] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
    jmp b2
  //SEG397 keyboard_key_pressed::@2
  b2:
  //SEG398 [217] (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#2
  //SEG399 [218] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuz1 
    ldy colidx
    and keyboard_matrix_col_bitmask,y
    jmp breturn
  //SEG400 keyboard_key_pressed::@return
  breturn:
  //SEG401 [219] return 
    rts
}
//SEG402 keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable kill the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte register(Y) rowid)
keyboard_matrix_read: {
  //SEG403 [220] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuyy 
    lda keyboard_matrix_row_bitmask,y
    sta CIA1_PORT_A
  //SEG404 [221] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    jmp breturn
  //SEG405 keyboard_matrix_read::@return
  breturn:
  //SEG406 [222] return 
    rts
}
//SEG407 dtvSetCpuBankSegment1
// Set the memory pointed to by CPU BANK 1 SEGMENT ($4000-$7fff)
// This sets which actual memory is addressed when the CPU reads/writes to $4000-$7fff
// The actual memory addressed will be $4000*cpuSegmentIdx
// dtvSetCpuBankSegment1(byte register(A) cpuBankIdx)
dtvSetCpuBankSegment1: {
    // Move CPU BANK 1 SEGMENT ($4000-$7fff)
    .label cpuBank = $ff
  //SEG408 [224] *((const byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 -- _deref_pbuc1=vbuaa 
    sta cpuBank
  //SEG409 asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda $ff
    .byte $32, $00
    jmp breturn
  //SEG410 dtvSetCpuBankSegment1::@return
  breturn:
  //SEG411 [226] return 
    rts
}
//SEG412 mode_8bpppixelcell
//8bpp Pixel Cell Mode (BMM/COLDIS = 0, ECM/MCM/HICOL/LINEAR/CHUNK = 1)
//Pixel Cell Adressing
//CharData[8]: (PlaneA[21:0])
//GfxData[8]: (PlaneB[21:14] & CharData[7:0] & RowCounter[3:0] & PixelCounter[7:0] )
//GfxData Pixel Shifter (8):
//- 8bpp color GfxData[7:0]
//Pixel cell mode can be thought of as a text mode that uses a 8x8 pixel 8bpp font (64 bytes/char).
//The characters come from counter A and the font (or "cells") from counter B.
//Counter B step and modulo should be set to 0, counter A modulo to 0 and counter A step to 1 for normal operation.
mode_8bpppixelcell: {
    // 8BPP Pixel Cell Screen (contains 40x25=1000 chars)
    .label PLANEA = $3c00
    // 8BPP Pixel Cell Charset (contains 256 64 byte chars)
    .label PLANEB = $4000
    .label _14 = 7
    .label gfxa = 2
    .label ay = 4
    .label bits = 8
    .label chargen = 2
    .label gfxb = 5
    .label col = 9
    .label cr = 7
    .label ch = 4
  //SEG413 [227] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY
    sta DTV_CONTROL
  //SEG414 [228] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG415 [229] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG416 [230] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_8bpppixelcell::PLANEA#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #<PLANEA
    sta DTV_PLANEA_START_LO
  //SEG417 [231] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_8bpppixelcell::PLANEA#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
  //SEG418 [232] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG419 [233] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG420 [234] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG421 [235] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
  //SEG422 [236] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_8bpppixelcell::PLANEB#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #<PLANEB
    sta DTV_PLANEB_START_LO
  //SEG423 [237] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_8bpppixelcell::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
  //SEG424 [238] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG425 [239] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_STEP
  //SEG426 [240] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG427 [241] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG428 [242] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Border color
    lda #0
    sta BORDERCOL
  //SEG429 [243] phi from mode_8bpppixelcell to mode_8bpppixelcell::@1 [phi:mode_8bpppixelcell->mode_8bpppixelcell::@1]
  b1_from_mode_8bpppixelcell:
  //SEG430 [243] phi (byte) mode_8bpppixelcell::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell->mode_8bpppixelcell::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  // DTV Palette - Grey Tones
  //SEG431 [243] phi from mode_8bpppixelcell::@1 to mode_8bpppixelcell::@1 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@1]
  b1_from_b1:
  //SEG432 [243] phi (byte) mode_8bpppixelcell::i#2 = (byte) mode_8bpppixelcell::i#1 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@1#0] -- register_copy 
    jmp b1
  //SEG433 mode_8bpppixelcell::@1
  b1:
  //SEG434 [244] *((const byte*) DTV_PALETTE#0 + (byte) mode_8bpppixelcell::i#2) ← (byte) mode_8bpppixelcell::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG435 [245] (byte) mode_8bpppixelcell::i#1 ← ++ (byte) mode_8bpppixelcell::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG436 [246] if((byte) mode_8bpppixelcell::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_8bpppixelcell::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b1
  //SEG437 [247] phi from mode_8bpppixelcell::@1 to mode_8bpppixelcell::@2 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@2]
  b2_from_b1:
  //SEG438 [247] phi (byte*) mode_8bpppixelcell::gfxa#3 = (const byte*) mode_8bpppixelcell::PLANEA#0 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@2#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta gfxa
    lda #>PLANEA
    sta gfxa+1
  //SEG439 [247] phi (byte) mode_8bpppixelcell::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
    jmp b2
  //SEG440 [247] phi from mode_8bpppixelcell::@9 to mode_8bpppixelcell::@2 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@2]
  b2_from_b9:
  //SEG441 [247] phi (byte*) mode_8bpppixelcell::gfxa#3 = (byte*) mode_8bpppixelcell::gfxa#1 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@2#0] -- register_copy 
  //SEG442 [247] phi (byte) mode_8bpppixelcell::ay#4 = (byte) mode_8bpppixelcell::ay#1 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@2#1] -- register_copy 
    jmp b2
  //SEG443 mode_8bpppixelcell::@2
  b2:
  //SEG444 [248] phi from mode_8bpppixelcell::@2 to mode_8bpppixelcell::@3 [phi:mode_8bpppixelcell::@2->mode_8bpppixelcell::@3]
  b3_from_b2:
  //SEG445 [248] phi (byte*) mode_8bpppixelcell::gfxa#2 = (byte*) mode_8bpppixelcell::gfxa#3 [phi:mode_8bpppixelcell::@2->mode_8bpppixelcell::@3#0] -- register_copy 
  //SEG446 [248] phi (byte) mode_8bpppixelcell::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@2->mode_8bpppixelcell::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG447 [248] phi from mode_8bpppixelcell::@3 to mode_8bpppixelcell::@3 [phi:mode_8bpppixelcell::@3->mode_8bpppixelcell::@3]
  b3_from_b3:
  //SEG448 [248] phi (byte*) mode_8bpppixelcell::gfxa#2 = (byte*) mode_8bpppixelcell::gfxa#1 [phi:mode_8bpppixelcell::@3->mode_8bpppixelcell::@3#0] -- register_copy 
  //SEG449 [248] phi (byte) mode_8bpppixelcell::ax#2 = (byte) mode_8bpppixelcell::ax#1 [phi:mode_8bpppixelcell::@3->mode_8bpppixelcell::@3#1] -- register_copy 
    jmp b3
  //SEG450 mode_8bpppixelcell::@3
  b3:
  //SEG451 [249] (byte~) mode_8bpppixelcell::$13 ← (byte) mode_8bpppixelcell::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and ay
  //SEG452 [250] (byte~) mode_8bpppixelcell::$14 ← (byte~) mode_8bpppixelcell::$13 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _14
  //SEG453 [251] (byte~) mode_8bpppixelcell::$15 ← (byte) mode_8bpppixelcell::ax#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG454 [252] (byte~) mode_8bpppixelcell::$16 ← (byte~) mode_8bpppixelcell::$14 | (byte~) mode_8bpppixelcell::$15 -- vbuaa=vbuz1_bor_vbuaa 
    ora _14
  //SEG455 [253] *((byte*) mode_8bpppixelcell::gfxa#2) ← (byte~) mode_8bpppixelcell::$16 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxa),y
  //SEG456 [254] (byte*) mode_8bpppixelcell::gfxa#1 ← ++ (byte*) mode_8bpppixelcell::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG457 [255] (byte) mode_8bpppixelcell::ax#1 ← ++ (byte) mode_8bpppixelcell::ax#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG458 [256] if((byte) mode_8bpppixelcell::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_8bpppixelcell::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3_from_b3
    jmp b9
  //SEG459 mode_8bpppixelcell::@9
  b9:
  //SEG460 [257] (byte) mode_8bpppixelcell::ay#1 ← ++ (byte) mode_8bpppixelcell::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG461 [258] if((byte) mode_8bpppixelcell::ay#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_8bpppixelcell::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda ay
    cmp #$19
    bne b2_from_b9
    jmp b10
  //SEG462 mode_8bpppixelcell::@10
  b10:
  //SEG463 [259] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 -- _deref_pbuc1=vbuc2 
    // 8bpp cells for Plane B (charset) - ROM charset with 256 colors
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
  //SEG464 [260] phi from mode_8bpppixelcell::@10 to mode_8bpppixelcell::@4 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@4]
  b4_from_b10:
  //SEG465 [260] phi (byte) mode_8bpppixelcell::ch#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta ch
  //SEG466 [260] phi (byte) mode_8bpppixelcell::col#7 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta col
  //SEG467 [260] phi (byte*) mode_8bpppixelcell::gfxb#7 = (const byte*) mode_8bpppixelcell::PLANEB#0 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@4#2] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta gfxb
    lda #>PLANEB
    sta gfxb+1
  //SEG468 [260] phi (byte*) mode_8bpppixelcell::chargen#4 = ((byte*))(word/dword/signed dword) $d000 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@4#3] -- pbuz1=pbuc1 
    lda #<$d000
    sta chargen
    lda #>$d000
    sta chargen+1
    jmp b4
  //SEG469 [260] phi from mode_8bpppixelcell::@13 to mode_8bpppixelcell::@4 [phi:mode_8bpppixelcell::@13->mode_8bpppixelcell::@4]
  b4_from_b13:
  //SEG470 [260] phi (byte) mode_8bpppixelcell::ch#8 = (byte) mode_8bpppixelcell::ch#1 [phi:mode_8bpppixelcell::@13->mode_8bpppixelcell::@4#0] -- register_copy 
  //SEG471 [260] phi (byte) mode_8bpppixelcell::col#7 = (byte) mode_8bpppixelcell::col#1 [phi:mode_8bpppixelcell::@13->mode_8bpppixelcell::@4#1] -- register_copy 
  //SEG472 [260] phi (byte*) mode_8bpppixelcell::gfxb#7 = (byte*) mode_8bpppixelcell::gfxb#1 [phi:mode_8bpppixelcell::@13->mode_8bpppixelcell::@4#2] -- register_copy 
  //SEG473 [260] phi (byte*) mode_8bpppixelcell::chargen#4 = (byte*) mode_8bpppixelcell::chargen#1 [phi:mode_8bpppixelcell::@13->mode_8bpppixelcell::@4#3] -- register_copy 
    jmp b4
  //SEG474 mode_8bpppixelcell::@4
  b4:
  //SEG475 [261] phi from mode_8bpppixelcell::@4 to mode_8bpppixelcell::@5 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@5]
  b5_from_b4:
  //SEG476 [261] phi (byte) mode_8bpppixelcell::cr#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta cr
  //SEG477 [261] phi (byte) mode_8bpppixelcell::col#5 = (byte) mode_8bpppixelcell::col#7 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@5#1] -- register_copy 
  //SEG478 [261] phi (byte*) mode_8bpppixelcell::gfxb#5 = (byte*) mode_8bpppixelcell::gfxb#7 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@5#2] -- register_copy 
  //SEG479 [261] phi (byte*) mode_8bpppixelcell::chargen#2 = (byte*) mode_8bpppixelcell::chargen#4 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@5#3] -- register_copy 
    jmp b5
  //SEG480 [261] phi from mode_8bpppixelcell::@12 to mode_8bpppixelcell::@5 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@5]
  b5_from_b12:
  //SEG481 [261] phi (byte) mode_8bpppixelcell::cr#6 = (byte) mode_8bpppixelcell::cr#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@5#0] -- register_copy 
  //SEG482 [261] phi (byte) mode_8bpppixelcell::col#5 = (byte) mode_8bpppixelcell::col#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@5#1] -- register_copy 
  //SEG483 [261] phi (byte*) mode_8bpppixelcell::gfxb#5 = (byte*) mode_8bpppixelcell::gfxb#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@5#2] -- register_copy 
  //SEG484 [261] phi (byte*) mode_8bpppixelcell::chargen#2 = (byte*) mode_8bpppixelcell::chargen#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@5#3] -- register_copy 
    jmp b5
  //SEG485 mode_8bpppixelcell::@5
  b5:
  //SEG486 [262] (byte) mode_8bpppixelcell::bits#0 ← *((byte*) mode_8bpppixelcell::chargen#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta bits
  //SEG487 [263] (byte*) mode_8bpppixelcell::chargen#1 ← ++ (byte*) mode_8bpppixelcell::chargen#2 -- pbuz1=_inc_pbuz1 
    inc chargen
    bne !+
    inc chargen+1
  !:
  //SEG488 [264] phi from mode_8bpppixelcell::@5 to mode_8bpppixelcell::@6 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6]
  b6_from_b5:
  //SEG489 [264] phi (byte) mode_8bpppixelcell::cp#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG490 [264] phi (byte) mode_8bpppixelcell::col#2 = (byte) mode_8bpppixelcell::col#5 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#1] -- register_copy 
  //SEG491 [264] phi (byte*) mode_8bpppixelcell::gfxb#2 = (byte*) mode_8bpppixelcell::gfxb#5 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#2] -- register_copy 
  //SEG492 [264] phi (byte) mode_8bpppixelcell::bits#2 = (byte) mode_8bpppixelcell::bits#0 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#3] -- register_copy 
    jmp b6
  //SEG493 [264] phi from mode_8bpppixelcell::@7 to mode_8bpppixelcell::@6 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@6]
  b6_from_b7:
  //SEG494 [264] phi (byte) mode_8bpppixelcell::cp#2 = (byte) mode_8bpppixelcell::cp#1 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@6#0] -- register_copy 
  //SEG495 [264] phi (byte) mode_8bpppixelcell::col#2 = (byte) mode_8bpppixelcell::col#1 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@6#1] -- register_copy 
  //SEG496 [264] phi (byte*) mode_8bpppixelcell::gfxb#2 = (byte*) mode_8bpppixelcell::gfxb#1 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@6#2] -- register_copy 
  //SEG497 [264] phi (byte) mode_8bpppixelcell::bits#2 = (byte) mode_8bpppixelcell::bits#1 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@6#3] -- register_copy 
    jmp b6
  //SEG498 mode_8bpppixelcell::@6
  b6:
  //SEG499 [265] (byte~) mode_8bpppixelcell::$19 ← (byte) mode_8bpppixelcell::bits#2 & (byte/word/signed word/dword/signed dword) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and bits
  //SEG500 [266] if((byte~) mode_8bpppixelcell::$19==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_8bpppixelcell::@7 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b7_from_b6
    jmp b11
  //SEG501 mode_8bpppixelcell::@11
  b11:
  //SEG502 [267] (byte~) mode_8bpppixelcell::c#3 ← (byte) mode_8bpppixelcell::col#2 -- vbuaa=vbuz1 
    lda col
  //SEG503 [268] phi from mode_8bpppixelcell::@11 to mode_8bpppixelcell::@7 [phi:mode_8bpppixelcell::@11->mode_8bpppixelcell::@7]
  b7_from_b11:
  //SEG504 [268] phi (byte) mode_8bpppixelcell::c#2 = (byte~) mode_8bpppixelcell::c#3 [phi:mode_8bpppixelcell::@11->mode_8bpppixelcell::@7#0] -- register_copy 
    jmp b7
  //SEG505 [268] phi from mode_8bpppixelcell::@6 to mode_8bpppixelcell::@7 [phi:mode_8bpppixelcell::@6->mode_8bpppixelcell::@7]
  b7_from_b6:
  //SEG506 [268] phi (byte) mode_8bpppixelcell::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@6->mode_8bpppixelcell::@7#0] -- vbuaa=vbuc1 
    lda #0
    jmp b7
  //SEG507 mode_8bpppixelcell::@7
  b7:
  //SEG508 [269] *((byte*) mode_8bpppixelcell::gfxb#2) ← (byte) mode_8bpppixelcell::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
  //SEG509 [270] (byte*) mode_8bpppixelcell::gfxb#1 ← ++ (byte*) mode_8bpppixelcell::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG510 [271] (byte) mode_8bpppixelcell::bits#1 ← (byte) mode_8bpppixelcell::bits#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl bits
  //SEG511 [272] (byte) mode_8bpppixelcell::col#1 ← ++ (byte) mode_8bpppixelcell::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG512 [273] (byte) mode_8bpppixelcell::cp#1 ← ++ (byte) mode_8bpppixelcell::cp#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG513 [274] if((byte) mode_8bpppixelcell::cp#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto mode_8bpppixelcell::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b6_from_b7
    jmp b12
  //SEG514 mode_8bpppixelcell::@12
  b12:
  //SEG515 [275] (byte) mode_8bpppixelcell::cr#1 ← ++ (byte) mode_8bpppixelcell::cr#6 -- vbuz1=_inc_vbuz1 
    inc cr
  //SEG516 [276] if((byte) mode_8bpppixelcell::cr#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto mode_8bpppixelcell::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda cr
    cmp #8
    bne b5_from_b12
    jmp b13
  //SEG517 mode_8bpppixelcell::@13
  b13:
  //SEG518 [277] (byte) mode_8bpppixelcell::ch#1 ← ++ (byte) mode_8bpppixelcell::ch#8 -- vbuz1=_inc_vbuz1 
    inc ch
  //SEG519 [278] if((byte) mode_8bpppixelcell::ch#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_8bpppixelcell::@4 -- vbuz1_neq_0_then_la1 
    lda ch
    cmp #0
    bne b4_from_b13
    jmp b14
  //SEG520 mode_8bpppixelcell::@14
  b14:
  //SEG521 [279] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG522 [280] call mode_ctrl 
  //SEG523 [155] phi from mode_8bpppixelcell::@14 to mode_ctrl [phi:mode_8bpppixelcell::@14->mode_ctrl]
  mode_ctrl_from_b14:
  //SEG524 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0 [phi:mode_8bpppixelcell::@14->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG525 mode_8bpppixelcell::@return
  breturn:
  //SEG526 [281] return 
    rts
}
//SEG527 mode_sixsfred
// Sixs Fred Mode - 8bpp Packed Bitmap - Generated from the two DTV linear graphics plane counters
// Two Plane MultiColor Bitmap - 8bpp Packed Bitmap (CHUNK/COLDIS = 0, ECM/BMM/MCM/HICOL/LINEAR = 1)
// Resolution: 160x200
// Linear Adressing
// GfxData/PlaneA Pixel Shifter (2), CharData/PlaneB Pixel Shifter (2):
// - 8bpp color (ColorData[3:0],CharData/PlaneB[1:0], GfxData/PlaneA[1:0])
mode_sixsfred: {
    .label PLANEA = $4000
    .label PLANEB = $6000
    .label COLORS = $8000
    .label col = 2
    .label cy = 4
    .label gfxa = 2
    .label ay = 4
    .label gfxb = 2
    .label by = 4
  //SEG528 [282] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR
    sta DTV_CONTROL
  //SEG529 [283] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG530 [284] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG531 [285] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_sixsfred::PLANEA#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #<PLANEA
    sta DTV_PLANEA_START_LO
  //SEG532 [286] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_sixsfred::PLANEA#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
  //SEG533 [287] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG534 [288] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG535 [289] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG536 [290] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
  //SEG537 [291] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_sixsfred::PLANEB#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #<PLANEB
    sta DTV_PLANEB_START_LO
  //SEG538 [292] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_sixsfred::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
  //SEG539 [293] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG540 [294] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
  //SEG541 [295] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG542 [296] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG543 [297] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_sixsfred::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG544 [298] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_sixsfred::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #>COLORS/$400
    sta DTV_COLOR_BANK_HI
  //SEG545 [299] phi from mode_sixsfred to mode_sixsfred::@1 [phi:mode_sixsfred->mode_sixsfred::@1]
  b1_from_mode_sixsfred:
  //SEG546 [299] phi (byte) mode_sixsfred::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred->mode_sixsfred::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  // DTV Palette - Grey Tones
  //SEG547 [299] phi from mode_sixsfred::@1 to mode_sixsfred::@1 [phi:mode_sixsfred::@1->mode_sixsfred::@1]
  b1_from_b1:
  //SEG548 [299] phi (byte) mode_sixsfred::i#2 = (byte) mode_sixsfred::i#1 [phi:mode_sixsfred::@1->mode_sixsfred::@1#0] -- register_copy 
    jmp b1
  //SEG549 mode_sixsfred::@1
  b1:
  //SEG550 [300] *((const byte*) DTV_PALETTE#0 + (byte) mode_sixsfred::i#2) ← (byte) mode_sixsfred::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG551 [301] (byte) mode_sixsfred::i#1 ← ++ (byte) mode_sixsfred::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG552 [302] if((byte) mode_sixsfred::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_sixsfred::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b1
    jmp b8
  //SEG553 mode_sixsfred::@8
  b8:
  //SEG554 [303] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG555 [304] phi from mode_sixsfred::@8 to mode_sixsfred::@2 [phi:mode_sixsfred::@8->mode_sixsfred::@2]
  b2_from_b8:
  //SEG556 [304] phi (byte*) mode_sixsfred::col#3 = (const byte*) mode_sixsfred::COLORS#0 [phi:mode_sixsfred::@8->mode_sixsfred::@2#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG557 [304] phi (byte) mode_sixsfred::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@8->mode_sixsfred::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG558 [304] phi from mode_sixsfred::@9 to mode_sixsfred::@2 [phi:mode_sixsfred::@9->mode_sixsfred::@2]
  b2_from_b9:
  //SEG559 [304] phi (byte*) mode_sixsfred::col#3 = (byte*) mode_sixsfred::col#1 [phi:mode_sixsfred::@9->mode_sixsfred::@2#0] -- register_copy 
  //SEG560 [304] phi (byte) mode_sixsfred::cy#4 = (byte) mode_sixsfred::cy#1 [phi:mode_sixsfred::@9->mode_sixsfred::@2#1] -- register_copy 
    jmp b2
  //SEG561 mode_sixsfred::@2
  b2:
  //SEG562 [305] phi from mode_sixsfred::@2 to mode_sixsfred::@3 [phi:mode_sixsfred::@2->mode_sixsfred::@3]
  b3_from_b2:
  //SEG563 [305] phi (byte*) mode_sixsfred::col#2 = (byte*) mode_sixsfred::col#3 [phi:mode_sixsfred::@2->mode_sixsfred::@3#0] -- register_copy 
  //SEG564 [305] phi (byte) mode_sixsfred::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@2->mode_sixsfred::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG565 [305] phi from mode_sixsfred::@3 to mode_sixsfred::@3 [phi:mode_sixsfred::@3->mode_sixsfred::@3]
  b3_from_b3:
  //SEG566 [305] phi (byte*) mode_sixsfred::col#2 = (byte*) mode_sixsfred::col#1 [phi:mode_sixsfred::@3->mode_sixsfred::@3#0] -- register_copy 
  //SEG567 [305] phi (byte) mode_sixsfred::cx#2 = (byte) mode_sixsfred::cx#1 [phi:mode_sixsfred::@3->mode_sixsfred::@3#1] -- register_copy 
    jmp b3
  //SEG568 mode_sixsfred::@3
  b3:
  //SEG569 [306] (byte~) mode_sixsfred::$16 ← (byte) mode_sixsfred::cx#2 + (byte) mode_sixsfred::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc cy
  //SEG570 [307] (byte~) mode_sixsfred::$17 ← (byte~) mode_sixsfred::$16 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
  //SEG571 [308] *((byte*) mode_sixsfred::col#2) ← (byte~) mode_sixsfred::$17 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG572 [309] (byte*) mode_sixsfred::col#1 ← ++ (byte*) mode_sixsfred::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG573 [310] (byte) mode_sixsfred::cx#1 ← ++ (byte) mode_sixsfred::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG574 [311] if((byte) mode_sixsfred::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3_from_b3
    jmp b9
  //SEG575 mode_sixsfred::@9
  b9:
  //SEG576 [312] (byte) mode_sixsfred::cy#1 ← ++ (byte) mode_sixsfred::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG577 [313] if((byte) mode_sixsfred::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_sixsfred::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b9
  //SEG578 [314] phi from mode_sixsfred::@9 to mode_sixsfred::@4 [phi:mode_sixsfred::@9->mode_sixsfred::@4]
  b4_from_b9:
  //SEG579 [314] phi (byte*) mode_sixsfred::gfxa#3 = (const byte*) mode_sixsfred::PLANEA#0 [phi:mode_sixsfred::@9->mode_sixsfred::@4#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta gfxa
    lda #>PLANEA
    sta gfxa+1
  //SEG580 [314] phi (byte) mode_sixsfred::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@9->mode_sixsfred::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
    jmp b4
  //SEG581 [314] phi from mode_sixsfred::@11 to mode_sixsfred::@4 [phi:mode_sixsfred::@11->mode_sixsfred::@4]
  b4_from_b11:
  //SEG582 [314] phi (byte*) mode_sixsfred::gfxa#3 = (byte*) mode_sixsfred::gfxa#1 [phi:mode_sixsfred::@11->mode_sixsfred::@4#0] -- register_copy 
  //SEG583 [314] phi (byte) mode_sixsfred::ay#4 = (byte) mode_sixsfred::ay#1 [phi:mode_sixsfred::@11->mode_sixsfred::@4#1] -- register_copy 
    jmp b4
  //SEG584 mode_sixsfred::@4
  b4:
  //SEG585 [315] phi from mode_sixsfred::@4 to mode_sixsfred::@5 [phi:mode_sixsfred::@4->mode_sixsfred::@5]
  b5_from_b4:
  //SEG586 [315] phi (byte) mode_sixsfred::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@4->mode_sixsfred::@5#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG587 [315] phi (byte*) mode_sixsfred::gfxa#2 = (byte*) mode_sixsfred::gfxa#3 [phi:mode_sixsfred::@4->mode_sixsfred::@5#1] -- register_copy 
    jmp b5
  //SEG588 [315] phi from mode_sixsfred::@5 to mode_sixsfred::@5 [phi:mode_sixsfred::@5->mode_sixsfred::@5]
  b5_from_b5:
  //SEG589 [315] phi (byte) mode_sixsfred::ax#2 = (byte) mode_sixsfred::ax#1 [phi:mode_sixsfred::@5->mode_sixsfred::@5#0] -- register_copy 
  //SEG590 [315] phi (byte*) mode_sixsfred::gfxa#2 = (byte*) mode_sixsfred::gfxa#1 [phi:mode_sixsfred::@5->mode_sixsfred::@5#1] -- register_copy 
    jmp b5
  //SEG591 mode_sixsfred::@5
  b5:
  //SEG592 [316] (byte~) mode_sixsfred::$20 ← (byte) mode_sixsfred::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_ror_1 
    lda ay
    lsr
  //SEG593 [317] (byte) mode_sixsfred::row#0 ← (byte~) mode_sixsfred::$20 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuaa_band_vbuc1 
    and #3
  //SEG594 [318] *((byte*) mode_sixsfred::gfxa#2) ← *((const byte[]) mode_sixsfred::row_bitmask#0 + (byte) mode_sixsfred::row#0) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
  //SEG595 [319] (byte*) mode_sixsfred::gfxa#1 ← ++ (byte*) mode_sixsfred::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG596 [320] (byte) mode_sixsfred::ax#1 ← ++ (byte) mode_sixsfred::ax#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG597 [321] if((byte) mode_sixsfred::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred::@5 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b5_from_b5
    jmp b11
  //SEG598 mode_sixsfred::@11
  b11:
  //SEG599 [322] (byte) mode_sixsfred::ay#1 ← ++ (byte) mode_sixsfred::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG600 [323] if((byte) mode_sixsfred::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_sixsfred::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda ay
    cmp #$c8
    bne b4_from_b11
  //SEG601 [324] phi from mode_sixsfred::@11 to mode_sixsfred::@6 [phi:mode_sixsfred::@11->mode_sixsfred::@6]
  b6_from_b11:
  //SEG602 [324] phi (byte) mode_sixsfred::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@11->mode_sixsfred::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG603 [324] phi (byte*) mode_sixsfred::gfxb#3 = (const byte*) mode_sixsfred::PLANEB#0 [phi:mode_sixsfred::@11->mode_sixsfred::@6#1] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta gfxb
    lda #>PLANEB
    sta gfxb+1
    jmp b6
  //SEG604 [324] phi from mode_sixsfred::@13 to mode_sixsfred::@6 [phi:mode_sixsfred::@13->mode_sixsfred::@6]
  b6_from_b13:
  //SEG605 [324] phi (byte) mode_sixsfred::by#4 = (byte) mode_sixsfred::by#1 [phi:mode_sixsfred::@13->mode_sixsfred::@6#0] -- register_copy 
  //SEG606 [324] phi (byte*) mode_sixsfred::gfxb#3 = (byte*) mode_sixsfred::gfxb#1 [phi:mode_sixsfred::@13->mode_sixsfred::@6#1] -- register_copy 
    jmp b6
  //SEG607 mode_sixsfred::@6
  b6:
  //SEG608 [325] phi from mode_sixsfred::@6 to mode_sixsfred::@7 [phi:mode_sixsfred::@6->mode_sixsfred::@7]
  b7_from_b6:
  //SEG609 [325] phi (byte) mode_sixsfred::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@6->mode_sixsfred::@7#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG610 [325] phi (byte*) mode_sixsfred::gfxb#2 = (byte*) mode_sixsfred::gfxb#3 [phi:mode_sixsfred::@6->mode_sixsfred::@7#1] -- register_copy 
    jmp b7
  //SEG611 [325] phi from mode_sixsfred::@7 to mode_sixsfred::@7 [phi:mode_sixsfred::@7->mode_sixsfred::@7]
  b7_from_b7:
  //SEG612 [325] phi (byte) mode_sixsfred::bx#2 = (byte) mode_sixsfred::bx#1 [phi:mode_sixsfred::@7->mode_sixsfred::@7#0] -- register_copy 
  //SEG613 [325] phi (byte*) mode_sixsfred::gfxb#2 = (byte*) mode_sixsfred::gfxb#1 [phi:mode_sixsfred::@7->mode_sixsfred::@7#1] -- register_copy 
    jmp b7
  //SEG614 mode_sixsfred::@7
  b7:
  //SEG615 [326] *((byte*) mode_sixsfred::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $1b -- _deref_pbuz1=vbuc1 
    lda #$1b
    ldy #0
    sta (gfxb),y
  //SEG616 [327] (byte*) mode_sixsfred::gfxb#1 ← ++ (byte*) mode_sixsfred::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG617 [328] (byte) mode_sixsfred::bx#1 ← ++ (byte) mode_sixsfred::bx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG618 [329] if((byte) mode_sixsfred::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred::@7 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b7_from_b7
    jmp b13
  //SEG619 mode_sixsfred::@13
  b13:
  //SEG620 [330] (byte) mode_sixsfred::by#1 ← ++ (byte) mode_sixsfred::by#4 -- vbuz1=_inc_vbuz1 
    inc by
  //SEG621 [331] if((byte) mode_sixsfred::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_sixsfred::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda by
    cmp #$c8
    bne b6_from_b13
  //SEG622 [332] phi from mode_sixsfred::@13 to mode_sixsfred::@14 [phi:mode_sixsfred::@13->mode_sixsfred::@14]
  b14_from_b13:
    jmp b14
  //SEG623 mode_sixsfred::@14
  b14:
  //SEG624 [333] call mode_ctrl 
  //SEG625 [155] phi from mode_sixsfred::@14 to mode_ctrl [phi:mode_sixsfred::@14->mode_ctrl]
  mode_ctrl_from_b14:
  //SEG626 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 [phi:mode_sixsfred::@14->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR|DTV_LINEAR
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG627 mode_sixsfred::@return
  breturn:
  //SEG628 [334] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
//SEG629 mode_twoplanebitmap
// Two Plane Bitmap - generated from the two DTV linear graphics plane counters
// Two Plane Bitmap Mode (CHUNK/COLDIS/MCM = 0, ECM/BMM/HICOL/LINEAR = 1)
// Resolution: 320x200
// Linear Adressing
// GfxData/PlaneA Pixel Shifter (1), CharData/PlaneB Pixel Shifter (1):
// - Plane A = 0 Plane B = 0: 8bpp BgColor0[7:0]
// - Plane A = 0 Plane B = 1: 8bpp "0000" & ColorData[7:4]
// - Plane A = 1 Plane B = 0: 8bpp "0000" & ColorData[3:0]
// - Plane A = 1 Plane B = 1: 8bpp BgColor1[7:0]
mode_twoplanebitmap: {
    .label PLANEA = $4000
    .label PLANEB = $6000
    .label COLORS = $8000
    .label _16 = 7
    .label col = 2
    .label cy = 4
    .label gfxa = 2
    .label ay = 4
    .label gfxb = 2
    .label by = 4
  //SEG630 [335] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR
    sta DTV_CONTROL
  //SEG631 [336] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG632 [337] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG633 [338] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_twoplanebitmap::PLANEA#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #<PLANEA
    sta DTV_PLANEA_START_LO
  //SEG634 [339] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_twoplanebitmap::PLANEA#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
  //SEG635 [340] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG636 [341] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG637 [342] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG638 [343] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
  //SEG639 [344] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_twoplanebitmap::PLANEB#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #<PLANEB
    sta DTV_PLANEB_START_LO
  //SEG640 [345] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_twoplanebitmap::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
  //SEG641 [346] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG642 [347] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
  //SEG643 [348] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG644 [349] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG645 [350] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_twoplanebitmap::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG646 [351] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_twoplanebitmap::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #>COLORS/$400
    sta DTV_COLOR_BANK_HI
  //SEG647 [352] phi from mode_twoplanebitmap to mode_twoplanebitmap::@1 [phi:mode_twoplanebitmap->mode_twoplanebitmap::@1]
  b1_from_mode_twoplanebitmap:
  //SEG648 [352] phi (byte) mode_twoplanebitmap::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap->mode_twoplanebitmap::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  // DTV Palette - Grey Tones
  //SEG649 [352] phi from mode_twoplanebitmap::@1 to mode_twoplanebitmap::@1 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@1]
  b1_from_b1:
  //SEG650 [352] phi (byte) mode_twoplanebitmap::i#2 = (byte) mode_twoplanebitmap::i#1 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@1#0] -- register_copy 
    jmp b1
  //SEG651 mode_twoplanebitmap::@1
  b1:
  //SEG652 [353] *((const byte*) DTV_PALETTE#0 + (byte) mode_twoplanebitmap::i#2) ← (byte) mode_twoplanebitmap::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG653 [354] (byte) mode_twoplanebitmap::i#1 ← ++ (byte) mode_twoplanebitmap::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG654 [355] if((byte) mode_twoplanebitmap::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_twoplanebitmap::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b1
    jmp b10
  //SEG655 mode_twoplanebitmap::@10
  b10:
  //SEG656 [356] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG657 [357] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $70 -- _deref_pbuc1=vbuc2 
    lda #$70
    sta BGCOL1
  //SEG658 [358] *((const byte*) BGCOL2#0) ← (byte/word/signed word/dword/signed dword) $d4 -- _deref_pbuc1=vbuc2 
    // Color for bits 00
    lda #$d4
    sta BGCOL2
  //SEG659 [359] phi from mode_twoplanebitmap::@10 to mode_twoplanebitmap::@2 [phi:mode_twoplanebitmap::@10->mode_twoplanebitmap::@2]
  b2_from_b10:
  //SEG660 [359] phi (byte*) mode_twoplanebitmap::col#3 = (const byte*) mode_twoplanebitmap::COLORS#0 [phi:mode_twoplanebitmap::@10->mode_twoplanebitmap::@2#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG661 [359] phi (byte) mode_twoplanebitmap::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@10->mode_twoplanebitmap::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG662 [359] phi from mode_twoplanebitmap::@11 to mode_twoplanebitmap::@2 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@2]
  b2_from_b11:
  //SEG663 [359] phi (byte*) mode_twoplanebitmap::col#3 = (byte*) mode_twoplanebitmap::col#1 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@2#0] -- register_copy 
  //SEG664 [359] phi (byte) mode_twoplanebitmap::cy#4 = (byte) mode_twoplanebitmap::cy#1 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@2#1] -- register_copy 
    jmp b2
  //SEG665 mode_twoplanebitmap::@2
  b2:
  //SEG666 [360] phi from mode_twoplanebitmap::@2 to mode_twoplanebitmap::@3 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3]
  b3_from_b2:
  //SEG667 [360] phi (byte*) mode_twoplanebitmap::col#2 = (byte*) mode_twoplanebitmap::col#3 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3#0] -- register_copy 
  //SEG668 [360] phi (byte) mode_twoplanebitmap::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG669 [360] phi from mode_twoplanebitmap::@3 to mode_twoplanebitmap::@3 [phi:mode_twoplanebitmap::@3->mode_twoplanebitmap::@3]
  b3_from_b3:
  //SEG670 [360] phi (byte*) mode_twoplanebitmap::col#2 = (byte*) mode_twoplanebitmap::col#1 [phi:mode_twoplanebitmap::@3->mode_twoplanebitmap::@3#0] -- register_copy 
  //SEG671 [360] phi (byte) mode_twoplanebitmap::cx#2 = (byte) mode_twoplanebitmap::cx#1 [phi:mode_twoplanebitmap::@3->mode_twoplanebitmap::@3#1] -- register_copy 
    jmp b3
  //SEG672 mode_twoplanebitmap::@3
  b3:
  //SEG673 [361] (byte~) mode_twoplanebitmap::$15 ← (byte) mode_twoplanebitmap::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG674 [362] (byte~) mode_twoplanebitmap::$16 ← (byte~) mode_twoplanebitmap::$15 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _16
  //SEG675 [363] (byte~) mode_twoplanebitmap::$17 ← (byte) mode_twoplanebitmap::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG676 [364] (byte~) mode_twoplanebitmap::$18 ← (byte~) mode_twoplanebitmap::$16 | (byte~) mode_twoplanebitmap::$17 -- vbuaa=vbuz1_bor_vbuaa 
    ora _16
  //SEG677 [365] *((byte*) mode_twoplanebitmap::col#2) ← (byte~) mode_twoplanebitmap::$18 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG678 [366] (byte*) mode_twoplanebitmap::col#1 ← ++ (byte*) mode_twoplanebitmap::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG679 [367] (byte) mode_twoplanebitmap::cx#1 ← ++ (byte) mode_twoplanebitmap::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG680 [368] if((byte) mode_twoplanebitmap::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_twoplanebitmap::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3_from_b3
    jmp b11
  //SEG681 mode_twoplanebitmap::@11
  b11:
  //SEG682 [369] (byte) mode_twoplanebitmap::cy#1 ← ++ (byte) mode_twoplanebitmap::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG683 [370] if((byte) mode_twoplanebitmap::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_twoplanebitmap::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b11
  //SEG684 [371] phi from mode_twoplanebitmap::@11 to mode_twoplanebitmap::@4 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@4]
  b4_from_b11:
  //SEG685 [371] phi (byte*) mode_twoplanebitmap::gfxa#6 = (const byte*) mode_twoplanebitmap::PLANEA#0 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@4#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta gfxa
    lda #>PLANEA
    sta gfxa+1
  //SEG686 [371] phi (byte) mode_twoplanebitmap::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
    jmp b4
  //SEG687 [371] phi from mode_twoplanebitmap::@15 to mode_twoplanebitmap::@4 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@4]
  b4_from_b15:
  //SEG688 [371] phi (byte*) mode_twoplanebitmap::gfxa#6 = (byte*) mode_twoplanebitmap::gfxa#7 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@4#0] -- register_copy 
  //SEG689 [371] phi (byte) mode_twoplanebitmap::ay#4 = (byte) mode_twoplanebitmap::ay#1 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@4#1] -- register_copy 
    jmp b4
  //SEG690 mode_twoplanebitmap::@4
  b4:
  //SEG691 [372] phi from mode_twoplanebitmap::@4 to mode_twoplanebitmap::@5 [phi:mode_twoplanebitmap::@4->mode_twoplanebitmap::@5]
  b5_from_b4:
  //SEG692 [372] phi (byte) mode_twoplanebitmap::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@4->mode_twoplanebitmap::@5#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG693 [372] phi (byte*) mode_twoplanebitmap::gfxa#3 = (byte*) mode_twoplanebitmap::gfxa#6 [phi:mode_twoplanebitmap::@4->mode_twoplanebitmap::@5#1] -- register_copy 
    jmp b5
  //SEG694 [372] phi from mode_twoplanebitmap::@7 to mode_twoplanebitmap::@5 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@5]
  b5_from_b7:
  //SEG695 [372] phi (byte) mode_twoplanebitmap::ax#2 = (byte) mode_twoplanebitmap::ax#1 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@5#0] -- register_copy 
  //SEG696 [372] phi (byte*) mode_twoplanebitmap::gfxa#3 = (byte*) mode_twoplanebitmap::gfxa#7 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@5#1] -- register_copy 
    jmp b5
  //SEG697 mode_twoplanebitmap::@5
  b5:
  //SEG698 [373] (byte~) mode_twoplanebitmap::$21 ← (byte) mode_twoplanebitmap::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuz1_band_vbuc1 
    lda #4
    and ay
  //SEG699 [374] if((byte~) mode_twoplanebitmap::$21==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_twoplanebitmap::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b6
    jmp b13
  //SEG700 mode_twoplanebitmap::@13
  b13:
  //SEG701 [375] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/word/signed word/dword/signed dword) $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
  //SEG702 [376] (byte*) mode_twoplanebitmap::gfxa#2 ← ++ (byte*) mode_twoplanebitmap::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG703 [377] phi from mode_twoplanebitmap::@13 mode_twoplanebitmap::@6 to mode_twoplanebitmap::@7 [phi:mode_twoplanebitmap::@13/mode_twoplanebitmap::@6->mode_twoplanebitmap::@7]
  b7_from_b13:
  b7_from_b6:
  //SEG704 [377] phi (byte*) mode_twoplanebitmap::gfxa#7 = (byte*) mode_twoplanebitmap::gfxa#2 [phi:mode_twoplanebitmap::@13/mode_twoplanebitmap::@6->mode_twoplanebitmap::@7#0] -- register_copy 
    jmp b7
  //SEG705 mode_twoplanebitmap::@7
  b7:
  //SEG706 [378] (byte) mode_twoplanebitmap::ax#1 ← ++ (byte) mode_twoplanebitmap::ax#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG707 [379] if((byte) mode_twoplanebitmap::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_twoplanebitmap::@5 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b5_from_b7
    jmp b15
  //SEG708 mode_twoplanebitmap::@15
  b15:
  //SEG709 [380] (byte) mode_twoplanebitmap::ay#1 ← ++ (byte) mode_twoplanebitmap::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG710 [381] if((byte) mode_twoplanebitmap::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_twoplanebitmap::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda ay
    cmp #$c8
    bne b4_from_b15
  //SEG711 [382] phi from mode_twoplanebitmap::@15 to mode_twoplanebitmap::@8 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@8]
  b8_from_b15:
  //SEG712 [382] phi (byte) mode_twoplanebitmap::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@8#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG713 [382] phi (byte*) mode_twoplanebitmap::gfxb#3 = (const byte*) mode_twoplanebitmap::PLANEB#0 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@8#1] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta gfxb
    lda #>PLANEB
    sta gfxb+1
    jmp b8
  //SEG714 [382] phi from mode_twoplanebitmap::@17 to mode_twoplanebitmap::@8 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@8]
  b8_from_b17:
  //SEG715 [382] phi (byte) mode_twoplanebitmap::by#4 = (byte) mode_twoplanebitmap::by#1 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@8#0] -- register_copy 
  //SEG716 [382] phi (byte*) mode_twoplanebitmap::gfxb#3 = (byte*) mode_twoplanebitmap::gfxb#1 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@8#1] -- register_copy 
    jmp b8
  //SEG717 mode_twoplanebitmap::@8
  b8:
  //SEG718 [383] phi from mode_twoplanebitmap::@8 to mode_twoplanebitmap::@9 [phi:mode_twoplanebitmap::@8->mode_twoplanebitmap::@9]
  b9_from_b8:
  //SEG719 [383] phi (byte) mode_twoplanebitmap::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@8->mode_twoplanebitmap::@9#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG720 [383] phi (byte*) mode_twoplanebitmap::gfxb#2 = (byte*) mode_twoplanebitmap::gfxb#3 [phi:mode_twoplanebitmap::@8->mode_twoplanebitmap::@9#1] -- register_copy 
    jmp b9
  //SEG721 [383] phi from mode_twoplanebitmap::@9 to mode_twoplanebitmap::@9 [phi:mode_twoplanebitmap::@9->mode_twoplanebitmap::@9]
  b9_from_b9:
  //SEG722 [383] phi (byte) mode_twoplanebitmap::bx#2 = (byte) mode_twoplanebitmap::bx#1 [phi:mode_twoplanebitmap::@9->mode_twoplanebitmap::@9#0] -- register_copy 
  //SEG723 [383] phi (byte*) mode_twoplanebitmap::gfxb#2 = (byte*) mode_twoplanebitmap::gfxb#1 [phi:mode_twoplanebitmap::@9->mode_twoplanebitmap::@9#1] -- register_copy 
    jmp b9
  //SEG724 mode_twoplanebitmap::@9
  b9:
  //SEG725 [384] *((byte*) mode_twoplanebitmap::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $f -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
  //SEG726 [385] (byte*) mode_twoplanebitmap::gfxb#1 ← ++ (byte*) mode_twoplanebitmap::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG727 [386] (byte) mode_twoplanebitmap::bx#1 ← ++ (byte) mode_twoplanebitmap::bx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG728 [387] if((byte) mode_twoplanebitmap::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_twoplanebitmap::@9 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b9_from_b9
    jmp b17
  //SEG729 mode_twoplanebitmap::@17
  b17:
  //SEG730 [388] (byte) mode_twoplanebitmap::by#1 ← ++ (byte) mode_twoplanebitmap::by#4 -- vbuz1=_inc_vbuz1 
    inc by
  //SEG731 [389] if((byte) mode_twoplanebitmap::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_twoplanebitmap::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda by
    cmp #$c8
    bne b8_from_b17
  //SEG732 [390] phi from mode_twoplanebitmap::@17 to mode_twoplanebitmap::@18 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@18]
  b18_from_b17:
    jmp b18
  //SEG733 mode_twoplanebitmap::@18
  b18:
  //SEG734 [391] call mode_ctrl 
  //SEG735 [155] phi from mode_twoplanebitmap::@18 to mode_ctrl [phi:mode_twoplanebitmap::@18->mode_ctrl]
  mode_ctrl_from_b18:
  //SEG736 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 [phi:mode_twoplanebitmap::@18->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR|DTV_LINEAR
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG737 mode_twoplanebitmap::@return
  breturn:
  //SEG738 [392] return 
    rts
  //SEG739 mode_twoplanebitmap::@6
  b6:
  //SEG740 [393] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (gfxa),y
  //SEG741 [394] (byte*) mode_twoplanebitmap::gfxa#1 ← ++ (byte*) mode_twoplanebitmap::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
    jmp b7_from_b6
}
//SEG742 mode_sixsfred2
// Sixs Fred Mode 2 - 8bpp Packed Bitmap - Generated from the two DTV linear graphics plane counters
// Two Plane MultiColor Bitmap - 8bpp Packed Bitmap (CHUNK/COLDIS/HICOL = 0, ECM/BMM/MCM/LINEAR = 1)
// Resolution: 160x200
// Linear Adressing
// PlaneA Pixel Shifter (2), PlaneB Pixel Shifter (2):
// - 8bpp color (PlaneB[1:0],ColorData[5:4],PlaneA[1:0],ColorData[1:0])
mode_sixsfred2: {
    .label PLANEA = $4000
    .label PLANEB = $6000
    .label COLORS = $8000
    .label _15 = 7
    .label col = 2
    .label cy = 4
    .label gfxa = 2
    .label ay = 4
    .label gfxb = 2
    .label by = 4
  //SEG743 [395] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_LINEAR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_LINEAR
    sta DTV_CONTROL
  //SEG744 [396] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG745 [397] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG746 [398] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_sixsfred2::PLANEA#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #<PLANEA
    sta DTV_PLANEA_START_LO
  //SEG747 [399] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_sixsfred2::PLANEA#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
  //SEG748 [400] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG749 [401] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG750 [402] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG751 [403] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
  //SEG752 [404] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_sixsfred2::PLANEB#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #<PLANEB
    sta DTV_PLANEB_START_LO
  //SEG753 [405] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_sixsfred2::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
  //SEG754 [406] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG755 [407] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
  //SEG756 [408] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG757 [409] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG758 [410] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_sixsfred2::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG759 [411] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_sixsfred2::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #>COLORS/$400
    sta DTV_COLOR_BANK_HI
  //SEG760 [412] phi from mode_sixsfred2 to mode_sixsfred2::@1 [phi:mode_sixsfred2->mode_sixsfred2::@1]
  b1_from_mode_sixsfred2:
  //SEG761 [412] phi (byte) mode_sixsfred2::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2->mode_sixsfred2::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  // DTV Palette - Grey Tones
  //SEG762 [412] phi from mode_sixsfred2::@1 to mode_sixsfred2::@1 [phi:mode_sixsfred2::@1->mode_sixsfred2::@1]
  b1_from_b1:
  //SEG763 [412] phi (byte) mode_sixsfred2::i#2 = (byte) mode_sixsfred2::i#1 [phi:mode_sixsfred2::@1->mode_sixsfred2::@1#0] -- register_copy 
    jmp b1
  //SEG764 mode_sixsfred2::@1
  b1:
  //SEG765 [413] *((const byte*) DTV_PALETTE#0 + (byte) mode_sixsfred2::i#2) ← (byte) mode_sixsfred2::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG766 [414] (byte) mode_sixsfred2::i#1 ← ++ (byte) mode_sixsfred2::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG767 [415] if((byte) mode_sixsfred2::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_sixsfred2::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b1
    jmp b8
  //SEG768 mode_sixsfred2::@8
  b8:
  //SEG769 [416] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG770 [417] phi from mode_sixsfred2::@8 to mode_sixsfred2::@2 [phi:mode_sixsfred2::@8->mode_sixsfred2::@2]
  b2_from_b8:
  //SEG771 [417] phi (byte*) mode_sixsfred2::col#3 = (const byte*) mode_sixsfred2::COLORS#0 [phi:mode_sixsfred2::@8->mode_sixsfred2::@2#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG772 [417] phi (byte) mode_sixsfred2::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@8->mode_sixsfred2::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG773 [417] phi from mode_sixsfred2::@9 to mode_sixsfred2::@2 [phi:mode_sixsfred2::@9->mode_sixsfred2::@2]
  b2_from_b9:
  //SEG774 [417] phi (byte*) mode_sixsfred2::col#3 = (byte*) mode_sixsfred2::col#1 [phi:mode_sixsfred2::@9->mode_sixsfred2::@2#0] -- register_copy 
  //SEG775 [417] phi (byte) mode_sixsfred2::cy#4 = (byte) mode_sixsfred2::cy#1 [phi:mode_sixsfred2::@9->mode_sixsfred2::@2#1] -- register_copy 
    jmp b2
  //SEG776 mode_sixsfred2::@2
  b2:
  //SEG777 [418] phi from mode_sixsfred2::@2 to mode_sixsfred2::@3 [phi:mode_sixsfred2::@2->mode_sixsfred2::@3]
  b3_from_b2:
  //SEG778 [418] phi (byte*) mode_sixsfred2::col#2 = (byte*) mode_sixsfred2::col#3 [phi:mode_sixsfred2::@2->mode_sixsfred2::@3#0] -- register_copy 
  //SEG779 [418] phi (byte) mode_sixsfred2::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@2->mode_sixsfred2::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG780 [418] phi from mode_sixsfred2::@3 to mode_sixsfred2::@3 [phi:mode_sixsfred2::@3->mode_sixsfred2::@3]
  b3_from_b3:
  //SEG781 [418] phi (byte*) mode_sixsfred2::col#2 = (byte*) mode_sixsfred2::col#1 [phi:mode_sixsfred2::@3->mode_sixsfred2::@3#0] -- register_copy 
  //SEG782 [418] phi (byte) mode_sixsfred2::cx#2 = (byte) mode_sixsfred2::cx#1 [phi:mode_sixsfred2::@3->mode_sixsfred2::@3#1] -- register_copy 
    jmp b3
  //SEG783 mode_sixsfred2::@3
  b3:
  //SEG784 [419] (byte~) mode_sixsfred2::$14 ← (byte) mode_sixsfred2::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #3
  //SEG785 [420] (byte~) mode_sixsfred2::$15 ← (byte~) mode_sixsfred2::$14 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _15
  //SEG786 [421] (byte~) mode_sixsfred2::$16 ← (byte) mode_sixsfred2::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuz1_band_vbuc1 
    lda #3
    and cy
  //SEG787 [422] (byte~) mode_sixsfred2::$17 ← (byte~) mode_sixsfred2::$15 | (byte~) mode_sixsfred2::$16 -- vbuaa=vbuz1_bor_vbuaa 
    ora _15
  //SEG788 [423] *((byte*) mode_sixsfred2::col#2) ← (byte~) mode_sixsfred2::$17 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG789 [424] (byte*) mode_sixsfred2::col#1 ← ++ (byte*) mode_sixsfred2::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG790 [425] (byte) mode_sixsfred2::cx#1 ← ++ (byte) mode_sixsfred2::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG791 [426] if((byte) mode_sixsfred2::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred2::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3_from_b3
    jmp b9
  //SEG792 mode_sixsfred2::@9
  b9:
  //SEG793 [427] (byte) mode_sixsfred2::cy#1 ← ++ (byte) mode_sixsfred2::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG794 [428] if((byte) mode_sixsfred2::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_sixsfred2::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b9
  //SEG795 [429] phi from mode_sixsfred2::@9 to mode_sixsfred2::@4 [phi:mode_sixsfred2::@9->mode_sixsfred2::@4]
  b4_from_b9:
  //SEG796 [429] phi (byte*) mode_sixsfred2::gfxa#3 = (const byte*) mode_sixsfred2::PLANEA#0 [phi:mode_sixsfred2::@9->mode_sixsfred2::@4#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta gfxa
    lda #>PLANEA
    sta gfxa+1
  //SEG797 [429] phi (byte) mode_sixsfred2::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@9->mode_sixsfred2::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
    jmp b4
  //SEG798 [429] phi from mode_sixsfred2::@11 to mode_sixsfred2::@4 [phi:mode_sixsfred2::@11->mode_sixsfred2::@4]
  b4_from_b11:
  //SEG799 [429] phi (byte*) mode_sixsfred2::gfxa#3 = (byte*) mode_sixsfred2::gfxa#1 [phi:mode_sixsfred2::@11->mode_sixsfred2::@4#0] -- register_copy 
  //SEG800 [429] phi (byte) mode_sixsfred2::ay#4 = (byte) mode_sixsfred2::ay#1 [phi:mode_sixsfred2::@11->mode_sixsfred2::@4#1] -- register_copy 
    jmp b4
  //SEG801 mode_sixsfred2::@4
  b4:
  //SEG802 [430] phi from mode_sixsfred2::@4 to mode_sixsfred2::@5 [phi:mode_sixsfred2::@4->mode_sixsfred2::@5]
  b5_from_b4:
  //SEG803 [430] phi (byte) mode_sixsfred2::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@4->mode_sixsfred2::@5#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG804 [430] phi (byte*) mode_sixsfred2::gfxa#2 = (byte*) mode_sixsfred2::gfxa#3 [phi:mode_sixsfred2::@4->mode_sixsfred2::@5#1] -- register_copy 
    jmp b5
  //SEG805 [430] phi from mode_sixsfred2::@5 to mode_sixsfred2::@5 [phi:mode_sixsfred2::@5->mode_sixsfred2::@5]
  b5_from_b5:
  //SEG806 [430] phi (byte) mode_sixsfred2::ax#2 = (byte) mode_sixsfred2::ax#1 [phi:mode_sixsfred2::@5->mode_sixsfred2::@5#0] -- register_copy 
  //SEG807 [430] phi (byte*) mode_sixsfred2::gfxa#2 = (byte*) mode_sixsfred2::gfxa#1 [phi:mode_sixsfred2::@5->mode_sixsfred2::@5#1] -- register_copy 
    jmp b5
  //SEG808 mode_sixsfred2::@5
  b5:
  //SEG809 [431] (byte~) mode_sixsfred2::$20 ← (byte) mode_sixsfred2::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_ror_1 
    lda ay
    lsr
  //SEG810 [432] (byte) mode_sixsfred2::row#0 ← (byte~) mode_sixsfred2::$20 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuaa_band_vbuc1 
    and #3
  //SEG811 [433] *((byte*) mode_sixsfred2::gfxa#2) ← *((const byte[]) mode_sixsfred2::row_bitmask#0 + (byte) mode_sixsfred2::row#0) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
  //SEG812 [434] (byte*) mode_sixsfred2::gfxa#1 ← ++ (byte*) mode_sixsfred2::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG813 [435] (byte) mode_sixsfred2::ax#1 ← ++ (byte) mode_sixsfred2::ax#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG814 [436] if((byte) mode_sixsfred2::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred2::@5 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b5_from_b5
    jmp b11
  //SEG815 mode_sixsfred2::@11
  b11:
  //SEG816 [437] (byte) mode_sixsfred2::ay#1 ← ++ (byte) mode_sixsfred2::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG817 [438] if((byte) mode_sixsfred2::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_sixsfred2::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda ay
    cmp #$c8
    bne b4_from_b11
  //SEG818 [439] phi from mode_sixsfred2::@11 to mode_sixsfred2::@6 [phi:mode_sixsfred2::@11->mode_sixsfred2::@6]
  b6_from_b11:
  //SEG819 [439] phi (byte) mode_sixsfred2::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@11->mode_sixsfred2::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG820 [439] phi (byte*) mode_sixsfred2::gfxb#3 = (const byte*) mode_sixsfred2::PLANEB#0 [phi:mode_sixsfred2::@11->mode_sixsfred2::@6#1] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta gfxb
    lda #>PLANEB
    sta gfxb+1
    jmp b6
  //SEG821 [439] phi from mode_sixsfred2::@13 to mode_sixsfred2::@6 [phi:mode_sixsfred2::@13->mode_sixsfred2::@6]
  b6_from_b13:
  //SEG822 [439] phi (byte) mode_sixsfred2::by#4 = (byte) mode_sixsfred2::by#1 [phi:mode_sixsfred2::@13->mode_sixsfred2::@6#0] -- register_copy 
  //SEG823 [439] phi (byte*) mode_sixsfred2::gfxb#3 = (byte*) mode_sixsfred2::gfxb#1 [phi:mode_sixsfred2::@13->mode_sixsfred2::@6#1] -- register_copy 
    jmp b6
  //SEG824 mode_sixsfred2::@6
  b6:
  //SEG825 [440] phi from mode_sixsfred2::@6 to mode_sixsfred2::@7 [phi:mode_sixsfred2::@6->mode_sixsfred2::@7]
  b7_from_b6:
  //SEG826 [440] phi (byte) mode_sixsfred2::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@6->mode_sixsfred2::@7#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG827 [440] phi (byte*) mode_sixsfred2::gfxb#2 = (byte*) mode_sixsfred2::gfxb#3 [phi:mode_sixsfred2::@6->mode_sixsfred2::@7#1] -- register_copy 
    jmp b7
  //SEG828 [440] phi from mode_sixsfred2::@7 to mode_sixsfred2::@7 [phi:mode_sixsfred2::@7->mode_sixsfred2::@7]
  b7_from_b7:
  //SEG829 [440] phi (byte) mode_sixsfred2::bx#2 = (byte) mode_sixsfred2::bx#1 [phi:mode_sixsfred2::@7->mode_sixsfred2::@7#0] -- register_copy 
  //SEG830 [440] phi (byte*) mode_sixsfred2::gfxb#2 = (byte*) mode_sixsfred2::gfxb#1 [phi:mode_sixsfred2::@7->mode_sixsfred2::@7#1] -- register_copy 
    jmp b7
  //SEG831 mode_sixsfred2::@7
  b7:
  //SEG832 [441] *((byte*) mode_sixsfred2::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $1b -- _deref_pbuz1=vbuc1 
    lda #$1b
    ldy #0
    sta (gfxb),y
  //SEG833 [442] (byte*) mode_sixsfred2::gfxb#1 ← ++ (byte*) mode_sixsfred2::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG834 [443] (byte) mode_sixsfred2::bx#1 ← ++ (byte) mode_sixsfred2::bx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG835 [444] if((byte) mode_sixsfred2::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred2::@7 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b7_from_b7
    jmp b13
  //SEG836 mode_sixsfred2::@13
  b13:
  //SEG837 [445] (byte) mode_sixsfred2::by#1 ← ++ (byte) mode_sixsfred2::by#4 -- vbuz1=_inc_vbuz1 
    inc by
  //SEG838 [446] if((byte) mode_sixsfred2::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_sixsfred2::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda by
    cmp #$c8
    bne b6_from_b13
  //SEG839 [447] phi from mode_sixsfred2::@13 to mode_sixsfred2::@14 [phi:mode_sixsfred2::@13->mode_sixsfred2::@14]
  b14_from_b13:
    jmp b14
  //SEG840 mode_sixsfred2::@14
  b14:
  //SEG841 [448] call mode_ctrl 
  //SEG842 [155] phi from mode_sixsfred2::@14 to mode_ctrl [phi:mode_sixsfred2::@14->mode_ctrl]
  mode_ctrl_from_b14:
  //SEG843 [155] phi (byte) dtv_control#145 = (const byte) DTV_LINEAR#0 [phi:mode_sixsfred2::@14->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_LINEAR
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG844 mode_sixsfred2::@return
  breturn:
  //SEG845 [449] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
//SEG846 mode_hicolmcchar
// High Color Multicolor Character Mode (LINEAR/CHUNK/COLDIS/BMM/ECM = 0, MCM/HICOL = 1)
// Resolution: 160x200 (320x200)
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
//GfxData Pixel Shifter (1) if ColorData[3:3] = 0:
// - 0: 8bpp BgColor0[7:0]
// - 1: 8bpp ColorData[7:4] "0" & Color[2:0]
//GfxData Pixel Shifter (2) if ColorData[3:3] = 1:
// - 00: 8bpp BgColor0[7:0]
// - 01: 8bpp BgColor1[7:0]
// - 10: 8bpp BgColor2[7:0]
// - 11: 8bpp ColorData[7:4] "0" & Color[2:0]
mode_hicolmcchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $8400
    .label _26 = 7
    .label col = 2
    .label ch = 5
    .label cy = 4
  //SEG847 [450] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolmcchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG848 [451] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG849 [452] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG850 [453] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR
    sta DTV_CONTROL
  //SEG851 [454] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG852 [455] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolmcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG853 [456] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG854 [457] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL|VIC_MCM
    sta VIC_CONTROL2
  //SEG855 [458] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolmcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolmcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG856 [459] phi from mode_hicolmcchar to mode_hicolmcchar::@1 [phi:mode_hicolmcchar->mode_hicolmcchar::@1]
  b1_from_mode_hicolmcchar:
  //SEG857 [459] phi (byte) mode_hicolmcchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolmcchar->mode_hicolmcchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  // DTV Palette - Grey Tones
  //SEG858 [459] phi from mode_hicolmcchar::@1 to mode_hicolmcchar::@1 [phi:mode_hicolmcchar::@1->mode_hicolmcchar::@1]
  b1_from_b1:
  //SEG859 [459] phi (byte) mode_hicolmcchar::i#2 = (byte) mode_hicolmcchar::i#1 [phi:mode_hicolmcchar::@1->mode_hicolmcchar::@1#0] -- register_copy 
    jmp b1
  //SEG860 mode_hicolmcchar::@1
  b1:
  //SEG861 [460] *((const byte*) DTV_PALETTE#0 + (byte) mode_hicolmcchar::i#2) ← (byte) mode_hicolmcchar::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG862 [461] (byte) mode_hicolmcchar::i#1 ← ++ (byte) mode_hicolmcchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG863 [462] if((byte) mode_hicolmcchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_hicolmcchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b1
    jmp b4
  //SEG864 mode_hicolmcchar::@4
  b4:
  //SEG865 [463] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG866 [464] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $50 -- _deref_pbuc1=vbuc2 
    lda #$50
    sta BGCOL1
  //SEG867 [465] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) $54 -- _deref_pbuc1=vbuc2 
    lda #$54
    sta BGCOL2
  //SEG868 [466] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) $58 -- _deref_pbuc1=vbuc2 
    lda #$58
    sta BGCOL3
  //SEG869 [467] phi from mode_hicolmcchar::@4 to mode_hicolmcchar::@2 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@2]
  b2_from_b4:
  //SEG870 [467] phi (byte*) mode_hicolmcchar::ch#3 = (const byte*) mode_hicolmcchar::SCREEN#0 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG871 [467] phi (byte*) mode_hicolmcchar::col#3 = (const byte*) mode_hicolmcchar::COLORS#0 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG872 [467] phi (byte) mode_hicolmcchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG873 [467] phi from mode_hicolmcchar::@5 to mode_hicolmcchar::@2 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@2]
  b2_from_b5:
  //SEG874 [467] phi (byte*) mode_hicolmcchar::ch#3 = (byte*) mode_hicolmcchar::ch#1 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@2#0] -- register_copy 
  //SEG875 [467] phi (byte*) mode_hicolmcchar::col#3 = (byte*) mode_hicolmcchar::col#1 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@2#1] -- register_copy 
  //SEG876 [467] phi (byte) mode_hicolmcchar::cy#4 = (byte) mode_hicolmcchar::cy#1 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@2#2] -- register_copy 
    jmp b2
  //SEG877 mode_hicolmcchar::@2
  b2:
  //SEG878 [468] phi from mode_hicolmcchar::@2 to mode_hicolmcchar::@3 [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3]
  b3_from_b2:
  //SEG879 [468] phi (byte*) mode_hicolmcchar::ch#2 = (byte*) mode_hicolmcchar::ch#3 [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3#0] -- register_copy 
  //SEG880 [468] phi (byte*) mode_hicolmcchar::col#2 = (byte*) mode_hicolmcchar::col#3 [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3#1] -- register_copy 
  //SEG881 [468] phi (byte) mode_hicolmcchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3#2] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG882 [468] phi from mode_hicolmcchar::@3 to mode_hicolmcchar::@3 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@3]
  b3_from_b3:
  //SEG883 [468] phi (byte*) mode_hicolmcchar::ch#2 = (byte*) mode_hicolmcchar::ch#1 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@3#0] -- register_copy 
  //SEG884 [468] phi (byte*) mode_hicolmcchar::col#2 = (byte*) mode_hicolmcchar::col#1 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@3#1] -- register_copy 
  //SEG885 [468] phi (byte) mode_hicolmcchar::cx#2 = (byte) mode_hicolmcchar::cx#1 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@3#2] -- register_copy 
    jmp b3
  //SEG886 mode_hicolmcchar::@3
  b3:
  //SEG887 [469] (byte~) mode_hicolmcchar::$25 ← (byte) mode_hicolmcchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG888 [470] (byte~) mode_hicolmcchar::$26 ← (byte~) mode_hicolmcchar::$25 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _26
  //SEG889 [471] (byte~) mode_hicolmcchar::$27 ← (byte) mode_hicolmcchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG890 [472] (byte) mode_hicolmcchar::v#0 ← (byte~) mode_hicolmcchar::$26 | (byte~) mode_hicolmcchar::$27 -- vbuaa=vbuz1_bor_vbuaa 
    ora _26
  //SEG891 [473] *((byte*) mode_hicolmcchar::col#2) ← (byte) mode_hicolmcchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG892 [474] (byte*) mode_hicolmcchar::col#1 ← ++ (byte*) mode_hicolmcchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG893 [475] *((byte*) mode_hicolmcchar::ch#2) ← (byte) mode_hicolmcchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG894 [476] (byte*) mode_hicolmcchar::ch#1 ← ++ (byte*) mode_hicolmcchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG895 [477] (byte) mode_hicolmcchar::cx#1 ← ++ (byte) mode_hicolmcchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG896 [478] if((byte) mode_hicolmcchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_hicolmcchar::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3_from_b3
    jmp b5
  //SEG897 mode_hicolmcchar::@5
  b5:
  //SEG898 [479] (byte) mode_hicolmcchar::cy#1 ← ++ (byte) mode_hicolmcchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG899 [480] if((byte) mode_hicolmcchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_hicolmcchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b5
  //SEG900 [481] phi from mode_hicolmcchar::@5 to mode_hicolmcchar::@6 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@6]
  b6_from_b5:
    jmp b6
  //SEG901 mode_hicolmcchar::@6
  b6:
  //SEG902 [482] call mode_ctrl 
  //SEG903 [155] phi from mode_hicolmcchar::@6 to mode_ctrl [phi:mode_hicolmcchar::@6->mode_ctrl]
  mode_ctrl_from_b6:
  //SEG904 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0 [phi:mode_hicolmcchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG905 mode_hicolmcchar::@return
  breturn:
  //SEG906 [483] return 
    rts
}
//SEG907 mode_hicolecmchar
// High Color Extended Background Color Character Mode (LINEAR/CHUNK/COLDIS/MCM/BMM = 0, ECM/HICOL = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & "00" & CharData[5:0] & RowCounter[2:0] )
// GfxData Pixel Shifter (1)
//  - 0: 8bpp Background Color
//    - CharData[7:6] 00: 8bpp BgColor0[7:0]
//    - CharData[7:6] 01: 8bpp BgColor1[7:0]
//    - CharData[7:6] 10: 8bpp BgColor2[7:0]
//    - CharData[7:6] 11: 8bpp BgColor3[7:0]
//  - 1: 8bpp ColorData[7:0]
mode_hicolecmchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $8400
    .label _26 = 7
    .label col = 2
    .label ch = 5
    .label cy = 4
  //SEG908 [484] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolecmchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG909 [485] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG910 [486] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG911 [487] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR
    sta DTV_CONTROL
  //SEG912 [488] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG913 [489] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG914 [490] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(const byte) VIC_ECM#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|VIC_ECM|3
    sta VIC_CONTROL
  //SEG915 [491] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG916 [492] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG917 [493] phi from mode_hicolecmchar to mode_hicolecmchar::@1 [phi:mode_hicolecmchar->mode_hicolecmchar::@1]
  b1_from_mode_hicolecmchar:
  //SEG918 [493] phi (byte) mode_hicolecmchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolecmchar->mode_hicolecmchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  // DTV Palette - Grey Tones
  //SEG919 [493] phi from mode_hicolecmchar::@1 to mode_hicolecmchar::@1 [phi:mode_hicolecmchar::@1->mode_hicolecmchar::@1]
  b1_from_b1:
  //SEG920 [493] phi (byte) mode_hicolecmchar::i#2 = (byte) mode_hicolecmchar::i#1 [phi:mode_hicolecmchar::@1->mode_hicolecmchar::@1#0] -- register_copy 
    jmp b1
  //SEG921 mode_hicolecmchar::@1
  b1:
  //SEG922 [494] *((const byte*) DTV_PALETTE#0 + (byte) mode_hicolecmchar::i#2) ← (byte) mode_hicolecmchar::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG923 [495] (byte) mode_hicolecmchar::i#1 ← ++ (byte) mode_hicolecmchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG924 [496] if((byte) mode_hicolecmchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_hicolecmchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b1
    jmp b4
  //SEG925 mode_hicolecmchar::@4
  b4:
  //SEG926 [497] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG927 [498] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $50 -- _deref_pbuc1=vbuc2 
    lda #$50
    sta BGCOL1
  //SEG928 [499] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) $54 -- _deref_pbuc1=vbuc2 
    lda #$54
    sta BGCOL2
  //SEG929 [500] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) $58 -- _deref_pbuc1=vbuc2 
    lda #$58
    sta BGCOL3
  //SEG930 [501] *((const byte*) BGCOL4#0) ← (byte/signed byte/word/signed word/dword/signed dword) $5c -- _deref_pbuc1=vbuc2 
    lda #$5c
    sta BGCOL4
  //SEG931 [502] phi from mode_hicolecmchar::@4 to mode_hicolecmchar::@2 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@2]
  b2_from_b4:
  //SEG932 [502] phi (byte*) mode_hicolecmchar::ch#3 = (const byte*) mode_hicolecmchar::SCREEN#0 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG933 [502] phi (byte*) mode_hicolecmchar::col#3 = (const byte*) mode_hicolecmchar::COLORS#0 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG934 [502] phi (byte) mode_hicolecmchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG935 [502] phi from mode_hicolecmchar::@5 to mode_hicolecmchar::@2 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@2]
  b2_from_b5:
  //SEG936 [502] phi (byte*) mode_hicolecmchar::ch#3 = (byte*) mode_hicolecmchar::ch#1 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@2#0] -- register_copy 
  //SEG937 [502] phi (byte*) mode_hicolecmchar::col#3 = (byte*) mode_hicolecmchar::col#1 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@2#1] -- register_copy 
  //SEG938 [502] phi (byte) mode_hicolecmchar::cy#4 = (byte) mode_hicolecmchar::cy#1 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@2#2] -- register_copy 
    jmp b2
  //SEG939 mode_hicolecmchar::@2
  b2:
  //SEG940 [503] phi from mode_hicolecmchar::@2 to mode_hicolecmchar::@3 [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3]
  b3_from_b2:
  //SEG941 [503] phi (byte*) mode_hicolecmchar::ch#2 = (byte*) mode_hicolecmchar::ch#3 [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3#0] -- register_copy 
  //SEG942 [503] phi (byte*) mode_hicolecmchar::col#2 = (byte*) mode_hicolecmchar::col#3 [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3#1] -- register_copy 
  //SEG943 [503] phi (byte) mode_hicolecmchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3#2] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG944 [503] phi from mode_hicolecmchar::@3 to mode_hicolecmchar::@3 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@3]
  b3_from_b3:
  //SEG945 [503] phi (byte*) mode_hicolecmchar::ch#2 = (byte*) mode_hicolecmchar::ch#1 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@3#0] -- register_copy 
  //SEG946 [503] phi (byte*) mode_hicolecmchar::col#2 = (byte*) mode_hicolecmchar::col#1 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@3#1] -- register_copy 
  //SEG947 [503] phi (byte) mode_hicolecmchar::cx#2 = (byte) mode_hicolecmchar::cx#1 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@3#2] -- register_copy 
    jmp b3
  //SEG948 mode_hicolecmchar::@3
  b3:
  //SEG949 [504] (byte~) mode_hicolecmchar::$25 ← (byte) mode_hicolecmchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG950 [505] (byte~) mode_hicolecmchar::$26 ← (byte~) mode_hicolecmchar::$25 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _26
  //SEG951 [506] (byte~) mode_hicolecmchar::$27 ← (byte) mode_hicolecmchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG952 [507] (byte) mode_hicolecmchar::v#0 ← (byte~) mode_hicolecmchar::$26 | (byte~) mode_hicolecmchar::$27 -- vbuaa=vbuz1_bor_vbuaa 
    ora _26
  //SEG953 [508] *((byte*) mode_hicolecmchar::col#2) ← (byte) mode_hicolecmchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG954 [509] (byte*) mode_hicolecmchar::col#1 ← ++ (byte*) mode_hicolecmchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG955 [510] *((byte*) mode_hicolecmchar::ch#2) ← (byte) mode_hicolecmchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG956 [511] (byte*) mode_hicolecmchar::ch#1 ← ++ (byte*) mode_hicolecmchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG957 [512] (byte) mode_hicolecmchar::cx#1 ← ++ (byte) mode_hicolecmchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG958 [513] if((byte) mode_hicolecmchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_hicolecmchar::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3_from_b3
    jmp b5
  //SEG959 mode_hicolecmchar::@5
  b5:
  //SEG960 [514] (byte) mode_hicolecmchar::cy#1 ← ++ (byte) mode_hicolecmchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG961 [515] if((byte) mode_hicolecmchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_hicolecmchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b5
  //SEG962 [516] phi from mode_hicolecmchar::@5 to mode_hicolecmchar::@6 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@6]
  b6_from_b5:
    jmp b6
  //SEG963 mode_hicolecmchar::@6
  b6:
  //SEG964 [517] call mode_ctrl 
  //SEG965 [155] phi from mode_hicolecmchar::@6 to mode_ctrl [phi:mode_hicolecmchar::@6->mode_ctrl]
  mode_ctrl_from_b6:
  //SEG966 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0 [phi:mode_hicolecmchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG967 mode_hicolecmchar::@return
  breturn:
  //SEG968 [518] return 
    rts
}
//SEG969 mode_hicolstdchar
// High Color Standard Character Mode (LINEAR/CHUNK/COLDIS/ECM/MCM/BMM = 0, HICOL = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
// Pixel Shifter (1)
//  - 0: 8bpp BgColor0[7:0]
//  - 1: 8bpp ColorData[7:0]
mode_hicolstdchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $8400
    .label _25 = 7
    .label col = 2
    .label ch = 5
    .label cy = 4
  //SEG970 [519] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolstdchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG971 [520] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG972 [521] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG973 [522] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR
    sta DTV_CONTROL
  //SEG974 [523] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG975 [524] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolstdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG976 [525] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG977 [526] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG978 [527] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolstdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolstdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG979 [528] phi from mode_hicolstdchar to mode_hicolstdchar::@1 [phi:mode_hicolstdchar->mode_hicolstdchar::@1]
  b1_from_mode_hicolstdchar:
  //SEG980 [528] phi (byte) mode_hicolstdchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolstdchar->mode_hicolstdchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  // DTV Palette - Grey Tones
  //SEG981 [528] phi from mode_hicolstdchar::@1 to mode_hicolstdchar::@1 [phi:mode_hicolstdchar::@1->mode_hicolstdchar::@1]
  b1_from_b1:
  //SEG982 [528] phi (byte) mode_hicolstdchar::i#2 = (byte) mode_hicolstdchar::i#1 [phi:mode_hicolstdchar::@1->mode_hicolstdchar::@1#0] -- register_copy 
    jmp b1
  //SEG983 mode_hicolstdchar::@1
  b1:
  //SEG984 [529] *((const byte*) DTV_PALETTE#0 + (byte) mode_hicolstdchar::i#2) ← (byte) mode_hicolstdchar::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG985 [530] (byte) mode_hicolstdchar::i#1 ← ++ (byte) mode_hicolstdchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG986 [531] if((byte) mode_hicolstdchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_hicolstdchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b1
    jmp b4
  //SEG987 mode_hicolstdchar::@4
  b4:
  //SEG988 [532] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BGCOL
  //SEG989 [533] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
  //SEG990 [534] phi from mode_hicolstdchar::@4 to mode_hicolstdchar::@2 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@2]
  b2_from_b4:
  //SEG991 [534] phi (byte*) mode_hicolstdchar::ch#3 = (const byte*) mode_hicolstdchar::SCREEN#0 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG992 [534] phi (byte*) mode_hicolstdchar::col#3 = (const byte*) mode_hicolstdchar::COLORS#0 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG993 [534] phi (byte) mode_hicolstdchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG994 [534] phi from mode_hicolstdchar::@5 to mode_hicolstdchar::@2 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@2]
  b2_from_b5:
  //SEG995 [534] phi (byte*) mode_hicolstdchar::ch#3 = (byte*) mode_hicolstdchar::ch#1 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@2#0] -- register_copy 
  //SEG996 [534] phi (byte*) mode_hicolstdchar::col#3 = (byte*) mode_hicolstdchar::col#1 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@2#1] -- register_copy 
  //SEG997 [534] phi (byte) mode_hicolstdchar::cy#4 = (byte) mode_hicolstdchar::cy#1 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@2#2] -- register_copy 
    jmp b2
  //SEG998 mode_hicolstdchar::@2
  b2:
  //SEG999 [535] phi from mode_hicolstdchar::@2 to mode_hicolstdchar::@3 [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3]
  b3_from_b2:
  //SEG1000 [535] phi (byte*) mode_hicolstdchar::ch#2 = (byte*) mode_hicolstdchar::ch#3 [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3#0] -- register_copy 
  //SEG1001 [535] phi (byte*) mode_hicolstdchar::col#2 = (byte*) mode_hicolstdchar::col#3 [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3#1] -- register_copy 
  //SEG1002 [535] phi (byte) mode_hicolstdchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3#2] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG1003 [535] phi from mode_hicolstdchar::@3 to mode_hicolstdchar::@3 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@3]
  b3_from_b3:
  //SEG1004 [535] phi (byte*) mode_hicolstdchar::ch#2 = (byte*) mode_hicolstdchar::ch#1 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@3#0] -- register_copy 
  //SEG1005 [535] phi (byte*) mode_hicolstdchar::col#2 = (byte*) mode_hicolstdchar::col#1 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@3#1] -- register_copy 
  //SEG1006 [535] phi (byte) mode_hicolstdchar::cx#2 = (byte) mode_hicolstdchar::cx#1 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@3#2] -- register_copy 
    jmp b3
  //SEG1007 mode_hicolstdchar::@3
  b3:
  //SEG1008 [536] (byte~) mode_hicolstdchar::$24 ← (byte) mode_hicolstdchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG1009 [537] (byte~) mode_hicolstdchar::$25 ← (byte~) mode_hicolstdchar::$24 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _25
  //SEG1010 [538] (byte~) mode_hicolstdchar::$26 ← (byte) mode_hicolstdchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG1011 [539] (byte) mode_hicolstdchar::v#0 ← (byte~) mode_hicolstdchar::$25 | (byte~) mode_hicolstdchar::$26 -- vbuaa=vbuz1_bor_vbuaa 
    ora _25
  //SEG1012 [540] *((byte*) mode_hicolstdchar::col#2) ← (byte) mode_hicolstdchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG1013 [541] (byte*) mode_hicolstdchar::col#1 ← ++ (byte*) mode_hicolstdchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG1014 [542] *((byte*) mode_hicolstdchar::ch#2) ← (byte) mode_hicolstdchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1015 [543] (byte*) mode_hicolstdchar::ch#1 ← ++ (byte*) mode_hicolstdchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1016 [544] (byte) mode_hicolstdchar::cx#1 ← ++ (byte) mode_hicolstdchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1017 [545] if((byte) mode_hicolstdchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_hicolstdchar::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3_from_b3
    jmp b5
  //SEG1018 mode_hicolstdchar::@5
  b5:
  //SEG1019 [546] (byte) mode_hicolstdchar::cy#1 ← ++ (byte) mode_hicolstdchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1020 [547] if((byte) mode_hicolstdchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_hicolstdchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b5
  //SEG1021 [548] phi from mode_hicolstdchar::@5 to mode_hicolstdchar::@6 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@6]
  b6_from_b5:
    jmp b6
  //SEG1022 mode_hicolstdchar::@6
  b6:
  //SEG1023 [549] call mode_ctrl 
  //SEG1024 [155] phi from mode_hicolstdchar::@6 to mode_ctrl [phi:mode_hicolstdchar::@6->mode_ctrl]
  mode_ctrl_from_b6:
  //SEG1025 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0 [phi:mode_hicolstdchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG1026 mode_hicolstdchar::@return
  breturn:
  //SEG1027 [550] return 
    rts
}
//SEG1028 mode_stdbitmap
// Standard Bitmap Mode (LINEAR/HICOL/CHUNK/COLDIS/MCM/ECM = 0, BMM = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:2] & Matrix[9:0] & RowCounter[2:0] )
// Pixel Shifter (1)
//  - 0: 4bpp CharData[3:0]
//  - 1: 4bpp CharData[7:4]
mode_stdbitmap: {
    .label SCREEN = $4000
    .label BITMAP = $6000
    .const lines_cnt = 9
    .label col2 = 7
    .label ch = 2
    .label cy = 4
    .label l = 4
  //SEG1029 [551] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_stdbitmap::BITMAP#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&BITMAP)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG1030 [552] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_CONTROL
  //SEG1031 [553] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG1032 [554] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_stdbitmap::BITMAP#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^BITMAP/$4000
    sta CIA2_PORT_A
  //SEG1033 [555] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG1034 [556] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG1035 [557] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_stdbitmap::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_stdbitmap::BITMAP#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(BITMAP&$3fff)/$400
    sta VIC_MEMORY
  //SEG1036 [558] phi from mode_stdbitmap to mode_stdbitmap::@1 [phi:mode_stdbitmap->mode_stdbitmap::@1]
  b1_from_mode_stdbitmap:
  //SEG1037 [558] phi (byte) mode_stdbitmap::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdbitmap->mode_stdbitmap::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  // DTV Palette - default
  //SEG1038 [558] phi from mode_stdbitmap::@1 to mode_stdbitmap::@1 [phi:mode_stdbitmap::@1->mode_stdbitmap::@1]
  b1_from_b1:
  //SEG1039 [558] phi (byte) mode_stdbitmap::i#2 = (byte) mode_stdbitmap::i#1 [phi:mode_stdbitmap::@1->mode_stdbitmap::@1#0] -- register_copy 
    jmp b1
  //SEG1040 mode_stdbitmap::@1
  b1:
  //SEG1041 [559] *((const byte*) DTV_PALETTE#0 + (byte) mode_stdbitmap::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_stdbitmap::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
  //SEG1042 [560] (byte) mode_stdbitmap::i#1 ← ++ (byte) mode_stdbitmap::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1043 [561] if((byte) mode_stdbitmap::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_stdbitmap::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b1
    jmp b5
  //SEG1044 mode_stdbitmap::@5
  b5:
  //SEG1045 [562] *((const byte*) BGCOL#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #BLACK
    sta BGCOL
  //SEG1046 [563] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
  //SEG1047 [564] phi from mode_stdbitmap::@5 to mode_stdbitmap::@2 [phi:mode_stdbitmap::@5->mode_stdbitmap::@2]
  b2_from_b5:
  //SEG1048 [564] phi (byte*) mode_stdbitmap::ch#3 = (const byte*) mode_stdbitmap::SCREEN#0 [phi:mode_stdbitmap::@5->mode_stdbitmap::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG1049 [564] phi (byte) mode_stdbitmap::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdbitmap::@5->mode_stdbitmap::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG1050 [564] phi from mode_stdbitmap::@6 to mode_stdbitmap::@2 [phi:mode_stdbitmap::@6->mode_stdbitmap::@2]
  b2_from_b6:
  //SEG1051 [564] phi (byte*) mode_stdbitmap::ch#3 = (byte*) mode_stdbitmap::ch#1 [phi:mode_stdbitmap::@6->mode_stdbitmap::@2#0] -- register_copy 
  //SEG1052 [564] phi (byte) mode_stdbitmap::cy#4 = (byte) mode_stdbitmap::cy#1 [phi:mode_stdbitmap::@6->mode_stdbitmap::@2#1] -- register_copy 
    jmp b2
  //SEG1053 mode_stdbitmap::@2
  b2:
  //SEG1054 [565] phi from mode_stdbitmap::@2 to mode_stdbitmap::@3 [phi:mode_stdbitmap::@2->mode_stdbitmap::@3]
  b3_from_b2:
  //SEG1055 [565] phi (byte*) mode_stdbitmap::ch#2 = (byte*) mode_stdbitmap::ch#3 [phi:mode_stdbitmap::@2->mode_stdbitmap::@3#0] -- register_copy 
  //SEG1056 [565] phi (byte) mode_stdbitmap::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdbitmap::@2->mode_stdbitmap::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG1057 [565] phi from mode_stdbitmap::@3 to mode_stdbitmap::@3 [phi:mode_stdbitmap::@3->mode_stdbitmap::@3]
  b3_from_b3:
  //SEG1058 [565] phi (byte*) mode_stdbitmap::ch#2 = (byte*) mode_stdbitmap::ch#1 [phi:mode_stdbitmap::@3->mode_stdbitmap::@3#0] -- register_copy 
  //SEG1059 [565] phi (byte) mode_stdbitmap::cx#2 = (byte) mode_stdbitmap::cx#1 [phi:mode_stdbitmap::@3->mode_stdbitmap::@3#1] -- register_copy 
    jmp b3
  //SEG1060 mode_stdbitmap::@3
  b3:
  //SEG1061 [566] (byte~) mode_stdbitmap::$19 ← (byte) mode_stdbitmap::cx#2 + (byte) mode_stdbitmap::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc cy
  //SEG1062 [567] (byte) mode_stdbitmap::col#0 ← (byte~) mode_stdbitmap::$19 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuyy=vbuaa_band_vbuc1 
    and #$f
    tay
  //SEG1063 [568] (byte) mode_stdbitmap::col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f - (byte) mode_stdbitmap::col#0 -- vbuz1=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    clc
    adc #$f+1
    sta col2
  //SEG1064 [569] (byte~) mode_stdbitmap::$22 ← (byte) mode_stdbitmap::col#0 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuyy_rol_4 
    tya
    asl
    asl
    asl
    asl
  //SEG1065 [570] (byte~) mode_stdbitmap::$23 ← (byte~) mode_stdbitmap::$22 | (byte) mode_stdbitmap::col2#0 -- vbuaa=vbuaa_bor_vbuz1 
    ora col2
  //SEG1066 [571] *((byte*) mode_stdbitmap::ch#2) ← (byte~) mode_stdbitmap::$23 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1067 [572] (byte*) mode_stdbitmap::ch#1 ← ++ (byte*) mode_stdbitmap::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1068 [573] (byte) mode_stdbitmap::cx#1 ← ++ (byte) mode_stdbitmap::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1069 [574] if((byte) mode_stdbitmap::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_stdbitmap::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3_from_b3
    jmp b6
  //SEG1070 mode_stdbitmap::@6
  b6:
  //SEG1071 [575] (byte) mode_stdbitmap::cy#1 ← ++ (byte) mode_stdbitmap::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1072 [576] if((byte) mode_stdbitmap::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_stdbitmap::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b6
  //SEG1073 [577] phi from mode_stdbitmap::@6 to mode_stdbitmap::@7 [phi:mode_stdbitmap::@6->mode_stdbitmap::@7]
  b7_from_b6:
    jmp b7
  //SEG1074 mode_stdbitmap::@7
  b7:
  //SEG1075 [578] call bitmap_init 
  //SEG1076 [732] phi from mode_stdbitmap::@7 to bitmap_init [phi:mode_stdbitmap::@7->bitmap_init]
  bitmap_init_from_b7:
    jsr bitmap_init
  //SEG1077 [579] phi from mode_stdbitmap::@7 to mode_stdbitmap::@9 [phi:mode_stdbitmap::@7->mode_stdbitmap::@9]
  b9_from_b7:
    jmp b9
  //SEG1078 mode_stdbitmap::@9
  b9:
  //SEG1079 [580] call bitmap_clear 
    jsr bitmap_clear
  //SEG1080 [581] phi from mode_stdbitmap::@9 to mode_stdbitmap::@4 [phi:mode_stdbitmap::@9->mode_stdbitmap::@4]
  b4_from_b9:
  //SEG1081 [581] phi (byte) mode_stdbitmap::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdbitmap::@9->mode_stdbitmap::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta l
    jmp b4
  //SEG1082 [581] phi from mode_stdbitmap::@11 to mode_stdbitmap::@4 [phi:mode_stdbitmap::@11->mode_stdbitmap::@4]
  b4_from_b11:
  //SEG1083 [581] phi (byte) mode_stdbitmap::l#2 = (byte) mode_stdbitmap::l#1 [phi:mode_stdbitmap::@11->mode_stdbitmap::@4#0] -- register_copy 
    jmp b4
  //SEG1084 mode_stdbitmap::@4
  b4:
  //SEG1085 [582] (byte) bitmap_line::x0#0 ← *((const byte[]) mode_stdbitmap::lines_x#0 + (byte) mode_stdbitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy l
    lda lines_x,y
    sta bitmap_line.x0
  //SEG1086 [583] (byte) bitmap_line::x1#0 ← *((const byte[]) mode_stdbitmap::lines_x#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mode_stdbitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy l
    lda lines_x+1,y
    sta bitmap_line.x1
  //SEG1087 [584] (byte) bitmap_line::y0#0 ← *((const byte[]) mode_stdbitmap::lines_y#0 + (byte) mode_stdbitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy l
    lda lines_y,y
    sta bitmap_line.y0
  //SEG1088 [585] (byte) bitmap_line::y1#0 ← *((const byte[]) mode_stdbitmap::lines_y#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mode_stdbitmap::l#2) -- vbuyy=pbuc1_derefidx_vbuz1 
    ldx l
    ldy lines_y+1,x
  //SEG1089 [586] call bitmap_line 
    jsr bitmap_line
    jmp b11
  //SEG1090 mode_stdbitmap::@11
  b11:
  //SEG1091 [587] (byte) mode_stdbitmap::l#1 ← ++ (byte) mode_stdbitmap::l#2 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG1092 [588] if((byte) mode_stdbitmap::l#1<(const byte) mode_stdbitmap::lines_cnt#0) goto mode_stdbitmap::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda l
    cmp #lines_cnt
    bcc b4_from_b11
  //SEG1093 [589] phi from mode_stdbitmap::@11 to mode_stdbitmap::@8 [phi:mode_stdbitmap::@11->mode_stdbitmap::@8]
  b8_from_b11:
    jmp b8
  //SEG1094 mode_stdbitmap::@8
  b8:
  //SEG1095 [590] call mode_ctrl 
  //SEG1096 [155] phi from mode_stdbitmap::@8 to mode_ctrl [phi:mode_stdbitmap::@8->mode_ctrl]
  mode_ctrl_from_b8:
  //SEG1097 [155] phi (byte) dtv_control#145 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdbitmap::@8->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #0
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG1098 mode_stdbitmap::@return
  breturn:
  //SEG1099 [591] return 
    rts
    lines_x: .byte 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80
    lines_y: .byte 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0
}
//SEG1100 bitmap_line
// Draw a line on the bitmap
// bitmap_line(byte zeropage(9) x0, byte zeropage($c) x1, byte zeropage($b) y0, byte register(Y) y1)
bitmap_line: {
    .label xd = 8
    .label yd = 7
    .label x0 = 9
    .label x1 = $c
    .label y0 = $b
  //SEG1101 [592] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda x0
    cmp x1
    bcc b1
    jmp b15
  //SEG1102 bitmap_line::@15
  b15:
  //SEG1103 [593] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda x0
    sec
    sbc x1
    sta xd
  //SEG1104 [594] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@2 -- vbuz1_lt_vbuyy_then_la1 
    tya
    cmp y0
    beq !+
    bcs b2
  !:
    jmp b16
  //SEG1105 bitmap_line::@16
  b16:
  //SEG1106 [595] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuz1=vbuz2_minus_vbuyy 
    tya
    eor #$ff
    sec
    adc y0
    sta yd
  //SEG1107 [596] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@3 -- vbuz1_lt_vbuz2_then_la1 
    lda yd
    cmp xd
    bcc b3
    jmp b17
  //SEG1108 bitmap_line::@17
  b17:
  //SEG1109 [597] (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty bitmap_line_ydxi.y
  //SEG1110 [598] (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#0 -- vbuxx=vbuz1 
    ldx x1
  //SEG1111 [599] (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#0
  //SEG1112 [600] (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#2
  //SEG1113 [601] (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#2
  //SEG1114 [602] call bitmap_line_ydxi 
  //SEG1115 [676] phi from bitmap_line::@17 to bitmap_line_ydxi [phi:bitmap_line::@17->bitmap_line_ydxi]
  bitmap_line_ydxi_from_b17:
  //SEG1116 [676] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#0 [phi:bitmap_line::@17->bitmap_line_ydxi#0] -- register_copy 
  //SEG1117 [676] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#0 [phi:bitmap_line::@17->bitmap_line_ydxi#1] -- register_copy 
  //SEG1118 [676] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#0 [phi:bitmap_line::@17->bitmap_line_ydxi#2] -- register_copy 
  //SEG1119 [676] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#0 [phi:bitmap_line::@17->bitmap_line_ydxi#3] -- register_copy 
  //SEG1120 [676] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#0 [phi:bitmap_line::@17->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp breturn
  //SEG1121 bitmap_line::@return
  breturn:
  //SEG1122 [603] return 
    rts
  //SEG1123 bitmap_line::@3
  b3:
  //SEG1124 [604] (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_xdyi.x
  //SEG1125 [605] (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty bitmap_line_xdyi.y
  //SEG1126 [606] (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#0
  //SEG1127 [607] (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#2
  //SEG1128 [608] (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#2
  //SEG1129 [609] call bitmap_line_xdyi 
  //SEG1130 [654] phi from bitmap_line::@3 to bitmap_line_xdyi [phi:bitmap_line::@3->bitmap_line_xdyi]
  bitmap_line_xdyi_from_b3:
  //SEG1131 [654] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#0 [phi:bitmap_line::@3->bitmap_line_xdyi#0] -- register_copy 
  //SEG1132 [654] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#0 [phi:bitmap_line::@3->bitmap_line_xdyi#1] -- register_copy 
  //SEG1133 [654] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#0 [phi:bitmap_line::@3->bitmap_line_xdyi#2] -- register_copy 
  //SEG1134 [654] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#0 [phi:bitmap_line::@3->bitmap_line_xdyi#3] -- register_copy 
  //SEG1135 [654] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#0 [phi:bitmap_line::@3->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp breturn
  //SEG1136 bitmap_line::@2
  b2:
  //SEG1137 [610] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuz1=vbuyy_minus_vbuz2 
    tya
    sec
    sbc y0
    sta yd
  //SEG1138 [611] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@6 -- vbuz1_lt_vbuz2_then_la1 
    lda yd
    cmp xd
    bcc b6
    jmp b20
  //SEG1139 bitmap_line::@20
  b20:
  //SEG1140 [612] (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxd.y
  //SEG1141 [613] (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx x0
  //SEG1142 [614] (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty bitmap_line_ydxd.y1
  //SEG1143 [615] (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#1
  //SEG1144 [616] (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#2
  //SEG1145 [617] call bitmap_line_ydxd 
  //SEG1146 [706] phi from bitmap_line::@20 to bitmap_line_ydxd [phi:bitmap_line::@20->bitmap_line_ydxd]
  bitmap_line_ydxd_from_b20:
  //SEG1147 [706] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#0 [phi:bitmap_line::@20->bitmap_line_ydxd#0] -- register_copy 
  //SEG1148 [706] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#0 [phi:bitmap_line::@20->bitmap_line_ydxd#1] -- register_copy 
  //SEG1149 [706] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#0 [phi:bitmap_line::@20->bitmap_line_ydxd#2] -- register_copy 
  //SEG1150 [706] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#0 [phi:bitmap_line::@20->bitmap_line_ydxd#3] -- register_copy 
  //SEG1151 [706] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#0 [phi:bitmap_line::@20->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp breturn
  //SEG1152 bitmap_line::@6
  b6:
  //SEG1153 [618] (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_xdyd.x
  //SEG1154 [619] (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty bitmap_line_xdyd.y
  //SEG1155 [620] (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyd.x1
  //SEG1156 [621] (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#2
  //SEG1157 [622] (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#1
  //SEG1158 [623] call bitmap_line_xdyd 
  //SEG1159 [691] phi from bitmap_line::@6 to bitmap_line_xdyd [phi:bitmap_line::@6->bitmap_line_xdyd]
  bitmap_line_xdyd_from_b6:
  //SEG1160 [691] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#0 [phi:bitmap_line::@6->bitmap_line_xdyd#0] -- register_copy 
  //SEG1161 [691] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#0 [phi:bitmap_line::@6->bitmap_line_xdyd#1] -- register_copy 
  //SEG1162 [691] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#0 [phi:bitmap_line::@6->bitmap_line_xdyd#2] -- register_copy 
  //SEG1163 [691] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#0 [phi:bitmap_line::@6->bitmap_line_xdyd#3] -- register_copy 
  //SEG1164 [691] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#0 [phi:bitmap_line::@6->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp breturn
  //SEG1165 bitmap_line::@1
  b1:
  //SEG1166 [624] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda x1
    sec
    sbc x0
    sta xd
  //SEG1167 [625] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@9 -- vbuz1_lt_vbuyy_then_la1 
    tya
    cmp y0
    beq !+
    bcs b9
  !:
    jmp b23
  //SEG1168 bitmap_line::@23
  b23:
  //SEG1169 [626] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuz1=vbuz2_minus_vbuyy 
    tya
    eor #$ff
    sec
    adc y0
    sta yd
  //SEG1170 [627] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@10 -- vbuz1_lt_vbuz2_then_la1 
    lda yd
    cmp xd
    bcc b10
    jmp b24
  //SEG1171 bitmap_line::@24
  b24:
  //SEG1172 [628] (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty bitmap_line_ydxd.y
  //SEG1173 [629] (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#0 -- vbuxx=vbuz1 
    ldx x1
  //SEG1174 [630] (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#0
  //SEG1175 [631] (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10
  //SEG1176 [632] (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#1
  //SEG1177 [633] call bitmap_line_ydxd 
  //SEG1178 [706] phi from bitmap_line::@24 to bitmap_line_ydxd [phi:bitmap_line::@24->bitmap_line_ydxd]
  bitmap_line_ydxd_from_b24:
  //SEG1179 [706] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#1 [phi:bitmap_line::@24->bitmap_line_ydxd#0] -- register_copy 
  //SEG1180 [706] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#1 [phi:bitmap_line::@24->bitmap_line_ydxd#1] -- register_copy 
  //SEG1181 [706] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#1 [phi:bitmap_line::@24->bitmap_line_ydxd#2] -- register_copy 
  //SEG1182 [706] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#1 [phi:bitmap_line::@24->bitmap_line_ydxd#3] -- register_copy 
  //SEG1183 [706] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#1 [phi:bitmap_line::@24->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp breturn
  //SEG1184 bitmap_line::@10
  b10:
  //SEG1185 [634] (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyd.x
  //SEG1186 [635] (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#0
  //SEG1187 [636] (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#0
  //SEG1188 [637] (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#1
  //SEG1189 [638] (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#10
  //SEG1190 [639] call bitmap_line_xdyd 
  //SEG1191 [691] phi from bitmap_line::@10 to bitmap_line_xdyd [phi:bitmap_line::@10->bitmap_line_xdyd]
  bitmap_line_xdyd_from_b10:
  //SEG1192 [691] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#1 [phi:bitmap_line::@10->bitmap_line_xdyd#0] -- register_copy 
  //SEG1193 [691] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#1 [phi:bitmap_line::@10->bitmap_line_xdyd#1] -- register_copy 
  //SEG1194 [691] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#1 [phi:bitmap_line::@10->bitmap_line_xdyd#2] -- register_copy 
  //SEG1195 [691] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#1 [phi:bitmap_line::@10->bitmap_line_xdyd#3] -- register_copy 
  //SEG1196 [691] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#1 [phi:bitmap_line::@10->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp breturn
  //SEG1197 bitmap_line::@9
  b9:
  //SEG1198 [640] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuz1=vbuyy_minus_vbuz2 
    tya
    sec
    sbc y0
    sta yd
  //SEG1199 [641] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13 -- vbuz1_lt_vbuz2_then_la1 
    lda yd
    cmp xd
    bcc b13
    jmp b27
  //SEG1200 bitmap_line::@27
  b27:
  //SEG1201 [642] (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxi.y
  //SEG1202 [643] (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx x0
  //SEG1203 [644] (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty bitmap_line_ydxi.y1
  //SEG1204 [645] (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#11
  //SEG1205 [646] (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#1
  //SEG1206 [647] call bitmap_line_ydxi 
  //SEG1207 [676] phi from bitmap_line::@27 to bitmap_line_ydxi [phi:bitmap_line::@27->bitmap_line_ydxi]
  bitmap_line_ydxi_from_b27:
  //SEG1208 [676] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#1 [phi:bitmap_line::@27->bitmap_line_ydxi#0] -- register_copy 
  //SEG1209 [676] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#1 [phi:bitmap_line::@27->bitmap_line_ydxi#1] -- register_copy 
  //SEG1210 [676] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#1 [phi:bitmap_line::@27->bitmap_line_ydxi#2] -- register_copy 
  //SEG1211 [676] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#1 [phi:bitmap_line::@27->bitmap_line_ydxi#3] -- register_copy 
  //SEG1212 [676] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#1 [phi:bitmap_line::@27->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp breturn
  //SEG1213 bitmap_line::@13
  b13:
  //SEG1214 [648] (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyi.x
  //SEG1215 [649] (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#0
  //SEG1216 [650] (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_xdyi.x1
  //SEG1217 [651] (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#1
  //SEG1218 [652] (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11
  //SEG1219 [653] call bitmap_line_xdyi 
  //SEG1220 [654] phi from bitmap_line::@13 to bitmap_line_xdyi [phi:bitmap_line::@13->bitmap_line_xdyi]
  bitmap_line_xdyi_from_b13:
  //SEG1221 [654] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#1 [phi:bitmap_line::@13->bitmap_line_xdyi#0] -- register_copy 
  //SEG1222 [654] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#1] -- register_copy 
  //SEG1223 [654] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#1 [phi:bitmap_line::@13->bitmap_line_xdyi#2] -- register_copy 
  //SEG1224 [654] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#1 [phi:bitmap_line::@13->bitmap_line_xdyi#3] -- register_copy 
  //SEG1225 [654] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp breturn
}
//SEG1226 bitmap_line_xdyi
// bitmap_line_xdyi(byte zeropage($a) x, byte zeropage($b) y, byte zeropage(9) x1, byte zeropage(8) xd, byte zeropage(7) yd)
bitmap_line_xdyi: {
    .label x = $a
    .label y = $b
    .label x1 = 9
    .label xd = 8
    .label yd = 7
    .label e = $c
  //SEG1227 [655] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda yd
    lsr
    sta e
  //SEG1228 [656] phi from bitmap_line_xdyi bitmap_line_xdyi::@2 to bitmap_line_xdyi::@1 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1]
  b1_from_bitmap_line_xdyi:
  b1_from_b2:
  //SEG1229 [656] phi (byte) bitmap_line_xdyi::e#3 = (byte) bitmap_line_xdyi::e#0 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#0] -- register_copy 
  //SEG1230 [656] phi (byte) bitmap_line_xdyi::y#3 = (byte) bitmap_line_xdyi::y#5 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#1] -- register_copy 
  //SEG1231 [656] phi (byte) bitmap_line_xdyi::x#3 = (byte) bitmap_line_xdyi::x#6 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#2] -- register_copy 
    jmp b1
  //SEG1232 bitmap_line_xdyi::@1
  b1:
  //SEG1233 [657] (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3 -- vbuxx=vbuz1 
    ldx x
  //SEG1234 [658] (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3 -- vbuyy=vbuz1 
    ldy y
  //SEG1235 [659] call bitmap_plot 
  //SEG1236 [669] phi from bitmap_line_xdyi::@1 to bitmap_plot [phi:bitmap_line_xdyi::@1->bitmap_plot]
  bitmap_plot_from_b1:
  //SEG1237 [669] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#0] -- register_copy 
  //SEG1238 [669] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b5
  //SEG1239 bitmap_line_xdyi::@5
  b5:
  //SEG1240 [660] (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#3 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1241 [661] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc yd
    sta e
  //SEG1242 [662] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda xd
    cmp e
    bcs b2_from_b5
    jmp b3
  //SEG1243 bitmap_line_xdyi::@3
  b3:
  //SEG1244 [663] (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#3 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1245 [664] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc xd
    sta e
  //SEG1246 [665] phi from bitmap_line_xdyi::@3 bitmap_line_xdyi::@5 to bitmap_line_xdyi::@2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@5->bitmap_line_xdyi::@2]
  b2_from_b3:
  b2_from_b5:
  //SEG1247 [665] phi (byte) bitmap_line_xdyi::e#6 = (byte) bitmap_line_xdyi::e#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@5->bitmap_line_xdyi::@2#0] -- register_copy 
  //SEG1248 [665] phi (byte) bitmap_line_xdyi::y#6 = (byte) bitmap_line_xdyi::y#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@5->bitmap_line_xdyi::@2#1] -- register_copy 
    jmp b2
  //SEG1249 bitmap_line_xdyi::@2
  b2:
  //SEG1250 [666] (byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=vbuz1_plus_1 
    ldx x1
    inx
  //SEG1251 [667] if((byte) bitmap_line_xdyi::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx x
    bne b1_from_b2
    jmp breturn
  //SEG1252 bitmap_line_xdyi::@return
  breturn:
  //SEG1253 [668] return 
    rts
}
//SEG1254 bitmap_plot
// bitmap_plot(byte register(X) x, byte register(Y) y)
bitmap_plot: {
    .label _0 = 2
    .label plotter_x = 2
    .label plotter_y = 5
  //SEG1255 [670] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_plot::x#4) -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_xhi,x
    sta plotter_x+1
    lda bitmap_plot_xlo,x
    sta plotter_x
  //SEG1256 [671] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuyy_word_pbuc2_derefidx_vbuyy 
    lda bitmap_plot_yhi,y
    sta plotter_y+1
    lda bitmap_plot_ylo,y
    sta plotter_y
  //SEG1257 [672] (word~) bitmap_plot::$0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda _0
    clc
    adc plotter_y
    sta _0
    lda _0+1
    adc plotter_y+1
    sta _0+1
  //SEG1258 [673] (byte~) bitmap_plot::$1 ← *((byte*)(word~) bitmap_plot::$0) | *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_plot::x#4) -- vbuaa=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (_0),y
  //SEG1259 [674] *((byte*)(word~) bitmap_plot::$0) ← (byte~) bitmap_plot::$1 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (_0),y
    jmp breturn
  //SEG1260 bitmap_plot::@return
  breturn:
  //SEG1261 [675] return 
    rts
}
//SEG1262 bitmap_line_ydxi
// bitmap_line_ydxi(byte zeropage($a) y, byte register(X) x, byte zeropage($b) y1, byte zeropage(7) yd, byte zeropage(8) xd)
bitmap_line_ydxi: {
    .label y = $a
    .label y1 = $b
    .label yd = 7
    .label xd = 8
    .label e = 9
  //SEG1263 [677] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda xd
    lsr
    sta e
  //SEG1264 [678] phi from bitmap_line_ydxi bitmap_line_ydxi::@2 to bitmap_line_ydxi::@1 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1]
  b1_from_bitmap_line_ydxi:
  b1_from_b2:
  //SEG1265 [678] phi (byte) bitmap_line_ydxi::e#3 = (byte) bitmap_line_ydxi::e#0 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#0] -- register_copy 
  //SEG1266 [678] phi (byte) bitmap_line_ydxi::y#3 = (byte) bitmap_line_ydxi::y#6 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#1] -- register_copy 
  //SEG1267 [678] phi (byte) bitmap_line_ydxi::x#3 = (byte) bitmap_line_ydxi::x#5 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#2] -- register_copy 
    jmp b1
  //SEG1268 bitmap_line_ydxi::@1
  b1:
  //SEG1269 [679] (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3
  //SEG1270 [680] (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3 -- vbuyy=vbuz1 
    ldy y
  //SEG1271 [681] call bitmap_plot 
  //SEG1272 [669] phi from bitmap_line_ydxi::@1 to bitmap_plot [phi:bitmap_line_ydxi::@1->bitmap_plot]
  bitmap_plot_from_b1:
  //SEG1273 [669] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#0] -- register_copy 
  //SEG1274 [669] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b5
  //SEG1275 bitmap_line_ydxi::@5
  b5:
  //SEG1276 [682] (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#3 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1277 [683] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc xd
    sta e
  //SEG1278 [684] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda yd
    cmp e
    bcs b2_from_b5
    jmp b3
  //SEG1279 bitmap_line_ydxi::@3
  b3:
  //SEG1280 [685] (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#3 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1281 [686] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc yd
    sta e
  //SEG1282 [687] phi from bitmap_line_ydxi::@3 bitmap_line_ydxi::@5 to bitmap_line_ydxi::@2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@5->bitmap_line_ydxi::@2]
  b2_from_b3:
  b2_from_b5:
  //SEG1283 [687] phi (byte) bitmap_line_ydxi::e#6 = (byte) bitmap_line_ydxi::e#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@5->bitmap_line_ydxi::@2#0] -- register_copy 
  //SEG1284 [687] phi (byte) bitmap_line_ydxi::x#6 = (byte) bitmap_line_ydxi::x#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@5->bitmap_line_ydxi::@2#1] -- register_copy 
    jmp b2
  //SEG1285 bitmap_line_ydxi::@2
  b2:
  //SEG1286 [688] (byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_plus_1 
    lda y1
    clc
    adc #1
  //SEG1287 [689] if((byte) bitmap_line_ydxi::y#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp y
    bne b1_from_b2
    jmp breturn
  //SEG1288 bitmap_line_ydxi::@return
  breturn:
  //SEG1289 [690] return 
    rts
}
//SEG1290 bitmap_line_xdyd
// bitmap_line_xdyd(byte zeropage($a) x, byte zeropage($b) y, byte zeropage($c) x1, byte zeropage(8) xd, byte zeropage(7) yd)
bitmap_line_xdyd: {
    .label x = $a
    .label y = $b
    .label x1 = $c
    .label xd = 8
    .label yd = 7
    .label e = 9
  //SEG1291 [692] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda yd
    lsr
    sta e
  //SEG1292 [693] phi from bitmap_line_xdyd bitmap_line_xdyd::@2 to bitmap_line_xdyd::@1 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1]
  b1_from_bitmap_line_xdyd:
  b1_from_b2:
  //SEG1293 [693] phi (byte) bitmap_line_xdyd::e#3 = (byte) bitmap_line_xdyd::e#0 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#0] -- register_copy 
  //SEG1294 [693] phi (byte) bitmap_line_xdyd::y#3 = (byte) bitmap_line_xdyd::y#5 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#1] -- register_copy 
  //SEG1295 [693] phi (byte) bitmap_line_xdyd::x#3 = (byte) bitmap_line_xdyd::x#6 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#2] -- register_copy 
    jmp b1
  //SEG1296 bitmap_line_xdyd::@1
  b1:
  //SEG1297 [694] (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3 -- vbuxx=vbuz1 
    ldx x
  //SEG1298 [695] (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3 -- vbuyy=vbuz1 
    ldy y
  //SEG1299 [696] call bitmap_plot 
  //SEG1300 [669] phi from bitmap_line_xdyd::@1 to bitmap_plot [phi:bitmap_line_xdyd::@1->bitmap_plot]
  bitmap_plot_from_b1:
  //SEG1301 [669] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#0] -- register_copy 
  //SEG1302 [669] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b5
  //SEG1303 bitmap_line_xdyd::@5
  b5:
  //SEG1304 [697] (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#3 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1305 [698] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc yd
    sta e
  //SEG1306 [699] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda xd
    cmp e
    bcs b2_from_b5
    jmp b3
  //SEG1307 bitmap_line_xdyd::@3
  b3:
  //SEG1308 [700] (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#3 -- vbuz1=_dec_vbuz1 
    dec y
  //SEG1309 [701] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc xd
    sta e
  //SEG1310 [702] phi from bitmap_line_xdyd::@3 bitmap_line_xdyd::@5 to bitmap_line_xdyd::@2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@5->bitmap_line_xdyd::@2]
  b2_from_b3:
  b2_from_b5:
  //SEG1311 [702] phi (byte) bitmap_line_xdyd::e#6 = (byte) bitmap_line_xdyd::e#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@5->bitmap_line_xdyd::@2#0] -- register_copy 
  //SEG1312 [702] phi (byte) bitmap_line_xdyd::y#6 = (byte) bitmap_line_xdyd::y#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@5->bitmap_line_xdyd::@2#1] -- register_copy 
    jmp b2
  //SEG1313 bitmap_line_xdyd::@2
  b2:
  //SEG1314 [703] (byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=vbuz1_plus_1 
    ldx x1
    inx
  //SEG1315 [704] if((byte) bitmap_line_xdyd::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx x
    bne b1_from_b2
    jmp breturn
  //SEG1316 bitmap_line_xdyd::@return
  breturn:
  //SEG1317 [705] return 
    rts
}
//SEG1318 bitmap_line_ydxd
// bitmap_line_ydxd(byte zeropage($a) y, byte register(X) x, byte zeropage($b) y1, byte zeropage(7) yd, byte zeropage(8) xd)
bitmap_line_ydxd: {
    .label y = $a
    .label y1 = $b
    .label yd = 7
    .label xd = 8
    .label e = 9
  //SEG1319 [707] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda xd
    lsr
    sta e
  //SEG1320 [708] phi from bitmap_line_ydxd bitmap_line_ydxd::@2 to bitmap_line_ydxd::@1 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1]
  b1_from_bitmap_line_ydxd:
  b1_from_b2:
  //SEG1321 [708] phi (byte) bitmap_line_ydxd::e#3 = (byte) bitmap_line_ydxd::e#0 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#0] -- register_copy 
  //SEG1322 [708] phi (byte) bitmap_line_ydxd::y#2 = (byte) bitmap_line_ydxd::y#7 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#1] -- register_copy 
  //SEG1323 [708] phi (byte) bitmap_line_ydxd::x#3 = (byte) bitmap_line_ydxd::x#5 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#2] -- register_copy 
    jmp b1
  //SEG1324 bitmap_line_ydxd::@1
  b1:
  //SEG1325 [709] (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3
  //SEG1326 [710] (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#2 -- vbuyy=vbuz1 
    ldy y
  //SEG1327 [711] call bitmap_plot 
  //SEG1328 [669] phi from bitmap_line_ydxd::@1 to bitmap_plot [phi:bitmap_line_ydxd::@1->bitmap_plot]
  bitmap_plot_from_b1:
  //SEG1329 [669] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#0] -- register_copy 
  //SEG1330 [669] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b5
  //SEG1331 bitmap_line_ydxd::@5
  b5:
  //SEG1332 [712] (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1333 [713] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc xd
    sta e
  //SEG1334 [714] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda yd
    cmp e
    bcs b2_from_b5
    jmp b3
  //SEG1335 bitmap_line_ydxd::@3
  b3:
  //SEG1336 [715] (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#3 -- vbuxx=_dec_vbuxx 
    dex
  //SEG1337 [716] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc yd
    sta e
  //SEG1338 [717] phi from bitmap_line_ydxd::@3 bitmap_line_ydxd::@5 to bitmap_line_ydxd::@2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@5->bitmap_line_ydxd::@2]
  b2_from_b3:
  b2_from_b5:
  //SEG1339 [717] phi (byte) bitmap_line_ydxd::e#6 = (byte) bitmap_line_ydxd::e#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@5->bitmap_line_ydxd::@2#0] -- register_copy 
  //SEG1340 [717] phi (byte) bitmap_line_ydxd::x#6 = (byte) bitmap_line_ydxd::x#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@5->bitmap_line_ydxd::@2#1] -- register_copy 
    jmp b2
  //SEG1341 bitmap_line_ydxd::@2
  b2:
  //SEG1342 [718] (byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_plus_1 
    lda y1
    clc
    adc #1
  //SEG1343 [719] if((byte) bitmap_line_ydxd::y#3!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp y
    bne b1_from_b2
    jmp breturn
  //SEG1344 bitmap_line_ydxd::@return
  breturn:
  //SEG1345 [720] return 
    rts
}
//SEG1346 bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = 2
    .label y = 4
    .label _3 = 2
  //SEG1347 [721] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_xhi#0) w= *((const byte[$100]) bitmap_plot_xlo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_xlo
    sta _3
    lda bitmap_plot_xhi
    sta _3+1
  //SEG1348 [722] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3
  //SEG1349 [723] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  b1_from_bitmap_clear:
  //SEG1350 [723] phi (byte) bitmap_clear::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG1351 [723] phi (byte*) bitmap_clear::bitmap#3 = (byte*~) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    jmp b1
  //SEG1352 [723] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  b1_from_b3:
  //SEG1353 [723] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
  //SEG1354 [723] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    jmp b1
  //SEG1355 bitmap_clear::@1
  b1:
  //SEG1356 [724] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  b2_from_b1:
  //SEG1357 [724] phi (byte) bitmap_clear::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG1358 [724] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    jmp b2
  //SEG1359 [724] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  b2_from_b2:
  //SEG1360 [724] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
  //SEG1361 [724] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    jmp b2
  //SEG1362 bitmap_clear::@2
  b2:
  //SEG1363 [725] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (bitmap),y
  //SEG1364 [726] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc bitmap
    bne !+
    inc bitmap+1
  !:
  //SEG1365 [727] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1366 [728] if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) $c8) goto bitmap_clear::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c8
    bne b2_from_b2
    jmp b3
  //SEG1367 bitmap_clear::@3
  b3:
  //SEG1368 [729] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1369 [730] if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$28
    bne b1_from_b3
    jmp breturn
  //SEG1370 bitmap_clear::@return
  breturn:
  //SEG1371 [731] return 
    rts
}
//SEG1372 bitmap_init
// Initialize the bitmap plotter tables for a specific bitmap
bitmap_init: {
    .label _6 = 4
    .label yoffs = 2
  //SEG1373 [733] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  b1_from_bitmap_init:
  //SEG1374 [733] phi (byte) bitmap_init::bits#3 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init->bitmap_init::@1#0] -- vbuyy=vbuc1 
    ldy #$80
  //SEG1375 [733] phi (byte) bitmap_init::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init->bitmap_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG1376 [733] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  b1_from_b2:
  //SEG1377 [733] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
  //SEG1378 [733] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp b1
  //SEG1379 bitmap_init::@1
  b1:
  //SEG1380 [734] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte/word/signed word/dword/signed dword) $f8 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f8
  //SEG1381 [735] *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_xlo,x
  //SEG1382 [736] *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_init::x#2) ← >(const byte*) mode_stdbitmap::BITMAP#0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #>mode_stdbitmap.BITMAP
    sta bitmap_plot_xhi,x
  //SEG1383 [737] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta bitmap_plot_bit,x
  //SEG1384 [738] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuyy=vbuyy_ror_1 
    tya
    lsr
    tay
  //SEG1385 [739] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@10 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne b10_from_b1
  //SEG1386 [740] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  b2_from_b1:
  //SEG1387 [740] phi (byte) bitmap_init::bits#4 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuyy=vbuc1 
    ldy #$80
    jmp b2
  //SEG1388 bitmap_init::@2
  b2:
  //SEG1389 [741] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1390 [742] if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1_from_b2
  //SEG1391 [743] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  b3_from_b2:
  //SEG1392 [743] phi (byte*) bitmap_init::yoffs#2 = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta yoffs
    lda #>0
    sta yoffs+1
  //SEG1393 [743] phi (byte) bitmap_init::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG1394 [743] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  b3_from_b4:
  //SEG1395 [743] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
  //SEG1396 [743] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp b3
  //SEG1397 bitmap_init::@3
  b3:
  //SEG1398 [744] (byte~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuxx_band_vbuc1 
    txa
    and #7
    sta _6
  //SEG1399 [745] (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda yoffs
  //SEG1400 [746] (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$6 | (byte~) bitmap_init::$7 -- vbuaa=vbuz1_bor_vbuaa 
    ora _6
  //SEG1401 [747] *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
  //SEG1402 [748] (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda yoffs+1
  //SEG1403 [749] *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
  //SEG1404 [750] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
  //SEG1405 [751] if((byte~) bitmap_init::$10!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #7
    bne b4_from_b3
    jmp b7
  //SEG1406 bitmap_init::@7
  b7:
  //SEG1407 [752] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda yoffs
    adc #<$28*8
    sta yoffs
    lda yoffs+1
    adc #>$28*8
    sta yoffs+1
  //SEG1408 [753] phi from bitmap_init::@3 bitmap_init::@7 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG1409 [753] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4#0] -- register_copy 
    jmp b4
  //SEG1410 bitmap_init::@4
  b4:
  //SEG1411 [754] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1412 [755] if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b3_from_b4
    jmp breturn
  //SEG1413 bitmap_init::@return
  breturn:
  //SEG1414 [756] return 
    rts
  //SEG1415 [757] phi from bitmap_init::@1 to bitmap_init::@10 [phi:bitmap_init::@1->bitmap_init::@10]
  b10_from_b1:
    jmp b10
  //SEG1416 bitmap_init::@10
  b10:
  //SEG1417 [740] phi from bitmap_init::@10 to bitmap_init::@2 [phi:bitmap_init::@10->bitmap_init::@2]
  b2_from_b10:
  //SEG1418 [740] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@10->bitmap_init::@2#0] -- register_copy 
    jmp b2
}
//SEG1419 mode_mcchar
// Multicolor Character Mode (LINEAR/HICOL/CHUNK/COLDIS/BMM/ECM = 0, MCM = 1)
// Resolution: 160x200 (320x200)
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
// GfxData Pixel Shifter (1) if ColorData[3:3] = 0:
//  - 0: 4bpp BgColor0[3:0]
//  - 1: 4bpp ColorData[2:0]
// GfxData Pixel Shifter (2) if ColorData[3:3] = 1:
//  - 00: 4bpp BgColor0[3:0]
//  - 01: 4bpp BgColor1[3:0]
//  - 10: 4bpp BgColor2[3:0]
//  - 11: 4bpp ColorData[2:0]// Standard Character Mode (LINEAR/HICOL/CHUNK/COLDIS/ECM/MCM/BMM = 0)
mode_mcchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $d800
    .label _28 = 7
    .label col = 2
    .label ch = 5
    .label cy = 4
  //SEG1420 [758] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_mcchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG1421 [759] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
  //SEG1422 [760] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG1423 [761] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_CONTROL
  //SEG1424 [762] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG1425 [763] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_mcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG1426 [764] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG1427 [765] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL|VIC_MCM
    sta VIC_CONTROL2
  //SEG1428 [766] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_mcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_mcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG1429 [767] phi from mode_mcchar to mode_mcchar::@1 [phi:mode_mcchar->mode_mcchar::@1]
  b1_from_mode_mcchar:
  //SEG1430 [767] phi (byte) mode_mcchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_mcchar->mode_mcchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  // DTV Palette - default
  //SEG1431 [767] phi from mode_mcchar::@1 to mode_mcchar::@1 [phi:mode_mcchar::@1->mode_mcchar::@1]
  b1_from_b1:
  //SEG1432 [767] phi (byte) mode_mcchar::i#2 = (byte) mode_mcchar::i#1 [phi:mode_mcchar::@1->mode_mcchar::@1#0] -- register_copy 
    jmp b1
  //SEG1433 mode_mcchar::@1
  b1:
  //SEG1434 [768] *((const byte*) DTV_PALETTE#0 + (byte) mode_mcchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_mcchar::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
  //SEG1435 [769] (byte) mode_mcchar::i#1 ← ++ (byte) mode_mcchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1436 [770] if((byte) mode_mcchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_mcchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b1
    jmp b4
  //SEG1437 mode_mcchar::@4
  b4:
  //SEG1438 [771] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG1439 [772] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BGCOL1
  //SEG1440 [773] *((const byte*) BGCOL2#0) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BGCOL2
  //SEG1441 [774] *((const byte*) BGCOL3#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL3
  //SEG1442 [775] phi from mode_mcchar::@4 to mode_mcchar::@2 [phi:mode_mcchar::@4->mode_mcchar::@2]
  b2_from_b4:
  //SEG1443 [775] phi (byte*) mode_mcchar::ch#3 = (const byte*) mode_mcchar::SCREEN#0 [phi:mode_mcchar::@4->mode_mcchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG1444 [775] phi (byte*) mode_mcchar::col#3 = (const byte*) mode_mcchar::COLORS#0 [phi:mode_mcchar::@4->mode_mcchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG1445 [775] phi (byte) mode_mcchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_mcchar::@4->mode_mcchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG1446 [775] phi from mode_mcchar::@5 to mode_mcchar::@2 [phi:mode_mcchar::@5->mode_mcchar::@2]
  b2_from_b5:
  //SEG1447 [775] phi (byte*) mode_mcchar::ch#3 = (byte*) mode_mcchar::ch#1 [phi:mode_mcchar::@5->mode_mcchar::@2#0] -- register_copy 
  //SEG1448 [775] phi (byte*) mode_mcchar::col#3 = (byte*) mode_mcchar::col#1 [phi:mode_mcchar::@5->mode_mcchar::@2#1] -- register_copy 
  //SEG1449 [775] phi (byte) mode_mcchar::cy#4 = (byte) mode_mcchar::cy#1 [phi:mode_mcchar::@5->mode_mcchar::@2#2] -- register_copy 
    jmp b2
  //SEG1450 mode_mcchar::@2
  b2:
  //SEG1451 [776] phi from mode_mcchar::@2 to mode_mcchar::@3 [phi:mode_mcchar::@2->mode_mcchar::@3]
  b3_from_b2:
  //SEG1452 [776] phi (byte*) mode_mcchar::ch#2 = (byte*) mode_mcchar::ch#3 [phi:mode_mcchar::@2->mode_mcchar::@3#0] -- register_copy 
  //SEG1453 [776] phi (byte*) mode_mcchar::col#2 = (byte*) mode_mcchar::col#3 [phi:mode_mcchar::@2->mode_mcchar::@3#1] -- register_copy 
  //SEG1454 [776] phi (byte) mode_mcchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_mcchar::@2->mode_mcchar::@3#2] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG1455 [776] phi from mode_mcchar::@3 to mode_mcchar::@3 [phi:mode_mcchar::@3->mode_mcchar::@3]
  b3_from_b3:
  //SEG1456 [776] phi (byte*) mode_mcchar::ch#2 = (byte*) mode_mcchar::ch#1 [phi:mode_mcchar::@3->mode_mcchar::@3#0] -- register_copy 
  //SEG1457 [776] phi (byte*) mode_mcchar::col#2 = (byte*) mode_mcchar::col#1 [phi:mode_mcchar::@3->mode_mcchar::@3#1] -- register_copy 
  //SEG1458 [776] phi (byte) mode_mcchar::cx#2 = (byte) mode_mcchar::cx#1 [phi:mode_mcchar::@3->mode_mcchar::@3#2] -- register_copy 
    jmp b3
  //SEG1459 mode_mcchar::@3
  b3:
  //SEG1460 [777] (byte~) mode_mcchar::$25 ← (byte) mode_mcchar::cx#2 + (byte) mode_mcchar::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc cy
  //SEG1461 [778] (byte~) mode_mcchar::$26 ← (byte~) mode_mcchar::$25 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
  //SEG1462 [779] *((byte*) mode_mcchar::col#2) ← (byte~) mode_mcchar::$26 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG1463 [780] (byte*) mode_mcchar::col#1 ← ++ (byte*) mode_mcchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG1464 [781] (byte~) mode_mcchar::$27 ← (byte) mode_mcchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG1465 [782] (byte~) mode_mcchar::$28 ← (byte~) mode_mcchar::$27 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _28
  //SEG1466 [783] (byte~) mode_mcchar::$29 ← (byte) mode_mcchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG1467 [784] (byte~) mode_mcchar::$30 ← (byte~) mode_mcchar::$28 | (byte~) mode_mcchar::$29 -- vbuaa=vbuz1_bor_vbuaa 
    ora _28
  //SEG1468 [785] *((byte*) mode_mcchar::ch#2) ← (byte~) mode_mcchar::$30 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1469 [786] (byte*) mode_mcchar::ch#1 ← ++ (byte*) mode_mcchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1470 [787] (byte) mode_mcchar::cx#1 ← ++ (byte) mode_mcchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1471 [788] if((byte) mode_mcchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_mcchar::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3_from_b3
    jmp b5
  //SEG1472 mode_mcchar::@5
  b5:
  //SEG1473 [789] (byte) mode_mcchar::cy#1 ← ++ (byte) mode_mcchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1474 [790] if((byte) mode_mcchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_mcchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b5
  //SEG1475 [791] phi from mode_mcchar::@5 to mode_mcchar::@6 [phi:mode_mcchar::@5->mode_mcchar::@6]
  b6_from_b5:
    jmp b6
  //SEG1476 mode_mcchar::@6
  b6:
  //SEG1477 [792] call mode_ctrl 
  //SEG1478 [155] phi from mode_mcchar::@6 to mode_ctrl [phi:mode_mcchar::@6->mode_ctrl]
  mode_ctrl_from_b6:
  //SEG1479 [155] phi (byte) dtv_control#145 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_mcchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #0
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG1480 mode_mcchar::@return
  breturn:
  //SEG1481 [793] return 
    rts
}
//SEG1482 mode_ecmchar
// Extended Background Color Character Mode (LINEAR/HICOL/CHUNK/COLDIS/MCM/BMM = 0, ECM = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & "00" & CharData[5:0] & RowCounter[2:0] ) 
// GfxData Pixel Shifter (1)
//  - 0: 4bpp Background Color
//    - CharData[7:6] 00: 4bpp BgColor0[3:0]
//    - CharData[7:6] 01: 4bpp BgColor1[3:0]
//    - CharData[7:6] 10: 4bpp BgColor2[3:0]
//    - CharData[7:6] 11: 4bpp BgColor3[3:0]
//  - 1: 4bpp ColorData[3:0]
mode_ecmchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $d800
    .label _28 = 7
    .label col = 2
    .label ch = 5
    .label cy = 4
  //SEG1483 [794] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_ecmchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG1484 [795] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
  //SEG1485 [796] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG1486 [797] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_CONTROL
  //SEG1487 [798] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG1488 [799] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_ecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG1489 [800] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(const byte) VIC_ECM#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|VIC_ECM|3
    sta VIC_CONTROL
  //SEG1490 [801] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG1491 [802] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_ecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_ecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG1492 [803] phi from mode_ecmchar to mode_ecmchar::@1 [phi:mode_ecmchar->mode_ecmchar::@1]
  b1_from_mode_ecmchar:
  //SEG1493 [803] phi (byte) mode_ecmchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_ecmchar->mode_ecmchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  // DTV Palette - default
  //SEG1494 [803] phi from mode_ecmchar::@1 to mode_ecmchar::@1 [phi:mode_ecmchar::@1->mode_ecmchar::@1]
  b1_from_b1:
  //SEG1495 [803] phi (byte) mode_ecmchar::i#2 = (byte) mode_ecmchar::i#1 [phi:mode_ecmchar::@1->mode_ecmchar::@1#0] -- register_copy 
    jmp b1
  //SEG1496 mode_ecmchar::@1
  b1:
  //SEG1497 [804] *((const byte*) DTV_PALETTE#0 + (byte) mode_ecmchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_ecmchar::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
  //SEG1498 [805] (byte) mode_ecmchar::i#1 ← ++ (byte) mode_ecmchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1499 [806] if((byte) mode_ecmchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_ecmchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b1
    jmp b4
  //SEG1500 mode_ecmchar::@4
  b4:
  //SEG1501 [807] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG1502 [808] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BGCOL1
  //SEG1503 [809] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL2
  //SEG1504 [810] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BGCOL3
  //SEG1505 [811] *((const byte*) BGCOL4#0) ← (byte/signed byte/word/signed word/dword/signed dword) 6 -- _deref_pbuc1=vbuc2 
    lda #6
    sta BGCOL4
  //SEG1506 [812] phi from mode_ecmchar::@4 to mode_ecmchar::@2 [phi:mode_ecmchar::@4->mode_ecmchar::@2]
  b2_from_b4:
  //SEG1507 [812] phi (byte*) mode_ecmchar::ch#3 = (const byte*) mode_ecmchar::SCREEN#0 [phi:mode_ecmchar::@4->mode_ecmchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG1508 [812] phi (byte*) mode_ecmchar::col#3 = (const byte*) mode_ecmchar::COLORS#0 [phi:mode_ecmchar::@4->mode_ecmchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG1509 [812] phi (byte) mode_ecmchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_ecmchar::@4->mode_ecmchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG1510 [812] phi from mode_ecmchar::@5 to mode_ecmchar::@2 [phi:mode_ecmchar::@5->mode_ecmchar::@2]
  b2_from_b5:
  //SEG1511 [812] phi (byte*) mode_ecmchar::ch#3 = (byte*) mode_ecmchar::ch#1 [phi:mode_ecmchar::@5->mode_ecmchar::@2#0] -- register_copy 
  //SEG1512 [812] phi (byte*) mode_ecmchar::col#3 = (byte*) mode_ecmchar::col#1 [phi:mode_ecmchar::@5->mode_ecmchar::@2#1] -- register_copy 
  //SEG1513 [812] phi (byte) mode_ecmchar::cy#4 = (byte) mode_ecmchar::cy#1 [phi:mode_ecmchar::@5->mode_ecmchar::@2#2] -- register_copy 
    jmp b2
  //SEG1514 mode_ecmchar::@2
  b2:
  //SEG1515 [813] phi from mode_ecmchar::@2 to mode_ecmchar::@3 [phi:mode_ecmchar::@2->mode_ecmchar::@3]
  b3_from_b2:
  //SEG1516 [813] phi (byte*) mode_ecmchar::ch#2 = (byte*) mode_ecmchar::ch#3 [phi:mode_ecmchar::@2->mode_ecmchar::@3#0] -- register_copy 
  //SEG1517 [813] phi (byte*) mode_ecmchar::col#2 = (byte*) mode_ecmchar::col#3 [phi:mode_ecmchar::@2->mode_ecmchar::@3#1] -- register_copy 
  //SEG1518 [813] phi (byte) mode_ecmchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_ecmchar::@2->mode_ecmchar::@3#2] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG1519 [813] phi from mode_ecmchar::@3 to mode_ecmchar::@3 [phi:mode_ecmchar::@3->mode_ecmchar::@3]
  b3_from_b3:
  //SEG1520 [813] phi (byte*) mode_ecmchar::ch#2 = (byte*) mode_ecmchar::ch#1 [phi:mode_ecmchar::@3->mode_ecmchar::@3#0] -- register_copy 
  //SEG1521 [813] phi (byte*) mode_ecmchar::col#2 = (byte*) mode_ecmchar::col#1 [phi:mode_ecmchar::@3->mode_ecmchar::@3#1] -- register_copy 
  //SEG1522 [813] phi (byte) mode_ecmchar::cx#2 = (byte) mode_ecmchar::cx#1 [phi:mode_ecmchar::@3->mode_ecmchar::@3#2] -- register_copy 
    jmp b3
  //SEG1523 mode_ecmchar::@3
  b3:
  //SEG1524 [814] (byte~) mode_ecmchar::$25 ← (byte) mode_ecmchar::cx#2 + (byte) mode_ecmchar::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc cy
  //SEG1525 [815] (byte~) mode_ecmchar::$26 ← (byte~) mode_ecmchar::$25 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
  //SEG1526 [816] *((byte*) mode_ecmchar::col#2) ← (byte~) mode_ecmchar::$26 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG1527 [817] (byte*) mode_ecmchar::col#1 ← ++ (byte*) mode_ecmchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG1528 [818] (byte~) mode_ecmchar::$27 ← (byte) mode_ecmchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG1529 [819] (byte~) mode_ecmchar::$28 ← (byte~) mode_ecmchar::$27 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _28
  //SEG1530 [820] (byte~) mode_ecmchar::$29 ← (byte) mode_ecmchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG1531 [821] (byte~) mode_ecmchar::$30 ← (byte~) mode_ecmchar::$28 | (byte~) mode_ecmchar::$29 -- vbuaa=vbuz1_bor_vbuaa 
    ora _28
  //SEG1532 [822] *((byte*) mode_ecmchar::ch#2) ← (byte~) mode_ecmchar::$30 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1533 [823] (byte*) mode_ecmchar::ch#1 ← ++ (byte*) mode_ecmchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1534 [824] (byte) mode_ecmchar::cx#1 ← ++ (byte) mode_ecmchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1535 [825] if((byte) mode_ecmchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_ecmchar::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3_from_b3
    jmp b5
  //SEG1536 mode_ecmchar::@5
  b5:
  //SEG1537 [826] (byte) mode_ecmchar::cy#1 ← ++ (byte) mode_ecmchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1538 [827] if((byte) mode_ecmchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_ecmchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b5
  //SEG1539 [828] phi from mode_ecmchar::@5 to mode_ecmchar::@6 [phi:mode_ecmchar::@5->mode_ecmchar::@6]
  b6_from_b5:
    jmp b6
  //SEG1540 mode_ecmchar::@6
  b6:
  //SEG1541 [829] call mode_ctrl 
  //SEG1542 [155] phi from mode_ecmchar::@6 to mode_ctrl [phi:mode_ecmchar::@6->mode_ctrl]
  mode_ctrl_from_b6:
  //SEG1543 [155] phi (byte) dtv_control#145 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_ecmchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #0
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG1544 mode_ecmchar::@return
  breturn:
  //SEG1545 [830] return 
    rts
}
//SEG1546 mode_stdchar
// Standard Character Mode (LINEAR/HICOL/CHUNK/COLDIS/ECM/MCM/BMM = 0)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
// Pixel Shifter (1)
// - 0: 4bpp BgColor0[3:0]
// - 1: 4bpp ColorData[3:0]
mode_stdchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $d800
    .label _27 = 7
    .label col = 2
    .label ch = 5
    .label cy = 4
  //SEG1547 [831] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_stdchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG1548 [832] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
  //SEG1549 [833] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG1550 [834] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_CONTROL
  //SEG1551 [835] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG1552 [836] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_stdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG1553 [837] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG1554 [838] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG1555 [839] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_stdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_stdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG1556 [840] phi from mode_stdchar to mode_stdchar::@1 [phi:mode_stdchar->mode_stdchar::@1]
  b1_from_mode_stdchar:
  //SEG1557 [840] phi (byte) mode_stdchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdchar->mode_stdchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  // DTV Palette - default
  //SEG1558 [840] phi from mode_stdchar::@1 to mode_stdchar::@1 [phi:mode_stdchar::@1->mode_stdchar::@1]
  b1_from_b1:
  //SEG1559 [840] phi (byte) mode_stdchar::i#2 = (byte) mode_stdchar::i#1 [phi:mode_stdchar::@1->mode_stdchar::@1#0] -- register_copy 
    jmp b1
  //SEG1560 mode_stdchar::@1
  b1:
  //SEG1561 [841] *((const byte*) DTV_PALETTE#0 + (byte) mode_stdchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_stdchar::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
  //SEG1562 [842] (byte) mode_stdchar::i#1 ← ++ (byte) mode_stdchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1563 [843] if((byte) mode_stdchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_stdchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b1
    jmp b4
  //SEG1564 mode_stdchar::@4
  b4:
  //SEG1565 [844] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BGCOL
  //SEG1566 [845] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
  //SEG1567 [846] phi from mode_stdchar::@4 to mode_stdchar::@2 [phi:mode_stdchar::@4->mode_stdchar::@2]
  b2_from_b4:
  //SEG1568 [846] phi (byte*) mode_stdchar::ch#3 = (const byte*) mode_stdchar::SCREEN#0 [phi:mode_stdchar::@4->mode_stdchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG1569 [846] phi (byte*) mode_stdchar::col#3 = (const byte*) mode_stdchar::COLORS#0 [phi:mode_stdchar::@4->mode_stdchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG1570 [846] phi (byte) mode_stdchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdchar::@4->mode_stdchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b2
  //SEG1571 [846] phi from mode_stdchar::@5 to mode_stdchar::@2 [phi:mode_stdchar::@5->mode_stdchar::@2]
  b2_from_b5:
  //SEG1572 [846] phi (byte*) mode_stdchar::ch#3 = (byte*) mode_stdchar::ch#1 [phi:mode_stdchar::@5->mode_stdchar::@2#0] -- register_copy 
  //SEG1573 [846] phi (byte*) mode_stdchar::col#3 = (byte*) mode_stdchar::col#1 [phi:mode_stdchar::@5->mode_stdchar::@2#1] -- register_copy 
  //SEG1574 [846] phi (byte) mode_stdchar::cy#4 = (byte) mode_stdchar::cy#1 [phi:mode_stdchar::@5->mode_stdchar::@2#2] -- register_copy 
    jmp b2
  //SEG1575 mode_stdchar::@2
  b2:
  //SEG1576 [847] phi from mode_stdchar::@2 to mode_stdchar::@3 [phi:mode_stdchar::@2->mode_stdchar::@3]
  b3_from_b2:
  //SEG1577 [847] phi (byte*) mode_stdchar::ch#2 = (byte*) mode_stdchar::ch#3 [phi:mode_stdchar::@2->mode_stdchar::@3#0] -- register_copy 
  //SEG1578 [847] phi (byte*) mode_stdchar::col#2 = (byte*) mode_stdchar::col#3 [phi:mode_stdchar::@2->mode_stdchar::@3#1] -- register_copy 
  //SEG1579 [847] phi (byte) mode_stdchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdchar::@2->mode_stdchar::@3#2] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG1580 [847] phi from mode_stdchar::@3 to mode_stdchar::@3 [phi:mode_stdchar::@3->mode_stdchar::@3]
  b3_from_b3:
  //SEG1581 [847] phi (byte*) mode_stdchar::ch#2 = (byte*) mode_stdchar::ch#1 [phi:mode_stdchar::@3->mode_stdchar::@3#0] -- register_copy 
  //SEG1582 [847] phi (byte*) mode_stdchar::col#2 = (byte*) mode_stdchar::col#1 [phi:mode_stdchar::@3->mode_stdchar::@3#1] -- register_copy 
  //SEG1583 [847] phi (byte) mode_stdchar::cx#2 = (byte) mode_stdchar::cx#1 [phi:mode_stdchar::@3->mode_stdchar::@3#2] -- register_copy 
    jmp b3
  //SEG1584 mode_stdchar::@3
  b3:
  //SEG1585 [848] (byte~) mode_stdchar::$24 ← (byte) mode_stdchar::cx#2 + (byte) mode_stdchar::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc cy
  //SEG1586 [849] (byte~) mode_stdchar::$25 ← (byte~) mode_stdchar::$24 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
  //SEG1587 [850] *((byte*) mode_stdchar::col#2) ← (byte~) mode_stdchar::$25 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG1588 [851] (byte*) mode_stdchar::col#1 ← ++ (byte*) mode_stdchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG1589 [852] (byte~) mode_stdchar::$26 ← (byte) mode_stdchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG1590 [853] (byte~) mode_stdchar::$27 ← (byte~) mode_stdchar::$26 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _27
  //SEG1591 [854] (byte~) mode_stdchar::$28 ← (byte) mode_stdchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG1592 [855] (byte~) mode_stdchar::$29 ← (byte~) mode_stdchar::$27 | (byte~) mode_stdchar::$28 -- vbuaa=vbuz1_bor_vbuaa 
    ora _27
  //SEG1593 [856] *((byte*) mode_stdchar::ch#2) ← (byte~) mode_stdchar::$29 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1594 [857] (byte*) mode_stdchar::ch#1 ← ++ (byte*) mode_stdchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1595 [858] (byte) mode_stdchar::cx#1 ← ++ (byte) mode_stdchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1596 [859] if((byte) mode_stdchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_stdchar::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3_from_b3
    jmp b5
  //SEG1597 mode_stdchar::@5
  b5:
  //SEG1598 [860] (byte) mode_stdchar::cy#1 ← ++ (byte) mode_stdchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1599 [861] if((byte) mode_stdchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_stdchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2_from_b5
  //SEG1600 [862] phi from mode_stdchar::@5 to mode_stdchar::@6 [phi:mode_stdchar::@5->mode_stdchar::@6]
  b6_from_b5:
    jmp b6
  //SEG1601 mode_stdchar::@6
  b6:
  //SEG1602 [863] call mode_ctrl 
  //SEG1603 [155] phi from mode_stdchar::@6 to mode_ctrl [phi:mode_stdchar::@6->mode_ctrl]
  mode_ctrl_from_b6:
  //SEG1604 [155] phi (byte) dtv_control#145 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #0
    sta dtv_control
    jsr mode_ctrl
    jmp breturn
  //SEG1605 mode_stdchar::@return
  breturn:
  //SEG1606 [864] return 
    rts
}
//SEG1607 print_str_lines
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
// print_str_lines(byte* zeropage(2) str)
print_str_lines: {
    .label str = 2
  //SEG1608 [866] phi from print_str_lines to print_str_lines::@1 [phi:print_str_lines->print_str_lines::@1]
  b1_from_print_str_lines:
  //SEG1609 [866] phi (byte*) print_line_cursor#17 = (const byte*) menu::SCREEN#0 [phi:print_str_lines->print_str_lines::@1#0] -- pbuz1=pbuc1 
    lda #<menu.SCREEN
    sta print_line_cursor
    lda #>menu.SCREEN
    sta print_line_cursor+1
  //SEG1610 [866] phi (byte*) print_char_cursor#19 = (const byte*) menu::SCREEN#0 [phi:print_str_lines->print_str_lines::@1#1] -- pbuz1=pbuc1 
    lda #<menu.SCREEN
    sta print_char_cursor
    lda #>menu.SCREEN
    sta print_char_cursor+1
  //SEG1611 [866] phi (byte*) print_str_lines::str#2 = (const byte[]) MENU_TEXT#0 [phi:print_str_lines->print_str_lines::@1#2] -- pbuz1=pbuc1 
    lda #<MENU_TEXT
    sta str
    lda #>MENU_TEXT
    sta str+1
    jmp b1
  //SEG1612 print_str_lines::@1
  b1:
  //SEG1613 [867] if(*((byte*) print_str_lines::str#2)!=(byte) '@') goto print_str_lines::@4 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b4_from_b1
    jmp breturn
  //SEG1614 print_str_lines::@return
  breturn:
  //SEG1615 [868] return 
    rts
  //SEG1616 [869] phi from print_str_lines::@1 print_str_lines::@5 to print_str_lines::@4 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4]
  b4_from_b1:
  b4_from_b5:
  //SEG1617 [869] phi (byte*) print_char_cursor#17 = (byte*) print_char_cursor#19 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4#0] -- register_copy 
  //SEG1618 [869] phi (byte*) print_str_lines::str#3 = (byte*) print_str_lines::str#2 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4#1] -- register_copy 
    jmp b4
  //SEG1619 print_str_lines::@4
  b4:
  //SEG1620 [870] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#3) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
  //SEG1621 [871] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#3 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG1622 [872] if((byte) print_str_lines::ch#0==(byte) '@') goto print_str_lines::@5 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'@'
    beq b5_from_b4
    jmp b8
  //SEG1623 print_str_lines::@8
  b8:
  //SEG1624 [873] *((byte*) print_char_cursor#17) ← (byte) print_str_lines::ch#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG1625 [874] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#17 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG1626 [875] phi from print_str_lines::@4 print_str_lines::@8 to print_str_lines::@5 [phi:print_str_lines::@4/print_str_lines::@8->print_str_lines::@5]
  b5_from_b4:
  b5_from_b8:
  //SEG1627 [875] phi (byte*) print_char_cursor#32 = (byte*) print_char_cursor#17 [phi:print_str_lines::@4/print_str_lines::@8->print_str_lines::@5#0] -- register_copy 
    jmp b5
  //SEG1628 print_str_lines::@5
  b5:
  //SEG1629 [876] if((byte) print_str_lines::ch#0!=(byte) '@') goto print_str_lines::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #'@'
    bne b4_from_b5
  //SEG1630 [877] phi from print_str_lines::@5 to print_str_lines::@9 [phi:print_str_lines::@5->print_str_lines::@9]
  b9_from_b5:
    jmp b9
  //SEG1631 print_str_lines::@9
  b9:
  //SEG1632 [878] call print_ln 
  //SEG1633 [880] phi from print_str_lines::@9 to print_ln [phi:print_str_lines::@9->print_ln]
  print_ln_from_b9:
    jsr print_ln
  //SEG1634 [879] (byte*~) print_char_cursor#103 ← (byte*) print_line_cursor#19 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG1635 [866] phi from print_str_lines::@9 to print_str_lines::@1 [phi:print_str_lines::@9->print_str_lines::@1]
  b1_from_b9:
  //SEG1636 [866] phi (byte*) print_line_cursor#17 = (byte*) print_line_cursor#19 [phi:print_str_lines::@9->print_str_lines::@1#0] -- register_copy 
  //SEG1637 [866] phi (byte*) print_char_cursor#19 = (byte*~) print_char_cursor#103 [phi:print_str_lines::@9->print_str_lines::@1#1] -- register_copy 
  //SEG1638 [866] phi (byte*) print_str_lines::str#2 = (byte*) print_str_lines::str#0 [phi:print_str_lines::@9->print_str_lines::@1#2] -- register_copy 
    jmp b1
}
//SEG1639 print_ln
// Print a newline
print_ln: {
  //SEG1640 [881] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG1641 [881] phi (byte*) print_line_cursor#18 = (byte*) print_line_cursor#17 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG1642 print_ln::@1
  b1:
  //SEG1643 [882] (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#18 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG1644 [883] if((byte*) print_line_cursor#19<(byte*) print_char_cursor#32) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG1645 print_ln::@return
  breturn:
  //SEG1646 [884] return 
    rts
}
//SEG1647 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 2
  //SEG1648 [886] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG1649 [886] phi (byte*) print_cls::sc#2 = (const byte*) menu::SCREEN#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<menu.SCREEN
    sta sc
    lda #>menu.SCREEN
    sta sc+1
    jmp b1
  //SEG1650 [886] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG1651 [886] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG1652 print_cls::@1
  b1:
  //SEG1653 [887] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG1654 [888] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG1655 [889] if((byte*) print_cls::sc#1!=(const byte*) menu::SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>menu.SCREEN+$3e8
    bne b1_from_b1
    lda sc
    cmp #<menu.SCREEN+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG1656 print_cls::@return
  breturn:
  //SEG1657 [890] return 
    rts
}
//SEG1658 print_set_screen
// Set the screen to print on. Also resets current line/char cursor.
print_set_screen: {
    jmp breturn
  //SEG1659 print_set_screen::@return
  breturn:
  //SEG1660 [892] return 
    rts
}
  // Default vallues for the palette
  DTV_PALETTE_DEFAULT: .byte 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Tables for the plotter - initialized by calling bitmap_draw_init();
  bitmap_plot_xlo: .fill $100, 0
  bitmap_plot_xhi: .fill $100, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  MENU_TEXT: .text "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"+"4. Standard Bitmap           (V) 0000100@"+"5. Multicolor Bitmap         (V) 0000110@"+"6. High Color Standard Char  (H) 0001000@"+"7. High Extended Color Char  (H) 0001001@"+"8. High Multicolor Char      (H) 0001010@"+"9. High Multicolor Bitmap    (H) 0001110@"+"a. Sixs Fred 2               (D) 0010111@"+"b. Two Plane Bitmap          (D) 0011101@"+"c. Sixs Fred (2 Plane MC BM) (D) 0011111@"+"d. 8bpp Pixel Cell           (D) 0111011@"+"e. Chunky 8bpp Bitmap        (D) 1111011@"+"----------------------------------------@"+"    (V) vicII (H) vicII+hicol (D) c64dtv@"+"@"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b54
Removing instruction jmp bend
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b19
Removing instruction jmp b47
Removing instruction jmp b48
Removing instruction jmp b4
Removing instruction jmp b50
Removing instruction jmp b22
Removing instruction jmp breturn
Removing instruction jmp b6
Removing instruction jmp b51
Removing instruction jmp b24
Removing instruction jmp b7
Removing instruction jmp b53
Removing instruction jmp b26
Removing instruction jmp b8
Removing instruction jmp b55
Removing instruction jmp b28
Removing instruction jmp b9
Removing instruction jmp b57
Removing instruction jmp b30
Removing instruction jmp b10
Removing instruction jmp b59
Removing instruction jmp b32
Removing instruction jmp b11
Removing instruction jmp b61
Removing instruction jmp b34
Removing instruction jmp b12
Removing instruction jmp b63
Removing instruction jmp b36
Removing instruction jmp b13
Removing instruction jmp b65
Removing instruction jmp b38
Removing instruction jmp b14
Removing instruction jmp b67
Removing instruction jmp b40
Removing instruction jmp b15
Removing instruction jmp b69
Removing instruction jmp b42
Removing instruction jmp b16
Removing instruction jmp b71
Removing instruction jmp b44
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp b10
Removing instruction jmp b4
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b32
Removing instruction jmp breturn
Removing instruction jmp b33
Removing instruction jmp b23
Removing instruction jmp b8
Removing instruction jmp b34
Removing instruction jmp b24
Removing instruction jmp b9
Removing instruction jmp b35
Removing instruction jmp b25
Removing instruction jmp b10
Removing instruction jmp b36
Removing instruction jmp b26
Removing instruction jmp b11
Removing instruction jmp b37
Removing instruction jmp b27
Removing instruction jmp b12
Removing instruction jmp b38
Removing instruction jmp b28
Removing instruction jmp b13
Removing instruction jmp b39
Removing instruction jmp b14
Removing instruction jmp b30
Removing instruction jmp b46
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b11
Removing instruction jmp b7
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b8
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b9
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b11
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b10
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b11
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b13
Removing instruction jmp b7
Removing instruction jmp b15
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b17
Removing instruction jmp b18
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b8
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b9
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b11
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b9
Removing instruction jmp b4
Removing instruction jmp b11
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp b17
Removing instruction jmp breturn
Removing instruction jmp b20
Removing instruction jmp b23
Removing instruction jmp b24
Removing instruction jmp b27
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b7
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b10
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b8
Removing instruction jmp b5
Removing instruction jmp b9
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #BLACK
Removing instruction ldy l
Removing instruction ldy l
Removing instruction lda yd
Removing instruction lda yd
Removing instruction lda yd
Removing instruction lda yd
Removing instruction ldy #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #>0
Replacing instruction ldx #0 with TAX
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b2_from_b2 with b2
Replacing label b1_from_b1 with b1
Replacing label b2_from_b2 with b2
Replacing label b2_from_b2 with b2
Replacing label b6_from_b50 with b6
Replacing label b7_from_b51 with b7
Replacing label b8_from_b53 with b8
Replacing label b9_from_b55 with b9
Replacing label b10_from_b57 with b10
Replacing label b11_from_b59 with b11
Replacing label b12_from_b61 with b12
Replacing label b13_from_b63 with b13
Replacing label b14_from_b65 with b14
Replacing label b15_from_b67 with b15
Replacing label b16_from_b69 with b16
Replacing label b4_from_b71 with b4
Replacing label b1_from_b1 with b1
Replacing label b4_from_b3 with b4
Replacing label b4_from_b3 with b4
Replacing label b3_from_b4 with b3
Replacing label b3_from_b4 with b3
Replacing label b2_from_b7 with b2
Replacing label b8_from_b33 with b8
Replacing label b9_from_b34 with b9
Replacing label b10_from_b35 with b10
Replacing label b11_from_b36 with b11
Replacing label b12_from_b37 with b12
Replacing label b13_from_b38 with b13
Replacing label b46_from_b39 with b46
Replacing label b1_from_b14 with b1
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Replacing label b2_from_b9 with b2
Replacing label b6_from_b7 with b6
Replacing label b5_from_b12 with b5
Replacing label b4_from_b13 with b4
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Replacing label b2_from_b9 with b2
Replacing label b5_from_b5 with b5
Replacing label b4_from_b11 with b4
Replacing label b7_from_b7 with b7
Replacing label b6_from_b13 with b6
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Replacing label b2_from_b11 with b2
Replacing label b5_from_b7 with b5
Replacing label b4_from_b15 with b4
Replacing label b9_from_b9 with b9
Replacing label b8_from_b17 with b8
Replacing label b7_from_b6 with b7
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Replacing label b2_from_b9 with b2
Replacing label b5_from_b5 with b5
Replacing label b4_from_b11 with b4
Replacing label b7_from_b7 with b7
Replacing label b6_from_b13 with b6
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Replacing label b2_from_b5 with b2
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Replacing label b2_from_b5 with b2
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Replacing label b2_from_b5 with b2
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Replacing label b2_from_b6 with b2
Replacing label b4_from_b11 with b4
Replacing label b2_from_b5 with b2
Replacing label b1_from_b2 with b1
Replacing label b2_from_b5 with b2
Replacing label b1_from_b2 with b1
Replacing label b2_from_b5 with b2
Replacing label b1_from_b2 with b1
Replacing label b2_from_b5 with b2
Replacing label b1_from_b2 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label b10_from_b1 with b10
Replacing label b1_from_b2 with b1
Replacing label b4_from_b3 with b4
Replacing label b3_from_b4 with b3
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Replacing label b2_from_b5 with b2
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Replacing label b2_from_b5 with b2
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Replacing label b2_from_b5 with b2
Replacing label b4_from_b1 with b4
Replacing label b5_from_b4 with b5
Replacing label b4_from_b5 with b4
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction b54_from_bbegin:
Removing instruction b54:
Removing instruction bend_from_b54:
Removing instruction b2_from_main:
Removing instruction b2_from_b2:
Removing instruction b1_from_b1:
Removing instruction b2_from_b2:
Removing instruction b47_from_b19:
Removing instruction print_cls_from_b47:
Removing instruction b48_from_b47:
Removing instruction print_str_lines_from_b48:
Removing instruction b4_from_b48:
Removing instruction b4_from_b71:
Removing instruction keyboard_key_pressed_from_b4:
Removing instruction b22_from_b50:
Removing instruction b6_from_b50:
Removing instruction keyboard_key_pressed_from_b6:
Removing instruction b24_from_b51:
Removing instruction b7_from_b51:
Removing instruction keyboard_key_pressed_from_b7:
Removing instruction b26_from_b53:
Removing instruction b8_from_b53:
Removing instruction keyboard_key_pressed_from_b8:
Removing instruction b28_from_b55:
Removing instruction b9_from_b55:
Removing instruction keyboard_key_pressed_from_b9:
Removing instruction b30_from_b57:
Removing instruction b10_from_b57:
Removing instruction keyboard_key_pressed_from_b10:
Removing instruction b32_from_b59:
Removing instruction b11_from_b59:
Removing instruction keyboard_key_pressed_from_b11:
Removing instruction b34_from_b61:
Removing instruction b12_from_b61:
Removing instruction keyboard_key_pressed_from_b12:
Removing instruction b36_from_b63:
Removing instruction b13_from_b63:
Removing instruction keyboard_key_pressed_from_b13:
Removing instruction b38_from_b65:
Removing instruction b14_from_b65:
Removing instruction keyboard_key_pressed_from_b14:
Removing instruction b40_from_b67:
Removing instruction b15_from_b67:
Removing instruction keyboard_key_pressed_from_b15:
Removing instruction b42_from_b69:
Removing instruction b16_from_b69:
Removing instruction keyboard_key_pressed_from_b16:
Removing instruction b44_from_b71:
Removing instruction b1_from_b1:
Removing instruction b5_from_b1:
Removing instruction dtvSetCpuBankSegment1_from_b5:
Removing instruction b2_from_b7:
Removing instruction b3_from_b2:
Removing instruction b3_from_b4:
Removing instruction b4_from_b3:
Removing instruction b8_from_b7:
Removing instruction dtvSetCpuBankSegment1_from_b8:
Removing instruction b11_from_b8:
Removing instruction mode_ctrl_from_b11:
Removing instruction b1_from_mode_ctrl:
Removing instruction b1_from_b14:
Removing instruction b6_from_b4:
Removing instruction keyboard_key_pressed_from_b6:
Removing instruction b8_from_b23:
Removing instruction b8_from_b33:
Removing instruction keyboard_key_pressed_from_b8:
Removing instruction b9_from_b24:
Removing instruction b9_from_b34:
Removing instruction keyboard_key_pressed_from_b9:
Removing instruction b10_from_b25:
Removing instruction b10_from_b35:
Removing instruction keyboard_key_pressed_from_b10:
Removing instruction b11_from_b26:
Removing instruction b11_from_b36:
Removing instruction keyboard_key_pressed_from_b11:
Removing instruction b12_from_b27:
Removing instruction b12_from_b37:
Removing instruction keyboard_key_pressed_from_b12:
Removing instruction b13_from_b28:
Removing instruction b13_from_b38:
Removing instruction keyboard_key_pressed_from_b13:
Removing instruction b46_from_b39:
Removing instruction b14_from_b46:
Removing instruction b1_from_b1:
Removing instruction b2_from_b9:
Removing instruction b3_from_b2:
Removing instruction b3_from_b3:
Removing instruction b4_from_b13:
Removing instruction b5_from_b4:
Removing instruction b5_from_b12:
Removing instruction b6_from_b7:
Removing instruction b1_from_b1:
Removing instruction b2_from_b9:
Removing instruction b3_from_b2:
Removing instruction b3_from_b3:
Removing instruction b4_from_b11:
Removing instruction b5_from_b4:
Removing instruction b5_from_b5:
Removing instruction b6_from_b13:
Removing instruction b7_from_b6:
Removing instruction b7_from_b7:
Removing instruction b14_from_b13:
Removing instruction mode_ctrl_from_b14:
Removing instruction b1_from_b1:
Removing instruction b2_from_b11:
Removing instruction b3_from_b2:
Removing instruction b3_from_b3:
Removing instruction b4_from_b15:
Removing instruction b5_from_b4:
Removing instruction b5_from_b7:
Removing instruction b7_from_b13:
Removing instruction b7_from_b6:
Removing instruction b8_from_b17:
Removing instruction b9_from_b8:
Removing instruction b9_from_b9:
Removing instruction b18_from_b17:
Removing instruction mode_ctrl_from_b18:
Removing instruction b1_from_b1:
Removing instruction b2_from_b9:
Removing instruction b3_from_b2:
Removing instruction b3_from_b3:
Removing instruction b4_from_b11:
Removing instruction b5_from_b4:
Removing instruction b5_from_b5:
Removing instruction b6_from_b13:
Removing instruction b7_from_b6:
Removing instruction b7_from_b7:
Removing instruction b14_from_b13:
Removing instruction mode_ctrl_from_b14:
Removing instruction b1_from_b1:
Removing instruction b2_from_b5:
Removing instruction b3_from_b2:
Removing instruction b3_from_b3:
Removing instruction b6_from_b5:
Removing instruction mode_ctrl_from_b6:
Removing instruction b1_from_b1:
Removing instruction b2_from_b5:
Removing instruction b3_from_b2:
Removing instruction b3_from_b3:
Removing instruction b6_from_b5:
Removing instruction mode_ctrl_from_b6:
Removing instruction b1_from_b1:
Removing instruction b2_from_b5:
Removing instruction b3_from_b2:
Removing instruction b3_from_b3:
Removing instruction b6_from_b5:
Removing instruction mode_ctrl_from_b6:
Removing instruction b1_from_b1:
Removing instruction b2_from_b6:
Removing instruction b3_from_b2:
Removing instruction b3_from_b3:
Removing instruction b7_from_b6:
Removing instruction bitmap_init_from_b7:
Removing instruction b9_from_b7:
Removing instruction b4_from_b11:
Removing instruction b8_from_b11:
Removing instruction mode_ctrl_from_b8:
Removing instruction b1_from_bitmap_line_xdyi:
Removing instruction b1_from_b2:
Removing instruction b2_from_b3:
Removing instruction b2_from_b5:
Removing instruction b1_from_bitmap_line_ydxi:
Removing instruction b1_from_b2:
Removing instruction b2_from_b3:
Removing instruction b2_from_b5:
Removing instruction b1_from_bitmap_line_xdyd:
Removing instruction b1_from_b2:
Removing instruction b2_from_b3:
Removing instruction b2_from_b5:
Removing instruction b1_from_bitmap_line_ydxd:
Removing instruction b1_from_b2:
Removing instruction b2_from_b3:
Removing instruction b2_from_b5:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b1_from_b2:
Removing instruction b3_from_b4:
Removing instruction b4_from_b3:
Removing instruction b4_from_b7:
Removing instruction b10_from_b1:
Removing instruction b2_from_b10:
Removing instruction b1_from_b1:
Removing instruction b2_from_b5:
Removing instruction b3_from_b2:
Removing instruction b3_from_b3:
Removing instruction b6_from_b5:
Removing instruction mode_ctrl_from_b6:
Removing instruction b1_from_b1:
Removing instruction b2_from_b5:
Removing instruction b3_from_b2:
Removing instruction b3_from_b3:
Removing instruction b6_from_b5:
Removing instruction mode_ctrl_from_b6:
Removing instruction b1_from_b1:
Removing instruction b2_from_b5:
Removing instruction b3_from_b2:
Removing instruction b3_from_b3:
Removing instruction b6_from_b5:
Removing instruction mode_ctrl_from_b6:
Removing instruction b4_from_b1:
Removing instruction b4_from_b5:
Removing instruction b5_from_b4:
Removing instruction b5_from_b8:
Removing instruction b9_from_b5:
Removing instruction print_ln_from_b9:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_menu:
Removing instruction b2_from_b1:
Removing instruction b19:
Removing instruction print_set_screen_from_b19:
Removing instruction b47:
Removing instruction b48:
Removing instruction b50:
Removing instruction b22:
Removing instruction b51:
Removing instruction b24:
Removing instruction b53:
Removing instruction b26:
Removing instruction b55:
Removing instruction b28:
Removing instruction b57:
Removing instruction b30:
Removing instruction b59:
Removing instruction b32:
Removing instruction b61:
Removing instruction b34:
Removing instruction b63:
Removing instruction b36:
Removing instruction b65:
Removing instruction b38:
Removing instruction b67:
Removing instruction b40:
Removing instruction b69:
Removing instruction b42:
Removing instruction b71:
Removing instruction b44:
Removing instruction b1_from_mode_8bppchunkybmm:
Removing instruction b5:
Removing instruction b2_from_b5:
Removing instruction b6:
Removing instruction dtvSetCpuBankSegment1_from_b6:
Removing instruction b10:
Removing instruction b4_from_b10:
Removing instruction b7:
Removing instruction b8:
Removing instruction b11:
Removing instruction breturn:
Removing instruction b6:
Removing instruction b32:
Removing instruction breturn:
Removing instruction keyboard_key_pressed_from_b7:
Removing instruction b33:
Removing instruction b23:
Removing instruction b34:
Removing instruction b24:
Removing instruction b35:
Removing instruction b25:
Removing instruction b36:
Removing instruction b26:
Removing instruction b37:
Removing instruction b27:
Removing instruction b38:
Removing instruction b28:
Removing instruction b39:
Removing instruction b14_from_b39:
Removing instruction b30:
Removing instruction b2:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_mode_8bpppixelcell:
Removing instruction b2_from_b1:
Removing instruction b9:
Removing instruction b10:
Removing instruction b4_from_b10:
Removing instruction b6_from_b5:
Removing instruction b11:
Removing instruction b7_from_b11:
Removing instruction b12:
Removing instruction b13:
Removing instruction b14:
Removing instruction mode_ctrl_from_b14:
Removing instruction breturn:
Removing instruction b1_from_mode_sixsfred:
Removing instruction b8:
Removing instruction b2_from_b8:
Removing instruction b9:
Removing instruction b4_from_b9:
Removing instruction b11:
Removing instruction b6_from_b11:
Removing instruction b13:
Removing instruction b14:
Removing instruction breturn:
Removing instruction b1_from_mode_twoplanebitmap:
Removing instruction b10:
Removing instruction b2_from_b10:
Removing instruction b11:
Removing instruction b4_from_b11:
Removing instruction b13:
Removing instruction b15:
Removing instruction b8_from_b15:
Removing instruction b17:
Removing instruction b18:
Removing instruction breturn:
Removing instruction b1_from_mode_sixsfred2:
Removing instruction b8:
Removing instruction b2_from_b8:
Removing instruction b9:
Removing instruction b4_from_b9:
Removing instruction b11:
Removing instruction b6_from_b11:
Removing instruction b13:
Removing instruction b14:
Removing instruction breturn:
Removing instruction b1_from_mode_hicolmcchar:
Removing instruction b4:
Removing instruction b2_from_b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction breturn:
Removing instruction b1_from_mode_hicolecmchar:
Removing instruction b4:
Removing instruction b2_from_b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction breturn:
Removing instruction b1_from_mode_hicolstdchar:
Removing instruction b4:
Removing instruction b2_from_b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction breturn:
Removing instruction b1_from_mode_stdbitmap:
Removing instruction b5:
Removing instruction b2_from_b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b9:
Removing instruction b4_from_b9:
Removing instruction b11:
Removing instruction b8:
Removing instruction breturn:
Removing instruction b15:
Removing instruction b16:
Removing instruction b17:
Removing instruction bitmap_line_ydxi_from_b17:
Removing instruction bitmap_line_xdyi_from_b3:
Removing instruction b20:
Removing instruction bitmap_line_ydxd_from_b20:
Removing instruction bitmap_line_xdyd_from_b6:
Removing instruction b23:
Removing instruction b24:
Removing instruction bitmap_line_ydxd_from_b24:
Removing instruction bitmap_line_xdyd_from_b10:
Removing instruction b27:
Removing instruction bitmap_line_ydxi_from_b27:
Removing instruction bitmap_line_xdyi_from_b13:
Removing instruction bitmap_plot_from_b1:
Removing instruction b5:
Removing instruction b3:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction bitmap_plot_from_b1:
Removing instruction b5:
Removing instruction b3:
Removing instruction breturn:
Removing instruction bitmap_plot_from_b1:
Removing instruction b5:
Removing instruction b3:
Removing instruction breturn:
Removing instruction bitmap_plot_from_b1:
Removing instruction b5:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_bitmap_clear:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_bitmap_init:
Removing instruction b2_from_b1:
Removing instruction b3_from_b2:
Removing instruction b7:
Removing instruction breturn:
Removing instruction b1_from_mode_mcchar:
Removing instruction b4:
Removing instruction b2_from_b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction breturn:
Removing instruction b1_from_mode_ecmchar:
Removing instruction b4:
Removing instruction b2_from_b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction breturn:
Removing instruction b1_from_mode_stdchar:
Removing instruction b4:
Removing instruction b2_from_b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction breturn:
Removing instruction b1_from_print_str_lines:
Removing instruction breturn:
Removing instruction b8:
Removing instruction b9:
Removing instruction b1_from_b9:
Removing instruction breturn:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Skipping double jump to b14 in beq b46
Skipping double jump to b1 in jmp b1_from_b30
Skipping double jump to b2 in bne b10
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label b1_from_b30 to b2
Relabelling long label b7_from_b6 to b8
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx #0 with TAX
Replacing instruction ldx #0 with TAX
Removing instruction lda x0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bbegin:
Removing instruction b46:
Removing instruction b10:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp b14
Removing unreachable instruction jmp b2
Succesful ASM optimization Pass5UnreachableCodeElimination
Fixing long branch [262] beq b4 to bne

FINAL SYMBOL TABLE
(label) @54
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = ((byte*))(word/dword/signed dword) $d021
(byte*) BGCOL1
(const byte*) BGCOL1#0 BGCOL1 = ((byte*))(word/dword/signed dword) $d021
(byte*) BGCOL2
(const byte*) BGCOL2#0 BGCOL2 = ((byte*))(word/dword/signed dword) $d022
(byte*) BGCOL3
(const byte*) BGCOL3#0 BGCOL3 = ((byte*))(word/dword/signed dword) $d023
(byte*) BGCOL4
(const byte*) BGCOL4#0 BGCOL4 = ((byte*))(word/dword/signed dword) $d024
(byte) BLACK
(const byte) BLACK#0 BLACK = (byte/signed byte/word/signed word/dword/signed dword) 0
(byte) BLUE
(const byte) BLUE#0 BLUE = (byte/signed byte/word/signed word/dword/signed dword) 6
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) $d020
(byte) BROWN
(byte*) CHARGEN
(byte*) CIA1_INTERRUPT
(byte*) CIA1_PORT_A
(const byte*) CIA1_PORT_A#0 CIA1_PORT_A = ((byte*))(word/dword/signed dword) $dc00
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(const byte*) CIA1_PORT_B#0 CIA1_PORT_B = ((byte*))(word/dword/signed dword) $dc01
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_INTERRUPT
(byte*) CIA2_PORT_A
(const byte*) CIA2_PORT_A#0 CIA2_PORT_A = ((byte*))(word/dword/signed dword) $dd00
(byte*) CIA2_PORT_A_DDR
(const byte*) CIA2_PORT_A_DDR#0 CIA2_PORT_A_DDR = ((byte*))(word/dword/signed dword) $dd02
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte) CIA_INTERRUPT_CLEAR
(byte*) COLS
(const byte*) COLS#0 COLS = ((byte*))(word/dword/signed dword) $d800
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DARK_GREY
(byte) DTV_BADLINE_OFF
(byte*) DTV_BLITTER_ALU
(byte*) DTV_BLITTER_CONTROL
(byte*) DTV_BLITTER_CONTROL2
(byte*) DTV_BLITTER_DEST_HI
(byte*) DTV_BLITTER_DEST_LIN_HI
(byte*) DTV_BLITTER_DEST_LIN_LO
(byte*) DTV_BLITTER_DEST_LO
(byte*) DTV_BLITTER_DEST_MI
(byte*) DTV_BLITTER_DEST_MOD_HI
(byte*) DTV_BLITTER_DEST_MOD_LO
(byte*) DTV_BLITTER_DEST_STEP
(byte*) DTV_BLITTER_LEN_HI
(byte*) DTV_BLITTER_LEN_LO
(byte*) DTV_BLITTER_SRCA_HI
(byte*) DTV_BLITTER_SRCA_LIN_HI
(byte*) DTV_BLITTER_SRCA_LIN_LO
(byte*) DTV_BLITTER_SRCA_LO
(byte*) DTV_BLITTER_SRCA_MI
(byte*) DTV_BLITTER_SRCA_MOD_HI
(byte*) DTV_BLITTER_SRCA_MOD_LO
(byte*) DTV_BLITTER_SRCA_STEP
(byte*) DTV_BLITTER_SRCB_HI
(byte*) DTV_BLITTER_SRCB_LIN_HI
(byte*) DTV_BLITTER_SRCB_LIN_LO
(byte*) DTV_BLITTER_SRCB_LO
(byte*) DTV_BLITTER_SRCB_MI
(byte*) DTV_BLITTER_SRCB_MOD_HI
(byte*) DTV_BLITTER_SRCB_MOD_LO
(byte*) DTV_BLITTER_SRCB_STEP
(byte*) DTV_BLITTER_TRANSPARANCY
(byte) DTV_BLIT_ADD
(byte) DTV_BLIT_AND
(byte) DTV_BLIT_CIA_IRQ
(byte) DTV_BLIT_CLEAR_IRQ
(byte) DTV_BLIT_DEST_CONT
(byte) DTV_BLIT_DEST_FWD
(byte) DTV_BLIT_DISABLE_B
(byte) DTV_BLIT_FORCE_START
(byte) DTV_BLIT_IRQ_EN
(byte) DTV_BLIT_NAND
(byte) DTV_BLIT_NOR
(byte) DTV_BLIT_OR
(byte) DTV_BLIT_SHIFT0
(byte) DTV_BLIT_SHIFT1
(byte) DTV_BLIT_SHIFT2
(byte) DTV_BLIT_SHIFT3
(byte) DTV_BLIT_SHIFT4
(byte) DTV_BLIT_SHIFT5
(byte) DTV_BLIT_SHIFT6
(byte) DTV_BLIT_SHIFT7
(byte) DTV_BLIT_SRCA_CONT
(byte) DTV_BLIT_SRCA_FWD
(byte) DTV_BLIT_SRCB_CONT
(byte) DTV_BLIT_SRCB_FWD
(byte) DTV_BLIT_STATUS_BUSY
(byte) DTV_BLIT_STATUS_IRQ
(byte) DTV_BLIT_SUB
(byte) DTV_BLIT_TRANSPARANCY_NONE
(byte) DTV_BLIT_VBLANK
(byte) DTV_BLIT_VIC_IRQ
(byte) DTV_BLIT_WRITE_NONTRANSPARENT
(byte) DTV_BLIT_WRITE_TRANSPARENT
(byte) DTV_BLIT_XNOR
(byte) DTV_BLIT_XOR
(byte) DTV_BORDER_OFF
(const byte) DTV_BORDER_OFF#0 DTV_BORDER_OFF = (byte/signed byte/word/signed word/dword/signed dword) 2
(byte) DTV_CHUNKY
(const byte) DTV_CHUNKY#0 DTV_CHUNKY = (byte/signed byte/word/signed word/dword/signed dword) $40
(byte) DTV_COLORRAM_OFF
(const byte) DTV_COLORRAM_OFF#0 DTV_COLORRAM_OFF = (byte/signed byte/word/signed word/dword/signed dword) $10
(dword) DTV_COLOR_BANK_DEFAULT
(const dword) DTV_COLOR_BANK_DEFAULT#0 DTV_COLOR_BANK_DEFAULT = (dword/signed dword) $1d800
(byte*) DTV_COLOR_BANK_HI
(const byte*) DTV_COLOR_BANK_HI#0 DTV_COLOR_BANK_HI = ((byte*))(word/dword/signed dword) $d037
(byte*) DTV_COLOR_BANK_LO
(const byte*) DTV_COLOR_BANK_LO#0 DTV_COLOR_BANK_LO = ((byte*))(word/dword/signed dword) $d036
(byte*) DTV_CONTROL
(const byte*) DTV_CONTROL#0 DTV_CONTROL = ((byte*))(word/dword/signed dword) $d03c
(byte*) DTV_FEATURE
(const byte*) DTV_FEATURE#0 DTV_FEATURE = ((byte*))(word/dword/signed dword) $d03f
(byte) DTV_FEATURE_DISABLE_TIL_RESET
(byte) DTV_FEATURE_ENABLE
(const byte) DTV_FEATURE_ENABLE#0 DTV_FEATURE_ENABLE = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte*) DTV_GRAPHICS_HICOL_BANK
(byte*) DTV_GRAPHICS_VIC_BANK
(const byte*) DTV_GRAPHICS_VIC_BANK#0 DTV_GRAPHICS_VIC_BANK = ((byte*))(word/dword/signed dword) $d03d
(byte) DTV_HIGHCOLOR
(const byte) DTV_HIGHCOLOR#0 DTV_HIGHCOLOR = (byte/signed byte/word/signed word/dword/signed dword) 4
(byte) DTV_LINEAR
(const byte) DTV_LINEAR#0 DTV_LINEAR = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte) DTV_OVERSCAN
(const byte) DTV_OVERSCAN#0 DTV_OVERSCAN = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte*) DTV_PALETTE
(const byte*) DTV_PALETTE#0 DTV_PALETTE = ((byte*))(word/dword/signed dword) $d200
(byte[$10]) DTV_PALETTE_DEFAULT
(const byte[$10]) DTV_PALETTE_DEFAULT#0 DTV_PALETTE_DEFAULT = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $36, (byte/word/signed word/dword/signed dword) $be, (byte/signed byte/word/signed word/dword/signed dword) $58, (byte/word/signed word/dword/signed dword) $db, (byte/word/signed word/dword/signed dword) $86, (byte/word/signed word/dword/signed dword) $ff, (byte/signed byte/word/signed word/dword/signed dword) $29, (byte/signed byte/word/signed word/dword/signed dword) $26, (byte/signed byte/word/signed word/dword/signed dword) $3b, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/word/signed word/dword/signed dword) $df, (byte/word/signed word/dword/signed dword) $9a, (byte/signed byte/word/signed word/dword/signed dword) $a }
(byte*) DTV_PLANEA_MODULO_HI
(const byte*) DTV_PLANEA_MODULO_HI#0 DTV_PLANEA_MODULO_HI = ((byte*))(word/dword/signed dword) $d039
(byte*) DTV_PLANEA_MODULO_LO
(const byte*) DTV_PLANEA_MODULO_LO#0 DTV_PLANEA_MODULO_LO = ((byte*))(word/dword/signed dword) $d038
(byte*) DTV_PLANEA_START_HI
(const byte*) DTV_PLANEA_START_HI#0 DTV_PLANEA_START_HI = ((byte*))(word/dword/signed dword) $d045
(byte*) DTV_PLANEA_START_LO
(const byte*) DTV_PLANEA_START_LO#0 DTV_PLANEA_START_LO = ((byte*))(word/dword/signed dword) $d03a
(byte*) DTV_PLANEA_START_MI
(const byte*) DTV_PLANEA_START_MI#0 DTV_PLANEA_START_MI = ((byte*))(word/dword/signed dword) $d03b
(byte*) DTV_PLANEA_STEP
(const byte*) DTV_PLANEA_STEP#0 DTV_PLANEA_STEP = ((byte*))(word/dword/signed dword) $d046
(byte*) DTV_PLANEB_MODULO_HI
(const byte*) DTV_PLANEB_MODULO_HI#0 DTV_PLANEB_MODULO_HI = ((byte*))(word/dword/signed dword) $d048
(byte*) DTV_PLANEB_MODULO_LO
(const byte*) DTV_PLANEB_MODULO_LO#0 DTV_PLANEB_MODULO_LO = ((byte*))(word/dword/signed dword) $d047
(byte*) DTV_PLANEB_START_HI
(const byte*) DTV_PLANEB_START_HI#0 DTV_PLANEB_START_HI = ((byte*))(word/dword/signed dword) $d04b
(byte*) DTV_PLANEB_START_LO
(const byte*) DTV_PLANEB_START_LO#0 DTV_PLANEB_START_LO = ((byte*))(word/dword/signed dword) $d049
(byte*) DTV_PLANEB_START_MI
(const byte*) DTV_PLANEB_START_MI#0 DTV_PLANEB_START_MI = ((byte*))(word/dword/signed dword) $d04a
(byte*) DTV_PLANEB_STEP
(const byte*) DTV_PLANEB_STEP#0 DTV_PLANEB_STEP = ((byte*))(word/dword/signed dword) $d04c
(byte*) DTV_SPRITE_BANK
(byte) GREEN
(const byte) GREEN#0 GREEN = (byte/signed byte/word/signed word/dword/signed dword) 5
(byte) GREY
(void()**) HARDWARE_IRQ
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_SPRITE
(byte*) IRQ_ENABLE
(byte) IRQ_LIGHTPEN
(byte) IRQ_RASTER
(byte*) IRQ_STATUS
(void()**) KERNEL_IRQ
(byte) KEY_0
(const byte) KEY_0#0 KEY_0 = (byte/signed byte/word/signed word/dword/signed dword) $23
(byte) KEY_1
(const byte) KEY_1#0 KEY_1 = (byte/signed byte/word/signed word/dword/signed dword) $38
(byte) KEY_2
(const byte) KEY_2#0 KEY_2 = (byte/signed byte/word/signed word/dword/signed dword) $3b
(byte) KEY_3
(const byte) KEY_3#0 KEY_3 = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte) KEY_4
(const byte) KEY_4#0 KEY_4 = (byte/signed byte/word/signed word/dword/signed dword) $b
(byte) KEY_5
(byte) KEY_6
(const byte) KEY_6#0 KEY_6 = (byte/signed byte/word/signed word/dword/signed dword) $13
(byte) KEY_7
(const byte) KEY_7#0 KEY_7 = (byte/signed byte/word/signed word/dword/signed dword) $18
(byte) KEY_8
(const byte) KEY_8#0 KEY_8 = (byte/signed byte/word/signed word/dword/signed dword) $1b
(byte) KEY_9
(byte) KEY_A
(const byte) KEY_A#0 KEY_A = (byte/signed byte/word/signed word/dword/signed dword) $a
(byte) KEY_ARROW_LEFT
(byte) KEY_ARROW_UP
(byte) KEY_ASTERISK
(byte) KEY_AT
(byte) KEY_B
(const byte) KEY_B#0 KEY_B = (byte/signed byte/word/signed word/dword/signed dword) $1c
(byte) KEY_C
(const byte) KEY_C#0 KEY_C = (byte/signed byte/word/signed word/dword/signed dword) $14
(byte) KEY_COLON
(byte) KEY_COMMA
(byte) KEY_COMMODORE
(byte) KEY_CRSR_DOWN
(byte) KEY_CRSR_RIGHT
(byte) KEY_CTRL
(byte) KEY_D
(const byte) KEY_D#0 KEY_D = (byte/signed byte/word/signed word/dword/signed dword) $12
(byte) KEY_DEL
(byte) KEY_DOT
(byte) KEY_E
(const byte) KEY_E#0 KEY_E = (byte/signed byte/word/signed word/dword/signed dword) $e
(byte) KEY_EQUALS
(byte) KEY_F
(byte) KEY_F1
(byte) KEY_F3
(byte) KEY_F5
(byte) KEY_F7
(byte) KEY_G
(byte) KEY_H
(const byte) KEY_H#0 KEY_H = (byte/signed byte/word/signed word/dword/signed dword) $1d
(byte) KEY_HOME
(byte) KEY_I
(byte) KEY_J
(byte) KEY_K
(byte) KEY_L
(const byte) KEY_L#0 KEY_L = (byte/signed byte/word/signed word/dword/signed dword) $2a
(byte) KEY_LSHIFT
(byte) KEY_M
(byte) KEY_MINUS
(byte) KEY_MODIFIER_COMMODORE
(byte) KEY_MODIFIER_CTRL
(byte) KEY_MODIFIER_LSHIFT
(byte) KEY_MODIFIER_RSHIFT
(byte) KEY_MODIFIER_SHIFT
(byte) KEY_N
(byte) KEY_O
(const byte) KEY_O#0 KEY_O = (byte/signed byte/word/signed word/dword/signed dword) $26
(byte) KEY_P
(byte) KEY_PLUS
(byte) KEY_POUND
(byte) KEY_Q
(byte) KEY_R
(byte) KEY_RETURN
(byte) KEY_RSHIFT
(byte) KEY_RUNSTOP
(byte) KEY_S
(byte) KEY_SEMICOLON
(byte) KEY_SLASH
(byte) KEY_SPACE
(const byte) KEY_SPACE#0 KEY_SPACE = (byte/signed byte/word/signed word/dword/signed dword) $3c
(byte) KEY_T
(byte) KEY_U
(const byte) KEY_U#0 KEY_U = (byte/signed byte/word/signed word/dword/signed dword) $1e
(byte) KEY_V
(byte) KEY_W
(byte) KEY_X
(byte) KEY_Y
(byte) KEY_Z
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_Y
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(const byte) LIGHT_GREEN#0 LIGHT_GREEN = (byte/signed byte/word/signed word/dword/signed dword) $d
(byte) LIGHT_GREY
(byte[]) MENU_TEXT
(const byte[]) MENU_TEXT#0 MENU_TEXT = (string) "C64DTV Graphics Modes            CCLHBME@"+(string) "                                 OHIIMCC@"+(string) "                                 LUNCMMM@"+(string) "----------------------------------------@"+(string) "1. Standard Char             (V) 0000000@"+(string) "2. Extended Color Char       (V) 0000001@"+(string) "3. Multicolor Char           (V) 0000010@"+(string) "4. Standard Bitmap           (V) 0000100@"+(string) "5. Multicolor Bitmap         (V) 0000110@"+(string) "6. High Color Standard Char  (H) 0001000@"+(string) "7. High Extended Color Char  (H) 0001001@"+(string) "8. High Multicolor Char      (H) 0001010@"+(string) "9. High Multicolor Bitmap    (H) 0001110@"+(string) "a. Sixs Fred 2               (D) 0010111@"+(string) "b. Two Plane Bitmap          (D) 0011101@"+(string) "c. Sixs Fred (2 Plane MC BM) (D) 0011111@"+(string) "d. 8bpp Pixel Cell           (D) 0111011@"+(string) "e. Chunky 8bpp Bitmap        (D) 1111011@"+(string) "----------------------------------------@"+(string) "    (V) vicII (H) vicII+hicol (D) c64dtv@"+(string) "@"
(byte) ORANGE
(byte) PINK
(byte*) PROCPORT
(const byte*) PROCPORT#0 PROCPORT = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 1
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(const byte*) PROCPORT_DDR#0 PROCPORT_DDR = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 0
(byte) PROCPORT_DDR_MEMORY_MASK
(const byte) PROCPORT_DDR_MEMORY_MASK#0 PROCPORT_DDR_MEMORY_MASK = (byte/signed byte/word/signed word/dword/signed dword) 7
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(const byte) PROCPORT_RAM_CHARROM#0 PROCPORT_RAM_CHARROM = (byte/signed byte/word/signed word/dword/signed dword) $31
(byte) PROCPORT_RAM_IO
(const byte) PROCPORT_RAM_IO#0 PROCPORT_RAM_IO = (byte/signed byte/word/signed word/dword/signed dword) $35
(byte) PURPLE
(byte*) RASTER
(const byte*) RASTER#0 RASTER = ((byte*))(word/dword/signed dword) $d012
(byte) RED
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(word) SPRITE_PTRS
(byte) VIC_BMM
(const byte) VIC_BMM#0 VIC_BMM = (byte/signed byte/word/signed word/dword/signed dword) $20
(byte*) VIC_CONTROL
(const byte*) VIC_CONTROL#0 VIC_CONTROL = ((byte*))(word/dword/signed dword) $d011
(byte*) VIC_CONTROL2
(const byte*) VIC_CONTROL2#0 VIC_CONTROL2 = ((byte*))(word/dword/signed dword) $d016
(byte) VIC_CSEL
(const byte) VIC_CSEL#0 VIC_CSEL = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte) VIC_DEN
(const byte) VIC_DEN#0 VIC_DEN = (byte/signed byte/word/signed word/dword/signed dword) $10
(byte) VIC_ECM
(const byte) VIC_ECM#0 VIC_ECM = (byte/signed byte/word/signed word/dword/signed dword) $40
(byte) VIC_MCM
(const byte) VIC_MCM#0 VIC_MCM = (byte/signed byte/word/signed word/dword/signed dword) $10
(byte*) VIC_MEMORY
(const byte*) VIC_MEMORY#0 VIC_MEMORY = ((byte*))(word/dword/signed dword) $d018
(byte) VIC_RSEL
(const byte) VIC_RSEL#0 VIC_RSEL = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte) VIC_RST8
(byte) WHITE
(byte) YELLOW
(void()) bitmap_clear()
(word~) bitmap_clear::$3 $3 zp ZP_WORD:2 2.0
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@3
(label) bitmap_clear::@return
(byte*) bitmap_clear::bitmap
(byte*) bitmap_clear::bitmap#1 bitmap zp ZP_WORD:2 420.59999999999997
(byte*) bitmap_clear::bitmap#2 bitmap zp ZP_WORD:2 1552.0
(byte*) bitmap_clear::bitmap#3 bitmap zp ZP_WORD:2 204.0
(byte*~) bitmap_clear::bitmap#5 bitmap zp ZP_WORD:2 4.0
(byte) bitmap_clear::x
(byte) bitmap_clear::x#1 reg byte x 1501.5
(byte) bitmap_clear::x#2 reg byte x 667.3333333333334
(byte) bitmap_clear::y
(byte) bitmap_clear::y#1 y zp ZP_BYTE:4 151.5
(byte) bitmap_clear::y#4 y zp ZP_BYTE:4 33.666666666666664
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(byte~) bitmap_init::$0 reg byte a 202.0
(byte~) bitmap_init::$10 reg byte a 202.0
(byte~) bitmap_init::$6 $6 zp ZP_BYTE:4 101.0
(byte~) bitmap_init::$7 reg byte a 202.0
(byte~) bitmap_init::$8 reg byte a 202.0
(byte~) bitmap_init::$9 reg byte a 202.0
(label) bitmap_init::@1
(label) bitmap_init::@10
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@7
(label) bitmap_init::@return
(byte*) bitmap_init::bitmap
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 reg byte y 101.0
(byte) bitmap_init::bits#3 reg byte y 60.599999999999994
(byte) bitmap_init::bits#4 reg byte y 67.33333333333333
(byte) bitmap_init::x
(byte) bitmap_init::x#1 reg byte x 151.5
(byte) bitmap_init::x#2 reg byte x 67.33333333333333
(byte) bitmap_init::y
(byte) bitmap_init::y#1 reg byte x 151.5
(byte) bitmap_init::y#2 reg byte x 55.090909090909086
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 yoffs zp ZP_WORD:2 202.0
(byte*) bitmap_init::yoffs#2 yoffs zp ZP_WORD:2 56.11111111111111
(byte*) bitmap_init::yoffs#4 yoffs zp ZP_WORD:2 101.0
(void()) bitmap_line((byte) bitmap_line::x0 , (byte) bitmap_line::x1 , (byte) bitmap_line::y0 , (byte) bitmap_line::y1)
(label) bitmap_line::@1
(label) bitmap_line::@10
(label) bitmap_line::@13
(label) bitmap_line::@15
(label) bitmap_line::@16
(label) bitmap_line::@17
(label) bitmap_line::@2
(label) bitmap_line::@20
(label) bitmap_line::@23
(label) bitmap_line::@24
(label) bitmap_line::@27
(label) bitmap_line::@3
(label) bitmap_line::@6
(label) bitmap_line::@9
(label) bitmap_line::@return
(byte) bitmap_line::x0
(byte) bitmap_line::x0#0 x0 zp ZP_BYTE:9 5.173913043478264
(byte) bitmap_line::x1
(byte) bitmap_line::x1#0 x1 zp ZP_BYTE:12 5.409090909090908
(byte) bitmap_line::xd
(byte) bitmap_line::xd#1 xd zp ZP_BYTE:8 0.7
(byte) bitmap_line::xd#2 xd zp ZP_BYTE:8 0.7
(byte) bitmap_line::y0
(byte) bitmap_line::y0#0 y0 zp ZP_BYTE:11 5.952380952380948
(byte) bitmap_line::y1
(byte) bitmap_line::y1#0 reg byte y 6.249999999999996
(byte) bitmap_line::yd
(byte) bitmap_line::yd#1 yd zp ZP_BYTE:7 0.8888888888888888
(byte) bitmap_line::yd#10 yd zp ZP_BYTE:7 0.8888888888888888
(byte) bitmap_line::yd#11 yd zp ZP_BYTE:7 0.8888888888888888
(byte) bitmap_line::yd#2 yd zp ZP_BYTE:7 0.8888888888888888
(void()) bitmap_line_xdyd((byte) bitmap_line_xdyd::x , (byte) bitmap_line_xdyd::y , (byte) bitmap_line_xdyd::x1 , (byte) bitmap_line_xdyd::xd , (byte) bitmap_line_xdyd::yd)
(byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6 reg byte x 2002.0
(label) bitmap_line_xdyd::@1
(label) bitmap_line_xdyd::@2
(label) bitmap_line_xdyd::@3
(label) bitmap_line_xdyd::@5
(label) bitmap_line_xdyd::@return
(byte) bitmap_line_xdyd::e
(byte) bitmap_line_xdyd::e#0 e zp ZP_BYTE:9 4.0
(byte) bitmap_line_xdyd::e#1 e zp ZP_BYTE:9 1334.6666666666667
(byte) bitmap_line_xdyd::e#2 e zp ZP_BYTE:9 2002.0
(byte) bitmap_line_xdyd::e#3 e zp ZP_BYTE:9 400.79999999999995
(byte) bitmap_line_xdyd::e#6 e zp ZP_BYTE:9 1001.0
(byte) bitmap_line_xdyd::x
(byte) bitmap_line_xdyd::x#0 x zp ZP_BYTE:10 0.8
(byte) bitmap_line_xdyd::x#1 x zp ZP_BYTE:10 0.8
(byte) bitmap_line_xdyd::x#2 x zp ZP_BYTE:10 375.375
(byte) bitmap_line_xdyd::x#3 x zp ZP_BYTE:10 751.25
(byte) bitmap_line_xdyd::x#6 x zp ZP_BYTE:10 3.0
(byte) bitmap_line_xdyd::x1
(byte) bitmap_line_xdyd::x1#0 x1 zp ZP_BYTE:12 1.3333333333333333
(byte) bitmap_line_xdyd::x1#1 x1 zp ZP_BYTE:12 1.3333333333333333
(byte) bitmap_line_xdyd::x1#6 x1 zp ZP_BYTE:12 71.78571428571429
(byte) bitmap_line_xdyd::xd
(byte) bitmap_line_xdyd::xd#0 xd zp ZP_BYTE:8 2.0
(byte) bitmap_line_xdyd::xd#1 xd zp ZP_BYTE:8 2.0
(byte) bitmap_line_xdyd::xd#5 xd zp ZP_BYTE:8 143.28571428571428
(byte) bitmap_line_xdyd::y
(byte) bitmap_line_xdyd::y#0 y zp ZP_BYTE:11 1.0
(byte) bitmap_line_xdyd::y#1 y zp ZP_BYTE:11 1.0
(byte) bitmap_line_xdyd::y#2 y zp ZP_BYTE:11 1001.0
(byte) bitmap_line_xdyd::y#3 y zp ZP_BYTE:11 572.2857142857142
(byte) bitmap_line_xdyd::y#5 y zp ZP_BYTE:11 3.0
(byte) bitmap_line_xdyd::y#6 y zp ZP_BYTE:11 1001.0
(byte) bitmap_line_xdyd::yd
(byte) bitmap_line_xdyd::yd#0 yd zp ZP_BYTE:7 4.0
(byte) bitmap_line_xdyd::yd#1 yd zp ZP_BYTE:7 4.0
(byte) bitmap_line_xdyd::yd#2 yd zp ZP_BYTE:7 71.92857142857143
(void()) bitmap_line_xdyi((byte) bitmap_line_xdyi::x , (byte) bitmap_line_xdyi::y , (byte) bitmap_line_xdyi::x1 , (byte) bitmap_line_xdyi::xd , (byte) bitmap_line_xdyi::yd)
(byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6 reg byte x 2002.0
(label) bitmap_line_xdyi::@1
(label) bitmap_line_xdyi::@2
(label) bitmap_line_xdyi::@3
(label) bitmap_line_xdyi::@5
(label) bitmap_line_xdyi::@return
(byte) bitmap_line_xdyi::e
(byte) bitmap_line_xdyi::e#0 e zp ZP_BYTE:12 4.0
(byte) bitmap_line_xdyi::e#1 e zp ZP_BYTE:12 1334.6666666666667
(byte) bitmap_line_xdyi::e#2 e zp ZP_BYTE:12 2002.0
(byte) bitmap_line_xdyi::e#3 e zp ZP_BYTE:12 400.79999999999995
(byte) bitmap_line_xdyi::e#6 e zp ZP_BYTE:12 1001.0
(byte) bitmap_line_xdyi::x
(byte) bitmap_line_xdyi::x#0 x zp ZP_BYTE:10 0.8
(byte) bitmap_line_xdyi::x#1 x zp ZP_BYTE:10 0.8
(byte) bitmap_line_xdyi::x#2 x zp ZP_BYTE:10 375.375
(byte) bitmap_line_xdyi::x#3 x zp ZP_BYTE:10 751.25
(byte) bitmap_line_xdyi::x#6 x zp ZP_BYTE:10 3.0
(byte) bitmap_line_xdyi::x1
(byte) bitmap_line_xdyi::x1#0 x1 zp ZP_BYTE:9 1.3333333333333333
(byte) bitmap_line_xdyi::x1#1 x1 zp ZP_BYTE:9 1.3333333333333333
(byte) bitmap_line_xdyi::x1#6 x1 zp ZP_BYTE:9 71.78571428571429
(byte) bitmap_line_xdyi::xd
(byte) bitmap_line_xdyi::xd#0 xd zp ZP_BYTE:8 2.0
(byte) bitmap_line_xdyi::xd#1 xd zp ZP_BYTE:8 2.0
(byte) bitmap_line_xdyi::xd#5 xd zp ZP_BYTE:8 143.28571428571428
(byte) bitmap_line_xdyi::y
(byte) bitmap_line_xdyi::y#0 y zp ZP_BYTE:11 1.0
(byte) bitmap_line_xdyi::y#1 y zp ZP_BYTE:11 1.0
(byte) bitmap_line_xdyi::y#2 y zp ZP_BYTE:11 1001.0
(byte) bitmap_line_xdyi::y#3 y zp ZP_BYTE:11 572.2857142857142
(byte) bitmap_line_xdyi::y#5 y zp ZP_BYTE:11 3.0
(byte) bitmap_line_xdyi::y#6 y zp ZP_BYTE:11 1001.0
(byte) bitmap_line_xdyi::yd
(byte) bitmap_line_xdyi::yd#0 yd zp ZP_BYTE:7 4.0
(byte) bitmap_line_xdyi::yd#1 yd zp ZP_BYTE:7 4.0
(byte) bitmap_line_xdyi::yd#2 yd zp ZP_BYTE:7 71.92857142857143
(void()) bitmap_line_ydxd((byte) bitmap_line_ydxd::y , (byte) bitmap_line_ydxd::x , (byte) bitmap_line_ydxd::y1 , (byte) bitmap_line_ydxd::yd , (byte) bitmap_line_ydxd::xd)
(byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6 reg byte a 2002.0
(label) bitmap_line_ydxd::@1
(label) bitmap_line_ydxd::@2
(label) bitmap_line_ydxd::@3
(label) bitmap_line_ydxd::@5
(label) bitmap_line_ydxd::@return
(byte) bitmap_line_ydxd::e
(byte) bitmap_line_ydxd::e#0 e zp ZP_BYTE:9 4.0
(byte) bitmap_line_ydxd::e#1 e zp ZP_BYTE:9 1334.6666666666667
(byte) bitmap_line_ydxd::e#2 e zp ZP_BYTE:9 2002.0
(byte) bitmap_line_ydxd::e#3 e zp ZP_BYTE:9 400.79999999999995
(byte) bitmap_line_ydxd::e#6 e zp ZP_BYTE:9 1001.0
(byte) bitmap_line_ydxd::x
(byte) bitmap_line_ydxd::x#0 reg byte x 1.0
(byte) bitmap_line_ydxd::x#1 reg byte x 1.0
(byte) bitmap_line_ydxd::x#2 reg byte x 1001.0
(byte) bitmap_line_ydxd::x#3 reg byte x 572.2857142857142
(byte) bitmap_line_ydxd::x#5 reg byte x 3.0
(byte) bitmap_line_ydxd::x#6 reg byte x 1001.0
(byte) bitmap_line_ydxd::xd
(byte) bitmap_line_ydxd::xd#0 xd zp ZP_BYTE:8 4.0
(byte) bitmap_line_ydxd::xd#1 xd zp ZP_BYTE:8 4.0
(byte) bitmap_line_ydxd::xd#2 xd zp ZP_BYTE:8 71.92857142857143
(byte) bitmap_line_ydxd::y
(byte) bitmap_line_ydxd::y#0 y zp ZP_BYTE:10 0.8
(byte) bitmap_line_ydxd::y#1 y zp ZP_BYTE:10 0.8
(byte) bitmap_line_ydxd::y#2 y zp ZP_BYTE:10 751.25
(byte) bitmap_line_ydxd::y#3 y zp ZP_BYTE:10 375.375
(byte) bitmap_line_ydxd::y#7 y zp ZP_BYTE:10 3.0
(byte) bitmap_line_ydxd::y1
(byte) bitmap_line_ydxd::y1#0 y1 zp ZP_BYTE:11 1.3333333333333333
(byte) bitmap_line_ydxd::y1#1 y1 zp ZP_BYTE:11 1.3333333333333333
(byte) bitmap_line_ydxd::y1#6 y1 zp ZP_BYTE:11 71.78571428571429
(byte) bitmap_line_ydxd::yd
(byte) bitmap_line_ydxd::yd#0 yd zp ZP_BYTE:7 2.0
(byte) bitmap_line_ydxd::yd#1 yd zp ZP_BYTE:7 2.0
(byte) bitmap_line_ydxd::yd#5 yd zp ZP_BYTE:7 143.28571428571428
(void()) bitmap_line_ydxi((byte) bitmap_line_ydxi::y , (byte) bitmap_line_ydxi::x , (byte) bitmap_line_ydxi::y1 , (byte) bitmap_line_ydxi::yd , (byte) bitmap_line_ydxi::xd)
(byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6 reg byte a 2002.0
(label) bitmap_line_ydxi::@1
(label) bitmap_line_ydxi::@2
(label) bitmap_line_ydxi::@3
(label) bitmap_line_ydxi::@5
(label) bitmap_line_ydxi::@return
(byte) bitmap_line_ydxi::e
(byte) bitmap_line_ydxi::e#0 e zp ZP_BYTE:9 4.0
(byte) bitmap_line_ydxi::e#1 e zp ZP_BYTE:9 1334.6666666666667
(byte) bitmap_line_ydxi::e#2 e zp ZP_BYTE:9 2002.0
(byte) bitmap_line_ydxi::e#3 e zp ZP_BYTE:9 400.79999999999995
(byte) bitmap_line_ydxi::e#6 e zp ZP_BYTE:9 1001.0
(byte) bitmap_line_ydxi::x
(byte) bitmap_line_ydxi::x#0 reg byte x 1.0
(byte) bitmap_line_ydxi::x#1 reg byte x 1.0
(byte) bitmap_line_ydxi::x#2 reg byte x 1001.0
(byte) bitmap_line_ydxi::x#3 reg byte x 572.2857142857142
(byte) bitmap_line_ydxi::x#5 reg byte x 3.0
(byte) bitmap_line_ydxi::x#6 reg byte x 1001.0
(byte) bitmap_line_ydxi::xd
(byte) bitmap_line_ydxi::xd#0 xd zp ZP_BYTE:8 4.0
(byte) bitmap_line_ydxi::xd#1 xd zp ZP_BYTE:8 4.0
(byte) bitmap_line_ydxi::xd#2 xd zp ZP_BYTE:8 71.92857142857143
(byte) bitmap_line_ydxi::y
(byte) bitmap_line_ydxi::y#0 y zp ZP_BYTE:10 0.8
(byte) bitmap_line_ydxi::y#1 y zp ZP_BYTE:10 0.8
(byte) bitmap_line_ydxi::y#2 y zp ZP_BYTE:10 375.375
(byte) bitmap_line_ydxi::y#3 y zp ZP_BYTE:10 751.25
(byte) bitmap_line_ydxi::y#6 y zp ZP_BYTE:10 3.0
(byte) bitmap_line_ydxi::y1
(byte) bitmap_line_ydxi::y1#0 y1 zp ZP_BYTE:11 1.3333333333333333
(byte) bitmap_line_ydxi::y1#1 y1 zp ZP_BYTE:11 1.3333333333333333
(byte) bitmap_line_ydxi::y1#6 y1 zp ZP_BYTE:11 71.78571428571429
(byte) bitmap_line_ydxi::yd
(byte) bitmap_line_ydxi::yd#0 yd zp ZP_BYTE:7 2.0
(byte) bitmap_line_ydxi::yd#1 yd zp ZP_BYTE:7 2.0
(byte) bitmap_line_ydxi::yd#5 yd zp ZP_BYTE:7 143.28571428571428
(void()) bitmap_plot((byte) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$0 $0 zp ZP_WORD:2 1.0
(byte~) bitmap_plot::$1 reg byte a 4.0
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter_x
(word) bitmap_plot::plotter_x#0 plotter_x zp ZP_WORD:2 2.0
(word) bitmap_plot::plotter_y
(word) bitmap_plot::plotter_y#0 plotter_y zp ZP_WORD:5 4.0
(byte) bitmap_plot::x
(byte) bitmap_plot::x#0 reg byte x 1001.0
(byte) bitmap_plot::x#1 reg byte x 1001.0
(byte) bitmap_plot::x#2 reg byte x 1001.0
(byte) bitmap_plot::x#3 reg byte x 1001.0
(byte) bitmap_plot::x#4 reg byte x 1002.5
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 reg byte y 2002.0
(byte) bitmap_plot::y#1 reg byte y 2002.0
(byte) bitmap_plot::y#2 reg byte y 2002.0
(byte) bitmap_plot::y#3 reg byte y 2002.0
(byte) bitmap_plot::y#4 reg byte y 2004.0
(byte[$100]) bitmap_plot_bit
(const byte[$100]) bitmap_plot_bit#0 bitmap_plot_bit = { fill( $100, 0) }
(byte[$100]) bitmap_plot_xhi
(const byte[$100]) bitmap_plot_xhi#0 bitmap_plot_xhi = { fill( $100, 0) }
(byte[$100]) bitmap_plot_xlo
(const byte[$100]) bitmap_plot_xlo#0 bitmap_plot_xlo = { fill( $100, 0) }
(byte[$100]) bitmap_plot_yhi
(const byte[$100]) bitmap_plot_yhi#0 bitmap_plot_yhi = { fill( $100, 0) }
(byte[$100]) bitmap_plot_ylo
(const byte[$100]) bitmap_plot_ylo#0 bitmap_plot_ylo = { fill( $100, 0) }
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(label) dtvSetCpuBankSegment1::@return
(byte*) dtvSetCpuBankSegment1::cpuBank
(const byte*) dtvSetCpuBankSegment1::cpuBank#0 cpuBank = ((byte*))(byte/word/signed word/dword/signed dword) $ff
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 reg byte a 2002.0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#3 reg byte a 1003.0
(byte) dtv_control
(byte) dtv_control#114 dtv_control zp ZP_BYTE:4 42.099999999999994
(byte) dtv_control#145 dtv_control zp ZP_BYTE:4 2.0
(byte) dtv_control#17 dtv_control zp ZP_BYTE:4 67.33333333333333
(byte[]) keyboard_char_keycodes
(byte[8]) keyboard_events
(byte) keyboard_events_size
(byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
(byte~) keyboard_key_pressed::$2 reg byte a 4.0
(label) keyboard_key_pressed::@2
(label) keyboard_key_pressed::@return
(byte) keyboard_key_pressed::colidx
(byte) keyboard_key_pressed::colidx#0 colidx zp ZP_BYTE:7 0.6666666666666666
(byte) keyboard_key_pressed::key
(byte) keyboard_key_pressed::key#20 reg byte y 2.0
(byte) keyboard_key_pressed::return
(byte) keyboard_key_pressed::return#0 reg byte a 419.1818181818182
(byte) keyboard_key_pressed::return#10 reg byte a 202.0
(byte) keyboard_key_pressed::return#11 reg byte a 202.0
(byte) keyboard_key_pressed::return#12 reg byte a 202.0
(byte) keyboard_key_pressed::return#13 reg byte a 202.0
(byte) keyboard_key_pressed::return#14 reg byte a 2002.0
(byte) keyboard_key_pressed::return#15 reg byte a 2002.0
(byte) keyboard_key_pressed::return#16 reg byte a 2002.0
(byte) keyboard_key_pressed::return#17 reg byte a 2002.0
(byte) keyboard_key_pressed::return#18 reg byte a 2002.0
(byte) keyboard_key_pressed::return#19 reg byte a 2002.0
(byte) keyboard_key_pressed::return#2 reg byte a 202.0
(byte) keyboard_key_pressed::return#20 reg byte a 2002.0
(byte) keyboard_key_pressed::return#21 reg byte a 2002.0
(byte) keyboard_key_pressed::return#24 reg byte a 202.0
(byte) keyboard_key_pressed::return#25 reg byte a 202.0
(byte) keyboard_key_pressed::return#26 reg byte a 202.0
(byte) keyboard_key_pressed::return#27 reg byte a 202.0
(byte) keyboard_key_pressed::return#28 reg byte a 202.0
(byte) keyboard_key_pressed::return#29 reg byte a 202.0
(byte) keyboard_key_pressed::return#30 reg byte a 202.0
(byte) keyboard_key_pressed::rowidx
(byte) keyboard_key_pressed::rowidx#0 reg byte a 4.0
(byte[8]) keyboard_matrix_col_bitmask
(const byte[8]) keyboard_matrix_col_bitmask#0 keyboard_matrix_col_bitmask = { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) $10, (byte/signed byte/word/signed word/dword/signed dword) $20, (byte/signed byte/word/signed word/dword/signed dword) $40, (byte/word/signed word/dword/signed dword) $80 }
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 reg byte a 1.3333333333333333
(byte) keyboard_matrix_read::return#2 reg byte a 4.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 reg byte y 4.0
(byte[8]) keyboard_matrix_row_bitmask
(const byte[8]) keyboard_matrix_row_bitmask#0 keyboard_matrix_row_bitmask = { (byte/word/signed word/dword/signed dword) $fe, (byte/word/signed word/dword/signed dword) $fd, (byte/word/signed word/dword/signed dword) $fb, (byte/word/signed word/dword/signed dword) $f7, (byte/word/signed word/dword/signed dword) $ef, (byte/word/signed word/dword/signed dword) $df, (byte/word/signed word/dword/signed dword) $bf, (byte/signed byte/word/signed word/dword/signed dword) $7f }
(byte) keyboard_modifiers
(byte[8]) keyboard_scan_values
(void()) main()
(label) main::@2
(void()) menu()
(byte~) menu::$29 reg byte a 202.0
(byte~) menu::$33 reg byte a 202.0
(byte~) menu::$37 reg byte a 202.0
(byte~) menu::$41 reg byte a 202.0
(byte~) menu::$45 reg byte a 202.0
(byte~) menu::$49 reg byte a 202.0
(byte~) menu::$53 reg byte a 202.0
(byte~) menu::$57 reg byte a 202.0
(byte~) menu::$61 reg byte a 202.0
(byte~) menu::$65 reg byte a 202.0
(byte~) menu::$69 reg byte a 202.0
(byte~) menu::$73 reg byte a 202.0
(label) menu::@1
(label) menu::@10
(label) menu::@11
(label) menu::@12
(label) menu::@13
(label) menu::@14
(label) menu::@15
(label) menu::@16
(label) menu::@19
(label) menu::@2
(label) menu::@22
(label) menu::@24
(label) menu::@26
(label) menu::@28
(label) menu::@30
(label) menu::@32
(label) menu::@34
(label) menu::@36
(label) menu::@38
(label) menu::@4
(label) menu::@40
(label) menu::@42
(label) menu::@44
(label) menu::@47
(label) menu::@48
(label) menu::@50
(label) menu::@51
(label) menu::@53
(label) menu::@55
(label) menu::@57
(label) menu::@59
(label) menu::@6
(label) menu::@61
(label) menu::@63
(label) menu::@65
(label) menu::@67
(label) menu::@69
(label) menu::@7
(label) menu::@71
(label) menu::@8
(label) menu::@9
(label) menu::@return
(byte*) menu::CHARSET
(const byte*) menu::CHARSET#0 CHARSET = ((byte*))(word/dword/signed dword) $9800
(byte*) menu::SCREEN
(const byte*) menu::SCREEN#0 SCREEN = ((byte*))(word/dword/signed dword) $8000
(byte*) menu::c
(byte*) menu::c#1 c zp ZP_WORD:2 151.5
(byte*) menu::c#2 c zp ZP_WORD:2 151.5
(byte) menu::i
(byte) menu::i#1 reg byte x 151.5
(byte) menu::i#2 reg byte x 202.0
(void()) mode_8bppchunkybmm()
(word~) mode_8bppchunkybmm::$23 $23 zp ZP_WORD:13 2002.0
(label) mode_8bppchunkybmm::@1
(label) mode_8bppchunkybmm::@10
(label) mode_8bppchunkybmm::@11
(label) mode_8bppchunkybmm::@2
(label) mode_8bppchunkybmm::@3
(label) mode_8bppchunkybmm::@4
(label) mode_8bppchunkybmm::@5
(label) mode_8bppchunkybmm::@6
(label) mode_8bppchunkybmm::@7
(label) mode_8bppchunkybmm::@8
(label) mode_8bppchunkybmm::@return
(dword) mode_8bppchunkybmm::PLANEB
(const dword) mode_8bppchunkybmm::PLANEB#0 PLANEB = (dword/signed dword) $20000
(byte) mode_8bppchunkybmm::c
(byte) mode_8bppchunkybmm::c#0 reg byte a 2002.0
(byte*) mode_8bppchunkybmm::gfxb
(byte*) mode_8bppchunkybmm::gfxb#1 gfxb zp ZP_WORD:5 420.59999999999997
(byte*) mode_8bppchunkybmm::gfxb#3 gfxb zp ZP_WORD:5 1552.0
(byte*) mode_8bppchunkybmm::gfxb#4 gfxb zp ZP_WORD:5 750.75
(byte*) mode_8bppchunkybmm::gfxb#5 gfxb zp ZP_WORD:5 202.0
(byte) mode_8bppchunkybmm::gfxbCpuBank
(byte) mode_8bppchunkybmm::gfxbCpuBank#2 reg byte x 2002.0
(byte) mode_8bppchunkybmm::gfxbCpuBank#4 reg byte x 1026.25
(byte) mode_8bppchunkybmm::gfxbCpuBank#7 reg byte x 202.0
(byte) mode_8bppchunkybmm::gfxbCpuBank#8 reg byte x 344.8888888888889
(byte) mode_8bppchunkybmm::i
(byte) mode_8bppchunkybmm::i#1 reg byte x 151.5
(byte) mode_8bppchunkybmm::i#2 reg byte x 202.0
(word) mode_8bppchunkybmm::x
(word) mode_8bppchunkybmm::x#1 x zp ZP_WORD:2 1501.5
(word) mode_8bppchunkybmm::x#2 x zp ZP_WORD:2 300.29999999999995
(byte) mode_8bppchunkybmm::y
(byte) mode_8bppchunkybmm::y#1 y zp ZP_BYTE:4 151.5
(byte) mode_8bppchunkybmm::y#6 y zp ZP_BYTE:4 92.53846153846155
(void()) mode_8bpppixelcell()
(byte~) mode_8bpppixelcell::$13 reg byte a 2002.0
(byte~) mode_8bpppixelcell::$14 $14 zp ZP_BYTE:7 1001.0
(byte~) mode_8bpppixelcell::$15 reg byte a 2002.0
(byte~) mode_8bpppixelcell::$16 reg byte a 2002.0
(byte~) mode_8bpppixelcell::$19 reg byte a 20002.0
(label) mode_8bpppixelcell::@1
(label) mode_8bpppixelcell::@10
(label) mode_8bpppixelcell::@11
(label) mode_8bpppixelcell::@12
(label) mode_8bpppixelcell::@13
(label) mode_8bpppixelcell::@14
(label) mode_8bpppixelcell::@2
(label) mode_8bpppixelcell::@3
(label) mode_8bpppixelcell::@4
(label) mode_8bpppixelcell::@5
(label) mode_8bpppixelcell::@6
(label) mode_8bpppixelcell::@7
(label) mode_8bpppixelcell::@9
(label) mode_8bpppixelcell::@return
(byte*) mode_8bpppixelcell::CHARGEN
(byte*) mode_8bpppixelcell::PLANEA
(const byte*) mode_8bpppixelcell::PLANEA#0 PLANEA = ((byte*))(word/signed word/dword/signed dword) $3c00
(byte*) mode_8bpppixelcell::PLANEB
(const byte*) mode_8bpppixelcell::PLANEB#0 PLANEB = ((byte*))(word/signed word/dword/signed dword) $4000
(byte) mode_8bpppixelcell::ax
(byte) mode_8bpppixelcell::ax#1 reg byte x 1501.5
(byte) mode_8bpppixelcell::ax#2 reg byte x 429.0
(byte) mode_8bpppixelcell::ay
(byte) mode_8bpppixelcell::ay#1 ay zp ZP_BYTE:4 151.5
(byte) mode_8bpppixelcell::ay#4 ay zp ZP_BYTE:4 120.29999999999998
(byte) mode_8bpppixelcell::bits
(byte) mode_8bpppixelcell::bits#0 bits zp ZP_BYTE:8 1001.0
(byte) mode_8bpppixelcell::bits#1 bits zp ZP_BYTE:8 5000.5
(byte) mode_8bpppixelcell::bits#2 bits zp ZP_BYTE:8 4429.142857142857
(byte) mode_8bpppixelcell::c
(byte) mode_8bpppixelcell::c#2 reg byte a 20002.0
(byte~) mode_8bpppixelcell::c#3 reg byte a 20002.0
(byte) mode_8bpppixelcell::ch
(byte) mode_8bpppixelcell::ch#1 ch zp ZP_BYTE:4 151.5
(byte) mode_8bpppixelcell::ch#8 ch zp ZP_BYTE:4 11.882352941176471
(byte*) mode_8bpppixelcell::chargen
(byte*) mode_8bpppixelcell::chargen#1 chargen zp ZP_WORD:2 131.4375
(byte*) mode_8bpppixelcell::chargen#2 chargen zp ZP_WORD:2 1552.0
(byte*) mode_8bpppixelcell::chargen#4 chargen zp ZP_WORD:2 202.0
(byte) mode_8bpppixelcell::col
(byte) mode_8bpppixelcell::col#1 col zp ZP_BYTE:9 3014.857142857143
(byte) mode_8bpppixelcell::col#2 col zp ZP_BYTE:9 3875.5
(byte) mode_8bpppixelcell::col#5 col zp ZP_BYTE:9 701.0
(byte) mode_8bpppixelcell::col#7 col zp ZP_BYTE:9 202.0
(byte) mode_8bpppixelcell::cp
(byte) mode_8bpppixelcell::cp#1 reg byte x 15001.5
(byte) mode_8bpppixelcell::cp#2 reg byte x 2222.4444444444443
(byte) mode_8bpppixelcell::cr
(byte) mode_8bpppixelcell::cr#1 cr zp ZP_BYTE:7 1501.5
(byte) mode_8bpppixelcell::cr#6 cr zp ZP_BYTE:7 143.0
(byte*) mode_8bpppixelcell::gfxa
(byte*) mode_8bpppixelcell::gfxa#1 gfxa zp ZP_WORD:2 420.59999999999997
(byte*) mode_8bpppixelcell::gfxa#2 gfxa zp ZP_WORD:2 517.3333333333334
(byte*) mode_8bpppixelcell::gfxa#3 gfxa zp ZP_WORD:2 202.0
(byte*) mode_8bpppixelcell::gfxb
(byte*) mode_8bpppixelcell::gfxb#1 gfxb zp ZP_WORD:5 2344.8888888888887
(byte*) mode_8bpppixelcell::gfxb#2 gfxb zp ZP_WORD:5 5167.333333333333
(byte*) mode_8bpppixelcell::gfxb#5 gfxb zp ZP_WORD:5 701.0
(byte*) mode_8bpppixelcell::gfxb#7 gfxb zp ZP_WORD:5 202.0
(byte) mode_8bpppixelcell::i
(byte) mode_8bpppixelcell::i#1 reg byte x 151.5
(byte) mode_8bpppixelcell::i#2 reg byte x 202.0
(void()) mode_ctrl()
(byte~) mode_ctrl::$1 reg byte a 2002.0
(byte~) mode_ctrl::$12 reg byte a 2002.0
(byte~) mode_ctrl::$16 reg byte a 2002.0
(byte~) mode_ctrl::$20 reg byte a 2002.0
(byte~) mode_ctrl::$24 reg byte a 2002.0
(byte~) mode_ctrl::$28 reg byte a 2002.0
(byte~) mode_ctrl::$4 reg byte a 2002.0
(byte~) mode_ctrl::$8 reg byte a 2002.0
(label) mode_ctrl::@1
(label) mode_ctrl::@10
(label) mode_ctrl::@11
(label) mode_ctrl::@12
(label) mode_ctrl::@13
(label) mode_ctrl::@14
(label) mode_ctrl::@23
(label) mode_ctrl::@24
(label) mode_ctrl::@25
(label) mode_ctrl::@26
(label) mode_ctrl::@27
(label) mode_ctrl::@28
(label) mode_ctrl::@30
(label) mode_ctrl::@32
(label) mode_ctrl::@33
(label) mode_ctrl::@34
(label) mode_ctrl::@35
(label) mode_ctrl::@36
(label) mode_ctrl::@37
(label) mode_ctrl::@38
(label) mode_ctrl::@39
(label) mode_ctrl::@4
(label) mode_ctrl::@46
(label) mode_ctrl::@6
(label) mode_ctrl::@7
(label) mode_ctrl::@8
(label) mode_ctrl::@9
(label) mode_ctrl::@return
(byte) mode_ctrl::ctrl
(byte) mode_ctrl::ctrl#0 reg byte x 600.5999999999999
(byte) mode_ctrl::ctrl#1 reg byte x 2002.0
(byte) mode_ctrl::ctrl#10 reg byte x 800.8
(byte) mode_ctrl::ctrl#11 reg byte x 800.8
(byte) mode_ctrl::ctrl#12 reg byte x 800.8
(byte) mode_ctrl::ctrl#13 reg byte x 800.8
(byte) mode_ctrl::ctrl#14 reg byte x 576.25
(byte) mode_ctrl::ctrl#17 reg byte x 800.8
(byte) mode_ctrl::ctrl#2 reg byte x 2002.0
(byte) mode_ctrl::ctrl#22 reg byte x 500.5
(byte) mode_ctrl::ctrl#3 reg byte x 2002.0
(byte) mode_ctrl::ctrl#4 reg byte x 2002.0
(byte) mode_ctrl::ctrl#5 reg byte x 2002.0
(byte) mode_ctrl::ctrl#6 reg byte x 2002.0
(void()) mode_ecmchar()
(byte~) mode_ecmchar::$25 reg byte a 2002.0
(byte~) mode_ecmchar::$26 reg byte a 2002.0
(byte~) mode_ecmchar::$27 reg byte a 2002.0
(byte~) mode_ecmchar::$28 $28 zp ZP_BYTE:7 1001.0
(byte~) mode_ecmchar::$29 reg byte a 2002.0
(byte~) mode_ecmchar::$30 reg byte a 2002.0
(label) mode_ecmchar::@1
(label) mode_ecmchar::@2
(label) mode_ecmchar::@3
(label) mode_ecmchar::@4
(label) mode_ecmchar::@5
(label) mode_ecmchar::@6
(label) mode_ecmchar::@return
(byte*) mode_ecmchar::CHARSET
(const byte*) mode_ecmchar::CHARSET#0 CHARSET = ((byte*))(word/dword/signed dword) $9000
(byte*) mode_ecmchar::COLORS
(const byte*) mode_ecmchar::COLORS#0 COLORS = ((byte*))(word/dword/signed dword) $d800
(byte*) mode_ecmchar::SCREEN
(const byte*) mode_ecmchar::SCREEN#0 SCREEN = ((byte*))(word/dword/signed dword) $8000
(byte*) mode_ecmchar::ch
(byte*) mode_ecmchar::ch#1 ch zp ZP_WORD:5 420.59999999999997
(byte*) mode_ecmchar::ch#2 ch zp ZP_WORD:5 310.4
(byte*) mode_ecmchar::ch#3 ch zp ZP_WORD:5 202.0
(byte*) mode_ecmchar::col
(byte*) mode_ecmchar::col#1 col zp ZP_WORD:2 191.1818181818182
(byte*) mode_ecmchar::col#2 col zp ZP_WORD:2 776.0
(byte*) mode_ecmchar::col#3 col zp ZP_WORD:2 202.0
(byte) mode_ecmchar::cx
(byte) mode_ecmchar::cx#1 reg byte x 1501.5
(byte) mode_ecmchar::cx#2 reg byte x 364.0
(byte) mode_ecmchar::cy
(byte) mode_ecmchar::cy#1 cy zp ZP_BYTE:4 151.5
(byte) mode_ecmchar::cy#4 cy zp ZP_BYTE:4 157.42857142857144
(byte) mode_ecmchar::i
(byte) mode_ecmchar::i#1 reg byte x 151.5
(byte) mode_ecmchar::i#2 reg byte x 202.0
(void()) mode_hicolecmchar()
(byte~) mode_hicolecmchar::$25 reg byte a 2002.0
(byte~) mode_hicolecmchar::$26 $26 zp ZP_BYTE:7 1001.0
(byte~) mode_hicolecmchar::$27 reg byte a 2002.0
(label) mode_hicolecmchar::@1
(label) mode_hicolecmchar::@2
(label) mode_hicolecmchar::@3
(label) mode_hicolecmchar::@4
(label) mode_hicolecmchar::@5
(label) mode_hicolecmchar::@6
(label) mode_hicolecmchar::@return
(byte*) mode_hicolecmchar::CHARSET
(const byte*) mode_hicolecmchar::CHARSET#0 CHARSET = ((byte*))(word/dword/signed dword) $9000
(byte*) mode_hicolecmchar::COLORS
(const byte*) mode_hicolecmchar::COLORS#0 COLORS = ((byte*))(word/dword/signed dword) $8400
(byte*) mode_hicolecmchar::SCREEN
(const byte*) mode_hicolecmchar::SCREEN#0 SCREEN = ((byte*))(word/dword/signed dword) $8000
(byte*) mode_hicolecmchar::ch
(byte*) mode_hicolecmchar::ch#1 ch zp ZP_WORD:5 420.59999999999997
(byte*) mode_hicolecmchar::ch#2 ch zp ZP_WORD:5 388.0
(byte*) mode_hicolecmchar::ch#3 ch zp ZP_WORD:5 202.0
(byte*) mode_hicolecmchar::col
(byte*) mode_hicolecmchar::col#1 col zp ZP_WORD:2 300.42857142857144
(byte*) mode_hicolecmchar::col#2 col zp ZP_WORD:2 517.3333333333334
(byte*) mode_hicolecmchar::col#3 col zp ZP_WORD:2 202.0
(byte) mode_hicolecmchar::cx
(byte) mode_hicolecmchar::cx#1 reg byte x 1501.5
(byte) mode_hicolecmchar::cx#2 reg byte x 333.6666666666667
(byte) mode_hicolecmchar::cy
(byte) mode_hicolecmchar::cy#1 cy zp ZP_BYTE:4 151.5
(byte) mode_hicolecmchar::cy#4 cy zp ZP_BYTE:4 100.25000000000001
(byte) mode_hicolecmchar::i
(byte) mode_hicolecmchar::i#1 reg byte x 151.5
(byte) mode_hicolecmchar::i#2 reg byte x 202.0
(byte) mode_hicolecmchar::v
(byte) mode_hicolecmchar::v#0 reg byte a 1001.0
(void()) mode_hicolmcchar()
(byte~) mode_hicolmcchar::$25 reg byte a 2002.0
(byte~) mode_hicolmcchar::$26 $26 zp ZP_BYTE:7 1001.0
(byte~) mode_hicolmcchar::$27 reg byte a 2002.0
(label) mode_hicolmcchar::@1
(label) mode_hicolmcchar::@2
(label) mode_hicolmcchar::@3
(label) mode_hicolmcchar::@4
(label) mode_hicolmcchar::@5
(label) mode_hicolmcchar::@6
(label) mode_hicolmcchar::@return
(byte*) mode_hicolmcchar::CHARSET
(const byte*) mode_hicolmcchar::CHARSET#0 CHARSET = ((byte*))(word/dword/signed dword) $9000
(byte*) mode_hicolmcchar::COLORS
(const byte*) mode_hicolmcchar::COLORS#0 COLORS = ((byte*))(word/dword/signed dword) $8400
(byte*) mode_hicolmcchar::SCREEN
(const byte*) mode_hicolmcchar::SCREEN#0 SCREEN = ((byte*))(word/dword/signed dword) $8000
(byte*) mode_hicolmcchar::ch
(byte*) mode_hicolmcchar::ch#1 ch zp ZP_WORD:5 420.59999999999997
(byte*) mode_hicolmcchar::ch#2 ch zp ZP_WORD:5 388.0
(byte*) mode_hicolmcchar::ch#3 ch zp ZP_WORD:5 202.0
(byte*) mode_hicolmcchar::col
(byte*) mode_hicolmcchar::col#1 col zp ZP_WORD:2 300.42857142857144
(byte*) mode_hicolmcchar::col#2 col zp ZP_WORD:2 517.3333333333334
(byte*) mode_hicolmcchar::col#3 col zp ZP_WORD:2 202.0
(byte) mode_hicolmcchar::cx
(byte) mode_hicolmcchar::cx#1 reg byte x 1501.5
(byte) mode_hicolmcchar::cx#2 reg byte x 333.6666666666667
(byte) mode_hicolmcchar::cy
(byte) mode_hicolmcchar::cy#1 cy zp ZP_BYTE:4 151.5
(byte) mode_hicolmcchar::cy#4 cy zp ZP_BYTE:4 100.25000000000001
(byte) mode_hicolmcchar::i
(byte) mode_hicolmcchar::i#1 reg byte x 151.5
(byte) mode_hicolmcchar::i#2 reg byte x 202.0
(byte) mode_hicolmcchar::v
(byte) mode_hicolmcchar::v#0 reg byte a 1001.0
(void()) mode_hicolstdchar()
(byte~) mode_hicolstdchar::$24 reg byte a 2002.0
(byte~) mode_hicolstdchar::$25 $25 zp ZP_BYTE:7 1001.0
(byte~) mode_hicolstdchar::$26 reg byte a 2002.0
(label) mode_hicolstdchar::@1
(label) mode_hicolstdchar::@2
(label) mode_hicolstdchar::@3
(label) mode_hicolstdchar::@4
(label) mode_hicolstdchar::@5
(label) mode_hicolstdchar::@6
(label) mode_hicolstdchar::@return
(byte*) mode_hicolstdchar::CHARSET
(const byte*) mode_hicolstdchar::CHARSET#0 CHARSET = ((byte*))(word/dword/signed dword) $9000
(byte*) mode_hicolstdchar::COLORS
(const byte*) mode_hicolstdchar::COLORS#0 COLORS = ((byte*))(word/dword/signed dword) $8400
(byte*) mode_hicolstdchar::SCREEN
(const byte*) mode_hicolstdchar::SCREEN#0 SCREEN = ((byte*))(word/dword/signed dword) $8000
(byte*) mode_hicolstdchar::ch
(byte*) mode_hicolstdchar::ch#1 ch zp ZP_WORD:5 420.59999999999997
(byte*) mode_hicolstdchar::ch#2 ch zp ZP_WORD:5 388.0
(byte*) mode_hicolstdchar::ch#3 ch zp ZP_WORD:5 202.0
(byte*) mode_hicolstdchar::col
(byte*) mode_hicolstdchar::col#1 col zp ZP_WORD:2 300.42857142857144
(byte*) mode_hicolstdchar::col#2 col zp ZP_WORD:2 517.3333333333334
(byte*) mode_hicolstdchar::col#3 col zp ZP_WORD:2 202.0
(byte) mode_hicolstdchar::cx
(byte) mode_hicolstdchar::cx#1 reg byte x 1501.5
(byte) mode_hicolstdchar::cx#2 reg byte x 333.6666666666667
(byte) mode_hicolstdchar::cy
(byte) mode_hicolstdchar::cy#1 cy zp ZP_BYTE:4 151.5
(byte) mode_hicolstdchar::cy#4 cy zp ZP_BYTE:4 100.25000000000001
(byte) mode_hicolstdchar::i
(byte) mode_hicolstdchar::i#1 reg byte x 151.5
(byte) mode_hicolstdchar::i#2 reg byte x 202.0
(byte) mode_hicolstdchar::v
(byte) mode_hicolstdchar::v#0 reg byte a 1001.0
(void()) mode_mcchar()
(byte~) mode_mcchar::$25 reg byte a 2002.0
(byte~) mode_mcchar::$26 reg byte a 2002.0
(byte~) mode_mcchar::$27 reg byte a 2002.0
(byte~) mode_mcchar::$28 $28 zp ZP_BYTE:7 1001.0
(byte~) mode_mcchar::$29 reg byte a 2002.0
(byte~) mode_mcchar::$30 reg byte a 2002.0
(label) mode_mcchar::@1
(label) mode_mcchar::@2
(label) mode_mcchar::@3
(label) mode_mcchar::@4
(label) mode_mcchar::@5
(label) mode_mcchar::@6
(label) mode_mcchar::@return
(byte*) mode_mcchar::CHARSET
(const byte*) mode_mcchar::CHARSET#0 CHARSET = ((byte*))(word/dword/signed dword) $9000
(byte*) mode_mcchar::COLORS
(const byte*) mode_mcchar::COLORS#0 COLORS = ((byte*))(word/dword/signed dword) $d800
(byte*) mode_mcchar::SCREEN
(const byte*) mode_mcchar::SCREEN#0 SCREEN = ((byte*))(word/dword/signed dword) $8000
(byte*) mode_mcchar::ch
(byte*) mode_mcchar::ch#1 ch zp ZP_WORD:5 420.59999999999997
(byte*) mode_mcchar::ch#2 ch zp ZP_WORD:5 310.4
(byte*) mode_mcchar::ch#3 ch zp ZP_WORD:5 202.0
(byte*) mode_mcchar::col
(byte*) mode_mcchar::col#1 col zp ZP_WORD:2 191.1818181818182
(byte*) mode_mcchar::col#2 col zp ZP_WORD:2 776.0
(byte*) mode_mcchar::col#3 col zp ZP_WORD:2 202.0
(byte) mode_mcchar::cx
(byte) mode_mcchar::cx#1 reg byte x 1501.5
(byte) mode_mcchar::cx#2 reg byte x 364.0
(byte) mode_mcchar::cy
(byte) mode_mcchar::cy#1 cy zp ZP_BYTE:4 151.5
(byte) mode_mcchar::cy#4 cy zp ZP_BYTE:4 157.42857142857144
(byte) mode_mcchar::i
(byte) mode_mcchar::i#1 reg byte x 151.5
(byte) mode_mcchar::i#2 reg byte x 202.0
(void()) mode_sixsfred()
(byte~) mode_sixsfred::$16 reg byte a 2002.0
(byte~) mode_sixsfred::$17 reg byte a 2002.0
(byte~) mode_sixsfred::$20 reg byte a 2002.0
(label) mode_sixsfred::@1
(label) mode_sixsfred::@11
(label) mode_sixsfred::@13
(label) mode_sixsfred::@14
(label) mode_sixsfred::@2
(label) mode_sixsfred::@3
(label) mode_sixsfred::@4
(label) mode_sixsfred::@5
(label) mode_sixsfred::@6
(label) mode_sixsfred::@7
(label) mode_sixsfred::@8
(label) mode_sixsfred::@9
(label) mode_sixsfred::@return
(byte*) mode_sixsfred::COLORS
(const byte*) mode_sixsfred::COLORS#0 COLORS = ((byte*))(word/dword/signed dword) $8000
(byte*) mode_sixsfred::PLANEA
(const byte*) mode_sixsfred::PLANEA#0 PLANEA = ((byte*))(word/signed word/dword/signed dword) $4000
(byte*) mode_sixsfred::PLANEB
(const byte*) mode_sixsfred::PLANEB#0 PLANEB = ((byte*))(word/signed word/dword/signed dword) $6000
(byte) mode_sixsfred::ax
(byte) mode_sixsfred::ax#1 reg byte x 1501.5
(byte) mode_sixsfred::ax#2 reg byte x 400.4
(byte) mode_sixsfred::ay
(byte) mode_sixsfred::ay#1 ay zp ZP_BYTE:4 151.5
(byte) mode_sixsfred::ay#4 ay zp ZP_BYTE:4 150.375
(byte) mode_sixsfred::bx
(byte) mode_sixsfred::bx#1 reg byte x 1501.5
(byte) mode_sixsfred::bx#2 reg byte x 667.3333333333334
(byte) mode_sixsfred::by
(byte) mode_sixsfred::by#1 by zp ZP_BYTE:4 151.5
(byte) mode_sixsfred::by#4 by zp ZP_BYTE:4 33.666666666666664
(byte*) mode_sixsfred::col
(byte*) mode_sixsfred::col#1 col zp ZP_WORD:2 420.59999999999997
(byte*) mode_sixsfred::col#2 col zp ZP_WORD:2 776.0
(byte*) mode_sixsfred::col#3 col zp ZP_WORD:2 202.0
(byte) mode_sixsfred::cx
(byte) mode_sixsfred::cx#1 reg byte x 1501.5
(byte) mode_sixsfred::cx#2 reg byte x 600.5999999999999
(byte) mode_sixsfred::cy
(byte) mode_sixsfred::cy#1 cy zp ZP_BYTE:4 151.5
(byte) mode_sixsfred::cy#4 cy zp ZP_BYTE:4 150.375
(byte*) mode_sixsfred::gfxa
(byte*) mode_sixsfred::gfxa#1 gfxa zp ZP_WORD:2 420.59999999999997
(byte*) mode_sixsfred::gfxa#2 gfxa zp ZP_WORD:2 776.0
(byte*) mode_sixsfred::gfxa#3 gfxa zp ZP_WORD:2 202.0
(byte*) mode_sixsfred::gfxb
(byte*) mode_sixsfred::gfxb#1 gfxb zp ZP_WORD:2 420.59999999999997
(byte*) mode_sixsfred::gfxb#2 gfxb zp ZP_WORD:2 1552.0
(byte*) mode_sixsfred::gfxb#3 gfxb zp ZP_WORD:2 202.0
(byte) mode_sixsfred::i
(byte) mode_sixsfred::i#1 reg byte x 151.5
(byte) mode_sixsfred::i#2 reg byte x 202.0
(byte) mode_sixsfred::row
(byte) mode_sixsfred::row#0 reg byte a 2002.0
(byte[]) mode_sixsfred::row_bitmask
(const byte[]) mode_sixsfred::row_bitmask#0 row_bitmask = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $55, (byte/word/signed word/dword/signed dword) $aa, (byte/word/signed word/dword/signed dword) $ff }
(void()) mode_sixsfred2()
(byte~) mode_sixsfred2::$14 reg byte a 2002.0
(byte~) mode_sixsfred2::$15 $15 zp ZP_BYTE:7 1001.0
(byte~) mode_sixsfred2::$16 reg byte a 2002.0
(byte~) mode_sixsfred2::$17 reg byte a 2002.0
(byte~) mode_sixsfred2::$20 reg byte a 2002.0
(label) mode_sixsfred2::@1
(label) mode_sixsfred2::@11
(label) mode_sixsfred2::@13
(label) mode_sixsfred2::@14
(label) mode_sixsfred2::@2
(label) mode_sixsfred2::@3
(label) mode_sixsfred2::@4
(label) mode_sixsfred2::@5
(label) mode_sixsfred2::@6
(label) mode_sixsfred2::@7
(label) mode_sixsfred2::@8
(label) mode_sixsfred2::@9
(label) mode_sixsfred2::@return
(byte*) mode_sixsfred2::COLORS
(const byte*) mode_sixsfred2::COLORS#0 COLORS = ((byte*))(word/dword/signed dword) $8000
(byte*) mode_sixsfred2::PLANEA
(const byte*) mode_sixsfred2::PLANEA#0 PLANEA = ((byte*))(word/signed word/dword/signed dword) $4000
(byte*) mode_sixsfred2::PLANEB
(const byte*) mode_sixsfred2::PLANEB#0 PLANEB = ((byte*))(word/signed word/dword/signed dword) $6000
(byte) mode_sixsfred2::ax
(byte) mode_sixsfred2::ax#1 reg byte x 1501.5
(byte) mode_sixsfred2::ax#2 reg byte x 400.4
(byte) mode_sixsfred2::ay
(byte) mode_sixsfred2::ay#1 ay zp ZP_BYTE:4 151.5
(byte) mode_sixsfred2::ay#4 ay zp ZP_BYTE:4 150.375
(byte) mode_sixsfred2::bx
(byte) mode_sixsfred2::bx#1 reg byte x 1501.5
(byte) mode_sixsfred2::bx#2 reg byte x 667.3333333333334
(byte) mode_sixsfred2::by
(byte) mode_sixsfred2::by#1 by zp ZP_BYTE:4 151.5
(byte) mode_sixsfred2::by#4 by zp ZP_BYTE:4 33.666666666666664
(byte*) mode_sixsfred2::col
(byte*) mode_sixsfred2::col#1 col zp ZP_WORD:2 420.59999999999997
(byte*) mode_sixsfred2::col#2 col zp ZP_WORD:2 517.3333333333334
(byte*) mode_sixsfred2::col#3 col zp ZP_WORD:2 202.0
(byte) mode_sixsfred2::cx
(byte) mode_sixsfred2::cx#1 reg byte x 1501.5
(byte) mode_sixsfred2::cx#2 reg byte x 429.0
(byte) mode_sixsfred2::cy
(byte) mode_sixsfred2::cy#1 cy zp ZP_BYTE:4 151.5
(byte) mode_sixsfred2::cy#4 cy zp ZP_BYTE:4 120.29999999999998
(byte*) mode_sixsfred2::gfxa
(byte*) mode_sixsfred2::gfxa#1 gfxa zp ZP_WORD:2 420.59999999999997
(byte*) mode_sixsfred2::gfxa#2 gfxa zp ZP_WORD:2 776.0
(byte*) mode_sixsfred2::gfxa#3 gfxa zp ZP_WORD:2 202.0
(byte*) mode_sixsfred2::gfxb
(byte*) mode_sixsfred2::gfxb#1 gfxb zp ZP_WORD:2 420.59999999999997
(byte*) mode_sixsfred2::gfxb#2 gfxb zp ZP_WORD:2 1552.0
(byte*) mode_sixsfred2::gfxb#3 gfxb zp ZP_WORD:2 202.0
(byte) mode_sixsfred2::i
(byte) mode_sixsfred2::i#1 reg byte x 151.5
(byte) mode_sixsfred2::i#2 reg byte x 202.0
(byte) mode_sixsfred2::row
(byte) mode_sixsfred2::row#0 reg byte a 2002.0
(byte[]) mode_sixsfred2::row_bitmask
(const byte[]) mode_sixsfred2::row_bitmask#0 row_bitmask = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $55, (byte/word/signed word/dword/signed dword) $aa, (byte/word/signed word/dword/signed dword) $ff }
(void()) mode_stdbitmap()
(byte~) mode_stdbitmap::$19 reg byte a 2002.0
(byte~) mode_stdbitmap::$22 reg byte a 2002.0
(byte~) mode_stdbitmap::$23 reg byte a 2002.0
(label) mode_stdbitmap::@1
(label) mode_stdbitmap::@11
(label) mode_stdbitmap::@2
(label) mode_stdbitmap::@3
(label) mode_stdbitmap::@4
(label) mode_stdbitmap::@5
(label) mode_stdbitmap::@6
(label) mode_stdbitmap::@7
(label) mode_stdbitmap::@8
(label) mode_stdbitmap::@9
(label) mode_stdbitmap::@return
(byte*) mode_stdbitmap::BITMAP
(const byte*) mode_stdbitmap::BITMAP#0 BITMAP = ((byte*))(word/signed word/dword/signed dword) $6000
(byte*) mode_stdbitmap::SCREEN
(const byte*) mode_stdbitmap::SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) $4000
(byte*) mode_stdbitmap::ch
(byte*) mode_stdbitmap::ch#1 ch zp ZP_WORD:2 420.59999999999997
(byte*) mode_stdbitmap::ch#2 ch zp ZP_WORD:2 443.42857142857144
(byte*) mode_stdbitmap::ch#3 ch zp ZP_WORD:2 202.0
(byte) mode_stdbitmap::col
(byte) mode_stdbitmap::col#0 reg byte y 1501.5
(byte) mode_stdbitmap::col2
(byte) mode_stdbitmap::col2#0 col2 zp ZP_BYTE:7 1001.0
(byte) mode_stdbitmap::cx
(byte) mode_stdbitmap::cx#1 reg byte x 1501.5
(byte) mode_stdbitmap::cx#2 reg byte x 375.375
(byte) mode_stdbitmap::cy
(byte) mode_stdbitmap::cy#1 cy zp ZP_BYTE:4 151.5
(byte) mode_stdbitmap::cy#4 cy zp ZP_BYTE:4 109.36363636363637
(byte) mode_stdbitmap::i
(byte) mode_stdbitmap::i#1 reg byte x 151.5
(byte) mode_stdbitmap::i#2 reg byte x 202.0
(byte) mode_stdbitmap::l
(byte) mode_stdbitmap::l#1 l zp ZP_BYTE:4 151.5
(byte) mode_stdbitmap::l#2 l zp ZP_BYTE:4 100.99999999999999
(byte) mode_stdbitmap::lines_cnt
(const byte) mode_stdbitmap::lines_cnt#0 lines_cnt = (byte/signed byte/word/signed word/dword/signed dword) 9
(byte[]) mode_stdbitmap::lines_x
(const byte[]) mode_stdbitmap::lines_x#0 lines_x = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $ff, (byte/word/signed word/dword/signed dword) $ff, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $80, (byte/word/signed word/dword/signed dword) $ff, (byte/word/signed word/dword/signed dword) $80, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $80 }
(byte[]) mode_stdbitmap::lines_y
(const byte[]) mode_stdbitmap::lines_y#0 lines_y = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $c7, (byte/word/signed word/dword/signed dword) $c7, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $64, (byte/word/signed word/dword/signed dword) $c7, (byte/signed byte/word/signed word/dword/signed dword) $64, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(void()) mode_stdchar()
(byte~) mode_stdchar::$24 reg byte a 2002.0
(byte~) mode_stdchar::$25 reg byte a 2002.0
(byte~) mode_stdchar::$26 reg byte a 2002.0
(byte~) mode_stdchar::$27 $27 zp ZP_BYTE:7 1001.0
(byte~) mode_stdchar::$28 reg byte a 2002.0
(byte~) mode_stdchar::$29 reg byte a 2002.0
(label) mode_stdchar::@1
(label) mode_stdchar::@2
(label) mode_stdchar::@3
(label) mode_stdchar::@4
(label) mode_stdchar::@5
(label) mode_stdchar::@6
(label) mode_stdchar::@return
(byte*) mode_stdchar::CHARSET
(const byte*) mode_stdchar::CHARSET#0 CHARSET = ((byte*))(word/dword/signed dword) $9000
(byte*) mode_stdchar::COLORS
(const byte*) mode_stdchar::COLORS#0 COLORS = ((byte*))(word/dword/signed dword) $d800
(byte*) mode_stdchar::SCREEN
(const byte*) mode_stdchar::SCREEN#0 SCREEN = ((byte*))(word/dword/signed dword) $8000
(byte*) mode_stdchar::ch
(byte*) mode_stdchar::ch#1 ch zp ZP_WORD:5 420.59999999999997
(byte*) mode_stdchar::ch#2 ch zp ZP_WORD:5 310.4
(byte*) mode_stdchar::ch#3 ch zp ZP_WORD:5 202.0
(byte*) mode_stdchar::col
(byte*) mode_stdchar::col#1 col zp ZP_WORD:2 191.1818181818182
(byte*) mode_stdchar::col#2 col zp ZP_WORD:2 776.0
(byte*) mode_stdchar::col#3 col zp ZP_WORD:2 202.0
(byte) mode_stdchar::cx
(byte) mode_stdchar::cx#1 reg byte x 1501.5
(byte) mode_stdchar::cx#2 reg byte x 364.0
(byte) mode_stdchar::cy
(byte) mode_stdchar::cy#1 cy zp ZP_BYTE:4 151.5
(byte) mode_stdchar::cy#4 cy zp ZP_BYTE:4 157.42857142857144
(byte) mode_stdchar::i
(byte) mode_stdchar::i#1 reg byte x 151.5
(byte) mode_stdchar::i#2 reg byte x 202.0
(void()) mode_twoplanebitmap()
(byte~) mode_twoplanebitmap::$15 reg byte a 2002.0
(byte~) mode_twoplanebitmap::$16 $16 zp ZP_BYTE:7 1001.0
(byte~) mode_twoplanebitmap::$17 reg byte a 2002.0
(byte~) mode_twoplanebitmap::$18 reg byte a 2002.0
(byte~) mode_twoplanebitmap::$21 reg byte a 2002.0
(label) mode_twoplanebitmap::@1
(label) mode_twoplanebitmap::@10
(label) mode_twoplanebitmap::@11
(label) mode_twoplanebitmap::@13
(label) mode_twoplanebitmap::@15
(label) mode_twoplanebitmap::@17
(label) mode_twoplanebitmap::@18
(label) mode_twoplanebitmap::@2
(label) mode_twoplanebitmap::@3
(label) mode_twoplanebitmap::@4
(label) mode_twoplanebitmap::@5
(label) mode_twoplanebitmap::@6
(label) mode_twoplanebitmap::@7
(label) mode_twoplanebitmap::@8
(label) mode_twoplanebitmap::@9
(label) mode_twoplanebitmap::@return
(byte*) mode_twoplanebitmap::COLORS
(const byte*) mode_twoplanebitmap::COLORS#0 COLORS = ((byte*))(word/dword/signed dword) $8000
(byte*) mode_twoplanebitmap::PLANEA
(const byte*) mode_twoplanebitmap::PLANEA#0 PLANEA = ((byte*))(word/signed word/dword/signed dword) $4000
(byte*) mode_twoplanebitmap::PLANEB
(const byte*) mode_twoplanebitmap::PLANEB#0 PLANEB = ((byte*))(word/signed word/dword/signed dword) $6000
(byte) mode_twoplanebitmap::ax
(byte) mode_twoplanebitmap::ax#1 reg byte x 1501.5
(byte) mode_twoplanebitmap::ax#2 reg byte x 250.25
(byte) mode_twoplanebitmap::ay
(byte) mode_twoplanebitmap::ay#1 ay zp ZP_BYTE:4 151.5
(byte) mode_twoplanebitmap::ay#4 ay zp ZP_BYTE:4 109.36363636363637
(byte) mode_twoplanebitmap::bx
(byte) mode_twoplanebitmap::bx#1 reg byte x 1501.5
(byte) mode_twoplanebitmap::bx#2 reg byte x 667.3333333333334
(byte) mode_twoplanebitmap::by
(byte) mode_twoplanebitmap::by#1 by zp ZP_BYTE:4 151.5
(byte) mode_twoplanebitmap::by#4 by zp ZP_BYTE:4 33.666666666666664
(byte*) mode_twoplanebitmap::col
(byte*) mode_twoplanebitmap::col#1 col zp ZP_WORD:2 420.59999999999997
(byte*) mode_twoplanebitmap::col#2 col zp ZP_WORD:2 517.3333333333334
(byte*) mode_twoplanebitmap::col#3 col zp ZP_WORD:2 202.0
(byte) mode_twoplanebitmap::cx
(byte) mode_twoplanebitmap::cx#1 reg byte x 1501.5
(byte) mode_twoplanebitmap::cx#2 reg byte x 429.0
(byte) mode_twoplanebitmap::cy
(byte) mode_twoplanebitmap::cy#1 cy zp ZP_BYTE:4 151.5
(byte) mode_twoplanebitmap::cy#4 cy zp ZP_BYTE:4 120.29999999999998
(byte*) mode_twoplanebitmap::gfxa
(byte*) mode_twoplanebitmap::gfxa#1 gfxa zp ZP_WORD:2 2002.0
(byte*) mode_twoplanebitmap::gfxa#2 gfxa zp ZP_WORD:2 2002.0
(byte*) mode_twoplanebitmap::gfxa#3 gfxa zp ZP_WORD:2 1021.2
(byte*) mode_twoplanebitmap::gfxa#6 gfxa zp ZP_WORD:2 202.0
(byte*) mode_twoplanebitmap::gfxa#7 gfxa zp ZP_WORD:2 620.8
(byte*) mode_twoplanebitmap::gfxb
(byte*) mode_twoplanebitmap::gfxb#1 gfxb zp ZP_WORD:2 420.59999999999997
(byte*) mode_twoplanebitmap::gfxb#2 gfxb zp ZP_WORD:2 1552.0
(byte*) mode_twoplanebitmap::gfxb#3 gfxb zp ZP_WORD:2 202.0
(byte) mode_twoplanebitmap::i
(byte) mode_twoplanebitmap::i#1 reg byte x 151.5
(byte) mode_twoplanebitmap::i#2 reg byte x 202.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:5 2002.0
(byte*~) print_char_cursor#103 print_char_cursor zp ZP_WORD:5 202.0
(byte*) print_char_cursor#17 print_char_cursor zp ZP_WORD:5 821.0
(byte*) print_char_cursor#19 print_char_cursor zp ZP_WORD:5 101.0
(byte*) print_char_cursor#32 print_char_cursor zp ZP_WORD:5 572.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:2 151.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:2 151.5
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#17 print_line_cursor zp ZP_WORD:13 8.583333333333332
(byte*) print_line_cursor#18 print_line_cursor zp ZP_WORD:13 2004.0
(byte*) print_line_cursor#19 print_line_cursor zp ZP_WORD:13 641.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_set_screen((byte*) print_set_screen::screen)
(label) print_set_screen::@return
(byte*) print_set_screen::screen
(void()) print_str_lines((byte*) print_str_lines::str)
(label) print_str_lines::@1
(label) print_str_lines::@4
(label) print_str_lines::@5
(label) print_str_lines::@8
(label) print_str_lines::@9
(label) print_str_lines::@return
(byte) print_str_lines::ch
(byte) print_str_lines::ch#0 reg byte a 667.3333333333334
(byte*) print_str_lines::str
(byte*) print_str_lines::str#0 str zp ZP_WORD:2 233.66666666666669
(byte*) print_str_lines::str#2 str zp ZP_WORD:2 151.5
(byte*) print_str_lines::str#3 str zp ZP_WORD:2 1552.0

reg byte x [ menu::i#2 menu::i#1 ]
zp ZP_WORD:2 [ menu::c#2 menu::c#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#1 bitmap_plot::plotter_x#0 bitmap_plot::$0 ]
reg byte x [ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ]
zp ZP_BYTE:4 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 dtv_control#114 dtv_control#145 dtv_control#17 mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 mode_sixsfred2::by#4 mode_sixsfred2::by#1 mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 mode_stdbitmap::l#2 mode_stdbitmap::l#1 bitmap_clear::y#4 bitmap_clear::y#1 mode_mcchar::cy#4 mode_mcchar::cy#1 mode_ecmchar::cy#4 mode_ecmchar::cy#1 mode_stdchar::cy#4 mode_stdchar::cy#1 bitmap_init::$6 ]
reg byte x [ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ]
zp ZP_WORD:5 [ mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 print_char_cursor#17 print_char_cursor#19 print_char_cursor#103 print_char_cursor#32 print_char_cursor#1 bitmap_plot::plotter_y#0 ]
reg byte x [ mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ]
reg byte y [ keyboard_key_pressed::key#20 ]
reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ]
reg byte x [ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ]
reg byte x [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ]
zp ZP_BYTE:7 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#0 bitmap_line_ydxi::yd#1 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line::yd#1 bitmap_line::yd#10 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 keyboard_key_pressed::colidx#0 mode_8bpppixelcell::$14 mode_twoplanebitmap::$16 mode_sixsfred2::$15 mode_hicolmcchar::$26 mode_hicolecmchar::$26 mode_hicolstdchar::$25 mode_stdbitmap::col2#0 mode_mcchar::$28 mode_ecmchar::$28 mode_stdchar::$27 ]
zp ZP_BYTE:8 [ mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#0 mode_8bpppixelcell::bits#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#0 bitmap_line_ydxi::xd#1 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
zp ZP_BYTE:9 [ mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x0#0 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
reg byte x [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ]
reg byte a [ mode_8bpppixelcell::c#2 mode_8bpppixelcell::c#3 ]
reg byte x [ mode_sixsfred::i#2 mode_sixsfred::i#1 ]
reg byte x [ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ]
reg byte x [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ]
reg byte x [ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ]
reg byte x [ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ]
reg byte x [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ]
reg byte x [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
reg byte x [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
reg byte x [ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ]
reg byte x [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ]
reg byte x [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ]
reg byte x [ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ]
reg byte x [ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ]
reg byte x [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ]
reg byte x [ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ]
reg byte x [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ]
reg byte x [ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ]
reg byte x [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ]
reg byte x [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ]
reg byte x [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ]
zp ZP_BYTE:10 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#2 bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
zp ZP_BYTE:11 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line::y0#0 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#0 bitmap_line_ydxi::y1#1 bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
zp ZP_BYTE:12 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 bitmap_line::x1#0 ]
reg byte x [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
reg byte y [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
reg byte x [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
reg byte x [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte y [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
reg byte x [ mode_mcchar::i#2 mode_mcchar::i#1 ]
reg byte x [ mode_mcchar::cx#2 mode_mcchar::cx#1 ]
reg byte x [ mode_ecmchar::i#2 mode_ecmchar::i#1 ]
reg byte x [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ]
reg byte x [ mode_stdchar::i#2 mode_stdchar::i#1 ]
reg byte x [ mode_stdchar::cx#2 mode_stdchar::cx#1 ]
zp ZP_WORD:13 [ print_line_cursor#18 print_line_cursor#17 print_line_cursor#19 mode_8bppchunkybmm::$23 ]
reg byte a [ keyboard_key_pressed::return#2 ]
reg byte a [ menu::$29 ]
reg byte a [ keyboard_key_pressed::return#24 ]
reg byte a [ menu::$33 ]
reg byte a [ keyboard_key_pressed::return#25 ]
reg byte a [ menu::$37 ]
reg byte a [ keyboard_key_pressed::return#26 ]
reg byte a [ menu::$41 ]
reg byte a [ keyboard_key_pressed::return#27 ]
reg byte a [ menu::$45 ]
reg byte a [ keyboard_key_pressed::return#28 ]
reg byte a [ menu::$49 ]
reg byte a [ keyboard_key_pressed::return#29 ]
reg byte a [ menu::$53 ]
reg byte a [ keyboard_key_pressed::return#30 ]
reg byte a [ menu::$57 ]
reg byte a [ keyboard_key_pressed::return#10 ]
reg byte a [ menu::$61 ]
reg byte a [ keyboard_key_pressed::return#11 ]
reg byte a [ menu::$65 ]
reg byte a [ keyboard_key_pressed::return#12 ]
reg byte a [ menu::$69 ]
reg byte a [ keyboard_key_pressed::return#13 ]
reg byte a [ menu::$73 ]
reg byte a [ mode_8bppchunkybmm::c#0 ]
reg byte a [ keyboard_key_pressed::return#14 ]
reg byte a [ mode_ctrl::$1 ]
reg byte a [ keyboard_key_pressed::return#15 ]
reg byte a [ mode_ctrl::$4 ]
reg byte a [ keyboard_key_pressed::return#16 ]
reg byte a [ mode_ctrl::$8 ]
reg byte a [ keyboard_key_pressed::return#17 ]
reg byte a [ mode_ctrl::$12 ]
reg byte a [ keyboard_key_pressed::return#18 ]
reg byte a [ mode_ctrl::$16 ]
reg byte a [ keyboard_key_pressed::return#19 ]
reg byte a [ mode_ctrl::$20 ]
reg byte a [ keyboard_key_pressed::return#20 ]
reg byte a [ mode_ctrl::$24 ]
reg byte a [ keyboard_key_pressed::return#21 ]
reg byte a [ mode_ctrl::$28 ]
reg byte a [ keyboard_key_pressed::rowidx#0 ]
reg byte y [ keyboard_matrix_read::rowid#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_key_pressed::$2 ]
reg byte a [ keyboard_key_pressed::return#0 ]
reg byte a [ keyboard_matrix_read::return#0 ]
reg byte a [ mode_8bpppixelcell::$13 ]
reg byte a [ mode_8bpppixelcell::$15 ]
reg byte a [ mode_8bpppixelcell::$16 ]
reg byte a [ mode_8bpppixelcell::$19 ]
reg byte a [ mode_sixsfred::$16 ]
reg byte a [ mode_sixsfred::$17 ]
reg byte a [ mode_sixsfred::$20 ]
reg byte a [ mode_sixsfred::row#0 ]
reg byte a [ mode_twoplanebitmap::$15 ]
reg byte a [ mode_twoplanebitmap::$17 ]
reg byte a [ mode_twoplanebitmap::$18 ]
reg byte a [ mode_twoplanebitmap::$21 ]
reg byte a [ mode_sixsfred2::$14 ]
reg byte a [ mode_sixsfred2::$16 ]
reg byte a [ mode_sixsfred2::$17 ]
reg byte a [ mode_sixsfred2::$20 ]
reg byte a [ mode_sixsfred2::row#0 ]
reg byte a [ mode_hicolmcchar::$25 ]
reg byte a [ mode_hicolmcchar::$27 ]
reg byte a [ mode_hicolmcchar::v#0 ]
reg byte a [ mode_hicolecmchar::$25 ]
reg byte a [ mode_hicolecmchar::$27 ]
reg byte a [ mode_hicolecmchar::v#0 ]
reg byte a [ mode_hicolstdchar::$24 ]
reg byte a [ mode_hicolstdchar::$26 ]
reg byte a [ mode_hicolstdchar::v#0 ]
reg byte a [ mode_stdbitmap::$19 ]
reg byte y [ mode_stdbitmap::col#0 ]
reg byte a [ mode_stdbitmap::$22 ]
reg byte a [ mode_stdbitmap::$23 ]
reg byte y [ bitmap_line::y1#0 ]
reg byte x [ bitmap_line_xdyi::$6 ]
reg byte a [ bitmap_plot::$1 ]
reg byte a [ bitmap_line_ydxi::$6 ]
reg byte x [ bitmap_line_xdyd::$6 ]
reg byte a [ bitmap_line_ydxd::$6 ]
reg byte a [ bitmap_init::$0 ]
reg byte a [ bitmap_init::$7 ]
reg byte a [ bitmap_init::$8 ]
reg byte a [ bitmap_init::$9 ]
reg byte a [ bitmap_init::$10 ]
reg byte a [ mode_mcchar::$25 ]
reg byte a [ mode_mcchar::$26 ]
reg byte a [ mode_mcchar::$27 ]
reg byte a [ mode_mcchar::$29 ]
reg byte a [ mode_mcchar::$30 ]
reg byte a [ mode_ecmchar::$25 ]
reg byte a [ mode_ecmchar::$26 ]
reg byte a [ mode_ecmchar::$27 ]
reg byte a [ mode_ecmchar::$29 ]
reg byte a [ mode_ecmchar::$30 ]
reg byte a [ mode_stdchar::$24 ]
reg byte a [ mode_stdchar::$25 ]
reg byte a [ mode_stdchar::$26 ]
reg byte a [ mode_stdchar::$28 ]
reg byte a [ mode_stdchar::$29 ]
reg byte a [ print_str_lines::ch#0 ]


FINAL ASSEMBLER
Score: 2306072

//SEG0 File Comments
// Exploring C64DTV Screen Modes
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  // RAM in $A000, $E000 CHAR ROM in $D000
  .const PROCPORT_RAM_CHARROM = $31
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  // Color Ram
  .label COLS = $d800
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CIA1_PORT_B = $dc01
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  // The colors of the C64
  .const BLACK = 0
  .const GREEN = 5
  .const BLUE = 6
  .const LIGHT_GREEN = $d
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  .const DTV_LINEAR = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_OVERSCAN = 8
  .const DTV_COLORRAM_OFF = $10
  .const DTV_CHUNKY = $40
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // Linear Graphics Plane A Counter Control
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  // Linear Graphics Plane B Counter Control
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  // Select memory bank where color data is fetched from (bits 11:0)
  // Memory address of Color RAM is ColorBank*$400
  .label DTV_COLOR_BANK_LO = $d036
  .label DTV_COLOR_BANK_HI = $d037
  .const DTV_COLOR_BANK_DEFAULT = $1d800
  // Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
  // Memory address of VIC Graphics is GraphicsBank*$10000
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  .const KEY_3 = 8
  .const KEY_A = $a
  .const KEY_4 = $b
  .const KEY_E = $e
  .const KEY_D = $12
  .const KEY_6 = $13
  .const KEY_C = $14
  .const KEY_7 = $18
  .const KEY_8 = $1b
  .const KEY_B = $1c
  .const KEY_H = $1d
  .const KEY_U = $1e
  .const KEY_0 = $23
  .const KEY_O = $26
  .const KEY_L = $2a
  .const KEY_1 = $38
  .const KEY_2 = $3b
  .const KEY_SPACE = $3c
  .label print_char_cursor = 5
  .label dtv_control = 4
  .label print_line_cursor = $d
//SEG3 @begin
//SEG4 [1] phi from @begin to @54 [phi:@begin->@54]
//SEG5 @54
//SEG6 [2] call main 
//SEG7 [3] phi from @54 to @end [phi:@54->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 asm { sei  }
    sei
  //SEG11 [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt (prevent keyboard reading glitches and allows to hide basic/kernal)
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG12 [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG13 [7] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 -- _deref_pbuc1=vbuc2 
    // Enable DTV extended modes
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
  //SEG14 [8] phi from main main::@2 to main::@2 [phi:main/main::@2->main::@2]
  //SEG15 main::@2
  b2:
  //SEG16 [9] call menu 
    jsr menu
    jmp b2
}
//SEG17 menu
menu: {
    .label SCREEN = $8000
    .label CHARSET = $9800
    .label c = 2
  //SEG18 [10] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) menu::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // Charset ROM
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG19 [11] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
  //SEG20 [12] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG21 [13] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Mode
    sta DTV_CONTROL
  //SEG22 [14] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG23 [15] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) menu::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG24 [16] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG25 [17] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG26 [18] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) menu::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) menu::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG27 [19] phi from menu to menu::@1 [phi:menu->menu::@1]
  //SEG28 [19] phi (byte) menu::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:menu->menu::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - default
  //SEG29 [19] phi from menu::@1 to menu::@1 [phi:menu::@1->menu::@1]
  //SEG30 [19] phi (byte) menu::i#2 = (byte) menu::i#1 [phi:menu::@1->menu::@1#0] -- register_copy 
  //SEG31 menu::@1
  b1:
  //SEG32 [20] *((const byte*) DTV_PALETTE#0 + (byte) menu::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) menu::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
  //SEG33 [21] (byte) menu::i#1 ← ++ (byte) menu::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG34 [22] if((byte) menu::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto menu::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG35 [23] phi from menu::@1 to menu::@2 [phi:menu::@1->menu::@2]
  //SEG36 [23] phi (byte*) menu::c#2 = (const byte*) COLS#0 [phi:menu::@1->menu::@2#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta c
    lda #>COLS
    sta c+1
  // Char Colors
  //SEG37 [23] phi from menu::@2 to menu::@2 [phi:menu::@2->menu::@2]
  //SEG38 [23] phi (byte*) menu::c#2 = (byte*) menu::c#1 [phi:menu::@2->menu::@2#0] -- register_copy 
  //SEG39 menu::@2
  b2:
  //SEG40 [24] *((byte*) menu::c#2) ← (const byte) LIGHT_GREEN#0 -- _deref_pbuz1=vbuc1 
    lda #LIGHT_GREEN
    ldy #0
    sta (c),y
  //SEG41 [25] (byte*) menu::c#1 ← ++ (byte*) menu::c#2 -- pbuz1=_inc_pbuz1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG42 [26] if((byte*) menu::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) $3e8) goto menu::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda c+1
    cmp #>COLS+$3e8
    bne b2
    lda c
    cmp #<COLS+$3e8
    bne b2
  //SEG43 menu::@19
  //SEG44 [27] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BGCOL
  //SEG45 [28] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta BORDERCOL
  //SEG46 [29] call print_set_screen 
  //SEG47 [891] phi from menu::@19 to print_set_screen [phi:menu::@19->print_set_screen]
    jsr print_set_screen
  //SEG48 [30] phi from menu::@19 to menu::@47 [phi:menu::@19->menu::@47]
  //SEG49 menu::@47
  //SEG50 [31] call print_cls 
  //SEG51 [885] phi from menu::@47 to print_cls [phi:menu::@47->print_cls]
    jsr print_cls
  //SEG52 [32] phi from menu::@47 to menu::@48 [phi:menu::@47->menu::@48]
  //SEG53 menu::@48
  //SEG54 [33] call print_str_lines 
  //SEG55 [865] phi from menu::@48 to print_str_lines [phi:menu::@48->print_str_lines]
    jsr print_str_lines
  //SEG56 [34] phi from menu::@48 menu::@71 to menu::@4 [phi:menu::@48/menu::@71->menu::@4]
  //SEG57 menu::@4
  b4:
  //SEG58 [35] call keyboard_key_pressed 
  //SEG59 [211] phi from menu::@4 to keyboard_key_pressed [phi:menu::@4->keyboard_key_pressed]
  //SEG60 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_1#0 [phi:menu::@4->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_1
    jsr keyboard_key_pressed
  //SEG61 [36] (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#0
  //SEG62 menu::@50
  //SEG63 [37] (byte~) menu::$29 ← (byte) keyboard_key_pressed::return#2
  //SEG64 [38] if((byte~) menu::$29==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b6
  //SEG65 [39] phi from menu::@50 to menu::@22 [phi:menu::@50->menu::@22]
  //SEG66 menu::@22
  //SEG67 [40] call mode_stdchar 
    jsr mode_stdchar
  //SEG68 menu::@return
  breturn:
  //SEG69 [41] return 
    rts
  //SEG70 [42] phi from menu::@50 to menu::@6 [phi:menu::@50->menu::@6]
  //SEG71 menu::@6
  b6:
  //SEG72 [43] call keyboard_key_pressed 
  //SEG73 [211] phi from menu::@6 to keyboard_key_pressed [phi:menu::@6->keyboard_key_pressed]
  //SEG74 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_2#0 [phi:menu::@6->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_2
    jsr keyboard_key_pressed
  //SEG75 [44] (byte) keyboard_key_pressed::return#24 ← (byte) keyboard_key_pressed::return#0
  //SEG76 menu::@51
  //SEG77 [45] (byte~) menu::$33 ← (byte) keyboard_key_pressed::return#24
  //SEG78 [46] if((byte~) menu::$33==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@7 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b7
  //SEG79 [47] phi from menu::@51 to menu::@24 [phi:menu::@51->menu::@24]
  //SEG80 menu::@24
  //SEG81 [48] call mode_ecmchar 
    jsr mode_ecmchar
    jmp breturn
  //SEG82 [49] phi from menu::@51 to menu::@7 [phi:menu::@51->menu::@7]
  //SEG83 menu::@7
  b7:
  //SEG84 [50] call keyboard_key_pressed 
  //SEG85 [211] phi from menu::@7 to keyboard_key_pressed [phi:menu::@7->keyboard_key_pressed]
  //SEG86 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_3#0 [phi:menu::@7->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_3
    jsr keyboard_key_pressed
  //SEG87 [51] (byte) keyboard_key_pressed::return#25 ← (byte) keyboard_key_pressed::return#0
  //SEG88 menu::@53
  //SEG89 [52] (byte~) menu::$37 ← (byte) keyboard_key_pressed::return#25
  //SEG90 [53] if((byte~) menu::$37==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@8 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b8
  //SEG91 [54] phi from menu::@53 to menu::@26 [phi:menu::@53->menu::@26]
  //SEG92 menu::@26
  //SEG93 [55] call mode_mcchar 
    jsr mode_mcchar
    jmp breturn
  //SEG94 [56] phi from menu::@53 to menu::@8 [phi:menu::@53->menu::@8]
  //SEG95 menu::@8
  b8:
  //SEG96 [57] call keyboard_key_pressed 
  //SEG97 [211] phi from menu::@8 to keyboard_key_pressed [phi:menu::@8->keyboard_key_pressed]
  //SEG98 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_4#0 [phi:menu::@8->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_4
    jsr keyboard_key_pressed
  //SEG99 [58] (byte) keyboard_key_pressed::return#26 ← (byte) keyboard_key_pressed::return#0
  //SEG100 menu::@55
  //SEG101 [59] (byte~) menu::$41 ← (byte) keyboard_key_pressed::return#26
  //SEG102 [60] if((byte~) menu::$41==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@9 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b9
  //SEG103 [61] phi from menu::@55 to menu::@28 [phi:menu::@55->menu::@28]
  //SEG104 menu::@28
  //SEG105 [62] call mode_stdbitmap 
    jsr mode_stdbitmap
    jmp breturn
  //SEG106 [63] phi from menu::@55 to menu::@9 [phi:menu::@55->menu::@9]
  //SEG107 menu::@9
  b9:
  //SEG108 [64] call keyboard_key_pressed 
  //SEG109 [211] phi from menu::@9 to keyboard_key_pressed [phi:menu::@9->keyboard_key_pressed]
  //SEG110 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_6#0 [phi:menu::@9->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_6
    jsr keyboard_key_pressed
  //SEG111 [65] (byte) keyboard_key_pressed::return#27 ← (byte) keyboard_key_pressed::return#0
  //SEG112 menu::@57
  //SEG113 [66] (byte~) menu::$45 ← (byte) keyboard_key_pressed::return#27
  //SEG114 [67] if((byte~) menu::$45==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b10
  //SEG115 [68] phi from menu::@57 to menu::@30 [phi:menu::@57->menu::@30]
  //SEG116 menu::@30
  //SEG117 [69] call mode_hicolstdchar 
    jsr mode_hicolstdchar
    jmp breturn
  //SEG118 [70] phi from menu::@57 to menu::@10 [phi:menu::@57->menu::@10]
  //SEG119 menu::@10
  b10:
  //SEG120 [71] call keyboard_key_pressed 
  //SEG121 [211] phi from menu::@10 to keyboard_key_pressed [phi:menu::@10->keyboard_key_pressed]
  //SEG122 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_7#0 [phi:menu::@10->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_7
    jsr keyboard_key_pressed
  //SEG123 [72] (byte) keyboard_key_pressed::return#28 ← (byte) keyboard_key_pressed::return#0
  //SEG124 menu::@59
  //SEG125 [73] (byte~) menu::$49 ← (byte) keyboard_key_pressed::return#28
  //SEG126 [74] if((byte~) menu::$49==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b11
  //SEG127 [75] phi from menu::@59 to menu::@32 [phi:menu::@59->menu::@32]
  //SEG128 menu::@32
  //SEG129 [76] call mode_hicolecmchar 
    jsr mode_hicolecmchar
    jmp breturn
  //SEG130 [77] phi from menu::@59 to menu::@11 [phi:menu::@59->menu::@11]
  //SEG131 menu::@11
  b11:
  //SEG132 [78] call keyboard_key_pressed 
  //SEG133 [211] phi from menu::@11 to keyboard_key_pressed [phi:menu::@11->keyboard_key_pressed]
  //SEG134 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_8#0 [phi:menu::@11->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_8
    jsr keyboard_key_pressed
  //SEG135 [79] (byte) keyboard_key_pressed::return#29 ← (byte) keyboard_key_pressed::return#0
  //SEG136 menu::@61
  //SEG137 [80] (byte~) menu::$53 ← (byte) keyboard_key_pressed::return#29
  //SEG138 [81] if((byte~) menu::$53==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@12 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b12
  //SEG139 [82] phi from menu::@61 to menu::@34 [phi:menu::@61->menu::@34]
  //SEG140 menu::@34
  //SEG141 [83] call mode_hicolmcchar 
    jsr mode_hicolmcchar
    jmp breturn
  //SEG142 [84] phi from menu::@61 to menu::@12 [phi:menu::@61->menu::@12]
  //SEG143 menu::@12
  b12:
  //SEG144 [85] call keyboard_key_pressed 
  //SEG145 [211] phi from menu::@12 to keyboard_key_pressed [phi:menu::@12->keyboard_key_pressed]
  //SEG146 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_A#0 [phi:menu::@12->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_A
    jsr keyboard_key_pressed
  //SEG147 [86] (byte) keyboard_key_pressed::return#30 ← (byte) keyboard_key_pressed::return#0
  //SEG148 menu::@63
  //SEG149 [87] (byte~) menu::$57 ← (byte) keyboard_key_pressed::return#30
  //SEG150 [88] if((byte~) menu::$57==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@13 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b13
  //SEG151 [89] phi from menu::@63 to menu::@36 [phi:menu::@63->menu::@36]
  //SEG152 menu::@36
  //SEG153 [90] call mode_sixsfred2 
    jsr mode_sixsfred2
    jmp breturn
  //SEG154 [91] phi from menu::@63 to menu::@13 [phi:menu::@63->menu::@13]
  //SEG155 menu::@13
  b13:
  //SEG156 [92] call keyboard_key_pressed 
  //SEG157 [211] phi from menu::@13 to keyboard_key_pressed [phi:menu::@13->keyboard_key_pressed]
  //SEG158 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_B#0 [phi:menu::@13->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_B
    jsr keyboard_key_pressed
  //SEG159 [93] (byte) keyboard_key_pressed::return#10 ← (byte) keyboard_key_pressed::return#0
  //SEG160 menu::@65
  //SEG161 [94] (byte~) menu::$61 ← (byte) keyboard_key_pressed::return#10
  //SEG162 [95] if((byte~) menu::$61==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@14 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b14
  //SEG163 [96] phi from menu::@65 to menu::@38 [phi:menu::@65->menu::@38]
  //SEG164 menu::@38
  //SEG165 [97] call mode_twoplanebitmap 
    jsr mode_twoplanebitmap
    jmp breturn
  //SEG166 [98] phi from menu::@65 to menu::@14 [phi:menu::@65->menu::@14]
  //SEG167 menu::@14
  b14:
  //SEG168 [99] call keyboard_key_pressed 
  //SEG169 [211] phi from menu::@14 to keyboard_key_pressed [phi:menu::@14->keyboard_key_pressed]
  //SEG170 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_C#0 [phi:menu::@14->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_C
    jsr keyboard_key_pressed
  //SEG171 [100] (byte) keyboard_key_pressed::return#11 ← (byte) keyboard_key_pressed::return#0
  //SEG172 menu::@67
  //SEG173 [101] (byte~) menu::$65 ← (byte) keyboard_key_pressed::return#11
  //SEG174 [102] if((byte~) menu::$65==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@15 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b15
  //SEG175 [103] phi from menu::@67 to menu::@40 [phi:menu::@67->menu::@40]
  //SEG176 menu::@40
  //SEG177 [104] call mode_sixsfred 
    jsr mode_sixsfred
    jmp breturn
  //SEG178 [105] phi from menu::@67 to menu::@15 [phi:menu::@67->menu::@15]
  //SEG179 menu::@15
  b15:
  //SEG180 [106] call keyboard_key_pressed 
  //SEG181 [211] phi from menu::@15 to keyboard_key_pressed [phi:menu::@15->keyboard_key_pressed]
  //SEG182 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_D#0 [phi:menu::@15->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_D
    jsr keyboard_key_pressed
  //SEG183 [107] (byte) keyboard_key_pressed::return#12 ← (byte) keyboard_key_pressed::return#0
  //SEG184 menu::@69
  //SEG185 [108] (byte~) menu::$69 ← (byte) keyboard_key_pressed::return#12
  //SEG186 [109] if((byte~) menu::$69==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@16 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b16
  //SEG187 [110] phi from menu::@69 to menu::@42 [phi:menu::@69->menu::@42]
  //SEG188 menu::@42
  //SEG189 [111] call mode_8bpppixelcell 
    jsr mode_8bpppixelcell
    jmp breturn
  //SEG190 [112] phi from menu::@69 to menu::@16 [phi:menu::@69->menu::@16]
  //SEG191 menu::@16
  b16:
  //SEG192 [113] call keyboard_key_pressed 
  //SEG193 [211] phi from menu::@16 to keyboard_key_pressed [phi:menu::@16->keyboard_key_pressed]
  //SEG194 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_E#0 [phi:menu::@16->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_E
    jsr keyboard_key_pressed
  //SEG195 [114] (byte) keyboard_key_pressed::return#13 ← (byte) keyboard_key_pressed::return#0
  //SEG196 menu::@71
  //SEG197 [115] (byte~) menu::$73 ← (byte) keyboard_key_pressed::return#13
  //SEG198 [116] if((byte~) menu::$73==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    bne !b4+
    jmp b4
  !b4:
  //SEG199 [117] phi from menu::@71 to menu::@44 [phi:menu::@71->menu::@44]
  //SEG200 menu::@44
  //SEG201 [118] call mode_8bppchunkybmm 
    jsr mode_8bppchunkybmm
    jmp breturn
}
//SEG202 mode_8bppchunkybmm
//Chunky 8bpp Bitmap Mode (BMM = 0, ECM/MCM/HICOL/LINEAR/CHUNK/COLDIS = 1)
// Resolution: 320x200
// Linear Adressing
// CharData/PlaneB Pixel Shifter (8):
// - 8bpp color PlaneB[7:0]
// To set up a linear video frame buffer the step size must be set to 8.
mode_8bppchunkybmm: {
    // 8BPP Chunky Bitmap (contains 8bpp pixels)
    .const PLANEB = $20000
    .label _23 = $d
    .label gfxb = 5
    .label x = 2
    .label y = 4
  //SEG203 [119] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_COLORRAM_OFF#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF
    sta DTV_CONTROL
  //SEG204 [120] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG205 [121] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG206 [122] *((const byte*) DTV_PLANEB_START_LO#0) ← <<(const dword) mode_8bppchunkybmm::PLANEB#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #PLANEB&$ffff
    sta DTV_PLANEB_START_LO
  //SEG207 [123] *((const byte*) DTV_PLANEB_START_MI#0) ← ><(const dword) mode_8bppchunkybmm::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_MI
  //SEG208 [124] *((const byte*) DTV_PLANEB_START_HI#0) ← <>(const dword) mode_8bppchunkybmm::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #PLANEB>>$10
    sta DTV_PLANEB_START_HI
  //SEG209 [125] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 8 -- _deref_pbuc1=vbuc2 
    lda #8
    sta DTV_PLANEB_STEP
  //SEG210 [126] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG211 [127] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_MODULO_HI
  //SEG212 [128] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Border color
    sta BORDERCOL
  //SEG213 [129] phi from mode_8bppchunkybmm to mode_8bppchunkybmm::@1 [phi:mode_8bppchunkybmm->mode_8bppchunkybmm::@1]
  //SEG214 [129] phi (byte) mode_8bppchunkybmm::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bppchunkybmm->mode_8bppchunkybmm::@1#0] -- vbuxx=vbuc1 
    tax
  // DTV Palette - Grey Tones
  //SEG215 [129] phi from mode_8bppchunkybmm::@1 to mode_8bppchunkybmm::@1 [phi:mode_8bppchunkybmm::@1->mode_8bppchunkybmm::@1]
  //SEG216 [129] phi (byte) mode_8bppchunkybmm::i#2 = (byte) mode_8bppchunkybmm::i#1 [phi:mode_8bppchunkybmm::@1->mode_8bppchunkybmm::@1#0] -- register_copy 
  //SEG217 mode_8bppchunkybmm::@1
  b1:
  //SEG218 [130] *((const byte*) DTV_PALETTE#0 + (byte) mode_8bppchunkybmm::i#2) ← (byte) mode_8bppchunkybmm::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG219 [131] (byte) mode_8bppchunkybmm::i#1 ← ++ (byte) mode_8bppchunkybmm::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG220 [132] if((byte) mode_8bppchunkybmm::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_8bppchunkybmm::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG221 [133] phi from mode_8bppchunkybmm::@1 to mode_8bppchunkybmm::@5 [phi:mode_8bppchunkybmm::@1->mode_8bppchunkybmm::@5]
  //SEG222 mode_8bppchunkybmm::@5
  //SEG223 [134] call dtvSetCpuBankSegment1 
  //SEG224 [223] phi from mode_8bppchunkybmm::@5 to dtvSetCpuBankSegment1 [phi:mode_8bppchunkybmm::@5->dtvSetCpuBankSegment1]
  //SEG225 [223] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = ((byte))(const dword) mode_8bppchunkybmm::PLANEB#0/(word/signed word/dword/signed dword) $4000 [phi:mode_8bppchunkybmm::@5->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #PLANEB/$4000
    jsr dtvSetCpuBankSegment1
  //SEG226 [135] phi from mode_8bppchunkybmm::@5 to mode_8bppchunkybmm::@2 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@2]
  //SEG227 [135] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#7 = ++((byte))(const dword) mode_8bppchunkybmm::PLANEB#0/(word/signed word/dword/signed dword) $4000 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@2#0] -- vbuxx=vbuc1 
    ldx #PLANEB/$4000+1
  //SEG228 [135] phi (byte) mode_8bppchunkybmm::y#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG229 [135] phi (byte*) mode_8bppchunkybmm::gfxb#5 = ((byte*))(word/signed word/dword/signed dword) $4000 [phi:mode_8bppchunkybmm::@5->mode_8bppchunkybmm::@2#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
  //SEG230 [135] phi from mode_8bppchunkybmm::@7 to mode_8bppchunkybmm::@2 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@2]
  //SEG231 [135] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#7 = (byte) mode_8bppchunkybmm::gfxbCpuBank#8 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@2#0] -- register_copy 
  //SEG232 [135] phi (byte) mode_8bppchunkybmm::y#6 = (byte) mode_8bppchunkybmm::y#1 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@2#1] -- register_copy 
  //SEG233 [135] phi (byte*) mode_8bppchunkybmm::gfxb#5 = (byte*) mode_8bppchunkybmm::gfxb#1 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@2#2] -- register_copy 
  //SEG234 mode_8bppchunkybmm::@2
  b2:
  //SEG235 [136] phi from mode_8bppchunkybmm::@2 to mode_8bppchunkybmm::@3 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3]
  //SEG236 [136] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#4 = (byte) mode_8bppchunkybmm::gfxbCpuBank#7 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3#0] -- register_copy 
  //SEG237 [136] phi (word) mode_8bppchunkybmm::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3#1] -- vwuz1=vbuc1 
    lda #<0
    sta x
    sta x+1
  //SEG238 [136] phi (byte*) mode_8bppchunkybmm::gfxb#3 = (byte*) mode_8bppchunkybmm::gfxb#5 [phi:mode_8bppchunkybmm::@2->mode_8bppchunkybmm::@3#2] -- register_copy 
  //SEG239 [136] phi from mode_8bppchunkybmm::@4 to mode_8bppchunkybmm::@3 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@3]
  //SEG240 [136] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#4 = (byte) mode_8bppchunkybmm::gfxbCpuBank#8 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@3#0] -- register_copy 
  //SEG241 [136] phi (word) mode_8bppchunkybmm::x#2 = (word) mode_8bppchunkybmm::x#1 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@3#1] -- register_copy 
  //SEG242 [136] phi (byte*) mode_8bppchunkybmm::gfxb#3 = (byte*) mode_8bppchunkybmm::gfxb#1 [phi:mode_8bppchunkybmm::@4->mode_8bppchunkybmm::@3#2] -- register_copy 
  //SEG243 mode_8bppchunkybmm::@3
  b3:
  //SEG244 [137] if((byte*) mode_8bppchunkybmm::gfxb#3!=(word/dword/signed dword) $8000) goto mode_8bppchunkybmm::@4 -- pbuz1_neq_vwuc1_then_la1 
    lda gfxb+1
    cmp #>$8000
    bne b4
    lda gfxb
    cmp #<$8000
    bne b4
  //SEG245 mode_8bppchunkybmm::@6
  //SEG246 [138] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) mode_8bppchunkybmm::gfxbCpuBank#4 -- vbuaa=vbuxx 
    txa
  //SEG247 [139] call dtvSetCpuBankSegment1 
  //SEG248 [223] phi from mode_8bppchunkybmm::@6 to dtvSetCpuBankSegment1 [phi:mode_8bppchunkybmm::@6->dtvSetCpuBankSegment1]
  //SEG249 [223] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:mode_8bppchunkybmm::@6->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
  //SEG250 mode_8bppchunkybmm::@10
  //SEG251 [140] (byte) mode_8bppchunkybmm::gfxbCpuBank#2 ← ++ (byte) mode_8bppchunkybmm::gfxbCpuBank#4 -- vbuxx=_inc_vbuxx 
    inx
  //SEG252 [141] phi from mode_8bppchunkybmm::@10 to mode_8bppchunkybmm::@4 [phi:mode_8bppchunkybmm::@10->mode_8bppchunkybmm::@4]
  //SEG253 [141] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#8 = (byte) mode_8bppchunkybmm::gfxbCpuBank#2 [phi:mode_8bppchunkybmm::@10->mode_8bppchunkybmm::@4#0] -- register_copy 
  //SEG254 [141] phi (byte*) mode_8bppchunkybmm::gfxb#4 = ((byte*))(word/signed word/dword/signed dword) $4000 [phi:mode_8bppchunkybmm::@10->mode_8bppchunkybmm::@4#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
  //SEG255 [141] phi from mode_8bppchunkybmm::@3 to mode_8bppchunkybmm::@4 [phi:mode_8bppchunkybmm::@3->mode_8bppchunkybmm::@4]
  //SEG256 [141] phi (byte) mode_8bppchunkybmm::gfxbCpuBank#8 = (byte) mode_8bppchunkybmm::gfxbCpuBank#4 [phi:mode_8bppchunkybmm::@3->mode_8bppchunkybmm::@4#0] -- register_copy 
  //SEG257 [141] phi (byte*) mode_8bppchunkybmm::gfxb#4 = (byte*) mode_8bppchunkybmm::gfxb#3 [phi:mode_8bppchunkybmm::@3->mode_8bppchunkybmm::@4#1] -- register_copy 
  //SEG258 mode_8bppchunkybmm::@4
  b4:
  //SEG259 [142] (word~) mode_8bppchunkybmm::$23 ← (word) mode_8bppchunkybmm::x#2 + (byte) mode_8bppchunkybmm::y#6 -- vwuz1=vwuz2_plus_vbuz3 
    lda y
    clc
    adc x
    sta _23
    lda #0
    adc x+1
    sta _23+1
  //SEG260 [143] (byte) mode_8bppchunkybmm::c#0 ← ((byte)) (word~) mode_8bppchunkybmm::$23 -- vbuaa=_byte_vwuz1 
    lda _23
  //SEG261 [144] *((byte*) mode_8bppchunkybmm::gfxb#4) ← (byte) mode_8bppchunkybmm::c#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
  //SEG262 [145] (byte*) mode_8bppchunkybmm::gfxb#1 ← ++ (byte*) mode_8bppchunkybmm::gfxb#4 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG263 [146] (word) mode_8bppchunkybmm::x#1 ← ++ (word) mode_8bppchunkybmm::x#2 -- vwuz1=_inc_vwuz1 
    inc x
    bne !+
    inc x+1
  !:
  //SEG264 [147] if((word) mode_8bppchunkybmm::x#1!=(word/signed word/dword/signed dword) $140) goto mode_8bppchunkybmm::@3 -- vwuz1_neq_vwuc1_then_la1 
    lda x+1
    cmp #>$140
    bne b3
    lda x
    cmp #<$140
    bne b3
  //SEG265 mode_8bppchunkybmm::@7
  //SEG266 [148] (byte) mode_8bppchunkybmm::y#1 ← ++ (byte) mode_8bppchunkybmm::y#6 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG267 [149] if((byte) mode_8bppchunkybmm::y#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_8bppchunkybmm::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$c8
    bne b2
  //SEG268 [150] phi from mode_8bppchunkybmm::@7 to mode_8bppchunkybmm::@8 [phi:mode_8bppchunkybmm::@7->mode_8bppchunkybmm::@8]
  //SEG269 mode_8bppchunkybmm::@8
  //SEG270 [151] call dtvSetCpuBankSegment1 
  //SEG271 [223] phi from mode_8bppchunkybmm::@8 to dtvSetCpuBankSegment1 [phi:mode_8bppchunkybmm::@8->dtvSetCpuBankSegment1]
  //SEG272 [223] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:mode_8bppchunkybmm::@8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
  //SEG273 [152] phi from mode_8bppchunkybmm::@8 to mode_8bppchunkybmm::@11 [phi:mode_8bppchunkybmm::@8->mode_8bppchunkybmm::@11]
  //SEG274 mode_8bppchunkybmm::@11
  //SEG275 [153] call mode_ctrl 
  //SEG276 [155] phi from mode_8bppchunkybmm::@11 to mode_ctrl [phi:mode_8bppchunkybmm::@11->mode_ctrl]
  //SEG277 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_COLORRAM_OFF#0 [phi:mode_8bppchunkybmm::@11->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_COLORRAM_OFF
    sta dtv_control
    jsr mode_ctrl
  //SEG278 mode_8bppchunkybmm::@return
  //SEG279 [154] return 
    rts
}
//SEG280 mode_ctrl
// Allow the user to control the DTV graphics using different keys
mode_ctrl: {
  //SEG281 [156] phi from mode_ctrl mode_ctrl::@30 to mode_ctrl::@1 [phi:mode_ctrl/mode_ctrl::@30->mode_ctrl::@1]
  //SEG282 [156] phi (byte) dtv_control#114 = (byte) dtv_control#145 [phi:mode_ctrl/mode_ctrl::@30->mode_ctrl::@1#0] -- register_copy 
  //SEG283 [156] phi from mode_ctrl::@14 to mode_ctrl::@1 [phi:mode_ctrl::@14->mode_ctrl::@1]
  //SEG284 mode_ctrl::@1
  b1:
  // Wait for the raster
  //SEG285 mode_ctrl::@4
  b4:
  //SEG286 [157] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto mode_ctrl::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
  //SEG287 [158] phi from mode_ctrl::@4 to mode_ctrl::@6 [phi:mode_ctrl::@4->mode_ctrl::@6]
  //SEG288 mode_ctrl::@6
  //SEG289 [159] call keyboard_key_pressed 
  //SEG290 [211] phi from mode_ctrl::@6 to keyboard_key_pressed [phi:mode_ctrl::@6->keyboard_key_pressed]
  //SEG291 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_SPACE#0 [phi:mode_ctrl::@6->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_SPACE
    jsr keyboard_key_pressed
  //SEG292 [160] (byte) keyboard_key_pressed::return#14 ← (byte) keyboard_key_pressed::return#0
  //SEG293 mode_ctrl::@32
  //SEG294 [161] (byte~) mode_ctrl::$1 ← (byte) keyboard_key_pressed::return#14
  //SEG295 [162] if((byte~) mode_ctrl::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@7 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b7
  //SEG296 mode_ctrl::@return
  //SEG297 [163] return 
    rts
  //SEG298 mode_ctrl::@7
  b7:
  //SEG299 [164] (byte) mode_ctrl::ctrl#0 ← (byte) dtv_control#114 -- vbuxx=vbuz1 
    // Read the current control byte
    ldx dtv_control
  //SEG300 [165] call keyboard_key_pressed 
  //SEG301 [211] phi from mode_ctrl::@7 to keyboard_key_pressed [phi:mode_ctrl::@7->keyboard_key_pressed]
  //SEG302 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_L#0 [phi:mode_ctrl::@7->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_L
    jsr keyboard_key_pressed
  //SEG303 [166] (byte) keyboard_key_pressed::return#15 ← (byte) keyboard_key_pressed::return#0
  //SEG304 mode_ctrl::@33
  //SEG305 [167] (byte~) mode_ctrl::$4 ← (byte) keyboard_key_pressed::return#15
  //SEG306 [168] if((byte~) mode_ctrl::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@8 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b8
  //SEG307 mode_ctrl::@23
  //SEG308 [169] (byte) mode_ctrl::ctrl#1 ← (byte) mode_ctrl::ctrl#0 | (const byte) DTV_LINEAR#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_LINEAR
    tax
  //SEG309 [170] phi from mode_ctrl::@23 mode_ctrl::@33 to mode_ctrl::@8 [phi:mode_ctrl::@23/mode_ctrl::@33->mode_ctrl::@8]
  //SEG310 [170] phi (byte) mode_ctrl::ctrl#17 = (byte) mode_ctrl::ctrl#1 [phi:mode_ctrl::@23/mode_ctrl::@33->mode_ctrl::@8#0] -- register_copy 
  //SEG311 mode_ctrl::@8
  b8:
  //SEG312 [171] call keyboard_key_pressed 
  //SEG313 [211] phi from mode_ctrl::@8 to keyboard_key_pressed [phi:mode_ctrl::@8->keyboard_key_pressed]
  //SEG314 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_H#0 [phi:mode_ctrl::@8->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_H
    jsr keyboard_key_pressed
  //SEG315 [172] (byte) keyboard_key_pressed::return#16 ← (byte) keyboard_key_pressed::return#0
  //SEG316 mode_ctrl::@34
  //SEG317 [173] (byte~) mode_ctrl::$8 ← (byte) keyboard_key_pressed::return#16
  //SEG318 [174] if((byte~) mode_ctrl::$8==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@9 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b9
  //SEG319 mode_ctrl::@24
  //SEG320 [175] (byte) mode_ctrl::ctrl#2 ← (byte) mode_ctrl::ctrl#17 | (const byte) DTV_HIGHCOLOR#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_HIGHCOLOR
    tax
  //SEG321 [176] phi from mode_ctrl::@24 mode_ctrl::@34 to mode_ctrl::@9 [phi:mode_ctrl::@24/mode_ctrl::@34->mode_ctrl::@9]
  //SEG322 [176] phi (byte) mode_ctrl::ctrl#10 = (byte) mode_ctrl::ctrl#2 [phi:mode_ctrl::@24/mode_ctrl::@34->mode_ctrl::@9#0] -- register_copy 
  //SEG323 mode_ctrl::@9
  b9:
  //SEG324 [177] call keyboard_key_pressed 
  //SEG325 [211] phi from mode_ctrl::@9 to keyboard_key_pressed [phi:mode_ctrl::@9->keyboard_key_pressed]
  //SEG326 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_O#0 [phi:mode_ctrl::@9->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_O
    jsr keyboard_key_pressed
  //SEG327 [178] (byte) keyboard_key_pressed::return#17 ← (byte) keyboard_key_pressed::return#0
  //SEG328 mode_ctrl::@35
  //SEG329 [179] (byte~) mode_ctrl::$12 ← (byte) keyboard_key_pressed::return#17
  //SEG330 [180] if((byte~) mode_ctrl::$12==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b10
  //SEG331 mode_ctrl::@25
  //SEG332 [181] (byte) mode_ctrl::ctrl#3 ← (byte) mode_ctrl::ctrl#10 | (const byte) DTV_OVERSCAN#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_OVERSCAN
    tax
  //SEG333 [182] phi from mode_ctrl::@25 mode_ctrl::@35 to mode_ctrl::@10 [phi:mode_ctrl::@25/mode_ctrl::@35->mode_ctrl::@10]
  //SEG334 [182] phi (byte) mode_ctrl::ctrl#11 = (byte) mode_ctrl::ctrl#3 [phi:mode_ctrl::@25/mode_ctrl::@35->mode_ctrl::@10#0] -- register_copy 
  //SEG335 mode_ctrl::@10
  b10:
  //SEG336 [183] call keyboard_key_pressed 
  //SEG337 [211] phi from mode_ctrl::@10 to keyboard_key_pressed [phi:mode_ctrl::@10->keyboard_key_pressed]
  //SEG338 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_B#0 [phi:mode_ctrl::@10->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_B
    jsr keyboard_key_pressed
  //SEG339 [184] (byte) keyboard_key_pressed::return#18 ← (byte) keyboard_key_pressed::return#0
  //SEG340 mode_ctrl::@36
  //SEG341 [185] (byte~) mode_ctrl::$16 ← (byte) keyboard_key_pressed::return#18
  //SEG342 [186] if((byte~) mode_ctrl::$16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b11
  //SEG343 mode_ctrl::@26
  //SEG344 [187] (byte) mode_ctrl::ctrl#4 ← (byte) mode_ctrl::ctrl#11 | (const byte) DTV_BORDER_OFF#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_BORDER_OFF
    tax
  //SEG345 [188] phi from mode_ctrl::@26 mode_ctrl::@36 to mode_ctrl::@11 [phi:mode_ctrl::@26/mode_ctrl::@36->mode_ctrl::@11]
  //SEG346 [188] phi (byte) mode_ctrl::ctrl#12 = (byte) mode_ctrl::ctrl#4 [phi:mode_ctrl::@26/mode_ctrl::@36->mode_ctrl::@11#0] -- register_copy 
  //SEG347 mode_ctrl::@11
  b11:
  //SEG348 [189] call keyboard_key_pressed 
  //SEG349 [211] phi from mode_ctrl::@11 to keyboard_key_pressed [phi:mode_ctrl::@11->keyboard_key_pressed]
  //SEG350 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_U#0 [phi:mode_ctrl::@11->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_U
    jsr keyboard_key_pressed
  //SEG351 [190] (byte) keyboard_key_pressed::return#19 ← (byte) keyboard_key_pressed::return#0
  //SEG352 mode_ctrl::@37
  //SEG353 [191] (byte~) mode_ctrl::$20 ← (byte) keyboard_key_pressed::return#19
  //SEG354 [192] if((byte~) mode_ctrl::$20==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@12 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b12
  //SEG355 mode_ctrl::@27
  //SEG356 [193] (byte) mode_ctrl::ctrl#5 ← (byte) mode_ctrl::ctrl#12 | (const byte) DTV_CHUNKY#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_CHUNKY
    tax
  //SEG357 [194] phi from mode_ctrl::@27 mode_ctrl::@37 to mode_ctrl::@12 [phi:mode_ctrl::@27/mode_ctrl::@37->mode_ctrl::@12]
  //SEG358 [194] phi (byte) mode_ctrl::ctrl#13 = (byte) mode_ctrl::ctrl#5 [phi:mode_ctrl::@27/mode_ctrl::@37->mode_ctrl::@12#0] -- register_copy 
  //SEG359 mode_ctrl::@12
  b12:
  //SEG360 [195] call keyboard_key_pressed 
  //SEG361 [211] phi from mode_ctrl::@12 to keyboard_key_pressed [phi:mode_ctrl::@12->keyboard_key_pressed]
  //SEG362 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_C#0 [phi:mode_ctrl::@12->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_C
    jsr keyboard_key_pressed
  //SEG363 [196] (byte) keyboard_key_pressed::return#20 ← (byte) keyboard_key_pressed::return#0
  //SEG364 mode_ctrl::@38
  //SEG365 [197] (byte~) mode_ctrl::$24 ← (byte) keyboard_key_pressed::return#20
  //SEG366 [198] if((byte~) mode_ctrl::$24==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@13 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b13
  //SEG367 mode_ctrl::@28
  //SEG368 [199] (byte) mode_ctrl::ctrl#6 ← (byte) mode_ctrl::ctrl#13 | (const byte) DTV_COLORRAM_OFF#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_COLORRAM_OFF
    tax
  //SEG369 [200] phi from mode_ctrl::@28 mode_ctrl::@38 to mode_ctrl::@13 [phi:mode_ctrl::@28/mode_ctrl::@38->mode_ctrl::@13]
  //SEG370 [200] phi (byte) mode_ctrl::ctrl#22 = (byte) mode_ctrl::ctrl#6 [phi:mode_ctrl::@28/mode_ctrl::@38->mode_ctrl::@13#0] -- register_copy 
  //SEG371 mode_ctrl::@13
  b13:
  //SEG372 [201] call keyboard_key_pressed 
  //SEG373 [211] phi from mode_ctrl::@13 to keyboard_key_pressed [phi:mode_ctrl::@13->keyboard_key_pressed]
  //SEG374 [211] phi (byte) keyboard_key_pressed::key#20 = (const byte) KEY_0#0 [phi:mode_ctrl::@13->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_0
    jsr keyboard_key_pressed
  //SEG375 [202] (byte) keyboard_key_pressed::return#21 ← (byte) keyboard_key_pressed::return#0
  //SEG376 mode_ctrl::@39
  //SEG377 [203] (byte~) mode_ctrl::$28 ← (byte) keyboard_key_pressed::return#21
  //SEG378 [204] if((byte~) mode_ctrl::$28==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_ctrl::@46 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b14
  //SEG379 [205] phi from mode_ctrl::@39 to mode_ctrl::@14 [phi:mode_ctrl::@39->mode_ctrl::@14]
  //SEG380 [205] phi (byte) mode_ctrl::ctrl#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_ctrl::@39->mode_ctrl::@14#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG381 mode_ctrl::@14
  b14:
  //SEG382 [206] if((byte) mode_ctrl::ctrl#14==(byte) dtv_control#114) goto mode_ctrl::@1 -- vbuxx_eq_vbuz1_then_la1 
    cpx dtv_control
    beq b1
  //SEG383 mode_ctrl::@30
  //SEG384 [207] (byte) dtv_control#17 ← (byte) mode_ctrl::ctrl#14 -- vbuz1=vbuxx 
    stx dtv_control
  //SEG385 [208] *((const byte*) DTV_CONTROL#0) ← (byte) mode_ctrl::ctrl#14 -- _deref_pbuc1=vbuxx 
    stx DTV_CONTROL
  //SEG386 [209] *((const byte*) BORDERCOL#0) ← (byte) mode_ctrl::ctrl#14 -- _deref_pbuc1=vbuxx 
    stx BORDERCOL
    jmp b1
  //SEG387 [210] phi from mode_ctrl::@39 to mode_ctrl::@46 [phi:mode_ctrl::@39->mode_ctrl::@46]
  //SEG388 mode_ctrl::@46
  //SEG389 [205] phi from mode_ctrl::@46 to mode_ctrl::@14 [phi:mode_ctrl::@46->mode_ctrl::@14]
  //SEG390 [205] phi (byte) mode_ctrl::ctrl#14 = (byte) mode_ctrl::ctrl#22 [phi:mode_ctrl::@46->mode_ctrl::@14#0] -- register_copy 
}
//SEG391 keyboard_key_pressed
// Determines whether a specific key is currently pressed by accessing the matrix directly
// The key is a keyboard code defined from the keyboard matrix by %00rrrccc, where rrr is the row ID (0-7) and ccc is the column ID (0-7)
// All keys exist as as KEY_XXX constants.
// Returns zero if the key is not pressed and a non-zero value if the key is currently pressed
// keyboard_key_pressed(byte register(Y) key)
keyboard_key_pressed: {
    .label colidx = 7
  //SEG392 [212] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#20 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuyy_band_vbuc1 
    tya
    and #7
    sta colidx
  //SEG393 [213] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#20 >> (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuyy_ror_3 
    tya
    lsr
    lsr
    lsr
  //SEG394 [214] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_key_pressed::rowidx#0 -- vbuyy=vbuaa 
    tay
  //SEG395 [215] call keyboard_matrix_read 
    jsr keyboard_matrix_read
  //SEG396 [216] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  //SEG397 keyboard_key_pressed::@2
  //SEG398 [217] (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#2
  //SEG399 [218] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuz1 
    ldy colidx
    and keyboard_matrix_col_bitmask,y
  //SEG400 keyboard_key_pressed::@return
  //SEG401 [219] return 
    rts
}
//SEG402 keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable kill the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte register(Y) rowid)
keyboard_matrix_read: {
  //SEG403 [220] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuyy 
    lda keyboard_matrix_row_bitmask,y
    sta CIA1_PORT_A
  //SEG404 [221] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
  //SEG405 keyboard_matrix_read::@return
  //SEG406 [222] return 
    rts
}
//SEG407 dtvSetCpuBankSegment1
// Set the memory pointed to by CPU BANK 1 SEGMENT ($4000-$7fff)
// This sets which actual memory is addressed when the CPU reads/writes to $4000-$7fff
// The actual memory addressed will be $4000*cpuSegmentIdx
// dtvSetCpuBankSegment1(byte register(A) cpuBankIdx)
dtvSetCpuBankSegment1: {
    // Move CPU BANK 1 SEGMENT ($4000-$7fff)
    .label cpuBank = $ff
  //SEG408 [224] *((const byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 -- _deref_pbuc1=vbuaa 
    sta cpuBank
  //SEG409 asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda $ff
    .byte $32, $00
  //SEG410 dtvSetCpuBankSegment1::@return
  //SEG411 [226] return 
    rts
}
//SEG412 mode_8bpppixelcell
//8bpp Pixel Cell Mode (BMM/COLDIS = 0, ECM/MCM/HICOL/LINEAR/CHUNK = 1)
//Pixel Cell Adressing
//CharData[8]: (PlaneA[21:0])
//GfxData[8]: (PlaneB[21:14] & CharData[7:0] & RowCounter[3:0] & PixelCounter[7:0] )
//GfxData Pixel Shifter (8):
//- 8bpp color GfxData[7:0]
//Pixel cell mode can be thought of as a text mode that uses a 8x8 pixel 8bpp font (64 bytes/char).
//The characters come from counter A and the font (or "cells") from counter B.
//Counter B step and modulo should be set to 0, counter A modulo to 0 and counter A step to 1 for normal operation.
mode_8bpppixelcell: {
    // 8BPP Pixel Cell Screen (contains 40x25=1000 chars)
    .label PLANEA = $3c00
    // 8BPP Pixel Cell Charset (contains 256 64 byte chars)
    .label PLANEB = $4000
    .label _14 = 7
    .label gfxa = 2
    .label ay = 4
    .label bits = 8
    .label chargen = 2
    .label gfxb = 5
    .label col = 9
    .label cr = 7
    .label ch = 4
  //SEG413 [227] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY
    sta DTV_CONTROL
  //SEG414 [228] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG415 [229] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG416 [230] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_8bpppixelcell::PLANEA#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #<PLANEA
    sta DTV_PLANEA_START_LO
  //SEG417 [231] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_8bpppixelcell::PLANEA#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
  //SEG418 [232] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG419 [233] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG420 [234] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG421 [235] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEA_MODULO_HI
  //SEG422 [236] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_8bpppixelcell::PLANEB#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #<PLANEB
    sta DTV_PLANEB_START_LO
  //SEG423 [237] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_8bpppixelcell::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
  //SEG424 [238] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG425 [239] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_STEP
  //SEG426 [240] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_MODULO_LO
  //SEG427 [241] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_MODULO_HI
  //SEG428 [242] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Border color
    sta BORDERCOL
  //SEG429 [243] phi from mode_8bpppixelcell to mode_8bpppixelcell::@1 [phi:mode_8bpppixelcell->mode_8bpppixelcell::@1]
  //SEG430 [243] phi (byte) mode_8bpppixelcell::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell->mode_8bpppixelcell::@1#0] -- vbuxx=vbuc1 
    tax
  // DTV Palette - Grey Tones
  //SEG431 [243] phi from mode_8bpppixelcell::@1 to mode_8bpppixelcell::@1 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@1]
  //SEG432 [243] phi (byte) mode_8bpppixelcell::i#2 = (byte) mode_8bpppixelcell::i#1 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@1#0] -- register_copy 
  //SEG433 mode_8bpppixelcell::@1
  b1:
  //SEG434 [244] *((const byte*) DTV_PALETTE#0 + (byte) mode_8bpppixelcell::i#2) ← (byte) mode_8bpppixelcell::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG435 [245] (byte) mode_8bpppixelcell::i#1 ← ++ (byte) mode_8bpppixelcell::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG436 [246] if((byte) mode_8bpppixelcell::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_8bpppixelcell::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG437 [247] phi from mode_8bpppixelcell::@1 to mode_8bpppixelcell::@2 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@2]
  //SEG438 [247] phi (byte*) mode_8bpppixelcell::gfxa#3 = (const byte*) mode_8bpppixelcell::PLANEA#0 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@2#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta gfxa
    lda #>PLANEA
    sta gfxa+1
  //SEG439 [247] phi (byte) mode_8bpppixelcell::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@1->mode_8bpppixelcell::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
  //SEG440 [247] phi from mode_8bpppixelcell::@9 to mode_8bpppixelcell::@2 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@2]
  //SEG441 [247] phi (byte*) mode_8bpppixelcell::gfxa#3 = (byte*) mode_8bpppixelcell::gfxa#1 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@2#0] -- register_copy 
  //SEG442 [247] phi (byte) mode_8bpppixelcell::ay#4 = (byte) mode_8bpppixelcell::ay#1 [phi:mode_8bpppixelcell::@9->mode_8bpppixelcell::@2#1] -- register_copy 
  //SEG443 mode_8bpppixelcell::@2
  b2:
  //SEG444 [248] phi from mode_8bpppixelcell::@2 to mode_8bpppixelcell::@3 [phi:mode_8bpppixelcell::@2->mode_8bpppixelcell::@3]
  //SEG445 [248] phi (byte*) mode_8bpppixelcell::gfxa#2 = (byte*) mode_8bpppixelcell::gfxa#3 [phi:mode_8bpppixelcell::@2->mode_8bpppixelcell::@3#0] -- register_copy 
  //SEG446 [248] phi (byte) mode_8bpppixelcell::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@2->mode_8bpppixelcell::@3#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG447 [248] phi from mode_8bpppixelcell::@3 to mode_8bpppixelcell::@3 [phi:mode_8bpppixelcell::@3->mode_8bpppixelcell::@3]
  //SEG448 [248] phi (byte*) mode_8bpppixelcell::gfxa#2 = (byte*) mode_8bpppixelcell::gfxa#1 [phi:mode_8bpppixelcell::@3->mode_8bpppixelcell::@3#0] -- register_copy 
  //SEG449 [248] phi (byte) mode_8bpppixelcell::ax#2 = (byte) mode_8bpppixelcell::ax#1 [phi:mode_8bpppixelcell::@3->mode_8bpppixelcell::@3#1] -- register_copy 
  //SEG450 mode_8bpppixelcell::@3
  b3:
  //SEG451 [249] (byte~) mode_8bpppixelcell::$13 ← (byte) mode_8bpppixelcell::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and ay
  //SEG452 [250] (byte~) mode_8bpppixelcell::$14 ← (byte~) mode_8bpppixelcell::$13 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _14
  //SEG453 [251] (byte~) mode_8bpppixelcell::$15 ← (byte) mode_8bpppixelcell::ax#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG454 [252] (byte~) mode_8bpppixelcell::$16 ← (byte~) mode_8bpppixelcell::$14 | (byte~) mode_8bpppixelcell::$15 -- vbuaa=vbuz1_bor_vbuaa 
    ora _14
  //SEG455 [253] *((byte*) mode_8bpppixelcell::gfxa#2) ← (byte~) mode_8bpppixelcell::$16 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxa),y
  //SEG456 [254] (byte*) mode_8bpppixelcell::gfxa#1 ← ++ (byte*) mode_8bpppixelcell::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG457 [255] (byte) mode_8bpppixelcell::ax#1 ← ++ (byte) mode_8bpppixelcell::ax#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG458 [256] if((byte) mode_8bpppixelcell::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_8bpppixelcell::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3
  //SEG459 mode_8bpppixelcell::@9
  //SEG460 [257] (byte) mode_8bpppixelcell::ay#1 ← ++ (byte) mode_8bpppixelcell::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG461 [258] if((byte) mode_8bpppixelcell::ay#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_8bpppixelcell::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda ay
    cmp #$19
    bne b2
  //SEG462 mode_8bpppixelcell::@10
  //SEG463 [259] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 -- _deref_pbuc1=vbuc2 
    // 8bpp cells for Plane B (charset) - ROM charset with 256 colors
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
  //SEG464 [260] phi from mode_8bpppixelcell::@10 to mode_8bpppixelcell::@4 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@4]
  //SEG465 [260] phi (byte) mode_8bpppixelcell::ch#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta ch
  //SEG466 [260] phi (byte) mode_8bpppixelcell::col#7 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@4#1] -- vbuz1=vbuc1 
    sta col
  //SEG467 [260] phi (byte*) mode_8bpppixelcell::gfxb#7 = (const byte*) mode_8bpppixelcell::PLANEB#0 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@4#2] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta gfxb
    lda #>PLANEB
    sta gfxb+1
  //SEG468 [260] phi (byte*) mode_8bpppixelcell::chargen#4 = ((byte*))(word/dword/signed dword) $d000 [phi:mode_8bpppixelcell::@10->mode_8bpppixelcell::@4#3] -- pbuz1=pbuc1 
    lda #<$d000
    sta chargen
    lda #>$d000
    sta chargen+1
  //SEG469 [260] phi from mode_8bpppixelcell::@13 to mode_8bpppixelcell::@4 [phi:mode_8bpppixelcell::@13->mode_8bpppixelcell::@4]
  //SEG470 [260] phi (byte) mode_8bpppixelcell::ch#8 = (byte) mode_8bpppixelcell::ch#1 [phi:mode_8bpppixelcell::@13->mode_8bpppixelcell::@4#0] -- register_copy 
  //SEG471 [260] phi (byte) mode_8bpppixelcell::col#7 = (byte) mode_8bpppixelcell::col#1 [phi:mode_8bpppixelcell::@13->mode_8bpppixelcell::@4#1] -- register_copy 
  //SEG472 [260] phi (byte*) mode_8bpppixelcell::gfxb#7 = (byte*) mode_8bpppixelcell::gfxb#1 [phi:mode_8bpppixelcell::@13->mode_8bpppixelcell::@4#2] -- register_copy 
  //SEG473 [260] phi (byte*) mode_8bpppixelcell::chargen#4 = (byte*) mode_8bpppixelcell::chargen#1 [phi:mode_8bpppixelcell::@13->mode_8bpppixelcell::@4#3] -- register_copy 
  //SEG474 mode_8bpppixelcell::@4
  b4:
  //SEG475 [261] phi from mode_8bpppixelcell::@4 to mode_8bpppixelcell::@5 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@5]
  //SEG476 [261] phi (byte) mode_8bpppixelcell::cr#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta cr
  //SEG477 [261] phi (byte) mode_8bpppixelcell::col#5 = (byte) mode_8bpppixelcell::col#7 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@5#1] -- register_copy 
  //SEG478 [261] phi (byte*) mode_8bpppixelcell::gfxb#5 = (byte*) mode_8bpppixelcell::gfxb#7 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@5#2] -- register_copy 
  //SEG479 [261] phi (byte*) mode_8bpppixelcell::chargen#2 = (byte*) mode_8bpppixelcell::chargen#4 [phi:mode_8bpppixelcell::@4->mode_8bpppixelcell::@5#3] -- register_copy 
  //SEG480 [261] phi from mode_8bpppixelcell::@12 to mode_8bpppixelcell::@5 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@5]
  //SEG481 [261] phi (byte) mode_8bpppixelcell::cr#6 = (byte) mode_8bpppixelcell::cr#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@5#0] -- register_copy 
  //SEG482 [261] phi (byte) mode_8bpppixelcell::col#5 = (byte) mode_8bpppixelcell::col#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@5#1] -- register_copy 
  //SEG483 [261] phi (byte*) mode_8bpppixelcell::gfxb#5 = (byte*) mode_8bpppixelcell::gfxb#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@5#2] -- register_copy 
  //SEG484 [261] phi (byte*) mode_8bpppixelcell::chargen#2 = (byte*) mode_8bpppixelcell::chargen#1 [phi:mode_8bpppixelcell::@12->mode_8bpppixelcell::@5#3] -- register_copy 
  //SEG485 mode_8bpppixelcell::@5
  b5:
  //SEG486 [262] (byte) mode_8bpppixelcell::bits#0 ← *((byte*) mode_8bpppixelcell::chargen#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta bits
  //SEG487 [263] (byte*) mode_8bpppixelcell::chargen#1 ← ++ (byte*) mode_8bpppixelcell::chargen#2 -- pbuz1=_inc_pbuz1 
    inc chargen
    bne !+
    inc chargen+1
  !:
  //SEG488 [264] phi from mode_8bpppixelcell::@5 to mode_8bpppixelcell::@6 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6]
  //SEG489 [264] phi (byte) mode_8bpppixelcell::cp#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG490 [264] phi (byte) mode_8bpppixelcell::col#2 = (byte) mode_8bpppixelcell::col#5 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#1] -- register_copy 
  //SEG491 [264] phi (byte*) mode_8bpppixelcell::gfxb#2 = (byte*) mode_8bpppixelcell::gfxb#5 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#2] -- register_copy 
  //SEG492 [264] phi (byte) mode_8bpppixelcell::bits#2 = (byte) mode_8bpppixelcell::bits#0 [phi:mode_8bpppixelcell::@5->mode_8bpppixelcell::@6#3] -- register_copy 
  //SEG493 [264] phi from mode_8bpppixelcell::@7 to mode_8bpppixelcell::@6 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@6]
  //SEG494 [264] phi (byte) mode_8bpppixelcell::cp#2 = (byte) mode_8bpppixelcell::cp#1 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@6#0] -- register_copy 
  //SEG495 [264] phi (byte) mode_8bpppixelcell::col#2 = (byte) mode_8bpppixelcell::col#1 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@6#1] -- register_copy 
  //SEG496 [264] phi (byte*) mode_8bpppixelcell::gfxb#2 = (byte*) mode_8bpppixelcell::gfxb#1 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@6#2] -- register_copy 
  //SEG497 [264] phi (byte) mode_8bpppixelcell::bits#2 = (byte) mode_8bpppixelcell::bits#1 [phi:mode_8bpppixelcell::@7->mode_8bpppixelcell::@6#3] -- register_copy 
  //SEG498 mode_8bpppixelcell::@6
  b6:
  //SEG499 [265] (byte~) mode_8bpppixelcell::$19 ← (byte) mode_8bpppixelcell::bits#2 & (byte/word/signed word/dword/signed dword) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and bits
  //SEG500 [266] if((byte~) mode_8bpppixelcell::$19==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_8bpppixelcell::@7 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b8
  //SEG501 mode_8bpppixelcell::@11
  //SEG502 [267] (byte~) mode_8bpppixelcell::c#3 ← (byte) mode_8bpppixelcell::col#2 -- vbuaa=vbuz1 
    lda col
  //SEG503 [268] phi from mode_8bpppixelcell::@11 to mode_8bpppixelcell::@7 [phi:mode_8bpppixelcell::@11->mode_8bpppixelcell::@7]
  //SEG504 [268] phi (byte) mode_8bpppixelcell::c#2 = (byte~) mode_8bpppixelcell::c#3 [phi:mode_8bpppixelcell::@11->mode_8bpppixelcell::@7#0] -- register_copy 
    jmp b7
  //SEG505 [268] phi from mode_8bpppixelcell::@6 to mode_8bpppixelcell::@7 [phi:mode_8bpppixelcell::@6->mode_8bpppixelcell::@7]
  b8:
  //SEG506 [268] phi (byte) mode_8bpppixelcell::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_8bpppixelcell::@6->mode_8bpppixelcell::@7#0] -- vbuaa=vbuc1 
    lda #0
  //SEG507 mode_8bpppixelcell::@7
  b7:
  //SEG508 [269] *((byte*) mode_8bpppixelcell::gfxb#2) ← (byte) mode_8bpppixelcell::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
  //SEG509 [270] (byte*) mode_8bpppixelcell::gfxb#1 ← ++ (byte*) mode_8bpppixelcell::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG510 [271] (byte) mode_8bpppixelcell::bits#1 ← (byte) mode_8bpppixelcell::bits#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl bits
  //SEG511 [272] (byte) mode_8bpppixelcell::col#1 ← ++ (byte) mode_8bpppixelcell::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG512 [273] (byte) mode_8bpppixelcell::cp#1 ← ++ (byte) mode_8bpppixelcell::cp#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG513 [274] if((byte) mode_8bpppixelcell::cp#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto mode_8bpppixelcell::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b6
  //SEG514 mode_8bpppixelcell::@12
  //SEG515 [275] (byte) mode_8bpppixelcell::cr#1 ← ++ (byte) mode_8bpppixelcell::cr#6 -- vbuz1=_inc_vbuz1 
    inc cr
  //SEG516 [276] if((byte) mode_8bpppixelcell::cr#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto mode_8bpppixelcell::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda cr
    cmp #8
    bne b5
  //SEG517 mode_8bpppixelcell::@13
  //SEG518 [277] (byte) mode_8bpppixelcell::ch#1 ← ++ (byte) mode_8bpppixelcell::ch#8 -- vbuz1=_inc_vbuz1 
    inc ch
  //SEG519 [278] if((byte) mode_8bpppixelcell::ch#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_8bpppixelcell::@4 -- vbuz1_neq_0_then_la1 
    lda ch
    cmp #0
    bne b4
  //SEG520 mode_8bpppixelcell::@14
  //SEG521 [279] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG522 [280] call mode_ctrl 
  //SEG523 [155] phi from mode_8bpppixelcell::@14 to mode_ctrl [phi:mode_8bpppixelcell::@14->mode_ctrl]
  //SEG524 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0 [phi:mode_8bpppixelcell::@14->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY
    sta dtv_control
    jsr mode_ctrl
  //SEG525 mode_8bpppixelcell::@return
  //SEG526 [281] return 
    rts
}
//SEG527 mode_sixsfred
// Sixs Fred Mode - 8bpp Packed Bitmap - Generated from the two DTV linear graphics plane counters
// Two Plane MultiColor Bitmap - 8bpp Packed Bitmap (CHUNK/COLDIS = 0, ECM/BMM/MCM/HICOL/LINEAR = 1)
// Resolution: 160x200
// Linear Adressing
// GfxData/PlaneA Pixel Shifter (2), CharData/PlaneB Pixel Shifter (2):
// - 8bpp color (ColorData[3:0],CharData/PlaneB[1:0], GfxData/PlaneA[1:0])
mode_sixsfred: {
    .label PLANEA = $4000
    .label PLANEB = $6000
    .label COLORS = $8000
    .label col = 2
    .label cy = 4
    .label gfxa = 2
    .label ay = 4
    .label gfxb = 2
    .label by = 4
  //SEG528 [282] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR
    sta DTV_CONTROL
  //SEG529 [283] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG530 [284] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG531 [285] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_sixsfred::PLANEA#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #<PLANEA
    sta DTV_PLANEA_START_LO
  //SEG532 [286] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_sixsfred::PLANEA#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
  //SEG533 [287] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG534 [288] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG535 [289] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG536 [290] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEA_MODULO_HI
  //SEG537 [291] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_sixsfred::PLANEB#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #<PLANEB
    sta DTV_PLANEB_START_LO
  //SEG538 [292] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_sixsfred::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
  //SEG539 [293] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG540 [294] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
  //SEG541 [295] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG542 [296] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_MODULO_HI
  //SEG543 [297] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_sixsfred::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG544 [298] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_sixsfred::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #>COLORS/$400
    sta DTV_COLOR_BANK_HI
  //SEG545 [299] phi from mode_sixsfred to mode_sixsfred::@1 [phi:mode_sixsfred->mode_sixsfred::@1]
  //SEG546 [299] phi (byte) mode_sixsfred::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred->mode_sixsfred::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - Grey Tones
  //SEG547 [299] phi from mode_sixsfred::@1 to mode_sixsfred::@1 [phi:mode_sixsfred::@1->mode_sixsfred::@1]
  //SEG548 [299] phi (byte) mode_sixsfred::i#2 = (byte) mode_sixsfred::i#1 [phi:mode_sixsfred::@1->mode_sixsfred::@1#0] -- register_copy 
  //SEG549 mode_sixsfred::@1
  b1:
  //SEG550 [300] *((const byte*) DTV_PALETTE#0 + (byte) mode_sixsfred::i#2) ← (byte) mode_sixsfred::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG551 [301] (byte) mode_sixsfred::i#1 ← ++ (byte) mode_sixsfred::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG552 [302] if((byte) mode_sixsfred::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_sixsfred::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG553 mode_sixsfred::@8
  //SEG554 [303] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG555 [304] phi from mode_sixsfred::@8 to mode_sixsfred::@2 [phi:mode_sixsfred::@8->mode_sixsfred::@2]
  //SEG556 [304] phi (byte*) mode_sixsfred::col#3 = (const byte*) mode_sixsfred::COLORS#0 [phi:mode_sixsfred::@8->mode_sixsfred::@2#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG557 [304] phi (byte) mode_sixsfred::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@8->mode_sixsfred::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG558 [304] phi from mode_sixsfred::@9 to mode_sixsfred::@2 [phi:mode_sixsfred::@9->mode_sixsfred::@2]
  //SEG559 [304] phi (byte*) mode_sixsfred::col#3 = (byte*) mode_sixsfred::col#1 [phi:mode_sixsfred::@9->mode_sixsfred::@2#0] -- register_copy 
  //SEG560 [304] phi (byte) mode_sixsfred::cy#4 = (byte) mode_sixsfred::cy#1 [phi:mode_sixsfred::@9->mode_sixsfred::@2#1] -- register_copy 
  //SEG561 mode_sixsfred::@2
  b2:
  //SEG562 [305] phi from mode_sixsfred::@2 to mode_sixsfred::@3 [phi:mode_sixsfred::@2->mode_sixsfred::@3]
  //SEG563 [305] phi (byte*) mode_sixsfred::col#2 = (byte*) mode_sixsfred::col#3 [phi:mode_sixsfred::@2->mode_sixsfred::@3#0] -- register_copy 
  //SEG564 [305] phi (byte) mode_sixsfred::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@2->mode_sixsfred::@3#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG565 [305] phi from mode_sixsfred::@3 to mode_sixsfred::@3 [phi:mode_sixsfred::@3->mode_sixsfred::@3]
  //SEG566 [305] phi (byte*) mode_sixsfred::col#2 = (byte*) mode_sixsfred::col#1 [phi:mode_sixsfred::@3->mode_sixsfred::@3#0] -- register_copy 
  //SEG567 [305] phi (byte) mode_sixsfred::cx#2 = (byte) mode_sixsfred::cx#1 [phi:mode_sixsfred::@3->mode_sixsfred::@3#1] -- register_copy 
  //SEG568 mode_sixsfred::@3
  b3:
  //SEG569 [306] (byte~) mode_sixsfred::$16 ← (byte) mode_sixsfred::cx#2 + (byte) mode_sixsfred::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc cy
  //SEG570 [307] (byte~) mode_sixsfred::$17 ← (byte~) mode_sixsfred::$16 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
  //SEG571 [308] *((byte*) mode_sixsfred::col#2) ← (byte~) mode_sixsfred::$17 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG572 [309] (byte*) mode_sixsfred::col#1 ← ++ (byte*) mode_sixsfred::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG573 [310] (byte) mode_sixsfred::cx#1 ← ++ (byte) mode_sixsfred::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG574 [311] if((byte) mode_sixsfred::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3
  //SEG575 mode_sixsfred::@9
  //SEG576 [312] (byte) mode_sixsfred::cy#1 ← ++ (byte) mode_sixsfred::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG577 [313] if((byte) mode_sixsfred::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_sixsfred::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2
  //SEG578 [314] phi from mode_sixsfred::@9 to mode_sixsfred::@4 [phi:mode_sixsfred::@9->mode_sixsfred::@4]
  //SEG579 [314] phi (byte*) mode_sixsfred::gfxa#3 = (const byte*) mode_sixsfred::PLANEA#0 [phi:mode_sixsfred::@9->mode_sixsfred::@4#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta gfxa
    lda #>PLANEA
    sta gfxa+1
  //SEG580 [314] phi (byte) mode_sixsfred::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@9->mode_sixsfred::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
  //SEG581 [314] phi from mode_sixsfred::@11 to mode_sixsfred::@4 [phi:mode_sixsfred::@11->mode_sixsfred::@4]
  //SEG582 [314] phi (byte*) mode_sixsfred::gfxa#3 = (byte*) mode_sixsfred::gfxa#1 [phi:mode_sixsfred::@11->mode_sixsfred::@4#0] -- register_copy 
  //SEG583 [314] phi (byte) mode_sixsfred::ay#4 = (byte) mode_sixsfred::ay#1 [phi:mode_sixsfred::@11->mode_sixsfred::@4#1] -- register_copy 
  //SEG584 mode_sixsfred::@4
  b4:
  //SEG585 [315] phi from mode_sixsfred::@4 to mode_sixsfred::@5 [phi:mode_sixsfred::@4->mode_sixsfred::@5]
  //SEG586 [315] phi (byte) mode_sixsfred::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@4->mode_sixsfred::@5#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG587 [315] phi (byte*) mode_sixsfred::gfxa#2 = (byte*) mode_sixsfred::gfxa#3 [phi:mode_sixsfred::@4->mode_sixsfred::@5#1] -- register_copy 
  //SEG588 [315] phi from mode_sixsfred::@5 to mode_sixsfred::@5 [phi:mode_sixsfred::@5->mode_sixsfred::@5]
  //SEG589 [315] phi (byte) mode_sixsfred::ax#2 = (byte) mode_sixsfred::ax#1 [phi:mode_sixsfred::@5->mode_sixsfred::@5#0] -- register_copy 
  //SEG590 [315] phi (byte*) mode_sixsfred::gfxa#2 = (byte*) mode_sixsfred::gfxa#1 [phi:mode_sixsfred::@5->mode_sixsfred::@5#1] -- register_copy 
  //SEG591 mode_sixsfred::@5
  b5:
  //SEG592 [316] (byte~) mode_sixsfred::$20 ← (byte) mode_sixsfred::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_ror_1 
    lda ay
    lsr
  //SEG593 [317] (byte) mode_sixsfred::row#0 ← (byte~) mode_sixsfred::$20 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuaa_band_vbuc1 
    and #3
  //SEG594 [318] *((byte*) mode_sixsfred::gfxa#2) ← *((const byte[]) mode_sixsfred::row_bitmask#0 + (byte) mode_sixsfred::row#0) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
  //SEG595 [319] (byte*) mode_sixsfred::gfxa#1 ← ++ (byte*) mode_sixsfred::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG596 [320] (byte) mode_sixsfred::ax#1 ← ++ (byte) mode_sixsfred::ax#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG597 [321] if((byte) mode_sixsfred::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred::@5 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b5
  //SEG598 mode_sixsfred::@11
  //SEG599 [322] (byte) mode_sixsfred::ay#1 ← ++ (byte) mode_sixsfred::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG600 [323] if((byte) mode_sixsfred::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_sixsfred::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda ay
    cmp #$c8
    bne b4
  //SEG601 [324] phi from mode_sixsfred::@11 to mode_sixsfred::@6 [phi:mode_sixsfred::@11->mode_sixsfred::@6]
  //SEG602 [324] phi (byte) mode_sixsfred::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@11->mode_sixsfred::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG603 [324] phi (byte*) mode_sixsfred::gfxb#3 = (const byte*) mode_sixsfred::PLANEB#0 [phi:mode_sixsfred::@11->mode_sixsfred::@6#1] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta gfxb
    lda #>PLANEB
    sta gfxb+1
  //SEG604 [324] phi from mode_sixsfred::@13 to mode_sixsfred::@6 [phi:mode_sixsfred::@13->mode_sixsfred::@6]
  //SEG605 [324] phi (byte) mode_sixsfred::by#4 = (byte) mode_sixsfred::by#1 [phi:mode_sixsfred::@13->mode_sixsfred::@6#0] -- register_copy 
  //SEG606 [324] phi (byte*) mode_sixsfred::gfxb#3 = (byte*) mode_sixsfred::gfxb#1 [phi:mode_sixsfred::@13->mode_sixsfred::@6#1] -- register_copy 
  //SEG607 mode_sixsfred::@6
  b6:
  //SEG608 [325] phi from mode_sixsfred::@6 to mode_sixsfred::@7 [phi:mode_sixsfred::@6->mode_sixsfred::@7]
  //SEG609 [325] phi (byte) mode_sixsfred::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred::@6->mode_sixsfred::@7#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG610 [325] phi (byte*) mode_sixsfred::gfxb#2 = (byte*) mode_sixsfred::gfxb#3 [phi:mode_sixsfred::@6->mode_sixsfred::@7#1] -- register_copy 
  //SEG611 [325] phi from mode_sixsfred::@7 to mode_sixsfred::@7 [phi:mode_sixsfred::@7->mode_sixsfred::@7]
  //SEG612 [325] phi (byte) mode_sixsfred::bx#2 = (byte) mode_sixsfred::bx#1 [phi:mode_sixsfred::@7->mode_sixsfred::@7#0] -- register_copy 
  //SEG613 [325] phi (byte*) mode_sixsfred::gfxb#2 = (byte*) mode_sixsfred::gfxb#1 [phi:mode_sixsfred::@7->mode_sixsfred::@7#1] -- register_copy 
  //SEG614 mode_sixsfred::@7
  b7:
  //SEG615 [326] *((byte*) mode_sixsfred::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $1b -- _deref_pbuz1=vbuc1 
    lda #$1b
    ldy #0
    sta (gfxb),y
  //SEG616 [327] (byte*) mode_sixsfred::gfxb#1 ← ++ (byte*) mode_sixsfred::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG617 [328] (byte) mode_sixsfred::bx#1 ← ++ (byte) mode_sixsfred::bx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG618 [329] if((byte) mode_sixsfred::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred::@7 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b7
  //SEG619 mode_sixsfred::@13
  //SEG620 [330] (byte) mode_sixsfred::by#1 ← ++ (byte) mode_sixsfred::by#4 -- vbuz1=_inc_vbuz1 
    inc by
  //SEG621 [331] if((byte) mode_sixsfred::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_sixsfred::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda by
    cmp #$c8
    bne b6
  //SEG622 [332] phi from mode_sixsfred::@13 to mode_sixsfred::@14 [phi:mode_sixsfred::@13->mode_sixsfred::@14]
  //SEG623 mode_sixsfred::@14
  //SEG624 [333] call mode_ctrl 
  //SEG625 [155] phi from mode_sixsfred::@14 to mode_ctrl [phi:mode_sixsfred::@14->mode_ctrl]
  //SEG626 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 [phi:mode_sixsfred::@14->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR|DTV_LINEAR
    sta dtv_control
    jsr mode_ctrl
  //SEG627 mode_sixsfred::@return
  //SEG628 [334] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
//SEG629 mode_twoplanebitmap
// Two Plane Bitmap - generated from the two DTV linear graphics plane counters
// Two Plane Bitmap Mode (CHUNK/COLDIS/MCM = 0, ECM/BMM/HICOL/LINEAR = 1)
// Resolution: 320x200
// Linear Adressing
// GfxData/PlaneA Pixel Shifter (1), CharData/PlaneB Pixel Shifter (1):
// - Plane A = 0 Plane B = 0: 8bpp BgColor0[7:0]
// - Plane A = 0 Plane B = 1: 8bpp "0000" & ColorData[7:4]
// - Plane A = 1 Plane B = 0: 8bpp "0000" & ColorData[3:0]
// - Plane A = 1 Plane B = 1: 8bpp BgColor1[7:0]
mode_twoplanebitmap: {
    .label PLANEA = $4000
    .label PLANEB = $6000
    .label COLORS = $8000
    .label _16 = 7
    .label col = 2
    .label cy = 4
    .label gfxa = 2
    .label ay = 4
    .label gfxb = 2
    .label by = 4
  //SEG630 [335] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR
    sta DTV_CONTROL
  //SEG631 [336] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG632 [337] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG633 [338] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_twoplanebitmap::PLANEA#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #<PLANEA
    sta DTV_PLANEA_START_LO
  //SEG634 [339] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_twoplanebitmap::PLANEA#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
  //SEG635 [340] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG636 [341] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG637 [342] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG638 [343] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEA_MODULO_HI
  //SEG639 [344] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_twoplanebitmap::PLANEB#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #<PLANEB
    sta DTV_PLANEB_START_LO
  //SEG640 [345] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_twoplanebitmap::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
  //SEG641 [346] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG642 [347] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
  //SEG643 [348] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG644 [349] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_MODULO_HI
  //SEG645 [350] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_twoplanebitmap::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG646 [351] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_twoplanebitmap::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #>COLORS/$400
    sta DTV_COLOR_BANK_HI
  //SEG647 [352] phi from mode_twoplanebitmap to mode_twoplanebitmap::@1 [phi:mode_twoplanebitmap->mode_twoplanebitmap::@1]
  //SEG648 [352] phi (byte) mode_twoplanebitmap::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap->mode_twoplanebitmap::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - Grey Tones
  //SEG649 [352] phi from mode_twoplanebitmap::@1 to mode_twoplanebitmap::@1 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@1]
  //SEG650 [352] phi (byte) mode_twoplanebitmap::i#2 = (byte) mode_twoplanebitmap::i#1 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@1#0] -- register_copy 
  //SEG651 mode_twoplanebitmap::@1
  b1:
  //SEG652 [353] *((const byte*) DTV_PALETTE#0 + (byte) mode_twoplanebitmap::i#2) ← (byte) mode_twoplanebitmap::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG653 [354] (byte) mode_twoplanebitmap::i#1 ← ++ (byte) mode_twoplanebitmap::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG654 [355] if((byte) mode_twoplanebitmap::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_twoplanebitmap::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG655 mode_twoplanebitmap::@10
  //SEG656 [356] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG657 [357] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $70 -- _deref_pbuc1=vbuc2 
    lda #$70
    sta BGCOL1
  //SEG658 [358] *((const byte*) BGCOL2#0) ← (byte/word/signed word/dword/signed dword) $d4 -- _deref_pbuc1=vbuc2 
    // Color for bits 00
    lda #$d4
    sta BGCOL2
  //SEG659 [359] phi from mode_twoplanebitmap::@10 to mode_twoplanebitmap::@2 [phi:mode_twoplanebitmap::@10->mode_twoplanebitmap::@2]
  //SEG660 [359] phi (byte*) mode_twoplanebitmap::col#3 = (const byte*) mode_twoplanebitmap::COLORS#0 [phi:mode_twoplanebitmap::@10->mode_twoplanebitmap::@2#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG661 [359] phi (byte) mode_twoplanebitmap::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@10->mode_twoplanebitmap::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG662 [359] phi from mode_twoplanebitmap::@11 to mode_twoplanebitmap::@2 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@2]
  //SEG663 [359] phi (byte*) mode_twoplanebitmap::col#3 = (byte*) mode_twoplanebitmap::col#1 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@2#0] -- register_copy 
  //SEG664 [359] phi (byte) mode_twoplanebitmap::cy#4 = (byte) mode_twoplanebitmap::cy#1 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@2#1] -- register_copy 
  //SEG665 mode_twoplanebitmap::@2
  b2:
  //SEG666 [360] phi from mode_twoplanebitmap::@2 to mode_twoplanebitmap::@3 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3]
  //SEG667 [360] phi (byte*) mode_twoplanebitmap::col#2 = (byte*) mode_twoplanebitmap::col#3 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3#0] -- register_copy 
  //SEG668 [360] phi (byte) mode_twoplanebitmap::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG669 [360] phi from mode_twoplanebitmap::@3 to mode_twoplanebitmap::@3 [phi:mode_twoplanebitmap::@3->mode_twoplanebitmap::@3]
  //SEG670 [360] phi (byte*) mode_twoplanebitmap::col#2 = (byte*) mode_twoplanebitmap::col#1 [phi:mode_twoplanebitmap::@3->mode_twoplanebitmap::@3#0] -- register_copy 
  //SEG671 [360] phi (byte) mode_twoplanebitmap::cx#2 = (byte) mode_twoplanebitmap::cx#1 [phi:mode_twoplanebitmap::@3->mode_twoplanebitmap::@3#1] -- register_copy 
  //SEG672 mode_twoplanebitmap::@3
  b3:
  //SEG673 [361] (byte~) mode_twoplanebitmap::$15 ← (byte) mode_twoplanebitmap::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG674 [362] (byte~) mode_twoplanebitmap::$16 ← (byte~) mode_twoplanebitmap::$15 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _16
  //SEG675 [363] (byte~) mode_twoplanebitmap::$17 ← (byte) mode_twoplanebitmap::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG676 [364] (byte~) mode_twoplanebitmap::$18 ← (byte~) mode_twoplanebitmap::$16 | (byte~) mode_twoplanebitmap::$17 -- vbuaa=vbuz1_bor_vbuaa 
    ora _16
  //SEG677 [365] *((byte*) mode_twoplanebitmap::col#2) ← (byte~) mode_twoplanebitmap::$18 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG678 [366] (byte*) mode_twoplanebitmap::col#1 ← ++ (byte*) mode_twoplanebitmap::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG679 [367] (byte) mode_twoplanebitmap::cx#1 ← ++ (byte) mode_twoplanebitmap::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG680 [368] if((byte) mode_twoplanebitmap::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_twoplanebitmap::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3
  //SEG681 mode_twoplanebitmap::@11
  //SEG682 [369] (byte) mode_twoplanebitmap::cy#1 ← ++ (byte) mode_twoplanebitmap::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG683 [370] if((byte) mode_twoplanebitmap::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_twoplanebitmap::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2
  //SEG684 [371] phi from mode_twoplanebitmap::@11 to mode_twoplanebitmap::@4 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@4]
  //SEG685 [371] phi (byte*) mode_twoplanebitmap::gfxa#6 = (const byte*) mode_twoplanebitmap::PLANEA#0 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@4#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta gfxa
    lda #>PLANEA
    sta gfxa+1
  //SEG686 [371] phi (byte) mode_twoplanebitmap::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@11->mode_twoplanebitmap::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
  //SEG687 [371] phi from mode_twoplanebitmap::@15 to mode_twoplanebitmap::@4 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@4]
  //SEG688 [371] phi (byte*) mode_twoplanebitmap::gfxa#6 = (byte*) mode_twoplanebitmap::gfxa#7 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@4#0] -- register_copy 
  //SEG689 [371] phi (byte) mode_twoplanebitmap::ay#4 = (byte) mode_twoplanebitmap::ay#1 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@4#1] -- register_copy 
  //SEG690 mode_twoplanebitmap::@4
  b4:
  //SEG691 [372] phi from mode_twoplanebitmap::@4 to mode_twoplanebitmap::@5 [phi:mode_twoplanebitmap::@4->mode_twoplanebitmap::@5]
  //SEG692 [372] phi (byte) mode_twoplanebitmap::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@4->mode_twoplanebitmap::@5#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG693 [372] phi (byte*) mode_twoplanebitmap::gfxa#3 = (byte*) mode_twoplanebitmap::gfxa#6 [phi:mode_twoplanebitmap::@4->mode_twoplanebitmap::@5#1] -- register_copy 
  //SEG694 [372] phi from mode_twoplanebitmap::@7 to mode_twoplanebitmap::@5 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@5]
  //SEG695 [372] phi (byte) mode_twoplanebitmap::ax#2 = (byte) mode_twoplanebitmap::ax#1 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@5#0] -- register_copy 
  //SEG696 [372] phi (byte*) mode_twoplanebitmap::gfxa#3 = (byte*) mode_twoplanebitmap::gfxa#7 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@5#1] -- register_copy 
  //SEG697 mode_twoplanebitmap::@5
  b5:
  //SEG698 [373] (byte~) mode_twoplanebitmap::$21 ← (byte) mode_twoplanebitmap::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuz1_band_vbuc1 
    lda #4
    and ay
  //SEG699 [374] if((byte~) mode_twoplanebitmap::$21==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_twoplanebitmap::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b6
  //SEG700 mode_twoplanebitmap::@13
  //SEG701 [375] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/word/signed word/dword/signed dword) $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
  //SEG702 [376] (byte*) mode_twoplanebitmap::gfxa#2 ← ++ (byte*) mode_twoplanebitmap::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG703 [377] phi from mode_twoplanebitmap::@13 mode_twoplanebitmap::@6 to mode_twoplanebitmap::@7 [phi:mode_twoplanebitmap::@13/mode_twoplanebitmap::@6->mode_twoplanebitmap::@7]
  //SEG704 [377] phi (byte*) mode_twoplanebitmap::gfxa#7 = (byte*) mode_twoplanebitmap::gfxa#2 [phi:mode_twoplanebitmap::@13/mode_twoplanebitmap::@6->mode_twoplanebitmap::@7#0] -- register_copy 
  //SEG705 mode_twoplanebitmap::@7
  b7:
  //SEG706 [378] (byte) mode_twoplanebitmap::ax#1 ← ++ (byte) mode_twoplanebitmap::ax#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG707 [379] if((byte) mode_twoplanebitmap::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_twoplanebitmap::@5 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b5
  //SEG708 mode_twoplanebitmap::@15
  //SEG709 [380] (byte) mode_twoplanebitmap::ay#1 ← ++ (byte) mode_twoplanebitmap::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG710 [381] if((byte) mode_twoplanebitmap::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_twoplanebitmap::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda ay
    cmp #$c8
    bne b4
  //SEG711 [382] phi from mode_twoplanebitmap::@15 to mode_twoplanebitmap::@8 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@8]
  //SEG712 [382] phi (byte) mode_twoplanebitmap::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@8#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG713 [382] phi (byte*) mode_twoplanebitmap::gfxb#3 = (const byte*) mode_twoplanebitmap::PLANEB#0 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@8#1] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta gfxb
    lda #>PLANEB
    sta gfxb+1
  //SEG714 [382] phi from mode_twoplanebitmap::@17 to mode_twoplanebitmap::@8 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@8]
  //SEG715 [382] phi (byte) mode_twoplanebitmap::by#4 = (byte) mode_twoplanebitmap::by#1 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@8#0] -- register_copy 
  //SEG716 [382] phi (byte*) mode_twoplanebitmap::gfxb#3 = (byte*) mode_twoplanebitmap::gfxb#1 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@8#1] -- register_copy 
  //SEG717 mode_twoplanebitmap::@8
  b8:
  //SEG718 [383] phi from mode_twoplanebitmap::@8 to mode_twoplanebitmap::@9 [phi:mode_twoplanebitmap::@8->mode_twoplanebitmap::@9]
  //SEG719 [383] phi (byte) mode_twoplanebitmap::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@8->mode_twoplanebitmap::@9#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG720 [383] phi (byte*) mode_twoplanebitmap::gfxb#2 = (byte*) mode_twoplanebitmap::gfxb#3 [phi:mode_twoplanebitmap::@8->mode_twoplanebitmap::@9#1] -- register_copy 
  //SEG721 [383] phi from mode_twoplanebitmap::@9 to mode_twoplanebitmap::@9 [phi:mode_twoplanebitmap::@9->mode_twoplanebitmap::@9]
  //SEG722 [383] phi (byte) mode_twoplanebitmap::bx#2 = (byte) mode_twoplanebitmap::bx#1 [phi:mode_twoplanebitmap::@9->mode_twoplanebitmap::@9#0] -- register_copy 
  //SEG723 [383] phi (byte*) mode_twoplanebitmap::gfxb#2 = (byte*) mode_twoplanebitmap::gfxb#1 [phi:mode_twoplanebitmap::@9->mode_twoplanebitmap::@9#1] -- register_copy 
  //SEG724 mode_twoplanebitmap::@9
  b9:
  //SEG725 [384] *((byte*) mode_twoplanebitmap::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $f -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
  //SEG726 [385] (byte*) mode_twoplanebitmap::gfxb#1 ← ++ (byte*) mode_twoplanebitmap::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG727 [386] (byte) mode_twoplanebitmap::bx#1 ← ++ (byte) mode_twoplanebitmap::bx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG728 [387] if((byte) mode_twoplanebitmap::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_twoplanebitmap::@9 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b9
  //SEG729 mode_twoplanebitmap::@17
  //SEG730 [388] (byte) mode_twoplanebitmap::by#1 ← ++ (byte) mode_twoplanebitmap::by#4 -- vbuz1=_inc_vbuz1 
    inc by
  //SEG731 [389] if((byte) mode_twoplanebitmap::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_twoplanebitmap::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda by
    cmp #$c8
    bne b8
  //SEG732 [390] phi from mode_twoplanebitmap::@17 to mode_twoplanebitmap::@18 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@18]
  //SEG733 mode_twoplanebitmap::@18
  //SEG734 [391] call mode_ctrl 
  //SEG735 [155] phi from mode_twoplanebitmap::@18 to mode_ctrl [phi:mode_twoplanebitmap::@18->mode_ctrl]
  //SEG736 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0 [phi:mode_twoplanebitmap::@18->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR|DTV_LINEAR
    sta dtv_control
    jsr mode_ctrl
  //SEG737 mode_twoplanebitmap::@return
  //SEG738 [392] return 
    rts
  //SEG739 mode_twoplanebitmap::@6
  b6:
  //SEG740 [393] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (gfxa),y
  //SEG741 [394] (byte*) mode_twoplanebitmap::gfxa#1 ← ++ (byte*) mode_twoplanebitmap::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
    jmp b7
}
//SEG742 mode_sixsfred2
// Sixs Fred Mode 2 - 8bpp Packed Bitmap - Generated from the two DTV linear graphics plane counters
// Two Plane MultiColor Bitmap - 8bpp Packed Bitmap (CHUNK/COLDIS/HICOL = 0, ECM/BMM/MCM/LINEAR = 1)
// Resolution: 160x200
// Linear Adressing
// PlaneA Pixel Shifter (2), PlaneB Pixel Shifter (2):
// - 8bpp color (PlaneB[1:0],ColorData[5:4],PlaneA[1:0],ColorData[1:0])
mode_sixsfred2: {
    .label PLANEA = $4000
    .label PLANEB = $6000
    .label COLORS = $8000
    .label _15 = 7
    .label col = 2
    .label cy = 4
    .label gfxa = 2
    .label ay = 4
    .label gfxb = 2
    .label by = 4
  //SEG743 [395] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_LINEAR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_LINEAR
    sta DTV_CONTROL
  //SEG744 [396] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG745 [397] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG746 [398] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) mode_sixsfred2::PLANEA#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane A Counter
    lda #<PLANEA
    sta DTV_PLANEA_START_LO
  //SEG747 [399] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) mode_sixsfred2::PLANEA#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEA
    sta DTV_PLANEA_START_MI
  //SEG748 [400] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG749 [401] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG750 [402] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG751 [403] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEA_MODULO_HI
  //SEG752 [404] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) mode_sixsfred2::PLANEB#0 -- _deref_pbuc1=vbuc2 
    // Linear Graphics Plane B Counter
    lda #<PLANEB
    sta DTV_PLANEB_START_LO
  //SEG753 [405] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) mode_sixsfred2::PLANEB#0 -- _deref_pbuc1=vbuc2 
    lda #>PLANEB
    sta DTV_PLANEB_START_MI
  //SEG754 [406] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG755 [407] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
  //SEG756 [408] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG757 [409] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_MODULO_HI
  //SEG758 [410] *((const byte*) DTV_COLOR_BANK_LO#0) ← <(const byte*) mode_sixsfred2::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG759 [411] *((const byte*) DTV_COLOR_BANK_HI#0) ← >(const byte*) mode_sixsfred2::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #>COLORS/$400
    sta DTV_COLOR_BANK_HI
  //SEG760 [412] phi from mode_sixsfred2 to mode_sixsfred2::@1 [phi:mode_sixsfred2->mode_sixsfred2::@1]
  //SEG761 [412] phi (byte) mode_sixsfred2::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2->mode_sixsfred2::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - Grey Tones
  //SEG762 [412] phi from mode_sixsfred2::@1 to mode_sixsfred2::@1 [phi:mode_sixsfred2::@1->mode_sixsfred2::@1]
  //SEG763 [412] phi (byte) mode_sixsfred2::i#2 = (byte) mode_sixsfred2::i#1 [phi:mode_sixsfred2::@1->mode_sixsfred2::@1#0] -- register_copy 
  //SEG764 mode_sixsfred2::@1
  b1:
  //SEG765 [413] *((const byte*) DTV_PALETTE#0 + (byte) mode_sixsfred2::i#2) ← (byte) mode_sixsfred2::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG766 [414] (byte) mode_sixsfred2::i#1 ← ++ (byte) mode_sixsfred2::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG767 [415] if((byte) mode_sixsfred2::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_sixsfred2::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG768 mode_sixsfred2::@8
  //SEG769 [416] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG770 [417] phi from mode_sixsfred2::@8 to mode_sixsfred2::@2 [phi:mode_sixsfred2::@8->mode_sixsfred2::@2]
  //SEG771 [417] phi (byte*) mode_sixsfred2::col#3 = (const byte*) mode_sixsfred2::COLORS#0 [phi:mode_sixsfred2::@8->mode_sixsfred2::@2#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG772 [417] phi (byte) mode_sixsfred2::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@8->mode_sixsfred2::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG773 [417] phi from mode_sixsfred2::@9 to mode_sixsfred2::@2 [phi:mode_sixsfred2::@9->mode_sixsfred2::@2]
  //SEG774 [417] phi (byte*) mode_sixsfred2::col#3 = (byte*) mode_sixsfred2::col#1 [phi:mode_sixsfred2::@9->mode_sixsfred2::@2#0] -- register_copy 
  //SEG775 [417] phi (byte) mode_sixsfred2::cy#4 = (byte) mode_sixsfred2::cy#1 [phi:mode_sixsfred2::@9->mode_sixsfred2::@2#1] -- register_copy 
  //SEG776 mode_sixsfred2::@2
  b2:
  //SEG777 [418] phi from mode_sixsfred2::@2 to mode_sixsfred2::@3 [phi:mode_sixsfred2::@2->mode_sixsfred2::@3]
  //SEG778 [418] phi (byte*) mode_sixsfred2::col#2 = (byte*) mode_sixsfred2::col#3 [phi:mode_sixsfred2::@2->mode_sixsfred2::@3#0] -- register_copy 
  //SEG779 [418] phi (byte) mode_sixsfred2::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@2->mode_sixsfred2::@3#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG780 [418] phi from mode_sixsfred2::@3 to mode_sixsfred2::@3 [phi:mode_sixsfred2::@3->mode_sixsfred2::@3]
  //SEG781 [418] phi (byte*) mode_sixsfred2::col#2 = (byte*) mode_sixsfred2::col#1 [phi:mode_sixsfred2::@3->mode_sixsfred2::@3#0] -- register_copy 
  //SEG782 [418] phi (byte) mode_sixsfred2::cx#2 = (byte) mode_sixsfred2::cx#1 [phi:mode_sixsfred2::@3->mode_sixsfred2::@3#1] -- register_copy 
  //SEG783 mode_sixsfred2::@3
  b3:
  //SEG784 [419] (byte~) mode_sixsfred2::$14 ← (byte) mode_sixsfred2::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #3
  //SEG785 [420] (byte~) mode_sixsfred2::$15 ← (byte~) mode_sixsfred2::$14 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _15
  //SEG786 [421] (byte~) mode_sixsfred2::$16 ← (byte) mode_sixsfred2::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuz1_band_vbuc1 
    lda #3
    and cy
  //SEG787 [422] (byte~) mode_sixsfred2::$17 ← (byte~) mode_sixsfred2::$15 | (byte~) mode_sixsfred2::$16 -- vbuaa=vbuz1_bor_vbuaa 
    ora _15
  //SEG788 [423] *((byte*) mode_sixsfred2::col#2) ← (byte~) mode_sixsfred2::$17 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG789 [424] (byte*) mode_sixsfred2::col#1 ← ++ (byte*) mode_sixsfred2::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG790 [425] (byte) mode_sixsfred2::cx#1 ← ++ (byte) mode_sixsfred2::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG791 [426] if((byte) mode_sixsfred2::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred2::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3
  //SEG792 mode_sixsfred2::@9
  //SEG793 [427] (byte) mode_sixsfred2::cy#1 ← ++ (byte) mode_sixsfred2::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG794 [428] if((byte) mode_sixsfred2::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_sixsfred2::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2
  //SEG795 [429] phi from mode_sixsfred2::@9 to mode_sixsfred2::@4 [phi:mode_sixsfred2::@9->mode_sixsfred2::@4]
  //SEG796 [429] phi (byte*) mode_sixsfred2::gfxa#3 = (const byte*) mode_sixsfred2::PLANEA#0 [phi:mode_sixsfred2::@9->mode_sixsfred2::@4#0] -- pbuz1=pbuc1 
    lda #<PLANEA
    sta gfxa
    lda #>PLANEA
    sta gfxa+1
  //SEG797 [429] phi (byte) mode_sixsfred2::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@9->mode_sixsfred2::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
  //SEG798 [429] phi from mode_sixsfred2::@11 to mode_sixsfred2::@4 [phi:mode_sixsfred2::@11->mode_sixsfred2::@4]
  //SEG799 [429] phi (byte*) mode_sixsfred2::gfxa#3 = (byte*) mode_sixsfred2::gfxa#1 [phi:mode_sixsfred2::@11->mode_sixsfred2::@4#0] -- register_copy 
  //SEG800 [429] phi (byte) mode_sixsfred2::ay#4 = (byte) mode_sixsfred2::ay#1 [phi:mode_sixsfred2::@11->mode_sixsfred2::@4#1] -- register_copy 
  //SEG801 mode_sixsfred2::@4
  b4:
  //SEG802 [430] phi from mode_sixsfred2::@4 to mode_sixsfred2::@5 [phi:mode_sixsfred2::@4->mode_sixsfred2::@5]
  //SEG803 [430] phi (byte) mode_sixsfred2::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@4->mode_sixsfred2::@5#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG804 [430] phi (byte*) mode_sixsfred2::gfxa#2 = (byte*) mode_sixsfred2::gfxa#3 [phi:mode_sixsfred2::@4->mode_sixsfred2::@5#1] -- register_copy 
  //SEG805 [430] phi from mode_sixsfred2::@5 to mode_sixsfred2::@5 [phi:mode_sixsfred2::@5->mode_sixsfred2::@5]
  //SEG806 [430] phi (byte) mode_sixsfred2::ax#2 = (byte) mode_sixsfred2::ax#1 [phi:mode_sixsfred2::@5->mode_sixsfred2::@5#0] -- register_copy 
  //SEG807 [430] phi (byte*) mode_sixsfred2::gfxa#2 = (byte*) mode_sixsfred2::gfxa#1 [phi:mode_sixsfred2::@5->mode_sixsfred2::@5#1] -- register_copy 
  //SEG808 mode_sixsfred2::@5
  b5:
  //SEG809 [431] (byte~) mode_sixsfred2::$20 ← (byte) mode_sixsfred2::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_ror_1 
    lda ay
    lsr
  //SEG810 [432] (byte) mode_sixsfred2::row#0 ← (byte~) mode_sixsfred2::$20 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuaa_band_vbuc1 
    and #3
  //SEG811 [433] *((byte*) mode_sixsfred2::gfxa#2) ← *((const byte[]) mode_sixsfred2::row_bitmask#0 + (byte) mode_sixsfred2::row#0) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
  //SEG812 [434] (byte*) mode_sixsfred2::gfxa#1 ← ++ (byte*) mode_sixsfred2::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG813 [435] (byte) mode_sixsfred2::ax#1 ← ++ (byte) mode_sixsfred2::ax#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG814 [436] if((byte) mode_sixsfred2::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred2::@5 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b5
  //SEG815 mode_sixsfred2::@11
  //SEG816 [437] (byte) mode_sixsfred2::ay#1 ← ++ (byte) mode_sixsfred2::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG817 [438] if((byte) mode_sixsfred2::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_sixsfred2::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda ay
    cmp #$c8
    bne b4
  //SEG818 [439] phi from mode_sixsfred2::@11 to mode_sixsfred2::@6 [phi:mode_sixsfred2::@11->mode_sixsfred2::@6]
  //SEG819 [439] phi (byte) mode_sixsfred2::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@11->mode_sixsfred2::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG820 [439] phi (byte*) mode_sixsfred2::gfxb#3 = (const byte*) mode_sixsfred2::PLANEB#0 [phi:mode_sixsfred2::@11->mode_sixsfred2::@6#1] -- pbuz1=pbuc1 
    lda #<PLANEB
    sta gfxb
    lda #>PLANEB
    sta gfxb+1
  //SEG821 [439] phi from mode_sixsfred2::@13 to mode_sixsfred2::@6 [phi:mode_sixsfred2::@13->mode_sixsfred2::@6]
  //SEG822 [439] phi (byte) mode_sixsfred2::by#4 = (byte) mode_sixsfred2::by#1 [phi:mode_sixsfred2::@13->mode_sixsfred2::@6#0] -- register_copy 
  //SEG823 [439] phi (byte*) mode_sixsfred2::gfxb#3 = (byte*) mode_sixsfred2::gfxb#1 [phi:mode_sixsfred2::@13->mode_sixsfred2::@6#1] -- register_copy 
  //SEG824 mode_sixsfred2::@6
  b6:
  //SEG825 [440] phi from mode_sixsfred2::@6 to mode_sixsfred2::@7 [phi:mode_sixsfred2::@6->mode_sixsfred2::@7]
  //SEG826 [440] phi (byte) mode_sixsfred2::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_sixsfred2::@6->mode_sixsfred2::@7#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG827 [440] phi (byte*) mode_sixsfred2::gfxb#2 = (byte*) mode_sixsfred2::gfxb#3 [phi:mode_sixsfred2::@6->mode_sixsfred2::@7#1] -- register_copy 
  //SEG828 [440] phi from mode_sixsfred2::@7 to mode_sixsfred2::@7 [phi:mode_sixsfred2::@7->mode_sixsfred2::@7]
  //SEG829 [440] phi (byte) mode_sixsfred2::bx#2 = (byte) mode_sixsfred2::bx#1 [phi:mode_sixsfred2::@7->mode_sixsfred2::@7#0] -- register_copy 
  //SEG830 [440] phi (byte*) mode_sixsfred2::gfxb#2 = (byte*) mode_sixsfred2::gfxb#1 [phi:mode_sixsfred2::@7->mode_sixsfred2::@7#1] -- register_copy 
  //SEG831 mode_sixsfred2::@7
  b7:
  //SEG832 [441] *((byte*) mode_sixsfred2::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $1b -- _deref_pbuz1=vbuc1 
    lda #$1b
    ldy #0
    sta (gfxb),y
  //SEG833 [442] (byte*) mode_sixsfred2::gfxb#1 ← ++ (byte*) mode_sixsfred2::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG834 [443] (byte) mode_sixsfred2::bx#1 ← ++ (byte) mode_sixsfred2::bx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG835 [444] if((byte) mode_sixsfred2::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_sixsfred2::@7 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b7
  //SEG836 mode_sixsfred2::@13
  //SEG837 [445] (byte) mode_sixsfred2::by#1 ← ++ (byte) mode_sixsfred2::by#4 -- vbuz1=_inc_vbuz1 
    inc by
  //SEG838 [446] if((byte) mode_sixsfred2::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto mode_sixsfred2::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda by
    cmp #$c8
    bne b6
  //SEG839 [447] phi from mode_sixsfred2::@13 to mode_sixsfred2::@14 [phi:mode_sixsfred2::@13->mode_sixsfred2::@14]
  //SEG840 mode_sixsfred2::@14
  //SEG841 [448] call mode_ctrl 
  //SEG842 [155] phi from mode_sixsfred2::@14 to mode_ctrl [phi:mode_sixsfred2::@14->mode_ctrl]
  //SEG843 [155] phi (byte) dtv_control#145 = (const byte) DTV_LINEAR#0 [phi:mode_sixsfred2::@14->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_LINEAR
    sta dtv_control
    jsr mode_ctrl
  //SEG844 mode_sixsfred2::@return
  //SEG845 [449] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
//SEG846 mode_hicolmcchar
// High Color Multicolor Character Mode (LINEAR/CHUNK/COLDIS/BMM/ECM = 0, MCM/HICOL = 1)
// Resolution: 160x200 (320x200)
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
//GfxData Pixel Shifter (1) if ColorData[3:3] = 0:
// - 0: 8bpp BgColor0[7:0]
// - 1: 8bpp ColorData[7:4] "0" & Color[2:0]
//GfxData Pixel Shifter (2) if ColorData[3:3] = 1:
// - 00: 8bpp BgColor0[7:0]
// - 01: 8bpp BgColor1[7:0]
// - 10: 8bpp BgColor2[7:0]
// - 11: 8bpp ColorData[7:4] "0" & Color[2:0]
mode_hicolmcchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $8400
    .label _26 = 7
    .label col = 2
    .label ch = 5
    .label cy = 4
  //SEG847 [450] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolmcchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG848 [451] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG849 [452] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolmcchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG850 [453] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR
    sta DTV_CONTROL
  //SEG851 [454] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG852 [455] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolmcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG853 [456] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG854 [457] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL|VIC_MCM
    sta VIC_CONTROL2
  //SEG855 [458] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolmcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolmcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG856 [459] phi from mode_hicolmcchar to mode_hicolmcchar::@1 [phi:mode_hicolmcchar->mode_hicolmcchar::@1]
  //SEG857 [459] phi (byte) mode_hicolmcchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolmcchar->mode_hicolmcchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - Grey Tones
  //SEG858 [459] phi from mode_hicolmcchar::@1 to mode_hicolmcchar::@1 [phi:mode_hicolmcchar::@1->mode_hicolmcchar::@1]
  //SEG859 [459] phi (byte) mode_hicolmcchar::i#2 = (byte) mode_hicolmcchar::i#1 [phi:mode_hicolmcchar::@1->mode_hicolmcchar::@1#0] -- register_copy 
  //SEG860 mode_hicolmcchar::@1
  b1:
  //SEG861 [460] *((const byte*) DTV_PALETTE#0 + (byte) mode_hicolmcchar::i#2) ← (byte) mode_hicolmcchar::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG862 [461] (byte) mode_hicolmcchar::i#1 ← ++ (byte) mode_hicolmcchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG863 [462] if((byte) mode_hicolmcchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_hicolmcchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG864 mode_hicolmcchar::@4
  //SEG865 [463] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG866 [464] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $50 -- _deref_pbuc1=vbuc2 
    lda #$50
    sta BGCOL1
  //SEG867 [465] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) $54 -- _deref_pbuc1=vbuc2 
    lda #$54
    sta BGCOL2
  //SEG868 [466] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) $58 -- _deref_pbuc1=vbuc2 
    lda #$58
    sta BGCOL3
  //SEG869 [467] phi from mode_hicolmcchar::@4 to mode_hicolmcchar::@2 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@2]
  //SEG870 [467] phi (byte*) mode_hicolmcchar::ch#3 = (const byte*) mode_hicolmcchar::SCREEN#0 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG871 [467] phi (byte*) mode_hicolmcchar::col#3 = (const byte*) mode_hicolmcchar::COLORS#0 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG872 [467] phi (byte) mode_hicolmcchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolmcchar::@4->mode_hicolmcchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG873 [467] phi from mode_hicolmcchar::@5 to mode_hicolmcchar::@2 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@2]
  //SEG874 [467] phi (byte*) mode_hicolmcchar::ch#3 = (byte*) mode_hicolmcchar::ch#1 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@2#0] -- register_copy 
  //SEG875 [467] phi (byte*) mode_hicolmcchar::col#3 = (byte*) mode_hicolmcchar::col#1 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@2#1] -- register_copy 
  //SEG876 [467] phi (byte) mode_hicolmcchar::cy#4 = (byte) mode_hicolmcchar::cy#1 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@2#2] -- register_copy 
  //SEG877 mode_hicolmcchar::@2
  b2:
  //SEG878 [468] phi from mode_hicolmcchar::@2 to mode_hicolmcchar::@3 [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3]
  //SEG879 [468] phi (byte*) mode_hicolmcchar::ch#2 = (byte*) mode_hicolmcchar::ch#3 [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3#0] -- register_copy 
  //SEG880 [468] phi (byte*) mode_hicolmcchar::col#2 = (byte*) mode_hicolmcchar::col#3 [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3#1] -- register_copy 
  //SEG881 [468] phi (byte) mode_hicolmcchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolmcchar::@2->mode_hicolmcchar::@3#2] -- vbuxx=vbuc1 
    ldx #0
  //SEG882 [468] phi from mode_hicolmcchar::@3 to mode_hicolmcchar::@3 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@3]
  //SEG883 [468] phi (byte*) mode_hicolmcchar::ch#2 = (byte*) mode_hicolmcchar::ch#1 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@3#0] -- register_copy 
  //SEG884 [468] phi (byte*) mode_hicolmcchar::col#2 = (byte*) mode_hicolmcchar::col#1 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@3#1] -- register_copy 
  //SEG885 [468] phi (byte) mode_hicolmcchar::cx#2 = (byte) mode_hicolmcchar::cx#1 [phi:mode_hicolmcchar::@3->mode_hicolmcchar::@3#2] -- register_copy 
  //SEG886 mode_hicolmcchar::@3
  b3:
  //SEG887 [469] (byte~) mode_hicolmcchar::$25 ← (byte) mode_hicolmcchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG888 [470] (byte~) mode_hicolmcchar::$26 ← (byte~) mode_hicolmcchar::$25 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _26
  //SEG889 [471] (byte~) mode_hicolmcchar::$27 ← (byte) mode_hicolmcchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG890 [472] (byte) mode_hicolmcchar::v#0 ← (byte~) mode_hicolmcchar::$26 | (byte~) mode_hicolmcchar::$27 -- vbuaa=vbuz1_bor_vbuaa 
    ora _26
  //SEG891 [473] *((byte*) mode_hicolmcchar::col#2) ← (byte) mode_hicolmcchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG892 [474] (byte*) mode_hicolmcchar::col#1 ← ++ (byte*) mode_hicolmcchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG893 [475] *((byte*) mode_hicolmcchar::ch#2) ← (byte) mode_hicolmcchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG894 [476] (byte*) mode_hicolmcchar::ch#1 ← ++ (byte*) mode_hicolmcchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG895 [477] (byte) mode_hicolmcchar::cx#1 ← ++ (byte) mode_hicolmcchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG896 [478] if((byte) mode_hicolmcchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_hicolmcchar::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3
  //SEG897 mode_hicolmcchar::@5
  //SEG898 [479] (byte) mode_hicolmcchar::cy#1 ← ++ (byte) mode_hicolmcchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG899 [480] if((byte) mode_hicolmcchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_hicolmcchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2
  //SEG900 [481] phi from mode_hicolmcchar::@5 to mode_hicolmcchar::@6 [phi:mode_hicolmcchar::@5->mode_hicolmcchar::@6]
  //SEG901 mode_hicolmcchar::@6
  //SEG902 [482] call mode_ctrl 
  //SEG903 [155] phi from mode_hicolmcchar::@6 to mode_ctrl [phi:mode_hicolmcchar::@6->mode_ctrl]
  //SEG904 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0 [phi:mode_hicolmcchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR
    sta dtv_control
    jsr mode_ctrl
  //SEG905 mode_hicolmcchar::@return
  //SEG906 [483] return 
    rts
}
//SEG907 mode_hicolecmchar
// High Color Extended Background Color Character Mode (LINEAR/CHUNK/COLDIS/MCM/BMM = 0, ECM/HICOL = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & "00" & CharData[5:0] & RowCounter[2:0] )
// GfxData Pixel Shifter (1)
//  - 0: 8bpp Background Color
//    - CharData[7:6] 00: 8bpp BgColor0[7:0]
//    - CharData[7:6] 01: 8bpp BgColor1[7:0]
//    - CharData[7:6] 10: 8bpp BgColor2[7:0]
//    - CharData[7:6] 11: 8bpp BgColor3[7:0]
//  - 1: 8bpp ColorData[7:0]
mode_hicolecmchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $8400
    .label _26 = 7
    .label col = 2
    .label ch = 5
    .label cy = 4
  //SEG908 [484] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolecmchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG909 [485] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG910 [486] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolecmchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG911 [487] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR
    sta DTV_CONTROL
  //SEG912 [488] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG913 [489] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG914 [490] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(const byte) VIC_ECM#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|VIC_ECM|3
    sta VIC_CONTROL
  //SEG915 [491] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG916 [492] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG917 [493] phi from mode_hicolecmchar to mode_hicolecmchar::@1 [phi:mode_hicolecmchar->mode_hicolecmchar::@1]
  //SEG918 [493] phi (byte) mode_hicolecmchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolecmchar->mode_hicolecmchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - Grey Tones
  //SEG919 [493] phi from mode_hicolecmchar::@1 to mode_hicolecmchar::@1 [phi:mode_hicolecmchar::@1->mode_hicolecmchar::@1]
  //SEG920 [493] phi (byte) mode_hicolecmchar::i#2 = (byte) mode_hicolecmchar::i#1 [phi:mode_hicolecmchar::@1->mode_hicolecmchar::@1#0] -- register_copy 
  //SEG921 mode_hicolecmchar::@1
  b1:
  //SEG922 [494] *((const byte*) DTV_PALETTE#0 + (byte) mode_hicolecmchar::i#2) ← (byte) mode_hicolecmchar::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG923 [495] (byte) mode_hicolecmchar::i#1 ← ++ (byte) mode_hicolecmchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG924 [496] if((byte) mode_hicolecmchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_hicolecmchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG925 mode_hicolecmchar::@4
  //SEG926 [497] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG927 [498] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) $50 -- _deref_pbuc1=vbuc2 
    lda #$50
    sta BGCOL1
  //SEG928 [499] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) $54 -- _deref_pbuc1=vbuc2 
    lda #$54
    sta BGCOL2
  //SEG929 [500] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) $58 -- _deref_pbuc1=vbuc2 
    lda #$58
    sta BGCOL3
  //SEG930 [501] *((const byte*) BGCOL4#0) ← (byte/signed byte/word/signed word/dword/signed dword) $5c -- _deref_pbuc1=vbuc2 
    lda #$5c
    sta BGCOL4
  //SEG931 [502] phi from mode_hicolecmchar::@4 to mode_hicolecmchar::@2 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@2]
  //SEG932 [502] phi (byte*) mode_hicolecmchar::ch#3 = (const byte*) mode_hicolecmchar::SCREEN#0 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG933 [502] phi (byte*) mode_hicolecmchar::col#3 = (const byte*) mode_hicolecmchar::COLORS#0 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG934 [502] phi (byte) mode_hicolecmchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolecmchar::@4->mode_hicolecmchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG935 [502] phi from mode_hicolecmchar::@5 to mode_hicolecmchar::@2 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@2]
  //SEG936 [502] phi (byte*) mode_hicolecmchar::ch#3 = (byte*) mode_hicolecmchar::ch#1 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@2#0] -- register_copy 
  //SEG937 [502] phi (byte*) mode_hicolecmchar::col#3 = (byte*) mode_hicolecmchar::col#1 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@2#1] -- register_copy 
  //SEG938 [502] phi (byte) mode_hicolecmchar::cy#4 = (byte) mode_hicolecmchar::cy#1 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@2#2] -- register_copy 
  //SEG939 mode_hicolecmchar::@2
  b2:
  //SEG940 [503] phi from mode_hicolecmchar::@2 to mode_hicolecmchar::@3 [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3]
  //SEG941 [503] phi (byte*) mode_hicolecmchar::ch#2 = (byte*) mode_hicolecmchar::ch#3 [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3#0] -- register_copy 
  //SEG942 [503] phi (byte*) mode_hicolecmchar::col#2 = (byte*) mode_hicolecmchar::col#3 [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3#1] -- register_copy 
  //SEG943 [503] phi (byte) mode_hicolecmchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolecmchar::@2->mode_hicolecmchar::@3#2] -- vbuxx=vbuc1 
    ldx #0
  //SEG944 [503] phi from mode_hicolecmchar::@3 to mode_hicolecmchar::@3 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@3]
  //SEG945 [503] phi (byte*) mode_hicolecmchar::ch#2 = (byte*) mode_hicolecmchar::ch#1 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@3#0] -- register_copy 
  //SEG946 [503] phi (byte*) mode_hicolecmchar::col#2 = (byte*) mode_hicolecmchar::col#1 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@3#1] -- register_copy 
  //SEG947 [503] phi (byte) mode_hicolecmchar::cx#2 = (byte) mode_hicolecmchar::cx#1 [phi:mode_hicolecmchar::@3->mode_hicolecmchar::@3#2] -- register_copy 
  //SEG948 mode_hicolecmchar::@3
  b3:
  //SEG949 [504] (byte~) mode_hicolecmchar::$25 ← (byte) mode_hicolecmchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG950 [505] (byte~) mode_hicolecmchar::$26 ← (byte~) mode_hicolecmchar::$25 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _26
  //SEG951 [506] (byte~) mode_hicolecmchar::$27 ← (byte) mode_hicolecmchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG952 [507] (byte) mode_hicolecmchar::v#0 ← (byte~) mode_hicolecmchar::$26 | (byte~) mode_hicolecmchar::$27 -- vbuaa=vbuz1_bor_vbuaa 
    ora _26
  //SEG953 [508] *((byte*) mode_hicolecmchar::col#2) ← (byte) mode_hicolecmchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG954 [509] (byte*) mode_hicolecmchar::col#1 ← ++ (byte*) mode_hicolecmchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG955 [510] *((byte*) mode_hicolecmchar::ch#2) ← (byte) mode_hicolecmchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG956 [511] (byte*) mode_hicolecmchar::ch#1 ← ++ (byte*) mode_hicolecmchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG957 [512] (byte) mode_hicolecmchar::cx#1 ← ++ (byte) mode_hicolecmchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG958 [513] if((byte) mode_hicolecmchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_hicolecmchar::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3
  //SEG959 mode_hicolecmchar::@5
  //SEG960 [514] (byte) mode_hicolecmchar::cy#1 ← ++ (byte) mode_hicolecmchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG961 [515] if((byte) mode_hicolecmchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_hicolecmchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2
  //SEG962 [516] phi from mode_hicolecmchar::@5 to mode_hicolecmchar::@6 [phi:mode_hicolecmchar::@5->mode_hicolecmchar::@6]
  //SEG963 mode_hicolecmchar::@6
  //SEG964 [517] call mode_ctrl 
  //SEG965 [155] phi from mode_hicolecmchar::@6 to mode_ctrl [phi:mode_hicolecmchar::@6->mode_ctrl]
  //SEG966 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0 [phi:mode_hicolecmchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR
    sta dtv_control
    jsr mode_ctrl
  //SEG967 mode_hicolecmchar::@return
  //SEG968 [518] return 
    rts
}
//SEG969 mode_hicolstdchar
// High Color Standard Character Mode (LINEAR/CHUNK/COLDIS/ECM/MCM/BMM = 0, HICOL = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
// Pixel Shifter (1)
//  - 0: 8bpp BgColor0[7:0]
//  - 1: 8bpp ColorData[7:0]
mode_hicolstdchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $8400
    .label _25 = 7
    .label col = 2
    .label ch = 5
    .label cy = 4
  //SEG970 [519] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_hicolstdchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG971 [520] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #COLORS/$400
    sta DTV_COLOR_BANK_LO
  //SEG972 [521] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const byte*) mode_hicolstdchar::COLORS#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG973 [522] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR
    sta DTV_CONTROL
  //SEG974 [523] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG975 [524] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_hicolstdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG976 [525] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG977 [526] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG978 [527] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_hicolstdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_hicolstdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG979 [528] phi from mode_hicolstdchar to mode_hicolstdchar::@1 [phi:mode_hicolstdchar->mode_hicolstdchar::@1]
  //SEG980 [528] phi (byte) mode_hicolstdchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolstdchar->mode_hicolstdchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - Grey Tones
  //SEG981 [528] phi from mode_hicolstdchar::@1 to mode_hicolstdchar::@1 [phi:mode_hicolstdchar::@1->mode_hicolstdchar::@1]
  //SEG982 [528] phi (byte) mode_hicolstdchar::i#2 = (byte) mode_hicolstdchar::i#1 [phi:mode_hicolstdchar::@1->mode_hicolstdchar::@1#0] -- register_copy 
  //SEG983 mode_hicolstdchar::@1
  b1:
  //SEG984 [529] *((const byte*) DTV_PALETTE#0 + (byte) mode_hicolstdchar::i#2) ← (byte) mode_hicolstdchar::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG985 [530] (byte) mode_hicolstdchar::i#1 ← ++ (byte) mode_hicolstdchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG986 [531] if((byte) mode_hicolstdchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_hicolstdchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG987 mode_hicolstdchar::@4
  //SEG988 [532] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BGCOL
  //SEG989 [533] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta BORDERCOL
  //SEG990 [534] phi from mode_hicolstdchar::@4 to mode_hicolstdchar::@2 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@2]
  //SEG991 [534] phi (byte*) mode_hicolstdchar::ch#3 = (const byte*) mode_hicolstdchar::SCREEN#0 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG992 [534] phi (byte*) mode_hicolstdchar::col#3 = (const byte*) mode_hicolstdchar::COLORS#0 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG993 [534] phi (byte) mode_hicolstdchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolstdchar::@4->mode_hicolstdchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG994 [534] phi from mode_hicolstdchar::@5 to mode_hicolstdchar::@2 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@2]
  //SEG995 [534] phi (byte*) mode_hicolstdchar::ch#3 = (byte*) mode_hicolstdchar::ch#1 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@2#0] -- register_copy 
  //SEG996 [534] phi (byte*) mode_hicolstdchar::col#3 = (byte*) mode_hicolstdchar::col#1 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@2#1] -- register_copy 
  //SEG997 [534] phi (byte) mode_hicolstdchar::cy#4 = (byte) mode_hicolstdchar::cy#1 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@2#2] -- register_copy 
  //SEG998 mode_hicolstdchar::@2
  b2:
  //SEG999 [535] phi from mode_hicolstdchar::@2 to mode_hicolstdchar::@3 [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3]
  //SEG1000 [535] phi (byte*) mode_hicolstdchar::ch#2 = (byte*) mode_hicolstdchar::ch#3 [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3#0] -- register_copy 
  //SEG1001 [535] phi (byte*) mode_hicolstdchar::col#2 = (byte*) mode_hicolstdchar::col#3 [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3#1] -- register_copy 
  //SEG1002 [535] phi (byte) mode_hicolstdchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_hicolstdchar::@2->mode_hicolstdchar::@3#2] -- vbuxx=vbuc1 
    ldx #0
  //SEG1003 [535] phi from mode_hicolstdchar::@3 to mode_hicolstdchar::@3 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@3]
  //SEG1004 [535] phi (byte*) mode_hicolstdchar::ch#2 = (byte*) mode_hicolstdchar::ch#1 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@3#0] -- register_copy 
  //SEG1005 [535] phi (byte*) mode_hicolstdchar::col#2 = (byte*) mode_hicolstdchar::col#1 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@3#1] -- register_copy 
  //SEG1006 [535] phi (byte) mode_hicolstdchar::cx#2 = (byte) mode_hicolstdchar::cx#1 [phi:mode_hicolstdchar::@3->mode_hicolstdchar::@3#2] -- register_copy 
  //SEG1007 mode_hicolstdchar::@3
  b3:
  //SEG1008 [536] (byte~) mode_hicolstdchar::$24 ← (byte) mode_hicolstdchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG1009 [537] (byte~) mode_hicolstdchar::$25 ← (byte~) mode_hicolstdchar::$24 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _25
  //SEG1010 [538] (byte~) mode_hicolstdchar::$26 ← (byte) mode_hicolstdchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG1011 [539] (byte) mode_hicolstdchar::v#0 ← (byte~) mode_hicolstdchar::$25 | (byte~) mode_hicolstdchar::$26 -- vbuaa=vbuz1_bor_vbuaa 
    ora _25
  //SEG1012 [540] *((byte*) mode_hicolstdchar::col#2) ← (byte) mode_hicolstdchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG1013 [541] (byte*) mode_hicolstdchar::col#1 ← ++ (byte*) mode_hicolstdchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG1014 [542] *((byte*) mode_hicolstdchar::ch#2) ← (byte) mode_hicolstdchar::v#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1015 [543] (byte*) mode_hicolstdchar::ch#1 ← ++ (byte*) mode_hicolstdchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1016 [544] (byte) mode_hicolstdchar::cx#1 ← ++ (byte) mode_hicolstdchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1017 [545] if((byte) mode_hicolstdchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_hicolstdchar::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3
  //SEG1018 mode_hicolstdchar::@5
  //SEG1019 [546] (byte) mode_hicolstdchar::cy#1 ← ++ (byte) mode_hicolstdchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1020 [547] if((byte) mode_hicolstdchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_hicolstdchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2
  //SEG1021 [548] phi from mode_hicolstdchar::@5 to mode_hicolstdchar::@6 [phi:mode_hicolstdchar::@5->mode_hicolstdchar::@6]
  //SEG1022 mode_hicolstdchar::@6
  //SEG1023 [549] call mode_ctrl 
  //SEG1024 [155] phi from mode_hicolstdchar::@6 to mode_ctrl [phi:mode_hicolstdchar::@6->mode_ctrl]
  //SEG1025 [155] phi (byte) dtv_control#145 = (const byte) DTV_HIGHCOLOR#0 [phi:mode_hicolstdchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #DTV_HIGHCOLOR
    sta dtv_control
    jsr mode_ctrl
  //SEG1026 mode_hicolstdchar::@return
  //SEG1027 [550] return 
    rts
}
//SEG1028 mode_stdbitmap
// Standard Bitmap Mode (LINEAR/HICOL/CHUNK/COLDIS/MCM/ECM = 0, BMM = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:2] & Matrix[9:0] & RowCounter[2:0] )
// Pixel Shifter (1)
//  - 0: 4bpp CharData[3:0]
//  - 1: 4bpp CharData[7:4]
mode_stdbitmap: {
    .label SCREEN = $4000
    .label BITMAP = $6000
    .const lines_cnt = 9
    .label col2 = 7
    .label ch = 2
    .label cy = 4
    .label l = 4
  //SEG1029 [551] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_stdbitmap::BITMAP#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&BITMAP)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG1030 [552] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_CONTROL
  //SEG1031 [553] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG1032 [554] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_stdbitmap::BITMAP#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^BITMAP/$4000
    sta CIA2_PORT_A
  //SEG1033 [555] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG1034 [556] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG1035 [557] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_stdbitmap::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_stdbitmap::BITMAP#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(BITMAP&$3fff)/$400
    sta VIC_MEMORY
  //SEG1036 [558] phi from mode_stdbitmap to mode_stdbitmap::@1 [phi:mode_stdbitmap->mode_stdbitmap::@1]
  //SEG1037 [558] phi (byte) mode_stdbitmap::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdbitmap->mode_stdbitmap::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - default
  //SEG1038 [558] phi from mode_stdbitmap::@1 to mode_stdbitmap::@1 [phi:mode_stdbitmap::@1->mode_stdbitmap::@1]
  //SEG1039 [558] phi (byte) mode_stdbitmap::i#2 = (byte) mode_stdbitmap::i#1 [phi:mode_stdbitmap::@1->mode_stdbitmap::@1#0] -- register_copy 
  //SEG1040 mode_stdbitmap::@1
  b1:
  //SEG1041 [559] *((const byte*) DTV_PALETTE#0 + (byte) mode_stdbitmap::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_stdbitmap::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
  //SEG1042 [560] (byte) mode_stdbitmap::i#1 ← ++ (byte) mode_stdbitmap::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1043 [561] if((byte) mode_stdbitmap::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_stdbitmap::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG1044 mode_stdbitmap::@5
  //SEG1045 [562] *((const byte*) BGCOL#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #BLACK
    sta BGCOL
  //SEG1046 [563] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    sta BORDERCOL
  //SEG1047 [564] phi from mode_stdbitmap::@5 to mode_stdbitmap::@2 [phi:mode_stdbitmap::@5->mode_stdbitmap::@2]
  //SEG1048 [564] phi (byte*) mode_stdbitmap::ch#3 = (const byte*) mode_stdbitmap::SCREEN#0 [phi:mode_stdbitmap::@5->mode_stdbitmap::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG1049 [564] phi (byte) mode_stdbitmap::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdbitmap::@5->mode_stdbitmap::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG1050 [564] phi from mode_stdbitmap::@6 to mode_stdbitmap::@2 [phi:mode_stdbitmap::@6->mode_stdbitmap::@2]
  //SEG1051 [564] phi (byte*) mode_stdbitmap::ch#3 = (byte*) mode_stdbitmap::ch#1 [phi:mode_stdbitmap::@6->mode_stdbitmap::@2#0] -- register_copy 
  //SEG1052 [564] phi (byte) mode_stdbitmap::cy#4 = (byte) mode_stdbitmap::cy#1 [phi:mode_stdbitmap::@6->mode_stdbitmap::@2#1] -- register_copy 
  //SEG1053 mode_stdbitmap::@2
  b2:
  //SEG1054 [565] phi from mode_stdbitmap::@2 to mode_stdbitmap::@3 [phi:mode_stdbitmap::@2->mode_stdbitmap::@3]
  //SEG1055 [565] phi (byte*) mode_stdbitmap::ch#2 = (byte*) mode_stdbitmap::ch#3 [phi:mode_stdbitmap::@2->mode_stdbitmap::@3#0] -- register_copy 
  //SEG1056 [565] phi (byte) mode_stdbitmap::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdbitmap::@2->mode_stdbitmap::@3#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG1057 [565] phi from mode_stdbitmap::@3 to mode_stdbitmap::@3 [phi:mode_stdbitmap::@3->mode_stdbitmap::@3]
  //SEG1058 [565] phi (byte*) mode_stdbitmap::ch#2 = (byte*) mode_stdbitmap::ch#1 [phi:mode_stdbitmap::@3->mode_stdbitmap::@3#0] -- register_copy 
  //SEG1059 [565] phi (byte) mode_stdbitmap::cx#2 = (byte) mode_stdbitmap::cx#1 [phi:mode_stdbitmap::@3->mode_stdbitmap::@3#1] -- register_copy 
  //SEG1060 mode_stdbitmap::@3
  b3:
  //SEG1061 [566] (byte~) mode_stdbitmap::$19 ← (byte) mode_stdbitmap::cx#2 + (byte) mode_stdbitmap::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc cy
  //SEG1062 [567] (byte) mode_stdbitmap::col#0 ← (byte~) mode_stdbitmap::$19 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuyy=vbuaa_band_vbuc1 
    and #$f
    tay
  //SEG1063 [568] (byte) mode_stdbitmap::col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f - (byte) mode_stdbitmap::col#0 -- vbuz1=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    clc
    adc #$f+1
    sta col2
  //SEG1064 [569] (byte~) mode_stdbitmap::$22 ← (byte) mode_stdbitmap::col#0 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuyy_rol_4 
    tya
    asl
    asl
    asl
    asl
  //SEG1065 [570] (byte~) mode_stdbitmap::$23 ← (byte~) mode_stdbitmap::$22 | (byte) mode_stdbitmap::col2#0 -- vbuaa=vbuaa_bor_vbuz1 
    ora col2
  //SEG1066 [571] *((byte*) mode_stdbitmap::ch#2) ← (byte~) mode_stdbitmap::$23 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1067 [572] (byte*) mode_stdbitmap::ch#1 ← ++ (byte*) mode_stdbitmap::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1068 [573] (byte) mode_stdbitmap::cx#1 ← ++ (byte) mode_stdbitmap::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1069 [574] if((byte) mode_stdbitmap::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_stdbitmap::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3
  //SEG1070 mode_stdbitmap::@6
  //SEG1071 [575] (byte) mode_stdbitmap::cy#1 ← ++ (byte) mode_stdbitmap::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1072 [576] if((byte) mode_stdbitmap::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_stdbitmap::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2
  //SEG1073 [577] phi from mode_stdbitmap::@6 to mode_stdbitmap::@7 [phi:mode_stdbitmap::@6->mode_stdbitmap::@7]
  //SEG1074 mode_stdbitmap::@7
  //SEG1075 [578] call bitmap_init 
  //SEG1076 [732] phi from mode_stdbitmap::@7 to bitmap_init [phi:mode_stdbitmap::@7->bitmap_init]
    jsr bitmap_init
  //SEG1077 [579] phi from mode_stdbitmap::@7 to mode_stdbitmap::@9 [phi:mode_stdbitmap::@7->mode_stdbitmap::@9]
  //SEG1078 mode_stdbitmap::@9
  //SEG1079 [580] call bitmap_clear 
    jsr bitmap_clear
  //SEG1080 [581] phi from mode_stdbitmap::@9 to mode_stdbitmap::@4 [phi:mode_stdbitmap::@9->mode_stdbitmap::@4]
  //SEG1081 [581] phi (byte) mode_stdbitmap::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdbitmap::@9->mode_stdbitmap::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG1082 [581] phi from mode_stdbitmap::@11 to mode_stdbitmap::@4 [phi:mode_stdbitmap::@11->mode_stdbitmap::@4]
  //SEG1083 [581] phi (byte) mode_stdbitmap::l#2 = (byte) mode_stdbitmap::l#1 [phi:mode_stdbitmap::@11->mode_stdbitmap::@4#0] -- register_copy 
  //SEG1084 mode_stdbitmap::@4
  b4:
  //SEG1085 [582] (byte) bitmap_line::x0#0 ← *((const byte[]) mode_stdbitmap::lines_x#0 + (byte) mode_stdbitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy l
    lda lines_x,y
    sta bitmap_line.x0
  //SEG1086 [583] (byte) bitmap_line::x1#0 ← *((const byte[]) mode_stdbitmap::lines_x#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mode_stdbitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda lines_x+1,y
    sta bitmap_line.x1
  //SEG1087 [584] (byte) bitmap_line::y0#0 ← *((const byte[]) mode_stdbitmap::lines_y#0 + (byte) mode_stdbitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda lines_y,y
    sta bitmap_line.y0
  //SEG1088 [585] (byte) bitmap_line::y1#0 ← *((const byte[]) mode_stdbitmap::lines_y#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mode_stdbitmap::l#2) -- vbuyy=pbuc1_derefidx_vbuz1 
    ldx l
    ldy lines_y+1,x
  //SEG1089 [586] call bitmap_line 
    jsr bitmap_line
  //SEG1090 mode_stdbitmap::@11
  //SEG1091 [587] (byte) mode_stdbitmap::l#1 ← ++ (byte) mode_stdbitmap::l#2 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG1092 [588] if((byte) mode_stdbitmap::l#1<(const byte) mode_stdbitmap::lines_cnt#0) goto mode_stdbitmap::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda l
    cmp #lines_cnt
    bcc b4
  //SEG1093 [589] phi from mode_stdbitmap::@11 to mode_stdbitmap::@8 [phi:mode_stdbitmap::@11->mode_stdbitmap::@8]
  //SEG1094 mode_stdbitmap::@8
  //SEG1095 [590] call mode_ctrl 
  //SEG1096 [155] phi from mode_stdbitmap::@8 to mode_ctrl [phi:mode_stdbitmap::@8->mode_ctrl]
  //SEG1097 [155] phi (byte) dtv_control#145 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdbitmap::@8->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #0
    sta dtv_control
    jsr mode_ctrl
  //SEG1098 mode_stdbitmap::@return
  //SEG1099 [591] return 
    rts
    lines_x: .byte 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80
    lines_y: .byte 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0
}
//SEG1100 bitmap_line
// Draw a line on the bitmap
// bitmap_line(byte zeropage(9) x0, byte zeropage($c) x1, byte zeropage($b) y0, byte register(Y) y1)
bitmap_line: {
    .label xd = 8
    .label yd = 7
    .label x0 = 9
    .label x1 = $c
    .label y0 = $b
  //SEG1101 [592] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda x0
    cmp x1
    bcc b1
  //SEG1102 bitmap_line::@15
  //SEG1103 [593] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 -- vbuz1=vbuz2_minus_vbuz3 
    sec
    sbc x1
    sta xd
  //SEG1104 [594] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@2 -- vbuz1_lt_vbuyy_then_la1 
    tya
    cmp y0
    beq !+
    bcs b2
  !:
  //SEG1105 bitmap_line::@16
  //SEG1106 [595] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuz1=vbuz2_minus_vbuyy 
    tya
    eor #$ff
    sec
    adc y0
    sta yd
  //SEG1107 [596] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@3 -- vbuz1_lt_vbuz2_then_la1 
    cmp xd
    bcc b3
  //SEG1108 bitmap_line::@17
  //SEG1109 [597] (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty bitmap_line_ydxi.y
  //SEG1110 [598] (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#0 -- vbuxx=vbuz1 
    ldx x1
  //SEG1111 [599] (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#0
  //SEG1112 [600] (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#2
  //SEG1113 [601] (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#2
  //SEG1114 [602] call bitmap_line_ydxi 
  //SEG1115 [676] phi from bitmap_line::@17 to bitmap_line_ydxi [phi:bitmap_line::@17->bitmap_line_ydxi]
  //SEG1116 [676] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#0 [phi:bitmap_line::@17->bitmap_line_ydxi#0] -- register_copy 
  //SEG1117 [676] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#0 [phi:bitmap_line::@17->bitmap_line_ydxi#1] -- register_copy 
  //SEG1118 [676] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#0 [phi:bitmap_line::@17->bitmap_line_ydxi#2] -- register_copy 
  //SEG1119 [676] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#0 [phi:bitmap_line::@17->bitmap_line_ydxi#3] -- register_copy 
  //SEG1120 [676] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#0 [phi:bitmap_line::@17->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
  //SEG1121 bitmap_line::@return
  breturn:
  //SEG1122 [603] return 
    rts
  //SEG1123 bitmap_line::@3
  b3:
  //SEG1124 [604] (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_xdyi.x
  //SEG1125 [605] (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty bitmap_line_xdyi.y
  //SEG1126 [606] (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#0
  //SEG1127 [607] (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#2
  //SEG1128 [608] (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#2
  //SEG1129 [609] call bitmap_line_xdyi 
  //SEG1130 [654] phi from bitmap_line::@3 to bitmap_line_xdyi [phi:bitmap_line::@3->bitmap_line_xdyi]
  //SEG1131 [654] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#0 [phi:bitmap_line::@3->bitmap_line_xdyi#0] -- register_copy 
  //SEG1132 [654] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#0 [phi:bitmap_line::@3->bitmap_line_xdyi#1] -- register_copy 
  //SEG1133 [654] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#0 [phi:bitmap_line::@3->bitmap_line_xdyi#2] -- register_copy 
  //SEG1134 [654] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#0 [phi:bitmap_line::@3->bitmap_line_xdyi#3] -- register_copy 
  //SEG1135 [654] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#0 [phi:bitmap_line::@3->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp breturn
  //SEG1136 bitmap_line::@2
  b2:
  //SEG1137 [610] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuz1=vbuyy_minus_vbuz2 
    tya
    sec
    sbc y0
    sta yd
  //SEG1138 [611] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@6 -- vbuz1_lt_vbuz2_then_la1 
    cmp xd
    bcc b6
  //SEG1139 bitmap_line::@20
  //SEG1140 [612] (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxd.y
  //SEG1141 [613] (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx x0
  //SEG1142 [614] (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty bitmap_line_ydxd.y1
  //SEG1143 [615] (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#1
  //SEG1144 [616] (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#2
  //SEG1145 [617] call bitmap_line_ydxd 
  //SEG1146 [706] phi from bitmap_line::@20 to bitmap_line_ydxd [phi:bitmap_line::@20->bitmap_line_ydxd]
  //SEG1147 [706] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#0 [phi:bitmap_line::@20->bitmap_line_ydxd#0] -- register_copy 
  //SEG1148 [706] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#0 [phi:bitmap_line::@20->bitmap_line_ydxd#1] -- register_copy 
  //SEG1149 [706] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#0 [phi:bitmap_line::@20->bitmap_line_ydxd#2] -- register_copy 
  //SEG1150 [706] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#0 [phi:bitmap_line::@20->bitmap_line_ydxd#3] -- register_copy 
  //SEG1151 [706] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#0 [phi:bitmap_line::@20->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp breturn
  //SEG1152 bitmap_line::@6
  b6:
  //SEG1153 [618] (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_xdyd.x
  //SEG1154 [619] (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty bitmap_line_xdyd.y
  //SEG1155 [620] (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyd.x1
  //SEG1156 [621] (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#2
  //SEG1157 [622] (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#1
  //SEG1158 [623] call bitmap_line_xdyd 
  //SEG1159 [691] phi from bitmap_line::@6 to bitmap_line_xdyd [phi:bitmap_line::@6->bitmap_line_xdyd]
  //SEG1160 [691] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#0 [phi:bitmap_line::@6->bitmap_line_xdyd#0] -- register_copy 
  //SEG1161 [691] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#0 [phi:bitmap_line::@6->bitmap_line_xdyd#1] -- register_copy 
  //SEG1162 [691] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#0 [phi:bitmap_line::@6->bitmap_line_xdyd#2] -- register_copy 
  //SEG1163 [691] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#0 [phi:bitmap_line::@6->bitmap_line_xdyd#3] -- register_copy 
  //SEG1164 [691] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#0 [phi:bitmap_line::@6->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp breturn
  //SEG1165 bitmap_line::@1
  b1:
  //SEG1166 [624] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda x1
    sec
    sbc x0
    sta xd
  //SEG1167 [625] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@9 -- vbuz1_lt_vbuyy_then_la1 
    tya
    cmp y0
    beq !+
    bcs b9
  !:
  //SEG1168 bitmap_line::@23
  //SEG1169 [626] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuz1=vbuz2_minus_vbuyy 
    tya
    eor #$ff
    sec
    adc y0
    sta yd
  //SEG1170 [627] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@10 -- vbuz1_lt_vbuz2_then_la1 
    cmp xd
    bcc b10
  //SEG1171 bitmap_line::@24
  //SEG1172 [628] (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty bitmap_line_ydxd.y
  //SEG1173 [629] (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#0 -- vbuxx=vbuz1 
    ldx x1
  //SEG1174 [630] (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#0
  //SEG1175 [631] (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10
  //SEG1176 [632] (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#1
  //SEG1177 [633] call bitmap_line_ydxd 
  //SEG1178 [706] phi from bitmap_line::@24 to bitmap_line_ydxd [phi:bitmap_line::@24->bitmap_line_ydxd]
  //SEG1179 [706] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#1 [phi:bitmap_line::@24->bitmap_line_ydxd#0] -- register_copy 
  //SEG1180 [706] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#1 [phi:bitmap_line::@24->bitmap_line_ydxd#1] -- register_copy 
  //SEG1181 [706] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#1 [phi:bitmap_line::@24->bitmap_line_ydxd#2] -- register_copy 
  //SEG1182 [706] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#1 [phi:bitmap_line::@24->bitmap_line_ydxd#3] -- register_copy 
  //SEG1183 [706] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#1 [phi:bitmap_line::@24->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp breturn
  //SEG1184 bitmap_line::@10
  b10:
  //SEG1185 [634] (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyd.x
  //SEG1186 [635] (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#0
  //SEG1187 [636] (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#0
  //SEG1188 [637] (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#1
  //SEG1189 [638] (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#10
  //SEG1190 [639] call bitmap_line_xdyd 
  //SEG1191 [691] phi from bitmap_line::@10 to bitmap_line_xdyd [phi:bitmap_line::@10->bitmap_line_xdyd]
  //SEG1192 [691] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#1 [phi:bitmap_line::@10->bitmap_line_xdyd#0] -- register_copy 
  //SEG1193 [691] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#1 [phi:bitmap_line::@10->bitmap_line_xdyd#1] -- register_copy 
  //SEG1194 [691] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#1 [phi:bitmap_line::@10->bitmap_line_xdyd#2] -- register_copy 
  //SEG1195 [691] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#1 [phi:bitmap_line::@10->bitmap_line_xdyd#3] -- register_copy 
  //SEG1196 [691] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#1 [phi:bitmap_line::@10->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp breturn
  //SEG1197 bitmap_line::@9
  b9:
  //SEG1198 [640] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuz1=vbuyy_minus_vbuz2 
    tya
    sec
    sbc y0
    sta yd
  //SEG1199 [641] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13 -- vbuz1_lt_vbuz2_then_la1 
    cmp xd
    bcc b13
  //SEG1200 bitmap_line::@27
  //SEG1201 [642] (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxi.y
  //SEG1202 [643] (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx x0
  //SEG1203 [644] (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty bitmap_line_ydxi.y1
  //SEG1204 [645] (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#11
  //SEG1205 [646] (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#1
  //SEG1206 [647] call bitmap_line_ydxi 
  //SEG1207 [676] phi from bitmap_line::@27 to bitmap_line_ydxi [phi:bitmap_line::@27->bitmap_line_ydxi]
  //SEG1208 [676] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#1 [phi:bitmap_line::@27->bitmap_line_ydxi#0] -- register_copy 
  //SEG1209 [676] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#1 [phi:bitmap_line::@27->bitmap_line_ydxi#1] -- register_copy 
  //SEG1210 [676] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#1 [phi:bitmap_line::@27->bitmap_line_ydxi#2] -- register_copy 
  //SEG1211 [676] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#1 [phi:bitmap_line::@27->bitmap_line_ydxi#3] -- register_copy 
  //SEG1212 [676] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#1 [phi:bitmap_line::@27->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp breturn
  //SEG1213 bitmap_line::@13
  b13:
  //SEG1214 [648] (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyi.x
  //SEG1215 [649] (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#0
  //SEG1216 [650] (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_xdyi.x1
  //SEG1217 [651] (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#1
  //SEG1218 [652] (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11
  //SEG1219 [653] call bitmap_line_xdyi 
  //SEG1220 [654] phi from bitmap_line::@13 to bitmap_line_xdyi [phi:bitmap_line::@13->bitmap_line_xdyi]
  //SEG1221 [654] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#1 [phi:bitmap_line::@13->bitmap_line_xdyi#0] -- register_copy 
  //SEG1222 [654] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#1] -- register_copy 
  //SEG1223 [654] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#1 [phi:bitmap_line::@13->bitmap_line_xdyi#2] -- register_copy 
  //SEG1224 [654] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#1 [phi:bitmap_line::@13->bitmap_line_xdyi#3] -- register_copy 
  //SEG1225 [654] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp breturn
}
//SEG1226 bitmap_line_xdyi
// bitmap_line_xdyi(byte zeropage($a) x, byte zeropage($b) y, byte zeropage(9) x1, byte zeropage(8) xd, byte zeropage(7) yd)
bitmap_line_xdyi: {
    .label x = $a
    .label y = $b
    .label x1 = 9
    .label xd = 8
    .label yd = 7
    .label e = $c
  //SEG1227 [655] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda yd
    lsr
    sta e
  //SEG1228 [656] phi from bitmap_line_xdyi bitmap_line_xdyi::@2 to bitmap_line_xdyi::@1 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1]
  //SEG1229 [656] phi (byte) bitmap_line_xdyi::e#3 = (byte) bitmap_line_xdyi::e#0 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#0] -- register_copy 
  //SEG1230 [656] phi (byte) bitmap_line_xdyi::y#3 = (byte) bitmap_line_xdyi::y#5 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#1] -- register_copy 
  //SEG1231 [656] phi (byte) bitmap_line_xdyi::x#3 = (byte) bitmap_line_xdyi::x#6 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#2] -- register_copy 
  //SEG1232 bitmap_line_xdyi::@1
  b1:
  //SEG1233 [657] (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3 -- vbuxx=vbuz1 
    ldx x
  //SEG1234 [658] (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3 -- vbuyy=vbuz1 
    ldy y
  //SEG1235 [659] call bitmap_plot 
  //SEG1236 [669] phi from bitmap_line_xdyi::@1 to bitmap_plot [phi:bitmap_line_xdyi::@1->bitmap_plot]
  //SEG1237 [669] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#0] -- register_copy 
  //SEG1238 [669] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
  //SEG1239 bitmap_line_xdyi::@5
  //SEG1240 [660] (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#3 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1241 [661] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc yd
    sta e
  //SEG1242 [662] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda xd
    cmp e
    bcs b2
  //SEG1243 bitmap_line_xdyi::@3
  //SEG1244 [663] (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#3 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1245 [664] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc xd
    sta e
  //SEG1246 [665] phi from bitmap_line_xdyi::@3 bitmap_line_xdyi::@5 to bitmap_line_xdyi::@2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@5->bitmap_line_xdyi::@2]
  //SEG1247 [665] phi (byte) bitmap_line_xdyi::e#6 = (byte) bitmap_line_xdyi::e#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@5->bitmap_line_xdyi::@2#0] -- register_copy 
  //SEG1248 [665] phi (byte) bitmap_line_xdyi::y#6 = (byte) bitmap_line_xdyi::y#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@5->bitmap_line_xdyi::@2#1] -- register_copy 
  //SEG1249 bitmap_line_xdyi::@2
  b2:
  //SEG1250 [666] (byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=vbuz1_plus_1 
    ldx x1
    inx
  //SEG1251 [667] if((byte) bitmap_line_xdyi::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx x
    bne b1
  //SEG1252 bitmap_line_xdyi::@return
  //SEG1253 [668] return 
    rts
}
//SEG1254 bitmap_plot
// bitmap_plot(byte register(X) x, byte register(Y) y)
bitmap_plot: {
    .label _0 = 2
    .label plotter_x = 2
    .label plotter_y = 5
  //SEG1255 [670] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_plot::x#4) -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_xhi,x
    sta plotter_x+1
    lda bitmap_plot_xlo,x
    sta plotter_x
  //SEG1256 [671] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuyy_word_pbuc2_derefidx_vbuyy 
    lda bitmap_plot_yhi,y
    sta plotter_y+1
    lda bitmap_plot_ylo,y
    sta plotter_y
  //SEG1257 [672] (word~) bitmap_plot::$0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda _0
    clc
    adc plotter_y
    sta _0
    lda _0+1
    adc plotter_y+1
    sta _0+1
  //SEG1258 [673] (byte~) bitmap_plot::$1 ← *((byte*)(word~) bitmap_plot::$0) | *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_plot::x#4) -- vbuaa=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (_0),y
  //SEG1259 [674] *((byte*)(word~) bitmap_plot::$0) ← (byte~) bitmap_plot::$1 -- _deref_pbuz1=vbuaa 
    sta (_0),y
  //SEG1260 bitmap_plot::@return
  //SEG1261 [675] return 
    rts
}
//SEG1262 bitmap_line_ydxi
// bitmap_line_ydxi(byte zeropage($a) y, byte register(X) x, byte zeropage($b) y1, byte zeropage(7) yd, byte zeropage(8) xd)
bitmap_line_ydxi: {
    .label y = $a
    .label y1 = $b
    .label yd = 7
    .label xd = 8
    .label e = 9
  //SEG1263 [677] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda xd
    lsr
    sta e
  //SEG1264 [678] phi from bitmap_line_ydxi bitmap_line_ydxi::@2 to bitmap_line_ydxi::@1 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1]
  //SEG1265 [678] phi (byte) bitmap_line_ydxi::e#3 = (byte) bitmap_line_ydxi::e#0 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#0] -- register_copy 
  //SEG1266 [678] phi (byte) bitmap_line_ydxi::y#3 = (byte) bitmap_line_ydxi::y#6 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#1] -- register_copy 
  //SEG1267 [678] phi (byte) bitmap_line_ydxi::x#3 = (byte) bitmap_line_ydxi::x#5 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#2] -- register_copy 
  //SEG1268 bitmap_line_ydxi::@1
  b1:
  //SEG1269 [679] (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3
  //SEG1270 [680] (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3 -- vbuyy=vbuz1 
    ldy y
  //SEG1271 [681] call bitmap_plot 
  //SEG1272 [669] phi from bitmap_line_ydxi::@1 to bitmap_plot [phi:bitmap_line_ydxi::@1->bitmap_plot]
  //SEG1273 [669] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#0] -- register_copy 
  //SEG1274 [669] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
  //SEG1275 bitmap_line_ydxi::@5
  //SEG1276 [682] (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#3 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1277 [683] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc xd
    sta e
  //SEG1278 [684] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda yd
    cmp e
    bcs b2
  //SEG1279 bitmap_line_ydxi::@3
  //SEG1280 [685] (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#3 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1281 [686] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc yd
    sta e
  //SEG1282 [687] phi from bitmap_line_ydxi::@3 bitmap_line_ydxi::@5 to bitmap_line_ydxi::@2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@5->bitmap_line_ydxi::@2]
  //SEG1283 [687] phi (byte) bitmap_line_ydxi::e#6 = (byte) bitmap_line_ydxi::e#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@5->bitmap_line_ydxi::@2#0] -- register_copy 
  //SEG1284 [687] phi (byte) bitmap_line_ydxi::x#6 = (byte) bitmap_line_ydxi::x#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@5->bitmap_line_ydxi::@2#1] -- register_copy 
  //SEG1285 bitmap_line_ydxi::@2
  b2:
  //SEG1286 [688] (byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_plus_1 
    lda y1
    clc
    adc #1
  //SEG1287 [689] if((byte) bitmap_line_ydxi::y#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp y
    bne b1
  //SEG1288 bitmap_line_ydxi::@return
  //SEG1289 [690] return 
    rts
}
//SEG1290 bitmap_line_xdyd
// bitmap_line_xdyd(byte zeropage($a) x, byte zeropage($b) y, byte zeropage($c) x1, byte zeropage(8) xd, byte zeropage(7) yd)
bitmap_line_xdyd: {
    .label x = $a
    .label y = $b
    .label x1 = $c
    .label xd = 8
    .label yd = 7
    .label e = 9
  //SEG1291 [692] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda yd
    lsr
    sta e
  //SEG1292 [693] phi from bitmap_line_xdyd bitmap_line_xdyd::@2 to bitmap_line_xdyd::@1 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1]
  //SEG1293 [693] phi (byte) bitmap_line_xdyd::e#3 = (byte) bitmap_line_xdyd::e#0 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#0] -- register_copy 
  //SEG1294 [693] phi (byte) bitmap_line_xdyd::y#3 = (byte) bitmap_line_xdyd::y#5 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#1] -- register_copy 
  //SEG1295 [693] phi (byte) bitmap_line_xdyd::x#3 = (byte) bitmap_line_xdyd::x#6 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#2] -- register_copy 
  //SEG1296 bitmap_line_xdyd::@1
  b1:
  //SEG1297 [694] (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3 -- vbuxx=vbuz1 
    ldx x
  //SEG1298 [695] (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3 -- vbuyy=vbuz1 
    ldy y
  //SEG1299 [696] call bitmap_plot 
  //SEG1300 [669] phi from bitmap_line_xdyd::@1 to bitmap_plot [phi:bitmap_line_xdyd::@1->bitmap_plot]
  //SEG1301 [669] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#0] -- register_copy 
  //SEG1302 [669] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
  //SEG1303 bitmap_line_xdyd::@5
  //SEG1304 [697] (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#3 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1305 [698] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc yd
    sta e
  //SEG1306 [699] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda xd
    cmp e
    bcs b2
  //SEG1307 bitmap_line_xdyd::@3
  //SEG1308 [700] (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#3 -- vbuz1=_dec_vbuz1 
    dec y
  //SEG1309 [701] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc xd
    sta e
  //SEG1310 [702] phi from bitmap_line_xdyd::@3 bitmap_line_xdyd::@5 to bitmap_line_xdyd::@2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@5->bitmap_line_xdyd::@2]
  //SEG1311 [702] phi (byte) bitmap_line_xdyd::e#6 = (byte) bitmap_line_xdyd::e#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@5->bitmap_line_xdyd::@2#0] -- register_copy 
  //SEG1312 [702] phi (byte) bitmap_line_xdyd::y#6 = (byte) bitmap_line_xdyd::y#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@5->bitmap_line_xdyd::@2#1] -- register_copy 
  //SEG1313 bitmap_line_xdyd::@2
  b2:
  //SEG1314 [703] (byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=vbuz1_plus_1 
    ldx x1
    inx
  //SEG1315 [704] if((byte) bitmap_line_xdyd::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx x
    bne b1
  //SEG1316 bitmap_line_xdyd::@return
  //SEG1317 [705] return 
    rts
}
//SEG1318 bitmap_line_ydxd
// bitmap_line_ydxd(byte zeropage($a) y, byte register(X) x, byte zeropage($b) y1, byte zeropage(7) yd, byte zeropage(8) xd)
bitmap_line_ydxd: {
    .label y = $a
    .label y1 = $b
    .label yd = 7
    .label xd = 8
    .label e = 9
  //SEG1319 [707] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda xd
    lsr
    sta e
  //SEG1320 [708] phi from bitmap_line_ydxd bitmap_line_ydxd::@2 to bitmap_line_ydxd::@1 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1]
  //SEG1321 [708] phi (byte) bitmap_line_ydxd::e#3 = (byte) bitmap_line_ydxd::e#0 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#0] -- register_copy 
  //SEG1322 [708] phi (byte) bitmap_line_ydxd::y#2 = (byte) bitmap_line_ydxd::y#7 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#1] -- register_copy 
  //SEG1323 [708] phi (byte) bitmap_line_ydxd::x#3 = (byte) bitmap_line_ydxd::x#5 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#2] -- register_copy 
  //SEG1324 bitmap_line_ydxd::@1
  b1:
  //SEG1325 [709] (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3
  //SEG1326 [710] (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#2 -- vbuyy=vbuz1 
    ldy y
  //SEG1327 [711] call bitmap_plot 
  //SEG1328 [669] phi from bitmap_line_ydxd::@1 to bitmap_plot [phi:bitmap_line_ydxd::@1->bitmap_plot]
  //SEG1329 [669] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#0] -- register_copy 
  //SEG1330 [669] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
  //SEG1331 bitmap_line_ydxd::@5
  //SEG1332 [712] (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1333 [713] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc xd
    sta e
  //SEG1334 [714] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda yd
    cmp e
    bcs b2
  //SEG1335 bitmap_line_ydxd::@3
  //SEG1336 [715] (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#3 -- vbuxx=_dec_vbuxx 
    dex
  //SEG1337 [716] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc yd
    sta e
  //SEG1338 [717] phi from bitmap_line_ydxd::@3 bitmap_line_ydxd::@5 to bitmap_line_ydxd::@2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@5->bitmap_line_ydxd::@2]
  //SEG1339 [717] phi (byte) bitmap_line_ydxd::e#6 = (byte) bitmap_line_ydxd::e#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@5->bitmap_line_ydxd::@2#0] -- register_copy 
  //SEG1340 [717] phi (byte) bitmap_line_ydxd::x#6 = (byte) bitmap_line_ydxd::x#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@5->bitmap_line_ydxd::@2#1] -- register_copy 
  //SEG1341 bitmap_line_ydxd::@2
  b2:
  //SEG1342 [718] (byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_plus_1 
    lda y1
    clc
    adc #1
  //SEG1343 [719] if((byte) bitmap_line_ydxd::y#3!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp y
    bne b1
  //SEG1344 bitmap_line_ydxd::@return
  //SEG1345 [720] return 
    rts
}
//SEG1346 bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = 2
    .label y = 4
    .label _3 = 2
  //SEG1347 [721] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_xhi#0) w= *((const byte[$100]) bitmap_plot_xlo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_xlo
    sta _3
    lda bitmap_plot_xhi
    sta _3+1
  //SEG1348 [722] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3
  //SEG1349 [723] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  //SEG1350 [723] phi (byte) bitmap_clear::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG1351 [723] phi (byte*) bitmap_clear::bitmap#3 = (byte*~) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
  //SEG1352 [723] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  //SEG1353 [723] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
  //SEG1354 [723] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
  //SEG1355 bitmap_clear::@1
  b1:
  //SEG1356 [724] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  //SEG1357 [724] phi (byte) bitmap_clear::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG1358 [724] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
  //SEG1359 [724] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  //SEG1360 [724] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
  //SEG1361 [724] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
  //SEG1362 bitmap_clear::@2
  b2:
  //SEG1363 [725] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (bitmap),y
  //SEG1364 [726] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc bitmap
    bne !+
    inc bitmap+1
  !:
  //SEG1365 [727] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1366 [728] if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) $c8) goto bitmap_clear::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c8
    bne b2
  //SEG1367 bitmap_clear::@3
  //SEG1368 [729] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1369 [730] if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$28
    bne b1
  //SEG1370 bitmap_clear::@return
  //SEG1371 [731] return 
    rts
}
//SEG1372 bitmap_init
// Initialize the bitmap plotter tables for a specific bitmap
bitmap_init: {
    .label _6 = 4
    .label yoffs = 2
  //SEG1373 [733] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  //SEG1374 [733] phi (byte) bitmap_init::bits#3 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init->bitmap_init::@1#0] -- vbuyy=vbuc1 
    ldy #$80
  //SEG1375 [733] phi (byte) bitmap_init::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init->bitmap_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG1376 [733] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  //SEG1377 [733] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
  //SEG1378 [733] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
  //SEG1379 bitmap_init::@1
  b1:
  //SEG1380 [734] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte/word/signed word/dword/signed dword) $f8 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f8
  //SEG1381 [735] *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_xlo,x
  //SEG1382 [736] *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_init::x#2) ← >(const byte*) mode_stdbitmap::BITMAP#0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #>mode_stdbitmap.BITMAP
    sta bitmap_plot_xhi,x
  //SEG1383 [737] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta bitmap_plot_bit,x
  //SEG1384 [738] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuyy=vbuyy_ror_1 
    tya
    lsr
    tay
  //SEG1385 [739] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@10 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne b2
  //SEG1386 [740] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  //SEG1387 [740] phi (byte) bitmap_init::bits#4 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuyy=vbuc1 
    ldy #$80
  //SEG1388 bitmap_init::@2
  b2:
  //SEG1389 [741] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1390 [742] if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG1391 [743] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  //SEG1392 [743] phi (byte*) bitmap_init::yoffs#2 = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta yoffs
    sta yoffs+1
  //SEG1393 [743] phi (byte) bitmap_init::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    tax
  //SEG1394 [743] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  //SEG1395 [743] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
  //SEG1396 [743] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
  //SEG1397 bitmap_init::@3
  b3:
  //SEG1398 [744] (byte~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuxx_band_vbuc1 
    txa
    and #7
    sta _6
  //SEG1399 [745] (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda yoffs
  //SEG1400 [746] (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$6 | (byte~) bitmap_init::$7 -- vbuaa=vbuz1_bor_vbuaa 
    ora _6
  //SEG1401 [747] *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
  //SEG1402 [748] (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda yoffs+1
  //SEG1403 [749] *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
  //SEG1404 [750] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
  //SEG1405 [751] if((byte~) bitmap_init::$10!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #7
    bne b4
  //SEG1406 bitmap_init::@7
  //SEG1407 [752] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda yoffs
    adc #<$28*8
    sta yoffs
    lda yoffs+1
    adc #>$28*8
    sta yoffs+1
  //SEG1408 [753] phi from bitmap_init::@3 bitmap_init::@7 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4]
  //SEG1409 [753] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4#0] -- register_copy 
  //SEG1410 bitmap_init::@4
  b4:
  //SEG1411 [754] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1412 [755] if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG1413 bitmap_init::@return
  //SEG1414 [756] return 
    rts
  //SEG1415 [757] phi from bitmap_init::@1 to bitmap_init::@10 [phi:bitmap_init::@1->bitmap_init::@10]
  //SEG1416 bitmap_init::@10
  //SEG1417 [740] phi from bitmap_init::@10 to bitmap_init::@2 [phi:bitmap_init::@10->bitmap_init::@2]
  //SEG1418 [740] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@10->bitmap_init::@2#0] -- register_copy 
}
//SEG1419 mode_mcchar
// Multicolor Character Mode (LINEAR/HICOL/CHUNK/COLDIS/BMM/ECM = 0, MCM = 1)
// Resolution: 160x200 (320x200)
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
// GfxData Pixel Shifter (1) if ColorData[3:3] = 0:
//  - 0: 4bpp BgColor0[3:0]
//  - 1: 4bpp ColorData[2:0]
// GfxData Pixel Shifter (2) if ColorData[3:3] = 1:
//  - 00: 4bpp BgColor0[3:0]
//  - 01: 4bpp BgColor1[3:0]
//  - 10: 4bpp BgColor2[3:0]
//  - 11: 4bpp ColorData[2:0]// Standard Character Mode (LINEAR/HICOL/CHUNK/COLDIS/ECM/MCM/BMM = 0)
mode_mcchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $d800
    .label _28 = 7
    .label col = 2
    .label ch = 5
    .label cy = 4
  //SEG1420 [758] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_mcchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG1421 [759] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
  //SEG1422 [760] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG1423 [761] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_CONTROL
  //SEG1424 [762] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG1425 [763] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_mcchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG1426 [764] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG1427 [765] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL|VIC_MCM
    sta VIC_CONTROL2
  //SEG1428 [766] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_mcchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_mcchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG1429 [767] phi from mode_mcchar to mode_mcchar::@1 [phi:mode_mcchar->mode_mcchar::@1]
  //SEG1430 [767] phi (byte) mode_mcchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_mcchar->mode_mcchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - default
  //SEG1431 [767] phi from mode_mcchar::@1 to mode_mcchar::@1 [phi:mode_mcchar::@1->mode_mcchar::@1]
  //SEG1432 [767] phi (byte) mode_mcchar::i#2 = (byte) mode_mcchar::i#1 [phi:mode_mcchar::@1->mode_mcchar::@1#0] -- register_copy 
  //SEG1433 mode_mcchar::@1
  b1:
  //SEG1434 [768] *((const byte*) DTV_PALETTE#0 + (byte) mode_mcchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_mcchar::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
  //SEG1435 [769] (byte) mode_mcchar::i#1 ← ++ (byte) mode_mcchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1436 [770] if((byte) mode_mcchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_mcchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG1437 mode_mcchar::@4
  //SEG1438 [771] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG1439 [772] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BGCOL1
  //SEG1440 [773] *((const byte*) BGCOL2#0) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BGCOL2
  //SEG1441 [774] *((const byte*) BGCOL3#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL3
  //SEG1442 [775] phi from mode_mcchar::@4 to mode_mcchar::@2 [phi:mode_mcchar::@4->mode_mcchar::@2]
  //SEG1443 [775] phi (byte*) mode_mcchar::ch#3 = (const byte*) mode_mcchar::SCREEN#0 [phi:mode_mcchar::@4->mode_mcchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG1444 [775] phi (byte*) mode_mcchar::col#3 = (const byte*) mode_mcchar::COLORS#0 [phi:mode_mcchar::@4->mode_mcchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG1445 [775] phi (byte) mode_mcchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_mcchar::@4->mode_mcchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG1446 [775] phi from mode_mcchar::@5 to mode_mcchar::@2 [phi:mode_mcchar::@5->mode_mcchar::@2]
  //SEG1447 [775] phi (byte*) mode_mcchar::ch#3 = (byte*) mode_mcchar::ch#1 [phi:mode_mcchar::@5->mode_mcchar::@2#0] -- register_copy 
  //SEG1448 [775] phi (byte*) mode_mcchar::col#3 = (byte*) mode_mcchar::col#1 [phi:mode_mcchar::@5->mode_mcchar::@2#1] -- register_copy 
  //SEG1449 [775] phi (byte) mode_mcchar::cy#4 = (byte) mode_mcchar::cy#1 [phi:mode_mcchar::@5->mode_mcchar::@2#2] -- register_copy 
  //SEG1450 mode_mcchar::@2
  b2:
  //SEG1451 [776] phi from mode_mcchar::@2 to mode_mcchar::@3 [phi:mode_mcchar::@2->mode_mcchar::@3]
  //SEG1452 [776] phi (byte*) mode_mcchar::ch#2 = (byte*) mode_mcchar::ch#3 [phi:mode_mcchar::@2->mode_mcchar::@3#0] -- register_copy 
  //SEG1453 [776] phi (byte*) mode_mcchar::col#2 = (byte*) mode_mcchar::col#3 [phi:mode_mcchar::@2->mode_mcchar::@3#1] -- register_copy 
  //SEG1454 [776] phi (byte) mode_mcchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_mcchar::@2->mode_mcchar::@3#2] -- vbuxx=vbuc1 
    ldx #0
  //SEG1455 [776] phi from mode_mcchar::@3 to mode_mcchar::@3 [phi:mode_mcchar::@3->mode_mcchar::@3]
  //SEG1456 [776] phi (byte*) mode_mcchar::ch#2 = (byte*) mode_mcchar::ch#1 [phi:mode_mcchar::@3->mode_mcchar::@3#0] -- register_copy 
  //SEG1457 [776] phi (byte*) mode_mcchar::col#2 = (byte*) mode_mcchar::col#1 [phi:mode_mcchar::@3->mode_mcchar::@3#1] -- register_copy 
  //SEG1458 [776] phi (byte) mode_mcchar::cx#2 = (byte) mode_mcchar::cx#1 [phi:mode_mcchar::@3->mode_mcchar::@3#2] -- register_copy 
  //SEG1459 mode_mcchar::@3
  b3:
  //SEG1460 [777] (byte~) mode_mcchar::$25 ← (byte) mode_mcchar::cx#2 + (byte) mode_mcchar::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc cy
  //SEG1461 [778] (byte~) mode_mcchar::$26 ← (byte~) mode_mcchar::$25 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
  //SEG1462 [779] *((byte*) mode_mcchar::col#2) ← (byte~) mode_mcchar::$26 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG1463 [780] (byte*) mode_mcchar::col#1 ← ++ (byte*) mode_mcchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG1464 [781] (byte~) mode_mcchar::$27 ← (byte) mode_mcchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG1465 [782] (byte~) mode_mcchar::$28 ← (byte~) mode_mcchar::$27 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _28
  //SEG1466 [783] (byte~) mode_mcchar::$29 ← (byte) mode_mcchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG1467 [784] (byte~) mode_mcchar::$30 ← (byte~) mode_mcchar::$28 | (byte~) mode_mcchar::$29 -- vbuaa=vbuz1_bor_vbuaa 
    ora _28
  //SEG1468 [785] *((byte*) mode_mcchar::ch#2) ← (byte~) mode_mcchar::$30 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1469 [786] (byte*) mode_mcchar::ch#1 ← ++ (byte*) mode_mcchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1470 [787] (byte) mode_mcchar::cx#1 ← ++ (byte) mode_mcchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1471 [788] if((byte) mode_mcchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_mcchar::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3
  //SEG1472 mode_mcchar::@5
  //SEG1473 [789] (byte) mode_mcchar::cy#1 ← ++ (byte) mode_mcchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1474 [790] if((byte) mode_mcchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_mcchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2
  //SEG1475 [791] phi from mode_mcchar::@5 to mode_mcchar::@6 [phi:mode_mcchar::@5->mode_mcchar::@6]
  //SEG1476 mode_mcchar::@6
  //SEG1477 [792] call mode_ctrl 
  //SEG1478 [155] phi from mode_mcchar::@6 to mode_ctrl [phi:mode_mcchar::@6->mode_ctrl]
  //SEG1479 [155] phi (byte) dtv_control#145 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_mcchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #0
    sta dtv_control
    jsr mode_ctrl
  //SEG1480 mode_mcchar::@return
  //SEG1481 [793] return 
    rts
}
//SEG1482 mode_ecmchar
// Extended Background Color Character Mode (LINEAR/HICOL/CHUNK/COLDIS/MCM/BMM = 0, ECM = 1)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & "00" & CharData[5:0] & RowCounter[2:0] ) 
// GfxData Pixel Shifter (1)
//  - 0: 4bpp Background Color
//    - CharData[7:6] 00: 4bpp BgColor0[3:0]
//    - CharData[7:6] 01: 4bpp BgColor1[3:0]
//    - CharData[7:6] 10: 4bpp BgColor2[3:0]
//    - CharData[7:6] 11: 4bpp BgColor3[3:0]
//  - 1: 4bpp ColorData[3:0]
mode_ecmchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $d800
    .label _28 = 7
    .label col = 2
    .label ch = 5
    .label cy = 4
  //SEG1483 [794] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_ecmchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG1484 [795] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
  //SEG1485 [796] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG1486 [797] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_CONTROL
  //SEG1487 [798] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG1488 [799] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_ecmchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG1489 [800] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(const byte) VIC_ECM#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|VIC_ECM|3
    sta VIC_CONTROL
  //SEG1490 [801] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG1491 [802] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_ecmchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_ecmchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG1492 [803] phi from mode_ecmchar to mode_ecmchar::@1 [phi:mode_ecmchar->mode_ecmchar::@1]
  //SEG1493 [803] phi (byte) mode_ecmchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_ecmchar->mode_ecmchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - default
  //SEG1494 [803] phi from mode_ecmchar::@1 to mode_ecmchar::@1 [phi:mode_ecmchar::@1->mode_ecmchar::@1]
  //SEG1495 [803] phi (byte) mode_ecmchar::i#2 = (byte) mode_ecmchar::i#1 [phi:mode_ecmchar::@1->mode_ecmchar::@1#0] -- register_copy 
  //SEG1496 mode_ecmchar::@1
  b1:
  //SEG1497 [804] *((const byte*) DTV_PALETTE#0 + (byte) mode_ecmchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_ecmchar::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
  //SEG1498 [805] (byte) mode_ecmchar::i#1 ← ++ (byte) mode_ecmchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1499 [806] if((byte) mode_ecmchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_ecmchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG1500 mode_ecmchar::@4
  //SEG1501 [807] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BORDERCOL
  //SEG1502 [808] *((const byte*) BGCOL1#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta BGCOL1
  //SEG1503 [809] *((const byte*) BGCOL2#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL2
  //SEG1504 [810] *((const byte*) BGCOL3#0) ← (byte/signed byte/word/signed word/dword/signed dword) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BGCOL3
  //SEG1505 [811] *((const byte*) BGCOL4#0) ← (byte/signed byte/word/signed word/dword/signed dword) 6 -- _deref_pbuc1=vbuc2 
    lda #6
    sta BGCOL4
  //SEG1506 [812] phi from mode_ecmchar::@4 to mode_ecmchar::@2 [phi:mode_ecmchar::@4->mode_ecmchar::@2]
  //SEG1507 [812] phi (byte*) mode_ecmchar::ch#3 = (const byte*) mode_ecmchar::SCREEN#0 [phi:mode_ecmchar::@4->mode_ecmchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG1508 [812] phi (byte*) mode_ecmchar::col#3 = (const byte*) mode_ecmchar::COLORS#0 [phi:mode_ecmchar::@4->mode_ecmchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG1509 [812] phi (byte) mode_ecmchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_ecmchar::@4->mode_ecmchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG1510 [812] phi from mode_ecmchar::@5 to mode_ecmchar::@2 [phi:mode_ecmchar::@5->mode_ecmchar::@2]
  //SEG1511 [812] phi (byte*) mode_ecmchar::ch#3 = (byte*) mode_ecmchar::ch#1 [phi:mode_ecmchar::@5->mode_ecmchar::@2#0] -- register_copy 
  //SEG1512 [812] phi (byte*) mode_ecmchar::col#3 = (byte*) mode_ecmchar::col#1 [phi:mode_ecmchar::@5->mode_ecmchar::@2#1] -- register_copy 
  //SEG1513 [812] phi (byte) mode_ecmchar::cy#4 = (byte) mode_ecmchar::cy#1 [phi:mode_ecmchar::@5->mode_ecmchar::@2#2] -- register_copy 
  //SEG1514 mode_ecmchar::@2
  b2:
  //SEG1515 [813] phi from mode_ecmchar::@2 to mode_ecmchar::@3 [phi:mode_ecmchar::@2->mode_ecmchar::@3]
  //SEG1516 [813] phi (byte*) mode_ecmchar::ch#2 = (byte*) mode_ecmchar::ch#3 [phi:mode_ecmchar::@2->mode_ecmchar::@3#0] -- register_copy 
  //SEG1517 [813] phi (byte*) mode_ecmchar::col#2 = (byte*) mode_ecmchar::col#3 [phi:mode_ecmchar::@2->mode_ecmchar::@3#1] -- register_copy 
  //SEG1518 [813] phi (byte) mode_ecmchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_ecmchar::@2->mode_ecmchar::@3#2] -- vbuxx=vbuc1 
    ldx #0
  //SEG1519 [813] phi from mode_ecmchar::@3 to mode_ecmchar::@3 [phi:mode_ecmchar::@3->mode_ecmchar::@3]
  //SEG1520 [813] phi (byte*) mode_ecmchar::ch#2 = (byte*) mode_ecmchar::ch#1 [phi:mode_ecmchar::@3->mode_ecmchar::@3#0] -- register_copy 
  //SEG1521 [813] phi (byte*) mode_ecmchar::col#2 = (byte*) mode_ecmchar::col#1 [phi:mode_ecmchar::@3->mode_ecmchar::@3#1] -- register_copy 
  //SEG1522 [813] phi (byte) mode_ecmchar::cx#2 = (byte) mode_ecmchar::cx#1 [phi:mode_ecmchar::@3->mode_ecmchar::@3#2] -- register_copy 
  //SEG1523 mode_ecmchar::@3
  b3:
  //SEG1524 [814] (byte~) mode_ecmchar::$25 ← (byte) mode_ecmchar::cx#2 + (byte) mode_ecmchar::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc cy
  //SEG1525 [815] (byte~) mode_ecmchar::$26 ← (byte~) mode_ecmchar::$25 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
  //SEG1526 [816] *((byte*) mode_ecmchar::col#2) ← (byte~) mode_ecmchar::$26 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG1527 [817] (byte*) mode_ecmchar::col#1 ← ++ (byte*) mode_ecmchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG1528 [818] (byte~) mode_ecmchar::$27 ← (byte) mode_ecmchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG1529 [819] (byte~) mode_ecmchar::$28 ← (byte~) mode_ecmchar::$27 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _28
  //SEG1530 [820] (byte~) mode_ecmchar::$29 ← (byte) mode_ecmchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG1531 [821] (byte~) mode_ecmchar::$30 ← (byte~) mode_ecmchar::$28 | (byte~) mode_ecmchar::$29 -- vbuaa=vbuz1_bor_vbuaa 
    ora _28
  //SEG1532 [822] *((byte*) mode_ecmchar::ch#2) ← (byte~) mode_ecmchar::$30 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1533 [823] (byte*) mode_ecmchar::ch#1 ← ++ (byte*) mode_ecmchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1534 [824] (byte) mode_ecmchar::cx#1 ← ++ (byte) mode_ecmchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1535 [825] if((byte) mode_ecmchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_ecmchar::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3
  //SEG1536 mode_ecmchar::@5
  //SEG1537 [826] (byte) mode_ecmchar::cy#1 ← ++ (byte) mode_ecmchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1538 [827] if((byte) mode_ecmchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_ecmchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2
  //SEG1539 [828] phi from mode_ecmchar::@5 to mode_ecmchar::@6 [phi:mode_ecmchar::@5->mode_ecmchar::@6]
  //SEG1540 mode_ecmchar::@6
  //SEG1541 [829] call mode_ctrl 
  //SEG1542 [155] phi from mode_ecmchar::@6 to mode_ctrl [phi:mode_ecmchar::@6->mode_ctrl]
  //SEG1543 [155] phi (byte) dtv_control#145 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_ecmchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #0
    sta dtv_control
    jsr mode_ctrl
  //SEG1544 mode_ecmchar::@return
  //SEG1545 [830] return 
    rts
}
//SEG1546 mode_stdchar
// Standard Character Mode (LINEAR/HICOL/CHUNK/COLDIS/ECM/MCM/BMM = 0)
// Resolution: 320x200
// Normal VIC Adressing:
// VicGfxData[16]: ( VicBank[1:0] & CharBase[2:0] & CharData[7:0] & RowCounter[2:0] )
// Pixel Shifter (1)
// - 0: 4bpp BgColor0[3:0]
// - 1: 4bpp ColorData[3:0]
mode_stdchar: {
    .label SCREEN = $8000
    .label CHARSET = $9000
    // Charset ROM
    .label COLORS = $d800
    .label _27 = 7
    .label col = 2
    .label ch = 5
    .label cy = 4
  //SEG1547 [831] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) mode_stdchar::CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG1548 [832] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
  //SEG1549 [833] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG1550 [834] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_CONTROL
  //SEG1551 [835] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG1552 [836] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) mode_stdchar::CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^CHARSET/$4000
    sta CIA2_PORT_A
  //SEG1553 [837] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG1554 [838] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG1555 [839] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) mode_stdchar::SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) mode_stdchar::CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(SCREEN&$3fff)/$40|(CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG1556 [840] phi from mode_stdchar to mode_stdchar::@1 [phi:mode_stdchar->mode_stdchar::@1]
  //SEG1557 [840] phi (byte) mode_stdchar::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdchar->mode_stdchar::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - default
  //SEG1558 [840] phi from mode_stdchar::@1 to mode_stdchar::@1 [phi:mode_stdchar::@1->mode_stdchar::@1]
  //SEG1559 [840] phi (byte) mode_stdchar::i#2 = (byte) mode_stdchar::i#1 [phi:mode_stdchar::@1->mode_stdchar::@1#0] -- register_copy 
  //SEG1560 mode_stdchar::@1
  b1:
  //SEG1561 [841] *((const byte*) DTV_PALETTE#0 + (byte) mode_stdchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) mode_stdchar::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
  //SEG1562 [842] (byte) mode_stdchar::i#1 ← ++ (byte) mode_stdchar::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1563 [843] if((byte) mode_stdchar::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mode_stdchar::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG1564 mode_stdchar::@4
  //SEG1565 [844] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BGCOL
  //SEG1566 [845] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta BORDERCOL
  //SEG1567 [846] phi from mode_stdchar::@4 to mode_stdchar::@2 [phi:mode_stdchar::@4->mode_stdchar::@2]
  //SEG1568 [846] phi (byte*) mode_stdchar::ch#3 = (const byte*) mode_stdchar::SCREEN#0 [phi:mode_stdchar::@4->mode_stdchar::@2#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG1569 [846] phi (byte*) mode_stdchar::col#3 = (const byte*) mode_stdchar::COLORS#0 [phi:mode_stdchar::@4->mode_stdchar::@2#1] -- pbuz1=pbuc1 
    lda #<COLORS
    sta col
    lda #>COLORS
    sta col+1
  //SEG1570 [846] phi (byte) mode_stdchar::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdchar::@4->mode_stdchar::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG1571 [846] phi from mode_stdchar::@5 to mode_stdchar::@2 [phi:mode_stdchar::@5->mode_stdchar::@2]
  //SEG1572 [846] phi (byte*) mode_stdchar::ch#3 = (byte*) mode_stdchar::ch#1 [phi:mode_stdchar::@5->mode_stdchar::@2#0] -- register_copy 
  //SEG1573 [846] phi (byte*) mode_stdchar::col#3 = (byte*) mode_stdchar::col#1 [phi:mode_stdchar::@5->mode_stdchar::@2#1] -- register_copy 
  //SEG1574 [846] phi (byte) mode_stdchar::cy#4 = (byte) mode_stdchar::cy#1 [phi:mode_stdchar::@5->mode_stdchar::@2#2] -- register_copy 
  //SEG1575 mode_stdchar::@2
  b2:
  //SEG1576 [847] phi from mode_stdchar::@2 to mode_stdchar::@3 [phi:mode_stdchar::@2->mode_stdchar::@3]
  //SEG1577 [847] phi (byte*) mode_stdchar::ch#2 = (byte*) mode_stdchar::ch#3 [phi:mode_stdchar::@2->mode_stdchar::@3#0] -- register_copy 
  //SEG1578 [847] phi (byte*) mode_stdchar::col#2 = (byte*) mode_stdchar::col#3 [phi:mode_stdchar::@2->mode_stdchar::@3#1] -- register_copy 
  //SEG1579 [847] phi (byte) mode_stdchar::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdchar::@2->mode_stdchar::@3#2] -- vbuxx=vbuc1 
    ldx #0
  //SEG1580 [847] phi from mode_stdchar::@3 to mode_stdchar::@3 [phi:mode_stdchar::@3->mode_stdchar::@3]
  //SEG1581 [847] phi (byte*) mode_stdchar::ch#2 = (byte*) mode_stdchar::ch#1 [phi:mode_stdchar::@3->mode_stdchar::@3#0] -- register_copy 
  //SEG1582 [847] phi (byte*) mode_stdchar::col#2 = (byte*) mode_stdchar::col#1 [phi:mode_stdchar::@3->mode_stdchar::@3#1] -- register_copy 
  //SEG1583 [847] phi (byte) mode_stdchar::cx#2 = (byte) mode_stdchar::cx#1 [phi:mode_stdchar::@3->mode_stdchar::@3#2] -- register_copy 
  //SEG1584 mode_stdchar::@3
  b3:
  //SEG1585 [848] (byte~) mode_stdchar::$24 ← (byte) mode_stdchar::cx#2 + (byte) mode_stdchar::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc cy
  //SEG1586 [849] (byte~) mode_stdchar::$25 ← (byte~) mode_stdchar::$24 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
  //SEG1587 [850] *((byte*) mode_stdchar::col#2) ← (byte~) mode_stdchar::$25 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
  //SEG1588 [851] (byte*) mode_stdchar::col#1 ← ++ (byte*) mode_stdchar::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG1589 [852] (byte~) mode_stdchar::$26 ← (byte) mode_stdchar::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG1590 [853] (byte~) mode_stdchar::$27 ← (byte~) mode_stdchar::$26 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _27
  //SEG1591 [854] (byte~) mode_stdchar::$28 ← (byte) mode_stdchar::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG1592 [855] (byte~) mode_stdchar::$29 ← (byte~) mode_stdchar::$27 | (byte~) mode_stdchar::$28 -- vbuaa=vbuz1_bor_vbuaa 
    ora _27
  //SEG1593 [856] *((byte*) mode_stdchar::ch#2) ← (byte~) mode_stdchar::$29 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1594 [857] (byte*) mode_stdchar::ch#1 ← ++ (byte*) mode_stdchar::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1595 [858] (byte) mode_stdchar::cx#1 ← ++ (byte) mode_stdchar::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1596 [859] if((byte) mode_stdchar::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto mode_stdchar::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3
  //SEG1597 mode_stdchar::@5
  //SEG1598 [860] (byte) mode_stdchar::cy#1 ← ++ (byte) mode_stdchar::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1599 [861] if((byte) mode_stdchar::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto mode_stdchar::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b2
  //SEG1600 [862] phi from mode_stdchar::@5 to mode_stdchar::@6 [phi:mode_stdchar::@5->mode_stdchar::@6]
  //SEG1601 mode_stdchar::@6
  //SEG1602 [863] call mode_ctrl 
  //SEG1603 [155] phi from mode_stdchar::@6 to mode_ctrl [phi:mode_stdchar::@6->mode_ctrl]
  //SEG1604 [155] phi (byte) dtv_control#145 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_stdchar::@6->mode_ctrl#0] -- vbuz1=vbuc1 
    lda #0
    sta dtv_control
    jsr mode_ctrl
  //SEG1605 mode_stdchar::@return
  //SEG1606 [864] return 
    rts
}
//SEG1607 print_str_lines
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
// print_str_lines(byte* zeropage(2) str)
print_str_lines: {
    .label str = 2
  //SEG1608 [866] phi from print_str_lines to print_str_lines::@1 [phi:print_str_lines->print_str_lines::@1]
  //SEG1609 [866] phi (byte*) print_line_cursor#17 = (const byte*) menu::SCREEN#0 [phi:print_str_lines->print_str_lines::@1#0] -- pbuz1=pbuc1 
    lda #<menu.SCREEN
    sta print_line_cursor
    lda #>menu.SCREEN
    sta print_line_cursor+1
  //SEG1610 [866] phi (byte*) print_char_cursor#19 = (const byte*) menu::SCREEN#0 [phi:print_str_lines->print_str_lines::@1#1] -- pbuz1=pbuc1 
    lda #<menu.SCREEN
    sta print_char_cursor
    lda #>menu.SCREEN
    sta print_char_cursor+1
  //SEG1611 [866] phi (byte*) print_str_lines::str#2 = (const byte[]) MENU_TEXT#0 [phi:print_str_lines->print_str_lines::@1#2] -- pbuz1=pbuc1 
    lda #<MENU_TEXT
    sta str
    lda #>MENU_TEXT
    sta str+1
  //SEG1612 print_str_lines::@1
  b1:
  //SEG1613 [867] if(*((byte*) print_str_lines::str#2)!=(byte) '@') goto print_str_lines::@4 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b4
  //SEG1614 print_str_lines::@return
  //SEG1615 [868] return 
    rts
  //SEG1616 [869] phi from print_str_lines::@1 print_str_lines::@5 to print_str_lines::@4 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4]
  //SEG1617 [869] phi (byte*) print_char_cursor#17 = (byte*) print_char_cursor#19 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4#0] -- register_copy 
  //SEG1618 [869] phi (byte*) print_str_lines::str#3 = (byte*) print_str_lines::str#2 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4#1] -- register_copy 
  //SEG1619 print_str_lines::@4
  b4:
  //SEG1620 [870] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#3) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
  //SEG1621 [871] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#3 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG1622 [872] if((byte) print_str_lines::ch#0==(byte) '@') goto print_str_lines::@5 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'@'
    beq b5
  //SEG1623 print_str_lines::@8
  //SEG1624 [873] *((byte*) print_char_cursor#17) ← (byte) print_str_lines::ch#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG1625 [874] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#17 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG1626 [875] phi from print_str_lines::@4 print_str_lines::@8 to print_str_lines::@5 [phi:print_str_lines::@4/print_str_lines::@8->print_str_lines::@5]
  //SEG1627 [875] phi (byte*) print_char_cursor#32 = (byte*) print_char_cursor#17 [phi:print_str_lines::@4/print_str_lines::@8->print_str_lines::@5#0] -- register_copy 
  //SEG1628 print_str_lines::@5
  b5:
  //SEG1629 [876] if((byte) print_str_lines::ch#0!=(byte) '@') goto print_str_lines::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #'@'
    bne b4
  //SEG1630 [877] phi from print_str_lines::@5 to print_str_lines::@9 [phi:print_str_lines::@5->print_str_lines::@9]
  //SEG1631 print_str_lines::@9
  //SEG1632 [878] call print_ln 
  //SEG1633 [880] phi from print_str_lines::@9 to print_ln [phi:print_str_lines::@9->print_ln]
    jsr print_ln
  //SEG1634 [879] (byte*~) print_char_cursor#103 ← (byte*) print_line_cursor#19 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG1635 [866] phi from print_str_lines::@9 to print_str_lines::@1 [phi:print_str_lines::@9->print_str_lines::@1]
  //SEG1636 [866] phi (byte*) print_line_cursor#17 = (byte*) print_line_cursor#19 [phi:print_str_lines::@9->print_str_lines::@1#0] -- register_copy 
  //SEG1637 [866] phi (byte*) print_char_cursor#19 = (byte*~) print_char_cursor#103 [phi:print_str_lines::@9->print_str_lines::@1#1] -- register_copy 
  //SEG1638 [866] phi (byte*) print_str_lines::str#2 = (byte*) print_str_lines::str#0 [phi:print_str_lines::@9->print_str_lines::@1#2] -- register_copy 
    jmp b1
}
//SEG1639 print_ln
// Print a newline
print_ln: {
  //SEG1640 [881] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG1641 [881] phi (byte*) print_line_cursor#18 = (byte*) print_line_cursor#17 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG1642 print_ln::@1
  b1:
  //SEG1643 [882] (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#18 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG1644 [883] if((byte*) print_line_cursor#19<(byte*) print_char_cursor#32) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1
  !:
  //SEG1645 print_ln::@return
  //SEG1646 [884] return 
    rts
}
//SEG1647 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 2
  //SEG1648 [886] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG1649 [886] phi (byte*) print_cls::sc#2 = (const byte*) menu::SCREEN#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<menu.SCREEN
    sta sc
    lda #>menu.SCREEN
    sta sc+1
  //SEG1650 [886] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG1651 [886] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG1652 print_cls::@1
  b1:
  //SEG1653 [887] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG1654 [888] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG1655 [889] if((byte*) print_cls::sc#1!=(const byte*) menu::SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>menu.SCREEN+$3e8
    bne b1
    lda sc
    cmp #<menu.SCREEN+$3e8
    bne b1
  //SEG1656 print_cls::@return
  //SEG1657 [890] return 
    rts
}
//SEG1658 print_set_screen
// Set the screen to print on. Also resets current line/char cursor.
print_set_screen: {
  //SEG1659 print_set_screen::@return
  //SEG1660 [892] return 
    rts
}
  // Default vallues for the palette
  DTV_PALETTE_DEFAULT: .byte 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Tables for the plotter - initialized by calling bitmap_draw_init();
  bitmap_plot_xlo: .fill $100, 0
  bitmap_plot_xhi: .fill $100, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  MENU_TEXT: .text "C64DTV Graphics Modes            CCLHBME@"+"                                 OHIIMCC@"+"                                 LUNCMMM@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 0000001@"+"3. Multicolor Char           (V) 0000010@"+"4. Standard Bitmap           (V) 0000100@"+"5. Multicolor Bitmap         (V) 0000110@"+"6. High Color Standard Char  (H) 0001000@"+"7. High Extended Color Char  (H) 0001001@"+"8. High Multicolor Char      (H) 0001010@"+"9. High Multicolor Bitmap    (H) 0001110@"+"a. Sixs Fred 2               (D) 0010111@"+"b. Two Plane Bitmap          (D) 0011101@"+"c. Sixs Fred (2 Plane MC BM) (D) 0011111@"+"d. 8bpp Pixel Cell           (D) 0111011@"+"e. Chunky 8bpp Bitmap        (D) 1111011@"+"----------------------------------------@"+"    (V) vicII (H) vicII+hicol (D) c64dtv@"+"@"

