(label) @1
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = (byte*) 53281
(byte) GREEN
(const byte) GREEN#0 GREEN = (byte) 5
(const byte) RADIX::BINARY BINARY = (number) 2
(const byte) RADIX::DECIMAL DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL OCTAL = (number) 8
(byte) RED
(const byte) RED#0 RED = (byte) 2
(void()) assert_byte((byte*) assert_byte::msg , (byte) assert_byte::b , (byte) assert_byte::c)
(label) assert_byte::@1
(label) assert_byte::@2
(label) assert_byte::@3
(label) assert_byte::@4
(label) assert_byte::@5
(label) assert_byte::@return
(byte) assert_byte::b
(byte) assert_byte::b#3 reg byte x 0.4
(byte) assert_byte::c
(byte) assert_byte::c#3 c zp ZP_BYTE:6 0.4
(byte*) assert_byte::msg
(byte*) assert_byte::msg#3 msg zp ZP_WORD:7 2.0
(void()) assert_sbyte((byte*) assert_sbyte::msg , (signed byte) assert_sbyte::b , (signed byte) assert_sbyte::c)
(label) assert_sbyte::@1
(label) assert_sbyte::@2
(label) assert_sbyte::@3
(label) assert_sbyte::@4
(label) assert_sbyte::@5
(label) assert_sbyte::@return
(signed byte) assert_sbyte::b
(signed byte) assert_sbyte::b#5 reg byte x 0.3333333333333333
(signed byte) assert_sbyte::c
(signed byte) assert_sbyte::c#5 c zp ZP_BYTE:6 0.3333333333333333
(byte*) assert_sbyte::msg
(byte*) assert_sbyte::msg#5 msg zp ZP_WORD:7 2.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp ZP_WORD:7 22.0
(byte*) memset::dst#2 dst zp ZP_WORD:7 14.666666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(byte*) 1024
(const string) msg msg = (string) "0=0@"
(const string) msg1 msg1 = (string) "0+2=2@"
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:2 11.0
(byte*) print_char_cursor#2 print_char_cursor zp ZP_WORD:2 2.230769230769231
(byte*) print_char_cursor#70 print_char_cursor zp ZP_WORD:2 3.0
(byte*) print_char_cursor#80 print_char_cursor zp ZP_WORD:2 18.0
(byte*~) print_char_cursor#86 print_char_cursor zp ZP_WORD:2 4.0
(byte*~) print_char_cursor#92 print_char_cursor zp ZP_WORD:2 4.0
(byte*~) print_char_cursor#93 print_char_cursor zp ZP_WORD:2 4.0
(void()) print_cls()
(label) print_cls::@return
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:4 1.2500000000000002
(byte*) print_line_cursor#24 print_line_cursor zp ZP_WORD:4 24.0
(byte*) print_line_cursor#47 print_line_cursor zp ZP_WORD:4 6.0
(byte*) print_line_cursor#50 print_line_cursor zp ZP_WORD:4 0.5454545454545454
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:7 22.0
(byte*) print_str::str#1 str zp ZP_WORD:7 4.0
(byte*) print_str::str#10 str zp ZP_WORD:7 11.5
(byte*) print_str::str#11 str zp ZP_WORD:7 6.0
(byte*) print_str::str#5 str zp ZP_WORD:7 2.0
(const string) str str = (string) " @"
(const string) str1 str1 = (string) "fail!@"
(const string) str2 str2 = (string) "ok@"
(void()) test_bytes()
(label) test_bytes::@1
(label) test_bytes::@2
(label) test_bytes::@return
(byte) test_bytes::bb
(const byte) test_bytes::bb#0 bb = (byte) 0
(byte) test_bytes::bc
(const byte) test_bytes::bc#0 bc = (byte) 2
(byte) test_bytes::bd
(const byte) test_bytes::bd#0 bd = (byte)(signed byte)(const byte) test_bytes::bc#0-(signed byte) 4
(const string) test_bytes::msg2 msg2 = (string) "0+2-4=254@"
(void()) test_sbytes()
(label) test_sbytes::@1
(label) test_sbytes::@2
(label) test_sbytes::@3
(label) test_sbytes::@4
(label) test_sbytes::@return
(signed byte) test_sbytes::bb
(const signed byte) test_sbytes::bb#0 bb = (signed byte) 0
(signed byte) test_sbytes::bc
(const signed byte) test_sbytes::bc#0 bc = (signed byte) 2
(signed byte) test_sbytes::bd
(const signed byte) test_sbytes::bd#0 bd = (const signed byte) test_sbytes::bc#0-(signed byte) 4
(signed byte) test_sbytes::be
(const signed byte) test_sbytes::be#0 be = -(const signed byte) test_sbytes::bd#0
(signed byte) test_sbytes::bf
(const signed byte) test_sbytes::bf#0 bf = (signed byte)(number) -$7f-(number) $7f
(const string) test_sbytes::msg2 msg2 = (string) "0+2-4=-2@"
(const string) test_sbytes::msg3 msg3 = (string) "-(0+2-4)=2@"
(const string) test_sbytes::msg4 msg4 = (string) "-127-127=2@"

reg byte x [ assert_sbyte::b#5 ]
zp ZP_WORD:2 [ print_char_cursor#80 print_char_cursor#70 print_char_cursor#2 print_char_cursor#86 print_char_cursor#1 print_char_cursor#92 print_char_cursor#93 ]
zp ZP_WORD:4 [ print_line_cursor#24 print_line_cursor#47 print_line_cursor#50 print_line_cursor#1 ]
reg byte x [ assert_byte::b#3 ]
zp ZP_BYTE:6 [ assert_byte::c#3 assert_sbyte::c#5 ]
zp ZP_WORD:7 [ memset::dst#2 memset::dst#1 assert_sbyte::msg#5 print_str::str#10 print_str::str#11 print_str::str#1 print_str::str#5 print_str::str#0 assert_byte::msg#3 ]
