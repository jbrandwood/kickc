@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [5] (word) main::line#10 ← phi( main/(byte) 0 main::@4/(word) main::line#2 )
  [6] if((word) main::line#10<(word)(number) $28*(number) $18) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@1 main::@6
  [7] (byte) main::c1#2 ← phi( main::@6/(byte) main::c1#1 main::@1/(byte) 0 )
  [8] if((byte) main::c1#2<(byte) $28) goto main::@6
  to:main::@return
main::@return: scope:[main]  from main::@5
  [9] return 
  to:@return
main::@6: scope:[main]  from main::@5
  [10] (word~) main::$6 ← (word) main::line#10 + (byte) main::c1#2
  [11] (byte*~) main::$9 ← (const byte*) main::screen + (word~) main::$6
  [12] *((byte*~) main::$9) ← (byte) ' '
  [13] (byte) main::c1#1 ← ++ (byte) main::c1#2
  to:main::@5
main::@2: scope:[main]  from main::@1 main::@3
  [14] (byte) main::c#2 ← phi( main::@1/(byte) 0 main::@3/(byte) main::c#1 )
  [15] if((byte) main::c#2<(byte) $28) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@2
  [16] (word) main::line#2 ← (word) main::line#10 + (byte) $28
  to:main::@1
main::@3: scope:[main]  from main::@2
  [17] (word~) main::$2 ← (word) main::line#10 + (byte) main::c#2
  [18] (word~) main::$4 ← (word) main::line#10 + (byte) main::c#2
  [19] (byte*~) main::$7 ← (const byte*) main::screen+(byte) $28 + (word~) main::$4
  [20] (byte*~) main::$8 ← (const byte*) main::screen + (word~) main::$2
  [21] *((byte*~) main::$8) ← *((byte*~) main::$7)
  [22] (byte) main::c#1 ← ++ (byte) main::c#2
  to:main::@2
