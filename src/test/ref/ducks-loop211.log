
CONTROL FLOW GRAPH SSA

void chrout(volatile char petscii)
chrout: scope:[chrout]  from main::@1
  asm { ldapetscii jsr$ffd2  }
  to:chrout::@return
chrout::@return: scope:[chrout]  from chrout
  return 
  to:@return

void main()
main: scope:[main]  from __start
  main::k#0 = 1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::k#2 = phi( main/main::k#0, main::@2/main::k#1 )
  main::$0 = main::k#2 * 4
  *((char *)$d3) = main::$0
  chrout::petscii = brick
  call chrout
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::k#3 = phi( main::@1/main::k#2 )
  main::k#1 = ++ main::k#3
  main::$2 = main::k#1 < 5
  if(main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
__constant const char brick = $e6
void chrout(volatile char petscii)
__loadstore volatile char chrout::petscii
void main()
number main::$0
bool main::$2
char main::k
char main::k#0
char main::k#1
char main::k#2
char main::k#3

Adding number conversion cast (unumber) 4 in main::$0 = main::k#2 * 4
Adding number conversion cast (unumber) main::$0 in main::$0 = main::k#2 * (unumber)4
Adding number conversion cast (unumber) 5 in main::$2 = main::k#1 < 5
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 4
Simplifying constant pointer cast (char *) 211
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in main::$0 = main::k#2 * 4
Alias main::k#2 = main::k#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$2 [10] if(main::k#1<5) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::k#0 = 1
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Rewriting multiplication to use shift [3] main::$0 = main::k#2 * 4
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings main::k#0
Constant inlined main::k#0 = 1
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@3(between main::@2 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to chrout:5 

Created 1 initial phi equivalence classes
Coalesced [9] main::k#4 = main::k#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@3
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::k#2 = phi( main/1, main::@2/main::k#1 )
  [2] main::$0 = main::k#2 << 2
  [3] *((char *) 211) = main::$0
  [4] chrout::petscii = brick
  [5] call chrout
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] main::k#1 = ++ main::k#2
  [7] if(main::k#1<5) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [8] return 
  to:@return

void chrout(volatile char petscii)
chrout: scope:[chrout]  from main::@1
  asm { ldapetscii jsr$ffd2  }
  to:chrout::@return
chrout::@return: scope:[chrout]  from chrout
  [10] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void chrout(volatile char petscii)
__loadstore volatile char chrout::petscii // 11.0
void main()
char main::$0 // 22.0
char main::k
char main::k#1 // 16.5
char main::k#2 // 6.6000000000000005

Initial phi equivalence classes
[ main::k#2 main::k#1 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable chrout::petscii to live range equivalence class [ chrout::petscii ]
Complete equivalence classes
[ main::k#2 main::k#1 ]
[ main::$0 ]
[ chrout::petscii ]
Allocated zp[1]:2 [ main::k#2 main::k#1 ]
Allocated zp[1]:3 [ main::$0 ]
Allocated zp[1]:4 [ chrout::petscii ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::$0 = main::k#2 << 2 [ main::k#2 main::$0 ] (  [ main::k#2 main::$0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::k#2 main::k#1 ]
Statement [4] chrout::petscii = brick [ main::k#2 chrout::petscii ] (  [ main::k#2 chrout::petscii ] { }  ) always clobbers reg byte a 
Statement asm { ldapetscii jsr$ffd2  } always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp[1]:2 [ main::k#2 main::k#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::k#2 main::k#1 ]
Statement [2] main::$0 = main::k#2 << 2 [ main::k#2 main::$0 ] (  [ main::k#2 main::$0 ] { }  ) always clobbers reg byte a 
Statement [4] chrout::petscii = brick [ main::k#2 chrout::petscii ] (  [ main::k#2 chrout::petscii ] { }  ) always clobbers reg byte a 
Statement [7] if(main::k#1<5) goto main::@1 [ main::k#1 ] (  [ main::k#1 ] { }  ) always clobbers reg byte a 
Statement asm { ldapetscii jsr$ffd2  } always clobbers reg byte a reg byte x reg byte y 
Potential registers zp[1]:2 [ main::k#2 main::k#1 ] : zp[1]:2 , 
Potential registers zp[1]:3 [ main::$0 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ chrout::petscii ] : zp[1]:4 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 23.1: zp[1]:2 [ main::k#2 main::k#1 ] 22: zp[1]:3 [ main::$0 ] 
Uplift Scope [chrout] 11: zp[1]:4 [ chrout::petscii ] 
Uplift Scope [] 

Uplifting [main] best 530 combination zp[1]:2 [ main::k#2 main::k#1 ] reg byte a [ main::$0 ] 
Uplifting [chrout] best 530 combination zp[1]:4 [ chrout::petscii ] 
Uplifting [] best 530 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::k#2 main::k#1 ]
Uplifting [main] best 530 combination zp[1]:2 [ main::k#2 main::k#1 ] 
Attempting to uplift remaining variables inzp[1]:4 [ chrout::petscii ]
Uplifting [chrout] best 530 combination zp[1]:4 [ chrout::petscii ] 
Allocated (was zp[1]:4) zp[1]:3 [ chrout::petscii ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
/// @file
/// PEEK and POKE macros for those who want to write BASIC code in C
///
/// Based on https://github.com/cc65/cc65/blob/master/include/peekpoke.h
  // Upstart
  // Commodore 64 PRG executable file
.file [name="ducks-loop211.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const brick = $e6
.segment Code
  // main
main: {
    .label k = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::k#2 = 1 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z k
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::k#2 = main::k#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$0 = main::k#2 << 2 -- vbuaa=vbuz1_rol_2 
    lda.z k
    asl
    asl
    // [3] *((char *) 211) = main::$0 -- _deref_pbuc1=vbuaa 
    sta.z $d3
    // [4] chrout::petscii = brick -- vbuz1=vbuc1 
    lda #brick
    sta.z chrout.petscii
    // [5] call chrout
    jsr chrout
    jmp __b2
    // main::@2
  __b2:
    // [6] main::k#1 = ++ main::k#2 -- vbuz1=_inc_vbuz1 
    inc.z k
    // [7] if(main::k#1<5) goto main::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda.z k
    cmp #5
    bcc __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // chrout
// void chrout(__zp(3) volatile char petscii)
chrout: {
    .label petscii = 3
    // asm { ldapetscii jsr$ffd2  }
    lda petscii
    jsr $ffd2
    jmp __breturn
    // chrout::@return
  __breturn:
    // [10] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
__constant const char brick = $e6
void chrout(volatile char petscii)
__loadstore volatile char chrout::petscii // zp[1]:3 11.0
void main()
char main::$0 // reg byte a 22.0
char main::k
char main::k#1 // k zp[1]:2 16.5
char main::k#2 // k zp[1]:2 6.6000000000000005

zp[1]:2 [ main::k#2 main::k#1 ]
reg byte a [ main::$0 ]
zp[1]:3 [ chrout::petscii ]


FINAL ASSEMBLER
Score: 407

  // File Comments
/// @file
/// PEEK and POKE macros for those who want to write BASIC code in C
///
/// Based on https://github.com/cc65/cc65/blob/master/include/peekpoke.h
  // Upstart
  // Commodore 64 PRG executable file
.file [name="ducks-loop211.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const brick = $e6
.segment Code
  // main
main: {
    .label k = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::k#2 = 1 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z k
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::k#2 = main::k#1 [phi:main::@2->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // POKE
    // [2] main::$0 = main::k#2 << 2 -- vbuaa=vbuz1_rol_2 
    lda.z k
    asl
    asl
    // [3] *((char *) 211) = main::$0 -- _deref_pbuc1=vbuaa 
    sta.z $d3
    // chrout(brick)
    // [4] chrout::petscii = brick -- vbuz1=vbuc1 
    lda #brick
    sta.z chrout.petscii
    // [5] call chrout
    jsr chrout
    // main::@2
    // ++k;
    // [6] main::k#1 = ++ main::k#2 -- vbuz1=_inc_vbuz1 
    inc.z k
    // while (k<5)
    // [7] if(main::k#1<5) goto main::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda.z k
    cmp #5
    bcc __b1
    // main::@return
    // }
    // [8] return 
    rts
}
  // chrout
// void chrout(__zp(3) volatile char petscii)
chrout: {
    .label petscii = 3
    // asm
    // asm { ldapetscii jsr$ffd2  }
    lda petscii
    jsr $ffd2
    // chrout::@return
    // }
    // [10] return 
    rts
}
  // File Data

