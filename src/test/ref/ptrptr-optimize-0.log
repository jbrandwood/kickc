Setting inferred volatile on symbol affected by address-of main::pscreen = &main::screen

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::screen = (byte*)$400
  *(*main::pscreen) = 'a'
  *main::pscreen = ++ *main::pscreen
  *(*main::pscreen) = 'b'
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
constant byte** main::pscreen = &main::screen
byte* volatile main::screen loadstore

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] main::screen = (byte*) 1024
  [1] *(*main::pscreen) = 'a'
  [2] *main::pscreen = ++ *main::pscreen
  [3] *(*main::pscreen) = 'b'
  to:main::@return
main::@return: scope:[main]  from main
  [4] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte* volatile main::screen loadstore 20.0

Initial phi equivalence classes
Added variable main::screen to live range equivalence class [ main::screen ]
Complete equivalence classes
[ main::screen ]
Allocated zp[2]:2 [ main::screen ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] main::screen = (byte*) 1024 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(*main::pscreen) = 'a' [ ] (  [ ] { }  ) always clobbers reg byte a reg byte y 
Statement [3] *(*main::pscreen) = 'b' [ ] (  [ ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ main::screen ] : zp[2]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 20: zp[2]:2 [ main::screen ] 
Uplift Scope [] 

Uplifting [main] best 75 combination zp[2]:2 [ main::screen ] 
Uplifting [] best 75 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests optimization of constant pointers to pointers
  // Upstart
  // Commodore 64 PRG executable file
.file [name="ptrptr-optimize-0.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label pscreen = screen
    .label screen = 2
    // [0] main::screen = (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [1] *(*main::pscreen) = 'a' -- _deref_(_deref_qbuc1)=vbuc2 
    lda #'a'
    ldy.z pscreen
    sty.z $fe
    ldy.z pscreen+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // [2] *main::pscreen = ++ *main::pscreen -- _deref_qbuc1=_inc__deref_qbuc1 
    inc.z pscreen
    bne !+
    inc.z pscreen+1
  !:
    // [3] *(*main::pscreen) = 'b' -- _deref_(_deref_qbuc1)=vbuc2 
    lda #'b'
    ldy.z pscreen
    sty.z $fe
    ldy.z pscreen+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
constant byte** main::pscreen = &main::screen
byte* volatile main::screen loadstore zp[2]:2 20.0

zp[2]:2 [ main::screen ]


FINAL ASSEMBLER
Score: 72

  // File Comments
// Tests optimization of constant pointers to pointers
  // Upstart
  // Commodore 64 PRG executable file
.file [name="ptrptr-optimize-0.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label pscreen = screen
    .label screen = 2
    // screen = 0x400
    // [0] main::screen = (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // **pscreen = 'a'
    // [1] *(*main::pscreen) = 'a' -- _deref_(_deref_qbuc1)=vbuc2 
    lda #'a'
    ldy.z pscreen
    sty.z $fe
    ldy.z pscreen+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // (*pscreen)++;
    // [2] *main::pscreen = ++ *main::pscreen -- _deref_qbuc1=_inc__deref_qbuc1 
    inc.z pscreen
    bne !+
    inc.z pscreen+1
  !:
    // **pscreen = 'b'
    // [3] *(*main::pscreen) = 'b' -- _deref_(_deref_qbuc1)=vbuc2 
    lda #'b'
    ldy.z pscreen
    sty.z $fe
    ldy.z pscreen+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // main::@return
    // }
    // [4] return 
    rts
}
  // File Data

