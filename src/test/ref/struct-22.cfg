@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((byte*)&(struct Point) main::point1) ← (byte) 2
  [5] *((byte*)&(struct Point) main::point1+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) 3
  [6] *((byte*)&(struct Point) main::point2) ← (byte) 4
  [7] *((byte*)&(struct Point) main::point2+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) 5
  [8] (byte) print::p_x#0 ← *((byte*)&(struct Point) main::point1)
  [9] (byte) print::p_y#0 ← *((byte*)&(struct Point) main::point1+(const byte) OFFSET_STRUCT_POINT_Y)
  [10] call print 
  to:main::@1
main::@1: scope:[main]  from main
  [11] (byte) print::p_x#1 ← *((byte*)&(struct Point) main::point2)
  [12] (byte) print::p_y#1 ← *((byte*)&(struct Point) main::point2+(const byte) OFFSET_STRUCT_POINT_Y)
  [13] call print 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [14] return 
  to:@return

(void()) print((byte) print::p_x , (byte) print::p_y)
print: scope:[print]  from main main::@1
  [15] (byte) print::p_y#2 ← phi( main/(byte) print::p_y#0 main::@1/(byte) print::p_y#1 )
  [15] (byte) print::p_x#2 ← phi( main/(byte) print::p_x#0 main::@1/(byte) print::p_x#1 )
  [16] *((const byte*) SCREEN) ← (byte) print::p_x#2
  [17] *((const byte*) SCREEN+(byte) 1) ← (byte) print::p_y#2
  to:print::@return
print::@return: scope:[print]  from print
  [18] return 
  to:@return
