Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  *((const byte*) BG_COLOR) ← (number) 0
  *((const byte*) FGCOL) ← (number) 0
  (byte~) main::$0 ← (const byte) BMM | (const byte) DEN
  (byte~) main::$1 ← (byte~) main::$0 | (const byte) RSEL
  (number~) main::$2 ← (byte~) main::$1 | (number) 3
  *((const byte*) D011) ← (number~) main::$2
  (word~) main::$11 ← (word)(const byte*) SCREEN
  (number~) main::$3 ← (word~) main::$11 / (number) $40
  (number~) main::$4 ← (number~) main::$3 | (word)(const nomodify byte*) BITMAP/(number) $400
  *((const byte*) D018) ← (byte)(number~) main::$4
  call init_screen 
  to:main::@3
main::@3: scope:[main]  from main
  call init_plot_tables 
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@4 main::@5
  (bool~) main::$7 ← *((const byte*) RASTER) != (number) $ff
  if((bool~) main::$7) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  *((const byte*) BG_COLOR) ← ++ *((const byte*) BG_COLOR)
  call plots 
  to:main::@5
main::@5: scope:[main]  from main::@2
  *((const byte*) BG_COLOR) ← -- *((const byte*) BG_COLOR)
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return

(void()) plots()
plots: scope:[plots]  from main::@2
  (byte) plots::i#0 ← (byte) 0
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  (byte) plots::i#2 ← phi( plots/(byte) plots::i#0 plots::@3/(byte) plots::i#1 )
  (bool~) plots::$0 ← (byte) plots::i#2 < (const byte) plots_cnt
  if((bool~) plots::$0) goto plots::@2
  to:plots::@return
plots::@2: scope:[plots]  from plots::@1
  (byte) plots::i#3 ← phi( plots::@1/(byte) plots::i#2 )
  (byte) plot::x#0 ← *((const byte*) plots_x + (byte) plots::i#3)
  (byte) plot::y#0 ← *((const byte*) plots_y + (byte) plots::i#3)
  call plot 
  to:plots::@3
plots::@3: scope:[plots]  from plots::@2
  (byte) plots::i#4 ← phi( plots::@2/(byte) plots::i#3 )
  (byte) plots::i#1 ← ++ (byte) plots::i#4
  to:plots::@1
plots::@return: scope:[plots]  from plots::@1
  return 
  to:@return

(void()) plot((byte) plot::x , (byte) plot::y)
plot: scope:[plot]  from plots::@2
  (byte) plot::y#1 ← phi( plots::@2/(byte) plot::y#0 )
  (byte) plot::x#1 ← phi( plots::@2/(byte) plot::x#0 )
  (byte*) plot::plotter_x#0 ← (byte*)(number) 0
  (word) plot::plotter_y#0 ← (word) 0
  (byte~) plot::$6 ← *((const to_nomodify byte*) plot_xhi + (byte) plot::x#1)
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$6
  (byte~) plot::$7 ← *((const to_nomodify byte*) plot_xlo + (byte) plot::x#1)
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$7
  (byte~) plot::$8 ← *((const to_nomodify byte*) plot_yhi + (byte) plot::y#1)
  (word) plot::plotter_y#1 ← (word) plot::plotter_y#0 hi= (byte~) plot::$8
  (byte~) plot::$9 ← *((const to_nomodify byte*) plot_ylo + (byte) plot::y#1)
  (word) plot::plotter_y#2 ← (word) plot::plotter_y#1 lo= (byte~) plot::$9
  (byte*~) plot::$4 ← (byte*) plot::plotter_x#2 + (word) plot::plotter_y#2
  (byte*) plot::plotter#0 ← (byte*~) plot::$4
  (byte~) plot::$5 ← *((byte*) plot::plotter#0) | *((const to_nomodify byte*) plot_bit + (byte) plot::x#1)
  *((byte*) plot::plotter#0) ← (byte~) plot::$5
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return

(void()) init_plot_tables()
init_plot_tables: scope:[init_plot_tables]  from main::@3
  (byte) init_plot_tables::bits#0 ← (byte) $80
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bits#3 ← phi( init_plot_tables/(byte) init_plot_tables::bits#0 init_plot_tables::@2/(byte) init_plot_tables::bits#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (number~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (number) $f8
  *((const to_nomodify byte*) plot_xlo + (byte) init_plot_tables::x#2) ← (number~) init_plot_tables::$0
  *((const to_nomodify byte*) plot_xhi + (byte) init_plot_tables::x#2) ← >(const nomodify byte*) BITMAP
  *((const to_nomodify byte*) plot_bit + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bits#3
  (number~) init_plot_tables::$1 ← (byte) init_plot_tables::bits#3 / (number) 2
  (byte) init_plot_tables::bits#1 ← (number~) init_plot_tables::$1
  (bool~) init_plot_tables::$2 ← (byte) init_plot_tables::bits#1 == (number) 0
  (bool~) init_plot_tables::$3 ← ! (bool~) init_plot_tables::$2
  if((bool~) init_plot_tables::$3) goto init_plot_tables::@2
  to:init_plot_tables::@3
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@3
  (byte) init_plot_tables::bits#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bits#1 init_plot_tables::@3/(byte) init_plot_tables::bits#2 )
  (byte) init_plot_tables::x#3 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 init_plot_tables::@3/(byte) init_plot_tables::x#4 )
  (byte) init_plot_tables::x#1 ← (byte) init_plot_tables::x#3 + rangenext(0,$ff)
  (bool~) init_plot_tables::$4 ← (byte) init_plot_tables::x#1 != rangelast(0,$ff)
  if((bool~) init_plot_tables::$4) goto init_plot_tables::@1
  to:init_plot_tables::@4
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::x#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 )
  (byte) init_plot_tables::bits#2 ← (number) $80
  to:init_plot_tables::@2
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs#0 ← (byte*)(number) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@5
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#0 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#4 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#0 init_plot_tables::@6/(byte) init_plot_tables::y#1 )
  (number~) init_plot_tables::$5 ← (byte) init_plot_tables::y#2 & (number) 7
  (byte~) init_plot_tables::$6 ← < (byte*) init_plot_tables::yoffs#2
  (number~) init_plot_tables::$7 ← (number~) init_plot_tables::$5 | (byte~) init_plot_tables::$6
  *((const to_nomodify byte*) plot_ylo + (byte) init_plot_tables::y#2) ← (number~) init_plot_tables::$7
  (byte~) init_plot_tables::$8 ← > (byte*) init_plot_tables::yoffs#2
  *((const to_nomodify byte*) plot_yhi + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (number~) init_plot_tables::$9 ← (byte) init_plot_tables::y#2 & (number) 7
  (bool~) init_plot_tables::$10 ← (number~) init_plot_tables::$9 == (number) 7
  (bool~) init_plot_tables::$11 ← ! (bool~) init_plot_tables::$10
  if((bool~) init_plot_tables::$11) goto init_plot_tables::@6
  to:init_plot_tables::@7
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@5 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@5/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#3 ← phi( init_plot_tables::@5/(byte) init_plot_tables::y#2 init_plot_tables::@7/(byte) init_plot_tables::y#4 )
  (byte) init_plot_tables::y#1 ← (byte) init_plot_tables::y#3 + rangenext(0,$ff)
  (bool~) init_plot_tables::$13 ← (byte) init_plot_tables::y#1 != rangelast(0,$ff)
  if((bool~) init_plot_tables::$13) goto init_plot_tables::@5
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@5
  (byte) init_plot_tables::y#4 ← phi( init_plot_tables::@5/(byte) init_plot_tables::y#2 )
  (byte*) init_plot_tables::yoffs#3 ← phi( init_plot_tables::@5/(byte*) init_plot_tables::yoffs#2 )
  (byte*~) init_plot_tables::$12 ← (byte*) init_plot_tables::yoffs#3 + (number) $28*(number) 8
  (byte*) init_plot_tables::yoffs#1 ← (byte*~) init_plot_tables::$12
  to:init_plot_tables::@6
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@6
  return 
  to:@return

(void()) init_screen()
init_screen: scope:[init_screen]  from main
  (byte*) init_screen::b#0 ← (const nomodify byte*) BITMAP
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@2
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@2/(byte*) init_screen::b#1 )
  (bool~) init_screen::$0 ← (byte*) init_screen::b#2 != (const nomodify byte*) BITMAP+(number) $2000
  if((bool~) init_screen::$0) goto init_screen::@2
  to:init_screen::@3
init_screen::@2: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::b#3 ← phi( init_screen::@1/(byte*) init_screen::b#2 )
  *((byte*) init_screen::b#3) ← (number) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#3
  to:init_screen::@1
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c#0 ← (const byte*) SCREEN
  to:init_screen::@4
init_screen::@4: scope:[init_screen]  from init_screen::@3 init_screen::@5
  (byte*) init_screen::c#2 ← phi( init_screen::@3/(byte*) init_screen::c#0 init_screen::@5/(byte*) init_screen::c#1 )
  (byte*~) init_screen::$1 ← (const byte*) SCREEN + (number) $400
  (bool~) init_screen::$2 ← (byte*) init_screen::c#2 != (byte*~) init_screen::$1
  if((bool~) init_screen::$2) goto init_screen::@5
  to:init_screen::@return
init_screen::@5: scope:[init_screen]  from init_screen::@4
  (byte*) init_screen::c#3 ← phi( init_screen::@4/(byte*) init_screen::c#2 )
  *((byte*) init_screen::c#3) ← (number) $14
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#3
  to:init_screen::@4
init_screen::@return: scope:[init_screen]  from init_screen::@4
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const byte*) BG_COLOR = (byte*)(number) $d020
(const nomodify byte*) BITMAP = (byte*)(number) $2000
(const byte) BMM = (byte) $20
(const byte*) D011 = (byte*)(number) $d011
(const byte*) D018 = (byte*)(number) $d018
(const byte) DEN = (byte) $10
(const byte*) FGCOL = (byte*)(number) $d021
(const byte*) RASTER = (byte*)(number) $d012
(const byte) RSEL = (byte) 8
(const byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(void()) init_plot_tables()
(number~) init_plot_tables::$0
(number~) init_plot_tables::$1
(bool~) init_plot_tables::$10
(bool~) init_plot_tables::$11
(byte*~) init_plot_tables::$12
(bool~) init_plot_tables::$13
(bool~) init_plot_tables::$2
(bool~) init_plot_tables::$3
(bool~) init_plot_tables::$4
(number~) init_plot_tables::$5
(byte~) init_plot_tables::$6
(number~) init_plot_tables::$7
(byte~) init_plot_tables::$8
(number~) init_plot_tables::$9
(label) init_plot_tables::@1
(label) init_plot_tables::@2
(label) init_plot_tables::@3
(label) init_plot_tables::@4
(label) init_plot_tables::@5
(label) init_plot_tables::@6
(label) init_plot_tables::@7
(label) init_plot_tables::@return
(byte) init_plot_tables::bits
(byte) init_plot_tables::bits#0
(byte) init_plot_tables::bits#1
(byte) init_plot_tables::bits#2
(byte) init_plot_tables::bits#3
(byte) init_plot_tables::bits#4
(byte) init_plot_tables::x
(byte) init_plot_tables::x#0
(byte) init_plot_tables::x#1
(byte) init_plot_tables::x#2
(byte) init_plot_tables::x#3
(byte) init_plot_tables::x#4
(byte) init_plot_tables::y
(byte) init_plot_tables::y#0
(byte) init_plot_tables::y#1
(byte) init_plot_tables::y#2
(byte) init_plot_tables::y#3
(byte) init_plot_tables::y#4
(byte*) init_plot_tables::yoffs
(byte*) init_plot_tables::yoffs#0
(byte*) init_plot_tables::yoffs#1
(byte*) init_plot_tables::yoffs#2
(byte*) init_plot_tables::yoffs#3
(byte*) init_plot_tables::yoffs#4
(void()) init_screen()
(bool~) init_screen::$0
(byte*~) init_screen::$1
(bool~) init_screen::$2
(label) init_screen::@1
(label) init_screen::@2
(label) init_screen::@3
(label) init_screen::@4
(label) init_screen::@5
(label) init_screen::@return
(byte*) init_screen::b
(byte*) init_screen::b#0
(byte*) init_screen::b#1
(byte*) init_screen::b#2
(byte*) init_screen::b#3
(byte*) init_screen::c
(byte*) init_screen::c#0
(byte*) init_screen::c#1
(byte*) init_screen::c#2
(byte*) init_screen::c#3
(void()) main()
(byte~) main::$0
(byte~) main::$1
(word~) main::$11
(number~) main::$2
(number~) main::$3
(number~) main::$4
(bool~) main::$7
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(void()) plot((byte) plot::x , (byte) plot::y)
(byte*~) plot::$4
(byte~) plot::$5
(byte~) plot::$6
(byte~) plot::$7
(byte~) plot::$8
(byte~) plot::$9
(label) plot::@return
(byte*) plot::plotter
(byte*) plot::plotter#0
(byte*) plot::plotter_x
(byte*) plot::plotter_x#0
(byte*) plot::plotter_x#1
(byte*) plot::plotter_x#2
(word) plot::plotter_y
(word) plot::plotter_y#0
(word) plot::plotter_y#1
(word) plot::plotter_y#2
(byte) plot::x
(byte) plot::x#0
(byte) plot::x#1
(byte) plot::y
(byte) plot::y#0
(byte) plot::y#1
(const to_nomodify byte*) plot_bit[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) plot_xhi[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) plot_xlo[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) plot_yhi[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) plot_ylo[(number) $100]  = { fill( $100, 0) }
(void()) plots()
(bool~) plots::$0
(label) plots::@1
(label) plots::@2
(label) plots::@3
(label) plots::@return
(byte) plots::i
(byte) plots::i#0
(byte) plots::i#1
(byte) plots::i#2
(byte) plots::i#3
(byte) plots::i#4
(const byte) plots_cnt = (byte) 8
(const byte*) plots_x[]  = { (byte) $3c, (byte) $50, (byte) $6e, (byte) $50, (byte) $3c, (byte) $28, (byte) $a, (byte) $28 }
(const byte*) plots_y[]  = { (byte) $a, (byte) $28, (byte) $3c, (byte) $50, (byte) $6e, (byte) $50, (byte) $3c, (byte) $28 }

Adding number conversion cast (unumber) 0 in *((const byte*) BG_COLOR) ← (number) 0
Adding number conversion cast (unumber) 0 in *((const byte*) FGCOL) ← (number) 0
Adding number conversion cast (unumber) 3 in (number~) main::$2 ← (byte~) main::$1 | (number) 3
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← (byte~) main::$1 | (unumber)(number) 3
Adding number conversion cast (unumber) $40 in (number~) main::$3 ← (word~) main::$11 / (number) $40
Adding number conversion cast (unumber) main::$3 in (number~) main::$3 ← (word~) main::$11 / (unumber)(number) $40
Adding number conversion cast (unumber) (word)BITMAP/$400 in (number~) main::$4 ← (unumber~) main::$3 | (word)(const nomodify byte*) BITMAP/(number) $400
Adding number conversion cast (unumber) main::$4 in (number~) main::$4 ← (unumber~) main::$3 | (unumber)(word)(const nomodify byte*) BITMAP/(number) $400
Adding number conversion cast (unumber) $400 in (unumber~) main::$4 ← (unumber~) main::$3 | (unumber)(word)(const nomodify byte*) BITMAP/(number) $400
Adding number conversion cast (unumber) $ff in (bool~) main::$7 ← *((const byte*) RASTER) != (number) $ff
Adding number conversion cast (unumber) $f8 in (number~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (number) $f8
Adding number conversion cast (unumber) init_plot_tables::$0 in (number~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (unumber)(number) $f8
Adding number conversion cast (unumber) 2 in (number~) init_plot_tables::$1 ← (byte) init_plot_tables::bits#3 / (number) 2
Adding number conversion cast (unumber) init_plot_tables::$1 in (number~) init_plot_tables::$1 ← (byte) init_plot_tables::bits#3 / (unumber)(number) 2
Adding number conversion cast (unumber) 0 in (bool~) init_plot_tables::$2 ← (byte) init_plot_tables::bits#1 == (number) 0
Adding number conversion cast (unumber) $80 in (byte) init_plot_tables::bits#2 ← (number) $80
Adding number conversion cast (unumber) 7 in (number~) init_plot_tables::$5 ← (byte) init_plot_tables::y#2 & (number) 7
Adding number conversion cast (unumber) init_plot_tables::$5 in (number~) init_plot_tables::$5 ← (byte) init_plot_tables::y#2 & (unumber)(number) 7
Adding number conversion cast (unumber) init_plot_tables::$7 in (number~) init_plot_tables::$7 ← (unumber~) init_plot_tables::$5 | (byte~) init_plot_tables::$6
Adding number conversion cast (unumber) 7 in (number~) init_plot_tables::$9 ← (byte) init_plot_tables::y#2 & (number) 7
Adding number conversion cast (unumber) init_plot_tables::$9 in (number~) init_plot_tables::$9 ← (byte) init_plot_tables::y#2 & (unumber)(number) 7
Adding number conversion cast (unumber) 7 in (bool~) init_plot_tables::$10 ← (unumber~) init_plot_tables::$9 == (number) 7
Adding number conversion cast (unumber) $28*8 in (byte*~) init_plot_tables::$12 ← (byte*) init_plot_tables::yoffs#3 + (number) $28*(number) 8
Adding number conversion cast (unumber) $2000 in (bool~) init_screen::$0 ← (byte*) init_screen::b#2 != (const nomodify byte*) BITMAP+(number) $2000
Adding number conversion cast (unumber) 0 in *((byte*) init_screen::b#3) ← (number) 0
Adding number conversion cast (unumber) $400 in (byte*~) init_screen::$1 ← (const byte*) SCREEN + (number) $400
Adding number conversion cast (unumber) $14 in *((byte*) init_screen::c#3) ← (number) $14
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((const byte*) BG_COLOR) ← (unumber)(number) 0
Inlining cast *((const byte*) FGCOL) ← (unumber)(number) 0
Inlining cast (byte) init_plot_tables::bits#2 ← (unumber)(number) $80
Inlining cast *((byte*) init_screen::b#3) ← (unumber)(number) 0
Inlining cast *((byte*) init_screen::c#3) ← (unumber)(number) $14
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 8192
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast $40
Simplifying constant integer cast (word)(const nomodify byte*) BITMAP/(unumber)(number) $400
Simplifying constant integer cast $400
Simplifying constant integer cast $ff
Simplifying constant pointer cast (byte*) 0
Simplifying constant integer cast $f8
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant pointer cast (byte*) 0
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast $2000
Simplifying constant integer cast 0
Simplifying constant integer cast $400
Simplifying constant integer cast $14
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $40
Finalized unsigned number type (word) $400
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) $f8
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (word) $2000
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $400
Finalized unsigned number type (byte) $14
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$2 ← (byte~) main::$1 | (byte) 3
Inferred type updated to word in (unumber~) main::$3 ← (word~) main::$11 / (byte) $40
Inferred type updated to word in (unumber~) main::$4 ← (word~) main::$3 | (word)(const nomodify byte*) BITMAP/(word) $400
Inferred type updated to byte in (unumber~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) $f8
Inferred type updated to byte in (unumber~) init_plot_tables::$1 ← (byte) init_plot_tables::bits#3 / (byte) 2
Inferred type updated to byte in (unumber~) init_plot_tables::$5 ← (byte) init_plot_tables::y#2 & (byte) 7
Inferred type updated to byte in (unumber~) init_plot_tables::$7 ← (byte~) init_plot_tables::$5 | (byte~) init_plot_tables::$6
Inferred type updated to byte in (unumber~) init_plot_tables::$9 ← (byte) init_plot_tables::y#2 & (byte) 7
Inversing boolean not [56] (bool~) init_plot_tables::$3 ← (byte) init_plot_tables::bits#1 != (byte) 0 from [55] (bool~) init_plot_tables::$2 ← (byte) init_plot_tables::bits#1 == (byte) 0
Inversing boolean not [75] (bool~) init_plot_tables::$11 ← (byte~) init_plot_tables::$9 != (byte) 7 from [74] (bool~) init_plot_tables::$10 ← (byte~) init_plot_tables::$9 == (byte) 7
Successful SSA optimization Pass2UnaryNotSimplification
Alias plots::i#2 = plots::i#3 plots::i#4 
Alias plot::plotter#0 = plot::$4 
Alias init_plot_tables::bits#1 = init_plot_tables::$1 
Alias init_plot_tables::x#2 = init_plot_tables::x#4 
Alias init_plot_tables::yoffs#2 = init_plot_tables::yoffs#3 
Alias init_plot_tables::y#2 = init_plot_tables::y#4 
Alias init_plot_tables::yoffs#1 = init_plot_tables::$12 
Alias init_screen::b#2 = init_screen::b#3 
Alias init_screen::c#2 = init_screen::c#3 
Successful SSA optimization Pass2AliasElimination
Alias init_plot_tables::x#2 = init_plot_tables::x#3 
Alias init_plot_tables::y#2 = init_plot_tables::y#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) plot::x#1 (byte) plot::x#0
Identical Phi Values (byte) plot::y#1 (byte) plot::y#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [73] (byte~) init_plot_tables::$9 ← (byte) init_plot_tables::y#2 & (byte) 7
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) main::$7 [13] if(*((const byte*) RASTER)!=(byte) $ff) goto main::@1
Simple Condition (bool~) plots::$0 [22] if((byte) plots::i#2<(const byte) plots_cnt) goto plots::@2
Simple Condition (bool~) init_plot_tables::$3 [52] if((byte) init_plot_tables::bits#1!=(byte) 0) goto init_plot_tables::@2
Simple Condition (bool~) init_plot_tables::$4 [56] if((byte) init_plot_tables::x#1!=rangelast(0,$ff)) goto init_plot_tables::@1
Simple Condition (bool~) init_plot_tables::$11 [69] if((byte~) init_plot_tables::$9!=(byte) 7) goto init_plot_tables::@6
Simple Condition (bool~) init_plot_tables::$13 [73] if((byte) init_plot_tables::y#1!=rangelast(0,$ff)) goto init_plot_tables::@5
Simple Condition (bool~) init_screen::$0 [79] if((byte*) init_screen::b#2!=(const nomodify byte*) BITMAP+(word) $2000) goto init_screen::@2
Simple Condition (bool~) init_screen::$2 [86] if((byte*) init_screen::c#2!=(byte*~) init_screen::$1) goto init_screen::@5
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [2] (byte~) main::$0 ← (const byte) BMM | (const byte) DEN
Constant right-side identified [6] (word~) main::$11 ← (word)(const byte*) SCREEN
Constant right-side identified [84] (byte*~) init_screen::$1 ← (const byte*) SCREEN + (word) $400
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$0 = BMM|DEN
Constant (const word) main::$11 = (word)SCREEN
Constant (const byte) plots::i#0 = 0
Constant (const byte*) plot::plotter_x#0 = (byte*) 0
Constant (const word) plot::plotter_y#0 = 0
Constant (const byte) init_plot_tables::bits#0 = $80
Constant (const byte) init_plot_tables::x#0 = 0
Constant (const byte) init_plot_tables::bits#2 = $80
Constant (const byte*) init_plot_tables::yoffs#0 = (byte*) 0
Constant (const byte) init_plot_tables::y#0 = 0
Constant (const byte*) init_screen::b#0 = BITMAP
Constant (const byte*) init_screen::c#0 = SCREEN
Constant (const byte*) init_screen::$1 = SCREEN+$400
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [17] if(true) goto main::@1
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [54] init_plot_tables::x#1 ← ++ init_plot_tables::x#2 to ++
Resolved ranged comparison value [56] if(init_plot_tables::x#1!=rangelast(0,$ff)) goto init_plot_tables::@1 to (number) 0
Resolved ranged next value [71] init_plot_tables::y#1 ← ++ init_plot_tables::y#2 to ++
Resolved ranged comparison value [73] if(init_plot_tables::y#1!=rangelast(0,$ff)) goto init_plot_tables::@5 to (number) 0
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 0 in [42] if((byte) init_plot_tables::x#1!=(number) 0) goto init_plot_tables::@1
Adding number conversion cast (unumber) 0 in [54] if((byte) init_plot_tables::y#1!=(number) 0) goto init_plot_tables::@5
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias init_plot_tables::$9 = init_plot_tables::$5 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [2] (byte~) main::$1 ← (const byte) main::$0 | (const byte) RSEL
Constant right-side identified [5] (word~) main::$3 ← (const word) main::$11 / (byte) $40
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$1 = main::$0|RSEL
Constant (const word) main::$3 = main::$11/$40
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [2] (byte~) main::$2 ← (const byte) main::$1 | (byte) 3
Constant right-side identified [4] (word~) main::$4 ← (const word) main::$3 | (word)(const nomodify byte*) BITMAP/(word) $400
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$2 = main::$1|3
Constant (const word) main::$4 = main::$3|(word)BITMAP/$400
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte)main::$4 in [5] *((const byte*) D018) ← (byte)(const word) main::$4
Successful SSA optimization Pass2ConstantValues
Rewriting division to use shift [34] (byte) init_plot_tables::bits#1 ← (byte) init_plot_tables::bits#3 / (byte) 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) plots::i#0
Inlining constant with var siblings (const byte*) plot::plotter_x#0
Inlining constant with var siblings (const word) plot::plotter_y#0
Inlining constant with var siblings (const byte) init_plot_tables::bits#0
Inlining constant with var siblings (const byte) init_plot_tables::x#0
Inlining constant with var siblings (const byte) init_plot_tables::bits#2
Inlining constant with var siblings (const byte*) init_plot_tables::yoffs#0
Inlining constant with var siblings (const byte) init_plot_tables::y#0
Inlining constant with var siblings (const byte*) init_screen::b#0
Inlining constant with var siblings (const byte*) init_screen::c#0
Constant inlined plots::i#0 = (byte) 0
Constant inlined init_plot_tables::bits#2 = (byte) $80
Constant inlined init_plot_tables::bits#0 = (byte) $80
Constant inlined plot::plotter_y#0 = (word) 0
Constant inlined main::$11 = (word)(const byte*) SCREEN
Constant inlined plot::plotter_x#0 = (byte*) 0
Constant inlined init_screen::$1 = (const byte*) SCREEN+(word) $400
Constant inlined main::$1 = (const byte) BMM|(const byte) DEN|(const byte) RSEL
Constant inlined main::$2 = (const byte) BMM|(const byte) DEN|(const byte) RSEL|(byte) 3
Constant inlined main::$0 = (const byte) BMM|(const byte) DEN
Constant inlined init_plot_tables::y#0 = (byte) 0
Constant inlined init_plot_tables::yoffs#0 = (byte*) 0
Constant inlined main::$3 = (word)(const byte*) SCREEN/(byte) $40
Constant inlined main::$4 = (word)(const byte*) SCREEN/(byte) $40|(word)(const nomodify byte*) BITMAP/(word) $400
Constant inlined init_plot_tables::x#0 = (byte) 0
Constant inlined init_screen::c#0 = (const byte*) SCREEN
Constant inlined init_screen::b#0 = (const nomodify byte*) BITMAP
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting init_plot_tables::@8(between init_plot_tables::@2 and init_plot_tables::@1)
Added new block during phi lifting init_plot_tables::@9(between init_plot_tables::@1 and init_plot_tables::@2)
Added new block during phi lifting init_plot_tables::@10(between init_plot_tables::@6 and init_plot_tables::@5)
Added new block during phi lifting init_plot_tables::@11(between init_plot_tables::@5 and init_plot_tables::@6)
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of plots
Adding NOP phi() at start of init_plot_tables
Adding NOP phi() at start of init_plot_tables::@3
Adding NOP phi() at start of init_plot_tables::@4
Adding NOP phi() at start of init_screen
Adding NOP phi() at start of init_screen::@3
CALL GRAPH
Calls in [main] to init_screen:4 init_plot_tables:6 plots:10 
Calls in [plots] to plot:18 

Created 9 initial phi equivalence classes
Coalesced [20] plots::i#5 ← plots::i#1
Coalesced [55] init_plot_tables::yoffs#7 ← init_plot_tables::yoffs#1
Coalesced [60] init_plot_tables::y#5 ← init_plot_tables::y#1
Coalesced [61] init_plot_tables::yoffs#5 ← init_plot_tables::yoffs#4
Coalesced (already) [62] init_plot_tables::yoffs#6 ← init_plot_tables::yoffs#2
Coalesced [63] init_plot_tables::x#5 ← init_plot_tables::x#1
Coalesced [64] init_plot_tables::bits#5 ← init_plot_tables::bits#4
Coalesced [65] init_plot_tables::bits#6 ← init_plot_tables::bits#1
Coalesced [75] init_screen::c#4 ← init_screen::c#1
Coalesced [78] init_screen::b#4 ← init_screen::b#1
Coalesced down to 7 phi equivalence classes
Culled Empty Block (label) main::@4
Culled Empty Block (label) init_plot_tables::@3
Culled Empty Block (label) init_plot_tables::@4
Culled Empty Block (label) init_plot_tables::@10
Culled Empty Block (label) init_plot_tables::@11
Culled Empty Block (label) init_plot_tables::@8
Culled Empty Block (label) init_screen::@3
Renumbering block main::@5 to main::@4
Renumbering block init_plot_tables::@5 to init_plot_tables::@3
Renumbering block init_plot_tables::@6 to init_plot_tables::@4
Renumbering block init_plot_tables::@7 to init_plot_tables::@5
Renumbering block init_plot_tables::@9 to init_plot_tables::@6
Renumbering block init_screen::@4 to init_screen::@3
Renumbering block init_screen::@5 to init_screen::@4
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of plots
Adding NOP phi() at start of init_plot_tables
Adding NOP phi() at start of init_plot_tables::@6
Adding NOP phi() at start of init_screen

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const byte*) BG_COLOR) ← (byte) 0
  [1] *((const byte*) FGCOL) ← (byte) 0
  [2] *((const byte*) D011) ← (const byte) BMM|(const byte) DEN|(const byte) RSEL|(byte) 3
  [3] *((const byte*) D018) ← (byte)(word)(const byte*) SCREEN/(byte) $40|(word)(const nomodify byte*) BITMAP/(word) $400
  [4] call init_screen 
  to:main::@3
main::@3: scope:[main]  from main
  [5] phi()
  [6] call init_plot_tables 
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@3 main::@4
  [7] if(*((const byte*) RASTER)!=(byte) $ff) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] *((const byte*) BG_COLOR) ← ++ *((const byte*) BG_COLOR)
  [9] call plots 
  to:main::@4
main::@4: scope:[main]  from main::@2
  [10] *((const byte*) BG_COLOR) ← -- *((const byte*) BG_COLOR)
  to:main::@1

(void()) plots()
plots: scope:[plots]  from main::@2
  [11] phi()
  to:plots::@1
plots::@1: scope:[plots]  from plots plots::@3
  [12] (byte) plots::i#2 ← phi( plots/(byte) 0 plots::@3/(byte) plots::i#1 )
  [13] if((byte) plots::i#2<(const byte) plots_cnt) goto plots::@2
  to:plots::@return
plots::@return: scope:[plots]  from plots::@1
  [14] return 
  to:@return
plots::@2: scope:[plots]  from plots::@1
  [15] (byte) plot::x#0 ← *((const byte*) plots_x + (byte) plots::i#2)
  [16] (byte) plot::y#0 ← *((const byte*) plots_y + (byte) plots::i#2)
  [17] call plot 
  to:plots::@3
plots::@3: scope:[plots]  from plots::@2
  [18] (byte) plots::i#1 ← ++ (byte) plots::i#2
  to:plots::@1

(void()) plot((byte) plot::x , (byte) plot::y)
plot: scope:[plot]  from plots::@2
  [19] (byte~) plot::$6 ← *((const to_nomodify byte*) plot_xhi + (byte) plot::x#0)
  [20] (byte*) plot::plotter_x#1 ← (byte*) 0 hi= (byte~) plot::$6
  [21] (byte~) plot::$7 ← *((const to_nomodify byte*) plot_xlo + (byte) plot::x#0)
  [22] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$7
  [23] (byte~) plot::$8 ← *((const to_nomodify byte*) plot_yhi + (byte) plot::y#0)
  [24] (word) plot::plotter_y#1 ← (word) 0 hi= (byte~) plot::$8
  [25] (byte~) plot::$9 ← *((const to_nomodify byte*) plot_ylo + (byte) plot::y#0)
  [26] (word) plot::plotter_y#2 ← (word) plot::plotter_y#1 lo= (byte~) plot::$9
  [27] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (word) plot::plotter_y#2
  [28] (byte~) plot::$5 ← *((byte*) plot::plotter#0) | *((const to_nomodify byte*) plot_bit + (byte) plot::x#0)
  [29] *((byte*) plot::plotter#0) ← (byte~) plot::$5
  to:plot::@return
plot::@return: scope:[plot]  from plot
  [30] return 
  to:@return

(void()) init_plot_tables()
init_plot_tables: scope:[init_plot_tables]  from main::@3
  [31] phi()
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  [32] (byte) init_plot_tables::bits#3 ← phi( init_plot_tables/(byte) $80 init_plot_tables::@2/(byte) init_plot_tables::bits#4 )
  [32] (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) 0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  [33] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) $f8
  [34] *((const to_nomodify byte*) plot_xlo + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  [35] *((const to_nomodify byte*) plot_xhi + (byte) init_plot_tables::x#2) ← >(const nomodify byte*) BITMAP
  [36] *((const to_nomodify byte*) plot_bit + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bits#3
  [37] (byte) init_plot_tables::bits#1 ← (byte) init_plot_tables::bits#3 >> (byte) 1
  [38] if((byte) init_plot_tables::bits#1!=(byte) 0) goto init_plot_tables::@6
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@1
  [39] phi()
  to:init_plot_tables::@2
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@6
  [40] (byte) init_plot_tables::bits#4 ← phi( init_plot_tables::@6/(byte) init_plot_tables::bits#1 init_plot_tables::@1/(byte) $80 )
  [41] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  [42] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@2 init_plot_tables::@4
  [43] (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@2/(byte*) 0 init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 )
  [43] (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@2/(byte) 0 init_plot_tables::@4/(byte) init_plot_tables::y#1 )
  [44] (byte~) init_plot_tables::$9 ← (byte) init_plot_tables::y#2 & (byte) 7
  [45] (byte~) init_plot_tables::$6 ← < (byte*) init_plot_tables::yoffs#2
  [46] (byte~) init_plot_tables::$7 ← (byte~) init_plot_tables::$9 | (byte~) init_plot_tables::$6
  [47] *((const to_nomodify byte*) plot_ylo + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$7
  [48] (byte~) init_plot_tables::$8 ← > (byte*) init_plot_tables::yoffs#2
  [49] *((const to_nomodify byte*) plot_yhi + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  [50] if((byte~) init_plot_tables::$9!=(byte) 7) goto init_plot_tables::@4
  to:init_plot_tables::@5
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@3
  [51] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word)(number) $28*(number) 8
  to:init_plot_tables::@4
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@5
  [52] (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@5/(byte*) init_plot_tables::yoffs#1 )
  [53] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  [54] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  [55] return 
  to:@return

(void()) init_screen()
init_screen: scope:[init_screen]  from main
  [56] phi()
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@2
  [57] (byte*) init_screen::b#2 ← phi( init_screen/(const nomodify byte*) BITMAP init_screen::@2/(byte*) init_screen::b#1 )
  [58] if((byte*) init_screen::b#2!=(const nomodify byte*) BITMAP+(word) $2000) goto init_screen::@2
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1 init_screen::@4
  [59] (byte*) init_screen::c#2 ← phi( init_screen::@1/(const byte*) SCREEN init_screen::@4/(byte*) init_screen::c#1 )
  [60] if((byte*) init_screen::c#2!=(const byte*) SCREEN+(word) $400) goto init_screen::@4
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@3
  [61] return 
  to:@return
init_screen::@4: scope:[init_screen]  from init_screen::@3
  [62] *((byte*) init_screen::c#2) ← (byte) $14
  [63] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  to:init_screen::@3
init_screen::@2: scope:[init_screen]  from init_screen::@1
  [64] *((byte*) init_screen::b#2) ← (byte) 0
  [65] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  to:init_screen::@1


VARIABLE REGISTER WEIGHTS
(void()) init_plot_tables()
(byte~) init_plot_tables::$0 202.0
(byte~) init_plot_tables::$6 202.0
(byte~) init_plot_tables::$7 202.0
(byte~) init_plot_tables::$8 202.0
(byte~) init_plot_tables::$9 50.5
(byte) init_plot_tables::bits
(byte) init_plot_tables::bits#1 101.0
(byte) init_plot_tables::bits#3 60.599999999999994
(byte) init_plot_tables::bits#4 67.33333333333333
(byte) init_plot_tables::x
(byte) init_plot_tables::x#1 151.5
(byte) init_plot_tables::x#2 67.33333333333333
(byte) init_plot_tables::y
(byte) init_plot_tables::y#1 151.5
(byte) init_plot_tables::y#2 50.5
(byte*) init_plot_tables::yoffs
(byte*) init_plot_tables::yoffs#1 202.0
(byte*) init_plot_tables::yoffs#2 63.125
(byte*) init_plot_tables::yoffs#4 101.0
(void()) init_screen()
(byte*) init_screen::b
(byte*) init_screen::b#1 202.0
(byte*) init_screen::b#2 134.66666666666666
(byte*) init_screen::c
(byte*) init_screen::c#1 202.0
(byte*) init_screen::c#2 134.66666666666666
(void()) main()
(void()) plot((byte) plot::x , (byte) plot::y)
(byte~) plot::$5 200002.0
(byte~) plot::$6 200002.0
(byte~) plot::$7 200002.0
(byte~) plot::$8 200002.0
(byte~) plot::$9 200002.0
(byte*) plot::plotter
(byte*) plot::plotter#0 150001.5
(byte*) plot::plotter_x
(byte*) plot::plotter_x#1 100001.0
(byte*) plot::plotter_x#2 40000.4
(word) plot::plotter_y
(word) plot::plotter_y#1 100001.0
(word) plot::plotter_y#2 200002.0
(byte) plot::x
(byte) plot::x#0 28182.181818181816
(byte) plot::y
(byte) plot::y#0 30000.428571428572
(void()) plots()
(byte) plots::i
(byte) plots::i#1 20002.0
(byte) plots::i#2 10001.0

Initial phi equivalence classes
[ plots::i#2 plots::i#1 ]
[ init_plot_tables::x#2 init_plot_tables::x#1 ]
[ init_plot_tables::bits#3 init_plot_tables::bits#4 init_plot_tables::bits#1 ]
[ init_plot_tables::y#2 init_plot_tables::y#1 ]
[ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ]
[ init_screen::b#2 init_screen::b#1 ]
[ init_screen::c#2 init_screen::c#1 ]
Added variable plot::x#0 to live range equivalence class [ plot::x#0 ]
Added variable plot::y#0 to live range equivalence class [ plot::y#0 ]
Added variable plot::$6 to live range equivalence class [ plot::$6 ]
Added variable plot::plotter_x#1 to live range equivalence class [ plot::plotter_x#1 ]
Added variable plot::$7 to live range equivalence class [ plot::$7 ]
Added variable plot::plotter_x#2 to live range equivalence class [ plot::plotter_x#2 ]
Added variable plot::$8 to live range equivalence class [ plot::$8 ]
Added variable plot::plotter_y#1 to live range equivalence class [ plot::plotter_y#1 ]
Added variable plot::$9 to live range equivalence class [ plot::$9 ]
Added variable plot::plotter_y#2 to live range equivalence class [ plot::plotter_y#2 ]
Added variable plot::plotter#0 to live range equivalence class [ plot::plotter#0 ]
Added variable plot::$5 to live range equivalence class [ plot::$5 ]
Added variable init_plot_tables::$0 to live range equivalence class [ init_plot_tables::$0 ]
Added variable init_plot_tables::$9 to live range equivalence class [ init_plot_tables::$9 ]
Added variable init_plot_tables::$6 to live range equivalence class [ init_plot_tables::$6 ]
Added variable init_plot_tables::$7 to live range equivalence class [ init_plot_tables::$7 ]
Added variable init_plot_tables::$8 to live range equivalence class [ init_plot_tables::$8 ]
Complete equivalence classes
[ plots::i#2 plots::i#1 ]
[ init_plot_tables::x#2 init_plot_tables::x#1 ]
[ init_plot_tables::bits#3 init_plot_tables::bits#4 init_plot_tables::bits#1 ]
[ init_plot_tables::y#2 init_plot_tables::y#1 ]
[ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ]
[ init_screen::b#2 init_screen::b#1 ]
[ init_screen::c#2 init_screen::c#1 ]
[ plot::x#0 ]
[ plot::y#0 ]
[ plot::$6 ]
[ plot::plotter_x#1 ]
[ plot::$7 ]
[ plot::plotter_x#2 ]
[ plot::$8 ]
[ plot::plotter_y#1 ]
[ plot::$9 ]
[ plot::plotter_y#2 ]
[ plot::plotter#0 ]
[ plot::$5 ]
[ init_plot_tables::$0 ]
[ init_plot_tables::$9 ]
[ init_plot_tables::$6 ]
[ init_plot_tables::$7 ]
[ init_plot_tables::$8 ]
Allocated zp[1]:2 [ plots::i#2 plots::i#1 ]
Allocated zp[1]:3 [ init_plot_tables::x#2 init_plot_tables::x#1 ]
Allocated zp[1]:4 [ init_plot_tables::bits#3 init_plot_tables::bits#4 init_plot_tables::bits#1 ]
Allocated zp[1]:5 [ init_plot_tables::y#2 init_plot_tables::y#1 ]
Allocated zp[2]:6 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ]
Allocated zp[2]:8 [ init_screen::b#2 init_screen::b#1 ]
Allocated zp[2]:10 [ init_screen::c#2 init_screen::c#1 ]
Allocated zp[1]:12 [ plot::x#0 ]
Allocated zp[1]:13 [ plot::y#0 ]
Allocated zp[1]:14 [ plot::$6 ]
Allocated zp[2]:15 [ plot::plotter_x#1 ]
Allocated zp[1]:17 [ plot::$7 ]
Allocated zp[2]:18 [ plot::plotter_x#2 ]
Allocated zp[1]:20 [ plot::$8 ]
Allocated zp[2]:21 [ plot::plotter_y#1 ]
Allocated zp[1]:23 [ plot::$9 ]
Allocated zp[2]:24 [ plot::plotter_y#2 ]
Allocated zp[2]:26 [ plot::plotter#0 ]
Allocated zp[1]:28 [ plot::$5 ]
Allocated zp[1]:29 [ init_plot_tables::$0 ]
Allocated zp[1]:30 [ init_plot_tables::$9 ]
Allocated zp[1]:31 [ init_plot_tables::$6 ]
Allocated zp[1]:32 [ init_plot_tables::$7 ]
Allocated zp[1]:33 [ init_plot_tables::$8 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const BMM = $20
  .const DEN = $10
  .const RSEL = 8
  .const plots_cnt = 8
  .label BITMAP = $2000
  .label D011 = $d011
  .label RASTER = $d012
  .label D018 = $d018
  .label BG_COLOR = $d020
  .label FGCOL = $d021
  .label SCREEN = $400
  // main
main: {
    // [0] *((const byte*) BG_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BG_COLOR
    // [1] *((const byte*) FGCOL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta FGCOL
    // [2] *((const byte*) D011) ← (const byte) BMM|(const byte) DEN|(const byte) RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    lda #BMM|DEN|RSEL|3
    sta D011
    // [3] *((const byte*) D018) ← (byte)(word)(const byte*) SCREEN/(byte) $40|(word)(const nomodify byte*) BITMAP/(word) $400 -- _deref_pbuc1=vbuc2 
    lda #SCREEN/$40|BITMAP/$400
    sta D018
    // [4] call init_screen 
    // [56] phi from main to init_screen [phi:main->init_screen]
  init_screen_from_main:
    jsr init_screen
    // [5] phi from main to main::@3 [phi:main->main::@3]
  __b3_from_main:
    jmp __b3
    // main::@3
  __b3:
    // [6] call init_plot_tables 
    // [31] phi from main::@3 to init_plot_tables [phi:main::@3->init_plot_tables]
  init_plot_tables_from___b3:
    jsr init_plot_tables
    jmp __b1
    // main::@1
  __b1:
    // [7] if(*((const byte*) RASTER)!=(byte) $ff) goto main::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b1
    jmp __b2
    // main::@2
  __b2:
    // [8] *((const byte*) BG_COLOR) ← ++ *((const byte*) BG_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    // [9] call plots 
    // [11] phi from main::@2 to plots [phi:main::@2->plots]
  plots_from___b2:
    jsr plots
    jmp __b4
    // main::@4
  __b4:
    // [10] *((const byte*) BG_COLOR) ← -- *((const byte*) BG_COLOR) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BG_COLOR
    jmp __b1
}
  // plots
plots: {
    .label i = 2
    // [12] phi from plots to plots::@1 [phi:plots->plots::@1]
  __b1_from_plots:
    // [12] phi (byte) plots::i#2 = (byte) 0 [phi:plots->plots::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // plots::@1
  __b1:
    // [13] if((byte) plots::i#2<(const byte) plots_cnt) goto plots::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #plots_cnt
    bcc __b2
    jmp __breturn
    // plots::@return
  __breturn:
    // [14] return 
    rts
    // plots::@2
  __b2:
    // [15] (byte) plot::x#0 ← *((const byte*) plots_x + (byte) plots::i#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda plots_x,y
    sta.z plot.x
    // [16] (byte) plot::y#0 ← *((const byte*) plots_y + (byte) plots::i#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda plots_y,y
    sta.z plot.y
    // [17] call plot 
    jsr plot
    jmp __b3
    // plots::@3
  __b3:
    // [18] (byte) plots::i#1 ← ++ (byte) plots::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [12] phi from plots::@3 to plots::@1 [phi:plots::@3->plots::@1]
  __b1_from___b3:
    // [12] phi (byte) plots::i#2 = (byte) plots::i#1 [phi:plots::@3->plots::@1#0] -- register_copy 
    jmp __b1
}
  // plot
// plot(byte zp($c) x, byte zp($d) y)
plot: {
    .label __5 = $1c
    .label __6 = $e
    .label __7 = $11
    .label __8 = $14
    .label __9 = $17
    .label x = $c
    .label y = $d
    .label plotter_x = $f
    .label plotter_x_1 = $12
    .label plotter_y = $15
    .label plotter_y_1 = $18
    .label plotter = $1a
    // [19] (byte~) plot::$6 ← *((const to_nomodify byte*) plot_xhi + (byte) plot::x#0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z x
    lda plot_xhi,y
    sta.z __6
    // [20] (byte*) plot::plotter_x#1 ← (byte*) 0 hi= (byte~) plot::$6 -- pbuz1=pbuc1_sethi_vbuz2 
    lda.z __6
    sta.z plotter_x+1
    lda #<0
    sta.z plotter_x
    // [21] (byte~) plot::$7 ← *((const to_nomodify byte*) plot_xlo + (byte) plot::x#0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z x
    lda plot_xlo,y
    sta.z __7
    // [22] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$7 -- pbuz1=pbuz2_setlo_vbuz3 
    lda.z __7
    sta.z plotter_x_1
    lda.z plotter_x+1
    sta.z plotter_x_1+1
    // [23] (byte~) plot::$8 ← *((const to_nomodify byte*) plot_yhi + (byte) plot::y#0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z y
    lda plot_yhi,y
    sta.z __8
    // [24] (word) plot::plotter_y#1 ← (word) 0 hi= (byte~) plot::$8 -- vwuz1=vwuc1_sethi_vbuz2 
    lda.z __8
    sta.z plotter_y+1
    lda #<0
    sta.z plotter_y
    // [25] (byte~) plot::$9 ← *((const to_nomodify byte*) plot_ylo + (byte) plot::y#0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z y
    lda plot_ylo,y
    sta.z __9
    // [26] (word) plot::plotter_y#2 ← (word) plot::plotter_y#1 lo= (byte~) plot::$9 -- vwuz1=vwuz2_setlo_vbuz3 
    lda.z __9
    sta.z plotter_y_1
    lda.z plotter_y+1
    sta.z plotter_y_1+1
    // [27] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (word) plot::plotter_y#2 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z plotter_x_1
    clc
    adc.z plotter_y_1
    sta.z plotter
    lda.z plotter_x_1+1
    adc.z plotter_y_1+1
    sta.z plotter+1
    // [28] (byte~) plot::$5 ← *((byte*) plot::plotter#0) | *((const to_nomodify byte*) plot_bit + (byte) plot::x#0) -- vbuz1=_deref_pbuz2_bor_pbuc1_derefidx_vbuz3 
    ldy #0
    lda (plotter),y
    ldy.z x
    ora plot_bit,y
    sta.z __5
    // [29] *((byte*) plot::plotter#0) ← (byte~) plot::$5 -- _deref_pbuz1=vbuz2 
    lda.z __5
    ldy #0
    sta (plotter),y
    jmp __breturn
    // plot::@return
  __breturn:
    // [30] return 
    rts
}
  // init_plot_tables
init_plot_tables: {
    .label __0 = $1d
    .label __6 = $1f
    .label __7 = $20
    .label __8 = $21
    .label __9 = $1e
    .label bits = 4
    .label x = 3
    .label y = 5
    .label yoffs = 6
    // [32] phi from init_plot_tables to init_plot_tables::@1 [phi:init_plot_tables->init_plot_tables::@1]
  __b1_from_init_plot_tables:
    // [32] phi (byte) init_plot_tables::bits#3 = (byte) $80 [phi:init_plot_tables->init_plot_tables::@1#0] -- vbuz1=vbuc1 
    lda #$80
    sta.z bits
    // [32] phi (byte) init_plot_tables::x#2 = (byte) 0 [phi:init_plot_tables->init_plot_tables::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp __b1
    // [32] phi from init_plot_tables::@2 to init_plot_tables::@1 [phi:init_plot_tables::@2->init_plot_tables::@1]
  __b1_from___b2:
    // [32] phi (byte) init_plot_tables::bits#3 = (byte) init_plot_tables::bits#4 [phi:init_plot_tables::@2->init_plot_tables::@1#0] -- register_copy 
    // [32] phi (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#1 [phi:init_plot_tables::@2->init_plot_tables::@1#1] -- register_copy 
    jmp __b1
    // init_plot_tables::@1
  __b1:
    // [33] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) $f8 -- vbuz1=vbuz2_band_vbuc1 
    lda #$f8
    and.z x
    sta.z __0
    // [34] *((const to_nomodify byte*) plot_xlo + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __0
    ldy.z x
    sta plot_xlo,y
    // [35] *((const to_nomodify byte*) plot_xhi + (byte) init_plot_tables::x#2) ← >(const nomodify byte*) BITMAP -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #>BITMAP
    ldy.z x
    sta plot_xhi,y
    // [36] *((const to_nomodify byte*) plot_bit + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bits#3 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z bits
    ldy.z x
    sta plot_bit,y
    // [37] (byte) init_plot_tables::bits#1 ← (byte) init_plot_tables::bits#3 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr.z bits
    // [38] if((byte) init_plot_tables::bits#1!=(byte) 0) goto init_plot_tables::@6 -- vbuz1_neq_0_then_la1 
    lda.z bits
    cmp #0
    bne __b6_from___b1
    // [40] phi from init_plot_tables::@1 to init_plot_tables::@2 [phi:init_plot_tables::@1->init_plot_tables::@2]
  __b2_from___b1:
    // [40] phi (byte) init_plot_tables::bits#4 = (byte) $80 [phi:init_plot_tables::@1->init_plot_tables::@2#0] -- vbuz1=vbuc1 
    lda #$80
    sta.z bits
    jmp __b2
    // [39] phi from init_plot_tables::@1 to init_plot_tables::@6 [phi:init_plot_tables::@1->init_plot_tables::@6]
  __b6_from___b1:
    jmp __b6
    // init_plot_tables::@6
  __b6:
    // [40] phi from init_plot_tables::@6 to init_plot_tables::@2 [phi:init_plot_tables::@6->init_plot_tables::@2]
  __b2_from___b6:
    // [40] phi (byte) init_plot_tables::bits#4 = (byte) init_plot_tables::bits#1 [phi:init_plot_tables::@6->init_plot_tables::@2#0] -- register_copy 
    jmp __b2
    // init_plot_tables::@2
  __b2:
    // [41] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [42] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 -- vbuz1_neq_0_then_la1 
    lda.z x
    cmp #0
    bne __b1_from___b2
    // [43] phi from init_plot_tables::@2 to init_plot_tables::@3 [phi:init_plot_tables::@2->init_plot_tables::@3]
  __b3_from___b2:
    // [43] phi (byte*) init_plot_tables::yoffs#2 = (byte*) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta.z yoffs
    lda #>0
    sta.z yoffs+1
    // [43] phi (byte) init_plot_tables::y#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b3
    // [43] phi from init_plot_tables::@4 to init_plot_tables::@3 [phi:init_plot_tables::@4->init_plot_tables::@3]
  __b3_from___b4:
    // [43] phi (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#4 [phi:init_plot_tables::@4->init_plot_tables::@3#0] -- register_copy 
    // [43] phi (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#1 [phi:init_plot_tables::@4->init_plot_tables::@3#1] -- register_copy 
    jmp __b3
    // init_plot_tables::@3
  __b3:
    // [44] (byte~) init_plot_tables::$9 ← (byte) init_plot_tables::y#2 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z y
    sta.z __9
    // [45] (byte~) init_plot_tables::$6 ← < (byte*) init_plot_tables::yoffs#2 -- vbuz1=_lo_pbuz2 
    lda.z yoffs
    sta.z __6
    // [46] (byte~) init_plot_tables::$7 ← (byte~) init_plot_tables::$9 | (byte~) init_plot_tables::$6 -- vbuz1=vbuz2_bor_vbuz3 
    lda.z __9
    ora.z __6
    sta.z __7
    // [47] *((const to_nomodify byte*) plot_ylo + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$7 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __7
    ldy.z y
    sta plot_ylo,y
    // [48] (byte~) init_plot_tables::$8 ← > (byte*) init_plot_tables::yoffs#2 -- vbuz1=_hi_pbuz2 
    lda.z yoffs+1
    sta.z __8
    // [49] *((const to_nomodify byte*) plot_yhi + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __8
    ldy.z y
    sta plot_yhi,y
    // [50] if((byte~) init_plot_tables::$9!=(byte) 7) goto init_plot_tables::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __9
    bne __b4_from___b3
    jmp __b5
    // init_plot_tables::@5
  __b5:
    // [51] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [52] phi from init_plot_tables::@3 init_plot_tables::@5 to init_plot_tables::@4 [phi:init_plot_tables::@3/init_plot_tables::@5->init_plot_tables::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [52] phi (byte*) init_plot_tables::yoffs#4 = (byte*) init_plot_tables::yoffs#2 [phi:init_plot_tables::@3/init_plot_tables::@5->init_plot_tables::@4#0] -- register_copy 
    jmp __b4
    // init_plot_tables::@4
  __b4:
    // [53] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [54] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 -- vbuz1_neq_0_then_la1 
    lda.z y
    cmp #0
    bne __b3_from___b4
    jmp __breturn
    // init_plot_tables::@return
  __breturn:
    // [55] return 
    rts
}
  // init_screen
init_screen: {
    .label b = 8
    .label c = $a
    // [57] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
  __b1_from_init_screen:
    // [57] phi (byte*) init_screen::b#2 = (const nomodify byte*) BITMAP [phi:init_screen->init_screen::@1#0] -- pbuz1=pbuc1 
    lda #<BITMAP
    sta.z b
    lda #>BITMAP
    sta.z b+1
    jmp __b1
    // init_screen::@1
  __b1:
    // [58] if((byte*) init_screen::b#2!=(const nomodify byte*) BITMAP+(word) $2000) goto init_screen::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z b+1
    cmp #>BITMAP+$2000
    bne __b2
    lda.z b
    cmp #<BITMAP+$2000
    bne __b2
    // [59] phi from init_screen::@1 to init_screen::@3 [phi:init_screen::@1->init_screen::@3]
  __b3_from___b1:
    // [59] phi (byte*) init_screen::c#2 = (const byte*) SCREEN [phi:init_screen::@1->init_screen::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z c
    lda #>SCREEN
    sta.z c+1
    jmp __b3
    // init_screen::@3
  __b3:
    // [60] if((byte*) init_screen::c#2!=(const byte*) SCREEN+(word) $400) goto init_screen::@4 -- pbuz1_neq_pbuc1_then_la1 
    lda.z c+1
    cmp #>SCREEN+$400
    bne __b4
    lda.z c
    cmp #<SCREEN+$400
    bne __b4
    jmp __breturn
    // init_screen::@return
  __breturn:
    // [61] return 
    rts
    // init_screen::@4
  __b4:
    // [62] *((byte*) init_screen::c#2) ← (byte) $14 -- _deref_pbuz1=vbuc1 
    lda #$14
    ldy #0
    sta (c),y
    // [63] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 -- pbuz1=_inc_pbuz1 
    inc.z c
    bne !+
    inc.z c+1
  !:
    // [59] phi from init_screen::@4 to init_screen::@3 [phi:init_screen::@4->init_screen::@3]
  __b3_from___b4:
    // [59] phi (byte*) init_screen::c#2 = (byte*) init_screen::c#1 [phi:init_screen::@4->init_screen::@3#0] -- register_copy 
    jmp __b3
    // init_screen::@2
  __b2:
    // [64] *((byte*) init_screen::b#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (b),y
    // [65] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 -- pbuz1=_inc_pbuz1 
    inc.z b
    bne !+
    inc.z b+1
  !:
    // [57] phi from init_screen::@2 to init_screen::@1 [phi:init_screen::@2->init_screen::@1]
  __b1_from___b2:
    // [57] phi (byte*) init_screen::b#2 = (byte*) init_screen::b#1 [phi:init_screen::@2->init_screen::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  plots_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28
  plots_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28
  plot_xlo: .fill $100, 0
  plot_xhi: .fill $100, 0
  plot_ylo: .fill $100, 0
  plot_yhi: .fill $100, 0
  plot_bit: .fill $100, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp[1]:31 [ init_plot_tables::$6 ] has ALU potential.
Statement [0] *((const byte*) BG_COLOR) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const byte*) FGCOL) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((const byte*) D011) ← (const byte) BMM|(const byte) DEN|(const byte) RSEL|(byte) 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const byte*) D018) ← (byte)(word)(const byte*) SCREEN/(byte) $40|(word)(const nomodify byte*) BITMAP/(word) $400 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] if(*((const byte*) RASTER)!=(byte) $ff) goto main::@1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [22] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$7 [ plot::x#0 plot::y#0 plot::plotter_x#2 ] ( plots:9::plot:17 [ plots::i#2 plot::x#0 plot::y#0 plot::plotter_x#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ plots::i#2 plots::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:12 [ plot::x#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:13 [ plot::y#0 ]
Statement [26] (word) plot::plotter_y#2 ← (word) plot::plotter_y#1 lo= (byte~) plot::$9 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#2 ] ( plots:9::plot:17 [ plots::i#2 plot::x#0 plot::plotter_x#2 plot::plotter_y#2 ] { }  ) always clobbers reg byte a 
Statement [27] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (word) plot::plotter_y#2 [ plot::x#0 plot::plotter#0 ] ( plots:9::plot:17 [ plots::i#2 plot::x#0 plot::plotter#0 ] { }  ) always clobbers reg byte a 
Statement [28] (byte~) plot::$5 ← *((byte*) plot::plotter#0) | *((const to_nomodify byte*) plot_bit + (byte) plot::x#0) [ plot::plotter#0 plot::$5 ] ( plots:9::plot:17 [ plots::i#2 plot::plotter#0 plot::$5 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ plots::i#2 plots::i#1 ]
Statement [29] *((byte*) plot::plotter#0) ← (byte~) plot::$5 [ ] ( plots:9::plot:17 [ plots::i#2 ] { }  ) always clobbers reg byte y 
Statement [35] *((const to_nomodify byte*) plot_xhi + (byte) init_plot_tables::x#2) ← >(const nomodify byte*) BITMAP [ init_plot_tables::x#2 init_plot_tables::bits#3 ] ( init_plot_tables:6 [ init_plot_tables::x#2 init_plot_tables::bits#3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ init_plot_tables::x#2 init_plot_tables::x#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ init_plot_tables::bits#3 init_plot_tables::bits#4 init_plot_tables::bits#1 ]
Statement [36] *((const to_nomodify byte*) plot_bit + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bits#3 [ init_plot_tables::x#2 init_plot_tables::bits#3 ] ( init_plot_tables:6 [ init_plot_tables::x#2 init_plot_tables::bits#3 ] { }  ) always clobbers reg byte a 
Statement [51] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word)(number) $28*(number) 8 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] ( init_plot_tables:6 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ init_plot_tables::y#2 init_plot_tables::y#1 ]
Statement [58] if((byte*) init_screen::b#2!=(const nomodify byte*) BITMAP+(word) $2000) goto init_screen::@2 [ init_screen::b#2 ] ( init_screen:4 [ init_screen::b#2 ] { }  ) always clobbers reg byte a 
Statement [60] if((byte*) init_screen::c#2!=(const byte*) SCREEN+(word) $400) goto init_screen::@4 [ init_screen::c#2 ] ( init_screen:4 [ init_screen::c#2 ] { }  ) always clobbers reg byte a 
Statement [62] *((byte*) init_screen::c#2) ← (byte) $14 [ init_screen::c#2 ] ( init_screen:4 [ init_screen::c#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [64] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] ( init_screen:4 [ init_screen::b#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [0] *((const byte*) BG_COLOR) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const byte*) FGCOL) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((const byte*) D011) ← (const byte) BMM|(const byte) DEN|(const byte) RSEL|(byte) 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const byte*) D018) ← (byte)(word)(const byte*) SCREEN/(byte) $40|(word)(const nomodify byte*) BITMAP/(word) $400 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] if(*((const byte*) RASTER)!=(byte) $ff) goto main::@1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [22] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$7 [ plot::x#0 plot::y#0 plot::plotter_x#2 ] ( plots:9::plot:17 [ plots::i#2 plot::x#0 plot::y#0 plot::plotter_x#2 ] { }  ) always clobbers reg byte a 
Statement [26] (word) plot::plotter_y#2 ← (word) plot::plotter_y#1 lo= (byte~) plot::$9 [ plot::x#0 plot::plotter_x#2 plot::plotter_y#2 ] ( plots:9::plot:17 [ plots::i#2 plot::x#0 plot::plotter_x#2 plot::plotter_y#2 ] { }  ) always clobbers reg byte a 
Statement [27] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (word) plot::plotter_y#2 [ plot::x#0 plot::plotter#0 ] ( plots:9::plot:17 [ plots::i#2 plot::x#0 plot::plotter#0 ] { }  ) always clobbers reg byte a 
Statement [28] (byte~) plot::$5 ← *((byte*) plot::plotter#0) | *((const to_nomodify byte*) plot_bit + (byte) plot::x#0) [ plot::plotter#0 plot::$5 ] ( plots:9::plot:17 [ plots::i#2 plot::plotter#0 plot::$5 ] { }  ) always clobbers reg byte a reg byte y 
Statement [29] *((byte*) plot::plotter#0) ← (byte~) plot::$5 [ ] ( plots:9::plot:17 [ plots::i#2 ] { }  ) always clobbers reg byte y 
Statement [33] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) $f8 [ init_plot_tables::x#2 init_plot_tables::bits#3 init_plot_tables::$0 ] ( init_plot_tables:6 [ init_plot_tables::x#2 init_plot_tables::bits#3 init_plot_tables::$0 ] { }  ) always clobbers reg byte a 
Statement [35] *((const to_nomodify byte*) plot_xhi + (byte) init_plot_tables::x#2) ← >(const nomodify byte*) BITMAP [ init_plot_tables::x#2 init_plot_tables::bits#3 ] ( init_plot_tables:6 [ init_plot_tables::x#2 init_plot_tables::bits#3 ] { }  ) always clobbers reg byte a 
Statement [36] *((const to_nomodify byte*) plot_bit + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bits#3 [ init_plot_tables::x#2 init_plot_tables::bits#3 ] ( init_plot_tables:6 [ init_plot_tables::x#2 init_plot_tables::bits#3 ] { }  ) always clobbers reg byte a 
Statement [44] (byte~) init_plot_tables::$9 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] ( init_plot_tables:6 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] { }  ) always clobbers reg byte a 
Statement [51] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word)(number) $28*(number) 8 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] ( init_plot_tables:6 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] { }  ) always clobbers reg byte a 
Statement [58] if((byte*) init_screen::b#2!=(const nomodify byte*) BITMAP+(word) $2000) goto init_screen::@2 [ init_screen::b#2 ] ( init_screen:4 [ init_screen::b#2 ] { }  ) always clobbers reg byte a 
Statement [60] if((byte*) init_screen::c#2!=(const byte*) SCREEN+(word) $400) goto init_screen::@4 [ init_screen::c#2 ] ( init_screen:4 [ init_screen::c#2 ] { }  ) always clobbers reg byte a 
Statement [62] *((byte*) init_screen::c#2) ← (byte) $14 [ init_screen::c#2 ] ( init_screen:4 [ init_screen::c#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [64] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] ( init_screen:4 [ init_screen::b#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ plots::i#2 plots::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ init_plot_tables::x#2 init_plot_tables::x#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ init_plot_tables::bits#3 init_plot_tables::bits#4 init_plot_tables::bits#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ init_plot_tables::y#2 init_plot_tables::y#1 ] : zp[1]:5 , reg byte x , reg byte y , 
Potential registers zp[2]:6 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ init_screen::b#2 init_screen::b#1 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ init_screen::c#2 init_screen::c#1 ] : zp[2]:10 , 
Potential registers zp[1]:12 [ plot::x#0 ] : zp[1]:12 , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ plot::y#0 ] : zp[1]:13 , reg byte x , reg byte y , 
Potential registers zp[1]:14 [ plot::$6 ] : zp[1]:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:15 [ plot::plotter_x#1 ] : zp[2]:15 , 
Potential registers zp[1]:17 [ plot::$7 ] : zp[1]:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:18 [ plot::plotter_x#2 ] : zp[2]:18 , 
Potential registers zp[1]:20 [ plot::$8 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:21 [ plot::plotter_y#1 ] : zp[2]:21 , 
Potential registers zp[1]:23 [ plot::$9 ] : zp[1]:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:24 [ plot::plotter_y#2 ] : zp[2]:24 , 
Potential registers zp[2]:26 [ plot::plotter#0 ] : zp[2]:26 , 
Potential registers zp[1]:28 [ plot::$5 ] : zp[1]:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:29 [ init_plot_tables::$0 ] : zp[1]:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ init_plot_tables::$9 ] : zp[1]:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:31 [ init_plot_tables::$6 ] : zp[1]:31 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp[1]:32 [ init_plot_tables::$7 ] : zp[1]:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ init_plot_tables::$8 ] : zp[1]:33 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [plot] 200,002: zp[1]:14 [ plot::$6 ] 200,002: zp[1]:17 [ plot::$7 ] 200,002: zp[1]:20 [ plot::$8 ] 200,002: zp[1]:23 [ plot::$9 ] 200,002: zp[2]:24 [ plot::plotter_y#2 ] 200,002: zp[1]:28 [ plot::$5 ] 150,001.5: zp[2]:26 [ plot::plotter#0 ] 100,001: zp[2]:15 [ plot::plotter_x#1 ] 100,001: zp[2]:21 [ plot::plotter_y#1 ] 40,000.4: zp[2]:18 [ plot::plotter_x#2 ] 30,000.43: zp[1]:13 [ plot::y#0 ] 28,182.18: zp[1]:12 [ plot::x#0 ] 
Uplift Scope [plots] 30,003: zp[1]:2 [ plots::i#2 plots::i#1 ] 
Uplift Scope [init_plot_tables] 366.12: zp[2]:6 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ] 228.93: zp[1]:4 [ init_plot_tables::bits#3 init_plot_tables::bits#4 init_plot_tables::bits#1 ] 218.83: zp[1]:3 [ init_plot_tables::x#2 init_plot_tables::x#1 ] 202: zp[1]:5 [ init_plot_tables::y#2 init_plot_tables::y#1 ] 202: zp[1]:29 [ init_plot_tables::$0 ] 202: zp[1]:31 [ init_plot_tables::$6 ] 202: zp[1]:32 [ init_plot_tables::$7 ] 202: zp[1]:33 [ init_plot_tables::$8 ] 50.5: zp[1]:30 [ init_plot_tables::$9 ] 
Uplift Scope [init_screen] 336.67: zp[2]:8 [ init_screen::b#2 init_screen::b#1 ] 336.67: zp[2]:10 [ init_screen::c#2 init_screen::c#1 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [plot] best 10379 combination reg byte a [ plot::$6 ] reg byte a [ plot::$7 ] reg byte a [ plot::$8 ] reg byte a [ plot::$9 ] zp[2]:24 [ plot::plotter_y#2 ] zp[1]:28 [ plot::$5 ] zp[2]:26 [ plot::plotter#0 ] zp[2]:15 [ plot::plotter_x#1 ] zp[2]:21 [ plot::plotter_y#1 ] zp[2]:18 [ plot::plotter_x#2 ] zp[1]:13 [ plot::y#0 ] zp[1]:12 [ plot::x#0 ] 
Limited combination testing to 100 combinations of 9216 possible.
Uplifting [plots] best 8879 combination reg byte x [ plots::i#2 plots::i#1 ] 
Uplifting [init_plot_tables] best 8359 combination zp[2]:6 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ] reg byte y [ init_plot_tables::bits#3 init_plot_tables::bits#4 init_plot_tables::bits#1 ] reg byte x [ init_plot_tables::x#2 init_plot_tables::x#1 ] reg byte x [ init_plot_tables::y#2 init_plot_tables::y#1 ] reg byte a [ init_plot_tables::$0 ] zp[1]:31 [ init_plot_tables::$6 ] zp[1]:32 [ init_plot_tables::$7 ] zp[1]:33 [ init_plot_tables::$8 ] zp[1]:30 [ init_plot_tables::$9 ] 
Limited combination testing to 100 combinations of 34560 possible.
Uplifting [init_screen] best 8359 combination zp[2]:8 [ init_screen::b#2 init_screen::b#1 ] zp[2]:10 [ init_screen::c#2 init_screen::c#1 ] 
Uplifting [main] best 8359 combination 
Uplifting [] best 8359 combination 
Attempting to uplift remaining variables inzp[1]:28 [ plot::$5 ]
Uplifting [plot] best 8353 combination reg byte a [ plot::$5 ] 
Attempting to uplift remaining variables inzp[1]:13 [ plot::y#0 ]
Uplifting [plot] best 8353 combination zp[1]:13 [ plot::y#0 ] 
Attempting to uplift remaining variables inzp[1]:12 [ plot::x#0 ]
Uplifting [plot] best 8353 combination zp[1]:12 [ plot::x#0 ] 
Attempting to uplift remaining variables inzp[1]:31 [ init_plot_tables::$6 ]
Uplifting [init_plot_tables] best 8293 combination reg byte a [ init_plot_tables::$6 ] 
Attempting to uplift remaining variables inzp[1]:32 [ init_plot_tables::$7 ]
Uplifting [init_plot_tables] best 8233 combination reg byte a [ init_plot_tables::$7 ] 
Attempting to uplift remaining variables inzp[1]:33 [ init_plot_tables::$8 ]
Uplifting [init_plot_tables] best 8173 combination reg byte a [ init_plot_tables::$8 ] 
Attempting to uplift remaining variables inzp[1]:30 [ init_plot_tables::$9 ]
Uplifting [init_plot_tables] best 8173 combination zp[1]:30 [ init_plot_tables::$9 ] 
Coalescing zero page register [ zp[2]:15 [ plot::plotter_x#1 ] ] with [ zp[2]:18 [ plot::plotter_x#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ plot::plotter_y#1 ] ] with [ zp[2]:24 [ plot::plotter_y#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:15 [ plot::plotter_x#1 plot::plotter_x#2 ] ] with [ zp[2]:26 [ plot::plotter#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:8 [ init_screen::b#2 init_screen::b#1 ] ] with [ zp[2]:6 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ] ]
Coalescing zero page register [ zp[2]:15 [ plot::plotter_x#1 plot::plotter_x#2 plot::plotter#0 ] ] with [ zp[2]:10 [ init_screen::c#2 init_screen::c#1 ] ]
Coalescing zero page register [ zp[1]:30 [ init_plot_tables::$9 ] ] with [ zp[1]:12 [ plot::x#0 ] ]
Coalescing zero page register [ zp[2]:21 [ plot::plotter_y#1 plot::plotter_y#2 ] ] with [ zp[2]:8 [ init_screen::b#2 init_screen::b#1 init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ] ]
Allocated (was zp[1]:13) zp[1]:2 [ plot::y#0 ]
Allocated (was zp[2]:15) zp[2]:3 [ plot::plotter_x#1 plot::plotter_x#2 plot::plotter#0 init_screen::c#2 init_screen::c#1 ]
Allocated (was zp[2]:21) zp[2]:5 [ plot::plotter_y#1 plot::plotter_y#2 init_screen::b#2 init_screen::b#1 init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ]
Allocated (was zp[1]:30) zp[1]:7 [ init_plot_tables::$9 plot::x#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const BMM = $20
  .const DEN = $10
  .const RSEL = 8
  .const plots_cnt = 8
  .label BITMAP = $2000
  .label D011 = $d011
  .label RASTER = $d012
  .label D018 = $d018
  .label BG_COLOR = $d020
  .label FGCOL = $d021
  .label SCREEN = $400
  // main
main: {
    // [0] *((const byte*) BG_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BG_COLOR
    // [1] *((const byte*) FGCOL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta FGCOL
    // [2] *((const byte*) D011) ← (const byte) BMM|(const byte) DEN|(const byte) RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    lda #BMM|DEN|RSEL|3
    sta D011
    // [3] *((const byte*) D018) ← (byte)(word)(const byte*) SCREEN/(byte) $40|(word)(const nomodify byte*) BITMAP/(word) $400 -- _deref_pbuc1=vbuc2 
    lda #SCREEN/$40|BITMAP/$400
    sta D018
    // [4] call init_screen 
    // [56] phi from main to init_screen [phi:main->init_screen]
  init_screen_from_main:
    jsr init_screen
    // [5] phi from main to main::@3 [phi:main->main::@3]
  __b3_from_main:
    jmp __b3
    // main::@3
  __b3:
    // [6] call init_plot_tables 
    // [31] phi from main::@3 to init_plot_tables [phi:main::@3->init_plot_tables]
  init_plot_tables_from___b3:
    jsr init_plot_tables
    jmp __b1
    // main::@1
  __b1:
    // [7] if(*((const byte*) RASTER)!=(byte) $ff) goto main::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b1
    jmp __b2
    // main::@2
  __b2:
    // [8] *((const byte*) BG_COLOR) ← ++ *((const byte*) BG_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    // [9] call plots 
    // [11] phi from main::@2 to plots [phi:main::@2->plots]
  plots_from___b2:
    jsr plots
    jmp __b4
    // main::@4
  __b4:
    // [10] *((const byte*) BG_COLOR) ← -- *((const byte*) BG_COLOR) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BG_COLOR
    jmp __b1
}
  // plots
plots: {
    // [12] phi from plots to plots::@1 [phi:plots->plots::@1]
  __b1_from_plots:
    // [12] phi (byte) plots::i#2 = (byte) 0 [phi:plots->plots::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // plots::@1
  __b1:
    // [13] if((byte) plots::i#2<(const byte) plots_cnt) goto plots::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #plots_cnt
    bcc __b2
    jmp __breturn
    // plots::@return
  __breturn:
    // [14] return 
    rts
    // plots::@2
  __b2:
    // [15] (byte) plot::x#0 ← *((const byte*) plots_x + (byte) plots::i#2) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda plots_x,x
    sta.z plot.x
    // [16] (byte) plot::y#0 ← *((const byte*) plots_y + (byte) plots::i#2) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda plots_y,x
    sta.z plot.y
    // [17] call plot 
    jsr plot
    jmp __b3
    // plots::@3
  __b3:
    // [18] (byte) plots::i#1 ← ++ (byte) plots::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [12] phi from plots::@3 to plots::@1 [phi:plots::@3->plots::@1]
  __b1_from___b3:
    // [12] phi (byte) plots::i#2 = (byte) plots::i#1 [phi:plots::@3->plots::@1#0] -- register_copy 
    jmp __b1
}
  // plot
// plot(byte zp(7) x, byte zp(2) y)
plot: {
    .label x = 7
    .label y = 2
    .label plotter_x = 3
    .label plotter_y = 5
    .label plotter = 3
    // [19] (byte~) plot::$6 ← *((const to_nomodify byte*) plot_xhi + (byte) plot::x#0) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z x
    lda plot_xhi,y
    // [20] (byte*) plot::plotter_x#1 ← (byte*) 0 hi= (byte~) plot::$6 -- pbuz1=pbuc1_sethi_vbuaa 
    sta.z plotter_x+1
    lda #<0
    sta.z plotter_x
    // [21] (byte~) plot::$7 ← *((const to_nomodify byte*) plot_xlo + (byte) plot::x#0) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z x
    lda plot_xlo,y
    // [22] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$7 -- pbuz1=pbuz1_setlo_vbuaa 
    sta.z plotter_x
    // [23] (byte~) plot::$8 ← *((const to_nomodify byte*) plot_yhi + (byte) plot::y#0) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z y
    lda plot_yhi,y
    // [24] (word) plot::plotter_y#1 ← (word) 0 hi= (byte~) plot::$8 -- vwuz1=vwuc1_sethi_vbuaa 
    sta.z plotter_y+1
    lda #<0
    sta.z plotter_y
    // [25] (byte~) plot::$9 ← *((const to_nomodify byte*) plot_ylo + (byte) plot::y#0) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z y
    lda plot_ylo,y
    // [26] (word) plot::plotter_y#2 ← (word) plot::plotter_y#1 lo= (byte~) plot::$9 -- vwuz1=vwuz1_setlo_vbuaa 
    sta.z plotter_y
    // [27] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (word) plot::plotter_y#2 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z plotter_y
    sta.z plotter
    lda.z plotter+1
    adc.z plotter_y+1
    sta.z plotter+1
    // [28] (byte~) plot::$5 ← *((byte*) plot::plotter#0) | *((const to_nomodify byte*) plot_bit + (byte) plot::x#0) -- vbuaa=_deref_pbuz1_bor_pbuc1_derefidx_vbuz2 
    ldy #0
    lda (plotter),y
    ldy.z x
    ora plot_bit,y
    // [29] *((byte*) plot::plotter#0) ← (byte~) plot::$5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (plotter),y
    jmp __breturn
    // plot::@return
  __breturn:
    // [30] return 
    rts
}
  // init_plot_tables
init_plot_tables: {
    .label __9 = 7
    .label yoffs = 5
    // [32] phi from init_plot_tables to init_plot_tables::@1 [phi:init_plot_tables->init_plot_tables::@1]
  __b1_from_init_plot_tables:
    // [32] phi (byte) init_plot_tables::bits#3 = (byte) $80 [phi:init_plot_tables->init_plot_tables::@1#0] -- vbuyy=vbuc1 
    ldy #$80
    // [32] phi (byte) init_plot_tables::x#2 = (byte) 0 [phi:init_plot_tables->init_plot_tables::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [32] phi from init_plot_tables::@2 to init_plot_tables::@1 [phi:init_plot_tables::@2->init_plot_tables::@1]
  __b1_from___b2:
    // [32] phi (byte) init_plot_tables::bits#3 = (byte) init_plot_tables::bits#4 [phi:init_plot_tables::@2->init_plot_tables::@1#0] -- register_copy 
    // [32] phi (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#1 [phi:init_plot_tables::@2->init_plot_tables::@1#1] -- register_copy 
    jmp __b1
    // init_plot_tables::@1
  __b1:
    // [33] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) $f8 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f8
    // [34] *((const to_nomodify byte*) plot_xlo + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta plot_xlo,x
    // [35] *((const to_nomodify byte*) plot_xhi + (byte) init_plot_tables::x#2) ← >(const nomodify byte*) BITMAP -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #>BITMAP
    sta plot_xhi,x
    // [36] *((const to_nomodify byte*) plot_bit + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bits#3 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta plot_bit,x
    // [37] (byte) init_plot_tables::bits#1 ← (byte) init_plot_tables::bits#3 >> (byte) 1 -- vbuyy=vbuyy_ror_1 
    tya
    lsr
    tay
    // [38] if((byte) init_plot_tables::bits#1!=(byte) 0) goto init_plot_tables::@6 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b6_from___b1
    // [40] phi from init_plot_tables::@1 to init_plot_tables::@2 [phi:init_plot_tables::@1->init_plot_tables::@2]
  __b2_from___b1:
    // [40] phi (byte) init_plot_tables::bits#4 = (byte) $80 [phi:init_plot_tables::@1->init_plot_tables::@2#0] -- vbuyy=vbuc1 
    ldy #$80
    jmp __b2
    // [39] phi from init_plot_tables::@1 to init_plot_tables::@6 [phi:init_plot_tables::@1->init_plot_tables::@6]
  __b6_from___b1:
    jmp __b6
    // init_plot_tables::@6
  __b6:
    // [40] phi from init_plot_tables::@6 to init_plot_tables::@2 [phi:init_plot_tables::@6->init_plot_tables::@2]
  __b2_from___b6:
    // [40] phi (byte) init_plot_tables::bits#4 = (byte) init_plot_tables::bits#1 [phi:init_plot_tables::@6->init_plot_tables::@2#0] -- register_copy 
    jmp __b2
    // init_plot_tables::@2
  __b2:
    // [41] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [42] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b2
    // [43] phi from init_plot_tables::@2 to init_plot_tables::@3 [phi:init_plot_tables::@2->init_plot_tables::@3]
  __b3_from___b2:
    // [43] phi (byte*) init_plot_tables::yoffs#2 = (byte*) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta.z yoffs
    lda #>0
    sta.z yoffs+1
    // [43] phi (byte) init_plot_tables::y#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [43] phi from init_plot_tables::@4 to init_plot_tables::@3 [phi:init_plot_tables::@4->init_plot_tables::@3]
  __b3_from___b4:
    // [43] phi (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#4 [phi:init_plot_tables::@4->init_plot_tables::@3#0] -- register_copy 
    // [43] phi (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#1 [phi:init_plot_tables::@4->init_plot_tables::@3#1] -- register_copy 
    jmp __b3
    // init_plot_tables::@3
  __b3:
    // [44] (byte~) init_plot_tables::$9 ← (byte) init_plot_tables::y#2 & (byte) 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __9
    // [45] (byte~) init_plot_tables::$6 ← < (byte*) init_plot_tables::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // [46] (byte~) init_plot_tables::$7 ← (byte~) init_plot_tables::$9 | (byte~) init_plot_tables::$6 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __9
    // [47] *((const to_nomodify byte*) plot_ylo + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$7 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta plot_ylo,x
    // [48] (byte~) init_plot_tables::$8 ← > (byte*) init_plot_tables::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // [49] *((const to_nomodify byte*) plot_yhi + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta plot_yhi,x
    // [50] if((byte~) init_plot_tables::$9!=(byte) 7) goto init_plot_tables::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __9
    bne __b4_from___b3
    jmp __b5
    // init_plot_tables::@5
  __b5:
    // [51] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [52] phi from init_plot_tables::@3 init_plot_tables::@5 to init_plot_tables::@4 [phi:init_plot_tables::@3/init_plot_tables::@5->init_plot_tables::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [52] phi (byte*) init_plot_tables::yoffs#4 = (byte*) init_plot_tables::yoffs#2 [phi:init_plot_tables::@3/init_plot_tables::@5->init_plot_tables::@4#0] -- register_copy 
    jmp __b4
    // init_plot_tables::@4
  __b4:
    // [53] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [54] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3_from___b4
    jmp __breturn
    // init_plot_tables::@return
  __breturn:
    // [55] return 
    rts
}
  // init_screen
init_screen: {
    .label b = 5
    .label c = 3
    // [57] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
  __b1_from_init_screen:
    // [57] phi (byte*) init_screen::b#2 = (const nomodify byte*) BITMAP [phi:init_screen->init_screen::@1#0] -- pbuz1=pbuc1 
    lda #<BITMAP
    sta.z b
    lda #>BITMAP
    sta.z b+1
    jmp __b1
    // init_screen::@1
  __b1:
    // [58] if((byte*) init_screen::b#2!=(const nomodify byte*) BITMAP+(word) $2000) goto init_screen::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z b+1
    cmp #>BITMAP+$2000
    bne __b2
    lda.z b
    cmp #<BITMAP+$2000
    bne __b2
    // [59] phi from init_screen::@1 to init_screen::@3 [phi:init_screen::@1->init_screen::@3]
  __b3_from___b1:
    // [59] phi (byte*) init_screen::c#2 = (const byte*) SCREEN [phi:init_screen::@1->init_screen::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z c
    lda #>SCREEN
    sta.z c+1
    jmp __b3
    // init_screen::@3
  __b3:
    // [60] if((byte*) init_screen::c#2!=(const byte*) SCREEN+(word) $400) goto init_screen::@4 -- pbuz1_neq_pbuc1_then_la1 
    lda.z c+1
    cmp #>SCREEN+$400
    bne __b4
    lda.z c
    cmp #<SCREEN+$400
    bne __b4
    jmp __breturn
    // init_screen::@return
  __breturn:
    // [61] return 
    rts
    // init_screen::@4
  __b4:
    // [62] *((byte*) init_screen::c#2) ← (byte) $14 -- _deref_pbuz1=vbuc1 
    lda #$14
    ldy #0
    sta (c),y
    // [63] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 -- pbuz1=_inc_pbuz1 
    inc.z c
    bne !+
    inc.z c+1
  !:
    // [59] phi from init_screen::@4 to init_screen::@3 [phi:init_screen::@4->init_screen::@3]
  __b3_from___b4:
    // [59] phi (byte*) init_screen::c#2 = (byte*) init_screen::c#1 [phi:init_screen::@4->init_screen::@3#0] -- register_copy 
    jmp __b3
    // init_screen::@2
  __b2:
    // [64] *((byte*) init_screen::b#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (b),y
    // [65] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 -- pbuz1=_inc_pbuz1 
    inc.z b
    bne !+
    inc.z b+1
  !:
    // [57] phi from init_screen::@2 to init_screen::@1 [phi:init_screen::@2->init_screen::@1]
  __b1_from___b2:
    // [57] phi (byte*) init_screen::b#2 = (byte*) init_screen::b#1 [phi:init_screen::@2->init_screen::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  plots_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28
  plots_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28
  plot_xlo: .fill $100, 0
  plot_xhi: .fill $100, 0
  plot_ylo: .fill $100, 0
  plot_yhi: .fill $100, 0
  plot_bit: .fill $100, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction ldy.z x
Removing instruction ldy.z y
Removing instruction lda #>0
Replacing instruction ldx #0 with TAX
Replacing instruction ldy #0 with TAY
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b6_from___b1 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b4_from___b3 with __b4
Replacing label __b3_from___b4 with __b3
Removing instruction __b3_from_main:
Removing instruction init_plot_tables_from___b3:
Removing instruction __b1_from___b2:
Removing instruction __b6_from___b1:
Removing instruction __b6:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b4:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b5:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction init_screen_from_main:
Removing instruction __b3:
Removing instruction __b2:
Removing instruction plots_from___b2:
Removing instruction __b4:
Removing instruction __b1_from_plots:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Removing instruction __b1_from_init_plot_tables:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1_from_init_screen:
Removing instruction __b3_from___b1:
Removing instruction __breturn:
Removing instruction __b3_from___b4:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(const byte*) BG_COLOR = (byte*) 53280
(const nomodify byte*) BITMAP = (byte*) 8192
(const byte) BMM = (byte) $20
(const byte*) D011 = (byte*) 53265
(const byte*) D018 = (byte*) 53272
(const byte) DEN = (byte) $10
(const byte*) FGCOL = (byte*) 53281
(const byte*) RASTER = (byte*) 53266
(const byte) RSEL = (byte) 8
(const byte*) SCREEN = (byte*) 1024
(void()) init_plot_tables()
(byte~) init_plot_tables::$0 reg byte a 202.0
(byte~) init_plot_tables::$6 reg byte a 202.0
(byte~) init_plot_tables::$7 reg byte a 202.0
(byte~) init_plot_tables::$8 reg byte a 202.0
(byte~) init_plot_tables::$9 zp[1]:7 50.5
(label) init_plot_tables::@1
(label) init_plot_tables::@2
(label) init_plot_tables::@3
(label) init_plot_tables::@4
(label) init_plot_tables::@5
(label) init_plot_tables::@6
(label) init_plot_tables::@return
(byte) init_plot_tables::bits
(byte) init_plot_tables::bits#1 reg byte y 101.0
(byte) init_plot_tables::bits#3 reg byte y 60.599999999999994
(byte) init_plot_tables::bits#4 reg byte y 67.33333333333333
(byte) init_plot_tables::x
(byte) init_plot_tables::x#1 reg byte x 151.5
(byte) init_plot_tables::x#2 reg byte x 67.33333333333333
(byte) init_plot_tables::y
(byte) init_plot_tables::y#1 reg byte x 151.5
(byte) init_plot_tables::y#2 reg byte x 50.5
(byte*) init_plot_tables::yoffs
(byte*) init_plot_tables::yoffs#1 yoffs zp[2]:5 202.0
(byte*) init_plot_tables::yoffs#2 yoffs zp[2]:5 63.125
(byte*) init_plot_tables::yoffs#4 yoffs zp[2]:5 101.0
(void()) init_screen()
(label) init_screen::@1
(label) init_screen::@2
(label) init_screen::@3
(label) init_screen::@4
(label) init_screen::@return
(byte*) init_screen::b
(byte*) init_screen::b#1 b zp[2]:5 202.0
(byte*) init_screen::b#2 b zp[2]:5 134.66666666666666
(byte*) init_screen::c
(byte*) init_screen::c#1 c zp[2]:3 202.0
(byte*) init_screen::c#2 c zp[2]:3 134.66666666666666
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(void()) plot((byte) plot::x , (byte) plot::y)
(byte~) plot::$5 reg byte a 200002.0
(byte~) plot::$6 reg byte a 200002.0
(byte~) plot::$7 reg byte a 200002.0
(byte~) plot::$8 reg byte a 200002.0
(byte~) plot::$9 reg byte a 200002.0
(label) plot::@return
(byte*) plot::plotter
(byte*) plot::plotter#0 plotter zp[2]:3 150001.5
(byte*) plot::plotter_x
(byte*) plot::plotter_x#1 plotter_x zp[2]:3 100001.0
(byte*) plot::plotter_x#2 plotter_x zp[2]:3 40000.4
(word) plot::plotter_y
(word) plot::plotter_y#1 plotter_y zp[2]:5 100001.0
(word) plot::plotter_y#2 plotter_y zp[2]:5 200002.0
(byte) plot::x
(byte) plot::x#0 x zp[1]:7 28182.181818181816
(byte) plot::y
(byte) plot::y#0 y zp[1]:2 30000.428571428572
(const to_nomodify byte*) plot_bit[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) plot_xhi[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) plot_xlo[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) plot_yhi[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) plot_ylo[(number) $100]  = { fill( $100, 0) }
(void()) plots()
(label) plots::@1
(label) plots::@2
(label) plots::@3
(label) plots::@return
(byte) plots::i
(byte) plots::i#1 reg byte x 20002.0
(byte) plots::i#2 reg byte x 10001.0
(const byte) plots_cnt = (byte) 8
(const byte*) plots_x[]  = { (byte) $3c, (byte) $50, (byte) $6e, (byte) $50, (byte) $3c, (byte) $28, (byte) $a, (byte) $28 }
(const byte*) plots_y[]  = { (byte) $a, (byte) $28, (byte) $3c, (byte) $50, (byte) $6e, (byte) $50, (byte) $3c, (byte) $28 }

reg byte x [ plots::i#2 plots::i#1 ]
reg byte x [ init_plot_tables::x#2 init_plot_tables::x#1 ]
reg byte y [ init_plot_tables::bits#3 init_plot_tables::bits#4 init_plot_tables::bits#1 ]
reg byte x [ init_plot_tables::y#2 init_plot_tables::y#1 ]
zp[1]:2 [ plot::y#0 ]
reg byte a [ plot::$6 ]
zp[2]:3 [ plot::plotter_x#1 plot::plotter_x#2 plot::plotter#0 init_screen::c#2 init_screen::c#1 ]
reg byte a [ plot::$7 ]
reg byte a [ plot::$8 ]
zp[2]:5 [ plot::plotter_y#1 plot::plotter_y#2 init_screen::b#2 init_screen::b#1 init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ]
reg byte a [ plot::$9 ]
reg byte a [ plot::$5 ]
reg byte a [ init_plot_tables::$0 ]
zp[1]:7 [ init_plot_tables::$9 plot::x#0 ]
reg byte a [ init_plot_tables::$6 ]
reg byte a [ init_plot_tables::$7 ]
reg byte a [ init_plot_tables::$8 ]


FINAL ASSEMBLER
Score: 6531

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const BMM = $20
  .const DEN = $10
  .const RSEL = 8
  .const plots_cnt = 8
  .label BITMAP = $2000
  .label D011 = $d011
  .label RASTER = $d012
  .label D018 = $d018
  .label BG_COLOR = $d020
  .label FGCOL = $d021
  .label SCREEN = $400
  // main
main: {
    // *BG_COLOR = 0
    // [0] *((const byte*) BG_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BG_COLOR
    // *FGCOL = 0
    // [1] *((const byte*) FGCOL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta FGCOL
    // *D011 = BMM|DEN|RSEL|3
    // [2] *((const byte*) D011) ← (const byte) BMM|(const byte) DEN|(const byte) RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    lda #BMM|DEN|RSEL|3
    sta D011
    // *D018 = (byte)(((word)SCREEN/$40)|((word)BITMAP/$400))
    // [3] *((const byte*) D018) ← (byte)(word)(const byte*) SCREEN/(byte) $40|(word)(const nomodify byte*) BITMAP/(word) $400 -- _deref_pbuc1=vbuc2 
    lda #SCREEN/$40|BITMAP/$400
    sta D018
    // init_screen()
    // [4] call init_screen 
    // [56] phi from main to init_screen [phi:main->init_screen]
    jsr init_screen
    // [5] phi from main to main::@3 [phi:main->main::@3]
    // main::@3
    // init_plot_tables()
    // [6] call init_plot_tables 
    // [31] phi from main::@3 to init_plot_tables [phi:main::@3->init_plot_tables]
    jsr init_plot_tables
    // main::@1
  __b1:
    // while (*RASTER!=$ff)
    // [7] if(*((const byte*) RASTER)!=(byte) $ff) goto main::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b1
    // main::@2
    // (*BG_COLOR)++;
    // [8] *((const byte*) BG_COLOR) ← ++ *((const byte*) BG_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    // plots()
    // [9] call plots 
    // [11] phi from main::@2 to plots [phi:main::@2->plots]
    jsr plots
    // main::@4
    // (*BG_COLOR)--;
    // [10] *((const byte*) BG_COLOR) ← -- *((const byte*) BG_COLOR) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BG_COLOR
    jmp __b1
}
  // plots
plots: {
    // [12] phi from plots to plots::@1 [phi:plots->plots::@1]
    // [12] phi (byte) plots::i#2 = (byte) 0 [phi:plots->plots::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // plots::@1
  __b1:
    // for(byte i=0; i<plots_cnt;i++)
    // [13] if((byte) plots::i#2<(const byte) plots_cnt) goto plots::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #plots_cnt
    bcc __b2
    // plots::@return
    // }
    // [14] return 
    rts
    // plots::@2
  __b2:
    // plot(plots_x[i], plots_y[i])
    // [15] (byte) plot::x#0 ← *((const byte*) plots_x + (byte) plots::i#2) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda plots_x,x
    sta.z plot.x
    // [16] (byte) plot::y#0 ← *((const byte*) plots_y + (byte) plots::i#2) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda plots_y,x
    sta.z plot.y
    // [17] call plot 
    jsr plot
    // plots::@3
    // for(byte i=0; i<plots_cnt;i++)
    // [18] (byte) plots::i#1 ← ++ (byte) plots::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [12] phi from plots::@3 to plots::@1 [phi:plots::@3->plots::@1]
    // [12] phi (byte) plots::i#2 = (byte) plots::i#1 [phi:plots::@3->plots::@1#0] -- register_copy 
    jmp __b1
}
  // plot
// plot(byte zp(7) x, byte zp(2) y)
plot: {
    .label x = 7
    .label y = 2
    .label plotter_x = 3
    .label plotter_y = 5
    .label plotter = 3
    // >plotter_x = plot_xhi[x]
    // [19] (byte~) plot::$6 ← *((const to_nomodify byte*) plot_xhi + (byte) plot::x#0) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z x
    lda plot_xhi,y
    // [20] (byte*) plot::plotter_x#1 ← (byte*) 0 hi= (byte~) plot::$6 -- pbuz1=pbuc1_sethi_vbuaa 
    sta.z plotter_x+1
    lda #<0
    sta.z plotter_x
    // <plotter_x = plot_xlo[x]
    // [21] (byte~) plot::$7 ← *((const to_nomodify byte*) plot_xlo + (byte) plot::x#0) -- vbuaa=pbuc1_derefidx_vbuz1 
    lda plot_xlo,y
    // [22] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$7 -- pbuz1=pbuz1_setlo_vbuaa 
    sta.z plotter_x
    // >plotter_y = plot_yhi[y]
    // [23] (byte~) plot::$8 ← *((const to_nomodify byte*) plot_yhi + (byte) plot::y#0) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z y
    lda plot_yhi,y
    // [24] (word) plot::plotter_y#1 ← (word) 0 hi= (byte~) plot::$8 -- vwuz1=vwuc1_sethi_vbuaa 
    sta.z plotter_y+1
    lda #<0
    sta.z plotter_y
    // <plotter_y = plot_ylo[y]
    // [25] (byte~) plot::$9 ← *((const to_nomodify byte*) plot_ylo + (byte) plot::y#0) -- vbuaa=pbuc1_derefidx_vbuz1 
    lda plot_ylo,y
    // [26] (word) plot::plotter_y#2 ← (word) plot::plotter_y#1 lo= (byte~) plot::$9 -- vwuz1=vwuz1_setlo_vbuaa 
    sta.z plotter_y
    // plotter = plotter_x+plotter_y
    // [27] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (word) plot::plotter_y#2 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z plotter_y
    sta.z plotter
    lda.z plotter+1
    adc.z plotter_y+1
    sta.z plotter+1
    // *plotter | plot_bit[x]
    // [28] (byte~) plot::$5 ← *((byte*) plot::plotter#0) | *((const to_nomodify byte*) plot_bit + (byte) plot::x#0) -- vbuaa=_deref_pbuz1_bor_pbuc1_derefidx_vbuz2 
    ldy #0
    lda (plotter),y
    ldy.z x
    ora plot_bit,y
    // *plotter = *plotter | plot_bit[x]
    // [29] *((byte*) plot::plotter#0) ← (byte~) plot::$5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (plotter),y
    // plot::@return
    // }
    // [30] return 
    rts
}
  // init_plot_tables
init_plot_tables: {
    .label __9 = 7
    .label yoffs = 5
    // [32] phi from init_plot_tables to init_plot_tables::@1 [phi:init_plot_tables->init_plot_tables::@1]
    // [32] phi (byte) init_plot_tables::bits#3 = (byte) $80 [phi:init_plot_tables->init_plot_tables::@1#0] -- vbuyy=vbuc1 
    ldy #$80
    // [32] phi (byte) init_plot_tables::x#2 = (byte) 0 [phi:init_plot_tables->init_plot_tables::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [32] phi from init_plot_tables::@2 to init_plot_tables::@1 [phi:init_plot_tables::@2->init_plot_tables::@1]
    // [32] phi (byte) init_plot_tables::bits#3 = (byte) init_plot_tables::bits#4 [phi:init_plot_tables::@2->init_plot_tables::@1#0] -- register_copy 
    // [32] phi (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#1 [phi:init_plot_tables::@2->init_plot_tables::@1#1] -- register_copy 
    // init_plot_tables::@1
  __b1:
    // x&$f8
    // [33] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) $f8 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f8
    // plot_xlo[x] = x&$f8
    // [34] *((const to_nomodify byte*) plot_xlo + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta plot_xlo,x
    // plot_xhi[x] = >BITMAP
    // [35] *((const to_nomodify byte*) plot_xhi + (byte) init_plot_tables::x#2) ← >(const nomodify byte*) BITMAP -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #>BITMAP
    sta plot_xhi,x
    // plot_bit[x] = bits
    // [36] *((const to_nomodify byte*) plot_bit + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bits#3 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta plot_bit,x
    // bits = bits/2
    // [37] (byte) init_plot_tables::bits#1 ← (byte) init_plot_tables::bits#3 >> (byte) 1 -- vbuyy=vbuyy_ror_1 
    tya
    lsr
    tay
    // if(bits==0)
    // [38] if((byte) init_plot_tables::bits#1!=(byte) 0) goto init_plot_tables::@6 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b2
    // [40] phi from init_plot_tables::@1 to init_plot_tables::@2 [phi:init_plot_tables::@1->init_plot_tables::@2]
    // [40] phi (byte) init_plot_tables::bits#4 = (byte) $80 [phi:init_plot_tables::@1->init_plot_tables::@2#0] -- vbuyy=vbuc1 
    ldy #$80
    // [39] phi from init_plot_tables::@1 to init_plot_tables::@6 [phi:init_plot_tables::@1->init_plot_tables::@6]
    // init_plot_tables::@6
    // [40] phi from init_plot_tables::@6 to init_plot_tables::@2 [phi:init_plot_tables::@6->init_plot_tables::@2]
    // [40] phi (byte) init_plot_tables::bits#4 = (byte) init_plot_tables::bits#1 [phi:init_plot_tables::@6->init_plot_tables::@2#0] -- register_copy 
    // init_plot_tables::@2
  __b2:
    // for(byte x : 0..255)
    // [41] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [42] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // [43] phi from init_plot_tables::@2 to init_plot_tables::@3 [phi:init_plot_tables::@2->init_plot_tables::@3]
    // [43] phi (byte*) init_plot_tables::yoffs#2 = (byte*) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta.z yoffs
    sta.z yoffs+1
    // [43] phi (byte) init_plot_tables::y#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#1] -- vbuxx=vbuc1 
    tax
    // [43] phi from init_plot_tables::@4 to init_plot_tables::@3 [phi:init_plot_tables::@4->init_plot_tables::@3]
    // [43] phi (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#4 [phi:init_plot_tables::@4->init_plot_tables::@3#0] -- register_copy 
    // [43] phi (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#1 [phi:init_plot_tables::@4->init_plot_tables::@3#1] -- register_copy 
    // init_plot_tables::@3
  __b3:
    // y&$7
    // [44] (byte~) init_plot_tables::$9 ← (byte) init_plot_tables::y#2 & (byte) 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __9
    // <yoffs
    // [45] (byte~) init_plot_tables::$6 ← < (byte*) init_plot_tables::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // y&$7 | <yoffs
    // [46] (byte~) init_plot_tables::$7 ← (byte~) init_plot_tables::$9 | (byte~) init_plot_tables::$6 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __9
    // plot_ylo[y] = y&$7 | <yoffs
    // [47] *((const to_nomodify byte*) plot_ylo + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$7 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta plot_ylo,x
    // >yoffs
    // [48] (byte~) init_plot_tables::$8 ← > (byte*) init_plot_tables::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // plot_yhi[y] = >yoffs
    // [49] *((const to_nomodify byte*) plot_yhi + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta plot_yhi,x
    // if((y&$7)==7)
    // [50] if((byte~) init_plot_tables::$9!=(byte) 7) goto init_plot_tables::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __9
    bne __b4
    // init_plot_tables::@5
    // yoffs = yoffs + 40*8
    // [51] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [52] phi from init_plot_tables::@3 init_plot_tables::@5 to init_plot_tables::@4 [phi:init_plot_tables::@3/init_plot_tables::@5->init_plot_tables::@4]
    // [52] phi (byte*) init_plot_tables::yoffs#4 = (byte*) init_plot_tables::yoffs#2 [phi:init_plot_tables::@3/init_plot_tables::@5->init_plot_tables::@4#0] -- register_copy 
    // init_plot_tables::@4
  __b4:
    // for(byte y : 0..255)
    // [53] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [54] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3
    // init_plot_tables::@return
    // }
    // [55] return 
    rts
}
  // init_screen
init_screen: {
    .label b = 5
    .label c = 3
    // [57] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
    // [57] phi (byte*) init_screen::b#2 = (const nomodify byte*) BITMAP [phi:init_screen->init_screen::@1#0] -- pbuz1=pbuc1 
    lda #<BITMAP
    sta.z b
    lda #>BITMAP
    sta.z b+1
    // init_screen::@1
  __b1:
    // for(byte* b = BITMAP; b!=BITMAP+$2000; b++)
    // [58] if((byte*) init_screen::b#2!=(const nomodify byte*) BITMAP+(word) $2000) goto init_screen::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z b+1
    cmp #>BITMAP+$2000
    bne __b2
    lda.z b
    cmp #<BITMAP+$2000
    bne __b2
    // [59] phi from init_screen::@1 to init_screen::@3 [phi:init_screen::@1->init_screen::@3]
    // [59] phi (byte*) init_screen::c#2 = (const byte*) SCREEN [phi:init_screen::@1->init_screen::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z c
    lda #>SCREEN
    sta.z c+1
    // init_screen::@3
  __b3:
    // for(byte* c = SCREEN; c!=SCREEN+$400;c++)
    // [60] if((byte*) init_screen::c#2!=(const byte*) SCREEN+(word) $400) goto init_screen::@4 -- pbuz1_neq_pbuc1_then_la1 
    lda.z c+1
    cmp #>SCREEN+$400
    bne __b4
    lda.z c
    cmp #<SCREEN+$400
    bne __b4
    // init_screen::@return
    // }
    // [61] return 
    rts
    // init_screen::@4
  __b4:
    // *c = $14
    // [62] *((byte*) init_screen::c#2) ← (byte) $14 -- _deref_pbuz1=vbuc1 
    lda #$14
    ldy #0
    sta (c),y
    // for(byte* c = SCREEN; c!=SCREEN+$400;c++)
    // [63] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 -- pbuz1=_inc_pbuz1 
    inc.z c
    bne !+
    inc.z c+1
  !:
    // [59] phi from init_screen::@4 to init_screen::@3 [phi:init_screen::@4->init_screen::@3]
    // [59] phi (byte*) init_screen::c#2 = (byte*) init_screen::c#1 [phi:init_screen::@4->init_screen::@3#0] -- register_copy 
    jmp __b3
    // init_screen::@2
  __b2:
    // *b = 0
    // [64] *((byte*) init_screen::b#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (b),y
    // for(byte* b = BITMAP; b!=BITMAP+$2000; b++)
    // [65] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 -- pbuz1=_inc_pbuz1 
    inc.z b
    bne !+
    inc.z b+1
  !:
    // [57] phi from init_screen::@2 to init_screen::@1 [phi:init_screen::@2->init_screen::@1]
    // [57] phi (byte*) init_screen::b#2 = (byte*) init_screen::b#1 [phi:init_screen::@2->init_screen::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  plots_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28
  plots_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28
  plot_xlo: .fill $100, 0
  plot_xhi: .fill $100, 0
  plot_ylo: .fill $100, 0
  plot_yhi: .fill $100, 0
  plot_bit: .fill $100, 0

