
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (dword) PI_u4f28#0 ← (dword/signed dword) 843314857
  to:@1
main: scope:[main]  from @1
  (byte*) main::SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (word~) main::$0 ← > (dword) PI_u4f28#0
  (byte~) main::$1 ← > (word~) main::$0
  *((byte*) main::SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte~) main::$1
  (word~) main::$2 ← > (dword) PI_u4f28#0
  (byte~) main::$3 ← < (word~) main::$2
  *((byte*) main::SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte~) main::$3
  (word~) main::$4 ← < (dword) PI_u4f28#0
  (byte~) main::$5 ← > (word~) main::$4
  *((byte*) main::SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte~) main::$5
  (word~) main::$6 ← < (dword) PI_u4f28#0
  (byte~) main::$7 ← < (word~) main::$6
  *((byte*) main::SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte~) main::$7
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(dword) PI_u4f28
(dword) PI_u4f28#0
(void()) main()
(word~) main::$0
(byte~) main::$1
(word~) main::$2
(byte~) main::$3
(word~) main::$4
(byte~) main::$5
(word~) main::$6
(byte~) main::$7
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0

Culled Empty Block (label) @2
Successful SSA optimization Pass2CullEmptyBlocks
Constant (const dword) PI_u4f28#0 = 843314857
Constant (const byte*) main::SCREEN#0 = ((byte*))1024
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) main::$0 = >PI_u4f28#0
Constant (const word) main::$2 = >PI_u4f28#0
Constant (const word) main::$4 = <PI_u4f28#0
Constant (const word) main::$6 = <PI_u4f28#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$1 = >main::$0
Constant (const byte) main::$3 = <main::$2
Constant (const byte) main::$5 = >main::$4
Constant (const byte) main::$7 = <main::$6
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(main::SCREEN#0+0)
Consolidated array index constant in *(main::SCREEN#0+1)
Consolidated array index constant in *(main::SCREEN#0+2)
Consolidated array index constant in *(main::SCREEN#0+3)
Successful SSA optimization Pass2ConstantAdditionElimination
Constant inlined main::$1 = >>(const dword) PI_u4f28#0
Constant inlined main::$2 = >(const dword) PI_u4f28#0
Constant inlined main::$0 = >(const dword) PI_u4f28#0
Constant inlined main::$5 = ><(const dword) PI_u4f28#0
Constant inlined main::$6 = <(const dword) PI_u4f28#0
Constant inlined main::$3 = <>(const dword) PI_u4f28#0
Constant inlined main::$4 = <(const dword) PI_u4f28#0
Constant inlined main::$7 = <<(const dword) PI_u4f28#0
Successful SSA optimization Pass2ConstantInlining
Simplifying constant plus zero main::SCREEN#0+0
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main  [ ] ( )
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ] ( )
main: scope:[main]  from @1
  [4] *((const byte*) main::SCREEN#0) ← >>(const dword) PI_u4f28#0 [ ] ( main:2 [ ] )
  [5] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← <>(const dword) PI_u4f28#0 [ ] ( main:2 [ ] )
  [6] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← ><(const dword) PI_u4f28#0 [ ] ( main:2 [ ] )
  [7] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← <<(const dword) PI_u4f28#0 [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main
  [8] return  [ ] ( main:2 [ ] )
  to:@return


VARIABLE REGISTER WEIGHTS
(dword) PI_u4f28
(void()) main()
(byte*) main::SCREEN

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const PI_u4f28 = $3243f6a9
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
    .label SCREEN = $400
  //SEG9 [4] *((const byte*) main::SCREEN#0) ← >>(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #>PI_u4f28>>$10
    sta SCREEN
  //SEG10 [5] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← <>(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #<PI_u4f28>>$10
    sta SCREEN+1
  //SEG11 [6] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← ><(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #>PI_u4f28&$ffff
    sta SCREEN+2
  //SEG12 [7] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← <<(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #<PI_u4f28&$ffff
    sta SCREEN+3
    jmp breturn
  //SEG13 main::@return
  breturn:
  //SEG14 [8] return  [ ] ( main:2 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) main::SCREEN#0) ← >>(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← <>(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← ><(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← <<(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 45 combination 
Uplifting [] best 45 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const PI_u4f28 = $3243f6a9
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
    .label SCREEN = $400
  //SEG9 [4] *((const byte*) main::SCREEN#0) ← >>(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #>PI_u4f28>>$10
    sta SCREEN
  //SEG10 [5] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← <>(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #<PI_u4f28>>$10
    sta SCREEN+1
  //SEG11 [6] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← ><(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #>PI_u4f28&$ffff
    sta SCREEN+2
  //SEG12 [7] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← <<(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #<PI_u4f28&$ffff
    sta SCREEN+3
    jmp breturn
  //SEG13 main::@return
  breturn:
  //SEG14 [8] return  [ ] ( main:2 [ ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Removing instruction b1_from_bbegin:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b1:
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(dword) PI_u4f28
(const dword) PI_u4f28#0 PI_u4f28 = (dword/signed dword) 843314857
(void()) main()
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024



FINAL ASSEMBLER
Score: 36

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const PI_u4f28 = $3243f6a9
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @1 to @end [phi:@1->@end]
//SEG7 @end
//SEG8 main
main: {
    .label SCREEN = $400
  //SEG9 [4] *((const byte*) main::SCREEN#0) ← >>(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #>PI_u4f28>>$10
    sta SCREEN
  //SEG10 [5] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← <>(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #<PI_u4f28>>$10
    sta SCREEN+1
  //SEG11 [6] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← ><(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #>PI_u4f28&$ffff
    sta SCREEN+2
  //SEG12 [7] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← <<(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #<PI_u4f28&$ffff
    sta SCREEN+3
  //SEG13 main::@return
  //SEG14 [8] return  [ ] ( main:2 [ ] )
    rts
}

