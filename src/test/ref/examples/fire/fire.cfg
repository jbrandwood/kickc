@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  asm { sei  }
  [5] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0
  [6] *((const byte*) BGCOL#0) ← (const byte) BLACK#0
  [7] call fillscreen 
  to:main::@4
main::@4: scope:[main]  from main
  [8] phi()
  [9] call fillscreen 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [10] phi()
  [11] call fillscreen 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [12] phi()
  [13] call fillscreen 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [14] phi()
  [15] call sid_rnd_init 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [16] phi()
  [17] call makecharset 
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@8
  [18] phi()
  [19] call fire 
  to:main::toD0181
main::toD0181: scope:[main]  from main::@1
  [20] phi()
  to:main::@2
main::@2: scope:[main]  from main::toD0181
  [21] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0
  [22] call fire 
  to:main::toD0182
main::toD0182: scope:[main]  from main::@2
  [23] phi()
  to:main::@3
main::@3: scope:[main]  from main::toD0182
  [24] *((const byte*) D018#0) ← (const byte) main::toD0182_return#0
  to:main::@1
fire: scope:[fire]  from main::@1 main::@2
  [25] (byte*) fire::screen#0 ← phi( main::@1/(const byte*) SCREEN1#0 main::@2/(const byte*) SCREEN2#0 )
  [26] (byte*~) fire::screen#11 ← (byte*) fire::screen#0
  to:fire::@1
fire::@1: scope:[fire]  from fire fire::@4
  [27] (byte*) fire::screen#4 ← phi( fire/(byte*~) fire::screen#11 fire::@4/(byte*) fire::screen#2 )
  [27] (byte*) fire::buffer#4 ← phi( fire/(const byte*) BUFFER#0 fire::@4/(byte*) fire::buffer#2 )
  [28] if((byte*) fire::buffer#4!=(const byte*) BUFFER#0+(byte/signed byte/word/signed word/dword/signed dword) $18*(byte/signed byte/word/signed word/dword/signed dword) $28) goto fire::@2
  to:fire::@3
fire::@3: scope:[fire]  from fire::@1
  [29] (byte*) fire::screen#1 ← (byte*) fire::screen#0 + (byte/signed byte/word/signed word/dword/signed dword) $18*(byte/signed byte/word/signed word/dword/signed dword) $28
  to:fire::@6
fire::@6: scope:[fire]  from fire::@3 fire::@8
  [30] (byte*) fire::screen#10 ← phi( fire::@8/(byte*) fire::screen#3 fire::@3/(byte*) fire::screen#1 )
  [30] (byte*) fire::buffer#10 ← phi( fire::@8/(byte*) fire::buffer#3 fire::@3/(const byte*) BUFFER#0+(byte/signed byte/word/signed word/dword/signed dword) $18*(byte/signed byte/word/signed word/dword/signed dword) $28 )
  [31] if((byte*) fire::buffer#10!=(const byte*) BUFFER#0+(byte/signed byte/word/signed word/dword/signed dword) $19*(byte/signed byte/word/signed word/dword/signed dword) $28) goto fire::@7
  to:fire::@return
fire::@return: scope:[fire]  from fire::@6
  [32] return 
  to:@return
fire::@7: scope:[fire]  from fire::@6
  [33] phi()
  [34] call sid_rnd 
  [35] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0
  to:fire::@8
fire::@8: scope:[fire]  from fire::@7
  [36] (byte~) fire::$18 ← (byte) sid_rnd::return#2
  [37] (byte~) fire::$19 ← (byte~) fire::$18 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [38] (byte/signed word/word/dword/signed dword~) fire::$20 ← (byte/signed byte/word/signed word/dword/signed dword) $30 + (byte~) fire::$19
  [39] *((byte*) fire::buffer#10) ← (byte/signed word/word/dword/signed dword~) fire::$20
  [40] *((byte*) fire::screen#10) ← *((byte*) fire::buffer#10)
  [41] (byte*) fire::screen#3 ← ++ (byte*) fire::screen#10
  [42] (byte*) fire::buffer#3 ← ++ (byte*) fire::buffer#10
  to:fire::@6
fire::@2: scope:[fire]  from fire::@1
  [43] (byte~) fire::$9 ← *((byte*) fire::buffer#4 + (byte/signed byte/word/signed word/dword/signed dword) $28-(byte/signed byte/word/signed word/dword/signed dword) 1) + *((byte*) fire::buffer#4 + (byte/signed byte/word/signed word/dword/signed dword) $28-(byte/signed byte/word/signed word/dword/signed dword) 1)
  [44] (byte~) fire::$10 ← (byte~) fire::$9 + *((byte*) fire::buffer#4 + (byte/signed byte/word/signed word/dword/signed dword) $28)
  [45] (byte~) fire::$11 ← (byte~) fire::$10 + *((byte*) fire::buffer#4 + (byte/signed byte/word/signed word/dword/signed dword) $29)
  [46] (byte) fire::c#0 ← (byte~) fire::$11 >> (byte/signed byte/word/signed word/dword/signed dword) 2
  [47] if((byte) fire::c#0<(byte/signed byte/word/signed word/dword/signed dword) 2+(byte/signed byte/word/signed word/dword/signed dword) 1) goto fire::@4
  to:fire::@5
fire::@5: scope:[fire]  from fire::@2
  [48] (byte) fire::c#1 ← (byte) fire::c#0 - (byte/signed byte/word/signed word/dword/signed dword) 3
  to:fire::@4
fire::@4: scope:[fire]  from fire::@2 fire::@5
  [49] (byte) fire::c#2 ← phi( fire::@2/(byte) fire::c#0 fire::@5/(byte) fire::c#1 )
  [50] *((byte*) fire::buffer#4) ← (byte) fire::c#2
  [51] *((byte*) fire::screen#4) ← *((byte*) fire::buffer#4)
  [52] (byte*) fire::screen#2 ← ++ (byte*) fire::screen#4
  [53] (byte*) fire::buffer#2 ← ++ (byte*) fire::buffer#4
  to:fire::@1
sid_rnd: scope:[sid_rnd]  from fire::@7
  [54] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0)
  to:sid_rnd::@return
sid_rnd::@return: scope:[sid_rnd]  from sid_rnd
  [55] return 
  to:@return
makecharset: scope:[makecharset]  from main::@8
  [56] phi()
  to:makecharset::@1
makecharset::@1: scope:[makecharset]  from makecharset makecharset::@1
  [57] (byte*) makecharset::font#2 ← phi( makecharset/(const byte*) CHARSET#0 makecharset::@1/(byte*) makecharset::font#1 )
  [58] *((byte*) makecharset::font#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [59] (byte*) makecharset::font#1 ← ++ (byte*) makecharset::font#2
  [60] if((byte*) makecharset::font#1!=(const byte*) CHARSET#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 8) goto makecharset::@1
  to:makecharset::@2
makecharset::@2: scope:[makecharset]  from makecharset::@1 makecharset::@2
  [61] (byte*) makecharset::font1#2 ← phi( makecharset::@1/(const byte*) CHARSET#0+(byte/signed byte/word/signed word/dword/signed dword) $40*(byte/signed byte/word/signed word/dword/signed dword) 8 makecharset::@2/(byte*) makecharset::font1#1 )
  [62] *((byte*) makecharset::font1#2) ← (byte/word/signed word/dword/signed dword) $ff
  [63] (byte*) makecharset::font1#1 ← ++ (byte*) makecharset::font1#2
  [64] if((byte*) makecharset::font1#1!=(const byte*) CHARSET#0+(word/signed word/dword/signed dword) $100*(byte/signed byte/word/signed word/dword/signed dword) 8) goto makecharset::@2
  to:makecharset::@3
makecharset::@3: scope:[makecharset]  from makecharset::@2 makecharset::@9
  [65] (byte) makecharset::c#7 ← phi( makecharset::@9/(byte) makecharset::c#1 makecharset::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  to:makecharset::@4
makecharset::@4: scope:[makecharset]  from makecharset::@3 makecharset::@8
  [66] (byte) makecharset::i#6 ← phi( makecharset::@8/(byte) makecharset::i#1 makecharset::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [66] (byte) makecharset::bc#5 ← phi( makecharset::@8/(byte) makecharset::bc#6 makecharset::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  to:makecharset::@5
makecharset::@5: scope:[makecharset]  from makecharset::@4 makecharset::@6
  [67] (byte) makecharset::b#2 ← phi( makecharset::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 makecharset::@6/(byte) makecharset::b#3 )
  [67] (byte) makecharset::ii#2 ← phi( makecharset::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 makecharset::@6/(byte) makecharset::ii#1 )
  [67] (byte) makecharset::bc#3 ← phi( makecharset::@4/(byte) makecharset::bc#5 makecharset::@6/(byte) makecharset::bc#6 )
  [68] (byte) makecharset::bc#1 ← (byte) makecharset::bc#3 + (byte) makecharset::c#7
  [69] if((byte) makecharset::bc#1<(byte/signed byte/word/signed word/dword/signed dword) $3f+(byte/signed byte/word/signed word/dword/signed dword) 1) goto makecharset::@6
  to:makecharset::@7
makecharset::@7: scope:[makecharset]  from makecharset::@5
  [70] (byte) makecharset::bc#2 ← (byte) makecharset::bc#1 - (byte/signed byte/word/signed word/dword/signed dword) $40
  [71] (byte~) makecharset::$11 ← (byte) makecharset::i#6 & (byte/signed byte/word/signed word/dword/signed dword) 1
  [72] (byte~) makecharset::$12 ← (byte) makecharset::ii#2 + (byte~) makecharset::$11
  [73] (byte~) makecharset::$13 ← (byte~) makecharset::$12 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [74] (byte) makecharset::b#1 ← (byte) makecharset::b#2 + *((const byte[8]) makecharset::bittab#0 + (byte~) makecharset::$13)
  to:makecharset::@6
makecharset::@6: scope:[makecharset]  from makecharset::@5 makecharset::@7
  [75] (byte) makecharset::b#3 ← phi( makecharset::@5/(byte) makecharset::b#2 makecharset::@7/(byte) makecharset::b#1 )
  [75] (byte) makecharset::bc#6 ← phi( makecharset::@5/(byte) makecharset::bc#1 makecharset::@7/(byte) makecharset::bc#2 )
  [76] (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2
  [77] if((byte) makecharset::ii#1<(byte/signed byte/word/signed word/dword/signed dword) 8) goto makecharset::@5
  to:makecharset::@8
makecharset::@8: scope:[makecharset]  from makecharset::@6
  [78] (word~) makecharset::$17 ← ((word)) (byte) makecharset::c#7
  [79] (word~) makecharset::$18 ← (word~) makecharset::$17 << (byte/signed byte/word/signed word/dword/signed dword) 3
  [80] (word~) makecharset::$19 ← (word~) makecharset::$18 + (byte) makecharset::i#6
  [81] *((const byte*) CHARSET#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 8 + (word~) makecharset::$19) ← (byte) makecharset::b#3
  [82] (byte) makecharset::i#1 ← ++ (byte) makecharset::i#6
  [83] if((byte) makecharset::i#1<(byte/signed byte/word/signed word/dword/signed dword) 8) goto makecharset::@4
  to:makecharset::@9
makecharset::@9: scope:[makecharset]  from makecharset::@8
  [84] (byte) makecharset::c#1 ← ++ (byte) makecharset::c#7
  [85] if((byte) makecharset::c#1<(byte/signed byte/word/signed word/dword/signed dword) $40) goto makecharset::@3
  to:makecharset::@return
makecharset::@return: scope:[makecharset]  from makecharset::@9
  [86] return 
  to:@return
sid_rnd_init: scope:[sid_rnd_init]  from main::@7
  [87] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) $ffff
  [88] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0
  to:sid_rnd_init::@return
sid_rnd_init::@return: scope:[sid_rnd_init]  from sid_rnd_init
  [89] return 
  to:@return
fillscreen: scope:[fillscreen]  from main main::@4 main::@5 main::@6
  [90] (byte*) fillscreen::screen#6 ← phi( main/(const byte*) BUFFER#0 main::@5/(const byte*) SCREEN2#0 main::@6/(const byte*) COLS#0 main::@4/(const byte*) SCREEN1#0 )
  [90] (byte) fillscreen::fill#5 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@5/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@6/(const byte) YELLOW#0 main::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  to:fillscreen::@1
fillscreen::@1: scope:[fillscreen]  from fillscreen fillscreen::@1
  [91] (word) fillscreen::i#2 ← phi( fillscreen/(byte/signed byte/word/signed word/dword/signed dword) 0 fillscreen::@1/(word) fillscreen::i#1 )
  [91] (byte*) fillscreen::screen#5 ← phi( fillscreen/(byte*) fillscreen::screen#6 fillscreen::@1/(byte*) fillscreen::screen#4 )
  [92] *((byte*) fillscreen::screen#5) ← (byte) fillscreen::fill#5
  [93] (byte*) fillscreen::screen#4 ← ++ (byte*) fillscreen::screen#5
  [94] (word) fillscreen::i#1 ← ++ (word) fillscreen::i#2
  [95] if((word) fillscreen::i#1!=(word/signed word/dword/signed dword) $3e8) goto fillscreen::@1
  to:fillscreen::@return
fillscreen::@return: scope:[fillscreen]  from fillscreen::@1
  [96] return 
  to:@return
