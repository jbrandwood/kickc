
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @3
  (byte*) B#10 ← phi( @3/(byte*) B#12 )
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte*) B#9 ← phi( main/(byte*) B#10 main::@7/(byte*) B#11 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte*) B#8 ← phi( main::@1/(byte*) B#9 )
  call menu 
  to:main::@7
main::@7: scope:[main]  from main::@2
  (byte*) B#11 ← phi( main::@2/(byte*) B#8 )
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
menu: scope:[menu]  from main::@2
  (byte*) B#7 ← phi( main::@2/(byte*) B#8 )
  to:menu::@1
menu::@1: scope:[menu]  from menu
  (byte*) B#6 ← phi( menu/(byte*) B#7 )
  if(true) goto menu::@2
  to:menu::@return
menu::@2: scope:[menu]  from menu::@1
  (byte*) B#5 ← phi( menu::@1/(byte*) B#6 )
  call mode 
  to:menu::@8
menu::@8: scope:[menu]  from menu::@2
  to:menu::@return
menu::@return: scope:[menu]  from menu::@1 menu::@8
  return 
  to:@return
@2: scope:[]  from @begin
  (byte*) B#0 ← ((byte*)) (word/signed word/dword/signed dword) 4096
  to:@3
mode: scope:[mode]  from menu::@2
  (byte*) B#3 ← phi( menu::@2/(byte*) B#5 )
  to:mode::@1
mode::@1: scope:[mode]  from mode mode::@2 mode::@4
  (byte*) B#2 ← phi( mode/(byte*) B#3 mode::@2/(byte*) B#1 mode::@4/(byte*) B#4 )
  if(true) goto mode::@2
  to:mode::@return
mode::@2: scope:[mode]  from mode::@1
  (byte*) B#1 ← phi( mode::@1/(byte*) B#2 )
  (bool~) mode::$0 ← *((byte*) B#1) == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mode::$1 ← ! (bool~) mode::$0
  if((bool~) mode::$1) goto mode::@4
  to:mode::@1
mode::@4: scope:[mode]  from mode::@2
  (byte*) B#4 ← phi( mode::@2/(byte*) B#1 )
  to:mode::@1
mode::@return: scope:[mode]  from mode::@1
  return 
  to:@return
@3: scope:[]  from @2
  (byte*) B#12 ← phi( @2/(byte*) B#0 )
  call main 
  to:@4
@4: scope:[]  from @3
  to:@end
@end: scope:[]  from @4

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @4
(label) @begin
(label) @end
(byte*) B
(byte*) B#0
(byte*) B#1
(byte*) B#10
(byte*) B#11
(byte*) B#12
(byte*) B#2
(byte*) B#3
(byte*) B#4
(byte*) B#5
(byte*) B#6
(byte*) B#7
(byte*) B#8
(byte*) B#9
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@7
(label) main::@return
(void()) menu()
(label) menu::@1
(label) menu::@2
(label) menu::@8
(label) menu::@return
(void()) mode()
(bool~) mode::$0
(bool~) mode::$1
(label) mode::@1
(label) mode::@2
(label) mode::@4
(label) mode::@return

Culled Empty Block (label) menu::@8
Culled Empty Block (label) @4
Successful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not (bool~) mode::$1 ← *((byte*) B#1) != (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) mode::$0 ← *((byte*) B#1) == (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) B#11 = (byte*) B#8 (byte*) B#9 
Alias (byte*) B#5 = (byte*) B#6 (byte*) B#7 
Alias (byte*) B#1 = (byte*) B#2 (byte*) B#4 
Alias (byte*) B#0 = (byte*) B#12 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) B#11
Self Phi Eliminated (byte*) B#1
Self Phi Eliminated (byte*) B#1
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) B#10 (byte*) B#0
Redundant Phi (byte*) B#11 (byte*) B#10
Redundant Phi (byte*) B#5 (byte*) B#11
Redundant Phi (byte*) B#3 (byte*) B#5
Redundant Phi (byte*) B#1 (byte*) B#3
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) mode::$1 if(*((byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) B#0 = ((byte*))4096
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination if(true) goto main::@2
if() condition always true - replacing block destination if(true) goto menu::@2
if() condition always true - replacing block destination if(true) goto mode::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Removing unused block mode::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Culled Empty Block (label) main::@1
Culled Empty Block (label) main::@7
Culled Empty Block (label) menu::@1
Culled Empty Block (label) @2
Culled Empty Block (label) mode::@1
Successful SSA optimization Pass2CullEmptyBlocks
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of menu
Adding NOP phi() at start of menu::@2
Adding NOP phi() at start of mode
Adding NOP phi() at start of mode::@4
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to menu:6 
Calls in [menu] to mode:9 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of menu
Adding NOP phi() at start of menu::@2
Adding NOP phi() at start of mode
Adding NOP phi() at start of mode::@4

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@3
@3: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main  [ ] ( )
  to:@end
@end: scope:[]  from @3
  [3] phi() [ ] ( )
main: scope:[main]  from @3
  [4] phi() [ ] ( main:2 [ ] )
  to:main::@2
main::@2: scope:[main]  from main main::@2
  [5] phi() [ ] ( main:2 [ ] )
  [6] call menu  [ ] ( main:2 [ ] )
  to:main::@2
menu: scope:[menu]  from main::@2
  [7] phi() [ ] ( main:2::menu:6 [ ] )
  to:menu::@2
menu::@2: scope:[menu]  from menu
  [8] phi() [ ] ( main:2::menu:6 [ ] )
  [9] call mode  [ ] ( main:2::menu:6 [ ] )
  to:menu::@return
menu::@return: scope:[menu]  from menu::@2
  [10] return  [ ] ( main:2::menu:6 [ ] )
  to:@return
mode: scope:[mode]  from menu::@2
  [11] phi() [ ] ( main:2::menu:6::mode:9 [ ] )
  to:mode::@2
mode::@2: scope:[mode]  from mode mode::@2 mode::@4
  [12] if(*((const byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@4 [ ] ( main:2::menu:6::mode:9 [ ] )
  to:mode::@2
mode::@4: scope:[mode]  from mode::@2
  [13] phi() [ ] ( main:2::menu:6::mode:9 [ ] )
  to:mode::@2


VARIABLE REGISTER WEIGHTS
(byte*) B
(void()) main()
(void()) menu()
(void()) mode()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label B = $1000
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @3 [phi:@begin->@3]
b3_from_bbegin:
  jmp b3
//SEG4 @3
b3:
//SEG5 [2] call main  [ ] ( )
//SEG6 [4] phi from @3 to main [phi:@3->main]
main_from_b3:
  jsr main
//SEG7 [3] phi from @3 to @end [phi:@3->@end]
bend_from_b3:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] phi from main main::@2 to main::@2 [phi:main/main::@2->main::@2]
  b2_from_main:
  b2_from_b2:
    jmp b2
  //SEG11 main::@2
  b2:
  //SEG12 [6] call menu  [ ] ( main:2 [ ] )
  //SEG13 [7] phi from main::@2 to menu [phi:main::@2->menu]
  menu_from_b2:
    jsr menu
    jmp b2_from_b2
}
//SEG14 menu
menu: {
  //SEG15 [8] phi from menu to menu::@2 [phi:menu->menu::@2]
  b2_from_menu:
    jmp b2
  //SEG16 menu::@2
  b2:
  //SEG17 [9] call mode  [ ] ( main:2::menu:6 [ ] )
  //SEG18 [11] phi from menu::@2 to mode [phi:menu::@2->mode]
  mode_from_b2:
    jsr mode
    jmp breturn
  //SEG19 menu::@return
  breturn:
  //SEG20 [10] return  [ ] ( main:2::menu:6 [ ] )
    rts
}
//SEG21 mode
mode: {
    jmp b2
  //SEG22 mode::@2
  b2:
  //SEG23 [12] if(*((const byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@4 [ ] ( main:2::menu:6::mode:9 [ ] ) -- _deref_pbuc1_neq_0_then_la1 
    lda B
    cmp #0
    bne b4_from_b2
    jmp b2
  //SEG24 [13] phi from mode::@2 to mode::@4 [phi:mode::@2->mode::@4]
  b4_from_b2:
    jmp b4
  //SEG25 mode::@4
  b4:
    jmp b2
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [12] if(*((const byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@4 [ ] ( main:2::menu:6::mode:9 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [menu] 
Uplift Scope [mode] 
Uplift Scope [] 

Uplifting [main] best 11929 combination 
Uplifting [menu] best 11929 combination 
Uplifting [mode] best 11929 combination 
Uplifting [] best 11929 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label B = $1000
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @3 [phi:@begin->@3]
b3_from_bbegin:
  jmp b3
//SEG4 @3
b3:
//SEG5 [2] call main  [ ] ( )
//SEG6 [4] phi from @3 to main [phi:@3->main]
main_from_b3:
  jsr main
//SEG7 [3] phi from @3 to @end [phi:@3->@end]
bend_from_b3:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] phi from main main::@2 to main::@2 [phi:main/main::@2->main::@2]
  b2_from_main:
  b2_from_b2:
    jmp b2
  //SEG11 main::@2
  b2:
  //SEG12 [6] call menu  [ ] ( main:2 [ ] )
  //SEG13 [7] phi from main::@2 to menu [phi:main::@2->menu]
  menu_from_b2:
    jsr menu
    jmp b2_from_b2
}
//SEG14 menu
menu: {
  //SEG15 [8] phi from menu to menu::@2 [phi:menu->menu::@2]
  b2_from_menu:
    jmp b2
  //SEG16 menu::@2
  b2:
  //SEG17 [9] call mode  [ ] ( main:2::menu:6 [ ] )
  //SEG18 [11] phi from menu::@2 to mode [phi:menu::@2->mode]
  mode_from_b2:
    jsr mode
    jmp breturn
  //SEG19 menu::@return
  breturn:
  //SEG20 [10] return  [ ] ( main:2::menu:6 [ ] )
    rts
}
//SEG21 mode
mode: {
    jmp b2
  //SEG22 mode::@2
  b2:
  //SEG23 [12] if(*((const byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@4 [ ] ( main:2::menu:6::mode:9 [ ] ) -- _deref_pbuc1_neq_0_then_la1 
    lda B
    cmp #0
    bne b4_from_b2
    jmp b2
  //SEG24 [13] phi from mode::@2 to mode::@4 [phi:mode::@2->mode::@4]
  b4_from_b2:
    jmp b4
  //SEG25 mode::@4
  b4:
    jmp b2
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b3
Removing instruction jmp bend
Removing instruction jmp b2
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b4
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b2_from_b2 with b2
Replacing label b4_from_b2 with b4
Removing instruction bbegin:
Removing instruction b3_from_bbegin:
Removing instruction main_from_b3:
Removing instruction bend_from_b3:
Removing instruction b2_from_main:
Removing instruction b2_from_b2:
Removing instruction menu_from_b2:
Removing instruction b2_from_menu:
Removing instruction mode_from_b2:
Removing instruction b4_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b3:
Removing instruction bend:
Removing instruction b2:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to b2 in bne b4
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp b2
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(label) @3
(label) @begin
(label) @end
(byte*) B
(const byte*) B#0 B = ((byte*))(word/signed word/dword/signed dword) 4096
(void()) main()
(label) main::@2
(void()) menu()
(label) menu::@2
(label) menu::@return
(void()) mode()
(label) mode::@2
(label) mode::@4



FINAL ASSEMBLER
Score: 11527

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label B = $1000
//SEG2 @begin
//SEG3 [1] phi from @begin to @3 [phi:@begin->@3]
//SEG4 @3
//SEG5 [2] call main  [ ] ( )
//SEG6 [4] phi from @3 to main [phi:@3->main]
  jsr main
//SEG7 [3] phi from @3 to @end [phi:@3->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] phi from main main::@2 to main::@2 [phi:main/main::@2->main::@2]
  //SEG11 main::@2
  b2:
  //SEG12 [6] call menu  [ ] ( main:2 [ ] )
  //SEG13 [7] phi from main::@2 to menu [phi:main::@2->menu]
    jsr menu
    jmp b2
}
//SEG14 menu
menu: {
  //SEG15 [8] phi from menu to menu::@2 [phi:menu->menu::@2]
  //SEG16 menu::@2
  //SEG17 [9] call mode  [ ] ( main:2::menu:6 [ ] )
  //SEG18 [11] phi from menu::@2 to mode [phi:menu::@2->mode]
    jsr mode
  //SEG19 menu::@return
  //SEG20 [10] return  [ ] ( main:2::menu:6 [ ] )
    rts
}
//SEG21 mode
mode: {
  //SEG22 mode::@2
  b2:
  //SEG23 [12] if(*((const byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@4 [ ] ( main:2::menu:6::mode:9 [ ] ) -- _deref_pbuc1_neq_0_then_la1 
    lda B
    cmp #0
    bne b2
    jmp b2
  //SEG24 [13] phi from mode::@2 to mode::@4 [phi:mode::@2->mode::@4]
  //SEG25 mode::@4
}

