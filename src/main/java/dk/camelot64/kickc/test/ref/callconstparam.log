// Multiple calls with different (constant?) parameters should yield different values at runtime
// Currently the same constant parameter is passed on every call.
// Reason: Multiple versioned parameter constants x0#0, x0#1 are only output as a single constant in the ASM .const x0 = 0

byte* screen = $0400;

main();

void main() {
    line(1,2);
    line(3,5);
}

void line(byte x0, byte x1) {
  for(byte x  = x0; x<x1; x++) {
     *screen = x;
     screen++;
  }

}
Adding pre/post-modifier (byte*) screen ← ++ (byte*) screen
Adding pre/post-modifier (byte) line::x ← ++ (byte) line::x
PROGRAM
  (byte*) screen ← (word) 1024
  (void~) $0 ← call main 
proc (void()) main()
  (void~) main::$0 ← call line (byte) 1 (byte) 2 
  (void~) main::$1 ← call line (byte) 3 (byte) 5 
main::@return:
  return 
endproc // main()
proc (void()) line((byte) line::x0 , (byte) line::x1)
  (byte) line::x ← (byte) line::x0
line::@1:
  *((byte*) screen) ← (byte) line::x
  (byte*) screen ← ++ (byte*) screen
  (byte) line::x ← ++ (byte) line::x
  (boolean~) line::$0 ← (byte) line::x < (byte) line::x1
  if((boolean~) line::$0) goto line::@1
line::@return:
  return 
endproc // line()

SYMBOLS
(void~) $0
(void()) line((byte) line::x0 , (byte) line::x1)
(boolean~) line::$0
(label) line::@1
(label) line::@return
(byte) line::x
(byte) line::x0
(byte) line::x1
(void()) main()
(void~) main::$0
(void~) main::$1
(label) main::@return
(byte*) screen

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) screen ← (word) 1024
  (void~) $0 ← call main 
  to:@1
main: scope:[main]  from
  (void~) main::$0 ← call line (byte) 1 (byte) 2 
  (void~) main::$1 ← call line (byte) 3 (byte) 5 
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
line: scope:[line]  from
  (byte) line::x ← (byte) line::x0
  to:line::@1
line::@1: scope:[line]  from line line::@1
  *((byte*) screen) ← (byte) line::x
  (byte*) screen ← ++ (byte*) screen
  (byte) line::x ← ++ (byte) line::x
  (boolean~) line::$0 ← (byte) line::x < (byte) line::x1
  if((boolean~) line::$0) goto line::@1
  to:line::@2
line::@2: scope:[line]  from line::@1
  to:line::@return
line::@return: scope:[line]  from line::@2
  return 
  to:@return
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

Removing empty block @1
Removing empty block line::@2
Removing empty block @2
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) screen ← (word) 1024
  (void~) $0 ← call main 
  to:@end
main: scope:[main]  from
  (void~) main::$0 ← call line (byte) 1 (byte) 2 
  (void~) main::$1 ← call line (byte) 3 (byte) 5 
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
line: scope:[line]  from
  (byte) line::x ← (byte) line::x0
  to:line::@1
line::@1: scope:[line]  from line line::@1
  *((byte*) screen) ← (byte) line::x
  (byte*) screen ← ++ (byte*) screen
  (byte) line::x ← ++ (byte) line::x
  (boolean~) line::$0 ← (byte) line::x < (byte) line::x1
  if((boolean~) line::$0) goto line::@1
  to:line::@return
line::@return: scope:[line]  from line::@1
  return 
  to:@return
@end: scope:[]  from @begin

PROCEDURE MODIFY VARIABLE ANALYSIS
main modifies screen
line modifies screen

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) screen ← (word) 1024
  call main param-assignment
  to:@3
@3: scope:[]  from @begin
  (byte*) screen ← (byte*) screen
  to:@end
main: scope:[main]  from @begin
  (byte) line::x0 ← (byte) 1
  (byte) line::x1 ← (byte) 2
  call line param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) screen ← (byte*) screen
  (byte) line::x0 ← (byte) 3
  (byte) line::x1 ← (byte) 5
  call line param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) screen ← (byte*) screen
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte*) screen ← (byte*) screen
  return 
  to:@return
line: scope:[line]  from main main::@1
  (byte) line::x ← (byte) line::x0
  to:line::@1
line::@1: scope:[line]  from line line::@1
  *((byte*) screen) ← (byte) line::x
  (byte*) screen ← ++ (byte*) screen
  (byte) line::x ← ++ (byte) line::x
  (boolean~) line::$0 ← (byte) line::x < (byte) line::x1
  if((boolean~) line::$0) goto line::@1
  to:line::@return
line::@return: scope:[line]  from line::@1
  (byte*) screen ← (byte*) screen
  return 
  to:@return
@end: scope:[]  from @3

Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) screen#0 ← (word) 1024
  call main param-assignment
  to:@3
@3: scope:[]  from @begin
  (byte*) screen#7 ← phi( @begin/(byte*) screen#0 )
  (byte*) screen#1 ← (byte*) screen#7
  to:@end
main: scope:[main]  from @begin
  (byte*) screen#13 ← phi( @begin/(byte*) screen#0 )
  (byte) line::x0#0 ← (byte) 1
  (byte) line::x1#0 ← (byte) 2
  call line param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) screen#8 ← phi( main/(byte*) screen#13 )
  (byte*) screen#2 ← (byte*) screen#8
  (byte) line::x0#1 ← (byte) 3
  (byte) line::x1#1 ← (byte) 5
  call line param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) screen#9 ← phi( main::@1/(byte*) screen#2 )
  (byte*) screen#3 ← (byte*) screen#9
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte*) screen#10 ← phi( main::@2/(byte*) screen#3 )
  (byte*) screen#4 ← (byte*) screen#10
  return 
  to:@return
line: scope:[line]  from main main::@1
  (byte) line::x1#3 ← phi( main/(byte) line::x1#0 main::@1/(byte) line::x1#1 )
  (byte*) screen#14 ← phi( main/(byte*) screen#13 main::@1/(byte*) screen#2 )
  (byte) line::x0#2 ← phi( main/(byte) line::x0#0 main::@1/(byte) line::x0#1 )
  (byte) line::x#0 ← (byte) line::x0#2
  to:line::@1
line::@1: scope:[line]  from line line::@1
  (byte) line::x1#2 ← phi( line/(byte) line::x1#3 line::@1/(byte) line::x1#2 )
  (byte*) screen#11 ← phi( line/(byte*) screen#14 line::@1/(byte*) screen#5 )
  (byte) line::x#2 ← phi( line/(byte) line::x#0 line::@1/(byte) line::x#1 )
  *((byte*) screen#11) ← (byte) line::x#2
  (byte*) screen#5 ← ++ (byte*) screen#11
  (byte) line::x#1 ← ++ (byte) line::x#2
  (boolean~) line::$0 ← (byte) line::x#1 < (byte) line::x1#2
  if((boolean~) line::$0) goto line::@1
  to:line::@return
line::@return: scope:[line]  from line::@1
  (byte*) screen#12 ← phi( line::@1/(byte*) screen#5 )
  (byte*) screen#6 ← (byte*) screen#12
  return 
  to:@return
@end: scope:[]  from @3

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) screen#0 ← (word) 1024
  call main param-assignment
  to:@3
@3: scope:[]  from @begin
  (byte*) screen#7 ← phi( @begin/(byte*) screen#4 )
  (byte*) screen#1 ← (byte*) screen#7
  to:@end
main: scope:[main]  from @begin
  (byte*) screen#13 ← phi( @begin/(byte*) screen#0 )
  (byte) line::x0#0 ← (byte) 1
  (byte) line::x1#0 ← (byte) 2
  call line param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) screen#8 ← phi( main/(byte*) screen#6 )
  (byte*) screen#2 ← (byte*) screen#8
  (byte) line::x0#1 ← (byte) 3
  (byte) line::x1#1 ← (byte) 5
  call line param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) screen#9 ← phi( main::@1/(byte*) screen#6 )
  (byte*) screen#3 ← (byte*) screen#9
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte*) screen#10 ← phi( main::@2/(byte*) screen#3 )
  (byte*) screen#4 ← (byte*) screen#10
  return 
  to:@return
line: scope:[line]  from main main::@1
  (byte) line::x1#3 ← phi( main/(byte) line::x1#0 main::@1/(byte) line::x1#1 )
  (byte*) screen#14 ← phi( main/(byte*) screen#13 main::@1/(byte*) screen#2 )
  (byte) line::x0#2 ← phi( main/(byte) line::x0#0 main::@1/(byte) line::x0#1 )
  (byte) line::x#0 ← (byte) line::x0#2
  to:line::@1
line::@1: scope:[line]  from line line::@1
  (byte) line::x1#2 ← phi( line/(byte) line::x1#3 line::@1/(byte) line::x1#2 )
  (byte*) screen#11 ← phi( line/(byte*) screen#14 line::@1/(byte*) screen#5 )
  (byte) line::x#2 ← phi( line/(byte) line::x#0 line::@1/(byte) line::x#1 )
  *((byte*) screen#11) ← (byte) line::x#2
  (byte*) screen#5 ← ++ (byte*) screen#11
  (byte) line::x#1 ← ++ (byte) line::x#2
  (boolean~) line::$0 ← (byte) line::x#1 < (byte) line::x1#2
  if((boolean~) line::$0) goto line::@1
  to:line::@return
line::@return: scope:[line]  from line::@1
  (byte*) screen#12 ← phi( line::@1/(byte*) screen#5 )
  (byte*) screen#6 ← (byte*) screen#12
  return 
  to:@return
@end: scope:[]  from @3

INITIAL SSA SYMBOL TABLE
(label) @3
(label) @begin
(label) @end
(void()) line((byte) line::x0 , (byte) line::x1)
(boolean~) line::$0
(label) line::@1
(label) line::@return
(byte) line::x
(byte) line::x#0
(byte) line::x#1
(byte) line::x#2
(byte) line::x0
(byte) line::x0#0
(byte) line::x0#1
(byte) line::x0#2
(byte) line::x1
(byte) line::x1#0
(byte) line::x1#1
(byte) line::x1#2
(byte) line::x1#3
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte*) screen
(byte*) screen#0
(byte*) screen#1
(byte*) screen#10
(byte*) screen#11
(byte*) screen#12
(byte*) screen#13
(byte*) screen#14
(byte*) screen#2
(byte*) screen#3
(byte*) screen#4
(byte*) screen#5
(byte*) screen#6
(byte*) screen#7
(byte*) screen#8
(byte*) screen#9

Alias (byte*) screen#1 = (byte*) screen#7 (byte*) screen#4 (byte*) screen#8 (byte*) screen#6 (byte*) screen#2 (byte*) screen#9 (byte*) screen#3 (byte*) screen#10 (byte*) screen#12 (byte*) screen#5 
Alias (byte*) screen#0 = (byte*) screen#13 
Alias (byte) line::x#0 = (byte) line::x0#2 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) screen#0 ← (word) 1024
  call main param-assignment
  to:@3
@3: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte) line::x0#0 ← (byte) 1
  (byte) line::x1#0 ← (byte) 2
  call line param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte) line::x0#1 ← (byte) 3
  (byte) line::x1#1 ← (byte) 5
  call line param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
line: scope:[line]  from main main::@1
  (byte) line::x1#3 ← phi( main/(byte) line::x1#0 main::@1/(byte) line::x1#1 )
  (byte*) screen#14 ← phi( main/(byte*) screen#0 main::@1/(byte*) screen#1 )
  (byte) line::x#0 ← phi( main/(byte) line::x0#0 main::@1/(byte) line::x0#1 )
  to:line::@1
line::@1: scope:[line]  from line line::@1
  (byte) line::x1#2 ← phi( line/(byte) line::x1#3 line::@1/(byte) line::x1#2 )
  (byte*) screen#11 ← phi( line/(byte*) screen#14 line::@1/(byte*) screen#1 )
  (byte) line::x#2 ← phi( line/(byte) line::x#0 line::@1/(byte) line::x#1 )
  *((byte*) screen#11) ← (byte) line::x#2
  (byte*) screen#1 ← ++ (byte*) screen#11
  (byte) line::x#1 ← ++ (byte) line::x#2
  (boolean~) line::$0 ← (byte) line::x#1 < (byte) line::x1#2
  if((boolean~) line::$0) goto line::@1
  to:line::@return
line::@return: scope:[line]  from line::@1
  return 
  to:@return
@end: scope:[]  from @3

Self Phi Eliminated (byte) line::x1#2
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) screen#0 ← (word) 1024
  call main param-assignment
  to:@3
@3: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte) line::x0#0 ← (byte) 1
  (byte) line::x1#0 ← (byte) 2
  call line param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte) line::x0#1 ← (byte) 3
  (byte) line::x1#1 ← (byte) 5
  call line param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
line: scope:[line]  from main main::@1
  (byte) line::x1#3 ← phi( main/(byte) line::x1#0 main::@1/(byte) line::x1#1 )
  (byte*) screen#14 ← phi( main/(byte*) screen#0 main::@1/(byte*) screen#1 )
  (byte) line::x#0 ← phi( main/(byte) line::x0#0 main::@1/(byte) line::x0#1 )
  to:line::@1
line::@1: scope:[line]  from line line::@1
  (byte) line::x1#2 ← phi( line/(byte) line::x1#3 )
  (byte*) screen#11 ← phi( line/(byte*) screen#14 line::@1/(byte*) screen#1 )
  (byte) line::x#2 ← phi( line/(byte) line::x#0 line::@1/(byte) line::x#1 )
  *((byte*) screen#11) ← (byte) line::x#2
  (byte*) screen#1 ← ++ (byte*) screen#11
  (byte) line::x#1 ← ++ (byte) line::x#2
  (boolean~) line::$0 ← (byte) line::x#1 < (byte) line::x1#2
  if((boolean~) line::$0) goto line::@1
  to:line::@return
line::@return: scope:[line]  from line::@1
  return 
  to:@return
@end: scope:[]  from @3

Simple Condition (boolean~) line::$0 if((byte) line::x#1<(byte) line::x1#2) goto line::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) screen#0 ← (word) 1024
  call main param-assignment
  to:@3
@3: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte) line::x0#0 ← (byte) 1
  (byte) line::x1#0 ← (byte) 2
  call line param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte) line::x0#1 ← (byte) 3
  (byte) line::x1#1 ← (byte) 5
  call line param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
line: scope:[line]  from main main::@1
  (byte) line::x1#3 ← phi( main/(byte) line::x1#0 main::@1/(byte) line::x1#1 )
  (byte*) screen#14 ← phi( main/(byte*) screen#0 main::@1/(byte*) screen#1 )
  (byte) line::x#0 ← phi( main/(byte) line::x0#0 main::@1/(byte) line::x0#1 )
  to:line::@1
line::@1: scope:[line]  from line line::@1
  (byte) line::x1#2 ← phi( line/(byte) line::x1#3 )
  (byte*) screen#11 ← phi( line/(byte*) screen#14 line::@1/(byte*) screen#1 )
  (byte) line::x#2 ← phi( line/(byte) line::x#0 line::@1/(byte) line::x#1 )
  *((byte*) screen#11) ← (byte) line::x#2
  (byte*) screen#1 ← ++ (byte*) screen#11
  (byte) line::x#1 ← ++ (byte) line::x#2
  if((byte) line::x#1<(byte) line::x1#2) goto line::@1
  to:line::@return
line::@return: scope:[line]  from line::@1
  return 
  to:@return
@end: scope:[]  from @3

Constant (const byte*) screen#0 = 1024
Constant (const byte) line::x0#0 = 1
Constant (const byte) line::x1#0 = 2
Constant (const byte) line::x0#1 = 3
Constant (const byte) line::x1#1 = 5
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@3
@3: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  call line param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call line param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
line: scope:[line]  from main main::@1
  (byte) line::x1#3 ← phi( main/(const byte) line::x1#0 main::@1/(const byte) line::x1#1 )
  (byte*) screen#14 ← phi( main/(const byte*) screen#0 main::@1/(byte*) screen#1 )
  (byte) line::x#0 ← phi( main/(const byte) line::x0#0 main::@1/(const byte) line::x0#1 )
  to:line::@1
line::@1: scope:[line]  from line line::@1
  (byte) line::x1#2 ← phi( line/(byte) line::x1#3 )
  (byte*) screen#11 ← phi( line/(byte*) screen#14 line::@1/(byte*) screen#1 )
  (byte) line::x#2 ← phi( line/(byte) line::x#0 line::@1/(byte) line::x#1 )
  *((byte*) screen#11) ← (byte) line::x#2
  (byte*) screen#1 ← ++ (byte*) screen#11
  (byte) line::x#1 ← ++ (byte) line::x#2
  if((byte) line::x#1<(byte) line::x1#2) goto line::@1
  to:line::@return
line::@return: scope:[line]  from line::@1
  return 
  to:@return
@end: scope:[]  from @3

Culled Empty Block (label) @3
Culled Empty Block (label) main::@2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call line param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call line param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
line: scope:[line]  from main main::@1
  (byte) line::x1#3 ← phi( main/(const byte) line::x1#0 main::@1/(const byte) line::x1#1 )
  (byte*) screen#14 ← phi( main/(const byte*) screen#0 main::@1/(byte*) screen#1 )
  (byte) line::x#0 ← phi( main/(const byte) line::x0#0 main::@1/(const byte) line::x0#1 )
  to:line::@1
line::@1: scope:[line]  from line line::@1
  (byte) line::x1#2 ← phi( line/(byte) line::x1#3 )
  (byte*) screen#11 ← phi( line/(byte*) screen#14 line::@1/(byte*) screen#1 )
  (byte) line::x#2 ← phi( line/(byte) line::x#0 line::@1/(byte) line::x#1 )
  *((byte*) screen#11) ← (byte) line::x#2
  (byte*) screen#1 ← ++ (byte*) screen#11
  (byte) line::x#1 ← ++ (byte) line::x#2
  if((byte) line::x#1<(byte) line::x1#2) goto line::@1
  to:line::@return
line::@return: scope:[line]  from line::@1
  return 
  to:@return
@end: scope:[]  from @begin

Alias (byte) line::x1#2 = (byte) line::x1#3 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call line param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call line param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
line: scope:[line]  from main main::@1
  (byte) line::x1#2 ← phi( main/(const byte) line::x1#0 main::@1/(const byte) line::x1#1 )
  (byte*) screen#14 ← phi( main/(const byte*) screen#0 main::@1/(byte*) screen#1 )
  (byte) line::x#0 ← phi( main/(const byte) line::x0#0 main::@1/(const byte) line::x0#1 )
  to:line::@1
line::@1: scope:[line]  from line line::@1
  (byte*) screen#11 ← phi( line/(byte*) screen#14 line::@1/(byte*) screen#1 )
  (byte) line::x#2 ← phi( line/(byte) line::x#0 line::@1/(byte) line::x#1 )
  *((byte*) screen#11) ← (byte) line::x#2
  (byte*) screen#1 ← ++ (byte*) screen#11
  (byte) line::x#1 ← ++ (byte) line::x#2
  if((byte) line::x#1<(byte) line::x1#2) goto line::@1
  to:line::@return
line::@return: scope:[line]  from line::@1
  return 
  to:@return
@end: scope:[]  from @begin

Constant inlined screen#0 = (word) 1024
Constant inlined line::x1#0 = (byte) 2
Constant inlined line::x1#1 = (byte) 5
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call line param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call line param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
line: scope:[line]  from main main::@1
  (byte) line::x1#2 ← phi( main/(byte) 2 main::@1/(byte) 5 )
  (byte*) screen#14 ← phi( main/(word) 1024 main::@1/(byte*) screen#1 )
  (byte) line::x#0 ← phi( main/(const byte) line::x0#0 main::@1/(const byte) line::x0#1 )
  to:line::@1
line::@1: scope:[line]  from line line::@1
  (byte*) screen#11 ← phi( line/(byte*) screen#14 line::@1/(byte*) screen#1 )
  (byte) line::x#2 ← phi( line/(byte) line::x#0 line::@1/(byte) line::x#1 )
  *((byte*) screen#11) ← (byte) line::x#2
  (byte*) screen#1 ← ++ (byte*) screen#11
  (byte) line::x#1 ← ++ (byte) line::x#2
  if((byte) line::x#1<(byte) line::x1#2) goto line::@1
  to:line::@return
line::@return: scope:[line]  from line::@1
  return 
  to:@return
@end: scope:[]  from @begin

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(void()) line((byte) line::x0 , (byte) line::x1)
(label) line::@1
(label) line::@return
(byte) line::x
(byte) line::x#0
(byte) line::x#1
(byte) line::x#2
(byte) line::x0
(const byte) line::x0#0 = (byte) 1
(const byte) line::x0#1 = (byte) 3
(byte) line::x1
(byte) line::x1#2
(void()) main()
(label) main::@1
(label) main::@return
(byte*) screen
(byte*) screen#1
(byte*) screen#11
(byte*) screen#14

Block Sequence Planned @begin @end main main::@1 main::@return line line::@1 line::@return 
Added new block during phi lifting line::@3(between line::@1 and line::@1)
Block Sequence Planned @begin @end main main::@1 main::@return line line::@1 line::@return line::@3 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  call main param-assignment
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  call line param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte*~) screen#15 ← (byte*) screen#1
  call line param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
line: scope:[line]  from main main::@1
  (byte) line::x1#2 ← phi( main/(byte) 2 main::@1/(byte) 5 )
  (byte*) screen#14 ← phi( main/(word) 1024 main::@1/(byte*~) screen#15 )
  (byte) line::x#0 ← phi( main/(const byte) line::x0#0 main::@1/(const byte) line::x0#1 )
  (byte~) line::x#3 ← (byte) line::x#0
  (byte*~) screen#16 ← (byte*) screen#14
  to:line::@1
line::@1: scope:[line]  from line line::@3
  (byte*) screen#11 ← phi( line/(byte*~) screen#16 line::@3/(byte*~) screen#17 )
  (byte) line::x#2 ← phi( line/(byte~) line::x#3 line::@3/(byte~) line::x#4 )
  *((byte*) screen#11) ← (byte) line::x#2
  (byte*) screen#1 ← ++ (byte*) screen#11
  (byte) line::x#1 ← ++ (byte) line::x#2
  if((byte) line::x#1<(byte) line::x1#2) goto line::@3
  to:line::@return
line::@return: scope:[line]  from line::@1
  return 
  to:@return
line::@3: scope:[line]  from line::@1
  (byte~) line::x#4 ← (byte) line::x#1
  (byte*~) screen#17 ← (byte*) screen#1
  to:line::@1

Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to 0:main 
Calls in [main] to 2:line 4:line 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  [1] phi() [ ]
  [2] call line param-assignment [ screen#1 ]
  to:main::@1
main::@1: scope:[main]  from main
  [3] (byte*~) screen#15 ← (byte*) screen#1 [ screen#15 ]
  [4] call line param-assignment [ ]
  to:main::@return
main::@return: scope:[main]  from main::@1
  [5] return  [ ]
  to:@return
line: scope:[line]  from main main::@1
  [6] (byte) line::x1#2 ← phi( main/(byte) 2 main::@1/(byte) 5 ) [ line::x#0 screen#14 line::x1#2 ]
  [6] (byte*) screen#14 ← phi( main/(word) 1024 main::@1/(byte*~) screen#15 ) [ line::x#0 screen#14 line::x1#2 ]
  [6] (byte) line::x#0 ← phi( main/(const byte) line::x0#0 main::@1/(const byte) line::x0#1 ) [ line::x#0 screen#14 line::x1#2 ]
  [7] (byte~) line::x#3 ← (byte) line::x#0 [ screen#14 line::x1#2 line::x#3 ]
  [8] (byte*~) screen#16 ← (byte*) screen#14 [ line::x1#2 line::x#3 screen#16 ]
  to:line::@1
line::@1: scope:[line]  from line line::@3
  [9] (byte*) screen#11 ← phi( line/(byte*~) screen#16 line::@3/(byte*~) screen#17 ) [ line::x1#2 line::x#2 screen#11 ]
  [9] (byte) line::x#2 ← phi( line/(byte~) line::x#3 line::@3/(byte~) line::x#4 ) [ line::x1#2 line::x#2 screen#11 ]
  [10] *((byte*) screen#11) ← (byte) line::x#2 [ line::x1#2 line::x#2 screen#11 ]
  [11] (byte*) screen#1 ← ++ (byte*) screen#11 [ screen#1 line::x1#2 line::x#2 ]
  [12] (byte) line::x#1 ← ++ (byte) line::x#2 [ screen#1 line::x1#2 line::x#1 ]
  [13] if((byte) line::x#1<(byte) line::x1#2) goto line::@3 [ screen#1 line::x1#2 line::x#1 ]
  to:line::@return
line::@return: scope:[line]  from line::@1
  [14] return  [ screen#1 ]
  to:@return
line::@3: scope:[line]  from line::@1
  [15] (byte~) line::x#4 ← (byte) line::x#1 [ screen#1 line::x1#2 line::x#4 ]
  [16] (byte*~) screen#17 ← (byte*) screen#1 [ line::x1#2 line::x#4 screen#17 ]
  to:line::@1

Created 5 initial phi equivalence classes
Coalesced [3] screen#15 ← screen#1
Coalesced [7] line::x#3 ← line::x#0
Coalesced [8] screen#16 ← screen#14
Coalesced [15] line::x#4 ← line::x#1
Coalesced (already) [16] screen#17 ← screen#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) line::@3
Block Sequence Planned @begin @end main main::@1 main::@return line line::@1 line::@return 
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  [1] phi() [ ]
  [2] call line param-assignment [ ]
  to:main::@1
main::@1: scope:[main]  from main
  [3] call line param-assignment [ ]
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return  [ ]
  to:@return
line: scope:[line]  from main main::@1
  [5] (byte) line::x1#2 ← phi( main/(byte) 2 main::@1/(byte) 5 ) [ line::x#0 screen#14 line::x1#2 ]
  [5] (byte*) screen#14 ← phi( main/(word) 1024 main::@1/(byte*) screen#1 ) [ line::x#0 screen#14 line::x1#2 ]
  [5] (byte) line::x#0 ← phi( main/(const byte) line::x0#0 main::@1/(const byte) line::x0#1 ) [ line::x#0 screen#14 line::x1#2 ]
  to:line::@1
line::@1: scope:[line]  from line line::@1
  [6] (byte*) screen#11 ← phi( line/(byte*) screen#14 line::@1/(byte*) screen#1 ) [ line::x1#2 line::x#2 screen#11 ]
  [6] (byte) line::x#2 ← phi( line/(byte) line::x#0 line::@1/(byte) line::x#1 ) [ line::x1#2 line::x#2 screen#11 ]
  [7] *((byte*) screen#11) ← (byte) line::x#2 [ line::x1#2 line::x#2 screen#11 ]
  [8] (byte*) screen#1 ← ++ (byte*) screen#11 [ line::x1#2 line::x#2 screen#1 ]
  [9] (byte) line::x#1 ← ++ (byte) line::x#2 [ line::x1#2 line::x#1 screen#1 ]
  [10] if((byte) line::x#1<(byte) line::x1#2) goto line::@1 [ line::x1#2 line::x#1 screen#1 ]
  to:line::@return
line::@return: scope:[line]  from line::@1
  [11] return  [ ]
  to:@return

DOMINATORS
@begin dominated by  @begin 
@end dominated by  @end @begin 
main dominated by  @begin main 
main::@1 dominated by  @begin main::@1 main 
main::@return dominated by  main::@return @begin main::@1 main 
line dominated by  @begin line main 
line::@1 dominated by  @begin line::@1 line main 
line::@return dominated by  @begin line::@1 line line::@return main 

Found back edge: Loop head: line::@1 tails: line::@1 blocks: null
Populated: Loop head: line::@1 tails: line::@1 blocks: line::@1 
NATURAL LOOPS
Loop head: line::@1 tails: line::@1 blocks: line::@1 

Found 0 loops in scope []
Found 0 loops in scope [main]
Found 1 loops in scope [line]
  Loop head: line::@1 tails: line::@1 blocks: line::@1 
NATURAL LOOPS WITH DEPTH
Loop head: line::@1 tails: line::@1 blocks: line::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(void()) line((byte) line::x0 , (byte) line::x1)
(byte) line::x
(byte) line::x#0 2.0
(byte) line::x#1 16.5
(byte) line::x#2 11.666666666666666
(byte) line::x0
(byte) line::x1
(byte) line::x1#2 1.8333333333333333
(void()) main()
(byte*) screen
(byte*) screen#1 8.0
(byte*) screen#11 17.5
(byte*) screen#14 4.0

Initial phi equivalence classes
[ line::x1#2 ]
[ line::x#2 line::x#0 line::x#1 ]
[ screen#11 screen#14 screen#1 ]
Complete equivalence classes
[ line::x1#2 ]
[ line::x#2 line::x#0 line::x#1 ]
[ screen#11 screen#14 screen#1 ]
Allocated zp ZP_BYTE:2 [ line::x1#2 ]
Allocated zp ZP_BYTE:3 [ line::x#2 line::x#0 line::x#1 ]
Allocated zp ZP_PTR_BYTE:4 [ screen#11 screen#14 screen#1 ]
INITIAL ASM
//SEG0 Global Constants & labels
  .label screen = 4
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main [phi:@begin->main]
main_from_bbegin:
  jsr main
  jmp bend
//SEG4 @end
bend:
//SEG5 main
main: {
  //SEG6 [2] call line param-assignment [ ]
  //SEG7 [5] phi from main to line [phi:main->line]
  line_from_main:
  //SEG8 [5] phi (byte) line::x1#2 = (byte) 2 [phi:main->line#0] -- zpby1=coby1 
    lda #2
    sta line.x1
  //SEG9 [5] phi (byte*) screen#14 = (word) 1024 [phi:main->line#1] -- zpptrby1=cowo1 
    lda #<$400
    sta screen
    lda #>$400
    sta screen+1
  //SEG10 [5] phi (byte) line::x#0 = (const byte) line::x0#0 [phi:main->line#2] -- zpby1=coby1 
    lda #line.x0
    sta line.x
    jsr line
    jmp b1
  //SEG11 main::@1
  b1:
  //SEG12 [3] call line param-assignment [ ]
  //SEG13 [5] phi from main::@1 to line [phi:main::@1->line]
  line_from_b1:
  //SEG14 [5] phi (byte) line::x1#2 = (byte) 5 [phi:main::@1->line#0] -- zpby1=coby1 
    lda #5
    sta line.x1
  //SEG15 [5] phi (byte*) screen#14 = (byte*) screen#1 [phi:main::@1->line#1] -- register_copy 
  //SEG16 [5] phi (byte) line::x#0 = (const byte) line::x0#1 [phi:main::@1->line#2] -- zpby1=coby1 
    lda #line.x0_1
    sta line.x
    jsr line
    jmp breturn
  //SEG17 main::@return
  breturn:
  //SEG18 [4] return  [ ]
    rts
}
//SEG19 line
line: {
    .const x0 = 1
    .const x0_1 = 3
    .label x = 3
    .label x1 = 2
  //SEG20 [6] phi from line line::@1 to line::@1 [phi:line/line::@1->line::@1]
  b1_from_line:
  b1_from_b1:
  //SEG21 [6] phi (byte*) screen#11 = (byte*) screen#14 [phi:line/line::@1->line::@1#0] -- register_copy 
  //SEG22 [6] phi (byte) line::x#2 = (byte) line::x#0 [phi:line/line::@1->line::@1#1] -- register_copy 
    jmp b1
  //SEG23 line::@1
  b1:
  //SEG24 [7] *((byte*) screen#11) ← (byte) line::x#2 [ line::x1#2 line::x#2 screen#11 ] -- _star_zpptrby1=zpby1 
    ldy #0
    lda x
    sta (screen),y
  //SEG25 [8] (byte*) screen#1 ← ++ (byte*) screen#11 [ line::x1#2 line::x#2 screen#1 ] -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG26 [9] (byte) line::x#1 ← ++ (byte) line::x#2 [ line::x1#2 line::x#1 screen#1 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG27 [10] if((byte) line::x#1<(byte) line::x1#2) goto line::@1 [ line::x1#2 line::x#1 screen#1 ] -- zpby1_lt_zpby2_then_la1 
    lda x
    cmp x1
    bcc b1_from_b1
    jmp breturn
  //SEG28 line::@return
  breturn:
  //SEG29 [11] return  [ ]
    rts
}

Statement [7] *((byte*) screen#11) ← (byte) line::x#2 [ line::x1#2 line::x#2 screen#11 ] always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ line::x1#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ line::x#2 line::x#0 line::x#1 ]
Statement [7] *((byte*) screen#11) ← (byte) line::x#2 [ line::x1#2 line::x#2 screen#11 ] always clobbers reg byte y 
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ line::x1#2 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , 
Potential registers zp ZP_BYTE:3 [ line::x#2 line::x#0 line::x#1 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , 
Potential registers zp ZP_PTR_BYTE:4 [ screen#11 screen#14 screen#1 ] : zp ZP_PTR_BYTE:4 , 

REGISTER UPLIFT SCOPES
Uplift Scope [line] 30.17: zp ZP_BYTE:3 [ line::x#2 line::x#0 line::x#1 ] 1.83: zp ZP_BYTE:2 [ line::x1#2 ] 
Uplift Scope [] 29.5: zp ZP_PTR_BYTE:4 [ screen#11 screen#14 screen#1 ] 
Uplift Scope [main] 

Uplifting [line] best 423 combination reg byte x [ line::x#2 line::x#0 line::x#1 ] zp ZP_BYTE:2 [ line::x1#2 ] 
Uplifting [] best 423 combination zp ZP_PTR_BYTE:4 [ screen#11 screen#14 screen#1 ] 
Uplifting [main] best 423 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ line::x1#2 ]
Uplifting [line] best 423 combination zp ZP_BYTE:2 [ line::x1#2 ] 
Allocated (was zp ZP_PTR_BYTE:4) zp ZP_PTR_BYTE:3 [ screen#11 screen#14 screen#1 ]
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .label screen = 3
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main [phi:@begin->main]
main_from_bbegin:
  jsr main
//SEG4 @end
bend:
//SEG5 main
main: {
  //SEG6 [2] call line param-assignment [ ]
  //SEG7 [5] phi from main to line [phi:main->line]
  line_from_main:
  //SEG8 [5] phi (byte) line::x1#2 = (byte) 2 [phi:main->line#0] -- zpby1=coby1 
    lda #2
    sta line.x1
  //SEG9 [5] phi (byte*) screen#14 = (word) 1024 [phi:main->line#1] -- zpptrby1=cowo1 
    lda #<$400
    sta screen
    lda #>$400
    sta screen+1
  //SEG10 [5] phi (byte) line::x#0 = (const byte) line::x0#0 [phi:main->line#2] -- xby=coby1 
    ldx #line.x0
    jsr line
  //SEG11 main::@1
  b1:
  //SEG12 [3] call line param-assignment [ ]
  //SEG13 [5] phi from main::@1 to line [phi:main::@1->line]
  line_from_b1:
  //SEG14 [5] phi (byte) line::x1#2 = (byte) 5 [phi:main::@1->line#0] -- zpby1=coby1 
    lda #5
    sta line.x1
  //SEG15 [5] phi (byte*) screen#14 = (byte*) screen#1 [phi:main::@1->line#1] -- register_copy 
  //SEG16 [5] phi (byte) line::x#0 = (const byte) line::x0#1 [phi:main::@1->line#2] -- xby=coby1 
    ldx #line.x0_1
    jsr line
  //SEG17 main::@return
  breturn:
  //SEG18 [4] return  [ ]
    rts
}
//SEG19 line
line: {
    .const x0 = 1
    .const x0_1 = 3
    .label x1 = 2
  //SEG20 [6] phi from line line::@1 to line::@1 [phi:line/line::@1->line::@1]
  b1_from_line:
  b1_from_b1:
  //SEG21 [6] phi (byte*) screen#11 = (byte*) screen#14 [phi:line/line::@1->line::@1#0] -- register_copy 
  //SEG22 [6] phi (byte) line::x#2 = (byte) line::x#0 [phi:line/line::@1->line::@1#1] -- register_copy 
  //SEG23 line::@1
  b1:
  //SEG24 [7] *((byte*) screen#11) ← (byte) line::x#2 [ line::x1#2 line::x#2 screen#11 ] -- _star_zpptrby1=xby 
    txa
    ldy #0
    sta (screen),y
  //SEG25 [8] (byte*) screen#1 ← ++ (byte*) screen#11 [ line::x1#2 line::x#2 screen#1 ] -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG26 [9] (byte) line::x#1 ← ++ (byte) line::x#2 [ line::x1#2 line::x#1 screen#1 ] -- xby=_inc_xby 
    inx
  //SEG27 [10] if((byte) line::x#1<(byte) line::x1#2) goto line::@1 [ line::x1#2 line::x#1 screen#1 ] -- xby_lt_zpby1_then_la1 
    cpx x1
    bcc b1_from_b1
  //SEG28 line::@return
  breturn:
  //SEG29 [11] return  [ ]
    rts
}

Replacing label b1_from_b1 with b1
Removing instruction main_from_bbegin:
Removing instruction line_from_b1:
Removing instruction b1_from_line:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .label screen = 3
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main [phi:@begin->main]
  jsr main
//SEG4 @end
bend:
//SEG5 main
main: {
  //SEG6 [2] call line param-assignment [ ]
  //SEG7 [5] phi from main to line [phi:main->line]
  line_from_main:
  //SEG8 [5] phi (byte) line::x1#2 = (byte) 2 [phi:main->line#0] -- zpby1=coby1 
    lda #2
    sta line.x1
  //SEG9 [5] phi (byte*) screen#14 = (word) 1024 [phi:main->line#1] -- zpptrby1=cowo1 
    lda #<$400
    sta screen
    lda #>$400
    sta screen+1
  //SEG10 [5] phi (byte) line::x#0 = (const byte) line::x0#0 [phi:main->line#2] -- xby=coby1 
    ldx #line.x0
    jsr line
  //SEG11 main::@1
  b1:
  //SEG12 [3] call line param-assignment [ ]
  //SEG13 [5] phi from main::@1 to line [phi:main::@1->line]
  //SEG14 [5] phi (byte) line::x1#2 = (byte) 5 [phi:main::@1->line#0] -- zpby1=coby1 
    lda #5
    sta line.x1
  //SEG15 [5] phi (byte*) screen#14 = (byte*) screen#1 [phi:main::@1->line#1] -- register_copy 
  //SEG16 [5] phi (byte) line::x#0 = (const byte) line::x0#1 [phi:main::@1->line#2] -- xby=coby1 
    ldx #line.x0_1
    jsr line
  //SEG17 main::@return
  breturn:
  //SEG18 [4] return  [ ]
    rts
}
//SEG19 line
line: {
    .const x0 = 1
    .const x0_1 = 3
    .label x1 = 2
  //SEG20 [6] phi from line line::@1 to line::@1 [phi:line/line::@1->line::@1]
  //SEG21 [6] phi (byte*) screen#11 = (byte*) screen#14 [phi:line/line::@1->line::@1#0] -- register_copy 
  //SEG22 [6] phi (byte) line::x#2 = (byte) line::x#0 [phi:line/line::@1->line::@1#1] -- register_copy 
  //SEG23 line::@1
  b1:
  //SEG24 [7] *((byte*) screen#11) ← (byte) line::x#2 [ line::x1#2 line::x#2 screen#11 ] -- _star_zpptrby1=xby 
    txa
    ldy #0
    sta (screen),y
  //SEG25 [8] (byte*) screen#1 ← ++ (byte*) screen#11 [ line::x1#2 line::x#2 screen#1 ] -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG26 [9] (byte) line::x#1 ← ++ (byte) line::x#2 [ line::x1#2 line::x#1 screen#1 ] -- xby=_inc_xby 
    inx
  //SEG27 [10] if((byte) line::x#1<(byte) line::x1#2) goto line::@1 [ line::x1#2 line::x#1 screen#1 ] -- xby_lt_zpby1_then_la1 
    cpx x1
    bcc b1
  //SEG28 line::@return
  breturn:
  //SEG29 [11] return  [ ]
    rts
}

Removing instruction bbegin:
Removing instruction bend:
Removing instruction line_from_main:
Removing instruction b1:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .label screen = 3
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main [phi:@begin->main]
  jsr main
//SEG4 @end
//SEG5 main
main: {
  //SEG6 [2] call line param-assignment [ ]
  //SEG7 [5] phi from main to line [phi:main->line]
  //SEG8 [5] phi (byte) line::x1#2 = (byte) 2 [phi:main->line#0] -- zpby1=coby1 
    lda #2
    sta line.x1
  //SEG9 [5] phi (byte*) screen#14 = (word) 1024 [phi:main->line#1] -- zpptrby1=cowo1 
    lda #<$400
    sta screen
    lda #>$400
    sta screen+1
  //SEG10 [5] phi (byte) line::x#0 = (const byte) line::x0#0 [phi:main->line#2] -- xby=coby1 
    ldx #line.x0
    jsr line
  //SEG11 main::@1
  //SEG12 [3] call line param-assignment [ ]
  //SEG13 [5] phi from main::@1 to line [phi:main::@1->line]
  //SEG14 [5] phi (byte) line::x1#2 = (byte) 5 [phi:main::@1->line#0] -- zpby1=coby1 
    lda #5
    sta line.x1
  //SEG15 [5] phi (byte*) screen#14 = (byte*) screen#1 [phi:main::@1->line#1] -- register_copy 
  //SEG16 [5] phi (byte) line::x#0 = (const byte) line::x0#1 [phi:main::@1->line#2] -- xby=coby1 
    ldx #line.x0_1
    jsr line
  //SEG17 main::@return
  //SEG18 [4] return  [ ]
    rts
}
//SEG19 line
line: {
    .const x0 = 1
    .const x0_1 = 3
    .label x1 = 2
  //SEG20 [6] phi from line line::@1 to line::@1 [phi:line/line::@1->line::@1]
  //SEG21 [6] phi (byte*) screen#11 = (byte*) screen#14 [phi:line/line::@1->line::@1#0] -- register_copy 
  //SEG22 [6] phi (byte) line::x#2 = (byte) line::x#0 [phi:line/line::@1->line::@1#1] -- register_copy 
  //SEG23 line::@1
  b1:
  //SEG24 [7] *((byte*) screen#11) ← (byte) line::x#2 [ line::x1#2 line::x#2 screen#11 ] -- _star_zpptrby1=xby 
    txa
    ldy #0
    sta (screen),y
  //SEG25 [8] (byte*) screen#1 ← ++ (byte*) screen#11 [ line::x1#2 line::x#2 screen#1 ] -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG26 [9] (byte) line::x#1 ← ++ (byte) line::x#2 [ line::x1#2 line::x#1 screen#1 ] -- xby=_inc_xby 
    inx
  //SEG27 [10] if((byte) line::x#1<(byte) line::x1#2) goto line::@1 [ line::x1#2 line::x#1 screen#1 ] -- xby_lt_zpby1_then_la1 
    cpx x1
    bcc b1
  //SEG28 line::@return
  //SEG29 [11] return  [ ]
    rts
}

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(void()) line((byte) line::x0 , (byte) line::x1)
(label) line::@1
(label) line::@return
(byte) line::x
(byte) line::x#0 reg byte x 2.0
(byte) line::x#1 reg byte x 16.5
(byte) line::x#2 reg byte x 11.666666666666666
(byte) line::x0
(const byte) line::x0#0 x0 = (byte) 1
(const byte) line::x0#1 x0#1 = (byte) 3
(byte) line::x1
(byte) line::x1#2 x1 zp ZP_BYTE:2 1.8333333333333333
(void()) main()
(label) main::@1
(label) main::@return
(byte*) screen
(byte*) screen#1 screen zp ZP_PTR_BYTE:3 8.0
(byte*) screen#11 screen zp ZP_PTR_BYTE:3 17.5
(byte*) screen#14 screen zp ZP_PTR_BYTE:3 4.0

zp ZP_BYTE:2 [ line::x1#2 ]
reg byte x [ line::x#2 line::x#0 line::x#1 ]
zp ZP_PTR_BYTE:3 [ screen#11 screen#14 screen#1 ]

FINAL CODE
//SEG0 Global Constants & labels
  .label screen = 3
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main [phi:@begin->main]
  jsr main
//SEG4 @end
//SEG5 main
main: {
  //SEG6 [2] call line param-assignment [ ]
  //SEG7 [5] phi from main to line [phi:main->line]
  //SEG8 [5] phi (byte) line::x1#2 = (byte) 2 [phi:main->line#0] -- zpby1=coby1 
    lda #2
    sta line.x1
  //SEG9 [5] phi (byte*) screen#14 = (word) 1024 [phi:main->line#1] -- zpptrby1=cowo1 
    lda #<$400
    sta screen
    lda #>$400
    sta screen+1
  //SEG10 [5] phi (byte) line::x#0 = (const byte) line::x0#0 [phi:main->line#2] -- xby=coby1 
    ldx #line.x0
    jsr line
  //SEG11 main::@1
  //SEG12 [3] call line param-assignment [ ]
  //SEG13 [5] phi from main::@1 to line [phi:main::@1->line]
  //SEG14 [5] phi (byte) line::x1#2 = (byte) 5 [phi:main::@1->line#0] -- zpby1=coby1 
    lda #5
    sta line.x1
  //SEG15 [5] phi (byte*) screen#14 = (byte*) screen#1 [phi:main::@1->line#1] -- register_copy 
  //SEG16 [5] phi (byte) line::x#0 = (const byte) line::x0#1 [phi:main::@1->line#2] -- xby=coby1 
    ldx #line.x0_1
    jsr line
  //SEG17 main::@return
  //SEG18 [4] return  [ ]
    rts
}
//SEG19 line
line: {
    .const x0 = 1
    .const x0_1 = 3
    .label x1 = 2
  //SEG20 [6] phi from line line::@1 to line::@1 [phi:line/line::@1->line::@1]
  //SEG21 [6] phi (byte*) screen#11 = (byte*) screen#14 [phi:line/line::@1->line::@1#0] -- register_copy 
  //SEG22 [6] phi (byte) line::x#2 = (byte) line::x#0 [phi:line/line::@1->line::@1#1] -- register_copy 
  //SEG23 line::@1
  b1:
  //SEG24 [7] *((byte*) screen#11) ← (byte) line::x#2 [ line::x1#2 line::x#2 screen#11 ] -- _star_zpptrby1=xby 
    txa
    ldy #0
    sta (screen),y
  //SEG25 [8] (byte*) screen#1 ← ++ (byte*) screen#11 [ line::x1#2 line::x#2 screen#1 ] -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG26 [9] (byte) line::x#1 ← ++ (byte) line::x#2 [ line::x1#2 line::x#1 screen#1 ] -- xby=_inc_xby 
    inx
  //SEG27 [10] if((byte) line::x#1<(byte) line::x1#2) goto line::@1 [ line::x1#2 line::x#1 screen#1 ] -- xby_lt_zpby1_then_la1 
    cpx x1
    bcc b1
  //SEG28 line::@return
  //SEG29 [11] return  [ ]
    rts
}

