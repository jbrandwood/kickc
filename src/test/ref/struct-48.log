Fixing struct type size struct deviceslot to 258
Fixing struct type size struct deviceslotsA to 516
Fixing struct type size struct deviceslot to 258
Fixing struct type size struct deviceslot to 258
Fixing struct type size struct deviceslotsA to 516
Fixing struct type SIZE_OF struct deviceslot to 258
Fixing struct type SIZE_OF struct deviceslotsA to 516
Fixing struct type SIZE_OF struct deviceslot to 258
Fixing struct type SIZE_OF struct deviceslotsA to 516
Setting struct to load/store in variable affected by address-of main::slotsA = &main::ssA
Removing C-classic struct-unwound assignment main::s1 = struct-unwound {*(&main::s1)}
Removing C-classic struct-unwound assignment main::s2 = struct-unwound {*(&main::s2)}
Removing C-classic struct-unwound assignment main::ssA = struct-unwound {*(&main::ssA)}
Removing C-classic struct-unwound assignment main::ds = struct-unwound {*(&main::ds)}

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  *(&main::s1) = memcpy(*(&$0), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT)
  *(&main::s2) = memcpy(*(&$1), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT)
  *(&main::ssA) = memset(struct deviceslotsA, SIZEOF_STRUCT_DEVICESLOTSA)
  main::$2 = 0 * SIZEOF_STRUCT_DEVICESLOT
  main::$8 = (struct deviceslot*)main::slotsA
  main::$5 = main::$8 + OFFSET_STRUCT_DEVICESLOTSA_SLOT
  main::$5[main::$2] = memcpy(*(&main::s1), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT)
  main::$3 = 1 * SIZEOF_STRUCT_DEVICESLOT
  main::$9 = (struct deviceslot*)main::slotsA
  main::$6 = main::$9 + OFFSET_STRUCT_DEVICESLOTSA_SLOT
  main::$6[main::$3] = memcpy(*(&main::s2), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT)
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::$4 = main::i#2 * SIZEOF_STRUCT_DEVICESLOT
  main::$10 = (struct deviceslot*)main::slotsA
  main::$7 = main::$10 + OFFSET_STRUCT_DEVICESLOTSA_SLOT
  *(&main::ds) = memcpy(main::$7[main::$4], struct deviceslot, SIZEOF_STRUCT_DEVICESLOT)
  main::$0 = OUT + main::i#2
  *main::$0 = *((byte*)&main::ds+OFFSET_STRUCT_DEVICESLOT_MODE)
  main::i#1 = main::i#2 + rangenext(0,1)
  main::$1 = main::i#1 != rangelast(0,1)
  if(main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant struct deviceslot $0 = { hostSlot: 'A', mode: 'R', file: "f1" }
constant struct deviceslot $1 = { hostSlot: 'B', mode: 'W', file: "f2" }
constant byte OFFSET_STRUCT_DEVICESLOTSA_SLOT = 0
constant byte OFFSET_STRUCT_DEVICESLOT_MODE = 1
constant byte* const OUT = (byte*)$8000
constant word SIZEOF_STRUCT_DEVICESLOT = $102
constant word SIZEOF_STRUCT_DEVICESLOTSA = $204
void __start()
void main()
byte*~ main::$0
bool~ main::$1
struct deviceslot*~ main::$10
number~ main::$2
number~ main::$3
word~ main::$4
struct deviceslot*~ main::$5
struct deviceslot*~ main::$6
struct deviceslot*~ main::$7
struct deviceslot*~ main::$8
struct deviceslot*~ main::$9
struct deviceslot main::ds loadstore
word main::i
word main::i#0
word main::i#1
word main::i#2
struct deviceslot main::s1 loadstore
struct deviceslot main::s2 loadstore
constant struct deviceslotsA* main::slotsA = &main::ssA
volatile struct deviceslotsA main::ssA loadstore

Adding number conversion cast (unumber) 0 in main::$2 = 0 * SIZEOF_STRUCT_DEVICESLOT
Adding number conversion cast (unumber) main::$2 in main::$2 = (unumber)0 * SIZEOF_STRUCT_DEVICESLOT
Adding number conversion cast (unumber) 1 in main::$3 = 1 * SIZEOF_STRUCT_DEVICESLOT
Adding number conversion cast (unumber) main::$3 in main::$3 = (unumber)1 * SIZEOF_STRUCT_DEVICESLOT
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 32768
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to word in main::$2 = 0 * SIZEOF_STRUCT_DEVICESLOT
Inferred type updated to word in main::$3 = 1 * SIZEOF_STRUCT_DEVICESLOT
Simple Condition main::$1 [21] if(main::i#1!=rangelast(0,1)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [3] main::$2 = 0 * SIZEOF_STRUCT_DEVICESLOT
Constant right-side identified [4] main::$8 = (struct deviceslot*)main::slotsA
Constant right-side identified [7] main::$3 = 1 * SIZEOF_STRUCT_DEVICESLOT
Constant right-side identified [8] main::$9 = (struct deviceslot*)main::slotsA
Constant right-side identified [14] main::$10 = (struct deviceslot*)main::slotsA
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$2 = 0*SIZEOF_STRUCT_DEVICESLOT
Constant main::$8 = (struct deviceslot*)main::slotsA
Constant main::$3 = 1*SIZEOF_STRUCT_DEVICESLOT
Constant main::$9 = (struct deviceslot*)main::slotsA
Constant main::i#0 = 0
Constant main::$10 = (struct deviceslot*)main::slotsA
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [19] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [21] if(main::i#1!=rangelast(0,1)) goto main::@1 to 2
De-inlining pointer[w] to *(pointer+w)   [6] main::$5[main::$2] = memcpy(*(&main::s1), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT)
De-inlining pointer[w] to *(pointer+w)   [10] main::$6[main::$3] = memcpy(*(&main::s2), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT)
De-inlining pointer[w] to *(pointer+w)   [16] *(&main::ds) = memcpy(main::$7[main::$4], struct deviceslot, SIZEOF_STRUCT_DEVICESLOT)
Successful SSA optimization Pass2DeInlineWordDerefIdx
Simplifying constant evaluating to zero 0*SIZEOF_STRUCT_DEVICESLOT in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::$8 in [5] main::$5 = main::$8 + OFFSET_STRUCT_DEVICESLOTSA_SLOT
Simplifying expression containing zero main::$5 in main::$11 = main::$5 + main::$2
Simplifying expression containing zero main::$9 in [9] main::$6 = main::$9 + OFFSET_STRUCT_DEVICESLOTSA_SLOT
Simplifying expression containing zero main::$10 in [15] main::$7 = main::$10 + OFFSET_STRUCT_DEVICESLOTSA_SLOT
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant main::$2
Eliminating unused constant OFFSET_STRUCT_DEVICESLOTSA_SLOT
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 2 in [17] if(main::i#1!=2) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::$11 = main::$5 
Successful SSA optimization Pass2AliasElimination
Constant main::$11 = main::$8
Constant main::$6 = main::$9
Constant main::$7 = main::$10
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [4] main::$12 = main::$6 + main::$3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$12 = main::$6+main::$3
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift and addition[6] main::$4 = main::i#2 * SIZEOF_STRUCT_DEVICESLOT
Inlining constant with var siblings main::i#0
Constant inlined main::$12 = (struct deviceslot*)main::slotsA+1*SIZEOF_STRUCT_DEVICESLOT
Constant inlined main::i#0 = 0
Constant inlined main::$6 = (struct deviceslot*)main::slotsA
Constant inlined main::$3 = 1*SIZEOF_STRUCT_DEVICESLOT
Constant inlined main::$9 = (struct deviceslot*)main::slotsA
Constant inlined main::$10 = (struct deviceslot*)main::slotsA
Constant inlined main::$7 = (struct deviceslot*)main::slotsA
Constant inlined main::$8 = (struct deviceslot*)main::slotsA
Constant inlined main::$11 = (struct deviceslot*)main::slotsA
Successful SSA optimization Pass2ConstantInlining
Alias main::$4 = main::$16 
Successful SSA optimization Pass2AliasElimination
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting main::@2(between main::@1 and main::@1)
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [16] main::i#3 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@2

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *(&main::s1) = memcpy(*(&$0), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT)
  [1] *(&main::s2) = memcpy(*(&$1), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT)
  [2] *(&main::ssA) = memset(struct deviceslotsA, SIZEOF_STRUCT_DEVICESLOTSA)
  [3] *((struct deviceslot*)main::slotsA) = memcpy(*(&main::s1), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT)
  [4] *((struct deviceslot*)main::slotsA+1*SIZEOF_STRUCT_DEVICESLOT) = memcpy(*(&main::s2), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT)
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [6] main::$14 = main::i#2 << 7
  [7] main::$15 = main::$14 + main::i#2
  [8] main::$4 = main::$15 << 1
  [9] main::$13 = (struct deviceslot*)main::slotsA + main::$4
  [10] *(&main::ds) = memcpy(*main::$13, struct deviceslot, SIZEOF_STRUCT_DEVICESLOT)
  [11] main::$0 = OUT + main::i#2
  [12] *main::$0 = *((byte*)&main::ds+OFFSET_STRUCT_DEVICESLOT_MODE)
  [13] main::i#1 = ++ main::i#2
  [14] if(main::i#1!=2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [15] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte*~ main::$0 22.0
struct deviceslot*~ main::$13 11.0
word~ main::$14 22.0
word~ main::$15 22.0
word~ main::$4 22.0
struct deviceslot main::ds loadstore
word main::i
word main::i#1 16.5
word main::i#2 6.875
struct deviceslot main::s1 loadstore
struct deviceslot main::s2 loadstore
volatile struct deviceslotsA main::ssA loadstore

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$14 to live range equivalence class [ main::$14 ]
Added variable main::$15 to live range equivalence class [ main::$15 ]
Added variable main::$4 to live range equivalence class [ main::$4 ]
Added variable main::$13 to live range equivalence class [ main::$13 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::s1 to live range equivalence class [ main::s1 ]
Added variable main::s2 to live range equivalence class [ main::s2 ]
Added variable main::ssA to live range equivalence class [ main::ssA ]
Added variable main::ds to live range equivalence class [ main::ds ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$14 ]
[ main::$15 ]
[ main::$4 ]
[ main::$13 ]
[ main::$0 ]
[ main::s1 ]
[ main::s2 ]
[ main::ssA ]
[ main::ds ]
Allocated zp[2]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:4 [ main::$14 ]
Allocated zp[2]:6 [ main::$15 ]
Allocated zp[2]:8 [ main::$4 ]
Allocated zp[2]:10 [ main::$13 ]
Allocated zp[2]:12 [ main::$0 ]
Allocated mem[258] [ main::s1 ]
Allocated mem[258] [ main::s2 ]
Allocated mem[516] [ main::ssA ]
Allocated mem[258] [ main::ds ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *(&main::s1) = memcpy(*(&$0), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT) [ main::s2 main::ssA main::s1 main::ds ] (  [ main::s2 main::ssA main::s1 main::ds ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [1] *(&main::s2) = memcpy(*(&$1), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT) [ main::s2 main::ssA main::s1 main::ds ] (  [ main::s2 main::ssA main::s1 main::ds ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [2] *(&main::ssA) = memset(struct deviceslotsA, SIZEOF_STRUCT_DEVICESLOTSA) [ main::s2 main::s1 main::ds ] (  [ main::s2 main::s1 main::ds ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [3] *((struct deviceslot*)main::slotsA) = memcpy(*(&main::s1), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT) [ main::s2 main::ds ] (  [ main::s2 main::ds ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [4] *((struct deviceslot*)main::slotsA+1*SIZEOF_STRUCT_DEVICESLOT) = memcpy(*(&main::s2), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT) [ main::ds ] (  [ main::ds ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [6] main::$14 = main::i#2 << 7 [ main::i#2 main::$14 main::ds ] (  [ main::i#2 main::$14 main::ds ] { }  ) always clobbers reg byte a 
Statement [7] main::$15 = main::$14 + main::i#2 [ main::i#2 main::$15 main::ds ] (  [ main::i#2 main::$15 main::ds ] { }  ) always clobbers reg byte a 
Statement [8] main::$4 = main::$15 << 1 [ main::i#2 main::$4 main::ds ] (  [ main::i#2 main::$4 main::ds ] { }  ) always clobbers reg byte a 
Statement [9] main::$13 = (struct deviceslot*)main::slotsA + main::$4 [ main::i#2 main::$13 main::ds ] (  [ main::i#2 main::$13 main::ds ] { }  ) always clobbers reg byte a 
Statement [10] *(&main::ds) = memcpy(*main::$13, struct deviceslot, SIZEOF_STRUCT_DEVICESLOT) [ main::i#2 main::ds ] (  [ main::i#2 main::ds ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [11] main::$0 = OUT + main::i#2 [ main::i#2 main::ds main::$0 ] (  [ main::i#2 main::ds main::$0 ] { }  ) always clobbers reg byte a 
Statement [12] *main::$0 = *((byte*)&main::ds+OFFSET_STRUCT_DEVICESLOT_MODE) [ main::i#2 main::ds ] (  [ main::i#2 main::ds ] { }  ) always clobbers reg byte a reg byte y 
Statement [14] if(main::i#1!=2) goto main::@1 [ main::i#1 main::ds ] (  [ main::i#1 main::ds ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::i#2 main::i#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ main::$14 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ main::$15 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ main::$4 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ main::$13 ] : zp[2]:10 , 
Potential registers zp[2]:12 [ main::$0 ] : zp[2]:12 , 
Potential registers mem[258] [ main::s1 ] : mem[258] , 
Potential registers mem[258] [ main::s2 ] : mem[258] , 
Potential registers mem[516] [ main::ssA ] : mem[516] , 
Potential registers mem[258] [ main::ds ] : mem[258] , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 23.38: zp[2]:2 [ main::i#2 main::i#1 ] 22: zp[2]:4 [ main::$14 ] 22: zp[2]:6 [ main::$15 ] 22: zp[2]:8 [ main::$4 ] 22: zp[2]:12 [ main::$0 ] 11: zp[2]:10 [ main::$13 ] 0: mem[258] [ main::s1 ] 0: mem[258] [ main::s2 ] 0: mem[516] [ main::ssA ] 0: mem[258] [ main::ds ] 
Uplift Scope [deviceslot] 
Uplift Scope [deviceslotsA] 
Uplift Scope [] 

Uplifting [main] best 2437 combination zp[2]:2 [ main::i#2 main::i#1 ] zp[2]:4 [ main::$14 ] zp[2]:6 [ main::$15 ] zp[2]:8 [ main::$4 ] zp[2]:12 [ main::$0 ] zp[2]:10 [ main::$13 ] mem[258] [ main::s1 ] mem[258] [ main::s2 ] mem[516] [ main::ssA ] mem[258] [ main::ds ] 
Uplifting [deviceslot] best 2437 combination 
Uplifting [deviceslotsA] best 2437 combination 
Uplifting [] best 2437 combination 
Coalescing zero page register [ zp[2]:4 [ main::$14 ] ] with [ zp[2]:6 [ main::$15 ] ] - score: 1
Coalescing zero page register [ zp[2]:8 [ main::$4 ] ] with [ zp[2]:10 [ main::$13 ] ] - score: 1
Coalescing zero page register [ zp[2]:4 [ main::$14 main::$15 ] ] with [ zp[2]:8 [ main::$4 main::$13 ] ] - score: 1
Allocated (was zp[2]:12) zp[2]:6 [ main::$0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// https://gitlab.com/camelot/kickc/-/issues/590
// This version with +256 bytes struct
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-48.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_STRUCT_DEVICESLOT = $102
  .const SIZEOF_STRUCT_DEVICESLOTSA = $204
  .const OFFSET_STRUCT_DEVICESLOT_MODE = 1
  .label OUT = $8000
.segment Code
  // main
main: {
    .label slotsA = ssA
    .label __0 = 6
    .label __4 = 4
    .label i = 2
    .label __13 = 4
    .label __14 = 4
    .label __15 = 4
    // [0] *(&main::s1) = memcpy(*(&$0), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT) -- _deref_pssc1=_deref_pssc2_memcpy_vwuc3 
    lda #<@__0
    sta.z $fc
    lda #>@__0
    sta.z $fd
    lda #<s1
    sta.z $fe
    lda #>s1
    sta.z $ff
    ldy #0
    ldx #0
  !n:
    lda ($fc),y
    sta ($fe),y
    iny
    cpy #$ff
    bne !+
    inc.z $fd
    inc.z $ff
    inx
  !:
    cpy #<SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    cpx #>SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    // [1] *(&main::s2) = memcpy(*(&$1), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT) -- _deref_pssc1=_deref_pssc2_memcpy_vwuc3 
    lda #<__1
    sta.z $fc
    lda #>__1
    sta.z $fd
    lda #<s2
    sta.z $fe
    lda #>s2
    sta.z $ff
    ldy #0
    ldx #0
  !n:
    lda ($fc),y
    sta ($fe),y
    iny
    cpy #$ff
    bne !+
    inc.z $fd
    inc.z $ff
    inx
  !:
    cpy #<SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    cpx #>SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    // [2] *(&main::ssA) = memset(struct deviceslotsA, SIZEOF_STRUCT_DEVICESLOTSA) -- _deref_pssc1=_memset_vwuc2 
    lda #<ssA
    sta.z $fe
    lda #>ssA
    sta.z $ff
    lda #0
    tay
    tax
  !n:
    sta ($fe),y
    iny
    cpy #$ff
    bne !+
    inc.z $ff
    inx
  !:
    cpy #<SIZEOF_STRUCT_DEVICESLOTSA
    bne !n-
    cpx #>SIZEOF_STRUCT_DEVICESLOTSA
    bne !n-
    // [3] *((struct deviceslot*)main::slotsA) = memcpy(*(&main::s1), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT) -- _deref_pssc1=_deref_pssc2_memcpy_vwuc3 
    lda #<s1
    sta.z $fc
    lda #>s1
    sta.z $fd
    lda #<slotsA
    sta.z $fe
    lda #>slotsA
    sta.z $ff
    ldy #0
    ldx #0
  !n:
    lda ($fc),y
    sta ($fe),y
    iny
    cpy #$ff
    bne !+
    inc.z $fd
    inc.z $ff
    inx
  !:
    cpy #<SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    cpx #>SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    // [4] *((struct deviceslot*)main::slotsA+1*SIZEOF_STRUCT_DEVICESLOT) = memcpy(*(&main::s2), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT) -- _deref_pssc1=_deref_pssc2_memcpy_vwuc3 
    lda #<s2
    sta.z $fc
    lda #>s2
    sta.z $fd
    lda #<slotsA+1*SIZEOF_STRUCT_DEVICESLOT
    sta.z $fe
    lda #>slotsA+1*SIZEOF_STRUCT_DEVICESLOT
    sta.z $ff
    ldy #0
    ldx #0
  !n:
    lda ($fc),y
    sta ($fe),y
    iny
    cpy #$ff
    bne !+
    inc.z $fd
    inc.z $ff
    inx
  !:
    cpy #<SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    cpx #>SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi main::i#2 = 0 [phi:main->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [5] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] main::$14 = main::i#2 << 7 -- vwuz1=vwuz2_rol_7 
    lda.z i+1
    lsr
    lda.z i
    ror
    sta.z __14+1
    lda #0
    ror
    sta.z __14
    // [7] main::$15 = main::$14 + main::i#2 -- vwuz1=vwuz1_plus_vwuz2 
    clc
    lda.z __15
    adc.z i
    sta.z __15
    lda.z __15+1
    adc.z i+1
    sta.z __15+1
    // [8] main::$4 = main::$15 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z __4
    rol.z __4+1
    // [9] main::$13 = (struct deviceslot*)main::slotsA + main::$4 -- pssz1=pssc1_plus_vwuz1 
    lda.z __13
    clc
    adc #<slotsA
    sta.z __13
    lda.z __13+1
    adc #>slotsA
    sta.z __13+1
    // [10] *(&main::ds) = memcpy(*main::$13, struct deviceslot, SIZEOF_STRUCT_DEVICESLOT) -- _deref_pssc1=_deref_pssz1_memcpy_vwuc2 
    lda.z __13
    sta.z $fc
    lda.z __13+1
    sta.z $fd
    lda #<ds
    sta.z $fe
    lda #>ds
    sta.z $ff
    ldy #0
    ldx #0
  !n:
    lda ($fc),y
    sta ($fe),y
    iny
    cpy #$ff
    bne !+
    inc.z $fd
    inc.z $ff
    inx
  !:
    cpy #<SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    cpx #>SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    // [11] main::$0 = OUT + main::i#2 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z i
    clc
    adc #<OUT
    sta.z __0
    lda.z i+1
    adc #>OUT
    sta.z __0+1
    // [12] *main::$0 = *((byte*)&main::ds+OFFSET_STRUCT_DEVICESLOT_MODE) -- _deref_pbuz1=_deref_pbuc1 
    lda ds+OFFSET_STRUCT_DEVICESLOT_MODE
    ldy #0
    sta (__0),y
    // [13] main::i#1 = ++ main::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [14] if(main::i#1!=2) goto main::@1 -- vwuz1_neq_vbuc1_then_la1 
    lda.z i+1
    bne __b1_from___b1
    lda.z i
    cmp #2
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [15] return 
    rts
  .segment Data
    s1: .fill SIZEOF_STRUCT_DEVICESLOT, 0
    s2: .fill SIZEOF_STRUCT_DEVICESLOT, 0
    ssA: .fill SIZEOF_STRUCT_DEVICESLOTSA, 0
    ds: .fill SIZEOF_STRUCT_DEVICESLOT, 0
}
  // File Data
  __0: .byte 'A', 'R'
  .text "f1"
  .byte 0
  .fill $fd, 0
  __1: .byte 'B', 'W'
  .text "f2"
  .byte 0
  .fill $fd, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
constant struct deviceslot $0 = { hostSlot: 'A', mode: 'R', file: "f1" }
constant struct deviceslot $1 = { hostSlot: 'B', mode: 'W', file: "f2" }
constant byte OFFSET_STRUCT_DEVICESLOT_MODE = 1
constant byte* const OUT = (byte*) 32768
constant word SIZEOF_STRUCT_DEVICESLOT = $102
constant word SIZEOF_STRUCT_DEVICESLOTSA = $204
void main()
byte*~ main::$0 zp[2]:6 22.0
struct deviceslot*~ main::$13 zp[2]:4 11.0
word~ main::$14 zp[2]:4 22.0
word~ main::$15 zp[2]:4 22.0
word~ main::$4 zp[2]:4 22.0
struct deviceslot main::ds loadstore mem[258]
word main::i
word main::i#1 i zp[2]:2 16.5
word main::i#2 i zp[2]:2 6.875
struct deviceslot main::s1 loadstore mem[258]
struct deviceslot main::s2 loadstore mem[258]
constant struct deviceslotsA* main::slotsA = &main::ssA
volatile struct deviceslotsA main::ssA loadstore mem[516]

zp[2]:2 [ main::i#2 main::i#1 ]
zp[2]:4 [ main::$14 main::$15 main::$4 main::$13 ]
zp[2]:6 [ main::$0 ]
mem[258] [ main::s1 ]
mem[258] [ main::s2 ]
mem[516] [ main::ssA ]
mem[258] [ main::ds ]


FINAL ASSEMBLER
Score: 2267

  // File Comments
// https://gitlab.com/camelot/kickc/-/issues/590
// This version with +256 bytes struct
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-48.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_STRUCT_DEVICESLOT = $102
  .const SIZEOF_STRUCT_DEVICESLOTSA = $204
  .const OFFSET_STRUCT_DEVICESLOT_MODE = 1
  .label OUT = $8000
.segment Code
  // main
main: {
    .label slotsA = ssA
    .label __0 = 6
    .label __4 = 4
    .label i = 2
    .label __13 = 4
    .label __14 = 4
    .label __15 = 4
    // deviceslot_t s1 = {'A', 'R', "f1"}
    // [0] *(&main::s1) = memcpy(*(&$0), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT) -- _deref_pssc1=_deref_pssc2_memcpy_vwuc3 
    lda #<@__0
    sta.z $fc
    lda #>@__0
    sta.z $fd
    lda #<s1
    sta.z $fe
    lda #>s1
    sta.z $ff
    ldy #0
    ldx #0
  !n:
    lda ($fc),y
    sta ($fe),y
    iny
    cpy #$ff
    bne !+
    inc.z $fd
    inc.z $ff
    inx
  !:
    cpy #<SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    cpx #>SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    // deviceslot_t s2 = {'B', 'W', "f2"}
    // [1] *(&main::s2) = memcpy(*(&$1), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT) -- _deref_pssc1=_deref_pssc2_memcpy_vwuc3 
    lda #<__1
    sta.z $fc
    lda #>__1
    sta.z $fd
    lda #<s2
    sta.z $fe
    lda #>s2
    sta.z $ff
    ldy #0
    ldx #0
  !n:
    lda ($fc),y
    sta ($fe),y
    iny
    cpy #$ff
    bne !+
    inc.z $fd
    inc.z $ff
    inx
  !:
    cpy #<SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    cpx #>SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    // DeviceSlotsA ssA
    // [2] *(&main::ssA) = memset(struct deviceslotsA, SIZEOF_STRUCT_DEVICESLOTSA) -- _deref_pssc1=_memset_vwuc2 
    lda #<ssA
    sta.z $fe
    lda #>ssA
    sta.z $ff
    lda #0
    tay
    tax
  !n:
    sta ($fe),y
    iny
    cpy #$ff
    bne !+
    inc.z $ff
    inx
  !:
    cpy #<SIZEOF_STRUCT_DEVICESLOTSA
    bne !n-
    cpx #>SIZEOF_STRUCT_DEVICESLOTSA
    bne !n-
    // slotsA->slot[0] = s1
    // [3] *((struct deviceslot*)main::slotsA) = memcpy(*(&main::s1), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT) -- _deref_pssc1=_deref_pssc2_memcpy_vwuc3 
    lda #<s1
    sta.z $fc
    lda #>s1
    sta.z $fd
    lda #<slotsA
    sta.z $fe
    lda #>slotsA
    sta.z $ff
    ldy #0
    ldx #0
  !n:
    lda ($fc),y
    sta ($fe),y
    iny
    cpy #$ff
    bne !+
    inc.z $fd
    inc.z $ff
    inx
  !:
    cpy #<SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    cpx #>SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    // slotsA->slot[1] = s2
    // [4] *((struct deviceslot*)main::slotsA+1*SIZEOF_STRUCT_DEVICESLOT) = memcpy(*(&main::s2), struct deviceslot, SIZEOF_STRUCT_DEVICESLOT) -- _deref_pssc1=_deref_pssc2_memcpy_vwuc3 
    lda #<s2
    sta.z $fc
    lda #>s2
    sta.z $fd
    lda #<slotsA+1*SIZEOF_STRUCT_DEVICESLOT
    sta.z $fe
    lda #>slotsA+1*SIZEOF_STRUCT_DEVICESLOT
    sta.z $ff
    ldy #0
    ldx #0
  !n:
    lda ($fc),y
    sta ($fe),y
    iny
    cpy #$ff
    bne !+
    inc.z $fd
    inc.z $ff
    inx
  !:
    cpy #<SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    cpx #>SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi main::i#2 = 0 [phi:main->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [5] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // deviceslot_t ds = slotsA->slot[i]
    // [6] main::$14 = main::i#2 << 7 -- vwuz1=vwuz2_rol_7 
    lda.z i+1
    lsr
    lda.z i
    ror
    sta.z __14+1
    lda #0
    ror
    sta.z __14
    // [7] main::$15 = main::$14 + main::i#2 -- vwuz1=vwuz1_plus_vwuz2 
    clc
    lda.z __15
    adc.z i
    sta.z __15
    lda.z __15+1
    adc.z i+1
    sta.z __15+1
    // [8] main::$4 = main::$15 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z __4
    rol.z __4+1
    // [9] main::$13 = (struct deviceslot*)main::slotsA + main::$4 -- pssz1=pssc1_plus_vwuz1 
    lda.z __13
    clc
    adc #<slotsA
    sta.z __13
    lda.z __13+1
    adc #>slotsA
    sta.z __13+1
    // [10] *(&main::ds) = memcpy(*main::$13, struct deviceslot, SIZEOF_STRUCT_DEVICESLOT) -- _deref_pssc1=_deref_pssz1_memcpy_vwuc2 
    lda.z __13
    sta.z $fc
    lda.z __13+1
    sta.z $fd
    lda #<ds
    sta.z $fe
    lda #>ds
    sta.z $ff
    ldy #0
    ldx #0
  !n:
    lda ($fc),y
    sta ($fe),y
    iny
    cpy #$ff
    bne !+
    inc.z $fd
    inc.z $ff
    inx
  !:
    cpy #<SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    cpx #>SIZEOF_STRUCT_DEVICESLOT
    bne !n-
    // OUT + i
    // [11] main::$0 = OUT + main::i#2 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z i
    clc
    adc #<OUT
    sta.z __0
    lda.z i+1
    adc #>OUT
    sta.z __0+1
    // *(OUT + i) = ds.mode
    // [12] *main::$0 = *((byte*)&main::ds+OFFSET_STRUCT_DEVICESLOT_MODE) -- _deref_pbuz1=_deref_pbuc1 
    lda ds+OFFSET_STRUCT_DEVICESLOT_MODE
    ldy #0
    sta (__0),y
    // for(unsigned int i: 0..1)
    // [13] main::i#1 = ++ main::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [14] if(main::i#1!=2) goto main::@1 -- vwuz1_neq_vbuc1_then_la1 
    lda.z i+1
    bne __b1
    lda.z i
    cmp #2
    bne __b1
    // main::@return
    // }
    // [15] return 
    rts
  .segment Data
    s1: .fill SIZEOF_STRUCT_DEVICESLOT, 0
    s2: .fill SIZEOF_STRUCT_DEVICESLOT, 0
    ssA: .fill SIZEOF_STRUCT_DEVICESLOTSA, 0
    ds: .fill SIZEOF_STRUCT_DEVICESLOT, 0
}
  // File Data
  __0: .byte 'A', 'R'
  .text "f1"
  .byte 0
  .fill $fd, 0
  __1: .byte 'B', 'W'
  .text "f2"
  .byte 0
  .fill $fd, 0

