Fixing pointer addition (word*~) main::$1 ← (word*)(byte*) ub_screen + (number) 1
Fixing pointer addition (signed word*~) main::$2 ← (signed word*)(byte*) ub_screen + (number) 2
Fixing pointer addition (word*~) main::$4 ← (word*)(signed byte*) sb_screen + (number) 1
Fixing pointer addition (signed word*~) main::$5 ← (signed word*)(signed byte*) sb_screen + (number) 2
Fixing pointer addition (word*~) main::$7 ← (word*)(word*) uw_screen + (number) 1
Fixing pointer addition (signed word*~) main::$8 ← (signed word*)(word*) uw_screen + (number) 2
Fixing pointer addition (word*~) main::$10 ← (word*)(signed word*) sw_screen + (number) 1
Fixing pointer addition (signed word*~) main::$11 ← (signed word*)(signed word*) sw_screen + (number) 2
De-inlining cast (signed byte*)ub_screen
De-inlining cast (word*)ub_screen
De-inlining cast (signed word*)ub_screen
De-inlining cast (signed byte*)sb_screen
De-inlining cast (word*)sb_screen
De-inlining cast (signed word*)sb_screen
De-inlining cast (signed byte*)uw_screen
De-inlining cast (word*)uw_screen
De-inlining cast (signed word*)uw_screen
De-inlining cast (signed byte*)sw_screen
De-inlining cast (word*)sw_screen
De-inlining cast (signed word*)sw_screen
Identified constant variable (byte*) ub_screen
Identified constant variable (signed byte*) sb_screen
Identified constant variable (word*) uw_screen
Identified constant variable (signed word*) sw_screen
Identified constant variable (byte) ub
Identified constant variable (signed byte) sb
Identified constant variable (word) uw
Identified constant variable (signed word) sw

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  *((byte*)(const byte*) ub_screen) ← (const byte) ub
  (signed byte*~) main::$20 ← (signed byte*)(const byte*) ub_screen
  (signed byte*~) main::$0 ← (signed byte*~) main::$20 + (number) 1
  *((signed byte*~) main::$0) ← (const signed byte) sb
  (number~) main::$12 ← (number) 1 * (const byte) SIZEOF_WORD
  (word*~) main::$21 ← (word*)(const byte*) ub_screen
  (word*~) main::$1 ← (word*~) main::$21 + (number~) main::$12
  *((word*~) main::$1) ← (const word) uw
  (number~) main::$13 ← (number) 2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word*~) main::$22 ← (signed word*)(const byte*) ub_screen
  (signed word*~) main::$2 ← (signed word*~) main::$22 + (number~) main::$13
  *((signed word*~) main::$2) ← (const signed word) sw
  *((byte*)(const signed byte*) sb_screen) ← (const byte) ub
  (signed byte*~) main::$23 ← (signed byte*)(const signed byte*) sb_screen
  (signed byte*~) main::$3 ← (signed byte*~) main::$23 + (number) 1
  *((signed byte*~) main::$3) ← (const signed byte) sb
  (number~) main::$14 ← (number) 1 * (const byte) SIZEOF_WORD
  (word*~) main::$24 ← (word*)(const signed byte*) sb_screen
  (word*~) main::$4 ← (word*~) main::$24 + (number~) main::$14
  *((word*~) main::$4) ← (const word) uw
  (number~) main::$15 ← (number) 2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word*~) main::$25 ← (signed word*)(const signed byte*) sb_screen
  (signed word*~) main::$5 ← (signed word*~) main::$25 + (number~) main::$15
  *((signed word*~) main::$5) ← (const signed word) sw
  *((byte*)(const word*) uw_screen) ← (const byte) ub
  (signed byte*~) main::$26 ← (signed byte*)(const word*) uw_screen
  (signed byte*~) main::$6 ← (signed byte*~) main::$26 + (number) 1
  *((signed byte*~) main::$6) ← (const signed byte) sb
  (number~) main::$16 ← (number) 1 * (const byte) SIZEOF_WORD
  (word*~) main::$27 ← (word*)(const word*) uw_screen
  (word*~) main::$7 ← (word*~) main::$27 + (number~) main::$16
  *((word*~) main::$7) ← (const word) uw
  (number~) main::$17 ← (number) 2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word*~) main::$28 ← (signed word*)(const word*) uw_screen
  (signed word*~) main::$8 ← (signed word*~) main::$28 + (number~) main::$17
  *((signed word*~) main::$8) ← (const signed word) sw
  *((byte*)(const signed word*) sw_screen) ← (const byte) ub
  (signed byte*~) main::$29 ← (signed byte*)(const signed word*) sw_screen
  (signed byte*~) main::$9 ← (signed byte*~) main::$29 + (number) 1
  *((signed byte*~) main::$9) ← (const signed byte) sb
  (number~) main::$18 ← (number) 1 * (const byte) SIZEOF_WORD
  (word*~) main::$30 ← (word*)(const signed word*) sw_screen
  (word*~) main::$10 ← (word*~) main::$30 + (number~) main::$18
  *((word*~) main::$10) ← (const word) uw
  (number~) main::$19 ← (number) 2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word*~) main::$31 ← (signed word*)(const signed word*) sw_screen
  (signed word*~) main::$11 ← (signed word*~) main::$31 + (number~) main::$19
  *((signed word*~) main::$11) ← (const signed word) sw
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(const byte) SIZEOF_WORD = (byte) 2
(void()) main()
(signed byte*~) main::$0
(word*~) main::$1
(word*~) main::$10
(signed word*~) main::$11
(number~) main::$12
(number~) main::$13
(number~) main::$14
(number~) main::$15
(number~) main::$16
(number~) main::$17
(number~) main::$18
(number~) main::$19
(signed word*~) main::$2
(signed byte*~) main::$20
(word*~) main::$21
(signed word*~) main::$22
(signed byte*~) main::$23
(word*~) main::$24
(signed word*~) main::$25
(signed byte*~) main::$26
(word*~) main::$27
(signed word*~) main::$28
(signed byte*~) main::$29
(signed byte*~) main::$3
(word*~) main::$30
(signed word*~) main::$31
(word*~) main::$4
(signed word*~) main::$5
(signed byte*~) main::$6
(word*~) main::$7
(signed word*~) main::$8
(signed byte*~) main::$9
(label) main::@return
(const signed byte) sb = (signed byte) -$29
(const signed byte*) sb_screen = (signed byte*)(number) $428
(const signed word) sw = (signed word) -$3000
(const signed word*) sw_screen = (signed word*)(number) $478
(const byte) ub = (byte) $29
(const byte*) ub_screen = (byte*)(number) $400
(const word) uw = (word) $3000
(const word*) uw_screen = (word*)(number) $450

Adding number conversion cast (unumber) 1 in (signed byte*~) main::$0 ← (signed byte*~) main::$20 + (number) 1
Adding number conversion cast (unumber) 1 in (number~) main::$12 ← (number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$12 in (number~) main::$12 ← (unumber)(number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 2 in (number~) main::$13 ← (number) 2 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) main::$13 in (number~) main::$13 ← (unumber)(number) 2 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) 1 in (signed byte*~) main::$3 ← (signed byte*~) main::$23 + (number) 1
Adding number conversion cast (unumber) 1 in (number~) main::$14 ← (number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$14 in (number~) main::$14 ← (unumber)(number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 2 in (number~) main::$15 ← (number) 2 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) main::$15 in (number~) main::$15 ← (unumber)(number) 2 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) 1 in (signed byte*~) main::$6 ← (signed byte*~) main::$26 + (number) 1
Adding number conversion cast (unumber) 1 in (number~) main::$16 ← (number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$16 in (number~) main::$16 ← (unumber)(number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 2 in (number~) main::$17 ← (number) 2 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) main::$17 in (number~) main::$17 ← (unumber)(number) 2 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) 1 in (signed byte*~) main::$9 ← (signed byte*~) main::$29 + (number) 1
Adding number conversion cast (unumber) 1 in (number~) main::$18 ← (number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$18 in (number~) main::$18 ← (unumber)(number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 2 in (number~) main::$19 ← (number) 2 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) main::$19 in (number~) main::$19 ← (unumber)(number) 2 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (signed byte*) 1064
Simplifying constant pointer cast (word*) 1104
Simplifying constant pointer cast (signed word*) 1144
Simplifying constant integer cast (const byte*) ub_screen
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast (const signed byte*) sb_screen
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const word*) uw_screen
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast (const signed word*) sw_screen
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$12 ← (byte) 1 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) main::$13 ← (byte) 2 * (const byte) SIZEOF_SIGNED_WORD
Inferred type updated to byte in (unumber~) main::$14 ← (byte) 1 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) main::$15 ← (byte) 2 * (const byte) SIZEOF_SIGNED_WORD
Inferred type updated to byte in (unumber~) main::$16 ← (byte) 1 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) main::$17 ← (byte) 2 * (const byte) SIZEOF_SIGNED_WORD
Inferred type updated to byte in (unumber~) main::$18 ← (byte) 1 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) main::$19 ← (byte) 2 * (const byte) SIZEOF_SIGNED_WORD
Constant right-side identified [1] (signed byte*~) main::$20 ← (signed byte*)(const byte*) ub_screen
Constant right-side identified [4] (byte~) main::$12 ← (byte) 1 * (const byte) SIZEOF_WORD
Constant right-side identified [5] (word*~) main::$21 ← (word*)(const byte*) ub_screen
Constant right-side identified [8] (byte~) main::$13 ← (byte) 2 * (const byte) SIZEOF_SIGNED_WORD
Constant right-side identified [9] (signed word*~) main::$22 ← (signed word*)(const byte*) ub_screen
Constant right-side identified [16] (byte~) main::$14 ← (byte) 1 * (const byte) SIZEOF_WORD
Constant right-side identified [17] (word*~) main::$24 ← (word*)(const signed byte*) sb_screen
Constant right-side identified [20] (byte~) main::$15 ← (byte) 2 * (const byte) SIZEOF_SIGNED_WORD
Constant right-side identified [21] (signed word*~) main::$25 ← (signed word*)(const signed byte*) sb_screen
Constant right-side identified [25] (signed byte*~) main::$26 ← (signed byte*)(const word*) uw_screen
Constant right-side identified [28] (byte~) main::$16 ← (byte) 1 * (const byte) SIZEOF_WORD
Constant right-side identified [32] (byte~) main::$17 ← (byte) 2 * (const byte) SIZEOF_SIGNED_WORD
Constant right-side identified [33] (signed word*~) main::$28 ← (signed word*)(const word*) uw_screen
Constant right-side identified [37] (signed byte*~) main::$29 ← (signed byte*)(const signed word*) sw_screen
Constant right-side identified [40] (byte~) main::$18 ← (byte) 1 * (const byte) SIZEOF_WORD
Constant right-side identified [41] (word*~) main::$30 ← (word*)(const signed word*) sw_screen
Constant right-side identified [44] (byte~) main::$19 ← (byte) 2 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const signed byte*) main::$20 = (signed byte*)ub_screen
Constant (const byte) main::$12 = 1*SIZEOF_WORD
Constant (const word*) main::$21 = (word*)ub_screen
Constant (const byte) main::$13 = 2*SIZEOF_SIGNED_WORD
Constant (const signed word*) main::$22 = (signed word*)ub_screen
Constant (const signed byte*) main::$23 = sb_screen
Constant (const byte) main::$14 = 1*SIZEOF_WORD
Constant (const word*) main::$24 = (word*)sb_screen
Constant (const byte) main::$15 = 2*SIZEOF_SIGNED_WORD
Constant (const signed word*) main::$25 = (signed word*)sb_screen
Constant (const signed byte*) main::$26 = (signed byte*)uw_screen
Constant (const byte) main::$16 = 1*SIZEOF_WORD
Constant (const word*) main::$27 = uw_screen
Constant (const byte) main::$17 = 2*SIZEOF_SIGNED_WORD
Constant (const signed word*) main::$28 = (signed word*)uw_screen
Constant (const signed byte*) main::$29 = (signed byte*)sw_screen
Constant (const byte) main::$18 = 1*SIZEOF_WORD
Constant (const word*) main::$30 = (word*)sw_screen
Constant (const byte) main::$19 = 2*SIZEOF_SIGNED_WORD
Constant (const signed word*) main::$31 = sw_screen
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte*)sb_screen in [12] *((byte*)(const signed byte*) sb_screen) ← (const byte) ub
Constant value identified (byte*)uw_screen in [24] *((byte*)(const word*) uw_screen) ← (const byte) ub
Constant value identified (byte*)sw_screen in [36] *((byte*)(const signed word*) sw_screen) ← (const byte) ub
Successful SSA optimization Pass2ConstantValues
Converting *(pointer+n) to pointer[n] [3] *((signed byte*~) main::$0) ← (const signed byte) sb  -- *(main::$20 + 1)
Converting *(pointer+n) to pointer[n] [7] *((word*~) main::$1) ← (const word) uw  -- *(main::$21 + main::$12)
Converting *(pointer+n) to pointer[n] [11] *((signed word*~) main::$2) ← (const signed word) sw  -- *(main::$22 + main::$13)
Converting *(pointer+n) to pointer[n] [15] *((signed byte*~) main::$3) ← (const signed byte) sb  -- *(main::$23 + 1)
Converting *(pointer+n) to pointer[n] [19] *((word*~) main::$4) ← (const word) uw  -- *(main::$24 + main::$14)
Converting *(pointer+n) to pointer[n] [23] *((signed word*~) main::$5) ← (const signed word) sw  -- *(main::$25 + main::$15)
Converting *(pointer+n) to pointer[n] [27] *((signed byte*~) main::$6) ← (const signed byte) sb  -- *(main::$26 + 1)
Converting *(pointer+n) to pointer[n] [31] *((word*~) main::$7) ← (const word) uw  -- *(main::$27 + main::$16)
Converting *(pointer+n) to pointer[n] [35] *((signed word*~) main::$8) ← (const signed word) sw  -- *(main::$28 + main::$17)
Converting *(pointer+n) to pointer[n] [39] *((signed byte*~) main::$9) ← (const signed byte) sb  -- *(main::$29 + 1)
Converting *(pointer+n) to pointer[n] [43] *((word*~) main::$10) ← (const word) uw  -- *(main::$30 + main::$18)
Converting *(pointer+n) to pointer[n] [47] *((signed word*~) main::$11) ← (const signed word) sw  -- *(main::$31 + main::$19)
Successful SSA optimization Pass2InlineDerefIdx
Eliminating unused variable (signed byte*~) main::$0 and assignment [1] (signed byte*~) main::$0 ← (const signed byte*) main::$20 + (byte) 1
Eliminating unused variable (word*~) main::$1 and assignment [3] (word*~) main::$1 ← (const word*) main::$21 + (const byte) main::$12
Eliminating unused variable (signed word*~) main::$2 and assignment [5] (signed word*~) main::$2 ← (const signed word*) main::$22 + (const byte) main::$13
Eliminating unused variable (signed byte*~) main::$3 and assignment [8] (signed byte*~) main::$3 ← (const signed byte*) main::$23 + (byte) 1
Eliminating unused variable (word*~) main::$4 and assignment [10] (word*~) main::$4 ← (const word*) main::$24 + (const byte) main::$14
Eliminating unused variable (signed word*~) main::$5 and assignment [12] (signed word*~) main::$5 ← (const signed word*) main::$25 + (const byte) main::$15
Eliminating unused variable (signed byte*~) main::$6 and assignment [15] (signed byte*~) main::$6 ← (const signed byte*) main::$26 + (byte) 1
Eliminating unused variable (word*~) main::$7 and assignment [17] (word*~) main::$7 ← (const word*) main::$27 + (const byte) main::$16
Eliminating unused variable (signed word*~) main::$8 and assignment [19] (signed word*~) main::$8 ← (const signed word*) main::$28 + (const byte) main::$17
Eliminating unused variable (signed byte*~) main::$9 and assignment [22] (signed byte*~) main::$9 ← (const signed byte*) main::$29 + (byte) 1
Eliminating unused variable (word*~) main::$10 and assignment [24] (word*~) main::$10 ← (const word*) main::$30 + (const byte) main::$18
Eliminating unused variable (signed word*~) main::$11 and assignment [26] (signed word*~) main::$11 ← (const signed word*) main::$31 + (const byte) main::$19
Successful SSA optimization PassNEliminateUnusedVars
Constant inlined main::$23 = (const signed byte*) sb_screen
Constant inlined main::$12 = (byte) 1*(const byte) SIZEOF_WORD
Constant inlined main::$13 = (byte) 2*(const byte) SIZEOF_SIGNED_WORD
Constant inlined main::$24 = (word*)(const signed byte*) sb_screen
Constant inlined main::$14 = (byte) 1*(const byte) SIZEOF_WORD
Constant inlined main::$25 = (signed word*)(const signed byte*) sb_screen
Constant inlined main::$15 = (byte) 2*(const byte) SIZEOF_SIGNED_WORD
Constant inlined main::$26 = (signed byte*)(const word*) uw_screen
Constant inlined main::$30 = (word*)(const signed word*) sw_screen
Constant inlined main::$31 = (const signed word*) sw_screen
Constant inlined main::$20 = (signed byte*)(const byte*) ub_screen
Constant inlined main::$21 = (word*)(const byte*) ub_screen
Constant inlined main::$22 = (signed word*)(const byte*) ub_screen
Constant inlined main::$27 = (const word*) uw_screen
Constant inlined main::$16 = (byte) 1*(const byte) SIZEOF_WORD
Constant inlined main::$17 = (byte) 2*(const byte) SIZEOF_SIGNED_WORD
Constant inlined main::$28 = (signed word*)(const word*) uw_screen
Constant inlined main::$29 = (signed byte*)(const signed word*) sw_screen
Constant inlined main::$18 = (byte) 1*(const byte) SIZEOF_WORD
Constant inlined main::$19 = (byte) 2*(const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((signed byte*)ub_screen+1)
Consolidated array index constant in *((word*)ub_screen+1*SIZEOF_WORD)
Consolidated array index constant in *((signed word*)ub_screen+2*SIZEOF_SIGNED_WORD)
Consolidated array index constant in *(sb_screen+1)
Consolidated array index constant in *((word*)sb_screen+1*SIZEOF_WORD)
Consolidated array index constant in *((signed word*)sb_screen+2*SIZEOF_SIGNED_WORD)
Consolidated array index constant in *((signed byte*)uw_screen+1)
Consolidated array index constant in *(uw_screen+1*SIZEOF_WORD)
Consolidated array index constant in *((signed word*)uw_screen+2*SIZEOF_SIGNED_WORD)
Consolidated array index constant in *((signed byte*)sw_screen+1)
Consolidated array index constant in *((word*)sw_screen+1*SIZEOF_WORD)
Consolidated array index constant in *(sw_screen+2*SIZEOF_SIGNED_WORD)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const byte*) ub_screen) ← (const byte) ub
  [5] *((signed byte*)(const byte*) ub_screen+(byte) 1) ← (const signed byte) sb
  [6] *((word*)(const byte*) ub_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw
  [7] *((signed word*)(const byte*) ub_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw
  [8] *((byte*)(const signed byte*) sb_screen) ← (const byte) ub
  [9] *((const signed byte*) sb_screen+(byte) 1) ← (const signed byte) sb
  [10] *((word*)(const signed byte*) sb_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw
  [11] *((signed word*)(const signed byte*) sb_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw
  [12] *((byte*)(const word*) uw_screen) ← (const byte) ub
  [13] *((signed byte*)(const word*) uw_screen+(byte) 1) ← (const signed byte) sb
  [14] *((const word*) uw_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw
  [15] *((signed word*)(const word*) uw_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw
  [16] *((byte*)(const signed word*) sw_screen) ← (const byte) ub
  [17] *((signed byte*)(const signed word*) sw_screen+(byte) 1) ← (const signed byte) sb
  [18] *((word*)(const signed word*) sw_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw
  [19] *((const signed word*) sw_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw
  to:main::@return
main::@return: scope:[main]  from main
  [20] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests casting pointer types to other pointer types
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  .const SIZEOF_SIGNED_WORD = 2
  .label ub_screen = $400
  .label sb_screen = $428
  .label uw_screen = $450
  .label sw_screen = $478
  .const ub = $29
  .const sb = -$29
  .const uw = $3000
  .const sw = -$3000
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((const byte*) ub_screen) ← (const byte) ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta ub_screen
    // [5] *((signed byte*)(const byte*) ub_screen+(byte) 1) ← (const signed byte) sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta ub_screen+1
    // [6] *((word*)(const byte*) ub_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta ub_screen+1*SIZEOF_WORD
    lda #>uw
    sta ub_screen+1*SIZEOF_WORD+1
    // [7] *((signed word*)(const byte*) ub_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta ub_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta ub_screen+2*SIZEOF_SIGNED_WORD+1
    // [8] *((byte*)(const signed byte*) sb_screen) ← (const byte) ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta sb_screen
    // [9] *((const signed byte*) sb_screen+(byte) 1) ← (const signed byte) sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta sb_screen+1
    // [10] *((word*)(const signed byte*) sb_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta sb_screen+1*SIZEOF_WORD
    lda #>uw
    sta sb_screen+1*SIZEOF_WORD+1
    // [11] *((signed word*)(const signed byte*) sb_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta sb_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta sb_screen+2*SIZEOF_SIGNED_WORD+1
    // [12] *((byte*)(const word*) uw_screen) ← (const byte) ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta uw_screen
    // [13] *((signed byte*)(const word*) uw_screen+(byte) 1) ← (const signed byte) sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta uw_screen+1
    // [14] *((const word*) uw_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta uw_screen+1*SIZEOF_WORD
    lda #>uw
    sta uw_screen+1*SIZEOF_WORD+1
    // [15] *((signed word*)(const word*) uw_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta uw_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta uw_screen+2*SIZEOF_SIGNED_WORD+1
    // [16] *((byte*)(const signed word*) sw_screen) ← (const byte) ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta sw_screen
    // [17] *((signed byte*)(const signed word*) sw_screen+(byte) 1) ← (const signed byte) sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta sw_screen+1
    // [18] *((word*)(const signed word*) sw_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta sw_screen+1*SIZEOF_WORD
    lda #>uw
    sta sw_screen+1*SIZEOF_WORD+1
    // [19] *((const signed word*) sw_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta sw_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta sw_screen+2*SIZEOF_SIGNED_WORD+1
    jmp __breturn
    // main::@return
  __breturn:
    // [20] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) ub_screen) ← (const byte) ub [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [5] *((signed byte*)(const byte*) ub_screen+(byte) 1) ← (const signed byte) sb [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [6] *((word*)(const byte*) ub_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [7] *((signed word*)(const byte*) ub_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)(const signed byte*) sb_screen) ← (const byte) ub [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [9] *((const signed byte*) sb_screen+(byte) 1) ← (const signed byte) sb [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [10] *((word*)(const signed byte*) sb_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [11] *((signed word*)(const signed byte*) sb_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [12] *((byte*)(const word*) uw_screen) ← (const byte) ub [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [13] *((signed byte*)(const word*) uw_screen+(byte) 1) ← (const signed byte) sb [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [14] *((const word*) uw_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [15] *((signed word*)(const word*) uw_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [16] *((byte*)(const signed word*) sw_screen) ← (const byte) ub [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [17] *((signed byte*)(const signed word*) sw_screen+(byte) 1) ← (const signed byte) sb [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [18] *((word*)(const signed word*) sw_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [19] *((const signed word*) sw_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 165 combination 
Uplifting [] best 165 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests casting pointer types to other pointer types
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  .const SIZEOF_SIGNED_WORD = 2
  .label ub_screen = $400
  .label sb_screen = $428
  .label uw_screen = $450
  .label sw_screen = $478
  .const ub = $29
  .const sb = -$29
  .const uw = $3000
  .const sw = -$3000
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((const byte*) ub_screen) ← (const byte) ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta ub_screen
    // [5] *((signed byte*)(const byte*) ub_screen+(byte) 1) ← (const signed byte) sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta ub_screen+1
    // [6] *((word*)(const byte*) ub_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta ub_screen+1*SIZEOF_WORD
    lda #>uw
    sta ub_screen+1*SIZEOF_WORD+1
    // [7] *((signed word*)(const byte*) ub_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta ub_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta ub_screen+2*SIZEOF_SIGNED_WORD+1
    // [8] *((byte*)(const signed byte*) sb_screen) ← (const byte) ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta sb_screen
    // [9] *((const signed byte*) sb_screen+(byte) 1) ← (const signed byte) sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta sb_screen+1
    // [10] *((word*)(const signed byte*) sb_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta sb_screen+1*SIZEOF_WORD
    lda #>uw
    sta sb_screen+1*SIZEOF_WORD+1
    // [11] *((signed word*)(const signed byte*) sb_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta sb_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta sb_screen+2*SIZEOF_SIGNED_WORD+1
    // [12] *((byte*)(const word*) uw_screen) ← (const byte) ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta uw_screen
    // [13] *((signed byte*)(const word*) uw_screen+(byte) 1) ← (const signed byte) sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta uw_screen+1
    // [14] *((const word*) uw_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta uw_screen+1*SIZEOF_WORD
    lda #>uw
    sta uw_screen+1*SIZEOF_WORD+1
    // [15] *((signed word*)(const word*) uw_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta uw_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta uw_screen+2*SIZEOF_SIGNED_WORD+1
    // [16] *((byte*)(const signed word*) sw_screen) ← (const byte) ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta sw_screen
    // [17] *((signed byte*)(const signed word*) sw_screen+(byte) 1) ← (const signed byte) sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta sw_screen+1
    // [18] *((word*)(const signed word*) sw_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta sw_screen+1*SIZEOF_WORD
    lda #>uw
    sta sw_screen+1*SIZEOF_WORD+1
    // [19] *((const signed word*) sw_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta sw_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta sw_screen+2*SIZEOF_SIGNED_WORD+1
    jmp __breturn
    // main::@return
  __breturn:
    // [20] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(const byte) SIZEOF_WORD = (byte) 2
(void()) main()
(label) main::@return
(const signed byte) sb = (signed byte) -$29
(const signed byte*) sb_screen = (signed byte*) 1064
(const signed word) sw = (signed word) -$3000
(const signed word*) sw_screen = (signed word*) 1144
(const byte) ub = (byte) $29
(const byte*) ub_screen = (byte*) 1024
(const word) uw = (word) $3000
(const word*) uw_screen = (word*) 1104



FINAL ASSEMBLER
Score: 150

  // File Comments
// Tests casting pointer types to other pointer types
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  .const SIZEOF_SIGNED_WORD = 2
  .label ub_screen = $400
  .label sb_screen = $428
  .label uw_screen = $450
  .label sw_screen = $478
  .const ub = $29
  .const sb = -$29
  .const uw = $3000
  .const sw = -$3000
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // *((byte*)ub_screen) = ub
    // [4] *((const byte*) ub_screen) ← (const byte) ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta ub_screen
    // *((signed byte*)ub_screen+1) = sb
    // [5] *((signed byte*)(const byte*) ub_screen+(byte) 1) ← (const signed byte) sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta ub_screen+1
    // *((word*)ub_screen+1)= uw
    // [6] *((word*)(const byte*) ub_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta ub_screen+1*SIZEOF_WORD
    lda #>uw
    sta ub_screen+1*SIZEOF_WORD+1
    // *((signed word*)ub_screen+2) = sw
    // [7] *((signed word*)(const byte*) ub_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta ub_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta ub_screen+2*SIZEOF_SIGNED_WORD+1
    // *((byte*)sb_screen) = ub
    // [8] *((byte*)(const signed byte*) sb_screen) ← (const byte) ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta sb_screen
    // *((signed byte*)sb_screen+1) = sb
    // [9] *((const signed byte*) sb_screen+(byte) 1) ← (const signed byte) sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta sb_screen+1
    // *((word*)sb_screen+1)= uw
    // [10] *((word*)(const signed byte*) sb_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta sb_screen+1*SIZEOF_WORD
    lda #>uw
    sta sb_screen+1*SIZEOF_WORD+1
    // *((signed word*)sb_screen+2) = sw
    // [11] *((signed word*)(const signed byte*) sb_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta sb_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta sb_screen+2*SIZEOF_SIGNED_WORD+1
    // *((byte*)uw_screen) = ub
    // [12] *((byte*)(const word*) uw_screen) ← (const byte) ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta uw_screen
    // *((signed byte*)uw_screen+1) = sb
    // [13] *((signed byte*)(const word*) uw_screen+(byte) 1) ← (const signed byte) sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta uw_screen+1
    // *((word*)uw_screen+1)= uw
    // [14] *((const word*) uw_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta uw_screen+1*SIZEOF_WORD
    lda #>uw
    sta uw_screen+1*SIZEOF_WORD+1
    // *((signed word*)uw_screen+2) = sw
    // [15] *((signed word*)(const word*) uw_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta uw_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta uw_screen+2*SIZEOF_SIGNED_WORD+1
    // *((byte*)sw_screen) = ub
    // [16] *((byte*)(const signed word*) sw_screen) ← (const byte) ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta sw_screen
    // *((signed byte*)sw_screen+1) = sb
    // [17] *((signed byte*)(const signed word*) sw_screen+(byte) 1) ← (const signed byte) sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta sw_screen+1
    // *((word*)sw_screen+1)= uw
    // [18] *((word*)(const signed word*) sw_screen+(byte) 1*(const byte) SIZEOF_WORD) ← (const word) uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta sw_screen+1*SIZEOF_WORD
    lda #>uw
    sta sw_screen+1*SIZEOF_WORD+1
    // *((signed word*)sw_screen+2) = sw
    // [19] *((const signed word*) sw_screen+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta sw_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta sw_screen+2*SIZEOF_SIGNED_WORD+1
    // main::@return
    // }
    // [20] return 
    rts
}
  // File Data

