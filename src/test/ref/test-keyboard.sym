__constant struct MOS6526_CIA * const CIA1 = (struct MOS6526_CIA *) 56320
__constant const char KEY_0 = $23
__constant const char KEY_1 = $38
__constant const char KEY_2 = $3b
__constant const char KEY_3 = 8
__constant const char KEY_4 = $b
__constant const char KEY_5 = $10
__constant const char KEY_6 = $13
__constant const char KEY_7 = $18
__constant const char KEY_8 = $1b
__constant const char KEY_9 = $20
__constant const char KEY_A = $a
__constant const char KEY_ARROW_LEFT = $39
__constant const char KEY_ARROW_UP = $36
__constant const char KEY_ASTERISK = $31
__constant const char KEY_AT = $2e
__constant const char KEY_B = $1c
__constant const char KEY_C = $14
__constant const char KEY_COLON = $2d
__constant const char KEY_COMMA = $2f
__constant const char KEY_D = $12
__constant const char KEY_DOT = $2c
__constant const char KEY_E = $e
__constant const char KEY_EQUALS = $35
__constant const char KEY_F = $15
__constant const char KEY_G = $1a
__constant const char KEY_H = $1d
__constant const char KEY_I = $21
__constant const char KEY_J = $22
__constant const char KEY_K = $25
__constant const char KEY_L = $2a
__constant const char KEY_M = $24
__constant const char KEY_MINUS = $2b
__constant const char KEY_N = $27
__constant const char KEY_O = $26
__constant const char KEY_P = $29
__constant const char KEY_PLUS = $28
__constant const char KEY_POUND = $30
__constant const char KEY_Q = $3e
__constant const char KEY_R = $11
__constant const char KEY_S = $d
__constant const char KEY_SEMICOLON = $32
__constant const char KEY_SLASH = $37
__constant const char KEY_SPACE = $3c
__constant const char KEY_T = $16
__constant const char KEY_U = $1e
__constant const char KEY_V = $1f
__constant const char KEY_W = 9
__constant const char KEY_X = $17
__constant const char KEY_Y = $19
__constant const char KEY_Z = $c
__constant char OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
__constant char OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
__constant char OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR = 3
__constant char * const RASTER = (char *) 53266
__constant const char keyboard_char_keycodes[] = { KEY_AT, KEY_A, KEY_B, KEY_C, KEY_D, KEY_E, KEY_F, KEY_G, KEY_H, KEY_I, KEY_J, KEY_K, KEY_L, KEY_M, KEY_N, KEY_O, KEY_P, KEY_Q, KEY_R, KEY_S, KEY_T, KEY_U, KEY_V, KEY_W, KEY_X, KEY_Y, KEY_Z, $3f, KEY_POUND, $3f, KEY_ARROW_UP, KEY_ARROW_LEFT, KEY_SPACE, $3f, $3f, $3f, $3f, $3f, $3f, $3f, $3f, $3f, KEY_ASTERISK, KEY_PLUS, KEY_COMMA, KEY_MINUS, KEY_DOT, KEY_SLASH, KEY_0, KEY_1, KEY_2, KEY_3, KEY_4, KEY_5, KEY_6, KEY_7, KEY_8, KEY_9, KEY_COLON, KEY_SEMICOLON, $3f, KEY_EQUALS, $3f, $3f }
char keyboard_get_keycode(char ch)
char keyboard_get_keycode::ch
char keyboard_get_keycode::ch#0 // reg byte x 1102.0
char keyboard_get_keycode::return
char keyboard_get_keycode::return#0 // reg byte a 367.33333333333337
char keyboard_get_keycode::return#2 // reg byte a 202.0
void keyboard_init()
char keyboard_key_pressed(char key)
char keyboard_key_pressed::$2 // reg byte a 2002.0
char keyboard_key_pressed::colidx
char keyboard_key_pressed::colidx#0 // reg byte y 333.6666666666667
char keyboard_key_pressed::key
char keyboard_key_pressed::key#0 // reg byte x 1051.5
char keyboard_key_pressed::return
char keyboard_key_pressed::return#0 // reg byte a 367.33333333333337
char keyboard_key_pressed::return#2 // reg byte a 202.0
char keyboard_key_pressed::rowidx
char keyboard_key_pressed::rowidx#0 // reg byte a 2002.0
__constant char keyboard_matrix_col_bitmask[8] = { 1, 2, 4, 8, $10, $20, $40, $80 }
char keyboard_matrix_read(char rowid)
char keyboard_matrix_read::return
char keyboard_matrix_read::return#0 // reg byte a 2775.75
char keyboard_matrix_read::return#2 // reg byte a 2002.0
char keyboard_matrix_read::return#3 // reg byte a 202.0
char keyboard_matrix_read::row_pressed_bits
char keyboard_matrix_read::rowid
char keyboard_matrix_read::rowid#0 // reg byte x 2002.0
char keyboard_matrix_read::rowid#1 // reg byte x 202.0
char keyboard_matrix_read::rowid#2 // reg byte x 11103.0
__constant char keyboard_matrix_row_bitmask[8] = { $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f }
void main()
char main::$14 // reg byte a 202.0
char main::$4 // reg byte a 2002.0
char main::ch
char main::ch#1 // ch zp[1]:7 151.5
char main::ch#2 // ch zp[1]:7 28.857142857142858
char main::col
char main::col#1 // reg byte y 1501.5
char main::col#2 // reg byte y 667.3333333333334
char main::i
char main::i#1 // i zp[1]:8 202.0
char main::i#2 // i zp[1]:8 151.5
char main::i#3 // i zp[1]:8 42.08333333333333
char main::i#4 // i zp[1]:8 202.0
char main::i#6 // i zp[1]:8 168.33333333333331
char main::key
char main::key#0 // reg byte a 151.5
char main::row
char main::row#1 // row zp[1]:4 151.5
char main::row#2 // row zp[1]:4 21.642857142857142
char main::row_pressed_bits
char main::row_pressed_bits#0 // reg byte x 202.0
char main::row_pressed_bits#1 // reg byte x 667.3333333333334
char main::row_pressed_bits#2 // reg byte x 620.8
char *main::sc
char *main::sc#1 // sc zp[2]:2 22.0
char *main::sc#2 // sc zp[2]:2 14.666666666666666
char *main::screen
char *main::screen#1 // screen zp[2]:5 71.0
char *main::screen#13 // screen zp[2]:5 169.53846153846155
char *main::screen#2 // screen zp[2]:5 10.142857142857142

zp[2]:2 [ main::sc#2 main::sc#1 ]
zp[1]:4 [ main::row#2 main::row#1 ]
zp[2]:5 [ main::screen#13 main::screen#1 main::screen#2 ]
reg byte x [ main::row_pressed_bits#2 main::row_pressed_bits#1 main::row_pressed_bits#0 ]
reg byte y [ main::col#2 main::col#1 ]
zp[1]:7 [ main::ch#2 main::ch#1 ]
zp[1]:8 [ main::i#4 main::i#3 main::i#6 main::i#1 main::i#2 ]
reg byte x [ keyboard_matrix_read::rowid#2 keyboard_matrix_read::rowid#0 keyboard_matrix_read::rowid#1 ]
reg byte a [ keyboard_matrix_read::return#3 ]
reg byte a [ main::$4 ]
reg byte x [ keyboard_get_keycode::ch#0 ]
reg byte a [ keyboard_get_keycode::return#2 ]
reg byte a [ main::key#0 ]
reg byte x [ keyboard_key_pressed::key#0 ]
reg byte a [ keyboard_key_pressed::return#2 ]
reg byte a [ main::$14 ]
reg byte a [ keyboard_matrix_read::return#0 ]
reg byte a [ keyboard_get_keycode::return#0 ]
reg byte y [ keyboard_key_pressed::colidx#0 ]
reg byte a [ keyboard_key_pressed::rowidx#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_key_pressed::$2 ]
reg byte a [ keyboard_key_pressed::return#0 ]
