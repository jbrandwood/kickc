__constant signed char *COSH = SINH+$40
__constant signed char *COSQ = SINQ+$40
__constant const char GREEN = 5
__constant const char LIGHT_BLUE = $e
__constant const char LIGHT_GREY = $f
__constant char OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
__constant char OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
__constant char OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = $15
__constant signed char PERSP_Z[$100] = kickasm {{ {
    .var d = 256.0	
    .var z0 = 6.0	
    // These values of d/z0 result in table values from $20 to $40 (effectively max is $3f)
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}
 }}
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant char *SCREEN = (char *) 1024
__constant signed char SINH[$140] = kickasm {{ {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }
 }}
__constant signed char SINQ[$140] = kickasm {{ {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }
 }}
__constant char SPRITE[] = kickasm {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
__constant char * const SPRITES_COLOR = (char *) 53287
__constant char * const SPRITES_XPOS = (char *) 53248
__constant char * const SPRITES_YPOS = (char *) 53249
__constant struct MOS6569_VICII * const VICII = (struct MOS6569_VICII *) 53248
void __start()
void anim()
char anim::$10 // reg byte a 20002.0
char anim::$13 // reg byte a 20002.0
char anim::$14 // reg byte a 20002.0
char anim::$9 // reg byte a 20002.0
char anim::i
char anim::i#1 // i zp[1]:9 15001.5
char anim::i#2 // i zp[1]:9 6316.421052631579
char anim::i2
char anim::i2#0 // reg byte x 5000.5
void calculate_matrix(signed char sx , signed char sy , signed char sz)
signed char calculate_matrix::$10 // reg byte a 20002.0
signed char calculate_matrix::$11 // reg byte a 20002.0
signed char calculate_matrix::$12 // reg byte a 20002.0
signed char calculate_matrix::$13 // reg byte a 20002.0
signed char calculate_matrix::$14 // reg byte a 20002.0
signed char calculate_matrix::$15 // reg byte a 20002.0
signed char calculate_matrix::$16 // reg byte a 20002.0
signed char calculate_matrix::$17 // reg byte a 20002.0
signed char calculate_matrix::$18 // reg byte a 20002.0
signed char calculate_matrix::$19 // reg byte a 20002.0
signed char calculate_matrix::$20 // reg byte a 20002.0
signed char calculate_matrix::$21 // reg byte a 20002.0
signed char calculate_matrix::$22 // reg byte a 20002.0
signed char calculate_matrix::$23 // reg byte a 20002.0
signed char calculate_matrix::$24 // reg byte a 20002.0
signed char calculate_matrix::$25 // reg byte a 20002.0
signed char calculate_matrix::$26 // reg byte a 20002.0
signed char calculate_matrix::$27 // reg byte a 20002.0
signed char calculate_matrix::$28 // reg byte a 20002.0
signed char calculate_matrix::$29 // reg byte a 20002.0
signed char calculate_matrix::$30 // reg byte a 20002.0
signed char calculate_matrix::$31 // reg byte a 20002.0
signed char calculate_matrix::$32 // reg byte a 20002.0
signed char calculate_matrix::$33 // reg byte a 20002.0
signed char calculate_matrix::$34 // reg byte a 20002.0
signed char calculate_matrix::sx
signed char calculate_matrix::sx#0 // reg byte x 7364.454545454545
signed char calculate_matrix::sy
signed char calculate_matrix::sy#0 // sy zp[1]:27 4067.133333333334
signed char calculate_matrix::sz
signed char calculate_matrix::t1
signed char calculate_matrix::t1#0 // t1 zp[1]:5 4167.083333333333
signed char calculate_matrix::t10
signed char calculate_matrix::t10#0 // reg byte x 909.1818181818182
signed char calculate_matrix::t2
signed char calculate_matrix::t2#0 // t2 zp[1]:4 4545.909090909091
signed char calculate_matrix::t3
signed char calculate_matrix::t3#0 // t3 zp[1]:6 1470.7352941176468
signed char calculate_matrix::t4
signed char calculate_matrix::t4#0 // t4 zp[1]:30 1515.3030303030303
signed char calculate_matrix::t5
signed char calculate_matrix::t5#0 // t5 zp[1]:33 1470.7352941176468
signed char calculate_matrix::t6
signed char calculate_matrix::t6#0 // t6 zp[1]:29 1562.65625
signed char calculate_matrix::t7
signed char calculate_matrix::t7#0 // t7 zp[1]:31 1515.3030303030303
signed char calculate_matrix::t8
signed char calculate_matrix::t8#0 // t8 zp[1]:32 1515.3030303030303
signed char calculate_matrix::t9
signed char calculate_matrix::t9#0 // t9 zp[1]:34 882.4411764705882
void debug_print()
char *debug_print::at_line
__constant char *debug_print::at_line#0 = SCREEN+(unsigned int)$13*$28 // at_line
char debug_print::c
char debug_print::c#1 // c zp[1]:6 666667.3333333334
char debug_print::c#2 // c zp[1]:6 421053.05263157893
char debug_print::i
char debug_print::i#1 // i zp[1]:5 1500001.5
char debug_print::i#2 // i zp[1]:5 400000.39999999997
char debug_print::print_schar_pos10_col
__constant char debug_print::print_schar_pos10_col#0 = $1d // print_schar_pos10_col
char debug_print::print_schar_pos10_row
__constant char debug_print::print_schar_pos10_row#0 = 6 // print_schar_pos10_row
signed char debug_print::print_schar_pos10_sb
signed char debug_print::print_schar_pos10_sb#0 // reg byte a 20002.0
char debug_print::print_schar_pos11_col
__constant char debug_print::print_schar_pos11_col#0 = $21 // print_schar_pos11_col
char debug_print::print_schar_pos11_row
__constant char debug_print::print_schar_pos11_row#0 = 6 // print_schar_pos11_row
signed char debug_print::print_schar_pos11_sb
signed char debug_print::print_schar_pos11_sb#0 // reg byte a 20002.0
char debug_print::print_schar_pos12_col
__constant char debug_print::print_schar_pos12_col#0 = $25 // print_schar_pos12_col
char debug_print::print_schar_pos12_row
__constant char debug_print::print_schar_pos12_row#0 = 6 // print_schar_pos12_row
signed char debug_print::print_schar_pos12_sb
signed char debug_print::print_schar_pos12_sb#0 // reg byte a 20002.0
char debug_print::print_schar_pos1_col
__constant char debug_print::print_schar_pos1_col#0 = $25 // print_schar_pos1_col
char debug_print::print_schar_pos1_row
signed char debug_print::print_schar_pos1_sb
signed char debug_print::print_schar_pos1_sb#0 // reg byte a 20002.0
char debug_print::print_schar_pos2_col
__constant char debug_print::print_schar_pos2_col#0 = $25 // print_schar_pos2_col
char debug_print::print_schar_pos2_row
__constant char debug_print::print_schar_pos2_row#0 = 1 // print_schar_pos2_row
signed char debug_print::print_schar_pos2_sb
signed char debug_print::print_schar_pos2_sb#0 // reg byte a 20002.0
char debug_print::print_schar_pos3_col
__constant char debug_print::print_schar_pos3_col#0 = $25 // print_schar_pos3_col
char debug_print::print_schar_pos3_row
__constant char debug_print::print_schar_pos3_row#0 = 2 // print_schar_pos3_row
signed char debug_print::print_schar_pos3_sb
char debug_print::print_schar_pos4_col
__constant char debug_print::print_schar_pos4_col#0 = $1d // print_schar_pos4_col
char debug_print::print_schar_pos4_row
__constant char debug_print::print_schar_pos4_row#0 = 4 // print_schar_pos4_row
signed char debug_print::print_schar_pos4_sb
signed char debug_print::print_schar_pos4_sb#0 // reg byte a 20002.0
char debug_print::print_schar_pos5_col
__constant char debug_print::print_schar_pos5_col#0 = $21 // print_schar_pos5_col
char debug_print::print_schar_pos5_row
__constant char debug_print::print_schar_pos5_row#0 = 4 // print_schar_pos5_row
signed char debug_print::print_schar_pos5_sb
signed char debug_print::print_schar_pos5_sb#0 // reg byte a 20002.0
char debug_print::print_schar_pos6_col
__constant char debug_print::print_schar_pos6_col#0 = $25 // print_schar_pos6_col
char debug_print::print_schar_pos6_row
__constant char debug_print::print_schar_pos6_row#0 = 4 // print_schar_pos6_row
signed char debug_print::print_schar_pos6_sb
signed char debug_print::print_schar_pos6_sb#0 // reg byte a 20002.0
char debug_print::print_schar_pos7_col
__constant char debug_print::print_schar_pos7_col#0 = $1d // print_schar_pos7_col
char debug_print::print_schar_pos7_row
__constant char debug_print::print_schar_pos7_row#0 = 5 // print_schar_pos7_row
signed char debug_print::print_schar_pos7_sb
signed char debug_print::print_schar_pos7_sb#0 // reg byte a 20002.0
char debug_print::print_schar_pos8_col
__constant char debug_print::print_schar_pos8_col#0 = $21 // print_schar_pos8_col
char debug_print::print_schar_pos8_row
__constant char debug_print::print_schar_pos8_row#0 = 5 // print_schar_pos8_row
signed char debug_print::print_schar_pos8_sb
signed char debug_print::print_schar_pos8_sb#0 // reg byte a 20002.0
char debug_print::print_schar_pos9_col
__constant char debug_print::print_schar_pos9_col#0 = $25 // print_schar_pos9_col
char debug_print::print_schar_pos9_row
__constant char debug_print::print_schar_pos9_row#0 = 5 // print_schar_pos9_row
signed char debug_print::print_schar_pos9_sb
signed char debug_print::print_schar_pos9_sb#0 // reg byte a 20002.0
void debug_print_init()
char *debug_print_init::$41 // zp[2]:2 20002.0
char *debug_print_init::$44 // zp[2]:7 20002.0
char *debug_print_init::$47 // zp[2]:10 20002.0
char *debug_print_init::$50 // zp[2]:12 20002.0
char *debug_print_init::$53 // zp[2]:14 20002.0
char *debug_print_init::$56 // zp[2]:16 20002.0
char *debug_print_init::$59 // zp[2]:18 20002.0
char *debug_print_init::$62 // zp[2]:20 20002.0
char *debug_print_init::$65 // zp[2]:22 20002.0
__constant char *debug_print_init::COLS = (char *) 55296
char *debug_print_init::at_cols
__constant char *debug_print_init::at_cols#0 = debug_print_init::COLS+(unsigned int)$10*$28 // at_cols
char *debug_print_init::at_line
__constant char *debug_print_init::at_line#0 = SCREEN+(unsigned int)$10*$28 // at_line
char debug_print_init::c
char debug_print_init::c#1 // c zp[1]:28 667.3333333333334
char debug_print_init::c#2 // c zp[1]:28 2969.1875
char debug_print_init::col
char debug_print_init::col#0 // reg byte x 5556.111111111112
char debug_print_init::i
char debug_print_init::i#1 // i zp[1]:27 1501.5
char debug_print_init::i#2 // i zp[1]:27 454.7272727272727
char debug_print_init::j
char debug_print_init::j#1 // reg byte y 15001.5
char debug_print_init::j#2 // reg byte y 5500.550000000001
__constant char debug_print_init::str[3] = "sx"
__constant char debug_print_init::str1[3] = "sy"
__constant char debug_print_init::str10[3] = "xp"
__constant char debug_print_init::str11[3] = "yp"
__constant char debug_print_init::str2[3] = "sz"
__constant char debug_print_init::str3[2] = "x"
__constant char debug_print_init::str4[2] = "y"
__constant char debug_print_init::str5[2] = "z"
__constant char debug_print_init::str6[3] = "xr"
__constant char debug_print_init::str7[3] = "yr"
__constant char debug_print_init::str8[3] = "zr"
__constant char debug_print_init::str9[3] = "pp"
void main()
void * memset(void *str , char c , unsigned int num)
char memset::c
__constant char memset::c#0 = ' ' // c
char *memset::dst
char *memset::dst#1 // dst zp[2]:7 200002.0
char *memset::dst#2 // dst zp[2]:7 133334.66666666666
char *memset::end
__constant char *memset::end#0 = (char *)memset::str#0+memset::num#0 // end
unsigned int memset::num
__constant unsigned int memset::num#0 = $3e8 // num
void *memset::return
void *memset::str
__constant void *memset::str#0 = (void *)print_screen#0 // str
__constant char mulf_sqr1[$200] = kickasm {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }
 }}
__constant char mulf_sqr2[$200] = kickasm {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }
 }}
__loadstore volatile signed char pp // zp[1]:37 185.24074074074073
__constant signed char pps[8] = { fill( 8, 0) }
void print_char_at(char ch , char *at)
char *print_char_at::at
char *print_char_at::at#0 // at zp[2]:2 2.0000002E7
char *print_char_at::at#1 // at zp[2]:2 2.0000002E7
char *print_char_at::at#2 // at zp[2]:2 2.00000002E8
char *print_char_at::at#3 // at zp[2]:2 1.00000001E8
char *print_char_at::at#4 // at zp[2]:2 1.220000005E9
char print_char_at::ch
char print_char_at::ch#2 // reg byte x 1.00000001E8
char print_char_at::ch#3 // reg byte x 2.00000002E8
char print_char_at::ch#4 // reg byte x 1.200000003E9
void print_cls()
__constant const char print_hextab[] = "0123456789abcdef"z
void print_schar_at(signed char b , char *at)
char *print_schar_at::at
char *print_schar_at::at#0 // at zp[2]:2 1001.0
char *print_schar_at::at#1 // at zp[2]:2 1001.0
char *print_schar_at::at#15 // at zp[2]:2 1000001.0
char *print_schar_at::at#16 // at zp[2]:2 1000001.0
char *print_schar_at::at#17 // at zp[2]:2 1000001.0
char *print_schar_at::at#18 // at zp[2]:2 1000001.0
char *print_schar_at::at#19 // at zp[2]:2 1000001.0
char *print_schar_at::at#2 // at zp[2]:2 1001.0
char *print_schar_at::at#20 // at zp[2]:2 1000001.0
char *print_schar_at::at#21 // at zp[2]:2 4500376.5
signed char print_schar_at::b
signed char print_schar_at::b#0 // b zp[1]:4 2.0000002E7
signed char print_schar_at::b#1 // b zp[1]:4 2002.0
signed char print_schar_at::b#10 // b zp[1]:4 20002.0
signed char print_schar_at::b#11 // b zp[1]:4 20002.0
signed char print_schar_at::b#12 // b zp[1]:4 20002.0
signed char print_schar_at::b#13 // b zp[1]:4 20002.0
signed char print_schar_at::b#14 // b zp[1]:4 20002.0
signed char print_schar_at::b#15 // b zp[1]:4 20002.0
signed char print_schar_at::b#16 // b zp[1]:4 2000002.0
signed char print_schar_at::b#17 // b zp[1]:4 2000002.0
signed char print_schar_at::b#18 // b zp[1]:4 2000002.0
signed char print_schar_at::b#19 // b zp[1]:4 2000002.0
signed char print_schar_at::b#2 // b zp[1]:4 2002.0
signed char print_schar_at::b#20 // b zp[1]:4 2000002.0
signed char print_schar_at::b#21 // b zp[1]:4 2000002.0
signed char print_schar_at::b#22 // b zp[1]:4 6018837.166666667
signed char print_schar_at::b#24 // b zp[1]:4 1.0000001E7
signed char print_schar_at::b#3 // b zp[1]:4 2002.0
signed char print_schar_at::b#4 // b zp[1]:4 20002.0
signed char print_schar_at::b#5 // b zp[1]:4 20002.0
signed char print_schar_at::b#7 // b zp[1]:4 20002.0
signed char print_schar_at::b#8 // b zp[1]:4 20002.0
signed char print_schar_at::b#9 // b zp[1]:4 20002.0
char *print_screen
__constant char *print_screen#0 = (char *) 1024 // print_screen
void print_str_at(char *str , char *at)
char *print_str_at::at
char *print_str_at::at#0 // at zp[2]:7 10001.0
char *print_str_at::at#13 // at zp[2]:7 10334.666666666666
char *print_str_at::at#15 // at zp[2]:7 1001.0
char *print_str_at::str
char *print_str_at::str#0 // str zp[2]:2 20002.0
char *print_str_at::str#13 // str zp[2]:2 10251.25
char *print_str_at::str#15 // str zp[2]:2 1001.0
void print_uchar_at(char b , char *at)
char print_uchar_at::$0 // reg byte a 2.00000002E8
char print_uchar_at::$2 // reg byte y 1.00000001E8
char *print_uchar_at::at
char *print_uchar_at::at#0 // at zp[2]:2 3.000000042857143E7
char print_uchar_at::b
char print_uchar_at::b#0 // b zp[1]:4 4.2000000599999994E7
__loadstore volatile unsigned int psp1 // zp[2]:40 0.28260869565217395
__loadstore volatile unsigned int psp2 // zp[2]:38 0.28888888888888886
void rotate_matrix(signed char x , signed char y , signed char z)
signed char rotate_matrix::x
signed char rotate_matrix::x#0 // reg byte x 36667.33333333333
signed char rotate_matrix::y
signed char rotate_matrix::y#0 // y zp[1]:4 36667.33333333333
signed char rotate_matrix::z
signed char rotate_matrix::z#0 // z zp[1]:6 36667.33333333333
__constant signed char rotation_matrix[9] = { fill( 9, 0) }
void sprites_init()
__constant char *sprites_init::SCREEN = (char *) 1024
char sprites_init::i
char sprites_init::i#1 // reg byte x 1501.5
char sprites_init::i#2 // reg byte x 1334.6666666666667
char *sprites_init::sprites_ptr
__constant char *sprites_init::sprites_ptr#0 = sprites_init::SCREEN+$3f8 // sprites_ptr
void store_matrix()
signed char sx
signed char sx#11 // sx zp[1]:28 141.34782608695653
signed char sx#2 // sx zp[1]:28 1001.0
signed char sy
signed char sy#11 // sy zp[1]:27 139.8279569892473
signed char sy#2 // sy zp[1]:27 2002.0
__constant signed char sz = 0
__loadstore volatile signed char xp // zp[1]:36 188.7358490566038
__constant signed char xps[8] = { fill( 8, 0) }
__loadstore volatile signed char xr // zp[1]:24 18334.0
__constant signed char xrs[8] = { fill( 8, 0) }
__constant signed char xs[8] = { -$34, -$34, -$34, 0, 0, $34, $34, $34 }
__loadstore volatile signed char yp // zp[1]:35 192.3653846153846
__constant signed char yps[8] = { fill( 8, 0) }
__loadstore volatile signed char yr // zp[1]:25 18334.0
__constant signed char yrs[8] = { fill( 8, 0) }
__constant signed char ys[8] = { -$34, 0, $34, -$34, $34, -$34, 0, $34 }
__loadstore volatile signed char zr // zp[1]:26 18334.0
__constant signed char zrs[8] = { fill( 8, 0) }
__constant signed char zs[8] = { $34, $34, $34, $34, $34, $34, $34, $34 }

reg byte x [ sprites_init::i#2 sprites_init::i#1 ]
reg byte y [ debug_print_init::j#2 debug_print_init::j#1 ]
zp[1]:28 [ sx#11 sx#2 debug_print_init::c#2 debug_print_init::c#1 ]
zp[1]:27 [ sy#11 sy#2 calculate_matrix::sy#0 debug_print_init::i#2 debug_print_init::i#1 ]
zp[1]:9 [ anim::i#2 anim::i#1 ]
reg byte x [ print_char_at::ch#4 print_char_at::ch#2 print_char_at::ch#3 ]
zp[1]:24 [ xr ]
zp[1]:25 [ yr ]
zp[1]:26 [ zr ]
zp[1]:37 [ pp ]
zp[1]:36 [ xp ]
zp[1]:35 [ yp ]
zp[2]:40 [ psp1 ]
zp[2]:38 [ psp2 ]
reg byte x [ debug_print_init::col#0 ]
zp[2]:2 [ debug_print_init::$41 print_schar_at::at#21 print_schar_at::at#15 print_schar_at::at#16 print_schar_at::at#17 print_schar_at::at#18 print_schar_at::at#19 print_schar_at::at#20 print_schar_at::at#0 print_schar_at::at#1 print_schar_at::at#2 print_char_at::at#4 print_char_at::at#0 print_char_at::at#1 print_char_at::at#2 print_char_at::at#3 print_uchar_at::at#0 print_str_at::str#13 print_str_at::str#15 print_str_at::str#0 ]
zp[2]:7 [ debug_print_init::$44 memset::dst#2 memset::dst#1 print_str_at::at#13 print_str_at::at#15 print_str_at::at#0 ]
zp[2]:10 [ debug_print_init::$47 ]
zp[2]:12 [ debug_print_init::$50 ]
zp[2]:14 [ debug_print_init::$53 ]
zp[2]:16 [ debug_print_init::$56 ]
zp[2]:18 [ debug_print_init::$59 ]
zp[2]:20 [ debug_print_init::$62 ]
zp[2]:22 [ debug_print_init::$65 ]
reg byte x [ calculate_matrix::sx#0 ]
reg byte x [ rotate_matrix::x#0 ]
reg byte x [ anim::i2#0 ]
reg byte a [ anim::$13 ]
reg byte a [ anim::$9 ]
reg byte a [ anim::$14 ]
reg byte a [ anim::$10 ]
zp[1]:5 [ calculate_matrix::t1#0 debug_print::i#2 debug_print::i#1 ]
zp[1]:4 [ calculate_matrix::t2#0 rotate_matrix::y#0 print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 print_uchar_at::b#0 ]
zp[1]:6 [ calculate_matrix::t3#0 rotate_matrix::z#0 debug_print::c#2 debug_print::c#1 ]
zp[1]:30 [ calculate_matrix::t4#0 ]
zp[1]:33 [ calculate_matrix::t5#0 ]
zp[1]:29 [ calculate_matrix::t6#0 ]
zp[1]:31 [ calculate_matrix::t7#0 ]
zp[1]:32 [ calculate_matrix::t8#0 ]
zp[1]:34 [ calculate_matrix::t9#0 ]
reg byte x [ calculate_matrix::t10#0 ]
reg byte a [ calculate_matrix::$10 ]
reg byte a [ calculate_matrix::$11 ]
reg byte a [ calculate_matrix::$12 ]
reg byte a [ calculate_matrix::$13 ]
reg byte a [ calculate_matrix::$14 ]
reg byte a [ calculate_matrix::$15 ]
reg byte a [ calculate_matrix::$16 ]
reg byte a [ calculate_matrix::$17 ]
reg byte a [ calculate_matrix::$18 ]
reg byte a [ calculate_matrix::$19 ]
reg byte a [ calculate_matrix::$20 ]
reg byte a [ calculate_matrix::$21 ]
reg byte a [ calculate_matrix::$22 ]
reg byte a [ calculate_matrix::$23 ]
reg byte a [ calculate_matrix::$24 ]
reg byte a [ calculate_matrix::$25 ]
reg byte a [ calculate_matrix::$26 ]
reg byte a [ calculate_matrix::$27 ]
reg byte a [ calculate_matrix::$28 ]
reg byte a [ calculate_matrix::$29 ]
reg byte a [ calculate_matrix::$30 ]
reg byte a [ calculate_matrix::$31 ]
reg byte a [ calculate_matrix::$32 ]
reg byte a [ calculate_matrix::$33 ]
reg byte a [ calculate_matrix::$34 ]
reg byte a [ debug_print::print_schar_pos1_sb#0 ]
reg byte a [ debug_print::print_schar_pos2_sb#0 ]
reg byte a [ debug_print::print_schar_pos4_sb#0 ]
reg byte a [ debug_print::print_schar_pos5_sb#0 ]
reg byte a [ debug_print::print_schar_pos6_sb#0 ]
reg byte a [ debug_print::print_schar_pos7_sb#0 ]
reg byte a [ debug_print::print_schar_pos8_sb#0 ]
reg byte a [ debug_print::print_schar_pos9_sb#0 ]
reg byte a [ debug_print::print_schar_pos10_sb#0 ]
reg byte a [ debug_print::print_schar_pos11_sb#0 ]
reg byte a [ debug_print::print_schar_pos12_sb#0 ]
reg byte a [ print_uchar_at::$0 ]
reg byte y [ print_uchar_at::$2 ]
