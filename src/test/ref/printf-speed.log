Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Added struct type cast to parameter value list call printf_string main::$3 (struct printf_format_string){ 0, 0 } 
Added struct type cast to parameter value list call printf_uint main::i (struct printf_format_number){ 0, 0, 0, 0, 0, DECIMAL } 
Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call call __init 
Eliminating unused variable with no statement main::$2
Eliminating unused variable with no statement main::$4
Eliminating unused variable with no statement main::$10
Eliminating unused variable with no statement main::$12
Unwinding list assignment { main::$2_TENTHS, main::$2_SEC, main::$2_MIN, main::$2_HOURS } = { tod_read::return_TENTHS, tod_read::return_SEC, tod_read::return_MIN, tod_read::return_HOURS }
Unwinding list assignment { tod_read::return_TENTHS#2, tod_read::return_SEC#2, tod_read::return_MIN#2, tod_read::return_HOURS#2 } = { tod_read::return_TENTHS#1, tod_read::return_SEC#1, tod_read::return_MIN#1, tod_read::return_HOURS#1 }

CONTROL FLOW GRAPH SSA

byte toupper(byte toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  toupper::ch#1 = phi( strupr::@2/toupper::ch#0 )
  toupper::$0 = toupper::ch#1 >= 'a'
  toupper::$1 = toupper::ch#1 <= 'z'
  toupper::$2 = toupper::$0 && toupper::$1
  if(toupper::$2) goto toupper::@1
  to:toupper::@2
toupper::@1: scope:[toupper]  from toupper
  toupper::ch#2 = phi( toupper/toupper::ch#1 )
  toupper::$3 = toupper::ch#2 + 'A'-'a'
  toupper::return#0 = toupper::$3
  to:toupper::@return
toupper::@2: scope:[toupper]  from toupper
  toupper::ch#3 = phi( toupper/toupper::ch#1 )
  toupper::return#1 = toupper::ch#3
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper::@1 toupper::@2
  toupper::return#4 = phi( toupper::@1/toupper::return#0, toupper::@2/toupper::return#1 )
  toupper::return#2 = toupper::return#4
  return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@3 cscroll::@4
  memcpy::num#2 = phi( cscroll::@3/memcpy::num#0, cscroll::@4/memcpy::num#1 )
  memcpy::destination#2 = phi( cscroll::@3/memcpy::destination#0, cscroll::@4/memcpy::destination#1 )
  memcpy::source#2 = phi( cscroll::@3/memcpy::source#0, cscroll::@4/memcpy::source#1 )
  memcpy::src#0 = ((byte*)) memcpy::source#2
  memcpy::dst#0 = ((byte*)) memcpy::destination#2
  memcpy::$2 = (byte*)memcpy::source#2
  memcpy::$0 = memcpy::$2 + memcpy::num#2
  memcpy::src_end#0 = memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  memcpy::destination#4 = phi( memcpy/memcpy::destination#2, memcpy::@2/memcpy::destination#5 )
  memcpy::dst#3 = phi( memcpy/memcpy::dst#0, memcpy::@2/memcpy::dst#1 )
  memcpy::src_end#1 = phi( memcpy/memcpy::src_end#0, memcpy::@2/memcpy::src_end#2 )
  memcpy::src#2 = phi( memcpy/memcpy::src#0, memcpy::@2/memcpy::src#1 )
  memcpy::$1 = memcpy::src#2 != memcpy::src_end#1
  if(memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  memcpy::destination#5 = phi( memcpy::@1/memcpy::destination#4 )
  memcpy::src_end#2 = phi( memcpy::@1/memcpy::src_end#1 )
  memcpy::dst#2 = phi( memcpy::@1/memcpy::dst#3 )
  memcpy::src#3 = phi( memcpy::@1/memcpy::src#2 )
  *memcpy::dst#2 = *memcpy::src#3
  memcpy::dst#1 = ++ memcpy::dst#2
  memcpy::src#1 = ++ memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  memcpy::destination#3 = phi( memcpy::@1/memcpy::destination#4 )
  memcpy::return#0 = memcpy::destination#3
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  memcpy::return#4 = phi( memcpy::@3/memcpy::return#0 )
  memcpy::return#1 = memcpy::return#4
  return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@5 cscroll::@6
  memset::c#5 = phi( cscroll::@5/memset::c#0, cscroll::@6/memset::c#1 )
  memset::str#4 = phi( cscroll::@5/memset::str#0, cscroll::@6/memset::str#1 )
  memset::num#2 = phi( cscroll::@5/memset::num#0, cscroll::@6/memset::num#1 )
  memset::$0 = memset::num#2 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#2 = phi( memset/memset::str#4, memset::@3/memset::str#5 )
  memset::return#0 = memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#4 = phi( memset/memset::c#5 )
  memset::num#3 = phi( memset/memset::num#2 )
  memset::str#3 = phi( memset/memset::str#4 )
  memset::$4 = (byte*)memset::str#3
  memset::$2 = memset::$4 + memset::num#3
  memset::end#0 = memset::$2
  memset::dst#0 = ((byte*)) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#3 = phi( memset::@2/memset::c#4, memset::@4/memset::c#2 )
  memset::str#5 = phi( memset::@2/memset::str#3, memset::@4/memset::str#6 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#6 = phi( memset::@3/memset::str#5 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#2 = phi( memset::@3/memset::c#3 )
  *memset::dst#3 = memset::c#2
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#4 = phi( memset::@1/memset::return#0 )
  memset::return#1 = memset::return#4
  return 
  to:@return

byte* strupr(byte* strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  strupr::str#1 = phi( printf_number_buffer::@11/strupr::str#0 )
  strupr::src#0 = strupr::str#1
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@4
  strupr::str#3 = phi( strupr/strupr::str#1, strupr::@4/strupr::str#4 )
  strupr::src#2 = phi( strupr/strupr::src#0, strupr::@4/strupr::src#1 )
  strupr::$1 = 0 != *strupr::src#2
  if(strupr::$1) goto strupr::@2
  to:strupr::@3
strupr::@2: scope:[strupr]  from strupr::@1
  strupr::str#5 = phi( strupr::@1/strupr::str#3 )
  strupr::src#3 = phi( strupr::@1/strupr::src#2 )
  toupper::ch#0 = *strupr::src#3
  call toupper 
  toupper::return#3 = toupper::return#2
  to:strupr::@4
strupr::@4: scope:[strupr]  from strupr::@2
  strupr::str#4 = phi( strupr::@2/strupr::str#5 )
  strupr::src#4 = phi( strupr::@2/strupr::src#3 )
  toupper::return#5 = phi( strupr::@2/toupper::return#3 )
  strupr::$0 = toupper::return#5
  *strupr::src#4 = strupr::$0
  strupr::src#1 = ++ strupr::src#4
  to:strupr::@1
strupr::@3: scope:[strupr]  from strupr::@1
  strupr::str#2 = phi( strupr::@1/strupr::str#3 )
  strupr::return#0 = strupr::str#2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@3
  strupr::return#3 = phi( strupr::@3/strupr::return#0 )
  strupr::return#1 = strupr::return#3
  return 
  to:@return

word strlen(byte* strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6 printf_string::@3
  strlen::str#5 = phi( printf_number_buffer::@6/strlen::str#1, printf_string::@3/strlen::str#2 )
  strlen::len#0 = 0
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  strlen::len#4 = phi( strlen/strlen::len#0, strlen::@2/strlen::len#1 )
  strlen::str#3 = phi( strlen/strlen::str#5, strlen::@2/strlen::str#0 )
  strlen::$0 = 0 != *strlen::str#3
  if(strlen::$0) goto strlen::@2
  to:strlen::@3
strlen::@2: scope:[strlen]  from strlen::@1
  strlen::str#4 = phi( strlen::@1/strlen::str#3 )
  strlen::len#2 = phi( strlen::@1/strlen::len#4 )
  strlen::len#1 = ++ strlen::len#2
  strlen::str#0 = ++ strlen::str#4
  to:strlen::@1
strlen::@3: scope:[strlen]  from strlen::@1
  strlen::len#3 = phi( strlen::@1/strlen::len#4 )
  strlen::return#0 = strlen::len#3
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@3
  strlen::return#4 = phi( strlen::@3/strlen::return#0 )
  strlen::return#1 = strlen::return#4
  return 
  to:@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from printf_uint::@3
  utoa::buffer#21 = phi( printf_uint::@3/utoa::buffer#5 )
  utoa::value#12 = phi( printf_uint::@3/utoa::value#1 )
  utoa::radix#1 = phi( printf_uint::@3/utoa::radix#0 )
  utoa::max_digits#0 = 0
  utoa::digit_values#0 = (word*) 0
  utoa::$0 = utoa::radix#1 == DECIMAL
  if(utoa::$0) goto utoa::@1
  to:utoa::@6
utoa::@1: scope:[utoa]  from utoa
  utoa::buffer#17 = phi( utoa/utoa::buffer#21 )
  utoa::value#8 = phi( utoa/utoa::value#12 )
  utoa::max_digits#1 = 5
  utoa::digit_values#1 = RADIX_DECIMAL_VALUES
  to:utoa::@5
utoa::@6: scope:[utoa]  from utoa
  utoa::value#13 = phi( utoa/utoa::value#12 )
  utoa::buffer#16 = phi( utoa/utoa::buffer#21 )
  utoa::radix#2 = phi( utoa/utoa::radix#1 )
  utoa::$1 = utoa::radix#2 == HEXADECIMAL
  if(utoa::$1) goto utoa::@2
  to:utoa::@7
utoa::@2: scope:[utoa]  from utoa::@6
  utoa::buffer#18 = phi( utoa::@6/utoa::buffer#16 )
  utoa::value#9 = phi( utoa::@6/utoa::value#13 )
  utoa::max_digits#2 = 4
  utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
  to:utoa::@5
utoa::@7: scope:[utoa]  from utoa::@6
  utoa::value#14 = phi( utoa::@6/utoa::value#13 )
  utoa::buffer#13 = phi( utoa::@6/utoa::buffer#16 )
  utoa::radix#3 = phi( utoa::@6/utoa::radix#2 )
  utoa::$2 = utoa::radix#3 == OCTAL
  if(utoa::$2) goto utoa::@3
  to:utoa::@8
utoa::@3: scope:[utoa]  from utoa::@7
  utoa::buffer#19 = phi( utoa::@7/utoa::buffer#13 )
  utoa::value#10 = phi( utoa::@7/utoa::value#14 )
  utoa::max_digits#3 = 6
  utoa::digit_values#3 = RADIX_OCTAL_VALUES
  to:utoa::@5
utoa::@8: scope:[utoa]  from utoa::@7
  utoa::value#15 = phi( utoa::@7/utoa::value#14 )
  utoa::buffer#10 = phi( utoa::@7/utoa::buffer#13 )
  utoa::radix#4 = phi( utoa::@7/utoa::radix#3 )
  utoa::$3 = utoa::radix#4 == BINARY
  if(utoa::$3) goto utoa::@4
  to:utoa::@9
utoa::@4: scope:[utoa]  from utoa::@8
  utoa::buffer#20 = phi( utoa::@8/utoa::buffer#10 )
  utoa::value#11 = phi( utoa::@8/utoa::value#15 )
  utoa::max_digits#4 = $10
  utoa::digit_values#4 = RADIX_BINARY_VALUES
  to:utoa::@5
utoa::@9: scope:[utoa]  from utoa::@8
  utoa::buffer#6 = phi( utoa::@8/utoa::buffer#10 )
  *utoa::buffer#6 = 'e'
  utoa::buffer#0 = ++ utoa::buffer#6
  *utoa::buffer#0 = 'r'
  utoa::buffer#1 = ++ utoa::buffer#0
  *utoa::buffer#1 = 'r'
  utoa::buffer#2 = ++ utoa::buffer#1
  *utoa::buffer#2 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@12 utoa::@9
  return 
  to:@return
utoa::@5: scope:[utoa]  from utoa::@1 utoa::@2 utoa::@3 utoa::@4
  utoa::buffer#15 = phi( utoa::@1/utoa::buffer#17, utoa::@2/utoa::buffer#18, utoa::@3/utoa::buffer#19, utoa::@4/utoa::buffer#20 )
  utoa::value#7 = phi( utoa::@1/utoa::value#8, utoa::@2/utoa::value#9, utoa::@3/utoa::value#10, utoa::@4/utoa::value#11 )
  utoa::digit_values#8 = phi( utoa::@1/utoa::digit_values#1, utoa::@2/utoa::digit_values#2, utoa::@3/utoa::digit_values#3, utoa::@4/utoa::digit_values#4 )
  utoa::max_digits#7 = phi( utoa::@1/utoa::max_digits#1, utoa::@2/utoa::max_digits#2, utoa::@3/utoa::max_digits#3, utoa::@4/utoa::max_digits#4 )
  utoa::started#0 = 0
  utoa::digit#0 = 0
  to:utoa::@10
utoa::@10: scope:[utoa]  from utoa::@13 utoa::@5
  utoa::buffer#11 = phi( utoa::@13/utoa::buffer#14, utoa::@5/utoa::buffer#15 )
  utoa::started#3 = phi( utoa::@13/utoa::started#4, utoa::@5/utoa::started#0 )
  utoa::value#5 = phi( utoa::@13/utoa::value#6, utoa::@5/utoa::value#7 )
  utoa::digit_values#6 = phi( utoa::@13/utoa::digit_values#7, utoa::@5/utoa::digit_values#8 )
  utoa::digit#2 = phi( utoa::@13/utoa::digit#1, utoa::@5/utoa::digit#0 )
  utoa::max_digits#5 = phi( utoa::@13/utoa::max_digits#6, utoa::@5/utoa::max_digits#7 )
  utoa::$4 = utoa::max_digits#5 - 1
  utoa::$5 = utoa::digit#2 < utoa::$4
  if(utoa::$5) goto utoa::@11
  to:utoa::@12
utoa::@11: scope:[utoa]  from utoa::@10
  utoa::max_digits#8 = phi( utoa::@10/utoa::max_digits#5 )
  utoa::buffer#12 = phi( utoa::@10/utoa::buffer#11 )
  utoa::started#2 = phi( utoa::@10/utoa::started#3 )
  utoa::value#2 = phi( utoa::@10/utoa::value#5 )
  utoa::digit_values#5 = phi( utoa::@10/utoa::digit_values#6 )
  utoa::digit#3 = phi( utoa::@10/utoa::digit#2 )
  utoa::$10 = utoa::digit#3 * SIZEOF_WORD
  utoa::digit_value#0 = utoa::digit_values#5[utoa::$10]
  utoa::$6 = utoa::value#2 >= utoa::digit_value#0
  utoa::$7 = utoa::started#2 || utoa::$6
  utoa::$8 = ! utoa::$7
  if(utoa::$8) goto utoa::@13
  to:utoa::@14
utoa::@12: scope:[utoa]  from utoa::@10
  utoa::buffer#7 = phi( utoa::@10/utoa::buffer#11 )
  utoa::value#3 = phi( utoa::@10/utoa::value#5 )
  utoa::$11 = (byte)utoa::value#3
  *utoa::buffer#7 = DIGITS[utoa::$11]
  utoa::buffer#3 = ++ utoa::buffer#7
  *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@13: scope:[utoa]  from utoa::@11 utoa::@15
  utoa::buffer#14 = phi( utoa::@11/utoa::buffer#12, utoa::@15/utoa::buffer#4 )
  utoa::started#4 = phi( utoa::@11/utoa::started#2, utoa::@15/utoa::started#1 )
  utoa::value#6 = phi( utoa::@11/utoa::value#2, utoa::@15/utoa::value#0 )
  utoa::digit_values#7 = phi( utoa::@11/utoa::digit_values#5, utoa::@15/utoa::digit_values#9 )
  utoa::max_digits#6 = phi( utoa::@11/utoa::max_digits#8, utoa::@15/utoa::max_digits#9 )
  utoa::digit#4 = phi( utoa::@11/utoa::digit#3, utoa::@15/utoa::digit#5 )
  utoa::digit#1 = ++ utoa::digit#4
  to:utoa::@10
utoa::@14: scope:[utoa]  from utoa::@11
  utoa::digit_values#10 = phi( utoa::@11/utoa::digit_values#5 )
  utoa::max_digits#10 = phi( utoa::@11/utoa::max_digits#8 )
  utoa::digit#6 = phi( utoa::@11/utoa::digit#3 )
  utoa::digit_value#1 = phi( utoa::@11/utoa::digit_value#0 )
  utoa::value#4 = phi( utoa::@11/utoa::value#2 )
  utoa::buffer#8 = phi( utoa::@11/utoa::buffer#12 )
  utoa_append::buffer#0 = utoa::buffer#8
  utoa_append::value#0 = utoa::value#4
  utoa_append::sub#0 = utoa::digit_value#1
  call utoa_append 
  utoa_append::return#0 = utoa_append::return#2
  to:utoa::@15
utoa::@15: scope:[utoa]  from utoa::@14
  utoa::digit_values#9 = phi( utoa::@14/utoa::digit_values#10 )
  utoa::max_digits#9 = phi( utoa::@14/utoa::max_digits#10 )
  utoa::digit#5 = phi( utoa::@14/utoa::digit#6 )
  utoa::buffer#9 = phi( utoa::@14/utoa::buffer#8 )
  utoa_append::return#3 = phi( utoa::@14/utoa_append::return#0 )
  utoa::$9 = utoa_append::return#3
  utoa::value#0 = utoa::$9
  utoa::buffer#4 = ++ utoa::buffer#9
  utoa::started#1 = 1
  to:utoa::@13

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@14
  utoa_append::buffer#3 = phi( utoa::@14/utoa_append::buffer#0 )
  utoa_append::sub#3 = phi( utoa::@14/utoa_append::sub#0 )
  utoa_append::value#5 = phi( utoa::@14/utoa_append::value#0 )
  utoa_append::digit#0 = 0
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  utoa_append::buffer#2 = phi( utoa_append/utoa_append::buffer#3, utoa_append::@2/utoa_append::buffer#4 )
  utoa_append::digit#4 = phi( utoa_append/utoa_append::digit#0, utoa_append::@2/utoa_append::digit#1 )
  utoa_append::sub#1 = phi( utoa_append/utoa_append::sub#3, utoa_append::@2/utoa_append::sub#2 )
  utoa_append::value#2 = phi( utoa_append/utoa_append::value#5, utoa_append::@2/utoa_append::value#1 )
  utoa_append::$0 = utoa_append::value#2 >= utoa_append::sub#1
  if(utoa_append::$0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  utoa_append::buffer#4 = phi( utoa_append::@1/utoa_append::buffer#2 )
  utoa_append::sub#2 = phi( utoa_append::@1/utoa_append::sub#1 )
  utoa_append::value#3 = phi( utoa_append::@1/utoa_append::value#2 )
  utoa_append::digit#2 = phi( utoa_append::@1/utoa_append::digit#4 )
  utoa_append::digit#1 = ++ utoa_append::digit#2
  utoa_append::value#1 = utoa_append::value#3 - utoa_append::sub#2
  to:utoa_append::@1
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  utoa_append::value#4 = phi( utoa_append::@1/utoa_append::value#2 )
  utoa_append::buffer#1 = phi( utoa_append::@1/utoa_append::buffer#2 )
  utoa_append::digit#3 = phi( utoa_append::@1/utoa_append::digit#4 )
  *utoa_append::buffer#1 = DIGITS[utoa_append::digit#3]
  utoa_append::return#1 = utoa_append::value#4
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  utoa_append::return#4 = phi( utoa_append::@3/utoa_append::return#1 )
  utoa_append::return#2 = utoa_append::return#4
  return 
  to:@return

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from cscroll::@2 main::@14 main::@3 main::@5
  gotoxy::x#7 = phi( cscroll::@2/gotoxy::x#1, main::@14/gotoxy::x#4, main::@3/gotoxy::x#2, main::@5/gotoxy::x#3 )
  gotoxy::y#5 = phi( cscroll::@2/gotoxy::y#1, main::@14/gotoxy::y#4, main::@3/gotoxy::y#2, main::@5/gotoxy::y#3 )
  gotoxy::$0 = gotoxy::y#5 > $19
  gotoxy::$1 = ! gotoxy::$0
  if(gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@3
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  gotoxy::y#7 = phi( gotoxy/gotoxy::y#5, gotoxy::@3/gotoxy::y#0 )
  gotoxy::x#5 = phi( gotoxy/gotoxy::x#7, gotoxy::@3/gotoxy::x#8 )
  gotoxy::$2 = gotoxy::x#5 >= $28
  gotoxy::$3 = ! gotoxy::$2
  if(gotoxy::$3) goto gotoxy::@2
  to:gotoxy::@4
gotoxy::@3: scope:[gotoxy]  from gotoxy
  gotoxy::x#8 = phi( gotoxy/gotoxy::x#7 )
  gotoxy::y#0 = 0
  to:gotoxy::@1
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  gotoxy::y#6 = phi( gotoxy::@1/gotoxy::y#7, gotoxy::@4/gotoxy::y#8 )
  gotoxy::x#6 = phi( gotoxy::@1/gotoxy::x#5, gotoxy::@4/gotoxy::x#0 )
  conio_cursor_x = gotoxy::x#6
  conio_cursor_y = gotoxy::y#6
  gotoxy::$7 = (word)gotoxy::y#6
  gotoxy::$4 = gotoxy::$7 * $28
  gotoxy::line_offset#0 = gotoxy::$4
  gotoxy::$5 = CONIO_SCREEN_TEXT + gotoxy::line_offset#0
  conio_line_text = gotoxy::$5
  gotoxy::$6 = CONIO_SCREEN_COLORS + gotoxy::line_offset#0
  conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  gotoxy::y#8 = phi( gotoxy::@1/gotoxy::y#7 )
  gotoxy::x#0 = 0
  to:gotoxy::@2
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  return 
  to:@return

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@9 printf_padding::@2
  cputc::c#3 = phi( cputs::@2/cputc::c#0, printf_number_buffer::@9/cputc::c#2, printf_padding::@2/cputc::c#1 )
  cputc::$0 = cputc::c#3 == '
'
  if(cputc::$0) goto cputc::@1
  to:cputc::@2
cputc::@1: scope:[cputc]  from cputc
  call cputln 
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@1
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc
  cputc::c#4 = phi( cputc/cputc::c#3 )
  conio_line_text[conio_cursor_x] = cputc::c#4
  conio_line_color[conio_cursor_x] = conio_textcolor
  conio_cursor_x = ++ conio_cursor_x
  cputc::$1 = conio_cursor_x == $28
  cputc::$2 = ! cputc::$1
  if(cputc::$2) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  call cputln 
  to:cputc::@5
cputc::@5: scope:[cputc]  from cputc::@3
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@2 cputc::@4 cputc::@5
  return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  conio_line_text = conio_line_text + $28
  conio_line_color = conio_line_color + $28
  conio_cursor_x = 0
  conio_cursor_y = ++ conio_cursor_y
  call cscroll 
  to:cputln::@1
cputln::@1: scope:[cputln]  from cputln
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln::@1
  return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  cscroll::$0 = conio_cursor_y == $19
  cscroll::$1 = ! cscroll::$0
  if(cscroll::$1) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  cscroll::$7 = 0 != conio_scroll_enable
  if(cscroll::$7) goto cscroll::@3
  to:cscroll::@2
cscroll::@3: scope:[cscroll]  from cscroll::@1
  memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
  memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
  memcpy::num#0 = $19*$28-$28
  call memcpy 
  memcpy::return#2 = memcpy::return#1
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
  memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
  memcpy::num#1 = $19*$28-$28
  call memcpy 
  memcpy::return#3 = memcpy::return#1
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  memset::str#0 = (void*)CONIO_SCREEN_TEXT+$19*$28-$28
  memset::c#0 = ' '
  memset::num#0 = $28
  call memset 
  memset::return#2 = memset::return#1
  to:cscroll::@6
cscroll::@6: scope:[cscroll]  from cscroll::@5
  memset::str#1 = (void*)CONIO_SCREEN_COLORS+$19*$28-$28
  memset::c#1 = conio_textcolor
  memset::num#1 = $28
  call memset 
  memset::return#3 = memset::return#1
  to:cscroll::@7
cscroll::@7: scope:[cscroll]  from cscroll::@6
  conio_line_text = conio_line_text - $28
  conio_line_color = conio_line_color - $28
  conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@2: scope:[cscroll]  from cscroll::@1
  gotoxy::x#1 = 0
  gotoxy::y#1 = 0
  call gotoxy 
  to:cscroll::@8
cscroll::@8: scope:[cscroll]  from cscroll::@2
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@7 cscroll::@8
  return 
  to:@return

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from main::@4 main::@9 printf_number_buffer::@5 printf_string::@2
  cputs::s#6 = phi( main::@4/cputs::s#4, main::@9/cputs::s#3, printf_number_buffer::@5/cputs::s#1, printf_string::@2/cputs::s#2 )
  cputs::c#0 = 0
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@3
  cputs::s#5 = phi( cputs/cputs::s#6, cputs::@3/cputs::s#7 )
  cputs::c#1 = *cputs::s#5
  cputs::$0 = cputs::c#1
  cputs::s#0 = ++ cputs::s#5
  cputs::$2 = 0 != cputs::$0
  if(cputs::$2) goto cputs::@2
  to:cputs::@return
cputs::@2: scope:[cputs]  from cputs::@1
  cputs::s#8 = phi( cputs::@1/cputs::s#0 )
  cputs::c#2 = phi( cputs::@1/cputs::c#1 )
  cputc::c#0 = cputs::c#2
  call cputc 
  to:cputs::@3
cputs::@3: scope:[cputs]  from cputs::@2
  cputs::s#7 = phi( cputs::@2/cputs::s#8 )
  to:cputs::@1
cputs::@return: scope:[cputs]  from cputs::@1
  return 
  to:@return

void printf_padding(byte printf_padding::pad , byte printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8 printf_string::@5 printf_string::@6
  printf_padding::pad#7 = phi( printf_number_buffer::@10/printf_padding::pad#1, printf_number_buffer::@12/printf_padding::pad#2, printf_number_buffer::@8/printf_padding::pad#0, printf_string::@5/printf_padding::pad#3, printf_string::@6/printf_padding::pad#4 )
  printf_padding::length#6 = phi( printf_number_buffer::@10/printf_padding::length#1, printf_number_buffer::@12/printf_padding::length#2, printf_number_buffer::@8/printf_padding::length#0, printf_string::@5/printf_padding::length#3, printf_string::@6/printf_padding::length#4 )
  printf_padding::i#0 = 0
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  printf_padding::pad#6 = phi( printf_padding/printf_padding::pad#7, printf_padding::@3/printf_padding::pad#8 )
  printf_padding::length#5 = phi( printf_padding/printf_padding::length#6, printf_padding::@3/printf_padding::length#7 )
  printf_padding::i#2 = phi( printf_padding/printf_padding::i#0, printf_padding::@3/printf_padding::i#1 )
  printf_padding::$0 = printf_padding::i#2 < printf_padding::length#5
  if(printf_padding::$0) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  printf_padding::length#8 = phi( printf_padding::@1/printf_padding::length#5 )
  printf_padding::i#4 = phi( printf_padding::@1/printf_padding::i#2 )
  printf_padding::pad#5 = phi( printf_padding::@1/printf_padding::pad#6 )
  cputc::c#1 = printf_padding::pad#5
  call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  printf_padding::pad#8 = phi( printf_padding::@2/printf_padding::pad#5 )
  printf_padding::length#7 = phi( printf_padding::@2/printf_padding::length#8 )
  printf_padding::i#3 = phi( printf_padding::@2/printf_padding::i#4 )
  printf_padding::i#1 = ++ printf_padding::i#3
  to:printf_padding::@1
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  return 
  to:@return

void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@13
  printf_uint::format_upper_case#5 = phi( main::@13/printf_uint::format_upper_case#0 )
  printf_uint::format_zero_padding#5 = phi( main::@13/printf_uint::format_zero_padding#0 )
  printf_uint::format_justify_left#5 = phi( main::@13/printf_uint::format_justify_left#0 )
  printf_uint::format_min_length#5 = phi( main::@13/printf_uint::format_min_length#0 )
  printf_uint::format_radix#5 = phi( main::@13/printf_uint::format_radix#0 )
  printf_uint::uvalue#4 = phi( main::@13/printf_uint::uvalue#0 )
  printf_uint::format_sign_always#1 = phi( main::@13/printf_uint::format_sign_always#0 )
  printf_uint::$5 = 0 != printf_uint::format_sign_always#1
  if(printf_uint::$5) goto printf_uint::@1
  to:printf_uint::@2
printf_uint::@1: scope:[printf_uint]  from printf_uint
  printf_uint::format_upper_case#3 = phi( printf_uint/printf_uint::format_upper_case#5 )
  printf_uint::format_zero_padding#3 = phi( printf_uint/printf_uint::format_zero_padding#5 )
  printf_uint::format_sign_always#4 = phi( printf_uint/printf_uint::format_sign_always#1 )
  printf_uint::format_justify_left#3 = phi( printf_uint/printf_uint::format_justify_left#5 )
  printf_uint::format_min_length#3 = phi( printf_uint/printf_uint::format_min_length#5 )
  printf_uint::format_radix#3 = phi( printf_uint/printf_uint::format_radix#5 )
  printf_uint::uvalue#2 = phi( printf_uint/printf_uint::uvalue#4 )
  printf_uint::$1 = '+'
  to:printf_uint::@3
printf_uint::@2: scope:[printf_uint]  from printf_uint
  printf_uint::format_upper_case#4 = phi( printf_uint/printf_uint::format_upper_case#5 )
  printf_uint::format_zero_padding#4 = phi( printf_uint/printf_uint::format_zero_padding#5 )
  printf_uint::format_sign_always#5 = phi( printf_uint/printf_uint::format_sign_always#1 )
  printf_uint::format_justify_left#4 = phi( printf_uint/printf_uint::format_justify_left#5 )
  printf_uint::format_min_length#4 = phi( printf_uint/printf_uint::format_min_length#5 )
  printf_uint::format_radix#4 = phi( printf_uint/printf_uint::format_radix#5 )
  printf_uint::uvalue#3 = phi( printf_uint/printf_uint::uvalue#4 )
  printf_uint::$0 = 0
  to:printf_uint::@3
printf_uint::@3: scope:[printf_uint]  from printf_uint::@1 printf_uint::@2
  printf_uint::format_upper_case#2 = phi( printf_uint::@1/printf_uint::format_upper_case#3, printf_uint::@2/printf_uint::format_upper_case#4 )
  printf_uint::format_zero_padding#2 = phi( printf_uint::@1/printf_uint::format_zero_padding#3, printf_uint::@2/printf_uint::format_zero_padding#4 )
  printf_uint::format_sign_always#3 = phi( printf_uint::@1/printf_uint::format_sign_always#4, printf_uint::@2/printf_uint::format_sign_always#5 )
  printf_uint::format_justify_left#2 = phi( printf_uint::@1/printf_uint::format_justify_left#3, printf_uint::@2/printf_uint::format_justify_left#4 )
  printf_uint::format_min_length#2 = phi( printf_uint::@1/printf_uint::format_min_length#3, printf_uint::@2/printf_uint::format_min_length#4 )
  printf_uint::format_radix#1 = phi( printf_uint::@1/printf_uint::format_radix#3, printf_uint::@2/printf_uint::format_radix#4 )
  printf_uint::uvalue#1 = phi( printf_uint::@1/printf_uint::uvalue#2, printf_uint::@2/printf_uint::uvalue#3 )
  printf_uint::$2 = phi( printf_uint::@1/printf_uint::$1, printf_uint::@2/printf_uint::$0 )
  *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) = printf_uint::$2
  utoa::value#1 = printf_uint::uvalue#1
  utoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  utoa::radix#0 = printf_uint::format_radix#1
  call utoa 
  to:printf_uint::@4
printf_uint::@4: scope:[printf_uint]  from printf_uint::@3
  printf_uint::format_radix#2 = phi( printf_uint::@3/printf_uint::format_radix#1 )
  printf_uint::format_upper_case#1 = phi( printf_uint::@3/printf_uint::format_upper_case#2 )
  printf_uint::format_zero_padding#1 = phi( printf_uint::@3/printf_uint::format_zero_padding#2 )
  printf_uint::format_sign_always#2 = phi( printf_uint::@3/printf_uint::format_sign_always#3 )
  printf_uint::format_justify_left#1 = phi( printf_uint::@3/printf_uint::format_justify_left#2 )
  printf_uint::format_min_length#1 = phi( printf_uint::@3/printf_uint::format_min_length#2 )
  printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  printf_number_buffer::buffer_digits#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  printf_number_buffer::format_min_length#0 = printf_uint::format_min_length#1
  printf_number_buffer::format_justify_left#0 = printf_uint::format_justify_left#1
  printf_number_buffer::format_sign_always#0 = printf_uint::format_sign_always#2
  printf_number_buffer::format_zero_padding#0 = printf_uint::format_zero_padding#1
  printf_number_buffer::format_upper_case#0 = printf_uint::format_upper_case#1
  printf_number_buffer::format_radix#0 = printf_uint::format_radix#2
  call printf_number_buffer 
  to:printf_uint::@5
printf_uint::@5: scope:[printf_uint]  from printf_uint::@4
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@5
  return 
  to:@return

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@4
  printf_number_buffer::format_upper_case#10 = phi( printf_uint::@4/printf_number_buffer::format_upper_case#0 )
  printf_number_buffer::buffer_sign#7 = phi( printf_uint::@4/printf_number_buffer::buffer_sign#0 )
  printf_number_buffer::buffer_digits#4 = phi( printf_uint::@4/printf_number_buffer::buffer_digits#0 )
  printf_number_buffer::format_zero_padding#4 = phi( printf_uint::@4/printf_number_buffer::format_zero_padding#0 )
  printf_number_buffer::format_justify_left#3 = phi( printf_uint::@4/printf_number_buffer::format_justify_left#0 )
  printf_number_buffer::format_min_length#1 = phi( printf_uint::@4/printf_number_buffer::format_min_length#0 )
  printf_number_buffer::padding#0 = 0
  printf_number_buffer::$26 = 0 != printf_number_buffer::format_min_length#1
  printf_number_buffer::$0 = ! printf_number_buffer::$26
  if(printf_number_buffer::$0) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@14
  printf_number_buffer::buffer_digits#12 = phi( printf_number_buffer/printf_number_buffer::buffer_digits#4, printf_number_buffer::@13/printf_number_buffer::buffer_digits#15, printf_number_buffer::@14/printf_number_buffer::buffer_digits#16 )
  printf_number_buffer::format_upper_case#7 = phi( printf_number_buffer/printf_number_buffer::format_upper_case#10, printf_number_buffer::@13/printf_number_buffer::format_upper_case#11, printf_number_buffer::@14/printf_number_buffer::format_upper_case#12 )
  printf_number_buffer::buffer_sign#5 = phi( printf_number_buffer/printf_number_buffer::buffer_sign#7, printf_number_buffer::@13/printf_number_buffer::buffer_sign#8, printf_number_buffer::@14/printf_number_buffer::buffer_sign#9 )
  printf_number_buffer::padding#3 = phi( printf_number_buffer/printf_number_buffer::padding#0, printf_number_buffer::@13/printf_number_buffer::padding#1, printf_number_buffer::@14/printf_number_buffer::padding#2 )
  printf_number_buffer::format_zero_padding#1 = phi( printf_number_buffer/printf_number_buffer::format_zero_padding#4, printf_number_buffer::@13/printf_number_buffer::format_zero_padding#5, printf_number_buffer::@14/printf_number_buffer::format_zero_padding#6 )
  printf_number_buffer::format_justify_left#1 = phi( printf_number_buffer/printf_number_buffer::format_justify_left#3, printf_number_buffer::@13/printf_number_buffer::format_justify_left#4, printf_number_buffer::@14/printf_number_buffer::format_justify_left#5 )
  printf_number_buffer::$27 = 0 != printf_number_buffer::format_justify_left#1
  printf_number_buffer::$1 = ! printf_number_buffer::$27
  printf_number_buffer::$28 = 0 != printf_number_buffer::format_zero_padding#1
  printf_number_buffer::$2 = ! printf_number_buffer::$28
  printf_number_buffer::$3 = printf_number_buffer::$1 && printf_number_buffer::$2
  printf_number_buffer::$4 = printf_number_buffer::$3 && printf_number_buffer::padding#3
  printf_number_buffer::$5 = ! printf_number_buffer::$4
  if(printf_number_buffer::$5) goto printf_number_buffer::@2
  to:printf_number_buffer::@8
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  printf_number_buffer::format_upper_case#16 = phi( printf_number_buffer/printf_number_buffer::format_upper_case#10 )
  printf_number_buffer::format_zero_padding#16 = phi( printf_number_buffer/printf_number_buffer::format_zero_padding#4 )
  printf_number_buffer::format_justify_left#11 = phi( printf_number_buffer/printf_number_buffer::format_justify_left#3 )
  printf_number_buffer::format_min_length#5 = phi( printf_number_buffer/printf_number_buffer::format_min_length#1 )
  printf_number_buffer::buffer_sign#4 = phi( printf_number_buffer/printf_number_buffer::buffer_sign#7 )
  printf_number_buffer::buffer_digits#1 = phi( printf_number_buffer/printf_number_buffer::buffer_digits#4 )
  strlen::str#1 = printf_number_buffer::buffer_digits#1
  call strlen 
  strlen::return#2 = strlen::return#1
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@6
  printf_number_buffer::buffer_digits#18 = phi( printf_number_buffer::@6/printf_number_buffer::buffer_digits#1 )
  printf_number_buffer::format_upper_case#14 = phi( printf_number_buffer::@6/printf_number_buffer::format_upper_case#16 )
  printf_number_buffer::format_zero_padding#10 = phi( printf_number_buffer::@6/printf_number_buffer::format_zero_padding#16 )
  printf_number_buffer::format_justify_left#7 = phi( printf_number_buffer::@6/printf_number_buffer::format_justify_left#11 )
  printf_number_buffer::format_min_length#3 = phi( printf_number_buffer::@6/printf_number_buffer::format_min_length#5 )
  printf_number_buffer::buffer_sign#1 = phi( printf_number_buffer::@6/printf_number_buffer::buffer_sign#4 )
  strlen::return#5 = phi( printf_number_buffer::@6/strlen::return#2 )
  printf_number_buffer::$19 = strlen::return#5
  printf_number_buffer::len#0 = (signed byte)printf_number_buffer::$19
  printf_number_buffer::$29 = 0 != printf_number_buffer::buffer_sign#1
  printf_number_buffer::$20 = ! printf_number_buffer::$29
  if(printf_number_buffer::$20) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@15 printf_number_buffer::@7
  printf_number_buffer::buffer_digits#15 = phi( printf_number_buffer::@15/printf_number_buffer::buffer_digits#18, printf_number_buffer::@7/printf_number_buffer::buffer_digits#19 )
  printf_number_buffer::format_upper_case#11 = phi( printf_number_buffer::@15/printf_number_buffer::format_upper_case#14, printf_number_buffer::@7/printf_number_buffer::format_upper_case#15 )
  printf_number_buffer::buffer_sign#8 = phi( printf_number_buffer::@15/printf_number_buffer::buffer_sign#1, printf_number_buffer::@7/printf_number_buffer::buffer_sign#11 )
  printf_number_buffer::format_zero_padding#5 = phi( printf_number_buffer::@15/printf_number_buffer::format_zero_padding#10, printf_number_buffer::@7/printf_number_buffer::format_zero_padding#11 )
  printf_number_buffer::format_justify_left#4 = phi( printf_number_buffer::@15/printf_number_buffer::format_justify_left#7, printf_number_buffer::@7/printf_number_buffer::format_justify_left#8 )
  printf_number_buffer::len#2 = phi( printf_number_buffer::@15/printf_number_buffer::len#0, printf_number_buffer::@7/printf_number_buffer::len#1 )
  printf_number_buffer::format_min_length#2 = phi( printf_number_buffer::@15/printf_number_buffer::format_min_length#3, printf_number_buffer::@7/printf_number_buffer::format_min_length#4 )
  printf_number_buffer::$25 = (signed byte)printf_number_buffer::format_min_length#2
  printf_number_buffer::$21 = printf_number_buffer::$25 - printf_number_buffer::len#2
  printf_number_buffer::padding#1 = printf_number_buffer::$21
  printf_number_buffer::$22 = printf_number_buffer::padding#1 < 0
  printf_number_buffer::$23 = ! printf_number_buffer::$22
  if(printf_number_buffer::$23) goto printf_number_buffer::@1
  to:printf_number_buffer::@14
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@15
  printf_number_buffer::buffer_digits#19 = phi( printf_number_buffer::@15/printf_number_buffer::buffer_digits#18 )
  printf_number_buffer::format_upper_case#15 = phi( printf_number_buffer::@15/printf_number_buffer::format_upper_case#14 )
  printf_number_buffer::buffer_sign#11 = phi( printf_number_buffer::@15/printf_number_buffer::buffer_sign#1 )
  printf_number_buffer::format_zero_padding#11 = phi( printf_number_buffer::@15/printf_number_buffer::format_zero_padding#10 )
  printf_number_buffer::format_justify_left#8 = phi( printf_number_buffer::@15/printf_number_buffer::format_justify_left#7 )
  printf_number_buffer::format_min_length#4 = phi( printf_number_buffer::@15/printf_number_buffer::format_min_length#3 )
  printf_number_buffer::len#3 = phi( printf_number_buffer::@15/printf_number_buffer::len#0 )
  printf_number_buffer::len#1 = ++ printf_number_buffer::len#3
  to:printf_number_buffer::@13
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@13
  printf_number_buffer::buffer_digits#16 = phi( printf_number_buffer::@13/printf_number_buffer::buffer_digits#15 )
  printf_number_buffer::format_upper_case#12 = phi( printf_number_buffer::@13/printf_number_buffer::format_upper_case#11 )
  printf_number_buffer::buffer_sign#9 = phi( printf_number_buffer::@13/printf_number_buffer::buffer_sign#8 )
  printf_number_buffer::format_zero_padding#6 = phi( printf_number_buffer::@13/printf_number_buffer::format_zero_padding#5 )
  printf_number_buffer::format_justify_left#5 = phi( printf_number_buffer::@13/printf_number_buffer::format_justify_left#4 )
  printf_number_buffer::padding#2 = 0
  to:printf_number_buffer::@1
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16
  printf_number_buffer::format_justify_left#16 = phi( printf_number_buffer::@1/printf_number_buffer::format_justify_left#1, printf_number_buffer::@16/printf_number_buffer::format_justify_left#18 )
  printf_number_buffer::buffer_digits#10 = phi( printf_number_buffer::@1/printf_number_buffer::buffer_digits#12, printf_number_buffer::@16/printf_number_buffer::buffer_digits#13 )
  printf_number_buffer::format_upper_case#5 = phi( printf_number_buffer::@1/printf_number_buffer::format_upper_case#7, printf_number_buffer::@16/printf_number_buffer::format_upper_case#8 )
  printf_number_buffer::padding#10 = phi( printf_number_buffer::@1/printf_number_buffer::padding#3, printf_number_buffer::@16/printf_number_buffer::padding#12 )
  printf_number_buffer::format_zero_padding#8 = phi( printf_number_buffer::@1/printf_number_buffer::format_zero_padding#1, printf_number_buffer::@16/printf_number_buffer::format_zero_padding#12 )
  printf_number_buffer::buffer_sign#2 = phi( printf_number_buffer::@1/printf_number_buffer::buffer_sign#5, printf_number_buffer::@16/printf_number_buffer::buffer_sign#6 )
  printf_number_buffer::$30 = 0 != printf_number_buffer::buffer_sign#2
  printf_number_buffer::$7 = ! printf_number_buffer::$30
  if(printf_number_buffer::$7) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@1
  printf_number_buffer::format_justify_left#20 = phi( printf_number_buffer::@1/printf_number_buffer::format_justify_left#1 )
  printf_number_buffer::buffer_digits#17 = phi( printf_number_buffer::@1/printf_number_buffer::buffer_digits#12 )
  printf_number_buffer::format_upper_case#13 = phi( printf_number_buffer::@1/printf_number_buffer::format_upper_case#7 )
  printf_number_buffer::format_zero_padding#17 = phi( printf_number_buffer::@1/printf_number_buffer::format_zero_padding#1 )
  printf_number_buffer::buffer_sign#10 = phi( printf_number_buffer::@1/printf_number_buffer::buffer_sign#5 )
  printf_number_buffer::padding#4 = phi( printf_number_buffer::@1/printf_number_buffer::padding#3 )
  printf_padding::pad#0 = ' '
  printf_padding::length#0 = (byte)printf_number_buffer::padding#4
  call printf_padding 
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@8
  printf_number_buffer::format_justify_left#18 = phi( printf_number_buffer::@8/printf_number_buffer::format_justify_left#20 )
  printf_number_buffer::buffer_digits#13 = phi( printf_number_buffer::@8/printf_number_buffer::buffer_digits#17 )
  printf_number_buffer::format_upper_case#8 = phi( printf_number_buffer::@8/printf_number_buffer::format_upper_case#13 )
  printf_number_buffer::padding#12 = phi( printf_number_buffer::@8/printf_number_buffer::padding#4 )
  printf_number_buffer::format_zero_padding#12 = phi( printf_number_buffer::@8/printf_number_buffer::format_zero_padding#17 )
  printf_number_buffer::buffer_sign#6 = phi( printf_number_buffer::@8/printf_number_buffer::buffer_sign#10 )
  to:printf_number_buffer::@2
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@17 printf_number_buffer::@2
  printf_number_buffer::format_justify_left#13 = phi( printf_number_buffer::@17/printf_number_buffer::format_justify_left#15, printf_number_buffer::@2/printf_number_buffer::format_justify_left#16 )
  printf_number_buffer::buffer_digits#8 = phi( printf_number_buffer::@17/printf_number_buffer::buffer_digits#9, printf_number_buffer::@2/printf_number_buffer::buffer_digits#10 )
  printf_number_buffer::format_upper_case#3 = phi( printf_number_buffer::@17/printf_number_buffer::format_upper_case#4, printf_number_buffer::@2/printf_number_buffer::format_upper_case#5 )
  printf_number_buffer::padding#5 = phi( printf_number_buffer::@17/printf_number_buffer::padding#9, printf_number_buffer::@2/printf_number_buffer::padding#10 )
  printf_number_buffer::format_zero_padding#2 = phi( printf_number_buffer::@17/printf_number_buffer::format_zero_padding#7, printf_number_buffer::@2/printf_number_buffer::format_zero_padding#8 )
  printf_number_buffer::$9 = printf_number_buffer::format_zero_padding#2 && printf_number_buffer::padding#5
  printf_number_buffer::$10 = ! printf_number_buffer::$9
  if(printf_number_buffer::$10) goto printf_number_buffer::@4
  to:printf_number_buffer::@10
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  printf_number_buffer::format_justify_left#19 = phi( printf_number_buffer::@2/printf_number_buffer::format_justify_left#16 )
  printf_number_buffer::buffer_digits#14 = phi( printf_number_buffer::@2/printf_number_buffer::buffer_digits#10 )
  printf_number_buffer::format_upper_case#9 = phi( printf_number_buffer::@2/printf_number_buffer::format_upper_case#5 )
  printf_number_buffer::padding#13 = phi( printf_number_buffer::@2/printf_number_buffer::padding#10 )
  printf_number_buffer::format_zero_padding#13 = phi( printf_number_buffer::@2/printf_number_buffer::format_zero_padding#8 )
  printf_number_buffer::buffer_sign#3 = phi( printf_number_buffer::@2/printf_number_buffer::buffer_sign#2 )
  cputc::c#2 = printf_number_buffer::buffer_sign#3
  call cputc 
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@9
  printf_number_buffer::format_justify_left#15 = phi( printf_number_buffer::@9/printf_number_buffer::format_justify_left#19 )
  printf_number_buffer::buffer_digits#9 = phi( printf_number_buffer::@9/printf_number_buffer::buffer_digits#14 )
  printf_number_buffer::format_upper_case#4 = phi( printf_number_buffer::@9/printf_number_buffer::format_upper_case#9 )
  printf_number_buffer::padding#9 = phi( printf_number_buffer::@9/printf_number_buffer::padding#13 )
  printf_number_buffer::format_zero_padding#7 = phi( printf_number_buffer::@9/printf_number_buffer::format_zero_padding#13 )
  to:printf_number_buffer::@3
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@18 printf_number_buffer::@3
  printf_number_buffer::padding#15 = phi( printf_number_buffer::@18/printf_number_buffer::padding#16, printf_number_buffer::@3/printf_number_buffer::padding#5 )
  printf_number_buffer::format_justify_left#10 = phi( printf_number_buffer::@18/printf_number_buffer::format_justify_left#12, printf_number_buffer::@3/printf_number_buffer::format_justify_left#13 )
  printf_number_buffer::format_zero_padding#15 = phi( printf_number_buffer::@18/printf_number_buffer::format_zero_padding#18, printf_number_buffer::@3/printf_number_buffer::format_zero_padding#2 )
  printf_number_buffer::buffer_digits#6 = phi( printf_number_buffer::@18/printf_number_buffer::buffer_digits#7, printf_number_buffer::@3/printf_number_buffer::buffer_digits#8 )
  printf_number_buffer::format_upper_case#1 = phi( printf_number_buffer::@18/printf_number_buffer::format_upper_case#2, printf_number_buffer::@3/printf_number_buffer::format_upper_case#3 )
  printf_number_buffer::$31 = 0 != printf_number_buffer::format_upper_case#1
  printf_number_buffer::$12 = ! printf_number_buffer::$31
  if(printf_number_buffer::$12) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@3
  printf_number_buffer::format_justify_left#17 = phi( printf_number_buffer::@3/printf_number_buffer::format_justify_left#13 )
  printf_number_buffer::format_zero_padding#20 = phi( printf_number_buffer::@3/printf_number_buffer::format_zero_padding#2 )
  printf_number_buffer::buffer_digits#11 = phi( printf_number_buffer::@3/printf_number_buffer::buffer_digits#8 )
  printf_number_buffer::format_upper_case#6 = phi( printf_number_buffer::@3/printf_number_buffer::format_upper_case#3 )
  printf_number_buffer::padding#6 = phi( printf_number_buffer::@3/printf_number_buffer::padding#5 )
  printf_padding::pad#1 = '0'
  printf_padding::length#1 = (byte)printf_number_buffer::padding#6
  call printf_padding 
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@10
  printf_number_buffer::padding#16 = phi( printf_number_buffer::@10/printf_number_buffer::padding#6 )
  printf_number_buffer::format_justify_left#12 = phi( printf_number_buffer::@10/printf_number_buffer::format_justify_left#17 )
  printf_number_buffer::format_zero_padding#18 = phi( printf_number_buffer::@10/printf_number_buffer::format_zero_padding#20 )
  printf_number_buffer::buffer_digits#7 = phi( printf_number_buffer::@10/printf_number_buffer::buffer_digits#11 )
  printf_number_buffer::format_upper_case#2 = phi( printf_number_buffer::@10/printf_number_buffer::format_upper_case#6 )
  to:printf_number_buffer::@4
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@20 printf_number_buffer::@4
  printf_number_buffer::padding#11 = phi( printf_number_buffer::@20/printf_number_buffer::padding#14, printf_number_buffer::@4/printf_number_buffer::padding#15 )
  printf_number_buffer::format_justify_left#6 = phi( printf_number_buffer::@20/printf_number_buffer::format_justify_left#9, printf_number_buffer::@4/printf_number_buffer::format_justify_left#10 )
  printf_number_buffer::format_zero_padding#9 = phi( printf_number_buffer::@20/printf_number_buffer::format_zero_padding#14, printf_number_buffer::@4/printf_number_buffer::format_zero_padding#15 )
  printf_number_buffer::buffer_digits#2 = phi( printf_number_buffer::@20/printf_number_buffer::buffer_digits#5, printf_number_buffer::@4/printf_number_buffer::buffer_digits#6 )
  cputs::s#1 = printf_number_buffer::buffer_digits#2
  call cputs 
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@5
  printf_number_buffer::padding#7 = phi( printf_number_buffer::@5/printf_number_buffer::padding#11 )
  printf_number_buffer::format_justify_left#2 = phi( printf_number_buffer::@5/printf_number_buffer::format_justify_left#6 )
  printf_number_buffer::format_zero_padding#3 = phi( printf_number_buffer::@5/printf_number_buffer::format_zero_padding#9 )
  printf_number_buffer::$32 = 0 != printf_number_buffer::format_zero_padding#3
  printf_number_buffer::$14 = ! printf_number_buffer::$32
  printf_number_buffer::$15 = printf_number_buffer::format_justify_left#2 && printf_number_buffer::$14
  printf_number_buffer::$16 = printf_number_buffer::$15 && printf_number_buffer::padding#7
  printf_number_buffer::$17 = ! printf_number_buffer::$16
  if(printf_number_buffer::$17) goto printf_number_buffer::@return
  to:printf_number_buffer::@12
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  printf_number_buffer::padding#17 = phi( printf_number_buffer::@4/printf_number_buffer::padding#15 )
  printf_number_buffer::format_justify_left#14 = phi( printf_number_buffer::@4/printf_number_buffer::format_justify_left#10 )
  printf_number_buffer::format_zero_padding#19 = phi( printf_number_buffer::@4/printf_number_buffer::format_zero_padding#15 )
  printf_number_buffer::buffer_digits#3 = phi( printf_number_buffer::@4/printf_number_buffer::buffer_digits#6 )
  strupr::str#0 = printf_number_buffer::buffer_digits#3
  call strupr 
  strupr::return#2 = strupr::return#1
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@11
  printf_number_buffer::padding#14 = phi( printf_number_buffer::@11/printf_number_buffer::padding#17 )
  printf_number_buffer::format_justify_left#9 = phi( printf_number_buffer::@11/printf_number_buffer::format_justify_left#14 )
  printf_number_buffer::format_zero_padding#14 = phi( printf_number_buffer::@11/printf_number_buffer::format_zero_padding#19 )
  printf_number_buffer::buffer_digits#5 = phi( printf_number_buffer::@11/printf_number_buffer::buffer_digits#3 )
  to:printf_number_buffer::@5
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  printf_number_buffer::padding#8 = phi( printf_number_buffer::@19/printf_number_buffer::padding#7 )
  printf_padding::pad#2 = ' '
  printf_padding::length#2 = (byte)printf_number_buffer::padding#8
  call printf_padding 
  to:printf_number_buffer::@21
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@19 printf_number_buffer::@21
  return 
  to:@return

void printf_string(byte* printf_string::str , byte printf_string::format_min_length , byte printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@10
  printf_string::str#3 = phi( main::@10/printf_string::str#0 )
  printf_string::format_justify_left#3 = phi( main::@10/printf_string::format_justify_left#0 )
  printf_string::format_min_length#1 = phi( main::@10/printf_string::format_min_length#0 )
  printf_string::padding#0 = 0
  printf_string::$14 = 0 != printf_string::format_min_length#1
  printf_string::$0 = ! printf_string::$14
  if(printf_string::$0) goto printf_string::@1
  to:printf_string::@3
printf_string::@1: scope:[printf_string]  from printf_string printf_string::@4 printf_string::@7
  printf_string::str#4 = phi( printf_string/printf_string::str#3, printf_string::@4/printf_string::str#6, printf_string::@7/printf_string::str#7 )
  printf_string::padding#3 = phi( printf_string/printf_string::padding#0, printf_string::@4/printf_string::padding#2, printf_string::@7/printf_string::padding#1 )
  printf_string::format_justify_left#1 = phi( printf_string/printf_string::format_justify_left#3, printf_string::@4/printf_string::format_justify_left#4, printf_string::@7/printf_string::format_justify_left#5 )
  printf_string::$15 = 0 != printf_string::format_justify_left#1
  printf_string::$1 = ! printf_string::$15
  printf_string::$2 = printf_string::$1 && printf_string::padding#3
  printf_string::$3 = ! printf_string::$2
  if(printf_string::$3) goto printf_string::@2
  to:printf_string::@5
printf_string::@3: scope:[printf_string]  from printf_string
  printf_string::format_justify_left#7 = phi( printf_string/printf_string::format_justify_left#3 )
  printf_string::format_min_length#3 = phi( printf_string/printf_string::format_min_length#1 )
  printf_string::str#1 = phi( printf_string/printf_string::str#3 )
  strlen::str#2 = printf_string::str#1
  call strlen 
  strlen::return#3 = strlen::return#1
  to:printf_string::@7
printf_string::@7: scope:[printf_string]  from printf_string::@3
  printf_string::str#7 = phi( printf_string::@3/printf_string::str#1 )
  printf_string::format_justify_left#5 = phi( printf_string::@3/printf_string::format_justify_left#7 )
  printf_string::format_min_length#2 = phi( printf_string::@3/printf_string::format_min_length#3 )
  strlen::return#6 = phi( printf_string::@3/strlen::return#3 )
  printf_string::$9 = strlen::return#6
  printf_string::len#0 = (signed byte)printf_string::$9
  printf_string::$13 = (signed byte)printf_string::format_min_length#2
  printf_string::$10 = printf_string::$13 - printf_string::len#0
  printf_string::padding#1 = printf_string::$10
  printf_string::$11 = printf_string::padding#1 < 0
  printf_string::$12 = ! printf_string::$11
  if(printf_string::$12) goto printf_string::@1
  to:printf_string::@4
printf_string::@4: scope:[printf_string]  from printf_string::@7
  printf_string::str#6 = phi( printf_string::@7/printf_string::str#7 )
  printf_string::format_justify_left#4 = phi( printf_string::@7/printf_string::format_justify_left#5 )
  printf_string::padding#2 = 0
  to:printf_string::@1
printf_string::@2: scope:[printf_string]  from printf_string::@1 printf_string::@9
  printf_string::padding#7 = phi( printf_string::@1/printf_string::padding#3, printf_string::@9/printf_string::padding#8 )
  printf_string::format_justify_left#6 = phi( printf_string::@1/printf_string::format_justify_left#1, printf_string::@9/printf_string::format_justify_left#8 )
  printf_string::str#2 = phi( printf_string::@1/printf_string::str#4, printf_string::@9/printf_string::str#5 )
  cputs::s#2 = printf_string::str#2
  call cputs 
  to:printf_string::@8
printf_string::@8: scope:[printf_string]  from printf_string::@2
  printf_string::padding#4 = phi( printf_string::@2/printf_string::padding#7 )
  printf_string::format_justify_left#2 = phi( printf_string::@2/printf_string::format_justify_left#6 )
  printf_string::$6 = printf_string::format_justify_left#2 && printf_string::padding#4
  printf_string::$7 = ! printf_string::$6
  if(printf_string::$7) goto printf_string::@return
  to:printf_string::@6
printf_string::@5: scope:[printf_string]  from printf_string::@1
  printf_string::format_justify_left#9 = phi( printf_string::@1/printf_string::format_justify_left#1 )
  printf_string::str#8 = phi( printf_string::@1/printf_string::str#4 )
  printf_string::padding#5 = phi( printf_string::@1/printf_string::padding#3 )
  printf_padding::pad#3 = ' '
  printf_padding::length#3 = (byte)printf_string::padding#5
  call printf_padding 
  to:printf_string::@9
printf_string::@9: scope:[printf_string]  from printf_string::@5
  printf_string::padding#8 = phi( printf_string::@5/printf_string::padding#5 )
  printf_string::format_justify_left#8 = phi( printf_string::@5/printf_string::format_justify_left#9 )
  printf_string::str#5 = phi( printf_string::@5/printf_string::str#8 )
  to:printf_string::@2
printf_string::@6: scope:[printf_string]  from printf_string::@8
  printf_string::padding#6 = phi( printf_string::@8/printf_string::padding#4 )
  printf_padding::pad#4 = ' '
  printf_padding::length#4 = (byte)printf_string::padding#6
  call printf_padding 
  to:printf_string::@10
printf_string::@10: scope:[printf_string]  from printf_string::@6
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@10 printf_string::@8
  return 
  to:@return

void tod_init(byte tod_init::tod_TENTHS , byte tod_init::tod_SEC , byte tod_init::tod_MIN , byte tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main
  tod_init::tod_TENTHS#1 = phi( main/tod_init::tod_TENTHS#0 )
  tod_init::tod_SEC#1 = phi( main/tod_init::tod_SEC#0 )
  tod_init::tod_MIN#1 = phi( main/tod_init::tod_MIN#0 )
  tod_init::tod_HOURS#1 = phi( main/tod_init::tod_HOURS#0 )
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | $80
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & $7f
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) = tod_init::tod_HOURS#1
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) = tod_init::tod_MIN#1
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) = tod_init::tod_SEC#1
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) = tod_init::tod_TENTHS#1
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  return 
  to:@return

struct TIME_OF_DAY tod_read()
tod_read: scope:[tod_read]  from main::@7
  tod_read::hours#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  tod_read::mins#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  tod_read::secs#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  tod_read::tenths#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  tod_read::tod_TENTHS#0 = tod_read::tenths#0
  tod_read::tod_SEC#0 = tod_read::secs#0
  tod_read::tod_MIN#0 = tod_read::mins#0
  tod_read::tod_HOURS#0 = tod_read::hours#0
  tod_read::return_TENTHS#0 = tod_read::tod_TENTHS#0
  tod_read::return_SEC#0 = tod_read::tod_SEC#0
  tod_read::return_MIN#0 = tod_read::tod_MIN#0
  tod_read::return_HOURS#0 = tod_read::tod_HOURS#0
  tod_read::return#0 = struct-unwound {tod_read::return_TENTHS#0, tod_read::return_SEC#0, tod_read::return_MIN#0, tod_read::return_HOURS#0}
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  tod_read::return_HOURS#3 = phi( tod_read/tod_read::return_HOURS#0 )
  tod_read::return_MIN#3 = phi( tod_read/tod_read::return_MIN#0 )
  tod_read::return_SEC#3 = phi( tod_read/tod_read::return_SEC#0 )
  tod_read::return_TENTHS#3 = phi( tod_read/tod_read::return_TENTHS#0 )
  tod_read::return_TENTHS#1 = tod_read::return_TENTHS#3
  tod_read::return_SEC#1 = tod_read::return_SEC#3
  tod_read::return_MIN#1 = tod_read::return_MIN#3
  tod_read::return_HOURS#1 = tod_read::return_HOURS#3
  tod_read::return#1 = struct-unwound {tod_read::return_TENTHS#1, tod_read::return_SEC#1, tod_read::return_MIN#1, tod_read::return_HOURS#1}
  return 
  to:@return

byte* tod_str(byte tod_str::tod_TENTHS , byte tod_str::tod_SEC , byte tod_str::tod_MIN , byte tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@8
  tod_str::tod_TENTHS#1 = phi( main::@8/tod_str::tod_TENTHS#0 )
  tod_str::tod_SEC#1 = phi( main::@8/tod_str::tod_SEC#0 )
  tod_str::tod_MIN#1 = phi( main::@8/tod_str::tod_MIN#0 )
  tod_str::tod_HOURS#1 = phi( main::@8/tod_str::tod_HOURS#0 )
  tod_str::$0 = tod_str::tod_HOURS#1 >> 4
  tod_str::$1 = '0' + tod_str::$0
  tod_buffer[0] = tod_str::$1
  tod_str::$2 = tod_str::tod_HOURS#1 & $f
  tod_str::$3 = '0' + tod_str::$2
  tod_buffer[1] = tod_str::$3
  tod_str::$4 = tod_str::tod_MIN#1 >> 4
  tod_str::$5 = '0' + tod_str::$4
  tod_buffer[3] = tod_str::$5
  tod_str::$6 = tod_str::tod_MIN#1 & $f
  tod_str::$7 = '0' + tod_str::$6
  tod_buffer[4] = tod_str::$7
  tod_str::$8 = tod_str::tod_SEC#1 >> 4
  tod_str::$9 = '0' + tod_str::$8
  tod_buffer[6] = tod_str::$9
  tod_str::$10 = tod_str::tod_SEC#1 & $f
  tod_str::$11 = '0' + tod_str::$10
  tod_buffer[7] = tod_str::$11
  tod_str::$12 = tod_str::tod_TENTHS#1 >> 4
  tod_str::$13 = '0' + tod_str::$12
  tod_buffer[9] = tod_str::$13
  tod_str::$14 = tod_str::tod_TENTHS#1 & $f
  tod_str::$15 = '0' + tod_str::$14
  tod_buffer[$a] = tod_str::$15
  tod_str::return#0 = tod_buffer
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  tod_str::return#3 = phi( tod_str/tod_str::return#0 )
  tod_str::return#1 = tod_str::return#3
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  tod_init::tod_TENTHS#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_TENTHS)
  tod_init::tod_SEC#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC)
  tod_init::tod_MIN#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN)
  tod_init::tod_HOURS#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  call tod_init 
  to:main::@6
main::@6: scope:[main]  from main
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main::@12 main::@6
  main::i#2 = phi( main::@12/main::i#1, main::@6/main::i#0 )
  main::$5 = main::i#2 < $2710
  if(main::$5) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  main::$6 = main::i#3 & $7f
  main::$7 = main::$6 == 0
  main::$8 = ! main::$7
  if(main::$8) goto main::@4
  to:main::@5
main::@3: scope:[main]  from main::@1
  gotoxy::x#2 = 0
  gotoxy::y#2 = $16
  call gotoxy 
  to:main::@7
main::@7: scope:[main]  from main::@3
  call tod_read 
  tod_read::return_TENTHS#2 = tod_read::return_TENTHS#1
  tod_read::return_SEC#2 = tod_read::return_SEC#1
  tod_read::return_MIN#2 = tod_read::return_MIN#1
  tod_read::return_HOURS#2 = tod_read::return_HOURS#1
  to:main::@8
main::@8: scope:[main]  from main::@7
  tod_read::return_HOURS#4 = phi( main::@7/tod_read::return_HOURS#2 )
  tod_read::return_MIN#4 = phi( main::@7/tod_read::return_MIN#2 )
  tod_read::return_SEC#4 = phi( main::@7/tod_read::return_SEC#2 )
  tod_read::return_TENTHS#4 = phi( main::@7/tod_read::return_TENTHS#2 )
  main::$2_TENTHS = tod_read::return_TENTHS#4
  main::$2_SEC = tod_read::return_SEC#4
  main::$2_MIN = tod_read::return_MIN#4
  main::$2_HOURS = tod_read::return_HOURS#4
  tod_str::tod_TENTHS#0 = main::$2_TENTHS
  tod_str::tod_SEC#0 = main::$2_SEC
  tod_str::tod_MIN#0 = main::$2_MIN
  tod_str::tod_HOURS#0 = main::$2_HOURS
  call tod_str 
  tod_str::return#2 = tod_str::return#1
  to:main::@9
main::@9: scope:[main]  from main::@8
  tod_str::return#4 = phi( main::@8/tod_str::return#2 )
  main::$3 = tod_str::return#4
  cputs::s#3 = main::s
  call cputs 
  to:main::@10
main::@10: scope:[main]  from main::@9
  printf_string::str#0 = main::$3
  printf_string::format_min_length#0 = 0
  printf_string::format_justify_left#0 = 0
  call printf_string 
  to:main::@11
main::@11: scope:[main]  from main::@10
  to:main::@return
main::@4: scope:[main]  from main::@15 main::@2
  main::i#6 = phi( main::@15/main::i#8, main::@2/main::i#3 )
  cputs::s#4 = main::s1
  call cputs 
  to:main::@12
main::@12: scope:[main]  from main::@4
  main::i#4 = phi( main::@4/main::i#6 )
  main::i#1 = ++ main::i#4
  to:main::@1
main::@5: scope:[main]  from main::@2
  main::i#7 = phi( main::@2/main::i#3 )
  gotoxy::x#3 = 0
  gotoxy::y#3 = $10
  call gotoxy 
  to:main::@13
main::@13: scope:[main]  from main::@5
  main::i#5 = phi( main::@5/main::i#7 )
  printf_uint::uvalue#0 = main::i#5
  printf_uint::format_min_length#0 = 0
  printf_uint::format_justify_left#0 = 0
  printf_uint::format_sign_always#0 = 0
  printf_uint::format_zero_padding#0 = 0
  printf_uint::format_upper_case#0 = 0
  printf_uint::format_radix#0 = DECIMAL
  call printf_uint 
  to:main::@14
main::@14: scope:[main]  from main::@13
  main::i#9 = phi( main::@13/main::i#5 )
  gotoxy::x#4 = 0
  gotoxy::y#4 = 0
  call gotoxy 
  to:main::@15
main::@15: scope:[main]  from main::@14
  main::i#8 = phi( main::@14/main::i#9 )
  to:main::@4
main::@return: scope:[main]  from main::@11
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  conio_cursor_x = 0
  conio_cursor_y = 0
  conio_line_text = CONIO_SCREEN_TEXT
  conio_line_color = CONIO_SCREEN_COLORS
  conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
  conio_scroll_enable = 1
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const byte BINARY = 2
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*)$dc00
const nomodify byte* COLORRAM = (byte*)$d800
const nomodify byte* CONIO_SCREEN_COLORS = COLORRAM
const nomodify byte* CONIO_SCREEN_TEXT = DEFAULT_SCREEN
const nomodify byte CONIO_TEXTCOLOR_DEFAULT = LIGHT_BLUE
const byte DECIMAL = $a
const nomodify byte* DEFAULT_SCREEN = (byte*)$400
const byte* DIGITS[]  = "0123456789abcdef"z
const byte HEXADECIMAL = $10
const nomodify byte LIGHT_BLUE = $e
byte MOS6526_CIA::INTERRUPT
byte MOS6526_CIA::PORT_A
byte MOS6526_CIA::PORT_A_DDR
byte MOS6526_CIA::PORT_B
byte MOS6526_CIA::PORT_B_DDR
byte MOS6526_CIA::SERIAL_DATA
word MOS6526_CIA::TIMER_A
byte MOS6526_CIA::TIMER_A_CONTROL
word MOS6526_CIA::TIMER_B
byte MOS6526_CIA::TIMER_B_CONTROL
byte MOS6526_CIA::TOD_10THS
byte MOS6526_CIA::TOD_HOURS
byte MOS6526_CIA::TOD_MIN
byte MOS6526_CIA::TOD_SEC
byte MOS6569_VICII::BG_COLOR
byte MOS6569_VICII::BG_COLOR1
byte MOS6569_VICII::BG_COLOR2
byte MOS6569_VICII::BG_COLOR3
byte MOS6569_VICII::BORDER_COLOR
byte MOS6569_VICII::CONTROL1
byte MOS6569_VICII::CONTROL2
byte MOS6569_VICII::IRQ_ENABLE
byte MOS6569_VICII::IRQ_STATUS
byte MOS6569_VICII::LIGHTPEN_X
byte MOS6569_VICII::LIGHTPEN_Y
byte MOS6569_VICII::MEMORY
byte MOS6569_VICII::RASTER
byte MOS6569_VICII::SPRITE0_COLOR
byte MOS6569_VICII::SPRITE0_X
byte MOS6569_VICII::SPRITE0_Y
byte MOS6569_VICII::SPRITE1_COLOR
byte MOS6569_VICII::SPRITE1_X
byte MOS6569_VICII::SPRITE1_Y
byte MOS6569_VICII::SPRITE2_COLOR
byte MOS6569_VICII::SPRITE2_X
byte MOS6569_VICII::SPRITE2_Y
byte MOS6569_VICII::SPRITE3_COLOR
byte MOS6569_VICII::SPRITE3_X
byte MOS6569_VICII::SPRITE3_Y
byte MOS6569_VICII::SPRITE4_COLOR
byte MOS6569_VICII::SPRITE4_X
byte MOS6569_VICII::SPRITE4_Y
byte MOS6569_VICII::SPRITE5_COLOR
byte MOS6569_VICII::SPRITE5_X
byte MOS6569_VICII::SPRITE5_Y
byte MOS6569_VICII::SPRITE6_COLOR
byte MOS6569_VICII::SPRITE6_X
byte MOS6569_VICII::SPRITE6_Y
byte MOS6569_VICII::SPRITE7_COLOR
byte MOS6569_VICII::SPRITE7_X
byte MOS6569_VICII::SPRITE7_Y
byte MOS6569_VICII::SPRITES_BG_COLLISION
byte MOS6569_VICII::SPRITES_COLLISION
byte MOS6569_VICII::SPRITES_ENABLE
byte MOS6569_VICII::SPRITES_EXPAND_X
byte MOS6569_VICII::SPRITES_EXPAND_Y
byte MOS6569_VICII::SPRITES_MC
byte MOS6569_VICII::SPRITES_MCOLOR1
byte MOS6569_VICII::SPRITES_MCOLOR2
byte MOS6569_VICII::SPRITES_PRIORITY
byte MOS6569_VICII::SPRITES_XMSB
byte MOS6581_SID::CH1_ATTACK_DECAY
byte MOS6581_SID::CH1_CONTROL
word MOS6581_SID::CH1_FREQ
word MOS6581_SID::CH1_PULSE_WIDTH
byte MOS6581_SID::CH1_SUSTAIN_RELEASE
byte MOS6581_SID::CH2_ATTACK_DECAY
byte MOS6581_SID::CH2_CONTROL
word MOS6581_SID::CH2_FREQ
word MOS6581_SID::CH2_PULSE_WIDTH
byte MOS6581_SID::CH2_SUSTAIN_RELEASE
byte MOS6581_SID::CH3_ATTACK_DECAY
byte MOS6581_SID::CH3_CONTROL
byte MOS6581_SID::CH3_ENV
word MOS6581_SID::CH3_FREQ
byte MOS6581_SID::CH3_OSC
word MOS6581_SID::CH3_PULSE_WIDTH
byte MOS6581_SID::CH3_SUSTAIN_RELEASE
byte MOS6581_SID::FILTER_CUTOFF_HIGH
byte MOS6581_SID::FILTER_CUTOFF_LOW
byte MOS6581_SID::FILTER_SETUP
byte MOS6581_SID::POT_X
byte MOS6581_SID::POT_Y
byte MOS6581_SID::VOLUME_FILTER_MODE
const byte OCTAL = 8
const byte OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
const byte OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
const byte OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
const byte OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
const byte OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
const byte OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
const byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
const byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN = 0
const byte OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
const byte OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
const byte OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
const byte OFFSET_STRUCT_TIME_OF_DAY_TENTHS = 0
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const word* RADIX_BINARY_VALUES[]  = { $8000, $4000, $2000, $1000, $800, $400, $200, $100, $80, $40, $20, $10, 8, 4, 2 }
const word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
const word* RADIX_HEXADECIMAL_VALUES[]  = { $1000, $100, $10 }
const word* RADIX_OCTAL_VALUES[]  = { $8000, $1000, $200, $40, 8 }
const byte SIZEOF_WORD = 2
byte TIME_OF_DAY::HOURS
byte TIME_OF_DAY::MIN
byte TIME_OF_DAY::SEC
byte TIME_OF_DAY::TENTHS
struct TIME_OF_DAY TOD_ZERO loadstore = { TENTHS: 0, SEC: 0, MIN: 0, HOURS: 0 }
void __start()
label __start::@1
label __start::@2
label __start::@return
label __start::__init1
byte conio_cursor_x loadstore
byte conio_cursor_y loadstore
byte* conio_line_color loadstore
byte* conio_line_text loadstore
byte conio_scroll_enable loadstore
byte conio_textcolor loadstore
void cputc(byte cputc::c)
bool~ cputc::$0
bool~ cputc::$1
bool~ cputc::$2
label cputc::@1
label cputc::@2
label cputc::@3
label cputc::@4
label cputc::@5
label cputc::@return
byte cputc::c
byte cputc::c#0
byte cputc::c#1
byte cputc::c#2
byte cputc::c#3
byte cputc::c#4
void cputln()
label cputln::@1
label cputln::@return
void cputs(to_nomodify byte* cputs::s)
byte~ cputs::$0
bool~ cputs::$2
label cputs::@1
label cputs::@2
label cputs::@3
label cputs::@return
byte cputs::c
byte cputs::c#0
byte cputs::c#1
byte cputs::c#2
to_nomodify byte* cputs::s
to_nomodify byte* cputs::s#0
to_nomodify byte* cputs::s#1
to_nomodify byte* cputs::s#2
to_nomodify byte* cputs::s#3
to_nomodify byte* cputs::s#4
to_nomodify byte* cputs::s#5
to_nomodify byte* cputs::s#6
to_nomodify byte* cputs::s#7
to_nomodify byte* cputs::s#8
void cscroll()
bool~ cscroll::$0
bool~ cscroll::$1
bool~ cscroll::$7
label cscroll::@1
label cscroll::@2
label cscroll::@3
label cscroll::@4
label cscroll::@5
label cscroll::@6
label cscroll::@7
label cscroll::@8
label cscroll::@return
void gotoxy(byte gotoxy::x , byte gotoxy::y)
bool~ gotoxy::$0
bool~ gotoxy::$1
bool~ gotoxy::$2
bool~ gotoxy::$3
number~ gotoxy::$4
byte*~ gotoxy::$5
byte*~ gotoxy::$6
word~ gotoxy::$7
label gotoxy::@1
label gotoxy::@2
label gotoxy::@3
label gotoxy::@4
label gotoxy::@return
word gotoxy::line_offset
word gotoxy::line_offset#0
byte gotoxy::x
byte gotoxy::x#0
byte gotoxy::x#1
byte gotoxy::x#2
byte gotoxy::x#3
byte gotoxy::x#4
byte gotoxy::x#5
byte gotoxy::x#6
byte gotoxy::x#7
byte gotoxy::x#8
byte gotoxy::y
byte gotoxy::y#0
byte gotoxy::y#1
byte gotoxy::y#2
byte gotoxy::y#3
byte gotoxy::y#4
byte gotoxy::y#5
byte gotoxy::y#6
byte gotoxy::y#7
byte gotoxy::y#8
void main()
byte~ main::$2_HOURS
byte~ main::$2_MIN
byte~ main::$2_SEC
byte~ main::$2_TENTHS
byte*~ main::$3
bool~ main::$5
number~ main::$6
bool~ main::$7
bool~ main::$8
label main::@1
label main::@10
label main::@11
label main::@12
label main::@13
label main::@14
label main::@15
label main::@2
label main::@3
label main::@4
label main::@5
label main::@6
label main::@7
label main::@8
label main::@9
label main::@return
word main::i
word main::i#0
word main::i#1
word main::i#2
word main::i#3
word main::i#4
word main::i#5
word main::i#6
word main::i#7
word main::i#8
word main::i#9
const byte* main::s[7]  = "time: "
const byte* main::s1[5]  = "qwe "
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
byte*~ memcpy::$0
bool~ memcpy::$1
byte*~ memcpy::$2
label memcpy::@1
label memcpy::@2
label memcpy::@3
label memcpy::@return
void* memcpy::destination
void* memcpy::destination#0
void* memcpy::destination#1
void* memcpy::destination#2
void* memcpy::destination#3
void* memcpy::destination#4
void* memcpy::destination#5
byte* memcpy::dst
byte* memcpy::dst#0
byte* memcpy::dst#1
byte* memcpy::dst#2
byte* memcpy::dst#3
word memcpy::num
word memcpy::num#0
word memcpy::num#1
word memcpy::num#2
void* memcpy::return
void* memcpy::return#0
void* memcpy::return#1
void* memcpy::return#2
void* memcpy::return#3
void* memcpy::return#4
void* memcpy::source
void* memcpy::source#0
void* memcpy::source#1
void* memcpy::source#2
byte* memcpy::src
byte* memcpy::src#0
byte* memcpy::src#1
byte* memcpy::src#2
byte* memcpy::src#3
byte* memcpy::src_end
byte* memcpy::src_end#0
byte* memcpy::src_end#1
byte* memcpy::src_end#2
void* memset(void* memset::str , byte memset::c , word memset::num)
bool~ memset::$0
bool~ memset::$1
byte*~ memset::$2
bool~ memset::$3
byte*~ memset::$4
label memset::@1
label memset::@2
label memset::@3
label memset::@4
label memset::@return
byte memset::c
byte memset::c#0
byte memset::c#1
byte memset::c#2
byte memset::c#3
byte memset::c#4
byte memset::c#5
byte* memset::dst
byte* memset::dst#0
byte* memset::dst#1
byte* memset::dst#2
byte* memset::dst#3
byte* memset::end
byte* memset::end#0
byte* memset::end#1
byte* memset::end#2
word memset::num
word memset::num#0
word memset::num#1
word memset::num#2
word memset::num#3
void* memset::return
void* memset::return#0
void* memset::return#1
void* memset::return#2
void* memset::return#3
void* memset::return#4
void* memset::str
void* memset::str#0
void* memset::str#1
void* memset::str#2
void* memset::str#3
void* memset::str#4
void* memset::str#5
void* memset::str#6
struct printf_buffer_number printf_buffer loadstore = {}
const byte* printf_buffer_number::digits[$b]  = { fill( $b, 0) }
byte printf_buffer_number::sign
byte printf_format_number::justify_left
byte printf_format_number::min_length
byte printf_format_number::radix
byte printf_format_number::sign_always
byte printf_format_number::upper_case
byte printf_format_number::zero_padding
byte printf_format_string::justify_left
byte printf_format_string::min_length
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
bool~ printf_number_buffer::$0
bool~ printf_number_buffer::$1
bool~ printf_number_buffer::$10
bool~ printf_number_buffer::$12
bool~ printf_number_buffer::$14
bool~ printf_number_buffer::$15
bool~ printf_number_buffer::$16
bool~ printf_number_buffer::$17
word~ printf_number_buffer::$19
bool~ printf_number_buffer::$2
bool~ printf_number_buffer::$20
signed byte~ printf_number_buffer::$21
bool~ printf_number_buffer::$22
bool~ printf_number_buffer::$23
signed byte~ printf_number_buffer::$25
bool~ printf_number_buffer::$26
bool~ printf_number_buffer::$27
bool~ printf_number_buffer::$28
bool~ printf_number_buffer::$29
bool~ printf_number_buffer::$3
bool~ printf_number_buffer::$30
bool~ printf_number_buffer::$31
bool~ printf_number_buffer::$32
bool~ printf_number_buffer::$4
bool~ printf_number_buffer::$5
bool~ printf_number_buffer::$7
bool~ printf_number_buffer::$9
label printf_number_buffer::@1
label printf_number_buffer::@10
label printf_number_buffer::@11
label printf_number_buffer::@12
label printf_number_buffer::@13
label printf_number_buffer::@14
label printf_number_buffer::@15
label printf_number_buffer::@16
label printf_number_buffer::@17
label printf_number_buffer::@18
label printf_number_buffer::@19
label printf_number_buffer::@2
label printf_number_buffer::@20
label printf_number_buffer::@21
label printf_number_buffer::@3
label printf_number_buffer::@4
label printf_number_buffer::@5
label printf_number_buffer::@6
label printf_number_buffer::@7
label printf_number_buffer::@8
label printf_number_buffer::@9
label printf_number_buffer::@return
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
byte* printf_number_buffer::buffer_digits#0
byte* printf_number_buffer::buffer_digits#1
byte* printf_number_buffer::buffer_digits#10
byte* printf_number_buffer::buffer_digits#11
byte* printf_number_buffer::buffer_digits#12
byte* printf_number_buffer::buffer_digits#13
byte* printf_number_buffer::buffer_digits#14
byte* printf_number_buffer::buffer_digits#15
byte* printf_number_buffer::buffer_digits#16
byte* printf_number_buffer::buffer_digits#17
byte* printf_number_buffer::buffer_digits#18
byte* printf_number_buffer::buffer_digits#19
byte* printf_number_buffer::buffer_digits#2
byte* printf_number_buffer::buffer_digits#3
byte* printf_number_buffer::buffer_digits#4
byte* printf_number_buffer::buffer_digits#5
byte* printf_number_buffer::buffer_digits#6
byte* printf_number_buffer::buffer_digits#7
byte* printf_number_buffer::buffer_digits#8
byte* printf_number_buffer::buffer_digits#9
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0
byte printf_number_buffer::buffer_sign#1
byte printf_number_buffer::buffer_sign#10
byte printf_number_buffer::buffer_sign#11
byte printf_number_buffer::buffer_sign#2
byte printf_number_buffer::buffer_sign#3
byte printf_number_buffer::buffer_sign#4
byte printf_number_buffer::buffer_sign#5
byte printf_number_buffer::buffer_sign#6
byte printf_number_buffer::buffer_sign#7
byte printf_number_buffer::buffer_sign#8
byte printf_number_buffer::buffer_sign#9
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_justify_left#0
byte printf_number_buffer::format_justify_left#1
byte printf_number_buffer::format_justify_left#10
byte printf_number_buffer::format_justify_left#11
byte printf_number_buffer::format_justify_left#12
byte printf_number_buffer::format_justify_left#13
byte printf_number_buffer::format_justify_left#14
byte printf_number_buffer::format_justify_left#15
byte printf_number_buffer::format_justify_left#16
byte printf_number_buffer::format_justify_left#17
byte printf_number_buffer::format_justify_left#18
byte printf_number_buffer::format_justify_left#19
byte printf_number_buffer::format_justify_left#2
byte printf_number_buffer::format_justify_left#20
byte printf_number_buffer::format_justify_left#3
byte printf_number_buffer::format_justify_left#4
byte printf_number_buffer::format_justify_left#5
byte printf_number_buffer::format_justify_left#6
byte printf_number_buffer::format_justify_left#7
byte printf_number_buffer::format_justify_left#8
byte printf_number_buffer::format_justify_left#9
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_min_length#0
byte printf_number_buffer::format_min_length#1
byte printf_number_buffer::format_min_length#2
byte printf_number_buffer::format_min_length#3
byte printf_number_buffer::format_min_length#4
byte printf_number_buffer::format_min_length#5
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_radix#0
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_sign_always#0
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_upper_case#0
byte printf_number_buffer::format_upper_case#1
byte printf_number_buffer::format_upper_case#10
byte printf_number_buffer::format_upper_case#11
byte printf_number_buffer::format_upper_case#12
byte printf_number_buffer::format_upper_case#13
byte printf_number_buffer::format_upper_case#14
byte printf_number_buffer::format_upper_case#15
byte printf_number_buffer::format_upper_case#16
byte printf_number_buffer::format_upper_case#2
byte printf_number_buffer::format_upper_case#3
byte printf_number_buffer::format_upper_case#4
byte printf_number_buffer::format_upper_case#5
byte printf_number_buffer::format_upper_case#6
byte printf_number_buffer::format_upper_case#7
byte printf_number_buffer::format_upper_case#8
byte printf_number_buffer::format_upper_case#9
byte printf_number_buffer::format_zero_padding
byte printf_number_buffer::format_zero_padding#0
byte printf_number_buffer::format_zero_padding#1
byte printf_number_buffer::format_zero_padding#10
byte printf_number_buffer::format_zero_padding#11
byte printf_number_buffer::format_zero_padding#12
byte printf_number_buffer::format_zero_padding#13
byte printf_number_buffer::format_zero_padding#14
byte printf_number_buffer::format_zero_padding#15
byte printf_number_buffer::format_zero_padding#16
byte printf_number_buffer::format_zero_padding#17
byte printf_number_buffer::format_zero_padding#18
byte printf_number_buffer::format_zero_padding#19
byte printf_number_buffer::format_zero_padding#2
byte printf_number_buffer::format_zero_padding#20
byte printf_number_buffer::format_zero_padding#3
byte printf_number_buffer::format_zero_padding#4
byte printf_number_buffer::format_zero_padding#5
byte printf_number_buffer::format_zero_padding#6
byte printf_number_buffer::format_zero_padding#7
byte printf_number_buffer::format_zero_padding#8
byte printf_number_buffer::format_zero_padding#9
signed byte printf_number_buffer::len
signed byte printf_number_buffer::len#0
signed byte printf_number_buffer::len#1
signed byte printf_number_buffer::len#2
signed byte printf_number_buffer::len#3
signed byte printf_number_buffer::padding
signed byte printf_number_buffer::padding#0
signed byte printf_number_buffer::padding#1
signed byte printf_number_buffer::padding#10
signed byte printf_number_buffer::padding#11
signed byte printf_number_buffer::padding#12
signed byte printf_number_buffer::padding#13
signed byte printf_number_buffer::padding#14
signed byte printf_number_buffer::padding#15
signed byte printf_number_buffer::padding#16
signed byte printf_number_buffer::padding#17
signed byte printf_number_buffer::padding#2
signed byte printf_number_buffer::padding#3
signed byte printf_number_buffer::padding#4
signed byte printf_number_buffer::padding#5
signed byte printf_number_buffer::padding#6
signed byte printf_number_buffer::padding#7
signed byte printf_number_buffer::padding#8
signed byte printf_number_buffer::padding#9
void printf_padding(byte printf_padding::pad , byte printf_padding::length)
bool~ printf_padding::$0
label printf_padding::@1
label printf_padding::@2
label printf_padding::@3
label printf_padding::@return
byte printf_padding::i
byte printf_padding::i#0
byte printf_padding::i#1
byte printf_padding::i#2
byte printf_padding::i#3
byte printf_padding::i#4
byte printf_padding::length
byte printf_padding::length#0
byte printf_padding::length#1
byte printf_padding::length#2
byte printf_padding::length#3
byte printf_padding::length#4
byte printf_padding::length#5
byte printf_padding::length#6
byte printf_padding::length#7
byte printf_padding::length#8
byte printf_padding::pad
byte printf_padding::pad#0
byte printf_padding::pad#1
byte printf_padding::pad#2
byte printf_padding::pad#3
byte printf_padding::pad#4
byte printf_padding::pad#5
byte printf_padding::pad#6
byte printf_padding::pad#7
byte printf_padding::pad#8
void printf_string(byte* printf_string::str , byte printf_string::format_min_length , byte printf_string::format_justify_left)
bool~ printf_string::$0
bool~ printf_string::$1
signed byte~ printf_string::$10
bool~ printf_string::$11
bool~ printf_string::$12
signed byte~ printf_string::$13
bool~ printf_string::$14
bool~ printf_string::$15
bool~ printf_string::$2
bool~ printf_string::$3
bool~ printf_string::$6
bool~ printf_string::$7
word~ printf_string::$9
label printf_string::@1
label printf_string::@10
label printf_string::@2
label printf_string::@3
label printf_string::@4
label printf_string::@5
label printf_string::@6
label printf_string::@7
label printf_string::@8
label printf_string::@9
label printf_string::@return
struct printf_format_string printf_string::format
byte printf_string::format_justify_left
byte printf_string::format_justify_left#0
byte printf_string::format_justify_left#1
byte printf_string::format_justify_left#2
byte printf_string::format_justify_left#3
byte printf_string::format_justify_left#4
byte printf_string::format_justify_left#5
byte printf_string::format_justify_left#6
byte printf_string::format_justify_left#7
byte printf_string::format_justify_left#8
byte printf_string::format_justify_left#9
byte printf_string::format_min_length
byte printf_string::format_min_length#0
byte printf_string::format_min_length#1
byte printf_string::format_min_length#2
byte printf_string::format_min_length#3
signed byte printf_string::len
signed byte printf_string::len#0
signed byte printf_string::padding
signed byte printf_string::padding#0
signed byte printf_string::padding#1
signed byte printf_string::padding#2
signed byte printf_string::padding#3
signed byte printf_string::padding#4
signed byte printf_string::padding#5
signed byte printf_string::padding#6
signed byte printf_string::padding#7
signed byte printf_string::padding#8
byte* printf_string::str
byte* printf_string::str#0
byte* printf_string::str#1
byte* printf_string::str#2
byte* printf_string::str#3
byte* printf_string::str#4
byte* printf_string::str#5
byte* printf_string::str#6
byte* printf_string::str#7
byte* printf_string::str#8
void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
number~ printf_uint::$0
byte~ printf_uint::$1
number~ printf_uint::$2
bool~ printf_uint::$5
label printf_uint::@1
label printf_uint::@2
label printf_uint::@3
label printf_uint::@4
label printf_uint::@5
label printf_uint::@return
struct printf_format_number printf_uint::format
byte printf_uint::format_justify_left
byte printf_uint::format_justify_left#0
byte printf_uint::format_justify_left#1
byte printf_uint::format_justify_left#2
byte printf_uint::format_justify_left#3
byte printf_uint::format_justify_left#4
byte printf_uint::format_justify_left#5
byte printf_uint::format_min_length
byte printf_uint::format_min_length#0
byte printf_uint::format_min_length#1
byte printf_uint::format_min_length#2
byte printf_uint::format_min_length#3
byte printf_uint::format_min_length#4
byte printf_uint::format_min_length#5
byte printf_uint::format_radix
byte printf_uint::format_radix#0
byte printf_uint::format_radix#1
byte printf_uint::format_radix#2
byte printf_uint::format_radix#3
byte printf_uint::format_radix#4
byte printf_uint::format_radix#5
byte printf_uint::format_sign_always
byte printf_uint::format_sign_always#0
byte printf_uint::format_sign_always#1
byte printf_uint::format_sign_always#2
byte printf_uint::format_sign_always#3
byte printf_uint::format_sign_always#4
byte printf_uint::format_sign_always#5
byte printf_uint::format_upper_case
byte printf_uint::format_upper_case#0
byte printf_uint::format_upper_case#1
byte printf_uint::format_upper_case#2
byte printf_uint::format_upper_case#3
byte printf_uint::format_upper_case#4
byte printf_uint::format_upper_case#5
byte printf_uint::format_zero_padding
byte printf_uint::format_zero_padding#0
byte printf_uint::format_zero_padding#1
byte printf_uint::format_zero_padding#2
byte printf_uint::format_zero_padding#3
byte printf_uint::format_zero_padding#4
byte printf_uint::format_zero_padding#5
word printf_uint::uvalue
word printf_uint::uvalue#0
word printf_uint::uvalue#1
word printf_uint::uvalue#2
word printf_uint::uvalue#3
word printf_uint::uvalue#4
word strlen(byte* strlen::str)
bool~ strlen::$0
label strlen::@1
label strlen::@2
label strlen::@3
label strlen::@return
word strlen::len
word strlen::len#0
word strlen::len#1
word strlen::len#2
word strlen::len#3
word strlen::len#4
word strlen::return
word strlen::return#0
word strlen::return#1
word strlen::return#2
word strlen::return#3
word strlen::return#4
word strlen::return#5
word strlen::return#6
byte* strlen::str
byte* strlen::str#0
byte* strlen::str#1
byte* strlen::str#2
byte* strlen::str#3
byte* strlen::str#4
byte* strlen::str#5
byte* strupr(byte* strupr::str)
byte~ strupr::$0
bool~ strupr::$1
label strupr::@1
label strupr::@2
label strupr::@3
label strupr::@4
label strupr::@return
byte* strupr::return
byte* strupr::return#0
byte* strupr::return#1
byte* strupr::return#2
byte* strupr::return#3
byte* strupr::src
byte* strupr::src#0
byte* strupr::src#1
byte* strupr::src#2
byte* strupr::src#3
byte* strupr::src#4
byte* strupr::str
byte* strupr::str#0
byte* strupr::str#1
byte* strupr::str#2
byte* strupr::str#3
byte* strupr::str#4
byte* strupr::str#5
const byte* tod_buffer[]  = "00:00:00:00"
void tod_init(byte tod_init::tod_TENTHS , byte tod_init::tod_SEC , byte tod_init::tod_MIN , byte tod_init::tod_HOURS)
label tod_init::@return
struct TIME_OF_DAY tod_init::tod
byte tod_init::tod_HOURS
byte tod_init::tod_HOURS#0
byte tod_init::tod_HOURS#1
byte tod_init::tod_MIN
byte tod_init::tod_MIN#0
byte tod_init::tod_MIN#1
byte tod_init::tod_SEC
byte tod_init::tod_SEC#0
byte tod_init::tod_SEC#1
byte tod_init::tod_TENTHS
byte tod_init::tod_TENTHS#0
byte tod_init::tod_TENTHS#1
struct TIME_OF_DAY tod_read()
label tod_read::@return
byte tod_read::hours
byte tod_read::hours#0
byte tod_read::mins
byte tod_read::mins#0
struct TIME_OF_DAY tod_read::return
struct TIME_OF_DAY tod_read::return#0
struct TIME_OF_DAY tod_read::return#1
byte tod_read::return_HOURS
byte tod_read::return_HOURS#0
byte tod_read::return_HOURS#1
byte tod_read::return_HOURS#2
byte tod_read::return_HOURS#3
byte tod_read::return_HOURS#4
byte tod_read::return_MIN
byte tod_read::return_MIN#0
byte tod_read::return_MIN#1
byte tod_read::return_MIN#2
byte tod_read::return_MIN#3
byte tod_read::return_MIN#4
byte tod_read::return_SEC
byte tod_read::return_SEC#0
byte tod_read::return_SEC#1
byte tod_read::return_SEC#2
byte tod_read::return_SEC#3
byte tod_read::return_SEC#4
byte tod_read::return_TENTHS
byte tod_read::return_TENTHS#0
byte tod_read::return_TENTHS#1
byte tod_read::return_TENTHS#2
byte tod_read::return_TENTHS#3
byte tod_read::return_TENTHS#4
byte tod_read::secs
byte tod_read::secs#0
byte tod_read::tenths
byte tod_read::tenths#0
byte tod_read::tod_HOURS
byte tod_read::tod_HOURS#0
byte tod_read::tod_MIN
byte tod_read::tod_MIN#0
byte tod_read::tod_SEC
byte tod_read::tod_SEC#0
byte tod_read::tod_TENTHS
byte tod_read::tod_TENTHS#0
byte* tod_str(byte tod_str::tod_TENTHS , byte tod_str::tod_SEC , byte tod_str::tod_MIN , byte tod_str::tod_HOURS)
byte~ tod_str::$0
byte~ tod_str::$1
number~ tod_str::$10
number~ tod_str::$11
byte~ tod_str::$12
byte~ tod_str::$13
number~ tod_str::$14
number~ tod_str::$15
number~ tod_str::$2
number~ tod_str::$3
byte~ tod_str::$4
byte~ tod_str::$5
number~ tod_str::$6
number~ tod_str::$7
byte~ tod_str::$8
byte~ tod_str::$9
label tod_str::@return
byte* tod_str::return
byte* tod_str::return#0
byte* tod_str::return#1
byte* tod_str::return#2
byte* tod_str::return#3
byte* tod_str::return#4
struct TIME_OF_DAY tod_str::tod
byte tod_str::tod_HOURS
byte tod_str::tod_HOURS#0
byte tod_str::tod_HOURS#1
byte tod_str::tod_MIN
byte tod_str::tod_MIN#0
byte tod_str::tod_MIN#1
byte tod_str::tod_SEC
byte tod_str::tod_SEC#0
byte tod_str::tod_SEC#1
byte tod_str::tod_TENTHS
byte tod_str::tod_TENTHS#0
byte tod_str::tod_TENTHS#1
byte toupper(byte toupper::ch)
bool~ toupper::$0
bool~ toupper::$1
bool~ toupper::$2
byte~ toupper::$3
label toupper::@1
label toupper::@2
label toupper::@return
byte toupper::ch
byte toupper::ch#0
byte toupper::ch#1
byte toupper::ch#2
byte toupper::ch#3
byte toupper::return
byte toupper::return#0
byte toupper::return#1
byte toupper::return#2
byte toupper::return#3
byte toupper::return#4
byte toupper::return#5
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
bool~ utoa::$0
bool~ utoa::$1
byte~ utoa::$10
byte~ utoa::$11
bool~ utoa::$2
bool~ utoa::$3
number~ utoa::$4
bool~ utoa::$5
bool~ utoa::$6
bool~ utoa::$7
bool~ utoa::$8
word~ utoa::$9
label utoa::@1
label utoa::@10
label utoa::@11
label utoa::@12
label utoa::@13
label utoa::@14
label utoa::@15
label utoa::@2
label utoa::@3
label utoa::@4
label utoa::@5
label utoa::@6
label utoa::@7
label utoa::@8
label utoa::@9
label utoa::@return
byte* utoa::buffer
byte* utoa::buffer#0
byte* utoa::buffer#1
byte* utoa::buffer#10
byte* utoa::buffer#11
byte* utoa::buffer#12
byte* utoa::buffer#13
byte* utoa::buffer#14
byte* utoa::buffer#15
byte* utoa::buffer#16
byte* utoa::buffer#17
byte* utoa::buffer#18
byte* utoa::buffer#19
byte* utoa::buffer#2
byte* utoa::buffer#20
byte* utoa::buffer#21
byte* utoa::buffer#3
byte* utoa::buffer#4
byte* utoa::buffer#5
byte* utoa::buffer#6
byte* utoa::buffer#7
byte* utoa::buffer#8
byte* utoa::buffer#9
byte utoa::digit
byte utoa::digit#0
byte utoa::digit#1
byte utoa::digit#2
byte utoa::digit#3
byte utoa::digit#4
byte utoa::digit#5
byte utoa::digit#6
word utoa::digit_value
word utoa::digit_value#0
word utoa::digit_value#1
word* utoa::digit_values
word* utoa::digit_values#0
word* utoa::digit_values#1
word* utoa::digit_values#10
word* utoa::digit_values#2
word* utoa::digit_values#3
word* utoa::digit_values#4
word* utoa::digit_values#5
word* utoa::digit_values#6
word* utoa::digit_values#7
word* utoa::digit_values#8
word* utoa::digit_values#9
byte utoa::max_digits
byte utoa::max_digits#0
byte utoa::max_digits#1
byte utoa::max_digits#10
byte utoa::max_digits#2
byte utoa::max_digits#3
byte utoa::max_digits#4
byte utoa::max_digits#5
byte utoa::max_digits#6
byte utoa::max_digits#7
byte utoa::max_digits#8
byte utoa::max_digits#9
byte utoa::radix
byte utoa::radix#0
byte utoa::radix#1
byte utoa::radix#2
byte utoa::radix#3
byte utoa::radix#4
byte utoa::started
byte utoa::started#0
byte utoa::started#1
byte utoa::started#2
byte utoa::started#3
byte utoa::started#4
word utoa::value
word utoa::value#0
word utoa::value#1
word utoa::value#10
word utoa::value#11
word utoa::value#12
word utoa::value#13
word utoa::value#14
word utoa::value#15
word utoa::value#2
word utoa::value#3
word utoa::value#4
word utoa::value#5
word utoa::value#6
word utoa::value#7
word utoa::value#8
word utoa::value#9
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
bool~ utoa_append::$0
label utoa_append::@1
label utoa_append::@2
label utoa_append::@3
label utoa_append::@return
byte* utoa_append::buffer
byte* utoa_append::buffer#0
byte* utoa_append::buffer#1
byte* utoa_append::buffer#2
byte* utoa_append::buffer#3
byte* utoa_append::buffer#4
byte utoa_append::digit
byte utoa_append::digit#0
byte utoa_append::digit#1
byte utoa_append::digit#2
byte utoa_append::digit#3
byte utoa_append::digit#4
word utoa_append::return
word utoa_append::return#0
word utoa_append::return#1
word utoa_append::return#2
word utoa_append::return#3
word utoa_append::return#4
word utoa_append::sub
word utoa_append::sub#0
word utoa_append::sub#1
word utoa_append::sub#2
word utoa_append::sub#3
word utoa_append::value
word utoa_append::value#0
word utoa_append::value#1
word utoa_append::value#2
word utoa_append::value#3
word utoa_append::value#4
word utoa_append::value#5

Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#2 > 0
Adding number conversion cast (unumber) 0 in strupr::$1 = 0 != *strupr::src#2
Adding number conversion cast (unumber) 0 in strlen::$0 = 0 != *strlen::str#3
Adding number conversion cast (unumber) 5 in utoa::max_digits#1 = 5
Adding number conversion cast (unumber) 4 in utoa::max_digits#2 = 4
Adding number conversion cast (unumber) 6 in utoa::max_digits#3 = 6
Adding number conversion cast (unumber) $10 in utoa::max_digits#4 = $10
Adding number conversion cast (unumber) 0 in *utoa::buffer#2 = 0
Adding number conversion cast (unumber) 1 in utoa::$4 = utoa::max_digits#5 - 1
Adding number conversion cast (unumber) utoa::$4 in utoa::$4 = utoa::max_digits#5 - (unumber)1
Adding number conversion cast (unumber) 0 in *utoa::buffer#3 = 0
Adding number conversion cast (unumber) 1 in utoa::started#1 = 1
Adding number conversion cast (unumber) $19 in gotoxy::$0 = gotoxy::y#5 > $19
Adding number conversion cast (unumber) $28 in gotoxy::$2 = gotoxy::x#5 >= $28
Adding number conversion cast (unumber) 0 in gotoxy::y#0 = 0
Adding number conversion cast (unumber) $28 in gotoxy::$4 = gotoxy::$7 * $28
Adding number conversion cast (unumber) gotoxy::$4 in gotoxy::$4 = gotoxy::$7 * (unumber)$28
Adding number conversion cast (unumber) 0 in gotoxy::x#0 = 0
Adding number conversion cast (unumber) $28 in cputc::$1 = conio_cursor_x == $28
Adding number conversion cast (unumber) $28 in conio_line_text = conio_line_text + $28
Adding number conversion cast (unumber) $28 in conio_line_color = conio_line_color + $28
Adding number conversion cast (unumber) 0 in conio_cursor_x = 0
Adding number conversion cast (unumber) $19 in cscroll::$0 = conio_cursor_y == $19
Adding number conversion cast (unumber) 0 in cscroll::$7 = 0 != conio_scroll_enable
Adding number conversion cast (unumber) $28 in memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Adding number conversion cast (unumber) $19*$28-$28 in memcpy::num#0 = $19*$28-$28
Adding number conversion cast (unumber) $28 in memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Adding number conversion cast (unumber) $19*$28-$28 in memcpy::num#1 = $19*$28-$28
Adding number conversion cast (unumber) $28 in memset::str#0 = (void*)CONIO_SCREEN_TEXT+$19*$28-$28
Adding number conversion cast (unumber) $19*$28 in memset::str#0 = (void*)CONIO_SCREEN_TEXT+$19*$28-(unumber)$28
Adding number conversion cast (unumber) $28 in memset::num#0 = $28
Adding number conversion cast (unumber) $28 in memset::str#1 = (void*)CONIO_SCREEN_COLORS+$19*$28-$28
Adding number conversion cast (unumber) $19*$28 in memset::str#1 = (void*)CONIO_SCREEN_COLORS+$19*$28-(unumber)$28
Adding number conversion cast (unumber) $28 in memset::num#1 = $28
Adding number conversion cast (unumber) $28 in conio_line_text = conio_line_text - $28
Adding number conversion cast (unumber) $28 in conio_line_color = conio_line_color - $28
Adding number conversion cast (unumber) 0 in gotoxy::x#1 = 0
Adding number conversion cast (unumber) 0 in gotoxy::y#1 = 0
Adding number conversion cast (unumber) 0 in cputs::$2 = 0 != cputs::$0
Adding number conversion cast (unumber) 0 in printf_uint::$5 = 0 != printf_uint::format_sign_always#1
Adding number conversion cast (unumber) printf_uint::$2 in printf_uint::format_upper_case#2 = phi( printf_uint::@1/printf_uint::format_upper_case#3, printf_uint::@2/printf_uint::format_upper_case#4 )
  printf_uint::format_zero_padding#2 = phi( printf_uint::@1/printf_uint::format_zero_padding#3, printf_uint::@2/printf_uint::format_zero_padding#4 )
  printf_uint::format_sign_always#3 = phi( printf_uint::@1/printf_uint::format_sign_always#4, printf_uint::@2/printf_uint::format_sign_always#5 )
  printf_uint::format_justify_left#2 = phi( printf_uint::@1/printf_uint::format_justify_left#3, printf_uint::@2/printf_uint::format_justify_left#4 )
  printf_uint::format_min_length#2 = phi( printf_uint::@1/printf_uint::format_min_length#3, printf_uint::@2/printf_uint::format_min_length#4 )
  printf_uint::format_radix#1 = phi( printf_uint::@1/printf_uint::format_radix#3, printf_uint::@2/printf_uint::format_radix#4 )
  printf_uint::uvalue#1 = phi( printf_uint::@1/printf_uint::uvalue#2, printf_uint::@2/printf_uint::uvalue#3 )
  printf_uint::$2 = phi( printf_uint::@1/printf_uint::$1, printf_uint::@2/printf_uint::$0 )
Adding number conversion cast (unumber) printf_uint::$0 in printf_uint::format_upper_case#2 = phi( printf_uint::@1/printf_uint::format_upper_case#3, printf_uint::@2/printf_uint::format_upper_case#4 )
  printf_uint::format_zero_padding#2 = phi( printf_uint::@1/printf_uint::format_zero_padding#3, printf_uint::@2/printf_uint::format_zero_padding#4 )
  printf_uint::format_sign_always#3 = phi( printf_uint::@1/printf_uint::format_sign_always#4, printf_uint::@2/printf_uint::format_sign_always#5 )
  printf_uint::format_justify_left#2 = phi( printf_uint::@1/printf_uint::format_justify_left#3, printf_uint::@2/printf_uint::format_justify_left#4 )
  printf_uint::format_min_length#2 = phi( printf_uint::@1/printf_uint::format_min_length#3, printf_uint::@2/printf_uint::format_min_length#4 )
  printf_uint::format_radix#1 = phi( printf_uint::@1/printf_uint::format_radix#3, printf_uint::@2/printf_uint::format_radix#4 )
  printf_uint::uvalue#1 = phi( printf_uint::@1/printf_uint::uvalue#2, printf_uint::@2/printf_uint::uvalue#3 )
  printf_uint::$2 = phi( printf_uint::@1/printf_uint::$1, printf_uint::@2/printf_uint::$0 )
Adding number conversion cast (unumber) 0 in printf_number_buffer::$26 = 0 != printf_number_buffer::format_min_length#1
Adding number conversion cast (unumber) 0 in printf_number_buffer::$27 = 0 != printf_number_buffer::format_justify_left#1
Adding number conversion cast (unumber) 0 in printf_number_buffer::$28 = 0 != printf_number_buffer::format_zero_padding#1
Adding number conversion cast (unumber) 0 in printf_number_buffer::$29 = 0 != printf_number_buffer::buffer_sign#1
Adding number conversion cast (snumber) 0 in printf_number_buffer::$22 = printf_number_buffer::padding#1 < 0
Adding number conversion cast (snumber) 0 in printf_number_buffer::padding#2 = 0
Adding number conversion cast (unumber) 0 in printf_number_buffer::$30 = 0 != printf_number_buffer::buffer_sign#2
Adding number conversion cast (unumber) 0 in printf_number_buffer::$31 = 0 != printf_number_buffer::format_upper_case#1
Adding number conversion cast (unumber) 0 in printf_number_buffer::$32 = 0 != printf_number_buffer::format_zero_padding#3
Adding number conversion cast (unumber) 0 in printf_string::$14 = 0 != printf_string::format_min_length#1
Adding number conversion cast (unumber) 0 in printf_string::$15 = 0 != printf_string::format_justify_left#1
Adding number conversion cast (snumber) 0 in printf_string::$11 = printf_string::padding#1 < 0
Adding number conversion cast (snumber) 0 in printf_string::padding#2 = 0
Adding number conversion cast (unumber) $80 in *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | $80
Adding number conversion cast (unumber) $7f in *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & $7f
Adding number conversion cast (unumber) 4 in tod_str::$0 = tod_str::tod_HOURS#1 >> 4
Adding number conversion cast (unumber) 0 in tod_buffer[0] = tod_str::$1
Adding number conversion cast (unumber) $f in tod_str::$2 = tod_str::tod_HOURS#1 & $f
Adding number conversion cast (unumber) tod_str::$2 in tod_str::$2 = tod_str::tod_HOURS#1 & (unumber)$f
Adding number conversion cast (unumber) tod_str::$3 in tod_str::$3 = '0' + tod_str::$2
Adding number conversion cast (unumber) 1 in tod_buffer[1] = tod_str::$3
Adding number conversion cast (unumber) 4 in tod_str::$4 = tod_str::tod_MIN#1 >> 4
Adding number conversion cast (unumber) 3 in tod_buffer[3] = tod_str::$5
Adding number conversion cast (unumber) $f in tod_str::$6 = tod_str::tod_MIN#1 & $f
Adding number conversion cast (unumber) tod_str::$6 in tod_str::$6 = tod_str::tod_MIN#1 & (unumber)$f
Adding number conversion cast (unumber) tod_str::$7 in tod_str::$7 = '0' + tod_str::$6
Adding number conversion cast (unumber) 4 in tod_buffer[4] = tod_str::$7
Adding number conversion cast (unumber) 4 in tod_str::$8 = tod_str::tod_SEC#1 >> 4
Adding number conversion cast (unumber) 6 in tod_buffer[6] = tod_str::$9
Adding number conversion cast (unumber) $f in tod_str::$10 = tod_str::tod_SEC#1 & $f
Adding number conversion cast (unumber) tod_str::$10 in tod_str::$10 = tod_str::tod_SEC#1 & (unumber)$f
Adding number conversion cast (unumber) tod_str::$11 in tod_str::$11 = '0' + tod_str::$10
Adding number conversion cast (unumber) 7 in tod_buffer[7] = tod_str::$11
Adding number conversion cast (unumber) 4 in tod_str::$12 = tod_str::tod_TENTHS#1 >> 4
Adding number conversion cast (unumber) 9 in tod_buffer[9] = tod_str::$13
Adding number conversion cast (unumber) $f in tod_str::$14 = tod_str::tod_TENTHS#1 & $f
Adding number conversion cast (unumber) tod_str::$14 in tod_str::$14 = tod_str::tod_TENTHS#1 & (unumber)$f
Adding number conversion cast (unumber) tod_str::$15 in tod_str::$15 = '0' + tod_str::$14
Adding number conversion cast (unumber) $a in tod_buffer[$a] = tod_str::$15
Adding number conversion cast (unumber) $2710 in main::$5 = main::i#2 < $2710
Adding number conversion cast (unumber) $7f in main::$6 = main::i#3 & $7f
Adding number conversion cast (unumber) main::$6 in main::$6 = main::i#3 & (unumber)$7f
Adding number conversion cast (unumber) 0 in main::$7 = main::$6 == 0
Adding number conversion cast (unumber) 0 in gotoxy::x#2 = 0
Adding number conversion cast (unumber) $16 in gotoxy::y#2 = $16
Adding number conversion cast (unumber) 0 in gotoxy::x#3 = 0
Adding number conversion cast (unumber) $10 in gotoxy::y#3 = $10
Adding number conversion cast (unumber) 0 in gotoxy::x#4 = 0
Adding number conversion cast (unumber) 0 in gotoxy::y#4 = 0
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) 0 in printf_uint::$0 = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memcpy::src#0 = (byte*)memcpy::source#2
Inlining cast memcpy::dst#0 = (byte*)memcpy::destination#2
Inlining cast memset::dst#0 = (byte*)memset::str#3
Inlining cast utoa::max_digits#1 = (unumber)5
Inlining cast utoa::max_digits#2 = (unumber)4
Inlining cast utoa::max_digits#3 = (unumber)6
Inlining cast utoa::max_digits#4 = (unumber)$10
Inlining cast *utoa::buffer#2 = (unumber)0
Inlining cast *utoa::buffer#3 = (unumber)0
Inlining cast utoa::started#1 = (unumber)1
Inlining cast gotoxy::y#0 = (unumber)0
Inlining cast gotoxy::x#0 = (unumber)0
Inlining cast conio_cursor_x = (unumber)0
Inlining cast memcpy::num#0 = (unumber)$19*$28-$28
Inlining cast memcpy::num#1 = (unumber)$19*$28-$28
Inlining cast memset::num#0 = (unumber)$28
Inlining cast memset::num#1 = (unumber)$28
Inlining cast gotoxy::x#1 = (unumber)0
Inlining cast gotoxy::y#1 = (unumber)0
Inlining cast printf_uint::$0 = (unumber)0
Inlining cast printf_number_buffer::padding#2 = (snumber)0
Inlining cast printf_string::padding#2 = (snumber)0
Inlining cast gotoxy::x#2 = (unumber)0
Inlining cast gotoxy::y#2 = (unumber)$16
Inlining cast gotoxy::x#3 = (unumber)0
Inlining cast gotoxy::y#3 = (unumber)$10
Inlining cast gotoxy::x#4 = (unumber)0
Inlining cast gotoxy::y#4 = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (struct MOS6526_CIA*) 56320
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast $7f
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast $f
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast 3
Simplifying constant integer cast $f
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $f
Simplifying constant integer cast 7
Simplifying constant integer cast 4
Simplifying constant integer cast 9
Simplifying constant integer cast $f
Simplifying constant integer cast $a
Simplifying constant integer cast $2710
Simplifying constant integer cast $7f
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $16
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 5
Finalized unsigned number type 4
Finalized unsigned number type 6
Finalized unsigned number type $10
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type $19
Finalized unsigned number type $28
Finalized unsigned number type 0
Finalized unsigned number type $28
Finalized unsigned number type 0
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type 0
Finalized unsigned number type $19
Finalized unsigned number type 0
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized signed number type 0
Finalized signed number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized signed number type 0
Finalized signed number type 0
Finalized unsigned number type $80
Finalized unsigned number type $7f
Finalized unsigned number type 4
Finalized unsigned number type 0
Finalized unsigned number type $f
Finalized unsigned number type 1
Finalized unsigned number type 4
Finalized unsigned number type 3
Finalized unsigned number type $f
Finalized unsigned number type 4
Finalized unsigned number type 4
Finalized unsigned number type 6
Finalized unsigned number type $f
Finalized unsigned number type 7
Finalized unsigned number type 4
Finalized unsigned number type 9
Finalized unsigned number type $f
Finalized unsigned number type $a
Finalized unsigned number type $2710
Finalized unsigned number type $7f
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $16
Finalized unsigned number type 0
Finalized unsigned number type $10
Finalized unsigned number type 0
Finalized unsigned number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in utoa::$4 = utoa::max_digits#5 - 1
Inferred type updated to word in gotoxy::$4 = gotoxy::$7 * $28
Inferred type updated to byte in printf_uint::$0 = 0
Inferred type updated to byte for printf_uint::$2
Inferred type updated to byte in tod_str::$2 = tod_str::tod_HOURS#1 & $f
Inferred type updated to byte in tod_str::$3 = '0' + tod_str::$2
Inferred type updated to byte in tod_str::$6 = tod_str::tod_MIN#1 & $f
Inferred type updated to byte in tod_str::$7 = '0' + tod_str::$6
Inferred type updated to byte in tod_str::$10 = tod_str::tod_SEC#1 & $f
Inferred type updated to byte in tod_str::$11 = '0' + tod_str::$10
Inferred type updated to byte in tod_str::$14 = tod_str::tod_TENTHS#1 & $f
Inferred type updated to byte in tod_str::$15 = '0' + tod_str::$14
Inferred type updated to byte in main::$6 = main::i#3 & $7f
Inversing boolean not [33] memset::$1 = memset::num#2 <= 0 from [32] memset::$0 = memset::num#2 > 0
Inversing boolean not [165] gotoxy::$1 = gotoxy::y#5 <= $19 from [164] gotoxy::$0 = gotoxy::y#5 > $19
Inversing boolean not [169] gotoxy::$3 = gotoxy::x#5 < $28 from [168] gotoxy::$2 = gotoxy::x#5 >= $28
Inversing boolean not [195] cputc::$2 = conio_cursor_x != $28 from [194] cputc::$1 = conio_cursor_x == $28
Inversing boolean not [206] cscroll::$1 = conio_cursor_y != $19 from [205] cscroll::$0 = conio_cursor_y == $19
Inversing boolean not [288] printf_number_buffer::$0 = 0 == printf_number_buffer::format_min_length#1 from [287] printf_number_buffer::$26 = 0 != printf_number_buffer::format_min_length#1
Inversing boolean not [292] printf_number_buffer::$1 = 0 == printf_number_buffer::format_justify_left#1 from [291] printf_number_buffer::$27 = 0 != printf_number_buffer::format_justify_left#1
Inversing boolean not [294] printf_number_buffer::$2 = 0 == printf_number_buffer::format_zero_padding#1 from [293] printf_number_buffer::$28 = 0 != printf_number_buffer::format_zero_padding#1
Inversing boolean not [307] printf_number_buffer::$20 = 0 == printf_number_buffer::buffer_sign#1 from [306] printf_number_buffer::$29 = 0 != printf_number_buffer::buffer_sign#1
Inversing boolean not [314] printf_number_buffer::$23 = printf_number_buffer::padding#1 >= 0 from [313] printf_number_buffer::$22 = printf_number_buffer::padding#1 < 0
Inversing boolean not [322] printf_number_buffer::$7 = 0 == printf_number_buffer::buffer_sign#2 from [321] printf_number_buffer::$30 = 0 != printf_number_buffer::buffer_sign#2
Inversing boolean not [339] printf_number_buffer::$12 = 0 == printf_number_buffer::format_upper_case#1 from [338] printf_number_buffer::$31 = 0 != printf_number_buffer::format_upper_case#1
Inversing boolean not [351] printf_number_buffer::$14 = 0 == printf_number_buffer::format_zero_padding#3 from [350] printf_number_buffer::$32 = 0 != printf_number_buffer::format_zero_padding#3
Inversing boolean not [369] printf_string::$0 = 0 == printf_string::format_min_length#1 from [368] printf_string::$14 = 0 != printf_string::format_min_length#1
Inversing boolean not [373] printf_string::$1 = 0 == printf_string::format_justify_left#1 from [372] printf_string::$15 = 0 != printf_string::format_justify_left#1
Inversing boolean not [388] printf_string::$12 = printf_string::padding#1 >= 0 from [387] printf_string::$11 = printf_string::padding#1 < 0
Inversing boolean not [478] main::$8 = main::$6 != 0 from [477] main::$7 = main::$6 == 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias toupper::ch#1 = toupper::ch#2 toupper::ch#3 toupper::return#1 
Alias toupper::return#0 = toupper::$3 
Alias toupper::return#2 = toupper::return#4 
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#3 = memcpy::destination#5 memcpy::destination#4 memcpy::return#0 memcpy::return#4 memcpy::return#1 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias strupr::src#0 = strupr::str#1 
Alias strupr::src#2 = strupr::src#3 strupr::src#4 
Alias strupr::str#2 = strupr::str#5 strupr::str#3 strupr::str#4 strupr::return#0 strupr::return#3 strupr::return#1 
Alias toupper::return#3 = toupper::return#5 
Alias strlen::len#2 = strlen::len#4 strlen::len#3 strlen::return#0 strlen::return#4 strlen::return#1 
Alias strlen::str#3 = strlen::str#4 
Alias utoa::value#10 = utoa::value#8 utoa::value#12 utoa::value#13 utoa::value#9 utoa::value#14 utoa::value#15 utoa::value#11 
Alias utoa::buffer#10 = utoa::buffer#17 utoa::buffer#21 utoa::buffer#16 utoa::buffer#18 utoa::buffer#13 utoa::buffer#19 utoa::buffer#20 utoa::buffer#6 
Alias utoa::radix#1 = utoa::radix#2 utoa::radix#3 utoa::radix#4 
Alias utoa::digit#2 = utoa::digit#3 utoa::digit#6 utoa::digit#5 
Alias utoa::digit_values#10 = utoa::digit_values#5 utoa::digit_values#6 utoa::digit_values#9 
Alias utoa::value#2 = utoa::value#5 utoa::value#3 utoa::value#4 
Alias utoa::started#2 = utoa::started#3 
Alias utoa::buffer#11 = utoa::buffer#12 utoa::buffer#7 utoa::buffer#8 utoa::buffer#9 
Alias utoa::max_digits#10 = utoa::max_digits#8 utoa::max_digits#5 utoa::max_digits#9 
Alias utoa::digit_value#0 = utoa::digit_value#1 
Alias utoa_append::return#0 = utoa_append::return#3 
Alias utoa::value#0 = utoa::$9 
Alias utoa_append::digit#2 = utoa_append::digit#4 utoa_append::digit#3 
Alias utoa_append::value#2 = utoa_append::value#3 utoa_append::value#4 utoa_append::return#1 utoa_append::return#4 utoa_append::return#2 
Alias utoa_append::sub#1 = utoa_append::sub#2 
Alias utoa_append::buffer#1 = utoa_append::buffer#4 utoa_append::buffer#2 
Alias gotoxy::x#7 = gotoxy::x#8 
Alias gotoxy::line_offset#0 = gotoxy::$4 
Alias gotoxy::y#7 = gotoxy::y#8 
Alias cputc::c#3 = cputc::c#4 
Alias cputs::c#1 = cputs::$0 cputs::c#2 
Alias cputs::s#0 = cputs::s#8 cputs::s#7 
Alias printf_padding::pad#5 = printf_padding::pad#6 printf_padding::pad#8 
Alias printf_padding::i#2 = printf_padding::i#4 printf_padding::i#3 
Alias printf_padding::length#5 = printf_padding::length#8 printf_padding::length#7 
Alias printf_uint::uvalue#2 = printf_uint::uvalue#4 printf_uint::uvalue#3 
Alias printf_uint::format_radix#3 = printf_uint::format_radix#5 printf_uint::format_radix#4 
Alias printf_uint::format_min_length#3 = printf_uint::format_min_length#5 printf_uint::format_min_length#4 
Alias printf_uint::format_justify_left#3 = printf_uint::format_justify_left#5 printf_uint::format_justify_left#4 
Alias printf_uint::format_sign_always#1 = printf_uint::format_sign_always#4 printf_uint::format_sign_always#5 
Alias printf_uint::format_zero_padding#3 = printf_uint::format_zero_padding#5 printf_uint::format_zero_padding#4 
Alias printf_uint::format_upper_case#3 = printf_uint::format_upper_case#5 printf_uint::format_upper_case#4 
Alias printf_uint::format_min_length#1 = printf_uint::format_min_length#2 
Alias printf_uint::format_justify_left#1 = printf_uint::format_justify_left#2 
Alias printf_uint::format_sign_always#2 = printf_uint::format_sign_always#3 
Alias printf_uint::format_zero_padding#1 = printf_uint::format_zero_padding#2 
Alias printf_uint::format_upper_case#1 = printf_uint::format_upper_case#2 
Alias printf_uint::format_radix#1 = printf_uint::format_radix#2 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#4 printf_number_buffer::buffer_digits#18 printf_number_buffer::buffer_digits#19 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#4 printf_number_buffer::buffer_sign#7 printf_number_buffer::buffer_sign#11 
Alias printf_number_buffer::format_min_length#1 = printf_number_buffer::format_min_length#5 printf_number_buffer::format_min_length#3 printf_number_buffer::format_min_length#4 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#3 printf_number_buffer::format_justify_left#7 printf_number_buffer::format_justify_left#8 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#16 printf_number_buffer::format_zero_padding#4 printf_number_buffer::format_zero_padding#11 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#16 printf_number_buffer::format_upper_case#14 printf_number_buffer::format_upper_case#15 
Alias strlen::return#2 = strlen::return#5 
Alias printf_number_buffer::padding#1 = printf_number_buffer::$21 
Alias printf_number_buffer::len#0 = printf_number_buffer::len#3 
Alias printf_number_buffer::format_justify_left#4 = printf_number_buffer::format_justify_left#5 
Alias printf_number_buffer::format_zero_padding#5 = printf_number_buffer::format_zero_padding#6 
Alias printf_number_buffer::buffer_sign#8 = printf_number_buffer::buffer_sign#9 
Alias printf_number_buffer::format_upper_case#11 = printf_number_buffer::format_upper_case#12 
Alias printf_number_buffer::buffer_digits#15 = printf_number_buffer::buffer_digits#16 
Alias printf_number_buffer::padding#12 = printf_number_buffer::padding#4 printf_number_buffer::padding#3 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#5 printf_number_buffer::buffer_sign#6 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#17 printf_number_buffer::format_zero_padding#12 
Alias printf_number_buffer::format_upper_case#13 = printf_number_buffer::format_upper_case#7 printf_number_buffer::format_upper_case#8 
Alias printf_number_buffer::buffer_digits#12 = printf_number_buffer::buffer_digits#17 printf_number_buffer::buffer_digits#13 
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#20 printf_number_buffer::format_justify_left#18 
Alias printf_number_buffer::buffer_sign#2 = printf_number_buffer::buffer_sign#3 
Alias printf_number_buffer::format_zero_padding#13 = printf_number_buffer::format_zero_padding#8 printf_number_buffer::format_zero_padding#7 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#13 printf_number_buffer::padding#9 
Alias printf_number_buffer::format_upper_case#4 = printf_number_buffer::format_upper_case#9 printf_number_buffer::format_upper_case#5 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#14 printf_number_buffer::buffer_digits#9 
Alias printf_number_buffer::format_justify_left#15 = printf_number_buffer::format_justify_left#19 printf_number_buffer::format_justify_left#16 
Alias printf_number_buffer::padding#16 = printf_number_buffer::padding#6 printf_number_buffer::padding#5 
Alias printf_number_buffer::format_upper_case#2 = printf_number_buffer::format_upper_case#6 printf_number_buffer::format_upper_case#3 
Alias printf_number_buffer::buffer_digits#11 = printf_number_buffer::buffer_digits#8 printf_number_buffer::buffer_digits#7 
Alias printf_number_buffer::format_zero_padding#18 = printf_number_buffer::format_zero_padding#20 printf_number_buffer::format_zero_padding#2 
Alias printf_number_buffer::format_justify_left#12 = printf_number_buffer::format_justify_left#17 printf_number_buffer::format_justify_left#13 
Alias printf_number_buffer::format_zero_padding#3 = printf_number_buffer::format_zero_padding#9 
Alias printf_number_buffer::format_justify_left#2 = printf_number_buffer::format_justify_left#6 
Alias printf_number_buffer::padding#11 = printf_number_buffer::padding#7 printf_number_buffer::padding#8 
Alias printf_number_buffer::buffer_digits#3 = printf_number_buffer::buffer_digits#6 printf_number_buffer::buffer_digits#5 
Alias printf_number_buffer::format_zero_padding#14 = printf_number_buffer::format_zero_padding#19 printf_number_buffer::format_zero_padding#15 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#14 printf_number_buffer::format_justify_left#9 
Alias printf_number_buffer::padding#14 = printf_number_buffer::padding#17 printf_number_buffer::padding#15 
Alias printf_string::str#1 = printf_string::str#3 printf_string::str#7 printf_string::str#6 
Alias printf_string::format_min_length#1 = printf_string::format_min_length#3 printf_string::format_min_length#2 
Alias printf_string::format_justify_left#3 = printf_string::format_justify_left#7 printf_string::format_justify_left#5 printf_string::format_justify_left#4 
Alias strlen::return#3 = strlen::return#6 
Alias printf_string::padding#1 = printf_string::$10 
Alias printf_string::format_justify_left#2 = printf_string::format_justify_left#6 
Alias printf_string::padding#4 = printf_string::padding#7 printf_string::padding#6 
Alias printf_string::padding#3 = printf_string::padding#5 printf_string::padding#8 
Alias printf_string::str#4 = printf_string::str#8 printf_string::str#5 
Alias printf_string::format_justify_left#1 = printf_string::format_justify_left#9 printf_string::format_justify_left#8 
Alias tod_read::return_TENTHS#0 = tod_read::tod_TENTHS#0 tod_read::tenths#0 tod_read::return_TENTHS#3 tod_read::return_TENTHS#1 
Alias tod_read::return_SEC#0 = tod_read::tod_SEC#0 tod_read::secs#0 tod_read::return_SEC#3 tod_read::return_SEC#1 
Alias tod_read::return_MIN#0 = tod_read::tod_MIN#0 tod_read::mins#0 tod_read::return_MIN#3 tod_read::return_MIN#1 
Alias tod_read::return_HOURS#0 = tod_read::tod_HOURS#0 tod_read::hours#0 tod_read::return_HOURS#3 tod_read::return_HOURS#1 
Alias tod_str::return#0 = tod_str::return#3 tod_str::return#1 
Alias main::i#2 = main::i#3 main::i#7 main::i#5 main::i#9 main::i#8 
Alias tod_read::return_TENTHS#2 = tod_read::return_TENTHS#4 
Alias tod_read::return_SEC#2 = tod_read::return_SEC#4 
Alias tod_read::return_MIN#2 = tod_read::return_MIN#4 
Alias tod_read::return_HOURS#2 = tod_read::return_HOURS#4 
Alias tod_str::tod_TENTHS#0 = main::$2_TENTHS 
Alias tod_str::tod_SEC#0 = main::$2_SEC 
Alias tod_str::tod_MIN#0 = main::$2_MIN 
Alias tod_str::tod_HOURS#0 = main::$2_HOURS 
Alias tod_str::return#2 = tod_str::return#4 
Alias printf_string::str#0 = main::$3 
Alias main::i#4 = main::i#6 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias utoa::value#10 = utoa::value#7 
Alias utoa::buffer#10 = utoa::buffer#15 
Alias utoa::digit#2 = utoa::digit#4 
Alias utoa::max_digits#10 = utoa::max_digits#6 
Alias utoa::digit_values#10 = utoa::digit_values#7 
Alias gotoxy::x#5 = gotoxy::x#7 
Alias gotoxy::y#6 = gotoxy::y#7 
Alias printf_uint::uvalue#1 = printf_uint::uvalue#2 
Alias printf_uint::format_radix#1 = printf_uint::format_radix#3 
Alias printf_uint::format_min_length#1 = printf_uint::format_min_length#3 
Alias printf_uint::format_justify_left#1 = printf_uint::format_justify_left#3 
Alias printf_uint::format_sign_always#1 = printf_uint::format_sign_always#2 
Alias printf_uint::format_zero_padding#1 = printf_uint::format_zero_padding#3 
Alias printf_uint::format_upper_case#1 = printf_uint::format_upper_case#3 
Alias printf_number_buffer::format_min_length#1 = printf_number_buffer::format_min_length#2 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#4 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#5 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#8 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#11 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#15 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#13 printf_number_buffer::format_zero_padding#18 printf_number_buffer::format_zero_padding#14 printf_number_buffer::format_zero_padding#3 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#12 printf_number_buffer::padding#16 printf_number_buffer::padding#14 printf_number_buffer::padding#11 
Alias printf_number_buffer::format_upper_case#1 = printf_number_buffer::format_upper_case#4 printf_number_buffer::format_upper_case#13 printf_number_buffer::format_upper_case#2 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#12 printf_number_buffer::buffer_digits#11 printf_number_buffer::buffer_digits#3 printf_number_buffer::buffer_digits#2 
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#15 printf_number_buffer::format_justify_left#12 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_justify_left#2 
Alias printf_string::format_justify_left#1 = printf_string::format_justify_left#3 printf_string::format_justify_left#2 
Alias printf_string::str#1 = printf_string::str#4 printf_string::str#2 
Alias printf_string::padding#3 = printf_string::padding#4 
Alias main::i#2 = main::i#4 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#11 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 
Alias printf_number_buffer::format_upper_case#1 = printf_number_buffer::format_upper_case#10 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#10 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values toupper::ch#1 toupper::ch#0
Identical Phi Values memcpy::src_end#1 memcpy::src_end#0
Identical Phi Values memcpy::destination#3 memcpy::destination#2
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#5 memset::str#3
Identical Phi Values memset::c#2 memset::c#4
Identical Phi Values strupr::src#0 strupr::str#0
Identical Phi Values strupr::str#2 strupr::src#0
Identical Phi Values utoa::radix#1 utoa::radix#0
Identical Phi Values utoa::value#10 utoa::value#1
Identical Phi Values utoa::buffer#10 utoa::buffer#5
Identical Phi Values utoa::max_digits#10 utoa::max_digits#7
Identical Phi Values utoa::digit_values#10 utoa::digit_values#8
Identical Phi Values utoa_append::value#5 utoa_append::value#0
Identical Phi Values utoa_append::sub#3 utoa_append::sub#0
Identical Phi Values utoa_append::buffer#3 utoa_append::buffer#0
Identical Phi Values utoa_append::sub#1 utoa_append::sub#3
Identical Phi Values utoa_append::buffer#1 utoa_append::buffer#3
Identical Phi Values printf_padding::length#5 printf_padding::length#6
Identical Phi Values printf_padding::pad#5 printf_padding::pad#7
Identical Phi Values printf_uint::format_sign_always#1 printf_uint::format_sign_always#0
Identical Phi Values printf_uint::uvalue#1 printf_uint::uvalue#0
Identical Phi Values printf_uint::format_radix#1 printf_uint::format_radix#0
Identical Phi Values printf_uint::format_min_length#1 printf_uint::format_min_length#0
Identical Phi Values printf_uint::format_justify_left#1 printf_uint::format_justify_left#0
Identical Phi Values printf_uint::format_zero_padding#1 printf_uint::format_zero_padding#0
Identical Phi Values printf_uint::format_upper_case#1 printf_uint::format_upper_case#0
Identical Phi Values printf_number_buffer::format_min_length#1 printf_number_buffer::format_min_length#0
Identical Phi Values printf_number_buffer::format_justify_left#1 printf_number_buffer::format_justify_left#0
Identical Phi Values printf_number_buffer::format_zero_padding#1 printf_number_buffer::format_zero_padding#0
Identical Phi Values printf_number_buffer::buffer_digits#1 printf_number_buffer::buffer_digits#0
Identical Phi Values printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0
Identical Phi Values printf_number_buffer::format_upper_case#1 printf_number_buffer::format_upper_case#0
Identical Phi Values printf_string::format_min_length#1 printf_string::format_min_length#0
Identical Phi Values printf_string::format_justify_left#1 printf_string::format_justify_left#0
Identical Phi Values printf_string::str#1 printf_string::str#0
Identical Phi Values tod_init::tod_HOURS#1 tod_init::tod_HOURS#0
Identical Phi Values tod_init::tod_MIN#1 tod_init::tod_MIN#0
Identical Phi Values tod_init::tod_SEC#1 tod_init::tod_SEC#0
Identical Phi Values tod_init::tod_TENTHS#1 tod_init::tod_TENTHS#0
Identical Phi Values tod_str::tod_HOURS#1 tod_str::tod_HOURS#0
Identical Phi Values tod_str::tod_MIN#1 tod_str::tod_MIN#0
Identical Phi Values tod_str::tod_SEC#1 tod_str::tod_SEC#0
Identical Phi Values tod_str::tod_TENTHS#1 tod_str::tod_TENTHS#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#0 memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition memcpy::$1 [15] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
Simple Condition memset::$1 [22] if(memset::num#2<=0) goto memset::@1
Simple Condition memset::$3 [29] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition strupr::$1 [36] if(0!=*strupr::src#2) goto strupr::@2
Simple Condition strlen::$0 [48] if(0!=*strlen::str#3) goto strlen::@2
Simple Condition utoa::$0 [56] if(utoa::radix#0==DECIMAL) goto utoa::@1
Simple Condition utoa::$1 [60] if(utoa::radix#0==HEXADECIMAL) goto utoa::@2
Simple Condition utoa::$2 [64] if(utoa::radix#0==OCTAL) goto utoa::@3
Simple Condition utoa::$3 [68] if(utoa::radix#0==BINARY) goto utoa::@4
Simple Condition utoa::$5 [85] if(utoa::digit#2<utoa::$4) goto utoa::@11
Simple Condition utoa_append::$0 [110] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
Simple Condition gotoxy::$1 [117] if(gotoxy::y#5<=$19) goto gotoxy::@1
Simple Condition gotoxy::$3 [120] if(gotoxy::x#5<$28) goto gotoxy::@2
Simple Condition cputc::$0 [135] if(cputc::c#3=='
') goto cputc::@1
Simple Condition cputc::$2 [141] if(conio_cursor_x!=$28) goto cputc::@return
Simple Condition cscroll::$1 [151] if(conio_cursor_y!=$19) goto cscroll::@return
Simple Condition cscroll::$7 [153] if(0!=conio_scroll_enable) goto cscroll::@3
Simple Condition cputs::$2 [187] if(0!=cputs::c#1) goto cputs::@2
Simple Condition printf_padding::$0 [195] if(printf_padding::i#2<printf_padding::length#6) goto printf_padding::@2
Simple Condition printf_uint::$5 [202] if(0!=printf_uint::format_sign_always#0) goto printf_uint::@1
Simple Condition printf_number_buffer::$0 [224] if(0==printf_number_buffer::format_min_length#0) goto printf_number_buffer::@1
Simple Condition printf_number_buffer::$20 [238] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@13
Simple Condition printf_number_buffer::$23 [243] if(printf_number_buffer::padding#1>=0) goto printf_number_buffer::@1
Simple Condition printf_number_buffer::$7 [247] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@3
Simple Condition printf_number_buffer::$12 [257] if(0==printf_number_buffer::format_upper_case#0) goto printf_number_buffer::@5
Simple Condition printf_string::$0 [278] if(0==printf_string::format_min_length#0) goto printf_string::@1
Simple Condition printf_string::$12 [292] if(printf_string::padding#1>=0) goto printf_string::@1
Simple Condition main::$5 [356] if(main::i#2<$2710) goto main::@2
Simple Condition main::$8 [359] if(main::$6!=0) goto main::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [3] toupper::$2 = toupper::$0 && toupper::$1
Rewriting ! if()-condition to reversed if() [90] utoa::$8 = ! utoa::$7
Rewriting || if()-condition to two if()s [89] utoa::$7 = utoa::started#2 || utoa::$6
Rewriting ! if()-condition to reversed if() [230] printf_number_buffer::$5 = ! printf_number_buffer::$4
Rewriting && if()-condition to two if()s [229] printf_number_buffer::$4 = printf_number_buffer::$3 && printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [228] printf_number_buffer::$3 = printf_number_buffer::$1 && printf_number_buffer::$2
Rewriting ! if()-condition to reversed if() [252] printf_number_buffer::$10 = ! printf_number_buffer::$9
Rewriting && if()-condition to two if()s [251] printf_number_buffer::$9 = printf_number_buffer::format_zero_padding#0 && printf_number_buffer::padding#10
Rewriting ! if()-condition to reversed if() [266] printf_number_buffer::$17 = ! printf_number_buffer::$16
Rewriting && if()-condition to two if()s [265] printf_number_buffer::$16 = printf_number_buffer::$15 && printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [264] printf_number_buffer::$15 = printf_number_buffer::format_justify_left#0 && printf_number_buffer::$14
Rewriting ! if()-condition to reversed if() [282] printf_string::$3 = ! printf_string::$2
Rewriting && if()-condition to two if()s [281] printf_string::$2 = printf_string::$1 && printf_string::padding#3
Rewriting ! if()-condition to reversed if() [297] printf_string::$7 = ! printf_string::$6
Rewriting && if()-condition to two if()s [296] printf_string::$6 = printf_string::format_justify_left#0 && printf_string::padding#3
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition utoa::started#2
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::format_zero_padding#0
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::format_justify_left#0
Warning! Adding boolean cast to non-boolean condition printf_string::format_justify_left#0
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition printf_string::padding#3
Warning! Adding boolean cast to non-boolean condition printf_string::padding#3
Constant right-side identified [156] memcpy::num#0 = (unumber)$19*$28-$28
Constant right-side identified [161] memcpy::num#1 = (unumber)$19*$28-$28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant strlen::len#0 = 0
Constant utoa::max_digits#0 = 0
Constant utoa::digit_values#0 = (word*) 0
Constant utoa::max_digits#1 = 5
Constant utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant utoa::max_digits#2 = 4
Constant utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
Constant utoa::max_digits#3 = 6
Constant utoa::digit_values#3 = RADIX_OCTAL_VALUES
Constant utoa::max_digits#4 = $10
Constant utoa::digit_values#4 = RADIX_BINARY_VALUES
Constant utoa::started#0 = 0
Constant utoa::digit#0 = 0
Constant utoa::started#1 = 1
Constant utoa_append::digit#0 = 0
Constant gotoxy::y#0 = 0
Constant gotoxy::x#0 = 0
Constant memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
Constant memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Constant memcpy::num#0 = (unumber)$19*$28-$28
Constant memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
Constant memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Constant memcpy::num#1 = (unumber)$19*$28-$28
Constant memset::str#0 = (void*)CONIO_SCREEN_TEXT+(word)$19*$28-$28
Constant memset::c#0 = ' '
Constant memset::num#0 = $28
Constant memset::str#1 = (void*)CONIO_SCREEN_COLORS+(word)$19*$28-$28
Constant memset::num#1 = $28
Constant gotoxy::x#1 = 0
Constant gotoxy::y#1 = 0
Constant cputs::c#0 = 0
Constant printf_padding::i#0 = 0
Constant printf_uint::$1 = '+'
Constant printf_uint::$0 = 0
Constant utoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant printf_number_buffer::buffer_digits#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant printf_number_buffer::padding#0 = 0
Constant printf_number_buffer::padding#2 = 0
Constant printf_padding::pad#0 = ' '
Constant printf_padding::pad#1 = '0'
Constant printf_padding::pad#2 = ' '
Constant printf_string::padding#0 = 0
Constant printf_string::padding#2 = 0
Constant printf_padding::pad#3 = ' '
Constant printf_padding::pad#4 = ' '
Constant tod_str::return#0 = tod_buffer
Constant main::i#0 = 0
Constant gotoxy::x#2 = 0
Constant gotoxy::y#2 = $16
Constant cputs::s#3 = main::s
Constant printf_string::format_min_length#0 = 0
Constant printf_string::format_justify_left#0 = 0
Constant cputs::s#4 = main::s1
Constant gotoxy::x#3 = 0
Constant gotoxy::y#3 = $10
Constant printf_uint::format_min_length#0 = 0
Constant printf_uint::format_justify_left#0 = 0
Constant printf_uint::format_sign_always#0 = 0
Constant printf_uint::format_zero_padding#0 = 0
Constant printf_uint::format_upper_case#0 = 0
Constant printf_uint::format_radix#0 = DECIMAL
Constant gotoxy::x#4 = 0
Constant gotoxy::y#4 = 0
Constant conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
Constant conio_scroll_enable = 1
Successful SSA optimization Pass2ConstantIdentification
Constant memset::c#1 = conio_textcolor
Constant utoa::radix#0 = printf_uint::format_radix#0
Constant printf_number_buffer::format_min_length#0 = printf_uint::format_min_length#0
Constant printf_number_buffer::format_justify_left#0 = printf_uint::format_justify_left#0
Constant printf_number_buffer::format_sign_always#0 = printf_uint::format_sign_always#0
Constant printf_number_buffer::format_zero_padding#0 = printf_uint::format_zero_padding#0
Constant printf_number_buffer::format_upper_case#0 = printf_uint::format_upper_case#0
Constant printf_number_buffer::format_radix#0 = printf_uint::format_radix#0
Constant strlen::str#1 = printf_number_buffer::buffer_digits#0
Constant cputs::s#1 = printf_number_buffer::buffer_digits#0
Constant strupr::str#0 = printf_number_buffer::buffer_digits#0
Constant printf_string::$13 = (signed byte)printf_string::format_min_length#0
Constant tod_str::return#2 = tod_str::return#0
Successful SSA optimization Pass2ConstantIdentification
Constant printf_number_buffer::$25 = (signed byte)printf_number_buffer::format_min_length#0
Constant strupr::return#2 = strupr::str#0
Constant printf_string::str#0 = tod_str::return#2
Successful SSA optimization Pass2ConstantIdentification
Constant strlen::str#2 = printf_string::str#0
Constant cputs::s#2 = printf_string::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [56] if(utoa::radix#0==DECIMAL) goto utoa::@1
if() condition always false - eliminating [60] if(utoa::radix#0==HEXADECIMAL) goto utoa::@2
if() condition always false - eliminating [64] if(utoa::radix#0==OCTAL) goto utoa::@3
if() condition always false - eliminating [68] if(utoa::radix#0==BINARY) goto utoa::@4
if() condition always true - replacing block destination [153] if(0!=conio_scroll_enable) goto cscroll::@3
if() condition always false - eliminating [202] if(0!=printf_uint::format_sign_always#0) goto printf_uint::@1
if() condition always true - replacing block destination [224] if(0==printf_number_buffer::format_min_length#0) goto printf_number_buffer::@1
if() condition always true - replacing block destination [257] if(0==printf_number_buffer::format_upper_case#0) goto printf_number_buffer::@5
if() condition always true - replacing block destination [278] if(0==printf_string::format_min_length#0) goto printf_string::@1
Successful SSA optimization Pass2ConstantIfs
Rewriting conditional comparison [117] if(gotoxy::y#5<=$19) goto gotoxy::@1
Simplifying constant evaluating to zero (signed byte)printf_number_buffer::format_min_length#0 in 
Simplifying constant evaluating to zero (signed byte)printf_string::format_min_length#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero (byte*)&printf_buffer in [206] *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) = printf_uint::$2
Simplifying expression containing zero (byte*)&printf_buffer in [211] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Simplifying expression containing zero printf_number_buffer::len#2 in [241] printf_number_buffer::padding#1 = printf_number_buffer::$25 - printf_number_buffer::len#2
Simplifying expression containing zero printf_string::len#0 in [290] printf_string::padding#1 = printf_string::$13 - printf_string::len#0
Simplifying expression containing zero tod_buffer in [324] tod_buffer[0] = tod_str::$1
Simplifying expression containing zero (byte*)&TOD_ZERO in [348] tod_init::tod_TENTHS#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_TENTHS)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable memcpy::return#2 and assignment [109] memcpy::return#2 = memcpy::destination#2
Eliminating unused variable memcpy::return#3 and assignment [111] memcpy::return#3 = memcpy::destination#2
Eliminating unused variable memset::return#2 and assignment [113] memset::return#2 = memset::str#3
Eliminating unused variable memset::return#3 and assignment [115] memset::return#3 = memset::str#3
Eliminating unused variable tod_read::return#0 and assignment [201] tod_read::return#0 = struct-unwound {tod_read::return_TENTHS#0, tod_read::return_SEC#0, tod_read::return_MIN#0, tod_read::return_HOURS#0}
Eliminating unused variable tod_read::return#1 and assignment [202] tod_read::return#1 = struct-unwound {tod_read::return_TENTHS#0, tod_read::return_SEC#0, tod_read::return_MIN#0, tod_read::return_HOURS#0}
Eliminating unused constant strupr::return#2
Eliminating unused constant BINARY
Eliminating unused constant OCTAL
Eliminating unused constant HEXADECIMAL
Eliminating unused constant utoa::max_digits#0
Eliminating unused constant utoa::digit_values#0
Eliminating unused constant utoa::radix#0
Eliminating unused constant cputs::c#0
Eliminating unused constant printf_number_buffer::format_min_length#0
Eliminating unused constant printf_number_buffer::format_sign_always#0
Eliminating unused constant printf_number_buffer::format_upper_case#0
Eliminating unused constant printf_number_buffer::format_radix#0
Eliminating unused constant printf_number_buffer::$25
Eliminating unused constant printf_string::format_min_length#0
Eliminating unused constant printf_string::$13
Eliminating unused constant OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN
Eliminating unused constant OFFSET_STRUCT_TIME_OF_DAY_TENTHS
Eliminating unused constant conio_scroll_enable
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant printf_uint::format_min_length#0
Eliminating unused constant printf_uint::format_sign_always#0
Eliminating unused constant printf_uint::format_upper_case#0
Eliminating unused constant printf_uint::format_radix#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant DECIMAL
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable toupper::$0 from unused block toupper
Eliminating variable toupper::$1 from unused block toupper
Eliminating variable toupper::return#0 from unused block toupper::@1
Eliminating variable toupper::return#2 from unused block toupper::@return
Eliminating variable strupr::src#2 from unused block strupr::@1
Eliminating variable toupper::ch#0 from unused block strupr::@2
Eliminating variable toupper::return#3 from unused block strupr::@2
Eliminating variable strupr::$0 from unused block strupr::@4
Eliminating variable strupr::src#1 from unused block strupr::@4
Eliminating variable strlen::str#5 from unused block strlen
Eliminating variable strlen::str#3 from unused block strlen::@1
Eliminating variable strlen::len#2 from unused block strlen::@1
Eliminating variable strlen::len#1 from unused block strlen::@2
Eliminating variable strlen::str#0 from unused block strlen::@2
Eliminating variable utoa::buffer#0 from unused block utoa::@9
Eliminating variable utoa::buffer#1 from unused block utoa::@9
Eliminating variable utoa::buffer#2 from unused block utoa::@9
Eliminating variable strlen::return#2 from unused block printf_number_buffer::@6
Eliminating variable printf_number_buffer::$19 from unused block printf_number_buffer::@15
Eliminating variable printf_number_buffer::len#0 from unused block printf_number_buffer::@15
Eliminating variable printf_number_buffer::len#2 from unused block printf_number_buffer::@13
Eliminating variable printf_number_buffer::padding#1 from unused block printf_number_buffer::@13
Eliminating variable printf_number_buffer::len#1 from unused block printf_number_buffer::@7
Eliminating variable strlen::return#3 from unused block printf_string::@3
Eliminating variable printf_string::$9 from unused block printf_string::@7
Eliminating variable printf_string::len#0 from unused block printf_string::@7
Eliminating variable printf_string::padding#1 from unused block printf_string::@7
Removing unused procedure toupper
Removing unused procedure block toupper
Removing unused procedure block toupper::@1
Removing PHI-reference to removed block (toupper::@1) in block toupper::@return
Removing unused procedure block toupper::@2
Removing PHI-reference to removed block (toupper::@2) in block toupper::@return
Removing unused procedure block toupper::@return
Removing unused procedure block toupper::@3
Removing unused procedure strupr
Removing unused procedure block strupr
Removing PHI-reference to removed block (strupr) in block strupr::@1
Removing unused procedure block strupr::@1
Removing unused procedure block strupr::@2
Removing unused procedure block strupr::@4
Removing unused procedure block strupr::@3
Removing unused procedure block strupr::@return
Removing unused procedure strlen
Removing unused procedure block strlen
Removing PHI-reference to removed block (strlen) in block strlen::@1
Removing PHI-reference to removed block (strlen) in block strlen::@1
Removing unused procedure block strlen::@1
Removing unused procedure block strlen::@2
Removing unused procedure block strlen::@3
Removing unused procedure block strlen::@return
Removing unused block utoa::@6
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing unused block utoa::@2
Removing unused block utoa::@7
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing unused block utoa::@3
Removing unused block utoa::@8
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing unused block utoa::@4
Removing unused block utoa::@9
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing unused block cscroll::@2
Removing unused block cscroll::@8
Removing PHI-reference to removed block (printf_uint::@1) in block printf_uint::@3
Removing unused block printf_uint::@1
Removing unused block printf_number_buffer::@6
Removing PHI-reference to removed block (printf_number_buffer::@15) in block printf_number_buffer::@13
Removing unused block printf_number_buffer::@15
Removing PHI-reference to removed block (printf_number_buffer::@13) in block printf_number_buffer::@1
Removing unused block printf_number_buffer::@13
Removing unused block printf_number_buffer::@7
Removing PHI-reference to removed block (printf_number_buffer::@14) in block printf_number_buffer::@1
Removing unused block printf_number_buffer::@14
Removing unused block printf_number_buffer::@11
Removing unused block printf_number_buffer::@20
Removing unused block printf_string::@3
Removing PHI-reference to removed block (printf_string::@7) in block printf_string::@1
Removing unused block printf_string::@7
Removing PHI-reference to removed block (printf_string::@4) in block printf_string::@1
Removing unused block printf_string::@4
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 0 in utoa::$12 = 0 != utoa::started#2
Adding number conversion cast (unumber) $19+1 in if(gotoxy::y#5<$19+1) goto gotoxy::@1
Adding number conversion cast (unumber) 1 in if(gotoxy::y#5<(unumber)$19+1) goto gotoxy::@1
Adding number conversion cast (unumber) 0 in printf_number_buffer::$33 = 0 != printf_number_buffer::format_zero_padding#0
Adding number conversion cast (unumber) 0 in printf_number_buffer::$34 = 0 != printf_number_buffer::format_justify_left#0
Adding number conversion cast (unumber) 0 in printf_string::$16 = 0 != printf_string::format_justify_left#0
Adding number conversion cast (snumber) 0 in printf_number_buffer::$35 = 0 != printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in printf_number_buffer::$36 = 0 != printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in printf_number_buffer::$37 = 0 != printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in printf_string::$17 = 0 != printf_string::padding#3
Adding number conversion cast (snumber) 0 in printf_string::$18 = 0 != printf_string::padding#3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast $19+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized signed number type 0
Finalized signed number type 0
Finalized signed number type 0
Finalized signed number type 0
Finalized signed number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values utoa::max_digits#7 utoa::max_digits#1
Identical Phi Values utoa::digit_values#8 utoa::digit_values#1
Identical Phi Values printf_uint::$2 printf_uint::$0
Identical Phi Values printf_number_buffer::padding#10 printf_number_buffer::padding#0
Identical Phi Values printf_string::padding#3 printf_string::padding#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition utoa::$12 [30] if(0!=utoa::started#2) goto utoa::@14
Simple Condition printf_number_buffer::$1 [113] if(0==printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@23
Simple Condition printf_number_buffer::$33 [118] if(0!=printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@24
Simple Condition printf_number_buffer::$34 [126] if(0!=printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@26
Simple Condition printf_string::$1 [132] if(0==printf_string::format_justify_left#0) goto printf_string::@11
Simple Condition printf_string::$16 [135] if(0!=printf_string::format_justify_left#0) goto printf_string::@12
Simple Condition utoa::$6 [213] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@14
Simple Condition printf_number_buffer::$35 [215] if(0!=printf_number_buffer::padding#0) goto printf_number_buffer::@8
Simple Condition printf_number_buffer::$2 [216] if(0==printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@22
Simple Condition printf_number_buffer::$36 [218] if(0!=printf_number_buffer::padding#0) goto printf_number_buffer::@10
Simple Condition printf_number_buffer::$37 [220] if(0!=printf_number_buffer::padding#0) goto printf_number_buffer::@12
Simple Condition printf_number_buffer::$14 [221] if(0==printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@25
Simple Condition printf_string::$17 [223] if(0!=printf_string::padding#0) goto printf_string::@5
Simple Condition printf_string::$18 [225] if(0!=printf_string::padding#0) goto printf_string::@6
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [113] if(0!=printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@2
Negating conditional jump and destination [118] if(0==printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@4
Negating conditional jump and destination [126] if(0==printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@return
Negating conditional jump and destination [132] if(0!=printf_string::format_justify_left#0) goto printf_string::@2
Negating conditional jump and destination [135] if(0==printf_string::format_justify_left#0) goto printf_string::@return
Negating conditional jump and destination [216] if(0!=printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@2
Negating conditional jump and destination [221] if(0!=printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [24] utoa::$4 = utoa::max_digits#1 - 1
Constant right-side identified [115] printf_padding::length#0 = (byte)printf_number_buffer::padding#0
Constant right-side identified [121] printf_padding::length#1 = (byte)printf_number_buffer::padding#0
Constant right-side identified [127] printf_padding::length#2 = (byte)printf_number_buffer::padding#0
Constant right-side identified [136] printf_padding::length#3 = (byte)printf_string::padding#0
Constant right-side identified [138] printf_padding::length#4 = (byte)printf_string::padding#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant utoa::$4 = utoa::max_digits#1-1
Constant printf_padding::length#0 = (byte)printf_number_buffer::padding#0
Constant printf_padding::length#1 = (byte)printf_number_buffer::padding#0
Constant printf_padding::length#2 = (byte)printf_number_buffer::padding#0
Constant printf_padding::length#3 = (byte)printf_string::padding#0
Constant printf_padding::length#4 = (byte)printf_string::padding#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [113] if(0!=printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@2
if() condition always true - replacing block destination [118] if(0==printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@4
if() condition always true - replacing block destination [126] if(0==printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@return
if() condition always false - eliminating [132] if(0!=printf_string::format_justify_left#0) goto printf_string::@2
if() condition always true - replacing block destination [135] if(0==printf_string::format_justify_left#0) goto printf_string::@return
if() condition always false - eliminating [215] if(0!=printf_number_buffer::padding#0) goto printf_number_buffer::@8
if() condition always false - eliminating [216] if(0!=printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@2
if() condition always false - eliminating [218] if(0!=printf_number_buffer::padding#0) goto printf_number_buffer::@10
if() condition always false - eliminating [220] if(0!=printf_number_buffer::padding#0) goto printf_number_buffer::@12
if() condition always false - eliminating [221] if(0!=printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@return
if() condition always false - eliminating [223] if(0!=printf_string::padding#0) goto printf_string::@5
if() condition always false - eliminating [225] if(0!=printf_string::padding#0) goto printf_string::@6
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero (byte)printf_number_buffer::padding#0 in 
Simplifying constant evaluating to zero (byte)printf_number_buffer::padding#0 in 
Simplifying constant evaluating to zero (byte)printf_number_buffer::padding#0 in 
Simplifying constant evaluating to zero (byte)printf_string::padding#0 in 
Simplifying constant evaluating to zero (byte)printf_string::padding#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused constant utoa::max_digits#2
Eliminating unused constant utoa::digit_values#2
Eliminating unused constant utoa::max_digits#3
Eliminating unused constant utoa::digit_values#3
Eliminating unused constant utoa::max_digits#4
Eliminating unused constant utoa::digit_values#4
Eliminating unused constant gotoxy::x#1
Eliminating unused constant gotoxy::y#1
Eliminating unused constant printf_uint::$1
Eliminating unused constant printf_number_buffer::padding#0
Eliminating unused constant printf_number_buffer::padding#2
Eliminating unused constant printf_number_buffer::format_justify_left#0
Eliminating unused constant printf_number_buffer::format_zero_padding#0
Eliminating unused constant printf_string::padding#0
Eliminating unused constant printf_string::padding#2
Eliminating unused constant printf_string::format_justify_left#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant RADIX_BINARY_VALUES
Eliminating unused constant RADIX_OCTAL_VALUES
Eliminating unused constant RADIX_HEXADECIMAL_VALUES
Eliminating unused constant printf_uint::format_justify_left#0
Eliminating unused constant printf_uint::format_zero_padding#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable printf_padding::length#6 from unused block printf_padding
Eliminating variable printf_padding::pad#7 from unused block printf_padding
Eliminating variable printf_padding::i#2 from unused block printf_padding::@1
Eliminating variable cputc::c#1 from unused block printf_padding::@2
Eliminating variable printf_padding::i#1 from unused block printf_padding::@3
Removing unused procedure printf_padding
Removing unused procedure block printf_padding
Removing PHI-reference to removed block (printf_padding) in block printf_padding::@1
Removing unused procedure block printf_padding::@1
Removing unused procedure block printf_padding::@2
Removing PHI-reference to removed block (printf_padding::@2) in block cputc
Removing unused procedure block printf_padding::@3
Removing unused procedure block printf_padding::@return
Removing unused block printf_number_buffer::@8
Removing unused block printf_number_buffer::@16
Removing unused block printf_number_buffer::@10
Removing unused block printf_number_buffer::@18
Removing unused block printf_number_buffer::@12
Removing unused block printf_number_buffer::@21
Removing unused block printf_string::@5
Removing unused block printf_string::@9
Removing unused block printf_string::@6
Removing unused block printf_string::@10
Removing unused block printf_number_buffer::@24
Removing unused block printf_number_buffer::@25
Removing unused block printf_number_buffer::@26
Removing unused block printf_string::@12
Successful SSA optimization Pass2EliminateUnusedBlocks
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Inlining Noop Cast [1] memcpy::src#0 = (byte*)memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [2] memcpy::dst#0 = (byte*)memcpy::destination#2 keeping memcpy::destination#2
Inlining Noop Cast [3] memcpy::$2 = (byte*)memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [13] memset::$4 = (byte*)memset::str#3 keeping memset::str#3
Inlining Noop Cast [15] memset::dst#0 = (byte*)memset::str#3 keeping memset::str#3
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [24] utoa::$10 = utoa::digit#2 * SIZEOF_WORD
Rewriting multiplication to use shift and addition[54] gotoxy::line_offset#0 = gotoxy::$7 * $28
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings memcpy::destination#0
Inlining constant with var siblings memcpy::source#0
Inlining constant with var siblings memcpy::num#0
Inlining constant with var siblings memcpy::destination#1
Inlining constant with var siblings memcpy::source#1
Inlining constant with var siblings memcpy::num#1
Inlining constant with var siblings memset::str#0
Inlining constant with var siblings memset::c#0
Inlining constant with var siblings memset::num#0
Inlining constant with var siblings memset::str#1
Inlining constant with var siblings memset::num#1
Inlining constant with var siblings memset::c#1
Inlining constant with var siblings utoa::started#0
Inlining constant with var siblings utoa::digit#0
Inlining constant with var siblings utoa::started#1
Inlining constant with var siblings utoa::buffer#5
Inlining constant with var siblings utoa_append::digit#0
Inlining constant with var siblings gotoxy::y#0
Inlining constant with var siblings gotoxy::x#0
Inlining constant with var siblings gotoxy::x#2
Inlining constant with var siblings gotoxy::y#2
Inlining constant with var siblings gotoxy::x#3
Inlining constant with var siblings gotoxy::y#3
Inlining constant with var siblings gotoxy::x#4
Inlining constant with var siblings gotoxy::y#4
Inlining constant with var siblings cputs::s#3
Inlining constant with var siblings cputs::s#4
Inlining constant with var siblings cputs::s#1
Inlining constant with var siblings cputs::s#2
Inlining constant with var siblings main::i#0
Constant inlined utoa_append::digit#0 = 0
Constant inlined utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant inlined cputs::s#3 = main::s
Constant inlined cputs::s#4 = main::s1
Constant inlined cputs::s#1 = printf_number_buffer::buffer_digits#0
Constant inlined cputs::s#2 = tod_buffer
Constant inlined conio_textcolor = LIGHT_BLUE
Constant inlined memcpy::destination#0 = (void*)DEFAULT_SCREEN
Constant inlined memset::num#1 = $28
Constant inlined memcpy::destination#1 = (void*)COLORRAM
Constant inlined memset::num#0 = $28
Constant inlined memcpy::source#1 = (void*)COLORRAM+$28
Constant inlined printf_string::str#0 = tod_buffer
Constant inlined utoa::digit#0 = 0
Constant inlined CONIO_SCREEN_TEXT = DEFAULT_SCREEN
Constant inlined main::i#0 = 0
Constant inlined utoa::$4 = utoa::max_digits#1-1
Constant inlined tod_str::return#2 = tod_buffer
Constant inlined tod_str::return#0 = tod_buffer
Constant inlined CONIO_TEXTCOLOR_DEFAULT = LIGHT_BLUE
Constant inlined memset::str#1 = (void*)COLORRAM+(word)$19*$28-$28
Constant inlined memset::str#0 = (void*)DEFAULT_SCREEN+(word)$19*$28-$28
Constant inlined CONIO_SCREEN_COLORS = COLORRAM
Constant inlined printf_uint::$0 = 0
Constant inlined utoa::started#1 = 1
Constant inlined utoa::started#0 = 0
Constant inlined memcpy::source#0 = (void*)DEFAULT_SCREEN+$28
Constant inlined memcpy::num#1 = (word)$19*$28-$28
Constant inlined gotoxy::y#2 = $16
Constant inlined gotoxy::x#3 = 0
Constant inlined memcpy::num#0 = (word)$19*$28-$28
Constant inlined gotoxy::y#3 = $10
Constant inlined gotoxy::x#4 = 0
Constant inlined gotoxy::y#4 = 0
Constant inlined utoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined gotoxy::x#0 = 0
Constant inlined gotoxy::y#0 = 0
Constant inlined gotoxy::x#2 = 0
Constant inlined memset::c#0 = ' '
Constant inlined memset::c#1 = LIGHT_BLUE
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(tod_buffer+1)
Consolidated array index constant in *(tod_buffer+3)
Consolidated array index constant in *(tod_buffer+4)
Consolidated array index constant in *(tod_buffer+6)
Consolidated array index constant in *(tod_buffer+7)
Consolidated array index constant in *(tod_buffer+9)
Consolidated array index constant in *(tod_buffer+$a)
Successful SSA optimization Pass2ConstantAdditionElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias gotoxy::line_offset#0 = gotoxy::$10 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values memcpy::num#2 (word)$19*$28-$28
Identical Phi Values memset::num#2 $28
Identical Phi Values gotoxy::x#5 0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values gotoxy::x#6 0
Successful SSA optimization Pass2IdenticalPhiElimination
if() condition always false - eliminating [9] if($28<=0) goto memset::@1
if() condition always true - replacing block destination [44] if(0<$28) goto gotoxy::@2
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block gotoxy::@4
Successful SSA optimization Pass2EliminateUnusedBlocks
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Added new block during phi lifting utoa::@17(between utoa::@16 and utoa::@13)
Added new block during phi lifting gotoxy::@5(between gotoxy and gotoxy::@1)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of gotoxy::@3
Adding NOP phi() at start of printf_string
Adding NOP phi() at start of printf_string::@1
Adding NOP phi() at start of printf_string::@11
Adding NOP phi() at start of printf_string::@2
Adding NOP phi() at start of printf_string::@8
Adding NOP phi() at start of printf_uint
Adding NOP phi() at start of printf_uint::@2
Adding NOP phi() at start of printf_uint::@5
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@5
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa::@1
Adding NOP phi() at start of printf_number_buffer
Adding NOP phi() at start of printf_number_buffer::@1
Adding NOP phi() at start of printf_number_buffer::@23
Adding NOP phi() at start of printf_number_buffer::@22
Adding NOP phi() at start of printf_number_buffer::@17
Adding NOP phi() at start of printf_number_buffer::@3
Adding NOP phi() at start of printf_number_buffer::@4
Adding NOP phi() at start of printf_number_buffer::@5
Adding NOP phi() at start of printf_number_buffer::@19
Adding NOP phi() at start of cputln::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of cscroll::@5
Adding NOP phi() at start of cscroll::@6
Adding NOP phi() at start of memcpy::@3
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [__start] to main:6 
Calls in [main] to tod_init:13 gotoxy:18 tod_read:20 tod_str:29 cputs:31 printf_string:33 gotoxy:39 printf_uint:41 gotoxy:43 cputs:46 
Calls in [cputs] to cputc:111 
Calls in [printf_string] to cputs:117 
Calls in [printf_uint] to utoa:124 printf_number_buffer:126 
Calls in [cputc] to cputln:136 cputln:140 
Calls in [utoa] to utoa_append:168 
Calls in [printf_number_buffer] to cputc:181 cputs:186 
Calls in [cputln] to cscroll:193 
Calls in [cscroll] to memcpy:208 memcpy:210 memset:212 memset:214 

Created 22 initial phi equivalence classes
Coalesced [48] main::i#10 = main::i#1
Coalesced [71] gotoxy::y#9 = gotoxy::y#5
Coalesced [103] cputs::s#9 = cputs::s#6
Coalesced [110] cputc::c#5 = cputc::c#0
Coalesced [112] cputs::s#10 = cputs::s#0
Coalesced [144] utoa::value#17 = utoa::value#1
Coalesced [156] utoa::value#18 = utoa::value#2
Coalesced [157] utoa::started#6 = utoa::started#2
Coalesced [158] utoa::buffer#23 = utoa::buffer#11
Coalesced [161] utoa::digit#7 = utoa::digit#1
Coalesced (already) [162] utoa::value#16 = utoa::value#6
Coalesced (already) [163] utoa::started#5 = utoa::started#4
Coalesced (already) [164] utoa::buffer#22 = utoa::buffer#14
Coalesced [172] utoa::value#19 = utoa::value#0
Coalesced [173] utoa::buffer#24 = utoa::buffer#4
Coalesced [180] cputc::c#6 = cputc::c#2
Coalesced [196] utoa_append::value#6 = utoa_append::value#0
Coalesced [203] utoa_append::value#7 = utoa_append::value#1
Coalesced [204] utoa_append::digit#5 = utoa_append::digit#1
Coalesced [230] memcpy::src#5 = memcpy::src#1
Coalesced [231] memcpy::dst#5 = memcpy::dst#1
Coalesced [241] memset::dst#5 = memset::dst#1
Coalesced down to 17 phi equivalence classes
Culled Empty Block label __start::@2
Culled Empty Block label main::@6
Culled Empty Block label main::@11
Culled Empty Block label main::@15
Culled Empty Block label gotoxy::@3
Culled Empty Block label cputs::@3
Culled Empty Block label printf_string::@1
Culled Empty Block label printf_string::@11
Culled Empty Block label printf_string::@8
Culled Empty Block label printf_uint::@2
Culled Empty Block label printf_uint::@5
Culled Empty Block label cputc::@5
Culled Empty Block label cputc::@4
Culled Empty Block label utoa::@1
Culled Empty Block label utoa::@5
Culled Empty Block label utoa::@17
Culled Empty Block label printf_number_buffer::@1
Culled Empty Block label printf_number_buffer::@23
Culled Empty Block label printf_number_buffer::@22
Culled Empty Block label printf_number_buffer::@17
Culled Empty Block label printf_number_buffer::@3
Culled Empty Block label printf_number_buffer::@4
Culled Empty Block label printf_number_buffer::@19
Culled Empty Block label cputln::@1
Culled Empty Block label cscroll::@1
Culled Empty Block label memcpy::@3
Culled Empty Block label memset::@1
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block utoa::@10 to utoa::@1
Renumbering block utoa::@11 to utoa::@2
Renumbering block utoa::@12 to utoa::@3
Renumbering block utoa::@13 to utoa::@4
Renumbering block utoa::@14 to utoa::@5
Renumbering block utoa::@15 to utoa::@6
Renumbering block utoa::@16 to utoa::@7
Renumbering block gotoxy::@5 to gotoxy::@3
Renumbering block cscroll::@3 to cscroll::@1
Renumbering block cscroll::@4 to cscroll::@2
Renumbering block cscroll::@5 to cscroll::@3
Renumbering block cscroll::@6 to cscroll::@4
Renumbering block cscroll::@7 to cscroll::@5
Renumbering block printf_uint::@3 to printf_uint::@1
Renumbering block printf_uint::@4 to printf_uint::@2
Renumbering block printf_number_buffer::@2 to printf_number_buffer::@1
Renumbering block printf_number_buffer::@5 to printf_number_buffer::@2
Renumbering block printf_number_buffer::@9 to printf_number_buffer::@3
Renumbering block printf_string::@2 to printf_string::@1
Renumbering block main::@7 to main::@6
Renumbering block main::@8 to main::@7
Renumbering block main::@9 to main::@8
Renumbering block main::@10 to main::@9
Renumbering block main::@12 to main::@10
Renumbering block main::@13 to main::@11
Renumbering block main::@14 to main::@12
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of gotoxy::@3
Adding NOP phi() at start of printf_string
Adding NOP phi() at start of printf_string::@1
Adding NOP phi() at start of printf_uint
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of utoa
Adding NOP phi() at start of printf_number_buffer
Adding NOP phi() at start of printf_number_buffer::@2
Adding NOP phi() at start of utoa_append
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@2
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [8] tod_init::tod_TENTHS#0 = *((byte*)&TOD_ZERO)
  [9] tod_init::tod_SEC#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC)
  [10] tod_init::tod_MIN#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN)
  [11] tod_init::tod_HOURS#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  [12] call tod_init 
  to:main::@1
main::@1: scope:[main]  from main main::@10
  [13] main::i#2 = phi( main::@10/main::i#1, main/0 )
  [14] if(main::i#2<$2710) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [15] phi()
  [16] call gotoxy 
  to:main::@6
main::@6: scope:[main]  from main::@3
  [17] phi()
  [18] call tod_read 
  [19] tod_read::return_TENTHS#2 = tod_read::return_TENTHS#0
  [20] tod_read::return_SEC#2 = tod_read::return_SEC#0
  [21] tod_read::return_MIN#2 = tod_read::return_MIN#0
  [22] tod_read::return_HOURS#2 = tod_read::return_HOURS#0
  to:main::@7
main::@7: scope:[main]  from main::@6
  [23] tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2
  [24] tod_str::tod_SEC#0 = tod_read::return_SEC#2
  [25] tod_str::tod_MIN#0 = tod_read::return_MIN#2
  [26] tod_str::tod_HOURS#0 = tod_read::return_HOURS#2
  [27] call tod_str 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [28] phi()
  [29] call cputs 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [30] phi()
  [31] call printf_string 
  to:main::@return
main::@return: scope:[main]  from main::@9
  [32] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [33] main::$6 = main::i#2 & $7f
  [34] if(main::$6!=0) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@2
  [35] phi()
  [36] call gotoxy 
  to:main::@11
main::@11: scope:[main]  from main::@5
  [37] printf_uint::uvalue#0 = main::i#2
  [38] call printf_uint 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [39] phi()
  [40] call gotoxy 
  to:main::@4
main::@4: scope:[main]  from main::@12 main::@2
  [41] phi()
  [42] call cputs 
  to:main::@10
main::@10: scope:[main]  from main::@4
  [43] main::i#1 = ++ main::i#2
  to:main::@1

void tod_init(byte tod_init::tod_TENTHS , byte tod_init::tod_SEC , byte tod_init::tod_MIN , byte tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main
  [44] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | $80
  [45] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & $7f
  [46] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) = tod_init::tod_HOURS#0
  [47] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) = tod_init::tod_MIN#0
  [48] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) = tod_init::tod_SEC#0
  [49] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) = tod_init::tod_TENTHS#0
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  [50] return 
  to:@return

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from main::@12 main::@3 main::@5
  [51] gotoxy::y#5 = phi( main::@12/0, main::@3/$16, main::@5/$10 )
  [52] if(gotoxy::y#5<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [53] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [54] gotoxy::y#6 = phi( gotoxy::@3/gotoxy::y#5, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [55] conio_cursor_x = 0
  [56] conio_cursor_y = gotoxy::y#6
  [57] gotoxy::$7 = (word)gotoxy::y#6
  [58] gotoxy::$8 = gotoxy::$7 << 2
  [59] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [60] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [61] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [62] conio_line_text = gotoxy::$5
  [63] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [64] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [65] return 
  to:@return

struct TIME_OF_DAY tod_read()
tod_read: scope:[tod_read]  from main::@6
  [66] tod_read::return_HOURS#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  [67] tod_read::return_MIN#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  [68] tod_read::return_SEC#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  [69] tod_read::return_TENTHS#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  [70] return 
  to:@return

byte* tod_str(byte tod_str::tod_TENTHS , byte tod_str::tod_SEC , byte tod_str::tod_MIN , byte tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@7
  [71] tod_str::$0 = tod_str::tod_HOURS#0 >> 4
  [72] tod_str::$1 = '0' + tod_str::$0
  [73] *tod_buffer = tod_str::$1
  [74] tod_str::$2 = tod_str::tod_HOURS#0 & $f
  [75] tod_str::$3 = '0' + tod_str::$2
  [76] *(tod_buffer+1) = tod_str::$3
  [77] tod_str::$4 = tod_str::tod_MIN#0 >> 4
  [78] tod_str::$5 = '0' + tod_str::$4
  [79] *(tod_buffer+3) = tod_str::$5
  [80] tod_str::$6 = tod_str::tod_MIN#0 & $f
  [81] tod_str::$7 = '0' + tod_str::$6
  [82] *(tod_buffer+4) = tod_str::$7
  [83] tod_str::$8 = tod_str::tod_SEC#0 >> 4
  [84] tod_str::$9 = '0' + tod_str::$8
  [85] *(tod_buffer+6) = tod_str::$9
  [86] tod_str::$10 = tod_str::tod_SEC#0 & $f
  [87] tod_str::$11 = '0' + tod_str::$10
  [88] *(tod_buffer+7) = tod_str::$11
  [89] tod_str::$12 = tod_str::tod_TENTHS#0 >> 4
  [90] tod_str::$13 = '0' + tod_str::$12
  [91] *(tod_buffer+9) = tod_str::$13
  [92] tod_str::$14 = tod_str::tod_TENTHS#0 & $f
  [93] tod_str::$15 = '0' + tod_str::$14
  [94] *(tod_buffer+$a) = tod_str::$15
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  [95] return 
  to:@return

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from main::@4 main::@8 printf_number_buffer::@2 printf_string::@1
  [96] cputs::s#6 = phi( main::@4/main::s1, main::@8/main::s, printf_number_buffer::@2/printf_number_buffer::buffer_digits#0, printf_string::@1/tod_buffer )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [97] cputs::s#5 = phi( cputs/cputs::s#6, cputs::@2/cputs::s#0 )
  [98] cputs::c#1 = *cputs::s#5
  [99] cputs::s#0 = ++ cputs::s#5
  [100] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [101] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [102] cputc::c#0 = cputs::c#1
  [103] call cputc 
  to:cputs::@1

void printf_string(byte* printf_string::str , byte printf_string::format_min_length , byte printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@9
  [104] phi()
  to:printf_string::@1
printf_string::@1: scope:[printf_string]  from printf_string
  [105] phi()
  [106] call cputs 
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@1
  [107] return 
  to:@return

void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@11
  [108] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [109] *((byte*)&printf_buffer) = 0
  [110] utoa::value#1 = printf_uint::uvalue#0
  [111] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [112] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [113] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [114] return 
  to:@return

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@3
  [115] cputc::c#3 = phi( cputs::@2/cputc::c#0, printf_number_buffer::@3/cputc::c#2 )
  [116] if(cputc::c#3=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [117] conio_line_text[conio_cursor_x] = cputc::c#3
  [118] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [119] conio_cursor_x = ++ conio_cursor_x
  [120] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [121] phi()
  [122] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [123] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [124] phi()
  [125] call cputln 
  to:cputc::@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [126] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [127] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [127] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [127] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#1 )
  [127] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [128] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [129] utoa::$11 = (byte)utoa::value#2
  [130] *utoa::buffer#11 = DIGITS[utoa::$11]
  [131] utoa::buffer#3 = ++ utoa::buffer#11
  [132] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [133] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [134] utoa::$10 = utoa::digit#2 << 1
  [135] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [136] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [137] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [138] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [138] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [138] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [139] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [140] utoa_append::buffer#0 = utoa::buffer#11
  [141] utoa_append::value#0 = utoa::value#2
  [142] utoa_append::sub#0 = utoa::digit_value#0
  [143] call utoa_append 
  [144] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [145] utoa::value#0 = utoa_append::return#0
  [146] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@2
  [147] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [148] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [149] cputc::c#2 = printf_number_buffer::buffer_sign#0
  [150] call cputc 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [151] phi()
  [152] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [153] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [154] conio_line_text = conio_line_text + $28
  [155] conio_line_color = conio_line_color + $28
  [156] conio_cursor_x = 0
  [157] conio_cursor_y = ++ conio_cursor_y
  [158] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [159] return 
  to:@return

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [160] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [161] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [161] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [162] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [163] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [164] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [165] utoa_append::digit#1 = ++ utoa_append::digit#2
  [166] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [167] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [168] phi()
  [169] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [170] phi()
  [171] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [172] phi()
  [173] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [174] phi()
  [175] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [176] conio_line_text = conio_line_text - $28
  [177] conio_line_color = conio_line_color - $28
  [178] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [179] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [180] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [180] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [181] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [182] memcpy::src#4 = (byte*)memcpy::source#2
  [183] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [184] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [184] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [185] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [186] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [187] *memcpy::dst#2 = *memcpy::src#2
  [188] memcpy::dst#1 = ++ memcpy::dst#2
  [189] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [190] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [190] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [191] memset::end#0 = (byte*)memset::str#3 + $28
  [192] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [193] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [194] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [195] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [196] *memset::dst#2 = memset::c#4
  [197] memset::dst#1 = ++ memset::dst#2
  to:memset::@2


VARIABLE REGISTER WEIGHTS
byte MOS6526_CIA::INTERRUPT
byte MOS6526_CIA::PORT_A
byte MOS6526_CIA::PORT_A_DDR
byte MOS6526_CIA::PORT_B
byte MOS6526_CIA::PORT_B_DDR
byte MOS6526_CIA::SERIAL_DATA
word MOS6526_CIA::TIMER_A
byte MOS6526_CIA::TIMER_A_CONTROL
word MOS6526_CIA::TIMER_B
byte MOS6526_CIA::TIMER_B_CONTROL
byte MOS6526_CIA::TOD_10THS
byte MOS6526_CIA::TOD_HOURS
byte MOS6526_CIA::TOD_MIN
byte MOS6526_CIA::TOD_SEC
byte MOS6569_VICII::BG_COLOR
byte MOS6569_VICII::BG_COLOR1
byte MOS6569_VICII::BG_COLOR2
byte MOS6569_VICII::BG_COLOR3
byte MOS6569_VICII::BORDER_COLOR
byte MOS6569_VICII::CONTROL1
byte MOS6569_VICII::CONTROL2
byte MOS6569_VICII::IRQ_ENABLE
byte MOS6569_VICII::IRQ_STATUS
byte MOS6569_VICII::LIGHTPEN_X
byte MOS6569_VICII::LIGHTPEN_Y
byte MOS6569_VICII::MEMORY
byte MOS6569_VICII::RASTER
byte MOS6569_VICII::SPRITE0_COLOR
byte MOS6569_VICII::SPRITE0_X
byte MOS6569_VICII::SPRITE0_Y
byte MOS6569_VICII::SPRITE1_COLOR
byte MOS6569_VICII::SPRITE1_X
byte MOS6569_VICII::SPRITE1_Y
byte MOS6569_VICII::SPRITE2_COLOR
byte MOS6569_VICII::SPRITE2_X
byte MOS6569_VICII::SPRITE2_Y
byte MOS6569_VICII::SPRITE3_COLOR
byte MOS6569_VICII::SPRITE3_X
byte MOS6569_VICII::SPRITE3_Y
byte MOS6569_VICII::SPRITE4_COLOR
byte MOS6569_VICII::SPRITE4_X
byte MOS6569_VICII::SPRITE4_Y
byte MOS6569_VICII::SPRITE5_COLOR
byte MOS6569_VICII::SPRITE5_X
byte MOS6569_VICII::SPRITE5_Y
byte MOS6569_VICII::SPRITE6_COLOR
byte MOS6569_VICII::SPRITE6_X
byte MOS6569_VICII::SPRITE6_Y
byte MOS6569_VICII::SPRITE7_COLOR
byte MOS6569_VICII::SPRITE7_X
byte MOS6569_VICII::SPRITE7_Y
byte MOS6569_VICII::SPRITES_BG_COLLISION
byte MOS6569_VICII::SPRITES_COLLISION
byte MOS6569_VICII::SPRITES_ENABLE
byte MOS6569_VICII::SPRITES_EXPAND_X
byte MOS6569_VICII::SPRITES_EXPAND_Y
byte MOS6569_VICII::SPRITES_MC
byte MOS6569_VICII::SPRITES_MCOLOR1
byte MOS6569_VICII::SPRITES_MCOLOR2
byte MOS6569_VICII::SPRITES_PRIORITY
byte MOS6569_VICII::SPRITES_XMSB
byte MOS6581_SID::CH1_ATTACK_DECAY
byte MOS6581_SID::CH1_CONTROL
word MOS6581_SID::CH1_FREQ
word MOS6581_SID::CH1_PULSE_WIDTH
byte MOS6581_SID::CH1_SUSTAIN_RELEASE
byte MOS6581_SID::CH2_ATTACK_DECAY
byte MOS6581_SID::CH2_CONTROL
word MOS6581_SID::CH2_FREQ
word MOS6581_SID::CH2_PULSE_WIDTH
byte MOS6581_SID::CH2_SUSTAIN_RELEASE
byte MOS6581_SID::CH3_ATTACK_DECAY
byte MOS6581_SID::CH3_CONTROL
byte MOS6581_SID::CH3_ENV
word MOS6581_SID::CH3_FREQ
byte MOS6581_SID::CH3_OSC
word MOS6581_SID::CH3_PULSE_WIDTH
byte MOS6581_SID::CH3_SUSTAIN_RELEASE
byte MOS6581_SID::FILTER_CUTOFF_HIGH
byte MOS6581_SID::FILTER_CUTOFF_LOW
byte MOS6581_SID::FILTER_SETUP
byte MOS6581_SID::POT_X
byte MOS6581_SID::POT_Y
byte MOS6581_SID::VOLUME_FILTER_MODE
byte TIME_OF_DAY::HOURS
byte TIME_OF_DAY::MIN
byte TIME_OF_DAY::SEC
byte TIME_OF_DAY::TENTHS
struct TIME_OF_DAY TOD_ZERO loadstore = { TENTHS: 0, SEC: 0, MIN: 0, HOURS: 0 }
void __start()
byte conio_cursor_x loadstore 1.8987354544303797E7
byte conio_cursor_y loadstore 3.404255426382979E8
byte* conio_line_color loadstore 2.630952500952381E8
byte* conio_line_text loadstore 2.5402300009195402E8
void cputc(byte cputc::c)
byte cputc::c
byte cputc::c#0 2.0000002E7
byte cputc::c#2 20002.0
byte cputc::c#3 1.05005002E8
void cputln()
void cputs(to_nomodify byte* cputs::s)
byte cputs::c
byte cputs::c#1 1.0000001E7
to_nomodify byte* cputs::s
to_nomodify byte* cputs::s#0 5000000.5
to_nomodify byte* cputs::s#5 1.5050002E7
to_nomodify byte* cputs::s#6 100001.0
void cscroll()
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte*~ gotoxy::$5 2002.0
byte*~ gotoxy::$6 2002.0
word~ gotoxy::$7 1501.5
word~ gotoxy::$8 2002.0
word~ gotoxy::$9 2002.0
word gotoxy::line_offset
word gotoxy::line_offset#0 1001.0
byte gotoxy::x
byte gotoxy::y
byte gotoxy::y#5 667.3333333333334
byte gotoxy::y#6 667.3333333333334
void main()
byte~ main::$6 202.0
word main::i
word main::i#1 202.0
word main::i#2 42.08333333333333
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2
byte* memcpy::dst
byte* memcpy::dst#1 1.00000000000001E14
byte* memcpy::dst#2 1.0003333333333467E14
byte* memcpy::dst#4 2.00000000002E11
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2
byte* memcpy::src
byte* memcpy::src#1 2.00000000000002E14
byte* memcpy::src#2 1.0002500000000125E14
byte* memcpy::src#4 1.00000000001E11
byte* memcpy::src_end
byte* memcpy::src_end#0 1.251250000000025E13
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 1.4285714285714428E13
byte* memset::dst
byte* memset::dst#1 2.00000000000002E14
byte* memset::dst#2 1.3336666666666834E14
byte* memset::dst#4 2.00000000002E11
byte* memset::end
byte* memset::end#0 1.6683333333333668E13
word memset::num
void* memset::return
void* memset::str
void* memset::str#3
struct printf_buffer_number printf_buffer loadstore = {}
byte printf_buffer_number::sign
byte printf_format_number::justify_left
byte printf_format_number::min_length
byte printf_format_number::radix
byte printf_format_number::sign_always
byte printf_format_number::upper_case
byte printf_format_number::zero_padding
byte printf_format_string::justify_left
byte printf_format_string::min_length
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 7001.0
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_zero_padding
signed byte printf_number_buffer::len
signed byte printf_number_buffer::padding
void printf_string(byte* printf_string::str , byte printf_string::format_min_length , byte printf_string::format_justify_left)
struct printf_format_string printf_string::format
byte printf_string::format_justify_left
byte printf_string::format_min_length
signed byte printf_string::len
signed byte printf_string::padding
byte* printf_string::str
void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
struct printf_format_number printf_uint::format
byte printf_uint::format_justify_left
byte printf_uint::format_min_length
byte printf_uint::format_radix
byte printf_uint::format_sign_always
byte printf_uint::format_upper_case
byte printf_uint::format_zero_padding
word printf_uint::uvalue
word printf_uint::uvalue#0 367.33333333333337
void tod_init(byte tod_init::tod_TENTHS , byte tod_init::tod_SEC , byte tod_init::tod_MIN , byte tod_init::tod_HOURS)
struct TIME_OF_DAY tod_init::tod
byte tod_init::tod_HOURS
byte tod_init::tod_HOURS#0 37.33333333333333
byte tod_init::tod_MIN
byte tod_init::tod_MIN#0 22.4
byte tod_init::tod_SEC
byte tod_init::tod_SEC#0 16.0
byte tod_init::tod_TENTHS
byte tod_init::tod_TENTHS#0 12.444444444444443
struct TIME_OF_DAY tod_read()
byte tod_read::hours
byte tod_read::mins
struct TIME_OF_DAY tod_read::return
byte tod_read::return_HOURS
byte tod_read::return_HOURS#0 12.444444444444443
byte tod_read::return_HOURS#2 5.5
byte tod_read::return_MIN
byte tod_read::return_MIN#0 16.0
byte tod_read::return_MIN#2 5.5
byte tod_read::return_SEC
byte tod_read::return_SEC#0 22.4
byte tod_read::return_SEC#2 5.5
byte tod_read::return_TENTHS
byte tod_read::return_TENTHS#0 37.33333333333333
byte tod_read::return_TENTHS#2 5.5
byte tod_read::secs
byte tod_read::tenths
byte tod_read::tod_HOURS
byte tod_read::tod_MIN
byte tod_read::tod_SEC
byte tod_read::tod_TENTHS
byte* tod_str(byte tod_str::tod_TENTHS , byte tod_str::tod_SEC , byte tod_str::tod_MIN , byte tod_str::tod_HOURS)
byte~ tod_str::$0 202.0
byte~ tod_str::$1 202.0
byte~ tod_str::$10 202.0
byte~ tod_str::$11 202.0
byte~ tod_str::$12 202.0
byte~ tod_str::$13 202.0
byte~ tod_str::$14 202.0
byte~ tod_str::$15 202.0
byte~ tod_str::$2 202.0
byte~ tod_str::$3 202.0
byte~ tod_str::$4 202.0
byte~ tod_str::$5 202.0
byte~ tod_str::$6 202.0
byte~ tod_str::$7 202.0
byte~ tod_str::$8 202.0
byte~ tod_str::$9 202.0
byte* tod_str::return
struct TIME_OF_DAY tod_str::tod
byte tod_str::tod_HOURS
byte tod_str::tod_HOURS#0 53.25
byte tod_str::tod_MIN
byte tod_str::tod_MIN#0 19.363636363636363
byte tod_str::tod_SEC
byte tod_str::tod_SEC#0 11.833333333333332
byte tod_str::tod_TENTHS
byte tod_str::tod_TENTHS#0 8.52
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 2000002.0
byte~ utoa::$11 20002.0
byte* utoa::buffer
byte* utoa::buffer#11 287143.2857142857
byte* utoa::buffer#14 1500001.5
byte* utoa::buffer#3 20002.0
byte* utoa::buffer#4 2000002.0
byte utoa::digit
byte utoa::digit#1 2000002.0
byte utoa::digit#2 285714.5714285714
word utoa::digit_value
word utoa::digit_value#0 600000.6000000001
word* utoa::digit_values
byte utoa::max_digits
byte utoa::radix
byte utoa::started
byte utoa::started#2 500000.5
byte utoa::started#4 1000001.0
word utoa::value
word utoa::value#0 1000001.0
word utoa::value#1 5501.0
word utoa::value#2 572857.857142857
word utoa::value#6 1500001.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 1375000.25
byte utoa_append::digit
byte utoa_append::digit#1 1.0000000001E10
byte utoa_append::digit#2 1.00050000015E10
word utoa_append::return
word utoa_append::return#0 2000002.0
word utoa_append::sub
word utoa_append::sub#0 3.3335000005E9
word utoa_append::value
word utoa_append::value#0 3666667.333333333
word utoa_append::value#1 2.0000000002E10
word utoa_append::value#2 5.001833334166666E9

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ gotoxy::y#6 gotoxy::y#5 ]
[ cputs::s#5 cputs::s#6 cputs::s#0 ]
[ cputc::c#3 cputc::c#0 cputc::c#2 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
Added variable conio_cursor_x to live range equivalence class [ conio_cursor_x ]
Added variable conio_cursor_y to live range equivalence class [ conio_cursor_y ]
Added variable conio_line_text to live range equivalence class [ conio_line_text ]
Added variable conio_line_color to live range equivalence class [ conio_line_color ]
Added variable tod_init::tod_TENTHS#0 to live range equivalence class [ tod_init::tod_TENTHS#0 ]
Added variable tod_init::tod_SEC#0 to live range equivalence class [ tod_init::tod_SEC#0 ]
Added variable tod_init::tod_MIN#0 to live range equivalence class [ tod_init::tod_MIN#0 ]
Added variable tod_init::tod_HOURS#0 to live range equivalence class [ tod_init::tod_HOURS#0 ]
Added variable tod_read::return_TENTHS#2 to live range equivalence class [ tod_read::return_TENTHS#2 ]
Added variable tod_read::return_SEC#2 to live range equivalence class [ tod_read::return_SEC#2 ]
Added variable tod_read::return_MIN#2 to live range equivalence class [ tod_read::return_MIN#2 ]
Added variable tod_read::return_HOURS#2 to live range equivalence class [ tod_read::return_HOURS#2 ]
Added variable tod_str::tod_TENTHS#0 to live range equivalence class [ tod_str::tod_TENTHS#0 ]
Added variable tod_str::tod_SEC#0 to live range equivalence class [ tod_str::tod_SEC#0 ]
Added variable tod_str::tod_MIN#0 to live range equivalence class [ tod_str::tod_MIN#0 ]
Added variable tod_str::tod_HOURS#0 to live range equivalence class [ tod_str::tod_HOURS#0 ]
Added variable main::$6 to live range equivalence class [ main::$6 ]
Added variable printf_uint::uvalue#0 to live range equivalence class [ printf_uint::uvalue#0 ]
Added variable gotoxy::$7 to live range equivalence class [ gotoxy::$7 ]
Added variable gotoxy::$8 to live range equivalence class [ gotoxy::$8 ]
Added variable gotoxy::$9 to live range equivalence class [ gotoxy::$9 ]
Added variable gotoxy::line_offset#0 to live range equivalence class [ gotoxy::line_offset#0 ]
Added variable gotoxy::$5 to live range equivalence class [ gotoxy::$5 ]
Added variable gotoxy::$6 to live range equivalence class [ gotoxy::$6 ]
Added variable tod_read::return_HOURS#0 to live range equivalence class [ tod_read::return_HOURS#0 ]
Added variable tod_read::return_MIN#0 to live range equivalence class [ tod_read::return_MIN#0 ]
Added variable tod_read::return_SEC#0 to live range equivalence class [ tod_read::return_SEC#0 ]
Added variable tod_read::return_TENTHS#0 to live range equivalence class [ tod_read::return_TENTHS#0 ]
Added variable tod_str::$0 to live range equivalence class [ tod_str::$0 ]
Added variable tod_str::$1 to live range equivalence class [ tod_str::$1 ]
Added variable tod_str::$2 to live range equivalence class [ tod_str::$2 ]
Added variable tod_str::$3 to live range equivalence class [ tod_str::$3 ]
Added variable tod_str::$4 to live range equivalence class [ tod_str::$4 ]
Added variable tod_str::$5 to live range equivalence class [ tod_str::$5 ]
Added variable tod_str::$6 to live range equivalence class [ tod_str::$6 ]
Added variable tod_str::$7 to live range equivalence class [ tod_str::$7 ]
Added variable tod_str::$8 to live range equivalence class [ tod_str::$8 ]
Added variable tod_str::$9 to live range equivalence class [ tod_str::$9 ]
Added variable tod_str::$10 to live range equivalence class [ tod_str::$10 ]
Added variable tod_str::$11 to live range equivalence class [ tod_str::$11 ]
Added variable tod_str::$12 to live range equivalence class [ tod_str::$12 ]
Added variable tod_str::$13 to live range equivalence class [ tod_str::$13 ]
Added variable tod_str::$14 to live range equivalence class [ tod_str::$14 ]
Added variable tod_str::$15 to live range equivalence class [ tod_str::$15 ]
Added variable cputs::c#1 to live range equivalence class [ cputs::c#1 ]
Added variable printf_number_buffer::buffer_sign#0 to live range equivalence class [ printf_number_buffer::buffer_sign#0 ]
Added variable utoa::$11 to live range equivalence class [ utoa::$11 ]
Added variable utoa::buffer#3 to live range equivalence class [ utoa::buffer#3 ]
Added variable utoa::$10 to live range equivalence class [ utoa::$10 ]
Added variable utoa::digit_value#0 to live range equivalence class [ utoa::digit_value#0 ]
Added variable utoa_append::buffer#0 to live range equivalence class [ utoa_append::buffer#0 ]
Added variable utoa_append::sub#0 to live range equivalence class [ utoa_append::sub#0 ]
Added variable utoa_append::return#0 to live range equivalence class [ utoa_append::return#0 ]
Added variable memcpy::src_end#0 to live range equivalence class [ memcpy::src_end#0 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable printf_buffer to live range equivalence class [ printf_buffer ]
Added variable TOD_ZERO to live range equivalence class [ TOD_ZERO ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ gotoxy::y#6 gotoxy::y#5 ]
[ cputs::s#5 cputs::s#6 cputs::s#0 ]
[ cputc::c#3 cputc::c#0 cputc::c#2 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ conio_cursor_x ]
[ conio_cursor_y ]
[ conio_line_text ]
[ conio_line_color ]
[ tod_init::tod_TENTHS#0 ]
[ tod_init::tod_SEC#0 ]
[ tod_init::tod_MIN#0 ]
[ tod_init::tod_HOURS#0 ]
[ tod_read::return_TENTHS#2 ]
[ tod_read::return_SEC#2 ]
[ tod_read::return_MIN#2 ]
[ tod_read::return_HOURS#2 ]
[ tod_str::tod_TENTHS#0 ]
[ tod_str::tod_SEC#0 ]
[ tod_str::tod_MIN#0 ]
[ tod_str::tod_HOURS#0 ]
[ main::$6 ]
[ printf_uint::uvalue#0 ]
[ gotoxy::$7 ]
[ gotoxy::$8 ]
[ gotoxy::$9 ]
[ gotoxy::line_offset#0 ]
[ gotoxy::$5 ]
[ gotoxy::$6 ]
[ tod_read::return_HOURS#0 ]
[ tod_read::return_MIN#0 ]
[ tod_read::return_SEC#0 ]
[ tod_read::return_TENTHS#0 ]
[ tod_str::$0 ]
[ tod_str::$1 ]
[ tod_str::$2 ]
[ tod_str::$3 ]
[ tod_str::$4 ]
[ tod_str::$5 ]
[ tod_str::$6 ]
[ tod_str::$7 ]
[ tod_str::$8 ]
[ tod_str::$9 ]
[ tod_str::$10 ]
[ tod_str::$11 ]
[ tod_str::$12 ]
[ tod_str::$13 ]
[ tod_str::$14 ]
[ tod_str::$15 ]
[ cputs::c#1 ]
[ printf_number_buffer::buffer_sign#0 ]
[ utoa::$11 ]
[ utoa::buffer#3 ]
[ utoa::$10 ]
[ utoa::digit_value#0 ]
[ utoa_append::buffer#0 ]
[ utoa_append::sub#0 ]
[ utoa_append::return#0 ]
[ memcpy::src_end#0 ]
[ memset::end#0 ]
[ printf_buffer ]
[ TOD_ZERO ]
Allocated zp[2]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:4 [ gotoxy::y#6 gotoxy::y#5 ]
Allocated zp[2]:5 [ cputs::s#5 cputs::s#6 cputs::s#0 ]
Allocated zp[1]:7 [ cputc::c#3 cputc::c#0 cputc::c#2 ]
Allocated zp[1]:8 [ utoa::digit#2 utoa::digit#1 ]
Allocated zp[2]:9 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
Allocated zp[1]:11 [ utoa::started#2 utoa::started#4 ]
Allocated zp[2]:12 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
Allocated zp[2]:14 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
Allocated zp[1]:16 [ utoa_append::digit#2 utoa_append::digit#1 ]
Allocated zp[2]:17 [ memcpy::source#2 ]
Allocated zp[2]:19 [ memcpy::destination#2 ]
Allocated zp[2]:21 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
Allocated zp[2]:23 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated zp[2]:25 [ memset::str#3 ]
Allocated zp[1]:27 [ memset::c#4 ]
Allocated zp[2]:28 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[1]:30 [ conio_cursor_x ]
Allocated zp[1]:31 [ conio_cursor_y ]
Allocated zp[2]:32 [ conio_line_text ]
Allocated zp[2]:34 [ conio_line_color ]
Allocated zp[1]:36 [ tod_init::tod_TENTHS#0 ]
Allocated zp[1]:37 [ tod_init::tod_SEC#0 ]
Allocated zp[1]:38 [ tod_init::tod_MIN#0 ]
Allocated zp[1]:39 [ tod_init::tod_HOURS#0 ]
Allocated zp[1]:40 [ tod_read::return_TENTHS#2 ]
Allocated zp[1]:41 [ tod_read::return_SEC#2 ]
Allocated zp[1]:42 [ tod_read::return_MIN#2 ]
Allocated zp[1]:43 [ tod_read::return_HOURS#2 ]
Allocated zp[1]:44 [ tod_str::tod_TENTHS#0 ]
Allocated zp[1]:45 [ tod_str::tod_SEC#0 ]
Allocated zp[1]:46 [ tod_str::tod_MIN#0 ]
Allocated zp[1]:47 [ tod_str::tod_HOURS#0 ]
Allocated zp[1]:48 [ main::$6 ]
Allocated zp[2]:49 [ printf_uint::uvalue#0 ]
Allocated zp[2]:51 [ gotoxy::$7 ]
Allocated zp[2]:53 [ gotoxy::$8 ]
Allocated zp[2]:55 [ gotoxy::$9 ]
Allocated zp[2]:57 [ gotoxy::line_offset#0 ]
Allocated zp[2]:59 [ gotoxy::$5 ]
Allocated zp[2]:61 [ gotoxy::$6 ]
Allocated zp[1]:63 [ tod_read::return_HOURS#0 ]
Allocated zp[1]:64 [ tod_read::return_MIN#0 ]
Allocated zp[1]:65 [ tod_read::return_SEC#0 ]
Allocated zp[1]:66 [ tod_read::return_TENTHS#0 ]
Allocated zp[1]:67 [ tod_str::$0 ]
Allocated zp[1]:68 [ tod_str::$1 ]
Allocated zp[1]:69 [ tod_str::$2 ]
Allocated zp[1]:70 [ tod_str::$3 ]
Allocated zp[1]:71 [ tod_str::$4 ]
Allocated zp[1]:72 [ tod_str::$5 ]
Allocated zp[1]:73 [ tod_str::$6 ]
Allocated zp[1]:74 [ tod_str::$7 ]
Allocated zp[1]:75 [ tod_str::$8 ]
Allocated zp[1]:76 [ tod_str::$9 ]
Allocated zp[1]:77 [ tod_str::$10 ]
Allocated zp[1]:78 [ tod_str::$11 ]
Allocated zp[1]:79 [ tod_str::$12 ]
Allocated zp[1]:80 [ tod_str::$13 ]
Allocated zp[1]:81 [ tod_str::$14 ]
Allocated zp[1]:82 [ tod_str::$15 ]
Allocated zp[1]:83 [ cputs::c#1 ]
Allocated zp[1]:84 [ printf_number_buffer::buffer_sign#0 ]
Allocated zp[1]:85 [ utoa::$11 ]
Allocated zp[2]:86 [ utoa::buffer#3 ]
Allocated zp[1]:88 [ utoa::$10 ]
Allocated zp[2]:89 [ utoa::digit_value#0 ]
Allocated zp[2]:91 [ utoa_append::buffer#0 ]
Allocated zp[2]:93 [ utoa_append::sub#0 ]
Allocated zp[2]:95 [ utoa_append::return#0 ]
Allocated zp[2]:97 [ memcpy::src_end#0 ]
Allocated zp[2]:99 [ memset::end#0 ]
Allocated mem[12] [ printf_buffer ]
Allocated mem[4] [ TOD_ZERO ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] conio_cursor_x = 0 [ conio_cursor_x TOD_ZERO printf_buffer ] (  [ conio_cursor_x TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] conio_cursor_y = 0 [ conio_cursor_x conio_cursor_y TOD_ZERO printf_buffer ] (  [ conio_cursor_x conio_cursor_y TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] conio_line_text = DEFAULT_SCREEN [ conio_cursor_x conio_cursor_y conio_line_text TOD_ZERO printf_buffer ] (  [ conio_cursor_x conio_cursor_y conio_line_text TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] conio_line_color = COLORRAM [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color TOD_ZERO printf_buffer ] (  [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [14] if(main::i#2<$2710) goto main::@2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 printf_buffer ] ( main:6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [33] main::$6 = main::i#2 & $7f [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 main::$6 printf_buffer ] ( main:6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 main::$6 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [37] printf_uint::uvalue#0 = main::i#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 printf_uint::uvalue#0 printf_buffer ] ( main:6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 printf_uint::uvalue#0 printf_buffer ] { { printf_uint::uvalue#0 = main::i#2 } }  ) always clobbers reg byte a 
Statement [44] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | $80 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:12 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:36 [ tod_init::tod_TENTHS#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:37 [ tod_init::tod_SEC#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:38 [ tod_init::tod_MIN#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:39 [ tod_init::tod_HOURS#0 ]
Statement [45] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & $7f [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:12 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Statement [55] conio_cursor_x = 0 [ conio_cursor_x gotoxy::y#6 ] ( main:6::gotoxy:16 [ conio_cursor_x gotoxy::y#6 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x gotoxy::y#6 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x gotoxy::y#6 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ gotoxy::y#6 gotoxy::y#5 ]
Statement [57] gotoxy::$7 = (word)gotoxy::y#6 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  ) always clobbers reg byte a 
Statement [58] gotoxy::$8 = gotoxy::$7 << 2 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  ) always clobbers reg byte a 
Statement [59] gotoxy::$9 = gotoxy::$8 + gotoxy::$7 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  ) always clobbers reg byte a 
Statement [60] gotoxy::line_offset#0 = gotoxy::$9 << 3 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [61] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  ) always clobbers reg byte a 
Statement [62] conio_line_text = gotoxy::$5 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [63] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  ) always clobbers reg byte a 
Statement [64] conio_line_color = gotoxy::$6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [71] tod_str::$0 = tod_str::tod_HOURS#0 >> 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:44 [ tod_str::tod_TENTHS#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:45 [ tod_str::tod_SEC#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:46 [ tod_str::tod_MIN#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:47 [ tod_str::tod_HOURS#0 ]
Statement [74] tod_str::$2 = tod_str::tod_HOURS#0 & $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [77] tod_str::$4 = tod_str::tod_MIN#0 >> 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [80] tod_str::$6 = tod_str::tod_MIN#0 & $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [83] tod_str::$8 = tod_str::tod_SEC#0 >> 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [86] tod_str::$10 = tod_str::tod_SEC#0 & $f [ tod_str::tod_TENTHS#0 tod_str::$10 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::$10 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [89] tod_str::$12 = tod_str::tod_TENTHS#0 >> 4 [ tod_str::tod_TENTHS#0 tod_str::$12 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::$12 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [92] tod_str::$14 = tod_str::tod_TENTHS#0 & $f [ tod_str::$14 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::$14 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [98] cputs::c#1 = *cputs::s#5 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] ( main:6::cputs:29 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] { }  main:6::cputs:42 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] { }  main:6::printf_string:31::cputs:106 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] { }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] { { printf_uint::uvalue#0 = main::i#2 } }  ) always clobbers reg byte a reg byte y 
Statement [109] *((byte*)&printf_buffer) = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_uint::uvalue#0 printf_buffer ] ( main:6::printf_uint:38 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_uint::uvalue#0 printf_buffer ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [110] utoa::value#1 = printf_uint::uvalue#0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::value#1 ] ( main:6::printf_uint:38 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::value#1 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [117] conio_line_text[conio_cursor_x] = cputc::c#3 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte y 
Statement [118] conio_line_color[conio_cursor_x] = LIGHT_BLUE [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Statement [120] if(conio_cursor_x!=$28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [129] utoa::$11 = (byte)utoa::value#2 [ printf_buffer utoa::buffer#11 utoa::$11 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#11 utoa::$11 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [130] *utoa::buffer#11 = DIGITS[utoa::$11] [ printf_buffer utoa::buffer#11 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [131] utoa::buffer#3 = ++ utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [132] *utoa::buffer#3 = 0 [ printf_buffer ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [134] utoa::$10 = utoa::digit#2 << 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ utoa::digit#2 utoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:11 [ utoa::started#2 utoa::started#4 ]
Statement [135] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [137] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [140] utoa_append::buffer#0 = utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [141] utoa_append::value#0 = utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [142] utoa_append::sub#0 = utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [144] utoa_append::return#0 = utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [145] utoa::value#0 = utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [154] conio_line_text = conio_line_text + $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103::cputln:122 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122 [ main::i#2 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125 [ main::i#2 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [155] conio_line_color = conio_line_color + $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103::cputln:122 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122 [ main::i#2 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125 [ main::i#2 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [156] conio_cursor_x = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103::cputln:122 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [162] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( main:6::printf_uint:38::utoa:111::utoa_append:143 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:16 [ utoa_append::digit#2 utoa_append::digit#1 ]
Statement [163] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] [ utoa_append::value#2 ] ( main:6::printf_uint:38::utoa:111::utoa_append:143 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:8 [ utoa::digit#2 utoa::digit#1 ]
Statement [166] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( main:6::printf_uint:38::utoa:111::utoa_append:143 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [167] if(conio_cursor_y!=$19) goto cscroll::@return [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [176] conio_line_text = conio_line_text - $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [177] conio_line_color = conio_line_color - $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [181] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [182] memcpy::src#4 = (byte*)memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [183] memcpy::dst#4 = (byte*)memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [185] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [187] *memcpy::dst#2 = *memcpy::src#2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Statement [191] memset::end#0 = (byte*)memset::str#3 + $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:27 [ memset::c#4 ]
Statement [192] memset::dst#4 = (byte*)memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [194] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [196] *memset::dst#2 = memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:27 [ memset::c#4 ]
Statement [1] conio_cursor_x = 0 [ conio_cursor_x TOD_ZERO printf_buffer ] (  [ conio_cursor_x TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] conio_cursor_y = 0 [ conio_cursor_x conio_cursor_y TOD_ZERO printf_buffer ] (  [ conio_cursor_x conio_cursor_y TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] conio_line_text = DEFAULT_SCREEN [ conio_cursor_x conio_cursor_y conio_line_text TOD_ZERO printf_buffer ] (  [ conio_cursor_x conio_cursor_y conio_line_text TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] conio_line_color = COLORRAM [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color TOD_ZERO printf_buffer ] (  [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [14] if(main::i#2<$2710) goto main::@2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 printf_buffer ] ( main:6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [33] main::$6 = main::i#2 & $7f [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 main::$6 printf_buffer ] ( main:6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 main::$6 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [37] printf_uint::uvalue#0 = main::i#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 printf_uint::uvalue#0 printf_buffer ] ( main:6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 printf_uint::uvalue#0 printf_buffer ] { { printf_uint::uvalue#0 = main::i#2 } }  ) always clobbers reg byte a 
Statement [44] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | $80 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:12 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Statement [45] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & $7f [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:12 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Statement [55] conio_cursor_x = 0 [ conio_cursor_x gotoxy::y#6 ] ( main:6::gotoxy:16 [ conio_cursor_x gotoxy::y#6 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x gotoxy::y#6 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x gotoxy::y#6 ] { }  ) always clobbers reg byte a 
Statement [57] gotoxy::$7 = (word)gotoxy::y#6 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  ) always clobbers reg byte a 
Statement [58] gotoxy::$8 = gotoxy::$7 << 2 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  ) always clobbers reg byte a 
Statement [59] gotoxy::$9 = gotoxy::$8 + gotoxy::$7 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  ) always clobbers reg byte a 
Statement [60] gotoxy::line_offset#0 = gotoxy::$9 << 3 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [61] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  ) always clobbers reg byte a 
Statement [62] conio_line_text = gotoxy::$5 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [63] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  ) always clobbers reg byte a 
Statement [64] conio_line_color = gotoxy::$6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [71] tod_str::$0 = tod_str::tod_HOURS#0 >> 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [74] tod_str::$2 = tod_str::tod_HOURS#0 & $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [77] tod_str::$4 = tod_str::tod_MIN#0 >> 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [80] tod_str::$6 = tod_str::tod_MIN#0 & $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [83] tod_str::$8 = tod_str::tod_SEC#0 >> 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [86] tod_str::$10 = tod_str::tod_SEC#0 & $f [ tod_str::tod_TENTHS#0 tod_str::$10 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::$10 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [89] tod_str::$12 = tod_str::tod_TENTHS#0 >> 4 [ tod_str::tod_TENTHS#0 tod_str::$12 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::$12 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [92] tod_str::$14 = tod_str::tod_TENTHS#0 & $f [ tod_str::$14 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::$14 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [98] cputs::c#1 = *cputs::s#5 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] ( main:6::cputs:29 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] { }  main:6::cputs:42 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] { }  main:6::printf_string:31::cputs:106 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] { }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] { { printf_uint::uvalue#0 = main::i#2 } }  ) always clobbers reg byte a reg byte y 
Statement [109] *((byte*)&printf_buffer) = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_uint::uvalue#0 printf_buffer ] ( main:6::printf_uint:38 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_uint::uvalue#0 printf_buffer ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [110] utoa::value#1 = printf_uint::uvalue#0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::value#1 ] ( main:6::printf_uint:38 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::value#1 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [117] conio_line_text[conio_cursor_x] = cputc::c#3 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte y 
Statement [118] conio_line_color[conio_cursor_x] = LIGHT_BLUE [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Statement [120] if(conio_cursor_x!=$28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [129] utoa::$11 = (byte)utoa::value#2 [ printf_buffer utoa::buffer#11 utoa::$11 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#11 utoa::$11 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [130] *utoa::buffer#11 = DIGITS[utoa::$11] [ printf_buffer utoa::buffer#11 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [131] utoa::buffer#3 = ++ utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [132] *utoa::buffer#3 = 0 [ printf_buffer ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [134] utoa::$10 = utoa::digit#2 << 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [135] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [137] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [140] utoa_append::buffer#0 = utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [141] utoa_append::value#0 = utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [142] utoa_append::sub#0 = utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [144] utoa_append::return#0 = utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [145] utoa::value#0 = utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( main:6::printf_uint:38::utoa:111 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [154] conio_line_text = conio_line_text + $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103::cputln:122 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122 [ main::i#2 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125 [ main::i#2 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [155] conio_line_color = conio_line_color + $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103::cputln:122 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122 [ main::i#2 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125 [ main::i#2 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [156] conio_cursor_x = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103::cputln:122 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [162] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( main:6::printf_uint:38::utoa:111::utoa_append:143 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [163] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] [ utoa_append::value#2 ] ( main:6::printf_uint:38::utoa:111::utoa_append:143 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [166] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( main:6::printf_uint:38::utoa:111::utoa_append:143 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [167] if(conio_cursor_y!=$19) goto cscroll::@return [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [176] conio_line_text = conio_line_text - $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [177] conio_line_color = conio_line_color - $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [181] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [182] memcpy::src#4 = (byte*)memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [183] memcpy::dst#4 = (byte*)memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [185] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [187] *memcpy::dst#2 = *memcpy::src#2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:169 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:169 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memcpy:171 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memcpy:171 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Statement [191] memset::end#0 = (byte*)memset::str#3 + $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [192] memset::dst#4 = (byte*)memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [194] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [196] *memset::dst#2 = memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memset:173 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memset:173 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memset:173 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:122::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:122::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:122::cscroll:158::memset:175 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:103::cputln:125::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:103::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:106::cputc:103::cputln:125::cscroll:158::memset:175 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputs:152::cputc:103::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:113::cputc:150::cputln:125::cscroll:158::memset:175 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ main::i#2 main::i#1 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ gotoxy::y#6 gotoxy::y#5 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[2]:5 [ cputs::s#5 cputs::s#6 cputs::s#0 ] : zp[2]:5 , 
Potential registers zp[1]:7 [ cputc::c#3 cputc::c#0 cputc::c#2 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ utoa::digit#2 utoa::digit#1 ] : zp[1]:8 , reg byte x , 
Potential registers zp[2]:9 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] : zp[2]:9 , 
Potential registers zp[1]:11 [ utoa::started#2 utoa::started#4 ] : zp[1]:11 , reg byte x , reg byte y , 
Potential registers zp[2]:12 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] : zp[2]:12 , 
Potential registers zp[2]:14 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] : zp[2]:14 , 
Potential registers zp[1]:16 [ utoa_append::digit#2 utoa_append::digit#1 ] : zp[1]:16 , reg byte x , reg byte y , 
Potential registers zp[2]:17 [ memcpy::source#2 ] : zp[2]:17 , 
Potential registers zp[2]:19 [ memcpy::destination#2 ] : zp[2]:19 , 
Potential registers zp[2]:21 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] : zp[2]:21 , 
Potential registers zp[2]:23 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] : zp[2]:23 , 
Potential registers zp[2]:25 [ memset::str#3 ] : zp[2]:25 , 
Potential registers zp[1]:27 [ memset::c#4 ] : zp[1]:27 , reg byte x , 
Potential registers zp[2]:28 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:28 , 
Potential registers zp[1]:30 [ conio_cursor_x ] : zp[1]:30 , 
Potential registers zp[1]:31 [ conio_cursor_y ] : zp[1]:31 , 
Potential registers zp[2]:32 [ conio_line_text ] : zp[2]:32 , 
Potential registers zp[2]:34 [ conio_line_color ] : zp[2]:34 , 
Potential registers zp[1]:36 [ tod_init::tod_TENTHS#0 ] : zp[1]:36 , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ tod_init::tod_SEC#0 ] : zp[1]:37 , reg byte x , reg byte y , 
Potential registers zp[1]:38 [ tod_init::tod_MIN#0 ] : zp[1]:38 , reg byte x , reg byte y , 
Potential registers zp[1]:39 [ tod_init::tod_HOURS#0 ] : zp[1]:39 , reg byte x , reg byte y , 
Potential registers zp[1]:40 [ tod_read::return_TENTHS#2 ] : zp[1]:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:41 [ tod_read::return_SEC#2 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:42 [ tod_read::return_MIN#2 ] : zp[1]:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:43 [ tod_read::return_HOURS#2 ] : zp[1]:43 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:44 [ tod_str::tod_TENTHS#0 ] : zp[1]:44 , reg byte x , reg byte y , 
Potential registers zp[1]:45 [ tod_str::tod_SEC#0 ] : zp[1]:45 , reg byte x , reg byte y , 
Potential registers zp[1]:46 [ tod_str::tod_MIN#0 ] : zp[1]:46 , reg byte x , reg byte y , 
Potential registers zp[1]:47 [ tod_str::tod_HOURS#0 ] : zp[1]:47 , reg byte x , reg byte y , 
Potential registers zp[1]:48 [ main::$6 ] : zp[1]:48 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:49 [ printf_uint::uvalue#0 ] : zp[2]:49 , 
Potential registers zp[2]:51 [ gotoxy::$7 ] : zp[2]:51 , 
Potential registers zp[2]:53 [ gotoxy::$8 ] : zp[2]:53 , 
Potential registers zp[2]:55 [ gotoxy::$9 ] : zp[2]:55 , 
Potential registers zp[2]:57 [ gotoxy::line_offset#0 ] : zp[2]:57 , 
Potential registers zp[2]:59 [ gotoxy::$5 ] : zp[2]:59 , 
Potential registers zp[2]:61 [ gotoxy::$6 ] : zp[2]:61 , 
Potential registers zp[1]:63 [ tod_read::return_HOURS#0 ] : zp[1]:63 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:64 [ tod_read::return_MIN#0 ] : zp[1]:64 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:65 [ tod_read::return_SEC#0 ] : zp[1]:65 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:66 [ tod_read::return_TENTHS#0 ] : zp[1]:66 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:67 [ tod_str::$0 ] : zp[1]:67 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:68 [ tod_str::$1 ] : zp[1]:68 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:69 [ tod_str::$2 ] : zp[1]:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:70 [ tod_str::$3 ] : zp[1]:70 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:71 [ tod_str::$4 ] : zp[1]:71 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:72 [ tod_str::$5 ] : zp[1]:72 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:73 [ tod_str::$6 ] : zp[1]:73 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:74 [ tod_str::$7 ] : zp[1]:74 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:75 [ tod_str::$8 ] : zp[1]:75 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:76 [ tod_str::$9 ] : zp[1]:76 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:77 [ tod_str::$10 ] : zp[1]:77 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:78 [ tod_str::$11 ] : zp[1]:78 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:79 [ tod_str::$12 ] : zp[1]:79 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:80 [ tod_str::$13 ] : zp[1]:80 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:81 [ tod_str::$14 ] : zp[1]:81 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:82 [ tod_str::$15 ] : zp[1]:82 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:83 [ cputs::c#1 ] : zp[1]:83 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:84 [ printf_number_buffer::buffer_sign#0 ] : zp[1]:84 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:85 [ utoa::$11 ] : zp[1]:85 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:86 [ utoa::buffer#3 ] : zp[2]:86 , 
Potential registers zp[1]:88 [ utoa::$10 ] : zp[1]:88 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:89 [ utoa::digit_value#0 ] : zp[2]:89 , 
Potential registers zp[2]:91 [ utoa_append::buffer#0 ] : zp[2]:91 , 
Potential registers zp[2]:93 [ utoa_append::sub#0 ] : zp[2]:93 , 
Potential registers zp[2]:95 [ utoa_append::return#0 ] : zp[2]:95 , 
Potential registers zp[2]:97 [ memcpy::src_end#0 ] : zp[2]:97 , 
Potential registers zp[2]:99 [ memset::end#0 ] : zp[2]:99 , 
Potential registers mem[12] [ printf_buffer ] : mem[12] , 
Potential registers mem[4] [ TOD_ZERO ] : mem[4] , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 300,125,000,000,004.25: zp[2]:21 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] 200,233,333,333,337.7: zp[2]:23 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] 12,512,500,000,000.25: zp[2]:97 [ memcpy::src_end#0 ] 0: zp[2]:17 [ memcpy::source#2 ] 0: zp[2]:19 [ memcpy::destination#2 ] 
Uplift Scope [memset] 333,566,666,666,672.4: zp[2]:28 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 16,683,333,333,333.67: zp[2]:99 [ memset::end#0 ] 14,285,714,285,714.43: zp[1]:27 [ memset::c#4 ] 0: zp[2]:25 [ memset::str#3 ] 
Uplift Scope [utoa_append] 25,005,500,003.5: zp[2]:14 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] 20,005,000,002.5: zp[1]:16 [ utoa_append::digit#2 utoa_append::digit#1 ] 3,333,500,000.5: zp[2]:93 [ utoa_append::sub#0 ] 2,000,002: zp[2]:95 [ utoa_append::return#0 ] 1,375,000.25: zp[2]:91 [ utoa_append::buffer#0 ] 
Uplift Scope [] 340,425,542.64: zp[1]:31 [ conio_cursor_y ] 263,095,250.1: zp[2]:34 [ conio_line_color ] 254,023,000.09: zp[2]:32 [ conio_line_text ] 18,987,354.54: zp[1]:30 [ conio_cursor_x ] 0: mem[12] [ printf_buffer ] 0: mem[4] [ TOD_ZERO ] 
Uplift Scope [cputc] 125,025,006: zp[1]:7 [ cputc::c#3 cputc::c#0 cputc::c#2 ] 
Uplift Scope [cputs] 20,150,003.5: zp[2]:5 [ cputs::s#5 cputs::s#6 cputs::s#0 ] 10,000,001: zp[1]:83 [ cputs::c#1 ] 
Uplift Scope [utoa] 3,787,146.79: zp[2]:12 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] 3,078,361.36: zp[2]:9 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] 2,285,716.57: zp[1]:8 [ utoa::digit#2 utoa::digit#1 ] 2,000,002: zp[1]:88 [ utoa::$10 ] 1,500,001.5: zp[1]:11 [ utoa::started#2 utoa::started#4 ] 600,000.6: zp[2]:89 [ utoa::digit_value#0 ] 20,002: zp[1]:85 [ utoa::$11 ] 20,002: zp[2]:86 [ utoa::buffer#3 ] 
Uplift Scope [gotoxy] 2,002: zp[2]:53 [ gotoxy::$8 ] 2,002: zp[2]:55 [ gotoxy::$9 ] 2,002: zp[2]:59 [ gotoxy::$5 ] 2,002: zp[2]:61 [ gotoxy::$6 ] 1,501.5: zp[2]:51 [ gotoxy::$7 ] 1,334.67: zp[1]:4 [ gotoxy::y#6 gotoxy::y#5 ] 1,001: zp[2]:57 [ gotoxy::line_offset#0 ] 
Uplift Scope [printf_number_buffer] 7,001: zp[1]:84 [ printf_number_buffer::buffer_sign#0 ] 
Uplift Scope [tod_str] 202: zp[1]:67 [ tod_str::$0 ] 202: zp[1]:68 [ tod_str::$1 ] 202: zp[1]:69 [ tod_str::$2 ] 202: zp[1]:70 [ tod_str::$3 ] 202: zp[1]:71 [ tod_str::$4 ] 202: zp[1]:72 [ tod_str::$5 ] 202: zp[1]:73 [ tod_str::$6 ] 202: zp[1]:74 [ tod_str::$7 ] 202: zp[1]:75 [ tod_str::$8 ] 202: zp[1]:76 [ tod_str::$9 ] 202: zp[1]:77 [ tod_str::$10 ] 202: zp[1]:78 [ tod_str::$11 ] 202: zp[1]:79 [ tod_str::$12 ] 202: zp[1]:80 [ tod_str::$13 ] 202: zp[1]:81 [ tod_str::$14 ] 202: zp[1]:82 [ tod_str::$15 ] 53.25: zp[1]:47 [ tod_str::tod_HOURS#0 ] 19.36: zp[1]:46 [ tod_str::tod_MIN#0 ] 11.83: zp[1]:45 [ tod_str::tod_SEC#0 ] 8.52: zp[1]:44 [ tod_str::tod_TENTHS#0 ] 
Uplift Scope [main] 244.08: zp[2]:2 [ main::i#2 main::i#1 ] 202: zp[1]:48 [ main::$6 ] 
Uplift Scope [printf_uint] 367.33: zp[2]:49 [ printf_uint::uvalue#0 ] 
Uplift Scope [tod_read] 37.33: zp[1]:66 [ tod_read::return_TENTHS#0 ] 22.4: zp[1]:65 [ tod_read::return_SEC#0 ] 16: zp[1]:64 [ tod_read::return_MIN#0 ] 12.44: zp[1]:63 [ tod_read::return_HOURS#0 ] 5.5: zp[1]:40 [ tod_read::return_TENTHS#2 ] 5.5: zp[1]:41 [ tod_read::return_SEC#2 ] 5.5: zp[1]:42 [ tod_read::return_MIN#2 ] 5.5: zp[1]:43 [ tod_read::return_HOURS#2 ] 
Uplift Scope [tod_init] 37.33: zp[1]:39 [ tod_init::tod_HOURS#0 ] 22.4: zp[1]:38 [ tod_init::tod_MIN#0 ] 16: zp[1]:37 [ tod_init::tod_SEC#0 ] 12.44: zp[1]:36 [ tod_init::tod_TENTHS#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [cputln] 
Uplift Scope [cscroll] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_buffer_number] 
Uplift Scope [printf_format_string] 
Uplift Scope [printf_string] 
Uplift Scope [TIME_OF_DAY] 
Uplift Scope [__start] 

Uplifting [memcpy] best 199493 combination zp[2]:21 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] zp[2]:23 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] zp[2]:97 [ memcpy::src_end#0 ] zp[2]:17 [ memcpy::source#2 ] zp[2]:19 [ memcpy::destination#2 ] 
Uplifting [memset] best 198487 combination zp[2]:28 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:99 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:25 [ memset::str#3 ] 
Uplifting [utoa_append] best 192484 combination zp[2]:14 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ] zp[2]:93 [ utoa_append::sub#0 ] zp[2]:95 [ utoa_append::return#0 ] zp[2]:91 [ utoa_append::buffer#0 ] 
Uplifting [] best 192484 combination zp[1]:31 [ conio_cursor_y ] zp[2]:34 [ conio_line_color ] zp[2]:32 [ conio_line_text ] zp[1]:30 [ conio_cursor_x ] mem[12] [ printf_buffer ] mem[4] [ TOD_ZERO ] 
Uplifting [cputc] best 192175 combination reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 ] 
Uplifting [cputs] best 191275 combination zp[2]:5 [ cputs::s#5 cputs::s#6 cputs::s#0 ] reg byte a [ cputs::c#1 ] 
Uplifting [utoa] best 189971 combination zp[2]:12 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] zp[2]:9 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] zp[1]:8 [ utoa::digit#2 utoa::digit#1 ] reg byte a [ utoa::$10 ] reg byte x [ utoa::started#2 utoa::started#4 ] zp[2]:89 [ utoa::digit_value#0 ] reg byte a [ utoa::$11 ] zp[2]:86 [ utoa::buffer#3 ] 
Uplifting [gotoxy] best 189952 combination zp[2]:53 [ gotoxy::$8 ] zp[2]:55 [ gotoxy::$9 ] zp[2]:59 [ gotoxy::$5 ] zp[2]:61 [ gotoxy::$6 ] zp[2]:51 [ gotoxy::$7 ] reg byte x [ gotoxy::y#6 gotoxy::y#5 ] zp[2]:57 [ gotoxy::line_offset#0 ] 
Uplifting [printf_number_buffer] best 189943 combination reg byte a [ printf_number_buffer::buffer_sign#0 ] 
Uplifting [main] best 189883 combination zp[2]:2 [ main::i#2 main::i#1 ] reg byte a [ main::$6 ] 
Uplifting [printf_uint] best 189883 combination zp[2]:49 [ printf_uint::uvalue#0 ] 
Uplifting [tod_read] best 189865 combination reg byte y [ tod_read::return_TENTHS#0 ] reg byte x [ tod_read::return_SEC#0 ] reg byte a [ tod_read::return_MIN#0 ] zp[1]:63 [ tod_read::return_HOURS#0 ] zp[1]:40 [ tod_read::return_TENTHS#2 ] zp[1]:41 [ tod_read::return_SEC#2 ] zp[1]:42 [ tod_read::return_MIN#2 ] zp[1]:43 [ tod_read::return_HOURS#2 ] 
Limited combination testing to 100 combinations of 65536 possible.
Uplifting [tod_init] best 189853 combination reg byte y [ tod_init::tod_HOURS#0 ] reg byte x [ tod_init::tod_MIN#0 ] zp[1]:37 [ tod_init::tod_SEC#0 ] zp[1]:36 [ tod_init::tod_TENTHS#0 ] 
Uplifting [RADIX] best 189853 combination 
Uplifting [MOS6526_CIA] best 189853 combination 
Uplifting [MOS6569_VICII] best 189853 combination 
Uplifting [MOS6581_SID] best 189853 combination 
Uplifting [cputln] best 189853 combination 
Uplifting [cscroll] best 189853 combination 
Uplifting [printf_format_number] best 189853 combination 
Uplifting [printf_buffer_number] best 189853 combination 
Uplifting [printf_format_string] best 189853 combination 
Uplifting [printf_string] best 189853 combination 
Uplifting [TIME_OF_DAY] best 189853 combination 
Uplifting [__start] best 189853 combination 
Attempting to uplift remaining variables inzp[1]:31 [ conio_cursor_y ]
Uplifting [] best 189853 combination zp[1]:31 [ conio_cursor_y ] 
Attempting to uplift remaining variables inzp[1]:30 [ conio_cursor_x ]
Uplifting [] best 189853 combination zp[1]:30 [ conio_cursor_x ] 
Attempting to uplift remaining variables inzp[1]:8 [ utoa::digit#2 utoa::digit#1 ]
Uplifting [utoa] best 189853 combination zp[1]:8 [ utoa::digit#2 utoa::digit#1 ] 
Attempting to uplift remaining variables inzp[1]:67 [ tod_str::$0 ]
Uplifting [tod_str] best 189849 combination reg byte a [ tod_str::$0 ] 
Attempting to uplift remaining variables inzp[1]:68 [ tod_str::$1 ]
Uplifting [tod_str] best 189843 combination reg byte a [ tod_str::$1 ] 
Attempting to uplift remaining variables inzp[1]:69 [ tod_str::$2 ]
Uplifting [tod_str] best 189839 combination reg byte a [ tod_str::$2 ] 
Attempting to uplift remaining variables inzp[1]:70 [ tod_str::$3 ]
Uplifting [tod_str] best 189833 combination reg byte a [ tod_str::$3 ] 
Attempting to uplift remaining variables inzp[1]:71 [ tod_str::$4 ]
Uplifting [tod_str] best 189829 combination reg byte a [ tod_str::$4 ] 
Attempting to uplift remaining variables inzp[1]:72 [ tod_str::$5 ]
Uplifting [tod_str] best 189823 combination reg byte a [ tod_str::$5 ] 
Attempting to uplift remaining variables inzp[1]:73 [ tod_str::$6 ]
Uplifting [tod_str] best 189819 combination reg byte a [ tod_str::$6 ] 
Attempting to uplift remaining variables inzp[1]:74 [ tod_str::$7 ]
Uplifting [tod_str] best 189813 combination reg byte a [ tod_str::$7 ] 
Attempting to uplift remaining variables inzp[1]:75 [ tod_str::$8 ]
Uplifting [tod_str] best 189809 combination reg byte a [ tod_str::$8 ] 
Attempting to uplift remaining variables inzp[1]:76 [ tod_str::$9 ]
Uplifting [tod_str] best 189803 combination reg byte a [ tod_str::$9 ] 
Attempting to uplift remaining variables inzp[1]:77 [ tod_str::$10 ]
Uplifting [tod_str] best 189799 combination reg byte a [ tod_str::$10 ] 
Attempting to uplift remaining variables inzp[1]:78 [ tod_str::$11 ]
Uplifting [tod_str] best 189793 combination reg byte a [ tod_str::$11 ] 
Attempting to uplift remaining variables inzp[1]:79 [ tod_str::$12 ]
Uplifting [tod_str] best 189789 combination reg byte a [ tod_str::$12 ] 
Attempting to uplift remaining variables inzp[1]:80 [ tod_str::$13 ]
Uplifting [tod_str] best 189783 combination reg byte a [ tod_str::$13 ] 
Attempting to uplift remaining variables inzp[1]:81 [ tod_str::$14 ]
Uplifting [tod_str] best 189779 combination reg byte a [ tod_str::$14 ] 
Attempting to uplift remaining variables inzp[1]:82 [ tod_str::$15 ]
Uplifting [tod_str] best 189773 combination reg byte a [ tod_str::$15 ] 
Attempting to uplift remaining variables inzp[1]:47 [ tod_str::tod_HOURS#0 ]
Uplifting [tod_str] best 189768 combination reg byte x [ tod_str::tod_HOURS#0 ] 
Attempting to uplift remaining variables inzp[1]:46 [ tod_str::tod_MIN#0 ]
Uplifting [tod_str] best 189763 combination reg byte y [ tod_str::tod_MIN#0 ] 
Attempting to uplift remaining variables inzp[1]:37 [ tod_init::tod_SEC#0 ]
Uplifting [tod_init] best 189763 combination zp[1]:37 [ tod_init::tod_SEC#0 ] 
Attempting to uplift remaining variables inzp[1]:36 [ tod_init::tod_TENTHS#0 ]
Uplifting [tod_init] best 189763 combination zp[1]:36 [ tod_init::tod_TENTHS#0 ] 
Attempting to uplift remaining variables inzp[1]:63 [ tod_read::return_HOURS#0 ]
Uplifting [tod_read] best 189763 combination zp[1]:63 [ tod_read::return_HOURS#0 ] 
Attempting to uplift remaining variables inzp[1]:45 [ tod_str::tod_SEC#0 ]
Uplifting [tod_str] best 189763 combination zp[1]:45 [ tod_str::tod_SEC#0 ] 
Attempting to uplift remaining variables inzp[1]:44 [ tod_str::tod_TENTHS#0 ]
Uplifting [tod_str] best 189763 combination zp[1]:44 [ tod_str::tod_TENTHS#0 ] 
Attempting to uplift remaining variables inzp[1]:40 [ tod_read::return_TENTHS#2 ]
Uplifting [tod_read] best 189757 combination reg byte y [ tod_read::return_TENTHS#2 ] 
Attempting to uplift remaining variables inzp[1]:41 [ tod_read::return_SEC#2 ]
Uplifting [tod_read] best 189751 combination reg byte x [ tod_read::return_SEC#2 ] 
Attempting to uplift remaining variables inzp[1]:42 [ tod_read::return_MIN#2 ]
Uplifting [tod_read] best 189751 combination zp[1]:42 [ tod_read::return_MIN#2 ] 
Attempting to uplift remaining variables inzp[1]:43 [ tod_read::return_HOURS#2 ]
Uplifting [tod_read] best 189747 combination reg byte a [ tod_read::return_HOURS#2 ] 
Coalescing zero page register [ zp[2]:2 [ main::i#2 main::i#1 ] ] with [ zp[2]:49 [ printf_uint::uvalue#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:9 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] ] with [ zp[2]:14 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:9 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] with [ zp[2]:95 [ utoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:12 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] ] with [ zp[2]:86 [ utoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:12 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 ] ] with [ zp[2]:91 [ utoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ memcpy::source#2 ] ] with [ zp[2]:21 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:19 [ memcpy::destination#2 ] ] with [ zp[2]:23 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:25 [ memset::str#3 ] ] with [ zp[2]:28 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:32 [ conio_line_text ] ] with [ zp[2]:59 [ gotoxy::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:34 [ conio_line_color ] ] with [ zp[2]:61 [ gotoxy::$6 ] ] - score: 1
Coalescing zero page register [ zp[2]:51 [ gotoxy::$7 ] ] with [ zp[2]:55 [ gotoxy::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:89 [ utoa::digit_value#0 ] ] with [ zp[2]:93 [ utoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:34 [ conio_line_color gotoxy::$6 ] ] with [ zp[2]:57 [ gotoxy::line_offset#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:34 [ conio_line_color gotoxy::$6 gotoxy::line_offset#0 ] ] with [ zp[2]:51 [ gotoxy::$7 gotoxy::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:9 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ] ] with [ zp[2]:5 [ cputs::s#5 cputs::s#6 cputs::s#0 ] ]
Coalescing zero page register [ zp[2]:17 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] with [ zp[2]:12 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ] ]
Coalescing zero page register [ zp[2]:25 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ] with [ zp[2]:19 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ]
Coalescing zero page register [ zp[1]:36 [ tod_init::tod_TENTHS#0 ] ] with [ zp[1]:8 [ utoa::digit#2 utoa::digit#1 ] ]
Coalescing zero page register [ zp[1]:42 [ tod_read::return_MIN#2 ] ] with [ zp[1]:37 [ tod_init::tod_SEC#0 ] ]
Coalescing zero page register [ zp[1]:63 [ tod_read::return_HOURS#0 ] ] with [ zp[1]:44 [ tod_str::tod_TENTHS#0 ] ]
Coalescing zero page register [ zp[2]:89 [ utoa::digit_value#0 utoa_append::sub#0 ] ] with [ zp[2]:53 [ gotoxy::$8 ] ]
Coalescing zero page register [ zp[2]:99 [ memset::end#0 ] ] with [ zp[2]:97 [ memcpy::src_end#0 ] ]
Coalescing zero page register [ zp[1]:45 [ tod_str::tod_SEC#0 ] ] with [ zp[1]:36 [ tod_init::tod_TENTHS#0 utoa::digit#2 utoa::digit#1 ] ]
Coalescing zero page register [ zp[2]:89 [ utoa::digit_value#0 utoa_append::sub#0 gotoxy::$8 ] ] with [ zp[2]:25 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ]
Allocated (was zp[2]:9) zp[2]:4 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 cputs::s#5 cputs::s#6 cputs::s#0 ]
Allocated (was zp[2]:17) zp[2]:6 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ]
Allocated (was zp[1]:30) zp[1]:8 [ conio_cursor_x ]
Allocated (was zp[1]:31) zp[1]:9 [ conio_cursor_y ]
Allocated (was zp[2]:32) zp[2]:10 [ conio_line_text gotoxy::$5 ]
Allocated (was zp[2]:34) zp[2]:12 [ conio_line_color gotoxy::$6 gotoxy::line_offset#0 gotoxy::$7 gotoxy::$9 ]
Allocated (was zp[1]:42) zp[1]:14 [ tod_read::return_MIN#2 tod_init::tod_SEC#0 ]
Allocated (was zp[1]:45) zp[1]:15 [ tod_str::tod_SEC#0 tod_init::tod_TENTHS#0 utoa::digit#2 utoa::digit#1 ]
Allocated (was zp[1]:63) zp[1]:16 [ tod_read::return_HOURS#0 tod_str::tod_TENTHS#0 ]
Allocated (was zp[2]:89) zp[2]:17 [ utoa::digit_value#0 utoa_append::sub#0 gotoxy::$8 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated (was zp[2]:99) zp[2]:19 [ memset::end#0 memcpy::src_end#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests the speed of printf()
// Functions for performing input and output.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
  .const OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = 8
  // The current cursor y-position
  .label conio_cursor_y = 9
  // The current text cursor line start
  .label conio_line_text = $a
  // The current color cursor line start
  .label conio_line_color = $c
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [2] conio_cursor_y = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [3] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [4] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // [5] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [6] call main 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [7] return 
    rts
}
  // main
main: {
    .label i = 2
    // [8] tod_init::tod_TENTHS#0 = *((byte*)&TOD_ZERO) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO
    sta.z tod_init.tod_TENTHS
    // [9] tod_init::tod_SEC#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC
    sta.z tod_init.tod_SEC
    // [10] tod_init::tod_MIN#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN) -- vbuxx=_deref_pbuc1 
    ldx TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN
    // [11] tod_init::tod_HOURS#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS) -- vbuyy=_deref_pbuc1 
    ldy TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS
    // [12] call tod_init 
    jsr tod_init
    // [13] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [13] phi main::i#2 = 0 [phi:main->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
    // main::@1
  __b1:
    // [14] if(main::i#2<$2710) goto main::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>$2710
    bcc __b2
    bne !+
    lda.z i
    cmp #<$2710
    bcc __b2
  !:
    // [15] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    jmp __b3
    // main::@3
  __b3:
    // [16] call gotoxy 
    // [51] phi from main::@3 to gotoxy [phi:main::@3->gotoxy]
  gotoxy_from___b3:
    // [51] phi gotoxy::y#5 = $16 [phi:main::@3->gotoxy#0] -- vbuxx=vbuc1 
    ldx #$16
    jsr gotoxy
    // [17] phi from main::@3 to main::@6 [phi:main::@3->main::@6]
  __b6_from___b3:
    jmp __b6
    // main::@6
  __b6:
    // [18] call tod_read 
    jsr tod_read
    // [19] tod_read::return_TENTHS#2 = tod_read::return_TENTHS#0
    // [20] tod_read::return_SEC#2 = tod_read::return_SEC#0
    // [21] tod_read::return_MIN#2 = tod_read::return_MIN#0 -- vbuz1=vbuaa 
    sta.z tod_read.return_MIN
    // [22] tod_read::return_HOURS#2 = tod_read::return_HOURS#0 -- vbuaa=vbuz1 
    lda.z tod_read.return_HOURS
    jmp __b7
    // main::@7
  __b7:
    // [23] tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 -- vbuz1=vbuyy 
    sty.z tod_str.tod_TENTHS
    // [24] tod_str::tod_SEC#0 = tod_read::return_SEC#2 -- vbuz1=vbuxx 
    stx.z tod_str.tod_SEC
    // [25] tod_str::tod_MIN#0 = tod_read::return_MIN#2 -- vbuyy=vbuz1 
    ldy.z tod_read.return_MIN
    // [26] tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 -- vbuxx=vbuaa 
    tax
    // [27] call tod_str 
    jsr tod_str
    // [28] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  __b8_from___b7:
    jmp __b8
    // main::@8
  __b8:
    // [29] call cputs 
    // [96] phi from main::@8 to cputs [phi:main::@8->cputs]
  cputs_from___b8:
    // [96] phi cputs::s#6 = main::s [phi:main::@8->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    // [30] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [31] call printf_string 
    // [104] phi from main::@9 to printf_string [phi:main::@9->printf_string]
  printf_string_from___b9:
    jsr printf_string
    jmp __breturn
    // main::@return
  __breturn:
    // [32] return 
    rts
    // main::@2
  __b2:
    // [33] main::$6 = main::i#2 & $7f -- vbuaa=vwuz1_band_vbuc1 
    lda #$7f
    and.z i
    // [34] if(main::$6!=0) goto main::@4 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b4_from___b2
    // [35] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
  __b5_from___b2:
    jmp __b5
    // main::@5
  __b5:
    // [36] call gotoxy 
    // [51] phi from main::@5 to gotoxy [phi:main::@5->gotoxy]
  gotoxy_from___b5:
    // [51] phi gotoxy::y#5 = $10 [phi:main::@5->gotoxy#0] -- vbuxx=vbuc1 
    ldx #$10
    jsr gotoxy
    jmp __b11
    // main::@11
  __b11:
    // [37] printf_uint::uvalue#0 = main::i#2
    // [38] call printf_uint 
    // [108] phi from main::@11 to printf_uint [phi:main::@11->printf_uint]
  printf_uint_from___b11:
    jsr printf_uint
    // [39] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  __b12_from___b11:
    jmp __b12
    // main::@12
  __b12:
    // [40] call gotoxy 
    // [51] phi from main::@12 to gotoxy [phi:main::@12->gotoxy]
  gotoxy_from___b12:
    // [51] phi gotoxy::y#5 = 0 [phi:main::@12->gotoxy#0] -- vbuxx=vbuc1 
    ldx #0
    jsr gotoxy
    // [41] phi from main::@12 main::@2 to main::@4 [phi:main::@12/main::@2->main::@4]
  __b4_from___b12:
  __b4_from___b2:
    jmp __b4
    // main::@4
  __b4:
    // [42] call cputs 
    // [96] phi from main::@4 to cputs [phi:main::@4->cputs]
  cputs_from___b4:
    // [96] phi cputs::s#6 = main::s1 [phi:main::@4->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    jmp __b10
    // main::@10
  __b10:
    // [43] main::i#1 = ++ main::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [13] phi from main::@10 to main::@1 [phi:main::@10->main::@1]
  __b1_from___b10:
    // [13] phi main::i#2 = main::i#1 [phi:main::@10->main::@1#0] -- register_copy 
    jmp __b1
    s: .text "time: "
    .byte 0
    s1: .text "qwe "
    .byte 0
}
  // tod_init
// Initialize time-of-day clock
// This uses the MOS6526 CIA#1
// tod_init(byte zp($f) tod_TENTHS, byte zp($e) tod_SEC, byte register(X) tod_MIN, byte register(Y) tod_HOURS)
tod_init: {
    .label tod_TENTHS = $f
    .label tod_SEC = $e
    // [44] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set 50hz (this assumes PAL!) (bit7=1)
    lda #$80
    ora CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // [45] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Writing TOD clock (bit7=0)
    lda #$7f
    and CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [46] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) = tod_init::tod_HOURS#0 -- _deref_pbuc1=vbuyy 
    // Reset TOD clock
    // Writing sequence is important. TOD stops when hours is written and starts when 10ths is written.
    sty CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    // [47] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) = tod_init::tod_MIN#0 -- _deref_pbuc1=vbuxx 
    stx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // [48] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) = tod_init::tod_SEC#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_SEC
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // [49] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) = tod_init::tod_TENTHS#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_TENTHS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    jmp __breturn
    // tod_init::@return
  __breturn:
    // [50] return 
    rts
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte register(X) y)
gotoxy: {
    .label __5 = $a
    .label __6 = $c
    .label __7 = $c
    .label line_offset = $c
    .label __8 = $11
    .label __9 = $c
    // [52] if(gotoxy::y#5<$19+1) goto gotoxy::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19+1
    bcc __b3_from_gotoxy
    // [54] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
  __b1_from_gotoxy:
    // [54] phi gotoxy::y#6 = 0 [phi:gotoxy->gotoxy::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [53] phi from gotoxy to gotoxy::@3 [phi:gotoxy->gotoxy::@3]
  __b3_from_gotoxy:
    jmp __b3
    // gotoxy::@3
  __b3:
    // [54] phi from gotoxy::@3 to gotoxy::@1 [phi:gotoxy::@3->gotoxy::@1]
  __b1_from___b3:
    // [54] phi gotoxy::y#6 = gotoxy::y#5 [phi:gotoxy::@3->gotoxy::@1#0] -- register_copy 
    jmp __b1
    // gotoxy::@1
  __b1:
    jmp __b2
    // gotoxy::@2
  __b2:
    // [55] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [56] conio_cursor_y = gotoxy::y#6 -- vbuz1=vbuxx 
    stx.z conio_cursor_y
    // [57] gotoxy::$7 = (word)gotoxy::y#6 -- vwuz1=_word_vbuxx 
    txa
    sta.z __7
    lda #0
    sta.z __7+1
    // [58] gotoxy::$8 = gotoxy::$7 << 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [59] gotoxy::$9 = gotoxy::$8 + gotoxy::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [60] gotoxy::line_offset#0 = gotoxy::$9 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    // [61] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z line_offset
    clc
    adc #<DEFAULT_SCREEN
    sta.z __5
    lda.z line_offset+1
    adc #>DEFAULT_SCREEN
    sta.z __5+1
    // [62] conio_line_text = gotoxy::$5
    // [63] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __6
    adc #<COLORRAM
    sta.z __6
    lda.z __6+1
    adc #>COLORRAM
    sta.z __6+1
    // [64] conio_line_color = gotoxy::$6
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [65] return 
    rts
}
  // tod_read
// Read time of day
tod_read: {
    .label return_HOURS = $10
    .label return_MIN = $e
    // [66] tod_read::return_HOURS#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) -- vbuz1=_deref_pbuc1 
    // Reading sequence is important. TOD latches on reading hours until 10ths is read.
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    sta.z return_HOURS
    // [67] tod_read::return_MIN#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) -- vbuaa=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // [68] tod_read::return_SEC#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) -- vbuxx=_deref_pbuc1 
    ldx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // [69] tod_read::return_TENTHS#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) -- vbuyy=_deref_pbuc1 
    ldy CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    jmp __breturn
    // tod_read::@return
  __breturn:
    // [70] return 
    rts
}
  // tod_str
// Convert time of day to a human-readable string "hh:mm:ss:10"
// tod_str(byte zp($10) tod_TENTHS, byte zp($f) tod_SEC, byte register(Y) tod_MIN, byte register(X) tod_HOURS)
tod_str: {
    .label tod_TENTHS = $10
    .label tod_SEC = $f
    // [71] tod_str::$0 = tod_str::tod_HOURS#0 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [72] tod_str::$1 = '0' + tod_str::$0 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [73] *tod_buffer = tod_str::$1 -- _deref_pbuc1=vbuaa 
    sta tod_buffer
    // [74] tod_str::$2 = tod_str::tod_HOURS#0 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [75] tod_str::$3 = '0' + tod_str::$2 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [76] *(tod_buffer+1) = tod_str::$3 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+1
    // [77] tod_str::$4 = tod_str::tod_MIN#0 >> 4 -- vbuaa=vbuyy_ror_4 
    tya
    lsr
    lsr
    lsr
    lsr
    // [78] tod_str::$5 = '0' + tod_str::$4 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [79] *(tod_buffer+3) = tod_str::$5 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+3
    // [80] tod_str::$6 = tod_str::tod_MIN#0 & $f -- vbuaa=vbuyy_band_vbuc1 
    tya
    and #$f
    // [81] tod_str::$7 = '0' + tod_str::$6 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [82] *(tod_buffer+4) = tod_str::$7 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+4
    // [83] tod_str::$8 = tod_str::tod_SEC#0 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_SEC
    lsr
    lsr
    lsr
    lsr
    // [84] tod_str::$9 = '0' + tod_str::$8 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [85] *(tod_buffer+6) = tod_str::$9 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+6
    // [86] tod_str::$10 = tod_str::tod_SEC#0 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_SEC
    // [87] tod_str::$11 = '0' + tod_str::$10 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [88] *(tod_buffer+7) = tod_str::$11 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+7
    // [89] tod_str::$12 = tod_str::tod_TENTHS#0 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_TENTHS
    lsr
    lsr
    lsr
    lsr
    // [90] tod_str::$13 = '0' + tod_str::$12 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [91] *(tod_buffer+9) = tod_str::$13 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+9
    // [92] tod_str::$14 = tod_str::tod_TENTHS#0 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_TENTHS
    // [93] tod_str::$15 = '0' + tod_str::$14 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [94] *(tod_buffer+$a) = tod_str::$15 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+$a
    jmp __breturn
    // tod_str::@return
  __breturn:
    // [95] return 
    rts
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(4) s)
cputs: {
    .label s = 4
    // [97] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [97] phi cputs::s#5 = cputs::s#6 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [98] cputs::c#1 = *cputs::s#5 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [99] cputs::s#0 = ++ cputs::s#5 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [100] if(0!=cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [101] return 
    rts
    // cputs::@2
  __b2:
    // [102] cputc::c#0 = cputs::c#1
    // [103] call cputc 
    // [115] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
  cputc_from___b2:
    // [115] phi cputc::c#3 = cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1_from___b2
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length 
printf_string: {
    // [105] phi from printf_string to printf_string::@1 [phi:printf_string->printf_string::@1]
  __b1_from_printf_string:
    jmp __b1
    // printf_string::@1
  __b1:
    // [106] call cputs 
    // [96] phi from printf_string::@1 to cputs [phi:printf_string::@1->cputs]
  cputs_from___b1:
    // [96] phi cputs::s#6 = tod_buffer [phi:printf_string::@1->cputs#0] -- pbuz1=pbuc1 
    lda #<tod_buffer
    sta.z cputs.s
    lda #>tod_buffer
    sta.z cputs.s+1
    jsr cputs
    jmp __breturn
    // printf_string::@return
  __breturn:
    // [107] return 
    rts
}
  // printf_uint
// Print an unsigned int using a specific format
// printf_uint(word zp(2) uvalue)
printf_uint: {
    .label uvalue = 2
    jmp __b1
    // printf_uint::@1
  __b1:
    // [109] *((byte*)&printf_buffer) = 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [110] utoa::value#1 = printf_uint::uvalue#0 -- vwuz1=vwuz2 
    lda.z uvalue
    sta.z utoa.value
    lda.z uvalue+1
    sta.z utoa.value+1
    // [111] call utoa 
  // Format number into buffer
    // [126] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
  utoa_from___b1:
    jsr utoa
    jmp __b2
    // printf_uint::@2
  __b2:
    // [112] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer) -- vbuaa=_deref_pbuc1 
    lda printf_buffer
    // [113] call printf_number_buffer 
  // Print using format
    // [147] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    jsr printf_number_buffer
    jmp __breturn
    // printf_uint::@return
  __breturn:
    // [114] return 
    rts
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // [116] if(cputc::c#3==' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [117] conio_line_text[conio_cursor_x] = cputc::c#3 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // [118] conio_line_color[conio_cursor_x] = LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    ldy.z conio_cursor_x
    sta (conio_line_color),y
    // [119] conio_cursor_x = ++ conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [120] if(conio_cursor_x!=$28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [121] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
  __b3_from___b2:
    jmp __b3
    // cputc::@3
  __b3:
    // [122] call cputln 
    jsr cputln
    jmp __breturn
    // cputc::@return
  __breturn:
    // [123] return 
    rts
    // [124] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [125] call cputln 
    jsr cputln
    jmp __breturn
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp(4) value, byte* zp(6) buffer)
utoa: {
    .const max_digits = 5
    .label digit_value = $11
    .label buffer = 6
    .label digit = $f
    .label value = 4
    // [127] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [127] phi utoa::buffer#11 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [127] phi utoa::started#2 = 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [127] phi utoa::value#2 = utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [127] phi utoa::digit#2 = 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [128] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [129] utoa::$11 = (byte)utoa::value#2 -- vbuaa=_byte_vwuz1 
    lda.z value
    // [130] *utoa::buffer#11 = DIGITS[utoa::$11] -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [131] utoa::buffer#3 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [132] *utoa::buffer#3 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [133] return 
    rts
    // utoa::@2
  __b2:
    // [134] utoa::$10 = utoa::digit#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [135] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [136] if(0!=utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [137] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [138] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [138] phi utoa::buffer#14 = utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [138] phi utoa::started#4 = utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [138] phi utoa::value#6 = utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [139] utoa::digit#1 = ++ utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [127] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [127] phi utoa::buffer#11 = utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [127] phi utoa::started#2 = utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [127] phi utoa::value#2 = utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [127] phi utoa::digit#2 = utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [140] utoa_append::buffer#0 = utoa::buffer#11
    // [141] utoa_append::value#0 = utoa::value#2
    // [142] utoa_append::sub#0 = utoa::digit_value#0
    // [143] call utoa_append 
    // [160] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [144] utoa_append::return#0 = utoa_append::value#2
    jmp __b6
    // utoa::@6
  __b6:
    // [145] utoa::value#0 = utoa_append::return#0
    // [146] utoa::buffer#4 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [138] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [138] phi utoa::buffer#14 = utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [138] phi utoa::started#4 = 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [138] phi utoa::value#6 = utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte register(A) buffer_sign)
printf_number_buffer: {
    .label buffer_digits = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [148] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [149] cputc::c#2 = printf_number_buffer::buffer_sign#0
    // [150] call cputc 
    // [115] phi from printf_number_buffer::@3 to cputc [phi:printf_number_buffer::@3->cputc]
  cputc_from___b3:
    // [115] phi cputc::c#3 = cputc::c#2 [phi:printf_number_buffer::@3->cputc#0] -- register_copy 
    jsr cputc
    // [151] phi from printf_number_buffer::@1 printf_number_buffer::@3 to printf_number_buffer::@2 [phi:printf_number_buffer::@1/printf_number_buffer::@3->printf_number_buffer::@2]
  __b2_from___b1:
  __b2_from___b3:
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [152] call cputs 
    // [96] phi from printf_number_buffer::@2 to cputs [phi:printf_number_buffer::@2->cputs]
  cputs_from___b2:
    // [96] phi cputs::s#6 = printf_number_buffer::buffer_digits#0 [phi:printf_number_buffer::@2->cputs#0] -- pbuz1=pbuc1 
    lda #<buffer_digits
    sta.z cputs.s
    lda #>buffer_digits
    sta.z cputs.s+1
    jsr cputs
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [153] return 
    rts
}
  // cputln
// Print a newline
cputln: {
    // [154] conio_line_text = conio_line_text + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // [155] conio_line_color = conio_line_color + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // [156] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [157] conio_cursor_y = ++ conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [158] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [159] return 
    rts
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp(6) buffer, word zp(4) value, word zp($11) sub)
utoa_append: {
    .label buffer = 6
    .label value = 4
    .label sub = $11
    .label return = 4
    // [161] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [161] phi utoa_append::digit#2 = 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [161] phi utoa_append::value#2 = utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [162] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [163] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [164] return 
    rts
    // utoa_append::@2
  __b2:
    // [165] utoa_append::digit#1 = ++ utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // [166] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [161] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [161] phi utoa_append::digit#2 = utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [161] phi utoa_append::value#2 = utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // [167] if(conio_cursor_y!=$19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [168] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [169] call memcpy 
    // [180] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [180] phi memcpy::destination#2 = (void*)DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [180] phi memcpy::source#2 = (void*)DEFAULT_SCREEN+$28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [170] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [171] call memcpy 
    // [180] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [180] phi memcpy::destination#2 = (void*)COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [180] phi memcpy::source#2 = (void*)COLORRAM+$28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [172] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [173] call memset 
    // [190] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [190] phi memset::c#4 = ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [190] phi memset::str#3 = (void*)DEFAULT_SCREEN+(word)$19*$28-$28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [174] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [175] call memset 
    // [190] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [190] phi memset::c#4 = LIGHT_BLUE [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #LIGHT_BLUE
    // [190] phi memset::str#3 = (void*)COLORRAM+(word)$19*$28-$28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [176] conio_line_text = conio_line_text - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // [177] conio_line_color = conio_line_color - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // [178] conio_cursor_y = -- conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [179] return 
    rts
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($11) destination, void* zp(6) source)
memcpy: {
    .label src_end = $13
    .label dst = $11
    .label src = 6
    .label source = 6
    .label destination = $11
    // [181] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [182] memcpy::src#4 = (byte*)memcpy::source#2
    // [183] memcpy::dst#4 = (byte*)memcpy::destination#2
    // [184] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [184] phi memcpy::dst#2 = memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [184] phi memcpy::src#2 = memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [185] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [186] return 
    rts
    // memcpy::@2
  __b2:
    // [187] *memcpy::dst#2 = *memcpy::src#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [188] memcpy::dst#1 = ++ memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [189] memcpy::src#1 = ++ memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($11) str, byte register(X) c)
memset: {
    .label end = $13
    .label dst = $11
    .label str = $11
    jmp __b1
    // memset::@1
  __b1:
    // [191] memset::end#0 = (byte*)memset::str#3 + $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [192] memset::dst#4 = (byte*)memset::str#3
    // [193] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [193] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [194] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [195] return 
    rts
    // memset::@3
  __b3:
    // [196] *memset::dst#2 = memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [197] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // The buffer used by tod_str()
  tod_buffer: .text "00:00:00:00"
  .byte 0
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0
  // Time of Day 00:00:00:00
  TOD_ZERO: .byte 0, 0, 0, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b4
Removing instruction jmp __b10
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #>0
Removing instruction ldy.z conio_cursor_x
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b4_from___b2 with __b4
Replacing label __b3_from_gotoxy with __b2
Replacing label __b1 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from_cputc with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b3 with __b2
Removing instruction __b1_from___init1:
Removing instruction __b3_from___b1:
Removing instruction gotoxy_from___b3:
Removing instruction __b6_from___b3:
Removing instruction __b8_from___b7:
Removing instruction cputs_from___b8:
Removing instruction __b9_from___b8:
Removing instruction printf_string_from___b9:
Removing instruction __b5_from___b2:
Removing instruction gotoxy_from___b5:
Removing instruction printf_uint_from___b11:
Removing instruction __b12_from___b11:
Removing instruction gotoxy_from___b12:
Removing instruction __b4_from___b12:
Removing instruction __b4_from___b2:
Removing instruction cputs_from___b4:
Removing instruction __b3_from_gotoxy:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b1:
Removing instruction __b1_from_cputs:
Removing instruction __b1_from___b2:
Removing instruction cputc_from___b2:
Removing instruction __b1_from_printf_string:
Removing instruction cputs_from___b1:
Removing instruction __b3_from___b2:
Removing instruction __b1_from_cputc:
Removing instruction __b4_from___b7:
Removing instruction utoa_append_from___b5:
Removing instruction cputc_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction cputs_from___b2:
Removing instruction __b1_from_cscroll:
Removing instruction memcpy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction memcpy_from___b2:
Removing instruction __b3_from___b2:
Removing instruction memset_from___b3:
Removing instruction __b4_from___b3:
Removing instruction memset_from___b4:
Removing instruction __b1_from_memcpy:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b10:
Removing instruction __b1_from___b10:
Removing instruction __breturn:
Removing instruction __b1_from_gotoxy:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction utoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b1_from_utoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_utoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda.z digit_value+1
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*) 56320
const nomodify byte* COLORRAM = (byte*) 55296
const nomodify byte* DEFAULT_SCREEN = (byte*) 1024
const byte* DIGITS[]  = "0123456789abcdef"z
const nomodify byte LIGHT_BLUE = $e
byte MOS6526_CIA::INTERRUPT
byte MOS6526_CIA::PORT_A
byte MOS6526_CIA::PORT_A_DDR
byte MOS6526_CIA::PORT_B
byte MOS6526_CIA::PORT_B_DDR
byte MOS6526_CIA::SERIAL_DATA
word MOS6526_CIA::TIMER_A
byte MOS6526_CIA::TIMER_A_CONTROL
word MOS6526_CIA::TIMER_B
byte MOS6526_CIA::TIMER_B_CONTROL
byte MOS6526_CIA::TOD_10THS
byte MOS6526_CIA::TOD_HOURS
byte MOS6526_CIA::TOD_MIN
byte MOS6526_CIA::TOD_SEC
byte MOS6569_VICII::BG_COLOR
byte MOS6569_VICII::BG_COLOR1
byte MOS6569_VICII::BG_COLOR2
byte MOS6569_VICII::BG_COLOR3
byte MOS6569_VICII::BORDER_COLOR
byte MOS6569_VICII::CONTROL1
byte MOS6569_VICII::CONTROL2
byte MOS6569_VICII::IRQ_ENABLE
byte MOS6569_VICII::IRQ_STATUS
byte MOS6569_VICII::LIGHTPEN_X
byte MOS6569_VICII::LIGHTPEN_Y
byte MOS6569_VICII::MEMORY
byte MOS6569_VICII::RASTER
byte MOS6569_VICII::SPRITE0_COLOR
byte MOS6569_VICII::SPRITE0_X
byte MOS6569_VICII::SPRITE0_Y
byte MOS6569_VICII::SPRITE1_COLOR
byte MOS6569_VICII::SPRITE1_X
byte MOS6569_VICII::SPRITE1_Y
byte MOS6569_VICII::SPRITE2_COLOR
byte MOS6569_VICII::SPRITE2_X
byte MOS6569_VICII::SPRITE2_Y
byte MOS6569_VICII::SPRITE3_COLOR
byte MOS6569_VICII::SPRITE3_X
byte MOS6569_VICII::SPRITE3_Y
byte MOS6569_VICII::SPRITE4_COLOR
byte MOS6569_VICII::SPRITE4_X
byte MOS6569_VICII::SPRITE4_Y
byte MOS6569_VICII::SPRITE5_COLOR
byte MOS6569_VICII::SPRITE5_X
byte MOS6569_VICII::SPRITE5_Y
byte MOS6569_VICII::SPRITE6_COLOR
byte MOS6569_VICII::SPRITE6_X
byte MOS6569_VICII::SPRITE6_Y
byte MOS6569_VICII::SPRITE7_COLOR
byte MOS6569_VICII::SPRITE7_X
byte MOS6569_VICII::SPRITE7_Y
byte MOS6569_VICII::SPRITES_BG_COLLISION
byte MOS6569_VICII::SPRITES_COLLISION
byte MOS6569_VICII::SPRITES_ENABLE
byte MOS6569_VICII::SPRITES_EXPAND_X
byte MOS6569_VICII::SPRITES_EXPAND_Y
byte MOS6569_VICII::SPRITES_MC
byte MOS6569_VICII::SPRITES_MCOLOR1
byte MOS6569_VICII::SPRITES_MCOLOR2
byte MOS6569_VICII::SPRITES_PRIORITY
byte MOS6569_VICII::SPRITES_XMSB
byte MOS6581_SID::CH1_ATTACK_DECAY
byte MOS6581_SID::CH1_CONTROL
word MOS6581_SID::CH1_FREQ
word MOS6581_SID::CH1_PULSE_WIDTH
byte MOS6581_SID::CH1_SUSTAIN_RELEASE
byte MOS6581_SID::CH2_ATTACK_DECAY
byte MOS6581_SID::CH2_CONTROL
word MOS6581_SID::CH2_FREQ
word MOS6581_SID::CH2_PULSE_WIDTH
byte MOS6581_SID::CH2_SUSTAIN_RELEASE
byte MOS6581_SID::CH3_ATTACK_DECAY
byte MOS6581_SID::CH3_CONTROL
byte MOS6581_SID::CH3_ENV
word MOS6581_SID::CH3_FREQ
byte MOS6581_SID::CH3_OSC
word MOS6581_SID::CH3_PULSE_WIDTH
byte MOS6581_SID::CH3_SUSTAIN_RELEASE
byte MOS6581_SID::FILTER_CUTOFF_HIGH
byte MOS6581_SID::FILTER_CUTOFF_LOW
byte MOS6581_SID::FILTER_SETUP
byte MOS6581_SID::POT_X
byte MOS6581_SID::POT_Y
byte MOS6581_SID::VOLUME_FILTER_MODE
const byte OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
const byte OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
const byte OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
const byte OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
const byte OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
const byte OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
const byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
const byte OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
const byte OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
const byte OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
const byte SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
byte TIME_OF_DAY::HOURS
byte TIME_OF_DAY::MIN
byte TIME_OF_DAY::SEC
byte TIME_OF_DAY::TENTHS
struct TIME_OF_DAY TOD_ZERO loadstore mem[4] = { TENTHS: 0, SEC: 0, MIN: 0, HOURS: 0 }
void __start()
label __start::@1
label __start::@return
label __start::__init1
byte conio_cursor_x loadstore zp[1]:8 1.8987354544303797E7
byte conio_cursor_y loadstore zp[1]:9 3.404255426382979E8
byte* conio_line_color loadstore zp[2]:12 2.630952500952381E8
byte* conio_line_text loadstore zp[2]:10 2.5402300009195402E8
void cputc(byte cputc::c)
label cputc::@1
label cputc::@2
label cputc::@3
label cputc::@return
byte cputc::c
byte cputc::c#0 reg byte a 2.0000002E7
byte cputc::c#2 reg byte a 20002.0
byte cputc::c#3 reg byte a 1.05005002E8
void cputln()
label cputln::@return
void cputs(to_nomodify byte* cputs::s)
label cputs::@1
label cputs::@2
label cputs::@return
byte cputs::c
byte cputs::c#1 reg byte a 1.0000001E7
to_nomodify byte* cputs::s
to_nomodify byte* cputs::s#0 s zp[2]:4 5000000.5
to_nomodify byte* cputs::s#5 s zp[2]:4 1.5050002E7
to_nomodify byte* cputs::s#6 s zp[2]:4 100001.0
void cscroll()
label cscroll::@1
label cscroll::@2
label cscroll::@3
label cscroll::@4
label cscroll::@5
label cscroll::@return
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte*~ gotoxy::$5 zp[2]:10 2002.0
byte*~ gotoxy::$6 zp[2]:12 2002.0
word~ gotoxy::$7 zp[2]:12 1501.5
word~ gotoxy::$8 zp[2]:17 2002.0
word~ gotoxy::$9 zp[2]:12 2002.0
label gotoxy::@1
label gotoxy::@2
label gotoxy::@3
label gotoxy::@return
word gotoxy::line_offset
word gotoxy::line_offset#0 line_offset zp[2]:12 1001.0
byte gotoxy::x
byte gotoxy::y
byte gotoxy::y#5 reg byte x 667.3333333333334
byte gotoxy::y#6 reg byte x 667.3333333333334
void main()
byte~ main::$6 reg byte a 202.0
label main::@1
label main::@10
label main::@11
label main::@12
label main::@2
label main::@3
label main::@4
label main::@5
label main::@6
label main::@7
label main::@8
label main::@9
label main::@return
word main::i
word main::i#1 i zp[2]:2 202.0
word main::i#2 i zp[2]:2 42.08333333333333
const byte* main::s[7]  = "time: "
const byte* main::s1[5]  = "qwe "
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
label memcpy::@1
label memcpy::@2
label memcpy::@return
void* memcpy::destination
void* memcpy::destination#2 destination zp[2]:17
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:17 1.00000000000001E14
byte* memcpy::dst#2 dst zp[2]:17 1.0003333333333467E14
byte* memcpy::dst#4 dst zp[2]:17 2.00000000002E11
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2 source zp[2]:6
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:6 2.00000000000002E14
byte* memcpy::src#2 src zp[2]:6 1.0002500000000125E14
byte* memcpy::src#4 src zp[2]:6 1.00000000001E11
byte* memcpy::src_end
byte* memcpy::src_end#0 src_end zp[2]:19 1.251250000000025E13
void* memset(void* memset::str , byte memset::c , word memset::num)
label memset::@1
label memset::@2
label memset::@3
label memset::@return
byte memset::c
byte memset::c#4 reg byte x 1.4285714285714428E13
byte* memset::dst
byte* memset::dst#1 dst zp[2]:17 2.00000000000002E14
byte* memset::dst#2 dst zp[2]:17 1.3336666666666834E14
byte* memset::dst#4 dst zp[2]:17 2.00000000002E11
byte* memset::end
byte* memset::end#0 end zp[2]:19 1.6683333333333668E13
word memset::num
void* memset::return
void* memset::str
void* memset::str#3 str zp[2]:17
struct printf_buffer_number printf_buffer loadstore mem[12] = {}
const byte* printf_buffer_number::digits[$b]  = { fill( $b, 0) }
byte printf_buffer_number::sign
byte printf_format_number::justify_left
byte printf_format_number::min_length
byte printf_format_number::radix
byte printf_format_number::sign_always
byte printf_format_number::upper_case
byte printf_format_number::zero_padding
byte printf_format_string::justify_left
byte printf_format_string::min_length
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
label printf_number_buffer::@1
label printf_number_buffer::@2
label printf_number_buffer::@3
label printf_number_buffer::@return
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
const byte* printf_number_buffer::buffer_digits#0 buffer_digits = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 reg byte a 7001.0
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_zero_padding
signed byte printf_number_buffer::len
signed byte printf_number_buffer::padding
void printf_string(byte* printf_string::str , byte printf_string::format_min_length , byte printf_string::format_justify_left)
label printf_string::@1
label printf_string::@return
struct printf_format_string printf_string::format
byte printf_string::format_justify_left
byte printf_string::format_min_length
signed byte printf_string::len
signed byte printf_string::padding
byte* printf_string::str
void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
label printf_uint::@1
label printf_uint::@2
label printf_uint::@return
struct printf_format_number printf_uint::format
byte printf_uint::format_justify_left
byte printf_uint::format_min_length
byte printf_uint::format_radix
byte printf_uint::format_sign_always
byte printf_uint::format_upper_case
byte printf_uint::format_zero_padding
word printf_uint::uvalue
word printf_uint::uvalue#0 uvalue zp[2]:2 367.33333333333337
const byte* tod_buffer[]  = "00:00:00:00"
void tod_init(byte tod_init::tod_TENTHS , byte tod_init::tod_SEC , byte tod_init::tod_MIN , byte tod_init::tod_HOURS)
label tod_init::@return
struct TIME_OF_DAY tod_init::tod
byte tod_init::tod_HOURS
byte tod_init::tod_HOURS#0 reg byte y 37.33333333333333
byte tod_init::tod_MIN
byte tod_init::tod_MIN#0 reg byte x 22.4
byte tod_init::tod_SEC
byte tod_init::tod_SEC#0 tod_SEC zp[1]:14 16.0
byte tod_init::tod_TENTHS
byte tod_init::tod_TENTHS#0 tod_TENTHS zp[1]:15 12.444444444444443
struct TIME_OF_DAY tod_read()
label tod_read::@return
byte tod_read::hours
byte tod_read::mins
struct TIME_OF_DAY tod_read::return
byte tod_read::return_HOURS
byte tod_read::return_HOURS#0 return_HOURS zp[1]:16 12.444444444444443
byte tod_read::return_HOURS#2 reg byte a 5.5
byte tod_read::return_MIN
byte tod_read::return_MIN#0 reg byte a 16.0
byte tod_read::return_MIN#2 return_MIN zp[1]:14 5.5
byte tod_read::return_SEC
byte tod_read::return_SEC#0 reg byte x 22.4
byte tod_read::return_SEC#2 reg byte x 5.5
byte tod_read::return_TENTHS
byte tod_read::return_TENTHS#0 reg byte y 37.33333333333333
byte tod_read::return_TENTHS#2 reg byte y 5.5
byte tod_read::secs
byte tod_read::tenths
byte tod_read::tod_HOURS
byte tod_read::tod_MIN
byte tod_read::tod_SEC
byte tod_read::tod_TENTHS
byte* tod_str(byte tod_str::tod_TENTHS , byte tod_str::tod_SEC , byte tod_str::tod_MIN , byte tod_str::tod_HOURS)
byte~ tod_str::$0 reg byte a 202.0
byte~ tod_str::$1 reg byte a 202.0
byte~ tod_str::$10 reg byte a 202.0
byte~ tod_str::$11 reg byte a 202.0
byte~ tod_str::$12 reg byte a 202.0
byte~ tod_str::$13 reg byte a 202.0
byte~ tod_str::$14 reg byte a 202.0
byte~ tod_str::$15 reg byte a 202.0
byte~ tod_str::$2 reg byte a 202.0
byte~ tod_str::$3 reg byte a 202.0
byte~ tod_str::$4 reg byte a 202.0
byte~ tod_str::$5 reg byte a 202.0
byte~ tod_str::$6 reg byte a 202.0
byte~ tod_str::$7 reg byte a 202.0
byte~ tod_str::$8 reg byte a 202.0
byte~ tod_str::$9 reg byte a 202.0
label tod_str::@return
byte* tod_str::return
struct TIME_OF_DAY tod_str::tod
byte tod_str::tod_HOURS
byte tod_str::tod_HOURS#0 reg byte x 53.25
byte tod_str::tod_MIN
byte tod_str::tod_MIN#0 reg byte y 19.363636363636363
byte tod_str::tod_SEC
byte tod_str::tod_SEC#0 tod_SEC zp[1]:15 11.833333333333332
byte tod_str::tod_TENTHS
byte tod_str::tod_TENTHS#0 tod_TENTHS zp[1]:16 8.52
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 reg byte a 2000002.0
byte~ utoa::$11 reg byte a 20002.0
label utoa::@1
label utoa::@2
label utoa::@3
label utoa::@4
label utoa::@5
label utoa::@6
label utoa::@7
label utoa::@return
byte* utoa::buffer
byte* utoa::buffer#11 buffer zp[2]:6 287143.2857142857
byte* utoa::buffer#14 buffer zp[2]:6 1500001.5
byte* utoa::buffer#3 buffer zp[2]:6 20002.0
byte* utoa::buffer#4 buffer zp[2]:6 2000002.0
byte utoa::digit
byte utoa::digit#1 digit zp[1]:15 2000002.0
byte utoa::digit#2 digit zp[1]:15 285714.5714285714
word utoa::digit_value
word utoa::digit_value#0 digit_value zp[2]:17 600000.6000000001
word* utoa::digit_values
byte utoa::max_digits
const byte utoa::max_digits#1 max_digits = 5
byte utoa::radix
byte utoa::started
byte utoa::started#2 reg byte x 500000.5
byte utoa::started#4 reg byte x 1000001.0
word utoa::value
word utoa::value#0 value zp[2]:4 1000001.0
word utoa::value#1 value zp[2]:4 5501.0
word utoa::value#2 value zp[2]:4 572857.857142857
word utoa::value#6 value zp[2]:4 1500001.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
label utoa_append::@1
label utoa_append::@2
label utoa_append::@3
label utoa_append::@return
byte* utoa_append::buffer
byte* utoa_append::buffer#0 buffer zp[2]:6 1375000.25
byte utoa_append::digit
byte utoa_append::digit#1 reg byte x 1.0000000001E10
byte utoa_append::digit#2 reg byte x 1.00050000015E10
word utoa_append::return
word utoa_append::return#0 return zp[2]:4 2000002.0
word utoa_append::sub
word utoa_append::sub#0 sub zp[2]:17 3.3335000005E9
word utoa_append::value
word utoa_append::value#0 value zp[2]:4 3666667.333333333
word utoa_append::value#1 value zp[2]:4 2.0000000002E10
word utoa_append::value#2 value zp[2]:4 5.001833334166666E9

zp[2]:2 [ main::i#2 main::i#1 printf_uint::uvalue#0 ]
reg byte x [ gotoxy::y#6 gotoxy::y#5 ]
reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 ]
zp[2]:4 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 cputs::s#5 cputs::s#6 cputs::s#0 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[2]:6 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ]
reg byte x [ memset::c#4 ]
zp[1]:8 [ conio_cursor_x ]
zp[1]:9 [ conio_cursor_y ]
zp[2]:10 [ conio_line_text gotoxy::$5 ]
zp[2]:12 [ conio_line_color gotoxy::$6 gotoxy::line_offset#0 gotoxy::$7 gotoxy::$9 ]
reg byte x [ tod_init::tod_MIN#0 ]
reg byte y [ tod_init::tod_HOURS#0 ]
reg byte y [ tod_read::return_TENTHS#2 ]
reg byte x [ tod_read::return_SEC#2 ]
zp[1]:14 [ tod_read::return_MIN#2 tod_init::tod_SEC#0 ]
reg byte a [ tod_read::return_HOURS#2 ]
zp[1]:15 [ tod_str::tod_SEC#0 tod_init::tod_TENTHS#0 utoa::digit#2 utoa::digit#1 ]
reg byte y [ tod_str::tod_MIN#0 ]
reg byte x [ tod_str::tod_HOURS#0 ]
reg byte a [ main::$6 ]
zp[1]:16 [ tod_read::return_HOURS#0 tod_str::tod_TENTHS#0 ]
reg byte a [ tod_read::return_MIN#0 ]
reg byte x [ tod_read::return_SEC#0 ]
reg byte y [ tod_read::return_TENTHS#0 ]
reg byte a [ tod_str::$0 ]
reg byte a [ tod_str::$1 ]
reg byte a [ tod_str::$2 ]
reg byte a [ tod_str::$3 ]
reg byte a [ tod_str::$4 ]
reg byte a [ tod_str::$5 ]
reg byte a [ tod_str::$6 ]
reg byte a [ tod_str::$7 ]
reg byte a [ tod_str::$8 ]
reg byte a [ tod_str::$9 ]
reg byte a [ tod_str::$10 ]
reg byte a [ tod_str::$11 ]
reg byte a [ tod_str::$12 ]
reg byte a [ tod_str::$13 ]
reg byte a [ tod_str::$14 ]
reg byte a [ tod_str::$15 ]
reg byte a [ cputs::c#1 ]
reg byte a [ printf_number_buffer::buffer_sign#0 ]
reg byte a [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:17 [ utoa::digit_value#0 utoa_append::sub#0 gotoxy::$8 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
zp[2]:19 [ memset::end#0 memcpy::src_end#0 ]
mem[12] [ printf_buffer ]
mem[4] [ TOD_ZERO ]


FINAL ASSEMBLER
Score: 160752

  // File Comments
// Tests the speed of printf()
// Functions for performing input and output.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
  .const OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = 8
  // The current cursor y-position
  .label conio_cursor_y = 9
  // The current text cursor line start
  .label conio_line_text = $a
  // The current color cursor line start
  .label conio_line_color = $c
  // __start
__start: {
    // __start::__init1
    // conio_cursor_x = 0
    // [1] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = 0
    // [2] conio_cursor_y = 0 -- vbuz1=vbuc1 
    sta.z conio_cursor_y
    // conio_line_text = CONIO_SCREEN_TEXT
    // [3] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // conio_line_color = CONIO_SCREEN_COLORS
    // [4] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // [5] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [6] call main 
    jsr main
    // __start::@return
    // [7] return 
    rts
}
  // main
main: {
    .label i = 2
    // tod_init(TOD_ZERO)
    // [8] tod_init::tod_TENTHS#0 = *((byte*)&TOD_ZERO) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO
    sta.z tod_init.tod_TENTHS
    // [9] tod_init::tod_SEC#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC
    sta.z tod_init.tod_SEC
    // [10] tod_init::tod_MIN#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN) -- vbuxx=_deref_pbuc1 
    ldx TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN
    // [11] tod_init::tod_HOURS#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS) -- vbuyy=_deref_pbuc1 
    ldy TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS
    // [12] call tod_init 
    jsr tod_init
    // [13] phi from main to main::@1 [phi:main->main::@1]
    // [13] phi main::i#2 = 0 [phi:main->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
    // main::@1
  __b1:
    // for(unsigned int i=0;i<10000;i++)
    // [14] if(main::i#2<$2710) goto main::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>$2710
    bcc __b2
    bne !+
    lda.z i
    cmp #<$2710
    bcc __b2
  !:
    // [15] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // main::@3
    // gotoxy(0, 22)
    // [16] call gotoxy 
    // [51] phi from main::@3 to gotoxy [phi:main::@3->gotoxy]
    // [51] phi gotoxy::y#5 = $16 [phi:main::@3->gotoxy#0] -- vbuxx=vbuc1 
    ldx #$16
    jsr gotoxy
    // [17] phi from main::@3 to main::@6 [phi:main::@3->main::@6]
    // main::@6
    // tod_read()
    // [18] call tod_read 
    jsr tod_read
    // [19] tod_read::return_TENTHS#2 = tod_read::return_TENTHS#0
    // [20] tod_read::return_SEC#2 = tod_read::return_SEC#0
    // [21] tod_read::return_MIN#2 = tod_read::return_MIN#0 -- vbuz1=vbuaa 
    sta.z tod_read.return_MIN
    // [22] tod_read::return_HOURS#2 = tod_read::return_HOURS#0 -- vbuaa=vbuz1 
    lda.z tod_read.return_HOURS
    // main::@7
    // tod_str(tod_read())
    // [23] tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 -- vbuz1=vbuyy 
    sty.z tod_str.tod_TENTHS
    // [24] tod_str::tod_SEC#0 = tod_read::return_SEC#2 -- vbuz1=vbuxx 
    stx.z tod_str.tod_SEC
    // [25] tod_str::tod_MIN#0 = tod_read::return_MIN#2 -- vbuyy=vbuz1 
    ldy.z tod_read.return_MIN
    // [26] tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 -- vbuxx=vbuaa 
    tax
    // [27] call tod_str 
    jsr tod_str
    // [28] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
    // main::@8
    // printf("time: %s",tod_str(tod_read()))
    // [29] call cputs 
    // [96] phi from main::@8 to cputs [phi:main::@8->cputs]
    // [96] phi cputs::s#6 = main::s [phi:main::@8->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    // [30] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
    // main::@9
    // printf("time: %s",tod_str(tod_read()))
    // [31] call printf_string 
    // [104] phi from main::@9 to printf_string [phi:main::@9->printf_string]
    jsr printf_string
    // main::@return
    // }
    // [32] return 
    rts
    // main::@2
  __b2:
    // i&0x7f
    // [33] main::$6 = main::i#2 & $7f -- vbuaa=vwuz1_band_vbuc1 
    lda #$7f
    and.z i
    // if((i&0x7f) == 0)
    // [34] if(main::$6!=0) goto main::@4 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b4
    // [35] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
    // main::@5
    // gotoxy(0,16)
    // [36] call gotoxy 
    // [51] phi from main::@5 to gotoxy [phi:main::@5->gotoxy]
    // [51] phi gotoxy::y#5 = $10 [phi:main::@5->gotoxy#0] -- vbuxx=vbuc1 
    ldx #$10
    jsr gotoxy
    // main::@11
    // printf("%u",i)
    // [37] printf_uint::uvalue#0 = main::i#2
    // [38] call printf_uint 
    // [108] phi from main::@11 to printf_uint [phi:main::@11->printf_uint]
    jsr printf_uint
    // [39] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
    // main::@12
    // gotoxy(0,0)
    // [40] call gotoxy 
    // [51] phi from main::@12 to gotoxy [phi:main::@12->gotoxy]
    // [51] phi gotoxy::y#5 = 0 [phi:main::@12->gotoxy#0] -- vbuxx=vbuc1 
    ldx #0
    jsr gotoxy
    // [41] phi from main::@12 main::@2 to main::@4 [phi:main::@12/main::@2->main::@4]
    // main::@4
  __b4:
    // printf("qwe ")
    // [42] call cputs 
    // [96] phi from main::@4 to cputs [phi:main::@4->cputs]
    // [96] phi cputs::s#6 = main::s1 [phi:main::@4->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    // main::@10
    // for(unsigned int i=0;i<10000;i++)
    // [43] main::i#1 = ++ main::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [13] phi from main::@10 to main::@1 [phi:main::@10->main::@1]
    // [13] phi main::i#2 = main::i#1 [phi:main::@10->main::@1#0] -- register_copy 
    jmp __b1
    s: .text "time: "
    .byte 0
    s1: .text "qwe "
    .byte 0
}
  // tod_init
// Initialize time-of-day clock
// This uses the MOS6526 CIA#1
// tod_init(byte zp($f) tod_TENTHS, byte zp($e) tod_SEC, byte register(X) tod_MIN, byte register(Y) tod_HOURS)
tod_init: {
    .label tod_TENTHS = $f
    .label tod_SEC = $e
    // CIA1->TIMER_A_CONTROL |= 0x80
    // [44] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set 50hz (this assumes PAL!) (bit7=1)
    lda #$80
    ora CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // CIA1->TIMER_B_CONTROL &= 0x7f
    // [45] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Writing TOD clock (bit7=0)
    lda #$7f
    and CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // CIA1->TOD_HOURS = tod.HOURS
    // [46] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) = tod_init::tod_HOURS#0 -- _deref_pbuc1=vbuyy 
    // Reset TOD clock
    // Writing sequence is important. TOD stops when hours is written and starts when 10ths is written.
    sty CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    // CIA1->TOD_MIN = tod.MIN
    // [47] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) = tod_init::tod_MIN#0 -- _deref_pbuc1=vbuxx 
    stx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // CIA1->TOD_SEC = tod.SEC
    // [48] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) = tod_init::tod_SEC#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_SEC
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // CIA1->TOD_10THS = tod.TENTHS
    // [49] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) = tod_init::tod_TENTHS#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_TENTHS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    // tod_init::@return
    // }
    // [50] return 
    rts
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte register(X) y)
gotoxy: {
    .label __5 = $a
    .label __6 = $c
    .label __7 = $c
    .label line_offset = $c
    .label __8 = $11
    .label __9 = $c
    // if(y>CONIO_HEIGHT)
    // [52] if(gotoxy::y#5<$19+1) goto gotoxy::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19+1
    bcc __b2
    // [54] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
    // [54] phi gotoxy::y#6 = 0 [phi:gotoxy->gotoxy::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [53] phi from gotoxy to gotoxy::@3 [phi:gotoxy->gotoxy::@3]
    // gotoxy::@3
    // [54] phi from gotoxy::@3 to gotoxy::@1 [phi:gotoxy::@3->gotoxy::@1]
    // [54] phi gotoxy::y#6 = gotoxy::y#5 [phi:gotoxy::@3->gotoxy::@1#0] -- register_copy 
    // gotoxy::@1
    // gotoxy::@2
  __b2:
    // conio_cursor_x = x
    // [55] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = y
    // [56] conio_cursor_y = gotoxy::y#6 -- vbuz1=vbuxx 
    stx.z conio_cursor_y
    // (unsigned int)y*CONIO_WIDTH
    // [57] gotoxy::$7 = (word)gotoxy::y#6 -- vwuz1=_word_vbuxx 
    txa
    sta.z __7
    lda #0
    sta.z __7+1
    // line_offset = (unsigned int)y*CONIO_WIDTH
    // [58] gotoxy::$8 = gotoxy::$7 << 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [59] gotoxy::$9 = gotoxy::$8 + gotoxy::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [60] gotoxy::line_offset#0 = gotoxy::$9 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    // CONIO_SCREEN_TEXT + line_offset
    // [61] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z line_offset
    clc
    adc #<DEFAULT_SCREEN
    sta.z __5
    lda.z line_offset+1
    adc #>DEFAULT_SCREEN
    sta.z __5+1
    // conio_line_text = CONIO_SCREEN_TEXT + line_offset
    // [62] conio_line_text = gotoxy::$5
    // CONIO_SCREEN_COLORS + line_offset
    // [63] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __6
    adc #<COLORRAM
    sta.z __6
    lda.z __6+1
    adc #>COLORRAM
    sta.z __6+1
    // conio_line_color = CONIO_SCREEN_COLORS + line_offset
    // [64] conio_line_color = gotoxy::$6
    // gotoxy::@return
    // }
    // [65] return 
    rts
}
  // tod_read
// Read time of day
tod_read: {
    .label return_HOURS = $10
    .label return_MIN = $e
    // hours = CIA1->TOD_HOURS
    // [66] tod_read::return_HOURS#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) -- vbuz1=_deref_pbuc1 
    // Reading sequence is important. TOD latches on reading hours until 10ths is read.
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    sta.z return_HOURS
    // mins = CIA1->TOD_MIN
    // [67] tod_read::return_MIN#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) -- vbuaa=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // secs = CIA1->TOD_SEC
    // [68] tod_read::return_SEC#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) -- vbuxx=_deref_pbuc1 
    ldx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // tenths = CIA1->TOD_10THS
    // [69] tod_read::return_TENTHS#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) -- vbuyy=_deref_pbuc1 
    ldy CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    // tod_read::@return
    // }
    // [70] return 
    rts
}
  // tod_str
// Convert time of day to a human-readable string "hh:mm:ss:10"
// tod_str(byte zp($10) tod_TENTHS, byte zp($f) tod_SEC, byte register(Y) tod_MIN, byte register(X) tod_HOURS)
tod_str: {
    .label tod_TENTHS = $10
    .label tod_SEC = $f
    // tod.HOURS>>4
    // [71] tod_str::$0 = tod_str::tod_HOURS#0 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.HOURS>>4)
    // [72] tod_str::$1 = '0' + tod_str::$0 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[0] = '0'+(tod.HOURS>>4)
    // [73] *tod_buffer = tod_str::$1 -- _deref_pbuc1=vbuaa 
    sta tod_buffer
    // tod.HOURS&0x0f
    // [74] tod_str::$2 = tod_str::tod_HOURS#0 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // '0'+(tod.HOURS&0x0f)
    // [75] tod_str::$3 = '0' + tod_str::$2 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[1] = '0'+(tod.HOURS&0x0f)
    // [76] *(tod_buffer+1) = tod_str::$3 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+1
    // tod.MIN>>4
    // [77] tod_str::$4 = tod_str::tod_MIN#0 >> 4 -- vbuaa=vbuyy_ror_4 
    tya
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.MIN>>4)
    // [78] tod_str::$5 = '0' + tod_str::$4 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[3] = '0'+(tod.MIN>>4)
    // [79] *(tod_buffer+3) = tod_str::$5 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+3
    // tod.MIN&0x0f
    // [80] tod_str::$6 = tod_str::tod_MIN#0 & $f -- vbuaa=vbuyy_band_vbuc1 
    tya
    and #$f
    // '0'+(tod.MIN&0x0f)
    // [81] tod_str::$7 = '0' + tod_str::$6 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[4] = '0'+(tod.MIN&0x0f)
    // [82] *(tod_buffer+4) = tod_str::$7 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+4
    // tod.SEC>>4
    // [83] tod_str::$8 = tod_str::tod_SEC#0 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_SEC
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.SEC>>4)
    // [84] tod_str::$9 = '0' + tod_str::$8 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[6] = '0'+(tod.SEC>>4)
    // [85] *(tod_buffer+6) = tod_str::$9 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+6
    // tod.SEC&0x0f
    // [86] tod_str::$10 = tod_str::tod_SEC#0 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_SEC
    // '0'+(tod.SEC&0x0f)
    // [87] tod_str::$11 = '0' + tod_str::$10 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[7] = '0'+(tod.SEC&0x0f)
    // [88] *(tod_buffer+7) = tod_str::$11 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+7
    // tod.TENTHS>>4
    // [89] tod_str::$12 = tod_str::tod_TENTHS#0 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_TENTHS
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.TENTHS>>4)
    // [90] tod_str::$13 = '0' + tod_str::$12 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[9] = '0'+(tod.TENTHS>>4)
    // [91] *(tod_buffer+9) = tod_str::$13 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+9
    // tod.TENTHS&0x0f
    // [92] tod_str::$14 = tod_str::tod_TENTHS#0 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_TENTHS
    // '0'+(tod.TENTHS&0x0f)
    // [93] tod_str::$15 = '0' + tod_str::$14 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[10] = '0'+(tod.TENTHS&0x0f)
    // [94] *(tod_buffer+$a) = tod_str::$15 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+$a
    // tod_str::@return
    // }
    // [95] return 
    rts
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(4) s)
cputs: {
    .label s = 4
    // [97] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
    // [97] phi cputs::s#5 = cputs::s#6 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    // cputs::@1
  __b1:
    // while(c=*s++)
    // [98] cputs::c#1 = *cputs::s#5 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [99] cputs::s#0 = ++ cputs::s#5 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [100] if(0!=cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    // cputs::@return
    // }
    // [101] return 
    rts
    // cputs::@2
  __b2:
    // cputc(c)
    // [102] cputc::c#0 = cputs::c#1
    // [103] call cputc 
    // [115] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
    // [115] phi cputc::c#3 = cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length 
printf_string: {
    // [105] phi from printf_string to printf_string::@1 [phi:printf_string->printf_string::@1]
    // printf_string::@1
    // cputs(str)
    // [106] call cputs 
    // [96] phi from printf_string::@1 to cputs [phi:printf_string::@1->cputs]
    // [96] phi cputs::s#6 = tod_buffer [phi:printf_string::@1->cputs#0] -- pbuz1=pbuc1 
    lda #<tod_buffer
    sta.z cputs.s
    lda #>tod_buffer
    sta.z cputs.s+1
    jsr cputs
    // printf_string::@return
    // }
    // [107] return 
    rts
}
  // printf_uint
// Print an unsigned int using a specific format
// printf_uint(word zp(2) uvalue)
printf_uint: {
    .label uvalue = 2
    // printf_uint::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [109] *((byte*)&printf_buffer) = 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // utoa(uvalue, printf_buffer.digits, format.radix)
    // [110] utoa::value#1 = printf_uint::uvalue#0 -- vwuz1=vwuz2 
    lda.z uvalue
    sta.z utoa.value
    lda.z uvalue+1
    sta.z utoa.value+1
    // [111] call utoa 
  // Format number into buffer
    // [126] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
    jsr utoa
    // printf_uint::@2
    // printf_number_buffer(printf_buffer, format)
    // [112] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer) -- vbuaa=_deref_pbuc1 
    lda printf_buffer
    // [113] call printf_number_buffer 
  // Print using format
    // [147] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
    jsr printf_number_buffer
    // printf_uint::@return
    // }
    // [114] return 
    rts
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // if(c=='\n')
    // [116] if(cputc::c#3==' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1
    // cputc::@2
    // conio_line_text[conio_cursor_x] = c
    // [117] conio_line_text[conio_cursor_x] = cputc::c#3 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // conio_line_color[conio_cursor_x] = conio_textcolor
    // [118] conio_line_color[conio_cursor_x] = LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    sta (conio_line_color),y
    // if(++conio_cursor_x==CONIO_WIDTH)
    // [119] conio_cursor_x = ++ conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [120] if(conio_cursor_x!=$28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [121] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
    // cputc::@3
    // cputln()
    // [122] call cputln 
    jsr cputln
    // cputc::@return
  __breturn:
    // }
    // [123] return 
    rts
    // [124] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
    // cputc::@1
  __b1:
    // cputln()
    // [125] call cputln 
    jsr cputln
    rts
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp(4) value, byte* zp(6) buffer)
utoa: {
    .const max_digits = 5
    .label digit_value = $11
    .label buffer = 6
    .label digit = $f
    .label value = 4
    // [127] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
    // [127] phi utoa::buffer#11 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [127] phi utoa::started#2 = 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [127] phi utoa::value#2 = utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [127] phi utoa::digit#2 = 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    txa
    sta.z digit
    // utoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [128] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    // utoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [129] utoa::$11 = (byte)utoa::value#2 -- vbuaa=_byte_vwuz1 
    lda.z value
    // [130] *utoa::buffer#11 = DIGITS[utoa::$11] -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [131] utoa::buffer#3 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [132] *utoa::buffer#3 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // utoa::@return
    // }
    // [133] return 
    rts
    // utoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [134] utoa::$10 = utoa::digit#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [135] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // if (started || value >= digit_value)
    // [136] if(0!=utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    // utoa::@7
    // [137] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [138] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
    // [138] phi utoa::buffer#14 = utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [138] phi utoa::started#4 = utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [138] phi utoa::value#6 = utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    // utoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [139] utoa::digit#1 = ++ utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [127] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
    // [127] phi utoa::buffer#11 = utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [127] phi utoa::started#2 = utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [127] phi utoa::value#2 = utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [127] phi utoa::digit#2 = utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // utoa_append(buffer++, value, digit_value)
    // [140] utoa_append::buffer#0 = utoa::buffer#11
    // [141] utoa_append::value#0 = utoa::value#2
    // [142] utoa_append::sub#0 = utoa::digit_value#0
    // [143] call utoa_append 
    // [160] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
    jsr utoa_append
    // utoa_append(buffer++, value, digit_value)
    // [144] utoa_append::return#0 = utoa_append::value#2
    // utoa::@6
    // value = utoa_append(buffer++, value, digit_value)
    // [145] utoa::value#0 = utoa_append::return#0
    // value = utoa_append(buffer++, value, digit_value);
    // [146] utoa::buffer#4 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [138] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
    // [138] phi utoa::buffer#14 = utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [138] phi utoa::started#4 = 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [138] phi utoa::value#6 = utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte register(A) buffer_sign)
printf_number_buffer: {
    .label buffer_digits = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    // printf_number_buffer::@1
    // if(buffer.sign)
    // [148] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b2
    // printf_number_buffer::@3
    // cputc(buffer.sign)
    // [149] cputc::c#2 = printf_number_buffer::buffer_sign#0
    // [150] call cputc 
    // [115] phi from printf_number_buffer::@3 to cputc [phi:printf_number_buffer::@3->cputc]
    // [115] phi cputc::c#3 = cputc::c#2 [phi:printf_number_buffer::@3->cputc#0] -- register_copy 
    jsr cputc
    // [151] phi from printf_number_buffer::@1 printf_number_buffer::@3 to printf_number_buffer::@2 [phi:printf_number_buffer::@1/printf_number_buffer::@3->printf_number_buffer::@2]
    // printf_number_buffer::@2
  __b2:
    // cputs(buffer.digits)
    // [152] call cputs 
    // [96] phi from printf_number_buffer::@2 to cputs [phi:printf_number_buffer::@2->cputs]
    // [96] phi cputs::s#6 = printf_number_buffer::buffer_digits#0 [phi:printf_number_buffer::@2->cputs#0] -- pbuz1=pbuc1 
    lda #<buffer_digits
    sta.z cputs.s
    lda #>buffer_digits
    sta.z cputs.s+1
    jsr cputs
    // printf_number_buffer::@return
    // }
    // [153] return 
    rts
}
  // cputln
// Print a newline
cputln: {
    // conio_line_text +=  CONIO_WIDTH
    // [154] conio_line_text = conio_line_text + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // conio_line_color += CONIO_WIDTH
    // [155] conio_line_color = conio_line_color + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // conio_cursor_x = 0
    // [156] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y++;
    // [157] conio_cursor_y = ++ conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [158] call cscroll 
    jsr cscroll
    // cputln::@return
    // }
    // [159] return 
    rts
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp(6) buffer, word zp(4) value, word zp($11) sub)
utoa_append: {
    .label buffer = 6
    .label value = 4
    .label sub = $11
    .label return = 4
    // [161] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
    // [161] phi utoa_append::digit#2 = 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [161] phi utoa_append::value#2 = utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    // utoa_append::@1
  __b1:
    // while (value >= sub)
    // [162] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    // utoa_append::@3
    // *buffer = DIGITS[digit]
    // [163] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // utoa_append::@return
    // }
    // [164] return 
    rts
    // utoa_append::@2
  __b2:
    // digit++;
    // [165] utoa_append::digit#1 = ++ utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // value -= sub
    // [166] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [161] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
    // [161] phi utoa_append::digit#2 = utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [161] phi utoa_append::value#2 = utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // if(conio_cursor_y==CONIO_HEIGHT)
    // [167] if(conio_cursor_y!=$19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [168] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
    // cscroll::@1
    // memcpy(CONIO_SCREEN_TEXT, CONIO_SCREEN_TEXT+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [169] call memcpy 
    // [180] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
    // [180] phi memcpy::destination#2 = (void*)DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [180] phi memcpy::source#2 = (void*)DEFAULT_SCREEN+$28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [170] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
    // cscroll::@2
    // memcpy(CONIO_SCREEN_COLORS, CONIO_SCREEN_COLORS+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [171] call memcpy 
    // [180] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
    // [180] phi memcpy::destination#2 = (void*)COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [180] phi memcpy::source#2 = (void*)COLORRAM+$28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [172] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
    // cscroll::@3
    // memset(CONIO_SCREEN_TEXT+CONIO_BYTES-CONIO_WIDTH, ' ', CONIO_WIDTH)
    // [173] call memset 
    // [190] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
    // [190] phi memset::c#4 = ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [190] phi memset::str#3 = (void*)DEFAULT_SCREEN+(word)$19*$28-$28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [174] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
    // cscroll::@4
    // memset(CONIO_SCREEN_COLORS+CONIO_BYTES-CONIO_WIDTH, conio_textcolor, CONIO_WIDTH)
    // [175] call memset 
    // [190] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
    // [190] phi memset::c#4 = LIGHT_BLUE [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #LIGHT_BLUE
    // [190] phi memset::str#3 = (void*)COLORRAM+(word)$19*$28-$28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // cscroll::@5
    // conio_line_text -= CONIO_WIDTH
    // [176] conio_line_text = conio_line_text - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // conio_line_color -= CONIO_WIDTH
    // [177] conio_line_color = conio_line_color - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // conio_cursor_y--;
    // [178] conio_cursor_y = -- conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    // cscroll::@return
  __breturn:
    // }
    // [179] return 
    rts
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($11) destination, void* zp(6) source)
memcpy: {
    .label src_end = $13
    .label dst = $11
    .label src = 6
    .label source = 6
    .label destination = $11
    // src_end = (char*)source+num
    // [181] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [182] memcpy::src#4 = (byte*)memcpy::source#2
    // [183] memcpy::dst#4 = (byte*)memcpy::destination#2
    // [184] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
    // [184] phi memcpy::dst#2 = memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [184] phi memcpy::src#2 = memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [185] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    // memcpy::@return
    // }
    // [186] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [187] *memcpy::dst#2 = *memcpy::src#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [188] memcpy::dst#1 = ++ memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [189] memcpy::src#1 = ++ memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($11) str, byte register(X) c)
memset: {
    .label end = $13
    .label dst = $11
    .label str = $11
    // memset::@1
    // end = (char*)str + num
    // [191] memset::end#0 = (byte*)memset::str#3 + $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [192] memset::dst#4 = (byte*)memset::str#3
    // [193] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [193] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [194] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
    // }
    // [195] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [196] *memset::dst#2 = memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [197] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // The buffer used by tod_str()
  tod_buffer: .text "00:00:00:00"
  .byte 0
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0
  // Time of Day 00:00:00:00
  TOD_ZERO: .byte 0, 0, 0, 0

