Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void bitmap_init(byte* bitmap_init::bitmap)
bitmap_init: scope:[bitmap_init]  from main
  bitmap_init::bitmap#2 = phi( main/bitmap_init::bitmap#0 )
  bitmap_init::bits#0 = $80
  bitmap_init::x#0 = 0
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  bitmap_init::bits#3 = phi( bitmap_init/bitmap_init::bits#0, bitmap_init::@2/bitmap_init::bits#4 )
  bitmap_init::bitmap#1 = phi( bitmap_init/bitmap_init::bitmap#2, bitmap_init::@2/bitmap_init::bitmap#3 )
  bitmap_init::x#2 = phi( bitmap_init/bitmap_init::x#0, bitmap_init::@2/bitmap_init::x#1 )
  bitmap_init::$0 = bitmap_init::x#2 & $f8
  bitmap_plot_xlo[bitmap_init::x#2] = bitmap_init::$0
  bitmap_init::$1 = > bitmap_init::bitmap#1
  bitmap_plot_xhi[bitmap_init::x#2] = bitmap_init::$1
  bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3
  bitmap_init::$2 = bitmap_init::bits#3 >> 1
  bitmap_init::bits#1 = bitmap_init::$2
  bitmap_init::$3 = bitmap_init::bits#1 == 0
  bitmap_init::$4 = ! bitmap_init::$3
  if(bitmap_init::$4) goto bitmap_init::@2
  to:bitmap_init::@3
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@3
  bitmap_init::bits#4 = phi( bitmap_init::@1/bitmap_init::bits#1, bitmap_init::@3/bitmap_init::bits#2 )
  bitmap_init::bitmap#3 = phi( bitmap_init::@1/bitmap_init::bitmap#1, bitmap_init::@3/bitmap_init::bitmap#4 )
  bitmap_init::x#3 = phi( bitmap_init::@1/bitmap_init::x#2, bitmap_init::@3/bitmap_init::x#4 )
  bitmap_init::x#1 = bitmap_init::x#3 + rangenext(0,$ff)
  bitmap_init::$5 = bitmap_init::x#1 != rangelast(0,$ff)
  if(bitmap_init::$5) goto bitmap_init::@1
  to:bitmap_init::@4
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@1
  bitmap_init::bitmap#4 = phi( bitmap_init::@1/bitmap_init::bitmap#1 )
  bitmap_init::x#4 = phi( bitmap_init::@1/bitmap_init::x#2 )
  bitmap_init::bits#2 = $80
  to:bitmap_init::@2
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@2
  bitmap_init::yoffs#0 = (byte*)0
  bitmap_init::y#0 = 0
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@4 bitmap_init::@6
  bitmap_init::yoffs#2 = phi( bitmap_init::@4/bitmap_init::yoffs#0, bitmap_init::@6/bitmap_init::yoffs#4 )
  bitmap_init::y#2 = phi( bitmap_init::@4/bitmap_init::y#0, bitmap_init::@6/bitmap_init::y#1 )
  bitmap_init::$6 = bitmap_init::y#2 & 7
  bitmap_init::$7 = < bitmap_init::yoffs#2
  bitmap_init::$8 = bitmap_init::$6 | bitmap_init::$7
  bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$8
  bitmap_init::$9 = > bitmap_init::yoffs#2
  bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$9
  bitmap_init::$10 = bitmap_init::y#2 & 7
  bitmap_init::$11 = bitmap_init::$10 == 7
  bitmap_init::$12 = ! bitmap_init::$11
  if(bitmap_init::$12) goto bitmap_init::@6
  to:bitmap_init::@7
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@5 bitmap_init::@7
  bitmap_init::yoffs#4 = phi( bitmap_init::@5/bitmap_init::yoffs#2, bitmap_init::@7/bitmap_init::yoffs#1 )
  bitmap_init::y#3 = phi( bitmap_init::@5/bitmap_init::y#2, bitmap_init::@7/bitmap_init::y#4 )
  bitmap_init::y#1 = bitmap_init::y#3 + rangenext(0,$ff)
  bitmap_init::$14 = bitmap_init::y#1 != rangelast(0,$ff)
  if(bitmap_init::$14) goto bitmap_init::@5
  to:bitmap_init::@return
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@5
  bitmap_init::y#4 = phi( bitmap_init::@5/bitmap_init::y#2 )
  bitmap_init::yoffs#3 = phi( bitmap_init::@5/bitmap_init::yoffs#2 )
  bitmap_init::$13 = bitmap_init::yoffs#3 + $28*8
  bitmap_init::yoffs#1 = bitmap_init::$13
  to:bitmap_init::@6
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@6
  return 
  to:@return

void bitmap_clear()
bitmap_clear: scope:[bitmap_clear]  from main::@2
  bitmap_clear::bitmap#0 = (byte*){ bitmap_plot_xhi[0], bitmap_plot_xlo[0] }
  bitmap_clear::y#0 = 0
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  bitmap_clear::y#4 = phi( bitmap_clear/bitmap_clear::y#0, bitmap_clear::@3/bitmap_clear::y#1 )
  bitmap_clear::bitmap#3 = phi( bitmap_clear/bitmap_clear::bitmap#0, bitmap_clear::@3/bitmap_clear::bitmap#4 )
  bitmap_clear::x#0 = 0
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  bitmap_clear::y#3 = phi( bitmap_clear::@1/bitmap_clear::y#4, bitmap_clear::@2/bitmap_clear::y#3 )
  bitmap_clear::x#2 = phi( bitmap_clear::@1/bitmap_clear::x#0, bitmap_clear::@2/bitmap_clear::x#1 )
  bitmap_clear::bitmap#2 = phi( bitmap_clear::@1/bitmap_clear::bitmap#3, bitmap_clear::@2/bitmap_clear::bitmap#1 )
  *bitmap_clear::bitmap#2 = 0
  bitmap_clear::bitmap#1 = ++ bitmap_clear::bitmap#2
  bitmap_clear::x#1 = bitmap_clear::x#2 + rangenext(0,$c7)
  bitmap_clear::$0 = bitmap_clear::x#1 != rangelast(0,$c7)
  if(bitmap_clear::$0) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  bitmap_clear::bitmap#4 = phi( bitmap_clear::@2/bitmap_clear::bitmap#1 )
  bitmap_clear::y#2 = phi( bitmap_clear::@2/bitmap_clear::y#3 )
  bitmap_clear::y#1 = bitmap_clear::y#2 + rangenext(0,$27)
  bitmap_clear::$1 = bitmap_clear::y#1 != rangelast(0,$27)
  if(bitmap_clear::$1) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  return 
  to:@return

void bitmap_plot(byte bitmap_plot::x , byte bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from bitmap_line_xdyd::@1 bitmap_line_xdyi::@1 bitmap_line_ydxd::@1 bitmap_line_ydxi::@1
  bitmap_plot::y#4 = phi( bitmap_line_xdyd::@1/bitmap_plot::y#1, bitmap_line_xdyi::@1/bitmap_plot::y#0, bitmap_line_ydxd::@1/bitmap_plot::y#3, bitmap_line_ydxi::@1/bitmap_plot::y#2 )
  bitmap_plot::x#4 = phi( bitmap_line_xdyd::@1/bitmap_plot::x#1, bitmap_line_xdyi::@1/bitmap_plot::x#0, bitmap_line_ydxd::@1/bitmap_plot::x#3, bitmap_line_ydxi::@1/bitmap_plot::x#2 )
  bitmap_plot::plotter_x#0 = (word){ bitmap_plot_xhi[bitmap_plot::x#4], bitmap_plot_xlo[bitmap_plot::x#4] }
  bitmap_plot::plotter_y#0 = (word){ bitmap_plot_yhi[bitmap_plot::y#4], bitmap_plot_ylo[bitmap_plot::y#4] }
  bitmap_plot::$0 = bitmap_plot::plotter_x#0 + bitmap_plot::plotter_y#0
  bitmap_plot::plotter#0 = ((byte*)) bitmap_plot::$0
  bitmap_plot::$1 = *bitmap_plot::plotter#0 | bitmap_plot_bit[bitmap_plot::x#4]
  *bitmap_plot::plotter#0 = bitmap_plot::$1
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  return 
  to:@return

void bitmap_line(byte bitmap_line::x0 , byte bitmap_line::x1 , byte bitmap_line::y0 , byte bitmap_line::y1)
bitmap_line: scope:[bitmap_line]  from lines::@2
  bitmap_line::y1#13 = phi( lines::@2/bitmap_line::y1#0 )
  bitmap_line::y0#13 = phi( lines::@2/bitmap_line::y0#0 )
  bitmap_line::x1#1 = phi( lines::@2/bitmap_line::x1#0 )
  bitmap_line::x0#1 = phi( lines::@2/bitmap_line::x0#0 )
  bitmap_line::xd#0 = 0
  bitmap_line::yd#0 = 0
  bitmap_line::$0 = bitmap_line::x0#1 < bitmap_line::x1#1
  if(bitmap_line::$0) goto bitmap_line::@1
  to:bitmap_line::@2
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line
  bitmap_line::y1#1 = phi( bitmap_line/bitmap_line::y1#13 )
  bitmap_line::y0#1 = phi( bitmap_line/bitmap_line::y0#13 )
  bitmap_line::x0#2 = phi( bitmap_line/bitmap_line::x0#1 )
  bitmap_line::x1#2 = phi( bitmap_line/bitmap_line::x1#1 )
  bitmap_line::$11 = bitmap_line::x1#2 - bitmap_line::x0#2
  bitmap_line::xd#1 = bitmap_line::$11
  bitmap_line::$12 = bitmap_line::y0#1 < bitmap_line::y1#1
  if(bitmap_line::$12) goto bitmap_line::@11
  to:bitmap_line::@5
bitmap_line::@2: scope:[bitmap_line]  from bitmap_line
  bitmap_line::y1#2 = phi( bitmap_line/bitmap_line::y1#13 )
  bitmap_line::y0#2 = phi( bitmap_line/bitmap_line::y0#13 )
  bitmap_line::x1#3 = phi( bitmap_line/bitmap_line::x1#1 )
  bitmap_line::x0#3 = phi( bitmap_line/bitmap_line::x0#1 )
  bitmap_line::$1 = bitmap_line::x0#3 - bitmap_line::x1#3
  bitmap_line::xd#2 = bitmap_line::$1
  bitmap_line::$2 = bitmap_line::y0#2 < bitmap_line::y1#2
  if(bitmap_line::$2) goto bitmap_line::@7
  to:bitmap_line::@3
bitmap_line::@7: scope:[bitmap_line]  from bitmap_line::@2
  bitmap_line::x0#11 = phi( bitmap_line::@2/bitmap_line::x0#3 )
  bitmap_line::x1#11 = phi( bitmap_line::@2/bitmap_line::x1#3 )
  bitmap_line::xd#3 = phi( bitmap_line::@2/bitmap_line::xd#2 )
  bitmap_line::y0#3 = phi( bitmap_line::@2/bitmap_line::y0#2 )
  bitmap_line::y1#3 = phi( bitmap_line::@2/bitmap_line::y1#2 )
  bitmap_line::$7 = bitmap_line::y1#3 - bitmap_line::y0#3
  bitmap_line::yd#1 = bitmap_line::$7
  bitmap_line::$8 = bitmap_line::yd#1 < bitmap_line::xd#3
  if(bitmap_line::$8) goto bitmap_line::@9
  to:bitmap_line::@10
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line::@2
  bitmap_line::x0#10 = phi( bitmap_line::@2/bitmap_line::x0#3 )
  bitmap_line::x1#10 = phi( bitmap_line::@2/bitmap_line::x1#3 )
  bitmap_line::xd#4 = phi( bitmap_line::@2/bitmap_line::xd#2 )
  bitmap_line::y1#4 = phi( bitmap_line::@2/bitmap_line::y1#2 )
  bitmap_line::y0#4 = phi( bitmap_line::@2/bitmap_line::y0#2 )
  bitmap_line::$3 = bitmap_line::y0#4 - bitmap_line::y1#4
  bitmap_line::yd#2 = bitmap_line::$3
  bitmap_line::$4 = bitmap_line::yd#2 < bitmap_line::xd#4
  if(bitmap_line::$4) goto bitmap_line::@8
  to:bitmap_line::@4
bitmap_line::@8: scope:[bitmap_line]  from bitmap_line::@3
  bitmap_line::yd#5 = phi( bitmap_line::@3/bitmap_line::yd#2 )
  bitmap_line::xd#5 = phi( bitmap_line::@3/bitmap_line::xd#4 )
  bitmap_line::x0#4 = phi( bitmap_line::@3/bitmap_line::x0#10 )
  bitmap_line::y1#5 = phi( bitmap_line::@3/bitmap_line::y1#4 )
  bitmap_line::x1#4 = phi( bitmap_line::@3/bitmap_line::x1#10 )
  bitmap_line_xdyi::x#0 = bitmap_line::x1#4
  bitmap_line_xdyi::y#0 = bitmap_line::y1#5
  bitmap_line_xdyi::x1#0 = bitmap_line::x0#4
  bitmap_line_xdyi::xd#0 = bitmap_line::xd#5
  bitmap_line_xdyi::yd#0 = bitmap_line::yd#5
  call bitmap_line_xdyi 
  to:bitmap_line::@15
bitmap_line::@15: scope:[bitmap_line]  from bitmap_line::@8
  to:bitmap_line::@return
bitmap_line::@4: scope:[bitmap_line]  from bitmap_line::@3
  bitmap_line::xd#6 = phi( bitmap_line::@3/bitmap_line::xd#4 )
  bitmap_line::yd#6 = phi( bitmap_line::@3/bitmap_line::yd#2 )
  bitmap_line::y0#5 = phi( bitmap_line::@3/bitmap_line::y0#4 )
  bitmap_line::x1#5 = phi( bitmap_line::@3/bitmap_line::x1#10 )
  bitmap_line::y1#6 = phi( bitmap_line::@3/bitmap_line::y1#4 )
  bitmap_line_ydxi::y#0 = bitmap_line::y1#6
  bitmap_line_ydxi::x#0 = bitmap_line::x1#5
  bitmap_line_ydxi::y1#0 = bitmap_line::y0#5
  bitmap_line_ydxi::yd#0 = bitmap_line::yd#6
  bitmap_line_ydxi::xd#0 = bitmap_line::xd#6
  call bitmap_line_ydxi 
  to:bitmap_line::@16
bitmap_line::@16: scope:[bitmap_line]  from bitmap_line::@4
  to:bitmap_line::@return
bitmap_line::@9: scope:[bitmap_line]  from bitmap_line::@7
  bitmap_line::yd#7 = phi( bitmap_line::@7/bitmap_line::yd#1 )
  bitmap_line::xd#7 = phi( bitmap_line::@7/bitmap_line::xd#3 )
  bitmap_line::x0#5 = phi( bitmap_line::@7/bitmap_line::x0#11 )
  bitmap_line::y1#7 = phi( bitmap_line::@7/bitmap_line::y1#3 )
  bitmap_line::x1#6 = phi( bitmap_line::@7/bitmap_line::x1#11 )
  bitmap_line_xdyd::x#0 = bitmap_line::x1#6
  bitmap_line_xdyd::y#0 = bitmap_line::y1#7
  bitmap_line_xdyd::x1#0 = bitmap_line::x0#5
  bitmap_line_xdyd::xd#0 = bitmap_line::xd#7
  bitmap_line_xdyd::yd#0 = bitmap_line::yd#7
  call bitmap_line_xdyd 
  to:bitmap_line::@17
bitmap_line::@17: scope:[bitmap_line]  from bitmap_line::@9
  to:bitmap_line::@return
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@7
  bitmap_line::xd#8 = phi( bitmap_line::@7/bitmap_line::xd#3 )
  bitmap_line::yd#8 = phi( bitmap_line::@7/bitmap_line::yd#1 )
  bitmap_line::y1#8 = phi( bitmap_line::@7/bitmap_line::y1#3 )
  bitmap_line::x0#6 = phi( bitmap_line::@7/bitmap_line::x0#11 )
  bitmap_line::y0#6 = phi( bitmap_line::@7/bitmap_line::y0#3 )
  bitmap_line_ydxd::y#0 = bitmap_line::y0#6
  bitmap_line_ydxd::x#0 = bitmap_line::x0#6
  bitmap_line_ydxd::y1#0 = bitmap_line::y1#8
  bitmap_line_ydxd::yd#0 = bitmap_line::yd#8
  bitmap_line_ydxd::xd#0 = bitmap_line::xd#8
  call bitmap_line_ydxd 
  to:bitmap_line::@18
bitmap_line::@18: scope:[bitmap_line]  from bitmap_line::@10
  to:bitmap_line::@return
bitmap_line::@11: scope:[bitmap_line]  from bitmap_line::@1
  bitmap_line::x1#13 = phi( bitmap_line::@1/bitmap_line::x1#2 )
  bitmap_line::x0#13 = phi( bitmap_line::@1/bitmap_line::x0#2 )
  bitmap_line::xd#9 = phi( bitmap_line::@1/bitmap_line::xd#1 )
  bitmap_line::y0#7 = phi( bitmap_line::@1/bitmap_line::y0#1 )
  bitmap_line::y1#9 = phi( bitmap_line::@1/bitmap_line::y1#1 )
  bitmap_line::$17 = bitmap_line::y1#9 - bitmap_line::y0#7
  bitmap_line::yd#3 = bitmap_line::$17
  bitmap_line::$18 = bitmap_line::yd#3 < bitmap_line::xd#9
  if(bitmap_line::$18) goto bitmap_line::@13
  to:bitmap_line::@14
bitmap_line::@5: scope:[bitmap_line]  from bitmap_line::@1
  bitmap_line::x1#12 = phi( bitmap_line::@1/bitmap_line::x1#2 )
  bitmap_line::x0#12 = phi( bitmap_line::@1/bitmap_line::x0#2 )
  bitmap_line::xd#10 = phi( bitmap_line::@1/bitmap_line::xd#1 )
  bitmap_line::y1#10 = phi( bitmap_line::@1/bitmap_line::y1#1 )
  bitmap_line::y0#8 = phi( bitmap_line::@1/bitmap_line::y0#1 )
  bitmap_line::$13 = bitmap_line::y0#8 - bitmap_line::y1#10
  bitmap_line::yd#4 = bitmap_line::$13
  bitmap_line::$14 = bitmap_line::yd#4 < bitmap_line::xd#10
  if(bitmap_line::$14) goto bitmap_line::@12
  to:bitmap_line::@6
bitmap_line::@12: scope:[bitmap_line]  from bitmap_line::@5
  bitmap_line::yd#9 = phi( bitmap_line::@5/bitmap_line::yd#4 )
  bitmap_line::xd#11 = phi( bitmap_line::@5/bitmap_line::xd#10 )
  bitmap_line::x1#7 = phi( bitmap_line::@5/bitmap_line::x1#12 )
  bitmap_line::y0#9 = phi( bitmap_line::@5/bitmap_line::y0#8 )
  bitmap_line::x0#7 = phi( bitmap_line::@5/bitmap_line::x0#12 )
  bitmap_line_xdyd::x#1 = bitmap_line::x0#7
  bitmap_line_xdyd::y#1 = bitmap_line::y0#9
  bitmap_line_xdyd::x1#1 = bitmap_line::x1#7
  bitmap_line_xdyd::xd#1 = bitmap_line::xd#11
  bitmap_line_xdyd::yd#1 = bitmap_line::yd#9
  call bitmap_line_xdyd 
  to:bitmap_line::@19
bitmap_line::@19: scope:[bitmap_line]  from bitmap_line::@12
  to:bitmap_line::@return
bitmap_line::@6: scope:[bitmap_line]  from bitmap_line::@5
  bitmap_line::xd#12 = phi( bitmap_line::@5/bitmap_line::xd#10 )
  bitmap_line::yd#10 = phi( bitmap_line::@5/bitmap_line::yd#4 )
  bitmap_line::y0#10 = phi( bitmap_line::@5/bitmap_line::y0#8 )
  bitmap_line::x1#8 = phi( bitmap_line::@5/bitmap_line::x1#12 )
  bitmap_line::y1#11 = phi( bitmap_line::@5/bitmap_line::y1#10 )
  bitmap_line_ydxd::y#1 = bitmap_line::y1#11
  bitmap_line_ydxd::x#1 = bitmap_line::x1#8
  bitmap_line_ydxd::y1#1 = bitmap_line::y0#10
  bitmap_line_ydxd::yd#1 = bitmap_line::yd#10
  bitmap_line_ydxd::xd#1 = bitmap_line::xd#12
  call bitmap_line_ydxd 
  to:bitmap_line::@20
bitmap_line::@20: scope:[bitmap_line]  from bitmap_line::@6
  to:bitmap_line::@return
bitmap_line::@13: scope:[bitmap_line]  from bitmap_line::@11
  bitmap_line::yd#11 = phi( bitmap_line::@11/bitmap_line::yd#3 )
  bitmap_line::xd#13 = phi( bitmap_line::@11/bitmap_line::xd#9 )
  bitmap_line::x1#9 = phi( bitmap_line::@11/bitmap_line::x1#13 )
  bitmap_line::y0#11 = phi( bitmap_line::@11/bitmap_line::y0#7 )
  bitmap_line::x0#8 = phi( bitmap_line::@11/bitmap_line::x0#13 )
  bitmap_line_xdyi::x#1 = bitmap_line::x0#8
  bitmap_line_xdyi::y#1 = bitmap_line::y0#11
  bitmap_line_xdyi::x1#1 = bitmap_line::x1#9
  bitmap_line_xdyi::xd#1 = bitmap_line::xd#13
  bitmap_line_xdyi::yd#1 = bitmap_line::yd#11
  call bitmap_line_xdyi 
  to:bitmap_line::@21
bitmap_line::@21: scope:[bitmap_line]  from bitmap_line::@13
  to:bitmap_line::@return
bitmap_line::@14: scope:[bitmap_line]  from bitmap_line::@11
  bitmap_line::xd#14 = phi( bitmap_line::@11/bitmap_line::xd#9 )
  bitmap_line::yd#12 = phi( bitmap_line::@11/bitmap_line::yd#3 )
  bitmap_line::y1#12 = phi( bitmap_line::@11/bitmap_line::y1#9 )
  bitmap_line::x0#9 = phi( bitmap_line::@11/bitmap_line::x0#13 )
  bitmap_line::y0#12 = phi( bitmap_line::@11/bitmap_line::y0#7 )
  bitmap_line_ydxi::y#1 = bitmap_line::y0#12
  bitmap_line_ydxi::x#1 = bitmap_line::x0#9
  bitmap_line_ydxi::y1#1 = bitmap_line::y1#12
  bitmap_line_ydxi::yd#1 = bitmap_line::yd#12
  bitmap_line_ydxi::xd#1 = bitmap_line::xd#14
  call bitmap_line_ydxi 
  to:bitmap_line::@22
bitmap_line::@22: scope:[bitmap_line]  from bitmap_line::@14
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@15 bitmap_line::@16 bitmap_line::@17 bitmap_line::@18 bitmap_line::@19 bitmap_line::@20 bitmap_line::@21 bitmap_line::@22
  return 
  to:@return

void bitmap_line_xdyi(byte bitmap_line_xdyi::x , byte bitmap_line_xdyi::y , byte bitmap_line_xdyi::x1 , byte bitmap_line_xdyi::xd , byte bitmap_line_xdyi::yd)
bitmap_line_xdyi: scope:[bitmap_line_xdyi]  from bitmap_line::@13 bitmap_line::@8
  bitmap_line_xdyi::x1#6 = phi( bitmap_line::@13/bitmap_line_xdyi::x1#1, bitmap_line::@8/bitmap_line_xdyi::x1#0 )
  bitmap_line_xdyi::xd#5 = phi( bitmap_line::@13/bitmap_line_xdyi::xd#1, bitmap_line::@8/bitmap_line_xdyi::xd#0 )
  bitmap_line_xdyi::y#5 = phi( bitmap_line::@13/bitmap_line_xdyi::y#1, bitmap_line::@8/bitmap_line_xdyi::y#0 )
  bitmap_line_xdyi::x#6 = phi( bitmap_line::@13/bitmap_line_xdyi::x#1, bitmap_line::@8/bitmap_line_xdyi::x#0 )
  bitmap_line_xdyi::yd#2 = phi( bitmap_line::@13/bitmap_line_xdyi::yd#1, bitmap_line::@8/bitmap_line_xdyi::yd#0 )
  bitmap_line_xdyi::$0 = bitmap_line_xdyi::yd#2 >> 1
  bitmap_line_xdyi::e#0 = bitmap_line_xdyi::$0
  to:bitmap_line_xdyi::@1
bitmap_line_xdyi::@1: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi bitmap_line_xdyi::@2
  bitmap_line_xdyi::x1#5 = phi( bitmap_line_xdyi/bitmap_line_xdyi::x1#6, bitmap_line_xdyi::@2/bitmap_line_xdyi::x1#2 )
  bitmap_line_xdyi::xd#4 = phi( bitmap_line_xdyi/bitmap_line_xdyi::xd#5, bitmap_line_xdyi::@2/bitmap_line_xdyi::xd#6 )
  bitmap_line_xdyi::yd#4 = phi( bitmap_line_xdyi/bitmap_line_xdyi::yd#2, bitmap_line_xdyi::@2/bitmap_line_xdyi::yd#5 )
  bitmap_line_xdyi::e#5 = phi( bitmap_line_xdyi/bitmap_line_xdyi::e#0, bitmap_line_xdyi::@2/bitmap_line_xdyi::e#6 )
  bitmap_line_xdyi::y#3 = phi( bitmap_line_xdyi/bitmap_line_xdyi::y#5, bitmap_line_xdyi::@2/bitmap_line_xdyi::y#6 )
  bitmap_line_xdyi::x#3 = phi( bitmap_line_xdyi/bitmap_line_xdyi::x#6, bitmap_line_xdyi::@2/bitmap_line_xdyi::x#5 )
  bitmap_plot::x#0 = bitmap_line_xdyi::x#3
  bitmap_plot::y#0 = bitmap_line_xdyi::y#3
  call bitmap_plot 
  to:bitmap_line_xdyi::@4
bitmap_line_xdyi::@4: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@1
  bitmap_line_xdyi::y#7 = phi( bitmap_line_xdyi::@1/bitmap_line_xdyi::y#3 )
  bitmap_line_xdyi::x1#4 = phi( bitmap_line_xdyi::@1/bitmap_line_xdyi::x1#5 )
  bitmap_line_xdyi::xd#2 = phi( bitmap_line_xdyi::@1/bitmap_line_xdyi::xd#4 )
  bitmap_line_xdyi::yd#3 = phi( bitmap_line_xdyi::@1/bitmap_line_xdyi::yd#4 )
  bitmap_line_xdyi::e#3 = phi( bitmap_line_xdyi::@1/bitmap_line_xdyi::e#5 )
  bitmap_line_xdyi::x#4 = phi( bitmap_line_xdyi::@1/bitmap_line_xdyi::x#3 )
  bitmap_line_xdyi::x#2 = ++ bitmap_line_xdyi::x#4
  bitmap_line_xdyi::$2 = bitmap_line_xdyi::e#3 + bitmap_line_xdyi::yd#3
  bitmap_line_xdyi::e#1 = bitmap_line_xdyi::$2
  bitmap_line_xdyi::$3 = bitmap_line_xdyi::xd#2 < bitmap_line_xdyi::e#1
  bitmap_line_xdyi::$4 = ! bitmap_line_xdyi::$3
  if(bitmap_line_xdyi::$4) goto bitmap_line_xdyi::@2
  to:bitmap_line_xdyi::@3
bitmap_line_xdyi::@2: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4
  bitmap_line_xdyi::xd#6 = phi( bitmap_line_xdyi::@3/bitmap_line_xdyi::xd#3, bitmap_line_xdyi::@4/bitmap_line_xdyi::xd#2 )
  bitmap_line_xdyi::yd#5 = phi( bitmap_line_xdyi::@3/bitmap_line_xdyi::yd#6, bitmap_line_xdyi::@4/bitmap_line_xdyi::yd#3 )
  bitmap_line_xdyi::e#6 = phi( bitmap_line_xdyi::@3/bitmap_line_xdyi::e#2, bitmap_line_xdyi::@4/bitmap_line_xdyi::e#1 )
  bitmap_line_xdyi::y#6 = phi( bitmap_line_xdyi::@3/bitmap_line_xdyi::y#2, bitmap_line_xdyi::@4/bitmap_line_xdyi::y#7 )
  bitmap_line_xdyi::x#5 = phi( bitmap_line_xdyi::@3/bitmap_line_xdyi::x#7, bitmap_line_xdyi::@4/bitmap_line_xdyi::x#2 )
  bitmap_line_xdyi::x1#2 = phi( bitmap_line_xdyi::@3/bitmap_line_xdyi::x1#3, bitmap_line_xdyi::@4/bitmap_line_xdyi::x1#4 )
  bitmap_line_xdyi::$6 = bitmap_line_xdyi::x1#2 + 1
  bitmap_line_xdyi::$7 = bitmap_line_xdyi::x#5 != bitmap_line_xdyi::$6
  if(bitmap_line_xdyi::$7) goto bitmap_line_xdyi::@1
  to:bitmap_line_xdyi::@return
bitmap_line_xdyi::@3: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@4
  bitmap_line_xdyi::yd#6 = phi( bitmap_line_xdyi::@4/bitmap_line_xdyi::yd#3 )
  bitmap_line_xdyi::x#7 = phi( bitmap_line_xdyi::@4/bitmap_line_xdyi::x#2 )
  bitmap_line_xdyi::x1#3 = phi( bitmap_line_xdyi::@4/bitmap_line_xdyi::x1#4 )
  bitmap_line_xdyi::xd#3 = phi( bitmap_line_xdyi::@4/bitmap_line_xdyi::xd#2 )
  bitmap_line_xdyi::e#4 = phi( bitmap_line_xdyi::@4/bitmap_line_xdyi::e#1 )
  bitmap_line_xdyi::y#4 = phi( bitmap_line_xdyi::@4/bitmap_line_xdyi::y#7 )
  bitmap_line_xdyi::y#2 = ++ bitmap_line_xdyi::y#4
  bitmap_line_xdyi::$5 = bitmap_line_xdyi::e#4 - bitmap_line_xdyi::xd#3
  bitmap_line_xdyi::e#2 = bitmap_line_xdyi::$5
  to:bitmap_line_xdyi::@2
bitmap_line_xdyi::@return: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@2
  return 
  to:@return

void bitmap_line_xdyd(byte bitmap_line_xdyd::x , byte bitmap_line_xdyd::y , byte bitmap_line_xdyd::x1 , byte bitmap_line_xdyd::xd , byte bitmap_line_xdyd::yd)
bitmap_line_xdyd: scope:[bitmap_line_xdyd]  from bitmap_line::@12 bitmap_line::@9
  bitmap_line_xdyd::x1#6 = phi( bitmap_line::@12/bitmap_line_xdyd::x1#1, bitmap_line::@9/bitmap_line_xdyd::x1#0 )
  bitmap_line_xdyd::xd#5 = phi( bitmap_line::@12/bitmap_line_xdyd::xd#1, bitmap_line::@9/bitmap_line_xdyd::xd#0 )
  bitmap_line_xdyd::y#5 = phi( bitmap_line::@12/bitmap_line_xdyd::y#1, bitmap_line::@9/bitmap_line_xdyd::y#0 )
  bitmap_line_xdyd::x#6 = phi( bitmap_line::@12/bitmap_line_xdyd::x#1, bitmap_line::@9/bitmap_line_xdyd::x#0 )
  bitmap_line_xdyd::yd#2 = phi( bitmap_line::@12/bitmap_line_xdyd::yd#1, bitmap_line::@9/bitmap_line_xdyd::yd#0 )
  bitmap_line_xdyd::$0 = bitmap_line_xdyd::yd#2 >> 1
  bitmap_line_xdyd::e#0 = bitmap_line_xdyd::$0
  to:bitmap_line_xdyd::@1
bitmap_line_xdyd::@1: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd bitmap_line_xdyd::@2
  bitmap_line_xdyd::x1#5 = phi( bitmap_line_xdyd/bitmap_line_xdyd::x1#6, bitmap_line_xdyd::@2/bitmap_line_xdyd::x1#2 )
  bitmap_line_xdyd::xd#4 = phi( bitmap_line_xdyd/bitmap_line_xdyd::xd#5, bitmap_line_xdyd::@2/bitmap_line_xdyd::xd#6 )
  bitmap_line_xdyd::yd#4 = phi( bitmap_line_xdyd/bitmap_line_xdyd::yd#2, bitmap_line_xdyd::@2/bitmap_line_xdyd::yd#5 )
  bitmap_line_xdyd::e#5 = phi( bitmap_line_xdyd/bitmap_line_xdyd::e#0, bitmap_line_xdyd::@2/bitmap_line_xdyd::e#6 )
  bitmap_line_xdyd::y#3 = phi( bitmap_line_xdyd/bitmap_line_xdyd::y#5, bitmap_line_xdyd::@2/bitmap_line_xdyd::y#6 )
  bitmap_line_xdyd::x#3 = phi( bitmap_line_xdyd/bitmap_line_xdyd::x#6, bitmap_line_xdyd::@2/bitmap_line_xdyd::x#5 )
  bitmap_plot::x#1 = bitmap_line_xdyd::x#3
  bitmap_plot::y#1 = bitmap_line_xdyd::y#3
  call bitmap_plot 
  to:bitmap_line_xdyd::@4
bitmap_line_xdyd::@4: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@1
  bitmap_line_xdyd::y#7 = phi( bitmap_line_xdyd::@1/bitmap_line_xdyd::y#3 )
  bitmap_line_xdyd::x1#4 = phi( bitmap_line_xdyd::@1/bitmap_line_xdyd::x1#5 )
  bitmap_line_xdyd::xd#2 = phi( bitmap_line_xdyd::@1/bitmap_line_xdyd::xd#4 )
  bitmap_line_xdyd::yd#3 = phi( bitmap_line_xdyd::@1/bitmap_line_xdyd::yd#4 )
  bitmap_line_xdyd::e#3 = phi( bitmap_line_xdyd::@1/bitmap_line_xdyd::e#5 )
  bitmap_line_xdyd::x#4 = phi( bitmap_line_xdyd::@1/bitmap_line_xdyd::x#3 )
  bitmap_line_xdyd::x#2 = ++ bitmap_line_xdyd::x#4
  bitmap_line_xdyd::$2 = bitmap_line_xdyd::e#3 + bitmap_line_xdyd::yd#3
  bitmap_line_xdyd::e#1 = bitmap_line_xdyd::$2
  bitmap_line_xdyd::$3 = bitmap_line_xdyd::xd#2 < bitmap_line_xdyd::e#1
  bitmap_line_xdyd::$4 = ! bitmap_line_xdyd::$3
  if(bitmap_line_xdyd::$4) goto bitmap_line_xdyd::@2
  to:bitmap_line_xdyd::@3
bitmap_line_xdyd::@2: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4
  bitmap_line_xdyd::xd#6 = phi( bitmap_line_xdyd::@3/bitmap_line_xdyd::xd#3, bitmap_line_xdyd::@4/bitmap_line_xdyd::xd#2 )
  bitmap_line_xdyd::yd#5 = phi( bitmap_line_xdyd::@3/bitmap_line_xdyd::yd#6, bitmap_line_xdyd::@4/bitmap_line_xdyd::yd#3 )
  bitmap_line_xdyd::e#6 = phi( bitmap_line_xdyd::@3/bitmap_line_xdyd::e#2, bitmap_line_xdyd::@4/bitmap_line_xdyd::e#1 )
  bitmap_line_xdyd::y#6 = phi( bitmap_line_xdyd::@3/bitmap_line_xdyd::y#2, bitmap_line_xdyd::@4/bitmap_line_xdyd::y#7 )
  bitmap_line_xdyd::x#5 = phi( bitmap_line_xdyd::@3/bitmap_line_xdyd::x#7, bitmap_line_xdyd::@4/bitmap_line_xdyd::x#2 )
  bitmap_line_xdyd::x1#2 = phi( bitmap_line_xdyd::@3/bitmap_line_xdyd::x1#3, bitmap_line_xdyd::@4/bitmap_line_xdyd::x1#4 )
  bitmap_line_xdyd::$6 = bitmap_line_xdyd::x1#2 + 1
  bitmap_line_xdyd::$7 = bitmap_line_xdyd::x#5 != bitmap_line_xdyd::$6
  if(bitmap_line_xdyd::$7) goto bitmap_line_xdyd::@1
  to:bitmap_line_xdyd::@return
bitmap_line_xdyd::@3: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@4
  bitmap_line_xdyd::yd#6 = phi( bitmap_line_xdyd::@4/bitmap_line_xdyd::yd#3 )
  bitmap_line_xdyd::x#7 = phi( bitmap_line_xdyd::@4/bitmap_line_xdyd::x#2 )
  bitmap_line_xdyd::x1#3 = phi( bitmap_line_xdyd::@4/bitmap_line_xdyd::x1#4 )
  bitmap_line_xdyd::xd#3 = phi( bitmap_line_xdyd::@4/bitmap_line_xdyd::xd#2 )
  bitmap_line_xdyd::e#4 = phi( bitmap_line_xdyd::@4/bitmap_line_xdyd::e#1 )
  bitmap_line_xdyd::y#4 = phi( bitmap_line_xdyd::@4/bitmap_line_xdyd::y#7 )
  bitmap_line_xdyd::y#2 = -- bitmap_line_xdyd::y#4
  bitmap_line_xdyd::$5 = bitmap_line_xdyd::e#4 - bitmap_line_xdyd::xd#3
  bitmap_line_xdyd::e#2 = bitmap_line_xdyd::$5
  to:bitmap_line_xdyd::@2
bitmap_line_xdyd::@return: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@2
  return 
  to:@return

void bitmap_line_ydxi(byte bitmap_line_ydxi::y , byte bitmap_line_ydxi::x , byte bitmap_line_ydxi::y1 , byte bitmap_line_ydxi::yd , byte bitmap_line_ydxi::xd)
bitmap_line_ydxi: scope:[bitmap_line_ydxi]  from bitmap_line::@14 bitmap_line::@4
  bitmap_line_ydxi::y1#6 = phi( bitmap_line::@14/bitmap_line_ydxi::y1#1, bitmap_line::@4/bitmap_line_ydxi::y1#0 )
  bitmap_line_ydxi::yd#5 = phi( bitmap_line::@14/bitmap_line_ydxi::yd#1, bitmap_line::@4/bitmap_line_ydxi::yd#0 )
  bitmap_line_ydxi::y#6 = phi( bitmap_line::@14/bitmap_line_ydxi::y#1, bitmap_line::@4/bitmap_line_ydxi::y#0 )
  bitmap_line_ydxi::x#5 = phi( bitmap_line::@14/bitmap_line_ydxi::x#1, bitmap_line::@4/bitmap_line_ydxi::x#0 )
  bitmap_line_ydxi::xd#2 = phi( bitmap_line::@14/bitmap_line_ydxi::xd#1, bitmap_line::@4/bitmap_line_ydxi::xd#0 )
  bitmap_line_ydxi::$0 = bitmap_line_ydxi::xd#2 >> 1
  bitmap_line_ydxi::e#0 = bitmap_line_ydxi::$0
  to:bitmap_line_ydxi::@1
bitmap_line_ydxi::@1: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi bitmap_line_ydxi::@2
  bitmap_line_ydxi::y1#5 = phi( bitmap_line_ydxi/bitmap_line_ydxi::y1#6, bitmap_line_ydxi::@2/bitmap_line_ydxi::y1#2 )
  bitmap_line_ydxi::yd#4 = phi( bitmap_line_ydxi/bitmap_line_ydxi::yd#5, bitmap_line_ydxi::@2/bitmap_line_ydxi::yd#6 )
  bitmap_line_ydxi::xd#4 = phi( bitmap_line_ydxi/bitmap_line_ydxi::xd#2, bitmap_line_ydxi::@2/bitmap_line_ydxi::xd#5 )
  bitmap_line_ydxi::e#5 = phi( bitmap_line_ydxi/bitmap_line_ydxi::e#0, bitmap_line_ydxi::@2/bitmap_line_ydxi::e#6 )
  bitmap_line_ydxi::y#3 = phi( bitmap_line_ydxi/bitmap_line_ydxi::y#6, bitmap_line_ydxi::@2/bitmap_line_ydxi::y#5 )
  bitmap_line_ydxi::x#3 = phi( bitmap_line_ydxi/bitmap_line_ydxi::x#5, bitmap_line_ydxi::@2/bitmap_line_ydxi::x#6 )
  bitmap_plot::x#2 = bitmap_line_ydxi::x#3
  bitmap_plot::y#2 = bitmap_line_ydxi::y#3
  call bitmap_plot 
  to:bitmap_line_ydxi::@4
bitmap_line_ydxi::@4: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@1
  bitmap_line_ydxi::x#7 = phi( bitmap_line_ydxi::@1/bitmap_line_ydxi::x#3 )
  bitmap_line_ydxi::y1#4 = phi( bitmap_line_ydxi::@1/bitmap_line_ydxi::y1#5 )
  bitmap_line_ydxi::yd#2 = phi( bitmap_line_ydxi::@1/bitmap_line_ydxi::yd#4 )
  bitmap_line_ydxi::xd#3 = phi( bitmap_line_ydxi::@1/bitmap_line_ydxi::xd#4 )
  bitmap_line_ydxi::e#3 = phi( bitmap_line_ydxi::@1/bitmap_line_ydxi::e#5 )
  bitmap_line_ydxi::y#4 = phi( bitmap_line_ydxi::@1/bitmap_line_ydxi::y#3 )
  bitmap_line_ydxi::y#2 = ++ bitmap_line_ydxi::y#4
  bitmap_line_ydxi::$2 = bitmap_line_ydxi::e#3 + bitmap_line_ydxi::xd#3
  bitmap_line_ydxi::e#1 = bitmap_line_ydxi::$2
  bitmap_line_ydxi::$3 = bitmap_line_ydxi::yd#2 < bitmap_line_ydxi::e#1
  bitmap_line_ydxi::$4 = ! bitmap_line_ydxi::$3
  if(bitmap_line_ydxi::$4) goto bitmap_line_ydxi::@2
  to:bitmap_line_ydxi::@3
bitmap_line_ydxi::@2: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4
  bitmap_line_ydxi::yd#6 = phi( bitmap_line_ydxi::@3/bitmap_line_ydxi::yd#3, bitmap_line_ydxi::@4/bitmap_line_ydxi::yd#2 )
  bitmap_line_ydxi::xd#5 = phi( bitmap_line_ydxi::@3/bitmap_line_ydxi::xd#6, bitmap_line_ydxi::@4/bitmap_line_ydxi::xd#3 )
  bitmap_line_ydxi::e#6 = phi( bitmap_line_ydxi::@3/bitmap_line_ydxi::e#2, bitmap_line_ydxi::@4/bitmap_line_ydxi::e#1 )
  bitmap_line_ydxi::x#6 = phi( bitmap_line_ydxi::@3/bitmap_line_ydxi::x#2, bitmap_line_ydxi::@4/bitmap_line_ydxi::x#7 )
  bitmap_line_ydxi::y#5 = phi( bitmap_line_ydxi::@3/bitmap_line_ydxi::y#7, bitmap_line_ydxi::@4/bitmap_line_ydxi::y#2 )
  bitmap_line_ydxi::y1#2 = phi( bitmap_line_ydxi::@3/bitmap_line_ydxi::y1#3, bitmap_line_ydxi::@4/bitmap_line_ydxi::y1#4 )
  bitmap_line_ydxi::$6 = bitmap_line_ydxi::y1#2 + 1
  bitmap_line_ydxi::$7 = bitmap_line_ydxi::y#5 != bitmap_line_ydxi::$6
  if(bitmap_line_ydxi::$7) goto bitmap_line_ydxi::@1
  to:bitmap_line_ydxi::@return
bitmap_line_ydxi::@3: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@4
  bitmap_line_ydxi::xd#6 = phi( bitmap_line_ydxi::@4/bitmap_line_ydxi::xd#3 )
  bitmap_line_ydxi::y#7 = phi( bitmap_line_ydxi::@4/bitmap_line_ydxi::y#2 )
  bitmap_line_ydxi::y1#3 = phi( bitmap_line_ydxi::@4/bitmap_line_ydxi::y1#4 )
  bitmap_line_ydxi::yd#3 = phi( bitmap_line_ydxi::@4/bitmap_line_ydxi::yd#2 )
  bitmap_line_ydxi::e#4 = phi( bitmap_line_ydxi::@4/bitmap_line_ydxi::e#1 )
  bitmap_line_ydxi::x#4 = phi( bitmap_line_ydxi::@4/bitmap_line_ydxi::x#7 )
  bitmap_line_ydxi::x#2 = ++ bitmap_line_ydxi::x#4
  bitmap_line_ydxi::$5 = bitmap_line_ydxi::e#4 - bitmap_line_ydxi::yd#3
  bitmap_line_ydxi::e#2 = bitmap_line_ydxi::$5
  to:bitmap_line_ydxi::@2
bitmap_line_ydxi::@return: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@2
  return 
  to:@return

void bitmap_line_ydxd(byte bitmap_line_ydxd::y , byte bitmap_line_ydxd::x , byte bitmap_line_ydxd::y1 , byte bitmap_line_ydxd::yd , byte bitmap_line_ydxd::xd)
bitmap_line_ydxd: scope:[bitmap_line_ydxd]  from bitmap_line::@10 bitmap_line::@6
  bitmap_line_ydxd::y1#6 = phi( bitmap_line::@10/bitmap_line_ydxd::y1#0, bitmap_line::@6/bitmap_line_ydxd::y1#1 )
  bitmap_line_ydxd::yd#5 = phi( bitmap_line::@10/bitmap_line_ydxd::yd#0, bitmap_line::@6/bitmap_line_ydxd::yd#1 )
  bitmap_line_ydxd::y#7 = phi( bitmap_line::@10/bitmap_line_ydxd::y#0, bitmap_line::@6/bitmap_line_ydxd::y#1 )
  bitmap_line_ydxd::x#5 = phi( bitmap_line::@10/bitmap_line_ydxd::x#0, bitmap_line::@6/bitmap_line_ydxd::x#1 )
  bitmap_line_ydxd::xd#2 = phi( bitmap_line::@10/bitmap_line_ydxd::xd#0, bitmap_line::@6/bitmap_line_ydxd::xd#1 )
  bitmap_line_ydxd::$0 = bitmap_line_ydxd::xd#2 >> 1
  bitmap_line_ydxd::e#0 = bitmap_line_ydxd::$0
  to:bitmap_line_ydxd::@1
bitmap_line_ydxd::@1: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd bitmap_line_ydxd::@2
  bitmap_line_ydxd::y1#5 = phi( bitmap_line_ydxd/bitmap_line_ydxd::y1#6, bitmap_line_ydxd::@2/bitmap_line_ydxd::y1#2 )
  bitmap_line_ydxd::yd#4 = phi( bitmap_line_ydxd/bitmap_line_ydxd::yd#5, bitmap_line_ydxd::@2/bitmap_line_ydxd::yd#6 )
  bitmap_line_ydxd::xd#4 = phi( bitmap_line_ydxd/bitmap_line_ydxd::xd#2, bitmap_line_ydxd::@2/bitmap_line_ydxd::xd#5 )
  bitmap_line_ydxd::e#5 = phi( bitmap_line_ydxd/bitmap_line_ydxd::e#0, bitmap_line_ydxd::@2/bitmap_line_ydxd::e#6 )
  bitmap_line_ydxd::y#4 = phi( bitmap_line_ydxd/bitmap_line_ydxd::y#7, bitmap_line_ydxd::@2/bitmap_line_ydxd::y#6 )
  bitmap_line_ydxd::x#3 = phi( bitmap_line_ydxd/bitmap_line_ydxd::x#5, bitmap_line_ydxd::@2/bitmap_line_ydxd::x#6 )
  bitmap_plot::x#3 = bitmap_line_ydxd::x#3
  bitmap_plot::y#3 = bitmap_line_ydxd::y#4
  call bitmap_plot 
  to:bitmap_line_ydxd::@4
bitmap_line_ydxd::@4: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@1
  bitmap_line_ydxd::x#7 = phi( bitmap_line_ydxd::@1/bitmap_line_ydxd::x#3 )
  bitmap_line_ydxd::y1#4 = phi( bitmap_line_ydxd::@1/bitmap_line_ydxd::y1#5 )
  bitmap_line_ydxd::yd#2 = phi( bitmap_line_ydxd::@1/bitmap_line_ydxd::yd#4 )
  bitmap_line_ydxd::xd#3 = phi( bitmap_line_ydxd::@1/bitmap_line_ydxd::xd#4 )
  bitmap_line_ydxd::e#3 = phi( bitmap_line_ydxd::@1/bitmap_line_ydxd::e#5 )
  bitmap_line_ydxd::y#5 = phi( bitmap_line_ydxd::@1/bitmap_line_ydxd::y#4 )
  bitmap_line_ydxd::y#2 = bitmap_line_ydxd::y#5
  bitmap_line_ydxd::y#3 = ++ bitmap_line_ydxd::y#2
  bitmap_line_ydxd::$2 = bitmap_line_ydxd::e#3 + bitmap_line_ydxd::xd#3
  bitmap_line_ydxd::e#1 = bitmap_line_ydxd::$2
  bitmap_line_ydxd::$3 = bitmap_line_ydxd::yd#2 < bitmap_line_ydxd::e#1
  bitmap_line_ydxd::$4 = ! bitmap_line_ydxd::$3
  if(bitmap_line_ydxd::$4) goto bitmap_line_ydxd::@2
  to:bitmap_line_ydxd::@3
bitmap_line_ydxd::@2: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4
  bitmap_line_ydxd::yd#6 = phi( bitmap_line_ydxd::@3/bitmap_line_ydxd::yd#3, bitmap_line_ydxd::@4/bitmap_line_ydxd::yd#2 )
  bitmap_line_ydxd::xd#5 = phi( bitmap_line_ydxd::@3/bitmap_line_ydxd::xd#6, bitmap_line_ydxd::@4/bitmap_line_ydxd::xd#3 )
  bitmap_line_ydxd::e#6 = phi( bitmap_line_ydxd::@3/bitmap_line_ydxd::e#2, bitmap_line_ydxd::@4/bitmap_line_ydxd::e#1 )
  bitmap_line_ydxd::x#6 = phi( bitmap_line_ydxd::@3/bitmap_line_ydxd::x#2, bitmap_line_ydxd::@4/bitmap_line_ydxd::x#7 )
  bitmap_line_ydxd::y#6 = phi( bitmap_line_ydxd::@3/bitmap_line_ydxd::y#8, bitmap_line_ydxd::@4/bitmap_line_ydxd::y#3 )
  bitmap_line_ydxd::y1#2 = phi( bitmap_line_ydxd::@3/bitmap_line_ydxd::y1#3, bitmap_line_ydxd::@4/bitmap_line_ydxd::y1#4 )
  bitmap_line_ydxd::$6 = bitmap_line_ydxd::y1#2 + 1
  bitmap_line_ydxd::$7 = bitmap_line_ydxd::y#6 != bitmap_line_ydxd::$6
  if(bitmap_line_ydxd::$7) goto bitmap_line_ydxd::@1
  to:bitmap_line_ydxd::@return
bitmap_line_ydxd::@3: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@4
  bitmap_line_ydxd::xd#6 = phi( bitmap_line_ydxd::@4/bitmap_line_ydxd::xd#3 )
  bitmap_line_ydxd::y#8 = phi( bitmap_line_ydxd::@4/bitmap_line_ydxd::y#3 )
  bitmap_line_ydxd::y1#3 = phi( bitmap_line_ydxd::@4/bitmap_line_ydxd::y1#4 )
  bitmap_line_ydxd::yd#3 = phi( bitmap_line_ydxd::@4/bitmap_line_ydxd::yd#2 )
  bitmap_line_ydxd::e#4 = phi( bitmap_line_ydxd::@4/bitmap_line_ydxd::e#1 )
  bitmap_line_ydxd::x#4 = phi( bitmap_line_ydxd::@4/bitmap_line_ydxd::x#7 )
  bitmap_line_ydxd::x#2 = -- bitmap_line_ydxd::x#4
  bitmap_line_ydxd::$5 = bitmap_line_ydxd::e#4 - bitmap_line_ydxd::yd#3
  bitmap_line_ydxd::e#2 = bitmap_line_ydxd::$5
  to:bitmap_line_ydxd::@2
bitmap_line_ydxd::@return: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@2
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = 0
  *D011 = VIC_BMM|VIC_DEN|VIC_RSEL|3
  *VIC_MEMORY = (byte)(word)SCREEN&$3fff/$40|(word)BITMAP&$3fff/$400
  bitmap_init::bitmap#0 = BITMAP
  call bitmap_init 
  to:main::@2
main::@2: scope:[main]  from main
  call bitmap_clear 
  to:main::@3
main::@3: scope:[main]  from main::@2
  call init_screen 
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  call lines 
  to:main::@5
main::@5: scope:[main]  from main::@1
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return

void lines()
lines: scope:[lines]  from main::@1
  lines::l#0 = 0
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  lines::l#2 = phi( lines/lines::l#0, lines::@3/lines::l#1 )
  lines::$0 = lines::l#2 < lines_cnt
  if(lines::$0) goto lines::@2
  to:lines::@return
lines::@2: scope:[lines]  from lines::@1
  lines::l#3 = phi( lines::@1/lines::l#2 )
  lines::$1 = lines::l#3 + 1
  lines::$2 = lines::l#3 + 1
  bitmap_line::x0#0 = lines_x[lines::l#3]
  bitmap_line::x1#0 = lines_x[lines::$1]
  bitmap_line::y0#0 = lines_y[lines::l#3]
  bitmap_line::y1#0 = lines_y[lines::$2]
  call bitmap_line 
  to:lines::@3
lines::@3: scope:[lines]  from lines::@2
  lines::l#4 = phi( lines::@2/lines::l#3 )
  lines::l#1 = ++ lines::l#4
  to:lines::@1
lines::@return: scope:[lines]  from lines::@1
  return 
  to:@return

void init_screen()
init_screen: scope:[init_screen]  from main::@3
  init_screen::c#0 = SCREEN
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@2
  init_screen::c#2 = phi( init_screen/init_screen::c#0, init_screen::@2/init_screen::c#1 )
  init_screen::$0 = init_screen::c#2 != SCREEN+$400
  if(init_screen::$0) goto init_screen::@2
  to:init_screen::@return
init_screen::@2: scope:[init_screen]  from init_screen::@1
  init_screen::c#3 = phi( init_screen::@1/init_screen::c#2 )
  *init_screen::c#3 = $14
  init_screen::c#1 = ++ init_screen::c#3
  to:init_screen::@1
init_screen::@return: scope:[init_screen]  from init_screen::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* BITMAP = (byte*)$2000
const nomodify byte* D011 = (byte*)$d011
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
const byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
const nomodify byte* SCREEN = (byte*)$400
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*)$d000
const nomodify byte VIC_BMM = $20
const nomodify byte VIC_DEN = $10
const nomodify byte* VIC_MEMORY = (byte*)$d018
const nomodify byte VIC_RSEL = 8
void __start()
void bitmap_clear()
bool~ bitmap_clear::$0
bool~ bitmap_clear::$1
byte* bitmap_clear::bitmap
byte* bitmap_clear::bitmap#0
byte* bitmap_clear::bitmap#1
byte* bitmap_clear::bitmap#2
byte* bitmap_clear::bitmap#3
byte* bitmap_clear::bitmap#4
byte bitmap_clear::x
byte bitmap_clear::x#0
byte bitmap_clear::x#1
byte bitmap_clear::x#2
byte bitmap_clear::y
byte bitmap_clear::y#0
byte bitmap_clear::y#1
byte bitmap_clear::y#2
byte bitmap_clear::y#3
byte bitmap_clear::y#4
void bitmap_init(byte* bitmap_init::bitmap)
number~ bitmap_init::$0
byte~ bitmap_init::$1
number~ bitmap_init::$10
bool~ bitmap_init::$11
bool~ bitmap_init::$12
byte*~ bitmap_init::$13
bool~ bitmap_init::$14
byte~ bitmap_init::$2
bool~ bitmap_init::$3
bool~ bitmap_init::$4
bool~ bitmap_init::$5
number~ bitmap_init::$6
byte~ bitmap_init::$7
number~ bitmap_init::$8
byte~ bitmap_init::$9
byte* bitmap_init::bitmap
byte* bitmap_init::bitmap#0
byte* bitmap_init::bitmap#1
byte* bitmap_init::bitmap#2
byte* bitmap_init::bitmap#3
byte* bitmap_init::bitmap#4
byte bitmap_init::bits
byte bitmap_init::bits#0
byte bitmap_init::bits#1
byte bitmap_init::bits#2
byte bitmap_init::bits#3
byte bitmap_init::bits#4
byte bitmap_init::x
byte bitmap_init::x#0
byte bitmap_init::x#1
byte bitmap_init::x#2
byte bitmap_init::x#3
byte bitmap_init::x#4
byte bitmap_init::y
byte bitmap_init::y#0
byte bitmap_init::y#1
byte bitmap_init::y#2
byte bitmap_init::y#3
byte bitmap_init::y#4
byte* bitmap_init::yoffs
byte* bitmap_init::yoffs#0
byte* bitmap_init::yoffs#1
byte* bitmap_init::yoffs#2
byte* bitmap_init::yoffs#3
byte* bitmap_init::yoffs#4
void bitmap_line(byte bitmap_line::x0 , byte bitmap_line::x1 , byte bitmap_line::y0 , byte bitmap_line::y1)
bool~ bitmap_line::$0
byte~ bitmap_line::$1
byte~ bitmap_line::$11
bool~ bitmap_line::$12
byte~ bitmap_line::$13
bool~ bitmap_line::$14
byte~ bitmap_line::$17
bool~ bitmap_line::$18
bool~ bitmap_line::$2
byte~ bitmap_line::$3
bool~ bitmap_line::$4
byte~ bitmap_line::$7
bool~ bitmap_line::$8
byte bitmap_line::x0
byte bitmap_line::x0#0
byte bitmap_line::x0#1
byte bitmap_line::x0#10
byte bitmap_line::x0#11
byte bitmap_line::x0#12
byte bitmap_line::x0#13
byte bitmap_line::x0#2
byte bitmap_line::x0#3
byte bitmap_line::x0#4
byte bitmap_line::x0#5
byte bitmap_line::x0#6
byte bitmap_line::x0#7
byte bitmap_line::x0#8
byte bitmap_line::x0#9
byte bitmap_line::x1
byte bitmap_line::x1#0
byte bitmap_line::x1#1
byte bitmap_line::x1#10
byte bitmap_line::x1#11
byte bitmap_line::x1#12
byte bitmap_line::x1#13
byte bitmap_line::x1#2
byte bitmap_line::x1#3
byte bitmap_line::x1#4
byte bitmap_line::x1#5
byte bitmap_line::x1#6
byte bitmap_line::x1#7
byte bitmap_line::x1#8
byte bitmap_line::x1#9
byte bitmap_line::xd
byte bitmap_line::xd#0
byte bitmap_line::xd#1
byte bitmap_line::xd#10
byte bitmap_line::xd#11
byte bitmap_line::xd#12
byte bitmap_line::xd#13
byte bitmap_line::xd#14
byte bitmap_line::xd#2
byte bitmap_line::xd#3
byte bitmap_line::xd#4
byte bitmap_line::xd#5
byte bitmap_line::xd#6
byte bitmap_line::xd#7
byte bitmap_line::xd#8
byte bitmap_line::xd#9
byte bitmap_line::y0
byte bitmap_line::y0#0
byte bitmap_line::y0#1
byte bitmap_line::y0#10
byte bitmap_line::y0#11
byte bitmap_line::y0#12
byte bitmap_line::y0#13
byte bitmap_line::y0#2
byte bitmap_line::y0#3
byte bitmap_line::y0#4
byte bitmap_line::y0#5
byte bitmap_line::y0#6
byte bitmap_line::y0#7
byte bitmap_line::y0#8
byte bitmap_line::y0#9
byte bitmap_line::y1
byte bitmap_line::y1#0
byte bitmap_line::y1#1
byte bitmap_line::y1#10
byte bitmap_line::y1#11
byte bitmap_line::y1#12
byte bitmap_line::y1#13
byte bitmap_line::y1#2
byte bitmap_line::y1#3
byte bitmap_line::y1#4
byte bitmap_line::y1#5
byte bitmap_line::y1#6
byte bitmap_line::y1#7
byte bitmap_line::y1#8
byte bitmap_line::y1#9
byte bitmap_line::yd
byte bitmap_line::yd#0
byte bitmap_line::yd#1
byte bitmap_line::yd#10
byte bitmap_line::yd#11
byte bitmap_line::yd#12
byte bitmap_line::yd#2
byte bitmap_line::yd#3
byte bitmap_line::yd#4
byte bitmap_line::yd#5
byte bitmap_line::yd#6
byte bitmap_line::yd#7
byte bitmap_line::yd#8
byte bitmap_line::yd#9
void bitmap_line_xdyd(byte bitmap_line_xdyd::x , byte bitmap_line_xdyd::y , byte bitmap_line_xdyd::x1 , byte bitmap_line_xdyd::xd , byte bitmap_line_xdyd::yd)
byte~ bitmap_line_xdyd::$0
byte~ bitmap_line_xdyd::$2
bool~ bitmap_line_xdyd::$3
bool~ bitmap_line_xdyd::$4
byte~ bitmap_line_xdyd::$5
number~ bitmap_line_xdyd::$6
bool~ bitmap_line_xdyd::$7
byte bitmap_line_xdyd::e
byte bitmap_line_xdyd::e#0
byte bitmap_line_xdyd::e#1
byte bitmap_line_xdyd::e#2
byte bitmap_line_xdyd::e#3
byte bitmap_line_xdyd::e#4
byte bitmap_line_xdyd::e#5
byte bitmap_line_xdyd::e#6
byte bitmap_line_xdyd::x
byte bitmap_line_xdyd::x#0
byte bitmap_line_xdyd::x#1
byte bitmap_line_xdyd::x#2
byte bitmap_line_xdyd::x#3
byte bitmap_line_xdyd::x#4
byte bitmap_line_xdyd::x#5
byte bitmap_line_xdyd::x#6
byte bitmap_line_xdyd::x#7
byte bitmap_line_xdyd::x1
byte bitmap_line_xdyd::x1#0
byte bitmap_line_xdyd::x1#1
byte bitmap_line_xdyd::x1#2
byte bitmap_line_xdyd::x1#3
byte bitmap_line_xdyd::x1#4
byte bitmap_line_xdyd::x1#5
byte bitmap_line_xdyd::x1#6
byte bitmap_line_xdyd::xd
byte bitmap_line_xdyd::xd#0
byte bitmap_line_xdyd::xd#1
byte bitmap_line_xdyd::xd#2
byte bitmap_line_xdyd::xd#3
byte bitmap_line_xdyd::xd#4
byte bitmap_line_xdyd::xd#5
byte bitmap_line_xdyd::xd#6
byte bitmap_line_xdyd::y
byte bitmap_line_xdyd::y#0
byte bitmap_line_xdyd::y#1
byte bitmap_line_xdyd::y#2
byte bitmap_line_xdyd::y#3
byte bitmap_line_xdyd::y#4
byte bitmap_line_xdyd::y#5
byte bitmap_line_xdyd::y#6
byte bitmap_line_xdyd::y#7
byte bitmap_line_xdyd::yd
byte bitmap_line_xdyd::yd#0
byte bitmap_line_xdyd::yd#1
byte bitmap_line_xdyd::yd#2
byte bitmap_line_xdyd::yd#3
byte bitmap_line_xdyd::yd#4
byte bitmap_line_xdyd::yd#5
byte bitmap_line_xdyd::yd#6
void bitmap_line_xdyi(byte bitmap_line_xdyi::x , byte bitmap_line_xdyi::y , byte bitmap_line_xdyi::x1 , byte bitmap_line_xdyi::xd , byte bitmap_line_xdyi::yd)
byte~ bitmap_line_xdyi::$0
byte~ bitmap_line_xdyi::$2
bool~ bitmap_line_xdyi::$3
bool~ bitmap_line_xdyi::$4
byte~ bitmap_line_xdyi::$5
number~ bitmap_line_xdyi::$6
bool~ bitmap_line_xdyi::$7
byte bitmap_line_xdyi::e
byte bitmap_line_xdyi::e#0
byte bitmap_line_xdyi::e#1
byte bitmap_line_xdyi::e#2
byte bitmap_line_xdyi::e#3
byte bitmap_line_xdyi::e#4
byte bitmap_line_xdyi::e#5
byte bitmap_line_xdyi::e#6
byte bitmap_line_xdyi::x
byte bitmap_line_xdyi::x#0
byte bitmap_line_xdyi::x#1
byte bitmap_line_xdyi::x#2
byte bitmap_line_xdyi::x#3
byte bitmap_line_xdyi::x#4
byte bitmap_line_xdyi::x#5
byte bitmap_line_xdyi::x#6
byte bitmap_line_xdyi::x#7
byte bitmap_line_xdyi::x1
byte bitmap_line_xdyi::x1#0
byte bitmap_line_xdyi::x1#1
byte bitmap_line_xdyi::x1#2
byte bitmap_line_xdyi::x1#3
byte bitmap_line_xdyi::x1#4
byte bitmap_line_xdyi::x1#5
byte bitmap_line_xdyi::x1#6
byte bitmap_line_xdyi::xd
byte bitmap_line_xdyi::xd#0
byte bitmap_line_xdyi::xd#1
byte bitmap_line_xdyi::xd#2
byte bitmap_line_xdyi::xd#3
byte bitmap_line_xdyi::xd#4
byte bitmap_line_xdyi::xd#5
byte bitmap_line_xdyi::xd#6
byte bitmap_line_xdyi::y
byte bitmap_line_xdyi::y#0
byte bitmap_line_xdyi::y#1
byte bitmap_line_xdyi::y#2
byte bitmap_line_xdyi::y#3
byte bitmap_line_xdyi::y#4
byte bitmap_line_xdyi::y#5
byte bitmap_line_xdyi::y#6
byte bitmap_line_xdyi::y#7
byte bitmap_line_xdyi::yd
byte bitmap_line_xdyi::yd#0
byte bitmap_line_xdyi::yd#1
byte bitmap_line_xdyi::yd#2
byte bitmap_line_xdyi::yd#3
byte bitmap_line_xdyi::yd#4
byte bitmap_line_xdyi::yd#5
byte bitmap_line_xdyi::yd#6
void bitmap_line_ydxd(byte bitmap_line_ydxd::y , byte bitmap_line_ydxd::x , byte bitmap_line_ydxd::y1 , byte bitmap_line_ydxd::yd , byte bitmap_line_ydxd::xd)
byte~ bitmap_line_ydxd::$0
byte~ bitmap_line_ydxd::$2
bool~ bitmap_line_ydxd::$3
bool~ bitmap_line_ydxd::$4
byte~ bitmap_line_ydxd::$5
number~ bitmap_line_ydxd::$6
bool~ bitmap_line_ydxd::$7
byte bitmap_line_ydxd::e
byte bitmap_line_ydxd::e#0
byte bitmap_line_ydxd::e#1
byte bitmap_line_ydxd::e#2
byte bitmap_line_ydxd::e#3
byte bitmap_line_ydxd::e#4
byte bitmap_line_ydxd::e#5
byte bitmap_line_ydxd::e#6
byte bitmap_line_ydxd::x
byte bitmap_line_ydxd::x#0
byte bitmap_line_ydxd::x#1
byte bitmap_line_ydxd::x#2
byte bitmap_line_ydxd::x#3
byte bitmap_line_ydxd::x#4
byte bitmap_line_ydxd::x#5
byte bitmap_line_ydxd::x#6
byte bitmap_line_ydxd::x#7
byte bitmap_line_ydxd::xd
byte bitmap_line_ydxd::xd#0
byte bitmap_line_ydxd::xd#1
byte bitmap_line_ydxd::xd#2
byte bitmap_line_ydxd::xd#3
byte bitmap_line_ydxd::xd#4
byte bitmap_line_ydxd::xd#5
byte bitmap_line_ydxd::xd#6
byte bitmap_line_ydxd::y
byte bitmap_line_ydxd::y#0
byte bitmap_line_ydxd::y#1
byte bitmap_line_ydxd::y#2
byte bitmap_line_ydxd::y#3
byte bitmap_line_ydxd::y#4
byte bitmap_line_ydxd::y#5
byte bitmap_line_ydxd::y#6
byte bitmap_line_ydxd::y#7
byte bitmap_line_ydxd::y#8
byte bitmap_line_ydxd::y1
byte bitmap_line_ydxd::y1#0
byte bitmap_line_ydxd::y1#1
byte bitmap_line_ydxd::y1#2
byte bitmap_line_ydxd::y1#3
byte bitmap_line_ydxd::y1#4
byte bitmap_line_ydxd::y1#5
byte bitmap_line_ydxd::y1#6
byte bitmap_line_ydxd::yd
byte bitmap_line_ydxd::yd#0
byte bitmap_line_ydxd::yd#1
byte bitmap_line_ydxd::yd#2
byte bitmap_line_ydxd::yd#3
byte bitmap_line_ydxd::yd#4
byte bitmap_line_ydxd::yd#5
byte bitmap_line_ydxd::yd#6
void bitmap_line_ydxi(byte bitmap_line_ydxi::y , byte bitmap_line_ydxi::x , byte bitmap_line_ydxi::y1 , byte bitmap_line_ydxi::yd , byte bitmap_line_ydxi::xd)
byte~ bitmap_line_ydxi::$0
byte~ bitmap_line_ydxi::$2
bool~ bitmap_line_ydxi::$3
bool~ bitmap_line_ydxi::$4
byte~ bitmap_line_ydxi::$5
number~ bitmap_line_ydxi::$6
bool~ bitmap_line_ydxi::$7
byte bitmap_line_ydxi::e
byte bitmap_line_ydxi::e#0
byte bitmap_line_ydxi::e#1
byte bitmap_line_ydxi::e#2
byte bitmap_line_ydxi::e#3
byte bitmap_line_ydxi::e#4
byte bitmap_line_ydxi::e#5
byte bitmap_line_ydxi::e#6
byte bitmap_line_ydxi::x
byte bitmap_line_ydxi::x#0
byte bitmap_line_ydxi::x#1
byte bitmap_line_ydxi::x#2
byte bitmap_line_ydxi::x#3
byte bitmap_line_ydxi::x#4
byte bitmap_line_ydxi::x#5
byte bitmap_line_ydxi::x#6
byte bitmap_line_ydxi::x#7
byte bitmap_line_ydxi::xd
byte bitmap_line_ydxi::xd#0
byte bitmap_line_ydxi::xd#1
byte bitmap_line_ydxi::xd#2
byte bitmap_line_ydxi::xd#3
byte bitmap_line_ydxi::xd#4
byte bitmap_line_ydxi::xd#5
byte bitmap_line_ydxi::xd#6
byte bitmap_line_ydxi::y
byte bitmap_line_ydxi::y#0
byte bitmap_line_ydxi::y#1
byte bitmap_line_ydxi::y#2
byte bitmap_line_ydxi::y#3
byte bitmap_line_ydxi::y#4
byte bitmap_line_ydxi::y#5
byte bitmap_line_ydxi::y#6
byte bitmap_line_ydxi::y#7
byte bitmap_line_ydxi::y1
byte bitmap_line_ydxi::y1#0
byte bitmap_line_ydxi::y1#1
byte bitmap_line_ydxi::y1#2
byte bitmap_line_ydxi::y1#3
byte bitmap_line_ydxi::y1#4
byte bitmap_line_ydxi::y1#5
byte bitmap_line_ydxi::y1#6
byte bitmap_line_ydxi::yd
byte bitmap_line_ydxi::yd#0
byte bitmap_line_ydxi::yd#1
byte bitmap_line_ydxi::yd#2
byte bitmap_line_ydxi::yd#3
byte bitmap_line_ydxi::yd#4
byte bitmap_line_ydxi::yd#5
byte bitmap_line_ydxi::yd#6
void bitmap_plot(byte bitmap_plot::x , byte bitmap_plot::y)
word~ bitmap_plot::$0
byte~ bitmap_plot::$1
byte* bitmap_plot::plotter
byte* bitmap_plot::plotter#0
word bitmap_plot::plotter_x
word bitmap_plot::plotter_x#0
word bitmap_plot::plotter_y
word bitmap_plot::plotter_y#0
byte bitmap_plot::x
byte bitmap_plot::x#0
byte bitmap_plot::x#1
byte bitmap_plot::x#2
byte bitmap_plot::x#3
byte bitmap_plot::x#4
byte bitmap_plot::y
byte bitmap_plot::y#0
byte bitmap_plot::y#1
byte bitmap_plot::y#2
byte bitmap_plot::y#3
byte bitmap_plot::y#4
const to_nomodify byte* bitmap_plot_bit[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_xhi[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_xlo[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_yhi[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_ylo[$100]  = { fill( $100, 0) }
void init_screen()
bool~ init_screen::$0
byte* init_screen::c
byte* init_screen::c#0
byte* init_screen::c#1
byte* init_screen::c#2
byte* init_screen::c#3
void lines()
bool~ lines::$0
number~ lines::$1
number~ lines::$2
byte lines::l
byte lines::l#0
byte lines::l#1
byte lines::l#2
byte lines::l#3
byte lines::l#4
const byte lines_cnt = 8
const byte* lines_x[]  = { $3c, $50, $6e, $50, $3c, $28, $a, $28, $3c }
const byte* lines_y[]  = { $a, $28, $3c, $50, $6e, $50, $3c, $28, $a }
void main()

Fixing inline constructor with bitmap_clear::$2 = (byte)bitmap_plot_xhi[0] w= (byte)bitmap_plot_xlo[0]
Fixing inline constructor with bitmap_plot::$2 = (byte)bitmap_plot_xhi[bitmap_plot::x#4] w= (byte)bitmap_plot_xlo[bitmap_plot::x#4]
Fixing inline constructor with bitmap_plot::$3 = (byte)bitmap_plot_yhi[bitmap_plot::y#4] w= (byte)bitmap_plot_ylo[bitmap_plot::y#4]
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) $f8 in bitmap_init::$0 = bitmap_init::x#2 & $f8
Adding number conversion cast (unumber) bitmap_init::$0 in bitmap_init::$0 = bitmap_init::x#2 & (unumber)$f8
Adding number conversion cast (unumber) 1 in bitmap_init::$2 = bitmap_init::bits#3 >> 1
Adding number conversion cast (unumber) 0 in bitmap_init::$3 = bitmap_init::bits#1 == 0
Adding number conversion cast (unumber) $80 in bitmap_init::bits#2 = $80
Adding number conversion cast (unumber) 7 in bitmap_init::$6 = bitmap_init::y#2 & 7
Adding number conversion cast (unumber) bitmap_init::$6 in bitmap_init::$6 = bitmap_init::y#2 & (unumber)7
Adding number conversion cast (unumber) bitmap_init::$8 in bitmap_init::$8 = bitmap_init::$6 | bitmap_init::$7
Adding number conversion cast (unumber) 7 in bitmap_init::$10 = bitmap_init::y#2 & 7
Adding number conversion cast (unumber) bitmap_init::$10 in bitmap_init::$10 = bitmap_init::y#2 & (unumber)7
Adding number conversion cast (unumber) 7 in bitmap_init::$11 = bitmap_init::$10 == 7
Adding number conversion cast (unumber) $28*8 in bitmap_init::$13 = bitmap_init::yoffs#3 + $28*8
Adding number conversion cast (unumber) 0 in bitmap_clear::$2 = (byte)bitmap_plot_xhi[0] w= (byte)bitmap_plot_xlo[0]
Adding number conversion cast (unumber) 0 in bitmap_clear::$2 = (byte)bitmap_plot_xhi[(unumber)0] w= (byte)bitmap_plot_xlo[0]
Adding number conversion cast (unumber) 0 in *bitmap_clear::bitmap#2 = 0
Adding number conversion cast (unumber) 1 in bitmap_line_xdyi::$0 = bitmap_line_xdyi::yd#2 >> 1
Adding number conversion cast (unumber) 1 in bitmap_line_xdyi::$6 = bitmap_line_xdyi::x1#2 + 1
Adding number conversion cast (unumber) bitmap_line_xdyi::$6 in bitmap_line_xdyi::$6 = bitmap_line_xdyi::x1#2 + (unumber)1
Adding number conversion cast (unumber) 1 in bitmap_line_xdyd::$0 = bitmap_line_xdyd::yd#2 >> 1
Adding number conversion cast (unumber) 1 in bitmap_line_xdyd::$6 = bitmap_line_xdyd::x1#2 + 1
Adding number conversion cast (unumber) bitmap_line_xdyd::$6 in bitmap_line_xdyd::$6 = bitmap_line_xdyd::x1#2 + (unumber)1
Adding number conversion cast (unumber) 1 in bitmap_line_ydxi::$0 = bitmap_line_ydxi::xd#2 >> 1
Adding number conversion cast (unumber) 1 in bitmap_line_ydxi::$6 = bitmap_line_ydxi::y1#2 + 1
Adding number conversion cast (unumber) bitmap_line_ydxi::$6 in bitmap_line_ydxi::$6 = bitmap_line_ydxi::y1#2 + (unumber)1
Adding number conversion cast (unumber) 1 in bitmap_line_ydxd::$0 = bitmap_line_ydxd::xd#2 >> 1
Adding number conversion cast (unumber) 1 in bitmap_line_ydxd::$6 = bitmap_line_ydxd::y1#2 + 1
Adding number conversion cast (unumber) bitmap_line_ydxd::$6 in bitmap_line_ydxd::$6 = bitmap_line_ydxd::y1#2 + (unumber)1
Adding number conversion cast (unumber) 0 in *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0
Adding number conversion cast (unumber) 0 in *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = 0
Adding number conversion cast (unumber) VIC_BMM|VIC_DEN|VIC_RSEL|3 in *D011 = VIC_BMM|VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) 3 in *D011 = ((unumber)) VIC_BMM|VIC_DEN|VIC_RSEL|3
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)SCREEN&$3fff/$40|(word)BITMAP&$3fff/$400
Adding number conversion cast (unumber) $3fff in *VIC_MEMORY = (byte)(word)SCREEN&(unumber)$3fff/$40|(word)BITMAP&$3fff/$400
Adding number conversion cast (unumber) 1 in lines::$1 = lines::l#3 + 1
Adding number conversion cast (unumber) lines::$1 in lines::$1 = lines::l#3 + (unumber)1
Adding number conversion cast (unumber) 1 in lines::$2 = lines::l#3 + 1
Adding number conversion cast (unumber) lines::$2 in lines::$2 = lines::l#3 + (unumber)1
Adding number conversion cast (unumber) $400 in init_screen::$0 = init_screen::c#2 != SCREEN+$400
Adding number conversion cast (unumber) $14 in *init_screen::c#3 = $14
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) $40 in *VIC_MEMORY = (byte)(word)SCREEN&(unumber)$3fff/$40|(word)BITMAP&(unumber)$3fff/$400
Adding number conversion cast (unumber) $400 in *VIC_MEMORY = (byte)(word)SCREEN&(unumber)$3fff/(unumber)$40|(word)BITMAP&(unumber)$3fff/$400
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast bitmap_init::bits#2 = (unumber)$80
Inlining cast *bitmap_clear::bitmap#2 = (unumber)0
Inlining cast bitmap_plot::plotter#0 = (byte*)bitmap_plot::$0
Inlining cast *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = (unumber)0
Inlining cast *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = (unumber)0
Inlining cast *D011 = (unumber)VIC_BMM|VIC_DEN|VIC_RSEL|(unumber)3
Inlining cast *init_screen::c#3 = (unumber)$14
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (struct MOS6569_VICII*) 53248
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 8192
Simplifying constant integer cast $f8
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant pointer cast (byte*) 0
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast bitmap_plot_xhi[(unumber)0]
Simplifying constant integer cast 0
Simplifying constant integer cast bitmap_plot_xlo[(unumber)0]
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast bitmap_plot_xhi[bitmap_plot::x#4]
Simplifying constant integer cast bitmap_plot_xlo[bitmap_plot::x#4]
Simplifying constant integer cast bitmap_plot_yhi[bitmap_plot::y#4]
Simplifying constant integer cast bitmap_plot_ylo[bitmap_plot::y#4]
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast VIC_BMM|VIC_DEN|VIC_RSEL|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast $40
Simplifying constant integer cast $3fff
Simplifying constant integer cast $400
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $400
Simplifying constant integer cast $14
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $f8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) $40
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (word) $400
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $400
Finalized unsigned number type (byte) $14
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in bitmap_init::$0 = bitmap_init::x#2 & $f8
Inferred type updated to byte in bitmap_init::$6 = bitmap_init::y#2 & 7
Inferred type updated to byte in bitmap_init::$8 = bitmap_init::$6 | bitmap_init::$7
Inferred type updated to byte in bitmap_init::$10 = bitmap_init::y#2 & 7
Inferred type updated to byte in bitmap_line_xdyi::$6 = bitmap_line_xdyi::x1#2 + 1
Inferred type updated to byte in bitmap_line_xdyd::$6 = bitmap_line_xdyd::x1#2 + 1
Inferred type updated to byte in bitmap_line_ydxi::$6 = bitmap_line_ydxi::y1#2 + 1
Inferred type updated to byte in bitmap_line_ydxd::$6 = bitmap_line_ydxd::y1#2 + 1
Inferred type updated to byte in lines::$1 = lines::l#3 + 1
Inferred type updated to byte in lines::$2 = lines::l#3 + 1
Adding pointer type conversion cast (byte*) bitmap_clear::$2 in bitmap_clear::$2 = bitmap_plot_xhi[0] w= bitmap_plot_xlo[0]
Successful SSA optimization PassNAddTypeConversionAssignment
Inversing boolean not [12] bitmap_init::$4 = bitmap_init::bits#1 != 0 from [11] bitmap_init::$3 = bitmap_init::bits#1 == 0
Inversing boolean not [31] bitmap_init::$12 = bitmap_init::$10 != 7 from [30] bitmap_init::$11 = bitmap_init::$10 == 7
Inversing boolean not [172] bitmap_line_xdyi::$4 = bitmap_line_xdyi::xd#2 >= bitmap_line_xdyi::e#1 from [171] bitmap_line_xdyi::$3 = bitmap_line_xdyi::xd#2 < bitmap_line_xdyi::e#1
Inversing boolean not [195] bitmap_line_xdyd::$4 = bitmap_line_xdyd::xd#2 >= bitmap_line_xdyd::e#1 from [194] bitmap_line_xdyd::$3 = bitmap_line_xdyd::xd#2 < bitmap_line_xdyd::e#1
Inversing boolean not [218] bitmap_line_ydxi::$4 = bitmap_line_ydxi::yd#2 >= bitmap_line_ydxi::e#1 from [217] bitmap_line_ydxi::$3 = bitmap_line_ydxi::yd#2 < bitmap_line_ydxi::e#1
Inversing boolean not [242] bitmap_line_ydxd::$4 = bitmap_line_ydxd::yd#2 >= bitmap_line_ydxd::e#1 from [241] bitmap_line_ydxd::$3 = bitmap_line_ydxd::yd#2 < bitmap_line_ydxd::e#1
Successful SSA optimization Pass2UnaryNotSimplification
Alias bitmap_init::bits#1 = bitmap_init::$2 
Alias bitmap_init::x#2 = bitmap_init::x#4 
Alias bitmap_init::bitmap#1 = bitmap_init::bitmap#4 
Alias bitmap_init::yoffs#2 = bitmap_init::yoffs#3 
Alias bitmap_init::y#2 = bitmap_init::y#4 
Alias bitmap_init::yoffs#1 = bitmap_init::$13 
Alias bitmap_clear::bitmap#0 = bitmap_clear::$2 
Alias bitmap_clear::y#2 = bitmap_clear::y#3 
Alias bitmap_clear::bitmap#1 = bitmap_clear::bitmap#4 
Alias bitmap_plot::plotter_x#0 = bitmap_plot::$2 
Alias bitmap_plot::plotter_y#0 = bitmap_plot::$3 
Alias bitmap_line::x1#1 = bitmap_line::x1#2 bitmap_line::x1#3 bitmap_line::x1#11 bitmap_line::x1#10 bitmap_line::x1#4 bitmap_line::x1#5 bitmap_line::x1#6 bitmap_line::x1#13 bitmap_line::x1#12 bitmap_line::x1#7 bitmap_line::x1#8 bitmap_line::x1#9 
Alias bitmap_line::x0#1 = bitmap_line::x0#2 bitmap_line::x0#3 bitmap_line::x0#11 bitmap_line::x0#10 bitmap_line::x0#4 bitmap_line::x0#5 bitmap_line::x0#6 bitmap_line::x0#13 bitmap_line::x0#12 bitmap_line::x0#7 bitmap_line::x0#8 bitmap_line::x0#9 
Alias bitmap_line::y0#1 = bitmap_line::y0#13 bitmap_line::y0#2 bitmap_line::y0#3 bitmap_line::y0#4 bitmap_line::y0#5 bitmap_line::y0#6 bitmap_line::y0#7 bitmap_line::y0#8 bitmap_line::y0#9 bitmap_line::y0#10 bitmap_line::y0#11 bitmap_line::y0#12 
Alias bitmap_line::y1#1 = bitmap_line::y1#13 bitmap_line::y1#2 bitmap_line::y1#3 bitmap_line::y1#4 bitmap_line::y1#5 bitmap_line::y1#6 bitmap_line::y1#7 bitmap_line::y1#8 bitmap_line::y1#9 bitmap_line::y1#10 bitmap_line::y1#11 bitmap_line::y1#12 
Alias bitmap_line::xd#1 = bitmap_line::$11 bitmap_line::xd#9 bitmap_line::xd#10 bitmap_line::xd#11 bitmap_line::xd#12 bitmap_line::xd#13 bitmap_line::xd#14 
Alias bitmap_line::xd#2 = bitmap_line::$1 bitmap_line::xd#3 bitmap_line::xd#4 bitmap_line::xd#5 bitmap_line::xd#6 bitmap_line::xd#7 bitmap_line::xd#8 
Alias bitmap_line::yd#1 = bitmap_line::$7 bitmap_line::yd#7 bitmap_line::yd#8 
Alias bitmap_line::yd#2 = bitmap_line::$3 bitmap_line::yd#5 bitmap_line::yd#6 
Alias bitmap_line::yd#11 = bitmap_line::yd#3 bitmap_line::$17 bitmap_line::yd#12 
Alias bitmap_line::yd#10 = bitmap_line::yd#4 bitmap_line::$13 bitmap_line::yd#9 
Alias bitmap_line_xdyi::e#0 = bitmap_line_xdyi::$0 
Alias bitmap_line_xdyi::x#3 = bitmap_line_xdyi::x#4 
Alias bitmap_line_xdyi::e#3 = bitmap_line_xdyi::e#5 
Alias bitmap_line_xdyi::yd#3 = bitmap_line_xdyi::yd#4 bitmap_line_xdyi::yd#6 
Alias bitmap_line_xdyi::xd#2 = bitmap_line_xdyi::xd#4 bitmap_line_xdyi::xd#3 
Alias bitmap_line_xdyi::x1#3 = bitmap_line_xdyi::x1#4 bitmap_line_xdyi::x1#5 
Alias bitmap_line_xdyi::y#3 = bitmap_line_xdyi::y#7 bitmap_line_xdyi::y#4 
Alias bitmap_line_xdyi::e#1 = bitmap_line_xdyi::$2 bitmap_line_xdyi::e#4 
Alias bitmap_line_xdyi::x#2 = bitmap_line_xdyi::x#7 
Alias bitmap_line_xdyi::e#2 = bitmap_line_xdyi::$5 
Alias bitmap_line_xdyd::e#0 = bitmap_line_xdyd::$0 
Alias bitmap_line_xdyd::x#3 = bitmap_line_xdyd::x#4 
Alias bitmap_line_xdyd::e#3 = bitmap_line_xdyd::e#5 
Alias bitmap_line_xdyd::yd#3 = bitmap_line_xdyd::yd#4 bitmap_line_xdyd::yd#6 
Alias bitmap_line_xdyd::xd#2 = bitmap_line_xdyd::xd#4 bitmap_line_xdyd::xd#3 
Alias bitmap_line_xdyd::x1#3 = bitmap_line_xdyd::x1#4 bitmap_line_xdyd::x1#5 
Alias bitmap_line_xdyd::y#3 = bitmap_line_xdyd::y#7 bitmap_line_xdyd::y#4 
Alias bitmap_line_xdyd::e#1 = bitmap_line_xdyd::$2 bitmap_line_xdyd::e#4 
Alias bitmap_line_xdyd::x#2 = bitmap_line_xdyd::x#7 
Alias bitmap_line_xdyd::e#2 = bitmap_line_xdyd::$5 
Alias bitmap_line_ydxi::e#0 = bitmap_line_ydxi::$0 
Alias bitmap_line_ydxi::y#3 = bitmap_line_ydxi::y#4 
Alias bitmap_line_ydxi::e#3 = bitmap_line_ydxi::e#5 
Alias bitmap_line_ydxi::xd#3 = bitmap_line_ydxi::xd#4 bitmap_line_ydxi::xd#6 
Alias bitmap_line_ydxi::yd#2 = bitmap_line_ydxi::yd#4 bitmap_line_ydxi::yd#3 
Alias bitmap_line_ydxi::y1#3 = bitmap_line_ydxi::y1#4 bitmap_line_ydxi::y1#5 
Alias bitmap_line_ydxi::x#3 = bitmap_line_ydxi::x#7 bitmap_line_ydxi::x#4 
Alias bitmap_line_ydxi::e#1 = bitmap_line_ydxi::$2 bitmap_line_ydxi::e#4 
Alias bitmap_line_ydxi::y#2 = bitmap_line_ydxi::y#7 
Alias bitmap_line_ydxi::e#2 = bitmap_line_ydxi::$5 
Alias bitmap_line_ydxd::e#0 = bitmap_line_ydxd::$0 
Alias bitmap_line_ydxd::y#2 = bitmap_line_ydxd::y#5 bitmap_line_ydxd::y#4 
Alias bitmap_line_ydxd::e#3 = bitmap_line_ydxd::e#5 
Alias bitmap_line_ydxd::xd#3 = bitmap_line_ydxd::xd#4 bitmap_line_ydxd::xd#6 
Alias bitmap_line_ydxd::yd#2 = bitmap_line_ydxd::yd#4 bitmap_line_ydxd::yd#3 
Alias bitmap_line_ydxd::y1#3 = bitmap_line_ydxd::y1#4 bitmap_line_ydxd::y1#5 
Alias bitmap_line_ydxd::x#3 = bitmap_line_ydxd::x#7 bitmap_line_ydxd::x#4 
Alias bitmap_line_ydxd::e#1 = bitmap_line_ydxd::$2 bitmap_line_ydxd::e#4 
Alias bitmap_line_ydxd::y#3 = bitmap_line_ydxd::y#8 
Alias bitmap_line_ydxd::e#2 = bitmap_line_ydxd::$5 
Alias lines::l#2 = lines::l#3 lines::l#4 
Alias init_screen::c#2 = init_screen::c#3 
Successful SSA optimization Pass2AliasElimination
Alias bitmap_init::x#2 = bitmap_init::x#3 
Alias bitmap_init::bitmap#1 = bitmap_init::bitmap#3 
Alias bitmap_init::y#2 = bitmap_init::y#3 
Alias bitmap_line_xdyi::x1#2 = bitmap_line_xdyi::x1#3 
Alias bitmap_line_xdyi::x#2 = bitmap_line_xdyi::x#5 
Alias bitmap_line_xdyi::yd#3 = bitmap_line_xdyi::yd#5 
Alias bitmap_line_xdyi::xd#2 = bitmap_line_xdyi::xd#6 
Alias bitmap_line_xdyd::x1#2 = bitmap_line_xdyd::x1#3 
Alias bitmap_line_xdyd::x#2 = bitmap_line_xdyd::x#5 
Alias bitmap_line_xdyd::yd#3 = bitmap_line_xdyd::yd#5 
Alias bitmap_line_xdyd::xd#2 = bitmap_line_xdyd::xd#6 
Alias bitmap_line_ydxi::y1#2 = bitmap_line_ydxi::y1#3 
Alias bitmap_line_ydxi::y#2 = bitmap_line_ydxi::y#5 
Alias bitmap_line_ydxi::xd#3 = bitmap_line_ydxi::xd#5 
Alias bitmap_line_ydxi::yd#2 = bitmap_line_ydxi::yd#6 
Alias bitmap_line_ydxd::y1#2 = bitmap_line_ydxd::y1#3 
Alias bitmap_line_ydxd::y#3 = bitmap_line_ydxd::y#6 
Alias bitmap_line_ydxd::xd#3 = bitmap_line_ydxd::xd#5 
Alias bitmap_line_ydxd::yd#2 = bitmap_line_ydxd::yd#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values bitmap_init::bitmap#2 bitmap_init::bitmap#0
Identical Phi Values bitmap_init::bitmap#1 bitmap_init::bitmap#2
Identical Phi Values bitmap_clear::y#2 bitmap_clear::y#4
Identical Phi Values bitmap_line::x0#1 bitmap_line::x0#0
Identical Phi Values bitmap_line::x1#1 bitmap_line::x1#0
Identical Phi Values bitmap_line::y0#1 bitmap_line::y0#0
Identical Phi Values bitmap_line::y1#1 bitmap_line::y1#0
Identical Phi Values bitmap_line_xdyi::yd#3 bitmap_line_xdyi::yd#2
Identical Phi Values bitmap_line_xdyi::xd#2 bitmap_line_xdyi::xd#5
Identical Phi Values bitmap_line_xdyi::x1#2 bitmap_line_xdyi::x1#6
Identical Phi Values bitmap_line_xdyd::yd#3 bitmap_line_xdyd::yd#2
Identical Phi Values bitmap_line_xdyd::xd#2 bitmap_line_xdyd::xd#5
Identical Phi Values bitmap_line_xdyd::x1#2 bitmap_line_xdyd::x1#6
Identical Phi Values bitmap_line_ydxi::xd#3 bitmap_line_ydxi::xd#2
Identical Phi Values bitmap_line_ydxi::yd#2 bitmap_line_ydxi::yd#5
Identical Phi Values bitmap_line_ydxi::y1#2 bitmap_line_ydxi::y1#6
Identical Phi Values bitmap_line_ydxd::xd#3 bitmap_line_ydxd::xd#2
Identical Phi Values bitmap_line_ydxd::yd#2 bitmap_line_ydxd::yd#5
Identical Phi Values bitmap_line_ydxd::y1#2 bitmap_line_ydxd::y1#6
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [29] bitmap_init::$10 = bitmap_init::y#2 & 7
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition bitmap_init::$4 [11] if(bitmap_init::bits#1!=0) goto bitmap_init::@2
Simple Condition bitmap_init::$5 [15] if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1
Simple Condition bitmap_init::$12 [28] if(bitmap_init::$10!=7) goto bitmap_init::@6
Simple Condition bitmap_init::$14 [32] if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5
Simple Condition bitmap_clear::$0 [45] if(bitmap_clear::x#1!=rangelast(0,$c7)) goto bitmap_clear::@2
Simple Condition bitmap_clear::$1 [48] if(bitmap_clear::y#1!=rangelast(0,$27)) goto bitmap_clear::@1
Simple Condition bitmap_line::$0 [62] if(bitmap_line::x0#0<bitmap_line::x1#0) goto bitmap_line::@1
Simple Condition bitmap_line::$12 [65] if(bitmap_line::y0#0<bitmap_line::y1#0) goto bitmap_line::@11
Simple Condition bitmap_line::$2 [68] if(bitmap_line::y0#0<bitmap_line::y1#0) goto bitmap_line::@7
Simple Condition bitmap_line::$8 [71] if(bitmap_line::yd#1<bitmap_line::xd#2) goto bitmap_line::@9
Simple Condition bitmap_line::$4 [74] if(bitmap_line::yd#2<bitmap_line::xd#2) goto bitmap_line::@8
Simple Condition bitmap_line::$18 [101] if(bitmap_line::yd#11<bitmap_line::xd#1) goto bitmap_line::@13
Simple Condition bitmap_line::$14 [104] if(bitmap_line::yd#10<bitmap_line::xd#1) goto bitmap_line::@12
Simple Condition bitmap_line_xdyi::$4 [139] if(bitmap_line_xdyi::xd#5>=bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2
Simple Condition bitmap_line_xdyi::$7 [143] if(bitmap_line_xdyi::x#2!=bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1
Simple Condition bitmap_line_xdyd::$4 [156] if(bitmap_line_xdyd::xd#5>=bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2
Simple Condition bitmap_line_xdyd::$7 [160] if(bitmap_line_xdyd::x#2!=bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1
Simple Condition bitmap_line_ydxi::$4 [173] if(bitmap_line_ydxi::yd#5>=bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2
Simple Condition bitmap_line_ydxi::$7 [177] if(bitmap_line_ydxi::y#2!=bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1
Simple Condition bitmap_line_ydxd::$4 [190] if(bitmap_line_ydxd::yd#5>=bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2
Simple Condition bitmap_line_ydxd::$7 [194] if(bitmap_line_ydxd::y#3!=bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1
Simple Condition lines::$0 [212] if(lines::l#2<lines_cnt) goto lines::@2
Simple Condition init_screen::$0 [225] if(init_screen::c#2!=SCREEN+$400) goto init_screen::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant bitmap_init::bits#0 = $80
Constant bitmap_init::x#0 = 0
Constant bitmap_init::bits#2 = $80
Constant bitmap_init::yoffs#0 = (byte*) 0
Constant bitmap_init::y#0 = 0
Constant bitmap_clear::y#0 = 0
Constant bitmap_clear::x#0 = 0
Constant bitmap_line::xd#0 = 0
Constant bitmap_line::yd#0 = 0
Constant bitmap_init::bitmap#0 = BITMAP
Constant lines::l#0 = 0
Constant init_screen::c#0 = SCREEN
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [207] if(true) goto main::@1
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [13] bitmap_init::x#1 = ++ bitmap_init::x#2 to ++
Resolved ranged comparison value [15] if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1 to 0
Resolved ranged next value [30] bitmap_init::y#1 = ++ bitmap_init::y#2 to ++
Resolved ranged comparison value [32] if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5 to 0
Resolved ranged next value [43] bitmap_clear::x#1 = ++ bitmap_clear::x#2 to ++
Resolved ranged comparison value [45] if(bitmap_clear::x#1!=rangelast(0,$c7)) goto bitmap_clear::@2 to $c8
Resolved ranged next value [46] bitmap_clear::y#1 = ++ bitmap_clear::y#4 to ++
Resolved ranged comparison value [48] if(bitmap_clear::y#1!=rangelast(0,$27)) goto bitmap_clear::@1 to $28
Simplifying expression containing zero bitmap_plot_xhi in [35] bitmap_clear::$3 = bitmap_plot_xhi[0] w= bitmap_plot_xlo[0]
Simplifying expression containing zero bitmap_plot_xlo in [35] bitmap_clear::$3 = *bitmap_plot_xhi w= bitmap_plot_xlo[0]
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant bitmap_line::xd#0
Eliminating unused constant bitmap_line::yd#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 0 in [10] if(bitmap_init::x#1!=0) goto bitmap_init::@1
Adding number conversion cast (unumber) 0 in [22] if(bitmap_init::y#1!=0) goto bitmap_init::@5
Adding number conversion cast (unumber) $c8 in [32] if(bitmap_clear::x#1!=$c8) goto bitmap_clear::@2
Adding number conversion cast (unumber) $28 in [34] if(bitmap_clear::y#1!=$28) goto bitmap_clear::@1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast [26] bitmap_clear::bitmap#0 = (byte*)bitmap_clear::$3
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $c8
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias bitmap_init::$10 = bitmap_init::$6 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [3] bitmap_init::$1 = > bitmap_init::bitmap#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant bitmap_init::$1 = >bitmap_init::bitmap#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [24] bitmap_clear::bitmap#0 = (byte*)bitmap_clear::$3 keeping bitmap_clear::bitmap#0
Inlining Noop Cast [38] bitmap_plot::plotter#0 = (byte*)bitmap_plot::$0 keeping bitmap_plot::plotter#0
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings bitmap_init::bits#0
Inlining constant with var siblings bitmap_init::x#0
Inlining constant with var siblings bitmap_init::bits#2
Inlining constant with var siblings bitmap_init::yoffs#0
Inlining constant with var siblings bitmap_init::y#0
Inlining constant with var siblings bitmap_clear::y#0
Inlining constant with var siblings bitmap_clear::x#0
Inlining constant with var siblings lines::l#0
Inlining constant with var siblings init_screen::c#0
Constant inlined bitmap_init::yoffs#0 = (byte*) 0
Constant inlined lines::l#0 = 0
Constant inlined bitmap_init::$1 = >BITMAP
Constant inlined bitmap_init::y#0 = 0
Constant inlined bitmap_clear::x#0 = 0
Constant inlined bitmap_clear::y#0 = 0
Constant inlined bitmap_init::bits#0 = $80
Constant inlined bitmap_init::x#0 = 0
Constant inlined init_screen::c#0 = SCREEN
Constant inlined bitmap_init::bits#2 = $80
Constant inlined bitmap_init::bitmap#0 = BITMAP
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in assignment (lines_x+1)[lines::$1]
Consolidated array index constant in assignment (lines_y+1)[lines::$2]
Successful SSA optimization Pass2ConstantAdditionElimination
Alias lines::l#2 = lines::$1 lines::$2 
Successful SSA optimization Pass2AliasElimination
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting bitmap_init::@8(between bitmap_init::@2 and bitmap_init::@1)
Added new block during phi lifting bitmap_init::@9(between bitmap_init::@1 and bitmap_init::@2)
Added new block during phi lifting bitmap_init::@10(between bitmap_init::@6 and bitmap_init::@5)
Added new block during phi lifting bitmap_init::@11(between bitmap_init::@5 and bitmap_init::@6)
Added new block during phi lifting bitmap_clear::@4(between bitmap_clear::@3 and bitmap_clear::@1)
Added new block during phi lifting bitmap_clear::@5(between bitmap_clear::@2 and bitmap_clear::@2)
Added new block during phi lifting bitmap_line_xdyi::@5(between bitmap_line_xdyi::@2 and bitmap_line_xdyi::@1)
Added new block during phi lifting bitmap_line_xdyi::@6(between bitmap_line_xdyi::@4 and bitmap_line_xdyi::@2)
Added new block during phi lifting bitmap_line_xdyd::@5(between bitmap_line_xdyd::@2 and bitmap_line_xdyd::@1)
Added new block during phi lifting bitmap_line_xdyd::@6(between bitmap_line_xdyd::@4 and bitmap_line_xdyd::@2)
Added new block during phi lifting bitmap_line_ydxi::@5(between bitmap_line_ydxi::@2 and bitmap_line_ydxi::@1)
Added new block during phi lifting bitmap_line_ydxi::@6(between bitmap_line_ydxi::@4 and bitmap_line_ydxi::@2)
Added new block during phi lifting bitmap_line_ydxd::@5(between bitmap_line_ydxd::@2 and bitmap_line_ydxd::@1)
Added new block during phi lifting bitmap_line_ydxd::@6(between bitmap_line_ydxd::@4 and bitmap_line_ydxd::@2)
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@3
Adding NOP phi() at start of bitmap_init::@4
Adding NOP phi() at start of init_screen
Adding NOP phi() at start of lines
Adding NOP phi() at start of bitmap_line::@16
Adding NOP phi() at start of bitmap_line::@15
Adding NOP phi() at start of bitmap_line::@18
Adding NOP phi() at start of bitmap_line::@17
Adding NOP phi() at start of bitmap_line::@20
Adding NOP phi() at start of bitmap_line::@19
Adding NOP phi() at start of bitmap_line::@22
Adding NOP phi() at start of bitmap_line::@21
CALL GRAPH
Calls in [main] to bitmap_init:4 bitmap_clear:6 init_screen:8 lines:11 
Calls in [lines] to bitmap_line:77 
Calls in [bitmap_line] to bitmap_line_ydxi:95 bitmap_line_xdyi:108 bitmap_line_ydxd:122 bitmap_line_xdyd:134 bitmap_line_ydxd:150 bitmap_line_xdyd:162 bitmap_line_ydxi:176 bitmap_line_xdyi:188 
Calls in [bitmap_line_ydxi] to bitmap_plot:200 
Calls in [bitmap_line_xdyi] to bitmap_plot:227 
Calls in [bitmap_line_ydxd] to bitmap_plot:254 
Calls in [bitmap_line_xdyd] to bitmap_plot:281 

Created 54 initial phi equivalence classes
Coalesced [35] bitmap_init::yoffs#7 = bitmap_init::yoffs#1
Coalesced [40] bitmap_init::y#5 = bitmap_init::y#1
Coalesced [41] bitmap_init::yoffs#5 = bitmap_init::yoffs#4
Coalesced (already) [42] bitmap_init::yoffs#6 = bitmap_init::yoffs#2
Coalesced [43] bitmap_init::x#5 = bitmap_init::x#1
Coalesced [44] bitmap_init::bits#5 = bitmap_init::bits#4
Coalesced [45] bitmap_init::bits#6 = bitmap_init::bits#1
Coalesced [49] bitmap_clear::bitmap#7 = bitmap_clear::bitmap#3
Coalesced [58] bitmap_clear::bitmap#6 = bitmap_clear::bitmap#1
Coalesced [59] bitmap_clear::y#5 = bitmap_clear::y#1
Coalesced (already) [60] bitmap_clear::bitmap#8 = bitmap_clear::bitmap#1
Coalesced [61] bitmap_clear::x#3 = bitmap_clear::x#1
Coalesced [68] init_screen::c#4 = init_screen::c#1
Coalesced [79] lines::l#5 = lines::l#1
Coalesced [90] bitmap_line_ydxi::xd#8 = bitmap_line_ydxi::xd#0
Coalesced [91] bitmap_line_ydxi::x#9 = bitmap_line_ydxi::x#0
Coalesced [92] bitmap_line_ydxi::y#9 = bitmap_line_ydxi::y#0
Coalesced [93] bitmap_line_ydxi::yd#8 = bitmap_line_ydxi::yd#0
Coalesced [94] bitmap_line_ydxi::y1#8 = bitmap_line_ydxi::y1#0
Coalesced [103] bitmap_line_xdyi::yd#8 = bitmap_line_xdyi::yd#0
Coalesced [104] bitmap_line_xdyi::x#9 = bitmap_line_xdyi::x#0
Coalesced [105] bitmap_line_xdyi::y#9 = bitmap_line_xdyi::y#0
Coalesced [106] bitmap_line_xdyi::xd#8 = bitmap_line_xdyi::xd#0
Coalesced [107] bitmap_line_xdyi::x1#8 = bitmap_line_xdyi::x1#0
Coalesced [117] bitmap_line_ydxd::xd#7 = bitmap_line_ydxd::xd#0
Coalesced [118] bitmap_line_ydxd::x#8 = bitmap_line_ydxd::x#0
Coalesced [119] bitmap_line_ydxd::y#9 = bitmap_line_ydxd::y#0
Coalesced [120] bitmap_line_ydxd::yd#7 = bitmap_line_ydxd::yd#0
Coalesced [121] bitmap_line_ydxd::y1#7 = bitmap_line_ydxd::y1#0
Coalesced [129] bitmap_line_xdyd::yd#8 = bitmap_line_xdyd::yd#0
Coalesced [130] bitmap_line_xdyd::x#9 = bitmap_line_xdyd::x#0
Coalesced [131] bitmap_line_xdyd::y#9 = bitmap_line_xdyd::y#0
Coalesced [132] bitmap_line_xdyd::xd#8 = bitmap_line_xdyd::xd#0
Coalesced [133] bitmap_line_xdyd::x1#8 = bitmap_line_xdyd::x1#0
Coalesced [145] bitmap_line_ydxd::xd#8 = bitmap_line_ydxd::xd#1
Coalesced [146] bitmap_line_ydxd::x#9 = bitmap_line_ydxd::x#1
Coalesced [147] bitmap_line_ydxd::y#10 = bitmap_line_ydxd::y#1
Coalesced [148] bitmap_line_ydxd::yd#8 = bitmap_line_ydxd::yd#1
Coalesced [149] bitmap_line_ydxd::y1#8 = bitmap_line_ydxd::y1#1
Coalesced [157] bitmap_line_xdyd::yd#7 = bitmap_line_xdyd::yd#1
Coalesced [158] bitmap_line_xdyd::x#8 = bitmap_line_xdyd::x#1
Coalesced [159] bitmap_line_xdyd::y#8 = bitmap_line_xdyd::y#1
Coalesced [160] bitmap_line_xdyd::xd#7 = bitmap_line_xdyd::xd#1
Coalesced [161] bitmap_line_xdyd::x1#7 = bitmap_line_xdyd::x1#1
Coalesced [171] bitmap_line_ydxi::xd#7 = bitmap_line_ydxi::xd#1
Coalesced [172] bitmap_line_ydxi::x#8 = bitmap_line_ydxi::x#1
Coalesced [173] bitmap_line_ydxi::y#8 = bitmap_line_ydxi::y#1
Coalesced [174] bitmap_line_ydxi::yd#7 = bitmap_line_ydxi::yd#1
Coalesced [175] bitmap_line_ydxi::y1#7 = bitmap_line_ydxi::y1#1
Coalesced [183] bitmap_line_xdyi::yd#7 = bitmap_line_xdyi::yd#1
Coalesced [184] bitmap_line_xdyi::x#8 = bitmap_line_xdyi::x#1
Coalesced [185] bitmap_line_xdyi::y#8 = bitmap_line_xdyi::y#1
Coalesced [186] bitmap_line_xdyi::xd#7 = bitmap_line_xdyi::xd#1
Coalesced [187] bitmap_line_xdyi::x1#7 = bitmap_line_xdyi::x1#1
Coalesced [192] bitmap_line_ydxi::x#10 = bitmap_line_ydxi::x#5
Coalesced [193] bitmap_line_ydxi::y#10 = bitmap_line_ydxi::y#6
Coalesced [194] bitmap_line_ydxi::e#7 = bitmap_line_ydxi::e#0
Coalesced [198] bitmap_plot::x#8 = bitmap_plot::x#2
Coalesced [199] bitmap_plot::y#8 = bitmap_plot::y#2
Coalesced [206] bitmap_line_ydxi::x#12 = bitmap_line_ydxi::x#2
Coalesced [207] bitmap_line_ydxi::e#9 = bitmap_line_ydxi::e#2
Coalesced [212] bitmap_line_ydxi::x#11 = bitmap_line_ydxi::x#6
Coalesced [213] bitmap_line_ydxi::y#11 = bitmap_line_ydxi::y#2
Coalesced [214] bitmap_line_ydxi::e#8 = bitmap_line_ydxi::e#6
Coalesced (already) [215] bitmap_line_ydxi::x#13 = bitmap_line_ydxi::x#3
Coalesced [216] bitmap_line_ydxi::e#10 = bitmap_line_ydxi::e#1
Coalesced [219] bitmap_line_xdyi::x#10 = bitmap_line_xdyi::x#6
Coalesced [220] bitmap_line_xdyi::y#10 = bitmap_line_xdyi::y#5
Coalesced [221] bitmap_line_xdyi::e#7 = bitmap_line_xdyi::e#0
Coalesced [225] bitmap_plot::x#6 = bitmap_plot::x#0
Coalesced [226] bitmap_plot::y#6 = bitmap_plot::y#0
Coalesced [233] bitmap_line_xdyi::y#12 = bitmap_line_xdyi::y#2
Coalesced [234] bitmap_line_xdyi::e#9 = bitmap_line_xdyi::e#2
Coalesced [239] bitmap_line_xdyi::x#11 = bitmap_line_xdyi::x#2
Coalesced [240] bitmap_line_xdyi::y#11 = bitmap_line_xdyi::y#6
Coalesced [241] bitmap_line_xdyi::e#8 = bitmap_line_xdyi::e#6
Coalesced (already) [242] bitmap_line_xdyi::y#13 = bitmap_line_xdyi::y#3
Coalesced [243] bitmap_line_xdyi::e#10 = bitmap_line_xdyi::e#1
Coalesced [246] bitmap_line_ydxd::x#10 = bitmap_line_ydxd::x#5
Coalesced [247] bitmap_line_ydxd::y#11 = bitmap_line_ydxd::y#7
Coalesced [248] bitmap_line_ydxd::e#7 = bitmap_line_ydxd::e#0
Coalesced [252] bitmap_plot::x#7 = bitmap_plot::x#3
Coalesced [253] bitmap_plot::y#7 = bitmap_plot::y#3
Coalesced [260] bitmap_line_ydxd::x#12 = bitmap_line_ydxd::x#2
Coalesced [261] bitmap_line_ydxd::e#9 = bitmap_line_ydxd::e#2
Coalesced [266] bitmap_line_ydxd::x#11 = bitmap_line_ydxd::x#6
Coalesced [267] bitmap_line_ydxd::y#12 = bitmap_line_ydxd::y#3
Coalesced [268] bitmap_line_ydxd::e#8 = bitmap_line_ydxd::e#6
Coalesced (already) [269] bitmap_line_ydxd::x#13 = bitmap_line_ydxd::x#3
Coalesced [270] bitmap_line_ydxd::e#10 = bitmap_line_ydxd::e#1
Coalesced [273] bitmap_line_xdyd::x#10 = bitmap_line_xdyd::x#6
Coalesced [274] bitmap_line_xdyd::y#10 = bitmap_line_xdyd::y#5
Coalesced [275] bitmap_line_xdyd::e#7 = bitmap_line_xdyd::e#0
Coalesced [279] bitmap_plot::x#5 = bitmap_plot::x#1
Coalesced [280] bitmap_plot::y#5 = bitmap_plot::y#1
Coalesced [287] bitmap_line_xdyd::y#12 = bitmap_line_xdyd::y#2
Coalesced [288] bitmap_line_xdyd::e#9 = bitmap_line_xdyd::e#2
Coalesced [293] bitmap_line_xdyd::x#11 = bitmap_line_xdyd::x#2
Coalesced [294] bitmap_line_xdyd::y#11 = bitmap_line_xdyd::y#6
Coalesced [295] bitmap_line_xdyd::e#8 = bitmap_line_xdyd::e#6
Coalesced (already) [296] bitmap_line_xdyd::y#13 = bitmap_line_xdyd::y#3
Coalesced [297] bitmap_line_xdyd::e#10 = bitmap_line_xdyd::e#1
Coalesced down to 35 phi equivalence classes
Culled Empty Block label main::@4
Culled Empty Block label main::@5
Culled Empty Block label bitmap_init::@3
Culled Empty Block label bitmap_init::@4
Culled Empty Block label bitmap_init::@10
Culled Empty Block label bitmap_init::@11
Culled Empty Block label bitmap_init::@8
Culled Empty Block label bitmap_clear::@4
Culled Empty Block label bitmap_clear::@5
Culled Empty Block label bitmap_line::@16
Culled Empty Block label bitmap_line::@15
Culled Empty Block label bitmap_line::@18
Culled Empty Block label bitmap_line::@17
Culled Empty Block label bitmap_line::@20
Culled Empty Block label bitmap_line::@19
Culled Empty Block label bitmap_line::@22
Culled Empty Block label bitmap_line::@21
Culled Empty Block label bitmap_line_ydxi::@5
Culled Empty Block label bitmap_line_ydxi::@6
Culled Empty Block label bitmap_line_xdyi::@5
Culled Empty Block label bitmap_line_xdyi::@6
Culled Empty Block label bitmap_line_ydxd::@5
Culled Empty Block label bitmap_line_ydxd::@6
Culled Empty Block label bitmap_line_xdyd::@5
Culled Empty Block label bitmap_line_xdyd::@6
Renumbering block bitmap_init::@5 to bitmap_init::@3
Renumbering block bitmap_init::@6 to bitmap_init::@4
Renumbering block bitmap_init::@7 to bitmap_init::@5
Renumbering block bitmap_init::@9 to bitmap_init::@6
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@6
Adding NOP phi() at start of init_screen
Adding NOP phi() at start of lines

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0
  [1] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = 0
  [2] *D011 = VIC_BMM|VIC_DEN|VIC_RSEL|3
  [3] *VIC_MEMORY = (byte)(word)SCREEN&$3fff/$40|(word)BITMAP&$3fff/$400
  [4] call bitmap_init 
  to:main::@2
main::@2: scope:[main]  from main
  [5] phi()
  [6] call bitmap_clear 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [7] phi()
  [8] call init_screen 
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@3
  [9] phi()
  [10] call lines 
  to:main::@1

void bitmap_init(byte* bitmap_init::bitmap)
bitmap_init: scope:[bitmap_init]  from main
  [11] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [12] bitmap_init::bits#3 = phi( bitmap_init/$80, bitmap_init::@2/bitmap_init::bits#4 )
  [12] bitmap_init::x#2 = phi( bitmap_init/0, bitmap_init::@2/bitmap_init::x#1 )
  [13] bitmap_init::$0 = bitmap_init::x#2 & $f8
  [14] bitmap_plot_xlo[bitmap_init::x#2] = bitmap_init::$0
  [15] bitmap_plot_xhi[bitmap_init::x#2] = >BITMAP
  [16] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3
  [17] bitmap_init::bits#1 = bitmap_init::bits#3 >> 1
  [18] if(bitmap_init::bits#1!=0) goto bitmap_init::@6
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@1
  [19] phi()
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@6
  [20] bitmap_init::bits#4 = phi( bitmap_init::@6/bitmap_init::bits#1, bitmap_init::@1/$80 )
  [21] bitmap_init::x#1 = ++ bitmap_init::x#2
  [22] if(bitmap_init::x#1!=0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [23] bitmap_init::yoffs#2 = phi( bitmap_init::@2/(byte*) 0, bitmap_init::@4/bitmap_init::yoffs#4 )
  [23] bitmap_init::y#2 = phi( bitmap_init::@2/0, bitmap_init::@4/bitmap_init::y#1 )
  [24] bitmap_init::$10 = bitmap_init::y#2 & 7
  [25] bitmap_init::$7 = < bitmap_init::yoffs#2
  [26] bitmap_init::$8 = bitmap_init::$10 | bitmap_init::$7
  [27] bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$8
  [28] bitmap_init::$9 = > bitmap_init::yoffs#2
  [29] bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$9
  [30] if(bitmap_init::$10!=7) goto bitmap_init::@4
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@3
  [31] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@5
  [32] bitmap_init::yoffs#4 = phi( bitmap_init::@3/bitmap_init::yoffs#2, bitmap_init::@5/bitmap_init::yoffs#1 )
  [33] bitmap_init::y#1 = ++ bitmap_init::y#2
  [34] if(bitmap_init::y#1!=0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [35] return 
  to:@return

void bitmap_clear()
bitmap_clear: scope:[bitmap_clear]  from main::@2
  [36] bitmap_clear::bitmap#0 = *bitmap_plot_xhi w= *bitmap_plot_xlo
  [37] bitmap_clear::bitmap#5 = (byte*)bitmap_clear::bitmap#0
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  [38] bitmap_clear::y#4 = phi( bitmap_clear/0, bitmap_clear::@3/bitmap_clear::y#1 )
  [38] bitmap_clear::bitmap#3 = phi( bitmap_clear/bitmap_clear::bitmap#5, bitmap_clear::@3/bitmap_clear::bitmap#1 )
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  [39] bitmap_clear::x#2 = phi( bitmap_clear::@1/0, bitmap_clear::@2/bitmap_clear::x#1 )
  [39] bitmap_clear::bitmap#2 = phi( bitmap_clear::@1/bitmap_clear::bitmap#3, bitmap_clear::@2/bitmap_clear::bitmap#1 )
  [40] *bitmap_clear::bitmap#2 = 0
  [41] bitmap_clear::bitmap#1 = ++ bitmap_clear::bitmap#2
  [42] bitmap_clear::x#1 = ++ bitmap_clear::x#2
  [43] if(bitmap_clear::x#1!=$c8) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  [44] bitmap_clear::y#1 = ++ bitmap_clear::y#4
  [45] if(bitmap_clear::y#1!=$28) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  [46] return 
  to:@return

void init_screen()
init_screen: scope:[init_screen]  from main::@3
  [47] phi()
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@2
  [48] init_screen::c#2 = phi( init_screen/SCREEN, init_screen::@2/init_screen::c#1 )
  [49] if(init_screen::c#2!=SCREEN+$400) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@1
  [50] return 
  to:@return
init_screen::@2: scope:[init_screen]  from init_screen::@1
  [51] *init_screen::c#2 = $14
  [52] init_screen::c#1 = ++ init_screen::c#2
  to:init_screen::@1

void lines()
lines: scope:[lines]  from main::@1
  [53] phi()
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  [54] lines::l#2 = phi( lines/0, lines::@3/lines::l#1 )
  [55] if(lines::l#2<lines_cnt) goto lines::@2
  to:lines::@return
lines::@return: scope:[lines]  from lines::@1
  [56] return 
  to:@return
lines::@2: scope:[lines]  from lines::@1
  [57] bitmap_line::x0#0 = lines_x[lines::l#2]
  [58] bitmap_line::x1#0 = (lines_x+1)[lines::l#2]
  [59] bitmap_line::y0#0 = lines_y[lines::l#2]
  [60] bitmap_line::y1#0 = (lines_y+1)[lines::l#2]
  [61] call bitmap_line 
  to:lines::@3
lines::@3: scope:[lines]  from lines::@2
  [62] lines::l#1 = ++ lines::l#2
  to:lines::@1

void bitmap_line(byte bitmap_line::x0 , byte bitmap_line::x1 , byte bitmap_line::y0 , byte bitmap_line::y1)
bitmap_line: scope:[bitmap_line]  from lines::@2
  [63] if(bitmap_line::x0#0<bitmap_line::x1#0) goto bitmap_line::@1
  to:bitmap_line::@2
bitmap_line::@2: scope:[bitmap_line]  from bitmap_line
  [64] bitmap_line::xd#2 = bitmap_line::x0#0 - bitmap_line::x1#0
  [65] if(bitmap_line::y0#0<bitmap_line::y1#0) goto bitmap_line::@7
  to:bitmap_line::@3
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line::@2
  [66] bitmap_line::yd#2 = bitmap_line::y0#0 - bitmap_line::y1#0
  [67] if(bitmap_line::yd#2<bitmap_line::xd#2) goto bitmap_line::@8
  to:bitmap_line::@4
bitmap_line::@4: scope:[bitmap_line]  from bitmap_line::@3
  [68] bitmap_line_ydxi::y#0 = bitmap_line::y1#0
  [69] bitmap_line_ydxi::x#0 = bitmap_line::x1#0
  [70] bitmap_line_ydxi::y1#0 = bitmap_line::y0#0
  [71] bitmap_line_ydxi::yd#0 = bitmap_line::yd#2
  [72] bitmap_line_ydxi::xd#0 = bitmap_line::xd#2
  [73] call bitmap_line_ydxi 
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@12 bitmap_line::@13 bitmap_line::@14 bitmap_line::@4 bitmap_line::@6 bitmap_line::@8 bitmap_line::@9
  [74] return 
  to:@return
bitmap_line::@8: scope:[bitmap_line]  from bitmap_line::@3
  [75] bitmap_line_xdyi::x#0 = bitmap_line::x1#0
  [76] bitmap_line_xdyi::y#0 = bitmap_line::y1#0
  [77] bitmap_line_xdyi::x1#0 = bitmap_line::x0#0
  [78] bitmap_line_xdyi::xd#0 = bitmap_line::xd#2
  [79] bitmap_line_xdyi::yd#0 = bitmap_line::yd#2
  [80] call bitmap_line_xdyi 
  to:bitmap_line::@return
bitmap_line::@7: scope:[bitmap_line]  from bitmap_line::@2
  [81] bitmap_line::yd#1 = bitmap_line::y1#0 - bitmap_line::y0#0
  [82] if(bitmap_line::yd#1<bitmap_line::xd#2) goto bitmap_line::@9
  to:bitmap_line::@10
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@7
  [83] bitmap_line_ydxd::y#0 = bitmap_line::y0#0
  [84] bitmap_line_ydxd::x#0 = bitmap_line::x0#0
  [85] bitmap_line_ydxd::y1#0 = bitmap_line::y1#0
  [86] bitmap_line_ydxd::yd#0 = bitmap_line::yd#1
  [87] bitmap_line_ydxd::xd#0 = bitmap_line::xd#2
  [88] call bitmap_line_ydxd 
  to:bitmap_line::@return
bitmap_line::@9: scope:[bitmap_line]  from bitmap_line::@7
  [89] bitmap_line_xdyd::x#0 = bitmap_line::x1#0
  [90] bitmap_line_xdyd::y#0 = bitmap_line::y1#0
  [91] bitmap_line_xdyd::x1#0 = bitmap_line::x0#0
  [92] bitmap_line_xdyd::xd#0 = bitmap_line::xd#2
  [93] bitmap_line_xdyd::yd#0 = bitmap_line::yd#1
  [94] call bitmap_line_xdyd 
  to:bitmap_line::@return
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line
  [95] bitmap_line::xd#1 = bitmap_line::x1#0 - bitmap_line::x0#0
  [96] if(bitmap_line::y0#0<bitmap_line::y1#0) goto bitmap_line::@11
  to:bitmap_line::@5
bitmap_line::@5: scope:[bitmap_line]  from bitmap_line::@1
  [97] bitmap_line::yd#10 = bitmap_line::y0#0 - bitmap_line::y1#0
  [98] if(bitmap_line::yd#10<bitmap_line::xd#1) goto bitmap_line::@12
  to:bitmap_line::@6
bitmap_line::@6: scope:[bitmap_line]  from bitmap_line::@5
  [99] bitmap_line_ydxd::y#1 = bitmap_line::y1#0
  [100] bitmap_line_ydxd::x#1 = bitmap_line::x1#0
  [101] bitmap_line_ydxd::y1#1 = bitmap_line::y0#0
  [102] bitmap_line_ydxd::yd#1 = bitmap_line::yd#10
  [103] bitmap_line_ydxd::xd#1 = bitmap_line::xd#1
  [104] call bitmap_line_ydxd 
  to:bitmap_line::@return
bitmap_line::@12: scope:[bitmap_line]  from bitmap_line::@5
  [105] bitmap_line_xdyd::x#1 = bitmap_line::x0#0
  [106] bitmap_line_xdyd::y#1 = bitmap_line::y0#0
  [107] bitmap_line_xdyd::x1#1 = bitmap_line::x1#0
  [108] bitmap_line_xdyd::xd#1 = bitmap_line::xd#1
  [109] bitmap_line_xdyd::yd#1 = bitmap_line::yd#10
  [110] call bitmap_line_xdyd 
  to:bitmap_line::@return
bitmap_line::@11: scope:[bitmap_line]  from bitmap_line::@1
  [111] bitmap_line::yd#11 = bitmap_line::y1#0 - bitmap_line::y0#0
  [112] if(bitmap_line::yd#11<bitmap_line::xd#1) goto bitmap_line::@13
  to:bitmap_line::@14
bitmap_line::@14: scope:[bitmap_line]  from bitmap_line::@11
  [113] bitmap_line_ydxi::y#1 = bitmap_line::y0#0
  [114] bitmap_line_ydxi::x#1 = bitmap_line::x0#0
  [115] bitmap_line_ydxi::y1#1 = bitmap_line::y1#0
  [116] bitmap_line_ydxi::yd#1 = bitmap_line::yd#11
  [117] bitmap_line_ydxi::xd#1 = bitmap_line::xd#1
  [118] call bitmap_line_ydxi 
  to:bitmap_line::@return
bitmap_line::@13: scope:[bitmap_line]  from bitmap_line::@11
  [119] bitmap_line_xdyi::x#1 = bitmap_line::x0#0
  [120] bitmap_line_xdyi::y#1 = bitmap_line::y0#0
  [121] bitmap_line_xdyi::x1#1 = bitmap_line::x1#0
  [122] bitmap_line_xdyi::xd#1 = bitmap_line::xd#1
  [123] bitmap_line_xdyi::yd#1 = bitmap_line::yd#11
  [124] call bitmap_line_xdyi 
  to:bitmap_line::@return

void bitmap_line_ydxi(byte bitmap_line_ydxi::y , byte bitmap_line_ydxi::x , byte bitmap_line_ydxi::y1 , byte bitmap_line_ydxi::yd , byte bitmap_line_ydxi::xd)
bitmap_line_ydxi: scope:[bitmap_line_ydxi]  from bitmap_line::@14 bitmap_line::@4
  [125] bitmap_line_ydxi::y1#6 = phi( bitmap_line::@14/bitmap_line_ydxi::y1#1, bitmap_line::@4/bitmap_line_ydxi::y1#0 )
  [125] bitmap_line_ydxi::yd#5 = phi( bitmap_line::@14/bitmap_line_ydxi::yd#1, bitmap_line::@4/bitmap_line_ydxi::yd#0 )
  [125] bitmap_line_ydxi::y#6 = phi( bitmap_line::@14/bitmap_line_ydxi::y#1, bitmap_line::@4/bitmap_line_ydxi::y#0 )
  [125] bitmap_line_ydxi::x#5 = phi( bitmap_line::@14/bitmap_line_ydxi::x#1, bitmap_line::@4/bitmap_line_ydxi::x#0 )
  [125] bitmap_line_ydxi::xd#2 = phi( bitmap_line::@14/bitmap_line_ydxi::xd#1, bitmap_line::@4/bitmap_line_ydxi::xd#0 )
  [126] bitmap_line_ydxi::e#0 = bitmap_line_ydxi::xd#2 >> 1
  to:bitmap_line_ydxi::@1
bitmap_line_ydxi::@1: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi bitmap_line_ydxi::@2
  [127] bitmap_line_ydxi::e#3 = phi( bitmap_line_ydxi/bitmap_line_ydxi::e#0, bitmap_line_ydxi::@2/bitmap_line_ydxi::e#6 )
  [127] bitmap_line_ydxi::y#3 = phi( bitmap_line_ydxi/bitmap_line_ydxi::y#6, bitmap_line_ydxi::@2/bitmap_line_ydxi::y#2 )
  [127] bitmap_line_ydxi::x#3 = phi( bitmap_line_ydxi/bitmap_line_ydxi::x#5, bitmap_line_ydxi::@2/bitmap_line_ydxi::x#6 )
  [128] bitmap_plot::x#2 = bitmap_line_ydxi::x#3
  [129] bitmap_plot::y#2 = bitmap_line_ydxi::y#3
  [130] call bitmap_plot 
  to:bitmap_line_ydxi::@4
bitmap_line_ydxi::@4: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@1
  [131] bitmap_line_ydxi::y#2 = ++ bitmap_line_ydxi::y#3
  [132] bitmap_line_ydxi::e#1 = bitmap_line_ydxi::e#3 + bitmap_line_ydxi::xd#2
  [133] if(bitmap_line_ydxi::yd#5>=bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2
  to:bitmap_line_ydxi::@3
bitmap_line_ydxi::@3: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@4
  [134] bitmap_line_ydxi::x#2 = ++ bitmap_line_ydxi::x#3
  [135] bitmap_line_ydxi::e#2 = bitmap_line_ydxi::e#1 - bitmap_line_ydxi::yd#5
  to:bitmap_line_ydxi::@2
bitmap_line_ydxi::@2: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4
  [136] bitmap_line_ydxi::e#6 = phi( bitmap_line_ydxi::@3/bitmap_line_ydxi::e#2, bitmap_line_ydxi::@4/bitmap_line_ydxi::e#1 )
  [136] bitmap_line_ydxi::x#6 = phi( bitmap_line_ydxi::@3/bitmap_line_ydxi::x#2, bitmap_line_ydxi::@4/bitmap_line_ydxi::x#3 )
  [137] bitmap_line_ydxi::$6 = bitmap_line_ydxi::y1#6 + 1
  [138] if(bitmap_line_ydxi::y#2!=bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1
  to:bitmap_line_ydxi::@return
bitmap_line_ydxi::@return: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@2
  [139] return 
  to:@return

void bitmap_line_xdyi(byte bitmap_line_xdyi::x , byte bitmap_line_xdyi::y , byte bitmap_line_xdyi::x1 , byte bitmap_line_xdyi::xd , byte bitmap_line_xdyi::yd)
bitmap_line_xdyi: scope:[bitmap_line_xdyi]  from bitmap_line::@13 bitmap_line::@8
  [140] bitmap_line_xdyi::x1#6 = phi( bitmap_line::@13/bitmap_line_xdyi::x1#1, bitmap_line::@8/bitmap_line_xdyi::x1#0 )
  [140] bitmap_line_xdyi::xd#5 = phi( bitmap_line::@13/bitmap_line_xdyi::xd#1, bitmap_line::@8/bitmap_line_xdyi::xd#0 )
  [140] bitmap_line_xdyi::y#5 = phi( bitmap_line::@13/bitmap_line_xdyi::y#1, bitmap_line::@8/bitmap_line_xdyi::y#0 )
  [140] bitmap_line_xdyi::x#6 = phi( bitmap_line::@13/bitmap_line_xdyi::x#1, bitmap_line::@8/bitmap_line_xdyi::x#0 )
  [140] bitmap_line_xdyi::yd#2 = phi( bitmap_line::@13/bitmap_line_xdyi::yd#1, bitmap_line::@8/bitmap_line_xdyi::yd#0 )
  [141] bitmap_line_xdyi::e#0 = bitmap_line_xdyi::yd#2 >> 1
  to:bitmap_line_xdyi::@1
bitmap_line_xdyi::@1: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi bitmap_line_xdyi::@2
  [142] bitmap_line_xdyi::e#3 = phi( bitmap_line_xdyi/bitmap_line_xdyi::e#0, bitmap_line_xdyi::@2/bitmap_line_xdyi::e#6 )
  [142] bitmap_line_xdyi::y#3 = phi( bitmap_line_xdyi/bitmap_line_xdyi::y#5, bitmap_line_xdyi::@2/bitmap_line_xdyi::y#6 )
  [142] bitmap_line_xdyi::x#3 = phi( bitmap_line_xdyi/bitmap_line_xdyi::x#6, bitmap_line_xdyi::@2/bitmap_line_xdyi::x#2 )
  [143] bitmap_plot::x#0 = bitmap_line_xdyi::x#3
  [144] bitmap_plot::y#0 = bitmap_line_xdyi::y#3
  [145] call bitmap_plot 
  to:bitmap_line_xdyi::@4
bitmap_line_xdyi::@4: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@1
  [146] bitmap_line_xdyi::x#2 = ++ bitmap_line_xdyi::x#3
  [147] bitmap_line_xdyi::e#1 = bitmap_line_xdyi::e#3 + bitmap_line_xdyi::yd#2
  [148] if(bitmap_line_xdyi::xd#5>=bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2
  to:bitmap_line_xdyi::@3
bitmap_line_xdyi::@3: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@4
  [149] bitmap_line_xdyi::y#2 = ++ bitmap_line_xdyi::y#3
  [150] bitmap_line_xdyi::e#2 = bitmap_line_xdyi::e#1 - bitmap_line_xdyi::xd#5
  to:bitmap_line_xdyi::@2
bitmap_line_xdyi::@2: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4
  [151] bitmap_line_xdyi::e#6 = phi( bitmap_line_xdyi::@3/bitmap_line_xdyi::e#2, bitmap_line_xdyi::@4/bitmap_line_xdyi::e#1 )
  [151] bitmap_line_xdyi::y#6 = phi( bitmap_line_xdyi::@3/bitmap_line_xdyi::y#2, bitmap_line_xdyi::@4/bitmap_line_xdyi::y#3 )
  [152] bitmap_line_xdyi::$6 = bitmap_line_xdyi::x1#6 + 1
  [153] if(bitmap_line_xdyi::x#2!=bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1
  to:bitmap_line_xdyi::@return
bitmap_line_xdyi::@return: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@2
  [154] return 
  to:@return

void bitmap_line_ydxd(byte bitmap_line_ydxd::y , byte bitmap_line_ydxd::x , byte bitmap_line_ydxd::y1 , byte bitmap_line_ydxd::yd , byte bitmap_line_ydxd::xd)
bitmap_line_ydxd: scope:[bitmap_line_ydxd]  from bitmap_line::@10 bitmap_line::@6
  [155] bitmap_line_ydxd::y1#6 = phi( bitmap_line::@10/bitmap_line_ydxd::y1#0, bitmap_line::@6/bitmap_line_ydxd::y1#1 )
  [155] bitmap_line_ydxd::yd#5 = phi( bitmap_line::@10/bitmap_line_ydxd::yd#0, bitmap_line::@6/bitmap_line_ydxd::yd#1 )
  [155] bitmap_line_ydxd::y#7 = phi( bitmap_line::@10/bitmap_line_ydxd::y#0, bitmap_line::@6/bitmap_line_ydxd::y#1 )
  [155] bitmap_line_ydxd::x#5 = phi( bitmap_line::@10/bitmap_line_ydxd::x#0, bitmap_line::@6/bitmap_line_ydxd::x#1 )
  [155] bitmap_line_ydxd::xd#2 = phi( bitmap_line::@10/bitmap_line_ydxd::xd#0, bitmap_line::@6/bitmap_line_ydxd::xd#1 )
  [156] bitmap_line_ydxd::e#0 = bitmap_line_ydxd::xd#2 >> 1
  to:bitmap_line_ydxd::@1
bitmap_line_ydxd::@1: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd bitmap_line_ydxd::@2
  [157] bitmap_line_ydxd::e#3 = phi( bitmap_line_ydxd/bitmap_line_ydxd::e#0, bitmap_line_ydxd::@2/bitmap_line_ydxd::e#6 )
  [157] bitmap_line_ydxd::y#2 = phi( bitmap_line_ydxd/bitmap_line_ydxd::y#7, bitmap_line_ydxd::@2/bitmap_line_ydxd::y#3 )
  [157] bitmap_line_ydxd::x#3 = phi( bitmap_line_ydxd/bitmap_line_ydxd::x#5, bitmap_line_ydxd::@2/bitmap_line_ydxd::x#6 )
  [158] bitmap_plot::x#3 = bitmap_line_ydxd::x#3
  [159] bitmap_plot::y#3 = bitmap_line_ydxd::y#2
  [160] call bitmap_plot 
  to:bitmap_line_ydxd::@4
bitmap_line_ydxd::@4: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@1
  [161] bitmap_line_ydxd::y#3 = ++ bitmap_line_ydxd::y#2
  [162] bitmap_line_ydxd::e#1 = bitmap_line_ydxd::e#3 + bitmap_line_ydxd::xd#2
  [163] if(bitmap_line_ydxd::yd#5>=bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2
  to:bitmap_line_ydxd::@3
bitmap_line_ydxd::@3: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@4
  [164] bitmap_line_ydxd::x#2 = -- bitmap_line_ydxd::x#3
  [165] bitmap_line_ydxd::e#2 = bitmap_line_ydxd::e#1 - bitmap_line_ydxd::yd#5
  to:bitmap_line_ydxd::@2
bitmap_line_ydxd::@2: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4
  [166] bitmap_line_ydxd::e#6 = phi( bitmap_line_ydxd::@3/bitmap_line_ydxd::e#2, bitmap_line_ydxd::@4/bitmap_line_ydxd::e#1 )
  [166] bitmap_line_ydxd::x#6 = phi( bitmap_line_ydxd::@3/bitmap_line_ydxd::x#2, bitmap_line_ydxd::@4/bitmap_line_ydxd::x#3 )
  [167] bitmap_line_ydxd::$6 = bitmap_line_ydxd::y1#6 + 1
  [168] if(bitmap_line_ydxd::y#3!=bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1
  to:bitmap_line_ydxd::@return
bitmap_line_ydxd::@return: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@2
  [169] return 
  to:@return

void bitmap_line_xdyd(byte bitmap_line_xdyd::x , byte bitmap_line_xdyd::y , byte bitmap_line_xdyd::x1 , byte bitmap_line_xdyd::xd , byte bitmap_line_xdyd::yd)
bitmap_line_xdyd: scope:[bitmap_line_xdyd]  from bitmap_line::@12 bitmap_line::@9
  [170] bitmap_line_xdyd::x1#6 = phi( bitmap_line::@12/bitmap_line_xdyd::x1#1, bitmap_line::@9/bitmap_line_xdyd::x1#0 )
  [170] bitmap_line_xdyd::xd#5 = phi( bitmap_line::@12/bitmap_line_xdyd::xd#1, bitmap_line::@9/bitmap_line_xdyd::xd#0 )
  [170] bitmap_line_xdyd::y#5 = phi( bitmap_line::@12/bitmap_line_xdyd::y#1, bitmap_line::@9/bitmap_line_xdyd::y#0 )
  [170] bitmap_line_xdyd::x#6 = phi( bitmap_line::@12/bitmap_line_xdyd::x#1, bitmap_line::@9/bitmap_line_xdyd::x#0 )
  [170] bitmap_line_xdyd::yd#2 = phi( bitmap_line::@12/bitmap_line_xdyd::yd#1, bitmap_line::@9/bitmap_line_xdyd::yd#0 )
  [171] bitmap_line_xdyd::e#0 = bitmap_line_xdyd::yd#2 >> 1
  to:bitmap_line_xdyd::@1
bitmap_line_xdyd::@1: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd bitmap_line_xdyd::@2
  [172] bitmap_line_xdyd::e#3 = phi( bitmap_line_xdyd/bitmap_line_xdyd::e#0, bitmap_line_xdyd::@2/bitmap_line_xdyd::e#6 )
  [172] bitmap_line_xdyd::y#3 = phi( bitmap_line_xdyd/bitmap_line_xdyd::y#5, bitmap_line_xdyd::@2/bitmap_line_xdyd::y#6 )
  [172] bitmap_line_xdyd::x#3 = phi( bitmap_line_xdyd/bitmap_line_xdyd::x#6, bitmap_line_xdyd::@2/bitmap_line_xdyd::x#2 )
  [173] bitmap_plot::x#1 = bitmap_line_xdyd::x#3
  [174] bitmap_plot::y#1 = bitmap_line_xdyd::y#3
  [175] call bitmap_plot 
  to:bitmap_line_xdyd::@4
bitmap_line_xdyd::@4: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@1
  [176] bitmap_line_xdyd::x#2 = ++ bitmap_line_xdyd::x#3
  [177] bitmap_line_xdyd::e#1 = bitmap_line_xdyd::e#3 + bitmap_line_xdyd::yd#2
  [178] if(bitmap_line_xdyd::xd#5>=bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2
  to:bitmap_line_xdyd::@3
bitmap_line_xdyd::@3: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@4
  [179] bitmap_line_xdyd::y#2 = -- bitmap_line_xdyd::y#3
  [180] bitmap_line_xdyd::e#2 = bitmap_line_xdyd::e#1 - bitmap_line_xdyd::xd#5
  to:bitmap_line_xdyd::@2
bitmap_line_xdyd::@2: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4
  [181] bitmap_line_xdyd::e#6 = phi( bitmap_line_xdyd::@3/bitmap_line_xdyd::e#2, bitmap_line_xdyd::@4/bitmap_line_xdyd::e#1 )
  [181] bitmap_line_xdyd::y#6 = phi( bitmap_line_xdyd::@3/bitmap_line_xdyd::y#2, bitmap_line_xdyd::@4/bitmap_line_xdyd::y#3 )
  [182] bitmap_line_xdyd::$6 = bitmap_line_xdyd::x1#6 + 1
  [183] if(bitmap_line_xdyd::x#2!=bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1
  to:bitmap_line_xdyd::@return
bitmap_line_xdyd::@return: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@2
  [184] return 
  to:@return

void bitmap_plot(byte bitmap_plot::x , byte bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from bitmap_line_xdyd::@1 bitmap_line_xdyi::@1 bitmap_line_ydxd::@1 bitmap_line_ydxi::@1
  [185] bitmap_plot::y#4 = phi( bitmap_line_xdyd::@1/bitmap_plot::y#1, bitmap_line_xdyi::@1/bitmap_plot::y#0, bitmap_line_ydxd::@1/bitmap_plot::y#3, bitmap_line_ydxi::@1/bitmap_plot::y#2 )
  [185] bitmap_plot::x#4 = phi( bitmap_line_xdyd::@1/bitmap_plot::x#1, bitmap_line_xdyi::@1/bitmap_plot::x#0, bitmap_line_ydxd::@1/bitmap_plot::x#3, bitmap_line_ydxi::@1/bitmap_plot::x#2 )
  [186] bitmap_plot::plotter_x#0 = bitmap_plot_xhi[bitmap_plot::x#4] w= bitmap_plot_xlo[bitmap_plot::x#4]
  [187] bitmap_plot::plotter_y#0 = bitmap_plot_yhi[bitmap_plot::y#4] w= bitmap_plot_ylo[bitmap_plot::y#4]
  [188] bitmap_plot::plotter#0 = bitmap_plot::plotter_x#0 + bitmap_plot::plotter_y#0
  [189] bitmap_plot::$1 = *((byte*)bitmap_plot::plotter#0) | bitmap_plot_bit[bitmap_plot::x#4]
  [190] *((byte*)bitmap_plot::plotter#0) = bitmap_plot::$1
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [191] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void bitmap_clear()
byte* bitmap_clear::bitmap
word bitmap_clear::bitmap#0 11.0
byte* bitmap_clear::bitmap#1 420.59999999999997
byte* bitmap_clear::bitmap#2 1552.0
byte* bitmap_clear::bitmap#3 213.0
byte* bitmap_clear::bitmap#5 22.0
byte bitmap_clear::x
byte bitmap_clear::x#1 1501.5
byte bitmap_clear::x#2 667.3333333333334
byte bitmap_clear::y
byte bitmap_clear::y#1 151.5
byte bitmap_clear::y#4 33.666666666666664
void bitmap_init(byte* bitmap_init::bitmap)
byte~ bitmap_init::$0 202.0
byte~ bitmap_init::$10 50.5
byte~ bitmap_init::$7 202.0
byte~ bitmap_init::$8 202.0
byte~ bitmap_init::$9 202.0
byte* bitmap_init::bitmap
byte bitmap_init::bits
byte bitmap_init::bits#1 101.0
byte bitmap_init::bits#3 60.599999999999994
byte bitmap_init::bits#4 67.33333333333333
byte bitmap_init::x
byte bitmap_init::x#1 151.5
byte bitmap_init::x#2 67.33333333333333
byte bitmap_init::y
byte bitmap_init::y#1 151.5
byte bitmap_init::y#2 50.5
byte* bitmap_init::yoffs
byte* bitmap_init::yoffs#1 202.0
byte* bitmap_init::yoffs#2 63.125
byte* bitmap_init::yoffs#4 101.0
void bitmap_line(byte bitmap_line::x0 , byte bitmap_line::x1 , byte bitmap_line::y0 , byte bitmap_line::y1)
byte bitmap_line::x0
byte bitmap_line::x0#0 39565.65217391305
byte bitmap_line::x1
byte bitmap_line::x1#0 41364.09090909091
byte bitmap_line::xd
byte bitmap_line::xd#1 35000.35
byte bitmap_line::xd#2 35000.35
byte bitmap_line::y0
byte bitmap_line::y0#0 57619.66666666667
byte bitmap_line::y1
byte bitmap_line::y1#0 60500.650000000016
byte bitmap_line::yd
byte bitmap_line::yd#1 44444.88888888889
byte bitmap_line::yd#10 44444.88888888889
byte bitmap_line::yd#11 44444.88888888889
byte bitmap_line::yd#2 44444.88888888889
void bitmap_line_xdyd(byte bitmap_line_xdyd::x , byte bitmap_line_xdyd::y , byte bitmap_line_xdyd::x1 , byte bitmap_line_xdyd::xd , byte bitmap_line_xdyd::yd)
byte~ bitmap_line_xdyd::$6 2.000000002E9
byte bitmap_line_xdyd::e
byte bitmap_line_xdyd::e#0 2000002.0
byte bitmap_line_xdyd::e#1 1.3333333346666667E9
byte bitmap_line_xdyd::e#2 2.000000002E9
byte bitmap_line_xdyd::e#3 4.0020000059999996E8
byte bitmap_line_xdyd::e#6 1.000000001E9
byte bitmap_line_xdyd::x
byte bitmap_line_xdyd::x#0 40000.4
byte bitmap_line_xdyd::x#1 40000.4
byte bitmap_line_xdyd::x#2 3.75000000375E8
byte bitmap_line_xdyd::x#3 7.50250001E8
byte bitmap_line_xdyd::x#6 600001.5
byte bitmap_line_xdyd::x1
byte bitmap_line_xdyd::x1#0 66667.33333333333
byte bitmap_line_xdyd::x1#1 66667.33333333333
byte bitmap_line_xdyd::x1#6 7.144285735714285E7
byte bitmap_line_xdyd::xd
byte bitmap_line_xdyd::xd#0 100001.0
byte bitmap_line_xdyd::xd#1 100001.0
byte bitmap_line_xdyd::xd#5 1.4287142885714287E8
byte bitmap_line_xdyd::y
byte bitmap_line_xdyd::y#0 50000.5
byte bitmap_line_xdyd::y#1 50000.5
byte bitmap_line_xdyd::y#2 1.000000001E9
byte bitmap_line_xdyd::y#3 5.715714292857143E8
byte bitmap_line_xdyd::y#5 600001.5
byte bitmap_line_xdyd::y#6 1.000000001E9
byte bitmap_line_xdyd::yd
byte bitmap_line_xdyd::yd#0 200002.0
byte bitmap_line_xdyd::yd#1 200002.0
byte bitmap_line_xdyd::yd#2 7.1514286E7
void bitmap_line_xdyi(byte bitmap_line_xdyi::x , byte bitmap_line_xdyi::y , byte bitmap_line_xdyi::x1 , byte bitmap_line_xdyi::xd , byte bitmap_line_xdyi::yd)
byte~ bitmap_line_xdyi::$6 2.000000002E9
byte bitmap_line_xdyi::e
byte bitmap_line_xdyi::e#0 2000002.0
byte bitmap_line_xdyi::e#1 1.3333333346666667E9
byte bitmap_line_xdyi::e#2 2.000000002E9
byte bitmap_line_xdyi::e#3 4.0020000059999996E8
byte bitmap_line_xdyi::e#6 1.000000001E9
byte bitmap_line_xdyi::x
byte bitmap_line_xdyi::x#0 40000.4
byte bitmap_line_xdyi::x#1 40000.4
byte bitmap_line_xdyi::x#2 3.75000000375E8
byte bitmap_line_xdyi::x#3 7.50250001E8
byte bitmap_line_xdyi::x#6 600001.5
byte bitmap_line_xdyi::x1
byte bitmap_line_xdyi::x1#0 66667.33333333333
byte bitmap_line_xdyi::x1#1 66667.33333333333
byte bitmap_line_xdyi::x1#6 7.144285735714285E7
byte bitmap_line_xdyi::xd
byte bitmap_line_xdyi::xd#0 100001.0
byte bitmap_line_xdyi::xd#1 100001.0
byte bitmap_line_xdyi::xd#5 1.4287142885714287E8
byte bitmap_line_xdyi::y
byte bitmap_line_xdyi::y#0 50000.5
byte bitmap_line_xdyi::y#1 50000.5
byte bitmap_line_xdyi::y#2 1.000000001E9
byte bitmap_line_xdyi::y#3 5.715714292857143E8
byte bitmap_line_xdyi::y#5 600001.5
byte bitmap_line_xdyi::y#6 1.000000001E9
byte bitmap_line_xdyi::yd
byte bitmap_line_xdyi::yd#0 200002.0
byte bitmap_line_xdyi::yd#1 200002.0
byte bitmap_line_xdyi::yd#2 7.1514286E7
void bitmap_line_ydxd(byte bitmap_line_ydxd::y , byte bitmap_line_ydxd::x , byte bitmap_line_ydxd::y1 , byte bitmap_line_ydxd::yd , byte bitmap_line_ydxd::xd)
byte~ bitmap_line_ydxd::$6 2.000000002E9
byte bitmap_line_ydxd::e
byte bitmap_line_ydxd::e#0 2000002.0
byte bitmap_line_ydxd::e#1 1.3333333346666667E9
byte bitmap_line_ydxd::e#2 2.000000002E9
byte bitmap_line_ydxd::e#3 4.0020000059999996E8
byte bitmap_line_ydxd::e#6 1.000000001E9
byte bitmap_line_ydxd::x
byte bitmap_line_ydxd::x#0 50000.5
byte bitmap_line_ydxd::x#1 50000.5
byte bitmap_line_ydxd::x#2 1.000000001E9
byte bitmap_line_ydxd::x#3 5.715714292857143E8
byte bitmap_line_ydxd::x#5 600001.5
byte bitmap_line_ydxd::x#6 1.000000001E9
byte bitmap_line_ydxd::xd
byte bitmap_line_ydxd::xd#0 200002.0
byte bitmap_line_ydxd::xd#1 200002.0
byte bitmap_line_ydxd::xd#2 7.1514286E7
byte bitmap_line_ydxd::y
byte bitmap_line_ydxd::y#0 40000.4
byte bitmap_line_ydxd::y#1 40000.4
byte bitmap_line_ydxd::y#2 7.50250001E8
byte bitmap_line_ydxd::y#3 3.75000000375E8
byte bitmap_line_ydxd::y#7 600001.5
byte bitmap_line_ydxd::y1
byte bitmap_line_ydxd::y1#0 66667.33333333333
byte bitmap_line_ydxd::y1#1 66667.33333333333
byte bitmap_line_ydxd::y1#6 7.144285735714285E7
byte bitmap_line_ydxd::yd
byte bitmap_line_ydxd::yd#0 100001.0
byte bitmap_line_ydxd::yd#1 100001.0
byte bitmap_line_ydxd::yd#5 1.4287142885714287E8
void bitmap_line_ydxi(byte bitmap_line_ydxi::y , byte bitmap_line_ydxi::x , byte bitmap_line_ydxi::y1 , byte bitmap_line_ydxi::yd , byte bitmap_line_ydxi::xd)
byte~ bitmap_line_ydxi::$6 2.000000002E9
byte bitmap_line_ydxi::e
byte bitmap_line_ydxi::e#0 2000002.0
byte bitmap_line_ydxi::e#1 1.3333333346666667E9
byte bitmap_line_ydxi::e#2 2.000000002E9
byte bitmap_line_ydxi::e#3 4.0020000059999996E8
byte bitmap_line_ydxi::e#6 1.000000001E9
byte bitmap_line_ydxi::x
byte bitmap_line_ydxi::x#0 50000.5
byte bitmap_line_ydxi::x#1 50000.5
byte bitmap_line_ydxi::x#2 1.000000001E9
byte bitmap_line_ydxi::x#3 5.715714292857143E8
byte bitmap_line_ydxi::x#5 600001.5
byte bitmap_line_ydxi::x#6 1.000000001E9
byte bitmap_line_ydxi::xd
byte bitmap_line_ydxi::xd#0 200002.0
byte bitmap_line_ydxi::xd#1 200002.0
byte bitmap_line_ydxi::xd#2 7.1514286E7
byte bitmap_line_ydxi::y
byte bitmap_line_ydxi::y#0 40000.4
byte bitmap_line_ydxi::y#1 40000.4
byte bitmap_line_ydxi::y#2 3.75000000375E8
byte bitmap_line_ydxi::y#3 7.50250001E8
byte bitmap_line_ydxi::y#6 600001.5
byte bitmap_line_ydxi::y1
byte bitmap_line_ydxi::y1#0 66667.33333333333
byte bitmap_line_ydxi::y1#1 66667.33333333333
byte bitmap_line_ydxi::y1#6 7.144285735714285E7
byte bitmap_line_ydxi::yd
byte bitmap_line_ydxi::yd#0 100001.0
byte bitmap_line_ydxi::yd#1 100001.0
byte bitmap_line_ydxi::yd#5 1.4287142885714287E8
void bitmap_plot(byte bitmap_plot::x , byte bitmap_plot::y)
byte~ bitmap_plot::$1 2.0000000002E10
byte* bitmap_plot::plotter
word bitmap_plot::plotter#0 5.0000000005E9
word bitmap_plot::plotter_x
word bitmap_plot::plotter_x#0 1.0000000001E10
word bitmap_plot::plotter_y
word bitmap_plot::plotter_y#0 2.0000000002E10
byte bitmap_plot::x
byte bitmap_plot::x#0 1.000000001E9
byte bitmap_plot::x#1 1.000000001E9
byte bitmap_plot::x#2 1.000000001E9
byte bitmap_plot::x#3 1.000000001E9
byte bitmap_plot::x#4 8.50000000175E9
byte bitmap_plot::y
byte bitmap_plot::y#0 2.000000002E9
byte bitmap_plot::y#1 2.000000002E9
byte bitmap_plot::y#2 2.000000002E9
byte bitmap_plot::y#3 2.000000002E9
byte bitmap_plot::y#4 1.2000000003E10
void init_screen()
byte* init_screen::c
byte* init_screen::c#1 202.0
byte* init_screen::c#2 134.66666666666666
void lines()
byte lines::l
byte lines::l#1 20002.0
byte lines::l#2 10001.000000000002
void main()

Initial phi equivalence classes
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ bitmap_clear::y#4 bitmap_clear::y#1 ]
[ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
[ bitmap_clear::x#2 bitmap_clear::x#1 ]
[ init_screen::c#2 init_screen::c#1 ]
[ lines::l#2 lines::l#1 ]
[ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
[ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
[ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
[ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
[ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
[ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
[ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
[ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
[ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
[ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
[ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
[ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
[ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
[ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
[ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
[ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
[ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
[ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
[ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
[ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
[ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
[ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
[ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
[ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
[ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
[ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
Added variable bitmap_init::$0 to live range equivalence class [ bitmap_init::$0 ]
Added variable bitmap_init::$10 to live range equivalence class [ bitmap_init::$10 ]
Added variable bitmap_init::$7 to live range equivalence class [ bitmap_init::$7 ]
Added variable bitmap_init::$8 to live range equivalence class [ bitmap_init::$8 ]
Added variable bitmap_init::$9 to live range equivalence class [ bitmap_init::$9 ]
Added variable bitmap_clear::bitmap#0 to live range equivalence class [ bitmap_clear::bitmap#0 ]
Added variable bitmap_line::x0#0 to live range equivalence class [ bitmap_line::x0#0 ]
Added variable bitmap_line::x1#0 to live range equivalence class [ bitmap_line::x1#0 ]
Added variable bitmap_line::y0#0 to live range equivalence class [ bitmap_line::y0#0 ]
Added variable bitmap_line::y1#0 to live range equivalence class [ bitmap_line::y1#0 ]
Added variable bitmap_line::xd#2 to live range equivalence class [ bitmap_line::xd#2 ]
Added variable bitmap_line::yd#2 to live range equivalence class [ bitmap_line::yd#2 ]
Added variable bitmap_line::yd#1 to live range equivalence class [ bitmap_line::yd#1 ]
Added variable bitmap_line::xd#1 to live range equivalence class [ bitmap_line::xd#1 ]
Added variable bitmap_line::yd#10 to live range equivalence class [ bitmap_line::yd#10 ]
Added variable bitmap_line::yd#11 to live range equivalence class [ bitmap_line::yd#11 ]
Added variable bitmap_line_ydxi::$6 to live range equivalence class [ bitmap_line_ydxi::$6 ]
Added variable bitmap_line_xdyi::$6 to live range equivalence class [ bitmap_line_xdyi::$6 ]
Added variable bitmap_line_ydxd::$6 to live range equivalence class [ bitmap_line_ydxd::$6 ]
Added variable bitmap_line_xdyd::$6 to live range equivalence class [ bitmap_line_xdyd::$6 ]
Added variable bitmap_plot::plotter_x#0 to live range equivalence class [ bitmap_plot::plotter_x#0 ]
Added variable bitmap_plot::plotter_y#0 to live range equivalence class [ bitmap_plot::plotter_y#0 ]
Added variable bitmap_plot::plotter#0 to live range equivalence class [ bitmap_plot::plotter#0 ]
Added variable bitmap_plot::$1 to live range equivalence class [ bitmap_plot::$1 ]
Complete equivalence classes
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ bitmap_clear::y#4 bitmap_clear::y#1 ]
[ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
[ bitmap_clear::x#2 bitmap_clear::x#1 ]
[ init_screen::c#2 init_screen::c#1 ]
[ lines::l#2 lines::l#1 ]
[ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
[ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
[ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
[ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
[ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
[ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
[ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
[ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
[ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
[ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
[ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
[ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
[ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
[ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
[ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
[ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
[ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
[ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
[ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
[ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
[ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
[ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
[ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
[ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
[ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
[ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
[ bitmap_init::$0 ]
[ bitmap_init::$10 ]
[ bitmap_init::$7 ]
[ bitmap_init::$8 ]
[ bitmap_init::$9 ]
[ bitmap_clear::bitmap#0 ]
[ bitmap_line::x0#0 ]
[ bitmap_line::x1#0 ]
[ bitmap_line::y0#0 ]
[ bitmap_line::y1#0 ]
[ bitmap_line::xd#2 ]
[ bitmap_line::yd#2 ]
[ bitmap_line::yd#1 ]
[ bitmap_line::xd#1 ]
[ bitmap_line::yd#10 ]
[ bitmap_line::yd#11 ]
[ bitmap_line_ydxi::$6 ]
[ bitmap_line_xdyi::$6 ]
[ bitmap_line_ydxd::$6 ]
[ bitmap_line_xdyd::$6 ]
[ bitmap_plot::plotter_x#0 ]
[ bitmap_plot::plotter_y#0 ]
[ bitmap_plot::plotter#0 ]
[ bitmap_plot::$1 ]
Allocated zp[1]:2 [ bitmap_init::x#2 bitmap_init::x#1 ]
Allocated zp[1]:3 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Allocated zp[1]:4 [ bitmap_init::y#2 bitmap_init::y#1 ]
Allocated zp[2]:5 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Allocated zp[1]:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Allocated zp[2]:8 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
Allocated zp[1]:10 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Allocated zp[2]:11 [ init_screen::c#2 init_screen::c#1 ]
Allocated zp[1]:13 [ lines::l#2 lines::l#1 ]
Allocated zp[1]:14 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Allocated zp[1]:15 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Allocated zp[1]:16 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Allocated zp[1]:17 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Allocated zp[1]:18 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Allocated zp[1]:19 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Allocated zp[1]:20 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
Allocated zp[1]:21 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
Allocated zp[1]:22 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
Allocated zp[1]:23 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
Allocated zp[1]:24 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Allocated zp[1]:25 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Allocated zp[1]:26 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Allocated zp[1]:27 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Allocated zp[1]:28 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Allocated zp[1]:29 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Allocated zp[1]:30 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Allocated zp[1]:31 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Allocated zp[1]:32 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
Allocated zp[1]:33 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
Allocated zp[1]:34 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
Allocated zp[1]:35 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
Allocated zp[1]:36 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Allocated zp[1]:37 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Allocated zp[1]:38 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
Allocated zp[1]:39 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
Allocated zp[1]:40 [ bitmap_init::$0 ]
Allocated zp[1]:41 [ bitmap_init::$10 ]
Allocated zp[1]:42 [ bitmap_init::$7 ]
Allocated zp[1]:43 [ bitmap_init::$8 ]
Allocated zp[1]:44 [ bitmap_init::$9 ]
Allocated zp[2]:45 [ bitmap_clear::bitmap#0 ]
Allocated zp[1]:47 [ bitmap_line::x0#0 ]
Allocated zp[1]:48 [ bitmap_line::x1#0 ]
Allocated zp[1]:49 [ bitmap_line::y0#0 ]
Allocated zp[1]:50 [ bitmap_line::y1#0 ]
Allocated zp[1]:51 [ bitmap_line::xd#2 ]
Allocated zp[1]:52 [ bitmap_line::yd#2 ]
Allocated zp[1]:53 [ bitmap_line::yd#1 ]
Allocated zp[1]:54 [ bitmap_line::xd#1 ]
Allocated zp[1]:55 [ bitmap_line::yd#10 ]
Allocated zp[1]:56 [ bitmap_line::yd#11 ]
Allocated zp[1]:57 [ bitmap_line_ydxi::$6 ]
Allocated zp[1]:58 [ bitmap_line_xdyi::$6 ]
Allocated zp[1]:59 [ bitmap_line_ydxd::$6 ]
Allocated zp[1]:60 [ bitmap_line_xdyd::$6 ]
Allocated zp[2]:61 [ bitmap_plot::plotter_x#0 ]
Allocated zp[2]:63 [ bitmap_plot::plotter_y#0 ]
Allocated zp[2]:65 [ bitmap_plot::plotter#0 ]
Allocated zp[1]:67 [ bitmap_plot::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp[1]:42 [ bitmap_init::$7 ] has ALU potential.
Statement [0] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *D011 = VIC_BMM|VIC_DEN|VIC_RSEL|3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *VIC_MEMORY = (byte)(word)SCREEN&$3fff/$40|(word)BITMAP&$3fff/$400 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [15] bitmap_plot_xhi[bitmap_init::x#2] = >BITMAP [ bitmap_init::x#2 bitmap_init::bits#3 ] ( bitmap_init:4 [ bitmap_init::x#2 bitmap_init::bits#3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ bitmap_init::x#2 bitmap_init::x#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Statement [16] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3 [ bitmap_init::x#2 bitmap_init::bits#3 ] ( bitmap_init:4 [ bitmap_init::x#2 bitmap_init::bits#3 ] { }  ) always clobbers reg byte a 
Statement [31] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( bitmap_init:4 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ bitmap_init::y#2 bitmap_init::y#1 ]
Statement [36] bitmap_clear::bitmap#0 = *bitmap_plot_xhi w= *bitmap_plot_xlo [ bitmap_clear::bitmap#0 ] ( bitmap_clear:6 [ bitmap_clear::bitmap#0 ] { }  ) always clobbers reg byte a 
Statement [37] bitmap_clear::bitmap#5 = (byte*)bitmap_clear::bitmap#0 [ bitmap_clear::bitmap#5 ] ( bitmap_clear:6 [ bitmap_clear::bitmap#5 ] { }  ) always clobbers reg byte a 
Statement [40] *bitmap_clear::bitmap#2 = 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( bitmap_clear:6 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:10 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:10 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Statement [49] if(init_screen::c#2!=SCREEN+$400) goto init_screen::@2 [ init_screen::c#2 ] ( init_screen:8 [ init_screen::c#2 ] { }  ) always clobbers reg byte a 
Statement [51] *init_screen::c#2 = $14 [ init_screen::c#2 ] ( init_screen:8 [ init_screen::c#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [64] bitmap_line::xd#2 = bitmap_line::x0#0 - bitmap_line::x1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ( lines:10::bitmap_line:61 [ lines::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:13 [ lines::l#2 lines::l#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:47 [ bitmap_line::x0#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:48 [ bitmap_line::x1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:49 [ bitmap_line::y0#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:50 [ bitmap_line::y1#0 ]
Statement [66] bitmap_line::yd#2 = bitmap_line::y0#0 - bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ( lines:10::bitmap_line:61 [ lines::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:51 [ bitmap_line::xd#2 ]
Statement [81] bitmap_line::yd#1 = bitmap_line::y1#0 - bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ( lines:10::bitmap_line:61 [ lines::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] { }  ) always clobbers reg byte a 
Statement [95] bitmap_line::xd#1 = bitmap_line::x1#0 - bitmap_line::x0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ( lines:10::bitmap_line:61 [ lines::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] { }  ) always clobbers reg byte a 
Statement [97] bitmap_line::yd#10 = bitmap_line::y0#0 - bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ( lines:10::bitmap_line:61 [ lines::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:54 [ bitmap_line::xd#1 ]
Statement [111] bitmap_line::yd#11 = bitmap_line::y1#0 - bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ( lines:10::bitmap_line:61 [ lines::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] { }  ) always clobbers reg byte a 
Statement [126] bitmap_line_ydxi::e#0 = bitmap_line_ydxi::xd#2 >> 1 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ( lines:10::bitmap_line:61::bitmap_line_ydxi:73 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  lines:10::bitmap_line:61::bitmap_line_ydxi:118 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:14 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:17 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:18 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:15 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:16 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Statement [132] bitmap_line_ydxi::e#1 = bitmap_line_ydxi::e#3 + bitmap_line_ydxi::xd#2 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ( lines:10::bitmap_line:61::bitmap_line_ydxi:73 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  lines:10::bitmap_line:61::bitmap_line_ydxi:118 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Statement [135] bitmap_line_ydxi::e#2 = bitmap_line_ydxi::e#1 - bitmap_line_ydxi::yd#5 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ( lines:10::bitmap_line:61::bitmap_line_ydxi:73 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  lines:10::bitmap_line:61::bitmap_line_ydxi:118 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Statement [141] bitmap_line_xdyi::e#0 = bitmap_line_xdyi::yd#2 >> 1 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ( lines:10::bitmap_line:61::bitmap_line_xdyi:80 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:124 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:20 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:23 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:24 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:21 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:22 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
Statement [147] bitmap_line_xdyi::e#1 = bitmap_line_xdyi::e#3 + bitmap_line_xdyi::yd#2 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ( lines:10::bitmap_line:61::bitmap_line_xdyi:80 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:124 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [150] bitmap_line_xdyi::e#2 = bitmap_line_xdyi::e#1 - bitmap_line_xdyi::xd#5 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ( lines:10::bitmap_line:61::bitmap_line_xdyi:80 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:124 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [156] bitmap_line_ydxd::e#0 = bitmap_line_ydxd::xd#2 >> 1 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ( lines:10::bitmap_line:61::bitmap_line_ydxd:88 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:104 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:26 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:29 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:30 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:27 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:28 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Statement [162] bitmap_line_ydxd::e#1 = bitmap_line_ydxd::e#3 + bitmap_line_ydxd::xd#2 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ( lines:10::bitmap_line:61::bitmap_line_ydxd:88 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:104 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Statement [165] bitmap_line_ydxd::e#2 = bitmap_line_ydxd::e#1 - bitmap_line_ydxd::yd#5 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ( lines:10::bitmap_line:61::bitmap_line_ydxd:88 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:104 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Statement [171] bitmap_line_xdyd::e#0 = bitmap_line_xdyd::yd#2 >> 1 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ( lines:10::bitmap_line:61::bitmap_line_xdyd:94 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:110 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:32 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:35 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:36 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:33 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:34 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
Statement [177] bitmap_line_xdyd::e#1 = bitmap_line_xdyd::e#3 + bitmap_line_xdyd::yd#2 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ( lines:10::bitmap_line:61::bitmap_line_xdyd:94 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:110 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [180] bitmap_line_xdyd::e#2 = bitmap_line_xdyd::e#1 - bitmap_line_xdyd::xd#5 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ( lines:10::bitmap_line:61::bitmap_line_xdyd:94 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:110 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [186] bitmap_plot::plotter_x#0 = bitmap_plot_xhi[bitmap_plot::x#4] w= bitmap_plot_xlo[bitmap_plot::x#4] [ bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ( lines:10::bitmap_line:61::bitmap_line_ydxi:73::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxi:118::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:80::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:124::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:88::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:104::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:94::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:110::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:19 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:38 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:39 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:25 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:31 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:37 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Statement [187] bitmap_plot::plotter_y#0 = bitmap_plot_yhi[bitmap_plot::y#4] w= bitmap_plot_ylo[bitmap_plot::y#4] [ bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ( lines:10::bitmap_line:61::bitmap_line_ydxi:73::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxi:118::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:80::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:124::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:88::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:104::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:94::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:110::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte a 
Statement [188] bitmap_plot::plotter#0 = bitmap_plot::plotter_x#0 + bitmap_plot::plotter_y#0 [ bitmap_plot::x#4 bitmap_plot::plotter#0 ] ( lines:10::bitmap_line:61::bitmap_line_ydxi:73::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxi:118::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:80::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:124::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:88::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:104::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:94::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:110::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte a 
Statement [189] bitmap_plot::$1 = *((byte*)bitmap_plot::plotter#0) | bitmap_plot_bit[bitmap_plot::x#4] [ bitmap_plot::plotter#0 bitmap_plot::$1 ] ( lines:10::bitmap_line:61::bitmap_line_ydxi:73::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxi:118::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:80::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:124::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:88::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:104::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:94::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:110::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:13 [ lines::l#2 lines::l#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:14 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:15 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:16 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:17 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:18 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:19 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:20 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:21 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:22 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:23 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:24 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:25 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:26 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:27 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:28 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:29 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:30 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Removing always clobbered register reg byte y as potential for zp[1]:31 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:32 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:33 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:34 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:35 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:36 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:37 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Statement [190] *((byte*)bitmap_plot::plotter#0) = bitmap_plot::$1 [ ] ( lines:10::bitmap_line:61::bitmap_line_ydxi:73::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxi:118::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:80::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:124::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:88::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:104::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:94::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:110::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte y 
Statement [0] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *D011 = VIC_BMM|VIC_DEN|VIC_RSEL|3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *VIC_MEMORY = (byte)(word)SCREEN&$3fff/$40|(word)BITMAP&$3fff/$400 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [13] bitmap_init::$0 = bitmap_init::x#2 & $f8 [ bitmap_init::x#2 bitmap_init::bits#3 bitmap_init::$0 ] ( bitmap_init:4 [ bitmap_init::x#2 bitmap_init::bits#3 bitmap_init::$0 ] { }  ) always clobbers reg byte a 
Statement [15] bitmap_plot_xhi[bitmap_init::x#2] = >BITMAP [ bitmap_init::x#2 bitmap_init::bits#3 ] ( bitmap_init:4 [ bitmap_init::x#2 bitmap_init::bits#3 ] { }  ) always clobbers reg byte a 
Statement [16] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3 [ bitmap_init::x#2 bitmap_init::bits#3 ] ( bitmap_init:4 [ bitmap_init::x#2 bitmap_init::bits#3 ] { }  ) always clobbers reg byte a 
Statement [24] bitmap_init::$10 = bitmap_init::y#2 & 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$10 ] ( bitmap_init:4 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$10 ] { }  ) always clobbers reg byte a 
Statement [31] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( bitmap_init:4 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] { }  ) always clobbers reg byte a 
Statement [36] bitmap_clear::bitmap#0 = *bitmap_plot_xhi w= *bitmap_plot_xlo [ bitmap_clear::bitmap#0 ] ( bitmap_clear:6 [ bitmap_clear::bitmap#0 ] { }  ) always clobbers reg byte a 
Statement [37] bitmap_clear::bitmap#5 = (byte*)bitmap_clear::bitmap#0 [ bitmap_clear::bitmap#5 ] ( bitmap_clear:6 [ bitmap_clear::bitmap#5 ] { }  ) always clobbers reg byte a 
Statement [40] *bitmap_clear::bitmap#2 = 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( bitmap_clear:6 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [49] if(init_screen::c#2!=SCREEN+$400) goto init_screen::@2 [ init_screen::c#2 ] ( init_screen:8 [ init_screen::c#2 ] { }  ) always clobbers reg byte a 
Statement [51] *init_screen::c#2 = $14 [ init_screen::c#2 ] ( init_screen:8 [ init_screen::c#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [64] bitmap_line::xd#2 = bitmap_line::x0#0 - bitmap_line::x1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ( lines:10::bitmap_line:61 [ lines::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] { }  ) always clobbers reg byte a 
Statement [66] bitmap_line::yd#2 = bitmap_line::y0#0 - bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ( lines:10::bitmap_line:61 [ lines::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] { }  ) always clobbers reg byte a 
Statement [81] bitmap_line::yd#1 = bitmap_line::y1#0 - bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ( lines:10::bitmap_line:61 [ lines::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] { }  ) always clobbers reg byte a 
Statement [95] bitmap_line::xd#1 = bitmap_line::x1#0 - bitmap_line::x0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ( lines:10::bitmap_line:61 [ lines::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] { }  ) always clobbers reg byte a 
Statement [97] bitmap_line::yd#10 = bitmap_line::y0#0 - bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ( lines:10::bitmap_line:61 [ lines::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] { }  ) always clobbers reg byte a 
Statement [111] bitmap_line::yd#11 = bitmap_line::y1#0 - bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ( lines:10::bitmap_line:61 [ lines::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] { }  ) always clobbers reg byte a 
Statement [126] bitmap_line_ydxi::e#0 = bitmap_line_ydxi::xd#2 >> 1 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ( lines:10::bitmap_line:61::bitmap_line_ydxi:73 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  lines:10::bitmap_line:61::bitmap_line_ydxi:118 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Statement [132] bitmap_line_ydxi::e#1 = bitmap_line_ydxi::e#3 + bitmap_line_ydxi::xd#2 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ( lines:10::bitmap_line:61::bitmap_line_ydxi:73 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  lines:10::bitmap_line:61::bitmap_line_ydxi:118 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Statement [135] bitmap_line_ydxi::e#2 = bitmap_line_ydxi::e#1 - bitmap_line_ydxi::yd#5 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ( lines:10::bitmap_line:61::bitmap_line_ydxi:73 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  lines:10::bitmap_line:61::bitmap_line_ydxi:118 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Statement [141] bitmap_line_xdyi::e#0 = bitmap_line_xdyi::yd#2 >> 1 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ( lines:10::bitmap_line:61::bitmap_line_xdyi:80 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:124 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [147] bitmap_line_xdyi::e#1 = bitmap_line_xdyi::e#3 + bitmap_line_xdyi::yd#2 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ( lines:10::bitmap_line:61::bitmap_line_xdyi:80 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:124 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [150] bitmap_line_xdyi::e#2 = bitmap_line_xdyi::e#1 - bitmap_line_xdyi::xd#5 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ( lines:10::bitmap_line:61::bitmap_line_xdyi:80 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:124 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [156] bitmap_line_ydxd::e#0 = bitmap_line_ydxd::xd#2 >> 1 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ( lines:10::bitmap_line:61::bitmap_line_ydxd:88 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:104 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Statement [162] bitmap_line_ydxd::e#1 = bitmap_line_ydxd::e#3 + bitmap_line_ydxd::xd#2 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ( lines:10::bitmap_line:61::bitmap_line_ydxd:88 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:104 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Statement [165] bitmap_line_ydxd::e#2 = bitmap_line_ydxd::e#1 - bitmap_line_ydxd::yd#5 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ( lines:10::bitmap_line:61::bitmap_line_ydxd:88 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:104 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Statement [171] bitmap_line_xdyd::e#0 = bitmap_line_xdyd::yd#2 >> 1 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ( lines:10::bitmap_line:61::bitmap_line_xdyd:94 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:110 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [177] bitmap_line_xdyd::e#1 = bitmap_line_xdyd::e#3 + bitmap_line_xdyd::yd#2 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ( lines:10::bitmap_line:61::bitmap_line_xdyd:94 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:110 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [180] bitmap_line_xdyd::e#2 = bitmap_line_xdyd::e#1 - bitmap_line_xdyd::xd#5 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ( lines:10::bitmap_line:61::bitmap_line_xdyd:94 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:110 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [186] bitmap_plot::plotter_x#0 = bitmap_plot_xhi[bitmap_plot::x#4] w= bitmap_plot_xlo[bitmap_plot::x#4] [ bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ( lines:10::bitmap_line:61::bitmap_line_ydxi:73::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxi:118::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:80::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:124::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:88::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:104::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:94::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:110::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte a 
Statement [187] bitmap_plot::plotter_y#0 = bitmap_plot_yhi[bitmap_plot::y#4] w= bitmap_plot_ylo[bitmap_plot::y#4] [ bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ( lines:10::bitmap_line:61::bitmap_line_ydxi:73::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxi:118::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:80::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:124::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:88::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:104::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:94::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:110::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte a 
Statement [188] bitmap_plot::plotter#0 = bitmap_plot::plotter_x#0 + bitmap_plot::plotter_y#0 [ bitmap_plot::x#4 bitmap_plot::plotter#0 ] ( lines:10::bitmap_line:61::bitmap_line_ydxi:73::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxi:118::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:80::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:124::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:88::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:104::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:94::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:110::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte a 
Statement [189] bitmap_plot::$1 = *((byte*)bitmap_plot::plotter#0) | bitmap_plot_bit[bitmap_plot::x#4] [ bitmap_plot::plotter#0 bitmap_plot::$1 ] ( lines:10::bitmap_line:61::bitmap_line_ydxi:73::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxi:118::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:80::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:124::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:88::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:104::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:94::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:110::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte a reg byte y 
Statement [190] *((byte*)bitmap_plot::plotter#0) = bitmap_plot::$1 [ ] ( lines:10::bitmap_line:61::bitmap_line_ydxi:73::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxi:118::bitmap_plot:130 [ lines::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:80::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyi:124::bitmap_plot:145 [ lines::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:88::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_ydxd:104::bitmap_plot:160 [ lines::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:94::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  lines:10::bitmap_line:61::bitmap_line_xdyd:110::bitmap_plot:175 [ lines::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  ) always clobbers reg byte y 
Potential registers zp[1]:2 [ bitmap_init::x#2 bitmap_init::x#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ bitmap_init::y#2 bitmap_init::y#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[2]:5 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] : zp[2]:5 , 
Potential registers zp[1]:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ] : zp[1]:7 , reg byte x , 
Potential registers zp[2]:8 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ bitmap_clear::x#2 bitmap_clear::x#1 ] : zp[1]:10 , reg byte x , 
Potential registers zp[2]:11 [ init_screen::c#2 init_screen::c#1 ] : zp[2]:11 , 
Potential registers zp[1]:13 [ lines::l#2 lines::l#1 ] : zp[1]:13 , reg byte x , 
Potential registers zp[1]:14 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] : zp[1]:14 , reg byte x , 
Potential registers zp[1]:15 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] : zp[1]:15 , reg byte x , 
Potential registers zp[1]:16 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] : zp[1]:16 , reg byte x , 
Potential registers zp[1]:17 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] : zp[1]:17 , reg byte x , 
Potential registers zp[1]:18 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] : zp[1]:18 , reg byte x , 
Potential registers zp[1]:19 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] : zp[1]:19 , reg byte x , 
Potential registers zp[1]:20 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] : zp[1]:20 , reg byte x , 
Potential registers zp[1]:21 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] : zp[1]:21 , reg byte x , 
Potential registers zp[1]:22 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] : zp[1]:22 , reg byte x , 
Potential registers zp[1]:23 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] : zp[1]:23 , reg byte x , 
Potential registers zp[1]:24 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] : zp[1]:24 , reg byte x , 
Potential registers zp[1]:25 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] : zp[1]:25 , reg byte x , 
Potential registers zp[1]:26 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] : zp[1]:26 , reg byte x , 
Potential registers zp[1]:27 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] : zp[1]:27 , reg byte x , 
Potential registers zp[1]:28 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] : zp[1]:28 , reg byte x , 
Potential registers zp[1]:29 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] : zp[1]:29 , reg byte x , 
Potential registers zp[1]:30 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] : zp[1]:30 , reg byte x , 
Potential registers zp[1]:31 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] : zp[1]:31 , reg byte x , 
Potential registers zp[1]:32 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] : zp[1]:32 , reg byte x , 
Potential registers zp[1]:33 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] : zp[1]:33 , reg byte x , 
Potential registers zp[1]:34 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] : zp[1]:34 , reg byte x , 
Potential registers zp[1]:35 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] : zp[1]:35 , reg byte x , 
Potential registers zp[1]:36 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] : zp[1]:36 , reg byte x , 
Potential registers zp[1]:37 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] : zp[1]:37 , reg byte x , 
Potential registers zp[1]:38 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] : zp[1]:38 , reg byte x , reg byte y , 
Potential registers zp[1]:39 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] : zp[1]:39 , reg byte x , reg byte y , 
Potential registers zp[1]:40 [ bitmap_init::$0 ] : zp[1]:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:41 [ bitmap_init::$10 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:42 [ bitmap_init::$7 ] : zp[1]:42 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp[1]:43 [ bitmap_init::$8 ] : zp[1]:43 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:44 [ bitmap_init::$9 ] : zp[1]:44 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:45 [ bitmap_clear::bitmap#0 ] : zp[2]:45 , 
Potential registers zp[1]:47 [ bitmap_line::x0#0 ] : zp[1]:47 , reg byte x , reg byte y , 
Potential registers zp[1]:48 [ bitmap_line::x1#0 ] : zp[1]:48 , reg byte x , reg byte y , 
Potential registers zp[1]:49 [ bitmap_line::y0#0 ] : zp[1]:49 , reg byte x , reg byte y , 
Potential registers zp[1]:50 [ bitmap_line::y1#0 ] : zp[1]:50 , reg byte x , reg byte y , 
Potential registers zp[1]:51 [ bitmap_line::xd#2 ] : zp[1]:51 , reg byte x , reg byte y , 
Potential registers zp[1]:52 [ bitmap_line::yd#2 ] : zp[1]:52 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:53 [ bitmap_line::yd#1 ] : zp[1]:53 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:54 [ bitmap_line::xd#1 ] : zp[1]:54 , reg byte x , reg byte y , 
Potential registers zp[1]:55 [ bitmap_line::yd#10 ] : zp[1]:55 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:56 [ bitmap_line::yd#11 ] : zp[1]:56 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:57 [ bitmap_line_ydxi::$6 ] : zp[1]:57 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:58 [ bitmap_line_xdyi::$6 ] : zp[1]:58 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:59 [ bitmap_line_ydxd::$6 ] : zp[1]:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:60 [ bitmap_line_xdyd::$6 ] : zp[1]:60 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:61 [ bitmap_plot::plotter_x#0 ] : zp[2]:61 , 
Potential registers zp[2]:63 [ bitmap_plot::plotter_y#0 ] : zp[2]:63 , 
Potential registers zp[2]:65 [ bitmap_plot::plotter#0 ] : zp[2]:65 , 
Potential registers zp[1]:67 [ bitmap_plot::$1 ] : zp[1]:67 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [bitmap_plot] 20,000,000,011: zp[1]:39 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] 20,000,000,002: zp[2]:63 [ bitmap_plot::plotter_y#0 ] 20,000,000,002: zp[1]:67 [ bitmap_plot::$1 ] 12,500,000,005.75: zp[1]:38 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] 10,000,000,001: zp[2]:61 [ bitmap_plot::plotter_x#0 ] 5,000,000,000.5: zp[2]:65 [ bitmap_plot::plotter#0 ] 
Uplift Scope [bitmap_line_xdyi] 4,735,533,340.27: zp[1]:25 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] 2,572,271,433.79: zp[1]:24 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] 2,000,000,002: zp[1]:58 [ bitmap_line_xdyi::$6 ] 1,125,930,003.67: zp[1]:23 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] 143,071,430.86: zp[1]:21 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] 71,914,290: zp[1]:20 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] 71,576,192.02: zp[1]:22 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] 
Uplift Scope [bitmap_line_xdyd] 4,735,533,340.27: zp[1]:37 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] 2,572,271,433.79: zp[1]:36 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] 2,000,000,002: zp[1]:60 [ bitmap_line_xdyd::$6 ] 1,125,930,003.67: zp[1]:35 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] 143,071,430.86: zp[1]:33 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] 71,914,290: zp[1]:32 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] 71,576,192.02: zp[1]:34 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] 
Uplift Scope [bitmap_line_ydxi] 4,735,533,340.27: zp[1]:19 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] 2,572,271,433.79: zp[1]:17 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] 2,000,000,002: zp[1]:57 [ bitmap_line_ydxi::$6 ] 1,125,930,003.67: zp[1]:18 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] 143,071,430.86: zp[1]:15 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] 71,914,290: zp[1]:14 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] 71,576,192.02: zp[1]:16 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] 
Uplift Scope [bitmap_line_ydxd] 4,735,533,340.27: zp[1]:31 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] 2,572,271,433.79: zp[1]:29 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] 2,000,000,002: zp[1]:59 [ bitmap_line_ydxd::$6 ] 1,125,930,003.67: zp[1]:30 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] 143,071,430.86: zp[1]:27 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] 71,914,290: zp[1]:26 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] 71,576,192.02: zp[1]:28 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Uplift Scope [bitmap_line] 60,500.65: zp[1]:50 [ bitmap_line::y1#0 ] 57,619.67: zp[1]:49 [ bitmap_line::y0#0 ] 44,444.89: zp[1]:52 [ bitmap_line::yd#2 ] 44,444.89: zp[1]:53 [ bitmap_line::yd#1 ] 44,444.89: zp[1]:55 [ bitmap_line::yd#10 ] 44,444.89: zp[1]:56 [ bitmap_line::yd#11 ] 41,364.09: zp[1]:48 [ bitmap_line::x1#0 ] 39,565.65: zp[1]:47 [ bitmap_line::x0#0 ] 35,000.35: zp[1]:51 [ bitmap_line::xd#2 ] 35,000.35: zp[1]:54 [ bitmap_line::xd#1 ] 
Uplift Scope [lines] 30,003: zp[1]:13 [ lines::l#2 lines::l#1 ] 
Uplift Scope [bitmap_clear] 2,207.6: zp[2]:8 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] 2,168.83: zp[1]:10 [ bitmap_clear::x#2 bitmap_clear::x#1 ] 185.17: zp[1]:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ] 11: zp[2]:45 [ bitmap_clear::bitmap#0 ] 
Uplift Scope [bitmap_init] 366.12: zp[2]:5 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] 228.93: zp[1]:3 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] 218.83: zp[1]:2 [ bitmap_init::x#2 bitmap_init::x#1 ] 202: zp[1]:4 [ bitmap_init::y#2 bitmap_init::y#1 ] 202: zp[1]:40 [ bitmap_init::$0 ] 202: zp[1]:42 [ bitmap_init::$7 ] 202: zp[1]:43 [ bitmap_init::$8 ] 202: zp[1]:44 [ bitmap_init::$9 ] 50.5: zp[1]:41 [ bitmap_init::$10 ] 
Uplift Scope [init_screen] 336.67: zp[2]:11 [ init_screen::c#2 init_screen::c#1 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [bitmap_plot] best 316389 combination reg byte y [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] zp[2]:63 [ bitmap_plot::plotter_y#0 ] reg byte a [ bitmap_plot::$1 ] reg byte x [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] zp[2]:61 [ bitmap_plot::plotter_x#0 ] zp[2]:65 [ bitmap_plot::plotter#0 ] 
Uplifting [bitmap_line_xdyi] best 307383 combination zp[1]:25 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] zp[1]:24 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] zp[1]:58 [ bitmap_line_xdyi::$6 ] reg byte x [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] zp[1]:21 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] zp[1]:20 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] zp[1]:22 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [bitmap_line_xdyd] best 298377 combination zp[1]:37 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] zp[1]:36 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] zp[1]:60 [ bitmap_line_xdyd::$6 ] reg byte x [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] zp[1]:33 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] zp[1]:32 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] zp[1]:34 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [bitmap_line_ydxi] best 286371 combination zp[1]:19 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] reg byte x [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] reg byte y [ bitmap_line_ydxi::$6 ] zp[1]:18 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] zp[1]:15 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] zp[1]:14 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] zp[1]:16 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [bitmap_line_ydxd] best 274365 combination zp[1]:31 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] reg byte x [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] reg byte y [ bitmap_line_ydxd::$6 ] zp[1]:30 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] zp[1]:27 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] zp[1]:26 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] zp[1]:28 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [bitmap_line] best 274047 combination reg byte y [ bitmap_line::y1#0 ] zp[1]:49 [ bitmap_line::y0#0 ] zp[1]:52 [ bitmap_line::yd#2 ] zp[1]:53 [ bitmap_line::yd#1 ] zp[1]:55 [ bitmap_line::yd#10 ] zp[1]:56 [ bitmap_line::yd#11 ] zp[1]:48 [ bitmap_line::x1#0 ] zp[1]:47 [ bitmap_line::x0#0 ] zp[1]:51 [ bitmap_line::xd#2 ] zp[1]:54 [ bitmap_line::xd#1 ] 
Limited combination testing to 100 combinations of 186624 possible.
Uplifting [lines] best 274047 combination zp[1]:13 [ lines::l#2 lines::l#1 ] 
Uplifting [bitmap_clear] best 273147 combination zp[2]:8 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ] zp[1]:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ] zp[2]:45 [ bitmap_clear::bitmap#0 ] 
Uplifting [bitmap_init] best 272627 combination zp[2]:5 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] reg byte y [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ] reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ] reg byte a [ bitmap_init::$0 ] zp[1]:42 [ bitmap_init::$7 ] zp[1]:43 [ bitmap_init::$8 ] zp[1]:44 [ bitmap_init::$9 ] zp[1]:41 [ bitmap_init::$10 ] 
Limited combination testing to 100 combinations of 34560 possible.
Uplifting [init_screen] best 272627 combination zp[2]:11 [ init_screen::c#2 init_screen::c#1 ] 
Uplifting [MOS6526_CIA] best 272627 combination 
Uplifting [MOS6569_VICII] best 272627 combination 
Uplifting [MOS6581_SID] best 272627 combination 
Uplifting [main] best 272627 combination 
Uplifting [] best 272627 combination 
Attempting to uplift remaining variables inzp[1]:19 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Uplifting [bitmap_line_ydxi] best 272627 combination zp[1]:19 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] 
Attempting to uplift remaining variables inzp[1]:25 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Uplifting [bitmap_line_xdyi] best 272627 combination zp[1]:25 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] 
Attempting to uplift remaining variables inzp[1]:31 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Uplifting [bitmap_line_ydxd] best 272627 combination zp[1]:31 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] 
Attempting to uplift remaining variables inzp[1]:37 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Uplifting [bitmap_line_xdyd] best 272627 combination zp[1]:37 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] 
Attempting to uplift remaining variables inzp[1]:24 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Uplifting [bitmap_line_xdyi] best 272627 combination zp[1]:24 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] 
Attempting to uplift remaining variables inzp[1]:36 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Uplifting [bitmap_line_xdyd] best 272627 combination zp[1]:36 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] 
Attempting to uplift remaining variables inzp[1]:58 [ bitmap_line_xdyi::$6 ]
Uplifting [bitmap_line_xdyi] best 272627 combination zp[1]:58 [ bitmap_line_xdyi::$6 ] 
Attempting to uplift remaining variables inzp[1]:60 [ bitmap_line_xdyd::$6 ]
Uplifting [bitmap_line_xdyd] best 272627 combination zp[1]:60 [ bitmap_line_xdyd::$6 ] 
Attempting to uplift remaining variables inzp[1]:18 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Uplifting [bitmap_line_ydxi] best 272627 combination zp[1]:18 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] 
Attempting to uplift remaining variables inzp[1]:30 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Uplifting [bitmap_line_ydxd] best 272627 combination zp[1]:30 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] 
Attempting to uplift remaining variables inzp[1]:15 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Uplifting [bitmap_line_ydxi] best 272627 combination zp[1]:15 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] 
Attempting to uplift remaining variables inzp[1]:21 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
Uplifting [bitmap_line_xdyi] best 272627 combination zp[1]:21 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] 
Attempting to uplift remaining variables inzp[1]:27 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Uplifting [bitmap_line_ydxd] best 272627 combination zp[1]:27 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] 
Attempting to uplift remaining variables inzp[1]:33 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
Uplifting [bitmap_line_xdyd] best 272627 combination zp[1]:33 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] 
Attempting to uplift remaining variables inzp[1]:14 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Uplifting [bitmap_line_ydxi] best 272627 combination zp[1]:14 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] 
Attempting to uplift remaining variables inzp[1]:20 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
Uplifting [bitmap_line_xdyi] best 272627 combination zp[1]:20 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] 
Attempting to uplift remaining variables inzp[1]:26 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Uplifting [bitmap_line_ydxd] best 272627 combination zp[1]:26 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] 
Attempting to uplift remaining variables inzp[1]:32 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
Uplifting [bitmap_line_xdyd] best 272627 combination zp[1]:32 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] 
Attempting to uplift remaining variables inzp[1]:16 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Uplifting [bitmap_line_ydxi] best 272627 combination zp[1]:16 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] 
Attempting to uplift remaining variables inzp[1]:22 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
Uplifting [bitmap_line_xdyi] best 272627 combination zp[1]:22 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:28 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Uplifting [bitmap_line_ydxd] best 272627 combination zp[1]:28 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Attempting to uplift remaining variables inzp[1]:34 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
Uplifting [bitmap_line_xdyd] best 272627 combination zp[1]:34 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:49 [ bitmap_line::y0#0 ]
Uplifting [bitmap_line] best 272627 combination zp[1]:49 [ bitmap_line::y0#0 ] 
Attempting to uplift remaining variables inzp[1]:52 [ bitmap_line::yd#2 ]
Uplifting [bitmap_line] best 272627 combination zp[1]:52 [ bitmap_line::yd#2 ] 
Attempting to uplift remaining variables inzp[1]:53 [ bitmap_line::yd#1 ]
Uplifting [bitmap_line] best 272627 combination zp[1]:53 [ bitmap_line::yd#1 ] 
Attempting to uplift remaining variables inzp[1]:55 [ bitmap_line::yd#10 ]
Uplifting [bitmap_line] best 272627 combination zp[1]:55 [ bitmap_line::yd#10 ] 
Attempting to uplift remaining variables inzp[1]:56 [ bitmap_line::yd#11 ]
Uplifting [bitmap_line] best 272627 combination zp[1]:56 [ bitmap_line::yd#11 ] 
Attempting to uplift remaining variables inzp[1]:48 [ bitmap_line::x1#0 ]
Uplifting [bitmap_line] best 272627 combination zp[1]:48 [ bitmap_line::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:47 [ bitmap_line::x0#0 ]
Uplifting [bitmap_line] best 272627 combination zp[1]:47 [ bitmap_line::x0#0 ] 
Attempting to uplift remaining variables inzp[1]:51 [ bitmap_line::xd#2 ]
Uplifting [bitmap_line] best 272627 combination zp[1]:51 [ bitmap_line::xd#2 ] 
Attempting to uplift remaining variables inzp[1]:54 [ bitmap_line::xd#1 ]
Uplifting [bitmap_line] best 272627 combination zp[1]:54 [ bitmap_line::xd#1 ] 
Attempting to uplift remaining variables inzp[1]:13 [ lines::l#2 lines::l#1 ]
Uplifting [lines] best 272627 combination zp[1]:13 [ lines::l#2 lines::l#1 ] 
Attempting to uplift remaining variables inzp[1]:42 [ bitmap_init::$7 ]
Uplifting [bitmap_init] best 272567 combination reg byte a [ bitmap_init::$7 ] 
Attempting to uplift remaining variables inzp[1]:43 [ bitmap_init::$8 ]
Uplifting [bitmap_init] best 272507 combination reg byte a [ bitmap_init::$8 ] 
Attempting to uplift remaining variables inzp[1]:44 [ bitmap_init::$9 ]
Uplifting [bitmap_init] best 272447 combination reg byte a [ bitmap_init::$9 ] 
Attempting to uplift remaining variables inzp[1]:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Uplifting [bitmap_clear] best 272447 combination zp[1]:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ] 
Attempting to uplift remaining variables inzp[1]:41 [ bitmap_init::$10 ]
Uplifting [bitmap_init] best 272447 combination zp[1]:41 [ bitmap_init::$10 ] 
Coalescing zero page register [ zp[2]:8 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] ] with [ zp[2]:45 [ bitmap_clear::bitmap#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:14 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] ] with [ zp[1]:51 [ bitmap_line::xd#2 ] ] - score: 1
Coalescing zero page register [ zp[1]:14 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line::xd#2 ] ] with [ zp[1]:54 [ bitmap_line::xd#1 ] ] - score: 1
Coalescing zero page register [ zp[1]:15 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] ] with [ zp[1]:52 [ bitmap_line::yd#2 ] ] - score: 1
Coalescing zero page register [ zp[1]:15 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line::yd#2 ] ] with [ zp[1]:56 [ bitmap_line::yd#11 ] ] - score: 1
Coalescing zero page register [ zp[1]:16 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] ] with [ zp[1]:49 [ bitmap_line::y0#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:22 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] ] with [ zp[1]:47 [ bitmap_line::x0#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:27 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] ] with [ zp[1]:53 [ bitmap_line::yd#1 ] ] - score: 1
Coalescing zero page register [ zp[1]:27 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 bitmap_line::yd#1 ] ] with [ zp[1]:55 [ bitmap_line::yd#10 ] ] - score: 1
Coalescing zero page register [ zp[1]:34 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] ] with [ zp[1]:48 [ bitmap_line::x1#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:61 [ bitmap_plot::plotter_x#0 ] ] with [ zp[2]:65 [ bitmap_plot::plotter#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:14 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 ] ] with [ zp[1]:21 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] ] - score: 2
Coalescing zero page register [ zp[1]:14 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] ] with [ zp[1]:26 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] ] - score: 2
Coalescing zero page register [ zp[1]:14 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] ] with [ zp[1]:33 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] ] - score: 2
Coalescing zero page register [ zp[1]:15 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 ] ] with [ zp[1]:20 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] ] - score: 2
Coalescing zero page register [ zp[1]:27 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 bitmap_line::yd#1 bitmap_line::yd#10 ] ] with [ zp[1]:32 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] ] - score: 2
Coalescing zero page register [ zp[1]:16 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y0#0 ] ] with [ zp[1]:24 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] ] - score: 1
Coalescing zero page register [ zp[1]:16 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y0#0 bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] ] with [ zp[1]:28 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] ] - score: 1
Coalescing zero page register [ zp[1]:16 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y0#0 bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] ] with [ zp[1]:36 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:8 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 ] ] with [ zp[2]:5 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ]
Coalescing zero page register [ zp[1]:13 [ lines::l#2 lines::l#1 ] ] with [ zp[1]:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ] ]
Coalescing zero page register [ zp[1]:22 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x0#0 ] ] with [ zp[1]:19 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] ]
Coalescing zero page register [ zp[1]:25 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] ] with [ zp[1]:18 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] ]
Coalescing zero page register [ zp[1]:34 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 bitmap_line::x1#0 ] ] with [ zp[1]:31 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] ]
Coalescing zero page register [ zp[1]:37 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] ] with [ zp[1]:30 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] ]
Coalescing zero page register [ zp[1]:41 [ bitmap_init::$10 ] ] with [ zp[1]:14 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] ]
Coalescing zero page register [ zp[1]:60 [ bitmap_line_xdyd::$6 ] ] with [ zp[1]:58 [ bitmap_line_xdyi::$6 ] ]
Coalescing zero page register [ zp[2]:61 [ bitmap_plot::plotter_x#0 bitmap_plot::plotter#0 ] ] with [ zp[2]:11 [ init_screen::c#2 init_screen::c#1 ] ]
Coalescing zero page register [ zp[1]:27 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 bitmap_line::yd#1 bitmap_line::yd#10 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] ] with [ zp[1]:25 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] ]
Coalescing zero page register [ zp[2]:61 [ bitmap_plot::plotter_x#0 bitmap_plot::plotter#0 init_screen::c#2 init_screen::c#1 ] ] with [ zp[2]:8 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ]
Allocated (was zp[1]:13) zp[1]:2 [ lines::l#2 lines::l#1 bitmap_clear::y#4 bitmap_clear::y#1 ]
Allocated (was zp[1]:15) zp[1]:3 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
Allocated (was zp[1]:16) zp[1]:4 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y0#0 bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Allocated (was zp[1]:22) zp[1]:5 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x0#0 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Allocated (was zp[1]:27) zp[1]:6 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 bitmap_line::yd#1 bitmap_line::yd#10 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Allocated (was zp[1]:34) zp[1]:7 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 bitmap_line::x1#0 bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Allocated (was zp[1]:37) zp[1]:8 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Allocated (was zp[1]:41) zp[1]:9 [ bitmap_init::$10 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
Allocated (was zp[1]:60) zp[1]:10 [ bitmap_line_xdyd::$6 bitmap_line_xdyi::$6 ]
Allocated (was zp[2]:61) zp[2]:11 [ bitmap_plot::plotter_x#0 bitmap_plot::plotter#0 init_screen::c#2 init_screen::c#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Allocated (was zp[2]:63) zp[2]:13 [ bitmap_plot::plotter_y#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .const lines_cnt = 8
  .label D011 = $d011
  .label VIC_MEMORY = $d018
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  .label SCREEN = $400
  .label BITMAP = $2000
  // main
main: {
    // [0] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [1] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // [2] *D011 = VIC_BMM|VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta D011
    // [3] *VIC_MEMORY = (byte)(word)SCREEN&$3fff/$40|(word)BITMAP&$3fff/$400 -- _deref_pbuc1=vbuc2 
    lda #(SCREEN&$3fff)/$40|(BITMAP&$3fff)/$400
    sta VIC_MEMORY
    // [4] call bitmap_init 
    // [11] phi from main to bitmap_init [phi:main->bitmap_init]
  bitmap_init_from_main:
    jsr bitmap_init
    // [5] phi from main to main::@2 [phi:main->main::@2]
  __b2_from_main:
    jmp __b2
    // main::@2
  __b2:
    // [6] call bitmap_clear 
    jsr bitmap_clear
    // [7] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [8] call init_screen 
    // [47] phi from main::@3 to init_screen [phi:main::@3->init_screen]
  init_screen_from___b3:
    jsr init_screen
    // [9] phi from main::@1 main::@3 to main::@1 [phi:main::@1/main::@3->main::@1]
  __b1_from___b1:
  __b1_from___b3:
    jmp __b1
    // main::@1
  __b1:
    // [10] call lines 
    // [53] phi from main::@1 to lines [phi:main::@1->lines]
  lines_from___b1:
    jsr lines
    jmp __b1_from___b1
}
  // bitmap_init
// Initialize the bitmap plotter tables for a specific bitmap
bitmap_init: {
    .label __10 = 9
    .label yoffs = $b
    // [12] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  __b1_from_bitmap_init:
    // [12] phi bitmap_init::bits#3 = $80 [phi:bitmap_init->bitmap_init::@1#0] -- vbuyy=vbuc1 
    ldy #$80
    // [12] phi bitmap_init::x#2 = 0 [phi:bitmap_init->bitmap_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [12] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  __b1_from___b2:
    // [12] phi bitmap_init::bits#3 = bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [12] phi bitmap_init::x#2 = bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp __b1
    // bitmap_init::@1
  __b1:
    // [13] bitmap_init::$0 = bitmap_init::x#2 & $f8 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f8
    // [14] bitmap_plot_xlo[bitmap_init::x#2] = bitmap_init::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_xlo,x
    // [15] bitmap_plot_xhi[bitmap_init::x#2] = >BITMAP -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #>BITMAP
    sta bitmap_plot_xhi,x
    // [16] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta bitmap_plot_bit,x
    // [17] bitmap_init::bits#1 = bitmap_init::bits#3 >> 1 -- vbuyy=vbuyy_ror_1 
    tya
    lsr
    tay
    // [18] if(bitmap_init::bits#1!=0) goto bitmap_init::@6 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b6_from___b1
    // [20] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  __b2_from___b1:
    // [20] phi bitmap_init::bits#4 = $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuyy=vbuc1 
    ldy #$80
    jmp __b2
    // [19] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  __b6_from___b1:
    jmp __b6
    // bitmap_init::@6
  __b6:
    // [20] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  __b2_from___b6:
    // [20] phi bitmap_init::bits#4 = bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    jmp __b2
    // bitmap_init::@2
  __b2:
    // [21] bitmap_init::x#1 = ++ bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [22] if(bitmap_init::x#1!=0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b2
    // [23] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  __b3_from___b2:
    // [23] phi bitmap_init::yoffs#2 = (byte*) 0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta.z yoffs
    lda #>0
    sta.z yoffs+1
    // [23] phi bitmap_init::y#2 = 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [23] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  __b3_from___b4:
    // [23] phi bitmap_init::yoffs#2 = bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [23] phi bitmap_init::y#2 = bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp __b3
    // bitmap_init::@3
  __b3:
    // [24] bitmap_init::$10 = bitmap_init::y#2 & 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __10
    // [25] bitmap_init::$7 = < bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // [26] bitmap_init::$8 = bitmap_init::$10 | bitmap_init::$7 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __10
    // [27] bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // [28] bitmap_init::$9 = > bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // [29] bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$9 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // [30] if(bitmap_init::$10!=7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __10
    bne __b4_from___b3
    jmp __b5
    // bitmap_init::@5
  __b5:
    // [31] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [32] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [32] phi bitmap_init::yoffs#4 = bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    jmp __b4
    // bitmap_init::@4
  __b4:
    // [33] bitmap_init::y#1 = ++ bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [34] if(bitmap_init::y#1!=0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3_from___b4
    jmp __breturn
    // bitmap_init::@return
  __breturn:
    // [35] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = $b
    .label y = 2
    // [36] bitmap_clear::bitmap#0 = *bitmap_plot_xhi w= *bitmap_plot_xlo -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_xlo
    sta.z bitmap
    lda bitmap_plot_xhi
    sta.z bitmap+1
    // [37] bitmap_clear::bitmap#5 = (byte*)bitmap_clear::bitmap#0
    // [38] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  __b1_from_bitmap_clear:
    // [38] phi bitmap_clear::y#4 = 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [38] phi bitmap_clear::bitmap#3 = bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    jmp __b1
    // [38] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  __b1_from___b3:
    // [38] phi bitmap_clear::y#4 = bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
    // [38] phi bitmap_clear::bitmap#3 = bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    jmp __b1
    // bitmap_clear::@1
  __b1:
    // [39] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  __b2_from___b1:
    // [39] phi bitmap_clear::x#2 = 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [39] phi bitmap_clear::bitmap#2 = bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    jmp __b2
    // [39] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  __b2_from___b2:
    // [39] phi bitmap_clear::x#2 = bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
    // [39] phi bitmap_clear::bitmap#2 = bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    jmp __b2
    // bitmap_clear::@2
  __b2:
    // [40] *bitmap_clear::bitmap#2 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (bitmap),y
    // [41] bitmap_clear::bitmap#1 = ++ bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc.z bitmap
    bne !+
    inc.z bitmap+1
  !:
    // [42] bitmap_clear::x#1 = ++ bitmap_clear::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [43] if(bitmap_clear::x#1!=$c8) goto bitmap_clear::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c8
    bne __b2_from___b2
    jmp __b3
    // bitmap_clear::@3
  __b3:
    // [44] bitmap_clear::y#1 = ++ bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [45] if(bitmap_clear::y#1!=$28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z y
    bne __b1_from___b3
    jmp __breturn
    // bitmap_clear::@return
  __breturn:
    // [46] return 
    rts
}
  // init_screen
init_screen: {
    .label c = $b
    // [48] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
  __b1_from_init_screen:
    // [48] phi init_screen::c#2 = SCREEN [phi:init_screen->init_screen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z c
    lda #>SCREEN
    sta.z c+1
    jmp __b1
    // init_screen::@1
  __b1:
    // [49] if(init_screen::c#2!=SCREEN+$400) goto init_screen::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z c+1
    cmp #>SCREEN+$400
    bne __b2
    lda.z c
    cmp #<SCREEN+$400
    bne __b2
    jmp __breturn
    // init_screen::@return
  __breturn:
    // [50] return 
    rts
    // init_screen::@2
  __b2:
    // [51] *init_screen::c#2 = $14 -- _deref_pbuz1=vbuc1 
    lda #$14
    ldy #0
    sta (c),y
    // [52] init_screen::c#1 = ++ init_screen::c#2 -- pbuz1=_inc_pbuz1 
    inc.z c
    bne !+
    inc.z c+1
  !:
    // [48] phi from init_screen::@2 to init_screen::@1 [phi:init_screen::@2->init_screen::@1]
  __b1_from___b2:
    // [48] phi init_screen::c#2 = init_screen::c#1 [phi:init_screen::@2->init_screen::@1#0] -- register_copy 
    jmp __b1
}
  // lines
lines: {
    .label l = 2
    // [54] phi from lines to lines::@1 [phi:lines->lines::@1]
  __b1_from_lines:
    // [54] phi lines::l#2 = 0 [phi:lines->lines::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b1
    // lines::@1
  __b1:
    // [55] if(lines::l#2<lines_cnt) goto lines::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #lines_cnt
    bcc __b2
    jmp __breturn
    // lines::@return
  __breturn:
    // [56] return 
    rts
    // lines::@2
  __b2:
    // [57] bitmap_line::x0#0 = lines_x[lines::l#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x,y
    sta.z bitmap_line.x0
    // [58] bitmap_line::x1#0 = (lines_x+1)[lines::l#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x+1,y
    sta.z bitmap_line.x1
    // [59] bitmap_line::y0#0 = lines_y[lines::l#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_y,y
    sta.z bitmap_line.y0
    // [60] bitmap_line::y1#0 = (lines_y+1)[lines::l#2] -- vbuyy=pbuc1_derefidx_vbuz1 
    ldx.z l
    ldy lines_y+1,x
    // [61] call bitmap_line 
    jsr bitmap_line
    jmp __b3
    // lines::@3
  __b3:
    // [62] lines::l#1 = ++ lines::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [54] phi from lines::@3 to lines::@1 [phi:lines::@3->lines::@1]
  __b1_from___b3:
    // [54] phi lines::l#2 = lines::l#1 [phi:lines::@3->lines::@1#0] -- register_copy 
    jmp __b1
}
  // bitmap_line
// Draw a line on the bitmap
// bitmap_line(byte zp(5) x0, byte zp(7) x1, byte zp(4) y0, byte register(Y) y1)
bitmap_line: {
    .label xd = 9
    .label yd = 6
    .label yd_1 = 3
    .label x0 = 5
    .label x1 = 7
    .label y0 = 4
    // [63] if(bitmap_line::x0#0<bitmap_line::x1#0) goto bitmap_line::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda.z x0
    cmp.z x1
    bcc __b1
    jmp __b2
    // bitmap_line::@2
  __b2:
    // [64] bitmap_line::xd#2 = bitmap_line::x0#0 - bitmap_line::x1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x0
    sec
    sbc.z x1
    sta.z xd
    // [65] if(bitmap_line::y0#0<bitmap_line::y1#0) goto bitmap_line::@7 -- vbuz1_lt_vbuyy_then_la1 
    cpy.z y0
    beq !+
    bcs __b7
  !:
    jmp __b3
    // bitmap_line::@3
  __b3:
    // [66] bitmap_line::yd#2 = bitmap_line::y0#0 - bitmap_line::y1#0 -- vbuz1=vbuz2_minus_vbuyy 
    tya
    eor #$ff
    sec
    adc.z y0
    sta.z yd_1
    // [67] if(bitmap_line::yd#2<bitmap_line::xd#2) goto bitmap_line::@8 -- vbuz1_lt_vbuz2_then_la1 
    lda.z yd_1
    cmp.z xd
    bcc __b8
    jmp __b4
    // bitmap_line::@4
  __b4:
    // [68] bitmap_line_ydxi::y#0 = bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxi.y
    // [69] bitmap_line_ydxi::x#0 = bitmap_line::x1#0 -- vbuxx=vbuz1 
    ldx.z x1
    // [70] bitmap_line_ydxi::y1#0 = bitmap_line::y0#0
    // [71] bitmap_line_ydxi::yd#0 = bitmap_line::yd#2
    // [72] bitmap_line_ydxi::xd#0 = bitmap_line::xd#2
    // [73] call bitmap_line_ydxi 
    // [125] phi from bitmap_line::@4 to bitmap_line_ydxi [phi:bitmap_line::@4->bitmap_line_ydxi]
  bitmap_line_ydxi_from___b4:
    // [125] phi bitmap_line_ydxi::y1#6 = bitmap_line_ydxi::y1#0 [phi:bitmap_line::@4->bitmap_line_ydxi#0] -- register_copy 
    // [125] phi bitmap_line_ydxi::yd#5 = bitmap_line_ydxi::yd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#1] -- register_copy 
    // [125] phi bitmap_line_ydxi::y#6 = bitmap_line_ydxi::y#0 [phi:bitmap_line::@4->bitmap_line_ydxi#2] -- register_copy 
    // [125] phi bitmap_line_ydxi::x#5 = bitmap_line_ydxi::x#0 [phi:bitmap_line::@4->bitmap_line_ydxi#3] -- register_copy 
    // [125] phi bitmap_line_ydxi::xd#2 = bitmap_line_ydxi::xd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp __breturn
    // bitmap_line::@return
  __breturn:
    // [74] return 
    rts
    // bitmap_line::@8
  __b8:
    // [75] bitmap_line_xdyi::x#0 = bitmap_line::x1#0 -- vbuxx=vbuz1 
    ldx.z x1
    // [76] bitmap_line_xdyi::y#0 = bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyi.y
    // [77] bitmap_line_xdyi::x1#0 = bitmap_line::x0#0
    // [78] bitmap_line_xdyi::xd#0 = bitmap_line::xd#2
    // [79] bitmap_line_xdyi::yd#0 = bitmap_line::yd#2
    // [80] call bitmap_line_xdyi 
    // [140] phi from bitmap_line::@8 to bitmap_line_xdyi [phi:bitmap_line::@8->bitmap_line_xdyi]
  bitmap_line_xdyi_from___b8:
    // [140] phi bitmap_line_xdyi::x1#6 = bitmap_line_xdyi::x1#0 [phi:bitmap_line::@8->bitmap_line_xdyi#0] -- register_copy 
    // [140] phi bitmap_line_xdyi::xd#5 = bitmap_line_xdyi::xd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#1] -- register_copy 
    // [140] phi bitmap_line_xdyi::y#5 = bitmap_line_xdyi::y#0 [phi:bitmap_line::@8->bitmap_line_xdyi#2] -- register_copy 
    // [140] phi bitmap_line_xdyi::x#6 = bitmap_line_xdyi::x#0 [phi:bitmap_line::@8->bitmap_line_xdyi#3] -- register_copy 
    // [140] phi bitmap_line_xdyi::yd#2 = bitmap_line_xdyi::yd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp __breturn
    // bitmap_line::@7
  __b7:
    // [81] bitmap_line::yd#1 = bitmap_line::y1#0 - bitmap_line::y0#0 -- vbuz1=vbuyy_minus_vbuz2 
    tya
    sec
    sbc.z y0
    sta.z yd
    // [82] if(bitmap_line::yd#1<bitmap_line::xd#2) goto bitmap_line::@9 -- vbuz1_lt_vbuz2_then_la1 
    lda.z yd
    cmp.z xd
    bcc __b9
    jmp __b10
    // bitmap_line::@10
  __b10:
    // [83] bitmap_line_ydxd::y#0 = bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxd.y
    // [84] bitmap_line_ydxd::x#0 = bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx.z x0
    // [85] bitmap_line_ydxd::y1#0 = bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxd.y1
    // [86] bitmap_line_ydxd::yd#0 = bitmap_line::yd#1
    // [87] bitmap_line_ydxd::xd#0 = bitmap_line::xd#2
    // [88] call bitmap_line_ydxd 
    // [155] phi from bitmap_line::@10 to bitmap_line_ydxd [phi:bitmap_line::@10->bitmap_line_ydxd]
  bitmap_line_ydxd_from___b10:
    // [155] phi bitmap_line_ydxd::y1#6 = bitmap_line_ydxd::y1#0 [phi:bitmap_line::@10->bitmap_line_ydxd#0] -- register_copy 
    // [155] phi bitmap_line_ydxd::yd#5 = bitmap_line_ydxd::yd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#1] -- register_copy 
    // [155] phi bitmap_line_ydxd::y#7 = bitmap_line_ydxd::y#0 [phi:bitmap_line::@10->bitmap_line_ydxd#2] -- register_copy 
    // [155] phi bitmap_line_ydxd::x#5 = bitmap_line_ydxd::x#0 [phi:bitmap_line::@10->bitmap_line_ydxd#3] -- register_copy 
    // [155] phi bitmap_line_ydxd::xd#2 = bitmap_line_ydxd::xd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp __breturn
    // bitmap_line::@9
  __b9:
    // [89] bitmap_line_xdyd::x#0 = bitmap_line::x1#0 -- vbuxx=vbuz1 
    ldx.z x1
    // [90] bitmap_line_xdyd::y#0 = bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyd.y
    // [91] bitmap_line_xdyd::x1#0 = bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyd.x1
    // [92] bitmap_line_xdyd::xd#0 = bitmap_line::xd#2
    // [93] bitmap_line_xdyd::yd#0 = bitmap_line::yd#1
    // [94] call bitmap_line_xdyd 
    // [170] phi from bitmap_line::@9 to bitmap_line_xdyd [phi:bitmap_line::@9->bitmap_line_xdyd]
  bitmap_line_xdyd_from___b9:
    // [170] phi bitmap_line_xdyd::x1#6 = bitmap_line_xdyd::x1#0 [phi:bitmap_line::@9->bitmap_line_xdyd#0] -- register_copy 
    // [170] phi bitmap_line_xdyd::xd#5 = bitmap_line_xdyd::xd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#1] -- register_copy 
    // [170] phi bitmap_line_xdyd::y#5 = bitmap_line_xdyd::y#0 [phi:bitmap_line::@9->bitmap_line_xdyd#2] -- register_copy 
    // [170] phi bitmap_line_xdyd::x#6 = bitmap_line_xdyd::x#0 [phi:bitmap_line::@9->bitmap_line_xdyd#3] -- register_copy 
    // [170] phi bitmap_line_xdyd::yd#2 = bitmap_line_xdyd::yd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp __breturn
    // bitmap_line::@1
  __b1:
    // [95] bitmap_line::xd#1 = bitmap_line::x1#0 - bitmap_line::x0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x1
    sec
    sbc.z x0
    sta.z xd
    // [96] if(bitmap_line::y0#0<bitmap_line::y1#0) goto bitmap_line::@11 -- vbuz1_lt_vbuyy_then_la1 
    cpy.z y0
    beq !+
    bcs __b11
  !:
    jmp __b5
    // bitmap_line::@5
  __b5:
    // [97] bitmap_line::yd#10 = bitmap_line::y0#0 - bitmap_line::y1#0 -- vbuz1=vbuz2_minus_vbuyy 
    tya
    eor #$ff
    sec
    adc.z y0
    sta.z yd
    // [98] if(bitmap_line::yd#10<bitmap_line::xd#1) goto bitmap_line::@12 -- vbuz1_lt_vbuz2_then_la1 
    lda.z yd
    cmp.z xd
    bcc __b12
    jmp __b6
    // bitmap_line::@6
  __b6:
    // [99] bitmap_line_ydxd::y#1 = bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxd.y
    // [100] bitmap_line_ydxd::x#1 = bitmap_line::x1#0 -- vbuxx=vbuz1 
    ldx.z x1
    // [101] bitmap_line_ydxd::y1#1 = bitmap_line::y0#0
    // [102] bitmap_line_ydxd::yd#1 = bitmap_line::yd#10
    // [103] bitmap_line_ydxd::xd#1 = bitmap_line::xd#1
    // [104] call bitmap_line_ydxd 
    // [155] phi from bitmap_line::@6 to bitmap_line_ydxd [phi:bitmap_line::@6->bitmap_line_ydxd]
  bitmap_line_ydxd_from___b6:
    // [155] phi bitmap_line_ydxd::y1#6 = bitmap_line_ydxd::y1#1 [phi:bitmap_line::@6->bitmap_line_ydxd#0] -- register_copy 
    // [155] phi bitmap_line_ydxd::yd#5 = bitmap_line_ydxd::yd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#1] -- register_copy 
    // [155] phi bitmap_line_ydxd::y#7 = bitmap_line_ydxd::y#1 [phi:bitmap_line::@6->bitmap_line_ydxd#2] -- register_copy 
    // [155] phi bitmap_line_ydxd::x#5 = bitmap_line_ydxd::x#1 [phi:bitmap_line::@6->bitmap_line_ydxd#3] -- register_copy 
    // [155] phi bitmap_line_ydxd::xd#2 = bitmap_line_ydxd::xd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp __breturn
    // bitmap_line::@12
  __b12:
    // [105] bitmap_line_xdyd::x#1 = bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx.z x0
    // [106] bitmap_line_xdyd::y#1 = bitmap_line::y0#0
    // [107] bitmap_line_xdyd::x1#1 = bitmap_line::x1#0
    // [108] bitmap_line_xdyd::xd#1 = bitmap_line::xd#1
    // [109] bitmap_line_xdyd::yd#1 = bitmap_line::yd#10
    // [110] call bitmap_line_xdyd 
    // [170] phi from bitmap_line::@12 to bitmap_line_xdyd [phi:bitmap_line::@12->bitmap_line_xdyd]
  bitmap_line_xdyd_from___b12:
    // [170] phi bitmap_line_xdyd::x1#6 = bitmap_line_xdyd::x1#1 [phi:bitmap_line::@12->bitmap_line_xdyd#0] -- register_copy 
    // [170] phi bitmap_line_xdyd::xd#5 = bitmap_line_xdyd::xd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#1] -- register_copy 
    // [170] phi bitmap_line_xdyd::y#5 = bitmap_line_xdyd::y#1 [phi:bitmap_line::@12->bitmap_line_xdyd#2] -- register_copy 
    // [170] phi bitmap_line_xdyd::x#6 = bitmap_line_xdyd::x#1 [phi:bitmap_line::@12->bitmap_line_xdyd#3] -- register_copy 
    // [170] phi bitmap_line_xdyd::yd#2 = bitmap_line_xdyd::yd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp __breturn
    // bitmap_line::@11
  __b11:
    // [111] bitmap_line::yd#11 = bitmap_line::y1#0 - bitmap_line::y0#0 -- vbuz1=vbuyy_minus_vbuz2 
    tya
    sec
    sbc.z y0
    sta.z yd_1
    // [112] if(bitmap_line::yd#11<bitmap_line::xd#1) goto bitmap_line::@13 -- vbuz1_lt_vbuz2_then_la1 
    lda.z yd_1
    cmp.z xd
    bcc __b13
    jmp __b14
    // bitmap_line::@14
  __b14:
    // [113] bitmap_line_ydxi::y#1 = bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxi.y
    // [114] bitmap_line_ydxi::x#1 = bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx.z x0
    // [115] bitmap_line_ydxi::y1#1 = bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxi.y1
    // [116] bitmap_line_ydxi::yd#1 = bitmap_line::yd#11
    // [117] bitmap_line_ydxi::xd#1 = bitmap_line::xd#1
    // [118] call bitmap_line_ydxi 
    // [125] phi from bitmap_line::@14 to bitmap_line_ydxi [phi:bitmap_line::@14->bitmap_line_ydxi]
  bitmap_line_ydxi_from___b14:
    // [125] phi bitmap_line_ydxi::y1#6 = bitmap_line_ydxi::y1#1 [phi:bitmap_line::@14->bitmap_line_ydxi#0] -- register_copy 
    // [125] phi bitmap_line_ydxi::yd#5 = bitmap_line_ydxi::yd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#1] -- register_copy 
    // [125] phi bitmap_line_ydxi::y#6 = bitmap_line_ydxi::y#1 [phi:bitmap_line::@14->bitmap_line_ydxi#2] -- register_copy 
    // [125] phi bitmap_line_ydxi::x#5 = bitmap_line_ydxi::x#1 [phi:bitmap_line::@14->bitmap_line_ydxi#3] -- register_copy 
    // [125] phi bitmap_line_ydxi::xd#2 = bitmap_line_ydxi::xd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp __breturn
    // bitmap_line::@13
  __b13:
    // [119] bitmap_line_xdyi::x#1 = bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx.z x0
    // [120] bitmap_line_xdyi::y#1 = bitmap_line::y0#0
    // [121] bitmap_line_xdyi::x1#1 = bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyi.x1
    // [122] bitmap_line_xdyi::xd#1 = bitmap_line::xd#1
    // [123] bitmap_line_xdyi::yd#1 = bitmap_line::yd#11
    // [124] call bitmap_line_xdyi 
    // [140] phi from bitmap_line::@13 to bitmap_line_xdyi [phi:bitmap_line::@13->bitmap_line_xdyi]
  bitmap_line_xdyi_from___b13:
    // [140] phi bitmap_line_xdyi::x1#6 = bitmap_line_xdyi::x1#1 [phi:bitmap_line::@13->bitmap_line_xdyi#0] -- register_copy 
    // [140] phi bitmap_line_xdyi::xd#5 = bitmap_line_xdyi::xd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#1] -- register_copy 
    // [140] phi bitmap_line_xdyi::y#5 = bitmap_line_xdyi::y#1 [phi:bitmap_line::@13->bitmap_line_xdyi#2] -- register_copy 
    // [140] phi bitmap_line_xdyi::x#6 = bitmap_line_xdyi::x#1 [phi:bitmap_line::@13->bitmap_line_xdyi#3] -- register_copy 
    // [140] phi bitmap_line_xdyi::yd#2 = bitmap_line_xdyi::yd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp __breturn
}
  // bitmap_line_ydxi
// bitmap_line_ydxi(byte zp(6) y, byte register(X) x, byte zp(4) y1, byte zp(3) yd, byte zp(9) xd)
bitmap_line_ydxi: {
    .label y = 6
    .label y1 = 4
    .label yd = 3
    .label xd = 9
    .label e = 5
    // [126] bitmap_line_ydxi::e#0 = bitmap_line_ydxi::xd#2 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [127] phi from bitmap_line_ydxi bitmap_line_ydxi::@2 to bitmap_line_ydxi::@1 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1]
  __b1_from_bitmap_line_ydxi:
  __b1_from___b2:
    // [127] phi bitmap_line_ydxi::e#3 = bitmap_line_ydxi::e#0 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#0] -- register_copy 
    // [127] phi bitmap_line_ydxi::y#3 = bitmap_line_ydxi::y#6 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#1] -- register_copy 
    // [127] phi bitmap_line_ydxi::x#3 = bitmap_line_ydxi::x#5 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_ydxi::@1
  __b1:
    // [128] bitmap_plot::x#2 = bitmap_line_ydxi::x#3
    // [129] bitmap_plot::y#2 = bitmap_line_ydxi::y#3 -- vbuyy=vbuz1 
    ldy.z y
    // [130] call bitmap_plot 
    // [185] phi from bitmap_line_ydxi::@1 to bitmap_plot [phi:bitmap_line_ydxi::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [185] phi bitmap_plot::y#4 = bitmap_plot::y#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#0] -- register_copy 
    // [185] phi bitmap_plot::x#4 = bitmap_plot::x#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_ydxi::@4
  __b4:
    // [131] bitmap_line_ydxi::y#2 = ++ bitmap_line_ydxi::y#3 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [132] bitmap_line_ydxi::e#1 = bitmap_line_ydxi::e#3 + bitmap_line_ydxi::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // [133] if(bitmap_line_ydxi::yd#5>=bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_ydxi::@3
  __b3:
    // [134] bitmap_line_ydxi::x#2 = ++ bitmap_line_ydxi::x#3 -- vbuxx=_inc_vbuxx 
    inx
    // [135] bitmap_line_ydxi::e#2 = bitmap_line_ydxi::e#1 - bitmap_line_ydxi::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [136] phi from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4 to bitmap_line_ydxi::@2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [136] phi bitmap_line_ydxi::e#6 = bitmap_line_ydxi::e#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#0] -- register_copy 
    // [136] phi bitmap_line_ydxi::x#6 = bitmap_line_ydxi::x#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_ydxi::@2
  __b2:
    // [137] bitmap_line_ydxi::$6 = bitmap_line_ydxi::y1#6 + 1 -- vbuyy=vbuz1_plus_1 
    ldy.z y1
    iny
    // [138] if(bitmap_line_ydxi::y#2!=bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1 -- vbuz1_neq_vbuyy_then_la1 
    cpy.z y
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_ydxi::@return
  __breturn:
    // [139] return 
    rts
}
  // bitmap_line_xdyi
// bitmap_line_xdyi(byte register(X) x, byte zp(4) y, byte zp(5) x1, byte zp(9) xd, byte zp(3) yd)
bitmap_line_xdyi: {
    .label __6 = $a
    .label y = 4
    .label x1 = 5
    .label xd = 9
    .label yd = 3
    .label e = 6
    // [141] bitmap_line_xdyi::e#0 = bitmap_line_xdyi::yd#2 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [142] phi from bitmap_line_xdyi bitmap_line_xdyi::@2 to bitmap_line_xdyi::@1 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1]
  __b1_from_bitmap_line_xdyi:
  __b1_from___b2:
    // [142] phi bitmap_line_xdyi::e#3 = bitmap_line_xdyi::e#0 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#0] -- register_copy 
    // [142] phi bitmap_line_xdyi::y#3 = bitmap_line_xdyi::y#5 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#1] -- register_copy 
    // [142] phi bitmap_line_xdyi::x#3 = bitmap_line_xdyi::x#6 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_xdyi::@1
  __b1:
    // [143] bitmap_plot::x#0 = bitmap_line_xdyi::x#3
    // [144] bitmap_plot::y#0 = bitmap_line_xdyi::y#3 -- vbuyy=vbuz1 
    ldy.z y
    // [145] call bitmap_plot 
    // [185] phi from bitmap_line_xdyi::@1 to bitmap_plot [phi:bitmap_line_xdyi::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [185] phi bitmap_plot::y#4 = bitmap_plot::y#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#0] -- register_copy 
    // [185] phi bitmap_plot::x#4 = bitmap_plot::x#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_xdyi::@4
  __b4:
    // [146] bitmap_line_xdyi::x#2 = ++ bitmap_line_xdyi::x#3 -- vbuxx=_inc_vbuxx 
    inx
    // [147] bitmap_line_xdyi::e#1 = bitmap_line_xdyi::e#3 + bitmap_line_xdyi::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // [148] if(bitmap_line_xdyi::xd#5>=bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_xdyi::@3
  __b3:
    // [149] bitmap_line_xdyi::y#2 = ++ bitmap_line_xdyi::y#3 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [150] bitmap_line_xdyi::e#2 = bitmap_line_xdyi::e#1 - bitmap_line_xdyi::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [151] phi from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4 to bitmap_line_xdyi::@2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [151] phi bitmap_line_xdyi::e#6 = bitmap_line_xdyi::e#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#0] -- register_copy 
    // [151] phi bitmap_line_xdyi::y#6 = bitmap_line_xdyi::y#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_xdyi::@2
  __b2:
    // [152] bitmap_line_xdyi::$6 = bitmap_line_xdyi::x1#6 + 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x1
    iny
    sty.z __6
    // [153] if(bitmap_line_xdyi::x#2!=bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1 -- vbuxx_neq_vbuz1_then_la1 
    cpx.z __6
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_xdyi::@return
  __breturn:
    // [154] return 
    rts
}
  // bitmap_line_ydxd
// bitmap_line_ydxd(byte zp(8) y, byte register(X) x, byte zp(4) y1, byte zp(6) yd, byte zp(9) xd)
bitmap_line_ydxd: {
    .label y = 8
    .label y1 = 4
    .label yd = 6
    .label xd = 9
    .label e = 7
    // [156] bitmap_line_ydxd::e#0 = bitmap_line_ydxd::xd#2 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [157] phi from bitmap_line_ydxd bitmap_line_ydxd::@2 to bitmap_line_ydxd::@1 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1]
  __b1_from_bitmap_line_ydxd:
  __b1_from___b2:
    // [157] phi bitmap_line_ydxd::e#3 = bitmap_line_ydxd::e#0 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#0] -- register_copy 
    // [157] phi bitmap_line_ydxd::y#2 = bitmap_line_ydxd::y#7 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#1] -- register_copy 
    // [157] phi bitmap_line_ydxd::x#3 = bitmap_line_ydxd::x#5 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_ydxd::@1
  __b1:
    // [158] bitmap_plot::x#3 = bitmap_line_ydxd::x#3
    // [159] bitmap_plot::y#3 = bitmap_line_ydxd::y#2 -- vbuyy=vbuz1 
    ldy.z y
    // [160] call bitmap_plot 
    // [185] phi from bitmap_line_ydxd::@1 to bitmap_plot [phi:bitmap_line_ydxd::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [185] phi bitmap_plot::y#4 = bitmap_plot::y#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#0] -- register_copy 
    // [185] phi bitmap_plot::x#4 = bitmap_plot::x#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_ydxd::@4
  __b4:
    // [161] bitmap_line_ydxd::y#3 = ++ bitmap_line_ydxd::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [162] bitmap_line_ydxd::e#1 = bitmap_line_ydxd::e#3 + bitmap_line_ydxd::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // [163] if(bitmap_line_ydxd::yd#5>=bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_ydxd::@3
  __b3:
    // [164] bitmap_line_ydxd::x#2 = -- bitmap_line_ydxd::x#3 -- vbuxx=_dec_vbuxx 
    dex
    // [165] bitmap_line_ydxd::e#2 = bitmap_line_ydxd::e#1 - bitmap_line_ydxd::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [166] phi from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4 to bitmap_line_ydxd::@2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [166] phi bitmap_line_ydxd::e#6 = bitmap_line_ydxd::e#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#0] -- register_copy 
    // [166] phi bitmap_line_ydxd::x#6 = bitmap_line_ydxd::x#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_ydxd::@2
  __b2:
    // [167] bitmap_line_ydxd::$6 = bitmap_line_ydxd::y1#6 + 1 -- vbuyy=vbuz1_plus_1 
    ldy.z y1
    iny
    // [168] if(bitmap_line_ydxd::y#3!=bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1 -- vbuz1_neq_vbuyy_then_la1 
    cpy.z y
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_ydxd::@return
  __breturn:
    // [169] return 
    rts
}
  // bitmap_line_xdyd
// bitmap_line_xdyd(byte register(X) x, byte zp(4) y, byte zp(7) x1, byte zp(9) xd, byte zp(6) yd)
bitmap_line_xdyd: {
    .label __6 = $a
    .label y = 4
    .label x1 = 7
    .label xd = 9
    .label yd = 6
    .label e = 8
    // [171] bitmap_line_xdyd::e#0 = bitmap_line_xdyd::yd#2 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [172] phi from bitmap_line_xdyd bitmap_line_xdyd::@2 to bitmap_line_xdyd::@1 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1]
  __b1_from_bitmap_line_xdyd:
  __b1_from___b2:
    // [172] phi bitmap_line_xdyd::e#3 = bitmap_line_xdyd::e#0 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#0] -- register_copy 
    // [172] phi bitmap_line_xdyd::y#3 = bitmap_line_xdyd::y#5 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#1] -- register_copy 
    // [172] phi bitmap_line_xdyd::x#3 = bitmap_line_xdyd::x#6 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_xdyd::@1
  __b1:
    // [173] bitmap_plot::x#1 = bitmap_line_xdyd::x#3
    // [174] bitmap_plot::y#1 = bitmap_line_xdyd::y#3 -- vbuyy=vbuz1 
    ldy.z y
    // [175] call bitmap_plot 
    // [185] phi from bitmap_line_xdyd::@1 to bitmap_plot [phi:bitmap_line_xdyd::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [185] phi bitmap_plot::y#4 = bitmap_plot::y#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#0] -- register_copy 
    // [185] phi bitmap_plot::x#4 = bitmap_plot::x#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_xdyd::@4
  __b4:
    // [176] bitmap_line_xdyd::x#2 = ++ bitmap_line_xdyd::x#3 -- vbuxx=_inc_vbuxx 
    inx
    // [177] bitmap_line_xdyd::e#1 = bitmap_line_xdyd::e#3 + bitmap_line_xdyd::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // [178] if(bitmap_line_xdyd::xd#5>=bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_xdyd::@3
  __b3:
    // [179] bitmap_line_xdyd::y#2 = -- bitmap_line_xdyd::y#3 -- vbuz1=_dec_vbuz1 
    dec.z y
    // [180] bitmap_line_xdyd::e#2 = bitmap_line_xdyd::e#1 - bitmap_line_xdyd::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [181] phi from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4 to bitmap_line_xdyd::@2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [181] phi bitmap_line_xdyd::e#6 = bitmap_line_xdyd::e#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#0] -- register_copy 
    // [181] phi bitmap_line_xdyd::y#6 = bitmap_line_xdyd::y#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_xdyd::@2
  __b2:
    // [182] bitmap_line_xdyd::$6 = bitmap_line_xdyd::x1#6 + 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x1
    iny
    sty.z __6
    // [183] if(bitmap_line_xdyd::x#2!=bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1 -- vbuxx_neq_vbuz1_then_la1 
    cpx.z __6
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_xdyd::@return
  __breturn:
    // [184] return 
    rts
}
  // bitmap_plot
// bitmap_plot(byte register(X) x, byte register(Y) y)
bitmap_plot: {
    .label plotter_x = $b
    .label plotter_y = $d
    .label plotter = $b
    // [186] bitmap_plot::plotter_x#0 = bitmap_plot_xhi[bitmap_plot::x#4] w= bitmap_plot_xlo[bitmap_plot::x#4] -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_xhi,x
    sta.z plotter_x+1
    lda bitmap_plot_xlo,x
    sta.z plotter_x
    // [187] bitmap_plot::plotter_y#0 = bitmap_plot_yhi[bitmap_plot::y#4] w= bitmap_plot_ylo[bitmap_plot::y#4] -- vwuz1=pbuc1_derefidx_vbuyy_word_pbuc2_derefidx_vbuyy 
    lda bitmap_plot_yhi,y
    sta.z plotter_y+1
    lda bitmap_plot_ylo,y
    sta.z plotter_y
    // [188] bitmap_plot::plotter#0 = bitmap_plot::plotter_x#0 + bitmap_plot::plotter_y#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z plotter_y
    sta.z plotter
    lda.z plotter+1
    adc.z plotter_y+1
    sta.z plotter+1
    // [189] bitmap_plot::$1 = *((byte*)bitmap_plot::plotter#0) | bitmap_plot_bit[bitmap_plot::x#4] -- vbuaa=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (plotter),y
    // [190] *((byte*)bitmap_plot::plotter#0) = bitmap_plot::$1 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (plotter),y
    jmp __breturn
    // bitmap_plot::@return
  __breturn:
    // [191] return 
    rts
}
  // File Data
  // Tables for the plotter - initialized by calling bitmap_draw_init();
  bitmap_plot_xlo: .fill $100, 0
  bitmap_plot_xhi: .fill $100, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  lines_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28, $3c
  lines_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28, $a

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b10
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b14
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #>0
Replacing instruction ldx #0 with TAX
Replacing instruction ldy #0 with TAY
Removing instruction ldy.z l
Removing instruction ldy.z l
Removing instruction lda.z yd_1
Removing instruction lda.z yd
Removing instruction lda.z yd
Removing instruction lda.z yd_1
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b6_from___b1 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b4_from___b3 with __b4
Replacing label __b3_from___b4 with __b3
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b2 with __b1
Removing instruction __b2_from_main:
Removing instruction __b3_from___b2:
Removing instruction init_screen_from___b3:
Removing instruction __b1_from___b1:
Removing instruction __b1_from___b3:
Removing instruction lines_from___b1:
Removing instruction __b1_from___b2:
Removing instruction __b6_from___b1:
Removing instruction __b6:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b4:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b5:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from_bitmap_line_ydxi:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_bitmap_line_xdyi:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_bitmap_line_ydxd:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_bitmap_line_xdyd:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bitmap_init_from_main:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b1_from_bitmap_init:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1_from_bitmap_clear:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_init_screen:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_lines:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction bitmap_line_ydxi_from___b4:
Removing instruction bitmap_line_xdyi_from___b8:
Removing instruction __b10:
Removing instruction bitmap_line_ydxd_from___b10:
Removing instruction bitmap_line_xdyd_from___b9:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction bitmap_line_ydxd_from___b6:
Removing instruction bitmap_line_xdyd_from___b12:
Removing instruction __b14:
Removing instruction bitmap_line_ydxi_from___b14:
Removing instruction bitmap_line_xdyi_from___b13:
Removing instruction bitmap_plot_from___b1:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction bitmap_plot_from___b1:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction bitmap_plot_from___b1:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction bitmap_plot_from___b1:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda.z x0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* BITMAP = (byte*) 8192
const nomodify byte* D011 = (byte*) 53265
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
const byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
const nomodify byte* SCREEN = (byte*) 1024
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*) 53248
const nomodify byte VIC_BMM = $20
const nomodify byte VIC_DEN = $10
const nomodify byte* VIC_MEMORY = (byte*) 53272
const nomodify byte VIC_RSEL = 8
void bitmap_clear()
byte* bitmap_clear::bitmap
word bitmap_clear::bitmap#0 bitmap zp[2]:11 11.0
byte* bitmap_clear::bitmap#1 bitmap zp[2]:11 420.59999999999997
byte* bitmap_clear::bitmap#2 bitmap zp[2]:11 1552.0
byte* bitmap_clear::bitmap#3 bitmap zp[2]:11 213.0
byte* bitmap_clear::bitmap#5 bitmap zp[2]:11 22.0
byte bitmap_clear::x
byte bitmap_clear::x#1 reg byte x 1501.5
byte bitmap_clear::x#2 reg byte x 667.3333333333334
byte bitmap_clear::y
byte bitmap_clear::y#1 y zp[1]:2 151.5
byte bitmap_clear::y#4 y zp[1]:2 33.666666666666664
void bitmap_init(byte* bitmap_init::bitmap)
byte~ bitmap_init::$0 reg byte a 202.0
byte~ bitmap_init::$10 zp[1]:9 50.5
byte~ bitmap_init::$7 reg byte a 202.0
byte~ bitmap_init::$8 reg byte a 202.0
byte~ bitmap_init::$9 reg byte a 202.0
byte* bitmap_init::bitmap
byte bitmap_init::bits
byte bitmap_init::bits#1 reg byte y 101.0
byte bitmap_init::bits#3 reg byte y 60.599999999999994
byte bitmap_init::bits#4 reg byte y 67.33333333333333
byte bitmap_init::x
byte bitmap_init::x#1 reg byte x 151.5
byte bitmap_init::x#2 reg byte x 67.33333333333333
byte bitmap_init::y
byte bitmap_init::y#1 reg byte x 151.5
byte bitmap_init::y#2 reg byte x 50.5
byte* bitmap_init::yoffs
byte* bitmap_init::yoffs#1 yoffs zp[2]:11 202.0
byte* bitmap_init::yoffs#2 yoffs zp[2]:11 63.125
byte* bitmap_init::yoffs#4 yoffs zp[2]:11 101.0
void bitmap_line(byte bitmap_line::x0 , byte bitmap_line::x1 , byte bitmap_line::y0 , byte bitmap_line::y1)
byte bitmap_line::x0
byte bitmap_line::x0#0 x0 zp[1]:5 39565.65217391305
byte bitmap_line::x1
byte bitmap_line::x1#0 x1 zp[1]:7 41364.09090909091
byte bitmap_line::xd
byte bitmap_line::xd#1 xd zp[1]:9 35000.35
byte bitmap_line::xd#2 xd zp[1]:9 35000.35
byte bitmap_line::y0
byte bitmap_line::y0#0 y0 zp[1]:4 57619.66666666667
byte bitmap_line::y1
byte bitmap_line::y1#0 reg byte y 60500.650000000016
byte bitmap_line::yd
byte bitmap_line::yd#1 yd zp[1]:6 44444.88888888889
byte bitmap_line::yd#10 yd zp[1]:6 44444.88888888889
byte bitmap_line::yd#11 yd_1 zp[1]:3 44444.88888888889
byte bitmap_line::yd#2 yd_1 zp[1]:3 44444.88888888889
void bitmap_line_xdyd(byte bitmap_line_xdyd::x , byte bitmap_line_xdyd::y , byte bitmap_line_xdyd::x1 , byte bitmap_line_xdyd::xd , byte bitmap_line_xdyd::yd)
byte~ bitmap_line_xdyd::$6 zp[1]:10 2.000000002E9
byte bitmap_line_xdyd::e
byte bitmap_line_xdyd::e#0 e zp[1]:8 2000002.0
byte bitmap_line_xdyd::e#1 e zp[1]:8 1.3333333346666667E9
byte bitmap_line_xdyd::e#2 e zp[1]:8 2.000000002E9
byte bitmap_line_xdyd::e#3 e zp[1]:8 4.0020000059999996E8
byte bitmap_line_xdyd::e#6 e zp[1]:8 1.000000001E9
byte bitmap_line_xdyd::x
byte bitmap_line_xdyd::x#0 reg byte x 40000.4
byte bitmap_line_xdyd::x#1 reg byte x 40000.4
byte bitmap_line_xdyd::x#2 reg byte x 3.75000000375E8
byte bitmap_line_xdyd::x#3 reg byte x 7.50250001E8
byte bitmap_line_xdyd::x#6 reg byte x 600001.5
byte bitmap_line_xdyd::x1
byte bitmap_line_xdyd::x1#0 x1 zp[1]:7 66667.33333333333
byte bitmap_line_xdyd::x1#1 x1 zp[1]:7 66667.33333333333
byte bitmap_line_xdyd::x1#6 x1 zp[1]:7 7.144285735714285E7
byte bitmap_line_xdyd::xd
byte bitmap_line_xdyd::xd#0 xd zp[1]:9 100001.0
byte bitmap_line_xdyd::xd#1 xd zp[1]:9 100001.0
byte bitmap_line_xdyd::xd#5 xd zp[1]:9 1.4287142885714287E8
byte bitmap_line_xdyd::y
byte bitmap_line_xdyd::y#0 y zp[1]:4 50000.5
byte bitmap_line_xdyd::y#1 y zp[1]:4 50000.5
byte bitmap_line_xdyd::y#2 y zp[1]:4 1.000000001E9
byte bitmap_line_xdyd::y#3 y zp[1]:4 5.715714292857143E8
byte bitmap_line_xdyd::y#5 y zp[1]:4 600001.5
byte bitmap_line_xdyd::y#6 y zp[1]:4 1.000000001E9
byte bitmap_line_xdyd::yd
byte bitmap_line_xdyd::yd#0 yd zp[1]:6 200002.0
byte bitmap_line_xdyd::yd#1 yd zp[1]:6 200002.0
byte bitmap_line_xdyd::yd#2 yd zp[1]:6 7.1514286E7
void bitmap_line_xdyi(byte bitmap_line_xdyi::x , byte bitmap_line_xdyi::y , byte bitmap_line_xdyi::x1 , byte bitmap_line_xdyi::xd , byte bitmap_line_xdyi::yd)
byte~ bitmap_line_xdyi::$6 zp[1]:10 2.000000002E9
byte bitmap_line_xdyi::e
byte bitmap_line_xdyi::e#0 e zp[1]:6 2000002.0
byte bitmap_line_xdyi::e#1 e zp[1]:6 1.3333333346666667E9
byte bitmap_line_xdyi::e#2 e zp[1]:6 2.000000002E9
byte bitmap_line_xdyi::e#3 e zp[1]:6 4.0020000059999996E8
byte bitmap_line_xdyi::e#6 e zp[1]:6 1.000000001E9
byte bitmap_line_xdyi::x
byte bitmap_line_xdyi::x#0 reg byte x 40000.4
byte bitmap_line_xdyi::x#1 reg byte x 40000.4
byte bitmap_line_xdyi::x#2 reg byte x 3.75000000375E8
byte bitmap_line_xdyi::x#3 reg byte x 7.50250001E8
byte bitmap_line_xdyi::x#6 reg byte x 600001.5
byte bitmap_line_xdyi::x1
byte bitmap_line_xdyi::x1#0 x1 zp[1]:5 66667.33333333333
byte bitmap_line_xdyi::x1#1 x1 zp[1]:5 66667.33333333333
byte bitmap_line_xdyi::x1#6 x1 zp[1]:5 7.144285735714285E7
byte bitmap_line_xdyi::xd
byte bitmap_line_xdyi::xd#0 xd zp[1]:9 100001.0
byte bitmap_line_xdyi::xd#1 xd zp[1]:9 100001.0
byte bitmap_line_xdyi::xd#5 xd zp[1]:9 1.4287142885714287E8
byte bitmap_line_xdyi::y
byte bitmap_line_xdyi::y#0 y zp[1]:4 50000.5
byte bitmap_line_xdyi::y#1 y zp[1]:4 50000.5
byte bitmap_line_xdyi::y#2 y zp[1]:4 1.000000001E9
byte bitmap_line_xdyi::y#3 y zp[1]:4 5.715714292857143E8
byte bitmap_line_xdyi::y#5 y zp[1]:4 600001.5
byte bitmap_line_xdyi::y#6 y zp[1]:4 1.000000001E9
byte bitmap_line_xdyi::yd
byte bitmap_line_xdyi::yd#0 yd zp[1]:3 200002.0
byte bitmap_line_xdyi::yd#1 yd zp[1]:3 200002.0
byte bitmap_line_xdyi::yd#2 yd zp[1]:3 7.1514286E7
void bitmap_line_ydxd(byte bitmap_line_ydxd::y , byte bitmap_line_ydxd::x , byte bitmap_line_ydxd::y1 , byte bitmap_line_ydxd::yd , byte bitmap_line_ydxd::xd)
byte~ bitmap_line_ydxd::$6 reg byte y 2.000000002E9
byte bitmap_line_ydxd::e
byte bitmap_line_ydxd::e#0 e zp[1]:7 2000002.0
byte bitmap_line_ydxd::e#1 e zp[1]:7 1.3333333346666667E9
byte bitmap_line_ydxd::e#2 e zp[1]:7 2.000000002E9
byte bitmap_line_ydxd::e#3 e zp[1]:7 4.0020000059999996E8
byte bitmap_line_ydxd::e#6 e zp[1]:7 1.000000001E9
byte bitmap_line_ydxd::x
byte bitmap_line_ydxd::x#0 reg byte x 50000.5
byte bitmap_line_ydxd::x#1 reg byte x 50000.5
byte bitmap_line_ydxd::x#2 reg byte x 1.000000001E9
byte bitmap_line_ydxd::x#3 reg byte x 5.715714292857143E8
byte bitmap_line_ydxd::x#5 reg byte x 600001.5
byte bitmap_line_ydxd::x#6 reg byte x 1.000000001E9
byte bitmap_line_ydxd::xd
byte bitmap_line_ydxd::xd#0 xd zp[1]:9 200002.0
byte bitmap_line_ydxd::xd#1 xd zp[1]:9 200002.0
byte bitmap_line_ydxd::xd#2 xd zp[1]:9 7.1514286E7
byte bitmap_line_ydxd::y
byte bitmap_line_ydxd::y#0 y zp[1]:8 40000.4
byte bitmap_line_ydxd::y#1 y zp[1]:8 40000.4
byte bitmap_line_ydxd::y#2 y zp[1]:8 7.50250001E8
byte bitmap_line_ydxd::y#3 y zp[1]:8 3.75000000375E8
byte bitmap_line_ydxd::y#7 y zp[1]:8 600001.5
byte bitmap_line_ydxd::y1
byte bitmap_line_ydxd::y1#0 y1 zp[1]:4 66667.33333333333
byte bitmap_line_ydxd::y1#1 y1 zp[1]:4 66667.33333333333
byte bitmap_line_ydxd::y1#6 y1 zp[1]:4 7.144285735714285E7
byte bitmap_line_ydxd::yd
byte bitmap_line_ydxd::yd#0 yd zp[1]:6 100001.0
byte bitmap_line_ydxd::yd#1 yd zp[1]:6 100001.0
byte bitmap_line_ydxd::yd#5 yd zp[1]:6 1.4287142885714287E8
void bitmap_line_ydxi(byte bitmap_line_ydxi::y , byte bitmap_line_ydxi::x , byte bitmap_line_ydxi::y1 , byte bitmap_line_ydxi::yd , byte bitmap_line_ydxi::xd)
byte~ bitmap_line_ydxi::$6 reg byte y 2.000000002E9
byte bitmap_line_ydxi::e
byte bitmap_line_ydxi::e#0 e zp[1]:5 2000002.0
byte bitmap_line_ydxi::e#1 e zp[1]:5 1.3333333346666667E9
byte bitmap_line_ydxi::e#2 e zp[1]:5 2.000000002E9
byte bitmap_line_ydxi::e#3 e zp[1]:5 4.0020000059999996E8
byte bitmap_line_ydxi::e#6 e zp[1]:5 1.000000001E9
byte bitmap_line_ydxi::x
byte bitmap_line_ydxi::x#0 reg byte x 50000.5
byte bitmap_line_ydxi::x#1 reg byte x 50000.5
byte bitmap_line_ydxi::x#2 reg byte x 1.000000001E9
byte bitmap_line_ydxi::x#3 reg byte x 5.715714292857143E8
byte bitmap_line_ydxi::x#5 reg byte x 600001.5
byte bitmap_line_ydxi::x#6 reg byte x 1.000000001E9
byte bitmap_line_ydxi::xd
byte bitmap_line_ydxi::xd#0 xd zp[1]:9 200002.0
byte bitmap_line_ydxi::xd#1 xd zp[1]:9 200002.0
byte bitmap_line_ydxi::xd#2 xd zp[1]:9 7.1514286E7
byte bitmap_line_ydxi::y
byte bitmap_line_ydxi::y#0 y zp[1]:6 40000.4
byte bitmap_line_ydxi::y#1 y zp[1]:6 40000.4
byte bitmap_line_ydxi::y#2 y zp[1]:6 3.75000000375E8
byte bitmap_line_ydxi::y#3 y zp[1]:6 7.50250001E8
byte bitmap_line_ydxi::y#6 y zp[1]:6 600001.5
byte bitmap_line_ydxi::y1
byte bitmap_line_ydxi::y1#0 y1 zp[1]:4 66667.33333333333
byte bitmap_line_ydxi::y1#1 y1 zp[1]:4 66667.33333333333
byte bitmap_line_ydxi::y1#6 y1 zp[1]:4 7.144285735714285E7
byte bitmap_line_ydxi::yd
byte bitmap_line_ydxi::yd#0 yd zp[1]:3 100001.0
byte bitmap_line_ydxi::yd#1 yd zp[1]:3 100001.0
byte bitmap_line_ydxi::yd#5 yd zp[1]:3 1.4287142885714287E8
void bitmap_plot(byte bitmap_plot::x , byte bitmap_plot::y)
byte~ bitmap_plot::$1 reg byte a 2.0000000002E10
byte* bitmap_plot::plotter
word bitmap_plot::plotter#0 plotter zp[2]:11 5.0000000005E9
word bitmap_plot::plotter_x
word bitmap_plot::plotter_x#0 plotter_x zp[2]:11 1.0000000001E10
word bitmap_plot::plotter_y
word bitmap_plot::plotter_y#0 plotter_y zp[2]:13 2.0000000002E10
byte bitmap_plot::x
byte bitmap_plot::x#0 reg byte x 1.000000001E9
byte bitmap_plot::x#1 reg byte x 1.000000001E9
byte bitmap_plot::x#2 reg byte x 1.000000001E9
byte bitmap_plot::x#3 reg byte x 1.000000001E9
byte bitmap_plot::x#4 reg byte x 8.50000000175E9
byte bitmap_plot::y
byte bitmap_plot::y#0 reg byte y 2.000000002E9
byte bitmap_plot::y#1 reg byte y 2.000000002E9
byte bitmap_plot::y#2 reg byte y 2.000000002E9
byte bitmap_plot::y#3 reg byte y 2.000000002E9
byte bitmap_plot::y#4 reg byte y 1.2000000003E10
const to_nomodify byte* bitmap_plot_bit[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_xhi[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_xlo[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_yhi[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_ylo[$100]  = { fill( $100, 0) }
void init_screen()
byte* init_screen::c
byte* init_screen::c#1 c zp[2]:11 202.0
byte* init_screen::c#2 c zp[2]:11 134.66666666666666
void lines()
byte lines::l
byte lines::l#1 l zp[1]:2 20002.0
byte lines::l#2 l zp[1]:2 10001.000000000002
const byte lines_cnt = 8
const byte* lines_x[]  = { $3c, $50, $6e, $50, $3c, $28, $a, $28, $3c }
const byte* lines_y[]  = { $a, $28, $3c, $50, $6e, $50, $3c, $28, $a }
void main()

reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte y [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ]
zp[1]:2 [ lines::l#2 lines::l#1 bitmap_clear::y#4 bitmap_clear::y#1 ]
zp[1]:3 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line::yd#2 bitmap_line::yd#11 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
zp[1]:4 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y0#0 bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
reg byte x [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
zp[1]:5 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x0#0 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
reg byte x [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
zp[1]:6 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 bitmap_line::yd#1 bitmap_line::yd#10 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
reg byte x [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
zp[1]:7 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 bitmap_line::x1#0 bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
reg byte x [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
zp[1]:8 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
reg byte x [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
reg byte y [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
reg byte a [ bitmap_init::$0 ]
zp[1]:9 [ bitmap_init::$10 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
reg byte a [ bitmap_init::$7 ]
reg byte a [ bitmap_init::$8 ]
reg byte a [ bitmap_init::$9 ]
reg byte y [ bitmap_line::y1#0 ]
reg byte y [ bitmap_line_ydxi::$6 ]
reg byte y [ bitmap_line_ydxd::$6 ]
zp[1]:10 [ bitmap_line_xdyd::$6 bitmap_line_xdyi::$6 ]
zp[2]:11 [ bitmap_plot::plotter_x#0 bitmap_plot::plotter#0 init_screen::c#2 init_screen::c#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
zp[2]:13 [ bitmap_plot::plotter_y#0 ]
reg byte a [ bitmap_plot::$1 ]


FINAL ASSEMBLER
Score: 221360

  // File Comments
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .const lines_cnt = 8
  .label D011 = $d011
  .label VIC_MEMORY = $d018
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  .label SCREEN = $400
  .label BITMAP = $2000
  // main
main: {
    // VICII->BORDER_COLOR = 0
    // [0] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // VICII->BG_COLOR = 0
    // [1] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = 0 -- _deref_pbuc1=vbuc2 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // *D011 = VIC_BMM|VIC_DEN|VIC_RSEL|3
    // [2] *D011 = VIC_BMM|VIC_DEN|VIC_RSEL|3 -- _deref_pbuc1=vbuc2 
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta D011
    // *VIC_MEMORY =  (char)((((unsigned int)SCREEN&$3fff)/$40)|(((unsigned int)BITMAP&$3fff)/$400))
    // [3] *VIC_MEMORY = (byte)(word)SCREEN&$3fff/$40|(word)BITMAP&$3fff/$400 -- _deref_pbuc1=vbuc2 
    lda #(SCREEN&$3fff)/$40|(BITMAP&$3fff)/$400
    sta VIC_MEMORY
    // bitmap_init(BITMAP)
    // [4] call bitmap_init 
    // [11] phi from main to bitmap_init [phi:main->bitmap_init]
    jsr bitmap_init
    // [5] phi from main to main::@2 [phi:main->main::@2]
    // main::@2
    // bitmap_clear()
    // [6] call bitmap_clear 
    jsr bitmap_clear
    // [7] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // init_screen()
    // [8] call init_screen 
    // [47] phi from main::@3 to init_screen [phi:main::@3->init_screen]
    jsr init_screen
    // [9] phi from main::@1 main::@3 to main::@1 [phi:main::@1/main::@3->main::@1]
    // main::@1
  __b1:
    // lines()
    // [10] call lines 
    // [53] phi from main::@1 to lines [phi:main::@1->lines]
    jsr lines
    jmp __b1
}
  // bitmap_init
// Initialize the bitmap plotter tables for a specific bitmap
bitmap_init: {
    .label __10 = 9
    .label yoffs = $b
    // [12] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
    // [12] phi bitmap_init::bits#3 = $80 [phi:bitmap_init->bitmap_init::@1#0] -- vbuyy=vbuc1 
    ldy #$80
    // [12] phi bitmap_init::x#2 = 0 [phi:bitmap_init->bitmap_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [12] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
    // [12] phi bitmap_init::bits#3 = bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [12] phi bitmap_init::x#2 = bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    // bitmap_init::@1
  __b1:
    // x&$f8
    // [13] bitmap_init::$0 = bitmap_init::x#2 & $f8 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f8
    // bitmap_plot_xlo[x] = x&$f8
    // [14] bitmap_plot_xlo[bitmap_init::x#2] = bitmap_init::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_xlo,x
    // bitmap_plot_xhi[x] = >bitmap
    // [15] bitmap_plot_xhi[bitmap_init::x#2] = >BITMAP -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #>BITMAP
    sta bitmap_plot_xhi,x
    // bitmap_plot_bit[x] = bits
    // [16] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta bitmap_plot_bit,x
    // bits = bits>>1
    // [17] bitmap_init::bits#1 = bitmap_init::bits#3 >> 1 -- vbuyy=vbuyy_ror_1 
    tya
    lsr
    tay
    // if(bits==0)
    // [18] if(bitmap_init::bits#1!=0) goto bitmap_init::@6 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b2
    // [20] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
    // [20] phi bitmap_init::bits#4 = $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuyy=vbuc1 
    ldy #$80
    // [19] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
    // bitmap_init::@6
    // [20] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
    // [20] phi bitmap_init::bits#4 = bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    // bitmap_init::@2
  __b2:
    // for(char x : 0..255)
    // [21] bitmap_init::x#1 = ++ bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [22] if(bitmap_init::x#1!=0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // [23] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
    // [23] phi bitmap_init::yoffs#2 = (byte*) 0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta.z yoffs
    sta.z yoffs+1
    // [23] phi bitmap_init::y#2 = 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    tax
    // [23] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
    // [23] phi bitmap_init::yoffs#2 = bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [23] phi bitmap_init::y#2 = bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    // bitmap_init::@3
  __b3:
    // y&$7
    // [24] bitmap_init::$10 = bitmap_init::y#2 & 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __10
    // <yoffs
    // [25] bitmap_init::$7 = < bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // y&$7 | <yoffs
    // [26] bitmap_init::$8 = bitmap_init::$10 | bitmap_init::$7 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __10
    // bitmap_plot_ylo[y] = y&$7 | <yoffs
    // [27] bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // >yoffs
    // [28] bitmap_init::$9 = > bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // bitmap_plot_yhi[y] = >yoffs
    // [29] bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$9 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // if((y&$7)==7)
    // [30] if(bitmap_init::$10!=7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __10
    bne __b4
    // bitmap_init::@5
    // yoffs = yoffs + 40*8
    // [31] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [32] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
    // [32] phi bitmap_init::yoffs#4 = bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    // bitmap_init::@4
  __b4:
    // for(char y : 0..255)
    // [33] bitmap_init::y#1 = ++ bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [34] if(bitmap_init::y#1!=0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3
    // bitmap_init::@return
    // }
    // [35] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = $b
    .label y = 2
    // bitmap = (char*) { bitmap_plot_xhi[0], bitmap_plot_xlo[0] }
    // [36] bitmap_clear::bitmap#0 = *bitmap_plot_xhi w= *bitmap_plot_xlo -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_xlo
    sta.z bitmap
    lda bitmap_plot_xhi
    sta.z bitmap+1
    // [37] bitmap_clear::bitmap#5 = (byte*)bitmap_clear::bitmap#0
    // [38] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
    // [38] phi bitmap_clear::y#4 = 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [38] phi bitmap_clear::bitmap#3 = bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    // [38] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
    // [38] phi bitmap_clear::y#4 = bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
    // [38] phi bitmap_clear::bitmap#3 = bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    // bitmap_clear::@1
  __b1:
    // [39] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
    // [39] phi bitmap_clear::x#2 = 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [39] phi bitmap_clear::bitmap#2 = bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    // [39] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
    // [39] phi bitmap_clear::x#2 = bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
    // [39] phi bitmap_clear::bitmap#2 = bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    // bitmap_clear::@2
  __b2:
    // *bitmap++ = 0
    // [40] *bitmap_clear::bitmap#2 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (bitmap),y
    // *bitmap++ = 0;
    // [41] bitmap_clear::bitmap#1 = ++ bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc.z bitmap
    bne !+
    inc.z bitmap+1
  !:
    // for( char x: 0..199 )
    // [42] bitmap_clear::x#1 = ++ bitmap_clear::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [43] if(bitmap_clear::x#1!=$c8) goto bitmap_clear::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c8
    bne __b2
    // bitmap_clear::@3
    // for( char y: 0..39 )
    // [44] bitmap_clear::y#1 = ++ bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [45] if(bitmap_clear::y#1!=$28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z y
    bne __b1
    // bitmap_clear::@return
    // }
    // [46] return 
    rts
}
  // init_screen
init_screen: {
    .label c = $b
    // [48] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
    // [48] phi init_screen::c#2 = SCREEN [phi:init_screen->init_screen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z c
    lda #>SCREEN
    sta.z c+1
    // init_screen::@1
  __b1:
    // for(char* c = SCREEN; c!=SCREEN+$400;c++)
    // [49] if(init_screen::c#2!=SCREEN+$400) goto init_screen::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z c+1
    cmp #>SCREEN+$400
    bne __b2
    lda.z c
    cmp #<SCREEN+$400
    bne __b2
    // init_screen::@return
    // }
    // [50] return 
    rts
    // init_screen::@2
  __b2:
    // *c = $14
    // [51] *init_screen::c#2 = $14 -- _deref_pbuz1=vbuc1 
    lda #$14
    ldy #0
    sta (c),y
    // for(char* c = SCREEN; c!=SCREEN+$400;c++)
    // [52] init_screen::c#1 = ++ init_screen::c#2 -- pbuz1=_inc_pbuz1 
    inc.z c
    bne !+
    inc.z c+1
  !:
    // [48] phi from init_screen::@2 to init_screen::@1 [phi:init_screen::@2->init_screen::@1]
    // [48] phi init_screen::c#2 = init_screen::c#1 [phi:init_screen::@2->init_screen::@1#0] -- register_copy 
    jmp __b1
}
  // lines
lines: {
    .label l = 2
    // [54] phi from lines to lines::@1 [phi:lines->lines::@1]
    // [54] phi lines::l#2 = 0 [phi:lines->lines::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // lines::@1
  __b1:
    // for(char l=0; l<lines_cnt;l++)
    // [55] if(lines::l#2<lines_cnt) goto lines::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #lines_cnt
    bcc __b2
    // lines::@return
    // }
    // [56] return 
    rts
    // lines::@2
  __b2:
    // bitmap_line(lines_x[l], lines_x[l+1], lines_y[l], lines_y[l+1])
    // [57] bitmap_line::x0#0 = lines_x[lines::l#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x,y
    sta.z bitmap_line.x0
    // [58] bitmap_line::x1#0 = (lines_x+1)[lines::l#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    lda lines_x+1,y
    sta.z bitmap_line.x1
    // [59] bitmap_line::y0#0 = lines_y[lines::l#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    lda lines_y,y
    sta.z bitmap_line.y0
    // [60] bitmap_line::y1#0 = (lines_y+1)[lines::l#2] -- vbuyy=pbuc1_derefidx_vbuz1 
    ldx.z l
    ldy lines_y+1,x
    // [61] call bitmap_line 
    jsr bitmap_line
    // lines::@3
    // for(char l=0; l<lines_cnt;l++)
    // [62] lines::l#1 = ++ lines::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [54] phi from lines::@3 to lines::@1 [phi:lines::@3->lines::@1]
    // [54] phi lines::l#2 = lines::l#1 [phi:lines::@3->lines::@1#0] -- register_copy 
    jmp __b1
}
  // bitmap_line
// Draw a line on the bitmap
// bitmap_line(byte zp(5) x0, byte zp(7) x1, byte zp(4) y0, byte register(Y) y1)
bitmap_line: {
    .label xd = 9
    .label yd = 6
    .label yd_1 = 3
    .label x0 = 5
    .label x1 = 7
    .label y0 = 4
    // if(x0<x1)
    // [63] if(bitmap_line::x0#0<bitmap_line::x1#0) goto bitmap_line::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda.z x0
    cmp.z x1
    bcc __b1
    // bitmap_line::@2
    // xd = x0-x1
    // [64] bitmap_line::xd#2 = bitmap_line::x0#0 - bitmap_line::x1#0 -- vbuz1=vbuz2_minus_vbuz3 
    sec
    sbc.z x1
    sta.z xd
    // if(y0<y1)
    // [65] if(bitmap_line::y0#0<bitmap_line::y1#0) goto bitmap_line::@7 -- vbuz1_lt_vbuyy_then_la1 
    cpy.z y0
    beq !+
    bcs __b7
  !:
    // bitmap_line::@3
    // yd = y0-y1
    // [66] bitmap_line::yd#2 = bitmap_line::y0#0 - bitmap_line::y1#0 -- vbuz1=vbuz2_minus_vbuyy 
    tya
    eor #$ff
    sec
    adc.z y0
    sta.z yd_1
    // if(yd<xd)
    // [67] if(bitmap_line::yd#2<bitmap_line::xd#2) goto bitmap_line::@8 -- vbuz1_lt_vbuz2_then_la1 
    cmp.z xd
    bcc __b8
    // bitmap_line::@4
    // bitmap_line_ydxi(y1, x1, y0, yd, xd)
    // [68] bitmap_line_ydxi::y#0 = bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxi.y
    // [69] bitmap_line_ydxi::x#0 = bitmap_line::x1#0 -- vbuxx=vbuz1 
    ldx.z x1
    // [70] bitmap_line_ydxi::y1#0 = bitmap_line::y0#0
    // [71] bitmap_line_ydxi::yd#0 = bitmap_line::yd#2
    // [72] bitmap_line_ydxi::xd#0 = bitmap_line::xd#2
    // [73] call bitmap_line_ydxi 
    // [125] phi from bitmap_line::@4 to bitmap_line_ydxi [phi:bitmap_line::@4->bitmap_line_ydxi]
    // [125] phi bitmap_line_ydxi::y1#6 = bitmap_line_ydxi::y1#0 [phi:bitmap_line::@4->bitmap_line_ydxi#0] -- register_copy 
    // [125] phi bitmap_line_ydxi::yd#5 = bitmap_line_ydxi::yd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#1] -- register_copy 
    // [125] phi bitmap_line_ydxi::y#6 = bitmap_line_ydxi::y#0 [phi:bitmap_line::@4->bitmap_line_ydxi#2] -- register_copy 
    // [125] phi bitmap_line_ydxi::x#5 = bitmap_line_ydxi::x#0 [phi:bitmap_line::@4->bitmap_line_ydxi#3] -- register_copy 
    // [125] phi bitmap_line_ydxi::xd#2 = bitmap_line_ydxi::xd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    // bitmap_line::@return
    // }
    // [74] return 
    rts
    // bitmap_line::@8
  __b8:
    // bitmap_line_xdyi(x1, y1, x0, xd, yd)
    // [75] bitmap_line_xdyi::x#0 = bitmap_line::x1#0 -- vbuxx=vbuz1 
    ldx.z x1
    // [76] bitmap_line_xdyi::y#0 = bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyi.y
    // [77] bitmap_line_xdyi::x1#0 = bitmap_line::x0#0
    // [78] bitmap_line_xdyi::xd#0 = bitmap_line::xd#2
    // [79] bitmap_line_xdyi::yd#0 = bitmap_line::yd#2
    // [80] call bitmap_line_xdyi 
    // [140] phi from bitmap_line::@8 to bitmap_line_xdyi [phi:bitmap_line::@8->bitmap_line_xdyi]
    // [140] phi bitmap_line_xdyi::x1#6 = bitmap_line_xdyi::x1#0 [phi:bitmap_line::@8->bitmap_line_xdyi#0] -- register_copy 
    // [140] phi bitmap_line_xdyi::xd#5 = bitmap_line_xdyi::xd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#1] -- register_copy 
    // [140] phi bitmap_line_xdyi::y#5 = bitmap_line_xdyi::y#0 [phi:bitmap_line::@8->bitmap_line_xdyi#2] -- register_copy 
    // [140] phi bitmap_line_xdyi::x#6 = bitmap_line_xdyi::x#0 [phi:bitmap_line::@8->bitmap_line_xdyi#3] -- register_copy 
    // [140] phi bitmap_line_xdyi::yd#2 = bitmap_line_xdyi::yd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    rts
    // bitmap_line::@7
  __b7:
    // yd = y1-y0
    // [81] bitmap_line::yd#1 = bitmap_line::y1#0 - bitmap_line::y0#0 -- vbuz1=vbuyy_minus_vbuz2 
    tya
    sec
    sbc.z y0
    sta.z yd
    // if(yd<xd)
    // [82] if(bitmap_line::yd#1<bitmap_line::xd#2) goto bitmap_line::@9 -- vbuz1_lt_vbuz2_then_la1 
    cmp.z xd
    bcc __b9
    // bitmap_line::@10
    // bitmap_line_ydxd(y0, x0, y1, yd, xd)
    // [83] bitmap_line_ydxd::y#0 = bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxd.y
    // [84] bitmap_line_ydxd::x#0 = bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx.z x0
    // [85] bitmap_line_ydxd::y1#0 = bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxd.y1
    // [86] bitmap_line_ydxd::yd#0 = bitmap_line::yd#1
    // [87] bitmap_line_ydxd::xd#0 = bitmap_line::xd#2
    // [88] call bitmap_line_ydxd 
    // [155] phi from bitmap_line::@10 to bitmap_line_ydxd [phi:bitmap_line::@10->bitmap_line_ydxd]
    // [155] phi bitmap_line_ydxd::y1#6 = bitmap_line_ydxd::y1#0 [phi:bitmap_line::@10->bitmap_line_ydxd#0] -- register_copy 
    // [155] phi bitmap_line_ydxd::yd#5 = bitmap_line_ydxd::yd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#1] -- register_copy 
    // [155] phi bitmap_line_ydxd::y#7 = bitmap_line_ydxd::y#0 [phi:bitmap_line::@10->bitmap_line_ydxd#2] -- register_copy 
    // [155] phi bitmap_line_ydxd::x#5 = bitmap_line_ydxd::x#0 [phi:bitmap_line::@10->bitmap_line_ydxd#3] -- register_copy 
    // [155] phi bitmap_line_ydxd::xd#2 = bitmap_line_ydxd::xd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    rts
    // bitmap_line::@9
  __b9:
    // bitmap_line_xdyd(x1, y1, x0, xd, yd)
    // [89] bitmap_line_xdyd::x#0 = bitmap_line::x1#0 -- vbuxx=vbuz1 
    ldx.z x1
    // [90] bitmap_line_xdyd::y#0 = bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyd.y
    // [91] bitmap_line_xdyd::x1#0 = bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyd.x1
    // [92] bitmap_line_xdyd::xd#0 = bitmap_line::xd#2
    // [93] bitmap_line_xdyd::yd#0 = bitmap_line::yd#1
    // [94] call bitmap_line_xdyd 
    // [170] phi from bitmap_line::@9 to bitmap_line_xdyd [phi:bitmap_line::@9->bitmap_line_xdyd]
    // [170] phi bitmap_line_xdyd::x1#6 = bitmap_line_xdyd::x1#0 [phi:bitmap_line::@9->bitmap_line_xdyd#0] -- register_copy 
    // [170] phi bitmap_line_xdyd::xd#5 = bitmap_line_xdyd::xd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#1] -- register_copy 
    // [170] phi bitmap_line_xdyd::y#5 = bitmap_line_xdyd::y#0 [phi:bitmap_line::@9->bitmap_line_xdyd#2] -- register_copy 
    // [170] phi bitmap_line_xdyd::x#6 = bitmap_line_xdyd::x#0 [phi:bitmap_line::@9->bitmap_line_xdyd#3] -- register_copy 
    // [170] phi bitmap_line_xdyd::yd#2 = bitmap_line_xdyd::yd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    rts
    // bitmap_line::@1
  __b1:
    // xd = x1-x0
    // [95] bitmap_line::xd#1 = bitmap_line::x1#0 - bitmap_line::x0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x1
    sec
    sbc.z x0
    sta.z xd
    // if(y0<y1)
    // [96] if(bitmap_line::y0#0<bitmap_line::y1#0) goto bitmap_line::@11 -- vbuz1_lt_vbuyy_then_la1 
    cpy.z y0
    beq !+
    bcs __b11
  !:
    // bitmap_line::@5
    // yd = y0-y1
    // [97] bitmap_line::yd#10 = bitmap_line::y0#0 - bitmap_line::y1#0 -- vbuz1=vbuz2_minus_vbuyy 
    tya
    eor #$ff
    sec
    adc.z y0
    sta.z yd
    // if(yd<xd)
    // [98] if(bitmap_line::yd#10<bitmap_line::xd#1) goto bitmap_line::@12 -- vbuz1_lt_vbuz2_then_la1 
    cmp.z xd
    bcc __b12
    // bitmap_line::@6
    // bitmap_line_ydxd(y1, x1, y0, yd, xd)
    // [99] bitmap_line_ydxd::y#1 = bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxd.y
    // [100] bitmap_line_ydxd::x#1 = bitmap_line::x1#0 -- vbuxx=vbuz1 
    ldx.z x1
    // [101] bitmap_line_ydxd::y1#1 = bitmap_line::y0#0
    // [102] bitmap_line_ydxd::yd#1 = bitmap_line::yd#10
    // [103] bitmap_line_ydxd::xd#1 = bitmap_line::xd#1
    // [104] call bitmap_line_ydxd 
    // [155] phi from bitmap_line::@6 to bitmap_line_ydxd [phi:bitmap_line::@6->bitmap_line_ydxd]
    // [155] phi bitmap_line_ydxd::y1#6 = bitmap_line_ydxd::y1#1 [phi:bitmap_line::@6->bitmap_line_ydxd#0] -- register_copy 
    // [155] phi bitmap_line_ydxd::yd#5 = bitmap_line_ydxd::yd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#1] -- register_copy 
    // [155] phi bitmap_line_ydxd::y#7 = bitmap_line_ydxd::y#1 [phi:bitmap_line::@6->bitmap_line_ydxd#2] -- register_copy 
    // [155] phi bitmap_line_ydxd::x#5 = bitmap_line_ydxd::x#1 [phi:bitmap_line::@6->bitmap_line_ydxd#3] -- register_copy 
    // [155] phi bitmap_line_ydxd::xd#2 = bitmap_line_ydxd::xd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    rts
    // bitmap_line::@12
  __b12:
    // bitmap_line_xdyd(x0, y0, x1, xd, yd)
    // [105] bitmap_line_xdyd::x#1 = bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx.z x0
    // [106] bitmap_line_xdyd::y#1 = bitmap_line::y0#0
    // [107] bitmap_line_xdyd::x1#1 = bitmap_line::x1#0
    // [108] bitmap_line_xdyd::xd#1 = bitmap_line::xd#1
    // [109] bitmap_line_xdyd::yd#1 = bitmap_line::yd#10
    // [110] call bitmap_line_xdyd 
    // [170] phi from bitmap_line::@12 to bitmap_line_xdyd [phi:bitmap_line::@12->bitmap_line_xdyd]
    // [170] phi bitmap_line_xdyd::x1#6 = bitmap_line_xdyd::x1#1 [phi:bitmap_line::@12->bitmap_line_xdyd#0] -- register_copy 
    // [170] phi bitmap_line_xdyd::xd#5 = bitmap_line_xdyd::xd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#1] -- register_copy 
    // [170] phi bitmap_line_xdyd::y#5 = bitmap_line_xdyd::y#1 [phi:bitmap_line::@12->bitmap_line_xdyd#2] -- register_copy 
    // [170] phi bitmap_line_xdyd::x#6 = bitmap_line_xdyd::x#1 [phi:bitmap_line::@12->bitmap_line_xdyd#3] -- register_copy 
    // [170] phi bitmap_line_xdyd::yd#2 = bitmap_line_xdyd::yd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    rts
    // bitmap_line::@11
  __b11:
    // yd = y1-y0
    // [111] bitmap_line::yd#11 = bitmap_line::y1#0 - bitmap_line::y0#0 -- vbuz1=vbuyy_minus_vbuz2 
    tya
    sec
    sbc.z y0
    sta.z yd_1
    // if(yd<xd)
    // [112] if(bitmap_line::yd#11<bitmap_line::xd#1) goto bitmap_line::@13 -- vbuz1_lt_vbuz2_then_la1 
    cmp.z xd
    bcc __b13
    // bitmap_line::@14
    // bitmap_line_ydxi(y0, x0, y1, yd, xd)
    // [113] bitmap_line_ydxi::y#1 = bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxi.y
    // [114] bitmap_line_ydxi::x#1 = bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx.z x0
    // [115] bitmap_line_ydxi::y1#1 = bitmap_line::y1#0 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxi.y1
    // [116] bitmap_line_ydxi::yd#1 = bitmap_line::yd#11
    // [117] bitmap_line_ydxi::xd#1 = bitmap_line::xd#1
    // [118] call bitmap_line_ydxi 
    // [125] phi from bitmap_line::@14 to bitmap_line_ydxi [phi:bitmap_line::@14->bitmap_line_ydxi]
    // [125] phi bitmap_line_ydxi::y1#6 = bitmap_line_ydxi::y1#1 [phi:bitmap_line::@14->bitmap_line_ydxi#0] -- register_copy 
    // [125] phi bitmap_line_ydxi::yd#5 = bitmap_line_ydxi::yd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#1] -- register_copy 
    // [125] phi bitmap_line_ydxi::y#6 = bitmap_line_ydxi::y#1 [phi:bitmap_line::@14->bitmap_line_ydxi#2] -- register_copy 
    // [125] phi bitmap_line_ydxi::x#5 = bitmap_line_ydxi::x#1 [phi:bitmap_line::@14->bitmap_line_ydxi#3] -- register_copy 
    // [125] phi bitmap_line_ydxi::xd#2 = bitmap_line_ydxi::xd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    rts
    // bitmap_line::@13
  __b13:
    // bitmap_line_xdyi(x0, y0, x1, xd, yd)
    // [119] bitmap_line_xdyi::x#1 = bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx.z x0
    // [120] bitmap_line_xdyi::y#1 = bitmap_line::y0#0
    // [121] bitmap_line_xdyi::x1#1 = bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyi.x1
    // [122] bitmap_line_xdyi::xd#1 = bitmap_line::xd#1
    // [123] bitmap_line_xdyi::yd#1 = bitmap_line::yd#11
    // [124] call bitmap_line_xdyi 
    // [140] phi from bitmap_line::@13 to bitmap_line_xdyi [phi:bitmap_line::@13->bitmap_line_xdyi]
    // [140] phi bitmap_line_xdyi::x1#6 = bitmap_line_xdyi::x1#1 [phi:bitmap_line::@13->bitmap_line_xdyi#0] -- register_copy 
    // [140] phi bitmap_line_xdyi::xd#5 = bitmap_line_xdyi::xd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#1] -- register_copy 
    // [140] phi bitmap_line_xdyi::y#5 = bitmap_line_xdyi::y#1 [phi:bitmap_line::@13->bitmap_line_xdyi#2] -- register_copy 
    // [140] phi bitmap_line_xdyi::x#6 = bitmap_line_xdyi::x#1 [phi:bitmap_line::@13->bitmap_line_xdyi#3] -- register_copy 
    // [140] phi bitmap_line_xdyi::yd#2 = bitmap_line_xdyi::yd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    rts
}
  // bitmap_line_ydxi
// bitmap_line_ydxi(byte zp(6) y, byte register(X) x, byte zp(4) y1, byte zp(3) yd, byte zp(9) xd)
bitmap_line_ydxi: {
    .label y = 6
    .label y1 = 4
    .label yd = 3
    .label xd = 9
    .label e = 5
    // e = xd>>1
    // [126] bitmap_line_ydxi::e#0 = bitmap_line_ydxi::xd#2 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [127] phi from bitmap_line_ydxi bitmap_line_ydxi::@2 to bitmap_line_ydxi::@1 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1]
    // [127] phi bitmap_line_ydxi::e#3 = bitmap_line_ydxi::e#0 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#0] -- register_copy 
    // [127] phi bitmap_line_ydxi::y#3 = bitmap_line_ydxi::y#6 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#1] -- register_copy 
    // [127] phi bitmap_line_ydxi::x#3 = bitmap_line_ydxi::x#5 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#2] -- register_copy 
    // bitmap_line_ydxi::@1
  __b1:
    // bitmap_plot(x,y)
    // [128] bitmap_plot::x#2 = bitmap_line_ydxi::x#3
    // [129] bitmap_plot::y#2 = bitmap_line_ydxi::y#3 -- vbuyy=vbuz1 
    ldy.z y
    // [130] call bitmap_plot 
    // [185] phi from bitmap_line_ydxi::@1 to bitmap_plot [phi:bitmap_line_ydxi::@1->bitmap_plot]
    // [185] phi bitmap_plot::y#4 = bitmap_plot::y#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#0] -- register_copy 
    // [185] phi bitmap_plot::x#4 = bitmap_plot::x#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line_ydxi::@4
    // y++;
    // [131] bitmap_line_ydxi::y#2 = ++ bitmap_line_ydxi::y#3 -- vbuz1=_inc_vbuz1 
    inc.z y
    // e = e+xd
    // [132] bitmap_line_ydxi::e#1 = bitmap_line_ydxi::e#3 + bitmap_line_ydxi::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // if(yd<e)
    // [133] if(bitmap_line_ydxi::yd#5>=bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2
    // bitmap_line_ydxi::@3
    // x++;
    // [134] bitmap_line_ydxi::x#2 = ++ bitmap_line_ydxi::x#3 -- vbuxx=_inc_vbuxx 
    inx
    // e = e - yd
    // [135] bitmap_line_ydxi::e#2 = bitmap_line_ydxi::e#1 - bitmap_line_ydxi::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [136] phi from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4 to bitmap_line_ydxi::@2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2]
    // [136] phi bitmap_line_ydxi::e#6 = bitmap_line_ydxi::e#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#0] -- register_copy 
    // [136] phi bitmap_line_ydxi::x#6 = bitmap_line_ydxi::x#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#1] -- register_copy 
    // bitmap_line_ydxi::@2
  __b2:
    // y1+1
    // [137] bitmap_line_ydxi::$6 = bitmap_line_ydxi::y1#6 + 1 -- vbuyy=vbuz1_plus_1 
    ldy.z y1
    iny
    // while (y!=(y1+1))
    // [138] if(bitmap_line_ydxi::y#2!=bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1 -- vbuz1_neq_vbuyy_then_la1 
    cpy.z y
    bne __b1
    // bitmap_line_ydxi::@return
    // }
    // [139] return 
    rts
}
  // bitmap_line_xdyi
// bitmap_line_xdyi(byte register(X) x, byte zp(4) y, byte zp(5) x1, byte zp(9) xd, byte zp(3) yd)
bitmap_line_xdyi: {
    .label __6 = $a
    .label y = 4
    .label x1 = 5
    .label xd = 9
    .label yd = 3
    .label e = 6
    // e = yd>>1
    // [141] bitmap_line_xdyi::e#0 = bitmap_line_xdyi::yd#2 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [142] phi from bitmap_line_xdyi bitmap_line_xdyi::@2 to bitmap_line_xdyi::@1 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1]
    // [142] phi bitmap_line_xdyi::e#3 = bitmap_line_xdyi::e#0 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#0] -- register_copy 
    // [142] phi bitmap_line_xdyi::y#3 = bitmap_line_xdyi::y#5 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#1] -- register_copy 
    // [142] phi bitmap_line_xdyi::x#3 = bitmap_line_xdyi::x#6 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#2] -- register_copy 
    // bitmap_line_xdyi::@1
  __b1:
    // bitmap_plot(x,y)
    // [143] bitmap_plot::x#0 = bitmap_line_xdyi::x#3
    // [144] bitmap_plot::y#0 = bitmap_line_xdyi::y#3 -- vbuyy=vbuz1 
    ldy.z y
    // [145] call bitmap_plot 
    // [185] phi from bitmap_line_xdyi::@1 to bitmap_plot [phi:bitmap_line_xdyi::@1->bitmap_plot]
    // [185] phi bitmap_plot::y#4 = bitmap_plot::y#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#0] -- register_copy 
    // [185] phi bitmap_plot::x#4 = bitmap_plot::x#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line_xdyi::@4
    // x++;
    // [146] bitmap_line_xdyi::x#2 = ++ bitmap_line_xdyi::x#3 -- vbuxx=_inc_vbuxx 
    inx
    // e = e+yd
    // [147] bitmap_line_xdyi::e#1 = bitmap_line_xdyi::e#3 + bitmap_line_xdyi::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // if(xd<e)
    // [148] if(bitmap_line_xdyi::xd#5>=bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2
    // bitmap_line_xdyi::@3
    // y++;
    // [149] bitmap_line_xdyi::y#2 = ++ bitmap_line_xdyi::y#3 -- vbuz1=_inc_vbuz1 
    inc.z y
    // e = e - xd
    // [150] bitmap_line_xdyi::e#2 = bitmap_line_xdyi::e#1 - bitmap_line_xdyi::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [151] phi from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4 to bitmap_line_xdyi::@2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2]
    // [151] phi bitmap_line_xdyi::e#6 = bitmap_line_xdyi::e#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#0] -- register_copy 
    // [151] phi bitmap_line_xdyi::y#6 = bitmap_line_xdyi::y#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#1] -- register_copy 
    // bitmap_line_xdyi::@2
  __b2:
    // x1+1
    // [152] bitmap_line_xdyi::$6 = bitmap_line_xdyi::x1#6 + 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x1
    iny
    sty.z __6
    // while (x!=(x1+1))
    // [153] if(bitmap_line_xdyi::x#2!=bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1 -- vbuxx_neq_vbuz1_then_la1 
    cpx.z __6
    bne __b1
    // bitmap_line_xdyi::@return
    // }
    // [154] return 
    rts
}
  // bitmap_line_ydxd
// bitmap_line_ydxd(byte zp(8) y, byte register(X) x, byte zp(4) y1, byte zp(6) yd, byte zp(9) xd)
bitmap_line_ydxd: {
    .label y = 8
    .label y1 = 4
    .label yd = 6
    .label xd = 9
    .label e = 7
    // e = xd>>1
    // [156] bitmap_line_ydxd::e#0 = bitmap_line_ydxd::xd#2 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [157] phi from bitmap_line_ydxd bitmap_line_ydxd::@2 to bitmap_line_ydxd::@1 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1]
    // [157] phi bitmap_line_ydxd::e#3 = bitmap_line_ydxd::e#0 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#0] -- register_copy 
    // [157] phi bitmap_line_ydxd::y#2 = bitmap_line_ydxd::y#7 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#1] -- register_copy 
    // [157] phi bitmap_line_ydxd::x#3 = bitmap_line_ydxd::x#5 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#2] -- register_copy 
    // bitmap_line_ydxd::@1
  __b1:
    // bitmap_plot(x,y)
    // [158] bitmap_plot::x#3 = bitmap_line_ydxd::x#3
    // [159] bitmap_plot::y#3 = bitmap_line_ydxd::y#2 -- vbuyy=vbuz1 
    ldy.z y
    // [160] call bitmap_plot 
    // [185] phi from bitmap_line_ydxd::@1 to bitmap_plot [phi:bitmap_line_ydxd::@1->bitmap_plot]
    // [185] phi bitmap_plot::y#4 = bitmap_plot::y#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#0] -- register_copy 
    // [185] phi bitmap_plot::x#4 = bitmap_plot::x#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line_ydxd::@4
    // y = y++;
    // [161] bitmap_line_ydxd::y#3 = ++ bitmap_line_ydxd::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // e = e+xd
    // [162] bitmap_line_ydxd::e#1 = bitmap_line_ydxd::e#3 + bitmap_line_ydxd::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // if(yd<e)
    // [163] if(bitmap_line_ydxd::yd#5>=bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2
    // bitmap_line_ydxd::@3
    // x--;
    // [164] bitmap_line_ydxd::x#2 = -- bitmap_line_ydxd::x#3 -- vbuxx=_dec_vbuxx 
    dex
    // e = e - yd
    // [165] bitmap_line_ydxd::e#2 = bitmap_line_ydxd::e#1 - bitmap_line_ydxd::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [166] phi from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4 to bitmap_line_ydxd::@2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2]
    // [166] phi bitmap_line_ydxd::e#6 = bitmap_line_ydxd::e#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#0] -- register_copy 
    // [166] phi bitmap_line_ydxd::x#6 = bitmap_line_ydxd::x#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#1] -- register_copy 
    // bitmap_line_ydxd::@2
  __b2:
    // y1+1
    // [167] bitmap_line_ydxd::$6 = bitmap_line_ydxd::y1#6 + 1 -- vbuyy=vbuz1_plus_1 
    ldy.z y1
    iny
    // while (y!=(y1+1))
    // [168] if(bitmap_line_ydxd::y#3!=bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1 -- vbuz1_neq_vbuyy_then_la1 
    cpy.z y
    bne __b1
    // bitmap_line_ydxd::@return
    // }
    // [169] return 
    rts
}
  // bitmap_line_xdyd
// bitmap_line_xdyd(byte register(X) x, byte zp(4) y, byte zp(7) x1, byte zp(9) xd, byte zp(6) yd)
bitmap_line_xdyd: {
    .label __6 = $a
    .label y = 4
    .label x1 = 7
    .label xd = 9
    .label yd = 6
    .label e = 8
    // e = yd>>1
    // [171] bitmap_line_xdyd::e#0 = bitmap_line_xdyd::yd#2 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [172] phi from bitmap_line_xdyd bitmap_line_xdyd::@2 to bitmap_line_xdyd::@1 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1]
    // [172] phi bitmap_line_xdyd::e#3 = bitmap_line_xdyd::e#0 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#0] -- register_copy 
    // [172] phi bitmap_line_xdyd::y#3 = bitmap_line_xdyd::y#5 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#1] -- register_copy 
    // [172] phi bitmap_line_xdyd::x#3 = bitmap_line_xdyd::x#6 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#2] -- register_copy 
    // bitmap_line_xdyd::@1
  __b1:
    // bitmap_plot(x,y)
    // [173] bitmap_plot::x#1 = bitmap_line_xdyd::x#3
    // [174] bitmap_plot::y#1 = bitmap_line_xdyd::y#3 -- vbuyy=vbuz1 
    ldy.z y
    // [175] call bitmap_plot 
    // [185] phi from bitmap_line_xdyd::@1 to bitmap_plot [phi:bitmap_line_xdyd::@1->bitmap_plot]
    // [185] phi bitmap_plot::y#4 = bitmap_plot::y#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#0] -- register_copy 
    // [185] phi bitmap_plot::x#4 = bitmap_plot::x#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line_xdyd::@4
    // x++;
    // [176] bitmap_line_xdyd::x#2 = ++ bitmap_line_xdyd::x#3 -- vbuxx=_inc_vbuxx 
    inx
    // e = e+yd
    // [177] bitmap_line_xdyd::e#1 = bitmap_line_xdyd::e#3 + bitmap_line_xdyd::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // if(xd<e)
    // [178] if(bitmap_line_xdyd::xd#5>=bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2
    // bitmap_line_xdyd::@3
    // y--;
    // [179] bitmap_line_xdyd::y#2 = -- bitmap_line_xdyd::y#3 -- vbuz1=_dec_vbuz1 
    dec.z y
    // e = e - xd
    // [180] bitmap_line_xdyd::e#2 = bitmap_line_xdyd::e#1 - bitmap_line_xdyd::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [181] phi from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4 to bitmap_line_xdyd::@2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2]
    // [181] phi bitmap_line_xdyd::e#6 = bitmap_line_xdyd::e#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#0] -- register_copy 
    // [181] phi bitmap_line_xdyd::y#6 = bitmap_line_xdyd::y#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#1] -- register_copy 
    // bitmap_line_xdyd::@2
  __b2:
    // x1+1
    // [182] bitmap_line_xdyd::$6 = bitmap_line_xdyd::x1#6 + 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x1
    iny
    sty.z __6
    // while (x!=(x1+1))
    // [183] if(bitmap_line_xdyd::x#2!=bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1 -- vbuxx_neq_vbuz1_then_la1 
    cpx.z __6
    bne __b1
    // bitmap_line_xdyd::@return
    // }
    // [184] return 
    rts
}
  // bitmap_plot
// bitmap_plot(byte register(X) x, byte register(Y) y)
bitmap_plot: {
    .label plotter_x = $b
    .label plotter_y = $d
    .label plotter = $b
    // plotter_x = { bitmap_plot_xhi[x], bitmap_plot_xlo[x] }
    // [186] bitmap_plot::plotter_x#0 = bitmap_plot_xhi[bitmap_plot::x#4] w= bitmap_plot_xlo[bitmap_plot::x#4] -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_xhi,x
    sta.z plotter_x+1
    lda bitmap_plot_xlo,x
    sta.z plotter_x
    // plotter_y = { bitmap_plot_yhi[y], bitmap_plot_ylo[y] }
    // [187] bitmap_plot::plotter_y#0 = bitmap_plot_yhi[bitmap_plot::y#4] w= bitmap_plot_ylo[bitmap_plot::y#4] -- vwuz1=pbuc1_derefidx_vbuyy_word_pbuc2_derefidx_vbuyy 
    lda bitmap_plot_yhi,y
    sta.z plotter_y+1
    lda bitmap_plot_ylo,y
    sta.z plotter_y
    // plotter_x+plotter_y
    // [188] bitmap_plot::plotter#0 = bitmap_plot::plotter_x#0 + bitmap_plot::plotter_y#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z plotter_y
    sta.z plotter
    lda.z plotter+1
    adc.z plotter_y+1
    sta.z plotter+1
    // *plotter | bitmap_plot_bit[x]
    // [189] bitmap_plot::$1 = *((byte*)bitmap_plot::plotter#0) | bitmap_plot_bit[bitmap_plot::x#4] -- vbuaa=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (plotter),y
    // *plotter = *plotter | bitmap_plot_bit[x]
    // [190] *((byte*)bitmap_plot::plotter#0) = bitmap_plot::$1 -- _deref_pbuz1=vbuaa 
    sta (plotter),y
    // bitmap_plot::@return
    // }
    // [191] return 
    rts
}
  // File Data
  // Tables for the plotter - initialized by calling bitmap_draw_init();
  bitmap_plot_xlo: .fill $100, 0
  bitmap_plot_xhi: .fill $100, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  lines_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28, $3c
  lines_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28, $a

