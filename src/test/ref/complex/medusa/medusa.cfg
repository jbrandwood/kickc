@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  kickasm(location (const byte*) MEDUSA_SCREEN#0) {{ .var fileScreen = LoadBinary("medusas.prg", BF_C64FILE)
    .fill fileScreen.getSize(), fileScreen.get(i)
 }}
  kickasm(location (const byte*) MEDUSA_COLORS#0) {{ .var fileCols = LoadBinary("medusac.prg", BF_C64FILE)
    .fill fileCols.getSize(), fileCols.get(i)
 }}
  to:@2
@2: scope:[]  from @1
  [3] phi()
  [4] call main 
  to:@end
@end: scope:[]  from @2
  [5] phi()
main: scope:[main]  from @2
  [6] *((const byte*) BGCOL#0) ← (const byte) BLACK#0
  [7] call memcpy 
  to:main::@2
main::@2: scope:[main]  from main
  [8] phi()
  [9] call memcpy 
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@2
  [10] *((const byte*) SCREEN#0+(word) $3e7) ← *((const byte*) SCREEN#0+(word) $3e7) ^ (byte) $e
  to:main::@1
memcpy: scope:[memcpy]  from main main::@2
  [11] (byte*) memcpy::dst#0 ← phi( main/(const byte*) SCREEN#0 main::@2/(const byte*) COLS#0 )
  [11] (byte*) memcpy::src#0 ← phi( main/(const byte*) MEDUSA_SCREEN#0 main::@2/(const byte*) MEDUSA_COLORS#0 )
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@1
  [12] (word) memcpy::i#2 ← phi( memcpy/(byte) 0 memcpy::@1/(word) memcpy::i#1 )
  [12] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#0 memcpy::@1/(byte*) memcpy::dst#1 )
  [12] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#0 memcpy::@1/(byte*) memcpy::src#1 )
  [13] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [14] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [15] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  [16] (word) memcpy::i#1 ← ++ (word) memcpy::i#2
  [17] if((word) memcpy::i#1<(word) $3e8) goto memcpy::@1
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [18] return 
  to:@return
