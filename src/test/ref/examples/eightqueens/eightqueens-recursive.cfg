
(void()) _start()
_start: scope:[_start]  from
  [0] phi()
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN
  [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM
  [5] (dword) count ← (dword) 0
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  [6] phi()
  [7] call main 
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  [8] return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  [9] phi()
  [10] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  [11] phi()
  [12] call cputs 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [13] phi()
  [14] call cputs 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [15] phi()
  [16] call printf_uint 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [17] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO)
  [18] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC)
  [19] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN)
  [20] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  [21] call tod_init 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [22] stackpush(byte) ← (byte) 1
  [23] callexecute queen 
  sideeffect stackpullbytes((number) 1)
  [25] call tod_read 
  [26] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0
  [27] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0
  [28] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0
  [29] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0
  to:main::@6
main::@6: scope:[main]  from main::@5
  [30] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2
  [31] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2
  [32] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2
  [33] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2
  [34] call tod_str 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [35] phi()
  [36] call cputs 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [37] (dword) printf_ulong::uvalue#0 ← (dword) count
  [38] call printf_ulong 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [39] phi()
  [40] call cputs 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [41] phi()
  [42] call printf_string 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [43] phi()
  [44] call cputs 
  to:main::@return
main::@return: scope:[main]  from main::@11
  [45] return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@1 main::@11 main::@2 main::@7 main::@9 print::@10 print::@11 print::@13 print::@4 print::@8 printf_number_buffer::@5 printf_string::@1
  [46] (to_nomodify byte*) cputs::s#14 ← phi( main::@1/(const byte*) main::s main::@11/(const byte*) main::s4 main::@2/(const byte*) main::s1 main::@7/(const byte*) main::s2 main::@9/(const byte*) main::s3 print::@10/(const byte*) print::s4 print::@11/(const byte*) print::s print::@13/(const byte*) print::s1 print::@4/(const byte*) print::s2 print::@8/(const byte*) print::s3 printf_number_buffer::@5/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS printf_string::@1/(const byte*) tod_buffer )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [47] (to_nomodify byte*) cputs::s#13 ← phi( cputs/(to_nomodify byte*) cputs::s#14 cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [48] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#13)
  [49] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#13
  [50] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [51] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [52] (byte) cputc::c#0 ← (byte) cputs::c#1
  [53] call cputc 
  to:cputs::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@9 printf_padding::@2
  [54] (byte) cputc::c#3 ← phi( cputs::@2/(byte) cputc::c#0 printf_number_buffer::@9/(byte) cputc::c#2 printf_padding::@2/(byte) cputc::c#1 )
  [55] if((byte) cputc::c#3==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [56] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#3
  [57] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE
  [58] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [59] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [60] phi()
  [61] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [62] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [63] phi()
  [64] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [65] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28
  [66] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28
  [67] (byte) conio_cursor_x ← (byte) 0
  [68] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [69] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [70] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputln
  [71] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [72] phi()
  [73] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [74] phi()
  [75] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [76] phi()
  [77] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [78] phi()
  [79] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [80] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28
  [81] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28
  [82] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [83] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [84] (byte) memset::c#4 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(const nomodify byte) LIGHT_BLUE )
  [84] (void*) memset::str#3 ← phi( cscroll::@3/(void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [85] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28
  [86] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [87] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [88] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [89] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [90] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [91] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [92] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN cscroll::@2/(void*)(const nomodify byte*) COLORRAM )
  [92] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) COLORRAM+(byte) $28 )
  [93] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [94] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [95] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [96] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [96] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [97] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [98] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [99] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [100] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [101] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@10
  [102] phi()
  to:printf_string::@1
printf_string::@1: scope:[printf_string]  from printf_string
  [103] phi()
  [104] call cputs 
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@1
  [105] return 
  to:@return

(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from main::@8 print::@12
  [106] (dword) printf_ulong::uvalue#2 ← phi( main::@8/(dword) printf_ulong::uvalue#0 print::@12/(dword) printf_ulong::uvalue#1 )
  to:printf_ulong::@1
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  [107] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [108] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#2
  [109] call ultoa 
  to:printf_ulong::@2
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong::@1
  [110] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [111] call printf_number_buffer 
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@2
  [112] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@2 printf_uint::@2 printf_ulong::@2
  [113] (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_upper_case#0 printf_ulong::@2/(byte) 0 )
  [113] (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_uchar::@2/(byte) printf_number_buffer::buffer_sign#2 printf_uint::@2/(byte) printf_number_buffer::buffer_sign#1 printf_ulong::@2/(byte) printf_number_buffer::buffer_sign#0 )
  [113] (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_zero_padding#0 printf_ulong::@2/(byte) 0 )
  [113] (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_justify_left#0 printf_ulong::@2/(byte) 0 )
  [113] (byte) printf_number_buffer::format_min_length#3 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_min_length#0 printf_ulong::@2/(byte) 0 )
  [114] if((byte) 0==(byte) printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [115] phi()
  [116] call strlen 
  [117] (word) strlen::return#2 ← (word) strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [118] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
  [119] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  [120] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [121] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [122] (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@14/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  [123] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2
  [124] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [125] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [126] (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer/(signed byte) 0 printf_number_buffer::@21/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@13/(signed byte) 0 )
  [127] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [128] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [129] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [130] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10
  [131] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [132] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [133] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#10
  [134] call cputc 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [135] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [136] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [137] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10
  [138] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [139] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [140] phi()
  [141] call strupr 
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [142] phi()
  [143] call cputs 
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [144] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [145] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [146] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [147] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10
  [148] call printf_padding 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [149] return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [150] (byte) printf_padding::pad#7 ← phi( printf_number_buffer::@10/(byte) '0' printf_number_buffer::@12/(byte) ' ' printf_number_buffer::@8/(byte) ' ' )
  [150] (byte) printf_padding::length#6 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [151] (byte) printf_padding::i#2 ← phi( printf_padding/(byte) 0 printf_padding::@3/(byte) printf_padding::i#1 )
  [152] if((byte) printf_padding::i#2<(byte) printf_padding::length#6) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [153] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [154] (byte) cputc::c#1 ← (byte) printf_padding::pad#7
  [155] call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [156] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2
  to:printf_padding::@1

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [157] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [158] (byte*) strupr::src#2 ← phi( strupr/(const byte*) strupr::str#0 strupr::@3/(byte*) strupr::src#1 )
  [159] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [160] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [161] (byte) toupper::ch#0 ← *((byte*) strupr::src#2)
  [162] call toupper 
  [163] (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [164] (byte~) strupr::$0 ← (byte) toupper::return#3
  [165] *((byte*) strupr::src#2) ← (byte~) strupr::$0
  [166] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2
  to:strupr::@1

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  [167] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [168] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [169] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [170] (byte) toupper::return#2 ← phi( toupper::@1/(byte) toupper::return#0 toupper/(byte) toupper::ch#0 toupper::@2/(byte) toupper::ch#0 )
  [171] return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [172] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [173] (word) strlen::len#2 ← phi( strlen/(word) 0 strlen::@2/(word) strlen::len#1 )
  [173] (byte*) strlen::str#3 ← phi( strlen/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS strlen::@2/(byte*) strlen::str#0 )
  [174] if((byte) 0!=*((byte*) strlen::str#3)) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [175] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [176] (word) strlen::len#1 ← ++ (word) strlen::len#2
  [177] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3
  to:strlen::@1

(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
ultoa: scope:[ultoa]  from printf_ulong::@1
  [178] phi()
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@4
  [179] (byte*) ultoa::buffer#11 ← phi( ultoa::@4/(byte*) ultoa::buffer#14 ultoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [179] (byte) ultoa::started#2 ← phi( ultoa::@4/(byte) ultoa::started#4 ultoa/(byte) 0 )
  [179] (dword) ultoa::value#2 ← phi( ultoa::@4/(dword) ultoa::value#6 ultoa/(dword) ultoa::value#1 )
  [179] (byte) ultoa::digit#2 ← phi( ultoa::@4/(byte) ultoa::digit#1 ultoa/(byte) 0 )
  [180] if((byte) ultoa::digit#2<(byte) $a-(byte) 1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [181] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2
  [182] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11)
  [183] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11
  [184] *((byte*) ultoa::buffer#3) ← (byte) 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [185] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [186] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2
  [187] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10)
  [188] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@2
  [189] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [190] (byte*) ultoa::buffer#14 ← phi( ultoa::@7/(byte*) ultoa::buffer#11 ultoa::@6/(byte*) ultoa::buffer#4 )
  [190] (byte) ultoa::started#4 ← phi( ultoa::@7/(byte) ultoa::started#2 ultoa::@6/(byte) 1 )
  [190] (dword) ultoa::value#6 ← phi( ultoa::@7/(dword) ultoa::value#2 ultoa::@6/(dword) ultoa::value#0 )
  [191] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2
  to:ultoa::@1
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [192] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
  [193] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
  [194] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
  [195] call ultoa_append 
  [196] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [197] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
  [198] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11
  to:ultoa::@4

(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [199] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [200] (byte) ultoa_append::digit#2 ← phi( ultoa_append/(byte) 0 ultoa_append::@2/(byte) ultoa_append::digit#1 )
  [200] (dword) ultoa_append::value#2 ← phi( ultoa_append/(dword) ultoa_append::value#0 ultoa_append::@2/(dword) ultoa_append::value#1 )
  [201] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [202] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2)
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [203] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [204] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2
  [205] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0
  to:ultoa_append::@1

(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@6
  [206] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4
  [207] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0
  [208] *((const byte*) tod_buffer) ← (byte~) tod_str::$1
  [209] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f
  [210] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2
  [211] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3
  [212] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4
  [213] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4
  [214] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5
  [215] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f
  [216] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6
  [217] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7
  [218] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4
  [219] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8
  [220] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9
  [221] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f
  [222] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10
  [223] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11
  [224] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4
  [225] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12
  [226] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13
  [227] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f
  [228] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14
  [229] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  [230] return 
  to:@return

(struct TIME_OF_DAY()) tod_read()
tod_read: scope:[tod_read]  from main::@5
  [231] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  [232] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  [233] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  [234] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  [235] return 
  to:@return

(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main::@4
  [236] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80
  [237] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f
  [238] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0
  [239] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0
  [240] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0
  [241] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  [242] return 
  to:@return

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@3
  [243] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [244] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [245] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [246] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [247] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [248] return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [249] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [250] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [250] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [250] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(const word) printf_uint::uvalue#0 )
  [250] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [251] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [252] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [253] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [254] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [255] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [256] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [257] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [258] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10)
  [259] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [260] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [261] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [261] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [261] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [262] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [263] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [264] (word) utoa_append::value#0 ← (word) utoa::value#2
  [265] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [266] call utoa_append 
  [267] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [268] (word) utoa::value#0 ← (word) utoa_append::return#0
  [269] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [270] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [271] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [271] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [272] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [273] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [274] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [275] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [276] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(void()) clrscr()
clrscr: scope:[clrscr]  from main
  [277] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [278] (byte*) clrscr::line_cols#5 ← phi( clrscr/(const nomodify byte*) COLORRAM clrscr::@5/(byte*) clrscr::line_cols#1 )
  [278] (byte*) clrscr::line_text#5 ← phi( clrscr/(const nomodify byte*) DEFAULT_SCREEN clrscr::@5/(byte*) clrscr::line_text#1 )
  [278] (byte) clrscr::l#2 ← phi( clrscr/(byte) 0 clrscr::@5/(byte) clrscr::l#1 )
  [279] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [280] (byte) conio_cursor_x ← (byte) 0
  [281] (byte) conio_cursor_y ← (byte) 0
  [282] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN
  [283] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [284] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [285] (byte) clrscr::c#2 ← phi( clrscr::@1/(byte) 0 clrscr::@4/(byte) clrscr::c#1 )
  [286] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [287] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28
  [288] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28
  [289] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [290] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' '
  [291] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) LIGHT_BLUE
  [292] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2
  to:clrscr::@3

__stackcall (void()) queen((byte) queen::row)
queen: scope:[queen]  from
  [293] (byte) queen::row#0 ← stackidx(byte,(const byte) queen::OFFSET_STACK_ROW)
  [294] (byte) queen::r ← (byte) queen::row#0
  [295] (byte) queen::column ← (byte) 1
  to:queen::@1
queen::@1: scope:[queen]  from queen queen::@3
  [296] if((byte) queen::column<(byte) 8+(byte) 1) goto queen::@2
  to:queen::@return
queen::@return: scope:[queen]  from queen::@1
  [297] return 
  to:@return
queen::@2: scope:[queen]  from queen::@1
  [298] (byte) legal::row#0 ← (byte) queen::r
  [299] (byte) legal::column#0 ← (byte) queen::column
  [300] call legal 
  [301] (byte) legal::return#0 ← (byte) legal::return#4
  to:queen::@7
queen::@7: scope:[queen]  from queen::@2
  [302] (byte~) queen::$1 ← (byte) legal::return#0
  [303] if((byte) 0==(byte~) queen::$1) goto queen::@3
  to:queen::@5
queen::@5: scope:[queen]  from queen::@7
  [304] *((const byte*) board + (byte) queen::r) ← (byte) queen::column
  [305] if((byte) queen::r==(byte) 8) goto queen::@4
  to:queen::@6
queen::@6: scope:[queen]  from queen::@5
  asm { ldacolumn pha ldar pha  }
  [307] (byte~) queen::$4 ← (byte) queen::r + (byte) 1
  [308] stackpush(byte) ← (byte~) queen::$4
  [309] callexecute queen 
  sideeffect stackpullbytes((number) 1)
  asm { pla star pla stacolumn  }
  to:queen::@3
queen::@3: scope:[queen]  from queen::@4 queen::@6 queen::@7
  [312] (byte) queen::column ← ++ (byte) queen::column
  to:queen::@1
queen::@4: scope:[queen]  from queen::@5
  [313] (dword) count ← ++ (dword) count
  [314] call print 
  to:queen::@3

(void()) print()
print: scope:[print]  from queen::@4
  [315] phi()
  [316] call gotoxy 
  to:print::@11
print::@11: scope:[print]  from print
  [317] phi()
  [318] call cputs 
  to:print::@12
print::@12: scope:[print]  from print::@11
  [319] (dword) printf_ulong::uvalue#1 ← (dword) count
  [320] call printf_ulong 
  to:print::@13
print::@13: scope:[print]  from print::@12
  [321] phi()
  [322] call cputs 
  to:print::@1
print::@1: scope:[print]  from print::@13 print::@14
  [323] (byte) print::i#2 ← phi( print::@13/(byte) 1 print::@14/(byte) print::i#1 )
  [324] if((byte) print::i#2<(byte) 8+(byte) 1) goto print::@2
  to:print::@3
print::@3: scope:[print]  from print::@1 print::@7
  [325] (byte) print::i1#2 ← phi( print::@1/(byte) 1 print::@7/(byte) print::i1#1 )
  [326] if((byte) print::i1#2<(byte) 8+(byte) 1) goto print::@4
  to:print::@return
print::@return: scope:[print]  from print::@3
  [327] return 
  to:@return
print::@4: scope:[print]  from print::@3
  [328] phi()
  [329] call cputs 
  to:print::@15
print::@15: scope:[print]  from print::@4
  [330] (byte) printf_uchar::uvalue#1 ← (byte) print::i1#2
  [331] call printf_uchar 
  to:print::@5
print::@5: scope:[print]  from print::@15 print::@9
  [332] (byte) print::j#2 ← phi( print::@9/(byte) print::j#1 print::@15/(byte) 1 )
  [333] if((byte) print::j#2<(byte) 8+(byte) 1) goto print::@6
  to:print::@7
print::@7: scope:[print]  from print::@5
  [334] (byte) print::i1#1 ← ++ (byte) print::i1#2
  to:print::@3
print::@6: scope:[print]  from print::@5
  [335] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8
  to:print::@10
print::@10: scope:[print]  from print::@6
  [336] phi()
  [337] call cputs 
  to:print::@9
print::@9: scope:[print]  from print::@10 print::@8
  [338] (byte) print::j#1 ← ++ (byte) print::j#2
  to:print::@5
print::@8: scope:[print]  from print::@6
  [339] phi()
  [340] call cputs 
  to:print::@9
print::@2: scope:[print]  from print::@1
  [341] (byte) printf_uchar::uvalue#0 ← (byte) print::i#2
  [342] call printf_uchar 
  to:print::@14
print::@14: scope:[print]  from print::@2
  [343] (byte) print::i#1 ← ++ (byte) print::i#2
  to:print::@1

(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from print::@15 print::@2
  [344] (byte) printf_uchar::uvalue#2 ← phi( print::@15/(byte) printf_uchar::uvalue#1 print::@2/(byte) printf_uchar::uvalue#0 )
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [345] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [346] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2
  [347] call uctoa 
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [348] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [349] call printf_number_buffer 
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [350] return 
  to:@return

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@1
  [351] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [352] (byte*) uctoa::buffer#11 ← phi( uctoa::@4/(byte*) uctoa::buffer#14 uctoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [352] (byte) uctoa::started#2 ← phi( uctoa::@4/(byte) uctoa::started#4 uctoa/(byte) 0 )
  [352] (byte) uctoa::value#2 ← phi( uctoa::@4/(byte) uctoa::value#6 uctoa/(byte) uctoa::value#1 )
  [352] (byte) uctoa::digit#2 ← phi( uctoa::@4/(byte) uctoa::digit#1 uctoa/(byte) 0 )
  [353] if((byte) uctoa::digit#2<(byte) 2-(byte) 1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [354] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2)
  [355] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11
  [356] *((byte*) uctoa::buffer#3) ← (byte) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [357] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [358] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2)
  [359] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [360] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [361] (byte*) uctoa::buffer#14 ← phi( uctoa::@7/(byte*) uctoa::buffer#11 uctoa::@6/(byte*) uctoa::buffer#4 )
  [361] (byte) uctoa::started#4 ← phi( uctoa::@7/(byte) uctoa::started#2 uctoa::@6/(byte) 1 )
  [361] (byte) uctoa::value#6 ← phi( uctoa::@7/(byte) uctoa::value#2 uctoa::@6/(byte) uctoa::value#0 )
  [362] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [363] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
  [364] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
  [365] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
  [366] call uctoa_append 
  [367] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [368] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
  [369] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11
  to:uctoa::@4

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [370] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [371] (byte) uctoa_append::digit#2 ← phi( uctoa_append/(byte) 0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  [371] (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#0 uctoa_append::@2/(byte) uctoa_append::value#1 )
  [372] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [373] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2)
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [374] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [375] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  [376] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0
  to:uctoa_append::@1

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from print
  [377] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy
  [378] (byte) conio_cursor_x ← (const byte) gotoxy::x#2
  [379] (byte) conio_cursor_y ← (const byte) gotoxy::y#2
  [380] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN+(const word) gotoxy::line_offset#0
  [381] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM+(const word) gotoxy::line_offset#0
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@1
  [382] return 
  to:@return

(byte()) legal((byte) legal::row , (byte) legal::column)
legal: scope:[legal]  from queen::@2
  [383] phi()
  to:legal::@1
legal::@1: scope:[legal]  from legal legal::@3
  [384] (byte) legal::i#2 ← phi( legal/(byte) 1 legal::@3/(byte) legal::i#1 )
  [385] (byte~) legal::$0 ← (byte) legal::row#0 - (byte) 1
  [386] if((byte) legal::i#2<=(byte~) legal::$0) goto legal::@2
  to:legal::@return
legal::@return: scope:[legal]  from legal::@1 legal::@2 legal::@6
  [387] (byte) legal::return#4 ← phi( legal::@1/(byte) 1 legal::@2/(byte) 0 legal::@6/(byte) 0 )
  [388] return 
  to:@return
legal::@2: scope:[legal]  from legal::@1
  [389] if(*((const byte*) board + (byte) legal::i#2)==(byte) legal::column#0) goto legal::@return
  to:legal::@4
legal::@4: scope:[legal]  from legal::@2
  [390] (byte) diff::a#0 ← *((const byte*) board + (byte) legal::i#2)
  [391] (byte) diff::b#0 ← (byte) legal::column#0
  [392] call diff 
  [393] (byte) diff::return#0 ← (byte) diff::return#4
  to:legal::@5
legal::@5: scope:[legal]  from legal::@4
  [394] (byte~) legal::$3 ← (byte) diff::return#0
  [395] (byte) diff::a#1 ← (byte) legal::i#2
  [396] (byte) diff::b#1 ← (byte) legal::row#0
  [397] call diff 
  [398] (byte) diff::return#1 ← (byte) diff::return#4
  to:legal::@6
legal::@6: scope:[legal]  from legal::@5
  [399] (byte~) legal::$4 ← (byte) diff::return#1
  [400] if((byte~) legal::$3!=(byte~) legal::$4) goto legal::@3
  to:legal::@return
legal::@3: scope:[legal]  from legal::@6
  [401] (byte) legal::i#1 ← ++ (byte) legal::i#2
  to:legal::@1

(byte()) diff((byte) diff::a , (byte) diff::b)
diff: scope:[diff]  from legal::@4 legal::@5
  [402] (byte) diff::b#2 ← phi( legal::@4/(byte) diff::b#0 legal::@5/(byte) diff::b#1 )
  [402] (byte) diff::a#2 ← phi( legal::@4/(byte) diff::a#0 legal::@5/(byte) diff::a#1 )
  [403] if((byte) diff::a#2<(byte) diff::b#2) goto diff::@1
  to:diff::@2
diff::@2: scope:[diff]  from diff
  [404] (byte) diff::return#3 ← (byte) diff::a#2 - (byte) diff::b#2
  to:diff::@return
diff::@return: scope:[diff]  from diff::@1 diff::@2
  [405] (byte) diff::return#4 ← phi( diff::@1/(byte) diff::return#2 diff::@2/(byte) diff::return#3 )
  [406] return 
  to:@return
diff::@1: scope:[diff]  from diff
  [407] (byte) diff::return#2 ← (byte) diff::b#2 - (byte) diff::a#2
  to:diff::@return
