
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@3/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#2
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@4/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@4/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#5 ← phi( memset::@3/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@3/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@2

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from assert_byte assert_byte::@1 assert_byte::@3 assert_byte::@4 assert_sbyte assert_sbyte::@1 assert_sbyte::@3 assert_sbyte::@4
  (byte*) print_char_cursor#85 ← phi( assert_byte/(byte*) print_char_cursor#75 assert_byte::@1/(byte*) print_char_cursor#76 assert_byte::@3/(byte*) print_char_cursor#77 assert_byte::@4/(byte*) print_char_cursor#17 assert_sbyte/(byte*) print_char_cursor#80 assert_sbyte::@1/(byte*) print_char_cursor#81 assert_sbyte::@3/(byte*) print_char_cursor#82 assert_sbyte::@4/(byte*) print_char_cursor#29 )
  (byte*) print_str::str#12 ← phi( assert_byte/(byte*) print_str::str#1 assert_byte::@1/(byte*) print_str::str#3 assert_byte::@3/(byte*) print_str::str#4 assert_byte::@4/(byte*) print_str::str#2 assert_sbyte/(byte*) print_str::str#5 assert_sbyte::@1/(byte*) print_str::str#7 assert_sbyte::@3/(byte*) print_str::str#8 assert_sbyte::@4/(byte*) print_str::str#6 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  (byte*) print_char_cursor#71 ← phi( print_str/(byte*) print_char_cursor#85 print_str::@3/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#9 ← phi( print_str/(byte*) print_str::str#12 print_str::@3/(byte*) print_str::str#0 )
  (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#9)
  if((bool~) print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#70 ← phi( print_str::@1/(byte*) print_char_cursor#71 )
  (byte*) print_str::str#10 ← phi( print_str::@1/(byte*) print_str::str#9 )
  (byte) print_char::ch#0 ← *((byte*) print_str::str#10)
  call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  (byte*) print_str::str#11 ← phi( print_str::@2/(byte*) print_str::str#10 )
  (byte*) print_char_cursor#36 ← phi( print_str::@2/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#1 ← (byte*) print_char_cursor#36
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#11
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#37 ← phi( print_str::@1/(byte*) print_char_cursor#71 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#37
  return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from assert_byte::@2 assert_sbyte::@2
  (byte*) print_char_cursor#72 ← phi( assert_byte::@2/(byte*) print_char_cursor#78 assert_sbyte::@2/(byte*) print_char_cursor#83 )
  (byte*) print_line_cursor#47 ← phi( assert_byte::@2/(byte*) print_line_cursor#50 assert_sbyte::@2/(byte*) print_line_cursor#52 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#38 ← phi( print_ln/(byte*) print_char_cursor#72 print_ln::@1/(byte*) print_char_cursor#38 )
  (byte*) print_line_cursor#24 ← phi( print_ln/(byte*) print_line_cursor#47 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#24 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#38
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#25 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#25
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#39 ← phi( print_ln::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#26 ← phi( print_ln::@2/(byte*) print_line_cursor#25 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#26
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#39
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_str::@2
  (byte*) print_char_cursor#40 ← phi( print_str::@2/(byte*) print_char_cursor#70 )
  (byte) print_char::ch#1 ← phi( print_str::@2/(byte) print_char::ch#0 )
  *((byte*) print_char_cursor#40) ← (byte) print_char::ch#1
  (byte*) print_char_cursor#5 ← ++ (byte*) print_char_cursor#40
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#41 ← phi( print_char/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#41
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#3 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#1
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#2
  (byte*) print_char_cursor#7 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#42 ← phi( print_cls::@1/(byte*) print_char_cursor#7 )
  (byte*) print_line_cursor#27 ← phi( print_cls::@1/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#27
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#42
  return 
  to:@return

(void()) main()
main: scope:[main]  from @2
  (byte*) print_char_cursor#73 ← phi( @2/(byte*) print_char_cursor#84 )
  (byte*) print_line_cursor#48 ← phi( @2/(byte*) print_line_cursor#53 )
  (byte*) print_screen#3 ← phi( @2/(byte*) print_screen#4 )
  call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) print_char_cursor#43 ← phi( main/(byte*) print_char_cursor#8 )
  (byte*) print_line_cursor#28 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#28
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#43
  *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) GREEN
  call test_bytes 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) print_line_cursor#29 ← phi( main::@1/(byte*) print_line_cursor#12 )
  (byte*) print_char_cursor#44 ← phi( main::@1/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#44
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#29
  call test_sbytes 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte*) print_line_cursor#30 ← phi( main::@2/(byte*) print_line_cursor#20 )
  (byte*) print_char_cursor#45 ← phi( main::@2/(byte*) print_char_cursor#28 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#45
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#30
  to:main::@return
main::@return: scope:[main]  from main::@3
  (byte*) print_char_cursor#46 ← phi( main::@3/(byte*) print_char_cursor#11 )
  (byte*) print_line_cursor#31 ← phi( main::@3/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#31
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#46
  return 
  to:@return

(void()) test_bytes()
test_bytes: scope:[test_bytes]  from main::@1
  (byte*) print_line_cursor#49 ← phi( main::@1/(byte*) print_line_cursor#5 )
  (byte*) print_char_cursor#74 ← phi( main::@1/(byte*) print_char_cursor#9 )
  (byte*) assert_byte::msg#0 ← (const byte*) test_bytes::msg
  (byte) assert_byte::b#0 ← (const byte) test_bytes::bb
  (byte) assert_byte::c#0 ← (number) 0
  call assert_byte 
  to:test_bytes::@1
test_bytes::@1: scope:[test_bytes]  from test_bytes
  (byte*) print_line_cursor#32 ← phi( test_bytes/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#47 ← phi( test_bytes/(byte*) print_char_cursor#22 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#47
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#32
  (number~) test_bytes::$1 ← (const byte) test_bytes::bb + (number) 2
  (byte) test_bytes::bc#0 ← (number~) test_bytes::$1
  (byte*) assert_byte::msg#1 ← (const byte*) test_bytes::msg1
  (byte) assert_byte::b#1 ← (byte) test_bytes::bc#0
  (byte) assert_byte::c#1 ← (number) 2
  call assert_byte 
  to:test_bytes::@2
test_bytes::@2: scope:[test_bytes]  from test_bytes::@1
  (byte) test_bytes::bc#1 ← phi( test_bytes::@1/(byte) test_bytes::bc#0 )
  (byte*) print_line_cursor#33 ← phi( test_bytes::@1/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#48 ← phi( test_bytes::@1/(byte*) print_char_cursor#22 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#48
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#33
  (signed byte~) test_bytes::$5 ← (signed byte)(byte) test_bytes::bc#1
  (number~) test_bytes::$3 ← (signed byte~) test_bytes::$5 - (number) 4
  (byte) test_bytes::bd#0 ← (byte)(number~) test_bytes::$3
  (byte*) assert_byte::msg#2 ← (const byte*) test_bytes::msg2
  (byte) assert_byte::b#2 ← (byte) test_bytes::bd#0
  (byte) assert_byte::c#2 ← (number) $fe
  call assert_byte 
  to:test_bytes::@3
test_bytes::@3: scope:[test_bytes]  from test_bytes::@2
  (byte*) print_line_cursor#34 ← phi( test_bytes::@2/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#49 ← phi( test_bytes::@2/(byte*) print_char_cursor#22 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#49
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#34
  to:test_bytes::@return
test_bytes::@return: scope:[test_bytes]  from test_bytes::@3
  (byte*) print_line_cursor#35 ← phi( test_bytes::@3/(byte*) print_line_cursor#11 )
  (byte*) print_char_cursor#50 ← phi( test_bytes::@3/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#50
  (byte*) print_line_cursor#12 ← (byte*) print_line_cursor#35
  return 
  to:@return

(void()) assert_byte((byte*) assert_byte::msg , (byte) assert_byte::b , (byte) assert_byte::c)
assert_byte: scope:[assert_byte]  from test_bytes test_bytes::@1 test_bytes::@2
  (byte*) print_line_cursor#66 ← phi( test_bytes/(byte*) print_line_cursor#49 test_bytes::@1/(byte*) print_line_cursor#9 test_bytes::@2/(byte*) print_line_cursor#10 )
  (byte) assert_byte::c#5 ← phi( test_bytes/(byte) assert_byte::c#0 test_bytes::@1/(byte) assert_byte::c#1 test_bytes::@2/(byte) assert_byte::c#2 )
  (byte) assert_byte::b#5 ← phi( test_bytes/(byte) assert_byte::b#0 test_bytes::@1/(byte) assert_byte::b#1 test_bytes::@2/(byte) assert_byte::b#2 )
  (byte*) print_char_cursor#75 ← phi( test_bytes/(byte*) print_char_cursor#74 test_bytes::@1/(byte*) print_char_cursor#13 test_bytes::@2/(byte*) print_char_cursor#14 )
  (byte*) assert_byte::msg#3 ← phi( test_bytes/(byte*) assert_byte::msg#0 test_bytes::@1/(byte*) assert_byte::msg#1 test_bytes::@2/(byte*) assert_byte::msg#2 )
  (byte*) print_str::str#1 ← (byte*) assert_byte::msg#3
  call print_str 
  to:assert_byte::@4
assert_byte::@4: scope:[assert_byte]  from assert_byte
  (byte*) print_line_cursor#64 ← phi( assert_byte/(byte*) print_line_cursor#66 )
  (byte) assert_byte::c#4 ← phi( assert_byte/(byte) assert_byte::c#5 )
  (byte) assert_byte::b#4 ← phi( assert_byte/(byte) assert_byte::b#5 )
  (byte*) print_char_cursor#51 ← phi( assert_byte/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#51
  (byte*) print_str::str#2 ← (const byte*) assert_byte::str
  call print_str 
  to:assert_byte::@5
assert_byte::@5: scope:[assert_byte]  from assert_byte::@4
  (byte*) print_line_cursor#62 ← phi( assert_byte::@4/(byte*) print_line_cursor#64 )
  (byte) assert_byte::c#3 ← phi( assert_byte::@4/(byte) assert_byte::c#4 )
  (byte) assert_byte::b#3 ← phi( assert_byte::@4/(byte) assert_byte::b#4 )
  (byte*) print_char_cursor#52 ← phi( assert_byte::@4/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#52
  (bool~) assert_byte::$2 ← (byte) assert_byte::b#3 != (byte) assert_byte::c#3
  if((bool~) assert_byte::$2) goto assert_byte::@1
  to:assert_byte::@3
assert_byte::@1: scope:[assert_byte]  from assert_byte::@5
  (byte*) print_line_cursor#58 ← phi( assert_byte::@5/(byte*) print_line_cursor#62 )
  (byte*) print_char_cursor#76 ← phi( assert_byte::@5/(byte*) print_char_cursor#18 )
  *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) RED
  (byte*) print_str::str#3 ← (const byte*) assert_byte::str1
  call print_str 
  to:assert_byte::@6
assert_byte::@6: scope:[assert_byte]  from assert_byte::@1
  (byte*) print_line_cursor#54 ← phi( assert_byte::@1/(byte*) print_line_cursor#58 )
  (byte*) print_char_cursor#53 ← phi( assert_byte::@1/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#53
  to:assert_byte::@2
assert_byte::@3: scope:[assert_byte]  from assert_byte::@5
  (byte*) print_line_cursor#59 ← phi( assert_byte::@5/(byte*) print_line_cursor#62 )
  (byte*) print_char_cursor#77 ← phi( assert_byte::@5/(byte*) print_char_cursor#18 )
  (byte*) print_str::str#4 ← (const byte*) assert_byte::str2
  call print_str 
  to:assert_byte::@7
assert_byte::@7: scope:[assert_byte]  from assert_byte::@3
  (byte*) print_line_cursor#55 ← phi( assert_byte::@3/(byte*) print_line_cursor#59 )
  (byte*) print_char_cursor#54 ← phi( assert_byte::@3/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#54
  to:assert_byte::@2
assert_byte::@2: scope:[assert_byte]  from assert_byte::@6 assert_byte::@7
  (byte*) print_char_cursor#78 ← phi( assert_byte::@6/(byte*) print_char_cursor#19 assert_byte::@7/(byte*) print_char_cursor#20 )
  (byte*) print_line_cursor#50 ← phi( assert_byte::@6/(byte*) print_line_cursor#54 assert_byte::@7/(byte*) print_line_cursor#55 )
  call print_ln 
  to:assert_byte::@8
assert_byte::@8: scope:[assert_byte]  from assert_byte::@2
  (byte*) print_char_cursor#55 ← phi( assert_byte::@2/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#36 ← phi( assert_byte::@2/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#13 ← (byte*) print_line_cursor#36
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#55
  to:assert_byte::@return
assert_byte::@return: scope:[assert_byte]  from assert_byte::@8
  (byte*) print_line_cursor#37 ← phi( assert_byte::@8/(byte*) print_line_cursor#13 )
  (byte*) print_char_cursor#56 ← phi( assert_byte::@8/(byte*) print_char_cursor#21 )
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#56
  (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#37
  return 
  to:@return

(void()) test_sbytes()
test_sbytes: scope:[test_sbytes]  from main::@2
  (byte*) print_line_cursor#51 ← phi( main::@2/(byte*) print_line_cursor#6 )
  (byte*) print_char_cursor#79 ← phi( main::@2/(byte*) print_char_cursor#10 )
  (byte*) assert_sbyte::msg#0 ← (const byte*) test_sbytes::msg
  (signed byte) assert_sbyte::b#0 ← (const signed byte) test_sbytes::bb
  (signed byte) assert_sbyte::c#0 ← (number) 0
  call assert_sbyte 
  to:test_sbytes::@1
test_sbytes::@1: scope:[test_sbytes]  from test_sbytes
  (byte*) print_line_cursor#38 ← phi( test_sbytes/(byte*) print_line_cursor#22 )
  (byte*) print_char_cursor#57 ← phi( test_sbytes/(byte*) print_char_cursor#34 )
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#57
  (byte*) print_line_cursor#15 ← (byte*) print_line_cursor#38
  (number~) test_sbytes::$1 ← (const signed byte) test_sbytes::bb + (number) 2
  (signed byte) test_sbytes::bc#0 ← (number~) test_sbytes::$1
  (byte*) assert_sbyte::msg#1 ← (const byte*) test_sbytes::msg1
  (signed byte) assert_sbyte::b#1 ← (signed byte) test_sbytes::bc#0
  (signed byte) assert_sbyte::c#1 ← (number) 2
  call assert_sbyte 
  to:test_sbytes::@2
test_sbytes::@2: scope:[test_sbytes]  from test_sbytes::@1
  (signed byte) test_sbytes::bc#1 ← phi( test_sbytes::@1/(signed byte) test_sbytes::bc#0 )
  (byte*) print_line_cursor#39 ← phi( test_sbytes::@1/(byte*) print_line_cursor#22 )
  (byte*) print_char_cursor#58 ← phi( test_sbytes::@1/(byte*) print_char_cursor#34 )
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#58
  (byte*) print_line_cursor#16 ← (byte*) print_line_cursor#39
  (number~) test_sbytes::$3 ← (signed byte) test_sbytes::bc#1 - (number) 4
  (signed byte) test_sbytes::bd#0 ← (number~) test_sbytes::$3
  (byte*) assert_sbyte::msg#2 ← (const byte*) test_sbytes::msg2
  (signed byte) assert_sbyte::b#2 ← (signed byte) test_sbytes::bd#0
  (signed byte) assert_sbyte::c#2 ← (number) -2
  call assert_sbyte 
  to:test_sbytes::@3
test_sbytes::@3: scope:[test_sbytes]  from test_sbytes::@2
  (signed byte) test_sbytes::bd#1 ← phi( test_sbytes::@2/(signed byte) test_sbytes::bd#0 )
  (byte*) print_line_cursor#40 ← phi( test_sbytes::@2/(byte*) print_line_cursor#22 )
  (byte*) print_char_cursor#59 ← phi( test_sbytes::@2/(byte*) print_char_cursor#34 )
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#59
  (byte*) print_line_cursor#17 ← (byte*) print_line_cursor#40
  (signed byte~) test_sbytes::$5 ← - (signed byte) test_sbytes::bd#1
  (signed byte) test_sbytes::be#0 ← (signed byte~) test_sbytes::$5
  (byte*) assert_sbyte::msg#3 ← (const byte*) test_sbytes::msg3
  (signed byte) assert_sbyte::b#3 ← (signed byte) test_sbytes::be#0
  (signed byte) assert_sbyte::c#3 ← (number) 2
  call assert_sbyte 
  to:test_sbytes::@4
test_sbytes::@4: scope:[test_sbytes]  from test_sbytes::@3
  (byte*) print_line_cursor#41 ← phi( test_sbytes::@3/(byte*) print_line_cursor#22 )
  (byte*) print_char_cursor#60 ← phi( test_sbytes::@3/(byte*) print_char_cursor#34 )
  (byte*) print_char_cursor#26 ← (byte*) print_char_cursor#60
  (byte*) print_line_cursor#18 ← (byte*) print_line_cursor#41
  (byte*) assert_sbyte::msg#4 ← (const byte*) test_sbytes::msg4
  (signed byte) assert_sbyte::b#4 ← (const signed byte) test_sbytes::bf
  (signed byte) assert_sbyte::c#4 ← (number) 2
  call assert_sbyte 
  to:test_sbytes::@5
test_sbytes::@5: scope:[test_sbytes]  from test_sbytes::@4
  (byte*) print_line_cursor#42 ← phi( test_sbytes::@4/(byte*) print_line_cursor#22 )
  (byte*) print_char_cursor#61 ← phi( test_sbytes::@4/(byte*) print_char_cursor#34 )
  (byte*) print_char_cursor#27 ← (byte*) print_char_cursor#61
  (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#42
  to:test_sbytes::@return
test_sbytes::@return: scope:[test_sbytes]  from test_sbytes::@5
  (byte*) print_line_cursor#43 ← phi( test_sbytes::@5/(byte*) print_line_cursor#19 )
  (byte*) print_char_cursor#62 ← phi( test_sbytes::@5/(byte*) print_char_cursor#27 )
  (byte*) print_char_cursor#28 ← (byte*) print_char_cursor#62
  (byte*) print_line_cursor#20 ← (byte*) print_line_cursor#43
  return 
  to:@return

(void()) assert_sbyte((byte*) assert_sbyte::msg , (signed byte) assert_sbyte::b , (signed byte) assert_sbyte::c)
assert_sbyte: scope:[assert_sbyte]  from test_sbytes test_sbytes::@1 test_sbytes::@2 test_sbytes::@3 test_sbytes::@4
  (byte*) print_line_cursor#67 ← phi( test_sbytes/(byte*) print_line_cursor#51 test_sbytes::@1/(byte*) print_line_cursor#15 test_sbytes::@2/(byte*) print_line_cursor#16 test_sbytes::@3/(byte*) print_line_cursor#17 test_sbytes::@4/(byte*) print_line_cursor#18 )
  (signed byte) assert_sbyte::c#7 ← phi( test_sbytes/(signed byte) assert_sbyte::c#0 test_sbytes::@1/(signed byte) assert_sbyte::c#1 test_sbytes::@2/(signed byte) assert_sbyte::c#2 test_sbytes::@3/(signed byte) assert_sbyte::c#3 test_sbytes::@4/(signed byte) assert_sbyte::c#4 )
  (signed byte) assert_sbyte::b#7 ← phi( test_sbytes/(signed byte) assert_sbyte::b#0 test_sbytes::@1/(signed byte) assert_sbyte::b#1 test_sbytes::@2/(signed byte) assert_sbyte::b#2 test_sbytes::@3/(signed byte) assert_sbyte::b#3 test_sbytes::@4/(signed byte) assert_sbyte::b#4 )
  (byte*) print_char_cursor#80 ← phi( test_sbytes/(byte*) print_char_cursor#79 test_sbytes::@1/(byte*) print_char_cursor#23 test_sbytes::@2/(byte*) print_char_cursor#24 test_sbytes::@3/(byte*) print_char_cursor#25 test_sbytes::@4/(byte*) print_char_cursor#26 )
  (byte*) assert_sbyte::msg#5 ← phi( test_sbytes/(byte*) assert_sbyte::msg#0 test_sbytes::@1/(byte*) assert_sbyte::msg#1 test_sbytes::@2/(byte*) assert_sbyte::msg#2 test_sbytes::@3/(byte*) assert_sbyte::msg#3 test_sbytes::@4/(byte*) assert_sbyte::msg#4 )
  (byte*) print_str::str#5 ← (byte*) assert_sbyte::msg#5
  call print_str 
  to:assert_sbyte::@4
assert_sbyte::@4: scope:[assert_sbyte]  from assert_sbyte
  (byte*) print_line_cursor#65 ← phi( assert_sbyte/(byte*) print_line_cursor#67 )
  (signed byte) assert_sbyte::c#6 ← phi( assert_sbyte/(signed byte) assert_sbyte::c#7 )
  (signed byte) assert_sbyte::b#6 ← phi( assert_sbyte/(signed byte) assert_sbyte::b#7 )
  (byte*) print_char_cursor#63 ← phi( assert_sbyte/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#29 ← (byte*) print_char_cursor#63
  (byte*) print_str::str#6 ← (const byte*) assert_sbyte::str
  call print_str 
  to:assert_sbyte::@5
assert_sbyte::@5: scope:[assert_sbyte]  from assert_sbyte::@4
  (byte*) print_line_cursor#63 ← phi( assert_sbyte::@4/(byte*) print_line_cursor#65 )
  (signed byte) assert_sbyte::c#5 ← phi( assert_sbyte::@4/(signed byte) assert_sbyte::c#6 )
  (signed byte) assert_sbyte::b#5 ← phi( assert_sbyte::@4/(signed byte) assert_sbyte::b#6 )
  (byte*) print_char_cursor#64 ← phi( assert_sbyte::@4/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#30 ← (byte*) print_char_cursor#64
  (bool~) assert_sbyte::$2 ← (signed byte) assert_sbyte::b#5 != (signed byte) assert_sbyte::c#5
  if((bool~) assert_sbyte::$2) goto assert_sbyte::@1
  to:assert_sbyte::@3
assert_sbyte::@1: scope:[assert_sbyte]  from assert_sbyte::@5
  (byte*) print_line_cursor#60 ← phi( assert_sbyte::@5/(byte*) print_line_cursor#63 )
  (byte*) print_char_cursor#81 ← phi( assert_sbyte::@5/(byte*) print_char_cursor#30 )
  *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) RED
  (byte*) print_str::str#7 ← (const byte*) assert_sbyte::str1
  call print_str 
  to:assert_sbyte::@6
assert_sbyte::@6: scope:[assert_sbyte]  from assert_sbyte::@1
  (byte*) print_line_cursor#56 ← phi( assert_sbyte::@1/(byte*) print_line_cursor#60 )
  (byte*) print_char_cursor#65 ← phi( assert_sbyte::@1/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#31 ← (byte*) print_char_cursor#65
  to:assert_sbyte::@2
assert_sbyte::@3: scope:[assert_sbyte]  from assert_sbyte::@5
  (byte*) print_line_cursor#61 ← phi( assert_sbyte::@5/(byte*) print_line_cursor#63 )
  (byte*) print_char_cursor#82 ← phi( assert_sbyte::@5/(byte*) print_char_cursor#30 )
  (byte*) print_str::str#8 ← (const byte*) assert_sbyte::str2
  call print_str 
  to:assert_sbyte::@7
assert_sbyte::@7: scope:[assert_sbyte]  from assert_sbyte::@3
  (byte*) print_line_cursor#57 ← phi( assert_sbyte::@3/(byte*) print_line_cursor#61 )
  (byte*) print_char_cursor#66 ← phi( assert_sbyte::@3/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#32 ← (byte*) print_char_cursor#66
  to:assert_sbyte::@2
assert_sbyte::@2: scope:[assert_sbyte]  from assert_sbyte::@6 assert_sbyte::@7
  (byte*) print_char_cursor#83 ← phi( assert_sbyte::@6/(byte*) print_char_cursor#31 assert_sbyte::@7/(byte*) print_char_cursor#32 )
  (byte*) print_line_cursor#52 ← phi( assert_sbyte::@6/(byte*) print_line_cursor#56 assert_sbyte::@7/(byte*) print_line_cursor#57 )
  call print_ln 
  to:assert_sbyte::@8
assert_sbyte::@8: scope:[assert_sbyte]  from assert_sbyte::@2
  (byte*) print_char_cursor#67 ← phi( assert_sbyte::@2/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#44 ← phi( assert_sbyte::@2/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#21 ← (byte*) print_line_cursor#44
  (byte*) print_char_cursor#33 ← (byte*) print_char_cursor#67
  to:assert_sbyte::@return
assert_sbyte::@return: scope:[assert_sbyte]  from assert_sbyte::@8
  (byte*) print_line_cursor#45 ← phi( assert_sbyte::@8/(byte*) print_line_cursor#21 )
  (byte*) print_char_cursor#68 ← phi( assert_sbyte::@8/(byte*) print_char_cursor#33 )
  (byte*) print_char_cursor#34 ← (byte*) print_char_cursor#68
  (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#45
  return 
  to:@return
@2: scope:[]  from @1
  (byte*) print_screen#4 ← phi( @1/(byte*) print_screen#0 )
  (byte*) print_char_cursor#84 ← phi( @1/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#53 ← phi( @1/(byte*) print_line_cursor#0 )
  call main 
  to:@3
@3: scope:[]  from @2
  (byte*) print_char_cursor#69 ← phi( @2/(byte*) print_char_cursor#12 )
  (byte*) print_line_cursor#46 ← phi( @2/(byte*) print_line_cursor#8 )
  (byte*) print_line_cursor#23 ← (byte*) print_line_cursor#46
  (byte*) print_char_cursor#35 ← (byte*) print_char_cursor#69
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const nomodify byte*) BG_COLOR = (byte*)(number) $d021
(const nomodify byte) GREEN = (byte) 5
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const nomodify byte) RED = (byte) 2
(void()) assert_byte((byte*) assert_byte::msg , (byte) assert_byte::b , (byte) assert_byte::c)
(bool~) assert_byte::$2
(label) assert_byte::@1
(label) assert_byte::@2
(label) assert_byte::@3
(label) assert_byte::@4
(label) assert_byte::@5
(label) assert_byte::@6
(label) assert_byte::@7
(label) assert_byte::@8
(label) assert_byte::@return
(byte) assert_byte::b
(byte) assert_byte::b#0
(byte) assert_byte::b#1
(byte) assert_byte::b#2
(byte) assert_byte::b#3
(byte) assert_byte::b#4
(byte) assert_byte::b#5
(byte) assert_byte::c
(byte) assert_byte::c#0
(byte) assert_byte::c#1
(byte) assert_byte::c#2
(byte) assert_byte::c#3
(byte) assert_byte::c#4
(byte) assert_byte::c#5
(byte*) assert_byte::msg
(byte*) assert_byte::msg#0
(byte*) assert_byte::msg#1
(byte*) assert_byte::msg#2
(byte*) assert_byte::msg#3
(const byte*) assert_byte::str[(byte) 2]  = (byte*) " "
(const byte*) assert_byte::str1[(byte) 6]  = (byte*) "fail!"
(const byte*) assert_byte::str2[(byte) 3]  = (byte*) "ok"
(void()) assert_sbyte((byte*) assert_sbyte::msg , (signed byte) assert_sbyte::b , (signed byte) assert_sbyte::c)
(bool~) assert_sbyte::$2
(label) assert_sbyte::@1
(label) assert_sbyte::@2
(label) assert_sbyte::@3
(label) assert_sbyte::@4
(label) assert_sbyte::@5
(label) assert_sbyte::@6
(label) assert_sbyte::@7
(label) assert_sbyte::@8
(label) assert_sbyte::@return
(signed byte) assert_sbyte::b
(signed byte) assert_sbyte::b#0
(signed byte) assert_sbyte::b#1
(signed byte) assert_sbyte::b#2
(signed byte) assert_sbyte::b#3
(signed byte) assert_sbyte::b#4
(signed byte) assert_sbyte::b#5
(signed byte) assert_sbyte::b#6
(signed byte) assert_sbyte::b#7
(signed byte) assert_sbyte::c
(signed byte) assert_sbyte::c#0
(signed byte) assert_sbyte::c#1
(signed byte) assert_sbyte::c#2
(signed byte) assert_sbyte::c#3
(signed byte) assert_sbyte::c#4
(signed byte) assert_sbyte::c#5
(signed byte) assert_sbyte::c#6
(signed byte) assert_sbyte::c#7
(byte*) assert_sbyte::msg
(byte*) assert_sbyte::msg#0
(byte*) assert_sbyte::msg#1
(byte*) assert_sbyte::msg#2
(byte*) assert_sbyte::msg#3
(byte*) assert_sbyte::msg#4
(byte*) assert_sbyte::msg#5
(const byte*) assert_sbyte::str[(byte) 2]  = (byte*) " "
(const byte*) assert_sbyte::str1[(byte) 6]  = (byte*) "fail!"
(const byte*) assert_sbyte::str2[(byte) 3]  = (byte*) "ok"
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#77
(byte*) print_char_cursor#78
(byte*) print_char_cursor#79
(byte*) print_char_cursor#8
(byte*) print_char_cursor#80
(byte*) print_char_cursor#81
(byte*) print_char_cursor#82
(byte*) print_char_cursor#83
(byte*) print_char_cursor#84
(byte*) print_char_cursor#85
(byte*) print_char_cursor#9
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#45
(byte*) print_line_cursor#46
(byte*) print_line_cursor#47
(byte*) print_line_cursor#48
(byte*) print_line_cursor#49
(byte*) print_line_cursor#5
(byte*) print_line_cursor#50
(byte*) print_line_cursor#51
(byte*) print_line_cursor#52
(byte*) print_line_cursor#53
(byte*) print_line_cursor#54
(byte*) print_line_cursor#55
(byte*) print_line_cursor#56
(byte*) print_line_cursor#57
(byte*) print_line_cursor#58
(byte*) print_line_cursor#59
(byte*) print_line_cursor#6
(byte*) print_line_cursor#60
(byte*) print_line_cursor#61
(byte*) print_line_cursor#62
(byte*) print_line_cursor#63
(byte*) print_line_cursor#64
(byte*) print_line_cursor#65
(byte*) print_line_cursor#66
(byte*) print_line_cursor#67
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$1
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#10
(byte*) print_str::str#11
(byte*) print_str::str#12
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(byte*) print_str::str#6
(byte*) print_str::str#7
(byte*) print_str::str#8
(byte*) print_str::str#9
(void()) test_bytes()
(number~) test_bytes::$1
(number~) test_bytes::$3
(signed byte~) test_bytes::$5
(label) test_bytes::@1
(label) test_bytes::@2
(label) test_bytes::@3
(label) test_bytes::@return
(const byte) test_bytes::bb = (byte) 0
(byte) test_bytes::bc
(byte) test_bytes::bc#0
(byte) test_bytes::bc#1
(byte) test_bytes::bd
(byte) test_bytes::bd#0
(const byte*) test_bytes::msg[(byte) 4]  = (byte*) "0=0"
(const byte*) test_bytes::msg1[(byte) 6]  = (byte*) "0+2=2"
(const byte*) test_bytes::msg2[(byte) $a]  = (byte*) "0+2-4=254"
(void()) test_sbytes()
(number~) test_sbytes::$1
(number~) test_sbytes::$3
(signed byte~) test_sbytes::$5
(label) test_sbytes::@1
(label) test_sbytes::@2
(label) test_sbytes::@3
(label) test_sbytes::@4
(label) test_sbytes::@5
(label) test_sbytes::@return
(const signed byte) test_sbytes::bb = (signed byte) 0
(signed byte) test_sbytes::bc
(signed byte) test_sbytes::bc#0
(signed byte) test_sbytes::bc#1
(signed byte) test_sbytes::bd
(signed byte) test_sbytes::bd#0
(signed byte) test_sbytes::bd#1
(signed byte) test_sbytes::be
(signed byte) test_sbytes::be#0
(const signed byte) test_sbytes::bf = (signed byte)(number) -$7f-(number) $7f
(const byte*) test_sbytes::msg[(byte) 4]  = (byte*) "0=0"
(const byte*) test_sbytes::msg1[(byte) 6]  = (byte*) "0+2=2"
(const byte*) test_sbytes::msg2[(byte) 9]  = (byte*) "0+2-4=-2"
(const byte*) test_sbytes::msg3[(byte) $b]  = (byte*) "-(0+2-4)=2"
(const byte*) test_sbytes::msg4[(byte) $b]  = (byte*) "-127-127=2"

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#9)
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#24 + (number) $28
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) 0 in (byte) assert_byte::c#0 ← (number) 0
Adding number conversion cast (unumber) 2 in (number~) test_bytes::$1 ← (const byte) test_bytes::bb + (number) 2
Adding number conversion cast (unumber) test_bytes::$1 in (number~) test_bytes::$1 ← (const byte) test_bytes::bb + (unumber)(number) 2
Adding number conversion cast (unumber) 2 in (byte) assert_byte::c#1 ← (number) 2
Adding number conversion cast (snumber) 4 in (number~) test_bytes::$3 ← (signed byte~) test_bytes::$5 - (number) 4
Adding number conversion cast (snumber) test_bytes::$3 in (number~) test_bytes::$3 ← (signed byte~) test_bytes::$5 - (snumber)(number) 4
Adding number conversion cast (unumber) $fe in (byte) assert_byte::c#2 ← (number) $fe
Adding number conversion cast (snumber) 0 in (signed byte) assert_sbyte::c#0 ← (number) 0
Adding number conversion cast (snumber) 2 in (number~) test_sbytes::$1 ← (const signed byte) test_sbytes::bb + (number) 2
Adding number conversion cast (snumber) test_sbytes::$1 in (number~) test_sbytes::$1 ← (const signed byte) test_sbytes::bb + (snumber)(number) 2
Adding number conversion cast (snumber) 2 in (signed byte) assert_sbyte::c#1 ← (number) 2
Adding number conversion cast (snumber) 4 in (number~) test_sbytes::$3 ← (signed byte) test_sbytes::bc#1 - (number) 4
Adding number conversion cast (snumber) test_sbytes::$3 in (number~) test_sbytes::$3 ← (signed byte) test_sbytes::bc#1 - (snumber)(number) 4
Adding number conversion cast (snumber) -2 in (signed byte) assert_sbyte::c#2 ← (number) -2
Adding number conversion cast (snumber) 2 in (signed byte) assert_sbyte::c#3 ← (number) 2
Adding number conversion cast (snumber) 2 in (signed byte) assert_sbyte::c#4 ← (number) 2
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast (byte) assert_byte::c#0 ← (unumber)(number) 0
Inlining cast (byte) assert_byte::c#1 ← (unumber)(number) 2
Inlining cast (byte) assert_byte::c#2 ← (unumber)(number) $fe
Inlining cast (signed byte) assert_sbyte::c#0 ← (snumber)(number) 0
Inlining cast (signed byte) assert_sbyte::c#1 ← (snumber)(number) 2
Inlining cast (signed byte) assert_sbyte::c#2 ← (snumber)(number) -2
Inlining cast (signed byte) assert_sbyte::c#3 ← (snumber)(number) 2
Inlining cast (signed byte) assert_sbyte::c#4 ← (snumber)(number) 2
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53281
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $3e8
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast $fe
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast -2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Finalized signed number type (signed byte) 4
Finalized unsigned number type (byte) $fe
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 4
Finalized signed number type (signed byte) -2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) test_bytes::$1 ← (const byte) test_bytes::bb + (byte) 2
Inferred type updated to signed byte in (snumber~) test_bytes::$3 ← (signed byte~) test_bytes::$5 - (signed byte) 4
Inferred type updated to signed byte in (snumber~) test_sbytes::$1 ← (const signed byte) test_sbytes::bb + (signed byte) 2
Inferred type updated to signed byte in (snumber~) test_sbytes::$3 ← (signed byte) test_sbytes::bc#1 - (signed byte) 4
Inversing boolean not [2] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [1] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_line_cursor#0 = print_screen#0 print_char_cursor#0 print_line_cursor#53 print_char_cursor#84 print_screen#4 
Alias print_str::str#10 = print_str::str#9 print_str::str#11 
Alias print_char_cursor#2 = print_char_cursor#70 print_char_cursor#71 print_char_cursor#37 
Alias print_char_cursor#1 = print_char_cursor#36 
Alias print_line_cursor#1 = print_ln::$0 print_line_cursor#25 print_char_cursor#3 print_line_cursor#26 print_char_cursor#39 print_line_cursor#2 print_char_cursor#4 
Alias print_char_cursor#41 = print_char_cursor#5 print_char_cursor#6 
Alias print_line_cursor#27 = print_screen#2 print_screen#1 print_line_cursor#3 print_char_cursor#7 print_char_cursor#42 print_line_cursor#4 print_char_cursor#8 
Alias print_line_cursor#28 = print_line_cursor#5 
Alias print_char_cursor#43 = print_char_cursor#9 
Alias print_char_cursor#10 = print_char_cursor#44 
Alias print_line_cursor#29 = print_line_cursor#6 
Alias print_char_cursor#11 = print_char_cursor#45 print_char_cursor#46 print_char_cursor#12 
Alias print_line_cursor#30 = print_line_cursor#7 print_line_cursor#31 print_line_cursor#8 
Alias print_char_cursor#13 = print_char_cursor#47 
Alias print_line_cursor#32 = print_line_cursor#9 
Alias test_bytes::bc#0 = test_bytes::$1 test_bytes::bc#1 
Alias print_char_cursor#14 = print_char_cursor#48 
Alias print_line_cursor#10 = print_line_cursor#33 
Alias print_char_cursor#15 = print_char_cursor#49 print_char_cursor#50 print_char_cursor#16 
Alias print_line_cursor#11 = print_line_cursor#34 print_line_cursor#35 print_line_cursor#12 
Alias assert_byte::b#3 = assert_byte::b#4 assert_byte::b#5 
Alias assert_byte::c#3 = assert_byte::c#4 assert_byte::c#5 
Alias print_line_cursor#54 = print_line_cursor#64 print_line_cursor#66 print_line_cursor#62 print_line_cursor#58 print_line_cursor#59 print_line_cursor#55 
Alias print_char_cursor#17 = print_char_cursor#51 
Alias print_char_cursor#18 = print_char_cursor#52 print_char_cursor#76 print_char_cursor#77 
Alias print_char_cursor#19 = print_char_cursor#53 
Alias print_char_cursor#20 = print_char_cursor#54 
Alias print_line_cursor#13 = print_line_cursor#36 print_line_cursor#37 print_line_cursor#14 
Alias print_char_cursor#21 = print_char_cursor#55 print_char_cursor#56 print_char_cursor#22 
Alias print_char_cursor#23 = print_char_cursor#57 
Alias print_line_cursor#15 = print_line_cursor#38 
Alias test_sbytes::bc#0 = test_sbytes::$1 test_sbytes::bc#1 
Alias print_char_cursor#24 = print_char_cursor#58 
Alias print_line_cursor#16 = print_line_cursor#39 
Alias test_sbytes::bd#0 = test_sbytes::$3 test_sbytes::bd#1 
Alias print_char_cursor#25 = print_char_cursor#59 
Alias print_line_cursor#17 = print_line_cursor#40 
Alias test_sbytes::be#0 = test_sbytes::$5 
Alias print_char_cursor#26 = print_char_cursor#60 
Alias print_line_cursor#18 = print_line_cursor#41 
Alias print_char_cursor#27 = print_char_cursor#61 print_char_cursor#62 print_char_cursor#28 
Alias print_line_cursor#19 = print_line_cursor#42 print_line_cursor#43 print_line_cursor#20 
Alias assert_sbyte::b#5 = assert_sbyte::b#6 assert_sbyte::b#7 
Alias assert_sbyte::c#5 = assert_sbyte::c#6 assert_sbyte::c#7 
Alias print_line_cursor#56 = print_line_cursor#65 print_line_cursor#67 print_line_cursor#63 print_line_cursor#60 print_line_cursor#61 print_line_cursor#57 
Alias print_char_cursor#29 = print_char_cursor#63 
Alias print_char_cursor#30 = print_char_cursor#64 print_char_cursor#81 print_char_cursor#82 
Alias print_char_cursor#31 = print_char_cursor#65 
Alias print_char_cursor#32 = print_char_cursor#66 
Alias print_line_cursor#21 = print_line_cursor#44 print_line_cursor#45 print_line_cursor#22 
Alias print_char_cursor#33 = print_char_cursor#67 print_char_cursor#68 print_char_cursor#34 
Alias print_line_cursor#23 = print_line_cursor#46 
Alias print_char_cursor#35 = print_char_cursor#69 
Successful SSA optimization Pass2AliasElimination
Alias print_line_cursor#50 = print_line_cursor#54 
Alias print_line_cursor#52 = print_line_cursor#56 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte*) print_char_cursor#1 (byte*) print_char_cursor#41
Identical Phi Values (byte*) print_char_cursor#38 (byte*) print_char_cursor#72
Identical Phi Values (byte) print_char::ch#1 (byte) print_char::ch#0
Identical Phi Values (byte*) print_char_cursor#40 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_line_cursor#27 (byte*) print_screen#3
Identical Phi Values (byte*) print_screen#3 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#48 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#73 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#28 (byte*) print_line_cursor#27
Identical Phi Values (byte*) print_char_cursor#43 (byte*) print_line_cursor#27
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#15
Identical Phi Values (byte*) print_line_cursor#29 (byte*) print_line_cursor#11
Identical Phi Values (byte*) print_char_cursor#11 (byte*) print_char_cursor#27
Identical Phi Values (byte*) print_line_cursor#30 (byte*) print_line_cursor#19
Identical Phi Values (byte*) print_char_cursor#74 (byte*) print_char_cursor#43
Identical Phi Values (byte*) print_line_cursor#49 (byte*) print_line_cursor#28
Identical Phi Values (byte*) print_char_cursor#13 (byte*) print_char_cursor#21
Identical Phi Values (byte*) print_line_cursor#32 (byte*) print_line_cursor#13
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_char_cursor#21
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#13
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_char_cursor#21
Identical Phi Values (byte*) print_line_cursor#11 (byte*) print_line_cursor#13
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#19 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#20 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#79 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_line_cursor#51 (byte*) print_line_cursor#29
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#33
Identical Phi Values (byte*) print_line_cursor#15 (byte*) print_line_cursor#21
Identical Phi Values (byte*) print_char_cursor#24 (byte*) print_char_cursor#33
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#21
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#33
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#21
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#33
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#21
Identical Phi Values (byte*) print_char_cursor#27 (byte*) print_char_cursor#33
Identical Phi Values (byte*) print_line_cursor#19 (byte*) print_line_cursor#21
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#30 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#32 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_line_cursor#21 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#33 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#23 (byte*) print_line_cursor#30
Identical Phi Values (byte*) print_char_cursor#35 (byte*) print_char_cursor#11
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Identical Phi Values (byte*) print_char_cursor#78 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#80 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#52 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#83 (byte*) print_char_cursor#2
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) print_char_cursor#72 (byte*) print_char_cursor#2
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memset::$1 [2] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [9] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) print_str::$1 [17] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2
Simple Condition (bool~) print_ln::$1 [27] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#2) goto print_ln::@1
Simple Condition (bool~) assert_byte::$2 [78] if((byte) assert_byte::b#3!=(byte) assert_byte::c#3) goto assert_byte::@1
Simple Condition (bool~) assert_sbyte::$2 [128] if((signed byte) assert_sbyte::b#5!=(signed byte) assert_sbyte::c#5) goto assert_sbyte::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [55] (byte) test_bytes::bc#0 ← (const byte) test_bytes::bb + (byte) 2
Constant right-side identified [96] (signed byte) test_sbytes::bc#0 ← (const signed byte) test_sbytes::bb + (signed byte) 2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const byte*) assert_byte::msg#0 = test_bytes::msg
Constant (const byte) assert_byte::b#0 = test_bytes::bb
Constant (const byte) assert_byte::c#0 = 0
Constant (const byte) test_bytes::bc#0 = test_bytes::bb+2
Constant (const byte*) assert_byte::msg#1 = test_bytes::msg1
Constant (const byte) assert_byte::c#1 = 2
Constant (const byte*) assert_byte::msg#2 = test_bytes::msg2
Constant (const byte) assert_byte::c#2 = $fe
Constant (const byte*) print_str::str#2 = assert_byte::str
Constant (const byte*) print_str::str#3 = assert_byte::str1
Constant (const byte*) print_str::str#4 = assert_byte::str2
Constant (const byte*) assert_sbyte::msg#0 = test_sbytes::msg
Constant (const signed byte) assert_sbyte::b#0 = test_sbytes::bb
Constant (const signed byte) assert_sbyte::c#0 = 0
Constant (const signed byte) test_sbytes::bc#0 = test_sbytes::bb+2
Constant (const byte*) assert_sbyte::msg#1 = test_sbytes::msg1
Constant (const signed byte) assert_sbyte::c#1 = 2
Constant (const byte*) assert_sbyte::msg#2 = test_sbytes::msg2
Constant (const signed byte) assert_sbyte::c#2 = -2
Constant (const byte*) assert_sbyte::msg#3 = test_sbytes::msg3
Constant (const signed byte) assert_sbyte::c#3 = 2
Constant (const byte*) assert_sbyte::msg#4 = test_sbytes::msg4
Constant (const signed byte) assert_sbyte::b#4 = test_sbytes::bf
Constant (const signed byte) assert_sbyte::c#4 = 2
Constant (const byte*) print_str::str#6 = assert_sbyte::str
Constant (const byte*) print_str::str#7 = assert_sbyte::str1
Constant (const byte*) print_str::str#8 = assert_sbyte::str2
Successful SSA optimization Pass2ConstantIdentification
Constant (const void*) memset::str#0 = (void*)print_line_cursor#0
Constant (const byte) assert_byte::b#1 = test_bytes::bc#0
Constant (const signed byte) test_bytes::$5 = (signed byte)test_bytes::bc#0
Constant (const signed byte) assert_sbyte::b#1 = test_sbytes::bc#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memset::$4 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Constant (const void*) memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [2] if((const word) memset::num#0<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Consolidated constant strings into (const byte*) msg
Consolidated constant strings into (const byte*) msg1
Consolidated constant strings into (const byte*) str
Consolidated constant strings into (const byte*) str1
Consolidated constant strings into (const byte*) str2
Successful SSA optimization Pass2ConstantStringConsolidation
Simplifying expression containing zero 2 in 
Simplifying expression containing zero 2 in 
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const void*) memset::return#2
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [0] (byte*) memset::end#0 ← (const byte*) memset::$4 + (const word) memset::num#0
Constant right-side identified [30] (signed byte~) test_bytes::$3 ← (const signed byte) test_bytes::$5 - (signed byte) 4
Constant right-side identified [47] (signed byte) test_sbytes::bd#0 ← (const signed byte) test_sbytes::bc#0 - (signed byte) 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$4+memset::num#0
Constant (const signed byte) test_bytes::$3 = test_bytes::$5-4
Constant (const signed byte) test_sbytes::bd#0 = test_sbytes::bc#0-4
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) test_bytes::bd#0 = (byte)test_bytes::$3
Constant (const signed byte) assert_sbyte::b#2 = test_sbytes::bd#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) assert_byte::b#2 = test_bytes::bd#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [44] (signed byte) test_sbytes::be#0 ← - (const signed byte) test_sbytes::bd#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const signed byte) test_sbytes::be#0 = -test_sbytes::bd#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const signed byte) assert_sbyte::b#3 = test_sbytes::be#0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte*) print_str::str#2
Inlining constant with var siblings (const byte*) print_str::str#3
Inlining constant with var siblings (const byte*) print_str::str#4
Inlining constant with var siblings (const byte*) print_str::str#6
Inlining constant with var siblings (const byte*) print_str::str#7
Inlining constant with var siblings (const byte*) print_str::str#8
Inlining constant with var siblings (const byte*) assert_byte::msg#0
Inlining constant with var siblings (const byte) assert_byte::b#0
Inlining constant with var siblings (const byte) assert_byte::c#0
Inlining constant with var siblings (const byte*) assert_byte::msg#1
Inlining constant with var siblings (const byte) assert_byte::c#1
Inlining constant with var siblings (const byte*) assert_byte::msg#2
Inlining constant with var siblings (const byte) assert_byte::c#2
Inlining constant with var siblings (const byte) assert_byte::b#1
Inlining constant with var siblings (const byte) assert_byte::b#2
Inlining constant with var siblings (const byte*) assert_sbyte::msg#0
Inlining constant with var siblings (const signed byte) assert_sbyte::b#0
Inlining constant with var siblings (const signed byte) assert_sbyte::c#0
Inlining constant with var siblings (const byte*) assert_sbyte::msg#1
Inlining constant with var siblings (const signed byte) assert_sbyte::c#1
Inlining constant with var siblings (const byte*) assert_sbyte::msg#2
Inlining constant with var siblings (const signed byte) assert_sbyte::c#2
Inlining constant with var siblings (const byte*) assert_sbyte::msg#3
Inlining constant with var siblings (const signed byte) assert_sbyte::c#3
Inlining constant with var siblings (const byte*) assert_sbyte::msg#4
Inlining constant with var siblings (const signed byte) assert_sbyte::b#4
Inlining constant with var siblings (const signed byte) assert_sbyte::c#4
Inlining constant with var siblings (const signed byte) assert_sbyte::b#1
Inlining constant with var siblings (const signed byte) assert_sbyte::b#2
Inlining constant with var siblings (const signed byte) assert_sbyte::b#3
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined test_bytes::msg = (const byte*) msg
Constant inlined test_sbytes::msg = (const byte*) msg
Constant inlined assert_sbyte::b#2 = (const signed byte) test_sbytes::bd#0
Constant inlined assert_sbyte::c#1 = (signed byte) 2
Constant inlined assert_sbyte::b#1 = (const signed byte) test_sbytes::bc#0
Constant inlined assert_sbyte::c#0 = (signed byte) 0
Constant inlined assert_byte::b#0 = (const byte) test_bytes::bb
Constant inlined assert_sbyte::str1 = (const byte*) str1
Constant inlined assert_sbyte::b#0 = (const signed byte) test_sbytes::bb
Constant inlined assert_byte::b#1 = (const byte) test_bytes::bc#0
Constant inlined assert_sbyte::str2 = (const byte*) str2
Constant inlined assert_byte::c#0 = (byte) 0
Constant inlined assert_byte::b#2 = (const byte) test_bytes::bd#0
Constant inlined assert_byte::c#1 = (byte) 2
Constant inlined test_bytes::$3 = (signed byte)(const byte) test_bytes::bc#0-(signed byte) 4
Constant inlined assert_byte::c#2 = (byte) $fe
Constant inlined assert_sbyte::c#4 = (signed byte) 2
Constant inlined assert_sbyte::b#4 = (const signed byte) test_sbytes::bf
Constant inlined assert_sbyte::c#3 = (signed byte) 2
Constant inlined assert_sbyte::b#3 = (const signed byte) test_sbytes::be#0
Constant inlined test_bytes::$5 = (signed byte)(const byte) test_bytes::bc#0
Constant inlined assert_sbyte::c#2 = (signed byte) -2
Constant inlined memset::$4 = (byte*)(const void*) memset::str#0
Constant inlined assert_byte::str2 = (const byte*) str2
Constant inlined assert_byte::msg#0 = (const byte*) msg
Constant inlined test_sbytes::msg1 = (const byte*) msg1
Constant inlined assert_byte::str1 = (const byte*) str1
Constant inlined assert_byte::msg#1 = (const byte*) msg1
Constant inlined assert_byte::msg#2 = (const byte*) test_bytes::msg2
Constant inlined assert_sbyte::msg#0 = (const byte*) msg
Constant inlined assert_sbyte::msg#1 = (const byte*) msg1
Constant inlined assert_sbyte::msg#2 = (const byte*) test_sbytes::msg2
Constant inlined print_line_cursor#0 = (byte*) 1024
Constant inlined assert_sbyte::msg#3 = (const byte*) test_sbytes::msg3
Constant inlined assert_sbyte::str = (const byte*) str
Constant inlined assert_byte::str = (const byte*) str
Constant inlined test_bytes::msg1 = (const byte*) msg1
Constant inlined print_str::str#4 = (const byte*) str2
Constant inlined assert_sbyte::msg#4 = (const byte*) test_sbytes::msg4
Constant inlined print_str::str#3 = (const byte*) str1
Constant inlined print_str::str#2 = (const byte*) str
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Constant inlined print_str::str#8 = (const byte*) str2
Constant inlined print_str::str#7 = (const byte*) str1
Constant inlined print_str::str#6 = (const byte*) str
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of test_sbytes
Adding NOP phi() at start of test_sbytes::@1
Adding NOP phi() at start of test_sbytes::@2
Adding NOP phi() at start of test_sbytes::@3
Adding NOP phi() at start of test_sbytes::@4
Adding NOP phi() at start of test_sbytes::@5
Adding NOP phi() at start of assert_sbyte::@7
Adding NOP phi() at start of assert_sbyte::@8
Adding NOP phi() at start of assert_sbyte::@6
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of test_bytes
Adding NOP phi() at start of test_bytes::@3
Adding NOP phi() at start of assert_byte::@7
Adding NOP phi() at start of assert_byte::@8
Adding NOP phi() at start of assert_byte::@6
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to print_cls:7 test_bytes:9 test_sbytes:11 
Calls in [test_sbytes] to assert_sbyte:15 assert_sbyte:17 assert_sbyte:19 assert_sbyte:21 assert_sbyte:23 
Calls in [assert_sbyte] to print_str:30 print_str:32 print_str:35 print_ln:38 print_str:43 
Calls in [print_str] to print_char:52 
Calls in [test_bytes] to assert_byte:68 assert_byte:71 assert_byte:74 
Calls in [assert_byte] to print_str:81 print_str:83 print_str:86 print_ln:89 print_str:94 
Calls in [print_cls] to memset:97 

Created 15 initial phi equivalence classes
Coalesced [28] print_str::str#14 ← print_str::str#5
Not coalescing [29] print_char_cursor#90 ← print_line_cursor#1
Coalesced [31] print_char_cursor#93 ← print_char_cursor#2
Coalesced (already) [34] print_char_cursor#92 ← print_char_cursor#2
Coalesced [37] print_line_cursor#69 ← print_line_cursor#1
Coalesced (already) [42] print_char_cursor#91 ← print_char_cursor#2
Coalesced [46] print_str::str#15 ← print_str::str#12
Coalesced (already) [47] print_char_cursor#94 ← print_char_cursor#85
Coalesced [54] print_str::str#16 ← print_str::str#0
Coalesced [55] print_char_cursor#95 ← print_char_cursor#41
Coalesced [60] print_line_cursor#70 ← print_line_cursor#47
Coalesced (already) [66] print_line_cursor#71 ← print_line_cursor#1
Not coalescing [69] print_char_cursor#96 ← print_line_cursor#1
Coalesced [70] print_line_cursor#72 ← print_line_cursor#1
Not coalescing [72] print_char_cursor#97 ← print_line_cursor#1
Coalesced (already) [73] print_line_cursor#73 ← print_line_cursor#1
Coalesced [79] print_str::str#13 ← print_str::str#1
Coalesced [80] print_char_cursor#86 ← print_char_cursor#75
Coalesced (already) [82] print_char_cursor#89 ← print_char_cursor#2
Coalesced (already) [85] print_char_cursor#88 ← print_char_cursor#2
Coalesced (already) [88] print_line_cursor#68 ← print_line_cursor#50
Coalesced (already) [93] print_char_cursor#87 ← print_char_cursor#2
Coalesced [108] memset::dst#4 ← memset::dst#1
Coalesced down to 10 phi equivalence classes
Culled Empty Block (label) @1
Culled Empty Block (label) @3
Culled Empty Block (label) main::@3
Culled Empty Block (label) test_sbytes::@5
Culled Empty Block (label) assert_sbyte::@7
Culled Empty Block (label) assert_sbyte::@8
Culled Empty Block (label) assert_sbyte::@6
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) test_bytes::@3
Culled Empty Block (label) assert_byte::@7
Culled Empty Block (label) assert_byte::@8
Culled Empty Block (label) assert_byte::@6
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Renumbering block @2 to @1
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of test_sbytes
Adding NOP phi() at start of test_sbytes::@1
Adding NOP phi() at start of test_sbytes::@2
Adding NOP phi() at start of test_sbytes::@3
Adding NOP phi() at start of test_sbytes::@4
Adding NOP phi() at start of assert_sbyte::@4
Adding NOP phi() at start of assert_sbyte::@3
Adding NOP phi() at start of assert_sbyte::@2
Adding NOP phi() at start of test_bytes
Adding NOP phi() at start of assert_byte::@4
Adding NOP phi() at start of assert_byte::@3
Adding NOP phi() at start of assert_byte::@2
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [6] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) GREEN
  [7] call test_bytes 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call test_sbytes 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return

(void()) test_sbytes()
test_sbytes: scope:[test_sbytes]  from main::@2
  [11] phi()
  [12] call assert_sbyte 
  to:test_sbytes::@1
test_sbytes::@1: scope:[test_sbytes]  from test_sbytes
  [13] phi()
  [14] call assert_sbyte 
  to:test_sbytes::@2
test_sbytes::@2: scope:[test_sbytes]  from test_sbytes::@1
  [15] phi()
  [16] call assert_sbyte 
  to:test_sbytes::@3
test_sbytes::@3: scope:[test_sbytes]  from test_sbytes::@2
  [17] phi()
  [18] call assert_sbyte 
  to:test_sbytes::@4
test_sbytes::@4: scope:[test_sbytes]  from test_sbytes::@3
  [19] phi()
  [20] call assert_sbyte 
  to:test_sbytes::@return
test_sbytes::@return: scope:[test_sbytes]  from test_sbytes::@4
  [21] return 
  to:@return

(void()) assert_sbyte((byte*) assert_sbyte::msg , (signed byte) assert_sbyte::b , (signed byte) assert_sbyte::c)
assert_sbyte: scope:[assert_sbyte]  from test_sbytes test_sbytes::@1 test_sbytes::@2 test_sbytes::@3 test_sbytes::@4
  [22] (signed byte) assert_sbyte::c#5 ← phi( test_sbytes/(signed byte) 0 test_sbytes::@1/(signed byte) 2 test_sbytes::@2/(signed byte) -2 test_sbytes::@3/(signed byte) 2 test_sbytes::@4/(signed byte) 2 )
  [22] (signed byte) assert_sbyte::b#5 ← phi( test_sbytes/(const signed byte) test_sbytes::bb test_sbytes::@1/(const signed byte) test_sbytes::bc#0 test_sbytes::@2/(const signed byte) test_sbytes::bd#0 test_sbytes::@3/(const signed byte) test_sbytes::be#0 test_sbytes::@4/(const signed byte) test_sbytes::bf )
  [22] (byte*) assert_sbyte::msg#5 ← phi( test_sbytes/(const byte*) msg test_sbytes::@1/(const byte*) msg1 test_sbytes::@2/(const byte*) test_sbytes::msg2 test_sbytes::@3/(const byte*) test_sbytes::msg3 test_sbytes::@4/(const byte*) test_sbytes::msg4 )
  [23] (byte*) print_str::str#5 ← (byte*) assert_sbyte::msg#5
  [24] (byte*) print_char_cursor#90 ← (byte*) print_line_cursor#1
  [25] call print_str 
  to:assert_sbyte::@4
assert_sbyte::@4: scope:[assert_sbyte]  from assert_sbyte
  [26] phi()
  [27] call print_str 
  to:assert_sbyte::@5
assert_sbyte::@5: scope:[assert_sbyte]  from assert_sbyte::@4
  [28] if((signed byte) assert_sbyte::b#5!=(signed byte) assert_sbyte::c#5) goto assert_sbyte::@1
  to:assert_sbyte::@3
assert_sbyte::@3: scope:[assert_sbyte]  from assert_sbyte::@5
  [29] phi()
  [30] call print_str 
  to:assert_sbyte::@2
assert_sbyte::@2: scope:[assert_sbyte]  from assert_sbyte::@1 assert_sbyte::@3
  [31] phi()
  [32] call print_ln 
  to:assert_sbyte::@return
assert_sbyte::@return: scope:[assert_sbyte]  from assert_sbyte::@2
  [33] return 
  to:@return
assert_sbyte::@1: scope:[assert_sbyte]  from assert_sbyte::@5
  [34] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) RED
  [35] call print_str 
  to:assert_sbyte::@2

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from assert_byte assert_byte::@1 assert_byte::@3 assert_byte::@4 assert_sbyte assert_sbyte::@1 assert_sbyte::@3 assert_sbyte::@4
  [36] (byte*) print_char_cursor#85 ← phi( assert_byte/(byte*) print_char_cursor#75 assert_byte::@1/(byte*) print_char_cursor#2 assert_byte::@3/(byte*) print_char_cursor#2 assert_byte::@4/(byte*) print_char_cursor#2 assert_sbyte/(byte*) print_char_cursor#90 assert_sbyte::@1/(byte*) print_char_cursor#2 assert_sbyte::@3/(byte*) print_char_cursor#2 assert_sbyte::@4/(byte*) print_char_cursor#2 )
  [36] (byte*) print_str::str#12 ← phi( assert_byte/(byte*) print_str::str#1 assert_byte::@1/(const byte*) str1 assert_byte::@3/(const byte*) str2 assert_byte::@4/(const byte*) str assert_sbyte/(byte*) print_str::str#5 assert_sbyte::@1/(const byte*) str1 assert_sbyte::@3/(const byte*) str2 assert_sbyte::@4/(const byte*) str )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [37] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#85 print_str::@3/(byte*) print_char_cursor#41 )
  [37] (byte*) print_str::str#10 ← phi( print_str/(byte*) print_str::str#12 print_str::@3/(byte*) print_str::str#0 )
  [38] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [39] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [40] (byte) print_char::ch#0 ← *((byte*) print_str::str#10)
  [41] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [42] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10
  to:print_str::@1

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_str::@2
  [43] *((byte*) print_char_cursor#2) ← (byte) print_char::ch#0
  [44] (byte*) print_char_cursor#41 ← ++ (byte*) print_char_cursor#2
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [45] return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from assert_byte::@2 assert_sbyte::@2
  [46] (byte*) print_line_cursor#47 ← phi( assert_byte::@2/(byte*) print_line_cursor#50 assert_sbyte::@2/(byte*) print_line_cursor#1 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [47] (byte*) print_line_cursor#24 ← phi( print_ln/(byte*) print_line_cursor#47 print_ln::@1/(byte*) print_line_cursor#1 )
  [48] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#24 + (byte) $28
  [49] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#2) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [50] return 
  to:@return

(void()) test_bytes()
test_bytes: scope:[test_bytes]  from main::@1
  [51] phi()
  [52] call assert_byte 
  to:test_bytes::@1
test_bytes::@1: scope:[test_bytes]  from test_bytes
  [53] (byte*) print_char_cursor#96 ← (byte*) print_line_cursor#1
  [54] call assert_byte 
  to:test_bytes::@2
test_bytes::@2: scope:[test_bytes]  from test_bytes::@1
  [55] (byte*) print_char_cursor#97 ← (byte*) print_line_cursor#1
  [56] call assert_byte 
  to:test_bytes::@return
test_bytes::@return: scope:[test_bytes]  from test_bytes::@2
  [57] return 
  to:@return

(void()) assert_byte((byte*) assert_byte::msg , (byte) assert_byte::b , (byte) assert_byte::c)
assert_byte: scope:[assert_byte]  from test_bytes test_bytes::@1 test_bytes::@2
  [58] (byte*) print_line_cursor#50 ← phi( test_bytes/(byte*) 1024 test_bytes::@1/(byte*) print_line_cursor#1 test_bytes::@2/(byte*) print_line_cursor#1 )
  [58] (byte) assert_byte::c#3 ← phi( test_bytes/(byte) 0 test_bytes::@1/(byte) 2 test_bytes::@2/(byte) $fe )
  [58] (byte) assert_byte::b#3 ← phi( test_bytes/(const byte) test_bytes::bb test_bytes::@1/(const byte) test_bytes::bc#0 test_bytes::@2/(const byte) test_bytes::bd#0 )
  [58] (byte*) print_char_cursor#75 ← phi( test_bytes/(byte*) 1024 test_bytes::@1/(byte*) print_char_cursor#96 test_bytes::@2/(byte*) print_char_cursor#97 )
  [58] (byte*) assert_byte::msg#3 ← phi( test_bytes/(const byte*) msg test_bytes::@1/(const byte*) msg1 test_bytes::@2/(const byte*) test_bytes::msg2 )
  [59] (byte*) print_str::str#1 ← (byte*) assert_byte::msg#3
  [60] call print_str 
  to:assert_byte::@4
assert_byte::@4: scope:[assert_byte]  from assert_byte
  [61] phi()
  [62] call print_str 
  to:assert_byte::@5
assert_byte::@5: scope:[assert_byte]  from assert_byte::@4
  [63] if((byte) assert_byte::b#3!=(byte) assert_byte::c#3) goto assert_byte::@1
  to:assert_byte::@3
assert_byte::@3: scope:[assert_byte]  from assert_byte::@5
  [64] phi()
  [65] call print_str 
  to:assert_byte::@2
assert_byte::@2: scope:[assert_byte]  from assert_byte::@1 assert_byte::@3
  [66] phi()
  [67] call print_ln 
  to:assert_byte::@return
assert_byte::@return: scope:[assert_byte]  from assert_byte::@2
  [68] return 
  to:@return
assert_byte::@1: scope:[assert_byte]  from assert_byte::@5
  [69] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) RED
  [70] call print_str 
  to:assert_byte::@2

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [71] phi()
  [72] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [73] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [74] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [75] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [76] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [77] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [78] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [79] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1


VARIABLE REGISTER WEIGHTS
(void()) assert_byte((byte*) assert_byte::msg , (byte) assert_byte::b , (byte) assert_byte::c)
(byte) assert_byte::b
(byte) assert_byte::b#3 200.2
(byte) assert_byte::c
(byte) assert_byte::c#3 200.2
(byte*) assert_byte::msg
(byte*) assert_byte::msg#3 1001.0
(void()) assert_sbyte((byte*) assert_sbyte::msg , (signed byte) assert_sbyte::b , (signed byte) assert_sbyte::c)
(signed byte) assert_sbyte::b
(signed byte) assert_sbyte::b#5 166.83333333333334
(signed byte) assert_sbyte::c
(signed byte) assert_sbyte::c#5 166.83333333333334
(byte*) assert_sbyte::msg
(byte*) assert_sbyte::msg#5 1001.0
(void()) main()
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 20002.0
(byte*) memset::dst#2 13334.666666666666
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 1100002.0
(byte*) print_char_cursor
(byte*) print_char_cursor#2 82074.48148148147
(byte*) print_char_cursor#41 275000.5
(byte*) print_char_cursor#75 601.5
(byte*) print_char_cursor#85 18009.0
(byte*) print_char_cursor#90 2002.0
(byte*) print_char_cursor#96 202.0
(byte*) print_char_cursor#97 202.0
(void()) print_cls()
(byte*) print_line_cursor
(byte*) print_line_cursor#1 8400.249999999996
(byte*) print_line_cursor#24 210003.0
(byte*) print_line_cursor#47 12003.0
(byte*) print_line_cursor#50 109.36363636363637
(void()) print_ln()
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 200002.0
(byte*) print_str::str#1 2002.0
(byte*) print_str::str#10 102501.25
(byte*) print_str::str#12 12003.0
(byte*) print_str::str#5 1001.0
(void()) test_bytes()
(byte) test_bytes::bc
(byte) test_bytes::bd
(void()) test_sbytes()
(signed byte) test_sbytes::bc
(signed byte) test_sbytes::bd
(signed byte) test_sbytes::be

Initial phi equivalence classes
[ assert_sbyte::msg#5 ]
[ assert_sbyte::b#5 ]
[ assert_sbyte::c#5 ]
[ print_char_cursor#85 print_char_cursor#75 print_char_cursor#2 print_char_cursor#90 print_char_cursor#41 print_char_cursor#96 print_char_cursor#97 ]
[ print_str::str#10 print_str::str#12 print_str::str#1 print_str::str#5 print_str::str#0 ]
[ print_line_cursor#24 print_line_cursor#47 print_line_cursor#50 print_line_cursor#1 ]
[ assert_byte::msg#3 ]
[ assert_byte::b#3 ]
[ assert_byte::c#3 ]
[ memset::dst#2 memset::dst#1 ]
Added variable print_char::ch#0 to live range equivalence class [ print_char::ch#0 ]
Complete equivalence classes
[ assert_sbyte::msg#5 ]
[ assert_sbyte::b#5 ]
[ assert_sbyte::c#5 ]
[ print_char_cursor#85 print_char_cursor#75 print_char_cursor#2 print_char_cursor#90 print_char_cursor#41 print_char_cursor#96 print_char_cursor#97 ]
[ print_str::str#10 print_str::str#12 print_str::str#1 print_str::str#5 print_str::str#0 ]
[ print_line_cursor#24 print_line_cursor#47 print_line_cursor#50 print_line_cursor#1 ]
[ assert_byte::msg#3 ]
[ assert_byte::b#3 ]
[ assert_byte::c#3 ]
[ memset::dst#2 memset::dst#1 ]
[ print_char::ch#0 ]
Allocated zp[2]:2 [ assert_sbyte::msg#5 ]
Allocated zp[1]:4 [ assert_sbyte::b#5 ]
Allocated zp[1]:5 [ assert_sbyte::c#5 ]
Allocated zp[2]:6 [ print_char_cursor#85 print_char_cursor#75 print_char_cursor#2 print_char_cursor#90 print_char_cursor#41 print_char_cursor#96 print_char_cursor#97 ]
Allocated zp[2]:8 [ print_str::str#10 print_str::str#12 print_str::str#1 print_str::str#5 print_str::str#0 ]
Allocated zp[2]:10 [ print_line_cursor#24 print_line_cursor#47 print_line_cursor#50 print_line_cursor#1 ]
Allocated zp[2]:12 [ assert_byte::msg#3 ]
Allocated zp[1]:14 [ assert_byte::b#3 ]
Allocated zp[1]:15 [ assert_byte::c#3 ]
Allocated zp[2]:16 [ memset::dst#2 memset::dst#1 ]
Allocated zp[1]:18 [ print_char::ch#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const GREEN = 5
  .const RED = 2
  .label BG_COLOR = $d021
  .label print_char_cursor = 6
  .label print_line_cursor = $a
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call print_cls 
    // [71] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    jmp __b1
    // main::@1
  __b1:
    // [6] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) GREEN -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BG_COLOR
    // [7] call test_bytes 
    // [51] phi from main::@1 to test_bytes [phi:main::@1->test_bytes]
  test_bytes_from___b1:
    jsr test_bytes
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [9] call test_sbytes 
    // [11] phi from main::@2 to test_sbytes [phi:main::@2->test_sbytes]
  test_sbytes_from___b2:
    jsr test_sbytes
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // test_sbytes
// Test different signed byte constants
test_sbytes: {
    .const bb = 0
    .const bf = $ff&-$7f-$7f
    .const bc = 2
    .const bd = bc-4
    .const be = -bd
    // [12] call assert_sbyte 
    // [22] phi from test_sbytes to assert_sbyte [phi:test_sbytes->assert_sbyte]
  assert_sbyte_from_test_sbytes:
    // [22] phi (signed byte) assert_sbyte::c#5 = (signed byte) 0 [phi:test_sbytes->assert_sbyte#0] -- vbsz1=vbsc1 
    lda #0
    sta.z assert_sbyte.c
    // [22] phi (signed byte) assert_sbyte::b#5 = (const signed byte) test_sbytes::bb [phi:test_sbytes->assert_sbyte#1] -- vbsz1=vbsc1 
    lda #bb
    sta.z assert_sbyte.b
    // [22] phi (byte*) assert_sbyte::msg#5 = (const byte*) msg [phi:test_sbytes->assert_sbyte#2] -- pbuz1=pbuc1 
    lda #<msg
    sta.z assert_sbyte.msg
    lda #>msg
    sta.z assert_sbyte.msg+1
    jsr assert_sbyte
    // [13] phi from test_sbytes to test_sbytes::@1 [phi:test_sbytes->test_sbytes::@1]
  __b1_from_test_sbytes:
    jmp __b1
    // test_sbytes::@1
  __b1:
    // [14] call assert_sbyte 
    // [22] phi from test_sbytes::@1 to assert_sbyte [phi:test_sbytes::@1->assert_sbyte]
  assert_sbyte_from___b1:
    // [22] phi (signed byte) assert_sbyte::c#5 = (signed byte) 2 [phi:test_sbytes::@1->assert_sbyte#0] -- vbsz1=vbsc1 
    lda #2
    sta.z assert_sbyte.c
    // [22] phi (signed byte) assert_sbyte::b#5 = (const signed byte) test_sbytes::bc#0 [phi:test_sbytes::@1->assert_sbyte#1] -- vbsz1=vbsc1 
    lda #bc
    sta.z assert_sbyte.b
    // [22] phi (byte*) assert_sbyte::msg#5 = (const byte*) msg1 [phi:test_sbytes::@1->assert_sbyte#2] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z assert_sbyte.msg
    lda #>msg1
    sta.z assert_sbyte.msg+1
    jsr assert_sbyte
    // [15] phi from test_sbytes::@1 to test_sbytes::@2 [phi:test_sbytes::@1->test_sbytes::@2]
  __b2_from___b1:
    jmp __b2
    // test_sbytes::@2
  __b2:
    // [16] call assert_sbyte 
    // [22] phi from test_sbytes::@2 to assert_sbyte [phi:test_sbytes::@2->assert_sbyte]
  assert_sbyte_from___b2:
    // [22] phi (signed byte) assert_sbyte::c#5 = (signed byte) -2 [phi:test_sbytes::@2->assert_sbyte#0] -- vbsz1=vbsc1 
    lda #-2
    sta.z assert_sbyte.c
    // [22] phi (signed byte) assert_sbyte::b#5 = (const signed byte) test_sbytes::bd#0 [phi:test_sbytes::@2->assert_sbyte#1] -- vbsz1=vbsc1 
    lda #bd
    sta.z assert_sbyte.b
    // [22] phi (byte*) assert_sbyte::msg#5 = (const byte*) test_sbytes::msg2 [phi:test_sbytes::@2->assert_sbyte#2] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z assert_sbyte.msg
    lda #>msg2
    sta.z assert_sbyte.msg+1
    jsr assert_sbyte
    // [17] phi from test_sbytes::@2 to test_sbytes::@3 [phi:test_sbytes::@2->test_sbytes::@3]
  __b3_from___b2:
    jmp __b3
    // test_sbytes::@3
  __b3:
    // [18] call assert_sbyte 
    // [22] phi from test_sbytes::@3 to assert_sbyte [phi:test_sbytes::@3->assert_sbyte]
  assert_sbyte_from___b3:
    // [22] phi (signed byte) assert_sbyte::c#5 = (signed byte) 2 [phi:test_sbytes::@3->assert_sbyte#0] -- vbsz1=vbsc1 
    lda #2
    sta.z assert_sbyte.c
    // [22] phi (signed byte) assert_sbyte::b#5 = (const signed byte) test_sbytes::be#0 [phi:test_sbytes::@3->assert_sbyte#1] -- vbsz1=vbsc1 
    lda #be
    sta.z assert_sbyte.b
    // [22] phi (byte*) assert_sbyte::msg#5 = (const byte*) test_sbytes::msg3 [phi:test_sbytes::@3->assert_sbyte#2] -- pbuz1=pbuc1 
    lda #<msg3
    sta.z assert_sbyte.msg
    lda #>msg3
    sta.z assert_sbyte.msg+1
    jsr assert_sbyte
    // [19] phi from test_sbytes::@3 to test_sbytes::@4 [phi:test_sbytes::@3->test_sbytes::@4]
  __b4_from___b3:
    jmp __b4
    // test_sbytes::@4
  __b4:
    // [20] call assert_sbyte 
    // [22] phi from test_sbytes::@4 to assert_sbyte [phi:test_sbytes::@4->assert_sbyte]
  assert_sbyte_from___b4:
    // [22] phi (signed byte) assert_sbyte::c#5 = (signed byte) 2 [phi:test_sbytes::@4->assert_sbyte#0] -- vbsz1=vbsc1 
    lda #2
    sta.z assert_sbyte.c
    // [22] phi (signed byte) assert_sbyte::b#5 = (const signed byte) test_sbytes::bf [phi:test_sbytes::@4->assert_sbyte#1] -- vbsz1=vbsc1 
    lda #bf
    sta.z assert_sbyte.b
    // [22] phi (byte*) assert_sbyte::msg#5 = (const byte*) test_sbytes::msg4 [phi:test_sbytes::@4->assert_sbyte#2] -- pbuz1=pbuc1 
    lda #<msg4
    sta.z assert_sbyte.msg
    lda #>msg4
    sta.z assert_sbyte.msg+1
    jsr assert_sbyte
    jmp __breturn
    // test_sbytes::@return
  __breturn:
    // [21] return 
    rts
    msg2: .text "0+2-4=-2"
    .byte 0
    msg3: .text "-(0+2-4)=2"
    .byte 0
    msg4: .text "-127-127=2"
    .byte 0
}
  // assert_sbyte
// assert_sbyte(byte* zp(2) msg, signed byte zp(4) b, signed byte zp(5) c)
assert_sbyte: {
    .label msg = 2
    .label b = 4
    .label c = 5
    // [23] (byte*) print_str::str#5 ← (byte*) assert_sbyte::msg#5 -- pbuz1=pbuz2 
    lda.z msg
    sta.z print_str.str
    lda.z msg+1
    sta.z print_str.str+1
    // [24] (byte*) print_char_cursor#90 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [25] call print_str 
    // [36] phi from assert_sbyte to print_str [phi:assert_sbyte->print_str]
  print_str_from_assert_sbyte:
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#90 [phi:assert_sbyte->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (byte*) print_str::str#5 [phi:assert_sbyte->print_str#1] -- register_copy 
    jsr print_str
    // [26] phi from assert_sbyte to assert_sbyte::@4 [phi:assert_sbyte->assert_sbyte::@4]
  __b4_from_assert_sbyte:
    jmp __b4
    // assert_sbyte::@4
  __b4:
    // [27] call print_str 
    // [36] phi from assert_sbyte::@4 to print_str [phi:assert_sbyte::@4->print_str]
  print_str_from___b4:
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_sbyte::@4->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str [phi:assert_sbyte::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b5
    // assert_sbyte::@5
  __b5:
    // [28] if((signed byte) assert_sbyte::b#5!=(signed byte) assert_sbyte::c#5) goto assert_sbyte::@1 -- vbsz1_neq_vbsz2_then_la1 
    lda.z b
    cmp.z c
    bne __b1
    // [29] phi from assert_sbyte::@5 to assert_sbyte::@3 [phi:assert_sbyte::@5->assert_sbyte::@3]
  __b3_from___b5:
    jmp __b3
    // assert_sbyte::@3
  __b3:
    // [30] call print_str 
    // [36] phi from assert_sbyte::@3 to print_str [phi:assert_sbyte::@3->print_str]
  print_str_from___b3:
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_sbyte::@3->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str2 [phi:assert_sbyte::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // [31] phi from assert_sbyte::@1 assert_sbyte::@3 to assert_sbyte::@2 [phi:assert_sbyte::@1/assert_sbyte::@3->assert_sbyte::@2]
  __b2_from___b1:
  __b2_from___b3:
    jmp __b2
    // assert_sbyte::@2
  __b2:
    // [32] call print_ln 
    // [46] phi from assert_sbyte::@2 to print_ln [phi:assert_sbyte::@2->print_ln]
  print_ln_from___b2:
    // [46] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#1 [phi:assert_sbyte::@2->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __breturn
    // assert_sbyte::@return
  __breturn:
    // [33] return 
    rts
    // assert_sbyte::@1
  __b1:
    // [34] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BG_COLOR
    // [35] call print_str 
    // [36] phi from assert_sbyte::@1 to print_str [phi:assert_sbyte::@1->print_str]
  print_str_from___b1:
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_sbyte::@1->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str1 [phi:assert_sbyte::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b2_from___b1
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(8) str)
print_str: {
    .label str = 8
    // [37] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [37] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#85 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [37] phi (byte*) print_str::str#10 = (byte*) print_str::str#12 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [38] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [39] return 
    rts
    // print_str::@2
  __b2:
    // [40] (byte) print_char::ch#0 ← *((byte*) print_str::str#10) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z print_char.ch
    // [41] call print_char 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [42] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // print_char
// Print a single char
// print_char(byte zp($12) ch)
print_char: {
    .label ch = $12
    // [43] *((byte*) print_char_cursor#2) ← (byte) print_char::ch#0 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [44] (byte*) print_char_cursor#41 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [45] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [47] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [47] phi (byte*) print_line_cursor#24 = (byte*) print_line_cursor#47 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [48] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#24 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [49] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#2) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [50] return 
    rts
}
  // test_bytes
// Test different byte constants
test_bytes: {
    .const bb = 0
    .const bc = 2
    .const bd = bc-4
    // [52] call assert_byte 
    // [58] phi from test_bytes to assert_byte [phi:test_bytes->assert_byte]
  assert_byte_from_test_bytes:
    // [58] phi (byte*) print_line_cursor#50 = (byte*) 1024 [phi:test_bytes->assert_byte#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [58] phi (byte) assert_byte::c#3 = (byte) 0 [phi:test_bytes->assert_byte#1] -- vbuz1=vbuc1 
    lda #0
    sta.z assert_byte.c
    // [58] phi (byte) assert_byte::b#3 = (const byte) test_bytes::bb [phi:test_bytes->assert_byte#2] -- vbuz1=vbuc1 
    lda #bb
    sta.z assert_byte.b
    // [58] phi (byte*) print_char_cursor#75 = (byte*) 1024 [phi:test_bytes->assert_byte#3] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [58] phi (byte*) assert_byte::msg#3 = (const byte*) msg [phi:test_bytes->assert_byte#4] -- pbuz1=pbuc1 
    lda #<msg
    sta.z assert_byte.msg
    lda #>msg
    sta.z assert_byte.msg+1
    jsr assert_byte
    jmp __b1
    // test_bytes::@1
  __b1:
    // [53] (byte*) print_char_cursor#96 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [54] call assert_byte 
    // [58] phi from test_bytes::@1 to assert_byte [phi:test_bytes::@1->assert_byte]
  assert_byte_from___b1:
    // [58] phi (byte*) print_line_cursor#50 = (byte*) print_line_cursor#1 [phi:test_bytes::@1->assert_byte#0] -- register_copy 
    // [58] phi (byte) assert_byte::c#3 = (byte) 2 [phi:test_bytes::@1->assert_byte#1] -- vbuz1=vbuc1 
    lda #2
    sta.z assert_byte.c
    // [58] phi (byte) assert_byte::b#3 = (const byte) test_bytes::bc#0 [phi:test_bytes::@1->assert_byte#2] -- vbuz1=vbuc1 
    lda #bc
    sta.z assert_byte.b
    // [58] phi (byte*) print_char_cursor#75 = (byte*) print_char_cursor#96 [phi:test_bytes::@1->assert_byte#3] -- register_copy 
    // [58] phi (byte*) assert_byte::msg#3 = (const byte*) msg1 [phi:test_bytes::@1->assert_byte#4] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z assert_byte.msg
    lda #>msg1
    sta.z assert_byte.msg+1
    jsr assert_byte
    jmp __b2
    // test_bytes::@2
  __b2:
    // [55] (byte*) print_char_cursor#97 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [56] call assert_byte 
    // [58] phi from test_bytes::@2 to assert_byte [phi:test_bytes::@2->assert_byte]
  assert_byte_from___b2:
    // [58] phi (byte*) print_line_cursor#50 = (byte*) print_line_cursor#1 [phi:test_bytes::@2->assert_byte#0] -- register_copy 
    // [58] phi (byte) assert_byte::c#3 = (byte) $fe [phi:test_bytes::@2->assert_byte#1] -- vbuz1=vbuc1 
    lda #$fe
    sta.z assert_byte.c
    // [58] phi (byte) assert_byte::b#3 = (const byte) test_bytes::bd#0 [phi:test_bytes::@2->assert_byte#2] -- vbuz1=vbuc1 
    lda #bd
    sta.z assert_byte.b
    // [58] phi (byte*) print_char_cursor#75 = (byte*) print_char_cursor#97 [phi:test_bytes::@2->assert_byte#3] -- register_copy 
    // [58] phi (byte*) assert_byte::msg#3 = (const byte*) test_bytes::msg2 [phi:test_bytes::@2->assert_byte#4] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z assert_byte.msg
    lda #>msg2
    sta.z assert_byte.msg+1
    jsr assert_byte
    jmp __breturn
    // test_bytes::@return
  __breturn:
    // [57] return 
    rts
    msg2: .text "0+2-4=254"
    .byte 0
}
  // assert_byte
// assert_byte(byte* zp($c) msg, byte zp($e) b, byte zp($f) c)
assert_byte: {
    .label msg = $c
    .label b = $e
    .label c = $f
    // [59] (byte*) print_str::str#1 ← (byte*) assert_byte::msg#3 -- pbuz1=pbuz2 
    lda.z msg
    sta.z print_str.str
    lda.z msg+1
    sta.z print_str.str+1
    // [60] call print_str 
    // [36] phi from assert_byte to print_str [phi:assert_byte->print_str]
  print_str_from_assert_byte:
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#75 [phi:assert_byte->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (byte*) print_str::str#1 [phi:assert_byte->print_str#1] -- register_copy 
    jsr print_str
    // [61] phi from assert_byte to assert_byte::@4 [phi:assert_byte->assert_byte::@4]
  __b4_from_assert_byte:
    jmp __b4
    // assert_byte::@4
  __b4:
    // [62] call print_str 
    // [36] phi from assert_byte::@4 to print_str [phi:assert_byte::@4->print_str]
  print_str_from___b4:
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_byte::@4->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str [phi:assert_byte::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b5
    // assert_byte::@5
  __b5:
    // [63] if((byte) assert_byte::b#3!=(byte) assert_byte::c#3) goto assert_byte::@1 -- vbuz1_neq_vbuz2_then_la1 
    lda.z b
    cmp.z c
    bne __b1
    // [64] phi from assert_byte::@5 to assert_byte::@3 [phi:assert_byte::@5->assert_byte::@3]
  __b3_from___b5:
    jmp __b3
    // assert_byte::@3
  __b3:
    // [65] call print_str 
    // [36] phi from assert_byte::@3 to print_str [phi:assert_byte::@3->print_str]
  print_str_from___b3:
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_byte::@3->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str2 [phi:assert_byte::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // [66] phi from assert_byte::@1 assert_byte::@3 to assert_byte::@2 [phi:assert_byte::@1/assert_byte::@3->assert_byte::@2]
  __b2_from___b1:
  __b2_from___b3:
    jmp __b2
    // assert_byte::@2
  __b2:
    // [67] call print_ln 
    // [46] phi from assert_byte::@2 to print_ln [phi:assert_byte::@2->print_ln]
  print_ln_from___b2:
    // [46] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#50 [phi:assert_byte::@2->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __breturn
    // assert_byte::@return
  __breturn:
    // [68] return 
    rts
    // assert_byte::@1
  __b1:
    // [69] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BG_COLOR
    // [70] call print_str 
    // [36] phi from assert_byte::@1 to print_str [phi:assert_byte::@1->print_str]
  print_str_from___b1:
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_byte::@1->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str1 [phi:assert_byte::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b2_from___b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [72] call memset 
    // [74] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [73] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $10
    // [75] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [75] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [76] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [77] return 
    rts
    // memset::@2
  __b2:
    // [78] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [79] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [75] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [75] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  msg: .text "0=0"
  .byte 0
  msg1: .text "0+2=2"
  .byte 0
  str: .text " "
  .byte 0
  str1: .text "fail!"
  .byte 0
  str2: .text "ok"
  .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) GREEN [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [23] (byte*) print_str::str#5 ← (byte*) assert_sbyte::msg#5 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_line_cursor#1 ] ( main:2::test_sbytes:9::assert_sbyte:12 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:14 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:16 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:18 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:20 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ assert_sbyte::b#5 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ assert_sbyte::c#5 ]
Statement [24] (byte*) print_char_cursor#90 ← (byte*) print_line_cursor#1 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_char_cursor#90 print_line_cursor#1 ] ( main:2::test_sbytes:9::assert_sbyte:12 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_char_cursor#90 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:14 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_char_cursor#90 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:16 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_char_cursor#90 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:18 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_char_cursor#90 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:20 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_char_cursor#90 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  ) always clobbers reg byte a 
Statement [34] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) RED [ print_line_cursor#1 print_char_cursor#2 ] ( main:2::test_sbytes:9::assert_sbyte:12 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  ) always clobbers reg byte a 
Statement [38] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2 [ print_char_cursor#2 print_str::str#10 ] ( main:2::test_sbytes:9::assert_sbyte:12::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:60 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 ] { { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } { print_char_cursor#75 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:60 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#75 = print_char_cursor#96 print_char_cursor#85 } { print_line_cursor#1 = print_line_cursor#50 } { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } }  main:2::test_bytes:7::assert_byte:56::print_str:60 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#75 = print_char_cursor#97 print_char_cursor#85 } { print_line_cursor#1 = print_line_cursor#50 } { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } }  main:2::test_bytes:7::assert_byte:52::print_str:62 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:62 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:62 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:65 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:65 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:65 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:70 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:70 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:70 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:4 [ assert_sbyte::b#5 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ assert_sbyte::c#5 ]
Removing always clobbered register reg byte a as potential for zp[1]:14 [ assert_byte::b#3 ]
Removing always clobbered register reg byte y as potential for zp[1]:14 [ assert_byte::b#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:15 [ assert_byte::c#3 ]
Removing always clobbered register reg byte y as potential for zp[1]:15 [ assert_byte::c#3 ]
Statement [40] (byte) print_char::ch#0 ← *((byte*) print_str::str#10) [ print_char_cursor#2 print_str::str#10 print_char::ch#0 ] ( main:2::test_sbytes:9::assert_sbyte:12::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:60 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } { print_char_cursor#75 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:60 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#75 = print_char_cursor#96 print_char_cursor#85 } { print_line_cursor#1 = print_line_cursor#50 } { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } }  main:2::test_bytes:7::assert_byte:56::print_str:60 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#75 = print_char_cursor#97 print_char_cursor#85 } { print_line_cursor#1 = print_line_cursor#50 } { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } }  main:2::test_bytes:7::assert_byte:52::print_str:62 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:62 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:62 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:65 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:65 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:65 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:70 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:70 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:70 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  ) always clobbers reg byte a reg byte y 
Statement [43] *((byte*) print_char_cursor#2) ← (byte) print_char::ch#0 [ print_char_cursor#2 ] ( main:2::test_sbytes:9::assert_sbyte:12::print_str:25::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:25::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:25::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:25::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:25::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:27::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:27::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:27::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:27::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:27::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:30::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:30::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:30::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:30::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:30::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:35::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:35::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:35::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:35::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:35::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:60::print_char:41 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_str::str#10 print_char_cursor#2 ] { { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } { print_char_cursor#75 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:60::print_char:41 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#96 print_char_cursor#85 } { print_line_cursor#1 = print_line_cursor#50 } { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } }  main:2::test_bytes:7::assert_byte:56::print_str:60::print_char:41 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#97 print_char_cursor#85 } { print_line_cursor#1 = print_line_cursor#50 } { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } }  main:2::test_bytes:7::assert_byte:52::print_str:62::print_char:41 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:62::print_char:41 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:62::print_char:41 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:65::print_char:41 [ print_line_cursor#50 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:65::print_char:41 [ print_line_cursor#50 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:65::print_char:41 [ print_line_cursor#50 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:70::print_char:41 [ print_line_cursor#50 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:70::print_char:41 [ print_line_cursor#50 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:70::print_char:41 [ print_line_cursor#50 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  ) always clobbers reg byte y 
Statement [48] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#24 + (byte) $28 [ print_line_cursor#1 print_char_cursor#2 ] ( main:2::test_sbytes:9::assert_sbyte:12::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_sbytes:9::assert_sbyte:14::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_sbytes:9::assert_sbyte:16::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_sbytes:9::assert_sbyte:18::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_sbytes:9::assert_sbyte:20::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_bytes:7::assert_byte:52::print_ln:67 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#47 = print_line_cursor#50 } }  main:2::test_bytes:7::assert_byte:54::print_ln:67 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 print_line_cursor#47 } }  main:2::test_bytes:7::assert_byte:56::print_ln:67 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 print_line_cursor#47 } }  ) always clobbers reg byte a 
Statement [49] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#2) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#2 ] ( main:2::test_sbytes:9::assert_sbyte:12::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_sbytes:9::assert_sbyte:14::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_sbytes:9::assert_sbyte:16::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_sbytes:9::assert_sbyte:18::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_sbytes:9::assert_sbyte:20::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_bytes:7::assert_byte:52::print_ln:67 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#47 = print_line_cursor#50 } }  main:2::test_bytes:7::assert_byte:54::print_ln:67 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 print_line_cursor#47 } }  main:2::test_bytes:7::assert_byte:56::print_ln:67 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 print_line_cursor#47 } }  ) always clobbers reg byte a 
Statement [53] (byte*) print_char_cursor#96 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#96 ] ( main:2::test_bytes:7 [ print_line_cursor#1 print_char_cursor#96 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } }  ) always clobbers reg byte a 
Statement [55] (byte*) print_char_cursor#97 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#97 ] ( main:2::test_bytes:7 [ print_line_cursor#1 print_char_cursor#97 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } }  ) always clobbers reg byte a 
Statement [59] (byte*) print_str::str#1 ← (byte*) assert_byte::msg#3 [ print_str::str#1 print_char_cursor#75 print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 ] ( main:2::test_bytes:7::assert_byte:52 [ print_str::str#1 print_char_cursor#75 print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 ] { { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } { print_char_cursor#75 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54 [ print_str::str#1 print_char_cursor#75 print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 ] { { print_char_cursor#75 = print_char_cursor#96 print_char_cursor#85 } { print_line_cursor#1 = print_line_cursor#50 } { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } }  main:2::test_bytes:7::assert_byte:56 [ print_str::str#1 print_char_cursor#75 print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 ] { { print_char_cursor#75 = print_char_cursor#97 print_char_cursor#85 } { print_line_cursor#1 = print_line_cursor#50 } { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } }  ) always clobbers reg byte a 
Statement [69] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) RED [ print_char_cursor#2 print_line_cursor#50 ] ( main:2::test_bytes:7::assert_byte:52 [ print_char_cursor#2 print_line_cursor#50 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54 [ print_char_cursor#2 print_line_cursor#50 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56 [ print_char_cursor#2 print_line_cursor#50 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  ) always clobbers reg byte a 
Statement [76] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:72 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [78] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:72 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [6] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) GREEN [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [23] (byte*) print_str::str#5 ← (byte*) assert_sbyte::msg#5 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_line_cursor#1 ] ( main:2::test_sbytes:9::assert_sbyte:12 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:14 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:16 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:18 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:20 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  ) always clobbers reg byte a 
Statement [24] (byte*) print_char_cursor#90 ← (byte*) print_line_cursor#1 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_char_cursor#90 print_line_cursor#1 ] ( main:2::test_sbytes:9::assert_sbyte:12 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_char_cursor#90 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:14 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_char_cursor#90 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:16 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_char_cursor#90 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:18 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_char_cursor#90 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:20 [ assert_sbyte::b#5 assert_sbyte::c#5 print_str::str#5 print_char_cursor#90 print_line_cursor#1 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  ) always clobbers reg byte a 
Statement [34] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) RED [ print_line_cursor#1 print_char_cursor#2 ] ( main:2::test_sbytes:9::assert_sbyte:12 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  ) always clobbers reg byte a 
Statement [38] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2 [ print_char_cursor#2 print_str::str#10 ] ( main:2::test_sbytes:9::assert_sbyte:12::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:60 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 ] { { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } { print_char_cursor#75 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:60 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#75 = print_char_cursor#96 print_char_cursor#85 } { print_line_cursor#1 = print_line_cursor#50 } { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } }  main:2::test_bytes:7::assert_byte:56::print_str:60 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#75 = print_char_cursor#97 print_char_cursor#85 } { print_line_cursor#1 = print_line_cursor#50 } { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } }  main:2::test_bytes:7::assert_byte:52::print_str:62 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:62 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:62 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:65 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:65 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:65 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:70 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:70 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:70 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  ) always clobbers reg byte a reg byte y 
Statement [40] (byte) print_char::ch#0 ← *((byte*) print_str::str#10) [ print_char_cursor#2 print_str::str#10 print_char::ch#0 ] ( main:2::test_sbytes:9::assert_sbyte:12::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:25 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:27 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:30 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:35 [ print_line_cursor#1 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:60 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } { print_char_cursor#75 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:60 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#75 = print_char_cursor#96 print_char_cursor#85 } { print_line_cursor#1 = print_line_cursor#50 } { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } }  main:2::test_bytes:7::assert_byte:56::print_str:60 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#75 = print_char_cursor#97 print_char_cursor#85 } { print_line_cursor#1 = print_line_cursor#50 } { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } }  main:2::test_bytes:7::assert_byte:52::print_str:62 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:62 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:62 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:65 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:65 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:65 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:70 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:70 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:70 [ print_line_cursor#50 print_char_cursor#2 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  ) always clobbers reg byte a reg byte y 
Statement [43] *((byte*) print_char_cursor#2) ← (byte) print_char::ch#0 [ print_char_cursor#2 ] ( main:2::test_sbytes:9::assert_sbyte:12::print_str:25::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:25::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:25::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:25::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:25::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_str::str#12 = print_str::str#5 assert_sbyte::msg#5 } { print_char_cursor#85 = print_char_cursor#90 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:27::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:27::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:27::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:27::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:27::print_char:41 [ assert_sbyte::b#5 assert_sbyte::c#5 print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:30::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:30::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:30::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:30::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:30::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:12::print_str:35::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:14::print_str:35::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:16::print_str:35::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:18::print_str:35::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_sbytes:9::assert_sbyte:20::print_str:35::print_char:41 [ print_line_cursor#1 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:60::print_char:41 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_str::str#10 print_char_cursor#2 ] { { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } { print_char_cursor#75 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:60::print_char:41 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#96 print_char_cursor#85 } { print_line_cursor#1 = print_line_cursor#50 } { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } }  main:2::test_bytes:7::assert_byte:56::print_str:60::print_char:41 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#97 print_char_cursor#85 } { print_line_cursor#1 = print_line_cursor#50 } { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } }  main:2::test_bytes:7::assert_byte:52::print_str:62::print_char:41 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:62::print_char:41 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:62::print_char:41 [ print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:65::print_char:41 [ print_line_cursor#50 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:65::print_char:41 [ print_line_cursor#50 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:65::print_char:41 [ print_line_cursor#50 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:52::print_str:70::print_char:41 [ print_line_cursor#50 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54::print_str:70::print_char:41 [ print_line_cursor#50 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56::print_str:70::print_char:41 [ print_line_cursor#50 print_str::str#10 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  ) always clobbers reg byte y 
Statement [48] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#24 + (byte) $28 [ print_line_cursor#1 print_char_cursor#2 ] ( main:2::test_sbytes:9::assert_sbyte:12::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_sbytes:9::assert_sbyte:14::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_sbytes:9::assert_sbyte:16::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_sbytes:9::assert_sbyte:18::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_sbytes:9::assert_sbyte:20::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_bytes:7::assert_byte:52::print_ln:67 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#47 = print_line_cursor#50 } }  main:2::test_bytes:7::assert_byte:54::print_ln:67 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 print_line_cursor#47 } }  main:2::test_bytes:7::assert_byte:56::print_ln:67 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 print_line_cursor#47 } }  ) always clobbers reg byte a 
Statement [49] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#2) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#2 ] ( main:2::test_sbytes:9::assert_sbyte:12::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_sbytes:9::assert_sbyte:14::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_sbytes:9::assert_sbyte:16::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_sbytes:9::assert_sbyte:18::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_sbytes:9::assert_sbyte:20::print_ln:32 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#1 = print_line_cursor#47 } }  main:2::test_bytes:7::assert_byte:52::print_ln:67 [ print_line_cursor#1 print_char_cursor#2 ] { { print_line_cursor#47 = print_line_cursor#50 } }  main:2::test_bytes:7::assert_byte:54::print_ln:67 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 print_line_cursor#47 } }  main:2::test_bytes:7::assert_byte:56::print_ln:67 [ print_line_cursor#1 print_char_cursor#2 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 print_line_cursor#47 } }  ) always clobbers reg byte a 
Statement [53] (byte*) print_char_cursor#96 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#96 ] ( main:2::test_bytes:7 [ print_line_cursor#1 print_char_cursor#96 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } }  ) always clobbers reg byte a 
Statement [55] (byte*) print_char_cursor#97 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#97 ] ( main:2::test_bytes:7 [ print_line_cursor#1 print_char_cursor#97 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } }  ) always clobbers reg byte a 
Statement [59] (byte*) print_str::str#1 ← (byte*) assert_byte::msg#3 [ print_str::str#1 print_char_cursor#75 print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 ] ( main:2::test_bytes:7::assert_byte:52 [ print_str::str#1 print_char_cursor#75 print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 ] { { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } { print_char_cursor#75 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54 [ print_str::str#1 print_char_cursor#75 print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 ] { { print_char_cursor#75 = print_char_cursor#96 print_char_cursor#85 } { print_line_cursor#1 = print_line_cursor#50 } { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } }  main:2::test_bytes:7::assert_byte:56 [ print_str::str#1 print_char_cursor#75 print_line_cursor#50 assert_byte::b#3 assert_byte::c#3 ] { { print_char_cursor#75 = print_char_cursor#97 print_char_cursor#85 } { print_line_cursor#1 = print_line_cursor#50 } { print_str::str#1 = print_str::str#12 assert_byte::msg#3 } }  ) always clobbers reg byte a 
Statement [69] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) RED [ print_char_cursor#2 print_line_cursor#50 ] ( main:2::test_bytes:7::assert_byte:52 [ print_char_cursor#2 print_line_cursor#50 ] { { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:54 [ print_char_cursor#2 print_line_cursor#50 ] { { print_char_cursor#75 = print_char_cursor#96 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  main:2::test_bytes:7::assert_byte:56 [ print_char_cursor#2 print_line_cursor#50 ] { { print_char_cursor#75 = print_char_cursor#97 } { print_line_cursor#1 = print_line_cursor#50 } { print_char_cursor#2 = print_char_cursor#85 } }  ) always clobbers reg byte a 
Statement [76] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:72 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [78] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:72 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ assert_sbyte::msg#5 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ assert_sbyte::b#5 ] : zp[1]:4 , reg byte x , 
Potential registers zp[1]:5 [ assert_sbyte::c#5 ] : zp[1]:5 , reg byte x , 
Potential registers zp[2]:6 [ print_char_cursor#85 print_char_cursor#75 print_char_cursor#2 print_char_cursor#90 print_char_cursor#41 print_char_cursor#96 print_char_cursor#97 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ print_str::str#10 print_str::str#12 print_str::str#1 print_str::str#5 print_str::str#0 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ print_line_cursor#24 print_line_cursor#47 print_line_cursor#50 print_line_cursor#1 ] : zp[2]:10 , 
Potential registers zp[2]:12 [ assert_byte::msg#3 ] : zp[2]:12 , 
Potential registers zp[1]:14 [ assert_byte::b#3 ] : zp[1]:14 , reg byte x , 
Potential registers zp[1]:15 [ assert_byte::c#3 ] : zp[1]:15 , reg byte x , 
Potential registers zp[2]:16 [ memset::dst#2 memset::dst#1 ] : zp[2]:16 , 
Potential registers zp[1]:18 [ print_char::ch#0 ] : zp[1]:18 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_char] 1,100,002: zp[1]:18 [ print_char::ch#0 ] 
Uplift Scope [] 378,091.48: zp[2]:6 [ print_char_cursor#85 print_char_cursor#75 print_char_cursor#2 print_char_cursor#90 print_char_cursor#41 print_char_cursor#96 print_char_cursor#97 ] 230,515.61: zp[2]:10 [ print_line_cursor#24 print_line_cursor#47 print_line_cursor#50 print_line_cursor#1 ] 
Uplift Scope [print_str] 317,509.25: zp[2]:8 [ print_str::str#10 print_str::str#12 print_str::str#1 print_str::str#5 print_str::str#0 ] 
Uplift Scope [memset] 33,336.67: zp[2]:16 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [assert_byte] 1,001: zp[2]:12 [ assert_byte::msg#3 ] 200.2: zp[1]:14 [ assert_byte::b#3 ] 200.2: zp[1]:15 [ assert_byte::c#3 ] 
Uplift Scope [assert_sbyte] 1,001: zp[2]:2 [ assert_sbyte::msg#5 ] 166.83: zp[1]:4 [ assert_sbyte::b#5 ] 166.83: zp[1]:5 [ assert_sbyte::c#5 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 
Uplift Scope [main] 
Uplift Scope [test_bytes] 
Uplift Scope [test_sbytes] 

Uplifting [print_char] best 2128 combination reg byte a [ print_char::ch#0 ] 
Uplifting [] best 2128 combination zp[2]:6 [ print_char_cursor#85 print_char_cursor#75 print_char_cursor#2 print_char_cursor#90 print_char_cursor#41 print_char_cursor#96 print_char_cursor#97 ] zp[2]:10 [ print_line_cursor#24 print_line_cursor#47 print_line_cursor#50 print_line_cursor#1 ] 
Uplifting [print_str] best 2128 combination zp[2]:8 [ print_str::str#10 print_str::str#12 print_str::str#1 print_str::str#5 print_str::str#0 ] 
Uplifting [memset] best 2128 combination zp[2]:16 [ memset::dst#2 memset::dst#1 ] 
Uplifting [assert_byte] best 2116 combination zp[2]:12 [ assert_byte::msg#3 ] reg byte x [ assert_byte::b#3 ] zp[1]:15 [ assert_byte::c#3 ] 
Uplifting [assert_sbyte] best 2098 combination zp[2]:2 [ assert_sbyte::msg#5 ] reg byte x [ assert_sbyte::b#5 ] zp[1]:5 [ assert_sbyte::c#5 ] 
Uplifting [RADIX] best 2098 combination 
Uplifting [print_ln] best 2098 combination 
Uplifting [print_cls] best 2098 combination 
Uplifting [main] best 2098 combination 
Uplifting [test_bytes] best 2098 combination 
Uplifting [test_sbytes] best 2098 combination 
Attempting to uplift remaining variables inzp[1]:15 [ assert_byte::c#3 ]
Uplifting [assert_byte] best 2098 combination zp[1]:15 [ assert_byte::c#3 ] 
Attempting to uplift remaining variables inzp[1]:5 [ assert_sbyte::c#5 ]
Uplifting [assert_sbyte] best 2098 combination zp[1]:5 [ assert_sbyte::c#5 ] 
Coalescing zero page register [ zp[2]:2 [ assert_sbyte::msg#5 ] ] with [ zp[2]:8 [ print_str::str#10 print_str::str#12 print_str::str#1 print_str::str#5 print_str::str#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:2 [ assert_sbyte::msg#5 print_str::str#10 print_str::str#12 print_str::str#1 print_str::str#5 print_str::str#0 ] ] with [ zp[2]:12 [ assert_byte::msg#3 ] ] - score: 1
Coalescing zero page register [ zp[1]:15 [ assert_byte::c#3 ] ] with [ zp[1]:5 [ assert_sbyte::c#5 ] ]
Coalescing zero page register [ zp[2]:16 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:2 [ assert_sbyte::msg#5 print_str::str#10 print_str::str#12 print_str::str#1 print_str::str#5 print_str::str#0 assert_byte::msg#3 ] ]
Allocated (was zp[2]:6) zp[2]:2 [ print_char_cursor#85 print_char_cursor#75 print_char_cursor#2 print_char_cursor#90 print_char_cursor#41 print_char_cursor#96 print_char_cursor#97 ]
Allocated (was zp[2]:10) zp[2]:4 [ print_line_cursor#24 print_line_cursor#47 print_line_cursor#50 print_line_cursor#1 ]
Allocated (was zp[1]:15) zp[1]:6 [ assert_byte::c#3 assert_sbyte::c#5 ]
Allocated (was zp[2]:16) zp[2]:7 [ memset::dst#2 memset::dst#1 assert_sbyte::msg#5 print_str::str#10 print_str::str#12 print_str::str#1 print_str::str#5 print_str::str#0 assert_byte::msg#3 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const GREEN = 5
  .const RED = 2
  .label BG_COLOR = $d021
  .label print_char_cursor = 2
  .label print_line_cursor = 4
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call print_cls 
    // [71] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    jmp __b1
    // main::@1
  __b1:
    // [6] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) GREEN -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BG_COLOR
    // [7] call test_bytes 
    // [51] phi from main::@1 to test_bytes [phi:main::@1->test_bytes]
  test_bytes_from___b1:
    jsr test_bytes
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [9] call test_sbytes 
    // [11] phi from main::@2 to test_sbytes [phi:main::@2->test_sbytes]
  test_sbytes_from___b2:
    jsr test_sbytes
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // test_sbytes
// Test different signed byte constants
test_sbytes: {
    .const bb = 0
    .const bf = $ff&-$7f-$7f
    .const bc = 2
    .const bd = bc-4
    .const be = -bd
    // [12] call assert_sbyte 
    // [22] phi from test_sbytes to assert_sbyte [phi:test_sbytes->assert_sbyte]
  assert_sbyte_from_test_sbytes:
    // [22] phi (signed byte) assert_sbyte::c#5 = (signed byte) 0 [phi:test_sbytes->assert_sbyte#0] -- vbsz1=vbsc1 
    lda #0
    sta.z assert_sbyte.c
    // [22] phi (signed byte) assert_sbyte::b#5 = (const signed byte) test_sbytes::bb [phi:test_sbytes->assert_sbyte#1] -- vbsxx=vbsc1 
    ldx #bb
    // [22] phi (byte*) assert_sbyte::msg#5 = (const byte*) msg [phi:test_sbytes->assert_sbyte#2] -- pbuz1=pbuc1 
    lda #<msg
    sta.z assert_sbyte.msg
    lda #>msg
    sta.z assert_sbyte.msg+1
    jsr assert_sbyte
    // [13] phi from test_sbytes to test_sbytes::@1 [phi:test_sbytes->test_sbytes::@1]
  __b1_from_test_sbytes:
    jmp __b1
    // test_sbytes::@1
  __b1:
    // [14] call assert_sbyte 
    // [22] phi from test_sbytes::@1 to assert_sbyte [phi:test_sbytes::@1->assert_sbyte]
  assert_sbyte_from___b1:
    // [22] phi (signed byte) assert_sbyte::c#5 = (signed byte) 2 [phi:test_sbytes::@1->assert_sbyte#0] -- vbsz1=vbsc1 
    lda #2
    sta.z assert_sbyte.c
    // [22] phi (signed byte) assert_sbyte::b#5 = (const signed byte) test_sbytes::bc#0 [phi:test_sbytes::@1->assert_sbyte#1] -- vbsxx=vbsc1 
    ldx #bc
    // [22] phi (byte*) assert_sbyte::msg#5 = (const byte*) msg1 [phi:test_sbytes::@1->assert_sbyte#2] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z assert_sbyte.msg
    lda #>msg1
    sta.z assert_sbyte.msg+1
    jsr assert_sbyte
    // [15] phi from test_sbytes::@1 to test_sbytes::@2 [phi:test_sbytes::@1->test_sbytes::@2]
  __b2_from___b1:
    jmp __b2
    // test_sbytes::@2
  __b2:
    // [16] call assert_sbyte 
    // [22] phi from test_sbytes::@2 to assert_sbyte [phi:test_sbytes::@2->assert_sbyte]
  assert_sbyte_from___b2:
    // [22] phi (signed byte) assert_sbyte::c#5 = (signed byte) -2 [phi:test_sbytes::@2->assert_sbyte#0] -- vbsz1=vbsc1 
    lda #-2
    sta.z assert_sbyte.c
    // [22] phi (signed byte) assert_sbyte::b#5 = (const signed byte) test_sbytes::bd#0 [phi:test_sbytes::@2->assert_sbyte#1] -- vbsxx=vbsc1 
    ldx #bd
    // [22] phi (byte*) assert_sbyte::msg#5 = (const byte*) test_sbytes::msg2 [phi:test_sbytes::@2->assert_sbyte#2] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z assert_sbyte.msg
    lda #>msg2
    sta.z assert_sbyte.msg+1
    jsr assert_sbyte
    // [17] phi from test_sbytes::@2 to test_sbytes::@3 [phi:test_sbytes::@2->test_sbytes::@3]
  __b3_from___b2:
    jmp __b3
    // test_sbytes::@3
  __b3:
    // [18] call assert_sbyte 
    // [22] phi from test_sbytes::@3 to assert_sbyte [phi:test_sbytes::@3->assert_sbyte]
  assert_sbyte_from___b3:
    // [22] phi (signed byte) assert_sbyte::c#5 = (signed byte) 2 [phi:test_sbytes::@3->assert_sbyte#0] -- vbsz1=vbsc1 
    lda #2
    sta.z assert_sbyte.c
    // [22] phi (signed byte) assert_sbyte::b#5 = (const signed byte) test_sbytes::be#0 [phi:test_sbytes::@3->assert_sbyte#1] -- vbsxx=vbsc1 
    ldx #be
    // [22] phi (byte*) assert_sbyte::msg#5 = (const byte*) test_sbytes::msg3 [phi:test_sbytes::@3->assert_sbyte#2] -- pbuz1=pbuc1 
    lda #<msg3
    sta.z assert_sbyte.msg
    lda #>msg3
    sta.z assert_sbyte.msg+1
    jsr assert_sbyte
    // [19] phi from test_sbytes::@3 to test_sbytes::@4 [phi:test_sbytes::@3->test_sbytes::@4]
  __b4_from___b3:
    jmp __b4
    // test_sbytes::@4
  __b4:
    // [20] call assert_sbyte 
    // [22] phi from test_sbytes::@4 to assert_sbyte [phi:test_sbytes::@4->assert_sbyte]
  assert_sbyte_from___b4:
    // [22] phi (signed byte) assert_sbyte::c#5 = (signed byte) 2 [phi:test_sbytes::@4->assert_sbyte#0] -- vbsz1=vbsc1 
    lda #2
    sta.z assert_sbyte.c
    // [22] phi (signed byte) assert_sbyte::b#5 = (const signed byte) test_sbytes::bf [phi:test_sbytes::@4->assert_sbyte#1] -- vbsxx=vbsc1 
    ldx #bf
    // [22] phi (byte*) assert_sbyte::msg#5 = (const byte*) test_sbytes::msg4 [phi:test_sbytes::@4->assert_sbyte#2] -- pbuz1=pbuc1 
    lda #<msg4
    sta.z assert_sbyte.msg
    lda #>msg4
    sta.z assert_sbyte.msg+1
    jsr assert_sbyte
    jmp __breturn
    // test_sbytes::@return
  __breturn:
    // [21] return 
    rts
    msg2: .text "0+2-4=-2"
    .byte 0
    msg3: .text "-(0+2-4)=2"
    .byte 0
    msg4: .text "-127-127=2"
    .byte 0
}
  // assert_sbyte
// assert_sbyte(byte* zp(7) msg, signed byte register(X) b, signed byte zp(6) c)
assert_sbyte: {
    .label msg = 7
    .label c = 6
    // [23] (byte*) print_str::str#5 ← (byte*) assert_sbyte::msg#5
    // [24] (byte*) print_char_cursor#90 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [25] call print_str 
    // [36] phi from assert_sbyte to print_str [phi:assert_sbyte->print_str]
  print_str_from_assert_sbyte:
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#90 [phi:assert_sbyte->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (byte*) print_str::str#5 [phi:assert_sbyte->print_str#1] -- register_copy 
    jsr print_str
    // [26] phi from assert_sbyte to assert_sbyte::@4 [phi:assert_sbyte->assert_sbyte::@4]
  __b4_from_assert_sbyte:
    jmp __b4
    // assert_sbyte::@4
  __b4:
    // [27] call print_str 
    // [36] phi from assert_sbyte::@4 to print_str [phi:assert_sbyte::@4->print_str]
  print_str_from___b4:
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_sbyte::@4->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str [phi:assert_sbyte::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b5
    // assert_sbyte::@5
  __b5:
    // [28] if((signed byte) assert_sbyte::b#5!=(signed byte) assert_sbyte::c#5) goto assert_sbyte::@1 -- vbsxx_neq_vbsz1_then_la1 
    cpx.z c
    bne __b1
    // [29] phi from assert_sbyte::@5 to assert_sbyte::@3 [phi:assert_sbyte::@5->assert_sbyte::@3]
  __b3_from___b5:
    jmp __b3
    // assert_sbyte::@3
  __b3:
    // [30] call print_str 
    // [36] phi from assert_sbyte::@3 to print_str [phi:assert_sbyte::@3->print_str]
  print_str_from___b3:
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_sbyte::@3->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str2 [phi:assert_sbyte::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // [31] phi from assert_sbyte::@1 assert_sbyte::@3 to assert_sbyte::@2 [phi:assert_sbyte::@1/assert_sbyte::@3->assert_sbyte::@2]
  __b2_from___b1:
  __b2_from___b3:
    jmp __b2
    // assert_sbyte::@2
  __b2:
    // [32] call print_ln 
    // [46] phi from assert_sbyte::@2 to print_ln [phi:assert_sbyte::@2->print_ln]
  print_ln_from___b2:
    // [46] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#1 [phi:assert_sbyte::@2->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __breturn
    // assert_sbyte::@return
  __breturn:
    // [33] return 
    rts
    // assert_sbyte::@1
  __b1:
    // [34] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BG_COLOR
    // [35] call print_str 
    // [36] phi from assert_sbyte::@1 to print_str [phi:assert_sbyte::@1->print_str]
  print_str_from___b1:
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_sbyte::@1->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str1 [phi:assert_sbyte::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b2_from___b1
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(7) str)
print_str: {
    .label str = 7
    // [37] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [37] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#85 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [37] phi (byte*) print_str::str#10 = (byte*) print_str::str#12 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [38] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [39] return 
    rts
    // print_str::@2
  __b2:
    // [40] (byte) print_char::ch#0 ← *((byte*) print_str::str#10) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [41] call print_char 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [42] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [43] *((byte*) print_char_cursor#2) ← (byte) print_char::ch#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [44] (byte*) print_char_cursor#41 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [45] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [47] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [47] phi (byte*) print_line_cursor#24 = (byte*) print_line_cursor#47 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [48] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#24 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [49] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#2) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [50] return 
    rts
}
  // test_bytes
// Test different byte constants
test_bytes: {
    .const bb = 0
    .const bc = 2
    .const bd = bc-4
    // [52] call assert_byte 
    // [58] phi from test_bytes to assert_byte [phi:test_bytes->assert_byte]
  assert_byte_from_test_bytes:
    // [58] phi (byte*) print_line_cursor#50 = (byte*) 1024 [phi:test_bytes->assert_byte#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [58] phi (byte) assert_byte::c#3 = (byte) 0 [phi:test_bytes->assert_byte#1] -- vbuz1=vbuc1 
    lda #0
    sta.z assert_byte.c
    // [58] phi (byte) assert_byte::b#3 = (const byte) test_bytes::bb [phi:test_bytes->assert_byte#2] -- vbuxx=vbuc1 
    ldx #bb
    // [58] phi (byte*) print_char_cursor#75 = (byte*) 1024 [phi:test_bytes->assert_byte#3] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [58] phi (byte*) assert_byte::msg#3 = (const byte*) msg [phi:test_bytes->assert_byte#4] -- pbuz1=pbuc1 
    lda #<msg
    sta.z assert_byte.msg
    lda #>msg
    sta.z assert_byte.msg+1
    jsr assert_byte
    jmp __b1
    // test_bytes::@1
  __b1:
    // [53] (byte*) print_char_cursor#96 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [54] call assert_byte 
    // [58] phi from test_bytes::@1 to assert_byte [phi:test_bytes::@1->assert_byte]
  assert_byte_from___b1:
    // [58] phi (byte*) print_line_cursor#50 = (byte*) print_line_cursor#1 [phi:test_bytes::@1->assert_byte#0] -- register_copy 
    // [58] phi (byte) assert_byte::c#3 = (byte) 2 [phi:test_bytes::@1->assert_byte#1] -- vbuz1=vbuc1 
    lda #2
    sta.z assert_byte.c
    // [58] phi (byte) assert_byte::b#3 = (const byte) test_bytes::bc#0 [phi:test_bytes::@1->assert_byte#2] -- vbuxx=vbuc1 
    ldx #bc
    // [58] phi (byte*) print_char_cursor#75 = (byte*) print_char_cursor#96 [phi:test_bytes::@1->assert_byte#3] -- register_copy 
    // [58] phi (byte*) assert_byte::msg#3 = (const byte*) msg1 [phi:test_bytes::@1->assert_byte#4] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z assert_byte.msg
    lda #>msg1
    sta.z assert_byte.msg+1
    jsr assert_byte
    jmp __b2
    // test_bytes::@2
  __b2:
    // [55] (byte*) print_char_cursor#97 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [56] call assert_byte 
    // [58] phi from test_bytes::@2 to assert_byte [phi:test_bytes::@2->assert_byte]
  assert_byte_from___b2:
    // [58] phi (byte*) print_line_cursor#50 = (byte*) print_line_cursor#1 [phi:test_bytes::@2->assert_byte#0] -- register_copy 
    // [58] phi (byte) assert_byte::c#3 = (byte) $fe [phi:test_bytes::@2->assert_byte#1] -- vbuz1=vbuc1 
    lda #$fe
    sta.z assert_byte.c
    // [58] phi (byte) assert_byte::b#3 = (const byte) test_bytes::bd#0 [phi:test_bytes::@2->assert_byte#2] -- vbuxx=vbuc1 
    ldx #bd
    // [58] phi (byte*) print_char_cursor#75 = (byte*) print_char_cursor#97 [phi:test_bytes::@2->assert_byte#3] -- register_copy 
    // [58] phi (byte*) assert_byte::msg#3 = (const byte*) test_bytes::msg2 [phi:test_bytes::@2->assert_byte#4] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z assert_byte.msg
    lda #>msg2
    sta.z assert_byte.msg+1
    jsr assert_byte
    jmp __breturn
    // test_bytes::@return
  __breturn:
    // [57] return 
    rts
    msg2: .text "0+2-4=254"
    .byte 0
}
  // assert_byte
// assert_byte(byte* zp(7) msg, byte register(X) b, byte zp(6) c)
assert_byte: {
    .label msg = 7
    .label c = 6
    // [59] (byte*) print_str::str#1 ← (byte*) assert_byte::msg#3
    // [60] call print_str 
    // [36] phi from assert_byte to print_str [phi:assert_byte->print_str]
  print_str_from_assert_byte:
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#75 [phi:assert_byte->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (byte*) print_str::str#1 [phi:assert_byte->print_str#1] -- register_copy 
    jsr print_str
    // [61] phi from assert_byte to assert_byte::@4 [phi:assert_byte->assert_byte::@4]
  __b4_from_assert_byte:
    jmp __b4
    // assert_byte::@4
  __b4:
    // [62] call print_str 
    // [36] phi from assert_byte::@4 to print_str [phi:assert_byte::@4->print_str]
  print_str_from___b4:
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_byte::@4->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str [phi:assert_byte::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b5
    // assert_byte::@5
  __b5:
    // [63] if((byte) assert_byte::b#3!=(byte) assert_byte::c#3) goto assert_byte::@1 -- vbuxx_neq_vbuz1_then_la1 
    cpx.z c
    bne __b1
    // [64] phi from assert_byte::@5 to assert_byte::@3 [phi:assert_byte::@5->assert_byte::@3]
  __b3_from___b5:
    jmp __b3
    // assert_byte::@3
  __b3:
    // [65] call print_str 
    // [36] phi from assert_byte::@3 to print_str [phi:assert_byte::@3->print_str]
  print_str_from___b3:
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_byte::@3->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str2 [phi:assert_byte::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // [66] phi from assert_byte::@1 assert_byte::@3 to assert_byte::@2 [phi:assert_byte::@1/assert_byte::@3->assert_byte::@2]
  __b2_from___b1:
  __b2_from___b3:
    jmp __b2
    // assert_byte::@2
  __b2:
    // [67] call print_ln 
    // [46] phi from assert_byte::@2 to print_ln [phi:assert_byte::@2->print_ln]
  print_ln_from___b2:
    // [46] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#50 [phi:assert_byte::@2->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __breturn
    // assert_byte::@return
  __breturn:
    // [68] return 
    rts
    // assert_byte::@1
  __b1:
    // [69] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BG_COLOR
    // [70] call print_str 
    // [36] phi from assert_byte::@1 to print_str [phi:assert_byte::@1->print_str]
  print_str_from___b1:
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_byte::@1->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str1 [phi:assert_byte::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b2_from___b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [72] call memset 
    // [74] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [73] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = 7
    // [75] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [75] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [76] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [77] return 
    rts
    // memset::@2
  __b2:
    // [78] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [79] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [75] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [75] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  msg: .text "0=0"
  .byte 0
  msg1: .text "0+2=2"
  .byte 0
  str: .text " "
  .byte 0
  str1: .text "fail!"
  .byte 0
  str2: .text "ok"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b2_from___b1 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b1 with __b2
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b2_from___b1:
Removing instruction test_sbytes_from___b2:
Removing instruction __b1_from_test_sbytes:
Removing instruction assert_sbyte_from___b1:
Removing instruction __b2_from___b1:
Removing instruction assert_sbyte_from___b2:
Removing instruction __b3_from___b2:
Removing instruction assert_sbyte_from___b3:
Removing instruction __b4_from___b3:
Removing instruction assert_sbyte_from___b4:
Removing instruction __b4_from_assert_sbyte:
Removing instruction print_str_from___b4:
Removing instruction __b3_from___b5:
Removing instruction print_str_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction print_ln_from___b2:
Removing instruction __b1_from_print_str:
Removing instruction __b1_from___b3:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __b4_from_assert_byte:
Removing instruction print_str_from___b4:
Removing instruction __b3_from___b5:
Removing instruction print_str_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction print_ln_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction print_cls_from_main:
Removing instruction __b1:
Removing instruction test_bytes_from___b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction assert_sbyte_from_test_sbytes:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction print_str_from_assert_sbyte:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction print_str_from___b1:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction assert_byte_from_test_bytes:
Removing instruction __b1:
Removing instruction assert_byte_from___b1:
Removing instruction __b2:
Removing instruction assert_byte_from___b2:
Removing instruction __breturn:
Removing instruction print_str_from_assert_byte:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction print_str_from___b1:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const nomodify byte*) BG_COLOR = (byte*) 53281
(const nomodify byte) GREEN = (byte) 5
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const nomodify byte) RED = (byte) 2
(void()) assert_byte((byte*) assert_byte::msg , (byte) assert_byte::b , (byte) assert_byte::c)
(label) assert_byte::@1
(label) assert_byte::@2
(label) assert_byte::@3
(label) assert_byte::@4
(label) assert_byte::@5
(label) assert_byte::@return
(byte) assert_byte::b
(byte) assert_byte::b#3 reg byte x 200.2
(byte) assert_byte::c
(byte) assert_byte::c#3 c zp[1]:6 200.2
(byte*) assert_byte::msg
(byte*) assert_byte::msg#3 msg zp[2]:7 1001.0
(void()) assert_sbyte((byte*) assert_sbyte::msg , (signed byte) assert_sbyte::b , (signed byte) assert_sbyte::c)
(label) assert_sbyte::@1
(label) assert_sbyte::@2
(label) assert_sbyte::@3
(label) assert_sbyte::@4
(label) assert_sbyte::@5
(label) assert_sbyte::@return
(signed byte) assert_sbyte::b
(signed byte) assert_sbyte::b#5 reg byte x 166.83333333333334
(signed byte) assert_sbyte::c
(signed byte) assert_sbyte::c#5 c zp[1]:6 166.83333333333334
(byte*) assert_sbyte::msg
(byte*) assert_sbyte::msg#5 msg zp[2]:7 1001.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:7 20002.0
(byte*) memset::dst#2 dst zp[2]:7 13334.666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(byte*) 1024
(const byte*) msg[(byte) 4]  = (byte*) "0=0"
(const byte*) msg1[(byte) 6]  = (byte*) "0+2=2"
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 1100002.0
(byte*) print_char_cursor
(byte*) print_char_cursor#2 print_char_cursor zp[2]:2 82074.48148148147
(byte*) print_char_cursor#41 print_char_cursor zp[2]:2 275000.5
(byte*) print_char_cursor#75 print_char_cursor zp[2]:2 601.5
(byte*) print_char_cursor#85 print_char_cursor zp[2]:2 18009.0
(byte*) print_char_cursor#90 print_char_cursor zp[2]:2 2002.0
(byte*) print_char_cursor#96 print_char_cursor zp[2]:2 202.0
(byte*) print_char_cursor#97 print_char_cursor zp[2]:2 202.0
(void()) print_cls()
(label) print_cls::@return
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp[2]:4 8400.249999999996
(byte*) print_line_cursor#24 print_line_cursor zp[2]:4 210003.0
(byte*) print_line_cursor#47 print_line_cursor zp[2]:4 12003.0
(byte*) print_line_cursor#50 print_line_cursor zp[2]:4 109.36363636363637
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:7 200002.0
(byte*) print_str::str#1 str zp[2]:7 2002.0
(byte*) print_str::str#10 str zp[2]:7 102501.25
(byte*) print_str::str#12 str zp[2]:7 12003.0
(byte*) print_str::str#5 str zp[2]:7 1001.0
(const byte*) str[(byte) 2]  = (byte*) " "
(const byte*) str1[(byte) 6]  = (byte*) "fail!"
(const byte*) str2[(byte) 3]  = (byte*) "ok"
(void()) test_bytes()
(label) test_bytes::@1
(label) test_bytes::@2
(label) test_bytes::@return
(const byte) test_bytes::bb = (byte) 0
(byte) test_bytes::bc
(const byte) test_bytes::bc#0 bc = (byte) 2
(byte) test_bytes::bd
(const byte) test_bytes::bd#0 bd = (byte)(signed byte)(const byte) test_bytes::bc#0-(signed byte) 4
(const byte*) test_bytes::msg2[(byte) $a]  = (byte*) "0+2-4=254"
(void()) test_sbytes()
(label) test_sbytes::@1
(label) test_sbytes::@2
(label) test_sbytes::@3
(label) test_sbytes::@4
(label) test_sbytes::@return
(const signed byte) test_sbytes::bb = (signed byte) 0
(signed byte) test_sbytes::bc
(const signed byte) test_sbytes::bc#0 bc = (signed byte) 2
(signed byte) test_sbytes::bd
(const signed byte) test_sbytes::bd#0 bd = (const signed byte) test_sbytes::bc#0-(signed byte) 4
(signed byte) test_sbytes::be
(const signed byte) test_sbytes::be#0 be = -(const signed byte) test_sbytes::bd#0
(const signed byte) test_sbytes::bf = (signed byte)(number) -$7f-(number) $7f
(const byte*) test_sbytes::msg2[(byte) 9]  = (byte*) "0+2-4=-2"
(const byte*) test_sbytes::msg3[(byte) $b]  = (byte*) "-(0+2-4)=2"
(const byte*) test_sbytes::msg4[(byte) $b]  = (byte*) "-127-127=2"

reg byte x [ assert_sbyte::b#5 ]
zp[2]:2 [ print_char_cursor#85 print_char_cursor#75 print_char_cursor#2 print_char_cursor#90 print_char_cursor#41 print_char_cursor#96 print_char_cursor#97 ]
zp[2]:4 [ print_line_cursor#24 print_line_cursor#47 print_line_cursor#50 print_line_cursor#1 ]
reg byte x [ assert_byte::b#3 ]
zp[1]:6 [ assert_byte::c#3 assert_sbyte::c#5 ]
zp[2]:7 [ memset::dst#2 memset::dst#1 assert_sbyte::msg#5 print_str::str#10 print_str::str#12 print_str::str#1 print_str::str#5 print_str::str#0 assert_byte::msg#3 ]
reg byte a [ print_char::ch#0 ]


FINAL ASSEMBLER
Score: 1783

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const GREEN = 5
  .const RED = 2
  .label BG_COLOR = $d021
  .label print_char_cursor = 2
  .label print_line_cursor = 4
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // print_cls()
    // [5] call print_cls 
    // [71] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
    // main::@1
    // *BG_COLOR = GREEN
    // [6] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) GREEN -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BG_COLOR
    // test_bytes()
    // [7] call test_bytes 
    // [51] phi from main::@1 to test_bytes [phi:main::@1->test_bytes]
    jsr test_bytes
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // test_sbytes()
    // [9] call test_sbytes 
    // [11] phi from main::@2 to test_sbytes [phi:main::@2->test_sbytes]
    jsr test_sbytes
    // main::@return
    // }
    // [10] return 
    rts
}
  // test_sbytes
// Test different signed byte constants
test_sbytes: {
    .const bb = 0
    .const bf = $ff&-$7f-$7f
    .const bc = 2
    .const bd = bc-4
    .const be = -bd
    // assert_sbyte("0=0", bb, 0)
    // [12] call assert_sbyte 
    // [22] phi from test_sbytes to assert_sbyte [phi:test_sbytes->assert_sbyte]
    // [22] phi (signed byte) assert_sbyte::c#5 = (signed byte) 0 [phi:test_sbytes->assert_sbyte#0] -- vbsz1=vbsc1 
    lda #0
    sta.z assert_sbyte.c
    // [22] phi (signed byte) assert_sbyte::b#5 = (const signed byte) test_sbytes::bb [phi:test_sbytes->assert_sbyte#1] -- vbsxx=vbsc1 
    ldx #bb
    // [22] phi (byte*) assert_sbyte::msg#5 = (const byte*) msg [phi:test_sbytes->assert_sbyte#2] -- pbuz1=pbuc1 
    lda #<msg
    sta.z assert_sbyte.msg
    lda #>msg
    sta.z assert_sbyte.msg+1
    jsr assert_sbyte
    // [13] phi from test_sbytes to test_sbytes::@1 [phi:test_sbytes->test_sbytes::@1]
    // test_sbytes::@1
    // assert_sbyte("0+2=2", bc, 2)
    // [14] call assert_sbyte 
    // [22] phi from test_sbytes::@1 to assert_sbyte [phi:test_sbytes::@1->assert_sbyte]
    // [22] phi (signed byte) assert_sbyte::c#5 = (signed byte) 2 [phi:test_sbytes::@1->assert_sbyte#0] -- vbsz1=vbsc1 
    lda #2
    sta.z assert_sbyte.c
    // [22] phi (signed byte) assert_sbyte::b#5 = (const signed byte) test_sbytes::bc#0 [phi:test_sbytes::@1->assert_sbyte#1] -- vbsxx=vbsc1 
    ldx #bc
    // [22] phi (byte*) assert_sbyte::msg#5 = (const byte*) msg1 [phi:test_sbytes::@1->assert_sbyte#2] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z assert_sbyte.msg
    lda #>msg1
    sta.z assert_sbyte.msg+1
    jsr assert_sbyte
    // [15] phi from test_sbytes::@1 to test_sbytes::@2 [phi:test_sbytes::@1->test_sbytes::@2]
    // test_sbytes::@2
    // assert_sbyte("0+2-4=-2", bd, -2)
    // [16] call assert_sbyte 
    // [22] phi from test_sbytes::@2 to assert_sbyte [phi:test_sbytes::@2->assert_sbyte]
    // [22] phi (signed byte) assert_sbyte::c#5 = (signed byte) -2 [phi:test_sbytes::@2->assert_sbyte#0] -- vbsz1=vbsc1 
    lda #-2
    sta.z assert_sbyte.c
    // [22] phi (signed byte) assert_sbyte::b#5 = (const signed byte) test_sbytes::bd#0 [phi:test_sbytes::@2->assert_sbyte#1] -- vbsxx=vbsc1 
    ldx #bd
    // [22] phi (byte*) assert_sbyte::msg#5 = (const byte*) test_sbytes::msg2 [phi:test_sbytes::@2->assert_sbyte#2] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z assert_sbyte.msg
    lda #>msg2
    sta.z assert_sbyte.msg+1
    jsr assert_sbyte
    // [17] phi from test_sbytes::@2 to test_sbytes::@3 [phi:test_sbytes::@2->test_sbytes::@3]
    // test_sbytes::@3
    // assert_sbyte("-(0+2-4)=2", be, 2)
    // [18] call assert_sbyte 
    // [22] phi from test_sbytes::@3 to assert_sbyte [phi:test_sbytes::@3->assert_sbyte]
    // [22] phi (signed byte) assert_sbyte::c#5 = (signed byte) 2 [phi:test_sbytes::@3->assert_sbyte#0] -- vbsz1=vbsc1 
    lda #2
    sta.z assert_sbyte.c
    // [22] phi (signed byte) assert_sbyte::b#5 = (const signed byte) test_sbytes::be#0 [phi:test_sbytes::@3->assert_sbyte#1] -- vbsxx=vbsc1 
    ldx #be
    // [22] phi (byte*) assert_sbyte::msg#5 = (const byte*) test_sbytes::msg3 [phi:test_sbytes::@3->assert_sbyte#2] -- pbuz1=pbuc1 
    lda #<msg3
    sta.z assert_sbyte.msg
    lda #>msg3
    sta.z assert_sbyte.msg+1
    jsr assert_sbyte
    // [19] phi from test_sbytes::@3 to test_sbytes::@4 [phi:test_sbytes::@3->test_sbytes::@4]
    // test_sbytes::@4
    // assert_sbyte("-127-127=2", bf, 2)
    // [20] call assert_sbyte 
    // [22] phi from test_sbytes::@4 to assert_sbyte [phi:test_sbytes::@4->assert_sbyte]
    // [22] phi (signed byte) assert_sbyte::c#5 = (signed byte) 2 [phi:test_sbytes::@4->assert_sbyte#0] -- vbsz1=vbsc1 
    lda #2
    sta.z assert_sbyte.c
    // [22] phi (signed byte) assert_sbyte::b#5 = (const signed byte) test_sbytes::bf [phi:test_sbytes::@4->assert_sbyte#1] -- vbsxx=vbsc1 
    ldx #bf
    // [22] phi (byte*) assert_sbyte::msg#5 = (const byte*) test_sbytes::msg4 [phi:test_sbytes::@4->assert_sbyte#2] -- pbuz1=pbuc1 
    lda #<msg4
    sta.z assert_sbyte.msg
    lda #>msg4
    sta.z assert_sbyte.msg+1
    jsr assert_sbyte
    // test_sbytes::@return
    // }
    // [21] return 
    rts
    msg2: .text "0+2-4=-2"
    .byte 0
    msg3: .text "-(0+2-4)=2"
    .byte 0
    msg4: .text "-127-127=2"
    .byte 0
}
  // assert_sbyte
// assert_sbyte(byte* zp(7) msg, signed byte register(X) b, signed byte zp(6) c)
assert_sbyte: {
    .label msg = 7
    .label c = 6
    // print_str(msg)
    // [23] (byte*) print_str::str#5 ← (byte*) assert_sbyte::msg#5
    // [24] (byte*) print_char_cursor#90 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_str(msg)
    // [25] call print_str 
    // [36] phi from assert_sbyte to print_str [phi:assert_sbyte->print_str]
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#90 [phi:assert_sbyte->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (byte*) print_str::str#5 [phi:assert_sbyte->print_str#1] -- register_copy 
    jsr print_str
    // [26] phi from assert_sbyte to assert_sbyte::@4 [phi:assert_sbyte->assert_sbyte::@4]
    // assert_sbyte::@4
    // print_str(" ")
    // [27] call print_str 
    // [36] phi from assert_sbyte::@4 to print_str [phi:assert_sbyte::@4->print_str]
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_sbyte::@4->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str [phi:assert_sbyte::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // assert_sbyte::@5
    // if(b!=c)
    // [28] if((signed byte) assert_sbyte::b#5!=(signed byte) assert_sbyte::c#5) goto assert_sbyte::@1 -- vbsxx_neq_vbsz1_then_la1 
    cpx.z c
    bne __b1
    // [29] phi from assert_sbyte::@5 to assert_sbyte::@3 [phi:assert_sbyte::@5->assert_sbyte::@3]
    // assert_sbyte::@3
    // print_str("ok")
    // [30] call print_str 
    // [36] phi from assert_sbyte::@3 to print_str [phi:assert_sbyte::@3->print_str]
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_sbyte::@3->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str2 [phi:assert_sbyte::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // [31] phi from assert_sbyte::@1 assert_sbyte::@3 to assert_sbyte::@2 [phi:assert_sbyte::@1/assert_sbyte::@3->assert_sbyte::@2]
    // assert_sbyte::@2
  __b2:
    // print_ln()
    // [32] call print_ln 
    // [46] phi from assert_sbyte::@2 to print_ln [phi:assert_sbyte::@2->print_ln]
    // [46] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#1 [phi:assert_sbyte::@2->print_ln#0] -- register_copy 
    jsr print_ln
    // assert_sbyte::@return
    // }
    // [33] return 
    rts
    // assert_sbyte::@1
  __b1:
    // *BG_COLOR = RED
    // [34] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BG_COLOR
    // print_str("fail!")
    // [35] call print_str 
    // [36] phi from assert_sbyte::@1 to print_str [phi:assert_sbyte::@1->print_str]
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_sbyte::@1->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str1 [phi:assert_sbyte::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b2
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(7) str)
print_str: {
    .label str = 7
    // [37] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
    // [37] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#85 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [37] phi (byte*) print_str::str#10 = (byte*) print_str::str#12 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    // print_str::@1
  __b1:
    // while(*str)
    // [38] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [39] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [40] (byte) print_char::ch#0 ← *((byte*) print_str::str#10) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [41] call print_char 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [42] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [43] *((byte*) print_char_cursor#2) ← (byte) print_char::ch#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [44] (byte*) print_char_cursor#41 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [45] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [47] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [47] phi (byte*) print_line_cursor#24 = (byte*) print_line_cursor#47 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [48] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#24 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [49] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#2) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [50] return 
    rts
}
  // test_bytes
// Test different byte constants
test_bytes: {
    .const bb = 0
    .const bc = 2
    .const bd = bc-4
    // assert_byte("0=0", bb, 0)
    // [52] call assert_byte 
    // [58] phi from test_bytes to assert_byte [phi:test_bytes->assert_byte]
    // [58] phi (byte*) print_line_cursor#50 = (byte*) 1024 [phi:test_bytes->assert_byte#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [58] phi (byte) assert_byte::c#3 = (byte) 0 [phi:test_bytes->assert_byte#1] -- vbuz1=vbuc1 
    lda #0
    sta.z assert_byte.c
    // [58] phi (byte) assert_byte::b#3 = (const byte) test_bytes::bb [phi:test_bytes->assert_byte#2] -- vbuxx=vbuc1 
    ldx #bb
    // [58] phi (byte*) print_char_cursor#75 = (byte*) 1024 [phi:test_bytes->assert_byte#3] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [58] phi (byte*) assert_byte::msg#3 = (const byte*) msg [phi:test_bytes->assert_byte#4] -- pbuz1=pbuc1 
    lda #<msg
    sta.z assert_byte.msg
    lda #>msg
    sta.z assert_byte.msg+1
    jsr assert_byte
    // test_bytes::@1
    // [53] (byte*) print_char_cursor#96 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // assert_byte("0+2=2", bc, 2)
    // [54] call assert_byte 
    // [58] phi from test_bytes::@1 to assert_byte [phi:test_bytes::@1->assert_byte]
    // [58] phi (byte*) print_line_cursor#50 = (byte*) print_line_cursor#1 [phi:test_bytes::@1->assert_byte#0] -- register_copy 
    // [58] phi (byte) assert_byte::c#3 = (byte) 2 [phi:test_bytes::@1->assert_byte#1] -- vbuz1=vbuc1 
    lda #2
    sta.z assert_byte.c
    // [58] phi (byte) assert_byte::b#3 = (const byte) test_bytes::bc#0 [phi:test_bytes::@1->assert_byte#2] -- vbuxx=vbuc1 
    ldx #bc
    // [58] phi (byte*) print_char_cursor#75 = (byte*) print_char_cursor#96 [phi:test_bytes::@1->assert_byte#3] -- register_copy 
    // [58] phi (byte*) assert_byte::msg#3 = (const byte*) msg1 [phi:test_bytes::@1->assert_byte#4] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z assert_byte.msg
    lda #>msg1
    sta.z assert_byte.msg+1
    jsr assert_byte
    // test_bytes::@2
    // [55] (byte*) print_char_cursor#97 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // assert_byte("0+2-4=254", bd, 254)
    // [56] call assert_byte 
    // [58] phi from test_bytes::@2 to assert_byte [phi:test_bytes::@2->assert_byte]
    // [58] phi (byte*) print_line_cursor#50 = (byte*) print_line_cursor#1 [phi:test_bytes::@2->assert_byte#0] -- register_copy 
    // [58] phi (byte) assert_byte::c#3 = (byte) $fe [phi:test_bytes::@2->assert_byte#1] -- vbuz1=vbuc1 
    lda #$fe
    sta.z assert_byte.c
    // [58] phi (byte) assert_byte::b#3 = (const byte) test_bytes::bd#0 [phi:test_bytes::@2->assert_byte#2] -- vbuxx=vbuc1 
    ldx #bd
    // [58] phi (byte*) print_char_cursor#75 = (byte*) print_char_cursor#97 [phi:test_bytes::@2->assert_byte#3] -- register_copy 
    // [58] phi (byte*) assert_byte::msg#3 = (const byte*) test_bytes::msg2 [phi:test_bytes::@2->assert_byte#4] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z assert_byte.msg
    lda #>msg2
    sta.z assert_byte.msg+1
    jsr assert_byte
    // test_bytes::@return
    // }
    // [57] return 
    rts
    msg2: .text "0+2-4=254"
    .byte 0
}
  // assert_byte
// assert_byte(byte* zp(7) msg, byte register(X) b, byte zp(6) c)
assert_byte: {
    .label msg = 7
    .label c = 6
    // print_str(msg)
    // [59] (byte*) print_str::str#1 ← (byte*) assert_byte::msg#3
    // [60] call print_str 
    // [36] phi from assert_byte to print_str [phi:assert_byte->print_str]
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#75 [phi:assert_byte->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (byte*) print_str::str#1 [phi:assert_byte->print_str#1] -- register_copy 
    jsr print_str
    // [61] phi from assert_byte to assert_byte::@4 [phi:assert_byte->assert_byte::@4]
    // assert_byte::@4
    // print_str(" ")
    // [62] call print_str 
    // [36] phi from assert_byte::@4 to print_str [phi:assert_byte::@4->print_str]
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_byte::@4->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str [phi:assert_byte::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // assert_byte::@5
    // if(b!=c)
    // [63] if((byte) assert_byte::b#3!=(byte) assert_byte::c#3) goto assert_byte::@1 -- vbuxx_neq_vbuz1_then_la1 
    cpx.z c
    bne __b1
    // [64] phi from assert_byte::@5 to assert_byte::@3 [phi:assert_byte::@5->assert_byte::@3]
    // assert_byte::@3
    // print_str("ok")
    // [65] call print_str 
    // [36] phi from assert_byte::@3 to print_str [phi:assert_byte::@3->print_str]
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_byte::@3->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str2 [phi:assert_byte::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // [66] phi from assert_byte::@1 assert_byte::@3 to assert_byte::@2 [phi:assert_byte::@1/assert_byte::@3->assert_byte::@2]
    // assert_byte::@2
  __b2:
    // print_ln()
    // [67] call print_ln 
    // [46] phi from assert_byte::@2 to print_ln [phi:assert_byte::@2->print_ln]
    // [46] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#50 [phi:assert_byte::@2->print_ln#0] -- register_copy 
    jsr print_ln
    // assert_byte::@return
    // }
    // [68] return 
    rts
    // assert_byte::@1
  __b1:
    // *BG_COLOR = RED
    // [69] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BG_COLOR
    // print_str("fail!")
    // [70] call print_str 
    // [36] phi from assert_byte::@1 to print_str [phi:assert_byte::@1->print_str]
    // [36] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#2 [phi:assert_byte::@1->print_str#0] -- register_copy 
    // [36] phi (byte*) print_str::str#12 = (const byte*) str1 [phi:assert_byte::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b2
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [72] call memset 
    // [74] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [73] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = 7
    // [75] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [75] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [76] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [77] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [78] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [79] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [75] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [75] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  msg: .text "0=0"
  .byte 0
  msg1: .text "0+2=2"
  .byte 0
  str: .text " "
  .byte 0
  str1: .text "fail!"
  .byte 0
  str2: .text "ok"
  .byte 0

