Adding pointer type conversion cast (byte*) main::SCREEN in (byte*) main::SCREEN ← (number) $400

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (struct Point) point#0 ← {}
  to:@1
main: scope:[main]  from @1
  (struct Point) point#1 ← phi( @1/(struct Point) point#2 )
  (struct Point) point#1.x ← (number) 2
  (struct Point) point#1.y ← (number) 3
  (byte*) main::SCREEN#0 ← ((byte*)) (number) $400
  *((byte*) main::SCREEN#0 + (number) 0) ← (struct Point) point#1.x
  *((byte*) main::SCREEN#0 + (number) 1) ← (struct Point) point#1.y
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  (struct Point) point#2 ← phi( @begin/(struct Point) point#0 )
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte) Point::x
(byte) Point::y
(void()) main()
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(struct Point) point
(struct Point) point#0
(struct Point) point#1
(struct Point) point#2

Adding number conversion cast (unumber) 2 in (struct Point) point#1.x ← (number) 2
Adding number conversion cast (unumber) 3 in (struct Point) point#1.y ← (number) 3
Adding number conversion cast (unumber) 0 in *((byte*) main::SCREEN#0 + (number) 0) ← (struct Point) point#1.x
Adding number conversion cast (unumber) 1 in *((byte*) main::SCREEN#0 + (number) 1) ← (struct Point) point#1.y
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (struct Point) point#1.x ← (unumber)(number) 2
Inlining cast (struct Point) point#1.y ← (unumber)(number) 3
Inlining cast (byte*) main::SCREEN#0 ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (struct Point) point#0 = (struct Point) point#2 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (struct Point) point#1 (struct Point) point#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte*) main::SCREEN#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::SCREEN#0 in [5] *((const byte*) main::SCREEN#0 + (byte) 0) ← (struct Point) point#0.x
Successful SSA optimization PassNSimplifyExpressionWithZero
Consolidated array index constant in *(main::SCREEN#0+1)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] (struct Point) point#0 ← {}
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] (struct Point) point#0.x ← (byte) 2
  [5] (struct Point) point#0.y ← (byte) 3
  [6] *((const byte*) main::SCREEN#0) ← (struct Point) point#0.x
  [7] *((const byte*) main::SCREEN#0+(byte) 1) ← (struct Point) point#0.y
  to:main::@return
main::@return: scope:[main]  from main
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) Point::x
(byte) Point::y
(void()) main()
(byte*) main::SCREEN
(struct Point) point
(struct Point) point#0 0.4

Initial phi equivalence classes
Complete equivalence classes
[ point#0 ]
Allocated zp ZP_STRUCT:2 [ point#0 ]

INITIAL ASM
//SEG0 File Comments
// Minimal struct - declaration, instantiation and usage
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label point = 2
//SEG3 @begin
bbegin:
//SEG4 [0] (struct Point) point#0 ← {} -- vssz1=vssf2 
  lda #0
  sta point
  sta point+1
//SEG5 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG6 @1
b1:
//SEG7 [2] call main 
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label SCREEN = $400
  //SEG11 [4] (struct Point) point#0.x ← (byte) 2 -- vbuz1=vbuc1 
    lda #2
    sta point+0
  //SEG12 [5] (struct Point) point#0.y ← (byte) 3 -- vbuz1=vbuc1 
    lda #3
    sta point+1
  //SEG13 [6] *((const byte*) main::SCREEN#0) ← (struct Point) point#0.x -- _deref_pbuc1=vbuz1 
    lda point+0
    sta SCREEN
  //SEG14 [7] *((const byte*) main::SCREEN#0+(byte) 1) ← (struct Point) point#0.y -- _deref_pbuc1=vbuz1 
    lda point+1
    sta SCREEN+1
    jmp breturn
  //SEG15 main::@return
  breturn:
  //SEG16 [8] return 
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] (struct Point) point#0 ← {} [ point#0 ] ( ) always clobbers reg byte a 
Statement [4] (struct Point) point#0.x ← (byte) 2 [ point#0 ] ( main:2 [ point#0 ] ) always clobbers reg byte a 
Statement [5] (struct Point) point#0.y ← (byte) 3 [ point#0 ] ( main:2 [ point#0 ] ) always clobbers reg byte a 
Statement [6] *((const byte*) main::SCREEN#0) ← (struct Point) point#0.x [ point#0 ] ( main:2 [ point#0 ] ) always clobbers reg byte a 
Statement [7] *((const byte*) main::SCREEN#0+(byte) 1) ← (struct Point) point#0.y [ ] ( main:2 [ ] ) always clobbers reg byte a 
Potential registers zp ZP_STRUCT:2 [ point#0 ] : zp ZP_STRUCT:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 0.4: zp ZP_STRUCT:2 [ point#0 ] 
Uplift Scope [Point] 
Uplift Scope [main] 

Uplifting [] best 53 combination zp ZP_STRUCT:2 [ point#0 ] 
Uplifting [Point] best 53 combination 
Uplifting [main] best 53 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Minimal struct - declaration, instantiation and usage
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label point = 2
//SEG3 @begin
bbegin:
//SEG4 [0] (struct Point) point#0 ← {} -- vssz1=vssf2 
  lda #0
  sta point
  sta point+1
//SEG5 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG6 @1
b1:
//SEG7 [2] call main 
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label SCREEN = $400
  //SEG11 [4] (struct Point) point#0.x ← (byte) 2 -- vbuz1=vbuc1 
    lda #2
    sta point+0
  //SEG12 [5] (struct Point) point#0.y ← (byte) 3 -- vbuz1=vbuc1 
    lda #3
    sta point+1
  //SEG13 [6] *((const byte*) main::SCREEN#0) ← (struct Point) point#0.x -- _deref_pbuc1=vbuz1 
    lda point+0
    sta SCREEN
  //SEG14 [7] *((const byte*) main::SCREEN#0+(byte) 1) ← (struct Point) point#0.y -- _deref_pbuc1=vbuz1 
    lda point+1
    sta SCREEN+1
    jmp breturn
  //SEG15 main::@return
  breturn:
  //SEG16 [8] return 
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b1:
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte) Point::x
(byte) Point::y
(void()) main()
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = (byte*) 1024
(struct Point) point
(struct Point) point#0 point zp ZP_STRUCT:2 0.4

zp ZP_STRUCT:2 [ point#0 ]


FINAL ASSEMBLER
Score: 50

//SEG0 File Comments
// Minimal struct - declaration, instantiation and usage
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label point = 2
//SEG3 @begin
bbegin:
//SEG4 [0] (struct Point) point#0 ← {} -- vssz1=vssf2 
  lda #0
  sta point
  sta point+1
//SEG5 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG6 @1
//SEG7 [2] call main 
  jsr main
  rts
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
    .label SCREEN = $400
  //SEG11 [4] (struct Point) point#0.x ← (byte) 2 -- vbuz1=vbuc1 
    lda #2
    sta point+0
  //SEG12 [5] (struct Point) point#0.y ← (byte) 3 -- vbuz1=vbuc1 
    lda #3
    sta point+1
  //SEG13 [6] *((const byte*) main::SCREEN#0) ← (struct Point) point#0.x -- _deref_pbuc1=vbuz1 
    lda point+0
    sta SCREEN
  //SEG14 [7] *((const byte*) main::SCREEN#0+(byte) 1) ← (struct Point) point#0.y -- _deref_pbuc1=vbuz1 
    lda point+1
    sta SCREEN+1
  //SEG15 main::@return
  //SEG16 [8] return 
    rts
}

