
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] sin_idx = 0
  [2] scroll_soft = 7
  [3] scroll_ptr = SCROLL_TEXT
  [4] greet_zoomx = 0
  [5] greet_idx = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

interrupt(HARDWARE_STACK) void irq()
irq: scope:[irq]  from
  [9] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) = *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) | $80
  [10] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) = IRQ_RASTER
  [11] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) = 0
  [12] sin_idx = ++ sin_idx
  [13] irq::wobble_idx#0 = sin_idx
  to:irq::@1
irq::@1: scope:[irq]  from irq irq::@9
  [14] irq::wobble_idx#10 = phi( irq/irq::wobble_idx#0, irq::@9/irq::wobble_idx#7 )
  [14] irq::line#10 = phi( irq/0, irq::@9/irq::line#1 )
  [15] if(irq::line#10!=RASTER_LINES) goto irq::@2
  to:irq::@3
irq::@3: scope:[irq]  from irq::@1
  [16] call *songPlay 
  [17] irq::sin_col#0 = sin_idx
  to:irq::@16
irq::@16: scope:[irq]  from irq::@17 irq::@3
  [18] irq::sin_col#2 = phi( irq::@17/irq::sin_col#1, irq::@3/irq::sin_col#0 )
  [18] irq::i#2 = phi( irq::@17/irq::i#1, irq::@3/0 )
  [19] if(irq::i#2<$28) goto irq::@17
  to:irq::@18
irq::@18: scope:[irq]  from irq::@16 irq::@19
  [20] irq::l#2 = phi( irq::@16/0, irq::@19/irq::l#1 )
  [21] if(irq::l#2!=RASTER_LINES) goto irq::@19
  to:irq::@20
irq::@20: scope:[irq]  from irq::@18
  [22] irq::sin_bar#0 = sin_idx
  to:irq::@21
irq::@21: scope:[irq]  from irq::@20 irq::@27
  [23] irq::sin_bar#2 = phi( irq::@20/irq::sin_bar#0, irq::@27/irq::sin_bar#1 )
  [23] irq::barcnt#2 = phi( irq::@20/0, irq::@27/irq::barcnt#1 )
  [24] if(irq::barcnt#2<$10) goto irq::@22
  to:irq::@28
irq::@28: scope:[irq]  from irq::@21 irq::@29
  [25] irq::i3#2 = phi( irq::@21/0, irq::@29/irq::i3#1 )
  [26] if(irq::i3#2<$13) goto irq::@29
  to:irq::@30
irq::@30: scope:[irq]  from irq::@28
  [27] irq::greet_offset#0 = greet_idx << 4
  to:irq::@31
irq::@31: scope:[irq]  from irq::@30 irq::@32
  [28] irq::greet_offset#2 = phi( irq::@30/irq::greet_offset#0, irq::@32/irq::greet_offset#1 )
  [28] irq::i4#2 = phi( irq::@30/0, irq::@32/irq::i4#1 )
  [29] if(irq::i4#2<$10) goto irq::@32
  to:irq::@33
irq::@33: scope:[irq]  from irq::@31
  [30] scroll_soft = -- scroll_soft
  [31] if(scroll_soft!=$ff) goto irq::@return
  to:irq::@34
irq::@34: scope:[irq]  from irq::@33
  [32] scroll_soft = 7
  to:irq::@35
irq::@35: scope:[irq]  from irq::@34 irq::@36
  [33] irq::i5#2 = phi( irq::@34/0, irq::@36/irq::i5#1 )
  [34] if(irq::i5#2<$27) goto irq::@36
  to:irq::@37
irq::@37: scope:[irq]  from irq::@35
  [35] irq::nxt#0 = *scroll_ptr
  [36] scroll_ptr = ++ scroll_ptr
  [37] if(irq::nxt#0!=0) goto irq::@39
  to:irq::@38
irq::@38: scope:[irq]  from irq::@37
  [38] scroll_ptr = SCROLL_TEXT
  [39] irq::nxt#1 = *scroll_ptr
  to:irq::@39
irq::@39: scope:[irq]  from irq::@37 irq::@38
  [40] irq::nxt#2 = phi( irq::@37/irq::nxt#0, irq::@38/irq::nxt#1 )
  [41] irq::$33 = irq::nxt#2 & $bf
  [42] *(DEFAULT_SCREEN+SCROLL_ROW*$28+$27) = irq::$33
  to:irq::@return
irq::@return: scope:[irq]  from irq::@33 irq::@39
  [43] return 
  to:@return
irq::@36: scope:[irq]  from irq::@35
  [44] (DEFAULT_SCREEN+SCROLL_ROW*$28)[irq::i5#2] = (DEFAULT_SCREEN+SCROLL_ROW*$28+1)[irq::i5#2]
  [45] irq::i5#1 = ++ irq::i5#2
  to:irq::@35
irq::@32: scope:[irq]  from irq::@31
  [46] irq::$29 = GREETING[irq::greet_offset#2] & $bf
  [47] (DEFAULT_SCREEN+GREET_ROW*$28+$d)[irq::i4#2] = irq::$29
  [48] irq::greet_offset#1 = ++ irq::greet_offset#2
  [49] irq::i4#1 = ++ irq::i4#2
  to:irq::@31
irq::@29: scope:[irq]  from irq::@28
  [50] irq::$26 = (rasters+SCROLL_Y)[irq::i3#2] >> 1
  [51] irq::$27 = irq::$26 & 7
  [52] (rasters+SCROLL_Y)[irq::i3#2] = irq::$27
  [53] irq::i3#1 = ++ irq::i3#2
  to:irq::@28
irq::@22: scope:[irq]  from irq::@21
  [54] irq::idx#0 = SINUS[irq::sin_bar#2]
  [55] irq::barcol#0 = irq::barcnt#2 << 4
  to:irq::@23
irq::@23: scope:[irq]  from irq::@22 irq::@24
  [56] irq::idx#3 = phi( irq::@22/irq::idx#0, irq::@24/irq::idx#1 )
  [56] irq::barcol#3 = phi( irq::@22/irq::barcol#0, irq::@24/irq::barcol#1 )
  [56] irq::i1#2 = phi( irq::@22/0, irq::@24/irq::i1#1 )
  [57] if(irq::i1#2<$10) goto irq::@24
  to:irq::@25
irq::@25: scope:[irq]  from irq::@23 irq::@26
  [58] irq::idx#4 = phi( irq::@23/irq::idx#3, irq::@26/irq::idx#2 )
  [58] irq::barcol#4 = phi( irq::@23/irq::barcol#3, irq::@26/irq::barcol#2 )
  [58] irq::i2#2 = phi( irq::@23/0, irq::@26/irq::i2#1 )
  [59] if(irq::i2#2<$f) goto irq::@26
  to:irq::@27
irq::@27: scope:[irq]  from irq::@25
  [60] irq::sin_bar#1 = irq::sin_bar#2 + $a
  [61] irq::barcnt#1 = ++ irq::barcnt#2
  to:irq::@21
irq::@26: scope:[irq]  from irq::@25
  [62] irq::barcol#2 = -- irq::barcol#4
  [63] rasters[irq::idx#4] = irq::barcol#2
  [64] irq::idx#2 = ++ irq::idx#4
  [65] irq::i2#1 = ++ irq::i2#2
  to:irq::@25
irq::@24: scope:[irq]  from irq::@23
  [66] rasters[irq::idx#3] = irq::barcol#3
  [67] irq::idx#1 = ++ irq::idx#3
  [68] irq::barcol#1 = ++ irq::barcol#3
  [69] irq::i1#1 = ++ irq::i1#2
  to:irq::@23
irq::@19: scope:[irq]  from irq::@18
  [70] rasters[irq::l#2] = 0
  [71] irq::l#1 = ++ irq::l#2
  to:irq::@18
irq::@17: scope:[irq]  from irq::@16
  [72] irq::col1#0 = SINUS[irq::sin_col#2] >> 2
  [73] (COLORRAM+GREET_ROW*$28)[irq::i#2] = irq::col1#0
  [74] irq::col1#1 = irq::col1#0 >> 1
  [75] (COLORRAM+LOGO_ROW*$28-1)[irq::i#2] = irq::col1#1
  [76] (COLORRAM+LOGO_ROW*$28+(byte)1*$28-2)[irq::i#2] = irq::col1#1
  [77] (COLORRAM+LOGO_ROW*$28+(byte)2*$28-3)[irq::i#2] = irq::col1#1
  [78] (COLORRAM+LOGO_ROW*$28+(byte)3*$28-4)[irq::i#2] = irq::col1#1
  [79] (COLORRAM+LOGO_ROW*$28+(byte)4*$28-5)[irq::i#2] = irq::col1#1
  [80] (COLORRAM+LOGO_ROW*$28+(byte)5*$28-6)[irq::i#2] = irq::col1#1
  [81] (COLORRAM+SCROLL_ROW*$28)[irq::i#2] = PAL_GREEN[irq::sin_col#2]
  [82] irq::sin_col#1 = ++ irq::sin_col#2
  [83] irq::i#1 = ++ irq::i#2
  to:irq::@16
irq::@2: scope:[irq]  from irq::@1
  [84] irq::col#0 = rasters[irq::line#10]
  [85] *((byte*)VICIII+OFFSET_STRUCT_MOS4569_VICIII_BORDER_COLOR) = irq::col#0
  [86] *((byte*)VICIII+OFFSET_STRUCT_MOS4569_VICIII_BG_COLOR) = irq::col#0
  [87] if(irq::line#10<SCROLL_Y) goto irq::@4
  to:irq::@10
irq::@10: scope:[irq]  from irq::@2
  [88] if(irq::line#10==SCROLL_Y) goto irq::@5
  to:irq::@11
irq::@11: scope:[irq]  from irq::@10
  [89] if(irq::line#10==SCROLL_Y+SCROLL_BLACKBARS) goto irq::@6
  to:irq::@12
irq::@12: scope:[irq]  from irq::@11
  [90] if(irq::line#10!=SCROLL_Y+SCROLL_BLACKBARS+1) goto irq::@7
  to:irq::@13
irq::@13: scope:[irq]  from irq::@12
  [91] irq::zoomval#0 = SINUS[greet_zoomx]
  [92] greet_zoomx = ++ greet_zoomx
  [93] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) = irq::zoomval#0
  [94] irq::$10 = irq::zoomval#0 + 1
  [95] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) = irq::$10
  [96] if(greet_zoomx!=0) goto irq::@7
  to:irq::@14
irq::@14: scope:[irq]  from irq::@13
  [97] greet_idx = ++ greet_idx
  [98] if(greet_idx!=GREET_COUNT) goto irq::@7
  to:irq::@15
irq::@15: scope:[irq]  from irq::@14
  [99] greet_idx = 0
  to:irq::@7
irq::@7: scope:[irq]  from irq::@12 irq::@13 irq::@14 irq::@15 irq::@4 irq::@5 irq::@6
  [100] irq::wobble_idx#7 = phi( irq::@12/irq::wobble_idx#10, irq::@13/irq::wobble_idx#10, irq::@14/irq::wobble_idx#10, irq::@15/irq::wobble_idx#10, irq::@4/irq::wobble_idx#1, irq::@5/irq::wobble_idx#10, irq::@6/irq::wobble_idx#10 )
  [101] irq::raster#0 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)
  to:irq::@8
irq::@8: scope:[irq]  from irq::@7 irq::@8
  [102] if(irq::raster#0==*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)) goto irq::@8
  to:irq::@9
irq::@9: scope:[irq]  from irq::@8
  [103] irq::line#1 = ++ irq::line#10
  to:irq::@1
irq::@6: scope:[irq]  from irq::@11
  [104] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) = $50
  to:irq::@7
irq::@5: scope:[irq]  from irq::@10
  [105] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) = $50
  [106] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) = scroll_soft
  to:irq::@7
irq::@4: scope:[irq]  from irq::@2
  [107] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) = SINUS[irq::wobble_idx#10]
  [108] irq::wobble_idx#1 = ++ irq::wobble_idx#10
  [109] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) = $66
  to:irq::@7

void main()
main: scope:[main]  from __start::@1
  [110] *((byte*)VICIII+OFFSET_STRUCT_MOS4569_VICIII_KEY) = $47
  [111] *((byte*)VICIII+OFFSET_STRUCT_MOS4569_VICIII_KEY) = $53
  [112] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) = *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) | $40
  [113] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) = *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) | $40
  asm { lda#0  }
  [115] call *songInit 
  [116] call memset 
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [117] main::i1#2 = phi( main/0, main::@2/main::i1#1 )
  [118] if(main::i1#2<$bc*SIZEOF_BYTE) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@4
  [119] main::i2#2 = phi( main::@1/0, main::@4/main::i2#1 )
  [120] if(main::i2#2<$28) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@3 main::@5
  [121] main::i#2 = phi( main::@3/0, main::@5/main::i#1 )
  [122] PALETTE_RED[main::i#2] = PAL_RED[main::i#2]
  [123] PALETTE_GREEN[main::i#2] = PAL_GREEN[main::i#2]
  [124] PALETTE_BLUE[main::i#2] = PAL_BLUE[main::i#2]
  [125] main::i#1 = ++ main::i#2
  [126] if(main::i#1!=0) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@5
  asm { sei  }
  [128] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR
  [129] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = IRQ_Y
  [130] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & $7f
  [131] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) = IRQ_RASTER
  [132] *HARDWARE_IRQ = &irq
  [133] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
  [134] *PROCPORT = PROCPORT_RAM_IO
  [135] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO) = 1
  asm { cli  }
  to:main::@7
main::@7: scope:[main]  from main::@6 main::@7
  [137] phi()
  to:main::@7
main::@4: scope:[main]  from main::@3
  [138] (DEFAULT_SCREEN+GREET_ROW*$28)[main::i2#2] = '*'
  [139] main::i2#1 = ++ main::i2#2
  to:main::@3
main::@2: scope:[main]  from main::@1
  [140] (DEFAULT_SCREEN+LOGO_ROW*$28)[main::i1#2] = MEGA_LOGO[main::i1#2]
  [141] main::i1#1 = ++ main::i1#2
  to:main::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from main
  [142] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [143] memset::dst#2 = phi( memset/(byte*)memset::str#0, memset::@2/memset::dst#1 )
  [144] if(memset::dst#2!=memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [145] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [146] *memset::dst#2 = memset::c#0
  [147] memset::dst#1 = ++ memset::dst#2
  to:memset::@1
