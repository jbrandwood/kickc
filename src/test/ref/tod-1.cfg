
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [8] tod_init::tod_TENTHS#0 = *((byte*)&TOD_ZERO)
  [9] tod_init::tod_SEC#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC)
  [10] tod_init::tod_MIN#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN)
  [11] tod_init::tod_HOURS#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  [12] call tod_init 
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [13] phi()
  [14] call gotoxy 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [15] phi()
  [16] call tod_read 
  [17] tod_read::return_TENTHS#2 = tod_read::return_TENTHS#0
  [18] tod_read::return_SEC#2 = tod_read::return_SEC#0
  [19] tod_read::return_MIN#2 = tod_read::return_MIN#0
  [20] tod_read::return_HOURS#2 = tod_read::return_HOURS#0
  to:main::@3
main::@3: scope:[main]  from main::@2
  [21] tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2
  [22] tod_str::tod_SEC#0 = tod_read::return_SEC#2
  [23] tod_str::tod_MIN#0 = tod_read::return_MIN#2
  [24] tod_str::tod_HOURS#0 = tod_read::return_HOURS#2
  [25] call tod_str 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [26] phi()
  [27] call cputs 
  to:main::@1

void tod_init(byte tod_init::tod_TENTHS , byte tod_init::tod_SEC , byte tod_init::tod_MIN , byte tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main
  [28] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | $80
  [29] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & $7f
  [30] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) = tod_init::tod_HOURS#0
  [31] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) = tod_init::tod_MIN#0
  [32] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) = tod_init::tod_SEC#0
  [33] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) = tod_init::tod_TENTHS#0
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  [34] return 
  to:@return

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from main::@1
  [35] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy
  [36] conio_cursor_x = gotoxy::x#2
  [37] conio_cursor_y = gotoxy::y#2
  [38] conio_line_text = DEFAULT_SCREEN
  [39] conio_line_color = COLORRAM
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@1
  [40] return 
  to:@return

struct TIME_OF_DAY tod_read()
tod_read: scope:[tod_read]  from main::@2
  [41] tod_read::return_HOURS#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  [42] tod_read::return_MIN#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  [43] tod_read::return_SEC#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  [44] tod_read::return_TENTHS#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  [45] return 
  to:@return

byte* tod_str(byte tod_str::tod_TENTHS , byte tod_str::tod_SEC , byte tod_str::tod_MIN , byte tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@3
  [46] tod_str::$0 = tod_str::tod_HOURS#0 >> 4
  [47] tod_str::$1 = '0' + tod_str::$0
  [48] *tod_buffer = tod_str::$1
  [49] tod_str::$2 = tod_str::tod_HOURS#0 & $f
  [50] tod_str::$3 = '0' + tod_str::$2
  [51] *(tod_buffer+1) = tod_str::$3
  [52] tod_str::$4 = tod_str::tod_MIN#0 >> 4
  [53] tod_str::$5 = '0' + tod_str::$4
  [54] *(tod_buffer+3) = tod_str::$5
  [55] tod_str::$6 = tod_str::tod_MIN#0 & $f
  [56] tod_str::$7 = '0' + tod_str::$6
  [57] *(tod_buffer+4) = tod_str::$7
  [58] tod_str::$8 = tod_str::tod_SEC#0 >> 4
  [59] tod_str::$9 = '0' + tod_str::$8
  [60] *(tod_buffer+6) = tod_str::$9
  [61] tod_str::$10 = tod_str::tod_SEC#0 & $f
  [62] tod_str::$11 = '0' + tod_str::$10
  [63] *(tod_buffer+7) = tod_str::$11
  [64] tod_str::$12 = tod_str::tod_TENTHS#0 >> 4
  [65] tod_str::$13 = '0' + tod_str::$12
  [66] *(tod_buffer+9) = tod_str::$13
  [67] tod_str::$14 = tod_str::tod_TENTHS#0 & $f
  [68] tod_str::$15 = '0' + tod_str::$14
  [69] *(tod_buffer+$a) = tod_str::$15
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  [70] return 
  to:@return

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from main::@4
  [71] phi()
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [72] cputs::s#2 = phi( cputs/tod_buffer, cputs::@2/cputs::s#0 )
  [73] cputs::c#1 = *cputs::s#2
  [74] cputs::s#0 = ++ cputs::s#2
  [75] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [76] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [77] cputc::c#0 = cputs::c#1
  [78] call cputc 
  to:cputs::@1

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2
  [79] if(cputc::c#0=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [80] conio_line_text[conio_cursor_x] = cputc::c#0
  [81] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [82] conio_cursor_x = ++ conio_cursor_x
  [83] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [84] phi()
  [85] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [86] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [87] phi()
  [88] call cputln 
  to:cputc::@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [89] conio_line_text = conio_line_text + $28
  [90] conio_line_color = conio_line_color + $28
  [91] conio_cursor_x = 0
  [92] conio_cursor_y = ++ conio_cursor_y
  [93] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [94] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [95] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [96] phi()
  [97] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [98] phi()
  [99] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [100] phi()
  [101] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [102] phi()
  [103] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [104] conio_line_text = conio_line_text - $28
  [105] conio_line_color = conio_line_color - $28
  [106] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [107] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [108] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [108] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [109] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [110] memcpy::src#4 = (byte*)memcpy::source#2
  [111] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [112] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [112] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [113] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [114] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [115] *memcpy::dst#2 = *memcpy::src#2
  [116] memcpy::dst#1 = ++ memcpy::dst#2
  [117] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [118] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [118] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [119] memset::end#0 = (byte*)memset::str#3 + $28
  [120] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [121] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [122] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [123] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [124] *memset::dst#2 = memset::c#4
  [125] memset::dst#1 = ++ memset::dst#2
  to:memset::@2
