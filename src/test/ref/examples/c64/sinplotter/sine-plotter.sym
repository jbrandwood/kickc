__constant char *BITMAP = (char *) 8192
__constant struct MOS6526_CIA * const CIA2 = (struct MOS6526_CIA *) 56576
__constant char * const D011 = (char *) 53265
__constant char * const D016 = (char *) 53270
__constant char * const D018 = (char *) 53272
__constant char OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
__constant char OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
__constant const unsigned long PI2_u4f28 = $6487ed51
__constant const unsigned long PI_HALF_u4f28 = $1921fb54
__constant const unsigned long PI_u4f28 = $3243f6a9
__constant char * const PROCPORT = (char *) 1
__constant char * const PROCPORT_DDR = (char *) 0
__constant const char PROCPORT_DDR_MEMORY_MASK = 7
__constant const char PROCPORT_RAM_IO = 5
__constant char *SCREEN = (char *) 1024
__constant const unsigned int SIN_SIZE = $200
__constant char SIZEOF_INT = 2
__constant struct MOS6569_VICII * const VICII = (struct MOS6569_VICII *) 53248
__constant const char VICII_BMM = $20
__constant const char VICII_CSEL = 8
__constant const char VICII_DEN = $10
__constant const char VICII_RSEL = 8
__constant const char WHITE = 1
void bitmap_clear(char bgcol , char fgcol)
char bitmap_clear::bgcol
char bitmap_clear::col
__constant char bitmap_clear::col#0 = WHITE*$10 // col
char bitmap_clear::fgcol
char *bitmap_gfx
void bitmap_init(char *gfx , char *screen)
char bitmap_init::$4 // reg byte a 202.0
char bitmap_init::$5 // reg byte a 202.0
char bitmap_init::$6 // reg byte a 202.0
char bitmap_init::$7 // zp[1]:38 50.5
char bitmap_init::bits
char bitmap_init::bits#1 // reg byte a 101.0
char bitmap_init::bits#3 // reg byte a 151.5
char bitmap_init::bits#4 // reg byte a 67.33333333333333
char *bitmap_init::gfx
char *bitmap_init::screen
char bitmap_init::x
char bitmap_init::x#1 // reg byte x 151.5
char bitmap_init::x#2 // reg byte x 50.5
char bitmap_init::y
char bitmap_init::y#1 // reg byte x 151.5
char bitmap_init::y#2 // reg byte x 50.5
char *bitmap_init::yoffs
char *bitmap_init::yoffs#1 // yoffs zp[2]:26 202.0
char *bitmap_init::yoffs#2 // yoffs zp[2]:26 63.125
char *bitmap_init::yoffs#4 // yoffs zp[2]:26 101.0
void bitmap_plot(unsigned int x , char y)
unsigned int bitmap_plot::$1 // zp[2]:16 2002.0
char bitmap_plot::$2 // reg byte x 2002.0
char *bitmap_plot::plotter
unsigned int bitmap_plot::plotter#0 // plotter zp[2]:18 500.5
char *bitmap_plot::plotter#1 // plotter zp[2]:18 1501.5
unsigned int bitmap_plot::x
unsigned int bitmap_plot::x#0 // x zp[2]:26 101.0
unsigned int bitmap_plot::x#1 // x zp[2]:26 101.0
unsigned int bitmap_plot::x#2 // x zp[2]:26 551.0
char bitmap_plot::y
char bitmap_plot::y#0 // reg byte x 202.0
char bitmap_plot::y#1 // reg byte x 202.0
char bitmap_plot::y#2 // reg byte x 2204.0
__constant const char bitmap_plot_bit[$100] = { fill( $100, 0) }
__constant const char bitmap_plot_yhi[$100] = { fill( $100, 0) }
__constant const char bitmap_plot_ylo[$100] = { fill( $100, 0) }
char *bitmap_screen
unsigned long div32u16u(unsigned long dividend , unsigned int divisor)
unsigned long div32u16u::dividend
unsigned int div32u16u::divisor
unsigned long div32u16u::quotient
unsigned int div32u16u::quotient_hi
unsigned int div32u16u::quotient_hi#0 // quotient_hi zp[2]:24 40.4
unsigned int div32u16u::quotient_lo
unsigned int div32u16u::quotient_lo#0 // quotient_lo zp[2]:14 202.0
unsigned long div32u16u::return
unsigned long div32u16u::return#0 // return zp[4]:34 22.0
unsigned long div32u16u::return#1 // return zp[4]:34 37.33333333333333
unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
char divr16u::$1 // reg byte a 20002.0
char divr16u::$2 // reg byte a 20002.0
unsigned int divr16u::dividend
unsigned int divr16u::dividend#0 // dividend zp[2]:16 2500.25
unsigned int divr16u::dividend#3 // dividend zp[2]:16 4429.142857142857
unsigned int divr16u::dividend#5 // dividend zp[2]:16 1001.0
unsigned int divr16u::divisor
char divr16u::i
char divr16u::i#1 // reg byte x 15001.5
char divr16u::i#2 // reg byte x 1538.6153846153845
unsigned int divr16u::quotient
unsigned int divr16u::quotient#1 // quotient zp[2]:14 15001.5
unsigned int divr16u::quotient#2 // quotient zp[2]:14 10001.0
unsigned int divr16u::quotient#3 // quotient zp[2]:14 2500.25
unsigned int divr16u::rem
unsigned int divr16u::rem#0 // rem zp[2]:12 7500.75
unsigned int divr16u::rem#1 // rem zp[2]:12 20002.0
unsigned int divr16u::rem#10 // rem zp[2]:12 1102.0
unsigned int divr16u::rem#11 // rem zp[2]:12 10334.666666666666
unsigned int divr16u::rem#2 // rem zp[2]:12 20002.0
unsigned int divr16u::rem#4 // rem zp[2]:12 202.0
unsigned int divr16u::rem#5 // rem zp[2]:12 21003.0
unsigned int divr16u::rem#6 // rem zp[2]:12 10001.0
unsigned int divr16u::return
unsigned int divr16u::return#0 // return zp[2]:14 4315.0
unsigned int divr16u::return#2 // return zp[2]:14 202.0
unsigned int divr16u::return#3 // return zp[2]:14 202.0
void main()
char *main::toD0181_gfx
char main::toD0181_return
__constant char main::toD0181_return#0 = byte1 (unsigned int)SCREEN&$3fff*4|byte1 (unsigned int)BITMAP/4&$f // toD0181_return
char *main::toD0181_screen
char *main::vicSelectGfxBank1_gfx
char *main::vicSelectGfxBank1_toDd001_gfx
char main::vicSelectGfxBank1_toDd001_return
__constant char main::vicSelectGfxBank1_toDd001_return#0 = 3 // vicSelectGfxBank1_toDd001_return
void * memset(void *str , char c , unsigned int num)
char memset::c
char memset::c#4 // reg byte x 125.125
char *memset::dst
char *memset::dst#1 // dst zp[2]:12 2002.0
char *memset::dst#2 // dst zp[2]:12 1368.3333333333335
char *memset::dst#4 // dst zp[2]:12 202.0
char *memset::end
char *memset::end#0 // end zp[2]:26 183.66666666666669
unsigned int memset::num
unsigned int memset::num#2 // num zp[2]:26 101.0
void *memset::return
void *memset::str
void *memset::str#3 // str zp[2]:12
long mul16s(int a , int b)
unsigned int mul16s::$11 // zp[2]:24 2002.0
unsigned int mul16s::$6 // zp[2]:24 2002.0
int mul16s::a
int mul16s::a#0 // a zp[2]:12 220.39999999999998
int mul16s::b
unsigned long mul16s::m
unsigned long mul16s::m#0 // m zp[4]:2 1001.0
unsigned long mul16s::m#1 // m zp[4]:2 2002.0
unsigned long mul16s::m#4 // m zp[4]:2 2002.0
long mul16s::return
long mul16s::return#0 // return zp[4]:2 202.0
long mul16s::return#1 // return zp[4]:2 367.33333333333337
unsigned long mul16u(unsigned int a , unsigned int b)
char mul16u::$1 // reg byte a 2.0000002E7
unsigned int mul16u::a
unsigned int mul16u::a#0 // a zp[2]:10 10001.0
unsigned int mul16u::a#1 // a zp[2]:10 1.0000001E7
unsigned int mul16u::a#2 // a zp[2]:10 2002.0
unsigned int mul16u::a#3 // a zp[2]:10 6683334.166666666
unsigned int mul16u::a#6 // a zp[2]:10 55501.5
unsigned int mul16u::b
unsigned int mul16u::b#0 // b zp[2]:14 20002.0
unsigned int mul16u::b#2 // b zp[2]:14 10001.0
unsigned long mul16u::mb
unsigned long mul16u::mb#0 // mb zp[4]:6 200002.0
unsigned long mul16u::mb#1 // mb zp[4]:6 2.0000002E7
unsigned long mul16u::mb#2 // mb zp[4]:6 4300000.571428571
unsigned long mul16u::res
unsigned long mul16u::res#1 // res zp[4]:2 2.0000002E7
unsigned long mul16u::res#2 // res zp[4]:2 4287286.428571429
unsigned long mul16u::res#6 // res zp[4]:2 1.0000001E7
unsigned long mul16u::return
unsigned long mul16u::return#0 // return zp[4]:2 20002.0
unsigned long mul16u::return#3 // return zp[4]:2 2002.0
unsigned int mulu16_sel(unsigned int v1 , unsigned int v2 , char select)
unsigned long mulu16_sel::$0 // zp[4]:2 20002.0
unsigned long mulu16_sel::$1 // zp[4]:2 20002.0
unsigned int mulu16_sel::return
unsigned int mulu16_sel::return#0 // return zp[2]:18 2002.0
unsigned int mulu16_sel::return#1 // return_1 zp[2]:16 2002.0
unsigned int mulu16_sel::return#10 // return_1 zp[2]:16 2002.0
unsigned int mulu16_sel::return#11 // return zp[2]:18 2002.0
unsigned int mulu16_sel::return#12 // return zp[2]:18 2143.714285714286
unsigned int mulu16_sel::return#2 // return zp[2]:18 2002.0
char mulu16_sel::select
char mulu16_sel::select#5 // reg byte x 1666.8333333333333
unsigned int mulu16_sel::v1
unsigned int mulu16_sel::v1#0 // v1 zp[2]:16 1001.0
unsigned int mulu16_sel::v1#1 // v1 zp[2]:16 1001.0
unsigned int mulu16_sel::v1#2 // v1 zp[2]:16 2002.0
unsigned int mulu16_sel::v1#3 // v1 zp[2]:16 1001.0
unsigned int mulu16_sel::v1#4 // v1 zp[2]:16 1001.0
unsigned int mulu16_sel::v1#5 // v1 zp[2]:16 15006.0
unsigned int mulu16_sel::v2
unsigned int mulu16_sel::v2#0 // v2 zp[2]:14 2002.0
unsigned int mulu16_sel::v2#1 // v2 zp[2]:14 2002.0
unsigned int mulu16_sel::v2#3 // v2 zp[2]:14 2002.0
unsigned int mulu16_sel::v2#4 // v2 zp[2]:14 2002.0
unsigned int mulu16_sel::v2#5 // v2 zp[2]:14 7002.5
unsigned int rem16u
unsigned int rem16u#14 // rem16u zp[2]:12 220.39999999999998
void render_sine()
int *render_sine::$1 // zp[2]:12 202.0
unsigned int render_sine::$11 // zp[2]:24 30.299999999999997
int *render_sine::$4 // zp[2]:24 202.0
int render_sine::sin2_val
int render_sine::sin2_val#0 // sin2_val zp[2]:12 202.0
unsigned int render_sine::sin_idx
unsigned int render_sine::sin_idx#1 // sin_idx zp[2]:28 202.0
unsigned int render_sine::sin_idx#2 // sin_idx zp[2]:28 16.16
int render_sine::sin_val
int render_sine::sin_val#0 // sin_val zp[2]:12 202.0
unsigned int render_sine::xpos
unsigned int render_sine::xpos#1 // xpos zp[2]:26 101.0
unsigned int render_sine::xpos#3 // xpos zp[2]:26 19.238095238095237
unsigned int render_sine::xpos#9 // xpos zp[2]:26 101.0
char render_sine::ypos
char render_sine::ypos#0 // reg byte x 101.0
char render_sine::ypos2
char render_sine::ypos2#0 // reg byte x 101.0
__constant int sin[$200] = { fill( $200, 0) }
int sin16s(unsigned long x)
unsigned long sin16s::$4 // zp[4]:6 2002.0
char sin16s::isUpper
char sin16s::isUpper#2 // reg byte y 30.333333333333332
int sin16s::return
int sin16s::return#0 // return zp[2]:12 202.0
int sin16s::return#1 // return zp[2]:12 701.0
int sin16s::return#5 // return zp[2]:12 2002.0
int sin16s::sinx
int sin16s::sinx#1 // sinx zp[2]:12 2002.0
unsigned int sin16s::usinx
unsigned int sin16s::usinx#0 // usinx zp[2]:12 166.83333333333334
unsigned int sin16s::usinx#1 // usinx zp[2]:12 500.5
unsigned long sin16s::x
unsigned long sin16s::x#0 // x zp[4]:20 1552.0
unsigned long sin16s::x#1 // x zp[4]:20 2002.0
unsigned long sin16s::x#2 // x zp[4]:20 2002.0
unsigned long sin16s::x#4 // x zp[4]:20 2502.5
unsigned long sin16s::x#6 // x zp[4]:20 3003.0
unsigned int sin16s::x1
unsigned int sin16s::x1#0 // x1 zp[2]:24 318.5
unsigned int sin16s::x2
unsigned int sin16s::x2#0 // x2 zp[2]:16 2002.0
unsigned int sin16s::x3
unsigned int sin16s::x3#0 // x3 zp[2]:16 500.5
unsigned int sin16s::x3_6
unsigned int sin16s::x3_6#0 // x3_6 zp[2]:18 2002.0
unsigned int sin16s::x4
unsigned int sin16s::x4#0 // x4 zp[2]:16 2002.0
unsigned int sin16s::x5
unsigned int sin16s::x5#0 // x5 zp[2]:18 2002.0
unsigned int sin16s::x5_128
unsigned int sin16s::x5_128#0 // x5_128 zp[2]:18 2002.0
void sin16s_gen2(int *sintab , unsigned int wavelength , int min , int max)
long sin16s_gen2::$6 // zp[4]:2 202.0
unsigned int sin16s_gen2::$8 // zp[2]:10 101.0
int sin16s_gen2::ampl
__constant int sin16s_gen2::ampl#0 = sin16s_gen2::max#0-sin16s_gen2::min#0 // ampl
unsigned int sin16s_gen2::i
unsigned int sin16s_gen2::i#1 // i zp[2]:26 202.0
unsigned int sin16s_gen2::i#2 // i zp[2]:26 23.307692307692307
int sin16s_gen2::max
__constant int sin16s_gen2::max#0 = $140 // max
int sin16s_gen2::min
__constant int sin16s_gen2::min#0 = -$140 // min
int sin16s_gen2::offs
int *sin16s_gen2::sintab
int *sin16s_gen2::sintab#0 // sintab zp[2]:28 67.33333333333333
int *sin16s_gen2::sintab#2 // sintab zp[2]:28 27.545454545454547
unsigned long sin16s_gen2::step
unsigned long sin16s_gen2::step#0 // step zp[4]:34 7.466666666666667
unsigned int sin16s_gen2::wavelength
unsigned long sin16s_gen2::x
unsigned long sin16s_gen2::x#1 // x zp[4]:30 101.0
unsigned long sin16s_gen2::x#2 // x zp[4]:30 25.25
__constant int sin2[$200] = kickasm {{ .for(var i=0; i<512; i++) {
  	  .word sin(toRadians([i*360]/512))*320
    }
 }}
char wrap_y(int y)
char wrap_y::return
char wrap_y::return#0 // reg byte a 202.0
char wrap_y::return#1 // reg byte a 202.0
char wrap_y::return#2 // reg byte a 300.75
int wrap_y::y
int wrap_y::y#0 // y zp[2]:12 202.0
int wrap_y::y#1 // y zp[2]:12 202.0
int wrap_y::y#2 // y zp[2]:12 200002.0
int wrap_y::y#3 // y zp[2]:12 200002.0
int wrap_y::y#4 // y zp[2]:12 200502.5
int wrap_y::y#6 // y zp[2]:12 200002.0
int wrap_y::y#9 // y zp[2]:12 1203.0

reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
zp[4]:30 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
zp[2]:28 [ render_sine::sin_idx#2 render_sine::sin_idx#1 sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
zp[2]:26 [ memset::num#2 memset::end#0 render_sine::xpos#3 render_sine::xpos#9 render_sine::xpos#1 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 sin16s_gen2::i#2 sin16s_gen2::i#1 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
reg byte x [ memset::c#4 ]
reg byte y [ sin16s::isUpper#2 ]
zp[4]:20 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
zp[4]:2 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#3 mul16s::return#1 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#0 mul16s::return#0 sin16s_gen2::$6 mulu16_sel::$0 mulu16_sel::$1 ]
reg byte x [ bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 ]
zp[2]:12 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#14 wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 render_sine::$1 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 mul16s::a#0 sin16s::usinx#0 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[2]:14 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 mul16u::b#2 mul16u::b#0 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ]
reg byte x [ mulu16_sel::select#5 ]
zp[1]:38 [ bitmap_init::$7 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]
zp[4]:34 [ div32u16u::return#0 sin16s_gen2::step#0 div32u16u::return#1 ]
zp[2]:10 [ sin16s_gen2::$8 mul16u::a#3 mul16u::a#6 mul16u::a#2 mul16u::a#0 mul16u::a#1 ]
reg byte a [ wrap_y::return#0 ]
reg byte x [ render_sine::ypos#0 ]
reg byte a [ wrap_y::return#1 ]
reg byte x [ render_sine::ypos2#0 ]
zp[4]:6 [ sin16s::$4 mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp[2]:24 [ mul16s::$6 mul16s::$11 sin16s::x1#0 div32u16u::quotient_hi#0 render_sine::$11 render_sine::$4 ]
reg byte a [ wrap_y::return#2 ]
zp[2]:18 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 ]
zp[2]:16 [ bitmap_plot::$1 mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
reg byte x [ bitmap_plot::$2 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ mul16u::$1 ]
