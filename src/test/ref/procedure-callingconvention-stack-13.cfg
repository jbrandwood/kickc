@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] stackpush(byte) ← (byte) 6
  [5] callexecute pow2 
  [6] (byte~) main::$0 ← stackpull(byte)
  [7] *((const nomodify byte*) SCREEN) ← (byte~) main::$0
  to:main::@return
main::@return: scope:[main]  from main
  [8] return 
  to:@return

__stackcall (byte()) pow2((byte) pow2::n)
pow2: scope:[pow2]  from
  [9] (byte) pow2::n#0 ← stackidx(byte,(const byte) pow2::OFFSET_STACK_N)
  [10] if((byte) pow2::n#0==(byte) 0) goto pow2::@return
  to:pow2::@1
pow2::@1: scope:[pow2]  from pow2
  [11] (byte~) pow2::$1 ← (byte) pow2::n#0 - (byte) 1
  [12] stackpush(byte) ← (byte~) pow2::$1
  [13] callexecute pow2 
  [14] (byte) pow2::c#0 ← stackpull(byte)
  [15] (byte) pow2::return#1 ← (byte) pow2::c#0 + (byte) pow2::c#0
  to:pow2::@return
pow2::@return: scope:[pow2]  from pow2 pow2::@1
  [16] (byte) pow2::return#2 ← phi( pow2/(byte) 1 pow2::@1/(byte) pow2::return#1 )
  [17] stackidx(byte,(const byte) pow2::OFFSET_STACK_RETURN) ← (byte) pow2::return#2
  [18] return 
  to:@return
