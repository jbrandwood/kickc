Identified constant variable (byte*) main::bp
Identified constant variable (byte) main::sz

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  to:@1
main: scope:[main]  from @1
  (byte) main::idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) main::b#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) main::w#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) main::bp#0 ← ((byte*)) (word/signed word/dword/signed dword) $1000
  (word*~) main::$0 ← & (word) main::w#0
  (word*) main::wp#0 ← (word*~) main::$0
  (byte[3]) main::ba#0 ← { fill( 3, 0) }
  (word[3]) main::wa#0 ← { fill( 3, 0) }
  (byte) main::sz#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte/signed word/word/dword/signed dword~) main::$1 ← (byte) main::sz#0 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte[main::$1]) main::bb#0 ← { fill( main::$1, 0) }
  (byte[]) main::bc#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 3, (byte/signed byte/word/signed word/dword/signed dword) 4 }
  (byte[]) main::sa#0 ← (const string) main::$33
  (string~) main::$2 ← (const string) main::$34 + (const string) main::$35
  (string~) main::$3 ← (string~) main::$2 + (const string) main::$36
  (byte[]) main::sb#0 ← (string~) main::$3
  (byte/signed byte/word/signed word/dword/signed dword~) main::$4 ← sizeof  (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte/signed word/word/dword/signed dword~) main::$5 ← (byte) '0' + (byte/signed byte/word/signed word/dword/signed dword~) main::$4
  *((byte*) SCREEN#0 + (byte) main::idx#0) ← (byte/signed word/word/dword/signed dword~) main::$5
  (byte) main::idx#1 ← ++ (byte) main::idx#0
  (byte~) main::$6 ← sizeof  (byte) main::idx#1
  (byte~) main::$7 ← (byte) '0' + (byte~) main::$6
  *((byte*) SCREEN#0 + (byte) main::idx#1) ← (byte~) main::$7
  (byte) main::idx#2 ← ++ (byte) main::idx#1
  (byte~) main::$8 ← sizeof  (byte) main::b#0
  (byte~) main::$9 ← (byte) '0' + (byte~) main::$8
  *((byte*) SCREEN#0 + (byte) main::idx#2) ← (byte~) main::$9
  (byte) main::idx#3 ← ++ (byte) main::idx#2
  (byte/signed word/word/dword/signed dword~) main::$10 ← (byte) main::b#0 * (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte~) main::$11 ← sizeof  (byte/signed word/word/dword/signed dword~) main::$10
  (byte~) main::$12 ← (byte) '0' + (byte~) main::$11
  *((byte*) SCREEN#0 + (byte) main::idx#3) ← (byte~) main::$12
  (byte) main::idx#4 ← ++ (byte) main::idx#3
  (byte) main::idx#5 ← ++ (byte) main::idx#4
  (byte/signed byte/word/signed word/dword/signed dword~) main::$13 ← sizeof  (word/signed word/dword/signed dword) $43ff
  (byte/signed word/word/dword/signed dword~) main::$14 ← (byte) '0' + (byte/signed byte/word/signed word/dword/signed dword~) main::$13
  *((byte*) SCREEN#0 + (byte) main::idx#5) ← (byte/signed word/word/dword/signed dword~) main::$14
  (byte) main::idx#6 ← ++ (byte) main::idx#5
  (byte~) main::$15 ← sizeof  (word) main::w#0
  (byte~) main::$16 ← (byte) '0' + (byte~) main::$15
  *((byte*) SCREEN#0 + (byte) main::idx#6) ← (byte~) main::$16
  (byte) main::idx#7 ← ++ (byte) main::idx#6
  (byte) main::idx#8 ← ++ (byte) main::idx#7
  (byte~) main::$17 ← sizeof  (byte*) main::bp#0
  (byte~) main::$18 ← (byte) '0' + (byte~) main::$17
  *((byte*) SCREEN#0 + (byte) main::idx#8) ← (byte~) main::$18
  (byte) main::idx#9 ← ++ (byte) main::idx#8
  (byte~) main::$19 ← sizeof  (word*) main::wp#0
  (byte~) main::$20 ← (byte) '0' + (byte~) main::$19
  *((byte*) SCREEN#0 + (byte) main::idx#9) ← (byte~) main::$20
  (byte) main::idx#10 ← ++ (byte) main::idx#9
  (byte) main::idx#11 ← ++ (byte) main::idx#10
  (byte~) main::$21 ← sizeof  (byte[3]) main::ba#0
  (byte~) main::$22 ← (byte) '0' + (byte~) main::$21
  *((byte*) SCREEN#0 + (byte) main::idx#11) ← (byte~) main::$22
  (byte) main::idx#12 ← ++ (byte) main::idx#11
  (byte~) main::$23 ← sizeof  (word[3]) main::wa#0
  (byte~) main::$24 ← (byte) '0' + (byte~) main::$23
  *((byte*) SCREEN#0 + (byte) main::idx#12) ← (byte~) main::$24
  (byte) main::idx#13 ← ++ (byte) main::idx#12
  (byte~) main::$25 ← sizeof  (byte[main::$1]) main::bb#0
  (byte~) main::$26 ← (byte) '0' + (byte~) main::$25
  *((byte*) SCREEN#0 + (byte) main::idx#13) ← (byte~) main::$26
  (byte) main::idx#14 ← ++ (byte) main::idx#13
  (byte~) main::$27 ← sizeof  (byte[]) main::bc#0
  (byte~) main::$28 ← (byte) '0' + (byte~) main::$27
  *((byte*) SCREEN#0 + (byte) main::idx#14) ← (byte~) main::$28
  (byte) main::idx#15 ← ++ (byte) main::idx#14
  (byte~) main::$29 ← sizeof  (byte[]) main::sa#0
  (byte~) main::$30 ← (byte) '0' + (byte~) main::$29
  *((byte*) SCREEN#0 + (byte) main::idx#15) ← (byte~) main::$30
  (byte) main::idx#16 ← ++ (byte) main::idx#15
  (byte~) main::$31 ← sizeof  (byte[]) main::sb#0
  (byte~) main::$32 ← (byte) '0' + (byte~) main::$31
  *((byte*) SCREEN#0 + (byte) main::idx#16) ← (byte~) main::$32
  (byte) main::idx#17 ← ++ (byte) main::idx#16
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(void()) main()
(word*~) main::$0
(byte/signed word/word/dword/signed dword~) main::$1
(byte/signed word/word/dword/signed dword~) main::$10
(byte~) main::$11
(byte~) main::$12
(byte/signed byte/word/signed word/dword/signed dword~) main::$13
(byte/signed word/word/dword/signed dword~) main::$14
(byte~) main::$15
(byte~) main::$16
(byte~) main::$17
(byte~) main::$18
(byte~) main::$19
(string~) main::$2
(byte~) main::$20
(byte~) main::$21
(byte~) main::$22
(byte~) main::$23
(byte~) main::$24
(byte~) main::$25
(byte~) main::$26
(byte~) main::$27
(byte~) main::$28
(byte~) main::$29
(string~) main::$3
(byte~) main::$30
(byte~) main::$31
(byte~) main::$32
(const string) main::$33 = (string) "camelot@"
(const string) main::$34 = (string) "cml@"
(const string) main::$35 = (string) " @"
(const string) main::$36 = (string) "rules@"
(byte/signed byte/word/signed word/dword/signed dword~) main::$4
(byte/signed word/word/dword/signed dword~) main::$5
(byte~) main::$6
(byte~) main::$7
(byte~) main::$8
(byte~) main::$9
(label) main::@return
(byte) main::b
(byte) main::b#0
(byte[3]) main::ba
(byte[3]) main::ba#0
(byte[main::$1]) main::bb
(byte[main::$1]) main::bb#0
(byte[]) main::bc
(byte[]) main::bc#0
(byte*) main::bp
(byte*) main::bp#0
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#10
(byte) main::idx#11
(byte) main::idx#12
(byte) main::idx#13
(byte) main::idx#14
(byte) main::idx#15
(byte) main::idx#16
(byte) main::idx#17
(byte) main::idx#2
(byte) main::idx#3
(byte) main::idx#4
(byte) main::idx#5
(byte) main::idx#6
(byte) main::idx#7
(byte) main::idx#8
(byte) main::idx#9
(byte[]) main::sa
(byte[]) main::sa#0
(byte[]) main::sb
(byte[]) main::sb#0
(byte) main::sz
(byte) main::sz#0
(word) main::w
(word) main::w#0
(word[3]) main::wa
(word[3]) main::wa#0
(word*) main::wp
(word*) main::wp#0

Culled Empty Block (label) @2
Successful SSA optimization Pass2CullEmptyBlocks
Alias (word*) main::wp#0 = (word*~) main::$0 
Alias (byte[]) main::sb#0 = (string~) main::$3 
Successful SSA optimization Pass2AliasElimination
Constant (const byte*) SCREEN#0 = ((byte*))$400
Constant (const byte) main::idx#0 = 0
Constant (const byte*) main::bp#0 = ((byte*))$1000
Constant (const word*) main::wp#0 = &main::w#0
Constant (const byte[3]) main::ba#0 = { fill( 3, 0) }
Constant (const word[3]) main::wa#0 = { fill( 3, 0) }
Constant (const byte) main::sz#0 = $f
Constant (const byte[]) main::bc#0 = { 1, 2, 3, 4 }
Constant (const byte[]) main::sa#0 = main::$33
Constant (const string) main::$2 = "cml@"+" @"
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$4 = sizeof 0
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$13 = sizeof $43ff
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte/signed word/word/dword/signed dword) main::$1 = main::sz#0+2
Constant (const byte[]) main::sb#0 = "cml@"+" @"+"rules@"
Constant (const byte/signed word/word/dword/signed dword) main::$5 = '0'+main::$4
Constant (const byte) main::idx#1 = ++main::idx#0
Constant (const byte/signed word/word/dword/signed dword) main::$14 = '0'+main::$13
Constant (const byte) main::$17 = sizeof main::bp#0
Constant (const byte) main::$19 = sizeof main::wp#0
Constant (const byte) main::$21 = sizeof main::ba#0
Constant (const byte) main::$23 = sizeof main::wa#0
Constant (const byte) main::$27 = sizeof main::bc#0
Constant (const byte) main::$29 = sizeof main::sa#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte[main::$1]) main::bb#0 = { fill( main::$1, 0) }
Constant (const byte) main::$6 = sizeof main::idx#1
Constant (const byte) main::idx#2 = ++main::idx#1
Constant (const byte) main::$18 = '0'+main::$17
Constant (const byte) main::$20 = '0'+main::$19
Constant (const byte) main::$22 = '0'+main::$21
Constant (const byte) main::$24 = '0'+main::$23
Constant (const byte) main::$28 = '0'+main::$27
Constant (const byte) main::$30 = '0'+main::$29
Constant (const byte) main::$31 = sizeof main::sb#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$7 = '0'+main::$6
Constant (const byte) main::idx#3 = ++main::idx#2
Constant (const byte) main::$25 = sizeof main::bb#0
Constant (const byte) main::$32 = '0'+main::$31
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#4 = ++main::idx#3
Constant (const byte) main::$26 = '0'+main::$25
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#5 = ++main::idx#4
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#6 = ++main::idx#5
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#7 = ++main::idx#6
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#8 = ++main::idx#7
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#9 = ++main::idx#8
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#10 = ++main::idx#9
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#11 = ++main::idx#10
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#12 = ++main::idx#11
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#13 = ++main::idx#12
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#14 = ++main::idx#13
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#15 = ++main::idx#14
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#16 = ++main::idx#15
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#17 = ++main::idx#16
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(SCREEN#0+main::idx#0)
Consolidated array index constant in *(SCREEN#0+main::idx#1)
Consolidated array index constant in *(SCREEN#0+main::idx#2)
Consolidated array index constant in *(SCREEN#0+main::idx#3)
Consolidated array index constant in *(SCREEN#0+main::idx#5)
Consolidated array index constant in *(SCREEN#0+main::idx#6)
Consolidated array index constant in *(SCREEN#0+main::idx#8)
Consolidated array index constant in *(SCREEN#0+main::idx#9)
Consolidated array index constant in *(SCREEN#0+main::idx#11)
Consolidated array index constant in *(SCREEN#0+main::idx#12)
Consolidated array index constant in *(SCREEN#0+main::idx#13)
Consolidated array index constant in *(SCREEN#0+main::idx#14)
Consolidated array index constant in *(SCREEN#0+main::idx#15)
Consolidated array index constant in *(SCREEN#0+main::idx#16)
Successful SSA optimization Pass2ConstantAdditionElimination
Eliminating unused constant (const string) main::$34
Eliminating unused constant (const string) main::$35
Eliminating unused constant (const string) main::$36
Eliminating unused constant (const string) main::$2
Eliminating unused constant (const byte) main::idx#17
Successful SSA optimization PassNEliminateUnusedVars
Rewriting multiplication to use shift (byte/signed word/word/dword/signed dword~) main::$10 ← (byte) main::b#0 * (byte/signed byte/word/signed word/dword/signed dword) 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Resolving sizeof() (byte~) main::$8 ← sizeof  (byte) main::b#0
Resolving sizeof() (byte~) main::$11 ← sizeof  (byte/signed word/word/dword/signed dword~) main::$10
Resolving sizeof() (byte~) main::$15 ← sizeof  (word) main::w#0
Resolving sizeof() sizeof (byte/signed byte/word/signed word/dword/signed dword) 0
Resolving sizeof() sizeof (word/signed word/dword/signed dword) $43ff
Resolving sizeof() sizeof (const byte*) main::bp#0
Resolving sizeof() sizeof (const word*) main::wp#0
Resolving sizeof() sizeof (const byte[3]) main::ba#0
Resolving sizeof() sizeof (const word[3]) main::wa#0
Resolving sizeof() sizeof (const byte[]) main::bc#0
Resolving sizeof() sizeof (const byte) main::idx#1
Resolving sizeof() sizeof (const byte[main::$1]) main::bb#0
Successful SSA optimization Pass2SizeOfSimplification
Constant (const byte) main::$8 = SIZEOF_BYTE
Constant (const byte) main::$11 = SIZEOF_BYTE
Constant (const byte) main::$15 = SIZEOF_WORD
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$9 = '0'+main::$8
Constant (const byte) main::$12 = '0'+main::$11
Constant (const byte) main::$16 = '0'+main::$15
Successful SSA optimization Pass2ConstantIdentification
Inferred type updated to byte in [5] (byte/signed word/word/dword/signed dword~) main::$10 ← (byte) main::b#0 << (byte/signed byte/word/signed word/dword/signed dword) 1
Eliminating unused variable (byte~) main::$10 and assignment [5] (byte~) main::$10 ← (byte) main::b#0 << (byte/signed byte/word/signed word/dword/signed dword) 1
Eliminating unused constant (const byte*) main::bp#0
Eliminating unused constant (const word*) main::wp#0
Eliminating unused constant (const byte[3]) main::ba#0
Eliminating unused constant (const word[3]) main::wa#0
Eliminating unused constant (const byte[]) main::bc#0
Eliminating unused constant (const byte[]) main::sa#0
Eliminating unused constant (const byte[]) main::sb#0
Eliminating unused constant (const byte[main::$1]) main::bb#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const string) main::$33
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with different constant siblings (const byte) main::idx#0
Inlining constant with different constant siblings (const byte) main::idx#1
Inlining constant with different constant siblings (const byte) main::idx#2
Inlining constant with different constant siblings (const byte) main::idx#3
Inlining constant with different constant siblings (const byte) main::idx#4
Inlining constant with different constant siblings (const byte) main::idx#5
Inlining constant with different constant siblings (const byte) main::idx#6
Inlining constant with different constant siblings (const byte) main::idx#7
Inlining constant with different constant siblings (const byte) main::idx#8
Inlining constant with different constant siblings (const byte) main::idx#9
Inlining constant with different constant siblings (const byte) main::idx#10
Inlining constant with different constant siblings (const byte) main::idx#11
Inlining constant with different constant siblings (const byte) main::idx#12
Inlining constant with different constant siblings (const byte) main::idx#13
Inlining constant with different constant siblings (const byte) main::idx#14
Inlining constant with different constant siblings (const byte) main::idx#15
Inlining constant with different constant siblings (const byte) main::idx#16
Constant inlined main::idx#16 = ++++++++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#12 = ++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#13 = ++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#14 = ++++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#15 = ++++++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$12 = (byte) '0'+(const byte) SIZEOF_BYTE
Constant inlined main::$13 = (const byte) SIZEOF_WORD
Constant inlined main::$14 = (byte) '0'+(const byte) SIZEOF_WORD
Constant inlined main::$15 = (const byte) SIZEOF_WORD
Constant inlined main::$30 = (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 8*(const byte) SIZEOF_BYTE
Constant inlined main::$31 = (byte/signed byte/word/signed word/dword/signed dword) $c*(const byte) SIZEOF_BYTE
Constant inlined main::$32 = (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) $c*(const byte) SIZEOF_BYTE
Constant inlined main::$11 = (const byte) SIZEOF_BYTE
Constant inlined main::$16 = (byte) '0'+(const byte) SIZEOF_WORD
Constant inlined main::$17 = (const byte) SIZEOF_POINTER
Constant inlined main::$18 = (byte) '0'+(const byte) SIZEOF_POINTER
Constant inlined main::$19 = (const byte) SIZEOF_POINTER
Constant inlined main::$23 = (byte/signed byte/word/signed word/dword/signed dword) 3*(const byte) SIZEOF_WORD
Constant inlined main::$24 = (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 3*(const byte) SIZEOF_WORD
Constant inlined main::$25 = (const byte) main::sz#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_BYTE
Constant inlined main::$26 = (byte) '0'+(const byte) main::sz#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_BYTE
Constant inlined main::$20 = (byte) '0'+(const byte) SIZEOF_POINTER
Constant inlined main::$21 = (byte/signed byte/word/signed word/dword/signed dword) 3*(const byte) SIZEOF_BYTE
Constant inlined main::$22 = (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 3*(const byte) SIZEOF_BYTE
Constant inlined main::idx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#1 = ++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#2 = ++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$1 = (const byte) main::sz#0+(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined main::$27 = (byte/signed byte/word/signed word/dword/signed dword) 4*(const byte) SIZEOF_BYTE
Constant inlined main::idx#3 = ++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$28 = (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 4*(const byte) SIZEOF_BYTE
Constant inlined main::idx#4 = ++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$29 = (byte/signed byte/word/signed word/dword/signed dword) 8*(const byte) SIZEOF_BYTE
Constant inlined main::idx#5 = ++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#6 = ++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$5 = (byte) '0'+(const byte) SIZEOF_BYTE
Constant inlined main::idx#7 = ++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$6 = (const byte) SIZEOF_BYTE
Constant inlined main::idx#8 = ++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#9 = ++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#10 = ++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$4 = (const byte) SIZEOF_BYTE
Constant inlined main::idx#11 = ++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$9 = (byte) '0'+(const byte) SIZEOF_BYTE
Constant inlined main::$7 = (byte) '0'+(const byte) SIZEOF_BYTE
Constant inlined main::$8 = (const byte) SIZEOF_BYTE
Successful SSA optimization Pass2ConstantInlining
Simplifying constant plus zero SCREEN#0+0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++9
Simplifying constant integer increment ++$a
Simplifying constant integer increment ++$b
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++$a
Simplifying constant integer increment ++$b
Simplifying constant integer increment ++$c
Simplifying constant integer increment ++$c
Simplifying constant integer increment ++$d
Simplifying constant integer increment ++$e
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++$d
Simplifying constant integer increment ++$e
Simplifying constant integer increment ++$f
Successful SSA optimization Pass2ConstantSimplification
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] (byte) main::b#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [5] (word) main::w#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [6] *((const byte*) SCREEN#0) ← (byte) '0'+(const byte) SIZEOF_BYTE
  [7] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) '0'+(const byte) SIZEOF_BYTE
  [8] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE
  [9] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) '0'+(const byte) SIZEOF_BYTE
  [10] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (byte) '0'+(const byte) SIZEOF_WORD
  [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) '0'+(const byte) SIZEOF_WORD
  [12] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (byte) '0'+(const byte) SIZEOF_POINTER
  [13] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 9) ← (byte) '0'+(const byte) SIZEOF_POINTER
  [14] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $b) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 3*(const byte) SIZEOF_BYTE
  [15] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $c) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 3*(const byte) SIZEOF_WORD
  [16] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $d) ← (byte) '0'+(const byte) main::sz#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_BYTE
  [17] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $e) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 4*(const byte) SIZEOF_BYTE
  [18] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $f) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 8*(const byte) SIZEOF_BYTE
  [19] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $10) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) $c*(const byte) SIZEOF_BYTE
  to:main::@return
main::@return: scope:[main]  from main
  [20] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()
(byte) main::b
(byte) main::b#0 20.0
(byte[3]) main::ba
(byte[main::sz#0+2]) main::bb
(byte[]) main::bc
(byte*) main::bp
(byte) main::idx
(byte[]) main::sa
(byte[]) main::sb
(byte) main::sz
(word) main::w
(word) main::w#0 20.0
(word[3]) main::wa
(word*) main::wp

Initial phi equivalence classes
Complete equivalence classes
[ main::b#0 ]
[ main::w#0 ]
Allocated zp ZP_BYTE:2 [ main::b#0 ]
Allocated zp ZP_WORD:3 [ main::w#0 ]

INITIAL ASM
//SEG0 File Comments
// Tests the sizeof() operator on epressions
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
  .const SIZEOF_BYTE = 1
  .const SIZEOF_WORD = 2
  .const SIZEOF_POINTER = 2
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .const sz = $f
    .label b = 2
    .label w = 3
  //SEG10 [4] (byte) main::b#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
    // Simple types
    lda #0
    sta b
  //SEG11 [5] (word) main::w#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vwuz1=vbuc1 
    lda #0
    sta w
    lda #0
    sta w+1
  //SEG12 [6] *((const byte*) SCREEN#0) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN
  //SEG13 [7] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+1
  //SEG14 [8] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+2
  //SEG15 [9] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+3
  //SEG16 [10] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+5
  //SEG17 [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+6
  //SEG18 [12] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+8
  //SEG19 [13] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 9) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+9
  //SEG20 [14] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $b) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 3*(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+3*SIZEOF_BYTE
    sta SCREEN+$b
  //SEG21 [15] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $c) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 3*(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+3*SIZEOF_WORD
    sta SCREEN+$c
  //SEG22 [16] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $d) ← (byte) '0'+(const byte) main::sz#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+(sz+2)*SIZEOF_BYTE
    sta SCREEN+$d
  //SEG23 [17] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $e) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 4*(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+4*SIZEOF_BYTE
    sta SCREEN+$e
  //SEG24 [18] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $f) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 8*(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+8*SIZEOF_BYTE
    sta SCREEN+$f
  //SEG25 [19] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $10) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) $c*(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+$c*SIZEOF_BYTE
    sta SCREEN+$10
    jmp breturn
  //SEG26 main::@return
  breturn:
  //SEG27 [20] return 
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] (byte) main::b#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] (word) main::w#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) SCREEN#0) ← (byte) '0'+(const byte) SIZEOF_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) '0'+(const byte) SIZEOF_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) '0'+(const byte) SIZEOF_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (byte) '0'+(const byte) SIZEOF_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) '0'+(const byte) SIZEOF_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 9) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $b) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 3*(const byte) SIZEOF_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [15] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $c) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 3*(const byte) SIZEOF_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [16] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $d) ← (byte) '0'+(const byte) main::sz#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [17] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $e) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 4*(const byte) SIZEOF_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [18] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $f) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 8*(const byte) SIZEOF_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [19] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $10) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) $c*(const byte) SIZEOF_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::b#0 ] : zp ZP_BYTE:2 , 
Potential registers zp ZP_WORD:3 [ main::w#0 ] : zp ZP_WORD:3 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 20: zp ZP_BYTE:2 [ main::b#0 ] 20: zp ZP_WORD:3 [ main::w#0 ] 
Uplift Scope [] 

Uplifting [main] best 120 combination zp ZP_BYTE:2 [ main::b#0 ] zp ZP_WORD:3 [ main::w#0 ] 
Uplifting [] best 120 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::b#0 ]
Uplifting [main] best 120 combination zp ZP_BYTE:2 [ main::b#0 ] 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Tests the sizeof() operator on epressions
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
  .const SIZEOF_BYTE = 1
  .const SIZEOF_WORD = 2
  .const SIZEOF_POINTER = 2
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .const sz = $f
    .label b = 2
    .label w = 3
  //SEG10 [4] (byte) main::b#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
    // Simple types
    lda #0
    sta b
  //SEG11 [5] (word) main::w#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vwuz1=vbuc1 
    lda #0
    sta w
    lda #0
    sta w+1
  //SEG12 [6] *((const byte*) SCREEN#0) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN
  //SEG13 [7] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+1
  //SEG14 [8] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+2
  //SEG15 [9] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+3
  //SEG16 [10] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+5
  //SEG17 [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+6
  //SEG18 [12] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+8
  //SEG19 [13] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 9) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+9
  //SEG20 [14] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $b) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 3*(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+3*SIZEOF_BYTE
    sta SCREEN+$b
  //SEG21 [15] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $c) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 3*(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+3*SIZEOF_WORD
    sta SCREEN+$c
  //SEG22 [16] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $d) ← (byte) '0'+(const byte) main::sz#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+(sz+2)*SIZEOF_BYTE
    sta SCREEN+$d
  //SEG23 [17] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $e) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 4*(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+4*SIZEOF_BYTE
    sta SCREEN+$e
  //SEG24 [18] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $f) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 8*(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+8*SIZEOF_BYTE
    sta SCREEN+$f
  //SEG25 [19] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $10) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) $c*(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+$c*SIZEOF_BYTE
    sta SCREEN+$10
    jmp breturn
  //SEG26 main::@return
  breturn:
  //SEG27 [20] return 
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #'0'+SIZEOF_BYTE
Removing instruction lda #'0'+SIZEOF_BYTE
Removing instruction lda #'0'+SIZEOF_BYTE
Removing instruction lda #'0'+SIZEOF_WORD
Removing instruction lda #'0'+SIZEOF_POINTER
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) $400
(const byte) SIZEOF_BYTE SIZEOF_BYTE = (byte/signed byte/word/signed word/dword/signed dword) 1
(const byte) SIZEOF_POINTER SIZEOF_POINTER = (byte/signed byte/word/signed word/dword/signed dword) 2
(const byte) SIZEOF_WORD SIZEOF_WORD = (byte/signed byte/word/signed word/dword/signed dword) 2
(void()) main()
(label) main::@return
(byte) main::b
(byte) main::b#0 b zp ZP_BYTE:2 20.0
(byte[3]) main::ba
(byte[main::sz#0+2]) main::bb
(byte[]) main::bc
(byte*) main::bp
(byte) main::idx
(byte[]) main::sa
(byte[]) main::sb
(byte) main::sz
(const byte) main::sz#0 sz = (byte/signed byte/word/signed word/dword/signed dword) $f
(word) main::w
(word) main::w#0 w zp ZP_WORD:3 20.0
(word[3]) main::wa
(word*) main::wp

zp ZP_BYTE:2 [ main::b#0 ]
zp ZP_WORD:3 [ main::w#0 ]


FINAL ASSEMBLER
Score: 91

//SEG0 File Comments
// Tests the sizeof() operator on epressions
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
  .const SIZEOF_BYTE = 1
  .const SIZEOF_WORD = 2
  .const SIZEOF_POINTER = 2
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
    .const sz = $f
    .label b = 2
    .label w = 3
  //SEG10 [4] (byte) main::b#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
    // Simple types
    lda #0
    sta b
  //SEG11 [5] (word) main::w#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vwuz1=vbuc1 
    sta w
    sta w+1
  //SEG12 [6] *((const byte*) SCREEN#0) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN
  //SEG13 [7] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+1
  //SEG14 [8] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+2
  //SEG15 [9] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+3
  //SEG16 [10] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+5
  //SEG17 [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    sta SCREEN+6
  //SEG18 [12] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+8
  //SEG19 [13] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 9) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    sta SCREEN+9
  //SEG20 [14] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $b) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 3*(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+3*SIZEOF_BYTE
    sta SCREEN+$b
  //SEG21 [15] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $c) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 3*(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+3*SIZEOF_WORD
    sta SCREEN+$c
  //SEG22 [16] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $d) ← (byte) '0'+(const byte) main::sz#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+(sz+2)*SIZEOF_BYTE
    sta SCREEN+$d
  //SEG23 [17] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $e) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 4*(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+4*SIZEOF_BYTE
    sta SCREEN+$e
  //SEG24 [18] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $f) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) 8*(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+8*SIZEOF_BYTE
    sta SCREEN+$f
  //SEG25 [19] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $10) ← (byte) '0'+(byte/signed byte/word/signed word/dword/signed dword) $c*(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+$c*SIZEOF_BYTE
    sta SCREEN+$10
  //SEG26 main::@return
  //SEG27 [20] return 
    rts
}

