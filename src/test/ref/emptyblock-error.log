Identified constant variable (byte*) B

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @3
  (byte) a#20 ← phi( @3/(byte) a#19 )
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte) a#15 ← phi( main/(byte) a#20 main::@7/(byte) a#0 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) a#14 ← phi( main::@1/(byte) a#15 )
  call menu 
  to:main::@7
main::@7: scope:[main]  from main::@2
  (byte) a#8 ← phi( main::@2/(byte) a#3 )
  (byte) a#0 ← (byte) a#8
  to:main::@1
main::@return: scope:[main]  from main::@1
  (byte) a#9 ← phi( main::@1/(byte) a#15 )
  (byte) a#1 ← (byte) a#9
  return 
  to:@return
menu: scope:[menu]  from main::@2
  (byte) a#21 ← phi( main::@2/(byte) a#14 )
  to:menu::@1
menu::@1: scope:[menu]  from menu
  (byte) a#17 ← phi( menu/(byte) a#21 )
  if(true) goto menu::@2
  to:menu::@return
menu::@2: scope:[menu]  from menu::@1
  (byte) a#16 ← phi( menu::@1/(byte) a#17 )
  call mode 
  to:menu::@8
menu::@8: scope:[menu]  from menu::@2
  (byte) a#10 ← phi( menu::@2/(byte) a#6 )
  (byte) a#2 ← (byte) a#10
  to:menu::@return
menu::@return: scope:[menu]  from menu::@1 menu::@8
  (byte) a#11 ← phi( menu::@1/(byte) a#17 menu::@8/(byte) a#2 )
  (byte) a#3 ← (byte) a#11
  return 
  to:@return
@2: scope:[]  from @begin
  (byte) a#4 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) B#0 ← ((byte*)) (word/signed word/dword/signed dword) $1000
  to:@3
mode: scope:[mode]  from menu::@2
  (byte) a#22 ← phi( menu::@2/(byte) a#16 )
  to:mode::@1
mode::@1: scope:[mode]  from mode mode::@4 mode::@7
  (byte) a#18 ← phi( mode/(byte) a#22 mode::@4/(byte) a#23 mode::@7/(byte) a#5 )
  if(true) goto mode::@2
  to:mode::@return
mode::@2: scope:[mode]  from mode::@1
  (byte) a#24 ← phi( mode::@1/(byte) a#18 )
  (bool~) mode::$0 ← *((byte*) B#0) == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mode::$1 ← ! (bool~) mode::$0
  if((bool~) mode::$1) goto mode::@4
  to:mode::@7
mode::@4: scope:[mode]  from mode::@2
  (byte) a#23 ← phi( mode::@2/(byte) a#24 )
  to:mode::@1
mode::@7: scope:[mode]  from mode::@2
  (byte) a#5 ← *((byte*) B#0)
  to:mode::@1
mode::@return: scope:[mode]  from mode::@1
  (byte) a#12 ← phi( mode::@1/(byte) a#18 )
  (byte) a#6 ← (byte) a#12
  return 
  to:@return
@3: scope:[]  from @2
  (byte) a#19 ← phi( @2/(byte) a#4 )
  call main 
  to:@4
@4: scope:[]  from @3
  (byte) a#13 ← phi( @3/(byte) a#1 )
  (byte) a#7 ← (byte) a#13
  to:@end
@end: scope:[]  from @4

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @4
(label) @begin
(label) @end
(byte*) B
(byte*) B#0
(byte) a
(byte) a#0
(byte) a#1
(byte) a#10
(byte) a#11
(byte) a#12
(byte) a#13
(byte) a#14
(byte) a#15
(byte) a#16
(byte) a#17
(byte) a#18
(byte) a#19
(byte) a#2
(byte) a#20
(byte) a#21
(byte) a#22
(byte) a#23
(byte) a#24
(byte) a#3
(byte) a#4
(byte) a#5
(byte) a#6
(byte) a#7
(byte) a#8
(byte) a#9
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@7
(label) main::@return
(void()) menu()
(label) menu::@1
(label) menu::@2
(label) menu::@8
(label) menu::@return
(void()) mode()
(bool~) mode::$0
(bool~) mode::$1
(label) mode::@1
(label) mode::@2
(label) mode::@4
(label) mode::@7
(label) mode::@return

Inversing boolean not [27] (bool~) mode::$1 ← *((byte*) B#0) != (byte/signed byte/word/signed word/dword/signed dword) 0 from [26] (bool~) mode::$0 ← *((byte*) B#0) == (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte) a#1 = (byte) a#14 (byte) a#15 (byte) a#9 
Alias (byte) a#0 = (byte) a#8 
Alias (byte) a#16 = (byte) a#17 (byte) a#21 
Alias (byte) a#10 = (byte) a#2 
Alias (byte) a#11 = (byte) a#3 
Alias (byte) a#12 = (byte) a#24 (byte) a#18 (byte) a#23 (byte) a#6 
Alias (byte) a#19 = (byte) a#4 
Alias (byte) a#13 = (byte) a#7 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte) a#12
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) a#20 (byte) a#19
Redundant Phi (byte) a#0 (byte) a#11
Redundant Phi (byte) a#16 (byte) a#1
Redundant Phi (byte) a#10 (byte) a#12
Redundant Phi (byte) a#22 (byte) a#16
Redundant Phi (byte) a#13 (byte) a#1
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) mode::$1 [28] if(*((byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) a#19 = 0
Constant (const byte*) B#0 = ((byte*))$1000
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [1] if(true) goto main::@2
Removing PHI-reference to removed block (menu::@1) in block menu::@return
if() condition always true - replacing block destination [4] if(true) goto menu::@2
if() condition always true - replacing block destination [9] if(true) goto mode::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Removing unused block mode::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Culled Empty Block (label) main::@7
Culled Empty Block (label) menu::@1
Culled Empty Block (label) menu::@8
Culled Empty Block (label) @2
Culled Empty Block (label) mode::@4
Culled Empty Block (label) @4
Successful SSA optimization Pass2CullEmptyBlocks
Redundant Phi (byte) a#11 (byte) a#12
Successful SSA optimization Pass2RedundantPhiElimination
Inlining constant with var siblings (const byte) a#19
Constant inlined a#19 = (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of menu
Adding NOP phi() at start of menu::@2
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to menu:7 
Calls in [menu] to mode:11 

Created 2 initial phi equivalence classes
Coalesced [8] a#25 ← a#12
Coalesced (already) [13] a#26 ← a#1
Coalesced [17] a#27 ← a#5
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of menu
Adding NOP phi() at start of menu::@2
Adding NOP phi() at start of mode

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@3
@3: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @3
  [3] phi()
main: scope:[main]  from @3
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) a#1 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@2/(byte) a#12 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] phi()
  [7] call menu 
  to:main::@1
menu: scope:[menu]  from main::@2
  [8] phi()
  to:menu::@2
menu::@2: scope:[menu]  from menu
  [9] phi()
  [10] call mode 
  to:menu::@return
menu::@return: scope:[menu]  from menu::@2
  [11] return 
  to:@return
mode: scope:[mode]  from menu::@2
  [12] phi()
  to:mode::@1
mode::@1: scope:[mode]  from mode mode::@2 mode::@7
  [13] (byte) a#12 ← phi( mode/(byte) a#1 mode::@7/(byte) a#5 )
  to:mode::@2
mode::@2: scope:[mode]  from mode::@1
  [14] if(*((const byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@1
  to:mode::@7
mode::@7: scope:[mode]  from mode::@2
  [15] (byte) a#5 ← *((const byte*) B#0)
  to:mode::@1


VARIABLE REGISTER WEIGHTS
(byte*) B
(byte) a
(byte) a#1 2.6
(byte) a#12 38.0
(byte) a#5 202.0
(void()) main()
(void()) menu()
(void()) mode()

Initial phi equivalence classes
[ a#1 a#12 a#5 ]
Complete equivalence classes
[ a#1 a#12 a#5 ]
Allocated zp ZP_BYTE:2 [ a#1 a#12 a#5 ]

INITIAL ASM
//SEG0 File Comments
// Error cleaning up unused blocks
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label B = $1000
  .label a = 2
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @3 [phi:@begin->@3]
b3_from_bbegin:
  jmp b3
//SEG5 @3
b3:
//SEG6 [2] call main 
//SEG7 [4] phi from @3 to main [phi:@3->main]
main_from_b3:
  jsr main
//SEG8 [3] phi from @3 to @end [phi:@3->@end]
bend_from_b3:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) a#1 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta a
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG15 main::@2
  b2:
  //SEG16 [7] call menu 
  //SEG17 [8] phi from main::@2 to menu [phi:main::@2->menu]
  menu_from_b2:
    jsr menu
  //SEG18 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG19 [5] phi (byte) a#1 = (byte) a#12 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b1
}
//SEG20 menu
menu: {
  //SEG21 [9] phi from menu to menu::@2 [phi:menu->menu::@2]
  b2_from_menu:
    jmp b2
  //SEG22 menu::@2
  b2:
  //SEG23 [10] call mode 
  //SEG24 [12] phi from menu::@2 to mode [phi:menu::@2->mode]
  mode_from_b2:
    jsr mode
    jmp breturn
  //SEG25 menu::@return
  breturn:
  //SEG26 [11] return 
    rts
}
//SEG27 mode
mode: {
  //SEG28 [13] phi from mode mode::@7 to mode::@1 [phi:mode/mode::@7->mode::@1]
  b1_from_mode:
  b1_from_b7:
  //SEG29 [13] phi (byte) a#12 = (byte) a#1 [phi:mode/mode::@7->mode::@1#0] -- register_copy 
    jmp b1
  //SEG30 [13] phi from mode::@2 to mode::@1 [phi:mode::@2->mode::@1]
  b1_from_b2:
    jmp b1
  //SEG31 mode::@1
  b1:
    jmp b2
  //SEG32 mode::@2
  b2:
  //SEG33 [14] if(*((const byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@1 -- _deref_pbuc1_neq_0_then_la1 
    lda B
    cmp #0
    bne b1_from_b2
    jmp b7
  //SEG34 mode::@7
  b7:
  //SEG35 [15] (byte) a#5 ← *((const byte*) B#0) -- vbuz1=_deref_pbuc1 
    lda B
    sta a
    jmp b1_from_b7
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [14] if(*((const byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@1 [ ] ( main:2::menu:7::mode:10 [ ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ a#1 a#12 a#5 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 242.6: zp ZP_BYTE:2 [ a#1 a#12 a#5 ] 
Uplift Scope [main] 
Uplift Scope [menu] 
Uplift Scope [mode] 

Uplifting [] best 18376 combination reg byte a [ a#1 a#12 a#5 ] 
Uplifting [main] best 18376 combination 
Uplifting [menu] best 18376 combination 
Uplifting [mode] best 18376 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Error cleaning up unused blocks
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label B = $1000
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @3 [phi:@begin->@3]
b3_from_bbegin:
  jmp b3
//SEG5 @3
b3:
//SEG6 [2] call main 
//SEG7 [4] phi from @3 to main [phi:@3->main]
main_from_b3:
  jsr main
//SEG8 [3] phi from @3 to @end [phi:@3->@end]
bend_from_b3:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) a#1 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuaa=vbuc1 
    lda #0
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG15 main::@2
  b2:
  //SEG16 [7] call menu 
  //SEG17 [8] phi from main::@2 to menu [phi:main::@2->menu]
  menu_from_b2:
    jsr menu
  //SEG18 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG19 [5] phi (byte) a#1 = (byte) a#12 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b1
}
//SEG20 menu
menu: {
  //SEG21 [9] phi from menu to menu::@2 [phi:menu->menu::@2]
  b2_from_menu:
    jmp b2
  //SEG22 menu::@2
  b2:
  //SEG23 [10] call mode 
  //SEG24 [12] phi from menu::@2 to mode [phi:menu::@2->mode]
  mode_from_b2:
    jsr mode
    jmp breturn
  //SEG25 menu::@return
  breturn:
  //SEG26 [11] return 
    rts
}
//SEG27 mode
mode: {
  //SEG28 [13] phi from mode mode::@7 to mode::@1 [phi:mode/mode::@7->mode::@1]
  b1_from_mode:
  b1_from_b7:
  //SEG29 [13] phi (byte) a#12 = (byte) a#1 [phi:mode/mode::@7->mode::@1#0] -- register_copy 
    jmp b1
  //SEG30 [13] phi from mode::@2 to mode::@1 [phi:mode::@2->mode::@1]
  b1_from_b2:
    jmp b1
  //SEG31 mode::@1
  b1:
    jmp b2
  //SEG32 mode::@2
  b2:
  //SEG33 [14] if(*((const byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@1 -- _deref_pbuc1_neq_0_then_la1 
    lda B
    cmp #0
    bne b1_from_b2
    jmp b7
  //SEG34 mode::@7
  b7:
  //SEG35 [15] (byte) a#5 ← *((const byte*) B#0) -- vbuaa=_deref_pbuc1 
    lda B
    jmp b1_from_b7
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b3
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b7
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1 with b2
Replacing label b1 with b2
Replacing label b1_from_b2 with b2
Removing instruction b3_from_bbegin:
Removing instruction b3:
Removing instruction main_from_b3:
Removing instruction bend_from_b3:
Removing instruction b1:
Removing instruction b2_from_b1:
Removing instruction menu_from_b2:
Removing instruction b2_from_menu:
Removing instruction mode_from_b2:
Removing instruction b1_from_mode:
Removing instruction b1_from_b2:
Removing instruction b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b1_from_b2:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b7:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Skipping double jump to b2 in jmp b1_from_b7
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label b1_from_b7 to b1
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda B
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @3
(label) @begin
(label) @end
(byte*) B
(const byte*) B#0 B = ((byte*))(word/signed word/dword/signed dword) $1000
(byte) a
(byte) a#1 reg byte a 2.6
(byte) a#12 reg byte a 38.0
(byte) a#5 reg byte a 202.0
(void()) main()
(label) main::@1
(label) main::@2
(void()) menu()
(label) menu::@2
(label) menu::@return
(void()) mode()
(label) mode::@1
(label) mode::@2
(label) mode::@7

reg byte a [ a#1 a#12 a#5 ]


FINAL ASSEMBLER
Score: 8868

//SEG0 File Comments
// Error cleaning up unused blocks
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label B = $1000
//SEG3 @begin
//SEG4 [1] phi from @begin to @3 [phi:@begin->@3]
//SEG5 @3
//SEG6 [2] call main 
//SEG7 [4] phi from @3 to main [phi:@3->main]
//SEG8 [3] phi from @3 to @end [phi:@3->@end]
//SEG9 @end
//SEG10 main
main: {
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG12 [5] phi (byte) a#1 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuaa=vbuc1 
    lda #0
  //SEG13 main::@1
  //SEG14 [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG15 main::@2
  b2:
  //SEG16 [7] call menu 
  //SEG17 [8] phi from main::@2 to menu [phi:main::@2->menu]
    jsr menu
  //SEG18 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG19 [5] phi (byte) a#1 = (byte) a#12 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b2
}
//SEG20 menu
menu: {
  //SEG21 [9] phi from menu to menu::@2 [phi:menu->menu::@2]
  //SEG22 menu::@2
  //SEG23 [10] call mode 
  //SEG24 [12] phi from menu::@2 to mode [phi:menu::@2->mode]
    jsr mode
  //SEG25 menu::@return
  //SEG26 [11] return 
    rts
}
//SEG27 mode
mode: {
  //SEG28 [13] phi from mode mode::@7 to mode::@1 [phi:mode/mode::@7->mode::@1]
  //SEG29 [13] phi (byte) a#12 = (byte) a#1 [phi:mode/mode::@7->mode::@1#0] -- register_copy 
  //SEG30 [13] phi from mode::@2 to mode::@1 [phi:mode::@2->mode::@1]
  //SEG31 mode::@1
  //SEG32 mode::@2
  b2:
  //SEG33 [14] if(*((const byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@1 -- _deref_pbuc1_neq_0_then_la1 
    lda B
    cmp #0
    bne b2
  //SEG34 mode::@7
  //SEG35 [15] (byte) a#5 ← *((const byte*) B#0) -- vbuaa=_deref_pbuc1 
    jmp b2
}

