Resolved forward reference PALETTE to (const byte*) PALETTE
Resolved forward reference PALETTE to (const byte*) PALETTE
Resolved forward reference x_scroll to (volatile byte) x_scroll
Resolved forward reference y_scroll to (volatile byte) y_scroll
Inlined call call disableVideoOutput 
Inlined call call disableAudioOutput 
Inlined call call clearVBlankFlag 
Inlined call call waitForVBlank 
Inlined call call waitForVBlank 
Inlined call call ppuDataPrepare (nomodify void*) ppuDataFill::ppuData 
Inlined call call ppuDataPut (byte) ppuDataFill::val 
Inlined call call ppuDataPrepare (nomodify void*) ppuDataTransfer::ppuData 
Inlined call call ppuDataPut *((byte*) ppuDataTransfer::cpuSrc) 
Inlined call call ppuDataPrepare (nomodify void*) ppuDataPutTile::ppuData 
Inlined call call ppuDataPut *((byte*) ppuDataPutTile::tile + (number) 0) 
Inlined call call ppuDataPut *((byte*) ppuDataPutTile::tile + (number) 1) 
Inlined call call ppuDataPrepare (void*)(byte*~) ppuDataPutTile::$3 
Inlined call call ppuDataPut *((byte*) ppuDataPutTile::tile + (number) 2) 
Inlined call call ppuDataPut *((byte*) ppuDataPutTile::tile + (number) 3) 
Inlined call call ppuDataPrepare (nomodify void*) ppuDataSet::ppuData 
Inlined call call ppuDataPut (byte) ppuDataSet::val 
Inlined call call ppuDataPrepare (nomodify void*) ppuDataGet::ppuData 
Inlined call (byte~) ppuDataGet::$1 ← call ppuDataRead 
Inlined call call initNES 
Inlined call call enableVideoOutput 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(byte()) readJoy1()
readJoy1: scope:[readJoy1]  from vblank
  (byte*~) readJoy1::$7 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) readJoy1::$4 ← (byte*~) readJoy1::$7 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
  *((byte*~) readJoy1::$4) ← (number) 1
  (byte*~) readJoy1::$8 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) readJoy1::$5 ← (byte*~) readJoy1::$8 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
  *((byte*~) readJoy1::$5) ← (number) 0
  (byte) readJoy1::joy#0 ← (byte) 0
  (byte) readJoy1::i#0 ← (byte) 0
  to:readJoy1::@1
readJoy1::@1: scope:[readJoy1]  from readJoy1 readJoy1::@2
  (byte) readJoy1::joy#4 ← phi( readJoy1/(byte) readJoy1::joy#0 readJoy1::@2/(byte) readJoy1::joy#1 )
  (byte) readJoy1::i#2 ← phi( readJoy1/(byte) readJoy1::i#0 readJoy1::@2/(byte) readJoy1::i#1 )
  (bool~) readJoy1::$0 ← (byte) readJoy1::i#2 < (number) 8
  if((bool~) readJoy1::$0) goto readJoy1::@2
  to:readJoy1::@3
readJoy1::@2: scope:[readJoy1]  from readJoy1::@1
  (byte) readJoy1::i#3 ← phi( readJoy1::@1/(byte) readJoy1::i#2 )
  (byte) readJoy1::joy#2 ← phi( readJoy1::@1/(byte) readJoy1::joy#4 )
  (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (number) 1
  (byte*~) readJoy1::$9 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) readJoy1::$6 ← (byte*~) readJoy1::$9 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
  (number~) readJoy1::$2 ← *((byte*~) readJoy1::$6) & (number) 1
  (number~) readJoy1::$3 ← (byte~) readJoy1::$1 | (number~) readJoy1::$2
  (byte) readJoy1::joy#1 ← (number~) readJoy1::$3
  (byte) readJoy1::i#1 ← ++ (byte) readJoy1::i#3
  to:readJoy1::@1
readJoy1::@3: scope:[readJoy1]  from readJoy1::@1
  (byte) readJoy1::joy#3 ← phi( readJoy1::@1/(byte) readJoy1::joy#4 )
  (byte) readJoy1::return#0 ← (byte) readJoy1::joy#3
  to:readJoy1::@return
readJoy1::@return: scope:[readJoy1]  from readJoy1::@3
  (byte) readJoy1::return#3 ← phi( readJoy1::@3/(byte) readJoy1::return#0 )
  (byte) readJoy1::return#1 ← (byte) readJoy1::return#3
  return 
  to:@return

(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
ppuDataFill: scope:[ppuDataFill]  from clrscr cscroll::@6 main::@3 main::@4
  (byte) ppuDataFill::val#10 ← phi( clrscr/(byte) ppuDataFill::val#0 cscroll::@6/(byte) ppuDataFill::val#1 main::@3/(byte) ppuDataFill::val#2 main::@4/(byte) ppuDataFill::val#3 )
  (word) ppuDataFill::size#9 ← phi( clrscr/(word) ppuDataFill::size#0 cscroll::@6/(word) ppuDataFill::size#1 main::@3/(word) ppuDataFill::size#2 main::@4/(word) ppuDataFill::size#3 )
  (nomodify void*) ppuDataFill::ppuData#4 ← phi( clrscr/(nomodify void*) ppuDataFill::ppuData#0 cscroll::@6/(nomodify void*) ppuDataFill::ppuData#1 main::@3/(nomodify void*) ppuDataFill::ppuData#2 main::@4/(nomodify void*) ppuDataFill::ppuData#3 )
  (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 ← (nomodify void*) ppuDataFill::ppuData#4
  to:ppuDataFill::ppuDataPrepare1
ppuDataFill::ppuDataPrepare1: scope:[ppuDataFill]  from ppuDataFill
  (byte) ppuDataFill::val#8 ← phi( ppuDataFill/(byte) ppuDataFill::val#10 )
  (word) ppuDataFill::size#7 ← phi( ppuDataFill/(word) ppuDataFill::size#9 )
  (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#1 ← phi( ppuDataFill/(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 )
  (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataFill::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataFill::ppuDataPrepare1_$2 ← (byte*~) ppuDataFill::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataFill::ppuDataPrepare1_$2) ← (byte~) ppuDataFill::ppuDataPrepare1_$0
  (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataFill::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataFill::ppuDataPrepare1_$3 ← (byte*~) ppuDataFill::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataFill::ppuDataPrepare1_$3) ← (byte~) ppuDataFill::ppuDataPrepare1_$1
  to:ppuDataFill::@3
ppuDataFill::@3: scope:[ppuDataFill]  from ppuDataFill::ppuDataPrepare1
  (byte) ppuDataFill::val#6 ← phi( ppuDataFill::ppuDataPrepare1/(byte) ppuDataFill::val#8 )
  (word) ppuDataFill::size#5 ← phi( ppuDataFill::ppuDataPrepare1/(word) ppuDataFill::size#7 )
  (word) ppuDataFill::i#0 ← (word) 0
  to:ppuDataFill::@1
ppuDataFill::@1: scope:[ppuDataFill]  from ppuDataFill::@3 ppuDataFill::@4
  (byte) ppuDataFill::val#5 ← phi( ppuDataFill::@3/(byte) ppuDataFill::val#6 ppuDataFill::@4/(byte) ppuDataFill::val#7 )
  (word) ppuDataFill::size#4 ← phi( ppuDataFill::@3/(word) ppuDataFill::size#5 ppuDataFill::@4/(word) ppuDataFill::size#6 )
  (word) ppuDataFill::i#2 ← phi( ppuDataFill::@3/(word) ppuDataFill::i#0 ppuDataFill::@4/(word) ppuDataFill::i#1 )
  (bool~) ppuDataFill::$1 ← (word) ppuDataFill::i#2 < (word) ppuDataFill::size#4
  if((bool~) ppuDataFill::$1) goto ppuDataFill::@2
  to:ppuDataFill::@return
ppuDataFill::@2: scope:[ppuDataFill]  from ppuDataFill::@1
  (word) ppuDataFill::size#10 ← phi( ppuDataFill::@1/(word) ppuDataFill::size#4 )
  (word) ppuDataFill::i#5 ← phi( ppuDataFill::@1/(word) ppuDataFill::i#2 )
  (byte) ppuDataFill::val#4 ← phi( ppuDataFill::@1/(byte) ppuDataFill::val#5 )
  (byte) ppuDataFill::ppuDataPut1_val#0 ← (byte) ppuDataFill::val#4
  to:ppuDataFill::ppuDataPut1
ppuDataFill::ppuDataPut1: scope:[ppuDataFill]  from ppuDataFill::@2
  (byte) ppuDataFill::val#9 ← phi( ppuDataFill::@2/(byte) ppuDataFill::val#4 )
  (word) ppuDataFill::size#8 ← phi( ppuDataFill::@2/(word) ppuDataFill::size#10 )
  (word) ppuDataFill::i#4 ← phi( ppuDataFill::@2/(word) ppuDataFill::i#5 )
  (byte) ppuDataFill::ppuDataPut1_val#1 ← phi( ppuDataFill::@2/(byte) ppuDataFill::ppuDataPut1_val#0 )
  (byte*~) ppuDataFill::ppuDataPut1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataFill::ppuDataPut1_$0 ← (byte*~) ppuDataFill::ppuDataPut1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *((byte*~) ppuDataFill::ppuDataPut1_$0) ← (byte) ppuDataFill::ppuDataPut1_val#1
  to:ppuDataFill::@4
ppuDataFill::@4: scope:[ppuDataFill]  from ppuDataFill::ppuDataPut1
  (byte) ppuDataFill::val#7 ← phi( ppuDataFill::ppuDataPut1/(byte) ppuDataFill::val#9 )
  (word) ppuDataFill::size#6 ← phi( ppuDataFill::ppuDataPut1/(word) ppuDataFill::size#8 )
  (word) ppuDataFill::i#3 ← phi( ppuDataFill::ppuDataPut1/(word) ppuDataFill::i#4 )
  (word) ppuDataFill::i#1 ← ++ (word) ppuDataFill::i#3
  to:ppuDataFill::@1
ppuDataFill::@return: scope:[ppuDataFill]  from ppuDataFill::@1
  return 
  to:@return

(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
ppuDataTransfer: scope:[ppuDataTransfer]  from main::@2
  (word) ppuDataTransfer::size#6 ← phi( main::@2/(word) ppuDataTransfer::size#0 )
  (nomodify void*) ppuDataTransfer::cpuData#3 ← phi( main::@2/(nomodify void*) ppuDataTransfer::cpuData#0 )
  (nomodify void*) ppuDataTransfer::ppuData#1 ← phi( main::@2/(nomodify void*) ppuDataTransfer::ppuData#0 )
  (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#0 ← (nomodify void*) ppuDataTransfer::ppuData#1
  to:ppuDataTransfer::ppuDataPrepare1
ppuDataTransfer::ppuDataPrepare1: scope:[ppuDataTransfer]  from ppuDataTransfer
  (word) ppuDataTransfer::size#4 ← phi( ppuDataTransfer/(word) ppuDataTransfer::size#6 )
  (nomodify void*) ppuDataTransfer::cpuData#2 ← phi( ppuDataTransfer/(nomodify void*) ppuDataTransfer::cpuData#3 )
  (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#1 ← phi( ppuDataTransfer/(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#0 )
  (byte~) ppuDataTransfer::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataTransfer::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataTransfer::ppuDataPrepare1_$2 ← (byte*~) ppuDataTransfer::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataTransfer::ppuDataPrepare1_$2) ← (byte~) ppuDataTransfer::ppuDataPrepare1_$0
  (byte~) ppuDataTransfer::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataTransfer::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataTransfer::ppuDataPrepare1_$3 ← (byte*~) ppuDataTransfer::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataTransfer::ppuDataPrepare1_$3) ← (byte~) ppuDataTransfer::ppuDataPrepare1_$1
  to:ppuDataTransfer::@3
ppuDataTransfer::@3: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPrepare1
  (word) ppuDataTransfer::size#2 ← phi( ppuDataTransfer::ppuDataPrepare1/(word) ppuDataTransfer::size#4 )
  (nomodify void*) ppuDataTransfer::cpuData#1 ← phi( ppuDataTransfer::ppuDataPrepare1/(nomodify void*) ppuDataTransfer::cpuData#2 )
  (byte*) ppuDataTransfer::cpuSrc#0 ← (byte*)(nomodify void*) ppuDataTransfer::cpuData#1
  (word) ppuDataTransfer::i#0 ← (word) 0
  to:ppuDataTransfer::@1
ppuDataTransfer::@1: scope:[ppuDataTransfer]  from ppuDataTransfer::@3 ppuDataTransfer::@4
  (byte*) ppuDataTransfer::cpuSrc#4 ← phi( ppuDataTransfer::@3/(byte*) ppuDataTransfer::cpuSrc#0 ppuDataTransfer::@4/(byte*) ppuDataTransfer::cpuSrc#1 )
  (word) ppuDataTransfer::size#1 ← phi( ppuDataTransfer::@3/(word) ppuDataTransfer::size#2 ppuDataTransfer::@4/(word) ppuDataTransfer::size#3 )
  (word) ppuDataTransfer::i#2 ← phi( ppuDataTransfer::@3/(word) ppuDataTransfer::i#0 ppuDataTransfer::@4/(word) ppuDataTransfer::i#1 )
  (bool~) ppuDataTransfer::$1 ← (word) ppuDataTransfer::i#2 < (word) ppuDataTransfer::size#1
  if((bool~) ppuDataTransfer::$1) goto ppuDataTransfer::@2
  to:ppuDataTransfer::@return
ppuDataTransfer::@2: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  (word) ppuDataTransfer::size#7 ← phi( ppuDataTransfer::@1/(word) ppuDataTransfer::size#1 )
  (word) ppuDataTransfer::i#5 ← phi( ppuDataTransfer::@1/(word) ppuDataTransfer::i#2 )
  (byte*) ppuDataTransfer::cpuSrc#2 ← phi( ppuDataTransfer::@1/(byte*) ppuDataTransfer::cpuSrc#4 )
  (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2)
  to:ppuDataTransfer::ppuDataPut1
ppuDataTransfer::ppuDataPut1: scope:[ppuDataTransfer]  from ppuDataTransfer::@2
  (word) ppuDataTransfer::size#5 ← phi( ppuDataTransfer::@2/(word) ppuDataTransfer::size#7 )
  (word) ppuDataTransfer::i#4 ← phi( ppuDataTransfer::@2/(word) ppuDataTransfer::i#5 )
  (byte*) ppuDataTransfer::cpuSrc#5 ← phi( ppuDataTransfer::@2/(byte*) ppuDataTransfer::cpuSrc#2 )
  (byte) ppuDataTransfer::ppuDataPut1_val#1 ← phi( ppuDataTransfer::@2/(byte) ppuDataTransfer::ppuDataPut1_val#0 )
  (byte*~) ppuDataTransfer::ppuDataPut1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataTransfer::ppuDataPut1_$0 ← (byte*~) ppuDataTransfer::ppuDataPut1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *((byte*~) ppuDataTransfer::ppuDataPut1_$0) ← (byte) ppuDataTransfer::ppuDataPut1_val#1
  to:ppuDataTransfer::@4
ppuDataTransfer::@4: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPut1
  (word) ppuDataTransfer::size#3 ← phi( ppuDataTransfer::ppuDataPut1/(word) ppuDataTransfer::size#5 )
  (word) ppuDataTransfer::i#3 ← phi( ppuDataTransfer::ppuDataPut1/(word) ppuDataTransfer::i#4 )
  (byte*) ppuDataTransfer::cpuSrc#3 ← phi( ppuDataTransfer::ppuDataPut1/(byte*) ppuDataTransfer::cpuSrc#5 )
  (byte*) ppuDataTransfer::cpuSrc#1 ← ++ (byte*) ppuDataTransfer::cpuSrc#3
  (word) ppuDataTransfer::i#1 ← ++ (word) ppuDataTransfer::i#3
  to:ppuDataTransfer::@1
ppuDataTransfer::@return: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  return 
  to:@return

(void()) ppuDataSet((nomodify void*) ppuDataSet::ppuData , (byte) ppuDataSet::val)
ppuDataSet: scope:[ppuDataSet]  from cputc::@2 cscroll::@12
  (byte) ppuDataSet::val#4 ← phi( cputc::@2/(byte) ppuDataSet::val#0 cscroll::@12/(byte) ppuDataSet::val#1 )
  (nomodify void*) ppuDataSet::ppuData#2 ← phi( cputc::@2/(nomodify void*) ppuDataSet::ppuData#0 cscroll::@12/(nomodify void*) ppuDataSet::ppuData#1 )
  (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 ← (nomodify void*) ppuDataSet::ppuData#2
  to:ppuDataSet::ppuDataPrepare1
ppuDataSet::ppuDataPrepare1: scope:[ppuDataSet]  from ppuDataSet
  (byte) ppuDataSet::val#3 ← phi( ppuDataSet/(byte) ppuDataSet::val#4 )
  (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#1 ← phi( ppuDataSet/(nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 )
  (byte~) ppuDataSet::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataSet::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataSet::ppuDataPrepare1_$2 ← (byte*~) ppuDataSet::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataSet::ppuDataPrepare1_$2) ← (byte~) ppuDataSet::ppuDataPrepare1_$0
  (byte~) ppuDataSet::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataSet::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataSet::ppuDataPrepare1_$3 ← (byte*~) ppuDataSet::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataSet::ppuDataPrepare1_$3) ← (byte~) ppuDataSet::ppuDataPrepare1_$1
  to:ppuDataSet::@1
ppuDataSet::@1: scope:[ppuDataSet]  from ppuDataSet::ppuDataPrepare1
  (byte) ppuDataSet::val#2 ← phi( ppuDataSet::ppuDataPrepare1/(byte) ppuDataSet::val#3 )
  (byte) ppuDataSet::ppuDataPut1_val#0 ← (byte) ppuDataSet::val#2
  to:ppuDataSet::ppuDataPut1
ppuDataSet::ppuDataPut1: scope:[ppuDataSet]  from ppuDataSet::@1
  (byte) ppuDataSet::ppuDataPut1_val#1 ← phi( ppuDataSet::@1/(byte) ppuDataSet::ppuDataPut1_val#0 )
  (byte*~) ppuDataSet::ppuDataPut1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataSet::ppuDataPut1_$0 ← (byte*~) ppuDataSet::ppuDataPut1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *((byte*~) ppuDataSet::ppuDataPut1_$0) ← (byte) ppuDataSet::ppuDataPut1_val#1
  to:ppuDataSet::@return
ppuDataSet::@return: scope:[ppuDataSet]  from ppuDataSet::ppuDataPut1
  return 
  to:@return

(byte()) ppuDataGet((nomodify void*) ppuDataGet::ppuData)
ppuDataGet: scope:[ppuDataGet]  from cscroll::@8
  (nomodify void*) ppuDataGet::ppuData#1 ← phi( cscroll::@8/(nomodify void*) ppuDataGet::ppuData#0 )
  (nomodify void*) ppuDataGet::ppuDataPrepare1_ppuData#0 ← (nomodify void*) ppuDataGet::ppuData#1
  to:ppuDataGet::ppuDataPrepare1
ppuDataGet::ppuDataPrepare1: scope:[ppuDataGet]  from ppuDataGet
  (nomodify void*) ppuDataGet::ppuDataPrepare1_ppuData#1 ← phi( ppuDataGet/(nomodify void*) ppuDataGet::ppuDataPrepare1_ppuData#0 )
  (byte~) ppuDataGet::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataGet::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataGet::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataGet::ppuDataPrepare1_$2 ← (byte*~) ppuDataGet::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataGet::ppuDataPrepare1_$2) ← (byte~) ppuDataGet::ppuDataPrepare1_$0
  (byte~) ppuDataGet::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataGet::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataGet::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataGet::ppuDataPrepare1_$3 ← (byte*~) ppuDataGet::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataGet::ppuDataPrepare1_$3) ← (byte~) ppuDataGet::ppuDataPrepare1_$1
  to:ppuDataGet::ppuDataRead1
ppuDataGet::ppuDataRead1: scope:[ppuDataGet]  from ppuDataGet::ppuDataPrepare1
  (byte*~) ppuDataGet::ppuDataRead1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataGet::ppuDataRead1_$0 ← (byte*~) ppuDataGet::ppuDataRead1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
  (byte) ppuDataGet::ppuDataRead1_return#0 ← *((byte*~) ppuDataGet::ppuDataRead1_$0)
  to:ppuDataGet::ppuDataRead1_@return
ppuDataGet::ppuDataRead1_@return: scope:[ppuDataGet]  from ppuDataGet::ppuDataRead1
  (byte) ppuDataGet::ppuDataRead1_return#2 ← phi( ppuDataGet::ppuDataRead1/(byte) ppuDataGet::ppuDataRead1_return#0 )
  (byte) ppuDataGet::ppuDataRead1_return#1 ← (byte) ppuDataGet::ppuDataRead1_return#2
  to:ppuDataGet::@1
ppuDataGet::@1: scope:[ppuDataGet]  from ppuDataGet::ppuDataRead1_@return
  (byte) ppuDataGet::ppuDataRead1_return#3 ← phi( ppuDataGet::ppuDataRead1_@return/(byte) ppuDataGet::ppuDataRead1_return#1 )
  (byte~) ppuDataGet::$1 ← (byte) ppuDataGet::ppuDataRead1_return#3
  (byte) ppuDataGet::return#0 ← (byte~) ppuDataGet::$1
  to:ppuDataGet::@return
ppuDataGet::@return: scope:[ppuDataGet]  from ppuDataGet::@1
  (byte) ppuDataGet::return#3 ← phi( ppuDataGet::@1/(byte) ppuDataGet::return#0 )
  (byte) ppuDataGet::return#1 ← (byte) ppuDataGet::return#3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) conio_cursor_x ← (byte) 0
  (byte) conio_cursor_y ← (byte) 0
  (byte*) conio_line_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte) conio_scroll_enable ← (byte) 1
  to:@2

(void()) clrscr()
clrscr: scope:[clrscr]  from main::@5
  (nomodify void*) ppuDataFill::ppuData#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT
  (byte) ppuDataFill::val#0 ← (byte) ' '
  (word) ppuDataFill::size#0 ← (number) $3c0
  call ppuDataFill 
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← (number) 0
  (byte*) conio_line_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@1
  return 
  to:@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from cscroll::@2
  (byte) gotoxy::x#4 ← phi( cscroll::@2/(byte) gotoxy::x#1 )
  (byte) gotoxy::y#2 ← phi( cscroll::@2/(byte) gotoxy::y#1 )
  (bool~) gotoxy::$0 ← (byte) gotoxy::y#2 > (number) $1e
  (bool~) gotoxy::$1 ← ! (bool~) gotoxy::$0
  if((bool~) gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@3
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  (byte) gotoxy::y#4 ← phi( gotoxy/(byte) gotoxy::y#2 gotoxy::@3/(byte) gotoxy::y#0 )
  (byte) gotoxy::x#2 ← phi( gotoxy/(byte) gotoxy::x#4 gotoxy::@3/(byte) gotoxy::x#5 )
  (bool~) gotoxy::$2 ← (byte) gotoxy::x#2 >= (number) $20
  (bool~) gotoxy::$3 ← ! (bool~) gotoxy::$2
  if((bool~) gotoxy::$3) goto gotoxy::@2
  to:gotoxy::@4
gotoxy::@3: scope:[gotoxy]  from gotoxy
  (byte) gotoxy::x#5 ← phi( gotoxy/(byte) gotoxy::x#4 )
  (byte) gotoxy::y#0 ← (number) 0
  to:gotoxy::@1
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  (byte) gotoxy::y#3 ← phi( gotoxy::@1/(byte) gotoxy::y#4 gotoxy::@4/(byte) gotoxy::y#5 )
  (byte) gotoxy::x#3 ← phi( gotoxy::@1/(byte) gotoxy::x#2 gotoxy::@4/(byte) gotoxy::x#0 )
  (byte) conio_cursor_x ← (byte) gotoxy::x#3
  (byte) conio_cursor_y ← (byte) gotoxy::y#3
  (word~) gotoxy::$6 ← (word)(byte) gotoxy::y#3
  (number~) gotoxy::$4 ← (word~) gotoxy::$6 * (number) $20
  (word) gotoxy::line_offset#0 ← (number~) gotoxy::$4
  (byte*~) gotoxy::$5 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::line_offset#0
  (byte*) conio_line_text ← (byte*~) gotoxy::$5
  to:gotoxy::@return
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  (byte) gotoxy::y#5 ← phi( gotoxy::@1/(byte) gotoxy::y#4 )
  (byte) gotoxy::x#0 ← (number) 0
  to:gotoxy::@2
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  return 
  to:@return

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2
  (byte) cputc::c#1 ← phi( cputs::@2/(byte) cputc::c#0 )
  (bool~) cputc::$0 ← (byte) cputc::c#1 == (byte) '
'
  if((bool~) cputc::$0) goto cputc::@1
  to:cputc::@2
cputc::@1: scope:[cputc]  from cputc
  call cputln 
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@1
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc
  (byte) cputc::c#2 ← phi( cputc/(byte) cputc::c#1 )
  (byte*~) cputc::$1 ← (byte*) conio_line_text + (byte) conio_cursor_x
  (nomodify void*) ppuDataSet::ppuData#0 ← (void*)(byte*~) cputc::$1
  (byte) ppuDataSet::val#0 ← (byte) cputc::c#2
  call ppuDataSet 
  to:cputc::@5
cputc::@5: scope:[cputc]  from cputc::@2
  (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  (bool~) cputc::$3 ← (byte) conio_cursor_x == (number) $20
  (bool~) cputc::$4 ← ! (bool~) cputc::$3
  if((bool~) cputc::$4) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@5
  call cputln 
  to:cputc::@6
cputc::@6: scope:[cputc]  from cputc::@3
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@4 cputc::@5 cputc::@6
  return 
  to:@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  (byte*) conio_line_text ← (byte*) conio_line_text + (number) $20
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  call cscroll 
  to:cputln::@1
cputln::@1: scope:[cputln]  from cputln
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln::@1
  return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputln
  (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $1e
  (bool~) cscroll::$1 ← ! (bool~) cscroll::$0
  if((bool~) cscroll::$1) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  (bool~) cscroll::$8 ← (number) 0 != (byte) conio_scroll_enable
  if((bool~) cscroll::$8) goto cscroll::@3
  to:cscroll::@2
cscroll::@3: scope:[cscroll]  from cscroll::@1
  (byte*) cscroll::line1#0 ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) cscroll::line2#0 ← (const nomodify byte*) CONIO_SCREEN_TEXT+(number) $20
  (byte) cscroll::y#0 ← (byte) 0
  to:cscroll::@4
cscroll::@2: scope:[cscroll]  from cscroll::@1
  (byte) gotoxy::x#1 ← (number) 0
  (byte) gotoxy::y#1 ← (number) 0
  call gotoxy 
  to:cscroll::@10
cscroll::@10: scope:[cscroll]  from cscroll::@2
  to:cscroll::@return
cscroll::@4: scope:[cscroll]  from cscroll::@3 cscroll::@9
  (byte*) cscroll::line1#7 ← phi( cscroll::@3/(byte*) cscroll::line1#0 cscroll::@9/(byte*) cscroll::line1#8 )
  (byte*) cscroll::line2#7 ← phi( cscroll::@3/(byte*) cscroll::line2#0 cscroll::@9/(byte*) cscroll::line2#8 )
  (byte) cscroll::y#2 ← phi( cscroll::@3/(byte) cscroll::y#0 cscroll::@9/(byte) cscroll::y#1 )
  (bool~) cscroll::$3 ← (byte) cscroll::y#2 < (number) $1e-(number) 1
  if((bool~) cscroll::$3) goto cscroll::@5
  to:cscroll::@6
cscroll::@5: scope:[cscroll]  from cscroll::@4
  (byte*) cscroll::line1#6 ← phi( cscroll::@4/(byte*) cscroll::line1#7 )
  (byte) cscroll::y#6 ← phi( cscroll::@4/(byte) cscroll::y#2 )
  (byte*) cscroll::line2#6 ← phi( cscroll::@4/(byte*) cscroll::line2#7 )
  (byte) cscroll::x#0 ← (byte) 0
  to:cscroll::@7
cscroll::@6: scope:[cscroll]  from cscroll::@4
  (nomodify void*) ppuDataFill::ppuData#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $1e*(number) $20-(number) $20
  (byte) ppuDataFill::val#1 ← (byte) ' '
  (word) ppuDataFill::size#1 ← (number) $20
  call ppuDataFill 
  to:cscroll::@11
cscroll::@11: scope:[cscroll]  from cscroll::@6
  (byte*) conio_line_text ← (byte*) conio_line_text - (number) $20
  (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@7: scope:[cscroll]  from cscroll::@13 cscroll::@5
  (byte*) cscroll::line1#5 ← phi( cscroll::@13/(byte*) cscroll::line1#1 cscroll::@5/(byte*) cscroll::line1#6 )
  (byte) cscroll::y#4 ← phi( cscroll::@13/(byte) cscroll::y#5 cscroll::@5/(byte) cscroll::y#6 )
  (byte*) cscroll::line2#4 ← phi( cscroll::@13/(byte*) cscroll::line2#5 cscroll::@5/(byte*) cscroll::line2#6 )
  (byte) cscroll::x#2 ← phi( cscroll::@13/(byte) cscroll::x#1 cscroll::@5/(byte) cscroll::x#0 )
  (bool~) cscroll::$4 ← (byte) cscroll::x#2 < (number) $20
  if((bool~) cscroll::$4) goto cscroll::@8
  to:cscroll::@9
cscroll::@8: scope:[cscroll]  from cscroll::@7
  (byte) cscroll::y#8 ← phi( cscroll::@7/(byte) cscroll::y#4 )
  (byte) cscroll::x#5 ← phi( cscroll::@7/(byte) cscroll::x#2 )
  (byte*) cscroll::line1#4 ← phi( cscroll::@7/(byte*) cscroll::line1#5 )
  (byte*) cscroll::line2#2 ← phi( cscroll::@7/(byte*) cscroll::line2#4 )
  (nomodify void*) ppuDataGet::ppuData#0 ← (void*)(byte*) cscroll::line2#2
  call ppuDataGet 
  (byte) ppuDataGet::return#2 ← (byte) ppuDataGet::return#1
  to:cscroll::@12
cscroll::@12: scope:[cscroll]  from cscroll::@8
  (byte) cscroll::y#7 ← phi( cscroll::@8/(byte) cscroll::y#8 )
  (byte) cscroll::x#4 ← phi( cscroll::@8/(byte) cscroll::x#5 )
  (byte*) cscroll::line1#2 ← phi( cscroll::@8/(byte*) cscroll::line1#4 )
  (byte*) cscroll::line2#3 ← phi( cscroll::@8/(byte*) cscroll::line2#2 )
  (byte) ppuDataGet::return#4 ← phi( cscroll::@8/(byte) ppuDataGet::return#2 )
  (byte~) cscroll::$5 ← (byte) ppuDataGet::return#4
  (byte) cscroll::ch#0 ← (byte~) cscroll::$5
  (byte*) cscroll::line2#1 ← ++ (byte*) cscroll::line2#3
  (nomodify void*) ppuDataSet::ppuData#1 ← (void*)(byte*) cscroll::line1#2
  (byte) ppuDataSet::val#1 ← (byte) cscroll::ch#0
  call ppuDataSet 
  to:cscroll::@13
cscroll::@13: scope:[cscroll]  from cscroll::@12
  (byte) cscroll::y#5 ← phi( cscroll::@12/(byte) cscroll::y#7 )
  (byte*) cscroll::line2#5 ← phi( cscroll::@12/(byte*) cscroll::line2#1 )
  (byte) cscroll::x#3 ← phi( cscroll::@12/(byte) cscroll::x#4 )
  (byte*) cscroll::line1#3 ← phi( cscroll::@12/(byte*) cscroll::line1#2 )
  (byte*) cscroll::line1#1 ← ++ (byte*) cscroll::line1#3
  (byte) cscroll::x#1 ← ++ (byte) cscroll::x#3
  to:cscroll::@7
cscroll::@9: scope:[cscroll]  from cscroll::@7
  (byte*) cscroll::line1#8 ← phi( cscroll::@7/(byte*) cscroll::line1#5 )
  (byte*) cscroll::line2#8 ← phi( cscroll::@7/(byte*) cscroll::line2#4 )
  (byte) cscroll::y#3 ← phi( cscroll::@7/(byte) cscroll::y#4 )
  (byte) cscroll::y#1 ← ++ (byte) cscroll::y#3
  to:cscroll::@4
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@10 cscroll::@11
  return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@6
  (to_nomodify byte*) cputs::s#3 ← phi( main::@6/(to_nomodify byte*) cputs::s#1 )
  (byte) cputs::c#0 ← (byte) 0
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@3
  (to_nomodify byte*) cputs::s#2 ← phi( cputs/(to_nomodify byte*) cputs::s#3 cputs::@3/(to_nomodify byte*) cputs::s#4 )
  (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2)
  (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2
  (bool~) cputs::$1 ← (number) 0 != (byte) cputs::c#1
  if((bool~) cputs::$1) goto cputs::@2
  to:cputs::@return
cputs::@2: scope:[cputs]  from cputs::@1
  (to_nomodify byte*) cputs::s#5 ← phi( cputs::@1/(to_nomodify byte*) cputs::s#0 )
  (byte) cputs::c#2 ← phi( cputs::@1/(byte) cputs::c#1 )
  (byte) cputc::c#0 ← (byte) cputs::c#2
  call cputc 
  to:cputs::@3
cputs::@3: scope:[cputs]  from cputs::@2
  (to_nomodify byte*) cputs::s#4 ← phi( cputs::@2/(to_nomodify byte*) cputs::s#5 )
  to:cputs::@1
cputs::@return: scope:[cputs]  from cputs::@1
  return 
  to:@return

(void()) main()
main: scope:[main]  from @3
  to:main::initNES1
main::initNES1: scope:[main]  from main
  asm { cld ldx#$ff txs  }
  to:main::initNES1_disableVideoOutput1
main::initNES1_disableVideoOutput1: scope:[main]  from main::initNES1
  (byte*~) main::initNES1_disableVideoOutput1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::initNES1_disableVideoOutput1_$0 ← (byte*~) main::initNES1_disableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
  *((byte*~) main::initNES1_disableVideoOutput1_$0) ← (number) 0
  (byte*~) main::initNES1_disableVideoOutput1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::initNES1_disableVideoOutput1_$1 ← (byte*~) main::initNES1_disableVideoOutput1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK
  *((byte*~) main::initNES1_disableVideoOutput1_$1) ← (number) 0
  to:main::initNES1_disableAudioOutput1
main::initNES1_disableAudioOutput1: scope:[main]  from main::initNES1_disableVideoOutput1
  *((const nomodify byte*) FR_COUNTER) ← (number) $40
  (byte*~) main::initNES1_disableAudioOutput1_$1 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) main::initNES1_disableAudioOutput1_$0 ← (byte*~) main::initNES1_disableAudioOutput1_$1 + (const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
  *((byte*~) main::initNES1_disableAudioOutput1_$0) ← (number) $40
  to:main::initNES1_clearVBlankFlag1
main::initNES1_clearVBlankFlag1: scope:[main]  from main::initNES1_disableAudioOutput1
  asm { ldaPPU_PPUSTATUS  }
  to:main::initNES1_waitForVBlank1
main::initNES1_waitForVBlank1: scope:[main]  from main::initNES1_clearVBlankFlag1
  to:main::initNES1_waitForVBlank1_@1
main::initNES1_waitForVBlank1_@1: scope:[main]  from main::initNES1_waitForVBlank1 main::initNES1_waitForVBlank1_@1
  (byte*~) main::initNES1_waitForVBlank1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::initNES1_waitForVBlank1_$2 ← (byte*~) main::initNES1_waitForVBlank1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
  (number~) main::initNES1_waitForVBlank1_$0 ← *((byte*~) main::initNES1_waitForVBlank1_$2) & (number) $80
  (bool~) main::initNES1_waitForVBlank1_$4 ← (number) 0 != (number~) main::initNES1_waitForVBlank1_$0
  (bool~) main::initNES1_waitForVBlank1_$1 ← ! (bool~) main::initNES1_waitForVBlank1_$4
  if((bool~) main::initNES1_waitForVBlank1_$1) goto main::initNES1_waitForVBlank1_@1
  to:main::initNES1_@6
main::initNES1_@6: scope:[main]  from main::initNES1_waitForVBlank1_@1
  (byte) main::initNES1_i#0 ← (byte) 0
  to:main::initNES1_@1
main::initNES1_@1: scope:[main]  from main::initNES1_@1 main::initNES1_@6
  (byte) main::initNES1_i#2 ← phi( main::initNES1_@1/(byte) main::initNES1_i#1 main::initNES1_@6/(byte) main::initNES1_i#0 )
  *((const nomodify byte*) MEMORY+(number) 0 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $100 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $200 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $300 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $400 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $500 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $600 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $700 + (byte) main::initNES1_i#2) ← (number) 0
  (byte) main::initNES1_i#1 ← ++ (byte) main::initNES1_i#2
  (bool~) main::initNES1_$5 ← (number) 0 != (byte) main::initNES1_i#1
  if((bool~) main::initNES1_$5) goto main::initNES1_@1
  to:main::initNES1_waitForVBlank2
main::initNES1_waitForVBlank2: scope:[main]  from main::initNES1_@1
  to:main::initNES1_waitForVBlank2_@1
main::initNES1_waitForVBlank2_@1: scope:[main]  from main::initNES1_waitForVBlank2 main::initNES1_waitForVBlank2_@1
  (byte*~) main::initNES1_waitForVBlank2_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::initNES1_waitForVBlank2_$2 ← (byte*~) main::initNES1_waitForVBlank2_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
  (number~) main::initNES1_waitForVBlank2_$0 ← *((byte*~) main::initNES1_waitForVBlank2_$2) & (number) $80
  (bool~) main::initNES1_waitForVBlank2_$4 ← (number) 0 != (number~) main::initNES1_waitForVBlank2_$0
  (bool~) main::initNES1_waitForVBlank2_$1 ← ! (bool~) main::initNES1_waitForVBlank2_$4
  if((bool~) main::initNES1_waitForVBlank2_$1) goto main::initNES1_waitForVBlank2_@1
  to:main::initNES1_@7
main::initNES1_@7: scope:[main]  from main::initNES1_waitForVBlank2_@1
  asm { ldaPPU_PPUSTATUS  }
  to:main::@2
main::@2: scope:[main]  from main::initNES1_@7
  (byte~) main::$1 ← sizeof  (const byte*) PALETTE
  (nomodify void*) ppuDataTransfer::ppuData#0 ← (void*)(const nomodify byte*) PPU_PALETTE
  (nomodify void*) ppuDataTransfer::cpuData#0 ← (void*)(const byte*) PALETTE
  (word) ppuDataTransfer::size#0 ← (byte~) main::$1
  call ppuDataTransfer 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (nomodify void*) ppuDataFill::ppuData#2 ← (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0
  (byte) ppuDataFill::val#2 ← (number) 0
  (word) ppuDataFill::size#2 ← (number) $40
  call ppuDataFill 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (nomodify void*) ppuDataFill::ppuData#3 ← (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_1
  (byte) ppuDataFill::val#3 ← (number) 0
  (word) ppuDataFill::size#3 ← (number) $40
  call ppuDataFill 
  to:main::@5
main::@5: scope:[main]  from main::@4
  call clrscr 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (to_nomodify byte*) cputs::s#1 ← (const byte*) main::s
  call cputs 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (volatile byte) x_scroll ← (number) 0
  (volatile byte) y_scroll ← (number) -8
  to:main::enableVideoOutput1
main::enableVideoOutput1: scope:[main]  from main::@7
  (byte*~) main::enableVideoOutput1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::enableVideoOutput1_$0 ← (byte*~) main::enableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
  *((byte*~) main::enableVideoOutput1_$0) ← (number) $80
  (byte*~) main::enableVideoOutput1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::enableVideoOutput1_$1 ← (byte*~) main::enableVideoOutput1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK
  *((byte*~) main::enableVideoOutput1_$1) ← (number) $1e
  to:main::@1
main::@1: scope:[main]  from main::@1 main::enableVideoOutput1
  (bool~) main::$8 ← (number) 0 != (number) 1
  if((bool~) main::$8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@2: scope:[]  from @1
  (volatile byte) x_scroll ← (byte) 0
  (volatile byte) y_scroll ← (byte) 0
  to:@3

interrupt(HARDWARE_STACK)(void()) vblank()
vblank: scope:[vblank]  from
  call readJoy1 
  (byte) readJoy1::return#2 ← (byte) readJoy1::return#1
  to:vblank::@11
vblank::@11: scope:[vblank]  from vblank
  (byte) readJoy1::return#4 ← phi( vblank/(byte) readJoy1::return#2 )
  (byte~) vblank::$0 ← (byte) readJoy1::return#4
  (byte) vblank::joy#0 ← (byte~) vblank::$0
  (byte~) vblank::$1 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_DOWN
  (bool~) vblank::$17 ← (number) 0 != (byte~) vblank::$1
  (bool~) vblank::$2 ← ! (bool~) vblank::$17
  if((bool~) vblank::$2) goto vblank::@1
  to:vblank::@5
vblank::@1: scope:[vblank]  from vblank::@11 vblank::@5 vblank::@6
  (byte) vblank::joy#1 ← phi( vblank::@11/(byte) vblank::joy#0 vblank::@5/(byte) vblank::joy#4 vblank::@6/(byte) vblank::joy#5 )
  (byte~) vblank::$3 ← (byte) vblank::joy#1 & (const nomodify byte) JOY_UP
  (bool~) vblank::$18 ← (number) 0 != (byte~) vblank::$3
  (bool~) vblank::$4 ← ! (bool~) vblank::$18
  if((bool~) vblank::$4) goto vblank::@2
  to:vblank::@7
vblank::@5: scope:[vblank]  from vblank::@11
  (byte) vblank::joy#4 ← phi( vblank::@11/(byte) vblank::joy#0 )
  (volatile byte) y_scroll ← ++ (volatile byte) y_scroll
  (bool~) vblank::$9 ← (volatile byte) y_scroll == (number) $f0
  (bool~) vblank::$10 ← ! (bool~) vblank::$9
  if((bool~) vblank::$10) goto vblank::@1
  to:vblank::@6
vblank::@6: scope:[vblank]  from vblank::@5
  (byte) vblank::joy#5 ← phi( vblank::@5/(byte) vblank::joy#4 )
  (volatile byte) y_scroll ← (number) 0
  to:vblank::@1
vblank::@2: scope:[vblank]  from vblank::@1 vblank::@7 vblank::@8
  (byte) vblank::joy#2 ← phi( vblank::@1/(byte) vblank::joy#1 vblank::@7/(byte) vblank::joy#6 vblank::@8/(byte) vblank::joy#7 )
  (byte~) vblank::$5 ← (byte) vblank::joy#2 & (const nomodify byte) JOY_LEFT
  (bool~) vblank::$19 ← (number) 0 != (byte~) vblank::$5
  (bool~) vblank::$6 ← ! (bool~) vblank::$19
  if((bool~) vblank::$6) goto vblank::@3
  to:vblank::@9
vblank::@7: scope:[vblank]  from vblank::@1
  (byte) vblank::joy#6 ← phi( vblank::@1/(byte) vblank::joy#1 )
  (volatile byte) y_scroll ← -- (volatile byte) y_scroll
  (bool~) vblank::$11 ← (volatile byte) y_scroll == (number) $ff
  (bool~) vblank::$12 ← ! (bool~) vblank::$11
  if((bool~) vblank::$12) goto vblank::@2
  to:vblank::@8
vblank::@8: scope:[vblank]  from vblank::@7
  (byte) vblank::joy#7 ← phi( vblank::@7/(byte) vblank::joy#6 )
  (volatile byte) y_scroll ← (number) $ef
  to:vblank::@2
vblank::@3: scope:[vblank]  from vblank::@2 vblank::@9
  (byte) vblank::joy#3 ← phi( vblank::@2/(byte) vblank::joy#2 vblank::@9/(byte) vblank::joy#8 )
  (byte~) vblank::$7 ← (byte) vblank::joy#3 & (const nomodify byte) JOY_RIGHT
  (bool~) vblank::$20 ← (number) 0 != (byte~) vblank::$7
  (bool~) vblank::$8 ← ! (bool~) vblank::$20
  if((bool~) vblank::$8) goto vblank::@4
  to:vblank::@10
vblank::@9: scope:[vblank]  from vblank::@2
  (byte) vblank::joy#8 ← phi( vblank::@2/(byte) vblank::joy#2 )
  (volatile byte) x_scroll ← ++ (volatile byte) x_scroll
  to:vblank::@3
vblank::@4: scope:[vblank]  from vblank::@10 vblank::@3
  (byte*~) vblank::$15 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) vblank::$13 ← (byte*~) vblank::$15 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
  *((byte*~) vblank::$13) ← (volatile byte) x_scroll
  (byte*~) vblank::$16 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) vblank::$14 ← (byte*~) vblank::$16 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
  *((byte*~) vblank::$14) ← (volatile byte) y_scroll
  to:vblank::@return
vblank::@10: scope:[vblank]  from vblank::@3
  (volatile byte) x_scroll ← -- (volatile byte) x_scroll
  to:vblank::@4
vblank::@return: scope:[vblank]  from vblank::@4
  return 
  to:@return
@3: scope:[]  from @2
  call main 
  to:@4
@4: scope:[]  from @3
  to:@end
@end: scope:[]  from @4

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @4
(label) @begin
(label) @end
(const struct RICOH_2A03*) APU = (struct RICOH_2A03*)(number) $4000
(const nomodify byte*) CONIO_SCREEN_TEXT = (const nomodify byte*) PPU_NAME_TABLE_0
(const nomodify byte*) FR_COUNTER = (byte*)(number) $4017
(const nomodify byte) JOY_DOWN = (byte) 4
(const nomodify byte) JOY_LEFT = (byte) 2
(const nomodify byte) JOY_RIGHT = (byte) 1
(const nomodify byte) JOY_UP = (byte) 8
(const nomodify byte*) MEMORY = (byte*)(number) 0
(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = (byte) $10
(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1 = (byte) $16
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR = (byte) 6
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL = (byte) 0
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA = (byte) 7
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK = (byte) 1
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = (byte) 5
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = (byte) 2
(const byte*) PALETTE[(number) $20]  = { (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $f, (byte) $30, (byte) 8, (byte) 1, (byte) $f, (byte) $18, (byte) 8, (byte) 1, (byte) $30, (byte) $37, (byte) $1a, (byte) $f, (byte) $f, (byte) $f, (byte) $f }
(const struct RICOH_2C02*) PPU = (struct RICOH_2C02*)(number) $2000
(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 = (byte*)(number) $23c0
(const nomodify byte*) PPU_ATTRIBUTE_TABLE_1 = (byte*)(number) $27c0
(const nomodify byte*) PPU_NAME_TABLE_0 = (byte*)(number) $2000
(const nomodify byte*) PPU_PALETTE = (byte*)(number) $3f00
(const to_volatile byte*) PPU_PPUSTATUS = (byte*)(number) $2002
(byte) RICOH_2A03::DMC_FREQ
(byte) RICOH_2A03::DMC_LEN
(byte) RICOH_2A03::DMC_RAW
(byte) RICOH_2A03::DMC_START
(byte) RICOH_2A03::JOY1
(byte) RICOH_2A03::JOY2
(byte) RICOH_2A03::NOISE_HI
(byte) RICOH_2A03::NOISE_LO
(byte) RICOH_2A03::NOISE_VOL
(byte) RICOH_2A03::OAMDMA
(byte) RICOH_2A03::SND_CHN
(byte) RICOH_2A03::SQ1_HI
(byte) RICOH_2A03::SQ1_LO
(byte) RICOH_2A03::SQ1_SWEEP
(byte) RICOH_2A03::SQ1_VOL
(byte) RICOH_2A03::SQ2_HI
(byte) RICOH_2A03::SQ2_LO
(byte) RICOH_2A03::SQ2_SWEEP
(byte) RICOH_2A03::SQ2_VOL
(byte) RICOH_2A03::TRI_HI
(byte) RICOH_2A03::TRI_LINEAR
(byte) RICOH_2A03::TRI_LO
(byte) RICOH_2A03::UNUSED1
(byte) RICOH_2A03::UNUSED2
(byte) RICOH_2C02::OAMADDR
(byte) RICOH_2C02::OAMDATA
(byte) RICOH_2C02::PPUADDR
(byte) RICOH_2C02::PPUCTRL
(byte) RICOH_2C02::PPUDATA
(byte) RICOH_2C02::PPUMASK
(byte) RICOH_2C02::PPUSCROLL
(volatile byte) RICOH_2C02::PPUSTATUS loadstore
(byte) SpriteData::attributes
(byte) SpriteData::tile
(byte) SpriteData::x
(byte) SpriteData::y
(const byte*) TILES[]  = kickasm {{ .var filechargen = LoadBinary("characters.901225-01.bin")
     .for(var c=0; c<256; c++) {
        // Plane 0
        .fill 8, filechargen.get(c*8+i)
        // Plane 1
        .fill 8, 0
    }
 }}
(const to_nomodify void()**) VECTORS[]  = { &interrupt(HARDWARE_STACK)(void()) vblank(), &(void()) main(), (void()*)(number) 0 }
(void()) clrscr()
(label) clrscr::@1
(label) clrscr::@return
(byte) conio_cursor_x loadstore
(byte) conio_cursor_y loadstore
(byte*) conio_line_text loadstore
(byte) conio_scroll_enable loadstore
(void()) cputc((byte) cputc::c)
(bool~) cputc::$0
(byte*~) cputc::$1
(bool~) cputc::$3
(bool~) cputc::$4
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@4
(label) cputc::@5
(label) cputc::@6
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0
(byte) cputc::c#1
(byte) cputc::c#2
(void()) cputln()
(label) cputln::@1
(label) cputln::@return
(void()) cputs((to_nomodify byte*) cputs::s)
(bool~) cputs::$1
(label) cputs::@1
(label) cputs::@2
(label) cputs::@3
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#0
(byte) cputs::c#1
(byte) cputs::c#2
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0
(to_nomodify byte*) cputs::s#1
(to_nomodify byte*) cputs::s#2
(to_nomodify byte*) cputs::s#3
(to_nomodify byte*) cputs::s#4
(to_nomodify byte*) cputs::s#5
(void()) cscroll()
(bool~) cscroll::$0
(bool~) cscroll::$1
(bool~) cscroll::$3
(bool~) cscroll::$4
(byte~) cscroll::$5
(bool~) cscroll::$8
(label) cscroll::@1
(label) cscroll::@10
(label) cscroll::@11
(label) cscroll::@12
(label) cscroll::@13
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@6
(label) cscroll::@7
(label) cscroll::@8
(label) cscroll::@9
(label) cscroll::@return
(byte) cscroll::ch
(byte) cscroll::ch#0
(byte*) cscroll::line1
(byte*) cscroll::line1#0
(byte*) cscroll::line1#1
(byte*) cscroll::line1#2
(byte*) cscroll::line1#3
(byte*) cscroll::line1#4
(byte*) cscroll::line1#5
(byte*) cscroll::line1#6
(byte*) cscroll::line1#7
(byte*) cscroll::line1#8
(byte*) cscroll::line2
(byte*) cscroll::line2#0
(byte*) cscroll::line2#1
(byte*) cscroll::line2#2
(byte*) cscroll::line2#3
(byte*) cscroll::line2#4
(byte*) cscroll::line2#5
(byte*) cscroll::line2#6
(byte*) cscroll::line2#7
(byte*) cscroll::line2#8
(byte) cscroll::x
(byte) cscroll::x#0
(byte) cscroll::x#1
(byte) cscroll::x#2
(byte) cscroll::x#3
(byte) cscroll::x#4
(byte) cscroll::x#5
(byte) cscroll::y
(byte) cscroll::y#0
(byte) cscroll::y#1
(byte) cscroll::y#2
(byte) cscroll::y#3
(byte) cscroll::y#4
(byte) cscroll::y#5
(byte) cscroll::y#6
(byte) cscroll::y#7
(byte) cscroll::y#8
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(bool~) gotoxy::$0
(bool~) gotoxy::$1
(bool~) gotoxy::$2
(bool~) gotoxy::$3
(number~) gotoxy::$4
(byte*~) gotoxy::$5
(word~) gotoxy::$6
(label) gotoxy::@1
(label) gotoxy::@2
(label) gotoxy::@3
(label) gotoxy::@4
(label) gotoxy::@return
(word) gotoxy::line_offset
(word) gotoxy::line_offset#0
(byte) gotoxy::x
(byte) gotoxy::x#0
(byte) gotoxy::x#1
(byte) gotoxy::x#2
(byte) gotoxy::x#3
(byte) gotoxy::x#4
(byte) gotoxy::x#5
(byte) gotoxy::y
(byte) gotoxy::y#0
(byte) gotoxy::y#1
(byte) gotoxy::y#2
(byte) gotoxy::y#3
(byte) gotoxy::y#4
(byte) gotoxy::y#5
(void()) main()
(byte~) main::$1
(bool~) main::$8
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(label) main::enableVideoOutput1
(byte*~) main::enableVideoOutput1_$0
(byte*~) main::enableVideoOutput1_$1
(byte*~) main::enableVideoOutput1_$2
(byte*~) main::enableVideoOutput1_$3
(label) main::initNES1
(bool~) main::initNES1_$5
(label) main::initNES1_@1
(label) main::initNES1_@6
(label) main::initNES1_@7
(label) main::initNES1_clearVBlankFlag1
(label) main::initNES1_disableAudioOutput1
(byte*~) main::initNES1_disableAudioOutput1_$0
(byte*~) main::initNES1_disableAudioOutput1_$1
(label) main::initNES1_disableVideoOutput1
(byte*~) main::initNES1_disableVideoOutput1_$0
(byte*~) main::initNES1_disableVideoOutput1_$1
(byte*~) main::initNES1_disableVideoOutput1_$2
(byte*~) main::initNES1_disableVideoOutput1_$3
(byte) main::initNES1_i
(byte) main::initNES1_i#0
(byte) main::initNES1_i#1
(byte) main::initNES1_i#2
(label) main::initNES1_waitForVBlank1
(number~) main::initNES1_waitForVBlank1_$0
(bool~) main::initNES1_waitForVBlank1_$1
(byte*~) main::initNES1_waitForVBlank1_$2
(byte*~) main::initNES1_waitForVBlank1_$3
(bool~) main::initNES1_waitForVBlank1_$4
(label) main::initNES1_waitForVBlank1_@1
(label) main::initNES1_waitForVBlank2
(number~) main::initNES1_waitForVBlank2_$0
(bool~) main::initNES1_waitForVBlank2_$1
(byte*~) main::initNES1_waitForVBlank2_$2
(byte*~) main::initNES1_waitForVBlank2_$3
(bool~) main::initNES1_waitForVBlank2_$4
(label) main::initNES1_waitForVBlank2_@1
(const byte*) main::s[(byte) $25]  = (byte*) "hello world!
i am nes
 look at me 

"
(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
(bool~) ppuDataFill::$1
(label) ppuDataFill::@1
(label) ppuDataFill::@2
(label) ppuDataFill::@3
(label) ppuDataFill::@4
(label) ppuDataFill::@return
(word) ppuDataFill::i
(word) ppuDataFill::i#0
(word) ppuDataFill::i#1
(word) ppuDataFill::i#2
(word) ppuDataFill::i#3
(word) ppuDataFill::i#4
(word) ppuDataFill::i#5
(nomodify void*) ppuDataFill::ppuData
(nomodify void*) ppuDataFill::ppuData#0
(nomodify void*) ppuDataFill::ppuData#1
(nomodify void*) ppuDataFill::ppuData#2
(nomodify void*) ppuDataFill::ppuData#3
(nomodify void*) ppuDataFill::ppuData#4
(label) ppuDataFill::ppuDataPrepare1
(byte~) ppuDataFill::ppuDataPrepare1_$0
(byte~) ppuDataFill::ppuDataPrepare1_$1
(byte*~) ppuDataFill::ppuDataPrepare1_$2
(byte*~) ppuDataFill::ppuDataPrepare1_$3
(byte*~) ppuDataFill::ppuDataPrepare1_$4
(byte*~) ppuDataFill::ppuDataPrepare1_$5
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#1
(label) ppuDataFill::ppuDataPut1
(byte*~) ppuDataFill::ppuDataPut1_$0
(byte*~) ppuDataFill::ppuDataPut1_$1
(byte) ppuDataFill::ppuDataPut1_val
(byte) ppuDataFill::ppuDataPut1_val#0
(byte) ppuDataFill::ppuDataPut1_val#1
(word) ppuDataFill::size
(word) ppuDataFill::size#0
(word) ppuDataFill::size#1
(word) ppuDataFill::size#10
(word) ppuDataFill::size#2
(word) ppuDataFill::size#3
(word) ppuDataFill::size#4
(word) ppuDataFill::size#5
(word) ppuDataFill::size#6
(word) ppuDataFill::size#7
(word) ppuDataFill::size#8
(word) ppuDataFill::size#9
(byte) ppuDataFill::val
(byte) ppuDataFill::val#0
(byte) ppuDataFill::val#1
(byte) ppuDataFill::val#10
(byte) ppuDataFill::val#2
(byte) ppuDataFill::val#3
(byte) ppuDataFill::val#4
(byte) ppuDataFill::val#5
(byte) ppuDataFill::val#6
(byte) ppuDataFill::val#7
(byte) ppuDataFill::val#8
(byte) ppuDataFill::val#9
(byte()) ppuDataGet((nomodify void*) ppuDataGet::ppuData)
(byte~) ppuDataGet::$1
(label) ppuDataGet::@1
(label) ppuDataGet::@return
(nomodify void*) ppuDataGet::ppuData
(nomodify void*) ppuDataGet::ppuData#0
(nomodify void*) ppuDataGet::ppuData#1
(label) ppuDataGet::ppuDataPrepare1
(byte~) ppuDataGet::ppuDataPrepare1_$0
(byte~) ppuDataGet::ppuDataPrepare1_$1
(byte*~) ppuDataGet::ppuDataPrepare1_$2
(byte*~) ppuDataGet::ppuDataPrepare1_$3
(byte*~) ppuDataGet::ppuDataPrepare1_$4
(byte*~) ppuDataGet::ppuDataPrepare1_$5
(nomodify void*) ppuDataGet::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataGet::ppuDataPrepare1_ppuData#0
(nomodify void*) ppuDataGet::ppuDataPrepare1_ppuData#1
(label) ppuDataGet::ppuDataRead1
(byte*~) ppuDataGet::ppuDataRead1_$0
(byte*~) ppuDataGet::ppuDataRead1_$1
(label) ppuDataGet::ppuDataRead1_@return
(byte) ppuDataGet::ppuDataRead1_return
(byte) ppuDataGet::ppuDataRead1_return#0
(byte) ppuDataGet::ppuDataRead1_return#1
(byte) ppuDataGet::ppuDataRead1_return#2
(byte) ppuDataGet::ppuDataRead1_return#3
(byte) ppuDataGet::return
(byte) ppuDataGet::return#0
(byte) ppuDataGet::return#1
(byte) ppuDataGet::return#2
(byte) ppuDataGet::return#3
(byte) ppuDataGet::return#4
(void()) ppuDataSet((nomodify void*) ppuDataSet::ppuData , (byte) ppuDataSet::val)
(label) ppuDataSet::@1
(label) ppuDataSet::@return
(nomodify void*) ppuDataSet::ppuData
(nomodify void*) ppuDataSet::ppuData#0
(nomodify void*) ppuDataSet::ppuData#1
(nomodify void*) ppuDataSet::ppuData#2
(label) ppuDataSet::ppuDataPrepare1
(byte~) ppuDataSet::ppuDataPrepare1_$0
(byte~) ppuDataSet::ppuDataPrepare1_$1
(byte*~) ppuDataSet::ppuDataPrepare1_$2
(byte*~) ppuDataSet::ppuDataPrepare1_$3
(byte*~) ppuDataSet::ppuDataPrepare1_$4
(byte*~) ppuDataSet::ppuDataPrepare1_$5
(nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0
(nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#1
(label) ppuDataSet::ppuDataPut1
(byte*~) ppuDataSet::ppuDataPut1_$0
(byte*~) ppuDataSet::ppuDataPut1_$1
(byte) ppuDataSet::ppuDataPut1_val
(byte) ppuDataSet::ppuDataPut1_val#0
(byte) ppuDataSet::ppuDataPut1_val#1
(byte) ppuDataSet::val
(byte) ppuDataSet::val#0
(byte) ppuDataSet::val#1
(byte) ppuDataSet::val#2
(byte) ppuDataSet::val#3
(byte) ppuDataSet::val#4
(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
(bool~) ppuDataTransfer::$1
(label) ppuDataTransfer::@1
(label) ppuDataTransfer::@2
(label) ppuDataTransfer::@3
(label) ppuDataTransfer::@4
(label) ppuDataTransfer::@return
(nomodify void*) ppuDataTransfer::cpuData
(nomodify void*) ppuDataTransfer::cpuData#0
(nomodify void*) ppuDataTransfer::cpuData#1
(nomodify void*) ppuDataTransfer::cpuData#2
(nomodify void*) ppuDataTransfer::cpuData#3
(byte*) ppuDataTransfer::cpuSrc
(byte*) ppuDataTransfer::cpuSrc#0
(byte*) ppuDataTransfer::cpuSrc#1
(byte*) ppuDataTransfer::cpuSrc#2
(byte*) ppuDataTransfer::cpuSrc#3
(byte*) ppuDataTransfer::cpuSrc#4
(byte*) ppuDataTransfer::cpuSrc#5
(word) ppuDataTransfer::i
(word) ppuDataTransfer::i#0
(word) ppuDataTransfer::i#1
(word) ppuDataTransfer::i#2
(word) ppuDataTransfer::i#3
(word) ppuDataTransfer::i#4
(word) ppuDataTransfer::i#5
(nomodify void*) ppuDataTransfer::ppuData
(nomodify void*) ppuDataTransfer::ppuData#0
(nomodify void*) ppuDataTransfer::ppuData#1
(label) ppuDataTransfer::ppuDataPrepare1
(byte~) ppuDataTransfer::ppuDataPrepare1_$0
(byte~) ppuDataTransfer::ppuDataPrepare1_$1
(byte*~) ppuDataTransfer::ppuDataPrepare1_$2
(byte*~) ppuDataTransfer::ppuDataPrepare1_$3
(byte*~) ppuDataTransfer::ppuDataPrepare1_$4
(byte*~) ppuDataTransfer::ppuDataPrepare1_$5
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#0
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#1
(label) ppuDataTransfer::ppuDataPut1
(byte*~) ppuDataTransfer::ppuDataPut1_$0
(byte*~) ppuDataTransfer::ppuDataPut1_$1
(byte) ppuDataTransfer::ppuDataPut1_val
(byte) ppuDataTransfer::ppuDataPut1_val#0
(byte) ppuDataTransfer::ppuDataPut1_val#1
(word) ppuDataTransfer::size
(word) ppuDataTransfer::size#0
(word) ppuDataTransfer::size#1
(word) ppuDataTransfer::size#2
(word) ppuDataTransfer::size#3
(word) ppuDataTransfer::size#4
(word) ppuDataTransfer::size#5
(word) ppuDataTransfer::size#6
(word) ppuDataTransfer::size#7
(byte()) readJoy1()
(bool~) readJoy1::$0
(byte~) readJoy1::$1
(number~) readJoy1::$2
(number~) readJoy1::$3
(byte*~) readJoy1::$4
(byte*~) readJoy1::$5
(byte*~) readJoy1::$6
(byte*~) readJoy1::$7
(byte*~) readJoy1::$8
(byte*~) readJoy1::$9
(label) readJoy1::@1
(label) readJoy1::@2
(label) readJoy1::@3
(label) readJoy1::@return
(byte) readJoy1::i
(byte) readJoy1::i#0
(byte) readJoy1::i#1
(byte) readJoy1::i#2
(byte) readJoy1::i#3
(byte) readJoy1::joy
(byte) readJoy1::joy#0
(byte) readJoy1::joy#1
(byte) readJoy1::joy#2
(byte) readJoy1::joy#3
(byte) readJoy1::joy#4
(byte) readJoy1::return
(byte) readJoy1::return#0
(byte) readJoy1::return#1
(byte) readJoy1::return#2
(byte) readJoy1::return#3
(byte) readJoy1::return#4
interrupt(HARDWARE_STACK)(void()) vblank()
(byte~) vblank::$0
(byte~) vblank::$1
(bool~) vblank::$10
(bool~) vblank::$11
(bool~) vblank::$12
(byte*~) vblank::$13
(byte*~) vblank::$14
(byte*~) vblank::$15
(byte*~) vblank::$16
(bool~) vblank::$17
(bool~) vblank::$18
(bool~) vblank::$19
(bool~) vblank::$2
(bool~) vblank::$20
(byte~) vblank::$3
(bool~) vblank::$4
(byte~) vblank::$5
(bool~) vblank::$6
(byte~) vblank::$7
(bool~) vblank::$8
(bool~) vblank::$9
(label) vblank::@1
(label) vblank::@10
(label) vblank::@11
(label) vblank::@2
(label) vblank::@3
(label) vblank::@4
(label) vblank::@5
(label) vblank::@6
(label) vblank::@7
(label) vblank::@8
(label) vblank::@9
(label) vblank::@return
(byte) vblank::joy
(byte) vblank::joy#0
(byte) vblank::joy#1
(byte) vblank::joy#2
(byte) vblank::joy#3
(byte) vblank::joy#4
(byte) vblank::joy#5
(byte) vblank::joy#6
(byte) vblank::joy#7
(byte) vblank::joy#8
(volatile byte) x_scroll loadstore
(volatile byte) y_scroll loadstore

Adding number conversion cast (unumber) 1 in *((byte*~) readJoy1::$4) ← (number) 1
Adding number conversion cast (unumber) 0 in *((byte*~) readJoy1::$5) ← (number) 0
Adding number conversion cast (unumber) 8 in (bool~) readJoy1::$0 ← (byte) readJoy1::i#2 < (number) 8
Adding number conversion cast (unumber) 1 in (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (number) 1
Adding number conversion cast (unumber) 1 in (number~) readJoy1::$2 ← *((byte*~) readJoy1::$6) & (number) 1
Adding number conversion cast (unumber) readJoy1::$2 in (number~) readJoy1::$2 ← *((byte*~) readJoy1::$6) & (unumber)(number) 1
Adding number conversion cast (unumber) readJoy1::$3 in (number~) readJoy1::$3 ← (byte~) readJoy1::$1 | (unumber~) readJoy1::$2
Adding number conversion cast (unumber) $3c0 in (word) ppuDataFill::size#0 ← (number) $3c0
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_y ← (number) 0
Adding number conversion cast (unumber) $1e in (bool~) gotoxy::$0 ← (byte) gotoxy::y#2 > (number) $1e
Adding number conversion cast (unumber) $20 in (bool~) gotoxy::$2 ← (byte) gotoxy::x#2 >= (number) $20
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#0 ← (number) 0
Adding number conversion cast (unumber) $20 in (number~) gotoxy::$4 ← (word~) gotoxy::$6 * (number) $20
Adding number conversion cast (unumber) gotoxy::$4 in (number~) gotoxy::$4 ← (word~) gotoxy::$6 * (unumber)(number) $20
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#0 ← (number) 0
Adding number conversion cast (unumber) $20 in (bool~) cputc::$3 ← (byte) conio_cursor_x == (number) $20
Adding number conversion cast (unumber) $20 in (byte*) conio_line_text ← (byte*) conio_line_text + (number) $20
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) $1e in (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $1e
Adding number conversion cast (unumber) 0 in (bool~) cscroll::$8 ← (number) 0 != (byte) conio_scroll_enable
Adding number conversion cast (unumber) $20 in (byte*) cscroll::line2#0 ← (const nomodify byte*) CONIO_SCREEN_TEXT+(number) $20
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#1 ← (number) 0
Adding number conversion cast (unumber) $1e-1 in (bool~) cscroll::$3 ← (byte) cscroll::y#2 < (number) $1e-(number) 1
Adding number conversion cast (unumber) $20 in (nomodify void*) ppuDataFill::ppuData#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $1e*(number) $20-(number) $20
Adding number conversion cast (unumber) $1e*$20 in (nomodify void*) ppuDataFill::ppuData#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $1e*(number) $20-(unumber)(number) $20
Adding number conversion cast (unumber) $20 in (word) ppuDataFill::size#1 ← (number) $20
Adding number conversion cast (unumber) $20 in (byte*) conio_line_text ← (byte*) conio_line_text - (number) $20
Adding number conversion cast (unumber) $20 in (bool~) cscroll::$4 ← (byte) cscroll::x#2 < (number) $20
Adding number conversion cast (unumber) 0 in (bool~) cputs::$1 ← (number) 0 != (byte) cputs::c#1
Adding number conversion cast (unumber) 0 in *((byte*~) main::initNES1_disableVideoOutput1_$0) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*~) main::initNES1_disableVideoOutput1_$1) ← (number) 0
Adding number conversion cast (unumber) $40 in *((const nomodify byte*) FR_COUNTER) ← (number) $40
Adding number conversion cast (unumber) $40 in *((byte*~) main::initNES1_disableAudioOutput1_$0) ← (number) $40
Adding number conversion cast (unumber) $80 in (number~) main::initNES1_waitForVBlank1_$0 ← *((byte*~) main::initNES1_waitForVBlank1_$2) & (number) $80
Adding number conversion cast (unumber) main::initNES1_waitForVBlank1_$0 in (number~) main::initNES1_waitForVBlank1_$0 ← *((byte*~) main::initNES1_waitForVBlank1_$2) & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) main::initNES1_waitForVBlank1_$4 ← (number) 0 != (unumber~) main::initNES1_waitForVBlank1_$0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) 0 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) 0 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $100 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $100 in *((const nomodify byte*) MEMORY+(number) $100 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $200 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $200 in *((const nomodify byte*) MEMORY+(number) $200 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $300 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $300 in *((const nomodify byte*) MEMORY+(number) $300 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $400 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $400 in *((const nomodify byte*) MEMORY+(number) $400 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $500 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $500 in *((const nomodify byte*) MEMORY+(number) $500 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $600 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $600 in *((const nomodify byte*) MEMORY+(number) $600 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $700 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $700 in *((const nomodify byte*) MEMORY+(number) $700 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in (bool~) main::initNES1_$5 ← (number) 0 != (byte) main::initNES1_i#1
Adding number conversion cast (unumber) $80 in (number~) main::initNES1_waitForVBlank2_$0 ← *((byte*~) main::initNES1_waitForVBlank2_$2) & (number) $80
Adding number conversion cast (unumber) main::initNES1_waitForVBlank2_$0 in (number~) main::initNES1_waitForVBlank2_$0 ← *((byte*~) main::initNES1_waitForVBlank2_$2) & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) main::initNES1_waitForVBlank2_$4 ← (number) 0 != (unumber~) main::initNES1_waitForVBlank2_$0
Adding number conversion cast (unumber) 0 in (byte) ppuDataFill::val#2 ← (number) 0
Adding number conversion cast (unumber) $40 in (word) ppuDataFill::size#2 ← (number) $40
Adding number conversion cast (unumber) 0 in (byte) ppuDataFill::val#3 ← (number) 0
Adding number conversion cast (unumber) $40 in (word) ppuDataFill::size#3 ← (number) $40
Adding number conversion cast (unumber) 0 in (volatile byte) x_scroll ← (number) 0
Adding number conversion cast (unumber) -8 in (volatile byte) y_scroll ← (number) -8
Adding number conversion cast (unumber) $80 in *((byte*~) main::enableVideoOutput1_$0) ← (number) $80
Adding number conversion cast (unumber) $1e in *((byte*~) main::enableVideoOutput1_$1) ← (number) $1e
Adding number conversion cast (unumber) 0 in (bool~) vblank::$17 ← (number) 0 != (byte~) vblank::$1
Adding number conversion cast (unumber) 0 in (bool~) vblank::$18 ← (number) 0 != (byte~) vblank::$3
Adding number conversion cast (unumber) $f0 in (bool~) vblank::$9 ← (volatile byte) y_scroll == (number) $f0
Adding number conversion cast (unumber) 0 in (volatile byte) y_scroll ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) vblank::$19 ← (number) 0 != (byte~) vblank::$5
Adding number conversion cast (unumber) $ff in (bool~) vblank::$11 ← (volatile byte) y_scroll == (number) $ff
Adding number conversion cast (unumber) $ef in (volatile byte) y_scroll ← (number) $ef
Adding number conversion cast (unumber) 0 in (bool~) vblank::$20 ← (number) 0 != (byte~) vblank::$7
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((byte*~) readJoy1::$4) ← (unumber)(number) 1
Inlining cast *((byte*~) readJoy1::$5) ← (unumber)(number) 0
Inlining cast (word) ppuDataFill::size#0 ← (unumber)(number) $3c0
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_y ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#0 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#0 ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#1 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#1 ← (unumber)(number) 0
Inlining cast (word) ppuDataFill::size#1 ← (unumber)(number) $20
Inlining cast *((byte*~) main::initNES1_disableVideoOutput1_$0) ← (unumber)(number) 0
Inlining cast *((byte*~) main::initNES1_disableVideoOutput1_$1) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) FR_COUNTER) ← (unumber)(number) $40
Inlining cast *((byte*~) main::initNES1_disableAudioOutput1_$0) ← (unumber)(number) $40
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) 0 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $100 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $200 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $300 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $400 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $500 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $600 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $700 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast (byte) ppuDataFill::val#2 ← (unumber)(number) 0
Inlining cast (word) ppuDataFill::size#2 ← (unumber)(number) $40
Inlining cast (byte) ppuDataFill::val#3 ← (unumber)(number) 0
Inlining cast (word) ppuDataFill::size#3 ← (unumber)(number) $40
Inlining cast (volatile byte) x_scroll ← (unumber)(number) 0
Inlining cast (volatile byte) y_scroll ← (unumber)(number) -8
Inlining cast *((byte*~) main::enableVideoOutput1_$0) ← (unumber)(number) $80
Inlining cast *((byte*~) main::enableVideoOutput1_$1) ← (unumber)(number) $1e
Inlining cast (volatile byte) y_scroll ← (unumber)(number) 0
Inlining cast (volatile byte) y_scroll ← (unumber)(number) $ef
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 8192
Simplifying constant pointer cast (byte*) 9152
Simplifying constant pointer cast (byte*) 10176
Simplifying constant pointer cast (byte*) 16128
Simplifying constant pointer cast (byte*) 16407
Simplifying constant pointer cast (byte*) 0
Simplifying constant pointer cast (void()*) 0
Simplifying constant pointer cast (byte*) 8194
Simplifying constant pointer cast (struct RICOH_2C02*) 8192
Simplifying constant pointer cast (struct RICOH_2A03*) 16384
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $3c0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $1e
Simplifying constant integer cast $20
Simplifying constant integer cast 0
Simplifying constant integer cast $20
Simplifying constant integer cast 0
Simplifying constant integer cast $20
Simplifying constant integer cast $20
Simplifying constant integer cast 0
Simplifying constant integer cast $1e
Simplifying constant integer cast 0
Simplifying constant integer cast $20
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $20
Simplifying constant integer cast $20
Simplifying constant integer cast $20
Simplifying constant integer cast $20
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast $40
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $100
Simplifying constant integer cast 0
Simplifying constant integer cast $200
Simplifying constant integer cast 0
Simplifying constant integer cast $300
Simplifying constant integer cast 0
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast $500
Simplifying constant integer cast 0
Simplifying constant integer cast $600
Simplifying constant integer cast 0
Simplifying constant integer cast $700
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast -8
Simplifying constant integer cast $80
Simplifying constant integer cast $1e
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $f0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast $ef
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $3c0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $1e
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $1e
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $200
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $300
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $400
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $500
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $600
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $700
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) -8
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $1e
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $f0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) $ef
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) readJoy1::$2 ← *((byte*~) readJoy1::$6) & (byte) 1
Inferred type updated to byte in (unumber~) readJoy1::$3 ← (byte~) readJoy1::$1 | (byte~) readJoy1::$2
Inferred type updated to word in (unumber~) gotoxy::$4 ← (word~) gotoxy::$6 * (byte) $20
Inferred type updated to byte in (unumber~) main::initNES1_waitForVBlank1_$0 ← *((byte*~) main::initNES1_waitForVBlank1_$2) & (byte) $80
Inferred type updated to byte in (unumber~) main::initNES1_waitForVBlank2_$0 ← *((byte*~) main::initNES1_waitForVBlank2_$2) & (byte) $80
Inversing boolean not [130] (bool~) gotoxy::$1 ← (byte) gotoxy::y#2 <= (byte) $1e from [129] (bool~) gotoxy::$0 ← (byte) gotoxy::y#2 > (byte) $1e
Inversing boolean not [134] (bool~) gotoxy::$3 ← (byte) gotoxy::x#2 < (byte) $20 from [133] (bool~) gotoxy::$2 ← (byte) gotoxy::x#2 >= (byte) $20
Inversing boolean not [160] (bool~) cputc::$4 ← (byte) conio_cursor_x != (byte) $20 from [159] (bool~) cputc::$3 ← (byte) conio_cursor_x == (byte) $20
Inversing boolean not [170] (bool~) cscroll::$1 ← (byte) conio_cursor_y != (byte) $1e from [169] (bool~) cscroll::$0 ← (byte) conio_cursor_y == (byte) $1e
Inversing boolean not [239] (bool~) main::initNES1_waitForVBlank1_$1 ← (byte) 0 == (byte~) main::initNES1_waitForVBlank1_$0 from [238] (bool~) main::initNES1_waitForVBlank1_$4 ← (byte) 0 != (byte~) main::initNES1_waitForVBlank1_$0
Inversing boolean not [258] (bool~) main::initNES1_waitForVBlank2_$1 ← (byte) 0 == (byte~) main::initNES1_waitForVBlank2_$0 from [257] (bool~) main::initNES1_waitForVBlank2_$4 ← (byte) 0 != (byte~) main::initNES1_waitForVBlank2_$0
Inversing boolean not [297] (bool~) vblank::$2 ← (byte) 0 == (byte~) vblank::$1 from [296] (bool~) vblank::$17 ← (byte) 0 != (byte~) vblank::$1
Inversing boolean not [302] (bool~) vblank::$4 ← (byte) 0 == (byte~) vblank::$3 from [301] (bool~) vblank::$18 ← (byte) 0 != (byte~) vblank::$3
Inversing boolean not [307] (bool~) vblank::$10 ← (volatile byte) y_scroll != (byte) $f0 from [306] (bool~) vblank::$9 ← (volatile byte) y_scroll == (byte) $f0
Inversing boolean not [314] (bool~) vblank::$6 ← (byte) 0 == (byte~) vblank::$5 from [313] (bool~) vblank::$19 ← (byte) 0 != (byte~) vblank::$5
Inversing boolean not [319] (bool~) vblank::$12 ← (volatile byte) y_scroll != (byte) $ff from [318] (bool~) vblank::$11 ← (volatile byte) y_scroll == (byte) $ff
Inversing boolean not [326] (bool~) vblank::$8 ← (byte) 0 == (byte~) vblank::$7 from [325] (bool~) vblank::$20 ← (byte) 0 != (byte~) vblank::$7
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias readJoy1::joy#2 = readJoy1::joy#4 readJoy1::joy#3 readJoy1::return#0 readJoy1::return#3 readJoy1::return#1 
Alias readJoy1::i#2 = readJoy1::i#3 
Alias readJoy1::joy#1 = readJoy1::$3 
Alias ppuDataFill::ppuDataPrepare1_ppuData#0 = ppuDataFill::ppuData#4 ppuDataFill::ppuDataPrepare1_ppuData#1 
Alias ppuDataFill::size#5 = ppuDataFill::size#7 ppuDataFill::size#9 
Alias ppuDataFill::val#10 = ppuDataFill::val#8 ppuDataFill::val#6 
Alias ppuDataFill::val#4 = ppuDataFill::val#5 ppuDataFill::ppuDataPut1_val#0 ppuDataFill::ppuDataPut1_val#1 ppuDataFill::val#9 ppuDataFill::val#7 
Alias ppuDataFill::i#2 = ppuDataFill::i#5 ppuDataFill::i#4 ppuDataFill::i#3 
Alias ppuDataFill::size#10 = ppuDataFill::size#4 ppuDataFill::size#8 ppuDataFill::size#6 
Alias ppuDataTransfer::ppuDataPrepare1_ppuData#0 = ppuDataTransfer::ppuData#1 ppuDataTransfer::ppuDataPrepare1_ppuData#1 
Alias ppuDataTransfer::cpuData#1 = ppuDataTransfer::cpuData#2 ppuDataTransfer::cpuData#3 
Alias ppuDataTransfer::size#2 = ppuDataTransfer::size#4 ppuDataTransfer::size#6 
Alias ppuDataTransfer::cpuSrc#2 = ppuDataTransfer::cpuSrc#4 ppuDataTransfer::cpuSrc#5 ppuDataTransfer::cpuSrc#3 
Alias ppuDataTransfer::i#2 = ppuDataTransfer::i#5 ppuDataTransfer::i#4 ppuDataTransfer::i#3 
Alias ppuDataTransfer::size#1 = ppuDataTransfer::size#7 ppuDataTransfer::size#5 ppuDataTransfer::size#3 
Alias ppuDataTransfer::ppuDataPut1_val#0 = ppuDataTransfer::ppuDataPut1_val#1 
Alias ppuDataSet::ppuDataPrepare1_ppuData#0 = ppuDataSet::ppuData#2 ppuDataSet::ppuDataPrepare1_ppuData#1 
Alias ppuDataSet::val#2 = ppuDataSet::val#3 ppuDataSet::val#4 ppuDataSet::ppuDataPut1_val#0 ppuDataSet::ppuDataPut1_val#1 
Alias ppuDataGet::ppuDataPrepare1_ppuData#0 = ppuDataGet::ppuData#1 ppuDataGet::ppuDataPrepare1_ppuData#1 
Alias ppuDataGet::ppuDataRead1_return#0 = ppuDataGet::ppuDataRead1_return#2 ppuDataGet::ppuDataRead1_return#1 ppuDataGet::ppuDataRead1_return#3 ppuDataGet::$1 ppuDataGet::return#0 ppuDataGet::return#3 ppuDataGet::return#1 
Alias gotoxy::x#4 = gotoxy::x#5 
Alias gotoxy::line_offset#0 = gotoxy::$4 
Alias gotoxy::y#4 = gotoxy::y#5 
Alias cputc::c#1 = cputc::c#2 
Alias cscroll::line2#6 = cscroll::line2#7 
Alias cscroll::y#2 = cscroll::y#6 
Alias cscroll::line1#6 = cscroll::line1#7 
Alias cscroll::line2#2 = cscroll::line2#4 cscroll::line2#3 cscroll::line2#8 
Alias cscroll::line1#2 = cscroll::line1#4 cscroll::line1#5 cscroll::line1#3 cscroll::line1#8 
Alias cscroll::x#2 = cscroll::x#5 cscroll::x#4 cscroll::x#3 
Alias cscroll::y#3 = cscroll::y#8 cscroll::y#4 cscroll::y#7 cscroll::y#5 
Alias ppuDataGet::return#2 = ppuDataGet::return#4 
Alias cscroll::ch#0 = cscroll::$5 
Alias cscroll::line2#1 = cscroll::line2#5 
Alias cputs::c#1 = cputs::c#2 
Alias cputs::s#0 = cputs::s#5 cputs::s#4 
Alias ppuDataTransfer::size#0 = main::$1 
Alias readJoy1::return#2 = readJoy1::return#4 
Alias vblank::joy#0 = vblank::$0 vblank::joy#4 vblank::joy#5 
Alias vblank::joy#1 = vblank::joy#6 vblank::joy#7 
Alias vblank::joy#2 = vblank::joy#8 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias gotoxy::x#2 = gotoxy::x#4 
Alias gotoxy::y#3 = gotoxy::y#4 
Alias vblank::joy#0 = vblank::joy#1 vblank::joy#2 vblank::joy#3 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Identical Phi Values (word) ppuDataFill::size#10 (word) ppuDataFill::size#5
Identical Phi Values (byte) ppuDataFill::val#4 (byte) ppuDataFill::val#10
Identical Phi Values (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#0 (nomodify void*) ppuDataTransfer::ppuData#0
Identical Phi Values (nomodify void*) ppuDataTransfer::cpuData#1 (nomodify void*) ppuDataTransfer::cpuData#0
Identical Phi Values (word) ppuDataTransfer::size#2 (word) ppuDataTransfer::size#0
Identical Phi Values (word) ppuDataTransfer::size#1 (word) ppuDataTransfer::size#2
Identical Phi Values (nomodify void*) ppuDataGet::ppuDataPrepare1_ppuData#0 (nomodify void*) ppuDataGet::ppuData#0
Identical Phi Values (byte) gotoxy::y#2 (byte) gotoxy::y#1
Identical Phi Values (byte) gotoxy::x#2 (byte) gotoxy::x#1
Identical Phi Values (byte) cputc::c#1 (byte) cputc::c#0
Identical Phi Values (byte) cscroll::y#3 (byte) cscroll::y#2
Identical Phi Values (to_nomodify byte*) cputs::s#3 (to_nomodify byte*) cputs::s#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) readJoy1::$0 [10] if((byte) readJoy1::i#2<(byte) 8) goto readJoy1::@2
Simple Condition (bool~) ppuDataFill::$1 [30] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#5) goto ppuDataFill::@2
Simple Condition (bool~) ppuDataTransfer::$1 [49] if((word) ppuDataTransfer::i#2<(word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2
Simple Condition (bool~) gotoxy::$1 [97] if((byte) gotoxy::y#1<=(byte) $1e) goto gotoxy::@1
Simple Condition (bool~) gotoxy::$3 [100] if((byte) gotoxy::x#1<(byte) $20) goto gotoxy::@2
Simple Condition (bool~) cputc::$0 [113] if((byte) cputc::c#0==(byte) '
') goto cputc::@1
Simple Condition (bool~) cputc::$4 [121] if((byte) conio_cursor_x!=(byte) $20) goto cputc::@return
Simple Condition (bool~) cscroll::$1 [130] if((byte) conio_cursor_y!=(byte) $1e) goto cscroll::@return
Simple Condition (bool~) cscroll::$8 [132] if((byte) 0!=(byte) conio_scroll_enable) goto cscroll::@3
Simple Condition (bool~) cscroll::$3 [141] if((byte) cscroll::y#2<(byte)(number) $1e-(number) 1) goto cscroll::@5
Simple Condition (bool~) cscroll::$4 [151] if((byte) cscroll::x#2<(byte) $20) goto cscroll::@8
Simple Condition (bool~) cputs::$1 [170] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
Simple Condition (bool~) main::initNES1_waitForVBlank1_$1 [190] if((byte) 0==(byte~) main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1
Simple Condition (bool~) main::initNES1_$5 [203] if((byte) 0!=(byte) main::initNES1_i#1) goto main::initNES1_@1
Simple Condition (bool~) main::initNES1_waitForVBlank2_$1 [208] if((byte) 0==(byte~) main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1
Simple Condition (bool~) main::$8 [234] if((number) 0!=(number) 1) goto main::@1
Simple Condition (bool~) vblank::$2 [243] if((byte) 0==(byte~) vblank::$1) goto vblank::@1
Simple Condition (bool~) vblank::$4 [246] if((byte) 0==(byte~) vblank::$3) goto vblank::@2
Simple Condition (bool~) vblank::$10 [249] if((volatile byte) y_scroll!=(byte) $f0) goto vblank::@1
Simple Condition (bool~) vblank::$6 [253] if((byte) 0==(byte~) vblank::$5) goto vblank::@3
Simple Condition (bool~) vblank::$12 [256] if((volatile byte) y_scroll!=(byte) $ff) goto vblank::@2
Simple Condition (bool~) vblank::$8 [260] if((byte) 0==(byte~) vblank::$7) goto vblank::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [0] (byte*~) readJoy1::$7 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [3] (byte*~) readJoy1::$8 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [12] (byte*~) readJoy1::$9 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [20] (byte*~) ppuDataFill::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [24] (byte*~) ppuDataFill::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [31] (byte*~) ppuDataFill::ppuDataPut1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [38] (byte*~) ppuDataTransfer::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [42] (byte*~) ppuDataTransfer::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [51] (byte*~) ppuDataTransfer::ppuDataPut1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [59] (byte*~) ppuDataSet::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [63] (byte*~) ppuDataSet::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [66] (byte*~) ppuDataSet::ppuDataPut1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [72] (byte*~) ppuDataGet::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [76] (byte*~) ppuDataGet::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [79] (byte*~) ppuDataGet::ppuDataRead1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [175] (byte*~) main::initNES1_disableVideoOutput1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [178] (byte*~) main::initNES1_disableVideoOutput1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [182] (byte*~) main::initNES1_disableAudioOutput1_$1 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [186] (byte*~) main::initNES1_waitForVBlank1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [204] (byte*~) main::initNES1_waitForVBlank2_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [210] (word) ppuDataTransfer::size#0 ← sizeof  (const byte*) PALETTE
Constant right-side identified [227] (byte*~) main::enableVideoOutput1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [230] (byte*~) main::enableVideoOutput1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [262] (byte*~) vblank::$15 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [265] (byte*~) vblank::$16 ← (byte*)(const struct RICOH_2C02*) PPU
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) readJoy1::$7 = (byte*)APU
Constant (const byte*) readJoy1::$8 = (byte*)APU
Constant (const byte) readJoy1::joy#0 = 0
Constant (const byte) readJoy1::i#0 = 0
Constant (const byte*) readJoy1::$9 = (byte*)APU
Constant (const byte*) ppuDataFill::ppuDataPrepare1_$4 = (byte*)PPU
Constant (const byte*) ppuDataFill::ppuDataPrepare1_$5 = (byte*)PPU
Constant (const word) ppuDataFill::i#0 = 0
Constant (const byte*) ppuDataFill::ppuDataPut1_$1 = (byte*)PPU
Constant (const byte*) ppuDataTransfer::ppuDataPrepare1_$4 = (byte*)PPU
Constant (const byte*) ppuDataTransfer::ppuDataPrepare1_$5 = (byte*)PPU
Constant (const word) ppuDataTransfer::i#0 = 0
Constant (const byte*) ppuDataTransfer::ppuDataPut1_$1 = (byte*)PPU
Constant (const byte*) ppuDataSet::ppuDataPrepare1_$4 = (byte*)PPU
Constant (const byte*) ppuDataSet::ppuDataPrepare1_$5 = (byte*)PPU
Constant (const byte*) ppuDataSet::ppuDataPut1_$1 = (byte*)PPU
Constant (const byte*) ppuDataGet::ppuDataPrepare1_$4 = (byte*)PPU
Constant (const byte*) ppuDataGet::ppuDataPrepare1_$5 = (byte*)PPU
Constant (const byte*) ppuDataGet::ppuDataRead1_$1 = (byte*)PPU
Constant (const nomodify void*) ppuDataFill::ppuData#0 = (void*)CONIO_SCREEN_TEXT
Constant (const byte) ppuDataFill::val#0 = ' '
Constant (const word) ppuDataFill::size#0 = $3c0
Constant (const byte) gotoxy::y#0 = 0
Constant (const byte) gotoxy::x#0 = 0
Constant (const byte*) cscroll::line1#0 = CONIO_SCREEN_TEXT
Constant (const byte*) cscroll::line2#0 = CONIO_SCREEN_TEXT+$20
Constant (const byte) cscroll::y#0 = 0
Constant (const byte) gotoxy::x#1 = 0
Constant (const byte) gotoxy::y#1 = 0
Constant (const byte) cscroll::x#0 = 0
Constant (const nomodify void*) ppuDataFill::ppuData#1 = (void*)CONIO_SCREEN_TEXT+(word)$1e*$20-$20
Constant (const byte) ppuDataFill::val#1 = ' '
Constant (const word) ppuDataFill::size#1 = $20
Constant (const byte) cputs::c#0 = 0
Constant (const byte*) main::initNES1_disableVideoOutput1_$2 = (byte*)PPU
Constant (const byte*) main::initNES1_disableVideoOutput1_$3 = (byte*)PPU
Constant (const byte*) main::initNES1_disableAudioOutput1_$1 = (byte*)APU
Constant (const byte*) main::initNES1_waitForVBlank1_$3 = (byte*)PPU
Constant (const byte) main::initNES1_i#0 = 0
Constant (const byte*) main::initNES1_waitForVBlank2_$3 = (byte*)PPU
Constant (const word) ppuDataTransfer::size#0 = sizeof PALETTE
Constant (const nomodify void*) ppuDataTransfer::ppuData#0 = (void*)PPU_PALETTE
Constant (const nomodify void*) ppuDataTransfer::cpuData#0 = (void*)PALETTE
Constant (const nomodify void*) ppuDataFill::ppuData#2 = (void*)PPU_ATTRIBUTE_TABLE_0
Constant (const byte) ppuDataFill::val#2 = 0
Constant (const word) ppuDataFill::size#2 = $40
Constant (const nomodify void*) ppuDataFill::ppuData#3 = (void*)PPU_ATTRIBUTE_TABLE_1
Constant (const byte) ppuDataFill::val#3 = 0
Constant (const word) ppuDataFill::size#3 = $40
Constant (const to_nomodify byte*) cputs::s#1 = main::s
Constant (const byte*) main::enableVideoOutput1_$2 = (byte*)PPU
Constant (const byte*) main::enableVideoOutput1_$3 = (byte*)PPU
Constant (const byte*) vblank::$15 = (byte*)PPU
Constant (const byte*) vblank::$16 = (byte*)PPU
Constant (const byte) conio_scroll_enable = 1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) ppuDataTransfer::cpuSrc#0 = (byte*)ppuDataTransfer::cpuData#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [97] if((const byte) gotoxy::y#1<=(byte) $1e) goto gotoxy::@1
if() condition always true - replacing block destination [100] if((const byte) gotoxy::x#1<(byte) $20) goto gotoxy::@2
if() condition always true - replacing block destination [132] if((byte) 0!=(const byte) conio_scroll_enable) goto cscroll::@3
if() condition always true - replacing block destination [234] if((number) 0!=(number) 1) goto main::@1
Successful SSA optimization Pass2ConstantIfs
Converting *(pointer+n) to pointer[n] [2] *((byte*~) readJoy1::$4) ← (byte) 1  -- *(readJoy1::$7 + OFFSET_STRUCT_RICOH_2A03_JOY1)
Converting *(pointer+n) to pointer[n] [5] *((byte*~) readJoy1::$5) ← (byte) 0  -- *(readJoy1::$8 + OFFSET_STRUCT_RICOH_2A03_JOY1)
Converting *(pointer+n) to pointer[n] [14] (byte~) readJoy1::$2 ← *((byte*~) readJoy1::$6) & (byte) 1  -- *(readJoy1::$9 + OFFSET_STRUCT_RICOH_2A03_JOY1)
Converting *(pointer+n) to pointer[n] [22] *((byte*~) ppuDataFill::ppuDataPrepare1_$2) ← (byte~) ppuDataFill::ppuDataPrepare1_$0  -- *(ppuDataFill::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [26] *((byte*~) ppuDataFill::ppuDataPrepare1_$3) ← (byte~) ppuDataFill::ppuDataPrepare1_$1  -- *(ppuDataFill::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [33] *((byte*~) ppuDataFill::ppuDataPut1_$0) ← (byte) ppuDataFill::val#10  -- *(ppuDataFill::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Converting *(pointer+n) to pointer[n] [40] *((byte*~) ppuDataTransfer::ppuDataPrepare1_$2) ← (byte~) ppuDataTransfer::ppuDataPrepare1_$0  -- *(ppuDataTransfer::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [44] *((byte*~) ppuDataTransfer::ppuDataPrepare1_$3) ← (byte~) ppuDataTransfer::ppuDataPrepare1_$1  -- *(ppuDataTransfer::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [53] *((byte*~) ppuDataTransfer::ppuDataPut1_$0) ← (byte) ppuDataTransfer::ppuDataPut1_val#0  -- *(ppuDataTransfer::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Converting *(pointer+n) to pointer[n] [61] *((byte*~) ppuDataSet::ppuDataPrepare1_$2) ← (byte~) ppuDataSet::ppuDataPrepare1_$0  -- *(ppuDataSet::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [65] *((byte*~) ppuDataSet::ppuDataPrepare1_$3) ← (byte~) ppuDataSet::ppuDataPrepare1_$1  -- *(ppuDataSet::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [68] *((byte*~) ppuDataSet::ppuDataPut1_$0) ← (byte) ppuDataSet::val#2  -- *(ppuDataSet::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Converting *(pointer+n) to pointer[n] [74] *((byte*~) ppuDataGet::ppuDataPrepare1_$2) ← (byte~) ppuDataGet::ppuDataPrepare1_$0  -- *(ppuDataGet::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [78] *((byte*~) ppuDataGet::ppuDataPrepare1_$3) ← (byte~) ppuDataGet::ppuDataPrepare1_$1  -- *(ppuDataGet::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [81] (byte) ppuDataGet::ppuDataRead1_return#0 ← *((byte*~) ppuDataGet::ppuDataRead1_$0)  -- *(ppuDataGet::ppuDataRead1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Converting *(pointer+n) to pointer[n] [177] *((byte*~) main::initNES1_disableVideoOutput1_$0) ← (byte) 0  -- *(main::initNES1_disableVideoOutput1_$2 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL)
Converting *(pointer+n) to pointer[n] [180] *((byte*~) main::initNES1_disableVideoOutput1_$1) ← (byte) 0  -- *(main::initNES1_disableVideoOutput1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Converting *(pointer+n) to pointer[n] [184] *((byte*~) main::initNES1_disableAudioOutput1_$0) ← (byte) $40  -- *(main::initNES1_disableAudioOutput1_$1 + OFFSET_STRUCT_RICOH_2A03_DMC_FREQ)
Converting *(pointer+n) to pointer[n] [188] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*~) main::initNES1_waitForVBlank1_$2) & (byte) $80  -- *(main::initNES1_waitForVBlank1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Converting *(pointer+n) to pointer[n] [206] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*~) main::initNES1_waitForVBlank2_$2) & (byte) $80  -- *(main::initNES1_waitForVBlank2_$3 + OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Converting *(pointer+n) to pointer[n] [229] *((byte*~) main::enableVideoOutput1_$0) ← (byte) $80  -- *(main::enableVideoOutput1_$2 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL)
Converting *(pointer+n) to pointer[n] [232] *((byte*~) main::enableVideoOutput1_$1) ← (byte) $1e  -- *(main::enableVideoOutput1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Converting *(pointer+n) to pointer[n] [264] *((byte*~) vblank::$13) ← (volatile byte) x_scroll  -- *(vblank::$15 + OFFSET_STRUCT_RICOH_2C02_PPUSCROLL)
Converting *(pointer+n) to pointer[n] [267] *((byte*~) vblank::$14) ← (volatile byte) y_scroll  -- *(vblank::$16 + OFFSET_STRUCT_RICOH_2C02_PPUSCROLL)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero main::initNES1_disableVideoOutput1_$2 in [176] (byte*~) main::initNES1_disableVideoOutput1_$0 ← (const byte*) main::initNES1_disableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Simplifying expression containing zero main::initNES1_disableVideoOutput1_$2 in [177] *((const byte*) main::initNES1_disableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL) ← (byte) 0
Simplifying expression containing zero MEMORY in [193] *((const nomodify byte*) MEMORY+(byte) 0 + (byte) main::initNES1_i#2) ← (byte) 0
Simplifying expression containing zero main::enableVideoOutput1_$2 in [228] (byte*~) main::enableVideoOutput1_$0 ← (const byte*) main::enableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Simplifying expression containing zero main::enableVideoOutput1_$2 in [229] *((const byte*) main::enableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL) ← (byte) $80
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*~) readJoy1::$4 and assignment [0] (byte*~) readJoy1::$4 ← (const byte*) readJoy1::$7 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
Eliminating unused variable (byte*~) readJoy1::$5 and assignment [2] (byte*~) readJoy1::$5 ← (const byte*) readJoy1::$8 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
Eliminating unused variable (byte*~) readJoy1::$6 and assignment [7] (byte*~) readJoy1::$6 ← (const byte*) readJoy1::$9 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
Eliminating unused variable (byte*~) ppuDataFill::ppuDataPrepare1_$2 and assignment [14] (byte*~) ppuDataFill::ppuDataPrepare1_$2 ← (const byte*) ppuDataFill::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataFill::ppuDataPrepare1_$3 and assignment [17] (byte*~) ppuDataFill::ppuDataPrepare1_$3 ← (const byte*) ppuDataFill::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataFill::ppuDataPut1_$0 and assignment [21] (byte*~) ppuDataFill::ppuDataPut1_$0 ← (const byte*) ppuDataFill::ppuDataPut1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable (byte*~) ppuDataTransfer::ppuDataPrepare1_$2 and assignment [26] (byte*~) ppuDataTransfer::ppuDataPrepare1_$2 ← (const byte*) ppuDataTransfer::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataTransfer::ppuDataPrepare1_$3 and assignment [29] (byte*~) ppuDataTransfer::ppuDataPrepare1_$3 ← (const byte*) ppuDataTransfer::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataTransfer::ppuDataPut1_$0 and assignment [34] (byte*~) ppuDataTransfer::ppuDataPut1_$0 ← (const byte*) ppuDataTransfer::ppuDataPut1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable (byte*~) ppuDataSet::ppuDataPrepare1_$2 and assignment [41] (byte*~) ppuDataSet::ppuDataPrepare1_$2 ← (const byte*) ppuDataSet::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataSet::ppuDataPrepare1_$3 and assignment [44] (byte*~) ppuDataSet::ppuDataPrepare1_$3 ← (const byte*) ppuDataSet::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataSet::ppuDataPut1_$0 and assignment [46] (byte*~) ppuDataSet::ppuDataPut1_$0 ← (const byte*) ppuDataSet::ppuDataPut1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable (byte*~) ppuDataGet::ppuDataPrepare1_$2 and assignment [50] (byte*~) ppuDataGet::ppuDataPrepare1_$2 ← (const byte*) ppuDataGet::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataGet::ppuDataPrepare1_$3 and assignment [53] (byte*~) ppuDataGet::ppuDataPrepare1_$3 ← (const byte*) ppuDataGet::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataGet::ppuDataRead1_$0 and assignment [55] (byte*~) ppuDataGet::ppuDataRead1_$0 ← (const byte*) ppuDataGet::ppuDataRead1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable (byte*~) main::initNES1_disableVideoOutput1_$0 and assignment [119] (byte*~) main::initNES1_disableVideoOutput1_$0 ← (const byte*) main::initNES1_disableVideoOutput1_$2
Eliminating unused variable (byte*~) main::initNES1_disableVideoOutput1_$1 and assignment [121] (byte*~) main::initNES1_disableVideoOutput1_$1 ← (const byte*) main::initNES1_disableVideoOutput1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK
Eliminating unused variable (byte*~) main::initNES1_disableAudioOutput1_$0 and assignment [124] (byte*~) main::initNES1_disableAudioOutput1_$0 ← (const byte*) main::initNES1_disableAudioOutput1_$1 + (const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
Eliminating unused variable (byte*~) main::initNES1_waitForVBlank1_$2 and assignment [127] (byte*~) main::initNES1_waitForVBlank1_$2 ← (const byte*) main::initNES1_waitForVBlank1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
Eliminating unused variable (byte*~) main::initNES1_waitForVBlank2_$2 and assignment [141] (byte*~) main::initNES1_waitForVBlank2_$2 ← (const byte*) main::initNES1_waitForVBlank2_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
Eliminating unused variable (byte*~) main::enableVideoOutput1_$0 and assignment [152] (byte*~) main::enableVideoOutput1_$0 ← (const byte*) main::enableVideoOutput1_$2
Eliminating unused variable (byte*~) main::enableVideoOutput1_$1 and assignment [154] (byte*~) main::enableVideoOutput1_$1 ← (const byte*) main::enableVideoOutput1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK
Eliminating unused variable (byte*~) vblank::$13 and assignment [177] (byte*~) vblank::$13 ← (const byte*) vblank::$15 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
Eliminating unused variable (byte*~) vblank::$14 and assignment [179] (byte*~) vblank::$14 ← (const byte*) vblank::$16 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
Eliminating unused constant (const byte) cputs::c#0
Eliminating unused constant (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Eliminating unused constant (const byte) conio_scroll_enable
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte) gotoxy::y#3 from unused block gotoxy::@1
Eliminating variable (byte) gotoxy::x#3 from unused block gotoxy::@2
Eliminating variable (word~) gotoxy::$6 from unused block gotoxy::@2
Eliminating variable (word) gotoxy::line_offset#0 from unused block gotoxy::@2
Eliminating variable (byte*~) gotoxy::$5 from unused block gotoxy::@2
Removing unused procedure gotoxy
Removing unused procedure block gotoxy
Removing PHI-reference to removed block (gotoxy) in block gotoxy::@1
Removing unused procedure block gotoxy::@1
Removing PHI-reference to removed block (gotoxy::@1) in block gotoxy::@2
Removing unused procedure block gotoxy::@3
Removing unused procedure block gotoxy::@2
Removing unused procedure block gotoxy::@4
Removing unused procedure block gotoxy::@return
Removing unused block cscroll::@2
Removing unused block cscroll::@10
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolving array sizeof() sizeof (const byte*) PALETTE
Successful SSA optimization PassNSizeOfSimplification
Constant right-side identified [19] (byte~) ppuDataTransfer::ppuDataPrepare1_$0 ← > (const nomodify void*) ppuDataTransfer::ppuData#0
Constant right-side identified [21] (byte~) ppuDataTransfer::ppuDataPrepare1_$1 ← < (const nomodify void*) ppuDataTransfer::ppuData#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) ppuDataTransfer::ppuDataPrepare1_$0 = >ppuDataTransfer::ppuData#0
Constant (const byte) ppuDataTransfer::ppuDataPrepare1_$1 = <ppuDataTransfer::ppuData#0
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero <(const nomodify void*) ppuDataTransfer::ppuData#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Adding number conversion cast (unumber) $20 in 
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $20
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $20
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining Noop Cast [52] (nomodify void*) ppuDataSet::ppuData#0 ← (void*)(byte*~) cputc::$1 keeping ppuDataSet::ppuData#0
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings (const byte) readJoy1::joy#0
Inlining constant with var siblings (const byte) readJoy1::i#0
Inlining constant with var siblings (const word) ppuDataFill::i#0
Inlining constant with different constant siblings (const nomodify void*) ppuDataFill::ppuData#0
Inlining constant with var siblings (const byte) ppuDataFill::val#0
Inlining constant with var siblings (const word) ppuDataFill::size#0
Inlining constant with different constant siblings (const nomodify void*) ppuDataFill::ppuData#1
Inlining constant with var siblings (const byte) ppuDataFill::val#1
Inlining constant with var siblings (const word) ppuDataFill::size#1
Inlining constant with different constant siblings (const nomodify void*) ppuDataFill::ppuData#2
Inlining constant with var siblings (const byte) ppuDataFill::val#2
Inlining constant with var siblings (const word) ppuDataFill::size#2
Inlining constant with different constant siblings (const nomodify void*) ppuDataFill::ppuData#3
Inlining constant with var siblings (const byte) ppuDataFill::val#3
Inlining constant with var siblings (const word) ppuDataFill::size#3
Inlining constant with var siblings (const word) ppuDataTransfer::i#0
Inlining constant with var siblings (const byte*) ppuDataTransfer::cpuSrc#0
Inlining constant with var siblings (const byte*) cscroll::line1#0
Inlining constant with var siblings (const byte*) cscroll::line2#0
Inlining constant with var siblings (const byte) cscroll::y#0
Inlining constant with var siblings (const byte) cscroll::x#0
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#1
Inlining constant with var siblings (const byte) main::initNES1_i#0
Constant inlined ppuDataTransfer::i#0 = (word) 0
Constant inlined cputs::s#1 = (const byte*) main::s
Constant inlined ppuDataTransfer::ppuDataPrepare1_$1 = (byte) 0
Constant inlined ppuDataTransfer::ppuDataPrepare1_$0 = >(const nomodify void*) ppuDataTransfer::ppuData#0
Constant inlined main::initNES1_waitForVBlank2_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined CONIO_SCREEN_TEXT = (const nomodify byte*) PPU_NAME_TABLE_0
Constant inlined ppuDataFill::ppuDataPrepare1_$4 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataTransfer::ppuDataPrepare1_$5 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::ppuDataPrepare1_$5 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataTransfer::ppuDataPrepare1_$4 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataGet::ppuDataPrepare1_$4 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataGet::ppuDataPrepare1_$5 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::ppuData#1 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0+(word)(number) $1e*(number) $20-(byte) $20
Constant inlined ppuDataFill::ppuData#0 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0
Constant inlined ppuDataFill::ppuData#3 = (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_1
Constant inlined ppuDataFill::ppuData#2 = (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0
Constant inlined ppuDataTransfer::cpuSrc#0 = (byte*)(const nomodify void*) ppuDataTransfer::cpuData#0
Constant inlined cscroll::x#0 = (byte) 0
Constant inlined cscroll::line1#0 = (const nomodify byte*) PPU_NAME_TABLE_0
Constant inlined vblank::$15 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined vblank::$16 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined main::initNES1_i#0 = (byte) 0
Constant inlined ppuDataSet::ppuDataPrepare1_$5 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataSet::ppuDataPrepare1_$4 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::i#0 = (word) 0
Constant inlined main::enableVideoOutput1_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::val#3 = (byte) 0
Constant inlined main::enableVideoOutput1_$2 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined readJoy1::i#0 = (byte) 0
Constant inlined ppuDataFill::val#2 = (byte) 0
Constant inlined ppuDataTransfer::ppuDataPut1_$1 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::val#1 = (byte) ' '
Constant inlined ppuDataFill::ppuDataPut1_$1 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::val#0 = (byte) ' '
Constant inlined main::initNES1_disableVideoOutput1_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined main::initNES1_disableVideoOutput1_$2 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined main::initNES1_disableAudioOutput1_$1 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined readJoy1::joy#0 = (byte) 0
Constant inlined cscroll::y#0 = (byte) 0
Constant inlined cscroll::line2#0 = (const nomodify byte*) PPU_NAME_TABLE_0+(byte) $20
Constant inlined readJoy1::$9 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined ppuDataGet::ppuDataRead1_$1 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined main::initNES1_waitForVBlank1_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataSet::ppuDataPut1_$1 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::size#1 = (byte) $20
Constant inlined ppuDataFill::size#0 = (word) $3c0
Constant inlined readJoy1::$7 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined ppuDataFill::size#3 = (byte) $40
Constant inlined readJoy1::$8 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined ppuDataFill::size#2 = (byte) $40
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL)
Successful SSA optimization Pass2ConstantAdditionElimination
Added new block during phi lifting main::@8(between main::initNES1_@1 and main::initNES1_@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @4
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::initNES1_waitForVBlank1
Adding NOP phi() at start of main::initNES1_@6
Adding NOP phi() at start of main::initNES1_waitForVBlank2
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of cputs
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@6
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of cputln::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@6
Adding NOP phi() at start of ppuDataSet::@1
Adding NOP phi() at start of ppuDataGet
Adding NOP phi() at start of ppuDataGet::ppuDataRead1_@return
Adding NOP phi() at start of ppuDataGet::@1
Adding NOP phi() at start of ppuDataFill::@3
Adding NOP phi() at start of ppuDataFill::@2
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of ppuDataTransfer
Adding NOP phi() at start of ppuDataTransfer::@3
Adding NOP phi() at start of vblank
Adding NOP phi() at start of readJoy1::@3
CALL GRAPH
Calls in [] to main:7 
Calls in [main] to ppuDataTransfer:37 ppuDataFill:39 ppuDataFill:41 clrscr:43 cputs:45 
Calls in [cputs] to cputc:59 
Calls in [cputc] to ppuDataSet:66 cputln:70 cputln:74 
Calls in [cputln] to cscroll:79 
Calls in [cscroll] to ppuDataFill:88 ppuDataGet:101 ppuDataSet:109 
Calls in [clrscr] to ppuDataFill:146 
Calls in [vblank] to readJoy1:165 

Created 18 initial phi equivalence classes
Coalesced [51] main::initNES1_i#3 ← main::initNES1_i#1
Coalesced [60] cputs::s#6 ← cputs::s#0
Coalesced [65] ppuDataSet::val#5 ← ppuDataSet::val#0
Coalesced [92] cscroll::line2#11 ← cscroll::line2#6
Coalesced [93] cscroll::line1#11 ← cscroll::line1#6
Coalesced [97] cscroll::y#9 ← cscroll::y#1
Coalesced (already) [98] cscroll::line2#9 ← cscroll::line2#2
Coalesced (already) [99] cscroll::line1#9 ← cscroll::line1#2
Coalesced [107] ppuDataSet::ppuDataPrepare1_ppuData#3 ← ppuDataSet::ppuData#1
Coalesced [108] ppuDataSet::val#6 ← ppuDataSet::val#1
Coalesced [112] cscroll::x#6 ← cscroll::x#1
Coalesced [113] cscroll::line2#10 ← cscroll::line2#1
Coalesced [114] cscroll::line1#10 ← cscroll::line1#1
Coalesced [144] ppuDataFill::i#6 ← ppuDataFill::i#1
Coalesced [162] ppuDataTransfer::i#6 ← ppuDataTransfer::i#1
Coalesced [163] ppuDataTransfer::cpuSrc#6 ← ppuDataTransfer::cpuSrc#1
Coalesced [197] readJoy1::i#4 ← readJoy1::i#1
Coalesced [198] readJoy1::joy#5 ← readJoy1::joy#1
Coalesced down to 16 phi equivalence classes
Culled Empty Block (label) @4
Culled Empty Block (label) main::initNES1_@6
Culled Empty Block (label) main::@8
Culled Empty Block (label) cputs::@3
Culled Empty Block (label) cputc::@6
Culled Empty Block (label) cputc::@4
Culled Empty Block (label) cputln::@1
Culled Empty Block (label) cscroll::@1
Culled Empty Block (label) cscroll::@3
Culled Empty Block (label) cscroll::@5
Culled Empty Block (label) ppuDataSet::@1
Culled Empty Block (label) ppuDataGet::ppuDataRead1_@return
Culled Empty Block (label) ppuDataGet::@1
Culled Empty Block (label) ppuDataFill::@3
Culled Empty Block (label) ppuDataFill::@2
Culled Empty Block (label) ppuDataTransfer::@3
Culled Empty Block (label) readJoy1::@3
Renumbering block ppuDataFill::@4 to ppuDataFill::@2
Renumbering block ppuDataTransfer::@4 to ppuDataTransfer::@3
Renumbering block cputc::@5 to cputc::@4
Renumbering block cscroll::@4 to cscroll::@1
Renumbering block cscroll::@6 to cscroll::@2
Renumbering block cscroll::@7 to cscroll::@3
Renumbering block cscroll::@8 to cscroll::@4
Renumbering block cscroll::@9 to cscroll::@5
Renumbering block cscroll::@11 to cscroll::@6
Renumbering block cscroll::@12 to cscroll::@7
Renumbering block cscroll::@13 to cscroll::@8
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::initNES1_waitForVBlank1
Adding NOP phi() at start of main::initNES1_waitForVBlank2
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of cputs
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cscroll::@2
Adding NOP phi() at start of ppuDataGet
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of ppuDataTransfer
Adding NOP phi() at start of vblank

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_line_text ← (const nomodify byte*) PPU_NAME_TABLE_0
  to:@2
@2: scope:[]  from @1
  [4] (volatile byte) x_scroll ← (byte) 0
  [5] (volatile byte) y_scroll ← (byte) 0
  to:@3
@3: scope:[]  from @2
  [6] phi()
  [7] call main 
  to:@end
@end: scope:[]  from @3
  [8] phi()

(void()) main()
main: scope:[main]  from @3
  [9] phi()
  to:main::initNES1
main::initNES1: scope:[main]  from main
  asm { cld ldx#$ff txs  }
  to:main::initNES1_disableVideoOutput1
main::initNES1_disableVideoOutput1: scope:[main]  from main::initNES1
  [11] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0
  [12] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0
  to:main::initNES1_disableAudioOutput1
main::initNES1_disableAudioOutput1: scope:[main]  from main::initNES1_disableVideoOutput1
  [13] *((const nomodify byte*) FR_COUNTER) ← (byte) $40
  [14] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40
  to:main::initNES1_clearVBlankFlag1
main::initNES1_clearVBlankFlag1: scope:[main]  from main::initNES1_disableAudioOutput1
  asm { ldaPPU_PPUSTATUS  }
  to:main::initNES1_waitForVBlank1
main::initNES1_waitForVBlank1: scope:[main]  from main::initNES1_clearVBlankFlag1
  [16] phi()
  to:main::initNES1_waitForVBlank1_@1
main::initNES1_waitForVBlank1_@1: scope:[main]  from main::initNES1_waitForVBlank1 main::initNES1_waitForVBlank1_@1
  [17] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80
  [18] if((byte) 0==(byte~) main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1
  to:main::initNES1_@1
main::initNES1_@1: scope:[main]  from main::initNES1_@1 main::initNES1_waitForVBlank1_@1
  [19] (byte) main::initNES1_i#2 ← phi( main::initNES1_@1/(byte) main::initNES1_i#1 main::initNES1_waitForVBlank1_@1/(byte) 0 )
  [20] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0
  [21] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0
  [22] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0
  [23] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0
  [24] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0
  [25] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0
  [26] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0
  [27] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0
  [28] (byte) main::initNES1_i#1 ← ++ (byte) main::initNES1_i#2
  [29] if((byte) 0!=(byte) main::initNES1_i#1) goto main::initNES1_@1
  to:main::initNES1_waitForVBlank2
main::initNES1_waitForVBlank2: scope:[main]  from main::initNES1_@1
  [30] phi()
  to:main::initNES1_waitForVBlank2_@1
main::initNES1_waitForVBlank2_@1: scope:[main]  from main::initNES1_waitForVBlank2 main::initNES1_waitForVBlank2_@1
  [31] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80
  [32] if((byte) 0==(byte~) main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1
  to:main::initNES1_@7
main::initNES1_@7: scope:[main]  from main::initNES1_waitForVBlank2_@1
  asm { ldaPPU_PPUSTATUS  }
  to:main::@2
main::@2: scope:[main]  from main::initNES1_@7
  [34] phi()
  [35] call ppuDataTransfer 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [36] phi()
  [37] call ppuDataFill 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [38] phi()
  [39] call ppuDataFill 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [40] phi()
  [41] call clrscr 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [42] phi()
  [43] call cputs 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [44] (volatile byte) x_scroll ← (byte) 0
  [45] (volatile byte) y_scroll ← (byte) -8
  to:main::enableVideoOutput1
main::enableVideoOutput1: scope:[main]  from main::@7
  [46] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80
  [47] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $1e
  to:main::@1
main::@1: scope:[main]  from main::@1 main::enableVideoOutput1
  [48] phi()
  to:main::@1

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@6
  [49] phi()
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [50] (to_nomodify byte*) cputs::s#2 ← phi( cputs/(const byte*) main::s cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [51] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2)
  [52] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2
  [53] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [54] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [55] (byte) cputc::c#0 ← (byte) cputs::c#1
  [56] call cputc 
  to:cputs::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2
  [57] if((byte) cputc::c#0==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [58] (nomodify byte*) ppuDataSet::ppuData#0 ← (byte*) conio_line_text + (byte) conio_cursor_x
  [59] (byte) ppuDataSet::val#0 ← (byte) cputc::c#0
  [60] (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#2 ← (void*)(nomodify byte*) ppuDataSet::ppuData#0
  [61] call ppuDataSet 
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@2
  [62] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [63] if((byte) conio_cursor_x!=(byte) $20) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@4
  [64] phi()
  [65] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@3 cputc::@4
  [66] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [67] phi()
  [68] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [69] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $20
  [70] (byte) conio_cursor_x ← (byte) 0
  [71] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [72] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [73] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputln
  [74] if((byte) conio_cursor_y!=(byte) $1e) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll cscroll::@5
  [75] (byte*) cscroll::line1#6 ← phi( cscroll/(const nomodify byte*) PPU_NAME_TABLE_0 cscroll::@5/(byte*) cscroll::line1#2 )
  [75] (byte*) cscroll::line2#6 ← phi( cscroll/(const nomodify byte*) PPU_NAME_TABLE_0+(byte) $20 cscroll::@5/(byte*) cscroll::line2#2 )
  [75] (byte) cscroll::y#2 ← phi( cscroll/(byte) 0 cscroll::@5/(byte) cscroll::y#1 )
  [76] if((byte) cscroll::y#2<(byte)(number) $1e-(number) 1) goto cscroll::@3
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [77] phi()
  [78] call ppuDataFill 
  to:cscroll::@6
cscroll::@6: scope:[cscroll]  from cscroll::@2
  [79] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $20
  [80] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@6
  [81] return 
  to:@return
cscroll::@3: scope:[cscroll]  from cscroll::@1 cscroll::@8
  [82] (byte*) cscroll::line1#2 ← phi( cscroll::@8/(byte*) cscroll::line1#1 cscroll::@1/(byte*) cscroll::line1#6 )
  [82] (byte*) cscroll::line2#2 ← phi( cscroll::@8/(byte*) cscroll::line2#1 cscroll::@1/(byte*) cscroll::line2#6 )
  [82] (byte) cscroll::x#2 ← phi( cscroll::@8/(byte) cscroll::x#1 cscroll::@1/(byte) 0 )
  [83] if((byte) cscroll::x#2<(byte) $20) goto cscroll::@4
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@3
  [84] (byte) cscroll::y#1 ← ++ (byte) cscroll::y#2
  to:cscroll::@1
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [85] (nomodify void*) ppuDataGet::ppuData#0 ← (void*)(byte*) cscroll::line2#2
  [86] call ppuDataGet 
  [87] (byte) ppuDataGet::return#2 ← (byte) ppuDataGet::ppuDataRead1_return#0
  to:cscroll::@7
cscroll::@7: scope:[cscroll]  from cscroll::@4
  [88] (byte) cscroll::ch#0 ← (byte) ppuDataGet::return#2
  [89] (byte*) cscroll::line2#1 ← ++ (byte*) cscroll::line2#2
  [90] (nomodify void*) ppuDataSet::ppuData#1 ← (void*)(byte*) cscroll::line1#2
  [91] (byte) ppuDataSet::val#1 ← (byte) cscroll::ch#0
  [92] call ppuDataSet 
  to:cscroll::@8
cscroll::@8: scope:[cscroll]  from cscroll::@7
  [93] (byte*) cscroll::line1#1 ← ++ (byte*) cscroll::line1#2
  [94] (byte) cscroll::x#1 ← ++ (byte) cscroll::x#2
  to:cscroll::@3

(void()) ppuDataSet((nomodify void*) ppuDataSet::ppuData , (byte) ppuDataSet::val)
ppuDataSet: scope:[ppuDataSet]  from cputc::@2 cscroll::@7
  [95] (byte) ppuDataSet::val#2 ← phi( cputc::@2/(byte) ppuDataSet::val#0 cscroll::@7/(byte) ppuDataSet::val#1 )
  [95] (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 ← phi( cputc::@2/(nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#2 cscroll::@7/(nomodify void*) ppuDataSet::ppuData#1 )
  to:ppuDataSet::ppuDataPrepare1
ppuDataSet::ppuDataPrepare1: scope:[ppuDataSet]  from ppuDataSet
  [96] (byte~) ppuDataSet::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0
  [97] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataSet::ppuDataPrepare1_$0
  [98] (byte~) ppuDataSet::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0
  [99] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataSet::ppuDataPrepare1_$1
  to:ppuDataSet::ppuDataPut1
ppuDataSet::ppuDataPut1: scope:[ppuDataSet]  from ppuDataSet::ppuDataPrepare1
  [100] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataSet::val#2
  to:ppuDataSet::@return
ppuDataSet::@return: scope:[ppuDataSet]  from ppuDataSet::ppuDataPut1
  [101] return 
  to:@return

(byte()) ppuDataGet((nomodify void*) ppuDataGet::ppuData)
ppuDataGet: scope:[ppuDataGet]  from cscroll::@4
  [102] phi()
  to:ppuDataGet::ppuDataPrepare1
ppuDataGet::ppuDataPrepare1: scope:[ppuDataGet]  from ppuDataGet
  [103] (byte~) ppuDataGet::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataGet::ppuData#0
  [104] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataGet::ppuDataPrepare1_$0
  [105] (byte~) ppuDataGet::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataGet::ppuData#0
  [106] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataGet::ppuDataPrepare1_$1
  to:ppuDataGet::ppuDataRead1
ppuDataGet::ppuDataRead1: scope:[ppuDataGet]  from ppuDataGet::ppuDataPrepare1
  [107] (byte) ppuDataGet::ppuDataRead1_return#0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA)
  to:ppuDataGet::@return
ppuDataGet::@return: scope:[ppuDataGet]  from ppuDataGet::ppuDataRead1
  [108] return 
  to:@return

(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
ppuDataFill: scope:[ppuDataFill]  from clrscr cscroll::@2 main::@3 main::@4
  [109] (byte) ppuDataFill::val#10 ← phi( clrscr/(byte) ' ' cscroll::@2/(byte) ' ' main::@3/(byte) 0 main::@4/(byte) 0 )
  [109] (word) ppuDataFill::size#5 ← phi( clrscr/(word) $3c0 cscroll::@2/(byte) $20 main::@3/(byte) $40 main::@4/(byte) $40 )
  [109] (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 ← phi( clrscr/(void*)(const nomodify byte*) PPU_NAME_TABLE_0 cscroll::@2/(void*)(const nomodify byte*) PPU_NAME_TABLE_0+(word)(number) $1e*(number) $20-(byte) $20 main::@3/(void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 main::@4/(void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_1 )
  to:ppuDataFill::ppuDataPrepare1
ppuDataFill::ppuDataPrepare1: scope:[ppuDataFill]  from ppuDataFill
  [110] (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0
  [111] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$0
  [112] (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0
  [113] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$1
  to:ppuDataFill::@1
ppuDataFill::@1: scope:[ppuDataFill]  from ppuDataFill::@2 ppuDataFill::ppuDataPrepare1
  [114] (word) ppuDataFill::i#2 ← phi( ppuDataFill::ppuDataPrepare1/(word) 0 ppuDataFill::@2/(word) ppuDataFill::i#1 )
  [115] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#5) goto ppuDataFill::ppuDataPut1
  to:ppuDataFill::@return
ppuDataFill::@return: scope:[ppuDataFill]  from ppuDataFill::@1
  [116] return 
  to:@return
ppuDataFill::ppuDataPut1: scope:[ppuDataFill]  from ppuDataFill::@1
  [117] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataFill::val#10
  to:ppuDataFill::@2
ppuDataFill::@2: scope:[ppuDataFill]  from ppuDataFill::ppuDataPut1
  [118] (word) ppuDataFill::i#1 ← ++ (word) ppuDataFill::i#2
  to:ppuDataFill::@1

(void()) clrscr()
clrscr: scope:[clrscr]  from main::@5
  [119] phi()
  [120] call ppuDataFill 
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr
  [121] (byte) conio_cursor_x ← (byte) 0
  [122] (byte) conio_cursor_y ← (byte) 0
  [123] (byte*) conio_line_text ← (const nomodify byte*) PPU_NAME_TABLE_0
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@1
  [124] return 
  to:@return

(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
ppuDataTransfer: scope:[ppuDataTransfer]  from main::@2
  [125] phi()
  to:ppuDataTransfer::ppuDataPrepare1
ppuDataTransfer::ppuDataPrepare1: scope:[ppuDataTransfer]  from ppuDataTransfer
  [126] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0
  [127] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0
  to:ppuDataTransfer::@1
ppuDataTransfer::@1: scope:[ppuDataTransfer]  from ppuDataTransfer::@3 ppuDataTransfer::ppuDataPrepare1
  [128] (byte*) ppuDataTransfer::cpuSrc#2 ← phi( ppuDataTransfer::ppuDataPrepare1/(byte*)(const nomodify void*) ppuDataTransfer::cpuData#0 ppuDataTransfer::@3/(byte*) ppuDataTransfer::cpuSrc#1 )
  [128] (word) ppuDataTransfer::i#2 ← phi( ppuDataTransfer::ppuDataPrepare1/(word) 0 ppuDataTransfer::@3/(word) ppuDataTransfer::i#1 )
  [129] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2
  to:ppuDataTransfer::@return
ppuDataTransfer::@return: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  [130] return 
  to:@return
ppuDataTransfer::@2: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  [131] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2)
  to:ppuDataTransfer::ppuDataPut1
ppuDataTransfer::ppuDataPut1: scope:[ppuDataTransfer]  from ppuDataTransfer::@2
  [132] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataTransfer::ppuDataPut1_val#0
  to:ppuDataTransfer::@3
ppuDataTransfer::@3: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPut1
  [133] (byte*) ppuDataTransfer::cpuSrc#1 ← ++ (byte*) ppuDataTransfer::cpuSrc#2
  [134] (word) ppuDataTransfer::i#1 ← ++ (word) ppuDataTransfer::i#2
  to:ppuDataTransfer::@1

interrupt(HARDWARE_STACK)(void()) vblank()
vblank: scope:[vblank]  from
  [135] phi()
  [136] call readJoy1 
  [137] (byte) readJoy1::return#2 ← (byte) readJoy1::joy#2
  to:vblank::@11
vblank::@11: scope:[vblank]  from vblank
  [138] (byte) vblank::joy#0 ← (byte) readJoy1::return#2
  [139] (byte~) vblank::$1 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_DOWN
  [140] if((byte) 0==(byte~) vblank::$1) goto vblank::@1
  to:vblank::@5
vblank::@5: scope:[vblank]  from vblank::@11
  [141] (volatile byte) y_scroll ← ++ (volatile byte) y_scroll
  [142] if((volatile byte) y_scroll!=(byte) $f0) goto vblank::@1
  to:vblank::@6
vblank::@6: scope:[vblank]  from vblank::@5
  [143] (volatile byte) y_scroll ← (byte) 0
  to:vblank::@1
vblank::@1: scope:[vblank]  from vblank::@11 vblank::@5 vblank::@6
  [144] (byte~) vblank::$3 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_UP
  [145] if((byte) 0==(byte~) vblank::$3) goto vblank::@2
  to:vblank::@7
vblank::@7: scope:[vblank]  from vblank::@1
  [146] (volatile byte) y_scroll ← -- (volatile byte) y_scroll
  [147] if((volatile byte) y_scroll!=(byte) $ff) goto vblank::@2
  to:vblank::@8
vblank::@8: scope:[vblank]  from vblank::@7
  [148] (volatile byte) y_scroll ← (byte) $ef
  to:vblank::@2
vblank::@2: scope:[vblank]  from vblank::@1 vblank::@7 vblank::@8
  [149] (byte~) vblank::$5 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_LEFT
  [150] if((byte) 0==(byte~) vblank::$5) goto vblank::@3
  to:vblank::@9
vblank::@9: scope:[vblank]  from vblank::@2
  [151] (volatile byte) x_scroll ← ++ (volatile byte) x_scroll
  to:vblank::@3
vblank::@3: scope:[vblank]  from vblank::@2 vblank::@9
  [152] (byte~) vblank::$7 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_RIGHT
  [153] if((byte) 0==(byte~) vblank::$7) goto vblank::@4
  to:vblank::@10
vblank::@10: scope:[vblank]  from vblank::@3
  [154] (volatile byte) x_scroll ← -- (volatile byte) x_scroll
  to:vblank::@4
vblank::@4: scope:[vblank]  from vblank::@10 vblank::@3
  [155] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (volatile byte) x_scroll
  [156] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (volatile byte) y_scroll
  to:vblank::@return
vblank::@return: scope:[vblank]  from vblank::@4
  [157] return 
  to:@return

(byte()) readJoy1()
readJoy1: scope:[readJoy1]  from vblank
  [158] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1
  [159] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0
  to:readJoy1::@1
readJoy1::@1: scope:[readJoy1]  from readJoy1 readJoy1::@2
  [160] (byte) readJoy1::joy#2 ← phi( readJoy1/(byte) 0 readJoy1::@2/(byte) readJoy1::joy#1 )
  [160] (byte) readJoy1::i#2 ← phi( readJoy1/(byte) 0 readJoy1::@2/(byte) readJoy1::i#1 )
  [161] if((byte) readJoy1::i#2<(byte) 8) goto readJoy1::@2
  to:readJoy1::@return
readJoy1::@return: scope:[readJoy1]  from readJoy1::@1
  [162] return 
  to:@return
readJoy1::@2: scope:[readJoy1]  from readJoy1::@1
  [163] (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (byte) 1
  [164] (byte~) readJoy1::$2 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1
  [165] (byte) readJoy1::joy#1 ← (byte~) readJoy1::$1 | (byte~) readJoy1::$2
  [166] (byte) readJoy1::i#1 ← ++ (byte) readJoy1::i#2
  to:readJoy1::@1

null depth in calling loop Loop head: cputs::@1 tails: cputs::@2 blocks: cputs::@2 cputs::@1  in scope cputc
null depth in calling loop Loop head: cputs::@1 tails: cputs::@2 blocks: cputs::@2 cputs::@1  in scope cputc
null depth in calling loop Loop head: cscroll::@1 tails: cscroll::@5 blocks: cscroll::@5 cscroll::@3 cscroll::@1 cscroll::@8 cscroll::@7 cscroll::@4  in scope ppuDataSet
null depth in calling loop Loop head: cscroll::@3 tails: cscroll::@8 blocks: cscroll::@8 cscroll::@7 cscroll::@4 cscroll::@3  in scope ppuDataSet

VARIABLE REGISTER WEIGHTS
(byte) RICOH_2A03::DMC_FREQ
(byte) RICOH_2A03::DMC_LEN
(byte) RICOH_2A03::DMC_RAW
(byte) RICOH_2A03::DMC_START
(byte) RICOH_2A03::JOY1
(byte) RICOH_2A03::JOY2
(byte) RICOH_2A03::NOISE_HI
(byte) RICOH_2A03::NOISE_LO
(byte) RICOH_2A03::NOISE_VOL
(byte) RICOH_2A03::OAMDMA
(byte) RICOH_2A03::SND_CHN
(byte) RICOH_2A03::SQ1_HI
(byte) RICOH_2A03::SQ1_LO
(byte) RICOH_2A03::SQ1_SWEEP
(byte) RICOH_2A03::SQ1_VOL
(byte) RICOH_2A03::SQ2_HI
(byte) RICOH_2A03::SQ2_LO
(byte) RICOH_2A03::SQ2_SWEEP
(byte) RICOH_2A03::SQ2_VOL
(byte) RICOH_2A03::TRI_HI
(byte) RICOH_2A03::TRI_LINEAR
(byte) RICOH_2A03::TRI_LO
(byte) RICOH_2A03::UNUSED1
(byte) RICOH_2A03::UNUSED2
(byte) RICOH_2C02::OAMADDR
(byte) RICOH_2C02::OAMDATA
(byte) RICOH_2C02::PPUADDR
(byte) RICOH_2C02::PPUCTRL
(byte) RICOH_2C02::PPUDATA
(byte) RICOH_2C02::PPUMASK
(byte) RICOH_2C02::PPUSCROLL
(volatile byte) RICOH_2C02::PPUSTATUS loadstore
(byte) SpriteData::attributes
(byte) SpriteData::tile
(byte) SpriteData::x
(byte) SpriteData::y
(void()) clrscr()
(byte) conio_cursor_x loadstore 5189.185185185185
(byte) conio_cursor_y loadstore 64002.159999999996
(byte*) conio_line_text loadstore 45104.24489795918
(void()) cputc((byte) cputc::c)
(byte) cputc::c
(byte) cputc::c#0 7001.0
(void()) cputln()
(void()) cputs((to_nomodify byte*) cputs::s)
(byte) cputs::c
(byte) cputs::c#1 1001.0
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 500.5
(to_nomodify byte*) cputs::s#2 1501.5
(void()) cscroll()
(byte) cscroll::ch
(byte) cscroll::ch#0 6.666666673333334E8
(byte*) cscroll::line1
(byte*) cscroll::line1#1 1.000000001E9
(byte*) cscroll::line1#2 2.0000000036363637E8
(byte*) cscroll::line1#6 1.00000001E8
(byte*) cscroll::line2
(byte*) cscroll::line2#1 3.333333336666667E8
(byte*) cscroll::line2#2 3.1428571485714287E8
(byte*) cscroll::line2#6 1.00000001E8
(byte) cscroll::x
(byte) cscroll::x#1 2.000000002E9
(byte) cscroll::x#2 2.72727273E8
(byte) cscroll::y
(byte) cscroll::y#1 2.00000002E8
(byte) cscroll::y#2 2.142857164285714E7
(void()) main()
(byte) main::initNES1_i
(byte) main::initNES1_i#1 151.5
(byte) main::initNES1_i#2 112.22222222222223
(byte~) main::initNES1_waitForVBlank1_$0 202.0
(byte~) main::initNES1_waitForVBlank2_$0 202.0
(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
(word) ppuDataFill::i
(word) ppuDataFill::i#1 2.00000002E8
(word) ppuDataFill::i#2 1.00000001E8
(nomodify void*) ppuDataFill::ppuData
(byte~) ppuDataFill::ppuDataPrepare1_$0 2.0000002E7
(byte~) ppuDataFill::ppuDataPrepare1_$1 2.0000002E7
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 6666667.333333333
(byte) ppuDataFill::ppuDataPut1_val
(word) ppuDataFill::size
(word) ppuDataFill::size#5 1.1111111222222222E7
(byte) ppuDataFill::val
(byte) ppuDataFill::val#10 1.1111111222222222E7
(byte()) ppuDataGet((nomodify void*) ppuDataGet::ppuData)
(nomodify void*) ppuDataGet::ppuData
(nomodify void*) ppuDataGet::ppuData#0 5.25000000075E9
(byte~) ppuDataGet::ppuDataPrepare1_$0 2.0000000002E10
(byte~) ppuDataGet::ppuDataPrepare1_$1 2.0000000002E10
(nomodify void*) ppuDataGet::ppuDataPrepare1_ppuData
(byte) ppuDataGet::ppuDataRead1_return
(byte) ppuDataGet::ppuDataRead1_return#0 3.666666667333333E9
(byte) ppuDataGet::return
(byte) ppuDataGet::return#2 2.000000002E9
(void()) ppuDataSet((nomodify void*) ppuDataSet::ppuData , (byte) ppuDataSet::val)
(nomodify void*) ppuDataSet::ppuData
(nomodify byte*) ppuDataSet::ppuData#0 5000.5
(nomodify void*) ppuDataSet::ppuData#1 1.000000001E9
(byte~) ppuDataSet::ppuDataPrepare1_$0 2.0000000002E10
(byte~) ppuDataSet::ppuDataPrepare1_$1 2.0000000002E10
(nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 7.000003334666666E9
(nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#2 20002.0
(byte) ppuDataSet::ppuDataPut1_val
(byte) ppuDataSet::val
(byte) ppuDataSet::val#0 10001.0
(byte) ppuDataSet::val#1 2.000000002E9
(byte) ppuDataSet::val#2 2.2000020006E9
(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
(nomodify void*) ppuDataTransfer::cpuData
(byte*) ppuDataTransfer::cpuSrc
(byte*) ppuDataTransfer::cpuSrc#1 1001.0
(byte*) ppuDataTransfer::cpuSrc#2 750.75
(word) ppuDataTransfer::i
(word) ppuDataTransfer::i#1 2002.0
(word) ppuDataTransfer::i#2 600.5999999999999
(nomodify void*) ppuDataTransfer::ppuData
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData
(byte) ppuDataTransfer::ppuDataPut1_val
(byte) ppuDataTransfer::ppuDataPut1_val#0 2002.0
(word) ppuDataTransfer::size
(byte()) readJoy1()
(byte~) readJoy1::$1 101.0
(byte~) readJoy1::$2 202.0
(byte) readJoy1::i
(byte) readJoy1::i#1 202.0
(byte) readJoy1::i#2 60.599999999999994
(byte) readJoy1::joy
(byte) readJoy1::joy#1 101.0
(byte) readJoy1::joy#2 51.0
(byte) readJoy1::return
(byte) readJoy1::return#2 4.0
interrupt(HARDWARE_STACK)(void()) vblank()
(byte~) vblank::$1 4.0
(byte~) vblank::$3 4.0
(byte~) vblank::$5 4.0
(byte~) vblank::$7 4.0
(byte) vblank::joy
(byte) vblank::joy#0 0.7142857142857142
(volatile byte) x_scroll loadstore 1.1500000000000001
(volatile byte) y_scroll loadstore 1.4761904761904767

Initial phi equivalence classes
[ main::initNES1_i#2 main::initNES1_i#1 ]
[ cputs::s#2 cputs::s#0 ]
[ cscroll::y#2 cscroll::y#1 ]
[ cscroll::line2#6 cscroll::line2#2 cscroll::line2#1 ]
[ cscroll::line1#6 cscroll::line1#2 cscroll::line1#1 ]
[ cscroll::x#2 cscroll::x#1 ]
[ ppuDataSet::ppuDataPrepare1_ppuData#0 ppuDataSet::ppuDataPrepare1_ppuData#2 ppuDataSet::ppuData#1 ]
[ ppuDataSet::val#2 ppuDataSet::val#0 ppuDataSet::val#1 ]
[ ppuDataFill::ppuDataPrepare1_ppuData#0 ]
[ ppuDataFill::size#5 ]
[ ppuDataFill::val#10 ]
[ ppuDataFill::i#2 ppuDataFill::i#1 ]
[ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
[ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
[ readJoy1::i#2 readJoy1::i#1 ]
[ readJoy1::joy#2 readJoy1::joy#1 ]
Added variable conio_cursor_x to live range equivalence class [ conio_cursor_x ]
Added variable conio_cursor_y to live range equivalence class [ conio_cursor_y ]
Added variable conio_line_text to live range equivalence class [ conio_line_text ]
Added variable x_scroll to live range equivalence class [ x_scroll ]
Added variable y_scroll to live range equivalence class [ y_scroll ]
Added variable main::initNES1_waitForVBlank1_$0 to live range equivalence class [ main::initNES1_waitForVBlank1_$0 ]
Added variable main::initNES1_waitForVBlank2_$0 to live range equivalence class [ main::initNES1_waitForVBlank2_$0 ]
Added variable cputs::c#1 to live range equivalence class [ cputs::c#1 ]
Added variable cputc::c#0 to live range equivalence class [ cputc::c#0 ]
Added variable ppuDataSet::ppuData#0 to live range equivalence class [ ppuDataSet::ppuData#0 ]
Added variable ppuDataGet::ppuData#0 to live range equivalence class [ ppuDataGet::ppuData#0 ]
Added variable ppuDataGet::return#2 to live range equivalence class [ ppuDataGet::return#2 ]
Added variable cscroll::ch#0 to live range equivalence class [ cscroll::ch#0 ]
Added variable ppuDataSet::ppuDataPrepare1_$0 to live range equivalence class [ ppuDataSet::ppuDataPrepare1_$0 ]
Added variable ppuDataSet::ppuDataPrepare1_$1 to live range equivalence class [ ppuDataSet::ppuDataPrepare1_$1 ]
Added variable ppuDataGet::ppuDataPrepare1_$0 to live range equivalence class [ ppuDataGet::ppuDataPrepare1_$0 ]
Added variable ppuDataGet::ppuDataPrepare1_$1 to live range equivalence class [ ppuDataGet::ppuDataPrepare1_$1 ]
Added variable ppuDataGet::ppuDataRead1_return#0 to live range equivalence class [ ppuDataGet::ppuDataRead1_return#0 ]
Added variable ppuDataFill::ppuDataPrepare1_$0 to live range equivalence class [ ppuDataFill::ppuDataPrepare1_$0 ]
Added variable ppuDataFill::ppuDataPrepare1_$1 to live range equivalence class [ ppuDataFill::ppuDataPrepare1_$1 ]
Added variable ppuDataTransfer::ppuDataPut1_val#0 to live range equivalence class [ ppuDataTransfer::ppuDataPut1_val#0 ]
Added variable readJoy1::return#2 to live range equivalence class [ readJoy1::return#2 ]
Added variable vblank::joy#0 to live range equivalence class [ vblank::joy#0 ]
Added variable vblank::$1 to live range equivalence class [ vblank::$1 ]
Added variable vblank::$3 to live range equivalence class [ vblank::$3 ]
Added variable vblank::$5 to live range equivalence class [ vblank::$5 ]
Added variable vblank::$7 to live range equivalence class [ vblank::$7 ]
Added variable readJoy1::$1 to live range equivalence class [ readJoy1::$1 ]
Added variable readJoy1::$2 to live range equivalence class [ readJoy1::$2 ]
Complete equivalence classes
[ main::initNES1_i#2 main::initNES1_i#1 ]
[ cputs::s#2 cputs::s#0 ]
[ cscroll::y#2 cscroll::y#1 ]
[ cscroll::line2#6 cscroll::line2#2 cscroll::line2#1 ]
[ cscroll::line1#6 cscroll::line1#2 cscroll::line1#1 ]
[ cscroll::x#2 cscroll::x#1 ]
[ ppuDataSet::ppuDataPrepare1_ppuData#0 ppuDataSet::ppuDataPrepare1_ppuData#2 ppuDataSet::ppuData#1 ]
[ ppuDataSet::val#2 ppuDataSet::val#0 ppuDataSet::val#1 ]
[ ppuDataFill::ppuDataPrepare1_ppuData#0 ]
[ ppuDataFill::size#5 ]
[ ppuDataFill::val#10 ]
[ ppuDataFill::i#2 ppuDataFill::i#1 ]
[ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
[ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
[ readJoy1::i#2 readJoy1::i#1 ]
[ readJoy1::joy#2 readJoy1::joy#1 ]
[ conio_cursor_x ]
[ conio_cursor_y ]
[ conio_line_text ]
[ x_scroll ]
[ y_scroll ]
[ main::initNES1_waitForVBlank1_$0 ]
[ main::initNES1_waitForVBlank2_$0 ]
[ cputs::c#1 ]
[ cputc::c#0 ]
[ ppuDataSet::ppuData#0 ]
[ ppuDataGet::ppuData#0 ]
[ ppuDataGet::return#2 ]
[ cscroll::ch#0 ]
[ ppuDataSet::ppuDataPrepare1_$0 ]
[ ppuDataSet::ppuDataPrepare1_$1 ]
[ ppuDataGet::ppuDataPrepare1_$0 ]
[ ppuDataGet::ppuDataPrepare1_$1 ]
[ ppuDataGet::ppuDataRead1_return#0 ]
[ ppuDataFill::ppuDataPrepare1_$0 ]
[ ppuDataFill::ppuDataPrepare1_$1 ]
[ ppuDataTransfer::ppuDataPut1_val#0 ]
[ readJoy1::return#2 ]
[ vblank::joy#0 ]
[ vblank::$1 ]
[ vblank::$3 ]
[ vblank::$5 ]
[ vblank::$7 ]
[ readJoy1::$1 ]
[ readJoy1::$2 ]
Allocated zp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ]
Allocated zp[2]:3 [ cputs::s#2 cputs::s#0 ]
Allocated zp[1]:5 [ cscroll::y#2 cscroll::y#1 ]
Allocated zp[2]:6 [ cscroll::line2#6 cscroll::line2#2 cscroll::line2#1 ]
Allocated zp[2]:8 [ cscroll::line1#6 cscroll::line1#2 cscroll::line1#1 ]
Allocated zp[1]:10 [ cscroll::x#2 cscroll::x#1 ]
Allocated zp[2]:11 [ ppuDataSet::ppuDataPrepare1_ppuData#0 ppuDataSet::ppuDataPrepare1_ppuData#2 ppuDataSet::ppuData#1 ]
Allocated zp[1]:13 [ ppuDataSet::val#2 ppuDataSet::val#0 ppuDataSet::val#1 ]
Allocated zp[2]:14 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ]
Allocated zp[2]:16 [ ppuDataFill::size#5 ]
Allocated zp[1]:18 [ ppuDataFill::val#10 ]
Allocated zp[2]:19 [ ppuDataFill::i#2 ppuDataFill::i#1 ]
Allocated zp[2]:21 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
Allocated zp[2]:23 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
Allocated zp[1]:25 [ readJoy1::i#2 readJoy1::i#1 ]
Allocated zp[1]:26 [ readJoy1::joy#2 readJoy1::joy#1 ]
Allocated zp[1]:27 [ conio_cursor_x ]
Allocated zp[1]:28 [ conio_cursor_y ]
Allocated zp[2]:29 [ conio_line_text ]
Allocated zp[1]:31 [ x_scroll ]
Allocated zp[1]:32 [ y_scroll ]
Allocated zp[1]:33 [ main::initNES1_waitForVBlank1_$0 ]
Allocated zp[1]:34 [ main::initNES1_waitForVBlank2_$0 ]
Allocated zp[1]:35 [ cputs::c#1 ]
Allocated zp[1]:36 [ cputc::c#0 ]
Allocated zp[2]:37 [ ppuDataSet::ppuData#0 ]
Allocated zp[2]:39 [ ppuDataGet::ppuData#0 ]
Allocated zp[1]:41 [ ppuDataGet::return#2 ]
Allocated zp[1]:42 [ cscroll::ch#0 ]
Allocated zp[1]:43 [ ppuDataSet::ppuDataPrepare1_$0 ]
Allocated zp[1]:44 [ ppuDataSet::ppuDataPrepare1_$1 ]
Allocated zp[1]:45 [ ppuDataGet::ppuDataPrepare1_$0 ]
Allocated zp[1]:46 [ ppuDataGet::ppuDataPrepare1_$1 ]
Allocated zp[1]:47 [ ppuDataGet::ppuDataRead1_return#0 ]
Allocated zp[1]:48 [ ppuDataFill::ppuDataPrepare1_$0 ]
Allocated zp[1]:49 [ ppuDataFill::ppuDataPrepare1_$1 ]
Allocated zp[1]:50 [ ppuDataTransfer::ppuDataPut1_val#0 ]
Allocated zp[1]:51 [ readJoy1::return#2 ]
Allocated zp[1]:52 [ vblank::joy#0 ]
Allocated zp[1]:53 [ vblank::$1 ]
Allocated zp[1]:54 [ vblank::$3 ]
Allocated zp[1]:55 [ vblank::$5 ]
Allocated zp[1]:56 [ vblank::$7 ]
Allocated zp[1]:57 [ readJoy1::$1 ]
Allocated zp[1]:58 [ readJoy1::$2 ]

INITIAL ASM
Target platform is nes / MOS6502
  // File Comments
// NES conio printing
// Nintendo Entertainment System (NES
// https://en.wikipedia.org/wiki/Nintendo_Entertainment_System_(Model_NES-101)
// https://github.com/gregkrsak/first_nes
// Ricoh 2C02 - NES Picture Processing Unit (PPU)
// Ricoh RP2C02 (NTSC version) / RP2C07 (PAL version),
// https://en.wikipedia.org/wiki/Picture_Processing_Unit
// https://wiki.nesdev.com/w/index.php/PPU_registers
// http://nesdev.com/2C02%20technical%20reference.TXT
// Based on: https://github.com/gregkrsak/first_nes written by Greg M. Krsak, 2018. 
  // Upstart
  // Nintendo Entertainment System (NES) ROM
// https://sadistech.com/nesromtool/romdoc.html
// https://forums.nesdev.com/viewtopic.php?f=2&t=9896
// https://github.com/gregkrsak/first_nes
.file [name="nes-conio.nes", type="bin", segments="NesRom"]
.file [name="nes-conio.nes_hdr", type="bin", segments="Header"]
.file [name="nes-conio.nes_prg", type="bin", segments="ProgramRom"]
.file [name="nes-conio.nes_chr", type="bin", segments="CharacterRom"]
.segmentdef Header  [ start=$0000,       min=$0000, max=$000f, fill ]
.segmentdef Tiles   [ start=$0000,       min=$0000, max=$1fff, fill ]
.segmentdef Code    [ start=$c000,       min=$c000, max=$fff9 ]
.segmentdef Data    [ startAfter="Code", min=$c000, max=$fff9 ]
.segmentdef Vectors [ start=$fffa,       min=$fffa, max=$ffff ]
.segmentdef GameRam [start=$200,max=$7ff, virtual]
.segmentdef ProgramRom [ segments="Code, Data, Vectors" ]
.segmentdef CharacterRom [ segments="Tiles" ]
.segmentdef NesRom
.segment NesRom
.segmentout [ segments="Header" ]
.segmentout [ segments="ProgramRom" ]
.segmentout [ segments="CharacterRom" ]
.segment Header
.text   @"NES\$1a"
.byte   $01           // 1x 16KB ROM (PRG)
.byte   $01           // 1x 8KB VROM (CHR)
.byte   %00000001     // Mapper nibble 0000 == No mapping (a simple 16KB PRG + 8KB CHR game)
                      // Mirroring nibble 0001 == Vertical mirroring only
.segment Code

  // Global Constants & labels
  // Standard Controller Right Button
  .const JOY_RIGHT = 1
  // Standard Controller Left Button
  .const JOY_LEFT = 2
  // Standard Controller Down Button
  .const JOY_DOWN = 4
  // Standard Controller Up Button
  .const JOY_UP = 8
  .const OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
  .const OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
  .const OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
  .const OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
  .const OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
  .const OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
  .const OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
  .const SIZEOF_BYTE = 1
  // $2000-$23bf	$03c0	Name table 0
  .label PPU_NAME_TABLE_0 = $2000
  // $23c0-$23ff	$0040	Attribute table 0
  .label PPU_ATTRIBUTE_TABLE_0 = $23c0
  // $27c0-$27ff	$0040	Attribute table 1
  .label PPU_ATTRIBUTE_TABLE_1 = $27c0
  // $3000-$3eff	$0f00	Mirrors of $2000-$2eff
  // $3f00-$3f1f	$0020	Palette RAM indexes
  .label PPU_PALETTE = $3f00
  // APU Frame Counter
  // generates low-frequency clocks for the channels and an optional 60 Hz interrupt.
  // https://wiki.nesdev.com/w/index.php/APU_Frame_Counter
  // ------+-----+---------------------------------------------------------------
  //  $4017 |	 W  | FR_COUNTER Frame Counter	Set mode and interrupt
  //  ------+-----+---------------------------------------------------------------
  //        |   7	| Sequencer mode: 0 selects 4-step sequence, 1 selects 5-step sequence
  //        |   6	| Interrupt inhibit flag. If set, the frame interrupt flag is cleared, otherwise it is unaffected.
  //  ------+-----+---------------------------------------------------------------
  // Side effects	After 3 or 4 CPU clock cycles*, the timer is reset.
  // If the mode flag is set, then both "quarter frame" and "half frame" signals are also generated.
  .label FR_COUNTER = $4017
  // Pointer to the start of RAM memory
  .label MEMORY = 0
  // PPU Status Register for reading in ASM
  .label PPU_PPUSTATUS = $2002
  // NES Picture Processing Unit (PPU)
  .label PPU = $2000
  // NES CPU and audion processing unit (APU)
  .label APU = $4000
  .label conio_cursor_x = $1b
  .label conio_cursor_y = $1c
  .label conio_line_text = $1d
  .label x_scroll = $1f
  .label y_scroll = $20
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  lda #0
  sta.z conio_cursor_y
  // [3] (byte*) conio_line_text ← (const nomodify byte*) PPU_NAME_TABLE_0 -- pbuz1=pbuc1 
  // The current text cursor line start
  lda #<PPU_NAME_TABLE_0
  sta.z conio_line_text
  lda #>PPU_NAME_TABLE_0
  sta.z conio_line_text+1
  jmp __b2
  // @2
__b2:
  // [4] (volatile byte) x_scroll ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z x_scroll
  // [5] (volatile byte) y_scroll ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z y_scroll
  // [6] phi from @2 to @3 [phi:@2->@3]
__b3_from___b2:
  jmp __b3
  // @3
__b3:
  // [7] call main 
  // [9] phi from @3 to main [phi:@3->main]
main_from___b3:
  jsr main
  // [8] phi from @3 to @end [phi:@3->@end]
__bend_from___b3:
  jmp __bend
  // @end
__bend:
.segment Code
  // main
// RESET Called when the NES is reset, including when it is turned on.
main: {
    .label initNES1_waitForVBlank1___0 = $21
    .label initNES1_waitForVBlank2___0 = $22
    .label initNES1_i = 2
    jmp initNES1
    // main::initNES1
  initNES1:
    // asm { cld ldx#$ff txs  }
    cld
    ldx #$ff
    txs
    jmp initNES1_disableVideoOutput1
    // main::initNES1_disableVideoOutput1
  initNES1_disableVideoOutput1:
    // [11] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU
    // [12] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    jmp initNES1_disableAudioOutput1
    // main::initNES1_disableAudioOutput1
  initNES1_disableAudioOutput1:
    // [13] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta FR_COUNTER
    // [14] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
    jmp initNES1_clearVBlankFlag1
    // main::initNES1_clearVBlankFlag1
  initNES1_clearVBlankFlag1:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [16] phi from main::initNES1_clearVBlankFlag1 to main::initNES1_waitForVBlank1 [phi:main::initNES1_clearVBlankFlag1->main::initNES1_waitForVBlank1]
  initNES1_waitForVBlank1_from_initNES1_clearVBlankFlag1:
    jmp initNES1_waitForVBlank1
    // main::initNES1_waitForVBlank1
  initNES1_waitForVBlank1:
    jmp initNES1_waitForVBlank1___b1
    // main::initNES1_waitForVBlank1_@1
  initNES1_waitForVBlank1___b1:
    // [17] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    sta.z initNES1_waitForVBlank1___0
    // [18] if((byte) 0==(byte~) main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z initNES1_waitForVBlank1___0
    beq initNES1_waitForVBlank1___b1
    // [19] phi from main::initNES1_waitForVBlank1_@1 to main::initNES1_@1 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1]
  initNES1___b1_from_initNES1_waitForVBlank1___b1:
    // [19] phi (byte) main::initNES1_i#2 = (byte) 0 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z initNES1_i
    jmp initNES1___b1
    // [19] phi from main::initNES1_@1 to main::initNES1_@1 [phi:main::initNES1_@1->main::initNES1_@1]
  initNES1___b1_from_initNES1___b1:
    // [19] phi (byte) main::initNES1_i#2 = (byte) main::initNES1_i#1 [phi:main::initNES1_@1->main::initNES1_@1#0] -- register_copy 
    jmp initNES1___b1
    // main::initNES1_@1
  initNES1___b1:
    // [20] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY,y
    // [21] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$100,y
    // [22] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$200,y
    // [23] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$300,y
    // [24] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$400,y
    // [25] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$500,y
    // [26] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$600,y
    // [27] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$700,y
    // [28] (byte) main::initNES1_i#1 ← ++ (byte) main::initNES1_i#2 -- vbuz1=_inc_vbuz1 
    inc.z initNES1_i
    // [29] if((byte) 0!=(byte) main::initNES1_i#1) goto main::initNES1_@1 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z initNES1_i
    bne initNES1___b1_from_initNES1___b1
    // [30] phi from main::initNES1_@1 to main::initNES1_waitForVBlank2 [phi:main::initNES1_@1->main::initNES1_waitForVBlank2]
  initNES1_waitForVBlank2_from_initNES1___b1:
    jmp initNES1_waitForVBlank2
    // main::initNES1_waitForVBlank2
  initNES1_waitForVBlank2:
    jmp initNES1_waitForVBlank2___b1
    // main::initNES1_waitForVBlank2_@1
  initNES1_waitForVBlank2___b1:
    // [31] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    sta.z initNES1_waitForVBlank2___0
    // [32] if((byte) 0==(byte~) main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z initNES1_waitForVBlank2___0
    beq initNES1_waitForVBlank2___b1
    jmp initNES1___b7
    // main::initNES1_@7
  initNES1___b7:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [34] phi from main::initNES1_@7 to main::@2 [phi:main::initNES1_@7->main::@2]
  __b2_from_initNES1___b7:
    jmp __b2
    // main::@2
  __b2:
    // [35] call ppuDataTransfer 
  // Transfer the palette
    // [125] phi from main::@2 to ppuDataTransfer [phi:main::@2->ppuDataTransfer]
  ppuDataTransfer_from___b2:
    jsr ppuDataTransfer
    // [36] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [37] call ppuDataFill 
  // Fill the PPU attribute table
    // [109] phi from main::@3 to ppuDataFill [phi:main::@3->ppuDataFill]
  ppuDataFill_from___b3:
    // [109] phi (byte) ppuDataFill::val#10 = (byte) 0 [phi:main::@3->ppuDataFill#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ppuDataFill.val
    // [109] phi (word) ppuDataFill::size#5 = (byte) $40 [phi:main::@3->ppuDataFill#1] -- vwuz1=vbuc1 
    lda #<$40
    sta.z ppuDataFill.size
    lda #>$40
    sta.z ppuDataFill.size+1
    // [109] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 [phi:main::@3->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [38] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [39] call ppuDataFill 
    // [109] phi from main::@4 to ppuDataFill [phi:main::@4->ppuDataFill]
  ppuDataFill_from___b4:
    // [109] phi (byte) ppuDataFill::val#10 = (byte) 0 [phi:main::@4->ppuDataFill#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ppuDataFill.val
    // [109] phi (word) ppuDataFill::size#5 = (byte) $40 [phi:main::@4->ppuDataFill#1] -- vwuz1=vbuc1 
    lda #<$40
    sta.z ppuDataFill.size
    lda #>$40
    sta.z ppuDataFill.size+1
    // [109] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_1 [phi:main::@4->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_ATTRIBUTE_TABLE_1
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_ATTRIBUTE_TABLE_1
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [40] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [41] call clrscr 
  // Print a string
    // [119] phi from main::@5 to clrscr [phi:main::@5->clrscr]
  clrscr_from___b5:
    jsr clrscr
    // [42] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [43] call cputs 
    // [49] phi from main::@6 to cputs [phi:main::@6->cputs]
  cputs_from___b6:
    jsr cputs
    jmp __b7
    // main::@7
  __b7:
    // [44] (volatile byte) x_scroll ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z x_scroll
    // [45] (volatile byte) y_scroll ← (byte) -8 -- vbuz1=vbuc1 
    lda #-8
    sta.z y_scroll
    jmp enableVideoOutput1
    // main::enableVideoOutput1
  enableVideoOutput1:
    // [46] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 -- _deref_pbuc1=vbuc2 
    lda #$80
    sta PPU
    // [47] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $1e -- _deref_pbuc1=vbuc2 
    lda #$1e
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // [48] phi from main::@1 main::enableVideoOutput1 to main::@1 [phi:main::@1/main::enableVideoOutput1->main::@1]
  __b1_from___b1:
  __b1_from_enableVideoOutput1:
    jmp __b1
  // Infinite loop
    // main::@1
  __b1:
    jmp __b1_from___b1
  .segment Data
    s: .text @"hello world!\ni am nes\n look at me \n\n"
    .byte 0
}
.segment Code
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(3) s)
cputs: {
    .label c = $23
    .label s = 3
    // [50] phi from cputs to cputs::@1 [phi:cputs->cputs::@1]
  __b1_from_cputs:
    // [50] phi (to_nomodify byte*) cputs::s#2 = (const byte*) main::s [phi:cputs->cputs::@1#0] -- pbuz1=pbuc1 
    lda #<main.s
    sta.z s
    lda #>main.s
    sta.z s+1
    jmp __b1
    // cputs::@1
  __b1:
    // [51] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (s),y
    sta.z c
    // [52] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [53] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z c
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [54] return 
    rts
    // cputs::@2
  __b2:
    // [55] (byte) cputc::c#0 ← (byte) cputs::c#1 -- vbuz1=vbuz2 
    lda.z c
    sta.z cputc.c
    // [56] call cputc 
    jsr cputc
    // [50] phi from cputs::@2 to cputs::@1 [phi:cputs::@2->cputs::@1]
  __b1_from___b2:
    // [50] phi (to_nomodify byte*) cputs::s#2 = (to_nomodify byte*) cputs::s#0 [phi:cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte zp($24) c)
cputc: {
    .label c = $24
    // [57] if((byte) cputc::c#0==(byte) ' ') goto cputc::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z c
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [58] (nomodify byte*) ppuDataSet::ppuData#0 ← (byte*) conio_line_text + (byte) conio_cursor_x -- pbuz1=pbuz2_plus_vbuz3 
    lda.z conio_cursor_x
    clc
    adc.z conio_line_text
    sta.z ppuDataSet.ppuData
    lda #0
    adc.z conio_line_text+1
    sta.z ppuDataSet.ppuData+1
    // [59] (byte) ppuDataSet::val#0 ← (byte) cputc::c#0 -- vbuz1=vbuz2 
    lda.z c
    sta.z ppuDataSet.val
    // [60] (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#2 ← (void*)(nomodify byte*) ppuDataSet::ppuData#0 -- pvoz1=pvoz2 
    lda.z ppuDataSet.ppuData
    sta.z ppuDataSet.ppuDataPrepare1_ppuData
    lda.z ppuDataSet.ppuData+1
    sta.z ppuDataSet.ppuDataPrepare1_ppuData+1
    // [61] call ppuDataSet 
    // [95] phi from cputc::@2 to ppuDataSet [phi:cputc::@2->ppuDataSet]
  ppuDataSet_from___b2:
    // [95] phi (byte) ppuDataSet::val#2 = (byte) ppuDataSet::val#0 [phi:cputc::@2->ppuDataSet#0] -- register_copy 
    // [95] phi (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 = (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#2 [phi:cputc::@2->ppuDataSet#1] -- register_copy 
    jsr ppuDataSet
    jmp __b4
    // cputc::@4
  __b4:
    // [62] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [63] if((byte) conio_cursor_x!=(byte) $20) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$20
    cmp.z conio_cursor_x
    bne __breturn
    // [64] phi from cputc::@4 to cputc::@3 [phi:cputc::@4->cputc::@3]
  __b3_from___b4:
    jmp __b3
    // cputc::@3
  __b3:
    // [65] call cputln 
    jsr cputln
    jmp __breturn
    // cputc::@return
  __breturn:
    // [66] return 
    rts
    // [67] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [68] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputln
// Print a newline
cputln: {
    // [69] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $20 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$20
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // [70] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [71] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [72] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [73] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label ch = $2a
    .label line2 = 6
    // Scroll lines up
    .label line1 = 8
    .label x = $a
    .label y = 5
    // [74] if((byte) conio_cursor_y!=(byte) $1e) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$1e
    cmp.z conio_cursor_y
    bne __breturn
    // [75] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    // [75] phi (byte*) cscroll::line1#6 = (const nomodify byte*) PPU_NAME_TABLE_0 [phi:cscroll->cscroll::@1#0] -- pbuz1=pbuc1 
    lda #<PPU_NAME_TABLE_0
    sta.z line1
    lda #>PPU_NAME_TABLE_0
    sta.z line1+1
    // [75] phi (byte*) cscroll::line2#6 = (const nomodify byte*) PPU_NAME_TABLE_0+(byte) $20 [phi:cscroll->cscroll::@1#1] -- pbuz1=pbuc1 
    lda #<PPU_NAME_TABLE_0+$20
    sta.z line2
    lda #>PPU_NAME_TABLE_0+$20
    sta.z line2+1
    // [75] phi (byte) cscroll::y#2 = (byte) 0 [phi:cscroll->cscroll::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b1
    // cscroll::@1
  __b1:
    // [76] if((byte) cscroll::y#2<(byte)(number) $1e-(number) 1) goto cscroll::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z y
    cmp #$1e-1
    bcc __b3_from___b1
    // [77] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [78] call ppuDataFill 
  // Fill last line with space
    // [109] phi from cscroll::@2 to ppuDataFill [phi:cscroll::@2->ppuDataFill]
  ppuDataFill_from___b2:
    // [109] phi (byte) ppuDataFill::val#10 = (byte) ' ' [phi:cscroll::@2->ppuDataFill#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z ppuDataFill.val
    // [109] phi (word) ppuDataFill::size#5 = (byte) $20 [phi:cscroll::@2->ppuDataFill#1] -- vwuz1=vbuc1 
    lda #<$20
    sta.z ppuDataFill.size
    lda #>$20
    sta.z ppuDataFill.size+1
    // [109] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0+(word)(number) $1e*(number) $20-(byte) $20 [phi:cscroll::@2->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0+$1e*$20-$20
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_NAME_TABLE_0+$1e*$20-$20
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    jmp __b6
    // cscroll::@6
  __b6:
    // [79] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $20 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$20
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // [80] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [81] return 
    rts
    // [82] phi from cscroll::@1 to cscroll::@3 [phi:cscroll::@1->cscroll::@3]
  __b3_from___b1:
    // [82] phi (byte*) cscroll::line1#2 = (byte*) cscroll::line1#6 [phi:cscroll::@1->cscroll::@3#0] -- register_copy 
    // [82] phi (byte*) cscroll::line2#2 = (byte*) cscroll::line2#6 [phi:cscroll::@1->cscroll::@3#1] -- register_copy 
    // [82] phi (byte) cscroll::x#2 = (byte) 0 [phi:cscroll::@1->cscroll::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp __b3
    // cscroll::@3
  __b3:
    // [83] if((byte) cscroll::x#2<(byte) $20) goto cscroll::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #$20
    bcc __b4
    jmp __b5
    // cscroll::@5
  __b5:
    // [84] (byte) cscroll::y#1 ← ++ (byte) cscroll::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [75] phi from cscroll::@5 to cscroll::@1 [phi:cscroll::@5->cscroll::@1]
  __b1_from___b5:
    // [75] phi (byte*) cscroll::line1#6 = (byte*) cscroll::line1#2 [phi:cscroll::@5->cscroll::@1#0] -- register_copy 
    // [75] phi (byte*) cscroll::line2#6 = (byte*) cscroll::line2#2 [phi:cscroll::@5->cscroll::@1#1] -- register_copy 
    // [75] phi (byte) cscroll::y#2 = (byte) cscroll::y#1 [phi:cscroll::@5->cscroll::@1#2] -- register_copy 
    jmp __b1
    // cscroll::@4
  __b4:
    // [85] (nomodify void*) ppuDataGet::ppuData#0 ← (void*)(byte*) cscroll::line2#2 -- pvoz1=pvoz2 
    lda.z line2
    sta.z ppuDataGet.ppuData
    lda.z line2+1
    sta.z ppuDataGet.ppuData+1
    // [86] call ppuDataGet 
    // [102] phi from cscroll::@4 to ppuDataGet [phi:cscroll::@4->ppuDataGet]
  ppuDataGet_from___b4:
    jsr ppuDataGet
    // [87] (byte) ppuDataGet::return#2 ← (byte) ppuDataGet::ppuDataRead1_return#0 -- vbuz1=vbuz2 
    lda.z ppuDataGet.ppuDataRead1_return
    sta.z ppuDataGet.return
    jmp __b7
    // cscroll::@7
  __b7:
    // [88] (byte) cscroll::ch#0 ← (byte) ppuDataGet::return#2 -- vbuz1=vbuz2 
    lda.z ppuDataGet.return
    sta.z ch
    // [89] (byte*) cscroll::line2#1 ← ++ (byte*) cscroll::line2#2 -- pbuz1=_inc_pbuz1 
    inc.z line2
    bne !+
    inc.z line2+1
  !:
    // [90] (nomodify void*) ppuDataSet::ppuData#1 ← (void*)(byte*) cscroll::line1#2 -- pvoz1=pvoz2 
    lda.z line1
    sta.z ppuDataSet.ppuData_1
    lda.z line1+1
    sta.z ppuDataSet.ppuData_1+1
    // [91] (byte) ppuDataSet::val#1 ← (byte) cscroll::ch#0 -- vbuz1=vbuz2 
    lda.z ch
    sta.z ppuDataSet.val
    // [92] call ppuDataSet 
    // [95] phi from cscroll::@7 to ppuDataSet [phi:cscroll::@7->ppuDataSet]
  ppuDataSet_from___b7:
    // [95] phi (byte) ppuDataSet::val#2 = (byte) ppuDataSet::val#1 [phi:cscroll::@7->ppuDataSet#0] -- register_copy 
    // [95] phi (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 = (nomodify void*) ppuDataSet::ppuData#1 [phi:cscroll::@7->ppuDataSet#1] -- register_copy 
    jsr ppuDataSet
    jmp __b8
    // cscroll::@8
  __b8:
    // [93] (byte*) cscroll::line1#1 ← ++ (byte*) cscroll::line1#2 -- pbuz1=_inc_pbuz1 
    inc.z line1
    bne !+
    inc.z line1+1
  !:
    // [94] (byte) cscroll::x#1 ← ++ (byte) cscroll::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [82] phi from cscroll::@8 to cscroll::@3 [phi:cscroll::@8->cscroll::@3]
  __b3_from___b8:
    // [82] phi (byte*) cscroll::line1#2 = (byte*) cscroll::line1#1 [phi:cscroll::@8->cscroll::@3#0] -- register_copy 
    // [82] phi (byte*) cscroll::line2#2 = (byte*) cscroll::line2#1 [phi:cscroll::@8->cscroll::@3#1] -- register_copy 
    // [82] phi (byte) cscroll::x#2 = (byte) cscroll::x#1 [phi:cscroll::@8->cscroll::@3#2] -- register_copy 
    jmp __b3
}
  // ppuDataSet
// Set one byte in PPU memory
// - ppuData : Pointer in the PPU memory
// - val : The value to set
// ppuDataSet(byte* zp($25) ppuData, byte zp($d) val)
ppuDataSet: {
    .label ppuDataPrepare1___0 = $2b
    .label ppuDataPrepare1___1 = $2c
    .label ppuDataPrepare1_ppuData = $b
    .label ppuData = $25
    .label val = $d
    .label ppuData_1 = $b
    jmp ppuDataPrepare1
    // ppuDataSet::ppuDataPrepare1
  ppuDataPrepare1:
    // [96] (byte~) ppuDataSet::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 -- vbuz1=_hi_pvoz2 
    lda.z ppuDataPrepare1_ppuData+1
    sta.z ppuDataPrepare1___0
    // [97] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataSet::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPrepare1___0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [98] (byte~) ppuDataSet::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 -- vbuz1=_lo_pvoz2 
    lda.z ppuDataPrepare1_ppuData
    sta.z ppuDataPrepare1___1
    // [99] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataSet::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPrepare1___1
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    jmp ppuDataPut1
    // ppuDataSet::ppuDataPut1
  ppuDataPut1:
    // [100] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataSet::val#2 -- _deref_pbuc1=vbuz1 
    lda.z val
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __breturn
    // ppuDataSet::@return
  __breturn:
    // [101] return 
    rts
}
  // ppuDataGet
// Get one byte from PPU memory
// - ppuData : Pointer in the PPU memory
// ppuDataGet(void* zp($27) ppuData)
ppuDataGet: {
    .label ppuDataPrepare1___0 = $2d
    .label ppuDataPrepare1___1 = $2e
    .label ppuDataRead1_return = $2f
    .label ppuData = $27
    .label return = $29
    jmp ppuDataPrepare1
    // ppuDataGet::ppuDataPrepare1
  ppuDataPrepare1:
    // [103] (byte~) ppuDataGet::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataGet::ppuData#0 -- vbuz1=_hi_pvoz2 
    lda.z ppuData+1
    sta.z ppuDataPrepare1___0
    // [104] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataGet::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPrepare1___0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [105] (byte~) ppuDataGet::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataGet::ppuData#0 -- vbuz1=_lo_pvoz2 
    lda.z ppuData
    sta.z ppuDataPrepare1___1
    // [106] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataGet::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPrepare1___1
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    jmp ppuDataRead1
    // ppuDataGet::ppuDataRead1
  ppuDataRead1:
    // [107] (byte) ppuDataGet::ppuDataRead1_return#0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) -- vbuz1=_deref_pbuc1 
    lda PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    sta.z ppuDataRead1_return
    jmp __breturn
    // ppuDataGet::@return
  __breturn:
    // [108] return 
    rts
}
  // ppuDataFill
// Fill a number of bytes in the PPU memory
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
// ppuDataFill(byte zp($12) val, word zp($10) size)
ppuDataFill: {
    .label ppuDataPrepare1___0 = $30
    .label ppuDataPrepare1___1 = $31
    .label ppuDataPrepare1_ppuData = $e
    .label i = $13
    .label size = $10
    .label val = $12
    jmp ppuDataPrepare1
    // ppuDataFill::ppuDataPrepare1
  ppuDataPrepare1:
    // [110] (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuz1=_hi_pvoz2 
    lda.z ppuDataPrepare1_ppuData+1
    sta.z ppuDataPrepare1___0
    // [111] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPrepare1___0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [112] (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuz1=_lo_pvoz2 
    lda.z ppuDataPrepare1_ppuData
    sta.z ppuDataPrepare1___1
    // [113] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPrepare1___1
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [114] phi from ppuDataFill::ppuDataPrepare1 to ppuDataFill::@1 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1]
  __b1_from_ppuDataPrepare1:
    // [114] phi (word) ppuDataFill::i#2 = (word) 0 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // Transfer to PPU
    // ppuDataFill::@1
  __b1:
    // [115] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#5) goto ppuDataFill::ppuDataPut1 -- vwuz1_lt_vwuz2_then_la1 
    lda.z i+1
    cmp.z size+1
    bcc ppuDataPut1
    bne !+
    lda.z i
    cmp.z size
    bcc ppuDataPut1
  !:
    jmp __breturn
    // ppuDataFill::@return
  __breturn:
    // [116] return 
    rts
    // ppuDataFill::ppuDataPut1
  ppuDataPut1:
    // [117] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataFill::val#10 -- _deref_pbuc1=vbuz1 
    lda.z val
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b2
    // ppuDataFill::@2
  __b2:
    // [118] (word) ppuDataFill::i#1 ← ++ (word) ppuDataFill::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [114] phi from ppuDataFill::@2 to ppuDataFill::@1 [phi:ppuDataFill::@2->ppuDataFill::@1]
  __b1_from___b2:
    // [114] phi (word) ppuDataFill::i#2 = (word) ppuDataFill::i#1 [phi:ppuDataFill::@2->ppuDataFill::@1#0] -- register_copy 
    jmp __b1
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    // [120] call ppuDataFill 
    // [109] phi from clrscr to ppuDataFill [phi:clrscr->ppuDataFill]
  ppuDataFill_from_clrscr:
    // [109] phi (byte) ppuDataFill::val#10 = (byte) ' ' [phi:clrscr->ppuDataFill#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z ppuDataFill.val
    // [109] phi (word) ppuDataFill::size#5 = (word) $3c0 [phi:clrscr->ppuDataFill#1] -- vwuz1=vwuc1 
    lda #<$3c0
    sta.z ppuDataFill.size
    lda #>$3c0
    sta.z ppuDataFill.size+1
    // [109] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0 [phi:clrscr->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    jmp __b1
    // clrscr::@1
  __b1:
    // [121] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [122] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [123] (byte*) conio_line_text ← (const nomodify byte*) PPU_NAME_TABLE_0 -- pbuz1=pbuc1 
    lda #<PPU_NAME_TABLE_0
    sta.z conio_line_text
    lda #>PPU_NAME_TABLE_0
    sta.z conio_line_text+1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [124] return 
    rts
}
  // ppuDataTransfer
// Transfer a number of bytes from the CPU memory to the PPU memory
// - cpuData : Pointer to the CPU memory (RAM of ROM)
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
ppuDataTransfer: {
    .const size = $20*SIZEOF_BYTE
    .label ppuData = PPU_PALETTE
    .label cpuData = PALETTE
    .label ppuDataPut1_val = $32
    // Transfer to PPU
    .label cpuSrc = $17
    .label i = $15
    jmp ppuDataPrepare1
    // ppuDataTransfer::ppuDataPrepare1
  ppuDataPrepare1:
    // [126] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0 -- _deref_pbuc1=vbuc2 
    lda #>ppuData
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [127] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [128] phi from ppuDataTransfer::ppuDataPrepare1 to ppuDataTransfer::@1 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1]
  __b1_from_ppuDataPrepare1:
    // [128] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*)(const nomodify void*) ppuDataTransfer::cpuData#0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#0] -- pbuz1=pbuc1 
    lda #<cpuData
    sta.z cpuSrc
    lda #>cpuData
    sta.z cpuSrc+1
    // [128] phi (word) ppuDataTransfer::i#2 = (word) 0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
    // ppuDataTransfer::@1
  __b1:
    // [129] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>size
    bcc __b2
    bne !+
    lda.z i
    cmp #<size
    bcc __b2
  !:
    jmp __breturn
    // ppuDataTransfer::@return
  __breturn:
    // [130] return 
    rts
    // ppuDataTransfer::@2
  __b2:
    // [131] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (cpuSrc),y
    sta.z ppuDataPut1_val
    jmp ppuDataPut1
    // ppuDataTransfer::ppuDataPut1
  ppuDataPut1:
    // [132] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataTransfer::ppuDataPut1_val#0 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPut1_val
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b3
    // ppuDataTransfer::@3
  __b3:
    // [133] (byte*) ppuDataTransfer::cpuSrc#1 ← ++ (byte*) ppuDataTransfer::cpuSrc#2 -- pbuz1=_inc_pbuz1 
    inc.z cpuSrc
    bne !+
    inc.z cpuSrc+1
  !:
    // [134] (word) ppuDataTransfer::i#1 ← ++ (word) ppuDataTransfer::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [128] phi from ppuDataTransfer::@3 to ppuDataTransfer::@1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1]
  __b1_from___b3:
    // [128] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*) ppuDataTransfer::cpuSrc#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#0] -- register_copy 
    // [128] phi (word) ppuDataTransfer::i#2 = (word) ppuDataTransfer::i#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#1] -- register_copy 
    jmp __b1
}
  // vblank
// NMI Called when the PPU refreshes the screen (also known as the V-Blank period)
vblank: {
    .label __1 = $35
    .label __3 = $36
    .label __5 = $37
    .label __7 = $38
    .label joy = $34
    // entry interrupt(HARDWARE_STACK)
    pha
    txa
    pha
    tya
    pha
    // [136] call readJoy1 
    jsr readJoy1
    // [137] (byte) readJoy1::return#2 ← (byte) readJoy1::joy#2 -- vbuz1=vbuz2 
    lda.z readJoy1.joy
    sta.z readJoy1.return
    jmp __b11
    // vblank::@11
  __b11:
    // [138] (byte) vblank::joy#0 ← (byte) readJoy1::return#2 -- vbuz1=vbuz2 
    lda.z readJoy1.return
    sta.z joy
    // [139] (byte~) vblank::$1 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_DOWN -- vbuz1=vbuz2_band_vbuc1 
    lda #JOY_DOWN
    and.z joy
    sta.z __1
    // [140] if((byte) 0==(byte~) vblank::$1) goto vblank::@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z __1
    beq __b1
    jmp __b5
    // vblank::@5
  __b5:
    // [141] (volatile byte) y_scroll ← ++ (volatile byte) y_scroll -- vbuz1=_inc_vbuz1 
    inc.z y_scroll
    // [142] if((volatile byte) y_scroll!=(byte) $f0) goto vblank::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$f0
    cmp.z y_scroll
    bne __b1
    jmp __b6
    // vblank::@6
  __b6:
    // [143] (volatile byte) y_scroll ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z y_scroll
    jmp __b1
    // vblank::@1
  __b1:
    // [144] (byte~) vblank::$3 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_UP -- vbuz1=vbuz2_band_vbuc1 
    lda #JOY_UP
    and.z joy
    sta.z __3
    // [145] if((byte) 0==(byte~) vblank::$3) goto vblank::@2 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z __3
    beq __b2
    jmp __b7
    // vblank::@7
  __b7:
    // [146] (volatile byte) y_scroll ← -- (volatile byte) y_scroll -- vbuz1=_dec_vbuz1 
    dec.z y_scroll
    // [147] if((volatile byte) y_scroll!=(byte) $ff) goto vblank::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z y_scroll
    bne __b2
    jmp __b8
    // vblank::@8
  __b8:
    // [148] (volatile byte) y_scroll ← (byte) $ef -- vbuz1=vbuc1 
    lda #$ef
    sta.z y_scroll
    jmp __b2
    // vblank::@2
  __b2:
    // [149] (byte~) vblank::$5 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_LEFT -- vbuz1=vbuz2_band_vbuc1 
    lda #JOY_LEFT
    and.z joy
    sta.z __5
    // [150] if((byte) 0==(byte~) vblank::$5) goto vblank::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z __5
    beq __b3
    jmp __b9
    // vblank::@9
  __b9:
    // [151] (volatile byte) x_scroll ← ++ (volatile byte) x_scroll -- vbuz1=_inc_vbuz1 
    inc.z x_scroll
    jmp __b3
    // vblank::@3
  __b3:
    // [152] (byte~) vblank::$7 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_RIGHT -- vbuz1=vbuz2_band_vbuc1 
    lda #JOY_RIGHT
    and.z joy
    sta.z __7
    // [153] if((byte) 0==(byte~) vblank::$7) goto vblank::@4 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z __7
    beq __b4
    jmp __b10
    // vblank::@10
  __b10:
    // [154] (volatile byte) x_scroll ← -- (volatile byte) x_scroll -- vbuz1=_dec_vbuz1 
    dec.z x_scroll
    jmp __b4
    // vblank::@4
  __b4:
    // [155] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (volatile byte) x_scroll -- _deref_pbuc1=vbuz1 
    lda.z x_scroll
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // [156] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (volatile byte) y_scroll -- _deref_pbuc1=vbuz1 
    lda.z y_scroll
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    jmp __breturn
    // vblank::@return
  __breturn:
    // [157] return  - exit interrupt(HARDWARE_STACK)
    pla
    tay
    pla
    tax
    pla
    rti
}
  // readJoy1
// Read Standard Controller #1
// Returns a byte representing the pushed buttons
// - bit 0: right
// - bit 1: left
// - bit 2: down
// - bit 3: up
// - bit 4: start
// - bit 5: select
// - bit 6: B
// - bit 7: A
readJoy1: {
    .label __1 = $39
    .label __2 = $3a
    .label joy = $1a
    .label i = $19
    .label return = $33
    // [158] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    // Latch the controller buttons
    lda #1
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [159] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [160] phi from readJoy1 to readJoy1::@1 [phi:readJoy1->readJoy1::@1]
  __b1_from_readJoy1:
    // [160] phi (byte) readJoy1::joy#2 = (byte) 0 [phi:readJoy1->readJoy1::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z joy
    // [160] phi (byte) readJoy1::i#2 = (byte) 0 [phi:readJoy1->readJoy1::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // readJoy1::@1
  __b1:
    // [161] if((byte) readJoy1::i#2<(byte) 8) goto readJoy1::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8
    bcc __b2
    jmp __breturn
    // readJoy1::@return
  __breturn:
    // [162] return 
    rts
    // readJoy1::@2
  __b2:
    // [163] (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z joy
    asl
    sta.z __1
    // [164] (byte~) readJoy1::$2 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    sta.z __2
    // [165] (byte) readJoy1::joy#1 ← (byte~) readJoy1::$1 | (byte~) readJoy1::$2 -- vbuz1=vbuz2_bor_vbuz3 
    lda.z __1
    ora.z __2
    sta.z joy
    // [166] (byte) readJoy1::i#1 ← ++ (byte) readJoy1::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [160] phi from readJoy1::@2 to readJoy1::@1 [phi:readJoy1::@2->readJoy1::@1]
  __b1_from___b2:
    // [160] phi (byte) readJoy1::joy#2 = (byte) readJoy1::joy#1 [phi:readJoy1::@2->readJoy1::@1#0] -- register_copy 
    // [160] phi (byte) readJoy1::i#2 = (byte) readJoy1::i#1 [phi:readJoy1::@2->readJoy1::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // Color Palette
  PALETTE: .byte 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $f, $30, 8, 1, $f, $18, 8, 1, $30, $37, $1a, $f, $f, $f, $f
.segment Tiles
TILES:
.var filechargen = LoadBinary("characters.901225-01.bin")
     .for(var c=0; c<256; c++) {
        // Plane 0
        .fill 8, filechargen.get(c*8+i)
        // Plane 1
        .fill 8, 0
    }

.segment Vectors
  VECTORS: .word vblank, main, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_line_text ← (const nomodify byte*) PPU_NAME_TABLE_0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] (volatile byte) x_scroll ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] (volatile byte) y_scroll ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement asm { cld ldx#$ff txs  } always clobbers reg byte x 
Statement [11] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 [ ] (  [ ] { }  main:7 [ ] { }  ) always clobbers reg byte a 
Statement [12] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 [ ] (  [ ] { }  main:7 [ ] { }  ) always clobbers reg byte a 
Statement [13] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 [ ] (  [ ] { }  main:7 [ ] { }  ) always clobbers reg byte a 
Statement [14] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 [ ] (  [ ] { }  main:7 [ ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [17] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 [ main::initNES1_waitForVBlank1_$0 ] (  [ main::initNES1_waitForVBlank1_$0 ] { }  main:7 [ main::initNES1_waitForVBlank1_$0 ] { }  ) always clobbers reg byte a 
Statement [20] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:7 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ]
Statement [21] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:7 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [22] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:7 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [23] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:7 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [24] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:7 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [25] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:7 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [26] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:7 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [27] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:7 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [31] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 [ main::initNES1_waitForVBlank2_$0 ] (  [ main::initNES1_waitForVBlank2_$0 ] { }  main:7 [ main::initNES1_waitForVBlank2_$0 ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [44] (volatile byte) x_scroll ← (byte) 0 [ ] (  [ ] { }  main:7 [ ] { }  ) always clobbers reg byte a 
Statement [45] (volatile byte) y_scroll ← (byte) -8 [ ] (  [ ] { }  main:7 [ ] { }  ) always clobbers reg byte a 
Statement [46] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 [ ] (  [ ] { }  main:7 [ ] { }  ) always clobbers reg byte a 
Statement [47] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $1e [ ] (  [ ] { }  main:7 [ ] { }  ) always clobbers reg byte a 
Statement [51] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) [ conio_cursor_x conio_cursor_y conio_line_text cputs::s#2 cputs::c#1 ] ( cputs:43 [ conio_cursor_x conio_cursor_y conio_line_text cputs::s#2 cputs::c#1 ] { }  main:7::cputs:43 [ conio_cursor_x conio_cursor_y conio_line_text cputs::s#2 cputs::c#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [58] (nomodify byte*) ppuDataSet::ppuData#0 ← (byte*) conio_line_text + (byte) conio_cursor_x [ conio_cursor_x conio_cursor_y conio_line_text cputc::c#0 ppuDataSet::ppuData#0 ] ( cputs:43::cputc:56 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cputc::c#0 ppuDataSet::ppuData#0 ] { { ppuDataSet::ppuDataPrepare1_ppuData#0 = ppuDataSet::ppuDataPrepare1_ppuData#2 } { ppuDataSet::val#0 = ppuDataSet::val#2 cputc::c#0 cputs::c#1 } }  main:7::cputs:43::cputc:56 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cputc::c#0 ppuDataSet::ppuData#0 ] { { ppuDataSet::ppuDataPrepare1_ppuData#0 = ppuDataSet::ppuDataPrepare1_ppuData#2 } { ppuDataSet::val#0 = ppuDataSet::val#2 cputc::c#0 cputs::c#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:36 [ cputc::c#0 ]
Statement [60] (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#2 ← (void*)(nomodify byte*) ppuDataSet::ppuData#0 [ conio_cursor_x conio_cursor_y conio_line_text ppuDataSet::val#0 ppuDataSet::ppuDataPrepare1_ppuData#2 ] ( cputs:43::cputc:56 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ppuDataSet::val#0 ppuDataSet::ppuDataPrepare1_ppuData#2 ] { { ppuDataSet::ppuDataPrepare1_ppuData#0 = ppuDataSet::ppuDataPrepare1_ppuData#2 } { ppuDataSet::val#0 = ppuDataSet::val#2 cputc::c#0 cputs::c#1 } }  main:7::cputs:43::cputc:56 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ppuDataSet::val#0 ppuDataSet::ppuDataPrepare1_ppuData#2 ] { { ppuDataSet::ppuDataPrepare1_ppuData#0 = ppuDataSet::ppuDataPrepare1_ppuData#2 } { ppuDataSet::val#0 = ppuDataSet::val#2 cputc::c#0 cputs::c#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:13 [ ppuDataSet::val#2 ppuDataSet::val#0 ppuDataSet::val#1 ]
Statement [63] if((byte) conio_cursor_x!=(byte) $20) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text ] ( cputs:43::cputc:56 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [69] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $20 [ conio_cursor_y conio_line_text ] ( cputs:43::cputc:56::cputln:65 [ cputs::s#0 conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:65 [ cputs::s#0 conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  cputs:43::cputc:56::cputln:68 [ cputs::s#0 conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:68 [ cputs::s#0 conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [70] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_line_text ] ( cputs:43::cputc:56::cputln:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  cputs:43::cputc:56::cputln:68 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:68 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [74] if((byte) conio_cursor_y!=(byte) $1e) goto cscroll::@return [ conio_cursor_y conio_line_text ] ( cputs:43::cputc:56::cputln:65::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:65::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  cputs:43::cputc:56::cputln:68::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:68::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [79] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $20 [ conio_cursor_y conio_line_text ] ( cputs:43::cputc:56::cputln:65::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:65::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  cputs:43::cputc:56::cputln:68::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:68::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [85] (nomodify void*) ppuDataGet::ppuData#0 ← (void*)(byte*) cscroll::line2#2 [ conio_cursor_y conio_line_text cscroll::y#2 cscroll::line2#2 cscroll::line1#2 cscroll::x#2 ppuDataGet::ppuData#0 ] ( cputs:43::cputc:56::cputln:65::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cscroll::y#2 cscroll::line2#2 cscroll::line1#2 cscroll::x#2 ppuDataGet::ppuData#0 ] { { cputc::c#0 = cputs::c#1 } { ppuDataGet::return#2 = ppuDataGet::ppuDataRead1_return#0 } }  main:7::cputs:43::cputc:56::cputln:65::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cscroll::y#2 cscroll::line2#2 cscroll::line1#2 cscroll::x#2 ppuDataGet::ppuData#0 ] { { cputc::c#0 = cputs::c#1 } { ppuDataGet::return#2 = ppuDataGet::ppuDataRead1_return#0 } }  cputs:43::cputc:56::cputln:68::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cscroll::y#2 cscroll::line2#2 cscroll::line1#2 cscroll::x#2 ppuDataGet::ppuData#0 ] { { cputc::c#0 = cputs::c#1 } { ppuDataGet::return#2 = ppuDataGet::ppuDataRead1_return#0 } }  main:7::cputs:43::cputc:56::cputln:68::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cscroll::y#2 cscroll::line2#2 cscroll::line1#2 cscroll::x#2 ppuDataGet::ppuData#0 ] { { cputc::c#0 = cputs::c#1 } { ppuDataGet::return#2 = ppuDataGet::ppuDataRead1_return#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ cscroll::y#2 cscroll::y#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:10 [ cscroll::x#2 cscroll::x#1 ]
Statement [90] (nomodify void*) ppuDataSet::ppuData#1 ← (void*)(byte*) cscroll::line1#2 [ conio_cursor_y conio_line_text cscroll::y#2 cscroll::line1#2 cscroll::x#2 cscroll::line2#1 cscroll::ch#0 ppuDataSet::ppuData#1 ] ( cputs:43::cputc:56::cputln:65::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cscroll::y#2 cscroll::line1#2 cscroll::x#2 cscroll::line2#1 cscroll::ch#0 ppuDataSet::ppuData#1 ] { { cputc::c#0 = cputs::c#1 } { ppuDataSet::ppuDataPrepare1_ppuData#0 = ppuDataSet::ppuData#1 } { ppuDataSet::val#1 = ppuDataSet::val#2 cscroll::ch#0 } }  main:7::cputs:43::cputc:56::cputln:65::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cscroll::y#2 cscroll::line1#2 cscroll::x#2 cscroll::line2#1 cscroll::ch#0 ppuDataSet::ppuData#1 ] { { cputc::c#0 = cputs::c#1 } { ppuDataSet::ppuDataPrepare1_ppuData#0 = ppuDataSet::ppuData#1 } { ppuDataSet::val#1 = ppuDataSet::val#2 cscroll::ch#0 } }  cputs:43::cputc:56::cputln:68::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cscroll::y#2 cscroll::line1#2 cscroll::x#2 cscroll::line2#1 cscroll::ch#0 ppuDataSet::ppuData#1 ] { { cputc::c#0 = cputs::c#1 } { ppuDataSet::ppuDataPrepare1_ppuData#0 = ppuDataSet::ppuData#1 } { ppuDataSet::val#1 = ppuDataSet::val#2 cscroll::ch#0 } }  main:7::cputs:43::cputc:56::cputln:68::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cscroll::y#2 cscroll::line1#2 cscroll::x#2 cscroll::line2#1 cscroll::ch#0 ppuDataSet::ppuData#1 ] { { cputc::c#0 = cputs::c#1 } { ppuDataSet::ppuDataPrepare1_ppuData#0 = ppuDataSet::ppuData#1 } { ppuDataSet::val#1 = ppuDataSet::val#2 cscroll::ch#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:42 [ cscroll::ch#0 ]
Statement [115] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#5) goto ppuDataFill::ppuDataPut1 [ ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] ( ppuDataFill:37 [ ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { }  main:7::ppuDataFill:37 [ ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { }  ppuDataFill:39 [ ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { }  main:7::ppuDataFill:39 [ ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { }  cputs:43::cputc:56::cputln:65::cscroll:72::ppuDataFill:78 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:65::cscroll:72::ppuDataFill:78 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { { cputc::c#0 = cputs::c#1 } }  cputs:43::cputc:56::cputln:68::cscroll:72::ppuDataFill:78 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:68::cscroll:72::ppuDataFill:78 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { { cputc::c#0 = cputs::c#1 } }  clrscr:41::ppuDataFill:120 [ ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { }  main:7::clrscr:41::ppuDataFill:120 [ ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:18 [ ppuDataFill::val#10 ]
Statement [121] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x ] ( clrscr:41 [ conio_cursor_x ] { }  main:7::clrscr:41 [ conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [122] (byte) conio_cursor_y ← (byte) 0 [ conio_cursor_x conio_cursor_y ] ( clrscr:41 [ conio_cursor_x conio_cursor_y ] { }  main:7::clrscr:41 [ conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [123] (byte*) conio_line_text ← (const nomodify byte*) PPU_NAME_TABLE_0 [ conio_cursor_x conio_cursor_y conio_line_text ] ( clrscr:41 [ conio_cursor_x conio_cursor_y conio_line_text ] { }  main:7::clrscr:41 [ conio_cursor_x conio_cursor_y conio_line_text ] { }  ) always clobbers reg byte a 
Statement [126] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0 [ ] ( ppuDataTransfer:35 [ ] { }  main:7::ppuDataTransfer:35 [ ] { }  ) always clobbers reg byte a 
Statement [127] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 [ ] ( ppuDataTransfer:35 [ ] { }  main:7::ppuDataTransfer:35 [ ] { }  ) always clobbers reg byte a 
Statement [129] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] ( ppuDataTransfer:35 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  main:7::ppuDataTransfer:35 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  ) always clobbers reg byte a 
Statement [131] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2) [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] ( ppuDataTransfer:35 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  main:7::ppuDataTransfer:35 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [139] (byte~) vblank::$1 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_DOWN [ x_scroll y_scroll vblank::joy#0 vblank::$1 ] (  [ x_scroll y_scroll vblank::joy#0 vblank::$1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:52 [ vblank::joy#0 ]
Statement [142] if((volatile byte) y_scroll!=(byte) $f0) goto vblank::@1 [ x_scroll y_scroll vblank::joy#0 ] (  [ x_scroll y_scroll vblank::joy#0 ] { }  ) always clobbers reg byte a 
Statement [143] (volatile byte) y_scroll ← (byte) 0 [ x_scroll y_scroll vblank::joy#0 ] (  [ x_scroll y_scroll vblank::joy#0 ] { }  ) always clobbers reg byte a 
Statement [144] (byte~) vblank::$3 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_UP [ x_scroll y_scroll vblank::joy#0 vblank::$3 ] (  [ x_scroll y_scroll vblank::joy#0 vblank::$3 ] { }  ) always clobbers reg byte a 
Statement [147] if((volatile byte) y_scroll!=(byte) $ff) goto vblank::@2 [ x_scroll y_scroll vblank::joy#0 ] (  [ x_scroll y_scroll vblank::joy#0 ] { }  ) always clobbers reg byte a 
Statement [148] (volatile byte) y_scroll ← (byte) $ef [ x_scroll y_scroll vblank::joy#0 ] (  [ x_scroll y_scroll vblank::joy#0 ] { }  ) always clobbers reg byte a 
Statement [149] (byte~) vblank::$5 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_LEFT [ x_scroll y_scroll vblank::joy#0 vblank::$5 ] (  [ x_scroll y_scroll vblank::joy#0 vblank::$5 ] { }  ) always clobbers reg byte a 
Statement [152] (byte~) vblank::$7 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_RIGHT [ x_scroll y_scroll vblank::$7 ] (  [ x_scroll y_scroll vblank::$7 ] { }  ) always clobbers reg byte a 
Statement [155] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (volatile byte) x_scroll [ y_scroll ] (  [ y_scroll ] { }  ) always clobbers reg byte a 
Statement [156] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (volatile byte) y_scroll [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [157] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [158] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 [ ] ( readJoy1:136 [ x_scroll y_scroll ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Statement [159] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 [ ] ( readJoy1:136 [ x_scroll y_scroll ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Statement [163] (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (byte) 1 [ readJoy1::i#2 readJoy1::$1 ] ( readJoy1:136 [ x_scroll y_scroll readJoy1::i#2 readJoy1::$1 ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:25 [ readJoy1::i#2 readJoy1::i#1 ]
Statement [164] (byte~) readJoy1::$2 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 [ readJoy1::i#2 readJoy1::$1 readJoy1::$2 ] ( readJoy1:136 [ x_scroll y_scroll readJoy1::i#2 readJoy1::$1 readJoy1::$2 ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:57 [ readJoy1::$1 ]
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_line_text ← (const nomodify byte*) PPU_NAME_TABLE_0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] (volatile byte) x_scroll ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] (volatile byte) y_scroll ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement asm { cld ldx#$ff txs  } always clobbers reg byte x 
Statement [11] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 [ ] (  [ ] { }  main:7 [ ] { }  ) always clobbers reg byte a 
Statement [12] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 [ ] (  [ ] { }  main:7 [ ] { }  ) always clobbers reg byte a 
Statement [13] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 [ ] (  [ ] { }  main:7 [ ] { }  ) always clobbers reg byte a 
Statement [14] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 [ ] (  [ ] { }  main:7 [ ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [17] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 [ main::initNES1_waitForVBlank1_$0 ] (  [ main::initNES1_waitForVBlank1_$0 ] { }  main:7 [ main::initNES1_waitForVBlank1_$0 ] { }  ) always clobbers reg byte a 
Statement [20] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:7 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [21] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:7 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [22] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:7 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [23] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:7 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [24] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:7 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [25] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:7 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [26] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:7 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [27] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:7 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [31] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 [ main::initNES1_waitForVBlank2_$0 ] (  [ main::initNES1_waitForVBlank2_$0 ] { }  main:7 [ main::initNES1_waitForVBlank2_$0 ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [44] (volatile byte) x_scroll ← (byte) 0 [ ] (  [ ] { }  main:7 [ ] { }  ) always clobbers reg byte a 
Statement [45] (volatile byte) y_scroll ← (byte) -8 [ ] (  [ ] { }  main:7 [ ] { }  ) always clobbers reg byte a 
Statement [46] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 [ ] (  [ ] { }  main:7 [ ] { }  ) always clobbers reg byte a 
Statement [47] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $1e [ ] (  [ ] { }  main:7 [ ] { }  ) always clobbers reg byte a 
Statement [51] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) [ conio_cursor_x conio_cursor_y conio_line_text cputs::s#2 cputs::c#1 ] ( cputs:43 [ conio_cursor_x conio_cursor_y conio_line_text cputs::s#2 cputs::c#1 ] { }  main:7::cputs:43 [ conio_cursor_x conio_cursor_y conio_line_text cputs::s#2 cputs::c#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [58] (nomodify byte*) ppuDataSet::ppuData#0 ← (byte*) conio_line_text + (byte) conio_cursor_x [ conio_cursor_x conio_cursor_y conio_line_text cputc::c#0 ppuDataSet::ppuData#0 ] ( cputs:43::cputc:56 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cputc::c#0 ppuDataSet::ppuData#0 ] { { ppuDataSet::ppuDataPrepare1_ppuData#0 = ppuDataSet::ppuDataPrepare1_ppuData#2 } { ppuDataSet::val#0 = ppuDataSet::val#2 cputc::c#0 cputs::c#1 } }  main:7::cputs:43::cputc:56 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cputc::c#0 ppuDataSet::ppuData#0 ] { { ppuDataSet::ppuDataPrepare1_ppuData#0 = ppuDataSet::ppuDataPrepare1_ppuData#2 } { ppuDataSet::val#0 = ppuDataSet::val#2 cputc::c#0 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [60] (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#2 ← (void*)(nomodify byte*) ppuDataSet::ppuData#0 [ conio_cursor_x conio_cursor_y conio_line_text ppuDataSet::val#0 ppuDataSet::ppuDataPrepare1_ppuData#2 ] ( cputs:43::cputc:56 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ppuDataSet::val#0 ppuDataSet::ppuDataPrepare1_ppuData#2 ] { { ppuDataSet::ppuDataPrepare1_ppuData#0 = ppuDataSet::ppuDataPrepare1_ppuData#2 } { ppuDataSet::val#0 = ppuDataSet::val#2 cputc::c#0 cputs::c#1 } }  main:7::cputs:43::cputc:56 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ppuDataSet::val#0 ppuDataSet::ppuDataPrepare1_ppuData#2 ] { { ppuDataSet::ppuDataPrepare1_ppuData#0 = ppuDataSet::ppuDataPrepare1_ppuData#2 } { ppuDataSet::val#0 = ppuDataSet::val#2 cputc::c#0 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [63] if((byte) conio_cursor_x!=(byte) $20) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text ] ( cputs:43::cputc:56 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [69] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $20 [ conio_cursor_y conio_line_text ] ( cputs:43::cputc:56::cputln:65 [ cputs::s#0 conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:65 [ cputs::s#0 conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  cputs:43::cputc:56::cputln:68 [ cputs::s#0 conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:68 [ cputs::s#0 conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [70] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_line_text ] ( cputs:43::cputc:56::cputln:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  cputs:43::cputc:56::cputln:68 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:68 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [74] if((byte) conio_cursor_y!=(byte) $1e) goto cscroll::@return [ conio_cursor_y conio_line_text ] ( cputs:43::cputc:56::cputln:65::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:65::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  cputs:43::cputc:56::cputln:68::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:68::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [79] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $20 [ conio_cursor_y conio_line_text ] ( cputs:43::cputc:56::cputln:65::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:65::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  cputs:43::cputc:56::cputln:68::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:68::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [85] (nomodify void*) ppuDataGet::ppuData#0 ← (void*)(byte*) cscroll::line2#2 [ conio_cursor_y conio_line_text cscroll::y#2 cscroll::line2#2 cscroll::line1#2 cscroll::x#2 ppuDataGet::ppuData#0 ] ( cputs:43::cputc:56::cputln:65::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cscroll::y#2 cscroll::line2#2 cscroll::line1#2 cscroll::x#2 ppuDataGet::ppuData#0 ] { { cputc::c#0 = cputs::c#1 } { ppuDataGet::return#2 = ppuDataGet::ppuDataRead1_return#0 } }  main:7::cputs:43::cputc:56::cputln:65::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cscroll::y#2 cscroll::line2#2 cscroll::line1#2 cscroll::x#2 ppuDataGet::ppuData#0 ] { { cputc::c#0 = cputs::c#1 } { ppuDataGet::return#2 = ppuDataGet::ppuDataRead1_return#0 } }  cputs:43::cputc:56::cputln:68::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cscroll::y#2 cscroll::line2#2 cscroll::line1#2 cscroll::x#2 ppuDataGet::ppuData#0 ] { { cputc::c#0 = cputs::c#1 } { ppuDataGet::return#2 = ppuDataGet::ppuDataRead1_return#0 } }  main:7::cputs:43::cputc:56::cputln:68::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cscroll::y#2 cscroll::line2#2 cscroll::line1#2 cscroll::x#2 ppuDataGet::ppuData#0 ] { { cputc::c#0 = cputs::c#1 } { ppuDataGet::return#2 = ppuDataGet::ppuDataRead1_return#0 } }  ) always clobbers reg byte a 
Statement [90] (nomodify void*) ppuDataSet::ppuData#1 ← (void*)(byte*) cscroll::line1#2 [ conio_cursor_y conio_line_text cscroll::y#2 cscroll::line1#2 cscroll::x#2 cscroll::line2#1 cscroll::ch#0 ppuDataSet::ppuData#1 ] ( cputs:43::cputc:56::cputln:65::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cscroll::y#2 cscroll::line1#2 cscroll::x#2 cscroll::line2#1 cscroll::ch#0 ppuDataSet::ppuData#1 ] { { cputc::c#0 = cputs::c#1 } { ppuDataSet::ppuDataPrepare1_ppuData#0 = ppuDataSet::ppuData#1 } { ppuDataSet::val#1 = ppuDataSet::val#2 cscroll::ch#0 } }  main:7::cputs:43::cputc:56::cputln:65::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cscroll::y#2 cscroll::line1#2 cscroll::x#2 cscroll::line2#1 cscroll::ch#0 ppuDataSet::ppuData#1 ] { { cputc::c#0 = cputs::c#1 } { ppuDataSet::ppuDataPrepare1_ppuData#0 = ppuDataSet::ppuData#1 } { ppuDataSet::val#1 = ppuDataSet::val#2 cscroll::ch#0 } }  cputs:43::cputc:56::cputln:68::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cscroll::y#2 cscroll::line1#2 cscroll::x#2 cscroll::line2#1 cscroll::ch#0 ppuDataSet::ppuData#1 ] { { cputc::c#0 = cputs::c#1 } { ppuDataSet::ppuDataPrepare1_ppuData#0 = ppuDataSet::ppuData#1 } { ppuDataSet::val#1 = ppuDataSet::val#2 cscroll::ch#0 } }  main:7::cputs:43::cputc:56::cputln:68::cscroll:72 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text cscroll::y#2 cscroll::line1#2 cscroll::x#2 cscroll::line2#1 cscroll::ch#0 ppuDataSet::ppuData#1 ] { { cputc::c#0 = cputs::c#1 } { ppuDataSet::ppuDataPrepare1_ppuData#0 = ppuDataSet::ppuData#1 } { ppuDataSet::val#1 = ppuDataSet::val#2 cscroll::ch#0 } }  ) always clobbers reg byte a 
Statement [115] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#5) goto ppuDataFill::ppuDataPut1 [ ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] ( ppuDataFill:37 [ ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { }  main:7::ppuDataFill:37 [ ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { }  ppuDataFill:39 [ ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { }  main:7::ppuDataFill:39 [ ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { }  cputs:43::cputc:56::cputln:65::cscroll:72::ppuDataFill:78 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:65::cscroll:72::ppuDataFill:78 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { { cputc::c#0 = cputs::c#1 } }  cputs:43::cputc:56::cputln:68::cscroll:72::ppuDataFill:78 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { { cputc::c#0 = cputs::c#1 } }  main:7::cputs:43::cputc:56::cputln:68::cscroll:72::ppuDataFill:78 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { { cputc::c#0 = cputs::c#1 } }  clrscr:41::ppuDataFill:120 [ ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { }  main:7::clrscr:41::ppuDataFill:120 [ ppuDataFill::size#5 ppuDataFill::val#10 ppuDataFill::i#2 ] { }  ) always clobbers reg byte a 
Statement [121] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x ] ( clrscr:41 [ conio_cursor_x ] { }  main:7::clrscr:41 [ conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [122] (byte) conio_cursor_y ← (byte) 0 [ conio_cursor_x conio_cursor_y ] ( clrscr:41 [ conio_cursor_x conio_cursor_y ] { }  main:7::clrscr:41 [ conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [123] (byte*) conio_line_text ← (const nomodify byte*) PPU_NAME_TABLE_0 [ conio_cursor_x conio_cursor_y conio_line_text ] ( clrscr:41 [ conio_cursor_x conio_cursor_y conio_line_text ] { }  main:7::clrscr:41 [ conio_cursor_x conio_cursor_y conio_line_text ] { }  ) always clobbers reg byte a 
Statement [126] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0 [ ] ( ppuDataTransfer:35 [ ] { }  main:7::ppuDataTransfer:35 [ ] { }  ) always clobbers reg byte a 
Statement [127] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 [ ] ( ppuDataTransfer:35 [ ] { }  main:7::ppuDataTransfer:35 [ ] { }  ) always clobbers reg byte a 
Statement [129] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] ( ppuDataTransfer:35 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  main:7::ppuDataTransfer:35 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  ) always clobbers reg byte a 
Statement [131] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2) [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] ( ppuDataTransfer:35 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  main:7::ppuDataTransfer:35 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [139] (byte~) vblank::$1 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_DOWN [ x_scroll y_scroll vblank::joy#0 vblank::$1 ] (  [ x_scroll y_scroll vblank::joy#0 vblank::$1 ] { }  ) always clobbers reg byte a 
Statement [142] if((volatile byte) y_scroll!=(byte) $f0) goto vblank::@1 [ x_scroll y_scroll vblank::joy#0 ] (  [ x_scroll y_scroll vblank::joy#0 ] { }  ) always clobbers reg byte a 
Statement [143] (volatile byte) y_scroll ← (byte) 0 [ x_scroll y_scroll vblank::joy#0 ] (  [ x_scroll y_scroll vblank::joy#0 ] { }  ) always clobbers reg byte a 
Statement [144] (byte~) vblank::$3 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_UP [ x_scroll y_scroll vblank::joy#0 vblank::$3 ] (  [ x_scroll y_scroll vblank::joy#0 vblank::$3 ] { }  ) always clobbers reg byte a 
Statement [147] if((volatile byte) y_scroll!=(byte) $ff) goto vblank::@2 [ x_scroll y_scroll vblank::joy#0 ] (  [ x_scroll y_scroll vblank::joy#0 ] { }  ) always clobbers reg byte a 
Statement [148] (volatile byte) y_scroll ← (byte) $ef [ x_scroll y_scroll vblank::joy#0 ] (  [ x_scroll y_scroll vblank::joy#0 ] { }  ) always clobbers reg byte a 
Statement [149] (byte~) vblank::$5 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_LEFT [ x_scroll y_scroll vblank::joy#0 vblank::$5 ] (  [ x_scroll y_scroll vblank::joy#0 vblank::$5 ] { }  ) always clobbers reg byte a 
Statement [152] (byte~) vblank::$7 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_RIGHT [ x_scroll y_scroll vblank::$7 ] (  [ x_scroll y_scroll vblank::$7 ] { }  ) always clobbers reg byte a 
Statement [155] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (volatile byte) x_scroll [ y_scroll ] (  [ y_scroll ] { }  ) always clobbers reg byte a 
Statement [156] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (volatile byte) y_scroll [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [157] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [158] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 [ ] ( readJoy1:136 [ x_scroll y_scroll ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Statement [159] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 [ ] ( readJoy1:136 [ x_scroll y_scroll ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Statement [163] (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (byte) 1 [ readJoy1::i#2 readJoy1::$1 ] ( readJoy1:136 [ x_scroll y_scroll readJoy1::i#2 readJoy1::$1 ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Statement [164] (byte~) readJoy1::$2 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 [ readJoy1::i#2 readJoy1::$1 readJoy1::$2 ] ( readJoy1:136 [ x_scroll y_scroll readJoy1::i#2 readJoy1::$1 readJoy1::$2 ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ cputs::s#2 cputs::s#0 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ cscroll::y#2 cscroll::y#1 ] : zp[1]:5 , reg byte x , reg byte y , 
Potential registers zp[2]:6 [ cscroll::line2#6 cscroll::line2#2 cscroll::line2#1 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ cscroll::line1#6 cscroll::line1#2 cscroll::line1#1 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ cscroll::x#2 cscroll::x#1 ] : zp[1]:10 , reg byte x , reg byte y , 
Potential registers zp[2]:11 [ ppuDataSet::ppuDataPrepare1_ppuData#0 ppuDataSet::ppuDataPrepare1_ppuData#2 ppuDataSet::ppuData#1 ] : zp[2]:11 , 
Potential registers zp[1]:13 [ ppuDataSet::val#2 ppuDataSet::val#0 ppuDataSet::val#1 ] : zp[1]:13 , reg byte x , reg byte y , 
Potential registers zp[2]:14 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ ppuDataFill::size#5 ] : zp[2]:16 , 
Potential registers zp[1]:18 [ ppuDataFill::val#10 ] : zp[1]:18 , reg byte x , reg byte y , 
Potential registers zp[2]:19 [ ppuDataFill::i#2 ppuDataFill::i#1 ] : zp[2]:19 , 
Potential registers zp[2]:21 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] : zp[2]:21 , 
Potential registers zp[2]:23 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ] : zp[2]:23 , 
Potential registers zp[1]:25 [ readJoy1::i#2 readJoy1::i#1 ] : zp[1]:25 , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ readJoy1::joy#2 readJoy1::joy#1 ] : zp[1]:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:27 [ conio_cursor_x ] : zp[1]:27 , 
Potential registers zp[1]:28 [ conio_cursor_y ] : zp[1]:28 , 
Potential registers zp[2]:29 [ conio_line_text ] : zp[2]:29 , 
Potential registers zp[1]:31 [ x_scroll ] : zp[1]:31 , 
Potential registers zp[1]:32 [ y_scroll ] : zp[1]:32 , 
Potential registers zp[1]:33 [ main::initNES1_waitForVBlank1_$0 ] : zp[1]:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ main::initNES1_waitForVBlank2_$0 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:35 [ cputs::c#1 ] : zp[1]:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:36 [ cputc::c#0 ] : zp[1]:36 , reg byte x , reg byte y , 
Potential registers zp[2]:37 [ ppuDataSet::ppuData#0 ] : zp[2]:37 , 
Potential registers zp[2]:39 [ ppuDataGet::ppuData#0 ] : zp[2]:39 , 
Potential registers zp[1]:41 [ ppuDataGet::return#2 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:42 [ cscroll::ch#0 ] : zp[1]:42 , reg byte x , reg byte y , 
Potential registers zp[1]:43 [ ppuDataSet::ppuDataPrepare1_$0 ] : zp[1]:43 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:44 [ ppuDataSet::ppuDataPrepare1_$1 ] : zp[1]:44 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:45 [ ppuDataGet::ppuDataPrepare1_$0 ] : zp[1]:45 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:46 [ ppuDataGet::ppuDataPrepare1_$1 ] : zp[1]:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:47 [ ppuDataGet::ppuDataRead1_return#0 ] : zp[1]:47 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:48 [ ppuDataFill::ppuDataPrepare1_$0 ] : zp[1]:48 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:49 [ ppuDataFill::ppuDataPrepare1_$1 ] : zp[1]:49 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:50 [ ppuDataTransfer::ppuDataPut1_val#0 ] : zp[1]:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:51 [ readJoy1::return#2 ] : zp[1]:51 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:52 [ vblank::joy#0 ] : zp[1]:52 , reg byte x , reg byte y , 
Potential registers zp[1]:53 [ vblank::$1 ] : zp[1]:53 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:54 [ vblank::$3 ] : zp[1]:54 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:55 [ vblank::$5 ] : zp[1]:55 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:56 [ vblank::$7 ] : zp[1]:56 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:57 [ readJoy1::$1 ] : zp[1]:57 , reg byte x , reg byte y , 
Potential registers zp[1]:58 [ readJoy1::$2 ] : zp[1]:58 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [ppuDataSet] 20,000,000,002: zp[1]:43 [ ppuDataSet::ppuDataPrepare1_$0 ] 20,000,000,002: zp[1]:44 [ ppuDataSet::ppuDataPrepare1_$1 ] 8,000,023,337.67: zp[2]:11 [ ppuDataSet::ppuDataPrepare1_ppuData#0 ppuDataSet::ppuDataPrepare1_ppuData#2 ppuDataSet::ppuData#1 ] 4,200,012,003.6: zp[1]:13 [ ppuDataSet::val#2 ppuDataSet::val#0 ppuDataSet::val#1 ] 5,000.5: zp[2]:37 [ ppuDataSet::ppuData#0 ] 
Uplift Scope [ppuDataGet] 20,000,000,002: zp[1]:45 [ ppuDataGet::ppuDataPrepare1_$0 ] 20,000,000,002: zp[1]:46 [ ppuDataGet::ppuDataPrepare1_$1 ] 5,250,000,000.75: zp[2]:39 [ ppuDataGet::ppuData#0 ] 3,666,666,667.33: zp[1]:47 [ ppuDataGet::ppuDataRead1_return#0 ] 2,000,000,002: zp[1]:41 [ ppuDataGet::return#2 ] 
Uplift Scope [cscroll] 2,272,727,275: zp[1]:10 [ cscroll::x#2 cscroll::x#1 ] 1,300,000,002.36: zp[2]:8 [ cscroll::line1#6 cscroll::line1#2 cscroll::line1#1 ] 747,619,049.52: zp[2]:6 [ cscroll::line2#6 cscroll::line2#2 cscroll::line2#1 ] 666,666,667.33: zp[1]:42 [ cscroll::ch#0 ] 221,428,573.64: zp[1]:5 [ cscroll::y#2 cscroll::y#1 ] 
Uplift Scope [ppuDataFill] 300,000,003: zp[2]:19 [ ppuDataFill::i#2 ppuDataFill::i#1 ] 20,000,002: zp[1]:48 [ ppuDataFill::ppuDataPrepare1_$0 ] 20,000,002: zp[1]:49 [ ppuDataFill::ppuDataPrepare1_$1 ] 11,111,111.22: zp[2]:16 [ ppuDataFill::size#5 ] 11,111,111.22: zp[1]:18 [ ppuDataFill::val#10 ] 6,666,667.33: zp[2]:14 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] 
Uplift Scope [] 64,002.16: zp[1]:28 [ conio_cursor_y ] 45,104.24: zp[2]:29 [ conio_line_text ] 5,189.19: zp[1]:27 [ conio_cursor_x ] 1.48: zp[1]:32 [ y_scroll ] 1.15: zp[1]:31 [ x_scroll ] 
Uplift Scope [cputc] 7,001: zp[1]:36 [ cputc::c#0 ] 
Uplift Scope [ppuDataTransfer] 2,602.6: zp[2]:21 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] 2,002: zp[1]:50 [ ppuDataTransfer::ppuDataPut1_val#0 ] 1,751.75: zp[2]:23 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ] 
Uplift Scope [cputs] 2,002: zp[2]:3 [ cputs::s#2 cputs::s#0 ] 1,001: zp[1]:35 [ cputs::c#1 ] 
Uplift Scope [readJoy1] 262.6: zp[1]:25 [ readJoy1::i#2 readJoy1::i#1 ] 202: zp[1]:58 [ readJoy1::$2 ] 152: zp[1]:26 [ readJoy1::joy#2 readJoy1::joy#1 ] 101: zp[1]:57 [ readJoy1::$1 ] 4: zp[1]:51 [ readJoy1::return#2 ] 
Uplift Scope [main] 263.72: zp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ] 202: zp[1]:33 [ main::initNES1_waitForVBlank1_$0 ] 202: zp[1]:34 [ main::initNES1_waitForVBlank2_$0 ] 
Uplift Scope [vblank] 4: zp[1]:53 [ vblank::$1 ] 4: zp[1]:54 [ vblank::$3 ] 4: zp[1]:55 [ vblank::$5 ] 4: zp[1]:56 [ vblank::$7 ] 0.71: zp[1]:52 [ vblank::joy#0 ] 
Uplift Scope [RICOH_2C02] 
Uplift Scope [RICOH_2A03] 
Uplift Scope [SpriteData] 
Uplift Scope [clrscr] 
Uplift Scope [cputln] 

Uplifting [ppuDataSet] best 103280 combination reg byte a [ ppuDataSet::ppuDataPrepare1_$0 ] reg byte a [ ppuDataSet::ppuDataPrepare1_$1 ] zp[2]:11 [ ppuDataSet::ppuDataPrepare1_ppuData#0 ppuDataSet::ppuDataPrepare1_ppuData#2 ppuDataSet::ppuData#1 ] reg byte x [ ppuDataSet::val#2 ppuDataSet::val#0 ppuDataSet::val#1 ] zp[2]:37 [ ppuDataSet::ppuData#0 ] 
Uplifting [ppuDataGet] best 94265 combination reg byte a [ ppuDataGet::ppuDataPrepare1_$0 ] reg byte a [ ppuDataGet::ppuDataPrepare1_$1 ] zp[2]:39 [ ppuDataGet::ppuData#0 ] reg byte a [ ppuDataGet::ppuDataRead1_return#0 ] reg byte a [ ppuDataGet::return#2 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [cscroll] best 81265 combination reg byte y [ cscroll::x#2 cscroll::x#1 ] zp[2]:8 [ cscroll::line1#6 cscroll::line1#2 cscroll::line1#1 ] zp[2]:6 [ cscroll::line2#6 cscroll::line2#2 cscroll::line2#1 ] reg byte x [ cscroll::ch#0 ] zp[1]:5 [ cscroll::y#2 cscroll::y#1 ] 
Uplifting [ppuDataFill] best 81211 combination zp[2]:19 [ ppuDataFill::i#2 ppuDataFill::i#1 ] reg byte a [ ppuDataFill::ppuDataPrepare1_$0 ] reg byte a [ ppuDataFill::ppuDataPrepare1_$1 ] zp[2]:16 [ ppuDataFill::size#5 ] reg byte x [ ppuDataFill::val#10 ] zp[2]:14 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] 
Uplifting [] best 81211 combination zp[1]:28 [ conio_cursor_y ] zp[2]:29 [ conio_line_text ] zp[1]:27 [ conio_cursor_x ] zp[1]:32 [ y_scroll ] zp[1]:31 [ x_scroll ] 
Uplifting [cputc] best 81175 combination reg byte x [ cputc::c#0 ] 
Uplifting [ppuDataTransfer] best 81115 combination zp[2]:21 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] reg byte a [ ppuDataTransfer::ppuDataPut1_val#0 ] zp[2]:23 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ] 
Uplifting [cputs] best 81045 combination zp[2]:3 [ cputs::s#2 cputs::s#0 ] reg byte a [ cputs::c#1 ] 
Uplifting [readJoy1] best 80802 combination reg byte x [ readJoy1::i#2 readJoy1::i#1 ] reg byte a [ readJoy1::$2 ] reg byte a [ readJoy1::joy#2 readJoy1::joy#1 ] zp[1]:57 [ readJoy1::$1 ] zp[1]:51 [ readJoy1::return#2 ] 
Limited combination testing to 100 combinations of 576 possible.
Uplifting [main] best 80352 combination reg byte x [ main::initNES1_i#2 main::initNES1_i#1 ] reg byte a [ main::initNES1_waitForVBlank1_$0 ] reg byte a [ main::initNES1_waitForVBlank2_$0 ] 
Uplifting [vblank] best 80328 combination reg byte a [ vblank::$1 ] reg byte a [ vblank::$3 ] reg byte a [ vblank::$5 ] reg byte a [ vblank::$7 ] zp[1]:52 [ vblank::joy#0 ] 
Limited combination testing to 100 combinations of 768 possible.
Uplifting [RICOH_2C02] best 80328 combination 
Uplifting [RICOH_2A03] best 80328 combination 
Uplifting [SpriteData] best 80328 combination 
Uplifting [clrscr] best 80328 combination 
Uplifting [cputln] best 80328 combination 
Attempting to uplift remaining variables inzp[1]:5 [ cscroll::y#2 cscroll::y#1 ]
Uplifting [cscroll] best 80328 combination zp[1]:5 [ cscroll::y#2 cscroll::y#1 ] 
Attempting to uplift remaining variables inzp[1]:28 [ conio_cursor_y ]
Uplifting [] best 80328 combination zp[1]:28 [ conio_cursor_y ] 
Attempting to uplift remaining variables inzp[1]:27 [ conio_cursor_x ]
Uplifting [] best 80328 combination zp[1]:27 [ conio_cursor_x ] 
Attempting to uplift remaining variables inzp[1]:57 [ readJoy1::$1 ]
Uplifting [readJoy1] best 80328 combination zp[1]:57 [ readJoy1::$1 ] 
Attempting to uplift remaining variables inzp[1]:51 [ readJoy1::return#2 ]
Uplifting [readJoy1] best 80322 combination reg byte a [ readJoy1::return#2 ] 
Attempting to uplift remaining variables inzp[1]:32 [ y_scroll ]
Uplifting [] best 80322 combination zp[1]:32 [ y_scroll ] 
Attempting to uplift remaining variables inzp[1]:31 [ x_scroll ]
Uplifting [] best 80322 combination zp[1]:31 [ x_scroll ] 
Attempting to uplift remaining variables inzp[1]:52 [ vblank::joy#0 ]
Uplifting [vblank] best 80317 combination reg byte x [ vblank::joy#0 ] 
Coalescing zero page register [ zp[2]:11 [ ppuDataSet::ppuDataPrepare1_ppuData#0 ppuDataSet::ppuDataPrepare1_ppuData#2 ppuDataSet::ppuData#1 ] ] with [ zp[2]:37 [ ppuDataSet::ppuData#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:14 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] ] with [ zp[2]:11 [ ppuDataSet::ppuDataPrepare1_ppuData#0 ppuDataSet::ppuDataPrepare1_ppuData#2 ppuDataSet::ppuData#1 ppuDataSet::ppuData#0 ] ]
Coalescing zero page register [ zp[2]:21 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] ] with [ zp[2]:3 [ cputs::s#2 cputs::s#0 ] ]
Coalescing zero page register [ zp[2]:23 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ] ] with [ zp[2]:6 [ cscroll::line2#6 cscroll::line2#2 cscroll::line2#1 ] ]
Coalescing zero page register [ zp[2]:39 [ ppuDataGet::ppuData#0 ] ] with [ zp[2]:16 [ ppuDataFill::size#5 ] ]
Coalescing zero page register [ zp[2]:23 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 cscroll::line2#6 cscroll::line2#2 cscroll::line2#1 ] ] with [ zp[2]:19 [ ppuDataFill::i#2 ppuDataFill::i#1 ] ]
Allocated (was zp[1]:5) zp[1]:2 [ cscroll::y#2 cscroll::y#1 ]
Allocated (was zp[2]:8) zp[2]:3 [ cscroll::line1#6 cscroll::line1#2 cscroll::line1#1 ]
Allocated (was zp[2]:14) zp[2]:5 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataSet::ppuDataPrepare1_ppuData#0 ppuDataSet::ppuDataPrepare1_ppuData#2 ppuDataSet::ppuData#1 ppuDataSet::ppuData#0 ]
Allocated (was zp[2]:21) zp[2]:7 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 cputs::s#2 cputs::s#0 ]
Allocated (was zp[2]:23) zp[2]:9 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 cscroll::line2#6 cscroll::line2#2 cscroll::line2#1 ppuDataFill::i#2 ppuDataFill::i#1 ]
Allocated (was zp[1]:27) zp[1]:11 [ conio_cursor_x ]
Allocated (was zp[1]:28) zp[1]:12 [ conio_cursor_y ]
Allocated (was zp[2]:29) zp[2]:13 [ conio_line_text ]
Allocated (was zp[1]:31) zp[1]:15 [ x_scroll ]
Allocated (was zp[1]:32) zp[1]:16 [ y_scroll ]
Allocated (was zp[2]:39) zp[2]:17 [ ppuDataGet::ppuData#0 ppuDataFill::size#5 ]
Allocated (was zp[1]:57) zp[1]:19 [ readJoy1::$1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// NES conio printing
// Nintendo Entertainment System (NES
// https://en.wikipedia.org/wiki/Nintendo_Entertainment_System_(Model_NES-101)
// https://github.com/gregkrsak/first_nes
// Ricoh 2C02 - NES Picture Processing Unit (PPU)
// Ricoh RP2C02 (NTSC version) / RP2C07 (PAL version),
// https://en.wikipedia.org/wiki/Picture_Processing_Unit
// https://wiki.nesdev.com/w/index.php/PPU_registers
// http://nesdev.com/2C02%20technical%20reference.TXT
// Based on: https://github.com/gregkrsak/first_nes written by Greg M. Krsak, 2018. 
  // Upstart
  // Nintendo Entertainment System (NES) ROM
// https://sadistech.com/nesromtool/romdoc.html
// https://forums.nesdev.com/viewtopic.php?f=2&t=9896
// https://github.com/gregkrsak/first_nes
.file [name="nes-conio.nes", type="bin", segments="NesRom"]
.file [name="nes-conio.nes_hdr", type="bin", segments="Header"]
.file [name="nes-conio.nes_prg", type="bin", segments="ProgramRom"]
.file [name="nes-conio.nes_chr", type="bin", segments="CharacterRom"]
.segmentdef Header  [ start=$0000,       min=$0000, max=$000f, fill ]
.segmentdef Tiles   [ start=$0000,       min=$0000, max=$1fff, fill ]
.segmentdef Code    [ start=$c000,       min=$c000, max=$fff9 ]
.segmentdef Data    [ startAfter="Code", min=$c000, max=$fff9 ]
.segmentdef Vectors [ start=$fffa,       min=$fffa, max=$ffff ]
.segmentdef GameRam [start=$200,max=$7ff, virtual]
.segmentdef ProgramRom [ segments="Code, Data, Vectors" ]
.segmentdef CharacterRom [ segments="Tiles" ]
.segmentdef NesRom
.segment NesRom
.segmentout [ segments="Header" ]
.segmentout [ segments="ProgramRom" ]
.segmentout [ segments="CharacterRom" ]
.segment Header
.text   @"NES\$1a"
.byte   $01           // 1x 16KB ROM (PRG)
.byte   $01           // 1x 8KB VROM (CHR)
.byte   %00000001     // Mapper nibble 0000 == No mapping (a simple 16KB PRG + 8KB CHR game)
                      // Mirroring nibble 0001 == Vertical mirroring only
.segment Code

  // Global Constants & labels
  // Standard Controller Right Button
  .const JOY_RIGHT = 1
  // Standard Controller Left Button
  .const JOY_LEFT = 2
  // Standard Controller Down Button
  .const JOY_DOWN = 4
  // Standard Controller Up Button
  .const JOY_UP = 8
  .const OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
  .const OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
  .const OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
  .const OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
  .const OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
  .const OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
  .const OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
  .const SIZEOF_BYTE = 1
  // $2000-$23bf	$03c0	Name table 0
  .label PPU_NAME_TABLE_0 = $2000
  // $23c0-$23ff	$0040	Attribute table 0
  .label PPU_ATTRIBUTE_TABLE_0 = $23c0
  // $27c0-$27ff	$0040	Attribute table 1
  .label PPU_ATTRIBUTE_TABLE_1 = $27c0
  // $3000-$3eff	$0f00	Mirrors of $2000-$2eff
  // $3f00-$3f1f	$0020	Palette RAM indexes
  .label PPU_PALETTE = $3f00
  // APU Frame Counter
  // generates low-frequency clocks for the channels and an optional 60 Hz interrupt.
  // https://wiki.nesdev.com/w/index.php/APU_Frame_Counter
  // ------+-----+---------------------------------------------------------------
  //  $4017 |	 W  | FR_COUNTER Frame Counter	Set mode and interrupt
  //  ------+-----+---------------------------------------------------------------
  //        |   7	| Sequencer mode: 0 selects 4-step sequence, 1 selects 5-step sequence
  //        |   6	| Interrupt inhibit flag. If set, the frame interrupt flag is cleared, otherwise it is unaffected.
  //  ------+-----+---------------------------------------------------------------
  // Side effects	After 3 or 4 CPU clock cycles*, the timer is reset.
  // If the mode flag is set, then both "quarter frame" and "half frame" signals are also generated.
  .label FR_COUNTER = $4017
  // Pointer to the start of RAM memory
  .label MEMORY = 0
  // PPU Status Register for reading in ASM
  .label PPU_PPUSTATUS = $2002
  // NES Picture Processing Unit (PPU)
  .label PPU = $2000
  // NES CPU and audion processing unit (APU)
  .label APU = $4000
  .label conio_cursor_x = $b
  .label conio_cursor_y = $c
  .label conio_line_text = $d
  .label x_scroll = $f
  .label y_scroll = $10
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  lda #0
  sta.z conio_cursor_y
  // [3] (byte*) conio_line_text ← (const nomodify byte*) PPU_NAME_TABLE_0 -- pbuz1=pbuc1 
  // The current text cursor line start
  lda #<PPU_NAME_TABLE_0
  sta.z conio_line_text
  lda #>PPU_NAME_TABLE_0
  sta.z conio_line_text+1
  jmp __b2
  // @2
__b2:
  // [4] (volatile byte) x_scroll ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z x_scroll
  // [5] (volatile byte) y_scroll ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z y_scroll
  // [6] phi from @2 to @3 [phi:@2->@3]
__b3_from___b2:
  jmp __b3
  // @3
__b3:
  // [7] call main 
  // [9] phi from @3 to main [phi:@3->main]
main_from___b3:
  jsr main
  // [8] phi from @3 to @end [phi:@3->@end]
__bend_from___b3:
  jmp __bend
  // @end
__bend:
.segment Code
  // main
// RESET Called when the NES is reset, including when it is turned on.
main: {
    jmp initNES1
    // main::initNES1
  initNES1:
    // asm { cld ldx#$ff txs  }
    cld
    ldx #$ff
    txs
    jmp initNES1_disableVideoOutput1
    // main::initNES1_disableVideoOutput1
  initNES1_disableVideoOutput1:
    // [11] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU
    // [12] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    jmp initNES1_disableAudioOutput1
    // main::initNES1_disableAudioOutput1
  initNES1_disableAudioOutput1:
    // [13] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta FR_COUNTER
    // [14] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
    jmp initNES1_clearVBlankFlag1
    // main::initNES1_clearVBlankFlag1
  initNES1_clearVBlankFlag1:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [16] phi from main::initNES1_clearVBlankFlag1 to main::initNES1_waitForVBlank1 [phi:main::initNES1_clearVBlankFlag1->main::initNES1_waitForVBlank1]
  initNES1_waitForVBlank1_from_initNES1_clearVBlankFlag1:
    jmp initNES1_waitForVBlank1
    // main::initNES1_waitForVBlank1
  initNES1_waitForVBlank1:
    jmp initNES1_waitForVBlank1___b1
    // main::initNES1_waitForVBlank1_@1
  initNES1_waitForVBlank1___b1:
    // [17] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // [18] if((byte) 0==(byte~) main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank1___b1
    // [19] phi from main::initNES1_waitForVBlank1_@1 to main::initNES1_@1 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1]
  initNES1___b1_from_initNES1_waitForVBlank1___b1:
    // [19] phi (byte) main::initNES1_i#2 = (byte) 0 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp initNES1___b1
    // [19] phi from main::initNES1_@1 to main::initNES1_@1 [phi:main::initNES1_@1->main::initNES1_@1]
  initNES1___b1_from_initNES1___b1:
    // [19] phi (byte) main::initNES1_i#2 = (byte) main::initNES1_i#1 [phi:main::initNES1_@1->main::initNES1_@1#0] -- register_copy 
    jmp initNES1___b1
    // main::initNES1_@1
  initNES1___b1:
    // [20] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY,x
    // [21] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$100,x
    // [22] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$200,x
    // [23] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$300,x
    // [24] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$400,x
    // [25] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$500,x
    // [26] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$600,x
    // [27] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$700,x
    // [28] (byte) main::initNES1_i#1 ← ++ (byte) main::initNES1_i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [29] if((byte) 0!=(byte) main::initNES1_i#1) goto main::initNES1_@1 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne initNES1___b1_from_initNES1___b1
    // [30] phi from main::initNES1_@1 to main::initNES1_waitForVBlank2 [phi:main::initNES1_@1->main::initNES1_waitForVBlank2]
  initNES1_waitForVBlank2_from_initNES1___b1:
    jmp initNES1_waitForVBlank2
    // main::initNES1_waitForVBlank2
  initNES1_waitForVBlank2:
    jmp initNES1_waitForVBlank2___b1
    // main::initNES1_waitForVBlank2_@1
  initNES1_waitForVBlank2___b1:
    // [31] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // [32] if((byte) 0==(byte~) main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank2___b1
    jmp initNES1___b7
    // main::initNES1_@7
  initNES1___b7:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [34] phi from main::initNES1_@7 to main::@2 [phi:main::initNES1_@7->main::@2]
  __b2_from_initNES1___b7:
    jmp __b2
    // main::@2
  __b2:
    // [35] call ppuDataTransfer 
  // Transfer the palette
    // [125] phi from main::@2 to ppuDataTransfer [phi:main::@2->ppuDataTransfer]
  ppuDataTransfer_from___b2:
    jsr ppuDataTransfer
    // [36] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [37] call ppuDataFill 
  // Fill the PPU attribute table
    // [109] phi from main::@3 to ppuDataFill [phi:main::@3->ppuDataFill]
  ppuDataFill_from___b3:
    // [109] phi (byte) ppuDataFill::val#10 = (byte) 0 [phi:main::@3->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #0
    // [109] phi (word) ppuDataFill::size#5 = (byte) $40 [phi:main::@3->ppuDataFill#1] -- vwuz1=vbuc1 
    lda #<$40
    sta.z ppuDataFill.size
    lda #>$40
    sta.z ppuDataFill.size+1
    // [109] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 [phi:main::@3->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [38] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [39] call ppuDataFill 
    // [109] phi from main::@4 to ppuDataFill [phi:main::@4->ppuDataFill]
  ppuDataFill_from___b4:
    // [109] phi (byte) ppuDataFill::val#10 = (byte) 0 [phi:main::@4->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #0
    // [109] phi (word) ppuDataFill::size#5 = (byte) $40 [phi:main::@4->ppuDataFill#1] -- vwuz1=vbuc1 
    lda #<$40
    sta.z ppuDataFill.size
    lda #>$40
    sta.z ppuDataFill.size+1
    // [109] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_1 [phi:main::@4->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_ATTRIBUTE_TABLE_1
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_ATTRIBUTE_TABLE_1
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [40] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [41] call clrscr 
  // Print a string
    // [119] phi from main::@5 to clrscr [phi:main::@5->clrscr]
  clrscr_from___b5:
    jsr clrscr
    // [42] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [43] call cputs 
    // [49] phi from main::@6 to cputs [phi:main::@6->cputs]
  cputs_from___b6:
    jsr cputs
    jmp __b7
    // main::@7
  __b7:
    // [44] (volatile byte) x_scroll ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z x_scroll
    // [45] (volatile byte) y_scroll ← (byte) -8 -- vbuz1=vbuc1 
    lda #-8
    sta.z y_scroll
    jmp enableVideoOutput1
    // main::enableVideoOutput1
  enableVideoOutput1:
    // [46] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 -- _deref_pbuc1=vbuc2 
    lda #$80
    sta PPU
    // [47] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $1e -- _deref_pbuc1=vbuc2 
    lda #$1e
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // [48] phi from main::@1 main::enableVideoOutput1 to main::@1 [phi:main::@1/main::enableVideoOutput1->main::@1]
  __b1_from___b1:
  __b1_from_enableVideoOutput1:
    jmp __b1
  // Infinite loop
    // main::@1
  __b1:
    jmp __b1_from___b1
  .segment Data
    s: .text @"hello world!\ni am nes\n look at me \n\n"
    .byte 0
}
.segment Code
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(7) s)
cputs: {
    .label s = 7
    // [50] phi from cputs to cputs::@1 [phi:cputs->cputs::@1]
  __b1_from_cputs:
    // [50] phi (to_nomodify byte*) cputs::s#2 = (const byte*) main::s [phi:cputs->cputs::@1#0] -- pbuz1=pbuc1 
    lda #<main.s
    sta.z s
    lda #>main.s
    sta.z s+1
    jmp __b1
    // cputs::@1
  __b1:
    // [51] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [52] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [53] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [54] return 
    rts
    // cputs::@2
  __b2:
    // [55] (byte) cputc::c#0 ← (byte) cputs::c#1 -- vbuxx=vbuaa 
    tax
    // [56] call cputc 
    jsr cputc
    // [50] phi from cputs::@2 to cputs::@1 [phi:cputs::@2->cputs::@1]
  __b1_from___b2:
    // [50] phi (to_nomodify byte*) cputs::s#2 = (to_nomodify byte*) cputs::s#0 [phi:cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(X) c)
cputc: {
    // [57] if((byte) cputc::c#0==(byte) ' ') goto cputc::@1 -- vbuxx_eq_vbuc1_then_la1 
    cpx #'\n'
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [58] (nomodify byte*) ppuDataSet::ppuData#0 ← (byte*) conio_line_text + (byte) conio_cursor_x -- pbuz1=pbuz2_plus_vbuz3 
    lda.z conio_cursor_x
    clc
    adc.z conio_line_text
    sta.z ppuDataSet.ppuData
    lda #0
    adc.z conio_line_text+1
    sta.z ppuDataSet.ppuData+1
    // [59] (byte) ppuDataSet::val#0 ← (byte) cputc::c#0
    // [60] (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#2 ← (void*)(nomodify byte*) ppuDataSet::ppuData#0
    // [61] call ppuDataSet 
    // [95] phi from cputc::@2 to ppuDataSet [phi:cputc::@2->ppuDataSet]
  ppuDataSet_from___b2:
    // [95] phi (byte) ppuDataSet::val#2 = (byte) ppuDataSet::val#0 [phi:cputc::@2->ppuDataSet#0] -- register_copy 
    // [95] phi (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 = (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#2 [phi:cputc::@2->ppuDataSet#1] -- register_copy 
    jsr ppuDataSet
    jmp __b4
    // cputc::@4
  __b4:
    // [62] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [63] if((byte) conio_cursor_x!=(byte) $20) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$20
    cmp.z conio_cursor_x
    bne __breturn
    // [64] phi from cputc::@4 to cputc::@3 [phi:cputc::@4->cputc::@3]
  __b3_from___b4:
    jmp __b3
    // cputc::@3
  __b3:
    // [65] call cputln 
    jsr cputln
    jmp __breturn
    // cputc::@return
  __breturn:
    // [66] return 
    rts
    // [67] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [68] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputln
// Print a newline
cputln: {
    // [69] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $20 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$20
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // [70] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [71] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [72] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [73] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label line2 = 9
    // Scroll lines up
    .label line1 = 3
    .label y = 2
    // [74] if((byte) conio_cursor_y!=(byte) $1e) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$1e
    cmp.z conio_cursor_y
    bne __breturn
    // [75] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    // [75] phi (byte*) cscroll::line1#6 = (const nomodify byte*) PPU_NAME_TABLE_0 [phi:cscroll->cscroll::@1#0] -- pbuz1=pbuc1 
    lda #<PPU_NAME_TABLE_0
    sta.z line1
    lda #>PPU_NAME_TABLE_0
    sta.z line1+1
    // [75] phi (byte*) cscroll::line2#6 = (const nomodify byte*) PPU_NAME_TABLE_0+(byte) $20 [phi:cscroll->cscroll::@1#1] -- pbuz1=pbuc1 
    lda #<PPU_NAME_TABLE_0+$20
    sta.z line2
    lda #>PPU_NAME_TABLE_0+$20
    sta.z line2+1
    // [75] phi (byte) cscroll::y#2 = (byte) 0 [phi:cscroll->cscroll::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b1
    // cscroll::@1
  __b1:
    // [76] if((byte) cscroll::y#2<(byte)(number) $1e-(number) 1) goto cscroll::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z y
    cmp #$1e-1
    bcc __b3_from___b1
    // [77] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [78] call ppuDataFill 
  // Fill last line with space
    // [109] phi from cscroll::@2 to ppuDataFill [phi:cscroll::@2->ppuDataFill]
  ppuDataFill_from___b2:
    // [109] phi (byte) ppuDataFill::val#10 = (byte) ' ' [phi:cscroll::@2->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #' '
    // [109] phi (word) ppuDataFill::size#5 = (byte) $20 [phi:cscroll::@2->ppuDataFill#1] -- vwuz1=vbuc1 
    lda #<$20
    sta.z ppuDataFill.size
    lda #>$20
    sta.z ppuDataFill.size+1
    // [109] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0+(word)(number) $1e*(number) $20-(byte) $20 [phi:cscroll::@2->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0+$1e*$20-$20
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_NAME_TABLE_0+$1e*$20-$20
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    jmp __b6
    // cscroll::@6
  __b6:
    // [79] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $20 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$20
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // [80] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [81] return 
    rts
    // [82] phi from cscroll::@1 to cscroll::@3 [phi:cscroll::@1->cscroll::@3]
  __b3_from___b1:
    // [82] phi (byte*) cscroll::line1#2 = (byte*) cscroll::line1#6 [phi:cscroll::@1->cscroll::@3#0] -- register_copy 
    // [82] phi (byte*) cscroll::line2#2 = (byte*) cscroll::line2#6 [phi:cscroll::@1->cscroll::@3#1] -- register_copy 
    // [82] phi (byte) cscroll::x#2 = (byte) 0 [phi:cscroll::@1->cscroll::@3#2] -- vbuyy=vbuc1 
    ldy #0
    jmp __b3
    // cscroll::@3
  __b3:
    // [83] if((byte) cscroll::x#2<(byte) $20) goto cscroll::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$20
    bcc __b4
    jmp __b5
    // cscroll::@5
  __b5:
    // [84] (byte) cscroll::y#1 ← ++ (byte) cscroll::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [75] phi from cscroll::@5 to cscroll::@1 [phi:cscroll::@5->cscroll::@1]
  __b1_from___b5:
    // [75] phi (byte*) cscroll::line1#6 = (byte*) cscroll::line1#2 [phi:cscroll::@5->cscroll::@1#0] -- register_copy 
    // [75] phi (byte*) cscroll::line2#6 = (byte*) cscroll::line2#2 [phi:cscroll::@5->cscroll::@1#1] -- register_copy 
    // [75] phi (byte) cscroll::y#2 = (byte) cscroll::y#1 [phi:cscroll::@5->cscroll::@1#2] -- register_copy 
    jmp __b1
    // cscroll::@4
  __b4:
    // [85] (nomodify void*) ppuDataGet::ppuData#0 ← (void*)(byte*) cscroll::line2#2 -- pvoz1=pvoz2 
    lda.z line2
    sta.z ppuDataGet.ppuData
    lda.z line2+1
    sta.z ppuDataGet.ppuData+1
    // [86] call ppuDataGet 
    // [102] phi from cscroll::@4 to ppuDataGet [phi:cscroll::@4->ppuDataGet]
  ppuDataGet_from___b4:
    jsr ppuDataGet
    // [87] (byte) ppuDataGet::return#2 ← (byte) ppuDataGet::ppuDataRead1_return#0
    jmp __b7
    // cscroll::@7
  __b7:
    // [88] (byte) cscroll::ch#0 ← (byte) ppuDataGet::return#2 -- vbuxx=vbuaa 
    tax
    // [89] (byte*) cscroll::line2#1 ← ++ (byte*) cscroll::line2#2 -- pbuz1=_inc_pbuz1 
    inc.z line2
    bne !+
    inc.z line2+1
  !:
    // [90] (nomodify void*) ppuDataSet::ppuData#1 ← (void*)(byte*) cscroll::line1#2 -- pvoz1=pvoz2 
    lda.z line1
    sta.z ppuDataSet.ppuData
    lda.z line1+1
    sta.z ppuDataSet.ppuData+1
    // [91] (byte) ppuDataSet::val#1 ← (byte) cscroll::ch#0
    // [92] call ppuDataSet 
    // [95] phi from cscroll::@7 to ppuDataSet [phi:cscroll::@7->ppuDataSet]
  ppuDataSet_from___b7:
    // [95] phi (byte) ppuDataSet::val#2 = (byte) ppuDataSet::val#1 [phi:cscroll::@7->ppuDataSet#0] -- register_copy 
    // [95] phi (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 = (nomodify void*) ppuDataSet::ppuData#1 [phi:cscroll::@7->ppuDataSet#1] -- register_copy 
    jsr ppuDataSet
    jmp __b8
    // cscroll::@8
  __b8:
    // [93] (byte*) cscroll::line1#1 ← ++ (byte*) cscroll::line1#2 -- pbuz1=_inc_pbuz1 
    inc.z line1
    bne !+
    inc.z line1+1
  !:
    // [94] (byte) cscroll::x#1 ← ++ (byte) cscroll::x#2 -- vbuyy=_inc_vbuyy 
    iny
    // [82] phi from cscroll::@8 to cscroll::@3 [phi:cscroll::@8->cscroll::@3]
  __b3_from___b8:
    // [82] phi (byte*) cscroll::line1#2 = (byte*) cscroll::line1#1 [phi:cscroll::@8->cscroll::@3#0] -- register_copy 
    // [82] phi (byte*) cscroll::line2#2 = (byte*) cscroll::line2#1 [phi:cscroll::@8->cscroll::@3#1] -- register_copy 
    // [82] phi (byte) cscroll::x#2 = (byte) cscroll::x#1 [phi:cscroll::@8->cscroll::@3#2] -- register_copy 
    jmp __b3
}
  // ppuDataSet
// Set one byte in PPU memory
// - ppuData : Pointer in the PPU memory
// - val : The value to set
// ppuDataSet(byte* zp(5) ppuData, byte register(X) val)
ppuDataSet: {
    .label ppuDataPrepare1_ppuData = 5
    .label ppuData = 5
    jmp ppuDataPrepare1
    // ppuDataSet::ppuDataPrepare1
  ppuDataPrepare1:
    // [96] (byte~) ppuDataSet::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare1_ppuData+1
    // [97] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataSet::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [98] (byte~) ppuDataSet::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare1_ppuData
    // [99] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataSet::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    jmp ppuDataPut1
    // ppuDataSet::ppuDataPut1
  ppuDataPut1:
    // [100] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataSet::val#2 -- _deref_pbuc1=vbuxx 
    stx PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __breturn
    // ppuDataSet::@return
  __breturn:
    // [101] return 
    rts
}
  // ppuDataGet
// Get one byte from PPU memory
// - ppuData : Pointer in the PPU memory
// ppuDataGet(void* zp($11) ppuData)
ppuDataGet: {
    .label ppuData = $11
    jmp ppuDataPrepare1
    // ppuDataGet::ppuDataPrepare1
  ppuDataPrepare1:
    // [103] (byte~) ppuDataGet::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataGet::ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuData+1
    // [104] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataGet::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [105] (byte~) ppuDataGet::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataGet::ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuData
    // [106] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataGet::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    jmp ppuDataRead1
    // ppuDataGet::ppuDataRead1
  ppuDataRead1:
    // [107] (byte) ppuDataGet::ppuDataRead1_return#0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) -- vbuaa=_deref_pbuc1 
    lda PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __breturn
    // ppuDataGet::@return
  __breturn:
    // [108] return 
    rts
}
  // ppuDataFill
// Fill a number of bytes in the PPU memory
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
// ppuDataFill(byte register(X) val, word zp($11) size)
ppuDataFill: {
    .label ppuDataPrepare1_ppuData = 5
    .label i = 9
    .label size = $11
    jmp ppuDataPrepare1
    // ppuDataFill::ppuDataPrepare1
  ppuDataPrepare1:
    // [110] (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare1_ppuData+1
    // [111] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [112] (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare1_ppuData
    // [113] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [114] phi from ppuDataFill::ppuDataPrepare1 to ppuDataFill::@1 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1]
  __b1_from_ppuDataPrepare1:
    // [114] phi (word) ppuDataFill::i#2 = (word) 0 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // Transfer to PPU
    // ppuDataFill::@1
  __b1:
    // [115] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#5) goto ppuDataFill::ppuDataPut1 -- vwuz1_lt_vwuz2_then_la1 
    lda.z i+1
    cmp.z size+1
    bcc ppuDataPut1
    bne !+
    lda.z i
    cmp.z size
    bcc ppuDataPut1
  !:
    jmp __breturn
    // ppuDataFill::@return
  __breturn:
    // [116] return 
    rts
    // ppuDataFill::ppuDataPut1
  ppuDataPut1:
    // [117] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataFill::val#10 -- _deref_pbuc1=vbuxx 
    stx PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b2
    // ppuDataFill::@2
  __b2:
    // [118] (word) ppuDataFill::i#1 ← ++ (word) ppuDataFill::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [114] phi from ppuDataFill::@2 to ppuDataFill::@1 [phi:ppuDataFill::@2->ppuDataFill::@1]
  __b1_from___b2:
    // [114] phi (word) ppuDataFill::i#2 = (word) ppuDataFill::i#1 [phi:ppuDataFill::@2->ppuDataFill::@1#0] -- register_copy 
    jmp __b1
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    // [120] call ppuDataFill 
    // [109] phi from clrscr to ppuDataFill [phi:clrscr->ppuDataFill]
  ppuDataFill_from_clrscr:
    // [109] phi (byte) ppuDataFill::val#10 = (byte) ' ' [phi:clrscr->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #' '
    // [109] phi (word) ppuDataFill::size#5 = (word) $3c0 [phi:clrscr->ppuDataFill#1] -- vwuz1=vwuc1 
    lda #<$3c0
    sta.z ppuDataFill.size
    lda #>$3c0
    sta.z ppuDataFill.size+1
    // [109] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0 [phi:clrscr->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    jmp __b1
    // clrscr::@1
  __b1:
    // [121] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [122] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [123] (byte*) conio_line_text ← (const nomodify byte*) PPU_NAME_TABLE_0 -- pbuz1=pbuc1 
    lda #<PPU_NAME_TABLE_0
    sta.z conio_line_text
    lda #>PPU_NAME_TABLE_0
    sta.z conio_line_text+1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [124] return 
    rts
}
  // ppuDataTransfer
// Transfer a number of bytes from the CPU memory to the PPU memory
// - cpuData : Pointer to the CPU memory (RAM of ROM)
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
ppuDataTransfer: {
    .const size = $20*SIZEOF_BYTE
    .label ppuData = PPU_PALETTE
    .label cpuData = PALETTE
    // Transfer to PPU
    .label cpuSrc = 9
    .label i = 7
    jmp ppuDataPrepare1
    // ppuDataTransfer::ppuDataPrepare1
  ppuDataPrepare1:
    // [126] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0 -- _deref_pbuc1=vbuc2 
    lda #>ppuData
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [127] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [128] phi from ppuDataTransfer::ppuDataPrepare1 to ppuDataTransfer::@1 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1]
  __b1_from_ppuDataPrepare1:
    // [128] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*)(const nomodify void*) ppuDataTransfer::cpuData#0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#0] -- pbuz1=pbuc1 
    lda #<cpuData
    sta.z cpuSrc
    lda #>cpuData
    sta.z cpuSrc+1
    // [128] phi (word) ppuDataTransfer::i#2 = (word) 0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
    // ppuDataTransfer::@1
  __b1:
    // [129] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>size
    bcc __b2
    bne !+
    lda.z i
    cmp #<size
    bcc __b2
  !:
    jmp __breturn
    // ppuDataTransfer::@return
  __breturn:
    // [130] return 
    rts
    // ppuDataTransfer::@2
  __b2:
    // [131] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (cpuSrc),y
    jmp ppuDataPut1
    // ppuDataTransfer::ppuDataPut1
  ppuDataPut1:
    // [132] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataTransfer::ppuDataPut1_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b3
    // ppuDataTransfer::@3
  __b3:
    // [133] (byte*) ppuDataTransfer::cpuSrc#1 ← ++ (byte*) ppuDataTransfer::cpuSrc#2 -- pbuz1=_inc_pbuz1 
    inc.z cpuSrc
    bne !+
    inc.z cpuSrc+1
  !:
    // [134] (word) ppuDataTransfer::i#1 ← ++ (word) ppuDataTransfer::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [128] phi from ppuDataTransfer::@3 to ppuDataTransfer::@1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1]
  __b1_from___b3:
    // [128] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*) ppuDataTransfer::cpuSrc#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#0] -- register_copy 
    // [128] phi (word) ppuDataTransfer::i#2 = (word) ppuDataTransfer::i#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#1] -- register_copy 
    jmp __b1
}
  // vblank
// NMI Called when the PPU refreshes the screen (also known as the V-Blank period)
vblank: {
    // entry interrupt(HARDWARE_STACK)
    pha
    txa
    pha
    tya
    pha
    // [136] call readJoy1 
    jsr readJoy1
    // [137] (byte) readJoy1::return#2 ← (byte) readJoy1::joy#2
    jmp __b11
    // vblank::@11
  __b11:
    // [138] (byte) vblank::joy#0 ← (byte) readJoy1::return#2 -- vbuxx=vbuaa 
    tax
    // [139] (byte~) vblank::$1 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_DOWN -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #JOY_DOWN
    // [140] if((byte) 0==(byte~) vblank::$1) goto vblank::@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b1
    jmp __b5
    // vblank::@5
  __b5:
    // [141] (volatile byte) y_scroll ← ++ (volatile byte) y_scroll -- vbuz1=_inc_vbuz1 
    inc.z y_scroll
    // [142] if((volatile byte) y_scroll!=(byte) $f0) goto vblank::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$f0
    cmp.z y_scroll
    bne __b1
    jmp __b6
    // vblank::@6
  __b6:
    // [143] (volatile byte) y_scroll ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z y_scroll
    jmp __b1
    // vblank::@1
  __b1:
    // [144] (byte~) vblank::$3 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_UP -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #JOY_UP
    // [145] if((byte) 0==(byte~) vblank::$3) goto vblank::@2 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b2
    jmp __b7
    // vblank::@7
  __b7:
    // [146] (volatile byte) y_scroll ← -- (volatile byte) y_scroll -- vbuz1=_dec_vbuz1 
    dec.z y_scroll
    // [147] if((volatile byte) y_scroll!=(byte) $ff) goto vblank::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z y_scroll
    bne __b2
    jmp __b8
    // vblank::@8
  __b8:
    // [148] (volatile byte) y_scroll ← (byte) $ef -- vbuz1=vbuc1 
    lda #$ef
    sta.z y_scroll
    jmp __b2
    // vblank::@2
  __b2:
    // [149] (byte~) vblank::$5 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_LEFT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #JOY_LEFT
    // [150] if((byte) 0==(byte~) vblank::$5) goto vblank::@3 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b3
    jmp __b9
    // vblank::@9
  __b9:
    // [151] (volatile byte) x_scroll ← ++ (volatile byte) x_scroll -- vbuz1=_inc_vbuz1 
    inc.z x_scroll
    jmp __b3
    // vblank::@3
  __b3:
    // [152] (byte~) vblank::$7 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_RIGHT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #JOY_RIGHT
    // [153] if((byte) 0==(byte~) vblank::$7) goto vblank::@4 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b4
    jmp __b10
    // vblank::@10
  __b10:
    // [154] (volatile byte) x_scroll ← -- (volatile byte) x_scroll -- vbuz1=_dec_vbuz1 
    dec.z x_scroll
    jmp __b4
    // vblank::@4
  __b4:
    // [155] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (volatile byte) x_scroll -- _deref_pbuc1=vbuz1 
    lda.z x_scroll
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // [156] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (volatile byte) y_scroll -- _deref_pbuc1=vbuz1 
    lda.z y_scroll
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    jmp __breturn
    // vblank::@return
  __breturn:
    // [157] return  - exit interrupt(HARDWARE_STACK)
    pla
    tay
    pla
    tax
    pla
    rti
}
  // readJoy1
// Read Standard Controller #1
// Returns a byte representing the pushed buttons
// - bit 0: right
// - bit 1: left
// - bit 2: down
// - bit 3: up
// - bit 4: start
// - bit 5: select
// - bit 6: B
// - bit 7: A
readJoy1: {
    .label __1 = $13
    // [158] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    // Latch the controller buttons
    lda #1
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [159] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [160] phi from readJoy1 to readJoy1::@1 [phi:readJoy1->readJoy1::@1]
  __b1_from_readJoy1:
    // [160] phi (byte) readJoy1::joy#2 = (byte) 0 [phi:readJoy1->readJoy1::@1#0] -- vbuaa=vbuc1 
    lda #0
    // [160] phi (byte) readJoy1::i#2 = (byte) 0 [phi:readJoy1->readJoy1::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // readJoy1::@1
  __b1:
    // [161] if((byte) readJoy1::i#2<(byte) 8) goto readJoy1::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #8
    bcc __b2
    jmp __breturn
    // readJoy1::@return
  __breturn:
    // [162] return 
    rts
    // readJoy1::@2
  __b2:
    // [163] (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (byte) 1 -- vbuz1=vbuaa_rol_1 
    asl
    sta.z __1
    // [164] (byte~) readJoy1::$2 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [165] (byte) readJoy1::joy#1 ← (byte~) readJoy1::$1 | (byte~) readJoy1::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // [166] (byte) readJoy1::i#1 ← ++ (byte) readJoy1::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [160] phi from readJoy1::@2 to readJoy1::@1 [phi:readJoy1::@2->readJoy1::@1]
  __b1_from___b2:
    // [160] phi (byte) readJoy1::joy#2 = (byte) readJoy1::joy#1 [phi:readJoy1::@2->readJoy1::@1#0] -- register_copy 
    // [160] phi (byte) readJoy1::i#2 = (byte) readJoy1::i#1 [phi:readJoy1::@2->readJoy1::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // Color Palette
  PALETTE: .byte 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $f, $30, 8, 1, $f, $18, 8, 1, $30, $37, $1a, $f, $f, $f, $f
.segment Tiles
TILES:
.var filechargen = LoadBinary("characters.901225-01.bin")
     .for(var c=0; c<256; c++) {
        // Plane 0
        .fill 8, filechargen.get(c*8+i)
        // Plane 1
        .fill 8, 0
    }

.segment Vectors
  VECTORS: .word vblank, main, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __bend
Removing instruction jmp initNES1
Removing instruction jmp initNES1_disableVideoOutput1
Removing instruction jmp initNES1_disableAudioOutput1
Removing instruction jmp initNES1_clearVBlankFlag1
Removing instruction jmp initNES1_waitForVBlank1
Removing instruction jmp initNES1_waitForVBlank1___b1
Removing instruction jmp initNES1___b1
Removing instruction jmp initNES1_waitForVBlank2
Removing instruction jmp initNES1_waitForVBlank2___b1
Removing instruction jmp initNES1___b7
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp enableVideoOutput1
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp ppuDataPrepare1
Removing instruction jmp ppuDataPut1
Removing instruction jmp __breturn
Removing instruction jmp ppuDataPrepare1
Removing instruction jmp ppuDataRead1
Removing instruction jmp __breturn
Removing instruction jmp ppuDataPrepare1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp ppuDataPrepare1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp ppuDataPut1
Removing instruction jmp __b3
Removing instruction jmp __b11
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b2
Removing instruction jmp __b9
Removing instruction jmp __b3
Removing instruction jmp __b10
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #$40
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction lda #>0
Replacing instruction ldx #0 with TAX
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label initNES1_waitForVBlank1___b1 with initNES1_waitForVBlank1
Replacing label initNES1___b1_from_initNES1___b1 with initNES1___b1
Replacing label initNES1_waitForVBlank2___b1 with initNES1_waitForVBlank2
Replacing label __b1_from_cputc with __b1
Removing instruction __b1:
Removing instruction __b3_from___b2:
Removing instruction main_from___b3:
Removing instruction __bend_from___b3:
Removing instruction initNES1_waitForVBlank1_from_initNES1_clearVBlankFlag1:
Removing instruction initNES1_waitForVBlank1___b1:
Removing instruction initNES1___b1_from_initNES1___b1:
Removing instruction initNES1_waitForVBlank2_from_initNES1___b1:
Removing instruction initNES1_waitForVBlank2___b1:
Removing instruction __b2_from_initNES1___b7:
Removing instruction __b3_from___b2:
Removing instruction __b4_from___b3:
Removing instruction ppuDataFill_from___b4:
Removing instruction __b5_from___b4:
Removing instruction __b6_from___b5:
Removing instruction cputs_from___b6:
Removing instruction __b1_from_enableVideoOutput1:
Removing instruction __b3_from___b4:
Removing instruction __b1_from_cputc:
Removing instruction __b2_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __bend:
Removing instruction initNES1:
Removing instruction initNES1_disableVideoOutput1:
Removing instruction initNES1_disableAudioOutput1:
Removing instruction initNES1_clearVBlankFlag1:
Removing instruction initNES1___b1_from_initNES1_waitForVBlank1___b1:
Removing instruction initNES1___b7:
Removing instruction __b2:
Removing instruction ppuDataTransfer_from___b2:
Removing instruction __b3:
Removing instruction ppuDataFill_from___b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction clrscr_from___b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction enableVideoOutput1:
Removing instruction __b1:
Removing instruction __b1_from_cputs:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b2:
Removing instruction ppuDataSet_from___b2:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_cscroll:
Removing instruction __b2:
Removing instruction ppuDataFill_from___b2:
Removing instruction __b6:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction ppuDataGet_from___b4:
Removing instruction __b7:
Removing instruction ppuDataSet_from___b7:
Removing instruction __b8:
Removing instruction __b3_from___b8:
Removing instruction ppuDataPrepare1:
Removing instruction ppuDataPut1:
Removing instruction __breturn:
Removing instruction ppuDataPrepare1:
Removing instruction ppuDataRead1:
Removing instruction __breturn:
Removing instruction ppuDataPrepare1:
Removing instruction __b1_from_ppuDataPrepare1:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b1_from___b2:
Removing instruction ppuDataFill_from_clrscr:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction ppuDataPrepare1:
Removing instruction __b1_from_ppuDataPrepare1:
Removing instruction __breturn:
Removing instruction ppuDataPut1:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b11:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __breturn:
Removing instruction __b1_from_readJoy1:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from___b1 to __b1
Relabelling long label __b3_from___b1 to __b2
Succesful ASM optimization Pass5RelabelLongLabels
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction jmp initNES1___b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const struct RICOH_2A03*) APU = (struct RICOH_2A03*) 16384
(const nomodify byte*) FR_COUNTER = (byte*) 16407
(const nomodify byte) JOY_DOWN = (byte) 4
(const nomodify byte) JOY_LEFT = (byte) 2
(const nomodify byte) JOY_RIGHT = (byte) 1
(const nomodify byte) JOY_UP = (byte) 8
(const nomodify byte*) MEMORY = (byte*) 0
(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = (byte) $10
(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1 = (byte) $16
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR = (byte) 6
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA = (byte) 7
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK = (byte) 1
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = (byte) 5
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = (byte) 2
(const byte*) PALETTE[(number) $20]  = { (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $f, (byte) $30, (byte) 8, (byte) 1, (byte) $f, (byte) $18, (byte) 8, (byte) 1, (byte) $30, (byte) $37, (byte) $1a, (byte) $f, (byte) $f, (byte) $f, (byte) $f }
(const struct RICOH_2C02*) PPU = (struct RICOH_2C02*) 8192
(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 = (byte*) 9152
(const nomodify byte*) PPU_ATTRIBUTE_TABLE_1 = (byte*) 10176
(const nomodify byte*) PPU_NAME_TABLE_0 = (byte*) 8192
(const nomodify byte*) PPU_PALETTE = (byte*) 16128
(const to_volatile byte*) PPU_PPUSTATUS = (byte*) 8194
(byte) RICOH_2A03::DMC_FREQ
(byte) RICOH_2A03::DMC_LEN
(byte) RICOH_2A03::DMC_RAW
(byte) RICOH_2A03::DMC_START
(byte) RICOH_2A03::JOY1
(byte) RICOH_2A03::JOY2
(byte) RICOH_2A03::NOISE_HI
(byte) RICOH_2A03::NOISE_LO
(byte) RICOH_2A03::NOISE_VOL
(byte) RICOH_2A03::OAMDMA
(byte) RICOH_2A03::SND_CHN
(byte) RICOH_2A03::SQ1_HI
(byte) RICOH_2A03::SQ1_LO
(byte) RICOH_2A03::SQ1_SWEEP
(byte) RICOH_2A03::SQ1_VOL
(byte) RICOH_2A03::SQ2_HI
(byte) RICOH_2A03::SQ2_LO
(byte) RICOH_2A03::SQ2_SWEEP
(byte) RICOH_2A03::SQ2_VOL
(byte) RICOH_2A03::TRI_HI
(byte) RICOH_2A03::TRI_LINEAR
(byte) RICOH_2A03::TRI_LO
(byte) RICOH_2A03::UNUSED1
(byte) RICOH_2A03::UNUSED2
(byte) RICOH_2C02::OAMADDR
(byte) RICOH_2C02::OAMDATA
(byte) RICOH_2C02::PPUADDR
(byte) RICOH_2C02::PPUCTRL
(byte) RICOH_2C02::PPUDATA
(byte) RICOH_2C02::PPUMASK
(byte) RICOH_2C02::PPUSCROLL
(volatile byte) RICOH_2C02::PPUSTATUS loadstore
(const byte) SIZEOF_BYTE = (byte) 1
(byte) SpriteData::attributes
(byte) SpriteData::tile
(byte) SpriteData::x
(byte) SpriteData::y
(const byte*) TILES[]  = kickasm {{ .var filechargen = LoadBinary("characters.901225-01.bin")
     .for(var c=0; c<256; c++) {
        // Plane 0
        .fill 8, filechargen.get(c*8+i)
        // Plane 1
        .fill 8, 0
    }
 }}
(const to_nomodify void()**) VECTORS[]  = { &interrupt(HARDWARE_STACK)(void()) vblank(), &(void()) main(), (void()*) 0 }
(void()) clrscr()
(label) clrscr::@1
(label) clrscr::@return
(byte) conio_cursor_x loadstore zp[1]:11 5189.185185185185
(byte) conio_cursor_y loadstore zp[1]:12 64002.159999999996
(byte*) conio_line_text loadstore zp[2]:13 45104.24489795918
(void()) cputc((byte) cputc::c)
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@4
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0 reg byte x 7001.0
(void()) cputln()
(label) cputln::@return
(void()) cputs((to_nomodify byte*) cputs::s)
(label) cputs::@1
(label) cputs::@2
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#1 reg byte a 1001.0
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 s zp[2]:7 500.5
(to_nomodify byte*) cputs::s#2 s zp[2]:7 1501.5
(void()) cscroll()
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@6
(label) cscroll::@7
(label) cscroll::@8
(label) cscroll::@return
(byte) cscroll::ch
(byte) cscroll::ch#0 reg byte x 6.666666673333334E8
(byte*) cscroll::line1
(byte*) cscroll::line1#1 line1 zp[2]:3 1.000000001E9
(byte*) cscroll::line1#2 line1 zp[2]:3 2.0000000036363637E8
(byte*) cscroll::line1#6 line1 zp[2]:3 1.00000001E8
(byte*) cscroll::line2
(byte*) cscroll::line2#1 line2 zp[2]:9 3.333333336666667E8
(byte*) cscroll::line2#2 line2 zp[2]:9 3.1428571485714287E8
(byte*) cscroll::line2#6 line2 zp[2]:9 1.00000001E8
(byte) cscroll::x
(byte) cscroll::x#1 reg byte y 2.000000002E9
(byte) cscroll::x#2 reg byte y 2.72727273E8
(byte) cscroll::y
(byte) cscroll::y#1 y zp[1]:2 2.00000002E8
(byte) cscroll::y#2 y zp[1]:2 2.142857164285714E7
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::enableVideoOutput1
(label) main::initNES1
(label) main::initNES1_@1
(label) main::initNES1_@7
(label) main::initNES1_clearVBlankFlag1
(label) main::initNES1_disableAudioOutput1
(label) main::initNES1_disableVideoOutput1
(byte) main::initNES1_i
(byte) main::initNES1_i#1 reg byte x 151.5
(byte) main::initNES1_i#2 reg byte x 112.22222222222223
(label) main::initNES1_waitForVBlank1
(byte~) main::initNES1_waitForVBlank1_$0 reg byte a 202.0
(label) main::initNES1_waitForVBlank1_@1
(label) main::initNES1_waitForVBlank2
(byte~) main::initNES1_waitForVBlank2_$0 reg byte a 202.0
(label) main::initNES1_waitForVBlank2_@1
(const byte*) main::s[(byte) $25]  = (byte*) "hello world!
i am nes
 look at me 

"
(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
(label) ppuDataFill::@1
(label) ppuDataFill::@2
(label) ppuDataFill::@return
(word) ppuDataFill::i
(word) ppuDataFill::i#1 i zp[2]:9 2.00000002E8
(word) ppuDataFill::i#2 i zp[2]:9 1.00000001E8
(nomodify void*) ppuDataFill::ppuData
(label) ppuDataFill::ppuDataPrepare1
(byte~) ppuDataFill::ppuDataPrepare1_$0 reg byte a 2.0000002E7
(byte~) ppuDataFill::ppuDataPrepare1_$1 reg byte a 2.0000002E7
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataPrepare1_ppuData zp[2]:5 6666667.333333333
(label) ppuDataFill::ppuDataPut1
(byte) ppuDataFill::ppuDataPut1_val
(word) ppuDataFill::size
(word) ppuDataFill::size#5 size zp[2]:17 1.1111111222222222E7
(byte) ppuDataFill::val
(byte) ppuDataFill::val#10 reg byte x 1.1111111222222222E7
(byte()) ppuDataGet((nomodify void*) ppuDataGet::ppuData)
(label) ppuDataGet::@return
(nomodify void*) ppuDataGet::ppuData
(nomodify void*) ppuDataGet::ppuData#0 ppuData zp[2]:17 5.25000000075E9
(label) ppuDataGet::ppuDataPrepare1
(byte~) ppuDataGet::ppuDataPrepare1_$0 reg byte a 2.0000000002E10
(byte~) ppuDataGet::ppuDataPrepare1_$1 reg byte a 2.0000000002E10
(nomodify void*) ppuDataGet::ppuDataPrepare1_ppuData
(label) ppuDataGet::ppuDataRead1
(byte) ppuDataGet::ppuDataRead1_return
(byte) ppuDataGet::ppuDataRead1_return#0 reg byte a 3.666666667333333E9
(byte) ppuDataGet::return
(byte) ppuDataGet::return#2 reg byte a 2.000000002E9
(void()) ppuDataSet((nomodify void*) ppuDataSet::ppuData , (byte) ppuDataSet::val)
(label) ppuDataSet::@return
(nomodify void*) ppuDataSet::ppuData
(nomodify byte*) ppuDataSet::ppuData#0 ppuData zp[2]:5 5000.5
(nomodify void*) ppuDataSet::ppuData#1 ppuData zp[2]:5 1.000000001E9
(label) ppuDataSet::ppuDataPrepare1
(byte~) ppuDataSet::ppuDataPrepare1_$0 reg byte a 2.0000000002E10
(byte~) ppuDataSet::ppuDataPrepare1_$1 reg byte a 2.0000000002E10
(nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 ppuDataPrepare1_ppuData zp[2]:5 7.000003334666666E9
(nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#2 ppuDataPrepare1_ppuData zp[2]:5 20002.0
(label) ppuDataSet::ppuDataPut1
(byte) ppuDataSet::ppuDataPut1_val
(byte) ppuDataSet::val
(byte) ppuDataSet::val#0 reg byte x 10001.0
(byte) ppuDataSet::val#1 reg byte x 2.000000002E9
(byte) ppuDataSet::val#2 reg byte x 2.2000020006E9
(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
(label) ppuDataTransfer::@1
(label) ppuDataTransfer::@2
(label) ppuDataTransfer::@3
(label) ppuDataTransfer::@return
(nomodify void*) ppuDataTransfer::cpuData
(const nomodify void*) ppuDataTransfer::cpuData#0 cpuData = (void*)(const byte*) PALETTE
(byte*) ppuDataTransfer::cpuSrc
(byte*) ppuDataTransfer::cpuSrc#1 cpuSrc zp[2]:9 1001.0
(byte*) ppuDataTransfer::cpuSrc#2 cpuSrc zp[2]:9 750.75
(word) ppuDataTransfer::i
(word) ppuDataTransfer::i#1 i zp[2]:7 2002.0
(word) ppuDataTransfer::i#2 i zp[2]:7 600.5999999999999
(nomodify void*) ppuDataTransfer::ppuData
(const nomodify void*) ppuDataTransfer::ppuData#0 ppuData = (void*)(const nomodify byte*) PPU_PALETTE
(label) ppuDataTransfer::ppuDataPrepare1
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData
(label) ppuDataTransfer::ppuDataPut1
(byte) ppuDataTransfer::ppuDataPut1_val
(byte) ppuDataTransfer::ppuDataPut1_val#0 reg byte a 2002.0
(word) ppuDataTransfer::size
(const word) ppuDataTransfer::size#0 size = (byte) $20*(const byte) SIZEOF_BYTE
(byte()) readJoy1()
(byte~) readJoy1::$1 zp[1]:19 101.0
(byte~) readJoy1::$2 reg byte a 202.0
(label) readJoy1::@1
(label) readJoy1::@2
(label) readJoy1::@return
(byte) readJoy1::i
(byte) readJoy1::i#1 reg byte x 202.0
(byte) readJoy1::i#2 reg byte x 60.599999999999994
(byte) readJoy1::joy
(byte) readJoy1::joy#1 reg byte a 101.0
(byte) readJoy1::joy#2 reg byte a 51.0
(byte) readJoy1::return
(byte) readJoy1::return#2 reg byte a 4.0
interrupt(HARDWARE_STACK)(void()) vblank()
(byte~) vblank::$1 reg byte a 4.0
(byte~) vblank::$3 reg byte a 4.0
(byte~) vblank::$5 reg byte a 4.0
(byte~) vblank::$7 reg byte a 4.0
(label) vblank::@1
(label) vblank::@10
(label) vblank::@11
(label) vblank::@2
(label) vblank::@3
(label) vblank::@4
(label) vblank::@5
(label) vblank::@6
(label) vblank::@7
(label) vblank::@8
(label) vblank::@9
(label) vblank::@return
(byte) vblank::joy
(byte) vblank::joy#0 reg byte x 0.7142857142857142
(volatile byte) x_scroll loadstore zp[1]:15 1.1500000000000001
(volatile byte) y_scroll loadstore zp[1]:16 1.4761904761904767

reg byte x [ main::initNES1_i#2 main::initNES1_i#1 ]
zp[1]:2 [ cscroll::y#2 cscroll::y#1 ]
zp[2]:3 [ cscroll::line1#6 cscroll::line1#2 cscroll::line1#1 ]
reg byte y [ cscroll::x#2 cscroll::x#1 ]
reg byte x [ ppuDataSet::val#2 ppuDataSet::val#0 ppuDataSet::val#1 ]
zp[2]:5 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataSet::ppuDataPrepare1_ppuData#0 ppuDataSet::ppuDataPrepare1_ppuData#2 ppuDataSet::ppuData#1 ppuDataSet::ppuData#0 ]
reg byte x [ ppuDataFill::val#10 ]
zp[2]:7 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 cputs::s#2 cputs::s#0 ]
zp[2]:9 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 cscroll::line2#6 cscroll::line2#2 cscroll::line2#1 ppuDataFill::i#2 ppuDataFill::i#1 ]
reg byte x [ readJoy1::i#2 readJoy1::i#1 ]
reg byte a [ readJoy1::joy#2 readJoy1::joy#1 ]
zp[1]:11 [ conio_cursor_x ]
zp[1]:12 [ conio_cursor_y ]
zp[2]:13 [ conio_line_text ]
zp[1]:15 [ x_scroll ]
zp[1]:16 [ y_scroll ]
reg byte a [ main::initNES1_waitForVBlank1_$0 ]
reg byte a [ main::initNES1_waitForVBlank2_$0 ]
reg byte a [ cputs::c#1 ]
reg byte x [ cputc::c#0 ]
zp[2]:17 [ ppuDataGet::ppuData#0 ppuDataFill::size#5 ]
reg byte a [ ppuDataGet::return#2 ]
reg byte x [ cscroll::ch#0 ]
reg byte a [ ppuDataSet::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataSet::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataGet::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataGet::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataGet::ppuDataRead1_return#0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataTransfer::ppuDataPut1_val#0 ]
reg byte a [ readJoy1::return#2 ]
reg byte x [ vblank::joy#0 ]
reg byte a [ vblank::$1 ]
reg byte a [ vblank::$3 ]
reg byte a [ vblank::$5 ]
reg byte a [ vblank::$7 ]
zp[1]:19 [ readJoy1::$1 ]
reg byte a [ readJoy1::$2 ]


FINAL ASSEMBLER
Score: 69985

  // File Comments
// NES conio printing
// Nintendo Entertainment System (NES
// https://en.wikipedia.org/wiki/Nintendo_Entertainment_System_(Model_NES-101)
// https://github.com/gregkrsak/first_nes
// Ricoh 2C02 - NES Picture Processing Unit (PPU)
// Ricoh RP2C02 (NTSC version) / RP2C07 (PAL version),
// https://en.wikipedia.org/wiki/Picture_Processing_Unit
// https://wiki.nesdev.com/w/index.php/PPU_registers
// http://nesdev.com/2C02%20technical%20reference.TXT
// Based on: https://github.com/gregkrsak/first_nes written by Greg M. Krsak, 2018. 
  // Upstart
  // Nintendo Entertainment System (NES) ROM
// https://sadistech.com/nesromtool/romdoc.html
// https://forums.nesdev.com/viewtopic.php?f=2&t=9896
// https://github.com/gregkrsak/first_nes
.file [name="nes-conio.nes", type="bin", segments="NesRom"]
.file [name="nes-conio.nes_hdr", type="bin", segments="Header"]
.file [name="nes-conio.nes_prg", type="bin", segments="ProgramRom"]
.file [name="nes-conio.nes_chr", type="bin", segments="CharacterRom"]
.segmentdef Header  [ start=$0000,       min=$0000, max=$000f, fill ]
.segmentdef Tiles   [ start=$0000,       min=$0000, max=$1fff, fill ]
.segmentdef Code    [ start=$c000,       min=$c000, max=$fff9 ]
.segmentdef Data    [ startAfter="Code", min=$c000, max=$fff9 ]
.segmentdef Vectors [ start=$fffa,       min=$fffa, max=$ffff ]
.segmentdef GameRam [start=$200,max=$7ff, virtual]
.segmentdef ProgramRom [ segments="Code, Data, Vectors" ]
.segmentdef CharacterRom [ segments="Tiles" ]
.segmentdef NesRom
.segment NesRom
.segmentout [ segments="Header" ]
.segmentout [ segments="ProgramRom" ]
.segmentout [ segments="CharacterRom" ]
.segment Header
.text   @"NES\$1a"
.byte   $01           // 1x 16KB ROM (PRG)
.byte   $01           // 1x 8KB VROM (CHR)
.byte   %00000001     // Mapper nibble 0000 == No mapping (a simple 16KB PRG + 8KB CHR game)
                      // Mirroring nibble 0001 == Vertical mirroring only
.segment Code

  // Global Constants & labels
  // Standard Controller Right Button
  .const JOY_RIGHT = 1
  // Standard Controller Left Button
  .const JOY_LEFT = 2
  // Standard Controller Down Button
  .const JOY_DOWN = 4
  // Standard Controller Up Button
  .const JOY_UP = 8
  .const OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
  .const OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
  .const OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
  .const OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
  .const OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
  .const OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
  .const OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
  .const SIZEOF_BYTE = 1
  // $2000-$23bf	$03c0	Name table 0
  .label PPU_NAME_TABLE_0 = $2000
  // $23c0-$23ff	$0040	Attribute table 0
  .label PPU_ATTRIBUTE_TABLE_0 = $23c0
  // $27c0-$27ff	$0040	Attribute table 1
  .label PPU_ATTRIBUTE_TABLE_1 = $27c0
  // $3000-$3eff	$0f00	Mirrors of $2000-$2eff
  // $3f00-$3f1f	$0020	Palette RAM indexes
  .label PPU_PALETTE = $3f00
  // APU Frame Counter
  // generates low-frequency clocks for the channels and an optional 60 Hz interrupt.
  // https://wiki.nesdev.com/w/index.php/APU_Frame_Counter
  // ------+-----+---------------------------------------------------------------
  //  $4017 |	 W  | FR_COUNTER Frame Counter	Set mode and interrupt
  //  ------+-----+---------------------------------------------------------------
  //        |   7	| Sequencer mode: 0 selects 4-step sequence, 1 selects 5-step sequence
  //        |   6	| Interrupt inhibit flag. If set, the frame interrupt flag is cleared, otherwise it is unaffected.
  //  ------+-----+---------------------------------------------------------------
  // Side effects	After 3 or 4 CPU clock cycles*, the timer is reset.
  // If the mode flag is set, then both "quarter frame" and "half frame" signals are also generated.
  .label FR_COUNTER = $4017
  // Pointer to the start of RAM memory
  .label MEMORY = 0
  // PPU Status Register for reading in ASM
  .label PPU_PPUSTATUS = $2002
  // NES Picture Processing Unit (PPU)
  .label PPU = $2000
  // NES CPU and audion processing unit (APU)
  .label APU = $4000
  .label conio_cursor_x = $b
  .label conio_cursor_y = $c
  .label conio_line_text = $d
  .label x_scroll = $f
  .label y_scroll = $10
  // @begin
__bbegin:
  // @1
  // conio_cursor_x = 0
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // conio_cursor_y = 0
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  sta.z conio_cursor_y
  // conio_line_text = CONIO_SCREEN_TEXT
  // [3] (byte*) conio_line_text ← (const nomodify byte*) PPU_NAME_TABLE_0 -- pbuz1=pbuc1 
  // The current text cursor line start
  lda #<PPU_NAME_TABLE_0
  sta.z conio_line_text
  lda #>PPU_NAME_TABLE_0
  sta.z conio_line_text+1
  // @2
  // x_scroll
  // [4] (volatile byte) x_scroll ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z x_scroll
  // y_scroll
  // [5] (volatile byte) y_scroll ← (byte) 0 -- vbuz1=vbuc1 
  sta.z y_scroll
  // [6] phi from @2 to @3 [phi:@2->@3]
  // @3
  // [7] call main 
  // [9] phi from @3 to main [phi:@3->main]
  jsr main
  rts
  // [8] phi from @3 to @end [phi:@3->@end]
  // @end
.segment Code
  // main
// RESET Called when the NES is reset, including when it is turned on.
main: {
    // main::initNES1
    // asm
    // asm { cld ldx#$ff txs  }
    cld
    ldx #$ff
    txs
    // main::initNES1_disableVideoOutput1
    // PPU->PPUCTRL = 0
    // [11] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU
    // PPU->PPUMASK = 0
    // [12] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // main::initNES1_disableAudioOutput1
    // *FR_COUNTER = 0b01000000
    // [13] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta FR_COUNTER
    // APU->DMC_FREQ  = 0b01000000
    // [14] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    sta APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
    // main::initNES1_clearVBlankFlag1
    // asm
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [16] phi from main::initNES1_clearVBlankFlag1 to main::initNES1_waitForVBlank1 [phi:main::initNES1_clearVBlankFlag1->main::initNES1_waitForVBlank1]
    // main::initNES1_waitForVBlank1
  initNES1_waitForVBlank1:
    // main::initNES1_waitForVBlank1_@1
    // PPU->PPUSTATUS&0x80
    // [17] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // while(!(PPU->PPUSTATUS&0x80))
    // [18] if((byte) 0==(byte~) main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank1
    // [19] phi from main::initNES1_waitForVBlank1_@1 to main::initNES1_@1 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1]
    // [19] phi (byte) main::initNES1_i#2 = (byte) 0 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [19] phi from main::initNES1_@1 to main::initNES1_@1 [phi:main::initNES1_@1->main::initNES1_@1]
    // [19] phi (byte) main::initNES1_i#2 = (byte) main::initNES1_i#1 [phi:main::initNES1_@1->main::initNES1_@1#0] -- register_copy 
    // main::initNES1_@1
  initNES1___b1:
    // (MEMORY+0x000)[i] = 0
    // [20] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY,x
    // (MEMORY+0x100)[i] = 0
    // [21] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$100,x
    // (MEMORY+0x200)[i] = 0
    // [22] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$200,x
    // (MEMORY+0x300)[i] = 0
    // [23] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$300,x
    // (MEMORY+0x400)[i] = 0
    // [24] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$400,x
    // (MEMORY+0x500)[i] = 0
    // [25] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$500,x
    // (MEMORY+0x600)[i] = 0
    // [26] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$600,x
    // (MEMORY+0x700)[i] = 0
    // [27] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$700,x
    // while (++i)
    // [28] (byte) main::initNES1_i#1 ← ++ (byte) main::initNES1_i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [29] if((byte) 0!=(byte) main::initNES1_i#1) goto main::initNES1_@1 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne initNES1___b1
    // [30] phi from main::initNES1_@1 to main::initNES1_waitForVBlank2 [phi:main::initNES1_@1->main::initNES1_waitForVBlank2]
    // main::initNES1_waitForVBlank2
  initNES1_waitForVBlank2:
    // main::initNES1_waitForVBlank2_@1
    // PPU->PPUSTATUS&0x80
    // [31] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // while(!(PPU->PPUSTATUS&0x80))
    // [32] if((byte) 0==(byte~) main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank2
    // main::initNES1_@7
    // asm
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [34] phi from main::initNES1_@7 to main::@2 [phi:main::initNES1_@7->main::@2]
    // main::@2
    // ppuDataTransfer(PPU_PALETTE, PALETTE, sizeof(PALETTE))
    // [35] call ppuDataTransfer 
  // Transfer the palette
    // [125] phi from main::@2 to ppuDataTransfer [phi:main::@2->ppuDataTransfer]
    jsr ppuDataTransfer
    // [36] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // ppuDataFill(PPU_ATTRIBUTE_TABLE_0, 0, 0x40)
    // [37] call ppuDataFill 
  // Fill the PPU attribute table
    // [109] phi from main::@3 to ppuDataFill [phi:main::@3->ppuDataFill]
    // [109] phi (byte) ppuDataFill::val#10 = (byte) 0 [phi:main::@3->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #0
    // [109] phi (word) ppuDataFill::size#5 = (byte) $40 [phi:main::@3->ppuDataFill#1] -- vwuz1=vbuc1 
    lda #<$40
    sta.z ppuDataFill.size
    lda #>$40
    sta.z ppuDataFill.size+1
    // [109] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 [phi:main::@3->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [38] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // ppuDataFill(PPU_ATTRIBUTE_TABLE_1, 0, 0x40)
    // [39] call ppuDataFill 
    // [109] phi from main::@4 to ppuDataFill [phi:main::@4->ppuDataFill]
    // [109] phi (byte) ppuDataFill::val#10 = (byte) 0 [phi:main::@4->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #0
    // [109] phi (word) ppuDataFill::size#5 = (byte) $40 [phi:main::@4->ppuDataFill#1] -- vwuz1=vbuc1 
    lda #<$40
    sta.z ppuDataFill.size
    lda #>$40
    sta.z ppuDataFill.size+1
    // [109] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_1 [phi:main::@4->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_ATTRIBUTE_TABLE_1
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_ATTRIBUTE_TABLE_1
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [40] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
    // clrscr()
    // [41] call clrscr 
  // Print a string
    // [119] phi from main::@5 to clrscr [phi:main::@5->clrscr]
    jsr clrscr
    // [42] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // main::@6
    // cputs("hello world!\ni am nes\n look at me \n\n")
    // [43] call cputs 
    // [49] phi from main::@6 to cputs [phi:main::@6->cputs]
    jsr cputs
    // main::@7
    // x_scroll = 0
    // [44] (volatile byte) x_scroll ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z x_scroll
    // y_scroll = -8
    // [45] (volatile byte) y_scroll ← (byte) -8 -- vbuz1=vbuc1 
    lda #-8
    sta.z y_scroll
    // main::enableVideoOutput1
    // PPU->PPUCTRL = 0b10000000
    // [46] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 -- _deref_pbuc1=vbuc2 
    lda #$80
    sta PPU
    // PPU->PPUMASK = 0b00011110
    // [47] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $1e -- _deref_pbuc1=vbuc2 
    lda #$1e
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // [48] phi from main::@1 main::enableVideoOutput1 to main::@1 [phi:main::@1/main::enableVideoOutput1->main::@1]
  __b1:
  // Infinite loop
    // main::@1
    jmp __b1
  .segment Data
    s: .text @"hello world!\ni am nes\n look at me \n\n"
    .byte 0
}
.segment Code
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(7) s)
cputs: {
    .label s = 7
    // [50] phi from cputs to cputs::@1 [phi:cputs->cputs::@1]
    // [50] phi (to_nomodify byte*) cputs::s#2 = (const byte*) main::s [phi:cputs->cputs::@1#0] -- pbuz1=pbuc1 
    lda #<main.s
    sta.z s
    lda #>main.s
    sta.z s+1
    // cputs::@1
  __b1:
    // c=*s++
    // [51] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // while(c=*s++)
    // [52] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [53] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    // cputs::@return
    // }
    // [54] return 
    rts
    // cputs::@2
  __b2:
    // cputc(c)
    // [55] (byte) cputc::c#0 ← (byte) cputs::c#1 -- vbuxx=vbuaa 
    tax
    // [56] call cputc 
    jsr cputc
    // [50] phi from cputs::@2 to cputs::@1 [phi:cputs::@2->cputs::@1]
    // [50] phi (to_nomodify byte*) cputs::s#2 = (to_nomodify byte*) cputs::s#0 [phi:cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(X) c)
cputc: {
    // if(c=='\n')
    // [57] if((byte) cputc::c#0==(byte) ' ') goto cputc::@1 -- vbuxx_eq_vbuc1_then_la1 
    cpx #'\n'
    beq __b1
    // cputc::@2
    // conio_line_text+conio_cursor_x
    // [58] (nomodify byte*) ppuDataSet::ppuData#0 ← (byte*) conio_line_text + (byte) conio_cursor_x -- pbuz1=pbuz2_plus_vbuz3 
    lda.z conio_cursor_x
    clc
    adc.z conio_line_text
    sta.z ppuDataSet.ppuData
    lda #0
    adc.z conio_line_text+1
    sta.z ppuDataSet.ppuData+1
    // ppuDataSet(conio_line_text+conio_cursor_x, c)
    // [59] (byte) ppuDataSet::val#0 ← (byte) cputc::c#0
    // [60] (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#2 ← (void*)(nomodify byte*) ppuDataSet::ppuData#0
    // ppuDataSet(conio_line_text+conio_cursor_x, c)
    // [61] call ppuDataSet 
    // [95] phi from cputc::@2 to ppuDataSet [phi:cputc::@2->ppuDataSet]
    // [95] phi (byte) ppuDataSet::val#2 = (byte) ppuDataSet::val#0 [phi:cputc::@2->ppuDataSet#0] -- register_copy 
    // [95] phi (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 = (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#2 [phi:cputc::@2->ppuDataSet#1] -- register_copy 
    jsr ppuDataSet
    // cputc::@4
    // if(++conio_cursor_x==CONIO_WIDTH)
    // [62] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [63] if((byte) conio_cursor_x!=(byte) $20) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$20
    cmp.z conio_cursor_x
    bne __breturn
    // [64] phi from cputc::@4 to cputc::@3 [phi:cputc::@4->cputc::@3]
    // cputc::@3
    // cputln()
    // [65] call cputln 
    jsr cputln
    // cputc::@return
  __breturn:
    // }
    // [66] return 
    rts
    // [67] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
    // cputc::@1
  __b1:
    // cputln()
    // [68] call cputln 
    jsr cputln
    rts
}
  // cputln
// Print a newline
cputln: {
    // conio_line_text +=  CONIO_WIDTH
    // [69] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $20 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$20
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // conio_cursor_x = 0
    // [70] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y++;
    // [71] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [72] call cscroll 
    jsr cscroll
    // cputln::@return
    // }
    // [73] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label line2 = 9
    // Scroll lines up
    .label line1 = 3
    .label y = 2
    // if(conio_cursor_y==CONIO_HEIGHT)
    // [74] if((byte) conio_cursor_y!=(byte) $1e) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$1e
    cmp.z conio_cursor_y
    bne __breturn
    // [75] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
    // [75] phi (byte*) cscroll::line1#6 = (const nomodify byte*) PPU_NAME_TABLE_0 [phi:cscroll->cscroll::@1#0] -- pbuz1=pbuc1 
    lda #<PPU_NAME_TABLE_0
    sta.z line1
    lda #>PPU_NAME_TABLE_0
    sta.z line1+1
    // [75] phi (byte*) cscroll::line2#6 = (const nomodify byte*) PPU_NAME_TABLE_0+(byte) $20 [phi:cscroll->cscroll::@1#1] -- pbuz1=pbuc1 
    lda #<PPU_NAME_TABLE_0+$20
    sta.z line2
    lda #>PPU_NAME_TABLE_0+$20
    sta.z line2+1
    // [75] phi (byte) cscroll::y#2 = (byte) 0 [phi:cscroll->cscroll::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // cscroll::@1
  __b1:
    // for(char y=0;y<CONIO_HEIGHT-1;y++)
    // [76] if((byte) cscroll::y#2<(byte)(number) $1e-(number) 1) goto cscroll::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z y
    cmp #$1e-1
    bcc __b2
    // [77] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
    // cscroll::@2
    // ppuDataFill(CONIO_SCREEN_TEXT+CONIO_BYTES-CONIO_WIDTH, ' ', CONIO_WIDTH)
    // [78] call ppuDataFill 
  // Fill last line with space
    // [109] phi from cscroll::@2 to ppuDataFill [phi:cscroll::@2->ppuDataFill]
    // [109] phi (byte) ppuDataFill::val#10 = (byte) ' ' [phi:cscroll::@2->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #' '
    // [109] phi (word) ppuDataFill::size#5 = (byte) $20 [phi:cscroll::@2->ppuDataFill#1] -- vwuz1=vbuc1 
    lda #<$20
    sta.z ppuDataFill.size
    lda #>$20
    sta.z ppuDataFill.size+1
    // [109] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0+(word)(number) $1e*(number) $20-(byte) $20 [phi:cscroll::@2->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0+$1e*$20-$20
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_NAME_TABLE_0+$1e*$20-$20
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // cscroll::@6
    // conio_line_text -= CONIO_WIDTH
    // [79] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $20 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$20
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // conio_cursor_y--;
    // [80] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    // cscroll::@return
  __breturn:
    // }
    // [81] return 
    rts
    // [82] phi from cscroll::@1 to cscroll::@3 [phi:cscroll::@1->cscroll::@3]
  __b2:
    // [82] phi (byte*) cscroll::line1#2 = (byte*) cscroll::line1#6 [phi:cscroll::@1->cscroll::@3#0] -- register_copy 
    // [82] phi (byte*) cscroll::line2#2 = (byte*) cscroll::line2#6 [phi:cscroll::@1->cscroll::@3#1] -- register_copy 
    // [82] phi (byte) cscroll::x#2 = (byte) 0 [phi:cscroll::@1->cscroll::@3#2] -- vbuyy=vbuc1 
    ldy #0
    // cscroll::@3
  __b3:
    // for(char x=0;x<CONIO_WIDTH;x++)
    // [83] if((byte) cscroll::x#2<(byte) $20) goto cscroll::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$20
    bcc __b4
    // cscroll::@5
    // for(char y=0;y<CONIO_HEIGHT-1;y++)
    // [84] (byte) cscroll::y#1 ← ++ (byte) cscroll::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [75] phi from cscroll::@5 to cscroll::@1 [phi:cscroll::@5->cscroll::@1]
    // [75] phi (byte*) cscroll::line1#6 = (byte*) cscroll::line1#2 [phi:cscroll::@5->cscroll::@1#0] -- register_copy 
    // [75] phi (byte*) cscroll::line2#6 = (byte*) cscroll::line2#2 [phi:cscroll::@5->cscroll::@1#1] -- register_copy 
    // [75] phi (byte) cscroll::y#2 = (byte) cscroll::y#1 [phi:cscroll::@5->cscroll::@1#2] -- register_copy 
    jmp __b1
    // cscroll::@4
  __b4:
    // ppuDataGet(line2++)
    // [85] (nomodify void*) ppuDataGet::ppuData#0 ← (void*)(byte*) cscroll::line2#2 -- pvoz1=pvoz2 
    lda.z line2
    sta.z ppuDataGet.ppuData
    lda.z line2+1
    sta.z ppuDataGet.ppuData+1
    // [86] call ppuDataGet 
    // [102] phi from cscroll::@4 to ppuDataGet [phi:cscroll::@4->ppuDataGet]
    jsr ppuDataGet
    // ppuDataGet(line2++)
    // [87] (byte) ppuDataGet::return#2 ← (byte) ppuDataGet::ppuDataRead1_return#0
    // cscroll::@7
    // ch = ppuDataGet(line2++)
    // [88] (byte) cscroll::ch#0 ← (byte) ppuDataGet::return#2 -- vbuxx=vbuaa 
    tax
    // [89] (byte*) cscroll::line2#1 ← ++ (byte*) cscroll::line2#2 -- pbuz1=_inc_pbuz1 
    inc.z line2
    bne !+
    inc.z line2+1
  !:
    // ppuDataSet(line1++, ch)
    // [90] (nomodify void*) ppuDataSet::ppuData#1 ← (void*)(byte*) cscroll::line1#2 -- pvoz1=pvoz2 
    lda.z line1
    sta.z ppuDataSet.ppuData
    lda.z line1+1
    sta.z ppuDataSet.ppuData+1
    // [91] (byte) ppuDataSet::val#1 ← (byte) cscroll::ch#0
    // [92] call ppuDataSet 
    // [95] phi from cscroll::@7 to ppuDataSet [phi:cscroll::@7->ppuDataSet]
    // [95] phi (byte) ppuDataSet::val#2 = (byte) ppuDataSet::val#1 [phi:cscroll::@7->ppuDataSet#0] -- register_copy 
    // [95] phi (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 = (nomodify void*) ppuDataSet::ppuData#1 [phi:cscroll::@7->ppuDataSet#1] -- register_copy 
    jsr ppuDataSet
    // cscroll::@8
    // ppuDataSet(line1++, ch);
    // [93] (byte*) cscroll::line1#1 ← ++ (byte*) cscroll::line1#2 -- pbuz1=_inc_pbuz1 
    inc.z line1
    bne !+
    inc.z line1+1
  !:
    // for(char x=0;x<CONIO_WIDTH;x++)
    // [94] (byte) cscroll::x#1 ← ++ (byte) cscroll::x#2 -- vbuyy=_inc_vbuyy 
    iny
    // [82] phi from cscroll::@8 to cscroll::@3 [phi:cscroll::@8->cscroll::@3]
    // [82] phi (byte*) cscroll::line1#2 = (byte*) cscroll::line1#1 [phi:cscroll::@8->cscroll::@3#0] -- register_copy 
    // [82] phi (byte*) cscroll::line2#2 = (byte*) cscroll::line2#1 [phi:cscroll::@8->cscroll::@3#1] -- register_copy 
    // [82] phi (byte) cscroll::x#2 = (byte) cscroll::x#1 [phi:cscroll::@8->cscroll::@3#2] -- register_copy 
    jmp __b3
}
  // ppuDataSet
// Set one byte in PPU memory
// - ppuData : Pointer in the PPU memory
// - val : The value to set
// ppuDataSet(byte* zp(5) ppuData, byte register(X) val)
ppuDataSet: {
    .label ppuDataPrepare1_ppuData = 5
    .label ppuData = 5
    // ppuDataSet::ppuDataPrepare1
    // >ppuData
    // [96] (byte~) ppuDataSet::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare1_ppuData+1
    // PPU->PPUADDR = >ppuData
    // [97] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataSet::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // <ppuData
    // [98] (byte~) ppuDataSet::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare1_ppuData
    // PPU->PPUADDR = <ppuData
    // [99] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataSet::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // ppuDataSet::ppuDataPut1
    // PPU->PPUDATA = val
    // [100] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataSet::val#2 -- _deref_pbuc1=vbuxx 
    stx PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataSet::@return
    // }
    // [101] return 
    rts
}
  // ppuDataGet
// Get one byte from PPU memory
// - ppuData : Pointer in the PPU memory
// ppuDataGet(void* zp($11) ppuData)
ppuDataGet: {
    .label ppuData = $11
    // ppuDataGet::ppuDataPrepare1
    // >ppuData
    // [103] (byte~) ppuDataGet::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataGet::ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuData+1
    // PPU->PPUADDR = >ppuData
    // [104] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataGet::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // <ppuData
    // [105] (byte~) ppuDataGet::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataGet::ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuData
    // PPU->PPUADDR = <ppuData
    // [106] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataGet::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // ppuDataGet::ppuDataRead1
    // return PPU->PPUDATA;
    // [107] (byte) ppuDataGet::ppuDataRead1_return#0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) -- vbuaa=_deref_pbuc1 
    lda PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataGet::@return
    // }
    // [108] return 
    rts
}
  // ppuDataFill
// Fill a number of bytes in the PPU memory
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
// ppuDataFill(byte register(X) val, word zp($11) size)
ppuDataFill: {
    .label ppuDataPrepare1_ppuData = 5
    .label i = 9
    .label size = $11
    // ppuDataFill::ppuDataPrepare1
    // >ppuData
    // [110] (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare1_ppuData+1
    // PPU->PPUADDR = >ppuData
    // [111] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // <ppuData
    // [112] (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare1_ppuData
    // PPU->PPUADDR = <ppuData
    // [113] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [114] phi from ppuDataFill::ppuDataPrepare1 to ppuDataFill::@1 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1]
    // [114] phi (word) ppuDataFill::i#2 = (word) 0 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
  // Transfer to PPU
    // ppuDataFill::@1
  __b1:
    // for(unsigned int i=0;i<size;i++)
    // [115] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#5) goto ppuDataFill::ppuDataPut1 -- vwuz1_lt_vwuz2_then_la1 
    lda.z i+1
    cmp.z size+1
    bcc ppuDataPut1
    bne !+
    lda.z i
    cmp.z size
    bcc ppuDataPut1
  !:
    // ppuDataFill::@return
    // }
    // [116] return 
    rts
    // ppuDataFill::ppuDataPut1
  ppuDataPut1:
    // PPU->PPUDATA = val
    // [117] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataFill::val#10 -- _deref_pbuc1=vbuxx 
    stx PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataFill::@2
    // for(unsigned int i=0;i<size;i++)
    // [118] (word) ppuDataFill::i#1 ← ++ (word) ppuDataFill::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [114] phi from ppuDataFill::@2 to ppuDataFill::@1 [phi:ppuDataFill::@2->ppuDataFill::@1]
    // [114] phi (word) ppuDataFill::i#2 = (word) ppuDataFill::i#1 [phi:ppuDataFill::@2->ppuDataFill::@1#0] -- register_copy 
    jmp __b1
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    // ppuDataFill(CONIO_SCREEN_TEXT, ' ', 0x3c0)
    // [120] call ppuDataFill 
    // [109] phi from clrscr to ppuDataFill [phi:clrscr->ppuDataFill]
    // [109] phi (byte) ppuDataFill::val#10 = (byte) ' ' [phi:clrscr->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #' '
    // [109] phi (word) ppuDataFill::size#5 = (word) $3c0 [phi:clrscr->ppuDataFill#1] -- vwuz1=vwuc1 
    lda #<$3c0
    sta.z ppuDataFill.size
    lda #>$3c0
    sta.z ppuDataFill.size+1
    // [109] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0 [phi:clrscr->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // clrscr::@1
    // conio_cursor_x = 0
    // [121] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = 0
    // [122] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    sta.z conio_cursor_y
    // conio_line_text = CONIO_SCREEN_TEXT
    // [123] (byte*) conio_line_text ← (const nomodify byte*) PPU_NAME_TABLE_0 -- pbuz1=pbuc1 
    lda #<PPU_NAME_TABLE_0
    sta.z conio_line_text
    lda #>PPU_NAME_TABLE_0
    sta.z conio_line_text+1
    // clrscr::@return
    // }
    // [124] return 
    rts
}
  // ppuDataTransfer
// Transfer a number of bytes from the CPU memory to the PPU memory
// - cpuData : Pointer to the CPU memory (RAM of ROM)
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
ppuDataTransfer: {
    .const size = $20*SIZEOF_BYTE
    .label ppuData = PPU_PALETTE
    .label cpuData = PALETTE
    // Transfer to PPU
    .label cpuSrc = 9
    .label i = 7
    // ppuDataTransfer::ppuDataPrepare1
    // PPU->PPUADDR = >ppuData
    // [126] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0 -- _deref_pbuc1=vbuc2 
    lda #>ppuData
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // PPU->PPUADDR = <ppuData
    // [127] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [128] phi from ppuDataTransfer::ppuDataPrepare1 to ppuDataTransfer::@1 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1]
    // [128] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*)(const nomodify void*) ppuDataTransfer::cpuData#0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#0] -- pbuz1=pbuc1 
    lda #<cpuData
    sta.z cpuSrc
    lda #>cpuData
    sta.z cpuSrc+1
    // [128] phi (word) ppuDataTransfer::i#2 = (word) 0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
    // ppuDataTransfer::@1
  __b1:
    // for(unsigned int i=0;i<size;i++)
    // [129] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>size
    bcc __b2
    bne !+
    lda.z i
    cmp #<size
    bcc __b2
  !:
    // ppuDataTransfer::@return
    // }
    // [130] return 
    rts
    // ppuDataTransfer::@2
  __b2:
    // ppuDataPut(*cpuSrc++)
    // [131] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (cpuSrc),y
    // ppuDataTransfer::ppuDataPut1
    // PPU->PPUDATA = val
    // [132] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataTransfer::ppuDataPut1_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataTransfer::@3
    // ppuDataPut(*cpuSrc++);
    // [133] (byte*) ppuDataTransfer::cpuSrc#1 ← ++ (byte*) ppuDataTransfer::cpuSrc#2 -- pbuz1=_inc_pbuz1 
    inc.z cpuSrc
    bne !+
    inc.z cpuSrc+1
  !:
    // for(unsigned int i=0;i<size;i++)
    // [134] (word) ppuDataTransfer::i#1 ← ++ (word) ppuDataTransfer::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [128] phi from ppuDataTransfer::@3 to ppuDataTransfer::@1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1]
    // [128] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*) ppuDataTransfer::cpuSrc#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#0] -- register_copy 
    // [128] phi (word) ppuDataTransfer::i#2 = (word) ppuDataTransfer::i#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#1] -- register_copy 
    jmp __b1
}
  // vblank
// NMI Called when the PPU refreshes the screen (also known as the V-Blank period)
vblank: {
    // entry interrupt(HARDWARE_STACK)
    pha
    txa
    pha
    tya
    pha
    // readJoy1()
    // [136] call readJoy1 
    jsr readJoy1
    // [137] (byte) readJoy1::return#2 ← (byte) readJoy1::joy#2
    // vblank::@11
    // joy = readJoy1()
    // [138] (byte) vblank::joy#0 ← (byte) readJoy1::return#2 -- vbuxx=vbuaa 
    tax
    // joy&JOY_DOWN
    // [139] (byte~) vblank::$1 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_DOWN -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #JOY_DOWN
    // if(joy&JOY_DOWN)
    // [140] if((byte) 0==(byte~) vblank::$1) goto vblank::@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b1
    // vblank::@5
    // if(++y_scroll==240)
    // [141] (volatile byte) y_scroll ← ++ (volatile byte) y_scroll -- vbuz1=_inc_vbuz1 
    inc.z y_scroll
    // [142] if((volatile byte) y_scroll!=(byte) $f0) goto vblank::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$f0
    cmp.z y_scroll
    bne __b1
    // vblank::@6
    // y_scroll=0
    // [143] (volatile byte) y_scroll ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z y_scroll
    // vblank::@1
  __b1:
    // joy&JOY_UP
    // [144] (byte~) vblank::$3 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_UP -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #JOY_UP
    // if(joy&JOY_UP)
    // [145] if((byte) 0==(byte~) vblank::$3) goto vblank::@2 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b2
    // vblank::@7
    // if(--y_scroll==255)
    // [146] (volatile byte) y_scroll ← -- (volatile byte) y_scroll -- vbuz1=_dec_vbuz1 
    dec.z y_scroll
    // [147] if((volatile byte) y_scroll!=(byte) $ff) goto vblank::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z y_scroll
    bne __b2
    // vblank::@8
    // y_scroll=239
    // [148] (volatile byte) y_scroll ← (byte) $ef -- vbuz1=vbuc1 
    lda #$ef
    sta.z y_scroll
    // vblank::@2
  __b2:
    // joy&JOY_LEFT
    // [149] (byte~) vblank::$5 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_LEFT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #JOY_LEFT
    // if(joy&JOY_LEFT)
    // [150] if((byte) 0==(byte~) vblank::$5) goto vblank::@3 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b3
    // vblank::@9
    // x_scroll++;
    // [151] (volatile byte) x_scroll ← ++ (volatile byte) x_scroll -- vbuz1=_inc_vbuz1 
    inc.z x_scroll
    // vblank::@3
  __b3:
    // joy&JOY_RIGHT
    // [152] (byte~) vblank::$7 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_RIGHT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #JOY_RIGHT
    // if(joy&JOY_RIGHT)
    // [153] if((byte) 0==(byte~) vblank::$7) goto vblank::@4 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b4
    // vblank::@10
    // x_scroll--;
    // [154] (volatile byte) x_scroll ← -- (volatile byte) x_scroll -- vbuz1=_dec_vbuz1 
    dec.z x_scroll
    // vblank::@4
  __b4:
    // PPU->PPUSCROLL = x_scroll
    // [155] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (volatile byte) x_scroll -- _deref_pbuc1=vbuz1 
    lda.z x_scroll
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // PPU->PPUSCROLL = y_scroll
    // [156] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (volatile byte) y_scroll -- _deref_pbuc1=vbuz1 
    lda.z y_scroll
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // vblank::@return
    // }
    // [157] return  - exit interrupt(HARDWARE_STACK)
    pla
    tay
    pla
    tax
    pla
    rti
}
  // readJoy1
// Read Standard Controller #1
// Returns a byte representing the pushed buttons
// - bit 0: right
// - bit 1: left
// - bit 2: down
// - bit 3: up
// - bit 4: start
// - bit 5: select
// - bit 6: B
// - bit 7: A
readJoy1: {
    .label __1 = $13
    // APU->JOY1 = 1
    // [158] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    // Latch the controller buttons
    lda #1
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // APU->JOY1 = 0
    // [159] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [160] phi from readJoy1 to readJoy1::@1 [phi:readJoy1->readJoy1::@1]
    // [160] phi (byte) readJoy1::joy#2 = (byte) 0 [phi:readJoy1->readJoy1::@1#0] -- vbuaa=vbuc1 
    // [160] phi (byte) readJoy1::i#2 = (byte) 0 [phi:readJoy1->readJoy1::@1#1] -- vbuxx=vbuc1 
    tax
    // readJoy1::@1
  __b1:
    // for(char i=0;i<8;i++)
    // [161] if((byte) readJoy1::i#2<(byte) 8) goto readJoy1::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #8
    bcc __b2
    // readJoy1::@return
    // }
    // [162] return 
    rts
    // readJoy1::@2
  __b2:
    // joy<<1
    // [163] (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (byte) 1 -- vbuz1=vbuaa_rol_1 
    asl
    sta.z __1
    // APU->JOY1&1
    // [164] (byte~) readJoy1::$2 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // joy = joy<<1 | APU->JOY1&1
    // [165] (byte) readJoy1::joy#1 ← (byte~) readJoy1::$1 | (byte~) readJoy1::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // for(char i=0;i<8;i++)
    // [166] (byte) readJoy1::i#1 ← ++ (byte) readJoy1::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [160] phi from readJoy1::@2 to readJoy1::@1 [phi:readJoy1::@2->readJoy1::@1]
    // [160] phi (byte) readJoy1::joy#2 = (byte) readJoy1::joy#1 [phi:readJoy1::@2->readJoy1::@1#0] -- register_copy 
    // [160] phi (byte) readJoy1::i#2 = (byte) readJoy1::i#1 [phi:readJoy1::@2->readJoy1::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // Color Palette
  PALETTE: .byte 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $f, $30, 8, 1, $f, $18, 8, 1, $30, $37, $1a, $f, $f, $f, $f
.segment Tiles
TILES:
.var filechargen = LoadBinary("characters.901225-01.bin")
     .for(var c=0; c<256; c++) {
        // Plane 0
        .fill 8, filechargen.get(c*8+i)
        // Plane 1
        .fill 8, 0
    }

.segment Vectors
  VECTORS: .word vblank, main, 0

