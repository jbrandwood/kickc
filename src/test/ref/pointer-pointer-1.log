Setting inferred volatile on symbol affected by address-of (byte*~) main::$0 ← & (byte) main::b
Setting inferred volatile on symbol affected by address-of (byte**~) main::$1 ← & (byte*) main::pb

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) main::b#0 ← (byte) 'a'
  (byte*~) main::$0 ← & (byte) main::b#0
  (byte*) main::pb#0 ← (byte*~) main::$0
  (byte**~) main::$1 ← & (byte*) main::pb#0
  (byte**) main::ppb#0 ← (byte**~) main::$1
  *((const byte*) main::SCREEN) ← *(*((byte**) main::ppb#0))
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(byte*~) main::$0
(byte**~) main::$1
(label) main::@return
(const byte*) main::SCREEN = (byte*)(number) $400
(byte) main::b
(byte) main::b#0
(byte*) main::pb
(byte*) main::pb#0
(byte**) main::ppb
(byte**) main::ppb#0

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias candidate removed (volatile)(byte*) main::pb#0 = (byte*~) main::$0 
Alias (byte**) main::ppb#0 = (byte**~) main::$1 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)(byte*) main::pb#0 = (byte*~) main::$0 
Constant right-side identified [1] (byte*~) main::$0 ← & (byte) main::b#0
Constant right-side identified [3] (byte**) main::ppb#0 ← & (byte*) main::pb#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::$0 = &main::b#0
Constant (const byte**) main::ppb#0 = &main::pb#0
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$0 = &(byte) main::b#0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] (byte) main::b#0 ← (byte) 'a'
  [5] (byte*) main::pb#0 ← &(byte) main::b#0
  [6] *((const byte*) main::SCREEN) ← *(*((const byte**) main::ppb#0))
  to:main::@return
main::@return: scope:[main]  from main
  [7] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::b
(byte) main::b#0 2.0
(byte*) main::pb
(byte*) main::pb#0 20.0
(byte**) main::ppb

Initial phi equivalence classes
Complete equivalence classes
[ main::b#0 ]
[ main::pb#0 ]
Allocated zp[1]:2 [ main::b#0 ]
Allocated zp[2]:3 [ main::pb#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests a simple pointer to a pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    .label ppb = pb
    .label b = 2
    .label pb = 3
    // [4] (byte) main::b#0 ← (byte) 'a' -- vbuz1=vbuc1 
    lda #'a'
    sta.z b
    // [5] (byte*) main::pb#0 ← &(byte) main::b#0 -- pbuz1=pbuc1 
    lda #<b
    sta.z pb
    lda #>b
    sta.z pb+1
    // [6] *((const byte*) main::SCREEN) ← *(*((const byte**) main::ppb#0)) -- _deref_pbuc1=_deref_(_deref_pptc2) 
    ldy.z ppb
    sty.z $fe
    ldy.z ppb+1
    sty.z $ff
    ldy #0
    lda ($fe),y
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] (byte) main::b#0 ← (byte) 'a' [ main::b#0 ] ( main:2 [ main::b#0 ] ) always clobbers reg byte a 
Statement [5] (byte*) main::pb#0 ← &(byte) main::b#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) main::SCREEN) ← *(*((const byte**) main::ppb#0)) [ ] ( main:2 [ ] ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ main::b#0 ] : zp[1]:2 , 
Potential registers zp[2]:3 [ main::pb#0 ] : zp[2]:3 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 20: zp[2]:3 [ main::pb#0 ] 2: zp[1]:2 [ main::b#0 ] 
Uplift Scope [] 

Uplifting [main] best 59 combination zp[2]:3 [ main::pb#0 ] zp[1]:2 [ main::b#0 ] 
Uplifting [] best 59 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::b#0 ]
Uplifting [main] best 59 combination zp[1]:2 [ main::b#0 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests a simple pointer to a pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    .label ppb = pb
    .label b = 2
    .label pb = 3
    // [4] (byte) main::b#0 ← (byte) 'a' -- vbuz1=vbuc1 
    lda #'a'
    sta.z b
    // [5] (byte*) main::pb#0 ← &(byte) main::b#0 -- pbuz1=pbuc1 
    lda #<b
    sta.z pb
    lda #>b
    sta.z pb+1
    // [6] *((const byte*) main::SCREEN) ← *(*((const byte**) main::ppb#0)) -- _deref_pbuc1=_deref_(_deref_pptc2) 
    ldy.z ppb
    sty.z $fe
    ldy.z ppb+1
    sty.z $ff
    ldy #0
    lda ($fe),y
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@return
(const byte*) main::SCREEN = (byte*) 1024
(byte) main::b
(byte) main::b#0 b zp[1]:2 2.0
(byte*) main::pb
(byte*) main::pb#0 pb zp[2]:3 20.0
(byte**) main::ppb
(const byte**) main::ppb#0 ppb = &(byte*) main::pb#0

zp[1]:2 [ main::b#0 ]
zp[2]:3 [ main::pb#0 ]


FINAL ASSEMBLER
Score: 44

  // File Comments
// Tests a simple pointer to a pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    .label ppb = pb
    .label b = 2
    .label pb = 3
    // b = 'a'
    // [4] (byte) main::b#0 ← (byte) 'a' -- vbuz1=vbuc1 
    lda #'a'
    sta.z b
    // pb = &b
    // [5] (byte*) main::pb#0 ← &(byte) main::b#0 -- pbuz1=pbuc1 
    lda #<b
    sta.z pb
    lda #>b
    sta.z pb+1
    // *SCREEN = **ppb
    // [6] *((const byte*) main::SCREEN) ← *(*((const byte**) main::ppb#0)) -- _deref_pbuc1=_deref_(_deref_pptc2) 
    ldy.z ppb
    sty.z $fe
    ldy.z ppb+1
    sty.z $ff
    ldy #0
    lda ($fe),y
    sta SCREEN
    // main::@return
    // }
    // [7] return 
    rts
}
  // File Data

