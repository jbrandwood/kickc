
(void()) main()
main: scope:[main]  from
  [0] (volatile byte*) main::text ← (byte*) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [1] (byte) main::i#5 ← phi( main/(byte) 0 main::@4/(byte) main::i#1 )
  [1] (byte*) main::screen#4 ← phi( main/(byte*) 1024 main::@4/(byte*) main::screen#2 )
  [1] (byte) textid#13 ← phi( main/(byte) 0 main::@4/(byte) textid#10 )
  [2] call nexttext 
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [3] (byte*) main::screen#2 ← phi( main::@3/(byte*) main::screen#1 main::@1/(byte*) main::screen#4 )
  [4] if((byte) 0!=*((volatile byte*) main::text)) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@2
  [5] (byte) main::i#1 ← ++ (byte) main::i#5
  [6] if((byte) main::i#1!=(byte) $15) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  [7] return 
  to:@return
main::@3: scope:[main]  from main::@2
  [8] *((byte*) main::screen#2) ← *((volatile byte*) main::text)
  [9] (byte*) main::screen#1 ← ++ (byte*) main::screen#2
  [10] (volatile byte*) main::text ← ++ (volatile byte*) main::text
  to:main::@2

(void()) nexttext((byte**) nexttext::textp)
nexttext: scope:[nexttext]  from main::@1
  [11] (byte~) nexttext::$0 ← (byte) textid#13 & (byte) 1
  [12] (byte) textid#10 ← ++ (byte) textid#13
  [13] if((byte~) nexttext::$0==(byte) 0) goto nexttext::@1
  to:nexttext::@2
nexttext::@2: scope:[nexttext]  from nexttext
  [14] *((const byte**) nexttext::textp#0) ← (const byte*) text2
  to:nexttext::@return
nexttext::@return: scope:[nexttext]  from nexttext::@1 nexttext::@2
  [15] return 
  to:@return
nexttext::@1: scope:[nexttext]  from nexttext
  [16] *((const byte**) nexttext::textp#0) ← (const byte*) text1
  to:nexttext::@return
