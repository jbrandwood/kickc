(label) @1
(label) @begin
(label) @end
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(label) div16s::@1
(label) div16s::@return
(signed word) div16s::dividend
(signed word) div16s::dividend#0 dividend zp ZP_WORD:5 6.5
(signed word) div16s::divisor
(signed word) div16s::divisor#0 divisor zp ZP_WORD:19 6.5
(signed word) div16s::return
(signed word) div16s::return#0 return zp ZP_WORD:14 4.333333333333333
(signed word) div16s::return#2 return zp ZP_WORD:14 22.0
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(label) div16u::@1
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0 dividend zp ZP_WORD:5 6.5
(word) div16u::divisor
(word) div16u::divisor#0 divisor zp ZP_WORD:12 6.5
(word) div16u::return
(word) div16u::return#0 return zp ZP_WORD:14 4.333333333333333
(word) div16u::return#2 return zp ZP_WORD:14 22.0
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(signed byte~) div8s::$5 reg byte a 2.0
(signed byte~) div8s::$8 reg byte x 1.0
(label) div8s::@1
(label) div8s::@2
(label) div8s::@3
(label) div8s::@4
(label) div8s::@5
(label) div8s::@6
(label) div8s::@7
(label) div8s::@8
(label) div8s::@9
(label) div8s::@return
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0 reg byte y 5.0
(byte) div8s::dividendu
(byte) div8s::dividendu#3 reg byte y 0.8571428571428571
(byte~) div8s::dividendu#7 reg byte y 4.0
(byte~) div8s::dividendu#8 reg byte y 4.0
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0 reg byte x 2.142857142857143
(byte) div8s::divisoru
(byte) div8s::divisoru#3 reg byte x 3.0
(byte~) div8s::divisoru#4 reg byte x 4.0
(byte~) div8s::divisoru#5 reg byte x 4.0
(byte) div8s::neg
(byte) div8s::neg#2 neg zp ZP_BYTE:16 2.0
(byte) div8s::neg#3 neg zp ZP_BYTE:16 1.0
(byte) div8s::neg#4 neg zp ZP_BYTE:16 1.0
(byte) div8s::resultu
(byte) div8s::resultu#0 reg byte y 0.6666666666666666
(signed byte) div8s::return
(signed byte) div8s::return#1 reg byte a 4.0
(signed byte) div8s::return#2 reg byte a 5.0
(signed byte) div8s::return#3 reg byte a 22.0
(signed byte~) div8s::return#7 reg byte a 2.0
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(label) div8u::@1
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::dividend#0 reg byte a 2.0
(byte) div8u::dividend#1 reg byte a 11.0
(byte) div8u::dividend#2 reg byte a 15.0
(byte) div8u::divisor
(byte) div8u::divisor#0 reg byte x 4.0
(byte) div8u::divisor#1 reg byte x 22.0
(byte) div8u::divisor#2 reg byte x 7.5
(byte) div8u::return
(byte) div8u::return#0 reg byte a 3.75
(byte) div8u::return#2 reg byte a 4.0
(byte) div8u::return#3 reg byte a 22.0
(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
(signed word~) divr16s::$13 $13 zp ZP_WORD:12 1.0
(signed word~) divr16s::$8 $8 zp ZP_WORD:8 2.0
(label) divr16s::@1
(label) divr16s::@2
(label) divr16s::@3
(label) divr16s::@4
(label) divr16s::@5
(label) divr16s::@6
(label) divr16s::@7
(label) divr16s::@8
(label) divr16s::@9
(label) divr16s::@return
(signed word) divr16s::dividend
(signed word) divr16s::dividend#0 dividend zp ZP_WORD:8 2.0
(word) divr16s::dividendu
(word) divr16s::dividendu#3 dividendu zp ZP_WORD:8 0.8571428571428571
(word~) divr16s::dividendu#7 dividendu zp ZP_WORD:8 4.0
(word~) divr16s::dividendu#8 dividendu zp ZP_WORD:8 4.0
(signed word) divr16s::divisor
(signed word) divr16s::divisor#0 divisor zp ZP_WORD:12 0.8571428571428571
(word) divr16s::divisoru
(word) divr16s::divisoru#3 divisoru zp ZP_WORD:12 3.0
(word~) divr16s::divisoru#4 divisoru zp ZP_WORD:12 4.0
(word~) divr16s::divisoru#5 divisoru zp ZP_WORD:12 4.0
(byte) divr16s::neg
(byte) divr16s::neg#2 reg byte y 2.0
(byte) divr16s::neg#3 reg byte y 1.0
(byte) divr16s::neg#4 reg byte y 0.8571428571428571
(signed word) divr16s::rem
(const signed word) divr16s::rem#0 rem = (byte/signed byte/word/signed word/dword/signed dword) 0
(word) divr16s::remu
(word) divr16s::remu#3 remu zp ZP_WORD:10 0.2222222222222222
(word) divr16s::resultu
(word) divr16s::resultu#0 resultu zp ZP_WORD:14 0.6666666666666666
(signed word) divr16s::return
(signed word) divr16s::return#1 return zp ZP_WORD:14 4.0
(signed word) divr16s::return#2 return zp ZP_WORD:14 2.0
(signed word) divr16s::return#3 return zp ZP_WORD:14 4.0
(signed word~) divr16s::return#7 return zp ZP_WORD:14 2.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 202.0
(byte~) divr16u::$2 reg byte a 202.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp ZP_WORD:8 25.25
(word) divr16u::dividend#1 dividend zp ZP_WORD:8 2.0
(word) divr16u::dividend#2 dividend zp ZP_WORD:8 1.3333333333333333
(word) divr16u::dividend#3 dividend zp ZP_WORD:8 43.57142857142858
(word) divr16u::dividend#5 dividend zp ZP_WORD:8 6.0
(word) divr16u::divisor
(word) divr16u::divisor#0 divisor zp ZP_WORD:12 4.0
(word) divr16u::divisor#1 divisor zp ZP_WORD:12 2.0
(word) divr16u::divisor#6 divisor zp ZP_WORD:12 12.875
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 151.5
(byte) divr16u::i#2 reg byte x 15.538461538461538
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp ZP_WORD:14 151.5
(word) divr16u::quotient#2 quotient zp ZP_WORD:14 101.0
(word) divr16u::quotient#3 quotient zp ZP_WORD:14 25.25
(word) divr16u::rem
(word) divr16u::rem#0 rem zp ZP_WORD:10 75.75
(word) divr16u::rem#1 rem zp ZP_WORD:10 202.0
(word) divr16u::rem#10 rem zp ZP_WORD:10 4.0
(word) divr16u::rem#11 rem zp ZP_WORD:10 101.66666666666667
(word) divr16u::rem#2 rem zp ZP_WORD:10 202.0
(word) divr16u::rem#4 rem zp ZP_WORD:10 4.0
(word) divr16u::rem#5 rem zp ZP_WORD:10 204.0
(word) divr16u::rem#6 rem zp ZP_WORD:10 101.0
(word) divr16u::return
(word) divr16u::return#0 return zp ZP_WORD:14 43.85714285714286
(word) divr16u::return#2 return zp ZP_WORD:14 4.0
(word) divr16u::return#3 return zp ZP_WORD:14 4.0
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$1 reg byte a 202.0
(label) divr8u::@1
(label) divr8u::@2
(label) divr8u::@3
(label) divr8u::@4
(label) divr8u::@5
(label) divr8u::@6
(label) divr8u::@return
(byte) divr8u::dividend
(byte) divr8u::dividend#0 dividend zp ZP_BYTE:17 1.3333333333333333
(byte) divr8u::dividend#1 dividend zp ZP_BYTE:17 25.25
(byte) divr8u::dividend#2 dividend zp ZP_BYTE:17 50.83333333333333
(byte) divr8u::divisor
(byte) divr8u::divisor#0 divisor zp ZP_BYTE:22 12.75
(byte) divr8u::i
(byte) divr8u::i#1 reg byte x 151.5
(byte) divr8u::i#2 reg byte x 16.833333333333332
(byte) divr8u::quotient
(byte) divr8u::quotient#1 quotient zp ZP_BYTE:18 151.5
(byte) divr8u::quotient#2 quotient zp ZP_BYTE:18 101.0
(byte) divr8u::quotient#3 quotient zp ZP_BYTE:18 28.857142857142858
(byte) divr8u::rem
(byte) divr8u::rem#1 reg byte y 101.0
(byte) divr8u::rem#10 reg byte y 101.66666666666667
(byte) divr8u::rem#2 reg byte y 202.0
(byte) divr8u::rem#3 reg byte y 202.0
(byte) divr8u::rem#4 reg byte y 202.0
(byte) divr8u::rem#5 reg byte y 101.0
(byte) divr8u::return
(byte) divr8u::return#0 reg byte a 4.0
(byte) divr8u::return#1 return zp ZP_BYTE:18 50.83333333333333
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#1 b zp ZP_BYTE:7 4.0
(byte) print_byte::b#2 b zp ZP_BYTE:7 4.0
(byte) print_byte::b#3 b zp ZP_BYTE:7 22.0
(byte) print_byte::b#4 b zp ZP_BYTE:7 22.0
(byte) print_byte::b#5 b zp ZP_BYTE:7 22.0
(byte) print_byte::b#6 b zp ZP_BYTE:7 22.0
(byte) print_byte::b#7 b zp ZP_BYTE:7 13.5
(byte~) print_byte::b#9 b zp ZP_BYTE:7 4.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#3 reg byte a 4.0
(byte) print_char::ch#4 reg byte a 4.0
(byte) print_char::ch#5 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:8 101.0
(byte*) print_char_cursor#128 print_char_cursor zp ZP_WORD:8 15.607142857142856
(byte*) print_char_cursor#130 print_char_cursor zp ZP_WORD:8 3.0
(byte*) print_char_cursor#131 print_char_cursor zp ZP_WORD:8 15.999999999999998
(byte*) print_char_cursor#132 print_char_cursor zp ZP_WORD:8 12.0
(byte*) print_char_cursor#135 print_char_cursor zp ZP_WORD:8 24.0
(byte*) print_char_cursor#136 print_char_cursor zp ZP_WORD:8 17.333333333333332
(byte*) print_char_cursor#138 print_char_cursor zp ZP_WORD:8 2.4444444444444446
(byte*~) print_char_cursor#159 print_char_cursor zp ZP_WORD:8 22.0
(byte*~) print_char_cursor#166 print_char_cursor zp ZP_WORD:8 22.0
(byte*) print_char_cursor#18 print_char_cursor zp ZP_WORD:8 1.9152542372881352
(byte*~) print_char_cursor#184 print_char_cursor zp ZP_WORD:8 22.0
(byte*~) print_char_cursor#188 print_char_cursor zp ZP_WORD:8 22.0
(byte*) print_char_cursor#82 print_char_cursor zp ZP_WORD:8 7.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:3 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:3 16.5
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:3 3.9099999999999993
(byte*) print_line_cursor#20 print_line_cursor zp ZP_WORD:3 204.0
(byte*) print_line_cursor#39 print_line_cursor zp ZP_WORD:3 46.0
(byte*) print_line_cursor#41 print_line_cursor zp ZP_WORD:3 0.9565217391304348
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@3
(label) print_sbyte::@4
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 b zp ZP_BYTE:7 4.0
(signed byte) print_sbyte::b#1 b zp ZP_BYTE:7 11.0
(signed byte) print_sbyte::b#10 b zp ZP_BYTE:7 8.333333333333332
(signed byte) print_sbyte::b#2 b zp ZP_BYTE:7 22.0
(signed byte) print_sbyte::b#3 b zp ZP_BYTE:7 22.0
(signed byte) print_sbyte::b#4 b zp ZP_BYTE:7 22.0
(signed byte) print_sbyte::b#7 b zp ZP_BYTE:7 4.0
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:5 202.0
(byte*) print_str::str#13 str zp ZP_WORD:5 101.5
(byte*) print_str::str#15 str zp ZP_WORD:5 2.0
(void()) print_sword((signed word) print_sword::w)
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0 w zp ZP_WORD:5 4.0
(signed word) print_sword::w#1 w zp ZP_WORD:5 11.0
(signed word) print_sword::w#2 w zp ZP_WORD:5 22.0
(signed word) print_sword::w#3 w zp ZP_WORD:5 22.0
(signed word) print_sword::w#4 w zp ZP_WORD:5 22.0
(signed word) print_sword::w#5 w zp ZP_WORD:5 12.5
(signed word) print_sword::w#6 w zp ZP_WORD:5 4.0
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#1 w zp ZP_WORD:5 11.0
(word) print_word::w#2 w zp ZP_WORD:5 22.0
(word) print_word::w#3 w zp ZP_WORD:5 22.0
(word) print_word::w#4 w zp ZP_WORD:5 22.0
(word) print_word::w#5 w zp ZP_WORD:5 16.666666666666664
(word~) print_word::w#7 w zp ZP_WORD:5 4.0
(signed word) rem16s
(signed word) rem16s#11 rem16s zp ZP_WORD:10 0.6818181818181819
(signed word) rem16s#2 rem16s zp ZP_WORD:10 2.0
(signed word~) rem16s#37 rem16s zp ZP_WORD:10 4.0
(word) rem16u
(word) rem16u#1 rem16u zp ZP_WORD:10 0.48148148148148145
(signed byte) rem8s
(signed byte) rem8s#2 reg byte x 2.0
(signed byte) rem8s#3 reg byte x 0.8333333333333335
(signed byte~) rem8s#33 reg byte x 4.0
(byte) rem8u
(byte) rem8u#17 reg byte x 0.5
(const string) str str = (string) " / @"
(const string) str1 str1 = (string) " = @"
(const string) str2 str2 = (string) " @"
(void()) test_16s()
(label) test_16s::@1
(label) test_16s::@10
(label) test_16s::@2
(label) test_16s::@3
(label) test_16s::@4
(label) test_16s::@5
(label) test_16s::@6
(label) test_16s::@7
(label) test_16s::@8
(label) test_16s::@9
(label) test_16s::@return
(signed word) test_16s::dividend
(signed word) test_16s::dividend#0 dividend zp ZP_WORD:5 4.714285714285714
(signed word[]) test_16s::dividends
(const signed word[]) test_16s::dividends#0 dividends = { (word/signed word/dword/signed dword) $7fff, (word/signed word/dword/signed dword) $7fff, -(word/signed word/dword/signed dword) $7fff, -(word/signed word/dword/signed dword) $7fff, (word/signed word/dword/signed dword) $7fff, -(word/signed word/dword/signed dword) $7fff }
(signed word) test_16s::divisor
(signed word) test_16s::divisor#0 divisor zp ZP_WORD:19 3.0
(signed word[]) test_16s::divisors
(const signed word[]) test_16s::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, -(byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) $b, -(byte/signed byte/word/signed word/dword/signed dword) $d, -(byte/signed byte/word/signed word/dword/signed dword) $11, (byte/signed byte/word/signed word/dword/signed dword) $13 }
(byte) test_16s::i
(byte) test_16s::i#1 i zp ZP_BYTE:2 16.5
(byte) test_16s::i#10 i zp ZP_BYTE:2 1.76
(signed word) test_16s::res
(signed word) test_16s::res#0 res zp ZP_WORD:14 2.2
(void()) test_16u()
(label) test_16u::@1
(label) test_16u::@10
(label) test_16u::@2
(label) test_16u::@3
(label) test_16u::@4
(label) test_16u::@5
(label) test_16u::@6
(label) test_16u::@7
(label) test_16u::@8
(label) test_16u::@9
(label) test_16u::@return
(word) test_16u::dividend
(word) test_16u::dividend#0 dividend zp ZP_WORD:5 4.714285714285714
(word[]) test_16u::dividends
(const word[]) test_16u::dividends#0 dividends = { (word/dword/signed dword) $ffff, (word/dword/signed dword) $ffff, (word/dword/signed dword) $ffff, (word/dword/signed dword) $ffff, (word/dword/signed dword) $ffff, (word/dword/signed dword) $ffff }
(word) test_16u::divisor
(word) test_16u::divisor#0 divisor zp ZP_WORD:12 3.0
(word[]) test_16u::divisors
(const word[]) test_16u::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) $b, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) $11, (byte/signed byte/word/signed word/dword/signed dword) $13 }
(byte) test_16u::i
(byte) test_16u::i#1 i zp ZP_BYTE:2 16.5
(byte) test_16u::i#10 i zp ZP_BYTE:2 1.76
(word) test_16u::res
(word) test_16u::res#0 res zp ZP_WORD:14 2.2
(void()) test_8s()
(label) test_8s::@1
(label) test_8s::@10
(label) test_8s::@2
(label) test_8s::@3
(label) test_8s::@4
(label) test_8s::@5
(label) test_8s::@6
(label) test_8s::@7
(label) test_8s::@8
(label) test_8s::@9
(label) test_8s::@return
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0 dividend zp ZP_BYTE:7 4.714285714285714
(signed byte[]) test_8s::dividends
(const signed byte[]) test_8s::dividends#0 dividends = { (byte/signed byte/word/signed word/dword/signed dword) $7f, -(byte/signed byte/word/signed word/dword/signed dword) $7f, -(byte/signed byte/word/signed word/dword/signed dword) $7f, (byte/signed byte/word/signed word/dword/signed dword) $7f, (byte/signed byte/word/signed word/dword/signed dword) $7f, (byte/signed byte/word/signed word/dword/signed dword) $7f }
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0 divisor zp ZP_BYTE:21 3.0
(signed byte[]) test_8s::divisors
(const signed byte[]) test_8s::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, -(byte/signed byte/word/signed word/dword/signed dword) $b, -(byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) $11, (byte/signed byte/word/signed word/dword/signed dword) $13 }
(byte) test_8s::i
(byte) test_8s::i#1 i zp ZP_BYTE:2 16.5
(byte) test_8s::i#10 i zp ZP_BYTE:2 1.76
(signed byte) test_8s::res
(signed byte) test_8s::res#0 res zp ZP_BYTE:16 2.2
(void()) test_8u()
(label) test_8u::@1
(label) test_8u::@10
(label) test_8u::@11
(label) test_8u::@2
(label) test_8u::@3
(label) test_8u::@4
(label) test_8u::@5
(label) test_8u::@6
(label) test_8u::@7
(label) test_8u::@8
(label) test_8u::@9
(label) test_8u::@return
(byte) test_8u::dividend
(byte) test_8u::dividend#0 dividend zp ZP_BYTE:7 4.714285714285714
(byte[]) test_8u::dividends
(const byte[]) test_8u::dividends#0 dividends = { (byte/word/signed word/dword/signed dword) $ff, (byte/word/signed word/dword/signed dword) $ff, (byte/word/signed word/dword/signed dword) $ff, (byte/word/signed word/dword/signed dword) $ff, (byte/word/signed word/dword/signed dword) $ff, (byte/word/signed word/dword/signed dword) $ff }
(byte) test_8u::divisor
(byte) test_8u::divisor#0 divisor zp ZP_BYTE:16 3.3000000000000003
(byte[]) test_8u::divisors
(const byte[]) test_8u::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) $b, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) $11, (byte/signed byte/word/signed word/dword/signed dword) $13 }
(byte) test_8u::i
(byte) test_8u::i#1 i zp ZP_BYTE:2 11.0
(byte) test_8u::i#10 i zp ZP_BYTE:2 1.8333333333333333
(byte) test_8u::res
(byte) test_8u::res#0 res zp ZP_BYTE:17 2.4444444444444446

zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 test_8s::i#10 test_8s::i#1 test_16u::i#10 test_16u::i#1 test_8u::i#10 test_8u::i#1 ]
zp ZP_WORD:3 [ print_line_cursor#20 print_line_cursor#39 print_line_cursor#1 print_line_cursor#41 print_cls::sc#2 print_cls::sc#1 ]
zp ZP_WORD:5 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 test_16s::dividend#0 div16s::dividend#0 test_16u::dividend#0 div16u::dividend#0 print_str::str#13 print_str::str#15 print_str::str#0 ]
zp ZP_BYTE:7 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 print_sbyte::b#7 print_sbyte::b#0 print_sbyte::b#10 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 test_8u::dividend#0 test_8s::dividend#0 ]
reg byte a [ print_char::ch#5 print_char::ch#3 print_char::ch#4 ]
zp ZP_WORD:8 [ print_char_cursor#82 print_char_cursor#136 print_char_cursor#135 print_char_cursor#130 print_char_cursor#131 print_char_cursor#159 print_char_cursor#128 print_char_cursor#18 print_char_cursor#166 print_char_cursor#138 print_char_cursor#132 print_char_cursor#1 print_char_cursor#184 print_char_cursor#188 divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 divr16s::dividend#0 divr16s::$8 ]
zp ZP_WORD:10 [ divr16s::remu#3 divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16s#11 rem16s#2 rem16s#37 rem16u#1 ]
zp ZP_WORD:12 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 divr16s::divisor#0 divr16s::$13 test_16u::divisor#0 div16u::divisor#0 ]
reg byte y [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
zp ZP_WORD:14 [ divr16s::return#2 divr16s::return#1 divr16s::return#7 divr16s::resultu#0 divr16s::return#3 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#2 div16s::return#2 test_16s::res#0 div16s::return#0 div16u::return#2 test_16u::res#0 div16u::return#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte y [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
reg byte x [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
zp ZP_BYTE:16 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 test_8s::res#0 test_8u::divisor#0 ]
reg byte a [ div8s::return#2 div8s::return#1 div8s::return#7 ]
reg byte x [ rem8s#3 rem8s#2 rem8s#33 ]
reg byte a [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
reg byte x [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
reg byte y [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
zp ZP_BYTE:17 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 test_8u::res#0 ]
zp ZP_BYTE:18 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
reg byte x [ divr8u::i#2 divr8u::i#1 ]
zp ZP_WORD:19 [ test_16s::divisor#0 div16s::divisor#0 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
zp ZP_BYTE:21 [ test_8s::divisor#0 ]
reg byte y [ div8s::dividend#0 ]
reg byte x [ div8s::divisor#0 ]
reg byte a [ div8s::return#3 ]
reg byte a [ div8u::return#2 ]
reg byte y [ div8s::resultu#0 ]
reg byte x [ div8s::$8 ]
reg byte a [ div8s::$5 ]
zp ZP_BYTE:22 [ divr8u::divisor#0 ]
reg byte a [ divr8u::return#0 ]
reg byte a [ div8u::return#0 ]
reg byte a [ divr8u::$1 ]
reg byte x [ rem8u#17 ]
reg byte a [ div8u::return#3 ]
