Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call call sid_rnd_init 
Inlined call main::$7 = call toD018 SCREEN1 CHARSET 
Inlined call main::$9 = call toD018 SCREEN2 CHARSET 
Inlined call fire::$12 = call sid_rnd 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  asm { sei  }
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLACK
  fillscreen::screen#0 = BUFFER
  fillscreen::fill#0 = 0
  call fillscreen 
  to:main::@6
main::@6: scope:[main]  from main
  fillscreen::screen#1 = SCREEN1
  fillscreen::fill#1 = 0
  call fillscreen 
  to:main::@7
main::@7: scope:[main]  from main::@6
  fillscreen::screen#2 = SCREEN2
  fillscreen::fill#2 = 0
  call fillscreen 
  to:main::@8
main::@8: scope:[main]  from main::@7
  fillscreen::screen#3 = COLS
  fillscreen::fill#3 = YELLOW
  call fillscreen 
  to:main::@9
main::@9: scope:[main]  from main::@8
  to:main::sid_rnd_init1
main::sid_rnd_init1: scope:[main]  from main::@9
  *((word*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) = $ffff
  *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) = SID_CONTROL_NOISE
  to:main::@3
main::@3: scope:[main]  from main::sid_rnd_init1
  makecharset::charset#0 = CHARSET
  call makecharset 
  to:main::@10
main::@10: scope:[main]  from main::@3
  to:main::@1
main::@1: scope:[main]  from main::@10 main::@5
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  fire::screenbase#0 = SCREEN1
  call fire 
  to:main::@11
main::@11: scope:[main]  from main::@2
  main::toD0181_screen#0 = SCREEN1
  main::toD0181_gfx#0 = CHARSET
  to:main::toD0181
main::toD0181: scope:[main]  from main::@11
  main::toD0181_gfx#1 = phi( main::@11/main::toD0181_gfx#0 )
  main::toD0181_screen#1 = phi( main::@11/main::toD0181_screen#0 )
  main::toD0181_$7 = (word)main::toD0181_screen#1
  main::toD0181_$0 = main::toD0181_$7 & $3fff
  main::toD0181_$1 = main::toD0181_$0 * 4
  main::toD0181_$2 = > main::toD0181_$1
  main::toD0181_$3 = > (word)main::toD0181_gfx#1
  main::toD0181_$4 = main::toD0181_$3 / 4
  main::toD0181_$5 = main::toD0181_$4 & $f
  main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
  main::toD0181_return#0 = main::toD0181_$6
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  main::toD0181_return#2 = phi( main::toD0181/main::toD0181_return#0 )
  main::toD0181_return#1 = main::toD0181_return#2
  to:main::@4
main::@4: scope:[main]  from main::toD0181_@return
  main::toD0181_return#3 = phi( main::toD0181_@return/main::toD0181_return#1 )
  main::$7 = main::toD0181_return#3
  *D018 = main::$7
  fire::screenbase#1 = SCREEN2
  call fire 
  to:main::@12
main::@12: scope:[main]  from main::@4
  main::toD0182_screen#0 = SCREEN2
  main::toD0182_gfx#0 = CHARSET
  to:main::toD0182
main::toD0182: scope:[main]  from main::@12
  main::toD0182_gfx#1 = phi( main::@12/main::toD0182_gfx#0 )
  main::toD0182_screen#1 = phi( main::@12/main::toD0182_screen#0 )
  main::toD0182_$7 = (word)main::toD0182_screen#1
  main::toD0182_$0 = main::toD0182_$7 & $3fff
  main::toD0182_$1 = main::toD0182_$0 * 4
  main::toD0182_$2 = > main::toD0182_$1
  main::toD0182_$3 = > (word)main::toD0182_gfx#1
  main::toD0182_$4 = main::toD0182_$3 / 4
  main::toD0182_$5 = main::toD0182_$4 & $f
  main::toD0182_$6 = main::toD0182_$2 | main::toD0182_$5
  main::toD0182_return#0 = main::toD0182_$6
  to:main::toD0182_@return
main::toD0182_@return: scope:[main]  from main::toD0182
  main::toD0182_return#2 = phi( main::toD0182/main::toD0182_return#0 )
  main::toD0182_return#1 = main::toD0182_return#2
  to:main::@5
main::@5: scope:[main]  from main::toD0182_@return
  main::toD0182_return#3 = phi( main::toD0182_@return/main::toD0182_return#1 )
  main::$9 = main::toD0182_return#3
  *D018 = main::$9
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void fire(byte* fire::screenbase)
fire: scope:[fire]  from main::@2 main::@4
  fire::screenbase#2 = phi( main::@2/fire::screenbase#0, main::@4/fire::screenbase#1 )
  fire::screen#0 = fire::screenbase#2
  fire::buffer#0 = BUFFER
  to:fire::@1
fire::@1: scope:[fire]  from fire fire::@4
  fire::screen#9 = phi( fire/fire::screen#0, fire::@4/fire::screen#2 )
  fire::screenbase#4 = phi( fire/fire::screenbase#2, fire::@4/fire::screenbase#5 )
  fire::buffer#4 = phi( fire/fire::buffer#0, fire::@4/fire::buffer#2 )
  fire::$2 = BUFFER + $18*$28
  fire::$3 = fire::buffer#4 != fire::$2
  if(fire::$3) goto fire::@2
  to:fire::@3
fire::@2: scope:[fire]  from fire::@1
  fire::screenbase#6 = phi( fire::@1/fire::screenbase#4 )
  fire::screen#6 = phi( fire::@1/fire::screen#9 )
  fire::buffer#5 = phi( fire::@1/fire::buffer#4 )
  fire::$4 = fire::buffer#5[$28-1] + fire::buffer#5[$28-1]
  fire::$5 = fire::$4 + fire::buffer#5[$28]
  fire::$6 = fire::$5 + fire::buffer#5[$29]
  fire::$7 = fire::$6 / 4
  fire::c#0 = fire::$7
  fire::$8 = fire::c#0 > 2
  fire::$9 = ! fire::$8
  if(fire::$9) goto fire::@4
  to:fire::@5
fire::@3: scope:[fire]  from fire::@1
  fire::screenbase#3 = phi( fire::@1/fire::screenbase#4 )
  fire::$0 = fire::screenbase#3 + $18*$28
  fire::screen#1 = fire::$0
  fire::$1 = BUFFER + $18*$28
  fire::buffer#1 = fire::$1
  to:fire::@6
fire::@4: scope:[fire]  from fire::@2 fire::@5
  fire::screenbase#5 = phi( fire::@2/fire::screenbase#6, fire::@5/fire::screenbase#7 )
  fire::screen#4 = phi( fire::@2/fire::screen#6, fire::@5/fire::screen#7 )
  fire::buffer#6 = phi( fire::@2/fire::buffer#5, fire::@5/fire::buffer#9 )
  fire::c#2 = phi( fire::@2/fire::c#0, fire::@5/fire::c#1 )
  *fire::buffer#6 = fire::c#2
  *fire::screen#4 = *fire::buffer#6
  fire::screen#2 = ++ fire::screen#4
  fire::buffer#2 = ++ fire::buffer#6
  to:fire::@1
fire::@5: scope:[fire]  from fire::@2
  fire::screenbase#7 = phi( fire::@2/fire::screenbase#6 )
  fire::screen#7 = phi( fire::@2/fire::screen#6 )
  fire::buffer#9 = phi( fire::@2/fire::buffer#5 )
  fire::c#3 = phi( fire::@2/fire::c#0 )
  fire::c#1 = fire::c#3 - 3
  to:fire::@4
fire::@6: scope:[fire]  from fire::@3 fire::@7
  fire::screen#11 = phi( fire::@3/fire::screen#1, fire::@7/fire::screen#3 )
  fire::buffer#7 = phi( fire::@3/fire::buffer#1, fire::@7/fire::buffer#3 )
  fire::$10 = BUFFER + $19*$28
  fire::$11 = fire::buffer#7 != fire::$10
  if(fire::$11) goto fire::sid_rnd1
  to:fire::@return
fire::sid_rnd1: scope:[fire]  from fire::@6
  fire::screen#10 = phi( fire::@6/fire::screen#11 )
  fire::buffer#11 = phi( fire::@6/fire::buffer#7 )
  fire::sid_rnd1_return#0 = *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC)
  to:fire::sid_rnd1_@return
fire::sid_rnd1_@return: scope:[fire]  from fire::sid_rnd1
  fire::screen#8 = phi( fire::sid_rnd1/fire::screen#10 )
  fire::buffer#10 = phi( fire::sid_rnd1/fire::buffer#11 )
  fire::sid_rnd1_return#2 = phi( fire::sid_rnd1/fire::sid_rnd1_return#0 )
  fire::sid_rnd1_return#1 = fire::sid_rnd1_return#2
  to:fire::@7
fire::@7: scope:[fire]  from fire::sid_rnd1_@return
  fire::screen#5 = phi( fire::sid_rnd1_@return/fire::screen#8 )
  fire::buffer#8 = phi( fire::sid_rnd1_@return/fire::buffer#10 )
  fire::sid_rnd1_return#3 = phi( fire::sid_rnd1_@return/fire::sid_rnd1_return#1 )
  fire::$12 = fire::sid_rnd1_return#3
  fire::$13 = fire::$12 / $10
  fire::$14 = $30 + fire::$13
  *fire::buffer#8 = fire::$14
  *fire::screen#5 = *fire::buffer#8
  fire::screen#3 = ++ fire::screen#5
  fire::buffer#3 = ++ fire::buffer#8
  to:fire::@6
fire::@return: scope:[fire]  from fire::@6
  return 
  to:@return

void makecharset(byte* makecharset::charset)
makecharset: scope:[makecharset]  from main::@3
  makecharset::charset#1 = phi( main::@3/makecharset::charset#0 )
  makecharset::font#0 = makecharset::charset#1
  to:makecharset::@1
makecharset::@1: scope:[makecharset]  from makecharset makecharset::@2
  makecharset::font#2 = phi( makecharset/makecharset::font#0, makecharset::@2/makecharset::font#1 )
  makecharset::charset#2 = phi( makecharset/makecharset::charset#1, makecharset::@2/makecharset::charset#6 )
  makecharset::$0 = makecharset::charset#2 + 1*8
  makecharset::$1 = makecharset::font#2 != makecharset::$0
  if(makecharset::$1) goto makecharset::@2
  to:makecharset::@3
makecharset::@2: scope:[makecharset]  from makecharset::@1
  makecharset::charset#6 = phi( makecharset::@1/makecharset::charset#2 )
  makecharset::font#3 = phi( makecharset::@1/makecharset::font#2 )
  *makecharset::font#3 = 0
  makecharset::font#1 = ++ makecharset::font#3
  to:makecharset::@1
makecharset::@3: scope:[makecharset]  from makecharset::@1
  makecharset::charset#3 = phi( makecharset::@1/makecharset::charset#2 )
  makecharset::$2 = makecharset::charset#3 + $40*8
  makecharset::font1#0 = makecharset::$2
  to:makecharset::@4
makecharset::@4: scope:[makecharset]  from makecharset::@3 makecharset::@5
  makecharset::font1#2 = phi( makecharset::@3/makecharset::font1#0, makecharset::@5/makecharset::font1#1 )
  makecharset::charset#4 = phi( makecharset::@3/makecharset::charset#3, makecharset::@5/makecharset::charset#7 )
  makecharset::$3 = makecharset::charset#4 + $100*8
  makecharset::$4 = makecharset::font1#2 != makecharset::$3
  if(makecharset::$4) goto makecharset::@5
  to:makecharset::@6
makecharset::@5: scope:[makecharset]  from makecharset::@4
  makecharset::charset#7 = phi( makecharset::@4/makecharset::charset#4 )
  makecharset::font1#3 = phi( makecharset::@4/makecharset::font1#2 )
  *makecharset::font1#3 = $ff
  makecharset::font1#1 = ++ makecharset::font1#3
  to:makecharset::@4
makecharset::@6: scope:[makecharset]  from makecharset::@4
  makecharset::charset#17 = phi( makecharset::@4/makecharset::charset#4 )
  makecharset::c#0 = 0
  to:makecharset::@7
makecharset::@7: scope:[makecharset]  from makecharset::@11 makecharset::@6
  makecharset::charset#15 = phi( makecharset::@11/makecharset::charset#16, makecharset::@6/makecharset::charset#17 )
  makecharset::c#2 = phi( makecharset::@11/makecharset::c#1, makecharset::@6/makecharset::c#0 )
  makecharset::$5 = makecharset::c#2 < $40
  if(makecharset::$5) goto makecharset::@8
  to:makecharset::@return
makecharset::@8: scope:[makecharset]  from makecharset::@7
  makecharset::charset#14 = phi( makecharset::@7/makecharset::charset#15 )
  makecharset::c#8 = phi( makecharset::@7/makecharset::c#2 )
  makecharset::bc#0 = 0
  makecharset::i#0 = 0
  to:makecharset::@9
makecharset::@9: scope:[makecharset]  from makecharset::@14 makecharset::@8
  makecharset::charset#11 = phi( makecharset::@14/makecharset::charset#5, makecharset::@8/makecharset::charset#14 )
  makecharset::bc#8 = phi( makecharset::@14/makecharset::bc#9, makecharset::@8/makecharset::bc#0 )
  makecharset::c#6 = phi( makecharset::@14/makecharset::c#5, makecharset::@8/makecharset::c#8 )
  makecharset::i#2 = phi( makecharset::@14/makecharset::i#1, makecharset::@8/makecharset::i#0 )
  makecharset::$6 = makecharset::i#2 < 8
  if(makecharset::$6) goto makecharset::@10
  to:makecharset::@11
makecharset::@10: scope:[makecharset]  from makecharset::@9
  makecharset::i#7 = phi( makecharset::@9/makecharset::i#2 )
  makecharset::charset#9 = phi( makecharset::@9/makecharset::charset#11 )
  makecharset::c#9 = phi( makecharset::@9/makecharset::c#6 )
  makecharset::bc#6 = phi( makecharset::@9/makecharset::bc#8 )
  makecharset::b#0 = 0
  makecharset::ii#0 = 0
  to:makecharset::@12
makecharset::@11: scope:[makecharset]  from makecharset::@9
  makecharset::charset#16 = phi( makecharset::@9/makecharset::charset#11 )
  makecharset::c#3 = phi( makecharset::@9/makecharset::c#6 )
  makecharset::c#1 = ++ makecharset::c#3
  to:makecharset::@7
makecharset::@12: scope:[makecharset]  from makecharset::@10 makecharset::@15
  makecharset::b#4 = phi( makecharset::@10/makecharset::b#0, makecharset::@15/makecharset::b#6 )
  makecharset::i#5 = phi( makecharset::@10/makecharset::i#7, makecharset::@15/makecharset::i#8 )
  makecharset::charset#8 = phi( makecharset::@10/makecharset::charset#9, makecharset::@15/makecharset::charset#10 )
  makecharset::c#7 = phi( makecharset::@10/makecharset::c#9, makecharset::@15/makecharset::c#10 )
  makecharset::bc#5 = phi( makecharset::@10/makecharset::bc#6, makecharset::@15/makecharset::bc#7 )
  makecharset::ii#2 = phi( makecharset::@10/makecharset::ii#0, makecharset::@15/makecharset::ii#1 )
  makecharset::$7 = makecharset::ii#2 < 8
  if(makecharset::$7) goto makecharset::@13
  to:makecharset::@14
makecharset::@13: scope:[makecharset]  from makecharset::@12
  makecharset::charset#12 = phi( makecharset::@12/makecharset::charset#8 )
  makecharset::b#5 = phi( makecharset::@12/makecharset::b#4 )
  makecharset::i#6 = phi( makecharset::@12/makecharset::i#5 )
  makecharset::ii#5 = phi( makecharset::@12/makecharset::ii#2 )
  makecharset::c#4 = phi( makecharset::@12/makecharset::c#7 )
  makecharset::bc#3 = phi( makecharset::@12/makecharset::bc#5 )
  makecharset::bc#1 = makecharset::bc#3 + makecharset::c#4
  makecharset::$8 = makecharset::bc#1 > $3f
  makecharset::$9 = ! makecharset::$8
  if(makecharset::$9) goto makecharset::@15
  to:makecharset::@16
makecharset::@14: scope:[makecharset]  from makecharset::@12
  makecharset::bc#9 = phi( makecharset::@12/makecharset::bc#5 )
  makecharset::b#2 = phi( makecharset::@12/makecharset::b#4 )
  makecharset::i#3 = phi( makecharset::@12/makecharset::i#5 )
  makecharset::c#5 = phi( makecharset::@12/makecharset::c#7 )
  makecharset::charset#5 = phi( makecharset::@12/makecharset::charset#8 )
  makecharset::$14 = makecharset::charset#5 + 1*8
  makecharset::$17 = (word)makecharset::c#5
  makecharset::$15 = makecharset::$17 << 3
  makecharset::$16 = makecharset::$15 + makecharset::i#3
  makecharset::$14[makecharset::$16] = makecharset::b#2
  makecharset::i#1 = ++ makecharset::i#3
  to:makecharset::@9
makecharset::@15: scope:[makecharset]  from makecharset::@13 makecharset::@16
  makecharset::b#6 = phi( makecharset::@13/makecharset::b#5, makecharset::@16/makecharset::b#1 )
  makecharset::i#8 = phi( makecharset::@13/makecharset::i#6, makecharset::@16/makecharset::i#4 )
  makecharset::charset#10 = phi( makecharset::@13/makecharset::charset#12, makecharset::@16/makecharset::charset#13 )
  makecharset::c#10 = phi( makecharset::@13/makecharset::c#4, makecharset::@16/makecharset::c#11 )
  makecharset::bc#7 = phi( makecharset::@13/makecharset::bc#1, makecharset::@16/makecharset::bc#2 )
  makecharset::ii#3 = phi( makecharset::@13/makecharset::ii#5, makecharset::@16/makecharset::ii#4 )
  makecharset::ii#1 = ++ makecharset::ii#3
  to:makecharset::@12
makecharset::@16: scope:[makecharset]  from makecharset::@13
  makecharset::charset#13 = phi( makecharset::@13/makecharset::charset#12 )
  makecharset::c#11 = phi( makecharset::@13/makecharset::c#4 )
  makecharset::b#3 = phi( makecharset::@13/makecharset::b#5 )
  makecharset::ii#4 = phi( makecharset::@13/makecharset::ii#5 )
  makecharset::i#4 = phi( makecharset::@13/makecharset::i#6 )
  makecharset::bc#4 = phi( makecharset::@13/makecharset::bc#1 )
  makecharset::$10 = makecharset::bc#4 - $40
  makecharset::bc#2 = makecharset::$10
  makecharset::$11 = makecharset::i#4 & 1
  makecharset::$12 = makecharset::ii#4 + makecharset::$11
  makecharset::$13 = makecharset::$12 & 7
  makecharset::b#1 = makecharset::b#3 + makecharset::bittab[makecharset::$13]
  to:makecharset::@15
makecharset::@return: scope:[makecharset]  from makecharset::@7
  return 
  to:@return

void fillscreen(byte* fillscreen::screen , byte fillscreen::fill)
fillscreen: scope:[fillscreen]  from main main::@6 main::@7 main::@8
  fillscreen::screen#6 = phi( main/fillscreen::screen#0, main::@6/fillscreen::screen#1, main::@7/fillscreen::screen#2, main::@8/fillscreen::screen#3 )
  fillscreen::fill#5 = phi( main/fillscreen::fill#0, main::@6/fillscreen::fill#1, main::@7/fillscreen::fill#2, main::@8/fillscreen::fill#3 )
  fillscreen::i#0 = 0
  to:fillscreen::@1
fillscreen::@1: scope:[fillscreen]  from fillscreen fillscreen::@1
  fillscreen::i#2 = phi( fillscreen/fillscreen::i#0, fillscreen::@1/fillscreen::i#1 )
  fillscreen::screen#5 = phi( fillscreen/fillscreen::screen#6, fillscreen::@1/fillscreen::screen#4 )
  fillscreen::fill#4 = phi( fillscreen/fillscreen::fill#5, fillscreen::@1/fillscreen::fill#4 )
  *fillscreen::screen#5 = fillscreen::fill#4
  fillscreen::screen#4 = ++ fillscreen::screen#5
  fillscreen::i#1 = fillscreen::i#2 + rangenext(0,$3e7)
  fillscreen::$0 = fillscreen::i#1 != rangelast(0,$3e7)
  if(fillscreen::$0) goto fillscreen::@1
  to:fillscreen::@return
fillscreen::@return: scope:[fillscreen]  from fillscreen::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte BLACK = 0
const byte* BUFFER = (byte*)$4000
const byte* CHARSET = (byte*)$3000
const nomodify byte* COLS = (byte*)$d800
const nomodify byte* D018 = (byte*)$d018
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
const byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
const byte OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = $12
const byte OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = $e
const byte OFFSET_STRUCT_MOS6581_SID_CH3_OSC = $1b
const byte* SCREEN1 = (byte*)$3800
const byte* SCREEN2 = (byte*)$3c00
const nomodify struct MOS6581_SID* SID = (struct MOS6581_SID*)$d400
const nomodify byte SID_CONTROL_NOISE = $80
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*)$d000
const nomodify byte YELLOW = 7
void __start()
void fillscreen(byte* fillscreen::screen , byte fillscreen::fill)
bool~ fillscreen::$0
byte fillscreen::fill
byte fillscreen::fill#0
byte fillscreen::fill#1
byte fillscreen::fill#2
byte fillscreen::fill#3
byte fillscreen::fill#4
byte fillscreen::fill#5
word fillscreen::i
word fillscreen::i#0
word fillscreen::i#1
word fillscreen::i#2
byte* fillscreen::screen
byte* fillscreen::screen#0
byte* fillscreen::screen#1
byte* fillscreen::screen#2
byte* fillscreen::screen#3
byte* fillscreen::screen#4
byte* fillscreen::screen#5
byte* fillscreen::screen#6
void fire(byte* fire::screenbase)
byte*~ fire::$0
byte*~ fire::$1
byte*~ fire::$10
bool~ fire::$11
byte~ fire::$12
number~ fire::$13
number~ fire::$14
byte*~ fire::$2
bool~ fire::$3
byte~ fire::$4
byte~ fire::$5
byte~ fire::$6
number~ fire::$7
bool~ fire::$8
bool~ fire::$9
byte* fire::buffer
byte* fire::buffer#0
byte* fire::buffer#1
byte* fire::buffer#10
byte* fire::buffer#11
byte* fire::buffer#2
byte* fire::buffer#3
byte* fire::buffer#4
byte* fire::buffer#5
byte* fire::buffer#6
byte* fire::buffer#7
byte* fire::buffer#8
byte* fire::buffer#9
byte fire::c
byte fire::c#0
byte fire::c#1
byte fire::c#2
byte fire::c#3
byte* fire::screen
byte* fire::screen#0
byte* fire::screen#1
byte* fire::screen#10
byte* fire::screen#11
byte* fire::screen#2
byte* fire::screen#3
byte* fire::screen#4
byte* fire::screen#5
byte* fire::screen#6
byte* fire::screen#7
byte* fire::screen#8
byte* fire::screen#9
byte* fire::screenbase
byte* fire::screenbase#0
byte* fire::screenbase#1
byte* fire::screenbase#2
byte* fire::screenbase#3
byte* fire::screenbase#4
byte* fire::screenbase#5
byte* fire::screenbase#6
byte* fire::screenbase#7
byte fire::sid_rnd1_return
byte fire::sid_rnd1_return#0
byte fire::sid_rnd1_return#1
byte fire::sid_rnd1_return#2
byte fire::sid_rnd1_return#3
void main()
byte~ main::$7
byte~ main::$9
number~ main::toD0181_$0
number~ main::toD0181_$1
number~ main::toD0181_$2
byte~ main::toD0181_$3
number~ main::toD0181_$4
number~ main::toD0181_$5
number~ main::toD0181_$6
word~ main::toD0181_$7
byte* main::toD0181_gfx
byte* main::toD0181_gfx#0
byte* main::toD0181_gfx#1
byte main::toD0181_return
byte main::toD0181_return#0
byte main::toD0181_return#1
byte main::toD0181_return#2
byte main::toD0181_return#3
byte* main::toD0181_screen
byte* main::toD0181_screen#0
byte* main::toD0181_screen#1
number~ main::toD0182_$0
number~ main::toD0182_$1
number~ main::toD0182_$2
byte~ main::toD0182_$3
number~ main::toD0182_$4
number~ main::toD0182_$5
number~ main::toD0182_$6
word~ main::toD0182_$7
byte* main::toD0182_gfx
byte* main::toD0182_gfx#0
byte* main::toD0182_gfx#1
byte main::toD0182_return
byte main::toD0182_return#0
byte main::toD0182_return#1
byte main::toD0182_return#2
byte main::toD0182_return#3
byte* main::toD0182_screen
byte* main::toD0182_screen#0
byte* main::toD0182_screen#1
void makecharset(byte* makecharset::charset)
byte*~ makecharset::$0
bool~ makecharset::$1
number~ makecharset::$10
number~ makecharset::$11
number~ makecharset::$12
number~ makecharset::$13
byte*~ makecharset::$14
word~ makecharset::$15
word~ makecharset::$16
word~ makecharset::$17
byte*~ makecharset::$2
byte*~ makecharset::$3
bool~ makecharset::$4
bool~ makecharset::$5
bool~ makecharset::$6
bool~ makecharset::$7
bool~ makecharset::$8
bool~ makecharset::$9
byte makecharset::b
byte makecharset::b#0
byte makecharset::b#1
byte makecharset::b#2
byte makecharset::b#3
byte makecharset::b#4
byte makecharset::b#5
byte makecharset::b#6
byte makecharset::bc
byte makecharset::bc#0
byte makecharset::bc#1
byte makecharset::bc#2
byte makecharset::bc#3
byte makecharset::bc#4
byte makecharset::bc#5
byte makecharset::bc#6
byte makecharset::bc#7
byte makecharset::bc#8
byte makecharset::bc#9
const to_nomodify byte* makecharset::bittab[8]  = { 1, 2, 4, 8, $10, $20, $40, $80 }
byte makecharset::c
byte makecharset::c#0
byte makecharset::c#1
byte makecharset::c#10
byte makecharset::c#11
byte makecharset::c#2
byte makecharset::c#3
byte makecharset::c#4
byte makecharset::c#5
byte makecharset::c#6
byte makecharset::c#7
byte makecharset::c#8
byte makecharset::c#9
byte* makecharset::charset
byte* makecharset::charset#0
byte* makecharset::charset#1
byte* makecharset::charset#10
byte* makecharset::charset#11
byte* makecharset::charset#12
byte* makecharset::charset#13
byte* makecharset::charset#14
byte* makecharset::charset#15
byte* makecharset::charset#16
byte* makecharset::charset#17
byte* makecharset::charset#2
byte* makecharset::charset#3
byte* makecharset::charset#4
byte* makecharset::charset#5
byte* makecharset::charset#6
byte* makecharset::charset#7
byte* makecharset::charset#8
byte* makecharset::charset#9
byte* makecharset::font
byte* makecharset::font#0
byte* makecharset::font#1
byte* makecharset::font#2
byte* makecharset::font#3
byte* makecharset::font1
byte* makecharset::font1#0
byte* makecharset::font1#1
byte* makecharset::font1#2
byte* makecharset::font1#3
byte makecharset::i
byte makecharset::i#0
byte makecharset::i#1
byte makecharset::i#2
byte makecharset::i#3
byte makecharset::i#4
byte makecharset::i#5
byte makecharset::i#6
byte makecharset::i#7
byte makecharset::i#8
byte makecharset::ii
byte makecharset::ii#0
byte makecharset::ii#1
byte makecharset::ii#2
byte makecharset::ii#3
byte makecharset::ii#4
byte makecharset::ii#5

Adding number conversion cast (unumber) 0 in fillscreen::fill#0 = 0
Adding number conversion cast (unumber) 0 in fillscreen::fill#1 = 0
Adding number conversion cast (unumber) 0 in fillscreen::fill#2 = 0
Adding number conversion cast (unumber) $ffff in *((word*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) = $ffff
Adding number conversion cast (unumber) $3fff in main::toD0181_$0 = main::toD0181_$7 & $3fff
Adding number conversion cast (unumber) main::toD0181_$0 in main::toD0181_$0 = main::toD0181_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in main::toD0181_$1 = main::toD0181_$0 * 4
Adding number conversion cast (unumber) main::toD0181_$1 in main::toD0181_$1 = main::toD0181_$0 * (unumber)4
Adding number conversion cast (unumber) main::toD0181_$2 in main::toD0181_$2 = > main::toD0181_$1
Adding number conversion cast (unumber) 4 in main::toD0181_$4 = main::toD0181_$3 / 4
Adding number conversion cast (unumber) main::toD0181_$4 in main::toD0181_$4 = main::toD0181_$3 / (unumber)4
Adding number conversion cast (unumber) $f in main::toD0181_$5 = main::toD0181_$4 & $f
Adding number conversion cast (unumber) main::toD0181_$5 in main::toD0181_$5 = main::toD0181_$4 & (unumber)$f
Adding number conversion cast (unumber) main::toD0181_$6 in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Adding number conversion cast (unumber) $3fff in main::toD0182_$0 = main::toD0182_$7 & $3fff
Adding number conversion cast (unumber) main::toD0182_$0 in main::toD0182_$0 = main::toD0182_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in main::toD0182_$1 = main::toD0182_$0 * 4
Adding number conversion cast (unumber) main::toD0182_$1 in main::toD0182_$1 = main::toD0182_$0 * (unumber)4
Adding number conversion cast (unumber) main::toD0182_$2 in main::toD0182_$2 = > main::toD0182_$1
Adding number conversion cast (unumber) 4 in main::toD0182_$4 = main::toD0182_$3 / 4
Adding number conversion cast (unumber) main::toD0182_$4 in main::toD0182_$4 = main::toD0182_$3 / (unumber)4
Adding number conversion cast (unumber) $f in main::toD0182_$5 = main::toD0182_$4 & $f
Adding number conversion cast (unumber) main::toD0182_$5 in main::toD0182_$5 = main::toD0182_$4 & (unumber)$f
Adding number conversion cast (unumber) main::toD0182_$6 in main::toD0182_$6 = main::toD0182_$2 | main::toD0182_$5
Adding number conversion cast (unumber) $18*$28 in fire::$2 = BUFFER + $18*$28
Adding number conversion cast (unumber) $28-1 in fire::$4 = fire::buffer#5[$28-1] + fire::buffer#5[$28-1]
Adding number conversion cast (unumber) $28-1 in fire::$4 = fire::buffer#5[(unumber)$28-1] + fire::buffer#5[$28-1]
Adding number conversion cast (unumber) $28 in fire::$5 = fire::$4 + fire::buffer#5[$28]
Adding number conversion cast (unumber) $29 in fire::$6 = fire::$5 + fire::buffer#5[$29]
Adding number conversion cast (unumber) 4 in fire::$7 = fire::$6 / 4
Adding number conversion cast (unumber) fire::$7 in fire::$7 = fire::$6 / (unumber)4
Adding number conversion cast (unumber) 2 in fire::$8 = fire::c#0 > 2
Adding number conversion cast (unumber) $18*$28 in fire::$0 = fire::screenbase#3 + $18*$28
Adding number conversion cast (unumber) $18*$28 in fire::$1 = BUFFER + $18*$28
Adding number conversion cast (unumber) 3 in fire::c#1 = fire::c#3 - 3
Adding number conversion cast (unumber) $19*$28 in fire::$10 = BUFFER + $19*$28
Adding number conversion cast (unumber) $10 in fire::$13 = fire::$12 / $10
Adding number conversion cast (unumber) fire::$13 in fire::$13 = fire::$12 / (unumber)$10
Adding number conversion cast (unumber) $30 in fire::$14 = $30 + fire::$13
Adding number conversion cast (unumber) fire::$14 in fire::$14 = (unumber)$30 + fire::$13
Adding number conversion cast (unumber) 1*8 in makecharset::$0 = makecharset::charset#2 + 1*8
Adding number conversion cast (unumber) 0 in *makecharset::font#3 = 0
Adding number conversion cast (unumber) $40*8 in makecharset::$2 = makecharset::charset#3 + $40*8
Adding number conversion cast (unumber) $100*8 in makecharset::$3 = makecharset::charset#4 + $100*8
Adding number conversion cast (unumber) $ff in *makecharset::font1#3 = $ff
Adding number conversion cast (unumber) $40 in makecharset::$5 = makecharset::c#2 < $40
Adding number conversion cast (unumber) 8 in makecharset::$6 = makecharset::i#2 < 8
Adding number conversion cast (unumber) 8 in makecharset::$7 = makecharset::ii#2 < 8
Adding number conversion cast (unumber) $3f in makecharset::$8 = makecharset::bc#1 > $3f
Adding number conversion cast (unumber) 1*8 in makecharset::$14 = makecharset::charset#5 + 1*8
Adding number conversion cast (unumber) 3 in makecharset::$15 = makecharset::$17 << 3
Adding number conversion cast (unumber) $40 in makecharset::$10 = makecharset::bc#4 - $40
Adding number conversion cast (unumber) makecharset::$10 in makecharset::$10 = makecharset::bc#4 - (unumber)$40
Adding number conversion cast (unumber) 1 in makecharset::$11 = makecharset::i#4 & 1
Adding number conversion cast (unumber) makecharset::$11 in makecharset::$11 = makecharset::i#4 & (unumber)1
Adding number conversion cast (unumber) makecharset::$12 in makecharset::$12 = makecharset::ii#4 + makecharset::$11
Adding number conversion cast (unumber) 7 in makecharset::$13 = makecharset::$12 & 7
Adding number conversion cast (unumber) makecharset::$13 in makecharset::$13 = makecharset::$12 & (unumber)7
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast fillscreen::fill#0 = (unumber)0
Inlining cast fillscreen::fill#1 = (unumber)0
Inlining cast fillscreen::fill#2 = (unumber)0
Inlining cast *((word*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) = (unumber)$ffff
Inlining cast *makecharset::font#3 = (unumber)0
Inlining cast *makecharset::font1#3 = (unumber)$ff
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (struct MOS6581_SID*) 54272
Simplifying constant pointer cast (struct MOS6569_VICII*) 53248
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 14336
Simplifying constant pointer cast (byte*) 15360
Simplifying constant pointer cast (byte*) 16384
Simplifying constant pointer cast (byte*) 12288
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ffff
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $28
Simplifying constant integer cast $29
Simplifying constant integer cast 4
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast $10
Simplifying constant integer cast $30
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast $40
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast $3f
Simplifying constant integer cast 3
Simplifying constant integer cast $40
Simplifying constant integer cast 1
Simplifying constant integer cast 7
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $ffff
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $29
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $30
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $3f
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 7
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to word in main::toD0181_$0 = main::toD0181_$7 & $3fff
Inferred type updated to word in main::toD0181_$1 = main::toD0181_$0 * 4
Inferred type updated to byte in main::toD0181_$2 = > main::toD0181_$1
Inferred type updated to byte in main::toD0181_$4 = main::toD0181_$3 / 4
Inferred type updated to byte in main::toD0181_$5 = main::toD0181_$4 & $f
Inferred type updated to byte in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Inferred type updated to word in main::toD0182_$0 = main::toD0182_$7 & $3fff
Inferred type updated to word in main::toD0182_$1 = main::toD0182_$0 * 4
Inferred type updated to byte in main::toD0182_$2 = > main::toD0182_$1
Inferred type updated to byte in main::toD0182_$4 = main::toD0182_$3 / 4
Inferred type updated to byte in main::toD0182_$5 = main::toD0182_$4 & $f
Inferred type updated to byte in main::toD0182_$6 = main::toD0182_$2 | main::toD0182_$5
Inferred type updated to byte in fire::$7 = fire::$6 / 4
Inferred type updated to byte in fire::$13 = fire::$12 / $10
Inferred type updated to byte in fire::$14 = $30 + fire::$13
Inferred type updated to byte in makecharset::$10 = makecharset::bc#4 - $40
Inferred type updated to byte in makecharset::$11 = makecharset::i#4 & 1
Inferred type updated to byte in makecharset::$12 = makecharset::ii#4 + makecharset::$11
Inferred type updated to byte in makecharset::$13 = makecharset::$12 & 7
Inversing boolean not [73] fire::$9 = fire::c#0 <= 2 from [72] fire::$8 = fire::c#0 > 2
Inversing boolean not [145] makecharset::$9 = makecharset::bc#1 <= $3f from [144] makecharset::$8 = makecharset::bc#1 > $3f
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::toD0181_screen#0 = main::toD0181_screen#1 
Alias main::toD0181_gfx#0 = main::toD0181_gfx#1 
Alias main::toD0181_return#0 = main::toD0181_$6 main::toD0181_return#2 main::toD0181_return#1 main::toD0181_return#3 main::$7 
Alias main::toD0182_screen#0 = main::toD0182_screen#1 
Alias main::toD0182_gfx#0 = main::toD0182_gfx#1 
Alias main::toD0182_return#0 = main::toD0182_$6 main::toD0182_return#2 main::toD0182_return#1 main::toD0182_return#3 main::$9 
Alias fire::screen#0 = fire::screenbase#2 
Alias fire::buffer#4 = fire::buffer#5 fire::buffer#9 
Alias fire::screen#6 = fire::screen#9 fire::screen#7 
Alias fire::screenbase#3 = fire::screenbase#6 fire::screenbase#4 fire::screenbase#7 
Alias fire::c#0 = fire::$7 fire::c#3 
Alias fire::screen#1 = fire::$0 
Alias fire::buffer#1 = fire::$1 
Alias fire::buffer#10 = fire::buffer#11 fire::buffer#7 fire::buffer#8 
Alias fire::screen#10 = fire::screen#11 fire::screen#8 fire::screen#5 
Alias fire::sid_rnd1_return#0 = fire::sid_rnd1_return#2 fire::sid_rnd1_return#1 fire::sid_rnd1_return#3 fire::$12 
Alias makecharset::font#0 = makecharset::charset#1 
Alias makecharset::font#2 = makecharset::font#3 
Alias makecharset::charset#2 = makecharset::charset#6 makecharset::charset#3 
Alias makecharset::font1#0 = makecharset::$2 
Alias makecharset::font1#2 = makecharset::font1#3 
Alias makecharset::charset#17 = makecharset::charset#7 makecharset::charset#4 
Alias makecharset::c#2 = makecharset::c#8 
Alias makecharset::charset#14 = makecharset::charset#15 
Alias makecharset::bc#6 = makecharset::bc#8 
Alias makecharset::c#3 = makecharset::c#9 makecharset::c#6 
Alias makecharset::charset#11 = makecharset::charset#9 makecharset::charset#16 
Alias makecharset::i#2 = makecharset::i#7 
Alias makecharset::bc#3 = makecharset::bc#5 makecharset::bc#9 
Alias makecharset::c#11 = makecharset::c#4 makecharset::c#7 makecharset::c#5 
Alias makecharset::ii#2 = makecharset::ii#5 makecharset::ii#4 
Alias makecharset::i#3 = makecharset::i#6 makecharset::i#5 makecharset::i#4 
Alias makecharset::b#2 = makecharset::b#5 makecharset::b#4 makecharset::b#3 
Alias makecharset::charset#12 = makecharset::charset#8 makecharset::charset#5 makecharset::charset#13 
Alias makecharset::bc#1 = makecharset::bc#4 
Alias makecharset::bc#2 = makecharset::$10 
Successful SSA optimization Pass2AliasElimination
Alias fire::buffer#4 = fire::buffer#6 
Alias fire::screen#4 = fire::screen#6 
Alias fire::screenbase#3 = fire::screenbase#5 
Alias makecharset::ii#2 = makecharset::ii#3 
Alias makecharset::c#10 = makecharset::c#11 
Alias makecharset::charset#10 = makecharset::charset#12 
Alias makecharset::i#3 = makecharset::i#8 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values fire::screenbase#3 fire::screen#0
Identical Phi Values makecharset::font#0 makecharset::charset#0
Identical Phi Values makecharset::charset#2 makecharset::font#0
Identical Phi Values makecharset::charset#17 makecharset::charset#2
Identical Phi Values makecharset::c#10 makecharset::c#3
Identical Phi Values makecharset::charset#10 makecharset::charset#11
Identical Phi Values makecharset::i#3 makecharset::i#2
Identical Phi Values fillscreen::fill#4 fillscreen::fill#5
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values makecharset::c#3 makecharset::c#2
Identical Phi Values makecharset::charset#11 makecharset::charset#14
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values makecharset::charset#14 makecharset::charset#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [148] makecharset::$14 = makecharset::charset#0 + (byte)1*8
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition fire::$3 [52] if(fire::buffer#4!=fire::$2) goto fire::@2
Simple Condition fire::$9 [58] if(fire::c#0<=2) goto fire::@4
Simple Condition fire::$11 [70] if(fire::buffer#10!=fire::$10) goto fire::sid_rnd1
Simple Condition makecharset::$1 [83] if(makecharset::font#2!=makecharset::$0) goto makecharset::@2
Simple Condition makecharset::$4 [90] if(makecharset::font1#2!=makecharset::$3) goto makecharset::@5
Simple Condition makecharset::$5 [96] if(makecharset::c#2<$40) goto makecharset::@8
Simple Condition makecharset::$6 [101] if(makecharset::i#2<8) goto makecharset::@10
Simple Condition makecharset::$7 [107] if(makecharset::ii#2<8) goto makecharset::@13
Simple Condition makecharset::$9 [110] if(makecharset::bc#1<=$3f) goto makecharset::@15
Simple Condition fillscreen::$0 [132] if(fillscreen::i#1!=rangelast(0,$3e7)) goto fillscreen::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [50] fire::$2 = BUFFER + (word)$18*$28
Constant right-side identified [60] fire::buffer#1 = BUFFER + (word)$18*$28
Constant right-side identified [68] fire::$10 = BUFFER + (word)$19*$28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant fillscreen::screen#0 = BUFFER
Constant fillscreen::fill#0 = 0
Constant fillscreen::screen#1 = SCREEN1
Constant fillscreen::fill#1 = 0
Constant fillscreen::screen#2 = SCREEN2
Constant fillscreen::fill#2 = 0
Constant fillscreen::screen#3 = COLS
Constant fillscreen::fill#3 = YELLOW
Constant makecharset::charset#0 = CHARSET
Constant fire::screenbase#0 = SCREEN1
Constant main::toD0181_screen#0 = SCREEN1
Constant main::toD0181_gfx#0 = CHARSET
Constant fire::screenbase#1 = SCREEN2
Constant main::toD0182_screen#0 = SCREEN2
Constant main::toD0182_gfx#0 = CHARSET
Constant fire::buffer#0 = BUFFER
Constant fire::$2 = BUFFER+(word)$18*$28
Constant fire::buffer#1 = BUFFER+(word)$18*$28
Constant fire::$10 = BUFFER+(word)$19*$28
Constant makecharset::c#0 = 0
Constant makecharset::bc#0 = 0
Constant makecharset::i#0 = 0
Constant makecharset::b#0 = 0
Constant makecharset::ii#0 = 0
Constant fillscreen::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant main::toD0181_$7 = (word)main::toD0181_screen#0
Constant main::toD0182_$7 = (word)main::toD0182_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)main::toD0181_gfx#0 in [28] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Constant value identified (word)main::toD0182_gfx#0 in [41] main::toD0182_$3 = > (word)main::toD0182_gfx#0
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [19] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [130] fillscreen::i#1 = ++ fillscreen::i#2 to ++
Resolved ranged comparison value [132] if(fillscreen::i#1!=rangelast(0,$3e7)) goto fillscreen::@1 to $3e8
Rewriting conditional comparison [58] if(fire::c#0<=2) goto fire::@4
Rewriting conditional comparison [110] if(makecharset::bc#1<=$3f) goto makecharset::@15
De-inlining pointer[w] to *(pointer+w)   [115] makecharset::$14[makecharset::$16] = makecharset::b#2
Successful SSA optimization Pass2DeInlineWordDerefIdx
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 2+1 in [35] if(fire::c#0<2+1) goto fire::@4
Adding number conversion cast (unumber) 1 in [35] if(fire::c#0<(unumber)2+1) goto fire::@4
Adding number conversion cast (unumber) $3f+1 in [72] if(makecharset::bc#1<$3f+1) goto makecharset::@15
Adding number conversion cast (unumber) 1 in [72] if(makecharset::bc#1<(unumber)$3f+1) goto makecharset::@15
Adding number conversion cast (unumber) $3e8 in [93] if(fillscreen::i#1!=$3e8) goto fillscreen::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 2+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast $3f+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast $3e8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $3e8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias makecharset::$14 = makecharset::$0 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [11] main::toD0181_$0 = main::toD0181_$7 & $3fff
Constant right-side identified [14] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Constant right-side identified [20] main::toD0182_$0 = main::toD0182_$7 & $3fff
Constant right-side identified [23] main::toD0182_$3 = > (word)main::toD0182_gfx#0
Constant right-side identified [54] makecharset::$14 = makecharset::charset#0 + (byte)1*8
Constant right-side identified [58] makecharset::font1#0 = makecharset::charset#0 + (word)$40*8
Constant right-side identified [60] makecharset::$3 = makecharset::charset#0 + (word)$100*8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_$0 = main::toD0181_$7&$3fff
Constant main::toD0181_$3 = >(word)main::toD0181_gfx#0
Constant main::toD0182_$0 = main::toD0182_$7&$3fff
Constant main::toD0182_$3 = >(word)main::toD0182_gfx#0
Constant makecharset::$14 = makecharset::charset#0+(byte)1*8
Constant makecharset::font1#0 = makecharset::charset#0+(word)$40*8
Constant makecharset::$3 = makecharset::charset#0+(word)$100*8
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] main::toD0181_$1 = main::toD0181_$0 * 4
Constant right-side identified [13] main::toD0181_$4 = main::toD0181_$3 / 4
Constant right-side identified [18] main::toD0182_$1 = main::toD0182_$0 * 4
Constant right-side identified [20] main::toD0182_$4 = main::toD0182_$3 / 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_$1 = main::toD0181_$0*4
Constant main::toD0181_$4 = main::toD0181_$3/4
Constant main::toD0182_$1 = main::toD0182_$0*4
Constant main::toD0182_$4 = main::toD0182_$3/4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] main::toD0181_$2 = > main::toD0181_$1
Constant right-side identified [12] main::toD0181_$5 = main::toD0181_$4 & $f
Constant right-side identified [16] main::toD0182_$2 = > main::toD0182_$1
Constant right-side identified [17] main::toD0182_$5 = main::toD0182_$4 & $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_$2 = >main::toD0181_$1
Constant main::toD0181_$5 = main::toD0181_$4&$f
Constant main::toD0182_$2 = >main::toD0182_$1
Constant main::toD0182_$5 = main::toD0182_$4&$f
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] main::toD0181_return#0 = main::toD0181_$2 | main::toD0181_$5
Constant right-side identified [14] main::toD0182_return#0 = main::toD0182_$2 | main::toD0182_$5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_return#0 = main::toD0181_$2|main::toD0181_$5
Constant main::toD0182_return#0 = main::toD0182_$2|main::toD0182_$5
Successful SSA optimization Pass2ConstantIdentification
Rewriting division to use shift [20] fire::c#0 = fire::$6 / 4
Rewriting division to use shift [32] fire::$13 = fire::sid_rnd1_return#0 / $10
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings fire::buffer#0
Inlining constant with var siblings fire::buffer#1
Inlining constant with var siblings makecharset::c#0
Inlining constant with var siblings makecharset::bc#0
Inlining constant with var siblings makecharset::i#0
Inlining constant with var siblings makecharset::b#0
Inlining constant with var siblings makecharset::ii#0
Inlining constant with var siblings makecharset::font1#0
Inlining constant with var siblings fillscreen::screen#0
Inlining constant with var siblings fillscreen::fill#0
Inlining constant with var siblings fillscreen::screen#1
Inlining constant with var siblings fillscreen::fill#1
Inlining constant with var siblings fillscreen::screen#2
Inlining constant with var siblings fillscreen::fill#2
Inlining constant with var siblings fillscreen::screen#3
Inlining constant with var siblings fillscreen::fill#3
Inlining constant with var siblings fillscreen::i#0
Constant inlined fillscreen::fill#2 = 0
Constant inlined main::toD0181_screen#0 = SCREEN1
Constant inlined main::toD0181_gfx#0 = CHARSET
Constant inlined fillscreen::fill#1 = 0
Constant inlined fillscreen::fill#3 = YELLOW
Constant inlined fire::$10 = BUFFER+(word)$19*$28
Constant inlined main::toD0182_$4 = >(word)CHARSET/4
Constant inlined main::toD0182_$5 = >(word)CHARSET/4&$f
Constant inlined main::toD0182_$7 = (word)SCREEN2
Constant inlined main::toD0182_$0 = (word)SCREEN2&$3fff
Constant inlined main::toD0182_$1 = (word)SCREEN2&$3fff*4
Constant inlined makecharset::bc#0 = 0
Constant inlined main::toD0182_$2 = >(word)SCREEN2&$3fff*4
Constant inlined main::toD0182_$3 = >(word)CHARSET
Constant inlined fillscreen::screen#3 = COLS
Constant inlined fillscreen::screen#2 = SCREEN2
Constant inlined fillscreen::screen#1 = SCREEN1
Constant inlined fillscreen::screen#0 = BUFFER
Constant inlined fire::$2 = BUFFER+(word)$18*$28
Constant inlined fire::screenbase#1 = SCREEN2
Constant inlined fire::screenbase#0 = SCREEN1
Constant inlined fillscreen::i#0 = 0
Constant inlined main::toD0181_$7 = (word)SCREEN1
Constant inlined makecharset::$3 = CHARSET+(word)$100*8
Constant inlined main::toD0182_gfx#0 = CHARSET
Constant inlined main::toD0181_$2 = >(word)SCREEN1&$3fff*4
Constant inlined main::toD0181_$1 = (word)SCREEN1&$3fff*4
Constant inlined main::toD0181_$0 = (word)SCREEN1&$3fff
Constant inlined main::toD0181_$5 = >(word)CHARSET/4&$f
Constant inlined main::toD0181_$4 = >(word)CHARSET/4
Constant inlined makecharset::$14 = CHARSET+(byte)1*8
Constant inlined main::toD0181_$3 = >(word)CHARSET
Constant inlined makecharset::ii#0 = 0
Constant inlined makecharset::i#0 = 0
Constant inlined makecharset::font1#0 = CHARSET+(word)$40*8
Constant inlined makecharset::charset#0 = CHARSET
Constant inlined main::toD0182_screen#0 = SCREEN2
Constant inlined makecharset::b#0 = 0
Constant inlined fire::buffer#1 = BUFFER+(word)$18*$28
Constant inlined makecharset::c#0 = 0
Constant inlined fire::buffer#0 = BUFFER
Constant inlined fillscreen::fill#0 = 0
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 8
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying constant integer cast $28-1
Simplifying constant integer cast $28-1
Simplifying constant integer cast 1*8
Simplifying constant integer cast $100*8
Successful SSA optimization PassNCastSimplification
Added new block during phi lifting fire::@8(between fire::@2 and fire::@4)
Added new block during phi lifting makecharset::@17(between makecharset::@13 and makecharset::@15)
Added new block during phi lifting fillscreen::@2(between fillscreen::@1 and fillscreen::@1)
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0181_@return
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::toD0182
Adding NOP phi() at start of main::toD0182_@return
Adding NOP phi() at start of makecharset
Adding NOP phi() at start of makecharset::@3
Adding NOP phi() at start of makecharset::@6
Adding NOP phi() at start of makecharset::@8
Adding NOP phi() at start of fire::sid_rnd1_@return
CALL GRAPH
Calls in [main] to fillscreen:3 fillscreen:5 fillscreen:7 fillscreen:9 makecharset:14 fire:18 fire:23 

Created 20 initial phi equivalence classes
Coalesced [29] fillscreen::screen#7 = fillscreen::screen#6
Coalesced [36] fillscreen::screen#8 = fillscreen::screen#4
Coalesced [37] fillscreen::i#3 = fillscreen::i#1
Coalesced [52] makecharset::c#12 = makecharset::c#1
Coalesced [53] makecharset::bc#11 = makecharset::bc#6
Coalesced [62] makecharset::i#9 = makecharset::i#1
Coalesced (already) [63] makecharset::bc#10 = makecharset::bc#3
Coalesced [71] makecharset::bc#14 = makecharset::bc#2
Coalesced [72] makecharset::b#9 = makecharset::b#1
Coalesced [75] makecharset::ii#6 = makecharset::ii#1
Coalesced [76] makecharset::bc#12 = makecharset::bc#7
Coalesced [77] makecharset::b#7 = makecharset::b#6
Coalesced [78] makecharset::bc#13 = makecharset::bc#1
Coalesced (already) [79] makecharset::b#8 = makecharset::b#2
Coalesced [82] makecharset::font1#4 = makecharset::font1#1
Coalesced [85] makecharset::font#4 = makecharset::font#1
Not coalescing [87] fire::screen#12 = fire::screen#0
Coalesced [91] fire::screen#14 = fire::screen#1
Coalesced [103] fire::buffer#13 = fire::buffer#3
Coalesced [104] fire::screen#15 = fire::screen#3
Coalesced [111] fire::c#5 = fire::c#1
Coalesced [117] fire::buffer#12 = fire::buffer#2
Coalesced [118] fire::screen#13 = fire::screen#2
Coalesced [119] fire::c#4 = fire::c#0
Coalesced down to 16 phi equivalence classes
Culled Empty Block label main::@9
Culled Empty Block label main::@10
Culled Empty Block label main::@1
Culled Empty Block label main::@11
Culled Empty Block label main::toD0181_@return
Culled Empty Block label main::@12
Culled Empty Block label main::toD0182_@return
Culled Empty Block label fillscreen::@2
Culled Empty Block label makecharset::@3
Culled Empty Block label makecharset::@6
Culled Empty Block label makecharset::@8
Culled Empty Block label makecharset::@10
Culled Empty Block label makecharset::@17
Culled Empty Block label fire::sid_rnd1_@return
Culled Empty Block label fire::@8
Renumbering block main::@2 to main::@1
Renumbering block main::@3 to main::@2
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Renumbering block main::@7 to main::@6
Renumbering block main::@8 to main::@7
Renumbering block makecharset::@4 to makecharset::@3
Renumbering block makecharset::@5 to makecharset::@4
Renumbering block makecharset::@7 to makecharset::@5
Renumbering block makecharset::@9 to makecharset::@6
Renumbering block makecharset::@11 to makecharset::@7
Renumbering block makecharset::@12 to makecharset::@8
Renumbering block makecharset::@13 to makecharset::@9
Renumbering block makecharset::@14 to makecharset::@10
Renumbering block makecharset::@15 to makecharset::@11
Renumbering block makecharset::@16 to makecharset::@12
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0182
Adding NOP phi() at start of makecharset

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  asm { sei  }
  [1] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  [2] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLACK
  [3] call fillscreen 
  to:main::@5
main::@5: scope:[main]  from main
  [4] phi()
  [5] call fillscreen 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [6] phi()
  [7] call fillscreen 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [8] phi()
  [9] call fillscreen 
  to:main::sid_rnd_init1
main::sid_rnd_init1: scope:[main]  from main::@7
  [10] *((word*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) = $ffff
  [11] *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) = SID_CONTROL_NOISE
  to:main::@2
main::@2: scope:[main]  from main::sid_rnd_init1
  [12] phi()
  [13] call makecharset 
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@4
  [14] phi()
  [15] call fire 
  to:main::toD0181
main::toD0181: scope:[main]  from main::@1
  [16] phi()
  to:main::@3
main::@3: scope:[main]  from main::toD0181
  [17] *D018 = main::toD0181_return#0
  [18] call fire 
  to:main::toD0182
main::toD0182: scope:[main]  from main::@3
  [19] phi()
  to:main::@4
main::@4: scope:[main]  from main::toD0182
  [20] *D018 = main::toD0182_return#0
  to:main::@1

void fillscreen(byte* fillscreen::screen , byte fillscreen::fill)
fillscreen: scope:[fillscreen]  from main main::@5 main::@6 main::@7
  [21] fillscreen::screen#6 = phi( main/BUFFER, main::@5/SCREEN1, main::@6/SCREEN2, main::@7/COLS )
  [21] fillscreen::fill#5 = phi( main/0, main::@5/0, main::@6/0, main::@7/YELLOW )
  to:fillscreen::@1
fillscreen::@1: scope:[fillscreen]  from fillscreen fillscreen::@1
  [22] fillscreen::i#2 = phi( fillscreen/0, fillscreen::@1/fillscreen::i#1 )
  [22] fillscreen::screen#5 = phi( fillscreen/fillscreen::screen#6, fillscreen::@1/fillscreen::screen#4 )
  [23] *fillscreen::screen#5 = fillscreen::fill#5
  [24] fillscreen::screen#4 = ++ fillscreen::screen#5
  [25] fillscreen::i#1 = ++ fillscreen::i#2
  [26] if(fillscreen::i#1!=$3e8) goto fillscreen::@1
  to:fillscreen::@return
fillscreen::@return: scope:[fillscreen]  from fillscreen::@1
  [27] return 
  to:@return

void makecharset(byte* makecharset::charset)
makecharset: scope:[makecharset]  from main::@2
  [28] phi()
  to:makecharset::@1
makecharset::@1: scope:[makecharset]  from makecharset makecharset::@2
  [29] makecharset::font#2 = phi( makecharset/CHARSET, makecharset::@2/makecharset::font#1 )
  [30] if(makecharset::font#2!=CHARSET+1*8) goto makecharset::@2
  to:makecharset::@3
makecharset::@3: scope:[makecharset]  from makecharset::@1 makecharset::@4
  [31] makecharset::font1#2 = phi( makecharset::@1/CHARSET+(word)$40*8, makecharset::@4/makecharset::font1#1 )
  [32] if(makecharset::font1#2!=CHARSET+$100*8) goto makecharset::@4
  to:makecharset::@5
makecharset::@5: scope:[makecharset]  from makecharset::@3 makecharset::@7
  [33] makecharset::c#2 = phi( makecharset::@7/makecharset::c#1, makecharset::@3/0 )
  [34] if(makecharset::c#2<$40) goto makecharset::@6
  to:makecharset::@return
makecharset::@return: scope:[makecharset]  from makecharset::@5
  [35] return 
  to:@return
makecharset::@6: scope:[makecharset]  from makecharset::@10 makecharset::@5
  [36] makecharset::bc#6 = phi( makecharset::@10/makecharset::bc#3, makecharset::@5/0 )
  [36] makecharset::i#2 = phi( makecharset::@10/makecharset::i#1, makecharset::@5/0 )
  [37] if(makecharset::i#2<8) goto makecharset::@8
  to:makecharset::@7
makecharset::@7: scope:[makecharset]  from makecharset::@6
  [38] makecharset::c#1 = ++ makecharset::c#2
  to:makecharset::@5
makecharset::@8: scope:[makecharset]  from makecharset::@11 makecharset::@6
  [39] makecharset::b#2 = phi( makecharset::@6/0, makecharset::@11/makecharset::b#6 )
  [39] makecharset::bc#3 = phi( makecharset::@6/makecharset::bc#6, makecharset::@11/makecharset::bc#7 )
  [39] makecharset::ii#2 = phi( makecharset::@6/0, makecharset::@11/makecharset::ii#1 )
  [40] if(makecharset::ii#2<8) goto makecharset::@9
  to:makecharset::@10
makecharset::@10: scope:[makecharset]  from makecharset::@8
  [41] makecharset::$17 = (word)makecharset::c#2
  [42] makecharset::$15 = makecharset::$17 << 3
  [43] makecharset::$16 = makecharset::$15 + makecharset::i#2
  [44] makecharset::$18 = CHARSET+1*8 + makecharset::$16
  [45] *makecharset::$18 = makecharset::b#2
  [46] makecharset::i#1 = ++ makecharset::i#2
  to:makecharset::@6
makecharset::@9: scope:[makecharset]  from makecharset::@8
  [47] makecharset::bc#1 = makecharset::bc#3 + makecharset::c#2
  [48] if(makecharset::bc#1<$3f+1) goto makecharset::@11
  to:makecharset::@12
makecharset::@12: scope:[makecharset]  from makecharset::@9
  [49] makecharset::bc#2 = makecharset::bc#1 - $40
  [50] makecharset::$11 = makecharset::i#2 & 1
  [51] makecharset::$12 = makecharset::ii#2 + makecharset::$11
  [52] makecharset::$13 = makecharset::$12 & 7
  [53] makecharset::b#1 = makecharset::b#2 + makecharset::bittab[makecharset::$13]
  to:makecharset::@11
makecharset::@11: scope:[makecharset]  from makecharset::@12 makecharset::@9
  [54] makecharset::b#6 = phi( makecharset::@9/makecharset::b#2, makecharset::@12/makecharset::b#1 )
  [54] makecharset::bc#7 = phi( makecharset::@9/makecharset::bc#1, makecharset::@12/makecharset::bc#2 )
  [55] makecharset::ii#1 = ++ makecharset::ii#2
  to:makecharset::@8
makecharset::@4: scope:[makecharset]  from makecharset::@3
  [56] *makecharset::font1#2 = $ff
  [57] makecharset::font1#1 = ++ makecharset::font1#2
  to:makecharset::@3
makecharset::@2: scope:[makecharset]  from makecharset::@1
  [58] *makecharset::font#2 = 0
  [59] makecharset::font#1 = ++ makecharset::font#2
  to:makecharset::@1

void fire(byte* fire::screenbase)
fire: scope:[fire]  from main::@1 main::@3
  [60] fire::screen#0 = phi( main::@1/SCREEN1, main::@3/SCREEN2 )
  [61] fire::screen#12 = fire::screen#0
  to:fire::@1
fire::@1: scope:[fire]  from fire fire::@4
  [62] fire::screen#4 = phi( fire/fire::screen#12, fire::@4/fire::screen#2 )
  [62] fire::buffer#4 = phi( fire/BUFFER, fire::@4/fire::buffer#2 )
  [63] if(fire::buffer#4!=BUFFER+(word)$18*$28) goto fire::@2
  to:fire::@3
fire::@3: scope:[fire]  from fire::@1
  [64] fire::screen#1 = fire::screen#0 + (word)$18*$28
  to:fire::@6
fire::@6: scope:[fire]  from fire::@3 fire::@7
  [65] fire::screen#10 = phi( fire::@3/fire::screen#1, fire::@7/fire::screen#3 )
  [65] fire::buffer#10 = phi( fire::@3/BUFFER+(word)$18*$28, fire::@7/fire::buffer#3 )
  [66] if(fire::buffer#10!=BUFFER+(word)$19*$28) goto fire::sid_rnd1
  to:fire::@return
fire::@return: scope:[fire]  from fire::@6
  [67] return 
  to:@return
fire::sid_rnd1: scope:[fire]  from fire::@6
  [68] fire::sid_rnd1_return#0 = *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC)
  to:fire::@7
fire::@7: scope:[fire]  from fire::sid_rnd1
  [69] fire::$13 = fire::sid_rnd1_return#0 >> 4
  [70] fire::$14 = $30 + fire::$13
  [71] *fire::buffer#10 = fire::$14
  [72] *fire::screen#10 = *fire::buffer#10
  [73] fire::screen#3 = ++ fire::screen#10
  [74] fire::buffer#3 = ++ fire::buffer#10
  to:fire::@6
fire::@2: scope:[fire]  from fire::@1
  [75] fire::$4 = fire::buffer#4[$28-1] + fire::buffer#4[$28-1]
  [76] fire::$5 = fire::$4 + fire::buffer#4[$28]
  [77] fire::$6 = fire::$5 + fire::buffer#4[$29]
  [78] fire::c#0 = fire::$6 >> 2
  [79] if(fire::c#0<2+1) goto fire::@4
  to:fire::@5
fire::@5: scope:[fire]  from fire::@2
  [80] fire::c#1 = fire::c#0 - 3
  to:fire::@4
fire::@4: scope:[fire]  from fire::@2 fire::@5
  [81] fire::c#2 = phi( fire::@2/fire::c#0, fire::@5/fire::c#1 )
  [82] *fire::buffer#4 = fire::c#2
  [83] *fire::screen#4 = *fire::buffer#4
  [84] fire::screen#2 = ++ fire::screen#4
  [85] fire::buffer#2 = ++ fire::buffer#4
  to:fire::@1


VARIABLE REGISTER WEIGHTS
void fillscreen(byte* fillscreen::screen , byte fillscreen::fill)
byte fillscreen::fill
byte fillscreen::fill#5 16.833333333333332
word fillscreen::i
word fillscreen::i#1 151.5
word fillscreen::i#2 67.33333333333333
byte* fillscreen::screen
byte* fillscreen::screen#4 67.33333333333333
byte* fillscreen::screen#5 157.0
byte* fillscreen::screen#6 11.0
void fire(byte* fire::screenbase)
byte~ fire::$13 20002.0
byte~ fire::$14 20002.0
byte~ fire::$4 20002.0
byte~ fire::$5 20002.0
byte~ fire::$6 20002.0
byte* fire::buffer
byte* fire::buffer#10 6250.625
byte* fire::buffer#2 20002.0
byte* fire::buffer#3 20002.0
byte* fire::buffer#4 7500.750000000001
byte fire::c
byte fire::c#0 20002.0
byte fire::c#1 20002.0
byte fire::c#2 30003.0
byte* fire::screen
byte* fire::screen#0 13.466666666666667
byte* fire::screen#1 202.0
byte* fire::screen#10 4300.571428571429
byte* fire::screen#12 202.0
byte* fire::screen#2 10001.0
byte* fire::screen#3 10001.0
byte* fire::screen#4 2736.7272727272725
byte* fire::screenbase
byte fire::sid_rnd1_return
byte fire::sid_rnd1_return#0 20002.0
void main()
byte* main::toD0181_gfx
byte main::toD0181_return
byte* main::toD0181_screen
byte* main::toD0182_gfx
byte main::toD0182_return
byte* main::toD0182_screen
void makecharset(byte* makecharset::charset)
byte~ makecharset::$11 20002.0
byte~ makecharset::$12 20002.0
byte~ makecharset::$13 20002.0
word~ makecharset::$15 2002.0
word~ makecharset::$16 2002.0
word~ makecharset::$17 2002.0
byte*~ makecharset::$18 2002.0
byte makecharset::b
byte makecharset::b#1 20002.0
byte makecharset::b#2 2583.6666666666665
byte makecharset::b#6 15001.5
byte makecharset::bc
byte makecharset::bc#1 20002.0
byte makecharset::bc#2 4000.4
byte makecharset::bc#3 2750.5
byte makecharset::bc#6 1001.0
byte makecharset::bc#7 15001.5
byte makecharset::c
byte makecharset::c#1 202.0
byte makecharset::c#2 490.6666666666667
byte* makecharset::charset
byte* makecharset::font
byte* makecharset::font#1 202.0
byte* makecharset::font#2 134.66666666666666
byte* makecharset::font1
byte* makecharset::font1#1 202.0
byte* makecharset::font1#2 134.66666666666666
byte makecharset::i
byte makecharset::i#1 2002.0
byte makecharset::i#2 778.0555555555555
byte makecharset::ii
byte makecharset::ii#1 20002.0
byte makecharset::ii#2 4000.4

Initial phi equivalence classes
[ fillscreen::fill#5 ]
[ fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 ]
[ fillscreen::i#2 fillscreen::i#1 ]
[ makecharset::font#2 makecharset::font#1 ]
[ makecharset::font1#2 makecharset::font1#1 ]
[ makecharset::c#2 makecharset::c#1 ]
[ makecharset::i#2 makecharset::i#1 ]
[ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ]
[ makecharset::ii#2 makecharset::ii#1 ]
[ makecharset::b#2 makecharset::b#6 makecharset::b#1 ]
[ fire::screen#0 ]
[ fire::buffer#4 fire::buffer#2 ]
[ fire::screen#4 fire::screen#12 fire::screen#2 ]
[ fire::buffer#10 fire::buffer#3 ]
[ fire::screen#10 fire::screen#1 fire::screen#3 ]
[ fire::c#2 fire::c#0 fire::c#1 ]
Added variable makecharset::$17 to live range equivalence class [ makecharset::$17 ]
Added variable makecharset::$15 to live range equivalence class [ makecharset::$15 ]
Added variable makecharset::$16 to live range equivalence class [ makecharset::$16 ]
Added variable makecharset::$18 to live range equivalence class [ makecharset::$18 ]
Added variable makecharset::$11 to live range equivalence class [ makecharset::$11 ]
Added variable makecharset::$12 to live range equivalence class [ makecharset::$12 ]
Added variable makecharset::$13 to live range equivalence class [ makecharset::$13 ]
Added variable fire::sid_rnd1_return#0 to live range equivalence class [ fire::sid_rnd1_return#0 ]
Added variable fire::$13 to live range equivalence class [ fire::$13 ]
Added variable fire::$14 to live range equivalence class [ fire::$14 ]
Added variable fire::$4 to live range equivalence class [ fire::$4 ]
Added variable fire::$5 to live range equivalence class [ fire::$5 ]
Added variable fire::$6 to live range equivalence class [ fire::$6 ]
Complete equivalence classes
[ fillscreen::fill#5 ]
[ fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 ]
[ fillscreen::i#2 fillscreen::i#1 ]
[ makecharset::font#2 makecharset::font#1 ]
[ makecharset::font1#2 makecharset::font1#1 ]
[ makecharset::c#2 makecharset::c#1 ]
[ makecharset::i#2 makecharset::i#1 ]
[ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ]
[ makecharset::ii#2 makecharset::ii#1 ]
[ makecharset::b#2 makecharset::b#6 makecharset::b#1 ]
[ fire::screen#0 ]
[ fire::buffer#4 fire::buffer#2 ]
[ fire::screen#4 fire::screen#12 fire::screen#2 ]
[ fire::buffer#10 fire::buffer#3 ]
[ fire::screen#10 fire::screen#1 fire::screen#3 ]
[ fire::c#2 fire::c#0 fire::c#1 ]
[ makecharset::$17 ]
[ makecharset::$15 ]
[ makecharset::$16 ]
[ makecharset::$18 ]
[ makecharset::$11 ]
[ makecharset::$12 ]
[ makecharset::$13 ]
[ fire::sid_rnd1_return#0 ]
[ fire::$13 ]
[ fire::$14 ]
[ fire::$4 ]
[ fire::$5 ]
[ fire::$6 ]
Allocated zp[1]:2 [ fillscreen::fill#5 ]
Allocated zp[2]:3 [ fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 ]
Allocated zp[2]:5 [ fillscreen::i#2 fillscreen::i#1 ]
Allocated zp[2]:7 [ makecharset::font#2 makecharset::font#1 ]
Allocated zp[2]:9 [ makecharset::font1#2 makecharset::font1#1 ]
Allocated zp[1]:11 [ makecharset::c#2 makecharset::c#1 ]
Allocated zp[1]:12 [ makecharset::i#2 makecharset::i#1 ]
Allocated zp[1]:13 [ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ]
Allocated zp[1]:14 [ makecharset::ii#2 makecharset::ii#1 ]
Allocated zp[1]:15 [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ]
Allocated zp[2]:16 [ fire::screen#0 ]
Allocated zp[2]:18 [ fire::buffer#4 fire::buffer#2 ]
Allocated zp[2]:20 [ fire::screen#4 fire::screen#12 fire::screen#2 ]
Allocated zp[2]:22 [ fire::buffer#10 fire::buffer#3 ]
Allocated zp[2]:24 [ fire::screen#10 fire::screen#1 fire::screen#3 ]
Allocated zp[1]:26 [ fire::c#2 fire::c#0 fire::c#1 ]
Allocated zp[2]:27 [ makecharset::$17 ]
Allocated zp[2]:29 [ makecharset::$15 ]
Allocated zp[2]:31 [ makecharset::$16 ]
Allocated zp[2]:33 [ makecharset::$18 ]
Allocated zp[1]:35 [ makecharset::$11 ]
Allocated zp[1]:36 [ makecharset::$12 ]
Allocated zp[1]:37 [ makecharset::$13 ]
Allocated zp[1]:38 [ fire::sid_rnd1_return#0 ]
Allocated zp[1]:39 [ fire::$13 ]
Allocated zp[1]:40 [ fire::$14 ]
Allocated zp[1]:41 [ fire::$4 ]
Allocated zp[1]:42 [ fire::$5 ]
Allocated zp[1]:43 [ fire::$6 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLACK [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [10] *((word*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) = $ffff [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [11] *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) = SID_CONTROL_NOISE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [17] *D018 = main::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [20] *D018 = main::toD0182_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [23] *fillscreen::screen#5 = fillscreen::fill#5 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] ( fillscreen:3 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] { }  fillscreen:5 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] { }  fillscreen:7 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] { }  fillscreen:9 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ fillscreen::fill#5 ]
Statement [26] if(fillscreen::i#1!=$3e8) goto fillscreen::@1 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] ( fillscreen:3 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] { }  fillscreen:5 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] { }  fillscreen:7 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] { }  fillscreen:9 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ fillscreen::fill#5 ]
Statement [30] if(makecharset::font#2!=CHARSET+1*8) goto makecharset::@2 [ makecharset::font#2 ] ( makecharset:13 [ makecharset::font#2 ] { }  ) always clobbers reg byte a 
Statement [32] if(makecharset::font1#2!=CHARSET+$100*8) goto makecharset::@4 [ makecharset::font1#2 ] ( makecharset:13 [ makecharset::font1#2 ] { }  ) always clobbers reg byte a 
Statement [41] makecharset::$17 = (word)makecharset::c#2 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$17 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$17 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:11 [ makecharset::c#2 makecharset::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:12 [ makecharset::i#2 makecharset::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:13 [ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:15 [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ]
Statement [42] makecharset::$15 = makecharset::$17 << 3 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$15 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$15 ] { }  ) always clobbers reg byte a 
Statement [43] makecharset::$16 = makecharset::$15 + makecharset::i#2 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$16 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$16 ] { }  ) always clobbers reg byte a 
Statement [44] makecharset::$18 = CHARSET+1*8 + makecharset::$16 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$18 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$18 ] { }  ) always clobbers reg byte a 
Statement [45] *makecharset::$18 = makecharset::b#2 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:11 [ makecharset::c#2 makecharset::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:12 [ makecharset::i#2 makecharset::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:13 [ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ]
Statement [47] makecharset::bc#1 = makecharset::bc#3 + makecharset::c#2 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#1 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:14 [ makecharset::ii#2 makecharset::ii#1 ]
Statement [49] makecharset::bc#2 = makecharset::bc#1 - $40 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:11 [ makecharset::c#2 makecharset::c#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:12 [ makecharset::i#2 makecharset::i#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:14 [ makecharset::ii#2 makecharset::ii#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:15 [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ]
Statement [50] makecharset::$11 = makecharset::i#2 & 1 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 makecharset::$11 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 makecharset::$11 ] { }  ) always clobbers reg byte a 
Statement [51] makecharset::$12 = makecharset::ii#2 + makecharset::$11 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 makecharset::$12 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 makecharset::$12 ] { }  ) always clobbers reg byte a 
Statement [53] makecharset::b#1 = makecharset::b#2 + makecharset::bittab[makecharset::$13] [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::bc#2 makecharset::b#1 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::bc#2 makecharset::b#1 ] { }  ) always clobbers reg byte a 
Statement [56] *makecharset::font1#2 = $ff [ makecharset::font1#2 ] ( makecharset:13 [ makecharset::font1#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [58] *makecharset::font#2 = 0 [ makecharset::font#2 ] ( makecharset:13 [ makecharset::font#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [61] fire::screen#12 = fire::screen#0 [ fire::screen#0 fire::screen#12 ] ( fire:15 [ fire::screen#0 fire::screen#12 ] { }  fire:18 [ fire::screen#0 fire::screen#12 ] { }  ) always clobbers reg byte a 
Statement [63] if(fire::buffer#4!=BUFFER+(word)$18*$28) goto fire::@2 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] ( fire:15 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  fire:18 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  ) always clobbers reg byte a 
Statement [64] fire::screen#1 = fire::screen#0 + (word)$18*$28 [ fire::screen#1 ] ( fire:15 [ fire::screen#1 ] { }  fire:18 [ fire::screen#1 ] { }  ) always clobbers reg byte a 
Statement [66] if(fire::buffer#10!=BUFFER+(word)$19*$28) goto fire::sid_rnd1 [ fire::buffer#10 fire::screen#10 ] ( fire:15 [ fire::buffer#10 fire::screen#10 ] { }  fire:18 [ fire::buffer#10 fire::screen#10 ] { }  ) always clobbers reg byte a 
Statement [69] fire::$13 = fire::sid_rnd1_return#0 >> 4 [ fire::buffer#10 fire::screen#10 fire::$13 ] ( fire:15 [ fire::buffer#10 fire::screen#10 fire::$13 ] { }  fire:18 [ fire::buffer#10 fire::screen#10 fire::$13 ] { }  ) always clobbers reg byte a 
Statement [71] *fire::buffer#10 = fire::$14 [ fire::buffer#10 fire::screen#10 ] ( fire:15 [ fire::buffer#10 fire::screen#10 ] { }  fire:18 [ fire::buffer#10 fire::screen#10 ] { }  ) always clobbers reg byte y 
Statement [72] *fire::screen#10 = *fire::buffer#10 [ fire::buffer#10 fire::screen#10 ] ( fire:15 [ fire::buffer#10 fire::screen#10 ] { }  fire:18 [ fire::buffer#10 fire::screen#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [75] fire::$4 = fire::buffer#4[$28-1] + fire::buffer#4[$28-1] [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$4 ] ( fire:15 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$4 ] { }  fire:18 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [76] fire::$5 = fire::$4 + fire::buffer#4[$28] [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$5 ] ( fire:15 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$5 ] { }  fire:18 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$5 ] { }  ) always clobbers reg byte a reg byte y 
Statement [77] fire::$6 = fire::$5 + fire::buffer#4[$29] [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$6 ] ( fire:15 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$6 ] { }  fire:18 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$6 ] { }  ) always clobbers reg byte a reg byte y 
Statement [78] fire::c#0 = fire::$6 >> 2 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#0 ] ( fire:15 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#0 ] { }  fire:18 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#0 ] { }  ) always clobbers reg byte a 
Statement [80] fire::c#1 = fire::c#0 - 3 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#1 ] ( fire:15 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#1 ] { }  fire:18 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#1 ] { }  ) always clobbers reg byte a 
Statement [82] *fire::buffer#4 = fire::c#2 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] ( fire:15 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  fire:18 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  ) always clobbers reg byte y 
Statement [83] *fire::screen#4 = *fire::buffer#4 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] ( fire:15 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  fire:18 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [1] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLACK [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [10] *((word*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) = $ffff [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [11] *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) = SID_CONTROL_NOISE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [17] *D018 = main::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [20] *D018 = main::toD0182_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [23] *fillscreen::screen#5 = fillscreen::fill#5 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] ( fillscreen:3 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] { }  fillscreen:5 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] { }  fillscreen:7 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] { }  fillscreen:9 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [26] if(fillscreen::i#1!=$3e8) goto fillscreen::@1 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] ( fillscreen:3 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] { }  fillscreen:5 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] { }  fillscreen:7 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] { }  fillscreen:9 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] { }  ) always clobbers reg byte a 
Statement [30] if(makecharset::font#2!=CHARSET+1*8) goto makecharset::@2 [ makecharset::font#2 ] ( makecharset:13 [ makecharset::font#2 ] { }  ) always clobbers reg byte a 
Statement [32] if(makecharset::font1#2!=CHARSET+$100*8) goto makecharset::@4 [ makecharset::font1#2 ] ( makecharset:13 [ makecharset::font1#2 ] { }  ) always clobbers reg byte a 
Statement [34] if(makecharset::c#2<$40) goto makecharset::@6 [ makecharset::c#2 ] ( makecharset:13 [ makecharset::c#2 ] { }  ) always clobbers reg byte a 
Statement [37] if(makecharset::i#2<8) goto makecharset::@8 [ makecharset::c#2 makecharset::i#2 makecharset::bc#6 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::bc#6 ] { }  ) always clobbers reg byte a 
Statement [41] makecharset::$17 = (word)makecharset::c#2 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$17 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$17 ] { }  ) always clobbers reg byte a 
Statement [42] makecharset::$15 = makecharset::$17 << 3 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$15 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$15 ] { }  ) always clobbers reg byte a 
Statement [43] makecharset::$16 = makecharset::$15 + makecharset::i#2 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$16 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$16 ] { }  ) always clobbers reg byte a 
Statement [44] makecharset::$18 = CHARSET+1*8 + makecharset::$16 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$18 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$18 ] { }  ) always clobbers reg byte a 
Statement [45] *makecharset::$18 = makecharset::b#2 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 ] { }  ) always clobbers reg byte a reg byte y 
Statement [47] makecharset::bc#1 = makecharset::bc#3 + makecharset::c#2 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#1 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#1 ] { }  ) always clobbers reg byte a 
Statement [49] makecharset::bc#2 = makecharset::bc#1 - $40 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 ] { }  ) always clobbers reg byte a reg byte x 
Statement [50] makecharset::$11 = makecharset::i#2 & 1 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 makecharset::$11 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 makecharset::$11 ] { }  ) always clobbers reg byte a 
Statement [51] makecharset::$12 = makecharset::ii#2 + makecharset::$11 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 makecharset::$12 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 makecharset::$12 ] { }  ) always clobbers reg byte a 
Statement [53] makecharset::b#1 = makecharset::b#2 + makecharset::bittab[makecharset::$13] [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::bc#2 makecharset::b#1 ] ( makecharset:13 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::bc#2 makecharset::b#1 ] { }  ) always clobbers reg byte a 
Statement [56] *makecharset::font1#2 = $ff [ makecharset::font1#2 ] ( makecharset:13 [ makecharset::font1#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [58] *makecharset::font#2 = 0 [ makecharset::font#2 ] ( makecharset:13 [ makecharset::font#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [61] fire::screen#12 = fire::screen#0 [ fire::screen#0 fire::screen#12 ] ( fire:15 [ fire::screen#0 fire::screen#12 ] { }  fire:18 [ fire::screen#0 fire::screen#12 ] { }  ) always clobbers reg byte a 
Statement [63] if(fire::buffer#4!=BUFFER+(word)$18*$28) goto fire::@2 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] ( fire:15 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  fire:18 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  ) always clobbers reg byte a 
Statement [64] fire::screen#1 = fire::screen#0 + (word)$18*$28 [ fire::screen#1 ] ( fire:15 [ fire::screen#1 ] { }  fire:18 [ fire::screen#1 ] { }  ) always clobbers reg byte a 
Statement [66] if(fire::buffer#10!=BUFFER+(word)$19*$28) goto fire::sid_rnd1 [ fire::buffer#10 fire::screen#10 ] ( fire:15 [ fire::buffer#10 fire::screen#10 ] { }  fire:18 [ fire::buffer#10 fire::screen#10 ] { }  ) always clobbers reg byte a 
Statement [69] fire::$13 = fire::sid_rnd1_return#0 >> 4 [ fire::buffer#10 fire::screen#10 fire::$13 ] ( fire:15 [ fire::buffer#10 fire::screen#10 fire::$13 ] { }  fire:18 [ fire::buffer#10 fire::screen#10 fire::$13 ] { }  ) always clobbers reg byte a 
Statement [71] *fire::buffer#10 = fire::$14 [ fire::buffer#10 fire::screen#10 ] ( fire:15 [ fire::buffer#10 fire::screen#10 ] { }  fire:18 [ fire::buffer#10 fire::screen#10 ] { }  ) always clobbers reg byte y 
Statement [72] *fire::screen#10 = *fire::buffer#10 [ fire::buffer#10 fire::screen#10 ] ( fire:15 [ fire::buffer#10 fire::screen#10 ] { }  fire:18 [ fire::buffer#10 fire::screen#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [75] fire::$4 = fire::buffer#4[$28-1] + fire::buffer#4[$28-1] [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$4 ] ( fire:15 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$4 ] { }  fire:18 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [76] fire::$5 = fire::$4 + fire::buffer#4[$28] [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$5 ] ( fire:15 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$5 ] { }  fire:18 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$5 ] { }  ) always clobbers reg byte a reg byte y 
Statement [77] fire::$6 = fire::$5 + fire::buffer#4[$29] [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$6 ] ( fire:15 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$6 ] { }  fire:18 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$6 ] { }  ) always clobbers reg byte a reg byte y 
Statement [78] fire::c#0 = fire::$6 >> 2 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#0 ] ( fire:15 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#0 ] { }  fire:18 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#0 ] { }  ) always clobbers reg byte a 
Statement [80] fire::c#1 = fire::c#0 - 3 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#1 ] ( fire:15 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#1 ] { }  fire:18 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#1 ] { }  ) always clobbers reg byte a 
Statement [82] *fire::buffer#4 = fire::c#2 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] ( fire:15 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  fire:18 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  ) always clobbers reg byte y 
Statement [83] *fire::screen#4 = *fire::buffer#4 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] ( fire:15 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  fire:18 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ fillscreen::fill#5 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 ] : zp[2]:3 , 
Potential registers zp[2]:5 [ fillscreen::i#2 fillscreen::i#1 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ makecharset::font#2 makecharset::font#1 ] : zp[2]:7 , 
Potential registers zp[2]:9 [ makecharset::font1#2 makecharset::font1#1 ] : zp[2]:9 , 
Potential registers zp[1]:11 [ makecharset::c#2 makecharset::c#1 ] : zp[1]:11 , 
Potential registers zp[1]:12 [ makecharset::i#2 makecharset::i#1 ] : zp[1]:12 , 
Potential registers zp[1]:13 [ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ] : zp[1]:13 , reg byte x , 
Potential registers zp[1]:14 [ makecharset::ii#2 makecharset::ii#1 ] : zp[1]:14 , reg byte y , 
Potential registers zp[1]:15 [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ] : zp[1]:15 , reg byte y , 
Potential registers zp[2]:16 [ fire::screen#0 ] : zp[2]:16 , 
Potential registers zp[2]:18 [ fire::buffer#4 fire::buffer#2 ] : zp[2]:18 , 
Potential registers zp[2]:20 [ fire::screen#4 fire::screen#12 fire::screen#2 ] : zp[2]:20 , 
Potential registers zp[2]:22 [ fire::buffer#10 fire::buffer#3 ] : zp[2]:22 , 
Potential registers zp[2]:24 [ fire::screen#10 fire::screen#1 fire::screen#3 ] : zp[2]:24 , 
Potential registers zp[1]:26 [ fire::c#2 fire::c#0 fire::c#1 ] : zp[1]:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:27 [ makecharset::$17 ] : zp[2]:27 , 
Potential registers zp[2]:29 [ makecharset::$15 ] : zp[2]:29 , 
Potential registers zp[2]:31 [ makecharset::$16 ] : zp[2]:31 , 
Potential registers zp[2]:33 [ makecharset::$18 ] : zp[2]:33 , 
Potential registers zp[1]:35 [ makecharset::$11 ] : zp[1]:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:36 [ makecharset::$12 ] : zp[1]:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ makecharset::$13 ] : zp[1]:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:38 [ fire::sid_rnd1_return#0 ] : zp[1]:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:39 [ fire::$13 ] : zp[1]:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:40 [ fire::$14 ] : zp[1]:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:41 [ fire::$4 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:42 [ fire::$5 ] : zp[1]:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:43 [ fire::$6 ] : zp[1]:43 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [fire] 70,007: zp[1]:26 [ fire::c#2 fire::c#0 fire::c#1 ] 27,502.75: zp[2]:18 [ fire::buffer#4 fire::buffer#2 ] 26,252.62: zp[2]:22 [ fire::buffer#10 fire::buffer#3 ] 20,002: zp[1]:38 [ fire::sid_rnd1_return#0 ] 20,002: zp[1]:39 [ fire::$13 ] 20,002: zp[1]:40 [ fire::$14 ] 20,002: zp[1]:41 [ fire::$4 ] 20,002: zp[1]:42 [ fire::$5 ] 20,002: zp[1]:43 [ fire::$6 ] 14,503.57: zp[2]:24 [ fire::screen#10 fire::screen#1 fire::screen#3 ] 12,939.73: zp[2]:20 [ fire::screen#4 fire::screen#12 fire::screen#2 ] 13.47: zp[2]:16 [ fire::screen#0 ] 
Uplift Scope [makecharset] 42,755.4: zp[1]:13 [ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ] 37,587.17: zp[1]:15 [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ] 24,002.4: zp[1]:14 [ makecharset::ii#2 makecharset::ii#1 ] 20,002: zp[1]:35 [ makecharset::$11 ] 20,002: zp[1]:36 [ makecharset::$12 ] 20,002: zp[1]:37 [ makecharset::$13 ] 2,780.06: zp[1]:12 [ makecharset::i#2 makecharset::i#1 ] 2,002: zp[2]:27 [ makecharset::$17 ] 2,002: zp[2]:29 [ makecharset::$15 ] 2,002: zp[2]:31 [ makecharset::$16 ] 2,002: zp[2]:33 [ makecharset::$18 ] 692.67: zp[1]:11 [ makecharset::c#2 makecharset::c#1 ] 336.67: zp[2]:7 [ makecharset::font#2 makecharset::font#1 ] 336.67: zp[2]:9 [ makecharset::font1#2 makecharset::font1#1 ] 
Uplift Scope [fillscreen] 235.33: zp[2]:3 [ fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 ] 218.83: zp[2]:5 [ fillscreen::i#2 fillscreen::i#1 ] 16.83: zp[1]:2 [ fillscreen::fill#5 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [fire] best 147152 combination reg byte a [ fire::c#2 fire::c#0 fire::c#1 ] zp[2]:18 [ fire::buffer#4 fire::buffer#2 ] zp[2]:22 [ fire::buffer#10 fire::buffer#3 ] reg byte a [ fire::sid_rnd1_return#0 ] reg byte a [ fire::$13 ] reg byte a [ fire::$14 ] zp[1]:41 [ fire::$4 ] zp[1]:42 [ fire::$5 ] zp[1]:43 [ fire::$6 ] zp[2]:24 [ fire::screen#10 fire::screen#1 fire::screen#3 ] zp[2]:20 [ fire::screen#4 fire::screen#12 fire::screen#2 ] zp[2]:16 [ fire::screen#0 ] 
Limited combination testing to 100 combinations of 16384 possible.
Uplifting [makecharset] best 120752 combination reg byte x [ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ] reg byte y [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ] zp[1]:14 [ makecharset::ii#2 makecharset::ii#1 ] reg byte a [ makecharset::$11 ] reg byte a [ makecharset::$12 ] zp[1]:37 [ makecharset::$13 ] zp[1]:12 [ makecharset::i#2 makecharset::i#1 ] zp[2]:27 [ makecharset::$17 ] zp[2]:29 [ makecharset::$15 ] zp[2]:31 [ makecharset::$16 ] zp[2]:33 [ makecharset::$18 ] zp[1]:11 [ makecharset::c#2 makecharset::c#1 ] zp[2]:7 [ makecharset::font#2 makecharset::font#1 ] zp[2]:9 [ makecharset::font1#2 makecharset::font1#1 ] 
Limited combination testing to 100 combinations of 512 possible.
Uplifting [fillscreen] best 120730 combination zp[2]:3 [ fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 ] zp[2]:5 [ fillscreen::i#2 fillscreen::i#1 ] reg byte x [ fillscreen::fill#5 ] 
Uplifting [MOS6526_CIA] best 120730 combination 
Uplifting [MOS6569_VICII] best 120730 combination 
Uplifting [MOS6581_SID] best 120730 combination 
Uplifting [main] best 120730 combination 
Uplifting [] best 120730 combination 
Attempting to uplift remaining variables inzp[1]:14 [ makecharset::ii#2 makecharset::ii#1 ]
Uplifting [makecharset] best 120730 combination zp[1]:14 [ makecharset::ii#2 makecharset::ii#1 ] 
Attempting to uplift remaining variables inzp[1]:37 [ makecharset::$13 ]
Uplifting [makecharset] best 120730 combination zp[1]:37 [ makecharset::$13 ] 
Attempting to uplift remaining variables inzp[1]:41 [ fire::$4 ]
Uplifting [fire] best 120130 combination reg byte a [ fire::$4 ] 
Attempting to uplift remaining variables inzp[1]:42 [ fire::$5 ]
Uplifting [fire] best 119530 combination reg byte a [ fire::$5 ] 
Attempting to uplift remaining variables inzp[1]:43 [ fire::$6 ]
Uplifting [fire] best 118930 combination reg byte a [ fire::$6 ] 
Attempting to uplift remaining variables inzp[1]:12 [ makecharset::i#2 makecharset::i#1 ]
Uplifting [makecharset] best 118930 combination zp[1]:12 [ makecharset::i#2 makecharset::i#1 ] 
Attempting to uplift remaining variables inzp[1]:11 [ makecharset::c#2 makecharset::c#1 ]
Uplifting [makecharset] best 118930 combination zp[1]:11 [ makecharset::c#2 makecharset::c#1 ] 
Coalescing zero page register [ zp[2]:16 [ fire::screen#0 ] ] with [ zp[2]:24 [ fire::screen#10 fire::screen#1 fire::screen#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:27 [ makecharset::$17 ] ] with [ zp[2]:29 [ makecharset::$15 ] ] - score: 1
Coalescing zero page register [ zp[2]:31 [ makecharset::$16 ] ] with [ zp[2]:33 [ makecharset::$18 ] ] - score: 1
Coalescing zero page register [ zp[2]:27 [ makecharset::$17 makecharset::$15 ] ] with [ zp[2]:31 [ makecharset::$16 makecharset::$18 ] ] - score: 1
Coalescing zero page register [ zp[2]:7 [ makecharset::font#2 makecharset::font#1 ] ] with [ zp[2]:3 [ fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 ] ]
Coalescing zero page register [ zp[2]:9 [ makecharset::font1#2 makecharset::font1#1 ] ] with [ zp[2]:5 [ fillscreen::i#2 fillscreen::i#1 ] ]
Coalescing zero page register [ zp[2]:27 [ makecharset::$17 makecharset::$15 makecharset::$16 makecharset::$18 ] ] with [ zp[2]:16 [ fire::screen#0 fire::screen#10 fire::screen#1 fire::screen#3 ] ]
Coalescing zero page register [ zp[2]:18 [ fire::buffer#4 fire::buffer#2 ] ] with [ zp[2]:7 [ makecharset::font#2 makecharset::font#1 fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 ] ]
Coalescing zero page register [ zp[2]:20 [ fire::screen#4 fire::screen#12 fire::screen#2 ] ] with [ zp[2]:9 [ makecharset::font1#2 makecharset::font1#1 fillscreen::i#2 fillscreen::i#1 ] ]
Allocated (was zp[1]:11) zp[1]:2 [ makecharset::c#2 makecharset::c#1 ]
Allocated (was zp[1]:12) zp[1]:3 [ makecharset::i#2 makecharset::i#1 ]
Allocated (was zp[1]:14) zp[1]:4 [ makecharset::ii#2 makecharset::ii#1 ]
Allocated (was zp[2]:18) zp[2]:5 [ fire::buffer#4 fire::buffer#2 makecharset::font#2 makecharset::font#1 fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 ]
Allocated (was zp[2]:20) zp[2]:7 [ fire::screen#4 fire::screen#12 fire::screen#2 makecharset::font1#2 makecharset::font1#1 fillscreen::i#2 fillscreen::i#1 ]
Allocated (was zp[2]:22) zp[2]:9 [ fire::buffer#10 fire::buffer#3 ]
Allocated (was zp[2]:27) zp[2]:11 [ makecharset::$17 makecharset::$15 makecharset::$16 makecharset::$18 fire::screen#0 fire::screen#10 fire::screen#1 fire::screen#3 ]
Allocated (was zp[1]:37) zp[1]:13 [ makecharset::$13 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// A KickC version of the fire routine from the CC65 samples
// (w)2002 by groepaz/hitmen
// Cleanup and porting to CC65 by Ullrich von Bassewitz and Greg King .
// Ported to KickC by Jesper Gravgaard.
// Original source https://github.com/cc65/cc65/blob/master/samples/fire.c
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // SID Channel Control Register Noise Waveform
  .const SID_CONTROL_NOISE = $80
  // The colors of the C64
  .const BLACK = 0
  .const YELLOW = 7
  .const OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = $e
  .const OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = $12
  .const OFFSET_STRUCT_MOS6581_SID_CH3_OSC = $1b
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .label D018 = $d018
  // The SID MOS 6581/8580
  .label SID = $d400
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Color Ram
  .label COLS = $d800
  .label SCREEN1 = $3800
  .label SCREEN2 = $3c00
  .label BUFFER = $4000
  .label CHARSET = $3000
  // main
main: {
    .const toD0181_return = (>(SCREEN1&$3fff)*4)|(>CHARSET)/4&$f
    .const toD0182_return = (>(SCREEN2&$3fff)*4)|(>CHARSET)/4&$f
    // asm { sei  }
    sei
    // [1] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [2] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // [3] call fillscreen 
    // [21] phi from main to fillscreen [phi:main->fillscreen]
  fillscreen_from_main:
    // [21] phi fillscreen::screen#6 = BUFFER [phi:main->fillscreen#0] -- pbuz1=pbuc1 
    lda #<BUFFER
    sta.z fillscreen.screen
    lda #>BUFFER
    sta.z fillscreen.screen+1
    // [21] phi fillscreen::fill#5 = 0 [phi:main->fillscreen#1] -- vbuxx=vbuc1 
    ldx #0
    jsr fillscreen
    // [4] phi from main to main::@5 [phi:main->main::@5]
  __b5_from_main:
    jmp __b5
    // main::@5
  __b5:
    // [5] call fillscreen 
    // [21] phi from main::@5 to fillscreen [phi:main::@5->fillscreen]
  fillscreen_from___b5:
    // [21] phi fillscreen::screen#6 = SCREEN1 [phi:main::@5->fillscreen#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta.z fillscreen.screen
    lda #>SCREEN1
    sta.z fillscreen.screen+1
    // [21] phi fillscreen::fill#5 = 0 [phi:main::@5->fillscreen#1] -- vbuxx=vbuc1 
    ldx #0
    jsr fillscreen
    // [6] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [7] call fillscreen 
    // [21] phi from main::@6 to fillscreen [phi:main::@6->fillscreen]
  fillscreen_from___b6:
    // [21] phi fillscreen::screen#6 = SCREEN2 [phi:main::@6->fillscreen#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta.z fillscreen.screen
    lda #>SCREEN2
    sta.z fillscreen.screen+1
    // [21] phi fillscreen::fill#5 = 0 [phi:main::@6->fillscreen#1] -- vbuxx=vbuc1 
    ldx #0
    jsr fillscreen
    // [8] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [9] call fillscreen 
    // [21] phi from main::@7 to fillscreen [phi:main::@7->fillscreen]
  fillscreen_from___b7:
    // [21] phi fillscreen::screen#6 = COLS [phi:main::@7->fillscreen#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z fillscreen.screen
    lda #>COLS
    sta.z fillscreen.screen+1
    // [21] phi fillscreen::fill#5 = YELLOW [phi:main::@7->fillscreen#1] -- vbuxx=vbuc1 
    ldx #YELLOW
    jsr fillscreen
    jmp sid_rnd_init1
    // main::sid_rnd_init1
  sid_rnd_init1:
    // [10] *((word*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) = $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ
    lda #>$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ+1
    // [11] *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) = SID_CONTROL_NOISE -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL
    // [12] phi from main::sid_rnd_init1 to main::@2 [phi:main::sid_rnd_init1->main::@2]
  __b2_from_sid_rnd_init1:
    jmp __b2
    // main::@2
  __b2:
    // [13] call makecharset 
    // [28] phi from main::@2 to makecharset [phi:main::@2->makecharset]
  makecharset_from___b2:
    jsr makecharset
    // [14] phi from main::@2 main::@4 to main::@1 [phi:main::@2/main::@4->main::@1]
  __b1_from___b2:
  __b1_from___b4:
    jmp __b1
    // main::@1
  __b1:
    // [15] call fire 
    // [60] phi from main::@1 to fire [phi:main::@1->fire]
  fire_from___b1:
    // [60] phi fire::screen#0 = SCREEN1 [phi:main::@1->fire#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta.z fire.screen
    lda #>SCREEN1
    sta.z fire.screen+1
    jsr fire
    // [16] phi from main::@1 to main::toD0181 [phi:main::@1->main::toD0181]
  toD0181_from___b1:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp __b3
    // main::@3
  __b3:
    // [17] *D018 = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // [18] call fire 
    // [60] phi from main::@3 to fire [phi:main::@3->fire]
  fire_from___b3:
    // [60] phi fire::screen#0 = SCREEN2 [phi:main::@3->fire#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta.z fire.screen
    lda #>SCREEN2
    sta.z fire.screen+1
    jsr fire
    // [19] phi from main::@3 to main::toD0182 [phi:main::@3->main::toD0182]
  toD0182_from___b3:
    jmp toD0182
    // main::toD0182
  toD0182:
    jmp __b4
    // main::@4
  __b4:
    // [20] *D018 = main::toD0182_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0182_return
    sta D018
    jmp __b1_from___b4
}
  // fillscreen
// Fill a screen (1000 chars) with a specific char
// fillscreen(byte* zp(5) screen, byte register(X) fill)
fillscreen: {
    .label screen = 5
    .label i = 7
    // [22] phi from fillscreen to fillscreen::@1 [phi:fillscreen->fillscreen::@1]
  __b1_from_fillscreen:
    // [22] phi fillscreen::i#2 = 0 [phi:fillscreen->fillscreen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    // [22] phi fillscreen::screen#5 = fillscreen::screen#6 [phi:fillscreen->fillscreen::@1#1] -- register_copy 
    jmp __b1
    // [22] phi from fillscreen::@1 to fillscreen::@1 [phi:fillscreen::@1->fillscreen::@1]
  __b1_from___b1:
    // [22] phi fillscreen::i#2 = fillscreen::i#1 [phi:fillscreen::@1->fillscreen::@1#0] -- register_copy 
    // [22] phi fillscreen::screen#5 = fillscreen::screen#4 [phi:fillscreen::@1->fillscreen::@1#1] -- register_copy 
    jmp __b1
    // fillscreen::@1
  __b1:
    // [23] *fillscreen::screen#5 = fillscreen::fill#5 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (screen),y
    // [24] fillscreen::screen#4 = ++ fillscreen::screen#5 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [25] fillscreen::i#1 = ++ fillscreen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [26] if(fillscreen::i#1!=$3e8) goto fillscreen::@1 -- vwuz1_neq_vwuc1_then_la1 
    lda.z i+1
    cmp #>$3e8
    bne __b1_from___b1
    lda.z i
    cmp #<$3e8
    bne __b1_from___b1
    jmp __breturn
    // fillscreen::@return
  __breturn:
    // [27] return 
    rts
}
  // makecharset
// Make a fire-friendly charset in chars $00-$3f of the passed charset
makecharset: {
    .label __13 = $d
    .label __15 = $b
    .label __16 = $b
    .label __17 = $b
    .label font = 5
    .label font1 = 7
    .label c = 2
    .label i = 3
    .label ii = 4
    .label __18 = $b
    // [29] phi from makecharset to makecharset::@1 [phi:makecharset->makecharset::@1]
  __b1_from_makecharset:
    // [29] phi makecharset::font#2 = CHARSET [phi:makecharset->makecharset::@1#0] -- pbuz1=pbuc1 
    lda #<CHARSET
    sta.z font
    lda #>CHARSET
    sta.z font+1
    jmp __b1
    // makecharset::@1
  __b1:
    // [30] if(makecharset::font#2!=CHARSET+1*8) goto makecharset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z font+1
    cmp #>CHARSET+1*8
    bne __b2
    lda.z font
    cmp #<CHARSET+1*8
    bne __b2
    // [31] phi from makecharset::@1 to makecharset::@3 [phi:makecharset::@1->makecharset::@3]
  __b3_from___b1:
    // [31] phi makecharset::font1#2 = CHARSET+(word)$40*8 [phi:makecharset::@1->makecharset::@3#0] -- pbuz1=pbuc1 
    lda #<CHARSET+$40*8
    sta.z font1
    lda #>CHARSET+$40*8
    sta.z font1+1
    jmp __b3
    // makecharset::@3
  __b3:
    // [32] if(makecharset::font1#2!=CHARSET+$100*8) goto makecharset::@4 -- pbuz1_neq_pbuc1_then_la1 
    lda.z font1+1
    cmp #>CHARSET+$100*8
    bne __b4
    lda.z font1
    cmp #<CHARSET+$100*8
    bne __b4
    // [33] phi from makecharset::@3 to makecharset::@5 [phi:makecharset::@3->makecharset::@5]
  __b5_from___b3:
    // [33] phi makecharset::c#2 = 0 [phi:makecharset::@3->makecharset::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b5
    // makecharset::@5
  __b5:
    // [34] if(makecharset::c#2<$40) goto makecharset::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c
    cmp #$40
    bcc __b6_from___b5
    jmp __breturn
    // makecharset::@return
  __breturn:
    // [35] return 
    rts
    // [36] phi from makecharset::@5 to makecharset::@6 [phi:makecharset::@5->makecharset::@6]
  __b6_from___b5:
    // [36] phi makecharset::bc#6 = 0 [phi:makecharset::@5->makecharset::@6#0] -- vbuxx=vbuc1 
    ldx #0
    // [36] phi makecharset::i#2 = 0 [phi:makecharset::@5->makecharset::@6#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b6
    // makecharset::@6
  __b6:
    // [37] if(makecharset::i#2<8) goto makecharset::@8 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8
    bcc __b8_from___b6
    jmp __b7
    // makecharset::@7
  __b7:
    // [38] makecharset::c#1 = ++ makecharset::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [33] phi from makecharset::@7 to makecharset::@5 [phi:makecharset::@7->makecharset::@5]
  __b5_from___b7:
    // [33] phi makecharset::c#2 = makecharset::c#1 [phi:makecharset::@7->makecharset::@5#0] -- register_copy 
    jmp __b5
    // [39] phi from makecharset::@6 to makecharset::@8 [phi:makecharset::@6->makecharset::@8]
  __b8_from___b6:
    // [39] phi makecharset::b#2 = 0 [phi:makecharset::@6->makecharset::@8#0] -- vbuyy=vbuc1 
    ldy #0
    // [39] phi makecharset::bc#3 = makecharset::bc#6 [phi:makecharset::@6->makecharset::@8#1] -- register_copy 
    // [39] phi makecharset::ii#2 = 0 [phi:makecharset::@6->makecharset::@8#2] -- vbuz1=vbuc1 
    lda #0
    sta.z ii
    jmp __b8
    // makecharset::@8
  __b8:
    // [40] if(makecharset::ii#2<8) goto makecharset::@9 -- vbuz1_lt_vbuc1_then_la1 
    lda.z ii
    cmp #8
    bcc __b9
    jmp __b10
    // makecharset::@10
  __b10:
    // [41] makecharset::$17 = (word)makecharset::c#2 -- vwuz1=_word_vbuz2 
    lda.z c
    sta.z __17
    lda #0
    sta.z __17+1
    // [42] makecharset::$15 = makecharset::$17 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z __15
    rol.z __15+1
    asl.z __15
    rol.z __15+1
    asl.z __15
    rol.z __15+1
    // [43] makecharset::$16 = makecharset::$15 + makecharset::i#2 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z i
    clc
    adc.z __16
    sta.z __16
    bcc !+
    inc.z __16+1
  !:
    // [44] makecharset::$18 = CHARSET+1*8 + makecharset::$16 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __18
    adc #<CHARSET+1*8
    sta.z __18
    lda.z __18+1
    adc #>CHARSET+1*8
    sta.z __18+1
    // [45] *makecharset::$18 = makecharset::b#2 -- _deref_pbuz1=vbuyy 
    tya
    ldy #0
    sta (__18),y
    // [46] makecharset::i#1 = ++ makecharset::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [36] phi from makecharset::@10 to makecharset::@6 [phi:makecharset::@10->makecharset::@6]
  __b6_from___b10:
    // [36] phi makecharset::bc#6 = makecharset::bc#3 [phi:makecharset::@10->makecharset::@6#0] -- register_copy 
    // [36] phi makecharset::i#2 = makecharset::i#1 [phi:makecharset::@10->makecharset::@6#1] -- register_copy 
    jmp __b6
    // makecharset::@9
  __b9:
    // [47] makecharset::bc#1 = makecharset::bc#3 + makecharset::c#2 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z c
    tax
    // [48] if(makecharset::bc#1<$3f+1) goto makecharset::@11 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$3f+1
    bcc __b11_from___b9
    jmp __b12
    // makecharset::@12
  __b12:
    // [49] makecharset::bc#2 = makecharset::bc#1 - $40 -- vbuxx=vbuxx_minus_vbuc1 
    txa
    axs #$40
    // [50] makecharset::$11 = makecharset::i#2 & 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z i
    // [51] makecharset::$12 = makecharset::ii#2 + makecharset::$11 -- vbuaa=vbuz1_plus_vbuaa 
    clc
    adc.z ii
    // [52] makecharset::$13 = makecharset::$12 & 7 -- vbuz1=vbuaa_band_vbuc1 
    and #7
    sta.z __13
    // [53] makecharset::b#1 = makecharset::b#2 + makecharset::bittab[makecharset::$13] -- vbuyy=vbuyy_plus_pbuc1_derefidx_vbuz1 
    tya
    ldy.z __13
    clc
    adc bittab,y
    tay
    // [54] phi from makecharset::@12 makecharset::@9 to makecharset::@11 [phi:makecharset::@12/makecharset::@9->makecharset::@11]
  __b11_from___b12:
  __b11_from___b9:
    // [54] phi makecharset::b#6 = makecharset::b#1 [phi:makecharset::@12/makecharset::@9->makecharset::@11#0] -- register_copy 
    // [54] phi makecharset::bc#7 = makecharset::bc#2 [phi:makecharset::@12/makecharset::@9->makecharset::@11#1] -- register_copy 
    jmp __b11
    // makecharset::@11
  __b11:
    // [55] makecharset::ii#1 = ++ makecharset::ii#2 -- vbuz1=_inc_vbuz1 
    inc.z ii
    // [39] phi from makecharset::@11 to makecharset::@8 [phi:makecharset::@11->makecharset::@8]
  __b8_from___b11:
    // [39] phi makecharset::b#2 = makecharset::b#6 [phi:makecharset::@11->makecharset::@8#0] -- register_copy 
    // [39] phi makecharset::bc#3 = makecharset::bc#7 [phi:makecharset::@11->makecharset::@8#1] -- register_copy 
    // [39] phi makecharset::ii#2 = makecharset::ii#1 [phi:makecharset::@11->makecharset::@8#2] -- register_copy 
    jmp __b8
    // makecharset::@4
  __b4:
    // [56] *makecharset::font1#2 = $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (font1),y
    // [57] makecharset::font1#1 = ++ makecharset::font1#2 -- pbuz1=_inc_pbuz1 
    inc.z font1
    bne !+
    inc.z font1+1
  !:
    // [31] phi from makecharset::@4 to makecharset::@3 [phi:makecharset::@4->makecharset::@3]
  __b3_from___b4:
    // [31] phi makecharset::font1#2 = makecharset::font1#1 [phi:makecharset::@4->makecharset::@3#0] -- register_copy 
    jmp __b3
    // makecharset::@2
  __b2:
    // [58] *makecharset::font#2 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (font),y
    // [59] makecharset::font#1 = ++ makecharset::font#2 -- pbuz1=_inc_pbuz1 
    inc.z font
    bne !+
    inc.z font+1
  !:
    // [29] phi from makecharset::@2 to makecharset::@1 [phi:makecharset::@2->makecharset::@1]
  __b1_from___b2:
    // [29] phi makecharset::font#2 = makecharset::font#1 [phi:makecharset::@2->makecharset::@1#0] -- register_copy 
    jmp __b1
    bittab: .byte 1, 2, 4, 8, $10, $20, $40, $80
}
  // fire
// Animate the fire on the passed screen. Uses BUFFER to store the current values.
fire: {
    .label screen = $b
    .label screen_1 = 7
    .label buffer = 5
    .label buffer_1 = 9
    // [61] fire::screen#12 = fire::screen#0 -- pbuz1=pbuz2 
    lda.z screen
    sta.z screen_1
    lda.z screen+1
    sta.z screen_1+1
    // [62] phi from fire to fire::@1 [phi:fire->fire::@1]
  __b1_from_fire:
    // [62] phi fire::screen#4 = fire::screen#12 [phi:fire->fire::@1#0] -- register_copy 
    // [62] phi fire::buffer#4 = BUFFER [phi:fire->fire::@1#1] -- pbuz1=pbuc1 
    lda #<BUFFER
    sta.z buffer
    lda #>BUFFER
    sta.z buffer+1
    jmp __b1
    // fire::@1
  __b1:
    // [63] if(fire::buffer#4!=BUFFER+(word)$18*$28) goto fire::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z buffer+1
    cmp #>BUFFER+$18*$28
    bne __b2
    lda.z buffer
    cmp #<BUFFER+$18*$28
    bne __b2
    jmp __b3
    // fire::@3
  __b3:
    // [64] fire::screen#1 = fire::screen#0 + (word)$18*$28 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z screen
    adc #<$18*$28
    sta.z screen
    lda.z screen+1
    adc #>$18*$28
    sta.z screen+1
    // [65] phi from fire::@3 to fire::@6 [phi:fire::@3->fire::@6]
  __b6_from___b3:
    // [65] phi fire::screen#10 = fire::screen#1 [phi:fire::@3->fire::@6#0] -- register_copy 
    // [65] phi fire::buffer#10 = BUFFER+(word)$18*$28 [phi:fire::@3->fire::@6#1] -- pbuz1=pbuc1 
    lda #<BUFFER+$18*$28
    sta.z buffer_1
    lda #>BUFFER+$18*$28
    sta.z buffer_1+1
    jmp __b6
    // fire::@6
  __b6:
    // [66] if(fire::buffer#10!=BUFFER+(word)$19*$28) goto fire::sid_rnd1 -- pbuz1_neq_pbuc1_then_la1 
    lda.z buffer_1+1
    cmp #>BUFFER+$19*$28
    bne sid_rnd1
    lda.z buffer_1
    cmp #<BUFFER+$19*$28
    bne sid_rnd1
    jmp __breturn
    // fire::@return
  __breturn:
    // [67] return 
    rts
    // fire::sid_rnd1
  sid_rnd1:
    // [68] fire::sid_rnd1_return#0 = *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC) -- vbuaa=_deref_pbuc1 
    lda SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC
    jmp __b7
    // fire::@7
  __b7:
    // [69] fire::$13 = fire::sid_rnd1_return#0 >> 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // [70] fire::$14 = $30 + fire::$13 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #$30
    // [71] *fire::buffer#10 = fire::$14 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (buffer_1),y
    // [72] *fire::screen#10 = *fire::buffer#10 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (buffer_1),y
    ldy #0
    sta (screen),y
    // [73] fire::screen#3 = ++ fire::screen#10 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [74] fire::buffer#3 = ++ fire::buffer#10 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [65] phi from fire::@7 to fire::@6 [phi:fire::@7->fire::@6]
  __b6_from___b7:
    // [65] phi fire::screen#10 = fire::screen#3 [phi:fire::@7->fire::@6#0] -- register_copy 
    // [65] phi fire::buffer#10 = fire::buffer#3 [phi:fire::@7->fire::@6#1] -- register_copy 
    jmp __b6
    // fire::@2
  __b2:
    // [75] fire::$4 = fire::buffer#4[$28-1] + fire::buffer#4[$28-1] -- vbuaa=pbuz1_derefidx_vbuc1_plus_pbuz1_derefidx_vbuc1 
    ldy #$28-1
    lda (buffer),y
    clc
    adc (buffer),y
    // [76] fire::$5 = fire::$4 + fire::buffer#4[$28] -- vbuaa=vbuaa_plus_pbuz1_derefidx_vbuc1 
    ldy #$28
    clc
    adc (buffer),y
    // [77] fire::$6 = fire::$5 + fire::buffer#4[$29] -- vbuaa=vbuaa_plus_pbuz1_derefidx_vbuc1 
    ldy #$29
    clc
    adc (buffer),y
    // [78] fire::c#0 = fire::$6 >> 2 -- vbuaa=vbuaa_ror_2 
    lsr
    lsr
    // [79] if(fire::c#0<2+1) goto fire::@4 -- vbuaa_lt_vbuc1_then_la1 
    cmp #2+1
    bcc __b4_from___b2
    jmp __b5
    // fire::@5
  __b5:
    // [80] fire::c#1 = fire::c#0 - 3 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #3
    // [81] phi from fire::@2 fire::@5 to fire::@4 [phi:fire::@2/fire::@5->fire::@4]
  __b4_from___b2:
  __b4_from___b5:
    // [81] phi fire::c#2 = fire::c#0 [phi:fire::@2/fire::@5->fire::@4#0] -- register_copy 
    jmp __b4
    // fire::@4
  __b4:
    // [82] *fire::buffer#4 = fire::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (buffer),y
    // [83] *fire::screen#4 = *fire::buffer#4 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (buffer),y
    ldy #0
    sta (screen_1),y
    // [84] fire::screen#2 = ++ fire::screen#4 -- pbuz1=_inc_pbuz1 
    inc.z screen_1
    bne !+
    inc.z screen_1+1
  !:
    // [85] fire::buffer#2 = ++ fire::buffer#4 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [62] phi from fire::@4 to fire::@1 [phi:fire::@4->fire::@1]
  __b1_from___b4:
    // [62] phi fire::screen#4 = fire::screen#2 [phi:fire::@4->fire::@1#0] -- register_copy 
    // [62] phi fire::buffer#4 = fire::buffer#2 [phi:fire::@4->fire::@1#1] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp sid_rnd_init1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp toD0181
Removing instruction jmp __b3
Removing instruction jmp toD0182
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b10
Removing instruction jmp __b12
Removing instruction jmp __b11
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b5
Removing instruction jmp __b4
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #BLACK
Removing instruction lda #>0
Replacing instruction lda #0 with TXA
Replacing instruction lda #0 with TYA
Replacing instruction ldy #0 with TAY
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b4 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b11_from___b9 with __b11
Replacing label __b4_from___b2 with __b4
Removing instruction __b5_from_main:
Removing instruction fillscreen_from___b5:
Removing instruction __b6_from___b5:
Removing instruction fillscreen_from___b6:
Removing instruction __b7_from___b6:
Removing instruction fillscreen_from___b7:
Removing instruction __b2_from_sid_rnd_init1:
Removing instruction makecharset_from___b2:
Removing instruction __b1_from___b2:
Removing instruction __b1_from___b4:
Removing instruction fire_from___b1:
Removing instruction toD0181_from___b1:
Removing instruction toD0181:
Removing instruction toD0182_from___b3:
Removing instruction toD0182:
Removing instruction __b1_from___b1:
Removing instruction __b11_from___b12:
Removing instruction __b11_from___b9:
Removing instruction __b4_from___b2:
Removing instruction __b4_from___b5:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction fillscreen_from_main:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction sid_rnd_init1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction fire_from___b3:
Removing instruction __b4:
Removing instruction __b1_from_fillscreen:
Removing instruction __breturn:
Removing instruction __b1_from_makecharset:
Removing instruction __b3_from___b1:
Removing instruction __b5_from___b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b5_from___b7:
Removing instruction __b10:
Removing instruction __b6_from___b10:
Removing instruction __b12:
Removing instruction __b8_from___b11:
Removing instruction __b3_from___b4:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_fire:
Removing instruction __b3:
Removing instruction __b6_from___b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b6_from___b7:
Removing instruction __b5:
Removing instruction __b1_from___b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Relabelling long label __b6_from___b5 to __b7
Relabelling long label __b8_from___b6 to __b10
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Fixing long branch [131] bne __b2 to beq
Fixing long branch [136] bne __b2 to beq
Fixing long branch [146] bne __b4 to beq
Fixing long branch [151] bne __b4 to beq

FINAL SYMBOL TABLE
const nomodify byte BLACK = 0
const byte* BUFFER = (byte*) 16384
const byte* CHARSET = (byte*) 12288
const nomodify byte* COLS = (byte*) 55296
const nomodify byte* D018 = (byte*) 53272
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
const byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
const byte OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = $12
const byte OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = $e
const byte OFFSET_STRUCT_MOS6581_SID_CH3_OSC = $1b
const byte* SCREEN1 = (byte*) 14336
const byte* SCREEN2 = (byte*) 15360
const nomodify struct MOS6581_SID* SID = (struct MOS6581_SID*) 54272
const nomodify byte SID_CONTROL_NOISE = $80
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*) 53248
const nomodify byte YELLOW = 7
void fillscreen(byte* fillscreen::screen , byte fillscreen::fill)
byte fillscreen::fill
byte fillscreen::fill#5 reg byte x 16.833333333333332
word fillscreen::i
word fillscreen::i#1 i zp[2]:7 151.5
word fillscreen::i#2 i zp[2]:7 67.33333333333333
byte* fillscreen::screen
byte* fillscreen::screen#4 screen zp[2]:5 67.33333333333333
byte* fillscreen::screen#5 screen zp[2]:5 157.0
byte* fillscreen::screen#6 screen zp[2]:5 11.0
void fire(byte* fire::screenbase)
byte~ fire::$13 reg byte a 20002.0
byte~ fire::$14 reg byte a 20002.0
byte~ fire::$4 reg byte a 20002.0
byte~ fire::$5 reg byte a 20002.0
byte~ fire::$6 reg byte a 20002.0
byte* fire::buffer
byte* fire::buffer#10 buffer_1 zp[2]:9 6250.625
byte* fire::buffer#2 buffer zp[2]:5 20002.0
byte* fire::buffer#3 buffer_1 zp[2]:9 20002.0
byte* fire::buffer#4 buffer zp[2]:5 7500.750000000001
byte fire::c
byte fire::c#0 reg byte a 20002.0
byte fire::c#1 reg byte a 20002.0
byte fire::c#2 reg byte a 30003.0
byte* fire::screen
byte* fire::screen#0 screen zp[2]:11 13.466666666666667
byte* fire::screen#1 screen zp[2]:11 202.0
byte* fire::screen#10 screen zp[2]:11 4300.571428571429
byte* fire::screen#12 screen_1 zp[2]:7 202.0
byte* fire::screen#2 screen_1 zp[2]:7 10001.0
byte* fire::screen#3 screen zp[2]:11 10001.0
byte* fire::screen#4 screen_1 zp[2]:7 2736.7272727272725
byte* fire::screenbase
byte fire::sid_rnd1_return
byte fire::sid_rnd1_return#0 reg byte a 20002.0
void main()
byte* main::toD0181_gfx
byte main::toD0181_return
const byte main::toD0181_return#0 toD0181_return = >(word)SCREEN1&$3fff*4|>(word)CHARSET/4&$f
byte* main::toD0181_screen
byte* main::toD0182_gfx
byte main::toD0182_return
const byte main::toD0182_return#0 toD0182_return = >(word)SCREEN2&$3fff*4|>(word)CHARSET/4&$f
byte* main::toD0182_screen
void makecharset(byte* makecharset::charset)
byte~ makecharset::$11 reg byte a 20002.0
byte~ makecharset::$12 reg byte a 20002.0
byte~ makecharset::$13 zp[1]:13 20002.0
word~ makecharset::$15 zp[2]:11 2002.0
word~ makecharset::$16 zp[2]:11 2002.0
word~ makecharset::$17 zp[2]:11 2002.0
byte*~ makecharset::$18 zp[2]:11 2002.0
byte makecharset::b
byte makecharset::b#1 reg byte y 20002.0
byte makecharset::b#2 reg byte y 2583.6666666666665
byte makecharset::b#6 reg byte y 15001.5
byte makecharset::bc
byte makecharset::bc#1 reg byte x 20002.0
byte makecharset::bc#2 reg byte x 4000.4
byte makecharset::bc#3 reg byte x 2750.5
byte makecharset::bc#6 reg byte x 1001.0
byte makecharset::bc#7 reg byte x 15001.5
const to_nomodify byte* makecharset::bittab[8]  = { 1, 2, 4, 8, $10, $20, $40, $80 }
byte makecharset::c
byte makecharset::c#1 c zp[1]:2 202.0
byte makecharset::c#2 c zp[1]:2 490.6666666666667
byte* makecharset::charset
byte* makecharset::font
byte* makecharset::font#1 font zp[2]:5 202.0
byte* makecharset::font#2 font zp[2]:5 134.66666666666666
byte* makecharset::font1
byte* makecharset::font1#1 font1 zp[2]:7 202.0
byte* makecharset::font1#2 font1 zp[2]:7 134.66666666666666
byte makecharset::i
byte makecharset::i#1 i zp[1]:3 2002.0
byte makecharset::i#2 i zp[1]:3 778.0555555555555
byte makecharset::ii
byte makecharset::ii#1 ii zp[1]:4 20002.0
byte makecharset::ii#2 ii zp[1]:4 4000.4

reg byte x [ fillscreen::fill#5 ]
zp[1]:2 [ makecharset::c#2 makecharset::c#1 ]
zp[1]:3 [ makecharset::i#2 makecharset::i#1 ]
reg byte x [ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ]
zp[1]:4 [ makecharset::ii#2 makecharset::ii#1 ]
reg byte y [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ]
zp[2]:5 [ fire::buffer#4 fire::buffer#2 makecharset::font#2 makecharset::font#1 fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 ]
zp[2]:7 [ fire::screen#4 fire::screen#12 fire::screen#2 makecharset::font1#2 makecharset::font1#1 fillscreen::i#2 fillscreen::i#1 ]
zp[2]:9 [ fire::buffer#10 fire::buffer#3 ]
reg byte a [ fire::c#2 fire::c#0 fire::c#1 ]
zp[2]:11 [ makecharset::$17 makecharset::$15 makecharset::$16 makecharset::$18 fire::screen#0 fire::screen#10 fire::screen#1 fire::screen#3 ]
reg byte a [ makecharset::$11 ]
reg byte a [ makecharset::$12 ]
zp[1]:13 [ makecharset::$13 ]
reg byte a [ fire::sid_rnd1_return#0 ]
reg byte a [ fire::$13 ]
reg byte a [ fire::$14 ]
reg byte a [ fire::$4 ]
reg byte a [ fire::$5 ]
reg byte a [ fire::$6 ]


FINAL ASSEMBLER
Score: 102503

  // File Comments
// A KickC version of the fire routine from the CC65 samples
// (w)2002 by groepaz/hitmen
// Cleanup and porting to CC65 by Ullrich von Bassewitz and Greg King .
// Ported to KickC by Jesper Gravgaard.
// Original source https://github.com/cc65/cc65/blob/master/samples/fire.c
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // SID Channel Control Register Noise Waveform
  .const SID_CONTROL_NOISE = $80
  // The colors of the C64
  .const BLACK = 0
  .const YELLOW = 7
  .const OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = $e
  .const OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = $12
  .const OFFSET_STRUCT_MOS6581_SID_CH3_OSC = $1b
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .label D018 = $d018
  // The SID MOS 6581/8580
  .label SID = $d400
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Color Ram
  .label COLS = $d800
  .label SCREEN1 = $3800
  .label SCREEN2 = $3c00
  .label BUFFER = $4000
  .label CHARSET = $3000
  // main
main: {
    .const toD0181_return = (>(SCREEN1&$3fff)*4)|(>CHARSET)/4&$f
    .const toD0182_return = (>(SCREEN2&$3fff)*4)|(>CHARSET)/4&$f
    // asm
    // asm { sei  }
    sei
    // VICII->BORDER_COLOR = BLACK
    // [1] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // VICII->BG_COLOR = BLACK
    // [2] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // fillscreen(BUFFER, 00)
    // [3] call fillscreen 
    // [21] phi from main to fillscreen [phi:main->fillscreen]
    // [21] phi fillscreen::screen#6 = BUFFER [phi:main->fillscreen#0] -- pbuz1=pbuc1 
    lda #<BUFFER
    sta.z fillscreen.screen
    lda #>BUFFER
    sta.z fillscreen.screen+1
    // [21] phi fillscreen::fill#5 = 0 [phi:main->fillscreen#1] -- vbuxx=vbuc1 
    ldx #0
    jsr fillscreen
    // [4] phi from main to main::@5 [phi:main->main::@5]
    // main::@5
    // fillscreen(SCREEN1, 00)
    // [5] call fillscreen 
    // [21] phi from main::@5 to fillscreen [phi:main::@5->fillscreen]
    // [21] phi fillscreen::screen#6 = SCREEN1 [phi:main::@5->fillscreen#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta.z fillscreen.screen
    lda #>SCREEN1
    sta.z fillscreen.screen+1
    // [21] phi fillscreen::fill#5 = 0 [phi:main::@5->fillscreen#1] -- vbuxx=vbuc1 
    ldx #0
    jsr fillscreen
    // [6] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // main::@6
    // fillscreen(SCREEN2, 00)
    // [7] call fillscreen 
    // [21] phi from main::@6 to fillscreen [phi:main::@6->fillscreen]
    // [21] phi fillscreen::screen#6 = SCREEN2 [phi:main::@6->fillscreen#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta.z fillscreen.screen
    lda #>SCREEN2
    sta.z fillscreen.screen+1
    // [21] phi fillscreen::fill#5 = 0 [phi:main::@6->fillscreen#1] -- vbuxx=vbuc1 
    ldx #0
    jsr fillscreen
    // [8] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
    // main::@7
    // fillscreen(COLS, YELLOW)
    // [9] call fillscreen 
    // [21] phi from main::@7 to fillscreen [phi:main::@7->fillscreen]
    // [21] phi fillscreen::screen#6 = COLS [phi:main::@7->fillscreen#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z fillscreen.screen
    lda #>COLS
    sta.z fillscreen.screen+1
    // [21] phi fillscreen::fill#5 = YELLOW [phi:main::@7->fillscreen#1] -- vbuxx=vbuc1 
    ldx #YELLOW
    jsr fillscreen
    // main::sid_rnd_init1
    // SID->CH3_FREQ = 0xffff
    // [10] *((word*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) = $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ
    lda #>$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ+1
    // SID->CH3_CONTROL = SID_CONTROL_NOISE
    // [11] *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) = SID_CONTROL_NOISE -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL
    // [12] phi from main::sid_rnd_init1 to main::@2 [phi:main::sid_rnd_init1->main::@2]
    // main::@2
    // makecharset(CHARSET)
    // [13] call makecharset 
    // [28] phi from main::@2 to makecharset [phi:main::@2->makecharset]
    jsr makecharset
    // [14] phi from main::@2 main::@4 to main::@1 [phi:main::@2/main::@4->main::@1]
    // main::@1
  __b1:
    // fire(SCREEN1)
    // [15] call fire 
    // [60] phi from main::@1 to fire [phi:main::@1->fire]
    // [60] phi fire::screen#0 = SCREEN1 [phi:main::@1->fire#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta.z fire.screen
    lda #>SCREEN1
    sta.z fire.screen+1
    jsr fire
    // [16] phi from main::@1 to main::toD0181 [phi:main::@1->main::toD0181]
    // main::toD0181
    // main::@3
    // *D018 = toD018(SCREEN1, CHARSET)
    // [17] *D018 = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // fire(SCREEN2)
    // [18] call fire 
    // [60] phi from main::@3 to fire [phi:main::@3->fire]
    // [60] phi fire::screen#0 = SCREEN2 [phi:main::@3->fire#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta.z fire.screen
    lda #>SCREEN2
    sta.z fire.screen+1
    jsr fire
    // [19] phi from main::@3 to main::toD0182 [phi:main::@3->main::toD0182]
    // main::toD0182
    // main::@4
    // *D018 = toD018(SCREEN2, CHARSET)
    // [20] *D018 = main::toD0182_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0182_return
    sta D018
    jmp __b1
}
  // fillscreen
// Fill a screen (1000 chars) with a specific char
// fillscreen(byte* zp(5) screen, byte register(X) fill)
fillscreen: {
    .label screen = 5
    .label i = 7
    // [22] phi from fillscreen to fillscreen::@1 [phi:fillscreen->fillscreen::@1]
    // [22] phi fillscreen::i#2 = 0 [phi:fillscreen->fillscreen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
    // [22] phi fillscreen::screen#5 = fillscreen::screen#6 [phi:fillscreen->fillscreen::@1#1] -- register_copy 
    // [22] phi from fillscreen::@1 to fillscreen::@1 [phi:fillscreen::@1->fillscreen::@1]
    // [22] phi fillscreen::i#2 = fillscreen::i#1 [phi:fillscreen::@1->fillscreen::@1#0] -- register_copy 
    // [22] phi fillscreen::screen#5 = fillscreen::screen#4 [phi:fillscreen::@1->fillscreen::@1#1] -- register_copy 
    // fillscreen::@1
  __b1:
    // *screen++ = fill
    // [23] *fillscreen::screen#5 = fillscreen::fill#5 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (screen),y
    // *screen++ = fill;
    // [24] fillscreen::screen#4 = ++ fillscreen::screen#5 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // for( unsigned int i : 0..999)
    // [25] fillscreen::i#1 = ++ fillscreen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [26] if(fillscreen::i#1!=$3e8) goto fillscreen::@1 -- vwuz1_neq_vwuc1_then_la1 
    lda.z i+1
    cmp #>$3e8
    bne __b1
    lda.z i
    cmp #<$3e8
    bne __b1
    // fillscreen::@return
    // }
    // [27] return 
    rts
}
  // makecharset
// Make a fire-friendly charset in chars $00-$3f of the passed charset
makecharset: {
    .label __13 = $d
    .label __15 = $b
    .label __16 = $b
    .label __17 = $b
    .label font = 5
    .label font1 = 7
    .label c = 2
    .label i = 3
    .label ii = 4
    .label __18 = $b
    // [29] phi from makecharset to makecharset::@1 [phi:makecharset->makecharset::@1]
    // [29] phi makecharset::font#2 = CHARSET [phi:makecharset->makecharset::@1#0] -- pbuz1=pbuc1 
    lda #<CHARSET
    sta.z font
    lda #>CHARSET
    sta.z font+1
    // makecharset::@1
  __b1:
    // for (unsigned char *font = charset; font != (charset+(1*8)); ++font)
    // [30] if(makecharset::font#2!=CHARSET+1*8) goto makecharset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z font+1
    cmp #>CHARSET+1*8
    beq !__b2+
    jmp __b2
  !__b2:
    lda.z font
    cmp #<CHARSET+1*8
    beq !__b2+
    jmp __b2
  !__b2:
    // [31] phi from makecharset::@1 to makecharset::@3 [phi:makecharset::@1->makecharset::@3]
    // [31] phi makecharset::font1#2 = CHARSET+(word)$40*8 [phi:makecharset::@1->makecharset::@3#0] -- pbuz1=pbuc1 
    lda #<CHARSET+$40*8
    sta.z font1
    lda #>CHARSET+$40*8
    sta.z font1+1
    // makecharset::@3
  __b3:
    // for (unsigned char *font = (charset+(64*8)); font != (charset+(256*8)); ++font)
    // [32] if(makecharset::font1#2!=CHARSET+$100*8) goto makecharset::@4 -- pbuz1_neq_pbuc1_then_la1 
    lda.z font1+1
    cmp #>CHARSET+$100*8
    beq !__b4+
    jmp __b4
  !__b4:
    lda.z font1
    cmp #<CHARSET+$100*8
    beq !__b4+
    jmp __b4
  !__b4:
    // [33] phi from makecharset::@3 to makecharset::@5 [phi:makecharset::@3->makecharset::@5]
    // [33] phi makecharset::c#2 = 0 [phi:makecharset::@3->makecharset::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // makecharset::@5
  __b5:
    // for (unsigned char c = 0; c < 0x40; ++c)
    // [34] if(makecharset::c#2<$40) goto makecharset::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c
    cmp #$40
    bcc __b7
    // makecharset::@return
    // }
    // [35] return 
    rts
    // [36] phi from makecharset::@5 to makecharset::@6 [phi:makecharset::@5->makecharset::@6]
  __b7:
    // [36] phi makecharset::bc#6 = 0 [phi:makecharset::@5->makecharset::@6#0] -- vbuxx=vbuc1 
    ldx #0
    // [36] phi makecharset::i#2 = 0 [phi:makecharset::@5->makecharset::@6#1] -- vbuz1=vbuc1 
    txa
    sta.z i
    // makecharset::@6
  __b6:
    // for (unsigned char bc = 0, i = 0; i < 8; i++)
    // [37] if(makecharset::i#2<8) goto makecharset::@8 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8
    bcc __b10
    // makecharset::@7
    // for (unsigned char c = 0; c < 0x40; ++c)
    // [38] makecharset::c#1 = ++ makecharset::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [33] phi from makecharset::@7 to makecharset::@5 [phi:makecharset::@7->makecharset::@5]
    // [33] phi makecharset::c#2 = makecharset::c#1 [phi:makecharset::@7->makecharset::@5#0] -- register_copy 
    jmp __b5
    // [39] phi from makecharset::@6 to makecharset::@8 [phi:makecharset::@6->makecharset::@8]
  __b10:
    // [39] phi makecharset::b#2 = 0 [phi:makecharset::@6->makecharset::@8#0] -- vbuyy=vbuc1 
    ldy #0
    // [39] phi makecharset::bc#3 = makecharset::bc#6 [phi:makecharset::@6->makecharset::@8#1] -- register_copy 
    // [39] phi makecharset::ii#2 = 0 [phi:makecharset::@6->makecharset::@8#2] -- vbuz1=vbuc1 
    tya
    sta.z ii
    // makecharset::@8
  __b8:
    // for (unsigned char ii = 0; ii < 8; ii++)
    // [40] if(makecharset::ii#2<8) goto makecharset::@9 -- vbuz1_lt_vbuc1_then_la1 
    lda.z ii
    cmp #8
    bcc __b9
    // makecharset::@10
    // ((unsigned short)c) << 3
    // [41] makecharset::$17 = (word)makecharset::c#2 -- vwuz1=_word_vbuz2 
    lda.z c
    sta.z __17
    lda #0
    sta.z __17+1
    // [42] makecharset::$15 = makecharset::$17 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z __15
    rol.z __15+1
    asl.z __15
    rol.z __15+1
    asl.z __15
    rol.z __15+1
    // (((unsigned short)c) << 3) + i
    // [43] makecharset::$16 = makecharset::$15 + makecharset::i#2 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z i
    clc
    adc.z __16
    sta.z __16
    bcc !+
    inc.z __16+1
  !:
    // (charset + (1 * 8)) [(((unsigned short)c) << 3) + i] = b
    // [44] makecharset::$18 = CHARSET+1*8 + makecharset::$16 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __18
    adc #<CHARSET+1*8
    sta.z __18
    lda.z __18+1
    adc #>CHARSET+1*8
    sta.z __18+1
    // [45] *makecharset::$18 = makecharset::b#2 -- _deref_pbuz1=vbuyy 
    tya
    ldy #0
    sta (__18),y
    // for (unsigned char bc = 0, i = 0; i < 8; i++)
    // [46] makecharset::i#1 = ++ makecharset::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [36] phi from makecharset::@10 to makecharset::@6 [phi:makecharset::@10->makecharset::@6]
    // [36] phi makecharset::bc#6 = makecharset::bc#3 [phi:makecharset::@10->makecharset::@6#0] -- register_copy 
    // [36] phi makecharset::i#2 = makecharset::i#1 [phi:makecharset::@10->makecharset::@6#1] -- register_copy 
    jmp __b6
    // makecharset::@9
  __b9:
    // bc += c
    // [47] makecharset::bc#1 = makecharset::bc#3 + makecharset::c#2 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z c
    tax
    // if (bc > 0x3f)
    // [48] if(makecharset::bc#1<$3f+1) goto makecharset::@11 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$3f+1
    bcc __b11
    // makecharset::@12
    // bc = bc - 0x40
    // [49] makecharset::bc#2 = makecharset::bc#1 - $40 -- vbuxx=vbuxx_minus_vbuc1 
    txa
    axs #$40
    // i & 1
    // [50] makecharset::$11 = makecharset::i#2 & 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z i
    // ii + (i & 1)
    // [51] makecharset::$12 = makecharset::ii#2 + makecharset::$11 -- vbuaa=vbuz1_plus_vbuaa 
    clc
    adc.z ii
    // (ii + (i & 1)) & 0x7
    // [52] makecharset::$13 = makecharset::$12 & 7 -- vbuz1=vbuaa_band_vbuc1 
    and #7
    sta.z __13
    // b += bittab[(ii + (i & 1)) & 0x7]
    // [53] makecharset::b#1 = makecharset::b#2 + makecharset::bittab[makecharset::$13] -- vbuyy=vbuyy_plus_pbuc1_derefidx_vbuz1 
    tya
    ldy.z __13
    clc
    adc bittab,y
    tay
    // [54] phi from makecharset::@12 makecharset::@9 to makecharset::@11 [phi:makecharset::@12/makecharset::@9->makecharset::@11]
    // [54] phi makecharset::b#6 = makecharset::b#1 [phi:makecharset::@12/makecharset::@9->makecharset::@11#0] -- register_copy 
    // [54] phi makecharset::bc#7 = makecharset::bc#2 [phi:makecharset::@12/makecharset::@9->makecharset::@11#1] -- register_copy 
    // makecharset::@11
  __b11:
    // for (unsigned char ii = 0; ii < 8; ii++)
    // [55] makecharset::ii#1 = ++ makecharset::ii#2 -- vbuz1=_inc_vbuz1 
    inc.z ii
    // [39] phi from makecharset::@11 to makecharset::@8 [phi:makecharset::@11->makecharset::@8]
    // [39] phi makecharset::b#2 = makecharset::b#6 [phi:makecharset::@11->makecharset::@8#0] -- register_copy 
    // [39] phi makecharset::bc#3 = makecharset::bc#7 [phi:makecharset::@11->makecharset::@8#1] -- register_copy 
    // [39] phi makecharset::ii#2 = makecharset::ii#1 [phi:makecharset::@11->makecharset::@8#2] -- register_copy 
    jmp __b8
    // makecharset::@4
  __b4:
    // *font = 0xff
    // [56] *makecharset::font1#2 = $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (font1),y
    // for (unsigned char *font = (charset+(64*8)); font != (charset+(256*8)); ++font)
    // [57] makecharset::font1#1 = ++ makecharset::font1#2 -- pbuz1=_inc_pbuz1 
    inc.z font1
    bne !+
    inc.z font1+1
  !:
    // [31] phi from makecharset::@4 to makecharset::@3 [phi:makecharset::@4->makecharset::@3]
    // [31] phi makecharset::font1#2 = makecharset::font1#1 [phi:makecharset::@4->makecharset::@3#0] -- register_copy 
    jmp __b3
    // makecharset::@2
  __b2:
    // *font = 0x00
    // [58] *makecharset::font#2 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (font),y
    // for (unsigned char *font = charset; font != (charset+(1*8)); ++font)
    // [59] makecharset::font#1 = ++ makecharset::font#2 -- pbuz1=_inc_pbuz1 
    inc.z font
    bne !+
    inc.z font+1
  !:
    // [29] phi from makecharset::@2 to makecharset::@1 [phi:makecharset::@2->makecharset::@1]
    // [29] phi makecharset::font#2 = makecharset::font#1 [phi:makecharset::@2->makecharset::@1#0] -- register_copy 
    jmp __b1
    bittab: .byte 1, 2, 4, 8, $10, $20, $40, $80
}
  // fire
// Animate the fire on the passed screen. Uses BUFFER to store the current values.
fire: {
    .label screen = $b
    .label screen_1 = 7
    .label buffer = 5
    .label buffer_1 = 9
    // [61] fire::screen#12 = fire::screen#0 -- pbuz1=pbuz2 
    lda.z screen
    sta.z screen_1
    lda.z screen+1
    sta.z screen_1+1
    // [62] phi from fire to fire::@1 [phi:fire->fire::@1]
    // [62] phi fire::screen#4 = fire::screen#12 [phi:fire->fire::@1#0] -- register_copy 
    // [62] phi fire::buffer#4 = BUFFER [phi:fire->fire::@1#1] -- pbuz1=pbuc1 
    lda #<BUFFER
    sta.z buffer
    lda #>BUFFER
    sta.z buffer+1
    // fire::@1
  __b1:
    // while (buffer != (BUFFER + (24 * 40)))
    // [63] if(fire::buffer#4!=BUFFER+(word)$18*$28) goto fire::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z buffer+1
    cmp #>BUFFER+$18*$28
    bne __b2
    lda.z buffer
    cmp #<BUFFER+$18*$28
    bne __b2
    // fire::@3
    // screen = (screenbase + (24 * 40))
    // [64] fire::screen#1 = fire::screen#0 + (word)$18*$28 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z screen
    adc #<$18*$28
    sta.z screen
    lda.z screen+1
    adc #>$18*$28
    sta.z screen+1
    // [65] phi from fire::@3 to fire::@6 [phi:fire::@3->fire::@6]
    // [65] phi fire::screen#10 = fire::screen#1 [phi:fire::@3->fire::@6#0] -- register_copy 
    // [65] phi fire::buffer#10 = BUFFER+(word)$18*$28 [phi:fire::@3->fire::@6#1] -- pbuz1=pbuc1 
    lda #<BUFFER+$18*$28
    sta.z buffer_1
    lda #>BUFFER+$18*$28
    sta.z buffer_1+1
    // fire::@6
  __b6:
    // for(; buffer != (BUFFER+(25*40)); ++screen, ++buffer)
    // [66] if(fire::buffer#10!=BUFFER+(word)$19*$28) goto fire::sid_rnd1 -- pbuz1_neq_pbuc1_then_la1 
    lda.z buffer_1+1
    cmp #>BUFFER+$19*$28
    bne sid_rnd1
    lda.z buffer_1
    cmp #<BUFFER+$19*$28
    bne sid_rnd1
    // fire::@return
    // }
    // [67] return 
    rts
    // fire::sid_rnd1
  sid_rnd1:
    // return SID->CH3_OSC;
    // [68] fire::sid_rnd1_return#0 = *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC) -- vbuaa=_deref_pbuc1 
    lda SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC
    // fire::@7
    // (sid_rnd())/$10
    // [69] fire::$13 = fire::sid_rnd1_return#0 >> 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // 0x30 + (sid_rnd())/$10
    // [70] fire::$14 = $30 + fire::$13 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #$30
    // *buffer = 0x30 + (sid_rnd())/$10
    // [71] *fire::buffer#10 = fire::$14 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (buffer_1),y
    // *screen = *buffer = 0x30 + (sid_rnd())/$10
    // [72] *fire::screen#10 = *fire::buffer#10 -- _deref_pbuz1=_deref_pbuz2 
    lda (buffer_1),y
    sta (screen),y
    // for(; buffer != (BUFFER+(25*40)); ++screen, ++buffer)
    // [73] fire::screen#3 = ++ fire::screen#10 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [74] fire::buffer#3 = ++ fire::buffer#10 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [65] phi from fire::@7 to fire::@6 [phi:fire::@7->fire::@6]
    // [65] phi fire::screen#10 = fire::screen#3 [phi:fire::@7->fire::@6#0] -- register_copy 
    // [65] phi fire::buffer#10 = fire::buffer#3 [phi:fire::@7->fire::@6#1] -- register_copy 
    jmp __b6
    // fire::@2
  __b2:
    // buffer[40-1] + buffer[40-1]
    // [75] fire::$4 = fire::buffer#4[$28-1] + fire::buffer#4[$28-1] -- vbuaa=pbuz1_derefidx_vbuc1_plus_pbuz1_derefidx_vbuc1 
    ldy #$28-1
    lda (buffer),y
    clc
    adc (buffer),y
    // buffer[40-1] + buffer[40-1] + buffer[40]
    // [76] fire::$5 = fire::$4 + fire::buffer#4[$28] -- vbuaa=vbuaa_plus_pbuz1_derefidx_vbuc1 
    ldy #$28
    clc
    adc (buffer),y
    // buffer[40-1] + buffer[40-1] + buffer[40] + buffer[41]
    // [77] fire::$6 = fire::$5 + fire::buffer#4[$29] -- vbuaa=vbuaa_plus_pbuz1_derefidx_vbuc1 
    ldy #$29
    clc
    adc (buffer),y
    // c = ( buffer[40-1] + buffer[40-1] + buffer[40] + buffer[41] )/4
    // [78] fire::c#0 = fire::$6 >> 2 -- vbuaa=vbuaa_ror_2 
    lsr
    lsr
    // if (c > 2)
    // [79] if(fire::c#0<2+1) goto fire::@4 -- vbuaa_lt_vbuc1_then_la1 
    cmp #2+1
    bcc __b4
    // fire::@5
    // c -= 3
    // [80] fire::c#1 = fire::c#0 - 3 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #3
    // [81] phi from fire::@2 fire::@5 to fire::@4 [phi:fire::@2/fire::@5->fire::@4]
    // [81] phi fire::c#2 = fire::c#0 [phi:fire::@2/fire::@5->fire::@4#0] -- register_copy 
    // fire::@4
  __b4:
    // *buffer = c
    // [82] *fire::buffer#4 = fire::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (buffer),y
    // *screen = *buffer = c
    // [83] *fire::screen#4 = *fire::buffer#4 -- _deref_pbuz1=_deref_pbuz2 
    lda (buffer),y
    sta (screen_1),y
    // ++screen;
    // [84] fire::screen#2 = ++ fire::screen#4 -- pbuz1=_inc_pbuz1 
    inc.z screen_1
    bne !+
    inc.z screen_1+1
  !:
    // ++buffer;
    // [85] fire::buffer#2 = ++ fire::buffer#4 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [62] phi from fire::@4 to fire::@1 [phi:fire::@4->fire::@1]
    // [62] phi fire::screen#4 = fire::screen#2 [phi:fire::@4->fire::@1#0] -- register_copy 
    // [62] phi fire::buffer#4 = fire::buffer#2 [phi:fire::@4->fire::@1#1] -- register_copy 
    jmp __b1
}
  // File Data

