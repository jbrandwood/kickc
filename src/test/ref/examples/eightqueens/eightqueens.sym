const nomodify byte* COLORRAM = (byte*) 55296
const nomodify byte* DEFAULT_SCREEN = (byte*) 1024
const byte* DIGITS[]  = "0123456789abcdef"z
const nomodify byte LIGHT_BLUE = $e
const byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
const dword* RADIX_DECIMAL_VALUES_LONG[]  = { $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a }
const byte* RADIX_HEXADECIMAL_VALUES_CHAR[]  = { $10 }
const byte SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
void __start()
const byte* board[$14]  = { fill( $14, 0) }
void clrscr()
byte clrscr::c
byte clrscr::c#1 reg byte y 20002.0
byte clrscr::c#2 reg byte y 12501.25
byte clrscr::l
byte clrscr::l#1 reg byte x 2002.0
byte clrscr::l#2 reg byte x 333.6666666666667
byte* clrscr::line_cols
byte* clrscr::line_cols#1 line_cols zp[2]:21 1001.0
byte* clrscr::line_cols#5 line_cols zp[2]:21 1500.375
byte* clrscr::line_text
byte* clrscr::line_text#1 line_text zp[2]:19 667.3333333333334
byte* clrscr::line_text#5 line_text zp[2]:19 1714.7142857142858
void conio_c64_init()
const nomodify byte* conio_c64_init::BASIC_CURSOR_LINE = (byte*) 214
byte conio_c64_init::line
byte conio_c64_init::line#0 reg byte x 11.0
byte conio_c64_init::line#2 reg byte x 22.0
byte conio_cursor_x loadstore zp[1]:23 9.375000006256875E11
byte conio_cursor_y loadstore zp[1]:24 1.8285714286286336E13
byte* conio_line_color loadstore zp[2]:27 1.3393939394546113E13
byte* conio_line_text loadstore zp[2]:25 1.3154761905357791E13
dword count
dword count#10 count zp[4]:2 445.5
dword count#2 count zp[4]:2 387.19354838709677
void cputc(byte cputc::c)
byte cputc::c
byte cputc::c#0 reg byte a 2.0000000002E10
byte cputc::c#1 reg byte a 2.000000000002E12
byte cputc::c#2 reg byte a 2.00000002E8
byte cputc::c#3 reg byte a 1.05050500000025E13
void cputln()
void cputs(to_nomodify byte* cputs::s)
byte cputs::c
byte cputs::c#1 reg byte a 1.0000000001E10
to_nomodify byte* cputs::s
to_nomodify byte* cputs::s#0 s zp[2]:19 5.0000000005E9
to_nomodify byte* cputs::s#11 s zp[2]:19 1.5500000002E10
to_nomodify byte* cputs::s#12 s zp[2]:19 1.000000001E9
void cscroll()
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte*~ gotoxy::$5 zp[2]:33 200002.0
byte*~ gotoxy::$6 zp[2]:29 200002.0
word~ gotoxy::$7 zp[2]:29 150001.5
word~ gotoxy::$8 zp[2]:31 200002.0
word~ gotoxy::$9 zp[2]:29 200002.0
word gotoxy::line_offset
word gotoxy::line_offset#0 line_offset zp[2]:29 100001.0
byte gotoxy::x
byte gotoxy::y
byte gotoxy::y#2 reg byte x 22.0
byte gotoxy::y#4 reg byte x 66671.0
byte gotoxy::y#5 reg byte x 66667.33333333333
byte legal(byte legal::row , byte legal::column)
byte~ legal::$0 reg byte x 2000002.0
byte legal::column
byte legal::column#0 column zp[1]:35 235353.23529411765
byte legal::diff1_a
byte legal::diff1_a#0 reg byte a 2000002.0
byte legal::diff1_b
byte legal::diff1_return
byte legal::diff1_return#0 diff1_return zp[1]:11 2000002.0
byte legal::diff1_return#1 diff1_return zp[1]:11 2000002.0
byte legal::diff1_return#2 diff1_return zp[1]:11 600000.6000000001
byte legal::diff2_a
byte legal::diff2_b
byte legal::diff2_return
byte legal::diff2_return#0 reg byte a 2000002.0
byte legal::diff2_return#1 reg byte a 2000002.0
byte legal::diff2_return#2 reg byte a 3000003.0
byte legal::i
byte legal::i#1 reg byte y 2000002.0
byte legal::i#10 reg byte y 571429.1428571428
byte legal::return
byte legal::return#0 reg byte a 2002.0
byte legal::return#4 reg byte a 333.6666666666667
byte legal::row
byte legal::row#0 row zp[1]:10 222278.05555555556
void main()
const byte* main::s[$29]  = " - n queens problem using backtracking -"
const byte* main::s1[$13]  = "
number of queens:"
const byte* main::s2[$e]  = "

solutions: "
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2 destination zp[2]:36
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:36 1.0E20
byte* memcpy::dst#2 dst zp[2]:36 1.0000333333333333E20
byte* memcpy::dst#4 dst zp[2]:36 2.0E16
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2 source zp[2]:21
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:21 2.0E20
byte* memcpy::src#2 src zp[2]:21 1.000025E20
byte* memcpy::src#4 src zp[2]:21 1.0E16
byte* memcpy::src_end
byte* memcpy::src_end#0 src_end zp[2]:43 1.250125E19
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 reg byte x 1.4285714285714287E19
byte* memset::dst
byte* memset::dst#1 dst zp[2]:21 2.0E20
byte* memset::dst#2 dst zp[2]:21 1.3333666666666666E20
byte* memset::dst#4 dst zp[2]:21 2.0E16
byte* memset::end
byte* memset::end#0 end zp[2]:43 1.6668333333333332E19
word memset::num
void* memset::return
void* memset::str
void* memset::str#3 str zp[2]:21
void print()
byte print::i
byte print::i#1 i zp[1]:35 2000002.0
byte print::i#2 i zp[1]:35 1000001.0
byte print::i1
byte print::i1#1 i1 zp[1]:12 2000002.0
byte print::i1#2 i1 zp[1]:12 1000000.357142857
byte print::j
byte print::j#1 j zp[1]:13 2.0000002E7
byte print::j#2 j zp[1]:13 5714286.285714285
const byte* print::s[3]  = "
#"
const byte* print::s1[4]  = ":
 "
const byte* print::s3[2]  = "Q"
const byte* print::s4[2]  = "-"
struct printf_buffer_number printf_buffer loadstore mem[12] = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
word~ printf_number_buffer::$19 zp[2]:19 1.00000001E8
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 buffer_sign zp[1]:14 200002.0
byte printf_number_buffer::buffer_sign#1 buffer_sign zp[1]:14 202.0
byte printf_number_buffer::buffer_sign#10 buffer_sign zp[1]:14 1.55050053E7
byte printf_number_buffer::buffer_sign#2 buffer_sign zp[1]:14 2.0000002E7
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_justify_left#10 format_justify_left zp[1]:11 6451612.9677419355
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_min_length#3 reg byte x 1.00000001E7
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_upper_case#10 format_upper_case zp[1]:17 3846153.8846153845
byte printf_number_buffer::format_zero_padding
byte printf_number_buffer::format_zero_padding#10 format_zero_padding zp[1]:13 9375000.09375
signed byte printf_number_buffer::len
signed byte printf_number_buffer::len#0 reg byte y 1.500000015E8
signed byte printf_number_buffer::len#1 reg byte y 2.00000002E8
signed byte printf_number_buffer::len#2 reg byte y 3.00000003E8
signed byte printf_number_buffer::padding
signed byte printf_number_buffer::padding#1 padding zp[1]:18 1.00000001E8
signed byte printf_number_buffer::padding#10 padding zp[1]:18 1.904761923809524E7
void printf_padding(byte printf_padding::pad , byte printf_padding::length)
byte printf_padding::i
byte printf_padding::i#1 i zp[1]:16 2.000000000002E12
byte printf_padding::i#2 i zp[1]:16 7.5000000000075E11
byte printf_padding::length
byte printf_padding::length#0 length zp[1]:42 2.00000002E8
byte printf_padding::length#1 length zp[1]:42 2.00000002E8
byte printf_padding::length#2 length zp[1]:42 2.00000002E8
byte printf_padding::length#4 length zp[1]:42 1.6671666666733334E11
byte printf_padding::pad
byte printf_padding::pad#5 pad zp[1]:15 1.6666666666683334E11
void printf_uchar(byte printf_uchar::uvalue , byte printf_uchar::format_min_length , byte printf_uchar::format_justify_left , byte printf_uchar::format_sign_always , byte printf_uchar::format_zero_padding , byte printf_uchar::format_upper_case , byte printf_uchar::format_radix)
struct printf_format_number printf_uchar::format
byte printf_uchar::format_justify_left
byte printf_uchar::format_min_length
byte printf_uchar::format_radix
byte printf_uchar::format_sign_always
byte printf_uchar::format_upper_case
byte printf_uchar::format_zero_padding
byte printf_uchar::uvalue
byte printf_uchar::uvalue#0 reg byte x 2000002.0
byte printf_uchar::uvalue#1 reg byte x 2000002.0
byte printf_uchar::uvalue#2 reg byte x 6000001.5
void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
struct printf_format_number printf_uint::format
byte printf_uint::format_justify_left
const byte printf_uint::format_justify_left#0 format_justify_left = 0
byte printf_uint::format_min_length
const byte printf_uint::format_min_length#0 format_min_length = 0
byte printf_uint::format_radix
byte printf_uint::format_sign_always
byte printf_uint::format_upper_case
const byte printf_uint::format_upper_case#0 format_upper_case = 0
byte printf_uint::format_zero_padding
const byte printf_uint::format_zero_padding#0 format_zero_padding = 0
word printf_uint::uvalue
const word printf_uint::uvalue#0 uvalue = 8
void printf_ulong(dword printf_ulong::uvalue , byte printf_ulong::format_min_length , byte printf_ulong::format_justify_left , byte printf_ulong::format_sign_always , byte printf_ulong::format_zero_padding , byte printf_ulong::format_upper_case , byte printf_ulong::format_radix)
struct printf_format_number printf_ulong::format
byte printf_ulong::format_justify_left
byte printf_ulong::format_min_length
byte printf_ulong::format_radix
byte printf_ulong::format_sign_always
byte printf_ulong::format_upper_case
byte printf_ulong::format_zero_padding
dword printf_ulong::uvalue
dword printf_ulong::uvalue#0 uvalue zp[4]:6 22.0
dword printf_ulong::uvalue#1 uvalue zp[4]:6 20002.0
dword printf_ulong::uvalue#2 uvalue zp[4]:6 55006.5
void queens()
byte~ queens::$2 reg byte a 2002.0
byte queens::row
byte queens::row#1 row zp[1]:10 2002.0
byte queens::row#10 row zp[1]:10 1144.0
byte queens::row#2 row zp[1]:10 2002.0
const byte* s3[2]  = "
"
word strlen(byte* strlen::str)
word strlen::len
word strlen::len#1 len zp[2]:19 1.000000000001E12
word strlen::len#2 len zp[2]:19 5.0002500000075E11
word strlen::return
word strlen::return#2 return zp[2]:19 2.00000002E8
byte* strlen::str
byte* strlen::str#0 str zp[2]:21 2.000000000002E12
byte* strlen::str#2 str zp[2]:21 1.000000000001E12
byte* strupr(byte* strupr::str)
byte~ strupr::$0 reg byte a 2.000000000002E12
byte* strupr::return
byte* strupr::src
byte* strupr::src#1 src zp[2]:21 2.000000000002E12
byte* strupr::src#2 src zp[2]:21 7.142857142864285E11
byte* strupr::str
const byte* strupr::str#0 str = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
byte toupper(byte toupper::ch)
byte toupper::ch
byte toupper::ch#0 reg byte a 1.7000000000001998E13
byte toupper::return
byte toupper::return#0 reg byte a 2.0000000000002E13
byte toupper::return#2 reg byte a 1.0333333333334666E13
byte toupper::return#3 reg byte a 2.000000000002E12
void uctoa(byte uctoa::value , byte* uctoa::buffer , byte uctoa::radix)
byte* uctoa::buffer
byte* uctoa::buffer#11 buffer zp[2]:19 3.3350000000500004E10
byte* uctoa::buffer#14 buffer zp[2]:19 1.500000000015E11
byte* uctoa::buffer#3 buffer zp[2]:19 2.00000002E8
byte* uctoa::buffer#4 buffer zp[2]:19 2.00000000002E11
byte uctoa::digit
byte uctoa::digit#1 digit zp[1]:17 2.00000000002E11
byte uctoa::digit#2 digit zp[1]:17 3.076923076953846E10
byte uctoa::digit_value
byte uctoa::digit_value#0 digit_value zp[1]:42 6.0000000000600006E10
byte* uctoa::digit_values
byte uctoa::max_digits
byte uctoa::radix
byte uctoa::started
byte uctoa::started#2 started zp[1]:18 6.0000000000600006E10
byte uctoa::started#4 started zp[1]:18 1.00000000001E11
byte uctoa::value
byte uctoa::value#0 reg byte x 1.00000000001E11
byte uctoa::value#1 reg byte x 5.5000001E7
byte uctoa::value#2 reg byte x 6.670000000100001E10
byte uctoa::value#6 reg byte x 1.500000000015E11
byte uctoa_append(byte* uctoa_append::buffer , byte uctoa_append::value , byte uctoa_append::sub)
byte* uctoa_append::buffer
byte* uctoa_append::buffer#0 buffer zp[2]:19 1.3750000000025E11
byte uctoa_append::digit
byte uctoa_append::digit#1 reg byte y 1.0E16
byte uctoa_append::digit#2 reg byte y 1.00005E16
byte uctoa_append::return
byte uctoa_append::return#0 reg byte x 2.00000000002E11
byte uctoa_append::sub
byte uctoa_append::sub#0 sub zp[1]:42 3.33335E15
byte uctoa_append::value
byte uctoa_append::value#0 reg byte x 3.666666666673334E11
byte uctoa_append::value#1 reg byte x 2.0E16
byte uctoa_append::value#2 reg byte x 5.000183333333334E15
void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
byte~ ultoa::$10 reg byte a 2.00000002E8
byte~ ultoa::$11 reg byte a 2000002.0
byte* ultoa::buffer
byte* ultoa::buffer#11 buffer zp[2]:19 2.871428614285714E7
byte* ultoa::buffer#14 buffer zp[2]:19 1.500000015E8
byte* ultoa::buffer#3 buffer zp[2]:19 2000002.0
byte* ultoa::buffer#4 buffer zp[2]:19 2.00000002E8
byte ultoa::digit
byte ultoa::digit#1 digit zp[1]:14 2.00000002E8
byte ultoa::digit#2 digit zp[1]:14 2.857142885714286E7
dword ultoa::digit_value
dword ultoa::digit_value#0 digit_value zp[4]:38 6.0000000599999994E7
dword* ultoa::digit_values
byte ultoa::max_digits
byte ultoa::radix
byte ultoa::started
byte ultoa::started#2 reg byte x 5.00000005E7
byte ultoa::started#4 reg byte x 1.00000001E8
dword ultoa::value
dword ultoa::value#0 value zp[4]:6 1.00000001E8
dword ultoa::value#1 value zp[4]:6 550001.0
dword ultoa::value#2 value zp[4]:6 5.7285715E7
dword ultoa::value#6 value zp[4]:6 1.500000015E8
dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
byte* ultoa_append::buffer
byte* ultoa_append::buffer#0 buffer zp[2]:19 1.3750000025E8
byte ultoa_append::digit
byte ultoa_append::digit#1 reg byte x 1.000000000001E12
byte ultoa_append::digit#2 reg byte x 1.0005000000015E12
dword ultoa_append::return
dword ultoa_append::return#0 return zp[4]:6 2.00000002E8
dword ultoa_append::sub
dword ultoa_append::sub#0 sub zp[4]:38 3.333500000005E11
dword ultoa_append::value
dword ultoa_append::value#0 value zp[4]:6 3.666666673333334E8
dword ultoa_append::value#1 value zp[4]:6 2.000000000002E12
dword ultoa_append::value#2 value zp[4]:6 5.0018333333416675E11
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 reg byte a 20002.0
byte~ utoa::$11 reg byte a 2002.0
byte* utoa::buffer
byte* utoa::buffer#11 buffer zp[2]:19 3000.4285714285716
byte* utoa::buffer#14 buffer zp[2]:19 15001.5
byte* utoa::buffer#3 buffer zp[2]:19 2002.0
byte* utoa::buffer#4 buffer zp[2]:19 20002.0
byte utoa::digit
byte utoa::digit#1 digit zp[1]:10 20002.0
byte utoa::digit#2 digit zp[1]:10 2857.4285714285716
word utoa::digit_value
word utoa::digit_value#0 digit_value zp[2]:36 6000.6
word* utoa::digit_values
byte utoa::max_digits
const byte utoa::max_digits#1 max_digits = 5
byte utoa::radix
byte utoa::started
byte utoa::started#2 reg byte x 5000.5
byte utoa::started#4 reg byte x 10001.0
word utoa::value
word utoa::value#0 value zp[2]:21 10001.0
word utoa::value#2 value zp[2]:21 5714.857142857143
word utoa::value#6 value zp[2]:21 15001.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 buffer zp[2]:19 13750.25
byte utoa_append::digit
byte utoa_append::digit#1 reg byte x 1.0000001E7
byte utoa_append::digit#2 reg byte x 1.00500015E7
word utoa_append::return
word utoa_append::return#0 return zp[2]:21 20002.0
word utoa_append::sub
word utoa_append::sub#0 sub zp[2]:36 3335000.5
word utoa_append::value
word utoa_append::value#0 value zp[2]:21 36667.33333333333
word utoa_append::value#1 value zp[2]:21 2.0000002E7
word utoa_append::value#2 value zp[2]:21 5018334.166666666

reg byte x [ conio_c64_init::line#2 conio_c64_init::line#0 ]
reg byte x [ gotoxy::y#5 gotoxy::y#4 gotoxy::y#2 ]
reg byte x [ clrscr::l#2 clrscr::l#1 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
zp[4]:2 [ count#10 count#2 ]
zp[4]:6 [ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ultoa_append::return#0 ]
reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ]
zp[1]:10 [ utoa::digit#2 utoa::digit#1 queens::row#10 queens::row#1 queens::row#2 legal::row#0 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
reg byte x [ printf_number_buffer::format_min_length#3 ]
reg byte y [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
reg byte y [ legal::i#10 legal::i#1 ]
reg byte a [ legal::return#4 ]
zp[1]:11 [ legal::diff1_return#2 legal::diff1_return#0 legal::diff1_return#1 printf_number_buffer::format_justify_left#10 ]
reg byte a [ legal::diff2_return#2 legal::diff2_return#0 legal::diff2_return#1 ]
zp[1]:12 [ print::i1#2 print::i1#1 ]
zp[1]:13 [ print::j#2 print::j#1 printf_number_buffer::format_zero_padding#10 ]
zp[1]:14 [ ultoa::digit#2 ultoa::digit#1 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
reg byte x [ ultoa::started#2 ultoa::started#4 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[1]:15 [ printf_padding::pad#5 ]
zp[1]:16 [ printf_padding::i#2 printf_padding::i#1 ]
reg byte x [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
reg byte x [ ultoa_append::digit#2 ultoa_append::digit#1 ]
reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
zp[1]:17 [ uctoa::digit#2 uctoa::digit#1 printf_number_buffer::format_upper_case#10 ]
reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
zp[1]:18 [ uctoa::started#2 uctoa::started#4 printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
zp[2]:19 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 cputs::s#11 cputs::s#12 cputs::s#0 clrscr::line_text#5 clrscr::line_text#1 ]
zp[2]:21 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 strupr::src#2 strupr::src#1 strlen::str#2 strlen::str#0 utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 clrscr::line_cols#5 clrscr::line_cols#1 ]
reg byte x [ memset::c#4 ]
reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ]
zp[1]:23 [ conio_cursor_x ]
zp[1]:24 [ conio_cursor_y ]
zp[2]:25 [ conio_line_text ]
zp[2]:27 [ conio_line_color ]
zp[2]:29 [ gotoxy::$7 gotoxy::$9 gotoxy::line_offset#0 gotoxy::$6 ]
zp[2]:31 [ gotoxy::$8 ]
zp[2]:33 [ gotoxy::$5 ]
reg byte a [ cputs::c#1 ]
zp[1]:35 [ legal::column#0 print::i#2 print::i#1 ]
reg byte a [ legal::return#0 ]
reg byte a [ queens::$2 ]
reg byte a [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:36 [ utoa::digit_value#0 utoa_append::sub#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
reg byte x [ legal::$0 ]
reg byte a [ legal::diff1_a#0 ]
reg byte a [ ultoa::$11 ]
reg byte a [ ultoa::$10 ]
zp[4]:38 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
reg byte a [ toupper::return#3 ]
reg byte a [ strupr::$0 ]
zp[1]:42 [ uctoa::digit_value#0 uctoa_append::sub#0 printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
reg byte x [ uctoa_append::return#0 ]
zp[2]:43 [ memset::end#0 memcpy::src_end#0 ]
mem[12] [ printf_buffer ]
