Fixing struct type size struct Point to 4
Fixing struct type size struct Point to 4
Fixing struct type SIZE_OF struct Point to 4
Fixing struct type SIZE_OF struct Point to 4

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  *(&main::point1) = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT)
  main::point1 = struct-unwound {*(&main::point1)}
  SCREEN[0] = *((byte*)&main::point1+OFFSET_STRUCT_POINT_X)
  SCREEN[1] = ((byte*)&main::point1+OFFSET_STRUCT_POINT_INITIALS)[0]
  SCREEN[2] = ((byte*)&main::point1+OFFSET_STRUCT_POINT_INITIALS)[1]
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const struct Point $0 = { x: 2, initials: "jg" }
const byte OFFSET_STRUCT_POINT_INITIALS = 1
const byte OFFSET_STRUCT_POINT_X = 0
const nomodify byte* SCREEN = (byte*)$400
const byte SIZEOF_STRUCT_POINT = 4
void __start()
void main()
struct Point main::point1 loadstore

Adding number conversion cast (unumber) 0 in SCREEN[0] = *((byte*)&main::point1+OFFSET_STRUCT_POINT_X)
Adding number conversion cast (unumber) 0 in SCREEN[1] = ((byte*)&main::point1+OFFSET_STRUCT_POINT_INITIALS)[0]
Adding number conversion cast (unumber) 1 in SCREEN[1] = ((byte*)&main::point1+OFFSET_STRUCT_POINT_INITIALS)[(unumber)0]
Adding number conversion cast (unumber) 1 in SCREEN[2] = ((byte*)&main::point1+OFFSET_STRUCT_POINT_INITIALS)[1]
Adding number conversion cast (unumber) 2 in SCREEN[2] = ((byte*)&main::point1+OFFSET_STRUCT_POINT_INITIALS)[(unumber)1]
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Removing C-classic struct-unwound assignment [1] main::point1 = struct-unwound {*(&main::point1)}
Simplifying expression containing zero (byte*)&main::point1 in [2] SCREEN[0] = *((byte*)&main::point1+OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero SCREEN in [2] SCREEN[0] = *((byte*)&main::point1)
Simplifying expression containing zero (byte*)&main::point1+OFFSET_STRUCT_POINT_INITIALS in [3] SCREEN[1] = ((byte*)&main::point1+OFFSET_STRUCT_POINT_INITIALS)[0]
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Consolidated array index constant in *(SCREEN+1)
Consolidated array index constant in *((byte*)&main::point1+OFFSET_STRUCT_POINT_INITIALS+1)
Consolidated array index constant in *(SCREEN+2)
Successful SSA optimization Pass2ConstantAdditionElimination
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *(&main::point1) = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT)
  [1] *SCREEN = *((byte*)&main::point1)
  [2] *(SCREEN+1) = *((byte*)&main::point1+OFFSET_STRUCT_POINT_INITIALS)
  [3] *(SCREEN+2) = *((byte*)&main::point1+OFFSET_STRUCT_POINT_INITIALS+1)
  to:main::@return
main::@return: scope:[main]  from main
  [4] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
struct Point main::point1 loadstore

Initial phi equivalence classes
Added variable main::point1 to live range equivalence class [ main::point1 ]
Complete equivalence classes
[ main::point1 ]
Allocated zp[4]:2 [ main::point1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *(&main::point1) = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT) [ main::point1 ] (  [ main::point1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [1] *SCREEN = *((byte*)&main::point1) [ main::point1 ] (  [ main::point1 ] { }  ) always clobbers reg byte a 
Statement [2] *(SCREEN+1) = *((byte*)&main::point1+OFFSET_STRUCT_POINT_INITIALS) [ main::point1 ] (  [ main::point1 ] { }  ) always clobbers reg byte a 
Statement [3] *(SCREEN+2) = *((byte*)&main::point1+OFFSET_STRUCT_POINT_INITIALS+1) [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers zp[4]:2 [ main::point1 ] : zp[4]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [Point] 
Uplift Scope [main] 0: zp[4]:2 [ main::point1 ] 
Uplift Scope [] 

Uplifting [Point] best 48 combination 
Uplifting [main] best 48 combination zp[4]:2 [ main::point1 ] 
Uplifting [] best 48 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct with C-Standard behavior - member is array, copy assignment
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-27.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 4
  .const OFFSET_STRUCT_POINT_INITIALS = 1
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label point1 = 2
    // [0] *(&main::point1) = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda __0-1,y
    sta point1-1,y
    dey
    bne !-
    // [1] *SCREEN = *((byte*)&main::point1) -- _deref_pbuc1=_deref_pbuc2 
    lda.z point1
    sta SCREEN
    // [2] *(SCREEN+1) = *((byte*)&main::point1+OFFSET_STRUCT_POINT_INITIALS) -- _deref_pbuc1=_deref_pbuc2 
    lda point1+OFFSET_STRUCT_POINT_INITIALS
    sta SCREEN+1
    // [3] *(SCREEN+2) = *((byte*)&main::point1+OFFSET_STRUCT_POINT_INITIALS+1) -- _deref_pbuc1=_deref_pbuc2 
    lda point1+OFFSET_STRUCT_POINT_INITIALS+1
    sta SCREEN+2
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data
.segment Data
  __0: .byte 2
  .text "jg"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const struct Point $0 = { x: 2, initials: "jg" }
const byte OFFSET_STRUCT_POINT_INITIALS = 1
const nomodify byte* SCREEN = (byte*) 1024
const byte SIZEOF_STRUCT_POINT = 4
void main()
struct Point main::point1 loadstore zp[4]:2

zp[4]:2 [ main::point1 ]


FINAL ASSEMBLER
Score: 45

  // File Comments
// Minimal struct with C-Standard behavior - member is array, copy assignment
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-27.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 4
  .const OFFSET_STRUCT_POINT_INITIALS = 1
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label point1 = 2
    // point1 = { 2, "jg" }
    // [0] *(&main::point1) = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda __0-1,y
    sta point1-1,y
    dey
    bne !-
    // SCREEN[0] = point1.x
    // [1] *SCREEN = *((byte*)&main::point1) -- _deref_pbuc1=_deref_pbuc2 
    lda.z point1
    sta SCREEN
    // SCREEN[1] = point1.initials[0]
    // [2] *(SCREEN+1) = *((byte*)&main::point1+OFFSET_STRUCT_POINT_INITIALS) -- _deref_pbuc1=_deref_pbuc2 
    lda point1+OFFSET_STRUCT_POINT_INITIALS
    sta SCREEN+1
    // SCREEN[2] = point1.initials[1]
    // [3] *(SCREEN+2) = *((byte*)&main::point1+OFFSET_STRUCT_POINT_INITIALS+1) -- _deref_pbuc1=_deref_pbuc2 
    lda point1+OFFSET_STRUCT_POINT_INITIALS+1
    sta SCREEN+2
    // main::@return
    // }
    // [4] return 
    rts
}
  // File Data
.segment Data
  __0: .byte 2
  .text "jg"
  .byte 0

