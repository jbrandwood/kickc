(label) @1
(label) @begin
(label) @end
(const nomodify struct MOS6526_CIA*) CIA2 = (struct MOS6526_CIA*) 56576
(const nomodify dword*) CIA2_TIMER_AB = (dword*) 56580
(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = (byte) $40
(const nomodify byte) CIA_TIMER_CONTROL_START = (byte) 1
(const nomodify word) CLOCKS_PER_FRAME = (word) $4cc8
(const nomodify dword) CLOCKS_PER_INIT = (dword) $12
(const nomodify dword) CLOCKS_PER_SEC = (dword)(const nomodify word) CLOCKS_PER_FRAME*(const nomodify byte) FRAMES_PER_SEC
(const nomodify word) COUNT = (word) $4000
(const nomodify byte*) D018 = (byte*) 53272
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const nomodify byte) FRAMES_PER_SEC = (byte) $3c
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = (byte) $e
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = (byte) $f
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(const dword*) RADIX_DECIMAL_VALUES_LONG[]  = { (dword) $3b9aca00, (dword) $5f5e100, (dword) $989680, (dword) $f4240, (dword) $186a0, (dword) $2710, (dword) $3e8, (dword) $64, (dword) $a }
(const nomodify byte*) SCREEN = (byte*) 1024
(const nomodify byte) SQRT_COUNT = (byte) $80
(dword()) clock()
(label) clock::@return
(dword) clock::return
(dword) clock::return#0 return zp[4]:15 37.33333333333333
(dword) clock::return#2 return zp[4]:15 22.0
(void()) clock_start()
(label) clock_start::@return
(const byte*) decimal_digits[(number) 6]  = { fill( 6, 0) }
(const byte*) decimal_digits_long[(number) $b]  = { fill( $b, 0) }
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(label) div32u16u::@1
(label) div32u16u::@2
(label) div32u16u::@return
(dword) div32u16u::dividend
(dword) div32u16u::dividend#0 dividend zp[4]:15 42.599999999999994
(word) div32u16u::divisor
(const word) div32u16u::divisor#0 divisor = (word)(const nomodify dword) CLOCKS_PER_SEC/(byte) $64
(dword) div32u16u::quotient
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0 quotient_hi zp[2]:33 33.666666666666664
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0 quotient_lo zp[2]:27 202.0
(dword) div32u16u::return
(dword) div32u16u::return#0 return zp[4]:23 37.33333333333333
(dword) div32u16u::return#2 return zp[4]:23 22.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 20002.0
(byte~) divr16u::$2 reg byte a 20002.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp[2]:21 2500.25
(word) divr16u::dividend#1 dividend zp[2]:21 202.0
(word) divr16u::dividend#2 dividend zp[2]:21 101.0
(word) divr16u::dividend#3 dividend zp[2]:21 4429.142857142857
(word) divr16u::dividend#5 dividend zp[2]:21 1203.0
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 15001.5
(byte) divr16u::i#2 reg byte x 1538.6153846153845
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp[2]:27 15001.5
(word) divr16u::quotient#2 quotient zp[2]:27 10001.0
(word) divr16u::quotient#3 quotient zp[2]:27 2500.25
(word) divr16u::rem
(word) divr16u::rem#0 rem zp[2]:19 7500.75
(word) divr16u::rem#1 rem zp[2]:19 20002.0
(word) divr16u::rem#10 rem zp[2]:19 1102.0
(word) divr16u::rem#11 rem zp[2]:19 10334.666666666666
(word) divr16u::rem#2 rem zp[2]:19 20002.0
(word) divr16u::rem#4 rem zp[2]:19 202.0
(word) divr16u::rem#5 rem zp[2]:19 21003.0
(word) divr16u::rem#6 rem zp[2]:19 10001.0
(word) divr16u::return
(word) divr16u::return#0 return zp[2]:27 4315.0
(word) divr16u::return#2 return zp[2]:27 202.0
(word) divr16u::return#3 return zp[2]:27 202.0
(void()) main()
(dword~) main::$10 zp[4]:15 22.0
(dword~) main::$12 zp[4]:23 11.0
(byte*~) main::$33 zp[2]:27 202.0
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@19
(label) main::@2
(label) main::@20
(label) main::@21
(label) main::@22
(label) main::@23
(label) main::@24
(label) main::@25
(label) main::@26
(label) main::@27
(label) main::@28
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(dword) main::cyclecount
(dword) main::cyclecount#0 cyclecount zp[4]:15 2.75
(word) main::i
(word) main::i#10 i_1 zp[2]:4 50.5
(word) main::i#12 i zp[2]:10 240.6
(word) main::i#2 i zp[2]:10 101.0
(word) main::i#3 i_1 zp[2]:4 202.0
(word) main::j
(word) main::j#0 j zp[2]:6 151.5
(word) main::j#1 j zp[2]:6 2002.0
(word) main::j#2 j zp[2]:6 776.0
(byte*) main::s
(byte*) main::s#0 s zp[2]:8 202.0
(byte*) main::s#1 s zp[2]:8 1001.0
(byte*) main::s#2 s zp[2]:8 1034.6666666666667
(word) main::sec100s
(word) main::sec100s#0 sec100s zp[2]:4 7.333333333333333
(byte*) main::sieve_i
(byte*) main::sieve_i#1 sieve_i zp[2]:2 202.0
(byte*) main::sieve_i#2 sieve_i zp[2]:2 27.545454545454547
(const byte*) main::str[(byte) $25]  = (byte*) "Sieve benchmark - calculating primes"
(const byte*) main::str1[(byte) $f]  = (byte*) "between 2 and "
(const byte*) main::str2[(byte) $16]  = (byte*) "100ths seconds used: "
(const byte*) main::str3[(byte) $a]  = (byte*) " cycles: "
(const byte*) main::str4[(byte) 4]  = (byte*) "..."
(label) main::toD0181
(byte*) main::toD0181_gfx
(const byte*) main::toD0181_gfx#0 toD0181_gfx = (byte*) 6144
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >(word)(const nomodify byte*) SCREEN&(word) $3fff*(byte) 4|>(word)(const byte*) main::toD0181_gfx#0/(byte) 4&(byte) $f
(byte*) main::toD0181_screen
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#4 reg byte x 1250.125
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:27 20002.0
(byte*) memset::dst#2 dst zp[2]:27 13668.333333333332
(byte*) memset::dst#4 dst zp[2]:27 2002.0
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:21 1833.6666666666665
(word) memset::num
(word) memset::num#2 num zp[2]:21 1001.0
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp[2]:27
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 2000002.0
(byte) print_char::ch#2 reg byte a 1.1000002E7
(byte*) print_char_cursor
(byte*) print_char_cursor#10 print_char_cursor_1 zp[2]:12 2200020.6
(byte*) print_char_cursor#2 print_char_cursor zp[2]:10 636701.1818181818
(byte*) print_char_cursor#59 print_char_cursor zp[2]:10 281.0
(byte*) print_char_cursor#63 print_char_cursor_1 zp[2]:12 65.0
(byte*) print_char_cursor#67 print_char_cursor zp[2]:10 11147.0
(byte*) print_char_cursor#77 print_char_cursor_1 zp[2]:12 151.5
(byte*) print_char_cursor#87 print_char_cursor zp[2]:10 22.0
(byte*) print_char_cursor#88 print_char_cursor zp[2]:10 22.0
(byte*) print_char_cursor#89 print_char_cursor zp[2]:10 22.0
(byte*) print_char_cursor#94 print_char_cursor zp[2]:10 2000002.0
(byte*) print_char_cursor#95 print_char_cursor zp[2]:10 202.0
(void()) print_cls()
(label) print_cls::@return
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp[2]:12 66.47826086956522
(byte*) print_line_cursor#11 print_line_cursor zp[2]:12 2103.0
(byte*) print_line_cursor#21 print_line_cursor zp[2]:12 123.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:19 1000001.0
(byte*) print_str::str#10 str zp[2]:19 1002501.25
(byte*) print_str::str#11 str zp[2]:19 10001.0
(void()) print_uint_decimal((word) print_uint_decimal::w)
(label) print_uint_decimal::@1
(label) print_uint_decimal::@return
(word) print_uint_decimal::w
(word) print_uint_decimal::w#1 w zp[2]:4 22.0
(word) print_uint_decimal::w#2 w zp[2]:4 101.0
(word) print_uint_decimal::w#3 w zp[2]:4 1113.0
(void()) print_ulong_decimal((dword) print_ulong_decimal::w)
(label) print_ulong_decimal::@1
(label) print_ulong_decimal::@return
(dword) print_ulong_decimal::w
(dword) print_ulong_decimal::w#0 w zp[4]:15 112.0
(word) rem16u
(word) rem16u#1 rem16u zp[2]:19 183.66666666666669
(const byte*) sieve = (byte*) 4096
(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
(byte~) ultoa::$10 reg byte a 20002.0
(byte~) ultoa::$11 reg byte a 2002.0
(label) ultoa::@1
(label) ultoa::@2
(label) ultoa::@3
(label) ultoa::@4
(label) ultoa::@5
(label) ultoa::@6
(label) ultoa::@7
(label) ultoa::@return
(byte*) ultoa::buffer
(byte*) ultoa::buffer#11 buffer zp[2]:21 3000.4285714285716
(byte*) ultoa::buffer#14 buffer zp[2]:21 15001.5
(byte*) ultoa::buffer#3 buffer zp[2]:21 2002.0
(byte*) ultoa::buffer#4 buffer zp[2]:21 20002.0
(byte) ultoa::digit
(byte) ultoa::digit#1 digit zp[1]:14 20002.0
(byte) ultoa::digit#2 digit zp[1]:14 2857.4285714285716
(dword) ultoa::digit_value
(dword) ultoa::digit_value#0 digit_value zp[4]:29 6000.6
(dword*) ultoa::digit_values
(byte) ultoa::max_digits
(const byte) ultoa::max_digits#1 max_digits = (byte) $a
(byte) ultoa::radix
(byte) ultoa::started
(byte) ultoa::started#2 reg byte x 5000.5
(byte) ultoa::started#4 reg byte x 10001.0
(dword) ultoa::value
(dword) ultoa::value#0 value zp[4]:15 10001.0
(dword) ultoa::value#1 value zp[4]:15 551.0
(dword) ultoa::value#2 value zp[4]:15 5857.857142857143
(dword) ultoa::value#6 value zp[4]:15 15001.5
(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
(label) ultoa_append::@1
(label) ultoa_append::@2
(label) ultoa_append::@3
(label) ultoa_append::@return
(byte*) ultoa_append::buffer
(byte*) ultoa_append::buffer#0 buffer zp[2]:21 13750.25
(byte) ultoa_append::digit
(byte) ultoa_append::digit#1 reg byte x 1.0000001E7
(byte) ultoa_append::digit#2 reg byte x 1.00500015E7
(dword) ultoa_append::return
(dword) ultoa_append::return#0 return zp[4]:15 20002.0
(dword) ultoa_append::sub
(dword) ultoa_append::sub#0 sub zp[4]:29 3335000.5
(dword) ultoa_append::value
(dword) ultoa_append::value#0 value zp[4]:15 36667.33333333333
(dword) ultoa_append::value#1 value zp[4]:15 2.0000002E7
(dword) ultoa_append::value#2 value zp[4]:15 5018334.166666666
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 reg byte a 2000002.0
(byte~) utoa::$11 reg byte a 20002.0
(label) utoa::@1
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#11 buffer zp[2]:21 287143.2857142857
(byte*) utoa::buffer#14 buffer zp[2]:21 1500001.5
(byte*) utoa::buffer#3 buffer zp[2]:21 20002.0
(byte*) utoa::buffer#4 buffer zp[2]:21 2000002.0
(byte) utoa::digit
(byte) utoa::digit#1 digit zp[1]:14 2000002.0
(byte) utoa::digit#2 digit zp[1]:14 285714.5714285714
(word) utoa::digit_value
(word) utoa::digit_value#0 digit_value zp[2]:33 600000.6000000001
(word*) utoa::digit_values
(byte) utoa::max_digits
(const byte) utoa::max_digits#1 max_digits = (byte) 5
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 reg byte x 500000.5
(byte) utoa::started#4 reg byte x 1000001.0
(word) utoa::value
(word) utoa::value#0 value zp[2]:19 1000001.0
(word) utoa::value#1 value zp[2]:19 5501.0
(word) utoa::value#2 value zp[2]:19 572857.857142857
(word) utoa::value#6 value zp[2]:19 1500001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 buffer zp[2]:21 1375000.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 reg byte x 1.0000000001E10
(byte) utoa_append::digit#2 reg byte x 1.00050000015E10
(word) utoa_append::return
(word) utoa_append::return#0 return zp[2]:19 2000002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 sub zp[2]:33 3.3335000005E9
(word) utoa_append::value
(word) utoa_append::value#0 value zp[2]:19 3666667.333333333
(word) utoa_append::value#1 value zp[2]:19 2.0000000002E10
(word) utoa_append::value#2 value zp[2]:19 5.001833334166666E9

zp[2]:2 [ main::sieve_i#2 main::sieve_i#1 ]
zp[2]:4 [ main::i#10 main::i#3 print_uint_decimal::w#3 print_uint_decimal::w#2 print_uint_decimal::w#1 main::sec100s#0 ]
zp[2]:6 [ main::j#2 main::j#1 main::j#0 ]
zp[2]:8 [ main::s#2 main::s#1 main::s#0 ]
reg byte a [ print_char::ch#2 print_char::ch#0 ]
zp[2]:10 [ print_char_cursor#67 print_char_cursor#87 print_char_cursor#88 print_char_cursor#89 print_char_cursor#59 print_char_cursor#95 print_char_cursor#2 print_char_cursor#94 main::i#12 main::i#2 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[2]:12 [ print_line_cursor#11 print_line_cursor#21 print_char_cursor#63 print_char_cursor#77 print_line_cursor#1 print_char_cursor#10 ]
zp[1]:14 [ ultoa::digit#2 ultoa::digit#1 utoa::digit#2 utoa::digit#1 ]
zp[4]:15 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 print_ulong_decimal::w#0 ultoa_append::return#0 main::cyclecount#0 div32u16u::dividend#0 clock::return#2 main::$10 clock::return#0 ]
reg byte x [ ultoa::started#2 ultoa::started#4 ]
reg byte x [ ultoa_append::digit#2 ultoa_append::digit#1 ]
zp[2]:19 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 print_str::str#10 print_str::str#11 print_str::str#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[2]:21 [ memset::num#2 memset::end#0 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ]
reg byte x [ memset::c#4 ]
zp[4]:23 [ div32u16u::return#2 main::$12 div32u16u::return#0 ]
zp[2]:27 [ main::$33 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ]
reg byte a [ utoa::$11 ]
reg byte a [ utoa::$10 ]
reg byte a [ ultoa::$11 ]
reg byte a [ ultoa::$10 ]
zp[4]:29 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
zp[2]:33 [ div32u16u::quotient_hi#0 utoa::digit_value#0 utoa_append::sub#0 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
