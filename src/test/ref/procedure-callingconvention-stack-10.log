SYMBOLS
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(byte) Point::x loadstore
(byte) Point::y loadstore
(const byte*) SCREEN = (byte*)(number) $400
__stackcall (struct Point()) get((byte) get::i)
(number~) get::$0
(label) get::@1
(label) get::@return
(byte) get::i
(struct Point) get::p loadstore
(struct Point) get::return
(byte) idx loadstore
__stackcall (void()) main()
(bool~) main::$0
(struct Point~) main::$1
(void~) main::$2
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte) main::i loadstore
(struct Point) main::p loadstore
__stackcall (void()) print((struct Point) print::p)
(label) print::@return
(struct Point) print::p

CONTROL FLOW GRAPH BEFORE SIZEOF FIX
@begin: scope:[]  from
  (byte) idx ← (byte) 0
  to:@1

__stackcall (void()) main()
main: scope:[main]  from
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (bool~) main::$0 ← (byte) main::i < (number) 5
  if((bool~) main::$0) goto main::@2
  to:main::@4
main::@2: scope:[main]  from main::@1 main::@5
  (struct Point~) main::$1 ← call get (byte) main::i 
  (struct Point) main::p ← (struct Point~) main::$1
  (void~) main::$2 ← call print (struct Point) main::p 
  (byte) main::i ← ++ (byte) main::i
  to:main::@1
main::@4: scope:[main]  from main::@1
  to:main::@3
main::@3: scope:[main]  from main::@4 main::@6
  to:main::@return
main::@5: scope:[main]  from
  to:main::@2
main::@6: scope:[main]  from
  to:main::@3
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2

__stackcall (struct Point()) get((byte) get::i)
get: scope:[get]  from
  (byte) get::i ← param((byte) get::i)
  (number~) get::$0 ← (byte) get::i / (number) 2
  (struct Point) get::p ← (struct Point){ (byte) get::i, (number~) get::$0 }
  (struct Point) get::return ← (struct Point) get::p
  to:get::@return
get::@return: scope:[get]  from get get::@1
  return (struct Point) get::return
  to:@return
get::@1: scope:[get]  from
  to:get::@return
@2: scope:[]  from @1
  to:@3

__stackcall (void()) print((struct Point) print::p)
print: scope:[print]  from
  (struct Point) print::p ← param((struct Point) print::p)
  *((const byte*) SCREEN + (byte) idx) ← (struct Point) print::p.x
  (byte) idx ← ++ (byte) idx
  *((const byte*) SCREEN + (byte) idx) ← (struct Point) print::p.y
  (byte) idx ← ++ (byte) idx
  to:print::@return
print::@return: scope:[print]  from print
  return 
  to:@return
@3: scope:[]  from @2
  call main 
  to:@end
@end: scope:[]  from @3

Created struct value member variable (byte~) main::$1_x
Created struct value member variable (byte~) main::$1_y
Converted struct value to member variables (struct Point~) main::$1
Created struct value member variable (byte) get::return_x
Created struct value member variable (byte) get::return_y
Converted struct value to member variables (struct Point) get::return
Created struct value member variable (byte) print::p_x
Created struct value member variable (byte) print::p_y
Converted struct value to member variables (struct Point) print::p
Converted procedure struct value parameter to member unwinding __stackcall (void()) print((byte) print::p_x , (byte) print::p_y)
Converted procedure call LValue to member unwinding { (byte~) main::$1_x, (byte~) main::$1_y } ← call get (byte) main::i 
Unwinding value copy (struct Point) main::p ← (struct Point~) main::$1
Adding value simple copy *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_X) ← (byte~) main::$1_x
Adding value simple copy *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte~) main::$1_y
Converted procedure struct value parameter to member unwinding in call (void~) main::$2 ← call print *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_X) *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) 
Unwinding value copy (struct Point) get::p ← (struct Point){ (byte) get::i, (number~) get::$0 }
Adding value simple copy *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_X) ← (byte) get::i
Adding value simple copy *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (number~) get::$0
Unwinding value copy (struct Point) get::return ← (struct Point) get::p
Adding value simple copy (byte) get::return_x ← *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_X)
Adding value simple copy (byte) get::return_y ← *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y)
Converted procedure struct return value to member unwinding return { (byte) get::return_x, (byte) get::return_y }
Replacing struct member reference (struct Point) print::p.x with member unwinding reference (byte) print::p_x
Replacing struct member reference (struct Point) print::p.y with member unwinding reference (byte) print::p_y
CONTROL FLOW GRAPH BEFORE INLINING
@begin: scope:[]  from
  (byte) idx ← (byte) 0
  to:@1

__stackcall (void()) main()
main: scope:[main]  from
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (bool~) main::$0 ← (byte) main::i < (number) 5
  if((bool~) main::$0) goto main::@2
  to:main::@4
main::@2: scope:[main]  from main::@1 main::@5
  { (byte~) main::$1_x, (byte~) main::$1_y } ← call get (byte) main::i 
  *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_X) ← (byte~) main::$1_x
  *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte~) main::$1_y
  (struct Point) main::p ← struct-unwound {*((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_X), *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y)}
  (void~) main::$2 ← call print *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_X) *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) 
  (byte) main::i ← ++ (byte) main::i
  to:main::@1
main::@4: scope:[main]  from main::@1
  to:main::@3
main::@3: scope:[main]  from main::@4 main::@6
  to:main::@return
main::@5: scope:[main]  from
  to:main::@2
main::@6: scope:[main]  from
  to:main::@3
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2

__stackcall (struct Point()) get((byte) get::i)
get: scope:[get]  from
  (byte) get::i ← param((byte) get::i)
  (number~) get::$0 ← (byte) get::i / (number) 2
  *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_X) ← (byte) get::i
  *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (number~) get::$0
  (struct Point) get::p ← struct-unwound {*((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_X), *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y)}
  (byte) get::return_x ← *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_X)
  (byte) get::return_y ← *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y)
  (struct Point) get::return ← struct-unwound {(byte) get::return_x, (byte) get::return_y}
  to:get::@return
get::@return: scope:[get]  from get get::@1
  return { (byte) get::return_x, (byte) get::return_y }
  to:@return
get::@1: scope:[get]  from
  to:get::@return
@2: scope:[]  from @1
  to:@3

__stackcall (void()) print((byte) print::p_x , (byte) print::p_y)
print: scope:[print]  from
  (struct Point) print::p ← param((struct Point) print::p)
  *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_x
  (byte) idx ← ++ (byte) idx
  *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_y
  (byte) idx ← ++ (byte) idx
  to:print::@return
print::@return: scope:[print]  from print
  return 
  to:@return
@3: scope:[]  from @2
  call main 
  to:@end
@end: scope:[]  from @3

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] (byte) idx ← (byte) 0
  to:@1

__stackcall (void()) main()
main: scope:[main]  from
  [1] (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [2] (bool~) main::$0 ← (byte) main::i < (number) 5
  [3] if((bool~) main::$0) goto main::@2
  to:main::@4
main::@2: scope:[main]  from main::@1 main::@5
  [4] { (byte~) main::$1_x, (byte~) main::$1_y } ← call get (byte) main::i 
  [5] *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_X) ← (byte~) main::$1_x
  [6] *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte~) main::$1_y
  [7] (struct Point) main::p ← struct-unwound {*((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_X), *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y)}
  [8] (void~) main::$2 ← call print *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_X) *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) 
  [9] (byte) main::i ← ++ (byte) main::i
  to:main::@1
main::@4: scope:[main]  from main::@1
  to:main::@3
main::@3: scope:[main]  from main::@4 main::@6
  to:main::@return
main::@5: scope:[main]  from
  to:main::@2
main::@6: scope:[main]  from
  to:main::@3
main::@return: scope:[main]  from main::@3
  [10] return 
  to:@return
@1: scope:[]  from @begin
  to:@2

__stackcall (struct Point()) get((byte) get::i)
get: scope:[get]  from
  [11] (byte) get::i ← param((byte) get::i)
  [12] (number~) get::$0 ← (byte) get::i / (number) 2
  [13] *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_X) ← (byte) get::i
  [14] *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (number~) get::$0
  [15] (struct Point) get::p ← struct-unwound {*((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_X), *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y)}
  [16] (byte) get::return_x ← *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_X)
  [17] (byte) get::return_y ← *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y)
  [18] (struct Point) get::return ← struct-unwound {(byte) get::return_x, (byte) get::return_y}
  to:get::@return
get::@return: scope:[get]  from get get::@1
  [19] return { (byte) get::return_x, (byte) get::return_y }
  to:@return
get::@1: scope:[get]  from
  to:get::@return
@2: scope:[]  from @1
  to:@3

__stackcall (void()) print((byte) print::p_x , (byte) print::p_y)
print: scope:[print]  from
  [20] (struct Point) print::p ← param((struct Point) print::p)
  [21] *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_x
  [22] (byte) idx ← ++ (byte) idx
  [23] *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_y
  [24] (byte) idx ← ++ (byte) idx
  to:print::@return
print::@return: scope:[print]  from print
  [25] return 
  to:@return
@3: scope:[]  from @2
  [26] call main 
  to:@end
@end: scope:[]  from @3

Eliminating unused variable - keeping the call (void~) main::$2
Eliminating unused variable (struct Point) print::p and assignment [20] (struct Point) print::p ← param((struct Point) print::p)
Eliminating unused variable with no statement (struct Point~) main::$1
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6
Culled Empty Block (label) @1
Culled Empty Block (label) get::@1
Culled Empty Block (label) @2
PROCEDURE MODIFY VARIABLE ANALYSIS
main modifies idx
print modifies idx

Calling convention STACK_CALL adding prepare/execute/finalize for { (byte~) main::$1_x, (byte~) main::$1_y } ← call get (byte) main::i 
Calling convention STACK_CALL adding prepare/execute/finalize for call print *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_X) *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) 
Calling convention STACK_CALL adding prepare/execute/finalize for call main 
Calling convention STACK_CALL replacing param((byte) get::i) with stackidx(byte,(const byte) get::OFFSET_STACK_I)
Completing Phi functions...

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) idx ← (byte) 0
  to:@3

__stackcall (void()) main()
main: scope:[main]  from
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (bool~) main::$0 ← (byte) main::i < (number) 5
  if((bool~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  callprepare get (byte) main::i 
  callexecute get 
  { (byte~) main::$1_x, (byte~) main::$1_y } ← callfinalize get 
  *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_X) ← (byte~) main::$1_x
  *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte~) main::$1_y
  (struct Point) main::p ← struct-unwound {*((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_X), *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y)}
  callprepare print *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_X) *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) 
  callexecute print 
  callfinalize print 
  (byte) main::i ← ++ (byte) main::i
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

__stackcall (struct Point()) get((byte) get::i)
get: scope:[get]  from
  (byte) get::i#0 ← stackidx(byte,(const byte) get::OFFSET_STACK_I)
  (number~) get::$0 ← (byte) get::i#0 / (number) 2
  *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_X) ← (byte) get::i#0
  *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (number~) get::$0
  (struct Point) get::p ← struct-unwound {*((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_X), *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y)}
  (byte) get::return_x#0 ← *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_X)
  (byte) get::return_y#0 ← *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y)
  (struct Point) get::return#0 ← struct-unwound {(byte) get::return_x#0, (byte) get::return_y#0}
  to:get::@return
get::@return: scope:[get]  from get
  (byte) get::return_y#1 ← phi( get/(byte) get::return_y#0 )
  (byte) get::return_x#1 ← phi( get/(byte) get::return_x#0 )
  return { (byte) get::return_x#1, (byte) get::return_y#1 }
  to:@return

__stackcall (void()) print((byte) print::p_x , (byte) print::p_y)
print: scope:[print]  from
  (byte) print::p_y#0 ← phi( )
  (byte) print::p_x#0 ← phi( )
  *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_x#0
  (byte) idx ← ++ (byte) idx
  *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_y#0
  (byte) idx ← ++ (byte) idx
  to:print::@return
print::@return: scope:[print]  from print
  return 
  to:@return
@3: scope:[]  from @begin
  callprepare main 
  callexecute main 
  callfinalize main 
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @3
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_X = (byte) 0
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x loadstore
(byte) Point::y loadstore
(const byte*) SCREEN = (byte*)(number) $400
(const word) STACK_BASE = (word) $103
__stackcall (struct Point()) get((byte) get::i)
(number~) get::$0
(label) get::@return
(const byte) get::OFFSET_STACK_I = (byte) 0
(const byte) get::OFFSET_STACK_RETURN = (byte) 0
(byte) get::i
(byte) get::i#0
(struct Point) get::p loadstore
(struct Point) get::return
(struct Point) get::return#0
(byte) get::return_x
(byte) get::return_x#0
(byte) get::return_x#1
(byte) get::return_y
(byte) get::return_y#0
(byte) get::return_y#1
(byte) idx loadstore
__stackcall (void()) main()
(bool~) main::$0
(byte~) main::$1_x
(byte~) main::$1_y
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i loadstore
(struct Point) main::p loadstore
__stackcall (void()) print((byte) print::p_x , (byte) print::p_y)
(label) print::@return
(const byte) print::OFFSET_STACK_P_X = (byte) 1
(const byte) print::OFFSET_STACK_P_Y = (byte) 0
(byte) print::p_x
(byte) print::p_x#0
(byte) print::p_y
(byte) print::p_y#0

Adding number conversion cast (unumber) 5 in (bool~) main::$0 ← (byte) main::i < (number) 5
Adding number conversion cast (unumber) 2 in (number~) get::$0 ← (byte) get::i#0 / (number) 2
Adding number conversion cast (unumber) get::$0 in (number~) get::$0 ← (byte) get::i#0 / (unumber)(number) 2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 5
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) get::$0 ← (byte) get::i#0 / (byte) 2
Alias (byte) get::return_x#0 = (byte) get::return_x#1 
Alias (byte) get::return_y#0 = (byte) get::return_y#1 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$0 [3] if((byte) main::i<(byte) 5) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Removing C-classic struct-unwound assignment [9] (struct Point) main::p ← struct-unwound {*((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_X), *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y)}
Removing C-classic struct-unwound assignment [19] (struct Point) get::p ← struct-unwound {*((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_X), *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y)}
Simplifying expression containing zero (byte*)&main::p in [7] *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_X) ← (byte~) main::$1_x
Simplifying expression containing zero (byte*)&main::p in [10] callprepare print *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_X) *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) 
Simplifying expression containing zero (byte*)&get::p in [17] *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_X) ← (byte) get::i#0
Simplifying expression containing zero (byte*)&get::p in [20] (byte) get::return_x#0 ← *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_X)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (struct Point) get::return#0 and assignment [19] (struct Point) get::return#0 ← struct-unwound {(byte) get::return_x#0, (byte) get::return_y#0}
Eliminating unused constant (const byte) get::OFFSET_STACK_RETURN
Eliminating unused constant (const byte) print::OFFSET_STACK_P_X
Eliminating unused constant (const byte) print::OFFSET_STACK_P_Y
Eliminating unused constant (const byte) OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Rewriting division to use shift [14] (byte~) get::$0 ← (byte) get::i#0 / (byte) 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to get:22 print:27 

Created 2 initial phi equivalence classes
Coalesced down to 2 phi equivalence classes
Renumbering block @3 to @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] (byte) idx ← (byte) 0
  to:@1
@1: scope:[]  from @begin
  [1] callprepare main 
  [2] callexecute main 
  [3] callfinalize main 
  to:@end
@end: scope:[]  from @1
  [4] phi()

__stackcall (void()) print((byte) print::p_x , (byte) print::p_y)
print: scope:[print]  from
  [5] (byte) print::p_y#0 ← phi( )
  [5] (byte) print::p_x#0 ← phi( )
  [6] *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_x#0
  [7] (byte) idx ← ++ (byte) idx
  [8] *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_y#0
  [9] (byte) idx ← ++ (byte) idx
  to:print::@return
print::@return: scope:[print]  from print
  [10] return 
  to:@return

__stackcall (struct Point()) get((byte) get::i)
get: scope:[get]  from
  [11] (byte) get::i#0 ← stackidx(byte,(const byte) get::OFFSET_STACK_I)
  [12] (byte~) get::$0 ← (byte) get::i#0 >> (byte) 1
  [13] *((byte*)&(struct Point) get::p) ← (byte) get::i#0
  [14] *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte~) get::$0
  [15] (byte) get::return_x#0 ← *((byte*)&(struct Point) get::p)
  [16] (byte) get::return_y#0 ← *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y)
  to:get::@return
get::@return: scope:[get]  from get
  [17] return { (byte) get::return_x#0, (byte) get::return_y#0 }
  to:@return

__stackcall (void()) main()
main: scope:[main]  from
  [18] (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [19] if((byte) main::i<(byte) 5) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [20] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [21] callprepare get (byte) main::i 
  [22] callexecute get 
  [23] { (byte~) main::$1_x, (byte~) main::$1_y } ← callfinalize get 
  [24] *((byte*)&(struct Point) main::p) ← (byte~) main::$1_x
  [25] *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte~) main::$1_y
  [26] callprepare print *((byte*)&(struct Point) main::p) *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) 
  [27] callexecute print 
  [28] callfinalize print 
  [29] (byte) main::i ← ++ (byte) main::i
  to:main::@1

null depth in calling loop Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1  in scope print
null depth in calling loop Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1  in scope get

VARIABLE REGISTER WEIGHTS
(byte) Point::x loadstore
(byte) Point::y loadstore
__stackcall (struct Point()) get((byte) get::i)
(byte~) get::$0 2.0
(byte) get::i
(byte) get::i#0 3.0
(struct Point) get::p loadstore
(struct Point) get::return
(byte) get::return_x
(byte) get::return_x#0 1.0
(byte) get::return_y
(byte) get::return_y#0 2.0
(byte) idx loadstore 0.7368421052631579
__stackcall (void()) main()
(byte~) main::$1_x 0.8461538461538461
(byte~) main::$1_y 0.8461538461538461
(byte) main::i loadstore 3.1818181818181817
(struct Point) main::p loadstore
__stackcall (void()) print((byte) print::p_x , (byte) print::p_y)
(byte) print::p_x
(byte) print::p_x#0 2.0
(byte) print::p_y
(byte) print::p_y#0 0.6666666666666666

Initial phi equivalence classes
[ print::p_x#0 ]
[ print::p_y#0 ]
Added variable idx to live range equivalence class [ idx ]
Added variable get::i#0 to live range equivalence class [ get::i#0 ]
Added variable get::$0 to live range equivalence class [ get::$0 ]
Added variable get::return_x#0 to live range equivalence class [ get::return_x#0 ]
Added variable get::return_y#0 to live range equivalence class [ get::return_y#0 ]
Added variable main::i to live range equivalence class [ main::i ]
Added variable main::$1_x to live range equivalence class [ main::$1_x ]
Added variable main::$1_y to live range equivalence class [ main::$1_y ]
Added variable main::p to live range equivalence class [ main::p ]
Added variable get::p to live range equivalence class [ get::p ]
Complete equivalence classes
[ print::p_x#0 ]
[ print::p_y#0 ]
[ idx ]
[ get::i#0 ]
[ get::$0 ]
[ get::return_x#0 ]
[ get::return_y#0 ]
[ main::i ]
[ main::$1_x ]
[ main::$1_y ]
[ main::p ]
[ get::p ]
Allocated zp[1]:2 [ print::p_x#0 ]
Allocated zp[1]:3 [ print::p_y#0 ]
Allocated zp[1]:4 [ idx ]
Allocated zp[1]:5 [ get::i#0 ]
Allocated zp[1]:6 [ get::$0 ]
Allocated zp[1]:7 [ get::return_x#0 ]
Allocated zp[1]:8 [ get::return_y#0 ]
Allocated zp[1]:9 [ main::i ]
Allocated zp[1]:10 [ main::$1_x ]
Allocated zp[1]:11 [ main::$1_y ]
Allocated zp[2]:12 [ main::p ]
Allocated zp[2]:14 [ get::p ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test a procedure with calling convention stack
// Returning and passing struct values
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const OFFSET_STRUCT_POINT_Y = 1
  .const STACK_BASE = $103
  .label idx = 4
  // @begin
__bbegin:
  // [0] (byte) idx ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z idx
  jmp __b1
  // @1
__b1:
  // [1] callprepare main 
  // [2] callexecute main  -- jsr 
  jsr main
  // [3] callfinalize main 
  // [4] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // print
// print(byte zp(2) p_x, byte zp(3) p_y)
print: {
    .label p_x = 2
    .label p_y = 3
    // [6] *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_x#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z p_x
    ldy.z idx
    sta SCREEN,y
    // [7] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [8] *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_y#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z p_y
    ldy.z idx
    sta SCREEN,y
    // [9] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    jmp __breturn
    // print::@return
  __breturn:
    // [10] return 
    rts
}
  // get
// get(byte zp(5) i)
get: {
    .const OFFSET_STACK_I = 0
    .label __0 = 6
    .label p = $e
    .label i = 5
    .label return_x = 7
    .label return_y = 8
    // [11] (byte) get::i#0 ← stackidx(byte,(const byte) get::OFFSET_STACK_I) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_I,x
    sta.z i
    // [12] (byte~) get::$0 ← (byte) get::i#0 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z i
    lsr
    sta.z __0
    // [13] *((byte*)&(struct Point) get::p) ← (byte) get::i#0 -- _deref_pbuc1=vbuz1 
    lda.z i
    sta.z p
    // [14] *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte~) get::$0 -- _deref_pbuc1=vbuz1 
    lda.z __0
    sta p+OFFSET_STRUCT_POINT_Y
    // [15] (byte) get::return_x#0 ← *((byte*)&(struct Point) get::p) -- vbuz1=_deref_pbuc1 
    lda.z p
    sta.z return_x
    // [16] (byte) get::return_y#0 ← *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y) -- vbuz1=_deref_pbuc1 
    lda p+OFFSET_STRUCT_POINT_Y
    sta.z return_y
    jmp __breturn
    // get::@return
  __breturn:
    // [17] return { (byte) get::return_x#0, (byte) get::return_y#0 }
    // [17] return { (byte) get::return_x#0, (byte) get::return_y#0 } [(byte) Point::x#0] -- _stackidxbyte_vbuc1=vbuz1 
    lda.z return_x
    tsx
    sta STACK_BASE+OFFSET_STACK_RETURN+OFFSET_STRUCT_POINT_X,x
    // [17] return { (byte) get::return_x#0, (byte) get::return_y#0 } [(byte) Point::y#1] -- _stackidxbyte_vbuc1=vbuz1 
    lda.z return_y
    tsx
    sta STACK_BASE+OFFSET_STACK_RETURN+OFFSET_STRUCT_POINT_Y,x
    rts
}
  // main
main: {
    .label i = 9
    .label p = $c
    .label __1_x = $a
    .label __1_y = $b
    // [18] (byte) main::i ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [19] if((byte) main::i<(byte) 5) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #5
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [20] return 
    rts
    // main::@2
  __b2:
    // [21] callprepare get (byte) main::i  [(byte) get::i#0] -- _stackpushbyte_=vbuz1 
    lda.z i
    pha
    // [21] callprepare get (byte) main::i  -- _stackpushbyte_1 
    pha
    // [22] callexecute get  -- jsr 
    jsr get
    // [23] { (byte~) main::$1_x, (byte~) main::$1_y } ← callfinalize get  [(byte) Point::x#0] -- vbuz1=_stackpullbyte_ 
    pla
    sta.z __1_x
    // [23] { (byte~) main::$1_x, (byte~) main::$1_y } ← callfinalize get  [(byte) Point::y#1] -- vbuz1=_stackpullbyte_ 
    pla
    sta.z __1_y
    // [24] *((byte*)&(struct Point) main::p) ← (byte~) main::$1_x -- _deref_pbuc1=vbuz1 
    lda.z __1_x
    sta.z p
    // [25] *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte~) main::$1_y -- _deref_pbuc1=vbuz1 
    lda.z __1_y
    sta p+OFFSET_STRUCT_POINT_Y
    // [26] callprepare print *((byte*)&(struct Point) main::p) *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y)  [(byte) print::p_x#0] -- _stackpushbyte_=_deref_pbuc1 
    lda.z p
    pha
    // [26] callprepare print *((byte*)&(struct Point) main::p) *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y)  [(byte) print::p_y#1] -- _stackpushbyte_=_deref_pbuc1 
    lda p+OFFSET_STRUCT_POINT_Y
    pha
    // [27] callexecute print  -- jsr 
    jsr print
    // [28] callfinalize print  -- _stackpullbyte_2 
    pla
    pla
    // [29] (byte) main::i ← ++ (byte) main::i -- vbuz1=_inc_vbuz1 
    inc.z i
    jmp __b1
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] (byte) idx ← (byte) 0 [ idx get::p main::$1_x main::$1_y main::p ] (  [ idx get::p main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ main::$1_x ]
Removing always clobbered register reg byte a as potential for zp[1]:11 [ main::$1_y ]
Statement [6] *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_x#0 [ idx print::p_y#0 ] ( main:2::print:27 [ get::p main::i main::$1_x main::$1_y main::p idx print::p_y#0 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:10 [ main::$1_x ]
Removing always clobbered register reg byte y as potential for zp[1]:11 [ main::$1_y ]
Removing always clobbered register reg byte y as potential for zp[1]:3 [ print::p_y#0 ]
Statement [8] *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_y#0 [ idx ] ( main:2::print:27 [ get::p main::i main::$1_x main::$1_y main::p idx ] ) always clobbers reg byte y 
Statement [11] (byte) get::i#0 ← stackidx(byte,(const byte) get::OFFSET_STACK_I) [ get::i#0 get::p ] ( main:2::get:22 [ idx main::i main::$1_x main::$1_y main::p get::i#0 get::p ] ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:10 [ main::$1_x ]
Removing always clobbered register reg byte x as potential for zp[1]:11 [ main::$1_y ]
Statement [12] (byte~) get::$0 ← (byte) get::i#0 >> (byte) 1 [ get::i#0 get::$0 get::p ] ( main:2::get:22 [ idx main::i main::$1_x main::$1_y main::p get::i#0 get::$0 get::p ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ get::i#0 ]
Statement [17] return { (byte) get::return_x#0, (byte) get::return_y#0 } [ get::p ] ( main:2::get:22 [ idx main::i main::$1_x main::$1_y main::p get::p ] ) always clobbers reg byte x 
Statement [18] (byte) main::i ← (byte) 0 [ idx get::p main::i main::$1_x main::$1_y main::p ] ( main:2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Statement [19] if((byte) main::i<(byte) 5) goto main::@2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ( main:2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Statement [21] callprepare get (byte) main::i  [ idx get::p main::i main::$1_x main::$1_y main::p ] ( main:2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Statement [23] { (byte~) main::$1_x, (byte~) main::$1_y } ← callfinalize get  [ idx get::p main::i main::$1_x main::$1_y main::p ] ( main:2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Statement [24] *((byte*)&(struct Point) main::p) ← (byte~) main::$1_x [ idx get::p main::i main::$1_x main::$1_y main::p ] ( main:2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Statement [25] *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte~) main::$1_y [ idx get::p main::i main::$1_x main::$1_y main::p ] ( main:2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Statement [26] callprepare print *((byte*)&(struct Point) main::p) *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y)  [ idx get::p main::i main::$1_x main::$1_y main::p ] ( main:2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Statement [28] callfinalize print  [ idx get::p main::i main::$1_x main::$1_y main::p ] ( main:2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Statement [0] (byte) idx ← (byte) 0 [ idx get::p main::$1_x main::$1_y main::p ] (  [ idx get::p main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Statement [6] *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_x#0 [ idx print::p_y#0 ] ( main:2::print:27 [ get::p main::i main::$1_x main::$1_y main::p idx print::p_y#0 ] ) always clobbers reg byte y 
Statement [8] *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_y#0 [ idx ] ( main:2::print:27 [ get::p main::i main::$1_x main::$1_y main::p idx ] ) always clobbers reg byte y 
Statement [11] (byte) get::i#0 ← stackidx(byte,(const byte) get::OFFSET_STACK_I) [ get::i#0 get::p ] ( main:2::get:22 [ idx main::i main::$1_x main::$1_y main::p get::i#0 get::p ] ) always clobbers reg byte a reg byte x 
Statement [12] (byte~) get::$0 ← (byte) get::i#0 >> (byte) 1 [ get::i#0 get::$0 get::p ] ( main:2::get:22 [ idx main::i main::$1_x main::$1_y main::p get::i#0 get::$0 get::p ] ) always clobbers reg byte a 
Statement [17] return { (byte) get::return_x#0, (byte) get::return_y#0 } [ get::p ] ( main:2::get:22 [ idx main::i main::$1_x main::$1_y main::p get::p ] ) always clobbers reg byte x 
Statement [18] (byte) main::i ← (byte) 0 [ idx get::p main::i main::$1_x main::$1_y main::p ] ( main:2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Statement [19] if((byte) main::i<(byte) 5) goto main::@2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ( main:2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Statement [21] callprepare get (byte) main::i  [ idx get::p main::i main::$1_x main::$1_y main::p ] ( main:2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Statement [23] { (byte~) main::$1_x, (byte~) main::$1_y } ← callfinalize get  [ idx get::p main::i main::$1_x main::$1_y main::p ] ( main:2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Statement [24] *((byte*)&(struct Point) main::p) ← (byte~) main::$1_x [ idx get::p main::i main::$1_x main::$1_y main::p ] ( main:2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Statement [25] *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte~) main::$1_y [ idx get::p main::i main::$1_x main::$1_y main::p ] ( main:2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Statement [26] callprepare print *((byte*)&(struct Point) main::p) *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y)  [ idx get::p main::i main::$1_x main::$1_y main::p ] ( main:2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Statement [28] callfinalize print  [ idx get::p main::i main::$1_x main::$1_y main::p ] ( main:2 [ idx get::p main::i main::$1_x main::$1_y main::p ] ) always clobbers reg byte a 
Potential registers zp[1]:2 [ print::p_x#0 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ print::p_y#0 ] : zp[1]:3 , reg byte a , reg byte x , 
Potential registers zp[1]:4 [ idx ] : zp[1]:4 , 
Potential registers zp[1]:5 [ get::i#0 ] : zp[1]:5 , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ get::$0 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ get::return_x#0 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ get::return_y#0 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ main::i ] : zp[1]:9 , 
Potential registers zp[1]:10 [ main::$1_x ] : zp[1]:10 , 
Potential registers zp[1]:11 [ main::$1_y ] : zp[1]:11 , 
Potential registers zp[2]:12 [ main::p ] : zp[2]:12 , 
Potential registers zp[2]:14 [ get::p ] : zp[2]:14 , 

REGISTER UPLIFT SCOPES
Uplift Scope [get] 3: zp[1]:5 [ get::i#0 ] 2: zp[1]:6 [ get::$0 ] 2: zp[1]:8 [ get::return_y#0 ] 1: zp[1]:7 [ get::return_x#0 ] 0: zp[2]:14 [ get::p ] 
Uplift Scope [main] 3.18: zp[1]:9 [ main::i ] 0.85: zp[1]:10 [ main::$1_x ] 0.85: zp[1]:11 [ main::$1_y ] 0: zp[2]:12 [ main::p ] 
Uplift Scope [print] 2: zp[1]:2 [ print::p_x#0 ] 0.67: zp[1]:3 [ print::p_y#0 ] 
Uplift Scope [] 0.74: zp[1]:4 [ idx ] 
Uplift Scope [Point] 

Uplifting [get] best 998 combination reg byte x [ get::i#0 ] reg byte a [ get::$0 ] reg byte y [ get::return_y#0 ] reg byte a [ get::return_x#0 ] zp[2]:14 [ get::p ] 
Limited combination testing to 100 combinations of 192 possible.
Uplifting [main] best 998 combination zp[1]:9 [ main::i ] zp[1]:10 [ main::$1_x ] zp[1]:11 [ main::$1_y ] zp[2]:12 [ main::p ] 
Uplifting [print] best 994 combination reg byte a [ print::p_x#0 ] reg byte x [ print::p_y#0 ] 
Uplifting [] best 994 combination zp[1]:4 [ idx ] 
Uplifting [Point] best 994 combination 
Attempting to uplift remaining variables inzp[1]:9 [ main::i ]
Uplifting [main] best 994 combination zp[1]:9 [ main::i ] 
Attempting to uplift remaining variables inzp[1]:10 [ main::$1_x ]
Uplifting [main] best 994 combination zp[1]:10 [ main::$1_x ] 
Attempting to uplift remaining variables inzp[1]:11 [ main::$1_y ]
Uplifting [main] best 994 combination zp[1]:11 [ main::$1_y ] 
Attempting to uplift remaining variables inzp[1]:4 [ idx ]
Uplifting [] best 994 combination zp[1]:4 [ idx ] 
Allocated (was zp[1]:4) zp[1]:2 [ idx ]
Allocated (was zp[1]:9) zp[1]:3 [ main::i ]
Allocated (was zp[1]:10) zp[1]:4 [ main::$1_x ]
Allocated (was zp[1]:11) zp[1]:5 [ main::$1_y ]
Allocated (was zp[2]:12) zp[2]:6 [ main::p ]
Allocated (was zp[2]:14) zp[2]:8 [ get::p ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a procedure with calling convention stack
// Returning and passing struct values
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const OFFSET_STRUCT_POINT_Y = 1
  .const STACK_BASE = $103
  .const OFFSET_STRUCT_POINT_X = 0
  .label idx = 2
  // @begin
__bbegin:
  // [0] (byte) idx ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z idx
  jmp __b1
  // @1
__b1:
  // [1] callprepare main 
  // [2] callexecute main  -- jsr 
  jsr main
  // [3] callfinalize main 
  // [4] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // print
// print(byte register(A) p_x, byte register(X) p_y)
print: {
    // [6] *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_x#0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z idx
    sta SCREEN,y
    // [7] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [8] *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_y#0 -- pbuc1_derefidx_vbuz1=vbuxx 
    ldy.z idx
    txa
    sta SCREEN,y
    // [9] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    jmp __breturn
    // print::@return
  __breturn:
    // [10] return 
    rts
}
  // get
// get(byte register(X) i)
get: {
    .const OFFSET_STACK_I = 0
    .const OFFSET_STACK_RETURN = 0
    .label p = 8
    // [11] (byte) get::i#0 ← stackidx(byte,(const byte) get::OFFSET_STACK_I) -- vbuxx=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_I,x
    tax
    // [12] (byte~) get::$0 ← (byte) get::i#0 >> (byte) 1 -- vbuaa=vbuxx_ror_1 
    txa
    lsr
    // [13] *((byte*)&(struct Point) get::p) ← (byte) get::i#0 -- _deref_pbuc1=vbuxx 
    stx.z p
    // [14] *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte~) get::$0 -- _deref_pbuc1=vbuaa 
    sta p+OFFSET_STRUCT_POINT_Y
    // [15] (byte) get::return_x#0 ← *((byte*)&(struct Point) get::p) -- vbuaa=_deref_pbuc1 
    lda.z p
    // [16] (byte) get::return_y#0 ← *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y) -- vbuyy=_deref_pbuc1 
    ldy p+OFFSET_STRUCT_POINT_Y
    jmp __breturn
    // get::@return
  __breturn:
    // [17] return { (byte) get::return_x#0, (byte) get::return_y#0 }
    // [17] return { (byte) get::return_x#0, (byte) get::return_y#0 } [(byte) Point::x#0] -- _stackidxbyte_vbuc1=vbuaa 
    tsx
    sta STACK_BASE+OFFSET_STACK_RETURN+OFFSET_STRUCT_POINT_X,x
    // [17] return { (byte) get::return_x#0, (byte) get::return_y#0 } [(byte) Point::y#1] -- _stackidxbyte_vbuc1=vbuyy 
    tya
    tsx
    sta STACK_BASE+OFFSET_STACK_RETURN+OFFSET_STRUCT_POINT_Y,x
    rts
}
  // main
main: {
    .label i = 3
    .label p = 6
    .label __1_x = 4
    .label __1_y = 5
    // [18] (byte) main::i ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [19] if((byte) main::i<(byte) 5) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #5
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [20] return 
    rts
    // main::@2
  __b2:
    // [21] callprepare get (byte) main::i  [(byte) get::i#0] -- _stackpushbyte_=vbuz1 
    lda.z i
    pha
    // [21] callprepare get (byte) main::i  -- _stackpushbyte_1 
    pha
    // [22] callexecute get  -- jsr 
    jsr get
    // [23] { (byte~) main::$1_x, (byte~) main::$1_y } ← callfinalize get  [(byte) Point::x#0] -- vbuz1=_stackpullbyte_ 
    pla
    sta.z __1_x
    // [23] { (byte~) main::$1_x, (byte~) main::$1_y } ← callfinalize get  [(byte) Point::y#1] -- vbuz1=_stackpullbyte_ 
    pla
    sta.z __1_y
    // [24] *((byte*)&(struct Point) main::p) ← (byte~) main::$1_x -- _deref_pbuc1=vbuz1 
    lda.z __1_x
    sta.z p
    // [25] *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte~) main::$1_y -- _deref_pbuc1=vbuz1 
    lda.z __1_y
    sta p+OFFSET_STRUCT_POINT_Y
    // [26] callprepare print *((byte*)&(struct Point) main::p) *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y)  [(byte) print::p_x#0] -- _stackpushbyte_=_deref_pbuc1 
    lda.z p
    pha
    // [26] callprepare print *((byte*)&(struct Point) main::p) *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y)  [(byte) print::p_y#1] -- _stackpushbyte_=_deref_pbuc1 
    lda p+OFFSET_STRUCT_POINT_Y
    pha
    // [27] callexecute print  -- jsr 
    jsr print
    // [28] callfinalize print  -- _stackpullbyte_2 
    pla
    pla
    // [29] (byte) main::i ← ++ (byte) main::i -- vbuz1=_inc_vbuz1 
    inc.z i
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda.z p with TXA
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1:
Removing instruction __bend:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_X = (byte) 0
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x loadstore
(byte) Point::y loadstore
(const byte*) SCREEN = (byte*) 1024
(const word) STACK_BASE = (word) $103
__stackcall (struct Point()) get((byte) get::i)
(byte~) get::$0 reg byte a 2.0
(label) get::@return
(const byte) get::OFFSET_STACK_I = (byte) 0
(const byte) get::OFFSET_STACK_RETURN = (byte) 0
(byte) get::i
(byte) get::i#0 reg byte x 3.0
(struct Point) get::p loadstore zp[2]:8
(struct Point) get::return
(byte) get::return_x
(byte) get::return_x#0 reg byte a 1.0
(byte) get::return_y
(byte) get::return_y#0 reg byte y 2.0
(byte) idx loadstore zp[1]:2 0.7368421052631579
__stackcall (void()) main()
(byte~) main::$1_x zp[1]:4 0.8461538461538461
(byte~) main::$1_y zp[1]:5 0.8461538461538461
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i loadstore zp[1]:3 3.1818181818181817
(struct Point) main::p loadstore zp[2]:6
__stackcall (void()) print((byte) print::p_x , (byte) print::p_y)
(label) print::@return
(byte) print::p_x
(byte) print::p_x#0 reg byte a 2.0
(byte) print::p_y
(byte) print::p_y#0 reg byte x 0.6666666666666666

reg byte a [ print::p_x#0 ]
reg byte x [ print::p_y#0 ]
zp[1]:2 [ idx ]
reg byte x [ get::i#0 ]
reg byte a [ get::$0 ]
reg byte a [ get::return_x#0 ]
reg byte y [ get::return_y#0 ]
zp[1]:3 [ main::i ]
zp[1]:4 [ main::$1_x ]
zp[1]:5 [ main::$1_y ]
zp[2]:6 [ main::p ]
zp[2]:8 [ get::p ]


FINAL ASSEMBLER
Score: 954

  // File Comments
// Test a procedure with calling convention stack
// Returning and passing struct values
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const OFFSET_STRUCT_POINT_Y = 1
  .const STACK_BASE = $103
  .const OFFSET_STRUCT_POINT_X = 0
  .label idx = 2
  // @begin
__bbegin:
  // idx = 0
  // [0] (byte) idx ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z idx
  // @1
  // [1] callprepare main 
  // [2] callexecute main  -- jsr 
  jsr main
  rts
  // [3] callfinalize main 
  // [4] phi from @1 to @end [phi:@1->@end]
  // @end
  // print
// print(byte register(A) p_x, byte register(X) p_y)
print: {
    // SCREEN[idx++] = p.x
    // [6] *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_x#0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z idx
    sta SCREEN,y
    // SCREEN[idx++] = p.x;
    // [7] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // SCREEN[idx++] = p.y
    // [8] *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_y#0 -- pbuc1_derefidx_vbuz1=vbuxx 
    ldy.z idx
    txa
    sta SCREEN,y
    // SCREEN[idx++] = p.y;
    // [9] (byte) idx ← ++ (byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // print::@return
    // }
    // [10] return 
    rts
}
  // get
// get(byte register(X) i)
get: {
    .const OFFSET_STACK_I = 0
    .const OFFSET_STACK_RETURN = 0
    .label p = 8
    // [11] (byte) get::i#0 ← stackidx(byte,(const byte) get::OFFSET_STACK_I) -- vbuxx=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_I,x
    tax
    // i/2
    // [12] (byte~) get::$0 ← (byte) get::i#0 >> (byte) 1 -- vbuaa=vbuxx_ror_1 
    txa
    lsr
    // p = { i, i/2 }
    // [13] *((byte*)&(struct Point) get::p) ← (byte) get::i#0 -- _deref_pbuc1=vbuxx 
    stx.z p
    // [14] *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte~) get::$0 -- _deref_pbuc1=vbuaa 
    sta p+OFFSET_STRUCT_POINT_Y
    // return p;
    // [15] (byte) get::return_x#0 ← *((byte*)&(struct Point) get::p) -- vbuaa=_deref_pbuc1 
    txa
    // [16] (byte) get::return_y#0 ← *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y) -- vbuyy=_deref_pbuc1 
    ldy p+OFFSET_STRUCT_POINT_Y
    // get::@return
    // }
    // [17] return { (byte) get::return_x#0, (byte) get::return_y#0 }
    // [17] return { (byte) get::return_x#0, (byte) get::return_y#0 } [(byte) Point::x#0] -- _stackidxbyte_vbuc1=vbuaa 
    tsx
    sta STACK_BASE+OFFSET_STACK_RETURN+OFFSET_STRUCT_POINT_X,x
    // [17] return { (byte) get::return_x#0, (byte) get::return_y#0 } [(byte) Point::y#1] -- _stackidxbyte_vbuc1=vbuyy 
    tya
    tsx
    sta STACK_BASE+OFFSET_STACK_RETURN+OFFSET_STRUCT_POINT_Y,x
    rts
}
  // main
main: {
    .label i = 3
    .label p = 6
    .label __1_x = 4
    .label __1_y = 5
    // i=0
    // [18] (byte) main::i ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // main::@1
  __b1:
    // for(char i=0;i<5;i++)
    // [19] if((byte) main::i<(byte) 5) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #5
    bcc __b2
    // main::@return
    // }
    // [20] return 
    rts
    // main::@2
  __b2:
    // get(i)
    // [21] callprepare get (byte) main::i  [(byte) get::i#0] -- _stackpushbyte_=vbuz1 
    lda.z i
    pha
    // [21] callprepare get (byte) main::i  -- _stackpushbyte_1 
    pha
    // [22] callexecute get  -- jsr 
    jsr get
    // [23] { (byte~) main::$1_x, (byte~) main::$1_y } ← callfinalize get  [(byte) Point::x#0] -- vbuz1=_stackpullbyte_ 
    pla
    sta.z __1_x
    // [23] { (byte~) main::$1_x, (byte~) main::$1_y } ← callfinalize get  [(byte) Point::y#1] -- vbuz1=_stackpullbyte_ 
    pla
    sta.z __1_y
    // p = get(i)
    // [24] *((byte*)&(struct Point) main::p) ← (byte~) main::$1_x -- _deref_pbuc1=vbuz1 
    lda.z __1_x
    sta.z p
    // [25] *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte~) main::$1_y -- _deref_pbuc1=vbuz1 
    lda.z __1_y
    sta p+OFFSET_STRUCT_POINT_Y
    // print(p)
    // [26] callprepare print *((byte*)&(struct Point) main::p) *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y)  [(byte) print::p_x#0] -- _stackpushbyte_=_deref_pbuc1 
    lda.z p
    pha
    // [26] callprepare print *((byte*)&(struct Point) main::p) *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y)  [(byte) print::p_y#1] -- _stackpushbyte_=_deref_pbuc1 
    lda p+OFFSET_STRUCT_POINT_Y
    pha
    // [27] callexecute print  -- jsr 
    jsr print
    // [28] callfinalize print  -- _stackpullbyte_2 
    pla
    pla
    // for(char i=0;i<5;i++)
    // [29] (byte) main::i ← ++ (byte) main::i -- vbuz1=_inc_vbuz1 
    inc.z i
    jmp __b1
}
  // File Data

