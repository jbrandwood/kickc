Fixing pointer array-indexing *((word[]) words + (byte) main::i)
Fixing pointer array-indexing *((word[]) words + (byte) main::j)
Adding pointer type conversion cast (byte*) PROCPORT_DDR in (byte*) PROCPORT_DDR ← (number) 0
Adding pointer type conversion cast (byte*) PROCPORT in (byte*) PROCPORT ← (number) 1
Adding pointer type conversion cast (byte*) CHARGEN in (byte*) CHARGEN ← (number) $d000
Adding pointer type conversion cast (byte*) SPRITES_XPOS in (byte*) SPRITES_XPOS ← (number) $d000
Adding pointer type conversion cast (byte*) SPRITES_YPOS in (byte*) SPRITES_YPOS ← (number) $d001
Adding pointer type conversion cast (byte*) SPRITES_XMSB in (byte*) SPRITES_XMSB ← (number) $d010
Adding pointer type conversion cast (byte*) RASTER in (byte*) RASTER ← (number) $d012
Adding pointer type conversion cast (byte*) SPRITES_ENABLE in (byte*) SPRITES_ENABLE ← (number) $d015
Adding pointer type conversion cast (byte*) SPRITES_EXPAND_Y in (byte*) SPRITES_EXPAND_Y ← (number) $d017
Adding pointer type conversion cast (byte*) SPRITES_PRIORITY in (byte*) SPRITES_PRIORITY ← (number) $d01b
Adding pointer type conversion cast (byte*) SPRITES_MC in (byte*) SPRITES_MC ← (number) $d01c
Adding pointer type conversion cast (byte*) SPRITES_EXPAND_X in (byte*) SPRITES_EXPAND_X ← (number) $d01d
Adding pointer type conversion cast (byte*) BORDERCOL in (byte*) BORDERCOL ← (number) $d020
Adding pointer type conversion cast (byte*) BGCOL in (byte*) BGCOL ← (number) $d021
Adding pointer type conversion cast (byte*) BGCOL1 in (byte*) BGCOL1 ← (number) $d021
Adding pointer type conversion cast (byte*) BGCOL2 in (byte*) BGCOL2 ← (number) $d022
Adding pointer type conversion cast (byte*) BGCOL3 in (byte*) BGCOL3 ← (number) $d023
Adding pointer type conversion cast (byte*) BGCOL4 in (byte*) BGCOL4 ← (number) $d024
Adding pointer type conversion cast (byte*) SPRITES_MC1 in (byte*) SPRITES_MC1 ← (number) $d025
Adding pointer type conversion cast (byte*) SPRITES_MC2 in (byte*) SPRITES_MC2 ← (number) $d026
Adding pointer type conversion cast (byte*) SPRITES_COLS in (byte*) SPRITES_COLS ← (number) $d027
Adding pointer type conversion cast (byte*) VIC_CONTROL in (byte*) VIC_CONTROL ← (number) $d011
Adding pointer type conversion cast (byte*) D011 in (byte*) D011 ← (number) $d011
Adding pointer type conversion cast (byte*) VIC_CONTROL2 in (byte*) VIC_CONTROL2 ← (number) $d016
Adding pointer type conversion cast (byte*) D016 in (byte*) D016 ← (number) $d016
Adding pointer type conversion cast (byte*) D018 in (byte*) D018 ← (number) $d018
Adding pointer type conversion cast (byte*) VIC_MEMORY in (byte*) VIC_MEMORY ← (number) $d018
Adding pointer type conversion cast (byte*) LIGHTPEN_X in (byte*) LIGHTPEN_X ← (number) $d013
Adding pointer type conversion cast (byte*) LIGHTPEN_Y in (byte*) LIGHTPEN_Y ← (number) $d014
Adding pointer type conversion cast (byte*) IRQ_STATUS in (byte*) IRQ_STATUS ← (number) $d019
Adding pointer type conversion cast (byte*) IRQ_ENABLE in (byte*) IRQ_ENABLE ← (number) $d01a
Adding pointer type conversion cast (byte*) COLS in (byte*) COLS ← (number) $d800
Adding pointer type conversion cast (byte*) CIA1_PORT_A in (byte*) CIA1_PORT_A ← (number) $dc00
Adding pointer type conversion cast (byte*) CIA1_PORT_B in (byte*) CIA1_PORT_B ← (number) $dc01
Adding pointer type conversion cast (byte*) CIA1_PORT_A_DDR in (byte*) CIA1_PORT_A_DDR ← (number) $dc02
Adding pointer type conversion cast (byte*) CIA1_PORT_B_DDR in (byte*) CIA1_PORT_B_DDR ← (number) $dc03
Adding pointer type conversion cast (byte*) CIA1_INTERRUPT in (byte*) CIA1_INTERRUPT ← (number) $dc0d
Adding pointer type conversion cast (byte*) CIA2_PORT_A in (byte*) CIA2_PORT_A ← (number) $dd00
Adding pointer type conversion cast (byte*) CIA2_PORT_B in (byte*) CIA2_PORT_B ← (number) $dd01
Adding pointer type conversion cast (byte*) CIA2_PORT_A_DDR in (byte*) CIA2_PORT_A_DDR ← (number) $dd02
Adding pointer type conversion cast (byte*) CIA2_PORT_B_DDR in (byte*) CIA2_PORT_B_DDR ← (number) $dd03
Adding pointer type conversion cast (byte*) CIA2_INTERRUPT in (byte*) CIA2_INTERRUPT ← (number) $dd0d
Adding pointer type conversion cast (void()**) KERNEL_IRQ in (void()**) KERNEL_IRQ ← (number) $314
Adding pointer type conversion cast (void()**) HARDWARE_IRQ in (void()**) HARDWARE_IRQ ← (number) $fffe
Adding pointer type conversion cast (byte*) print_screen in (byte*) print_screen ← (number) $400
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) print_str::@4
Culled Empty Block (label) print_str::@3
Culled Empty Block (label) print_str::@5
Culled Empty Block (label) print_str::@6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @12
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @17
Culled Empty Block (label) @18
Culled Empty Block (label) @19
Culled Empty Block (label) @20
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@10
Culled Empty Block (label) main::@12
Culled Empty Block (label) main::@11
Culled Empty Block (label) main::@13
Culled Empty Block (label) main::@14
Culled Empty Block (label) compare::@6
Culled Empty Block (label) compare::@7
Culled Empty Block (label) compare::@19
Culled Empty Block (label) compare::@8
Culled Empty Block (label) compare::@21
Culled Empty Block (label) compare::@9
Culled Empty Block (label) compare::@23
Culled Empty Block (label) compare::@10
Culled Empty Block (label) compare::@25
Culled Empty Block (label) compare::@27

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@4
@4: scope:[]  from @begin
  (byte*) print_screen#0 ← ((byte*)) (number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@16
print_str: scope:[print_str]  from compare::@35
  (byte*) print_char_cursor#60 ← phi( compare::@35/(byte*) print_char_cursor#19 )
  (byte*) print_str::str#4 ← phi( compare::@35/(byte*) print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) print_char_cursor#50 ← phi( print_str/(byte*) print_char_cursor#60 print_str::@2/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#4 print_str::@2/(byte*) print_str::str#0 )
  (bool~) print_str::$0 ← *((byte*) print_str::str#2) != (byte) '@'
  if((bool~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#26 ← phi( print_str::@1/(byte*) print_char_cursor#50 )
  (byte*) print_str::str#3 ← phi( print_str::@1/(byte*) print_str::str#2 )
  *((byte*) print_char_cursor#26) ← *((byte*) print_str::str#3)
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#26
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#27 ← phi( print_str::@1/(byte*) print_char_cursor#50 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#27
  return 
  to:@return
print_ln: scope:[print_ln]  from main::@5
  (byte*) print_char_cursor#51 ← phi( main::@5/(byte*) print_char_cursor#56 )
  (byte*) print_line_cursor#17 ← phi( main::@5/(byte*) print_line_cursor#19 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#28 ← phi( print_ln/(byte*) print_char_cursor#51 print_ln::@1/(byte*) print_char_cursor#28 )
  (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#17 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#28
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#10 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#10
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#29 ← phi( print_ln::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#11 ← phi( print_ln::@2/(byte*) print_line_cursor#10 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#11
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#29
  return 
  to:@return
print_word: scope:[print_word]  from compare::@11 compare::@36
  (byte*) print_char_cursor#52 ← phi( compare::@11/(byte*) print_char_cursor#58 compare::@36/(byte*) print_char_cursor#20 )
  (word) print_word::w#2 ← phi( compare::@11/(word) print_word::w#0 compare::@36/(word) print_word::w#1 )
  (byte~) print_word::$0 ← > (word) print_word::w#2
  (byte) print_byte::b#0 ← (byte~) print_word::$0
  call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#3 ← phi( print_word/(word) print_word::w#2 )
  (byte*) print_char_cursor#30 ← phi( print_word/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#30
  (byte~) print_word::$2 ← < (word) print_word::w#3
  (byte) print_byte::b#1 ← (byte~) print_word::$2
  call print_byte 
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) print_char_cursor#31 ← phi( print_word::@1/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#31
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) print_char_cursor#32 ← phi( print_word::@2/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#32
  return 
  to:@return
@16: scope:[]  from @4
  (byte*) print_screen#8 ← phi( @4/(byte*) print_screen#0 )
  (byte*) print_char_cursor#88 ← phi( @4/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#28 ← phi( @4/(byte*) print_line_cursor#0 )
  (byte[]) print_hextab#0 ← (const string) $0
  to:@23
print_byte: scope:[print_byte]  from print_word print_word::@1
  (byte*) print_char_cursor#53 ← phi( print_word/(byte*) print_char_cursor#52 print_word::@1/(byte*) print_char_cursor#5 )
  (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (number) 4
  (byte) print_char::ch#0 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#3 ← phi( print_byte/(byte) print_byte::b#2 )
  (byte*) print_char_cursor#33 ← phi( print_byte/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#33
  (number~) print_byte::$2 ← (byte) print_byte::b#3 & (number) $f
  (byte) print_char::ch#1 ← *((byte[]) print_hextab#0 + (number~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#34 ← phi( print_byte::@1/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#34
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#35 ← phi( print_byte::@2/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#35
  return 
  to:@return
print_char: scope:[print_char]  from compare::@37 compare::@38 print_byte print_byte::@1
  (byte*) print_char_cursor#36 ← phi( compare::@37/(byte*) print_char_cursor#21 compare::@38/(byte*) print_char_cursor#22 print_byte/(byte*) print_char_cursor#53 print_byte::@1/(byte*) print_char_cursor#8 )
  (byte) print_char::ch#4 ← phi( compare::@37/(byte) print_char::ch#2 compare::@38/(byte) print_char::ch#3 print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 )
  *((byte*) print_char_cursor#36) ← (byte) print_char::ch#4
  (byte*) print_char_cursor#11 ← ++ (byte*) print_char_cursor#36
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#37 ← phi( print_char/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#37
  return 
  to:@return
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#4 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
  (bool~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((bool~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#3 ← phi( print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#3
  (byte*) print_char_cursor#13 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#38 ← phi( print_cls::@2/(byte*) print_char_cursor#13 )
  (byte*) print_line_cursor#12 ← phi( print_cls::@2/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#12
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#38
  return 
  to:@return
@23: scope:[]  from @16
  (byte*) print_screen#7 ← phi( @16/(byte*) print_screen#8 )
  (byte*) print_char_cursor#74 ← phi( @16/(byte*) print_char_cursor#88 )
  (byte*) print_line_cursor#27 ← phi( @16/(byte*) print_line_cursor#28 )
  (word[]) words#0 ← { (number) $12, (number) $3f34, (number) $cfed }
  to:@24
main: scope:[main]  from @25
  (byte*) print_char_cursor#54 ← phi( @25/(byte*) print_char_cursor#59 )
  (byte*) print_line_cursor#18 ← phi( @25/(byte*) print_line_cursor#21 )
  (byte*) print_screen#4 ← phi( @25/(byte*) print_screen#5 )
  call print_cls 
  to:main::@15
main::@15: scope:[main]  from main
  (byte*) print_char_cursor#39 ← phi( main/(byte*) print_char_cursor#14 )
  (byte*) print_line_cursor#13 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#13
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#39
  (byte) main::s#0 ← (number) 0
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@15 main::@7
  (byte*) print_line_cursor#31 ← phi( main::@15/(byte*) print_line_cursor#5 main::@7/(byte*) print_line_cursor#23 )
  (byte) main::s#7 ← phi( main::@15/(byte) main::s#0 main::@7/(byte) main::s#10 )
  (byte*) print_char_cursor#72 ← phi( main::@15/(byte*) print_char_cursor#15 main::@7/(byte*) print_char_cursor#63 )
  (byte) main::i#2 ← phi( main::@15/(byte) main::i#0 main::@7/(byte) main::i#1 )
  (byte~) main::$8 ← (byte) main::i#2 * (const byte) SIZEOF_WORD
  (word) main::w1#0 ← *((word[]) words#0 + (byte~) main::$8)
  (byte) main::j#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  (byte) main::i#10 ← phi( main::@1/(byte) main::i#2 main::@6/(byte) main::i#4 )
  (byte*) print_line_cursor#29 ← phi( main::@1/(byte*) print_line_cursor#31 main::@6/(byte*) print_line_cursor#26 )
  (byte) main::s#5 ← phi( main::@1/(byte) main::s#7 main::@6/(byte) main::s#8 )
  (byte*) print_char_cursor#61 ← phi( main::@1/(byte*) print_char_cursor#72 main::@6/(byte*) print_char_cursor#73 )
  (word) main::w1#2 ← phi( main::@1/(word) main::w1#0 main::@6/(word) main::w1#4 )
  (byte) main::j#2 ← phi( main::@1/(byte) main::j#0 main::@6/(byte) main::j#1 )
  (byte~) main::$9 ← (byte) main::j#2 * (const byte) SIZEOF_WORD
  (word) main::w2#0 ← *((word[]) words#0 + (byte~) main::$9)
  (byte) main::op#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  (byte) main::i#8 ← phi( main::@2/(byte) main::i#10 main::@4/(byte) main::i#5 )
  (byte*) print_line_cursor#25 ← phi( main::@2/(byte*) print_line_cursor#29 main::@4/(byte*) print_line_cursor#30 )
  (byte) main::j#7 ← phi( main::@2/(byte) main::j#2 main::@4/(byte) main::j#4 )
  (byte) main::s#4 ← phi( main::@2/(byte) main::s#5 main::@4/(byte) main::s#6 )
  (byte*) print_char_cursor#55 ← phi( main::@2/(byte*) print_char_cursor#61 main::@4/(byte*) print_char_cursor#62 )
  (byte) main::op#2 ← phi( main::@2/(byte) main::op#0 main::@4/(byte) main::op#1 )
  (word) main::w2#1 ← phi( main::@2/(word) main::w2#0 main::@4/(word) main::w2#2 )
  (word) main::w1#1 ← phi( main::@2/(word) main::w1#2 main::@4/(word) main::w1#3 )
  (word) compare::w1#0 ← (word) main::w1#1
  (word) compare::w2#0 ← (word) main::w2#1
  (byte) compare::op#0 ← (byte) main::op#2
  call compare 
  to:main::@16
main::@16: scope:[main]  from main::@3
  (byte) main::i#6 ← phi( main::@3/(byte) main::i#8 )
  (byte*) print_line_cursor#22 ← phi( main::@3/(byte*) print_line_cursor#25 )
  (byte) main::j#5 ← phi( main::@3/(byte) main::j#7 )
  (word) main::w2#3 ← phi( main::@3/(word) main::w2#1 )
  (word) main::w1#5 ← phi( main::@3/(word) main::w1#1 )
  (byte) main::op#4 ← phi( main::@3/(byte) main::op#2 )
  (byte) main::s#3 ← phi( main::@3/(byte) main::s#4 )
  (byte*) print_char_cursor#40 ← phi( main::@3/(byte*) print_char_cursor#24 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#40
  (byte) main::s#1 ← ++ (byte) main::s#3
  (bool~) main::$2 ← (byte) main::s#1 == (number) 3
  (bool~) main::$3 ← ! (bool~) main::$2
  if((bool~) main::$3) goto main::@4
  to:main::@5
main::@4: scope:[main]  from main::@16 main::@17
  (byte*) print_line_cursor#30 ← phi( main::@16/(byte*) print_line_cursor#22 main::@17/(byte*) print_line_cursor#6 )
  (byte) main::i#5 ← phi( main::@16/(byte) main::i#6 main::@17/(byte) main::i#7 )
  (byte) main::s#6 ← phi( main::@16/(byte) main::s#1 main::@17/(byte) main::s#9 )
  (byte*) print_char_cursor#62 ← phi( main::@16/(byte*) print_char_cursor#16 main::@17/(byte*) print_char_cursor#17 )
  (byte) main::j#4 ← phi( main::@16/(byte) main::j#5 main::@17/(byte) main::j#6 )
  (word) main::w2#2 ← phi( main::@16/(word) main::w2#3 main::@17/(word) main::w2#4 )
  (word) main::w1#3 ← phi( main::@16/(word) main::w1#5 main::@17/(word) main::w1#6 )
  (byte) main::op#3 ← phi( main::@16/(byte) main::op#4 main::@17/(byte) main::op#5 )
  (byte) main::op#1 ← (byte) main::op#3 + rangenext(0,5)
  (bool~) main::$5 ← (byte) main::op#1 != rangelast(0,5)
  if((bool~) main::$5) goto main::@3
  to:main::@6
main::@5: scope:[main]  from main::@16
  (byte) main::i#9 ← phi( main::@16/(byte) main::i#6 )
  (byte) main::j#8 ← phi( main::@16/(byte) main::j#5 )
  (word) main::w2#5 ← phi( main::@16/(word) main::w2#3 )
  (word) main::w1#7 ← phi( main::@16/(word) main::w1#5 )
  (byte) main::op#6 ← phi( main::@16/(byte) main::op#4 )
  (byte*) print_char_cursor#56 ← phi( main::@16/(byte*) print_char_cursor#16 )
  (byte*) print_line_cursor#19 ← phi( main::@16/(byte*) print_line_cursor#22 )
  (byte) main::s#2 ← (number) 0
  call print_ln 
  to:main::@17
main::@17: scope:[main]  from main::@5
  (byte) main::i#7 ← phi( main::@5/(byte) main::i#9 )
  (byte) main::s#9 ← phi( main::@5/(byte) main::s#2 )
  (byte) main::j#6 ← phi( main::@5/(byte) main::j#8 )
  (word) main::w2#4 ← phi( main::@5/(word) main::w2#5 )
  (word) main::w1#6 ← phi( main::@5/(word) main::w1#7 )
  (byte) main::op#5 ← phi( main::@5/(byte) main::op#6 )
  (byte*) print_char_cursor#41 ← phi( main::@5/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#14 ← phi( main::@5/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#14
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#41
  to:main::@4
main::@6: scope:[main]  from main::@4
  (byte*) print_line_cursor#26 ← phi( main::@4/(byte*) print_line_cursor#30 )
  (byte) main::s#8 ← phi( main::@4/(byte) main::s#6 )
  (byte*) print_char_cursor#73 ← phi( main::@4/(byte*) print_char_cursor#62 )
  (word) main::w1#4 ← phi( main::@4/(word) main::w1#3 )
  (byte) main::i#4 ← phi( main::@4/(byte) main::i#5 )
  (byte) main::j#3 ← phi( main::@4/(byte) main::j#4 )
  (byte) main::j#1 ← (byte) main::j#3 + rangenext(0,2)
  (bool~) main::$6 ← (byte) main::j#1 != rangelast(0,2)
  if((bool~) main::$6) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) main::s#10 ← phi( main::@6/(byte) main::s#8 )
  (byte*) print_char_cursor#63 ← phi( main::@6/(byte*) print_char_cursor#73 )
  (byte*) print_line_cursor#23 ← phi( main::@6/(byte*) print_line_cursor#26 )
  (byte) main::i#3 ← phi( main::@6/(byte) main::i#4 )
  (byte) main::i#1 ← (byte) main::i#3 + rangenext(0,2)
  (bool~) main::$7 ← (byte) main::i#1 != rangelast(0,2)
  if((bool~) main::$7) goto main::@1
  to:main::@9
main::@9: scope:[main]  from main::@7 main::@9
  (byte*) print_char_cursor#57 ← phi( main::@7/(byte*) print_char_cursor#63 main::@9/(byte*) print_char_cursor#57 )
  (byte*) print_line_cursor#20 ← phi( main::@7/(byte*) print_line_cursor#23 main::@9/(byte*) print_line_cursor#20 )
  if(true) goto main::@9
  to:main::@return
main::@return: scope:[main]  from main::@9
  (byte*) print_char_cursor#42 ← phi( main::@9/(byte*) print_char_cursor#57 )
  (byte*) print_line_cursor#15 ← phi( main::@9/(byte*) print_line_cursor#20 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#42
  return 
  to:@return
@24: scope:[]  from @23
  (byte*) print_screen#6 ← phi( @23/(byte*) print_screen#7 )
  (byte*) print_char_cursor#71 ← phi( @23/(byte*) print_char_cursor#74 )
  (byte*) print_line_cursor#24 ← phi( @23/(byte*) print_line_cursor#27 )
  (byte) FF#0 ← (number) $57
  (byte) TT#0 ← (number) $51
  to:@25
compare: scope:[compare]  from main::@3
  (byte*) print_char_cursor#89 ← phi( main::@3/(byte*) print_char_cursor#55 )
  (word) compare::w2#8 ← phi( main::@3/(word) compare::w2#0 )
  (word) compare::w1#8 ← phi( main::@3/(word) compare::w1#0 )
  (byte) compare::op#1 ← phi( main::@3/(byte) compare::op#0 )
  (byte) compare::r#0 ← (byte) FF#0
  (byte*) compare::ops#0 ← (byte*) 0
  (bool~) compare::$0 ← (byte) compare::op#1 == (number) 0
  if((bool~) compare::$0) goto compare::@1
  to:compare::@12
compare::@1: scope:[compare]  from compare
  (byte) compare::r#24 ← phi( compare/(byte) compare::r#0 )
  (byte*) print_char_cursor#86 ← phi( compare/(byte*) print_char_cursor#89 )
  (word) compare::w2#1 ← phi( compare/(word) compare::w2#8 )
  (word) compare::w1#1 ← phi( compare/(word) compare::w1#8 )
  (bool~) compare::$22 ← (word) compare::w1#1 < (word) compare::w2#1
  (bool~) compare::$23 ← ! (bool~) compare::$22
  if((bool~) compare::$23) goto compare::@34
  to:compare::@28
compare::@12: scope:[compare]  from compare
  (byte*) compare::ops#13 ← phi( compare/(byte*) compare::ops#0 )
  (byte) compare::r#25 ← phi( compare/(byte) compare::r#0 )
  (byte*) print_char_cursor#90 ← phi( compare/(byte*) print_char_cursor#89 )
  (word) compare::w2#9 ← phi( compare/(word) compare::w2#8 )
  (word) compare::w1#9 ← phi( compare/(word) compare::w1#8 )
  (byte) compare::op#2 ← phi( compare/(byte) compare::op#1 )
  (bool~) compare::$1 ← (byte) compare::op#2 == (number) 1
  if((bool~) compare::$1) goto compare::@2
  to:compare::@13
compare::@2: scope:[compare]  from compare::@12
  (byte) compare::r#23 ← phi( compare::@12/(byte) compare::r#25 )
  (byte*) print_char_cursor#84 ← phi( compare::@12/(byte*) print_char_cursor#90 )
  (word) compare::w2#2 ← phi( compare::@12/(word) compare::w2#9 )
  (word) compare::w1#2 ← phi( compare::@12/(word) compare::w1#9 )
  (bool~) compare::$20 ← (word) compare::w1#2 <= (word) compare::w2#2
  (bool~) compare::$21 ← ! (bool~) compare::$20
  if((bool~) compare::$21) goto compare::@33
  to:compare::@26
compare::@13: scope:[compare]  from compare::@12
  (byte) compare::r#26 ← phi( compare::@12/(byte) compare::r#25 )
  (byte*) compare::ops#12 ← phi( compare::@12/(byte*) compare::ops#13 )
  (byte*) print_char_cursor#91 ← phi( compare::@12/(byte*) print_char_cursor#90 )
  (word) compare::w2#10 ← phi( compare::@12/(word) compare::w2#9 )
  (word) compare::w1#10 ← phi( compare::@12/(word) compare::w1#9 )
  (byte) compare::op#3 ← phi( compare::@12/(byte) compare::op#2 )
  (bool~) compare::$2 ← (byte) compare::op#3 == (number) 2
  if((bool~) compare::$2) goto compare::@3
  to:compare::@14
compare::@3: scope:[compare]  from compare::@13
  (byte) compare::r#22 ← phi( compare::@13/(byte) compare::r#26 )
  (byte*) print_char_cursor#83 ← phi( compare::@13/(byte*) print_char_cursor#91 )
  (word) compare::w2#3 ← phi( compare::@13/(word) compare::w2#10 )
  (word) compare::w1#3 ← phi( compare::@13/(word) compare::w1#10 )
  (bool~) compare::$18 ← (word) compare::w1#3 > (word) compare::w2#3
  (bool~) compare::$19 ← ! (bool~) compare::$18
  if((bool~) compare::$19) goto compare::@32
  to:compare::@24
compare::@14: scope:[compare]  from compare::@13
  (byte) compare::r#27 ← phi( compare::@13/(byte) compare::r#26 )
  (byte*) compare::ops#11 ← phi( compare::@13/(byte*) compare::ops#12 )
  (byte*) print_char_cursor#92 ← phi( compare::@13/(byte*) print_char_cursor#91 )
  (word) compare::w2#11 ← phi( compare::@13/(word) compare::w2#10 )
  (word) compare::w1#11 ← phi( compare::@13/(word) compare::w1#10 )
  (byte) compare::op#4 ← phi( compare::@13/(byte) compare::op#3 )
  (bool~) compare::$3 ← (byte) compare::op#4 == (number) 3
  if((bool~) compare::$3) goto compare::@4
  to:compare::@15
compare::@4: scope:[compare]  from compare::@14
  (byte) compare::r#21 ← phi( compare::@14/(byte) compare::r#27 )
  (byte*) print_char_cursor#81 ← phi( compare::@14/(byte*) print_char_cursor#92 )
  (word) compare::w2#4 ← phi( compare::@14/(word) compare::w2#11 )
  (word) compare::w1#4 ← phi( compare::@14/(word) compare::w1#11 )
  (bool~) compare::$16 ← (word) compare::w1#4 >= (word) compare::w2#4
  (bool~) compare::$17 ← ! (bool~) compare::$16
  if((bool~) compare::$17) goto compare::@31
  to:compare::@22
compare::@15: scope:[compare]  from compare::@14
  (byte) compare::r#18 ← phi( compare::@14/(byte) compare::r#27 )
  (byte*) compare::ops#10 ← phi( compare::@14/(byte*) compare::ops#11 )
  (byte*) print_char_cursor#75 ← phi( compare::@14/(byte*) print_char_cursor#92 )
  (word) compare::w2#12 ← phi( compare::@14/(word) compare::w2#11 )
  (word) compare::w1#12 ← phi( compare::@14/(word) compare::w1#11 )
  (byte) compare::op#5 ← phi( compare::@14/(byte) compare::op#4 )
  (bool~) compare::$4 ← (byte) compare::op#5 == (number) 4
  if((bool~) compare::$4) goto compare::@5
  to:compare::@16
compare::@5: scope:[compare]  from compare::@15
  (byte) compare::r#20 ← phi( compare::@15/(byte) compare::r#18 )
  (byte*) print_char_cursor#79 ← phi( compare::@15/(byte*) print_char_cursor#75 )
  (word) compare::w2#5 ← phi( compare::@15/(word) compare::w2#12 )
  (word) compare::w1#5 ← phi( compare::@15/(word) compare::w1#12 )
  (bool~) compare::$14 ← (word) compare::w1#5 == (word) compare::w2#5
  (bool~) compare::$15 ← ! (bool~) compare::$14
  if((bool~) compare::$15) goto compare::@30
  to:compare::@20
compare::@16: scope:[compare]  from compare::@15
  (byte) compare::r#11 ← phi( compare::@15/(byte) compare::r#18 )
  (byte*) compare::ops#9 ← phi( compare::@15/(byte*) compare::ops#10 )
  (byte*) print_char_cursor#64 ← phi( compare::@15/(byte*) print_char_cursor#75 )
  (word) compare::w2#13 ← phi( compare::@15/(word) compare::w2#12 )
  (word) compare::w1#13 ← phi( compare::@15/(word) compare::w1#12 )
  (byte) compare::op#6 ← phi( compare::@15/(byte) compare::op#5 )
  (bool~) compare::$5 ← (byte) compare::op#6 == (number) 5
  (bool~) compare::$6 ← ! (bool~) compare::$5
  if((bool~) compare::$6) goto compare::@11
  to:compare::@17
compare::@17: scope:[compare]  from compare::@16
  (byte) compare::r#19 ← phi( compare::@16/(byte) compare::r#11 )
  (byte*) print_char_cursor#76 ← phi( compare::@16/(byte*) print_char_cursor#64 )
  (word) compare::w2#6 ← phi( compare::@16/(word) compare::w2#13 )
  (word) compare::w1#6 ← phi( compare::@16/(word) compare::w1#13 )
  (bool~) compare::$12 ← (word) compare::w1#6 != (word) compare::w2#6
  (bool~) compare::$13 ← ! (bool~) compare::$12
  if((bool~) compare::$13) goto compare::@29
  to:compare::@18
compare::@29: scope:[compare]  from compare::@17 compare::@18
  (byte) compare::r#12 ← phi( compare::@17/(byte) compare::r#19 compare::@18/(byte) compare::r#1 )
  (word) compare::w2#16 ← phi( compare::@17/(word) compare::w2#6 compare::@18/(word) compare::w2#22 )
  (byte*) print_char_cursor#65 ← phi( compare::@17/(byte*) print_char_cursor#76 compare::@18/(byte*) print_char_cursor#77 )
  (word) compare::w1#14 ← phi( compare::@17/(word) compare::w1#6 compare::@18/(word) compare::w1#20 )
  (byte*) compare::ops#1 ← (const string) compare::$24
  to:compare::@11
compare::@18: scope:[compare]  from compare::@17
  (word) compare::w2#22 ← phi( compare::@17/(word) compare::w2#6 )
  (byte*) print_char_cursor#77 ← phi( compare::@17/(byte*) print_char_cursor#76 )
  (word) compare::w1#20 ← phi( compare::@17/(word) compare::w1#6 )
  (byte) compare::r#1 ← (byte) TT#0
  to:compare::@29
compare::@30: scope:[compare]  from compare::@20 compare::@5
  (byte) compare::r#13 ← phi( compare::@20/(byte) compare::r#2 compare::@5/(byte) compare::r#20 )
  (word) compare::w2#17 ← phi( compare::@20/(word) compare::w2#23 compare::@5/(word) compare::w2#5 )
  (byte*) print_char_cursor#66 ← phi( compare::@20/(byte*) print_char_cursor#78 compare::@5/(byte*) print_char_cursor#79 )
  (word) compare::w1#15 ← phi( compare::@20/(word) compare::w1#21 compare::@5/(word) compare::w1#5 )
  (byte*) compare::ops#2 ← (const string) compare::$25
  to:compare::@11
compare::@20: scope:[compare]  from compare::@5
  (word) compare::w2#23 ← phi( compare::@5/(word) compare::w2#5 )
  (byte*) print_char_cursor#78 ← phi( compare::@5/(byte*) print_char_cursor#79 )
  (word) compare::w1#21 ← phi( compare::@5/(word) compare::w1#5 )
  (byte) compare::r#2 ← (byte) TT#0
  to:compare::@30
compare::@31: scope:[compare]  from compare::@22 compare::@4
  (byte) compare::r#14 ← phi( compare::@22/(byte) compare::r#3 compare::@4/(byte) compare::r#21 )
  (word) compare::w2#18 ← phi( compare::@22/(word) compare::w2#24 compare::@4/(word) compare::w2#4 )
  (byte*) print_char_cursor#67 ← phi( compare::@22/(byte*) print_char_cursor#80 compare::@4/(byte*) print_char_cursor#81 )
  (word) compare::w1#16 ← phi( compare::@22/(word) compare::w1#22 compare::@4/(word) compare::w1#4 )
  (byte*) compare::ops#3 ← (const string) compare::$26
  to:compare::@11
compare::@22: scope:[compare]  from compare::@4
  (word) compare::w2#24 ← phi( compare::@4/(word) compare::w2#4 )
  (byte*) print_char_cursor#80 ← phi( compare::@4/(byte*) print_char_cursor#81 )
  (word) compare::w1#22 ← phi( compare::@4/(word) compare::w1#4 )
  (byte) compare::r#3 ← (byte) TT#0
  to:compare::@31
compare::@32: scope:[compare]  from compare::@24 compare::@3
  (byte) compare::r#15 ← phi( compare::@24/(byte) compare::r#4 compare::@3/(byte) compare::r#22 )
  (word) compare::w2#19 ← phi( compare::@24/(word) compare::w2#25 compare::@3/(word) compare::w2#3 )
  (byte*) print_char_cursor#68 ← phi( compare::@24/(byte*) print_char_cursor#82 compare::@3/(byte*) print_char_cursor#83 )
  (word) compare::w1#17 ← phi( compare::@24/(word) compare::w1#23 compare::@3/(word) compare::w1#3 )
  (byte*) compare::ops#4 ← (const string) compare::$27
  to:compare::@11
compare::@24: scope:[compare]  from compare::@3
  (word) compare::w2#25 ← phi( compare::@3/(word) compare::w2#3 )
  (byte*) print_char_cursor#82 ← phi( compare::@3/(byte*) print_char_cursor#83 )
  (word) compare::w1#23 ← phi( compare::@3/(word) compare::w1#3 )
  (byte) compare::r#4 ← (byte) TT#0
  to:compare::@32
compare::@33: scope:[compare]  from compare::@2 compare::@26
  (byte) compare::r#16 ← phi( compare::@2/(byte) compare::r#23 compare::@26/(byte) compare::r#5 )
  (word) compare::w2#20 ← phi( compare::@2/(word) compare::w2#2 compare::@26/(word) compare::w2#26 )
  (byte*) print_char_cursor#69 ← phi( compare::@2/(byte*) print_char_cursor#84 compare::@26/(byte*) print_char_cursor#85 )
  (word) compare::w1#18 ← phi( compare::@2/(word) compare::w1#2 compare::@26/(word) compare::w1#24 )
  (byte*) compare::ops#5 ← (const string) compare::$28
  to:compare::@11
compare::@26: scope:[compare]  from compare::@2
  (word) compare::w2#26 ← phi( compare::@2/(word) compare::w2#2 )
  (byte*) print_char_cursor#85 ← phi( compare::@2/(byte*) print_char_cursor#84 )
  (word) compare::w1#24 ← phi( compare::@2/(word) compare::w1#2 )
  (byte) compare::r#5 ← (byte) TT#0
  to:compare::@33
compare::@11: scope:[compare]  from compare::@16 compare::@29 compare::@30 compare::@31 compare::@32 compare::@33 compare::@34
  (byte) compare::r#10 ← phi( compare::@16/(byte) compare::r#11 compare::@29/(byte) compare::r#12 compare::@30/(byte) compare::r#13 compare::@31/(byte) compare::r#14 compare::@32/(byte) compare::r#15 compare::@33/(byte) compare::r#16 compare::@34/(byte) compare::r#17 )
  (word) compare::w2#15 ← phi( compare::@16/(word) compare::w2#13 compare::@29/(word) compare::w2#16 compare::@30/(word) compare::w2#17 compare::@31/(word) compare::w2#18 compare::@32/(word) compare::w2#19 compare::@33/(word) compare::w2#20 compare::@34/(word) compare::w2#21 )
  (byte*) compare::ops#8 ← phi( compare::@16/(byte*) compare::ops#9 compare::@29/(byte*) compare::ops#1 compare::@30/(byte*) compare::ops#2 compare::@31/(byte*) compare::ops#3 compare::@32/(byte*) compare::ops#4 compare::@33/(byte*) compare::ops#5 compare::@34/(byte*) compare::ops#6 )
  (byte*) print_char_cursor#58 ← phi( compare::@16/(byte*) print_char_cursor#64 compare::@29/(byte*) print_char_cursor#65 compare::@30/(byte*) print_char_cursor#66 compare::@31/(byte*) print_char_cursor#67 compare::@32/(byte*) print_char_cursor#68 compare::@33/(byte*) print_char_cursor#69 compare::@34/(byte*) print_char_cursor#70 )
  (word) compare::w1#7 ← phi( compare::@16/(word) compare::w1#13 compare::@29/(word) compare::w1#14 compare::@30/(word) compare::w1#15 compare::@31/(word) compare::w1#16 compare::@32/(word) compare::w1#17 compare::@33/(word) compare::w1#18 compare::@34/(word) compare::w1#19 )
  (word) print_word::w#0 ← (word) compare::w1#7
  call print_word 
  to:compare::@35
compare::@35: scope:[compare]  from compare::@11
  (byte) compare::r#9 ← phi( compare::@11/(byte) compare::r#10 )
  (word) compare::w2#14 ← phi( compare::@11/(word) compare::w2#15 )
  (byte*) compare::ops#7 ← phi( compare::@11/(byte*) compare::ops#8 )
  (byte*) print_char_cursor#43 ← phi( compare::@11/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#43
  (byte*) print_str::str#1 ← (byte*) compare::ops#7
  call print_str 
  to:compare::@36
compare::@36: scope:[compare]  from compare::@35
  (byte) compare::r#8 ← phi( compare::@35/(byte) compare::r#9 )
  (word) compare::w2#7 ← phi( compare::@35/(word) compare::w2#14 )
  (byte*) print_char_cursor#44 ← phi( compare::@35/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#44
  (word) print_word::w#1 ← (word) compare::w2#7
  call print_word 
  to:compare::@37
compare::@37: scope:[compare]  from compare::@36
  (byte) compare::r#7 ← phi( compare::@36/(byte) compare::r#8 )
  (byte*) print_char_cursor#45 ← phi( compare::@36/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#45
  (byte) print_char::ch#2 ← (byte) compare::r#7
  call print_char 
  to:compare::@38
compare::@38: scope:[compare]  from compare::@37
  (byte*) print_char_cursor#46 ← phi( compare::@37/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#46
  (byte) print_char::ch#3 ← (byte) ' '
  call print_char 
  to:compare::@39
compare::@39: scope:[compare]  from compare::@38
  (byte*) print_char_cursor#47 ← phi( compare::@38/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#47
  to:compare::@return
compare::@34: scope:[compare]  from compare::@1 compare::@28
  (byte) compare::r#17 ← phi( compare::@1/(byte) compare::r#24 compare::@28/(byte) compare::r#6 )
  (word) compare::w2#21 ← phi( compare::@1/(word) compare::w2#1 compare::@28/(word) compare::w2#27 )
  (byte*) print_char_cursor#70 ← phi( compare::@1/(byte*) print_char_cursor#86 compare::@28/(byte*) print_char_cursor#87 )
  (word) compare::w1#19 ← phi( compare::@1/(word) compare::w1#1 compare::@28/(word) compare::w1#25 )
  (byte*) compare::ops#6 ← (const string) compare::$29
  to:compare::@11
compare::@28: scope:[compare]  from compare::@1
  (word) compare::w2#27 ← phi( compare::@1/(word) compare::w2#1 )
  (byte*) print_char_cursor#87 ← phi( compare::@1/(byte*) print_char_cursor#86 )
  (word) compare::w1#25 ← phi( compare::@1/(word) compare::w1#1 )
  (byte) compare::r#6 ← (byte) TT#0
  to:compare::@34
compare::@return: scope:[compare]  from compare::@39
  (byte*) print_char_cursor#48 ← phi( compare::@39/(byte*) print_char_cursor#23 )
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#48
  return 
  to:@return
@25: scope:[]  from @24
  (byte*) print_screen#5 ← phi( @24/(byte*) print_screen#6 )
  (byte*) print_char_cursor#59 ← phi( @24/(byte*) print_char_cursor#71 )
  (byte*) print_line_cursor#21 ← phi( @24/(byte*) print_line_cursor#24 )
  call main 
  to:@26
@26: scope:[]  from @25
  (byte*) print_char_cursor#49 ← phi( @25/(byte*) print_char_cursor#18 )
  (byte*) print_line_cursor#16 ← phi( @25/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#49
  to:@end
@end: scope:[]  from @26

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"
(label) @16
(label) @23
(label) @24
(label) @25
(label) @26
(label) @4
(label) @begin
(label) @end
(byte) FF
(byte) FF#0
(const byte) SIZEOF_WORD = (byte) 2
(byte) TT
(byte) TT#0
(void()) compare((word) compare::w1 , (word) compare::w2 , (byte) compare::op)
(bool~) compare::$0
(bool~) compare::$1
(bool~) compare::$12
(bool~) compare::$13
(bool~) compare::$14
(bool~) compare::$15
(bool~) compare::$16
(bool~) compare::$17
(bool~) compare::$18
(bool~) compare::$19
(bool~) compare::$2
(bool~) compare::$20
(bool~) compare::$21
(bool~) compare::$22
(bool~) compare::$23
(const string) compare::$24 = (string) "!=@"
(const string) compare::$25 = (string) "==@"
(const string) compare::$26 = (string) ">=@"
(const string) compare::$27 = (string) "> @"
(const string) compare::$28 = (string) "<=@"
(const string) compare::$29 = (string) "< @"
(bool~) compare::$3
(bool~) compare::$4
(bool~) compare::$5
(bool~) compare::$6
(label) compare::@1
(label) compare::@11
(label) compare::@12
(label) compare::@13
(label) compare::@14
(label) compare::@15
(label) compare::@16
(label) compare::@17
(label) compare::@18
(label) compare::@2
(label) compare::@20
(label) compare::@22
(label) compare::@24
(label) compare::@26
(label) compare::@28
(label) compare::@29
(label) compare::@3
(label) compare::@30
(label) compare::@31
(label) compare::@32
(label) compare::@33
(label) compare::@34
(label) compare::@35
(label) compare::@36
(label) compare::@37
(label) compare::@38
(label) compare::@39
(label) compare::@4
(label) compare::@5
(label) compare::@return
(byte) compare::op
(byte) compare::op#0
(byte) compare::op#1
(byte) compare::op#2
(byte) compare::op#3
(byte) compare::op#4
(byte) compare::op#5
(byte) compare::op#6
(byte*) compare::ops
(byte*) compare::ops#0
(byte*) compare::ops#1
(byte*) compare::ops#10
(byte*) compare::ops#11
(byte*) compare::ops#12
(byte*) compare::ops#13
(byte*) compare::ops#2
(byte*) compare::ops#3
(byte*) compare::ops#4
(byte*) compare::ops#5
(byte*) compare::ops#6
(byte*) compare::ops#7
(byte*) compare::ops#8
(byte*) compare::ops#9
(byte) compare::r
(byte) compare::r#0
(byte) compare::r#1
(byte) compare::r#10
(byte) compare::r#11
(byte) compare::r#12
(byte) compare::r#13
(byte) compare::r#14
(byte) compare::r#15
(byte) compare::r#16
(byte) compare::r#17
(byte) compare::r#18
(byte) compare::r#19
(byte) compare::r#2
(byte) compare::r#20
(byte) compare::r#21
(byte) compare::r#22
(byte) compare::r#23
(byte) compare::r#24
(byte) compare::r#25
(byte) compare::r#26
(byte) compare::r#27
(byte) compare::r#3
(byte) compare::r#4
(byte) compare::r#5
(byte) compare::r#6
(byte) compare::r#7
(byte) compare::r#8
(byte) compare::r#9
(word) compare::w1
(word) compare::w1#0
(word) compare::w1#1
(word) compare::w1#10
(word) compare::w1#11
(word) compare::w1#12
(word) compare::w1#13
(word) compare::w1#14
(word) compare::w1#15
(word) compare::w1#16
(word) compare::w1#17
(word) compare::w1#18
(word) compare::w1#19
(word) compare::w1#2
(word) compare::w1#20
(word) compare::w1#21
(word) compare::w1#22
(word) compare::w1#23
(word) compare::w1#24
(word) compare::w1#25
(word) compare::w1#3
(word) compare::w1#4
(word) compare::w1#5
(word) compare::w1#6
(word) compare::w1#7
(word) compare::w1#8
(word) compare::w1#9
(word) compare::w2
(word) compare::w2#0
(word) compare::w2#1
(word) compare::w2#10
(word) compare::w2#11
(word) compare::w2#12
(word) compare::w2#13
(word) compare::w2#14
(word) compare::w2#15
(word) compare::w2#16
(word) compare::w2#17
(word) compare::w2#18
(word) compare::w2#19
(word) compare::w2#2
(word) compare::w2#20
(word) compare::w2#21
(word) compare::w2#22
(word) compare::w2#23
(word) compare::w2#24
(word) compare::w2#25
(word) compare::w2#26
(word) compare::w2#27
(word) compare::w2#3
(word) compare::w2#4
(word) compare::w2#5
(word) compare::w2#6
(word) compare::w2#7
(word) compare::w2#8
(word) compare::w2#9
(void()) main()
(bool~) main::$2
(bool~) main::$3
(bool~) main::$5
(bool~) main::$6
(bool~) main::$7
(byte~) main::$8
(byte~) main::$9
(label) main::@1
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@9
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#10
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(byte) main::i#7
(byte) main::i#8
(byte) main::i#9
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::j#3
(byte) main::j#4
(byte) main::j#5
(byte) main::j#6
(byte) main::j#7
(byte) main::j#8
(byte) main::op
(byte) main::op#0
(byte) main::op#1
(byte) main::op#2
(byte) main::op#3
(byte) main::op#4
(byte) main::op#5
(byte) main::op#6
(byte) main::s
(byte) main::s#0
(byte) main::s#1
(byte) main::s#10
(byte) main::s#2
(byte) main::s#3
(byte) main::s#4
(byte) main::s#5
(byte) main::s#6
(byte) main::s#7
(byte) main::s#8
(byte) main::s#9
(word) main::w1
(word) main::w1#0
(word) main::w1#1
(word) main::w1#2
(word) main::w1#3
(word) main::w1#4
(word) main::w1#5
(word) main::w1#6
(word) main::w1#7
(word) main::w2
(word) main::w2#0
(word) main::w2#1
(word) main::w2#2
(word) main::w2#3
(word) main::w2#4
(word) main::w2#5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(number~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#77
(byte*) print_char_cursor#78
(byte*) print_char_cursor#79
(byte*) print_char_cursor#8
(byte*) print_char_cursor#80
(byte*) print_char_cursor#81
(byte*) print_char_cursor#82
(byte*) print_char_cursor#83
(byte*) print_char_cursor#84
(byte*) print_char_cursor#85
(byte*) print_char_cursor#86
(byte*) print_char_cursor#87
(byte*) print_char_cursor#88
(byte*) print_char_cursor#89
(byte*) print_char_cursor#9
(byte*) print_char_cursor#90
(byte*) print_char_cursor#91
(byte*) print_char_cursor#92
(void()) print_cls()
(byte*~) print_cls::$0
(bool~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(word) print_word::w#3
(word[]) words
(word[]) words#0

Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
Adding number conversion cast (unumber) 4 in (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_byte::$2 ← (byte) print_byte::b#3 & (number) $f
Adding number conversion cast (unumber) print_byte::$2 in (number~) print_byte::$2 ← (byte) print_byte::b#3 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
Adding number conversion cast (unumber) 0 in (byte) main::s#0 ← (number) 0
Adding number conversion cast (unumber) 3 in (bool~) main::$2 ← (byte) main::s#1 == (number) 3
Adding number conversion cast (unumber) 0 in (byte) main::s#2 ← (number) 0
Adding number conversion cast (unumber) $57 in (byte) FF#0 ← (number) $57
Adding number conversion cast (unumber) $51 in (byte) TT#0 ← (number) $51
Adding number conversion cast (unumber) 0 in (bool~) compare::$0 ← (byte) compare::op#1 == (number) 0
Adding number conversion cast (unumber) 1 in (bool~) compare::$1 ← (byte) compare::op#2 == (number) 1
Adding number conversion cast (unumber) 2 in (bool~) compare::$2 ← (byte) compare::op#3 == (number) 2
Adding number conversion cast (unumber) 3 in (bool~) compare::$3 ← (byte) compare::op#4 == (number) 3
Adding number conversion cast (unumber) 4 in (bool~) compare::$4 ← (byte) compare::op#5 == (number) 4
Adding number conversion cast (unumber) 5 in (bool~) compare::$5 ← (byte) compare::op#6 == (number) 5
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (word) to elements in (word[]) words#0 ← { (word)(number) $12, (word)(number) $3f34, (word)(number) $cfed }
Successful SSA optimization PassNAddArrayNumberTypeConversions
Inlining cast (byte*) print_screen#0 ← (byte*)(number) $400
Inlining cast (byte) main::s#0 ← (unumber)(number) 0
Inlining cast (byte) main::s#2 ← (unumber)(number) 0
Inlining cast (byte) FF#0 ← (unumber)(number) $57
Inlining cast (byte) TT#0 ← (unumber)(number) $51
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast $12
Simplifying constant integer cast $3f34
Simplifying constant integer cast $cfed
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast $57
Simplifying constant integer cast $51
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $57
Finalized unsigned number type (byte) $51
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_byte::$2 ← (byte) print_byte::b#3 & (byte) $f
Inversing boolean not [103] (bool~) main::$3 ← (byte) main::s#1 != (byte) 3 from [102] (bool~) main::$2 ← (byte) main::s#1 == (byte) 3
Inversing boolean not [139] (bool~) compare::$23 ← (word) compare::w1#1 >= (word) compare::w2#1 from [138] (bool~) compare::$22 ← (word) compare::w1#1 < (word) compare::w2#1
Inversing boolean not [146] (bool~) compare::$21 ← (word) compare::w1#2 > (word) compare::w2#2 from [145] (bool~) compare::$20 ← (word) compare::w1#2 <= (word) compare::w2#2
Inversing boolean not [153] (bool~) compare::$19 ← (word) compare::w1#3 <= (word) compare::w2#3 from [152] (bool~) compare::$18 ← (word) compare::w1#3 > (word) compare::w2#3
Inversing boolean not [160] (bool~) compare::$17 ← (word) compare::w1#4 < (word) compare::w2#4 from [159] (bool~) compare::$16 ← (word) compare::w1#4 >= (word) compare::w2#4
Inversing boolean not [167] (bool~) compare::$15 ← (word) compare::w1#5 != (word) compare::w2#5 from [166] (bool~) compare::$14 ← (word) compare::w1#5 == (word) compare::w2#5
Inversing boolean not [171] (bool~) compare::$6 ← (byte) compare::op#6 != (byte) 5 from [170] (bool~) compare::$5 ← (byte) compare::op#6 == (byte) 5
Inversing boolean not [175] (bool~) compare::$13 ← (word) compare::w1#6 == (word) compare::w2#6 from [174] (bool~) compare::$12 ← (word) compare::w1#6 != (word) compare::w2#6
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#28 (byte*) print_char_cursor#88 (byte*) print_screen#8 (byte*) print_line_cursor#27 (byte*) print_char_cursor#74 (byte*) print_screen#7 (byte*) print_line_cursor#24 (byte*) print_char_cursor#71 (byte*) print_screen#6 (byte*) print_line_cursor#21 (byte*) print_char_cursor#59 (byte*) print_screen#5 
Alias (byte*) print_str::str#2 = (byte*) print_str::str#3 
Alias (byte*) print_char_cursor#2 = (byte*) print_char_cursor#26 (byte*) print_char_cursor#50 (byte*) print_char_cursor#27 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#10 (byte*) print_char_cursor#3 (byte*) print_line_cursor#11 (byte*) print_char_cursor#29 (byte*) print_line_cursor#2 (byte*) print_char_cursor#4 
Alias (byte) print_byte::b#0 = (byte~) print_word::$0 
Alias (word) print_word::w#2 = (word) print_word::w#3 
Alias (byte*) print_char_cursor#30 = (byte*) print_char_cursor#5 
Alias (byte) print_byte::b#1 = (byte~) print_word::$2 
Alias (byte*) print_char_cursor#31 = (byte*) print_char_cursor#6 (byte*) print_char_cursor#32 (byte*) print_char_cursor#7 
Alias (byte) print_byte::b#2 = (byte) print_byte::b#3 
Alias (byte*) print_char_cursor#33 = (byte*) print_char_cursor#8 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#9 (byte*) print_char_cursor#34 (byte*) print_char_cursor#35 
Alias (byte*) print_char_cursor#11 = (byte*) print_char_cursor#37 (byte*) print_char_cursor#12 
Alias (byte*) print_line_cursor#12 = (byte*) print_screen#3 (byte*) print_screen#2 (byte*) print_line_cursor#3 (byte*) print_char_cursor#13 (byte*) print_char_cursor#38 (byte*) print_line_cursor#4 (byte*) print_char_cursor#14 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#5 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#39 
Alias (byte) main::s#3 = (byte) main::s#4 
Alias (byte) main::op#2 = (byte) main::op#4 (byte) main::op#6 (byte) main::op#5 
Alias (word) main::w1#1 = (word) main::w1#5 (word) main::w1#7 (word) main::w1#6 
Alias (word) main::w2#1 = (word) main::w2#3 (word) main::w2#5 (word) main::w2#4 
Alias (byte) main::j#5 = (byte) main::j#7 (byte) main::j#8 (byte) main::j#6 
Alias (byte*) print_line_cursor#19 = (byte*) print_line_cursor#22 (byte*) print_line_cursor#25 
Alias (byte) main::i#6 = (byte) main::i#8 (byte) main::i#9 (byte) main::i#7 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#40 (byte*) print_char_cursor#56 
Alias (byte) main::s#2 = (byte) main::s#9 
Alias (byte*) print_line_cursor#14 = (byte*) print_line_cursor#6 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#41 
Alias (byte) main::j#3 = (byte) main::j#4 
Alias (byte) main::i#3 = (byte) main::i#4 (byte) main::i#5 
Alias (word) main::w1#3 = (word) main::w1#4 
Alias (byte*) print_char_cursor#62 = (byte*) print_char_cursor#73 (byte*) print_char_cursor#63 
Alias (byte) main::s#10 = (byte) main::s#8 (byte) main::s#6 
Alias (byte*) print_line_cursor#23 = (byte*) print_line_cursor#26 (byte*) print_line_cursor#30 
Alias (byte*) print_line_cursor#15 = (byte*) print_line_cursor#20 (byte*) print_line_cursor#7 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#42 (byte*) print_char_cursor#57 
Alias (word) compare::w1#1 = (word) compare::w1#8 (word) compare::w1#9 (word) compare::w1#2 (word) compare::w1#10 (word) compare::w1#3 (word) compare::w1#11 (word) compare::w1#4 (word) compare::w1#12 (word) compare::w1#5 (word) compare::w1#13 (word) compare::w1#6 (word) compare::w1#20 (word) compare::w1#21 (word) compare::w1#22 (word) compare::w1#23 (word) compare::w1#24 (word) compare::w1#25 
Alias (word) compare::w2#1 = (word) compare::w2#8 (word) compare::w2#9 (word) compare::w2#2 (word) compare::w2#10 (word) compare::w2#3 (word) compare::w2#11 (word) compare::w2#4 (word) compare::w2#12 (word) compare::w2#5 (word) compare::w2#13 (word) compare::w2#6 (word) compare::w2#22 (word) compare::w2#23 (word) compare::w2#24 (word) compare::w2#25 (word) compare::w2#26 (word) compare::w2#27 
Alias (byte*) print_char_cursor#64 = (byte*) print_char_cursor#86 (byte*) print_char_cursor#89 (byte*) print_char_cursor#90 (byte*) print_char_cursor#84 (byte*) print_char_cursor#91 (byte*) print_char_cursor#83 (byte*) print_char_cursor#92 (byte*) print_char_cursor#81 (byte*) print_char_cursor#75 (byte*) print_char_cursor#79 (byte*) print_char_cursor#76 (byte*) print_char_cursor#77 (byte*) print_char_cursor#78 (byte*) print_char_cursor#80 (byte*) print_char_cursor#82 (byte*) print_char_cursor#85 (byte*) print_char_cursor#87 
Alias (byte) compare::r#0 = (byte) compare::r#24 (byte) compare::r#25 (byte) compare::r#23 (byte) compare::r#26 (byte) compare::r#22 (byte) compare::r#27 (byte) compare::r#21 (byte) compare::r#18 (byte) compare::r#20 (byte) compare::r#11 (byte) compare::r#19 
Alias (byte) compare::op#1 = (byte) compare::op#2 (byte) compare::op#3 (byte) compare::op#4 (byte) compare::op#5 (byte) compare::op#6 
Alias (byte*) compare::ops#0 = (byte*) compare::ops#13 (byte*) compare::ops#12 (byte*) compare::ops#11 (byte*) compare::ops#10 (byte*) compare::ops#9 
Alias (byte*) compare::ops#7 = (byte*) compare::ops#8 
Alias (word) compare::w2#14 = (word) compare::w2#15 (word) compare::w2#7 
Alias (byte) compare::r#10 = (byte) compare::r#9 (byte) compare::r#8 (byte) compare::r#7 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#43 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#44 
Alias (byte*) print_char_cursor#21 = (byte*) print_char_cursor#45 
Alias (byte*) print_char_cursor#22 = (byte*) print_char_cursor#46 
Alias (byte*) print_char_cursor#23 = (byte*) print_char_cursor#47 (byte*) print_char_cursor#48 (byte*) print_char_cursor#24 
Alias (byte*) print_line_cursor#16 = (byte*) print_line_cursor#8 
Alias (byte*) print_char_cursor#25 = (byte*) print_char_cursor#49 
Successful SSA optimization Pass2AliasElimination
Alias (byte) main::op#2 = (byte) main::op#3 
Alias (word) main::w1#1 = (word) main::w1#3 
Alias (word) main::w2#1 = (word) main::w2#2 
Alias (byte) main::j#3 = (byte) main::j#5 
Alias (byte) main::i#3 = (byte) main::i#6 
Alias (word) compare::w1#1 = (word) compare::w1#14 (word) compare::w1#15 (word) compare::w1#16 (word) compare::w1#17 (word) compare::w1#18 (word) compare::w1#19 
Alias (byte*) print_char_cursor#64 = (byte*) print_char_cursor#65 (byte*) print_char_cursor#66 (byte*) print_char_cursor#67 (byte*) print_char_cursor#68 (byte*) print_char_cursor#69 (byte*) print_char_cursor#70 
Alias (word) compare::w2#1 = (word) compare::w2#16 (word) compare::w2#17 (word) compare::w2#18 (word) compare::w2#19 (word) compare::w2#20 (word) compare::w2#21 
Successful SSA optimization Pass2AliasElimination
Alias (word) compare::w1#1 = (word) compare::w1#7 
Alias (byte*) print_char_cursor#58 = (byte*) print_char_cursor#64 
Alias (word) compare::w2#1 = (word) compare::w2#14 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) print_char_cursor#28
Self Phi Eliminated (byte*) print_line_cursor#12
Self Phi Eliminated (word) main::w1#1
Self Phi Eliminated (word) main::w2#1
Self Phi Eliminated (byte) main::j#3
Self Phi Eliminated (byte) main::i#3
Self Phi Eliminated (byte*) print_line_cursor#15
Self Phi Eliminated (byte*) print_char_cursor#18
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte*) print_str::str#4 (byte*) print_str::str#1
Identical Phi Values (byte*) print_char_cursor#60 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#19
Identical Phi Values (byte*) print_char_cursor#51 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#28 (byte*) print_char_cursor#51
Identical Phi Values (byte*) print_char_cursor#30 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#33 (byte*) print_char_cursor#11
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#11
Identical Phi Values (byte*) print_screen#1 (byte*) print_screen#4
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_screen#1
Identical Phi Values (byte*) print_screen#4 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#54 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_line_cursor#12
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_line_cursor#12
Identical Phi Values (word) main::w1#1 (word) main::w1#2
Identical Phi Values (word) main::w2#1 (word) main::w2#0
Identical Phi Values (byte) main::j#3 (byte) main::j#2
Identical Phi Values (byte) main::i#3 (byte) main::i#10
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#23
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#15 (byte*) print_line_cursor#23
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_char_cursor#62
Identical Phi Values (byte) compare::op#1 (byte) compare::op#0
Identical Phi Values (word) compare::w1#1 (word) compare::w1#0
Identical Phi Values (word) compare::w2#1 (word) compare::w2#0
Identical Phi Values (byte*) print_char_cursor#58 (byte*) print_char_cursor#55
Identical Phi Values (byte*) print_char_cursor#19 (byte*) print_char_cursor#31
Identical Phi Values (byte*) print_char_cursor#20 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_char_cursor#31
Identical Phi Values (byte*) print_char_cursor#22 (byte*) print_char_cursor#11
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#11
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#18
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) print_str::$0 [6] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2
Simple Condition (bool~) print_ln::$1 [19] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#11) goto print_ln::@1
Simple Condition (bool~) print_cls::$1 [69] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (bool~) main::$3 [104] if((byte) main::s#1!=(byte) 3) goto main::@4
Simple Condition (bool~) main::$5 [108] if((byte) main::op#1!=rangelast(0,5)) goto main::@3
Simple Condition (bool~) main::$6 [118] if((byte) main::j#1!=rangelast(0,2)) goto main::@2
Simple Condition (bool~) main::$7 [122] if((byte) main::i#1!=rangelast(0,2)) goto main::@1
Simple Condition (bool~) compare::$0 [136] if((byte) compare::op#0==(byte) 0) goto compare::@1
Simple Condition (bool~) compare::$23 [140] if((word) compare::w1#0>=(word) compare::w2#0) goto compare::@34
Simple Condition (bool~) compare::$1 [143] if((byte) compare::op#0==(byte) 1) goto compare::@2
Simple Condition (bool~) compare::$21 [147] if((word) compare::w1#0>(word) compare::w2#0) goto compare::@33
Simple Condition (bool~) compare::$2 [150] if((byte) compare::op#0==(byte) 2) goto compare::@3
Simple Condition (bool~) compare::$19 [154] if((word) compare::w1#0<=(word) compare::w2#0) goto compare::@32
Simple Condition (bool~) compare::$3 [157] if((byte) compare::op#0==(byte) 3) goto compare::@4
Simple Condition (bool~) compare::$17 [161] if((word) compare::w1#0<(word) compare::w2#0) goto compare::@31
Simple Condition (bool~) compare::$4 [164] if((byte) compare::op#0==(byte) 4) goto compare::@5
Simple Condition (bool~) compare::$15 [168] if((word) compare::w1#0!=(word) compare::w2#0) goto compare::@30
Simple Condition (bool~) compare::$6 [172] if((byte) compare::op#0!=(byte) 5) goto compare::@11
Simple Condition (bool~) compare::$13 [176] if((word) compare::w1#0==(word) compare::w2#0) goto compare::@29
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [78] (word[]) words#0 ← { (word) $12, (word) $3f34, (word) $cfed }
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte[]) print_hextab#0 = $0
Constant (const word[]) words#0 = { $12, $3f34, $cfed }
Constant (const byte) main::s#0 = 0
Constant (const byte) main::i#0 = 0
Constant (const byte) main::j#0 = 0
Constant (const byte) main::op#0 = 0
Constant (const byte) main::s#2 = 0
Constant (const byte) FF#0 = $57
Constant (const byte) TT#0 = $51
Constant (const byte*) compare::ops#0 = (byte*) 0
Constant (const byte*) compare::ops#1 = compare::$24
Constant (const byte*) compare::ops#2 = compare::$25
Constant (const byte*) compare::ops#3 = compare::$26
Constant (const byte*) compare::ops#4 = compare::$27
Constant (const byte*) compare::ops#5 = compare::$28
Constant (const byte) print_char::ch#3 = ' '
Constant (const byte*) compare::ops#6 = compare::$29
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_cls::sc#0 = print_line_cursor#0
Constant (const byte) compare::r#0 = FF#0
Constant (const byte) compare::r#1 = TT#0
Constant (const byte) compare::r#2 = TT#0
Constant (const byte) compare::r#3 = TT#0
Constant (const byte) compare::r#4 = TT#0
Constant (const byte) compare::r#5 = TT#0
Constant (const byte) compare::r#6 = TT#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [124] if(true) goto main::@9
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [106] main::op#1 ← ++ main::op#2 to ++
Resolved ranged comparison value [108] if(main::op#1!=rangelast(0,5)) goto main::@3 to (number) 6
Resolved ranged next value [116] main::j#1 ← ++ main::j#2 to ++
Resolved ranged comparison value [118] if(main::j#1!=rangelast(0,2)) goto main::@2 to (number) 3
Resolved ranged next value [120] main::i#1 ← ++ main::i#10 to ++
Resolved ranged comparison value [122] if(main::i#1!=rangelast(0,2)) goto main::@1 to (number) 3
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 6 in if((byte) main::op#1!=(number) 6) goto main::@3
Adding number conversion cast (unumber) 3 in if((byte) main::j#1!=(number) 3) goto main::@2
Adding number conversion cast (unumber) 3 in if((byte) main::i#1!=(number) 3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 6
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Self Phi Eliminated (word) main::w1#2
Self Phi Eliminated (byte) main::i#10
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (word) main::w1#2 (word) main::w1#0
Identical Phi Values (byte) main::i#10 (byte) main::i#2
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [31] (byte*~) print_cls::$0 ← (const byte*) print_line_cursor#0 + (word) $3e8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) print_cls::$0 = print_line_cursor#0+$3e8
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift [35] (byte~) main::$8 ← (byte) main::i#2 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [38] (byte~) main::$9 ← (byte) main::j#2 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) print_char::ch#3
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte) main::s#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::op#0
Inlining constant with var siblings (const byte) main::s#2
Inlining constant with var siblings (const byte*) compare::ops#0
Inlining constant with var siblings (const byte*) compare::ops#1
Inlining constant with var siblings (const byte*) compare::ops#2
Inlining constant with var siblings (const byte*) compare::ops#3
Inlining constant with var siblings (const byte*) compare::ops#4
Inlining constant with var siblings (const byte*) compare::ops#5
Inlining constant with var siblings (const byte*) compare::ops#6
Inlining constant with var siblings (const byte) compare::r#0
Inlining constant with var siblings (const byte) compare::r#1
Inlining constant with var siblings (const byte) compare::r#2
Inlining constant with var siblings (const byte) compare::r#3
Inlining constant with var siblings (const byte) compare::r#4
Inlining constant with var siblings (const byte) compare::r#5
Inlining constant with var siblings (const byte) compare::r#6
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined print_cls::$0 = (byte*) 1024+(word) $3e8
Constant inlined compare::ops#0 = (byte*) 0
Constant inlined compare::r#1 = (const byte) TT#0
Constant inlined compare::r#0 = (const byte) FF#0
Constant inlined compare::r#3 = (const byte) TT#0
Constant inlined $0 = (const byte[]) print_hextab#0
Constant inlined compare::r#2 = (const byte) TT#0
Constant inlined compare::r#5 = (const byte) TT#0
Constant inlined compare::r#4 = (const byte) TT#0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::j#0 = (byte) 0
Constant inlined main::op#0 = (byte) 0
Constant inlined main::s#0 = (byte) 0
Constant inlined print_line_cursor#0 = (byte*) 1024
Constant inlined print_cls::sc#0 = (byte*) 1024
Constant inlined main::s#2 = (byte) 0
Constant inlined print_char::ch#3 = (byte) ' '
Constant inlined compare::$24 = (const byte*) compare::ops#1
Constant inlined compare::r#6 = (const byte) TT#0
Constant inlined compare::$25 = (const byte*) compare::ops#2
Constant inlined compare::$26 = (const byte*) compare::ops#3
Constant inlined compare::$27 = (const byte*) compare::ops#4
Constant inlined compare::$28 = (const byte*) compare::ops#5
Constant inlined compare::$29 = (const byte*) compare::ops#6
Successful SSA optimization Pass2ConstantInlining
Inlining constant with var siblings (const byte*) compare::ops#1
Inlining constant with var siblings (const byte*) compare::ops#2
Inlining constant with var siblings (const byte*) compare::ops#3
Inlining constant with var siblings (const byte*) compare::ops#4
Inlining constant with var siblings (const byte*) compare::ops#5
Inlining constant with var siblings (const byte*) compare::ops#6
Eliminating unused constant (const byte) SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings (const byte*) compare::ops#1
Inlining constant with var siblings (const byte*) compare::ops#2
Inlining constant with var siblings (const byte*) compare::ops#3
Inlining constant with var siblings (const byte*) compare::ops#4
Inlining constant with var siblings (const byte*) compare::ops#5
Inlining constant with var siblings (const byte*) compare::ops#6
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Added new block during phi lifting main::@18(between main::@7 and main::@1)
Added new block during phi lifting main::@19(between main::@6 and main::@2)
Added new block during phi lifting main::@20(between main::@4 and main::@3)
Added new block during phi lifting main::@21(between main::@16 and main::@4)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @4
Adding NOP phi() at start of @16
Adding NOP phi() at start of @23
Adding NOP phi() at start of @24
Adding NOP phi() at start of @25
Adding NOP phi() at start of @26
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of compare::@18
Adding NOP phi() at start of compare::@39
Adding NOP phi() at start of compare::@20
Adding NOP phi() at start of compare::@22
Adding NOP phi() at start of compare::@24
Adding NOP phi() at start of compare::@26
Adding NOP phi() at start of compare::@28
Adding NOP phi() at start of print_word::@2
Adding NOP phi() at start of print_byte::@2
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@2
CALL GRAPH
Calls in [] to main:6 
Calls in [main] to print_cls:10 compare:28 print_ln:32 
Calls in [compare] to print_word:79 print_str:81 print_word:85 print_char:89 print_char:91 
Calls in [print_word] to print_byte:122 print_byte:126 
Calls in [print_byte] to print_char:134 print_char:139 

Created 33 initial phi equivalence classes
Coalesced [15] print_char_cursor#104 ← print_char_cursor#72
Coalesced [16] main::s#12 ← main::s#7
Coalesced [17] print_line_cursor#35 ← print_line_cursor#31
Coalesced [21] print_char_cursor#106 ← print_char_cursor#61
Coalesced [22] main::s#14 ← main::s#5
Coalesced [23] print_line_cursor#37 ← print_line_cursor#29
Not coalescing [33] print_char_cursor#109 ← print_line_cursor#1
Coalesced [34] print_line_cursor#40 ← print_line_cursor#1
Coalesced [43] main::i#11 ← main::i#1
Coalesced [44] print_char_cursor#103 ← print_char_cursor#62
Coalesced [45] main::s#11 ← main::s#10
Coalesced [46] print_line_cursor#34 ← print_line_cursor#23
Coalesced [47] main::j#9 ← main::j#1
Coalesced (already) [48] print_char_cursor#105 ← print_char_cursor#62
Coalesced (already) [49] main::s#13 ← main::s#10
Coalesced (already) [50] print_line_cursor#36 ← print_line_cursor#23
Coalesced [51] main::op#7 ← main::op#1
Coalesced (already) [52] print_char_cursor#107 ← print_char_cursor#62
Coalesced (already) [53] main::s#15 ← main::s#10
Coalesced (already) [54] print_line_cursor#38 ← print_line_cursor#23
Coalesced [55] print_char_cursor#108 ← print_char_cursor#11
Coalesced [56] main::s#16 ← main::s#1
Coalesced (already) [57] print_line_cursor#39 ← print_line_cursor#19
Coalesced [58] print_line_cursor#32 ← print_line_cursor#19
Coalesced (already) [64] print_line_cursor#33 ← print_line_cursor#1
Coalesced [74] compare::r#28 ← compare::r#12
Coalesced [77] print_word::w#4 ← print_word::w#0
Coalesced [78] print_char_cursor#95 ← print_char_cursor#55
Coalesced [83] print_word::w#5 ← print_word::w#1
Coalesced [84] print_char_cursor#96 ← print_char_cursor#2
Coalesced [87] print_char::ch#5 ← print_char::ch#2
Coalesced [88] print_char_cursor#99 ← print_char_cursor#11
Coalesced (already) [90] print_char_cursor#100 ← print_char_cursor#11
Coalesced [97] compare::r#29 ← compare::r#13
Coalesced [101] compare::r#30 ← compare::r#14
Coalesced [105] compare::r#31 ← compare::r#15
Coalesced [109] compare::r#32 ← compare::r#16
Coalesced [113] compare::r#33 ← compare::r#17
Coalesced [120] print_byte::b#4 ← print_byte::b#0
Coalesced [121] print_char_cursor#97 ← print_char_cursor#52
Coalesced [124] print_byte::b#5 ← print_byte::b#1
Coalesced (already) [125] print_char_cursor#98 ← print_char_cursor#11
Coalesced [132] print_char::ch#6 ← print_char::ch#0
Coalesced (already) [133] print_char_cursor#101 ← print_char_cursor#53
Coalesced [137] print_char::ch#7 ← print_char::ch#1
Coalesced (already) [138] print_char_cursor#102 ← print_char_cursor#11
Coalesced [142] print_str::str#5 ← print_str::str#1
Coalesced (already) [143] print_char_cursor#93 ← print_char_cursor#11
Coalesced [150] print_str::str#6 ← print_str::str#0
Coalesced [151] print_char_cursor#94 ← print_char_cursor#1
Coalesced [159] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 13 phi equivalence classes
Culled Empty Block (label) @4
Culled Empty Block (label) @16
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @26
Culled Empty Block (label) main::@15
Culled Empty Block (label) main::@18
Culled Empty Block (label) main::@19
Culled Empty Block (label) main::@20
Culled Empty Block (label) main::@21
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) compare::@39
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) print_cls::@3
Renumbering block @25 to @1
Renumbering block main::@9 to main::@8
Renumbering block main::@16 to main::@9
Renumbering block main::@17 to main::@10
Renumbering block compare::@11 to compare::@6
Renumbering block compare::@12 to compare::@7
Renumbering block compare::@13 to compare::@8
Renumbering block compare::@14 to compare::@9
Renumbering block compare::@15 to compare::@10
Renumbering block compare::@16 to compare::@11
Renumbering block compare::@17 to compare::@12
Renumbering block compare::@18 to compare::@13
Renumbering block compare::@20 to compare::@14
Renumbering block compare::@22 to compare::@15
Renumbering block compare::@24 to compare::@16
Renumbering block compare::@26 to compare::@17
Renumbering block compare::@28 to compare::@18
Renumbering block compare::@29 to compare::@19
Renumbering block compare::@30 to compare::@20
Renumbering block compare::@31 to compare::@21
Renumbering block compare::@32 to compare::@22
Renumbering block compare::@33 to compare::@23
Renumbering block compare::@34 to compare::@24
Renumbering block compare::@35 to compare::@25
Renumbering block compare::@36 to compare::@26
Renumbering block compare::@37 to compare::@27
Renumbering block compare::@38 to compare::@28
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of compare::@13
Adding NOP phi() at start of compare::@28
Adding NOP phi() at start of compare::@14
Adding NOP phi() at start of compare::@15
Adding NOP phi() at start of compare::@16
Adding NOP phi() at start of compare::@17
Adding NOP phi() at start of compare::@18
Adding NOP phi() at start of print_str
Adding NOP phi() at start of print_cls

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main main::@7
  [6] (byte*) print_line_cursor#31 ← phi( main/(byte*) 1024 main::@7/(byte*) print_line_cursor#23 )
  [6] (byte) main::s#7 ← phi( main/(byte) 0 main::@7/(byte) main::s#10 )
  [6] (byte*) print_char_cursor#72 ← phi( main/(byte*) 1024 main::@7/(byte*) print_char_cursor#62 )
  [6] (byte) main::i#2 ← phi( main/(byte) 0 main::@7/(byte) main::i#1 )
  [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1
  [8] (word) main::w1#0 ← *((const word[]) words#0 + (byte~) main::$8)
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  [9] (byte*) print_line_cursor#29 ← phi( main::@1/(byte*) print_line_cursor#31 main::@6/(byte*) print_line_cursor#23 )
  [9] (byte) main::s#5 ← phi( main::@1/(byte) main::s#7 main::@6/(byte) main::s#10 )
  [9] (byte*) print_char_cursor#61 ← phi( main::@1/(byte*) print_char_cursor#72 main::@6/(byte*) print_char_cursor#62 )
  [9] (byte) main::j#2 ← phi( main::@1/(byte) 0 main::@6/(byte) main::j#1 )
  [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1
  [11] (word) main::w2#0 ← *((const word[]) words#0 + (byte~) main::$9)
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [12] (byte*) print_line_cursor#19 ← phi( main::@2/(byte*) print_line_cursor#29 main::@4/(byte*) print_line_cursor#23 )
  [12] (byte) main::s#3 ← phi( main::@2/(byte) main::s#5 main::@4/(byte) main::s#10 )
  [12] (byte*) print_char_cursor#55 ← phi( main::@2/(byte*) print_char_cursor#61 main::@4/(byte*) print_char_cursor#62 )
  [12] (byte) main::op#2 ← phi( main::@2/(byte) 0 main::@4/(byte) main::op#1 )
  [13] (word) compare::w1#0 ← (word) main::w1#0
  [14] (word) compare::w2#0 ← (word) main::w2#0
  [15] (byte) compare::op#0 ← (byte) main::op#2
  [16] call compare 
  to:main::@9
main::@9: scope:[main]  from main::@3
  [17] (byte) main::s#1 ← ++ (byte) main::s#3
  [18] if((byte) main::s#1!=(byte) 3) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@9
  [19] phi()
  [20] call print_ln 
  to:main::@10
main::@10: scope:[main]  from main::@5
  [21] (byte*~) print_char_cursor#109 ← (byte*) print_line_cursor#1
  to:main::@4
main::@4: scope:[main]  from main::@10 main::@9
  [22] (byte*) print_line_cursor#23 ← phi( main::@9/(byte*) print_line_cursor#19 main::@10/(byte*) print_line_cursor#1 )
  [22] (byte) main::s#10 ← phi( main::@9/(byte) main::s#1 main::@10/(byte) 0 )
  [22] (byte*) print_char_cursor#62 ← phi( main::@9/(byte*) print_char_cursor#11 main::@10/(byte*~) print_char_cursor#109 )
  [23] (byte) main::op#1 ← ++ (byte) main::op#2
  [24] if((byte) main::op#1!=(byte) 6) goto main::@3
  to:main::@6
main::@6: scope:[main]  from main::@4
  [25] (byte) main::j#1 ← ++ (byte) main::j#2
  [26] if((byte) main::j#1!=(byte) 3) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  [27] (byte) main::i#1 ← ++ (byte) main::i#2
  [28] if((byte) main::i#1!=(byte) 3) goto main::@1
  to:main::@8
main::@8: scope:[main]  from main::@7 main::@8
  [29] phi()
  to:main::@8
print_ln: scope:[print_ln]  from main::@5
  [30] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [31] (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#19 print_ln::@1/(byte*) print_line_cursor#1 )
  [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28
  [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#11) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [34] return 
  to:@return
compare: scope:[compare]  from main::@3
  [35] if((byte) compare::op#0==(byte) 0) goto compare::@1
  to:compare::@7
compare::@7: scope:[compare]  from compare
  [36] if((byte) compare::op#0==(byte) 1) goto compare::@2
  to:compare::@8
compare::@8: scope:[compare]  from compare::@7
  [37] if((byte) compare::op#0==(byte) 2) goto compare::@3
  to:compare::@9
compare::@9: scope:[compare]  from compare::@8
  [38] if((byte) compare::op#0==(byte) 3) goto compare::@4
  to:compare::@10
compare::@10: scope:[compare]  from compare::@9
  [39] if((byte) compare::op#0==(byte) 4) goto compare::@5
  to:compare::@11
compare::@11: scope:[compare]  from compare::@10
  [40] if((byte) compare::op#0!=(byte) 5) goto compare::@6
  to:compare::@12
compare::@12: scope:[compare]  from compare::@11
  [41] if((word) compare::w1#0==(word) compare::w2#0) goto compare::@19
  to:compare::@13
compare::@13: scope:[compare]  from compare::@12
  [42] phi()
  to:compare::@19
compare::@19: scope:[compare]  from compare::@12 compare::@13
  [43] (byte) compare::r#12 ← phi( compare::@12/(const byte) FF#0 compare::@13/(const byte) TT#0 )
  to:compare::@6
compare::@6: scope:[compare]  from compare::@11 compare::@19 compare::@20 compare::@21 compare::@22 compare::@23 compare::@24
  [44] (byte) compare::r#10 ← phi( compare::@11/(const byte) FF#0 compare::@19/(byte) compare::r#12 compare::@20/(byte) compare::r#13 compare::@21/(byte) compare::r#14 compare::@22/(byte) compare::r#15 compare::@23/(byte) compare::r#16 compare::@24/(byte) compare::r#17 )
  [44] (byte*) compare::ops#7 ← phi( compare::@11/(byte*) 0 compare::@19/(const byte*) compare::ops#1 compare::@20/(const byte*) compare::ops#2 compare::@21/(const byte*) compare::ops#3 compare::@22/(const byte*) compare::ops#4 compare::@23/(const byte*) compare::ops#5 compare::@24/(const byte*) compare::ops#6 )
  [45] (word) print_word::w#0 ← (word) compare::w1#0
  [46] call print_word 
  to:compare::@25
compare::@25: scope:[compare]  from compare::@6
  [47] (byte*) print_str::str#1 ← (byte*) compare::ops#7
  [48] call print_str 
  to:compare::@26
compare::@26: scope:[compare]  from compare::@25
  [49] (word) print_word::w#1 ← (word) compare::w2#0
  [50] call print_word 
  to:compare::@27
compare::@27: scope:[compare]  from compare::@26
  [51] (byte) print_char::ch#2 ← (byte) compare::r#10
  [52] call print_char 
  to:compare::@28
compare::@28: scope:[compare]  from compare::@27
  [53] phi()
  [54] call print_char 
  to:compare::@return
compare::@return: scope:[compare]  from compare::@28
  [55] return 
  to:@return
compare::@5: scope:[compare]  from compare::@10
  [56] if((word) compare::w1#0!=(word) compare::w2#0) goto compare::@20
  to:compare::@14
compare::@14: scope:[compare]  from compare::@5
  [57] phi()
  to:compare::@20
compare::@20: scope:[compare]  from compare::@14 compare::@5
  [58] (byte) compare::r#13 ← phi( compare::@14/(const byte) TT#0 compare::@5/(const byte) FF#0 )
  to:compare::@6
compare::@4: scope:[compare]  from compare::@9
  [59] if((word) compare::w1#0<(word) compare::w2#0) goto compare::@21
  to:compare::@15
compare::@15: scope:[compare]  from compare::@4
  [60] phi()
  to:compare::@21
compare::@21: scope:[compare]  from compare::@15 compare::@4
  [61] (byte) compare::r#14 ← phi( compare::@15/(const byte) TT#0 compare::@4/(const byte) FF#0 )
  to:compare::@6
compare::@3: scope:[compare]  from compare::@8
  [62] if((word) compare::w1#0<=(word) compare::w2#0) goto compare::@22
  to:compare::@16
compare::@16: scope:[compare]  from compare::@3
  [63] phi()
  to:compare::@22
compare::@22: scope:[compare]  from compare::@16 compare::@3
  [64] (byte) compare::r#15 ← phi( compare::@16/(const byte) TT#0 compare::@3/(const byte) FF#0 )
  to:compare::@6
compare::@2: scope:[compare]  from compare::@7
  [65] if((word) compare::w1#0>(word) compare::w2#0) goto compare::@23
  to:compare::@17
compare::@17: scope:[compare]  from compare::@2
  [66] phi()
  to:compare::@23
compare::@23: scope:[compare]  from compare::@17 compare::@2
  [67] (byte) compare::r#16 ← phi( compare::@2/(const byte) FF#0 compare::@17/(const byte) TT#0 )
  to:compare::@6
compare::@1: scope:[compare]  from compare
  [68] if((word) compare::w1#0>=(word) compare::w2#0) goto compare::@24
  to:compare::@18
compare::@18: scope:[compare]  from compare::@1
  [69] phi()
  to:compare::@24
compare::@24: scope:[compare]  from compare::@1 compare::@18
  [70] (byte) compare::r#17 ← phi( compare::@1/(const byte) FF#0 compare::@18/(const byte) TT#0 )
  to:compare::@6
print_char: scope:[print_char]  from compare::@27 compare::@28 print_byte print_byte::@1
  [71] (byte*) print_char_cursor#36 ← phi( compare::@27/(byte*) print_char_cursor#11 compare::@28/(byte*) print_char_cursor#11 print_byte/(byte*) print_char_cursor#53 print_byte::@1/(byte*) print_char_cursor#11 )
  [71] (byte) print_char::ch#4 ← phi( compare::@27/(byte) print_char::ch#2 compare::@28/(byte) ' ' print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 )
  [72] *((byte*) print_char_cursor#36) ← (byte) print_char::ch#4
  [73] (byte*) print_char_cursor#11 ← ++ (byte*) print_char_cursor#36
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [74] return 
  to:@return
print_word: scope:[print_word]  from compare::@26 compare::@6
  [75] (byte*) print_char_cursor#52 ← phi( compare::@6/(byte*) print_char_cursor#55 compare::@26/(byte*) print_char_cursor#2 )
  [75] (word) print_word::w#2 ← phi( compare::@6/(word) print_word::w#0 compare::@26/(word) print_word::w#1 )
  [76] (byte) print_byte::b#0 ← > (word) print_word::w#2
  [77] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [78] (byte) print_byte::b#1 ← < (word) print_word::w#2
  [79] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [80] return 
  to:@return
print_byte: scope:[print_byte]  from print_word print_word::@1
  [81] (byte*) print_char_cursor#53 ← phi( print_word/(byte*) print_char_cursor#52 print_word::@1/(byte*) print_char_cursor#11 )
  [81] (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  [82] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4
  [83] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [84] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [85] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f
  [86] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [87] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [88] return 
  to:@return
print_str: scope:[print_str]  from compare::@25
  [89] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [90] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#11 print_str::@2/(byte*) print_char_cursor#1 )
  [90] (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#1 print_str::@2/(byte*) print_str::str#0 )
  [91] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [92] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [93] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2)
  [94] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2
  [95] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1
print_cls: scope:[print_cls]  from main
  [96] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [97] (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) 1024 print_cls::@1/(byte*) print_cls::sc#1 )
  [98] *((byte*) print_cls::sc#2) ← (byte) ' '
  [99] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [100] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [101] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) FF
(byte) TT
(void()) compare((word) compare::w1 , (word) compare::w2 , (byte) compare::op)
(byte) compare::op
(byte) compare::op#0 168.8333333333334
(byte*) compare::ops
(byte*) compare::ops#7 0.6666666666666666
(byte) compare::r
(byte) compare::r#10 1.9999999999999996
(byte) compare::r#12 2.0
(byte) compare::r#13 2.0
(byte) compare::r#14 2.0
(byte) compare::r#15 2.0
(byte) compare::r#16 2.0
(byte) compare::r#17 2.0
(word) compare::w1
(word) compare::w1#0 36.249999999999986
(word) compare::w2
(word) compare::w2#0 32.741935483870954
(void()) main()
(byte~) main::$8 22.0
(byte~) main::$9 202.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 1.5714285714285716
(byte) main::j
(byte) main::j#1 151.5
(byte) main::j#2 18.9375
(byte) main::op
(byte) main::op#1 1501.5
(byte) main::op#2 273.0
(byte) main::s
(byte) main::s#1 1501.5
(byte) main::s#10 302.0
(byte) main::s#3 420.59999999999997
(byte) main::s#5 71.0
(byte) main::s#7 7.333333333333333
(word) main::w1
(word) main::w1#0 53.26315789473684
(word) main::w2
(word) main::w2#0 78.71428571428571
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 2.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 4.0
(byte) print_char::ch#1 4.0
(byte) print_char::ch#2 4.0
(byte) print_char::ch#4 8.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 10001.0
(byte*~) print_char_cursor#109 2002.0
(byte*) print_char_cursor#11 393.3571428571428
(byte*) print_char_cursor#2 5001.166666666666
(byte*) print_char_cursor#36 6.0
(byte*) print_char_cursor#52 3.0
(byte*) print_char_cursor#53 2.0
(byte*) print_char_cursor#55 36.800000000000004
(byte*) print_char_cursor#61 71.0
(byte*) print_char_cursor#62 445.0
(byte*) print_char_cursor#72 7.333333333333333
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#1 6401.0
(byte*) print_line_cursor#19 233.8888888888889
(byte*) print_line_cursor#23 445.0
(byte*) print_line_cursor#29 71.0
(byte*) print_line_cursor#31 7.333333333333333
(byte*) print_line_cursor#9 20004.0
(void()) print_ln()
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 20002.0
(byte*) print_str::str#1 2.0
(byte*) print_str::str#2 10001.5
(void()) print_word((word) print_word::w)
(word) print_word::w
(word) print_word::w#0 4.0
(word) print_word::w#1 4.0
(word) print_word::w#2 2.6666666666666665
(word[]) words

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ main::op#2 main::op#1 ]
[ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
[ print_line_cursor#9 print_line_cursor#19 print_line_cursor#29 print_line_cursor#31 print_line_cursor#23 print_line_cursor#1 ]
[ compare::ops#7 ]
[ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
[ print_char::ch#4 print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ print_word::w#2 print_word::w#0 print_word::w#1 ]
[ print_char_cursor#52 print_char_cursor#36 print_char_cursor#55 print_char_cursor#61 print_char_cursor#72 print_char_cursor#62 print_char_cursor#11 print_char_cursor#109 print_char_cursor#53 print_char_cursor#2 print_char_cursor#1 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_str::str#2 print_str::str#1 print_str::str#0 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable main::$8 to zero page equivalence class [ main::$8 ]
Added variable main::w1#0 to zero page equivalence class [ main::w1#0 ]
Added variable main::$9 to zero page equivalence class [ main::$9 ]
Added variable main::w2#0 to zero page equivalence class [ main::w2#0 ]
Added variable compare::w1#0 to zero page equivalence class [ compare::w1#0 ]
Added variable compare::w2#0 to zero page equivalence class [ compare::w2#0 ]
Added variable compare::op#0 to zero page equivalence class [ compare::op#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ main::op#2 main::op#1 ]
[ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
[ print_line_cursor#9 print_line_cursor#19 print_line_cursor#29 print_line_cursor#31 print_line_cursor#23 print_line_cursor#1 ]
[ compare::ops#7 ]
[ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
[ print_char::ch#4 print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ print_word::w#2 print_word::w#0 print_word::w#1 ]
[ print_char_cursor#52 print_char_cursor#36 print_char_cursor#55 print_char_cursor#61 print_char_cursor#72 print_char_cursor#62 print_char_cursor#11 print_char_cursor#109 print_char_cursor#53 print_char_cursor#2 print_char_cursor#1 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_str::str#2 print_str::str#1 print_str::str#0 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ main::$8 ]
[ main::w1#0 ]
[ main::$9 ]
[ main::w2#0 ]
[ compare::w1#0 ]
[ compare::w2#0 ]
[ compare::op#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Allocated zp ZP_BYTE:4 [ main::op#2 main::op#1 ]
Allocated zp ZP_BYTE:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Allocated zp ZP_WORD:6 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#29 print_line_cursor#31 print_line_cursor#23 print_line_cursor#1 ]
Allocated zp ZP_WORD:8 [ compare::ops#7 ]
Allocated zp ZP_BYTE:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
Allocated zp ZP_BYTE:11 [ print_char::ch#4 print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
Allocated zp ZP_WORD:12 [ print_word::w#2 print_word::w#0 print_word::w#1 ]
Allocated zp ZP_WORD:14 [ print_char_cursor#52 print_char_cursor#36 print_char_cursor#55 print_char_cursor#61 print_char_cursor#72 print_char_cursor#62 print_char_cursor#11 print_char_cursor#109 print_char_cursor#53 print_char_cursor#2 print_char_cursor#1 ]
Allocated zp ZP_BYTE:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated zp ZP_WORD:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ]
Allocated zp ZP_WORD:19 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_BYTE:21 [ main::$8 ]
Allocated zp ZP_WORD:22 [ main::w1#0 ]
Allocated zp ZP_BYTE:24 [ main::$9 ]
Allocated zp ZP_WORD:25 [ main::w2#0 ]
Allocated zp ZP_WORD:27 [ compare::w1#0 ]
Allocated zp ZP_WORD:29 [ compare::w2#0 ]
Allocated zp ZP_BYTE:31 [ compare::op#0 ]
Allocated zp ZP_BYTE:32 [ print_byte::$0 ]
Allocated zp ZP_BYTE:33 [ print_byte::$2 ]

INITIAL ASM
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // empty circle
  .const FF = $57
  // filled circle
  .const TT = $51
  .label print_char_cursor = $e
  .label print_line_cursor = 6
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label _8 = $15
    .label _9 = $18
    .label w1 = $16
    .label w2 = $19
    .label s = 5
    .label op = 4
    .label j = 3
    .label i = 2
  //SEG11 [5] call print_cls 
  //SEG12 [96] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG14 [6] phi (byte*) print_line_cursor#31 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG15 [6] phi (byte) main::s#7 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta s
  //SEG16 [6] phi (byte*) print_char_cursor#72 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG17 [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG18 [6] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  b1_from_b7:
  //SEG19 [6] phi (byte*) print_line_cursor#31 = (byte*) print_line_cursor#23 [phi:main::@7->main::@1#0] -- register_copy 
  //SEG20 [6] phi (byte) main::s#7 = (byte) main::s#10 [phi:main::@7->main::@1#1] -- register_copy 
  //SEG21 [6] phi (byte*) print_char_cursor#72 = (byte*) print_char_cursor#62 [phi:main::@7->main::@1#2] -- register_copy 
  //SEG22 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#3] -- register_copy 
    jmp b1
  //SEG23 main::@1
  b1:
  //SEG24 [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _8
  //SEG25 [8] (word) main::w1#0 ← *((const word[]) words#0 + (byte~) main::$8) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy _8
    lda words,y
    sta w1
    lda words+1,y
    sta w1+1
  //SEG26 [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG27 [9] phi (byte*) print_line_cursor#29 = (byte*) print_line_cursor#31 [phi:main::@1->main::@2#0] -- register_copy 
  //SEG28 [9] phi (byte) main::s#5 = (byte) main::s#7 [phi:main::@1->main::@2#1] -- register_copy 
  //SEG29 [9] phi (byte*) print_char_cursor#61 = (byte*) print_char_cursor#72 [phi:main::@1->main::@2#2] -- register_copy 
  //SEG30 [9] phi (byte) main::j#2 = (byte) 0 [phi:main::@1->main::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta j
    jmp b2
  //SEG31 [9] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  b2_from_b6:
  //SEG32 [9] phi (byte*) print_line_cursor#29 = (byte*) print_line_cursor#23 [phi:main::@6->main::@2#0] -- register_copy 
  //SEG33 [9] phi (byte) main::s#5 = (byte) main::s#10 [phi:main::@6->main::@2#1] -- register_copy 
  //SEG34 [9] phi (byte*) print_char_cursor#61 = (byte*) print_char_cursor#62 [phi:main::@6->main::@2#2] -- register_copy 
  //SEG35 [9] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@6->main::@2#3] -- register_copy 
    jmp b2
  //SEG36 main::@2
  b2:
  //SEG37 [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda j
    asl
    sta _9
  //SEG38 [11] (word) main::w2#0 ← *((const word[]) words#0 + (byte~) main::$9) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy _9
    lda words,y
    sta w2
    lda words+1,y
    sta w2+1
  //SEG39 [12] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
  //SEG40 [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#29 [phi:main::@2->main::@3#0] -- register_copy 
  //SEG41 [12] phi (byte) main::s#3 = (byte) main::s#5 [phi:main::@2->main::@3#1] -- register_copy 
  //SEG42 [12] phi (byte*) print_char_cursor#55 = (byte*) print_char_cursor#61 [phi:main::@2->main::@3#2] -- register_copy 
  //SEG43 [12] phi (byte) main::op#2 = (byte) 0 [phi:main::@2->main::@3#3] -- vbuz1=vbuc1 
    lda #0
    sta op
    jmp b3
  //SEG44 [12] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  b3_from_b4:
  //SEG45 [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#23 [phi:main::@4->main::@3#0] -- register_copy 
  //SEG46 [12] phi (byte) main::s#3 = (byte) main::s#10 [phi:main::@4->main::@3#1] -- register_copy 
  //SEG47 [12] phi (byte*) print_char_cursor#55 = (byte*) print_char_cursor#62 [phi:main::@4->main::@3#2] -- register_copy 
  //SEG48 [12] phi (byte) main::op#2 = (byte) main::op#1 [phi:main::@4->main::@3#3] -- register_copy 
    jmp b3
  //SEG49 main::@3
  b3:
  //SEG50 [13] (word) compare::w1#0 ← (word) main::w1#0 -- vwuz1=vwuz2 
    lda w1
    sta compare.w1
    lda w1+1
    sta compare.w1+1
  //SEG51 [14] (word) compare::w2#0 ← (word) main::w2#0 -- vwuz1=vwuz2 
    lda w2
    sta compare.w2
    lda w2+1
    sta compare.w2+1
  //SEG52 [15] (byte) compare::op#0 ← (byte) main::op#2 -- vbuz1=vbuz2 
    lda op
    sta compare.op
  //SEG53 [16] call compare 
    jsr compare
    jmp b9
  //SEG54 main::@9
  b9:
  //SEG55 [17] (byte) main::s#1 ← ++ (byte) main::s#3 -- vbuz1=_inc_vbuz1 
    inc s
  //SEG56 [18] if((byte) main::s#1!=(byte) 3) goto main::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp s
    bne b4_from_b9
  //SEG57 [19] phi from main::@9 to main::@5 [phi:main::@9->main::@5]
  b5_from_b9:
    jmp b5
  //SEG58 main::@5
  b5:
  //SEG59 [20] call print_ln 
  //SEG60 [30] phi from main::@5 to print_ln [phi:main::@5->print_ln]
  print_ln_from_b5:
    jsr print_ln
    jmp b10
  //SEG61 main::@10
  b10:
  //SEG62 [21] (byte*~) print_char_cursor#109 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG63 [22] phi from main::@10 to main::@4 [phi:main::@10->main::@4]
  b4_from_b10:
  //SEG64 [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:main::@10->main::@4#0] -- register_copy 
  //SEG65 [22] phi (byte) main::s#10 = (byte) 0 [phi:main::@10->main::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta s
  //SEG66 [22] phi (byte*) print_char_cursor#62 = (byte*~) print_char_cursor#109 [phi:main::@10->main::@4#2] -- register_copy 
    jmp b4
  //SEG67 [22] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
  b4_from_b9:
  //SEG68 [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#19 [phi:main::@9->main::@4#0] -- register_copy 
  //SEG69 [22] phi (byte) main::s#10 = (byte) main::s#1 [phi:main::@9->main::@4#1] -- register_copy 
  //SEG70 [22] phi (byte*) print_char_cursor#62 = (byte*) print_char_cursor#11 [phi:main::@9->main::@4#2] -- register_copy 
    jmp b4
  //SEG71 main::@4
  b4:
  //SEG72 [23] (byte) main::op#1 ← ++ (byte) main::op#2 -- vbuz1=_inc_vbuz1 
    inc op
  //SEG73 [24] if((byte) main::op#1!=(byte) 6) goto main::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp op
    bne b3_from_b4
    jmp b6
  //SEG74 main::@6
  b6:
  //SEG75 [25] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG76 [26] if((byte) main::j#1!=(byte) 3) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp j
    bne b2_from_b6
    jmp b7
  //SEG77 main::@7
  b7:
  //SEG78 [27] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG79 [28] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp i
    bne b1_from_b7
  //SEG80 [29] phi from main::@7 main::@8 to main::@8 [phi:main::@7/main::@8->main::@8]
  b8_from_b7:
  b8_from_b8:
    jmp b8
  // loop forever
  //SEG81 main::@8
  b8:
    jmp b8_from_b8
}
//SEG82 print_ln
// Print a newline
print_ln: {
  //SEG83 [31] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG84 [31] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG85 print_ln::@1
  b1:
  //SEG86 [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG87 [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#11) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG88 print_ln::@return
  breturn:
  //SEG89 [34] return 
    rts
}
//SEG90 compare
// Compare two words using an operator
// compare(word zeropage($1b) w1, word zeropage($1d) w2, byte zeropage($1f) op)
compare: {
    .label w1 = $1b
    .label w2 = $1d
    .label op = $1f
    .label ops = 8
    .label r = $a
  //SEG91 [35] if((byte) compare::op#0==(byte) 0) goto compare::@1 -- vbuz1_eq_0_then_la1 
    lda op
    cmp #0
    beq b1
    jmp b7
  //SEG92 compare::@7
  b7:
  //SEG93 [36] if((byte) compare::op#0==(byte) 1) goto compare::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp op
    beq b2
    jmp b8
  //SEG94 compare::@8
  b8:
  //SEG95 [37] if((byte) compare::op#0==(byte) 2) goto compare::@3 -- vbuz1_eq_vbuc1_then_la1 
    lda #2
    cmp op
    beq b3
    jmp b9
  //SEG96 compare::@9
  b9:
  //SEG97 [38] if((byte) compare::op#0==(byte) 3) goto compare::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #3
    cmp op
    beq b4
    jmp b10
  //SEG98 compare::@10
  b10:
  //SEG99 [39] if((byte) compare::op#0==(byte) 4) goto compare::@5 -- vbuz1_eq_vbuc1_then_la1 
    lda #4
    cmp op
    beq b5
    jmp b11
  //SEG100 compare::@11
  b11:
  //SEG101 [40] if((byte) compare::op#0!=(byte) 5) goto compare::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp op
    bne b6_from_b11
    jmp b12
  //SEG102 compare::@12
  b12:
  //SEG103 [41] if((word) compare::w1#0==(word) compare::w2#0) goto compare::@19 -- vwuz1_eq_vwuz2_then_la1 
    lda w1
    cmp w2
    bne !+
    lda w1+1
    cmp w2+1
    beq b19_from_b12
  !:
  //SEG104 [42] phi from compare::@12 to compare::@13 [phi:compare::@12->compare::@13]
  b13_from_b12:
    jmp b13
  //SEG105 compare::@13
  b13:
  //SEG106 [43] phi from compare::@13 to compare::@19 [phi:compare::@13->compare::@19]
  b19_from_b13:
  //SEG107 [43] phi (byte) compare::r#12 = (const byte) TT#0 [phi:compare::@13->compare::@19#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b19
  //SEG108 [43] phi from compare::@12 to compare::@19 [phi:compare::@12->compare::@19]
  b19_from_b12:
  //SEG109 [43] phi (byte) compare::r#12 = (const byte) FF#0 [phi:compare::@12->compare::@19#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b19
  //SEG110 compare::@19
  b19:
  //SEG111 [44] phi from compare::@19 to compare::@6 [phi:compare::@19->compare::@6]
  b6_from_b19:
  //SEG112 [44] phi (byte) compare::r#10 = (byte) compare::r#12 [phi:compare::@19->compare::@6#0] -- register_copy 
  //SEG113 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#1 [phi:compare::@19->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_1
    sta ops
    lda #>ops_1
    sta ops+1
    jmp b6
  //SEG114 [44] phi from compare::@11 to compare::@6 [phi:compare::@11->compare::@6]
  b6_from_b11:
  //SEG115 [44] phi (byte) compare::r#10 = (const byte) FF#0 [phi:compare::@11->compare::@6#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG116 [44] phi (byte*) compare::ops#7 = (byte*) 0 [phi:compare::@11->compare::@6#1] -- pbuz1=pbuc1 
    lda #<0
    sta ops
    lda #>0
    sta ops+1
    jmp b6
  //SEG117 compare::@6
  b6:
  //SEG118 [45] (word) print_word::w#0 ← (word) compare::w1#0 -- vwuz1=vwuz2 
    lda w1
    sta print_word.w
    lda w1+1
    sta print_word.w+1
  //SEG119 [46] call print_word 
  //SEG120 [75] phi from compare::@6 to print_word [phi:compare::@6->print_word]
  print_word_from_b6:
  //SEG121 [75] phi (byte*) print_char_cursor#52 = (byte*) print_char_cursor#55 [phi:compare::@6->print_word#0] -- register_copy 
  //SEG122 [75] phi (word) print_word::w#2 = (word) print_word::w#0 [phi:compare::@6->print_word#1] -- register_copy 
    jsr print_word
    jmp b25
  //SEG123 compare::@25
  b25:
  //SEG124 [47] (byte*) print_str::str#1 ← (byte*) compare::ops#7 -- pbuz1=pbuz2 
    lda ops
    sta print_str.str
    lda ops+1
    sta print_str.str+1
  //SEG125 [48] call print_str 
  //SEG126 [89] phi from compare::@25 to print_str [phi:compare::@25->print_str]
  print_str_from_b25:
    jsr print_str
    jmp b26
  //SEG127 compare::@26
  b26:
  //SEG128 [49] (word) print_word::w#1 ← (word) compare::w2#0 -- vwuz1=vwuz2 
    lda w2
    sta print_word.w
    lda w2+1
    sta print_word.w+1
  //SEG129 [50] call print_word 
  //SEG130 [75] phi from compare::@26 to print_word [phi:compare::@26->print_word]
  print_word_from_b26:
  //SEG131 [75] phi (byte*) print_char_cursor#52 = (byte*) print_char_cursor#2 [phi:compare::@26->print_word#0] -- register_copy 
  //SEG132 [75] phi (word) print_word::w#2 = (word) print_word::w#1 [phi:compare::@26->print_word#1] -- register_copy 
    jsr print_word
    jmp b27
  //SEG133 compare::@27
  b27:
  //SEG134 [51] (byte) print_char::ch#2 ← (byte) compare::r#10 -- vbuz1=vbuz2 
    lda r
    sta print_char.ch
  //SEG135 [52] call print_char 
  //SEG136 [71] phi from compare::@27 to print_char [phi:compare::@27->print_char]
  print_char_from_b27:
  //SEG137 [71] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#11 [phi:compare::@27->print_char#0] -- register_copy 
  //SEG138 [71] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:compare::@27->print_char#1] -- register_copy 
    jsr print_char
  //SEG139 [53] phi from compare::@27 to compare::@28 [phi:compare::@27->compare::@28]
  b28_from_b27:
    jmp b28
  //SEG140 compare::@28
  b28:
  //SEG141 [54] call print_char 
  //SEG142 [71] phi from compare::@28 to print_char [phi:compare::@28->print_char]
  print_char_from_b28:
  //SEG143 [71] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#11 [phi:compare::@28->print_char#0] -- register_copy 
  //SEG144 [71] phi (byte) print_char::ch#4 = (byte) ' ' [phi:compare::@28->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta print_char.ch
    jsr print_char
    jmp breturn
  //SEG145 compare::@return
  breturn:
  //SEG146 [55] return 
    rts
  //SEG147 compare::@5
  b5:
  //SEG148 [56] if((word) compare::w1#0!=(word) compare::w2#0) goto compare::@20 -- vwuz1_neq_vwuz2_then_la1 
    lda w1+1
    cmp w2+1
    bne b20_from_b5
    lda w1
    cmp w2
    bne b20_from_b5
  //SEG149 [57] phi from compare::@5 to compare::@14 [phi:compare::@5->compare::@14]
  b14_from_b5:
    jmp b14
  //SEG150 compare::@14
  b14:
  //SEG151 [58] phi from compare::@14 to compare::@20 [phi:compare::@14->compare::@20]
  b20_from_b14:
  //SEG152 [58] phi (byte) compare::r#13 = (const byte) TT#0 [phi:compare::@14->compare::@20#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b20
  //SEG153 [58] phi from compare::@5 to compare::@20 [phi:compare::@5->compare::@20]
  b20_from_b5:
  //SEG154 [58] phi (byte) compare::r#13 = (const byte) FF#0 [phi:compare::@5->compare::@20#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b20
  //SEG155 compare::@20
  b20:
  //SEG156 [44] phi from compare::@20 to compare::@6 [phi:compare::@20->compare::@6]
  b6_from_b20:
  //SEG157 [44] phi (byte) compare::r#10 = (byte) compare::r#13 [phi:compare::@20->compare::@6#0] -- register_copy 
  //SEG158 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#2 [phi:compare::@20->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_2
    sta ops
    lda #>ops_2
    sta ops+1
    jmp b6
  //SEG159 compare::@4
  b4:
  //SEG160 [59] if((word) compare::w1#0<(word) compare::w2#0) goto compare::@21 -- vwuz1_lt_vwuz2_then_la1 
    lda w1+1
    cmp w2+1
    bcc b21_from_b4
    bne !+
    lda w1
    cmp w2
    bcc b21_from_b4
  !:
  //SEG161 [60] phi from compare::@4 to compare::@15 [phi:compare::@4->compare::@15]
  b15_from_b4:
    jmp b15
  //SEG162 compare::@15
  b15:
  //SEG163 [61] phi from compare::@15 to compare::@21 [phi:compare::@15->compare::@21]
  b21_from_b15:
  //SEG164 [61] phi (byte) compare::r#14 = (const byte) TT#0 [phi:compare::@15->compare::@21#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b21
  //SEG165 [61] phi from compare::@4 to compare::@21 [phi:compare::@4->compare::@21]
  b21_from_b4:
  //SEG166 [61] phi (byte) compare::r#14 = (const byte) FF#0 [phi:compare::@4->compare::@21#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b21
  //SEG167 compare::@21
  b21:
  //SEG168 [44] phi from compare::@21 to compare::@6 [phi:compare::@21->compare::@6]
  b6_from_b21:
  //SEG169 [44] phi (byte) compare::r#10 = (byte) compare::r#14 [phi:compare::@21->compare::@6#0] -- register_copy 
  //SEG170 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#3 [phi:compare::@21->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_3
    sta ops
    lda #>ops_3
    sta ops+1
    jmp b6
  //SEG171 compare::@3
  b3:
  //SEG172 [62] if((word) compare::w1#0<=(word) compare::w2#0) goto compare::@22 -- vwuz1_le_vwuz2_then_la1 
    lda w1+1
    cmp w2+1
    bne !+
    lda w1
    cmp w2
    beq b22_from_b3
  !:
    bcc b22_from_b3
  //SEG173 [63] phi from compare::@3 to compare::@16 [phi:compare::@3->compare::@16]
  b16_from_b3:
    jmp b16
  //SEG174 compare::@16
  b16:
  //SEG175 [64] phi from compare::@16 to compare::@22 [phi:compare::@16->compare::@22]
  b22_from_b16:
  //SEG176 [64] phi (byte) compare::r#15 = (const byte) TT#0 [phi:compare::@16->compare::@22#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b22
  //SEG177 [64] phi from compare::@3 to compare::@22 [phi:compare::@3->compare::@22]
  b22_from_b3:
  //SEG178 [64] phi (byte) compare::r#15 = (const byte) FF#0 [phi:compare::@3->compare::@22#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b22
  //SEG179 compare::@22
  b22:
  //SEG180 [44] phi from compare::@22 to compare::@6 [phi:compare::@22->compare::@6]
  b6_from_b22:
  //SEG181 [44] phi (byte) compare::r#10 = (byte) compare::r#15 [phi:compare::@22->compare::@6#0] -- register_copy 
  //SEG182 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#4 [phi:compare::@22->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_4
    sta ops
    lda #>ops_4
    sta ops+1
    jmp b6
  //SEG183 compare::@2
  b2:
  //SEG184 [65] if((word) compare::w1#0>(word) compare::w2#0) goto compare::@23 -- vwuz1_gt_vwuz2_then_la1 
    lda w2+1
    cmp w1+1
    bcc b23_from_b2
    bne !+
    lda w2
    cmp w1
    bcc b23_from_b2
  !:
  //SEG185 [66] phi from compare::@2 to compare::@17 [phi:compare::@2->compare::@17]
  b17_from_b2:
    jmp b17
  //SEG186 compare::@17
  b17:
  //SEG187 [67] phi from compare::@17 to compare::@23 [phi:compare::@17->compare::@23]
  b23_from_b17:
  //SEG188 [67] phi (byte) compare::r#16 = (const byte) TT#0 [phi:compare::@17->compare::@23#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b23
  //SEG189 [67] phi from compare::@2 to compare::@23 [phi:compare::@2->compare::@23]
  b23_from_b2:
  //SEG190 [67] phi (byte) compare::r#16 = (const byte) FF#0 [phi:compare::@2->compare::@23#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b23
  //SEG191 compare::@23
  b23:
  //SEG192 [44] phi from compare::@23 to compare::@6 [phi:compare::@23->compare::@6]
  b6_from_b23:
  //SEG193 [44] phi (byte) compare::r#10 = (byte) compare::r#16 [phi:compare::@23->compare::@6#0] -- register_copy 
  //SEG194 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#5 [phi:compare::@23->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_5
    sta ops
    lda #>ops_5
    sta ops+1
    jmp b6
  //SEG195 compare::@1
  b1:
  //SEG196 [68] if((word) compare::w1#0>=(word) compare::w2#0) goto compare::@24 -- vwuz1_ge_vwuz2_then_la1 
    lda w2+1
    cmp w1+1
    bne !+
    lda w2
    cmp w1
    beq b24_from_b1
  !:
    bcc b24_from_b1
  //SEG197 [69] phi from compare::@1 to compare::@18 [phi:compare::@1->compare::@18]
  b18_from_b1:
    jmp b18
  //SEG198 compare::@18
  b18:
  //SEG199 [70] phi from compare::@18 to compare::@24 [phi:compare::@18->compare::@24]
  b24_from_b18:
  //SEG200 [70] phi (byte) compare::r#17 = (const byte) TT#0 [phi:compare::@18->compare::@24#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b24
  //SEG201 [70] phi from compare::@1 to compare::@24 [phi:compare::@1->compare::@24]
  b24_from_b1:
  //SEG202 [70] phi (byte) compare::r#17 = (const byte) FF#0 [phi:compare::@1->compare::@24#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b24
  //SEG203 compare::@24
  b24:
  //SEG204 [44] phi from compare::@24 to compare::@6 [phi:compare::@24->compare::@6]
  b6_from_b24:
  //SEG205 [44] phi (byte) compare::r#10 = (byte) compare::r#17 [phi:compare::@24->compare::@6#0] -- register_copy 
  //SEG206 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#6 [phi:compare::@24->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_6
    sta ops
    lda #>ops_6
    sta ops+1
    jmp b6
    ops_1: .text "!=@"
    ops_2: .text "==@"
    ops_3: .text ">=@"
    ops_4: .text "> @"
    ops_5: .text "<=@"
    ops_6: .text "< @"
}
//SEG207 print_char
// Print a single char
// print_char(byte zeropage($b) ch)
print_char: {
    .label ch = $b
  //SEG208 [72] *((byte*) print_char_cursor#36) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (print_char_cursor),y
  //SEG209 [73] (byte*) print_char_cursor#11 ← ++ (byte*) print_char_cursor#36 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG210 print_char::@return
  breturn:
  //SEG211 [74] return 
    rts
}
//SEG212 print_word
// Print a word as HEX
// print_word(word zeropage($c) w)
print_word: {
    .label w = $c
  //SEG213 [76] (byte) print_byte::b#0 ← > (word) print_word::w#2 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG214 [77] call print_byte 
  //SEG215 [81] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG216 [81] phi (byte*) print_char_cursor#53 = (byte*) print_char_cursor#52 [phi:print_word->print_byte#0] -- register_copy 
  //SEG217 [81] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG218 print_word::@1
  b1:
  //SEG219 [78] (byte) print_byte::b#1 ← < (word) print_word::w#2 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG220 [79] call print_byte 
  //SEG221 [81] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG222 [81] phi (byte*) print_char_cursor#53 = (byte*) print_char_cursor#11 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG223 [81] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG224 print_word::@return
  breturn:
  //SEG225 [80] return 
    rts
}
//SEG226 print_byte
// Print a byte as HEX
// print_byte(byte zeropage($10) b)
print_byte: {
    .label _0 = $20
    .label _2 = $21
    .label b = $10
  //SEG227 [82] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG228 [83] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda print_hextab,y
    sta print_char.ch
  //SEG229 [84] call print_char 
  //SEG230 [71] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG231 [71] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#53 [phi:print_byte->print_char#0] -- register_copy 
  //SEG232 [71] phi (byte) print_char::ch#4 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG233 print_byte::@1
  b1:
  //SEG234 [85] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
  //SEG235 [86] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda print_hextab,y
    sta print_char.ch
  //SEG236 [87] call print_char 
  //SEG237 [71] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG238 [71] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#11 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG239 [71] phi (byte) print_char::ch#4 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG240 print_byte::@return
  breturn:
  //SEG241 [88] return 
    rts
}
//SEG242 print_str
// Print a zero-terminated string
// print_str(byte* zeropage($11) str)
print_str: {
    .label str = $11
  //SEG243 [90] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG244 [90] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#11 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG245 [90] phi (byte*) print_str::str#2 = (byte*) print_str::str#1 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG246 print_str::@1
  b1:
  //SEG247 [91] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG248 print_str::@return
  breturn:
  //SEG249 [92] return 
    rts
  //SEG250 print_str::@2
  b2:
  //SEG251 [93] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG252 [94] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG253 [95] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG254 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $13
  //SEG255 [97] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG256 [97] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG257 [97] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG258 [97] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG259 print_cls::@1
  b1:
  //SEG260 [98] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG261 [99] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG262 [100] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG263 print_cls::@return
  breturn:
  //SEG264 [101] return 
    rts
}
  print_hextab: .text "0123456789abcdef"
  words: .word $12, $3f34, $cfed

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 [ main::i#2 print_char_cursor#72 main::s#7 print_line_cursor#31 main::$8 ] ( main:2 [ main::i#2 print_char_cursor#72 main::s#7 print_line_cursor#31 main::$8 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Statement [8] (word) main::w1#0 ← *((const word[]) words#0 + (byte~) main::$8) [ main::i#2 print_char_cursor#72 main::s#7 print_line_cursor#31 main::w1#0 ] ( main:2 [ main::i#2 print_char_cursor#72 main::s#7 print_line_cursor#31 main::w1#0 ] ) always clobbers reg byte a 
Statement [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#61 main::s#5 print_line_cursor#29 main::$9 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#61 main::s#5 print_line_cursor#29 main::$9 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Statement [11] (word) main::w2#0 ← *((const word[]) words#0 + (byte~) main::$9) [ main::i#2 main::w1#0 main::j#2 print_char_cursor#61 main::s#5 print_line_cursor#29 main::w2#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#61 main::s#5 print_line_cursor#29 main::w2#0 ] ) always clobbers reg byte a 
Statement [13] (word) compare::w1#0 ← (word) main::w1#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#55 main::s#3 print_line_cursor#19 compare::w1#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#55 main::s#3 print_line_cursor#19 compare::w1#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ main::op#2 main::op#1 ]
Statement [14] (word) compare::w2#0 ← (word) main::w2#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#55 main::s#3 print_line_cursor#19 compare::w1#0 compare::w2#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#55 main::s#3 print_line_cursor#19 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [21] (byte*~) print_char_cursor#109 ← (byte*) print_line_cursor#1 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#109 print_line_cursor#1 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#109 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#1 print_char_cursor#11 ] ( main:2::print_ln:20 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_line_cursor#1 print_char_cursor#11 ] ) always clobbers reg byte a 
Statement [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#11) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#11 ] ( main:2::print_ln:20 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_line_cursor#1 print_char_cursor#11 ] ) always clobbers reg byte a 
Statement [41] if((word) compare::w1#0==(word) compare::w2#0) goto compare::@19 [ print_char_cursor#55 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#55 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [45] (word) print_word::w#0 ← (word) compare::w1#0 [ print_char_cursor#55 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#55 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
Statement [47] (byte*) print_str::str#1 ← (byte*) compare::ops#7 [ compare::w2#0 print_char_cursor#11 compare::r#10 print_str::str#1 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 print_char_cursor#11 compare::r#10 print_str::str#1 ] ) always clobbers reg byte a 
Statement [49] (word) print_word::w#1 ← (word) compare::w2#0 [ compare::r#10 print_word::w#1 print_char_cursor#2 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#1 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [56] if((word) compare::w1#0!=(word) compare::w2#0) goto compare::@20 [ print_char_cursor#55 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#55 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [59] if((word) compare::w1#0<(word) compare::w2#0) goto compare::@21 [ print_char_cursor#55 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#55 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [62] if((word) compare::w1#0<=(word) compare::w2#0) goto compare::@22 [ print_char_cursor#55 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#55 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [65] if((word) compare::w1#0>(word) compare::w2#0) goto compare::@23 [ print_char_cursor#55 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#55 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [68] if((word) compare::w1#0>=(word) compare::w2#0) goto compare::@24 [ print_char_cursor#55 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#55 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [72] *((byte*) print_char_cursor#36) ← (byte) print_char::ch#4 [ print_char_cursor#36 ] ( main:2::compare:16::print_char:52 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#36 ] main:2::compare:16::print_char:54 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#36 ] main:2::compare:16::print_word:46::print_byte:77::print_char:84 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#2 print_byte::b#2 print_char_cursor#36 ] main:2::compare:16::print_word:50::print_byte:77::print_char:84 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#2 print_byte::b#2 print_char_cursor#36 ] main:2::compare:16::print_word:46::print_byte:79::print_char:84 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_byte::b#2 print_char_cursor#36 ] main:2::compare:16::print_word:50::print_byte:79::print_char:84 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_byte::b#2 print_char_cursor#36 ] main:2::compare:16::print_word:46::print_byte:77::print_char:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#2 print_char_cursor#36 ] main:2::compare:16::print_word:50::print_byte:77::print_char:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#2 print_char_cursor#36 ] main:2::compare:16::print_word:46::print_byte:79::print_char:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#36 ] main:2::compare:16::print_word:50::print_byte:79::print_char:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#36 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:4 [ main::op#2 main::op#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [76] (byte) print_byte::b#0 ← > (word) print_word::w#2 [ print_word::w#2 print_char_cursor#52 print_byte::b#0 ] ( main:2::compare:16::print_word:46 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#2 print_char_cursor#52 print_byte::b#0 ] main:2::compare:16::print_word:50 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#2 print_char_cursor#52 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [78] (byte) print_byte::b#1 ← < (word) print_word::w#2 [ print_char_cursor#11 print_byte::b#1 ] ( main:2::compare:16::print_word:46 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#11 print_byte::b#1 ] main:2::compare:16::print_word:50 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#11 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [82] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 [ print_char_cursor#53 print_byte::b#2 print_byte::$0 ] ( main:2::compare:16::print_word:46::print_byte:77 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#2 print_char_cursor#53 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_word:50::print_byte:77 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#2 print_char_cursor#53 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_word:46::print_byte:79 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#53 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_word:50::print_byte:79 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#53 print_byte::b#2 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [85] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f [ print_char_cursor#11 print_byte::$2 ] ( main:2::compare:16::print_word:46::print_byte:77 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#2 print_char_cursor#11 print_byte::$2 ] main:2::compare:16::print_word:50::print_byte:77 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#2 print_char_cursor#11 print_byte::$2 ] main:2::compare:16::print_word:46::print_byte:79 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#11 print_byte::$2 ] main:2::compare:16::print_word:50::print_byte:79 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#11 print_byte::$2 ] ) always clobbers reg byte a 
Statement [91] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#2 print_str::str#2 ] ( main:2::compare:16::print_str:48 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::r#10 print_char_cursor#2 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [93] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) [ print_char_cursor#2 print_str::str#2 ] ( main:2::compare:16::print_str:48 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::r#10 print_char_cursor#2 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [98] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [100] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 [ main::i#2 print_char_cursor#72 main::s#7 print_line_cursor#31 main::$8 ] ( main:2 [ main::i#2 print_char_cursor#72 main::s#7 print_line_cursor#31 main::$8 ] ) always clobbers reg byte a 
Statement [8] (word) main::w1#0 ← *((const word[]) words#0 + (byte~) main::$8) [ main::i#2 print_char_cursor#72 main::s#7 print_line_cursor#31 main::w1#0 ] ( main:2 [ main::i#2 print_char_cursor#72 main::s#7 print_line_cursor#31 main::w1#0 ] ) always clobbers reg byte a 
Statement [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#61 main::s#5 print_line_cursor#29 main::$9 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#61 main::s#5 print_line_cursor#29 main::$9 ] ) always clobbers reg byte a 
Statement [11] (word) main::w2#0 ← *((const word[]) words#0 + (byte~) main::$9) [ main::i#2 main::w1#0 main::j#2 print_char_cursor#61 main::s#5 print_line_cursor#29 main::w2#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#61 main::s#5 print_line_cursor#29 main::w2#0 ] ) always clobbers reg byte a 
Statement [13] (word) compare::w1#0 ← (word) main::w1#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#55 main::s#3 print_line_cursor#19 compare::w1#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#55 main::s#3 print_line_cursor#19 compare::w1#0 ] ) always clobbers reg byte a 
Statement [14] (word) compare::w2#0 ← (word) main::w2#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#55 main::s#3 print_line_cursor#19 compare::w1#0 compare::w2#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#55 main::s#3 print_line_cursor#19 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [21] (byte*~) print_char_cursor#109 ← (byte*) print_line_cursor#1 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#109 print_line_cursor#1 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#109 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#1 print_char_cursor#11 ] ( main:2::print_ln:20 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_line_cursor#1 print_char_cursor#11 ] ) always clobbers reg byte a 
Statement [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#11) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#11 ] ( main:2::print_ln:20 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_line_cursor#1 print_char_cursor#11 ] ) always clobbers reg byte a 
Statement [41] if((word) compare::w1#0==(word) compare::w2#0) goto compare::@19 [ print_char_cursor#55 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#55 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [45] (word) print_word::w#0 ← (word) compare::w1#0 [ print_char_cursor#55 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#55 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#0 ] ) always clobbers reg byte a 
Statement [47] (byte*) print_str::str#1 ← (byte*) compare::ops#7 [ compare::w2#0 print_char_cursor#11 compare::r#10 print_str::str#1 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 print_char_cursor#11 compare::r#10 print_str::str#1 ] ) always clobbers reg byte a 
Statement [49] (word) print_word::w#1 ← (word) compare::w2#0 [ compare::r#10 print_word::w#1 print_char_cursor#2 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#1 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [56] if((word) compare::w1#0!=(word) compare::w2#0) goto compare::@20 [ print_char_cursor#55 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#55 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [59] if((word) compare::w1#0<(word) compare::w2#0) goto compare::@21 [ print_char_cursor#55 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#55 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [62] if((word) compare::w1#0<=(word) compare::w2#0) goto compare::@22 [ print_char_cursor#55 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#55 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [65] if((word) compare::w1#0>(word) compare::w2#0) goto compare::@23 [ print_char_cursor#55 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#55 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [68] if((word) compare::w1#0>=(word) compare::w2#0) goto compare::@24 [ print_char_cursor#55 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#55 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [72] *((byte*) print_char_cursor#36) ← (byte) print_char::ch#4 [ print_char_cursor#36 ] ( main:2::compare:16::print_char:52 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#36 ] main:2::compare:16::print_char:54 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#36 ] main:2::compare:16::print_word:46::print_byte:77::print_char:84 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#2 print_byte::b#2 print_char_cursor#36 ] main:2::compare:16::print_word:50::print_byte:77::print_char:84 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#2 print_byte::b#2 print_char_cursor#36 ] main:2::compare:16::print_word:46::print_byte:79::print_char:84 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_byte::b#2 print_char_cursor#36 ] main:2::compare:16::print_word:50::print_byte:79::print_char:84 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_byte::b#2 print_char_cursor#36 ] main:2::compare:16::print_word:46::print_byte:77::print_char:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#2 print_char_cursor#36 ] main:2::compare:16::print_word:50::print_byte:77::print_char:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#2 print_char_cursor#36 ] main:2::compare:16::print_word:46::print_byte:79::print_char:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#36 ] main:2::compare:16::print_word:50::print_byte:79::print_char:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#36 ] ) always clobbers reg byte y 
Statement [76] (byte) print_byte::b#0 ← > (word) print_word::w#2 [ print_word::w#2 print_char_cursor#52 print_byte::b#0 ] ( main:2::compare:16::print_word:46 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#2 print_char_cursor#52 print_byte::b#0 ] main:2::compare:16::print_word:50 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#2 print_char_cursor#52 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [78] (byte) print_byte::b#1 ← < (word) print_word::w#2 [ print_char_cursor#11 print_byte::b#1 ] ( main:2::compare:16::print_word:46 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#11 print_byte::b#1 ] main:2::compare:16::print_word:50 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#11 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [82] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 [ print_char_cursor#53 print_byte::b#2 print_byte::$0 ] ( main:2::compare:16::print_word:46::print_byte:77 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#2 print_char_cursor#53 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_word:50::print_byte:77 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#2 print_char_cursor#53 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_word:46::print_byte:79 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#53 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_word:50::print_byte:79 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#53 print_byte::b#2 print_byte::$0 ] ) always clobbers reg byte a 
Statement [85] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f [ print_char_cursor#11 print_byte::$2 ] ( main:2::compare:16::print_word:46::print_byte:77 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#2 print_char_cursor#11 print_byte::$2 ] main:2::compare:16::print_word:50::print_byte:77 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#2 print_char_cursor#11 print_byte::$2 ] main:2::compare:16::print_word:46::print_byte:79 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#11 print_byte::$2 ] main:2::compare:16::print_word:50::print_byte:79 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#11 print_byte::$2 ] ) always clobbers reg byte a 
Statement [91] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#2 print_str::str#2 ] ( main:2::compare:16::print_str:48 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::r#10 print_char_cursor#2 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [93] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) [ print_char_cursor#2 print_str::str#2 ] ( main:2::compare:16::print_str:48 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::r#10 print_char_cursor#2 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [98] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [100] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_BYTE:3 [ main::j#2 main::j#1 ] : zp ZP_BYTE:3 , reg byte x , 
Potential registers zp ZP_BYTE:4 [ main::op#2 main::op#1 ] : zp ZP_BYTE:4 , reg byte x , 
Potential registers zp ZP_BYTE:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ] : zp ZP_BYTE:5 , reg byte x , 
Potential registers zp ZP_WORD:6 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#29 print_line_cursor#31 print_line_cursor#23 print_line_cursor#1 ] : zp ZP_WORD:6 , 
Potential registers zp ZP_WORD:8 [ compare::ops#7 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_BYTE:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ] : zp ZP_BYTE:10 , reg byte x , 
Potential registers zp ZP_BYTE:11 [ print_char::ch#4 print_char::ch#2 print_char::ch#0 print_char::ch#1 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:12 [ print_word::w#2 print_word::w#0 print_word::w#1 ] : zp ZP_WORD:12 , 
Potential registers zp ZP_WORD:14 [ print_char_cursor#52 print_char_cursor#36 print_char_cursor#55 print_char_cursor#61 print_char_cursor#72 print_char_cursor#62 print_char_cursor#11 print_char_cursor#109 print_char_cursor#53 print_char_cursor#2 print_char_cursor#1 ] : zp ZP_WORD:14 , 
Potential registers zp ZP_BYTE:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] : zp ZP_BYTE:16 , reg byte x , 
Potential registers zp ZP_WORD:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ] : zp ZP_WORD:17 , 
Potential registers zp ZP_WORD:19 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:19 , 
Potential registers zp ZP_BYTE:21 [ main::$8 ] : zp ZP_BYTE:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:22 [ main::w1#0 ] : zp ZP_WORD:22 , 
Potential registers zp ZP_BYTE:24 [ main::$9 ] : zp ZP_BYTE:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:25 [ main::w2#0 ] : zp ZP_WORD:25 , 
Potential registers zp ZP_WORD:27 [ compare::w1#0 ] : zp ZP_WORD:27 , 
Potential registers zp ZP_WORD:29 [ compare::w2#0 ] : zp ZP_WORD:29 , 
Potential registers zp ZP_BYTE:31 [ compare::op#0 ] : zp ZP_BYTE:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ print_byte::$0 ] : zp ZP_BYTE:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ print_byte::$2 ] : zp ZP_BYTE:33 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 27,162.22: zp ZP_WORD:6 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#29 print_line_cursor#31 print_line_cursor#23 print_line_cursor#1 ] 17,968.66: zp ZP_WORD:14 [ print_char_cursor#52 print_char_cursor#36 print_char_cursor#55 print_char_cursor#61 print_char_cursor#72 print_char_cursor#62 print_char_cursor#11 print_char_cursor#109 print_char_cursor#53 print_char_cursor#2 print_char_cursor#1 ] 
Uplift Scope [print_str] 30,005.5: zp ZP_WORD:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ] 
Uplift Scope [main] 2,302.43: zp ZP_BYTE:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ] 1,774.5: zp ZP_BYTE:4 [ main::op#2 main::op#1 ] 202: zp ZP_BYTE:24 [ main::$9 ] 170.44: zp ZP_BYTE:3 [ main::j#2 main::j#1 ] 78.71: zp ZP_WORD:25 [ main::w2#0 ] 53.26: zp ZP_WORD:22 [ main::w1#0 ] 22: zp ZP_BYTE:21 [ main::$8 ] 18.07: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [compare] 168.83: zp ZP_BYTE:31 [ compare::op#0 ] 36.25: zp ZP_WORD:27 [ compare::w1#0 ] 32.74: zp ZP_WORD:29 [ compare::w2#0 ] 14: zp ZP_BYTE:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ] 0.67: zp ZP_WORD:8 [ compare::ops#7 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:19 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [print_char] 20: zp ZP_BYTE:11 [ print_char::ch#4 print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplift Scope [print_byte] 10: zp ZP_BYTE:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 4: zp ZP_BYTE:32 [ print_byte::$0 ] 4: zp ZP_BYTE:33 [ print_byte::$2 ] 
Uplift Scope [print_word] 10.67: zp ZP_WORD:12 [ print_word::w#2 print_word::w#0 print_word::w#1 ] 
Uplift Scope [print_ln] 

Uplifting [] best 1156277 combination zp ZP_WORD:6 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#29 print_line_cursor#31 print_line_cursor#23 print_line_cursor#1 ] zp ZP_WORD:14 [ print_char_cursor#52 print_char_cursor#36 print_char_cursor#55 print_char_cursor#61 print_char_cursor#72 print_char_cursor#62 print_char_cursor#11 print_char_cursor#109 print_char_cursor#53 print_char_cursor#2 print_char_cursor#1 ] 
Uplifting [print_str] best 1156277 combination zp ZP_WORD:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ] 
Uplifting [main] best 1143837 combination zp ZP_BYTE:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ] reg byte x [ main::op#2 main::op#1 ] reg byte a [ main::$9 ] zp ZP_BYTE:3 [ main::j#2 main::j#1 ] zp ZP_WORD:25 [ main::w2#0 ] zp ZP_WORD:22 [ main::w1#0 ] reg byte a [ main::$8 ] zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [compare] best 1140819 combination reg byte x [ compare::op#0 ] zp ZP_WORD:27 [ compare::w1#0 ] zp ZP_WORD:29 [ compare::w2#0 ] zp ZP_BYTE:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ] zp ZP_WORD:8 [ compare::ops#7 ] 
Uplifting [print_cls] best 1140819 combination zp ZP_WORD:19 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [print_char] best 1140804 combination reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplifting [print_byte] best 1140796 combination zp ZP_BYTE:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [print_word] best 1140796 combination zp ZP_WORD:12 [ print_word::w#2 print_word::w#0 print_word::w#1 ] 
Uplifting [print_ln] best 1140796 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Uplifting [main] best 1140796 combination zp ZP_BYTE:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Uplifting [main] best 1140796 combination zp ZP_BYTE:3 [ main::j#2 main::j#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 1140796 combination zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
Uplifting [compare] best 1140796 combination zp ZP_BYTE:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Uplifting [print_byte] best 1140796 combination zp ZP_BYTE:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:8 [ compare::ops#7 ] ] with [ zp ZP_WORD:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:12 [ print_word::w#2 print_word::w#0 print_word::w#1 ] ] with [ zp ZP_WORD:27 [ compare::w1#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:25 [ main::w2#0 ] ] with [ zp ZP_WORD:29 [ compare::w2#0 ] ] - score: 1
Allocated (was zp ZP_BYTE:5) zp ZP_BYTE:4 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Allocated (was zp ZP_WORD:6) zp ZP_WORD:5 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#29 print_line_cursor#31 print_line_cursor#23 print_line_cursor#1 ]
Allocated (was zp ZP_WORD:8) zp ZP_WORD:7 [ compare::ops#7 print_str::str#2 print_str::str#1 print_str::str#0 ]
Allocated (was zp ZP_BYTE:10) zp ZP_BYTE:9 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
Allocated (was zp ZP_WORD:12) zp ZP_WORD:10 [ print_word::w#2 print_word::w#0 print_word::w#1 compare::w1#0 ]
Allocated (was zp ZP_WORD:14) zp ZP_WORD:12 [ print_char_cursor#52 print_char_cursor#36 print_char_cursor#55 print_char_cursor#61 print_char_cursor#72 print_char_cursor#62 print_char_cursor#11 print_char_cursor#109 print_char_cursor#53 print_char_cursor#2 print_char_cursor#1 ]
Allocated (was zp ZP_BYTE:16) zp ZP_BYTE:14 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated (was zp ZP_WORD:19) zp ZP_WORD:15 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated (was zp ZP_WORD:22) zp ZP_WORD:17 [ main::w1#0 ]
Allocated (was zp ZP_WORD:25) zp ZP_WORD:19 [ main::w2#0 compare::w2#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // empty circle
  .const FF = $57
  // filled circle
  .const TT = $51
  .label print_char_cursor = $c
  .label print_line_cursor = 5
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label w1 = $11
    .label w2 = $13
    .label s = 4
    .label j = 3
    .label i = 2
  //SEG11 [5] call print_cls 
  //SEG12 [96] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG14 [6] phi (byte*) print_line_cursor#31 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG15 [6] phi (byte) main::s#7 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta s
  //SEG16 [6] phi (byte*) print_char_cursor#72 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG17 [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG18 [6] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  b1_from_b7:
  //SEG19 [6] phi (byte*) print_line_cursor#31 = (byte*) print_line_cursor#23 [phi:main::@7->main::@1#0] -- register_copy 
  //SEG20 [6] phi (byte) main::s#7 = (byte) main::s#10 [phi:main::@7->main::@1#1] -- register_copy 
  //SEG21 [6] phi (byte*) print_char_cursor#72 = (byte*) print_char_cursor#62 [phi:main::@7->main::@1#2] -- register_copy 
  //SEG22 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#3] -- register_copy 
    jmp b1
  //SEG23 main::@1
  b1:
  //SEG24 [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda i
    asl
  //SEG25 [8] (word) main::w1#0 ← *((const word[]) words#0 + (byte~) main::$8) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda words,y
    sta w1
    lda words+1,y
    sta w1+1
  //SEG26 [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG27 [9] phi (byte*) print_line_cursor#29 = (byte*) print_line_cursor#31 [phi:main::@1->main::@2#0] -- register_copy 
  //SEG28 [9] phi (byte) main::s#5 = (byte) main::s#7 [phi:main::@1->main::@2#1] -- register_copy 
  //SEG29 [9] phi (byte*) print_char_cursor#61 = (byte*) print_char_cursor#72 [phi:main::@1->main::@2#2] -- register_copy 
  //SEG30 [9] phi (byte) main::j#2 = (byte) 0 [phi:main::@1->main::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta j
    jmp b2
  //SEG31 [9] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  b2_from_b6:
  //SEG32 [9] phi (byte*) print_line_cursor#29 = (byte*) print_line_cursor#23 [phi:main::@6->main::@2#0] -- register_copy 
  //SEG33 [9] phi (byte) main::s#5 = (byte) main::s#10 [phi:main::@6->main::@2#1] -- register_copy 
  //SEG34 [9] phi (byte*) print_char_cursor#61 = (byte*) print_char_cursor#62 [phi:main::@6->main::@2#2] -- register_copy 
  //SEG35 [9] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@6->main::@2#3] -- register_copy 
    jmp b2
  //SEG36 main::@2
  b2:
  //SEG37 [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda j
    asl
  //SEG38 [11] (word) main::w2#0 ← *((const word[]) words#0 + (byte~) main::$9) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda words,y
    sta w2
    lda words+1,y
    sta w2+1
  //SEG39 [12] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
  //SEG40 [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#29 [phi:main::@2->main::@3#0] -- register_copy 
  //SEG41 [12] phi (byte) main::s#3 = (byte) main::s#5 [phi:main::@2->main::@3#1] -- register_copy 
  //SEG42 [12] phi (byte*) print_char_cursor#55 = (byte*) print_char_cursor#61 [phi:main::@2->main::@3#2] -- register_copy 
  //SEG43 [12] phi (byte) main::op#2 = (byte) 0 [phi:main::@2->main::@3#3] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG44 [12] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  b3_from_b4:
  //SEG45 [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#23 [phi:main::@4->main::@3#0] -- register_copy 
  //SEG46 [12] phi (byte) main::s#3 = (byte) main::s#10 [phi:main::@4->main::@3#1] -- register_copy 
  //SEG47 [12] phi (byte*) print_char_cursor#55 = (byte*) print_char_cursor#62 [phi:main::@4->main::@3#2] -- register_copy 
  //SEG48 [12] phi (byte) main::op#2 = (byte) main::op#1 [phi:main::@4->main::@3#3] -- register_copy 
    jmp b3
  //SEG49 main::@3
  b3:
  //SEG50 [13] (word) compare::w1#0 ← (word) main::w1#0 -- vwuz1=vwuz2 
    lda w1
    sta compare.w1
    lda w1+1
    sta compare.w1+1
  //SEG51 [14] (word) compare::w2#0 ← (word) main::w2#0
  //SEG52 [15] (byte) compare::op#0 ← (byte) main::op#2
  //SEG53 [16] call compare 
    jsr compare
    jmp b9
  //SEG54 main::@9
  b9:
  //SEG55 [17] (byte) main::s#1 ← ++ (byte) main::s#3 -- vbuz1=_inc_vbuz1 
    inc s
  //SEG56 [18] if((byte) main::s#1!=(byte) 3) goto main::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp s
    bne b4_from_b9
  //SEG57 [19] phi from main::@9 to main::@5 [phi:main::@9->main::@5]
  b5_from_b9:
    jmp b5
  //SEG58 main::@5
  b5:
  //SEG59 [20] call print_ln 
  //SEG60 [30] phi from main::@5 to print_ln [phi:main::@5->print_ln]
  print_ln_from_b5:
    jsr print_ln
    jmp b10
  //SEG61 main::@10
  b10:
  //SEG62 [21] (byte*~) print_char_cursor#109 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG63 [22] phi from main::@10 to main::@4 [phi:main::@10->main::@4]
  b4_from_b10:
  //SEG64 [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:main::@10->main::@4#0] -- register_copy 
  //SEG65 [22] phi (byte) main::s#10 = (byte) 0 [phi:main::@10->main::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta s
  //SEG66 [22] phi (byte*) print_char_cursor#62 = (byte*~) print_char_cursor#109 [phi:main::@10->main::@4#2] -- register_copy 
    jmp b4
  //SEG67 [22] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
  b4_from_b9:
  //SEG68 [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#19 [phi:main::@9->main::@4#0] -- register_copy 
  //SEG69 [22] phi (byte) main::s#10 = (byte) main::s#1 [phi:main::@9->main::@4#1] -- register_copy 
  //SEG70 [22] phi (byte*) print_char_cursor#62 = (byte*) print_char_cursor#11 [phi:main::@9->main::@4#2] -- register_copy 
    jmp b4
  //SEG71 main::@4
  b4:
  //SEG72 [23] (byte) main::op#1 ← ++ (byte) main::op#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG73 [24] if((byte) main::op#1!=(byte) 6) goto main::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne b3_from_b4
    jmp b6
  //SEG74 main::@6
  b6:
  //SEG75 [25] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG76 [26] if((byte) main::j#1!=(byte) 3) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp j
    bne b2_from_b6
    jmp b7
  //SEG77 main::@7
  b7:
  //SEG78 [27] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG79 [28] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp i
    bne b1_from_b7
  //SEG80 [29] phi from main::@7 main::@8 to main::@8 [phi:main::@7/main::@8->main::@8]
  b8_from_b7:
  b8_from_b8:
    jmp b8
  // loop forever
  //SEG81 main::@8
  b8:
    jmp b8_from_b8
}
//SEG82 print_ln
// Print a newline
print_ln: {
  //SEG83 [31] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG84 [31] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG85 print_ln::@1
  b1:
  //SEG86 [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG87 [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#11) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG88 print_ln::@return
  breturn:
  //SEG89 [34] return 
    rts
}
//SEG90 compare
// Compare two words using an operator
// compare(word zeropage($a) w1, word zeropage($13) w2, byte register(X) op)
compare: {
    .label w1 = $a
    .label w2 = $13
    .label ops = 7
    .label r = 9
  //SEG91 [35] if((byte) compare::op#0==(byte) 0) goto compare::@1 -- vbuxx_eq_0_then_la1 
    cpx #0
    beq b1
    jmp b7
  //SEG92 compare::@7
  b7:
  //SEG93 [36] if((byte) compare::op#0==(byte) 1) goto compare::@2 -- vbuxx_eq_vbuc1_then_la1 
    cpx #1
    beq b2
    jmp b8
  //SEG94 compare::@8
  b8:
  //SEG95 [37] if((byte) compare::op#0==(byte) 2) goto compare::@3 -- vbuxx_eq_vbuc1_then_la1 
    cpx #2
    beq b3
    jmp b9
  //SEG96 compare::@9
  b9:
  //SEG97 [38] if((byte) compare::op#0==(byte) 3) goto compare::@4 -- vbuxx_eq_vbuc1_then_la1 
    cpx #3
    beq b4
    jmp b10
  //SEG98 compare::@10
  b10:
  //SEG99 [39] if((byte) compare::op#0==(byte) 4) goto compare::@5 -- vbuxx_eq_vbuc1_then_la1 
    cpx #4
    beq b5
    jmp b11
  //SEG100 compare::@11
  b11:
  //SEG101 [40] if((byte) compare::op#0!=(byte) 5) goto compare::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #5
    bne b6_from_b11
    jmp b12
  //SEG102 compare::@12
  b12:
  //SEG103 [41] if((word) compare::w1#0==(word) compare::w2#0) goto compare::@19 -- vwuz1_eq_vwuz2_then_la1 
    lda w1
    cmp w2
    bne !+
    lda w1+1
    cmp w2+1
    beq b19_from_b12
  !:
  //SEG104 [42] phi from compare::@12 to compare::@13 [phi:compare::@12->compare::@13]
  b13_from_b12:
    jmp b13
  //SEG105 compare::@13
  b13:
  //SEG106 [43] phi from compare::@13 to compare::@19 [phi:compare::@13->compare::@19]
  b19_from_b13:
  //SEG107 [43] phi (byte) compare::r#12 = (const byte) TT#0 [phi:compare::@13->compare::@19#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b19
  //SEG108 [43] phi from compare::@12 to compare::@19 [phi:compare::@12->compare::@19]
  b19_from_b12:
  //SEG109 [43] phi (byte) compare::r#12 = (const byte) FF#0 [phi:compare::@12->compare::@19#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b19
  //SEG110 compare::@19
  b19:
  //SEG111 [44] phi from compare::@19 to compare::@6 [phi:compare::@19->compare::@6]
  b6_from_b19:
  //SEG112 [44] phi (byte) compare::r#10 = (byte) compare::r#12 [phi:compare::@19->compare::@6#0] -- register_copy 
  //SEG113 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#1 [phi:compare::@19->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_1
    sta ops
    lda #>ops_1
    sta ops+1
    jmp b6
  //SEG114 [44] phi from compare::@11 to compare::@6 [phi:compare::@11->compare::@6]
  b6_from_b11:
  //SEG115 [44] phi (byte) compare::r#10 = (const byte) FF#0 [phi:compare::@11->compare::@6#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG116 [44] phi (byte*) compare::ops#7 = (byte*) 0 [phi:compare::@11->compare::@6#1] -- pbuz1=pbuc1 
    lda #<0
    sta ops
    lda #>0
    sta ops+1
    jmp b6
  //SEG117 compare::@6
  b6:
  //SEG118 [45] (word) print_word::w#0 ← (word) compare::w1#0
  //SEG119 [46] call print_word 
  //SEG120 [75] phi from compare::@6 to print_word [phi:compare::@6->print_word]
  print_word_from_b6:
  //SEG121 [75] phi (byte*) print_char_cursor#52 = (byte*) print_char_cursor#55 [phi:compare::@6->print_word#0] -- register_copy 
  //SEG122 [75] phi (word) print_word::w#2 = (word) print_word::w#0 [phi:compare::@6->print_word#1] -- register_copy 
    jsr print_word
    jmp b25
  //SEG123 compare::@25
  b25:
  //SEG124 [47] (byte*) print_str::str#1 ← (byte*) compare::ops#7
  //SEG125 [48] call print_str 
  //SEG126 [89] phi from compare::@25 to print_str [phi:compare::@25->print_str]
  print_str_from_b25:
    jsr print_str
    jmp b26
  //SEG127 compare::@26
  b26:
  //SEG128 [49] (word) print_word::w#1 ← (word) compare::w2#0 -- vwuz1=vwuz2 
    lda w2
    sta print_word.w
    lda w2+1
    sta print_word.w+1
  //SEG129 [50] call print_word 
  //SEG130 [75] phi from compare::@26 to print_word [phi:compare::@26->print_word]
  print_word_from_b26:
  //SEG131 [75] phi (byte*) print_char_cursor#52 = (byte*) print_char_cursor#2 [phi:compare::@26->print_word#0] -- register_copy 
  //SEG132 [75] phi (word) print_word::w#2 = (word) print_word::w#1 [phi:compare::@26->print_word#1] -- register_copy 
    jsr print_word
    jmp b27
  //SEG133 compare::@27
  b27:
  //SEG134 [51] (byte) print_char::ch#2 ← (byte) compare::r#10 -- vbuaa=vbuz1 
    lda r
  //SEG135 [52] call print_char 
  //SEG136 [71] phi from compare::@27 to print_char [phi:compare::@27->print_char]
  print_char_from_b27:
  //SEG137 [71] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#11 [phi:compare::@27->print_char#0] -- register_copy 
  //SEG138 [71] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:compare::@27->print_char#1] -- register_copy 
    jsr print_char
  //SEG139 [53] phi from compare::@27 to compare::@28 [phi:compare::@27->compare::@28]
  b28_from_b27:
    jmp b28
  //SEG140 compare::@28
  b28:
  //SEG141 [54] call print_char 
  //SEG142 [71] phi from compare::@28 to print_char [phi:compare::@28->print_char]
  print_char_from_b28:
  //SEG143 [71] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#11 [phi:compare::@28->print_char#0] -- register_copy 
  //SEG144 [71] phi (byte) print_char::ch#4 = (byte) ' ' [phi:compare::@28->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp breturn
  //SEG145 compare::@return
  breturn:
  //SEG146 [55] return 
    rts
  //SEG147 compare::@5
  b5:
  //SEG148 [56] if((word) compare::w1#0!=(word) compare::w2#0) goto compare::@20 -- vwuz1_neq_vwuz2_then_la1 
    lda w1+1
    cmp w2+1
    bne b20_from_b5
    lda w1
    cmp w2
    bne b20_from_b5
  //SEG149 [57] phi from compare::@5 to compare::@14 [phi:compare::@5->compare::@14]
  b14_from_b5:
    jmp b14
  //SEG150 compare::@14
  b14:
  //SEG151 [58] phi from compare::@14 to compare::@20 [phi:compare::@14->compare::@20]
  b20_from_b14:
  //SEG152 [58] phi (byte) compare::r#13 = (const byte) TT#0 [phi:compare::@14->compare::@20#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b20
  //SEG153 [58] phi from compare::@5 to compare::@20 [phi:compare::@5->compare::@20]
  b20_from_b5:
  //SEG154 [58] phi (byte) compare::r#13 = (const byte) FF#0 [phi:compare::@5->compare::@20#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b20
  //SEG155 compare::@20
  b20:
  //SEG156 [44] phi from compare::@20 to compare::@6 [phi:compare::@20->compare::@6]
  b6_from_b20:
  //SEG157 [44] phi (byte) compare::r#10 = (byte) compare::r#13 [phi:compare::@20->compare::@6#0] -- register_copy 
  //SEG158 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#2 [phi:compare::@20->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_2
    sta ops
    lda #>ops_2
    sta ops+1
    jmp b6
  //SEG159 compare::@4
  b4:
  //SEG160 [59] if((word) compare::w1#0<(word) compare::w2#0) goto compare::@21 -- vwuz1_lt_vwuz2_then_la1 
    lda w1+1
    cmp w2+1
    bcc b21_from_b4
    bne !+
    lda w1
    cmp w2
    bcc b21_from_b4
  !:
  //SEG161 [60] phi from compare::@4 to compare::@15 [phi:compare::@4->compare::@15]
  b15_from_b4:
    jmp b15
  //SEG162 compare::@15
  b15:
  //SEG163 [61] phi from compare::@15 to compare::@21 [phi:compare::@15->compare::@21]
  b21_from_b15:
  //SEG164 [61] phi (byte) compare::r#14 = (const byte) TT#0 [phi:compare::@15->compare::@21#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b21
  //SEG165 [61] phi from compare::@4 to compare::@21 [phi:compare::@4->compare::@21]
  b21_from_b4:
  //SEG166 [61] phi (byte) compare::r#14 = (const byte) FF#0 [phi:compare::@4->compare::@21#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b21
  //SEG167 compare::@21
  b21:
  //SEG168 [44] phi from compare::@21 to compare::@6 [phi:compare::@21->compare::@6]
  b6_from_b21:
  //SEG169 [44] phi (byte) compare::r#10 = (byte) compare::r#14 [phi:compare::@21->compare::@6#0] -- register_copy 
  //SEG170 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#3 [phi:compare::@21->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_3
    sta ops
    lda #>ops_3
    sta ops+1
    jmp b6
  //SEG171 compare::@3
  b3:
  //SEG172 [62] if((word) compare::w1#0<=(word) compare::w2#0) goto compare::@22 -- vwuz1_le_vwuz2_then_la1 
    lda w1+1
    cmp w2+1
    bne !+
    lda w1
    cmp w2
    beq b22_from_b3
  !:
    bcc b22_from_b3
  //SEG173 [63] phi from compare::@3 to compare::@16 [phi:compare::@3->compare::@16]
  b16_from_b3:
    jmp b16
  //SEG174 compare::@16
  b16:
  //SEG175 [64] phi from compare::@16 to compare::@22 [phi:compare::@16->compare::@22]
  b22_from_b16:
  //SEG176 [64] phi (byte) compare::r#15 = (const byte) TT#0 [phi:compare::@16->compare::@22#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b22
  //SEG177 [64] phi from compare::@3 to compare::@22 [phi:compare::@3->compare::@22]
  b22_from_b3:
  //SEG178 [64] phi (byte) compare::r#15 = (const byte) FF#0 [phi:compare::@3->compare::@22#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b22
  //SEG179 compare::@22
  b22:
  //SEG180 [44] phi from compare::@22 to compare::@6 [phi:compare::@22->compare::@6]
  b6_from_b22:
  //SEG181 [44] phi (byte) compare::r#10 = (byte) compare::r#15 [phi:compare::@22->compare::@6#0] -- register_copy 
  //SEG182 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#4 [phi:compare::@22->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_4
    sta ops
    lda #>ops_4
    sta ops+1
    jmp b6
  //SEG183 compare::@2
  b2:
  //SEG184 [65] if((word) compare::w1#0>(word) compare::w2#0) goto compare::@23 -- vwuz1_gt_vwuz2_then_la1 
    lda w2+1
    cmp w1+1
    bcc b23_from_b2
    bne !+
    lda w2
    cmp w1
    bcc b23_from_b2
  !:
  //SEG185 [66] phi from compare::@2 to compare::@17 [phi:compare::@2->compare::@17]
  b17_from_b2:
    jmp b17
  //SEG186 compare::@17
  b17:
  //SEG187 [67] phi from compare::@17 to compare::@23 [phi:compare::@17->compare::@23]
  b23_from_b17:
  //SEG188 [67] phi (byte) compare::r#16 = (const byte) TT#0 [phi:compare::@17->compare::@23#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b23
  //SEG189 [67] phi from compare::@2 to compare::@23 [phi:compare::@2->compare::@23]
  b23_from_b2:
  //SEG190 [67] phi (byte) compare::r#16 = (const byte) FF#0 [phi:compare::@2->compare::@23#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b23
  //SEG191 compare::@23
  b23:
  //SEG192 [44] phi from compare::@23 to compare::@6 [phi:compare::@23->compare::@6]
  b6_from_b23:
  //SEG193 [44] phi (byte) compare::r#10 = (byte) compare::r#16 [phi:compare::@23->compare::@6#0] -- register_copy 
  //SEG194 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#5 [phi:compare::@23->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_5
    sta ops
    lda #>ops_5
    sta ops+1
    jmp b6
  //SEG195 compare::@1
  b1:
  //SEG196 [68] if((word) compare::w1#0>=(word) compare::w2#0) goto compare::@24 -- vwuz1_ge_vwuz2_then_la1 
    lda w2+1
    cmp w1+1
    bne !+
    lda w2
    cmp w1
    beq b24_from_b1
  !:
    bcc b24_from_b1
  //SEG197 [69] phi from compare::@1 to compare::@18 [phi:compare::@1->compare::@18]
  b18_from_b1:
    jmp b18
  //SEG198 compare::@18
  b18:
  //SEG199 [70] phi from compare::@18 to compare::@24 [phi:compare::@18->compare::@24]
  b24_from_b18:
  //SEG200 [70] phi (byte) compare::r#17 = (const byte) TT#0 [phi:compare::@18->compare::@24#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b24
  //SEG201 [70] phi from compare::@1 to compare::@24 [phi:compare::@1->compare::@24]
  b24_from_b1:
  //SEG202 [70] phi (byte) compare::r#17 = (const byte) FF#0 [phi:compare::@1->compare::@24#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b24
  //SEG203 compare::@24
  b24:
  //SEG204 [44] phi from compare::@24 to compare::@6 [phi:compare::@24->compare::@6]
  b6_from_b24:
  //SEG205 [44] phi (byte) compare::r#10 = (byte) compare::r#17 [phi:compare::@24->compare::@6#0] -- register_copy 
  //SEG206 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#6 [phi:compare::@24->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_6
    sta ops
    lda #>ops_6
    sta ops+1
    jmp b6
    ops_1: .text "!=@"
    ops_2: .text "==@"
    ops_3: .text ">=@"
    ops_4: .text "> @"
    ops_5: .text "<=@"
    ops_6: .text "< @"
}
//SEG207 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG208 [72] *((byte*) print_char_cursor#36) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG209 [73] (byte*) print_char_cursor#11 ← ++ (byte*) print_char_cursor#36 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG210 print_char::@return
  breturn:
  //SEG211 [74] return 
    rts
}
//SEG212 print_word
// Print a word as HEX
// print_word(word zeropage($a) w)
print_word: {
    .label w = $a
  //SEG213 [76] (byte) print_byte::b#0 ← > (word) print_word::w#2 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG214 [77] call print_byte 
  //SEG215 [81] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG216 [81] phi (byte*) print_char_cursor#53 = (byte*) print_char_cursor#52 [phi:print_word->print_byte#0] -- register_copy 
  //SEG217 [81] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG218 print_word::@1
  b1:
  //SEG219 [78] (byte) print_byte::b#1 ← < (word) print_word::w#2 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG220 [79] call print_byte 
  //SEG221 [81] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG222 [81] phi (byte*) print_char_cursor#53 = (byte*) print_char_cursor#11 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG223 [81] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG224 print_word::@return
  breturn:
  //SEG225 [80] return 
    rts
}
//SEG226 print_byte
// Print a byte as HEX
// print_byte(byte zeropage($e) b)
print_byte: {
    .label b = $e
  //SEG227 [82] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG228 [83] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG229 [84] call print_char 
  //SEG230 [71] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG231 [71] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#53 [phi:print_byte->print_char#0] -- register_copy 
  //SEG232 [71] phi (byte) print_char::ch#4 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG233 print_byte::@1
  b1:
  //SEG234 [85] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG235 [86] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG236 [87] call print_char 
  //SEG237 [71] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG238 [71] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#11 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG239 [71] phi (byte) print_char::ch#4 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG240 print_byte::@return
  breturn:
  //SEG241 [88] return 
    rts
}
//SEG242 print_str
// Print a zero-terminated string
// print_str(byte* zeropage(7) str)
print_str: {
    .label str = 7
  //SEG243 [90] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG244 [90] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#11 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG245 [90] phi (byte*) print_str::str#2 = (byte*) print_str::str#1 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG246 print_str::@1
  b1:
  //SEG247 [91] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG248 print_str::@return
  breturn:
  //SEG249 [92] return 
    rts
  //SEG250 print_str::@2
  b2:
  //SEG251 [93] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG252 [94] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG253 [95] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG254 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $f
  //SEG255 [97] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG256 [97] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG257 [97] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG258 [97] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG259 print_cls::@1
  b1:
  //SEG260 [98] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG261 [99] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG262 [100] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG263 print_cls::@return
  breturn:
  //SEG264 [101] return 
    rts
}
  print_hextab: .text "0123456789abcdef"
  words: .word $12, $3f34, $cfed

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b9
Removing instruction jmp b5
Removing instruction jmp b10
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b19
Removing instruction jmp b6
Removing instruction jmp b25
Removing instruction jmp b26
Removing instruction jmp b27
Removing instruction jmp b28
Removing instruction jmp breturn
Removing instruction jmp b14
Removing instruction jmp b20
Removing instruction jmp b15
Removing instruction jmp b21
Removing instruction jmp b16
Removing instruction jmp b22
Removing instruction jmp b17
Removing instruction jmp b23
Removing instruction jmp b18
Removing instruction jmp b24
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b4_from_b9 with b4
Replacing label b3_from_b4 with b3
Replacing label b2_from_b6 with b2
Replacing label b1_from_b7 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b2 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b7:
Removing instruction b2_from_b6:
Removing instruction b3_from_b4:
Removing instruction b5_from_b9:
Removing instruction print_ln_from_b5:
Removing instruction b4_from_b9:
Removing instruction b8_from_b7:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b13_from_b12:
Removing instruction b19_from_b13:
Removing instruction b6_from_b19:
Removing instruction print_word_from_b6:
Removing instruction print_str_from_b25:
Removing instruction b28_from_b27:
Removing instruction print_char_from_b28:
Removing instruction b14_from_b5:
Removing instruction b20_from_b14:
Removing instruction b6_from_b20:
Removing instruction b15_from_b4:
Removing instruction b21_from_b15:
Removing instruction b6_from_b21:
Removing instruction b16_from_b3:
Removing instruction b22_from_b16:
Removing instruction b6_from_b22:
Removing instruction b17_from_b2:
Removing instruction b23_from_b17:
Removing instruction b6_from_b23:
Removing instruction b18_from_b1:
Removing instruction b24_from_b18:
Removing instruction b6_from_b24:
Removing instruction b1_from_print_str:
Removing instruction b1_from_b2:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction print_cls_from_main:
Removing instruction b1_from_main:
Removing instruction b2_from_b1:
Removing instruction b3_from_b2:
Removing instruction b9:
Removing instruction b5:
Removing instruction b10:
Removing instruction b4_from_b10:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction breturn:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b13:
Removing instruction b25:
Removing instruction b26:
Removing instruction print_word_from_b26:
Removing instruction b27:
Removing instruction print_char_from_b27:
Removing instruction b28:
Removing instruction breturn:
Removing instruction b14:
Removing instruction b15:
Removing instruction b16:
Removing instruction b17:
Removing instruction b18:
Removing instruction breturn:
Removing instruction print_byte_from_print_word:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Relabelling long label b8_from_b8 to b5
Relabelling long label b19_from_b12 to b7
Relabelling long label b6_from_b11 to b8
Relabelling long label b20_from_b5 to b9
Relabelling long label b21_from_b4 to b10
Relabelling long label b22_from_b3 to b11
Relabelling long label b23_from_b2 to b12
Relabelling long label b24_from_b1 to b13
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #3
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [107] beq b1 to bne
Fixing long branch [111] beq b2 to bne
Fixing long branch [115] beq b3 to bne

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte) FF
(const byte) FF#0 FF = (byte) $57
(byte) TT
(const byte) TT#0 TT = (byte) $51
(void()) compare((word) compare::w1 , (word) compare::w2 , (byte) compare::op)
(label) compare::@1
(label) compare::@10
(label) compare::@11
(label) compare::@12
(label) compare::@13
(label) compare::@14
(label) compare::@15
(label) compare::@16
(label) compare::@17
(label) compare::@18
(label) compare::@19
(label) compare::@2
(label) compare::@20
(label) compare::@21
(label) compare::@22
(label) compare::@23
(label) compare::@24
(label) compare::@25
(label) compare::@26
(label) compare::@27
(label) compare::@28
(label) compare::@3
(label) compare::@4
(label) compare::@5
(label) compare::@6
(label) compare::@7
(label) compare::@8
(label) compare::@9
(label) compare::@return
(byte) compare::op
(byte) compare::op#0 reg byte x 168.8333333333334
(byte*) compare::ops
(const byte*) compare::ops#1 ops#1 = (string) "!=@"
(const byte*) compare::ops#2 ops#2 = (string) "==@"
(const byte*) compare::ops#3 ops#3 = (string) ">=@"
(const byte*) compare::ops#4 ops#4 = (string) "> @"
(const byte*) compare::ops#5 ops#5 = (string) "<=@"
(const byte*) compare::ops#6 ops#6 = (string) "< @"
(byte*) compare::ops#7 ops zp ZP_WORD:7 0.6666666666666666
(byte) compare::r
(byte) compare::r#10 r zp ZP_BYTE:9 1.9999999999999996
(byte) compare::r#12 r zp ZP_BYTE:9 2.0
(byte) compare::r#13 r zp ZP_BYTE:9 2.0
(byte) compare::r#14 r zp ZP_BYTE:9 2.0
(byte) compare::r#15 r zp ZP_BYTE:9 2.0
(byte) compare::r#16 r zp ZP_BYTE:9 2.0
(byte) compare::r#17 r zp ZP_BYTE:9 2.0
(word) compare::w1
(word) compare::w1#0 w1 zp ZP_WORD:10 36.249999999999986
(word) compare::w2
(word) compare::w2#0 w2 zp ZP_WORD:19 32.741935483870954
(void()) main()
(byte~) main::$8 reg byte a 22.0
(byte~) main::$9 reg byte a 202.0
(label) main::@1
(label) main::@10
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(byte) main::i
(byte) main::i#1 i zp ZP_BYTE:2 16.5
(byte) main::i#2 i zp ZP_BYTE:2 1.5714285714285716
(byte) main::j
(byte) main::j#1 j zp ZP_BYTE:3 151.5
(byte) main::j#2 j zp ZP_BYTE:3 18.9375
(byte) main::op
(byte) main::op#1 reg byte x 1501.5
(byte) main::op#2 reg byte x 273.0
(byte) main::s
(byte) main::s#1 s zp ZP_BYTE:4 1501.5
(byte) main::s#10 s zp ZP_BYTE:4 302.0
(byte) main::s#3 s zp ZP_BYTE:4 420.59999999999997
(byte) main::s#5 s zp ZP_BYTE:4 71.0
(byte) main::s#7 s zp ZP_BYTE:4 7.333333333333333
(word) main::w1
(word) main::w1#0 w1 zp ZP_WORD:17 53.26315789473684
(word) main::w2
(word) main::w2#0 w2 zp ZP_WORD:19 78.71428571428571
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 b zp ZP_BYTE:14 4.0
(byte) print_byte::b#1 b zp ZP_BYTE:14 4.0
(byte) print_byte::b#2 b zp ZP_BYTE:14 2.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 4.0
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#2 reg byte a 4.0
(byte) print_char::ch#4 reg byte a 8.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:12 10001.0
(byte*~) print_char_cursor#109 print_char_cursor zp ZP_WORD:12 2002.0
(byte*) print_char_cursor#11 print_char_cursor zp ZP_WORD:12 393.3571428571428
(byte*) print_char_cursor#2 print_char_cursor zp ZP_WORD:12 5001.166666666666
(byte*) print_char_cursor#36 print_char_cursor zp ZP_WORD:12 6.0
(byte*) print_char_cursor#52 print_char_cursor zp ZP_WORD:12 3.0
(byte*) print_char_cursor#53 print_char_cursor zp ZP_WORD:12 2.0
(byte*) print_char_cursor#55 print_char_cursor zp ZP_WORD:12 36.800000000000004
(byte*) print_char_cursor#61 print_char_cursor zp ZP_WORD:12 71.0
(byte*) print_char_cursor#62 print_char_cursor zp ZP_WORD:12 445.0
(byte*) print_char_cursor#72 print_char_cursor zp ZP_WORD:12 7.333333333333333
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:15 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:15 16.5
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:5 6401.0
(byte*) print_line_cursor#19 print_line_cursor zp ZP_WORD:5 233.8888888888889
(byte*) print_line_cursor#23 print_line_cursor zp ZP_WORD:5 445.0
(byte*) print_line_cursor#29 print_line_cursor zp ZP_WORD:5 71.0
(byte*) print_line_cursor#31 print_line_cursor zp ZP_WORD:5 7.333333333333333
(byte*) print_line_cursor#9 print_line_cursor zp ZP_WORD:5 20004.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:7 20002.0
(byte*) print_str::str#1 str zp ZP_WORD:7 2.0
(byte*) print_str::str#2 str zp ZP_WORD:7 10001.5
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0 w zp ZP_WORD:10 4.0
(word) print_word::w#1 w zp ZP_WORD:10 4.0
(word) print_word::w#2 w zp ZP_WORD:10 2.6666666666666665
(word[]) words
(const word[]) words#0 words = { (word) $12, (word) $3f34, (word) $cfed }

zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
reg byte x [ main::op#2 main::op#1 ]
zp ZP_BYTE:4 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
zp ZP_WORD:5 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#29 print_line_cursor#31 print_line_cursor#23 print_line_cursor#1 ]
zp ZP_WORD:7 [ compare::ops#7 print_str::str#2 print_str::str#1 print_str::str#0 ]
zp ZP_BYTE:9 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp ZP_WORD:10 [ print_word::w#2 print_word::w#0 print_word::w#1 compare::w1#0 ]
zp ZP_WORD:12 [ print_char_cursor#52 print_char_cursor#36 print_char_cursor#55 print_char_cursor#61 print_char_cursor#72 print_char_cursor#62 print_char_cursor#11 print_char_cursor#109 print_char_cursor#53 print_char_cursor#2 print_char_cursor#1 ]
zp ZP_BYTE:14 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
zp ZP_WORD:15 [ print_cls::sc#2 print_cls::sc#1 ]
reg byte a [ main::$8 ]
zp ZP_WORD:17 [ main::w1#0 ]
reg byte a [ main::$9 ]
zp ZP_WORD:19 [ main::w2#0 compare::w2#0 ]
reg byte x [ compare::op#0 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]


FINAL ASSEMBLER
Score: 966577

//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // empty circle
  .const FF = $57
  // filled circle
  .const TT = $51
  .label print_char_cursor = $c
  .label print_line_cursor = 5
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
    .label w1 = $11
    .label w2 = $13
    .label s = 4
    .label j = 3
    .label i = 2
  //SEG11 [5] call print_cls 
  //SEG12 [96] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG14 [6] phi (byte*) print_line_cursor#31 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG15 [6] phi (byte) main::s#7 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta s
  //SEG16 [6] phi (byte*) print_char_cursor#72 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG17 [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG18 [6] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  //SEG19 [6] phi (byte*) print_line_cursor#31 = (byte*) print_line_cursor#23 [phi:main::@7->main::@1#0] -- register_copy 
  //SEG20 [6] phi (byte) main::s#7 = (byte) main::s#10 [phi:main::@7->main::@1#1] -- register_copy 
  //SEG21 [6] phi (byte*) print_char_cursor#72 = (byte*) print_char_cursor#62 [phi:main::@7->main::@1#2] -- register_copy 
  //SEG22 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#3] -- register_copy 
  //SEG23 main::@1
  b1:
  //SEG24 [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda i
    asl
  //SEG25 [8] (word) main::w1#0 ← *((const word[]) words#0 + (byte~) main::$8) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda words,y
    sta w1
    lda words+1,y
    sta w1+1
  //SEG26 [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG27 [9] phi (byte*) print_line_cursor#29 = (byte*) print_line_cursor#31 [phi:main::@1->main::@2#0] -- register_copy 
  //SEG28 [9] phi (byte) main::s#5 = (byte) main::s#7 [phi:main::@1->main::@2#1] -- register_copy 
  //SEG29 [9] phi (byte*) print_char_cursor#61 = (byte*) print_char_cursor#72 [phi:main::@1->main::@2#2] -- register_copy 
  //SEG30 [9] phi (byte) main::j#2 = (byte) 0 [phi:main::@1->main::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta j
  //SEG31 [9] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  //SEG32 [9] phi (byte*) print_line_cursor#29 = (byte*) print_line_cursor#23 [phi:main::@6->main::@2#0] -- register_copy 
  //SEG33 [9] phi (byte) main::s#5 = (byte) main::s#10 [phi:main::@6->main::@2#1] -- register_copy 
  //SEG34 [9] phi (byte*) print_char_cursor#61 = (byte*) print_char_cursor#62 [phi:main::@6->main::@2#2] -- register_copy 
  //SEG35 [9] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@6->main::@2#3] -- register_copy 
  //SEG36 main::@2
  b2:
  //SEG37 [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda j
    asl
  //SEG38 [11] (word) main::w2#0 ← *((const word[]) words#0 + (byte~) main::$9) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda words,y
    sta w2
    lda words+1,y
    sta w2+1
  //SEG39 [12] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG40 [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#29 [phi:main::@2->main::@3#0] -- register_copy 
  //SEG41 [12] phi (byte) main::s#3 = (byte) main::s#5 [phi:main::@2->main::@3#1] -- register_copy 
  //SEG42 [12] phi (byte*) print_char_cursor#55 = (byte*) print_char_cursor#61 [phi:main::@2->main::@3#2] -- register_copy 
  //SEG43 [12] phi (byte) main::op#2 = (byte) 0 [phi:main::@2->main::@3#3] -- vbuxx=vbuc1 
    ldx #0
  //SEG44 [12] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  //SEG45 [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#23 [phi:main::@4->main::@3#0] -- register_copy 
  //SEG46 [12] phi (byte) main::s#3 = (byte) main::s#10 [phi:main::@4->main::@3#1] -- register_copy 
  //SEG47 [12] phi (byte*) print_char_cursor#55 = (byte*) print_char_cursor#62 [phi:main::@4->main::@3#2] -- register_copy 
  //SEG48 [12] phi (byte) main::op#2 = (byte) main::op#1 [phi:main::@4->main::@3#3] -- register_copy 
  //SEG49 main::@3
  b3:
  //SEG50 [13] (word) compare::w1#0 ← (word) main::w1#0 -- vwuz1=vwuz2 
    lda w1
    sta compare.w1
    lda w1+1
    sta compare.w1+1
  //SEG51 [14] (word) compare::w2#0 ← (word) main::w2#0
  //SEG52 [15] (byte) compare::op#0 ← (byte) main::op#2
  //SEG53 [16] call compare 
    jsr compare
  //SEG54 main::@9
  //SEG55 [17] (byte) main::s#1 ← ++ (byte) main::s#3 -- vbuz1=_inc_vbuz1 
    inc s
  //SEG56 [18] if((byte) main::s#1!=(byte) 3) goto main::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp s
    bne b4
  //SEG57 [19] phi from main::@9 to main::@5 [phi:main::@9->main::@5]
  //SEG58 main::@5
  //SEG59 [20] call print_ln 
  //SEG60 [30] phi from main::@5 to print_ln [phi:main::@5->print_ln]
    jsr print_ln
  //SEG61 main::@10
  //SEG62 [21] (byte*~) print_char_cursor#109 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG63 [22] phi from main::@10 to main::@4 [phi:main::@10->main::@4]
  //SEG64 [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:main::@10->main::@4#0] -- register_copy 
  //SEG65 [22] phi (byte) main::s#10 = (byte) 0 [phi:main::@10->main::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta s
  //SEG66 [22] phi (byte*) print_char_cursor#62 = (byte*~) print_char_cursor#109 [phi:main::@10->main::@4#2] -- register_copy 
  //SEG67 [22] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
  //SEG68 [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#19 [phi:main::@9->main::@4#0] -- register_copy 
  //SEG69 [22] phi (byte) main::s#10 = (byte) main::s#1 [phi:main::@9->main::@4#1] -- register_copy 
  //SEG70 [22] phi (byte*) print_char_cursor#62 = (byte*) print_char_cursor#11 [phi:main::@9->main::@4#2] -- register_copy 
  //SEG71 main::@4
  b4:
  //SEG72 [23] (byte) main::op#1 ← ++ (byte) main::op#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG73 [24] if((byte) main::op#1!=(byte) 6) goto main::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne b3
  //SEG74 main::@6
  //SEG75 [25] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG76 [26] if((byte) main::j#1!=(byte) 3) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp j
    bne b2
  //SEG77 main::@7
  //SEG78 [27] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG79 [28] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    cmp i
    bne b1
  //SEG80 [29] phi from main::@7 main::@8 to main::@8 [phi:main::@7/main::@8->main::@8]
  b5:
  // loop forever
  //SEG81 main::@8
    jmp b5
}
//SEG82 print_ln
// Print a newline
print_ln: {
  //SEG83 [31] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG84 [31] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG85 print_ln::@1
  b1:
  //SEG86 [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG87 [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#11) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1
  !:
  //SEG88 print_ln::@return
  //SEG89 [34] return 
    rts
}
//SEG90 compare
// Compare two words using an operator
// compare(word zeropage($a) w1, word zeropage($13) w2, byte register(X) op)
compare: {
    .label w1 = $a
    .label w2 = $13
    .label ops = 7
    .label r = 9
  //SEG91 [35] if((byte) compare::op#0==(byte) 0) goto compare::@1 -- vbuxx_eq_0_then_la1 
    cpx #0
    bne !b1+
    jmp b1
  !b1:
  //SEG92 compare::@7
  //SEG93 [36] if((byte) compare::op#0==(byte) 1) goto compare::@2 -- vbuxx_eq_vbuc1_then_la1 
    cpx #1
    bne !b2+
    jmp b2
  !b2:
  //SEG94 compare::@8
  //SEG95 [37] if((byte) compare::op#0==(byte) 2) goto compare::@3 -- vbuxx_eq_vbuc1_then_la1 
    cpx #2
    bne !b3+
    jmp b3
  !b3:
  //SEG96 compare::@9
  //SEG97 [38] if((byte) compare::op#0==(byte) 3) goto compare::@4 -- vbuxx_eq_vbuc1_then_la1 
    cpx #3
    beq b4
  //SEG98 compare::@10
  //SEG99 [39] if((byte) compare::op#0==(byte) 4) goto compare::@5 -- vbuxx_eq_vbuc1_then_la1 
    cpx #4
    beq b5
  //SEG100 compare::@11
  //SEG101 [40] if((byte) compare::op#0!=(byte) 5) goto compare::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #5
    bne b8
  //SEG102 compare::@12
  //SEG103 [41] if((word) compare::w1#0==(word) compare::w2#0) goto compare::@19 -- vwuz1_eq_vwuz2_then_la1 
    lda w1
    cmp w2
    bne !+
    lda w1+1
    cmp w2+1
    beq b7
  !:
  //SEG104 [42] phi from compare::@12 to compare::@13 [phi:compare::@12->compare::@13]
  //SEG105 compare::@13
  //SEG106 [43] phi from compare::@13 to compare::@19 [phi:compare::@13->compare::@19]
  //SEG107 [43] phi (byte) compare::r#12 = (const byte) TT#0 [phi:compare::@13->compare::@19#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b19
  //SEG108 [43] phi from compare::@12 to compare::@19 [phi:compare::@12->compare::@19]
  b7:
  //SEG109 [43] phi (byte) compare::r#12 = (const byte) FF#0 [phi:compare::@12->compare::@19#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG110 compare::@19
  b19:
  //SEG111 [44] phi from compare::@19 to compare::@6 [phi:compare::@19->compare::@6]
  //SEG112 [44] phi (byte) compare::r#10 = (byte) compare::r#12 [phi:compare::@19->compare::@6#0] -- register_copy 
  //SEG113 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#1 [phi:compare::@19->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_1
    sta ops
    lda #>ops_1
    sta ops+1
    jmp b6
  //SEG114 [44] phi from compare::@11 to compare::@6 [phi:compare::@11->compare::@6]
  b8:
  //SEG115 [44] phi (byte) compare::r#10 = (const byte) FF#0 [phi:compare::@11->compare::@6#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG116 [44] phi (byte*) compare::ops#7 = (byte*) 0 [phi:compare::@11->compare::@6#1] -- pbuz1=pbuc1 
    lda #<0
    sta ops
    sta ops+1
  //SEG117 compare::@6
  b6:
  //SEG118 [45] (word) print_word::w#0 ← (word) compare::w1#0
  //SEG119 [46] call print_word 
  //SEG120 [75] phi from compare::@6 to print_word [phi:compare::@6->print_word]
  //SEG121 [75] phi (byte*) print_char_cursor#52 = (byte*) print_char_cursor#55 [phi:compare::@6->print_word#0] -- register_copy 
  //SEG122 [75] phi (word) print_word::w#2 = (word) print_word::w#0 [phi:compare::@6->print_word#1] -- register_copy 
    jsr print_word
  //SEG123 compare::@25
  //SEG124 [47] (byte*) print_str::str#1 ← (byte*) compare::ops#7
  //SEG125 [48] call print_str 
  //SEG126 [89] phi from compare::@25 to print_str [phi:compare::@25->print_str]
    jsr print_str
  //SEG127 compare::@26
  //SEG128 [49] (word) print_word::w#1 ← (word) compare::w2#0 -- vwuz1=vwuz2 
    lda w2
    sta print_word.w
    lda w2+1
    sta print_word.w+1
  //SEG129 [50] call print_word 
  //SEG130 [75] phi from compare::@26 to print_word [phi:compare::@26->print_word]
  //SEG131 [75] phi (byte*) print_char_cursor#52 = (byte*) print_char_cursor#2 [phi:compare::@26->print_word#0] -- register_copy 
  //SEG132 [75] phi (word) print_word::w#2 = (word) print_word::w#1 [phi:compare::@26->print_word#1] -- register_copy 
    jsr print_word
  //SEG133 compare::@27
  //SEG134 [51] (byte) print_char::ch#2 ← (byte) compare::r#10 -- vbuaa=vbuz1 
    lda r
  //SEG135 [52] call print_char 
  //SEG136 [71] phi from compare::@27 to print_char [phi:compare::@27->print_char]
  //SEG137 [71] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#11 [phi:compare::@27->print_char#0] -- register_copy 
  //SEG138 [71] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:compare::@27->print_char#1] -- register_copy 
    jsr print_char
  //SEG139 [53] phi from compare::@27 to compare::@28 [phi:compare::@27->compare::@28]
  //SEG140 compare::@28
  //SEG141 [54] call print_char 
  //SEG142 [71] phi from compare::@28 to print_char [phi:compare::@28->print_char]
  //SEG143 [71] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#11 [phi:compare::@28->print_char#0] -- register_copy 
  //SEG144 [71] phi (byte) print_char::ch#4 = (byte) ' ' [phi:compare::@28->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
  //SEG145 compare::@return
  //SEG146 [55] return 
    rts
  //SEG147 compare::@5
  b5:
  //SEG148 [56] if((word) compare::w1#0!=(word) compare::w2#0) goto compare::@20 -- vwuz1_neq_vwuz2_then_la1 
    lda w1+1
    cmp w2+1
    bne b9
    lda w1
    cmp w2
    bne b9
  //SEG149 [57] phi from compare::@5 to compare::@14 [phi:compare::@5->compare::@14]
  //SEG150 compare::@14
  //SEG151 [58] phi from compare::@14 to compare::@20 [phi:compare::@14->compare::@20]
  //SEG152 [58] phi (byte) compare::r#13 = (const byte) TT#0 [phi:compare::@14->compare::@20#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b20
  //SEG153 [58] phi from compare::@5 to compare::@20 [phi:compare::@5->compare::@20]
  b9:
  //SEG154 [58] phi (byte) compare::r#13 = (const byte) FF#0 [phi:compare::@5->compare::@20#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG155 compare::@20
  b20:
  //SEG156 [44] phi from compare::@20 to compare::@6 [phi:compare::@20->compare::@6]
  //SEG157 [44] phi (byte) compare::r#10 = (byte) compare::r#13 [phi:compare::@20->compare::@6#0] -- register_copy 
  //SEG158 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#2 [phi:compare::@20->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_2
    sta ops
    lda #>ops_2
    sta ops+1
    jmp b6
  //SEG159 compare::@4
  b4:
  //SEG160 [59] if((word) compare::w1#0<(word) compare::w2#0) goto compare::@21 -- vwuz1_lt_vwuz2_then_la1 
    lda w1+1
    cmp w2+1
    bcc b10
    bne !+
    lda w1
    cmp w2
    bcc b10
  !:
  //SEG161 [60] phi from compare::@4 to compare::@15 [phi:compare::@4->compare::@15]
  //SEG162 compare::@15
  //SEG163 [61] phi from compare::@15 to compare::@21 [phi:compare::@15->compare::@21]
  //SEG164 [61] phi (byte) compare::r#14 = (const byte) TT#0 [phi:compare::@15->compare::@21#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b21
  //SEG165 [61] phi from compare::@4 to compare::@21 [phi:compare::@4->compare::@21]
  b10:
  //SEG166 [61] phi (byte) compare::r#14 = (const byte) FF#0 [phi:compare::@4->compare::@21#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG167 compare::@21
  b21:
  //SEG168 [44] phi from compare::@21 to compare::@6 [phi:compare::@21->compare::@6]
  //SEG169 [44] phi (byte) compare::r#10 = (byte) compare::r#14 [phi:compare::@21->compare::@6#0] -- register_copy 
  //SEG170 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#3 [phi:compare::@21->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_3
    sta ops
    lda #>ops_3
    sta ops+1
    jmp b6
  //SEG171 compare::@3
  b3:
  //SEG172 [62] if((word) compare::w1#0<=(word) compare::w2#0) goto compare::@22 -- vwuz1_le_vwuz2_then_la1 
    lda w1+1
    cmp w2+1
    bne !+
    lda w1
    cmp w2
    beq b11
  !:
    bcc b11
  //SEG173 [63] phi from compare::@3 to compare::@16 [phi:compare::@3->compare::@16]
  //SEG174 compare::@16
  //SEG175 [64] phi from compare::@16 to compare::@22 [phi:compare::@16->compare::@22]
  //SEG176 [64] phi (byte) compare::r#15 = (const byte) TT#0 [phi:compare::@16->compare::@22#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b22
  //SEG177 [64] phi from compare::@3 to compare::@22 [phi:compare::@3->compare::@22]
  b11:
  //SEG178 [64] phi (byte) compare::r#15 = (const byte) FF#0 [phi:compare::@3->compare::@22#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG179 compare::@22
  b22:
  //SEG180 [44] phi from compare::@22 to compare::@6 [phi:compare::@22->compare::@6]
  //SEG181 [44] phi (byte) compare::r#10 = (byte) compare::r#15 [phi:compare::@22->compare::@6#0] -- register_copy 
  //SEG182 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#4 [phi:compare::@22->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_4
    sta ops
    lda #>ops_4
    sta ops+1
    jmp b6
  //SEG183 compare::@2
  b2:
  //SEG184 [65] if((word) compare::w1#0>(word) compare::w2#0) goto compare::@23 -- vwuz1_gt_vwuz2_then_la1 
    lda w2+1
    cmp w1+1
    bcc b12
    bne !+
    lda w2
    cmp w1
    bcc b12
  !:
  //SEG185 [66] phi from compare::@2 to compare::@17 [phi:compare::@2->compare::@17]
  //SEG186 compare::@17
  //SEG187 [67] phi from compare::@17 to compare::@23 [phi:compare::@17->compare::@23]
  //SEG188 [67] phi (byte) compare::r#16 = (const byte) TT#0 [phi:compare::@17->compare::@23#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b23
  //SEG189 [67] phi from compare::@2 to compare::@23 [phi:compare::@2->compare::@23]
  b12:
  //SEG190 [67] phi (byte) compare::r#16 = (const byte) FF#0 [phi:compare::@2->compare::@23#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG191 compare::@23
  b23:
  //SEG192 [44] phi from compare::@23 to compare::@6 [phi:compare::@23->compare::@6]
  //SEG193 [44] phi (byte) compare::r#10 = (byte) compare::r#16 [phi:compare::@23->compare::@6#0] -- register_copy 
  //SEG194 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#5 [phi:compare::@23->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_5
    sta ops
    lda #>ops_5
    sta ops+1
    jmp b6
  //SEG195 compare::@1
  b1:
  //SEG196 [68] if((word) compare::w1#0>=(word) compare::w2#0) goto compare::@24 -- vwuz1_ge_vwuz2_then_la1 
    lda w2+1
    cmp w1+1
    bne !+
    lda w2
    cmp w1
    beq b13
  !:
    bcc b13
  //SEG197 [69] phi from compare::@1 to compare::@18 [phi:compare::@1->compare::@18]
  //SEG198 compare::@18
  //SEG199 [70] phi from compare::@18 to compare::@24 [phi:compare::@18->compare::@24]
  //SEG200 [70] phi (byte) compare::r#17 = (const byte) TT#0 [phi:compare::@18->compare::@24#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b24
  //SEG201 [70] phi from compare::@1 to compare::@24 [phi:compare::@1->compare::@24]
  b13:
  //SEG202 [70] phi (byte) compare::r#17 = (const byte) FF#0 [phi:compare::@1->compare::@24#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG203 compare::@24
  b24:
  //SEG204 [44] phi from compare::@24 to compare::@6 [phi:compare::@24->compare::@6]
  //SEG205 [44] phi (byte) compare::r#10 = (byte) compare::r#17 [phi:compare::@24->compare::@6#0] -- register_copy 
  //SEG206 [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#6 [phi:compare::@24->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_6
    sta ops
    lda #>ops_6
    sta ops+1
    jmp b6
    ops_1: .text "!=@"
    ops_2: .text "==@"
    ops_3: .text ">=@"
    ops_4: .text "> @"
    ops_5: .text "<=@"
    ops_6: .text "< @"
}
//SEG207 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG208 [72] *((byte*) print_char_cursor#36) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG209 [73] (byte*) print_char_cursor#11 ← ++ (byte*) print_char_cursor#36 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG210 print_char::@return
  //SEG211 [74] return 
    rts
}
//SEG212 print_word
// Print a word as HEX
// print_word(word zeropage($a) w)
print_word: {
    .label w = $a
  //SEG213 [76] (byte) print_byte::b#0 ← > (word) print_word::w#2 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG214 [77] call print_byte 
  //SEG215 [81] phi from print_word to print_byte [phi:print_word->print_byte]
  //SEG216 [81] phi (byte*) print_char_cursor#53 = (byte*) print_char_cursor#52 [phi:print_word->print_byte#0] -- register_copy 
  //SEG217 [81] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG218 print_word::@1
  //SEG219 [78] (byte) print_byte::b#1 ← < (word) print_word::w#2 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG220 [79] call print_byte 
  //SEG221 [81] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  //SEG222 [81] phi (byte*) print_char_cursor#53 = (byte*) print_char_cursor#11 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG223 [81] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG224 print_word::@return
  //SEG225 [80] return 
    rts
}
//SEG226 print_byte
// Print a byte as HEX
// print_byte(byte zeropage($e) b)
print_byte: {
    .label b = $e
  //SEG227 [82] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG228 [83] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG229 [84] call print_char 
  //SEG230 [71] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG231 [71] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#53 [phi:print_byte->print_char#0] -- register_copy 
  //SEG232 [71] phi (byte) print_char::ch#4 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG233 print_byte::@1
  //SEG234 [85] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG235 [86] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG236 [87] call print_char 
  //SEG237 [71] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG238 [71] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#11 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG239 [71] phi (byte) print_char::ch#4 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG240 print_byte::@return
  //SEG241 [88] return 
    rts
}
//SEG242 print_str
// Print a zero-terminated string
// print_str(byte* zeropage(7) str)
print_str: {
    .label str = 7
  //SEG243 [90] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  //SEG244 [90] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#11 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG245 [90] phi (byte*) print_str::str#2 = (byte*) print_str::str#1 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
  //SEG246 print_str::@1
  b1:
  //SEG247 [91] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG248 print_str::@return
  //SEG249 [92] return 
    rts
  //SEG250 print_str::@2
  b2:
  //SEG251 [93] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (print_char_cursor),y
  //SEG252 [94] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG253 [95] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1
}
//SEG254 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $f
  //SEG255 [97] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG256 [97] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
  //SEG257 [97] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG258 [97] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG259 print_cls::@1
  b1:
  //SEG260 [98] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG261 [99] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG262 [100] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1
    lda sc
    cmp #<$400+$3e8
    bne b1
  //SEG263 print_cls::@return
  //SEG264 [101] return 
    rts
}
  print_hextab: .text "0123456789abcdef"
  words: .word $12, $3f34, $cfed

