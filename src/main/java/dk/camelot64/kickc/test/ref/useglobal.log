// Tests procedures using global variables (should not fail)
byte* SCREEN = $0400;
main();
void main() {
   *SCREEN = 1;
}
PROGRAM
  (byte*) SCREEN ← (word) 1024
  (void~) $0 ← call main 
  proc (void()) main()
  *((byte*) SCREEN) ← (byte) 1
main::@return:
  return 
  endproc // main()

SYMBOLS
(void~) $0
(byte*) SCREEN
(void()) main()
(label) main::@return

INITIAL CONTROL FLOW GRAPH
@BEGIN: from
  (byte*) SCREEN ← (word) 1024
  (void~) $0 ← call main 
  to:@1
main: from
  *((byte*) SCREEN) ← (byte) 1
  to:main::@return
main::@return: from main
  return 
  to:@RETURN
@1: from @BEGIN
  to:@END
@END: from @1

Removing empty block @1
CONTROL FLOW GRAPH
@BEGIN: from
  (byte*) SCREEN ← (word) 1024
  (void~) $0 ← call main 
  to:@END
main: from
  *((byte*) SCREEN) ← (byte) 1
  to:main::@return
main::@return: from main
  return 
  to:@RETURN
@END: from @BEGIN

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@BEGIN: from
  (byte*) SCREEN ← (word) 1024
  call main param-assignment
  to:@2
@2: from @BEGIN
  to:@END
main: from @BEGIN
  *((byte*) SCREEN) ← (byte) 1
  to:main::@return
main::@return: from main
  return 
  to:@RETURN
@END: from @2

Completing Phi functions...
CONTROL FLOW GRAPH SSA
@BEGIN: from
  (byte*) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@2
@2: from @BEGIN
  to:@END
main: from @BEGIN
  (byte*) SCREEN#1 ← phi( @BEGIN/(byte*) SCREEN#0 )
  *((byte*) SCREEN#1) ← (byte) 1
  to:main::@return
main::@return: from main
  return 
  to:@RETURN
@END: from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@BEGIN: from
  (byte*) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@2
@2: from @BEGIN
  to:@END
main: from @BEGIN
  (byte*) SCREEN#1 ← phi( @BEGIN/(byte*) SCREEN#0 )
  *((byte*) SCREEN#1) ← (byte) 1
  to:main::@return
main::@return: from main
  return 
  to:@RETURN
@END: from @2

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@BEGIN: from
  (byte*) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@END
main: from @BEGIN
  (byte*) SCREEN#1 ← phi( @BEGIN/(byte*) SCREEN#0 )
  *((byte*) SCREEN#1) ← (byte) 1
  to:main::@return
main::@return: from main
  return 
  to:@RETURN
@END: from @BEGIN

Constant (byte*) SCREEN#0 (word) 1024
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  (byte*) SCREEN#1 ← phi( @BEGIN/(word) 1024 )
  *((byte*) SCREEN#1) ← (byte) 1
  to:main::@return
main::@return: from main
  return 
  to:@RETURN
@END: from @BEGIN

Redundant Phi (byte*) SCREEN#1 (word) 1024
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  *((word) 1024) ← (byte) 1
  to:main::@return
main::@return: from main
  return 
  to:@RETURN
@END: from @BEGIN

Block Sequence Planned @BEGIN @END main main::@return 
Block Sequence Planned @BEGIN @END main main::@return 
CONTROL FLOW GRAPH - PHI LIFTED
@BEGIN: from
  call main param-assignment
  to:@END
@END: from @BEGIN
main: from @BEGIN
  *((word) 1024) ← (byte) 1
  to:main::@return
main::@return: from main
  return 
  to:@RETURN

Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES
@BEGIN: from
  [0] call main param-assignment [ ]
  to:@END
@END: from @BEGIN
main: from @BEGIN
  [1] *((word) 1024) ← (byte) 1 [ ]
  to:main::@return
main::@return: from main
  [2] return  [ ]
  to:@RETURN

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Block Sequence Planned @BEGIN @END main main::@return 
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@BEGIN: from
  [0] call main param-assignment [ ]
  to:@END
@END: from @BEGIN
main: from @BEGIN
  [1] *((word) 1024) ← (byte) 1 [ ]
  to:main::@return
main::@return: from main
  [2] return  [ ]
  to:@RETURN

CALL GRAPH
Calls in [] to 0:main 

DOMINATORS
@BEGIN dominated by  @BEGIN 
@END dominated by  @BEGIN @END 
main dominated by  @BEGIN main 
main::@return dominated by  @BEGIN main::@return main 

NATURAL LOOPS

Found 0 loops in scope []
Found 0 loops in scope [main]
NATURAL LOOPS WITH DEPTH


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()

Initial phi equivalence classes
Complete equivalence classes
INITIAL ASM
//SEG0 @BEGIN
BBEGIN:
//SEG1 [0] call main param-assignment [ ]
  jsr main
  jmp BEND
//SEG2 @END
BEND:
//SEG3 main
main:
//SEG4 [1] *((word) 1024) ← (byte) 1 [ ] -- _star_cowo1=coby2 
  lda #1
  sta 1024
  jmp main__Breturn
//SEG5 main::@return
main__Breturn:
//SEG6 [2] return  [ ]
  rts

Statement [1] *((word) 1024) ← (byte) 1 [ ] always clobbers reg byte a 
Statement [1] *((word) 1024) ← (byte) 1 [ ] always clobbers reg byte a 
REGISTER UPLIFT POTENTIAL REGISTERS

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 24 combination 
Uplifting [] best 24 combination 
Removing instruction jmp BEND
Removing instruction jmp main__Breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 @BEGIN
BBEGIN:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @END
BEND:
//SEG3 main
main:
//SEG4 [1] *((word) 1024) ← (byte) 1 [ ] -- _star_cowo1=coby2 
  lda #1
  sta 1024
//SEG5 main::@return
main__Breturn:
//SEG6 [2] return  [ ]
  rts

FINAL SYMBOL TABLE
(label) @BEGIN
(label) @END
(byte*) SCREEN
(void()) main()
(label) main::@return


FINAL CODE
//SEG0 @BEGIN
BBEGIN:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @END
BEND:
//SEG3 main
main:
//SEG4 [1] *((word) 1024) ← (byte) 1 [ ] -- _star_cowo1=coby2 
  lda #1
  sta 1024
//SEG5 main::@return
main__Breturn:
//SEG6 [2] return  [ ]
  rts

