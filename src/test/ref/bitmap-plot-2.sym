(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = (byte*) 53281
(byte*) BITMAP
(const byte*) BITMAP#0 BITMAP = (byte*) 8192
(byte) BLACK
(const byte) BLACK#0 BLACK = (byte) 0
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = (byte*) 53280
(byte*) CIA1_INTERRUPT
(const byte*) CIA1_INTERRUPT#0 CIA1_INTERRUPT = (byte*) 56333
(byte) CIA_INTERRUPT_CLEAR
(const byte) CIA_INTERRUPT_CLEAR#0 CIA_INTERRUPT_CLEAR = (byte) $7f
(byte*) D011
(const byte*) D011#0 D011 = (byte*) 53265
(byte*) D018
(const byte*) D018#0 D018 = (byte*) 53272
(void()**) HARDWARE_IRQ
(const void()**) HARDWARE_IRQ#0 HARDWARE_IRQ = (void()**) 65534
(byte*) IRQ_ENABLE
(const byte*) IRQ_ENABLE#0 IRQ_ENABLE = (byte*) 53274
(byte) IRQ_RASTER
(const byte) IRQ_RASTER#0 IRQ_RASTER = (byte) 1
(byte*) IRQ_STATUS
(const byte*) IRQ_STATUS#0 IRQ_STATUS = (byte*) 53273
(dword) PI2_u4f28
(const dword) PI2_u4f28#0 PI2_u4f28 = (dword) $6487ed51
(dword) PI_HALF_u4f28
(const dword) PI_HALF_u4f28#0 PI_HALF_u4f28 = (dword) $1921fb54
(dword) PI_u4f28
(const dword) PI_u4f28#0 PI_u4f28 = (dword) $3243f6a9
(byte*) PROCPORT
(const byte*) PROCPORT#0 PROCPORT = (byte*) 1
(byte*) PROCPORT_DDR
(const byte*) PROCPORT_DDR#0 PROCPORT_DDR = (byte*) 0
(byte) PROCPORT_DDR_MEMORY_MASK
(const byte) PROCPORT_DDR_MEMORY_MASK#0 PROCPORT_DDR_MEMORY_MASK = (byte) 7
(byte) PROCPORT_RAM_IO
(const byte) PROCPORT_RAM_IO#0 PROCPORT_RAM_IO = (byte) 5
(byte*) RASTER
(const byte*) RASTER#0 RASTER = (byte*) 53266
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (byte*) 1024
(signed word[$200]) SINUS
(const signed word[$200]) SINUS#0 SINUS = { fill( $200, 0) }
(const byte) SIZEOF_SIGNED_WORD SIZEOF_SIGNED_WORD = (byte) 2
(byte) VIC_BMM
(const byte) VIC_BMM#0 VIC_BMM = (byte) $20
(byte*) VIC_CONTROL
(const byte*) VIC_CONTROL#0 VIC_CONTROL = (byte*) 53265
(byte) VIC_DEN
(const byte) VIC_DEN#0 VIC_DEN = (byte) $10
(byte) VIC_RSEL
(const byte) VIC_RSEL#0 VIC_RSEL = (byte) 8
(byte) WHITE
(const byte) WHITE#0 WHITE = (byte) 1
(void()) bitmap_clear((byte) bitmap_clear::bgcol , (byte) bitmap_clear::fgcol)
(label) bitmap_clear::@1
(label) bitmap_clear::@return
(byte) bitmap_clear::bgcol
(byte) bitmap_clear::col
(const byte) bitmap_clear::col#0 col = (const byte) WHITE#0*(byte) $10
(byte) bitmap_clear::fgcol
(byte*) bitmap_gfx
(void()) bitmap_init((byte*) bitmap_init::gfx , (byte*) bitmap_init::screen)
(byte~) bitmap_init::$4 reg byte a 22.0
(byte~) bitmap_init::$5 reg byte a 22.0
(byte~) bitmap_init::$6 reg byte a 22.0
(byte~) bitmap_init::$7 $7 zp ZP_BYTE:27 5.5
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@return
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 reg byte a 11.0
(byte) bitmap_init::bits#3 reg byte a 16.5
(byte) bitmap_init::bits#4 reg byte a 7.333333333333333
(byte*) bitmap_init::gfx
(byte*) bitmap_init::screen
(byte) bitmap_init::x
(byte) bitmap_init::x#1 reg byte x 16.5
(byte) bitmap_init::x#2 reg byte x 5.5
(byte) bitmap_init::y
(byte) bitmap_init::y#1 reg byte x 16.5
(byte) bitmap_init::y#2 reg byte x 5.5
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 yoffs zp ZP_WORD:36 22.0
(byte*) bitmap_init::yoffs#2 yoffs zp ZP_WORD:36 6.875
(byte*) bitmap_init::yoffs#4 yoffs zp ZP_WORD:36 11.0
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$1 $1 zp ZP_WORD:25 4.0
(byte~) bitmap_plot::$2 reg byte a 4.0
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter#0 plotter zp ZP_WORD:23 1.0
(byte*) bitmap_plot::plotter#1 plotter zp ZP_WORD:23 3.0
(word) bitmap_plot::x
(word) bitmap_plot::x#0 x zp ZP_WORD:32 3.75
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 reg byte x 7.5
(byte[$100]) bitmap_plot_bit
(const byte[$100]) bitmap_plot_bit#0 bitmap_plot_bit = { fill( $100, 0) }
(byte[$100]) bitmap_plot_yhi
(const byte[$100]) bitmap_plot_yhi#0 bitmap_plot_yhi = { fill( $100, 0) }
(byte[$100]) bitmap_plot_ylo
(const byte[$100]) bitmap_plot_ylo#0 bitmap_plot_ylo = { fill( $100, 0) }
(byte*) bitmap_screen
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(label) div32u16u::@1
(label) div32u16u::@2
(label) div32u16u::@return
(dword) div32u16u::dividend
(word) div32u16u::divisor
(dword) div32u16u::quotient
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0 quotient_hi zp ZP_WORD:36 0.8
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0 quotient_lo zp ZP_WORD:20 4.0
(dword) div32u16u::return
(dword) div32u16u::return#0 return zp ZP_DWORD:28 1.3333333333333333
(dword) div32u16u::return#2 return zp ZP_DWORD:28 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 22.0
(byte~) divr16u::$2 reg byte a 22.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp ZP_WORD:18 2.75
(word) divr16u::dividend#3 dividend zp ZP_WORD:18 5.0
(word) divr16u::dividend#5 dividend zp ZP_WORD:18 2.0
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 16.5
(byte) divr16u::i#2 reg byte x 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp ZP_WORD:20 16.5
(word) divr16u::quotient#2 quotient zp ZP_WORD:20 11.0
(word) divr16u::quotient#3 quotient zp ZP_WORD:20 2.75
(word) divr16u::rem
(word) divr16u::rem#0 rem zp ZP_WORD:25 8.25
(word) divr16u::rem#1 rem zp ZP_WORD:25 22.0
(word) divr16u::rem#10 rem zp ZP_WORD:25 4.0
(word) divr16u::rem#11 rem zp ZP_WORD:25 11.666666666666666
(word) divr16u::rem#2 rem zp ZP_WORD:25 22.0
(word) divr16u::rem#4 rem zp ZP_WORD:25 4.0
(word) divr16u::rem#5 rem zp ZP_WORD:25 24.0
(word) divr16u::rem#6 rem zp ZP_WORD:25 11.0
(word) divr16u::return
(word) divr16u::return#0 return zp ZP_WORD:20 5.285714285714286
(word) divr16u::return#2 return zp ZP_WORD:20 4.0
(word) divr16u::return#3 return zp ZP_WORD:20 4.0
(byte) frame_cnt
(byte) frame_cnt#0 frame_cnt zp ZP_BYTE:22 0.5454545454545455
(byte) frame_cnt#1 frame_cnt zp ZP_BYTE:22 4.0
(byte) frame_cnt#2 frame_cnt zp ZP_BYTE:22 40.0
(void()) init_irq()
(label) init_irq::@return
interrupt(HARDWARE_CLOBBER)(void()) irq()
(label) irq::@1
(label) irq::@2
(label) irq::@return
(void()) main()
(word~) main::$10 $10 zp ZP_WORD:32 11.0
(signed word~) main::$11 $11 zp ZP_WORD:32 22.0
(word~) main::$16 $16 zp ZP_WORD:23 11.0
(signed word~) main::$17 $17 zp ZP_WORD:23 22.0
(word~) main::$32 $32 zp ZP_WORD:36 22.0
(word~) main::$33 $33 zp ZP_WORD:36 22.0
(signed word*~) main::$34 $34 zp ZP_WORD:36 22.0
(signed word*~) main::$35 $35 zp ZP_WORD:36 22.0
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(signed word) main::cos_x
(signed word) main::cos_x#0 cos_x zp ZP_WORD:36 11.0
(word) main::idx_x
(word) main::idx_x#1 idx_x zp ZP_WORD:2 11.0
(word) main::idx_x#10 idx_x zp ZP_WORD:2 3.0
(word) main::idx_x#11 idx_x zp ZP_WORD:2 1.222222222222222
(word) main::idx_y
(word) main::idx_y#1 idx_y zp ZP_WORD:18 11.0
(word) main::idx_y#10 idx_y zp ZP_WORD:18 3.142857142857143
(word) main::idx_y#3 idx_y zp ZP_WORD:18 1.064516129032258
(signed word) main::r
(signed word) main::r#1 r zp ZP_WORD:8 5.5
(signed word) main::r#10 r zp ZP_WORD:8 1.2571428571428571
(byte) main::r_add
(byte) main::r_add#1 r_add zp ZP_BYTE:27 22.0
(byte) main::r_add#10 r_add zp ZP_BYTE:27 2.026315789473684
(byte) main::r_add#12 r_add zp ZP_BYTE:27 16.5
(signed word) main::sin_y
(signed word) main::sin_y#0 sin_y zp ZP_WORD:36 11.0
(label) main::toD0181
(word~) main::toD0181_$0
(number~) main::toD0181_$1
(number~) main::toD0181_$2
(number~) main::toD0181_$3
(word~) main::toD0181_$4
(byte~) main::toD0181_$5
(number~) main::toD0181_$6
(number~) main::toD0181_$7
(number~) main::toD0181_$8
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >(word)(const byte*) SCREEN#0&(word) $3fff*(byte) 4|>(word)(const byte*) BITMAP#0/(byte) 4&(byte) $f
(byte*) main::toD0181_screen
(word) main::x
(signed word) main::x#0 x zp ZP_WORD:32 0.8461538461538461
(signed dword) main::xpos
(signed dword) main::xpos#0 xpos zp ZP_DWORD:14 22.0
(word) main::y
(signed word) main::y#0 y zp ZP_WORD:23 11.0
(signed dword) main::ypos
(signed dword) main::ypos#0 ypos zp ZP_DWORD:14 22.0
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#4 reg byte x 1.375
(byte*) memset::dst
(byte*) memset::dst#1 dst zp ZP_WORD:18 22.0
(byte*) memset::dst#2 dst zp ZP_WORD:18 15.333333333333332
(byte*~) memset::dst#4 dst zp ZP_WORD:18 4.0
(byte*) memset::end
(byte*) memset::end#0 end zp ZP_WORD:8 2.1666666666666665
(word) memset::num
(word) memset::num#2 num zp ZP_WORD:8 2.0
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp ZP_WORD:18
(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
(word~) mul16s::$13 $13 zp ZP_WORD:34 4.0
(word~) mul16s::$16 $16 zp ZP_WORD:25 4.0
(word~) mul16s::$17 $17 zp ZP_WORD:34 4.0
(word~) mul16s::$9 $9 zp ZP_WORD:25 4.0
(label) mul16s::@1
(label) mul16s::@2
(label) mul16s::@3
(label) mul16s::@4
(label) mul16s::@5
(label) mul16s::@return
(signed word) mul16s::a
(signed word) mul16s::a#0 a zp ZP_WORD:8 22.0
(signed word) mul16s::a#1 a zp ZP_WORD:8 11.0
(signed word) mul16s::a#2 a zp ZP_WORD:8 11.0
(signed word) mul16s::a#3 a zp ZP_WORD:8 2.692307692307692
(signed word) mul16s::b
(signed word) mul16s::b#1 b zp ZP_WORD:36 22.0
(signed word) mul16s::b#2 b zp ZP_WORD:36 22.0
(signed word) mul16s::b#3 b zp ZP_WORD:36 2.1818181818181817
(dword) mul16s::m
(dword) mul16s::m#0 m zp ZP_DWORD:14 2.0
(dword) mul16s::m#1 m zp ZP_DWORD:14 4.0
(dword) mul16s::m#2 m zp ZP_DWORD:14 4.0
(dword) mul16s::m#4 m zp ZP_DWORD:14 4.0
(dword) mul16s::m#5 m zp ZP_DWORD:14 2.5
(signed dword) mul16s::return
(signed dword) mul16s::return#0 return zp ZP_DWORD:14 7.000000000000001
(signed dword) mul16s::return#2 return zp ZP_DWORD:14 22.0
(signed dword) mul16s::return#3 return zp ZP_DWORD:14 22.0
(signed dword) mul16s::return#4 return zp ZP_DWORD:14 22.0
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(byte~) mul16u::$1 reg byte a 202.0
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@3
(label) mul16u::@4
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::a#0 a zp ZP_WORD:25 101.0
(word) mul16u::a#1 a zp ZP_WORD:25 2.0
(word) mul16u::a#2 a zp ZP_WORD:25 2.0
(word) mul16u::a#3 a zp ZP_WORD:25 67.66666666666666
(word) mul16u::a#6 a zp ZP_WORD:25 6.0
(word) mul16u::b
(word) mul16u::b#0 b zp ZP_WORD:23 4.0
(word) mul16u::b#1 b#1 zp ZP_WORD:2 4.0
(dword) mul16u::mb
(dword) mul16u::mb#0 mb zp ZP_DWORD:4 6.0
(dword) mul16u::mb#1 mb zp ZP_DWORD:4 202.0
(dword) mul16u::mb#2 mb zp ZP_DWORD:4 43.57142857142858
(dword) mul16u::res
(dword) mul16u::res#1 res zp ZP_DWORD:14 202.0
(dword) mul16u::res#2 res zp ZP_DWORD:14 43.85714285714286
(dword) mul16u::res#6 res zp ZP_DWORD:14 101.0
(dword) mul16u::return
(dword) mul16u::return#2 return zp ZP_DWORD:14 4.0
(dword) mul16u::return#3 return zp ZP_DWORD:14 4.0
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0 $0 zp ZP_DWORD:14 4.0
(dword~) mulu16_sel::$1 $1 zp ZP_DWORD:14 4.0
(label) mulu16_sel::@1
(label) mulu16_sel::@return
(word) mulu16_sel::return
(word) mulu16_sel::return#0 return zp ZP_WORD:36 4.0
(word) mulu16_sel::return#1 return#1 zp ZP_WORD:23 4.0
(word) mulu16_sel::return#10 return#10 zp ZP_WORD:23 4.0
(word) mulu16_sel::return#11 return zp ZP_WORD:36 4.0
(word) mulu16_sel::return#12 return zp ZP_WORD:36 1.714285714285714
(word) mulu16_sel::return#2 return zp ZP_WORD:36 4.0
(byte) mulu16_sel::select
(byte) mulu16_sel::select#5 reg byte x 0.3333333333333333
(word) mulu16_sel::v1
(word) mulu16_sel::v1#0 v1 zp ZP_WORD:23 2.0
(word) mulu16_sel::v1#1 v1 zp ZP_WORD:23 2.0
(word) mulu16_sel::v1#2 v1 zp ZP_WORD:23 4.0
(word) mulu16_sel::v1#3 v1 zp ZP_WORD:23 2.0
(word) mulu16_sel::v1#4 v1 zp ZP_WORD:23 2.0
(word) mulu16_sel::v1#5 v1 zp ZP_WORD:23 12.0
(word) mulu16_sel::v2
(word) mulu16_sel::v2#0 v2 zp ZP_WORD:2 4.0
(word) mulu16_sel::v2#1 v2 zp ZP_WORD:2 4.0
(word) mulu16_sel::v2#3 v2 zp ZP_WORD:2 4.0
(word) mulu16_sel::v2#4 v2 zp ZP_WORD:2 4.0
(word) mulu16_sel::v2#5 v2 zp ZP_WORD:2 5.0
(byte[$100]) plots_per_frame
(const byte[$100]) plots_per_frame#0 plots_per_frame = { fill( $100, 0) }
(word) rem16u
(word) rem16u#1 rem16u zp ZP_WORD:25 0.8
(signed word()) sin16s((dword) sin16s::x)
(dword~) sin16s::$4 $4 zp ZP_DWORD:14 4.0
(label) sin16s::@1
(label) sin16s::@10
(label) sin16s::@11
(label) sin16s::@12
(label) sin16s::@2
(label) sin16s::@3
(label) sin16s::@4
(label) sin16s::@5
(label) sin16s::@6
(label) sin16s::@7
(label) sin16s::@8
(label) sin16s::@9
(label) sin16s::@return
(byte) sin16s::isUpper
(byte) sin16s::isUpper#2 isUpper zp ZP_BYTE:27 0.06060606060606061
(signed word) sin16s::return
(signed word) sin16s::return#0 return zp ZP_WORD:8 22.0
(signed word) sin16s::return#1 return zp ZP_WORD:8 5.0
(signed word~) sin16s::return#5 return zp ZP_WORD:8 4.0
(signed word) sin16s::sinx
(signed word) sin16s::sinx#1 sinx zp ZP_WORD:8 4.0
(word) sin16s::usinx
(word) sin16s::usinx#0 usinx zp ZP_WORD:8 0.3333333333333333
(word) sin16s::usinx#1 usinx zp ZP_WORD:8 1.0
(dword) sin16s::x
(dword) sin16s::x#0 x zp ZP_DWORD:14 8.5
(dword) sin16s::x#1 x zp ZP_DWORD:14 4.0
(dword) sin16s::x#2 x zp ZP_DWORD:14 4.0
(dword) sin16s::x#4 x zp ZP_DWORD:14 5.0
(dword) sin16s::x#6 x zp ZP_DWORD:14 6.0
(word) sin16s::x1
(word) sin16s::x1#0 x1 zp ZP_WORD:34 0.6363636363636365
(word) sin16s::x2
(word) sin16s::x2#0 x2 zp ZP_WORD:23 4.0
(word) sin16s::x3
(word) sin16s::x3#0 x3 zp ZP_WORD:23 1.0
(word) sin16s::x3_6
(word) sin16s::x3_6#0 x3_6 zp ZP_WORD:36 4.0
(word) sin16s::x4
(word) sin16s::x4#0 x4 zp ZP_WORD:23 4.0
(word) sin16s::x5
(word) sin16s::x5#0 x5 zp ZP_WORD:36 4.0
(word) sin16s::x5_128
(word) sin16s::x5_128#0 x5_128 zp ZP_WORD:36 4.0
(void()) sin16s_gen2((signed word*) sin16s_gen2::sintab , (word) sin16s_gen2::wavelength , (signed word) sin16s_gen2::min , (signed word) sin16s_gen2::max)
(signed dword~) sin16s_gen2::$6 $6 zp ZP_DWORD:14 22.0
(word~) sin16s_gen2::$9 $9 zp ZP_WORD:32 11.0
(label) sin16s_gen2::@1
(label) sin16s_gen2::@2
(label) sin16s_gen2::@3
(label) sin16s_gen2::@4
(label) sin16s_gen2::@5
(label) sin16s_gen2::@return
(signed word) sin16s_gen2::ampl
(const signed word) sin16s_gen2::ampl#0 ampl = (const signed word) sin16s_gen2::max#0-(const signed word) sin16s_gen2::min#0
(word) sin16s_gen2::i
(word) sin16s_gen2::i#1 i zp ZP_WORD:18 16.5
(word) sin16s_gen2::i#6 i zp ZP_WORD:18 1.8333333333333333
(signed word) sin16s_gen2::max
(const signed word) sin16s_gen2::max#0 max = (signed word) $1001
(signed word) sin16s_gen2::min
(const signed word) sin16s_gen2::min#0 min = (signed word) -$1001
(signed word) sin16s_gen2::offs
(signed word*) sin16s_gen2::sintab
(signed word*) sin16s_gen2::sintab#0 sintab zp ZP_WORD:20 5.5
(signed word*) sin16s_gen2::sintab#10 sintab zp ZP_WORD:20 3.3000000000000003
(dword) sin16s_gen2::step
(dword) sin16s_gen2::step#0 step zp ZP_DWORD:28 0.8666666666666666
(word) sin16s_gen2::wavelength
(const word) sin16s_gen2::wavelength#0 wavelength = (word) $200
(dword) sin16s_gen2::x
(dword) sin16s_gen2::x#1 x zp ZP_DWORD:10 7.333333333333333
(dword) sin16s_gen2::x#6 x zp ZP_DWORD:10 3.0

zp ZP_WORD:2 [ mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 main::idx_x#11 main::idx_x#10 main::idx_x#1 ]
zp ZP_DWORD:4 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp ZP_WORD:8 [ memset::num#2 memset::end#0 main::r#10 main::r#1 mul16s::a#3 mul16s::a#1 mul16s::a#2 mul16s::a#0 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s::usinx#0 ]
reg byte x [ memset::c#4 ]
reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
zp ZP_DWORD:10 [ sin16s_gen2::x#6 sin16s_gen2::x#1 ]
zp ZP_DWORD:14 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 sin16s::$4 mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#3 main::xpos#0 mul16s::return#4 main::ypos#0 mul16s::return#2 sin16s_gen2::$6 mulu16_sel::$0 mulu16_sel::$1 ]
reg byte x [ mulu16_sel::select#5 ]
zp ZP_WORD:18 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 sin16s_gen2::i#6 sin16s_gen2::i#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 main::idx_y#3 main::idx_y#10 main::idx_y#1 ]
zp ZP_WORD:20 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 sin16s_gen2::sintab#10 sin16s_gen2::sintab#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp ZP_BYTE:22 [ frame_cnt#2 frame_cnt#0 frame_cnt#1 ]
reg byte x [ bitmap_plot::y#0 ]
zp ZP_WORD:23 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 main::$16 main::$17 main::y#0 mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 mul16u::b#0 ]
reg byte a [ bitmap_plot::$2 ]
zp ZP_WORD:25 [ mul16s::$9 mul16s::$16 bitmap_plot::$1 divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ]
reg byte a [ mul16u::$1 ]
zp ZP_BYTE:27 [ bitmap_init::$7 sin16s::isUpper#2 main::r_add#10 main::r_add#12 main::r_add#1 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]
zp ZP_DWORD:28 [ div32u16u::return#2 sin16s_gen2::step#0 div32u16u::return#0 ]
zp ZP_WORD:32 [ sin16s_gen2::$9 main::$10 main::$11 main::x#0 bitmap_plot::x#0 ]
zp ZP_WORD:34 [ sin16s::x1#0 mul16s::$13 mul16s::$17 ]
zp ZP_WORD:36 [ div32u16u::quotient_hi#0 mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 mul16s::b#3 mul16s::b#1 mul16s::b#2 main::cos_x#0 main::sin_y#0 main::$32 main::$34 main::$33 main::$35 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
