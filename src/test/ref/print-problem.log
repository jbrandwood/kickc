Identified constant variable (byte*) SCREEN

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (byte) line#0 ← (byte/signed byte/word/signed word/dword/signed dword) $40
  (byte) ch#0 ← (byte) line#0
  to:@2
main: scope:[main]  from @2
  (byte) ch#16 ← phi( @2/(byte) ch#17 )
  (byte) line#15 ← phi( @2/(byte) line#16 )
  call ln 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) ch#10 ← phi( main/(byte) ch#8 )
  (byte) line#8 ← phi( main/(byte) line#6 )
  (byte) line#1 ← (byte) line#8
  (byte) ch#1 ← (byte) ch#10
  (byte) ch#2 ← ++ (byte) ch#1
  call ln 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) ch#11 ← phi( main::@1/(byte) ch#8 )
  (byte) line#9 ← phi( main::@1/(byte) line#6 )
  (byte) line#2 ← (byte) line#9
  (byte) ch#3 ← (byte) ch#11
  (byte) ch#4 ← ++ (byte) ch#3
  call ln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) ch#12 ← phi( main::@2/(byte) ch#8 )
  (byte) line#10 ← phi( main::@2/(byte) line#6 )
  (byte) line#3 ← (byte) line#10
  (byte) ch#5 ← (byte) ch#12
  *((byte*) SCREEN#0) ← (byte) ch#5
  (byte*~) main::$3 ← (byte*) SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) $28
  *((byte*~) main::$3) ← (byte) line#3
  to:main::@return
main::@return: scope:[main]  from main::@3
  (byte) ch#13 ← phi( main::@3/(byte) ch#5 )
  (byte) line#11 ← phi( main::@3/(byte) line#3 )
  (byte) line#4 ← (byte) line#11
  (byte) ch#6 ← (byte) ch#13
  return 
  to:@return
ln: scope:[ln]  from main main::@1 main::@2
  (byte) line#12 ← phi( main/(byte) line#15 main::@1/(byte) line#1 main::@2/(byte) line#2 )
  (byte/signed word/word/dword/signed dword~) ln::$0 ← (byte) line#12 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) line#5 ← (byte/signed word/word/dword/signed dword~) ln::$0
  (byte) ch#7 ← (byte) line#5
  to:ln::@return
ln::@return: scope:[ln]  from ln
  (byte) ch#14 ← phi( ln/(byte) ch#7 )
  (byte) line#13 ← phi( ln/(byte) line#5 )
  (byte) line#6 ← (byte) line#13
  (byte) ch#8 ← (byte) ch#14
  return 
  to:@return
@2: scope:[]  from @begin
  (byte) ch#17 ← phi( @begin/(byte) ch#0 )
  (byte) line#16 ← phi( @begin/(byte) line#0 )
  call main 
  to:@3
@3: scope:[]  from @2
  (byte) ch#15 ← phi( @2/(byte) ch#6 )
  (byte) line#14 ← phi( @2/(byte) line#4 )
  (byte) line#7 ← (byte) line#14
  (byte) ch#9 ← (byte) ch#15
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte) ch
(byte) ch#0
(byte) ch#1
(byte) ch#10
(byte) ch#11
(byte) ch#12
(byte) ch#13
(byte) ch#14
(byte) ch#15
(byte) ch#16
(byte) ch#17
(byte) ch#2
(byte) ch#3
(byte) ch#4
(byte) ch#5
(byte) ch#6
(byte) ch#7
(byte) ch#8
(byte) ch#9
(byte) line
(byte) line#0
(byte) line#1
(byte) line#10
(byte) line#11
(byte) line#12
(byte) line#13
(byte) line#14
(byte) line#15
(byte) line#16
(byte) line#2
(byte) line#3
(byte) line#4
(byte) line#5
(byte) line#6
(byte) line#7
(byte) line#8
(byte) line#9
(void()) ln()
(byte/signed word/word/dword/signed dword~) ln::$0
(label) ln::@return
(void()) main()
(byte*~) main::$3
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return

Alias (byte) line#0 = (byte) ch#0 (byte) line#16 (byte) ch#17 
Alias (byte) line#1 = (byte) line#8 
Alias (byte) ch#1 = (byte) ch#10 
Alias (byte) line#2 = (byte) line#9 
Alias (byte) ch#11 = (byte) ch#3 
Alias (byte) line#10 = (byte) line#3 (byte) line#11 (byte) line#4 
Alias (byte) ch#12 = (byte) ch#5 (byte) ch#13 (byte) ch#6 
Alias (byte) line#13 = (byte) line#5 (byte/signed word/word/dword/signed dword~) ln::$0 (byte) ch#7 (byte) ch#14 (byte) line#6 (byte) ch#8 
Alias (byte) line#14 = (byte) line#7 
Alias (byte) ch#15 = (byte) ch#9 
Successful SSA optimization Pass2AliasElimination
Redundant Phi (byte) line#15 (byte) line#0
Redundant Phi (byte) ch#16 (byte) line#0
Redundant Phi (byte) line#1 (byte) line#13
Redundant Phi (byte) ch#1 (byte) line#13
Redundant Phi (byte) line#2 (byte) line#13
Redundant Phi (byte) ch#11 (byte) line#13
Redundant Phi (byte) line#10 (byte) line#13
Redundant Phi (byte) ch#12 (byte) line#13
Redundant Phi (byte) line#14 (byte) line#10
Redundant Phi (byte) ch#15 (byte) ch#12
Successful SSA optimization Pass2RedundantPhiElimination
Constant (const byte*) SCREEN#0 = ((byte*))$400
Constant (const byte) line#0 = $40
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) main::$3 = SCREEN#0+$28
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused variable (byte) ch#2 and assignment [1] (byte) ch#2 ← ++ (byte) line#13
Eliminating unused variable (byte) ch#4 and assignment [3] (byte) ch#4 ← ++ (byte) line#13
Successful SSA optimization PassNEliminateUnusedVars
Culled Empty Block (label) @3
Successful SSA optimization Pass2CullEmptyBlocks
Inlining constant with var siblings (const byte) line#0
Constant inlined main::$3 = (const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined line#0 = (byte/signed byte/word/signed word/dword/signed dword) $40
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to ln:5 ln:7 ln:9 

Created 1 initial phi equivalence classes
Coalesced [6] line#17 ← line#13
Coalesced (already) [8] line#18 ← line#13
Coalesced down to 1 phi equivalence classes
Renumbering block @2 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call ln 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call ln 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call ln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] *((const byte*) SCREEN#0) ← (byte) line#13
  [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28) ← (byte) line#13
  to:main::@return
main::@return: scope:[main]  from main::@3
  [12] return 
  to:@return
ln: scope:[ln]  from main main::@1 main::@2
  [13] (byte) line#12 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) $40 main::@1/(byte) line#13 main::@2/(byte) line#13 )
  [14] (byte) line#13 ← (byte) line#12 + (byte/signed byte/word/signed word/dword/signed dword) 2
  to:ln::@return
ln::@return: scope:[ln]  from ln
  [15] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(byte) ch
(byte) line
(byte) line#12 6.0
(byte) line#13 1.25
(void()) ln()
(void()) main()

Initial phi equivalence classes
[ line#12 line#13 ]
Complete equivalence classes
[ line#12 line#13 ]
Allocated zp ZP_BYTE:2 [ line#12 line#13 ]

INITIAL ASM
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
  .label line = 2
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] call ln 
  //SEG12 [13] phi from main to ln [phi:main->ln]
  ln_from_main:
  //SEG13 [13] phi (byte) line#12 = (byte/signed byte/word/signed word/dword/signed dword) $40 [phi:main->ln#0] -- vbuz1=vbuc1 
    lda #$40
    sta line
    jsr ln
  //SEG14 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [7] call ln 
  //SEG17 [13] phi from main::@1 to ln [phi:main::@1->ln]
  ln_from_b1:
  //SEG18 [13] phi (byte) line#12 = (byte) line#13 [phi:main::@1->ln#0] -- register_copy 
    jsr ln
  //SEG19 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG20 main::@2
  b2:
  //SEG21 [9] call ln 
  //SEG22 [13] phi from main::@2 to ln [phi:main::@2->ln]
  ln_from_b2:
  //SEG23 [13] phi (byte) line#12 = (byte) line#13 [phi:main::@2->ln#0] -- register_copy 
    jsr ln
    jmp b3
  //SEG24 main::@3
  b3:
  //SEG25 [10] *((const byte*) SCREEN#0) ← (byte) line#13 -- _deref_pbuc1=vbuz1 
    lda line
    sta SCREEN
  //SEG26 [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28) ← (byte) line#13 -- _deref_pbuc1=vbuz1 
    lda line
    sta SCREEN+$28
    jmp breturn
  //SEG27 main::@return
  breturn:
  //SEG28 [12] return 
    rts
}
//SEG29 ln
ln: {
  //SEG30 [14] (byte) line#13 ← (byte) line#12 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda line
    clc
    adc #2
    sta line
    jmp breturn
  //SEG31 ln::@return
  breturn:
  //SEG32 [15] return 
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ line#12 line#13 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 7.25: zp ZP_BYTE:2 [ line#12 line#13 ] 
Uplift Scope [main] 
Uplift Scope [ln] 

Uplifting [] best 71 combination reg byte a [ line#12 line#13 ] 
Uplifting [main] best 71 combination 
Uplifting [ln] best 71 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] call ln 
  //SEG12 [13] phi from main to ln [phi:main->ln]
  ln_from_main:
  //SEG13 [13] phi (byte) line#12 = (byte/signed byte/word/signed word/dword/signed dword) $40 [phi:main->ln#0] -- vbuaa=vbuc1 
    lda #$40
    jsr ln
  //SEG14 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [7] call ln 
  //SEG17 [13] phi from main::@1 to ln [phi:main::@1->ln]
  ln_from_b1:
  //SEG18 [13] phi (byte) line#12 = (byte) line#13 [phi:main::@1->ln#0] -- register_copy 
    jsr ln
  //SEG19 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG20 main::@2
  b2:
  //SEG21 [9] call ln 
  //SEG22 [13] phi from main::@2 to ln [phi:main::@2->ln]
  ln_from_b2:
  //SEG23 [13] phi (byte) line#12 = (byte) line#13 [phi:main::@2->ln#0] -- register_copy 
    jsr ln
    jmp b3
  //SEG24 main::@3
  b3:
  //SEG25 [10] *((const byte*) SCREEN#0) ← (byte) line#13 -- _deref_pbuc1=vbuaa 
    sta SCREEN
  //SEG26 [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28) ← (byte) line#13 -- _deref_pbuc1=vbuaa 
    sta SCREEN+$28
    jmp breturn
  //SEG27 main::@return
  breturn:
  //SEG28 [12] return 
    rts
}
//SEG29 ln
ln: {
  //SEG30 [14] (byte) line#13 ← (byte) line#12 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuaa=vbuaa_plus_2 
    clc
    adc #2
    jmp breturn
  //SEG31 ln::@return
  breturn:
  //SEG32 [15] return 
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_main:
Removing instruction ln_from_b1:
Removing instruction b2_from_b1:
Removing instruction ln_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction ln_from_main:
Removing instruction b1:
Removing instruction b2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) $400
(byte) ch
(byte) line
(byte) line#12 reg byte a 6.0
(byte) line#13 reg byte a 1.25
(void()) ln()
(label) ln::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return

reg byte a [ line#12 line#13 ]


FINAL ASSEMBLER
Score: 44

//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
  //SEG11 [5] call ln 
  //SEG12 [13] phi from main to ln [phi:main->ln]
  //SEG13 [13] phi (byte) line#12 = (byte/signed byte/word/signed word/dword/signed dword) $40 [phi:main->ln#0] -- vbuaa=vbuc1 
    lda #$40
    jsr ln
  //SEG14 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG15 main::@1
  //SEG16 [7] call ln 
  //SEG17 [13] phi from main::@1 to ln [phi:main::@1->ln]
  //SEG18 [13] phi (byte) line#12 = (byte) line#13 [phi:main::@1->ln#0] -- register_copy 
    jsr ln
  //SEG19 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG20 main::@2
  //SEG21 [9] call ln 
  //SEG22 [13] phi from main::@2 to ln [phi:main::@2->ln]
  //SEG23 [13] phi (byte) line#12 = (byte) line#13 [phi:main::@2->ln#0] -- register_copy 
    jsr ln
  //SEG24 main::@3
  //SEG25 [10] *((const byte*) SCREEN#0) ← (byte) line#13 -- _deref_pbuc1=vbuaa 
    sta SCREEN
  //SEG26 [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28) ← (byte) line#13 -- _deref_pbuc1=vbuaa 
    sta SCREEN+$28
  //SEG27 main::@return
  //SEG28 [12] return 
    rts
}
//SEG29 ln
ln: {
  //SEG30 [14] (byte) line#13 ← (byte) line#12 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuaa=vbuaa_plus_2 
    clc
    adc #2
  //SEG31 ln::@return
  //SEG32 [15] return 
    rts
}

