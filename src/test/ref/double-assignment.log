
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte) main::a#0 ← (byte) 0
  (byte) main::b#0 ← (byte) 0
  (byte) main::b#1 ← (number) $c
  (byte) main::a#1 ← (byte) main::b#1
  *((const byte*) main::screen + (number) 0) ← (byte) main::a#1
  *((const byte*) main::screen + (number) 1) ← (byte) main::b#1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(label) main::@return
(byte) main::a
(byte) main::a#0
(byte) main::a#1
(byte) main::b
(byte) main::b#0
(byte) main::b#1
(const byte*) main::screen = (byte*)(number) $400

Adding number conversion cast (unumber) $c in (byte) main::b#1 ← (number) $c
Adding number conversion cast (unumber) 0 in *((const byte*) main::screen + (number) 0) ← (byte) main::a#1
Adding number conversion cast (unumber) 1 in *((const byte*) main::screen + (number) 1) ← (byte) main::b#1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) main::b#1 ← (unumber)(number) $c
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $c
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::a#1 = main::b#1 
Successful SSA optimization Pass2AliasElimination
Constant (const byte) main::a#0 = 0
Constant (const byte) main::b#0 = 0
Constant (const byte) main::a#1 = $c
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::screen in [3] *((const byte*) main::screen + (byte) 0) ← (const byte) main::a#1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) main::a#0
Eliminating unused constant (const byte) main::b#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Consolidated array index constant in *(main::screen+1)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const byte*) main::screen) ← (const byte) main::a#1
  [1] *((const byte*) main::screen+(byte) 1) ← (const byte) main::a#1
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::a
(byte) main::b

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test that a double-assignment works.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const a = $c
    .label screen = $400
    // [0] *((const byte*) main::screen) ← (const byte) main::a#1 -- _deref_pbuc1=vbuc2 
    lda #a
    sta screen
    // [1] *((const byte*) main::screen+(byte) 1) ← (const byte) main::a#1 -- _deref_pbuc1=vbuc2 
    lda #a
    sta screen+1
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const byte*) main::screen) ← (const byte) main::a#1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const byte*) main::screen+(byte) 1) ← (const byte) main::a#1 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 21 combination 
Uplifting [] best 21 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test that a double-assignment works.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const a = $c
    .label screen = $400
    // [0] *((const byte*) main::screen) ← (const byte) main::a#1 -- _deref_pbuc1=vbuc2 
    lda #a
    sta screen
    // [1] *((const byte*) main::screen+(byte) 1) ← (const byte) main::a#1 -- _deref_pbuc1=vbuc2 
    lda #a
    sta screen+1
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #a
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@return
(byte) main::a
(const byte) main::a#1 a = (byte) $c
(byte) main::b
(const byte*) main::screen = (byte*) 1024



FINAL ASSEMBLER
Score: 16

  // File Comments
// Test that a double-assignment works.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const a = $c
    .label screen = $400
    // screen[0] = a
    // [0] *((const byte*) main::screen) ← (const byte) main::a#1 -- _deref_pbuc1=vbuc2 
    lda #a
    sta screen
    // screen[1] = b
    // [1] *((const byte*) main::screen+(byte) 1) ← (const byte) main::a#1 -- _deref_pbuc1=vbuc2 
    sta screen+1
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

