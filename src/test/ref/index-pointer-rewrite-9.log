
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  main::$0 = main::i#2 < $19
  if(main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  main::$1 = main::i#3 * SIZEOF_STRUCT_BALL
  main::$4 = (byte*)balls + main::$1
  main::$5 = (byte*)balls + main::$1
  main::$6 = (byte*)balls + main::$1
  main::$6[OFFSET_STRUCT_BALL_POS] = main::$4[OFFSET_STRUCT_BALL_POS] + main::$5[OFFSET_STRUCT_BALL_VEL]
  main::$2 = main::i#3 * SIZEOF_STRUCT_BALL
  main::$7 = (byte*)balls + main::$2
  main::$8 = (byte*)balls + main::$2
  main::$8[OFFSET_STRUCT_BALL_VEL] = main::$7[OFFSET_STRUCT_BALL_VEL] + $a
  main::$3 = main::i#3 * SIZEOF_STRUCT_BALL
  main::$9 = (byte*)balls + main::$3
  main::$9[OFFSET_STRUCT_BALL_SYM] = '*'
  main::i#1 = ++ main::i#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant byte OFFSET_STRUCT_BALL_POS = 0
constant byte OFFSET_STRUCT_BALL_SYM = 2
constant byte OFFSET_STRUCT_BALL_VEL = 1
constant byte SIZEOF_STRUCT_BALL = 3
void __start()
constant struct Ball* balls[$19]  = { fill( $19, 0) }
void main()
bool~ main::$0
word~ main::$1
word~ main::$2
word~ main::$3
byte*~ main::$4
byte*~ main::$5
byte*~ main::$6
byte*~ main::$7
byte*~ main::$8
byte*~ main::$9
word main::i
word main::i#0
word main::i#1
word main::i#2
word main::i#3

Adding number conversion cast (unumber) $19 in main::$0 = main::i#2 < $19
Adding number conversion cast (unumber) $a in main::$8[OFFSET_STRUCT_BALL_VEL] = main::$7[OFFSET_STRUCT_BALL_VEL] + $a
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $19
Simplifying constant integer cast $a
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $a
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Identified duplicate assignment right side [7] main::$5 = (byte*)balls + main::$1
Identified duplicate assignment right side [8] main::$6 = (byte*)balls + main::$1
Identified duplicate assignment right side [10] main::$2 = main::i#2 * SIZEOF_STRUCT_BALL
Identified duplicate assignment right side [12] main::$8 = (byte*)balls + main::$2
Identified duplicate assignment right side [14] main::$3 = main::i#2 * SIZEOF_STRUCT_BALL
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition main::$0 [3] if(main::i#2<$19) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::$4 in [8] main::$6[OFFSET_STRUCT_BALL_POS] = main::$4[OFFSET_STRUCT_BALL_POS] + main::$5[OFFSET_STRUCT_BALL_VEL]
Simplifying expression containing zero main::$6 in [8] main::$6[OFFSET_STRUCT_BALL_POS] = *main::$4 + main::$5[OFFSET_STRUCT_BALL_VEL]
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant OFFSET_STRUCT_BALL_POS
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Alias main::$5 = main::$4 main::$6 
Alias main::$2 = main::$1 main::$3 
Alias main::$8 = main::$7 
Successful SSA optimization Pass2AliasElimination
Identified duplicate assignment right side [8] main::$8 = (byte*)balls + main::$2
Identified duplicate assignment right side [12] main::$9 = (byte*)balls + main::$2
Successful SSA optimization Pass2DuplicateRValueIdentification
Alias main::$8 = main::$5 main::$9 
Successful SSA optimization Pass2AliasElimination
Rewriting multiplication to use shift and addition[2] main::$2 = main::i#2 * SIZEOF_STRUCT_BALL
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Alias main::$2 = main::$11 
Successful SSA optimization Pass2AliasElimination
Eliminating unused constant SIZEOF_STRUCT_BALL
Successful SSA optimization PassNEliminateUnusedVars
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $19
Successful SSA optimization PassNFinalizeNumberTypeConversions
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [11] main::i#4 = main::i#1
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::i#2 = phi( main/0, main::@2/main::i#1 )
  [2] if(main::i#2<$19) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [4] main::$10 = main::i#2 << 1
  [5] main::$2 = main::$10 + main::i#2
  [6] main::$8 = (byte*)balls + main::$2
  [7] *main::$8 = *main::$8 + main::$8[OFFSET_STRUCT_BALL_VEL]
  [8] main::$8[OFFSET_STRUCT_BALL_VEL] = main::$8[OFFSET_STRUCT_BALL_VEL] + $a
  [9] main::$8[OFFSET_STRUCT_BALL_SYM] = '*'
  [10] main::i#1 = ++ main::i#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
word~ main::$10 22.0
word~ main::$2 22.0
byte*~ main::$8 25.666666666666668
word main::i
word main::i#1 22.0
word main::i#2 6.875

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$10 to live range equivalence class [ main::$10 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable main::$8 to live range equivalence class [ main::$8 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$10 ]
[ main::$2 ]
[ main::$8 ]
Allocated zp[2]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:4 [ main::$10 ]
Allocated zp[2]:6 [ main::$2 ]
Allocated zp[2]:8 [ main::$8 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] if(main::i#2<$19) goto main::@2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [4] main::$10 = main::i#2 << 1 [ main::i#2 main::$10 ] (  [ main::i#2 main::$10 ] { }  ) always clobbers reg byte a 
Statement [5] main::$2 = main::$10 + main::i#2 [ main::i#2 main::$2 ] (  [ main::i#2 main::$2 ] { }  ) always clobbers reg byte a 
Statement [6] main::$8 = (byte*)balls + main::$2 [ main::i#2 main::$8 ] (  [ main::i#2 main::$8 ] { }  ) always clobbers reg byte a 
Statement [7] *main::$8 = *main::$8 + main::$8[OFFSET_STRUCT_BALL_VEL] [ main::i#2 main::$8 ] (  [ main::i#2 main::$8 ] { }  ) always clobbers reg byte a reg byte y 
Statement [8] main::$8[OFFSET_STRUCT_BALL_VEL] = main::$8[OFFSET_STRUCT_BALL_VEL] + $a [ main::i#2 main::$8 ] (  [ main::i#2 main::$8 ] { }  ) always clobbers reg byte a reg byte y 
Statement [9] main::$8[OFFSET_STRUCT_BALL_SYM] = '*' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ main::i#2 main::i#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ main::$10 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ main::$2 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ main::$8 ] : zp[2]:8 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 28.88: zp[2]:2 [ main::i#2 main::i#1 ] 25.67: zp[2]:8 [ main::$8 ] 22: zp[2]:4 [ main::$10 ] 22: zp[2]:6 [ main::$2 ] 
Uplift Scope [Ball] 
Uplift Scope [] 

Uplifting [main] best 1516 combination zp[2]:2 [ main::i#2 main::i#1 ] zp[2]:8 [ main::$8 ] zp[2]:4 [ main::$10 ] zp[2]:6 [ main::$2 ] 
Uplifting [Ball] best 1516 combination 
Uplifting [] best 1516 combination 
Coalescing zero page register [ zp[2]:4 [ main::$10 ] ] with [ zp[2]:6 [ main::$2 ] ] - score: 1
Coalescing zero page register [ zp[2]:4 [ main::$10 main::$2 ] ] with [ zp[2]:8 [ main::$8 ] ] - score: 1

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test array index pointer rewriting
// struct array with 16bit index
  // Upstart
  // Commodore 64 PRG executable file
.file [name="index-pointer-rewrite-9.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_BALL_VEL = 1
  .const OFFSET_STRUCT_BALL_SYM = 2
.segment Code
  // main
main: {
    .label __2 = 4
    .label __8 = 4
    .label i = 2
    .label __10 = 4
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::i#2<$19) goto main::@2 -- vwuz1_lt_vbuc1_then_la1 
    lda.z i+1
    bne !+
    lda.z i
    cmp #$19
    bcc __b2
  !:
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] main::$10 = main::i#2 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z i
    asl
    sta.z __10
    lda.z i+1
    rol
    sta.z __10+1
    // [5] main::$2 = main::$10 + main::i#2 -- vwuz1=vwuz1_plus_vwuz2 
    clc
    lda.z __2
    adc.z i
    sta.z __2
    lda.z __2+1
    adc.z i+1
    sta.z __2+1
    // [6] main::$8 = (byte*)balls + main::$2 -- pbuz1=pbuc1_plus_vwuz1 
    lda.z __8
    clc
    adc #<balls
    sta.z __8
    lda.z __8+1
    adc #>balls
    sta.z __8+1
    // [7] *main::$8 = *main::$8 + main::$8[OFFSET_STRUCT_BALL_VEL] -- _deref_pbuz1=_deref_pbuz1_plus_pbuz1_derefidx_vbuc1 
    ldy #0
    lda (__8),y
    ldy #OFFSET_STRUCT_BALL_VEL
    clc
    adc (__8),y
    ldy #0
    sta (__8),y
    // [8] main::$8[OFFSET_STRUCT_BALL_VEL] = main::$8[OFFSET_STRUCT_BALL_VEL] + $a -- pbuz1_derefidx_vbuc1=pbuz1_derefidx_vbuc1_plus_vbuc2 
    lda #$a
    ldy #OFFSET_STRUCT_BALL_VEL
    clc
    adc (__8),y
    sta (__8),y
    // [9] main::$8[OFFSET_STRUCT_BALL_SYM] = '*' -- pbuz1_derefidx_vbuc1=vbuc2 
    lda #'*'
    ldy #OFFSET_STRUCT_BALL_SYM
    sta (__8),y
    // [10] main::i#1 = ++ main::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  balls: .fill 3*$19, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
constant byte OFFSET_STRUCT_BALL_SYM = 2
constant byte OFFSET_STRUCT_BALL_VEL = 1
constant struct Ball* balls[$19]  = { fill( $19, 0) }
void main()
word~ main::$10 zp[2]:4 22.0
word~ main::$2 zp[2]:4 22.0
byte*~ main::$8 zp[2]:4 25.666666666666668
word main::i
word main::i#1 i zp[2]:2 22.0
word main::i#2 i zp[2]:2 6.875

zp[2]:2 [ main::i#2 main::i#1 ]
zp[2]:4 [ main::$10 main::$2 main::$8 ]


FINAL ASSEMBLER
Score: 1436

  // File Comments
// Test array index pointer rewriting
// struct array with 16bit index
  // Upstart
  // Commodore 64 PRG executable file
.file [name="index-pointer-rewrite-9.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_BALL_VEL = 1
  .const OFFSET_STRUCT_BALL_SYM = 2
.segment Code
  // main
main: {
    .label __2 = 4
    .label __8 = 4
    .label i = 2
    .label __10 = 4
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
    // main::@1
  __b1:
    // for(unsigned short i=0;i<NUM_BALLS;i++)
    // [2] if(main::i#2<$19) goto main::@2 -- vwuz1_lt_vbuc1_then_la1 
    lda.z i+1
    bne !+
    lda.z i
    cmp #$19
    bcc __b2
  !:
    // main::@return
    // }
    // [3] return 
    rts
    // main::@2
  __b2:
    // balls[i].pos += balls[i].vel
    // [4] main::$10 = main::i#2 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z i
    asl
    sta.z __10
    lda.z i+1
    rol
    sta.z __10+1
    // [5] main::$2 = main::$10 + main::i#2 -- vwuz1=vwuz1_plus_vwuz2 
    clc
    lda.z __2
    adc.z i
    sta.z __2
    lda.z __2+1
    adc.z i+1
    sta.z __2+1
    // [6] main::$8 = (byte*)balls + main::$2 -- pbuz1=pbuc1_plus_vwuz1 
    lda.z __8
    clc
    adc #<balls
    sta.z __8
    lda.z __8+1
    adc #>balls
    sta.z __8+1
    // [7] *main::$8 = *main::$8 + main::$8[OFFSET_STRUCT_BALL_VEL] -- _deref_pbuz1=_deref_pbuz1_plus_pbuz1_derefidx_vbuc1 
    ldy #0
    lda (__8),y
    ldy #OFFSET_STRUCT_BALL_VEL
    clc
    adc (__8),y
    ldy #0
    sta (__8),y
    // balls[i].vel += 10
    // [8] main::$8[OFFSET_STRUCT_BALL_VEL] = main::$8[OFFSET_STRUCT_BALL_VEL] + $a -- pbuz1_derefidx_vbuc1=pbuz1_derefidx_vbuc1_plus_vbuc2 
    lda #$a
    ldy #OFFSET_STRUCT_BALL_VEL
    clc
    adc (__8),y
    sta (__8),y
    // balls[i].sym ='*'
    // [9] main::$8[OFFSET_STRUCT_BALL_SYM] = '*' -- pbuz1_derefidx_vbuc1=vbuc2 
    lda #'*'
    ldy #OFFSET_STRUCT_BALL_SYM
    sta (__8),y
    // for(unsigned short i=0;i<NUM_BALLS;i++)
    // [10] main::i#1 = ++ main::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  balls: .fill 3*$19, 0

