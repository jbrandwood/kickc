Fixing pointer array-indexing *((word*) main::SCREEN + (number) 0)
Fixing pointer array-indexing *((word*) main::SCREEN + (number) 2)
Identified constant variable (word*) main::SCREEN
Culled Empty Block (label) @1
Culled Empty Block (label) @2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (word) w1#0 ← (word) 0
  (word) w2#0 ← (word) 0
  to:@3

(void()) main()
main: scope:[main]  from @3
  (word) w2#16 ← phi( @3/(word) w2#15 )
  (word) w1#14 ← phi( @3/(word) w1#16 )
  call incw1 
  to:main::@1
main::@1: scope:[main]  from main
  (word) w2#13 ← phi( main/(word) w2#16 )
  (word) w1#7 ← phi( main/(word) w1#5 )
  (word) w1#1 ← (word) w1#7
  call incw2 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (word) w1#15 ← phi( main::@1/(word) w1#1 )
  (word) w2#7 ← phi( main::@1/(word) w2#5 )
  (word) w2#1 ← (word) w2#7
  call incw1 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (word) w2#14 ← phi( main::@2/(word) w2#1 )
  (word) w1#8 ← phi( main::@2/(word) w1#5 )
  (word) w1#2 ← (word) w1#8
  call incw2 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (word) w1#9 ← phi( main::@3/(word) w1#2 )
  (word) w2#8 ← phi( main::@3/(word) w2#5 )
  (word) w2#2 ← (word) w2#8
  (number~) main::$4 ← (number) 0 * (const byte) SIZEOF_WORD
  *((const word*) main::SCREEN + (number~) main::$4) ← (word) w1#9
  (number~) main::$5 ← (number) 2 * (const byte) SIZEOF_WORD
  *((const word*) main::SCREEN + (number~) main::$5) ← (word) w2#2
  to:main::@return
main::@return: scope:[main]  from main::@4
  (word) w2#9 ← phi( main::@4/(word) w2#2 )
  (word) w1#10 ← phi( main::@4/(word) w1#9 )
  (word) w1#3 ← (word) w1#10
  (word) w2#3 ← (word) w2#9
  return 
  to:@return

(void()) incw1()
incw1: scope:[incw1]  from main main::@2
  (word) w1#11 ← phi( main/(word) w1#14 main::@2/(word) w1#15 )
  (word) w1#4 ← ++ (word) w1#11
  to:incw1::@return
incw1::@return: scope:[incw1]  from incw1
  (word) w1#12 ← phi( incw1/(word) w1#4 )
  (word) w1#5 ← (word) w1#12
  return 
  to:@return

(void()) incw2()
incw2: scope:[incw2]  from main::@1 main::@3
  (word) w2#10 ← phi( main::@1/(word) w2#13 main::@3/(word) w2#14 )
  (word) w2#4 ← ++ (word) w2#10
  to:incw2::@return
incw2::@return: scope:[incw2]  from incw2
  (word) w2#11 ← phi( incw2/(word) w2#4 )
  (word) w2#5 ← (word) w2#11
  return 
  to:@return
@3: scope:[]  from @begin
  (word) w2#15 ← phi( @begin/(word) w2#0 )
  (word) w1#16 ← phi( @begin/(word) w1#0 )
  call main 
  to:@4
@4: scope:[]  from @3
  (word) w2#12 ← phi( @3/(word) w2#3 )
  (word) w1#13 ← phi( @3/(word) w1#3 )
  (word) w1#6 ← (word) w1#13
  (word) w2#6 ← (word) w2#12
  to:@end
@end: scope:[]  from @4

SYMBOL TABLE SSA
(label) @3
(label) @4
(label) @begin
(label) @end
(const byte) SIZEOF_WORD = (byte) 2
(void()) incw1()
(label) incw1::@return
(void()) incw2()
(label) incw2::@return
(void()) main()
(number~) main::$4
(number~) main::$5
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(const word*) main::SCREEN = (word*)(number) $400
(word) w1
(word) w1#0
(word) w1#1
(word) w1#10
(word) w1#11
(word) w1#12
(word) w1#13
(word) w1#14
(word) w1#15
(word) w1#16
(word) w1#2
(word) w1#3
(word) w1#4
(word) w1#5
(word) w1#6
(word) w1#7
(word) w1#8
(word) w1#9
(word) w2
(word) w2#0
(word) w2#1
(word) w2#10
(word) w2#11
(word) w2#12
(word) w2#13
(word) w2#14
(word) w2#15
(word) w2#16
(word) w2#2
(word) w2#3
(word) w2#4
(word) w2#5
(word) w2#6
(word) w2#7
(word) w2#8
(word) w2#9

Adding number conversion cast (unumber) 0 in (number~) main::$4 ← (number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$4 in (number~) main::$4 ← (unumber)(number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 2 in (number~) main::$5 ← (number) 2 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$5 in (number~) main::$5 ← (unumber)(number) 2 * (const byte) SIZEOF_WORD
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (word*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$4 ← (byte) 0 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) main::$5 ← (byte) 2 * (const byte) SIZEOF_WORD
Alias w2#13 = w2#16 
Alias w1#1 = w1#7 w1#15 
Alias w2#1 = w2#7 w2#14 
Alias w1#10 = w1#2 w1#8 w1#9 w1#3 
Alias w2#2 = w2#8 w2#9 w2#3 
Alias w1#12 = w1#4 w1#5 
Alias w2#11 = w2#4 w2#5 
Alias w1#0 = w1#16 
Alias w2#0 = w2#15 
Alias w1#13 = w1#6 
Alias w2#12 = w2#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) w1#14 (word) w1#0
Identical Phi Values (word) w2#13 (word) w2#0
Identical Phi Values (word) w1#1 (word) w1#12
Identical Phi Values (word) w2#1 (word) w2#11
Identical Phi Values (word) w1#10 (word) w1#12
Identical Phi Values (word) w2#2 (word) w2#11
Identical Phi Values (word) w1#13 (word) w1#10
Identical Phi Values (word) w2#12 (word) w2#2
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [11] (byte~) main::$4 ← (byte) 0 * (const byte) SIZEOF_WORD
Constant right-side identified [13] (byte~) main::$5 ← (byte) 2 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) w1#0 = 0
Constant (const word) w2#0 = 0
Constant (const byte) main::$4 = 0*SIZEOF_WORD
Constant (const byte) main::$5 = 2*SIZEOF_WORD
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_WORD in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::SCREEN in [12] *((const word*) main::SCREEN + (const byte) main::$4) ← (word) w1#12
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) main::$4
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings (const word) w1#0
Inlining constant with var siblings (const word) w2#0
Constant inlined main::$5 = (byte) 2*(const byte) SIZEOF_WORD
Constant inlined w1#0 = (word) 0
Constant inlined w2#0 = (word) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN+2*SIZEOF_WORD)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @4
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to incw1:6 incw2:8 incw1:10 incw2:12 

Created 2 initial phi equivalence classes
Coalesced [9] w1#17 ← w1#12
Coalesced [11] w2#17 ← w2#11
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @4
Renumbering block @3 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call incw1 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call incw2 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call incw1 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] phi()
  [11] call incw2 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [12] *((const word*) main::SCREEN) ← (word) w1#12
  [13] *((const word*) main::SCREEN+(byte) 2*(const byte) SIZEOF_WORD) ← (word) w2#11
  to:main::@return
main::@return: scope:[main]  from main::@4
  [14] return 
  to:@return

(void()) incw2()
incw2: scope:[incw2]  from main::@1 main::@3
  [15] (word) w2#10 ← phi( main::@1/(word) 0 main::@3/(word) w2#11 )
  [16] (word) w2#11 ← ++ (word) w2#10
  to:incw2::@return
incw2::@return: scope:[incw2]  from incw2
  [17] return 
  to:@return

(void()) incw1()
incw1: scope:[incw1]  from main main::@2
  [18] (word) w1#11 ← phi( main/(word) 0 main::@2/(word) w1#12 )
  [19] (word) w1#12 ← ++ (word) w1#11
  to:incw1::@return
incw1::@return: scope:[incw1]  from incw1
  [20] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) incw1()
(void()) incw2()
(void()) main()
(word) w1
(word) w1#11 112.0
(word) w1#12 13.666666666666666
(word) w2
(word) w2#10 112.0
(word) w2#11 15.375

Initial phi equivalence classes
[ w2#10 w2#11 ]
[ w1#11 w1#12 ]
Complete equivalence classes
[ w2#10 w2#11 ]
[ w1#11 w1#12 ]
Allocated zp[2]:2 [ w2#10 w2#11 ]
Allocated zp[2]:4 [ w1#11 w1#12 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Live ranges were not functioning properly, when multiple method calls were chained - each modifying different vars.
// w1 and w2 ended up having the same zero-page register as their live range was not propagated properly
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  .label w1 = 4
  .label w2 = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    // [5] call incw1 
    // [18] phi from main to incw1 [phi:main->incw1]
  incw1_from_main:
    // [18] phi (word) w1#11 = (word) 0 [phi:main->incw1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z w1
    lda #>0
    sta.z w1+1
    jsr incw1
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call incw2 
    // [15] phi from main::@1 to incw2 [phi:main::@1->incw2]
  incw2_from___b1:
    // [15] phi (word) w2#10 = (word) 0 [phi:main::@1->incw2#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z w2
    lda #>0
    sta.z w2+1
    jsr incw2
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [9] call incw1 
    // [18] phi from main::@2 to incw1 [phi:main::@2->incw1]
  incw1_from___b2:
    // [18] phi (word) w1#11 = (word) w1#12 [phi:main::@2->incw1#0] -- register_copy 
    jsr incw1
    // [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [11] call incw2 
    // [15] phi from main::@3 to incw2 [phi:main::@3->incw2]
  incw2_from___b3:
    // [15] phi (word) w2#10 = (word) w2#11 [phi:main::@3->incw2#0] -- register_copy 
    jsr incw2
    jmp __b4
    // main::@4
  __b4:
    // [12] *((const word*) main::SCREEN) ← (word) w1#12 -- _deref_pwuc1=vwuz1 
    lda.z w1
    sta SCREEN
    lda.z w1+1
    sta SCREEN+1
    // [13] *((const word*) main::SCREEN+(byte) 2*(const byte) SIZEOF_WORD) ← (word) w2#11 -- _deref_pwuc1=vwuz1 
    lda.z w2
    sta SCREEN+2*SIZEOF_WORD
    lda.z w2+1
    sta SCREEN+2*SIZEOF_WORD+1
    jmp __breturn
    // main::@return
  __breturn:
    // [14] return 
    rts
}
  // incw2
incw2: {
    // [16] (word) w2#11 ← ++ (word) w2#10 -- vwuz1=_inc_vwuz1 
    inc.z w2
    bne !+
    inc.z w2+1
  !:
    jmp __breturn
    // incw2::@return
  __breturn:
    // [17] return 
    rts
}
  // incw1
incw1: {
    // [19] (word) w1#12 ← ++ (word) w1#11 -- vwuz1=_inc_vwuz1 
    inc.z w1
    bne !+
    inc.z w1+1
  !:
    jmp __breturn
    // incw1::@return
  __breturn:
    // [20] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [12] *((const word*) main::SCREEN) ← (word) w1#12 [ w2#11 ] (  [ w2#11 ] { }  ) always clobbers reg byte a 
Statement [13] *((const word*) main::SCREEN+(byte) 2*(const byte) SIZEOF_WORD) ← (word) w2#11 [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ w2#10 w2#11 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ w1#11 w1#12 ] : zp[2]:4 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 127.38: zp[2]:2 [ w2#10 w2#11 ] 125.67: zp[2]:4 [ w1#11 w1#12 ] 
Uplift Scope [main] 
Uplift Scope [incw1] 
Uplift Scope [incw2] 

Uplifting [] best 147 combination zp[2]:2 [ w2#10 w2#11 ] zp[2]:4 [ w1#11 w1#12 ] 
Uplifting [main] best 147 combination 
Uplifting [incw1] best 147 combination 
Uplifting [incw2] best 147 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Live ranges were not functioning properly, when multiple method calls were chained - each modifying different vars.
// w1 and w2 ended up having the same zero-page register as their live range was not propagated properly
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  .label w1 = 4
  .label w2 = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    // [5] call incw1 
    // [18] phi from main to incw1 [phi:main->incw1]
  incw1_from_main:
    // [18] phi (word) w1#11 = (word) 0 [phi:main->incw1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z w1
    lda #>0
    sta.z w1+1
    jsr incw1
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call incw2 
    // [15] phi from main::@1 to incw2 [phi:main::@1->incw2]
  incw2_from___b1:
    // [15] phi (word) w2#10 = (word) 0 [phi:main::@1->incw2#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z w2
    lda #>0
    sta.z w2+1
    jsr incw2
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [9] call incw1 
    // [18] phi from main::@2 to incw1 [phi:main::@2->incw1]
  incw1_from___b2:
    // [18] phi (word) w1#11 = (word) w1#12 [phi:main::@2->incw1#0] -- register_copy 
    jsr incw1
    // [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [11] call incw2 
    // [15] phi from main::@3 to incw2 [phi:main::@3->incw2]
  incw2_from___b3:
    // [15] phi (word) w2#10 = (word) w2#11 [phi:main::@3->incw2#0] -- register_copy 
    jsr incw2
    jmp __b4
    // main::@4
  __b4:
    // [12] *((const word*) main::SCREEN) ← (word) w1#12 -- _deref_pwuc1=vwuz1 
    lda.z w1
    sta SCREEN
    lda.z w1+1
    sta SCREEN+1
    // [13] *((const word*) main::SCREEN+(byte) 2*(const byte) SIZEOF_WORD) ← (word) w2#11 -- _deref_pwuc1=vwuz1 
    lda.z w2
    sta SCREEN+2*SIZEOF_WORD
    lda.z w2+1
    sta SCREEN+2*SIZEOF_WORD+1
    jmp __breturn
    // main::@return
  __breturn:
    // [14] return 
    rts
}
  // incw2
incw2: {
    // [16] (word) w2#11 ← ++ (word) w2#10 -- vwuz1=_inc_vwuz1 
    inc.z w2
    bne !+
    inc.z w2+1
  !:
    jmp __breturn
    // incw2::@return
  __breturn:
    // [17] return 
    rts
}
  // incw1
incw1: {
    // [19] (word) w1#12 ← ++ (word) w1#11 -- vwuz1=_inc_vwuz1 
    inc.z w1
    bne !+
    inc.z w1+1
  !:
    jmp __breturn
    // incw1::@return
  __breturn:
    // [20] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from_main:
Removing instruction incw2_from___b1:
Removing instruction __b2_from___b1:
Removing instruction incw1_from___b2:
Removing instruction __b3_from___b2:
Removing instruction incw2_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction incw1_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) SIZEOF_WORD = (byte) 2
(void()) incw1()
(label) incw1::@return
(void()) incw2()
(label) incw2::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(const word*) main::SCREEN = (word*) 1024
(word) w1
(word) w1#11 w1 zp[2]:4 112.0
(word) w1#12 w1 zp[2]:4 13.666666666666666
(word) w2
(word) w2#10 w2 zp[2]:2 112.0
(word) w2#11 w2 zp[2]:2 15.375

zp[2]:2 [ w2#10 w2#11 ]
zp[2]:4 [ w1#11 w1#12 ]


FINAL ASSEMBLER
Score: 110

  // File Comments
// Live ranges were not functioning properly, when multiple method calls were chained - each modifying different vars.
// w1 and w2 ended up having the same zero-page register as their live range was not propagated properly
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  .label w1 = 4
  .label w2 = 2
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    // incw1()
    // [5] call incw1 
    // [18] phi from main to incw1 [phi:main->incw1]
    // [18] phi (word) w1#11 = (word) 0 [phi:main->incw1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z w1
    sta.z w1+1
    jsr incw1
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // incw2()
    // [7] call incw2 
    // [15] phi from main::@1 to incw2 [phi:main::@1->incw2]
    // [15] phi (word) w2#10 = (word) 0 [phi:main::@1->incw2#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z w2
    sta.z w2+1
    jsr incw2
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // incw1()
    // [9] call incw1 
    // [18] phi from main::@2 to incw1 [phi:main::@2->incw1]
    // [18] phi (word) w1#11 = (word) w1#12 [phi:main::@2->incw1#0] -- register_copy 
    jsr incw1
    // [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // incw2()
    // [11] call incw2 
    // [15] phi from main::@3 to incw2 [phi:main::@3->incw2]
    // [15] phi (word) w2#10 = (word) w2#11 [phi:main::@3->incw2#0] -- register_copy 
    jsr incw2
    // main::@4
    // SCREEN[0] = w1
    // [12] *((const word*) main::SCREEN) ← (word) w1#12 -- _deref_pwuc1=vwuz1 
    lda.z w1
    sta SCREEN
    lda.z w1+1
    sta SCREEN+1
    // SCREEN[2] = w2
    // [13] *((const word*) main::SCREEN+(byte) 2*(const byte) SIZEOF_WORD) ← (word) w2#11 -- _deref_pwuc1=vwuz1 
    lda.z w2
    sta SCREEN+2*SIZEOF_WORD
    lda.z w2+1
    sta SCREEN+2*SIZEOF_WORD+1
    // main::@return
    // }
    // [14] return 
    rts
}
  // incw2
incw2: {
    // w2++;
    // [16] (word) w2#11 ← ++ (word) w2#10 -- vwuz1=_inc_vwuz1 
    inc.z w2
    bne !+
    inc.z w2+1
  !:
    // incw2::@return
    // }
    // [17] return 
    rts
}
  // incw1
incw1: {
    // w1++;
    // [19] (word) w1#12 ← ++ (word) w1#11 -- vwuz1=_inc_vwuz1 
    inc.z w1
    bne !+
    inc.z w1+1
  !:
    // incw1::@return
    // }
    // [20] return 
    rts
}
  // File Data

