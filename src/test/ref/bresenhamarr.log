Eliminating unused variable with no statement main::$0
Eliminating unused variable with no statement main::$1
Eliminating unused variable with no statement main::$2
Eliminating unused variable with no statement main::$4

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::xd#0 = main::x1 - main::x0
  main::yd#0 = main::y1 - main::y0
  main::x#0 = main::x0
  main::y#0 = main::y0
  main::e#0 = main::yd#0 / 2
  main::$3 = main::y#0 * $28
  main::idx#0 = main::x#0 + main::$3
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::y#3 = phi( main/main::y#0, main::@2/main::y#4 )
  main::xd#1 = phi( main/main::xd#0, main::@2/main::xd#3 )
  main::yd#1 = phi( main/main::yd#0, main::@2/main::yd#2 )
  main::e#3 = phi( main/main::e#0, main::@2/main::e#5 )
  main::x#2 = phi( main/main::x#0, main::@2/main::x#3 )
  main::idx#3 = phi( main/main::idx#0, main::@2/main::idx#5 )
  main::screen[main::idx#3] = main::STAR
  main::$5 = main::x#2 + 1
  main::x#1 = main::$5
  main::$6 = main::idx#3 + 1
  main::idx#1 = main::$6
  main::$7 = main::e#3 + main::yd#1
  main::e#1 = main::$7
  main::$8 = main::xd#1 < main::e#1
  main::$9 = ! main::$8
  if(main::$9) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  main::y#4 = phi( main::@1/main::y#3, main::@3/main::y#1 )
  main::xd#3 = phi( main::@1/main::xd#1, main::@3/main::xd#2 )
  main::yd#2 = phi( main::@1/main::yd#1, main::@3/main::yd#3 )
  main::e#5 = phi( main::@1/main::e#1, main::@3/main::e#2 )
  main::idx#5 = phi( main::@1/main::idx#1, main::@3/main::idx#2 )
  main::x#3 = phi( main::@1/main::x#1, main::@3/main::x#4 )
  main::$13 = main::x1 + 1
  main::$14 = main::x#3 < main::$13
  if(main::$14) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  main::yd#3 = phi( main::@1/main::yd#1 )
  main::x#4 = phi( main::@1/main::x#1 )
  main::xd#2 = phi( main::@1/main::xd#1 )
  main::e#4 = phi( main::@1/main::e#1 )
  main::idx#4 = phi( main::@1/main::idx#1 )
  main::y#2 = phi( main::@1/main::y#3 )
  main::$10 = main::y#2 + 1
  main::y#1 = main::$10
  main::$11 = main::idx#4 + $28
  main::idx#2 = main::$11
  main::$12 = main::e#4 - main::xd#2
  main::e#2 = main::$12
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
number~ main::$10
number~ main::$11
byte~ main::$12
number~ main::$13
bool~ main::$14
number~ main::$3
number~ main::$5
number~ main::$6
byte~ main::$7
bool~ main::$8
bool~ main::$9
constant byte main::STAR = $51
byte main::e
byte main::e#0
byte main::e#1
byte main::e#2
byte main::e#3
byte main::e#4
byte main::e#5
word main::idx
word main::idx#0
word main::idx#1
word main::idx#2
word main::idx#3
word main::idx#4
word main::idx#5
constant byte* main::screen[$28*$19]  = (byte*)$400
byte main::x
byte main::x#0
byte main::x#1
byte main::x#2
byte main::x#3
byte main::x#4
constant byte main::x0 = 0
constant byte main::x1 = $27
byte main::xd
byte main::xd#0
byte main::xd#1
byte main::xd#2
byte main::xd#3
byte main::y
byte main::y#0
byte main::y#1
byte main::y#2
byte main::y#3
byte main::y#4
constant byte main::y0 = 0
constant byte main::y1 = $18
byte main::yd
byte main::yd#0
byte main::yd#1
byte main::yd#2
byte main::yd#3

Adding number conversion cast (unumber) 2 in main::e#0 = main::yd#0 / 2
Adding number conversion cast (unumber) $28 in main::$3 = main::y#0 * $28
Adding number conversion cast (unumber) main::$3 in main::$3 = main::y#0 * (unumber)$28
Adding number conversion cast (unumber) 1 in main::$5 = main::x#2 + 1
Adding number conversion cast (unumber) main::$5 in main::$5 = main::x#2 + (unumber)1
Adding number conversion cast (unumber) 1 in main::$6 = main::idx#3 + 1
Adding number conversion cast (unumber) main::$6 in main::$6 = main::idx#3 + (unumber)1
Adding number conversion cast (unumber) 1 in main::$13 = main::x1 + 1
Adding number conversion cast (unumber) main::$13 in main::$13 = main::x1 + (unumber)1
Adding number conversion cast (unumber) 1 in main::$10 = main::y#2 + 1
Adding number conversion cast (unumber) main::$10 in main::$10 = main::y#2 + (unumber)1
Adding number conversion cast (unumber) $28 in main::$11 = main::idx#4 + $28
Adding number conversion cast (unumber) main::$11 in main::$11 = main::idx#4 + (unumber)$28
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 2
Simplifying constant integer cast $28
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$3 = main::y#0 * $28
Inferred type updated to byte in main::$5 = main::x#2 + 1
Inferred type updated to word in main::$6 = main::idx#3 + 1
Inferred type updated to byte in main::$13 = main::x1 + 1
Inferred type updated to byte in main::$10 = main::y#2 + 1
Inferred type updated to word in main::$11 = main::idx#4 + $28
Inversing boolean not [16] main::$9 = main::xd#1 >= main::e#1 from [15] main::$8 = main::xd#1 < main::e#1
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::x#1 = main::$5 main::x#4 
Alias main::idx#1 = main::$6 main::idx#4 
Alias main::e#1 = main::$7 main::e#4 
Alias main::y#2 = main::y#3 
Alias main::xd#1 = main::xd#2 
Alias main::yd#1 = main::yd#3 
Alias main::y#1 = main::$10 
Alias main::idx#2 = main::$11 
Alias main::e#2 = main::$12 
Successful SSA optimization Pass2AliasElimination
Alias main::x#1 = main::x#3 
Alias main::yd#1 = main::yd#2 
Alias main::xd#1 = main::xd#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values main::yd#1 main::yd#0
Identical Phi Values main::xd#1 main::xd#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$9 [13] if(main::xd#0>=main::e#1) goto main::@2
Simple Condition main::$14 [17] if(main::x#1<main::$13) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [0] main::xd#0 = main::x1 - main::x0
Constant right-side identified [1] main::yd#0 = main::y1 - main::y0
Constant right-side identified [15] main::$13 = main::x1 + 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::xd#0 = main::x1-main::x0
Constant main::yd#0 = main::y1-main::y0
Constant main::x#0 = main::x0
Constant main::y#0 = main::y0
Constant main::$13 = main::x1+1
Successful SSA optimization Pass2ConstantIdentification
De-inlining pointer[w] to *(pointer+w)   [8] main::screen[main::idx#3] = main::STAR
Successful SSA optimization Pass2DeInlineWordDerefIdx
Simplifying expression containing zero main::x1 in 
Simplifying expression containing zero main::y1 in 
Simplifying expression containing zero main::$3 in [6] main::idx#0 = main::x#0 + main::$3
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Alias main::idx#0 = main::$3 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [0] main::e#0 = main::yd#0 / 2
Constant right-side identified [1] main::idx#0 = main::y#0 * $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::e#0 = main::yd#0/2
Constant main::idx#0 = main::y#0*$28
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero main::y#0*$28 in 
Successful SSA optimization PassNSimplifyConstantZero
Inlining constant with var siblings main::x#0
Inlining constant with var siblings main::y#0
Inlining constant with var siblings main::e#0
Inlining constant with var siblings main::idx#0
Constant inlined main::idx#0 = 0
Constant inlined main::$13 = main::x1+1
Constant inlined main::x#0 = main::x0
Constant inlined main::y#0 = main::y0
Constant inlined main::xd#0 = main::x1
Constant inlined main::e#0 = main::y1/2
Constant inlined main::yd#0 = main::y1
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting main::@4(between main::@2 and main::@1)
Added new block during phi lifting main::@5(between main::@1 and main::@2)
Adding NOP phi() at start of main
CALL GRAPH

Created 7 initial phi equivalence classes
Coalesced [11] main::idx#8 = main::idx#2
Coalesced [12] main::e#8 = main::e#2
Coalesced [13] main::y#7 = main::y#1
Coalesced [17] main::idx#6 = main::idx#5
Coalesced [18] main::x#5 = main::x#1
Coalesced [19] main::e#6 = main::e#5
Coalesced [20] main::y#5 = main::y#4
Coalesced [21] main::idx#7 = main::idx#1
Coalesced [22] main::e#7 = main::e#1
Coalesced (already) [23] main::y#6 = main::y#2
Coalesced down to 4 phi equivalence classes
Culled Empty Block label main::@4
Culled Empty Block label main::@5
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::y#2 = phi( main/main::y0, main::@2/main::y#4 )
  [1] main::e#3 = phi( main/main::y1/2, main::@2/main::e#5 )
  [1] main::x#2 = phi( main/main::x0, main::@2/main::x#1 )
  [1] main::idx#3 = phi( main/0, main::@2/main::idx#5 )
  [2] main::$15 = main::screen + main::idx#3
  [3] *main::$15 = main::STAR
  [4] main::x#1 = main::x#2 + 1
  [5] main::idx#1 = main::idx#3 + 1
  [6] main::e#1 = main::e#3 + main::y1
  [7] if(main::x1>=main::e#1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [8] main::y#1 = main::y#2 + 1
  [9] main::idx#2 = main::idx#1 + $28
  [10] main::e#2 = main::e#1 - main::x1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [11] main::y#4 = phi( main::@1/main::y#2, main::@3/main::y#1 )
  [11] main::e#5 = phi( main::@1/main::e#1, main::@3/main::e#2 )
  [11] main::idx#5 = phi( main::@1/main::idx#1, main::@3/main::idx#2 )
  [12] if(main::x#1<main::x1+1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [13] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte*~ main::$15 22.0
byte main::e
byte main::e#1 11.0
byte main::e#2 22.0
byte main::e#3 4.4
byte main::e#5 16.5
word main::idx
word main::idx#1 8.25
word main::idx#2 11.0
word main::idx#3 8.25
word main::idx#5 16.5
byte main::x
byte main::x#1 3.666666666666667
byte main::x#2 7.333333333333333
byte main::xd
byte main::y
byte main::y#1 7.333333333333333
byte main::y#2 4.714285714285714
byte main::y#4 16.5
byte main::yd

Initial phi equivalence classes
[ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ]
[ main::x#2 main::x#1 ]
[ main::e#3 main::e#5 main::e#1 main::e#2 ]
[ main::y#2 main::y#4 main::y#1 ]
Added variable main::$15 to live range equivalence class [ main::$15 ]
Complete equivalence classes
[ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ]
[ main::x#2 main::x#1 ]
[ main::e#3 main::e#5 main::e#1 main::e#2 ]
[ main::y#2 main::y#4 main::y#1 ]
[ main::$15 ]
Allocated zp[2]:2 [ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ]
Allocated zp[1]:4 [ main::x#2 main::x#1 ]
Allocated zp[1]:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ]
Allocated zp[1]:6 [ main::y#2 main::y#4 main::y#1 ]
Allocated zp[2]:7 [ main::$15 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::$15 = main::screen + main::idx#3 [ main::idx#3 main::x#2 main::e#3 main::y#2 main::$15 ] (  [ main::idx#3 main::x#2 main::e#3 main::y#2 main::$15 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:6 [ main::y#2 main::y#4 main::y#1 ]
Statement [3] *main::$15 = main::STAR [ main::idx#3 main::x#2 main::e#3 main::y#2 ] (  [ main::idx#3 main::x#2 main::e#3 main::y#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:4 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:6 [ main::y#2 main::y#4 main::y#1 ]
Statement [6] main::e#1 = main::e#3 + main::y1 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] (  [ main::y#2 main::x#1 main::idx#1 main::e#1 ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:6 [ main::y#2 main::y#4 main::y#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:4 [ main::x#2 main::x#1 ]
Statement [9] main::idx#2 = main::idx#1 + $28 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] (  [ main::x#1 main::e#1 main::y#1 main::idx#2 ] { }  ) always clobbers reg byte a 
Statement [10] main::e#2 = main::e#1 - main::x1 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] (  [ main::x#1 main::y#1 main::idx#2 main::e#2 ] { }  ) always clobbers reg byte a reg byte x 
Statement [12] if(main::x#1<main::x1+1) goto main::@1 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] (  [ main::idx#5 main::x#1 main::e#5 main::y#4 ] { }  ) always clobbers reg byte a 
Statement [2] main::$15 = main::screen + main::idx#3 [ main::idx#3 main::x#2 main::e#3 main::y#2 main::$15 ] (  [ main::idx#3 main::x#2 main::e#3 main::y#2 main::$15 ] { }  ) always clobbers reg byte a 
Statement [3] *main::$15 = main::STAR [ main::idx#3 main::x#2 main::e#3 main::y#2 ] (  [ main::idx#3 main::x#2 main::e#3 main::y#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [6] main::e#1 = main::e#3 + main::y1 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] (  [ main::y#2 main::x#1 main::idx#1 main::e#1 ] { }  ) always clobbers reg byte a reg byte x 
Statement [9] main::idx#2 = main::idx#1 + $28 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] (  [ main::x#1 main::e#1 main::y#1 main::idx#2 ] { }  ) always clobbers reg byte a 
Statement [10] main::e#2 = main::e#1 - main::x1 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] (  [ main::x#1 main::y#1 main::idx#2 main::e#2 ] { }  ) always clobbers reg byte a reg byte x 
Statement [12] if(main::x#1<main::x1+1) goto main::@1 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] (  [ main::idx#5 main::x#1 main::e#5 main::y#4 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ main::x#2 main::x#1 ] : zp[1]:4 , 
Potential registers zp[1]:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ] : zp[1]:5 , reg byte x , 
Potential registers zp[1]:6 [ main::y#2 main::y#4 main::y#1 ] : zp[1]:6 , 
Potential registers zp[2]:7 [ main::$15 ] : zp[2]:7 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 53.9: zp[1]:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ] 44: zp[2]:2 [ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ] 28.55: zp[1]:6 [ main::y#2 main::y#4 main::y#1 ] 22: zp[2]:7 [ main::$15 ] 11: zp[1]:4 [ main::x#2 main::x#1 ] 
Uplift Scope [] 

Uplifting [main] best 1281 combination reg byte x [ main::e#3 main::e#5 main::e#1 main::e#2 ] zp[2]:2 [ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ] zp[1]:6 [ main::y#2 main::y#4 main::y#1 ] zp[2]:7 [ main::$15 ] zp[1]:4 [ main::x#2 main::x#1 ] 
Uplifting [] best 1281 combination 
Attempting to uplift remaining variables inzp[1]:6 [ main::y#2 main::y#4 main::y#1 ]
Uplifting [main] best 1281 combination zp[1]:6 [ main::y#2 main::y#4 main::y#1 ] 
Attempting to uplift remaining variables inzp[1]:4 [ main::x#2 main::x#1 ]
Uplifting [main] best 1281 combination zp[1]:4 [ main::x#2 main::x#1 ] 
Allocated (was zp[1]:6) zp[1]:5 [ main::y#2 main::y#4 main::y#1 ]
Allocated (was zp[2]:7) zp[2]:6 [ main::$15 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="bresenhamarr.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .const STAR = $51
    .const x0 = 0
    .const y0 = 0
    .const x1 = $27
    .const y1 = $18
    .label screen = $400
    .label x = 4
    .label idx = 2
    .label y = 5
    .label __15 = 6
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::y#2 = main::y0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #y0
    sta.z y
    // [1] phi main::e#3 = main::y1/2 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #y1/2
    // [1] phi main::x#2 = main::x0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    lda #x0
    sta.z x
    // [1] phi main::idx#3 = 0 [phi:main->main::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta.z idx
    lda #>0
    sta.z idx+1
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::y#2 = main::y#4 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::e#3 = main::e#5 [phi:main::@2->main::@1#1] -- register_copy 
    // [1] phi main::x#2 = main::x#1 [phi:main::@2->main::@1#2] -- register_copy 
    // [1] phi main::idx#3 = main::idx#5 [phi:main::@2->main::@1#3] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$15 = main::screen + main::idx#3 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z idx
    clc
    adc #<screen
    sta.z __15
    lda.z idx+1
    adc #>screen
    sta.z __15+1
    // [3] *main::$15 = main::STAR -- _deref_pbuz1=vbuc1 
    lda #STAR
    ldy #0
    sta (__15),y
    // [4] main::x#1 = main::x#2 + 1 -- vbuz1=vbuz1_plus_1 
    inc.z x
    // [5] main::idx#1 = main::idx#3 + 1 -- vwuz1=vwuz1_plus_1 
    inc.z idx
    bne !+
    inc.z idx+1
  !:
    // [6] main::e#1 = main::e#3 + main::y1 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[y1]
    // [7] if(main::x1>=main::e#1) goto main::@2 -- vbuc1_ge_vbuxx_then_la1 
    cpx #x1
    bcc __b2_from___b1
    beq __b2_from___b1
    jmp __b3
    // main::@3
  __b3:
    // [8] main::y#1 = main::y#2 + 1 -- vbuz1=vbuz1_plus_1 
    inc.z y
    // [9] main::idx#2 = main::idx#1 + $28 -- vwuz1=vwuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z idx
    sta.z idx
    bcc !+
    inc.z idx+1
  !:
    // [10] main::e#2 = main::e#1 - main::x1 -- vbuxx=vbuxx_minus_vbuc1 
    txa
    axs #x1
    // [11] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [11] phi main::y#4 = main::y#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
    // [11] phi main::e#5 = main::e#1 [phi:main::@1/main::@3->main::@2#1] -- register_copy 
    // [11] phi main::idx#5 = main::idx#1 [phi:main::@1/main::@3->main::@2#2] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [12] if(main::x#1<main::x1+1) goto main::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #x1+1
    bcc __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
byte*~ main::$15 zp[2]:6 22.0
constant byte main::STAR = $51
byte main::e
byte main::e#1 reg byte x 11.0
byte main::e#2 reg byte x 22.0
byte main::e#3 reg byte x 4.4
byte main::e#5 reg byte x 16.5
word main::idx
word main::idx#1 idx zp[2]:2 8.25
word main::idx#2 idx zp[2]:2 11.0
word main::idx#3 idx zp[2]:2 8.25
word main::idx#5 idx zp[2]:2 16.5
constant byte* main::screen[$28*$19]  = (byte*) 1024
byte main::x
byte main::x#1 x zp[1]:4 3.666666666666667
byte main::x#2 x zp[1]:4 7.333333333333333
constant byte main::x0 = 0
constant byte main::x1 = $27
byte main::xd
byte main::y
byte main::y#1 y zp[1]:5 7.333333333333333
byte main::y#2 y zp[1]:5 4.714285714285714
byte main::y#4 y zp[1]:5 16.5
constant byte main::y0 = 0
constant byte main::y1 = $18
byte main::yd

zp[2]:2 [ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ]
zp[1]:4 [ main::x#2 main::x#1 ]
reg byte x [ main::e#3 main::e#5 main::e#1 main::e#2 ]
zp[1]:5 [ main::y#2 main::y#4 main::y#1 ]
zp[2]:6 [ main::$15 ]


FINAL ASSEMBLER
Score: 1111

  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="bresenhamarr.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .const STAR = $51
    .const x0 = 0
    .const y0 = 0
    .const x1 = $27
    .const y1 = $18
    .label screen = $400
    .label x = 4
    .label idx = 2
    .label y = 5
    .label __15 = 6
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::y#2 = main::y0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #y0
    sta.z y
    // [1] phi main::e#3 = main::y1/2 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #y1/2
    // [1] phi main::x#2 = main::x0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    lda #x0
    sta.z x
    // [1] phi main::idx#3 = 0 [phi:main->main::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta.z idx
    sta.z idx+1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::y#2 = main::y#4 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::e#3 = main::e#5 [phi:main::@2->main::@1#1] -- register_copy 
    // [1] phi main::x#2 = main::x#1 [phi:main::@2->main::@1#2] -- register_copy 
    // [1] phi main::idx#3 = main::idx#5 [phi:main::@2->main::@1#3] -- register_copy 
    // main::@1
  __b1:
    // screen[idx] = STAR
    // [2] main::$15 = main::screen + main::idx#3 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z idx
    clc
    adc #<screen
    sta.z __15
    lda.z idx+1
    adc #>screen
    sta.z __15+1
    // [3] *main::$15 = main::STAR -- _deref_pbuz1=vbuc1 
    lda #STAR
    ldy #0
    sta (__15),y
    // x = x + 1
    // [4] main::x#1 = main::x#2 + 1 -- vbuz1=vbuz1_plus_1 
    inc.z x
    // idx = idx + 1
    // [5] main::idx#1 = main::idx#3 + 1 -- vwuz1=vwuz1_plus_1 
    inc.z idx
    bne !+
    inc.z idx+1
  !:
    // e = e+yd
    // [6] main::e#1 = main::e#3 + main::y1 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[y1]
    // if(xd<e)
    // [7] if(main::x1>=main::e#1) goto main::@2 -- vbuc1_ge_vbuxx_then_la1 
    cpx #x1
    bcc __b2
    beq __b2
    // main::@3
    // y = y+1
    // [8] main::y#1 = main::y#2 + 1 -- vbuz1=vbuz1_plus_1 
    inc.z y
    // idx  = idx + 40
    // [9] main::idx#2 = main::idx#1 + $28 -- vwuz1=vwuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z idx
    sta.z idx
    bcc !+
    inc.z idx+1
  !:
    // e = e - xd
    // [10] main::e#2 = main::e#1 - main::x1 -- vbuxx=vbuxx_minus_vbuc1 
    txa
    axs #x1
    // [11] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
    // [11] phi main::y#4 = main::y#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
    // [11] phi main::e#5 = main::e#1 [phi:main::@1/main::@3->main::@2#1] -- register_copy 
    // [11] phi main::idx#5 = main::idx#1 [phi:main::@1/main::@3->main::@2#2] -- register_copy 
    // main::@2
  __b2:
    // while (x<(x1+1))
    // [12] if(main::x#1<main::x1+1) goto main::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #x1+1
    bcc __b1
    // main::@return
    // }
    // [13] return 
    rts
}
  // File Data

