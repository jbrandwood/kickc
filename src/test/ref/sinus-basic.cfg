@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call setFAC 
  to:main::@2
main::@2: scope:[main]  from main
  [6] phi()
  [7] call divFACby10 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [8] phi()
  [9] call setMEMtoFAC 
  to:main::@1
main::@1: scope:[main]  from main::@15 main::@3
  [10] (byte*) print_line_cursor#13 ← phi( main::@15/(byte*) print_line_cursor#1 main::@3/((byte*))(word/signed word/dword/signed dword) $400 )
  [10] (byte*) print_char_cursor#32 ← phi( main::@15/(byte*~) print_char_cursor#49 main::@3/((byte*))(word/signed word/dword/signed dword) $400 )
  [10] (byte) main::i#10 ← phi( main::@15/(byte) main::i#1 main::@3/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [11] (word) setFAC::w#1 ← ((word)) (byte) main::i#10
  [12] call setFAC 
  to:main::@4
main::@4: scope:[main]  from main::@1
  [13] phi()
  [14] call mulFACbyMEM 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [15] phi()
  [16] call setMEMtoFAC 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [17] phi()
  [18] call setFAC 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [19] phi()
  [20] call divMEMbyFAC 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [21] phi()
  [22] call sinFAC 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [23] phi()
  [24] call mulFACbyMEM 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [25] phi()
  [26] call addMEMtoFAC 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [27] phi()
  [28] call getFAC 
  [29] (word) getFAC::return#2 ← (word) getFAC::return#0
  to:main::@12
main::@12: scope:[main]  from main::@11
  [30] (word) print_word::w#0 ← (word) getFAC::return#2
  [31] call print_word 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [32] phi()
  [33] call print_ln 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [34] (byte) main::i#1 ← ++ (byte) main::i#10
  [35] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $1a) goto main::@15
  to:main::@return
main::@return: scope:[main]  from main::@14
  [36] return 
  to:@return
main::@15: scope:[main]  from main::@14
  [37] (byte*~) print_char_cursor#49 ← (byte*) print_line_cursor#1
  to:main::@1
print_ln: scope:[print_ln]  from main::@13
  [38] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [39] (byte*) print_line_cursor#6 ← phi( print_ln/(byte*) print_line_cursor#13 print_ln::@1/(byte*) print_line_cursor#1 )
  [40] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) $28
  [41] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#10) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [42] return 
  to:@return
print_word: scope:[print_word]  from main::@12
  [43] (byte) print_byte::b#0 ← > (word) print_word::w#0
  [44] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [45] (byte) print_byte::b#1 ← < (word) print_word::w#0
  [46] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [47] return 
  to:@return
print_byte: scope:[print_byte]  from print_word print_word::@1
  [48] (byte*) print_char_cursor#31 ← phi( print_word/(byte*) print_char_cursor#32 print_word::@1/(byte*) print_char_cursor#10 )
  [48] (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  [49] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [50] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [51] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [52] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [53] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [54] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [55] return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1
  [56] (byte*) print_char_cursor#23 ← phi( print_byte/(byte*) print_char_cursor#31 print_byte::@1/(byte*) print_char_cursor#10 )
  [56] (byte) print_char::ch#2 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 )
  [57] *((byte*) print_char_cursor#23) ← (byte) print_char::ch#2
  [58] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#23
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [59] return 
  to:@return
getFAC: scope:[getFAC]  from main::@11
  asm { jsr$b1aa sty$fe sta$ff  }
  [61] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0)
  to:getFAC::@return
getFAC::@return: scope:[getFAC]  from getFAC
  [62] return 
  to:@return
addMEMtoFAC: scope:[addMEMtoFAC]  from main::@10
  [63] phi()
  [64] call prepareMEM 
  to:addMEMtoFAC::@1
addMEMtoFAC::@1: scope:[addMEMtoFAC]  from addMEMtoFAC
  asm { lda$fe ldy$ff jsr$b867  }
  to:addMEMtoFAC::@return
addMEMtoFAC::@return: scope:[addMEMtoFAC]  from addMEMtoFAC::@1
  [66] return 
  to:@return
prepareMEM: scope:[prepareMEM]  from addMEMtoFAC divMEMbyFAC mulFACbyMEM setFAC setMEMtoFAC
  [67] (byte*) prepareMEM::mem#5 ← phi( addMEMtoFAC/(const byte[]) main::f_127#0 divMEMbyFAC/(const byte[]) main::f_i#0 mulFACbyMEM/(byte*) prepareMEM::mem#4 setFAC/(byte*~) prepareMEM::mem#7 setMEMtoFAC/(byte*) prepareMEM::mem#1 )
  [68] (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5
  [69] *((const byte*) memLo#0) ← (byte~) prepareMEM::$0
  [70] (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5
  [71] *((const byte*) memHi#0) ← (byte~) prepareMEM::$1
  to:prepareMEM::@return
prepareMEM::@return: scope:[prepareMEM]  from prepareMEM
  [72] return 
  to:@return
mulFACbyMEM: scope:[mulFACbyMEM]  from main::@4 main::@9
  [73] (byte*) mulFACbyMEM::mem#2 ← phi( main::@9/(const byte[]) main::f_127#0 main::@4/(const byte*) main::f_2pi#0 )
  [74] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2
  [75] call prepareMEM 
  to:mulFACbyMEM::@1
mulFACbyMEM::@1: scope:[mulFACbyMEM]  from mulFACbyMEM
  asm { lda$fe ldy$ff jsr$ba28  }
  to:mulFACbyMEM::@return
mulFACbyMEM::@return: scope:[mulFACbyMEM]  from mulFACbyMEM::@1
  [77] return 
  to:@return
sinFAC: scope:[sinFAC]  from main::@8
  asm { jsr$e26b  }
  to:sinFAC::@return
sinFAC::@return: scope:[sinFAC]  from sinFAC
  [79] return 
  to:@return
divMEMbyFAC: scope:[divMEMbyFAC]  from main::@7
  [80] phi()
  [81] call prepareMEM 
  to:divMEMbyFAC::@1
divMEMbyFAC::@1: scope:[divMEMbyFAC]  from divMEMbyFAC
  asm { lda$fe ldy$ff jsr$bb0f  }
  to:divMEMbyFAC::@return
divMEMbyFAC::@return: scope:[divMEMbyFAC]  from divMEMbyFAC::@1
  [83] return 
  to:@return
setFAC: scope:[setFAC]  from main main::@1 main::@6
  [84] (word) setFAC::w#3 ← phi( main/(word/signed word/dword/signed dword) $4fb main::@1/(word) setFAC::w#1 main::@6/(byte/signed byte/word/signed word/dword/signed dword) $19 )
  [85] (byte*~) prepareMEM::mem#7 ← (byte*)(word) setFAC::w#3
  [86] call prepareMEM 
  to:setFAC::@1
setFAC::@1: scope:[setFAC]  from setFAC
  asm { ldy$fe lda$ff jsr$b391  }
  to:setFAC::@return
setFAC::@return: scope:[setFAC]  from setFAC::@1
  [88] return 
  to:@return
setMEMtoFAC: scope:[setMEMtoFAC]  from main::@3 main::@5
  [89] (byte*) setMEMtoFAC::mem#2 ← phi( main::@3/(const byte[]) main::f_127#0 main::@5/(const byte[]) main::f_i#0 )
  [90] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#2
  [91] call prepareMEM 
  to:setMEMtoFAC::@1
setMEMtoFAC::@1: scope:[setMEMtoFAC]  from setMEMtoFAC
  asm { ldx$fe ldy$ff jsr$bbd4  }
  to:setMEMtoFAC::@return
setMEMtoFAC::@return: scope:[setMEMtoFAC]  from setMEMtoFAC::@1
  [93] return 
  to:@return
divFACby10: scope:[divFACby10]  from main::@2
  asm { jsr$bafe  }
  to:divFACby10::@return
divFACby10::@return: scope:[divFACby10]  from divFACby10
  [95] return 
  to:@return
