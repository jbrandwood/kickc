(label) @1
(label) @begin
(label) @end
(const byte*) BITMAP = (byte*) 40960
(const nomodify byte*) BORDERCOL = (byte*) 53280
(const nomodify struct MOS6526_CIA*) CIA2 = (struct MOS6526_CIA*) 56576
(const nomodify byte*) D011 = (byte*) 53265
(const nomodify byte*) D018 = (byte*) 53272
(const nomodify byte) DELAY = (byte) 8
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = (byte) 2
(const nomodify byte*) PROCPORT = (byte*) 1
(const nomodify byte*) PROCPORT_DDR = (byte*) 0
(const nomodify byte) PROCPORT_DDR_MEMORY_MASK = (byte) 7
(const nomodify byte) PROCPORT_RAM_IO = (byte) 5
(const nomodify byte*) RASTER = (byte*) 53266
(const byte*) SCREEN = (byte*) 34816
(const nomodify byte) SIZE = (byte) 4
(const nomodify byte) VIC_BMM = (byte) $20
(const nomodify byte) VIC_DEN = (byte) $10
(const nomodify byte) VIC_RSEL = (byte) 8
(void()) bitmap_clear()
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@3
(label) bitmap_clear::@return
(byte*) bitmap_clear::bitmap
(word) bitmap_clear::bitmap#0 bitmap zp[2]:5 101.0
(byte*) bitmap_clear::bitmap#1 bitmap zp[2]:5 4200.6
(byte*) bitmap_clear::bitmap#2 bitmap zp[2]:5 15502.0
(byte*) bitmap_clear::bitmap#3 bitmap zp[2]:5 2103.0
(byte*) bitmap_clear::bitmap#5 bitmap zp[2]:5 202.0
(byte) bitmap_clear::x
(byte) bitmap_clear::x#1 reg byte x 15001.5
(byte) bitmap_clear::x#2 reg byte x 6667.333333333333
(byte) bitmap_clear::y
(byte) bitmap_clear::y#1 y zp[1]:19 1501.5
(byte) bitmap_clear::y#4 y zp[1]:19 333.6666666666667
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(byte~) bitmap_init::$4 reg byte a 2002.0
(byte~) bitmap_init::$5 reg byte a 2002.0
(byte~) bitmap_init::$6 reg byte a 2002.0
(byte~) bitmap_init::$7 zp[1]:19 500.5
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@return
(byte*) bitmap_init::bitmap
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 reg byte a 1001.0
(byte) bitmap_init::bits#3 reg byte a 1501.5
(byte) bitmap_init::bits#4 reg byte a 667.3333333333334
(byte) bitmap_init::x
(byte) bitmap_init::x#1 reg byte x 1501.5
(byte) bitmap_init::x#2 reg byte x 500.5
(byte) bitmap_init::y
(byte) bitmap_init::y#1 reg byte x 1501.5
(byte) bitmap_init::y#2 reg byte x 500.5
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 yoffs zp[2]:7 2002.0
(byte*) bitmap_init::yoffs#2 yoffs zp[2]:7 625.625
(byte*) bitmap_init::yoffs#4 yoffs zp[2]:7 1001.0
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$0 zp[2]:13 2002.0
(byte~) bitmap_plot::$1 reg byte x 2002.0
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter#0 plotter zp[2]:11 500.5
(byte*) bitmap_plot::plotter#1 plotter zp[2]:11 1501.5
(word) bitmap_plot::x
(word) bitmap_plot::x#0 x zp[2]:9 420.59999999999997
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 reg byte x 2103.0
(const to_nomodify byte*) bitmap_plot_bit[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) bitmap_plot_yhi[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) bitmap_plot_ylo[(number) $100]  = { fill( $100, 0) }
(const byte*) delay[(const nomodify byte) SIZE]  = { fill( SIZE, 0) }
(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
(label) divr16s::@1
(label) divr16s::@10
(label) divr16s::@2
(label) divr16s::@3
(label) divr16s::@4
(label) divr16s::@5
(label) divr16s::@6
(label) divr16s::@7
(label) divr16s::@8
(label) divr16s::@9
(label) divr16s::@return
(signed word) divr16s::dividend
(word) divr16s::dividendu
(signed word) divr16s::divisor
(signed word) divr16s::divisor#0 divisor zp[2]:9 2333.6666666666665
(word) divr16s::divisoru
(signed word) divr16s::divisoru#1 divisoru zp[2]:9 5000.5
(word) divr16s::divisoru#3 divisoru zp[2]:9 30003.0
(word) divr16s::divisoru#4 divisoru zp[2]:9 20002.0
(word) divr16s::divisoru#5 divisoru zp[2]:9 20002.0
(byte) divr16s::neg
(byte) divr16s::neg#2 reg byte y 10001.0
(byte) divr16s::neg#3 reg byte y 5000.5
(byte) divr16s::neg#4 reg byte y 5000.5
(signed word) divr16s::rem
(signed word) divr16s::rem#0 rem zp[2]:7 7001.0
(word) divr16s::remu
(signed word) divr16s::remu#1 remu zp[2]:7 10001.0
(word) divr16s::remu#3 remu zp[2]:7 3750.375
(word) divr16s::remu#7 remu zp[2]:7 20002.0
(word) divr16s::remu#8 remu zp[2]:7 20002.0
(word) divr16s::resultu
(word) divr16s::resultu#0 resultu zp[2]:11 5000.5
(signed word) divr16s::return
(signed word) divr16s::return#1 return zp[2]:11 20002.0
(signed word) divr16s::return#2 return zp[2]:11 7001.0
(signed word) divr16s::return#3 return zp[2]:11 2002.0
(signed word) divr16s::return#6 return zp[2]:11 20002.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 2.0000002E7
(byte~) divr16u::$2 reg byte a 2.0000002E7
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp[2]:13 2500000.25
(word) divr16u::dividend#2 dividend zp[2]:13 4285714.714285715
(word) divr16u::divisor
(word) divr16u::divisor#0 divisor zp[2]:9 1111666.8333333335
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 1.50000015E7
(byte) divr16u::i#2 reg byte x 1538461.6923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp[2]:11 1.50000015E7
(word) divr16u::quotient#2 quotient zp[2]:11 1.0000001E7
(word) divr16u::quotient#3 quotient zp[2]:11 2500000.25
(word) divr16u::rem
(word) divr16u::rem#0 rem zp[2]:7 7500000.75
(word) divr16u::rem#1 rem zp[2]:7 2.0000002E7
(word) divr16u::rem#2 rem zp[2]:7 2.0000002E7
(word) divr16u::rem#3 rem zp[2]:7 55001.0
(word) divr16u::rem#4 rem zp[2]:7 2.0100003E7
(word) divr16u::rem#5 rem zp[2]:7 1.0000001E7
(word) divr16u::rem#9 rem zp[2]:7 1.0000001E7
(word) divr16u::return
(word) divr16u::return#0 return zp[2]:11 6002000.8
(word) divr16u::return#2 return zp[2]:11 20002.0
(void()) main()
(byte~) main::$10 reg byte a 202.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(byte) main::i
(byte) main::i#1 i zp[1]:2 151.5
(byte) main::i#2 i zp[1]:2 72.14285714285714
(label) main::toD0181
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >(word)(const byte*) SCREEN&(word) $3fff*(byte) 4|>(word)(const byte*) BITMAP/(byte) 4&(byte) $f
(byte*) main::toD0181_screen
(label) main::vicSelectGfxBank1
(label) main::vicSelectGfxBank1_@1
(byte*) main::vicSelectGfxBank1_gfx
(label) main::vicSelectGfxBank1_toDd001
(byte*) main::vicSelectGfxBank1_toDd001_gfx
(byte) main::vicSelectGfxBank1_toDd001_return
(const byte) main::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = (byte) 3^>(word)(const byte*) SCREEN/(byte) $40
(void()) point_init((byte) point_init::point_idx)
(byte~) point_init::$10 reg byte a 1001.0
(byte~) point_init::$11 reg byte a 1001.0
(byte~) point_init::$13 reg byte x 800.8
(signed word~) point_init::$17 zp[2]:7 1001.0
(signed word~) point_init::$18 zp[2]:13 2002.0
(word~) point_init::$19 zp[2]:17 2002.0
(word~) point_init::$5 zp[2]:15 2002.0
(word~) point_init::$6 zp[2]:17 2002.0
(byte~) point_init::$9 reg byte a 2002.0
(label) point_init::@1
(label) point_init::@2
(label) point_init::@3
(label) point_init::@4
(label) point_init::@5
(label) point_init::@6
(label) point_init::@7
(label) point_init::@return
(label) point_init::abs16s1
(label) point_init::abs16s1_@1
(label) point_init::abs16s1_@3
(label) point_init::abs16s1_@return
(word) point_init::abs16s1_return
(signed word) point_init::abs16s1_return#0 abs16s1_return zp[2]:3 1001.0
(word) point_init::abs16s1_return#2 abs16s1_return zp[2]:3 500.5
(word) point_init::abs16s1_return#5 abs16s1_return zp[2]:3 2002.0
(word) point_init::abs16s1_return#6 abs16s1_return zp[2]:3 2002.0
(signed word) point_init::abs16s1_w
(label) point_init::abs16s2
(label) point_init::abs16s2_@1
(label) point_init::abs16s2_@3
(label) point_init::abs16s2_@return
(word) point_init::abs16s2_return
(signed word) point_init::abs16s2_return#0 abs16s2_return zp[2]:5 1001.0
(word) point_init::abs16s2_return#2 abs16s2_return zp[2]:5 3003.0
(word) point_init::abs16s2_return#5 abs16s2_return zp[2]:5 2002.0
(word) point_init::abs16s2_return#6 abs16s2_return zp[2]:5 2002.0
(signed word) point_init::abs16s2_w
(byte) point_init::point_idx
(byte) point_init::point_idx#0 point_idx zp[1]:2 179.61764705882354
(signed word) point_init::x_diff
(signed word) point_init::x_diff#1 x_diff zp[2]:9 278.05555555555554
(signed word) point_init::x_stepf
(signed word) point_init::x_stepf#0 x_stepf zp[2]:11 2002.0
(signed word) point_init::y_diff
(signed word) point_init::y_diff#0 y_diff zp[2]:7 250.25
(void()) screen_fill((byte*) screen_fill::screen , (byte) screen_fill::ch)
(label) screen_fill::@1
(label) screen_fill::@2
(label) screen_fill::@3
(label) screen_fill::@return
(byte) screen_fill::ch
(const byte) screen_fill::ch#0 ch = (byte) $10
(byte*) screen_fill::screen
(byte*) screen_fill::screen#1 screen zp[2]:3 4200.6
(byte*) screen_fill::screen#2 screen zp[2]:3 15502.0
(byte*) screen_fill::screen#3 screen zp[2]:3 2002.0
(byte) screen_fill::x
(byte) screen_fill::x#1 reg byte x 15001.5
(byte) screen_fill::x#2 reg byte x 6667.333333333333
(byte) screen_fill::y
(byte) screen_fill::y#1 y zp[1]:19 1501.5
(byte) screen_fill::y#4 y zp[1]:19 333.6666666666667
(const signed byte*) x_add[(const nomodify byte) SIZE]  = { fill( SIZE, 0) }
(const word*) x_cur[(const nomodify byte) SIZE]  = { fill( SIZE, 0) }
(const word*) x_end[(const nomodify byte) SIZE]  = { (word) $14, (word) $a, (word) $14, (word) $14 }
(const word*) x_start[(const nomodify byte) SIZE]  = { (word) $a, (word) $14, (word) $1e, (word) $1e }
(const signed byte*) y_add[(const nomodify byte) SIZE]  = { fill( SIZE, 0) }
(const word*) y_cur[(const nomodify byte) SIZE]  = { fill( SIZE, 0) }
(const byte*) y_end[(const nomodify byte) SIZE]  = { (byte) $14, (byte) $14, (byte) $a, (byte) $14 }
(const byte*) y_start[(const nomodify byte) SIZE]  = { (byte) $a, (byte) $a, (byte) $a, (byte) $14 }

zp[1]:2 [ main::i#2 main::i#1 point_init::point_idx#0 ]
reg byte y [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[2]:3 [ screen_fill::screen#2 screen_fill::screen#3 screen_fill::screen#1 point_init::abs16s1_return#2 point_init::abs16s1_return#5 point_init::abs16s1_return#6 point_init::abs16s1_return#0 ]
reg byte x [ screen_fill::x#2 screen_fill::x#1 ]
zp[2]:5 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 point_init::abs16s2_return#2 point_init::abs16s2_return#5 point_init::abs16s2_return#6 point_init::abs16s2_return#0 ]
reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ]
reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
zp[2]:7 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 divr16s::remu#3 divr16s::remu#7 divr16s::remu#8 divr16u::rem#4 divr16u::rem#3 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 divr16s::rem#0 divr16s::remu#1 point_init::$17 point_init::y_diff#0 ]
reg byte a [ main::$10 ]
zp[2]:9 [ bitmap_plot::x#0 divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16s::divisor#0 divr16u::divisor#0 divr16s::divisoru#1 point_init::x_diff#1 ]
reg byte x [ bitmap_plot::y#0 ]
zp[2]:11 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 divr16s::return#2 divr16s::return#6 divr16s::return#1 divr16s::resultu#0 divr16s::return#3 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 point_init::x_stepf#0 ]
reg byte x [ bitmap_plot::$1 ]
reg byte a [ point_init::$11 ]
zp[2]:13 [ point_init::$18 bitmap_plot::$0 divr16u::dividend#2 divr16u::dividend#0 ]
reg byte x [ point_init::$13 ]
zp[2]:15 [ point_init::$5 ]
zp[2]:17 [ point_init::$19 point_init::$6 ]
reg byte a [ point_init::$9 ]
reg byte a [ point_init::$10 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
zp[1]:19 [ bitmap_init::$7 bitmap_clear::y#4 bitmap_clear::y#1 screen_fill::y#4 screen_fill::y#1 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]
