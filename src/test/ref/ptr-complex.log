Eliminating unused variable with no statement main::$1

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::$8 = main::screen + $28
  main::$9 = main::$8 + main::i#2
  main::screen[main::i#2] = *main::$9
  main::i#1 = main::i#2 + rangenext(0,$a)
  main::$10 = main::i#1 != rangelast(0,$a)
  if(main::$10) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::sc2#0 = main::screen + $51
  main::$2 = main::screen + $79
  *main::sc2#0 = *main::$2
  main::$3 = main::screen + $52
  main::$4 = main::screen + $7a
  *main::$3 = *main::$4
  main::j#0 = 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  main::j#2 = phi( main::@2/main::j#0, main::@3/main::j#1 )
  main::$11 = main::screen + $a0
  main::$12 = main::$11 + main::j#2
  main::$13 = main::screen + $c8
  main::$14 = main::$13 + main::j#2
  *main::$12 = *main::$14
  main::j#1 = main::j#2 + rangenext(0,$a)
  main::$15 = main::j#1 != rangelast(0,$a)
  if(main::$15) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  *((char *)$d020) = ++ *((char *)$d020)
  *((char *)$d000+$21) = -- *((char *)$d000+$21)
  *main::BG_COLOR = ++ *main::BG_COLOR
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
bool main::$10
char *main::$11
char *main::$12
char *main::$13
char *main::$14
bool main::$15
char *main::$2
char *main::$3
char *main::$4
char *main::$8
char *main::$9
__constant char *main::BG_COLOR = (char *)$d020
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::j
char main::j#0
char main::j#1
char main::j#2
char *main::sc2
char *main::sc2#0
__constant char *main::screen = (char *)$400

Adding number conversion cast (unumber) $28 in main::$8 = main::screen + $28
Adding number conversion cast (unumber) $51 in main::sc2#0 = main::screen + $51
Adding number conversion cast (unumber) $79 in main::$2 = main::screen + $79
Adding number conversion cast (unumber) $52 in main::$3 = main::screen + $52
Adding number conversion cast (unumber) $7a in main::$4 = main::screen + $7a
Adding number conversion cast (unumber) $a0 in main::$11 = main::screen + $a0
Adding number conversion cast (unumber) $c8 in main::$13 = main::screen + $c8
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant pointer cast (char *) 53280
Simplifying constant integer cast $28
Simplifying constant integer cast $51
Simplifying constant integer cast $79
Simplifying constant integer cast $52
Simplifying constant integer cast $7a
Simplifying constant integer cast $a0
Simplifying constant integer cast $c8
Simplifying constant pointer cast (char *) 53280
Simplifying constant pointer cast (char *) 53280
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $51
Finalized unsigned number type (char) $79
Finalized unsigned number type (char) $52
Finalized unsigned number type (char) $7a
Finalized unsigned number type (char) $a0
Finalized unsigned number type (char) $c8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition main::$10 [7] if(main::i#1!=rangelast(0,$a)) goto main::@1
Simple Condition main::$15 [23] if(main::j#1!=rangelast(0,$a)) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [2] main::$8 = main::screen + $28
Constant right-side identified [8] main::sc2#0 = main::screen + $51
Constant right-side identified [9] main::$2 = main::screen + $79
Constant right-side identified [11] main::$3 = main::screen + $52
Constant right-side identified [12] main::$4 = main::screen + $7a
Constant right-side identified [16] main::$11 = main::screen + $a0
Constant right-side identified [18] main::$13 = main::screen + $c8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#0 = 0
Constant main::$8 = main::screen+$28
Constant main::sc2#0 = main::screen+$51
Constant main::$2 = main::screen+$79
Constant main::$3 = main::screen+$52
Constant main::$4 = main::screen+$7a
Constant main::j#0 = 0
Constant main::$11 = main::screen+$a0
Constant main::$13 = main::screen+$c8
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [5] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [7] if(main::i#1!=rangelast(0,$a)) goto main::@1 to $b
Resolved ranged next value [21] main::j#1 = ++ main::j#2 to ++
Resolved ranged comparison value [23] if(main::j#1!=rangelast(0,$a)) goto main::@3 to $b
Converting *(pointer+n) to pointer[n] [4] main::screen[main::i#2] = *main::$9  -- main::$8[main::i#2]
Converting *(pointer+n) to pointer[n] [20] *main::$12 = *main::$14  -- main::$13[main::j#2]
Converting *(pointer+n) to pointer[n] [20] *main::$12 = main::$13[main::j#2]  -- main::$11[main::j#2]
Successful SSA optimization Pass2InlineDerefIdx
Eliminating unused variable main::$9 and assignment [1] main::$9 = main::$8 + main::i#2
Eliminating unused variable main::$12 and assignment [8] main::$12 = main::$11 + main::j#2
Eliminating unused variable main::$14 and assignment [9] main::$14 = main::$13 + main::j#2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $b in [3] if(main::i#1!=$b) goto main::@1
Adding number conversion cast (unumber) $b in [9] if(main::j#1!=$b) goto main::@3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $b
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $b
Finalized unsigned number type (char) $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::j#0
Constant inlined main::$2 = main::screen+$79
Constant inlined main::i#0 = 0
Constant inlined main::$13 = main::screen+$c8
Constant inlined main::$3 = main::screen+$52
Constant inlined main::$4 = main::screen+$7a
Constant inlined main::j#0 = 0
Constant inlined main::$8 = main::screen+$28
Constant inlined main::$11 = main::screen+$a0
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (unsigned int) $d000
Finalized unsigned number type (char) $21
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting main::@5(between main::@1 and main::@1)
Added new block during phi lifting main::@6(between main::@3 and main::@3)
Adding NOP phi() at start of main
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [15] main::j#3 = main::j#1
Coalesced [16] main::i#3 = main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@6
Culled Empty Block label main::@5
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [2] main::screen[main::i#2] = (main::screen+$28)[main::i#2]
  [3] main::i#1 = ++ main::i#2
  [4] if(main::i#1!=$b) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [5] *main::sc2#0 = *(main::screen+$79)
  [6] *(main::screen+$52) = *(main::screen+$7a)
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  [7] main::j#2 = phi( main::@2/0, main::@3/main::j#1 )
  [8] (main::screen+$a0)[main::j#2] = (main::screen+$c8)[main::j#2]
  [9] main::j#1 = ++ main::j#2
  [10] if(main::j#1!=$b) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  [11] *((char *) 53280) = ++ *((char *) 53280)
  [12] *((char *)$d000+$21) = -- *((char *)$d000+$21)
  [13] *main::BG_COLOR = ++ *main::BG_COLOR
  to:main::@return
main::@return: scope:[main]  from main::@4
  [14] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
char main::i
char main::i#1 // 16.5
char main::i#2 // 22.0
char main::j
char main::j#1 // 16.5
char main::j#2 // 22.0
char *main::sc2

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::j#2 main::j#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::screen[main::i#2] = (main::screen+$28)[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [5] *main::sc2#0 = *(main::screen+$79) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] *(main::screen+$52) = *(main::screen+$7a) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] (main::screen+$a0)[main::j#2] = (main::screen+$c8)[main::j#2] [ main::j#2 ] (  [ main::j#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::j#2 main::j#1 ]
Statement [2] main::screen[main::i#2] = (main::screen+$28)[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [5] *main::sc2#0 = *(main::screen+$79) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] *(main::screen+$52) = *(main::screen+$7a) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] (main::screen+$a0)[main::j#2] = (main::screen+$c8)[main::j#2] [ main::j#2 ] (  [ main::j#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::j#2 main::j#1 ] : zp[1]:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 38.5: zp[1]:2 [ main::i#2 main::i#1 ] 38.5: zp[1]:3 [ main::j#2 main::j#1 ] 
Uplift Scope [] 

Uplifting [main] best 583 combination reg byte x [ main::i#2 main::i#1 ] reg byte x [ main::j#2 main::j#1 ] 
Uplifting [] best 583 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test some complex pointers
  // Upstart
  // Commodore 64 PRG executable file
.file [name="ptr-complex.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    // RValue pointer expression (constant)
    .label screen = $400
    // Increment on a const named pointer
    .label BG_COLOR = $d020
    // LValue pointer expression (constant - through tmp variable)
    .label sc2 = screen+$51
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // RValue pointer expression (variable)
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::screen[main::i#2] = (main::screen+$28)[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screen+$28,x
    sta screen,x
    // [3] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [4] if(main::i#1!=$b) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne __b1_from___b1
    jmp __b2
    // main::@2
  __b2:
    // [5] *main::sc2#0 = *(main::screen+$79) -- _deref_pbuc1=_deref_pbuc2 
    lda screen+$79
    sta sc2
    // [6] *(main::screen+$52) = *(main::screen+$7a) -- _deref_pbuc1=_deref_pbuc2 
    // LValue pointer expression (constant - directly)
    lda screen+$7a
    sta screen+$52
    // [7] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [7] phi main::j#2 = 0 [phi:main::@2->main::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
  // LValue pointer expression (variable - directly)
    // [7] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  __b3_from___b3:
    // [7] phi main::j#2 = main::j#1 [phi:main::@3->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [8] (main::screen+$a0)[main::j#2] = (main::screen+$c8)[main::j#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screen+$c8,x
    sta screen+$a0,x
    // [9] main::j#1 = ++ main::j#2 -- vbuxx=_inc_vbuxx 
    inx
    // [10] if(main::j#1!=$b) goto main::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne __b3_from___b3
    jmp __b4
    // main::@4
  __b4:
    // [11] *((char *) 53280) = ++ *((char *) 53280) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc $d020
    // [12] *((char *)$d000+$21) = -- *((char *)$d000+$21) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec $d000+$21
    // [13] *main::BG_COLOR = ++ *main::BG_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    jmp __breturn
    // main::@return
  __breturn:
    // [14] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b3_from___b3 with __b3
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b4:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
__constant char *main::BG_COLOR = (char *) 53280
char main::i
char main::i#1 // reg byte x 16.5
char main::i#2 // reg byte x 22.0
char main::j
char main::j#1 // reg byte x 16.5
char main::j#2 // reg byte x 22.0
char *main::sc2
__constant char *main::sc2#0 = main::screen+$51 // sc2
__constant char *main::screen = (char *) 1024

reg byte x [ main::i#2 main::i#1 ]
reg byte x [ main::j#2 main::j#1 ]


FINAL ASSEMBLER
Score: 400

  // File Comments
// Test some complex pointers
  // Upstart
  // Commodore 64 PRG executable file
.file [name="ptr-complex.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    // RValue pointer expression (constant)
    .label screen = $400
    // Increment on a const named pointer
    .label BG_COLOR = $d020
    // LValue pointer expression (constant - through tmp variable)
    .label sc2 = screen+$51
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // RValue pointer expression (variable)
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // screen[i] = *(screen+40+i)
    // [2] main::screen[main::i#2] = (main::screen+$28)[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screen+$28,x
    sta screen,x
    // for(byte i : 0..10)
    // [3] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [4] if(main::i#1!=$b) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne __b1
    // main::@2
    // *sc2 = *(screen+121)
    // [5] *main::sc2#0 = *(main::screen+$79) -- _deref_pbuc1=_deref_pbuc2 
    lda screen+$79
    sta sc2
    // *(screen+82) = *(screen+122)
    // [6] *(main::screen+$52) = *(main::screen+$7a) -- _deref_pbuc1=_deref_pbuc2 
    // LValue pointer expression (constant - directly)
    lda screen+$7a
    sta screen+$52
    // [7] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [7] phi main::j#2 = 0 [phi:main::@2->main::@3#0] -- vbuxx=vbuc1 
    ldx #0
  // LValue pointer expression (variable - directly)
    // [7] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
    // [7] phi main::j#2 = main::j#1 [phi:main::@3->main::@3#0] -- register_copy 
    // main::@3
  __b3:
    // *(screen+160+j) = *(screen+200+j)
    // [8] (main::screen+$a0)[main::j#2] = (main::screen+$c8)[main::j#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screen+$c8,x
    sta screen+$a0,x
    // for(byte j : 0..10)
    // [9] main::j#1 = ++ main::j#2 -- vbuxx=_inc_vbuxx 
    inx
    // [10] if(main::j#1!=$b) goto main::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne __b3
    // main::@4
    // ++*(byte*)$d020;
    // [11] *((char *) 53280) = ++ *((char *) 53280) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc $d020
    // --*(byte*)($d000+$21);
    // [12] *((char *)$d000+$21) = -- *((char *)$d000+$21) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec $d000+$21
    // ++*BG_COLOR;
    // [13] *main::BG_COLOR = ++ *main::BG_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    // main::@return
    // }
    // [14] return 
    rts
}
  // File Data

