// Implementation of functions found int C stdlib.h / stdlib.c

// Start of the heap used by malloc()
unsigned char* HEAP_START = 0xc000;

// Head of the heap. Moved forward for each malloc()
unsigned char* heap_head = HEAP_START;

// Allocates a block of size bytes of memory, returning a pointer to the beginning of the block.
// The content of the newly allocated block of memory is not initialized, remaining with indeterminate values.
void* malloc(unsigned int size) {
    unsigned char* mem = heap_head;
    heap_head+= size;
    return mem;
}

// A block of memory previously allocated by a call to malloc is deallocated, making it available again for further allocations.
// If ptr is a null pointer, the function does nothing.
void free(void* ptr) {
}

// Searches an array of nitems unsigned words, the initial member of which is pointed to by base, for a member that matches the value key.
// - key - The value to look for
// - items - Pointer to the start of the array to search in
// - num - The number of items in the array
// Returns pointer to an entry in the array that matches the search key
word* bsearch16u(word key, word* items, byte num) {
	while (num > 0) {
		word* pivot = items + (num >> 1);
		signed word result = (signed word)key-(signed word)*pivot;
		if (result == 0)
			return pivot;
		if (result > 0) {
			items = pivot+1;
			num--;
		}
		num >>= 1;
	}
	// not found - return closest lower value
    return *items<=key?items:items-1;
}