PARSING src/test/java/dk/camelot64/kickc/test/signed-bytes.kc

void main() {
    byte* screen = $0400;
    byte j = 0;
    signed byte i = -127;
    while(i<127) {
        screen[j] = (byte)i;
        i++;
        j++;
    }

}
Adding pre/post-modifier (signed byte) main::i ← ++ (signed byte) main::i
Adding pre/post-modifier (byte) main::j ← ++ (byte) main::j

STATEMENTS
proc (void()) main()
  (byte*) main::screen ← (word/signed word) 1024
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  (signed byte/signed word~) main::$0 ← - (byte/signed byte/word/signed word) 127
  (signed byte) main::i ← (signed byte/signed word~) main::$0
main::@1:
  (boolean~) main::$1 ← (signed byte) main::i < (byte/signed byte/word/signed word) 127
  if((boolean~) main::$1) goto main::@2
  goto main::@3
main::@2:
  (byte~) main::$2 ← ((byte)) (signed byte) main::i
  *((byte*) main::screen + (byte) main::j) ← (byte~) main::$2
  (signed byte) main::i ← ++ (signed byte) main::i
  (byte) main::j ← ++ (byte) main::j
  goto main::@1
main::@3:
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(void()) main()
(signed byte/signed word~) main::$0
(boolean~) main::$1
(byte~) main::$2
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(signed byte) main::i
(byte) main::j
(byte*) main::screen

Promoting word/signed word to byte* in main::screen ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from
  (byte*) main::screen ← ((byte*)) (word/signed word) 1024
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  (signed byte/signed word~) main::$0 ← - (byte/signed byte/word/signed word) 127
  (signed byte) main::i ← (signed byte/signed word~) main::$0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$1 ← (signed byte) main::i < (byte/signed byte/word/signed word) 127
  if((boolean~) main::$1) goto main::@2
  to:main::@4
main::@2: scope:[main]  from main::@1 main::@5
  (byte~) main::$2 ← ((byte)) (signed byte) main::i
  *((byte*) main::screen + (byte) main::j) ← (byte~) main::$2
  (signed byte) main::i ← ++ (signed byte) main::i
  (byte) main::j ← ++ (byte) main::j
  to:main::@1
main::@4: scope:[main]  from main::@1
  to:main::@3
main::@3: scope:[main]  from main::@4 main::@6
  to:main::@return
main::@5: scope:[main]  from
  to:main::@2
main::@6: scope:[main]  from
  to:main::@3
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

Removing empty block main::@4
Removing empty block main::@3
Removing empty block main::@5
Removing empty block main::@6
PROCEDURE MODIFY VARIABLE ANALYSIS

Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::screen#0 ← ((byte*)) (word/signed word) 1024
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (signed byte/signed word~) main::$0 ← - (byte/signed byte/word/signed word) 127
  (signed byte) main::i#0 ← (signed byte/signed word~) main::$0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::j#3 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#1 )
  (byte*) main::screen#2 ← phi( main/(byte*) main::screen#0 main::@2/(byte*) main::screen#1 )
  (signed byte) main::i#2 ← phi( main/(signed byte) main::i#0 main::@2/(signed byte) main::i#1 )
  (boolean~) main::$1 ← (signed byte) main::i#2 < (byte/signed byte/word/signed word) 127
  if((boolean~) main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::j#2 ← phi( main::@1/(byte) main::j#3 )
  (byte*) main::screen#1 ← phi( main::@1/(byte*) main::screen#2 )
  (signed byte) main::i#3 ← phi( main::@1/(signed byte) main::i#2 )
  (byte~) main::$2 ← ((byte)) (signed byte) main::i#3
  *((byte*) main::screen#1 + (byte) main::j#2) ← (byte~) main::$2
  (signed byte) main::i#1 ← ++ (signed byte) main::i#3
  (byte) main::j#1 ← ++ (byte) main::j#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(signed byte/signed word~) main::$0
(boolean~) main::$1
(byte~) main::$2
(label) main::@1
(label) main::@2
(label) main::@return
(signed byte) main::i
(signed byte) main::i#0
(signed byte) main::i#1
(signed byte) main::i#2
(signed byte) main::i#3
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::j#3
(byte*) main::screen
(byte*) main::screen#0
(byte*) main::screen#1
(byte*) main::screen#2

OPTIMIZING CONTROL FLOW GRAPH
Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
Alias (signed byte) main::i#0 = (signed byte/signed word~) main::$0 
Alias (signed byte) main::i#2 = (signed byte) main::i#3 
Alias (byte*) main::screen#1 = (byte*) main::screen#2 
Alias (byte) main::j#2 = (byte) main::j#3 
Succesful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) main::screen#1
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) main::screen#1 (byte*) main::screen#0
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (boolean~) main::$1 if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) main::screen#0 = ((byte*))1024
Constant (const byte) main::j#0 = 0
Constant (const signed byte) main::i#0 = -127
Succesful SSA optimization Pass2ConstantIdentification
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const signed byte) main::i#0
Inlining constant with var siblings (const signed byte) main::i#0
Constant inlined main::i#0 = -(byte/signed byte/word/signed word) 127
Constant inlined main::j#0 = (byte/signed byte/word/signed word) 0
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @1 @end main main::@1 main::@return main::@2 
Block Sequence Planned @begin @1 @end main main::@1 main::@return main::@2 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 2 initial phi equivalence classes
Coalesced [12] main::i#4 ← main::i#1
Coalesced [13] main::j#4 ← main::j#1
Coalesced down to 2 phi equivalence classes
Block Sequence Planned @begin @1 @end main main::@1 main::@return main::@2 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ] ( )
main: scope:[main]  from @1
  [4] phi() [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::j#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte) main::j#1 ) [ main::i#2 main::j#2 ] ( main:2 [ main::i#2 main::j#2 ] )
  [5] (signed byte) main::i#2 ← phi( main/-(byte/signed byte/word/signed word) 127 main::@2/(signed byte) main::i#1 ) [ main::i#2 main::j#2 ] ( main:2 [ main::i#2 main::j#2 ] )
  [6] if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2 [ main::i#2 main::j#2 ] ( main:2 [ main::i#2 main::j#2 ] )
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return  [ ] ( main:2 [ ] )
  to:@return
main::@2: scope:[main]  from main::@1
  [8] (byte~) main::$2 ← ((byte)) (signed byte) main::i#2 [ main::i#2 main::j#2 main::$2 ] ( main:2 [ main::i#2 main::j#2 main::$2 ] )
  [9] *((const byte*) main::screen#0 + (byte) main::j#2) ← (byte~) main::$2 [ main::i#2 main::j#2 ] ( main:2 [ main::i#2 main::j#2 ] )
  [10] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 [ main::j#2 main::i#1 ] ( main:2 [ main::j#2 main::i#1 ] )
  [11] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::i#1 main::j#1 ] ( main:2 [ main::i#1 main::j#1 ] )
  to:main::@1

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @begin @end 
main dominated by  @1 @begin main 
main::@1 dominated by  @1 @begin main::@1 main 
main::@return dominated by  main::@return @1 @begin main::@1 main 
main::@2 dominated by  @1 @begin main::@1 main::@2 main 

NATURAL LOOPS
Found back edge: Loop head: main::@1 tails: main::@2 blocks: null
Populated: Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$2 22.0
(signed byte) main::i
(signed byte) main::i#1 11.0
(signed byte) main::i#2 11.0
(byte) main::j
(byte) main::j#1 22.0
(byte) main::j#2 6.6000000000000005
(byte*) main::screen

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
Added variable main::$2 to zero page equivalence class [ main::$2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ main::$2 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Allocated zp ZP_BYTE:4 [ main::$2 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .const screen = $400
    .label _2 = 4
    .label i = 2
    .label j = 3
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::j#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta j
  //SEG12 [5] phi (signed byte) main::i#2 = -(byte/signed byte/word/signed word) 127 [phi:main->main::@1#1] -- vbsz1=vbsc1 
    lda #-$7f
    sta i
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [6] if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2 [ main::i#2 main::j#2 ] ( main:2 [ main::i#2 main::j#2 ] ) -- vbsz1_lt_vbuc1_then_la1 
    lda i
    sec
    sbc #$7f
    bvc !+
    eor #$80
  !:
    bmi b2
    jmp breturn
  //SEG15 main::@return
  breturn:
  //SEG16 [7] return  [ ] ( main:2 [ ] )
    rts
  //SEG17 main::@2
  b2:
  //SEG18 [8] (byte~) main::$2 ← ((byte)) (signed byte) main::i#2 [ main::i#2 main::j#2 main::$2 ] ( main:2 [ main::i#2 main::j#2 main::$2 ] ) -- vbuz1=_byte_vbsz2 
    lda i
    sta _2
  //SEG19 [9] *((const byte*) main::screen#0 + (byte) main::j#2) ← (byte~) main::$2 [ main::i#2 main::j#2 ] ( main:2 [ main::i#2 main::j#2 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _2
    ldx j
    sta screen,x
  //SEG20 [10] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 [ main::j#2 main::i#1 ] ( main:2 [ main::j#2 main::i#1 ] ) -- vbsz1=_inc_vbsz1 
    inc i
  //SEG21 [11] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::i#1 main::j#1 ] ( main:2 [ main::i#1 main::j#1 ] ) -- vbuz1=_inc_vbuz1 
    inc j
  //SEG22 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG23 [5] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG24 [5] phi (signed byte) main::i#2 = (signed byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential register analysis [6] if(main::i#2<127) goto main::@2 missing fragment vbsxx_lt_vbuc1_then_la1 allocation: reg byte x [ main::i#2 main::i#1 ] 
Potential register analysis [6] if(main::i#2<127) goto main::@2 missing fragment vbsyy_lt_vbuc1_then_la1 allocation: reg byte y [ main::i#2 main::i#1 ] 
MISSING FRAGMENTS
  vbsxx_lt_vbuc1_then_la1
  vbsyy_lt_vbuc1_then_la1
Statement [6] if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2 [ main::i#2 main::j#2 ] ( main:2 [ main::i#2 main::j#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Potential register analysis [6] if(main::i#2<127) goto main::@2 missing fragment vbsxx_lt_vbuc1_then_la1 allocation: reg byte x [ main::i#2 main::i#1 ] 
Potential register analysis [6] if(main::i#2<127) goto main::@2 missing fragment vbsyy_lt_vbuc1_then_la1 allocation: reg byte y [ main::i#2 main::i#1 ] 
MISSING FRAGMENTS
  vbsxx_lt_vbuc1_then_la1
  vbsyy_lt_vbuc1_then_la1
Statement [6] if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2 [ main::i#2 main::j#2 ] ( main:2 [ main::i#2 main::j#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::j#2 main::j#1 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::$2 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 28.6: zp ZP_BYTE:3 [ main::j#2 main::j#1 ] 22: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 22: zp ZP_BYTE:4 [ main::$2 ] 
Uplift Scope [] 

Uplifting [main] best 468 combination reg byte x [ main::j#2 main::j#1 ] zp ZP_BYTE:2 [ main::i#2 main::i#1 ] reg byte a [ main::$2 ] 
Uplifting [] best 468 combination 
MISSING FRAGMENTS
  vbsxx_lt_vbuc1_then_la1
  vbsyy_lt_vbuc1_then_la1
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 468 combination zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
MISSING FRAGMENTS
  vbsyy_lt_vbuc1_then_la1

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .const screen = $400
    .label i = 2
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::j#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG12 [5] phi (signed byte) main::i#2 = -(byte/signed byte/word/signed word) 127 [phi:main->main::@1#1] -- vbsz1=vbsc1 
    lda #-$7f
    sta i
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [6] if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2 [ main::i#2 main::j#2 ] ( main:2 [ main::i#2 main::j#2 ] ) -- vbsz1_lt_vbuc1_then_la1 
    lda i
    sec
    sbc #$7f
    bvc !+
    eor #$80
  !:
    bmi b2
    jmp breturn
  //SEG15 main::@return
  breturn:
  //SEG16 [7] return  [ ] ( main:2 [ ] )
    rts
  //SEG17 main::@2
  b2:
  //SEG18 [8] (byte~) main::$2 ← ((byte)) (signed byte) main::i#2 [ main::i#2 main::j#2 main::$2 ] ( main:2 [ main::i#2 main::j#2 main::$2 ] ) -- vbuaa=_byte_vbsz1 
    lda i
  //SEG19 [9] *((const byte*) main::screen#0 + (byte) main::j#2) ← (byte~) main::$2 [ main::i#2 main::j#2 ] ( main:2 [ main::i#2 main::j#2 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta screen,x
  //SEG20 [10] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 [ main::j#2 main::i#1 ] ( main:2 [ main::j#2 main::i#1 ] ) -- vbsz1=_inc_vbsz1 
    inc i
  //SEG21 [11] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::i#1 main::j#1 ] ( main:2 [ main::i#1 main::j#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG22 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG23 [5] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG24 [5] phi (signed byte) main::i#2 = (signed byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Removing instruction b1_from_bbegin:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b1:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Removing instruction b1_from_b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(byte~) main::$2 reg byte a 22.0
(label) main::@1
(label) main::@2
(label) main::@return
(signed byte) main::i
(signed byte) main::i#1 i zp ZP_BYTE:2 11.0
(signed byte) main::i#2 i zp ZP_BYTE:2 11.0
(byte) main::j
(byte) main::j#1 reg byte x 22.0
(byte) main::j#2 reg byte x 6.6000000000000005
(byte*) main::screen
(const byte*) main::screen#0 screen = ((byte*))(word/signed word) 1024

zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
reg byte x [ main::j#2 main::j#1 ]
reg byte a [ main::$2 ]


FINAL ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
    .const screen = $400
    .label i = 2
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::j#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG12 [5] phi (signed byte) main::i#2 = -(byte/signed byte/word/signed word) 127 [phi:main->main::@1#1] -- vbsz1=vbsc1 
    lda #-$7f
    sta i
  //SEG13 main::@1
  b1:
  //SEG14 [6] if((signed byte) main::i#2<(byte/signed byte/word/signed word) 127) goto main::@2 [ main::i#2 main::j#2 ] ( main:2 [ main::i#2 main::j#2 ] ) -- vbsz1_lt_vbuc1_then_la1 
    lda i
    sec
    sbc #$7f
    bvc !+
    eor #$80
  !:
    bmi b2
  //SEG15 main::@return
  //SEG16 [7] return  [ ] ( main:2 [ ] )
    rts
  //SEG17 main::@2
  b2:
  //SEG18 [8] (byte~) main::$2 ← ((byte)) (signed byte) main::i#2 [ main::i#2 main::j#2 main::$2 ] ( main:2 [ main::i#2 main::j#2 main::$2 ] ) -- vbuaa=_byte_vbsz1 
    lda i
  //SEG19 [9] *((const byte*) main::screen#0 + (byte) main::j#2) ← (byte~) main::$2 [ main::i#2 main::j#2 ] ( main:2 [ main::i#2 main::j#2 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta screen,x
  //SEG20 [10] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 [ main::j#2 main::i#1 ] ( main:2 [ main::j#2 main::i#1 ] ) -- vbsz1=_inc_vbsz1 
    inc i
  //SEG21 [11] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::i#1 main::j#1 ] ( main:2 [ main::i#1 main::j#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG22 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG23 [5] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG24 [5] phi (signed byte) main::i#2 = (signed byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
}

