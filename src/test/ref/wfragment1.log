Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  move_enemy::obj_slot#0 = main::i#2
  call move_enemy 
  move_enemy::return#0 = move_enemy::return#2
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  main::i#1 = main::i#3 + rangenext(0,5)
  main::$1 = main::i#1 != rangelast(0,5)
  if(main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

bool move_enemy(byte move_enemy::obj_slot)
move_enemy: scope:[move_enemy]  from main::@1
  move_enemy::obj_slot#1 = phi( main::@1/move_enemy::obj_slot#0 )
  move_enemy::$0 = move_enemy::obj_slot#1 * SIZEOF_WORD
  OBJ_WORLD_X[move_enemy::$0] = OBJ_WORLD_X[move_enemy::$0] - 1
  move_enemy::return#1 = true
  to:move_enemy::@return
move_enemy::@return: scope:[move_enemy]  from move_enemy
  move_enemy::return#3 = phi( move_enemy/move_enemy::return#1 )
  move_enemy::return#2 = move_enemy::return#3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte MAX_OBJECTS = $10
const word* OBJ_WORLD_X[MAX_OBJECTS]  = { fill( MAX_OBJECTS, 0) }
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const byte SIZEOF_WORD = 2
void __start()
void main()
bool~ main::$1
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
bool move_enemy(byte move_enemy::obj_slot)
byte~ move_enemy::$0
byte move_enemy::obj_slot
byte move_enemy::obj_slot#0
byte move_enemy::obj_slot#1
bool move_enemy::return
bool move_enemy::return#0
bool move_enemy::return#1
bool move_enemy::return#2
bool move_enemy::return#3

Adding number conversion cast (unumber) 1 in OBJ_WORLD_X[move_enemy::$0] = OBJ_WORLD_X[move_enemy::$0] - 1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 
Alias move_enemy::return#1 = move_enemy::return#3 move_enemy::return#2 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values move_enemy::obj_slot#1 move_enemy::obj_slot#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$1 [7] if(main::i#1!=rangelast(0,5)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Constant move_enemy::return#1 = true
Successful SSA optimization Pass2ConstantIdentification
Constant move_enemy::return#0 = move_enemy::return#1
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [5] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [7] if(main::i#1!=rangelast(0,5)) goto main::@1 to 6
Eliminating unused constant move_enemy::return#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant move_enemy::return#1
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 6 in [4] if(main::i#1!=6) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 6
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Rewriting multiplication to use shift [6] move_enemy::$0 = move_enemy::obj_slot#0 * SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Finalized unsigned number type 2
Finalized unsigned number type 8
Finalized unsigned number type $a
Finalized unsigned number type $10
Successful SSA optimization Pass2FinalizeAllNumbers
Added new block during phi lifting main::@3(between main::@2 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to move_enemy:3 

Created 1 initial phi equivalence classes
Coalesced [7] main::i#4 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@3
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::i#2 = phi( main/0, main::@2/main::i#1 )
  [2] move_enemy::obj_slot#0 = main::i#2
  [3] call move_enemy 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] main::i#1 = ++ main::i#2
  [5] if(main::i#1!=6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [6] return 
  to:@return

bool move_enemy(byte move_enemy::obj_slot)
move_enemy: scope:[move_enemy]  from main::@1
  [7] move_enemy::$0 = move_enemy::obj_slot#0 << 1
  [8] OBJ_WORLD_X[move_enemy::$0] = OBJ_WORLD_X[move_enemy::$0] - 1
  to:move_enemy::@return
move_enemy::@return: scope:[move_enemy]  from move_enemy
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::i
byte main::i#1 16.5
byte main::i#2 11.0
bool move_enemy(byte move_enemy::obj_slot)
byte~ move_enemy::$0 303.0
byte move_enemy::obj_slot
byte move_enemy::obj_slot#0 112.0
bool move_enemy::return

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable move_enemy::obj_slot#0 to live range equivalence class [ move_enemy::obj_slot#0 ]
Added variable move_enemy::$0 to live range equivalence class [ move_enemy::$0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ move_enemy::obj_slot#0 ]
[ move_enemy::$0 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ move_enemy::obj_slot#0 ]
Allocated zp[1]:4 [ move_enemy::$0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] move_enemy::$0 = move_enemy::obj_slot#0 << 1 [ move_enemy::$0 ] ( move_enemy:3 [ main::i#2 move_enemy::$0 ] { { move_enemy::obj_slot#0 = main::i#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [8] OBJ_WORLD_X[move_enemy::$0] = OBJ_WORLD_X[move_enemy::$0] - 1 [ ] ( move_enemy:3 [ main::i#2 ] { { move_enemy::obj_slot#0 = main::i#2 } }  ) always clobbers reg byte a 
Statement [7] move_enemy::$0 = move_enemy::obj_slot#0 << 1 [ move_enemy::$0 ] ( move_enemy:3 [ main::i#2 move_enemy::$0 ] { { move_enemy::obj_slot#0 = main::i#2 } }  ) always clobbers reg byte a 
Statement [8] OBJ_WORLD_X[move_enemy::$0] = OBJ_WORLD_X[move_enemy::$0] - 1 [ ] ( move_enemy:3 [ main::i#2 ] { { move_enemy::obj_slot#0 = main::i#2 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ move_enemy::obj_slot#0 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ move_enemy::$0 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [move_enemy] 303: zp[1]:4 [ move_enemy::$0 ] 112: zp[1]:3 [ move_enemy::obj_slot#0 ] 
Uplift Scope [main] 27.5: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [RADIX] 
Uplift Scope [] 

Uplifting [move_enemy] best 425 combination reg byte a [ move_enemy::$0 ] reg byte a [ move_enemy::obj_slot#0 ] 
Uplifting [main] best 325 combination reg byte y [ main::i#2 main::i#1 ] 
Uplifting [RADIX] best 325 combination 
Uplifting [] best 325 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Adding a missing word-fragment for Travis Fisher
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const MAX_OBJECTS = $10
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] move_enemy::obj_slot#0 = main::i#2 -- vbuaa=vbuyy 
    tya
    // [3] call move_enemy 
    jsr move_enemy
    jmp __b2
    // main::@2
  __b2:
    // [4] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [5] if(main::i#1!=6) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #6
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // move_enemy
// move_enemy(byte register(A) obj_slot)
move_enemy: {
    // [7] move_enemy::$0 = move_enemy::obj_slot#0 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [8] OBJ_WORLD_X[move_enemy::$0] = OBJ_WORLD_X[move_enemy::$0] - 1 -- pwuc1_derefidx_vbuaa=pwuc1_derefidx_vbuaa_minus_1 
    tax
    lda OBJ_WORLD_X,x
    bne !+
    dec OBJ_WORLD_X+1,x
  !:
    dec OBJ_WORLD_X,x
    jmp __breturn
    // move_enemy::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data
  OBJ_WORLD_X: .fill 2*MAX_OBJECTS, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const nomodify byte MAX_OBJECTS = $10
const word* OBJ_WORLD_X[MAX_OBJECTS]  = { fill( MAX_OBJECTS, 0) }
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
void main()
byte main::i
byte main::i#1 reg byte y 16.5
byte main::i#2 reg byte y 11.0
bool move_enemy(byte move_enemy::obj_slot)
byte~ move_enemy::$0 reg byte a 303.0
byte move_enemy::obj_slot
byte move_enemy::obj_slot#0 reg byte a 112.0
bool move_enemy::return

reg byte y [ main::i#2 main::i#1 ]
reg byte a [ move_enemy::obj_slot#0 ]
reg byte a [ move_enemy::$0 ]


FINAL ASSEMBLER
Score: 202

  // File Comments
// Adding a missing word-fragment for Travis Fisher
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const MAX_OBJECTS = $10
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // move_enemy(i)
    // [2] move_enemy::obj_slot#0 = main::i#2 -- vbuaa=vbuyy 
    tya
    // [3] call move_enemy 
    jsr move_enemy
    // main::@2
    // for(byte i:0..5)
    // [4] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [5] if(main::i#1!=6) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #6
    bne __b1
    // main::@return
    // }
    // [6] return 
    rts
}
  // move_enemy
// move_enemy(byte register(A) obj_slot)
move_enemy: {
    // OBJ_WORLD_X[obj_slot] -= 1
    // [7] move_enemy::$0 = move_enemy::obj_slot#0 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [8] OBJ_WORLD_X[move_enemy::$0] = OBJ_WORLD_X[move_enemy::$0] - 1 -- pwuc1_derefidx_vbuaa=pwuc1_derefidx_vbuaa_minus_1 
    tax
    lda OBJ_WORLD_X,x
    bne !+
    dec OBJ_WORLD_X+1,x
  !:
    dec OBJ_WORLD_X,x
    // move_enemy::@return
    // }
    // [9] return 
    rts
}
  // File Data
  OBJ_WORLD_X: .fill 2*MAX_OBJECTS, 0

