Setting inferred volatile on symbol affected by address-of (dword*~) main::$0 ← & (dword) main::long_ptr

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (dword) main::long_ptr#0 ← (number) $12345678
  (dword*~) main::$0 ← & (dword) main::long_ptr#0
  (byte~) main::$1 ← < (dword*~) main::$0
  (byte) main::long_ptr_zp#0 ← (byte~) main::$1
  asm { nop lda(long_ptr_zp),y sta$ff  }
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(dword*~) main::$0
(byte~) main::$1
(label) main::@return
(dword) main::long_ptr
(dword) main::long_ptr#0
(byte) main::long_ptr_zp
(byte) main::long_ptr_zp#0

Adding number conversion cast (unumber) $12345678 in (dword) main::long_ptr#0 ← (number) $12345678
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (dword) main::long_ptr#0 ← (unumber)(number) $12345678
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast $12345678
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (dword) $12345678
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte) main::long_ptr_zp#0 = (byte~) main::$1 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [1] (dword*~) main::$0 ← & (dword) main::long_ptr#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const dword*) main::$0 = &main::long_ptr#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [1] (byte) main::long_ptr_zp#0 ← < (const dword*) main::$0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::long_ptr_zp#0 = <main::$0
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$0 = &(dword) main::long_ptr#0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] (dword) main::long_ptr#0 ← (dword) $12345678
  asm { nop lda(long_ptr_zp),y sta$ff  }
  to:main::@return
main::@return: scope:[main]  from main
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(dword) main::long_ptr
(dword) main::long_ptr#0 20.0
(byte) main::long_ptr_zp

Initial phi equivalence classes
Complete equivalence classes
[ main::long_ptr#0 ]
Allocated zp[4]:2 [ main::long_ptr#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests creating a long (32bit) pointer on zeropage for 45GS02 flat memory access
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const long_ptr_zp = <long_ptr
    .label long_ptr = 2
    // [4] (dword) main::long_ptr#0 ← (dword) $12345678 -- vduz1=vduc1 
    lda #<$12345678
    sta.z long_ptr
    lda #>$12345678
    sta.z long_ptr+1
    lda #<$12345678>>$10
    sta.z long_ptr+2
    lda #>$12345678>>$10
    sta.z long_ptr+3
    // asm { nop lda(long_ptr_zp),y sta$ff  }
    nop
    lda (long_ptr_zp),y
    sta.z $ff
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] (dword) main::long_ptr#0 ← (dword) $12345678 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement asm { nop lda(long_ptr_zp),y sta$ff  } always clobbers reg byte a 
Potential registers zp[4]:2 [ main::long_ptr#0 ] : zp[4]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 20: zp[4]:2 [ main::long_ptr#0 ] 
Uplift Scope [] 

Uplifting [main] best 51 combination zp[4]:2 [ main::long_ptr#0 ] 
Uplifting [] best 51 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests creating a long (32bit) pointer on zeropage for 45GS02 flat memory access
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const long_ptr_zp = <long_ptr
    .label long_ptr = 2
    // [4] (dword) main::long_ptr#0 ← (dword) $12345678 -- vduz1=vduc1 
    lda #<$12345678
    sta.z long_ptr
    lda #>$12345678
    sta.z long_ptr+1
    lda #<$12345678>>$10
    sta.z long_ptr+2
    lda #>$12345678>>$10
    sta.z long_ptr+3
    // asm { nop lda(long_ptr_zp),y sta$ff  }
    nop
    lda (long_ptr_zp),y
    sta.z $ff
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@return
(dword) main::long_ptr
(dword) main::long_ptr#0 long_ptr zp[4]:2 20.0
(byte) main::long_ptr_zp
(const byte) main::long_ptr_zp#0 long_ptr_zp = <&(dword) main::long_ptr#0

zp[4]:2 [ main::long_ptr#0 ]


FINAL ASSEMBLER
Score: 36

  // File Comments
// Tests creating a long (32bit) pointer on zeropage for 45GS02 flat memory access
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .const long_ptr_zp = <long_ptr
    .label long_ptr = 2
    // long_ptr = 0x12345678
    // [4] (dword) main::long_ptr#0 ← (dword) $12345678 -- vduz1=vduc1 
    lda #<$12345678
    sta.z long_ptr
    lda #>$12345678
    sta.z long_ptr+1
    lda #<$12345678>>$10
    sta.z long_ptr+2
    lda #>$12345678>>$10
    sta.z long_ptr+3
    // asm
    // asm { nop lda(long_ptr_zp),y sta$ff  }
    nop
    lda (long_ptr_zp),y
    sta.z $ff
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

