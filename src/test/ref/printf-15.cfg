
(void()) __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN
  [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  [8] phi()
  [9] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  [10] phi()
  [11] call cputs 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call cputs 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [14] return 
  to:@return

(void()) clrscr()
clrscr: scope:[clrscr]  from main
  [15] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [16] (byte*) clrscr::line_cols#5 ← phi( clrscr/(const nomodify byte*) COLORRAM clrscr::@5/(byte*) clrscr::line_cols#1 )
  [16] (byte*) clrscr::line_text#5 ← phi( clrscr/(const nomodify byte*) DEFAULT_SCREEN clrscr::@5/(byte*) clrscr::line_text#1 )
  [16] (byte) clrscr::l#2 ← phi( clrscr/(byte) 0 clrscr::@5/(byte) clrscr::l#1 )
  [17] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [18] (byte) conio_cursor_x ← (byte) 0
  [19] (byte) conio_cursor_y ← (byte) 0
  [20] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN
  [21] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [22] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [23] (byte) clrscr::c#2 ← phi( clrscr::@1/(byte) 0 clrscr::@4/(byte) clrscr::c#1 )
  [24] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [25] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28
  [26] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28
  [27] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [28] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' '
  [29] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) LIGHT_BLUE
  [30] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2
  to:clrscr::@3

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@1 main::@2
  [31] (to_nomodify byte*) cputs::s#4 ← phi( main::@1/(const byte*) main::s main::@2/(const byte*) main::s1 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [32] (to_nomodify byte*) cputs::s#3 ← phi( cputs/(to_nomodify byte*) cputs::s#4 cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [33] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#3)
  [34] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#3
  [35] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [36] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [37] (byte) cputc::c#0 ← (byte) cputs::c#1
  [38] call cputc 
  to:cputs::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2
  [39] if((byte) cputc::c#0==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [40] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#0
  [41] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE
  [42] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [43] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [44] phi()
  [45] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [46] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [47] phi()
  [48] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [49] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28
  [50] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28
  [51] (byte) conio_cursor_x ← (byte) 0
  [52] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [53] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [54] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputln
  [55] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [56] phi()
  [57] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [58] phi()
  [59] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [60] phi()
  [61] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [62] phi()
  [63] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [64] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28
  [65] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28
  [66] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [67] return 
  to:@return

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [68] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN cscroll::@2/(void*)(const nomodify byte*) COLORRAM )
  [68] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) COLORRAM+(byte) $28 )
  [69] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [70] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [71] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [72] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [72] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [73] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [74] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [75] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [76] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [77] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [78] (byte) memset::c#4 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(const nomodify byte) LIGHT_BLUE )
  [78] (void*) memset::str#3 ← phi( cscroll::@3/(void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [79] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28
  [80] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [81] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [82] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [83] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [84] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [85] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2
