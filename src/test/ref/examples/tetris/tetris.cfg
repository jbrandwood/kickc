@begin: scope:[]  from
  [0] phi()
  to:@14
@14: scope:[]  from @begin
  [1] (byte) render_screen_showing#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  kickasm(location (const byte*) PLAYFIELD_CHARSET#0) {{ .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "playfield-screen.imap"
 }}
  kickasm(location (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0) {{ // Load chars for the screen
  .var screen = LoadBinary("playfield-screen.iscr")
   // Load extended colors for the screen
  .var extended = LoadBinary("playfield-extended.col")
  // screen.get(i)+1 because the charset is loaded into PLAYFIELD_CHARSET+8
  // extended.get(i)-1 because the extended colors are 1-based (1/2/3/4)
  // <<6 to move extended colors to the upper 2 bits
  .fill screen.getSize(), ( (screen.get(i)+1) | (extended.get(i)-1)<<6 )
 }}
  kickasm(location (const byte*) PLAYFIELD_COLORS_ORIGINAL#0) {{ .import binary "playfield-screen.col"
 }}
  to:@22
@22: scope:[]  from @14
  kickasm(location (const byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000))
	// Put the sprites into memory 
	.for(var sy=0;sy<10;sy++) {
	    .var sprite_gfx_y = sy*20
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21)
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y)
	            }
	        }
	    	.byte 0
	  	}
	}
 }}
  to:@23
@23: scope:[]  from @22
  [6] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0
  [7] (byte) irq_sprite_ypos#0 ← (const byte) SPRITES_FIRST_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 21
  to:toSpritePtr1
toSpritePtr1: scope:[]  from @23
  [8] phi()
  to:@38
@38: scope:[]  from toSpritePtr1
  [9] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0+(byte/signed byte/word/signed word/dword/signed dword) 3
  [10] (byte) irq_cnt#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@37
@37: scope:[]  from @38
  [11] phi()
  [12] call main 
  to:@end
@end: scope:[]  from @37
  [13] phi()
main: scope:[main]  from @37
  [14] phi()
  [15] call sid_rnd_init 
  to:main::@25
main::@25: scope:[main]  from main
  asm { sei  }
  [17] call render_init 
  to:main::@26
main::@26: scope:[main]  from main::@25
  [18] phi()
  [19] call sprites_init 
  to:main::@27
main::@27: scope:[main]  from main::@26
  [20] phi()
  [21] call sprites_irq_init 
  to:main::@28
main::@28: scope:[main]  from main::@27
  [22] phi()
  [23] call play_init 
  to:main::@29
main::@29: scope:[main]  from main::@28
  [24] phi()
  [25] call play_spawn_current 
  to:main::@30
main::@30: scope:[main]  from main::@29
  [26] phi()
  [27] call render_playfield 
  to:main::@31
main::@31: scope:[main]  from main::@30
  [28] (byte~) current_ypos#99 ← (byte) current_ypos#22
  [29] (byte~) current_xpos#125 ← (byte) current_xpos#28
  [30] (byte*~) current_piece_gfx#115 ← (byte*) current_piece_gfx#21
  [31] (byte~) current_piece_char#103 ← (byte) current_piece_char#16
  [32] call render_moving 
  [33] (byte*~) current_piece#88 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3)
  to:main::@1
main::@1: scope:[main]  from main::@12 main::@31
  [34] (byte) level_bcd#11 ← phi( main::@12/(byte) level_bcd#17 main::@31/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [34] (byte) level#10 ← phi( main::@12/(byte) level#16 main::@31/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [34] (dword) score_bcd#18 ← phi( main::@12/(dword) score_bcd#14 main::@31/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [34] (word) lines_bcd#19 ← phi( main::@12/(word) lines_bcd#15 main::@31/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [34] (byte) current_movedown_counter#16 ← phi( main::@12/(byte) current_movedown_counter#14 main::@31/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [34] (byte) keyboard_events_size#19 ← phi( main::@12/(byte) keyboard_events_size#16 main::@31/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [34] (byte) game_over#19 ← phi( main::@12/(byte) game_over#14 main::@31/(byte) game_over#15 )
  [34] (byte) current_ypos#25 ← phi( main::@12/(byte) current_ypos#17 main::@31/(byte) current_ypos#22 )
  [34] (byte) current_xpos#115 ← phi( main::@12/(byte) current_xpos#17 main::@31/(byte) current_xpos#28 )
  [34] (byte*) current_piece_gfx#105 ← phi( main::@12/(byte*) current_piece_gfx#16 main::@31/(byte*) current_piece_gfx#21 )
  [34] (byte) current_orientation#12 ← phi( main::@12/(byte) current_orientation#16 main::@31/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [34] (byte) current_piece_char#19 ← phi( main::@12/(byte) current_piece_char#14 main::@31/(byte) current_piece_char#16 )
  [34] (byte*) current_piece#20 ← phi( main::@12/(byte*) current_piece#14 main::@31/(byte*~) current_piece#88 )
  [34] (byte) current_movedown_slow#14 ← phi( main::@12/(byte) current_movedown_slow#21 main::@31/(byte) current_movedown_slow#1 )
  [34] (byte) render_screen_render#17 ← phi( main::@12/(byte) render_screen_render#33 main::@31/(byte/signed byte/word/signed word/dword/signed dword) 64 )
  [34] (byte) render_screen_show#17 ← phi( main::@12/(byte) render_screen_show#29 main::@31/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  to:main::@4
main::@4: scope:[main]  from main::@1 main::@4
  [35] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  [36] (byte~) main::$9 ← (byte) render_screen_show#17 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [37] *((const byte*) BORDERCOL#0) ← (byte~) main::$9
  [38] call render_show 
  to:main::@33
main::@33: scope:[main]  from main::@6
  [39] phi()
  [40] call keyboard_event_scan 
  to:main::@34
main::@34: scope:[main]  from main::@33
  [41] phi()
  [42] call keyboard_event_get 
  [43] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:main::@35
main::@35: scope:[main]  from main::@34
  [44] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3
  [45] if((byte) game_over#19==(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@7
  to:main::@9
main::@9: scope:[main]  from main::@35 main::@9
  [46] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0)
  to:main::@9
main::@7: scope:[main]  from main::@35
  [47] (byte) play_movement::key_event#0 ← (byte) main::key_event#0
  [48] call play_movement 
  [49] (byte) play_movement::return#3 ← (byte) play_movement::return#2
  to:main::@36
main::@36: scope:[main]  from main::@7
  [50] (byte) main::render#1 ← (byte) play_movement::return#3
  to:main::@11
main::@11: scope:[main]  from main::@36
  [51] if((byte) main::render#1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@12
  to:main::@23
main::@23: scope:[main]  from main::@11
  [52] (byte~) render_screen_render#69 ← (byte) render_screen_render#17
  [53] call render_playfield 
  to:main::@37
main::@37: scope:[main]  from main::@23
  [54] (byte~) current_ypos#100 ← (byte) current_ypos#17
  [55] (byte~) render_screen_render#68 ← (byte) render_screen_render#17
  [56] (byte~) current_xpos#126 ← (byte) current_xpos#17
  [57] (byte*~) current_piece_gfx#116 ← (byte*) current_piece_gfx#16
  [58] (byte~) current_piece_char#104 ← (byte) current_piece_char#14
  [59] call render_moving 
  to:main::@38
main::@38: scope:[main]  from main::@37
  [60] phi()
  [61] call render_score 
  to:main::@39
main::@39: scope:[main]  from main::@38
  [62] phi()
  [63] call render_screen_swap 
  to:main::@12
main::@12: scope:[main]  from main::@11 main::@39
  [64] (byte) render_screen_render#33 ← phi( main::@11/(byte) render_screen_render#17 main::@39/(byte) render_screen_render#11 )
  [64] (byte) render_screen_show#29 ← phi( main::@11/(byte) render_screen_show#17 main::@39/(byte) render_screen_show#13 )
  [65] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
render_screen_swap: scope:[render_screen_swap]  from main::@39
  [66] (byte) render_screen_render#11 ← (byte) render_screen_render#17 ^ (byte/signed byte/word/signed word/dword/signed dword) 64
  [67] (byte) render_screen_show#13 ← (byte) render_screen_show#17 ^ (byte/signed byte/word/signed word/dword/signed dword) 64
  to:render_screen_swap::@return
render_screen_swap::@return: scope:[render_screen_swap]  from render_screen_swap
  [68] return 
  to:@return
render_score: scope:[render_score]  from main::@38
  [69] if((byte) render_screen_render#17==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_score::@2
  to:render_score::@3
render_score::@3: scope:[render_score]  from render_score
  [70] phi()
  to:render_score::@2
render_score::@2: scope:[render_score]  from render_score render_score::@3
  [71] (byte*) render_score::screen#2 ← phi( render_score/(const byte*) PLAYFIELD_SCREEN_1#0 render_score::@3/(const byte*) PLAYFIELD_SCREEN_2#0 )
  [72] (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#2
  [73] (byte) render_bcd::bcd#0 ← *((const byte*) render_score::score_bytes#0+(byte/signed byte/word/signed word/dword/signed dword) 2)
  [74] call render_bcd 
  to:render_score::@5
render_score::@5: scope:[render_score]  from render_score::@2
  [75] (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#2
  [76] (byte) render_bcd::bcd#1 ← *((const byte*) render_score::score_bytes#0+(byte/signed byte/word/signed word/dword/signed dword) 1)
  [77] call render_bcd 
  to:render_score::@6
render_score::@6: scope:[render_score]  from render_score::@5
  [78] (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#2
  [79] (byte) render_bcd::bcd#2 ← *((const byte*) render_score::score_bytes#0)
  [80] call render_bcd 
  to:render_score::@7
render_score::@7: scope:[render_score]  from render_score::@6
  [81] (byte) render_bcd::bcd#3 ← > (word) lines_bcd#15
  [82] (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#2
  [83] call render_bcd 
  to:render_score::@8
render_score::@8: scope:[render_score]  from render_score::@7
  [84] (byte) render_bcd::bcd#4 ← < (word) lines_bcd#15
  [85] (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#2
  [86] call render_bcd 
  to:render_score::@9
render_score::@9: scope:[render_score]  from render_score::@8
  [87] (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#2
  [88] (byte) render_bcd::bcd#5 ← (byte) level_bcd#17
  [89] call render_bcd 
  to:render_score::@return
render_score::@return: scope:[render_score]  from render_score::@9
  [90] return 
  to:@return
render_bcd: scope:[render_bcd]  from render_score::@2 render_score::@5 render_score::@6 render_score::@7 render_score::@8 render_score::@9
  [91] (byte) render_bcd::bcd#6 ← phi( render_score::@2/(byte) render_bcd::bcd#0 render_score::@5/(byte) render_bcd::bcd#1 render_score::@6/(byte) render_bcd::bcd#2 render_score::@7/(byte) render_bcd::bcd#3 render_score::@8/(byte) render_bcd::bcd#4 render_score::@9/(byte) render_bcd::bcd#5 )
  [91] (byte) render_bcd::only_low#6 ← phi( render_score::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 render_score::@5/(byte/signed byte/word/signed word/dword/signed dword) 0 render_score::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 render_score::@7/(byte/signed byte/word/signed word/dword/signed dword) 1 render_score::@8/(byte/signed byte/word/signed word/dword/signed dword) 0 render_score::@9/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [91] (word) render_bcd::offset#6 ← phi( render_score::@2/(const word) render_score::score_offset#0 render_score::@5/(const word) render_score::score_offset#0+(byte/signed byte/word/signed word/dword/signed dword) 2 render_score::@6/(const word) render_score::score_offset#0+(byte/signed byte/word/signed word/dword/signed dword) 4 render_score::@7/(const word) render_score::lines_offset#0 render_score::@8/(const word) render_score::lines_offset#0+(byte/signed byte/word/signed word/dword/signed dword) 1 render_score::@9/(const word) render_score::level_offset#0 )
  [91] (byte*) render_bcd::screen#6 ← phi( render_score::@2/(byte*) render_bcd::screen#0 render_score::@5/(byte*) render_bcd::screen#1 render_score::@6/(byte*) render_bcd::screen#2 render_score::@7/(byte*) render_bcd::screen#3 render_score::@8/(byte*) render_bcd::screen#4 render_score::@9/(byte*) render_bcd::screen#5 )
  [92] (byte*) render_bcd::screen_pos#0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6
  [93] if((byte) render_bcd::only_low#6!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_bcd::@1
  to:render_bcd::@2
render_bcd::@2: scope:[render_bcd]  from render_bcd
  [94] (byte~) render_bcd::$3 ← (byte) render_bcd::bcd#6 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [95] (byte~) render_bcd::$4 ← (const byte) render_bcd::ZERO_CHAR#0 + (byte~) render_bcd::$3
  [96] *((byte*) render_bcd::screen_pos#0) ← (byte~) render_bcd::$4
  [97] (byte*) render_bcd::screen_pos#2 ← ++ (byte*) render_bcd::screen_pos#0
  to:render_bcd::@1
render_bcd::@1: scope:[render_bcd]  from render_bcd render_bcd::@2
  [98] (byte*) render_bcd::screen_pos#3 ← phi( render_bcd/(byte*) render_bcd::screen_pos#0 render_bcd::@2/(byte*) render_bcd::screen_pos#2 )
  [99] (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#6 & (byte/signed byte/word/signed word/dword/signed dword) 15
  [100] (byte~) render_bcd::$6 ← (const byte) render_bcd::ZERO_CHAR#0 + (byte~) render_bcd::$5
  [101] *((byte*) render_bcd::screen_pos#3) ← (byte~) render_bcd::$6
  [102] (byte*) render_bcd::screen_pos#1 ← ++ (byte*) render_bcd::screen_pos#3
  to:render_bcd::@return
render_bcd::@return: scope:[render_bcd]  from render_bcd::@1
  [103] return 
  to:@return
render_moving: scope:[render_moving]  from main::@31 main::@37
  [104] (byte) current_piece_char#75 ← phi( main::@31/(byte~) current_piece_char#103 main::@37/(byte~) current_piece_char#104 )
  [104] (byte*) current_piece_gfx#62 ← phi( main::@31/(byte*~) current_piece_gfx#115 main::@37/(byte*~) current_piece_gfx#116 )
  [104] (byte) current_xpos#57 ← phi( main::@31/(byte~) current_xpos#125 main::@37/(byte~) current_xpos#126 )
  [104] (byte) render_screen_render#30 ← phi( main::@31/(byte/signed byte/word/signed word/dword/signed dword) 64 main::@37/(byte~) render_screen_render#68 )
  [104] (byte) current_ypos#11 ← phi( main::@31/(byte~) current_ypos#99 main::@37/(byte~) current_ypos#100 )
  [105] (byte) render_moving::ypos2#0 ← (byte) current_ypos#11 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:render_moving::@1
render_moving::@1: scope:[render_moving]  from render_moving render_moving::@3
  [106] (byte) render_moving::l#4 ← phi( render_moving/(byte/signed byte/word/signed word/dword/signed dword) 0 render_moving::@3/(byte) render_moving::l#1 )
  [106] (byte) render_moving::i#3 ← phi( render_moving/(byte/signed byte/word/signed word/dword/signed dword) 0 render_moving::@3/(byte) render_moving::i#8 )
  [106] (byte) render_moving::ypos2#2 ← phi( render_moving/(byte) render_moving::ypos2#0 render_moving::@3/(byte) render_moving::ypos2#1 )
  [107] if((byte) render_moving::ypos2#2>(byte/signed byte/word/signed word/dword/signed dword) 2) goto render_moving::@13
  to:render_moving::@7
render_moving::@7: scope:[render_moving]  from render_moving::@1 render_moving::@13
  [108] (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (byte/signed byte/word/signed word/dword/signed dword) 4
  to:render_moving::@3
render_moving::@3: scope:[render_moving]  from render_moving::@5 render_moving::@7
  [109] (byte) render_moving::i#8 ← phi( render_moving::@5/(byte) render_moving::i#10 render_moving::@7/(byte) render_moving::i#1 )
  [110] (byte) render_moving::ypos2#1 ← (byte) render_moving::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [111] (byte) render_moving::l#1 ← ++ (byte) render_moving::l#4
  [112] if((byte) render_moving::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_moving::@1
  to:render_moving::@return
render_moving::@return: scope:[render_moving]  from render_moving::@3
  [113] return 
  to:@return
render_moving::@13: scope:[render_moving]  from render_moving::@1
  [114] if((byte) render_moving::ypos2#2<(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto render_moving::@2
  to:render_moving::@7
render_moving::@2: scope:[render_moving]  from render_moving::@13
  [115] (byte~) render_moving::$5 ← (byte) render_screen_render#30 + (byte) render_moving::ypos2#2
  [116] (byte*) render_moving::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_moving::$5)
  [117] (byte) render_moving::xpos#0 ← (byte) current_xpos#57
  to:render_moving::@4
render_moving::@4: scope:[render_moving]  from render_moving::@2 render_moving::@5
  [118] (byte) render_moving::c#2 ← phi( render_moving::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 render_moving::@5/(byte) render_moving::c#1 )
  [118] (byte) render_moving::xpos#2 ← phi( render_moving::@2/(byte) render_moving::xpos#0 render_moving::@5/(byte) render_moving::xpos#1 )
  [118] (byte) render_moving::i#4 ← phi( render_moving::@2/(byte) render_moving::i#3 render_moving::@5/(byte) render_moving::i#10 )
  [119] (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#62 + (byte) render_moving::i#4)
  [120] (byte) render_moving::i#10 ← ++ (byte) render_moving::i#4
  [121] if((byte) render_moving::current_cell#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_moving::@5
  to:render_moving::@9
render_moving::@9: scope:[render_moving]  from render_moving::@4
  [122] if((byte) render_moving::xpos#2>=(const byte) PLAYFIELD_COLS#0) goto render_moving::@5
  to:render_moving::@10
render_moving::@10: scope:[render_moving]  from render_moving::@9
  [123] *((byte*) render_moving::screen_line#0 + (byte) render_moving::xpos#2) ← (byte) current_piece_char#75
  to:render_moving::@5
render_moving::@5: scope:[render_moving]  from render_moving::@10 render_moving::@4 render_moving::@9
  [124] (byte) render_moving::xpos#1 ← ++ (byte) render_moving::xpos#2
  [125] (byte) render_moving::c#1 ← ++ (byte) render_moving::c#2
  [126] if((byte) render_moving::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_moving::@4
  to:render_moving::@3
render_playfield: scope:[render_playfield]  from main::@23 main::@30
  [127] (byte) render_screen_render#21 ← phi( main::@23/(byte~) render_screen_render#69 main::@30/(byte/signed byte/word/signed word/dword/signed dword) 64 )
  to:render_playfield::@1
render_playfield::@1: scope:[render_playfield]  from render_playfield render_playfield::@3
  [128] (byte) render_playfield::i#3 ← phi( render_playfield/(const byte) PLAYFIELD_COLS#0*(byte/signed byte/word/signed word/dword/signed dword) 2 render_playfield::@3/(byte) render_playfield::i#1 )
  [128] (byte) render_playfield::l#2 ← phi( render_playfield/(byte/signed byte/word/signed word/dword/signed dword) 2 render_playfield::@3/(byte) render_playfield::l#1 )
  [129] (byte~) render_playfield::$2 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [130] (byte~) render_playfield::$3 ← (byte) render_screen_render#21 + (byte~) render_playfield::$2
  [131] (byte*) render_playfield::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$3)
  to:render_playfield::@2
render_playfield::@2: scope:[render_playfield]  from render_playfield::@1 render_playfield::@2
  [132] (byte) render_playfield::c#2 ← phi( render_playfield::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 render_playfield::@2/(byte) render_playfield::c#1 )
  [132] (byte*) render_playfield::screen_line#2 ← phi( render_playfield::@1/(byte*) render_playfield::screen_line#0 render_playfield::@2/(byte*) render_playfield::screen_line#1 )
  [132] (byte) render_playfield::i#2 ← phi( render_playfield::@1/(byte) render_playfield::i#3 render_playfield::@2/(byte) render_playfield::i#1 )
  [133] *((byte*) render_playfield::screen_line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2)
  [134] (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2
  [135] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2
  [136] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2
  [137] if((byte) render_playfield::c#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@2
  to:render_playfield::@3
render_playfield::@3: scope:[render_playfield]  from render_playfield::@2
  [138] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2
  [139] if((byte) render_playfield::l#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@1
  to:render_playfield::@return
render_playfield::@return: scope:[render_playfield]  from render_playfield::@3
  [140] return 
  to:@return
play_movement: scope:[play_movement]  from main::@7
  [141] (byte) play_move_down::key_event#0 ← (byte) play_movement::key_event#0
  [142] call play_move_down 
  [143] (byte) play_move_down::return#0 ← (byte) play_move_down::return#3
  to:play_movement::@5
play_movement::@5: scope:[play_movement]  from play_movement
  [144] (byte~) play_movement::$0 ← (byte) play_move_down::return#0
  [145] (byte) play_movement::render#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0 + (byte~) play_movement::$0
  [146] if((byte) game_over#14==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_movement::@1
  to:play_movement::@return
play_movement::@return: scope:[play_movement]  from play_movement::@5 play_movement::@7
  [147] (byte) current_xpos#17 ← phi( play_movement::@5/(byte) current_xpos#20 play_movement::@7/(byte) current_xpos#24 )
  [147] (byte*) current_piece_gfx#16 ← phi( play_movement::@5/(byte*) current_piece_gfx#18 play_movement::@7/(byte*) current_piece_gfx#19 )
  [147] (byte) current_orientation#16 ← phi( play_movement::@5/(byte) current_orientation#19 play_movement::@7/(byte) current_orientation#24 )
  [147] (byte) play_movement::return#2 ← phi( play_movement::@5/(byte) play_movement::render#1 play_movement::@7/(byte) play_movement::return#0 )
  [148] return 
  to:@return
play_movement::@1: scope:[play_movement]  from play_movement::@5
  [149] (byte) play_move_leftright::key_event#0 ← (byte) play_movement::key_event#0
  [150] call play_move_leftright 
  [151] (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2
  to:play_movement::@6
play_movement::@6: scope:[play_movement]  from play_movement::@1
  [152] (byte~) play_movement::$3 ← (byte) play_move_leftright::return#0
  [153] (byte) play_movement::render#2 ← (byte) play_movement::render#1 + (byte~) play_movement::$3
  [154] (byte) play_move_rotate::key_event#0 ← (byte) play_movement::key_event#0
  [155] call play_move_rotate 
  [156] (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2
  to:play_movement::@7
play_movement::@7: scope:[play_movement]  from play_movement::@6
  [157] (byte~) play_movement::$4 ← (byte) play_move_rotate::return#0
  [158] (byte) play_movement::return#0 ← (byte) play_movement::render#2 + (byte~) play_movement::$4
  to:play_movement::@return
play_move_rotate: scope:[play_move_rotate]  from play_movement::@6
  [159] if((byte) play_move_rotate::key_event#0==(const byte) KEY_Z#0) goto play_move_rotate::@1
  to:play_move_rotate::@6
play_move_rotate::@6: scope:[play_move_rotate]  from play_move_rotate
  [160] if((byte) play_move_rotate::key_event#0==(const byte) KEY_X#0) goto play_move_rotate::@2
  to:play_move_rotate::@return
play_move_rotate::@return: scope:[play_move_rotate]  from play_move_rotate::@11 play_move_rotate::@14 play_move_rotate::@6
  [161] (byte*) current_piece_gfx#19 ← phi( play_move_rotate::@11/(byte*) current_piece_gfx#6 play_move_rotate::@14/(byte*) current_piece_gfx#18 play_move_rotate::@6/(byte*) current_piece_gfx#18 )
  [161] (byte) current_orientation#24 ← phi( play_move_rotate::@11/(byte) current_orientation#7 play_move_rotate::@14/(byte) current_orientation#19 play_move_rotate::@6/(byte) current_orientation#19 )
  [161] (byte) play_move_rotate::return#2 ← phi( play_move_rotate::@11/(byte/signed byte/word/signed word/dword/signed dword) 1 play_move_rotate::@14/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_rotate::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [162] return 
  to:@return
play_move_rotate::@2: scope:[play_move_rotate]  from play_move_rotate::@6
  [163] (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 ← (byte) current_orientation#19 + (byte/signed byte/word/signed word/dword/signed dword) 16
  [164] (byte) play_move_rotate::orientation#2 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 & (byte/signed byte/word/signed word/dword/signed dword) 63
  to:play_move_rotate::@4
play_move_rotate::@4: scope:[play_move_rotate]  from play_move_rotate::@1 play_move_rotate::@2
  [165] (byte) play_move_rotate::orientation#3 ← phi( play_move_rotate::@1/(byte) play_move_rotate::orientation#1 play_move_rotate::@2/(byte) play_move_rotate::orientation#2 )
  [166] (byte) play_collision::xpos#3 ← (byte) current_xpos#24
  [167] (byte) play_collision::ypos#3 ← (byte) current_ypos#17
  [168] (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3
  [169] (byte*~) current_piece#92 ← (byte*) current_piece#14
  [170] call play_collision 
  [171] (byte) play_collision::return#14 ← (byte) play_collision::return#15
  to:play_move_rotate::@14
play_move_rotate::@14: scope:[play_move_rotate]  from play_move_rotate::@4
  [172] (byte~) play_move_rotate::$6 ← (byte) play_collision::return#14
  [173] if((byte~) play_move_rotate::$6!=(const byte) COLLISION_NONE#0) goto play_move_rotate::@return
  to:play_move_rotate::@11
play_move_rotate::@11: scope:[play_move_rotate]  from play_move_rotate::@14
  [174] (byte) current_orientation#7 ← (byte) play_move_rotate::orientation#3
  [175] (byte*) current_piece_gfx#6 ← (byte*) current_piece#14 + (byte) current_orientation#7
  to:play_move_rotate::@return
play_move_rotate::@1: scope:[play_move_rotate]  from play_move_rotate
  [176] (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 ← (byte) current_orientation#19 - (byte/signed byte/word/signed word/dword/signed dword) 16
  [177] (byte) play_move_rotate::orientation#1 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 & (byte/signed byte/word/signed word/dword/signed dword) 63
  to:play_move_rotate::@4
play_collision: scope:[play_collision]  from play_move_down::@12 play_move_leftright::@1 play_move_leftright::@7 play_move_rotate::@4 play_spawn_current::@3
  [178] (byte) play_collision::xpos#6 ← phi( play_move_down::@12/(byte) play_collision::xpos#0 play_move_leftright::@1/(byte) play_collision::xpos#1 play_move_leftright::@7/(byte) play_collision::xpos#2 play_move_rotate::@4/(byte) play_collision::xpos#3 play_spawn_current::@3/(byte) play_collision::xpos#4 )
  [178] (byte) play_collision::ypos#5 ← phi( play_move_down::@12/(byte) play_collision::ypos#0 play_move_leftright::@1/(byte) play_collision::ypos#1 play_move_leftright::@7/(byte) play_collision::ypos#2 play_move_rotate::@4/(byte) play_collision::ypos#3 play_spawn_current::@3/(byte) play_collision::ypos#4 )
  [178] (byte) play_collision::orientation#5 ← phi( play_move_down::@12/(byte) play_collision::orientation#0 play_move_leftright::@1/(byte) play_collision::orientation#1 play_move_leftright::@7/(byte) play_collision::orientation#2 play_move_rotate::@4/(byte) play_collision::orientation#3 play_spawn_current::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [178] (byte*) current_piece#16 ← phi( play_move_down::@12/(byte*~) current_piece#89 play_move_leftright::@1/(byte*~) current_piece#90 play_move_leftright::@7/(byte*~) current_piece#91 play_move_rotate::@4/(byte*~) current_piece#92 play_spawn_current::@3/(byte*~) current_piece#93 )
  [179] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#16 + (byte) play_collision::orientation#5
  [180] (byte) play_collision::ypos2#0 ← (byte) play_collision::ypos#5 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:play_collision::@1
play_collision::@1: scope:[play_collision]  from play_collision play_collision::@20
  [181] (byte) play_collision::l#6 ← phi( play_collision/(byte/signed byte/word/signed word/dword/signed dword) 0 play_collision::@20/(byte) play_collision::l#1 )
  [181] (byte) play_collision::i#3 ← phi( play_collision/(byte/signed byte/word/signed word/dword/signed dword) 0 play_collision::@20/(byte~) play_collision::i#11 )
  [181] (byte) play_collision::ypos2#2 ← phi( play_collision/(byte) play_collision::ypos2#0 play_collision::@20/(byte) play_collision::ypos2#1 )
  [182] (byte*) play_collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_collision::ypos2#2)
  [183] (byte~) play_collision::col#9 ← (byte) play_collision::xpos#6
  to:play_collision::@2
play_collision::@2: scope:[play_collision]  from play_collision::@1 play_collision::@21
  [184] (byte) play_collision::c#2 ← phi( play_collision::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 play_collision::@21/(byte) play_collision::c#1 )
  [184] (byte) play_collision::col#2 ← phi( play_collision::@1/(byte~) play_collision::col#9 play_collision::@21/(byte) play_collision::col#1 )
  [184] (byte) play_collision::i#2 ← phi( play_collision::@1/(byte) play_collision::i#3 play_collision::@21/(byte~) play_collision::i#13 )
  [185] (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2
  [186] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3
  to:play_collision::@8
play_collision::@8: scope:[play_collision]  from play_collision::@2
  [187] if((byte) play_collision::ypos2#2<(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto play_collision::@4
  to:play_collision::@return
play_collision::@return: scope:[play_collision]  from play_collision::@17 play_collision::@4 play_collision::@5 play_collision::@6 play_collision::@8
  [188] (byte) play_collision::return#15 ← phi( play_collision::@4/(const byte) COLLISION_LEFT#0 play_collision::@5/(const byte) COLLISION_RIGHT#0 play_collision::@6/(const byte) COLLISION_PLAYFIELD#0 play_collision::@17/(const byte) COLLISION_NONE#0 play_collision::@8/(const byte) COLLISION_BOTTOM#0 )
  [189] return 
  to:@return
play_collision::@4: scope:[play_collision]  from play_collision::@8
  [190] (byte~) play_collision::$7 ← (byte) play_collision::col#2 & (byte/word/signed word/dword/signed dword) 128
  [191] if((byte~) play_collision::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@5
  to:play_collision::@return
play_collision::@5: scope:[play_collision]  from play_collision::@4
  [192] if((byte) play_collision::col#2<(const byte) PLAYFIELD_COLS#0) goto play_collision::@6
  to:play_collision::@return
play_collision::@6: scope:[play_collision]  from play_collision::@5
  [193] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::col#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3
  to:play_collision::@return
play_collision::@3: scope:[play_collision]  from play_collision::@2 play_collision::@6
  [194] (byte) play_collision::col#1 ← ++ (byte) play_collision::col#2
  [195] (byte) play_collision::c#1 ← ++ (byte) play_collision::c#2
  [196] if((byte) play_collision::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_collision::@21
  to:play_collision::@17
play_collision::@17: scope:[play_collision]  from play_collision::@3
  [197] (byte) play_collision::ypos2#1 ← (byte) play_collision::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [198] (byte) play_collision::l#1 ← ++ (byte) play_collision::l#6
  [199] if((byte) play_collision::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_collision::@20
  to:play_collision::@return
play_collision::@20: scope:[play_collision]  from play_collision::@17
  [200] (byte~) play_collision::i#11 ← (byte) play_collision::i#1
  to:play_collision::@1
play_collision::@21: scope:[play_collision]  from play_collision::@3
  [201] (byte~) play_collision::i#13 ← (byte) play_collision::i#1
  to:play_collision::@2
play_move_leftright: scope:[play_move_leftright]  from play_movement::@1
  [202] if((byte) play_move_leftright::key_event#0==(const byte) KEY_COMMA#0) goto play_move_leftright::@1
  to:play_move_leftright::@6
play_move_leftright::@6: scope:[play_move_leftright]  from play_move_leftright
  [203] if((byte) play_move_leftright::key_event#0!=(const byte) KEY_DOT#0) goto play_move_leftright::@return
  to:play_move_leftright::@7
play_move_leftright::@7: scope:[play_move_leftright]  from play_move_leftright::@6
  [204] (byte) play_collision::xpos#2 ← (byte) current_xpos#20 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [205] (byte) play_collision::ypos#2 ← (byte) current_ypos#17
  [206] (byte) play_collision::orientation#2 ← (byte) current_orientation#19
  [207] (byte*~) current_piece#91 ← (byte*) current_piece#14
  [208] call play_collision 
  [209] (byte) play_collision::return#13 ← (byte) play_collision::return#15
  to:play_move_leftright::@15
play_move_leftright::@15: scope:[play_move_leftright]  from play_move_leftright::@7
  [210] (byte~) play_move_leftright::$4 ← (byte) play_collision::return#13
  [211] if((byte~) play_move_leftright::$4!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return
  to:play_move_leftright::@8
play_move_leftright::@8: scope:[play_move_leftright]  from play_move_leftright::@15
  [212] (byte) current_xpos#5 ← ++ (byte) current_xpos#20
  to:play_move_leftright::@return
play_move_leftright::@return: scope:[play_move_leftright]  from play_move_leftright::@11 play_move_leftright::@14 play_move_leftright::@15 play_move_leftright::@6 play_move_leftright::@8
  [213] (byte) current_xpos#24 ← phi( play_move_leftright::@11/(byte) current_xpos#7 play_move_leftright::@15/(byte) current_xpos#20 play_move_leftright::@8/(byte) current_xpos#5 play_move_leftright::@14/(byte) current_xpos#20 play_move_leftright::@6/(byte) current_xpos#20 )
  [213] (byte) play_move_leftright::return#2 ← phi( play_move_leftright::@11/(byte/signed byte/word/signed word/dword/signed dword) 1 play_move_leftright::@15/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_leftright::@8/(byte/signed byte/word/signed word/dword/signed dword) 1 play_move_leftright::@14/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_leftright::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [214] return 
  to:@return
play_move_leftright::@1: scope:[play_move_leftright]  from play_move_leftright
  [215] (byte) play_collision::xpos#1 ← (byte) current_xpos#20 - (byte/signed byte/word/signed word/dword/signed dword) 1
  [216] (byte) play_collision::ypos#1 ← (byte) current_ypos#17
  [217] (byte) play_collision::orientation#1 ← (byte) current_orientation#19
  [218] (byte*~) current_piece#90 ← (byte*) current_piece#14
  [219] call play_collision 
  [220] (byte) play_collision::return#1 ← (byte) play_collision::return#15
  to:play_move_leftright::@14
play_move_leftright::@14: scope:[play_move_leftright]  from play_move_leftright::@1
  [221] (byte~) play_move_leftright::$8 ← (byte) play_collision::return#1
  [222] if((byte~) play_move_leftright::$8!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return
  to:play_move_leftright::@11
play_move_leftright::@11: scope:[play_move_leftright]  from play_move_leftright::@14
  [223] (byte) current_xpos#7 ← -- (byte) current_xpos#20
  to:play_move_leftright::@return
play_move_down: scope:[play_move_down]  from play_movement
  [224] (byte) current_movedown_counter#12 ← ++ (byte) current_movedown_counter#16
  [225] if((byte) play_move_down::key_event#0!=(const byte) KEY_SPACE#0) goto play_move_down::@1
  to:play_move_down::@8
play_move_down::@8: scope:[play_move_down]  from play_move_down
  [226] phi()
  to:play_move_down::@1
play_move_down::@1: scope:[play_move_down]  from play_move_down play_move_down::@8
  [227] (byte) play_move_down::movedown#10 ← phi( play_move_down/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_down::@8/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [228] call keyboard_event_pressed 
  [229] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11
  to:play_move_down::@17
play_move_down::@17: scope:[play_move_down]  from play_move_down::@1
  [230] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
  [231] if((byte~) play_move_down::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@2
  to:play_move_down::@9
play_move_down::@9: scope:[play_move_down]  from play_move_down::@17
  [232] if((byte) current_movedown_counter#12<(const byte) current_movedown_fast#0) goto play_move_down::@2
  to:play_move_down::@10
play_move_down::@10: scope:[play_move_down]  from play_move_down::@9
  [233] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10
  to:play_move_down::@2
play_move_down::@2: scope:[play_move_down]  from play_move_down::@10 play_move_down::@17 play_move_down::@9
  [234] (byte) play_move_down::movedown#7 ← phi( play_move_down::@10/(byte) play_move_down::movedown#2 play_move_down::@17/(byte) play_move_down::movedown#10 play_move_down::@9/(byte) play_move_down::movedown#10 )
  [235] if((byte) current_movedown_counter#12<(byte) current_movedown_slow#14) goto play_move_down::@4
  to:play_move_down::@11
play_move_down::@11: scope:[play_move_down]  from play_move_down::@2
  [236] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7
  to:play_move_down::@4
play_move_down::@4: scope:[play_move_down]  from play_move_down::@11 play_move_down::@2
  [237] (byte) play_move_down::movedown#6 ← phi( play_move_down::@11/(byte) play_move_down::movedown#3 play_move_down::@2/(byte) play_move_down::movedown#7 )
  [238] if((byte) play_move_down::movedown#6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@return
  to:play_move_down::@12
play_move_down::@12: scope:[play_move_down]  from play_move_down::@4
  [239] (byte) play_collision::ypos#0 ← (byte) current_ypos#25 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [240] (byte) play_collision::xpos#0 ← (byte) current_xpos#115
  [241] (byte) play_collision::orientation#0 ← (byte) current_orientation#12
  [242] (byte*~) current_piece#89 ← (byte*) current_piece#20
  [243] call play_collision 
  [244] (byte) play_collision::return#0 ← (byte) play_collision::return#15
  to:play_move_down::@18
play_move_down::@18: scope:[play_move_down]  from play_move_down::@12
  [245] (byte~) play_move_down::$12 ← (byte) play_collision::return#0
  [246] if((byte~) play_move_down::$12==(const byte) COLLISION_NONE#0) goto play_move_down::@6
  to:play_move_down::@13
play_move_down::@13: scope:[play_move_down]  from play_move_down::@18
  [247] phi()
  [248] call play_lock_current 
  to:play_move_down::@19
play_move_down::@19: scope:[play_move_down]  from play_move_down::@13
  [249] phi()
  [250] call play_remove_lines 
  [251] (byte) play_remove_lines::return#0 ← (byte) play_remove_lines::removed#7
  to:play_move_down::@20
play_move_down::@20: scope:[play_move_down]  from play_move_down::@19
  [252] (byte) play_move_down::removed#0 ← (byte) play_remove_lines::return#0
  [253] (byte) play_update_score::removed#0 ← (byte) play_move_down::removed#0
  [254] call play_update_score 
  to:play_move_down::@21
play_move_down::@21: scope:[play_move_down]  from play_move_down::@20
  [255] phi()
  [256] call play_spawn_current 
  [257] (byte*~) current_piece#94 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3)
  to:play_move_down::@7
play_move_down::@7: scope:[play_move_down]  from play_move_down::@21 play_move_down::@6
  [258] (byte) game_over#26 ← phi( play_move_down::@21/(byte) game_over#15 play_move_down::@6/(byte) game_over#19 )
  [258] (byte) current_xpos#41 ← phi( play_move_down::@21/(byte) current_xpos#28 play_move_down::@6/(byte) current_xpos#115 )
  [258] (byte*) current_piece_gfx#33 ← phi( play_move_down::@21/(byte*) current_piece_gfx#21 play_move_down::@6/(byte*) current_piece_gfx#105 )
  [258] (byte) current_orientation#36 ← phi( play_move_down::@21/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_down::@6/(byte) current_orientation#12 )
  [258] (byte) current_piece_char#27 ← phi( play_move_down::@21/(byte) current_piece_char#16 play_move_down::@6/(byte) current_piece_char#19 )
  [258] (byte*) current_piece#27 ← phi( play_move_down::@21/(byte*~) current_piece#94 play_move_down::@6/(byte*) current_piece#20 )
  [258] (byte) level_bcd#32 ← phi( play_move_down::@21/(byte) level_bcd#19 play_move_down::@6/(byte) level_bcd#11 )
  [258] (byte) current_movedown_slow#38 ← phi( play_move_down::@21/(byte) current_movedown_slow#23 play_move_down::@6/(byte) current_movedown_slow#14 )
  [258] (byte) level#31 ← phi( play_move_down::@21/(byte) level#18 play_move_down::@6/(byte) level#10 )
  [258] (dword) score_bcd#27 ← phi( play_move_down::@21/(dword) score_bcd#16 play_move_down::@6/(dword) score_bcd#18 )
  [258] (word) lines_bcd#27 ← phi( play_move_down::@21/(word) lines_bcd#17 play_move_down::@6/(word) lines_bcd#19 )
  [258] (byte) current_ypos#36 ← phi( play_move_down::@21/(byte) current_ypos#22 play_move_down::@6/(byte) current_ypos#2 )
  to:play_move_down::@return
play_move_down::@return: scope:[play_move_down]  from play_move_down::@4 play_move_down::@7
  [259] (byte) game_over#14 ← phi( play_move_down::@4/(byte) game_over#19 play_move_down::@7/(byte) game_over#26 )
  [259] (byte) current_xpos#20 ← phi( play_move_down::@4/(byte) current_xpos#115 play_move_down::@7/(byte) current_xpos#41 )
  [259] (byte*) current_piece_gfx#18 ← phi( play_move_down::@4/(byte*) current_piece_gfx#105 play_move_down::@7/(byte*) current_piece_gfx#33 )
  [259] (byte) current_orientation#19 ← phi( play_move_down::@4/(byte) current_orientation#12 play_move_down::@7/(byte) current_orientation#36 )
  [259] (byte) current_piece_char#14 ← phi( play_move_down::@4/(byte) current_piece_char#19 play_move_down::@7/(byte) current_piece_char#27 )
  [259] (byte*) current_piece#14 ← phi( play_move_down::@4/(byte*) current_piece#20 play_move_down::@7/(byte*) current_piece#27 )
  [259] (byte) level_bcd#17 ← phi( play_move_down::@4/(byte) level_bcd#11 play_move_down::@7/(byte) level_bcd#32 )
  [259] (byte) current_movedown_slow#21 ← phi( play_move_down::@4/(byte) current_movedown_slow#14 play_move_down::@7/(byte) current_movedown_slow#38 )
  [259] (byte) level#16 ← phi( play_move_down::@4/(byte) level#10 play_move_down::@7/(byte) level#31 )
  [259] (dword) score_bcd#14 ← phi( play_move_down::@4/(dword) score_bcd#18 play_move_down::@7/(dword) score_bcd#27 )
  [259] (word) lines_bcd#15 ← phi( play_move_down::@4/(word) lines_bcd#19 play_move_down::@7/(word) lines_bcd#27 )
  [259] (byte) current_ypos#17 ← phi( play_move_down::@4/(byte) current_ypos#25 play_move_down::@7/(byte) current_ypos#36 )
  [259] (byte) current_movedown_counter#14 ← phi( play_move_down::@4/(byte) current_movedown_counter#12 play_move_down::@7/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [259] (byte) play_move_down::return#3 ← phi( play_move_down::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_down::@7/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [260] return 
  to:@return
play_move_down::@6: scope:[play_move_down]  from play_move_down::@18
  [261] (byte) current_ypos#2 ← ++ (byte) current_ypos#25
  to:play_move_down::@7
play_spawn_current: scope:[play_spawn_current]  from main::@29 play_move_down::@21
  [262] (byte) game_over#69 ← phi( main::@29/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_down::@21/(byte) game_over#19 )
  to:play_spawn_current::@1
play_spawn_current::@1: scope:[play_spawn_current]  from play_spawn_current play_spawn_current::@9
  [263] (byte) play_spawn_current::piece_idx#2 ← phi( play_spawn_current/(byte/signed byte/word/signed word/dword/signed dword) 7 play_spawn_current::@9/(byte) play_spawn_current::piece_idx#1 )
  [264] if((byte) play_spawn_current::piece_idx#2==(byte/signed byte/word/signed word/dword/signed dword) 7) goto play_spawn_current::@2
  to:play_spawn_current::@3
play_spawn_current::@3: scope:[play_spawn_current]  from play_spawn_current::@1
  [265] (byte~) play_spawn_current::$3 ← (byte) play_spawn_current::piece_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [266] (byte) current_piece_char#16 ← *((const byte[]) PIECES_CHARS#0 + (byte) play_spawn_current::piece_idx#2)
  [267] (byte*) current_piece_gfx#21 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) + (byte/signed byte/word/signed word/dword/signed dword) 0
  [268] (byte) current_xpos#28 ← *((const byte[]) PIECES_START_X#0 + (byte) play_spawn_current::piece_idx#2)
  [269] (byte) current_ypos#22 ← *((const byte[]) PIECES_START_Y#0 + (byte) play_spawn_current::piece_idx#2)
  [270] (byte) play_collision::xpos#4 ← (byte) current_xpos#28
  [271] (byte) play_collision::ypos#4 ← (byte) current_ypos#22
  [272] (byte*~) current_piece#93 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3)
  [273] call play_collision 
  [274] (byte) play_collision::return#10 ← (byte) play_collision::return#15
  to:play_spawn_current::@10
play_spawn_current::@10: scope:[play_spawn_current]  from play_spawn_current::@3
  [275] (byte~) play_spawn_current::$5 ← (byte) play_collision::return#10
  [276] if((byte~) play_spawn_current::$5!=(const byte) COLLISION_PLAYFIELD#0) goto play_spawn_current::@11
  to:play_spawn_current::@return
play_spawn_current::@return: scope:[play_spawn_current]  from play_spawn_current::@10 play_spawn_current::@11
  [277] (byte) game_over#15 ← phi( play_spawn_current::@11/(byte) game_over#69 play_spawn_current::@10/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [278] return 
  to:@return
play_spawn_current::@11: scope:[play_spawn_current]  from play_spawn_current::@10
  [279] phi()
  to:play_spawn_current::@return
play_spawn_current::@2: scope:[play_spawn_current]  from play_spawn_current::@1
  [280] phi()
  [281] call sid_rnd 
  [282] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0
  to:play_spawn_current::@9
play_spawn_current::@9: scope:[play_spawn_current]  from play_spawn_current::@2
  [283] (byte~) play_spawn_current::$1 ← (byte) sid_rnd::return#2
  [284] (byte) play_spawn_current::piece_idx#1 ← (byte~) play_spawn_current::$1 & (byte/signed byte/word/signed word/dword/signed dword) 7
  to:play_spawn_current::@1
sid_rnd: scope:[sid_rnd]  from play_spawn_current::@2
  [285] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0)
  to:sid_rnd::@return
sid_rnd::@return: scope:[sid_rnd]  from sid_rnd
  [286] return 
  to:@return
play_update_score: scope:[play_update_score]  from play_move_down::@20
  [287] if((byte) play_update_score::removed#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_update_score::@return
  to:play_update_score::@3
play_update_score::@3: scope:[play_update_score]  from play_update_score
  [288] (byte~) play_update_score::$2 ← < (word) lines_bcd#19
  [289] (byte) play_update_score::lines_before#0 ← (byte~) play_update_score::$2 & (byte/word/signed word/dword/signed dword) 240
  [290] (byte~) play_update_score::$4 ← (byte) play_update_score::removed#0 << (byte/signed byte/word/signed word/dword/signed dword) 2
  [291] (dword) play_update_score::add_bcd#0 ← *((const dword[5]) score_add_bcd#0 + (byte~) play_update_score::$4)
  asm { sed  }
  [293] (word) lines_bcd#30 ← (word) lines_bcd#19 + (byte) play_update_score::removed#0
  [294] (dword) score_bcd#30 ← (dword) score_bcd#18 + (dword) play_update_score::add_bcd#0
  asm { cld  }
  [296] (byte~) play_update_score::$5 ← < (word) lines_bcd#30
  [297] (byte) play_update_score::lines_after#0 ← (byte~) play_update_score::$5 & (byte/word/signed word/dword/signed dword) 240
  [298] if((byte) play_update_score::lines_before#0==(byte) play_update_score::lines_after#0) goto play_update_score::@return
  to:play_update_score::@4
play_update_score::@4: scope:[play_update_score]  from play_update_score::@3
  [299] phi()
  [300] call play_increase_level 
  to:play_update_score::@return
play_update_score::@return: scope:[play_update_score]  from play_update_score play_update_score::@3 play_update_score::@4
  [301] (byte) level_bcd#19 ← phi( play_update_score/(byte) level_bcd#11 play_update_score::@3/(byte) level_bcd#11 play_update_score::@4/(byte) level_bcd#63 )
  [301] (byte) current_movedown_slow#23 ← phi( play_update_score/(byte) current_movedown_slow#14 play_update_score::@3/(byte) current_movedown_slow#14 play_update_score::@4/(byte) current_movedown_slow#68 )
  [301] (byte) level#18 ← phi( play_update_score/(byte) level#10 play_update_score::@3/(byte) level#10 play_update_score::@4/(byte) level#20 )
  [301] (dword) score_bcd#16 ← phi( play_update_score/(dword) score_bcd#18 play_update_score::@3/(dword) score_bcd#30 play_update_score::@4/(dword) score_bcd#30 )
  [301] (word) lines_bcd#17 ← phi( play_update_score/(word) lines_bcd#19 play_update_score::@3/(word) lines_bcd#30 play_update_score::@4/(word) lines_bcd#30 )
  [302] return 
  to:@return
play_increase_level: scope:[play_increase_level]  from play_update_score::@4
  [303] (byte) level#20 ← ++ (byte) level#10
  [304] if((byte) level#20>(byte/signed byte/word/signed word/dword/signed dword) 29) goto play_increase_level::@2
  to:play_increase_level::@5
play_increase_level::@5: scope:[play_increase_level]  from play_increase_level
  [305] (byte) current_movedown_slow#10 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0 + (byte) level#20)
  to:play_increase_level::@2
play_increase_level::@2: scope:[play_increase_level]  from play_increase_level play_increase_level::@5
  [306] (byte) current_movedown_slow#68 ← phi( play_increase_level/(byte/signed byte/word/signed word/dword/signed dword) 1 play_increase_level::@5/(byte) current_movedown_slow#10 )
  [307] (byte) level_bcd#21 ← ++ (byte) level_bcd#11
  [308] (byte~) play_increase_level::$1 ← (byte) level_bcd#21 & (byte/signed byte/word/signed word/dword/signed dword) 15
  [309] if((byte~) play_increase_level::$1!=(byte/signed byte/word/signed word/dword/signed dword) 10) goto play_increase_level::@3
  to:play_increase_level::@7
play_increase_level::@7: scope:[play_increase_level]  from play_increase_level::@2
  [310] (byte) level_bcd#8 ← (byte) level_bcd#21 + (byte/signed byte/word/signed word/dword/signed dword) 6
  to:play_increase_level::@3
play_increase_level::@3: scope:[play_increase_level]  from play_increase_level::@2 play_increase_level::@7
  [311] (byte) level_bcd#63 ← phi( play_increase_level::@2/(byte) level_bcd#21 play_increase_level::@7/(byte) level_bcd#8 )
  asm { sed  }
  to:play_increase_level::@4
play_increase_level::@4: scope:[play_increase_level]  from play_increase_level::@3 play_increase_level::@4
  [313] (byte) play_increase_level::b#2 ← phi( play_increase_level::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 play_increase_level::@4/(byte) play_increase_level::b#1 )
  [314] (byte) play_increase_level::b4#0 ← (byte) play_increase_level::b#2 << (byte/signed byte/word/signed word/dword/signed dword) 2
  [315] *((const dword[5]) score_add_bcd#0 + (byte) play_increase_level::b4#0) ← *((const dword[5]) score_add_bcd#0 + (byte) play_increase_level::b4#0) + *((const dword[]) SCORE_BASE_BCD#0 + (byte) play_increase_level::b4#0)
  [316] (byte) play_increase_level::b#1 ← ++ (byte) play_increase_level::b#2
  [317] if((byte) play_increase_level::b#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto play_increase_level::@4
  to:play_increase_level::@8
play_increase_level::@8: scope:[play_increase_level]  from play_increase_level::@4
  asm { cld  }
  to:play_increase_level::@return
play_increase_level::@return: scope:[play_increase_level]  from play_increase_level::@8
  [319] return 
  to:@return
play_remove_lines: scope:[play_remove_lines]  from play_move_down::@19
  [320] phi()
  to:play_remove_lines::@1
play_remove_lines::@1: scope:[play_remove_lines]  from play_remove_lines play_remove_lines::@4
  [321] (byte) play_remove_lines::removed#11 ← phi( play_remove_lines/(byte/signed byte/word/signed word/dword/signed dword) 0 play_remove_lines::@4/(byte) play_remove_lines::removed#7 )
  [321] (byte) play_remove_lines::y#8 ← phi( play_remove_lines/(byte/signed byte/word/signed word/dword/signed dword) 0 play_remove_lines::@4/(byte) play_remove_lines::y#1 )
  [321] (byte) play_remove_lines::w#12 ← phi( play_remove_lines/(const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 play_remove_lines::@4/(byte) play_remove_lines::w#11 )
  [321] (byte) play_remove_lines::r#3 ← phi( play_remove_lines/(const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 play_remove_lines::@4/(byte) play_remove_lines::r#1 )
  to:play_remove_lines::@2
play_remove_lines::@2: scope:[play_remove_lines]  from play_remove_lines::@1 play_remove_lines::@3
  [322] (byte) play_remove_lines::full#4 ← phi( play_remove_lines::@1/(byte/signed byte/word/signed word/dword/signed dword) 1 play_remove_lines::@3/(byte) play_remove_lines::full#2 )
  [322] (byte) play_remove_lines::x#2 ← phi( play_remove_lines::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 play_remove_lines::@3/(byte) play_remove_lines::x#1 )
  [322] (byte) play_remove_lines::w#4 ← phi( play_remove_lines::@1/(byte) play_remove_lines::w#12 play_remove_lines::@3/(byte) play_remove_lines::w#1 )
  [322] (byte) play_remove_lines::r#2 ← phi( play_remove_lines::@1/(byte) play_remove_lines::r#3 play_remove_lines::@3/(byte) play_remove_lines::r#1 )
  [323] (byte) play_remove_lines::c#0 ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::r#2)
  [324] (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2
  [325] if((byte) play_remove_lines::c#0!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_remove_lines::@18
  to:play_remove_lines::@3
play_remove_lines::@3: scope:[play_remove_lines]  from play_remove_lines::@18 play_remove_lines::@2
  [326] (byte) play_remove_lines::full#2 ← phi( play_remove_lines::@18/(byte) play_remove_lines::full#4 play_remove_lines::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [327] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#0
  [328] (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4
  [329] (byte) play_remove_lines::x#1 ← ++ (byte) play_remove_lines::x#2
  [330] if((byte) play_remove_lines::x#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@2
  to:play_remove_lines::@9
play_remove_lines::@9: scope:[play_remove_lines]  from play_remove_lines::@3
  [331] if((byte) play_remove_lines::full#2!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@4
  to:play_remove_lines::@10
play_remove_lines::@10: scope:[play_remove_lines]  from play_remove_lines::@9
  [332] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0
  [333] (byte) play_remove_lines::removed#1 ← ++ (byte) play_remove_lines::removed#11
  to:play_remove_lines::@4
play_remove_lines::@4: scope:[play_remove_lines]  from play_remove_lines::@10 play_remove_lines::@9
  [334] (byte) play_remove_lines::removed#7 ← phi( play_remove_lines::@10/(byte) play_remove_lines::removed#1 play_remove_lines::@9/(byte) play_remove_lines::removed#11 )
  [334] (byte) play_remove_lines::w#11 ← phi( play_remove_lines::@10/(byte) play_remove_lines::w#2 play_remove_lines::@9/(byte) play_remove_lines::w#1 )
  [335] (byte) play_remove_lines::y#1 ← ++ (byte) play_remove_lines::y#8
  [336] if((byte) play_remove_lines::y#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@1
  to:play_remove_lines::@5
play_remove_lines::@5: scope:[play_remove_lines]  from play_remove_lines::@4 play_remove_lines::@6
  [337] (byte) play_remove_lines::w#6 ← phi( play_remove_lines::@4/(byte) play_remove_lines::w#11 play_remove_lines::@6/(byte) play_remove_lines::w#3 )
  [338] if((byte) play_remove_lines::w#6!=(byte/word/signed word/dword/signed dword) 255) goto play_remove_lines::@6
  to:play_remove_lines::@return
play_remove_lines::@return: scope:[play_remove_lines]  from play_remove_lines::@5
  [339] return 
  to:@return
play_remove_lines::@6: scope:[play_remove_lines]  from play_remove_lines::@5
  [340] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#6) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [341] (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#6
  to:play_remove_lines::@5
play_remove_lines::@18: scope:[play_remove_lines]  from play_remove_lines::@2
  [342] phi()
  to:play_remove_lines::@3
play_lock_current: scope:[play_lock_current]  from play_move_down::@13
  [343] (byte) play_lock_current::ypos2#0 ← (byte) current_ypos#25 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:play_lock_current::@1
play_lock_current::@1: scope:[play_lock_current]  from play_lock_current play_lock_current::@7
  [344] (byte) play_lock_current::l#6 ← phi( play_lock_current/(byte/signed byte/word/signed word/dword/signed dword) 0 play_lock_current::@7/(byte) play_lock_current::l#1 )
  [344] (byte) play_lock_current::i#3 ← phi( play_lock_current/(byte/signed byte/word/signed word/dword/signed dword) 0 play_lock_current::@7/(byte~) play_lock_current::i#7 )
  [344] (byte) play_lock_current::ypos2#2 ← phi( play_lock_current/(byte) play_lock_current::ypos2#0 play_lock_current::@7/(byte) play_lock_current::ypos2#1 )
  [345] (byte*) play_lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_lock_current::ypos2#2)
  [346] (byte) play_lock_current::col#0 ← (byte) current_xpos#115
  to:play_lock_current::@2
play_lock_current::@2: scope:[play_lock_current]  from play_lock_current::@1 play_lock_current::@8
  [347] (byte) play_lock_current::c#2 ← phi( play_lock_current::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 play_lock_current::@8/(byte) play_lock_current::c#1 )
  [347] (byte) play_lock_current::col#2 ← phi( play_lock_current::@1/(byte) play_lock_current::col#0 play_lock_current::@8/(byte) play_lock_current::col#1 )
  [347] (byte) play_lock_current::i#2 ← phi( play_lock_current::@1/(byte) play_lock_current::i#3 play_lock_current::@8/(byte~) play_lock_current::i#9 )
  [348] (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2
  [349] if(*((byte*) current_piece_gfx#105 + (byte) play_lock_current::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_lock_current::@3
  to:play_lock_current::@4
play_lock_current::@4: scope:[play_lock_current]  from play_lock_current::@2
  [350] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::col#2) ← (byte) current_piece_char#19
  to:play_lock_current::@3
play_lock_current::@3: scope:[play_lock_current]  from play_lock_current::@2 play_lock_current::@4
  [351] (byte) play_lock_current::col#1 ← ++ (byte) play_lock_current::col#2
  [352] (byte) play_lock_current::c#1 ← ++ (byte) play_lock_current::c#2
  [353] if((byte) play_lock_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_lock_current::@8
  to:play_lock_current::@5
play_lock_current::@5: scope:[play_lock_current]  from play_lock_current::@3
  [354] (byte) play_lock_current::ypos2#1 ← (byte) play_lock_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [355] (byte) play_lock_current::l#1 ← ++ (byte) play_lock_current::l#6
  [356] if((byte) play_lock_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_lock_current::@7
  to:play_lock_current::@return
play_lock_current::@return: scope:[play_lock_current]  from play_lock_current::@5
  [357] return 
  to:@return
play_lock_current::@7: scope:[play_lock_current]  from play_lock_current::@5
  [358] (byte~) play_lock_current::i#7 ← (byte) play_lock_current::i#1
  to:play_lock_current::@1
play_lock_current::@8: scope:[play_lock_current]  from play_lock_current::@3
  [359] (byte~) play_lock_current::i#9 ← (byte) play_lock_current::i#1
  to:play_lock_current::@2
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@10 keyboard_event_scan::@11 keyboard_event_scan::@20 keyboard_event_scan::@9 play_move_down::@1
  [360] (byte) keyboard_event_pressed::keycode#5 ← phi( keyboard_event_scan::@10/(const byte) KEY_CTRL#0 keyboard_event_scan::@11/(const byte) KEY_COMMODORE#0 keyboard_event_scan::@20/(const byte) KEY_LSHIFT#0 keyboard_event_scan::@9/(const byte) KEY_RSHIFT#0 play_move_down::@1/(const byte) KEY_SPACE#0 )
  [361] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte/signed byte/word/signed word/dword/signed dword) 3
  [362] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0)
  [363] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [364] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1)
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  [365] return 
  to:@return
keyboard_event_get: scope:[keyboard_event_get]  from main::@34
  [366] if((byte) keyboard_events_size#13==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@return
  to:keyboard_event_get::@3
keyboard_event_get::@3: scope:[keyboard_event_get]  from keyboard_event_get
  [367] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13
  [368] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get keyboard_event_get::@3
  [369] (byte) keyboard_events_size#16 ← phi( keyboard_event_get/(byte) keyboard_events_size#13 keyboard_event_get::@3/(byte) keyboard_events_size#4 )
  [369] (byte) keyboard_event_get::return#2 ← phi( keyboard_event_get/(byte/word/signed word/dword/signed dword) 255 keyboard_event_get::@3/(byte) keyboard_event_get::return#1 )
  [370] return 
  to:@return
keyboard_event_scan: scope:[keyboard_event_scan]  from main::@33
  [371] phi()
  to:keyboard_event_scan::@1
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@3
  [372] (byte) keyboard_events_size#29 ← phi( keyboard_event_scan/(byte) keyboard_events_size#19 keyboard_event_scan::@3/(byte) keyboard_events_size#13 )
  [372] (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte/signed byte/word/signed word/dword/signed dword) 0 keyboard_event_scan::@3/(byte) keyboard_event_scan::keycode#14 )
  [372] (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte/signed byte/word/signed word/dword/signed dword) 0 keyboard_event_scan::@3/(byte) keyboard_event_scan::row#1 )
  [373] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  [374] call keyboard_matrix_read 
  [375] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_event_scan::@25
keyboard_event_scan::@25: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  [376] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2
  [377] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@4
  to:keyboard_event_scan::@13
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@25
  [378] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8
  to:keyboard_event_scan::@3
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@13 keyboard_event_scan::@19
  [379] (byte) keyboard_events_size#13 ← phi( keyboard_event_scan::@13/(byte) keyboard_events_size#29 keyboard_event_scan::@19/(byte) keyboard_events_size#30 )
  [379] (byte) keyboard_event_scan::keycode#14 ← phi( keyboard_event_scan::@13/(byte) keyboard_event_scan::keycode#1 keyboard_event_scan::@19/(byte) keyboard_event_scan::keycode#15 )
  [380] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2
  [381] if((byte) keyboard_event_scan::row#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@20
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  [382] phi()
  [383] call keyboard_event_pressed 
  [384] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@26
keyboard_event_scan::@26: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  [385] (byte~) keyboard_event_scan::$14 ← (byte) keyboard_event_pressed::return#0
  [386] if((byte~) keyboard_event_scan::$14==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@21
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@26
  [387] phi()
  to:keyboard_event_scan::@9
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@21 keyboard_event_scan::@26
  [388] (byte) keyboard_modifiers#11 ← phi( keyboard_event_scan::@21/(byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) KEY_MODIFIER_LSHIFT#0 keyboard_event_scan::@26/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [389] call keyboard_event_pressed 
  [390] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@27
keyboard_event_scan::@27: scope:[keyboard_event_scan]  from keyboard_event_scan::@9
  [391] (byte~) keyboard_event_scan::$18 ← (byte) keyboard_event_pressed::return#1
  [392] if((byte~) keyboard_event_scan::$18==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@22
keyboard_event_scan::@22: scope:[keyboard_event_scan]  from keyboard_event_scan::@27
  [393] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#11 | (const byte) KEY_MODIFIER_RSHIFT#0
  to:keyboard_event_scan::@10
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@22 keyboard_event_scan::@27
  [394] (byte) keyboard_modifiers#12 ← phi( keyboard_event_scan::@22/(byte) keyboard_modifiers#3 keyboard_event_scan::@27/(byte) keyboard_modifiers#11 )
  [395] call keyboard_event_pressed 
  [396] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@28
keyboard_event_scan::@28: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  [397] (byte~) keyboard_event_scan::$22 ← (byte) keyboard_event_pressed::return#2
  [398] if((byte~) keyboard_event_scan::$22==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@23
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@28
  [399] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#12 | (const byte) KEY_MODIFIER_CTRL#0
  to:keyboard_event_scan::@11
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@23 keyboard_event_scan::@28
  [400] (byte) keyboard_modifiers#13 ← phi( keyboard_event_scan::@23/(byte) keyboard_modifiers#4 keyboard_event_scan::@28/(byte) keyboard_modifiers#12 )
  [401] call keyboard_event_pressed 
  [402] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@29
keyboard_event_scan::@29: scope:[keyboard_event_scan]  from keyboard_event_scan::@11
  [403] (byte~) keyboard_event_scan::$26 ← (byte) keyboard_event_pressed::return#10
  [404] if((byte~) keyboard_event_scan::$26==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@return
  to:keyboard_event_scan::@24
keyboard_event_scan::@24: scope:[keyboard_event_scan]  from keyboard_event_scan::@29
  [405] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#13 | (const byte) KEY_MODIFIER_COMMODORE#0
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@24 keyboard_event_scan::@29
  [406] return 
  to:@return
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@25 keyboard_event_scan::@5
  [407] (byte) keyboard_events_size#10 ← phi( keyboard_event_scan::@25/(byte) keyboard_events_size#29 keyboard_event_scan::@5/(byte) keyboard_events_size#30 )
  [407] (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::keycode#11 keyboard_event_scan::@5/(byte) keyboard_event_scan::keycode#15 )
  [407] (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@25/(byte/signed byte/word/signed word/dword/signed dword) 0 keyboard_event_scan::@5/(byte) keyboard_event_scan::col#1 )
  [408] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)
  [409] (byte~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  [410] if((byte~) keyboard_event_scan::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@5
  to:keyboard_event_scan::@15
keyboard_event_scan::@15: scope:[keyboard_event_scan]  from keyboard_event_scan::@4
  [411] if((byte) keyboard_events_size#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@5
  to:keyboard_event_scan::@16
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@15
  [412] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  [413] if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@7
  to:keyboard_event_scan::@17
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@16
  [414] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10
  [415] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10
  to:keyboard_event_scan::@5
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@15 keyboard_event_scan::@17 keyboard_event_scan::@4 keyboard_event_scan::@7
  [416] (byte) keyboard_events_size#30 ← phi( keyboard_event_scan::@17/(byte) keyboard_events_size#2 keyboard_event_scan::@4/(byte) keyboard_events_size#10 keyboard_event_scan::@15/(byte) keyboard_events_size#10 keyboard_event_scan::@7/(byte) keyboard_events_size#1 )
  [417] (byte) keyboard_event_scan::keycode#15 ← ++ (byte) keyboard_event_scan::keycode#10
  [418] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2
  [419] if((byte) keyboard_event_scan::col#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@4
  to:keyboard_event_scan::@19
keyboard_event_scan::@19: scope:[keyboard_event_scan]  from keyboard_event_scan::@5
  [420] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0
  to:keyboard_event_scan::@3
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan::@16
  [421] (byte/word/dword~) keyboard_event_scan::$11 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) 64
  [422] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte/word/dword~) keyboard_event_scan::$11
  [423] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10
  to:keyboard_event_scan::@5
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@1
  [424] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0)
  [425] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [426] return 
  to:@return
render_show: scope:[render_show]  from main::@6
  [427] if((byte) render_screen_show#17==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_show::toD0181
  to:render_show::toD0182
render_show::toD0182: scope:[render_show]  from render_show
  [428] phi()
  to:render_show::@2
render_show::@2: scope:[render_show]  from render_show::toD0181 render_show::toD0182
  [429] (byte) render_show::d018val#3 ← phi( render_show::toD0181/(const byte) render_show::toD0181_return#0 render_show::toD0182/(const byte) render_show::toD0182_return#0 )
  [430] *((const byte*) D018#0) ← (byte) render_show::d018val#3
  [431] (byte) render_screen_showing#1 ← (byte) render_screen_show#17
  to:render_show::@return
render_show::@return: scope:[render_show]  from render_show::@2
  [432] return 
  to:@return
render_show::toD0181: scope:[render_show]  from render_show
  [433] phi()
  to:render_show::@2
play_init: scope:[play_init]  from main::@28
  [434] phi()
  to:play_init::@1
play_init::@1: scope:[play_init]  from play_init play_init::@1
  [435] (byte) play_init::idx#2 ← phi( play_init/(byte/signed byte/word/signed word/dword/signed dword) 0 play_init::@1/(byte) play_init::idx#1 )
  [435] (byte*) play_init::pli#2 ← phi( play_init/(const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 play_init::@1/(byte*) play_init::pli#1 )
  [435] (byte) play_init::j#2 ← phi( play_init/(byte/signed byte/word/signed word/dword/signed dword) 0 play_init::@1/(byte) play_init::j#1 )
  [436] (byte~) play_init::$1 ← (byte) play_init::j#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [437] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$1) ← (byte*) play_init::pli#2
  [438] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2
  [439] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const byte) PLAYFIELD_COLS#0
  [440] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const byte) PLAYFIELD_COLS#0
  [441] (byte) play_init::j#1 ← ++ (byte) play_init::j#2
  [442] if((byte) play_init::j#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_init::@1
  to:play_init::@3
play_init::@3: scope:[play_init]  from play_init::@1
  [443] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0
  [444] (byte) current_movedown_slow#1 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0)
  to:play_init::@2
play_init::@2: scope:[play_init]  from play_init::@2 play_init::@3
  [445] (byte) play_init::b#2 ← phi( play_init::@2/(byte) play_init::b#1 play_init::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [446] (byte) play_init::b4#0 ← (byte) play_init::b#2 << (byte/signed byte/word/signed word/dword/signed dword) 2
  [447] *((const dword[5]) score_add_bcd#0 + (byte) play_init::b4#0) ← *((const dword[]) SCORE_BASE_BCD#0 + (byte) play_init::b4#0)
  [448] (byte) play_init::b#1 ← ++ (byte) play_init::b#2
  [449] if((byte) play_init::b#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto play_init::@2
  to:play_init::@return
play_init::@return: scope:[play_init]  from play_init::@2
  [450] return 
  to:@return
sprites_irq_init: scope:[sprites_irq_init]  from main::@27
  asm { sei  }
  [452] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  asm { ldaCIA1_INTERRUPT  }
  [454] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0
  [455] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [456] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0
  [457] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127
  [458] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0
  [459] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0
  [460] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
  asm { cli  }
  to:sprites_irq_init::@return
sprites_irq_init::@return: scope:[sprites_irq_init]  from sprites_irq_init
  [462] return 
  to:@return
sprites_init: scope:[sprites_init]  from main::@26
  [463] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15
  [464] *((const byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [465] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0)
  [466] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0)
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  [467] (byte) sprites_init::xpos#2 ← phi( sprites_init/(byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 15*(byte/signed byte/word/signed word/dword/signed dword) 8 sprites_init::@1/(byte) sprites_init::xpos#1 )
  [467] (byte) sprites_init::s#2 ← phi( sprites_init/(byte/signed byte/word/signed word/dword/signed dword) 0 sprites_init::@1/(byte) sprites_init::s#1 )
  [468] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [469] *((const byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2
  [470] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (const byte) BLACK#0
  [471] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24
  [472] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2
  [473] if((byte) sprites_init::s#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  [474] return 
  to:@return
render_init: scope:[render_init]  from main::@25
  [475] phi()
  to:render_init::vicSelectGfxBank1
render_init::vicSelectGfxBank1: scope:[render_init]  from render_init
  [476] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  to:render_init::vicSelectGfxBank1_toDd001
render_init::vicSelectGfxBank1_toDd001: scope:[render_init]  from render_init::vicSelectGfxBank1
  [477] phi()
  to:render_init::vicSelectGfxBank1_@1
render_init::vicSelectGfxBank1_@1: scope:[render_init]  from render_init::vicSelectGfxBank1_toDd001
  [478] *((const byte*) CIA2_PORT_A#0) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0
  to:render_init::@3
render_init::@3: scope:[render_init]  from render_init::vicSelectGfxBank1_@1
  [479] *((const byte*) D011#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [480] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0
  [481] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0
  [482] *((const byte*) BGCOL2#0) ← (const byte) BLUE#0
  [483] *((const byte*) BGCOL3#0) ← (const byte) CYAN#0
  [484] *((const byte*) BGCOL4#0) ← (const byte) GREY#0
  [485] call render_screen_original 
  to:render_init::@4
render_init::@4: scope:[render_init]  from render_init::@3
  [486] phi()
  [487] call render_screen_original 
  to:render_init::@1
render_init::@1: scope:[render_init]  from render_init::@1 render_init::@4
  [488] (byte*) render_init::li_2#2 ← phi( render_init::@1/(byte*) render_init::li_2#1 render_init::@4/(const byte*) PLAYFIELD_SCREEN_2#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16 )
  [488] (byte*) render_init::li_1#2 ← phi( render_init::@1/(byte*) render_init::li_1#1 render_init::@4/(const byte*) PLAYFIELD_SCREEN_1#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16 )
  [488] (byte) render_init::i#2 ← phi( render_init::@1/(byte) render_init::i#1 render_init::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [489] (byte~) render_init::$13 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [490] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$13) ← (byte*) render_init::li_1#2
  [491] (byte~) render_init::$14 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [492] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$14) ← (byte*) render_init::li_2#2
  [493] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte/signed byte/word/signed word/dword/signed dword) 40
  [494] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte/signed byte/word/signed word/dword/signed dword) 40
  [495] (byte) render_init::i#1 ← ++ (byte) render_init::i#2
  [496] if((byte) render_init::i#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@1
  to:render_init::@return
render_init::@return: scope:[render_init]  from render_init::@1
  [497] return 
  to:@return
render_screen_original: scope:[render_screen_original]  from render_init::@3 render_init::@4
  [498] (byte*) render_screen_original::screen#9 ← phi( render_init::@3/(const byte*) PLAYFIELD_SCREEN_1#0 render_init::@4/(const byte*) PLAYFIELD_SCREEN_2#0 )
  to:render_screen_original::@1
render_screen_original::@1: scope:[render_screen_original]  from render_screen_original render_screen_original::@7
  [499] (byte) render_screen_original::y#6 ← phi( render_screen_original/(byte/signed byte/word/signed word/dword/signed dword) 0 render_screen_original::@7/(byte) render_screen_original::y#1 )
  [499] (byte*) render_screen_original::ocols#4 ← phi( render_screen_original/(const byte*) PLAYFIELD_COLORS_ORIGINAL#0+(byte/signed byte/word/signed word/dword/signed dword) 32*(byte/signed byte/word/signed word/dword/signed dword) 2 render_screen_original::@7/(byte*) render_screen_original::ocols#1 )
  [499] (byte*) render_screen_original::oscr#4 ← phi( render_screen_original/(const byte*) PLAYFIELD_SCREEN_ORIGINAL#0+(byte/signed byte/word/signed word/dword/signed dword) 32*(byte/signed byte/word/signed word/dword/signed dword) 2 render_screen_original::@7/(byte*) render_screen_original::oscr#1 )
  [499] (byte*) render_screen_original::cols#7 ← phi( render_screen_original/(const byte*) COLS#0 render_screen_original::@7/(byte*) render_screen_original::cols#3 )
  [499] (byte*) render_screen_original::screen#8 ← phi( render_screen_original/(byte*) render_screen_original::screen#9 render_screen_original::@7/(byte*) render_screen_original::screen#10 )
  to:render_screen_original::@2
render_screen_original::@2: scope:[render_screen_original]  from render_screen_original::@1 render_screen_original::@2
  [500] (byte) render_screen_original::x#4 ← phi( render_screen_original::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 render_screen_original::@2/(byte) render_screen_original::x#1 )
  [500] (byte*) render_screen_original::cols#4 ← phi( render_screen_original::@1/(byte*) render_screen_original::cols#7 render_screen_original::@2/(byte*) render_screen_original::cols#1 )
  [500] (byte*) render_screen_original::screen#5 ← phi( render_screen_original::@1/(byte*) render_screen_original::screen#8 render_screen_original::@2/(byte*) render_screen_original::screen#2 )
  [501] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE#0
  [502] (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5
  [503] *((byte*) render_screen_original::cols#4) ← (const byte) BLACK#0
  [504] (byte*) render_screen_original::cols#1 ← ++ (byte*) render_screen_original::cols#4
  [505] (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4
  [506] if((byte) render_screen_original::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_screen_original::@2
  to:render_screen_original::@3
render_screen_original::@3: scope:[render_screen_original]  from render_screen_original::@2 render_screen_original::@3
  [507] (byte) render_screen_original::x#5 ← phi( render_screen_original::@2/(byte) render_screen_original::x#1 render_screen_original::@3/(byte) render_screen_original::x#2 )
  [507] (byte*) render_screen_original::cols#5 ← phi( render_screen_original::@2/(byte*) render_screen_original::cols#1 render_screen_original::@3/(byte*) render_screen_original::cols#2 )
  [507] (byte*) render_screen_original::ocols#2 ← phi( render_screen_original::@2/(byte*) render_screen_original::ocols#4 render_screen_original::@3/(byte*) render_screen_original::ocols#1 )
  [507] (byte*) render_screen_original::screen#6 ← phi( render_screen_original::@2/(byte*) render_screen_original::screen#2 render_screen_original::@3/(byte*) render_screen_original::screen#3 )
  [507] (byte*) render_screen_original::oscr#2 ← phi( render_screen_original::@2/(byte*) render_screen_original::oscr#4 render_screen_original::@3/(byte*) render_screen_original::oscr#1 )
  [508] *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2)
  [509] (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#6
  [510] (byte*) render_screen_original::oscr#1 ← ++ (byte*) render_screen_original::oscr#2
  [511] *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2)
  [512] (byte*) render_screen_original::cols#2 ← ++ (byte*) render_screen_original::cols#5
  [513] (byte*) render_screen_original::ocols#1 ← ++ (byte*) render_screen_original::ocols#2
  [514] (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5
  [515] if((byte) render_screen_original::x#2!=(byte/signed byte/word/signed word/dword/signed dword) 36) goto render_screen_original::@3
  to:render_screen_original::@4
render_screen_original::@4: scope:[render_screen_original]  from render_screen_original::@3 render_screen_original::@4
  [516] (byte) render_screen_original::x#6 ← phi( render_screen_original::@3/(byte) render_screen_original::x#2 render_screen_original::@4/(byte) render_screen_original::x#3 )
  [516] (byte*) render_screen_original::cols#6 ← phi( render_screen_original::@3/(byte*) render_screen_original::cols#2 render_screen_original::@4/(byte*) render_screen_original::cols#3 )
  [516] (byte*) render_screen_original::screen#7 ← phi( render_screen_original::@3/(byte*) render_screen_original::screen#3 render_screen_original::@4/(byte*) render_screen_original::screen#10 )
  [517] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE#0
  [518] (byte*) render_screen_original::screen#10 ← ++ (byte*) render_screen_original::screen#7
  [519] *((byte*) render_screen_original::cols#6) ← (const byte) BLACK#0
  [520] (byte*) render_screen_original::cols#3 ← ++ (byte*) render_screen_original::cols#6
  [521] (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#6
  [522] if((byte) render_screen_original::x#3!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto render_screen_original::@4
  to:render_screen_original::@7
render_screen_original::@7: scope:[render_screen_original]  from render_screen_original::@4
  [523] (byte) render_screen_original::y#1 ← ++ (byte) render_screen_original::y#6
  [524] if((byte) render_screen_original::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto render_screen_original::@1
  to:render_screen_original::@return
render_screen_original::@return: scope:[render_screen_original]  from render_screen_original::@7
  [525] return 
  to:@return
sid_rnd_init: scope:[sid_rnd_init]  from main
  [526] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) 65535
  [527] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0
  to:sid_rnd_init::@return
sid_rnd_init::@return: scope:[sid_rnd_init]  from sid_rnd_init
  [528] return 
  to:@return
sprites_irq: scope:[sprites_irq]  from
  asm { cld  }
  [530] (byte) sprites_irq::ypos#0 ← (byte) irq_sprite_ypos#0
  [531] *((const byte*) SPRITES_YPOS#0) ← (byte) sprites_irq::ypos#0
  [532] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ypos#0
  [533] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) sprites_irq::ypos#0
  [534] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) sprites_irq::ypos#0
  [535] (byte/signed word/word/dword/signed dword~) sprites_irq::$0 ← (byte) irq_raster_next#0 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [536] (byte) sprites_irq::raster_sprite_gfx_modify#0 ← (byte/signed word/word/dword/signed dword~) sprites_irq::$0
  to:sprites_irq::@1
sprites_irq::@1: scope:[sprites_irq]  from sprites_irq sprites_irq::@1
  [537] if(*((const byte*) RASTER#0)<(byte) sprites_irq::raster_sprite_gfx_modify#0) goto sprites_irq::@1
  to:sprites_irq::@8
sprites_irq::@8: scope:[sprites_irq]  from sprites_irq::@1
  [538] (byte) sprites_irq::ptr#0 ← (byte) irq_sprite_ptr#0
  [539] if((byte) render_screen_showing#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sprites_irq::@2
  to:sprites_irq::@9
sprites_irq::@9: scope:[sprites_irq]  from sprites_irq::@8
  [540] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0) ← (byte) sprites_irq::ptr#0
  [541] (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#0
  [542] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) sprites_irq::ptr#3
  [543] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ptr#3
  [544] (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3
  [545] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) sprites_irq::ptr#4
  to:sprites_irq::@3
sprites_irq::@3: scope:[sprites_irq]  from sprites_irq::@2 sprites_irq::@9
  [546] (byte) irq_cnt#1 ← ++ (byte) irq_cnt#0
  [547] if((byte) irq_cnt#1==(byte/signed byte/word/signed word/dword/signed dword) 9) goto sprites_irq::@4
  to:sprites_irq::@11
sprites_irq::@11: scope:[sprites_irq]  from sprites_irq::@3
  [548] if((byte) irq_cnt#1==(byte/signed byte/word/signed word/dword/signed dword) 10) goto sprites_irq::@5
  to:sprites_irq::@12
sprites_irq::@12: scope:[sprites_irq]  from sprites_irq::@11
  [549] (byte) irq_raster_next#3 ← (byte) irq_raster_next#0 + (byte/signed byte/word/signed word/dword/signed dword) 20
  [550] (byte) irq_sprite_ypos#3 ← (byte) irq_sprite_ypos#0 + (byte/signed byte/word/signed word/dword/signed dword) 21
  [551] (byte) irq_sprite_ptr#3 ← (byte) irq_sprite_ptr#0 + (byte/signed byte/word/signed word/dword/signed dword) 3
  to:sprites_irq::@7
sprites_irq::@7: scope:[sprites_irq]  from sprites_irq::@12 sprites_irq::@15 sprites_irq::@5
  [552] (byte) irq_raster_next#4 ← phi( sprites_irq::@12/(byte) irq_raster_next#3 sprites_irq::@15/(byte) irq_raster_next#1 sprites_irq::@5/(byte) irq_raster_next#2 )
  [553] *((const byte*) RASTER#0) ← (byte) irq_raster_next#4
  [554] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  to:sprites_irq::@return
sprites_irq::@return: scope:[sprites_irq]  from sprites_irq::@7
  [555] return 
  to:@return
sprites_irq::@5: scope:[sprites_irq]  from sprites_irq::@11
  [556] (byte) irq_cnt#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [557] (byte) irq_raster_next#2 ← (const byte) IRQ_RASTER_FIRST#0
  [558] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte/signed byte/word/signed word/dword/signed dword) 21
  [559] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte/signed byte/word/signed word/dword/signed dword) 3
  to:sprites_irq::@7
sprites_irq::@4: scope:[sprites_irq]  from sprites_irq::@3
  [560] (byte) irq_raster_next#1 ← (byte) irq_raster_next#0 + (byte/signed byte/word/signed word/dword/signed dword) 21
  [561] (byte) irq_sprite_ypos#1 ← (const byte) SPRITES_FIRST_YPOS#0
  to:sprites_irq::toSpritePtr2
sprites_irq::toSpritePtr2: scope:[sprites_irq]  from sprites_irq::@4
  [562] phi()
  to:sprites_irq::@15
sprites_irq::@15: scope:[sprites_irq]  from sprites_irq::toSpritePtr2
  [563] (byte) irq_sprite_ptr#1 ← (const byte) sprites_irq::toSpritePtr2_return#0
  to:sprites_irq::@7
sprites_irq::@2: scope:[sprites_irq]  from sprites_irq::@8
  [564] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0) ← (byte) sprites_irq::ptr#0
  [565] (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#0
  [566] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) sprites_irq::ptr#1
  [567] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ptr#1
  [568] (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1
  [569] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) sprites_irq::ptr#2
  to:sprites_irq::@3
