Setting inferred volatile on symbol affected by address-of (word*) main::wp ← &(volatile word) main::w
Resolving sizeof() (byte~) main::$2 ← sizeof  (byte) main::idx
Resolving sizeof() (byte~) main::$4 ← sizeof  (volatile byte) main::b
Resolving sizeof() (byte~) main::$7 ← sizeof  (number~) main::$6
Resolving sizeof() (byte~) main::$11 ← sizeof  (volatile word) main::w
Resolving sizeof() (byte~) main::$13 ← sizeof  (byte*) main::bp
Resolving sizeof() (byte~) main::$15 ← sizeof  (word*) main::wp

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte) main::idx#0 ← (byte) 0
  (byte~) main::$0 ← sizeof  (number) 0
  (byte~) main::$1 ← (byte) '0' + (byte~) main::$0
  *((const nomodify byte*) SCREEN + (byte) main::idx#0) ← (byte~) main::$1
  (byte) main::idx#1 ← ++ (byte) main::idx#0
  (byte~) main::$2 ← (const byte) SIZEOF_BYTE
  (byte~) main::$3 ← (byte) '0' + (byte~) main::$2
  *((const nomodify byte*) SCREEN + (byte) main::idx#1) ← (byte~) main::$3
  (byte) main::idx#2 ← ++ (byte) main::idx#1
  (byte~) main::$4 ← (const byte) SIZEOF_BYTE
  (byte~) main::$5 ← (byte) '0' + (byte~) main::$4
  *((const nomodify byte*) SCREEN + (byte) main::idx#2) ← (byte~) main::$5
  (byte) main::idx#3 ← ++ (byte) main::idx#2
  (byte~) main::$7 ← (const byte) SIZEOF_NUMBER
  (byte~) main::$8 ← (byte) '0' + (byte~) main::$7
  *((const nomodify byte*) SCREEN + (byte) main::idx#3) ← (byte~) main::$8
  (byte) main::idx#4 ← ++ (byte) main::idx#3
  (byte) main::idx#5 ← ++ (byte) main::idx#4
  (byte~) main::$9 ← sizeof  (number) $43ff
  (byte~) main::$10 ← (byte) '0' + (byte~) main::$9
  *((const nomodify byte*) SCREEN + (byte) main::idx#5) ← (byte~) main::$10
  (byte) main::idx#6 ← ++ (byte) main::idx#5
  (byte~) main::$11 ← (const byte) SIZEOF_WORD
  (byte~) main::$12 ← (byte) '0' + (byte~) main::$11
  *((const nomodify byte*) SCREEN + (byte) main::idx#6) ← (byte~) main::$12
  (byte) main::idx#7 ← ++ (byte) main::idx#6
  (byte) main::idx#8 ← ++ (byte) main::idx#7
  (byte~) main::$13 ← (const byte) SIZEOF_POINTER
  (byte~) main::$14 ← (byte) '0' + (byte~) main::$13
  *((const nomodify byte*) SCREEN + (byte) main::idx#8) ← (byte~) main::$14
  (byte) main::idx#9 ← ++ (byte) main::idx#8
  (byte~) main::$15 ← (const byte) SIZEOF_POINTER
  (byte~) main::$16 ← (byte) '0' + (byte~) main::$15
  *((const nomodify byte*) SCREEN + (byte) main::idx#9) ← (byte~) main::$16
  (byte) main::idx#10 ← ++ (byte) main::idx#9
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(const byte) SIZEOF_BYTE = (byte) 1
(const byte) SIZEOF_NUMBER = (byte) $ff
(const byte) SIZEOF_POINTER = (byte) 2
(const byte) SIZEOF_WORD = (byte) 2
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$10
(byte~) main::$11
(byte~) main::$12
(byte~) main::$13
(byte~) main::$14
(byte~) main::$15
(byte~) main::$16
(byte~) main::$2
(byte~) main::$3
(byte~) main::$4
(byte~) main::$5
(byte~) main::$7
(byte~) main::$8
(byte~) main::$9
(label) main::@return
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#10
(byte) main::idx#2
(byte) main::idx#3
(byte) main::idx#4
(byte) main::idx#5
(byte) main::idx#6
(byte) main::idx#7
(byte) main::idx#8
(byte) main::idx#9

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Constant right-side identified [1] (byte~) main::$0 ← sizeof  (number) 0
Constant right-side identified [18] (byte~) main::$9 ← sizeof  (number) $43ff
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#0 = 0
Constant (const byte) main::$0 = sizeof 0
Constant (const byte) main::$2 = SIZEOF_BYTE
Constant (const byte) main::$4 = SIZEOF_BYTE
Constant (const byte) main::$7 = SIZEOF_NUMBER
Constant (const byte) main::$9 = sizeof $43ff
Constant (const byte) main::$11 = SIZEOF_WORD
Constant (const byte) main::$13 = SIZEOF_POINTER
Constant (const byte) main::$15 = SIZEOF_POINTER
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [3] *((const nomodify byte*) SCREEN + (const byte) main::idx#0) ← (byte~) main::$1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte) main::idx#10 and assignment [25] (byte) main::idx#10 ← ++ (byte) main::idx#9
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Resolving sizeof() sizeof (number) 0
Resolving sizeof() sizeof (number) $43ff
Successful SSA optimization PassNSizeOfSimplification
Constant right-side identified [0] (byte~) main::$1 ← (byte) '0' + (const byte) main::$0
Constant right-side identified [2] (byte) main::idx#1 ← ++ (const byte) main::idx#0
Constant right-side identified [3] (byte~) main::$3 ← (byte) '0' + (const byte) main::$2
Constant right-side identified [6] (byte~) main::$5 ← (byte) '0' + (const byte) main::$4
Constant right-side identified [9] (byte~) main::$8 ← (byte) '0' + (const byte) main::$7
Constant right-side identified [13] (byte~) main::$10 ← (byte) '0' + (const byte) main::$9
Constant right-side identified [16] (byte~) main::$12 ← (byte) '0' + (const byte) main::$11
Constant right-side identified [20] (byte~) main::$14 ← (byte) '0' + (const byte) main::$13
Constant right-side identified [23] (byte~) main::$16 ← (byte) '0' + (const byte) main::$15
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$1 = '0'+main::$0
Constant (const byte) main::idx#1 = ++main::idx#0
Constant (const byte) main::$3 = '0'+main::$2
Constant (const byte) main::$5 = '0'+main::$4
Constant (const byte) main::$8 = '0'+main::$7
Constant (const byte) main::$10 = '0'+main::$9
Constant (const byte) main::$12 = '0'+main::$11
Constant (const byte) main::$14 = '0'+main::$13
Constant (const byte) main::$16 = '0'+main::$15
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [2] (byte) main::idx#2 ← ++ (const byte) main::idx#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#2 = ++main::idx#1
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [3] (byte) main::idx#3 ← ++ (const byte) main::idx#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#3 = ++main::idx#2
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [4] (byte) main::idx#4 ← ++ (const byte) main::idx#3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#4 = ++main::idx#3
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [4] (byte) main::idx#5 ← ++ (const byte) main::idx#4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#5 = ++main::idx#4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [5] (byte) main::idx#6 ← ++ (const byte) main::idx#5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#6 = ++main::idx#5
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [6] (byte) main::idx#7 ← ++ (const byte) main::idx#6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#7 = ++main::idx#6
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [6] (byte) main::idx#8 ← ++ (const byte) main::idx#7
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#8 = ++main::idx#7
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [7] (byte) main::idx#9 ← ++ (const byte) main::idx#8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#9 = ++main::idx#8
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings (const byte) main::idx#0
Inlining constant with different constant siblings (const byte) main::idx#1
Inlining constant with different constant siblings (const byte) main::idx#2
Inlining constant with different constant siblings (const byte) main::idx#3
Inlining constant with different constant siblings (const byte) main::idx#4
Inlining constant with different constant siblings (const byte) main::idx#5
Inlining constant with different constant siblings (const byte) main::idx#6
Inlining constant with different constant siblings (const byte) main::idx#7
Inlining constant with different constant siblings (const byte) main::idx#8
Inlining constant with different constant siblings (const byte) main::idx#9
Constant inlined main::$12 = (byte) '0'+(const byte) SIZEOF_WORD
Constant inlined main::$13 = (const byte) SIZEOF_POINTER
Constant inlined main::$14 = (byte) '0'+(const byte) SIZEOF_POINTER
Constant inlined main::$15 = (const byte) SIZEOF_POINTER
Constant inlined main::$10 = (byte) '0'+(const byte) SIZEOF_NUMBER
Constant inlined main::$11 = (const byte) SIZEOF_WORD
Constant inlined main::$16 = (byte) '0'+(const byte) SIZEOF_POINTER
Constant inlined main::idx#0 = (byte) 0
Constant inlined main::idx#1 = ++(byte) 0
Constant inlined main::idx#2 = ++++(byte) 0
Constant inlined main::$1 = (byte) '0'+(const byte) SIZEOF_NUMBER
Constant inlined main::idx#3 = ++++++(byte) 0
Constant inlined main::$2 = (const byte) SIZEOF_BYTE
Constant inlined main::idx#4 = ++++++++(byte) 0
Constant inlined main::idx#5 = ++++++++++(byte) 0
Constant inlined main::$0 = (const byte) SIZEOF_NUMBER
Constant inlined main::idx#6 = ++++++++++++(byte) 0
Constant inlined main::$5 = (byte) '0'+(const byte) SIZEOF_BYTE
Constant inlined main::idx#7 = ++++++++++++++(byte) 0
Constant inlined main::idx#8 = ++++++++++++++++(byte) 0
Constant inlined main::$3 = (byte) '0'+(const byte) SIZEOF_BYTE
Constant inlined main::idx#9 = ++++++++++++++++++(byte) 0
Constant inlined main::$4 = (const byte) SIZEOF_BYTE
Constant inlined main::$9 = (const byte) SIZEOF_NUMBER
Constant inlined main::$7 = (const byte) SIZEOF_NUMBER
Constant inlined main::$8 = (byte) '0'+(const byte) SIZEOF_NUMBER
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+++0)
Consolidated array index constant in *(SCREEN+++++0)
Consolidated array index constant in *(SCREEN+++++++0)
Consolidated array index constant in *(SCREEN+++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Successful SSA optimization Pass2ConstantSimplification
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) SCREEN) ← (byte) '0'+(const byte) SIZEOF_NUMBER
  [1] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte) '0'+(const byte) SIZEOF_BYTE
  [2] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE
  [3] *((const nomodify byte*) SCREEN+(byte) 3) ← (byte) '0'+(const byte) SIZEOF_NUMBER
  [4] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) '0'+(const byte) SIZEOF_NUMBER
  [5] *((const nomodify byte*) SCREEN+(byte) 6) ← (byte) '0'+(const byte) SIZEOF_WORD
  [6] *((const nomodify byte*) SCREEN+(byte) 8) ← (byte) '0'+(const byte) SIZEOF_POINTER
  [7] *((const nomodify byte*) SCREEN+(byte) 9) ← (byte) '0'+(const byte) SIZEOF_POINTER
  to:main::@return
main::@return: scope:[main]  from main
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::idx

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests the sizeof() operator on values/expressions
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_BYTE = 1
  .const SIZEOF_NUMBER = $ff
  .const SIZEOF_WORD = 2
  .const SIZEOF_POINTER = 2
  .label SCREEN = $400
  // main
main: {
    // [0] *((const nomodify byte*) SCREEN) ← (byte) '0'+(const byte) SIZEOF_NUMBER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_NUMBER
    sta SCREEN
    // [1] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+1
    // [2] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+2
    // [3] *((const nomodify byte*) SCREEN+(byte) 3) ← (byte) '0'+(const byte) SIZEOF_NUMBER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_NUMBER
    sta SCREEN+3
    // [4] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) '0'+(const byte) SIZEOF_NUMBER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_NUMBER
    sta SCREEN+5
    // [5] *((const nomodify byte*) SCREEN+(byte) 6) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+6
    // [6] *((const nomodify byte*) SCREEN+(byte) 8) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+8
    // [7] *((const nomodify byte*) SCREEN+(byte) 9) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+9
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify byte*) SCREEN) ← (byte) '0'+(const byte) SIZEOF_NUMBER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte) '0'+(const byte) SIZEOF_BYTE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const nomodify byte*) SCREEN+(byte) 3) ← (byte) '0'+(const byte) SIZEOF_NUMBER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) '0'+(const byte) SIZEOF_NUMBER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] *((const nomodify byte*) SCREEN+(byte) 6) ← (byte) '0'+(const byte) SIZEOF_WORD [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] *((const nomodify byte*) SCREEN+(byte) 8) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] *((const nomodify byte*) SCREEN+(byte) 9) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 57 combination 
Uplifting [] best 57 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests the sizeof() operator on values/expressions
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_BYTE = 1
  .const SIZEOF_NUMBER = $ff
  .const SIZEOF_WORD = 2
  .const SIZEOF_POINTER = 2
  .label SCREEN = $400
  // main
main: {
    // [0] *((const nomodify byte*) SCREEN) ← (byte) '0'+(const byte) SIZEOF_NUMBER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_NUMBER
    sta SCREEN
    // [1] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+1
    // [2] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+2
    // [3] *((const nomodify byte*) SCREEN+(byte) 3) ← (byte) '0'+(const byte) SIZEOF_NUMBER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_NUMBER
    sta SCREEN+3
    // [4] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) '0'+(const byte) SIZEOF_NUMBER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_NUMBER
    sta SCREEN+5
    // [5] *((const nomodify byte*) SCREEN+(byte) 6) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+6
    // [6] *((const nomodify byte*) SCREEN+(byte) 8) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+8
    // [7] *((const nomodify byte*) SCREEN+(byte) 9) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+9
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #'0'+SIZEOF_BYTE
Removing instruction lda #'0'+SIZEOF_NUMBER
Removing instruction lda #'0'+SIZEOF_POINTER
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(const byte) SIZEOF_BYTE = (byte) 1
(const byte) SIZEOF_NUMBER = (byte) $ff
(const byte) SIZEOF_POINTER = (byte) 2
(const byte) SIZEOF_WORD = (byte) 2
(void()) main()
(label) main::@return
(byte) main::idx



FINAL ASSEMBLER
Score: 48

  // File Comments
// Tests the sizeof() operator on values/expressions
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_BYTE = 1
  .const SIZEOF_NUMBER = $ff
  .const SIZEOF_WORD = 2
  .const SIZEOF_POINTER = 2
  .label SCREEN = $400
  // main
main: {
    // SCREEN[idx++] = '0'+sizeof(0)
    // [0] *((const nomodify byte*) SCREEN) ← (byte) '0'+(const byte) SIZEOF_NUMBER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_NUMBER
    sta SCREEN
    // SCREEN[idx++] = '0'+sizeof(idx)
    // [1] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+1
    // SCREEN[idx++] = '0'+sizeof(b)
    // [2] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+2
    // SCREEN[idx++] = '0'+sizeof(b*2)
    // [3] *((const nomodify byte*) SCREEN+(byte) 3) ← (byte) '0'+(const byte) SIZEOF_NUMBER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_NUMBER
    sta SCREEN+3
    // SCREEN[idx++] = '0'+sizeof($43ff)
    // [4] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) '0'+(const byte) SIZEOF_NUMBER -- _deref_pbuc1=vbuc2 
    sta SCREEN+5
    // SCREEN[idx++] = '0'+sizeof(w)
    // [5] *((const nomodify byte*) SCREEN+(byte) 6) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+6
    // SCREEN[idx++] = '0'+sizeof(bp)
    // [6] *((const nomodify byte*) SCREEN+(byte) 8) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+8
    // SCREEN[idx++] = '0'+sizeof(wp)
    // [7] *((const nomodify byte*) SCREEN+(byte) 9) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    sta SCREEN+9
    // main::@return
    // }
    // [8] return 
    rts
}
  // File Data

