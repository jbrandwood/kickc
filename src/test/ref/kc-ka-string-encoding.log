
CONTROL FLOW GRAPH SSA

(signed word()) main()
main: scope:[main]  from _start
  *((const byte*) strTemp + (number) 2) ← (byte) 'e'pm
  *((const byte*) strTemp + (number) 3) ← (number) 0
  asm { ldy#0 loop: ldastrTemp,y beqdone jsr$FFD2 iny jmploop done:  }
  (signed word) main::return#0 ← (number) 0
  to:main::@return
main::@return: scope:[main]  from main
  (signed word) main::return#3 ← phi( main/(signed word) main::return#0 )
  (signed word) main::return#1 ← (signed word) main::return#3
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  (signed word) main::return#2 ← (signed word) main::return#1
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@return
(signed word()) main()
(label) main::@return
(signed word) main::return
(signed word) main::return#0
(signed word) main::return#1
(signed word) main::return#2
(signed word) main::return#3
(const byte*) strTemp[]  = (byte*) "v=X"pm

Adding number conversion cast (unumber) 2 in *((const byte*) strTemp + (number) 2) ← (byte) 'e'pm
Adding number conversion cast (unumber) 0 in *((const byte*) strTemp + (number) 3) ← (number) 0
Adding number conversion cast (unumber) 3 in *((const byte*) strTemp + (number) 3) ← ((unumber)) (number) 0
Adding number conversion cast (snumber) 0 in (signed word) main::return#0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((const byte*) strTemp + (unumber)(number) 3) ← (unumber)(number) 0
Inlining cast (signed word) main::return#0 ← (snumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::return#0 = main::return#3 main::return#1 
Successful SSA optimization Pass2AliasElimination
Constant (const signed word) main::return#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const signed word) main::return#2 = main::return#0
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const signed word) main::return#2
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const signed word) main::return#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Consolidated array index constant in *(strTemp+2)
Consolidated array index constant in *(strTemp+3)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(signed word()) main()
main: scope:[main]  from
  [0] *((const byte*) strTemp+(byte) 2) ← (byte) 'e'pm
  [1] *((const byte*) strTemp+(byte) 3) ← (byte) 0
  asm { ldy#0 loop: ldastrTemp,y beqdone jsr$FFD2 iny jmploop done:  }
  to:main::@return
main::@return: scope:[main]  from main
  [3] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(signed word()) main()
(signed word) main::return

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // [0] *((const byte*) strTemp+(byte) 2) ← (byte) 'e'pm -- _deref_pbuc1=vbuc2 
  .encoding "petscii_mixed"
    lda #'e'
    sta strTemp+2
    // [1] *((const byte*) strTemp+(byte) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta strTemp+3
    // asm { ldy#0 loop: ldastrTemp,y beqdone jsr$FFD2 iny jmploop done:  }
    ldy #0
  loop:
    lda strTemp,y
    beq done
    jsr $ffd2
    iny
    jmp loop
  done:
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
}
  // File Data
  strTemp: .text "v=X"
  .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const byte*) strTemp+(byte) 2) ← (byte) 'e'pm [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const byte*) strTemp+(byte) 3) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement asm { ldy#0 loop: ldastrTemp,y beqdone jsr$FFD2 iny jmploop done:  } always clobbers reg byte a reg byte x reg byte y 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 41 combination 
Uplifting [] best 41 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // [0] *((const byte*) strTemp+(byte) 2) ← (byte) 'e'pm -- _deref_pbuc1=vbuc2 
  .encoding "petscii_mixed"
    lda #'e'
    sta strTemp+2
    // [1] *((const byte*) strTemp+(byte) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta strTemp+3
    // asm { ldy#0 loop: ldastrTemp,y beqdone jsr$FFD2 iny jmploop done:  }
    ldy #0
  loop:
    lda strTemp,y
    beq done
    jsr $ffd2
    iny
    jmp loop
  done:
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
}
  // File Data
  strTemp: .text "v=X"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldy #0 with TAY
Removing instruction __breturn:
Succesful ASM optimization Pass5RedundantLabelElimination

FINAL SYMBOL TABLE
(signed word()) main()
(label) main::@return
(signed word) main::return
(const byte*) strTemp[]  = (byte*) "v=X"pm



FINAL ASSEMBLER
Score: 38

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // strTemp[2] = 'e'
    // [0] *((const byte*) strTemp+(byte) 2) ← (byte) 'e'pm -- _deref_pbuc1=vbuc2 
  .encoding "petscii_mixed"
    lda #'e'
    sta strTemp+2
    // strTemp[3] = 0
    // [1] *((const byte*) strTemp+(byte) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta strTemp+3
    // asm
    // asm { ldy#0 loop: ldastrTemp,y beqdone jsr$FFD2 iny jmploop done:  }
    tay
  loop:
    lda strTemp,y
    beq done
    jsr $ffd2
    iny
    jmp loop
  done:
    // main::@return
    // }
    // [3] return 
    rts
}
  // File Data
  strTemp: .text "v=X"
  .byte 0

