constant byte* const BASIC_ROM = (byte*) 40960
constant byte* const IO_RAM = (byte*) 53248
constant byte* const KERNAL_ROM = (byte*) 57344
constant byte* const PROCPORT = (byte*) 1
constant const byte PROCPORT_BASIC_KERNEL_IO = 7
constant byte* const PROCPORT_DDR = (byte*) 0
constant const byte PROCPORT_DDR_MEMORY_MASK = 7
constant const byte PROCPORT_KERNEL_IO = 6
constant const byte PROCPORT_RAM_ALL = 0
constant const byte PROCPORT_RAM_CHARROM = 1
constant const byte PROCPORT_RAM_IO = 5
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant byte* const SCREEN = (byte*) 1024
void main()
constant byte* main::str[$28]  = "ddr port ddr2 $00 $01 $a000 $d000 $e000"
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
constant byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:6 2002.0
byte* memset::dst#2 dst zp[2]:6 1334.6666666666667
byte* memset::end
constant byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
constant word memset::num#0 num = $3e8
void* memset::return
void* memset::str
constant void* memset::str#0 str = (void*)print_screen#0
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 2002.0
byte print_char::ch#1 reg byte a 202.0
byte print_char::ch#2 reg byte a 202.0
byte print_char::ch#3 reg byte a 11204.0
byte* print_char_cursor
byte* print_char_cursor#1 print_char_cursor zp[2]:8 88.24
byte* print_char_cursor#118 print_char_cursor zp[2]:8 253.5
byte* print_char_cursor#124 print_char_cursor zp[2]:8 189.0
byte* print_char_cursor#126 print_char_cursor zp[2]:8 22.0
byte* print_char_cursor#66 print_char_cursor zp[2]:8 10602.5
byte* print_char_cursor#67 print_char_cursor zp[2]:8 447.64
void print_cls()
constant const byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:2 33.61111111111111
byte* print_line_cursor#35 print_line_cursor zp[2]:2 2103.0
byte* print_line_cursor#69 print_line_cursor zp[2]:2 112.0
void print_ln()
byte* print_screen
constant byte* print_screen#0 print_screen = (byte*) 1024
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 str zp[2]:6 2002.0
byte* print_str::str#10 str zp[2]:6 1026.25
byte* print_str::str#13 str zp[2]:6 101.0
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 202.0
byte~ print_uchar::$2 reg byte x 202.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 22.0
byte print_uchar::b#1 reg byte x 22.0
byte print_uchar::b#2 reg byte x 22.0
byte print_uchar::b#3 reg byte x 22.0
byte print_uchar::b#4 reg byte x 22.0
byte print_uchar::b#5 reg byte x 22.0
byte print_uchar::b#6 reg byte x 22.0
byte print_uchar::b#7 reg byte x 22.0
byte print_uchar::b#8 reg byte x 72.5
void testProcport(byte testProcport::ddr , byte testProcport::port , byte testProcport::ddr2)
byte testProcport::ddr
byte testProcport::ddr#23 reg byte x 2.75
byte testProcport::ddr2
byte testProcport::ddr2#23 ddr2 zp[1]:5 1.375
byte testProcport::port
byte testProcport::port#23 port zp[1]:4 1.8333333333333333
constant byte* testProcport::str[2]  = " "
constant byte* testProcport::str1[4]  = "   "
constant byte* testProcport::str3[3]  = "  "
constant byte* testProcport::str5[5]  = "    "

zp[2]:2 [ print_line_cursor#35 print_line_cursor#69 print_line_cursor#0 ]
reg byte x [ testProcport::ddr#23 ]
zp[1]:4 [ testProcport::port#23 ]
zp[1]:5 [ testProcport::ddr2#23 ]
zp[2]:6 [ memset::dst#2 memset::dst#1 print_str::str#10 print_str::str#13 print_str::str#0 ]
reg byte a [ print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ]
zp[2]:8 [ print_char_cursor#66 print_char_cursor#118 print_char_cursor#1 print_char_cursor#124 print_char_cursor#126 print_char_cursor#67 ]
reg byte x [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#5 print_uchar::b#6 print_uchar::b#7 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
