
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::w#0 = (word){ main::b, 0 }
  main::$3 = (word){ 1, 1 }
  main::$0 = main::$3 + main::w#0
  main::$4 = (word){ 0, 0 }
  main::$1 = main::$0 + main::$4
  main::w2#0 = main::$1
  main::sc#0 = ((byte*)) main::w2#0
  *main::sc#0 = main::bs[1]
  main::$2 = *main::pos == 'm'
  if(main::$2) goto main::@1
  to:main::@2
main::@1: scope:[main]  from main
  *main::BG_COLOR = 5
  to:main::@return
main::@2: scope:[main]  from main
  *main::BG_COLOR = 2
  to:main::@return
main::@return: scope:[main]  from main::@1 main::@2
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
word~ main::$0
word~ main::$1
bool~ main::$2
word~ main::$3
word~ main::$4
const byte* main::BG_COLOR = (byte*)$d021
const byte main::b = 4
const byte* main::bs[]  = { 'c', 'm' }
const byte* main::pos = (byte*)$501
byte* main::sc
byte* main::sc#0
word main::w
word main::w#0
word main::w2
word main::w2#0

Fixing inline constructor with main::$5 = (byte)main::b w= (byte)0
Fixing inline constructor with main::$6 = (byte)1 w= (byte)1
Fixing inline constructor with main::$7 = (byte)0 w= (byte)0
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) 1 in *main::sc#0 = main::bs[1]
Adding number conversion cast (unumber) 5 in *main::BG_COLOR = 5
Adding number conversion cast (unumber) 2 in *main::BG_COLOR = 2
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast main::sc#0 = (byte*)main::w2#0
Inlining cast *main::BG_COLOR = (unumber)5
Inlining cast *main::BG_COLOR = (unumber)2
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1281
Simplifying constant pointer cast (byte*) 53281
Simplifying constant integer cast main::b
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 5
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 1
Finalized unsigned number type 5
Finalized unsigned number type 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::w#0 = main::$5 
Alias main::$3 = main::$6 
Alias main::$4 = main::$7 
Alias main::w2#0 = main::$1 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$2 [8] if(*main::pos=='m') goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [0] main::w#0 = main::b w= 0
Constant right-side identified [1] main::$3 = 1 w= 1
Constant right-side identified [3] main::$4 = 0 w= 0
Successful SSA optimization Pass2ConstantRValueConsolidation
Simplifying constant evaluating to zero 0*$100+0 in [3] main::$4 = 0*$100+0
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::b*$100 in [0] main::w#0 = main::b*$100+0
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) main::b*$100 in [0] main::w#0 = main::b*$100
Adding number conversion cast (unumber) $100 in [0] main::w#0 = ((unumber)) main::b*$100
Adding number conversion cast (unumber) 1*$100+1 in [1] main::$3 = 1*$100+1
Adding number conversion cast (unumber) 1*$100 in [1] main::$3 = ((unumber)) 1*$100+1
Adding number conversion cast (unumber) $100 in [1] main::$3 = ((unumber)) (unumber)1*$100+1
Adding number conversion cast (unumber) 0 in [3] main::$4 = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast [0] main::w#0 = (unumber)main::b*(unumber)$100
Inlining cast [1] main::$3 = (unumber)(unumber)1*(unumber)$100+1
Inlining cast [3] main::$4 = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast main::b*(unumber)$100
Simplifying constant integer cast $100
Simplifying constant integer cast (unumber)1*(unumber)$100+1
Simplifying constant integer cast 1*(unumber)$100
Simplifying constant integer cast $100
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $100
Finalized unsigned number type $100
Finalized unsigned number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant main::w#0 = main::b*$100
Constant main::$3 = 1*$100+1
Constant main::$4 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::$0 in [4] main::w2#0 = main::$0 + main::$4
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant main::$4
Successful SSA optimization PassNEliminateUnusedVars
Alias main::w2#0 = main::$0 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [0] main::w2#0 = main::$3 + main::w#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::w2#0 = main::$3+main::w#0
Successful SSA optimization Pass2ConstantIdentification
Constant main::sc#0 = (byte*)main::w2#0
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$3 = 1*$100+1
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::bs+1)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *main::sc#0 = *(main::bs+1)
  [1] if(*main::pos=='m') goto main::@1
  to:main::@2
main::@2: scope:[main]  from main
  [2] *main::BG_COLOR = 2
  to:main::@return
main::@return: scope:[main]  from main::@1 main::@2
  [3] return 
  to:@return
main::@1: scope:[main]  from main
  [4] *main::BG_COLOR = 5
  to:main::@return


VARIABLE REGISTER WEIGHTS
void main()
byte* main::sc
word main::w
word main::w2

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *main::sc#0 = *(main::bs+1) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] if(*main::pos=='m') goto main::@1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *main::BG_COLOR = 2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *main::BG_COLOR = 5 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 43 combination 
Uplifting [] best 43 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // constant byte array
    .const b = 4
    .const w = b*$100
    .const w2 = 1*$100+1+w
    // Test the result
    .label pos = $501
    .label BG_COLOR = $d021
    // constant inline words inside expression
    .label sc = w2
    // [0] *main::sc#0 = *(main::bs+1) -- _deref_pbuc1=_deref_pbuc2 
    // implicit cast to (byte*)
    lda bs+1
    sta sc
    // [1] if(*main::pos=='m') goto main::@1 -- _deref_pbuc1_eq_vbuc2_then_la1 
    lda #'m'
    cmp pos
    beq __b1
    jmp __b2
    // main::@2
  __b2:
    // [2] *main::BG_COLOR = 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@1
  __b1:
    // [4] *main::BG_COLOR = 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BG_COLOR
    jmp __breturn
    bs: .byte 'c', 'm'
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
const byte* main::BG_COLOR = (byte*) 53281
const byte main::b = 4
const byte* main::bs[]  = { 'c', 'm' }
const byte* main::pos = (byte*) 1281
byte* main::sc
const byte* main::sc#0 sc = (byte*)main::w2#0
word main::w
const word main::w#0 w = main::b*$100
word main::w2
const word main::w2#0 w2 = 1*$100+1+main::w#0



FINAL ASSEMBLER
Score: 40

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // constant byte array
    .const b = 4
    .const w = b*$100
    .const w2 = 1*$100+1+w
    // Test the result
    .label pos = $501
    .label BG_COLOR = $d021
    // constant inline words inside expression
    .label sc = w2
    // *sc = bs[1]
    // [0] *main::sc#0 = *(main::bs+1) -- _deref_pbuc1=_deref_pbuc2 
    // implicit cast to (byte*)
    lda bs+1
    sta sc
    // if(*pos=='m')
    // [1] if(*main::pos=='m') goto main::@1 -- _deref_pbuc1_eq_vbuc2_then_la1 
    lda #'m'
    cmp pos
    beq __b1
    // main::@2
    // *BG_COLOR = 2
    // [2] *main::BG_COLOR = 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR
    // main::@return
    // }
    // [3] return 
    rts
    // main::@1
  __b1:
    // *BG_COLOR = 5
    // [4] *main::BG_COLOR = 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BG_COLOR
    rts
    bs: .byte 'c', 'm'
}
  // File Data

