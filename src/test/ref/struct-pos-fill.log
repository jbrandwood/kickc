Fixing pointer array-indexing *((const struct pos*) p + (byte) idx)
Fixing pointer array-indexing *((const struct pos*) p + (byte) idx)
Replacing struct member reference *((const struct pos*) p + (byte~) main::$2).y with member unwinding reference *((byte*)(const struct pos*) p+(const byte) OFFSET_STRUCT_POS_Y + (byte~) main::$2)
Replacing struct member reference *((const struct pos*) p + (byte~) main::$3).x with member unwinding reference *((byte*)(const struct pos*) p+(const byte) OFFSET_STRUCT_POS_X + (byte~) main::$3)
Identified constant variable (byte) OFFSET
Identified constant variable (byte) XSPACE
Identified constant variable (byte) YSPACE
Culled Empty Block (label) main::@11
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@12
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@9
Culled Empty Block (label) main::@10

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) idx#0 ← (byte) 0
  (byte) line#0 ← (byte) 0
  (byte) row#0 ← (byte) 0
  (byte) x#0 ← (byte) 0
  (byte) y#0 ← (byte) 0
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) y#11 ← phi( @1/(byte) y#10 )
  (byte) idx#10 ← phi( @1/(byte) idx#9 )
  (byte) row#11 ← phi( @1/(byte) row#10 )
  (byte) x#12 ← phi( @1/(byte) x#11 )
  (byte) line#1 ← (number) 0
  to:main::@1
main::@1: scope:[main]  from main main::@6
  (byte) y#9 ← phi( main/(byte) y#11 main::@6/(byte) y#1 )
  (byte) idx#8 ← phi( main/(byte) idx#10 main::@6/(byte) idx#11 )
  (byte) row#9 ← phi( main/(byte) row#11 main::@6/(byte) row#12 )
  (byte) x#9 ← phi( main/(byte) x#12 main::@6/(byte) x#13 )
  (byte) line#5 ← phi( main/(byte) line#1 main::@6/(byte) line#2 )
  (bool~) main::$0 ← (byte) line#5 < (number) 8
  if((bool~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) line#11 ← phi( main::@1/(byte) line#5 )
  (byte) y#12 ← phi( main::@1/(byte) y#9 )
  (byte) idx#12 ← phi( main::@1/(byte) idx#8 )
  (byte) x#5 ← phi( main::@1/(byte) x#9 )
  (byte) x#1 ← ++ (byte) x#5
  (byte) row#1 ← (number) 0
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@5
  (byte) line#9 ← phi( main::@2/(byte) line#11 main::@5/(byte) line#12 )
  (byte) x#10 ← phi( main::@2/(byte) x#1 main::@5/(byte) x#2 )
  (byte) y#8 ← phi( main::@2/(byte) y#12 main::@5/(byte) y#4 )
  (byte) idx#7 ← phi( main::@2/(byte) idx#12 main::@5/(byte) idx#1 )
  (byte) row#5 ← phi( main::@2/(byte) row#1 main::@5/(byte) row#2 )
  (bool~) main::$1 ← (byte) row#5 < (number) 8
  if((bool~) main::$1) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@4
  (byte) line#12 ← phi( main::@4/(byte) line#9 )
  (byte) row#6 ← phi( main::@4/(byte) row#5 )
  (byte) x#6 ← phi( main::@4/(byte) x#10 )
  (byte) y#4 ← phi( main::@4/(byte) y#8 )
  (byte) idx#4 ← phi( main::@4/(byte) idx#7 )
  (byte~) main::$2 ← (byte) idx#4 * (const byte) SIZEOF_STRUCT_POS
  *((byte*)(const struct pos*) p+(const byte) OFFSET_STRUCT_POS_Y + (byte~) main::$2) ← (byte) y#4
  (byte~) main::$3 ← (byte) idx#4 * (const byte) SIZEOF_STRUCT_POS
  *((byte*)(const struct pos*) p+(const byte) OFFSET_STRUCT_POS_X + (byte~) main::$3) ← (byte) x#6
  (byte) idx#1 ← ++ (byte) idx#4
  (byte) x#2 ← (byte) x#6 + (const byte) XSPACE
  (byte) row#2 ← ++ (byte) row#6
  to:main::@4
main::@6: scope:[main]  from main::@4
  (byte) idx#11 ← phi( main::@4/(byte) idx#7 )
  (byte) row#12 ← phi( main::@4/(byte) row#5 )
  (byte) x#13 ← phi( main::@4/(byte) x#10 )
  (byte) line#6 ← phi( main::@4/(byte) line#9 )
  (byte) y#5 ← phi( main::@4/(byte) y#8 )
  (byte) y#1 ← (byte) y#5 + (const byte) YSPACE
  (byte) line#2 ← ++ (byte) line#6
  to:main::@1
main::@return: scope:[main]  from main::@1
  (byte) y#6 ← phi( main::@1/(byte) y#9 )
  (byte) idx#5 ← phi( main::@1/(byte) idx#8 )
  (byte) row#7 ← phi( main::@1/(byte) row#9 )
  (byte) x#7 ← phi( main::@1/(byte) x#9 )
  (byte) line#7 ← phi( main::@1/(byte) line#5 )
  (byte) line#3 ← (byte) line#7
  (byte) x#3 ← (byte) x#7
  (byte) row#3 ← (byte) row#7
  (byte) idx#2 ← (byte) idx#5
  (byte) y#2 ← (byte) y#6
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) y#10 ← phi( @begin/(byte) y#0 )
  (byte) idx#9 ← phi( @begin/(byte) idx#0 )
  (byte) row#10 ← phi( @begin/(byte) row#0 )
  (byte) x#11 ← phi( @begin/(byte) x#0 )
  (byte) line#10 ← phi( @begin/(byte) line#0 )
  call main 
  to:@2
@2: scope:[]  from @1
  (byte) y#7 ← phi( @1/(byte) y#2 )
  (byte) idx#6 ← phi( @1/(byte) idx#2 )
  (byte) row#8 ← phi( @1/(byte) row#3 )
  (byte) x#8 ← phi( @1/(byte) x#3 )
  (byte) line#8 ← phi( @1/(byte) line#3 )
  (byte) line#4 ← (byte) line#8
  (byte) x#4 ← (byte) x#8
  (byte) row#4 ← (byte) row#8
  (byte) idx#3 ← (byte) idx#6
  (byte) y#3 ← (byte) y#7
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POS_X = (byte) 0
(const byte) OFFSET_STRUCT_POS_Y = (byte) 1
(const byte) SIZEOF_STRUCT_POS = (byte) 2
(const byte) XSPACE = (byte) $14
(const byte) YSPACE = (byte) $14
(byte) idx
(byte) idx#0
(byte) idx#1
(byte) idx#10
(byte) idx#11
(byte) idx#12
(byte) idx#2
(byte) idx#3
(byte) idx#4
(byte) idx#5
(byte) idx#6
(byte) idx#7
(byte) idx#8
(byte) idx#9
(byte) line
(byte) line#0
(byte) line#1
(byte) line#10
(byte) line#11
(byte) line#12
(byte) line#2
(byte) line#3
(byte) line#4
(byte) line#5
(byte) line#6
(byte) line#7
(byte) line#8
(byte) line#9
(void()) main()
(bool~) main::$0
(bool~) main::$1
(byte~) main::$2
(byte~) main::$3
(label) main::@1
(label) main::@2
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(const struct pos*) p[(number) $40]  = { fill( $40, 0) }
(byte) pos::x
(byte) pos::y
(byte) row
(byte) row#0
(byte) row#1
(byte) row#10
(byte) row#11
(byte) row#12
(byte) row#2
(byte) row#3
(byte) row#4
(byte) row#5
(byte) row#6
(byte) row#7
(byte) row#8
(byte) row#9
(byte) x
(byte) x#0
(byte) x#1
(byte) x#10
(byte) x#11
(byte) x#12
(byte) x#13
(byte) x#2
(byte) x#3
(byte) x#4
(byte) x#5
(byte) x#6
(byte) x#7
(byte) x#8
(byte) x#9
(byte) y
(byte) y#0
(byte) y#1
(byte) y#10
(byte) y#11
(byte) y#12
(byte) y#2
(byte) y#3
(byte) y#4
(byte) y#5
(byte) y#6
(byte) y#7
(byte) y#8
(byte) y#9

Adding number conversion cast (unumber) 0 in (byte) line#1 ← (number) 0
Adding number conversion cast (unumber) 8 in (bool~) main::$0 ← (byte) line#5 < (number) 8
Adding number conversion cast (unumber) 0 in (byte) row#1 ← (number) 0
Adding number conversion cast (unumber) 8 in (bool~) main::$1 ← (byte) row#5 < (number) 8
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) line#1 ← (unumber)(number) 0
Inlining cast (byte) row#1 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte) x#3 = (byte) x#5 (byte) x#9 (byte) x#7 
Alias (byte) idx#12 = (byte) idx#8 (byte) idx#5 (byte) idx#2 
Alias (byte) y#12 = (byte) y#9 (byte) y#6 (byte) y#2 
Alias (byte) line#11 = (byte) line#5 (byte) line#7 (byte) line#3 
Alias (byte) idx#11 = (byte) idx#4 (byte) idx#7 
Alias (byte) y#4 = (byte) y#8 (byte) y#5 
Alias (byte) x#10 = (byte) x#6 (byte) x#13 
Alias (byte) row#12 = (byte) row#6 (byte) row#5 
Alias (byte) line#12 = (byte) line#9 (byte) line#6 
Alias (byte) row#3 = (byte) row#7 (byte) row#9 
Alias (byte) line#0 = (byte) line#10 
Alias (byte) x#0 = (byte) x#11 
Alias (byte) row#0 = (byte) row#10 
Alias (byte) idx#0 = (byte) idx#9 
Alias (byte) y#0 = (byte) y#10 
Alias (byte) line#4 = (byte) line#8 
Alias (byte) x#4 = (byte) x#8 
Alias (byte) row#4 = (byte) row#8 
Alias (byte) idx#3 = (byte) idx#6 
Alias (byte) y#3 = (byte) y#7 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) x#12 (byte) x#0
Identical Phi Values (byte) row#11 (byte) row#0
Identical Phi Values (byte) idx#10 (byte) idx#0
Identical Phi Values (byte) y#11 (byte) y#0
Identical Phi Values (byte) y#4 (byte) y#12
Identical Phi Values (byte) line#12 (byte) line#11
Identical Phi Values (byte) line#4 (byte) line#11
Identical Phi Values (byte) x#4 (byte) x#3
Identical Phi Values (byte) row#4 (byte) row#3
Identical Phi Values (byte) idx#3 (byte) idx#12
Identical Phi Values (byte) y#3 (byte) y#12
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [19] (byte~) main::$3 ← (byte) idx#11 * (const byte) SIZEOF_STRUCT_POS
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) main::$0 [9] if((byte) line#11<(byte) 8) goto main::@2
Simple Condition (bool~) main::$1 [14] if((byte) row#12<(byte) 8) goto main::@5
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) idx#0 = 0
Constant (const byte) line#0 = 0
Constant (const byte) row#0 = 0
Constant (const byte) x#0 = 0
Constant (const byte) y#0 = 0
Constant (const byte) line#1 = 0
Constant (const byte) row#1 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero (byte*)p in [18] *((byte*)(const struct pos*) p+(const byte) OFFSET_STRUCT_POS_X + (byte~) main::$3) ← (byte) x#10
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable - keeping the phi block (byte) row#3
Eliminating unused constant (const byte) OFFSET_STRUCT_POS_X
Eliminating unused constant (const byte) line#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) row#0
Successful SSA optimization PassNEliminateUnusedVars
Alias (byte~) main::$3 = (byte~) main::$2 
Successful SSA optimization Pass2AliasElimination
Rewriting multiplication to use shift [5] (byte~) main::$3 ← (byte) idx#11 * (const byte) SIZEOF_STRUCT_POS
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) idx#0
Inlining constant with var siblings (const byte) x#0
Inlining constant with var siblings (const byte) y#0
Inlining constant with var siblings (const byte) line#1
Inlining constant with var siblings (const byte) row#1
Constant inlined row#1 = (byte) 0
Constant inlined x#0 = (byte) 0
Constant inlined line#1 = (byte) 0
Constant inlined idx#0 = (byte) 0
Constant inlined y#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant (const byte) SIZEOF_STRUCT_POS
Successful SSA optimization PassNEliminateUnusedVars
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 7 initial phi equivalence classes
Coalesced [10] idx#14 ← idx#12
Coalesced [11] x#15 ← x#1
Coalesced [16] line#13 ← line#2
Coalesced [17] x#14 ← x#10
Coalesced (already) [18] idx#13 ← idx#11
Coalesced [19] y#13 ← y#1
Coalesced [26] row#13 ← row#2
Coalesced [27] idx#15 ← idx#1
Coalesced [28] x#16 ← x#2
Coalesced down to 5 phi equivalence classes
Culled Empty Block (label) @2
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [5] (byte) y#12 ← phi( main/(byte) 0 main::@5/(byte) y#1 )
  [5] (byte) idx#12 ← phi( main/(byte) 0 main::@5/(byte) idx#11 )
  [5] (byte) x#3 ← phi( main/(byte) 0 main::@5/(byte) x#10 )
  [5] (byte) line#11 ← phi( main/(byte) 0 main::@5/(byte) line#2 )
  [6] if((byte) line#11<(byte) 8) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [8] (byte) x#1 ← ++ (byte) x#3
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [9] (byte) x#10 ← phi( main::@2/(byte) x#1 main::@4/(byte) x#2 )
  [9] (byte) idx#11 ← phi( main::@2/(byte) idx#12 main::@4/(byte) idx#1 )
  [9] (byte) row#12 ← phi( main::@2/(byte) 0 main::@4/(byte) row#2 )
  [10] if((byte) row#12<(byte) 8) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@3
  [11] (byte) y#1 ← (byte) y#12 + (const byte) YSPACE
  [12] (byte) line#2 ← ++ (byte) line#11
  to:main::@1
main::@4: scope:[main]  from main::@3
  [13] (byte~) main::$3 ← (byte) idx#11 << (byte) 1
  [14] *((byte*)(const struct pos*) p+(const byte) OFFSET_STRUCT_POS_Y + (byte~) main::$3) ← (byte) y#12
  [15] *((byte*)(const struct pos*) p + (byte~) main::$3) ← (byte) x#10
  [16] (byte) idx#1 ← ++ (byte) idx#11
  [17] (byte) x#2 ← (byte) x#10 + (const byte) XSPACE
  [18] (byte) row#2 ← ++ (byte) row#12
  to:main::@3


VARIABLE REGISTER WEIGHTS
(byte) idx
(byte) idx#1 67.33333333333333
(byte) idx#11 46.42857142857143
(byte) idx#12 7.333333333333333
(byte) line
(byte) line#11 2.75
(byte) line#2 22.0
(void()) main()
(byte~) main::$3 151.5
(byte) pos::x
(byte) pos::y
(byte) row
(byte) row#12 43.285714285714285
(byte) row#2 202.0
(byte) x
(byte) x#1 22.0
(byte) x#10 40.625
(byte) x#2 101.0
(byte) x#3 11.0
(byte) y
(byte) y#1 11.0
(byte) y#12 11.181818181818182

Initial phi equivalence classes
[ line#11 line#2 ]
[ x#3 x#10 x#1 x#2 ]
[ idx#12 idx#11 idx#1 ]
[ y#12 y#1 ]
[ row#12 row#2 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Complete equivalence classes
[ line#11 line#2 ]
[ x#3 x#10 x#1 x#2 ]
[ idx#12 idx#11 idx#1 ]
[ y#12 y#1 ]
[ row#12 row#2 ]
[ main::$3 ]
Allocated zp[1]:2 [ line#11 line#2 ]
Allocated zp[1]:3 [ x#3 x#10 x#1 x#2 ]
Allocated zp[1]:4 [ idx#12 idx#11 idx#1 ]
Allocated zp[1]:5 [ y#12 y#1 ]
Allocated zp[1]:6 [ row#12 row#2 ]
Allocated zp[1]:7 [ main::$3 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Example of structs that can be optimized by going planar
// https://cc65.github.io/mailarchive/2010-09/8593.html?fbclid=IwAR1IF_cTdyWcFeKU93VfL2Un1EuLjkGh7O7dQ4EVj4kpJzJAj01dbmEFQt8
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POS_Y = 1
  .const XSPACE = $14
  .const YSPACE = $14
  .label x = 3
  .label idx = 4
  .label row = 6
  .label y = 5
  .label line = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label __3 = 7
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) y#12 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [5] phi (byte) idx#12 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [5] phi (byte) x#3 = (byte) 0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [5] phi (byte) line#11 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z line
    jmp __b1
    // main::@1
  __b1:
    // [6] if((byte) line#11<(byte) 8) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z line
    cmp #8
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
    // main::@2
  __b2:
    // [8] (byte) x#1 ← ++ (byte) x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [9] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [9] phi (byte) x#10 = (byte) x#1 [phi:main::@2->main::@3#0] -- register_copy 
    // [9] phi (byte) idx#11 = (byte) idx#12 [phi:main::@2->main::@3#1] -- register_copy 
    // [9] phi (byte) row#12 = (byte) 0 [phi:main::@2->main::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z row
    jmp __b3
    // main::@3
  __b3:
    // [10] if((byte) row#12<(byte) 8) goto main::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z row
    cmp #8
    bcc __b4
    jmp __b5
    // main::@5
  __b5:
    // [11] (byte) y#1 ← (byte) y#12 + (const byte) YSPACE -- vbuz1=vbuz1_plus_vbuc1 
    lax.z y
    axs #-[YSPACE]
    stx.z y
    // [12] (byte) line#2 ← ++ (byte) line#11 -- vbuz1=_inc_vbuz1 
    inc.z line
    // [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [5] phi (byte) y#12 = (byte) y#1 [phi:main::@5->main::@1#0] -- register_copy 
    // [5] phi (byte) idx#12 = (byte) idx#11 [phi:main::@5->main::@1#1] -- register_copy 
    // [5] phi (byte) x#3 = (byte) x#10 [phi:main::@5->main::@1#2] -- register_copy 
    // [5] phi (byte) line#11 = (byte) line#2 [phi:main::@5->main::@1#3] -- register_copy 
    jmp __b1
    // main::@4
  __b4:
    // [13] (byte~) main::$3 ← (byte) idx#11 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z idx
    asl
    sta.z __3
    // [14] *((byte*)(const struct pos*) p+(const byte) OFFSET_STRUCT_POS_Y + (byte~) main::$3) ← (byte) y#12 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z y
    ldy.z __3
    sta p+OFFSET_STRUCT_POS_Y,y
    // [15] *((byte*)(const struct pos*) p + (byte~) main::$3) ← (byte) x#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z x
    ldy.z __3
    sta p,y
    // [16] (byte) idx#1 ← ++ (byte) idx#11 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [17] (byte) x#2 ← (byte) x#10 + (const byte) XSPACE -- vbuz1=vbuz1_plus_vbuc1 
    lax.z x
    axs #-[XSPACE]
    stx.z x
    // [18] (byte) row#2 ← ++ (byte) row#12 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [9] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [9] phi (byte) x#10 = (byte) x#2 [phi:main::@4->main::@3#0] -- register_copy 
    // [9] phi (byte) idx#11 = (byte) idx#1 [phi:main::@4->main::@3#1] -- register_copy 
    // [9] phi (byte) row#12 = (byte) row#2 [phi:main::@4->main::@3#2] -- register_copy 
    jmp __b3
}
  // File Data
  p: .fill 2*$40, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [11] (byte) y#1 ← (byte) y#12 + (const byte) YSPACE [ line#11 x#10 idx#11 y#1 ] ( main:2 [ line#11 x#10 idx#11 y#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ line#11 line#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ x#3 x#10 x#1 x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ idx#12 idx#11 idx#1 ]
Statement [13] (byte~) main::$3 ← (byte) idx#11 << (byte) 1 [ line#11 y#12 x#10 idx#11 row#12 main::$3 ] ( main:2 [ line#11 y#12 x#10 idx#11 row#12 main::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ y#12 y#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:6 [ row#12 row#2 ]
Statement [14] *((byte*)(const struct pos*) p+(const byte) OFFSET_STRUCT_POS_Y + (byte~) main::$3) ← (byte) y#12 [ line#11 y#12 x#10 idx#11 row#12 main::$3 ] ( main:2 [ line#11 y#12 x#10 idx#11 row#12 main::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ main::$3 ]
Statement [15] *((byte*)(const struct pos*) p + (byte~) main::$3) ← (byte) x#10 [ line#11 y#12 x#10 idx#11 row#12 ] ( main:2 [ line#11 y#12 x#10 idx#11 row#12 ] ) always clobbers reg byte a 
Statement [17] (byte) x#2 ← (byte) x#10 + (const byte) XSPACE [ line#11 y#12 row#12 idx#1 x#2 ] ( main:2 [ line#11 y#12 row#12 idx#1 x#2 ] ) always clobbers reg byte a 
Statement [11] (byte) y#1 ← (byte) y#12 + (const byte) YSPACE [ line#11 x#10 idx#11 y#1 ] ( main:2 [ line#11 x#10 idx#11 y#1 ] ) always clobbers reg byte a 
Statement [13] (byte~) main::$3 ← (byte) idx#11 << (byte) 1 [ line#11 y#12 x#10 idx#11 row#12 main::$3 ] ( main:2 [ line#11 y#12 x#10 idx#11 row#12 main::$3 ] ) always clobbers reg byte a 
Statement [14] *((byte*)(const struct pos*) p+(const byte) OFFSET_STRUCT_POS_Y + (byte~) main::$3) ← (byte) y#12 [ line#11 y#12 x#10 idx#11 row#12 main::$3 ] ( main:2 [ line#11 y#12 x#10 idx#11 row#12 main::$3 ] ) always clobbers reg byte a 
Statement [15] *((byte*)(const struct pos*) p + (byte~) main::$3) ← (byte) x#10 [ line#11 y#12 x#10 idx#11 row#12 ] ( main:2 [ line#11 y#12 x#10 idx#11 row#12 ] ) always clobbers reg byte a 
Statement [17] (byte) x#2 ← (byte) x#10 + (const byte) XSPACE [ line#11 y#12 row#12 idx#1 x#2 ] ( main:2 [ line#11 y#12 row#12 idx#1 x#2 ] ) always clobbers reg byte a 
Potential registers zp[1]:2 [ line#11 line#2 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ x#3 x#10 x#1 x#2 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ idx#12 idx#11 idx#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ y#12 y#1 ] : zp[1]:5 , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ row#12 row#2 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::$3 ] : zp[1]:7 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 245.29: zp[1]:6 [ row#12 row#2 ] 174.62: zp[1]:3 [ x#3 x#10 x#1 x#2 ] 121.1: zp[1]:4 [ idx#12 idx#11 idx#1 ] 24.75: zp[1]:2 [ line#11 line#2 ] 22.18: zp[1]:5 [ y#12 y#1 ] 
Uplift Scope [main] 151.5: zp[1]:7 [ main::$3 ] 
Uplift Scope [pos] 

Uplifting [] best 7513 combination zp[1]:6 [ row#12 row#2 ] zp[1]:3 [ x#3 x#10 x#1 x#2 ] zp[1]:4 [ idx#12 idx#11 idx#1 ] zp[1]:2 [ line#11 line#2 ] zp[1]:5 [ y#12 y#1 ] 
Limited combination testing to 100 combinations of 243 possible.
Uplifting [main] best 6813 combination reg byte x [ main::$3 ] 
Uplifting [pos] best 6813 combination 
Attempting to uplift remaining variables inzp[1]:6 [ row#12 row#2 ]
Uplifting [] best 5913 combination reg byte y [ row#12 row#2 ] 
Attempting to uplift remaining variables inzp[1]:3 [ x#3 x#10 x#1 x#2 ]
Uplifting [] best 5913 combination zp[1]:3 [ x#3 x#10 x#1 x#2 ] 
Attempting to uplift remaining variables inzp[1]:4 [ idx#12 idx#11 idx#1 ]
Uplifting [] best 5913 combination zp[1]:4 [ idx#12 idx#11 idx#1 ] 
Attempting to uplift remaining variables inzp[1]:2 [ line#11 line#2 ]
Uplifting [] best 5913 combination zp[1]:2 [ line#11 line#2 ] 
Attempting to uplift remaining variables inzp[1]:5 [ y#12 y#1 ]
Uplifting [] best 5913 combination zp[1]:5 [ y#12 y#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Example of structs that can be optimized by going planar
// https://cc65.github.io/mailarchive/2010-09/8593.html?fbclid=IwAR1IF_cTdyWcFeKU93VfL2Un1EuLjkGh7O7dQ4EVj4kpJzJAj01dbmEFQt8
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POS_Y = 1
  .const XSPACE = $14
  .const YSPACE = $14
  .label x = 3
  .label idx = 4
  .label y = 5
  .label line = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) y#12 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [5] phi (byte) idx#12 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [5] phi (byte) x#3 = (byte) 0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [5] phi (byte) line#11 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z line
    jmp __b1
    // main::@1
  __b1:
    // [6] if((byte) line#11<(byte) 8) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z line
    cmp #8
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
    // main::@2
  __b2:
    // [8] (byte) x#1 ← ++ (byte) x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [9] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [9] phi (byte) x#10 = (byte) x#1 [phi:main::@2->main::@3#0] -- register_copy 
    // [9] phi (byte) idx#11 = (byte) idx#12 [phi:main::@2->main::@3#1] -- register_copy 
    // [9] phi (byte) row#12 = (byte) 0 [phi:main::@2->main::@3#2] -- vbuyy=vbuc1 
    ldy #0
    jmp __b3
    // main::@3
  __b3:
    // [10] if((byte) row#12<(byte) 8) goto main::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #8
    bcc __b4
    jmp __b5
    // main::@5
  __b5:
    // [11] (byte) y#1 ← (byte) y#12 + (const byte) YSPACE -- vbuz1=vbuz1_plus_vbuc1 
    lax.z y
    axs #-[YSPACE]
    stx.z y
    // [12] (byte) line#2 ← ++ (byte) line#11 -- vbuz1=_inc_vbuz1 
    inc.z line
    // [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [5] phi (byte) y#12 = (byte) y#1 [phi:main::@5->main::@1#0] -- register_copy 
    // [5] phi (byte) idx#12 = (byte) idx#11 [phi:main::@5->main::@1#1] -- register_copy 
    // [5] phi (byte) x#3 = (byte) x#10 [phi:main::@5->main::@1#2] -- register_copy 
    // [5] phi (byte) line#11 = (byte) line#2 [phi:main::@5->main::@1#3] -- register_copy 
    jmp __b1
    // main::@4
  __b4:
    // [13] (byte~) main::$3 ← (byte) idx#11 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda.z idx
    asl
    tax
    // [14] *((byte*)(const struct pos*) p+(const byte) OFFSET_STRUCT_POS_Y + (byte~) main::$3) ← (byte) y#12 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z y
    sta p+OFFSET_STRUCT_POS_Y,x
    // [15] *((byte*)(const struct pos*) p + (byte~) main::$3) ← (byte) x#10 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z x
    sta p,x
    // [16] (byte) idx#1 ← ++ (byte) idx#11 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [17] (byte) x#2 ← (byte) x#10 + (const byte) XSPACE -- vbuz1=vbuz1_plus_vbuc1 
    lax.z x
    axs #-[XSPACE]
    stx.z x
    // [18] (byte) row#2 ← ++ (byte) row#12 -- vbuyy=_inc_vbuyy 
    iny
    // [9] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [9] phi (byte) x#10 = (byte) x#2 [phi:main::@4->main::@3#0] -- register_copy 
    // [9] phi (byte) idx#11 = (byte) idx#1 [phi:main::@4->main::@3#1] -- register_copy 
    // [9] phi (byte) row#12 = (byte) row#2 [phi:main::@4->main::@3#2] -- register_copy 
    jmp __b3
}
  // File Data
  p: .fill 2*$40, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b5
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __bbegin with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POS_Y = (byte) 1
(const byte) XSPACE = (byte) $14
(const byte) YSPACE = (byte) $14
(byte) idx
(byte) idx#1 idx zp[1]:4 67.33333333333333
(byte) idx#11 idx zp[1]:4 46.42857142857143
(byte) idx#12 idx zp[1]:4 7.333333333333333
(byte) line
(byte) line#11 line zp[1]:2 2.75
(byte) line#2 line zp[1]:2 22.0
(void()) main()
(byte~) main::$3 reg byte x 151.5
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(const struct pos*) p[(number) $40]  = { fill( $40, 0) }
(byte) pos::x
(byte) pos::y
(byte) row
(byte) row#12 reg byte y 43.285714285714285
(byte) row#2 reg byte y 202.0
(byte) x
(byte) x#1 x zp[1]:3 22.0
(byte) x#10 x zp[1]:3 40.625
(byte) x#2 x zp[1]:3 101.0
(byte) x#3 x zp[1]:3 11.0
(byte) y
(byte) y#1 y zp[1]:5 11.0
(byte) y#12 y zp[1]:5 11.181818181818182

zp[1]:2 [ line#11 line#2 ]
zp[1]:3 [ x#3 x#10 x#1 x#2 ]
zp[1]:4 [ idx#12 idx#11 idx#1 ]
zp[1]:5 [ y#12 y#1 ]
reg byte y [ row#12 row#2 ]
reg byte x [ main::$3 ]


FINAL ASSEMBLER
Score: 5181

  // File Comments
// Example of structs that can be optimized by going planar
// https://cc65.github.io/mailarchive/2010-09/8593.html?fbclid=IwAR1IF_cTdyWcFeKU93VfL2Un1EuLjkGh7O7dQ4EVj4kpJzJAj01dbmEFQt8
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POS_Y = 1
  .const XSPACE = $14
  .const YSPACE = $14
  .label x = 3
  .label idx = 4
  .label y = 5
  .label line = 2
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) y#12 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [5] phi (byte) idx#12 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    sta.z idx
    // [5] phi (byte) x#3 = (byte) 0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    sta.z x
    // [5] phi (byte) line#11 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    sta.z line
    // main::@1
  __b1:
    // for (line=0;line<8;++line)
    // [6] if((byte) line#11<(byte) 8) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z line
    cmp #8
    bcc __b2
    // main::@return
    // }
    // [7] return 
    rts
    // main::@2
  __b2:
    // ++x;
    // [8] (byte) x#1 ← ++ (byte) x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [9] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [9] phi (byte) x#10 = (byte) x#1 [phi:main::@2->main::@3#0] -- register_copy 
    // [9] phi (byte) idx#11 = (byte) idx#12 [phi:main::@2->main::@3#1] -- register_copy 
    // [9] phi (byte) row#12 = (byte) 0 [phi:main::@2->main::@3#2] -- vbuyy=vbuc1 
    ldy #0
    // main::@3
  __b3:
    // for (row=0;row<8;++row)
    // [10] if((byte) row#12<(byte) 8) goto main::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #8
    bcc __b4
    // main::@5
    // y+=YSPACE
    // [11] (byte) y#1 ← (byte) y#12 + (const byte) YSPACE -- vbuz1=vbuz1_plus_vbuc1 
    lax.z y
    axs #-[YSPACE]
    stx.z y
    // for (line=0;line<8;++line)
    // [12] (byte) line#2 ← ++ (byte) line#11 -- vbuz1=_inc_vbuz1 
    inc.z line
    // [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [5] phi (byte) y#12 = (byte) y#1 [phi:main::@5->main::@1#0] -- register_copy 
    // [5] phi (byte) idx#12 = (byte) idx#11 [phi:main::@5->main::@1#1] -- register_copy 
    // [5] phi (byte) x#3 = (byte) x#10 [phi:main::@5->main::@1#2] -- register_copy 
    // [5] phi (byte) line#11 = (byte) line#2 [phi:main::@5->main::@1#3] -- register_copy 
    jmp __b1
    // main::@4
  __b4:
    // p[idx].y=y
    // [13] (byte~) main::$3 ← (byte) idx#11 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda.z idx
    asl
    tax
    // [14] *((byte*)(const struct pos*) p+(const byte) OFFSET_STRUCT_POS_Y + (byte~) main::$3) ← (byte) y#12 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z y
    sta p+OFFSET_STRUCT_POS_Y,x
    // p[idx].x=x
    // [15] *((byte*)(const struct pos*) p + (byte~) main::$3) ← (byte) x#10 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z x
    sta p,x
    // ++idx;
    // [16] (byte) idx#1 ← ++ (byte) idx#11 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // x+=XSPACE
    // [17] (byte) x#2 ← (byte) x#10 + (const byte) XSPACE -- vbuz1=vbuz1_plus_vbuc1 
    lax.z x
    axs #-[XSPACE]
    stx.z x
    // for (row=0;row<8;++row)
    // [18] (byte) row#2 ← ++ (byte) row#12 -- vbuyy=_inc_vbuyy 
    iny
    // [9] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
    // [9] phi (byte) x#10 = (byte) x#2 [phi:main::@4->main::@3#0] -- register_copy 
    // [9] phi (byte) idx#11 = (byte) idx#1 [phi:main::@4->main::@3#1] -- register_copy 
    // [9] phi (byte) row#12 = (byte) row#2 [phi:main::@4->main::@3#2] -- register_copy 
    jmp __b3
}
  // File Data
  p: .fill 2*$40, 0

