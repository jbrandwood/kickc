
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main main::@6
  [2] (byte) main::i#2 ← phi( main/(byte) 0 main::@6/(byte) main::i#1 )
  [2] (byte*) print_line_cursor#21 ← phi( main/(const byte*) print_screen#0 main::@6/(byte*) print_line_cursor#0 )
  [2] (byte*) print_char_cursor#55 ← phi( main/(const byte*) print_screen#0 main::@6/(byte*) print_char_cursor#65 )
  [2] (signed word) main::w1#2 ← phi( main/(signed word) $4d2 main::@6/(signed word) main::w1#1 )
  [3] (signed word) main::w2#0 ← (signed word) main::w1#2 - (signed byte) $5b
  [4] (signed word) main::w1#1 ← (signed word) main::w2#0 - (signed byte) $29
  [5] (signed word) print_sint::w#1 ← (signed word) main::w1#1
  [6] call print_sint 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [7] phi()
  [8] call print_char 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [9] (signed word) print_sint::w#2 ← (signed word) main::w2#0
  [10] call print_sint 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [11] phi()
  [12] call print_ln 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [13] (byte) main::i#1 ← ++ (byte) main::i#2
  [14] if((byte) main::i#1!=(byte) $b) goto main::@6
  to:main::@return
main::@return: scope:[main]  from main::@5
  [15] return 
  to:@return
main::@6: scope:[main]  from main::@5
  [16] (byte*) print_char_cursor#65 ← (byte*) print_line_cursor#0
  to:main::@1

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@4
  [17] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [18] (byte*) print_line_cursor#10 ← phi( print_ln/(byte*) print_line_cursor#21 print_ln::@1/(byte*) print_line_cursor#0 )
  [19] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#10 + (byte) $28
  [20] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#12) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [21] return 
  to:@return

(void()) print_sint((signed word) print_sint::w)
print_sint: scope:[print_sint]  from main::@1 main::@3
  [22] (byte*) print_char_cursor#49 ← phi( main::@1/(byte*) print_char_cursor#55 main::@3/(byte*) print_char_cursor#12 )
  [22] (signed word) print_sint::w#3 ← phi( main::@1/(signed word) print_sint::w#1 main::@3/(signed word) print_sint::w#2 )
  [23] if((signed word) print_sint::w#3<(signed byte) 0) goto print_sint::@1
  to:print_sint::@3
print_sint::@3: scope:[print_sint]  from print_sint
  [24] phi()
  [25] call print_char 
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@3 print_sint::@4
  [26] (signed word) print_sint::w#5 ← phi( print_sint::@4/(signed word) print_sint::w#0 print_sint::@3/(signed word) print_sint::w#3 )
  [27] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#5
  [28] call print_uint 
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@2
  [29] return 
  to:@return
print_sint::@1: scope:[print_sint]  from print_sint
  [30] phi()
  [31] call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  [32] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#3
  to:print_sint::@2

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from main::@2 print_sint::@1 print_sint::@3 print_uchar print_uchar::@1
  [33] (byte*) print_char_cursor#37 ← phi( main::@2/(byte*) print_char_cursor#12 print_sint::@1/(byte*) print_char_cursor#49 print_sint::@3/(byte*) print_char_cursor#49 print_uchar/(byte*) print_char_cursor#12 print_uchar::@1/(byte*) print_char_cursor#12 )
  [33] (byte) print_char::ch#5 ← phi( main::@2/(byte) ' ' print_sint::@1/(byte) '-' print_sint::@3/(byte) ' ' print_uchar/(byte) print_char::ch#2 print_uchar::@1/(byte) print_char::ch#3 )
  [34] *((byte*) print_char_cursor#37) ← (byte) print_char::ch#5
  [35] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#37
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [36] return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from print_sint::@2
  [37] (byte) print_uchar::b#0 ← > (word) print_uint::w#0
  [38] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [39] (byte) print_uchar::b#1 ← < (word) print_uint::w#0
  [40] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [41] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  [42] (byte) print_uchar::b#2 ← phi( print_uint/(byte) print_uchar::b#0 print_uint::@1/(byte) print_uchar::b#1 )
  [43] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4
  [44] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [45] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [46] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f
  [47] (byte) print_char::ch#3 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [48] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [49] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [50] phi()
  [51] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [52] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [53] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [54] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [55] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [56] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [57] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [58] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1
