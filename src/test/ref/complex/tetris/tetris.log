Resolved forward reference next_piece_idx to (byte) next_piece_idx
Resolved forward reference next_piece_idx to (byte) next_piece_idx
Resolved forward reference sprites_irq to interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
Resolved forward reference COLLISION_NONE to (const nomodify byte) COLLISION_NONE
Resolved forward reference COLLISION_NONE to (const nomodify byte) COLLISION_NONE
Resolved forward reference COLLISION_NONE to (const nomodify byte) COLLISION_NONE
Resolved forward reference COLLISION_NONE to (const nomodify byte) COLLISION_NONE
Setting inferred volatile on symbol affected by address-of (byte*) render_score::score_bytes ← (byte*)&(dword) score_bcd
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call vicSelectGfxBank (const nomodify byte*) PLAYFIELD_CHARSET 
Inlined call (byte~) render_show::$2 ← call toD018 (const nomodify byte*) PLAYFIELD_SCREEN_1 (const nomodify byte*) PLAYFIELD_CHARSET 
Inlined call (byte~) render_show::$1 ← call toD018 (const nomodify byte*) PLAYFIELD_SCREEN_2 (const nomodify byte*) PLAYFIELD_CHARSET 
Inlined call (byte~) $0 ← call toSpritePtr (const nomodify byte*) PLAYFIELD_SPRITES 
Inlined call (byte~) sprites_irq::$5 ← call toSpritePtr (const nomodify byte*) PLAYFIELD_SPRITES 
Inlined call (byte~) play_spawn_current::$5 ← call sid_rnd 
Inlined call call sid_rnd_init 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@7
  (byte) keyboard_matrix_read::rowid#1 ← phi( keyboard_event_scan::@7/(byte) keyboard_matrix_read::rowid#0 )
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#1)
  (byte~) keyboard_matrix_read::$0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B)
  (byte) keyboard_matrix_read::row_pressed_bits#0 ← (byte~) keyboard_matrix_read::$0
  (byte) keyboard_matrix_read::return#0 ← (byte) keyboard_matrix_read::row_pressed_bits#0
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  (byte) keyboard_matrix_read::return#3 ← phi( keyboard_matrix_read/(byte) keyboard_matrix_read::return#0 )
  (byte) keyboard_matrix_read::return#1 ← (byte) keyboard_matrix_read::return#3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) keyboard_events_size#0 ← (byte) 0
  (byte) keyboard_modifiers#0 ← (byte) 0
  to:@2

(void()) keyboard_event_scan()
keyboard_event_scan: scope:[keyboard_event_scan]  from main::@19
  (byte) keyboard_events_size#53 ← phi( main::@19/(byte) keyboard_events_size#26 )
  (byte) keyboard_event_scan::keycode#0 ← (byte) 0
  (byte) keyboard_event_scan::row#0 ← (byte) 0
  to:keyboard_event_scan::@7
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@9
  (byte) keyboard_events_size#46 ← phi( keyboard_event_scan/(byte) keyboard_events_size#53 keyboard_event_scan::@9/(byte) keyboard_events_size#54 )
  (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte) keyboard_event_scan::keycode#0 keyboard_event_scan::@9/(byte) keyboard_event_scan::keycode#13 )
  (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte) keyboard_event_scan::row#0 keyboard_event_scan::@9/(byte) keyboard_event_scan::row#1 )
  (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  call keyboard_matrix_read 
  (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#1
  to:keyboard_event_scan::@20
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@7
  (byte) keyboard_events_size#37 ← phi( keyboard_event_scan::@7/(byte) keyboard_events_size#46 )
  (byte) keyboard_event_scan::keycode#7 ← phi( keyboard_event_scan::@7/(byte) keyboard_event_scan::keycode#11 )
  (byte) keyboard_event_scan::row#3 ← phi( keyboard_event_scan::@7/(byte) keyboard_event_scan::row#2 )
  (byte) keyboard_matrix_read::return#4 ← phi( keyboard_event_scan::@7/(byte) keyboard_matrix_read::return#2 )
  (byte~) keyboard_event_scan::$12 ← (byte) keyboard_matrix_read::return#4
  (byte) keyboard_event_scan::row_scan#0 ← (byte~) keyboard_event_scan::$12
  (bool~) keyboard_event_scan::$13 ← (byte) keyboard_event_scan::row_scan#0 != *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#3)
  if((bool~) keyboard_event_scan::$13) goto keyboard_event_scan::@8
  to:keyboard_event_scan::@17
keyboard_event_scan::@8: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  (byte) keyboard_events_size#30 ← phi( keyboard_event_scan::@20/(byte) keyboard_events_size#37 )
  (byte) keyboard_event_scan::keycode#12 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_scan::keycode#7 )
  (byte) keyboard_event_scan::row#9 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_scan::row#3 )
  (byte) keyboard_event_scan::row_scan#5 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_scan::row_scan#0 )
  (byte) keyboard_event_scan::col#0 ← (byte) 0
  to:keyboard_event_scan::@10
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  (byte) keyboard_events_size#61 ← phi( keyboard_event_scan::@20/(byte) keyboard_events_size#37 )
  (byte) keyboard_event_scan::row#7 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_scan::row#3 )
  (byte) keyboard_event_scan::keycode#3 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_scan::keycode#7 )
  (number~) keyboard_event_scan::$14 ← (byte) keyboard_event_scan::keycode#3 + (number) 8
  (byte) keyboard_event_scan::keycode#1 ← (number~) keyboard_event_scan::$14
  to:keyboard_event_scan::@9
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@16 keyboard_event_scan::@17
  (byte) keyboard_events_size#54 ← phi( keyboard_event_scan::@16/(byte) keyboard_events_size#60 keyboard_event_scan::@17/(byte) keyboard_events_size#61 )
  (byte) keyboard_event_scan::keycode#13 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#14 keyboard_event_scan::@17/(byte) keyboard_event_scan::keycode#1 )
  (byte) keyboard_event_scan::row#4 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row#6 keyboard_event_scan::@17/(byte) keyboard_event_scan::row#7 )
  (byte) keyboard_event_scan::row#1 ← (byte) keyboard_event_scan::row#4 + rangenext(0,7)
  (bool~) keyboard_event_scan::$25 ← (byte) keyboard_event_scan::row#1 != rangelast(0,7)
  if((bool~) keyboard_event_scan::$25) goto keyboard_event_scan::@7
  to:keyboard_event_scan::@18
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@11 keyboard_event_scan::@8
  (byte) keyboard_events_size#21 ← phi( keyboard_event_scan::@11/(byte) keyboard_events_size#29 keyboard_event_scan::@8/(byte) keyboard_events_size#30 )
  (byte) keyboard_event_scan::keycode#8 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::keycode#2 keyboard_event_scan::@8/(byte) keyboard_event_scan::keycode#12 )
  (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::col#1 keyboard_event_scan::@8/(byte) keyboard_event_scan::col#0 )
  (byte) keyboard_event_scan::row#5 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row#8 keyboard_event_scan::@8/(byte) keyboard_event_scan::row#9 )
  (byte) keyboard_event_scan::row_scan#1 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row_scan#4 keyboard_event_scan::@8/(byte) keyboard_event_scan::row_scan#5 )
  (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#1 ^ *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#5)
  (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2)
  (bool~) keyboard_event_scan::$17 ← (byte~) keyboard_event_scan::$16 != (number) 0
  (bool~) keyboard_event_scan::$18 ← ! (bool~) keyboard_event_scan::$17
  if((bool~) keyboard_event_scan::$18) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@13
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@10 keyboard_event_scan::@12 keyboard_event_scan::@13 keyboard_event_scan::@15
  (byte) keyboard_events_size#29 ← phi( keyboard_event_scan::@10/(byte) keyboard_events_size#21 keyboard_event_scan::@12/(byte) keyboard_events_size#1 keyboard_event_scan::@13/(byte) keyboard_events_size#10 keyboard_event_scan::@15/(byte) keyboard_events_size#2 )
  (byte) keyboard_event_scan::row#8 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::row#5 keyboard_event_scan::@12/(byte) keyboard_event_scan::row#10 keyboard_event_scan::@13/(byte) keyboard_event_scan::row#11 keyboard_event_scan::@15/(byte) keyboard_event_scan::row#12 )
  (byte) keyboard_event_scan::row_scan#4 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::row_scan#1 keyboard_event_scan::@12/(byte) keyboard_event_scan::row_scan#7 keyboard_event_scan::@13/(byte) keyboard_event_scan::row_scan#6 keyboard_event_scan::@15/(byte) keyboard_event_scan::row_scan#8 )
  (byte) keyboard_event_scan::col#3 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::col#2 keyboard_event_scan::@12/(byte) keyboard_event_scan::col#5 keyboard_event_scan::@13/(byte) keyboard_event_scan::col#6 keyboard_event_scan::@15/(byte) keyboard_event_scan::col#7 )
  (byte) keyboard_event_scan::keycode#4 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::keycode#8 keyboard_event_scan::@12/(byte) keyboard_event_scan::keycode#5 keyboard_event_scan::@13/(byte) keyboard_event_scan::keycode#9 keyboard_event_scan::@15/(byte) keyboard_event_scan::keycode#6 )
  (byte) keyboard_event_scan::keycode#2 ← ++ (byte) keyboard_event_scan::keycode#4
  (byte) keyboard_event_scan::col#1 ← (byte) keyboard_event_scan::col#3 + rangenext(0,7)
  (bool~) keyboard_event_scan::$24 ← (byte) keyboard_event_scan::col#1 != rangelast(0,7)
  if((bool~) keyboard_event_scan::$24) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@16
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  (byte) keyboard_event_scan::row#11 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::row#5 )
  (byte) keyboard_event_scan::row_scan#6 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::row_scan#1 )
  (byte) keyboard_event_scan::col#6 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::col#2 )
  (byte) keyboard_event_scan::keycode#9 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::keycode#8 )
  (byte) keyboard_events_size#10 ← phi( keyboard_event_scan::@10/(byte) keyboard_events_size#21 )
  (bool~) keyboard_event_scan::$19 ← (byte) keyboard_events_size#10 != (number) 8
  (bool~) keyboard_event_scan::$20 ← ! (bool~) keyboard_event_scan::$19
  if((bool~) keyboard_event_scan::$20) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@14
keyboard_event_scan::@14: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  (byte) keyboard_event_scan::row#13 ← phi( keyboard_event_scan::@13/(byte) keyboard_event_scan::row#11 )
  (byte) keyboard_events_size#22 ← phi( keyboard_event_scan::@13/(byte) keyboard_events_size#10 )
  (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@13/(byte) keyboard_event_scan::keycode#9 )
  (byte) keyboard_event_scan::col#4 ← phi( keyboard_event_scan::@13/(byte) keyboard_event_scan::col#6 )
  (byte) keyboard_event_scan::row_scan#2 ← phi( keyboard_event_scan::@13/(byte) keyboard_event_scan::row_scan#6 )
  (byte~) keyboard_event_scan::$21 ← (byte) keyboard_event_scan::row_scan#2 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#4)
  (byte) keyboard_event_scan::event_type#0 ← (byte~) keyboard_event_scan::$21
  (bool~) keyboard_event_scan::$22 ← (byte) keyboard_event_scan::event_type#0 == (number) 0
  if((bool~) keyboard_event_scan::$22) goto keyboard_event_scan::@12
  to:keyboard_event_scan::@15
keyboard_event_scan::@12: scope:[keyboard_event_scan]  from keyboard_event_scan::@14
  (byte) keyboard_event_scan::row#10 ← phi( keyboard_event_scan::@14/(byte) keyboard_event_scan::row#13 )
  (byte) keyboard_event_scan::row_scan#7 ← phi( keyboard_event_scan::@14/(byte) keyboard_event_scan::row_scan#2 )
  (byte) keyboard_event_scan::col#5 ← phi( keyboard_event_scan::@14/(byte) keyboard_event_scan::col#4 )
  (byte) keyboard_events_size#11 ← phi( keyboard_event_scan::@14/(byte) keyboard_events_size#22 )
  (byte) keyboard_event_scan::keycode#5 ← phi( keyboard_event_scan::@14/(byte) keyboard_event_scan::keycode#10 )
  (number~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#5 | (number) $40
  *((const byte*) keyboard_events + (byte) keyboard_events_size#11) ← (number~) keyboard_event_scan::$23
  (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#11
  to:keyboard_event_scan::@11
keyboard_event_scan::@15: scope:[keyboard_event_scan]  from keyboard_event_scan::@14
  (byte) keyboard_event_scan::row#12 ← phi( keyboard_event_scan::@14/(byte) keyboard_event_scan::row#13 )
  (byte) keyboard_event_scan::row_scan#8 ← phi( keyboard_event_scan::@14/(byte) keyboard_event_scan::row_scan#2 )
  (byte) keyboard_event_scan::col#7 ← phi( keyboard_event_scan::@14/(byte) keyboard_event_scan::col#4 )
  (byte) keyboard_events_size#12 ← phi( keyboard_event_scan::@14/(byte) keyboard_events_size#22 )
  (byte) keyboard_event_scan::keycode#6 ← phi( keyboard_event_scan::@14/(byte) keyboard_event_scan::keycode#10 )
  *((const byte*) keyboard_events + (byte) keyboard_events_size#12) ← (byte) keyboard_event_scan::keycode#6
  (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#12
  to:keyboard_event_scan::@11
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@11
  (byte) keyboard_events_size#60 ← phi( keyboard_event_scan::@11/(byte) keyboard_events_size#29 )
  (byte) keyboard_event_scan::keycode#14 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::keycode#2 )
  (byte) keyboard_event_scan::row#6 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row#8 )
  (byte) keyboard_event_scan::row_scan#3 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row_scan#4 )
  *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#6) ← (byte) keyboard_event_scan::row_scan#3
  to:keyboard_event_scan::@9
keyboard_event_scan::@18: scope:[keyboard_event_scan]  from keyboard_event_scan::@9
  (byte) keyboard_events_size#71 ← phi( keyboard_event_scan::@9/(byte) keyboard_events_size#54 )
  (byte) keyboard_modifiers#1 ← (number) 0
  (byte) keyboard_event_pressed::keycode#0 ← (const nomodify byte) KEY_LSHIFT
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@21
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@18
  (byte) keyboard_events_size#67 ← phi( keyboard_event_scan::@18/(byte) keyboard_events_size#71 )
  (byte) keyboard_modifiers#18 ← phi( keyboard_event_scan::@18/(byte) keyboard_modifiers#1 )
  (byte) keyboard_event_pressed::return#7 ← phi( keyboard_event_scan::@18/(byte) keyboard_event_pressed::return#0 )
  (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#7
  (bool~) keyboard_event_scan::$1 ← (byte~) keyboard_event_scan::$0 != (number) 0
  (bool~) keyboard_event_scan::$2 ← ! (bool~) keyboard_event_scan::$1
  if((bool~) keyboard_event_scan::$2) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@19
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan::@19 keyboard_event_scan::@21
  (byte) keyboard_events_size#62 ← phi( keyboard_event_scan::@19/(byte) keyboard_events_size#66 keyboard_event_scan::@21/(byte) keyboard_events_size#67 )
  (byte) keyboard_modifiers#25 ← phi( keyboard_event_scan::@19/(byte) keyboard_modifiers#2 keyboard_event_scan::@21/(byte) keyboard_modifiers#18 )
  (byte) keyboard_event_pressed::keycode#1 ← (const nomodify byte) KEY_RSHIFT
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@22
keyboard_event_scan::@22: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  (byte) keyboard_events_size#55 ← phi( keyboard_event_scan::@1/(byte) keyboard_events_size#62 )
  (byte) keyboard_modifiers#19 ← phi( keyboard_event_scan::@1/(byte) keyboard_modifiers#25 )
  (byte) keyboard_event_pressed::return#8 ← phi( keyboard_event_scan::@1/(byte) keyboard_event_pressed::return#1 )
  (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#8
  (bool~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 != (number) 0
  (bool~) keyboard_event_scan::$5 ← ! (bool~) keyboard_event_scan::$4
  if((bool~) keyboard_event_scan::$5) goto keyboard_event_scan::@2
  to:keyboard_event_scan::@4
keyboard_event_scan::@19: scope:[keyboard_event_scan]  from keyboard_event_scan::@21
  (byte) keyboard_events_size#66 ← phi( keyboard_event_scan::@21/(byte) keyboard_events_size#67 )
  (byte) keyboard_modifiers#10 ← phi( keyboard_event_scan::@21/(byte) keyboard_modifiers#18 )
  (byte~) keyboard_event_scan::$26 ← (byte) keyboard_modifiers#10 | (const nomodify byte) KEY_MODIFIER_LSHIFT
  (byte) keyboard_modifiers#2 ← (byte~) keyboard_event_scan::$26
  to:keyboard_event_scan::@1
keyboard_event_scan::@2: scope:[keyboard_event_scan]  from keyboard_event_scan::@22 keyboard_event_scan::@4
  (byte) keyboard_events_size#47 ← phi( keyboard_event_scan::@22/(byte) keyboard_events_size#55 keyboard_event_scan::@4/(byte) keyboard_events_size#56 )
  (byte) keyboard_modifiers#26 ← phi( keyboard_event_scan::@22/(byte) keyboard_modifiers#19 keyboard_event_scan::@4/(byte) keyboard_modifiers#3 )
  (byte) keyboard_event_pressed::keycode#2 ← (const nomodify byte) KEY_CTRL
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@23
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@2
  (byte) keyboard_events_size#38 ← phi( keyboard_event_scan::@2/(byte) keyboard_events_size#47 )
  (byte) keyboard_modifiers#20 ← phi( keyboard_event_scan::@2/(byte) keyboard_modifiers#26 )
  (byte) keyboard_event_pressed::return#9 ← phi( keyboard_event_scan::@2/(byte) keyboard_event_pressed::return#2 )
  (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#9
  (bool~) keyboard_event_scan::$7 ← (byte~) keyboard_event_scan::$6 != (number) 0
  (bool~) keyboard_event_scan::$8 ← ! (bool~) keyboard_event_scan::$7
  if((bool~) keyboard_event_scan::$8) goto keyboard_event_scan::@3
  to:keyboard_event_scan::@5
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@22
  (byte) keyboard_events_size#56 ← phi( keyboard_event_scan::@22/(byte) keyboard_events_size#55 )
  (byte) keyboard_modifiers#11 ← phi( keyboard_event_scan::@22/(byte) keyboard_modifiers#19 )
  (byte~) keyboard_event_scan::$27 ← (byte) keyboard_modifiers#11 | (const nomodify byte) KEY_MODIFIER_RSHIFT
  (byte) keyboard_modifiers#3 ← (byte~) keyboard_event_scan::$27
  to:keyboard_event_scan::@2
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@23 keyboard_event_scan::@5
  (byte) keyboard_events_size#31 ← phi( keyboard_event_scan::@23/(byte) keyboard_events_size#38 keyboard_event_scan::@5/(byte) keyboard_events_size#39 )
  (byte) keyboard_modifiers#27 ← phi( keyboard_event_scan::@23/(byte) keyboard_modifiers#20 keyboard_event_scan::@5/(byte) keyboard_modifiers#4 )
  (byte) keyboard_event_pressed::keycode#3 ← (const nomodify byte) KEY_COMMODORE
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@24
keyboard_event_scan::@24: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  (byte) keyboard_events_size#23 ← phi( keyboard_event_scan::@3/(byte) keyboard_events_size#31 )
  (byte) keyboard_modifiers#21 ← phi( keyboard_event_scan::@3/(byte) keyboard_modifiers#27 )
  (byte) keyboard_event_pressed::return#10 ← phi( keyboard_event_scan::@3/(byte) keyboard_event_pressed::return#3 )
  (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#10
  (bool~) keyboard_event_scan::$10 ← (byte~) keyboard_event_scan::$9 != (number) 0
  (bool~) keyboard_event_scan::$11 ← ! (bool~) keyboard_event_scan::$10
  if((bool~) keyboard_event_scan::$11) goto keyboard_event_scan::@return
  to:keyboard_event_scan::@6
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@23
  (byte) keyboard_events_size#39 ← phi( keyboard_event_scan::@23/(byte) keyboard_events_size#38 )
  (byte) keyboard_modifiers#12 ← phi( keyboard_event_scan::@23/(byte) keyboard_modifiers#20 )
  (byte~) keyboard_event_scan::$28 ← (byte) keyboard_modifiers#12 | (const nomodify byte) KEY_MODIFIER_CTRL
  (byte) keyboard_modifiers#4 ← (byte~) keyboard_event_scan::$28
  to:keyboard_event_scan::@3
keyboard_event_scan::@6: scope:[keyboard_event_scan]  from keyboard_event_scan::@24
  (byte) keyboard_events_size#24 ← phi( keyboard_event_scan::@24/(byte) keyboard_events_size#23 )
  (byte) keyboard_modifiers#13 ← phi( keyboard_event_scan::@24/(byte) keyboard_modifiers#21 )
  (byte~) keyboard_event_scan::$29 ← (byte) keyboard_modifiers#13 | (const nomodify byte) KEY_MODIFIER_COMMODORE
  (byte) keyboard_modifiers#5 ← (byte~) keyboard_event_scan::$29
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@24 keyboard_event_scan::@6
  (byte) keyboard_modifiers#14 ← phi( keyboard_event_scan::@24/(byte) keyboard_modifiers#21 keyboard_event_scan::@6/(byte) keyboard_modifiers#5 )
  (byte) keyboard_events_size#13 ← phi( keyboard_event_scan::@24/(byte) keyboard_events_size#23 keyboard_event_scan::@6/(byte) keyboard_events_size#24 )
  (byte) keyboard_events_size#3 ← (byte) keyboard_events_size#13
  (byte) keyboard_modifiers#6 ← (byte) keyboard_modifiers#14
  return 
  to:@return

(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@1 keyboard_event_scan::@18 keyboard_event_scan::@2 keyboard_event_scan::@3 play_move_down::@1
  (byte) keyboard_event_pressed::keycode#5 ← phi( keyboard_event_scan::@1/(byte) keyboard_event_pressed::keycode#1 keyboard_event_scan::@18/(byte) keyboard_event_pressed::keycode#0 keyboard_event_scan::@2/(byte) keyboard_event_pressed::keycode#2 keyboard_event_scan::@3/(byte) keyboard_event_pressed::keycode#3 play_move_down::@1/(byte) keyboard_event_pressed::keycode#4 )
  (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (number) 3
  (byte) keyboard_event_pressed::row_bits#0 ← *((const byte*) keyboard_scan_values + (byte~) keyboard_event_pressed::$0)
  (number~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (number) 7
  (byte~) keyboard_event_pressed::$2 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte*) keyboard_matrix_col_bitmask + (number~) keyboard_event_pressed::$1)
  (byte) keyboard_event_pressed::return#4 ← (byte~) keyboard_event_pressed::$2
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  (byte) keyboard_event_pressed::return#11 ← phi( keyboard_event_pressed/(byte) keyboard_event_pressed::return#4 )
  (byte) keyboard_event_pressed::return#5 ← (byte) keyboard_event_pressed::return#11
  return 
  to:@return

(byte()) keyboard_event_get()
keyboard_event_get: scope:[keyboard_event_get]  from main::@20
  (byte) keyboard_events_size#14 ← phi( main::@20/(byte) keyboard_events_size#6 )
  (bool~) keyboard_event_get::$0 ← (byte) keyboard_events_size#14 == (number) 0
  if((bool~) keyboard_event_get::$0) goto keyboard_event_get::@1
  to:keyboard_event_get::@2
keyboard_event_get::@1: scope:[keyboard_event_get]  from keyboard_event_get
  (byte) keyboard_events_size#25 ← phi( keyboard_event_get/(byte) keyboard_events_size#14 )
  (byte) keyboard_event_get::return#0 ← (number) $ff
  to:keyboard_event_get::@return
keyboard_event_get::@2: scope:[keyboard_event_get]  from keyboard_event_get
  (byte) keyboard_events_size#15 ← phi( keyboard_event_get/(byte) keyboard_events_size#14 )
  (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#15
  (byte) keyboard_event_get::return#1 ← *((const byte*) keyboard_events + (byte) keyboard_events_size#4)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get::@1 keyboard_event_get::@2
  (byte) keyboard_events_size#16 ← phi( keyboard_event_get::@1/(byte) keyboard_events_size#25 keyboard_event_get::@2/(byte) keyboard_events_size#4 )
  (byte) keyboard_event_get::return#4 ← phi( keyboard_event_get::@1/(byte) keyboard_event_get::return#0 keyboard_event_get::@2/(byte) keyboard_event_get::return#1 )
  (byte) keyboard_event_get::return#2 ← (byte) keyboard_event_get::return#4
  (byte) keyboard_events_size#5 ← (byte) keyboard_events_size#16
  return 
  to:@return
@2: scope:[]  from @1
  (byte) keyboard_modifiers#54 ← phi( @1/(byte) keyboard_modifiers#0 )
  (byte) keyboard_events_size#72 ← phi( @1/(byte) keyboard_events_size#0 )
  (byte*) current_piece_gfx#0 ← (byte*) 0
  (byte) current_piece_char#0 ← (byte) 0
  (byte) current_xpos#0 ← (byte) 0
  (byte) current_ypos#0 ← (byte) 0
  (byte) render_screen_render#0 ← (byte) $20
  (byte) render_screen_show#0 ← (byte) 0
  (volatile byte) render_screen_showing ← (byte) 0
  (volatile dword) score_bcd ← (dword) 0
  (word) lines_bcd#0 ← (word) 0
  (byte) level_bcd#0 ← (byte) 0
  (byte) level#0 ← (byte) 0
  (byte) game_over#0 ← (byte) 0
  kickasm(location (const nomodify byte*) PLAYFIELD_CHARSET) {{ .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "playfield-screen.imap"
 }}
  to:@3

(void()) render_init()
render_init: scope:[render_init]  from main::@9
  (byte*) render_init::vicSelectGfxBank1_gfx#0 ← (const nomodify byte*) PLAYFIELD_CHARSET
  to:render_init::vicSelectGfxBank1
render_init::vicSelectGfxBank1: scope:[render_init]  from render_init
  (byte*) render_init::vicSelectGfxBank1_gfx#1 ← phi( render_init/(byte*) render_init::vicSelectGfxBank1_gfx#0 )
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (number) 3
  (byte*) render_init::vicSelectGfxBank1_toDd001_gfx#0 ← (byte*) render_init::vicSelectGfxBank1_gfx#1
  to:render_init::vicSelectGfxBank1_toDd001
render_init::vicSelectGfxBank1_toDd001: scope:[render_init]  from render_init::vicSelectGfxBank1
  (byte*) render_init::vicSelectGfxBank1_toDd001_gfx#1 ← phi( render_init::vicSelectGfxBank1/(byte*) render_init::vicSelectGfxBank1_toDd001_gfx#0 )
  (byte~) render_init::vicSelectGfxBank1_toDd001_$0 ← > (word)(byte*) render_init::vicSelectGfxBank1_toDd001_gfx#1
  (number~) render_init::vicSelectGfxBank1_toDd001_$1 ← (byte~) render_init::vicSelectGfxBank1_toDd001_$0 / (number) $40
  (number~) render_init::vicSelectGfxBank1_toDd001_$2 ← (number) 3 ^ (number~) render_init::vicSelectGfxBank1_toDd001_$1
  (byte) render_init::vicSelectGfxBank1_toDd001_return#0 ← (number~) render_init::vicSelectGfxBank1_toDd001_$2
  to:render_init::vicSelectGfxBank1_toDd001_@return
render_init::vicSelectGfxBank1_toDd001_@return: scope:[render_init]  from render_init::vicSelectGfxBank1_toDd001
  (byte) render_init::vicSelectGfxBank1_toDd001_return#2 ← phi( render_init::vicSelectGfxBank1_toDd001/(byte) render_init::vicSelectGfxBank1_toDd001_return#0 )
  (byte) render_init::vicSelectGfxBank1_toDd001_return#1 ← (byte) render_init::vicSelectGfxBank1_toDd001_return#2
  to:render_init::vicSelectGfxBank1_@1
render_init::vicSelectGfxBank1_@1: scope:[render_init]  from render_init::vicSelectGfxBank1_toDd001_@return
  (byte) render_init::vicSelectGfxBank1_toDd001_return#3 ← phi( render_init::vicSelectGfxBank1_toDd001_@return/(byte) render_init::vicSelectGfxBank1_toDd001_return#1 )
  (byte~) render_init::vicSelectGfxBank1_$0 ← (byte) render_init::vicSelectGfxBank1_toDd001_return#3
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (byte~) render_init::vicSelectGfxBank1_$0
  to:render_init::@3
render_init::@3: scope:[render_init]  from render_init::vicSelectGfxBank1_@1
  *((const nomodify byte*) D011) ← (const nomodify byte) VIC_ECM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(number) 3
  *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK
  *((const nomodify byte*) BGCOL1) ← (const nomodify byte) BLACK
  *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1 + (number) 0)
  *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2 + (number) 0)
  *((const nomodify byte*) BGCOL4) ← (const nomodify byte) GREY
  (byte*) render_screen_original::screen#0 ← (const nomodify byte*) PLAYFIELD_SCREEN_1
  call render_screen_original 
  to:render_init::@4
render_init::@4: scope:[render_init]  from render_init::@3
  (byte*) render_screen_original::screen#1 ← (const nomodify byte*) PLAYFIELD_SCREEN_2
  call render_screen_original 
  to:render_init::@5
render_init::@5: scope:[render_init]  from render_init::@4
  (byte*) render_init::li_1#0 ← (const nomodify byte*) PLAYFIELD_SCREEN_1+(number) 2*(number) $28+(number) $10
  (byte*) render_init::li_2#0 ← (const nomodify byte*) PLAYFIELD_SCREEN_2+(number) 2*(number) $28+(number) $10
  (byte) render_init::i#0 ← (byte) 0
  to:render_init::@1
render_init::@1: scope:[render_init]  from render_init::@1 render_init::@5
  (byte*) render_init::li_2#2 ← phi( render_init::@1/(byte*) render_init::li_2#1 render_init::@5/(byte*) render_init::li_2#0 )
  (byte*) render_init::li_1#2 ← phi( render_init::@1/(byte*) render_init::li_1#1 render_init::@5/(byte*) render_init::li_1#0 )
  (byte) render_init::i#2 ← phi( render_init::@1/(byte) render_init::i#1 render_init::@5/(byte) render_init::i#0 )
  (byte~) render_init::$4 ← (byte) render_init::i#2 * (const byte) SIZEOF_POINTER
  *((const byte**) screen_lines_1 + (byte~) render_init::$4) ← (byte*) render_init::li_1#2
  (byte~) render_init::$5 ← (byte) render_init::i#2 * (const byte) SIZEOF_POINTER
  *((const byte**) screen_lines_2 + (byte~) render_init::$5) ← (byte*) render_init::li_2#2
  (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (number) $28
  (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (number) $28
  (byte) render_init::i#1 ← (byte) render_init::i#2 + rangenext(0,PLAYFIELD_LINES-1)
  (bool~) render_init::$3 ← (byte) render_init::i#1 != rangelast(0,PLAYFIELD_LINES-1)
  if((bool~) render_init::$3) goto render_init::@1
  to:render_init::@2
render_init::@2: scope:[render_init]  from render_init::@1
  (byte) render_screen_show#1 ← (number) 0
  (byte) render_screen_render#1 ← (number) $20
  to:render_init::@return
render_init::@return: scope:[render_init]  from render_init::@2
  (byte) render_screen_render#9 ← phi( render_init::@2/(byte) render_screen_render#1 )
  (byte) render_screen_show#9 ← phi( render_init::@2/(byte) render_screen_show#1 )
  (byte) render_screen_show#2 ← (byte) render_screen_show#9
  (byte) render_screen_render#2 ← (byte) render_screen_render#9
  return 
  to:@return

(void()) render_show()
render_show: scope:[render_show]  from main::@3
  (byte) level#84 ← phi( main::@3/(byte) level#90 )
  (byte) render_screen_show#10 ← phi( main::@3/(byte) render_screen_show#18 )
  (byte) render_show::d018val#0 ← (byte) 0
  (bool~) render_show::$0 ← (byte) render_screen_show#10 == (number) 0
  if((bool~) render_show::$0) goto render_show::@1
  to:render_show::@3
render_show::@1: scope:[render_show]  from render_show
  (byte) render_screen_show#41 ← phi( render_show/(byte) render_screen_show#10 )
  (byte) level#70 ← phi( render_show/(byte) level#84 )
  (byte*) render_show::toD0181_screen#0 ← (const nomodify byte*) PLAYFIELD_SCREEN_1
  (byte*) render_show::toD0181_gfx#0 ← (const nomodify byte*) PLAYFIELD_CHARSET
  to:render_show::toD0181
render_show::toD0181: scope:[render_show]  from render_show::@1
  (byte) render_screen_show#33 ← phi( render_show::@1/(byte) render_screen_show#41 )
  (byte) level#56 ← phi( render_show::@1/(byte) level#70 )
  (byte*) render_show::toD0181_gfx#1 ← phi( render_show::@1/(byte*) render_show::toD0181_gfx#0 )
  (byte*) render_show::toD0181_screen#1 ← phi( render_show::@1/(byte*) render_show::toD0181_screen#0 )
  (word~) render_show::toD0181_$7 ← (word)(byte*) render_show::toD0181_screen#1
  (number~) render_show::toD0181_$0 ← (word~) render_show::toD0181_$7 & (number) $3fff
  (number~) render_show::toD0181_$1 ← (number~) render_show::toD0181_$0 * (number) 4
  (number~) render_show::toD0181_$2 ← > (number~) render_show::toD0181_$1
  (byte~) render_show::toD0181_$3 ← > (word)(byte*) render_show::toD0181_gfx#1
  (number~) render_show::toD0181_$4 ← (byte~) render_show::toD0181_$3 / (number) 4
  (number~) render_show::toD0181_$5 ← (number~) render_show::toD0181_$4 & (number) $f
  (number~) render_show::toD0181_$6 ← (number~) render_show::toD0181_$2 | (number~) render_show::toD0181_$5
  (byte) render_show::toD0181_return#0 ← (number~) render_show::toD0181_$6
  to:render_show::toD0181_@return
render_show::toD0181_@return: scope:[render_show]  from render_show::toD0181
  (byte) render_screen_show#25 ← phi( render_show::toD0181/(byte) render_screen_show#33 )
  (byte) level#42 ← phi( render_show::toD0181/(byte) level#56 )
  (byte) render_show::toD0181_return#2 ← phi( render_show::toD0181/(byte) render_show::toD0181_return#0 )
  (byte) render_show::toD0181_return#1 ← (byte) render_show::toD0181_return#2
  to:render_show::@4
render_show::@4: scope:[render_show]  from render_show::toD0181_@return
  (byte) render_screen_show#19 ← phi( render_show::toD0181_@return/(byte) render_screen_show#25 )
  (byte) level#26 ← phi( render_show::toD0181_@return/(byte) level#42 )
  (byte) render_show::toD0181_return#3 ← phi( render_show::toD0181_@return/(byte) render_show::toD0181_return#1 )
  (byte~) render_show::$2 ← (byte) render_show::toD0181_return#3
  (byte) render_show::d018val#1 ← (byte~) render_show::$2
  to:render_show::@2
render_show::@3: scope:[render_show]  from render_show
  (byte) render_screen_show#42 ← phi( render_show/(byte) render_screen_show#10 )
  (byte) level#71 ← phi( render_show/(byte) level#84 )
  (byte*) render_show::toD0182_screen#0 ← (const nomodify byte*) PLAYFIELD_SCREEN_2
  (byte*) render_show::toD0182_gfx#0 ← (const nomodify byte*) PLAYFIELD_CHARSET
  to:render_show::toD0182
render_show::toD0182: scope:[render_show]  from render_show::@3
  (byte) render_screen_show#34 ← phi( render_show::@3/(byte) render_screen_show#42 )
  (byte) level#57 ← phi( render_show::@3/(byte) level#71 )
  (byte*) render_show::toD0182_gfx#1 ← phi( render_show::@3/(byte*) render_show::toD0182_gfx#0 )
  (byte*) render_show::toD0182_screen#1 ← phi( render_show::@3/(byte*) render_show::toD0182_screen#0 )
  (word~) render_show::toD0182_$7 ← (word)(byte*) render_show::toD0182_screen#1
  (number~) render_show::toD0182_$0 ← (word~) render_show::toD0182_$7 & (number) $3fff
  (number~) render_show::toD0182_$1 ← (number~) render_show::toD0182_$0 * (number) 4
  (number~) render_show::toD0182_$2 ← > (number~) render_show::toD0182_$1
  (byte~) render_show::toD0182_$3 ← > (word)(byte*) render_show::toD0182_gfx#1
  (number~) render_show::toD0182_$4 ← (byte~) render_show::toD0182_$3 / (number) 4
  (number~) render_show::toD0182_$5 ← (number~) render_show::toD0182_$4 & (number) $f
  (number~) render_show::toD0182_$6 ← (number~) render_show::toD0182_$2 | (number~) render_show::toD0182_$5
  (byte) render_show::toD0182_return#0 ← (number~) render_show::toD0182_$6
  to:render_show::toD0182_@return
render_show::toD0182_@return: scope:[render_show]  from render_show::toD0182
  (byte) render_screen_show#26 ← phi( render_show::toD0182/(byte) render_screen_show#34 )
  (byte) level#43 ← phi( render_show::toD0182/(byte) level#57 )
  (byte) render_show::toD0182_return#2 ← phi( render_show::toD0182/(byte) render_show::toD0182_return#0 )
  (byte) render_show::toD0182_return#1 ← (byte) render_show::toD0182_return#2
  to:render_show::@5
render_show::@5: scope:[render_show]  from render_show::toD0182_@return
  (byte) render_screen_show#20 ← phi( render_show::toD0182_@return/(byte) render_screen_show#26 )
  (byte) level#27 ← phi( render_show::toD0182_@return/(byte) level#43 )
  (byte) render_show::toD0182_return#3 ← phi( render_show::toD0182_@return/(byte) render_show::toD0182_return#1 )
  (byte~) render_show::$1 ← (byte) render_show::toD0182_return#3
  (byte) render_show::d018val#2 ← (byte~) render_show::$1
  to:render_show::@2
render_show::@2: scope:[render_show]  from render_show::@4 render_show::@5
  (byte) render_screen_show#11 ← phi( render_show::@4/(byte) render_screen_show#19 render_show::@5/(byte) render_screen_show#20 )
  (byte) level#12 ← phi( render_show::@4/(byte) level#26 render_show::@5/(byte) level#27 )
  (byte) render_show::d018val#3 ← phi( render_show::@4/(byte) render_show::d018val#1 render_show::@5/(byte) render_show::d018val#2 )
  *((const nomodify byte*) D018) ← (byte) render_show::d018val#3
  *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1 + (byte) level#12)
  *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2 + (byte) level#12)
  (volatile byte) render_screen_showing ← (byte) render_screen_show#11
  to:render_show::@return
render_show::@return: scope:[render_show]  from render_show::@2
  return 
  to:@return

(void()) render_screen_swap()
render_screen_swap: scope:[render_screen_swap]  from main::@26
  (byte) render_screen_show#12 ← phi( main::@26/(byte) render_screen_show#21 )
  (byte) render_screen_render#10 ← phi( main::@26/(byte) render_screen_render#20 )
  (byte) render_screen_render#3 ← (byte) render_screen_render#10 ^ (number) $20
  (byte) render_screen_show#3 ← (byte) render_screen_show#12 ^ (number) $20
  to:render_screen_swap::@return
render_screen_swap::@return: scope:[render_screen_swap]  from render_screen_swap
  (byte) render_screen_show#13 ← phi( render_screen_swap/(byte) render_screen_show#3 )
  (byte) render_screen_render#11 ← phi( render_screen_swap/(byte) render_screen_render#3 )
  (byte) render_screen_render#4 ← (byte) render_screen_render#11
  (byte) render_screen_show#4 ← (byte) render_screen_show#13
  return 
  to:@return

(void()) render_score()
render_score: scope:[render_score]  from main::@25
  (byte) level_bcd#91 ← phi( main::@25/(byte) level_bcd#76 )
  (word) lines_bcd#67 ← phi( main::@25/(word) lines_bcd#66 )
  (byte) render_screen_render#12 ← phi( main::@25/(byte) render_screen_render#21 )
  (byte*) render_score::screen#0 ← (byte*) 0
  (bool~) render_score::$0 ← (byte) render_screen_render#12 == (number) 0
  if((bool~) render_score::$0) goto render_score::@1
  to:render_score::@3
render_score::@1: scope:[render_score]  from render_score
  (byte) level_bcd#83 ← phi( render_score/(byte) level_bcd#91 )
  (word) lines_bcd#56 ← phi( render_score/(word) lines_bcd#67 )
  (byte*) render_score::screen#1 ← (const nomodify byte*) PLAYFIELD_SCREEN_1
  to:render_score::@2
render_score::@3: scope:[render_score]  from render_score
  (byte) level_bcd#84 ← phi( render_score/(byte) level_bcd#91 )
  (word) lines_bcd#57 ← phi( render_score/(word) lines_bcd#67 )
  (byte*) render_score::screen#2 ← (const nomodify byte*) PLAYFIELD_SCREEN_2
  to:render_score::@2
render_score::@2: scope:[render_score]  from render_score::@1 render_score::@3
  (byte) level_bcd#77 ← phi( render_score::@1/(byte) level_bcd#83 render_score::@3/(byte) level_bcd#84 )
  (word) lines_bcd#45 ← phi( render_score::@1/(word) lines_bcd#56 render_score::@3/(word) lines_bcd#57 )
  (byte*) render_score::screen#3 ← phi( render_score::@1/(byte*) render_score::screen#1 render_score::@3/(byte*) render_score::screen#2 )
  (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3
  (word) render_bcd::offset#0 ← (const word) render_score::score_offset
  (byte) render_bcd::bcd#0 ← *((const byte*) render_score::score_bytes + (number) 2)
  (byte) render_bcd::only_low#0 ← (number) 0
  call render_bcd 
  to:render_score::@4
render_score::@4: scope:[render_score]  from render_score::@2
  (byte) level_bcd#67 ← phi( render_score::@2/(byte) level_bcd#77 )
  (word) lines_bcd#33 ← phi( render_score::@2/(word) lines_bcd#45 )
  (byte*) render_score::screen#4 ← phi( render_score::@2/(byte*) render_score::screen#3 )
  (number~) render_score::$2 ← (const word) render_score::score_offset + (number) 2
  (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#4
  (word) render_bcd::offset#1 ← (number~) render_score::$2
  (byte) render_bcd::bcd#1 ← *((const byte*) render_score::score_bytes + (number) 1)
  (byte) render_bcd::only_low#1 ← (number) 0
  call render_bcd 
  to:render_score::@5
render_score::@5: scope:[render_score]  from render_score::@4
  (byte) level_bcd#55 ← phi( render_score::@4/(byte) level_bcd#67 )
  (word) lines_bcd#21 ← phi( render_score::@4/(word) lines_bcd#33 )
  (byte*) render_score::screen#5 ← phi( render_score::@4/(byte*) render_score::screen#4 )
  (number~) render_score::$4 ← (const word) render_score::score_offset + (number) 4
  (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#5
  (word) render_bcd::offset#2 ← (number~) render_score::$4
  (byte) render_bcd::bcd#2 ← *((const byte*) render_score::score_bytes + (number) 0)
  (byte) render_bcd::only_low#2 ← (number) 0
  call render_bcd 
  to:render_score::@6
render_score::@6: scope:[render_score]  from render_score::@5
  (byte) level_bcd#42 ← phi( render_score::@5/(byte) level_bcd#55 )
  (byte*) render_score::screen#6 ← phi( render_score::@5/(byte*) render_score::screen#5 )
  (word) lines_bcd#10 ← phi( render_score::@5/(word) lines_bcd#21 )
  (byte~) render_score::$6 ← > (word) lines_bcd#10
  (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#6
  (word) render_bcd::offset#3 ← (const word) render_score::lines_offset
  (byte) render_bcd::bcd#3 ← (byte~) render_score::$6
  (byte) render_bcd::only_low#3 ← (number) 1
  call render_bcd 
  to:render_score::@7
render_score::@7: scope:[render_score]  from render_score::@6
  (byte) level_bcd#26 ← phi( render_score::@6/(byte) level_bcd#42 )
  (byte*) render_score::screen#7 ← phi( render_score::@6/(byte*) render_score::screen#6 )
  (word) lines_bcd#11 ← phi( render_score::@6/(word) lines_bcd#10 )
  (number~) render_score::$8 ← (const word) render_score::lines_offset + (number) 1
  (byte~) render_score::$9 ← < (word) lines_bcd#11
  (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#7
  (word) render_bcd::offset#4 ← (number~) render_score::$8
  (byte) render_bcd::bcd#4 ← (byte~) render_score::$9
  (byte) render_bcd::only_low#4 ← (number) 0
  call render_bcd 
  to:render_score::@8
render_score::@8: scope:[render_score]  from render_score::@7
  (byte) level_bcd#13 ← phi( render_score::@7/(byte) level_bcd#26 )
  (byte*) render_score::screen#8 ← phi( render_score::@7/(byte*) render_score::screen#7 )
  (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#8
  (word) render_bcd::offset#5 ← (const word) render_score::level_offset
  (byte) render_bcd::bcd#5 ← (byte) level_bcd#13
  (byte) render_bcd::only_low#5 ← (number) 0
  call render_bcd 
  to:render_score::@9
render_score::@9: scope:[render_score]  from render_score::@8
  to:render_score::@return
render_score::@return: scope:[render_score]  from render_score::@9
  return 
  to:@return

(void()) render_bcd((byte*) render_bcd::screen , (word) render_bcd::offset , (byte) render_bcd::bcd , (byte) render_bcd::only_low)
render_bcd: scope:[render_bcd]  from render_score::@2 render_score::@4 render_score::@5 render_score::@6 render_score::@7 render_score::@8
  (byte) render_bcd::bcd#8 ← phi( render_score::@2/(byte) render_bcd::bcd#0 render_score::@4/(byte) render_bcd::bcd#1 render_score::@5/(byte) render_bcd::bcd#2 render_score::@6/(byte) render_bcd::bcd#3 render_score::@7/(byte) render_bcd::bcd#4 render_score::@8/(byte) render_bcd::bcd#5 )
  (byte) render_bcd::only_low#6 ← phi( render_score::@2/(byte) render_bcd::only_low#0 render_score::@4/(byte) render_bcd::only_low#1 render_score::@5/(byte) render_bcd::only_low#2 render_score::@6/(byte) render_bcd::only_low#3 render_score::@7/(byte) render_bcd::only_low#4 render_score::@8/(byte) render_bcd::only_low#5 )
  (word) render_bcd::offset#6 ← phi( render_score::@2/(word) render_bcd::offset#0 render_score::@4/(word) render_bcd::offset#1 render_score::@5/(word) render_bcd::offset#2 render_score::@6/(word) render_bcd::offset#3 render_score::@7/(word) render_bcd::offset#4 render_score::@8/(word) render_bcd::offset#5 )
  (byte*) render_bcd::screen#6 ← phi( render_score::@2/(byte*) render_bcd::screen#0 render_score::@4/(byte*) render_bcd::screen#1 render_score::@5/(byte*) render_bcd::screen#2 render_score::@6/(byte*) render_bcd::screen#3 render_score::@7/(byte*) render_bcd::screen#4 render_score::@8/(byte*) render_bcd::screen#5 )
  (byte*~) render_bcd::$0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6
  (byte*) render_bcd::screen_pos#0 ← (byte*~) render_bcd::$0
  (bool~) render_bcd::$1 ← (byte) render_bcd::only_low#6 == (number) 0
  (bool~) render_bcd::$2 ← ! (bool~) render_bcd::$1
  if((bool~) render_bcd::$2) goto render_bcd::@1
  to:render_bcd::@2
render_bcd::@1: scope:[render_bcd]  from render_bcd render_bcd::@2
  (byte*) render_bcd::screen_pos#3 ← phi( render_bcd/(byte*) render_bcd::screen_pos#0 render_bcd::@2/(byte*) render_bcd::screen_pos#2 )
  (byte) render_bcd::bcd#6 ← phi( render_bcd/(byte) render_bcd::bcd#8 render_bcd::@2/(byte) render_bcd::bcd#7 )
  (number~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (number) $f
  (number~) render_bcd::$4 ← (const nomodify byte) render_bcd::ZERO_CHAR + (number~) render_bcd::$3
  *((byte*) render_bcd::screen_pos#3) ← (number~) render_bcd::$4
  (byte*) render_bcd::screen_pos#1 ← ++ (byte*) render_bcd::screen_pos#3
  to:render_bcd::@return
render_bcd::@2: scope:[render_bcd]  from render_bcd
  (byte*) render_bcd::screen_pos#4 ← phi( render_bcd/(byte*) render_bcd::screen_pos#0 )
  (byte) render_bcd::bcd#7 ← phi( render_bcd/(byte) render_bcd::bcd#8 )
  (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#7 >> (number) 4
  (byte~) render_bcd::$6 ← (const nomodify byte) render_bcd::ZERO_CHAR + (byte~) render_bcd::$5
  *((byte*) render_bcd::screen_pos#4) ← (byte~) render_bcd::$6
  (byte*) render_bcd::screen_pos#2 ← ++ (byte*) render_bcd::screen_pos#4
  to:render_bcd::@1
render_bcd::@return: scope:[render_bcd]  from render_bcd::@1
  return 
  to:@return

(void()) render_screen_original((byte*) render_screen_original::screen)
render_screen_original: scope:[render_screen_original]  from render_init::@3 render_init::@4
  (byte*) render_screen_original::screen#9 ← phi( render_init::@3/(byte*) render_screen_original::screen#0 render_init::@4/(byte*) render_screen_original::screen#1 )
  (byte*) render_screen_original::oscr#0 ← (const to_nomodify byte*) PLAYFIELD_SCREEN_ORIGINAL+(number) $20*(number) 2
  (byte*) render_screen_original::ocols#0 ← (const to_nomodify byte*) PLAYFIELD_COLORS_ORIGINAL+(number) $20*(number) 2
  (byte*) render_screen_original::cols#0 ← (const nomodify byte*) COLS
  (byte) render_screen_original::y#0 ← (byte) 0
  to:render_screen_original::@1
render_screen_original::@1: scope:[render_screen_original]  from render_screen_original render_screen_original::@5
  (byte) render_screen_original::y#6 ← phi( render_screen_original/(byte) render_screen_original::y#0 render_screen_original::@5/(byte) render_screen_original::y#1 )
  (byte*) render_screen_original::ocols#4 ← phi( render_screen_original/(byte*) render_screen_original::ocols#0 render_screen_original::@5/(byte*) render_screen_original::ocols#5 )
  (byte*) render_screen_original::oscr#4 ← phi( render_screen_original/(byte*) render_screen_original::oscr#0 render_screen_original::@5/(byte*) render_screen_original::oscr#5 )
  (byte*) render_screen_original::cols#7 ← phi( render_screen_original/(byte*) render_screen_original::cols#0 render_screen_original::@5/(byte*) render_screen_original::cols#8 )
  (byte*) render_screen_original::screen#8 ← phi( render_screen_original/(byte*) render_screen_original::screen#9 render_screen_original::@5/(byte*) render_screen_original::screen#10 )
  (byte) render_screen_original::x#0 ← (byte) 0
  to:render_screen_original::@2
render_screen_original::@2: scope:[render_screen_original]  from render_screen_original::@1 render_screen_original::@2
  (byte) render_screen_original::y#5 ← phi( render_screen_original::@1/(byte) render_screen_original::y#6 render_screen_original::@2/(byte) render_screen_original::y#5 )
  (byte*) render_screen_original::ocols#3 ← phi( render_screen_original::@1/(byte*) render_screen_original::ocols#4 render_screen_original::@2/(byte*) render_screen_original::ocols#3 )
  (byte*) render_screen_original::oscr#3 ← phi( render_screen_original::@1/(byte*) render_screen_original::oscr#4 render_screen_original::@2/(byte*) render_screen_original::oscr#3 )
  (byte) render_screen_original::x#4 ← phi( render_screen_original::@1/(byte) render_screen_original::x#0 render_screen_original::@2/(byte) render_screen_original::x#1 )
  (byte*) render_screen_original::cols#4 ← phi( render_screen_original::@1/(byte*) render_screen_original::cols#7 render_screen_original::@2/(byte*) render_screen_original::cols#1 )
  (byte*) render_screen_original::screen#5 ← phi( render_screen_original::@1/(byte*) render_screen_original::screen#8 render_screen_original::@2/(byte*) render_screen_original::screen#2 )
  *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE
  (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5
  *((byte*) render_screen_original::cols#4) ← (const nomodify byte) BLACK
  (byte*) render_screen_original::cols#1 ← ++ (byte*) render_screen_original::cols#4
  (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4
  (bool~) render_screen_original::$0 ← (byte) render_screen_original::x#1 != (number) 4
  if((bool~) render_screen_original::$0) goto render_screen_original::@2
  to:render_screen_original::@3
render_screen_original::@3: scope:[render_screen_original]  from render_screen_original::@2 render_screen_original::@3
  (byte) render_screen_original::y#4 ← phi( render_screen_original::@2/(byte) render_screen_original::y#5 render_screen_original::@3/(byte) render_screen_original::y#4 )
  (byte) render_screen_original::x#5 ← phi( render_screen_original::@2/(byte) render_screen_original::x#1 render_screen_original::@3/(byte) render_screen_original::x#2 )
  (byte*) render_screen_original::cols#5 ← phi( render_screen_original::@2/(byte*) render_screen_original::cols#1 render_screen_original::@3/(byte*) render_screen_original::cols#2 )
  (byte*) render_screen_original::ocols#2 ← phi( render_screen_original::@2/(byte*) render_screen_original::ocols#3 render_screen_original::@3/(byte*) render_screen_original::ocols#1 )
  (byte*) render_screen_original::screen#6 ← phi( render_screen_original::@2/(byte*) render_screen_original::screen#2 render_screen_original::@3/(byte*) render_screen_original::screen#3 )
  (byte*) render_screen_original::oscr#2 ← phi( render_screen_original::@2/(byte*) render_screen_original::oscr#3 render_screen_original::@3/(byte*) render_screen_original::oscr#1 )
  *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2)
  (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#6
  (byte*) render_screen_original::oscr#1 ← ++ (byte*) render_screen_original::oscr#2
  *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2)
  (byte*) render_screen_original::cols#2 ← ++ (byte*) render_screen_original::cols#5
  (byte*) render_screen_original::ocols#1 ← ++ (byte*) render_screen_original::ocols#2
  (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5
  (bool~) render_screen_original::$1 ← (byte) render_screen_original::x#2 != (number) $24
  if((bool~) render_screen_original::$1) goto render_screen_original::@3
  to:render_screen_original::@4
render_screen_original::@4: scope:[render_screen_original]  from render_screen_original::@3 render_screen_original::@4
  (byte*) render_screen_original::ocols#6 ← phi( render_screen_original::@3/(byte*) render_screen_original::ocols#1 render_screen_original::@4/(byte*) render_screen_original::ocols#6 )
  (byte*) render_screen_original::oscr#6 ← phi( render_screen_original::@3/(byte*) render_screen_original::oscr#1 render_screen_original::@4/(byte*) render_screen_original::oscr#6 )
  (byte) render_screen_original::y#3 ← phi( render_screen_original::@3/(byte) render_screen_original::y#4 render_screen_original::@4/(byte) render_screen_original::y#3 )
  (byte) render_screen_original::x#6 ← phi( render_screen_original::@3/(byte) render_screen_original::x#2 render_screen_original::@4/(byte) render_screen_original::x#3 )
  (byte*) render_screen_original::cols#6 ← phi( render_screen_original::@3/(byte*) render_screen_original::cols#2 render_screen_original::@4/(byte*) render_screen_original::cols#3 )
  (byte*) render_screen_original::screen#7 ← phi( render_screen_original::@3/(byte*) render_screen_original::screen#3 render_screen_original::@4/(byte*) render_screen_original::screen#4 )
  *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE
  (byte*) render_screen_original::screen#4 ← ++ (byte*) render_screen_original::screen#7
  *((byte*) render_screen_original::cols#6) ← (const nomodify byte) BLACK
  (byte*) render_screen_original::cols#3 ← ++ (byte*) render_screen_original::cols#6
  (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#6
  (bool~) render_screen_original::$2 ← (byte) render_screen_original::x#3 != (number) $28
  if((bool~) render_screen_original::$2) goto render_screen_original::@4
  to:render_screen_original::@5
render_screen_original::@5: scope:[render_screen_original]  from render_screen_original::@4
  (byte*) render_screen_original::ocols#5 ← phi( render_screen_original::@4/(byte*) render_screen_original::ocols#6 )
  (byte*) render_screen_original::oscr#5 ← phi( render_screen_original::@4/(byte*) render_screen_original::oscr#6 )
  (byte*) render_screen_original::cols#8 ← phi( render_screen_original::@4/(byte*) render_screen_original::cols#3 )
  (byte*) render_screen_original::screen#10 ← phi( render_screen_original::@4/(byte*) render_screen_original::screen#4 )
  (byte) render_screen_original::y#2 ← phi( render_screen_original::@4/(byte) render_screen_original::y#3 )
  (byte) render_screen_original::y#1 ← (byte) render_screen_original::y#2 + rangenext(0,$18)
  (bool~) render_screen_original::$3 ← (byte) render_screen_original::y#1 != rangelast(0,$18)
  if((bool~) render_screen_original::$3) goto render_screen_original::@1
  to:render_screen_original::@return
render_screen_original::@return: scope:[render_screen_original]  from render_screen_original::@5
  return 
  to:@return

(void()) render_playfield()
render_playfield: scope:[render_playfield]  from main::@15 main::@8
  (byte) render_screen_render#22 ← phi( main::@15/(byte) render_screen_render#30 main::@8/(byte) render_screen_render#31 )
  (byte) render_playfield::i#0 ← (byte)(const nomodify byte) PLAYFIELD_COLS*(number) 2
  (byte) render_playfield::l#0 ← (byte) 2
  to:render_playfield::@1
render_playfield::@1: scope:[render_playfield]  from render_playfield render_playfield::@3
  (byte) render_playfield::i#3 ← phi( render_playfield/(byte) render_playfield::i#0 render_playfield::@3/(byte) render_playfield::i#4 )
  (byte) render_playfield::l#2 ← phi( render_playfield/(byte) render_playfield::l#0 render_playfield::@3/(byte) render_playfield::l#1 )
  (byte) render_screen_render#13 ← phi( render_playfield/(byte) render_screen_render#22 render_playfield::@3/(byte) render_screen_render#23 )
  (byte~) render_playfield::$0 ← (byte) render_screen_render#13 + (byte) render_playfield::l#2
  (byte~) render_playfield::$3 ← (byte~) render_playfield::$0 * (const byte) SIZEOF_POINTER
  (byte*) render_playfield::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_playfield::$3)
  (byte) render_playfield::c#0 ← (byte) 0
  to:render_playfield::@2
render_playfield::@2: scope:[render_playfield]  from render_playfield::@1 render_playfield::@2
  (byte) render_screen_render#32 ← phi( render_playfield::@1/(byte) render_screen_render#13 render_playfield::@2/(byte) render_screen_render#32 )
  (byte) render_playfield::l#4 ← phi( render_playfield::@1/(byte) render_playfield::l#2 render_playfield::@2/(byte) render_playfield::l#4 )
  (byte) render_playfield::c#2 ← phi( render_playfield::@1/(byte) render_playfield::c#0 render_playfield::@2/(byte) render_playfield::c#1 )
  (byte*) render_playfield::screen_line#2 ← phi( render_playfield::@1/(byte*) render_playfield::screen_line#0 render_playfield::@2/(byte*) render_playfield::screen_line#1 )
  (byte) render_playfield::i#2 ← phi( render_playfield::@1/(byte) render_playfield::i#3 render_playfield::@2/(byte) render_playfield::i#1 )
  *((byte*) render_playfield::screen_line#2) ← *((const byte*) playfield + (byte) render_playfield::i#2)
  (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2
  (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2
  (byte) render_playfield::c#1 ← (byte) render_playfield::c#2 + rangenext(0,PLAYFIELD_COLS-1)
  (bool~) render_playfield::$1 ← (byte) render_playfield::c#1 != rangelast(0,PLAYFIELD_COLS-1)
  if((bool~) render_playfield::$1) goto render_playfield::@2
  to:render_playfield::@3
render_playfield::@3: scope:[render_playfield]  from render_playfield::@2
  (byte) render_playfield::i#4 ← phi( render_playfield::@2/(byte) render_playfield::i#1 )
  (byte) render_screen_render#23 ← phi( render_playfield::@2/(byte) render_screen_render#32 )
  (byte) render_playfield::l#3 ← phi( render_playfield::@2/(byte) render_playfield::l#4 )
  (byte) render_playfield::l#1 ← (byte) render_playfield::l#3 + rangenext(2,PLAYFIELD_LINES-1)
  (bool~) render_playfield::$2 ← (byte) render_playfield::l#1 != rangelast(2,PLAYFIELD_LINES-1)
  if((bool~) render_playfield::$2) goto render_playfield::@1
  to:render_playfield::@return
render_playfield::@return: scope:[render_playfield]  from render_playfield::@3
  return 
  to:@return

(void()) render_moving()
render_moving: scope:[render_moving]  from main::@16 main::@23
  (byte) current_piece_char#68 ← phi( main::@16/(byte) current_piece_char#80 main::@23/(byte) current_piece_char#84 )
  (byte*) current_piece_gfx#64 ← phi( main::@16/(byte*) current_piece_gfx#81 main::@23/(byte*) current_piece_gfx#82 )
  (byte) current_xpos#59 ← phi( main::@16/(byte) current_xpos#76 main::@23/(byte) current_xpos#77 )
  (byte) render_screen_render#33 ← phi( main::@16/(byte) render_screen_render#36 main::@23/(byte) render_screen_render#39 )
  (byte) current_ypos#13 ← phi( main::@16/(byte) current_ypos#30 main::@23/(byte) current_ypos#31 )
  (byte) render_moving::i#0 ← (byte) 0
  (byte) render_moving::ypos#0 ← (byte) current_ypos#13
  (byte) render_moving::l#0 ← (byte) 0
  to:render_moving::@1
render_moving::@1: scope:[render_moving]  from render_moving render_moving::@3
  (byte) current_piece_char#52 ← phi( render_moving/(byte) current_piece_char#68 render_moving::@3/(byte) current_piece_char#69 )
  (byte) render_moving::l#5 ← phi( render_moving/(byte) render_moving::l#0 render_moving::@3/(byte) render_moving::l#1 )
  (byte*) current_piece_gfx#46 ← phi( render_moving/(byte*) current_piece_gfx#64 render_moving::@3/(byte*) current_piece_gfx#65 )
  (byte) render_moving::i#5 ← phi( render_moving/(byte) render_moving::i#0 render_moving::@3/(byte) render_moving::i#8 )
  (byte) current_xpos#36 ← phi( render_moving/(byte) current_xpos#59 render_moving::@3/(byte) current_xpos#60 )
  (byte) render_screen_render#24 ← phi( render_moving/(byte) render_screen_render#33 render_moving::@3/(byte) render_screen_render#34 )
  (byte) render_moving::ypos#2 ← phi( render_moving/(byte) render_moving::ypos#0 render_moving::@3/(byte) render_moving::ypos#1 )
  (bool~) render_moving::$0 ← (byte) render_moving::ypos#2 > (number) 1
  if((bool~) render_moving::$0) goto render_moving::@2
  to:render_moving::@7
render_moving::@2: scope:[render_moving]  from render_moving::@1
  (byte) render_moving::l#8 ← phi( render_moving::@1/(byte) render_moving::l#5 )
  (byte) current_piece_char#37 ← phi( render_moving::@1/(byte) current_piece_char#52 )
  (byte) render_moving::i#6 ← phi( render_moving::@1/(byte) render_moving::i#5 )
  (byte*) current_piece_gfx#29 ← phi( render_moving::@1/(byte*) current_piece_gfx#46 )
  (byte) current_xpos#16 ← phi( render_moving::@1/(byte) current_xpos#36 )
  (byte) render_moving::ypos#3 ← phi( render_moving::@1/(byte) render_moving::ypos#2 )
  (byte) render_screen_render#14 ← phi( render_moving::@1/(byte) render_screen_render#24 )
  (byte~) render_moving::$1 ← (byte) render_screen_render#14 + (byte) render_moving::ypos#3
  (byte~) render_moving::$6 ← (byte~) render_moving::$1 * (const byte) SIZEOF_POINTER
  (byte*) render_moving::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_moving::$6)
  (byte) render_moving::xpos#0 ← (byte) current_xpos#16
  (byte) render_moving::c#0 ← (byte) 0
  to:render_moving::@4
render_moving::@7: scope:[render_moving]  from render_moving::@1
  (byte) current_piece_char#85 ← phi( render_moving::@1/(byte) current_piece_char#52 )
  (byte*) current_piece_gfx#83 ← phi( render_moving::@1/(byte*) current_piece_gfx#46 )
  (byte) current_xpos#79 ← phi( render_moving::@1/(byte) current_xpos#36 )
  (byte) render_screen_render#42 ← phi( render_moving::@1/(byte) render_screen_render#24 )
  (byte) render_moving::l#4 ← phi( render_moving::@1/(byte) render_moving::l#5 )
  (byte) render_moving::ypos#6 ← phi( render_moving::@1/(byte) render_moving::ypos#2 )
  (byte) render_moving::i#3 ← phi( render_moving::@1/(byte) render_moving::i#5 )
  (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (number) 4
  to:render_moving::@3
render_moving::@3: scope:[render_moving]  from render_moving::@5 render_moving::@7
  (byte) current_piece_char#69 ← phi( render_moving::@5/(byte) current_piece_char#38 render_moving::@7/(byte) current_piece_char#85 )
  (byte*) current_piece_gfx#65 ← phi( render_moving::@5/(byte*) current_piece_gfx#30 render_moving::@7/(byte*) current_piece_gfx#83 )
  (byte) render_moving::i#8 ← phi( render_moving::@5/(byte) render_moving::i#7 render_moving::@7/(byte) render_moving::i#1 )
  (byte) current_xpos#60 ← phi( render_moving::@5/(byte) current_xpos#78 render_moving::@7/(byte) current_xpos#79 )
  (byte) render_screen_render#34 ← phi( render_moving::@5/(byte) render_screen_render#41 render_moving::@7/(byte) render_screen_render#42 )
  (byte) render_moving::l#2 ← phi( render_moving::@5/(byte) render_moving::l#3 render_moving::@7/(byte) render_moving::l#4 )
  (byte) render_moving::ypos#4 ← phi( render_moving::@5/(byte) render_moving::ypos#5 render_moving::@7/(byte) render_moving::ypos#6 )
  (byte) render_moving::ypos#1 ← ++ (byte) render_moving::ypos#4
  (byte) render_moving::l#1 ← (byte) render_moving::l#2 + rangenext(0,3)
  (bool~) render_moving::$5 ← (byte) render_moving::l#1 != rangelast(0,3)
  if((bool~) render_moving::$5) goto render_moving::@1
  to:render_moving::@return
render_moving::@4: scope:[render_moving]  from render_moving::@2 render_moving::@5
  (byte) current_xpos#95 ← phi( render_moving::@2/(byte) current_xpos#16 render_moving::@5/(byte) current_xpos#78 )
  (byte) render_screen_render#48 ← phi( render_moving::@2/(byte) render_screen_render#14 render_moving::@5/(byte) render_screen_render#41 )
  (byte) render_moving::l#6 ← phi( render_moving::@2/(byte) render_moving::l#8 render_moving::@5/(byte) render_moving::l#3 )
  (byte) render_moving::ypos#7 ← phi( render_moving::@2/(byte) render_moving::ypos#3 render_moving::@5/(byte) render_moving::ypos#5 )
  (byte*) render_moving::screen_line#2 ← phi( render_moving::@2/(byte*) render_moving::screen_line#0 render_moving::@5/(byte*) render_moving::screen_line#3 )
  (byte) current_piece_char#24 ← phi( render_moving::@2/(byte) current_piece_char#37 render_moving::@5/(byte) current_piece_char#38 )
  (byte) render_moving::c#3 ← phi( render_moving::@2/(byte) render_moving::c#0 render_moving::@5/(byte) render_moving::c#1 )
  (byte) render_moving::xpos#4 ← phi( render_moving::@2/(byte) render_moving::xpos#0 render_moving::@5/(byte) render_moving::xpos#1 )
  (byte) render_moving::i#4 ← phi( render_moving::@2/(byte) render_moving::i#6 render_moving::@5/(byte) render_moving::i#7 )
  (byte*) current_piece_gfx#15 ← phi( render_moving::@2/(byte*) current_piece_gfx#29 render_moving::@5/(byte*) current_piece_gfx#30 )
  (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#15 + (byte) render_moving::i#4)
  (byte) render_moving::i#2 ← ++ (byte) render_moving::i#4
  (bool~) render_moving::$2 ← (byte) render_moving::current_cell#0 != (number) 0
  (bool~) render_moving::$3 ← ! (bool~) render_moving::$2
  if((bool~) render_moving::$3) goto render_moving::@5
  to:render_moving::@6
render_moving::@5: scope:[render_moving]  from render_moving::@4 render_moving::@6
  (byte) current_xpos#78 ← phi( render_moving::@4/(byte) current_xpos#95 render_moving::@6/(byte) current_xpos#96 )
  (byte) render_screen_render#41 ← phi( render_moving::@4/(byte) render_screen_render#48 render_moving::@6/(byte) render_screen_render#49 )
  (byte*) render_moving::screen_line#3 ← phi( render_moving::@4/(byte*) render_moving::screen_line#2 render_moving::@6/(byte*) render_moving::screen_line#1 )
  (byte) current_piece_char#38 ← phi( render_moving::@4/(byte) current_piece_char#24 render_moving::@6/(byte) current_piece_char#12 )
  (byte) render_moving::i#7 ← phi( render_moving::@4/(byte) render_moving::i#2 render_moving::@6/(byte) render_moving::i#9 )
  (byte*) current_piece_gfx#30 ← phi( render_moving::@4/(byte*) current_piece_gfx#15 render_moving::@6/(byte*) current_piece_gfx#47 )
  (byte) render_moving::l#3 ← phi( render_moving::@4/(byte) render_moving::l#6 render_moving::@6/(byte) render_moving::l#7 )
  (byte) render_moving::ypos#5 ← phi( render_moving::@4/(byte) render_moving::ypos#7 render_moving::@6/(byte) render_moving::ypos#8 )
  (byte) render_moving::c#2 ← phi( render_moving::@4/(byte) render_moving::c#3 render_moving::@6/(byte) render_moving::c#4 )
  (byte) render_moving::xpos#2 ← phi( render_moving::@4/(byte) render_moving::xpos#4 render_moving::@6/(byte) render_moving::xpos#3 )
  (byte) render_moving::xpos#1 ← ++ (byte) render_moving::xpos#2
  (byte) render_moving::c#1 ← (byte) render_moving::c#2 + rangenext(0,3)
  (bool~) render_moving::$4 ← (byte) render_moving::c#1 != rangelast(0,3)
  if((bool~) render_moving::$4) goto render_moving::@4
  to:render_moving::@3
render_moving::@6: scope:[render_moving]  from render_moving::@4
  (byte) current_xpos#96 ← phi( render_moving::@4/(byte) current_xpos#95 )
  (byte) render_screen_render#49 ← phi( render_moving::@4/(byte) render_screen_render#48 )
  (byte) render_moving::i#9 ← phi( render_moving::@4/(byte) render_moving::i#2 )
  (byte*) current_piece_gfx#47 ← phi( render_moving::@4/(byte*) current_piece_gfx#15 )
  (byte) render_moving::l#7 ← phi( render_moving::@4/(byte) render_moving::l#6 )
  (byte) render_moving::ypos#8 ← phi( render_moving::@4/(byte) render_moving::ypos#7 )
  (byte) render_moving::c#4 ← phi( render_moving::@4/(byte) render_moving::c#3 )
  (byte) render_moving::xpos#3 ← phi( render_moving::@4/(byte) render_moving::xpos#4 )
  (byte*) render_moving::screen_line#1 ← phi( render_moving::@4/(byte*) render_moving::screen_line#2 )
  (byte) current_piece_char#12 ← phi( render_moving::@4/(byte) current_piece_char#24 )
  *((byte*) render_moving::screen_line#1 + (byte) render_moving::xpos#3) ← (byte) current_piece_char#12
  to:render_moving::@5
render_moving::@return: scope:[render_moving]  from render_moving::@3
  return 
  to:@return

(void()) render_next()
render_next: scope:[render_next]  from main::@17 main::@24
  (byte) next_piece_idx#36 ← phi( main::@17/(byte) next_piece_idx#46 main::@24/(byte) next_piece_idx#47 )
  (byte) render_screen_render#15 ← phi( main::@17/(byte) render_screen_render#25 main::@24/(byte) render_screen_render#26 )
  (byte*) render_next::screen_next_area#0 ← (byte*) 0
  (bool~) render_next::$0 ← (byte) render_screen_render#15 == (number) 0
  if((bool~) render_next::$0) goto render_next::@1
  to:render_next::@3
render_next::@1: scope:[render_next]  from render_next
  (byte) next_piece_idx#24 ← phi( render_next/(byte) next_piece_idx#36 )
  (byte*~) render_next::$2 ← (const nomodify byte*) PLAYFIELD_SCREEN_1 + (const word) render_next::next_area_offset
  (byte*) render_next::screen_next_area#1 ← (byte*~) render_next::$2
  to:render_next::@2
render_next::@3: scope:[render_next]  from render_next
  (byte) next_piece_idx#25 ← phi( render_next/(byte) next_piece_idx#36 )
  (byte*~) render_next::$1 ← (const nomodify byte*) PLAYFIELD_SCREEN_2 + (const word) render_next::next_area_offset
  (byte*) render_next::screen_next_area#2 ← (byte*~) render_next::$1
  to:render_next::@2
render_next::@2: scope:[render_next]  from render_next::@1 render_next::@3
  (byte*) render_next::screen_next_area#11 ← phi( render_next::@1/(byte*) render_next::screen_next_area#1 render_next::@3/(byte*) render_next::screen_next_area#2 )
  (byte) next_piece_idx#12 ← phi( render_next::@1/(byte) next_piece_idx#24 render_next::@3/(byte) next_piece_idx#25 )
  (byte~) render_next::$6 ← (byte) next_piece_idx#12 * (const byte) SIZEOF_WORD
  (byte*) render_next::next_piece_gfx#0 ← ((byte*)) *((const word*) PIECES + (byte~) render_next::$6)
  (byte) render_next::next_piece_char#0 ← *((const byte*) PIECES_NEXT_CHARS + (byte) next_piece_idx#12)
  (byte) render_next::l#0 ← (byte) 0
  to:render_next::@4
render_next::@4: scope:[render_next]  from render_next::@2 render_next::@9
  (byte) render_next::l#7 ← phi( render_next::@2/(byte) render_next::l#0 render_next::@9/(byte) render_next::l#1 )
  (byte*) render_next::screen_next_area#10 ← phi( render_next::@2/(byte*) render_next::screen_next_area#11 render_next::@9/(byte*) render_next::screen_next_area#4 )
  (byte) render_next::next_piece_char#3 ← phi( render_next::@2/(byte) render_next::next_piece_char#0 render_next::@9/(byte) render_next::next_piece_char#5 )
  (byte*) render_next::next_piece_gfx#3 ← phi( render_next::@2/(byte*) render_next::next_piece_gfx#0 render_next::@9/(byte*) render_next::next_piece_gfx#5 )
  (byte) render_next::c#0 ← (byte) 0
  to:render_next::@5
render_next::@5: scope:[render_next]  from render_next::@4 render_next::@7
  (byte) render_next::l#6 ← phi( render_next::@4/(byte) render_next::l#7 render_next::@7/(byte) render_next::l#3 )
  (byte) render_next::c#5 ← phi( render_next::@4/(byte) render_next::c#0 render_next::@7/(byte) render_next::c#1 )
  (byte*) render_next::screen_next_area#9 ← phi( render_next::@4/(byte*) render_next::screen_next_area#10 render_next::@7/(byte*) render_next::screen_next_area#3 )
  (byte) render_next::next_piece_char#2 ← phi( render_next::@4/(byte) render_next::next_piece_char#3 render_next::@7/(byte) render_next::next_piece_char#4 )
  (byte*) render_next::next_piece_gfx#2 ← phi( render_next::@4/(byte*) render_next::next_piece_gfx#3 render_next::@7/(byte*) render_next::next_piece_gfx#4 )
  (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2)
  (byte*) render_next::next_piece_gfx#1 ← ++ (byte*) render_next::next_piece_gfx#2
  (bool~) render_next::$3 ← (byte) render_next::cell#0 != (number) 0
  if((bool~) render_next::$3) goto render_next::@6
  to:render_next::@8
render_next::@6: scope:[render_next]  from render_next::@5
  (byte) render_next::l#4 ← phi( render_next::@5/(byte) render_next::l#6 )
  (byte*) render_next::next_piece_gfx#6 ← phi( render_next::@5/(byte*) render_next::next_piece_gfx#1 )
  (byte) render_next::c#3 ← phi( render_next::@5/(byte) render_next::c#5 )
  (byte*) render_next::screen_next_area#5 ← phi( render_next::@5/(byte*) render_next::screen_next_area#9 )
  (byte) render_next::next_piece_char#1 ← phi( render_next::@5/(byte) render_next::next_piece_char#2 )
  *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#1
  to:render_next::@7
render_next::@8: scope:[render_next]  from render_next::@5
  (byte) render_next::next_piece_char#6 ← phi( render_next::@5/(byte) render_next::next_piece_char#2 )
  (byte) render_next::l#5 ← phi( render_next::@5/(byte) render_next::l#6 )
  (byte*) render_next::next_piece_gfx#7 ← phi( render_next::@5/(byte*) render_next::next_piece_gfx#1 )
  (byte) render_next::c#4 ← phi( render_next::@5/(byte) render_next::c#5 )
  (byte*) render_next::screen_next_area#6 ← phi( render_next::@5/(byte*) render_next::screen_next_area#9 )
  *((byte*) render_next::screen_next_area#6) ← (number) 0
  to:render_next::@7
render_next::@7: scope:[render_next]  from render_next::@6 render_next::@8
  (byte) render_next::next_piece_char#4 ← phi( render_next::@6/(byte) render_next::next_piece_char#1 render_next::@8/(byte) render_next::next_piece_char#6 )
  (byte) render_next::l#3 ← phi( render_next::@6/(byte) render_next::l#4 render_next::@8/(byte) render_next::l#5 )
  (byte*) render_next::next_piece_gfx#4 ← phi( render_next::@6/(byte*) render_next::next_piece_gfx#6 render_next::@8/(byte*) render_next::next_piece_gfx#7 )
  (byte) render_next::c#2 ← phi( render_next::@6/(byte) render_next::c#3 render_next::@8/(byte) render_next::c#4 )
  (byte*) render_next::screen_next_area#7 ← phi( render_next::@6/(byte*) render_next::screen_next_area#5 render_next::@8/(byte*) render_next::screen_next_area#6 )
  (byte*) render_next::screen_next_area#3 ← ++ (byte*) render_next::screen_next_area#7
  (byte) render_next::c#1 ← (byte) render_next::c#2 + rangenext(0,3)
  (bool~) render_next::$4 ← (byte) render_next::c#1 != rangelast(0,3)
  if((bool~) render_next::$4) goto render_next::@5
  to:render_next::@9
render_next::@9: scope:[render_next]  from render_next::@7
  (byte) render_next::next_piece_char#5 ← phi( render_next::@7/(byte) render_next::next_piece_char#4 )
  (byte*) render_next::next_piece_gfx#5 ← phi( render_next::@7/(byte*) render_next::next_piece_gfx#4 )
  (byte) render_next::l#2 ← phi( render_next::@7/(byte) render_next::l#3 )
  (byte*) render_next::screen_next_area#8 ← phi( render_next::@7/(byte*) render_next::screen_next_area#3 )
  (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#8 + (number) $24
  (byte) render_next::l#1 ← (byte) render_next::l#2 + rangenext(0,3)
  (bool~) render_next::$5 ← (byte) render_next::l#1 != rangelast(0,3)
  if((bool~) render_next::$5) goto render_next::@4
  to:render_next::@return
render_next::@return: scope:[render_next]  from render_next::@9
  return 
  to:@return
@3: scope:[]  from @2
  (byte) level_bcd#92 ← phi( @2/(byte) level_bcd#0 )
  (byte) level#99 ← phi( @2/(byte) level#0 )
  (word) lines_bcd#79 ← phi( @2/(word) lines_bcd#0 )
  (byte) keyboard_modifiers#51 ← phi( @2/(byte) keyboard_modifiers#54 )
  (byte) keyboard_events_size#68 ← phi( @2/(byte) keyboard_events_size#72 )
  (byte) game_over#83 ← phi( @2/(byte) game_over#0 )
  (byte) current_ypos#96 ← phi( @2/(byte) current_ypos#0 )
  (byte) current_xpos#117 ← phi( @2/(byte) current_xpos#0 )
  (byte*) current_piece_gfx#110 ← phi( @2/(byte*) current_piece_gfx#0 )
  (byte) current_piece_char#98 ← phi( @2/(byte) current_piece_char#0 )
  (byte) render_screen_render#61 ← phi( @2/(byte) render_screen_render#0 )
  (byte) render_screen_show#56 ← phi( @2/(byte) render_screen_show#0 )
  kickasm(location (const nomodify byte*) PLAYFIELD_SPRITES) {{ .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000))
	// Put the sprites into memory 
	.for(var sy=0;sy<10;sy++) {
	    .var sprite_gfx_y = sy*20
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21)
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y)
	            }
	        }
	    	.byte 0
	  	}
	}
 }}
  to:@4

(void()) sprites_init()
sprites_init: scope:[sprites_init]  from main::@10
  *((const nomodify byte*) SPRITES_ENABLE) ← (number) $f
  *((const nomodify byte*) SPRITES_MC) ← (number) 0
  *((const nomodify byte*) SPRITES_EXPAND_Y) ← *((const nomodify byte*) SPRITES_MC)
  *((const nomodify byte*) SPRITES_EXPAND_X) ← *((const nomodify byte*) SPRITES_EXPAND_Y)
  (byte) sprites_init::xpos#0 ← (byte)(number) $18+(number) $f*(number) 8
  (byte) sprites_init::s#0 ← (byte) 0
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  (byte) sprites_init::xpos#2 ← phi( sprites_init/(byte) sprites_init::xpos#0 sprites_init::@1/(byte) sprites_init::xpos#1 )
  (byte) sprites_init::s#2 ← phi( sprites_init/(byte) sprites_init::s#0 sprites_init::@1/(byte) sprites_init::s#1 )
  (number~) sprites_init::$0 ← (byte) sprites_init::s#2 * (number) 2
  (byte) sprites_init::s2#0 ← (number~) sprites_init::$0
  *((const nomodify byte*) SPRITES_XPOS + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2
  *((const nomodify byte*) SPRITES_COLS + (byte) sprites_init::s#2) ← (const nomodify byte) BLACK
  (number~) sprites_init::$1 ← (byte) sprites_init::xpos#2 + (number) $18
  (byte) sprites_init::xpos#1 ← (number~) sprites_init::$1
  (byte) sprites_init::s#1 ← (byte) sprites_init::s#2 + rangenext(0,3)
  (bool~) sprites_init::$2 ← (byte) sprites_init::s#1 != rangelast(0,3)
  if((bool~) sprites_init::$2) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  return 
  to:@return
@4: scope:[]  from @3
  (byte) level_bcd#85 ← phi( @3/(byte) level_bcd#92 )
  (byte) level#92 ← phi( @3/(byte) level#99 )
  (word) lines_bcd#73 ← phi( @3/(word) lines_bcd#79 )
  (byte) keyboard_modifiers#48 ← phi( @3/(byte) keyboard_modifiers#51 )
  (byte) keyboard_events_size#63 ← phi( @3/(byte) keyboard_events_size#68 )
  (byte) game_over#78 ← phi( @3/(byte) game_over#83 )
  (byte) current_ypos#93 ← phi( @3/(byte) current_ypos#96 )
  (byte) current_xpos#114 ← phi( @3/(byte) current_xpos#117 )
  (byte*) current_piece_gfx#105 ← phi( @3/(byte*) current_piece_gfx#110 )
  (byte) current_piece_char#92 ← phi( @3/(byte) current_piece_char#98 )
  (byte) render_screen_render#58 ← phi( @3/(byte) render_screen_render#61 )
  (byte) render_screen_show#53 ← phi( @3/(byte) render_screen_show#56 )
  (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST
  (volatile byte) irq_sprite_ypos ← (byte)(const nomodify byte) SPRITES_FIRST_YPOS+(number) $15
  (byte*) toSpritePtr1_sprite#0 ← (const nomodify byte*) PLAYFIELD_SPRITES
  to:toSpritePtr1
toSpritePtr1: scope:[]  from @4
  (byte) level_bcd#78 ← phi( @4/(byte) level_bcd#85 )
  (byte) level#85 ← phi( @4/(byte) level#92 )
  (word) lines_bcd#68 ← phi( @4/(word) lines_bcd#73 )
  (byte) keyboard_modifiers#45 ← phi( @4/(byte) keyboard_modifiers#48 )
  (byte) keyboard_events_size#57 ← phi( @4/(byte) keyboard_events_size#63 )
  (byte) game_over#72 ← phi( @4/(byte) game_over#78 )
  (byte) current_ypos#86 ← phi( @4/(byte) current_ypos#93 )
  (byte) current_xpos#107 ← phi( @4/(byte) current_xpos#114 )
  (byte*) current_piece_gfx#98 ← phi( @4/(byte*) current_piece_gfx#105 )
  (byte) current_piece_char#86 ← phi( @4/(byte) current_piece_char#92 )
  (byte) render_screen_render#55 ← phi( @4/(byte) render_screen_render#58 )
  (byte) render_screen_show#49 ← phi( @4/(byte) render_screen_show#53 )
  (byte*) toSpritePtr1_sprite#1 ← phi( @4/(byte*) toSpritePtr1_sprite#0 )
  (word~) toSpritePtr1_$1 ← (word)(byte*) toSpritePtr1_sprite#1
  (number~) toSpritePtr1_$0 ← (word~) toSpritePtr1_$1 / (number) $40
  (byte) toSpritePtr1_return#0 ← (byte)(number~) toSpritePtr1_$0
  to:toSpritePtr1_@return
toSpritePtr1_@return: scope:[]  from toSpritePtr1
  (byte) level_bcd#68 ← phi( toSpritePtr1/(byte) level_bcd#78 )
  (byte) level#72 ← phi( toSpritePtr1/(byte) level#85 )
  (word) lines_bcd#58 ← phi( toSpritePtr1/(word) lines_bcd#68 )
  (byte) keyboard_modifiers#39 ← phi( toSpritePtr1/(byte) keyboard_modifiers#45 )
  (byte) keyboard_events_size#48 ← phi( toSpritePtr1/(byte) keyboard_events_size#57 )
  (byte) game_over#59 ← phi( toSpritePtr1/(byte) game_over#72 )
  (byte) current_ypos#77 ← phi( toSpritePtr1/(byte) current_ypos#86 )
  (byte) current_xpos#97 ← phi( toSpritePtr1/(byte) current_xpos#107 )
  (byte*) current_piece_gfx#84 ← phi( toSpritePtr1/(byte*) current_piece_gfx#98 )
  (byte) current_piece_char#70 ← phi( toSpritePtr1/(byte) current_piece_char#86 )
  (byte) render_screen_render#50 ← phi( toSpritePtr1/(byte) render_screen_render#55 )
  (byte) render_screen_show#43 ← phi( toSpritePtr1/(byte) render_screen_show#49 )
  (byte) toSpritePtr1_return#2 ← phi( toSpritePtr1/(byte) toSpritePtr1_return#0 )
  (byte) toSpritePtr1_return#1 ← (byte) toSpritePtr1_return#2
  to:@7
@7: scope:[]  from toSpritePtr1_@return
  (byte) level_bcd#56 ← phi( toSpritePtr1_@return/(byte) level_bcd#68 )
  (byte) level#58 ← phi( toSpritePtr1_@return/(byte) level#72 )
  (word) lines_bcd#46 ← phi( toSpritePtr1_@return/(word) lines_bcd#58 )
  (byte) keyboard_modifiers#33 ← phi( toSpritePtr1_@return/(byte) keyboard_modifiers#39 )
  (byte) keyboard_events_size#40 ← phi( toSpritePtr1_@return/(byte) keyboard_events_size#48 )
  (byte) game_over#46 ← phi( toSpritePtr1_@return/(byte) game_over#59 )
  (byte) current_ypos#65 ← phi( toSpritePtr1_@return/(byte) current_ypos#77 )
  (byte) current_xpos#80 ← phi( toSpritePtr1_@return/(byte) current_xpos#97 )
  (byte*) current_piece_gfx#66 ← phi( toSpritePtr1_@return/(byte*) current_piece_gfx#84 )
  (byte) current_piece_char#53 ← phi( toSpritePtr1_@return/(byte) current_piece_char#70 )
  (byte) render_screen_render#43 ← phi( toSpritePtr1_@return/(byte) render_screen_render#50 )
  (byte) render_screen_show#35 ← phi( toSpritePtr1_@return/(byte) render_screen_show#43 )
  (byte) toSpritePtr1_return#3 ← phi( toSpritePtr1_@return/(byte) toSpritePtr1_return#1 )
  (byte~) $0 ← (byte) toSpritePtr1_return#3
  (number~) $1 ← (byte~) $0 + (number) 3
  (volatile byte) irq_sprite_ptr ← (number~) $1
  (volatile byte) irq_cnt ← (byte) 0
  to:@5

(void()) sprites_irq_init()
sprites_irq_init: scope:[sprites_irq_init]  from main::@11
  asm { sei  }
  *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  asm { ldaCIA1_INTERRUPT  }
  *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK
  *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR
  *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (number) $7f
  *((const nomodify byte*) RASTER) ← (const nomodify byte) IRQ_RASTER_FIRST
  *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER
  *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
  asm { cli  }
  to:sprites_irq_init::@return
sprites_irq_init::@return: scope:[sprites_irq_init]  from sprites_irq_init
  return 
  to:@return

interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
sprites_irq: scope:[sprites_irq]  from
  asm { cld  }
  (byte) sprites_irq::ypos#0 ← (volatile byte) irq_sprite_ypos
  *((const nomodify byte*) SPRITES_YPOS + (number) 0) ← (byte) sprites_irq::ypos#0
  *((const nomodify byte*) SPRITES_YPOS + (number) 2) ← (byte) sprites_irq::ypos#0
  *((const nomodify byte*) SPRITES_YPOS + (number) 4) ← (byte) sprites_irq::ypos#0
  *((const nomodify byte*) SPRITES_YPOS + (number) 6) ← (byte) sprites_irq::ypos#0
  (number~) sprites_irq::$0 ← (volatile byte) irq_raster_next + (number) 1
  (volatile byte) sprites_irq::raster_sprite_gfx_modify ← (number~) sprites_irq::$0
  to:sprites_irq::@8
sprites_irq::@8: scope:[sprites_irq]  from sprites_irq sprites_irq::@8
  (bool~) sprites_irq::$4 ← *((const nomodify byte*) RASTER) < (volatile byte) sprites_irq::raster_sprite_gfx_modify
  if((bool~) sprites_irq::$4) goto sprites_irq::@8
  to:sprites_irq::@9
sprites_irq::@9: scope:[sprites_irq]  from sprites_irq::@8
  (byte) sprites_irq::ptr#0 ← (volatile byte) irq_sprite_ptr
  (bool~) sprites_irq::$1 ← (volatile byte) render_screen_showing == (number) 0
  if((bool~) sprites_irq::$1) goto sprites_irq::@1
  to:sprites_irq::@10
sprites_irq::@1: scope:[sprites_irq]  from sprites_irq::@9
  (byte) sprites_irq::ptr#5 ← phi( sprites_irq::@9/(byte) sprites_irq::ptr#0 )
  *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1 + (number) 0) ← (byte) sprites_irq::ptr#5
  (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#5
  *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1 + (number) 1) ← (byte) sprites_irq::ptr#1
  *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1 + (number) 2) ← (byte) sprites_irq::ptr#1
  (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1
  *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1 + (number) 3) ← (byte) sprites_irq::ptr#2
  to:sprites_irq::@2
sprites_irq::@10: scope:[sprites_irq]  from sprites_irq::@9
  (byte) sprites_irq::ptr#6 ← phi( sprites_irq::@9/(byte) sprites_irq::ptr#0 )
  *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2 + (number) 0) ← (byte) sprites_irq::ptr#6
  (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#6
  *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2 + (number) 1) ← (byte) sprites_irq::ptr#3
  *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2 + (number) 2) ← (byte) sprites_irq::ptr#3
  (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3
  *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2 + (number) 3) ← (byte) sprites_irq::ptr#4
  to:sprites_irq::@2
sprites_irq::@2: scope:[sprites_irq]  from sprites_irq::@1 sprites_irq::@10
  (volatile byte) irq_cnt ← ++ (volatile byte) irq_cnt
  (bool~) sprites_irq::$2 ← (volatile byte) irq_cnt == (number) 9
  if((bool~) sprites_irq::$2) goto sprites_irq::@3
  to:sprites_irq::@6
sprites_irq::@3: scope:[sprites_irq]  from sprites_irq::@2
  (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (number) $15
  (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS
  (byte*) sprites_irq::toSpritePtr1_sprite#0 ← (const nomodify byte*) PLAYFIELD_SPRITES
  to:sprites_irq::toSpritePtr1
sprites_irq::toSpritePtr1: scope:[sprites_irq]  from sprites_irq::@3
  (byte*) sprites_irq::toSpritePtr1_sprite#1 ← phi( sprites_irq::@3/(byte*) sprites_irq::toSpritePtr1_sprite#0 )
  (word~) sprites_irq::toSpritePtr1_$1 ← (word)(byte*) sprites_irq::toSpritePtr1_sprite#1
  (number~) sprites_irq::toSpritePtr1_$0 ← (word~) sprites_irq::toSpritePtr1_$1 / (number) $40
  (byte) sprites_irq::toSpritePtr1_return#0 ← (byte)(number~) sprites_irq::toSpritePtr1_$0
  to:sprites_irq::toSpritePtr1_@return
sprites_irq::toSpritePtr1_@return: scope:[sprites_irq]  from sprites_irq::toSpritePtr1
  (byte) sprites_irq::toSpritePtr1_return#2 ← phi( sprites_irq::toSpritePtr1/(byte) sprites_irq::toSpritePtr1_return#0 )
  (byte) sprites_irq::toSpritePtr1_return#1 ← (byte) sprites_irq::toSpritePtr1_return#2
  to:sprites_irq::@11
sprites_irq::@11: scope:[sprites_irq]  from sprites_irq::toSpritePtr1_@return
  (byte) sprites_irq::toSpritePtr1_return#3 ← phi( sprites_irq::toSpritePtr1_@return/(byte) sprites_irq::toSpritePtr1_return#1 )
  (byte~) sprites_irq::$5 ← (byte) sprites_irq::toSpritePtr1_return#3
  (volatile byte) irq_sprite_ptr ← (byte~) sprites_irq::$5
  to:sprites_irq::@5
sprites_irq::@6: scope:[sprites_irq]  from sprites_irq::@2
  (bool~) sprites_irq::$3 ← (volatile byte) irq_cnt == (number) $a
  if((bool~) sprites_irq::$3) goto sprites_irq::@4
  to:sprites_irq::@7
sprites_irq::@4: scope:[sprites_irq]  from sprites_irq::@6
  (volatile byte) irq_cnt ← (number) 0
  (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST
  (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (number) $15
  (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (number) 3
  to:sprites_irq::@5
sprites_irq::@7: scope:[sprites_irq]  from sprites_irq::@6
  (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (number) $14
  (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (number) $15
  (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (number) 3
  to:sprites_irq::@5
sprites_irq::@5: scope:[sprites_irq]  from sprites_irq::@11 sprites_irq::@4 sprites_irq::@7
  *((const nomodify byte*) RASTER) ← (volatile byte) irq_raster_next
  *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  to:sprites_irq::@return
sprites_irq::@return: scope:[sprites_irq]  from sprites_irq::@5
  return 
  to:@return
@5: scope:[]  from @7
  (byte) level_bcd#54 ← phi( @7/(byte) level_bcd#56 )
  (byte) level#55 ← phi( @7/(byte) level#58 )
  (word) lines_bcd#44 ← phi( @7/(word) lines_bcd#46 )
  (byte) keyboard_modifiers#32 ← phi( @7/(byte) keyboard_modifiers#33 )
  (byte) keyboard_events_size#36 ← phi( @7/(byte) keyboard_events_size#40 )
  (byte) game_over#45 ← phi( @7/(byte) game_over#46 )
  (byte) current_ypos#64 ← phi( @7/(byte) current_ypos#65 )
  (byte) current_xpos#75 ← phi( @7/(byte) current_xpos#80 )
  (byte*) current_piece_gfx#63 ← phi( @7/(byte*) current_piece_gfx#66 )
  (byte) current_piece_char#51 ← phi( @7/(byte) current_piece_char#53 )
  (byte) render_screen_render#40 ← phi( @7/(byte) render_screen_render#43 )
  (byte) render_screen_show#32 ← phi( @7/(byte) render_screen_show#35 )
  (byte) next_piece_idx#0 ← (byte) 0
  (byte*) current_piece#0 ← (byte*)(number) 0
  (byte) current_orientation#0 ← (byte) 0
  (byte) current_movedown_slow#0 ← (byte) $30
  (byte) current_movedown_counter#0 ← (byte) 0
  to:@6

(void()) play_init()
play_init: scope:[play_init]  from main::@12
  (byte) level#44 ← phi( main::@12/(byte) level#59 )
  (byte) play_init::idx#0 ← (byte) 0
  (byte*) play_init::pli#0 ← (const byte*) playfield
  (byte) play_init::j#0 ← (byte) 0
  to:play_init::@1
play_init::@1: scope:[play_init]  from play_init play_init::@1
  (byte) level#28 ← phi( play_init/(byte) level#44 play_init::@1/(byte) level#28 )
  (byte) play_init::idx#2 ← phi( play_init/(byte) play_init::idx#0 play_init::@1/(byte) play_init::idx#1 )
  (byte*) play_init::pli#2 ← phi( play_init/(byte*) play_init::pli#0 play_init::@1/(byte*) play_init::pli#1 )
  (byte) play_init::j#2 ← phi( play_init/(byte) play_init::j#0 play_init::@1/(byte) play_init::j#1 )
  (byte~) play_init::$2 ← (byte) play_init::j#2 * (const byte) SIZEOF_POINTER
  *((const byte**) playfield_lines + (byte~) play_init::$2) ← (byte*) play_init::pli#2
  *((const byte*) playfield_lines_idx + (byte) play_init::j#2) ← (byte) play_init::idx#2
  (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const nomodify byte) PLAYFIELD_COLS
  (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const nomodify byte) PLAYFIELD_COLS
  (byte) play_init::j#1 ← (byte) play_init::j#2 + rangenext(0,PLAYFIELD_LINES-1)
  (bool~) play_init::$0 ← (byte) play_init::j#1 != rangelast(0,PLAYFIELD_LINES-1)
  if((bool~) play_init::$0) goto play_init::@1
  to:play_init::@2
play_init::@2: scope:[play_init]  from play_init::@1
  (byte) level#13 ← phi( play_init::@1/(byte) level#28 )
  *((const byte*) playfield_lines_idx + (const nomodify byte) PLAYFIELD_LINES) ← (const nomodify byte) PLAYFIELD_COLS*(const nomodify byte) PLAYFIELD_LINES
  (byte) current_movedown_slow#1 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS + (byte) level#13)
  (byte) play_init::b#0 ← (byte) 0
  to:play_init::@3
play_init::@3: scope:[play_init]  from play_init::@2 play_init::@3
  (byte) current_movedown_slow#29 ← phi( play_init::@2/(byte) current_movedown_slow#1 play_init::@3/(byte) current_movedown_slow#29 )
  (byte) play_init::b#2 ← phi( play_init::@2/(byte) play_init::b#0 play_init::@3/(byte) play_init::b#1 )
  (byte~) play_init::$3 ← (byte) play_init::b#2 * (const byte) SIZEOF_DWORD
  *((const dword*) score_add_bcd + (byte~) play_init::$3) ← *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_init::$3)
  (byte) play_init::b#1 ← (byte) play_init::b#2 + rangenext(0,4)
  (bool~) play_init::$1 ← (byte) play_init::b#1 != rangelast(0,4)
  if((bool~) play_init::$1) goto play_init::@3
  to:play_init::@return
play_init::@return: scope:[play_init]  from play_init::@3
  (byte) current_movedown_slow#16 ← phi( play_init::@3/(byte) current_movedown_slow#29 )
  (byte) current_movedown_slow#2 ← (byte) current_movedown_slow#16
  return 
  to:@return

(byte()) play_movement((byte) play_movement::key_event)
play_movement: scope:[play_movement]  from main::@4
  (byte) next_piece_idx#26 ← phi( main::@4/(byte) next_piece_idx#33 )
  (byte) game_over#23 ← phi( main::@4/(byte) game_over#32 )
  (byte) current_xpos#37 ← phi( main::@4/(byte) current_xpos#56 )
  (byte*) current_piece_gfx#31 ← phi( main::@4/(byte*) current_piece_gfx#43 )
  (byte) current_orientation#32 ← phi( main::@4/(byte) current_orientation#47 )
  (byte) current_piece_char#25 ← phi( main::@4/(byte) current_piece_char#34 )
  (byte*) current_piece#24 ← phi( main::@4/(byte*) current_piece#37 )
  (byte) level_bcd#27 ← phi( main::@4/(byte) level_bcd#39 )
  (byte) current_movedown_slow#30 ← phi( main::@4/(byte) current_movedown_slow#44 )
  (byte) level#29 ← phi( main::@4/(byte) level#39 )
  (word) lines_bcd#22 ← phi( main::@4/(word) lines_bcd#30 )
  (byte) current_ypos#32 ← phi( main::@4/(byte) current_ypos#47 )
  (byte) current_movedown_counter#18 ← phi( main::@4/(byte) current_movedown_counter#24 )
  (byte) play_movement::key_event#1 ← phi( main::@4/(byte) play_movement::key_event#0 )
  (byte) play_movement::render#0 ← (byte) 0
  (byte) play_move_down::key_event#0 ← (byte) play_movement::key_event#1
  call play_move_down 
  (byte) play_move_down::return#0 ← (byte) play_move_down::return#3
  to:play_movement::@3
play_movement::@3: scope:[play_movement]  from play_movement
  (byte) play_movement::key_event#4 ← phi( play_movement/(byte) play_movement::key_event#1 )
  (byte) play_movement::render#4 ← phi( play_movement/(byte) play_movement::render#0 )
  (byte) next_piece_idx#13 ← phi( play_movement/(byte) next_piece_idx#4 )
  (byte) game_over#12 ← phi( play_movement/(byte) game_over#4 )
  (byte) current_xpos#17 ← phi( play_movement/(byte) current_xpos#5 )
  (byte*) current_piece_gfx#16 ← phi( play_movement/(byte*) current_piece_gfx#5 )
  (byte) current_orientation#15 ← phi( play_movement/(byte) current_orientation#5 )
  (byte) current_piece_char#13 ← phi( play_movement/(byte) current_piece_char#4 )
  (byte*) current_piece#12 ← phi( play_movement/(byte*) current_piece#4 )
  (byte) level_bcd#14 ← phi( play_movement/(byte) level_bcd#4 )
  (byte) current_movedown_slow#17 ← phi( play_movement/(byte) current_movedown_slow#6 )
  (byte) level#14 ← phi( play_movement/(byte) level#4 )
  (word) lines_bcd#12 ← phi( play_movement/(word) lines_bcd#4 )
  (byte) current_ypos#14 ← phi( play_movement/(byte) current_ypos#5 )
  (byte) current_movedown_counter#9 ← phi( play_movement/(byte) current_movedown_counter#5 )
  (byte) play_move_down::return#4 ← phi( play_movement/(byte) play_move_down::return#0 )
  (byte~) play_movement::$0 ← (byte) play_move_down::return#4
  (byte) current_movedown_counter#1 ← (byte) current_movedown_counter#9
  (byte) current_ypos#1 ← (byte) current_ypos#14
  (word) lines_bcd#1 ← (word) lines_bcd#12
  (byte) level#1 ← (byte) level#14
  (byte) current_movedown_slow#3 ← (byte) current_movedown_slow#17
  (byte) level_bcd#1 ← (byte) level_bcd#14
  (byte*) current_piece#1 ← (byte*) current_piece#12
  (byte) current_piece_char#1 ← (byte) current_piece_char#13
  (byte) current_orientation#1 ← (byte) current_orientation#15
  (byte*) current_piece_gfx#1 ← (byte*) current_piece_gfx#16
  (byte) current_xpos#1 ← (byte) current_xpos#17
  (byte) game_over#1 ← (byte) game_over#12
  (byte) next_piece_idx#1 ← (byte) next_piece_idx#13
  (byte) play_movement::render#1 ← (byte) play_movement::render#4 + (byte~) play_movement::$0
  (bool~) play_movement::$1 ← (byte) game_over#1 != (number) 0
  (bool~) play_movement::$2 ← ! (bool~) play_movement::$1
  if((bool~) play_movement::$2) goto play_movement::@1
  to:play_movement::@2
play_movement::@1: scope:[play_movement]  from play_movement::@3
  (byte) next_piece_idx#48 ← phi( play_movement::@3/(byte) next_piece_idx#1 )
  (byte) game_over#47 ← phi( play_movement::@3/(byte) game_over#1 )
  (byte) current_piece_char#54 ← phi( play_movement::@3/(byte) current_piece_char#1 )
  (byte*) current_piece#54 ← phi( play_movement::@3/(byte*) current_piece#1 )
  (byte) level_bcd#57 ← phi( play_movement::@3/(byte) level_bcd#1 )
  (byte) current_movedown_slow#59 ← phi( play_movement::@3/(byte) current_movedown_slow#3 )
  (byte) level#60 ← phi( play_movement::@3/(byte) level#1 )
  (word) lines_bcd#47 ← phi( play_movement::@3/(word) lines_bcd#1 )
  (byte) current_movedown_counter#34 ← phi( play_movement::@3/(byte) current_movedown_counter#1 )
  (byte) current_ypos#54 ← phi( play_movement::@3/(byte) current_ypos#1 )
  (byte*) current_piece_gfx#48 ← phi( play_movement::@3/(byte*) current_piece_gfx#1 )
  (byte) current_orientation#50 ← phi( play_movement::@3/(byte) current_orientation#1 )
  (byte) play_movement::render#8 ← phi( play_movement::@3/(byte) play_movement::render#1 )
  (byte) current_xpos#38 ← phi( play_movement::@3/(byte) current_xpos#1 )
  (byte) play_movement::key_event#2 ← phi( play_movement::@3/(byte) play_movement::key_event#4 )
  (byte) play_move_leftright::key_event#0 ← (byte) play_movement::key_event#2
  call play_move_leftright 
  (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2
  to:play_movement::@4
play_movement::@4: scope:[play_movement]  from play_movement::@1
  (byte) next_piece_idx#37 ← phi( play_movement::@1/(byte) next_piece_idx#48 )
  (byte) game_over#35 ← phi( play_movement::@1/(byte) game_over#47 )
  (byte) current_piece_char#39 ← phi( play_movement::@1/(byte) current_piece_char#54 )
  (byte*) current_piece#40 ← phi( play_movement::@1/(byte*) current_piece#54 )
  (byte) level_bcd#43 ← phi( play_movement::@1/(byte) level_bcd#57 )
  (byte) current_movedown_slow#47 ← phi( play_movement::@1/(byte) current_movedown_slow#59 )
  (byte) level#45 ← phi( play_movement::@1/(byte) level#60 )
  (word) lines_bcd#34 ← phi( play_movement::@1/(word) lines_bcd#47 )
  (byte) current_ypos#50 ← phi( play_movement::@1/(byte) current_ypos#54 )
  (byte) current_movedown_counter#27 ← phi( play_movement::@1/(byte) current_movedown_counter#34 )
  (byte*) current_piece_gfx#32 ← phi( play_movement::@1/(byte*) current_piece_gfx#48 )
  (byte) current_orientation#33 ← phi( play_movement::@1/(byte) current_orientation#50 )
  (byte) play_movement::key_event#3 ← phi( play_movement::@1/(byte) play_movement::key_event#2 )
  (byte) play_movement::render#5 ← phi( play_movement::@1/(byte) play_movement::render#8 )
  (byte) current_xpos#18 ← phi( play_movement::@1/(byte) current_xpos#7 )
  (byte) play_move_leftright::return#5 ← phi( play_movement::@1/(byte) play_move_leftright::return#0 )
  (byte~) play_movement::$3 ← (byte) play_move_leftright::return#5
  (byte) current_xpos#2 ← (byte) current_xpos#18
  (byte) play_movement::render#2 ← (byte) play_movement::render#5 + (byte~) play_movement::$3
  (byte) play_move_rotate::key_event#0 ← (byte) play_movement::key_event#3
  call play_move_rotate 
  (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2
  to:play_movement::@5
play_movement::@5: scope:[play_movement]  from play_movement::@4
  (byte) next_piece_idx#28 ← phi( play_movement::@4/(byte) next_piece_idx#37 )
  (byte) game_over#25 ← phi( play_movement::@4/(byte) game_over#35 )
  (byte) current_xpos#40 ← phi( play_movement::@4/(byte) current_xpos#2 )
  (byte) current_piece_char#27 ← phi( play_movement::@4/(byte) current_piece_char#39 )
  (byte*) current_piece#26 ← phi( play_movement::@4/(byte*) current_piece#40 )
  (byte) level_bcd#29 ← phi( play_movement::@4/(byte) level_bcd#43 )
  (byte) current_movedown_slow#32 ← phi( play_movement::@4/(byte) current_movedown_slow#47 )
  (byte) level#31 ← phi( play_movement::@4/(byte) level#45 )
  (word) lines_bcd#24 ← phi( play_movement::@4/(word) lines_bcd#34 )
  (byte) current_ypos#34 ← phi( play_movement::@4/(byte) current_ypos#50 )
  (byte) current_movedown_counter#20 ← phi( play_movement::@4/(byte) current_movedown_counter#27 )
  (byte) play_movement::render#6 ← phi( play_movement::@4/(byte) play_movement::render#2 )
  (byte*) current_piece_gfx#17 ← phi( play_movement::@4/(byte*) current_piece_gfx#6 )
  (byte) current_orientation#16 ← phi( play_movement::@4/(byte) current_orientation#6 )
  (byte) play_move_rotate::return#5 ← phi( play_movement::@4/(byte) play_move_rotate::return#0 )
  (byte~) play_movement::$4 ← (byte) play_move_rotate::return#5
  (byte) current_orientation#2 ← (byte) current_orientation#16
  (byte*) current_piece_gfx#2 ← (byte*) current_piece_gfx#17
  (byte) play_movement::render#3 ← (byte) play_movement::render#6 + (byte~) play_movement::$4
  (byte) play_movement::return#0 ← (byte) play_movement::render#3
  to:play_movement::@return
play_movement::@2: scope:[play_movement]  from play_movement::@3
  (byte) next_piece_idx#27 ← phi( play_movement::@3/(byte) next_piece_idx#1 )
  (byte) game_over#24 ← phi( play_movement::@3/(byte) game_over#1 )
  (byte) current_xpos#39 ← phi( play_movement::@3/(byte) current_xpos#1 )
  (byte*) current_piece_gfx#33 ← phi( play_movement::@3/(byte*) current_piece_gfx#1 )
  (byte) current_orientation#34 ← phi( play_movement::@3/(byte) current_orientation#1 )
  (byte) current_piece_char#26 ← phi( play_movement::@3/(byte) current_piece_char#1 )
  (byte*) current_piece#25 ← phi( play_movement::@3/(byte*) current_piece#1 )
  (byte) level_bcd#28 ← phi( play_movement::@3/(byte) level_bcd#1 )
  (byte) current_movedown_slow#31 ← phi( play_movement::@3/(byte) current_movedown_slow#3 )
  (byte) level#30 ← phi( play_movement::@3/(byte) level#1 )
  (word) lines_bcd#23 ← phi( play_movement::@3/(word) lines_bcd#1 )
  (byte) current_ypos#33 ← phi( play_movement::@3/(byte) current_ypos#1 )
  (byte) current_movedown_counter#19 ← phi( play_movement::@3/(byte) current_movedown_counter#1 )
  (byte) play_movement::render#7 ← phi( play_movement::@3/(byte) play_movement::render#1 )
  (byte) play_movement::return#1 ← (byte) play_movement::render#7
  to:play_movement::@return
play_movement::@return: scope:[play_movement]  from play_movement::@2 play_movement::@5
  (byte) next_piece_idx#14 ← phi( play_movement::@2/(byte) next_piece_idx#27 play_movement::@5/(byte) next_piece_idx#28 )
  (byte) game_over#13 ← phi( play_movement::@2/(byte) game_over#24 play_movement::@5/(byte) game_over#25 )
  (byte) current_xpos#19 ← phi( play_movement::@2/(byte) current_xpos#39 play_movement::@5/(byte) current_xpos#40 )
  (byte*) current_piece_gfx#18 ← phi( play_movement::@2/(byte*) current_piece_gfx#33 play_movement::@5/(byte*) current_piece_gfx#2 )
  (byte) current_orientation#17 ← phi( play_movement::@2/(byte) current_orientation#34 play_movement::@5/(byte) current_orientation#2 )
  (byte) current_piece_char#14 ← phi( play_movement::@2/(byte) current_piece_char#26 play_movement::@5/(byte) current_piece_char#27 )
  (byte*) current_piece#13 ← phi( play_movement::@2/(byte*) current_piece#25 play_movement::@5/(byte*) current_piece#26 )
  (byte) level_bcd#15 ← phi( play_movement::@2/(byte) level_bcd#28 play_movement::@5/(byte) level_bcd#29 )
  (byte) current_movedown_slow#18 ← phi( play_movement::@2/(byte) current_movedown_slow#31 play_movement::@5/(byte) current_movedown_slow#32 )
  (byte) level#15 ← phi( play_movement::@2/(byte) level#30 play_movement::@5/(byte) level#31 )
  (word) lines_bcd#13 ← phi( play_movement::@2/(word) lines_bcd#23 play_movement::@5/(word) lines_bcd#24 )
  (byte) current_ypos#15 ← phi( play_movement::@2/(byte) current_ypos#33 play_movement::@5/(byte) current_ypos#34 )
  (byte) current_movedown_counter#10 ← phi( play_movement::@2/(byte) current_movedown_counter#19 play_movement::@5/(byte) current_movedown_counter#20 )
  (byte) play_movement::return#4 ← phi( play_movement::@2/(byte) play_movement::return#1 play_movement::@5/(byte) play_movement::return#0 )
  (byte) play_movement::return#2 ← (byte) play_movement::return#4
  (byte) current_movedown_counter#2 ← (byte) current_movedown_counter#10
  (byte) current_ypos#2 ← (byte) current_ypos#15
  (word) lines_bcd#2 ← (word) lines_bcd#13
  (byte) level#2 ← (byte) level#15
  (byte) current_movedown_slow#4 ← (byte) current_movedown_slow#18
  (byte) level_bcd#2 ← (byte) level_bcd#15
  (byte*) current_piece#2 ← (byte*) current_piece#13
  (byte) current_piece_char#2 ← (byte) current_piece_char#14
  (byte) current_orientation#3 ← (byte) current_orientation#17
  (byte*) current_piece_gfx#3 ← (byte*) current_piece_gfx#18
  (byte) current_xpos#3 ← (byte) current_xpos#19
  (byte) game_over#2 ← (byte) game_over#13
  (byte) next_piece_idx#2 ← (byte) next_piece_idx#14
  return 
  to:@return

(byte()) play_move_down((byte) play_move_down::key_event)
play_move_down: scope:[play_move_down]  from play_movement
  (byte) next_piece_idx#72 ← phi( play_movement/(byte) next_piece_idx#26 )
  (byte) game_over#79 ← phi( play_movement/(byte) game_over#23 )
  (byte*) current_piece_gfx#106 ← phi( play_movement/(byte*) current_piece_gfx#31 )
  (byte) current_piece_char#93 ← phi( play_movement/(byte) current_piece_char#25 )
  (byte*) current_piece#85 ← phi( play_movement/(byte*) current_piece#24 )
  (byte) level_bcd#86 ← phi( play_movement/(byte) level_bcd#27 )
  (byte) level#93 ← phi( play_movement/(byte) level#29 )
  (word) lines_bcd#74 ← phi( play_movement/(word) lines_bcd#22 )
  (byte) current_orientation#85 ← phi( play_movement/(byte) current_orientation#32 )
  (byte) current_xpos#108 ← phi( play_movement/(byte) current_xpos#37 )
  (byte) current_ypos#87 ← phi( play_movement/(byte) current_ypos#32 )
  (byte) current_movedown_slow#60 ← phi( play_movement/(byte) current_movedown_slow#30 )
  (byte) play_move_down::key_event#1 ← phi( play_movement/(byte) play_move_down::key_event#0 )
  (byte) current_movedown_counter#11 ← phi( play_movement/(byte) current_movedown_counter#18 )
  (byte) current_movedown_counter#3 ← ++ (byte) current_movedown_counter#11
  (byte) play_move_down::movedown#0 ← (byte) 0
  (bool~) play_move_down::$0 ← (byte) play_move_down::key_event#1 == (const nomodify byte) KEY_SPACE
  (bool~) play_move_down::$1 ← ! (bool~) play_move_down::$0
  if((bool~) play_move_down::$1) goto play_move_down::@1
  to:play_move_down::@5
play_move_down::@1: scope:[play_move_down]  from play_move_down play_move_down::@5
  (byte) next_piece_idx#68 ← phi( play_move_down/(byte) next_piece_idx#72 play_move_down::@5/(byte) next_piece_idx#73 )
  (byte) game_over#73 ← phi( play_move_down/(byte) game_over#79 play_move_down::@5/(byte) game_over#80 )
  (byte*) current_piece_gfx#99 ← phi( play_move_down/(byte*) current_piece_gfx#106 play_move_down::@5/(byte*) current_piece_gfx#107 )
  (byte) current_piece_char#87 ← phi( play_move_down/(byte) current_piece_char#93 play_move_down::@5/(byte) current_piece_char#94 )
  (byte*) current_piece#80 ← phi( play_move_down/(byte*) current_piece#85 play_move_down::@5/(byte*) current_piece#86 )
  (byte) level_bcd#79 ← phi( play_move_down/(byte) level_bcd#86 play_move_down::@5/(byte) level_bcd#87 )
  (byte) level#86 ← phi( play_move_down/(byte) level#93 play_move_down::@5/(byte) level#94 )
  (word) lines_bcd#69 ← phi( play_move_down/(word) lines_bcd#74 play_move_down::@5/(word) lines_bcd#75 )
  (byte) current_orientation#75 ← phi( play_move_down/(byte) current_orientation#85 play_move_down::@5/(byte) current_orientation#86 )
  (byte) current_xpos#98 ← phi( play_move_down/(byte) current_xpos#108 play_move_down::@5/(byte) current_xpos#109 )
  (byte) current_ypos#78 ← phi( play_move_down/(byte) current_ypos#87 play_move_down::@5/(byte) current_ypos#88 )
  (byte) play_move_down::movedown#11 ← phi( play_move_down/(byte) play_move_down::movedown#0 play_move_down::@5/(byte) play_move_down::movedown#1 )
  (byte) current_movedown_slow#48 ← phi( play_move_down/(byte) current_movedown_slow#60 play_move_down::@5/(byte) current_movedown_slow#61 )
  (byte) current_movedown_counter#28 ← phi( play_move_down/(byte) current_movedown_counter#3 play_move_down::@5/(byte) current_movedown_counter#35 )
  (byte) keyboard_event_pressed::keycode#4 ← (const nomodify byte) KEY_SPACE
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#6 ← (byte) keyboard_event_pressed::return#5
  to:play_move_down::@13
play_move_down::@13: scope:[play_move_down]  from play_move_down::@1
  (byte) next_piece_idx#57 ← phi( play_move_down::@1/(byte) next_piece_idx#68 )
  (byte) game_over#60 ← phi( play_move_down::@1/(byte) game_over#73 )
  (byte*) current_piece_gfx#85 ← phi( play_move_down::@1/(byte*) current_piece_gfx#99 )
  (byte) current_piece_char#71 ← phi( play_move_down::@1/(byte) current_piece_char#87 )
  (byte*) current_piece#68 ← phi( play_move_down::@1/(byte*) current_piece#80 )
  (byte) level_bcd#69 ← phi( play_move_down::@1/(byte) level_bcd#79 )
  (byte) level#73 ← phi( play_move_down::@1/(byte) level#86 )
  (word) lines_bcd#59 ← phi( play_move_down::@1/(word) lines_bcd#69 )
  (byte) current_orientation#62 ← phi( play_move_down::@1/(byte) current_orientation#75 )
  (byte) current_xpos#81 ← phi( play_move_down::@1/(byte) current_xpos#98 )
  (byte) current_ypos#66 ← phi( play_move_down::@1/(byte) current_ypos#78 )
  (byte) play_move_down::movedown#10 ← phi( play_move_down::@1/(byte) play_move_down::movedown#11 )
  (byte) current_movedown_slow#33 ← phi( play_move_down::@1/(byte) current_movedown_slow#48 )
  (byte) current_movedown_counter#21 ← phi( play_move_down::@1/(byte) current_movedown_counter#28 )
  (byte) keyboard_event_pressed::return#12 ← phi( play_move_down::@1/(byte) keyboard_event_pressed::return#6 )
  (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
  (bool~) play_move_down::$3 ← (byte~) play_move_down::$2 != (number) 0
  (bool~) play_move_down::$4 ← ! (bool~) play_move_down::$3
  if((bool~) play_move_down::$4) goto play_move_down::@2
  to:play_move_down::@6
play_move_down::@5: scope:[play_move_down]  from play_move_down
  (byte) next_piece_idx#73 ← phi( play_move_down/(byte) next_piece_idx#72 )
  (byte) game_over#80 ← phi( play_move_down/(byte) game_over#79 )
  (byte*) current_piece_gfx#107 ← phi( play_move_down/(byte*) current_piece_gfx#106 )
  (byte) current_piece_char#94 ← phi( play_move_down/(byte) current_piece_char#93 )
  (byte*) current_piece#86 ← phi( play_move_down/(byte*) current_piece#85 )
  (byte) level_bcd#87 ← phi( play_move_down/(byte) level_bcd#86 )
  (byte) level#94 ← phi( play_move_down/(byte) level#93 )
  (word) lines_bcd#75 ← phi( play_move_down/(word) lines_bcd#74 )
  (byte) current_orientation#86 ← phi( play_move_down/(byte) current_orientation#85 )
  (byte) current_xpos#109 ← phi( play_move_down/(byte) current_xpos#108 )
  (byte) current_ypos#88 ← phi( play_move_down/(byte) current_ypos#87 )
  (byte) current_movedown_slow#61 ← phi( play_move_down/(byte) current_movedown_slow#60 )
  (byte) current_movedown_counter#35 ← phi( play_move_down/(byte) current_movedown_counter#3 )
  (byte) play_move_down::movedown#4 ← phi( play_move_down/(byte) play_move_down::movedown#0 )
  (byte) play_move_down::movedown#1 ← ++ (byte) play_move_down::movedown#4
  to:play_move_down::@1
play_move_down::@2: scope:[play_move_down]  from play_move_down::@13 play_move_down::@6 play_move_down::@7
  (byte) next_piece_idx#49 ← phi( play_move_down::@13/(byte) next_piece_idx#57 play_move_down::@6/(byte) next_piece_idx#58 play_move_down::@7/(byte) next_piece_idx#59 )
  (byte) game_over#48 ← phi( play_move_down::@13/(byte) game_over#60 play_move_down::@6/(byte) game_over#61 play_move_down::@7/(byte) game_over#62 )
  (byte*) current_piece_gfx#67 ← phi( play_move_down::@13/(byte*) current_piece_gfx#85 play_move_down::@6/(byte*) current_piece_gfx#86 play_move_down::@7/(byte*) current_piece_gfx#87 )
  (byte) current_piece_char#55 ← phi( play_move_down::@13/(byte) current_piece_char#71 play_move_down::@6/(byte) current_piece_char#72 play_move_down::@7/(byte) current_piece_char#73 )
  (byte*) current_piece#55 ← phi( play_move_down::@13/(byte*) current_piece#68 play_move_down::@6/(byte*) current_piece#69 play_move_down::@7/(byte*) current_piece#70 )
  (byte) level_bcd#58 ← phi( play_move_down::@13/(byte) level_bcd#69 play_move_down::@6/(byte) level_bcd#70 play_move_down::@7/(byte) level_bcd#71 )
  (byte) level#61 ← phi( play_move_down::@13/(byte) level#73 play_move_down::@6/(byte) level#74 play_move_down::@7/(byte) level#75 )
  (word) lines_bcd#48 ← phi( play_move_down::@13/(word) lines_bcd#59 play_move_down::@6/(word) lines_bcd#60 play_move_down::@7/(word) lines_bcd#61 )
  (byte) current_orientation#51 ← phi( play_move_down::@13/(byte) current_orientation#62 play_move_down::@6/(byte) current_orientation#63 play_move_down::@7/(byte) current_orientation#64 )
  (byte) current_xpos#61 ← phi( play_move_down::@13/(byte) current_xpos#81 play_move_down::@6/(byte) current_xpos#82 play_move_down::@7/(byte) current_xpos#83 )
  (byte) current_ypos#51 ← phi( play_move_down::@13/(byte) current_ypos#66 play_move_down::@6/(byte) current_ypos#67 play_move_down::@7/(byte) current_ypos#68 )
  (byte) play_move_down::movedown#9 ← phi( play_move_down::@13/(byte) play_move_down::movedown#10 play_move_down::@6/(byte) play_move_down::movedown#8 play_move_down::@7/(byte) play_move_down::movedown#2 )
  (byte) current_movedown_slow#19 ← phi( play_move_down::@13/(byte) current_movedown_slow#33 play_move_down::@6/(byte) current_movedown_slow#34 play_move_down::@7/(byte) current_movedown_slow#35 )
  (byte) current_movedown_counter#12 ← phi( play_move_down::@13/(byte) current_movedown_counter#21 play_move_down::@6/(byte) current_movedown_counter#13 play_move_down::@7/(byte) current_movedown_counter#22 )
  (bool~) play_move_down::$5 ← (byte) current_movedown_counter#12 >= (byte) current_movedown_slow#19
  (bool~) play_move_down::$6 ← ! (bool~) play_move_down::$5
  if((bool~) play_move_down::$6) goto play_move_down::@3
  to:play_move_down::@8
play_move_down::@6: scope:[play_move_down]  from play_move_down::@13
  (byte) next_piece_idx#58 ← phi( play_move_down::@13/(byte) next_piece_idx#57 )
  (byte) game_over#61 ← phi( play_move_down::@13/(byte) game_over#60 )
  (byte*) current_piece_gfx#86 ← phi( play_move_down::@13/(byte*) current_piece_gfx#85 )
  (byte) current_piece_char#72 ← phi( play_move_down::@13/(byte) current_piece_char#71 )
  (byte*) current_piece#69 ← phi( play_move_down::@13/(byte*) current_piece#68 )
  (byte) level_bcd#70 ← phi( play_move_down::@13/(byte) level_bcd#69 )
  (byte) level#74 ← phi( play_move_down::@13/(byte) level#73 )
  (word) lines_bcd#60 ← phi( play_move_down::@13/(word) lines_bcd#59 )
  (byte) current_orientation#63 ← phi( play_move_down::@13/(byte) current_orientation#62 )
  (byte) current_xpos#82 ← phi( play_move_down::@13/(byte) current_xpos#81 )
  (byte) current_ypos#67 ← phi( play_move_down::@13/(byte) current_ypos#66 )
  (byte) play_move_down::movedown#8 ← phi( play_move_down::@13/(byte) play_move_down::movedown#10 )
  (byte) current_movedown_slow#34 ← phi( play_move_down::@13/(byte) current_movedown_slow#33 )
  (byte) current_movedown_counter#13 ← phi( play_move_down::@13/(byte) current_movedown_counter#21 )
  (bool~) play_move_down::$9 ← (byte) current_movedown_counter#13 >= (const nomodify byte) current_movedown_fast
  (bool~) play_move_down::$10 ← ! (bool~) play_move_down::$9
  if((bool~) play_move_down::$10) goto play_move_down::@2
  to:play_move_down::@7
play_move_down::@7: scope:[play_move_down]  from play_move_down::@6
  (byte) next_piece_idx#59 ← phi( play_move_down::@6/(byte) next_piece_idx#58 )
  (byte) game_over#62 ← phi( play_move_down::@6/(byte) game_over#61 )
  (byte*) current_piece_gfx#87 ← phi( play_move_down::@6/(byte*) current_piece_gfx#86 )
  (byte) current_piece_char#73 ← phi( play_move_down::@6/(byte) current_piece_char#72 )
  (byte*) current_piece#70 ← phi( play_move_down::@6/(byte*) current_piece#69 )
  (byte) level_bcd#71 ← phi( play_move_down::@6/(byte) level_bcd#70 )
  (byte) level#75 ← phi( play_move_down::@6/(byte) level#74 )
  (word) lines_bcd#61 ← phi( play_move_down::@6/(word) lines_bcd#60 )
  (byte) current_orientation#64 ← phi( play_move_down::@6/(byte) current_orientation#63 )
  (byte) current_xpos#83 ← phi( play_move_down::@6/(byte) current_xpos#82 )
  (byte) current_ypos#68 ← phi( play_move_down::@6/(byte) current_ypos#67 )
  (byte) current_movedown_slow#35 ← phi( play_move_down::@6/(byte) current_movedown_slow#34 )
  (byte) current_movedown_counter#22 ← phi( play_move_down::@6/(byte) current_movedown_counter#13 )
  (byte) play_move_down::movedown#5 ← phi( play_move_down::@6/(byte) play_move_down::movedown#8 )
  (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#5
  to:play_move_down::@2
play_move_down::@3: scope:[play_move_down]  from play_move_down::@2 play_move_down::@8
  (byte) next_piece_idx#38 ← phi( play_move_down::@2/(byte) next_piece_idx#49 play_move_down::@8/(byte) next_piece_idx#50 )
  (byte) game_over#36 ← phi( play_move_down::@2/(byte) game_over#48 play_move_down::@8/(byte) game_over#49 )
  (byte*) current_piece_gfx#49 ← phi( play_move_down::@2/(byte*) current_piece_gfx#67 play_move_down::@8/(byte*) current_piece_gfx#68 )
  (byte) current_piece_char#40 ← phi( play_move_down::@2/(byte) current_piece_char#55 play_move_down::@8/(byte) current_piece_char#56 )
  (byte*) current_piece#41 ← phi( play_move_down::@2/(byte*) current_piece#55 play_move_down::@8/(byte*) current_piece#56 )
  (byte) level_bcd#44 ← phi( play_move_down::@2/(byte) level_bcd#58 play_move_down::@8/(byte) level_bcd#59 )
  (byte) current_movedown_slow#49 ← phi( play_move_down::@2/(byte) current_movedown_slow#19 play_move_down::@8/(byte) current_movedown_slow#62 )
  (byte) level#46 ← phi( play_move_down::@2/(byte) level#61 play_move_down::@8/(byte) level#62 )
  (word) lines_bcd#35 ← phi( play_move_down::@2/(word) lines_bcd#48 play_move_down::@8/(word) lines_bcd#49 )
  (byte) current_movedown_counter#29 ← phi( play_move_down::@2/(byte) current_movedown_counter#12 play_move_down::@8/(byte) current_movedown_counter#36 )
  (byte) current_orientation#35 ← phi( play_move_down::@2/(byte) current_orientation#51 play_move_down::@8/(byte) current_orientation#52 )
  (byte) current_xpos#41 ← phi( play_move_down::@2/(byte) current_xpos#61 play_move_down::@8/(byte) current_xpos#62 )
  (byte) current_ypos#35 ← phi( play_move_down::@2/(byte) current_ypos#51 play_move_down::@8/(byte) current_ypos#52 )
  (byte) play_move_down::movedown#6 ← phi( play_move_down::@2/(byte) play_move_down::movedown#9 play_move_down::@8/(byte) play_move_down::movedown#3 )
  (bool~) play_move_down::$7 ← (byte) play_move_down::movedown#6 != (number) 0
  (bool~) play_move_down::$8 ← ! (bool~) play_move_down::$7
  if((bool~) play_move_down::$8) goto play_move_down::@4
  to:play_move_down::@9
play_move_down::@8: scope:[play_move_down]  from play_move_down::@2
  (byte) next_piece_idx#50 ← phi( play_move_down::@2/(byte) next_piece_idx#49 )
  (byte) game_over#49 ← phi( play_move_down::@2/(byte) game_over#48 )
  (byte*) current_piece_gfx#68 ← phi( play_move_down::@2/(byte*) current_piece_gfx#67 )
  (byte) current_piece_char#56 ← phi( play_move_down::@2/(byte) current_piece_char#55 )
  (byte*) current_piece#56 ← phi( play_move_down::@2/(byte*) current_piece#55 )
  (byte) level_bcd#59 ← phi( play_move_down::@2/(byte) level_bcd#58 )
  (byte) current_movedown_slow#62 ← phi( play_move_down::@2/(byte) current_movedown_slow#19 )
  (byte) level#62 ← phi( play_move_down::@2/(byte) level#61 )
  (word) lines_bcd#49 ← phi( play_move_down::@2/(word) lines_bcd#48 )
  (byte) current_movedown_counter#36 ← phi( play_move_down::@2/(byte) current_movedown_counter#12 )
  (byte) current_orientation#52 ← phi( play_move_down::@2/(byte) current_orientation#51 )
  (byte) current_xpos#62 ← phi( play_move_down::@2/(byte) current_xpos#61 )
  (byte) current_ypos#52 ← phi( play_move_down::@2/(byte) current_ypos#51 )
  (byte) play_move_down::movedown#7 ← phi( play_move_down::@2/(byte) play_move_down::movedown#9 )
  (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7
  to:play_move_down::@3
play_move_down::@4: scope:[play_move_down]  from play_move_down::@3
  (byte) next_piece_idx#31 ← phi( play_move_down::@3/(byte) next_piece_idx#38 )
  (byte) game_over#28 ← phi( play_move_down::@3/(byte) game_over#36 )
  (byte) current_xpos#44 ← phi( play_move_down::@3/(byte) current_xpos#41 )
  (byte*) current_piece_gfx#36 ← phi( play_move_down::@3/(byte*) current_piece_gfx#49 )
  (byte) current_orientation#38 ← phi( play_move_down::@3/(byte) current_orientation#35 )
  (byte) current_piece_char#30 ← phi( play_move_down::@3/(byte) current_piece_char#40 )
  (byte*) current_piece#29 ← phi( play_move_down::@3/(byte*) current_piece#41 )
  (byte) level_bcd#32 ← phi( play_move_down::@3/(byte) level_bcd#44 )
  (byte) current_movedown_slow#38 ← phi( play_move_down::@3/(byte) current_movedown_slow#49 )
  (byte) level#34 ← phi( play_move_down::@3/(byte) level#46 )
  (word) lines_bcd#27 ← phi( play_move_down::@3/(word) lines_bcd#35 )
  (byte) current_ypos#39 ← phi( play_move_down::@3/(byte) current_ypos#35 )
  (byte) current_movedown_counter#23 ← phi( play_move_down::@3/(byte) current_movedown_counter#29 )
  (byte) play_move_down::return#1 ← (number) 0
  to:play_move_down::@return
play_move_down::@9: scope:[play_move_down]  from play_move_down::@3
  (byte) next_piece_idx#60 ← phi( play_move_down::@3/(byte) next_piece_idx#38 )
  (byte) game_over#63 ← phi( play_move_down::@3/(byte) game_over#36 )
  (byte*) current_piece_gfx#88 ← phi( play_move_down::@3/(byte*) current_piece_gfx#49 )
  (byte) current_piece_char#74 ← phi( play_move_down::@3/(byte) current_piece_char#40 )
  (byte) level_bcd#72 ← phi( play_move_down::@3/(byte) level_bcd#44 )
  (byte) current_movedown_slow#71 ← phi( play_move_down::@3/(byte) current_movedown_slow#49 )
  (byte) level#76 ← phi( play_move_down::@3/(byte) level#46 )
  (word) lines_bcd#62 ← phi( play_move_down::@3/(word) lines_bcd#35 )
  (byte*) current_piece#31 ← phi( play_move_down::@3/(byte*) current_piece#41 )
  (byte) current_orientation#18 ← phi( play_move_down::@3/(byte) current_orientation#35 )
  (byte) current_xpos#20 ← phi( play_move_down::@3/(byte) current_xpos#41 )
  (byte) current_ypos#16 ← phi( play_move_down::@3/(byte) current_ypos#35 )
  (number~) play_move_down::$11 ← (byte) current_ypos#16 + (number) 1
  (byte) play_collision::xpos#0 ← (byte) current_xpos#20
  (byte) play_collision::ypos#0 ← (number~) play_move_down::$11
  (byte) play_collision::orientation#0 ← (byte) current_orientation#18
  call play_collision 
  (byte) play_collision::return#0 ← (byte) play_collision::return#5
  to:play_move_down::@14
play_move_down::@14: scope:[play_move_down]  from play_move_down::@9
  (byte) next_piece_idx#51 ← phi( play_move_down::@9/(byte) next_piece_idx#60 )
  (byte) game_over#50 ← phi( play_move_down::@9/(byte) game_over#63 )
  (byte) current_xpos#84 ← phi( play_move_down::@9/(byte) current_xpos#20 )
  (byte*) current_piece_gfx#69 ← phi( play_move_down::@9/(byte*) current_piece_gfx#88 )
  (byte) current_orientation#65 ← phi( play_move_down::@9/(byte) current_orientation#18 )
  (byte) current_piece_char#57 ← phi( play_move_down::@9/(byte) current_piece_char#74 )
  (byte*) current_piece#57 ← phi( play_move_down::@9/(byte*) current_piece#31 )
  (byte) level_bcd#60 ← phi( play_move_down::@9/(byte) level_bcd#72 )
  (byte) current_movedown_slow#63 ← phi( play_move_down::@9/(byte) current_movedown_slow#71 )
  (byte) level#63 ← phi( play_move_down::@9/(byte) level#76 )
  (word) lines_bcd#50 ← phi( play_move_down::@9/(word) lines_bcd#62 )
  (byte) current_ypos#36 ← phi( play_move_down::@9/(byte) current_ypos#16 )
  (byte) play_collision::return#11 ← phi( play_move_down::@9/(byte) play_collision::return#0 )
  (byte~) play_move_down::$12 ← (byte) play_collision::return#11
  (bool~) play_move_down::$13 ← (byte~) play_move_down::$12 == (const nomodify byte) COLLISION_NONE
  if((bool~) play_move_down::$13) goto play_move_down::@11
  to:play_move_down::@10
play_move_down::@11: scope:[play_move_down]  from play_move_down::@14
  (byte) next_piece_idx#40 ← phi( play_move_down::@14/(byte) next_piece_idx#51 )
  (byte) game_over#38 ← phi( play_move_down::@14/(byte) game_over#50 )
  (byte) current_xpos#64 ← phi( play_move_down::@14/(byte) current_xpos#84 )
  (byte*) current_piece_gfx#51 ← phi( play_move_down::@14/(byte*) current_piece_gfx#69 )
  (byte) current_orientation#54 ← phi( play_move_down::@14/(byte) current_orientation#65 )
  (byte) current_piece_char#42 ← phi( play_move_down::@14/(byte) current_piece_char#57 )
  (byte*) current_piece#43 ← phi( play_move_down::@14/(byte*) current_piece#57 )
  (byte) level_bcd#46 ← phi( play_move_down::@14/(byte) level_bcd#60 )
  (byte) current_movedown_slow#51 ← phi( play_move_down::@14/(byte) current_movedown_slow#63 )
  (byte) level#48 ← phi( play_move_down::@14/(byte) level#63 )
  (word) lines_bcd#37 ← phi( play_move_down::@14/(word) lines_bcd#50 )
  (byte) current_ypos#17 ← phi( play_move_down::@14/(byte) current_ypos#36 )
  (byte) current_ypos#3 ← ++ (byte) current_ypos#17
  to:play_move_down::@12
play_move_down::@10: scope:[play_move_down]  from play_move_down::@14
  (byte) next_piece_idx#61 ← phi( play_move_down::@14/(byte) next_piece_idx#51 )
  (byte) game_over#64 ← phi( play_move_down::@14/(byte) game_over#50 )
  (byte) current_orientation#76 ← phi( play_move_down::@14/(byte) current_orientation#65 )
  (byte) current_piece_char#75 ← phi( play_move_down::@14/(byte) current_piece_char#57 )
  (byte*) current_piece#71 ← phi( play_move_down::@14/(byte*) current_piece#57 )
  (byte*) current_piece_gfx#73 ← phi( play_move_down::@14/(byte*) current_piece_gfx#69 )
  (byte) level_bcd#61 ← phi( play_move_down::@14/(byte) level_bcd#60 )
  (byte) current_movedown_slow#64 ← phi( play_move_down::@14/(byte) current_movedown_slow#63 )
  (byte) level#64 ← phi( play_move_down::@14/(byte) level#63 )
  (word) lines_bcd#51 ← phi( play_move_down::@14/(word) lines_bcd#50 )
  (byte) current_xpos#67 ← phi( play_move_down::@14/(byte) current_xpos#84 )
  (byte) current_ypos#44 ← phi( play_move_down::@14/(byte) current_ypos#36 )
  call play_lock_current 
  to:play_move_down::@15
play_move_down::@15: scope:[play_move_down]  from play_move_down::@10
  (byte) next_piece_idx#52 ← phi( play_move_down::@10/(byte) next_piece_idx#61 )
  (byte) game_over#51 ← phi( play_move_down::@10/(byte) game_over#64 )
  (byte) current_ypos#69 ← phi( play_move_down::@10/(byte) current_ypos#44 )
  (byte) current_xpos#85 ← phi( play_move_down::@10/(byte) current_xpos#67 )
  (byte*) current_piece_gfx#70 ← phi( play_move_down::@10/(byte*) current_piece_gfx#73 )
  (byte) current_orientation#66 ← phi( play_move_down::@10/(byte) current_orientation#76 )
  (byte) current_piece_char#58 ← phi( play_move_down::@10/(byte) current_piece_char#75 )
  (byte*) current_piece#58 ← phi( play_move_down::@10/(byte*) current_piece#71 )
  (byte) level_bcd#45 ← phi( play_move_down::@10/(byte) level_bcd#61 )
  (byte) current_movedown_slow#50 ← phi( play_move_down::@10/(byte) current_movedown_slow#64 )
  (byte) level#47 ← phi( play_move_down::@10/(byte) level#64 )
  (word) lines_bcd#36 ← phi( play_move_down::@10/(word) lines_bcd#51 )
  call play_remove_lines 
  (byte) play_remove_lines::return#0 ← (byte) play_remove_lines::return#2
  to:play_move_down::@16
play_move_down::@16: scope:[play_move_down]  from play_move_down::@15
  (byte) next_piece_idx#39 ← phi( play_move_down::@15/(byte) next_piece_idx#52 )
  (byte) game_over#37 ← phi( play_move_down::@15/(byte) game_over#51 )
  (byte) current_ypos#53 ← phi( play_move_down::@15/(byte) current_ypos#69 )
  (byte) current_xpos#63 ← phi( play_move_down::@15/(byte) current_xpos#85 )
  (byte*) current_piece_gfx#50 ← phi( play_move_down::@15/(byte*) current_piece_gfx#70 )
  (byte) current_orientation#53 ← phi( play_move_down::@15/(byte) current_orientation#66 )
  (byte) current_piece_char#41 ← phi( play_move_down::@15/(byte) current_piece_char#58 )
  (byte*) current_piece#42 ← phi( play_move_down::@15/(byte*) current_piece#58 )
  (byte) level_bcd#30 ← phi( play_move_down::@15/(byte) level_bcd#45 )
  (byte) current_movedown_slow#36 ← phi( play_move_down::@15/(byte) current_movedown_slow#50 )
  (byte) level#32 ← phi( play_move_down::@15/(byte) level#47 )
  (word) lines_bcd#25 ← phi( play_move_down::@15/(word) lines_bcd#36 )
  (byte) play_remove_lines::return#3 ← phi( play_move_down::@15/(byte) play_remove_lines::return#0 )
  (byte~) play_move_down::$15 ← (byte) play_remove_lines::return#3
  (byte) play_move_down::removed#0 ← (byte~) play_move_down::$15
  (byte) play_update_score::removed#0 ← (byte) play_move_down::removed#0
  call play_update_score 
  to:play_move_down::@17
play_move_down::@17: scope:[play_move_down]  from play_move_down::@16
  (byte) next_piece_idx#29 ← phi( play_move_down::@16/(byte) next_piece_idx#39 )
  (byte) game_over#26 ← phi( play_move_down::@16/(byte) game_over#37 )
  (byte) current_ypos#37 ← phi( play_move_down::@16/(byte) current_ypos#53 )
  (byte) current_xpos#42 ← phi( play_move_down::@16/(byte) current_xpos#63 )
  (byte*) current_piece_gfx#34 ← phi( play_move_down::@16/(byte*) current_piece_gfx#50 )
  (byte) current_orientation#36 ← phi( play_move_down::@16/(byte) current_orientation#53 )
  (byte) current_piece_char#28 ← phi( play_move_down::@16/(byte) current_piece_char#41 )
  (byte*) current_piece#27 ← phi( play_move_down::@16/(byte*) current_piece#42 )
  (byte) level_bcd#16 ← phi( play_move_down::@16/(byte) level_bcd#6 )
  (byte) current_movedown_slow#20 ← phi( play_move_down::@16/(byte) current_movedown_slow#8 )
  (byte) level#16 ← phi( play_move_down::@16/(byte) level#6 )
  (word) lines_bcd#14 ← phi( play_move_down::@16/(word) lines_bcd#6 )
  (word) lines_bcd#3 ← (word) lines_bcd#14
  (byte) level#3 ← (byte) level#16
  (byte) current_movedown_slow#5 ← (byte) current_movedown_slow#20
  (byte) level_bcd#3 ← (byte) level_bcd#16
  call play_spawn_current 
  to:play_move_down::@18
play_move_down::@18: scope:[play_move_down]  from play_move_down::@17
  (byte) level_bcd#47 ← phi( play_move_down::@17/(byte) level_bcd#3 )
  (byte) current_movedown_slow#52 ← phi( play_move_down::@17/(byte) current_movedown_slow#5 )
  (byte) level#49 ← phi( play_move_down::@17/(byte) level#3 )
  (word) lines_bcd#38 ← phi( play_move_down::@17/(word) lines_bcd#3 )
  (byte) next_piece_idx#15 ← phi( play_move_down::@17/(byte) next_piece_idx#6 )
  (byte) game_over#14 ← phi( play_move_down::@17/(byte) game_over#6 )
  (byte) current_ypos#18 ← phi( play_move_down::@17/(byte) current_ypos#7 )
  (byte) current_xpos#21 ← phi( play_move_down::@17/(byte) current_xpos#10 )
  (byte*) current_piece_gfx#19 ← phi( play_move_down::@17/(byte*) current_piece_gfx#9 )
  (byte) current_orientation#19 ← phi( play_move_down::@17/(byte) current_orientation#9 )
  (byte) current_piece_char#15 ← phi( play_move_down::@17/(byte) current_piece_char#6 )
  (byte*) current_piece#14 ← phi( play_move_down::@17/(byte*) current_piece#6 )
  (byte*) current_piece#3 ← (byte*) current_piece#14
  (byte) current_piece_char#3 ← (byte) current_piece_char#15
  (byte) current_orientation#4 ← (byte) current_orientation#19
  (byte*) current_piece_gfx#4 ← (byte*) current_piece_gfx#19
  (byte) current_xpos#4 ← (byte) current_xpos#21
  (byte) current_ypos#4 ← (byte) current_ypos#18
  (byte) game_over#3 ← (byte) game_over#14
  (byte) next_piece_idx#3 ← (byte) next_piece_idx#15
  to:play_move_down::@12
play_move_down::@12: scope:[play_move_down]  from play_move_down::@11 play_move_down::@18
  (byte) next_piece_idx#30 ← phi( play_move_down::@11/(byte) next_piece_idx#40 play_move_down::@18/(byte) next_piece_idx#3 )
  (byte) game_over#27 ← phi( play_move_down::@11/(byte) game_over#38 play_move_down::@18/(byte) game_over#3 )
  (byte) current_xpos#43 ← phi( play_move_down::@11/(byte) current_xpos#64 play_move_down::@18/(byte) current_xpos#4 )
  (byte*) current_piece_gfx#35 ← phi( play_move_down::@11/(byte*) current_piece_gfx#51 play_move_down::@18/(byte*) current_piece_gfx#4 )
  (byte) current_orientation#37 ← phi( play_move_down::@11/(byte) current_orientation#54 play_move_down::@18/(byte) current_orientation#4 )
  (byte) current_piece_char#29 ← phi( play_move_down::@11/(byte) current_piece_char#42 play_move_down::@18/(byte) current_piece_char#3 )
  (byte*) current_piece#28 ← phi( play_move_down::@11/(byte*) current_piece#43 play_move_down::@18/(byte*) current_piece#3 )
  (byte) level_bcd#31 ← phi( play_move_down::@11/(byte) level_bcd#46 play_move_down::@18/(byte) level_bcd#47 )
  (byte) current_movedown_slow#37 ← phi( play_move_down::@11/(byte) current_movedown_slow#51 play_move_down::@18/(byte) current_movedown_slow#52 )
  (byte) level#33 ← phi( play_move_down::@11/(byte) level#48 play_move_down::@18/(byte) level#49 )
  (word) lines_bcd#26 ← phi( play_move_down::@11/(word) lines_bcd#37 play_move_down::@18/(word) lines_bcd#38 )
  (byte) current_ypos#38 ← phi( play_move_down::@11/(byte) current_ypos#3 play_move_down::@18/(byte) current_ypos#4 )
  (byte) current_movedown_counter#4 ← (number) 0
  (byte) play_move_down::return#2 ← (number) 1
  to:play_move_down::@return
play_move_down::@return: scope:[play_move_down]  from play_move_down::@12 play_move_down::@4
  (byte) next_piece_idx#16 ← phi( play_move_down::@12/(byte) next_piece_idx#30 play_move_down::@4/(byte) next_piece_idx#31 )
  (byte) game_over#15 ← phi( play_move_down::@12/(byte) game_over#27 play_move_down::@4/(byte) game_over#28 )
  (byte) current_xpos#22 ← phi( play_move_down::@12/(byte) current_xpos#43 play_move_down::@4/(byte) current_xpos#44 )
  (byte*) current_piece_gfx#20 ← phi( play_move_down::@12/(byte*) current_piece_gfx#35 play_move_down::@4/(byte*) current_piece_gfx#36 )
  (byte) current_orientation#20 ← phi( play_move_down::@12/(byte) current_orientation#37 play_move_down::@4/(byte) current_orientation#38 )
  (byte) current_piece_char#16 ← phi( play_move_down::@12/(byte) current_piece_char#29 play_move_down::@4/(byte) current_piece_char#30 )
  (byte*) current_piece#15 ← phi( play_move_down::@12/(byte*) current_piece#28 play_move_down::@4/(byte*) current_piece#29 )
  (byte) level_bcd#17 ← phi( play_move_down::@12/(byte) level_bcd#31 play_move_down::@4/(byte) level_bcd#32 )
  (byte) current_movedown_slow#21 ← phi( play_move_down::@12/(byte) current_movedown_slow#37 play_move_down::@4/(byte) current_movedown_slow#38 )
  (byte) level#17 ← phi( play_move_down::@12/(byte) level#33 play_move_down::@4/(byte) level#34 )
  (word) lines_bcd#15 ← phi( play_move_down::@12/(word) lines_bcd#26 play_move_down::@4/(word) lines_bcd#27 )
  (byte) current_ypos#19 ← phi( play_move_down::@12/(byte) current_ypos#38 play_move_down::@4/(byte) current_ypos#39 )
  (byte) current_movedown_counter#14 ← phi( play_move_down::@12/(byte) current_movedown_counter#4 play_move_down::@4/(byte) current_movedown_counter#23 )
  (byte) play_move_down::return#5 ← phi( play_move_down::@12/(byte) play_move_down::return#2 play_move_down::@4/(byte) play_move_down::return#1 )
  (byte) play_move_down::return#3 ← (byte) play_move_down::return#5
  (byte) current_movedown_counter#5 ← (byte) current_movedown_counter#14
  (byte) current_ypos#5 ← (byte) current_ypos#19
  (word) lines_bcd#4 ← (word) lines_bcd#15
  (byte) level#4 ← (byte) level#17
  (byte) current_movedown_slow#6 ← (byte) current_movedown_slow#21
  (byte) level_bcd#4 ← (byte) level_bcd#17
  (byte*) current_piece#4 ← (byte*) current_piece#15
  (byte) current_piece_char#4 ← (byte) current_piece_char#16
  (byte) current_orientation#5 ← (byte) current_orientation#20
  (byte*) current_piece_gfx#5 ← (byte*) current_piece_gfx#20
  (byte) current_xpos#5 ← (byte) current_xpos#22
  (byte) game_over#4 ← (byte) game_over#15
  (byte) next_piece_idx#4 ← (byte) next_piece_idx#16
  return 
  to:@return

(byte()) play_move_leftright((byte) play_move_leftright::key_event)
play_move_leftright: scope:[play_move_leftright]  from play_movement::@1
  (byte*) current_piece#44 ← phi( play_movement::@1/(byte*) current_piece#54 )
  (byte) current_orientation#39 ← phi( play_movement::@1/(byte) current_orientation#50 )
  (byte) current_ypos#40 ← phi( play_movement::@1/(byte) current_ypos#54 )
  (byte) current_xpos#45 ← phi( play_movement::@1/(byte) current_xpos#38 )
  (byte) play_move_leftright::key_event#1 ← phi( play_movement::@1/(byte) play_move_leftright::key_event#0 )
  (bool~) play_move_leftright::$0 ← (byte) play_move_leftright::key_event#1 == (const nomodify byte) KEY_COMMA
  if((bool~) play_move_leftright::$0) goto play_move_leftright::@1
  to:play_move_leftright::@3
play_move_leftright::@1: scope:[play_move_leftright]  from play_move_leftright
  (byte*) current_piece#32 ← phi( play_move_leftright/(byte*) current_piece#44 )
  (byte) current_orientation#21 ← phi( play_move_leftright/(byte) current_orientation#39 )
  (byte) current_ypos#20 ← phi( play_move_leftright/(byte) current_ypos#40 )
  (byte) current_xpos#23 ← phi( play_move_leftright/(byte) current_xpos#45 )
  (number~) play_move_leftright::$7 ← (byte) current_xpos#23 - (number) 1
  (byte) play_collision::xpos#1 ← (number~) play_move_leftright::$7
  (byte) play_collision::ypos#1 ← (byte) current_ypos#20
  (byte) play_collision::orientation#1 ← (byte) current_orientation#21
  call play_collision 
  (byte) play_collision::return#1 ← (byte) play_collision::return#5
  to:play_move_leftright::@7
play_move_leftright::@7: scope:[play_move_leftright]  from play_move_leftright::@1
  (byte) current_xpos#49 ← phi( play_move_leftright::@1/(byte) current_xpos#23 )
  (byte) play_collision::return#12 ← phi( play_move_leftright::@1/(byte) play_collision::return#1 )
  (byte~) play_move_leftright::$8 ← (byte) play_collision::return#12
  (bool~) play_move_leftright::$9 ← (byte~) play_move_leftright::$8 == (const nomodify byte) COLLISION_NONE
  (bool~) play_move_leftright::$10 ← ! (bool~) play_move_leftright::$9
  if((bool~) play_move_leftright::$10) goto play_move_leftright::@2
  to:play_move_leftright::@6
play_move_leftright::@3: scope:[play_move_leftright]  from play_move_leftright
  (byte*) current_piece#45 ← phi( play_move_leftright/(byte*) current_piece#44 )
  (byte) current_orientation#40 ← phi( play_move_leftright/(byte) current_orientation#39 )
  (byte) current_ypos#41 ← phi( play_move_leftright/(byte) current_ypos#40 )
  (byte) current_xpos#46 ← phi( play_move_leftright/(byte) current_xpos#45 )
  (byte) play_move_leftright::key_event#2 ← phi( play_move_leftright/(byte) play_move_leftright::key_event#1 )
  (bool~) play_move_leftright::$1 ← (byte) play_move_leftright::key_event#2 == (const nomodify byte) KEY_DOT
  (bool~) play_move_leftright::$2 ← ! (bool~) play_move_leftright::$1
  if((bool~) play_move_leftright::$2) goto play_move_leftright::@2
  to:play_move_leftright::@4
play_move_leftright::@4: scope:[play_move_leftright]  from play_move_leftright::@3
  (byte*) current_piece#33 ← phi( play_move_leftright::@3/(byte*) current_piece#45 )
  (byte) current_orientation#22 ← phi( play_move_leftright::@3/(byte) current_orientation#40 )
  (byte) current_ypos#21 ← phi( play_move_leftright::@3/(byte) current_ypos#41 )
  (byte) current_xpos#24 ← phi( play_move_leftright::@3/(byte) current_xpos#46 )
  (number~) play_move_leftright::$3 ← (byte) current_xpos#24 + (number) 1
  (byte) play_collision::xpos#2 ← (number~) play_move_leftright::$3
  (byte) play_collision::ypos#2 ← (byte) current_ypos#21
  (byte) play_collision::orientation#2 ← (byte) current_orientation#22
  call play_collision 
  (byte) play_collision::return#2 ← (byte) play_collision::return#5
  to:play_move_leftright::@8
play_move_leftright::@8: scope:[play_move_leftright]  from play_move_leftright::@4
  (byte) current_xpos#47 ← phi( play_move_leftright::@4/(byte) current_xpos#24 )
  (byte) play_collision::return#13 ← phi( play_move_leftright::@4/(byte) play_collision::return#2 )
  (byte~) play_move_leftright::$4 ← (byte) play_collision::return#13
  (bool~) play_move_leftright::$5 ← (byte~) play_move_leftright::$4 == (const nomodify byte) COLLISION_NONE
  (bool~) play_move_leftright::$6 ← ! (bool~) play_move_leftright::$5
  if((bool~) play_move_leftright::$6) goto play_move_leftright::@2
  to:play_move_leftright::@5
play_move_leftright::@5: scope:[play_move_leftright]  from play_move_leftright::@8
  (byte) current_xpos#25 ← phi( play_move_leftright::@8/(byte) current_xpos#47 )
  (byte) current_xpos#6 ← ++ (byte) current_xpos#25
  (byte) play_move_leftright::return#1 ← (number) 1
  to:play_move_leftright::@return
play_move_leftright::@return: scope:[play_move_leftright]  from play_move_leftright::@2 play_move_leftright::@5 play_move_leftright::@6
  (byte) current_xpos#26 ← phi( play_move_leftright::@2/(byte) current_xpos#48 play_move_leftright::@5/(byte) current_xpos#6 play_move_leftright::@6/(byte) current_xpos#8 )
  (byte) play_move_leftright::return#6 ← phi( play_move_leftright::@2/(byte) play_move_leftright::return#3 play_move_leftright::@5/(byte) play_move_leftright::return#1 play_move_leftright::@6/(byte) play_move_leftright::return#4 )
  (byte) play_move_leftright::return#2 ← (byte) play_move_leftright::return#6
  (byte) current_xpos#7 ← (byte) current_xpos#26
  return 
  to:@return
play_move_leftright::@2: scope:[play_move_leftright]  from play_move_leftright::@3 play_move_leftright::@7 play_move_leftright::@8
  (byte) current_xpos#48 ← phi( play_move_leftright::@3/(byte) current_xpos#46 play_move_leftright::@7/(byte) current_xpos#49 play_move_leftright::@8/(byte) current_xpos#47 )
  (byte) play_move_leftright::return#3 ← (number) 0
  to:play_move_leftright::@return
play_move_leftright::@6: scope:[play_move_leftright]  from play_move_leftright::@7
  (byte) current_xpos#27 ← phi( play_move_leftright::@7/(byte) current_xpos#49 )
  (byte) current_xpos#8 ← -- (byte) current_xpos#27
  (byte) play_move_leftright::return#4 ← (number) 1
  to:play_move_leftright::@return

(byte()) play_move_rotate((byte) play_move_rotate::key_event)
play_move_rotate: scope:[play_move_rotate]  from play_movement::@4
  (byte*) current_piece_gfx#71 ← phi( play_movement::@4/(byte*) current_piece_gfx#32 )
  (byte*) current_piece#59 ← phi( play_movement::@4/(byte*) current_piece#40 )
  (byte) current_ypos#55 ← phi( play_movement::@4/(byte) current_ypos#50 )
  (byte) current_xpos#65 ← phi( play_movement::@4/(byte) current_xpos#2 )
  (byte) current_orientation#41 ← phi( play_movement::@4/(byte) current_orientation#33 )
  (byte) play_move_rotate::key_event#1 ← phi( play_movement::@4/(byte) play_move_rotate::key_event#0 )
  (byte) play_move_rotate::orientation#0 ← (byte) $80
  (bool~) play_move_rotate::$0 ← (byte) play_move_rotate::key_event#1 == (const nomodify byte) KEY_Z
  if((bool~) play_move_rotate::$0) goto play_move_rotate::@1
  to:play_move_rotate::@5
play_move_rotate::@1: scope:[play_move_rotate]  from play_move_rotate
  (byte*) current_piece_gfx#89 ← phi( play_move_rotate/(byte*) current_piece_gfx#71 )
  (byte*) current_piece#46 ← phi( play_move_rotate/(byte*) current_piece#59 )
  (byte) current_ypos#42 ← phi( play_move_rotate/(byte) current_ypos#55 )
  (byte) current_xpos#50 ← phi( play_move_rotate/(byte) current_xpos#65 )
  (byte) current_orientation#23 ← phi( play_move_rotate/(byte) current_orientation#41 )
  (number~) play_move_rotate::$7 ← (byte) current_orientation#23 - (number) $10
  (number~) play_move_rotate::$8 ← (number~) play_move_rotate::$7 & (number) $3f
  (byte) play_move_rotate::orientation#1 ← (number~) play_move_rotate::$8
  to:play_move_rotate::@3
play_move_rotate::@5: scope:[play_move_rotate]  from play_move_rotate
  (byte*) current_piece#60 ← phi( play_move_rotate/(byte*) current_piece#59 )
  (byte*) current_piece_gfx#52 ← phi( play_move_rotate/(byte*) current_piece_gfx#71 )
  (byte) current_ypos#56 ← phi( play_move_rotate/(byte) current_ypos#55 )
  (byte) current_xpos#66 ← phi( play_move_rotate/(byte) current_xpos#65 )
  (byte) current_orientation#42 ← phi( play_move_rotate/(byte) current_orientation#41 )
  (byte) play_move_rotate::key_event#2 ← phi( play_move_rotate/(byte) play_move_rotate::key_event#1 )
  (bool~) play_move_rotate::$1 ← (byte) play_move_rotate::key_event#2 == (const nomodify byte) KEY_X
  if((bool~) play_move_rotate::$1) goto play_move_rotate::@2
  to:play_move_rotate::@6
play_move_rotate::@2: scope:[play_move_rotate]  from play_move_rotate::@5
  (byte*) current_piece_gfx#90 ← phi( play_move_rotate::@5/(byte*) current_piece_gfx#52 )
  (byte*) current_piece#47 ← phi( play_move_rotate::@5/(byte*) current_piece#60 )
  (byte) current_ypos#43 ← phi( play_move_rotate::@5/(byte) current_ypos#56 )
  (byte) current_xpos#51 ← phi( play_move_rotate::@5/(byte) current_xpos#66 )
  (byte) current_orientation#24 ← phi( play_move_rotate::@5/(byte) current_orientation#42 )
  (number~) play_move_rotate::$5 ← (byte) current_orientation#24 + (number) $10
  (number~) play_move_rotate::$6 ← (number~) play_move_rotate::$5 & (number) $3f
  (byte) play_move_rotate::orientation#2 ← (number~) play_move_rotate::$6
  to:play_move_rotate::@3
play_move_rotate::@6: scope:[play_move_rotate]  from play_move_rotate::@5
  (byte*) current_piece_gfx#38 ← phi( play_move_rotate::@5/(byte*) current_piece_gfx#52 )
  (byte) current_orientation#44 ← phi( play_move_rotate::@5/(byte) current_orientation#42 )
  (byte) play_move_rotate::return#1 ← (number) 0
  to:play_move_rotate::@return
play_move_rotate::@return: scope:[play_move_rotate]  from play_move_rotate::@4 play_move_rotate::@6 play_move_rotate::@7
  (byte*) current_piece_gfx#21 ← phi( play_move_rotate::@4/(byte*) current_piece_gfx#37 play_move_rotate::@6/(byte*) current_piece_gfx#38 play_move_rotate::@7/(byte*) current_piece_gfx#7 )
  (byte) current_orientation#25 ← phi( play_move_rotate::@4/(byte) current_orientation#43 play_move_rotate::@6/(byte) current_orientation#44 play_move_rotate::@7/(byte) current_orientation#7 )
  (byte) play_move_rotate::return#6 ← phi( play_move_rotate::@4/(byte) play_move_rotate::return#3 play_move_rotate::@6/(byte) play_move_rotate::return#1 play_move_rotate::@7/(byte) play_move_rotate::return#4 )
  (byte) play_move_rotate::return#2 ← (byte) play_move_rotate::return#6
  (byte) current_orientation#6 ← (byte) current_orientation#25
  (byte*) current_piece_gfx#6 ← (byte*) current_piece_gfx#21
  return 
  to:@return
play_move_rotate::@3: scope:[play_move_rotate]  from play_move_rotate::@1 play_move_rotate::@2
  (byte*) current_piece_gfx#72 ← phi( play_move_rotate::@1/(byte*) current_piece_gfx#89 play_move_rotate::@2/(byte*) current_piece_gfx#90 )
  (byte) current_orientation#67 ← phi( play_move_rotate::@1/(byte) current_orientation#23 play_move_rotate::@2/(byte) current_orientation#24 )
  (byte*) current_piece#34 ← phi( play_move_rotate::@1/(byte*) current_piece#46 play_move_rotate::@2/(byte*) current_piece#47 )
  (byte) play_move_rotate::orientation#3 ← phi( play_move_rotate::@1/(byte) play_move_rotate::orientation#1 play_move_rotate::@2/(byte) play_move_rotate::orientation#2 )
  (byte) current_ypos#22 ← phi( play_move_rotate::@1/(byte) current_ypos#42 play_move_rotate::@2/(byte) current_ypos#43 )
  (byte) current_xpos#28 ← phi( play_move_rotate::@1/(byte) current_xpos#50 play_move_rotate::@2/(byte) current_xpos#51 )
  (byte) play_collision::xpos#3 ← (byte) current_xpos#28
  (byte) play_collision::ypos#3 ← (byte) current_ypos#22
  (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3
  call play_collision 
  (byte) play_collision::return#3 ← (byte) play_collision::return#5
  to:play_move_rotate::@8
play_move_rotate::@8: scope:[play_move_rotate]  from play_move_rotate::@3
  (byte*) current_piece_gfx#53 ← phi( play_move_rotate::@3/(byte*) current_piece_gfx#72 )
  (byte) current_orientation#55 ← phi( play_move_rotate::@3/(byte) current_orientation#67 )
  (byte*) current_piece#30 ← phi( play_move_rotate::@3/(byte*) current_piece#34 )
  (byte) play_move_rotate::orientation#5 ← phi( play_move_rotate::@3/(byte) play_move_rotate::orientation#3 )
  (byte) play_collision::return#14 ← phi( play_move_rotate::@3/(byte) play_collision::return#3 )
  (byte~) play_move_rotate::$2 ← (byte) play_collision::return#14
  (bool~) play_move_rotate::$3 ← (byte~) play_move_rotate::$2 == (const nomodify byte) COLLISION_NONE
  (bool~) play_move_rotate::$4 ← ! (bool~) play_move_rotate::$3
  if((bool~) play_move_rotate::$4) goto play_move_rotate::@4
  to:play_move_rotate::@7
play_move_rotate::@4: scope:[play_move_rotate]  from play_move_rotate::@8
  (byte*) current_piece_gfx#37 ← phi( play_move_rotate::@8/(byte*) current_piece_gfx#53 )
  (byte) current_orientation#43 ← phi( play_move_rotate::@8/(byte) current_orientation#55 )
  (byte) play_move_rotate::return#3 ← (number) 0
  to:play_move_rotate::@return
play_move_rotate::@7: scope:[play_move_rotate]  from play_move_rotate::@8
  (byte*) current_piece#16 ← phi( play_move_rotate::@8/(byte*) current_piece#30 )
  (byte) play_move_rotate::orientation#4 ← phi( play_move_rotate::@8/(byte) play_move_rotate::orientation#5 )
  (byte) current_orientation#7 ← (byte) play_move_rotate::orientation#4
  (byte*~) play_move_rotate::$9 ← (byte*) current_piece#16 + (byte) current_orientation#7
  (byte*) current_piece_gfx#7 ← (byte*~) play_move_rotate::$9
  (byte) play_move_rotate::return#4 ← (number) 1
  to:play_move_rotate::@return

(byte()) play_collision((byte) play_collision::xpos , (byte) play_collision::ypos , (byte) play_collision::orientation)
play_collision: scope:[play_collision]  from play_move_down::@9 play_move_leftright::@1 play_move_leftright::@4 play_move_rotate::@3 play_spawn_current
  (byte) play_collision::xpos#6 ← phi( play_move_down::@9/(byte) play_collision::xpos#0 play_move_leftright::@1/(byte) play_collision::xpos#1 play_move_leftright::@4/(byte) play_collision::xpos#2 play_move_rotate::@3/(byte) play_collision::xpos#3 play_spawn_current/(byte) play_collision::xpos#4 )
  (byte) play_collision::ypos#5 ← phi( play_move_down::@9/(byte) play_collision::ypos#0 play_move_leftright::@1/(byte) play_collision::ypos#1 play_move_leftright::@4/(byte) play_collision::ypos#2 play_move_rotate::@3/(byte) play_collision::ypos#3 play_spawn_current/(byte) play_collision::ypos#4 )
  (byte) play_collision::orientation#5 ← phi( play_move_down::@9/(byte) play_collision::orientation#0 play_move_leftright::@1/(byte) play_collision::orientation#1 play_move_leftright::@4/(byte) play_collision::orientation#2 play_move_rotate::@3/(byte) play_collision::orientation#3 play_spawn_current/(byte) play_collision::orientation#4 )
  (byte*) current_piece#17 ← phi( play_move_down::@9/(byte*) current_piece#31 play_move_leftright::@1/(byte*) current_piece#32 play_move_leftright::@4/(byte*) current_piece#33 play_move_rotate::@3/(byte*) current_piece#34 play_spawn_current/(byte*) current_piece#5 )
  (byte*~) play_collision::$0 ← (byte*) current_piece#17 + (byte) play_collision::orientation#5
  (byte*) play_collision::piece_gfx#0 ← (byte*~) play_collision::$0
  (byte) play_collision::i#0 ← (byte) 0
  (byte) play_collision::yp#0 ← (byte) play_collision::ypos#5
  (byte) play_collision::l#0 ← (byte) 0
  to:play_collision::@1
play_collision::@1: scope:[play_collision]  from play_collision play_collision::@12
  (byte) play_collision::l#6 ← phi( play_collision/(byte) play_collision::l#0 play_collision::@12/(byte) play_collision::l#1 )
  (byte) play_collision::i#3 ← phi( play_collision/(byte) play_collision::i#0 play_collision::@12/(byte) play_collision::i#5 )
  (byte*) play_collision::piece_gfx#2 ← phi( play_collision/(byte*) play_collision::piece_gfx#0 play_collision::@12/(byte*) play_collision::piece_gfx#4 )
  (byte) play_collision::xpos#5 ← phi( play_collision/(byte) play_collision::xpos#6 play_collision::@12/(byte) play_collision::xpos#7 )
  (byte) play_collision::yp#2 ← phi( play_collision/(byte) play_collision::yp#0 play_collision::@12/(byte) play_collision::yp#1 )
  (byte~) play_collision::$14 ← (byte) play_collision::yp#2 * (const byte) SIZEOF_POINTER
  (byte*) play_collision::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_collision::$14)
  (byte) play_collision::xp#0 ← (byte) play_collision::xpos#5
  (byte) play_collision::c#0 ← (byte) 0
  to:play_collision::@2
play_collision::@2: scope:[play_collision]  from play_collision::@1 play_collision::@3
  (byte*) play_collision::playfield_line#5 ← phi( play_collision::@1/(byte*) play_collision::playfield_line#0 play_collision::@3/(byte*) play_collision::playfield_line#6 )
  (byte) play_collision::xpos#9 ← phi( play_collision::@1/(byte) play_collision::xpos#5 play_collision::@3/(byte) play_collision::xpos#8 )
  (byte) play_collision::l#4 ← phi( play_collision::@1/(byte) play_collision::l#6 play_collision::@3/(byte) play_collision::l#3 )
  (byte) play_collision::yp#5 ← phi( play_collision::@1/(byte) play_collision::yp#2 play_collision::@3/(byte) play_collision::yp#6 )
  (byte) play_collision::c#3 ← phi( play_collision::@1/(byte) play_collision::c#0 play_collision::@3/(byte) play_collision::c#1 )
  (byte) play_collision::xp#6 ← phi( play_collision::@1/(byte) play_collision::xp#0 play_collision::@3/(byte) play_collision::xp#1 )
  (byte) play_collision::i#2 ← phi( play_collision::@1/(byte) play_collision::i#3 play_collision::@3/(byte) play_collision::i#4 )
  (byte*) play_collision::piece_gfx#1 ← phi( play_collision::@1/(byte*) play_collision::piece_gfx#2 play_collision::@3/(byte*) play_collision::piece_gfx#3 )
  (bool~) play_collision::$1 ← *((byte*) play_collision::piece_gfx#1 + (byte) play_collision::i#2) != (number) 0
  (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2
  (bool~) play_collision::$2 ← ! (bool~) play_collision::$1
  if((bool~) play_collision::$2) goto play_collision::@3
  to:play_collision::@10
play_collision::@3: scope:[play_collision]  from play_collision::@2 play_collision::@6
  (byte*) play_collision::playfield_line#6 ← phi( play_collision::@2/(byte*) play_collision::playfield_line#5 play_collision::@6/(byte*) play_collision::playfield_line#1 )
  (byte) play_collision::xpos#8 ← phi( play_collision::@2/(byte) play_collision::xpos#9 play_collision::@6/(byte) play_collision::xpos#10 )
  (byte) play_collision::l#3 ← phi( play_collision::@2/(byte) play_collision::l#4 play_collision::@6/(byte) play_collision::l#5 )
  (byte) play_collision::yp#6 ← phi( play_collision::@2/(byte) play_collision::yp#5 play_collision::@6/(byte) play_collision::yp#7 )
  (byte) play_collision::i#4 ← phi( play_collision::@2/(byte) play_collision::i#1 play_collision::@6/(byte) play_collision::i#6 )
  (byte*) play_collision::piece_gfx#3 ← phi( play_collision::@2/(byte*) play_collision::piece_gfx#1 play_collision::@6/(byte*) play_collision::piece_gfx#5 )
  (byte) play_collision::c#2 ← phi( play_collision::@2/(byte) play_collision::c#3 play_collision::@6/(byte) play_collision::c#4 )
  (byte) play_collision::xp#2 ← phi( play_collision::@2/(byte) play_collision::xp#6 play_collision::@6/(byte) play_collision::xp#5 )
  (byte) play_collision::xp#1 ← ++ (byte) play_collision::xp#2
  (byte) play_collision::c#1 ← (byte) play_collision::c#2 + rangenext(0,3)
  (bool~) play_collision::$12 ← (byte) play_collision::c#1 != rangelast(0,3)
  if((bool~) play_collision::$12) goto play_collision::@2
  to:play_collision::@12
play_collision::@10: scope:[play_collision]  from play_collision::@2
  (byte) play_collision::xpos#13 ← phi( play_collision::@2/(byte) play_collision::xpos#9 )
  (byte) play_collision::l#9 ← phi( play_collision::@2/(byte) play_collision::l#4 )
  (byte) play_collision::i#9 ← phi( play_collision::@2/(byte) play_collision::i#1 )
  (byte*) play_collision::piece_gfx#8 ← phi( play_collision::@2/(byte*) play_collision::piece_gfx#1 )
  (byte) play_collision::c#7 ← phi( play_collision::@2/(byte) play_collision::c#3 )
  (byte*) play_collision::playfield_line#4 ← phi( play_collision::@2/(byte*) play_collision::playfield_line#5 )
  (byte) play_collision::xp#7 ← phi( play_collision::@2/(byte) play_collision::xp#6 )
  (byte) play_collision::yp#3 ← phi( play_collision::@2/(byte) play_collision::yp#5 )
  (bool~) play_collision::$3 ← (byte) play_collision::yp#3 >= (const nomodify byte) PLAYFIELD_LINES
  (bool~) play_collision::$4 ← ! (bool~) play_collision::$3
  if((bool~) play_collision::$4) goto play_collision::@4
  to:play_collision::@11
play_collision::@4: scope:[play_collision]  from play_collision::@10
  (byte) play_collision::xpos#12 ← phi( play_collision::@10/(byte) play_collision::xpos#13 )
  (byte) play_collision::l#8 ← phi( play_collision::@10/(byte) play_collision::l#9 )
  (byte) play_collision::yp#9 ← phi( play_collision::@10/(byte) play_collision::yp#3 )
  (byte) play_collision::i#8 ← phi( play_collision::@10/(byte) play_collision::i#9 )
  (byte*) play_collision::piece_gfx#7 ← phi( play_collision::@10/(byte*) play_collision::piece_gfx#8 )
  (byte) play_collision::c#6 ← phi( play_collision::@10/(byte) play_collision::c#7 )
  (byte*) play_collision::playfield_line#3 ← phi( play_collision::@10/(byte*) play_collision::playfield_line#4 )
  (byte) play_collision::xp#3 ← phi( play_collision::@10/(byte) play_collision::xp#7 )
  (number~) play_collision::$5 ← (byte) play_collision::xp#3 & (number) $80
  (bool~) play_collision::$6 ← (number~) play_collision::$5 != (number) 0
  (bool~) play_collision::$7 ← ! (bool~) play_collision::$6
  if((bool~) play_collision::$7) goto play_collision::@5
  to:play_collision::@7
play_collision::@11: scope:[play_collision]  from play_collision::@10
  (byte) play_collision::return#4 ← (const nomodify byte) COLLISION_BOTTOM
  to:play_collision::@return
play_collision::@return: scope:[play_collision]  from play_collision::@11 play_collision::@13 play_collision::@7 play_collision::@8 play_collision::@9
  (byte) play_collision::return#15 ← phi( play_collision::@11/(byte) play_collision::return#4 play_collision::@13/(byte) play_collision::return#9 play_collision::@7/(byte) play_collision::return#6 play_collision::@8/(byte) play_collision::return#7 play_collision::@9/(byte) play_collision::return#8 )
  (byte) play_collision::return#5 ← (byte) play_collision::return#15
  return 
  to:@return
play_collision::@5: scope:[play_collision]  from play_collision::@4
  (byte) play_collision::xpos#11 ← phi( play_collision::@4/(byte) play_collision::xpos#12 )
  (byte) play_collision::l#7 ← phi( play_collision::@4/(byte) play_collision::l#8 )
  (byte) play_collision::yp#8 ← phi( play_collision::@4/(byte) play_collision::yp#9 )
  (byte) play_collision::i#7 ← phi( play_collision::@4/(byte) play_collision::i#8 )
  (byte*) play_collision::piece_gfx#6 ← phi( play_collision::@4/(byte*) play_collision::piece_gfx#7 )
  (byte) play_collision::c#5 ← phi( play_collision::@4/(byte) play_collision::c#6 )
  (byte*) play_collision::playfield_line#2 ← phi( play_collision::@4/(byte*) play_collision::playfield_line#3 )
  (byte) play_collision::xp#4 ← phi( play_collision::@4/(byte) play_collision::xp#3 )
  (bool~) play_collision::$8 ← (byte) play_collision::xp#4 >= (const nomodify byte) PLAYFIELD_COLS
  (bool~) play_collision::$9 ← ! (bool~) play_collision::$8
  if((bool~) play_collision::$9) goto play_collision::@6
  to:play_collision::@8
play_collision::@7: scope:[play_collision]  from play_collision::@4
  (byte) play_collision::return#6 ← (const nomodify byte) COLLISION_LEFT
  to:play_collision::@return
play_collision::@6: scope:[play_collision]  from play_collision::@5
  (byte) play_collision::xpos#10 ← phi( play_collision::@5/(byte) play_collision::xpos#11 )
  (byte) play_collision::l#5 ← phi( play_collision::@5/(byte) play_collision::l#7 )
  (byte) play_collision::yp#7 ← phi( play_collision::@5/(byte) play_collision::yp#8 )
  (byte) play_collision::i#6 ← phi( play_collision::@5/(byte) play_collision::i#7 )
  (byte*) play_collision::piece_gfx#5 ← phi( play_collision::@5/(byte*) play_collision::piece_gfx#6 )
  (byte) play_collision::c#4 ← phi( play_collision::@5/(byte) play_collision::c#5 )
  (byte) play_collision::xp#5 ← phi( play_collision::@5/(byte) play_collision::xp#4 )
  (byte*) play_collision::playfield_line#1 ← phi( play_collision::@5/(byte*) play_collision::playfield_line#2 )
  (bool~) play_collision::$10 ← *((byte*) play_collision::playfield_line#1 + (byte) play_collision::xp#5) != (number) 0
  (bool~) play_collision::$11 ← ! (bool~) play_collision::$10
  if((bool~) play_collision::$11) goto play_collision::@3
  to:play_collision::@9
play_collision::@8: scope:[play_collision]  from play_collision::@5
  (byte) play_collision::return#7 ← (const nomodify byte) COLLISION_RIGHT
  to:play_collision::@return
play_collision::@9: scope:[play_collision]  from play_collision::@6
  (byte) play_collision::return#8 ← (const nomodify byte) COLLISION_PLAYFIELD
  to:play_collision::@return
play_collision::@12: scope:[play_collision]  from play_collision::@3
  (byte) play_collision::i#5 ← phi( play_collision::@3/(byte) play_collision::i#4 )
  (byte*) play_collision::piece_gfx#4 ← phi( play_collision::@3/(byte*) play_collision::piece_gfx#3 )
  (byte) play_collision::xpos#7 ← phi( play_collision::@3/(byte) play_collision::xpos#8 )
  (byte) play_collision::l#2 ← phi( play_collision::@3/(byte) play_collision::l#3 )
  (byte) play_collision::yp#4 ← phi( play_collision::@3/(byte) play_collision::yp#6 )
  (byte) play_collision::yp#1 ← ++ (byte) play_collision::yp#4
  (byte) play_collision::l#1 ← (byte) play_collision::l#2 + rangenext(0,3)
  (bool~) play_collision::$13 ← (byte) play_collision::l#1 != rangelast(0,3)
  if((bool~) play_collision::$13) goto play_collision::@1
  to:play_collision::@13
play_collision::@13: scope:[play_collision]  from play_collision::@12
  (byte) play_collision::return#9 ← (const nomodify byte) COLLISION_NONE
  to:play_collision::@return

(void()) play_lock_current()
play_lock_current: scope:[play_lock_current]  from play_move_down::@10
  (byte) current_piece_char#59 ← phi( play_move_down::@10/(byte) current_piece_char#75 )
  (byte*) current_piece_gfx#54 ← phi( play_move_down::@10/(byte*) current_piece_gfx#73 )
  (byte) current_xpos#52 ← phi( play_move_down::@10/(byte) current_xpos#67 )
  (byte) current_ypos#23 ← phi( play_move_down::@10/(byte) current_ypos#44 )
  (byte) play_lock_current::i#0 ← (byte) 0
  (byte) play_lock_current::yp#0 ← (byte) current_ypos#23
  (byte) play_lock_current::l#0 ← (byte) 0
  to:play_lock_current::@1
play_lock_current::@1: scope:[play_lock_current]  from play_lock_current play_lock_current::@5
  (byte) play_lock_current::l#6 ← phi( play_lock_current/(byte) play_lock_current::l#0 play_lock_current::@5/(byte) play_lock_current::l#1 )
  (byte) current_piece_char#43 ← phi( play_lock_current/(byte) current_piece_char#59 play_lock_current::@5/(byte) current_piece_char#60 )
  (byte) play_lock_current::i#3 ← phi( play_lock_current/(byte) play_lock_current::i#0 play_lock_current::@5/(byte) play_lock_current::i#5 )
  (byte*) current_piece_gfx#39 ← phi( play_lock_current/(byte*) current_piece_gfx#54 play_lock_current::@5/(byte*) current_piece_gfx#55 )
  (byte) current_xpos#29 ← phi( play_lock_current/(byte) current_xpos#52 play_lock_current::@5/(byte) current_xpos#53 )
  (byte) play_lock_current::yp#2 ← phi( play_lock_current/(byte) play_lock_current::yp#0 play_lock_current::@5/(byte) play_lock_current::yp#1 )
  (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 * (const byte) SIZEOF_POINTER
  (byte*) play_lock_current::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_lock_current::$4)
  (byte) play_lock_current::xp#0 ← (byte) current_xpos#29
  (byte) play_lock_current::c#0 ← (byte) 0
  to:play_lock_current::@2
play_lock_current::@2: scope:[play_lock_current]  from play_lock_current::@1 play_lock_current::@3
  (byte) current_xpos#86 ← phi( play_lock_current::@1/(byte) current_xpos#29 play_lock_current::@3/(byte) current_xpos#68 )
  (byte) play_lock_current::l#4 ← phi( play_lock_current::@1/(byte) play_lock_current::l#6 play_lock_current::@3/(byte) play_lock_current::l#3 )
  (byte) play_lock_current::yp#5 ← phi( play_lock_current::@1/(byte) play_lock_current::yp#2 play_lock_current::@3/(byte) play_lock_current::yp#4 )
  (byte*) play_lock_current::playfield_line#2 ← phi( play_lock_current::@1/(byte*) play_lock_current::playfield_line#0 play_lock_current::@3/(byte*) play_lock_current::playfield_line#3 )
  (byte) current_piece_char#31 ← phi( play_lock_current::@1/(byte) current_piece_char#43 play_lock_current::@3/(byte) current_piece_char#44 )
  (byte) play_lock_current::c#3 ← phi( play_lock_current::@1/(byte) play_lock_current::c#0 play_lock_current::@3/(byte) play_lock_current::c#1 )
  (byte) play_lock_current::xp#4 ← phi( play_lock_current::@1/(byte) play_lock_current::xp#0 play_lock_current::@3/(byte) play_lock_current::xp#1 )
  (byte) play_lock_current::i#2 ← phi( play_lock_current::@1/(byte) play_lock_current::i#3 play_lock_current::@3/(byte) play_lock_current::i#4 )
  (byte*) current_piece_gfx#22 ← phi( play_lock_current::@1/(byte*) current_piece_gfx#39 play_lock_current::@3/(byte*) current_piece_gfx#40 )
  (bool~) play_lock_current::$0 ← *((byte*) current_piece_gfx#22 + (byte) play_lock_current::i#2) != (number) 0
  (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2
  (bool~) play_lock_current::$1 ← ! (bool~) play_lock_current::$0
  if((bool~) play_lock_current::$1) goto play_lock_current::@3
  to:play_lock_current::@4
play_lock_current::@3: scope:[play_lock_current]  from play_lock_current::@2 play_lock_current::@4
  (byte) current_xpos#68 ← phi( play_lock_current::@2/(byte) current_xpos#86 play_lock_current::@4/(byte) current_xpos#87 )
  (byte*) play_lock_current::playfield_line#3 ← phi( play_lock_current::@2/(byte*) play_lock_current::playfield_line#2 play_lock_current::@4/(byte*) play_lock_current::playfield_line#1 )
  (byte) current_piece_char#44 ← phi( play_lock_current::@2/(byte) current_piece_char#31 play_lock_current::@4/(byte) current_piece_char#17 )
  (byte) play_lock_current::l#3 ← phi( play_lock_current::@2/(byte) play_lock_current::l#4 play_lock_current::@4/(byte) play_lock_current::l#5 )
  (byte) play_lock_current::yp#4 ← phi( play_lock_current::@2/(byte) play_lock_current::yp#5 play_lock_current::@4/(byte) play_lock_current::yp#6 )
  (byte) play_lock_current::i#4 ← phi( play_lock_current::@2/(byte) play_lock_current::i#1 play_lock_current::@4/(byte) play_lock_current::i#6 )
  (byte*) current_piece_gfx#40 ← phi( play_lock_current::@2/(byte*) current_piece_gfx#22 play_lock_current::@4/(byte*) current_piece_gfx#56 )
  (byte) play_lock_current::c#2 ← phi( play_lock_current::@2/(byte) play_lock_current::c#3 play_lock_current::@4/(byte) play_lock_current::c#4 )
  (byte) play_lock_current::xp#2 ← phi( play_lock_current::@2/(byte) play_lock_current::xp#4 play_lock_current::@4/(byte) play_lock_current::xp#3 )
  (byte) play_lock_current::xp#1 ← ++ (byte) play_lock_current::xp#2
  (byte) play_lock_current::c#1 ← (byte) play_lock_current::c#2 + rangenext(0,3)
  (bool~) play_lock_current::$2 ← (byte) play_lock_current::c#1 != rangelast(0,3)
  if((bool~) play_lock_current::$2) goto play_lock_current::@2
  to:play_lock_current::@5
play_lock_current::@4: scope:[play_lock_current]  from play_lock_current::@2
  (byte) current_xpos#87 ← phi( play_lock_current::@2/(byte) current_xpos#86 )
  (byte) play_lock_current::l#5 ← phi( play_lock_current::@2/(byte) play_lock_current::l#4 )
  (byte) play_lock_current::yp#6 ← phi( play_lock_current::@2/(byte) play_lock_current::yp#5 )
  (byte) play_lock_current::i#6 ← phi( play_lock_current::@2/(byte) play_lock_current::i#1 )
  (byte*) current_piece_gfx#56 ← phi( play_lock_current::@2/(byte*) current_piece_gfx#22 )
  (byte) play_lock_current::c#4 ← phi( play_lock_current::@2/(byte) play_lock_current::c#3 )
  (byte) play_lock_current::xp#3 ← phi( play_lock_current::@2/(byte) play_lock_current::xp#4 )
  (byte*) play_lock_current::playfield_line#1 ← phi( play_lock_current::@2/(byte*) play_lock_current::playfield_line#2 )
  (byte) current_piece_char#17 ← phi( play_lock_current::@2/(byte) current_piece_char#31 )
  *((byte*) play_lock_current::playfield_line#1 + (byte) play_lock_current::xp#3) ← (byte) current_piece_char#17
  to:play_lock_current::@3
play_lock_current::@5: scope:[play_lock_current]  from play_lock_current::@3
  (byte) current_piece_char#60 ← phi( play_lock_current::@3/(byte) current_piece_char#44 )
  (byte) play_lock_current::i#5 ← phi( play_lock_current::@3/(byte) play_lock_current::i#4 )
  (byte*) current_piece_gfx#55 ← phi( play_lock_current::@3/(byte*) current_piece_gfx#40 )
  (byte) current_xpos#53 ← phi( play_lock_current::@3/(byte) current_xpos#68 )
  (byte) play_lock_current::l#2 ← phi( play_lock_current::@3/(byte) play_lock_current::l#3 )
  (byte) play_lock_current::yp#3 ← phi( play_lock_current::@3/(byte) play_lock_current::yp#4 )
  (byte) play_lock_current::yp#1 ← ++ (byte) play_lock_current::yp#3
  (byte) play_lock_current::l#1 ← (byte) play_lock_current::l#2 + rangenext(0,3)
  (bool~) play_lock_current::$3 ← (byte) play_lock_current::l#1 != rangelast(0,3)
  if((bool~) play_lock_current::$3) goto play_lock_current::@1
  to:play_lock_current::@return
play_lock_current::@return: scope:[play_lock_current]  from play_lock_current::@5
  return 
  to:@return

(void()) play_spawn_current()
play_spawn_current: scope:[play_spawn_current]  from main::@13 main::@14 play_move_down::@17
  (byte) game_over#74 ← phi( main::@13/(byte) game_over#30 main::@14/(byte) game_over#7 play_move_down::@17/(byte) game_over#26 )
  (byte) next_piece_idx#17 ← phi( main::@13/(byte) next_piece_idx#32 main::@14/(byte) next_piece_idx#7 play_move_down::@17/(byte) next_piece_idx#29 )
  (byte) play_spawn_current::current_piece_idx#0 ← (byte) next_piece_idx#17
  (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 * (const byte) SIZEOF_WORD
  (byte*) current_piece#5 ← ((byte*)) *((const word*) PIECES + (byte~) play_spawn_current::$7)
  (byte) current_piece_char#5 ← *((const byte*) PIECES_CHARS + (byte) play_spawn_current::current_piece_idx#0)
  (byte) current_orientation#8 ← (number) 0
  (byte*~) play_spawn_current::$0 ← (byte*) current_piece#5 + (byte) current_orientation#8
  (byte*) current_piece_gfx#8 ← (byte*~) play_spawn_current::$0
  (byte) current_xpos#9 ← *((const byte*) PIECES_START_X + (byte) play_spawn_current::current_piece_idx#0)
  (byte) current_ypos#6 ← *((const byte*) PIECES_START_Y + (byte) play_spawn_current::current_piece_idx#0)
  (byte) play_collision::xpos#4 ← (byte) current_xpos#9
  (byte) play_collision::ypos#4 ← (byte) current_ypos#6
  (byte) play_collision::orientation#4 ← (byte) current_orientation#8
  call play_collision 
  (byte) play_collision::return#10 ← (byte) play_collision::return#5
  to:play_spawn_current::@6
play_spawn_current::@6: scope:[play_spawn_current]  from play_spawn_current
  (byte) game_over#65 ← phi( play_spawn_current/(byte) game_over#74 )
  (byte) current_ypos#80 ← phi( play_spawn_current/(byte) current_ypos#6 )
  (byte) current_xpos#100 ← phi( play_spawn_current/(byte) current_xpos#9 )
  (byte*) current_piece_gfx#92 ← phi( play_spawn_current/(byte*) current_piece_gfx#8 )
  (byte) current_orientation#78 ← phi( play_spawn_current/(byte) current_orientation#8 )
  (byte) current_piece_char#77 ← phi( play_spawn_current/(byte) current_piece_char#5 )
  (byte*) current_piece#73 ← phi( play_spawn_current/(byte*) current_piece#5 )
  (byte) play_collision::return#16 ← phi( play_spawn_current/(byte) play_collision::return#10 )
  (byte~) play_spawn_current::$1 ← (byte) play_collision::return#16
  (bool~) play_spawn_current::$2 ← (byte~) play_spawn_current::$1 == (const nomodify byte) COLLISION_PLAYFIELD
  (bool~) play_spawn_current::$3 ← ! (bool~) play_spawn_current::$2
  if((bool~) play_spawn_current::$3) goto play_spawn_current::@1
  to:play_spawn_current::@2
play_spawn_current::@1: scope:[play_spawn_current]  from play_spawn_current::@2 play_spawn_current::@6
  (byte) game_over#52 ← phi( play_spawn_current::@2/(byte) game_over#5 play_spawn_current::@6/(byte) game_over#65 )
  (byte) current_ypos#70 ← phi( play_spawn_current::@2/(byte) current_ypos#79 play_spawn_current::@6/(byte) current_ypos#80 )
  (byte) current_xpos#88 ← phi( play_spawn_current::@2/(byte) current_xpos#99 play_spawn_current::@6/(byte) current_xpos#100 )
  (byte*) current_piece_gfx#74 ← phi( play_spawn_current::@2/(byte*) current_piece_gfx#91 play_spawn_current::@6/(byte*) current_piece_gfx#92 )
  (byte) current_orientation#68 ← phi( play_spawn_current::@2/(byte) current_orientation#77 play_spawn_current::@6/(byte) current_orientation#78 )
  (byte) current_piece_char#61 ← phi( play_spawn_current::@2/(byte) current_piece_char#76 play_spawn_current::@6/(byte) current_piece_char#77 )
  (byte*) current_piece#61 ← phi( play_spawn_current::@2/(byte*) current_piece#72 play_spawn_current::@6/(byte*) current_piece#73 )
  (byte) play_spawn_current::piece_idx#0 ← (byte) 7
  to:play_spawn_current::@3
play_spawn_current::@2: scope:[play_spawn_current]  from play_spawn_current::@6
  (byte) current_ypos#79 ← phi( play_spawn_current::@6/(byte) current_ypos#80 )
  (byte) current_xpos#99 ← phi( play_spawn_current::@6/(byte) current_xpos#100 )
  (byte*) current_piece_gfx#91 ← phi( play_spawn_current::@6/(byte*) current_piece_gfx#92 )
  (byte) current_orientation#77 ← phi( play_spawn_current::@6/(byte) current_orientation#78 )
  (byte) current_piece_char#76 ← phi( play_spawn_current::@6/(byte) current_piece_char#77 )
  (byte*) current_piece#72 ← phi( play_spawn_current::@6/(byte*) current_piece#73 )
  (byte) game_over#5 ← (number) 1
  to:play_spawn_current::@1
play_spawn_current::@3: scope:[play_spawn_current]  from play_spawn_current::@1 play_spawn_current::@5
  (byte) game_over#39 ← phi( play_spawn_current::@1/(byte) game_over#52 play_spawn_current::@5/(byte) game_over#53 )
  (byte) current_ypos#57 ← phi( play_spawn_current::@1/(byte) current_ypos#70 play_spawn_current::@5/(byte) current_ypos#71 )
  (byte) current_xpos#69 ← phi( play_spawn_current::@1/(byte) current_xpos#88 play_spawn_current::@5/(byte) current_xpos#89 )
  (byte*) current_piece_gfx#57 ← phi( play_spawn_current::@1/(byte*) current_piece_gfx#74 play_spawn_current::@5/(byte*) current_piece_gfx#75 )
  (byte) current_orientation#56 ← phi( play_spawn_current::@1/(byte) current_orientation#68 play_spawn_current::@5/(byte) current_orientation#69 )
  (byte) current_piece_char#45 ← phi( play_spawn_current::@1/(byte) current_piece_char#61 play_spawn_current::@5/(byte) current_piece_char#62 )
  (byte*) current_piece#48 ← phi( play_spawn_current::@1/(byte*) current_piece#61 play_spawn_current::@5/(byte*) current_piece#62 )
  (byte) play_spawn_current::piece_idx#2 ← phi( play_spawn_current::@1/(byte) play_spawn_current::piece_idx#0 play_spawn_current::@5/(byte) play_spawn_current::piece_idx#1 )
  (bool~) play_spawn_current::$4 ← (byte) play_spawn_current::piece_idx#2 == (number) 7
  if((bool~) play_spawn_current::$4) goto play_spawn_current::sid_rnd1
  to:play_spawn_current::@4
play_spawn_current::sid_rnd1: scope:[play_spawn_current]  from play_spawn_current::@3
  (byte) game_over#75 ← phi( play_spawn_current::@3/(byte) game_over#39 )
  (byte) current_ypos#89 ← phi( play_spawn_current::@3/(byte) current_ypos#57 )
  (byte) current_xpos#110 ← phi( play_spawn_current::@3/(byte) current_xpos#69 )
  (byte*) current_piece_gfx#100 ← phi( play_spawn_current::@3/(byte*) current_piece_gfx#57 )
  (byte) current_orientation#87 ← phi( play_spawn_current::@3/(byte) current_orientation#56 )
  (byte) current_piece_char#88 ← phi( play_spawn_current::@3/(byte) current_piece_char#45 )
  (byte*) current_piece#81 ← phi( play_spawn_current::@3/(byte*) current_piece#48 )
  (byte) play_spawn_current::sid_rnd1_return#0 ← *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC)
  to:play_spawn_current::sid_rnd1_@return
play_spawn_current::sid_rnd1_@return: scope:[play_spawn_current]  from play_spawn_current::sid_rnd1
  (byte) game_over#66 ← phi( play_spawn_current::sid_rnd1/(byte) game_over#75 )
  (byte) current_ypos#81 ← phi( play_spawn_current::sid_rnd1/(byte) current_ypos#89 )
  (byte) current_xpos#101 ← phi( play_spawn_current::sid_rnd1/(byte) current_xpos#110 )
  (byte*) current_piece_gfx#93 ← phi( play_spawn_current::sid_rnd1/(byte*) current_piece_gfx#100 )
  (byte) current_orientation#79 ← phi( play_spawn_current::sid_rnd1/(byte) current_orientation#87 )
  (byte) current_piece_char#78 ← phi( play_spawn_current::sid_rnd1/(byte) current_piece_char#88 )
  (byte*) current_piece#74 ← phi( play_spawn_current::sid_rnd1/(byte*) current_piece#81 )
  (byte) play_spawn_current::sid_rnd1_return#2 ← phi( play_spawn_current::sid_rnd1/(byte) play_spawn_current::sid_rnd1_return#0 )
  (byte) play_spawn_current::sid_rnd1_return#1 ← (byte) play_spawn_current::sid_rnd1_return#2
  to:play_spawn_current::@5
play_spawn_current::@5: scope:[play_spawn_current]  from play_spawn_current::sid_rnd1_@return
  (byte) game_over#53 ← phi( play_spawn_current::sid_rnd1_@return/(byte) game_over#66 )
  (byte) current_ypos#71 ← phi( play_spawn_current::sid_rnd1_@return/(byte) current_ypos#81 )
  (byte) current_xpos#89 ← phi( play_spawn_current::sid_rnd1_@return/(byte) current_xpos#101 )
  (byte*) current_piece_gfx#75 ← phi( play_spawn_current::sid_rnd1_@return/(byte*) current_piece_gfx#93 )
  (byte) current_orientation#69 ← phi( play_spawn_current::sid_rnd1_@return/(byte) current_orientation#79 )
  (byte) current_piece_char#62 ← phi( play_spawn_current::sid_rnd1_@return/(byte) current_piece_char#78 )
  (byte*) current_piece#62 ← phi( play_spawn_current::sid_rnd1_@return/(byte*) current_piece#74 )
  (byte) play_spawn_current::sid_rnd1_return#3 ← phi( play_spawn_current::sid_rnd1_@return/(byte) play_spawn_current::sid_rnd1_return#1 )
  (byte~) play_spawn_current::$5 ← (byte) play_spawn_current::sid_rnd1_return#3
  (number~) play_spawn_current::$6 ← (byte~) play_spawn_current::$5 & (number) 7
  (byte) play_spawn_current::piece_idx#1 ← (number~) play_spawn_current::$6
  to:play_spawn_current::@3
play_spawn_current::@4: scope:[play_spawn_current]  from play_spawn_current::@3
  (byte) game_over#29 ← phi( play_spawn_current::@3/(byte) game_over#39 )
  (byte) current_ypos#45 ← phi( play_spawn_current::@3/(byte) current_ypos#57 )
  (byte) current_xpos#54 ← phi( play_spawn_current::@3/(byte) current_xpos#69 )
  (byte*) current_piece_gfx#41 ← phi( play_spawn_current::@3/(byte*) current_piece_gfx#57 )
  (byte) current_orientation#45 ← phi( play_spawn_current::@3/(byte) current_orientation#56 )
  (byte) current_piece_char#32 ← phi( play_spawn_current::@3/(byte) current_piece_char#45 )
  (byte*) current_piece#35 ← phi( play_spawn_current::@3/(byte*) current_piece#48 )
  (byte) play_spawn_current::piece_idx#3 ← phi( play_spawn_current::@3/(byte) play_spawn_current::piece_idx#2 )
  (byte) next_piece_idx#5 ← (byte) play_spawn_current::piece_idx#3
  to:play_spawn_current::@return
play_spawn_current::@return: scope:[play_spawn_current]  from play_spawn_current::@4
  (byte) next_piece_idx#18 ← phi( play_spawn_current::@4/(byte) next_piece_idx#5 )
  (byte) game_over#16 ← phi( play_spawn_current::@4/(byte) game_over#29 )
  (byte) current_ypos#24 ← phi( play_spawn_current::@4/(byte) current_ypos#45 )
  (byte) current_xpos#30 ← phi( play_spawn_current::@4/(byte) current_xpos#54 )
  (byte*) current_piece_gfx#23 ← phi( play_spawn_current::@4/(byte*) current_piece_gfx#41 )
  (byte) current_orientation#26 ← phi( play_spawn_current::@4/(byte) current_orientation#45 )
  (byte) current_piece_char#18 ← phi( play_spawn_current::@4/(byte) current_piece_char#32 )
  (byte*) current_piece#18 ← phi( play_spawn_current::@4/(byte*) current_piece#35 )
  (byte*) current_piece#6 ← (byte*) current_piece#18
  (byte) current_piece_char#6 ← (byte) current_piece_char#18
  (byte) current_orientation#9 ← (byte) current_orientation#26
  (byte*) current_piece_gfx#9 ← (byte*) current_piece_gfx#23
  (byte) current_xpos#10 ← (byte) current_xpos#30
  (byte) current_ypos#7 ← (byte) current_ypos#24
  (byte) game_over#6 ← (byte) game_over#16
  (byte) next_piece_idx#6 ← (byte) next_piece_idx#18
  return 
  to:@return

(byte()) play_remove_lines()
play_remove_lines: scope:[play_remove_lines]  from play_move_down::@15
  (byte) play_remove_lines::r#0 ← (byte)(const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(number) 1
  (byte) play_remove_lines::w#0 ← (byte)(const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(number) 1
  (byte) play_remove_lines::removed#0 ← (byte) 0
  (byte) play_remove_lines::y#0 ← (byte) 0
  to:play_remove_lines::@1
play_remove_lines::@1: scope:[play_remove_lines]  from play_remove_lines play_remove_lines::@7
  (byte) play_remove_lines::removed#11 ← phi( play_remove_lines/(byte) play_remove_lines::removed#0 play_remove_lines::@7/(byte) play_remove_lines::removed#7 )
  (byte) play_remove_lines::y#8 ← phi( play_remove_lines/(byte) play_remove_lines::y#0 play_remove_lines::@7/(byte) play_remove_lines::y#1 )
  (byte) play_remove_lines::w#12 ← phi( play_remove_lines/(byte) play_remove_lines::w#0 play_remove_lines::@7/(byte) play_remove_lines::w#11 )
  (byte) play_remove_lines::r#3 ← phi( play_remove_lines/(byte) play_remove_lines::r#0 play_remove_lines::@7/(byte) play_remove_lines::r#5 )
  (byte) play_remove_lines::full#0 ← (byte) 1
  (byte) play_remove_lines::x#0 ← (byte) 0
  to:play_remove_lines::@2
play_remove_lines::@2: scope:[play_remove_lines]  from play_remove_lines::@1 play_remove_lines::@3
  (byte) play_remove_lines::removed#9 ← phi( play_remove_lines::@1/(byte) play_remove_lines::removed#11 play_remove_lines::@3/(byte) play_remove_lines::removed#6 )
  (byte) play_remove_lines::y#6 ← phi( play_remove_lines::@1/(byte) play_remove_lines::y#8 play_remove_lines::@3/(byte) play_remove_lines::y#5 )
  (byte) play_remove_lines::full#4 ← phi( play_remove_lines::@1/(byte) play_remove_lines::full#0 play_remove_lines::@3/(byte) play_remove_lines::full#3 )
  (byte) play_remove_lines::x#3 ← phi( play_remove_lines::@1/(byte) play_remove_lines::x#0 play_remove_lines::@3/(byte) play_remove_lines::x#1 )
  (byte) play_remove_lines::w#8 ← phi( play_remove_lines::@1/(byte) play_remove_lines::w#12 play_remove_lines::@3/(byte) play_remove_lines::w#1 )
  (byte) play_remove_lines::r#2 ← phi( play_remove_lines::@1/(byte) play_remove_lines::r#3 play_remove_lines::@3/(byte) play_remove_lines::r#4 )
  (byte) play_remove_lines::c#0 ← *((const byte*) playfield + (byte) play_remove_lines::r#2)
  (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2
  (bool~) play_remove_lines::$0 ← (byte) play_remove_lines::c#0 == (number) 0
  (bool~) play_remove_lines::$1 ← ! (bool~) play_remove_lines::$0
  if((bool~) play_remove_lines::$1) goto play_remove_lines::@3
  to:play_remove_lines::@4
play_remove_lines::@3: scope:[play_remove_lines]  from play_remove_lines::@2 play_remove_lines::@4
  (byte) play_remove_lines::removed#6 ← phi( play_remove_lines::@2/(byte) play_remove_lines::removed#9 play_remove_lines::@4/(byte) play_remove_lines::removed#10 )
  (byte) play_remove_lines::y#5 ← phi( play_remove_lines::@2/(byte) play_remove_lines::y#6 play_remove_lines::@4/(byte) play_remove_lines::y#7 )
  (byte) play_remove_lines::full#3 ← phi( play_remove_lines::@2/(byte) play_remove_lines::full#4 play_remove_lines::@4/(byte) play_remove_lines::full#1 )
  (byte) play_remove_lines::r#4 ← phi( play_remove_lines::@2/(byte) play_remove_lines::r#1 play_remove_lines::@4/(byte) play_remove_lines::r#6 )
  (byte) play_remove_lines::x#2 ← phi( play_remove_lines::@2/(byte) play_remove_lines::x#3 play_remove_lines::@4/(byte) play_remove_lines::x#4 )
  (byte) play_remove_lines::w#4 ← phi( play_remove_lines::@2/(byte) play_remove_lines::w#8 play_remove_lines::@4/(byte) play_remove_lines::w#9 )
  (byte) play_remove_lines::c#1 ← phi( play_remove_lines::@2/(byte) play_remove_lines::c#0 play_remove_lines::@4/(byte) play_remove_lines::c#2 )
  *((const byte*) playfield + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#1
  (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4
  (byte) play_remove_lines::x#1 ← (byte) play_remove_lines::x#2 + rangenext(0,PLAYFIELD_COLS-1)
  (bool~) play_remove_lines::$2 ← (byte) play_remove_lines::x#1 != rangelast(0,PLAYFIELD_COLS-1)
  if((bool~) play_remove_lines::$2) goto play_remove_lines::@2
  to:play_remove_lines::@5
play_remove_lines::@4: scope:[play_remove_lines]  from play_remove_lines::@2
  (byte) play_remove_lines::removed#10 ← phi( play_remove_lines::@2/(byte) play_remove_lines::removed#9 )
  (byte) play_remove_lines::y#7 ← phi( play_remove_lines::@2/(byte) play_remove_lines::y#6 )
  (byte) play_remove_lines::r#6 ← phi( play_remove_lines::@2/(byte) play_remove_lines::r#1 )
  (byte) play_remove_lines::x#4 ← phi( play_remove_lines::@2/(byte) play_remove_lines::x#3 )
  (byte) play_remove_lines::w#9 ← phi( play_remove_lines::@2/(byte) play_remove_lines::w#8 )
  (byte) play_remove_lines::c#2 ← phi( play_remove_lines::@2/(byte) play_remove_lines::c#0 )
  (byte) play_remove_lines::full#1 ← (number) 0
  to:play_remove_lines::@3
play_remove_lines::@5: scope:[play_remove_lines]  from play_remove_lines::@3
  (byte) play_remove_lines::r#7 ← phi( play_remove_lines::@3/(byte) play_remove_lines::r#4 )
  (byte) play_remove_lines::removed#4 ← phi( play_remove_lines::@3/(byte) play_remove_lines::removed#6 )
  (byte) play_remove_lines::w#10 ← phi( play_remove_lines::@3/(byte) play_remove_lines::w#1 )
  (byte) play_remove_lines::y#3 ← phi( play_remove_lines::@3/(byte) play_remove_lines::y#5 )
  (byte) play_remove_lines::full#2 ← phi( play_remove_lines::@3/(byte) play_remove_lines::full#3 )
  (bool~) play_remove_lines::$3 ← (byte) play_remove_lines::full#2 == (number) 1
  (bool~) play_remove_lines::$4 ← ! (bool~) play_remove_lines::$3
  if((bool~) play_remove_lines::$4) goto play_remove_lines::@7
  to:play_remove_lines::@6
play_remove_lines::@7: scope:[play_remove_lines]  from play_remove_lines::@5 play_remove_lines::@6
  (byte) play_remove_lines::removed#7 ← phi( play_remove_lines::@5/(byte) play_remove_lines::removed#4 play_remove_lines::@6/(byte) play_remove_lines::removed#1 )
  (byte) play_remove_lines::r#5 ← phi( play_remove_lines::@5/(byte) play_remove_lines::r#7 play_remove_lines::@6/(byte) play_remove_lines::r#8 )
  (byte) play_remove_lines::w#11 ← phi( play_remove_lines::@5/(byte) play_remove_lines::w#10 play_remove_lines::@6/(byte) play_remove_lines::w#2 )
  (byte) play_remove_lines::y#2 ← phi( play_remove_lines::@5/(byte) play_remove_lines::y#3 play_remove_lines::@6/(byte) play_remove_lines::y#4 )
  (byte) play_remove_lines::y#1 ← (byte) play_remove_lines::y#2 + rangenext(0,PLAYFIELD_LINES-1)
  (bool~) play_remove_lines::$6 ← (byte) play_remove_lines::y#1 != rangelast(0,PLAYFIELD_LINES-1)
  if((bool~) play_remove_lines::$6) goto play_remove_lines::@1
  to:play_remove_lines::@8
play_remove_lines::@6: scope:[play_remove_lines]  from play_remove_lines::@5
  (byte) play_remove_lines::r#8 ← phi( play_remove_lines::@5/(byte) play_remove_lines::r#7 )
  (byte) play_remove_lines::y#4 ← phi( play_remove_lines::@5/(byte) play_remove_lines::y#3 )
  (byte) play_remove_lines::removed#2 ← phi( play_remove_lines::@5/(byte) play_remove_lines::removed#4 )
  (byte) play_remove_lines::w#5 ← phi( play_remove_lines::@5/(byte) play_remove_lines::w#10 )
  (byte~) play_remove_lines::$5 ← (byte) play_remove_lines::w#5 + (const nomodify byte) PLAYFIELD_COLS
  (byte) play_remove_lines::w#2 ← (byte~) play_remove_lines::$5
  (byte) play_remove_lines::removed#1 ← ++ (byte) play_remove_lines::removed#2
  to:play_remove_lines::@7
play_remove_lines::@8: scope:[play_remove_lines]  from play_remove_lines::@7 play_remove_lines::@9
  (byte) play_remove_lines::removed#5 ← phi( play_remove_lines::@7/(byte) play_remove_lines::removed#7 play_remove_lines::@9/(byte) play_remove_lines::removed#8 )
  (byte) play_remove_lines::w#6 ← phi( play_remove_lines::@7/(byte) play_remove_lines::w#11 play_remove_lines::@9/(byte) play_remove_lines::w#3 )
  (bool~) play_remove_lines::$7 ← (byte) play_remove_lines::w#6 != (number) $ff
  if((bool~) play_remove_lines::$7) goto play_remove_lines::@9
  to:play_remove_lines::@10
play_remove_lines::@9: scope:[play_remove_lines]  from play_remove_lines::@8
  (byte) play_remove_lines::removed#8 ← phi( play_remove_lines::@8/(byte) play_remove_lines::removed#5 )
  (byte) play_remove_lines::w#7 ← phi( play_remove_lines::@8/(byte) play_remove_lines::w#6 )
  *((const byte*) playfield + (byte) play_remove_lines::w#7) ← (number) 0
  (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#7
  to:play_remove_lines::@8
play_remove_lines::@10: scope:[play_remove_lines]  from play_remove_lines::@8
  (byte) play_remove_lines::removed#3 ← phi( play_remove_lines::@8/(byte) play_remove_lines::removed#5 )
  (byte) play_remove_lines::return#1 ← (byte) play_remove_lines::removed#3
  to:play_remove_lines::@return
play_remove_lines::@return: scope:[play_remove_lines]  from play_remove_lines::@10
  (byte) play_remove_lines::return#4 ← phi( play_remove_lines::@10/(byte) play_remove_lines::return#1 )
  (byte) play_remove_lines::return#2 ← (byte) play_remove_lines::return#4
  return 
  to:@return

(void()) play_update_score((byte) play_update_score::removed)
play_update_score: scope:[play_update_score]  from play_move_down::@16
  (byte) level_bcd#34 ← phi( play_move_down::@16/(byte) level_bcd#30 )
  (byte) current_movedown_slow#40 ← phi( play_move_down::@16/(byte) current_movedown_slow#36 )
  (byte) level#36 ← phi( play_move_down::@16/(byte) level#32 )
  (word) lines_bcd#28 ← phi( play_move_down::@16/(word) lines_bcd#25 )
  (byte) play_update_score::removed#1 ← phi( play_move_down::@16/(byte) play_update_score::removed#0 )
  (bool~) play_update_score::$0 ← (byte) play_update_score::removed#1 != (number) 0
  (bool~) play_update_score::$1 ← ! (bool~) play_update_score::$0
  if((bool~) play_update_score::$1) goto play_update_score::@return
  to:play_update_score::@1
play_update_score::@1: scope:[play_update_score]  from play_update_score
  (byte) level_bcd#35 ← phi( play_update_score/(byte) level_bcd#34 )
  (byte) current_movedown_slow#41 ← phi( play_update_score/(byte) current_movedown_slow#40 )
  (byte) level#37 ← phi( play_update_score/(byte) level#36 )
  (byte) play_update_score::removed#2 ← phi( play_update_score/(byte) play_update_score::removed#1 )
  (word) lines_bcd#16 ← phi( play_update_score/(word) lines_bcd#28 )
  (byte~) play_update_score::$2 ← < (word) lines_bcd#16
  (number~) play_update_score::$3 ← (byte~) play_update_score::$2 & (number) $f0
  (byte) play_update_score::lines_before#0 ← (number~) play_update_score::$3
  (byte~) play_update_score::$9 ← (byte) play_update_score::removed#2 * (const byte) SIZEOF_DWORD
  (dword) play_update_score::add_bcd#0 ← *((const dword*) score_add_bcd + (byte~) play_update_score::$9)
  asm { sed  }
  (word) lines_bcd#5 ← (word) lines_bcd#16 + (byte) play_update_score::removed#2
  (volatile dword) score_bcd ← (volatile dword) score_bcd + (dword) play_update_score::add_bcd#0
  asm { cld  }
  (byte~) play_update_score::$4 ← < (word) lines_bcd#5
  (number~) play_update_score::$5 ← (byte~) play_update_score::$4 & (number) $f0
  (byte) play_update_score::lines_after#0 ← (number~) play_update_score::$5
  (bool~) play_update_score::$6 ← (byte) play_update_score::lines_before#0 != (byte) play_update_score::lines_after#0
  (bool~) play_update_score::$7 ← ! (bool~) play_update_score::$6
  if((bool~) play_update_score::$7) goto play_update_score::@return
  to:play_update_score::@2
play_update_score::@2: scope:[play_update_score]  from play_update_score::@1
  (word) lines_bcd#39 ← phi( play_update_score::@1/(word) lines_bcd#5 )
  (byte) level_bcd#33 ← phi( play_update_score::@1/(byte) level_bcd#35 )
  (byte) current_movedown_slow#39 ← phi( play_update_score::@1/(byte) current_movedown_slow#41 )
  (byte) level#35 ← phi( play_update_score::@1/(byte) level#37 )
  call play_increase_level 
  to:play_update_score::@3
play_update_score::@3: scope:[play_update_score]  from play_update_score::@2
  (word) lines_bcd#29 ← phi( play_update_score::@2/(word) lines_bcd#39 )
  (byte) level_bcd#18 ← phi( play_update_score::@2/(byte) level_bcd#9 )
  (byte) current_movedown_slow#22 ← phi( play_update_score::@2/(byte) current_movedown_slow#11 )
  (byte) level#18 ← phi( play_update_score::@2/(byte) level#8 )
  (byte) level#5 ← (byte) level#18
  (byte) current_movedown_slow#7 ← (byte) current_movedown_slow#22
  (byte) level_bcd#5 ← (byte) level_bcd#18
  to:play_update_score::@return
play_update_score::@return: scope:[play_update_score]  from play_update_score play_update_score::@1 play_update_score::@3
  (byte) level_bcd#19 ← phi( play_update_score/(byte) level_bcd#34 play_update_score::@1/(byte) level_bcd#35 play_update_score::@3/(byte) level_bcd#5 )
  (byte) current_movedown_slow#23 ← phi( play_update_score/(byte) current_movedown_slow#40 play_update_score::@1/(byte) current_movedown_slow#41 play_update_score::@3/(byte) current_movedown_slow#7 )
  (byte) level#19 ← phi( play_update_score/(byte) level#36 play_update_score::@1/(byte) level#37 play_update_score::@3/(byte) level#5 )
  (word) lines_bcd#17 ← phi( play_update_score/(word) lines_bcd#28 play_update_score::@1/(word) lines_bcd#5 play_update_score::@3/(word) lines_bcd#29 )
  (word) lines_bcd#6 ← (word) lines_bcd#17
  (byte) level#6 ← (byte) level#19
  (byte) current_movedown_slow#8 ← (byte) current_movedown_slow#23
  (byte) level_bcd#6 ← (byte) level_bcd#19
  return 
  to:@return

(void()) play_increase_level()
play_increase_level: scope:[play_increase_level]  from play_update_score::@2
  (byte) level_bcd#48 ← phi( play_update_score::@2/(byte) level_bcd#33 )
  (byte) level#20 ← phi( play_update_score::@2/(byte) level#35 )
  (byte) level#7 ← ++ (byte) level#20
  (bool~) play_increase_level::$0 ← (byte) level#7 > (number) $1d
  if((bool~) play_increase_level::$0) goto play_increase_level::@1
  to:play_increase_level::@4
play_increase_level::@1: scope:[play_increase_level]  from play_increase_level
  (byte) level#87 ← phi( play_increase_level/(byte) level#7 )
  (byte) level_bcd#36 ← phi( play_increase_level/(byte) level_bcd#48 )
  (byte) current_movedown_slow#9 ← (number) 1
  to:play_increase_level::@2
play_increase_level::@4: scope:[play_increase_level]  from play_increase_level
  (byte) level_bcd#37 ← phi( play_increase_level/(byte) level_bcd#48 )
  (byte) level#21 ← phi( play_increase_level/(byte) level#7 )
  (byte) current_movedown_slow#10 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS + (byte) level#21)
  to:play_increase_level::@2
play_increase_level::@2: scope:[play_increase_level]  from play_increase_level::@1 play_increase_level::@4
  (byte) current_movedown_slow#72 ← phi( play_increase_level::@1/(byte) current_movedown_slow#9 play_increase_level::@4/(byte) current_movedown_slow#10 )
  (byte) level#77 ← phi( play_increase_level::@1/(byte) level#87 play_increase_level::@4/(byte) level#21 )
  (byte) level_bcd#20 ← phi( play_increase_level::@1/(byte) level_bcd#36 play_increase_level::@4/(byte) level_bcd#37 )
  (byte) level_bcd#7 ← ++ (byte) level_bcd#20
  (number~) play_increase_level::$1 ← (byte) level_bcd#7 & (number) $f
  (bool~) play_increase_level::$2 ← (number~) play_increase_level::$1 == (number) $a
  (bool~) play_increase_level::$3 ← ! (bool~) play_increase_level::$2
  if((bool~) play_increase_level::$3) goto play_increase_level::@3
  to:play_increase_level::@5
play_increase_level::@3: scope:[play_increase_level]  from play_increase_level::@2 play_increase_level::@5
  (byte) level_bcd#62 ← phi( play_increase_level::@2/(byte) level_bcd#7 play_increase_level::@5/(byte) level_bcd#8 )
  (byte) current_movedown_slow#65 ← phi( play_increase_level::@2/(byte) current_movedown_slow#72 play_increase_level::@5/(byte) current_movedown_slow#73 )
  (byte) level#65 ← phi( play_increase_level::@2/(byte) level#77 play_increase_level::@5/(byte) level#78 )
  asm { sed  }
  (byte) play_increase_level::b#0 ← (byte) 0
  to:play_increase_level::@6
play_increase_level::@5: scope:[play_increase_level]  from play_increase_level::@2
  (byte) current_movedown_slow#73 ← phi( play_increase_level::@2/(byte) current_movedown_slow#72 )
  (byte) level#78 ← phi( play_increase_level::@2/(byte) level#77 )
  (byte) level_bcd#21 ← phi( play_increase_level::@2/(byte) level_bcd#7 )
  (byte) level_bcd#8 ← (byte) level_bcd#21 + (number) 6
  to:play_increase_level::@3
play_increase_level::@6: scope:[play_increase_level]  from play_increase_level::@3 play_increase_level::@6
  (byte) level_bcd#49 ← phi( play_increase_level::@3/(byte) level_bcd#62 play_increase_level::@6/(byte) level_bcd#49 )
  (byte) current_movedown_slow#53 ← phi( play_increase_level::@3/(byte) current_movedown_slow#65 play_increase_level::@6/(byte) current_movedown_slow#53 )
  (byte) level#50 ← phi( play_increase_level::@3/(byte) level#65 play_increase_level::@6/(byte) level#50 )
  (byte) play_increase_level::b#2 ← phi( play_increase_level::@3/(byte) play_increase_level::b#0 play_increase_level::@6/(byte) play_increase_level::b#1 )
  (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 * (const byte) SIZEOF_DWORD
  *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) ← *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) + *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_increase_level::$5)
  (byte) play_increase_level::b#1 ← (byte) play_increase_level::b#2 + rangenext(0,4)
  (bool~) play_increase_level::$4 ← (byte) play_increase_level::b#1 != rangelast(0,4)
  if((bool~) play_increase_level::$4) goto play_increase_level::@6
  to:play_increase_level::@7
play_increase_level::@7: scope:[play_increase_level]  from play_increase_level::@6
  (byte) level_bcd#38 ← phi( play_increase_level::@6/(byte) level_bcd#49 )
  (byte) current_movedown_slow#42 ← phi( play_increase_level::@6/(byte) current_movedown_slow#53 )
  (byte) level#38 ← phi( play_increase_level::@6/(byte) level#50 )
  asm { cld  }
  to:play_increase_level::@return
play_increase_level::@return: scope:[play_increase_level]  from play_increase_level::@7
  (byte) level_bcd#22 ← phi( play_increase_level::@7/(byte) level_bcd#38 )
  (byte) current_movedown_slow#24 ← phi( play_increase_level::@7/(byte) current_movedown_slow#42 )
  (byte) level#22 ← phi( play_increase_level::@7/(byte) level#38 )
  (byte) level#8 ← (byte) level#22
  (byte) current_movedown_slow#11 ← (byte) current_movedown_slow#24
  (byte) level_bcd#9 ← (byte) level_bcd#22
  return 
  to:@return

(void()) main()
main: scope:[main]  from @6
  (byte) level_bcd#100 ← phi( @6/(byte) level_bcd#41 )
  (word) lines_bcd#87 ← phi( @6/(word) lines_bcd#32 )
  (byte) current_movedown_counter#58 ← phi( @6/(byte) current_movedown_counter#26 )
  (byte) keyboard_modifiers#60 ← phi( @6/(byte) keyboard_modifiers#24 )
  (byte) keyboard_events_size#78 ← phi( @6/(byte) keyboard_events_size#28 )
  (byte) level#103 ← phi( @6/(byte) level#41 )
  (byte) game_over#84 ← phi( @6/(byte) game_over#34 )
  (byte) current_ypos#97 ← phi( @6/(byte) current_ypos#49 )
  (byte) current_xpos#118 ← phi( @6/(byte) current_xpos#58 )
  (byte*) current_piece_gfx#111 ← phi( @6/(byte*) current_piece_gfx#45 )
  (byte) current_orientation#94 ← phi( @6/(byte) current_orientation#49 )
  (byte) current_piece_char#99 ← phi( @6/(byte) current_piece_char#36 )
  (byte*) current_piece#90 ← phi( @6/(byte*) current_piece#39 )
  (byte) next_piece_idx#76 ← phi( @6/(byte) next_piece_idx#35 )
  (byte) current_movedown_slow#83 ← phi( @6/(byte) current_movedown_slow#46 )
  (byte) render_screen_render#44 ← phi( @6/(byte) render_screen_render#29 )
  (byte) render_screen_show#36 ← phi( @6/(byte) render_screen_show#24 )
  to:main::sid_rnd_init1
main::sid_rnd_init1: scope:[main]  from main
  (byte) level_bcd#99 ← phi( main/(byte) level_bcd#100 )
  (word) lines_bcd#86 ← phi( main/(word) lines_bcd#87 )
  (byte) current_movedown_counter#57 ← phi( main/(byte) current_movedown_counter#58 )
  (byte) keyboard_modifiers#59 ← phi( main/(byte) keyboard_modifiers#60 )
  (byte) keyboard_events_size#77 ← phi( main/(byte) keyboard_events_size#78 )
  (byte) level#100 ← phi( main/(byte) level#103 )
  (byte) game_over#81 ← phi( main/(byte) game_over#84 )
  (byte) current_ypos#94 ← phi( main/(byte) current_ypos#97 )
  (byte) current_xpos#115 ← phi( main/(byte) current_xpos#118 )
  (byte*) current_piece_gfx#108 ← phi( main/(byte*) current_piece_gfx#111 )
  (byte) current_orientation#91 ← phi( main/(byte) current_orientation#94 )
  (byte) current_piece_char#95 ← phi( main/(byte) current_piece_char#99 )
  (byte*) current_piece#87 ← phi( main/(byte*) current_piece#90 )
  (byte) next_piece_idx#74 ← phi( main/(byte) next_piece_idx#76 )
  (byte) current_movedown_slow#79 ← phi( main/(byte) current_movedown_slow#83 )
  (byte) render_screen_render#35 ← phi( main/(byte) render_screen_render#44 )
  (byte) render_screen_show#27 ← phi( main/(byte) render_screen_show#36 )
  *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (number) $ffff
  *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE
  to:main::@9
main::@9: scope:[main]  from main::sid_rnd_init1
  (byte) level_bcd#98 ← phi( main::sid_rnd_init1/(byte) level_bcd#99 )
  (word) lines_bcd#85 ← phi( main::sid_rnd_init1/(word) lines_bcd#86 )
  (byte) current_movedown_counter#56 ← phi( main::sid_rnd_init1/(byte) current_movedown_counter#57 )
  (byte) keyboard_modifiers#58 ← phi( main::sid_rnd_init1/(byte) keyboard_modifiers#59 )
  (byte) keyboard_events_size#76 ← phi( main::sid_rnd_init1/(byte) keyboard_events_size#77 )
  (byte) level#95 ← phi( main::sid_rnd_init1/(byte) level#100 )
  (byte) game_over#76 ← phi( main::sid_rnd_init1/(byte) game_over#81 )
  (byte) current_ypos#90 ← phi( main::sid_rnd_init1/(byte) current_ypos#94 )
  (byte) current_xpos#111 ← phi( main::sid_rnd_init1/(byte) current_xpos#115 )
  (byte*) current_piece_gfx#101 ← phi( main::sid_rnd_init1/(byte*) current_piece_gfx#108 )
  (byte) current_orientation#88 ← phi( main::sid_rnd_init1/(byte) current_orientation#91 )
  (byte) current_piece_char#89 ← phi( main::sid_rnd_init1/(byte) current_piece_char#95 )
  (byte*) current_piece#82 ← phi( main::sid_rnd_init1/(byte*) current_piece#87 )
  (byte) next_piece_idx#69 ← phi( main::sid_rnd_init1/(byte) next_piece_idx#74 )
  (byte) current_movedown_slow#74 ← phi( main::sid_rnd_init1/(byte) current_movedown_slow#79 )
  (byte) render_screen_render#27 ← phi( main::sid_rnd_init1/(byte) render_screen_render#35 )
  (byte) render_screen_show#22 ← phi( main::sid_rnd_init1/(byte) render_screen_show#27 )
  asm { sei  }
  call render_init 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (byte) level_bcd#97 ← phi( main::@9/(byte) level_bcd#98 )
  (word) lines_bcd#84 ← phi( main::@9/(word) lines_bcd#85 )
  (byte) current_movedown_counter#55 ← phi( main::@9/(byte) current_movedown_counter#56 )
  (byte) keyboard_modifiers#57 ← phi( main::@9/(byte) keyboard_modifiers#58 )
  (byte) keyboard_events_size#75 ← phi( main::@9/(byte) keyboard_events_size#76 )
  (byte) level#88 ← phi( main::@9/(byte) level#95 )
  (byte) game_over#67 ← phi( main::@9/(byte) game_over#76 )
  (byte) current_ypos#82 ← phi( main::@9/(byte) current_ypos#90 )
  (byte) current_xpos#102 ← phi( main::@9/(byte) current_xpos#111 )
  (byte*) current_piece_gfx#94 ← phi( main::@9/(byte*) current_piece_gfx#101 )
  (byte) current_orientation#80 ← phi( main::@9/(byte) current_orientation#88 )
  (byte) current_piece_char#79 ← phi( main::@9/(byte) current_piece_char#89 )
  (byte*) current_piece#75 ← phi( main::@9/(byte*) current_piece#82 )
  (byte) next_piece_idx#62 ← phi( main::@9/(byte) next_piece_idx#69 )
  (byte) current_movedown_slow#66 ← phi( main::@9/(byte) current_movedown_slow#74 )
  (byte) render_screen_render#16 ← phi( main::@9/(byte) render_screen_render#2 )
  (byte) render_screen_show#14 ← phi( main::@9/(byte) render_screen_show#2 )
  (byte) render_screen_show#5 ← (byte) render_screen_show#14
  (byte) render_screen_render#5 ← (byte) render_screen_render#16
  call sprites_init 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte) level_bcd#96 ← phi( main::@10/(byte) level_bcd#97 )
  (word) lines_bcd#83 ← phi( main::@10/(word) lines_bcd#84 )
  (byte) current_movedown_counter#54 ← phi( main::@10/(byte) current_movedown_counter#55 )
  (byte) keyboard_modifiers#56 ← phi( main::@10/(byte) keyboard_modifiers#57 )
  (byte) keyboard_events_size#74 ← phi( main::@10/(byte) keyboard_events_size#75 )
  (byte) render_screen_show#59 ← phi( main::@10/(byte) render_screen_show#5 )
  (byte) render_screen_render#59 ← phi( main::@10/(byte) render_screen_render#5 )
  (byte) level#79 ← phi( main::@10/(byte) level#88 )
  (byte) game_over#54 ← phi( main::@10/(byte) game_over#67 )
  (byte) current_ypos#72 ← phi( main::@10/(byte) current_ypos#82 )
  (byte) current_xpos#90 ← phi( main::@10/(byte) current_xpos#102 )
  (byte*) current_piece_gfx#76 ← phi( main::@10/(byte*) current_piece_gfx#94 )
  (byte) current_orientation#70 ← phi( main::@10/(byte) current_orientation#80 )
  (byte) current_piece_char#63 ← phi( main::@10/(byte) current_piece_char#79 )
  (byte*) current_piece#63 ← phi( main::@10/(byte*) current_piece#75 )
  (byte) next_piece_idx#53 ← phi( main::@10/(byte) next_piece_idx#62 )
  (byte) current_movedown_slow#54 ← phi( main::@10/(byte) current_movedown_slow#66 )
  call sprites_irq_init 
  to:main::@12
main::@12: scope:[main]  from main::@11
  (byte) level_bcd#95 ← phi( main::@11/(byte) level_bcd#96 )
  (word) lines_bcd#82 ← phi( main::@11/(word) lines_bcd#83 )
  (byte) current_movedown_counter#53 ← phi( main::@11/(byte) current_movedown_counter#54 )
  (byte) keyboard_modifiers#55 ← phi( main::@11/(byte) keyboard_modifiers#56 )
  (byte) keyboard_events_size#73 ← phi( main::@11/(byte) keyboard_events_size#74 )
  (byte) render_screen_show#58 ← phi( main::@11/(byte) render_screen_show#59 )
  (byte) render_screen_render#56 ← phi( main::@11/(byte) render_screen_render#59 )
  (byte) level#59 ← phi( main::@11/(byte) level#79 )
  (byte) game_over#40 ← phi( main::@11/(byte) game_over#54 )
  (byte) current_ypos#58 ← phi( main::@11/(byte) current_ypos#72 )
  (byte) current_xpos#70 ← phi( main::@11/(byte) current_xpos#90 )
  (byte*) current_piece_gfx#58 ← phi( main::@11/(byte*) current_piece_gfx#76 )
  (byte) current_orientation#57 ← phi( main::@11/(byte) current_orientation#70 )
  (byte) current_piece_char#46 ← phi( main::@11/(byte) current_piece_char#63 )
  (byte*) current_piece#49 ← phi( main::@11/(byte*) current_piece#63 )
  (byte) next_piece_idx#41 ← phi( main::@11/(byte) next_piece_idx#53 )
  (byte) current_movedown_slow#43 ← phi( main::@11/(byte) current_movedown_slow#54 )
  call play_init 
  to:main::@13
main::@13: scope:[main]  from main::@12
  (byte) level_bcd#93 ← phi( main::@12/(byte) level_bcd#95 )
  (byte) level#101 ← phi( main::@12/(byte) level#59 )
  (word) lines_bcd#80 ← phi( main::@12/(word) lines_bcd#82 )
  (byte) current_movedown_counter#51 ← phi( main::@12/(byte) current_movedown_counter#53 )
  (byte) keyboard_modifiers#52 ← phi( main::@12/(byte) keyboard_modifiers#55 )
  (byte) keyboard_events_size#69 ← phi( main::@12/(byte) keyboard_events_size#73 )
  (byte) render_screen_show#57 ← phi( main::@12/(byte) render_screen_show#58 )
  (byte) render_screen_render#51 ← phi( main::@12/(byte) render_screen_render#56 )
  (byte) game_over#30 ← phi( main::@12/(byte) game_over#40 )
  (byte) current_ypos#46 ← phi( main::@12/(byte) current_ypos#58 )
  (byte) current_xpos#55 ← phi( main::@12/(byte) current_xpos#70 )
  (byte*) current_piece_gfx#42 ← phi( main::@12/(byte*) current_piece_gfx#58 )
  (byte) current_orientation#46 ← phi( main::@12/(byte) current_orientation#57 )
  (byte) current_piece_char#33 ← phi( main::@12/(byte) current_piece_char#46 )
  (byte*) current_piece#36 ← phi( main::@12/(byte*) current_piece#49 )
  (byte) next_piece_idx#32 ← phi( main::@12/(byte) next_piece_idx#41 )
  (byte) current_movedown_slow#25 ← phi( main::@12/(byte) current_movedown_slow#2 )
  (byte) current_movedown_slow#12 ← (byte) current_movedown_slow#25
  call play_spawn_current 
  to:main::@14
main::@14: scope:[main]  from main::@13
  (byte) level_bcd#88 ← phi( main::@13/(byte) level_bcd#93 )
  (byte) level#96 ← phi( main::@13/(byte) level#101 )
  (word) lines_bcd#76 ← phi( main::@13/(word) lines_bcd#80 )
  (byte) current_movedown_counter#48 ← phi( main::@13/(byte) current_movedown_counter#51 )
  (byte) keyboard_modifiers#49 ← phi( main::@13/(byte) keyboard_modifiers#52 )
  (byte) keyboard_events_size#64 ← phi( main::@13/(byte) keyboard_events_size#69 )
  (byte) current_movedown_slow#84 ← phi( main::@13/(byte) current_movedown_slow#12 )
  (byte) render_screen_show#54 ← phi( main::@13/(byte) render_screen_show#57 )
  (byte) render_screen_render#45 ← phi( main::@13/(byte) render_screen_render#51 )
  (byte) next_piece_idx#19 ← phi( main::@13/(byte) next_piece_idx#6 )
  (byte) game_over#17 ← phi( main::@13/(byte) game_over#6 )
  (byte) current_ypos#25 ← phi( main::@13/(byte) current_ypos#7 )
  (byte) current_xpos#31 ← phi( main::@13/(byte) current_xpos#10 )
  (byte*) current_piece_gfx#24 ← phi( main::@13/(byte*) current_piece_gfx#9 )
  (byte) current_orientation#27 ← phi( main::@13/(byte) current_orientation#9 )
  (byte) current_piece_char#19 ← phi( main::@13/(byte) current_piece_char#6 )
  (byte*) current_piece#19 ← phi( main::@13/(byte*) current_piece#6 )
  (byte*) current_piece#7 ← (byte*) current_piece#19
  (byte) current_piece_char#7 ← (byte) current_piece_char#19
  (byte) current_orientation#10 ← (byte) current_orientation#27
  (byte*) current_piece_gfx#10 ← (byte*) current_piece_gfx#24
  (byte) current_xpos#11 ← (byte) current_xpos#31
  (byte) current_ypos#8 ← (byte) current_ypos#25
  (byte) game_over#7 ← (byte) game_over#17
  (byte) next_piece_idx#7 ← (byte) next_piece_idx#19
  call play_spawn_current 
  to:main::@15
main::@15: scope:[main]  from main::@14
  (byte) level_bcd#80 ← phi( main::@14/(byte) level_bcd#88 )
  (byte) level#89 ← phi( main::@14/(byte) level#96 )
  (word) lines_bcd#70 ← phi( main::@14/(word) lines_bcd#76 )
  (byte) current_movedown_counter#45 ← phi( main::@14/(byte) current_movedown_counter#48 )
  (byte) keyboard_modifiers#46 ← phi( main::@14/(byte) keyboard_modifiers#49 )
  (byte) keyboard_events_size#58 ← phi( main::@14/(byte) keyboard_events_size#64 )
  (byte) current_movedown_slow#80 ← phi( main::@14/(byte) current_movedown_slow#84 )
  (byte) render_screen_show#50 ← phi( main::@14/(byte) render_screen_show#54 )
  (byte) render_screen_render#30 ← phi( main::@14/(byte) render_screen_render#45 )
  (byte) next_piece_idx#20 ← phi( main::@14/(byte) next_piece_idx#6 )
  (byte) game_over#18 ← phi( main::@14/(byte) game_over#6 )
  (byte) current_ypos#26 ← phi( main::@14/(byte) current_ypos#7 )
  (byte) current_xpos#32 ← phi( main::@14/(byte) current_xpos#10 )
  (byte*) current_piece_gfx#25 ← phi( main::@14/(byte*) current_piece_gfx#9 )
  (byte) current_orientation#28 ← phi( main::@14/(byte) current_orientation#9 )
  (byte) current_piece_char#20 ← phi( main::@14/(byte) current_piece_char#6 )
  (byte*) current_piece#20 ← phi( main::@14/(byte*) current_piece#6 )
  (byte*) current_piece#8 ← (byte*) current_piece#20
  (byte) current_piece_char#8 ← (byte) current_piece_char#20
  (byte) current_orientation#11 ← (byte) current_orientation#28
  (byte*) current_piece_gfx#11 ← (byte*) current_piece_gfx#25
  (byte) current_xpos#12 ← (byte) current_xpos#32
  (byte) current_ypos#9 ← (byte) current_ypos#26
  (byte) game_over#8 ← (byte) game_over#18
  (byte) next_piece_idx#8 ← (byte) next_piece_idx#20
  call render_playfield 
  to:main::@16
main::@16: scope:[main]  from main::@15
  (byte) level_bcd#73 ← phi( main::@15/(byte) level_bcd#80 )
  (byte) level#80 ← phi( main::@15/(byte) level#89 )
  (word) lines_bcd#63 ← phi( main::@15/(word) lines_bcd#70 )
  (byte) current_movedown_counter#41 ← phi( main::@15/(byte) current_movedown_counter#45 )
  (byte) keyboard_modifiers#40 ← phi( main::@15/(byte) keyboard_modifiers#46 )
  (byte) keyboard_events_size#49 ← phi( main::@15/(byte) keyboard_events_size#58 )
  (byte) game_over#68 ← phi( main::@15/(byte) game_over#8 )
  (byte) current_orientation#81 ← phi( main::@15/(byte) current_orientation#11 )
  (byte) current_piece_char#80 ← phi( main::@15/(byte) current_piece_char#8 )
  (byte*) current_piece#76 ← phi( main::@15/(byte*) current_piece#8 )
  (byte) current_movedown_slow#75 ← phi( main::@15/(byte) current_movedown_slow#80 )
  (byte) render_screen_show#44 ← phi( main::@15/(byte) render_screen_show#50 )
  (byte) next_piece_idx#63 ← phi( main::@15/(byte) next_piece_idx#8 )
  (byte*) current_piece_gfx#81 ← phi( main::@15/(byte*) current_piece_gfx#11 )
  (byte) current_xpos#76 ← phi( main::@15/(byte) current_xpos#12 )
  (byte) render_screen_render#36 ← phi( main::@15/(byte) render_screen_render#30 )
  (byte) current_ypos#30 ← phi( main::@15/(byte) current_ypos#9 )
  call render_moving 
  to:main::@17
main::@17: scope:[main]  from main::@16
  (byte) level_bcd#63 ← phi( main::@16/(byte) level_bcd#73 )
  (byte) level#66 ← phi( main::@16/(byte) level#80 )
  (word) lines_bcd#52 ← phi( main::@16/(word) lines_bcd#63 )
  (byte) current_movedown_counter#37 ← phi( main::@16/(byte) current_movedown_counter#41 )
  (byte) keyboard_modifiers#34 ← phi( main::@16/(byte) keyboard_modifiers#40 )
  (byte) keyboard_events_size#41 ← phi( main::@16/(byte) keyboard_events_size#49 )
  (byte) game_over#55 ← phi( main::@16/(byte) game_over#68 )
  (byte) current_ypos#73 ← phi( main::@16/(byte) current_ypos#30 )
  (byte) current_xpos#91 ← phi( main::@16/(byte) current_xpos#76 )
  (byte*) current_piece_gfx#77 ← phi( main::@16/(byte*) current_piece_gfx#81 )
  (byte) current_orientation#71 ← phi( main::@16/(byte) current_orientation#81 )
  (byte) current_piece_char#64 ← phi( main::@16/(byte) current_piece_char#80 )
  (byte*) current_piece#64 ← phi( main::@16/(byte*) current_piece#76 )
  (byte) current_movedown_slow#67 ← phi( main::@16/(byte) current_movedown_slow#75 )
  (byte) render_screen_show#37 ← phi( main::@16/(byte) render_screen_show#44 )
  (byte) next_piece_idx#46 ← phi( main::@16/(byte) next_piece_idx#63 )
  (byte) render_screen_render#25 ← phi( main::@16/(byte) render_screen_render#36 )
  call render_next 
  to:main::@18
main::@18: scope:[main]  from main::@17
  (byte) level_bcd#50 ← phi( main::@17/(byte) level_bcd#63 )
  (byte) level#51 ← phi( main::@17/(byte) level#66 )
  (word) lines_bcd#40 ← phi( main::@17/(word) lines_bcd#52 )
  (byte) current_movedown_counter#30 ← phi( main::@17/(byte) current_movedown_counter#37 )
  (byte) keyboard_modifiers#28 ← phi( main::@17/(byte) keyboard_modifiers#34 )
  (byte) keyboard_events_size#32 ← phi( main::@17/(byte) keyboard_events_size#41 )
  (byte) next_piece_idx#42 ← phi( main::@17/(byte) next_piece_idx#46 )
  (byte) game_over#41 ← phi( main::@17/(byte) game_over#55 )
  (byte) current_ypos#59 ← phi( main::@17/(byte) current_ypos#73 )
  (byte) current_xpos#71 ← phi( main::@17/(byte) current_xpos#91 )
  (byte*) current_piece_gfx#59 ← phi( main::@17/(byte*) current_piece_gfx#77 )
  (byte) current_orientation#58 ← phi( main::@17/(byte) current_orientation#71 )
  (byte) current_piece_char#47 ← phi( main::@17/(byte) current_piece_char#64 )
  (byte*) current_piece#50 ← phi( main::@17/(byte*) current_piece#64 )
  (byte) current_movedown_slow#55 ← phi( main::@17/(byte) current_movedown_slow#67 )
  (byte) render_screen_render#37 ← phi( main::@17/(byte) render_screen_render#25 )
  (byte) render_screen_show#28 ← phi( main::@17/(byte) render_screen_show#37 )
  to:main::@1
main::@1: scope:[main]  from main::@18 main::@27 main::@7
  (byte) level_bcd#40 ← phi( main::@18/(byte) level_bcd#50 main::@27/(byte) level_bcd#51 main::@7/(byte) level_bcd#52 )
  (byte) level#40 ← phi( main::@18/(byte) level#51 main::@27/(byte) level#52 main::@7/(byte) level#53 )
  (word) lines_bcd#31 ← phi( main::@18/(word) lines_bcd#40 main::@27/(word) lines_bcd#41 main::@7/(word) lines_bcd#42 )
  (byte) current_movedown_counter#25 ← phi( main::@18/(byte) current_movedown_counter#30 main::@27/(byte) current_movedown_counter#31 main::@7/(byte) current_movedown_counter#32 )
  (byte) keyboard_modifiers#23 ← phi( main::@18/(byte) keyboard_modifiers#28 main::@27/(byte) keyboard_modifiers#29 main::@7/(byte) keyboard_modifiers#30 )
  (byte) keyboard_events_size#27 ← phi( main::@18/(byte) keyboard_events_size#32 main::@27/(byte) keyboard_events_size#33 main::@7/(byte) keyboard_events_size#34 )
  (byte) next_piece_idx#34 ← phi( main::@18/(byte) next_piece_idx#42 main::@27/(byte) next_piece_idx#43 main::@7/(byte) next_piece_idx#44 )
  (byte) game_over#33 ← phi( main::@18/(byte) game_over#41 main::@27/(byte) game_over#42 main::@7/(byte) game_over#43 )
  (byte) current_ypos#48 ← phi( main::@18/(byte) current_ypos#59 main::@27/(byte) current_ypos#60 main::@7/(byte) current_ypos#61 )
  (byte) current_xpos#57 ← phi( main::@18/(byte) current_xpos#71 main::@27/(byte) current_xpos#72 main::@7/(byte) current_xpos#73 )
  (byte*) current_piece_gfx#44 ← phi( main::@18/(byte*) current_piece_gfx#59 main::@27/(byte*) current_piece_gfx#60 main::@7/(byte*) current_piece_gfx#61 )
  (byte) current_orientation#48 ← phi( main::@18/(byte) current_orientation#58 main::@27/(byte) current_orientation#59 main::@7/(byte) current_orientation#60 )
  (byte) current_piece_char#35 ← phi( main::@18/(byte) current_piece_char#47 main::@27/(byte) current_piece_char#48 main::@7/(byte) current_piece_char#49 )
  (byte*) current_piece#38 ← phi( main::@18/(byte*) current_piece#50 main::@27/(byte*) current_piece#51 main::@7/(byte*) current_piece#52 )
  (byte) current_movedown_slow#45 ← phi( main::@18/(byte) current_movedown_slow#55 main::@27/(byte) current_movedown_slow#56 main::@7/(byte) current_movedown_slow#57 )
  (byte) render_screen_render#28 ← phi( main::@18/(byte) render_screen_render#37 main::@27/(byte) render_screen_render#6 main::@7/(byte) render_screen_render#38 )
  (byte) render_screen_show#23 ← phi( main::@18/(byte) render_screen_show#28 main::@27/(byte) render_screen_show#6 main::@7/(byte) render_screen_show#29 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1 main::@2
  (byte) render_screen_render#63 ← phi( main::@1/(byte) render_screen_render#28 main::@2/(byte) render_screen_render#63 )
  (byte) next_piece_idx#75 ← phi( main::@1/(byte) next_piece_idx#34 main::@2/(byte) next_piece_idx#75 )
  (byte) current_xpos#116 ← phi( main::@1/(byte) current_xpos#57 main::@2/(byte) current_xpos#116 )
  (byte*) current_piece_gfx#109 ← phi( main::@1/(byte*) current_piece_gfx#44 main::@2/(byte*) current_piece_gfx#109 )
  (byte) current_orientation#92 ← phi( main::@1/(byte) current_orientation#48 main::@2/(byte) current_orientation#92 )
  (byte) current_piece_char#96 ← phi( main::@1/(byte) current_piece_char#35 main::@2/(byte) current_piece_char#96 )
  (byte*) current_piece#88 ← phi( main::@1/(byte*) current_piece#38 main::@2/(byte*) current_piece#88 )
  (byte) level_bcd#89 ← phi( main::@1/(byte) level_bcd#40 main::@2/(byte) level_bcd#89 )
  (byte) current_movedown_slow#85 ← phi( main::@1/(byte) current_movedown_slow#45 main::@2/(byte) current_movedown_slow#85 )
  (byte) level#97 ← phi( main::@1/(byte) level#40 main::@2/(byte) level#97 )
  (word) lines_bcd#77 ← phi( main::@1/(word) lines_bcd#31 main::@2/(word) lines_bcd#77 )
  (byte) current_ypos#95 ← phi( main::@1/(byte) current_ypos#48 main::@2/(byte) current_ypos#95 )
  (byte) current_movedown_counter#49 ← phi( main::@1/(byte) current_movedown_counter#25 main::@2/(byte) current_movedown_counter#49 )
  (byte) game_over#69 ← phi( main::@1/(byte) game_over#33 main::@2/(byte) game_over#69 )
  (byte) keyboard_modifiers#35 ← phi( main::@1/(byte) keyboard_modifiers#23 main::@2/(byte) keyboard_modifiers#35 )
  (byte) keyboard_events_size#42 ← phi( main::@1/(byte) keyboard_events_size#27 main::@2/(byte) keyboard_events_size#42 )
  (byte) render_screen_show#30 ← phi( main::@1/(byte) render_screen_show#23 main::@2/(byte) render_screen_show#30 )
  (bool~) main::$10 ← *((const nomodify byte*) RASTER) != (number) $ff
  if((bool~) main::$10) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) render_screen_render#62 ← phi( main::@2/(byte) render_screen_render#63 )
  (byte) next_piece_idx#70 ← phi( main::@2/(byte) next_piece_idx#75 )
  (byte) current_xpos#112 ← phi( main::@2/(byte) current_xpos#116 )
  (byte*) current_piece_gfx#102 ← phi( main::@2/(byte*) current_piece_gfx#109 )
  (byte) current_orientation#89 ← phi( main::@2/(byte) current_orientation#92 )
  (byte) current_piece_char#90 ← phi( main::@2/(byte) current_piece_char#96 )
  (byte*) current_piece#83 ← phi( main::@2/(byte*) current_piece#88 )
  (byte) level_bcd#81 ← phi( main::@2/(byte) level_bcd#89 )
  (byte) current_movedown_slow#81 ← phi( main::@2/(byte) current_movedown_slow#85 )
  (byte) level#90 ← phi( main::@2/(byte) level#97 )
  (word) lines_bcd#71 ← phi( main::@2/(word) lines_bcd#77 )
  (byte) current_ypos#91 ← phi( main::@2/(byte) current_ypos#95 )
  (byte) current_movedown_counter#46 ← phi( main::@2/(byte) current_movedown_counter#49 )
  (byte) game_over#56 ← phi( main::@2/(byte) game_over#69 )
  (byte) keyboard_modifiers#31 ← phi( main::@2/(byte) keyboard_modifiers#35 )
  (byte) keyboard_events_size#35 ← phi( main::@2/(byte) keyboard_events_size#42 )
  (byte) render_screen_show#18 ← phi( main::@2/(byte) render_screen_show#30 )
  call render_show 
  to:main::@19
main::@19: scope:[main]  from main::@3
  (byte) render_screen_render#60 ← phi( main::@3/(byte) render_screen_render#62 )
  (byte) render_screen_show#55 ← phi( main::@3/(byte) render_screen_show#18 )
  (byte) next_piece_idx#64 ← phi( main::@3/(byte) next_piece_idx#70 )
  (byte) current_xpos#103 ← phi( main::@3/(byte) current_xpos#112 )
  (byte*) current_piece_gfx#95 ← phi( main::@3/(byte*) current_piece_gfx#102 )
  (byte) current_orientation#82 ← phi( main::@3/(byte) current_orientation#89 )
  (byte) current_piece_char#81 ← phi( main::@3/(byte) current_piece_char#90 )
  (byte*) current_piece#77 ← phi( main::@3/(byte*) current_piece#83 )
  (byte) level_bcd#74 ← phi( main::@3/(byte) level_bcd#81 )
  (byte) current_movedown_slow#76 ← phi( main::@3/(byte) current_movedown_slow#81 )
  (byte) level#81 ← phi( main::@3/(byte) level#90 )
  (word) lines_bcd#64 ← phi( main::@3/(word) lines_bcd#71 )
  (byte) current_ypos#83 ← phi( main::@3/(byte) current_ypos#91 )
  (byte) current_movedown_counter#42 ← phi( main::@3/(byte) current_movedown_counter#46 )
  (byte) game_over#44 ← phi( main::@3/(byte) game_over#56 )
  (byte) keyboard_modifiers#22 ← phi( main::@3/(byte) keyboard_modifiers#31 )
  (byte) keyboard_events_size#26 ← phi( main::@3/(byte) keyboard_events_size#35 )
  call keyboard_event_scan 
  to:main::@20
main::@20: scope:[main]  from main::@19
  (byte) render_screen_render#57 ← phi( main::@19/(byte) render_screen_render#60 )
  (byte) render_screen_show#51 ← phi( main::@19/(byte) render_screen_show#55 )
  (byte) next_piece_idx#54 ← phi( main::@19/(byte) next_piece_idx#64 )
  (byte) current_xpos#92 ← phi( main::@19/(byte) current_xpos#103 )
  (byte*) current_piece_gfx#78 ← phi( main::@19/(byte*) current_piece_gfx#95 )
  (byte) current_orientation#72 ← phi( main::@19/(byte) current_orientation#82 )
  (byte) current_piece_char#65 ← phi( main::@19/(byte) current_piece_char#81 )
  (byte*) current_piece#65 ← phi( main::@19/(byte*) current_piece#77 )
  (byte) level_bcd#64 ← phi( main::@19/(byte) level_bcd#74 )
  (byte) current_movedown_slow#68 ← phi( main::@19/(byte) current_movedown_slow#76 )
  (byte) level#67 ← phi( main::@19/(byte) level#81 )
  (word) lines_bcd#53 ← phi( main::@19/(word) lines_bcd#64 )
  (byte) current_ypos#74 ← phi( main::@19/(byte) current_ypos#83 )
  (byte) current_movedown_counter#38 ← phi( main::@19/(byte) current_movedown_counter#42 )
  (byte) game_over#31 ← phi( main::@19/(byte) game_over#44 )
  (byte) keyboard_modifiers#15 ← phi( main::@19/(byte) keyboard_modifiers#6 )
  (byte) keyboard_events_size#17 ← phi( main::@19/(byte) keyboard_events_size#3 )
  (byte) keyboard_events_size#6 ← (byte) keyboard_events_size#17
  (byte) keyboard_modifiers#7 ← (byte) keyboard_modifiers#15
  call keyboard_event_get 
  (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:main::@21
main::@21: scope:[main]  from main::@20
  (byte) keyboard_modifiers#42 ← phi( main::@20/(byte) keyboard_modifiers#7 )
  (byte) render_screen_render#53 ← phi( main::@20/(byte) render_screen_render#57 )
  (byte) render_screen_show#46 ← phi( main::@20/(byte) render_screen_show#51 )
  (byte) next_piece_idx#45 ← phi( main::@20/(byte) next_piece_idx#54 )
  (byte) current_xpos#74 ← phi( main::@20/(byte) current_xpos#92 )
  (byte*) current_piece_gfx#62 ← phi( main::@20/(byte*) current_piece_gfx#78 )
  (byte) current_orientation#61 ← phi( main::@20/(byte) current_orientation#72 )
  (byte) current_piece_char#50 ← phi( main::@20/(byte) current_piece_char#65 )
  (byte*) current_piece#53 ← phi( main::@20/(byte*) current_piece#65 )
  (byte) level_bcd#53 ← phi( main::@20/(byte) level_bcd#64 )
  (byte) current_movedown_slow#58 ← phi( main::@20/(byte) current_movedown_slow#68 )
  (byte) level#54 ← phi( main::@20/(byte) level#67 )
  (word) lines_bcd#43 ← phi( main::@20/(word) lines_bcd#53 )
  (byte) current_ypos#62 ← phi( main::@20/(byte) current_ypos#74 )
  (byte) current_movedown_counter#33 ← phi( main::@20/(byte) current_movedown_counter#38 )
  (byte) game_over#19 ← phi( main::@20/(byte) game_over#31 )
  (byte) keyboard_events_size#18 ← phi( main::@20/(byte) keyboard_events_size#5 )
  (byte) keyboard_event_get::return#5 ← phi( main::@20/(byte) keyboard_event_get::return#3 )
  (byte~) main::$13 ← (byte) keyboard_event_get::return#5
  (byte) keyboard_events_size#7 ← (byte) keyboard_events_size#18
  (byte) main::key_event#0 ← (byte~) main::$13
  (byte) main::render#0 ← (byte) 0
  (bool~) main::$14 ← (byte) game_over#19 == (number) 0
  if((bool~) main::$14) goto main::@4
  to:main::@5
main::@4: scope:[main]  from main::@21
  (byte) keyboard_modifiers#41 ← phi( main::@21/(byte) keyboard_modifiers#42 )
  (byte) keyboard_events_size#50 ← phi( main::@21/(byte) keyboard_events_size#7 )
  (byte) render_screen_render#52 ← phi( main::@21/(byte) render_screen_render#53 )
  (byte) render_screen_show#45 ← phi( main::@21/(byte) render_screen_show#46 )
  (byte) next_piece_idx#33 ← phi( main::@21/(byte) next_piece_idx#45 )
  (byte) game_over#32 ← phi( main::@21/(byte) game_over#19 )
  (byte) current_xpos#56 ← phi( main::@21/(byte) current_xpos#74 )
  (byte*) current_piece_gfx#43 ← phi( main::@21/(byte*) current_piece_gfx#62 )
  (byte) current_orientation#47 ← phi( main::@21/(byte) current_orientation#61 )
  (byte) current_piece_char#34 ← phi( main::@21/(byte) current_piece_char#50 )
  (byte*) current_piece#37 ← phi( main::@21/(byte*) current_piece#53 )
  (byte) level_bcd#39 ← phi( main::@21/(byte) level_bcd#53 )
  (byte) current_movedown_slow#44 ← phi( main::@21/(byte) current_movedown_slow#58 )
  (byte) level#39 ← phi( main::@21/(byte) level#54 )
  (word) lines_bcd#30 ← phi( main::@21/(word) lines_bcd#43 )
  (byte) current_ypos#47 ← phi( main::@21/(byte) current_ypos#62 )
  (byte) current_movedown_counter#24 ← phi( main::@21/(byte) current_movedown_counter#33 )
  (byte) main::key_event#1 ← phi( main::@21/(byte) main::key_event#0 )
  (byte) play_movement::key_event#0 ← (byte) main::key_event#1
  call play_movement 
  (byte) play_movement::return#3 ← (byte) play_movement::return#2
  to:main::@22
main::@22: scope:[main]  from main::@4
  (byte) keyboard_modifiers#36 ← phi( main::@4/(byte) keyboard_modifiers#41 )
  (byte) keyboard_events_size#43 ← phi( main::@4/(byte) keyboard_events_size#50 )
  (byte) render_screen_render#46 ← phi( main::@4/(byte) render_screen_render#52 )
  (byte) render_screen_show#38 ← phi( main::@4/(byte) render_screen_show#45 )
  (byte) next_piece_idx#21 ← phi( main::@4/(byte) next_piece_idx#2 )
  (byte) game_over#20 ← phi( main::@4/(byte) game_over#2 )
  (byte) current_xpos#33 ← phi( main::@4/(byte) current_xpos#3 )
  (byte*) current_piece_gfx#26 ← phi( main::@4/(byte*) current_piece_gfx#3 )
  (byte) current_orientation#29 ← phi( main::@4/(byte) current_orientation#3 )
  (byte) current_piece_char#21 ← phi( main::@4/(byte) current_piece_char#2 )
  (byte*) current_piece#21 ← phi( main::@4/(byte*) current_piece#2 )
  (byte) level_bcd#23 ← phi( main::@4/(byte) level_bcd#2 )
  (byte) current_movedown_slow#26 ← phi( main::@4/(byte) current_movedown_slow#4 )
  (byte) level#23 ← phi( main::@4/(byte) level#2 )
  (word) lines_bcd#18 ← phi( main::@4/(word) lines_bcd#2 )
  (byte) current_ypos#27 ← phi( main::@4/(byte) current_ypos#2 )
  (byte) current_movedown_counter#15 ← phi( main::@4/(byte) current_movedown_counter#2 )
  (byte) play_movement::return#5 ← phi( main::@4/(byte) play_movement::return#3 )
  (byte~) main::$16 ← (byte) play_movement::return#5
  (byte) current_movedown_counter#6 ← (byte) current_movedown_counter#15
  (byte) current_ypos#10 ← (byte) current_ypos#27
  (word) lines_bcd#7 ← (word) lines_bcd#18
  (byte) level#9 ← (byte) level#23
  (byte) current_movedown_slow#13 ← (byte) current_movedown_slow#26
  (byte) level_bcd#10 ← (byte) level_bcd#23
  (byte*) current_piece#9 ← (byte*) current_piece#21
  (byte) current_piece_char#9 ← (byte) current_piece_char#21
  (byte) current_orientation#12 ← (byte) current_orientation#29
  (byte*) current_piece_gfx#12 ← (byte*) current_piece_gfx#26
  (byte) current_xpos#13 ← (byte) current_xpos#33
  (byte) game_over#9 ← (byte) game_over#20
  (byte) next_piece_idx#9 ← (byte) next_piece_idx#21
  (byte) main::render#1 ← (byte~) main::$16
  to:main::@7
main::@5: scope:[main]  from main::@21 main::@6
  (byte) level_bcd#65 ← phi( main::@21/(byte) level_bcd#53 main::@6/(byte) level_bcd#75 )
  (byte) level#68 ← phi( main::@21/(byte) level#54 main::@6/(byte) level#82 )
  (word) lines_bcd#54 ← phi( main::@21/(word) lines_bcd#43 main::@6/(word) lines_bcd#65 )
  (byte) current_movedown_counter#39 ← phi( main::@21/(byte) current_movedown_counter#33 main::@6/(byte) current_movedown_counter#43 )
  (byte) keyboard_modifiers#37 ← phi( main::@21/(byte) keyboard_modifiers#42 main::@6/(byte) keyboard_modifiers#43 )
  (byte) keyboard_events_size#44 ← phi( main::@21/(byte) keyboard_events_size#7 main::@6/(byte) keyboard_events_size#51 )
  (byte) next_piece_idx#55 ← phi( main::@21/(byte) next_piece_idx#45 main::@6/(byte) next_piece_idx#65 )
  (byte) game_over#57 ← phi( main::@21/(byte) game_over#19 main::@6/(byte) game_over#70 )
  (byte) current_ypos#75 ← phi( main::@21/(byte) current_ypos#62 main::@6/(byte) current_ypos#84 )
  (byte) current_xpos#93 ← phi( main::@21/(byte) current_xpos#74 main::@6/(byte) current_xpos#104 )
  (byte*) current_piece_gfx#79 ← phi( main::@21/(byte*) current_piece_gfx#62 main::@6/(byte*) current_piece_gfx#96 )
  (byte) current_orientation#73 ← phi( main::@21/(byte) current_orientation#61 main::@6/(byte) current_orientation#83 )
  (byte) current_piece_char#66 ← phi( main::@21/(byte) current_piece_char#50 main::@6/(byte) current_piece_char#82 )
  (byte*) current_piece#66 ← phi( main::@21/(byte*) current_piece#53 main::@6/(byte*) current_piece#78 )
  (byte) current_movedown_slow#69 ← phi( main::@21/(byte) current_movedown_slow#58 main::@6/(byte) current_movedown_slow#77 )
  (byte) render_screen_render#47 ← phi( main::@21/(byte) render_screen_render#53 main::@6/(byte) render_screen_render#54 )
  (byte) render_screen_show#39 ← phi( main::@21/(byte) render_screen_show#46 main::@6/(byte) render_screen_show#47 )
  (byte) main::render#3 ← phi( main::@21/(byte) main::render#0 main::@6/(byte) main::render#4 )
  if(true) goto main::@6
  to:main::@7
main::@6: scope:[main]  from main::@5
  (byte) level_bcd#75 ← phi( main::@5/(byte) level_bcd#65 )
  (byte) level#82 ← phi( main::@5/(byte) level#68 )
  (word) lines_bcd#65 ← phi( main::@5/(word) lines_bcd#54 )
  (byte) current_movedown_counter#43 ← phi( main::@5/(byte) current_movedown_counter#39 )
  (byte) keyboard_modifiers#43 ← phi( main::@5/(byte) keyboard_modifiers#37 )
  (byte) keyboard_events_size#51 ← phi( main::@5/(byte) keyboard_events_size#44 )
  (byte) next_piece_idx#65 ← phi( main::@5/(byte) next_piece_idx#55 )
  (byte) game_over#70 ← phi( main::@5/(byte) game_over#57 )
  (byte) current_ypos#84 ← phi( main::@5/(byte) current_ypos#75 )
  (byte) current_xpos#104 ← phi( main::@5/(byte) current_xpos#93 )
  (byte*) current_piece_gfx#96 ← phi( main::@5/(byte*) current_piece_gfx#79 )
  (byte) current_orientation#83 ← phi( main::@5/(byte) current_orientation#73 )
  (byte) current_piece_char#82 ← phi( main::@5/(byte) current_piece_char#66 )
  (byte*) current_piece#78 ← phi( main::@5/(byte*) current_piece#66 )
  (byte) current_movedown_slow#77 ← phi( main::@5/(byte) current_movedown_slow#69 )
  (byte) render_screen_render#54 ← phi( main::@5/(byte) render_screen_render#47 )
  (byte) render_screen_show#47 ← phi( main::@5/(byte) render_screen_show#39 )
  (byte) main::render#4 ← phi( main::@5/(byte) main::render#3 )
  *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL)
  to:main::@5
main::@7: scope:[main]  from main::@22 main::@5
  (byte) level_bcd#52 ← phi( main::@22/(byte) level_bcd#10 main::@5/(byte) level_bcd#65 )
  (byte) level#53 ← phi( main::@22/(byte) level#9 main::@5/(byte) level#68 )
  (word) lines_bcd#42 ← phi( main::@22/(word) lines_bcd#7 main::@5/(word) lines_bcd#54 )
  (byte) current_movedown_counter#32 ← phi( main::@22/(byte) current_movedown_counter#6 main::@5/(byte) current_movedown_counter#39 )
  (byte) keyboard_modifiers#30 ← phi( main::@22/(byte) keyboard_modifiers#36 main::@5/(byte) keyboard_modifiers#37 )
  (byte) keyboard_events_size#34 ← phi( main::@22/(byte) keyboard_events_size#43 main::@5/(byte) keyboard_events_size#44 )
  (byte) next_piece_idx#44 ← phi( main::@22/(byte) next_piece_idx#9 main::@5/(byte) next_piece_idx#55 )
  (byte) game_over#43 ← phi( main::@22/(byte) game_over#9 main::@5/(byte) game_over#57 )
  (byte) current_ypos#61 ← phi( main::@22/(byte) current_ypos#10 main::@5/(byte) current_ypos#75 )
  (byte) current_xpos#73 ← phi( main::@22/(byte) current_xpos#13 main::@5/(byte) current_xpos#93 )
  (byte*) current_piece_gfx#61 ← phi( main::@22/(byte*) current_piece_gfx#12 main::@5/(byte*) current_piece_gfx#79 )
  (byte) current_orientation#60 ← phi( main::@22/(byte) current_orientation#12 main::@5/(byte) current_orientation#73 )
  (byte) current_piece_char#49 ← phi( main::@22/(byte) current_piece_char#9 main::@5/(byte) current_piece_char#66 )
  (byte*) current_piece#52 ← phi( main::@22/(byte*) current_piece#9 main::@5/(byte*) current_piece#66 )
  (byte) current_movedown_slow#57 ← phi( main::@22/(byte) current_movedown_slow#13 main::@5/(byte) current_movedown_slow#69 )
  (byte) render_screen_render#38 ← phi( main::@22/(byte) render_screen_render#46 main::@5/(byte) render_screen_render#47 )
  (byte) render_screen_show#29 ← phi( main::@22/(byte) render_screen_show#38 main::@5/(byte) render_screen_show#39 )
  (byte) main::render#2 ← phi( main::@22/(byte) main::render#1 main::@5/(byte) main::render#3 )
  (bool~) main::$17 ← (byte) main::render#2 != (number) 0
  (bool~) main::$18 ← ! (bool~) main::$17
  if((bool~) main::$18) goto main::@1
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte) level_bcd#94 ← phi( main::@7/(byte) level_bcd#52 )
  (byte) level#102 ← phi( main::@7/(byte) level#53 )
  (word) lines_bcd#81 ← phi( main::@7/(word) lines_bcd#42 )
  (byte) current_movedown_counter#52 ← phi( main::@7/(byte) current_movedown_counter#32 )
  (byte) keyboard_modifiers#53 ← phi( main::@7/(byte) keyboard_modifiers#30 )
  (byte) keyboard_events_size#70 ← phi( main::@7/(byte) keyboard_events_size#34 )
  (byte) game_over#85 ← phi( main::@7/(byte) game_over#43 )
  (byte) current_orientation#95 ← phi( main::@7/(byte) current_orientation#60 )
  (byte*) current_piece#91 ← phi( main::@7/(byte*) current_piece#52 )
  (byte) current_movedown_slow#87 ← phi( main::@7/(byte) current_movedown_slow#57 )
  (byte) current_piece_char#97 ← phi( main::@7/(byte) current_piece_char#49 )
  (byte) render_screen_show#52 ← phi( main::@7/(byte) render_screen_show#29 )
  (byte) next_piece_idx#71 ← phi( main::@7/(byte) next_piece_idx#44 )
  (byte*) current_piece_gfx#103 ← phi( main::@7/(byte*) current_piece_gfx#61 )
  (byte) current_xpos#105 ← phi( main::@7/(byte) current_xpos#73 )
  (byte) current_ypos#63 ← phi( main::@7/(byte) current_ypos#61 )
  (byte) render_screen_render#31 ← phi( main::@7/(byte) render_screen_render#38 )
  call render_playfield 
  to:main::@23
main::@23: scope:[main]  from main::@8
  (byte) level_bcd#90 ← phi( main::@8/(byte) level_bcd#94 )
  (byte) level#98 ← phi( main::@8/(byte) level#102 )
  (word) lines_bcd#78 ← phi( main::@8/(word) lines_bcd#81 )
  (byte) current_movedown_counter#50 ← phi( main::@8/(byte) current_movedown_counter#52 )
  (byte) keyboard_modifiers#50 ← phi( main::@8/(byte) keyboard_modifiers#53 )
  (byte) keyboard_events_size#65 ← phi( main::@8/(byte) keyboard_events_size#70 )
  (byte) game_over#82 ← phi( main::@8/(byte) game_over#85 )
  (byte) current_orientation#93 ← phi( main::@8/(byte) current_orientation#95 )
  (byte*) current_piece#89 ← phi( main::@8/(byte*) current_piece#91 )
  (byte) current_movedown_slow#86 ← phi( main::@8/(byte) current_movedown_slow#87 )
  (byte) current_piece_char#84 ← phi( main::@8/(byte) current_piece_char#97 )
  (byte) render_screen_show#48 ← phi( main::@8/(byte) render_screen_show#52 )
  (byte) next_piece_idx#66 ← phi( main::@8/(byte) next_piece_idx#71 )
  (byte*) current_piece_gfx#82 ← phi( main::@8/(byte*) current_piece_gfx#103 )
  (byte) current_xpos#77 ← phi( main::@8/(byte) current_xpos#105 )
  (byte) render_screen_render#39 ← phi( main::@8/(byte) render_screen_render#31 )
  (byte) current_ypos#31 ← phi( main::@8/(byte) current_ypos#63 )
  call render_moving 
  to:main::@24
main::@24: scope:[main]  from main::@23
  (byte) level_bcd#82 ← phi( main::@23/(byte) level_bcd#90 )
  (byte) level#91 ← phi( main::@23/(byte) level#98 )
  (word) lines_bcd#72 ← phi( main::@23/(word) lines_bcd#78 )
  (byte) current_movedown_counter#47 ← phi( main::@23/(byte) current_movedown_counter#50 )
  (byte) keyboard_modifiers#47 ← phi( main::@23/(byte) keyboard_modifiers#50 )
  (byte) keyboard_events_size#59 ← phi( main::@23/(byte) keyboard_events_size#65 )
  (byte) game_over#77 ← phi( main::@23/(byte) game_over#82 )
  (byte) current_ypos#92 ← phi( main::@23/(byte) current_ypos#31 )
  (byte) current_xpos#113 ← phi( main::@23/(byte) current_xpos#77 )
  (byte*) current_piece_gfx#104 ← phi( main::@23/(byte*) current_piece_gfx#82 )
  (byte) current_orientation#90 ← phi( main::@23/(byte) current_orientation#93 )
  (byte) current_piece_char#91 ← phi( main::@23/(byte) current_piece_char#84 )
  (byte*) current_piece#84 ← phi( main::@23/(byte*) current_piece#89 )
  (byte) current_movedown_slow#82 ← phi( main::@23/(byte) current_movedown_slow#86 )
  (byte) render_screen_show#40 ← phi( main::@23/(byte) render_screen_show#48 )
  (byte) next_piece_idx#47 ← phi( main::@23/(byte) next_piece_idx#66 )
  (byte) render_screen_render#26 ← phi( main::@23/(byte) render_screen_render#39 )
  call render_next 
  to:main::@25
main::@25: scope:[main]  from main::@24
  (byte) level_bcd#76 ← phi( main::@24/(byte) level_bcd#82 )
  (byte) level#83 ← phi( main::@24/(byte) level#91 )
  (word) lines_bcd#66 ← phi( main::@24/(word) lines_bcd#72 )
  (byte) current_movedown_counter#44 ← phi( main::@24/(byte) current_movedown_counter#47 )
  (byte) keyboard_modifiers#44 ← phi( main::@24/(byte) keyboard_modifiers#47 )
  (byte) keyboard_events_size#52 ← phi( main::@24/(byte) keyboard_events_size#59 )
  (byte) next_piece_idx#67 ← phi( main::@24/(byte) next_piece_idx#47 )
  (byte) game_over#71 ← phi( main::@24/(byte) game_over#77 )
  (byte) current_ypos#85 ← phi( main::@24/(byte) current_ypos#92 )
  (byte) current_xpos#106 ← phi( main::@24/(byte) current_xpos#113 )
  (byte*) current_piece_gfx#97 ← phi( main::@24/(byte*) current_piece_gfx#104 )
  (byte) current_orientation#84 ← phi( main::@24/(byte) current_orientation#90 )
  (byte) current_piece_char#83 ← phi( main::@24/(byte) current_piece_char#91 )
  (byte*) current_piece#79 ← phi( main::@24/(byte*) current_piece#84 )
  (byte) current_movedown_slow#78 ← phi( main::@24/(byte) current_movedown_slow#82 )
  (byte) render_screen_show#31 ← phi( main::@24/(byte) render_screen_show#40 )
  (byte) render_screen_render#21 ← phi( main::@24/(byte) render_screen_render#26 )
  call render_score 
  to:main::@26
main::@26: scope:[main]  from main::@25
  (byte) level_bcd#66 ← phi( main::@25/(byte) level_bcd#76 )
  (byte) level#69 ← phi( main::@25/(byte) level#83 )
  (word) lines_bcd#55 ← phi( main::@25/(word) lines_bcd#66 )
  (byte) current_movedown_counter#40 ← phi( main::@25/(byte) current_movedown_counter#44 )
  (byte) keyboard_modifiers#38 ← phi( main::@25/(byte) keyboard_modifiers#44 )
  (byte) keyboard_events_size#45 ← phi( main::@25/(byte) keyboard_events_size#52 )
  (byte) next_piece_idx#56 ← phi( main::@25/(byte) next_piece_idx#67 )
  (byte) game_over#58 ← phi( main::@25/(byte) game_over#71 )
  (byte) current_ypos#76 ← phi( main::@25/(byte) current_ypos#85 )
  (byte) current_xpos#94 ← phi( main::@25/(byte) current_xpos#106 )
  (byte*) current_piece_gfx#80 ← phi( main::@25/(byte*) current_piece_gfx#97 )
  (byte) current_orientation#74 ← phi( main::@25/(byte) current_orientation#84 )
  (byte) current_piece_char#67 ← phi( main::@25/(byte) current_piece_char#83 )
  (byte*) current_piece#67 ← phi( main::@25/(byte*) current_piece#79 )
  (byte) current_movedown_slow#70 ← phi( main::@25/(byte) current_movedown_slow#78 )
  (byte) render_screen_show#21 ← phi( main::@25/(byte) render_screen_show#31 )
  (byte) render_screen_render#20 ← phi( main::@25/(byte) render_screen_render#21 )
  call render_screen_swap 
  to:main::@27
main::@27: scope:[main]  from main::@26
  (byte) level_bcd#51 ← phi( main::@26/(byte) level_bcd#66 )
  (byte) level#52 ← phi( main::@26/(byte) level#69 )
  (word) lines_bcd#41 ← phi( main::@26/(word) lines_bcd#55 )
  (byte) current_movedown_counter#31 ← phi( main::@26/(byte) current_movedown_counter#40 )
  (byte) keyboard_modifiers#29 ← phi( main::@26/(byte) keyboard_modifiers#38 )
  (byte) keyboard_events_size#33 ← phi( main::@26/(byte) keyboard_events_size#45 )
  (byte) next_piece_idx#43 ← phi( main::@26/(byte) next_piece_idx#56 )
  (byte) game_over#42 ← phi( main::@26/(byte) game_over#58 )
  (byte) current_ypos#60 ← phi( main::@26/(byte) current_ypos#76 )
  (byte) current_xpos#72 ← phi( main::@26/(byte) current_xpos#94 )
  (byte*) current_piece_gfx#60 ← phi( main::@26/(byte*) current_piece_gfx#80 )
  (byte) current_orientation#59 ← phi( main::@26/(byte) current_orientation#74 )
  (byte) current_piece_char#48 ← phi( main::@26/(byte) current_piece_char#67 )
  (byte*) current_piece#51 ← phi( main::@26/(byte*) current_piece#67 )
  (byte) current_movedown_slow#56 ← phi( main::@26/(byte) current_movedown_slow#70 )
  (byte) render_screen_show#15 ← phi( main::@26/(byte) render_screen_show#4 )
  (byte) render_screen_render#17 ← phi( main::@26/(byte) render_screen_render#4 )
  (byte) render_screen_render#6 ← (byte) render_screen_render#17
  (byte) render_screen_show#6 ← (byte) render_screen_show#15
  to:main::@1
main::@return: scope:[main]  from main::@1
  (byte) level_bcd#24 ← phi( main::@1/(byte) level_bcd#40 )
  (byte) level#24 ← phi( main::@1/(byte) level#40 )
  (word) lines_bcd#19 ← phi( main::@1/(word) lines_bcd#31 )
  (byte) current_movedown_counter#16 ← phi( main::@1/(byte) current_movedown_counter#25 )
  (byte) keyboard_modifiers#16 ← phi( main::@1/(byte) keyboard_modifiers#23 )
  (byte) keyboard_events_size#19 ← phi( main::@1/(byte) keyboard_events_size#27 )
  (byte) next_piece_idx#22 ← phi( main::@1/(byte) next_piece_idx#34 )
  (byte) game_over#21 ← phi( main::@1/(byte) game_over#33 )
  (byte) current_ypos#28 ← phi( main::@1/(byte) current_ypos#48 )
  (byte) current_xpos#34 ← phi( main::@1/(byte) current_xpos#57 )
  (byte*) current_piece_gfx#27 ← phi( main::@1/(byte*) current_piece_gfx#44 )
  (byte) current_orientation#30 ← phi( main::@1/(byte) current_orientation#48 )
  (byte) current_piece_char#22 ← phi( main::@1/(byte) current_piece_char#35 )
  (byte*) current_piece#22 ← phi( main::@1/(byte*) current_piece#38 )
  (byte) current_movedown_slow#27 ← phi( main::@1/(byte) current_movedown_slow#45 )
  (byte) render_screen_render#18 ← phi( main::@1/(byte) render_screen_render#28 )
  (byte) render_screen_show#16 ← phi( main::@1/(byte) render_screen_show#23 )
  (byte) render_screen_show#7 ← (byte) render_screen_show#16
  (byte) render_screen_render#7 ← (byte) render_screen_render#18
  (byte) current_movedown_slow#14 ← (byte) current_movedown_slow#27
  (byte*) current_piece#10 ← (byte*) current_piece#22
  (byte) current_piece_char#10 ← (byte) current_piece_char#22
  (byte) current_orientation#13 ← (byte) current_orientation#30
  (byte*) current_piece_gfx#13 ← (byte*) current_piece_gfx#27
  (byte) current_xpos#14 ← (byte) current_xpos#34
  (byte) current_ypos#11 ← (byte) current_ypos#28
  (byte) game_over#10 ← (byte) game_over#21
  (byte) next_piece_idx#10 ← (byte) next_piece_idx#22
  (byte) keyboard_events_size#8 ← (byte) keyboard_events_size#19
  (byte) keyboard_modifiers#8 ← (byte) keyboard_modifiers#16
  (byte) current_movedown_counter#7 ← (byte) current_movedown_counter#16
  (word) lines_bcd#8 ← (word) lines_bcd#19
  (byte) level#10 ← (byte) level#24
  (byte) level_bcd#11 ← (byte) level_bcd#24
  return 
  to:@return
@6: scope:[]  from @5
  (byte) level_bcd#41 ← phi( @5/(byte) level_bcd#54 )
  (byte) level#41 ← phi( @5/(byte) level#55 )
  (word) lines_bcd#32 ← phi( @5/(word) lines_bcd#44 )
  (byte) current_movedown_counter#26 ← phi( @5/(byte) current_movedown_counter#0 )
  (byte) keyboard_modifiers#24 ← phi( @5/(byte) keyboard_modifiers#32 )
  (byte) keyboard_events_size#28 ← phi( @5/(byte) keyboard_events_size#36 )
  (byte) next_piece_idx#35 ← phi( @5/(byte) next_piece_idx#0 )
  (byte) game_over#34 ← phi( @5/(byte) game_over#45 )
  (byte) current_ypos#49 ← phi( @5/(byte) current_ypos#64 )
  (byte) current_xpos#58 ← phi( @5/(byte) current_xpos#75 )
  (byte*) current_piece_gfx#45 ← phi( @5/(byte*) current_piece_gfx#63 )
  (byte) current_orientation#49 ← phi( @5/(byte) current_orientation#0 )
  (byte) current_piece_char#36 ← phi( @5/(byte) current_piece_char#51 )
  (byte*) current_piece#39 ← phi( @5/(byte*) current_piece#0 )
  (byte) current_movedown_slow#46 ← phi( @5/(byte) current_movedown_slow#0 )
  (byte) render_screen_render#29 ← phi( @5/(byte) render_screen_render#40 )
  (byte) render_screen_show#24 ← phi( @5/(byte) render_screen_show#32 )
  call main 
  to:@8
@8: scope:[]  from @6
  (byte) level_bcd#25 ← phi( @6/(byte) level_bcd#11 )
  (byte) level#25 ← phi( @6/(byte) level#10 )
  (word) lines_bcd#20 ← phi( @6/(word) lines_bcd#8 )
  (byte) current_movedown_counter#17 ← phi( @6/(byte) current_movedown_counter#7 )
  (byte) keyboard_modifiers#17 ← phi( @6/(byte) keyboard_modifiers#8 )
  (byte) keyboard_events_size#20 ← phi( @6/(byte) keyboard_events_size#8 )
  (byte) next_piece_idx#23 ← phi( @6/(byte) next_piece_idx#10 )
  (byte) game_over#22 ← phi( @6/(byte) game_over#10 )
  (byte) current_ypos#29 ← phi( @6/(byte) current_ypos#11 )
  (byte) current_xpos#35 ← phi( @6/(byte) current_xpos#14 )
  (byte*) current_piece_gfx#28 ← phi( @6/(byte*) current_piece_gfx#13 )
  (byte) current_orientation#31 ← phi( @6/(byte) current_orientation#13 )
  (byte) current_piece_char#23 ← phi( @6/(byte) current_piece_char#10 )
  (byte*) current_piece#23 ← phi( @6/(byte*) current_piece#10 )
  (byte) current_movedown_slow#28 ← phi( @6/(byte) current_movedown_slow#14 )
  (byte) render_screen_render#19 ← phi( @6/(byte) render_screen_render#7 )
  (byte) render_screen_show#17 ← phi( @6/(byte) render_screen_show#7 )
  (byte) render_screen_show#8 ← (byte) render_screen_show#17
  (byte) render_screen_render#8 ← (byte) render_screen_render#19
  (byte) current_movedown_slow#15 ← (byte) current_movedown_slow#28
  (byte*) current_piece#11 ← (byte*) current_piece#23
  (byte) current_piece_char#11 ← (byte) current_piece_char#23
  (byte) current_orientation#14 ← (byte) current_orientation#31
  (byte*) current_piece_gfx#14 ← (byte*) current_piece_gfx#28
  (byte) current_xpos#15 ← (byte) current_xpos#35
  (byte) current_ypos#12 ← (byte) current_ypos#29
  (byte) game_over#11 ← (byte) game_over#22
  (byte) next_piece_idx#11 ← (byte) next_piece_idx#23
  (byte) keyboard_events_size#9 ← (byte) keyboard_events_size#20
  (byte) keyboard_modifiers#9 ← (byte) keyboard_modifiers#17
  (byte) current_movedown_counter#8 ← (byte) current_movedown_counter#17
  (word) lines_bcd#9 ← (word) lines_bcd#20
  (byte) level#11 ← (byte) level#25
  (byte) level_bcd#12 ← (byte) level_bcd#25
  to:@end
@end: scope:[]  from @8

SYMBOL TABLE SSA
(byte~) $0
(number~) $1
(label) @1
(label) @2
(label) @3
(label) @4
(label) @5
(label) @6
(label) @7
(label) @8
(label) @begin
(label) @end
(const nomodify byte*) BGCOL1 = (byte*)(number) $d021
(const nomodify byte*) BGCOL2 = (byte*)(number) $d022
(const nomodify byte*) BGCOL3 = (byte*)(number) $d023
(const nomodify byte*) BGCOL4 = (byte*)(number) $d024
(const nomodify byte) BLACK = (byte) 0
(const nomodify byte) BLUE = (byte) 6
(const nomodify byte*) BORDERCOL = (byte*)(number) $d020
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*)(number) $dc00
(const nomodify byte*) CIA1_INTERRUPT = (byte*)(number) $dc0d
(const nomodify struct MOS6526_CIA*) CIA2 = (struct MOS6526_CIA*)(number) $dd00
(const nomodify byte) CIA_INTERRUPT_CLEAR = (byte) $7f
(const nomodify byte) COLLISION_BOTTOM = (byte) 2
(const nomodify byte) COLLISION_LEFT = (byte) 4
(const nomodify byte) COLLISION_NONE = (byte) 0
(const nomodify byte) COLLISION_PLAYFIELD = (byte) 1
(const nomodify byte) COLLISION_RIGHT = (byte) 8
(const nomodify byte*) COLS = (byte*)(number) $d800
(const nomodify byte) CYAN = (byte) 3
(const nomodify byte*) D011 = (byte*)(number) $d011
(const nomodify byte*) D018 = (byte*)(number) $d018
(const nomodify byte) DARK_GREY = (byte) $b
(const nomodify byte) GREEN = (byte) 5
(const nomodify byte) GREY = (byte) $c
(const nomodify void()**) HARDWARE_IRQ = (void()**)(number) $fffe
(const nomodify byte*) IRQ_ENABLE = (byte*)(number) $d01a
(const nomodify byte) IRQ_RASTER = (byte) 1
(const nomodify byte) IRQ_RASTER_FIRST = (byte)(const nomodify byte) SPRITES_FIRST_YPOS+(number) $13
(const nomodify byte*) IRQ_STATUS = (byte*)(number) $d019
(const nomodify byte) KEY_COMMA = (byte) $2f
(const nomodify byte) KEY_COMMODORE = (byte) $3d
(const nomodify byte) KEY_CTRL = (byte) $3a
(const nomodify byte) KEY_DOT = (byte) $2c
(const nomodify byte) KEY_LSHIFT = (byte) $f
(const nomodify byte) KEY_MODIFIER_COMMODORE = (byte) 8
(const nomodify byte) KEY_MODIFIER_CTRL = (byte) 4
(const nomodify byte) KEY_MODIFIER_LSHIFT = (byte) 1
(const nomodify byte) KEY_MODIFIER_RSHIFT = (byte) 2
(const nomodify byte) KEY_RSHIFT = (byte) $34
(const nomodify byte) KEY_SPACE = (byte) $3c
(const nomodify byte) KEY_X = (byte) $17
(const nomodify byte) KEY_Z = (byte) $c
(const nomodify byte) LIGHT_BLUE = (byte) $e
(const nomodify byte) LIGHT_GREEN = (byte) $d
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS[]  = { (byte) $30, (byte) $2b, (byte) $26, (byte) $21, (byte) $1c, (byte) $17, (byte) $12, (byte) $d, (byte) 8, (byte) 6, (byte) 5, (byte) 5, (byte) 5, (byte) 4, (byte) 4, (byte) 4, (byte) 3, (byte) 3, (byte) 3, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 1 }
(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = (byte) $d
(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A = (byte) 0
(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = (byte) 2
(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B = (byte) 1
(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = (byte) $12
(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = (byte) $e
(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC = (byte) $1b
(const nomodify byte) ORANGE = (byte) 8
(const word*) PIECES[]  = { (word)(const byte*) PIECE_T, (word)(const byte*) PIECE_S, (word)(const byte*) PIECE_Z, (word)(const byte*) PIECE_J, (word)(const byte*) PIECE_O, (word)(const byte*) PIECE_I, (word)(const byte*) PIECE_L }
(const byte*) PIECES_CHARS[]  = { (byte) $65, (byte) $66, (byte) $a6, (byte) $66, (byte) $65, (byte) $65, (byte) $a6 }
(const byte*) PIECES_COLORS_1[]  = { (const nomodify byte) BLUE, (const nomodify byte) GREEN, (const nomodify byte) PURPLE, (const nomodify byte) BLUE, (const nomodify byte) RED, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) RED, (const nomodify byte) BLUE, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) RED, (const nomodify byte) BLUE, (const nomodify byte) GREEN, (const nomodify byte) PURPLE, (const nomodify byte) BLUE, (const nomodify byte) RED, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) RED, (const nomodify byte) BLUE, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) RED, (const nomodify byte) BLUE, (const nomodify byte) GREEN, (const nomodify byte) PURPLE, (const nomodify byte) BLUE, (const nomodify byte) RED, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) RED, (const nomodify byte) BLUE, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) RED }
(const byte*) PIECES_COLORS_2[]  = { (const nomodify byte) CYAN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) PINK, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) DARK_GREY, (const nomodify byte) PURPLE, (const nomodify byte) RED, (const nomodify byte) ORANGE, (const nomodify byte) CYAN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) PINK, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) DARK_GREY, (const nomodify byte) PURPLE, (const nomodify byte) RED, (const nomodify byte) ORANGE, (const nomodify byte) CYAN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) PINK, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) DARK_GREY, (const nomodify byte) PURPLE, (const nomodify byte) RED, (const nomodify byte) ORANGE }
(const byte*) PIECES_NEXT_CHARS[]  = { (byte) $63, (byte) $64, (byte) $a4, (byte) $64, (byte) $63, (byte) $63, (byte) $a4 }
(const byte*) PIECES_START_X[]  = { (byte) 4, (byte) 4, (byte) 4, (byte) 4, (byte) 4, (byte) 4, (byte) 4 }
(const byte*) PIECES_START_Y[]  = { (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1 }
(const byte*) PIECE_I[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0 }
(const byte*) PIECE_J[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) PIECE_L[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) PIECE_O[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) PIECE_S[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) PIECE_T[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) PIECE_Z[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const nomodify byte) PINK = (byte) $a
(const nomodify byte*) PLAYFIELD_CHARSET = (byte*)(number) $2800
(const to_nomodify byte*) PLAYFIELD_COLORS_ORIGINAL[]  = kickasm {{ .import binary "playfield-screen.col"
 }}
(const nomodify byte) PLAYFIELD_COLS = (byte) $a
(const nomodify byte) PLAYFIELD_LINES = (byte) $16
(const nomodify byte*) PLAYFIELD_SCREEN_1 = (byte*)(number) $400
(const nomodify byte*) PLAYFIELD_SCREEN_2 = (byte*)(number) $2c00
(const to_nomodify byte*) PLAYFIELD_SCREEN_ORIGINAL[]  = kickasm {{ // Load chars for the screen
  .var screen = LoadBinary("playfield-screen.iscr")
   // Load extended colors for the screen
  .var extended = LoadBinary("playfield-extended.col")
  // screen.get(i)+1 because the charset is loaded into PLAYFIELD_CHARSET+8
  // extended.get(i)-1 because the extended colors are 1-based (1/2/3/4)
  // <<6 to move extended colors to the upper 2 bits
  .fill screen.getSize(), ( (screen.get(i)+1) | (extended.get(i)-1)<<6 )
 }}
(const nomodify byte*) PLAYFIELD_SPRITES = (byte*)(number) $3000
(const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1 = (const nomodify byte*) PLAYFIELD_SCREEN_1+(const nomodify word) SPRITE_PTRS
(const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2 = (const nomodify byte*) PLAYFIELD_SCREEN_2+(const nomodify word) SPRITE_PTRS
(const nomodify byte*) PROCPORT = (byte*)(number) 1
(const nomodify byte*) PROCPORT_DDR = (byte*)(number) 0
(const nomodify byte) PROCPORT_DDR_MEMORY_MASK = (byte) 7
(const nomodify byte) PROCPORT_RAM_IO = (byte) 5
(const nomodify byte) PURPLE = (byte) 4
(const nomodify byte*) RASTER = (byte*)(number) $d012
(const nomodify byte) RED = (byte) 2
(const to_nomodify dword*) SCORE_BASE_BCD[]  = { (dword) 0, (dword) $40, (dword) $100, (dword) $300, (dword) $1200 }
(const nomodify struct MOS6581_SID*) SID = (struct MOS6581_SID*)(number) $d400
(const nomodify byte) SID_CONTROL_NOISE = (byte) $80
(const byte) SIZEOF_DWORD = (byte) 4
(const byte) SIZEOF_POINTER = (byte) 2
(const byte) SIZEOF_WORD = (byte) 2
(const nomodify byte*) SPRITES_COLS = (byte*)(number) $d027
(const nomodify byte*) SPRITES_ENABLE = (byte*)(number) $d015
(const nomodify byte*) SPRITES_EXPAND_X = (byte*)(number) $d01d
(const nomodify byte*) SPRITES_EXPAND_Y = (byte*)(number) $d017
(const nomodify byte) SPRITES_FIRST_YPOS = (byte) $31
(const nomodify byte*) SPRITES_MC = (byte*)(number) $d01c
(const nomodify byte*) SPRITES_XPOS = (byte*)(number) $d000
(const nomodify byte*) SPRITES_YPOS = (byte*)(number) $d001
(const nomodify word) SPRITE_PTRS = (word) $3f8
(const nomodify byte*) VIC_CONTROL = (byte*)(number) $d011
(const nomodify byte) VIC_DEN = (byte) $10
(const nomodify byte) VIC_ECM = (byte) $40
(const nomodify byte) VIC_RSEL = (byte) 8
(byte) current_movedown_counter
(byte) current_movedown_counter#0
(byte) current_movedown_counter#1
(byte) current_movedown_counter#10
(byte) current_movedown_counter#11
(byte) current_movedown_counter#12
(byte) current_movedown_counter#13
(byte) current_movedown_counter#14
(byte) current_movedown_counter#15
(byte) current_movedown_counter#16
(byte) current_movedown_counter#17
(byte) current_movedown_counter#18
(byte) current_movedown_counter#19
(byte) current_movedown_counter#2
(byte) current_movedown_counter#20
(byte) current_movedown_counter#21
(byte) current_movedown_counter#22
(byte) current_movedown_counter#23
(byte) current_movedown_counter#24
(byte) current_movedown_counter#25
(byte) current_movedown_counter#26
(byte) current_movedown_counter#27
(byte) current_movedown_counter#28
(byte) current_movedown_counter#29
(byte) current_movedown_counter#3
(byte) current_movedown_counter#30
(byte) current_movedown_counter#31
(byte) current_movedown_counter#32
(byte) current_movedown_counter#33
(byte) current_movedown_counter#34
(byte) current_movedown_counter#35
(byte) current_movedown_counter#36
(byte) current_movedown_counter#37
(byte) current_movedown_counter#38
(byte) current_movedown_counter#39
(byte) current_movedown_counter#4
(byte) current_movedown_counter#40
(byte) current_movedown_counter#41
(byte) current_movedown_counter#42
(byte) current_movedown_counter#43
(byte) current_movedown_counter#44
(byte) current_movedown_counter#45
(byte) current_movedown_counter#46
(byte) current_movedown_counter#47
(byte) current_movedown_counter#48
(byte) current_movedown_counter#49
(byte) current_movedown_counter#5
(byte) current_movedown_counter#50
(byte) current_movedown_counter#51
(byte) current_movedown_counter#52
(byte) current_movedown_counter#53
(byte) current_movedown_counter#54
(byte) current_movedown_counter#55
(byte) current_movedown_counter#56
(byte) current_movedown_counter#57
(byte) current_movedown_counter#58
(byte) current_movedown_counter#6
(byte) current_movedown_counter#7
(byte) current_movedown_counter#8
(byte) current_movedown_counter#9
(const nomodify byte) current_movedown_fast = (byte) $a
(byte) current_movedown_slow
(byte) current_movedown_slow#0
(byte) current_movedown_slow#1
(byte) current_movedown_slow#10
(byte) current_movedown_slow#11
(byte) current_movedown_slow#12
(byte) current_movedown_slow#13
(byte) current_movedown_slow#14
(byte) current_movedown_slow#15
(byte) current_movedown_slow#16
(byte) current_movedown_slow#17
(byte) current_movedown_slow#18
(byte) current_movedown_slow#19
(byte) current_movedown_slow#2
(byte) current_movedown_slow#20
(byte) current_movedown_slow#21
(byte) current_movedown_slow#22
(byte) current_movedown_slow#23
(byte) current_movedown_slow#24
(byte) current_movedown_slow#25
(byte) current_movedown_slow#26
(byte) current_movedown_slow#27
(byte) current_movedown_slow#28
(byte) current_movedown_slow#29
(byte) current_movedown_slow#3
(byte) current_movedown_slow#30
(byte) current_movedown_slow#31
(byte) current_movedown_slow#32
(byte) current_movedown_slow#33
(byte) current_movedown_slow#34
(byte) current_movedown_slow#35
(byte) current_movedown_slow#36
(byte) current_movedown_slow#37
(byte) current_movedown_slow#38
(byte) current_movedown_slow#39
(byte) current_movedown_slow#4
(byte) current_movedown_slow#40
(byte) current_movedown_slow#41
(byte) current_movedown_slow#42
(byte) current_movedown_slow#43
(byte) current_movedown_slow#44
(byte) current_movedown_slow#45
(byte) current_movedown_slow#46
(byte) current_movedown_slow#47
(byte) current_movedown_slow#48
(byte) current_movedown_slow#49
(byte) current_movedown_slow#5
(byte) current_movedown_slow#50
(byte) current_movedown_slow#51
(byte) current_movedown_slow#52
(byte) current_movedown_slow#53
(byte) current_movedown_slow#54
(byte) current_movedown_slow#55
(byte) current_movedown_slow#56
(byte) current_movedown_slow#57
(byte) current_movedown_slow#58
(byte) current_movedown_slow#59
(byte) current_movedown_slow#6
(byte) current_movedown_slow#60
(byte) current_movedown_slow#61
(byte) current_movedown_slow#62
(byte) current_movedown_slow#63
(byte) current_movedown_slow#64
(byte) current_movedown_slow#65
(byte) current_movedown_slow#66
(byte) current_movedown_slow#67
(byte) current_movedown_slow#68
(byte) current_movedown_slow#69
(byte) current_movedown_slow#7
(byte) current_movedown_slow#70
(byte) current_movedown_slow#71
(byte) current_movedown_slow#72
(byte) current_movedown_slow#73
(byte) current_movedown_slow#74
(byte) current_movedown_slow#75
(byte) current_movedown_slow#76
(byte) current_movedown_slow#77
(byte) current_movedown_slow#78
(byte) current_movedown_slow#79
(byte) current_movedown_slow#8
(byte) current_movedown_slow#80
(byte) current_movedown_slow#81
(byte) current_movedown_slow#82
(byte) current_movedown_slow#83
(byte) current_movedown_slow#84
(byte) current_movedown_slow#85
(byte) current_movedown_slow#86
(byte) current_movedown_slow#87
(byte) current_movedown_slow#9
(byte) current_orientation
(byte) current_orientation#0
(byte) current_orientation#1
(byte) current_orientation#10
(byte) current_orientation#11
(byte) current_orientation#12
(byte) current_orientation#13
(byte) current_orientation#14
(byte) current_orientation#15
(byte) current_orientation#16
(byte) current_orientation#17
(byte) current_orientation#18
(byte) current_orientation#19
(byte) current_orientation#2
(byte) current_orientation#20
(byte) current_orientation#21
(byte) current_orientation#22
(byte) current_orientation#23
(byte) current_orientation#24
(byte) current_orientation#25
(byte) current_orientation#26
(byte) current_orientation#27
(byte) current_orientation#28
(byte) current_orientation#29
(byte) current_orientation#3
(byte) current_orientation#30
(byte) current_orientation#31
(byte) current_orientation#32
(byte) current_orientation#33
(byte) current_orientation#34
(byte) current_orientation#35
(byte) current_orientation#36
(byte) current_orientation#37
(byte) current_orientation#38
(byte) current_orientation#39
(byte) current_orientation#4
(byte) current_orientation#40
(byte) current_orientation#41
(byte) current_orientation#42
(byte) current_orientation#43
(byte) current_orientation#44
(byte) current_orientation#45
(byte) current_orientation#46
(byte) current_orientation#47
(byte) current_orientation#48
(byte) current_orientation#49
(byte) current_orientation#5
(byte) current_orientation#50
(byte) current_orientation#51
(byte) current_orientation#52
(byte) current_orientation#53
(byte) current_orientation#54
(byte) current_orientation#55
(byte) current_orientation#56
(byte) current_orientation#57
(byte) current_orientation#58
(byte) current_orientation#59
(byte) current_orientation#6
(byte) current_orientation#60
(byte) current_orientation#61
(byte) current_orientation#62
(byte) current_orientation#63
(byte) current_orientation#64
(byte) current_orientation#65
(byte) current_orientation#66
(byte) current_orientation#67
(byte) current_orientation#68
(byte) current_orientation#69
(byte) current_orientation#7
(byte) current_orientation#70
(byte) current_orientation#71
(byte) current_orientation#72
(byte) current_orientation#73
(byte) current_orientation#74
(byte) current_orientation#75
(byte) current_orientation#76
(byte) current_orientation#77
(byte) current_orientation#78
(byte) current_orientation#79
(byte) current_orientation#8
(byte) current_orientation#80
(byte) current_orientation#81
(byte) current_orientation#82
(byte) current_orientation#83
(byte) current_orientation#84
(byte) current_orientation#85
(byte) current_orientation#86
(byte) current_orientation#87
(byte) current_orientation#88
(byte) current_orientation#89
(byte) current_orientation#9
(byte) current_orientation#90
(byte) current_orientation#91
(byte) current_orientation#92
(byte) current_orientation#93
(byte) current_orientation#94
(byte) current_orientation#95
(byte*) current_piece
(byte*) current_piece#0
(byte*) current_piece#1
(byte*) current_piece#10
(byte*) current_piece#11
(byte*) current_piece#12
(byte*) current_piece#13
(byte*) current_piece#14
(byte*) current_piece#15
(byte*) current_piece#16
(byte*) current_piece#17
(byte*) current_piece#18
(byte*) current_piece#19
(byte*) current_piece#2
(byte*) current_piece#20
(byte*) current_piece#21
(byte*) current_piece#22
(byte*) current_piece#23
(byte*) current_piece#24
(byte*) current_piece#25
(byte*) current_piece#26
(byte*) current_piece#27
(byte*) current_piece#28
(byte*) current_piece#29
(byte*) current_piece#3
(byte*) current_piece#30
(byte*) current_piece#31
(byte*) current_piece#32
(byte*) current_piece#33
(byte*) current_piece#34
(byte*) current_piece#35
(byte*) current_piece#36
(byte*) current_piece#37
(byte*) current_piece#38
(byte*) current_piece#39
(byte*) current_piece#4
(byte*) current_piece#40
(byte*) current_piece#41
(byte*) current_piece#42
(byte*) current_piece#43
(byte*) current_piece#44
(byte*) current_piece#45
(byte*) current_piece#46
(byte*) current_piece#47
(byte*) current_piece#48
(byte*) current_piece#49
(byte*) current_piece#5
(byte*) current_piece#50
(byte*) current_piece#51
(byte*) current_piece#52
(byte*) current_piece#53
(byte*) current_piece#54
(byte*) current_piece#55
(byte*) current_piece#56
(byte*) current_piece#57
(byte*) current_piece#58
(byte*) current_piece#59
(byte*) current_piece#6
(byte*) current_piece#60
(byte*) current_piece#61
(byte*) current_piece#62
(byte*) current_piece#63
(byte*) current_piece#64
(byte*) current_piece#65
(byte*) current_piece#66
(byte*) current_piece#67
(byte*) current_piece#68
(byte*) current_piece#69
(byte*) current_piece#7
(byte*) current_piece#70
(byte*) current_piece#71
(byte*) current_piece#72
(byte*) current_piece#73
(byte*) current_piece#74
(byte*) current_piece#75
(byte*) current_piece#76
(byte*) current_piece#77
(byte*) current_piece#78
(byte*) current_piece#79
(byte*) current_piece#8
(byte*) current_piece#80
(byte*) current_piece#81
(byte*) current_piece#82
(byte*) current_piece#83
(byte*) current_piece#84
(byte*) current_piece#85
(byte*) current_piece#86
(byte*) current_piece#87
(byte*) current_piece#88
(byte*) current_piece#89
(byte*) current_piece#9
(byte*) current_piece#90
(byte*) current_piece#91
(byte) current_piece_char
(byte) current_piece_char#0
(byte) current_piece_char#1
(byte) current_piece_char#10
(byte) current_piece_char#11
(byte) current_piece_char#12
(byte) current_piece_char#13
(byte) current_piece_char#14
(byte) current_piece_char#15
(byte) current_piece_char#16
(byte) current_piece_char#17
(byte) current_piece_char#18
(byte) current_piece_char#19
(byte) current_piece_char#2
(byte) current_piece_char#20
(byte) current_piece_char#21
(byte) current_piece_char#22
(byte) current_piece_char#23
(byte) current_piece_char#24
(byte) current_piece_char#25
(byte) current_piece_char#26
(byte) current_piece_char#27
(byte) current_piece_char#28
(byte) current_piece_char#29
(byte) current_piece_char#3
(byte) current_piece_char#30
(byte) current_piece_char#31
(byte) current_piece_char#32
(byte) current_piece_char#33
(byte) current_piece_char#34
(byte) current_piece_char#35
(byte) current_piece_char#36
(byte) current_piece_char#37
(byte) current_piece_char#38
(byte) current_piece_char#39
(byte) current_piece_char#4
(byte) current_piece_char#40
(byte) current_piece_char#41
(byte) current_piece_char#42
(byte) current_piece_char#43
(byte) current_piece_char#44
(byte) current_piece_char#45
(byte) current_piece_char#46
(byte) current_piece_char#47
(byte) current_piece_char#48
(byte) current_piece_char#49
(byte) current_piece_char#5
(byte) current_piece_char#50
(byte) current_piece_char#51
(byte) current_piece_char#52
(byte) current_piece_char#53
(byte) current_piece_char#54
(byte) current_piece_char#55
(byte) current_piece_char#56
(byte) current_piece_char#57
(byte) current_piece_char#58
(byte) current_piece_char#59
(byte) current_piece_char#6
(byte) current_piece_char#60
(byte) current_piece_char#61
(byte) current_piece_char#62
(byte) current_piece_char#63
(byte) current_piece_char#64
(byte) current_piece_char#65
(byte) current_piece_char#66
(byte) current_piece_char#67
(byte) current_piece_char#68
(byte) current_piece_char#69
(byte) current_piece_char#7
(byte) current_piece_char#70
(byte) current_piece_char#71
(byte) current_piece_char#72
(byte) current_piece_char#73
(byte) current_piece_char#74
(byte) current_piece_char#75
(byte) current_piece_char#76
(byte) current_piece_char#77
(byte) current_piece_char#78
(byte) current_piece_char#79
(byte) current_piece_char#8
(byte) current_piece_char#80
(byte) current_piece_char#81
(byte) current_piece_char#82
(byte) current_piece_char#83
(byte) current_piece_char#84
(byte) current_piece_char#85
(byte) current_piece_char#86
(byte) current_piece_char#87
(byte) current_piece_char#88
(byte) current_piece_char#89
(byte) current_piece_char#9
(byte) current_piece_char#90
(byte) current_piece_char#91
(byte) current_piece_char#92
(byte) current_piece_char#93
(byte) current_piece_char#94
(byte) current_piece_char#95
(byte) current_piece_char#96
(byte) current_piece_char#97
(byte) current_piece_char#98
(byte) current_piece_char#99
(byte*) current_piece_gfx
(byte*) current_piece_gfx#0
(byte*) current_piece_gfx#1
(byte*) current_piece_gfx#10
(byte*) current_piece_gfx#100
(byte*) current_piece_gfx#101
(byte*) current_piece_gfx#102
(byte*) current_piece_gfx#103
(byte*) current_piece_gfx#104
(byte*) current_piece_gfx#105
(byte*) current_piece_gfx#106
(byte*) current_piece_gfx#107
(byte*) current_piece_gfx#108
(byte*) current_piece_gfx#109
(byte*) current_piece_gfx#11
(byte*) current_piece_gfx#110
(byte*) current_piece_gfx#111
(byte*) current_piece_gfx#12
(byte*) current_piece_gfx#13
(byte*) current_piece_gfx#14
(byte*) current_piece_gfx#15
(byte*) current_piece_gfx#16
(byte*) current_piece_gfx#17
(byte*) current_piece_gfx#18
(byte*) current_piece_gfx#19
(byte*) current_piece_gfx#2
(byte*) current_piece_gfx#20
(byte*) current_piece_gfx#21
(byte*) current_piece_gfx#22
(byte*) current_piece_gfx#23
(byte*) current_piece_gfx#24
(byte*) current_piece_gfx#25
(byte*) current_piece_gfx#26
(byte*) current_piece_gfx#27
(byte*) current_piece_gfx#28
(byte*) current_piece_gfx#29
(byte*) current_piece_gfx#3
(byte*) current_piece_gfx#30
(byte*) current_piece_gfx#31
(byte*) current_piece_gfx#32
(byte*) current_piece_gfx#33
(byte*) current_piece_gfx#34
(byte*) current_piece_gfx#35
(byte*) current_piece_gfx#36
(byte*) current_piece_gfx#37
(byte*) current_piece_gfx#38
(byte*) current_piece_gfx#39
(byte*) current_piece_gfx#4
(byte*) current_piece_gfx#40
(byte*) current_piece_gfx#41
(byte*) current_piece_gfx#42
(byte*) current_piece_gfx#43
(byte*) current_piece_gfx#44
(byte*) current_piece_gfx#45
(byte*) current_piece_gfx#46
(byte*) current_piece_gfx#47
(byte*) current_piece_gfx#48
(byte*) current_piece_gfx#49
(byte*) current_piece_gfx#5
(byte*) current_piece_gfx#50
(byte*) current_piece_gfx#51
(byte*) current_piece_gfx#52
(byte*) current_piece_gfx#53
(byte*) current_piece_gfx#54
(byte*) current_piece_gfx#55
(byte*) current_piece_gfx#56
(byte*) current_piece_gfx#57
(byte*) current_piece_gfx#58
(byte*) current_piece_gfx#59
(byte*) current_piece_gfx#6
(byte*) current_piece_gfx#60
(byte*) current_piece_gfx#61
(byte*) current_piece_gfx#62
(byte*) current_piece_gfx#63
(byte*) current_piece_gfx#64
(byte*) current_piece_gfx#65
(byte*) current_piece_gfx#66
(byte*) current_piece_gfx#67
(byte*) current_piece_gfx#68
(byte*) current_piece_gfx#69
(byte*) current_piece_gfx#7
(byte*) current_piece_gfx#70
(byte*) current_piece_gfx#71
(byte*) current_piece_gfx#72
(byte*) current_piece_gfx#73
(byte*) current_piece_gfx#74
(byte*) current_piece_gfx#75
(byte*) current_piece_gfx#76
(byte*) current_piece_gfx#77
(byte*) current_piece_gfx#78
(byte*) current_piece_gfx#79
(byte*) current_piece_gfx#8
(byte*) current_piece_gfx#80
(byte*) current_piece_gfx#81
(byte*) current_piece_gfx#82
(byte*) current_piece_gfx#83
(byte*) current_piece_gfx#84
(byte*) current_piece_gfx#85
(byte*) current_piece_gfx#86
(byte*) current_piece_gfx#87
(byte*) current_piece_gfx#88
(byte*) current_piece_gfx#89
(byte*) current_piece_gfx#9
(byte*) current_piece_gfx#90
(byte*) current_piece_gfx#91
(byte*) current_piece_gfx#92
(byte*) current_piece_gfx#93
(byte*) current_piece_gfx#94
(byte*) current_piece_gfx#95
(byte*) current_piece_gfx#96
(byte*) current_piece_gfx#97
(byte*) current_piece_gfx#98
(byte*) current_piece_gfx#99
(byte) current_xpos
(byte) current_xpos#0
(byte) current_xpos#1
(byte) current_xpos#10
(byte) current_xpos#100
(byte) current_xpos#101
(byte) current_xpos#102
(byte) current_xpos#103
(byte) current_xpos#104
(byte) current_xpos#105
(byte) current_xpos#106
(byte) current_xpos#107
(byte) current_xpos#108
(byte) current_xpos#109
(byte) current_xpos#11
(byte) current_xpos#110
(byte) current_xpos#111
(byte) current_xpos#112
(byte) current_xpos#113
(byte) current_xpos#114
(byte) current_xpos#115
(byte) current_xpos#116
(byte) current_xpos#117
(byte) current_xpos#118
(byte) current_xpos#12
(byte) current_xpos#13
(byte) current_xpos#14
(byte) current_xpos#15
(byte) current_xpos#16
(byte) current_xpos#17
(byte) current_xpos#18
(byte) current_xpos#19
(byte) current_xpos#2
(byte) current_xpos#20
(byte) current_xpos#21
(byte) current_xpos#22
(byte) current_xpos#23
(byte) current_xpos#24
(byte) current_xpos#25
(byte) current_xpos#26
(byte) current_xpos#27
(byte) current_xpos#28
(byte) current_xpos#29
(byte) current_xpos#3
(byte) current_xpos#30
(byte) current_xpos#31
(byte) current_xpos#32
(byte) current_xpos#33
(byte) current_xpos#34
(byte) current_xpos#35
(byte) current_xpos#36
(byte) current_xpos#37
(byte) current_xpos#38
(byte) current_xpos#39
(byte) current_xpos#4
(byte) current_xpos#40
(byte) current_xpos#41
(byte) current_xpos#42
(byte) current_xpos#43
(byte) current_xpos#44
(byte) current_xpos#45
(byte) current_xpos#46
(byte) current_xpos#47
(byte) current_xpos#48
(byte) current_xpos#49
(byte) current_xpos#5
(byte) current_xpos#50
(byte) current_xpos#51
(byte) current_xpos#52
(byte) current_xpos#53
(byte) current_xpos#54
(byte) current_xpos#55
(byte) current_xpos#56
(byte) current_xpos#57
(byte) current_xpos#58
(byte) current_xpos#59
(byte) current_xpos#6
(byte) current_xpos#60
(byte) current_xpos#61
(byte) current_xpos#62
(byte) current_xpos#63
(byte) current_xpos#64
(byte) current_xpos#65
(byte) current_xpos#66
(byte) current_xpos#67
(byte) current_xpos#68
(byte) current_xpos#69
(byte) current_xpos#7
(byte) current_xpos#70
(byte) current_xpos#71
(byte) current_xpos#72
(byte) current_xpos#73
(byte) current_xpos#74
(byte) current_xpos#75
(byte) current_xpos#76
(byte) current_xpos#77
(byte) current_xpos#78
(byte) current_xpos#79
(byte) current_xpos#8
(byte) current_xpos#80
(byte) current_xpos#81
(byte) current_xpos#82
(byte) current_xpos#83
(byte) current_xpos#84
(byte) current_xpos#85
(byte) current_xpos#86
(byte) current_xpos#87
(byte) current_xpos#88
(byte) current_xpos#89
(byte) current_xpos#9
(byte) current_xpos#90
(byte) current_xpos#91
(byte) current_xpos#92
(byte) current_xpos#93
(byte) current_xpos#94
(byte) current_xpos#95
(byte) current_xpos#96
(byte) current_xpos#97
(byte) current_xpos#98
(byte) current_xpos#99
(byte) current_ypos
(byte) current_ypos#0
(byte) current_ypos#1
(byte) current_ypos#10
(byte) current_ypos#11
(byte) current_ypos#12
(byte) current_ypos#13
(byte) current_ypos#14
(byte) current_ypos#15
(byte) current_ypos#16
(byte) current_ypos#17
(byte) current_ypos#18
(byte) current_ypos#19
(byte) current_ypos#2
(byte) current_ypos#20
(byte) current_ypos#21
(byte) current_ypos#22
(byte) current_ypos#23
(byte) current_ypos#24
(byte) current_ypos#25
(byte) current_ypos#26
(byte) current_ypos#27
(byte) current_ypos#28
(byte) current_ypos#29
(byte) current_ypos#3
(byte) current_ypos#30
(byte) current_ypos#31
(byte) current_ypos#32
(byte) current_ypos#33
(byte) current_ypos#34
(byte) current_ypos#35
(byte) current_ypos#36
(byte) current_ypos#37
(byte) current_ypos#38
(byte) current_ypos#39
(byte) current_ypos#4
(byte) current_ypos#40
(byte) current_ypos#41
(byte) current_ypos#42
(byte) current_ypos#43
(byte) current_ypos#44
(byte) current_ypos#45
(byte) current_ypos#46
(byte) current_ypos#47
(byte) current_ypos#48
(byte) current_ypos#49
(byte) current_ypos#5
(byte) current_ypos#50
(byte) current_ypos#51
(byte) current_ypos#52
(byte) current_ypos#53
(byte) current_ypos#54
(byte) current_ypos#55
(byte) current_ypos#56
(byte) current_ypos#57
(byte) current_ypos#58
(byte) current_ypos#59
(byte) current_ypos#6
(byte) current_ypos#60
(byte) current_ypos#61
(byte) current_ypos#62
(byte) current_ypos#63
(byte) current_ypos#64
(byte) current_ypos#65
(byte) current_ypos#66
(byte) current_ypos#67
(byte) current_ypos#68
(byte) current_ypos#69
(byte) current_ypos#7
(byte) current_ypos#70
(byte) current_ypos#71
(byte) current_ypos#72
(byte) current_ypos#73
(byte) current_ypos#74
(byte) current_ypos#75
(byte) current_ypos#76
(byte) current_ypos#77
(byte) current_ypos#78
(byte) current_ypos#79
(byte) current_ypos#8
(byte) current_ypos#80
(byte) current_ypos#81
(byte) current_ypos#82
(byte) current_ypos#83
(byte) current_ypos#84
(byte) current_ypos#85
(byte) current_ypos#86
(byte) current_ypos#87
(byte) current_ypos#88
(byte) current_ypos#89
(byte) current_ypos#9
(byte) current_ypos#90
(byte) current_ypos#91
(byte) current_ypos#92
(byte) current_ypos#93
(byte) current_ypos#94
(byte) current_ypos#95
(byte) current_ypos#96
(byte) current_ypos#97
(byte) game_over
(byte) game_over#0
(byte) game_over#1
(byte) game_over#10
(byte) game_over#11
(byte) game_over#12
(byte) game_over#13
(byte) game_over#14
(byte) game_over#15
(byte) game_over#16
(byte) game_over#17
(byte) game_over#18
(byte) game_over#19
(byte) game_over#2
(byte) game_over#20
(byte) game_over#21
(byte) game_over#22
(byte) game_over#23
(byte) game_over#24
(byte) game_over#25
(byte) game_over#26
(byte) game_over#27
(byte) game_over#28
(byte) game_over#29
(byte) game_over#3
(byte) game_over#30
(byte) game_over#31
(byte) game_over#32
(byte) game_over#33
(byte) game_over#34
(byte) game_over#35
(byte) game_over#36
(byte) game_over#37
(byte) game_over#38
(byte) game_over#39
(byte) game_over#4
(byte) game_over#40
(byte) game_over#41
(byte) game_over#42
(byte) game_over#43
(byte) game_over#44
(byte) game_over#45
(byte) game_over#46
(byte) game_over#47
(byte) game_over#48
(byte) game_over#49
(byte) game_over#5
(byte) game_over#50
(byte) game_over#51
(byte) game_over#52
(byte) game_over#53
(byte) game_over#54
(byte) game_over#55
(byte) game_over#56
(byte) game_over#57
(byte) game_over#58
(byte) game_over#59
(byte) game_over#6
(byte) game_over#60
(byte) game_over#61
(byte) game_over#62
(byte) game_over#63
(byte) game_over#64
(byte) game_over#65
(byte) game_over#66
(byte) game_over#67
(byte) game_over#68
(byte) game_over#69
(byte) game_over#7
(byte) game_over#70
(byte) game_over#71
(byte) game_over#72
(byte) game_over#73
(byte) game_over#74
(byte) game_over#75
(byte) game_over#76
(byte) game_over#77
(byte) game_over#78
(byte) game_over#79
(byte) game_over#8
(byte) game_over#80
(byte) game_over#81
(byte) game_over#82
(byte) game_over#83
(byte) game_over#84
(byte) game_over#85
(byte) game_over#9
(volatile byte) irq_cnt loadstore
(volatile byte) irq_raster_next loadstore
(volatile byte) irq_sprite_ptr loadstore
(volatile byte) irq_sprite_ypos loadstore
(byte()) keyboard_event_get()
(bool~) keyboard_event_get::$0
(label) keyboard_event_get::@1
(label) keyboard_event_get::@2
(label) keyboard_event_get::@return
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#0
(byte) keyboard_event_get::return#1
(byte) keyboard_event_get::return#2
(byte) keyboard_event_get::return#3
(byte) keyboard_event_get::return#4
(byte) keyboard_event_get::return#5
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0
(number~) keyboard_event_pressed::$1
(byte~) keyboard_event_pressed::$2
(label) keyboard_event_pressed::@return
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#0
(byte) keyboard_event_pressed::keycode#1
(byte) keyboard_event_pressed::keycode#2
(byte) keyboard_event_pressed::keycode#3
(byte) keyboard_event_pressed::keycode#4
(byte) keyboard_event_pressed::keycode#5
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0
(byte) keyboard_event_pressed::return#1
(byte) keyboard_event_pressed::return#10
(byte) keyboard_event_pressed::return#11
(byte) keyboard_event_pressed::return#12
(byte) keyboard_event_pressed::return#2
(byte) keyboard_event_pressed::return#3
(byte) keyboard_event_pressed::return#4
(byte) keyboard_event_pressed::return#5
(byte) keyboard_event_pressed::return#6
(byte) keyboard_event_pressed::return#7
(byte) keyboard_event_pressed::return#8
(byte) keyboard_event_pressed::return#9
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0
(bool~) keyboard_event_scan::$1
(bool~) keyboard_event_scan::$10
(bool~) keyboard_event_scan::$11
(byte~) keyboard_event_scan::$12
(bool~) keyboard_event_scan::$13
(number~) keyboard_event_scan::$14
(byte~) keyboard_event_scan::$15
(byte~) keyboard_event_scan::$16
(bool~) keyboard_event_scan::$17
(bool~) keyboard_event_scan::$18
(bool~) keyboard_event_scan::$19
(bool~) keyboard_event_scan::$2
(bool~) keyboard_event_scan::$20
(byte~) keyboard_event_scan::$21
(bool~) keyboard_event_scan::$22
(number~) keyboard_event_scan::$23
(bool~) keyboard_event_scan::$24
(bool~) keyboard_event_scan::$25
(byte~) keyboard_event_scan::$26
(byte~) keyboard_event_scan::$27
(byte~) keyboard_event_scan::$28
(byte~) keyboard_event_scan::$29
(byte~) keyboard_event_scan::$3
(bool~) keyboard_event_scan::$4
(bool~) keyboard_event_scan::$5
(byte~) keyboard_event_scan::$6
(bool~) keyboard_event_scan::$7
(bool~) keyboard_event_scan::$8
(byte~) keyboard_event_scan::$9
(label) keyboard_event_scan::@1
(label) keyboard_event_scan::@10
(label) keyboard_event_scan::@11
(label) keyboard_event_scan::@12
(label) keyboard_event_scan::@13
(label) keyboard_event_scan::@14
(label) keyboard_event_scan::@15
(label) keyboard_event_scan::@16
(label) keyboard_event_scan::@17
(label) keyboard_event_scan::@18
(label) keyboard_event_scan::@19
(label) keyboard_event_scan::@2
(label) keyboard_event_scan::@20
(label) keyboard_event_scan::@21
(label) keyboard_event_scan::@22
(label) keyboard_event_scan::@23
(label) keyboard_event_scan::@24
(label) keyboard_event_scan::@3
(label) keyboard_event_scan::@4
(label) keyboard_event_scan::@5
(label) keyboard_event_scan::@6
(label) keyboard_event_scan::@7
(label) keyboard_event_scan::@8
(label) keyboard_event_scan::@9
(label) keyboard_event_scan::@return
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#0
(byte) keyboard_event_scan::col#1
(byte) keyboard_event_scan::col#2
(byte) keyboard_event_scan::col#3
(byte) keyboard_event_scan::col#4
(byte) keyboard_event_scan::col#5
(byte) keyboard_event_scan::col#6
(byte) keyboard_event_scan::col#7
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#0
(byte) keyboard_event_scan::keycode#1
(byte) keyboard_event_scan::keycode#10
(byte) keyboard_event_scan::keycode#11
(byte) keyboard_event_scan::keycode#12
(byte) keyboard_event_scan::keycode#13
(byte) keyboard_event_scan::keycode#14
(byte) keyboard_event_scan::keycode#2
(byte) keyboard_event_scan::keycode#3
(byte) keyboard_event_scan::keycode#4
(byte) keyboard_event_scan::keycode#5
(byte) keyboard_event_scan::keycode#6
(byte) keyboard_event_scan::keycode#7
(byte) keyboard_event_scan::keycode#8
(byte) keyboard_event_scan::keycode#9
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#0
(byte) keyboard_event_scan::row#1
(byte) keyboard_event_scan::row#10
(byte) keyboard_event_scan::row#11
(byte) keyboard_event_scan::row#12
(byte) keyboard_event_scan::row#13
(byte) keyboard_event_scan::row#2
(byte) keyboard_event_scan::row#3
(byte) keyboard_event_scan::row#4
(byte) keyboard_event_scan::row#5
(byte) keyboard_event_scan::row#6
(byte) keyboard_event_scan::row#7
(byte) keyboard_event_scan::row#8
(byte) keyboard_event_scan::row#9
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0
(byte) keyboard_event_scan::row_scan#1
(byte) keyboard_event_scan::row_scan#2
(byte) keyboard_event_scan::row_scan#3
(byte) keyboard_event_scan::row_scan#4
(byte) keyboard_event_scan::row_scan#5
(byte) keyboard_event_scan::row_scan#6
(byte) keyboard_event_scan::row_scan#7
(byte) keyboard_event_scan::row_scan#8
(const byte*) keyboard_events[(number) 8]  = { fill( 8, 0) }
(byte) keyboard_events_size
(byte) keyboard_events_size#0
(byte) keyboard_events_size#1
(byte) keyboard_events_size#10
(byte) keyboard_events_size#11
(byte) keyboard_events_size#12
(byte) keyboard_events_size#13
(byte) keyboard_events_size#14
(byte) keyboard_events_size#15
(byte) keyboard_events_size#16
(byte) keyboard_events_size#17
(byte) keyboard_events_size#18
(byte) keyboard_events_size#19
(byte) keyboard_events_size#2
(byte) keyboard_events_size#20
(byte) keyboard_events_size#21
(byte) keyboard_events_size#22
(byte) keyboard_events_size#23
(byte) keyboard_events_size#24
(byte) keyboard_events_size#25
(byte) keyboard_events_size#26
(byte) keyboard_events_size#27
(byte) keyboard_events_size#28
(byte) keyboard_events_size#29
(byte) keyboard_events_size#3
(byte) keyboard_events_size#30
(byte) keyboard_events_size#31
(byte) keyboard_events_size#32
(byte) keyboard_events_size#33
(byte) keyboard_events_size#34
(byte) keyboard_events_size#35
(byte) keyboard_events_size#36
(byte) keyboard_events_size#37
(byte) keyboard_events_size#38
(byte) keyboard_events_size#39
(byte) keyboard_events_size#4
(byte) keyboard_events_size#40
(byte) keyboard_events_size#41
(byte) keyboard_events_size#42
(byte) keyboard_events_size#43
(byte) keyboard_events_size#44
(byte) keyboard_events_size#45
(byte) keyboard_events_size#46
(byte) keyboard_events_size#47
(byte) keyboard_events_size#48
(byte) keyboard_events_size#49
(byte) keyboard_events_size#5
(byte) keyboard_events_size#50
(byte) keyboard_events_size#51
(byte) keyboard_events_size#52
(byte) keyboard_events_size#53
(byte) keyboard_events_size#54
(byte) keyboard_events_size#55
(byte) keyboard_events_size#56
(byte) keyboard_events_size#57
(byte) keyboard_events_size#58
(byte) keyboard_events_size#59
(byte) keyboard_events_size#6
(byte) keyboard_events_size#60
(byte) keyboard_events_size#61
(byte) keyboard_events_size#62
(byte) keyboard_events_size#63
(byte) keyboard_events_size#64
(byte) keyboard_events_size#65
(byte) keyboard_events_size#66
(byte) keyboard_events_size#67
(byte) keyboard_events_size#68
(byte) keyboard_events_size#69
(byte) keyboard_events_size#7
(byte) keyboard_events_size#70
(byte) keyboard_events_size#71
(byte) keyboard_events_size#72
(byte) keyboard_events_size#73
(byte) keyboard_events_size#74
(byte) keyboard_events_size#75
(byte) keyboard_events_size#76
(byte) keyboard_events_size#77
(byte) keyboard_events_size#78
(byte) keyboard_events_size#8
(byte) keyboard_events_size#9
(const byte*) keyboard_matrix_col_bitmask[(number) 8]  = { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte~) keyboard_matrix_read::$0
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0
(byte) keyboard_matrix_read::return#1
(byte) keyboard_matrix_read::return#2
(byte) keyboard_matrix_read::return#3
(byte) keyboard_matrix_read::return#4
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::row_pressed_bits#0
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0
(byte) keyboard_matrix_read::rowid#1
(const byte*) keyboard_matrix_row_bitmask[(number) 8]  = { (byte) $fe, (byte) $fd, (byte) $fb, (byte) $f7, (byte) $ef, (byte) $df, (byte) $bf, (byte) $7f }
(byte) keyboard_modifiers
(byte) keyboard_modifiers#0
(byte) keyboard_modifiers#1
(byte) keyboard_modifiers#10
(byte) keyboard_modifiers#11
(byte) keyboard_modifiers#12
(byte) keyboard_modifiers#13
(byte) keyboard_modifiers#14
(byte) keyboard_modifiers#15
(byte) keyboard_modifiers#16
(byte) keyboard_modifiers#17
(byte) keyboard_modifiers#18
(byte) keyboard_modifiers#19
(byte) keyboard_modifiers#2
(byte) keyboard_modifiers#20
(byte) keyboard_modifiers#21
(byte) keyboard_modifiers#22
(byte) keyboard_modifiers#23
(byte) keyboard_modifiers#24
(byte) keyboard_modifiers#25
(byte) keyboard_modifiers#26
(byte) keyboard_modifiers#27
(byte) keyboard_modifiers#28
(byte) keyboard_modifiers#29
(byte) keyboard_modifiers#3
(byte) keyboard_modifiers#30
(byte) keyboard_modifiers#31
(byte) keyboard_modifiers#32
(byte) keyboard_modifiers#33
(byte) keyboard_modifiers#34
(byte) keyboard_modifiers#35
(byte) keyboard_modifiers#36
(byte) keyboard_modifiers#37
(byte) keyboard_modifiers#38
(byte) keyboard_modifiers#39
(byte) keyboard_modifiers#4
(byte) keyboard_modifiers#40
(byte) keyboard_modifiers#41
(byte) keyboard_modifiers#42
(byte) keyboard_modifiers#43
(byte) keyboard_modifiers#44
(byte) keyboard_modifiers#45
(byte) keyboard_modifiers#46
(byte) keyboard_modifiers#47
(byte) keyboard_modifiers#48
(byte) keyboard_modifiers#49
(byte) keyboard_modifiers#5
(byte) keyboard_modifiers#50
(byte) keyboard_modifiers#51
(byte) keyboard_modifiers#52
(byte) keyboard_modifiers#53
(byte) keyboard_modifiers#54
(byte) keyboard_modifiers#55
(byte) keyboard_modifiers#56
(byte) keyboard_modifiers#57
(byte) keyboard_modifiers#58
(byte) keyboard_modifiers#59
(byte) keyboard_modifiers#6
(byte) keyboard_modifiers#60
(byte) keyboard_modifiers#7
(byte) keyboard_modifiers#8
(byte) keyboard_modifiers#9
(const byte*) keyboard_scan_values[(number) 8]  = { fill( 8, 0) }
(byte) level
(byte) level#0
(byte) level#1
(byte) level#10
(byte) level#100
(byte) level#101
(byte) level#102
(byte) level#103
(byte) level#11
(byte) level#12
(byte) level#13
(byte) level#14
(byte) level#15
(byte) level#16
(byte) level#17
(byte) level#18
(byte) level#19
(byte) level#2
(byte) level#20
(byte) level#21
(byte) level#22
(byte) level#23
(byte) level#24
(byte) level#25
(byte) level#26
(byte) level#27
(byte) level#28
(byte) level#29
(byte) level#3
(byte) level#30
(byte) level#31
(byte) level#32
(byte) level#33
(byte) level#34
(byte) level#35
(byte) level#36
(byte) level#37
(byte) level#38
(byte) level#39
(byte) level#4
(byte) level#40
(byte) level#41
(byte) level#42
(byte) level#43
(byte) level#44
(byte) level#45
(byte) level#46
(byte) level#47
(byte) level#48
(byte) level#49
(byte) level#5
(byte) level#50
(byte) level#51
(byte) level#52
(byte) level#53
(byte) level#54
(byte) level#55
(byte) level#56
(byte) level#57
(byte) level#58
(byte) level#59
(byte) level#6
(byte) level#60
(byte) level#61
(byte) level#62
(byte) level#63
(byte) level#64
(byte) level#65
(byte) level#66
(byte) level#67
(byte) level#68
(byte) level#69
(byte) level#7
(byte) level#70
(byte) level#71
(byte) level#72
(byte) level#73
(byte) level#74
(byte) level#75
(byte) level#76
(byte) level#77
(byte) level#78
(byte) level#79
(byte) level#8
(byte) level#80
(byte) level#81
(byte) level#82
(byte) level#83
(byte) level#84
(byte) level#85
(byte) level#86
(byte) level#87
(byte) level#88
(byte) level#89
(byte) level#9
(byte) level#90
(byte) level#91
(byte) level#92
(byte) level#93
(byte) level#94
(byte) level#95
(byte) level#96
(byte) level#97
(byte) level#98
(byte) level#99
(byte) level_bcd
(byte) level_bcd#0
(byte) level_bcd#1
(byte) level_bcd#10
(byte) level_bcd#100
(byte) level_bcd#11
(byte) level_bcd#12
(byte) level_bcd#13
(byte) level_bcd#14
(byte) level_bcd#15
(byte) level_bcd#16
(byte) level_bcd#17
(byte) level_bcd#18
(byte) level_bcd#19
(byte) level_bcd#2
(byte) level_bcd#20
(byte) level_bcd#21
(byte) level_bcd#22
(byte) level_bcd#23
(byte) level_bcd#24
(byte) level_bcd#25
(byte) level_bcd#26
(byte) level_bcd#27
(byte) level_bcd#28
(byte) level_bcd#29
(byte) level_bcd#3
(byte) level_bcd#30
(byte) level_bcd#31
(byte) level_bcd#32
(byte) level_bcd#33
(byte) level_bcd#34
(byte) level_bcd#35
(byte) level_bcd#36
(byte) level_bcd#37
(byte) level_bcd#38
(byte) level_bcd#39
(byte) level_bcd#4
(byte) level_bcd#40
(byte) level_bcd#41
(byte) level_bcd#42
(byte) level_bcd#43
(byte) level_bcd#44
(byte) level_bcd#45
(byte) level_bcd#46
(byte) level_bcd#47
(byte) level_bcd#48
(byte) level_bcd#49
(byte) level_bcd#5
(byte) level_bcd#50
(byte) level_bcd#51
(byte) level_bcd#52
(byte) level_bcd#53
(byte) level_bcd#54
(byte) level_bcd#55
(byte) level_bcd#56
(byte) level_bcd#57
(byte) level_bcd#58
(byte) level_bcd#59
(byte) level_bcd#6
(byte) level_bcd#60
(byte) level_bcd#61
(byte) level_bcd#62
(byte) level_bcd#63
(byte) level_bcd#64
(byte) level_bcd#65
(byte) level_bcd#66
(byte) level_bcd#67
(byte) level_bcd#68
(byte) level_bcd#69
(byte) level_bcd#7
(byte) level_bcd#70
(byte) level_bcd#71
(byte) level_bcd#72
(byte) level_bcd#73
(byte) level_bcd#74
(byte) level_bcd#75
(byte) level_bcd#76
(byte) level_bcd#77
(byte) level_bcd#78
(byte) level_bcd#79
(byte) level_bcd#8
(byte) level_bcd#80
(byte) level_bcd#81
(byte) level_bcd#82
(byte) level_bcd#83
(byte) level_bcd#84
(byte) level_bcd#85
(byte) level_bcd#86
(byte) level_bcd#87
(byte) level_bcd#88
(byte) level_bcd#89
(byte) level_bcd#9
(byte) level_bcd#90
(byte) level_bcd#91
(byte) level_bcd#92
(byte) level_bcd#93
(byte) level_bcd#94
(byte) level_bcd#95
(byte) level_bcd#96
(byte) level_bcd#97
(byte) level_bcd#98
(byte) level_bcd#99
(word) lines_bcd
(word) lines_bcd#0
(word) lines_bcd#1
(word) lines_bcd#10
(word) lines_bcd#11
(word) lines_bcd#12
(word) lines_bcd#13
(word) lines_bcd#14
(word) lines_bcd#15
(word) lines_bcd#16
(word) lines_bcd#17
(word) lines_bcd#18
(word) lines_bcd#19
(word) lines_bcd#2
(word) lines_bcd#20
(word) lines_bcd#21
(word) lines_bcd#22
(word) lines_bcd#23
(word) lines_bcd#24
(word) lines_bcd#25
(word) lines_bcd#26
(word) lines_bcd#27
(word) lines_bcd#28
(word) lines_bcd#29
(word) lines_bcd#3
(word) lines_bcd#30
(word) lines_bcd#31
(word) lines_bcd#32
(word) lines_bcd#33
(word) lines_bcd#34
(word) lines_bcd#35
(word) lines_bcd#36
(word) lines_bcd#37
(word) lines_bcd#38
(word) lines_bcd#39
(word) lines_bcd#4
(word) lines_bcd#40
(word) lines_bcd#41
(word) lines_bcd#42
(word) lines_bcd#43
(word) lines_bcd#44
(word) lines_bcd#45
(word) lines_bcd#46
(word) lines_bcd#47
(word) lines_bcd#48
(word) lines_bcd#49
(word) lines_bcd#5
(word) lines_bcd#50
(word) lines_bcd#51
(word) lines_bcd#52
(word) lines_bcd#53
(word) lines_bcd#54
(word) lines_bcd#55
(word) lines_bcd#56
(word) lines_bcd#57
(word) lines_bcd#58
(word) lines_bcd#59
(word) lines_bcd#6
(word) lines_bcd#60
(word) lines_bcd#61
(word) lines_bcd#62
(word) lines_bcd#63
(word) lines_bcd#64
(word) lines_bcd#65
(word) lines_bcd#66
(word) lines_bcd#67
(word) lines_bcd#68
(word) lines_bcd#69
(word) lines_bcd#7
(word) lines_bcd#70
(word) lines_bcd#71
(word) lines_bcd#72
(word) lines_bcd#73
(word) lines_bcd#74
(word) lines_bcd#75
(word) lines_bcd#76
(word) lines_bcd#77
(word) lines_bcd#78
(word) lines_bcd#79
(word) lines_bcd#8
(word) lines_bcd#80
(word) lines_bcd#81
(word) lines_bcd#82
(word) lines_bcd#83
(word) lines_bcd#84
(word) lines_bcd#85
(word) lines_bcd#86
(word) lines_bcd#87
(word) lines_bcd#9
(void()) main()
(bool~) main::$10
(byte~) main::$13
(bool~) main::$14
(byte~) main::$16
(bool~) main::$17
(bool~) main::$18
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@19
(label) main::@2
(label) main::@20
(label) main::@21
(label) main::@22
(label) main::@23
(label) main::@24
(label) main::@25
(label) main::@26
(label) main::@27
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::key_event
(byte) main::key_event#0
(byte) main::key_event#1
(byte) main::render
(byte) main::render#0
(byte) main::render#1
(byte) main::render#2
(byte) main::render#3
(byte) main::render#4
(label) main::sid_rnd_init1
(byte) next_piece_idx
(byte) next_piece_idx#0
(byte) next_piece_idx#1
(byte) next_piece_idx#10
(byte) next_piece_idx#11
(byte) next_piece_idx#12
(byte) next_piece_idx#13
(byte) next_piece_idx#14
(byte) next_piece_idx#15
(byte) next_piece_idx#16
(byte) next_piece_idx#17
(byte) next_piece_idx#18
(byte) next_piece_idx#19
(byte) next_piece_idx#2
(byte) next_piece_idx#20
(byte) next_piece_idx#21
(byte) next_piece_idx#22
(byte) next_piece_idx#23
(byte) next_piece_idx#24
(byte) next_piece_idx#25
(byte) next_piece_idx#26
(byte) next_piece_idx#27
(byte) next_piece_idx#28
(byte) next_piece_idx#29
(byte) next_piece_idx#3
(byte) next_piece_idx#30
(byte) next_piece_idx#31
(byte) next_piece_idx#32
(byte) next_piece_idx#33
(byte) next_piece_idx#34
(byte) next_piece_idx#35
(byte) next_piece_idx#36
(byte) next_piece_idx#37
(byte) next_piece_idx#38
(byte) next_piece_idx#39
(byte) next_piece_idx#4
(byte) next_piece_idx#40
(byte) next_piece_idx#41
(byte) next_piece_idx#42
(byte) next_piece_idx#43
(byte) next_piece_idx#44
(byte) next_piece_idx#45
(byte) next_piece_idx#46
(byte) next_piece_idx#47
(byte) next_piece_idx#48
(byte) next_piece_idx#49
(byte) next_piece_idx#5
(byte) next_piece_idx#50
(byte) next_piece_idx#51
(byte) next_piece_idx#52
(byte) next_piece_idx#53
(byte) next_piece_idx#54
(byte) next_piece_idx#55
(byte) next_piece_idx#56
(byte) next_piece_idx#57
(byte) next_piece_idx#58
(byte) next_piece_idx#59
(byte) next_piece_idx#6
(byte) next_piece_idx#60
(byte) next_piece_idx#61
(byte) next_piece_idx#62
(byte) next_piece_idx#63
(byte) next_piece_idx#64
(byte) next_piece_idx#65
(byte) next_piece_idx#66
(byte) next_piece_idx#67
(byte) next_piece_idx#68
(byte) next_piece_idx#69
(byte) next_piece_idx#7
(byte) next_piece_idx#70
(byte) next_piece_idx#71
(byte) next_piece_idx#72
(byte) next_piece_idx#73
(byte) next_piece_idx#74
(byte) next_piece_idx#75
(byte) next_piece_idx#76
(byte) next_piece_idx#8
(byte) next_piece_idx#9
(byte()) play_collision((byte) play_collision::xpos , (byte) play_collision::ypos , (byte) play_collision::orientation)
(byte*~) play_collision::$0
(bool~) play_collision::$1
(bool~) play_collision::$10
(bool~) play_collision::$11
(bool~) play_collision::$12
(bool~) play_collision::$13
(byte~) play_collision::$14
(bool~) play_collision::$2
(bool~) play_collision::$3
(bool~) play_collision::$4
(number~) play_collision::$5
(bool~) play_collision::$6
(bool~) play_collision::$7
(bool~) play_collision::$8
(bool~) play_collision::$9
(label) play_collision::@1
(label) play_collision::@10
(label) play_collision::@11
(label) play_collision::@12
(label) play_collision::@13
(label) play_collision::@2
(label) play_collision::@3
(label) play_collision::@4
(label) play_collision::@5
(label) play_collision::@6
(label) play_collision::@7
(label) play_collision::@8
(label) play_collision::@9
(label) play_collision::@return
(byte) play_collision::c
(byte) play_collision::c#0
(byte) play_collision::c#1
(byte) play_collision::c#2
(byte) play_collision::c#3
(byte) play_collision::c#4
(byte) play_collision::c#5
(byte) play_collision::c#6
(byte) play_collision::c#7
(byte) play_collision::i
(byte) play_collision::i#0
(byte) play_collision::i#1
(byte) play_collision::i#2
(byte) play_collision::i#3
(byte) play_collision::i#4
(byte) play_collision::i#5
(byte) play_collision::i#6
(byte) play_collision::i#7
(byte) play_collision::i#8
(byte) play_collision::i#9
(byte) play_collision::l
(byte) play_collision::l#0
(byte) play_collision::l#1
(byte) play_collision::l#2
(byte) play_collision::l#3
(byte) play_collision::l#4
(byte) play_collision::l#5
(byte) play_collision::l#6
(byte) play_collision::l#7
(byte) play_collision::l#8
(byte) play_collision::l#9
(byte) play_collision::orientation
(byte) play_collision::orientation#0
(byte) play_collision::orientation#1
(byte) play_collision::orientation#2
(byte) play_collision::orientation#3
(byte) play_collision::orientation#4
(byte) play_collision::orientation#5
(byte*) play_collision::piece_gfx
(byte*) play_collision::piece_gfx#0
(byte*) play_collision::piece_gfx#1
(byte*) play_collision::piece_gfx#2
(byte*) play_collision::piece_gfx#3
(byte*) play_collision::piece_gfx#4
(byte*) play_collision::piece_gfx#5
(byte*) play_collision::piece_gfx#6
(byte*) play_collision::piece_gfx#7
(byte*) play_collision::piece_gfx#8
(byte*) play_collision::playfield_line
(byte*) play_collision::playfield_line#0
(byte*) play_collision::playfield_line#1
(byte*) play_collision::playfield_line#2
(byte*) play_collision::playfield_line#3
(byte*) play_collision::playfield_line#4
(byte*) play_collision::playfield_line#5
(byte*) play_collision::playfield_line#6
(byte) play_collision::return
(byte) play_collision::return#0
(byte) play_collision::return#1
(byte) play_collision::return#10
(byte) play_collision::return#11
(byte) play_collision::return#12
(byte) play_collision::return#13
(byte) play_collision::return#14
(byte) play_collision::return#15
(byte) play_collision::return#16
(byte) play_collision::return#2
(byte) play_collision::return#3
(byte) play_collision::return#4
(byte) play_collision::return#5
(byte) play_collision::return#6
(byte) play_collision::return#7
(byte) play_collision::return#8
(byte) play_collision::return#9
(byte) play_collision::xp
(byte) play_collision::xp#0
(byte) play_collision::xp#1
(byte) play_collision::xp#2
(byte) play_collision::xp#3
(byte) play_collision::xp#4
(byte) play_collision::xp#5
(byte) play_collision::xp#6
(byte) play_collision::xp#7
(byte) play_collision::xpos
(byte) play_collision::xpos#0
(byte) play_collision::xpos#1
(byte) play_collision::xpos#10
(byte) play_collision::xpos#11
(byte) play_collision::xpos#12
(byte) play_collision::xpos#13
(byte) play_collision::xpos#2
(byte) play_collision::xpos#3
(byte) play_collision::xpos#4
(byte) play_collision::xpos#5
(byte) play_collision::xpos#6
(byte) play_collision::xpos#7
(byte) play_collision::xpos#8
(byte) play_collision::xpos#9
(byte) play_collision::yp
(byte) play_collision::yp#0
(byte) play_collision::yp#1
(byte) play_collision::yp#2
(byte) play_collision::yp#3
(byte) play_collision::yp#4
(byte) play_collision::yp#5
(byte) play_collision::yp#6
(byte) play_collision::yp#7
(byte) play_collision::yp#8
(byte) play_collision::yp#9
(byte) play_collision::ypos
(byte) play_collision::ypos#0
(byte) play_collision::ypos#1
(byte) play_collision::ypos#2
(byte) play_collision::ypos#3
(byte) play_collision::ypos#4
(byte) play_collision::ypos#5
(void()) play_increase_level()
(bool~) play_increase_level::$0
(number~) play_increase_level::$1
(bool~) play_increase_level::$2
(bool~) play_increase_level::$3
(bool~) play_increase_level::$4
(byte~) play_increase_level::$5
(label) play_increase_level::@1
(label) play_increase_level::@2
(label) play_increase_level::@3
(label) play_increase_level::@4
(label) play_increase_level::@5
(label) play_increase_level::@6
(label) play_increase_level::@7
(label) play_increase_level::@return
(byte) play_increase_level::b
(byte) play_increase_level::b#0
(byte) play_increase_level::b#1
(byte) play_increase_level::b#2
(void()) play_init()
(bool~) play_init::$0
(bool~) play_init::$1
(byte~) play_init::$2
(byte~) play_init::$3
(label) play_init::@1
(label) play_init::@2
(label) play_init::@3
(label) play_init::@return
(byte) play_init::b
(byte) play_init::b#0
(byte) play_init::b#1
(byte) play_init::b#2
(byte) play_init::idx
(byte) play_init::idx#0
(byte) play_init::idx#1
(byte) play_init::idx#2
(byte) play_init::j
(byte) play_init::j#0
(byte) play_init::j#1
(byte) play_init::j#2
(byte*) play_init::pli
(byte*) play_init::pli#0
(byte*) play_init::pli#1
(byte*) play_init::pli#2
(void()) play_lock_current()
(bool~) play_lock_current::$0
(bool~) play_lock_current::$1
(bool~) play_lock_current::$2
(bool~) play_lock_current::$3
(byte~) play_lock_current::$4
(label) play_lock_current::@1
(label) play_lock_current::@2
(label) play_lock_current::@3
(label) play_lock_current::@4
(label) play_lock_current::@5
(label) play_lock_current::@return
(byte) play_lock_current::c
(byte) play_lock_current::c#0
(byte) play_lock_current::c#1
(byte) play_lock_current::c#2
(byte) play_lock_current::c#3
(byte) play_lock_current::c#4
(byte) play_lock_current::i
(byte) play_lock_current::i#0
(byte) play_lock_current::i#1
(byte) play_lock_current::i#2
(byte) play_lock_current::i#3
(byte) play_lock_current::i#4
(byte) play_lock_current::i#5
(byte) play_lock_current::i#6
(byte) play_lock_current::l
(byte) play_lock_current::l#0
(byte) play_lock_current::l#1
(byte) play_lock_current::l#2
(byte) play_lock_current::l#3
(byte) play_lock_current::l#4
(byte) play_lock_current::l#5
(byte) play_lock_current::l#6
(byte*) play_lock_current::playfield_line
(byte*) play_lock_current::playfield_line#0
(byte*) play_lock_current::playfield_line#1
(byte*) play_lock_current::playfield_line#2
(byte*) play_lock_current::playfield_line#3
(byte) play_lock_current::xp
(byte) play_lock_current::xp#0
(byte) play_lock_current::xp#1
(byte) play_lock_current::xp#2
(byte) play_lock_current::xp#3
(byte) play_lock_current::xp#4
(byte) play_lock_current::yp
(byte) play_lock_current::yp#0
(byte) play_lock_current::yp#1
(byte) play_lock_current::yp#2
(byte) play_lock_current::yp#3
(byte) play_lock_current::yp#4
(byte) play_lock_current::yp#5
(byte) play_lock_current::yp#6
(byte()) play_move_down((byte) play_move_down::key_event)
(bool~) play_move_down::$0
(bool~) play_move_down::$1
(bool~) play_move_down::$10
(number~) play_move_down::$11
(byte~) play_move_down::$12
(bool~) play_move_down::$13
(byte~) play_move_down::$15
(byte~) play_move_down::$2
(bool~) play_move_down::$3
(bool~) play_move_down::$4
(bool~) play_move_down::$5
(bool~) play_move_down::$6
(bool~) play_move_down::$7
(bool~) play_move_down::$8
(bool~) play_move_down::$9
(label) play_move_down::@1
(label) play_move_down::@10
(label) play_move_down::@11
(label) play_move_down::@12
(label) play_move_down::@13
(label) play_move_down::@14
(label) play_move_down::@15
(label) play_move_down::@16
(label) play_move_down::@17
(label) play_move_down::@18
(label) play_move_down::@2
(label) play_move_down::@3
(label) play_move_down::@4
(label) play_move_down::@5
(label) play_move_down::@6
(label) play_move_down::@7
(label) play_move_down::@8
(label) play_move_down::@9
(label) play_move_down::@return
(byte) play_move_down::key_event
(byte) play_move_down::key_event#0
(byte) play_move_down::key_event#1
(byte) play_move_down::movedown
(byte) play_move_down::movedown#0
(byte) play_move_down::movedown#1
(byte) play_move_down::movedown#10
(byte) play_move_down::movedown#11
(byte) play_move_down::movedown#2
(byte) play_move_down::movedown#3
(byte) play_move_down::movedown#4
(byte) play_move_down::movedown#5
(byte) play_move_down::movedown#6
(byte) play_move_down::movedown#7
(byte) play_move_down::movedown#8
(byte) play_move_down::movedown#9
(byte) play_move_down::removed
(byte) play_move_down::removed#0
(byte) play_move_down::return
(byte) play_move_down::return#0
(byte) play_move_down::return#1
(byte) play_move_down::return#2
(byte) play_move_down::return#3
(byte) play_move_down::return#4
(byte) play_move_down::return#5
(byte()) play_move_leftright((byte) play_move_leftright::key_event)
(bool~) play_move_leftright::$0
(bool~) play_move_leftright::$1
(bool~) play_move_leftright::$10
(bool~) play_move_leftright::$2
(number~) play_move_leftright::$3
(byte~) play_move_leftright::$4
(bool~) play_move_leftright::$5
(bool~) play_move_leftright::$6
(number~) play_move_leftright::$7
(byte~) play_move_leftright::$8
(bool~) play_move_leftright::$9
(label) play_move_leftright::@1
(label) play_move_leftright::@2
(label) play_move_leftright::@3
(label) play_move_leftright::@4
(label) play_move_leftright::@5
(label) play_move_leftright::@6
(label) play_move_leftright::@7
(label) play_move_leftright::@8
(label) play_move_leftright::@return
(byte) play_move_leftright::key_event
(byte) play_move_leftright::key_event#0
(byte) play_move_leftright::key_event#1
(byte) play_move_leftright::key_event#2
(byte) play_move_leftright::return
(byte) play_move_leftright::return#0
(byte) play_move_leftright::return#1
(byte) play_move_leftright::return#2
(byte) play_move_leftright::return#3
(byte) play_move_leftright::return#4
(byte) play_move_leftright::return#5
(byte) play_move_leftright::return#6
(byte()) play_move_rotate((byte) play_move_rotate::key_event)
(bool~) play_move_rotate::$0
(bool~) play_move_rotate::$1
(byte~) play_move_rotate::$2
(bool~) play_move_rotate::$3
(bool~) play_move_rotate::$4
(number~) play_move_rotate::$5
(number~) play_move_rotate::$6
(number~) play_move_rotate::$7
(number~) play_move_rotate::$8
(byte*~) play_move_rotate::$9
(label) play_move_rotate::@1
(label) play_move_rotate::@2
(label) play_move_rotate::@3
(label) play_move_rotate::@4
(label) play_move_rotate::@5
(label) play_move_rotate::@6
(label) play_move_rotate::@7
(label) play_move_rotate::@8
(label) play_move_rotate::@return
(byte) play_move_rotate::key_event
(byte) play_move_rotate::key_event#0
(byte) play_move_rotate::key_event#1
(byte) play_move_rotate::key_event#2
(byte) play_move_rotate::orientation
(byte) play_move_rotate::orientation#0
(byte) play_move_rotate::orientation#1
(byte) play_move_rotate::orientation#2
(byte) play_move_rotate::orientation#3
(byte) play_move_rotate::orientation#4
(byte) play_move_rotate::orientation#5
(byte) play_move_rotate::return
(byte) play_move_rotate::return#0
(byte) play_move_rotate::return#1
(byte) play_move_rotate::return#2
(byte) play_move_rotate::return#3
(byte) play_move_rotate::return#4
(byte) play_move_rotate::return#5
(byte) play_move_rotate::return#6
(byte()) play_movement((byte) play_movement::key_event)
(byte~) play_movement::$0
(bool~) play_movement::$1
(bool~) play_movement::$2
(byte~) play_movement::$3
(byte~) play_movement::$4
(label) play_movement::@1
(label) play_movement::@2
(label) play_movement::@3
(label) play_movement::@4
(label) play_movement::@5
(label) play_movement::@return
(byte) play_movement::key_event
(byte) play_movement::key_event#0
(byte) play_movement::key_event#1
(byte) play_movement::key_event#2
(byte) play_movement::key_event#3
(byte) play_movement::key_event#4
(byte) play_movement::render
(byte) play_movement::render#0
(byte) play_movement::render#1
(byte) play_movement::render#2
(byte) play_movement::render#3
(byte) play_movement::render#4
(byte) play_movement::render#5
(byte) play_movement::render#6
(byte) play_movement::render#7
(byte) play_movement::render#8
(byte) play_movement::return
(byte) play_movement::return#0
(byte) play_movement::return#1
(byte) play_movement::return#2
(byte) play_movement::return#3
(byte) play_movement::return#4
(byte) play_movement::return#5
(byte()) play_remove_lines()
(bool~) play_remove_lines::$0
(bool~) play_remove_lines::$1
(bool~) play_remove_lines::$2
(bool~) play_remove_lines::$3
(bool~) play_remove_lines::$4
(byte~) play_remove_lines::$5
(bool~) play_remove_lines::$6
(bool~) play_remove_lines::$7
(label) play_remove_lines::@1
(label) play_remove_lines::@10
(label) play_remove_lines::@2
(label) play_remove_lines::@3
(label) play_remove_lines::@4
(label) play_remove_lines::@5
(label) play_remove_lines::@6
(label) play_remove_lines::@7
(label) play_remove_lines::@8
(label) play_remove_lines::@9
(label) play_remove_lines::@return
(byte) play_remove_lines::c
(byte) play_remove_lines::c#0
(byte) play_remove_lines::c#1
(byte) play_remove_lines::c#2
(byte) play_remove_lines::full
(byte) play_remove_lines::full#0
(byte) play_remove_lines::full#1
(byte) play_remove_lines::full#2
(byte) play_remove_lines::full#3
(byte) play_remove_lines::full#4
(byte) play_remove_lines::r
(byte) play_remove_lines::r#0
(byte) play_remove_lines::r#1
(byte) play_remove_lines::r#2
(byte) play_remove_lines::r#3
(byte) play_remove_lines::r#4
(byte) play_remove_lines::r#5
(byte) play_remove_lines::r#6
(byte) play_remove_lines::r#7
(byte) play_remove_lines::r#8
(byte) play_remove_lines::removed
(byte) play_remove_lines::removed#0
(byte) play_remove_lines::removed#1
(byte) play_remove_lines::removed#10
(byte) play_remove_lines::removed#11
(byte) play_remove_lines::removed#2
(byte) play_remove_lines::removed#3
(byte) play_remove_lines::removed#4
(byte) play_remove_lines::removed#5
(byte) play_remove_lines::removed#6
(byte) play_remove_lines::removed#7
(byte) play_remove_lines::removed#8
(byte) play_remove_lines::removed#9
(byte) play_remove_lines::return
(byte) play_remove_lines::return#0
(byte) play_remove_lines::return#1
(byte) play_remove_lines::return#2
(byte) play_remove_lines::return#3
(byte) play_remove_lines::return#4
(byte) play_remove_lines::w
(byte) play_remove_lines::w#0
(byte) play_remove_lines::w#1
(byte) play_remove_lines::w#10
(byte) play_remove_lines::w#11
(byte) play_remove_lines::w#12
(byte) play_remove_lines::w#2
(byte) play_remove_lines::w#3
(byte) play_remove_lines::w#4
(byte) play_remove_lines::w#5
(byte) play_remove_lines::w#6
(byte) play_remove_lines::w#7
(byte) play_remove_lines::w#8
(byte) play_remove_lines::w#9
(byte) play_remove_lines::x
(byte) play_remove_lines::x#0
(byte) play_remove_lines::x#1
(byte) play_remove_lines::x#2
(byte) play_remove_lines::x#3
(byte) play_remove_lines::x#4
(byte) play_remove_lines::y
(byte) play_remove_lines::y#0
(byte) play_remove_lines::y#1
(byte) play_remove_lines::y#2
(byte) play_remove_lines::y#3
(byte) play_remove_lines::y#4
(byte) play_remove_lines::y#5
(byte) play_remove_lines::y#6
(byte) play_remove_lines::y#7
(byte) play_remove_lines::y#8
(void()) play_spawn_current()
(byte*~) play_spawn_current::$0
(byte~) play_spawn_current::$1
(bool~) play_spawn_current::$2
(bool~) play_spawn_current::$3
(bool~) play_spawn_current::$4
(byte~) play_spawn_current::$5
(number~) play_spawn_current::$6
(byte~) play_spawn_current::$7
(label) play_spawn_current::@1
(label) play_spawn_current::@2
(label) play_spawn_current::@3
(label) play_spawn_current::@4
(label) play_spawn_current::@5
(label) play_spawn_current::@6
(label) play_spawn_current::@return
(byte) play_spawn_current::current_piece_idx
(byte) play_spawn_current::current_piece_idx#0
(byte) play_spawn_current::piece_idx
(byte) play_spawn_current::piece_idx#0
(byte) play_spawn_current::piece_idx#1
(byte) play_spawn_current::piece_idx#2
(byte) play_spawn_current::piece_idx#3
(label) play_spawn_current::sid_rnd1
(label) play_spawn_current::sid_rnd1_@return
(byte) play_spawn_current::sid_rnd1_return
(byte) play_spawn_current::sid_rnd1_return#0
(byte) play_spawn_current::sid_rnd1_return#1
(byte) play_spawn_current::sid_rnd1_return#2
(byte) play_spawn_current::sid_rnd1_return#3
(void()) play_update_score((byte) play_update_score::removed)
(bool~) play_update_score::$0
(bool~) play_update_score::$1
(byte~) play_update_score::$2
(number~) play_update_score::$3
(byte~) play_update_score::$4
(number~) play_update_score::$5
(bool~) play_update_score::$6
(bool~) play_update_score::$7
(byte~) play_update_score::$9
(label) play_update_score::@1
(label) play_update_score::@2
(label) play_update_score::@3
(label) play_update_score::@return
(dword) play_update_score::add_bcd
(dword) play_update_score::add_bcd#0
(byte) play_update_score::lines_after
(byte) play_update_score::lines_after#0
(byte) play_update_score::lines_before
(byte) play_update_score::lines_before#0
(byte) play_update_score::removed
(byte) play_update_score::removed#0
(byte) play_update_score::removed#1
(byte) play_update_score::removed#2
(const byte*) playfield[(const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS]  = { fill( PLAYFIELD_LINES*PLAYFIELD_COLS, 0) }
(const byte**) playfield_lines[(const nomodify byte) PLAYFIELD_LINES]  = { fill( PLAYFIELD_LINES, 0) }
(const byte*) playfield_lines_idx[(const nomodify byte) PLAYFIELD_LINES+(number) 1]  = { fill( PLAYFIELD_LINES+1, 0) }
(void()) render_bcd((byte*) render_bcd::screen , (word) render_bcd::offset , (byte) render_bcd::bcd , (byte) render_bcd::only_low)
(byte*~) render_bcd::$0
(bool~) render_bcd::$1
(bool~) render_bcd::$2
(number~) render_bcd::$3
(number~) render_bcd::$4
(byte~) render_bcd::$5
(byte~) render_bcd::$6
(label) render_bcd::@1
(label) render_bcd::@2
(label) render_bcd::@return
(const nomodify byte) render_bcd::ZERO_CHAR = (byte) $35
(byte) render_bcd::bcd
(byte) render_bcd::bcd#0
(byte) render_bcd::bcd#1
(byte) render_bcd::bcd#2
(byte) render_bcd::bcd#3
(byte) render_bcd::bcd#4
(byte) render_bcd::bcd#5
(byte) render_bcd::bcd#6
(byte) render_bcd::bcd#7
(byte) render_bcd::bcd#8
(word) render_bcd::offset
(word) render_bcd::offset#0
(word) render_bcd::offset#1
(word) render_bcd::offset#2
(word) render_bcd::offset#3
(word) render_bcd::offset#4
(word) render_bcd::offset#5
(word) render_bcd::offset#6
(byte) render_bcd::only_low
(byte) render_bcd::only_low#0
(byte) render_bcd::only_low#1
(byte) render_bcd::only_low#2
(byte) render_bcd::only_low#3
(byte) render_bcd::only_low#4
(byte) render_bcd::only_low#5
(byte) render_bcd::only_low#6
(byte*) render_bcd::screen
(byte*) render_bcd::screen#0
(byte*) render_bcd::screen#1
(byte*) render_bcd::screen#2
(byte*) render_bcd::screen#3
(byte*) render_bcd::screen#4
(byte*) render_bcd::screen#5
(byte*) render_bcd::screen#6
(byte*) render_bcd::screen_pos
(byte*) render_bcd::screen_pos#0
(byte*) render_bcd::screen_pos#1
(byte*) render_bcd::screen_pos#2
(byte*) render_bcd::screen_pos#3
(byte*) render_bcd::screen_pos#4
(void()) render_init()
(bool~) render_init::$3
(byte~) render_init::$4
(byte~) render_init::$5
(label) render_init::@1
(label) render_init::@2
(label) render_init::@3
(label) render_init::@4
(label) render_init::@5
(label) render_init::@return
(byte) render_init::i
(byte) render_init::i#0
(byte) render_init::i#1
(byte) render_init::i#2
(byte*) render_init::li_1
(byte*) render_init::li_1#0
(byte*) render_init::li_1#1
(byte*) render_init::li_1#2
(byte*) render_init::li_2
(byte*) render_init::li_2#0
(byte*) render_init::li_2#1
(byte*) render_init::li_2#2
(label) render_init::vicSelectGfxBank1
(byte~) render_init::vicSelectGfxBank1_$0
(label) render_init::vicSelectGfxBank1_@1
(byte*) render_init::vicSelectGfxBank1_gfx
(byte*) render_init::vicSelectGfxBank1_gfx#0
(byte*) render_init::vicSelectGfxBank1_gfx#1
(label) render_init::vicSelectGfxBank1_toDd001
(byte~) render_init::vicSelectGfxBank1_toDd001_$0
(number~) render_init::vicSelectGfxBank1_toDd001_$1
(number~) render_init::vicSelectGfxBank1_toDd001_$2
(label) render_init::vicSelectGfxBank1_toDd001_@return
(byte*) render_init::vicSelectGfxBank1_toDd001_gfx
(byte*) render_init::vicSelectGfxBank1_toDd001_gfx#0
(byte*) render_init::vicSelectGfxBank1_toDd001_gfx#1
(byte) render_init::vicSelectGfxBank1_toDd001_return
(byte) render_init::vicSelectGfxBank1_toDd001_return#0
(byte) render_init::vicSelectGfxBank1_toDd001_return#1
(byte) render_init::vicSelectGfxBank1_toDd001_return#2
(byte) render_init::vicSelectGfxBank1_toDd001_return#3
(void()) render_moving()
(bool~) render_moving::$0
(byte~) render_moving::$1
(bool~) render_moving::$2
(bool~) render_moving::$3
(bool~) render_moving::$4
(bool~) render_moving::$5
(byte~) render_moving::$6
(label) render_moving::@1
(label) render_moving::@2
(label) render_moving::@3
(label) render_moving::@4
(label) render_moving::@5
(label) render_moving::@6
(label) render_moving::@7
(label) render_moving::@return
(byte) render_moving::c
(byte) render_moving::c#0
(byte) render_moving::c#1
(byte) render_moving::c#2
(byte) render_moving::c#3
(byte) render_moving::c#4
(byte) render_moving::current_cell
(byte) render_moving::current_cell#0
(byte) render_moving::i
(byte) render_moving::i#0
(byte) render_moving::i#1
(byte) render_moving::i#2
(byte) render_moving::i#3
(byte) render_moving::i#4
(byte) render_moving::i#5
(byte) render_moving::i#6
(byte) render_moving::i#7
(byte) render_moving::i#8
(byte) render_moving::i#9
(byte) render_moving::l
(byte) render_moving::l#0
(byte) render_moving::l#1
(byte) render_moving::l#2
(byte) render_moving::l#3
(byte) render_moving::l#4
(byte) render_moving::l#5
(byte) render_moving::l#6
(byte) render_moving::l#7
(byte) render_moving::l#8
(byte*) render_moving::screen_line
(byte*) render_moving::screen_line#0
(byte*) render_moving::screen_line#1
(byte*) render_moving::screen_line#2
(byte*) render_moving::screen_line#3
(byte) render_moving::xpos
(byte) render_moving::xpos#0
(byte) render_moving::xpos#1
(byte) render_moving::xpos#2
(byte) render_moving::xpos#3
(byte) render_moving::xpos#4
(byte) render_moving::ypos
(byte) render_moving::ypos#0
(byte) render_moving::ypos#1
(byte) render_moving::ypos#2
(byte) render_moving::ypos#3
(byte) render_moving::ypos#4
(byte) render_moving::ypos#5
(byte) render_moving::ypos#6
(byte) render_moving::ypos#7
(byte) render_moving::ypos#8
(void()) render_next()
(bool~) render_next::$0
(byte*~) render_next::$1
(byte*~) render_next::$2
(bool~) render_next::$3
(bool~) render_next::$4
(bool~) render_next::$5
(byte~) render_next::$6
(label) render_next::@1
(label) render_next::@2
(label) render_next::@3
(label) render_next::@4
(label) render_next::@5
(label) render_next::@6
(label) render_next::@7
(label) render_next::@8
(label) render_next::@9
(label) render_next::@return
(byte) render_next::c
(byte) render_next::c#0
(byte) render_next::c#1
(byte) render_next::c#2
(byte) render_next::c#3
(byte) render_next::c#4
(byte) render_next::c#5
(byte) render_next::cell
(byte) render_next::cell#0
(byte) render_next::l
(byte) render_next::l#0
(byte) render_next::l#1
(byte) render_next::l#2
(byte) render_next::l#3
(byte) render_next::l#4
(byte) render_next::l#5
(byte) render_next::l#6
(byte) render_next::l#7
(const word) render_next::next_area_offset = (word)(number) $28*(number) $c+(number) $18+(number) 4
(byte) render_next::next_piece_char
(byte) render_next::next_piece_char#0
(byte) render_next::next_piece_char#1
(byte) render_next::next_piece_char#2
(byte) render_next::next_piece_char#3
(byte) render_next::next_piece_char#4
(byte) render_next::next_piece_char#5
(byte) render_next::next_piece_char#6
(byte*) render_next::next_piece_gfx
(byte*) render_next::next_piece_gfx#0
(byte*) render_next::next_piece_gfx#1
(byte*) render_next::next_piece_gfx#2
(byte*) render_next::next_piece_gfx#3
(byte*) render_next::next_piece_gfx#4
(byte*) render_next::next_piece_gfx#5
(byte*) render_next::next_piece_gfx#6
(byte*) render_next::next_piece_gfx#7
(byte*) render_next::screen_next_area
(byte*) render_next::screen_next_area#0
(byte*) render_next::screen_next_area#1
(byte*) render_next::screen_next_area#10
(byte*) render_next::screen_next_area#11
(byte*) render_next::screen_next_area#2
(byte*) render_next::screen_next_area#3
(byte*) render_next::screen_next_area#4
(byte*) render_next::screen_next_area#5
(byte*) render_next::screen_next_area#6
(byte*) render_next::screen_next_area#7
(byte*) render_next::screen_next_area#8
(byte*) render_next::screen_next_area#9
(void()) render_playfield()
(byte~) render_playfield::$0
(bool~) render_playfield::$1
(bool~) render_playfield::$2
(byte~) render_playfield::$3
(label) render_playfield::@1
(label) render_playfield::@2
(label) render_playfield::@3
(label) render_playfield::@return
(byte) render_playfield::c
(byte) render_playfield::c#0
(byte) render_playfield::c#1
(byte) render_playfield::c#2
(byte) render_playfield::i
(byte) render_playfield::i#0
(byte) render_playfield::i#1
(byte) render_playfield::i#2
(byte) render_playfield::i#3
(byte) render_playfield::i#4
(byte) render_playfield::l
(byte) render_playfield::l#0
(byte) render_playfield::l#1
(byte) render_playfield::l#2
(byte) render_playfield::l#3
(byte) render_playfield::l#4
(byte*) render_playfield::screen_line
(byte*) render_playfield::screen_line#0
(byte*) render_playfield::screen_line#1
(byte*) render_playfield::screen_line#2
(void()) render_score()
(bool~) render_score::$0
(number~) render_score::$2
(number~) render_score::$4
(byte~) render_score::$6
(number~) render_score::$8
(byte~) render_score::$9
(label) render_score::@1
(label) render_score::@2
(label) render_score::@3
(label) render_score::@4
(label) render_score::@5
(label) render_score::@6
(label) render_score::@7
(label) render_score::@8
(label) render_score::@9
(label) render_score::@return
(const word) render_score::level_offset = (word)(number) $28*(number) $13+(number) $1f
(const word) render_score::lines_offset = (word)(number) $28*(number) 1+(number) $16
(const byte*) render_score::score_bytes = (byte*)&(volatile dword) score_bcd
(const word) render_score::score_offset = (word)(number) $28*(number) 5+(number) $1c
(byte*) render_score::screen
(byte*) render_score::screen#0
(byte*) render_score::screen#1
(byte*) render_score::screen#2
(byte*) render_score::screen#3
(byte*) render_score::screen#4
(byte*) render_score::screen#5
(byte*) render_score::screen#6
(byte*) render_score::screen#7
(byte*) render_score::screen#8
(void()) render_screen_original((byte*) render_screen_original::screen)
(bool~) render_screen_original::$0
(bool~) render_screen_original::$1
(bool~) render_screen_original::$2
(bool~) render_screen_original::$3
(label) render_screen_original::@1
(label) render_screen_original::@2
(label) render_screen_original::@3
(label) render_screen_original::@4
(label) render_screen_original::@5
(label) render_screen_original::@return
(const byte) render_screen_original::SPACE = (byte) 0
(byte*) render_screen_original::cols
(byte*) render_screen_original::cols#0
(byte*) render_screen_original::cols#1
(byte*) render_screen_original::cols#2
(byte*) render_screen_original::cols#3
(byte*) render_screen_original::cols#4
(byte*) render_screen_original::cols#5
(byte*) render_screen_original::cols#6
(byte*) render_screen_original::cols#7
(byte*) render_screen_original::cols#8
(byte*) render_screen_original::ocols
(byte*) render_screen_original::ocols#0
(byte*) render_screen_original::ocols#1
(byte*) render_screen_original::ocols#2
(byte*) render_screen_original::ocols#3
(byte*) render_screen_original::ocols#4
(byte*) render_screen_original::ocols#5
(byte*) render_screen_original::ocols#6
(byte*) render_screen_original::oscr
(byte*) render_screen_original::oscr#0
(byte*) render_screen_original::oscr#1
(byte*) render_screen_original::oscr#2
(byte*) render_screen_original::oscr#3
(byte*) render_screen_original::oscr#4
(byte*) render_screen_original::oscr#5
(byte*) render_screen_original::oscr#6
(byte*) render_screen_original::screen
(byte*) render_screen_original::screen#0
(byte*) render_screen_original::screen#1
(byte*) render_screen_original::screen#10
(byte*) render_screen_original::screen#2
(byte*) render_screen_original::screen#3
(byte*) render_screen_original::screen#4
(byte*) render_screen_original::screen#5
(byte*) render_screen_original::screen#6
(byte*) render_screen_original::screen#7
(byte*) render_screen_original::screen#8
(byte*) render_screen_original::screen#9
(byte) render_screen_original::x
(byte) render_screen_original::x#0
(byte) render_screen_original::x#1
(byte) render_screen_original::x#2
(byte) render_screen_original::x#3
(byte) render_screen_original::x#4
(byte) render_screen_original::x#5
(byte) render_screen_original::x#6
(byte) render_screen_original::y
(byte) render_screen_original::y#0
(byte) render_screen_original::y#1
(byte) render_screen_original::y#2
(byte) render_screen_original::y#3
(byte) render_screen_original::y#4
(byte) render_screen_original::y#5
(byte) render_screen_original::y#6
(byte) render_screen_render
(byte) render_screen_render#0
(byte) render_screen_render#1
(byte) render_screen_render#10
(byte) render_screen_render#11
(byte) render_screen_render#12
(byte) render_screen_render#13
(byte) render_screen_render#14
(byte) render_screen_render#15
(byte) render_screen_render#16
(byte) render_screen_render#17
(byte) render_screen_render#18
(byte) render_screen_render#19
(byte) render_screen_render#2
(byte) render_screen_render#20
(byte) render_screen_render#21
(byte) render_screen_render#22
(byte) render_screen_render#23
(byte) render_screen_render#24
(byte) render_screen_render#25
(byte) render_screen_render#26
(byte) render_screen_render#27
(byte) render_screen_render#28
(byte) render_screen_render#29
(byte) render_screen_render#3
(byte) render_screen_render#30
(byte) render_screen_render#31
(byte) render_screen_render#32
(byte) render_screen_render#33
(byte) render_screen_render#34
(byte) render_screen_render#35
(byte) render_screen_render#36
(byte) render_screen_render#37
(byte) render_screen_render#38
(byte) render_screen_render#39
(byte) render_screen_render#4
(byte) render_screen_render#40
(byte) render_screen_render#41
(byte) render_screen_render#42
(byte) render_screen_render#43
(byte) render_screen_render#44
(byte) render_screen_render#45
(byte) render_screen_render#46
(byte) render_screen_render#47
(byte) render_screen_render#48
(byte) render_screen_render#49
(byte) render_screen_render#5
(byte) render_screen_render#50
(byte) render_screen_render#51
(byte) render_screen_render#52
(byte) render_screen_render#53
(byte) render_screen_render#54
(byte) render_screen_render#55
(byte) render_screen_render#56
(byte) render_screen_render#57
(byte) render_screen_render#58
(byte) render_screen_render#59
(byte) render_screen_render#6
(byte) render_screen_render#60
(byte) render_screen_render#61
(byte) render_screen_render#62
(byte) render_screen_render#63
(byte) render_screen_render#7
(byte) render_screen_render#8
(byte) render_screen_render#9
(byte) render_screen_show
(byte) render_screen_show#0
(byte) render_screen_show#1
(byte) render_screen_show#10
(byte) render_screen_show#11
(byte) render_screen_show#12
(byte) render_screen_show#13
(byte) render_screen_show#14
(byte) render_screen_show#15
(byte) render_screen_show#16
(byte) render_screen_show#17
(byte) render_screen_show#18
(byte) render_screen_show#19
(byte) render_screen_show#2
(byte) render_screen_show#20
(byte) render_screen_show#21
(byte) render_screen_show#22
(byte) render_screen_show#23
(byte) render_screen_show#24
(byte) render_screen_show#25
(byte) render_screen_show#26
(byte) render_screen_show#27
(byte) render_screen_show#28
(byte) render_screen_show#29
(byte) render_screen_show#3
(byte) render_screen_show#30
(byte) render_screen_show#31
(byte) render_screen_show#32
(byte) render_screen_show#33
(byte) render_screen_show#34
(byte) render_screen_show#35
(byte) render_screen_show#36
(byte) render_screen_show#37
(byte) render_screen_show#38
(byte) render_screen_show#39
(byte) render_screen_show#4
(byte) render_screen_show#40
(byte) render_screen_show#41
(byte) render_screen_show#42
(byte) render_screen_show#43
(byte) render_screen_show#44
(byte) render_screen_show#45
(byte) render_screen_show#46
(byte) render_screen_show#47
(byte) render_screen_show#48
(byte) render_screen_show#49
(byte) render_screen_show#5
(byte) render_screen_show#50
(byte) render_screen_show#51
(byte) render_screen_show#52
(byte) render_screen_show#53
(byte) render_screen_show#54
(byte) render_screen_show#55
(byte) render_screen_show#56
(byte) render_screen_show#57
(byte) render_screen_show#58
(byte) render_screen_show#59
(byte) render_screen_show#6
(byte) render_screen_show#7
(byte) render_screen_show#8
(byte) render_screen_show#9
(volatile byte) render_screen_showing loadstore
(void()) render_screen_swap()
(label) render_screen_swap::@return
(void()) render_show()
(bool~) render_show::$0
(byte~) render_show::$1
(byte~) render_show::$2
(label) render_show::@1
(label) render_show::@2
(label) render_show::@3
(label) render_show::@4
(label) render_show::@5
(label) render_show::@return
(byte) render_show::d018val
(byte) render_show::d018val#0
(byte) render_show::d018val#1
(byte) render_show::d018val#2
(byte) render_show::d018val#3
(label) render_show::toD0181
(number~) render_show::toD0181_$0
(number~) render_show::toD0181_$1
(number~) render_show::toD0181_$2
(byte~) render_show::toD0181_$3
(number~) render_show::toD0181_$4
(number~) render_show::toD0181_$5
(number~) render_show::toD0181_$6
(word~) render_show::toD0181_$7
(label) render_show::toD0181_@return
(byte*) render_show::toD0181_gfx
(byte*) render_show::toD0181_gfx#0
(byte*) render_show::toD0181_gfx#1
(byte) render_show::toD0181_return
(byte) render_show::toD0181_return#0
(byte) render_show::toD0181_return#1
(byte) render_show::toD0181_return#2
(byte) render_show::toD0181_return#3
(byte*) render_show::toD0181_screen
(byte*) render_show::toD0181_screen#0
(byte*) render_show::toD0181_screen#1
(label) render_show::toD0182
(number~) render_show::toD0182_$0
(number~) render_show::toD0182_$1
(number~) render_show::toD0182_$2
(byte~) render_show::toD0182_$3
(number~) render_show::toD0182_$4
(number~) render_show::toD0182_$5
(number~) render_show::toD0182_$6
(word~) render_show::toD0182_$7
(label) render_show::toD0182_@return
(byte*) render_show::toD0182_gfx
(byte*) render_show::toD0182_gfx#0
(byte*) render_show::toD0182_gfx#1
(byte) render_show::toD0182_return
(byte) render_show::toD0182_return#0
(byte) render_show::toD0182_return#1
(byte) render_show::toD0182_return#2
(byte) render_show::toD0182_return#3
(byte*) render_show::toD0182_screen
(byte*) render_show::toD0182_screen#0
(byte*) render_show::toD0182_screen#1
(const dword*) score_add_bcd[(number) 5]  = { fill( 5, 0) }
(volatile dword) score_bcd loadstore
(const byte**) screen_lines_1[(const nomodify byte) PLAYFIELD_LINES]  = { fill( PLAYFIELD_LINES, 0) }
(const byte**) screen_lines_2[(const nomodify byte) PLAYFIELD_LINES]  = { fill( PLAYFIELD_LINES, 0) }
(void()) sprites_init()
(number~) sprites_init::$0
(number~) sprites_init::$1
(bool~) sprites_init::$2
(label) sprites_init::@1
(label) sprites_init::@return
(byte) sprites_init::s
(byte) sprites_init::s#0
(byte) sprites_init::s#1
(byte) sprites_init::s#2
(byte) sprites_init::s2
(byte) sprites_init::s2#0
(byte) sprites_init::xpos
(byte) sprites_init::xpos#0
(byte) sprites_init::xpos#1
(byte) sprites_init::xpos#2
interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
(number~) sprites_irq::$0
(bool~) sprites_irq::$1
(bool~) sprites_irq::$2
(bool~) sprites_irq::$3
(bool~) sprites_irq::$4
(byte~) sprites_irq::$5
(label) sprites_irq::@1
(label) sprites_irq::@10
(label) sprites_irq::@11
(label) sprites_irq::@2
(label) sprites_irq::@3
(label) sprites_irq::@4
(label) sprites_irq::@5
(label) sprites_irq::@6
(label) sprites_irq::@7
(label) sprites_irq::@8
(label) sprites_irq::@9
(label) sprites_irq::@return
(byte) sprites_irq::ptr
(byte) sprites_irq::ptr#0
(byte) sprites_irq::ptr#1
(byte) sprites_irq::ptr#2
(byte) sprites_irq::ptr#3
(byte) sprites_irq::ptr#4
(byte) sprites_irq::ptr#5
(byte) sprites_irq::ptr#6
(volatile byte) sprites_irq::raster_sprite_gfx_modify loadstore
(label) sprites_irq::toSpritePtr1
(number~) sprites_irq::toSpritePtr1_$0
(word~) sprites_irq::toSpritePtr1_$1
(label) sprites_irq::toSpritePtr1_@return
(byte) sprites_irq::toSpritePtr1_return
(byte) sprites_irq::toSpritePtr1_return#0
(byte) sprites_irq::toSpritePtr1_return#1
(byte) sprites_irq::toSpritePtr1_return#2
(byte) sprites_irq::toSpritePtr1_return#3
(byte*) sprites_irq::toSpritePtr1_sprite
(byte*) sprites_irq::toSpritePtr1_sprite#0
(byte*) sprites_irq::toSpritePtr1_sprite#1
(byte) sprites_irq::ypos
(byte) sprites_irq::ypos#0
(void()) sprites_irq_init()
(label) sprites_irq_init::@return
(label) toSpritePtr1
(number~) toSpritePtr1_$0
(word~) toSpritePtr1_$1
(label) toSpritePtr1_@return
(byte) toSpritePtr1_return
(byte) toSpritePtr1_return#0
(byte) toSpritePtr1_return#1
(byte) toSpritePtr1_return#2
(byte) toSpritePtr1_return#3
(byte*) toSpritePtr1_sprite
(byte*) toSpritePtr1_sprite#0
(byte*) toSpritePtr1_sprite#1

Adding number conversion cast (unumber) $13 in 
Adding number conversion cast (unumber) 1 in 
Adding number conversion cast (unumber) 8 in (number~) keyboard_event_scan::$14 ← (byte) keyboard_event_scan::keycode#3 + (number) 8
Adding number conversion cast (unumber) keyboard_event_scan::$14 in (number~) keyboard_event_scan::$14 ← (byte) keyboard_event_scan::keycode#3 + (unumber)(number) 8
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$17 ← (byte~) keyboard_event_scan::$16 != (number) 0
Adding number conversion cast (unumber) 8 in (bool~) keyboard_event_scan::$19 ← (byte) keyboard_events_size#10 != (number) 8
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$22 ← (byte) keyboard_event_scan::event_type#0 == (number) 0
Adding number conversion cast (unumber) $40 in (number~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#5 | (number) $40
Adding number conversion cast (unumber) keyboard_event_scan::$23 in (number~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#5 | (unumber)(number) $40
Adding number conversion cast (unumber) 0 in (byte) keyboard_modifiers#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$1 ← (byte~) keyboard_event_scan::$0 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$7 ← (byte~) keyboard_event_scan::$6 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$10 ← (byte~) keyboard_event_scan::$9 != (number) 0
Adding number conversion cast (unumber) 3 in (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (number) 3
Adding number conversion cast (unumber) 7 in (number~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (number) 7
Adding number conversion cast (unumber) keyboard_event_pressed::$1 in (number~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (unumber)(number) 7
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_get::$0 ← (byte) keyboard_events_size#14 == (number) 0
Adding number conversion cast (unumber) $ff in (byte) keyboard_event_get::return#0 ← (number) $ff
Adding number conversion cast (unumber) 3 in *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (number) 3
Adding number conversion cast (unumber) $40 in (number~) render_init::vicSelectGfxBank1_toDd001_$1 ← (byte~) render_init::vicSelectGfxBank1_toDd001_$0 / (number) $40
Adding number conversion cast (unumber) render_init::vicSelectGfxBank1_toDd001_$1 in (number~) render_init::vicSelectGfxBank1_toDd001_$1 ← (byte~) render_init::vicSelectGfxBank1_toDd001_$0 / (unumber)(number) $40
Adding number conversion cast (unumber) 3 in (number~) render_init::vicSelectGfxBank1_toDd001_$2 ← (number) 3 ^ (unumber~) render_init::vicSelectGfxBank1_toDd001_$1
Adding number conversion cast (unumber) render_init::vicSelectGfxBank1_toDd001_$2 in (number~) render_init::vicSelectGfxBank1_toDd001_$2 ← (unumber)(number) 3 ^ (unumber~) render_init::vicSelectGfxBank1_toDd001_$1
Adding number conversion cast (unumber) VIC_ECM|VIC_DEN|VIC_RSEL|3 in *((const nomodify byte*) D011) ← (const nomodify byte) VIC_ECM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(number) 3
Adding number conversion cast (unumber) 3 in *((const nomodify byte*) D011) ← ((unumber)) (const nomodify byte) VIC_ECM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(number) 3
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1 + (number) 0)
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2 + (number) 0)
Adding number conversion cast (unumber) $10 in (byte*) render_init::li_1#0 ← (const nomodify byte*) PLAYFIELD_SCREEN_1+(number) 2*(number) $28+(number) $10
Adding number conversion cast (unumber) 2*$28 in (byte*) render_init::li_1#0 ← (const nomodify byte*) PLAYFIELD_SCREEN_1+(number) 2*(number) $28+(unumber)(number) $10
Adding number conversion cast (unumber) $10 in (byte*) render_init::li_2#0 ← (const nomodify byte*) PLAYFIELD_SCREEN_2+(number) 2*(number) $28+(number) $10
Adding number conversion cast (unumber) 2*$28 in (byte*) render_init::li_2#0 ← (const nomodify byte*) PLAYFIELD_SCREEN_2+(number) 2*(number) $28+(unumber)(number) $10
Adding number conversion cast (unumber) $28 in (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (number) $28
Adding number conversion cast (unumber) $28 in (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (number) $28
Adding number conversion cast (unumber) 1 in (byte) render_init::i#1 ← (byte) render_init::i#2 + rangenext(0,PLAYFIELD_LINES-1)
Adding number conversion cast (unumber) 0 in (byte) render_screen_show#1 ← (number) 0
Adding number conversion cast (unumber) $20 in (byte) render_screen_render#1 ← (number) $20
Adding number conversion cast (unumber) 0 in (bool~) render_show::$0 ← (byte) render_screen_show#10 == (number) 0
Adding number conversion cast (unumber) $3fff in (number~) render_show::toD0181_$0 ← (word~) render_show::toD0181_$7 & (number) $3fff
Adding number conversion cast (unumber) render_show::toD0181_$0 in (number~) render_show::toD0181_$0 ← (word~) render_show::toD0181_$7 & (unumber)(number) $3fff
Adding number conversion cast (unumber) 4 in (number~) render_show::toD0181_$1 ← (unumber~) render_show::toD0181_$0 * (number) 4
Adding number conversion cast (unumber) render_show::toD0181_$1 in (number~) render_show::toD0181_$1 ← (unumber~) render_show::toD0181_$0 * (unumber)(number) 4
Adding number conversion cast (unumber) render_show::toD0181_$2 in (number~) render_show::toD0181_$2 ← > (unumber~) render_show::toD0181_$1
Adding number conversion cast (unumber) 4 in (number~) render_show::toD0181_$4 ← (byte~) render_show::toD0181_$3 / (number) 4
Adding number conversion cast (unumber) render_show::toD0181_$4 in (number~) render_show::toD0181_$4 ← (byte~) render_show::toD0181_$3 / (unumber)(number) 4
Adding number conversion cast (unumber) $f in (number~) render_show::toD0181_$5 ← (unumber~) render_show::toD0181_$4 & (number) $f
Adding number conversion cast (unumber) render_show::toD0181_$5 in (number~) render_show::toD0181_$5 ← (unumber~) render_show::toD0181_$4 & (unumber)(number) $f
Adding number conversion cast (unumber) render_show::toD0181_$6 in (number~) render_show::toD0181_$6 ← (unumber~) render_show::toD0181_$2 | (unumber~) render_show::toD0181_$5
Adding number conversion cast (unumber) $3fff in (number~) render_show::toD0182_$0 ← (word~) render_show::toD0182_$7 & (number) $3fff
Adding number conversion cast (unumber) render_show::toD0182_$0 in (number~) render_show::toD0182_$0 ← (word~) render_show::toD0182_$7 & (unumber)(number) $3fff
Adding number conversion cast (unumber) 4 in (number~) render_show::toD0182_$1 ← (unumber~) render_show::toD0182_$0 * (number) 4
Adding number conversion cast (unumber) render_show::toD0182_$1 in (number~) render_show::toD0182_$1 ← (unumber~) render_show::toD0182_$0 * (unumber)(number) 4
Adding number conversion cast (unumber) render_show::toD0182_$2 in (number~) render_show::toD0182_$2 ← > (unumber~) render_show::toD0182_$1
Adding number conversion cast (unumber) 4 in (number~) render_show::toD0182_$4 ← (byte~) render_show::toD0182_$3 / (number) 4
Adding number conversion cast (unumber) render_show::toD0182_$4 in (number~) render_show::toD0182_$4 ← (byte~) render_show::toD0182_$3 / (unumber)(number) 4
Adding number conversion cast (unumber) $f in (number~) render_show::toD0182_$5 ← (unumber~) render_show::toD0182_$4 & (number) $f
Adding number conversion cast (unumber) render_show::toD0182_$5 in (number~) render_show::toD0182_$5 ← (unumber~) render_show::toD0182_$4 & (unumber)(number) $f
Adding number conversion cast (unumber) render_show::toD0182_$6 in (number~) render_show::toD0182_$6 ← (unumber~) render_show::toD0182_$2 | (unumber~) render_show::toD0182_$5
Adding number conversion cast (unumber) $20 in (byte) render_screen_render#3 ← (byte) render_screen_render#10 ^ (number) $20
Adding number conversion cast (unumber) $20 in (byte) render_screen_show#3 ← (byte) render_screen_show#12 ^ (number) $20
Adding number conversion cast (unumber) 0 in (bool~) render_score::$0 ← (byte) render_screen_render#12 == (number) 0
Adding number conversion cast (unumber) 2 in (byte) render_bcd::bcd#0 ← *((const byte*) render_score::score_bytes + (number) 2)
Adding number conversion cast (unumber) 0 in (byte) render_bcd::only_low#0 ← (number) 0
Adding number conversion cast (unumber) 2 in (number~) render_score::$2 ← (const word) render_score::score_offset + (number) 2
Adding number conversion cast (unumber) render_score::$2 in (number~) render_score::$2 ← (const word) render_score::score_offset + (unumber)(number) 2
Adding number conversion cast (unumber) 1 in (byte) render_bcd::bcd#1 ← *((const byte*) render_score::score_bytes + (number) 1)
Adding number conversion cast (unumber) 0 in (byte) render_bcd::only_low#1 ← (number) 0
Adding number conversion cast (unumber) 4 in (number~) render_score::$4 ← (const word) render_score::score_offset + (number) 4
Adding number conversion cast (unumber) render_score::$4 in (number~) render_score::$4 ← (const word) render_score::score_offset + (unumber)(number) 4
Adding number conversion cast (unumber) 0 in (byte) render_bcd::bcd#2 ← *((const byte*) render_score::score_bytes + (number) 0)
Adding number conversion cast (unumber) 0 in (byte) render_bcd::only_low#2 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) render_bcd::only_low#3 ← (number) 1
Adding number conversion cast (unumber) 1 in (number~) render_score::$8 ← (const word) render_score::lines_offset + (number) 1
Adding number conversion cast (unumber) render_score::$8 in (number~) render_score::$8 ← (const word) render_score::lines_offset + (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (byte) render_bcd::only_low#4 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) render_bcd::only_low#5 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) render_bcd::$1 ← (byte) render_bcd::only_low#6 == (number) 0
Adding number conversion cast (unumber) $f in (number~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (number) $f
Adding number conversion cast (unumber) render_bcd::$3 in (number~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (unumber)(number) $f
Adding number conversion cast (unumber) render_bcd::$4 in (number~) render_bcd::$4 ← (const nomodify byte) render_bcd::ZERO_CHAR + (unumber~) render_bcd::$3
Adding number conversion cast (unumber) 4 in (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#7 >> (number) 4
Adding number conversion cast (unumber) $20*2 in (byte*) render_screen_original::oscr#0 ← (const to_nomodify byte*) PLAYFIELD_SCREEN_ORIGINAL+(number) $20*(number) 2
Adding number conversion cast (unumber) $20*2 in (byte*) render_screen_original::ocols#0 ← (const to_nomodify byte*) PLAYFIELD_COLORS_ORIGINAL+(number) $20*(number) 2
Adding number conversion cast (unumber) 4 in (bool~) render_screen_original::$0 ← (byte) render_screen_original::x#1 != (number) 4
Adding number conversion cast (unumber) $24 in (bool~) render_screen_original::$1 ← (byte) render_screen_original::x#2 != (number) $24
Adding number conversion cast (unumber) $28 in (bool~) render_screen_original::$2 ← (byte) render_screen_original::x#3 != (number) $28
Adding number conversion cast (unumber) 2 in (byte) render_playfield::i#0 ← (byte)(const nomodify byte) PLAYFIELD_COLS*(number) 2
Adding number conversion cast (unumber) 1 in (byte) render_playfield::c#1 ← (byte) render_playfield::c#2 + rangenext(0,PLAYFIELD_COLS-1)
Adding number conversion cast (unumber) 1 in (byte) render_playfield::l#1 ← (byte) render_playfield::l#3 + rangenext(2,PLAYFIELD_LINES-1)
Adding number conversion cast (unumber) 1 in (bool~) render_moving::$0 ← (byte) render_moving::ypos#2 > (number) 1
Adding number conversion cast (unumber) 4 in (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (number) 4
Adding number conversion cast (unumber) 0 in (bool~) render_moving::$2 ← (byte) render_moving::current_cell#0 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) render_next::$0 ← (byte) render_screen_render#15 == (number) 0
Adding number conversion cast (unumber) 0 in (bool~) render_next::$3 ← (byte) render_next::cell#0 != (number) 0
Adding number conversion cast (unumber) 0 in *((byte*) render_next::screen_next_area#6) ← (number) 0
Adding number conversion cast (unumber) $24 in (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#8 + (number) $24
Adding number conversion cast (unumber) $f in *((const nomodify byte*) SPRITES_ENABLE) ← (number) $f
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SPRITES_MC) ← (number) 0
Adding number conversion cast (unumber) 2 in (number~) sprites_init::$0 ← (byte) sprites_init::s#2 * (number) 2
Adding number conversion cast (unumber) sprites_init::$0 in (number~) sprites_init::$0 ← (byte) sprites_init::s#2 * (unumber)(number) 2
Adding number conversion cast (unumber) $18 in (number~) sprites_init::$1 ← (byte) sprites_init::xpos#2 + (number) $18
Adding number conversion cast (unumber) sprites_init::$1 in (number~) sprites_init::$1 ← (byte) sprites_init::xpos#2 + (unumber)(number) $18
Adding number conversion cast (unumber) $15 in (volatile byte) irq_sprite_ypos ← (byte)(const nomodify byte) SPRITES_FIRST_YPOS+(number) $15
Adding number conversion cast (unumber) $40 in (number~) toSpritePtr1_$0 ← (word~) toSpritePtr1_$1 / (number) $40
Adding number conversion cast (unumber) toSpritePtr1_$0 in (number~) toSpritePtr1_$0 ← (word~) toSpritePtr1_$1 / (unumber)(number) $40
Adding number conversion cast (unumber) 3 in (number~) $1 ← (byte~) $0 + (number) 3
Adding number conversion cast (unumber) $1 in (number~) $1 ← (byte~) $0 + (unumber)(number) 3
Adding number conversion cast (unumber) $7f in *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (number) $7f
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SPRITES_YPOS + (number) 0) ← (byte) sprites_irq::ypos#0
Adding number conversion cast (unumber) 2 in *((const nomodify byte*) SPRITES_YPOS + (number) 2) ← (byte) sprites_irq::ypos#0
Adding number conversion cast (unumber) 4 in *((const nomodify byte*) SPRITES_YPOS + (number) 4) ← (byte) sprites_irq::ypos#0
Adding number conversion cast (unumber) 6 in *((const nomodify byte*) SPRITES_YPOS + (number) 6) ← (byte) sprites_irq::ypos#0
Adding number conversion cast (unumber) 1 in (number~) sprites_irq::$0 ← (volatile byte) irq_raster_next + (number) 1
Adding number conversion cast (unumber) sprites_irq::$0 in (number~) sprites_irq::$0 ← (volatile byte) irq_raster_next + (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) sprites_irq::$1 ← (volatile byte) render_screen_showing == (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1 + (number) 0) ← (byte) sprites_irq::ptr#5
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1 + (number) 1) ← (byte) sprites_irq::ptr#1
Adding number conversion cast (unumber) 2 in *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1 + (number) 2) ← (byte) sprites_irq::ptr#1
Adding number conversion cast (unumber) 3 in *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1 + (number) 3) ← (byte) sprites_irq::ptr#2
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2 + (number) 0) ← (byte) sprites_irq::ptr#6
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2 + (number) 1) ← (byte) sprites_irq::ptr#3
Adding number conversion cast (unumber) 2 in *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2 + (number) 2) ← (byte) sprites_irq::ptr#3
Adding number conversion cast (unumber) 3 in *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2 + (number) 3) ← (byte) sprites_irq::ptr#4
Adding number conversion cast (unumber) 9 in (bool~) sprites_irq::$2 ← (volatile byte) irq_cnt == (number) 9
Adding number conversion cast (unumber) $15 in (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (number) $15
Adding number conversion cast (unumber) $40 in (number~) sprites_irq::toSpritePtr1_$0 ← (word~) sprites_irq::toSpritePtr1_$1 / (number) $40
Adding number conversion cast (unumber) sprites_irq::toSpritePtr1_$0 in (number~) sprites_irq::toSpritePtr1_$0 ← (word~) sprites_irq::toSpritePtr1_$1 / (unumber)(number) $40
Adding number conversion cast (unumber) $a in (bool~) sprites_irq::$3 ← (volatile byte) irq_cnt == (number) $a
Adding number conversion cast (unumber) 0 in (volatile byte) irq_cnt ← (number) 0
Adding number conversion cast (unumber) $15 in (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (number) $15
Adding number conversion cast (unumber) 3 in (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (number) 3
Adding number conversion cast (unumber) $14 in (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (number) $14
Adding number conversion cast (unumber) $15 in (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (number) $15
Adding number conversion cast (unumber) 3 in (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (number) 3
Adding number conversion cast (unumber) 1 in (byte) play_init::j#1 ← (byte) play_init::j#2 + rangenext(0,PLAYFIELD_LINES-1)
Adding number conversion cast (unumber) 0 in (bool~) play_movement::$1 ← (byte) game_over#1 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) play_move_down::$3 ← (byte~) play_move_down::$2 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) play_move_down::$7 ← (byte) play_move_down::movedown#6 != (number) 0
Adding number conversion cast (unumber) 0 in (byte) play_move_down::return#1 ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) play_move_down::$11 ← (byte) current_ypos#16 + (number) 1
Adding number conversion cast (unumber) play_move_down::$11 in (number~) play_move_down::$11 ← (byte) current_ypos#16 + (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (byte) current_movedown_counter#4 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) play_move_down::return#2 ← (number) 1
Adding number conversion cast (unumber) 1 in (number~) play_move_leftright::$7 ← (byte) current_xpos#23 - (number) 1
Adding number conversion cast (unumber) play_move_leftright::$7 in (number~) play_move_leftright::$7 ← (byte) current_xpos#23 - (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (number~) play_move_leftright::$3 ← (byte) current_xpos#24 + (number) 1
Adding number conversion cast (unumber) play_move_leftright::$3 in (number~) play_move_leftright::$3 ← (byte) current_xpos#24 + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (byte) play_move_leftright::return#1 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) play_move_leftright::return#3 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) play_move_leftright::return#4 ← (number) 1
Adding number conversion cast (unumber) $10 in (number~) play_move_rotate::$7 ← (byte) current_orientation#23 - (number) $10
Adding number conversion cast (unumber) play_move_rotate::$7 in (number~) play_move_rotate::$7 ← (byte) current_orientation#23 - (unumber)(number) $10
Adding number conversion cast (unumber) $3f in (number~) play_move_rotate::$8 ← (unumber~) play_move_rotate::$7 & (number) $3f
Adding number conversion cast (unumber) play_move_rotate::$8 in (number~) play_move_rotate::$8 ← (unumber~) play_move_rotate::$7 & (unumber)(number) $3f
Adding number conversion cast (unumber) $10 in (number~) play_move_rotate::$5 ← (byte) current_orientation#24 + (number) $10
Adding number conversion cast (unumber) play_move_rotate::$5 in (number~) play_move_rotate::$5 ← (byte) current_orientation#24 + (unumber)(number) $10
Adding number conversion cast (unumber) $3f in (number~) play_move_rotate::$6 ← (unumber~) play_move_rotate::$5 & (number) $3f
Adding number conversion cast (unumber) play_move_rotate::$6 in (number~) play_move_rotate::$6 ← (unumber~) play_move_rotate::$5 & (unumber)(number) $3f
Adding number conversion cast (unumber) 0 in (byte) play_move_rotate::return#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) play_move_rotate::return#3 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) play_move_rotate::return#4 ← (number) 1
Adding number conversion cast (unumber) 0 in (bool~) play_collision::$1 ← *((byte*) play_collision::piece_gfx#1 + (byte) play_collision::i#2) != (number) 0
Adding number conversion cast (unumber) $80 in (number~) play_collision::$5 ← (byte) play_collision::xp#3 & (number) $80
Adding number conversion cast (unumber) play_collision::$5 in (number~) play_collision::$5 ← (byte) play_collision::xp#3 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) play_collision::$6 ← (unumber~) play_collision::$5 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) play_collision::$10 ← *((byte*) play_collision::playfield_line#1 + (byte) play_collision::xp#5) != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) play_lock_current::$0 ← *((byte*) current_piece_gfx#22 + (byte) play_lock_current::i#2) != (number) 0
Adding number conversion cast (unumber) 0 in (byte) current_orientation#8 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) game_over#5 ← (number) 1
Adding number conversion cast (unumber) 7 in (bool~) play_spawn_current::$4 ← (byte) play_spawn_current::piece_idx#2 == (number) 7
Adding number conversion cast (unumber) 7 in (number~) play_spawn_current::$6 ← (byte~) play_spawn_current::$5 & (number) 7
Adding number conversion cast (unumber) play_spawn_current::$6 in (number~) play_spawn_current::$6 ← (byte~) play_spawn_current::$5 & (unumber)(number) 7
Adding number conversion cast (unumber) 1 in (byte) play_remove_lines::r#0 ← (byte)(const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(number) 1
Adding number conversion cast (unumber) 1 in (byte) play_remove_lines::w#0 ← (byte)(const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(number) 1
Adding number conversion cast (unumber) 0 in (bool~) play_remove_lines::$0 ← (byte) play_remove_lines::c#0 == (number) 0
Adding number conversion cast (unumber) 1 in (byte) play_remove_lines::x#1 ← (byte) play_remove_lines::x#2 + rangenext(0,PLAYFIELD_COLS-1)
Adding number conversion cast (unumber) 0 in (byte) play_remove_lines::full#1 ← (number) 0
Adding number conversion cast (unumber) 1 in (bool~) play_remove_lines::$3 ← (byte) play_remove_lines::full#2 == (number) 1
Adding number conversion cast (unumber) 1 in (byte) play_remove_lines::y#1 ← (byte) play_remove_lines::y#2 + rangenext(0,PLAYFIELD_LINES-1)
Adding number conversion cast (unumber) $ff in (bool~) play_remove_lines::$7 ← (byte) play_remove_lines::w#6 != (number) $ff
Adding number conversion cast (unumber) 0 in *((const byte*) playfield + (byte) play_remove_lines::w#7) ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) play_update_score::$0 ← (byte) play_update_score::removed#1 != (number) 0
Adding number conversion cast (unumber) $f0 in (number~) play_update_score::$3 ← (byte~) play_update_score::$2 & (number) $f0
Adding number conversion cast (unumber) play_update_score::$3 in (number~) play_update_score::$3 ← (byte~) play_update_score::$2 & (unumber)(number) $f0
Adding number conversion cast (unumber) $f0 in (number~) play_update_score::$5 ← (byte~) play_update_score::$4 & (number) $f0
Adding number conversion cast (unumber) play_update_score::$5 in (number~) play_update_score::$5 ← (byte~) play_update_score::$4 & (unumber)(number) $f0
Adding number conversion cast (unumber) $1d in (bool~) play_increase_level::$0 ← (byte) level#7 > (number) $1d
Adding number conversion cast (unumber) 1 in (byte) current_movedown_slow#9 ← (number) 1
Adding number conversion cast (unumber) $f in (number~) play_increase_level::$1 ← (byte) level_bcd#7 & (number) $f
Adding number conversion cast (unumber) play_increase_level::$1 in (number~) play_increase_level::$1 ← (byte) level_bcd#7 & (unumber)(number) $f
Adding number conversion cast (unumber) $a in (bool~) play_increase_level::$2 ← (unumber~) play_increase_level::$1 == (number) $a
Adding number conversion cast (unumber) 6 in (byte) level_bcd#8 ← (byte) level_bcd#21 + (number) 6
Adding number conversion cast (unumber) $ffff in *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (number) $ffff
Adding number conversion cast (unumber) $ff in (bool~) main::$10 ← *((const nomodify byte*) RASTER) != (number) $ff
Adding number conversion cast (unumber) 0 in (bool~) main::$14 ← (byte) game_over#19 == (number) 0
Adding number conversion cast (unumber) 0 in (bool~) main::$17 ← (byte) main::render#2 != (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) keyboard_modifiers#1 ← (unumber)(number) 0
Inlining cast (byte) keyboard_event_get::return#0 ← (unumber)(number) $ff
Inlining cast *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (unumber)(number) 3
Inlining cast *((const nomodify byte*) D011) ← (unumber)(const nomodify byte) VIC_ECM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(unumber)(number) 3
Inlining cast (byte) render_screen_show#1 ← (unumber)(number) 0
Inlining cast (byte) render_screen_render#1 ← (unumber)(number) $20
Inlining cast (byte) render_bcd::only_low#0 ← (unumber)(number) 0
Inlining cast (byte) render_bcd::only_low#1 ← (unumber)(number) 0
Inlining cast (byte) render_bcd::only_low#2 ← (unumber)(number) 0
Inlining cast (byte) render_bcd::only_low#3 ← (unumber)(number) 1
Inlining cast (byte) render_bcd::only_low#4 ← (unumber)(number) 0
Inlining cast (byte) render_bcd::only_low#5 ← (unumber)(number) 0
Inlining cast (byte*) render_next::next_piece_gfx#0 ← (byte*)*((const word*) PIECES + (byte~) render_next::$6)
Inlining cast *((byte*) render_next::screen_next_area#6) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) SPRITES_ENABLE) ← (unumber)(number) $f
Inlining cast *((const nomodify byte*) SPRITES_MC) ← (unumber)(number) 0
Inlining cast (volatile byte) irq_cnt ← (unumber)(number) 0
Inlining cast (byte) play_move_down::return#1 ← (unumber)(number) 0
Inlining cast (byte) current_movedown_counter#4 ← (unumber)(number) 0
Inlining cast (byte) play_move_down::return#2 ← (unumber)(number) 1
Inlining cast (byte) play_move_leftright::return#1 ← (unumber)(number) 1
Inlining cast (byte) play_move_leftright::return#3 ← (unumber)(number) 0
Inlining cast (byte) play_move_leftright::return#4 ← (unumber)(number) 1
Inlining cast (byte) play_move_rotate::return#1 ← (unumber)(number) 0
Inlining cast (byte) play_move_rotate::return#3 ← (unumber)(number) 0
Inlining cast (byte) play_move_rotate::return#4 ← (unumber)(number) 1
Inlining cast (byte*) current_piece#5 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7)
Inlining cast (byte) current_orientation#8 ← (unumber)(number) 0
Inlining cast (byte) game_over#5 ← (unumber)(number) 1
Inlining cast (byte) play_remove_lines::full#1 ← (unumber)(number) 0
Inlining cast *((const byte*) playfield + (byte) play_remove_lines::w#7) ← (unumber)(number) 0
Inlining cast (byte) current_movedown_slow#9 ← (unumber)(number) 1
Inlining cast *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (unumber)(number) $ffff
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 0
Simplifying constant pointer cast (byte*) 1
Simplifying constant pointer cast (byte*) 53248
Simplifying constant pointer cast (byte*) 53249
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53269
Simplifying constant pointer cast (byte*) 53271
Simplifying constant pointer cast (byte*) 53276
Simplifying constant pointer cast (byte*) 53277
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 53282
Simplifying constant pointer cast (byte*) 53283
Simplifying constant pointer cast (byte*) 53284
Simplifying constant pointer cast (byte*) 53287
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 53273
Simplifying constant pointer cast (byte*) 53274
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (struct MOS6526_CIA*) 56320
Simplifying constant pointer cast (struct MOS6526_CIA*) 56576
Simplifying constant pointer cast (byte*) 56333
Simplifying constant pointer cast (struct MOS6581_SID*) 54272
Simplifying constant pointer cast (void()**) 65534
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 11264
Simplifying constant pointer cast (byte*) 12288
Simplifying constant pointer cast (byte*) 10240
Simplifying constant integer cast $13
Simplifying constant integer cast 1
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 3
Simplifying constant integer cast $40
Simplifying constant integer cast 3
Simplifying constant integer cast (const nomodify byte) VIC_ECM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(unumber)(number) 3
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $20
Simplifying constant integer cast 0
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $20
Simplifying constant integer cast $20
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $f
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $24
Simplifying constant integer cast $28
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $24
Simplifying constant integer cast $f
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast $18
Simplifying constant integer cast $15
Simplifying constant integer cast $40
Simplifying constant integer cast 3
Simplifying constant integer cast $7f
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 9
Simplifying constant integer cast $15
Simplifying constant integer cast $40
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast $15
Simplifying constant integer cast 3
Simplifying constant integer cast $14
Simplifying constant integer cast $15
Simplifying constant integer cast 3
Simplifying constant pointer cast (byte*) 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $10
Simplifying constant integer cast $3f
Simplifying constant integer cast $10
Simplifying constant integer cast $3f
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $f0
Simplifying constant integer cast $f0
Simplifying constant integer cast $1d
Simplifying constant integer cast 1
Simplifying constant integer cast $f
Simplifying constant integer cast $a
Simplifying constant integer cast 6
Simplifying constant integer cast $ffff
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $13
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $24
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $24
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) $15
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $15
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $15
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $14
Finalized unsigned number type (byte) $15
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $3f
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $3f
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $f0
Finalized unsigned number type (byte) $f0
Finalized unsigned number type (byte) $1d
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 6
Finalized unsigned number type (word) $ffff
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) keyboard_event_scan::$14 ← (byte) keyboard_event_scan::keycode#3 + (byte) 8
Inferred type updated to byte in (unumber~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#5 | (byte) $40
Inferred type updated to byte in (unumber~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte) 7
Inferred type updated to byte in (unumber~) render_init::vicSelectGfxBank1_toDd001_$1 ← (byte~) render_init::vicSelectGfxBank1_toDd001_$0 / (byte) $40
Inferred type updated to byte in (unumber~) render_init::vicSelectGfxBank1_toDd001_$2 ← (byte) 3 ^ (byte~) render_init::vicSelectGfxBank1_toDd001_$1
Inferred type updated to word in (unumber~) render_show::toD0181_$0 ← (word~) render_show::toD0181_$7 & (word) $3fff
Inferred type updated to word in (unumber~) render_show::toD0181_$1 ← (word~) render_show::toD0181_$0 * (byte) 4
Inferred type updated to byte in (unumber~) render_show::toD0181_$2 ← > (word~) render_show::toD0181_$1
Inferred type updated to byte in (unumber~) render_show::toD0181_$4 ← (byte~) render_show::toD0181_$3 / (byte) 4
Inferred type updated to byte in (unumber~) render_show::toD0181_$5 ← (byte~) render_show::toD0181_$4 & (byte) $f
Inferred type updated to byte in (unumber~) render_show::toD0181_$6 ← (byte~) render_show::toD0181_$2 | (byte~) render_show::toD0181_$5
Inferred type updated to word in (unumber~) render_show::toD0182_$0 ← (word~) render_show::toD0182_$7 & (word) $3fff
Inferred type updated to word in (unumber~) render_show::toD0182_$1 ← (word~) render_show::toD0182_$0 * (byte) 4
Inferred type updated to byte in (unumber~) render_show::toD0182_$2 ← > (word~) render_show::toD0182_$1
Inferred type updated to byte in (unumber~) render_show::toD0182_$4 ← (byte~) render_show::toD0182_$3 / (byte) 4
Inferred type updated to byte in (unumber~) render_show::toD0182_$5 ← (byte~) render_show::toD0182_$4 & (byte) $f
Inferred type updated to byte in (unumber~) render_show::toD0182_$6 ← (byte~) render_show::toD0182_$2 | (byte~) render_show::toD0182_$5
Inferred type updated to word in (unumber~) render_score::$2 ← (const word) render_score::score_offset + (byte) 2
Inferred type updated to word in (unumber~) render_score::$4 ← (const word) render_score::score_offset + (byte) 4
Inferred type updated to word in (unumber~) render_score::$8 ← (const word) render_score::lines_offset + (byte) 1
Inferred type updated to byte in (unumber~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte) $f
Inferred type updated to byte in (unumber~) render_bcd::$4 ← (const nomodify byte) render_bcd::ZERO_CHAR + (byte~) render_bcd::$3
Inferred type updated to byte in (unumber~) sprites_init::$0 ← (byte) sprites_init::s#2 * (byte) 2
Inferred type updated to byte in (unumber~) sprites_init::$1 ← (byte) sprites_init::xpos#2 + (byte) $18
Inferred type updated to word in (unumber~) toSpritePtr1_$0 ← (word~) toSpritePtr1_$1 / (byte) $40
Inferred type updated to byte in (unumber~) $1 ← (byte~) $0 + (byte) 3
Inferred type updated to byte in (unumber~) sprites_irq::$0 ← (volatile byte) irq_raster_next + (byte) 1
Inferred type updated to word in (unumber~) sprites_irq::toSpritePtr1_$0 ← (word~) sprites_irq::toSpritePtr1_$1 / (byte) $40
Inferred type updated to byte in (unumber~) play_move_down::$11 ← (byte) current_ypos#16 + (byte) 1
Inferred type updated to byte in (unumber~) play_move_leftright::$7 ← (byte) current_xpos#23 - (byte) 1
Inferred type updated to byte in (unumber~) play_move_leftright::$3 ← (byte) current_xpos#24 + (byte) 1
Inferred type updated to byte in (unumber~) play_move_rotate::$7 ← (byte) current_orientation#23 - (byte) $10
Inferred type updated to byte in (unumber~) play_move_rotate::$8 ← (byte~) play_move_rotate::$7 & (byte) $3f
Inferred type updated to byte in (unumber~) play_move_rotate::$5 ← (byte) current_orientation#24 + (byte) $10
Inferred type updated to byte in (unumber~) play_move_rotate::$6 ← (byte~) play_move_rotate::$5 & (byte) $3f
Inferred type updated to byte in (unumber~) play_collision::$5 ← (byte) play_collision::xp#3 & (byte) $80
Inferred type updated to byte in (unumber~) play_spawn_current::$6 ← (byte~) play_spawn_current::$5 & (byte) 7
Inferred type updated to byte in (unumber~) play_update_score::$3 ← (byte~) play_update_score::$2 & (byte) $f0
Inferred type updated to byte in (unumber~) play_update_score::$5 ← (byte~) play_update_score::$4 & (byte) $f0
Inferred type updated to byte in (unumber~) play_increase_level::$1 ← (byte) level_bcd#7 & (byte) $f
Inversing boolean not [35] (bool~) keyboard_event_scan::$18 ← (byte~) keyboard_event_scan::$16 == (byte) 0 from [34] (bool~) keyboard_event_scan::$17 ← (byte~) keyboard_event_scan::$16 != (byte) 0
Inversing boolean not [44] (bool~) keyboard_event_scan::$20 ← (byte) keyboard_events_size#10 == (byte) 8 from [43] (bool~) keyboard_event_scan::$19 ← (byte) keyboard_events_size#10 != (byte) 8
Inversing boolean not [68] (bool~) keyboard_event_scan::$2 ← (byte~) keyboard_event_scan::$0 == (byte) 0 from [67] (bool~) keyboard_event_scan::$1 ← (byte~) keyboard_event_scan::$0 != (byte) 0
Inversing boolean not [77] (bool~) keyboard_event_scan::$5 ← (byte~) keyboard_event_scan::$3 == (byte) 0 from [76] (bool~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 != (byte) 0
Inversing boolean not [89] (bool~) keyboard_event_scan::$8 ← (byte~) keyboard_event_scan::$6 == (byte) 0 from [88] (bool~) keyboard_event_scan::$7 ← (byte~) keyboard_event_scan::$6 != (byte) 0
Inversing boolean not [101] (bool~) keyboard_event_scan::$11 ← (byte~) keyboard_event_scan::$9 == (byte) 0 from [100] (bool~) keyboard_event_scan::$10 ← (byte~) keyboard_event_scan::$9 != (byte) 0
Inversing boolean not [298] (bool~) render_bcd::$2 ← (byte) render_bcd::only_low#6 != (byte) 0 from [297] (bool~) render_bcd::$1 ← (byte) render_bcd::only_low#6 == (byte) 0
Inversing boolean not [393] (bool~) render_moving::$3 ← (byte) render_moving::current_cell#0 == (byte) 0 from [392] (bool~) render_moving::$2 ← (byte) render_moving::current_cell#0 != (byte) 0
Inversing boolean not [594] (bool~) play_movement::$2 ← (byte) game_over#1 == (byte) 0 from [593] (bool~) play_movement::$1 ← (byte) game_over#1 != (byte) 0
Inversing boolean not [635] (bool~) play_move_down::$1 ← (byte) play_move_down::key_event#1 != (const nomodify byte) KEY_SPACE from [634] (bool~) play_move_down::$0 ← (byte) play_move_down::key_event#1 == (const nomodify byte) KEY_SPACE
Inversing boolean not [644] (bool~) play_move_down::$4 ← (byte~) play_move_down::$2 == (byte) 0 from [643] (bool~) play_move_down::$3 ← (byte~) play_move_down::$2 != (byte) 0
Inversing boolean not [650] (bool~) play_move_down::$6 ← (byte) current_movedown_counter#12 < (byte) current_movedown_slow#19 from [649] (bool~) play_move_down::$5 ← (byte) current_movedown_counter#12 >= (byte) current_movedown_slow#19
Inversing boolean not [654] (bool~) play_move_down::$10 ← (byte) current_movedown_counter#13 < (const nomodify byte) current_movedown_fast from [653] (bool~) play_move_down::$9 ← (byte) current_movedown_counter#13 >= (const nomodify byte) current_movedown_fast
Inversing boolean not [660] (bool~) play_move_down::$8 ← (byte) play_move_down::movedown#6 == (byte) 0 from [659] (bool~) play_move_down::$7 ← (byte) play_move_down::movedown#6 != (byte) 0
Inversing boolean not [736] (bool~) play_move_leftright::$10 ← (byte~) play_move_leftright::$8 != (const nomodify byte) COLLISION_NONE from [735] (bool~) play_move_leftright::$9 ← (byte~) play_move_leftright::$8 == (const nomodify byte) COLLISION_NONE
Inversing boolean not [740] (bool~) play_move_leftright::$2 ← (byte) play_move_leftright::key_event#2 != (const nomodify byte) KEY_DOT from [739] (bool~) play_move_leftright::$1 ← (byte) play_move_leftright::key_event#2 == (const nomodify byte) KEY_DOT
Inversing boolean not [752] (bool~) play_move_leftright::$6 ← (byte~) play_move_leftright::$4 != (const nomodify byte) COLLISION_NONE from [751] (bool~) play_move_leftright::$5 ← (byte~) play_move_leftright::$4 == (const nomodify byte) COLLISION_NONE
Inversing boolean not [797] (bool~) play_move_rotate::$4 ← (byte~) play_move_rotate::$2 != (const nomodify byte) COLLISION_NONE from [796] (bool~) play_move_rotate::$3 ← (byte~) play_move_rotate::$2 == (const nomodify byte) COLLISION_NONE
Inversing boolean not [820] (bool~) play_collision::$2 ← *((byte*) play_collision::piece_gfx#1 + (byte) play_collision::i#2) == (byte) 0 from [818] (bool~) play_collision::$1 ← *((byte*) play_collision::piece_gfx#1 + (byte) play_collision::i#2) != (byte) 0
Inversing boolean not [829] (bool~) play_collision::$4 ← (byte) play_collision::yp#3 < (const nomodify byte) PLAYFIELD_LINES from [828] (bool~) play_collision::$3 ← (byte) play_collision::yp#3 >= (const nomodify byte) PLAYFIELD_LINES
Inversing boolean not [834] (bool~) play_collision::$7 ← (byte~) play_collision::$5 == (byte) 0 from [833] (bool~) play_collision::$6 ← (byte~) play_collision::$5 != (byte) 0
Inversing boolean not [842] (bool~) play_collision::$9 ← (byte) play_collision::xp#4 < (const nomodify byte) PLAYFIELD_COLS from [841] (bool~) play_collision::$8 ← (byte) play_collision::xp#4 >= (const nomodify byte) PLAYFIELD_COLS
Inversing boolean not [847] (bool~) play_collision::$11 ← *((byte*) play_collision::playfield_line#1 + (byte) play_collision::xp#5) == (byte) 0 from [846] (bool~) play_collision::$10 ← *((byte*) play_collision::playfield_line#1 + (byte) play_collision::xp#5) != (byte) 0
Inversing boolean not [869] (bool~) play_lock_current::$1 ← *((byte*) current_piece_gfx#22 + (byte) play_lock_current::i#2) == (byte) 0 from [867] (bool~) play_lock_current::$0 ← *((byte*) current_piece_gfx#22 + (byte) play_lock_current::i#2) != (byte) 0
Inversing boolean not [902] (bool~) play_spawn_current::$3 ← (byte~) play_spawn_current::$1 != (const nomodify byte) COLLISION_PLAYFIELD from [901] (bool~) play_spawn_current::$2 ← (byte~) play_spawn_current::$1 == (const nomodify byte) COLLISION_PLAYFIELD
Inversing boolean not [942] (bool~) play_remove_lines::$1 ← (byte) play_remove_lines::c#0 != (byte) 0 from [941] (bool~) play_remove_lines::$0 ← (byte) play_remove_lines::c#0 == (byte) 0
Inversing boolean not [954] (bool~) play_remove_lines::$4 ← (byte) play_remove_lines::full#2 != (byte) 1 from [953] (bool~) play_remove_lines::$3 ← (byte) play_remove_lines::full#2 == (byte) 1
Inversing boolean not [977] (bool~) play_update_score::$1 ← (byte) play_update_score::removed#1 == (byte) 0 from [976] (bool~) play_update_score::$0 ← (byte) play_update_score::removed#1 != (byte) 0
Inversing boolean not [993] (bool~) play_update_score::$7 ← (byte) play_update_score::lines_before#0 == (byte) play_update_score::lines_after#0 from [992] (bool~) play_update_score::$6 ← (byte) play_update_score::lines_before#0 != (byte) play_update_score::lines_after#0
Inversing boolean not [1019] (bool~) play_increase_level::$3 ← (byte~) play_increase_level::$1 != (byte) $a from [1018] (bool~) play_increase_level::$2 ← (byte~) play_increase_level::$1 == (byte) $a
Inversing boolean not [1129] (bool~) main::$18 ← (byte) main::render#2 == (byte) 0 from [1128] (bool~) main::$17 ← (byte) main::render#2 != (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)render_screen_show#11 = render_screen_showing 
Alias candidate removed (volatile)sprites_irq::toSpritePtr1_return#0 = irq_sprite_ptr $1 sprites_irq::toSpritePtr1_return#2 sprites_irq::toSpritePtr1_return#1 sprites_irq::toSpritePtr1_return#3 sprites_irq::$5 
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Alias keyboard_matrix_read::return#0 = keyboard_matrix_read::row_pressed_bits#0 keyboard_matrix_read::$0 keyboard_matrix_read::return#3 keyboard_matrix_read::return#1 
Alias keyboard_matrix_read::return#2 = keyboard_matrix_read::return#4 
Alias keyboard_event_scan::row#2 = keyboard_event_scan::row#3 keyboard_event_scan::row#9 keyboard_event_scan::row#7 
Alias keyboard_event_scan::keycode#11 = keyboard_event_scan::keycode#7 keyboard_event_scan::keycode#12 keyboard_event_scan::keycode#3 
Alias keyboard_events_size#30 = keyboard_events_size#37 keyboard_events_size#46 keyboard_events_size#61 
Alias keyboard_event_scan::row_scan#0 = keyboard_event_scan::$12 keyboard_event_scan::row_scan#5 
Alias keyboard_event_scan::keycode#1 = keyboard_event_scan::$14 
Alias keyboard_events_size#10 = keyboard_events_size#21 keyboard_events_size#22 keyboard_events_size#11 keyboard_events_size#12 
Alias keyboard_event_scan::keycode#10 = keyboard_event_scan::keycode#9 keyboard_event_scan::keycode#8 keyboard_event_scan::keycode#5 keyboard_event_scan::keycode#6 
Alias keyboard_event_scan::col#2 = keyboard_event_scan::col#6 keyboard_event_scan::col#4 keyboard_event_scan::col#5 keyboard_event_scan::col#7 
Alias keyboard_event_scan::row_scan#1 = keyboard_event_scan::row_scan#6 keyboard_event_scan::row_scan#2 keyboard_event_scan::row_scan#7 keyboard_event_scan::row_scan#8 
Alias keyboard_event_scan::row#10 = keyboard_event_scan::row#11 keyboard_event_scan::row#5 keyboard_event_scan::row#13 keyboard_event_scan::row#12 
Alias keyboard_event_scan::event_type#0 = keyboard_event_scan::$21 
Alias keyboard_event_scan::row_scan#3 = keyboard_event_scan::row_scan#4 
Alias keyboard_event_scan::row#6 = keyboard_event_scan::row#8 
Alias keyboard_event_scan::keycode#14 = keyboard_event_scan::keycode#2 
Alias keyboard_events_size#29 = keyboard_events_size#60 
Alias keyboard_events_size#54 = keyboard_events_size#71 keyboard_events_size#67 keyboard_events_size#66 
Alias keyboard_event_pressed::return#0 = keyboard_event_pressed::return#7 
Alias keyboard_modifiers#1 = keyboard_modifiers#18 keyboard_modifiers#10 
Alias keyboard_event_pressed::return#1 = keyboard_event_pressed::return#8 
Alias keyboard_modifiers#11 = keyboard_modifiers#19 keyboard_modifiers#25 
Alias keyboard_events_size#55 = keyboard_events_size#62 keyboard_events_size#56 
Alias keyboard_modifiers#2 = keyboard_event_scan::$26 
Alias keyboard_event_pressed::return#2 = keyboard_event_pressed::return#9 
Alias keyboard_modifiers#12 = keyboard_modifiers#20 keyboard_modifiers#26 
Alias keyboard_events_size#38 = keyboard_events_size#47 keyboard_events_size#39 
Alias keyboard_modifiers#3 = keyboard_event_scan::$27 
Alias keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 
Alias keyboard_modifiers#13 = keyboard_modifiers#21 keyboard_modifiers#27 
Alias keyboard_events_size#23 = keyboard_events_size#31 keyboard_events_size#24 
Alias keyboard_modifiers#4 = keyboard_event_scan::$28 
Alias keyboard_modifiers#5 = keyboard_event_scan::$29 
Alias keyboard_events_size#13 = keyboard_events_size#3 
Alias keyboard_modifiers#14 = keyboard_modifiers#6 
Alias keyboard_event_pressed::return#11 = keyboard_event_pressed::return#4 keyboard_event_pressed::$2 keyboard_event_pressed::return#5 
Alias keyboard_events_size#14 = keyboard_events_size#25 keyboard_events_size#15 
Alias keyboard_event_get::return#2 = keyboard_event_get::return#4 
Alias keyboard_events_size#16 = keyboard_events_size#5 
Alias keyboard_events_size#0 = keyboard_events_size#72 keyboard_events_size#68 keyboard_events_size#63 keyboard_events_size#57 keyboard_events_size#48 keyboard_events_size#40 keyboard_events_size#36 keyboard_events_size#28 
Alias keyboard_modifiers#0 = keyboard_modifiers#54 keyboard_modifiers#51 keyboard_modifiers#48 keyboard_modifiers#45 keyboard_modifiers#39 keyboard_modifiers#33 keyboard_modifiers#32 keyboard_modifiers#24 
Alias render_init::vicSelectGfxBank1_gfx#0 = render_init::vicSelectGfxBank1_gfx#1 render_init::vicSelectGfxBank1_toDd001_gfx#0 render_init::vicSelectGfxBank1_toDd001_gfx#1 
Alias render_init::vicSelectGfxBank1_toDd001_return#0 = render_init::vicSelectGfxBank1_toDd001_$2 render_init::vicSelectGfxBank1_toDd001_return#2 render_init::vicSelectGfxBank1_toDd001_return#1 render_init::vicSelectGfxBank1_toDd001_return#3 render_init::vicSelectGfxBank1_$0 
Alias render_screen_show#1 = render_screen_show#9 render_screen_show#2 
Alias render_screen_render#1 = render_screen_render#9 render_screen_render#2 
Alias level#26 = level#70 level#84 level#56 level#42 level#71 level#57 level#43 level#27 
Alias render_screen_show#10 = render_screen_show#41 render_screen_show#33 render_screen_show#25 render_screen_show#19 render_screen_show#42 render_screen_show#34 render_screen_show#26 render_screen_show#20 
Alias render_show::toD0181_screen#0 = render_show::toD0181_screen#1 
Alias render_show::toD0181_gfx#0 = render_show::toD0181_gfx#1 
Alias render_show::toD0181_return#0 = render_show::toD0181_$6 render_show::toD0181_return#2 render_show::toD0181_return#1 render_show::toD0181_return#3 render_show::$2 render_show::d018val#1 
Alias render_show::toD0182_screen#0 = render_show::toD0182_screen#1 
Alias render_show::toD0182_gfx#0 = render_show::toD0182_gfx#1 
Alias render_show::toD0182_return#0 = render_show::toD0182_$6 render_show::toD0182_return#2 render_show::toD0182_return#1 render_show::toD0182_return#3 render_show::$1 render_show::d018val#2 
Alias render_screen_render#11 = render_screen_render#3 render_screen_render#4 
Alias render_screen_show#13 = render_screen_show#3 render_screen_show#4 
Alias lines_bcd#56 = lines_bcd#67 lines_bcd#57 
Alias level_bcd#83 = level_bcd#91 level_bcd#84 
Alias render_score::screen#3 = render_score::screen#4 render_score::screen#5 render_score::screen#6 render_score::screen#7 render_score::screen#8 
Alias lines_bcd#10 = lines_bcd#33 lines_bcd#45 lines_bcd#21 lines_bcd#11 
Alias level_bcd#13 = level_bcd#67 level_bcd#77 level_bcd#55 level_bcd#42 level_bcd#26 
Alias render_bcd::offset#1 = render_score::$2 
Alias render_bcd::offset#2 = render_score::$4 
Alias render_bcd::bcd#3 = render_score::$6 
Alias render_bcd::offset#4 = render_score::$8 
Alias render_bcd::bcd#4 = render_score::$9 
Alias render_bcd::screen_pos#0 = render_bcd::$0 render_bcd::screen_pos#4 
Alias render_bcd::bcd#7 = render_bcd::bcd#8 
Alias render_screen_original::y#2 = render_screen_original::y#3 
Alias render_screen_original::screen#10 = render_screen_original::screen#4 
Alias render_screen_original::cols#3 = render_screen_original::cols#8 
Alias render_screen_original::oscr#5 = render_screen_original::oscr#6 
Alias render_screen_original::ocols#5 = render_screen_original::ocols#6 
Alias render_playfield::l#3 = render_playfield::l#4 
Alias render_screen_render#23 = render_screen_render#32 
Alias render_playfield::i#1 = render_playfield::i#4 
Alias render_screen_render#14 = render_screen_render#24 render_screen_render#42 
Alias render_moving::ypos#2 = render_moving::ypos#3 render_moving::ypos#6 
Alias current_xpos#16 = current_xpos#36 current_xpos#79 
Alias current_piece_gfx#29 = current_piece_gfx#46 current_piece_gfx#83 
Alias render_moving::i#3 = render_moving::i#6 render_moving::i#5 
Alias current_piece_char#37 = current_piece_char#52 current_piece_char#85 
Alias render_moving::l#4 = render_moving::l#8 render_moving::l#5 
Alias current_piece_char#12 = current_piece_char#24 
Alias render_moving::screen_line#1 = render_moving::screen_line#2 
Alias render_moving::xpos#3 = render_moving::xpos#4 
Alias render_moving::c#3 = render_moving::c#4 
Alias render_moving::ypos#7 = render_moving::ypos#8 
Alias render_moving::l#6 = render_moving::l#7 
Alias current_piece_gfx#15 = current_piece_gfx#47 
Alias render_moving::i#2 = render_moving::i#9 
Alias render_screen_render#48 = render_screen_render#49 
Alias current_xpos#95 = current_xpos#96 
Alias next_piece_idx#24 = next_piece_idx#36 next_piece_idx#25 
Alias render_next::screen_next_area#1 = render_next::$2 
Alias render_next::screen_next_area#2 = render_next::$1 
Alias render_next::next_piece_char#1 = render_next::next_piece_char#2 render_next::next_piece_char#6 
Alias render_next::screen_next_area#5 = render_next::screen_next_area#9 render_next::screen_next_area#6 
Alias render_next::c#3 = render_next::c#5 render_next::c#4 
Alias render_next::next_piece_gfx#1 = render_next::next_piece_gfx#6 render_next::next_piece_gfx#7 
Alias render_next::l#4 = render_next::l#6 render_next::l#5 
Alias render_next::screen_next_area#3 = render_next::screen_next_area#8 
Alias render_next::l#2 = render_next::l#3 
Alias render_next::next_piece_gfx#4 = render_next::next_piece_gfx#5 
Alias render_next::next_piece_char#4 = render_next::next_piece_char#5 
Alias render_screen_show#0 = render_screen_show#56 render_screen_show#53 render_screen_show#49 render_screen_show#43 render_screen_show#35 render_screen_show#32 render_screen_show#24 
Alias render_screen_render#0 = render_screen_render#61 render_screen_render#58 render_screen_render#55 render_screen_render#50 render_screen_render#43 render_screen_render#40 render_screen_render#29 
Alias current_piece_char#0 = current_piece_char#98 current_piece_char#92 current_piece_char#86 current_piece_char#70 current_piece_char#53 current_piece_char#51 current_piece_char#36 
Alias current_piece_gfx#0 = current_piece_gfx#110 current_piece_gfx#105 current_piece_gfx#98 current_piece_gfx#84 current_piece_gfx#66 current_piece_gfx#63 current_piece_gfx#45 
Alias current_xpos#0 = current_xpos#117 current_xpos#114 current_xpos#107 current_xpos#97 current_xpos#80 current_xpos#75 current_xpos#58 
Alias current_ypos#0 = current_ypos#96 current_ypos#93 current_ypos#86 current_ypos#77 current_ypos#65 current_ypos#64 current_ypos#49 
Alias game_over#0 = game_over#83 game_over#78 game_over#72 game_over#59 game_over#46 game_over#45 game_over#34 
Alias lines_bcd#0 = lines_bcd#79 lines_bcd#73 lines_bcd#68 lines_bcd#58 lines_bcd#46 lines_bcd#44 lines_bcd#32 
Alias level#0 = level#99 level#92 level#85 level#72 level#58 level#55 level#41 
Alias level_bcd#0 = level_bcd#92 level_bcd#85 level_bcd#78 level_bcd#68 level_bcd#56 level_bcd#54 level_bcd#41 
Alias sprites_init::s2#0 = sprites_init::$0 
Alias sprites_init::xpos#1 = sprites_init::$1 
Alias toSpritePtr1_sprite#0 = toSpritePtr1_sprite#1 
Alias toSpritePtr1_return#0 = toSpritePtr1_return#2 toSpritePtr1_return#1 toSpritePtr1_return#3 $0 
Alias sprites_irq::ptr#0 = sprites_irq::ptr#5 sprites_irq::ptr#6 
Alias sprites_irq::toSpritePtr1_sprite#0 = sprites_irq::toSpritePtr1_sprite#1 
Alias level#13 = level#28 
Alias current_movedown_slow#16 = current_movedown_slow#29 current_movedown_slow#2 
Alias play_move_down::return#0 = play_move_down::return#4 
Alias play_movement::render#0 = play_movement::render#4 
Alias play_movement::key_event#1 = play_movement::key_event#4 play_movement::key_event#2 play_movement::key_event#3 
Alias current_movedown_counter#1 = current_movedown_counter#9 current_movedown_counter#34 current_movedown_counter#27 current_movedown_counter#20 current_movedown_counter#19 
Alias current_ypos#1 = current_ypos#14 current_ypos#54 current_ypos#50 current_ypos#34 current_ypos#33 
Alias lines_bcd#1 = lines_bcd#12 lines_bcd#47 lines_bcd#34 lines_bcd#24 lines_bcd#23 
Alias level#1 = level#14 level#60 level#45 level#31 level#30 
Alias current_movedown_slow#17 = current_movedown_slow#3 current_movedown_slow#59 current_movedown_slow#47 current_movedown_slow#32 current_movedown_slow#31 
Alias level_bcd#1 = level_bcd#14 level_bcd#57 level_bcd#43 level_bcd#29 level_bcd#28 
Alias current_piece#1 = current_piece#12 current_piece#54 current_piece#40 current_piece#26 current_piece#25 
Alias current_piece_char#1 = current_piece_char#13 current_piece_char#54 current_piece_char#39 current_piece_char#27 current_piece_char#26 
Alias current_orientation#1 = current_orientation#15 current_orientation#50 current_orientation#33 current_orientation#34 
Alias current_piece_gfx#1 = current_piece_gfx#16 current_piece_gfx#48 current_piece_gfx#32 current_piece_gfx#33 
Alias current_xpos#1 = current_xpos#17 current_xpos#38 current_xpos#39 
Alias game_over#1 = game_over#12 game_over#47 game_over#35 game_over#25 game_over#24 
Alias next_piece_idx#1 = next_piece_idx#13 next_piece_idx#48 next_piece_idx#37 next_piece_idx#28 next_piece_idx#27 
Alias play_movement::render#1 = play_movement::render#8 play_movement::render#5 play_movement::render#7 play_movement::return#1 
Alias play_move_leftright::return#0 = play_move_leftright::return#5 
Alias current_xpos#18 = current_xpos#2 current_xpos#40 
Alias play_move_rotate::return#0 = play_move_rotate::return#5 
Alias play_movement::render#2 = play_movement::render#6 
Alias current_orientation#16 = current_orientation#2 
Alias current_piece_gfx#17 = current_piece_gfx#2 
Alias play_movement::return#0 = play_movement::render#3 
Alias play_movement::return#2 = play_movement::return#4 
Alias current_movedown_counter#10 = current_movedown_counter#2 
Alias current_ypos#15 = current_ypos#2 
Alias lines_bcd#13 = lines_bcd#2 
Alias level#15 = level#2 
Alias current_movedown_slow#18 = current_movedown_slow#4 
Alias level_bcd#15 = level_bcd#2 
Alias current_piece#13 = current_piece#2 
Alias current_piece_char#14 = current_piece_char#2 
Alias current_orientation#17 = current_orientation#3 
Alias current_piece_gfx#18 = current_piece_gfx#3 
Alias current_xpos#19 = current_xpos#3 
Alias game_over#13 = game_over#2 
Alias next_piece_idx#14 = next_piece_idx#2 
Alias keyboard_event_pressed::return#12 = keyboard_event_pressed::return#6 
Alias current_movedown_counter#13 = current_movedown_counter#21 current_movedown_counter#28 current_movedown_counter#22 
Alias current_movedown_slow#33 = current_movedown_slow#48 current_movedown_slow#34 current_movedown_slow#35 
Alias play_move_down::movedown#10 = play_move_down::movedown#11 play_move_down::movedown#8 play_move_down::movedown#5 
Alias current_ypos#66 = current_ypos#78 current_ypos#67 current_ypos#68 
Alias current_xpos#81 = current_xpos#98 current_xpos#82 current_xpos#83 
Alias current_orientation#62 = current_orientation#75 current_orientation#63 current_orientation#64 
Alias lines_bcd#59 = lines_bcd#69 lines_bcd#60 lines_bcd#61 
Alias level#73 = level#86 level#74 level#75 
Alias level_bcd#69 = level_bcd#79 level_bcd#70 level_bcd#71 
Alias current_piece#68 = current_piece#80 current_piece#69 current_piece#70 
Alias current_piece_char#71 = current_piece_char#87 current_piece_char#72 current_piece_char#73 
Alias current_piece_gfx#85 = current_piece_gfx#99 current_piece_gfx#86 current_piece_gfx#87 
Alias game_over#60 = game_over#73 game_over#61 game_over#62 
Alias next_piece_idx#57 = next_piece_idx#68 next_piece_idx#58 next_piece_idx#59 
Alias play_move_down::movedown#0 = play_move_down::movedown#4 
Alias current_movedown_counter#3 = current_movedown_counter#35 
Alias current_movedown_slow#60 = current_movedown_slow#61 
Alias current_ypos#87 = current_ypos#88 
Alias current_xpos#108 = current_xpos#109 
Alias current_orientation#85 = current_orientation#86 
Alias lines_bcd#74 = lines_bcd#75 
Alias level#93 = level#94 
Alias level_bcd#86 = level_bcd#87 
Alias current_piece#85 = current_piece#86 
Alias current_piece_char#93 = current_piece_char#94 
Alias current_piece_gfx#106 = current_piece_gfx#107 
Alias game_over#79 = game_over#80 
Alias next_piece_idx#72 = next_piece_idx#73 
Alias play_move_down::movedown#7 = play_move_down::movedown#9 
Alias current_ypos#51 = current_ypos#52 
Alias current_xpos#61 = current_xpos#62 
Alias current_orientation#51 = current_orientation#52 
Alias current_movedown_counter#12 = current_movedown_counter#36 
Alias lines_bcd#48 = lines_bcd#49 
Alias level#61 = level#62 
Alias current_movedown_slow#19 = current_movedown_slow#62 
Alias level_bcd#58 = level_bcd#59 
Alias current_piece#55 = current_piece#56 
Alias current_piece_char#55 = current_piece_char#56 
Alias current_piece_gfx#67 = current_piece_gfx#68 
Alias game_over#48 = game_over#49 
Alias next_piece_idx#49 = next_piece_idx#50 
Alias current_movedown_counter#23 = current_movedown_counter#29 
Alias current_ypos#16 = current_ypos#39 current_ypos#35 current_ypos#36 current_ypos#17 current_ypos#44 current_ypos#69 current_ypos#53 current_ypos#37 
Alias lines_bcd#25 = lines_bcd#27 lines_bcd#35 lines_bcd#62 lines_bcd#50 lines_bcd#37 lines_bcd#51 lines_bcd#36 
Alias level#32 = level#34 level#46 level#76 level#63 level#48 level#64 level#47 
Alias current_movedown_slow#36 = current_movedown_slow#38 current_movedown_slow#49 current_movedown_slow#71 current_movedown_slow#63 current_movedown_slow#51 current_movedown_slow#64 current_movedown_slow#50 
Alias level_bcd#30 = level_bcd#32 level_bcd#44 level_bcd#72 level_bcd#60 level_bcd#46 level_bcd#61 level_bcd#45 
Alias current_piece#27 = current_piece#29 current_piece#41 current_piece#31 current_piece#57 current_piece#43 current_piece#71 current_piece#58 current_piece#42 
Alias current_piece_char#28 = current_piece_char#30 current_piece_char#40 current_piece_char#74 current_piece_char#57 current_piece_char#42 current_piece_char#75 current_piece_char#58 current_piece_char#41 
Alias current_orientation#18 = current_orientation#38 current_orientation#35 current_orientation#65 current_orientation#54 current_orientation#76 current_orientation#66 current_orientation#53 current_orientation#36 
Alias current_piece_gfx#34 = current_piece_gfx#36 current_piece_gfx#49 current_piece_gfx#88 current_piece_gfx#69 current_piece_gfx#51 current_piece_gfx#73 current_piece_gfx#70 current_piece_gfx#50 
Alias current_xpos#20 = current_xpos#44 current_xpos#41 current_xpos#84 current_xpos#64 current_xpos#67 current_xpos#85 current_xpos#63 current_xpos#42 
Alias game_over#26 = game_over#28 game_over#36 game_over#63 game_over#50 game_over#38 game_over#64 game_over#51 game_over#37 
Alias next_piece_idx#29 = next_piece_idx#31 next_piece_idx#38 next_piece_idx#60 next_piece_idx#51 next_piece_idx#40 next_piece_idx#61 next_piece_idx#52 next_piece_idx#39 
Alias play_collision::ypos#0 = play_move_down::$11 
Alias play_collision::return#0 = play_collision::return#11 
Alias play_remove_lines::return#0 = play_remove_lines::return#3 
Alias play_move_down::removed#0 = play_move_down::$15 
Alias lines_bcd#14 = lines_bcd#3 lines_bcd#38 
Alias level#16 = level#3 level#49 
Alias current_movedown_slow#20 = current_movedown_slow#5 current_movedown_slow#52 
Alias level_bcd#16 = level_bcd#3 level_bcd#47 
Alias current_piece#14 = current_piece#3 
Alias current_piece_char#15 = current_piece_char#3 
Alias current_orientation#19 = current_orientation#4 
Alias current_piece_gfx#19 = current_piece_gfx#4 
Alias current_xpos#21 = current_xpos#4 
Alias current_ypos#18 = current_ypos#4 
Alias game_over#14 = game_over#3 
Alias next_piece_idx#15 = next_piece_idx#3 
Alias play_move_down::return#3 = play_move_down::return#5 
Alias current_movedown_counter#14 = current_movedown_counter#5 
Alias current_ypos#19 = current_ypos#5 
Alias lines_bcd#15 = lines_bcd#4 
Alias level#17 = level#4 
Alias current_movedown_slow#21 = current_movedown_slow#6 
Alias level_bcd#17 = level_bcd#4 
Alias current_piece#15 = current_piece#4 
Alias current_piece_char#16 = current_piece_char#4 
Alias current_orientation#20 = current_orientation#5 
Alias current_piece_gfx#20 = current_piece_gfx#5 
Alias current_xpos#22 = current_xpos#5 
Alias game_over#15 = game_over#4 
Alias next_piece_idx#16 = next_piece_idx#4 
Alias current_xpos#23 = current_xpos#45 current_xpos#49 current_xpos#46 current_xpos#24 current_xpos#47 current_xpos#25 current_xpos#27 
Alias current_ypos#20 = current_ypos#40 current_ypos#41 current_ypos#21 
Alias current_orientation#21 = current_orientation#39 current_orientation#40 current_orientation#22 
Alias current_piece#32 = current_piece#44 current_piece#45 current_piece#33 
Alias play_collision::xpos#1 = play_move_leftright::$7 
Alias play_collision::return#1 = play_collision::return#12 
Alias play_move_leftright::key_event#1 = play_move_leftright::key_event#2 
Alias play_collision::xpos#2 = play_move_leftright::$3 
Alias play_collision::return#13 = play_collision::return#2 
Alias play_move_leftright::return#2 = play_move_leftright::return#6 
Alias current_xpos#26 = current_xpos#7 
Alias current_orientation#23 = current_orientation#41 current_orientation#42 current_orientation#24 current_orientation#44 
Alias current_xpos#50 = current_xpos#65 current_xpos#66 current_xpos#51 
Alias current_ypos#42 = current_ypos#55 current_ypos#56 current_ypos#43 
Alias current_piece#46 = current_piece#59 current_piece#60 current_piece#47 
Alias current_piece_gfx#38 = current_piece_gfx#89 current_piece_gfx#71 current_piece_gfx#52 current_piece_gfx#90 
Alias play_move_rotate::orientation#1 = play_move_rotate::$8 
Alias play_move_rotate::key_event#1 = play_move_rotate::key_event#2 
Alias play_move_rotate::orientation#2 = play_move_rotate::$6 
Alias play_move_rotate::return#2 = play_move_rotate::return#6 
Alias current_orientation#25 = current_orientation#6 
Alias current_piece_gfx#21 = current_piece_gfx#6 
Alias play_collision::return#14 = play_collision::return#3 
Alias play_move_rotate::orientation#3 = play_move_rotate::orientation#5 play_move_rotate::orientation#4 
Alias current_piece#16 = current_piece#30 current_piece#34 
Alias current_orientation#43 = current_orientation#55 current_orientation#67 
Alias current_piece_gfx#37 = current_piece_gfx#53 current_piece_gfx#72 
Alias current_piece_gfx#7 = play_move_rotate::$9 
Alias play_collision::piece_gfx#0 = play_collision::$0 
Alias play_collision::yp#0 = play_collision::ypos#5 
Alias play_collision::xp#0 = play_collision::xpos#5 
Alias play_collision::yp#3 = play_collision::yp#5 play_collision::yp#9 play_collision::yp#8 play_collision::yp#7 
Alias play_collision::xp#3 = play_collision::xp#7 play_collision::xp#6 play_collision::xp#4 play_collision::xp#5 
Alias play_collision::playfield_line#1 = play_collision::playfield_line#4 play_collision::playfield_line#5 play_collision::playfield_line#3 play_collision::playfield_line#2 
Alias play_collision::c#3 = play_collision::c#7 play_collision::c#6 play_collision::c#5 play_collision::c#4 
Alias play_collision::piece_gfx#1 = play_collision::piece_gfx#8 play_collision::piece_gfx#7 play_collision::piece_gfx#6 play_collision::piece_gfx#5 
Alias play_collision::i#1 = play_collision::i#9 play_collision::i#8 play_collision::i#7 play_collision::i#6 
Alias play_collision::l#4 = play_collision::l#9 play_collision::l#8 play_collision::l#7 play_collision::l#5 
Alias play_collision::xpos#10 = play_collision::xpos#13 play_collision::xpos#9 play_collision::xpos#12 play_collision::xpos#11 
Alias play_collision::return#15 = play_collision::return#5 
Alias play_collision::yp#4 = play_collision::yp#6 
Alias play_collision::l#2 = play_collision::l#3 
Alias play_collision::xpos#7 = play_collision::xpos#8 
Alias play_collision::piece_gfx#3 = play_collision::piece_gfx#4 
Alias play_collision::i#4 = play_collision::i#5 
Alias current_piece_char#17 = current_piece_char#31 
Alias play_lock_current::playfield_line#1 = play_lock_current::playfield_line#2 
Alias play_lock_current::xp#3 = play_lock_current::xp#4 
Alias play_lock_current::c#3 = play_lock_current::c#4 
Alias current_piece_gfx#22 = current_piece_gfx#56 
Alias play_lock_current::i#1 = play_lock_current::i#6 
Alias play_lock_current::yp#5 = play_lock_current::yp#6 
Alias play_lock_current::l#4 = play_lock_current::l#5 
Alias current_xpos#86 = current_xpos#87 
Alias play_lock_current::yp#3 = play_lock_current::yp#4 
Alias play_lock_current::l#2 = play_lock_current::l#3 
Alias current_xpos#53 = current_xpos#68 
Alias current_piece_gfx#40 = current_piece_gfx#55 
Alias play_lock_current::i#4 = play_lock_current::i#5 
Alias current_piece_char#44 = current_piece_char#60 
Alias current_piece_gfx#8 = play_spawn_current::$0 current_piece_gfx#92 current_piece_gfx#91 
Alias play_collision::return#10 = play_collision::return#16 
Alias current_piece#5 = current_piece#73 current_piece#72 
Alias current_piece_char#5 = current_piece_char#77 current_piece_char#76 
Alias current_orientation#77 = current_orientation#78 current_orientation#8 
Alias current_xpos#100 = current_xpos#9 current_xpos#99 
Alias current_ypos#6 = current_ypos#80 current_ypos#79 
Alias game_over#65 = game_over#74 
Alias current_piece#18 = current_piece#81 current_piece#48 current_piece#74 current_piece#62 current_piece#35 current_piece#6 
Alias current_piece_char#18 = current_piece_char#88 current_piece_char#45 current_piece_char#78 current_piece_char#62 current_piece_char#32 current_piece_char#6 
Alias current_orientation#26 = current_orientation#87 current_orientation#56 current_orientation#79 current_orientation#69 current_orientation#45 current_orientation#9 
Alias current_piece_gfx#100 = current_piece_gfx#57 current_piece_gfx#93 current_piece_gfx#75 current_piece_gfx#41 current_piece_gfx#23 current_piece_gfx#9 
Alias current_xpos#10 = current_xpos#110 current_xpos#69 current_xpos#101 current_xpos#89 current_xpos#54 current_xpos#30 
Alias current_ypos#24 = current_ypos#89 current_ypos#57 current_ypos#81 current_ypos#71 current_ypos#45 current_ypos#7 
Alias game_over#16 = game_over#75 game_over#39 game_over#66 game_over#53 game_over#29 game_over#6 
Alias play_spawn_current::sid_rnd1_return#0 = play_spawn_current::sid_rnd1_return#2 play_spawn_current::sid_rnd1_return#1 play_spawn_current::sid_rnd1_return#3 play_spawn_current::$5 
Alias play_spawn_current::piece_idx#1 = play_spawn_current::$6 
Alias play_spawn_current::piece_idx#2 = play_spawn_current::piece_idx#3 
Alias next_piece_idx#18 = next_piece_idx#5 next_piece_idx#6 
Alias play_remove_lines::c#0 = play_remove_lines::c#2 
Alias play_remove_lines::w#8 = play_remove_lines::w#9 
Alias play_remove_lines::x#3 = play_remove_lines::x#4 
Alias play_remove_lines::r#1 = play_remove_lines::r#6 
Alias play_remove_lines::y#6 = play_remove_lines::y#7 
Alias play_remove_lines::removed#10 = play_remove_lines::removed#9 
Alias play_remove_lines::full#2 = play_remove_lines::full#3 
Alias play_remove_lines::y#3 = play_remove_lines::y#5 play_remove_lines::y#4 
Alias play_remove_lines::w#1 = play_remove_lines::w#10 play_remove_lines::w#5 
Alias play_remove_lines::removed#2 = play_remove_lines::removed#4 play_remove_lines::removed#6 
Alias play_remove_lines::r#4 = play_remove_lines::r#7 play_remove_lines::r#8 
Alias play_remove_lines::w#2 = play_remove_lines::$5 
Alias play_remove_lines::w#6 = play_remove_lines::w#7 
Alias play_remove_lines::removed#3 = play_remove_lines::removed#8 play_remove_lines::removed#5 play_remove_lines::return#1 play_remove_lines::return#4 play_remove_lines::return#2 
Alias lines_bcd#16 = lines_bcd#28 
Alias play_update_score::removed#1 = play_update_score::removed#2 
Alias level#35 = level#37 level#36 
Alias current_movedown_slow#39 = current_movedown_slow#41 current_movedown_slow#40 
Alias level_bcd#33 = level_bcd#35 level_bcd#34 
Alias play_update_score::lines_before#0 = play_update_score::$3 
Alias play_update_score::lines_after#0 = play_update_score::$5 
Alias lines_bcd#29 = lines_bcd#39 lines_bcd#5 
Alias level#18 = level#5 
Alias current_movedown_slow#22 = current_movedown_slow#7 
Alias level_bcd#18 = level_bcd#5 
Alias lines_bcd#17 = lines_bcd#6 
Alias level#19 = level#6 
Alias current_movedown_slow#23 = current_movedown_slow#8 
Alias level_bcd#19 = level_bcd#6 
Alias level_bcd#36 = level_bcd#48 level_bcd#37 
Alias level#21 = level#87 level#7 
Alias level_bcd#21 = level_bcd#7 
Alias level#77 = level#78 
Alias current_movedown_slow#72 = current_movedown_slow#73 
Alias level#22 = level#38 level#50 level#8 
Alias current_movedown_slow#11 = current_movedown_slow#42 current_movedown_slow#53 current_movedown_slow#24 
Alias level_bcd#22 = level_bcd#38 level_bcd#49 level_bcd#9 
Alias render_screen_show#22 = render_screen_show#27 render_screen_show#36 
Alias render_screen_render#27 = render_screen_render#35 render_screen_render#44 
Alias current_movedown_slow#43 = current_movedown_slow#79 current_movedown_slow#83 current_movedown_slow#74 current_movedown_slow#66 current_movedown_slow#54 
Alias next_piece_idx#32 = next_piece_idx#74 next_piece_idx#76 next_piece_idx#69 next_piece_idx#62 next_piece_idx#53 next_piece_idx#41 
Alias current_piece#36 = current_piece#87 current_piece#90 current_piece#82 current_piece#75 current_piece#63 current_piece#49 
Alias current_piece_char#33 = current_piece_char#95 current_piece_char#99 current_piece_char#89 current_piece_char#79 current_piece_char#63 current_piece_char#46 
Alias current_orientation#46 = current_orientation#91 current_orientation#94 current_orientation#88 current_orientation#80 current_orientation#70 current_orientation#57 
Alias current_piece_gfx#101 = current_piece_gfx#108 current_piece_gfx#111 current_piece_gfx#94 current_piece_gfx#76 current_piece_gfx#58 current_piece_gfx#42 
Alias current_xpos#102 = current_xpos#115 current_xpos#118 current_xpos#111 current_xpos#90 current_xpos#70 current_xpos#55 
Alias current_ypos#46 = current_ypos#94 current_ypos#97 current_ypos#90 current_ypos#82 current_ypos#72 current_ypos#58 
Alias game_over#30 = game_over#81 game_over#84 game_over#76 game_over#67 game_over#54 game_over#40 
Alias level#100 = level#103 level#95 level#88 level#79 level#59 level#101 level#96 level#89 level#80 level#66 level#51 
Alias keyboard_events_size#32 = keyboard_events_size#77 keyboard_events_size#78 keyboard_events_size#76 keyboard_events_size#75 keyboard_events_size#74 keyboard_events_size#73 keyboard_events_size#69 keyboard_events_size#64 keyboard_events_size#58 keyboard_events_size#49 keyboard_events_size#41 
Alias keyboard_modifiers#28 = keyboard_modifiers#59 keyboard_modifiers#60 keyboard_modifiers#58 keyboard_modifiers#57 keyboard_modifiers#56 keyboard_modifiers#55 keyboard_modifiers#52 keyboard_modifiers#49 keyboard_modifiers#46 keyboard_modifiers#40 keyboard_modifiers#34 
Alias current_movedown_counter#30 = current_movedown_counter#57 current_movedown_counter#58 current_movedown_counter#56 current_movedown_counter#55 current_movedown_counter#54 current_movedown_counter#53 current_movedown_counter#51 current_movedown_counter#48 current_movedown_counter#45 current_movedown_counter#41 current_movedown_counter#37 
Alias lines_bcd#40 = lines_bcd#86 lines_bcd#87 lines_bcd#85 lines_bcd#84 lines_bcd#83 lines_bcd#82 lines_bcd#80 lines_bcd#76 lines_bcd#70 lines_bcd#63 lines_bcd#52 
Alias level_bcd#100 = level_bcd#99 level_bcd#98 level_bcd#97 level_bcd#96 level_bcd#95 level_bcd#93 level_bcd#88 level_bcd#80 level_bcd#73 level_bcd#63 level_bcd#50 
Alias render_screen_show#14 = render_screen_show#5 render_screen_show#59 render_screen_show#58 render_screen_show#57 render_screen_show#54 render_screen_show#50 render_screen_show#44 render_screen_show#37 render_screen_show#28 
Alias render_screen_render#16 = render_screen_render#5 render_screen_render#59 render_screen_render#56 render_screen_render#51 render_screen_render#45 render_screen_render#30 render_screen_render#36 render_screen_render#25 render_screen_render#37 
Alias current_movedown_slow#12 = current_movedown_slow#25 current_movedown_slow#84 current_movedown_slow#80 current_movedown_slow#75 current_movedown_slow#67 current_movedown_slow#55 
Alias current_piece#19 = current_piece#7 
Alias current_piece_char#19 = current_piece_char#7 
Alias current_orientation#10 = current_orientation#27 
Alias current_piece_gfx#10 = current_piece_gfx#24 
Alias current_xpos#11 = current_xpos#31 
Alias current_ypos#25 = current_ypos#8 
Alias game_over#17 = game_over#7 
Alias next_piece_idx#19 = next_piece_idx#7 
Alias current_piece#20 = current_piece#8 current_piece#76 current_piece#64 current_piece#50 
Alias current_piece_char#20 = current_piece_char#8 current_piece_char#80 current_piece_char#64 current_piece_char#47 
Alias current_orientation#11 = current_orientation#28 current_orientation#81 current_orientation#71 current_orientation#58 
Alias current_piece_gfx#11 = current_piece_gfx#25 current_piece_gfx#81 current_piece_gfx#77 current_piece_gfx#59 
Alias current_xpos#12 = current_xpos#32 current_xpos#76 current_xpos#91 current_xpos#71 
Alias current_ypos#26 = current_ypos#9 current_ypos#30 current_ypos#73 current_ypos#59 
Alias game_over#18 = game_over#8 game_over#68 game_over#55 game_over#41 
Alias next_piece_idx#20 = next_piece_idx#8 next_piece_idx#63 next_piece_idx#46 next_piece_idx#42 
Alias render_screen_show#18 = render_screen_show#30 render_screen_show#55 render_screen_show#51 render_screen_show#46 render_screen_show#45 render_screen_show#38 
Alias keyboard_events_size#26 = keyboard_events_size#35 keyboard_events_size#42 
Alias keyboard_modifiers#22 = keyboard_modifiers#31 keyboard_modifiers#35 
Alias game_over#19 = game_over#56 game_over#69 game_over#44 game_over#31 game_over#32 
Alias current_movedown_counter#24 = current_movedown_counter#46 current_movedown_counter#49 current_movedown_counter#42 current_movedown_counter#38 current_movedown_counter#33 
Alias current_ypos#47 = current_ypos#91 current_ypos#95 current_ypos#83 current_ypos#74 current_ypos#62 
Alias lines_bcd#30 = lines_bcd#71 lines_bcd#77 lines_bcd#64 lines_bcd#53 lines_bcd#43 
Alias level#39 = level#90 level#97 level#81 level#67 level#54 
Alias current_movedown_slow#44 = current_movedown_slow#81 current_movedown_slow#85 current_movedown_slow#76 current_movedown_slow#68 current_movedown_slow#58 
Alias level_bcd#39 = level_bcd#81 level_bcd#89 level_bcd#74 level_bcd#64 level_bcd#53 
Alias current_piece#37 = current_piece#83 current_piece#88 current_piece#77 current_piece#65 current_piece#53 
Alias current_piece_char#34 = current_piece_char#90 current_piece_char#96 current_piece_char#81 current_piece_char#65 current_piece_char#50 
Alias current_orientation#47 = current_orientation#89 current_orientation#92 current_orientation#82 current_orientation#72 current_orientation#61 
Alias current_piece_gfx#102 = current_piece_gfx#109 current_piece_gfx#95 current_piece_gfx#78 current_piece_gfx#62 current_piece_gfx#43 
Alias current_xpos#103 = current_xpos#112 current_xpos#116 current_xpos#92 current_xpos#74 current_xpos#56 
Alias next_piece_idx#33 = next_piece_idx#70 next_piece_idx#75 next_piece_idx#64 next_piece_idx#54 next_piece_idx#45 
Alias render_screen_render#46 = render_screen_render#62 render_screen_render#63 render_screen_render#60 render_screen_render#57 render_screen_render#53 render_screen_render#52 
Alias keyboard_events_size#17 = keyboard_events_size#6 
Alias keyboard_modifiers#15 = keyboard_modifiers#7 keyboard_modifiers#42 keyboard_modifiers#41 keyboard_modifiers#36 
Alias keyboard_event_get::return#3 = keyboard_event_get::return#5 
Alias keyboard_events_size#18 = keyboard_events_size#7 keyboard_events_size#50 keyboard_events_size#43 
Alias main::key_event#0 = main::$13 main::key_event#1 
Alias play_movement::return#3 = play_movement::return#5 
Alias current_movedown_counter#15 = current_movedown_counter#6 
Alias current_ypos#10 = current_ypos#27 
Alias lines_bcd#18 = lines_bcd#7 
Alias level#23 = level#9 
Alias current_movedown_slow#13 = current_movedown_slow#26 
Alias level_bcd#10 = level_bcd#23 
Alias current_piece#21 = current_piece#9 
Alias current_piece_char#21 = current_piece_char#9 
Alias current_orientation#12 = current_orientation#29 
Alias current_piece_gfx#12 = current_piece_gfx#26 
Alias current_xpos#13 = current_xpos#33 
Alias game_over#20 = game_over#9 
Alias next_piece_idx#21 = next_piece_idx#9 
Alias main::render#1 = main::$16 
Alias main::render#3 = main::render#4 
Alias render_screen_show#39 = render_screen_show#47 
Alias render_screen_render#47 = render_screen_render#54 
Alias current_movedown_slow#69 = current_movedown_slow#77 
Alias current_piece#66 = current_piece#78 
Alias current_piece_char#66 = current_piece_char#82 
Alias current_orientation#73 = current_orientation#83 
Alias current_piece_gfx#79 = current_piece_gfx#96 
Alias current_xpos#104 = current_xpos#93 
Alias current_ypos#75 = current_ypos#84 
Alias game_over#57 = game_over#70 
Alias next_piece_idx#55 = next_piece_idx#65 
Alias keyboard_events_size#44 = keyboard_events_size#51 
Alias keyboard_modifiers#37 = keyboard_modifiers#43 
Alias current_movedown_counter#39 = current_movedown_counter#43 
Alias lines_bcd#54 = lines_bcd#65 
Alias level#68 = level#82 
Alias level_bcd#65 = level_bcd#75 
Alias render_screen_render#20 = render_screen_render#31 render_screen_render#38 render_screen_render#39 render_screen_render#26 render_screen_render#21 
Alias current_ypos#31 = current_ypos#63 current_ypos#61 current_ypos#92 current_ypos#85 current_ypos#76 current_ypos#60 
Alias current_xpos#105 = current_xpos#73 current_xpos#77 current_xpos#113 current_xpos#106 current_xpos#94 current_xpos#72 
Alias current_piece_gfx#103 = current_piece_gfx#61 current_piece_gfx#82 current_piece_gfx#104 current_piece_gfx#97 current_piece_gfx#80 current_piece_gfx#60 
Alias next_piece_idx#43 = next_piece_idx#71 next_piece_idx#44 next_piece_idx#66 next_piece_idx#47 next_piece_idx#67 next_piece_idx#56 
Alias render_screen_show#21 = render_screen_show#52 render_screen_show#29 render_screen_show#48 render_screen_show#40 render_screen_show#31 
Alias current_piece_char#48 = current_piece_char#97 current_piece_char#49 current_piece_char#84 current_piece_char#91 current_piece_char#83 current_piece_char#67 
Alias current_movedown_slow#56 = current_movedown_slow#87 current_movedown_slow#57 current_movedown_slow#86 current_movedown_slow#82 current_movedown_slow#78 current_movedown_slow#70 
Alias current_piece#51 = current_piece#91 current_piece#52 current_piece#89 current_piece#84 current_piece#79 current_piece#67 
Alias current_orientation#59 = current_orientation#95 current_orientation#60 current_orientation#93 current_orientation#90 current_orientation#84 current_orientation#74 
Alias game_over#42 = game_over#85 game_over#43 game_over#82 game_over#77 game_over#71 game_over#58 
Alias keyboard_events_size#33 = keyboard_events_size#70 keyboard_events_size#34 keyboard_events_size#65 keyboard_events_size#59 keyboard_events_size#52 keyboard_events_size#45 
Alias keyboard_modifiers#29 = keyboard_modifiers#53 keyboard_modifiers#30 keyboard_modifiers#50 keyboard_modifiers#47 keyboard_modifiers#44 keyboard_modifiers#38 
Alias current_movedown_counter#31 = current_movedown_counter#52 current_movedown_counter#32 current_movedown_counter#50 current_movedown_counter#47 current_movedown_counter#44 current_movedown_counter#40 
Alias lines_bcd#41 = lines_bcd#81 lines_bcd#42 lines_bcd#78 lines_bcd#72 lines_bcd#66 lines_bcd#55 
Alias level#102 = level#53 level#98 level#91 level#83 level#69 level#52 
Alias level_bcd#51 = level_bcd#94 level_bcd#52 level_bcd#90 level_bcd#82 level_bcd#76 level_bcd#66 
Alias render_screen_render#17 = render_screen_render#6 
Alias render_screen_show#15 = render_screen_show#6 
Alias render_screen_show#16 = render_screen_show#23 render_screen_show#7 
Alias render_screen_render#18 = render_screen_render#28 render_screen_render#7 
Alias current_movedown_slow#14 = current_movedown_slow#27 current_movedown_slow#45 
Alias current_piece#10 = current_piece#22 current_piece#38 
Alias current_piece_char#10 = current_piece_char#22 current_piece_char#35 
Alias current_orientation#13 = current_orientation#30 current_orientation#48 
Alias current_piece_gfx#13 = current_piece_gfx#27 current_piece_gfx#44 
Alias current_xpos#14 = current_xpos#34 current_xpos#57 
Alias current_ypos#11 = current_ypos#28 current_ypos#48 
Alias game_over#10 = game_over#21 game_over#33 
Alias next_piece_idx#10 = next_piece_idx#22 next_piece_idx#34 
Alias keyboard_events_size#19 = keyboard_events_size#27 keyboard_events_size#8 
Alias keyboard_modifiers#16 = keyboard_modifiers#23 keyboard_modifiers#8 
Alias current_movedown_counter#16 = current_movedown_counter#25 current_movedown_counter#7 
Alias lines_bcd#19 = lines_bcd#31 lines_bcd#8 
Alias level#10 = level#24 level#40 
Alias level_bcd#11 = level_bcd#24 level_bcd#40 
Alias current_movedown_slow#0 = current_movedown_slow#46 
Alias current_piece#0 = current_piece#39 
Alias current_orientation#0 = current_orientation#49 
Alias next_piece_idx#0 = next_piece_idx#35 
Alias current_movedown_counter#0 = current_movedown_counter#26 
Alias render_screen_show#17 = render_screen_show#8 
Alias render_screen_render#19 = render_screen_render#8 
Alias current_movedown_slow#15 = current_movedown_slow#28 
Alias current_piece#11 = current_piece#23 
Alias current_piece_char#11 = current_piece_char#23 
Alias current_orientation#14 = current_orientation#31 
Alias current_piece_gfx#14 = current_piece_gfx#28 
Alias current_xpos#15 = current_xpos#35 
Alias current_ypos#12 = current_ypos#29 
Alias game_over#11 = game_over#22 
Alias next_piece_idx#11 = next_piece_idx#23 
Alias keyboard_events_size#20 = keyboard_events_size#9 
Alias keyboard_modifiers#17 = keyboard_modifiers#9 
Alias current_movedown_counter#17 = current_movedown_counter#8 
Alias lines_bcd#20 = lines_bcd#9 
Alias level#11 = level#25 
Alias level_bcd#12 = level_bcd#25 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)render_screen_show#10 = render_screen_show#11 render_screen_showing 
Alias candidate removed (volatile)sprites_irq::toSpritePtr1_return#0 = irq_sprite_ptr $1 sprites_irq::toSpritePtr1_return#2 sprites_irq::toSpritePtr1_return#1 sprites_irq::toSpritePtr1_return#3 sprites_irq::$5 
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Alias keyboard_event_scan::keycode#10 = keyboard_event_scan::keycode#4 
Alias keyboard_event_scan::col#2 = keyboard_event_scan::col#3 
Alias keyboard_event_scan::row_scan#1 = keyboard_event_scan::row_scan#3 
Alias keyboard_event_scan::row#10 = keyboard_event_scan::row#6 
Alias keyboard_events_size#13 = keyboard_events_size#55 keyboard_events_size#54 keyboard_events_size#38 keyboard_events_size#23 
Alias level#12 = level#26 
Alias lines_bcd#10 = lines_bcd#56 
Alias level_bcd#13 = level_bcd#83 
Alias render_bcd::bcd#6 = render_bcd::bcd#7 
Alias render_moving::xpos#2 = render_moving::xpos#3 
Alias render_moving::c#2 = render_moving::c#3 
Alias render_moving::ypos#5 = render_moving::ypos#7 
Alias render_moving::l#3 = render_moving::l#6 
Alias current_piece_gfx#15 = current_piece_gfx#30 
Alias render_moving::i#2 = render_moving::i#7 
Alias current_piece_char#12 = current_piece_char#38 
Alias render_moving::screen_line#1 = render_moving::screen_line#3 
Alias render_screen_render#41 = render_screen_render#48 
Alias current_xpos#78 = current_xpos#95 
Alias next_piece_idx#12 = next_piece_idx#24 
Alias render_next::screen_next_area#5 = render_next::screen_next_area#7 
Alias render_next::c#2 = render_next::c#3 
Alias render_next::next_piece_gfx#1 = render_next::next_piece_gfx#4 
Alias render_next::l#2 = render_next::l#4 
Alias render_next::next_piece_char#1 = render_next::next_piece_char#4 
Alias current_movedown_counter#1 = current_movedown_counter#10 
Alias current_ypos#1 = current_ypos#15 
Alias lines_bcd#1 = lines_bcd#13 
Alias level#1 = level#15 
Alias current_movedown_slow#17 = current_movedown_slow#18 
Alias level_bcd#1 = level_bcd#15 
Alias current_piece#1 = current_piece#13 
Alias current_piece_char#1 = current_piece_char#14 
Alias game_over#1 = game_over#13 
Alias next_piece_idx#1 = next_piece_idx#14 
Alias current_movedown_counter#12 = current_movedown_counter#13 current_movedown_counter#3 current_movedown_counter#23 
Alias current_movedown_slow#19 = current_movedown_slow#33 current_movedown_slow#60 current_movedown_slow#36 
Alias current_ypos#16 = current_ypos#66 current_ypos#87 current_ypos#51 
Alias current_xpos#108 = current_xpos#81 current_xpos#61 current_xpos#20 
Alias current_orientation#18 = current_orientation#62 current_orientation#85 current_orientation#51 
Alias lines_bcd#25 = lines_bcd#59 lines_bcd#74 lines_bcd#48 
Alias level#32 = level#73 level#93 level#61 
Alias level_bcd#30 = level_bcd#69 level_bcd#86 level_bcd#58 
Alias current_piece#27 = current_piece#68 current_piece#85 current_piece#55 
Alias current_piece_char#28 = current_piece_char#71 current_piece_char#93 current_piece_char#55 
Alias current_piece_gfx#106 = current_piece_gfx#85 current_piece_gfx#67 current_piece_gfx#34 
Alias game_over#26 = game_over#60 game_over#79 game_over#48 
Alias next_piece_idx#29 = next_piece_idx#57 next_piece_idx#72 next_piece_idx#49 
Alias current_xpos#23 = current_xpos#48 
Alias current_xpos#28 = current_xpos#50 
Alias current_ypos#22 = current_ypos#42 
Alias current_piece#16 = current_piece#46 
Alias current_orientation#23 = current_orientation#43 
Alias current_piece_gfx#37 = current_piece_gfx#38 
Alias play_collision::xp#2 = play_collision::xp#3 
Alias play_collision::c#2 = play_collision::c#3 
Alias play_collision::piece_gfx#1 = play_collision::piece_gfx#3 
Alias play_collision::i#1 = play_collision::i#4 
Alias play_collision::yp#3 = play_collision::yp#4 
Alias play_collision::l#2 = play_collision::l#4 
Alias play_collision::xpos#10 = play_collision::xpos#7 
Alias play_collision::playfield_line#1 = play_collision::playfield_line#6 
Alias play_lock_current::xp#2 = play_lock_current::xp#3 
Alias play_lock_current::c#2 = play_lock_current::c#3 
Alias current_piece_gfx#22 = current_piece_gfx#40 
Alias play_lock_current::i#1 = play_lock_current::i#4 
Alias play_lock_current::yp#3 = play_lock_current::yp#5 
Alias play_lock_current::l#2 = play_lock_current::l#4 
Alias current_piece_char#17 = current_piece_char#44 
Alias play_lock_current::playfield_line#1 = play_lock_current::playfield_line#3 
Alias current_xpos#53 = current_xpos#86 
Alias current_piece#5 = current_piece#61 
Alias current_piece_char#5 = current_piece_char#61 
Alias current_orientation#68 = current_orientation#77 
Alias current_piece_gfx#74 = current_piece_gfx#8 
Alias current_xpos#100 = current_xpos#88 
Alias current_ypos#6 = current_ypos#70 
Alias play_remove_lines::c#0 = play_remove_lines::c#1 
Alias play_remove_lines::w#4 = play_remove_lines::w#8 
Alias play_remove_lines::x#2 = play_remove_lines::x#3 
Alias play_remove_lines::r#1 = play_remove_lines::r#4 play_remove_lines::r#5 
Alias play_remove_lines::y#2 = play_remove_lines::y#3 play_remove_lines::y#6 
Alias play_remove_lines::removed#10 = play_remove_lines::removed#2 
Alias level_bcd#20 = level_bcd#36 
Alias level#21 = level#77 level#65 
Alias current_movedown_slow#65 = current_movedown_slow#72 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)render_screen_show#10 = render_screen_show#11 render_screen_showing 
Alias candidate removed (volatile)sprites_irq::toSpritePtr1_return#0 = irq_sprite_ptr $1 sprites_irq::toSpritePtr1_return#2 sprites_irq::toSpritePtr1_return#1 sprites_irq::toSpritePtr1_return#3 sprites_irq::$5 
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Identical Phi Values (byte) keyboard_matrix_read::rowid#1 (byte) keyboard_matrix_read::rowid#0
Identical Phi Values (byte) keyboard_events_size#53 (byte) keyboard_events_size#26
Identical Phi Values (byte) keyboard_event_scan::row_scan#1 (byte) keyboard_event_scan::row_scan#0
Identical Phi Values (byte) keyboard_event_scan::row#10 (byte) keyboard_event_scan::row#2
Identical Phi Values (byte) keyboard_events_size#14 (byte) keyboard_events_size#17
Identical Phi Values (byte) render_screen_show#10 (byte) render_screen_show#18
Identical Phi Values (byte) level#12 (byte) level#39
Identical Phi Values (byte) render_screen_show#11 (byte) render_screen_show#10
Identical Phi Values (byte) render_screen_render#10 (byte) render_screen_render#20
Identical Phi Values (byte) render_screen_show#12 (byte) render_screen_show#21
Identical Phi Values (byte) render_screen_render#12 (byte) render_screen_render#20
Identical Phi Values (word) lines_bcd#10 (word) lines_bcd#41
Identical Phi Values (byte) level_bcd#13 (byte) level_bcd#51
Identical Phi Values (byte*) render_screen_original::oscr#3 (byte*) render_screen_original::oscr#4
Identical Phi Values (byte*) render_screen_original::ocols#3 (byte*) render_screen_original::ocols#4
Identical Phi Values (byte) render_screen_original::y#5 (byte) render_screen_original::y#6
Identical Phi Values (byte) render_screen_original::y#4 (byte) render_screen_original::y#5
Identical Phi Values (byte) render_screen_original::y#2 (byte) render_screen_original::y#4
Identical Phi Values (byte*) render_screen_original::oscr#5 (byte*) render_screen_original::oscr#1
Identical Phi Values (byte*) render_screen_original::ocols#5 (byte*) render_screen_original::ocols#1
Identical Phi Values (byte) render_playfield::l#3 (byte) render_playfield::l#2
Identical Phi Values (byte) render_screen_render#23 (byte) render_screen_render#13
Identical Phi Values (byte*) current_piece_gfx#15 (byte*) current_piece_gfx#29
Identical Phi Values (byte) current_piece_char#12 (byte) current_piece_char#37
Identical Phi Values (byte*) render_moving::screen_line#1 (byte*) render_moving::screen_line#0
Identical Phi Values (byte) render_moving::ypos#5 (byte) render_moving::ypos#2
Identical Phi Values (byte) render_moving::l#3 (byte) render_moving::l#4
Identical Phi Values (byte) render_screen_render#41 (byte) render_screen_render#14
Identical Phi Values (byte) current_xpos#78 (byte) current_xpos#16
Identical Phi Values (byte) render_next::next_piece_char#1 (byte) render_next::next_piece_char#3
Identical Phi Values (byte) render_next::l#2 (byte) render_next::l#7
Identical Phi Values (byte) sprites_irq::toSpritePtr1_return#2 (byte) sprites_irq::toSpritePtr1_return#0
Identical Phi Values (byte) sprites_irq::toSpritePtr1_return#3 (byte) sprites_irq::toSpritePtr1_return#1
Identical Phi Values (byte) level#44 (byte) level#100
Identical Phi Values (byte) level#13 (byte) level#44
Identical Phi Values (byte) current_movedown_slow#16 (byte) current_movedown_slow#1
Identical Phi Values (byte) play_movement::key_event#1 (byte) play_movement::key_event#0
Identical Phi Values (byte) current_movedown_counter#18 (byte) current_movedown_counter#24
Identical Phi Values (byte) current_ypos#32 (byte) current_ypos#47
Identical Phi Values (word) lines_bcd#22 (word) lines_bcd#30
Identical Phi Values (byte) level#29 (byte) level#39
Identical Phi Values (byte) current_movedown_slow#30 (byte) current_movedown_slow#44
Identical Phi Values (byte) level_bcd#27 (byte) level_bcd#39
Identical Phi Values (byte*) current_piece#24 (byte*) current_piece#37
Identical Phi Values (byte) current_piece_char#25 (byte) current_piece_char#34
Identical Phi Values (byte) current_orientation#32 (byte) current_orientation#47
Identical Phi Values (byte*) current_piece_gfx#31 (byte*) current_piece_gfx#102
Identical Phi Values (byte) current_xpos#37 (byte) current_xpos#103
Identical Phi Values (byte) game_over#23 (byte) game_over#19
Identical Phi Values (byte) next_piece_idx#26 (byte) next_piece_idx#33
Identical Phi Values (byte) current_movedown_counter#1 (byte) current_movedown_counter#14
Identical Phi Values (byte) current_ypos#1 (byte) current_ypos#19
Identical Phi Values (word) lines_bcd#1 (word) lines_bcd#15
Identical Phi Values (byte) level#1 (byte) level#17
Identical Phi Values (byte) current_movedown_slow#17 (byte) current_movedown_slow#21
Identical Phi Values (byte) level_bcd#1 (byte) level_bcd#17
Identical Phi Values (byte*) current_piece#1 (byte*) current_piece#15
Identical Phi Values (byte) current_piece_char#1 (byte) current_piece_char#16
Identical Phi Values (byte) current_orientation#1 (byte) current_orientation#20
Identical Phi Values (byte*) current_piece_gfx#1 (byte*) current_piece_gfx#20
Identical Phi Values (byte) current_xpos#1 (byte) current_xpos#22
Identical Phi Values (byte) game_over#1 (byte) game_over#15
Identical Phi Values (byte) next_piece_idx#1 (byte) next_piece_idx#16
Identical Phi Values (byte) current_xpos#18 (byte) current_xpos#26
Identical Phi Values (byte) current_orientation#16 (byte) current_orientation#25
Identical Phi Values (byte*) current_piece_gfx#17 (byte*) current_piece_gfx#21
Identical Phi Values (byte) current_movedown_counter#11 (byte) current_movedown_counter#18
Identical Phi Values (byte) play_move_down::key_event#1 (byte) play_move_down::key_event#0
Identical Phi Values (byte) current_movedown_slow#19 (byte) current_movedown_slow#30
Identical Phi Values (byte) current_ypos#16 (byte) current_ypos#32
Identical Phi Values (byte) current_xpos#108 (byte) current_xpos#37
Identical Phi Values (byte) current_orientation#18 (byte) current_orientation#32
Identical Phi Values (word) lines_bcd#25 (word) lines_bcd#22
Identical Phi Values (byte) level#32 (byte) level#29
Identical Phi Values (byte) level_bcd#30 (byte) level_bcd#27
Identical Phi Values (byte*) current_piece#27 (byte*) current_piece#24
Identical Phi Values (byte) current_piece_char#28 (byte) current_piece_char#25
Identical Phi Values (byte*) current_piece_gfx#106 (byte*) current_piece_gfx#31
Identical Phi Values (byte) game_over#26 (byte) game_over#23
Identical Phi Values (byte) next_piece_idx#29 (byte) next_piece_idx#26
Identical Phi Values (word) lines_bcd#14 (word) lines_bcd#17
Identical Phi Values (byte) level#16 (byte) level#19
Identical Phi Values (byte) current_movedown_slow#20 (byte) current_movedown_slow#23
Identical Phi Values (byte) level_bcd#16 (byte) level_bcd#19
Identical Phi Values (byte*) current_piece#14 (byte*) current_piece#18
Identical Phi Values (byte) current_piece_char#15 (byte) current_piece_char#18
Identical Phi Values (byte) current_orientation#19 (byte) current_orientation#26
Identical Phi Values (byte*) current_piece_gfx#19 (byte*) current_piece_gfx#100
Identical Phi Values (byte) current_xpos#21 (byte) current_xpos#10
Identical Phi Values (byte) current_ypos#18 (byte) current_ypos#24
Identical Phi Values (byte) game_over#14 (byte) game_over#16
Identical Phi Values (byte) next_piece_idx#15 (byte) next_piece_idx#18
Identical Phi Values (byte) play_move_leftright::key_event#1 (byte) play_move_leftright::key_event#0
Identical Phi Values (byte) current_xpos#23 (byte) current_xpos#1
Identical Phi Values (byte) current_ypos#20 (byte) current_ypos#1
Identical Phi Values (byte) current_orientation#21 (byte) current_orientation#1
Identical Phi Values (byte*) current_piece#32 (byte*) current_piece#1
Identical Phi Values (byte) play_move_rotate::key_event#1 (byte) play_move_rotate::key_event#0
Identical Phi Values (byte) current_orientation#23 (byte) current_orientation#1
Identical Phi Values (byte) current_xpos#28 (byte) current_xpos#18
Identical Phi Values (byte) current_ypos#22 (byte) current_ypos#1
Identical Phi Values (byte*) current_piece#16 (byte*) current_piece#1
Identical Phi Values (byte*) current_piece_gfx#37 (byte*) current_piece_gfx#1
Identical Phi Values (byte*) play_collision::piece_gfx#1 (byte*) play_collision::piece_gfx#2
Identical Phi Values (byte) play_collision::yp#3 (byte) play_collision::yp#2
Identical Phi Values (byte) play_collision::l#2 (byte) play_collision::l#6
Identical Phi Values (byte) play_collision::xpos#10 (byte) play_collision::xp#0
Identical Phi Values (byte*) play_collision::playfield_line#1 (byte*) play_collision::playfield_line#0
Identical Phi Values (byte) current_ypos#23 (byte) current_ypos#16
Identical Phi Values (byte) current_xpos#52 (byte) current_xpos#108
Identical Phi Values (byte*) current_piece_gfx#54 (byte*) current_piece_gfx#106
Identical Phi Values (byte) current_piece_char#59 (byte) current_piece_char#28
Identical Phi Values (byte*) current_piece_gfx#22 (byte*) current_piece_gfx#39
Identical Phi Values (byte) current_piece_char#17 (byte) current_piece_char#43
Identical Phi Values (byte*) play_lock_current::playfield_line#1 (byte*) play_lock_current::playfield_line#0
Identical Phi Values (byte) play_lock_current::yp#3 (byte) play_lock_current::yp#2
Identical Phi Values (byte) play_lock_current::l#2 (byte) play_lock_current::l#6
Identical Phi Values (byte) current_xpos#53 (byte) current_xpos#29
Identical Phi Values (byte*) current_piece#18 (byte*) current_piece#5
Identical Phi Values (byte) current_piece_char#18 (byte) current_piece_char#5
Identical Phi Values (byte) current_orientation#26 (byte) current_orientation#68
Identical Phi Values (byte*) current_piece_gfx#100 (byte*) current_piece_gfx#74
Identical Phi Values (byte) current_xpos#10 (byte) current_xpos#100
Identical Phi Values (byte) current_ypos#24 (byte) current_ypos#6
Identical Phi Values (byte) game_over#16 (byte) game_over#52
Identical Phi Values (byte) play_remove_lines::y#2 (byte) play_remove_lines::y#8
Identical Phi Values (byte) play_remove_lines::removed#10 (byte) play_remove_lines::removed#11
Identical Phi Values (byte) play_remove_lines::removed#3 (byte) play_remove_lines::removed#7
Identical Phi Values (byte) play_update_score::removed#1 (byte) play_update_score::removed#0
Identical Phi Values (word) lines_bcd#16 (word) lines_bcd#25
Identical Phi Values (byte) level#35 (byte) level#32
Identical Phi Values (byte) current_movedown_slow#39 (byte) current_movedown_slow#19
Identical Phi Values (byte) level_bcd#33 (byte) level_bcd#30
Identical Phi Values (byte) level#18 (byte) level#22
Identical Phi Values (byte) current_movedown_slow#22 (byte) current_movedown_slow#11
Identical Phi Values (byte) level_bcd#18 (byte) level_bcd#22
Identical Phi Values (byte) level#20 (byte) level#35
Identical Phi Values (byte) level_bcd#20 (byte) level_bcd#33
Identical Phi Values (byte) level#22 (byte) level#21
Identical Phi Values (byte) current_movedown_slow#11 (byte) current_movedown_slow#65
Identical Phi Values (byte) level_bcd#22 (byte) level_bcd#62
Identical Phi Values (byte) render_screen_show#22 (byte) render_screen_show#0
Identical Phi Values (byte) render_screen_render#27 (byte) render_screen_render#0
Identical Phi Values (byte) current_movedown_slow#43 (byte) current_movedown_slow#0
Identical Phi Values (byte) next_piece_idx#32 (byte) next_piece_idx#0
Identical Phi Values (byte*) current_piece#36 (byte*) current_piece#0
Identical Phi Values (byte) current_piece_char#33 (byte) current_piece_char#0
Identical Phi Values (byte) current_orientation#46 (byte) current_orientation#0
Identical Phi Values (byte*) current_piece_gfx#101 (byte*) current_piece_gfx#0
Identical Phi Values (byte) current_xpos#102 (byte) current_xpos#0
Identical Phi Values (byte) current_ypos#46 (byte) current_ypos#0
Identical Phi Values (byte) game_over#30 (byte) game_over#0
Identical Phi Values (byte) level#100 (byte) level#0
Identical Phi Values (byte) keyboard_events_size#32 (byte) keyboard_events_size#0
Identical Phi Values (byte) keyboard_modifiers#28 (byte) keyboard_modifiers#0
Identical Phi Values (byte) current_movedown_counter#30 (byte) current_movedown_counter#0
Identical Phi Values (word) lines_bcd#40 (word) lines_bcd#0
Identical Phi Values (byte) level_bcd#100 (byte) level_bcd#0
Identical Phi Values (byte) render_screen_show#14 (byte) render_screen_show#1
Identical Phi Values (byte) render_screen_render#16 (byte) render_screen_render#1
Identical Phi Values (byte) current_movedown_slow#12 (byte) current_movedown_slow#16
Identical Phi Values (byte*) current_piece#19 (byte*) current_piece#18
Identical Phi Values (byte) current_piece_char#19 (byte) current_piece_char#18
Identical Phi Values (byte) current_orientation#10 (byte) current_orientation#26
Identical Phi Values (byte*) current_piece_gfx#10 (byte*) current_piece_gfx#100
Identical Phi Values (byte) current_xpos#11 (byte) current_xpos#10
Identical Phi Values (byte) current_ypos#25 (byte) current_ypos#24
Identical Phi Values (byte) game_over#17 (byte) game_over#16
Identical Phi Values (byte) next_piece_idx#19 (byte) next_piece_idx#18
Identical Phi Values (byte*) current_piece#20 (byte*) current_piece#18
Identical Phi Values (byte) current_piece_char#20 (byte) current_piece_char#18
Identical Phi Values (byte) current_orientation#11 (byte) current_orientation#26
Identical Phi Values (byte*) current_piece_gfx#11 (byte*) current_piece_gfx#100
Identical Phi Values (byte) current_xpos#12 (byte) current_xpos#10
Identical Phi Values (byte) current_ypos#26 (byte) current_ypos#24
Identical Phi Values (byte) game_over#18 (byte) game_over#16
Identical Phi Values (byte) next_piece_idx#20 (byte) next_piece_idx#18
Identical Phi Values (byte) render_screen_show#18 (byte) render_screen_show#16
Identical Phi Values (byte) keyboard_events_size#26 (byte) keyboard_events_size#19
Identical Phi Values (byte) keyboard_modifiers#22 (byte) keyboard_modifiers#16
Identical Phi Values (byte) game_over#19 (byte) game_over#10
Identical Phi Values (byte) current_movedown_counter#24 (byte) current_movedown_counter#16
Identical Phi Values (byte) current_ypos#47 (byte) current_ypos#11
Identical Phi Values (word) lines_bcd#30 (word) lines_bcd#19
Identical Phi Values (byte) level#39 (byte) level#10
Identical Phi Values (byte) current_movedown_slow#44 (byte) current_movedown_slow#14
Identical Phi Values (byte) level_bcd#39 (byte) level_bcd#11
Identical Phi Values (byte*) current_piece#37 (byte*) current_piece#10
Identical Phi Values (byte) current_piece_char#34 (byte) current_piece_char#10
Identical Phi Values (byte) current_orientation#47 (byte) current_orientation#13
Identical Phi Values (byte*) current_piece_gfx#102 (byte*) current_piece_gfx#13
Identical Phi Values (byte) current_xpos#103 (byte) current_xpos#14
Identical Phi Values (byte) next_piece_idx#33 (byte) next_piece_idx#10
Identical Phi Values (byte) render_screen_render#46 (byte) render_screen_render#18
Identical Phi Values (byte) keyboard_events_size#17 (byte) keyboard_events_size#13
Identical Phi Values (byte) keyboard_modifiers#15 (byte) keyboard_modifiers#14
Identical Phi Values (byte) keyboard_events_size#18 (byte) keyboard_events_size#16
Identical Phi Values (byte) current_movedown_counter#15 (byte) current_movedown_counter#1
Identical Phi Values (byte) current_ypos#10 (byte) current_ypos#1
Identical Phi Values (word) lines_bcd#18 (word) lines_bcd#1
Identical Phi Values (byte) level#23 (byte) level#1
Identical Phi Values (byte) current_movedown_slow#13 (byte) current_movedown_slow#17
Identical Phi Values (byte) level_bcd#10 (byte) level_bcd#1
Identical Phi Values (byte*) current_piece#21 (byte*) current_piece#1
Identical Phi Values (byte) current_piece_char#21 (byte) current_piece_char#1
Identical Phi Values (byte) current_orientation#12 (byte) current_orientation#17
Identical Phi Values (byte*) current_piece_gfx#12 (byte*) current_piece_gfx#18
Identical Phi Values (byte) current_xpos#13 (byte) current_xpos#19
Identical Phi Values (byte) game_over#20 (byte) game_over#1
Identical Phi Values (byte) next_piece_idx#21 (byte) next_piece_idx#1
Identical Phi Values (byte) main::render#3 (byte) main::render#0
Identical Phi Values (byte) render_screen_show#39 (byte) render_screen_show#18
Identical Phi Values (byte) render_screen_render#47 (byte) render_screen_render#46
Identical Phi Values (byte) current_movedown_slow#69 (byte) current_movedown_slow#44
Identical Phi Values (byte*) current_piece#66 (byte*) current_piece#37
Identical Phi Values (byte) current_piece_char#66 (byte) current_piece_char#34
Identical Phi Values (byte) current_orientation#73 (byte) current_orientation#47
Identical Phi Values (byte*) current_piece_gfx#79 (byte*) current_piece_gfx#102
Identical Phi Values (byte) current_xpos#104 (byte) current_xpos#103
Identical Phi Values (byte) current_ypos#75 (byte) current_ypos#47
Identical Phi Values (byte) game_over#57 (byte) game_over#19
Identical Phi Values (byte) next_piece_idx#55 (byte) next_piece_idx#33
Identical Phi Values (byte) keyboard_events_size#44 (byte) keyboard_events_size#18
Identical Phi Values (byte) keyboard_modifiers#37 (byte) keyboard_modifiers#15
Identical Phi Values (byte) current_movedown_counter#39 (byte) current_movedown_counter#24
Identical Phi Values (word) lines_bcd#54 (word) lines_bcd#30
Identical Phi Values (byte) level#68 (byte) level#39
Identical Phi Values (byte) level_bcd#65 (byte) level_bcd#39
Identical Phi Values (byte) render_screen_render#17 (byte) render_screen_render#11
Identical Phi Values (byte) render_screen_show#15 (byte) render_screen_show#13
Identical Phi Values (byte) render_screen_show#17 (byte) render_screen_show#16
Identical Phi Values (byte) render_screen_render#19 (byte) render_screen_render#18
Identical Phi Values (byte) current_movedown_slow#15 (byte) current_movedown_slow#14
Identical Phi Values (byte*) current_piece#11 (byte*) current_piece#10
Identical Phi Values (byte) current_piece_char#11 (byte) current_piece_char#10
Identical Phi Values (byte) current_orientation#14 (byte) current_orientation#13
Identical Phi Values (byte*) current_piece_gfx#14 (byte*) current_piece_gfx#13
Identical Phi Values (byte) current_xpos#15 (byte) current_xpos#14
Identical Phi Values (byte) current_ypos#12 (byte) current_ypos#11
Identical Phi Values (byte) game_over#11 (byte) game_over#10
Identical Phi Values (byte) next_piece_idx#11 (byte) next_piece_idx#10
Identical Phi Values (byte) keyboard_events_size#20 (byte) keyboard_events_size#19
Identical Phi Values (byte) keyboard_modifiers#17 (byte) keyboard_modifiers#16
Identical Phi Values (byte) current_movedown_counter#17 (byte) current_movedown_counter#16
Identical Phi Values (word) lines_bcd#20 (word) lines_bcd#19
Identical Phi Values (byte) level#11 (byte) level#10
Identical Phi Values (byte) level_bcd#12 (byte) level_bcd#11
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte) keyboard_event_scan::row#4 (byte) keyboard_event_scan::row#2
Identical Phi Values (byte) render_screen_render#13 (byte) render_screen_render#22
Identical Phi Values (byte) render_moving::ypos#4 (byte) render_moving::ypos#2
Identical Phi Values (byte) render_moving::l#2 (byte) render_moving::l#4
Identical Phi Values (byte) render_screen_render#34 (byte) render_screen_render#14
Identical Phi Values (byte) current_xpos#60 (byte) current_xpos#16
Identical Phi Values (byte*) current_piece_gfx#65 (byte*) current_piece_gfx#29
Identical Phi Values (byte) current_piece_char#69 (byte) current_piece_char#37
Identical Phi Values (byte) render_next::next_piece_char#3 (byte) render_next::next_piece_char#0
Identical Phi Values (byte) play_collision::xp#0 (byte) play_collision::xpos#6
Identical Phi Values (byte*) play_collision::piece_gfx#2 (byte*) play_collision::piece_gfx#0
Identical Phi Values (byte) current_xpos#29 (byte) current_xpos#14
Identical Phi Values (byte*) current_piece_gfx#39 (byte*) current_piece_gfx#13
Identical Phi Values (byte) current_piece_char#43 (byte) current_piece_char#10
Identical Phi Values (byte) render_screen_show#21 (byte) render_screen_show#16
Identical Phi Values (byte) render_screen_render#20 (byte) render_screen_render#18
Identical Phi Values (byte) keyboard_events_size#33 (byte) keyboard_events_size#16
Identical Phi Values (byte) keyboard_modifiers#29 (byte) keyboard_modifiers#14
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte) render_screen_render#14 (byte) render_screen_render#33
Identical Phi Values (byte) current_xpos#16 (byte) current_xpos#59
Identical Phi Values (byte*) current_piece_gfx#29 (byte*) current_piece_gfx#64
Identical Phi Values (byte) current_piece_char#37 (byte) current_piece_char#68
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [178] (byte~) render_init::$5 ← (byte) render_init::i#2 * (const byte) SIZEOF_POINTER
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) keyboard_event_scan::$13 [15] if((byte) keyboard_event_scan::row_scan#0!=*((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@8
Simple Condition (bool~) keyboard_event_scan::$25 [21] if((byte) keyboard_event_scan::row#1!=rangelast(0,7)) goto keyboard_event_scan::@7
Simple Condition (bool~) keyboard_event_scan::$18 [26] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@11
Simple Condition (bool~) keyboard_event_scan::$24 [31] if((byte) keyboard_event_scan::col#1!=rangelast(0,7)) goto keyboard_event_scan::@10
Simple Condition (bool~) keyboard_event_scan::$20 [33] if((byte) keyboard_events_size#10==(byte) 8) goto keyboard_event_scan::@11
Simple Condition (bool~) keyboard_event_scan::$22 [36] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@12
Simple Condition (bool~) keyboard_event_scan::$2 [49] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1
Simple Condition (bool~) keyboard_event_scan::$5 [56] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2
Simple Condition (bool~) keyboard_event_scan::$8 [64] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3
Simple Condition (bool~) keyboard_event_scan::$11 [72] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return
Simple Condition (bool~) keyboard_event_get::$0 [85] if((byte) keyboard_events_size#13==(byte) 0) goto keyboard_event_get::@1
Simple Condition (bool~) render_init::$3 [132] if((byte) render_init::i#1!=rangelast(0,PLAYFIELD_LINES-1)) goto render_init::@1
Simple Condition (bool~) render_show::$0 [139] if((byte) render_screen_show#16==(byte) 0) goto render_show::@1
Simple Condition (bool~) render_score::$0 [173] if((byte) render_screen_render#18==(byte) 0) goto render_score::@1
Simple Condition (bool~) render_bcd::$2 [211] if((byte) render_bcd::only_low#6!=(byte) 0) goto render_bcd::@1
Simple Condition (bool~) render_screen_original::$0 [236] if((byte) render_screen_original::x#1!=(byte) 4) goto render_screen_original::@2
Simple Condition (bool~) render_screen_original::$1 [246] if((byte) render_screen_original::x#2!=(byte) $24) goto render_screen_original::@3
Simple Condition (bool~) render_screen_original::$2 [254] if((byte) render_screen_original::x#3!=(byte) $28) goto render_screen_original::@4
Simple Condition (bool~) render_screen_original::$3 [257] if((byte) render_screen_original::y#1!=rangelast(0,$18)) goto render_screen_original::@1
Simple Condition (bool~) render_playfield::$1 [273] if((byte) render_playfield::c#1!=rangelast(0,PLAYFIELD_COLS-1)) goto render_playfield::@2
Simple Condition (bool~) render_playfield::$2 [276] if((byte) render_playfield::l#1!=rangelast(2,PLAYFIELD_LINES-1)) goto render_playfield::@1
Simple Condition (bool~) render_moving::$0 [284] if((byte) render_moving::ypos#2>(byte) 1) goto render_moving::@2
Simple Condition (bool~) render_moving::$5 [295] if((byte) render_moving::l#1!=rangelast(0,3)) goto render_moving::@1
Simple Condition (bool~) render_moving::$3 [300] if((byte) render_moving::current_cell#0==(byte) 0) goto render_moving::@5
Simple Condition (bool~) render_moving::$4 [304] if((byte) render_moving::c#1!=rangelast(0,3)) goto render_moving::@4
Simple Condition (bool~) render_next::$0 [310] if((byte) render_screen_render#15==(byte) 0) goto render_next::@1
Simple Condition (bool~) render_next::$3 [324] if((byte) render_next::cell#0!=(byte) 0) goto render_next::@6
Simple Condition (bool~) render_next::$4 [330] if((byte) render_next::c#1!=rangelast(0,3)) goto render_next::@5
Simple Condition (bool~) render_next::$5 [334] if((byte) render_next::l#1!=rangelast(0,3)) goto render_next::@4
Simple Condition (bool~) sprites_init::$2 [350] if((byte) sprites_init::s#1!=rangelast(0,3)) goto sprites_init::@1
Simple Condition (bool~) sprites_irq::$4 [382] if(*((const nomodify byte*) RASTER)<(volatile byte) sprites_irq::raster_sprite_gfx_modify) goto sprites_irq::@8
Simple Condition (bool~) sprites_irq::$1 [385] if((volatile byte) render_screen_showing==(byte) 0) goto sprites_irq::@1
Simple Condition (bool~) sprites_irq::$2 [400] if((volatile byte) irq_cnt==(byte) 9) goto sprites_irq::@3
Simple Condition (bool~) sprites_irq::$3 [413] if((volatile byte) irq_cnt==(byte) $a) goto sprites_irq::@4
Simple Condition (bool~) play_init::$0 [441] if((byte) play_init::j#1!=rangelast(0,PLAYFIELD_LINES-1)) goto play_init::@1
Simple Condition (bool~) play_init::$1 [450] if((byte) play_init::b#1!=rangelast(0,4)) goto play_init::@3
Simple Condition (bool~) play_movement::$2 [461] if((byte) game_over#15==(byte) 0) goto play_movement::@1
Simple Condition (bool~) play_move_down::$1 [480] if((byte) play_move_down::key_event#0!=(const nomodify byte) KEY_SPACE) goto play_move_down::@1
Simple Condition (bool~) play_move_down::$4 [487] if((byte~) play_move_down::$2==(byte) 0) goto play_move_down::@2
Simple Condition (bool~) play_move_down::$6 [491] if((byte) current_movedown_counter#12<(byte) current_movedown_slow#14) goto play_move_down::@3
Simple Condition (bool~) play_move_down::$10 [493] if((byte) current_movedown_counter#12<(const nomodify byte) current_movedown_fast) goto play_move_down::@2
Simple Condition (bool~) play_move_down::$8 [497] if((byte) play_move_down::movedown#6==(byte) 0) goto play_move_down::@4
Simple Condition (bool~) play_move_down::$13 [507] if((byte~) play_move_down::$12==(const nomodify byte) COLLISION_NONE) goto play_move_down::@11
Simple Condition (bool~) play_move_leftright::$0 [525] if((byte) play_move_leftright::key_event#0==(const nomodify byte) KEY_COMMA) goto play_move_leftright::@1
Simple Condition (bool~) play_move_leftright::$10 [533] if((byte~) play_move_leftright::$8!=(const nomodify byte) COLLISION_NONE) goto play_move_leftright::@2
Simple Condition (bool~) play_move_leftright::$2 [535] if((byte) play_move_leftright::key_event#0!=(const nomodify byte) KEY_DOT) goto play_move_leftright::@2
Simple Condition (bool~) play_move_leftright::$6 [543] if((byte~) play_move_leftright::$4!=(const nomodify byte) COLLISION_NONE) goto play_move_leftright::@2
Simple Condition (bool~) play_move_rotate::$0 [554] if((byte) play_move_rotate::key_event#0==(const nomodify byte) KEY_Z) goto play_move_rotate::@1
Simple Condition (bool~) play_move_rotate::$1 [558] if((byte) play_move_rotate::key_event#0==(const nomodify byte) KEY_X) goto play_move_rotate::@2
Simple Condition (bool~) play_move_rotate::$4 [572] if((byte~) play_move_rotate::$2!=(const nomodify byte) COLLISION_NONE) goto play_move_rotate::@4
Simple Condition (bool~) play_collision::$2 [588] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte) 0) goto play_collision::@3
Simple Condition (bool~) play_collision::$12 [592] if((byte) play_collision::c#1!=rangelast(0,3)) goto play_collision::@2
Simple Condition (bool~) play_collision::$4 [594] if((byte) play_collision::yp#2<(const nomodify byte) PLAYFIELD_LINES) goto play_collision::@4
Simple Condition (bool~) play_collision::$7 [597] if((byte~) play_collision::$5==(byte) 0) goto play_collision::@5
Simple Condition (bool~) play_collision::$9 [602] if((byte) play_collision::xp#2<(const nomodify byte) PLAYFIELD_COLS) goto play_collision::@6
Simple Condition (bool~) play_collision::$11 [605] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::xp#2)==(byte) 0) goto play_collision::@3
Simple Condition (bool~) play_collision::$13 [611] if((byte) play_collision::l#1!=rangelast(0,3)) goto play_collision::@1
Simple Condition (bool~) play_lock_current::$1 [625] if(*((byte*) current_piece_gfx#13 + (byte) play_lock_current::i#2)==(byte) 0) goto play_lock_current::@3
Simple Condition (bool~) play_lock_current::$2 [629] if((byte) play_lock_current::c#1!=rangelast(0,3)) goto play_lock_current::@2
Simple Condition (bool~) play_lock_current::$3 [634] if((byte) play_lock_current::l#1!=rangelast(0,3)) goto play_lock_current::@1
Simple Condition (bool~) play_spawn_current::$3 [652] if((byte~) play_spawn_current::$1!=(const nomodify byte) COLLISION_PLAYFIELD) goto play_spawn_current::@1
Simple Condition (bool~) play_spawn_current::$4 [658] if((byte) play_spawn_current::piece_idx#2==(byte) 7) goto play_spawn_current::sid_rnd1
Simple Condition (bool~) play_remove_lines::$1 [674] if((byte) play_remove_lines::c#0!=(byte) 0) goto play_remove_lines::@3
Simple Condition (bool~) play_remove_lines::$2 [680] if((byte) play_remove_lines::x#1!=rangelast(0,PLAYFIELD_COLS-1)) goto play_remove_lines::@2
Simple Condition (bool~) play_remove_lines::$4 [683] if((byte) play_remove_lines::full#2!=(byte) 1) goto play_remove_lines::@7
Simple Condition (bool~) play_remove_lines::$6 [687] if((byte) play_remove_lines::y#1!=rangelast(0,PLAYFIELD_LINES-1)) goto play_remove_lines::@1
Simple Condition (bool~) play_remove_lines::$7 [692] if((byte) play_remove_lines::w#6!=(byte) $ff) goto play_remove_lines::@9
Simple Condition (bool~) play_update_score::$1 [698] if((byte) play_update_score::removed#0==(byte) 0) goto play_update_score::@return
Simple Condition (bool~) play_update_score::$7 [710] if((byte) play_update_score::lines_before#0==(byte) play_update_score::lines_after#0) goto play_update_score::@return
Simple Condition (bool~) play_increase_level::$0 [718] if((byte) level#21>(byte) $1d) goto play_increase_level::@1
Simple Condition (bool~) play_increase_level::$3 [725] if((byte~) play_increase_level::$1!=(byte) $a) goto play_increase_level::@3
Simple Condition (bool~) play_increase_level::$4 [735] if((byte) play_increase_level::b#1!=rangelast(0,4)) goto play_increase_level::@6
Simple Condition (bool~) main::$10 [759] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@2
Simple Condition (bool~) main::$14 [769] if((byte) game_over#10==(byte) 0) goto main::@4
Simple Condition (bool~) main::$18 [780] if((byte) main::render#2==(byte) 0) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [182] (word) render_bcd::offset#1 ← (const word) render_score::score_offset + (byte) 2
Constant right-side identified [187] (word) render_bcd::offset#2 ← (const word) render_score::score_offset + (byte) 4
Constant right-side identified [197] (word) render_bcd::offset#4 ← (const word) render_score::lines_offset + (byte) 1
Constant right-side identified [311] (byte*) render_next::screen_next_area#1 ← (const nomodify byte*) PLAYFIELD_SCREEN_1 + (const word) render_next::next_area_offset
Constant right-side identified [312] (byte*) render_next::screen_next_area#2 ← (const nomodify byte*) PLAYFIELD_SCREEN_2 + (const word) render_next::next_area_offset
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) keyboard_events_size#0 = 0
Constant (const byte) keyboard_modifiers#0 = 0
Constant (const byte) keyboard_event_scan::keycode#0 = 0
Constant (const byte) keyboard_event_scan::row#0 = 0
Constant (const byte) keyboard_event_scan::col#0 = 0
Constant (const byte) keyboard_modifiers#1 = 0
Constant (const byte) keyboard_event_pressed::keycode#0 = KEY_LSHIFT
Constant (const byte) keyboard_event_pressed::keycode#1 = KEY_RSHIFT
Constant (const byte) keyboard_event_pressed::keycode#2 = KEY_CTRL
Constant (const byte) keyboard_event_pressed::keycode#3 = KEY_COMMODORE
Constant (const byte) keyboard_event_get::return#0 = $ff
Constant (const byte*) current_piece_gfx#0 = (byte*) 0
Constant (const byte) current_piece_char#0 = 0
Constant (const byte) current_xpos#0 = 0
Constant (const byte) current_ypos#0 = 0
Constant (const byte) render_screen_render#0 = $20
Constant (const byte) render_screen_show#0 = 0
Constant (const word) lines_bcd#0 = 0
Constant (const byte) level_bcd#0 = 0
Constant (const byte) level#0 = 0
Constant (const byte) game_over#0 = 0
Constant (const byte*) render_init::vicSelectGfxBank1_gfx#0 = PLAYFIELD_CHARSET
Constant (const byte*) render_screen_original::screen#0 = PLAYFIELD_SCREEN_1
Constant (const byte*) render_screen_original::screen#1 = PLAYFIELD_SCREEN_2
Constant (const byte*) render_init::li_1#0 = PLAYFIELD_SCREEN_1+(byte)2*$28+$10
Constant (const byte*) render_init::li_2#0 = PLAYFIELD_SCREEN_2+(byte)2*$28+$10
Constant (const byte) render_init::i#0 = 0
Constant (const byte) render_screen_show#1 = 0
Constant (const byte) render_screen_render#1 = $20
Constant (const byte) render_show::d018val#0 = 0
Constant (const byte*) render_show::toD0181_screen#0 = PLAYFIELD_SCREEN_1
Constant (const byte*) render_show::toD0181_gfx#0 = PLAYFIELD_CHARSET
Constant (const byte*) render_show::toD0182_screen#0 = PLAYFIELD_SCREEN_2
Constant (const byte*) render_show::toD0182_gfx#0 = PLAYFIELD_CHARSET
Constant (const byte*) render_score::screen#0 = (byte*) 0
Constant (const byte*) render_score::screen#1 = PLAYFIELD_SCREEN_1
Constant (const byte*) render_score::screen#2 = PLAYFIELD_SCREEN_2
Constant (const word) render_bcd::offset#0 = render_score::score_offset
Constant (const byte) render_bcd::only_low#0 = 0
Constant (const word) render_bcd::offset#1 = render_score::score_offset+2
Constant (const byte) render_bcd::only_low#1 = 0
Constant (const word) render_bcd::offset#2 = render_score::score_offset+4
Constant (const byte) render_bcd::only_low#2 = 0
Constant (const word) render_bcd::offset#3 = render_score::lines_offset
Constant (const byte) render_bcd::only_low#3 = 1
Constant (const word) render_bcd::offset#4 = render_score::lines_offset+1
Constant (const byte) render_bcd::only_low#4 = 0
Constant (const word) render_bcd::offset#5 = render_score::level_offset
Constant (const byte) render_bcd::only_low#5 = 0
Constant (const byte*) render_screen_original::oscr#0 = PLAYFIELD_SCREEN_ORIGINAL+(byte)$20*2
Constant (const byte*) render_screen_original::ocols#0 = PLAYFIELD_COLORS_ORIGINAL+(byte)$20*2
Constant (const byte*) render_screen_original::cols#0 = COLS
Constant (const byte) render_screen_original::y#0 = 0
Constant (const byte) render_screen_original::x#0 = 0
Constant (const byte) render_playfield::i#0 = (byte)PLAYFIELD_COLS*2
Constant (const byte) render_playfield::l#0 = 2
Constant (const byte) render_playfield::c#0 = 0
Constant (const byte) render_moving::i#0 = 0
Constant (const byte) render_moving::l#0 = 0
Constant (const byte) render_moving::c#0 = 0
Constant (const byte*) render_next::screen_next_area#0 = (byte*) 0
Constant (const byte*) render_next::screen_next_area#1 = PLAYFIELD_SCREEN_1+render_next::next_area_offset
Constant (const byte*) render_next::screen_next_area#2 = PLAYFIELD_SCREEN_2+render_next::next_area_offset
Constant (const byte) render_next::l#0 = 0
Constant (const byte) render_next::c#0 = 0
Constant (const byte) sprites_init::xpos#0 = (byte)$18+$f*8
Constant (const byte) sprites_init::s#0 = 0
Constant (const byte*) toSpritePtr1_sprite#0 = PLAYFIELD_SPRITES
Constant (const byte*) sprites_irq::toSpritePtr1_sprite#0 = PLAYFIELD_SPRITES
Constant (const byte) next_piece_idx#0 = 0
Constant (const byte*) current_piece#0 = (byte*) 0
Constant (const byte) current_orientation#0 = 0
Constant (const byte) current_movedown_slow#0 = $30
Constant (const byte) current_movedown_counter#0 = 0
Constant (const byte) play_init::idx#0 = 0
Constant (const byte*) play_init::pli#0 = playfield
Constant (const byte) play_init::j#0 = 0
Constant (const byte) play_init::b#0 = 0
Constant (const byte) play_movement::render#0 = 0
Constant (const byte) play_move_down::movedown#0 = 0
Constant (const byte) keyboard_event_pressed::keycode#4 = KEY_SPACE
Constant (const byte) play_move_down::return#1 = 0
Constant (const byte) current_movedown_counter#4 = 0
Constant (const byte) play_move_down::return#2 = 1
Constant (const byte) play_move_leftright::return#1 = 1
Constant (const byte) play_move_leftright::return#3 = 0
Constant (const byte) play_move_leftright::return#4 = 1
Constant (const byte) play_move_rotate::orientation#0 = $80
Constant (const byte) play_move_rotate::return#1 = 0
Constant (const byte) play_move_rotate::return#3 = 0
Constant (const byte) play_move_rotate::return#4 = 1
Constant (const byte) play_collision::i#0 = 0
Constant (const byte) play_collision::l#0 = 0
Constant (const byte) play_collision::c#0 = 0
Constant (const byte) play_collision::return#4 = COLLISION_BOTTOM
Constant (const byte) play_collision::return#6 = COLLISION_LEFT
Constant (const byte) play_collision::return#7 = COLLISION_RIGHT
Constant (const byte) play_collision::return#8 = COLLISION_PLAYFIELD
Constant (const byte) play_collision::return#9 = COLLISION_NONE
Constant (const byte) play_lock_current::i#0 = 0
Constant (const byte) play_lock_current::l#0 = 0
Constant (const byte) play_lock_current::c#0 = 0
Constant (const byte) current_orientation#68 = 0
Constant (const byte) play_spawn_current::piece_idx#0 = 7
Constant (const byte) game_over#5 = 1
Constant (const byte) play_remove_lines::r#0 = (byte)PLAYFIELD_LINES*PLAYFIELD_COLS-1
Constant (const byte) play_remove_lines::w#0 = (byte)PLAYFIELD_LINES*PLAYFIELD_COLS-1
Constant (const byte) play_remove_lines::removed#0 = 0
Constant (const byte) play_remove_lines::y#0 = 0
Constant (const byte) play_remove_lines::full#0 = 1
Constant (const byte) play_remove_lines::x#0 = 0
Constant (const byte) play_remove_lines::full#1 = 0
Constant (const byte) current_movedown_slow#9 = 1
Constant (const byte) play_increase_level::b#0 = 0
Constant (const byte) main::render#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) render_show::toD0181_$7 = (word)render_show::toD0181_screen#0
Constant (const word) render_show::toD0182_$7 = (word)render_show::toD0182_screen#0
Constant (const word) toSpritePtr1_$1 = (word)toSpritePtr1_sprite#0
Constant (const word) sprites_irq::toSpritePtr1_$1 = (word)sprites_irq::toSpritePtr1_sprite#0
Constant (const byte) play_collision::orientation#4 = current_orientation#68
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)render_init::vicSelectGfxBank1_gfx#0 in [106] (byte~) render_init::vicSelectGfxBank1_toDd001_$0 ← > (word)(const byte*) render_init::vicSelectGfxBank1_gfx#0
Constant value identified (word)render_show::toD0181_gfx#0 in [146] (byte~) render_show::toD0181_$3 ← > (word)(const byte*) render_show::toD0181_gfx#0
Constant value identified (word)render_show::toD0182_gfx#0 in [156] (byte~) render_show::toD0182_$3 ← > (word)(const byte*) render_show::toD0182_gfx#0
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [756] if(true) goto main::@2
Removing PHI-reference to removed block (main::@5) in block main::@7
Removing PHI-reference to removed block (main::@5) in block main::@7
Removing PHI-reference to removed block (main::@5) in block main::@7
Removing PHI-reference to removed block (main::@5) in block main::@7
Removing PHI-reference to removed block (main::@5) in block main::@7
Removing PHI-reference to removed block (main::@5) in block main::@7
Removing PHI-reference to removed block (main::@5) in block main::@7
Removing PHI-reference to removed block (main::@5) in block main::@7
Removing PHI-reference to removed block (main::@5) in block main::@7
Removing PHI-reference to removed block (main::@5) in block main::@7
Removing PHI-reference to removed block (main::@5) in block main::@7
Removing PHI-reference to removed block (main::@5) in block main::@7
Removing PHI-reference to removed block (main::@5) in block main::@7
Removing PHI-reference to removed block (main::@5) in block main::@7
if() condition always true - replacing block destination [776] if(true) goto main::@6
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [19] keyboard_event_scan::row#1 ← ++ keyboard_event_scan::row#2 to ++
Resolved ranged comparison value [21] if(keyboard_event_scan::row#1!=rangelast(0,7)) goto keyboard_event_scan::@7 to (number) 8
Resolved ranged next value [29] keyboard_event_scan::col#1 ← ++ keyboard_event_scan::col#2 to ++
Resolved ranged comparison value [31] if(keyboard_event_scan::col#1!=rangelast(0,7)) goto keyboard_event_scan::@10 to (number) 8
Resolved ranged next value [130] render_init::i#1 ← ++ render_init::i#2 to ++
Resolved ranged comparison value [132] if(render_init::i#1!=rangelast(0,PLAYFIELD_LINES-1)) goto render_init::@1 to (const nomodify byte) PLAYFIELD_LINES-(byte) 1+(number) 1
Resolved ranged next value [255] render_screen_original::y#1 ← ++ render_screen_original::y#6 to ++
Resolved ranged comparison value [257] if(render_screen_original::y#1!=rangelast(0,$18)) goto render_screen_original::@1 to (number) $19
Resolved ranged next value [271] render_playfield::c#1 ← ++ render_playfield::c#2 to ++
Resolved ranged comparison value [273] if(render_playfield::c#1!=rangelast(0,PLAYFIELD_COLS-1)) goto render_playfield::@2 to (const nomodify byte) PLAYFIELD_COLS-(byte) 1+(number) 1
Resolved ranged next value [274] render_playfield::l#1 ← ++ render_playfield::l#2 to ++
Resolved ranged comparison value [276] if(render_playfield::l#1!=rangelast(2,PLAYFIELD_LINES-1)) goto render_playfield::@1 to (const nomodify byte) PLAYFIELD_LINES-(byte) 1+(number) 1
Resolved ranged next value [293] render_moving::l#1 ← ++ render_moving::l#4 to ++
Resolved ranged comparison value [295] if(render_moving::l#1!=rangelast(0,3)) goto render_moving::@1 to (number) 4
Resolved ranged next value [302] render_moving::c#1 ← ++ render_moving::c#2 to ++
Resolved ranged comparison value [304] if(render_moving::c#1!=rangelast(0,3)) goto render_moving::@4 to (number) 4
Resolved ranged next value [328] render_next::c#1 ← ++ render_next::c#2 to ++
Resolved ranged comparison value [330] if(render_next::c#1!=rangelast(0,3)) goto render_next::@5 to (number) 4
Resolved ranged next value [332] render_next::l#1 ← ++ render_next::l#7 to ++
Resolved ranged comparison value [334] if(render_next::l#1!=rangelast(0,3)) goto render_next::@4 to (number) 4
Resolved ranged next value [348] sprites_init::s#1 ← ++ sprites_init::s#2 to ++
Resolved ranged comparison value [350] if(sprites_init::s#1!=rangelast(0,3)) goto sprites_init::@1 to (number) 4
Resolved ranged next value [439] play_init::j#1 ← ++ play_init::j#2 to ++
Resolved ranged comparison value [441] if(play_init::j#1!=rangelast(0,PLAYFIELD_LINES-1)) goto play_init::@1 to (const nomodify byte) PLAYFIELD_LINES-(byte) 1+(number) 1
Resolved ranged next value [448] play_init::b#1 ← ++ play_init::b#2 to ++
Resolved ranged comparison value [450] if(play_init::b#1!=rangelast(0,4)) goto play_init::@3 to (number) 5
Resolved ranged next value [590] play_collision::c#1 ← ++ play_collision::c#2 to ++
Resolved ranged comparison value [592] if(play_collision::c#1!=rangelast(0,3)) goto play_collision::@2 to (number) 4
Resolved ranged next value [609] play_collision::l#1 ← ++ play_collision::l#6 to ++
Resolved ranged comparison value [611] if(play_collision::l#1!=rangelast(0,3)) goto play_collision::@1 to (number) 4
Resolved ranged next value [627] play_lock_current::c#1 ← ++ play_lock_current::c#2 to ++
Resolved ranged comparison value [629] if(play_lock_current::c#1!=rangelast(0,3)) goto play_lock_current::@2 to (number) 4
Resolved ranged next value [632] play_lock_current::l#1 ← ++ play_lock_current::l#6 to ++
Resolved ranged comparison value [634] if(play_lock_current::l#1!=rangelast(0,3)) goto play_lock_current::@1 to (number) 4
Resolved ranged next value [678] play_remove_lines::x#1 ← ++ play_remove_lines::x#2 to ++
Resolved ranged comparison value [680] if(play_remove_lines::x#1!=rangelast(0,PLAYFIELD_COLS-1)) goto play_remove_lines::@2 to (const nomodify byte) PLAYFIELD_COLS-(byte) 1+(number) 1
Resolved ranged next value [685] play_remove_lines::y#1 ← ++ play_remove_lines::y#8 to ++
Resolved ranged comparison value [687] if(play_remove_lines::y#1!=rangelast(0,PLAYFIELD_LINES-1)) goto play_remove_lines::@1 to (const nomodify byte) PLAYFIELD_LINES-(byte) 1+(number) 1
Resolved ranged next value [733] play_increase_level::b#1 ← ++ play_increase_level::b#2 to ++
Resolved ranged comparison value [735] if(play_increase_level::b#1!=rangelast(0,4)) goto play_increase_level::@6 to (number) 5
Rewriting conditional comparison [284] if((byte) render_moving::ypos#2>(byte) 1) goto render_moving::@2
Rewriting conditional comparison [718] if((byte) level#21>(byte) $1d) goto play_increase_level::@1
Simplifying expression containing zero (byte*)CIA1 in [1] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0)
Simplifying expression containing zero KEY_MODIFIER_LSHIFT in [57] (byte) keyboard_modifiers#2 ← (const byte) keyboard_modifiers#1 | (const nomodify byte) KEY_MODIFIER_LSHIFT
Simplifying expression containing zero (byte*)CIA2 in [109] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (byte) render_init::vicSelectGfxBank1_toDd001_return#0
Simplifying expression containing zero PIECES_COLORS_1 in [113] *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1 + (byte) 0)
Simplifying expression containing zero PIECES_COLORS_2 in [114] *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2 + (byte) 0)
Simplifying expression containing zero render_score::score_bytes in [189] (byte) render_bcd::bcd#2 ← *((const byte*) render_score::score_bytes + (byte) 0)
Simplifying expression containing zero SPRITES_YPOS in [375] *((const nomodify byte*) SPRITES_YPOS + (byte) 0) ← (byte) sprites_irq::ypos#0
Simplifying expression containing zero PLAYFIELD_SPRITE_PTRS_1 in [386] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1 + (byte) 0) ← (byte) sprites_irq::ptr#0
Simplifying expression containing zero PLAYFIELD_SPRITE_PTRS_2 in [392] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2 + (byte) 0) ← (byte) sprites_irq::ptr#0
Simplifying expression containing zero MOVEDOWN_SLOW_SPEEDS in [443] (byte) current_movedown_slow#1 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS + (const byte) level#0)
Simplifying expression containing zero play_movement::$0 in [459] (byte) play_movement::render#1 ← (const byte) play_movement::render#0 + (byte~) play_movement::$0
Simplifying expression containing zero current_piece#5 in [642] (byte*) current_piece_gfx#74 ← (byte*) current_piece#5 + (const byte) current_orientation#68
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*) render_bcd::screen_pos#1 and assignment [144] (byte*) render_bcd::screen_pos#1 ← ++ (byte*) render_bcd::screen_pos#3
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#16
Eliminating unused constant (const byte) render_show::d018val#0
Eliminating unused constant (const byte*) render_score::screen#0
Eliminating unused constant (const byte*) render_next::screen_next_area#0
Eliminating unused constant (const byte) play_movement::render#0
Eliminating unused constant (const byte) play_move_rotate::orientation#0
Eliminating unused constant (const byte) main::render#0
Eliminating unused constant (const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A
Eliminating unused constant (const byte*) current_piece_gfx#0
Eliminating unused constant (const byte) current_piece_char#0
Eliminating unused constant (const byte) current_xpos#0
Eliminating unused constant (const byte) current_ypos#0
Eliminating unused constant (const byte) render_screen_render#0
Eliminating unused constant (const byte) render_screen_show#0
Eliminating unused constant (const byte*) current_piece#0
Eliminating unused constant (const byte) current_orientation#0
Eliminating unused constant (const byte) current_movedown_slow#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#14
Eliminating unused constant (const byte) keyboard_modifiers#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (byte) keyboard_modifiers#5 and assignment [52] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#13 | (const nomodify byte) KEY_MODIFIER_COMMODORE
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#13
Eliminating unused constant (const nomodify byte) KEY_MODIFIER_COMMODORE
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (byte) keyboard_modifiers#4 and assignment [51] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#12 | (const nomodify byte) KEY_MODIFIER_CTRL
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#12
Eliminating unused constant (const nomodify byte) KEY_MODIFIER_CTRL
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (byte) keyboard_modifiers#3 and assignment [45] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#11 | (const nomodify byte) KEY_MODIFIER_RSHIFT
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#11
Eliminating unused constant (const nomodify byte) KEY_MODIFIER_RSHIFT
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (byte) keyboard_modifiers#2 and assignment [39] (byte) keyboard_modifiers#2 ← (const nomodify byte) KEY_MODIFIER_LSHIFT
Eliminating unused constant (const byte) keyboard_modifiers#1
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const nomodify byte) KEY_MODIFIER_LSHIFT
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 8 in if((byte) keyboard_event_scan::row#1!=(number) 8) goto keyboard_event_scan::@7
Adding number conversion cast (unumber) 8 in if((byte) keyboard_event_scan::col#1!=(number) 8) goto keyboard_event_scan::@10
Adding number conversion cast (unumber) PLAYFIELD_LINES-1+1 in if((byte) render_init::i#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(number) 1) goto render_init::@1
Adding number conversion cast (unumber) 1 in if((byte) render_init::i#1!=(unumber)(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(number) 1) goto render_init::@1
Adding number conversion cast (unumber) $19 in if((byte) render_screen_original::y#1!=(number) $19) goto render_screen_original::@1
Adding number conversion cast (unumber) PLAYFIELD_COLS-1+1 in if((byte) render_playfield::c#1!=(const nomodify byte) PLAYFIELD_COLS-(byte) 1+(number) 1) goto render_playfield::@2
Adding number conversion cast (unumber) 1 in if((byte) render_playfield::c#1!=(unumber)(const nomodify byte) PLAYFIELD_COLS-(byte) 1+(number) 1) goto render_playfield::@2
Adding number conversion cast (unumber) PLAYFIELD_LINES-1+1 in if((byte) render_playfield::l#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(number) 1) goto render_playfield::@1
Adding number conversion cast (unumber) 1 in if((byte) render_playfield::l#1!=(unumber)(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(number) 1) goto render_playfield::@1
Adding number conversion cast (unumber) 1+1 in if((byte) render_moving::ypos#2>=(byte) 1+(number) 1) goto render_moving::@2
Adding number conversion cast (unumber) 1 in if((byte) render_moving::ypos#2>=(unumber)(byte) 1+(number) 1) goto render_moving::@2
Adding number conversion cast (unumber) 4 in if((byte) render_moving::l#1!=(number) 4) goto render_moving::@1
Adding number conversion cast (unumber) 4 in if((byte) render_moving::c#1!=(number) 4) goto render_moving::@4
Adding number conversion cast (unumber) 4 in if((byte) render_next::c#1!=(number) 4) goto render_next::@5
Adding number conversion cast (unumber) 4 in if((byte) render_next::l#1!=(number) 4) goto render_next::@4
Adding number conversion cast (unumber) 4 in if((byte) sprites_init::s#1!=(number) 4) goto sprites_init::@1
Adding number conversion cast (unumber) PLAYFIELD_LINES-1+1 in if((byte) play_init::j#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(number) 1) goto play_init::@1
Adding number conversion cast (unumber) 1 in if((byte) play_init::j#1!=(unumber)(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(number) 1) goto play_init::@1
Adding number conversion cast (unumber) 5 in if((byte) play_init::b#1!=(number) 5) goto play_init::@3
Adding number conversion cast (unumber) 4 in if((byte) play_collision::c#1!=(number) 4) goto play_collision::@2
Adding number conversion cast (unumber) 4 in if((byte) play_collision::l#1!=(number) 4) goto play_collision::@1
Adding number conversion cast (unumber) 4 in if((byte) play_lock_current::c#1!=(number) 4) goto play_lock_current::@2
Adding number conversion cast (unumber) 4 in if((byte) play_lock_current::l#1!=(number) 4) goto play_lock_current::@1
Adding number conversion cast (unumber) PLAYFIELD_COLS-1+1 in if((byte) play_remove_lines::x#1!=(const nomodify byte) PLAYFIELD_COLS-(byte) 1+(number) 1) goto play_remove_lines::@2
Adding number conversion cast (unumber) 1 in if((byte) play_remove_lines::x#1!=(unumber)(const nomodify byte) PLAYFIELD_COLS-(byte) 1+(number) 1) goto play_remove_lines::@2
Adding number conversion cast (unumber) PLAYFIELD_LINES-1+1 in if((byte) play_remove_lines::y#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(number) 1) goto play_remove_lines::@1
Adding number conversion cast (unumber) 1 in if((byte) play_remove_lines::y#1!=(unumber)(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(number) 1) goto play_remove_lines::@1
Adding number conversion cast (unumber) $1d+1 in if((byte) level#21>=(byte) $1d+(number) 1) goto play_increase_level::@1
Adding number conversion cast (unumber) 1 in if((byte) level#21>=(unumber)(byte) $1d+(number) 1) goto play_increase_level::@1
Adding number conversion cast (unumber) 5 in if((byte) play_increase_level::b#1!=(number) 5) goto play_increase_level::@6
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (const nomodify byte) PLAYFIELD_COLS*(byte) 2
Simplifying constant integer cast (const nomodify byte) SPRITES_FIRST_YPOS+(byte) $13
Simplifying constant integer cast (const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(byte) 1
Simplifying constant integer cast (const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(byte) 1
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast (const nomodify byte) PLAYFIELD_LINES-(byte) 1+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast $19
Simplifying constant integer cast (const nomodify byte) PLAYFIELD_COLS-(byte) 1+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const nomodify byte) PLAYFIELD_LINES-(byte) 1+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) 1+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast (const nomodify byte) SPRITES_FIRST_YPOS+(byte) $15
Simplifying constant integer cast (const nomodify byte) PLAYFIELD_LINES-(byte) 1+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 5
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast (const nomodify byte) PLAYFIELD_COLS-(byte) 1+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const nomodify byte) PLAYFIELD_LINES-(byte) 1+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) $1d+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)sprites_irq::toSpritePtr1_return#0 = irq_sprite_ptr $1 sprites_irq::toSpritePtr1_return#1 sprites_irq::$5 
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Alias render_init::$5 = render_init::$4 
Alias play_movement::render#1 = play_movement::$0 
Alias current_piece_gfx#74 = current_piece#5 
Alias main::render#1 = main::render#2 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)sprites_irq::toSpritePtr1_return#0 = irq_sprite_ptr $1 sprites_irq::toSpritePtr1_return#1 sprites_irq::$5 
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Identical Phi Values (byte) current_movedown_slow#56 (byte) current_movedown_slow#21
Identical Phi Values (byte*) current_piece#51 (byte*) current_piece#15
Identical Phi Values (byte) current_piece_char#48 (byte) current_piece_char#16
Identical Phi Values (byte) current_orientation#59 (byte) current_orientation#17
Identical Phi Values (byte*) current_piece_gfx#103 (byte*) current_piece_gfx#18
Identical Phi Values (byte) current_xpos#105 (byte) current_xpos#19
Identical Phi Values (byte) current_ypos#31 (byte) current_ypos#19
Identical Phi Values (byte) game_over#42 (byte) game_over#15
Identical Phi Values (byte) next_piece_idx#43 (byte) next_piece_idx#16
Identical Phi Values (byte) current_movedown_counter#31 (byte) current_movedown_counter#14
Identical Phi Values (word) lines_bcd#41 (word) lines_bcd#15
Identical Phi Values (byte) level#102 (byte) level#17
Identical Phi Values (byte) level_bcd#51 (byte) level_bcd#17
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [62] (byte~) render_init::vicSelectGfxBank1_toDd001_$0 ← > (word)(const byte*) render_init::vicSelectGfxBank1_gfx#0
Constant right-side identified [84] (word~) render_show::toD0181_$0 ← (const word) render_show::toD0181_$7 & (word) $3fff
Constant right-side identified [87] (byte~) render_show::toD0181_$3 ← > (word)(const byte*) render_show::toD0181_gfx#0
Constant right-side identified [91] (word~) render_show::toD0182_$0 ← (const word) render_show::toD0182_$7 & (word) $3fff
Constant right-side identified [94] (byte~) render_show::toD0182_$3 ← > (word)(const byte*) render_show::toD0182_gfx#0
Constant right-side identified [239] (word~) toSpritePtr1_$0 ← (const word) toSpritePtr1_$1 / (byte) $40
Constant right-side identified [283] (word~) sprites_irq::toSpritePtr1_$0 ← (const word) sprites_irq::toSpritePtr1_$1 / (byte) $40
Constant right-side identified [339] (byte) play_move_down::movedown#1 ← ++ (const byte) play_move_down::movedown#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_init::vicSelectGfxBank1_toDd001_$0 = >(word)render_init::vicSelectGfxBank1_gfx#0
Constant (const word) render_show::toD0181_$0 = render_show::toD0181_$7&$3fff
Constant (const byte) render_show::toD0181_$3 = >(word)render_show::toD0181_gfx#0
Constant (const word) render_show::toD0182_$0 = render_show::toD0182_$7&$3fff
Constant (const byte) render_show::toD0182_$3 = >(word)render_show::toD0182_gfx#0
Constant (const word) toSpritePtr1_$0 = toSpritePtr1_$1/$40
Constant (const word) sprites_irq::toSpritePtr1_$0 = sprites_irq::toSpritePtr1_$1/$40
Constant (const byte) play_move_down::movedown#1 = ++play_move_down::movedown#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) toSpritePtr1_return#0 = (byte)toSpritePtr1_$0
Constant (const byte) sprites_irq::toSpritePtr1_return#0 = (byte)sprites_irq::toSpritePtr1_$0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) sprites_irq::toSpritePtr1_return#1 = sprites_irq::toSpritePtr1_return#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) sprites_irq::$5 = sprites_irq::toSpritePtr1_return#1
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)irq_sprite_ptr = $1 
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Constant right-side identified [62] (byte~) render_init::vicSelectGfxBank1_toDd001_$1 ← (const byte) render_init::vicSelectGfxBank1_toDd001_$0 / (byte) $40
Constant right-side identified [83] (word~) render_show::toD0181_$1 ← (const word) render_show::toD0181_$0 * (byte) 4
Constant right-side identified [85] (byte~) render_show::toD0181_$4 ← (const byte) render_show::toD0181_$3 / (byte) 4
Constant right-side identified [88] (word~) render_show::toD0182_$1 ← (const word) render_show::toD0182_$0 * (byte) 4
Constant right-side identified [90] (byte~) render_show::toD0182_$4 ← (const byte) render_show::toD0182_$3 / (byte) 4
Constant right-side identified [234] (byte~) $1 ← (const byte) toSpritePtr1_return#0 + (byte) 3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_init::vicSelectGfxBank1_toDd001_$1 = render_init::vicSelectGfxBank1_toDd001_$0/$40
Constant (const word) render_show::toD0181_$1 = render_show::toD0181_$0*4
Constant (const byte) render_show::toD0181_$4 = render_show::toD0181_$3/4
Constant (const word) render_show::toD0182_$1 = render_show::toD0182_$0*4
Constant (const byte) render_show::toD0182_$4 = render_show::toD0182_$3/4
Constant (const byte) $1 = toSpritePtr1_return#0+3
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (const byte) render_init::vicSelectGfxBank1_toDd001_$0/(byte) $40 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero 3 in [63] (byte) render_init::vicSelectGfxBank1_toDd001_return#0 ← (byte) 3 ^ (const byte) render_init::vicSelectGfxBank1_toDd001_$1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) render_init::vicSelectGfxBank1_toDd001_$0
Eliminating unused constant (const byte) render_init::vicSelectGfxBank1_toDd001_$1
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte*) render_init::vicSelectGfxBank1_gfx#0
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Constant right-side identified [82] (byte~) render_show::toD0181_$2 ← > (const word) render_show::toD0181_$1
Constant right-side identified [83] (byte~) render_show::toD0181_$5 ← (const byte) render_show::toD0181_$4 & (byte) $f
Constant right-side identified [85] (byte~) render_show::toD0182_$2 ← > (const word) render_show::toD0182_$1
Constant right-side identified [86] (byte~) render_show::toD0182_$5 ← (const byte) render_show::toD0182_$4 & (byte) $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 = 3
Constant (const byte) render_show::toD0181_$2 = >render_show::toD0181_$1
Constant (const byte) render_show::toD0181_$5 = render_show::toD0181_$4&$f
Constant (const byte) render_show::toD0182_$2 = >render_show::toD0182_$1
Constant (const byte) render_show::toD0182_$5 = render_show::toD0182_$4&$f
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Constant right-side identified [81] (byte) render_show::toD0181_return#0 ← (const byte) render_show::toD0181_$2 | (const byte) render_show::toD0181_$5
Constant right-side identified [82] (byte) render_show::toD0182_return#0 ← (const byte) render_show::toD0182_$2 | (const byte) render_show::toD0182_$5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_show::toD0181_return#0 = render_show::toD0181_$2|render_show::toD0181_$5
Constant (const byte) render_show::toD0182_return#0 = render_show::toD0182_$2|render_show::toD0182_$5
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Inlining Noop Cast [191] (byte*) render_next::next_piece_gfx#0 ← (byte*)*((const word*) PIECES + (byte~) render_next::$6) keeping *(PIECES + render_next::$6)
Inlining Noop Cast [418] (byte*) current_piece_gfx#74 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) keeping *(PIECES + play_spawn_current::$7)
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [72] (byte~) render_init::$5 ← (byte) render_init::i#2 * (const byte) SIZEOF_POINTER
Rewriting multiplication to use shift [154] (byte~) render_playfield::$3 ← (byte~) render_playfield::$0 * (const byte) SIZEOF_POINTER
Rewriting multiplication to use shift [170] (byte~) render_moving::$6 ← (byte~) render_moving::$1 * (const byte) SIZEOF_POINTER
Rewriting multiplication to use shift [190] (byte~) render_next::$6 ← (byte) next_piece_idx#12 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [213] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 * (byte) 2
Rewriting multiplication to use shift [276] (byte~) play_init::$2 ← (byte) play_init::j#2 * (const byte) SIZEOF_POINTER
Rewriting multiplication to use shift [286] (byte~) play_init::$3 ← (byte) play_init::b#2 * (const byte) SIZEOF_DWORD
Rewriting multiplication to use shift [381] (byte~) play_collision::$14 ← (byte) play_collision::yp#2 * (const byte) SIZEOF_POINTER
Rewriting multiplication to use shift [401] (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 * (const byte) SIZEOF_POINTER
Rewriting multiplication to use shift [417] (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [459] (byte~) play_update_score::$9 ← (byte) play_update_score::removed#0 * (const byte) SIZEOF_DWORD
Rewriting multiplication to use shift [482] (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 * (const byte) SIZEOF_DWORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) keyboard_event_scan::keycode#0
Inlining constant with var siblings (const byte) keyboard_event_scan::row#0
Inlining constant with var siblings (const byte) keyboard_event_scan::col#0
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#0
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#1
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#2
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#3
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#4
Inlining constant with var siblings (const byte) keyboard_event_get::return#0
Inlining constant with var siblings (const byte*) render_init::li_1#0
Inlining constant with var siblings (const byte*) render_init::li_2#0
Inlining constant with var siblings (const byte) render_init::i#0
Inlining constant with var siblings (const byte*) render_score::screen#1
Inlining constant with var siblings (const byte*) render_score::screen#2
Inlining constant with var siblings (const word) render_bcd::offset#0
Inlining constant with var siblings (const byte) render_bcd::only_low#0
Inlining constant with var siblings (const word) render_bcd::offset#1
Inlining constant with var siblings (const byte) render_bcd::only_low#1
Inlining constant with var siblings (const word) render_bcd::offset#2
Inlining constant with var siblings (const byte) render_bcd::only_low#2
Inlining constant with var siblings (const word) render_bcd::offset#3
Inlining constant with var siblings (const byte) render_bcd::only_low#3
Inlining constant with var siblings (const word) render_bcd::offset#4
Inlining constant with var siblings (const byte) render_bcd::only_low#4
Inlining constant with var siblings (const word) render_bcd::offset#5
Inlining constant with var siblings (const byte) render_bcd::only_low#5
Inlining constant with var siblings (const byte*) render_screen_original::screen#0
Inlining constant with var siblings (const byte*) render_screen_original::screen#1
Inlining constant with var siblings (const byte*) render_screen_original::oscr#0
Inlining constant with var siblings (const byte*) render_screen_original::ocols#0
Inlining constant with var siblings (const byte*) render_screen_original::cols#0
Inlining constant with var siblings (const byte) render_screen_original::y#0
Inlining constant with var siblings (const byte) render_screen_original::x#0
Inlining constant with var siblings (const byte) render_playfield::i#0
Inlining constant with var siblings (const byte) render_playfield::l#0
Inlining constant with var siblings (const byte) render_playfield::c#0
Inlining constant with var siblings (const byte) render_moving::i#0
Inlining constant with var siblings (const byte) render_moving::l#0
Inlining constant with var siblings (const byte) render_moving::c#0
Inlining constant with var siblings (const byte*) render_next::screen_next_area#1
Inlining constant with var siblings (const byte*) render_next::screen_next_area#2
Inlining constant with var siblings (const byte) render_next::l#0
Inlining constant with var siblings (const byte) render_next::c#0
Inlining constant with var siblings (const byte) sprites_init::xpos#0
Inlining constant with var siblings (const byte) sprites_init::s#0
Inlining constant with different constant siblings (const byte) sprites_irq::toSpritePtr1_return#1
Inlining constant with var siblings (const byte) play_init::idx#0
Inlining constant with var siblings (const byte*) play_init::pli#0
Inlining constant with var siblings (const byte) play_init::j#0
Inlining constant with var siblings (const byte) play_init::b#0
Inlining constant with var siblings (const byte) play_move_down::movedown#0
Inlining constant with var siblings (const byte) play_move_down::return#1
Inlining constant with var siblings (const byte) play_move_down::return#2
Inlining constant with var siblings (const byte) play_move_down::movedown#1
Inlining constant with var siblings (const byte) play_move_leftright::return#1
Inlining constant with var siblings (const byte) play_move_leftright::return#3
Inlining constant with var siblings (const byte) play_move_leftright::return#4
Inlining constant with var siblings (const byte) play_move_rotate::return#1
Inlining constant with var siblings (const byte) play_move_rotate::return#3
Inlining constant with var siblings (const byte) play_move_rotate::return#4
Inlining constant with var siblings (const byte) play_collision::i#0
Inlining constant with var siblings (const byte) play_collision::l#0
Inlining constant with var siblings (const byte) play_collision::c#0
Inlining constant with var siblings (const byte) play_collision::return#4
Inlining constant with var siblings (const byte) play_collision::return#6
Inlining constant with var siblings (const byte) play_collision::return#7
Inlining constant with var siblings (const byte) play_collision::return#8
Inlining constant with var siblings (const byte) play_collision::return#9
Inlining constant with var siblings (const byte) play_collision::orientation#4
Inlining constant with var siblings (const byte) play_lock_current::i#0
Inlining constant with var siblings (const byte) play_lock_current::l#0
Inlining constant with var siblings (const byte) play_lock_current::c#0
Inlining constant with var siblings (const byte) play_spawn_current::piece_idx#0
Inlining constant with var siblings (const byte) play_remove_lines::r#0
Inlining constant with var siblings (const byte) play_remove_lines::w#0
Inlining constant with var siblings (const byte) play_remove_lines::removed#0
Inlining constant with var siblings (const byte) play_remove_lines::y#0
Inlining constant with var siblings (const byte) play_remove_lines::full#0
Inlining constant with var siblings (const byte) play_remove_lines::x#0
Inlining constant with var siblings (const byte) play_remove_lines::full#1
Inlining constant with var siblings (const byte) play_increase_level::b#0
Inlining constant with var siblings (const byte) keyboard_events_size#0
Inlining constant with var siblings (const word) lines_bcd#0
Inlining constant with var siblings (const byte) level_bcd#0
Inlining constant with var siblings (const byte) level#0
Inlining constant with var siblings (const byte) game_over#0
Inlining constant with var siblings (const byte) render_screen_show#1
Inlining constant with var siblings (const byte) render_screen_render#1
Inlining constant with var siblings (const byte) next_piece_idx#0
Inlining constant with var siblings (const byte) current_movedown_counter#0
Inlining constant with var siblings (const byte) current_movedown_counter#4
Inlining constant with var siblings (const byte) current_orientation#68
Inlining constant with var siblings (const byte) game_over#5
Inlining constant with var siblings (const byte) current_movedown_slow#9
Constant inlined play_remove_lines::x#0 = (byte) 0
Constant inlined play_init::pli#0 = (const byte*) playfield
Constant inlined render_show::toD0182_$0 = (word)(const nomodify byte*) PLAYFIELD_SCREEN_2&(word) $3fff
Constant inlined play_move_rotate::return#1 = (byte) 0
Constant inlined render_show::toD0182_$1 = (word)(const nomodify byte*) PLAYFIELD_SCREEN_2&(word) $3fff*(byte) 4
Constant inlined play_move_rotate::return#4 = (byte) 1
Constant inlined sprites_irq::toSpritePtr1_sprite#0 = (const nomodify byte*) PLAYFIELD_SPRITES
Constant inlined render_show::toD0182_$2 = >(word)(const nomodify byte*) PLAYFIELD_SCREEN_2&(word) $3fff*(byte) 4
Constant inlined play_move_rotate::return#3 = (byte) 0
Constant inlined current_movedown_counter#0 = (byte) 0
Constant inlined current_movedown_counter#4 = (byte) 0
Constant inlined render_screen_original::screen#1 = (const nomodify byte*) PLAYFIELD_SCREEN_2
Constant inlined render_screen_original::screen#0 = (const nomodify byte*) PLAYFIELD_SCREEN_1
Constant inlined render_show::toD0182_$3 = >(word)(const nomodify byte*) PLAYFIELD_CHARSET
Constant inlined render_show::toD0182_$4 = >(word)(const nomodify byte*) PLAYFIELD_CHARSET/(byte) 4
Constant inlined render_show::toD0182_$5 = >(word)(const nomodify byte*) PLAYFIELD_CHARSET/(byte) 4&(byte) $f
Constant inlined render_show::toD0182_$7 = (word)(const nomodify byte*) PLAYFIELD_SCREEN_2
Constant inlined render_screen_original::y#0 = (byte) 0
Constant inlined current_movedown_slow#9 = (byte) 1
Constant inlined render_playfield::i#0 = (const nomodify byte) PLAYFIELD_COLS*(byte) 2
Constant inlined play_collision::i#0 = (byte) 0
Constant inlined render_bcd::offset#0 = (const word) render_score::score_offset
Constant inlined render_bcd::offset#1 = (const word) render_score::score_offset+(byte) 2
Constant inlined render_bcd::offset#4 = (const word) render_score::lines_offset+(byte) 1
Constant inlined render_bcd::offset#5 = (const word) render_score::level_offset
Constant inlined render_bcd::offset#2 = (const word) render_score::score_offset+(byte) 4
Constant inlined render_bcd::offset#3 = (const word) render_score::lines_offset
Constant inlined current_orientation#68 = (byte) 0
Constant inlined render_show::toD0182_gfx#0 = (const nomodify byte*) PLAYFIELD_CHARSET
Constant inlined play_lock_current::i#0 = (byte) 0
Constant inlined play_remove_lines::y#0 = (byte) 0
Constant inlined render_next::screen_next_area#1 = (const nomodify byte*) PLAYFIELD_SCREEN_1+(const word) render_next::next_area_offset
Constant inlined render_next::screen_next_area#2 = (const nomodify byte*) PLAYFIELD_SCREEN_2+(const word) render_next::next_area_offset
Constant inlined keyboard_event_scan::col#0 = (byte) 0
Constant inlined lines_bcd#0 = (word) 0
Constant inlined sprites_irq::$5 = (const byte) sprites_irq::toSpritePtr1_return#0
Constant inlined render_show::toD0181_screen#0 = (const nomodify byte*) PLAYFIELD_SCREEN_1
Constant inlined render_playfield::l#0 = (byte) 2
Constant inlined render_moving::c#0 = (byte) 0
Constant inlined render_screen_original::x#0 = (byte) 0
Constant inlined render_bcd::only_low#0 = (byte) 0
Constant inlined render_bcd::only_low#1 = (byte) 0
Constant inlined render_bcd::only_low#2 = (byte) 0
Constant inlined keyboard_event_pressed::keycode#4 = (const nomodify byte) KEY_SPACE
Constant inlined render_bcd::only_low#3 = (byte) 1
Constant inlined render_bcd::only_low#4 = (byte) 0
Constant inlined render_bcd::only_low#5 = (byte) 0
Constant inlined game_over#5 = (byte) 1
Constant inlined keyboard_event_pressed::keycode#3 = (const nomodify byte) KEY_COMMODORE
Constant inlined keyboard_event_pressed::keycode#2 = (const nomodify byte) KEY_CTRL
Constant inlined render_init::i#0 = (byte) 0
Constant inlined keyboard_event_pressed::keycode#1 = (const nomodify byte) KEY_RSHIFT
Constant inlined keyboard_event_pressed::keycode#0 = (const nomodify byte) KEY_LSHIFT
Constant inlined play_collision::return#7 = (const nomodify byte) COLLISION_RIGHT
Constant inlined play_collision::return#6 = (const nomodify byte) COLLISION_LEFT
Constant inlined play_collision::return#4 = (const nomodify byte) COLLISION_BOTTOM
Constant inlined play_move_down::return#2 = (byte) 1
Constant inlined play_move_down::return#1 = (byte) 0
Constant inlined game_over#0 = (byte) 0
Constant inlined play_collision::return#9 = (const nomodify byte) COLLISION_NONE
Constant inlined play_collision::return#8 = (const nomodify byte) COLLISION_PLAYFIELD
Constant inlined toSpritePtr1_sprite#0 = (const nomodify byte*) PLAYFIELD_SPRITES
Constant inlined keyboard_events_size#0 = (byte) 0
Constant inlined render_next::l#0 = (byte) 0
Constant inlined play_remove_lines::r#0 = (const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(byte) 1
Constant inlined render_screen_render#1 = (byte) $20
Constant inlined sprites_init::xpos#0 = (byte)(number) $18+(number) $f*(number) 8
Constant inlined $1 = (const byte) toSpritePtr1_return#0+(byte) 3
Constant inlined play_lock_current::l#0 = (byte) 0
Constant inlined render_show::toD0181_gfx#0 = (const nomodify byte*) PLAYFIELD_CHARSET
Constant inlined render_playfield::c#0 = (byte) 0
Constant inlined play_spawn_current::piece_idx#0 = (byte) 7
Constant inlined play_remove_lines::removed#0 = (byte) 0
Constant inlined play_remove_lines::full#1 = (byte) 0
Constant inlined play_remove_lines::full#0 = (byte) 1
Constant inlined sprites_irq::toSpritePtr1_return#1 = (const byte) sprites_irq::toSpritePtr1_return#0
Constant inlined sprites_init::s#0 = (byte) 0
Constant inlined render_moving::l#0 = (byte) 0
Constant inlined play_move_leftright::return#1 = (byte) 1
Constant inlined play_move_leftright::return#4 = (byte) 1
Constant inlined play_move_leftright::return#3 = (byte) 0
Constant inlined next_piece_idx#0 = (byte) 0
Constant inlined render_show::toD0181_$1 = (word)(const nomodify byte*) PLAYFIELD_SCREEN_1&(word) $3fff*(byte) 4
Constant inlined render_show::toD0181_$0 = (word)(const nomodify byte*) PLAYFIELD_SCREEN_1&(word) $3fff
Constant inlined sprites_irq::toSpritePtr1_$1 = (word)(const nomodify byte*) PLAYFIELD_SPRITES
Constant inlined sprites_irq::toSpritePtr1_$0 = (word)(const nomodify byte*) PLAYFIELD_SPRITES/(byte) $40
Constant inlined keyboard_event_scan::keycode#0 = (byte) 0
Constant inlined play_collision::c#0 = (byte) 0
Constant inlined render_show::toD0181_$7 = (word)(const nomodify byte*) PLAYFIELD_SCREEN_1
Constant inlined render_show::toD0181_$5 = >(word)(const nomodify byte*) PLAYFIELD_CHARSET/(byte) 4&(byte) $f
Constant inlined render_show::toD0181_$4 = >(word)(const nomodify byte*) PLAYFIELD_CHARSET/(byte) 4
Constant inlined render_show::toD0181_$3 = >(word)(const nomodify byte*) PLAYFIELD_CHARSET
Constant inlined render_show::toD0181_$2 = >(word)(const nomodify byte*) PLAYFIELD_SCREEN_1&(word) $3fff*(byte) 4
Constant inlined render_init::li_2#0 = (const nomodify byte*) PLAYFIELD_SCREEN_2+(byte)(number) 2*(number) $28+(byte) $10
Constant inlined play_move_down::movedown#1 = ++(byte) 0
Constant inlined play_move_down::movedown#0 = (byte) 0
Constant inlined play_remove_lines::w#0 = (const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(byte) 1
Constant inlined play_init::j#0 = (byte) 0
Constant inlined render_screen_original::ocols#0 = (const to_nomodify byte*) PLAYFIELD_COLORS_ORIGINAL+(byte)(number) $20*(number) 2
Constant inlined play_lock_current::c#0 = (byte) 0
Constant inlined keyboard_event_scan::row#0 = (byte) 0
Constant inlined play_init::b#0 = (byte) 0
Constant inlined render_next::c#0 = (byte) 0
Constant inlined level_bcd#0 = (byte) 0
Constant inlined toSpritePtr1_$0 = (word)(const nomodify byte*) PLAYFIELD_SPRITES/(byte) $40
Constant inlined toSpritePtr1_$1 = (word)(const nomodify byte*) PLAYFIELD_SPRITES
Constant inlined level#0 = (byte) 0
Constant inlined play_init::idx#0 = (byte) 0
Constant inlined play_collision::orientation#4 = (byte) 0
Constant inlined render_moving::i#0 = (byte) 0
Constant inlined render_show::toD0182_screen#0 = (const nomodify byte*) PLAYFIELD_SCREEN_2
Constant inlined render_screen_original::oscr#0 = (const to_nomodify byte*) PLAYFIELD_SCREEN_ORIGINAL+(byte)(number) $20*(number) 2
Constant inlined render_score::screen#1 = (const nomodify byte*) PLAYFIELD_SCREEN_1
Constant inlined play_increase_level::b#0 = (byte) 0
Constant inlined render_screen_show#1 = (byte) 0
Constant inlined render_score::screen#2 = (const nomodify byte*) PLAYFIELD_SCREEN_2
Constant inlined play_collision::l#0 = (byte) 0
Constant inlined keyboard_event_get::return#0 = (byte) $ff
Constant inlined render_init::li_1#0 = (const nomodify byte*) PLAYFIELD_SCREEN_1+(byte)(number) 2*(number) $28+(byte) $10
Constant inlined render_screen_original::cols#0 = (const nomodify byte*) COLS
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(render_score::score_bytes+2)
Consolidated array index constant in *(render_score::score_bytes+1)
Consolidated array index constant in *(SPRITES_YPOS+2)
Consolidated array index constant in *(SPRITES_YPOS+4)
Consolidated array index constant in *(SPRITES_YPOS+6)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_1+1)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_1+2)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_1+3)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_2+1)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_2+2)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_2+3)
Consolidated array index constant in *(playfield_lines_idx+PLAYFIELD_LINES)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Successful SSA optimization Pass2ConstantSimplification
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Eliminating unused constant (const byte) SIZEOF_POINTER
Eliminating unused constant (const byte) SIZEOF_WORD
Eliminating unused constant (const byte) SIZEOF_DWORD
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Added new block during phi lifting keyboard_event_scan::@25(between keyboard_event_scan::@9 and keyboard_event_scan::@7)
Added new block during phi lifting keyboard_event_scan::@26(between keyboard_event_scan::@11 and keyboard_event_scan::@10)
Added new block during phi lifting keyboard_event_scan::@27(between keyboard_event_scan::@10 and keyboard_event_scan::@11)
Added new block during phi lifting keyboard_event_scan::@28(between keyboard_event_scan::@13 and keyboard_event_scan::@11)
Added new block during phi lifting render_init::@6(between render_init::@1 and render_init::@1)
Added new block during phi lifting render_bcd::@3(between render_bcd and render_bcd::@1)
Added new block during phi lifting render_screen_original::@6(between render_screen_original::@5 and render_screen_original::@1)
Added new block during phi lifting render_screen_original::@7(between render_screen_original::@2 and render_screen_original::@2)
Added new block during phi lifting render_screen_original::@8(between render_screen_original::@2 and render_screen_original::@3)
Added new block during phi lifting render_screen_original::@9(between render_screen_original::@3 and render_screen_original::@3)
Added new block during phi lifting render_screen_original::@10(between render_screen_original::@3 and render_screen_original::@4)
Added new block during phi lifting render_screen_original::@11(between render_screen_original::@4 and render_screen_original::@4)
Added new block during phi lifting render_playfield::@4(between render_playfield::@3 and render_playfield::@1)
Added new block during phi lifting render_playfield::@5(between render_playfield::@2 and render_playfield::@2)
Added new block during phi lifting render_moving::@8(between render_moving::@3 and render_moving::@1)
Added new block during phi lifting render_moving::@9(between render_moving::@5 and render_moving::@3)
Added new block during phi lifting render_moving::@10(between render_moving::@5 and render_moving::@4)
Added new block during phi lifting render_next::@10(between render_next::@9 and render_next::@4)
Added new block during phi lifting render_next::@11(between render_next::@7 and render_next::@5)
Added new block during phi lifting sprites_init::@2(between sprites_init::@1 and sprites_init::@1)
Added new block during phi lifting play_init::@4(between play_init::@1 and play_init::@1)
Added new block during phi lifting play_init::@5(between play_init::@3 and play_init::@3)
Added new block during phi lifting play_move_down::@19(between play_move_down::@13 and play_move_down::@2)
Added new block during phi lifting play_move_down::@20(between play_move_down::@6 and play_move_down::@2)
Added new block during phi lifting play_move_down::@21(between play_move_down::@2 and play_move_down::@3)
Added new block during phi lifting play_collision::@14(between play_collision::@12 and play_collision::@1)
Added new block during phi lifting play_collision::@15(between play_collision::@3 and play_collision::@2)
Added new block during phi lifting play_lock_current::@6(between play_lock_current::@5 and play_lock_current::@1)
Added new block during phi lifting play_lock_current::@7(between play_lock_current::@3 and play_lock_current::@2)
Added new block during phi lifting play_spawn_current::@7(between play_spawn_current::@6 and play_spawn_current::@1)
Added new block during phi lifting play_remove_lines::@11(between play_remove_lines::@7 and play_remove_lines::@1)
Added new block during phi lifting play_remove_lines::@12(between play_remove_lines::@3 and play_remove_lines::@2)
Added new block during phi lifting play_remove_lines::@13(between play_remove_lines::@2 and play_remove_lines::@3)
Added new block during phi lifting play_remove_lines::@14(between play_remove_lines::@5 and play_remove_lines::@7)
Added new block during phi lifting play_remove_lines::@15(between play_remove_lines::@7 and play_remove_lines::@8)
Added new block during phi lifting play_update_score::@4(between play_update_score and play_update_score::@return)
Added new block during phi lifting play_update_score::@5(between play_update_score::@1 and play_update_score::@return)
Added new block during phi lifting play_increase_level::@8(between play_increase_level::@2 and play_increase_level::@3)
Added new block during phi lifting play_increase_level::@9(between play_increase_level::@6 and play_increase_level::@6)
Added new block during phi lifting main::@28(between main::@7 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of toSpritePtr1
Adding NOP phi() at start of toSpritePtr1_@return
Adding NOP phi() at start of @5
Adding NOP phi() at start of @6
Adding NOP phi() at start of @8
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@19
Adding NOP phi() at start of main::@20
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@25
Adding NOP phi() at start of main::@26
Adding NOP phi() at start of render_score::@3
Adding NOP phi() at start of render_score::@9
Adding NOP phi() at start of render_score::@1
Adding NOP phi() at start of render_next::@3
Adding NOP phi() at start of render_next::@1
Adding NOP phi() at start of play_collision::@11
Adding NOP phi() at start of play_collision::@7
Adding NOP phi() at start of play_collision::@8
Adding NOP phi() at start of play_collision::@9
Adding NOP phi() at start of play_collision::@13
Adding NOP phi() at start of play_move_down::@5
Adding NOP phi() at start of play_move_down::@10
Adding NOP phi() at start of play_move_down::@15
Adding NOP phi() at start of play_spawn_current::@2
Adding NOP phi() at start of play_spawn_current::sid_rnd1_@return
Adding NOP phi() at start of play_update_score::@2
Adding NOP phi() at start of play_increase_level::@1
Adding NOP phi() at start of play_remove_lines
Adding NOP phi() at start of play_remove_lines::@4
Adding NOP phi() at start of play_remove_lines::@10
Adding NOP phi() at start of keyboard_event_scan::@18
Adding NOP phi() at start of keyboard_event_scan::@19
Adding NOP phi() at start of keyboard_event_scan::@1
Adding NOP phi() at start of keyboard_event_scan::@4
Adding NOP phi() at start of keyboard_event_scan::@2
Adding NOP phi() at start of keyboard_event_scan::@5
Adding NOP phi() at start of keyboard_event_scan::@3
Adding NOP phi() at start of keyboard_event_scan::@6
Adding NOP phi() at start of render_show::@3
Adding NOP phi() at start of render_show::toD0182
Adding NOP phi() at start of render_show::toD0182_@return
Adding NOP phi() at start of render_show::@5
Adding NOP phi() at start of render_show::@1
Adding NOP phi() at start of render_show::toD0181
Adding NOP phi() at start of render_show::toD0181_@return
Adding NOP phi() at start of render_show::@4
Adding NOP phi() at start of play_init
Adding NOP phi() at start of render_init
Adding NOP phi() at start of render_init::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of render_init::vicSelectGfxBank1_toDd001_@return
Adding NOP phi() at start of render_init::@4
Adding NOP phi() at start of render_init::@5
Adding NOP phi() at start of render_init::@2
Adding NOP phi() at start of sprites_irq::toSpritePtr1
Adding NOP phi() at start of sprites_irq::toSpritePtr1_@return
CALL GRAPH
Calls in [] to main:14 
Calls in [main] to render_init:21 sprites_init:23 sprites_irq_init:25 play_init:27 play_spawn_current:29 play_spawn_current:32 render_playfield:34 render_moving:39 render_next:41 render_show:53 keyboard_event_scan:55 keyboard_event_get:57 play_movement:64 render_playfield:69 render_moving:75 render_next:78 render_score:80 render_screen_swap:82 
Calls in [render_score] to render_bcd:125 render_bcd:130 render_bcd:135 render_bcd:140 render_bcd:145 render_bcd:150 
Calls in [play_movement] to play_move_down:254 play_move_leftright:265 play_move_rotate:270 
Calls in [play_move_rotate] to play_collision:295 
Calls in [play_move_leftright] to play_collision:352 play_collision:368 
Calls in [play_move_down] to keyboard_event_pressed:378 play_collision:398 play_lock_current:403 play_remove_lines:405 play_update_score:409 play_spawn_current:412 
Calls in [play_spawn_current] to play_collision:479 
Calls in [play_update_score] to play_increase_level:507 
Calls in [keyboard_event_scan] to keyboard_matrix_read:627 keyboard_event_pressed:638 keyboard_event_pressed:644 keyboard_event_pressed:650 keyboard_event_pressed:656 
Calls in [render_init] to render_screen_original:769 render_screen_original:771 

Created 167 initial phi equivalence classes
Coalesced [30] next_piece_idx#83 ← next_piece_idx#18
Coalesced [31] game_over#90 ← game_over#52
Not coalescing [35] current_ypos#98 ← current_ypos#6
Not coalescing [36] current_xpos#119 ← current_xpos#100
Not coalescing [38] current_piece_char#100 ← current_piece_char#5
Not coalescing [40] next_piece_idx#77 ← next_piece_idx#18
Coalesced [42] current_movedown_slow#96 ← current_movedown_slow#1
Coalesced [44] current_piece_char#106 ← current_piece_char#5
Coalesced [46] current_xpos#130 ← current_xpos#100
Coalesced [47] current_ypos#104 ← current_ypos#6
Coalesced [48] game_over#93 ← game_over#52
Coalesced [49] next_piece_idx#85 ← next_piece_idx#18
Not coalescing [68] render_screen_render#64 ← render_screen_render#18
Not coalescing [70] current_ypos#99 ← current_ypos#19
Not coalescing [71] render_screen_render#65 ← render_screen_render#18
Not coalescing [72] current_xpos#120 ← current_xpos#19
Not coalescing [73] current_piece_gfx#113 ← current_piece_gfx#18
Not coalescing [74] current_piece_char#101 ← current_piece_char#16
Not coalescing [76] render_screen_render#66 ← render_screen_render#18
Not coalescing [77] next_piece_idx#78 ← next_piece_idx#16
Coalesced [83] render_screen_show#60 ← render_screen_show#13
Coalesced [84] render_screen_render#67 ← render_screen_render#11
Coalesced [85] current_movedown_slow#97 ← current_movedown_slow#21
Coalesced [86] current_piece#102 ← current_piece#15
Coalesced [87] current_piece_char#107 ← current_piece_char#16
Coalesced [88] current_orientation#104 ← current_orientation#17
Coalesced [89] current_piece_gfx#124 ← current_piece_gfx#18
Coalesced [90] current_xpos#131 ← current_xpos#19
Coalesced [91] current_ypos#105 ← current_ypos#19
Coalesced [92] game_over#94 ← game_over#15
Coalesced [93] next_piece_idx#86 ← next_piece_idx#16
Coalesced [94] keyboard_events_size#91 ← keyboard_events_size#16
Coalesced [95] current_movedown_counter#60 ← current_movedown_counter#14
Coalesced [96] lines_bcd#95 ← lines_bcd#15
Coalesced [97] level#111 ← level#17
Coalesced [98] level_bcd#110 ← level_bcd#17
Coalesced (already) [99] render_screen_show#61 ← render_screen_show#16
Coalesced (already) [100] render_screen_render#68 ← render_screen_render#18
Coalesced (already) [101] current_movedown_slow#98 ← current_movedown_slow#21
Coalesced (already) [102] current_piece#103 ← current_piece#15
Coalesced (already) [103] current_piece_char#108 ← current_piece_char#16
Coalesced (already) [104] current_orientation#105 ← current_orientation#17
Coalesced (already) [105] current_piece_gfx#125 ← current_piece_gfx#18
Coalesced (already) [106] current_xpos#132 ← current_xpos#19
Coalesced (already) [107] current_ypos#106 ← current_ypos#19
Coalesced (already) [108] game_over#95 ← game_over#15
Coalesced (already) [109] next_piece_idx#87 ← next_piece_idx#16
Coalesced (already) [110] keyboard_events_size#92 ← keyboard_events_size#16
Coalesced (already) [111] current_movedown_counter#61 ← current_movedown_counter#14
Coalesced (already) [112] lines_bcd#96 ← lines_bcd#15
Coalesced (already) [113] level#112 ← level#17
Coalesced (already) [114] level_bcd#111 ← level_bcd#17
Coalesced [123] render_bcd::screen#7 ← render_bcd::screen#0
Coalesced [124] render_bcd::bcd#9 ← render_bcd::bcd#0
Coalesced [128] render_bcd::screen#8 ← render_bcd::screen#1
Coalesced [129] render_bcd::bcd#10 ← render_bcd::bcd#1
Coalesced [133] render_bcd::screen#9 ← render_bcd::screen#2
Coalesced [134] render_bcd::bcd#11 ← render_bcd::bcd#2
Coalesced [138] render_bcd::screen#10 ← render_bcd::screen#3
Coalesced [139] render_bcd::bcd#12 ← render_bcd::bcd#3
Coalesced [143] render_bcd::screen#11 ← render_bcd::screen#4
Coalesced [144] render_bcd::bcd#13 ← render_bcd::bcd#4
Coalesced [148] render_bcd::screen#12 ← render_bcd::screen#5
Coalesced [149] render_bcd::bcd#14 ← render_bcd::bcd#5
Coalesced [161] render_bcd::screen_pos#6 ← render_bcd::screen_pos#2
Coalesced [167] render_bcd::screen_pos#5 ← render_bcd::screen_pos#0
Coalesced [175] render_next::screen_next_area#12 ← render_next::screen_next_area#11
Coalesced [177] render_next::next_piece_gfx#10 ← render_next::next_piece_gfx#3
Coalesced [178] render_next::screen_next_area#14 ← render_next::screen_next_area#10
Coalesced [191] render_next::next_piece_gfx#9 ← render_next::next_piece_gfx#1
Coalesced [192] render_next::screen_next_area#13 ← render_next::screen_next_area#4
Coalesced [193] render_next::l#8 ← render_next::l#1
Coalesced (already) [194] render_next::next_piece_gfx#11 ← render_next::next_piece_gfx#1
Coalesced [195] render_next::screen_next_area#15 ← render_next::screen_next_area#3
Coalesced [196] render_next::c#6 ← render_next::c#1
Coalesced [201] render_moving::ypos#9 ← render_moving::ypos#0
Coalesced [205] render_moving::i#12 ← render_moving::i#1
Coalesced [211] render_moving::ypos#10 ← render_moving::ypos#1
Coalesced [212] render_moving::i#10 ← render_moving::i#8
Coalesced [213] render_moving::l#9 ← render_moving::l#1
Coalesced [218] render_moving::i#13 ← render_moving::i#3
Coalesced [219] render_moving::xpos#5 ← render_moving::xpos#0
Coalesced [228] render_moving::i#11 ← render_moving::i#2
Coalesced (already) [229] render_moving::i#14 ← render_moving::i#2
Coalesced [230] render_moving::xpos#6 ← render_moving::xpos#1
Coalesced [231] render_moving::c#5 ← render_moving::c#1
Coalesced [237] render_playfield::i#6 ← render_playfield::i#3
Coalesced [238] render_playfield::screen_line#3 ← render_playfield::screen_line#0
Coalesced [248] render_playfield::l#5 ← render_playfield::l#1
Coalesced [249] render_playfield::i#5 ← render_playfield::i#1
Coalesced (already) [250] render_playfield::i#7 ← render_playfield::i#1
Coalesced [251] render_playfield::screen_line#4 ← render_playfield::screen_line#1
Coalesced [252] render_playfield::c#3 ← render_playfield::c#1
Coalesced [258] play_movement::return#6 ← play_movement::render#1
Coalesced [259] current_orientation#96 ← current_orientation#20
Coalesced [260] current_piece_gfx#114 ← current_piece_gfx#20
Coalesced [261] current_xpos#121 ← current_xpos#22
Coalesced [274] play_movement::return#7 ← play_movement::return#0
Coalesced [275] current_orientation#97 ← current_orientation#25
Coalesced [276] current_piece_gfx#115 ← current_piece_gfx#21
Coalesced [277] current_xpos#122 ← current_xpos#26
Coalesced (already) [280] current_orientation#102 ← current_orientation#20
Coalesced (already) [281] current_piece_gfx#121 ← current_piece_gfx#20
Coalesced [286] play_move_rotate::orientation#7 ← play_move_rotate::orientation#2
Not coalescing [291] current_piece#99 ← current_piece#15
Coalesced [292] play_collision::orientation#9 ← play_collision::orientation#3
Coalesced [293] play_collision::yp#13 ← play_collision::ypos#3
Coalesced [294] play_collision::xpos#17 ← play_collision::xpos#3
Coalesced [301] current_orientation#103 ← current_orientation#7
Coalesced [302] current_piece_gfx#122 ← current_piece_gfx#7
Coalesced (already) [303] current_orientation#101 ← current_orientation#20
Coalesced (already) [304] current_piece_gfx#120 ← current_piece_gfx#20
Coalesced [307] play_move_rotate::orientation#6 ← play_move_rotate::orientation#1
Coalesced [310] play_collision::yp#15 ← play_collision::yp#0
Coalesced [314] play_collision::i#11 ← play_collision::i#3
Not coalescing [315] play_collision::xp#8 ← play_collision::xpos#6
Coalesced [337] play_collision::yp#16 ← play_collision::yp#1
Not coalescing [338] play_collision::i#10 ← play_collision::i#1
Coalesced [339] play_collision::l#10 ← play_collision::l#1
Not coalescing [340] play_collision::i#12 ← play_collision::i#1
Coalesced [341] play_collision::xp#9 ← play_collision::xp#1
Coalesced [342] play_collision::c#8 ← play_collision::c#1
Not coalescing [348] current_piece#98 ← current_piece#15
Coalesced [349] play_collision::orientation#8 ← play_collision::orientation#2
Coalesced [350] play_collision::yp#12 ← play_collision::ypos#2
Coalesced [351] play_collision::xpos#16 ← play_collision::xpos#2
Coalesced [357] current_xpos#128 ← current_xpos#6
Coalesced (already) [360] current_xpos#127 ← current_xpos#22
Not coalescing [364] current_piece#97 ← current_piece#15
Coalesced [365] play_collision::orientation#7 ← play_collision::orientation#1
Coalesced [366] play_collision::yp#11 ← play_collision::ypos#1
Coalesced [367] play_collision::xpos#15 ← play_collision::xpos#1
Coalesced [373] current_xpos#129 ← current_xpos#8
Coalesced [384] play_move_down::movedown#14 ← play_move_down::movedown#2
Coalesced [388] play_move_down::movedown#16 ← play_move_down::movedown#3
Not coalescing [394] current_piece#96 ← current_piece#10
Coalesced [395] play_collision::orientation#6 ← play_collision::orientation#0
Coalesced [396] play_collision::yp#10 ← play_collision::ypos#0
Coalesced [397] play_collision::xpos#14 ← play_collision::xpos#0
Coalesced (already) [410] next_piece_idx#84 ← next_piece_idx#10
Coalesced (already) [411] game_over#91 ← game_over#10
Coalesced [413] current_ypos#101 ← current_ypos#6
Coalesced [414] lines_bcd#89 ← lines_bcd#17
Coalesced [415] level#105 ← level#19
Coalesced [416] current_movedown_slow#89 ← current_movedown_slow#23
Coalesced [417] level_bcd#102 ← level_bcd#19
Coalesced [419] current_piece_char#103 ← current_piece_char#5
Coalesced [421] current_xpos#124 ← current_xpos#100
Coalesced [422] game_over#87 ← game_over#52
Coalesced [423] next_piece_idx#80 ← next_piece_idx#18
Coalesced (already) [425] current_ypos#102 ← current_ypos#38
Coalesced [426] lines_bcd#90 ← lines_bcd#26
Coalesced [427] level#106 ← level#33
Coalesced [428] current_movedown_slow#90 ← current_movedown_slow#37
Coalesced [429] level_bcd#103 ← level_bcd#31
Coalesced [430] current_piece#94 ← current_piece#28
Coalesced (already) [431] current_piece_char#104 ← current_piece_char#29
Coalesced [432] current_orientation#99 ← current_orientation#37
Coalesced [433] current_piece_gfx#118 ← current_piece_gfx#35
Coalesced (already) [434] current_xpos#125 ← current_xpos#43
Coalesced (already) [435] game_over#88 ← game_over#27
Coalesced (already) [436] next_piece_idx#81 ← next_piece_idx#30
Coalesced [440] current_ypos#100 ← current_ypos#3
Coalesced (already) [441] lines_bcd#88 ← lines_bcd#19
Coalesced (already) [442] level#104 ← level#10
Coalesced (already) [443] current_movedown_slow#88 ← current_movedown_slow#14
Coalesced (already) [444] level_bcd#101 ← level_bcd#11
Coalesced (already) [445] current_piece#92 ← current_piece#10
Coalesced (already) [446] current_piece_char#102 ← current_piece_char#10
Coalesced (already) [447] current_orientation#98 ← current_orientation#13
Coalesced (already) [448] current_piece_gfx#116 ← current_piece_gfx#13
Coalesced (already) [449] current_xpos#123 ← current_xpos#14
Coalesced (already) [450] game_over#86 ← game_over#10
Coalesced (already) [451] next_piece_idx#79 ← next_piece_idx#10
Coalesced [452] current_movedown_counter#59 ← current_movedown_counter#12
Coalesced (already) [453] current_ypos#103 ← current_ypos#11
Coalesced (already) [454] lines_bcd#91 ← lines_bcd#19
Coalesced (already) [455] level#107 ← level#10
Coalesced (already) [456] current_movedown_slow#91 ← current_movedown_slow#14
Coalesced (already) [457] level_bcd#104 ← level_bcd#11
Coalesced (already) [458] current_piece#95 ← current_piece#10
Coalesced (already) [459] current_piece_char#105 ← current_piece_char#10
Coalesced (already) [460] current_orientation#100 ← current_orientation#13
Coalesced (already) [461] current_piece_gfx#119 ← current_piece_gfx#13
Coalesced (already) [462] current_xpos#126 ← current_xpos#14
Coalesced (already) [463] game_over#89 ← game_over#10
Coalesced (already) [464] next_piece_idx#82 ← next_piece_idx#10
Coalesced [465] play_move_down::movedown#15 ← play_move_down::movedown#7
Coalesced [466] play_move_down::movedown#13 ← play_move_down::movedown#10
Coalesced (already) [467] play_move_down::movedown#12 ← play_move_down::movedown#10
Coalesced [477] play_collision::yp#14 ← play_collision::ypos#4
Coalesced [478] play_collision::xpos#18 ← play_collision::xpos#4
Coalesced [487] next_piece_idx#18 ← play_spawn_current::piece_idx#2
Coalesced [492] play_spawn_current::piece_idx#4 ← play_spawn_current::piece_idx#1
Coalesced (already) [493] game_over#92 ← game_over#65
Coalesced [508] lines_bcd#94 ← lines_bcd#29
Coalesced [509] level#110 ← level#21
Coalesced [510] current_movedown_slow#94 ← current_movedown_slow#65
Coalesced [511] level_bcd#107 ← level_bcd#62
Coalesced (already) [514] lines_bcd#93 ← lines_bcd#29
Coalesced (already) [515] level#109 ← level#10
Coalesced (already) [516] current_movedown_slow#93 ← current_movedown_slow#14
Coalesced (already) [517] level_bcd#106 ← level_bcd#11
Coalesced (already) [518] lines_bcd#92 ← lines_bcd#19
Coalesced (already) [519] level#108 ← level#10
Coalesced (already) [520] current_movedown_slow#92 ← current_movedown_slow#14
Coalesced (already) [521] level_bcd#105 ← level_bcd#11
Coalesced [525] current_movedown_slow#95 ← current_movedown_slow#10
Coalesced [531] level_bcd#109 ← level_bcd#8
Coalesced [541] play_increase_level::b#3 ← play_increase_level::b#1
Coalesced [542] level_bcd#108 ← level_bcd#21
Coalesced [546] play_remove_lines::r#10 ← play_remove_lines::r#3
Coalesced [547] play_remove_lines::w#14 ← play_remove_lines::w#12
Coalesced [561] play_remove_lines::w#17 ← play_remove_lines::w#2
Coalesced [562] play_remove_lines::removed#14 ← play_remove_lines::removed#1
Coalesced [566] play_remove_lines::w#18 ← play_remove_lines::w#11
Coalesced [573] play_remove_lines::w#19 ← play_remove_lines::w#3
Coalesced [574] play_remove_lines::r#9 ← play_remove_lines::r#1
Coalesced [575] play_remove_lines::w#13 ← play_remove_lines::w#11
Coalesced [576] play_remove_lines::y#9 ← play_remove_lines::y#1
Coalesced [577] play_remove_lines::removed#12 ← play_remove_lines::removed#7
Coalesced [578] play_remove_lines::w#16 ← play_remove_lines::w#1
Coalesced (already) [579] play_remove_lines::removed#13 ← play_remove_lines::removed#11
Coalesced (already) [580] play_remove_lines::r#11 ← play_remove_lines::r#1
Coalesced (already) [581] play_remove_lines::w#15 ← play_remove_lines::w#1
Coalesced [582] play_remove_lines::x#5 ← play_remove_lines::x#1
Coalesced [583] play_remove_lines::full#5 ← play_remove_lines::full#2
Coalesced (already) [584] play_remove_lines::full#6 ← play_remove_lines::full#4
Coalesced [586] play_lock_current::yp#7 ← play_lock_current::yp#0
Coalesced [591] play_lock_current::i#8 ← play_lock_current::i#3
Coalesced [592] play_lock_current::xp#5 ← play_lock_current::xp#0
Coalesced [604] play_lock_current::yp#8 ← play_lock_current::yp#1
Not coalescing [605] play_lock_current::i#7 ← play_lock_current::i#1
Coalesced [606] play_lock_current::l#7 ← play_lock_current::l#1
Not coalescing [607] play_lock_current::i#9 ← play_lock_current::i#1
Coalesced [608] play_lock_current::xp#6 ← play_lock_current::xp#1
Coalesced [609] play_lock_current::c#5 ← play_lock_current::c#1
Coalesced [619] keyboard_event_get::return#6 ← keyboard_event_get::return#1
Coalesced [620] keyboard_events_size#90 ← keyboard_events_size#4
Coalesced [623] keyboard_events_size#89 ← keyboard_events_size#13
Coalesced [624] keyboard_events_size#79 ← keyboard_events_size#19
Coalesced [632] keyboard_event_scan::keycode#17 ← keyboard_event_scan::keycode#1
Coalesced (already) [633] keyboard_events_size#82 ← keyboard_events_size#30
Coalesced [662] keyboard_event_scan::row#14 ← keyboard_event_scan::row#1
Coalesced [663] keyboard_event_scan::keycode#15 ← keyboard_event_scan::keycode#13
Coalesced (already) [664] keyboard_events_size#80 ← keyboard_events_size#13
Coalesced [665] keyboard_event_scan::keycode#19 ← keyboard_event_scan::keycode#11
Coalesced [666] keyboard_events_size#84 ← keyboard_events_size#30
Coalesced [676] keyboard_events_size#88 ← keyboard_events_size#2
Coalesced [682] keyboard_event_scan::keycode#16 ← keyboard_event_scan::keycode#14
Coalesced [683] keyboard_events_size#81 ← keyboard_events_size#29
Coalesced [684] keyboard_event_scan::col#8 ← keyboard_event_scan::col#1
Coalesced (already) [685] keyboard_event_scan::keycode#18 ← keyboard_event_scan::keycode#14
Coalesced (already) [686] keyboard_events_size#83 ← keyboard_events_size#29
Coalesced [690] keyboard_events_size#86 ← keyboard_events_size#1
Coalesced (already) [691] keyboard_events_size#87 ← keyboard_events_size#10
Coalesced (already) [692] keyboard_events_size#85 ← keyboard_events_size#10
Coalesced [728] play_init::b#3 ← play_init::b#1
Coalesced [729] play_init::j#3 ← play_init::j#1
Coalesced [730] play_init::pli#3 ← play_init::pli#1
Coalesced [731] play_init::idx#3 ← play_init::idx#1
Coalesced [756] sprites_init::s#3 ← sprites_init::s#1
Coalesced [757] sprites_init::xpos#3 ← sprites_init::xpos#1
Coalesced [783] render_init::i#3 ← render_init::i#1
Coalesced [784] render_init::li_1#3 ← render_init::li_1#1
Coalesced [785] render_init::li_2#3 ← render_init::li_2#1
Coalesced [787] render_screen_original::screen#11 ← render_screen_original::screen#9
Coalesced [789] render_screen_original::screen#13 ← render_screen_original::screen#8
Coalesced [790] render_screen_original::cols#10 ← render_screen_original::cols#7
Coalesced [798] render_screen_original::oscr#8 ← render_screen_original::oscr#4
Coalesced [799] render_screen_original::screen#15 ← render_screen_original::screen#2
Coalesced [800] render_screen_original::ocols#8 ← render_screen_original::ocols#4
Coalesced [801] render_screen_original::cols#12 ← render_screen_original::cols#1
Coalesced [802] render_screen_original::x#8 ← render_screen_original::x#1
Coalesced [812] render_screen_original::screen#17 ← render_screen_original::screen#3
Coalesced [813] render_screen_original::cols#14 ← render_screen_original::cols#2
Coalesced [814] render_screen_original::x#10 ← render_screen_original::x#2
Coalesced [825] render_screen_original::screen#12 ← render_screen_original::screen#10
Coalesced [826] render_screen_original::cols#9 ← render_screen_original::cols#3
Coalesced [827] render_screen_original::oscr#7 ← render_screen_original::oscr#1
Coalesced [828] render_screen_original::ocols#7 ← render_screen_original::ocols#1
Coalesced [829] render_screen_original::y#7 ← render_screen_original::y#1
Coalesced [830] render_screen_original::screen#18 ← render_screen_original::screen#10
Coalesced [831] render_screen_original::cols#15 ← render_screen_original::cols#3
Coalesced [832] render_screen_original::x#11 ← render_screen_original::x#3
Coalesced (already) [833] render_screen_original::oscr#9 ← render_screen_original::oscr#1
Coalesced [834] render_screen_original::screen#16 ← render_screen_original::screen#3
Coalesced (already) [835] render_screen_original::ocols#9 ← render_screen_original::ocols#1
Coalesced [836] render_screen_original::cols#13 ← render_screen_original::cols#2
Coalesced [837] render_screen_original::x#9 ← render_screen_original::x#2
Coalesced (already) [838] render_screen_original::screen#14 ← render_screen_original::screen#2
Coalesced (already) [839] render_screen_original::cols#11 ← render_screen_original::cols#1
Coalesced [840] render_screen_original::x#7 ← render_screen_original::x#1
Coalesced down to 93 phi equivalence classes
Culled Empty Block (label) @1
Culled Empty Block (label) toSpritePtr1_@return
Culled Empty Block (label) @5
Culled Empty Block (label) @8
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@27
Culled Empty Block (label) main::@28
Culled Empty Block (label) render_score::@3
Culled Empty Block (label) render_score::@9
Culled Empty Block (label) render_bcd::@3
Culled Empty Block (label) render_next::@3
Culled Empty Block (label) render_next::@10
Culled Empty Block (label) render_next::@11
Culled Empty Block (label) render_moving::@8
Culled Empty Block (label) render_moving::@9
Culled Empty Block (label) render_moving::@10
Culled Empty Block (label) render_playfield::@4
Culled Empty Block (label) render_playfield::@5
Culled Empty Block (label) play_movement::@2
Culled Empty Block (label) play_move_rotate::@6
Culled Empty Block (label) play_move_rotate::@4
Culled Empty Block (label) play_collision::@11
Culled Empty Block (label) play_collision::@7
Culled Empty Block (label) play_collision::@8
Culled Empty Block (label) play_collision::@9
Culled Empty Block (label) play_collision::@13
Culled Empty Block (label) play_move_leftright::@2
Culled Empty Block (label) play_move_down::@4
Culled Empty Block (label) play_move_down::@21
Culled Empty Block (label) play_move_down::@20
Culled Empty Block (label) play_move_down::@19
Culled Empty Block (label) play_spawn_current::@2
Culled Empty Block (label) play_spawn_current::@4
Culled Empty Block (label) play_spawn_current::sid_rnd1_@return
Culled Empty Block (label) play_update_score::@3
Culled Empty Block (label) play_update_score::@5
Culled Empty Block (label) play_update_score::@4
Culled Empty Block (label) play_increase_level::@9
Culled Empty Block (label) play_increase_level::@8
Culled Empty Block (label) play_increase_level::@1
Culled Empty Block (label) play_remove_lines::@4
Culled Empty Block (label) play_remove_lines::@15
Culled Empty Block (label) play_remove_lines::@10
Culled Empty Block (label) play_remove_lines::@11
Culled Empty Block (label) play_remove_lines::@14
Culled Empty Block (label) play_remove_lines::@12
Culled Empty Block (label) keyboard_event_get::@1
Culled Empty Block (label) keyboard_event_scan::@25
Culled Empty Block (label) keyboard_event_scan::@8
Culled Empty Block (label) keyboard_event_scan::@26
Culled Empty Block (label) keyboard_event_scan::@28
Culled Empty Block (label) keyboard_event_scan::@27
Culled Empty Block (label) render_show::@3
Culled Empty Block (label) render_show::toD0182_@return
Culled Empty Block (label) render_show::@5
Culled Empty Block (label) render_show::@1
Culled Empty Block (label) render_show::toD0181_@return
Culled Empty Block (label) render_show::@4
Culled Empty Block (label) play_init::@5
Culled Empty Block (label) play_init::@4
Culled Empty Block (label) sprites_init::@2
Culled Empty Block (label) render_init::vicSelectGfxBank1_toDd001_@return
Culled Empty Block (label) render_init::@5
Culled Empty Block (label) render_init::@2
Culled Empty Block (label) render_init::@6
Culled Empty Block (label) render_screen_original::@8
Culled Empty Block (label) render_screen_original::@10
Culled Empty Block (label) render_screen_original::@6
Culled Empty Block (label) render_screen_original::@11
Culled Empty Block (label) render_screen_original::@9
Culled Empty Block (label) render_screen_original::@7
Culled Empty Block (label) sprites_irq::toSpritePtr1_@return
Renumbering block @2 to @1
Renumbering block @3 to @2
Renumbering block @4 to @3
Renumbering block @6 to @4
Renumbering block @7 to @5
Renumbering block keyboard_event_scan::@9 to keyboard_event_scan::@8
Renumbering block keyboard_event_scan::@10 to keyboard_event_scan::@9
Renumbering block keyboard_event_scan::@11 to keyboard_event_scan::@10
Renumbering block keyboard_event_scan::@12 to keyboard_event_scan::@11
Renumbering block keyboard_event_scan::@13 to keyboard_event_scan::@12
Renumbering block keyboard_event_scan::@14 to keyboard_event_scan::@13
Renumbering block keyboard_event_scan::@15 to keyboard_event_scan::@14
Renumbering block keyboard_event_scan::@16 to keyboard_event_scan::@15
Renumbering block keyboard_event_scan::@17 to keyboard_event_scan::@16
Renumbering block keyboard_event_scan::@18 to keyboard_event_scan::@17
Renumbering block keyboard_event_scan::@19 to keyboard_event_scan::@18
Renumbering block keyboard_event_scan::@20 to keyboard_event_scan::@19
Renumbering block keyboard_event_scan::@21 to keyboard_event_scan::@20
Renumbering block keyboard_event_scan::@22 to keyboard_event_scan::@21
Renumbering block keyboard_event_scan::@23 to keyboard_event_scan::@22
Renumbering block keyboard_event_scan::@24 to keyboard_event_scan::@23
Renumbering block keyboard_event_get::@2 to keyboard_event_get::@1
Renumbering block render_init::@3 to render_init::@2
Renumbering block render_init::@4 to render_init::@3
Renumbering block render_show::@2 to render_show::@1
Renumbering block render_score::@4 to render_score::@3
Renumbering block render_score::@5 to render_score::@4
Renumbering block render_score::@6 to render_score::@5
Renumbering block render_score::@7 to render_score::@6
Renumbering block render_score::@8 to render_score::@7
Renumbering block render_next::@4 to render_next::@3
Renumbering block render_next::@5 to render_next::@4
Renumbering block render_next::@6 to render_next::@5
Renumbering block render_next::@7 to render_next::@6
Renumbering block render_next::@8 to render_next::@7
Renumbering block render_next::@9 to render_next::@8
Renumbering block play_movement::@3 to play_movement::@2
Renumbering block play_movement::@4 to play_movement::@3
Renumbering block play_movement::@5 to play_movement::@4
Renumbering block play_move_down::@5 to play_move_down::@4
Renumbering block play_move_down::@6 to play_move_down::@5
Renumbering block play_move_down::@7 to play_move_down::@6
Renumbering block play_move_down::@8 to play_move_down::@7
Renumbering block play_move_down::@9 to play_move_down::@8
Renumbering block play_move_down::@10 to play_move_down::@9
Renumbering block play_move_down::@11 to play_move_down::@10
Renumbering block play_move_down::@12 to play_move_down::@11
Renumbering block play_move_down::@13 to play_move_down::@12
Renumbering block play_move_down::@14 to play_move_down::@13
Renumbering block play_move_down::@15 to play_move_down::@14
Renumbering block play_move_down::@16 to play_move_down::@15
Renumbering block play_move_down::@17 to play_move_down::@16
Renumbering block play_move_down::@18 to play_move_down::@17
Renumbering block play_move_leftright::@3 to play_move_leftright::@2
Renumbering block play_move_leftright::@4 to play_move_leftright::@3
Renumbering block play_move_leftright::@5 to play_move_leftright::@4
Renumbering block play_move_leftright::@6 to play_move_leftright::@5
Renumbering block play_move_leftright::@7 to play_move_leftright::@6
Renumbering block play_move_leftright::@8 to play_move_leftright::@7
Renumbering block play_move_rotate::@5 to play_move_rotate::@4
Renumbering block play_move_rotate::@7 to play_move_rotate::@5
Renumbering block play_move_rotate::@8 to play_move_rotate::@6
Renumbering block play_collision::@10 to play_collision::@7
Renumbering block play_collision::@12 to play_collision::@8
Renumbering block play_collision::@14 to play_collision::@9
Renumbering block play_collision::@15 to play_collision::@10
Renumbering block play_spawn_current::@3 to play_spawn_current::@2
Renumbering block play_spawn_current::@5 to play_spawn_current::@3
Renumbering block play_spawn_current::@6 to play_spawn_current::@4
Renumbering block play_spawn_current::@7 to play_spawn_current::@5
Renumbering block play_remove_lines::@5 to play_remove_lines::@4
Renumbering block play_remove_lines::@6 to play_remove_lines::@5
Renumbering block play_remove_lines::@7 to play_remove_lines::@6
Renumbering block play_remove_lines::@8 to play_remove_lines::@7
Renumbering block play_remove_lines::@9 to play_remove_lines::@8
Renumbering block play_remove_lines::@13 to play_remove_lines::@9
Renumbering block play_increase_level::@2 to play_increase_level::@1
Renumbering block play_increase_level::@3 to play_increase_level::@2
Renumbering block play_increase_level::@4 to play_increase_level::@3
Renumbering block play_increase_level::@5 to play_increase_level::@4
Renumbering block play_increase_level::@6 to play_increase_level::@5
Renumbering block play_increase_level::@7 to play_increase_level::@6
Renumbering block main::@6 to main::@5
Renumbering block main::@7 to main::@6
Renumbering block main::@8 to main::@7
Renumbering block main::@9 to main::@8
Renumbering block main::@10 to main::@9
Renumbering block main::@11 to main::@10
Renumbering block main::@12 to main::@11
Renumbering block main::@13 to main::@12
Renumbering block main::@14 to main::@13
Renumbering block main::@15 to main::@14
Renumbering block main::@16 to main::@15
Renumbering block main::@17 to main::@16
Renumbering block main::@18 to main::@17
Renumbering block main::@19 to main::@18
Renumbering block main::@20 to main::@19
Renumbering block main::@21 to main::@20
Renumbering block main::@22 to main::@21
Renumbering block main::@23 to main::@22
Renumbering block main::@24 to main::@23
Renumbering block main::@25 to main::@24
Renumbering block main::@26 to main::@25
Adding NOP phi() at start of @begin
Adding NOP phi() at start of toSpritePtr1
Adding NOP phi() at start of @4
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@18
Adding NOP phi() at start of main::@19
Adding NOP phi() at start of main::@24
Adding NOP phi() at start of main::@25
Adding NOP phi() at start of render_score::@1
Adding NOP phi() at start of render_next::@1
Adding NOP phi() at start of play_move_down::@4
Adding NOP phi() at start of play_move_down::@9
Adding NOP phi() at start of play_move_down::@14
Adding NOP phi() at start of play_move_down::@16
Adding NOP phi() at start of play_spawn_current::@5
Adding NOP phi() at start of play_update_score::@2
Adding NOP phi() at start of play_remove_lines
Adding NOP phi() at start of play_remove_lines::@9
Adding NOP phi() at start of keyboard_event_scan
Adding NOP phi() at start of keyboard_event_scan::@17
Adding NOP phi() at start of keyboard_event_scan::@18
Adding NOP phi() at start of keyboard_event_scan::@1
Adding NOP phi() at start of keyboard_event_scan::@4
Adding NOP phi() at start of keyboard_event_scan::@2
Adding NOP phi() at start of keyboard_event_scan::@5
Adding NOP phi() at start of keyboard_event_scan::@3
Adding NOP phi() at start of keyboard_event_scan::@6
Adding NOP phi() at start of render_show::toD0182
Adding NOP phi() at start of render_show::toD0181
Adding NOP phi() at start of play_init
Adding NOP phi() at start of render_init
Adding NOP phi() at start of render_init::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of render_init::@3
Adding NOP phi() at start of sprites_irq::toSpritePtr1

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (volatile byte) render_screen_showing ← (byte) 0
  [2] (volatile dword) score_bcd ← (dword) 0
  kickasm(location (const nomodify byte*) PLAYFIELD_CHARSET) {{ .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "playfield-screen.imap"
 }}
  to:@2
@2: scope:[]  from @1
  kickasm(location (const nomodify byte*) PLAYFIELD_SPRITES) {{ .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000))
	// Put the sprites into memory 
	.for(var sy=0;sy<10;sy++) {
	    .var sprite_gfx_y = sy*20
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21)
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y)
	            }
	        }
	    	.byte 0
	  	}
	}
 }}
  to:@3
@3: scope:[]  from @2
  [5] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST
  [6] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS+(byte) $15
  to:toSpritePtr1
toSpritePtr1: scope:[]  from @3
  [7] phi()
  to:@5
@5: scope:[]  from toSpritePtr1
  [8] (volatile byte) irq_sprite_ptr ← (const byte) toSpritePtr1_return#0+(byte) 3
  [9] (volatile byte) irq_cnt ← (byte) 0
  to:@4
@4: scope:[]  from @5
  [10] phi()
  [11] call main 
  to:@end
@end: scope:[]  from @4
  [12] phi()

(void()) main()
main: scope:[main]  from @4
  [13] phi()
  to:main::sid_rnd_init1
main::sid_rnd_init1: scope:[main]  from main
  [14] *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (word) $ffff
  [15] *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE
  to:main::@8
main::@8: scope:[main]  from main::sid_rnd_init1
  asm { sei  }
  [17] call render_init 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [18] phi()
  [19] call sprites_init 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [20] phi()
  [21] call sprites_irq_init 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [22] phi()
  [23] call play_init 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [24] phi()
  [25] call play_spawn_current 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [26] phi()
  [27] call play_spawn_current 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [28] phi()
  [29] call render_playfield 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [30] (byte) current_ypos#98 ← (byte) current_ypos#6
  [31] (byte) current_xpos#119 ← (byte) current_xpos#100
  [32] (byte*) current_piece_gfx#112 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7)
  [33] (byte) current_piece_char#100 ← (byte) current_piece_char#5
  [34] call render_moving 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [35] (byte) next_piece_idx#77 ← (byte) play_spawn_current::piece_idx#2
  [36] call render_next 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [37] (byte*) current_piece#101 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7)
  [38] (byte*) current_piece_gfx#123 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7)
  to:main::@1
main::@1: scope:[main]  from main::@17 main::@25 main::@6
  [39] (byte) level_bcd#11 ← phi( main::@17/(byte) 0 main::@25/(byte) level_bcd#17 main::@6/(byte) level_bcd#17 )
  [39] (byte) level#10 ← phi( main::@17/(byte) 0 main::@25/(byte) level#17 main::@6/(byte) level#17 )
  [39] (word) lines_bcd#19 ← phi( main::@17/(word) 0 main::@25/(word) lines_bcd#15 main::@6/(word) lines_bcd#15 )
  [39] (byte) current_movedown_counter#16 ← phi( main::@17/(byte) 0 main::@25/(byte) current_movedown_counter#14 main::@6/(byte) current_movedown_counter#14 )
  [39] (byte) keyboard_events_size#19 ← phi( main::@17/(byte) 0 main::@25/(byte) keyboard_events_size#16 main::@6/(byte) keyboard_events_size#16 )
  [39] (byte) next_piece_idx#10 ← phi( main::@17/(byte) play_spawn_current::piece_idx#2 main::@25/(byte) next_piece_idx#16 main::@6/(byte) next_piece_idx#16 )
  [39] (byte) game_over#10 ← phi( main::@17/(byte) game_over#52 main::@25/(byte) game_over#15 main::@6/(byte) game_over#15 )
  [39] (byte) current_ypos#11 ← phi( main::@17/(byte) current_ypos#6 main::@25/(byte) current_ypos#19 main::@6/(byte) current_ypos#19 )
  [39] (byte) current_xpos#14 ← phi( main::@17/(byte) current_xpos#100 main::@25/(byte) current_xpos#19 main::@6/(byte) current_xpos#19 )
  [39] (byte*) current_piece_gfx#13 ← phi( main::@17/(byte*) current_piece_gfx#123 main::@25/(byte*) current_piece_gfx#18 main::@6/(byte*) current_piece_gfx#18 )
  [39] (byte) current_orientation#13 ← phi( main::@17/(byte) 0 main::@25/(byte) current_orientation#17 main::@6/(byte) current_orientation#17 )
  [39] (byte) current_piece_char#10 ← phi( main::@17/(byte) current_piece_char#5 main::@25/(byte) current_piece_char#16 main::@6/(byte) current_piece_char#16 )
  [39] (byte*) current_piece#10 ← phi( main::@17/(byte*) current_piece#101 main::@25/(byte*) current_piece#15 main::@6/(byte*) current_piece#15 )
  [39] (byte) current_movedown_slow#14 ← phi( main::@17/(byte) current_movedown_slow#1 main::@25/(byte) current_movedown_slow#21 main::@6/(byte) current_movedown_slow#21 )
  [39] (byte) render_screen_render#18 ← phi( main::@17/(byte) $20 main::@25/(byte) render_screen_render#11 main::@6/(byte) render_screen_render#18 )
  [39] (byte) render_screen_show#16 ← phi( main::@17/(byte) 0 main::@25/(byte) render_screen_show#13 main::@6/(byte) render_screen_show#16 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [40] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [41] phi()
  [42] call render_show 
  to:main::@18
main::@18: scope:[main]  from main::@3
  [43] phi()
  [44] call keyboard_event_scan 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [45] phi()
  [46] call keyboard_event_get 
  [47] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:main::@20
main::@20: scope:[main]  from main::@19
  [48] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3
  [49] if((byte) game_over#10==(byte) 0) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@20 main::@5
  [50] *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL)
  to:main::@5
main::@4: scope:[main]  from main::@20
  [51] (byte) play_movement::key_event#0 ← (byte) main::key_event#0
  [52] call play_movement 
  [53] (byte) play_movement::return#3 ← (byte) play_movement::return#2
  to:main::@21
main::@21: scope:[main]  from main::@4
  [54] (byte) main::render#1 ← (byte) play_movement::return#3
  to:main::@6
main::@6: scope:[main]  from main::@21
  [55] if((byte) main::render#1==(byte) 0) goto main::@1
  to:main::@7
main::@7: scope:[main]  from main::@6
  [56] (byte) render_screen_render#64 ← (byte) render_screen_render#18
  [57] call render_playfield 
  to:main::@22
main::@22: scope:[main]  from main::@7
  [58] (byte) current_ypos#99 ← (byte) current_ypos#19
  [59] (byte) render_screen_render#65 ← (byte) render_screen_render#18
  [60] (byte) current_xpos#120 ← (byte) current_xpos#19
  [61] (byte*) current_piece_gfx#113 ← (byte*) current_piece_gfx#18
  [62] (byte) current_piece_char#101 ← (byte) current_piece_char#16
  [63] call render_moving 
  to:main::@23
main::@23: scope:[main]  from main::@22
  [64] (byte) render_screen_render#66 ← (byte) render_screen_render#18
  [65] (byte) next_piece_idx#78 ← (byte) next_piece_idx#16
  [66] call render_next 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [67] phi()
  [68] call render_score 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [69] phi()
  [70] call render_screen_swap 
  to:main::@1

(void()) render_screen_swap()
render_screen_swap: scope:[render_screen_swap]  from main::@25
  [71] (byte) render_screen_render#11 ← (byte) render_screen_render#18 ^ (byte) $20
  [72] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte) $20
  to:render_screen_swap::@return
render_screen_swap::@return: scope:[render_screen_swap]  from render_screen_swap
  [73] return 
  to:@return

(void()) render_score()
render_score: scope:[render_score]  from main::@24
  [74] if((byte) render_screen_render#18==(byte) 0) goto render_score::@1
  to:render_score::@2
render_score::@1: scope:[render_score]  from render_score
  [75] phi()
  to:render_score::@2
render_score::@2: scope:[render_score]  from render_score render_score::@1
  [76] (byte*) render_score::screen#3 ← phi( render_score::@1/(const nomodify byte*) PLAYFIELD_SCREEN_1 render_score/(const nomodify byte*) PLAYFIELD_SCREEN_2 )
  [77] (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3
  [78] (byte) render_bcd::bcd#0 ← *((const byte*) render_score::score_bytes+(byte) 2)
  [79] call render_bcd 
  to:render_score::@3
render_score::@3: scope:[render_score]  from render_score::@2
  [80] (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#3
  [81] (byte) render_bcd::bcd#1 ← *((const byte*) render_score::score_bytes+(byte) 1)
  [82] call render_bcd 
  to:render_score::@4
render_score::@4: scope:[render_score]  from render_score::@3
  [83] (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#3
  [84] (byte) render_bcd::bcd#2 ← *((const byte*) render_score::score_bytes)
  [85] call render_bcd 
  to:render_score::@5
render_score::@5: scope:[render_score]  from render_score::@4
  [86] (byte) render_bcd::bcd#3 ← > (word) lines_bcd#15
  [87] (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#3
  [88] call render_bcd 
  to:render_score::@6
render_score::@6: scope:[render_score]  from render_score::@5
  [89] (byte) render_bcd::bcd#4 ← < (word) lines_bcd#15
  [90] (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#3
  [91] call render_bcd 
  to:render_score::@7
render_score::@7: scope:[render_score]  from render_score::@6
  [92] (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#3
  [93] (byte) render_bcd::bcd#5 ← (byte) level_bcd#17
  [94] call render_bcd 
  to:render_score::@return
render_score::@return: scope:[render_score]  from render_score::@7
  [95] return 
  to:@return

(void()) render_bcd((byte*) render_bcd::screen , (word) render_bcd::offset , (byte) render_bcd::bcd , (byte) render_bcd::only_low)
render_bcd: scope:[render_bcd]  from render_score::@2 render_score::@3 render_score::@4 render_score::@5 render_score::@6 render_score::@7
  [96] (byte) render_bcd::bcd#6 ← phi( render_score::@2/(byte) render_bcd::bcd#0 render_score::@3/(byte) render_bcd::bcd#1 render_score::@4/(byte) render_bcd::bcd#2 render_score::@5/(byte) render_bcd::bcd#3 render_score::@6/(byte) render_bcd::bcd#4 render_score::@7/(byte) render_bcd::bcd#5 )
  [96] (byte) render_bcd::only_low#6 ← phi( render_score::@2/(byte) 0 render_score::@3/(byte) 0 render_score::@4/(byte) 0 render_score::@5/(byte) 1 render_score::@6/(byte) 0 render_score::@7/(byte) 0 )
  [96] (word) render_bcd::offset#6 ← phi( render_score::@2/(const word) render_score::score_offset render_score::@3/(const word) render_score::score_offset+(byte) 2 render_score::@4/(const word) render_score::score_offset+(byte) 4 render_score::@5/(const word) render_score::lines_offset render_score::@6/(const word) render_score::lines_offset+(byte) 1 render_score::@7/(const word) render_score::level_offset )
  [96] (byte*) render_bcd::screen#6 ← phi( render_score::@2/(byte*) render_bcd::screen#0 render_score::@3/(byte*) render_bcd::screen#1 render_score::@4/(byte*) render_bcd::screen#2 render_score::@5/(byte*) render_bcd::screen#3 render_score::@6/(byte*) render_bcd::screen#4 render_score::@7/(byte*) render_bcd::screen#5 )
  [97] (byte*) render_bcd::screen_pos#0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6
  [98] if((byte) render_bcd::only_low#6!=(byte) 0) goto render_bcd::@1
  to:render_bcd::@2
render_bcd::@2: scope:[render_bcd]  from render_bcd
  [99] (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#6 >> (byte) 4
  [100] (byte~) render_bcd::$6 ← (const nomodify byte) render_bcd::ZERO_CHAR + (byte~) render_bcd::$5
  [101] *((byte*) render_bcd::screen_pos#0) ← (byte~) render_bcd::$6
  [102] (byte*) render_bcd::screen_pos#2 ← ++ (byte*) render_bcd::screen_pos#0
  to:render_bcd::@1
render_bcd::@1: scope:[render_bcd]  from render_bcd render_bcd::@2
  [103] (byte*) render_bcd::screen_pos#3 ← phi( render_bcd/(byte*) render_bcd::screen_pos#0 render_bcd::@2/(byte*) render_bcd::screen_pos#2 )
  [104] (byte~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte) $f
  [105] (byte~) render_bcd::$4 ← (const nomodify byte) render_bcd::ZERO_CHAR + (byte~) render_bcd::$3
  [106] *((byte*) render_bcd::screen_pos#3) ← (byte~) render_bcd::$4
  to:render_bcd::@return
render_bcd::@return: scope:[render_bcd]  from render_bcd::@1
  [107] return 
  to:@return

(void()) render_next()
render_next: scope:[render_next]  from main::@16 main::@23
  [108] (byte) next_piece_idx#12 ← phi( main::@16/(byte) next_piece_idx#77 main::@23/(byte) next_piece_idx#78 )
  [108] (byte) render_screen_render#15 ← phi( main::@16/(byte) $20 main::@23/(byte) render_screen_render#66 )
  [109] if((byte) render_screen_render#15==(byte) 0) goto render_next::@1
  to:render_next::@2
render_next::@1: scope:[render_next]  from render_next
  [110] phi()
  to:render_next::@2
render_next::@2: scope:[render_next]  from render_next render_next::@1
  [111] (byte*) render_next::screen_next_area#11 ← phi( render_next::@1/(const nomodify byte*) PLAYFIELD_SCREEN_1+(const word) render_next::next_area_offset render_next/(const nomodify byte*) PLAYFIELD_SCREEN_2+(const word) render_next::next_area_offset )
  [112] (byte~) render_next::$6 ← (byte) next_piece_idx#12 << (byte) 1
  [113] (byte) render_next::next_piece_char#0 ← *((const byte*) PIECES_NEXT_CHARS + (byte) next_piece_idx#12)
  [114] (byte*) render_next::next_piece_gfx#8 ← (byte*)*((const word*) PIECES + (byte~) render_next::$6)
  to:render_next::@3
render_next::@3: scope:[render_next]  from render_next::@2 render_next::@8
  [115] (byte) render_next::l#7 ← phi( render_next::@2/(byte) 0 render_next::@8/(byte) render_next::l#1 )
  [115] (byte*) render_next::screen_next_area#10 ← phi( render_next::@2/(byte*) render_next::screen_next_area#11 render_next::@8/(byte*) render_next::screen_next_area#4 )
  [115] (byte*) render_next::next_piece_gfx#3 ← phi( render_next::@2/(byte*) render_next::next_piece_gfx#8 render_next::@8/(byte*) render_next::next_piece_gfx#1 )
  to:render_next::@4
render_next::@4: scope:[render_next]  from render_next::@3 render_next::@6
  [116] (byte) render_next::c#2 ← phi( render_next::@3/(byte) 0 render_next::@6/(byte) render_next::c#1 )
  [116] (byte*) render_next::screen_next_area#5 ← phi( render_next::@3/(byte*) render_next::screen_next_area#10 render_next::@6/(byte*) render_next::screen_next_area#3 )
  [116] (byte*) render_next::next_piece_gfx#2 ← phi( render_next::@3/(byte*) render_next::next_piece_gfx#3 render_next::@6/(byte*) render_next::next_piece_gfx#1 )
  [117] (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2)
  [118] (byte*) render_next::next_piece_gfx#1 ← ++ (byte*) render_next::next_piece_gfx#2
  [119] if((byte) render_next::cell#0!=(byte) 0) goto render_next::@5
  to:render_next::@7
render_next::@7: scope:[render_next]  from render_next::@4
  [120] *((byte*) render_next::screen_next_area#5) ← (byte) 0
  to:render_next::@6
render_next::@6: scope:[render_next]  from render_next::@5 render_next::@7
  [121] (byte*) render_next::screen_next_area#3 ← ++ (byte*) render_next::screen_next_area#5
  [122] (byte) render_next::c#1 ← ++ (byte) render_next::c#2
  [123] if((byte) render_next::c#1!=(byte) 4) goto render_next::@4
  to:render_next::@8
render_next::@8: scope:[render_next]  from render_next::@6
  [124] (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#3 + (byte) $24
  [125] (byte) render_next::l#1 ← ++ (byte) render_next::l#7
  [126] if((byte) render_next::l#1!=(byte) 4) goto render_next::@3
  to:render_next::@return
render_next::@return: scope:[render_next]  from render_next::@8
  [127] return 
  to:@return
render_next::@5: scope:[render_next]  from render_next::@4
  [128] *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#0
  to:render_next::@6

(void()) render_moving()
render_moving: scope:[render_moving]  from main::@15 main::@22
  [129] (byte) current_piece_char#68 ← phi( main::@15/(byte) current_piece_char#100 main::@22/(byte) current_piece_char#101 )
  [129] (byte*) current_piece_gfx#64 ← phi( main::@15/(byte*) current_piece_gfx#112 main::@22/(byte*) current_piece_gfx#113 )
  [129] (byte) current_xpos#59 ← phi( main::@15/(byte) current_xpos#119 main::@22/(byte) current_xpos#120 )
  [129] (byte) render_screen_render#33 ← phi( main::@15/(byte) $20 main::@22/(byte) render_screen_render#65 )
  [129] (byte) current_ypos#13 ← phi( main::@15/(byte) current_ypos#98 main::@22/(byte) current_ypos#99 )
  [130] (byte) render_moving::ypos#0 ← (byte) current_ypos#13
  to:render_moving::@1
render_moving::@1: scope:[render_moving]  from render_moving render_moving::@3
  [131] (byte) render_moving::l#4 ← phi( render_moving/(byte) 0 render_moving::@3/(byte) render_moving::l#1 )
  [131] (byte) render_moving::i#3 ← phi( render_moving/(byte) 0 render_moving::@3/(byte) render_moving::i#8 )
  [131] (byte) render_moving::ypos#2 ← phi( render_moving/(byte) render_moving::ypos#0 render_moving::@3/(byte) render_moving::ypos#1 )
  [132] if((byte) render_moving::ypos#2>=(byte) 1+(byte) 1) goto render_moving::@2
  to:render_moving::@7
render_moving::@7: scope:[render_moving]  from render_moving::@1
  [133] (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (byte) 4
  to:render_moving::@3
render_moving::@3: scope:[render_moving]  from render_moving::@5 render_moving::@7
  [134] (byte) render_moving::i#8 ← phi( render_moving::@5/(byte) render_moving::i#2 render_moving::@7/(byte) render_moving::i#1 )
  [135] (byte) render_moving::ypos#1 ← ++ (byte) render_moving::ypos#2
  [136] (byte) render_moving::l#1 ← ++ (byte) render_moving::l#4
  [137] if((byte) render_moving::l#1!=(byte) 4) goto render_moving::@1
  to:render_moving::@return
render_moving::@return: scope:[render_moving]  from render_moving::@3
  [138] return 
  to:@return
render_moving::@2: scope:[render_moving]  from render_moving::@1
  [139] (byte~) render_moving::$1 ← (byte) render_screen_render#33 + (byte) render_moving::ypos#2
  [140] (byte~) render_moving::$6 ← (byte~) render_moving::$1 << (byte) 1
  [141] (byte*) render_moving::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_moving::$6)
  [142] (byte) render_moving::xpos#0 ← (byte) current_xpos#59
  to:render_moving::@4
render_moving::@4: scope:[render_moving]  from render_moving::@2 render_moving::@5
  [143] (byte) render_moving::c#2 ← phi( render_moving::@2/(byte) 0 render_moving::@5/(byte) render_moving::c#1 )
  [143] (byte) render_moving::xpos#2 ← phi( render_moving::@2/(byte) render_moving::xpos#0 render_moving::@5/(byte) render_moving::xpos#1 )
  [143] (byte) render_moving::i#4 ← phi( render_moving::@2/(byte) render_moving::i#3 render_moving::@5/(byte) render_moving::i#2 )
  [144] (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_moving::i#4)
  [145] (byte) render_moving::i#2 ← ++ (byte) render_moving::i#4
  [146] if((byte) render_moving::current_cell#0==(byte) 0) goto render_moving::@5
  to:render_moving::@6
render_moving::@6: scope:[render_moving]  from render_moving::@4
  [147] *((byte*) render_moving::screen_line#0 + (byte) render_moving::xpos#2) ← (byte) current_piece_char#68
  to:render_moving::@5
render_moving::@5: scope:[render_moving]  from render_moving::@4 render_moving::@6
  [148] (byte) render_moving::xpos#1 ← ++ (byte) render_moving::xpos#2
  [149] (byte) render_moving::c#1 ← ++ (byte) render_moving::c#2
  [150] if((byte) render_moving::c#1!=(byte) 4) goto render_moving::@4
  to:render_moving::@3

(void()) render_playfield()
render_playfield: scope:[render_playfield]  from main::@14 main::@7
  [151] (byte) render_screen_render#22 ← phi( main::@14/(byte) $20 main::@7/(byte) render_screen_render#64 )
  to:render_playfield::@1
render_playfield::@1: scope:[render_playfield]  from render_playfield render_playfield::@3
  [152] (byte) render_playfield::i#3 ← phi( render_playfield/(const nomodify byte) PLAYFIELD_COLS*(byte) 2 render_playfield::@3/(byte) render_playfield::i#1 )
  [152] (byte) render_playfield::l#2 ← phi( render_playfield/(byte) 2 render_playfield::@3/(byte) render_playfield::l#1 )
  [153] (byte~) render_playfield::$0 ← (byte) render_screen_render#22 + (byte) render_playfield::l#2
  [154] (byte~) render_playfield::$3 ← (byte~) render_playfield::$0 << (byte) 1
  [155] (byte*) render_playfield::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_playfield::$3)
  to:render_playfield::@2
render_playfield::@2: scope:[render_playfield]  from render_playfield::@1 render_playfield::@2
  [156] (byte) render_playfield::c#2 ← phi( render_playfield::@1/(byte) 0 render_playfield::@2/(byte) render_playfield::c#1 )
  [156] (byte*) render_playfield::screen_line#2 ← phi( render_playfield::@1/(byte*) render_playfield::screen_line#0 render_playfield::@2/(byte*) render_playfield::screen_line#1 )
  [156] (byte) render_playfield::i#2 ← phi( render_playfield::@1/(byte) render_playfield::i#3 render_playfield::@2/(byte) render_playfield::i#1 )
  [157] *((byte*) render_playfield::screen_line#2) ← *((const byte*) playfield + (byte) render_playfield::i#2)
  [158] (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2
  [159] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2
  [160] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2
  [161] if((byte) render_playfield::c#1!=(const nomodify byte) PLAYFIELD_COLS-(byte) 1+(byte) 1) goto render_playfield::@2
  to:render_playfield::@3
render_playfield::@3: scope:[render_playfield]  from render_playfield::@2
  [162] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2
  [163] if((byte) render_playfield::l#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto render_playfield::@1
  to:render_playfield::@return
render_playfield::@return: scope:[render_playfield]  from render_playfield::@3
  [164] return 
  to:@return

(byte()) play_movement((byte) play_movement::key_event)
play_movement: scope:[play_movement]  from main::@4
  [165] (byte) play_move_down::key_event#0 ← (byte) play_movement::key_event#0
  [166] call play_move_down 
  [167] (byte) play_move_down::return#0 ← (byte) play_move_down::return#3
  to:play_movement::@2
play_movement::@2: scope:[play_movement]  from play_movement
  [168] (byte) play_movement::render#1 ← (byte) play_move_down::return#0
  [169] if((byte) game_over#15==(byte) 0) goto play_movement::@1
  to:play_movement::@return
play_movement::@return: scope:[play_movement]  from play_movement::@2 play_movement::@4
  [170] (byte) current_xpos#19 ← phi( play_movement::@2/(byte) current_xpos#22 play_movement::@4/(byte) current_xpos#26 )
  [170] (byte*) current_piece_gfx#18 ← phi( play_movement::@2/(byte*) current_piece_gfx#20 play_movement::@4/(byte*) current_piece_gfx#21 )
  [170] (byte) current_orientation#17 ← phi( play_movement::@2/(byte) current_orientation#20 play_movement::@4/(byte) current_orientation#25 )
  [170] (byte) play_movement::return#2 ← phi( play_movement::@2/(byte) play_movement::render#1 play_movement::@4/(byte) play_movement::return#0 )
  [171] return 
  to:@return
play_movement::@1: scope:[play_movement]  from play_movement::@2
  [172] (byte) play_move_leftright::key_event#0 ← (byte) play_movement::key_event#0
  [173] call play_move_leftright 
  [174] (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2
  to:play_movement::@3
play_movement::@3: scope:[play_movement]  from play_movement::@1
  [175] (byte~) play_movement::$3 ← (byte) play_move_leftright::return#0
  [176] (byte) play_movement::render#2 ← (byte) play_movement::render#1 + (byte~) play_movement::$3
  [177] (byte) play_move_rotate::key_event#0 ← (byte) play_movement::key_event#0
  [178] call play_move_rotate 
  [179] (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2
  to:play_movement::@4
play_movement::@4: scope:[play_movement]  from play_movement::@3
  [180] (byte~) play_movement::$4 ← (byte) play_move_rotate::return#0
  [181] (byte) play_movement::return#0 ← (byte) play_movement::render#2 + (byte~) play_movement::$4
  to:play_movement::@return

(byte()) play_move_rotate((byte) play_move_rotate::key_event)
play_move_rotate: scope:[play_move_rotate]  from play_movement::@3
  [182] if((byte) play_move_rotate::key_event#0==(const nomodify byte) KEY_Z) goto play_move_rotate::@1
  to:play_move_rotate::@4
play_move_rotate::@4: scope:[play_move_rotate]  from play_move_rotate
  [183] if((byte) play_move_rotate::key_event#0==(const nomodify byte) KEY_X) goto play_move_rotate::@2
  to:play_move_rotate::@return
play_move_rotate::@return: scope:[play_move_rotate]  from play_move_rotate::@4 play_move_rotate::@5 play_move_rotate::@6
  [184] (byte*) current_piece_gfx#21 ← phi( play_move_rotate::@6/(byte*) current_piece_gfx#20 play_move_rotate::@4/(byte*) current_piece_gfx#20 play_move_rotate::@5/(byte*) current_piece_gfx#7 )
  [184] (byte) current_orientation#25 ← phi( play_move_rotate::@6/(byte) current_orientation#20 play_move_rotate::@4/(byte) current_orientation#20 play_move_rotate::@5/(byte) current_orientation#7 )
  [184] (byte) play_move_rotate::return#2 ← phi( play_move_rotate::@6/(byte) 0 play_move_rotate::@4/(byte) 0 play_move_rotate::@5/(byte) 1 )
  [185] return 
  to:@return
play_move_rotate::@2: scope:[play_move_rotate]  from play_move_rotate::@4
  [186] (byte~) play_move_rotate::$5 ← (byte) current_orientation#20 + (byte) $10
  [187] (byte) play_move_rotate::orientation#2 ← (byte~) play_move_rotate::$5 & (byte) $3f
  to:play_move_rotate::@3
play_move_rotate::@3: scope:[play_move_rotate]  from play_move_rotate::@1 play_move_rotate::@2
  [188] (byte) play_move_rotate::orientation#3 ← phi( play_move_rotate::@1/(byte) play_move_rotate::orientation#1 play_move_rotate::@2/(byte) play_move_rotate::orientation#2 )
  [189] (byte) play_collision::xpos#3 ← (byte) current_xpos#26
  [190] (byte) play_collision::ypos#3 ← (byte) current_ypos#19
  [191] (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3
  [192] (byte*) current_piece#99 ← (byte*) current_piece#15
  [193] call play_collision 
  [194] (byte) play_collision::return#14 ← (byte) play_collision::return#15
  to:play_move_rotate::@6
play_move_rotate::@6: scope:[play_move_rotate]  from play_move_rotate::@3
  [195] (byte~) play_move_rotate::$2 ← (byte) play_collision::return#14
  [196] if((byte~) play_move_rotate::$2!=(const nomodify byte) COLLISION_NONE) goto play_move_rotate::@return
  to:play_move_rotate::@5
play_move_rotate::@5: scope:[play_move_rotate]  from play_move_rotate::@6
  [197] (byte) current_orientation#7 ← (byte) play_move_rotate::orientation#3
  [198] (byte*) current_piece_gfx#7 ← (byte*) current_piece#15 + (byte) current_orientation#7
  to:play_move_rotate::@return
play_move_rotate::@1: scope:[play_move_rotate]  from play_move_rotate
  [199] (byte~) play_move_rotate::$7 ← (byte) current_orientation#20 - (byte) $10
  [200] (byte) play_move_rotate::orientation#1 ← (byte~) play_move_rotate::$7 & (byte) $3f
  to:play_move_rotate::@3

(byte()) play_collision((byte) play_collision::xpos , (byte) play_collision::ypos , (byte) play_collision::orientation)
play_collision: scope:[play_collision]  from play_move_down::@8 play_move_leftright::@1 play_move_leftright::@3 play_move_rotate::@3 play_spawn_current
  [201] (byte) play_collision::xpos#6 ← phi( play_move_down::@8/(byte) play_collision::xpos#0 play_move_leftright::@1/(byte) play_collision::xpos#1 play_move_leftright::@3/(byte) play_collision::xpos#2 play_move_rotate::@3/(byte) play_collision::xpos#3 play_spawn_current/(byte) play_collision::xpos#4 )
  [201] (byte) play_collision::yp#0 ← phi( play_move_down::@8/(byte) play_collision::ypos#0 play_move_leftright::@1/(byte) play_collision::ypos#1 play_move_leftright::@3/(byte) play_collision::ypos#2 play_move_rotate::@3/(byte) play_collision::ypos#3 play_spawn_current/(byte) play_collision::ypos#4 )
  [201] (byte) play_collision::orientation#5 ← phi( play_move_down::@8/(byte) play_collision::orientation#0 play_move_leftright::@1/(byte) play_collision::orientation#1 play_move_leftright::@3/(byte) play_collision::orientation#2 play_move_rotate::@3/(byte) play_collision::orientation#3 play_spawn_current/(byte) 0 )
  [201] (byte*) current_piece#17 ← phi( play_move_down::@8/(byte*) current_piece#96 play_move_leftright::@1/(byte*) current_piece#97 play_move_leftright::@3/(byte*) current_piece#98 play_move_rotate::@3/(byte*) current_piece#99 play_spawn_current/(byte*) current_piece#100 )
  [202] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#17 + (byte) play_collision::orientation#5
  to:play_collision::@1
play_collision::@1: scope:[play_collision]  from play_collision play_collision::@9
  [203] (byte) play_collision::l#6 ← phi( play_collision/(byte) 0 play_collision::@9/(byte) play_collision::l#1 )
  [203] (byte) play_collision::i#3 ← phi( play_collision/(byte) 0 play_collision::@9/(byte) play_collision::i#10 )
  [203] (byte) play_collision::yp#2 ← phi( play_collision/(byte) play_collision::yp#0 play_collision::@9/(byte) play_collision::yp#1 )
  [204] (byte~) play_collision::$14 ← (byte) play_collision::yp#2 << (byte) 1
  [205] (byte*) play_collision::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_collision::$14)
  [206] (byte) play_collision::xp#8 ← (byte) play_collision::xpos#6
  to:play_collision::@2
play_collision::@2: scope:[play_collision]  from play_collision::@1 play_collision::@10
  [207] (byte) play_collision::c#2 ← phi( play_collision::@1/(byte) 0 play_collision::@10/(byte) play_collision::c#1 )
  [207] (byte) play_collision::xp#2 ← phi( play_collision::@1/(byte) play_collision::xp#8 play_collision::@10/(byte) play_collision::xp#1 )
  [207] (byte) play_collision::i#2 ← phi( play_collision::@1/(byte) play_collision::i#3 play_collision::@10/(byte) play_collision::i#12 )
  [208] (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2
  [209] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte) 0) goto play_collision::@3
  to:play_collision::@7
play_collision::@7: scope:[play_collision]  from play_collision::@2
  [210] if((byte) play_collision::yp#2<(const nomodify byte) PLAYFIELD_LINES) goto play_collision::@4
  to:play_collision::@return
play_collision::@4: scope:[play_collision]  from play_collision::@7
  [211] (byte~) play_collision::$5 ← (byte) play_collision::xp#2 & (byte) $80
  [212] if((byte~) play_collision::$5==(byte) 0) goto play_collision::@5
  to:play_collision::@return
play_collision::@5: scope:[play_collision]  from play_collision::@4
  [213] if((byte) play_collision::xp#2<(const nomodify byte) PLAYFIELD_COLS) goto play_collision::@6
  to:play_collision::@return
play_collision::@6: scope:[play_collision]  from play_collision::@5
  [214] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::xp#2)==(byte) 0) goto play_collision::@3
  to:play_collision::@return
play_collision::@return: scope:[play_collision]  from play_collision::@4 play_collision::@5 play_collision::@6 play_collision::@7 play_collision::@8
  [215] (byte) play_collision::return#15 ← phi( play_collision::@7/(const nomodify byte) COLLISION_BOTTOM play_collision::@8/(const nomodify byte) COLLISION_NONE play_collision::@4/(const nomodify byte) COLLISION_LEFT play_collision::@5/(const nomodify byte) COLLISION_RIGHT play_collision::@6/(const nomodify byte) COLLISION_PLAYFIELD )
  [216] return 
  to:@return
play_collision::@3: scope:[play_collision]  from play_collision::@2 play_collision::@6
  [217] (byte) play_collision::xp#1 ← ++ (byte) play_collision::xp#2
  [218] (byte) play_collision::c#1 ← ++ (byte) play_collision::c#2
  [219] if((byte) play_collision::c#1!=(byte) 4) goto play_collision::@10
  to:play_collision::@8
play_collision::@8: scope:[play_collision]  from play_collision::@3
  [220] (byte) play_collision::yp#1 ← ++ (byte) play_collision::yp#2
  [221] (byte) play_collision::l#1 ← ++ (byte) play_collision::l#6
  [222] if((byte) play_collision::l#1!=(byte) 4) goto play_collision::@9
  to:play_collision::@return
play_collision::@9: scope:[play_collision]  from play_collision::@8
  [223] (byte) play_collision::i#10 ← (byte) play_collision::i#1
  to:play_collision::@1
play_collision::@10: scope:[play_collision]  from play_collision::@3
  [224] (byte) play_collision::i#12 ← (byte) play_collision::i#1
  to:play_collision::@2

(byte()) play_move_leftright((byte) play_move_leftright::key_event)
play_move_leftright: scope:[play_move_leftright]  from play_movement::@1
  [225] if((byte) play_move_leftright::key_event#0==(const nomodify byte) KEY_COMMA) goto play_move_leftright::@1
  to:play_move_leftright::@2
play_move_leftright::@2: scope:[play_move_leftright]  from play_move_leftright
  [226] if((byte) play_move_leftright::key_event#0!=(const nomodify byte) KEY_DOT) goto play_move_leftright::@return
  to:play_move_leftright::@3
play_move_leftright::@3: scope:[play_move_leftright]  from play_move_leftright::@2
  [227] (byte) play_collision::xpos#2 ← (byte) current_xpos#22 + (byte) 1
  [228] (byte) play_collision::ypos#2 ← (byte) current_ypos#19
  [229] (byte) play_collision::orientation#2 ← (byte) current_orientation#20
  [230] (byte*) current_piece#98 ← (byte*) current_piece#15
  [231] call play_collision 
  [232] (byte) play_collision::return#13 ← (byte) play_collision::return#15
  to:play_move_leftright::@7
play_move_leftright::@7: scope:[play_move_leftright]  from play_move_leftright::@3
  [233] (byte~) play_move_leftright::$4 ← (byte) play_collision::return#13
  [234] if((byte~) play_move_leftright::$4!=(const nomodify byte) COLLISION_NONE) goto play_move_leftright::@return
  to:play_move_leftright::@4
play_move_leftright::@4: scope:[play_move_leftright]  from play_move_leftright::@7
  [235] (byte) current_xpos#6 ← ++ (byte) current_xpos#22
  to:play_move_leftright::@return
play_move_leftright::@return: scope:[play_move_leftright]  from play_move_leftright::@2 play_move_leftright::@4 play_move_leftright::@5 play_move_leftright::@6 play_move_leftright::@7
  [236] (byte) current_xpos#26 ← phi( play_move_leftright::@2/(byte) current_xpos#22 play_move_leftright::@4/(byte) current_xpos#6 play_move_leftright::@5/(byte) current_xpos#8 play_move_leftright::@6/(byte) current_xpos#22 play_move_leftright::@7/(byte) current_xpos#22 )
  [236] (byte) play_move_leftright::return#2 ← phi( play_move_leftright::@2/(byte) 0 play_move_leftright::@4/(byte) 1 play_move_leftright::@5/(byte) 1 play_move_leftright::@6/(byte) 0 play_move_leftright::@7/(byte) 0 )
  [237] return 
  to:@return
play_move_leftright::@1: scope:[play_move_leftright]  from play_move_leftright
  [238] (byte) play_collision::xpos#1 ← (byte) current_xpos#22 - (byte) 1
  [239] (byte) play_collision::ypos#1 ← (byte) current_ypos#19
  [240] (byte) play_collision::orientation#1 ← (byte) current_orientation#20
  [241] (byte*) current_piece#97 ← (byte*) current_piece#15
  [242] call play_collision 
  [243] (byte) play_collision::return#1 ← (byte) play_collision::return#15
  to:play_move_leftright::@6
play_move_leftright::@6: scope:[play_move_leftright]  from play_move_leftright::@1
  [244] (byte~) play_move_leftright::$8 ← (byte) play_collision::return#1
  [245] if((byte~) play_move_leftright::$8!=(const nomodify byte) COLLISION_NONE) goto play_move_leftright::@return
  to:play_move_leftright::@5
play_move_leftright::@5: scope:[play_move_leftright]  from play_move_leftright::@6
  [246] (byte) current_xpos#8 ← -- (byte) current_xpos#22
  to:play_move_leftright::@return

(byte()) play_move_down((byte) play_move_down::key_event)
play_move_down: scope:[play_move_down]  from play_movement
  [247] (byte) current_movedown_counter#12 ← ++ (byte) current_movedown_counter#16
  [248] if((byte) play_move_down::key_event#0!=(const nomodify byte) KEY_SPACE) goto play_move_down::@1
  to:play_move_down::@4
play_move_down::@4: scope:[play_move_down]  from play_move_down
  [249] phi()
  to:play_move_down::@1
play_move_down::@1: scope:[play_move_down]  from play_move_down play_move_down::@4
  [250] (byte) play_move_down::movedown#10 ← phi( play_move_down/(byte) 0 play_move_down::@4/(byte) 1 )
  [251] call keyboard_event_pressed 
  [252] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11
  to:play_move_down::@12
play_move_down::@12: scope:[play_move_down]  from play_move_down::@1
  [253] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
  [254] if((byte~) play_move_down::$2==(byte) 0) goto play_move_down::@2
  to:play_move_down::@5
play_move_down::@5: scope:[play_move_down]  from play_move_down::@12
  [255] if((byte) current_movedown_counter#12<(const nomodify byte) current_movedown_fast) goto play_move_down::@2
  to:play_move_down::@6
play_move_down::@6: scope:[play_move_down]  from play_move_down::@5
  [256] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10
  to:play_move_down::@2
play_move_down::@2: scope:[play_move_down]  from play_move_down::@12 play_move_down::@5 play_move_down::@6
  [257] (byte) play_move_down::movedown#7 ← phi( play_move_down::@12/(byte) play_move_down::movedown#10 play_move_down::@5/(byte) play_move_down::movedown#10 play_move_down::@6/(byte) play_move_down::movedown#2 )
  [258] if((byte) current_movedown_counter#12<(byte) current_movedown_slow#14) goto play_move_down::@3
  to:play_move_down::@7
play_move_down::@7: scope:[play_move_down]  from play_move_down::@2
  [259] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7
  to:play_move_down::@3
play_move_down::@3: scope:[play_move_down]  from play_move_down::@2 play_move_down::@7
  [260] (byte) play_move_down::movedown#6 ← phi( play_move_down::@2/(byte) play_move_down::movedown#7 play_move_down::@7/(byte) play_move_down::movedown#3 )
  [261] if((byte) play_move_down::movedown#6==(byte) 0) goto play_move_down::@return
  to:play_move_down::@8
play_move_down::@8: scope:[play_move_down]  from play_move_down::@3
  [262] (byte) play_collision::ypos#0 ← (byte) current_ypos#11 + (byte) 1
  [263] (byte) play_collision::xpos#0 ← (byte) current_xpos#14
  [264] (byte) play_collision::orientation#0 ← (byte) current_orientation#13
  [265] (byte*) current_piece#96 ← (byte*) current_piece#10
  [266] call play_collision 
  [267] (byte) play_collision::return#0 ← (byte) play_collision::return#15
  to:play_move_down::@13
play_move_down::@13: scope:[play_move_down]  from play_move_down::@8
  [268] (byte~) play_move_down::$12 ← (byte) play_collision::return#0
  [269] if((byte~) play_move_down::$12==(const nomodify byte) COLLISION_NONE) goto play_move_down::@10
  to:play_move_down::@9
play_move_down::@9: scope:[play_move_down]  from play_move_down::@13
  [270] phi()
  [271] call play_lock_current 
  to:play_move_down::@14
play_move_down::@14: scope:[play_move_down]  from play_move_down::@9
  [272] phi()
  [273] call play_remove_lines 
  [274] (byte) play_remove_lines::return#0 ← (byte) play_remove_lines::removed#7
  to:play_move_down::@15
play_move_down::@15: scope:[play_move_down]  from play_move_down::@14
  [275] (byte) play_move_down::removed#0 ← (byte) play_remove_lines::return#0
  [276] (byte) play_update_score::removed#0 ← (byte) play_move_down::removed#0
  [277] call play_update_score 
  to:play_move_down::@16
play_move_down::@16: scope:[play_move_down]  from play_move_down::@15
  [278] phi()
  [279] call play_spawn_current 
  to:play_move_down::@17
play_move_down::@17: scope:[play_move_down]  from play_move_down::@16
  [280] (byte*) current_piece#93 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7)
  [281] (byte*) current_piece_gfx#117 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7)
  to:play_move_down::@11
play_move_down::@11: scope:[play_move_down]  from play_move_down::@10 play_move_down::@17
  [282] (byte) next_piece_idx#30 ← phi( play_move_down::@10/(byte) next_piece_idx#10 play_move_down::@17/(byte) play_spawn_current::piece_idx#2 )
  [282] (byte) game_over#27 ← phi( play_move_down::@10/(byte) game_over#10 play_move_down::@17/(byte) game_over#52 )
  [282] (byte) current_xpos#43 ← phi( play_move_down::@10/(byte) current_xpos#14 play_move_down::@17/(byte) current_xpos#100 )
  [282] (byte*) current_piece_gfx#35 ← phi( play_move_down::@10/(byte*) current_piece_gfx#13 play_move_down::@17/(byte*) current_piece_gfx#117 )
  [282] (byte) current_orientation#37 ← phi( play_move_down::@10/(byte) current_orientation#13 play_move_down::@17/(byte) 0 )
  [282] (byte) current_piece_char#29 ← phi( play_move_down::@10/(byte) current_piece_char#10 play_move_down::@17/(byte) current_piece_char#5 )
  [282] (byte*) current_piece#28 ← phi( play_move_down::@10/(byte*) current_piece#10 play_move_down::@17/(byte*) current_piece#93 )
  [282] (byte) level_bcd#31 ← phi( play_move_down::@10/(byte) level_bcd#11 play_move_down::@17/(byte) level_bcd#19 )
  [282] (byte) current_movedown_slow#37 ← phi( play_move_down::@10/(byte) current_movedown_slow#14 play_move_down::@17/(byte) current_movedown_slow#23 )
  [282] (byte) level#33 ← phi( play_move_down::@10/(byte) level#10 play_move_down::@17/(byte) level#19 )
  [282] (word) lines_bcd#26 ← phi( play_move_down::@10/(word) lines_bcd#19 play_move_down::@17/(word) lines_bcd#17 )
  [282] (byte) current_ypos#38 ← phi( play_move_down::@10/(byte) current_ypos#3 play_move_down::@17/(byte) current_ypos#6 )
  to:play_move_down::@return
play_move_down::@return: scope:[play_move_down]  from play_move_down::@11 play_move_down::@3
  [283] (byte) next_piece_idx#16 ← phi( play_move_down::@11/(byte) next_piece_idx#30 play_move_down::@3/(byte) next_piece_idx#10 )
  [283] (byte) game_over#15 ← phi( play_move_down::@11/(byte) game_over#27 play_move_down::@3/(byte) game_over#10 )
  [283] (byte) current_xpos#22 ← phi( play_move_down::@11/(byte) current_xpos#43 play_move_down::@3/(byte) current_xpos#14 )
  [283] (byte*) current_piece_gfx#20 ← phi( play_move_down::@11/(byte*) current_piece_gfx#35 play_move_down::@3/(byte*) current_piece_gfx#13 )
  [283] (byte) current_orientation#20 ← phi( play_move_down::@11/(byte) current_orientation#37 play_move_down::@3/(byte) current_orientation#13 )
  [283] (byte) current_piece_char#16 ← phi( play_move_down::@11/(byte) current_piece_char#29 play_move_down::@3/(byte) current_piece_char#10 )
  [283] (byte*) current_piece#15 ← phi( play_move_down::@11/(byte*) current_piece#28 play_move_down::@3/(byte*) current_piece#10 )
  [283] (byte) level_bcd#17 ← phi( play_move_down::@11/(byte) level_bcd#31 play_move_down::@3/(byte) level_bcd#11 )
  [283] (byte) current_movedown_slow#21 ← phi( play_move_down::@11/(byte) current_movedown_slow#37 play_move_down::@3/(byte) current_movedown_slow#14 )
  [283] (byte) level#17 ← phi( play_move_down::@11/(byte) level#33 play_move_down::@3/(byte) level#10 )
  [283] (word) lines_bcd#15 ← phi( play_move_down::@11/(word) lines_bcd#26 play_move_down::@3/(word) lines_bcd#19 )
  [283] (byte) current_ypos#19 ← phi( play_move_down::@11/(byte) current_ypos#38 play_move_down::@3/(byte) current_ypos#11 )
  [283] (byte) current_movedown_counter#14 ← phi( play_move_down::@11/(byte) 0 play_move_down::@3/(byte) current_movedown_counter#12 )
  [283] (byte) play_move_down::return#3 ← phi( play_move_down::@11/(byte) 1 play_move_down::@3/(byte) 0 )
  [284] return 
  to:@return
play_move_down::@10: scope:[play_move_down]  from play_move_down::@13
  [285] (byte) current_ypos#3 ← ++ (byte) current_ypos#11
  to:play_move_down::@11

(void()) play_spawn_current()
play_spawn_current: scope:[play_spawn_current]  from main::@12 main::@13 play_move_down::@16
  [286] (byte) game_over#65 ← phi( main::@12/(byte) 0 main::@13/(byte) game_over#52 play_move_down::@16/(byte) game_over#10 )
  [286] (byte) next_piece_idx#17 ← phi( main::@12/(byte) 0 main::@13/(byte) play_spawn_current::piece_idx#2 play_move_down::@16/(byte) next_piece_idx#10 )
  [287] (byte) play_spawn_current::current_piece_idx#0 ← (byte) next_piece_idx#17
  [288] (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 << (byte) 1
  [289] (byte) current_piece_char#5 ← *((const byte*) PIECES_CHARS + (byte) play_spawn_current::current_piece_idx#0)
  [290] (byte) current_xpos#100 ← *((const byte*) PIECES_START_X + (byte) play_spawn_current::current_piece_idx#0)
  [291] (byte) current_ypos#6 ← *((const byte*) PIECES_START_Y + (byte) play_spawn_current::current_piece_idx#0)
  [292] (byte) play_collision::xpos#4 ← (byte) current_xpos#100
  [293] (byte) play_collision::ypos#4 ← (byte) current_ypos#6
  [294] (byte*) current_piece#100 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7)
  [295] call play_collision 
  [296] (byte) play_collision::return#10 ← (byte) play_collision::return#15
  to:play_spawn_current::@4
play_spawn_current::@4: scope:[play_spawn_current]  from play_spawn_current
  [297] (byte~) play_spawn_current::$1 ← (byte) play_collision::return#10
  [298] if((byte~) play_spawn_current::$1!=(const nomodify byte) COLLISION_PLAYFIELD) goto play_spawn_current::@5
  to:play_spawn_current::@1
play_spawn_current::@5: scope:[play_spawn_current]  from play_spawn_current::@4
  [299] phi()
  to:play_spawn_current::@1
play_spawn_current::@1: scope:[play_spawn_current]  from play_spawn_current::@4 play_spawn_current::@5
  [300] (byte) game_over#52 ← phi( play_spawn_current::@4/(byte) 1 play_spawn_current::@5/(byte) game_over#65 )
  to:play_spawn_current::@2
play_spawn_current::@2: scope:[play_spawn_current]  from play_spawn_current::@1 play_spawn_current::@3
  [301] (byte) play_spawn_current::piece_idx#2 ← phi( play_spawn_current::@1/(byte) 7 play_spawn_current::@3/(byte) play_spawn_current::piece_idx#1 )
  [302] if((byte) play_spawn_current::piece_idx#2==(byte) 7) goto play_spawn_current::sid_rnd1
  to:play_spawn_current::@return
play_spawn_current::@return: scope:[play_spawn_current]  from play_spawn_current::@2
  [303] return 
  to:@return
play_spawn_current::sid_rnd1: scope:[play_spawn_current]  from play_spawn_current::@2
  [304] (byte) play_spawn_current::sid_rnd1_return#0 ← *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC)
  to:play_spawn_current::@3
play_spawn_current::@3: scope:[play_spawn_current]  from play_spawn_current::sid_rnd1
  [305] (byte) play_spawn_current::piece_idx#1 ← (byte) play_spawn_current::sid_rnd1_return#0 & (byte) 7
  to:play_spawn_current::@2

(void()) play_update_score((byte) play_update_score::removed)
play_update_score: scope:[play_update_score]  from play_move_down::@15
  [306] if((byte) play_update_score::removed#0==(byte) 0) goto play_update_score::@return
  to:play_update_score::@1
play_update_score::@1: scope:[play_update_score]  from play_update_score
  [307] (byte~) play_update_score::$2 ← < (word) lines_bcd#19
  [308] (byte) play_update_score::lines_before#0 ← (byte~) play_update_score::$2 & (byte) $f0
  [309] (byte~) play_update_score::$9 ← (byte) play_update_score::removed#0 << (byte) 2
  [310] (dword) play_update_score::add_bcd#0 ← *((const dword*) score_add_bcd + (byte~) play_update_score::$9)
  asm { sed  }
  [312] (word) lines_bcd#29 ← (word) lines_bcd#19 + (byte) play_update_score::removed#0
  [313] (volatile dword) score_bcd ← (volatile dword) score_bcd + (dword) play_update_score::add_bcd#0
  asm { cld  }
  [315] (byte~) play_update_score::$4 ← < (word) lines_bcd#29
  [316] (byte) play_update_score::lines_after#0 ← (byte~) play_update_score::$4 & (byte) $f0
  [317] if((byte) play_update_score::lines_before#0==(byte) play_update_score::lines_after#0) goto play_update_score::@return
  to:play_update_score::@2
play_update_score::@2: scope:[play_update_score]  from play_update_score::@1
  [318] phi()
  [319] call play_increase_level 
  to:play_update_score::@return
play_update_score::@return: scope:[play_update_score]  from play_update_score play_update_score::@1 play_update_score::@2
  [320] (byte) level_bcd#19 ← phi( play_update_score/(byte) level_bcd#11 play_update_score::@1/(byte) level_bcd#11 play_update_score::@2/(byte) level_bcd#62 )
  [320] (byte) current_movedown_slow#23 ← phi( play_update_score/(byte) current_movedown_slow#14 play_update_score::@1/(byte) current_movedown_slow#14 play_update_score::@2/(byte) current_movedown_slow#65 )
  [320] (byte) level#19 ← phi( play_update_score/(byte) level#10 play_update_score::@1/(byte) level#10 play_update_score::@2/(byte) level#21 )
  [320] (word) lines_bcd#17 ← phi( play_update_score/(word) lines_bcd#19 play_update_score::@1/(word) lines_bcd#29 play_update_score::@2/(word) lines_bcd#29 )
  [321] return 
  to:@return

(void()) play_increase_level()
play_increase_level: scope:[play_increase_level]  from play_update_score::@2
  [322] (byte) level#21 ← ++ (byte) level#10
  [323] if((byte) level#21>=(byte) $1d+(byte) 1) goto play_increase_level::@1
  to:play_increase_level::@3
play_increase_level::@3: scope:[play_increase_level]  from play_increase_level
  [324] (byte) current_movedown_slow#10 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS + (byte) level#21)
  to:play_increase_level::@1
play_increase_level::@1: scope:[play_increase_level]  from play_increase_level play_increase_level::@3
  [325] (byte) current_movedown_slow#65 ← phi( play_increase_level/(byte) 1 play_increase_level::@3/(byte) current_movedown_slow#10 )
  [326] (byte) level_bcd#21 ← ++ (byte) level_bcd#11
  [327] (byte~) play_increase_level::$1 ← (byte) level_bcd#21 & (byte) $f
  [328] if((byte~) play_increase_level::$1!=(byte) $a) goto play_increase_level::@2
  to:play_increase_level::@4
play_increase_level::@4: scope:[play_increase_level]  from play_increase_level::@1
  [329] (byte) level_bcd#8 ← (byte) level_bcd#21 + (byte) 6
  to:play_increase_level::@2
play_increase_level::@2: scope:[play_increase_level]  from play_increase_level::@1 play_increase_level::@4
  [330] (byte) level_bcd#62 ← phi( play_increase_level::@1/(byte) level_bcd#21 play_increase_level::@4/(byte) level_bcd#8 )
  asm { sed  }
  to:play_increase_level::@5
play_increase_level::@5: scope:[play_increase_level]  from play_increase_level::@2 play_increase_level::@5
  [332] (byte) play_increase_level::b#2 ← phi( play_increase_level::@2/(byte) 0 play_increase_level::@5/(byte) play_increase_level::b#1 )
  [333] (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 << (byte) 2
  [334] *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) ← *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) + *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_increase_level::$5)
  [335] (byte) play_increase_level::b#1 ← ++ (byte) play_increase_level::b#2
  [336] if((byte) play_increase_level::b#1!=(byte) 5) goto play_increase_level::@5
  to:play_increase_level::@6
play_increase_level::@6: scope:[play_increase_level]  from play_increase_level::@5
  asm { cld  }
  to:play_increase_level::@return
play_increase_level::@return: scope:[play_increase_level]  from play_increase_level::@6
  [338] return 
  to:@return

(byte()) play_remove_lines()
play_remove_lines: scope:[play_remove_lines]  from play_move_down::@14
  [339] phi()
  to:play_remove_lines::@1
play_remove_lines::@1: scope:[play_remove_lines]  from play_remove_lines play_remove_lines::@6
  [340] (byte) play_remove_lines::removed#11 ← phi( play_remove_lines/(byte) 0 play_remove_lines::@6/(byte) play_remove_lines::removed#7 )
  [340] (byte) play_remove_lines::y#8 ← phi( play_remove_lines/(byte) 0 play_remove_lines::@6/(byte) play_remove_lines::y#1 )
  [340] (byte) play_remove_lines::w#12 ← phi( play_remove_lines/(const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(byte) 1 play_remove_lines::@6/(byte) play_remove_lines::w#11 )
  [340] (byte) play_remove_lines::r#3 ← phi( play_remove_lines/(const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(byte) 1 play_remove_lines::@6/(byte) play_remove_lines::r#1 )
  to:play_remove_lines::@2
play_remove_lines::@2: scope:[play_remove_lines]  from play_remove_lines::@1 play_remove_lines::@3
  [341] (byte) play_remove_lines::full#4 ← phi( play_remove_lines::@1/(byte) 1 play_remove_lines::@3/(byte) play_remove_lines::full#2 )
  [341] (byte) play_remove_lines::x#2 ← phi( play_remove_lines::@1/(byte) 0 play_remove_lines::@3/(byte) play_remove_lines::x#1 )
  [341] (byte) play_remove_lines::w#4 ← phi( play_remove_lines::@1/(byte) play_remove_lines::w#12 play_remove_lines::@3/(byte) play_remove_lines::w#1 )
  [341] (byte) play_remove_lines::r#2 ← phi( play_remove_lines::@1/(byte) play_remove_lines::r#3 play_remove_lines::@3/(byte) play_remove_lines::r#1 )
  [342] (byte) play_remove_lines::c#0 ← *((const byte*) playfield + (byte) play_remove_lines::r#2)
  [343] (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2
  [344] if((byte) play_remove_lines::c#0!=(byte) 0) goto play_remove_lines::@9
  to:play_remove_lines::@3
play_remove_lines::@9: scope:[play_remove_lines]  from play_remove_lines::@2
  [345] phi()
  to:play_remove_lines::@3
play_remove_lines::@3: scope:[play_remove_lines]  from play_remove_lines::@2 play_remove_lines::@9
  [346] (byte) play_remove_lines::full#2 ← phi( play_remove_lines::@9/(byte) play_remove_lines::full#4 play_remove_lines::@2/(byte) 0 )
  [347] *((const byte*) playfield + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#0
  [348] (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4
  [349] (byte) play_remove_lines::x#1 ← ++ (byte) play_remove_lines::x#2
  [350] if((byte) play_remove_lines::x#1!=(const nomodify byte) PLAYFIELD_COLS-(byte) 1+(byte) 1) goto play_remove_lines::@2
  to:play_remove_lines::@4
play_remove_lines::@4: scope:[play_remove_lines]  from play_remove_lines::@3
  [351] if((byte) play_remove_lines::full#2!=(byte) 1) goto play_remove_lines::@6
  to:play_remove_lines::@5
play_remove_lines::@5: scope:[play_remove_lines]  from play_remove_lines::@4
  [352] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const nomodify byte) PLAYFIELD_COLS
  [353] (byte) play_remove_lines::removed#1 ← ++ (byte) play_remove_lines::removed#11
  to:play_remove_lines::@6
play_remove_lines::@6: scope:[play_remove_lines]  from play_remove_lines::@4 play_remove_lines::@5
  [354] (byte) play_remove_lines::removed#7 ← phi( play_remove_lines::@4/(byte) play_remove_lines::removed#11 play_remove_lines::@5/(byte) play_remove_lines::removed#1 )
  [354] (byte) play_remove_lines::w#11 ← phi( play_remove_lines::@4/(byte) play_remove_lines::w#1 play_remove_lines::@5/(byte) play_remove_lines::w#2 )
  [355] (byte) play_remove_lines::y#1 ← ++ (byte) play_remove_lines::y#8
  [356] if((byte) play_remove_lines::y#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto play_remove_lines::@1
  to:play_remove_lines::@7
play_remove_lines::@7: scope:[play_remove_lines]  from play_remove_lines::@6 play_remove_lines::@8
  [357] (byte) play_remove_lines::w#6 ← phi( play_remove_lines::@6/(byte) play_remove_lines::w#11 play_remove_lines::@8/(byte) play_remove_lines::w#3 )
  [358] if((byte) play_remove_lines::w#6!=(byte) $ff) goto play_remove_lines::@8
  to:play_remove_lines::@return
play_remove_lines::@return: scope:[play_remove_lines]  from play_remove_lines::@7
  [359] return 
  to:@return
play_remove_lines::@8: scope:[play_remove_lines]  from play_remove_lines::@7
  [360] *((const byte*) playfield + (byte) play_remove_lines::w#6) ← (byte) 0
  [361] (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#6
  to:play_remove_lines::@7

(void()) play_lock_current()
play_lock_current: scope:[play_lock_current]  from play_move_down::@9
  [362] (byte) play_lock_current::yp#0 ← (byte) current_ypos#11
  to:play_lock_current::@1
play_lock_current::@1: scope:[play_lock_current]  from play_lock_current play_lock_current::@6
  [363] (byte) play_lock_current::l#6 ← phi( play_lock_current/(byte) 0 play_lock_current::@6/(byte) play_lock_current::l#1 )
  [363] (byte) play_lock_current::i#3 ← phi( play_lock_current/(byte) 0 play_lock_current::@6/(byte) play_lock_current::i#7 )
  [363] (byte) play_lock_current::yp#2 ← phi( play_lock_current/(byte) play_lock_current::yp#0 play_lock_current::@6/(byte) play_lock_current::yp#1 )
  [364] (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 << (byte) 1
  [365] (byte*) play_lock_current::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_lock_current::$4)
  [366] (byte) play_lock_current::xp#0 ← (byte) current_xpos#14
  to:play_lock_current::@2
play_lock_current::@2: scope:[play_lock_current]  from play_lock_current::@1 play_lock_current::@7
  [367] (byte) play_lock_current::c#2 ← phi( play_lock_current::@1/(byte) 0 play_lock_current::@7/(byte) play_lock_current::c#1 )
  [367] (byte) play_lock_current::xp#2 ← phi( play_lock_current::@1/(byte) play_lock_current::xp#0 play_lock_current::@7/(byte) play_lock_current::xp#1 )
  [367] (byte) play_lock_current::i#2 ← phi( play_lock_current::@1/(byte) play_lock_current::i#3 play_lock_current::@7/(byte) play_lock_current::i#9 )
  [368] (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2
  [369] if(*((byte*) current_piece_gfx#13 + (byte) play_lock_current::i#2)==(byte) 0) goto play_lock_current::@3
  to:play_lock_current::@4
play_lock_current::@4: scope:[play_lock_current]  from play_lock_current::@2
  [370] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::xp#2) ← (byte) current_piece_char#10
  to:play_lock_current::@3
play_lock_current::@3: scope:[play_lock_current]  from play_lock_current::@2 play_lock_current::@4
  [371] (byte) play_lock_current::xp#1 ← ++ (byte) play_lock_current::xp#2
  [372] (byte) play_lock_current::c#1 ← ++ (byte) play_lock_current::c#2
  [373] if((byte) play_lock_current::c#1!=(byte) 4) goto play_lock_current::@7
  to:play_lock_current::@5
play_lock_current::@5: scope:[play_lock_current]  from play_lock_current::@3
  [374] (byte) play_lock_current::yp#1 ← ++ (byte) play_lock_current::yp#2
  [375] (byte) play_lock_current::l#1 ← ++ (byte) play_lock_current::l#6
  [376] if((byte) play_lock_current::l#1!=(byte) 4) goto play_lock_current::@6
  to:play_lock_current::@return
play_lock_current::@return: scope:[play_lock_current]  from play_lock_current::@5
  [377] return 
  to:@return
play_lock_current::@6: scope:[play_lock_current]  from play_lock_current::@5
  [378] (byte) play_lock_current::i#7 ← (byte) play_lock_current::i#1
  to:play_lock_current::@1
play_lock_current::@7: scope:[play_lock_current]  from play_lock_current::@3
  [379] (byte) play_lock_current::i#9 ← (byte) play_lock_current::i#1
  to:play_lock_current::@2

(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@1 keyboard_event_scan::@17 keyboard_event_scan::@2 keyboard_event_scan::@3 play_move_down::@1
  [380] (byte) keyboard_event_pressed::keycode#5 ← phi( keyboard_event_scan::@1/(const nomodify byte) KEY_RSHIFT keyboard_event_scan::@17/(const nomodify byte) KEY_LSHIFT keyboard_event_scan::@2/(const nomodify byte) KEY_CTRL keyboard_event_scan::@3/(const nomodify byte) KEY_COMMODORE play_move_down::@1/(const nomodify byte) KEY_SPACE )
  [381] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte) 3
  [382] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte*) keyboard_scan_values + (byte~) keyboard_event_pressed::$0)
  [383] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte) 7
  [384] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1)
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  [385] return 
  to:@return

(byte()) keyboard_event_get()
keyboard_event_get: scope:[keyboard_event_get]  from main::@19
  [386] if((byte) keyboard_events_size#13==(byte) 0) goto keyboard_event_get::@return
  to:keyboard_event_get::@1
keyboard_event_get::@1: scope:[keyboard_event_get]  from keyboard_event_get
  [387] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13
  [388] (byte) keyboard_event_get::return#1 ← *((const byte*) keyboard_events + (byte) keyboard_events_size#4)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get keyboard_event_get::@1
  [389] (byte) keyboard_events_size#16 ← phi( keyboard_event_get/(byte) keyboard_events_size#13 keyboard_event_get::@1/(byte) keyboard_events_size#4 )
  [389] (byte) keyboard_event_get::return#2 ← phi( keyboard_event_get/(byte) $ff keyboard_event_get::@1/(byte) keyboard_event_get::return#1 )
  [390] return 
  to:@return

(void()) keyboard_event_scan()
keyboard_event_scan: scope:[keyboard_event_scan]  from main::@18
  [391] phi()
  to:keyboard_event_scan::@7
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@8
  [392] (byte) keyboard_events_size#30 ← phi( keyboard_event_scan/(byte) keyboard_events_size#19 keyboard_event_scan::@8/(byte) keyboard_events_size#13 )
  [392] (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte) 0 keyboard_event_scan::@8/(byte) keyboard_event_scan::keycode#13 )
  [392] (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte) 0 keyboard_event_scan::@8/(byte) keyboard_event_scan::row#1 )
  [393] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  [394] call keyboard_matrix_read 
  [395] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_event_scan::@19
keyboard_event_scan::@19: scope:[keyboard_event_scan]  from keyboard_event_scan::@7
  [396] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2
  [397] if((byte) keyboard_event_scan::row_scan#0!=*((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@16
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@19
  [398] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8
  to:keyboard_event_scan::@8
keyboard_event_scan::@8: scope:[keyboard_event_scan]  from keyboard_event_scan::@15 keyboard_event_scan::@16
  [399] (byte) keyboard_events_size#13 ← phi( keyboard_event_scan::@15/(byte) keyboard_events_size#29 keyboard_event_scan::@16/(byte) keyboard_events_size#30 )
  [399] (byte) keyboard_event_scan::keycode#13 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::keycode#14 keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#1 )
  [400] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2
  [401] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7
  to:keyboard_event_scan::@17
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@8
  [402] phi()
  [403] call keyboard_event_pressed 
  [404] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@20
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@17
  [405] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0
  [406] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@18
keyboard_event_scan::@18: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  [407] phi()
  to:keyboard_event_scan::@1
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan::@18 keyboard_event_scan::@20
  [408] phi()
  [409] call keyboard_event_pressed 
  [410] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@21
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  [411] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1
  [412] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2
  to:keyboard_event_scan::@4
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@21
  [413] phi()
  to:keyboard_event_scan::@2
keyboard_event_scan::@2: scope:[keyboard_event_scan]  from keyboard_event_scan::@21 keyboard_event_scan::@4
  [414] phi()
  [415] call keyboard_event_pressed 
  [416] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@22
keyboard_event_scan::@22: scope:[keyboard_event_scan]  from keyboard_event_scan::@2
  [417] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2
  [418] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3
  to:keyboard_event_scan::@5
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@22
  [419] phi()
  to:keyboard_event_scan::@3
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@22 keyboard_event_scan::@5
  [420] phi()
  [421] call keyboard_event_pressed 
  [422] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@23
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  [423] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#10
  [424] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return
  to:keyboard_event_scan::@6
keyboard_event_scan::@6: scope:[keyboard_event_scan]  from keyboard_event_scan::@23
  [425] phi()
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@23 keyboard_event_scan::@6
  [426] return 
  to:@return
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@10 keyboard_event_scan::@19
  [427] (byte) keyboard_events_size#10 ← phi( keyboard_event_scan::@10/(byte) keyboard_events_size#29 keyboard_event_scan::@19/(byte) keyboard_events_size#30 )
  [427] (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::keycode#14 keyboard_event_scan::@19/(byte) keyboard_event_scan::keycode#11 )
  [427] (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::col#1 keyboard_event_scan::@19/(byte) 0 )
  [428] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2)
  [429] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2)
  [430] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@12
keyboard_event_scan::@12: scope:[keyboard_event_scan]  from keyboard_event_scan::@9
  [431] if((byte) keyboard_events_size#10==(byte) 8) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@13
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@12
  [432] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2)
  [433] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@14
keyboard_event_scan::@14: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  [434] *((const byte*) keyboard_events + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10
  [435] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10
  to:keyboard_event_scan::@10
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9
  [436] (byte) keyboard_events_size#29 ← phi( keyboard_event_scan::@9/(byte) keyboard_events_size#10 keyboard_event_scan::@11/(byte) keyboard_events_size#1 keyboard_event_scan::@12/(byte) keyboard_events_size#10 keyboard_event_scan::@14/(byte) keyboard_events_size#2 )
  [437] (byte) keyboard_event_scan::keycode#14 ← ++ (byte) keyboard_event_scan::keycode#10
  [438] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2
  [439] if((byte) keyboard_event_scan::col#1!=(byte) 8) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@15
keyboard_event_scan::@15: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  [440] *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0
  to:keyboard_event_scan::@8
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  [441] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40
  [442] *((const byte*) keyboard_events + (byte) keyboard_events_size#10) ← (byte~) keyboard_event_scan::$23
  [443] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10
  to:keyboard_event_scan::@10

(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@7
  [444] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0)
  [445] (byte) keyboard_matrix_read::return#0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [446] return 
  to:@return

(void()) render_show()
render_show: scope:[render_show]  from main::@3
  [447] if((byte) render_screen_show#16==(byte) 0) goto render_show::toD0181
  to:render_show::toD0182
render_show::toD0182: scope:[render_show]  from render_show
  [448] phi()
  to:render_show::@1
render_show::@1: scope:[render_show]  from render_show::toD0181 render_show::toD0182
  [449] (byte) render_show::d018val#3 ← phi( render_show::toD0181/(const byte) render_show::toD0181_return#0 render_show::toD0182/(const byte) render_show::toD0182_return#0 )
  [450] *((const nomodify byte*) D018) ← (byte) render_show::d018val#3
  [451] *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1 + (byte) level#10)
  [452] *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2 + (byte) level#10)
  [453] (volatile byte) render_screen_showing ← (byte) render_screen_show#16
  to:render_show::@return
render_show::@return: scope:[render_show]  from render_show::@1
  [454] return 
  to:@return
render_show::toD0181: scope:[render_show]  from render_show
  [455] phi()
  to:render_show::@1

(void()) play_init()
play_init: scope:[play_init]  from main::@11
  [456] phi()
  to:play_init::@1
play_init::@1: scope:[play_init]  from play_init play_init::@1
  [457] (byte) play_init::idx#2 ← phi( play_init/(byte) 0 play_init::@1/(byte) play_init::idx#1 )
  [457] (byte*) play_init::pli#2 ← phi( play_init/(const byte*) playfield play_init::@1/(byte*) play_init::pli#1 )
  [457] (byte) play_init::j#2 ← phi( play_init/(byte) 0 play_init::@1/(byte) play_init::j#1 )
  [458] (byte~) play_init::$2 ← (byte) play_init::j#2 << (byte) 1
  [459] *((const byte**) playfield_lines + (byte~) play_init::$2) ← (byte*) play_init::pli#2
  [460] *((const byte*) playfield_lines_idx + (byte) play_init::j#2) ← (byte) play_init::idx#2
  [461] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const nomodify byte) PLAYFIELD_COLS
  [462] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const nomodify byte) PLAYFIELD_COLS
  [463] (byte) play_init::j#1 ← ++ (byte) play_init::j#2
  [464] if((byte) play_init::j#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto play_init::@1
  to:play_init::@2
play_init::@2: scope:[play_init]  from play_init::@1
  [465] *((const byte*) playfield_lines_idx+(const nomodify byte) PLAYFIELD_LINES) ← (const nomodify byte) PLAYFIELD_COLS*(const nomodify byte) PLAYFIELD_LINES
  [466] (byte) current_movedown_slow#1 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS)
  to:play_init::@3
play_init::@3: scope:[play_init]  from play_init::@2 play_init::@3
  [467] (byte) play_init::b#2 ← phi( play_init::@2/(byte) 0 play_init::@3/(byte) play_init::b#1 )
  [468] (byte~) play_init::$3 ← (byte) play_init::b#2 << (byte) 2
  [469] *((const dword*) score_add_bcd + (byte~) play_init::$3) ← *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_init::$3)
  [470] (byte) play_init::b#1 ← ++ (byte) play_init::b#2
  [471] if((byte) play_init::b#1!=(byte) 5) goto play_init::@3
  to:play_init::@return
play_init::@return: scope:[play_init]  from play_init::@3
  [472] return 
  to:@return

(void()) sprites_irq_init()
sprites_irq_init: scope:[sprites_irq_init]  from main::@10
  asm { sei  }
  [474] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  asm { ldaCIA1_INTERRUPT  }
  [476] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK
  [477] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO
  [478] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR
  [479] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (byte) $7f
  [480] *((const nomodify byte*) RASTER) ← (const nomodify byte) IRQ_RASTER_FIRST
  [481] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER
  [482] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
  asm { cli  }
  to:sprites_irq_init::@return
sprites_irq_init::@return: scope:[sprites_irq_init]  from sprites_irq_init
  [484] return 
  to:@return

(void()) sprites_init()
sprites_init: scope:[sprites_init]  from main::@9
  [485] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $f
  [486] *((const nomodify byte*) SPRITES_MC) ← (byte) 0
  [487] *((const nomodify byte*) SPRITES_EXPAND_Y) ← *((const nomodify byte*) SPRITES_MC)
  [488] *((const nomodify byte*) SPRITES_EXPAND_X) ← *((const nomodify byte*) SPRITES_EXPAND_Y)
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  [489] (byte) sprites_init::xpos#2 ← phi( sprites_init/(byte)(number) $18+(number) $f*(number) 8 sprites_init::@1/(byte) sprites_init::xpos#1 )
  [489] (byte) sprites_init::s#2 ← phi( sprites_init/(byte) 0 sprites_init::@1/(byte) sprites_init::s#1 )
  [490] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte) 1
  [491] *((const nomodify byte*) SPRITES_XPOS + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2
  [492] *((const nomodify byte*) SPRITES_COLS + (byte) sprites_init::s#2) ← (const nomodify byte) BLACK
  [493] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte) $18
  [494] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2
  [495] if((byte) sprites_init::s#1!=(byte) 4) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  [496] return 
  to:@return

(void()) render_init()
render_init: scope:[render_init]  from main::@8
  [497] phi()
  to:render_init::vicSelectGfxBank1
render_init::vicSelectGfxBank1: scope:[render_init]  from render_init
  [498] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3
  to:render_init::vicSelectGfxBank1_toDd001
render_init::vicSelectGfxBank1_toDd001: scope:[render_init]  from render_init::vicSelectGfxBank1
  [499] phi()
  to:render_init::vicSelectGfxBank1_@1
render_init::vicSelectGfxBank1_@1: scope:[render_init]  from render_init::vicSelectGfxBank1_toDd001
  [500] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0
  to:render_init::@2
render_init::@2: scope:[render_init]  from render_init::vicSelectGfxBank1_@1
  [501] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_ECM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3
  [502] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK
  [503] *((const nomodify byte*) BGCOL1) ← (const nomodify byte) BLACK
  [504] *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1)
  [505] *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2)
  [506] *((const nomodify byte*) BGCOL4) ← (const nomodify byte) GREY
  [507] call render_screen_original 
  to:render_init::@3
render_init::@3: scope:[render_init]  from render_init::@2
  [508] phi()
  [509] call render_screen_original 
  to:render_init::@1
render_init::@1: scope:[render_init]  from render_init::@1 render_init::@3
  [510] (byte*) render_init::li_2#2 ← phi( render_init::@1/(byte*) render_init::li_2#1 render_init::@3/(const nomodify byte*) PLAYFIELD_SCREEN_2+(byte)(number) 2*(number) $28+(byte) $10 )
  [510] (byte*) render_init::li_1#2 ← phi( render_init::@1/(byte*) render_init::li_1#1 render_init::@3/(const nomodify byte*) PLAYFIELD_SCREEN_1+(byte)(number) 2*(number) $28+(byte) $10 )
  [510] (byte) render_init::i#2 ← phi( render_init::@1/(byte) render_init::i#1 render_init::@3/(byte) 0 )
  [511] (byte~) render_init::$5 ← (byte) render_init::i#2 << (byte) 1
  [512] *((const byte**) screen_lines_1 + (byte~) render_init::$5) ← (byte*) render_init::li_1#2
  [513] *((const byte**) screen_lines_2 + (byte~) render_init::$5) ← (byte*) render_init::li_2#2
  [514] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte) $28
  [515] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte) $28
  [516] (byte) render_init::i#1 ← ++ (byte) render_init::i#2
  [517] if((byte) render_init::i#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto render_init::@1
  to:render_init::@return
render_init::@return: scope:[render_init]  from render_init::@1
  [518] return 
  to:@return

(void()) render_screen_original((byte*) render_screen_original::screen)
render_screen_original: scope:[render_screen_original]  from render_init::@2 render_init::@3
  [519] (byte*) render_screen_original::screen#9 ← phi( render_init::@2/(const nomodify byte*) PLAYFIELD_SCREEN_1 render_init::@3/(const nomodify byte*) PLAYFIELD_SCREEN_2 )
  to:render_screen_original::@1
render_screen_original::@1: scope:[render_screen_original]  from render_screen_original render_screen_original::@5
  [520] (byte) render_screen_original::y#6 ← phi( render_screen_original/(byte) 0 render_screen_original::@5/(byte) render_screen_original::y#1 )
  [520] (byte*) render_screen_original::ocols#4 ← phi( render_screen_original/(const to_nomodify byte*) PLAYFIELD_COLORS_ORIGINAL+(byte)(number) $20*(number) 2 render_screen_original::@5/(byte*) render_screen_original::ocols#1 )
  [520] (byte*) render_screen_original::oscr#4 ← phi( render_screen_original/(const to_nomodify byte*) PLAYFIELD_SCREEN_ORIGINAL+(byte)(number) $20*(number) 2 render_screen_original::@5/(byte*) render_screen_original::oscr#1 )
  [520] (byte*) render_screen_original::cols#7 ← phi( render_screen_original/(const nomodify byte*) COLS render_screen_original::@5/(byte*) render_screen_original::cols#3 )
  [520] (byte*) render_screen_original::screen#8 ← phi( render_screen_original/(byte*) render_screen_original::screen#9 render_screen_original::@5/(byte*) render_screen_original::screen#10 )
  to:render_screen_original::@2
render_screen_original::@2: scope:[render_screen_original]  from render_screen_original::@1 render_screen_original::@2
  [521] (byte) render_screen_original::x#4 ← phi( render_screen_original::@1/(byte) 0 render_screen_original::@2/(byte) render_screen_original::x#1 )
  [521] (byte*) render_screen_original::cols#4 ← phi( render_screen_original::@1/(byte*) render_screen_original::cols#7 render_screen_original::@2/(byte*) render_screen_original::cols#1 )
  [521] (byte*) render_screen_original::screen#5 ← phi( render_screen_original::@1/(byte*) render_screen_original::screen#8 render_screen_original::@2/(byte*) render_screen_original::screen#2 )
  [522] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE
  [523] (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5
  [524] *((byte*) render_screen_original::cols#4) ← (const nomodify byte) BLACK
  [525] (byte*) render_screen_original::cols#1 ← ++ (byte*) render_screen_original::cols#4
  [526] (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4
  [527] if((byte) render_screen_original::x#1!=(byte) 4) goto render_screen_original::@2
  to:render_screen_original::@3
render_screen_original::@3: scope:[render_screen_original]  from render_screen_original::@2 render_screen_original::@3
  [528] (byte) render_screen_original::x#5 ← phi( render_screen_original::@2/(byte) render_screen_original::x#1 render_screen_original::@3/(byte) render_screen_original::x#2 )
  [528] (byte*) render_screen_original::cols#5 ← phi( render_screen_original::@2/(byte*) render_screen_original::cols#1 render_screen_original::@3/(byte*) render_screen_original::cols#2 )
  [528] (byte*) render_screen_original::ocols#2 ← phi( render_screen_original::@2/(byte*) render_screen_original::ocols#4 render_screen_original::@3/(byte*) render_screen_original::ocols#1 )
  [528] (byte*) render_screen_original::screen#6 ← phi( render_screen_original::@2/(byte*) render_screen_original::screen#2 render_screen_original::@3/(byte*) render_screen_original::screen#3 )
  [528] (byte*) render_screen_original::oscr#2 ← phi( render_screen_original::@2/(byte*) render_screen_original::oscr#4 render_screen_original::@3/(byte*) render_screen_original::oscr#1 )
  [529] *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2)
  [530] (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#6
  [531] (byte*) render_screen_original::oscr#1 ← ++ (byte*) render_screen_original::oscr#2
  [532] *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2)
  [533] (byte*) render_screen_original::cols#2 ← ++ (byte*) render_screen_original::cols#5
  [534] (byte*) render_screen_original::ocols#1 ← ++ (byte*) render_screen_original::ocols#2
  [535] (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5
  [536] if((byte) render_screen_original::x#2!=(byte) $24) goto render_screen_original::@3
  to:render_screen_original::@4
render_screen_original::@4: scope:[render_screen_original]  from render_screen_original::@3 render_screen_original::@4
  [537] (byte) render_screen_original::x#6 ← phi( render_screen_original::@3/(byte) render_screen_original::x#2 render_screen_original::@4/(byte) render_screen_original::x#3 )
  [537] (byte*) render_screen_original::cols#6 ← phi( render_screen_original::@3/(byte*) render_screen_original::cols#2 render_screen_original::@4/(byte*) render_screen_original::cols#3 )
  [537] (byte*) render_screen_original::screen#7 ← phi( render_screen_original::@3/(byte*) render_screen_original::screen#3 render_screen_original::@4/(byte*) render_screen_original::screen#10 )
  [538] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE
  [539] (byte*) render_screen_original::screen#10 ← ++ (byte*) render_screen_original::screen#7
  [540] *((byte*) render_screen_original::cols#6) ← (const nomodify byte) BLACK
  [541] (byte*) render_screen_original::cols#3 ← ++ (byte*) render_screen_original::cols#6
  [542] (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#6
  [543] if((byte) render_screen_original::x#3!=(byte) $28) goto render_screen_original::@4
  to:render_screen_original::@5
render_screen_original::@5: scope:[render_screen_original]  from render_screen_original::@4
  [544] (byte) render_screen_original::y#1 ← ++ (byte) render_screen_original::y#6
  [545] if((byte) render_screen_original::y#1!=(byte) $19) goto render_screen_original::@1
  to:render_screen_original::@return
render_screen_original::@return: scope:[render_screen_original]  from render_screen_original::@5
  [546] return 
  to:@return

interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
sprites_irq: scope:[sprites_irq]  from
  asm { cld  }
  [548] (byte) sprites_irq::ypos#0 ← (volatile byte) irq_sprite_ypos
  [549] *((const nomodify byte*) SPRITES_YPOS) ← (byte) sprites_irq::ypos#0
  [550] *((const nomodify byte*) SPRITES_YPOS+(byte) 2) ← (byte) sprites_irq::ypos#0
  [551] *((const nomodify byte*) SPRITES_YPOS+(byte) 4) ← (byte) sprites_irq::ypos#0
  [552] *((const nomodify byte*) SPRITES_YPOS+(byte) 6) ← (byte) sprites_irq::ypos#0
  [553] (byte~) sprites_irq::$0 ← (volatile byte) irq_raster_next + (byte) 1
  [554] (volatile byte) sprites_irq::raster_sprite_gfx_modify ← (byte~) sprites_irq::$0
  to:sprites_irq::@8
sprites_irq::@8: scope:[sprites_irq]  from sprites_irq sprites_irq::@8
  [555] if(*((const nomodify byte*) RASTER)<(volatile byte) sprites_irq::raster_sprite_gfx_modify) goto sprites_irq::@8
  to:sprites_irq::@9
sprites_irq::@9: scope:[sprites_irq]  from sprites_irq::@8
  [556] (byte) sprites_irq::ptr#0 ← (volatile byte) irq_sprite_ptr
  [557] if((volatile byte) render_screen_showing==(byte) 0) goto sprites_irq::@1
  to:sprites_irq::@10
sprites_irq::@10: scope:[sprites_irq]  from sprites_irq::@9
  [558] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2) ← (byte) sprites_irq::ptr#0
  [559] (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#0
  [560] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 1) ← (byte) sprites_irq::ptr#3
  [561] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 2) ← (byte) sprites_irq::ptr#3
  [562] (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3
  [563] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 3) ← (byte) sprites_irq::ptr#4
  to:sprites_irq::@2
sprites_irq::@2: scope:[sprites_irq]  from sprites_irq::@1 sprites_irq::@10
  [564] (volatile byte) irq_cnt ← ++ (volatile byte) irq_cnt
  [565] if((volatile byte) irq_cnt==(byte) 9) goto sprites_irq::@3
  to:sprites_irq::@6
sprites_irq::@6: scope:[sprites_irq]  from sprites_irq::@2
  [566] if((volatile byte) irq_cnt==(byte) $a) goto sprites_irq::@4
  to:sprites_irq::@7
sprites_irq::@7: scope:[sprites_irq]  from sprites_irq::@6
  [567] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $14
  [568] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15
  [569] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3
  to:sprites_irq::@5
sprites_irq::@5: scope:[sprites_irq]  from sprites_irq::@11 sprites_irq::@4 sprites_irq::@7
  [570] *((const nomodify byte*) RASTER) ← (volatile byte) irq_raster_next
  [571] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  to:sprites_irq::@return
sprites_irq::@return: scope:[sprites_irq]  from sprites_irq::@5
  [572] return 
  to:@return
sprites_irq::@4: scope:[sprites_irq]  from sprites_irq::@6
  [573] (volatile byte) irq_cnt ← (byte) 0
  [574] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST
  [575] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15
  [576] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3
  to:sprites_irq::@5
sprites_irq::@3: scope:[sprites_irq]  from sprites_irq::@2
  [577] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $15
  [578] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS
  to:sprites_irq::toSpritePtr1
sprites_irq::toSpritePtr1: scope:[sprites_irq]  from sprites_irq::@3
  [579] phi()
  to:sprites_irq::@11
sprites_irq::@11: scope:[sprites_irq]  from sprites_irq::toSpritePtr1
  [580] (volatile byte) irq_sprite_ptr ← (const byte) sprites_irq::toSpritePtr1_return#0
  to:sprites_irq::@5
sprites_irq::@1: scope:[sprites_irq]  from sprites_irq::@9
  [581] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1) ← (byte) sprites_irq::ptr#0
  [582] (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#0
  [583] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 1) ← (byte) sprites_irq::ptr#1
  [584] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 2) ← (byte) sprites_irq::ptr#1
  [585] (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1
  [586] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 3) ← (byte) sprites_irq::ptr#2
  to:sprites_irq::@2


VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(byte) current_movedown_counter
(byte) current_movedown_counter#12 26666.933333333334
(byte) current_movedown_counter#14 2732.5135135135133
(byte) current_movedown_counter#16 7777.153846153846
(byte) current_movedown_slow
(byte) current_movedown_slow#1 4.869565217391305
(byte) current_movedown_slow#10 2.0000002E7
(byte) current_movedown_slow#14 41091.392857142855
(byte) current_movedown_slow#21 5435.243243243243
(byte) current_movedown_slow#23 442857.7142857142
(byte) current_movedown_slow#37 300003.0
(byte) current_movedown_slow#65 733333.4666666666
(byte) current_orientation
(byte) current_orientation#13 8137.972972972973
(byte) current_orientation#17 1004.952380952381
(byte) current_orientation#20 16530.79591836735
(byte) current_orientation#25 51667.33333333333
(byte) current_orientation#37 200002.0
(byte) current_orientation#7 150001.5
(byte*) current_piece
(byte*) current_piece#10 8138.27027027027
(byte*) current_piece#100 2000002.0
(byte*) current_piece#101 11.0
(byte*) current_piece#15 7706.51282051282
(byte*) current_piece#17 1.1400006E7
(byte*) current_piece#28 300003.0
(byte*) current_piece#93 100001.0
(byte*) current_piece#96 200002.0
(byte*) current_piece#97 200002.0
(byte*) current_piece#98 200002.0
(byte*) current_piece#99 200002.0
(byte) current_piece_char
(byte) current_piece_char#10 1.8182183847272727E8
(byte) current_piece_char#100 22.0
(byte) current_piece_char#101 202.0
(byte) current_piece_char#16 5437.9729729729725
(byte) current_piece_char#29 300003.0
(byte) current_piece_char#5 34375.75
(byte) current_piece_char#68 47624.42857142857
(byte*) current_piece_gfx
(byte*) current_piece_gfx#112 11.0
(byte*) current_piece_gfx#113 101.0
(byte*) current_piece_gfx#117 200002.0
(byte*) current_piece_gfx#123 22.0
(byte*) current_piece_gfx#13 1.8182183847272727E8
(byte*) current_piece_gfx#18 1009.7619047619048
(byte*) current_piece_gfx#20 15185.37037037037
(byte*) current_piece_gfx#21 51667.33333333333
(byte*) current_piece_gfx#35 300003.0
(byte*) current_piece_gfx#64 47624.42857142857
(byte*) current_piece_gfx#7 200002.0
(byte) current_xpos
(byte) current_xpos#100 67742.74193548388
(byte) current_xpos#119 7.333333333333333
(byte) current_xpos#120 67.33333333333333
(byte) current_xpos#14 1.8187293036363635E7
(byte) current_xpos#19 1009.7619047619048
(byte) current_xpos#22 36400.4
(byte) current_xpos#26 20333.566666666666
(byte) current_xpos#43 300003.0
(byte) current_xpos#59 4767.285714285714
(byte) current_xpos#6 200002.0
(byte) current_xpos#8 200002.0
(byte) current_ypos
(byte) current_ypos#11 35165.32432432432
(byte) current_ypos#13 1113.0
(byte) current_ypos#19 6425.74358974359
(byte) current_ypos#3 200002.0
(byte) current_ypos#38 300003.0
(byte) current_ypos#6 70000.83333333334
(byte) current_ypos#98 5.5
(byte) current_ypos#99 40.4
(byte) game_over
(byte) game_over#10 6567.760869565218
(byte) game_over#15 5705.54054054054
(byte) game_over#27 300003.0
(byte) game_over#52 47827.13043478261
(byte) game_over#65 78572.35714285714
(volatile byte) irq_cnt loadstore 0.48000000000000004
(volatile byte) irq_raster_next loadstore 0.44444444444444453
(volatile byte) irq_sprite_ptr loadstore 0.45161290322580644
(volatile byte) irq_sprite_ypos loadstore 0.48275862068965525
(byte()) keyboard_event_get()
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#1 20002.0
(byte) keyboard_event_get::return#2 3667.333333333333
(byte) keyboard_event_get::return#3 2002.0
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0 2000002.0
(byte~) keyboard_event_pressed::$1 2000002.0
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#5 666667.3333333334
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0 20002.0
(byte) keyboard_event_pressed::return#1 20002.0
(byte) keyboard_event_pressed::return#10 20002.0
(byte) keyboard_event_pressed::return#11 162858.0
(byte) keyboard_event_pressed::return#12 200002.0
(byte) keyboard_event_pressed::return#2 20002.0
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0 1000001.0
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0 20002.0
(byte~) keyboard_event_scan::$15 2.00000002E8
(byte~) keyboard_event_scan::$16 2.00000002E8
(byte~) keyboard_event_scan::$23 2.00000002E8
(byte~) keyboard_event_scan::$3 20002.0
(byte~) keyboard_event_scan::$6 20002.0
(byte~) keyboard_event_scan::$9 20002.0
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#1 1.500000015E8
(byte) keyboard_event_scan::col#2 2.857142885714286E7
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0 2.00000002E8
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#1 2.0000002E7
(byte) keyboard_event_scan::keycode#10 3.153846192307692E7
(byte) keyboard_event_scan::keycode#11 5000000.5
(byte) keyboard_event_scan::keycode#13 1.0000001E7
(byte) keyboard_event_scan::keycode#14 5.250000075E7
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#1 1.50000015E7
(byte) keyboard_event_scan::row#2 6000000.24
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0 1.2777778055555556E7
(byte) keyboard_events_size
(byte) keyboard_events_size#1 2.00000002E8
(byte) keyboard_events_size#10 8.100000089999999E7
(byte) keyboard_events_size#13 968709.870967742
(byte) keyboard_events_size#16 811.6923076923076
(byte) keyboard_events_size#19 1850.5
(byte) keyboard_events_size#2 2.00000002E8
(byte) keyboard_events_size#29 1.020000012E8
(byte) keyboard_events_size#30 4287143.428571429
(byte) keyboard_events_size#4 15001.5
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 3.6666667333333336E7
(byte) keyboard_matrix_read::return#2 2.0000002E7
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 1.10000002E8
(byte) keyboard_modifiers
(byte) level
(byte) level#10 185168.31818181818
(byte) level#17 5435.243243243243
(byte) level#19 442857.7142857142
(byte) level#21 1722222.4444444445
(byte) level#33 300003.0
(byte) level_bcd
(byte) level_bcd#11 200018.1475409836
(byte) level_bcd#17 3425.508474576271
(byte) level_bcd#19 442857.7142857142
(byte) level_bcd#21 1.3333334666666666E7
(byte) level_bcd#31 300003.0
(byte) level_bcd#62 2100000.3
(byte) level_bcd#8 2.0000002E7
(word) lines_bcd
(word) lines_bcd#15 3442.4745762711864
(word) lines_bcd#17 442857.7142857142
(word) lines_bcd#19 64022.14
(word) lines_bcd#26 300003.0
(word) lines_bcd#29 500000.5
(void()) main()
(byte) main::key_event
(byte) main::key_event#0 1001.0
(byte) main::render
(byte) main::render#1 2002.0
(byte) next_piece_idx
(byte) next_piece_idx#10 6546.0
(byte) next_piece_idx#12 422.79999999999995
(byte) next_piece_idx#16 5437.9729729729725
(byte) next_piece_idx#17 1100013.0
(byte) next_piece_idx#30 300003.0
(byte) next_piece_idx#77 22.0
(byte) next_piece_idx#78 202.0
(byte()) play_collision((byte) play_collision::xpos , (byte) play_collision::ypos , (byte) play_collision::orientation)
(byte~) play_collision::$14 2.0000000002E10
(byte~) play_collision::$5 2.00000000002E11
(byte) play_collision::c
(byte) play_collision::c#1 1.00000000001E11
(byte) play_collision::c#2 2.2222222222444443E10
(byte) play_collision::i
(byte) play_collision::i#1 1.6153846154076923E10
(byte) play_collision::i#10 2.0000000002E10
(byte) play_collision::i#12 2.00000000002E11
(byte) play_collision::i#2 1.55000000002E11
(byte) play_collision::i#3 5.0000000005E9
(byte) play_collision::l
(byte) play_collision::l#1 1.0000000001E10
(byte) play_collision::l#6 1.1764705883529413E9
(byte) play_collision::orientation
(byte) play_collision::orientation#0 100001.0
(byte) play_collision::orientation#1 100001.0
(byte) play_collision::orientation#2 100001.0
(byte) play_collision::orientation#3 100001.0
(byte) play_collision::orientation#5 1.0400005E7
(byte*) play_collision::piece_gfx
(byte*) play_collision::piece_gfx#0 4.762380952476191E9
(byte*) play_collision::playfield_line
(byte*) play_collision::playfield_line#0 7.857142857285714E9
(byte) play_collision::return
(byte) play_collision::return#0 200002.0
(byte) play_collision::return#1 200002.0
(byte) play_collision::return#10 2000002.0
(byte) play_collision::return#13 200002.0
(byte) play_collision::return#14 200002.0
(byte) play_collision::return#15 200000.7142857143
(byte) play_collision::xp
(byte) play_collision::xp#1 5.00000000005E10
(byte) play_collision::xp#2 6.375000000075E10
(byte) play_collision::xp#8 2.0000000002E10
(byte) play_collision::xpos
(byte) play_collision::xpos#0 66667.33333333333
(byte) play_collision::xpos#1 50000.5
(byte) play_collision::xpos#2 50000.5
(byte) play_collision::xpos#3 50000.5
(byte) play_collision::xpos#4 666667.3333333334
(byte) play_collision::xpos#6 4.546090911818181E8
(byte) play_collision::yp
(byte) play_collision::yp#0 5700003.0
(byte) play_collision::yp#1 5.0000000005E9
(byte) play_collision::yp#2 8.1256250003125E9
(byte) play_collision::ypos
(byte) play_collision::ypos#0 50000.5
(byte) play_collision::ypos#1 66667.33333333333
(byte) play_collision::ypos#2 66667.33333333333
(byte) play_collision::ypos#3 66667.33333333333
(byte) play_collision::ypos#4 1000001.0
(void()) play_increase_level()
(byte~) play_increase_level::$1 2.0000002E7
(byte~) play_increase_level::$5 4.0000000004E10
(byte) play_increase_level::b
(byte) play_increase_level::b#1 1.50000000015E10
(byte) play_increase_level::b#2 1.0000000001E10
(void()) play_init()
(byte~) play_init::$2 2002.0
(byte~) play_init::$3 3003.0
(byte) play_init::b
(byte) play_init::b#1 1501.5
(byte) play_init::b#2 1001.0
(byte) play_init::idx
(byte) play_init::idx#1 667.3333333333334
(byte) play_init::idx#2 600.5999999999999
(byte) play_init::j
(byte) play_init::j#1 1501.5
(byte) play_init::j#2 667.3333333333334
(byte*) play_init::pli
(byte*) play_init::pli#1 500.5
(byte*) play_init::pli#2 750.75
(void()) play_lock_current()
(byte~) play_lock_current::$4 2.000000002E9
(byte) play_lock_current::c
(byte) play_lock_current::c#1 1.0000000001E10
(byte) play_lock_current::c#2 4.0000000004E9
(byte) play_lock_current::i
(byte) play_lock_current::i#1 2.333333333666667E9
(byte) play_lock_current::i#2 1.5500000002E10
(byte) play_lock_current::i#3 5.000000005E8
(byte) play_lock_current::i#7 2.000000002E9
(byte) play_lock_current::i#9 2.0000000002E10
(byte) play_lock_current::l
(byte) play_lock_current::l#1 1.000000001E9
(byte) play_lock_current::l#6 1.53846154E8
(byte*) play_lock_current::playfield_line
(byte*) play_lock_current::playfield_line#0 1.1000000002E9
(byte) play_lock_current::xp
(byte) play_lock_current::xp#0 2.000000002E9
(byte) play_lock_current::xp#1 5.0000000005E9
(byte) play_lock_current::xp#2 7.750000001E9
(byte) play_lock_current::yp
(byte) play_lock_current::yp#0 2000002.0
(byte) play_lock_current::yp#1 5.000000005E8
(byte) play_lock_current::yp#2 2.500833336666667E8
(byte()) play_move_down((byte) play_move_down::key_event)
(byte~) play_move_down::$12 200002.0
(byte~) play_move_down::$2 200002.0
(byte) play_move_down::key_event
(byte) play_move_down::key_event#0 55001.0
(byte) play_move_down::movedown
(byte) play_move_down::movedown#10 50000.5
(byte) play_move_down::movedown#2 200002.0
(byte) play_move_down::movedown#3 200002.0
(byte) play_move_down::movedown#6 300003.0
(byte) play_move_down::movedown#7 250002.5
(byte) play_move_down::removed
(byte) play_move_down::removed#0 200002.0
(byte) play_move_down::return
(byte) play_move_down::return#0 20002.0
(byte) play_move_down::return#3 3333.6666666666665
(byte()) play_move_leftright((byte) play_move_leftright::key_event)
(byte~) play_move_leftright::$4 200002.0
(byte~) play_move_leftright::$8 200002.0
(byte) play_move_leftright::key_event
(byte) play_move_leftright::key_event#0 105001.5
(byte) play_move_leftright::return
(byte) play_move_leftright::return#0 20002.0
(byte) play_move_leftright::return#2 3333.6666666666665
(byte()) play_move_rotate((byte) play_move_rotate::key_event)
(byte~) play_move_rotate::$2 200002.0
(byte~) play_move_rotate::$5 200002.0
(byte~) play_move_rotate::$7 200002.0
(byte) play_move_rotate::key_event
(byte) play_move_rotate::key_event#0 105001.5
(byte) play_move_rotate::orientation
(byte) play_move_rotate::orientation#1 200002.0
(byte) play_move_rotate::orientation#2 200002.0
(byte) play_move_rotate::orientation#3 44444.88888888889
(byte) play_move_rotate::return
(byte) play_move_rotate::return#0 20002.0
(byte) play_move_rotate::return#2 3333.6666666666665
(byte()) play_movement((byte) play_movement::key_event)
(byte~) play_movement::$3 20002.0
(byte~) play_movement::$4 20002.0
(byte) play_movement::key_event
(byte) play_movement::key_event#0 2818.5454545454545
(byte) play_movement::render
(byte) play_movement::render#1 5000.5
(byte) play_movement::render#2 4000.4
(byte) play_movement::return
(byte) play_movement::return#0 20002.0
(byte) play_movement::return#2 7001.0
(byte) play_movement::return#3 2002.0
(byte()) play_remove_lines()
(byte) play_remove_lines::c
(byte) play_remove_lines::c#0 6.0000000006E9
(byte) play_remove_lines::full
(byte) play_remove_lines::full#2 4.2000000006E9
(byte) play_remove_lines::full#4 4.0000000004E9
(byte) play_remove_lines::r
(byte) play_remove_lines::r#1 1.5000000002142856E9
(byte) play_remove_lines::r#2 1.5500000002E10
(byte) play_remove_lines::r#3 2.000000002E9
(byte) play_remove_lines::removed
(byte) play_remove_lines::removed#1 2.000000002E9
(byte) play_remove_lines::removed#11 2.30769231E8
(byte) play_remove_lines::removed#7 3.333444448888889E8
(byte) play_remove_lines::return
(byte) play_remove_lines::return#0 200002.0
(byte) play_remove_lines::w
(byte) play_remove_lines::w#1 5.500000001E9
(byte) play_remove_lines::w#11 1.3333333346666667E9
(byte) play_remove_lines::w#12 2.000000002E9
(byte) play_remove_lines::w#2 1.000000001E9
(byte) play_remove_lines::w#3 2.000000002E9
(byte) play_remove_lines::w#4 4.428571429142857E9
(byte) play_remove_lines::w#6 1.6666666683333335E9
(byte) play_remove_lines::x
(byte) play_remove_lines::x#1 1.50000000015E10
(byte) play_remove_lines::x#2 2.50000000025E9
(byte) play_remove_lines::y
(byte) play_remove_lines::y#1 1.5000000015E9
(byte) play_remove_lines::y#8 1.3333333346666667E8
(void()) play_spawn_current()
(byte~) play_spawn_current::$1 2000002.0
(byte~) play_spawn_current::$7 32258.09677419355
(byte) play_spawn_current::current_piece_idx
(byte) play_spawn_current::current_piece_idx#0 1250001.25
(byte) play_spawn_current::piece_idx
(byte) play_spawn_current::piece_idx#1 2.000000002E9
(byte) play_spawn_current::piece_idx#2 1.000050018E8
(byte) play_spawn_current::sid_rnd1_return
(byte) play_spawn_current::sid_rnd1_return#0 2.000000002E9
(void()) play_update_score((byte) play_update_score::removed)
(byte~) play_update_score::$2 2000002.0
(byte~) play_update_score::$4 2000002.0
(byte~) play_update_score::$9 2000002.0
(dword) play_update_score::add_bcd
(dword) play_update_score::add_bcd#0 666667.3333333334
(byte) play_update_score::lines_after
(byte) play_update_score::lines_after#0 2000002.0
(byte) play_update_score::lines_before
(byte) play_update_score::lines_before#0 222222.44444444444
(byte) play_update_score::removed
(byte) play_update_score::removed#0 442857.7142857142
(void()) render_bcd((byte*) render_bcd::screen , (word) render_bcd::offset , (byte) render_bcd::bcd , (byte) render_bcd::only_low)
(byte~) render_bcd::$3 20002.0
(byte~) render_bcd::$4 20002.0
(byte~) render_bcd::$5 20002.0
(byte~) render_bcd::$6 20002.0
(byte) render_bcd::bcd
(byte) render_bcd::bcd#0 2002.0
(byte) render_bcd::bcd#1 2002.0
(byte) render_bcd::bcd#2 2002.0
(byte) render_bcd::bcd#3 1001.0
(byte) render_bcd::bcd#4 1001.0
(byte) render_bcd::bcd#5 2002.0
(byte) render_bcd::bcd#6 3251.0
(word) render_bcd::offset
(word) render_bcd::offset#6 10001.0
(byte) render_bcd::only_low
(byte) render_bcd::only_low#6 5000.5
(byte*) render_bcd::screen
(byte*) render_bcd::screen#0 1001.0
(byte*) render_bcd::screen#1 1001.0
(byte*) render_bcd::screen#2 1001.0
(byte*) render_bcd::screen#3 2002.0
(byte*) render_bcd::screen#4 2002.0
(byte*) render_bcd::screen#5 1001.0
(byte*) render_bcd::screen#6 16007.0
(byte*) render_bcd::screen_pos
(byte*) render_bcd::screen_pos#0 8000.8
(byte*) render_bcd::screen_pos#2 20002.0
(byte*) render_bcd::screen_pos#3 10001.0
(void()) render_init()
(byte~) render_init::$5 1501.5
(byte) render_init::i
(byte) render_init::i#1 1501.5
(byte) render_init::i#2 500.5
(byte*) render_init::li_1
(byte*) render_init::li_1#1 500.5
(byte*) render_init::li_1#2 750.75
(byte*) render_init::li_2
(byte*) render_init::li_2#1 667.3333333333334
(byte*) render_init::li_2#2 600.5999999999999
(byte*) render_init::vicSelectGfxBank1_gfx
(byte*) render_init::vicSelectGfxBank1_toDd001_gfx
(byte) render_init::vicSelectGfxBank1_toDd001_return
(void()) render_moving()
(byte~) render_moving::$1 200002.0
(byte~) render_moving::$6 200002.0
(byte) render_moving::c
(byte) render_moving::c#1 1500001.5
(byte) render_moving::c#2 333333.6666666667
(byte) render_moving::current_cell
(byte) render_moving::current_cell#0 1000001.0
(byte) render_moving::i
(byte) render_moving::i#1 200002.0
(byte) render_moving::i#2 500000.5
(byte) render_moving::i#3 50000.5
(byte) render_moving::i#4 1550002.0
(byte) render_moving::i#8 300000.75
(byte) render_moving::l
(byte) render_moving::l#1 150001.5
(byte) render_moving::l#4 11764.823529411764
(byte*) render_moving::screen_line
(byte*) render_moving::screen_line#0 110000.20000000001
(byte) render_moving::xpos
(byte) render_moving::xpos#0 200002.0
(byte) render_moving::xpos#1 666667.3333333334
(byte) render_moving::xpos#2 620000.8
(byte) render_moving::ypos
(byte) render_moving::ypos#0 2002.0
(byte) render_moving::ypos#1 66667.33333333333
(byte) render_moving::ypos#2 25062.8125
(void()) render_next()
(byte~) render_next::$6 500.5
(byte) render_next::c
(byte) render_next::c#1 1500001.5
(byte) render_next::c#2 285714.5714285714
(byte) render_next::cell
(byte) render_next::cell#0 1000001.0
(byte) render_next::l
(byte) render_next::l#1 150001.5
(byte) render_next::l#7 18182.0
(byte) render_next::next_piece_char
(byte) render_next::next_piece_char#0 66733.46666666667
(byte*) render_next::next_piece_gfx
(byte*) render_next::next_piece_gfx#1 210000.30000000002
(byte*) render_next::next_piece_gfx#2 1550002.0
(byte*) render_next::next_piece_gfx#3 201003.0
(byte*) render_next::next_piece_gfx#8 2002.0
(byte*) render_next::screen_next_area
(byte*) render_next::screen_next_area#10 201003.0
(byte*) render_next::screen_next_area#11 250.25
(byte*) render_next::screen_next_area#3 700001.0
(byte*) render_next::screen_next_area#4 66667.33333333333
(byte*) render_next::screen_next_area#5 683334.1666666667
(void()) render_playfield()
(byte~) render_playfield::$0 200002.0
(byte~) render_playfield::$3 200002.0
(byte) render_playfield::c
(byte) render_playfield::c#1 1500001.5
(byte) render_playfield::c#2 500000.5
(byte) render_playfield::i
(byte) render_playfield::i#1 420000.60000000003
(byte) render_playfield::i#2 1033334.6666666667
(byte) render_playfield::i#3 50000.5
(byte) render_playfield::l
(byte) render_playfield::l#1 150001.5
(byte) render_playfield::l#2 30000.300000000003
(byte*) render_playfield::screen_line
(byte*) render_playfield::screen_line#0 200002.0
(byte*) render_playfield::screen_line#1 500000.5
(byte*) render_playfield::screen_line#2 1550002.0
(void()) render_score()
(byte*) render_score::screen
(byte*) render_score::screen#3 375.375
(void()) render_screen_original((byte*) render_screen_original::screen)
(byte*) render_screen_original::cols
(byte*) render_screen_original::cols#1 100001.0
(byte*) render_screen_original::cols#2 75000.75
(byte*) render_screen_original::cols#3 42000.600000000006
(byte*) render_screen_original::cols#4 77501.0
(byte*) render_screen_original::cols#5 80000.8
(byte*) render_screen_original::cols#6 100001.0
(byte*) render_screen_original::cols#7 20002.0
(byte*) render_screen_original::ocols
(byte*) render_screen_original::ocols#1 17500.25
(byte*) render_screen_original::ocols#2 66667.33333333333
(byte*) render_screen_original::ocols#4 13750.25
(byte*) render_screen_original::oscr
(byte*) render_screen_original::oscr#1 14000.2
(byte*) render_screen_original::oscr#2 133334.66666666666
(byte*) render_screen_original::oscr#4 13750.25
(byte*) render_screen_original::screen
(byte*) render_screen_original::screen#10 30000.428571428572
(byte*) render_screen_original::screen#2 60000.600000000006
(byte*) render_screen_original::screen#3 42857.57142857143
(byte*) render_screen_original::screen#5 155002.0
(byte*) render_screen_original::screen#6 200002.0
(byte*) render_screen_original::screen#7 200002.0
(byte*) render_screen_original::screen#8 21003.0
(byte*) render_screen_original::screen#9 1001.0
(byte) render_screen_original::x
(byte) render_screen_original::x#1 200002.0
(byte) render_screen_original::x#2 200002.0
(byte) render_screen_original::x#3 150001.5
(byte) render_screen_original::x#4 40000.4
(byte) render_screen_original::x#5 42857.57142857143
(byte) render_screen_original::x#6 60000.600000000006
(byte) render_screen_original::y
(byte) render_screen_original::y#1 15001.5
(byte) render_screen_original::y#6 833.4166666666666
(byte) render_screen_render
(byte) render_screen_render#11 275.5
(byte) render_screen_render#15 1102.0
(byte) render_screen_render#18 84.76923076923077
(byte) render_screen_render#22 7700.153846153846
(byte) render_screen_render#33 4766.761904761905
(byte) render_screen_render#64 202.0
(byte) render_screen_render#65 50.5
(byte) render_screen_render#66 101.0
(byte) render_screen_show
(byte) render_screen_show#13 367.33333333333337
(byte) render_screen_show#16 577.65
(volatile byte) render_screen_showing loadstore 1000.5000000000001
(void()) render_screen_swap()
(void()) render_show()
(byte) render_show::d018val
(byte) render_show::d018val#3 10001.0
(byte*) render_show::toD0181_gfx
(byte) render_show::toD0181_return
(byte*) render_show::toD0181_screen
(byte*) render_show::toD0182_gfx
(byte) render_show::toD0182_return
(byte*) render_show::toD0182_screen
(volatile dword) score_bcd loadstore 14492.782608695652
(void()) sprites_init()
(byte) sprites_init::s
(byte) sprites_init::s#1 1501.5
(byte) sprites_init::s#2 800.8
(byte) sprites_init::s2
(byte) sprites_init::s2#0 2002.0
(byte) sprites_init::xpos
(byte) sprites_init::xpos#1 667.3333333333334
(byte) sprites_init::xpos#2 750.75
interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
(byte~) sprites_irq::$0 4.0
(byte) sprites_irq::ptr
(byte) sprites_irq::ptr#0 2.5
(byte) sprites_irq::ptr#1 2.6666666666666665
(byte) sprites_irq::ptr#2 4.0
(byte) sprites_irq::ptr#3 2.6666666666666665
(byte) sprites_irq::ptr#4 4.0
(volatile byte) sprites_irq::raster_sprite_gfx_modify loadstore 6.5
(byte) sprites_irq::toSpritePtr1_return
(byte*) sprites_irq::toSpritePtr1_sprite
(byte) sprites_irq::ypos
(byte) sprites_irq::ypos#0 2.5
(void()) sprites_irq_init()
(byte) toSpritePtr1_return
(byte*) toSpritePtr1_sprite

Initial phi equivalence classes
[ render_screen_show#16 render_screen_show#13 ]
[ render_screen_render#18 render_screen_render#11 ]
[ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
[ render_score::screen#3 ]
[ render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ]
[ render_bcd::offset#6 ]
[ render_bcd::only_low#6 ]
[ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ]
[ render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ]
[ render_screen_render#15 render_screen_render#66 ]
[ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ]
[ render_next::l#7 render_next::l#1 ]
[ render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#8 render_next::next_piece_gfx#1 ]
[ render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#11 render_next::screen_next_area#4 render_next::screen_next_area#3 ]
[ render_next::c#2 render_next::c#1 ]
[ current_ypos#13 current_ypos#98 current_ypos#99 ]
[ render_screen_render#33 render_screen_render#65 ]
[ current_xpos#59 current_xpos#119 current_xpos#120 ]
[ current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 ]
[ current_piece_char#68 current_piece_char#100 current_piece_char#101 ]
[ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ]
[ render_moving::l#4 render_moving::l#1 ]
[ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ]
[ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ]
[ render_moving::c#2 render_moving::c#1 ]
[ render_screen_render#22 render_screen_render#64 ]
[ render_playfield::l#2 render_playfield::l#1 ]
[ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
[ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ]
[ render_playfield::c#2 render_playfield::c#1 ]
[ play_movement::return#2 play_movement::render#1 play_movement::return#0 ]
[ play_move_rotate::return#2 ]
[ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
[ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 ]
[ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
[ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ]
[ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ]
[ play_collision::l#6 play_collision::l#1 ]
[ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ]
[ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ]
[ play_collision::c#2 play_collision::c#1 ]
[ play_collision::return#15 ]
[ play_move_leftright::return#2 ]
[ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ]
[ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#6 current_ypos#19 ]
[ lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ]
[ level#33 level#10 level#17 level#19 level#21 ]
[ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#1 current_movedown_slow#21 current_movedown_slow#23 current_movedown_slow#65 current_movedown_slow#10 ]
[ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
[ current_piece#28 current_piece#10 current_piece#101 current_piece#15 current_piece#93 ]
[ current_piece_char#29 current_piece_char#10 current_piece_char#5 current_piece_char#16 ]
[ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
[ current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#123 current_piece_gfx#18 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#117 ]
[ current_xpos#43 current_xpos#14 current_xpos#100 current_xpos#19 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
[ play_move_down::return#3 ]
[ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 play_spawn_current::piece_idx#2 next_piece_idx#16 play_spawn_current::piece_idx#1 ]
[ game_over#65 game_over#27 game_over#10 game_over#52 game_over#15 ]
[ play_increase_level::b#2 play_increase_level::b#1 ]
[ play_remove_lines::y#8 play_remove_lines::y#1 ]
[ play_remove_lines::removed#11 play_remove_lines::removed#7 play_remove_lines::removed#1 ]
[ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ]
[ play_remove_lines::x#2 play_remove_lines::x#1 ]
[ play_remove_lines::full#4 play_remove_lines::full#2 ]
[ play_remove_lines::w#6 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 play_remove_lines::w#3 ]
[ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ]
[ play_lock_current::l#6 play_lock_current::l#1 ]
[ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ]
[ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ]
[ play_lock_current::c#2 play_lock_current::c#1 ]
[ keyboard_event_pressed::keycode#5 ]
[ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
[ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
[ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
[ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
[ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
[ render_show::d018val#3 ]
[ play_init::j#2 play_init::j#1 ]
[ play_init::pli#2 play_init::pli#1 ]
[ play_init::idx#2 play_init::idx#1 ]
[ play_init::b#2 play_init::b#1 ]
[ sprites_init::s#2 sprites_init::s#1 ]
[ sprites_init::xpos#2 sprites_init::xpos#1 ]
[ render_init::i#2 render_init::i#1 ]
[ render_init::li_1#2 render_init::li_1#1 ]
[ render_init::li_2#2 render_init::li_2#1 ]
[ render_screen_original::y#6 render_screen_original::y#1 ]
[ render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 ]
[ render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ]
[ render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ]
[ render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 ]
[ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
Added variable render_screen_showing to live range equivalence class [ render_screen_showing ]
Added variable score_bcd to live range equivalence class [ score_bcd ]
Added variable irq_raster_next to live range equivalence class [ irq_raster_next ]
Added variable irq_sprite_ypos to live range equivalence class [ irq_sprite_ypos ]
Added variable irq_sprite_ptr to live range equivalence class [ irq_sprite_ptr ]
Added variable irq_cnt to live range equivalence class [ irq_cnt ]
Added variable keyboard_event_get::return#3 to live range equivalence class [ keyboard_event_get::return#3 ]
Added variable main::key_event#0 to live range equivalence class [ main::key_event#0 ]
Added variable play_movement::key_event#0 to live range equivalence class [ play_movement::key_event#0 ]
Added variable play_movement::return#3 to live range equivalence class [ play_movement::return#3 ]
Added variable main::render#1 to live range equivalence class [ main::render#1 ]
Added variable render_bcd::$5 to live range equivalence class [ render_bcd::$5 ]
Added variable render_bcd::$6 to live range equivalence class [ render_bcd::$6 ]
Added variable render_bcd::$3 to live range equivalence class [ render_bcd::$3 ]
Added variable render_bcd::$4 to live range equivalence class [ render_bcd::$4 ]
Added variable render_next::$6 to live range equivalence class [ render_next::$6 ]
Added variable render_next::next_piece_char#0 to live range equivalence class [ render_next::next_piece_char#0 ]
Added variable render_next::cell#0 to live range equivalence class [ render_next::cell#0 ]
Added variable render_moving::$1 to live range equivalence class [ render_moving::$1 ]
Added variable render_moving::$6 to live range equivalence class [ render_moving::$6 ]
Added variable render_moving::screen_line#0 to live range equivalence class [ render_moving::screen_line#0 ]
Added variable render_moving::current_cell#0 to live range equivalence class [ render_moving::current_cell#0 ]
Added variable render_playfield::$0 to live range equivalence class [ render_playfield::$0 ]
Added variable render_playfield::$3 to live range equivalence class [ render_playfield::$3 ]
Added variable play_move_down::key_event#0 to live range equivalence class [ play_move_down::key_event#0 ]
Added variable play_move_down::return#0 to live range equivalence class [ play_move_down::return#0 ]
Added variable play_move_leftright::key_event#0 to live range equivalence class [ play_move_leftright::key_event#0 ]
Added variable play_move_leftright::return#0 to live range equivalence class [ play_move_leftright::return#0 ]
Added variable play_movement::$3 to live range equivalence class [ play_movement::$3 ]
Added variable play_movement::render#2 to live range equivalence class [ play_movement::render#2 ]
Added variable play_move_rotate::key_event#0 to live range equivalence class [ play_move_rotate::key_event#0 ]
Added variable play_move_rotate::return#0 to live range equivalence class [ play_move_rotate::return#0 ]
Added variable play_movement::$4 to live range equivalence class [ play_movement::$4 ]
Added variable play_move_rotate::$5 to live range equivalence class [ play_move_rotate::$5 ]
Added variable play_collision::return#14 to live range equivalence class [ play_collision::return#14 ]
Added variable play_move_rotate::$2 to live range equivalence class [ play_move_rotate::$2 ]
Added variable play_move_rotate::$7 to live range equivalence class [ play_move_rotate::$7 ]
Added variable play_collision::piece_gfx#0 to live range equivalence class [ play_collision::piece_gfx#0 ]
Added variable play_collision::$14 to live range equivalence class [ play_collision::$14 ]
Added variable play_collision::playfield_line#0 to live range equivalence class [ play_collision::playfield_line#0 ]
Added variable play_collision::i#1 to live range equivalence class [ play_collision::i#1 ]
Added variable play_collision::$5 to live range equivalence class [ play_collision::$5 ]
Added variable play_collision::return#13 to live range equivalence class [ play_collision::return#13 ]
Added variable play_move_leftright::$4 to live range equivalence class [ play_move_leftright::$4 ]
Added variable play_collision::return#1 to live range equivalence class [ play_collision::return#1 ]
Added variable play_move_leftright::$8 to live range equivalence class [ play_move_leftright::$8 ]
Added variable keyboard_event_pressed::return#12 to live range equivalence class [ keyboard_event_pressed::return#12 ]
Added variable play_move_down::$2 to live range equivalence class [ play_move_down::$2 ]
Added variable play_collision::return#0 to live range equivalence class [ play_collision::return#0 ]
Added variable play_move_down::$12 to live range equivalence class [ play_move_down::$12 ]
Added variable play_remove_lines::return#0 to live range equivalence class [ play_remove_lines::return#0 ]
Added variable play_move_down::removed#0 to live range equivalence class [ play_move_down::removed#0 ]
Added variable play_update_score::removed#0 to live range equivalence class [ play_update_score::removed#0 ]
Added variable play_spawn_current::current_piece_idx#0 to live range equivalence class [ play_spawn_current::current_piece_idx#0 ]
Added variable play_spawn_current::$7 to live range equivalence class [ play_spawn_current::$7 ]
Added variable play_collision::return#10 to live range equivalence class [ play_collision::return#10 ]
Added variable play_spawn_current::$1 to live range equivalence class [ play_spawn_current::$1 ]
Added variable play_spawn_current::sid_rnd1_return#0 to live range equivalence class [ play_spawn_current::sid_rnd1_return#0 ]
Added variable play_update_score::$2 to live range equivalence class [ play_update_score::$2 ]
Added variable play_update_score::lines_before#0 to live range equivalence class [ play_update_score::lines_before#0 ]
Added variable play_update_score::$9 to live range equivalence class [ play_update_score::$9 ]
Added variable play_update_score::add_bcd#0 to live range equivalence class [ play_update_score::add_bcd#0 ]
Added variable play_update_score::$4 to live range equivalence class [ play_update_score::$4 ]
Added variable play_update_score::lines_after#0 to live range equivalence class [ play_update_score::lines_after#0 ]
Added variable play_increase_level::$1 to live range equivalence class [ play_increase_level::$1 ]
Added variable play_increase_level::$5 to live range equivalence class [ play_increase_level::$5 ]
Added variable play_remove_lines::c#0 to live range equivalence class [ play_remove_lines::c#0 ]
Added variable play_lock_current::$4 to live range equivalence class [ play_lock_current::$4 ]
Added variable play_lock_current::playfield_line#0 to live range equivalence class [ play_lock_current::playfield_line#0 ]
Added variable play_lock_current::i#1 to live range equivalence class [ play_lock_current::i#1 ]
Added variable keyboard_event_pressed::$0 to live range equivalence class [ keyboard_event_pressed::$0 ]
Added variable keyboard_event_pressed::row_bits#0 to live range equivalence class [ keyboard_event_pressed::row_bits#0 ]
Added variable keyboard_event_pressed::$1 to live range equivalence class [ keyboard_event_pressed::$1 ]
Added variable keyboard_event_pressed::return#11 to live range equivalence class [ keyboard_event_pressed::return#11 ]
Added variable keyboard_matrix_read::rowid#0 to live range equivalence class [ keyboard_matrix_read::rowid#0 ]
Added variable keyboard_matrix_read::return#2 to live range equivalence class [ keyboard_matrix_read::return#2 ]
Added variable keyboard_event_scan::row_scan#0 to live range equivalence class [ keyboard_event_scan::row_scan#0 ]
Added variable keyboard_event_pressed::return#0 to live range equivalence class [ keyboard_event_pressed::return#0 ]
Added variable keyboard_event_scan::$0 to live range equivalence class [ keyboard_event_scan::$0 ]
Added variable keyboard_event_pressed::return#1 to live range equivalence class [ keyboard_event_pressed::return#1 ]
Added variable keyboard_event_scan::$3 to live range equivalence class [ keyboard_event_scan::$3 ]
Added variable keyboard_event_pressed::return#2 to live range equivalence class [ keyboard_event_pressed::return#2 ]
Added variable keyboard_event_scan::$6 to live range equivalence class [ keyboard_event_scan::$6 ]
Added variable keyboard_event_pressed::return#10 to live range equivalence class [ keyboard_event_pressed::return#10 ]
Added variable keyboard_event_scan::$9 to live range equivalence class [ keyboard_event_scan::$9 ]
Added variable keyboard_event_scan::$15 to live range equivalence class [ keyboard_event_scan::$15 ]
Added variable keyboard_event_scan::$16 to live range equivalence class [ keyboard_event_scan::$16 ]
Added variable keyboard_event_scan::event_type#0 to live range equivalence class [ keyboard_event_scan::event_type#0 ]
Added variable keyboard_event_scan::$23 to live range equivalence class [ keyboard_event_scan::$23 ]
Added variable keyboard_matrix_read::return#0 to live range equivalence class [ keyboard_matrix_read::return#0 ]
Added variable play_init::$2 to live range equivalence class [ play_init::$2 ]
Added variable play_init::$3 to live range equivalence class [ play_init::$3 ]
Added variable sprites_init::s2#0 to live range equivalence class [ sprites_init::s2#0 ]
Added variable render_init::$5 to live range equivalence class [ render_init::$5 ]
Added variable sprites_irq::ypos#0 to live range equivalence class [ sprites_irq::ypos#0 ]
Added variable sprites_irq::$0 to live range equivalence class [ sprites_irq::$0 ]
Added variable sprites_irq::raster_sprite_gfx_modify to live range equivalence class [ sprites_irq::raster_sprite_gfx_modify ]
Added variable sprites_irq::ptr#0 to live range equivalence class [ sprites_irq::ptr#0 ]
Added variable sprites_irq::ptr#3 to live range equivalence class [ sprites_irq::ptr#3 ]
Added variable sprites_irq::ptr#4 to live range equivalence class [ sprites_irq::ptr#4 ]
Added variable sprites_irq::ptr#1 to live range equivalence class [ sprites_irq::ptr#1 ]
Added variable sprites_irq::ptr#2 to live range equivalence class [ sprites_irq::ptr#2 ]
Complete equivalence classes
[ render_screen_show#16 render_screen_show#13 ]
[ render_screen_render#18 render_screen_render#11 ]
[ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
[ render_score::screen#3 ]
[ render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ]
[ render_bcd::offset#6 ]
[ render_bcd::only_low#6 ]
[ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ]
[ render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ]
[ render_screen_render#15 render_screen_render#66 ]
[ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ]
[ render_next::l#7 render_next::l#1 ]
[ render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#8 render_next::next_piece_gfx#1 ]
[ render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#11 render_next::screen_next_area#4 render_next::screen_next_area#3 ]
[ render_next::c#2 render_next::c#1 ]
[ current_ypos#13 current_ypos#98 current_ypos#99 ]
[ render_screen_render#33 render_screen_render#65 ]
[ current_xpos#59 current_xpos#119 current_xpos#120 ]
[ current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 ]
[ current_piece_char#68 current_piece_char#100 current_piece_char#101 ]
[ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ]
[ render_moving::l#4 render_moving::l#1 ]
[ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ]
[ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ]
[ render_moving::c#2 render_moving::c#1 ]
[ render_screen_render#22 render_screen_render#64 ]
[ render_playfield::l#2 render_playfield::l#1 ]
[ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
[ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ]
[ render_playfield::c#2 render_playfield::c#1 ]
[ play_movement::return#2 play_movement::render#1 play_movement::return#0 ]
[ play_move_rotate::return#2 ]
[ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
[ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 ]
[ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
[ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ]
[ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ]
[ play_collision::l#6 play_collision::l#1 ]
[ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ]
[ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ]
[ play_collision::c#2 play_collision::c#1 ]
[ play_collision::return#15 ]
[ play_move_leftright::return#2 ]
[ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ]
[ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#6 current_ypos#19 ]
[ lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ]
[ level#33 level#10 level#17 level#19 level#21 ]
[ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#1 current_movedown_slow#21 current_movedown_slow#23 current_movedown_slow#65 current_movedown_slow#10 ]
[ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
[ current_piece#28 current_piece#10 current_piece#101 current_piece#15 current_piece#93 ]
[ current_piece_char#29 current_piece_char#10 current_piece_char#5 current_piece_char#16 ]
[ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
[ current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#123 current_piece_gfx#18 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#117 ]
[ current_xpos#43 current_xpos#14 current_xpos#100 current_xpos#19 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
[ play_move_down::return#3 ]
[ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 play_spawn_current::piece_idx#2 next_piece_idx#16 play_spawn_current::piece_idx#1 ]
[ game_over#65 game_over#27 game_over#10 game_over#52 game_over#15 ]
[ play_increase_level::b#2 play_increase_level::b#1 ]
[ play_remove_lines::y#8 play_remove_lines::y#1 ]
[ play_remove_lines::removed#11 play_remove_lines::removed#7 play_remove_lines::removed#1 ]
[ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ]
[ play_remove_lines::x#2 play_remove_lines::x#1 ]
[ play_remove_lines::full#4 play_remove_lines::full#2 ]
[ play_remove_lines::w#6 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 play_remove_lines::w#3 ]
[ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ]
[ play_lock_current::l#6 play_lock_current::l#1 ]
[ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ]
[ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ]
[ play_lock_current::c#2 play_lock_current::c#1 ]
[ keyboard_event_pressed::keycode#5 ]
[ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
[ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
[ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
[ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
[ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
[ render_show::d018val#3 ]
[ play_init::j#2 play_init::j#1 ]
[ play_init::pli#2 play_init::pli#1 ]
[ play_init::idx#2 play_init::idx#1 ]
[ play_init::b#2 play_init::b#1 ]
[ sprites_init::s#2 sprites_init::s#1 ]
[ sprites_init::xpos#2 sprites_init::xpos#1 ]
[ render_init::i#2 render_init::i#1 ]
[ render_init::li_1#2 render_init::li_1#1 ]
[ render_init::li_2#2 render_init::li_2#1 ]
[ render_screen_original::y#6 render_screen_original::y#1 ]
[ render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 ]
[ render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ]
[ render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ]
[ render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 ]
[ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
[ render_screen_showing ]
[ score_bcd ]
[ irq_raster_next ]
[ irq_sprite_ypos ]
[ irq_sprite_ptr ]
[ irq_cnt ]
[ keyboard_event_get::return#3 ]
[ main::key_event#0 ]
[ play_movement::key_event#0 ]
[ play_movement::return#3 ]
[ main::render#1 ]
[ render_bcd::$5 ]
[ render_bcd::$6 ]
[ render_bcd::$3 ]
[ render_bcd::$4 ]
[ render_next::$6 ]
[ render_next::next_piece_char#0 ]
[ render_next::cell#0 ]
[ render_moving::$1 ]
[ render_moving::$6 ]
[ render_moving::screen_line#0 ]
[ render_moving::current_cell#0 ]
[ render_playfield::$0 ]
[ render_playfield::$3 ]
[ play_move_down::key_event#0 ]
[ play_move_down::return#0 ]
[ play_move_leftright::key_event#0 ]
[ play_move_leftright::return#0 ]
[ play_movement::$3 ]
[ play_movement::render#2 ]
[ play_move_rotate::key_event#0 ]
[ play_move_rotate::return#0 ]
[ play_movement::$4 ]
[ play_move_rotate::$5 ]
[ play_collision::return#14 ]
[ play_move_rotate::$2 ]
[ play_move_rotate::$7 ]
[ play_collision::piece_gfx#0 ]
[ play_collision::$14 ]
[ play_collision::playfield_line#0 ]
[ play_collision::i#1 ]
[ play_collision::$5 ]
[ play_collision::return#13 ]
[ play_move_leftright::$4 ]
[ play_collision::return#1 ]
[ play_move_leftright::$8 ]
[ keyboard_event_pressed::return#12 ]
[ play_move_down::$2 ]
[ play_collision::return#0 ]
[ play_move_down::$12 ]
[ play_remove_lines::return#0 ]
[ play_move_down::removed#0 ]
[ play_update_score::removed#0 ]
[ play_spawn_current::current_piece_idx#0 ]
[ play_spawn_current::$7 ]
[ play_collision::return#10 ]
[ play_spawn_current::$1 ]
[ play_spawn_current::sid_rnd1_return#0 ]
[ play_update_score::$2 ]
[ play_update_score::lines_before#0 ]
[ play_update_score::$9 ]
[ play_update_score::add_bcd#0 ]
[ play_update_score::$4 ]
[ play_update_score::lines_after#0 ]
[ play_increase_level::$1 ]
[ play_increase_level::$5 ]
[ play_remove_lines::c#0 ]
[ play_lock_current::$4 ]
[ play_lock_current::playfield_line#0 ]
[ play_lock_current::i#1 ]
[ keyboard_event_pressed::$0 ]
[ keyboard_event_pressed::row_bits#0 ]
[ keyboard_event_pressed::$1 ]
[ keyboard_event_pressed::return#11 ]
[ keyboard_matrix_read::rowid#0 ]
[ keyboard_matrix_read::return#2 ]
[ keyboard_event_scan::row_scan#0 ]
[ keyboard_event_pressed::return#0 ]
[ keyboard_event_scan::$0 ]
[ keyboard_event_pressed::return#1 ]
[ keyboard_event_scan::$3 ]
[ keyboard_event_pressed::return#2 ]
[ keyboard_event_scan::$6 ]
[ keyboard_event_pressed::return#10 ]
[ keyboard_event_scan::$9 ]
[ keyboard_event_scan::$15 ]
[ keyboard_event_scan::$16 ]
[ keyboard_event_scan::event_type#0 ]
[ keyboard_event_scan::$23 ]
[ keyboard_matrix_read::return#0 ]
[ play_init::$2 ]
[ play_init::$3 ]
[ sprites_init::s2#0 ]
[ render_init::$5 ]
[ sprites_irq::ypos#0 ]
[ sprites_irq::$0 ]
[ sprites_irq::raster_sprite_gfx_modify ]
[ sprites_irq::ptr#0 ]
[ sprites_irq::ptr#3 ]
[ sprites_irq::ptr#4 ]
[ sprites_irq::ptr#1 ]
[ sprites_irq::ptr#2 ]
Allocated zp[1]:2 [ render_screen_show#16 render_screen_show#13 ]
Allocated zp[1]:3 [ render_screen_render#18 render_screen_render#11 ]
Allocated zp[1]:4 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
Allocated zp[2]:5 [ render_score::screen#3 ]
Allocated zp[2]:7 [ render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ]
Allocated zp[2]:9 [ render_bcd::offset#6 ]
Allocated zp[1]:11 [ render_bcd::only_low#6 ]
Allocated zp[1]:12 [ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ]
Allocated zp[2]:13 [ render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ]
Allocated zp[1]:15 [ render_screen_render#15 render_screen_render#66 ]
Allocated zp[1]:16 [ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ]
Allocated zp[1]:17 [ render_next::l#7 render_next::l#1 ]
Allocated zp[2]:18 [ render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#8 render_next::next_piece_gfx#1 ]
Allocated zp[2]:20 [ render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#11 render_next::screen_next_area#4 render_next::screen_next_area#3 ]
Allocated zp[1]:22 [ render_next::c#2 render_next::c#1 ]
Allocated zp[1]:23 [ current_ypos#13 current_ypos#98 current_ypos#99 ]
Allocated zp[1]:24 [ render_screen_render#33 render_screen_render#65 ]
Allocated zp[1]:25 [ current_xpos#59 current_xpos#119 current_xpos#120 ]
Allocated zp[2]:26 [ current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 ]
Allocated zp[1]:28 [ current_piece_char#68 current_piece_char#100 current_piece_char#101 ]
Allocated zp[1]:29 [ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ]
Allocated zp[1]:30 [ render_moving::l#4 render_moving::l#1 ]
Allocated zp[1]:31 [ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ]
Allocated zp[1]:32 [ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ]
Allocated zp[1]:33 [ render_moving::c#2 render_moving::c#1 ]
Allocated zp[1]:34 [ render_screen_render#22 render_screen_render#64 ]
Allocated zp[1]:35 [ render_playfield::l#2 render_playfield::l#1 ]
Allocated zp[1]:36 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Allocated zp[2]:37 [ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ]
Allocated zp[1]:39 [ render_playfield::c#2 render_playfield::c#1 ]
Allocated zp[1]:40 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 ]
Allocated zp[1]:41 [ play_move_rotate::return#2 ]
Allocated zp[1]:42 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
Allocated zp[2]:43 [ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 ]
Allocated zp[1]:45 [ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
Allocated zp[1]:46 [ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ]
Allocated zp[1]:47 [ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ]
Allocated zp[1]:48 [ play_collision::l#6 play_collision::l#1 ]
Allocated zp[1]:49 [ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ]
Allocated zp[1]:50 [ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ]
Allocated zp[1]:51 [ play_collision::c#2 play_collision::c#1 ]
Allocated zp[1]:52 [ play_collision::return#15 ]
Allocated zp[1]:53 [ play_move_leftright::return#2 ]
Allocated zp[1]:54 [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ]
Allocated zp[1]:55 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#6 current_ypos#19 ]
Allocated zp[2]:56 [ lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ]
Allocated zp[1]:58 [ level#33 level#10 level#17 level#19 level#21 ]
Allocated zp[1]:59 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#1 current_movedown_slow#21 current_movedown_slow#23 current_movedown_slow#65 current_movedown_slow#10 ]
Allocated zp[1]:60 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
Allocated zp[2]:61 [ current_piece#28 current_piece#10 current_piece#101 current_piece#15 current_piece#93 ]
Allocated zp[1]:63 [ current_piece_char#29 current_piece_char#10 current_piece_char#5 current_piece_char#16 ]
Allocated zp[1]:64 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
Allocated zp[2]:65 [ current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#123 current_piece_gfx#18 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#117 ]
Allocated zp[1]:67 [ current_xpos#43 current_xpos#14 current_xpos#100 current_xpos#19 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
Allocated zp[1]:68 [ play_move_down::return#3 ]
Allocated zp[1]:69 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 play_spawn_current::piece_idx#2 next_piece_idx#16 play_spawn_current::piece_idx#1 ]
Allocated zp[1]:70 [ game_over#65 game_over#27 game_over#10 game_over#52 game_over#15 ]
Allocated zp[1]:71 [ play_increase_level::b#2 play_increase_level::b#1 ]
Allocated zp[1]:72 [ play_remove_lines::y#8 play_remove_lines::y#1 ]
Allocated zp[1]:73 [ play_remove_lines::removed#11 play_remove_lines::removed#7 play_remove_lines::removed#1 ]
Allocated zp[1]:74 [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ]
Allocated zp[1]:75 [ play_remove_lines::x#2 play_remove_lines::x#1 ]
Allocated zp[1]:76 [ play_remove_lines::full#4 play_remove_lines::full#2 ]
Allocated zp[1]:77 [ play_remove_lines::w#6 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 play_remove_lines::w#3 ]
Allocated zp[1]:78 [ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ]
Allocated zp[1]:79 [ play_lock_current::l#6 play_lock_current::l#1 ]
Allocated zp[1]:80 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ]
Allocated zp[1]:81 [ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ]
Allocated zp[1]:82 [ play_lock_current::c#2 play_lock_current::c#1 ]
Allocated zp[1]:83 [ keyboard_event_pressed::keycode#5 ]
Allocated zp[1]:84 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
Allocated zp[1]:85 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Allocated zp[1]:86 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Allocated zp[1]:87 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Allocated zp[1]:88 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
Allocated zp[1]:89 [ render_show::d018val#3 ]
Allocated zp[1]:90 [ play_init::j#2 play_init::j#1 ]
Allocated zp[2]:91 [ play_init::pli#2 play_init::pli#1 ]
Allocated zp[1]:93 [ play_init::idx#2 play_init::idx#1 ]
Allocated zp[1]:94 [ play_init::b#2 play_init::b#1 ]
Allocated zp[1]:95 [ sprites_init::s#2 sprites_init::s#1 ]
Allocated zp[1]:96 [ sprites_init::xpos#2 sprites_init::xpos#1 ]
Allocated zp[1]:97 [ render_init::i#2 render_init::i#1 ]
Allocated zp[2]:98 [ render_init::li_1#2 render_init::li_1#1 ]
Allocated zp[2]:100 [ render_init::li_2#2 render_init::li_2#1 ]
Allocated zp[1]:102 [ render_screen_original::y#6 render_screen_original::y#1 ]
Allocated zp[2]:103 [ render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 ]
Allocated zp[2]:105 [ render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ]
Allocated zp[2]:107 [ render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ]
Allocated zp[2]:109 [ render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 ]
Allocated zp[1]:111 [ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
Allocated zp[1]:112 [ render_screen_showing ]
Allocated zp[4]:113 [ score_bcd ]
Allocated zp[1]:117 [ irq_raster_next ]
Allocated zp[1]:118 [ irq_sprite_ypos ]
Allocated zp[1]:119 [ irq_sprite_ptr ]
Allocated zp[1]:120 [ irq_cnt ]
Allocated zp[1]:121 [ keyboard_event_get::return#3 ]
Allocated zp[1]:122 [ main::key_event#0 ]
Allocated zp[1]:123 [ play_movement::key_event#0 ]
Allocated zp[1]:124 [ play_movement::return#3 ]
Allocated zp[1]:125 [ main::render#1 ]
Allocated zp[1]:126 [ render_bcd::$5 ]
Allocated zp[1]:127 [ render_bcd::$6 ]
Allocated zp[1]:128 [ render_bcd::$3 ]
Allocated zp[1]:129 [ render_bcd::$4 ]
Allocated zp[1]:130 [ render_next::$6 ]
Allocated zp[1]:131 [ render_next::next_piece_char#0 ]
Allocated zp[1]:132 [ render_next::cell#0 ]
Allocated zp[1]:133 [ render_moving::$1 ]
Allocated zp[1]:134 [ render_moving::$6 ]
Allocated zp[2]:135 [ render_moving::screen_line#0 ]
Allocated zp[1]:137 [ render_moving::current_cell#0 ]
Allocated zp[1]:138 [ render_playfield::$0 ]
Allocated zp[1]:139 [ render_playfield::$3 ]
Allocated zp[1]:140 [ play_move_down::key_event#0 ]
Allocated zp[1]:141 [ play_move_down::return#0 ]
Allocated zp[1]:142 [ play_move_leftright::key_event#0 ]
Allocated zp[1]:143 [ play_move_leftright::return#0 ]
Allocated zp[1]:144 [ play_movement::$3 ]
Allocated zp[1]:145 [ play_movement::render#2 ]
Allocated zp[1]:146 [ play_move_rotate::key_event#0 ]
Allocated zp[1]:147 [ play_move_rotate::return#0 ]
Allocated zp[1]:148 [ play_movement::$4 ]
Allocated zp[1]:149 [ play_move_rotate::$5 ]
Allocated zp[1]:150 [ play_collision::return#14 ]
Allocated zp[1]:151 [ play_move_rotate::$2 ]
Allocated zp[1]:152 [ play_move_rotate::$7 ]
Allocated zp[2]:153 [ play_collision::piece_gfx#0 ]
Allocated zp[1]:155 [ play_collision::$14 ]
Allocated zp[2]:156 [ play_collision::playfield_line#0 ]
Allocated zp[1]:158 [ play_collision::i#1 ]
Allocated zp[1]:159 [ play_collision::$5 ]
Allocated zp[1]:160 [ play_collision::return#13 ]
Allocated zp[1]:161 [ play_move_leftright::$4 ]
Allocated zp[1]:162 [ play_collision::return#1 ]
Allocated zp[1]:163 [ play_move_leftright::$8 ]
Allocated zp[1]:164 [ keyboard_event_pressed::return#12 ]
Allocated zp[1]:165 [ play_move_down::$2 ]
Allocated zp[1]:166 [ play_collision::return#0 ]
Allocated zp[1]:167 [ play_move_down::$12 ]
Allocated zp[1]:168 [ play_remove_lines::return#0 ]
Allocated zp[1]:169 [ play_move_down::removed#0 ]
Allocated zp[1]:170 [ play_update_score::removed#0 ]
Allocated zp[1]:171 [ play_spawn_current::current_piece_idx#0 ]
Allocated zp[1]:172 [ play_spawn_current::$7 ]
Allocated zp[1]:173 [ play_collision::return#10 ]
Allocated zp[1]:174 [ play_spawn_current::$1 ]
Allocated zp[1]:175 [ play_spawn_current::sid_rnd1_return#0 ]
Allocated zp[1]:176 [ play_update_score::$2 ]
Allocated zp[1]:177 [ play_update_score::lines_before#0 ]
Allocated zp[1]:178 [ play_update_score::$9 ]
Allocated zp[4]:179 [ play_update_score::add_bcd#0 ]
Allocated zp[1]:183 [ play_update_score::$4 ]
Allocated zp[1]:184 [ play_update_score::lines_after#0 ]
Allocated zp[1]:185 [ play_increase_level::$1 ]
Allocated zp[1]:186 [ play_increase_level::$5 ]
Allocated zp[1]:187 [ play_remove_lines::c#0 ]
Allocated zp[1]:188 [ play_lock_current::$4 ]
Allocated zp[2]:189 [ play_lock_current::playfield_line#0 ]
Allocated zp[1]:191 [ play_lock_current::i#1 ]
Allocated zp[1]:192 [ keyboard_event_pressed::$0 ]
Allocated zp[1]:193 [ keyboard_event_pressed::row_bits#0 ]
Allocated zp[1]:194 [ keyboard_event_pressed::$1 ]
Allocated zp[1]:195 [ keyboard_event_pressed::return#11 ]
Allocated zp[1]:196 [ keyboard_matrix_read::rowid#0 ]
Allocated zp[1]:197 [ keyboard_matrix_read::return#2 ]
Allocated zp[1]:198 [ keyboard_event_scan::row_scan#0 ]
Allocated zp[1]:199 [ keyboard_event_pressed::return#0 ]
Allocated zp[1]:200 [ keyboard_event_scan::$0 ]
Allocated zp[1]:201 [ keyboard_event_pressed::return#1 ]
Allocated zp[1]:202 [ keyboard_event_scan::$3 ]
Allocated zp[1]:203 [ keyboard_event_pressed::return#2 ]
Allocated zp[1]:204 [ keyboard_event_scan::$6 ]
Allocated zp[1]:205 [ keyboard_event_pressed::return#10 ]
Allocated zp[1]:206 [ keyboard_event_scan::$9 ]
Allocated zp[1]:207 [ keyboard_event_scan::$15 ]
Allocated zp[1]:208 [ keyboard_event_scan::$16 ]
Allocated zp[1]:209 [ keyboard_event_scan::event_type#0 ]
Allocated zp[1]:210 [ keyboard_event_scan::$23 ]
Allocated zp[1]:211 [ keyboard_matrix_read::return#0 ]
Allocated zp[1]:212 [ play_init::$2 ]
Allocated zp[1]:213 [ play_init::$3 ]
Allocated zp[1]:214 [ sprites_init::s2#0 ]
Allocated zp[1]:215 [ render_init::$5 ]
Allocated zp[1]:216 [ sprites_irq::ypos#0 ]
Allocated zp[1]:217 [ sprites_irq::$0 ]
Allocated zp[1]:218 [ sprites_irq::raster_sprite_gfx_modify ]
Allocated zp[1]:219 [ sprites_irq::ptr#0 ]
Allocated zp[1]:220 [ sprites_irq::ptr#3 ]
Allocated zp[1]:221 [ sprites_irq::ptr#4 ]
Allocated zp[1]:222 [ sprites_irq::ptr#1 ]
Allocated zp[1]:223 [ sprites_irq::ptr#2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tetris Game for the Commodore 64
// The tetris game tries to match NES tetris gameplay pretty closely
// Source: https://meatfighter.com/nintendotetrisai/
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // SID Channel Control Register Noise Waveform
  .const SID_CONTROL_NOISE = $80
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = 5
  // The offset of the sprite pointers from the screen start address
  .const SPRITE_PTRS = $3f8
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label SPRITES_COLS = $d027
  .label VIC_CONTROL = $d011
  .label D011 = $d011
  .const VIC_ECM = $40
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D018 = $d018
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Color Ram
  .label COLS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // CIA#1 Interrupt for reading in ASM
  .label CIA1_INTERRUPT = $dc0d
  // The SID MOD 6581/8580
  .label SID = $d400
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  // The colors of the C64
  .const BLACK = 0
  .const RED = 2
  .const CYAN = 3
  .const PURPLE = 4
  .const GREEN = 5
  .const BLUE = 6
  .const ORANGE = 8
  .const PINK = $a
  .const DARK_GREY = $b
  .const GREY = $c
  .const LIGHT_GREEN = $d
  .const LIGHT_BLUE = $e
  .const KEY_Z = $c
  .const KEY_LSHIFT = $f
  .const KEY_X = $17
  .const KEY_DOT = $2c
  .const KEY_COMMA = $2f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  // Address of the first screen
  .label PLAYFIELD_SCREEN_1 = $400
  // Address of the second screen
  .label PLAYFIELD_SCREEN_2 = $2c00
  // Screen Sprite pointers on screen 1
  .label PLAYFIELD_SPRITE_PTRS_1 = PLAYFIELD_SCREEN_1+SPRITE_PTRS
  // Screen Sprite pointers on screen 2
  .label PLAYFIELD_SPRITE_PTRS_2 = PLAYFIELD_SCREEN_2+SPRITE_PTRS
  // Address of the sprites covering the playfield
  .label PLAYFIELD_SPRITES = $3000
  // Address of the charset
  .label PLAYFIELD_CHARSET = $2800
  // The size of the playfield
  .const PLAYFIELD_LINES = $16
  .const PLAYFIELD_COLS = $a
  // The Y-position of the first sprite row
  .const SPRITES_FIRST_YPOS = $31
  // The line of the first IRQ
  .const IRQ_RASTER_FIRST = SPRITES_FIRST_YPOS+$13
  // The rate of moving down the current piece fast (number of frames between moves if movedown is not forced)
  .const current_movedown_fast = $a
  // No collision
  .const COLLISION_NONE = 0
  // Playfield piece collision (cell on top of other cell on the playfield)
  .const COLLISION_PLAYFIELD = 1
  // Bottom collision (cell below bottom of the playfield)
  .const COLLISION_BOTTOM = 2
  // Left side collision (cell beyond the left side of the playfield)
  .const COLLISION_LEFT = 4
  // Right side collision (cell beyond the right side of the playfield)
  .const COLLISION_RIGHT = 8
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .const OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = $e
  .const OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = $12
  .const OFFSET_STRUCT_MOS6581_SID_CH3_OSC = $1b
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .const toSpritePtr1_return = PLAYFIELD_SPRITES/$40
  .label render_screen_showing = $70
  .label score_bcd = $71
  .label irq_raster_next = $75
  .label irq_sprite_ypos = $76
  .label irq_sprite_ptr = $77
  .label irq_cnt = $78
  // Keyboard event buffer size. The number of events currently in the event buffer
  .label keyboard_events_size = $58
  // The rate of moving down the current piece (number of frames between moves if movedown is  not forced)
  .label current_movedown_slow = $3b
  .label current_ypos = $37
  // Position of top left corner of current moving piece on the playfield
  .label current_xpos = $43
  // The curent piece orientation - each piece have 4 orientations (00/0x10/0x20/0x30).
  // The orientation chooses one of the 4 sub-graphics of the piece.
  .label current_orientation = $40
  // Pointer to the current piece in the current orientation. Updated each time current_orientation is updated.
  .label current_piece_gfx = $41
  // The char of the current piece
  .label current_piece_char = $3f
  // Current level BCD-format
  .label level_bcd = $3c
  // The current moving piece. Points to the start of the piece definition.
  .label current_piece = $3d
  // Is the game over?
  .label game_over = $46
  // The index of the next moving piece. (0-6)
  .label next_piece_idx = $45
  // Current level in normal (non-BCD) format
  .label level = $3a
  // The screen currently being rendered to. 0x00 for screen 1 / 0x20 for screen 2.
  .label render_screen_render = 3
  // The screen currently to show next to the user. 0x00 for screen 1 / 0x20 for screen 2.
  // Show showing screen 1 and rendering to screen 2
  .label render_screen_show = 2
  .label current_ypos_1 = $17
  // The screen currently being rendered to. 0x00 for screen 1 / 0x20 for screen 2.
  .label render_screen_render_1 = $f
  // The index of the next moving piece. (0-6)
  .label next_piece_idx_1 = $10
  // Counts up to the next movedown of current piece
  .label current_movedown_counter = 4
  // Current number of cleared lines in BCD-format
  .label lines_bcd = $38
  // The current moving piece. Points to the start of the piece definition.
  .label current_piece_1 = $2b
  // The screen currently being rendered to. 0x00 for screen 1 / 0x20 for screen 2.
  .label render_screen_render_2 = $22
  // The screen currently being rendered to. 0x00 for screen 1 / 0x20 for screen 2.
  .label render_screen_render_3 = $18
  // Position of top left corner of current moving piece on the playfield
  .label current_xpos_1 = $19
  // Pointer to the current piece in the current orientation. Updated each time current_orientation is updated.
  .label current_piece_gfx_1 = $1a
  // The char of the current piece
  .label current_piece_char_1 = $1c
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (volatile byte) render_screen_showing ← (byte) 0 -- vbuz1=vbuc1 
  // The screen currently being showed to the user. 0x00 for screen 1 / 0x20 for screen 2.
  lda #0
  sta.z render_screen_showing
  // [2] (volatile dword) score_bcd ← (dword) 0 -- vduz1=vduc1 
  // Current score in BCD-format
  lda #<0
  sta.z score_bcd
  lda #>0
  sta.z score_bcd+1
  lda #<0>>$10
  sta.z score_bcd+2
  lda #>0>>$10
  sta.z score_bcd+3
  // kickasm(location (const nomodify byte*) PLAYFIELD_CHARSET) {{ .fill 8,$00 // Place a filled char at the start of the charset     .import binary "playfield-screen.imap"  }}
  jmp __b2
  // @2
__b2:
  // kickasm(location (const nomodify byte*) PLAYFIELD_SPRITES) {{ .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000)) 	// Put the sprites into memory  	.for(var sy=0;sy<10;sy++) { 	    .var sprite_gfx_y = sy*20 		.for(var sx=0;sx<3;sx++) { 	    	.for (var y=0;y<21; y++) { 	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21) 		    	.for (var c=0; c<3; c++) { 	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y) 	            } 	        } 	    	.byte 0 	  	} 	}  }}
  jmp __b3
  // @3
__b3:
  // [5] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST -- vbuz1=vbuc1 
  // The raster line of the next IRQ
  lda #IRQ_RASTER_FIRST
  sta.z irq_raster_next
  // [6] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS+(byte) $15 -- vbuz1=vbuc1 
  // Y-pos of the sprites on the next IRQ
  lda #SPRITES_FIRST_YPOS+$15
  sta.z irq_sprite_ypos
  // [7] phi from @3 to toSpritePtr1 [phi:@3->toSpritePtr1]
toSpritePtr1_from___b3:
  jmp toSpritePtr1
  // toSpritePtr1
toSpritePtr1:
  jmp __b5
  // @5
__b5:
  // [8] (volatile byte) irq_sprite_ptr ← (const byte) toSpritePtr1_return#0+(byte) 3 -- vbuz1=vbuc1 
  // Index of the sprites to show on the next IRQ
  lda #toSpritePtr1_return+3
  sta.z irq_sprite_ptr
  // [9] (volatile byte) irq_cnt ← (byte) 0 -- vbuz1=vbuc1 
  // Counting the 10 IRQs
  lda #0
  sta.z irq_cnt
  // [10] phi from @5 to @4 [phi:@5->@4]
__b4_from___b5:
  jmp __b4
  // @4
__b4:
  // [11] call main 
  // [13] phi from @4 to main [phi:@4->main]
main_from___b4:
  jsr main
  // [12] phi from @4 to @end [phi:@4->@end]
__bend_from___b4:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label key_event = $7a
    .label render = $7d
    jmp sid_rnd_init1
    // main::sid_rnd_init1
  sid_rnd_init1:
    // [14] *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (word) $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ
    lda #>$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ+1
    // [15] *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL
    jmp __b8
    // main::@8
  __b8:
    // asm { sei  }
    sei
    // [17] call render_init 
    // [497] phi from main::@8 to render_init [phi:main::@8->render_init]
  render_init_from___b8:
    jsr render_init
    // [18] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [19] call sprites_init 
    jsr sprites_init
    // [20] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b10_from___b9:
    jmp __b10
    // main::@10
  __b10:
    // [21] call sprites_irq_init 
    jsr sprites_irq_init
    // [22] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  __b11_from___b10:
    jmp __b11
    // main::@11
  __b11:
    // [23] call play_init 
    // [456] phi from main::@11 to play_init [phi:main::@11->play_init]
  play_init_from___b11:
    jsr play_init
    // [24] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  __b12_from___b11:
    jmp __b12
    // main::@12
  __b12:
    // [25] call play_spawn_current 
  // Spawn twice to spawn both current & next
    // [286] phi from main::@12 to play_spawn_current [phi:main::@12->play_spawn_current]
  play_spawn_current_from___b12:
    // [286] phi (byte) game_over#65 = (byte) 0 [phi:main::@12->play_spawn_current#0] -- vbuz1=vbuc1 
    lda #0
    sta.z game_over
    // [286] phi (byte) next_piece_idx#17 = (byte) 0 [phi:main::@12->play_spawn_current#1] -- vbuz1=vbuc1 
    lda #0
    sta.z next_piece_idx
    jsr play_spawn_current
    // [26] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  __b13_from___b12:
    jmp __b13
    // main::@13
  __b13:
    // [27] call play_spawn_current 
    // [286] phi from main::@13 to play_spawn_current [phi:main::@13->play_spawn_current]
  play_spawn_current_from___b13:
    // [286] phi (byte) game_over#65 = (byte) game_over#52 [phi:main::@13->play_spawn_current#0] -- register_copy 
    // [286] phi (byte) next_piece_idx#17 = (byte) play_spawn_current::piece_idx#2 [phi:main::@13->play_spawn_current#1] -- register_copy 
    jsr play_spawn_current
    // [28] phi from main::@13 to main::@14 [phi:main::@13->main::@14]
  __b14_from___b13:
    jmp __b14
    // main::@14
  __b14:
    // [29] call render_playfield 
    // [151] phi from main::@14 to render_playfield [phi:main::@14->render_playfield]
  render_playfield_from___b14:
    // [151] phi (byte) render_screen_render#22 = (byte) $20 [phi:main::@14->render_playfield#0] -- vbuz1=vbuc1 
    lda #$20
    sta.z render_screen_render_2
    jsr render_playfield
    jmp __b15
    // main::@15
  __b15:
    // [30] (byte) current_ypos#98 ← (byte) current_ypos#6 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z current_ypos_1
    // [31] (byte) current_xpos#119 ← (byte) current_xpos#100 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z current_xpos_1
    // [32] (byte*) current_piece_gfx#112 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current.__7
    lda PIECES,y
    sta.z current_piece_gfx_1
    lda PIECES+1,y
    sta.z current_piece_gfx_1+1
    // [33] (byte) current_piece_char#100 ← (byte) current_piece_char#5 -- vbuz1=vbuz2 
    lda.z current_piece_char
    sta.z current_piece_char_1
    // [34] call render_moving 
    // [129] phi from main::@15 to render_moving [phi:main::@15->render_moving]
  render_moving_from___b15:
    // [129] phi (byte) current_piece_char#68 = (byte) current_piece_char#100 [phi:main::@15->render_moving#0] -- register_copy 
    // [129] phi (byte*) current_piece_gfx#64 = (byte*) current_piece_gfx#112 [phi:main::@15->render_moving#1] -- register_copy 
    // [129] phi (byte) current_xpos#59 = (byte) current_xpos#119 [phi:main::@15->render_moving#2] -- register_copy 
    // [129] phi (byte) render_screen_render#33 = (byte) $20 [phi:main::@15->render_moving#3] -- vbuz1=vbuc1 
    lda #$20
    sta.z render_screen_render_3
    // [129] phi (byte) current_ypos#13 = (byte) current_ypos#98 [phi:main::@15->render_moving#4] -- register_copy 
    jsr render_moving
    jmp __b16
    // main::@16
  __b16:
    // [35] (byte) next_piece_idx#77 ← (byte) play_spawn_current::piece_idx#2 -- vbuz1=vbuz2 
    lda.z play_spawn_current.piece_idx
    sta.z next_piece_idx_1
    // [36] call render_next 
    // [108] phi from main::@16 to render_next [phi:main::@16->render_next]
  render_next_from___b16:
    // [108] phi (byte) next_piece_idx#12 = (byte) next_piece_idx#77 [phi:main::@16->render_next#0] -- register_copy 
    // [108] phi (byte) render_screen_render#15 = (byte) $20 [phi:main::@16->render_next#1] -- vbuz1=vbuc1 
    lda #$20
    sta.z render_screen_render_1
    jsr render_next
    jmp __b17
    // main::@17
  __b17:
    // [37] (byte*) current_piece#101 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current.__7
    lda PIECES,y
    sta.z current_piece
    lda PIECES+1,y
    sta.z current_piece+1
    // [38] (byte*) current_piece_gfx#123 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current.__7
    lda PIECES,y
    sta.z current_piece_gfx
    lda PIECES+1,y
    sta.z current_piece_gfx+1
    // [39] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
  __b1_from___b17:
    // [39] phi (byte) level_bcd#11 = (byte) 0 [phi:main::@17->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z level_bcd
    // [39] phi (byte) level#10 = (byte) 0 [phi:main::@17->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z level
    // [39] phi (word) lines_bcd#19 = (word) 0 [phi:main::@17->main::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z lines_bcd
    lda #>0
    sta.z lines_bcd+1
    // [39] phi (byte) current_movedown_counter#16 = (byte) 0 [phi:main::@17->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z current_movedown_counter
    // [39] phi (byte) keyboard_events_size#19 = (byte) 0 [phi:main::@17->main::@1#4] -- vbuz1=vbuc1 
    lda #0
    sta.z keyboard_events_size
    // [39] phi (byte) next_piece_idx#10 = (byte) play_spawn_current::piece_idx#2 [phi:main::@17->main::@1#5] -- register_copy 
    // [39] phi (byte) game_over#10 = (byte) game_over#52 [phi:main::@17->main::@1#6] -- register_copy 
    // [39] phi (byte) current_ypos#11 = (byte) current_ypos#6 [phi:main::@17->main::@1#7] -- register_copy 
    // [39] phi (byte) current_xpos#14 = (byte) current_xpos#100 [phi:main::@17->main::@1#8] -- register_copy 
    // [39] phi (byte*) current_piece_gfx#13 = (byte*) current_piece_gfx#123 [phi:main::@17->main::@1#9] -- register_copy 
    // [39] phi (byte) current_orientation#13 = (byte) 0 [phi:main::@17->main::@1#10] -- vbuz1=vbuc1 
    lda #0
    sta.z current_orientation
    // [39] phi (byte) current_piece_char#10 = (byte) current_piece_char#5 [phi:main::@17->main::@1#11] -- register_copy 
    // [39] phi (byte*) current_piece#10 = (byte*) current_piece#101 [phi:main::@17->main::@1#12] -- register_copy 
    // [39] phi (byte) current_movedown_slow#14 = (byte) current_movedown_slow#1 [phi:main::@17->main::@1#13] -- register_copy 
    // [39] phi (byte) render_screen_render#18 = (byte) $20 [phi:main::@17->main::@1#14] -- vbuz1=vbuc1 
    lda #$20
    sta.z render_screen_render
    // [39] phi (byte) render_screen_show#16 = (byte) 0 [phi:main::@17->main::@1#15] -- vbuz1=vbuc1 
    lda #0
    sta.z render_screen_show
    jmp __b1
    // [39] phi from main::@25 main::@6 to main::@1 [phi:main::@25/main::@6->main::@1]
  __b1_from___b25:
  __b1_from___b6:
    // [39] phi (byte) level_bcd#11 = (byte) level_bcd#17 [phi:main::@25/main::@6->main::@1#0] -- register_copy 
    // [39] phi (byte) level#10 = (byte) level#17 [phi:main::@25/main::@6->main::@1#1] -- register_copy 
    // [39] phi (word) lines_bcd#19 = (word) lines_bcd#15 [phi:main::@25/main::@6->main::@1#2] -- register_copy 
    // [39] phi (byte) current_movedown_counter#16 = (byte) current_movedown_counter#14 [phi:main::@25/main::@6->main::@1#3] -- register_copy 
    // [39] phi (byte) keyboard_events_size#19 = (byte) keyboard_events_size#16 [phi:main::@25/main::@6->main::@1#4] -- register_copy 
    // [39] phi (byte) next_piece_idx#10 = (byte) next_piece_idx#16 [phi:main::@25/main::@6->main::@1#5] -- register_copy 
    // [39] phi (byte) game_over#10 = (byte) game_over#15 [phi:main::@25/main::@6->main::@1#6] -- register_copy 
    // [39] phi (byte) current_ypos#11 = (byte) current_ypos#19 [phi:main::@25/main::@6->main::@1#7] -- register_copy 
    // [39] phi (byte) current_xpos#14 = (byte) current_xpos#19 [phi:main::@25/main::@6->main::@1#8] -- register_copy 
    // [39] phi (byte*) current_piece_gfx#13 = (byte*) current_piece_gfx#18 [phi:main::@25/main::@6->main::@1#9] -- register_copy 
    // [39] phi (byte) current_orientation#13 = (byte) current_orientation#17 [phi:main::@25/main::@6->main::@1#10] -- register_copy 
    // [39] phi (byte) current_piece_char#10 = (byte) current_piece_char#16 [phi:main::@25/main::@6->main::@1#11] -- register_copy 
    // [39] phi (byte*) current_piece#10 = (byte*) current_piece#15 [phi:main::@25/main::@6->main::@1#12] -- register_copy 
    // [39] phi (byte) current_movedown_slow#14 = (byte) current_movedown_slow#21 [phi:main::@25/main::@6->main::@1#13] -- register_copy 
    // [39] phi (byte) render_screen_render#18 = (byte) render_screen_render#11 [phi:main::@25/main::@6->main::@1#14] -- register_copy 
    // [39] phi (byte) render_screen_show#16 = (byte) render_screen_show#13 [phi:main::@25/main::@6->main::@1#15] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
  // Wait for a frame to pass
    // main::@2
  __b2:
    // [40] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b2
    // [41] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [42] call render_show 
    //*BORDERCOL = render_screen_show/0x10;
    // Update D018 to show the selected screen
    jsr render_show
    // [43] phi from main::@3 to main::@18 [phi:main::@3->main::@18]
  __b18_from___b3:
    jmp __b18
    // main::@18
  __b18:
    // [44] call keyboard_event_scan 
  // Scan keyboard events
    // [391] phi from main::@18 to keyboard_event_scan [phi:main::@18->keyboard_event_scan]
  keyboard_event_scan_from___b18:
    jsr keyboard_event_scan
    // [45] phi from main::@18 to main::@19 [phi:main::@18->main::@19]
  __b19_from___b18:
    jmp __b19
    // main::@19
  __b19:
    // [46] call keyboard_event_get 
    jsr keyboard_event_get
    // [47] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2 -- vbuz1=vbuz2 
    lda.z keyboard_event_get.return
    sta.z keyboard_event_get.return_1
    jmp __b20
    // main::@20
  __b20:
    // [48] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3 -- vbuz1=vbuz2 
    lda.z keyboard_event_get.return_1
    sta.z key_event
    // [49] if((byte) game_over#10==(byte) 0) goto main::@4 -- vbuz1_eq_0_then_la1 
    lda.z game_over
    cmp #0
    beq __b4
    jmp __b5
    // main::@5
  __b5:
    // [50] *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp __b5
    // main::@4
  __b4:
    // [51] (byte) play_movement::key_event#0 ← (byte) main::key_event#0 -- vbuz1=vbuz2 
    lda.z key_event
    sta.z play_movement.key_event
    // [52] call play_movement 
    jsr play_movement
    // [53] (byte) play_movement::return#3 ← (byte) play_movement::return#2 -- vbuz1=vbuz2 
    lda.z play_movement.return
    sta.z play_movement.return_1
    jmp __b21
    // main::@21
  __b21:
    // [54] (byte) main::render#1 ← (byte) play_movement::return#3 -- vbuz1=vbuz2 
    lda.z play_movement.return_1
    sta.z render
    jmp __b6
    // main::@6
  __b6:
    // [55] if((byte) main::render#1==(byte) 0) goto main::@1 -- vbuz1_eq_0_then_la1 
    lda.z render
    cmp #0
    beq __b1_from___b6
    jmp __b7
    // main::@7
  __b7:
    // [56] (byte) render_screen_render#64 ← (byte) render_screen_render#18 -- vbuz1=vbuz2 
    lda.z render_screen_render
    sta.z render_screen_render_2
    // [57] call render_playfield 
    // [151] phi from main::@7 to render_playfield [phi:main::@7->render_playfield]
  render_playfield_from___b7:
    // [151] phi (byte) render_screen_render#22 = (byte) render_screen_render#64 [phi:main::@7->render_playfield#0] -- register_copy 
    jsr render_playfield
    jmp __b22
    // main::@22
  __b22:
    // [58] (byte) current_ypos#99 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z current_ypos_1
    // [59] (byte) render_screen_render#65 ← (byte) render_screen_render#18 -- vbuz1=vbuz2 
    lda.z render_screen_render
    sta.z render_screen_render_3
    // [60] (byte) current_xpos#120 ← (byte) current_xpos#19 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z current_xpos_1
    // [61] (byte*) current_piece_gfx#113 ← (byte*) current_piece_gfx#18 -- pbuz1=pbuz2 
    lda.z current_piece_gfx
    sta.z current_piece_gfx_1
    lda.z current_piece_gfx+1
    sta.z current_piece_gfx_1+1
    // [62] (byte) current_piece_char#101 ← (byte) current_piece_char#16 -- vbuz1=vbuz2 
    lda.z current_piece_char
    sta.z current_piece_char_1
    // [63] call render_moving 
    // [129] phi from main::@22 to render_moving [phi:main::@22->render_moving]
  render_moving_from___b22:
    // [129] phi (byte) current_piece_char#68 = (byte) current_piece_char#101 [phi:main::@22->render_moving#0] -- register_copy 
    // [129] phi (byte*) current_piece_gfx#64 = (byte*) current_piece_gfx#113 [phi:main::@22->render_moving#1] -- register_copy 
    // [129] phi (byte) current_xpos#59 = (byte) current_xpos#120 [phi:main::@22->render_moving#2] -- register_copy 
    // [129] phi (byte) render_screen_render#33 = (byte) render_screen_render#65 [phi:main::@22->render_moving#3] -- register_copy 
    // [129] phi (byte) current_ypos#13 = (byte) current_ypos#99 [phi:main::@22->render_moving#4] -- register_copy 
    jsr render_moving
    jmp __b23
    // main::@23
  __b23:
    // [64] (byte) render_screen_render#66 ← (byte) render_screen_render#18 -- vbuz1=vbuz2 
    lda.z render_screen_render
    sta.z render_screen_render_1
    // [65] (byte) next_piece_idx#78 ← (byte) next_piece_idx#16 -- vbuz1=vbuz2 
    lda.z next_piece_idx
    sta.z next_piece_idx_1
    // [66] call render_next 
    // [108] phi from main::@23 to render_next [phi:main::@23->render_next]
  render_next_from___b23:
    // [108] phi (byte) next_piece_idx#12 = (byte) next_piece_idx#78 [phi:main::@23->render_next#0] -- register_copy 
    // [108] phi (byte) render_screen_render#15 = (byte) render_screen_render#66 [phi:main::@23->render_next#1] -- register_copy 
    jsr render_next
    // [67] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
  __b24_from___b23:
    jmp __b24
    // main::@24
  __b24:
    // [68] call render_score 
    jsr render_score
    // [69] phi from main::@24 to main::@25 [phi:main::@24->main::@25]
  __b25_from___b24:
    jmp __b25
    // main::@25
  __b25:
    // [70] call render_screen_swap 
    jsr render_screen_swap
    jmp __b1_from___b25
}
  // render_screen_swap
// Swap rendering to the other screen (used for double buffering)
render_screen_swap: {
    // [71] (byte) render_screen_render#11 ← (byte) render_screen_render#18 ^ (byte) $20 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #$20
    eor.z render_screen_render
    sta.z render_screen_render
    // [72] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte) $20 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #$20
    eor.z render_screen_show
    sta.z render_screen_show
    jmp __breturn
    // render_screen_swap::@return
  __breturn:
    // [73] return 
    rts
}
  // render_score
// Show the current score
render_score: {
    .label score_bytes = score_bcd
    .const score_offset = $28*5+$1c
    .const lines_offset = $28*1+$16
    .const level_offset = $28*$13+$1f
    .label screen = 5
    // [74] if((byte) render_screen_render#18==(byte) 0) goto render_score::@1 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_render
    cmp #0
    beq __b1_from_render_score
    // [76] phi from render_score to render_score::@2 [phi:render_score->render_score::@2]
  __b2_from_render_score:
    // [76] phi (byte*) render_score::screen#3 = (const nomodify byte*) PLAYFIELD_SCREEN_2 [phi:render_score->render_score::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2
    sta.z screen
    lda #>PLAYFIELD_SCREEN_2
    sta.z screen+1
    jmp __b2
    // [75] phi from render_score to render_score::@1 [phi:render_score->render_score::@1]
  __b1_from_render_score:
    jmp __b1
    // render_score::@1
  __b1:
    // [76] phi from render_score::@1 to render_score::@2 [phi:render_score::@1->render_score::@2]
  __b2_from___b1:
    // [76] phi (byte*) render_score::screen#3 = (const nomodify byte*) PLAYFIELD_SCREEN_1 [phi:render_score::@1->render_score::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1
    sta.z screen
    lda #>PLAYFIELD_SCREEN_1
    sta.z screen+1
    jmp __b2
    // render_score::@2
  __b2:
    // [77] (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3 -- pbuz1=pbuz2 
    lda.z screen
    sta.z render_bcd.screen
    lda.z screen+1
    sta.z render_bcd.screen+1
    // [78] (byte) render_bcd::bcd#0 ← *((const byte*) render_score::score_bytes+(byte) 2) -- vbuz1=_deref_pbuc1 
    lda score_bytes+2
    sta.z render_bcd.bcd
    // [79] call render_bcd 
    // [96] phi from render_score::@2 to render_bcd [phi:render_score::@2->render_bcd]
  render_bcd_from___b2:
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#0 [phi:render_score::@2->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@2->render_bcd#1] -- vbuz1=vbuc1 
    lda #0
    sta.z render_bcd.only_low
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset [phi:render_score::@2->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset
    sta.z render_bcd.offset
    lda #>score_offset
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#0 [phi:render_score::@2->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp __b3
    // render_score::@3
  __b3:
    // [80] (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#3 -- pbuz1=pbuz2 
    lda.z screen
    sta.z render_bcd.screen
    lda.z screen+1
    sta.z render_bcd.screen+1
    // [81] (byte) render_bcd::bcd#1 ← *((const byte*) render_score::score_bytes+(byte) 1) -- vbuz1=_deref_pbuc1 
    lda score_bytes+1
    sta.z render_bcd.bcd
    // [82] call render_bcd 
    // [96] phi from render_score::@3 to render_bcd [phi:render_score::@3->render_bcd]
  render_bcd_from___b3:
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#1 [phi:render_score::@3->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@3->render_bcd#1] -- vbuz1=vbuc1 
    lda #0
    sta.z render_bcd.only_low
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset+(byte) 2 [phi:render_score::@3->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset+2
    sta.z render_bcd.offset
    lda #>score_offset+2
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#1 [phi:render_score::@3->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp __b4
    // render_score::@4
  __b4:
    // [83] (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#3 -- pbuz1=pbuz2 
    lda.z screen
    sta.z render_bcd.screen
    lda.z screen+1
    sta.z render_bcd.screen+1
    // [84] (byte) render_bcd::bcd#2 ← *((const byte*) render_score::score_bytes) -- vbuz1=_deref_pbuc1 
    lda.z score_bytes
    sta.z render_bcd.bcd
    // [85] call render_bcd 
    // [96] phi from render_score::@4 to render_bcd [phi:render_score::@4->render_bcd]
  render_bcd_from___b4:
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#2 [phi:render_score::@4->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@4->render_bcd#1] -- vbuz1=vbuc1 
    lda #0
    sta.z render_bcd.only_low
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset+(byte) 4 [phi:render_score::@4->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset+4
    sta.z render_bcd.offset
    lda #>score_offset+4
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#2 [phi:render_score::@4->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp __b5
    // render_score::@5
  __b5:
    // [86] (byte) render_bcd::bcd#3 ← > (word) lines_bcd#15 -- vbuz1=_hi_vwuz2 
    lda.z lines_bcd+1
    sta.z render_bcd.bcd
    // [87] (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#3 -- pbuz1=pbuz2 
    lda.z screen
    sta.z render_bcd.screen
    lda.z screen+1
    sta.z render_bcd.screen+1
    // [88] call render_bcd 
    // [96] phi from render_score::@5 to render_bcd [phi:render_score::@5->render_bcd]
  render_bcd_from___b5:
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#3 [phi:render_score::@5->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 1 [phi:render_score::@5->render_bcd#1] -- vbuz1=vbuc1 
    lda #1
    sta.z render_bcd.only_low
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::lines_offset [phi:render_score::@5->render_bcd#2] -- vwuz1=vwuc1 
    lda #<lines_offset
    sta.z render_bcd.offset
    lda #>lines_offset
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#3 [phi:render_score::@5->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp __b6
    // render_score::@6
  __b6:
    // [89] (byte) render_bcd::bcd#4 ← < (word) lines_bcd#15 -- vbuz1=_lo_vwuz2 
    lda.z lines_bcd
    sta.z render_bcd.bcd
    // [90] (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#3 -- pbuz1=pbuz2 
    lda.z screen
    sta.z render_bcd.screen
    lda.z screen+1
    sta.z render_bcd.screen+1
    // [91] call render_bcd 
    // [96] phi from render_score::@6 to render_bcd [phi:render_score::@6->render_bcd]
  render_bcd_from___b6:
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#4 [phi:render_score::@6->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@6->render_bcd#1] -- vbuz1=vbuc1 
    lda #0
    sta.z render_bcd.only_low
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::lines_offset+(byte) 1 [phi:render_score::@6->render_bcd#2] -- vwuz1=vwuc1 
    lda #<lines_offset+1
    sta.z render_bcd.offset
    lda #>lines_offset+1
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#4 [phi:render_score::@6->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp __b7
    // render_score::@7
  __b7:
    // [92] (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#3 -- pbuz1=pbuz2 
    lda.z screen
    sta.z render_bcd.screen
    lda.z screen+1
    sta.z render_bcd.screen+1
    // [93] (byte) render_bcd::bcd#5 ← (byte) level_bcd#17 -- vbuz1=vbuz2 
    lda.z level_bcd
    sta.z render_bcd.bcd
    // [94] call render_bcd 
    // [96] phi from render_score::@7 to render_bcd [phi:render_score::@7->render_bcd]
  render_bcd_from___b7:
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#5 [phi:render_score::@7->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@7->render_bcd#1] -- vbuz1=vbuc1 
    lda #0
    sta.z render_bcd.only_low
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::level_offset [phi:render_score::@7->render_bcd#2] -- vwuz1=vwuc1 
    lda #<level_offset
    sta.z render_bcd.offset
    lda #>level_offset
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#5 [phi:render_score::@7->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp __breturn
    // render_score::@return
  __breturn:
    // [95] return 
    rts
}
  // render_bcd
// Render BCD digits on a screen.
// - screen: pointer to the screen to render on
// - offset: offset on the screen
// - bcd: The BCD-value to render
// - only_low: if non-zero only renders the low digit
// render_bcd(byte* zp(7) screen, word zp(9) offset, byte zp($c) bcd, byte zp($b) only_low)
render_bcd: {
    .const ZERO_CHAR = $35
    .label __3 = $80
    .label __4 = $81
    .label __5 = $7e
    .label __6 = $7f
    .label screen = 7
    .label bcd = $c
    .label screen_pos = $d
    .label offset = 9
    .label only_low = $b
    // [97] (byte*) render_bcd::screen_pos#0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z screen
    clc
    adc.z offset
    sta.z screen_pos
    lda.z screen+1
    adc.z offset+1
    sta.z screen_pos+1
    // [98] if((byte) render_bcd::only_low#6!=(byte) 0) goto render_bcd::@1 -- vbuz1_neq_0_then_la1 
    lda.z only_low
    cmp #0
    bne __b1_from_render_bcd
    jmp __b2
    // render_bcd::@2
  __b2:
    // [99] (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#6 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z bcd
    lsr
    lsr
    lsr
    lsr
    sta.z __5
    // [100] (byte~) render_bcd::$6 ← (const nomodify byte) render_bcd::ZERO_CHAR + (byte~) render_bcd::$5 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __5
    axs #-[ZERO_CHAR]
    stx.z __6
    // [101] *((byte*) render_bcd::screen_pos#0) ← (byte~) render_bcd::$6 -- _deref_pbuz1=vbuz2 
    lda.z __6
    ldy #0
    sta (screen_pos),y
    // [102] (byte*) render_bcd::screen_pos#2 ← ++ (byte*) render_bcd::screen_pos#0 -- pbuz1=_inc_pbuz1 
    inc.z screen_pos
    bne !+
    inc.z screen_pos+1
  !:
    // [103] phi from render_bcd render_bcd::@2 to render_bcd::@1 [phi:render_bcd/render_bcd::@2->render_bcd::@1]
  __b1_from_render_bcd:
  __b1_from___b2:
    // [103] phi (byte*) render_bcd::screen_pos#3 = (byte*) render_bcd::screen_pos#0 [phi:render_bcd/render_bcd::@2->render_bcd::@1#0] -- register_copy 
    jmp __b1
    // render_bcd::@1
  __b1:
    // [104] (byte~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z bcd
    sta.z __3
    // [105] (byte~) render_bcd::$4 ← (const nomodify byte) render_bcd::ZERO_CHAR + (byte~) render_bcd::$3 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __3
    axs #-[ZERO_CHAR]
    stx.z __4
    // [106] *((byte*) render_bcd::screen_pos#3) ← (byte~) render_bcd::$4 -- _deref_pbuz1=vbuz2 
    lda.z __4
    ldy #0
    sta (screen_pos),y
    jmp __breturn
    // render_bcd::@return
  __breturn:
    // [107] return 
    rts
}
  // render_next
// Render the next tetromino in the "next" area
render_next: {
    // Find the screen area
    .const next_area_offset = $28*$c+$18+4
    .label __6 = $82
    .label next_piece_char = $83
    .label cell = $84
    .label next_piece_gfx = $12
    .label screen_next_area = $14
    .label c = $16
    .label l = $11
    // [109] if((byte) render_screen_render#15==(byte) 0) goto render_next::@1 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_render_1
    cmp #0
    beq __b1_from_render_next
    // [111] phi from render_next to render_next::@2 [phi:render_next->render_next::@2]
  __b2_from_render_next:
    // [111] phi (byte*) render_next::screen_next_area#11 = (const nomodify byte*) PLAYFIELD_SCREEN_2+(const word) render_next::next_area_offset [phi:render_next->render_next::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2+next_area_offset
    sta.z screen_next_area
    lda #>PLAYFIELD_SCREEN_2+next_area_offset
    sta.z screen_next_area+1
    jmp __b2
    // [110] phi from render_next to render_next::@1 [phi:render_next->render_next::@1]
  __b1_from_render_next:
    jmp __b1
    // render_next::@1
  __b1:
    // [111] phi from render_next::@1 to render_next::@2 [phi:render_next::@1->render_next::@2]
  __b2_from___b1:
    // [111] phi (byte*) render_next::screen_next_area#11 = (const nomodify byte*) PLAYFIELD_SCREEN_1+(const word) render_next::next_area_offset [phi:render_next::@1->render_next::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1+next_area_offset
    sta.z screen_next_area
    lda #>PLAYFIELD_SCREEN_1+next_area_offset
    sta.z screen_next_area+1
    jmp __b2
    // render_next::@2
  __b2:
    // [112] (byte~) render_next::$6 ← (byte) next_piece_idx#12 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z next_piece_idx_1
    asl
    sta.z __6
    // [113] (byte) render_next::next_piece_char#0 ← *((const byte*) PIECES_NEXT_CHARS + (byte) next_piece_idx#12) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z next_piece_idx_1
    lda PIECES_NEXT_CHARS,y
    sta.z next_piece_char
    // [114] (byte*) render_next::next_piece_gfx#8 ← (byte*)*((const word*) PIECES + (byte~) render_next::$6) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z __6
    lda PIECES,y
    sta.z next_piece_gfx
    lda PIECES+1,y
    sta.z next_piece_gfx+1
    // [115] phi from render_next::@2 to render_next::@3 [phi:render_next::@2->render_next::@3]
  __b3_from___b2:
    // [115] phi (byte) render_next::l#7 = (byte) 0 [phi:render_next::@2->render_next::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [115] phi (byte*) render_next::screen_next_area#10 = (byte*) render_next::screen_next_area#11 [phi:render_next::@2->render_next::@3#1] -- register_copy 
    // [115] phi (byte*) render_next::next_piece_gfx#3 = (byte*) render_next::next_piece_gfx#8 [phi:render_next::@2->render_next::@3#2] -- register_copy 
    jmp __b3
    // [115] phi from render_next::@8 to render_next::@3 [phi:render_next::@8->render_next::@3]
  __b3_from___b8:
    // [115] phi (byte) render_next::l#7 = (byte) render_next::l#1 [phi:render_next::@8->render_next::@3#0] -- register_copy 
    // [115] phi (byte*) render_next::screen_next_area#10 = (byte*) render_next::screen_next_area#4 [phi:render_next::@8->render_next::@3#1] -- register_copy 
    // [115] phi (byte*) render_next::next_piece_gfx#3 = (byte*) render_next::next_piece_gfx#1 [phi:render_next::@8->render_next::@3#2] -- register_copy 
    jmp __b3
    // render_next::@3
  __b3:
    // [116] phi from render_next::@3 to render_next::@4 [phi:render_next::@3->render_next::@4]
  __b4_from___b3:
    // [116] phi (byte) render_next::c#2 = (byte) 0 [phi:render_next::@3->render_next::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [116] phi (byte*) render_next::screen_next_area#5 = (byte*) render_next::screen_next_area#10 [phi:render_next::@3->render_next::@4#1] -- register_copy 
    // [116] phi (byte*) render_next::next_piece_gfx#2 = (byte*) render_next::next_piece_gfx#3 [phi:render_next::@3->render_next::@4#2] -- register_copy 
    jmp __b4
    // [116] phi from render_next::@6 to render_next::@4 [phi:render_next::@6->render_next::@4]
  __b4_from___b6:
    // [116] phi (byte) render_next::c#2 = (byte) render_next::c#1 [phi:render_next::@6->render_next::@4#0] -- register_copy 
    // [116] phi (byte*) render_next::screen_next_area#5 = (byte*) render_next::screen_next_area#3 [phi:render_next::@6->render_next::@4#1] -- register_copy 
    // [116] phi (byte*) render_next::next_piece_gfx#2 = (byte*) render_next::next_piece_gfx#1 [phi:render_next::@6->render_next::@4#2] -- register_copy 
    jmp __b4
    // render_next::@4
  __b4:
    // [117] (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (next_piece_gfx),y
    sta.z cell
    // [118] (byte*) render_next::next_piece_gfx#1 ← ++ (byte*) render_next::next_piece_gfx#2 -- pbuz1=_inc_pbuz1 
    inc.z next_piece_gfx
    bne !+
    inc.z next_piece_gfx+1
  !:
    // [119] if((byte) render_next::cell#0!=(byte) 0) goto render_next::@5 -- vbuz1_neq_0_then_la1 
    lda.z cell
    cmp #0
    bne __b5
    jmp __b7
    // render_next::@7
  __b7:
    // [120] *((byte*) render_next::screen_next_area#5) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (screen_next_area),y
    jmp __b6
    // render_next::@6
  __b6:
    // [121] (byte*) render_next::screen_next_area#3 ← ++ (byte*) render_next::screen_next_area#5 -- pbuz1=_inc_pbuz1 
    inc.z screen_next_area
    bne !+
    inc.z screen_next_area+1
  !:
    // [122] (byte) render_next::c#1 ← ++ (byte) render_next::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [123] if((byte) render_next::c#1!=(byte) 4) goto render_next::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z c
    bne __b4_from___b6
    jmp __b8
    // render_next::@8
  __b8:
    // [124] (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#3 + (byte) $24 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$24
    clc
    adc.z screen_next_area
    sta.z screen_next_area
    bcc !+
    inc.z screen_next_area+1
  !:
    // [125] (byte) render_next::l#1 ← ++ (byte) render_next::l#7 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [126] if((byte) render_next::l#1!=(byte) 4) goto render_next::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne __b3_from___b8
    jmp __breturn
    // render_next::@return
  __breturn:
    // [127] return 
    rts
    // render_next::@5
  __b5:
    // [128] *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#0 -- _deref_pbuz1=vbuz2 
    lda.z next_piece_char
    ldy #0
    sta (screen_next_area),y
    jmp __b6
}
  // render_moving
// Render the current moving piece at position (current_xpos, current_ypos)
// Ignores cases where parts of the tetromino is outside the playfield (sides/bottom) since the movement collision routine prevents this.
render_moving: {
    .label __1 = $85
    .label __6 = $86
    .label ypos = $1d
    .label screen_line = $87
    .label xpos = $20
    .label i = $1f
    .label l = $1e
    .label current_cell = $89
    .label c = $21
    // [130] (byte) render_moving::ypos#0 ← (byte) current_ypos#13 -- vbuz1=vbuz2 
    lda.z current_ypos_1
    sta.z ypos
    // [131] phi from render_moving to render_moving::@1 [phi:render_moving->render_moving::@1]
  __b1_from_render_moving:
    // [131] phi (byte) render_moving::l#4 = (byte) 0 [phi:render_moving->render_moving::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [131] phi (byte) render_moving::i#3 = (byte) 0 [phi:render_moving->render_moving::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [131] phi (byte) render_moving::ypos#2 = (byte) render_moving::ypos#0 [phi:render_moving->render_moving::@1#2] -- register_copy 
    jmp __b1
    // [131] phi from render_moving::@3 to render_moving::@1 [phi:render_moving::@3->render_moving::@1]
  __b1_from___b3:
    // [131] phi (byte) render_moving::l#4 = (byte) render_moving::l#1 [phi:render_moving::@3->render_moving::@1#0] -- register_copy 
    // [131] phi (byte) render_moving::i#3 = (byte) render_moving::i#8 [phi:render_moving::@3->render_moving::@1#1] -- register_copy 
    // [131] phi (byte) render_moving::ypos#2 = (byte) render_moving::ypos#1 [phi:render_moving::@3->render_moving::@1#2] -- register_copy 
    jmp __b1
    // render_moving::@1
  __b1:
    // [132] if((byte) render_moving::ypos#2>=(byte) 1+(byte) 1) goto render_moving::@2 -- vbuz1_ge_vbuc1_then_la1 
    lda.z ypos
    cmp #1+1
    bcs __b2
    jmp __b7
    // render_moving::@7
  __b7:
    // [133] (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z i
    axs #-[4]
    stx.z i
    // [134] phi from render_moving::@5 render_moving::@7 to render_moving::@3 [phi:render_moving::@5/render_moving::@7->render_moving::@3]
  __b3_from___b5:
  __b3_from___b7:
    // [134] phi (byte) render_moving::i#8 = (byte) render_moving::i#2 [phi:render_moving::@5/render_moving::@7->render_moving::@3#0] -- register_copy 
    jmp __b3
    // render_moving::@3
  __b3:
    // [135] (byte) render_moving::ypos#1 ← ++ (byte) render_moving::ypos#2 -- vbuz1=_inc_vbuz1 
    inc.z ypos
    // [136] (byte) render_moving::l#1 ← ++ (byte) render_moving::l#4 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [137] if((byte) render_moving::l#1!=(byte) 4) goto render_moving::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne __b1_from___b3
    jmp __breturn
    // render_moving::@return
  __breturn:
    // [138] return 
    rts
    // render_moving::@2
  __b2:
    // [139] (byte~) render_moving::$1 ← (byte) render_screen_render#33 + (byte) render_moving::ypos#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z render_screen_render_3
    clc
    adc.z ypos
    sta.z __1
    // [140] (byte~) render_moving::$6 ← (byte~) render_moving::$1 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z __1
    asl
    sta.z __6
    // [141] (byte*) render_moving::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_moving::$6) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z __6
    lda screen_lines_1,y
    sta.z screen_line
    lda screen_lines_1+1,y
    sta.z screen_line+1
    // [142] (byte) render_moving::xpos#0 ← (byte) current_xpos#59 -- vbuz1=vbuz2 
    lda.z current_xpos_1
    sta.z xpos
    // [143] phi from render_moving::@2 to render_moving::@4 [phi:render_moving::@2->render_moving::@4]
  __b4_from___b2:
    // [143] phi (byte) render_moving::c#2 = (byte) 0 [phi:render_moving::@2->render_moving::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [143] phi (byte) render_moving::xpos#2 = (byte) render_moving::xpos#0 [phi:render_moving::@2->render_moving::@4#1] -- register_copy 
    // [143] phi (byte) render_moving::i#4 = (byte) render_moving::i#3 [phi:render_moving::@2->render_moving::@4#2] -- register_copy 
    jmp __b4
    // [143] phi from render_moving::@5 to render_moving::@4 [phi:render_moving::@5->render_moving::@4]
  __b4_from___b5:
    // [143] phi (byte) render_moving::c#2 = (byte) render_moving::c#1 [phi:render_moving::@5->render_moving::@4#0] -- register_copy 
    // [143] phi (byte) render_moving::xpos#2 = (byte) render_moving::xpos#1 [phi:render_moving::@5->render_moving::@4#1] -- register_copy 
    // [143] phi (byte) render_moving::i#4 = (byte) render_moving::i#2 [phi:render_moving::@5->render_moving::@4#2] -- register_copy 
    jmp __b4
    // render_moving::@4
  __b4:
    // [144] (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_moving::i#4) -- vbuz1=pbuz2_derefidx_vbuz3 
    ldy.z i
    lda (current_piece_gfx_1),y
    sta.z current_cell
    // [145] (byte) render_moving::i#2 ← ++ (byte) render_moving::i#4 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [146] if((byte) render_moving::current_cell#0==(byte) 0) goto render_moving::@5 -- vbuz1_eq_0_then_la1 
    lda.z current_cell
    cmp #0
    beq __b5
    jmp __b6
    // render_moving::@6
  __b6:
    // [147] *((byte*) render_moving::screen_line#0 + (byte) render_moving::xpos#2) ← (byte) current_piece_char#68 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z current_piece_char_1
    ldy.z xpos
    sta (screen_line),y
    jmp __b5
    // render_moving::@5
  __b5:
    // [148] (byte) render_moving::xpos#1 ← ++ (byte) render_moving::xpos#2 -- vbuz1=_inc_vbuz1 
    inc.z xpos
    // [149] (byte) render_moving::c#1 ← ++ (byte) render_moving::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [150] if((byte) render_moving::c#1!=(byte) 4) goto render_moving::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z c
    bne __b4_from___b5
    jmp __b3_from___b5
}
  // render_playfield
// Render the static playfield on the screen (all pieces already locked into place)
render_playfield: {
    .label __0 = $8a
    .label __3 = $8b
    .label screen_line = $25
    // Do not render the top 2 lines.
    .label i = $24
    .label c = $27
    .label l = $23
    // [152] phi from render_playfield to render_playfield::@1 [phi:render_playfield->render_playfield::@1]
  __b1_from_render_playfield:
    // [152] phi (byte) render_playfield::i#3 = (const nomodify byte) PLAYFIELD_COLS*(byte) 2 [phi:render_playfield->render_playfield::@1#0] -- vbuz1=vbuc1 
    lda #PLAYFIELD_COLS*2
    sta.z i
    // [152] phi (byte) render_playfield::l#2 = (byte) 2 [phi:render_playfield->render_playfield::@1#1] -- vbuz1=vbuc1 
    lda #2
    sta.z l
    jmp __b1
    // [152] phi from render_playfield::@3 to render_playfield::@1 [phi:render_playfield::@3->render_playfield::@1]
  __b1_from___b3:
    // [152] phi (byte) render_playfield::i#3 = (byte) render_playfield::i#1 [phi:render_playfield::@3->render_playfield::@1#0] -- register_copy 
    // [152] phi (byte) render_playfield::l#2 = (byte) render_playfield::l#1 [phi:render_playfield::@3->render_playfield::@1#1] -- register_copy 
    jmp __b1
    // render_playfield::@1
  __b1:
    // [153] (byte~) render_playfield::$0 ← (byte) render_screen_render#22 + (byte) render_playfield::l#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z render_screen_render_2
    clc
    adc.z l
    sta.z __0
    // [154] (byte~) render_playfield::$3 ← (byte~) render_playfield::$0 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z __0
    asl
    sta.z __3
    // [155] (byte*) render_playfield::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_playfield::$3) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z __3
    lda screen_lines_1,y
    sta.z screen_line
    lda screen_lines_1+1,y
    sta.z screen_line+1
    // [156] phi from render_playfield::@1 to render_playfield::@2 [phi:render_playfield::@1->render_playfield::@2]
  __b2_from___b1:
    // [156] phi (byte) render_playfield::c#2 = (byte) 0 [phi:render_playfield::@1->render_playfield::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [156] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#0 [phi:render_playfield::@1->render_playfield::@2#1] -- register_copy 
    // [156] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#3 [phi:render_playfield::@1->render_playfield::@2#2] -- register_copy 
    jmp __b2
    // [156] phi from render_playfield::@2 to render_playfield::@2 [phi:render_playfield::@2->render_playfield::@2]
  __b2_from___b2:
    // [156] phi (byte) render_playfield::c#2 = (byte) render_playfield::c#1 [phi:render_playfield::@2->render_playfield::@2#0] -- register_copy 
    // [156] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#1 [phi:render_playfield::@2->render_playfield::@2#1] -- register_copy 
    // [156] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#1 [phi:render_playfield::@2->render_playfield::@2#2] -- register_copy 
    jmp __b2
    // render_playfield::@2
  __b2:
    // [157] *((byte*) render_playfield::screen_line#2) ← *((const byte*) playfield + (byte) render_playfield::i#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda playfield,y
    ldy #0
    sta (screen_line),y
    // [158] (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2 -- pbuz1=_inc_pbuz1 
    inc.z screen_line
    bne !+
    inc.z screen_line+1
  !:
    // [159] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [160] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [161] if((byte) render_playfield::c#1!=(const nomodify byte) PLAYFIELD_COLS-(byte) 1+(byte) 1) goto render_playfield::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_COLS-1+1
    cmp.z c
    bne __b2_from___b2
    jmp __b3
    // render_playfield::@3
  __b3:
    // [162] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [163] if((byte) render_playfield::l#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto render_playfield::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_LINES-1+1
    cmp.z l
    bne __b1_from___b3
    jmp __breturn
    // render_playfield::@return
  __breturn:
    // [164] return 
    rts
}
  // play_movement
// Perform any movement of the current piece
// key_event is the next keyboard_event() og 0xff if no keyboard event is pending
// Returns a byte signaling whether rendering is needed. (0 no render, >0 render needed)
// play_movement(byte zp($7b) key_event)
play_movement: {
    .label __3 = $90
    .label __4 = $94
    .label render = $28
    .label render_1 = $91
    .label return = $28
    .label key_event = $7b
    .label return_1 = $7c
    // [165] (byte) play_move_down::key_event#0 ← (byte) play_movement::key_event#0 -- vbuz1=vbuz2 
    lda.z key_event
    sta.z play_move_down.key_event
    // [166] call play_move_down 
    jsr play_move_down
    // [167] (byte) play_move_down::return#0 ← (byte) play_move_down::return#3 -- vbuz1=vbuz2 
    lda.z play_move_down.return_1
    sta.z play_move_down.return
    jmp __b2
    // play_movement::@2
  __b2:
    // [168] (byte) play_movement::render#1 ← (byte) play_move_down::return#0 -- vbuz1=vbuz2 
    lda.z play_move_down.return
    sta.z render
    // [169] if((byte) game_over#15==(byte) 0) goto play_movement::@1 -- vbuz1_eq_0_then_la1 
    lda.z game_over
    cmp #0
    beq __b1
    // [170] phi from play_movement::@2 play_movement::@4 to play_movement::@return [phi:play_movement::@2/play_movement::@4->play_movement::@return]
  __breturn_from___b2:
  __breturn_from___b4:
    // [170] phi (byte) current_xpos#19 = (byte) current_xpos#22 [phi:play_movement::@2/play_movement::@4->play_movement::@return#0] -- register_copy 
    // [170] phi (byte*) current_piece_gfx#18 = (byte*) current_piece_gfx#20 [phi:play_movement::@2/play_movement::@4->play_movement::@return#1] -- register_copy 
    // [170] phi (byte) current_orientation#17 = (byte) current_orientation#20 [phi:play_movement::@2/play_movement::@4->play_movement::@return#2] -- register_copy 
    // [170] phi (byte) play_movement::return#2 = (byte) play_movement::render#1 [phi:play_movement::@2/play_movement::@4->play_movement::@return#3] -- register_copy 
    jmp __breturn
    // play_movement::@return
  __breturn:
    // [171] return 
    rts
    // play_movement::@1
  __b1:
    // [172] (byte) play_move_leftright::key_event#0 ← (byte) play_movement::key_event#0 -- vbuz1=vbuz2 
    lda.z key_event
    sta.z play_move_leftright.key_event
    // [173] call play_move_leftright 
    jsr play_move_leftright
    // [174] (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2 -- vbuz1=vbuz2 
    lda.z play_move_leftright.return_1
    sta.z play_move_leftright.return
    jmp __b3
    // play_movement::@3
  __b3:
    // [175] (byte~) play_movement::$3 ← (byte) play_move_leftright::return#0 -- vbuz1=vbuz2 
    lda.z play_move_leftright.return
    sta.z __3
    // [176] (byte) play_movement::render#2 ← (byte) play_movement::render#1 + (byte~) play_movement::$3 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z render
    clc
    adc.z __3
    sta.z render_1
    // [177] (byte) play_move_rotate::key_event#0 ← (byte) play_movement::key_event#0 -- vbuz1=vbuz2 
    lda.z key_event
    sta.z play_move_rotate.key_event
    // [178] call play_move_rotate 
    jsr play_move_rotate
    // [179] (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2 -- vbuz1=vbuz2 
    lda.z play_move_rotate.return_1
    sta.z play_move_rotate.return
    jmp __b4
    // play_movement::@4
  __b4:
    // [180] (byte~) play_movement::$4 ← (byte) play_move_rotate::return#0 -- vbuz1=vbuz2 
    lda.z play_move_rotate.return
    sta.z __4
    // [181] (byte) play_movement::return#0 ← (byte) play_movement::render#2 + (byte~) play_movement::$4 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z render_1
    clc
    adc.z __4
    sta.z return
    jmp __breturn_from___b4
}
  // play_move_rotate
// Rotate the current piece  based on key-presses
// Return non-zero if a render is needed
// play_move_rotate(byte zp($92) key_event)
play_move_rotate: {
    .label __2 = $97
    .label __5 = $95
    .label __7 = $98
    .label key_event = $92
    .label return = $93
    // Handle keyboard events
    .label orientation = $2a
    .label return_1 = $29
    // [182] if((byte) play_move_rotate::key_event#0==(const nomodify byte) KEY_Z) goto play_move_rotate::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #KEY_Z
    cmp.z key_event
    beq __b1
    jmp __b4
    // play_move_rotate::@4
  __b4:
    // [183] if((byte) play_move_rotate::key_event#0==(const nomodify byte) KEY_X) goto play_move_rotate::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #KEY_X
    cmp.z key_event
    beq __b2
    // [184] phi from play_move_rotate::@4 play_move_rotate::@6 to play_move_rotate::@return [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return]
  __breturn_from___b4:
  __breturn_from___b6:
    // [184] phi (byte*) current_piece_gfx#21 = (byte*) current_piece_gfx#20 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#0] -- register_copy 
    // [184] phi (byte) current_orientation#25 = (byte) current_orientation#20 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#1] -- register_copy 
    // [184] phi (byte) play_move_rotate::return#2 = (byte) 0 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#2] -- vbuz1=vbuc1 
    lda #0
    sta.z return_1
    jmp __breturn
    // play_move_rotate::@return
  __breturn:
    // [185] return 
    rts
    // play_move_rotate::@2
  __b2:
    // [186] (byte~) play_move_rotate::$5 ← (byte) current_orientation#20 + (byte) $10 -- vbuz1=vbuz2_plus_vbuc1 
    lax.z current_orientation
    axs #-[$10]
    stx.z __5
    // [187] (byte) play_move_rotate::orientation#2 ← (byte~) play_move_rotate::$5 & (byte) $3f -- vbuz1=vbuz2_band_vbuc1 
    lda #$3f
    and.z __5
    sta.z orientation
    // [188] phi from play_move_rotate::@1 play_move_rotate::@2 to play_move_rotate::@3 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@3]
  __b3_from___b1:
  __b3_from___b2:
    // [188] phi (byte) play_move_rotate::orientation#3 = (byte) play_move_rotate::orientation#1 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@3#0] -- register_copy 
    jmp __b3
    // play_move_rotate::@3
  __b3:
    // [189] (byte) play_collision::xpos#3 ← (byte) current_xpos#26 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [190] (byte) play_collision::ypos#3 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [191] (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3 -- vbuz1=vbuz2 
    lda.z orientation
    sta.z play_collision.orientation
    // [192] (byte*) current_piece#99 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_1
    lda.z current_piece+1
    sta.z current_piece_1+1
    // [193] call play_collision 
    // [201] phi from play_move_rotate::@3 to play_collision [phi:play_move_rotate::@3->play_collision]
  play_collision_from___b3:
    // [201] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#3 [phi:play_move_rotate::@3->play_collision#0] -- register_copy 
    // [201] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#3 [phi:play_move_rotate::@3->play_collision#1] -- register_copy 
    // [201] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#3 [phi:play_move_rotate::@3->play_collision#2] -- register_copy 
    // [201] phi (byte*) current_piece#17 = (byte*) current_piece#99 [phi:play_move_rotate::@3->play_collision#3] -- register_copy 
    jsr play_collision
    // [194] (byte) play_collision::return#14 ← (byte) play_collision::return#15 -- vbuz1=vbuz2 
    lda.z play_collision.return_5
    sta.z play_collision.return_4
    jmp __b6
    // play_move_rotate::@6
  __b6:
    // [195] (byte~) play_move_rotate::$2 ← (byte) play_collision::return#14 -- vbuz1=vbuz2 
    lda.z play_collision.return_4
    sta.z __2
    // [196] if((byte~) play_move_rotate::$2!=(const nomodify byte) COLLISION_NONE) goto play_move_rotate::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #COLLISION_NONE
    cmp.z __2
    bne __breturn_from___b6
    jmp __b5
    // play_move_rotate::@5
  __b5:
    // [197] (byte) current_orientation#7 ← (byte) play_move_rotate::orientation#3 -- vbuz1=vbuz2 
    lda.z orientation
    sta.z current_orientation
    // [198] (byte*) current_piece_gfx#7 ← (byte*) current_piece#15 + (byte) current_orientation#7 -- pbuz1=pbuz2_plus_vbuz3 
    lda.z current_orientation
    clc
    adc.z current_piece
    sta.z current_piece_gfx
    lda #0
    adc.z current_piece+1
    sta.z current_piece_gfx+1
    // [184] phi from play_move_rotate::@5 to play_move_rotate::@return [phi:play_move_rotate::@5->play_move_rotate::@return]
  __breturn_from___b5:
    // [184] phi (byte*) current_piece_gfx#21 = (byte*) current_piece_gfx#7 [phi:play_move_rotate::@5->play_move_rotate::@return#0] -- register_copy 
    // [184] phi (byte) current_orientation#25 = (byte) current_orientation#7 [phi:play_move_rotate::@5->play_move_rotate::@return#1] -- register_copy 
    // [184] phi (byte) play_move_rotate::return#2 = (byte) 1 [phi:play_move_rotate::@5->play_move_rotate::@return#2] -- vbuz1=vbuc1 
    lda #1
    sta.z return_1
    jmp __breturn
    // play_move_rotate::@1
  __b1:
    // [199] (byte~) play_move_rotate::$7 ← (byte) current_orientation#20 - (byte) $10 -- vbuz1=vbuz2_minus_vbuc1 
    lax.z current_orientation
    axs #$10
    stx.z __7
    // [200] (byte) play_move_rotate::orientation#1 ← (byte~) play_move_rotate::$7 & (byte) $3f -- vbuz1=vbuz2_band_vbuc1 
    lda #$3f
    and.z __7
    sta.z orientation
    jmp __b3_from___b1
}
  // play_collision
// Test if there is a collision between the current piece moved to (x, y) and anything on the playfield or the playfield boundaries
// Returns information about the type of the collision detected
// play_collision(byte zp($2e) xpos, byte zp($2f) ypos, byte zp($2d) orientation)
play_collision: {
    .label __5 = $9f
    .label __14 = $9b
    .label xpos = $2e
    .label ypos = $2f
    .label orientation = $2d
    // Below the playfield bottom
    // Beyond left side of the playfield
    // Beyond left side of the playfield
    // Collision with a playfield cell
    .label return = $a6
    // Below the playfield bottom
    // Beyond left side of the playfield
    // Beyond left side of the playfield
    // Collision with a playfield cell
    .label return_1 = $a2
    .label piece_gfx = $99
    .label yp = $2f
    .label playfield_line = $9c
    .label i = $9e
    .label xp = $32
    .label c = $33
    .label l = $30
    // Below the playfield bottom
    // Beyond left side of the playfield
    // Beyond left side of the playfield
    // Collision with a playfield cell
    .label return_2 = $ad
    // Below the playfield bottom
    // Beyond left side of the playfield
    // Beyond left side of the playfield
    // Collision with a playfield cell
    .label return_3 = $a0
    // Below the playfield bottom
    // Beyond left side of the playfield
    // Beyond left side of the playfield
    // Collision with a playfield cell
    .label return_4 = $96
    .label i_1 = $31
    // Below the playfield bottom
    // Beyond left side of the playfield
    // Beyond left side of the playfield
    // Collision with a playfield cell
    .label return_5 = $34
    // [202] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#17 + (byte) play_collision::orientation#5 -- pbuz1=pbuz2_plus_vbuz3 
    lda.z orientation
    clc
    adc.z current_piece_1
    sta.z piece_gfx
    lda #0
    adc.z current_piece_1+1
    sta.z piece_gfx+1
    // [203] phi from play_collision to play_collision::@1 [phi:play_collision->play_collision::@1]
  __b1_from_play_collision:
    // [203] phi (byte) play_collision::l#6 = (byte) 0 [phi:play_collision->play_collision::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [203] phi (byte) play_collision::i#3 = (byte) 0 [phi:play_collision->play_collision::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i_1
    // [203] phi (byte) play_collision::yp#2 = (byte) play_collision::yp#0 [phi:play_collision->play_collision::@1#2] -- register_copy 
    jmp __b1
    // play_collision::@1
  __b1:
    // [204] (byte~) play_collision::$14 ← (byte) play_collision::yp#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z yp
    asl
    sta.z __14
    // [205] (byte*) play_collision::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_collision::$14) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z __14
    lda playfield_lines,y
    sta.z playfield_line
    lda playfield_lines+1,y
    sta.z playfield_line+1
    // [206] (byte) play_collision::xp#8 ← (byte) play_collision::xpos#6 -- vbuz1=vbuz2 
    lda.z xpos
    sta.z xp
    // [207] phi from play_collision::@1 to play_collision::@2 [phi:play_collision::@1->play_collision::@2]
  __b2_from___b1:
    // [207] phi (byte) play_collision::c#2 = (byte) 0 [phi:play_collision::@1->play_collision::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [207] phi (byte) play_collision::xp#2 = (byte) play_collision::xp#8 [phi:play_collision::@1->play_collision::@2#1] -- register_copy 
    // [207] phi (byte) play_collision::i#2 = (byte) play_collision::i#3 [phi:play_collision::@1->play_collision::@2#2] -- register_copy 
    jmp __b2
    // play_collision::@2
  __b2:
    // [208] (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2 -- vbuz1=_inc_vbuz2 
    ldy.z i_1
    iny
    sty.z i
    // [209] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z i_1
    lda (piece_gfx),y
    cmp #0
    beq __b3
    jmp __b7
    // play_collision::@7
  __b7:
    // [210] if((byte) play_collision::yp#2<(const nomodify byte) PLAYFIELD_LINES) goto play_collision::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z yp
    cmp #PLAYFIELD_LINES
    bcc __b4
    // [215] phi from play_collision::@7 to play_collision::@return [phi:play_collision::@7->play_collision::@return]
  __breturn_from___b7:
    // [215] phi (byte) play_collision::return#15 = (const nomodify byte) COLLISION_BOTTOM [phi:play_collision::@7->play_collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_BOTTOM
    sta.z return_5
    jmp __breturn
    // play_collision::@4
  __b4:
    // [211] (byte~) play_collision::$5 ← (byte) play_collision::xp#2 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z xp
    sta.z __5
    // [212] if((byte~) play_collision::$5==(byte) 0) goto play_collision::@5 -- vbuz1_eq_0_then_la1 
    lda.z __5
    cmp #0
    beq __b5
    // [215] phi from play_collision::@4 to play_collision::@return [phi:play_collision::@4->play_collision::@return]
  __breturn_from___b4:
    // [215] phi (byte) play_collision::return#15 = (const nomodify byte) COLLISION_LEFT [phi:play_collision::@4->play_collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_LEFT
    sta.z return_5
    jmp __breturn
    // play_collision::@5
  __b5:
    // [213] if((byte) play_collision::xp#2<(const nomodify byte) PLAYFIELD_COLS) goto play_collision::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z xp
    cmp #PLAYFIELD_COLS
    bcc __b6
    // [215] phi from play_collision::@5 to play_collision::@return [phi:play_collision::@5->play_collision::@return]
  __breturn_from___b5:
    // [215] phi (byte) play_collision::return#15 = (const nomodify byte) COLLISION_RIGHT [phi:play_collision::@5->play_collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_RIGHT
    sta.z return_5
    jmp __breturn
    // play_collision::@6
  __b6:
    // [214] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::xp#2)==(byte) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z xp
    lda (playfield_line),y
    cmp #0
    beq __b3
    // [215] phi from play_collision::@6 to play_collision::@return [phi:play_collision::@6->play_collision::@return]
  __breturn_from___b6:
    // [215] phi (byte) play_collision::return#15 = (const nomodify byte) COLLISION_PLAYFIELD [phi:play_collision::@6->play_collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_PLAYFIELD
    sta.z return_5
    jmp __breturn
    // play_collision::@return
  __breturn:
    // [216] return 
    rts
    // play_collision::@3
  __b3:
    // [217] (byte) play_collision::xp#1 ← ++ (byte) play_collision::xp#2 -- vbuz1=_inc_vbuz1 
    inc.z xp
    // [218] (byte) play_collision::c#1 ← ++ (byte) play_collision::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [219] if((byte) play_collision::c#1!=(byte) 4) goto play_collision::@10 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z c
    bne __b10
    jmp __b8
    // play_collision::@8
  __b8:
    // [220] (byte) play_collision::yp#1 ← ++ (byte) play_collision::yp#2 -- vbuz1=_inc_vbuz1 
    inc.z yp
    // [221] (byte) play_collision::l#1 ← ++ (byte) play_collision::l#6 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [222] if((byte) play_collision::l#1!=(byte) 4) goto play_collision::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne __b9
    // [215] phi from play_collision::@8 to play_collision::@return [phi:play_collision::@8->play_collision::@return]
  __breturn_from___b8:
    // [215] phi (byte) play_collision::return#15 = (const nomodify byte) COLLISION_NONE [phi:play_collision::@8->play_collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_NONE
    sta.z return_5
    jmp __breturn
    // play_collision::@9
  __b9:
    // [223] (byte) play_collision::i#10 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_1
    // [203] phi from play_collision::@9 to play_collision::@1 [phi:play_collision::@9->play_collision::@1]
  __b1_from___b9:
    // [203] phi (byte) play_collision::l#6 = (byte) play_collision::l#1 [phi:play_collision::@9->play_collision::@1#0] -- register_copy 
    // [203] phi (byte) play_collision::i#3 = (byte) play_collision::i#10 [phi:play_collision::@9->play_collision::@1#1] -- register_copy 
    // [203] phi (byte) play_collision::yp#2 = (byte) play_collision::yp#1 [phi:play_collision::@9->play_collision::@1#2] -- register_copy 
    jmp __b1
    // play_collision::@10
  __b10:
    // [224] (byte) play_collision::i#12 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_1
    // [207] phi from play_collision::@10 to play_collision::@2 [phi:play_collision::@10->play_collision::@2]
  __b2_from___b10:
    // [207] phi (byte) play_collision::c#2 = (byte) play_collision::c#1 [phi:play_collision::@10->play_collision::@2#0] -- register_copy 
    // [207] phi (byte) play_collision::xp#2 = (byte) play_collision::xp#1 [phi:play_collision::@10->play_collision::@2#1] -- register_copy 
    // [207] phi (byte) play_collision::i#2 = (byte) play_collision::i#12 [phi:play_collision::@10->play_collision::@2#2] -- register_copy 
    jmp __b2
}
  // play_move_leftright
// Move left/right or rotate the current piece
// Return non-zero if a render is needed
// play_move_leftright(byte zp($8e) key_event)
play_move_leftright: {
    .label __4 = $a1
    .label __8 = $a3
    .label key_event = $8e
    .label return = $8f
    .label return_1 = $35
    // [225] if((byte) play_move_leftright::key_event#0==(const nomodify byte) KEY_COMMA) goto play_move_leftright::@1 -- vbuz1_eq_vbuc1_then_la1 
    // Handle keyboard events
    lda #KEY_COMMA
    cmp.z key_event
    beq __b1
    jmp __b2
    // play_move_leftright::@2
  __b2:
    // [226] if((byte) play_move_leftright::key_event#0!=(const nomodify byte) KEY_DOT) goto play_move_leftright::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #KEY_DOT
    cmp.z key_event
    bne __breturn_from___b2
    jmp __b3
    // play_move_leftright::@3
  __b3:
    // [227] (byte) play_collision::xpos#2 ← (byte) current_xpos#22 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z current_xpos
    iny
    sty.z play_collision.xpos
    // [228] (byte) play_collision::ypos#2 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [229] (byte) play_collision::orientation#2 ← (byte) current_orientation#20 -- vbuz1=vbuz2 
    lda.z current_orientation
    sta.z play_collision.orientation
    // [230] (byte*) current_piece#98 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_1
    lda.z current_piece+1
    sta.z current_piece_1+1
    // [231] call play_collision 
    // [201] phi from play_move_leftright::@3 to play_collision [phi:play_move_leftright::@3->play_collision]
  play_collision_from___b3:
    // [201] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#2 [phi:play_move_leftright::@3->play_collision#0] -- register_copy 
    // [201] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#2 [phi:play_move_leftright::@3->play_collision#1] -- register_copy 
    // [201] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#2 [phi:play_move_leftright::@3->play_collision#2] -- register_copy 
    // [201] phi (byte*) current_piece#17 = (byte*) current_piece#98 [phi:play_move_leftright::@3->play_collision#3] -- register_copy 
    jsr play_collision
    // [232] (byte) play_collision::return#13 ← (byte) play_collision::return#15 -- vbuz1=vbuz2 
    lda.z play_collision.return_5
    sta.z play_collision.return_3
    jmp __b7
    // play_move_leftright::@7
  __b7:
    // [233] (byte~) play_move_leftright::$4 ← (byte) play_collision::return#13 -- vbuz1=vbuz2 
    lda.z play_collision.return_3
    sta.z __4
    // [234] if((byte~) play_move_leftright::$4!=(const nomodify byte) COLLISION_NONE) goto play_move_leftright::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #COLLISION_NONE
    cmp.z __4
    bne __breturn_from___b7
    jmp __b4
    // play_move_leftright::@4
  __b4:
    // [235] (byte) current_xpos#6 ← ++ (byte) current_xpos#22 -- vbuz1=_inc_vbuz1 
    inc.z current_xpos
    // [236] phi from play_move_leftright::@4 play_move_leftright::@5 to play_move_leftright::@return [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return]
  __breturn_from___b4:
  __breturn_from___b5:
    // [236] phi (byte) current_xpos#26 = (byte) current_xpos#6 [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return#0] -- register_copy 
    // [236] phi (byte) play_move_leftright::return#2 = (byte) 1 [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return#1] -- vbuz1=vbuc1 
    lda #1
    sta.z return_1
    jmp __breturn
    // [236] phi from play_move_leftright::@2 play_move_leftright::@6 play_move_leftright::@7 to play_move_leftright::@return [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return]
  __breturn_from___b2:
  __breturn_from___b6:
  __breturn_from___b7:
    // [236] phi (byte) current_xpos#26 = (byte) current_xpos#22 [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return#0] -- register_copy 
    // [236] phi (byte) play_move_leftright::return#2 = (byte) 0 [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return#1] -- vbuz1=vbuc1 
    lda #0
    sta.z return_1
    jmp __breturn
    // play_move_leftright::@return
  __breturn:
    // [237] return 
    rts
    // play_move_leftright::@1
  __b1:
    // [238] (byte) play_collision::xpos#1 ← (byte) current_xpos#22 - (byte) 1 -- vbuz1=vbuz2_minus_1 
    ldx.z current_xpos
    dex
    stx.z play_collision.xpos
    // [239] (byte) play_collision::ypos#1 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [240] (byte) play_collision::orientation#1 ← (byte) current_orientation#20 -- vbuz1=vbuz2 
    lda.z current_orientation
    sta.z play_collision.orientation
    // [241] (byte*) current_piece#97 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_1
    lda.z current_piece+1
    sta.z current_piece_1+1
    // [242] call play_collision 
    // [201] phi from play_move_leftright::@1 to play_collision [phi:play_move_leftright::@1->play_collision]
  play_collision_from___b1:
    // [201] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#1 [phi:play_move_leftright::@1->play_collision#0] -- register_copy 
    // [201] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#1 [phi:play_move_leftright::@1->play_collision#1] -- register_copy 
    // [201] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#1 [phi:play_move_leftright::@1->play_collision#2] -- register_copy 
    // [201] phi (byte*) current_piece#17 = (byte*) current_piece#97 [phi:play_move_leftright::@1->play_collision#3] -- register_copy 
    jsr play_collision
    // [243] (byte) play_collision::return#1 ← (byte) play_collision::return#15 -- vbuz1=vbuz2 
    lda.z play_collision.return_5
    sta.z play_collision.return_1
    jmp __b6
    // play_move_leftright::@6
  __b6:
    // [244] (byte~) play_move_leftright::$8 ← (byte) play_collision::return#1 -- vbuz1=vbuz2 
    lda.z play_collision.return_1
    sta.z __8
    // [245] if((byte~) play_move_leftright::$8!=(const nomodify byte) COLLISION_NONE) goto play_move_leftright::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #COLLISION_NONE
    cmp.z __8
    bne __breturn_from___b6
    jmp __b5
    // play_move_leftright::@5
  __b5:
    // [246] (byte) current_xpos#8 ← -- (byte) current_xpos#22 -- vbuz1=_dec_vbuz1 
    dec.z current_xpos
    jmp __breturn_from___b5
}
  // play_move_down
// Move down the current piece
// Return non-zero if a render is needed
// play_move_down(byte zp($8c) key_event)
play_move_down: {
    .label __2 = $a5
    .label __12 = $a7
    .label key_event = $8c
    .label return = $8d
    .label movedown = $36
    .label removed = $a9
    .label return_1 = $44
    // [247] (byte) current_movedown_counter#12 ← ++ (byte) current_movedown_counter#16 -- vbuz1=_inc_vbuz1 
    inc.z current_movedown_counter
    // [248] if((byte) play_move_down::key_event#0!=(const nomodify byte) KEY_SPACE) goto play_move_down::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #KEY_SPACE
    cmp.z key_event
    bne __b1_from_play_move_down
    // [249] phi from play_move_down to play_move_down::@4 [phi:play_move_down->play_move_down::@4]
  __b4_from_play_move_down:
    jmp __b4
    // play_move_down::@4
  __b4:
    // [250] phi from play_move_down::@4 to play_move_down::@1 [phi:play_move_down::@4->play_move_down::@1]
  __b1_from___b4:
    // [250] phi (byte) play_move_down::movedown#10 = (byte) 1 [phi:play_move_down::@4->play_move_down::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z movedown
    jmp __b1
    // [250] phi from play_move_down to play_move_down::@1 [phi:play_move_down->play_move_down::@1]
  __b1_from_play_move_down:
    // [250] phi (byte) play_move_down::movedown#10 = (byte) 0 [phi:play_move_down->play_move_down::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z movedown
    jmp __b1
    // play_move_down::@1
  __b1:
    // [251] call keyboard_event_pressed 
    // [380] phi from play_move_down::@1 to keyboard_event_pressed [phi:play_move_down::@1->keyboard_event_pressed]
  keyboard_event_pressed_from___b1:
    // [380] phi (byte) keyboard_event_pressed::keycode#5 = (const nomodify byte) KEY_SPACE [phi:play_move_down::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_SPACE
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [252] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_4
    sta.z keyboard_event_pressed.return_5
    jmp __b12
    // play_move_down::@12
  __b12:
    // [253] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_5
    sta.z __2
    // [254] if((byte~) play_move_down::$2==(byte) 0) goto play_move_down::@2 -- vbuz1_eq_0_then_la1 
    lda.z __2
    cmp #0
    beq __b2_from___b12
    jmp __b5
    // play_move_down::@5
  __b5:
    // [255] if((byte) current_movedown_counter#12<(const nomodify byte) current_movedown_fast) goto play_move_down::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z current_movedown_counter
    cmp #current_movedown_fast
    bcc __b2_from___b5
    jmp __b6
    // play_move_down::@6
  __b6:
    // [256] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10 -- vbuz1=_inc_vbuz1 
    inc.z movedown
    // [257] phi from play_move_down::@12 play_move_down::@5 play_move_down::@6 to play_move_down::@2 [phi:play_move_down::@12/play_move_down::@5/play_move_down::@6->play_move_down::@2]
  __b2_from___b12:
  __b2_from___b5:
  __b2_from___b6:
    // [257] phi (byte) play_move_down::movedown#7 = (byte) play_move_down::movedown#10 [phi:play_move_down::@12/play_move_down::@5/play_move_down::@6->play_move_down::@2#0] -- register_copy 
    jmp __b2
    // play_move_down::@2
  __b2:
    // [258] if((byte) current_movedown_counter#12<(byte) current_movedown_slow#14) goto play_move_down::@3 -- vbuz1_lt_vbuz2_then_la1 
    lda.z current_movedown_counter
    cmp.z current_movedown_slow
    bcc __b3_from___b2
    jmp __b7
    // play_move_down::@7
  __b7:
    // [259] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7 -- vbuz1=_inc_vbuz1 
    inc.z movedown
    // [260] phi from play_move_down::@2 play_move_down::@7 to play_move_down::@3 [phi:play_move_down::@2/play_move_down::@7->play_move_down::@3]
  __b3_from___b2:
  __b3_from___b7:
    // [260] phi (byte) play_move_down::movedown#6 = (byte) play_move_down::movedown#7 [phi:play_move_down::@2/play_move_down::@7->play_move_down::@3#0] -- register_copy 
    jmp __b3
    // play_move_down::@3
  __b3:
    // [261] if((byte) play_move_down::movedown#6==(byte) 0) goto play_move_down::@return -- vbuz1_eq_0_then_la1 
    lda.z movedown
    cmp #0
    beq __breturn_from___b3
    jmp __b8
    // play_move_down::@8
  __b8:
    // [262] (byte) play_collision::ypos#0 ← (byte) current_ypos#11 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z current_ypos
    iny
    sty.z play_collision.ypos
    // [263] (byte) play_collision::xpos#0 ← (byte) current_xpos#14 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [264] (byte) play_collision::orientation#0 ← (byte) current_orientation#13 -- vbuz1=vbuz2 
    lda.z current_orientation
    sta.z play_collision.orientation
    // [265] (byte*) current_piece#96 ← (byte*) current_piece#10 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_1
    lda.z current_piece+1
    sta.z current_piece_1+1
    // [266] call play_collision 
    // [201] phi from play_move_down::@8 to play_collision [phi:play_move_down::@8->play_collision]
  play_collision_from___b8:
    // [201] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#0 [phi:play_move_down::@8->play_collision#0] -- register_copy 
    // [201] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#0 [phi:play_move_down::@8->play_collision#1] -- register_copy 
    // [201] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#0 [phi:play_move_down::@8->play_collision#2] -- register_copy 
    // [201] phi (byte*) current_piece#17 = (byte*) current_piece#96 [phi:play_move_down::@8->play_collision#3] -- register_copy 
    jsr play_collision
    // [267] (byte) play_collision::return#0 ← (byte) play_collision::return#15 -- vbuz1=vbuz2 
    lda.z play_collision.return_5
    sta.z play_collision.return
    jmp __b13
    // play_move_down::@13
  __b13:
    // [268] (byte~) play_move_down::$12 ← (byte) play_collision::return#0 -- vbuz1=vbuz2 
    lda.z play_collision.return
    sta.z __12
    // [269] if((byte~) play_move_down::$12==(const nomodify byte) COLLISION_NONE) goto play_move_down::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #COLLISION_NONE
    cmp.z __12
    beq __b10
    // [270] phi from play_move_down::@13 to play_move_down::@9 [phi:play_move_down::@13->play_move_down::@9]
  __b9_from___b13:
    jmp __b9
    // play_move_down::@9
  __b9:
    // [271] call play_lock_current 
    // Lock current piece
    jsr play_lock_current
    // [272] phi from play_move_down::@9 to play_move_down::@14 [phi:play_move_down::@9->play_move_down::@14]
  __b14_from___b9:
    jmp __b14
    // play_move_down::@14
  __b14:
    // [273] call play_remove_lines 
    // [339] phi from play_move_down::@14 to play_remove_lines [phi:play_move_down::@14->play_remove_lines]
  play_remove_lines_from___b14:
    jsr play_remove_lines
    // [274] (byte) play_remove_lines::return#0 ← (byte) play_remove_lines::removed#7 -- vbuz1=vbuz2 
    lda.z play_remove_lines.removed
    sta.z play_remove_lines.return
    jmp __b15
    // play_move_down::@15
  __b15:
    // [275] (byte) play_move_down::removed#0 ← (byte) play_remove_lines::return#0 -- vbuz1=vbuz2 
    lda.z play_remove_lines.return
    sta.z removed
    // [276] (byte) play_update_score::removed#0 ← (byte) play_move_down::removed#0 -- vbuz1=vbuz2 
    lda.z removed
    sta.z play_update_score.removed
    // [277] call play_update_score 
    // Tally up the score
    jsr play_update_score
    // [278] phi from play_move_down::@15 to play_move_down::@16 [phi:play_move_down::@15->play_move_down::@16]
  __b16_from___b15:
    jmp __b16
    // play_move_down::@16
  __b16:
    // [279] call play_spawn_current 
  // Spawn a new piece
    // [286] phi from play_move_down::@16 to play_spawn_current [phi:play_move_down::@16->play_spawn_current]
  play_spawn_current_from___b16:
    // [286] phi (byte) game_over#65 = (byte) game_over#10 [phi:play_move_down::@16->play_spawn_current#0] -- register_copy 
    // [286] phi (byte) next_piece_idx#17 = (byte) next_piece_idx#10 [phi:play_move_down::@16->play_spawn_current#1] -- register_copy 
    jsr play_spawn_current
    jmp __b17
    // play_move_down::@17
  __b17:
    // [280] (byte*) current_piece#93 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current.__7
    lda PIECES,y
    sta.z current_piece
    lda PIECES+1,y
    sta.z current_piece+1
    // [281] (byte*) current_piece_gfx#117 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current.__7
    lda PIECES,y
    sta.z current_piece_gfx
    lda PIECES+1,y
    sta.z current_piece_gfx+1
    // [282] phi from play_move_down::@17 to play_move_down::@11 [phi:play_move_down::@17->play_move_down::@11]
  __b11_from___b17:
    // [282] phi (byte) next_piece_idx#30 = (byte) play_spawn_current::piece_idx#2 [phi:play_move_down::@17->play_move_down::@11#0] -- register_copy 
    // [282] phi (byte) game_over#27 = (byte) game_over#52 [phi:play_move_down::@17->play_move_down::@11#1] -- register_copy 
    // [282] phi (byte) current_xpos#43 = (byte) current_xpos#100 [phi:play_move_down::@17->play_move_down::@11#2] -- register_copy 
    // [282] phi (byte*) current_piece_gfx#35 = (byte*) current_piece_gfx#117 [phi:play_move_down::@17->play_move_down::@11#3] -- register_copy 
    // [282] phi (byte) current_orientation#37 = (byte) 0 [phi:play_move_down::@17->play_move_down::@11#4] -- vbuz1=vbuc1 
    lda #0
    sta.z current_orientation
    // [282] phi (byte) current_piece_char#29 = (byte) current_piece_char#5 [phi:play_move_down::@17->play_move_down::@11#5] -- register_copy 
    // [282] phi (byte*) current_piece#28 = (byte*) current_piece#93 [phi:play_move_down::@17->play_move_down::@11#6] -- register_copy 
    // [282] phi (byte) level_bcd#31 = (byte) level_bcd#19 [phi:play_move_down::@17->play_move_down::@11#7] -- register_copy 
    // [282] phi (byte) current_movedown_slow#37 = (byte) current_movedown_slow#23 [phi:play_move_down::@17->play_move_down::@11#8] -- register_copy 
    // [282] phi (byte) level#33 = (byte) level#19 [phi:play_move_down::@17->play_move_down::@11#9] -- register_copy 
    // [282] phi (word) lines_bcd#26 = (word) lines_bcd#17 [phi:play_move_down::@17->play_move_down::@11#10] -- register_copy 
    // [282] phi (byte) current_ypos#38 = (byte) current_ypos#6 [phi:play_move_down::@17->play_move_down::@11#11] -- register_copy 
    jmp __b11
    // play_move_down::@11
  __b11:
    // [283] phi from play_move_down::@11 to play_move_down::@return [phi:play_move_down::@11->play_move_down::@return]
  __breturn_from___b11:
    // [283] phi (byte) next_piece_idx#16 = (byte) next_piece_idx#30 [phi:play_move_down::@11->play_move_down::@return#0] -- register_copy 
    // [283] phi (byte) game_over#15 = (byte) game_over#27 [phi:play_move_down::@11->play_move_down::@return#1] -- register_copy 
    // [283] phi (byte) current_xpos#22 = (byte) current_xpos#43 [phi:play_move_down::@11->play_move_down::@return#2] -- register_copy 
    // [283] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#35 [phi:play_move_down::@11->play_move_down::@return#3] -- register_copy 
    // [283] phi (byte) current_orientation#20 = (byte) current_orientation#37 [phi:play_move_down::@11->play_move_down::@return#4] -- register_copy 
    // [283] phi (byte) current_piece_char#16 = (byte) current_piece_char#29 [phi:play_move_down::@11->play_move_down::@return#5] -- register_copy 
    // [283] phi (byte*) current_piece#15 = (byte*) current_piece#28 [phi:play_move_down::@11->play_move_down::@return#6] -- register_copy 
    // [283] phi (byte) level_bcd#17 = (byte) level_bcd#31 [phi:play_move_down::@11->play_move_down::@return#7] -- register_copy 
    // [283] phi (byte) current_movedown_slow#21 = (byte) current_movedown_slow#37 [phi:play_move_down::@11->play_move_down::@return#8] -- register_copy 
    // [283] phi (byte) level#17 = (byte) level#33 [phi:play_move_down::@11->play_move_down::@return#9] -- register_copy 
    // [283] phi (word) lines_bcd#15 = (word) lines_bcd#26 [phi:play_move_down::@11->play_move_down::@return#10] -- register_copy 
    // [283] phi (byte) current_ypos#19 = (byte) current_ypos#38 [phi:play_move_down::@11->play_move_down::@return#11] -- register_copy 
    // [283] phi (byte) current_movedown_counter#14 = (byte) 0 [phi:play_move_down::@11->play_move_down::@return#12] -- vbuz1=vbuc1 
    lda #0
    sta.z current_movedown_counter
    // [283] phi (byte) play_move_down::return#3 = (byte) 1 [phi:play_move_down::@11->play_move_down::@return#13] -- vbuz1=vbuc1 
    lda #1
    sta.z return_1
    jmp __breturn
    // [283] phi from play_move_down::@3 to play_move_down::@return [phi:play_move_down::@3->play_move_down::@return]
  __breturn_from___b3:
    // [283] phi (byte) next_piece_idx#16 = (byte) next_piece_idx#10 [phi:play_move_down::@3->play_move_down::@return#0] -- register_copy 
    // [283] phi (byte) game_over#15 = (byte) game_over#10 [phi:play_move_down::@3->play_move_down::@return#1] -- register_copy 
    // [283] phi (byte) current_xpos#22 = (byte) current_xpos#14 [phi:play_move_down::@3->play_move_down::@return#2] -- register_copy 
    // [283] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#13 [phi:play_move_down::@3->play_move_down::@return#3] -- register_copy 
    // [283] phi (byte) current_orientation#20 = (byte) current_orientation#13 [phi:play_move_down::@3->play_move_down::@return#4] -- register_copy 
    // [283] phi (byte) current_piece_char#16 = (byte) current_piece_char#10 [phi:play_move_down::@3->play_move_down::@return#5] -- register_copy 
    // [283] phi (byte*) current_piece#15 = (byte*) current_piece#10 [phi:play_move_down::@3->play_move_down::@return#6] -- register_copy 
    // [283] phi (byte) level_bcd#17 = (byte) level_bcd#11 [phi:play_move_down::@3->play_move_down::@return#7] -- register_copy 
    // [283] phi (byte) current_movedown_slow#21 = (byte) current_movedown_slow#14 [phi:play_move_down::@3->play_move_down::@return#8] -- register_copy 
    // [283] phi (byte) level#17 = (byte) level#10 [phi:play_move_down::@3->play_move_down::@return#9] -- register_copy 
    // [283] phi (word) lines_bcd#15 = (word) lines_bcd#19 [phi:play_move_down::@3->play_move_down::@return#10] -- register_copy 
    // [283] phi (byte) current_ypos#19 = (byte) current_ypos#11 [phi:play_move_down::@3->play_move_down::@return#11] -- register_copy 
    // [283] phi (byte) current_movedown_counter#14 = (byte) current_movedown_counter#12 [phi:play_move_down::@3->play_move_down::@return#12] -- register_copy 
    // [283] phi (byte) play_move_down::return#3 = (byte) 0 [phi:play_move_down::@3->play_move_down::@return#13] -- vbuz1=vbuc1 
    lda #0
    sta.z return_1
    jmp __breturn
    // play_move_down::@return
  __breturn:
    // [284] return 
    rts
    // play_move_down::@10
  __b10:
    // [285] (byte) current_ypos#3 ← ++ (byte) current_ypos#11 -- vbuz1=_inc_vbuz1 
    inc.z current_ypos
    // [282] phi from play_move_down::@10 to play_move_down::@11 [phi:play_move_down::@10->play_move_down::@11]
  __b11_from___b10:
    // [282] phi (byte) next_piece_idx#30 = (byte) next_piece_idx#10 [phi:play_move_down::@10->play_move_down::@11#0] -- register_copy 
    // [282] phi (byte) game_over#27 = (byte) game_over#10 [phi:play_move_down::@10->play_move_down::@11#1] -- register_copy 
    // [282] phi (byte) current_xpos#43 = (byte) current_xpos#14 [phi:play_move_down::@10->play_move_down::@11#2] -- register_copy 
    // [282] phi (byte*) current_piece_gfx#35 = (byte*) current_piece_gfx#13 [phi:play_move_down::@10->play_move_down::@11#3] -- register_copy 
    // [282] phi (byte) current_orientation#37 = (byte) current_orientation#13 [phi:play_move_down::@10->play_move_down::@11#4] -- register_copy 
    // [282] phi (byte) current_piece_char#29 = (byte) current_piece_char#10 [phi:play_move_down::@10->play_move_down::@11#5] -- register_copy 
    // [282] phi (byte*) current_piece#28 = (byte*) current_piece#10 [phi:play_move_down::@10->play_move_down::@11#6] -- register_copy 
    // [282] phi (byte) level_bcd#31 = (byte) level_bcd#11 [phi:play_move_down::@10->play_move_down::@11#7] -- register_copy 
    // [282] phi (byte) current_movedown_slow#37 = (byte) current_movedown_slow#14 [phi:play_move_down::@10->play_move_down::@11#8] -- register_copy 
    // [282] phi (byte) level#33 = (byte) level#10 [phi:play_move_down::@10->play_move_down::@11#9] -- register_copy 
    // [282] phi (word) lines_bcd#26 = (word) lines_bcd#19 [phi:play_move_down::@10->play_move_down::@11#10] -- register_copy 
    // [282] phi (byte) current_ypos#38 = (byte) current_ypos#3 [phi:play_move_down::@10->play_move_down::@11#11] -- register_copy 
    jmp __b11
}
  // play_spawn_current
// Spawn a new piece
// Moves the next piece into the current and spawns a new next piece
play_spawn_current: {
    .label __1 = $ae
    .label __7 = $ac
    .label current_piece_idx = $ab
    .label sid_rnd1_return = $af
    // Spawn a new next piece
    // Pick a random piece (0-6)
    .label piece_idx = $45
    // [287] (byte) play_spawn_current::current_piece_idx#0 ← (byte) next_piece_idx#17 -- vbuz1=vbuz2 
    // Move next piece into current
    lda.z next_piece_idx
    sta.z current_piece_idx
    // [288] (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z current_piece_idx
    asl
    sta.z __7
    // [289] (byte) current_piece_char#5 ← *((const byte*) PIECES_CHARS + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z current_piece_idx
    lda PIECES_CHARS,y
    sta.z current_piece_char
    // [290] (byte) current_xpos#100 ← *((const byte*) PIECES_START_X + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z current_piece_idx
    lda PIECES_START_X,y
    sta.z current_xpos
    // [291] (byte) current_ypos#6 ← *((const byte*) PIECES_START_Y + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z current_piece_idx
    lda PIECES_START_Y,y
    sta.z current_ypos
    // [292] (byte) play_collision::xpos#4 ← (byte) current_xpos#100 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [293] (byte) play_collision::ypos#4 ← (byte) current_ypos#6 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [294] (byte*) current_piece#100 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z __7
    lda PIECES,y
    sta.z current_piece_1
    lda PIECES+1,y
    sta.z current_piece_1+1
    // [295] call play_collision 
    // [201] phi from play_spawn_current to play_collision [phi:play_spawn_current->play_collision]
  play_collision_from_play_spawn_current:
    // [201] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#4 [phi:play_spawn_current->play_collision#0] -- register_copy 
    // [201] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#4 [phi:play_spawn_current->play_collision#1] -- register_copy 
    // [201] phi (byte) play_collision::orientation#5 = (byte) 0 [phi:play_spawn_current->play_collision#2] -- vbuz1=vbuc1 
    lda #0
    sta.z play_collision.orientation
    // [201] phi (byte*) current_piece#17 = (byte*) current_piece#100 [phi:play_spawn_current->play_collision#3] -- register_copy 
    jsr play_collision
    // [296] (byte) play_collision::return#10 ← (byte) play_collision::return#15 -- vbuz1=vbuz2 
    lda.z play_collision.return_5
    sta.z play_collision.return_2
    jmp __b4
    // play_spawn_current::@4
  __b4:
    // [297] (byte~) play_spawn_current::$1 ← (byte) play_collision::return#10 -- vbuz1=vbuz2 
    lda.z play_collision.return_2
    sta.z __1
    // [298] if((byte~) play_spawn_current::$1!=(const nomodify byte) COLLISION_PLAYFIELD) goto play_spawn_current::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #COLLISION_PLAYFIELD
    cmp.z __1
    bne __b5_from___b4
    // [300] phi from play_spawn_current::@4 to play_spawn_current::@1 [phi:play_spawn_current::@4->play_spawn_current::@1]
  __b1_from___b4:
    // [300] phi (byte) game_over#52 = (byte) 1 [phi:play_spawn_current::@4->play_spawn_current::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z game_over
    jmp __b1
    // [299] phi from play_spawn_current::@4 to play_spawn_current::@5 [phi:play_spawn_current::@4->play_spawn_current::@5]
  __b5_from___b4:
    jmp __b5
    // play_spawn_current::@5
  __b5:
    // [300] phi from play_spawn_current::@5 to play_spawn_current::@1 [phi:play_spawn_current::@5->play_spawn_current::@1]
  __b1_from___b5:
    // [300] phi (byte) game_over#52 = (byte) game_over#65 [phi:play_spawn_current::@5->play_spawn_current::@1#0] -- register_copy 
    jmp __b1
    // play_spawn_current::@1
  __b1:
    // [301] phi from play_spawn_current::@1 to play_spawn_current::@2 [phi:play_spawn_current::@1->play_spawn_current::@2]
  __b2_from___b1:
    // [301] phi (byte) play_spawn_current::piece_idx#2 = (byte) 7 [phi:play_spawn_current::@1->play_spawn_current::@2#0] -- vbuz1=vbuc1 
    lda #7
    sta.z piece_idx
    jmp __b2
    // play_spawn_current::@2
  __b2:
    // [302] if((byte) play_spawn_current::piece_idx#2==(byte) 7) goto play_spawn_current::sid_rnd1 -- vbuz1_eq_vbuc1_then_la1 
    lda #7
    cmp.z piece_idx
    beq sid_rnd1
    jmp __breturn
    // play_spawn_current::@return
  __breturn:
    // [303] return 
    rts
    // play_spawn_current::sid_rnd1
  sid_rnd1:
    // [304] (byte) play_spawn_current::sid_rnd1_return#0 ← *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC) -- vbuz1=_deref_pbuc1 
    lda SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC
    sta.z sid_rnd1_return
    jmp __b3
    // play_spawn_current::@3
  __b3:
    // [305] (byte) play_spawn_current::piece_idx#1 ← (byte) play_spawn_current::sid_rnd1_return#0 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z sid_rnd1_return
    sta.z piece_idx
    // [301] phi from play_spawn_current::@3 to play_spawn_current::@2 [phi:play_spawn_current::@3->play_spawn_current::@2]
  __b2_from___b3:
    // [301] phi (byte) play_spawn_current::piece_idx#2 = (byte) play_spawn_current::piece_idx#1 [phi:play_spawn_current::@3->play_spawn_current::@2#0] -- register_copy 
    jmp __b2
}
  // play_update_score
// Update the score based on the number of lines removed
// play_update_score(byte zp($aa) removed)
play_update_score: {
    .label __2 = $b0
    .label __4 = $b7
    .label __9 = $b2
    .label removed = $aa
    .label lines_before = $b1
    .label add_bcd = $b3
    .label lines_after = $b8
    // [306] if((byte) play_update_score::removed#0==(byte) 0) goto play_update_score::@return -- vbuz1_eq_0_then_la1 
    lda.z removed
    cmp #0
    beq __breturn_from_play_update_score
    jmp __b1
    // play_update_score::@1
  __b1:
    // [307] (byte~) play_update_score::$2 ← < (word) lines_bcd#19 -- vbuz1=_lo_vwuz2 
    lda.z lines_bcd
    sta.z __2
    // [308] (byte) play_update_score::lines_before#0 ← (byte~) play_update_score::$2 & (byte) $f0 -- vbuz1=vbuz2_band_vbuc1 
    lda #$f0
    and.z __2
    sta.z lines_before
    // [309] (byte~) play_update_score::$9 ← (byte) play_update_score::removed#0 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z removed
    asl
    asl
    sta.z __9
    // [310] (dword) play_update_score::add_bcd#0 ← *((const dword*) score_add_bcd + (byte~) play_update_score::$9) -- vduz1=pduc1_derefidx_vbuz2 
    ldy.z __9
    lda score_add_bcd,y
    sta.z add_bcd
    lda score_add_bcd+1,y
    sta.z add_bcd+1
    lda score_add_bcd+2,y
    sta.z add_bcd+2
    lda score_add_bcd+3,y
    sta.z add_bcd+3
    // asm { sed  }
    sed
    // [312] (word) lines_bcd#29 ← (word) lines_bcd#19 + (byte) play_update_score::removed#0 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z removed
    clc
    adc.z lines_bcd
    sta.z lines_bcd
    bcc !+
    inc.z lines_bcd+1
  !:
    // [313] (volatile dword) score_bcd ← (volatile dword) score_bcd + (dword) play_update_score::add_bcd#0 -- vduz1=vduz1_plus_vduz2 
    lda.z score_bcd
    clc
    adc.z add_bcd
    sta.z score_bcd
    lda.z score_bcd+1
    adc.z add_bcd+1
    sta.z score_bcd+1
    lda.z score_bcd+2
    adc.z add_bcd+2
    sta.z score_bcd+2
    lda.z score_bcd+3
    adc.z add_bcd+3
    sta.z score_bcd+3
    // asm { cld  }
    cld
    // [315] (byte~) play_update_score::$4 ← < (word) lines_bcd#29 -- vbuz1=_lo_vwuz2 
    lda.z lines_bcd
    sta.z __4
    // [316] (byte) play_update_score::lines_after#0 ← (byte~) play_update_score::$4 & (byte) $f0 -- vbuz1=vbuz2_band_vbuc1 
    lda #$f0
    and.z __4
    sta.z lines_after
    // [317] if((byte) play_update_score::lines_before#0==(byte) play_update_score::lines_after#0) goto play_update_score::@return -- vbuz1_eq_vbuz2_then_la1 
    lda.z lines_before
    cmp.z lines_after
    beq __breturn_from___b1
    // [318] phi from play_update_score::@1 to play_update_score::@2 [phi:play_update_score::@1->play_update_score::@2]
  __b2_from___b1:
    jmp __b2
    // play_update_score::@2
  __b2:
    // [319] call play_increase_level 
    jsr play_increase_level
    // [320] phi from play_update_score play_update_score::@1 play_update_score::@2 to play_update_score::@return [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return]
  __breturn_from_play_update_score:
  __breturn_from___b1:
  __breturn_from___b2:
    // [320] phi (byte) level_bcd#19 = (byte) level_bcd#11 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#0] -- register_copy 
    // [320] phi (byte) current_movedown_slow#23 = (byte) current_movedown_slow#14 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#1] -- register_copy 
    // [320] phi (byte) level#19 = (byte) level#10 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#2] -- register_copy 
    // [320] phi (word) lines_bcd#17 = (word) lines_bcd#19 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#3] -- register_copy 
    jmp __breturn
    // play_update_score::@return
  __breturn:
    // [321] return 
    rts
}
  // play_increase_level
// Increase the level
play_increase_level: {
    .label __1 = $b9
    .label __5 = $ba
    .label b = $47
    // [322] (byte) level#21 ← ++ (byte) level#10 -- vbuz1=_inc_vbuz1 
    inc.z level
    // [323] if((byte) level#21>=(byte) $1d+(byte) 1) goto play_increase_level::@1 -- vbuz1_ge_vbuc1_then_la1 
    // Update speed of moving tetrominos down
    lda.z level
    cmp #$1d+1
    bcs __b1_from_play_increase_level
    jmp __b3
    // play_increase_level::@3
  __b3:
    // [324] (byte) current_movedown_slow#10 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS + (byte) level#21) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z level
    lda MOVEDOWN_SLOW_SPEEDS,y
    sta.z current_movedown_slow
    // [325] phi from play_increase_level::@3 to play_increase_level::@1 [phi:play_increase_level::@3->play_increase_level::@1]
  __b1_from___b3:
    // [325] phi (byte) current_movedown_slow#65 = (byte) current_movedown_slow#10 [phi:play_increase_level::@3->play_increase_level::@1#0] -- register_copy 
    jmp __b1
    // [325] phi from play_increase_level to play_increase_level::@1 [phi:play_increase_level->play_increase_level::@1]
  __b1_from_play_increase_level:
    // [325] phi (byte) current_movedown_slow#65 = (byte) 1 [phi:play_increase_level->play_increase_level::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z current_movedown_slow
    jmp __b1
    // play_increase_level::@1
  __b1:
    // [326] (byte) level_bcd#21 ← ++ (byte) level_bcd#11 -- vbuz1=_inc_vbuz1 
    inc.z level_bcd
    // [327] (byte~) play_increase_level::$1 ← (byte) level_bcd#21 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z level_bcd
    sta.z __1
    // [328] if((byte~) play_increase_level::$1!=(byte) $a) goto play_increase_level::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$a
    cmp.z __1
    bne __b2_from___b1
    jmp __b4
    // play_increase_level::@4
  __b4:
    // [329] (byte) level_bcd#8 ← (byte) level_bcd#21 + (byte) 6 -- vbuz1=vbuz1_plus_vbuc1 
    // If level low nybble hits 0xa change to 0x10
    lax.z level_bcd
    axs #-[6]
    stx.z level_bcd
    // [330] phi from play_increase_level::@1 play_increase_level::@4 to play_increase_level::@2 [phi:play_increase_level::@1/play_increase_level::@4->play_increase_level::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [330] phi (byte) level_bcd#62 = (byte) level_bcd#21 [phi:play_increase_level::@1/play_increase_level::@4->play_increase_level::@2#0] -- register_copy 
    jmp __b2
    // play_increase_level::@2
  __b2:
    // asm { sed  }
    // Increase the score values gained
    sed
    // [332] phi from play_increase_level::@2 to play_increase_level::@5 [phi:play_increase_level::@2->play_increase_level::@5]
  __b5_from___b2:
    // [332] phi (byte) play_increase_level::b#2 = (byte) 0 [phi:play_increase_level::@2->play_increase_level::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta.z b
    jmp __b5
    // [332] phi from play_increase_level::@5 to play_increase_level::@5 [phi:play_increase_level::@5->play_increase_level::@5]
  __b5_from___b5:
    // [332] phi (byte) play_increase_level::b#2 = (byte) play_increase_level::b#1 [phi:play_increase_level::@5->play_increase_level::@5#0] -- register_copy 
    jmp __b5
    // play_increase_level::@5
  __b5:
    // [333] (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z b
    asl
    asl
    sta.z __5
    // [334] *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) ← *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) + *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_increase_level::$5) -- pduc1_derefidx_vbuz1=pduc1_derefidx_vbuz1_plus_pduc2_derefidx_vbuz1 
    ldy.z __5
    clc
    lda score_add_bcd,y
    adc SCORE_BASE_BCD,y
    sta score_add_bcd,y
    lda score_add_bcd+1,y
    adc SCORE_BASE_BCD+1,y
    sta score_add_bcd+1,y
    lda score_add_bcd+2,y
    adc SCORE_BASE_BCD+2,y
    sta score_add_bcd+2,y
    lda score_add_bcd+3,y
    adc SCORE_BASE_BCD+3,y
    sta score_add_bcd+3,y
    // [335] (byte) play_increase_level::b#1 ← ++ (byte) play_increase_level::b#2 -- vbuz1=_inc_vbuz1 
    inc.z b
    // [336] if((byte) play_increase_level::b#1!=(byte) 5) goto play_increase_level::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp.z b
    bne __b5_from___b5
    jmp __b6
    // play_increase_level::@6
  __b6:
    // asm { cld  }
    cld
    jmp __breturn
    // play_increase_level::@return
  __breturn:
    // [338] return 
    rts
}
  // play_remove_lines
// Look through the playfield for lines - and remove any lines found
// Utilizes two cursors on the playfield - one reading cells and one writing cells
// Whenever a full line is detected the writing cursor is instructed to write to the same line once more.
// Returns the number of lines removed
play_remove_lines: {
    .label return = $a8
    .label c = $bb
    // Start both cursors at the end of the playfield
    .label r = $4a
    .label w = $4d
    .label x = $4b
    .label y = $48
    .label removed = $49
    .label full = $4c
    // [340] phi from play_remove_lines to play_remove_lines::@1 [phi:play_remove_lines->play_remove_lines::@1]
  __b1_from_play_remove_lines:
    // [340] phi (byte) play_remove_lines::removed#11 = (byte) 0 [phi:play_remove_lines->play_remove_lines::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z removed
    // [340] phi (byte) play_remove_lines::y#8 = (byte) 0 [phi:play_remove_lines->play_remove_lines::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [340] phi (byte) play_remove_lines::w#12 = (const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(byte) 1 [phi:play_remove_lines->play_remove_lines::@1#2] -- vbuz1=vbuc1 
    lda #PLAYFIELD_LINES*PLAYFIELD_COLS-1
    sta.z w
    // [340] phi (byte) play_remove_lines::r#3 = (const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(byte) 1 [phi:play_remove_lines->play_remove_lines::@1#3] -- vbuz1=vbuc1 
    lda #PLAYFIELD_LINES*PLAYFIELD_COLS-1
    sta.z r
    jmp __b1
  // Read all lines and rewrite them
    // [340] phi from play_remove_lines::@6 to play_remove_lines::@1 [phi:play_remove_lines::@6->play_remove_lines::@1]
  __b1_from___b6:
    // [340] phi (byte) play_remove_lines::removed#11 = (byte) play_remove_lines::removed#7 [phi:play_remove_lines::@6->play_remove_lines::@1#0] -- register_copy 
    // [340] phi (byte) play_remove_lines::y#8 = (byte) play_remove_lines::y#1 [phi:play_remove_lines::@6->play_remove_lines::@1#1] -- register_copy 
    // [340] phi (byte) play_remove_lines::w#12 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@6->play_remove_lines::@1#2] -- register_copy 
    // [340] phi (byte) play_remove_lines::r#3 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@6->play_remove_lines::@1#3] -- register_copy 
    jmp __b1
    // play_remove_lines::@1
  __b1:
    // [341] phi from play_remove_lines::@1 to play_remove_lines::@2 [phi:play_remove_lines::@1->play_remove_lines::@2]
  __b2_from___b1:
    // [341] phi (byte) play_remove_lines::full#4 = (byte) 1 [phi:play_remove_lines::@1->play_remove_lines::@2#0] -- vbuz1=vbuc1 
    lda #1
    sta.z full
    // [341] phi (byte) play_remove_lines::x#2 = (byte) 0 [phi:play_remove_lines::@1->play_remove_lines::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [341] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#12 [phi:play_remove_lines::@1->play_remove_lines::@2#2] -- register_copy 
    // [341] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#3 [phi:play_remove_lines::@1->play_remove_lines::@2#3] -- register_copy 
    jmp __b2
    // [341] phi from play_remove_lines::@3 to play_remove_lines::@2 [phi:play_remove_lines::@3->play_remove_lines::@2]
  __b2_from___b3:
    // [341] phi (byte) play_remove_lines::full#4 = (byte) play_remove_lines::full#2 [phi:play_remove_lines::@3->play_remove_lines::@2#0] -- register_copy 
    // [341] phi (byte) play_remove_lines::x#2 = (byte) play_remove_lines::x#1 [phi:play_remove_lines::@3->play_remove_lines::@2#1] -- register_copy 
    // [341] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#1 [phi:play_remove_lines::@3->play_remove_lines::@2#2] -- register_copy 
    // [341] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@3->play_remove_lines::@2#3] -- register_copy 
    jmp __b2
    // play_remove_lines::@2
  __b2:
    // [342] (byte) play_remove_lines::c#0 ← *((const byte*) playfield + (byte) play_remove_lines::r#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z r
    lda playfield,y
    sta.z c
    // [343] (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2 -- vbuz1=_dec_vbuz1 
    dec.z r
    // [344] if((byte) play_remove_lines::c#0!=(byte) 0) goto play_remove_lines::@9 -- vbuz1_neq_0_then_la1 
    lda.z c
    cmp #0
    bne __b9_from___b2
    // [346] phi from play_remove_lines::@2 to play_remove_lines::@3 [phi:play_remove_lines::@2->play_remove_lines::@3]
  __b3_from___b2:
    // [346] phi (byte) play_remove_lines::full#2 = (byte) 0 [phi:play_remove_lines::@2->play_remove_lines::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z full
    jmp __b3
    // [345] phi from play_remove_lines::@2 to play_remove_lines::@9 [phi:play_remove_lines::@2->play_remove_lines::@9]
  __b9_from___b2:
    jmp __b9
    // play_remove_lines::@9
  __b9:
    // [346] phi from play_remove_lines::@9 to play_remove_lines::@3 [phi:play_remove_lines::@9->play_remove_lines::@3]
  __b3_from___b9:
    // [346] phi (byte) play_remove_lines::full#2 = (byte) play_remove_lines::full#4 [phi:play_remove_lines::@9->play_remove_lines::@3#0] -- register_copy 
    jmp __b3
    // play_remove_lines::@3
  __b3:
    // [347] *((const byte*) playfield + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z c
    ldy.z w
    sta playfield,y
    // [348] (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4 -- vbuz1=_dec_vbuz1 
    dec.z w
    // [349] (byte) play_remove_lines::x#1 ← ++ (byte) play_remove_lines::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [350] if((byte) play_remove_lines::x#1!=(const nomodify byte) PLAYFIELD_COLS-(byte) 1+(byte) 1) goto play_remove_lines::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_COLS-1+1
    cmp.z x
    bne __b2_from___b3
    jmp __b4
    // play_remove_lines::@4
  __b4:
    // [351] if((byte) play_remove_lines::full#2!=(byte) 1) goto play_remove_lines::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp.z full
    bne __b6_from___b4
    jmp __b5
    // play_remove_lines::@5
  __b5:
    // [352] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const nomodify byte) PLAYFIELD_COLS -- vbuz1=vbuz1_plus_vbuc1 
    lax.z w
    axs #-[PLAYFIELD_COLS]
    stx.z w
    // [353] (byte) play_remove_lines::removed#1 ← ++ (byte) play_remove_lines::removed#11 -- vbuz1=_inc_vbuz1 
    inc.z removed
    // [354] phi from play_remove_lines::@4 play_remove_lines::@5 to play_remove_lines::@6 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6]
  __b6_from___b4:
  __b6_from___b5:
    // [354] phi (byte) play_remove_lines::removed#7 = (byte) play_remove_lines::removed#11 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6#0] -- register_copy 
    // [354] phi (byte) play_remove_lines::w#11 = (byte) play_remove_lines::w#1 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6#1] -- register_copy 
    jmp __b6
    // play_remove_lines::@6
  __b6:
    // [355] (byte) play_remove_lines::y#1 ← ++ (byte) play_remove_lines::y#8 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [356] if((byte) play_remove_lines::y#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto play_remove_lines::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_LINES-1+1
    cmp.z y
    bne __b1_from___b6
    // [357] phi from play_remove_lines::@6 play_remove_lines::@8 to play_remove_lines::@7 [phi:play_remove_lines::@6/play_remove_lines::@8->play_remove_lines::@7]
  __b7_from___b6:
  __b7_from___b8:
    // [357] phi (byte) play_remove_lines::w#6 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@6/play_remove_lines::@8->play_remove_lines::@7#0] -- register_copy 
    jmp __b7
  // Write zeros in the rest of the lines
    // play_remove_lines::@7
  __b7:
    // [358] if((byte) play_remove_lines::w#6!=(byte) $ff) goto play_remove_lines::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z w
    bne __b8
    jmp __breturn
    // play_remove_lines::@return
  __breturn:
    // [359] return 
    rts
    // play_remove_lines::@8
  __b8:
    // [360] *((const byte*) playfield + (byte) play_remove_lines::w#6) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z w
    sta playfield,y
    // [361] (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#6 -- vbuz1=_dec_vbuz1 
    dec.z w
    jmp __b7_from___b8
}
  // play_lock_current
// Lock the current piece onto the playfield
play_lock_current: {
    .label __4 = $bc
    .label yp = $4e
    .label playfield_line = $bd
    .label xp = $51
    .label i = $bf
    .label c = $52
    .label l = $4f
    .label i_1 = $50
    // [362] (byte) play_lock_current::yp#0 ← (byte) current_ypos#11 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z yp
    // [363] phi from play_lock_current to play_lock_current::@1 [phi:play_lock_current->play_lock_current::@1]
  __b1_from_play_lock_current:
    // [363] phi (byte) play_lock_current::l#6 = (byte) 0 [phi:play_lock_current->play_lock_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [363] phi (byte) play_lock_current::i#3 = (byte) 0 [phi:play_lock_current->play_lock_current::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i_1
    // [363] phi (byte) play_lock_current::yp#2 = (byte) play_lock_current::yp#0 [phi:play_lock_current->play_lock_current::@1#2] -- register_copy 
    jmp __b1
    // play_lock_current::@1
  __b1:
    // [364] (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z yp
    asl
    sta.z __4
    // [365] (byte*) play_lock_current::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_lock_current::$4) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z __4
    lda playfield_lines,y
    sta.z playfield_line
    lda playfield_lines+1,y
    sta.z playfield_line+1
    // [366] (byte) play_lock_current::xp#0 ← (byte) current_xpos#14 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z xp
    // [367] phi from play_lock_current::@1 to play_lock_current::@2 [phi:play_lock_current::@1->play_lock_current::@2]
  __b2_from___b1:
    // [367] phi (byte) play_lock_current::c#2 = (byte) 0 [phi:play_lock_current::@1->play_lock_current::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [367] phi (byte) play_lock_current::xp#2 = (byte) play_lock_current::xp#0 [phi:play_lock_current::@1->play_lock_current::@2#1] -- register_copy 
    // [367] phi (byte) play_lock_current::i#2 = (byte) play_lock_current::i#3 [phi:play_lock_current::@1->play_lock_current::@2#2] -- register_copy 
    jmp __b2
    // play_lock_current::@2
  __b2:
    // [368] (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2 -- vbuz1=_inc_vbuz2 
    ldy.z i_1
    iny
    sty.z i
    // [369] if(*((byte*) current_piece_gfx#13 + (byte) play_lock_current::i#2)==(byte) 0) goto play_lock_current::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z i_1
    lda (current_piece_gfx),y
    cmp #0
    beq __b3
    jmp __b4
    // play_lock_current::@4
  __b4:
    // [370] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::xp#2) ← (byte) current_piece_char#10 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z current_piece_char
    ldy.z xp
    sta (playfield_line),y
    jmp __b3
    // play_lock_current::@3
  __b3:
    // [371] (byte) play_lock_current::xp#1 ← ++ (byte) play_lock_current::xp#2 -- vbuz1=_inc_vbuz1 
    inc.z xp
    // [372] (byte) play_lock_current::c#1 ← ++ (byte) play_lock_current::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [373] if((byte) play_lock_current::c#1!=(byte) 4) goto play_lock_current::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z c
    bne __b7
    jmp __b5
    // play_lock_current::@5
  __b5:
    // [374] (byte) play_lock_current::yp#1 ← ++ (byte) play_lock_current::yp#2 -- vbuz1=_inc_vbuz1 
    inc.z yp
    // [375] (byte) play_lock_current::l#1 ← ++ (byte) play_lock_current::l#6 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [376] if((byte) play_lock_current::l#1!=(byte) 4) goto play_lock_current::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne __b6
    jmp __breturn
    // play_lock_current::@return
  __breturn:
    // [377] return 
    rts
    // play_lock_current::@6
  __b6:
    // [378] (byte) play_lock_current::i#7 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_1
    // [363] phi from play_lock_current::@6 to play_lock_current::@1 [phi:play_lock_current::@6->play_lock_current::@1]
  __b1_from___b6:
    // [363] phi (byte) play_lock_current::l#6 = (byte) play_lock_current::l#1 [phi:play_lock_current::@6->play_lock_current::@1#0] -- register_copy 
    // [363] phi (byte) play_lock_current::i#3 = (byte) play_lock_current::i#7 [phi:play_lock_current::@6->play_lock_current::@1#1] -- register_copy 
    // [363] phi (byte) play_lock_current::yp#2 = (byte) play_lock_current::yp#1 [phi:play_lock_current::@6->play_lock_current::@1#2] -- register_copy 
    jmp __b1
    // play_lock_current::@7
  __b7:
    // [379] (byte) play_lock_current::i#9 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_1
    // [367] phi from play_lock_current::@7 to play_lock_current::@2 [phi:play_lock_current::@7->play_lock_current::@2]
  __b2_from___b7:
    // [367] phi (byte) play_lock_current::c#2 = (byte) play_lock_current::c#1 [phi:play_lock_current::@7->play_lock_current::@2#0] -- register_copy 
    // [367] phi (byte) play_lock_current::xp#2 = (byte) play_lock_current::xp#1 [phi:play_lock_current::@7->play_lock_current::@2#1] -- register_copy 
    // [367] phi (byte) play_lock_current::i#2 = (byte) play_lock_current::i#9 [phi:play_lock_current::@7->play_lock_current::@2#2] -- register_copy 
    jmp __b2
}
  // keyboard_event_pressed
// Determine if a specific key is currently pressed based on the last keyboard_event_scan()
// Returns 0 is not pressed and non-0 if pressed
// keyboard_event_pressed(byte zp($53) keycode)
keyboard_event_pressed: {
    .label __0 = $c0
    .label __1 = $c2
    .label return = $c7
    .label return_1 = $c9
    .label return_2 = $cb
    .label row_bits = $c1
    .label return_3 = $cd
    .label keycode = $53
    .label return_4 = $c3
    .label return_5 = $a4
    // [381] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte) 3 -- vbuz1=vbuz2_ror_3 
    lda.z keycode
    lsr
    lsr
    lsr
    sta.z __0
    // [382] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte*) keyboard_scan_values + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda keyboard_scan_values,y
    sta.z row_bits
    // [383] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z keycode
    sta.z __1
    // [384] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda.z row_bits
    ldy.z __1
    and keyboard_matrix_col_bitmask,y
    sta.z return_4
    jmp __breturn
    // keyboard_event_pressed::@return
  __breturn:
    // [385] return 
    rts
}
  // keyboard_event_get
// Get the next event from the keyboard event buffer.
// Returns $ff if there is no event waiting. As all events are <$7f it is enough to examine bit 7 when determining if there is any event to process.
// The buffer is filled by keyboard_event_scan()
keyboard_event_get: {
    .label return = $54
    .label return_1 = $79
    // [386] if((byte) keyboard_events_size#13==(byte) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda.z keyboard_events_size
    cmp #0
    beq __breturn_from_keyboard_event_get
    jmp __b1
    // keyboard_event_get::@1
  __b1:
    // [387] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13 -- vbuz1=_dec_vbuz1 
    dec.z keyboard_events_size
    // [388] (byte) keyboard_event_get::return#1 ← *((const byte*) keyboard_events + (byte) keyboard_events_size#4) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z keyboard_events_size
    lda keyboard_events,y
    sta.z return
    // [389] phi from keyboard_event_get::@1 to keyboard_event_get::@return [phi:keyboard_event_get::@1->keyboard_event_get::@return]
  __breturn_from___b1:
    // [389] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@1->keyboard_event_get::@return#0] -- register_copy 
    // [389] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@1->keyboard_event_get::@return#1] -- register_copy 
    jmp __breturn
    // [389] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  __breturn_from_keyboard_event_get:
    // [389] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#13 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
    // [389] phi (byte) keyboard_event_get::return#2 = (byte) $ff [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuz1=vbuc1 
    lda #$ff
    sta.z return
    jmp __breturn
    // keyboard_event_get::@return
  __breturn:
    // [390] return 
    rts
}
  // keyboard_event_scan
// Scans the entire matrix to determine which keys have been pressed/depressed.
// Generates keyboard events into the event buffer. Events can be read using keyboard_event_get().
// Handles debounce and only generates events when the status of a key changes.
// Also stores current status of modifiers in keyboard_modifiers.
keyboard_event_scan: {
    .label __0 = $c8
    .label __3 = $ca
    .label __6 = $cc
    .label __9 = $ce
    .label __15 = $cf
    .label __16 = $d0
    .label __23 = $d2
    .label row_scan = $c6
    .label keycode = $57
    .label row = $55
    .label col = $56
    .label event_type = $d1
    // [392] phi from keyboard_event_scan to keyboard_event_scan::@7 [phi:keyboard_event_scan->keyboard_event_scan::@7]
  __b7_from_keyboard_event_scan:
    // [392] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#19 [phi:keyboard_event_scan->keyboard_event_scan::@7#0] -- register_copy 
    // [392] phi (byte) keyboard_event_scan::keycode#11 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keycode
    // [392] phi (byte) keyboard_event_scan::row#2 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#2] -- vbuz1=vbuc1 
    lda #0
    sta.z row
    jmp __b7
    // [392] phi from keyboard_event_scan::@8 to keyboard_event_scan::@7 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7]
  __b7_from___b8:
    // [392] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#0] -- register_copy 
    // [392] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#1] -- register_copy 
    // [392] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#2] -- register_copy 
    jmp __b7
    // keyboard_event_scan::@7
  __b7:
    // [393] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuz1=vbuz2 
    lda.z row
    sta.z keyboard_matrix_read.rowid
    // [394] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [395] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0 -- vbuz1=vbuz2 
    lda.z keyboard_matrix_read.return
    sta.z keyboard_matrix_read.return_1
    jmp __b19
    // keyboard_event_scan::@19
  __b19:
    // [396] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuz2 
    lda.z keyboard_matrix_read.return_1
    sta.z row_scan
    // [397] if((byte) keyboard_event_scan::row_scan#0!=*((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda.z row_scan
    ldy.z row
    cmp keyboard_scan_values,y
    bne __b9_from___b19
    jmp __b16
    // keyboard_event_scan::@16
  __b16:
    // [398] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z keycode
    axs #-[8]
    stx.z keycode
    // [399] phi from keyboard_event_scan::@15 keyboard_event_scan::@16 to keyboard_event_scan::@8 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8]
  __b8_from___b15:
  __b8_from___b16:
    // [399] phi (byte) keyboard_events_size#13 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#0] -- register_copy 
    // [399] phi (byte) keyboard_event_scan::keycode#13 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#1] -- register_copy 
    jmp __b8
    // keyboard_event_scan::@8
  __b8:
    // [400] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [401] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z row
    bne __b7_from___b8
    // [402] phi from keyboard_event_scan::@8 to keyboard_event_scan::@17 [phi:keyboard_event_scan::@8->keyboard_event_scan::@17]
  __b17_from___b8:
    jmp __b17
    // keyboard_event_scan::@17
  __b17:
    // [403] call keyboard_event_pressed 
    // [380] phi from keyboard_event_scan::@17 to keyboard_event_pressed [phi:keyboard_event_scan::@17->keyboard_event_pressed]
  keyboard_event_pressed_from___b17:
    // [380] phi (byte) keyboard_event_pressed::keycode#5 = (const nomodify byte) KEY_LSHIFT [phi:keyboard_event_scan::@17->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [404] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_4
    sta.z keyboard_event_pressed.return
    jmp __b20
    // keyboard_event_scan::@20
  __b20:
    // [405] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return
    sta.z __0
    // [406] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1 -- vbuz1_eq_0_then_la1 
    lda.z __0
    cmp #0
    beq __b1_from___b20
    // [407] phi from keyboard_event_scan::@20 to keyboard_event_scan::@18 [phi:keyboard_event_scan::@20->keyboard_event_scan::@18]
  __b18_from___b20:
    jmp __b18
    // keyboard_event_scan::@18
  __b18:
    // [408] phi from keyboard_event_scan::@18 keyboard_event_scan::@20 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@18/keyboard_event_scan::@20->keyboard_event_scan::@1]
  __b1_from___b18:
  __b1_from___b20:
    jmp __b1
    // keyboard_event_scan::@1
  __b1:
    // [409] call keyboard_event_pressed 
    // [380] phi from keyboard_event_scan::@1 to keyboard_event_pressed [phi:keyboard_event_scan::@1->keyboard_event_pressed]
  keyboard_event_pressed_from___b1:
    // [380] phi (byte) keyboard_event_pressed::keycode#5 = (const nomodify byte) KEY_RSHIFT [phi:keyboard_event_scan::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [410] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_4
    sta.z keyboard_event_pressed.return_1
    jmp __b21
    // keyboard_event_scan::@21
  __b21:
    // [411] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_1
    sta.z __3
    // [412] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2 -- vbuz1_eq_0_then_la1 
    lda.z __3
    cmp #0
    beq __b2_from___b21
    // [413] phi from keyboard_event_scan::@21 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@21->keyboard_event_scan::@4]
  __b4_from___b21:
    jmp __b4
    // keyboard_event_scan::@4
  __b4:
    // [414] phi from keyboard_event_scan::@21 keyboard_event_scan::@4 to keyboard_event_scan::@2 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2]
  __b2_from___b21:
  __b2_from___b4:
    jmp __b2
    // keyboard_event_scan::@2
  __b2:
    // [415] call keyboard_event_pressed 
    // [380] phi from keyboard_event_scan::@2 to keyboard_event_pressed [phi:keyboard_event_scan::@2->keyboard_event_pressed]
  keyboard_event_pressed_from___b2:
    // [380] phi (byte) keyboard_event_pressed::keycode#5 = (const nomodify byte) KEY_CTRL [phi:keyboard_event_scan::@2->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [416] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_4
    sta.z keyboard_event_pressed.return_2
    jmp __b22
    // keyboard_event_scan::@22
  __b22:
    // [417] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_2
    sta.z __6
    // [418] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3 -- vbuz1_eq_0_then_la1 
    lda.z __6
    cmp #0
    beq __b3_from___b22
    // [419] phi from keyboard_event_scan::@22 to keyboard_event_scan::@5 [phi:keyboard_event_scan::@22->keyboard_event_scan::@5]
  __b5_from___b22:
    jmp __b5
    // keyboard_event_scan::@5
  __b5:
    // [420] phi from keyboard_event_scan::@22 keyboard_event_scan::@5 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3]
  __b3_from___b22:
  __b3_from___b5:
    jmp __b3
    // keyboard_event_scan::@3
  __b3:
    // [421] call keyboard_event_pressed 
    // [380] phi from keyboard_event_scan::@3 to keyboard_event_pressed [phi:keyboard_event_scan::@3->keyboard_event_pressed]
  keyboard_event_pressed_from___b3:
    // [380] phi (byte) keyboard_event_pressed::keycode#5 = (const nomodify byte) KEY_COMMODORE [phi:keyboard_event_scan::@3->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [422] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_4
    sta.z keyboard_event_pressed.return_3
    jmp __b23
    // keyboard_event_scan::@23
  __b23:
    // [423] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#10 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_3
    sta.z __9
    // [424] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return -- vbuz1_eq_0_then_la1 
    lda.z __9
    cmp #0
    beq __breturn
    // [425] phi from keyboard_event_scan::@23 to keyboard_event_scan::@6 [phi:keyboard_event_scan::@23->keyboard_event_scan::@6]
  __b6_from___b23:
    jmp __b6
    // keyboard_event_scan::@6
  __b6:
    jmp __breturn
    // keyboard_event_scan::@return
  __breturn:
    // [426] return 
    rts
  // Something has changed on the keyboard row - check each column
    // [427] phi from keyboard_event_scan::@10 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9]
  __b9_from___b10:
    // [427] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#0] -- register_copy 
    // [427] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#1] -- register_copy 
    // [427] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#2] -- register_copy 
    jmp __b9
    // [427] phi from keyboard_event_scan::@19 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9]
  __b9_from___b19:
    // [427] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#30 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#0] -- register_copy 
    // [427] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#1] -- register_copy 
    // [427] phi (byte) keyboard_event_scan::col#2 = (byte) 0 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#2] -- vbuz1=vbuc1 
    lda #0
    sta.z col
    jmp __b9
    // keyboard_event_scan::@9
  __b9:
    // [428] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) -- vbuz1=vbuz2_bxor_pbuc1_derefidx_vbuz3 
    lda.z row_scan
    ldy.z row
    eor keyboard_scan_values,y
    sta.z __15
    // [429] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda.z __15
    ldy.z col
    and keyboard_matrix_col_bitmask,y
    sta.z __16
    // [430] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@10 -- vbuz1_eq_0_then_la1 
    lda.z __16
    cmp #0
    beq __b10_from___b9
    jmp __b12
    // keyboard_event_scan::@12
  __b12:
    // [431] if((byte) keyboard_events_size#10==(byte) 8) goto keyboard_event_scan::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z keyboard_events_size
    beq __b10_from___b12
    jmp __b13
    // keyboard_event_scan::@13
  __b13:
    // [432] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda.z row_scan
    ldy.z col
    and keyboard_matrix_col_bitmask,y
    sta.z event_type
    // [433] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@11 -- vbuz1_eq_0_then_la1 
    lda.z event_type
    cmp #0
    beq __b11
    jmp __b14
    // keyboard_event_scan::@14
  __b14:
    // [434] *((const byte*) keyboard_events + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key pressed
    lda.z keycode
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [435] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    // [436] phi from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10]
  __b10_from___b11:
  __b10_from___b12:
  __b10_from___b14:
  __b10_from___b9:
    // [436] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#1 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10#0] -- register_copy 
    jmp __b10
    // keyboard_event_scan::@10
  __b10:
    // [437] (byte) keyboard_event_scan::keycode#14 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc.z keycode
    // [438] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuz1=_inc_vbuz1 
    inc.z col
    // [439] if((byte) keyboard_event_scan::col#1!=(byte) 8) goto keyboard_event_scan::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z col
    bne __b9_from___b10
    jmp __b15
    // keyboard_event_scan::@15
  __b15:
    // [440] *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Store the current keyboard status for the row to debounce
    lda.z row_scan
    ldy.z row
    sta keyboard_scan_values,y
    jmp __b8_from___b15
    // keyboard_event_scan::@11
  __b11:
    // [441] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 -- vbuz1=vbuz2_bor_vbuc1 
    lda #$40
    ora.z keycode
    sta.z __23
    // [442] *((const byte*) keyboard_events + (byte) keyboard_events_size#10) ← (byte~) keyboard_event_scan::$23 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key released
    lda.z __23
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [443] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    jmp __b10_from___b11
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable kill the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte zp($c4) rowid)
keyboard_matrix_read: {
    .label return = $d3
    .label rowid = $c4
    .label return_1 = $c5
    // [444] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy.z rowid
    lda keyboard_matrix_row_bitmask,y
    sta CIA1
    // [445] (byte) keyboard_matrix_read::return#0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B) -- vbuz1=_bnot__deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B
    eor #$ff
    sta.z return
    jmp __breturn
    // keyboard_matrix_read::@return
  __breturn:
    // [446] return 
    rts
}
  // render_show
// Update 0xD018 to show the current screen (used for double buffering)
render_show: {
    .const toD0181_return = (>(PLAYFIELD_SCREEN_1&$3fff)*4)|(>PLAYFIELD_CHARSET)/4&$f
    .const toD0182_return = (>(PLAYFIELD_SCREEN_2&$3fff)*4)|(>PLAYFIELD_CHARSET)/4&$f
    .label d018val = $59
    // [447] if((byte) render_screen_show#16==(byte) 0) goto render_show::toD0181 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_show
    cmp #0
    beq toD0181_from_render_show
    // [448] phi from render_show to render_show::toD0182 [phi:render_show->render_show::toD0182]
  toD0182_from_render_show:
    jmp toD0182
    // render_show::toD0182
  toD0182:
    // [449] phi from render_show::toD0182 to render_show::@1 [phi:render_show::toD0182->render_show::@1]
  __b1_from_toD0182:
    // [449] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0182_return#0 [phi:render_show::toD0182->render_show::@1#0] -- vbuz1=vbuc1 
    lda #toD0182_return
    sta.z d018val
    jmp __b1
    // render_show::@1
  __b1:
    // [450] *((const nomodify byte*) D018) ← (byte) render_show::d018val#3 -- _deref_pbuc1=vbuz1 
    lda.z d018val
    sta D018
    // [451] *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1 + (byte) level#10) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy.z level
    lda PIECES_COLORS_1,y
    sta BGCOL2
    // [452] *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2 + (byte) level#10) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy.z level
    lda PIECES_COLORS_2,y
    sta BGCOL3
    // [453] (volatile byte) render_screen_showing ← (byte) render_screen_show#16 -- vbuz1=vbuz2 
    lda.z render_screen_show
    sta.z render_screen_showing
    jmp __breturn
    // render_show::@return
  __breturn:
    // [454] return 
    rts
    // [455] phi from render_show to render_show::toD0181 [phi:render_show->render_show::toD0181]
  toD0181_from_render_show:
    jmp toD0181
    // render_show::toD0181
  toD0181:
    // [449] phi from render_show::toD0181 to render_show::@1 [phi:render_show::toD0181->render_show::@1]
  __b1_from_toD0181:
    // [449] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0181_return#0 [phi:render_show::toD0181->render_show::@1#0] -- vbuz1=vbuc1 
    lda #toD0181_return
    sta.z d018val
    jmp __b1
}
  // play_init
// Initialize play data tables
play_init: {
    .label __2 = $d4
    .label __3 = $d5
    .label pli = $5b
    // Initialize the playfield line pointers;
    .label idx = $5d
    .label j = $5a
    .label b = $5e
    // [457] phi from play_init to play_init::@1 [phi:play_init->play_init::@1]
  __b1_from_play_init:
    // [457] phi (byte) play_init::idx#2 = (byte) 0 [phi:play_init->play_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [457] phi (byte*) play_init::pli#2 = (const byte*) playfield [phi:play_init->play_init::@1#1] -- pbuz1=pbuc1 
    lda #<playfield
    sta.z pli
    lda #>playfield
    sta.z pli+1
    // [457] phi (byte) play_init::j#2 = (byte) 0 [phi:play_init->play_init::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    jmp __b1
    // [457] phi from play_init::@1 to play_init::@1 [phi:play_init::@1->play_init::@1]
  __b1_from___b1:
    // [457] phi (byte) play_init::idx#2 = (byte) play_init::idx#1 [phi:play_init::@1->play_init::@1#0] -- register_copy 
    // [457] phi (byte*) play_init::pli#2 = (byte*) play_init::pli#1 [phi:play_init::@1->play_init::@1#1] -- register_copy 
    // [457] phi (byte) play_init::j#2 = (byte) play_init::j#1 [phi:play_init::@1->play_init::@1#2] -- register_copy 
    jmp __b1
    // play_init::@1
  __b1:
    // [458] (byte~) play_init::$2 ← (byte) play_init::j#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z j
    asl
    sta.z __2
    // [459] *((const byte**) playfield_lines + (byte~) play_init::$2) ← (byte*) play_init::pli#2 -- pptc1_derefidx_vbuz1=pbuz2 
    ldy.z __2
    lda.z pli
    sta playfield_lines,y
    lda.z pli+1
    sta playfield_lines+1,y
    // [460] *((const byte*) playfield_lines_idx + (byte) play_init::j#2) ← (byte) play_init::idx#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z idx
    ldy.z j
    sta playfield_lines_idx,y
    // [461] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const nomodify byte) PLAYFIELD_COLS -- pbuz1=pbuz1_plus_vbuc1 
    lda #PLAYFIELD_COLS
    clc
    adc.z pli
    sta.z pli
    bcc !+
    inc.z pli+1
  !:
    // [462] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const nomodify byte) PLAYFIELD_COLS -- vbuz1=vbuz1_plus_vbuc1 
    lax.z idx
    axs #-[PLAYFIELD_COLS]
    stx.z idx
    // [463] (byte) play_init::j#1 ← ++ (byte) play_init::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [464] if((byte) play_init::j#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto play_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_LINES-1+1
    cmp.z j
    bne __b1_from___b1
    jmp __b2
    // play_init::@2
  __b2:
    // [465] *((const byte*) playfield_lines_idx+(const nomodify byte) PLAYFIELD_LINES) ← (const nomodify byte) PLAYFIELD_COLS*(const nomodify byte) PLAYFIELD_LINES -- _deref_pbuc1=vbuc2 
    lda #PLAYFIELD_COLS*PLAYFIELD_LINES
    sta playfield_lines_idx+PLAYFIELD_LINES
    // [466] (byte) current_movedown_slow#1 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS) -- vbuz1=_deref_pbuc1 
    // Set initial speed of moving down a tetromino
    lda MOVEDOWN_SLOW_SPEEDS
    sta.z current_movedown_slow
    // [467] phi from play_init::@2 to play_init::@3 [phi:play_init::@2->play_init::@3]
  __b3_from___b2:
    // [467] phi (byte) play_init::b#2 = (byte) 0 [phi:play_init::@2->play_init::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z b
    jmp __b3
  // Set the initial score add values
    // [467] phi from play_init::@3 to play_init::@3 [phi:play_init::@3->play_init::@3]
  __b3_from___b3:
    // [467] phi (byte) play_init::b#2 = (byte) play_init::b#1 [phi:play_init::@3->play_init::@3#0] -- register_copy 
    jmp __b3
    // play_init::@3
  __b3:
    // [468] (byte~) play_init::$3 ← (byte) play_init::b#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z b
    asl
    asl
    sta.z __3
    // [469] *((const dword*) score_add_bcd + (byte~) play_init::$3) ← *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_init::$3) -- pduc1_derefidx_vbuz1=pduc2_derefidx_vbuz1 
    ldy.z __3
    lda SCORE_BASE_BCD,y
    sta score_add_bcd,y
    lda SCORE_BASE_BCD+1,y
    sta score_add_bcd+1,y
    lda SCORE_BASE_BCD+2,y
    sta score_add_bcd+2,y
    lda SCORE_BASE_BCD+3,y
    sta score_add_bcd+3,y
    // [470] (byte) play_init::b#1 ← ++ (byte) play_init::b#2 -- vbuz1=_inc_vbuz1 
    inc.z b
    // [471] if((byte) play_init::b#1!=(byte) 5) goto play_init::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp.z b
    bne __b3_from___b3
    jmp __breturn
    // play_init::@return
  __breturn:
    // [472] return 
    rts
}
  // sprites_irq_init
// Setup the IRQ
sprites_irq_init: {
    // asm { sei  }
    sei
    // [474] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge any IRQ and setup the next one
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // asm { ldaCIA1_INTERRUPT  }
    lda CIA1_INTERRUPT
    // [476] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // [477] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [478] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // [479] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    // [480] *((const nomodify byte*) RASTER) ← (const nomodify byte) IRQ_RASTER_FIRST -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER_FIRST
    sta RASTER
    // [481] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // [482] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq() -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<sprites_irq
    sta HARDWARE_IRQ
    lda #>sprites_irq
    sta HARDWARE_IRQ+1
    // asm { cli  }
    cli
    jmp __breturn
    // sprites_irq_init::@return
  __breturn:
    // [484] return 
    rts
}
  // sprites_init
// Setup the sprites
sprites_init: {
    .label s2 = $d6
    .label xpos = $60
    .label s = $5f
    // [485] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $f -- _deref_pbuc1=vbuc2 
    lda #$f
    sta SPRITES_ENABLE
    // [486] *((const nomodify byte*) SPRITES_MC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
    // [487] *((const nomodify byte*) SPRITES_EXPAND_Y) ← *((const nomodify byte*) SPRITES_MC) -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_MC
    sta SPRITES_EXPAND_Y
    // [488] *((const nomodify byte*) SPRITES_EXPAND_X) ← *((const nomodify byte*) SPRITES_EXPAND_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_EXPAND_Y
    sta SPRITES_EXPAND_X
    // [489] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
  __b1_from_sprites_init:
    // [489] phi (byte) sprites_init::xpos#2 = (byte)(number) $18+(number) $f*(number) 8 [phi:sprites_init->sprites_init::@1#0] -- vbuz1=vbuc1 
    lda #$18+$f*8
    sta.z xpos
    // [489] phi (byte) sprites_init::s#2 = (byte) 0 [phi:sprites_init->sprites_init::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    jmp __b1
    // [489] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
  __b1_from___b1:
    // [489] phi (byte) sprites_init::xpos#2 = (byte) sprites_init::xpos#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
    // [489] phi (byte) sprites_init::s#2 = (byte) sprites_init::s#1 [phi:sprites_init::@1->sprites_init::@1#1] -- register_copy 
    jmp __b1
    // sprites_init::@1
  __b1:
    // [490] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z s
    asl
    sta.z s2
    // [491] *((const nomodify byte*) SPRITES_XPOS + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z xpos
    ldy.z s2
    sta SPRITES_XPOS,y
    // [492] *((const nomodify byte*) SPRITES_COLS + (byte) sprites_init::s#2) ← (const nomodify byte) BLACK -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #BLACK
    ldy.z s
    sta SPRITES_COLS,y
    // [493] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte) $18 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z xpos
    axs #-[$18]
    stx.z xpos
    // [494] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2 -- vbuz1=_inc_vbuz1 
    inc.z s
    // [495] if((byte) sprites_init::s#1!=(byte) 4) goto sprites_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z s
    bne __b1_from___b1
    jmp __breturn
    // sprites_init::@return
  __breturn:
    // [496] return 
    rts
}
  // render_init
// Initialize rendering
render_init: {
    .const vicSelectGfxBank1_toDd001_return = 3
    .label __5 = $d7
    // Initialize the screen line pointers;
    .label li_1 = $62
    .label li_2 = $64
    .label i = $61
    jmp vicSelectGfxBank1
    // render_init::vicSelectGfxBank1
  vicSelectGfxBank1:
    // [498] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [499] phi from render_init::vicSelectGfxBank1 to render_init::vicSelectGfxBank1_toDd001 [phi:render_init::vicSelectGfxBank1->render_init::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
    // render_init::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1___b1
    // render_init::vicSelectGfxBank1_@1
  vicSelectGfxBank1___b1:
    // [500] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2
    jmp __b2
    // render_init::@2
  __b2:
    // [501] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_ECM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    // Enable Extended Background Color Mode
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta D011
    // [502] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    // [503] *((const nomodify byte*) BGCOL1) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BGCOL1
    // [504] *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1) -- _deref_pbuc1=_deref_pbuc2 
    lda PIECES_COLORS_1
    sta BGCOL2
    // [505] *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2) -- _deref_pbuc1=_deref_pbuc2 
    lda PIECES_COLORS_2
    sta BGCOL3
    // [506] *((const nomodify byte*) BGCOL4) ← (const nomodify byte) GREY -- _deref_pbuc1=vbuc2 
    lda #GREY
    sta BGCOL4
    // [507] call render_screen_original 
  // Setup chars on the screens
    // [519] phi from render_init::@2 to render_screen_original [phi:render_init::@2->render_screen_original]
  render_screen_original_from___b2:
    // [519] phi (byte*) render_screen_original::screen#9 = (const nomodify byte*) PLAYFIELD_SCREEN_1 [phi:render_init::@2->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1
    sta.z render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_1
    sta.z render_screen_original.screen+1
    jsr render_screen_original
    // [508] phi from render_init::@2 to render_init::@3 [phi:render_init::@2->render_init::@3]
  __b3_from___b2:
    jmp __b3
    // render_init::@3
  __b3:
    // [509] call render_screen_original 
    // [519] phi from render_init::@3 to render_screen_original [phi:render_init::@3->render_screen_original]
  render_screen_original_from___b3:
    // [519] phi (byte*) render_screen_original::screen#9 = (const nomodify byte*) PLAYFIELD_SCREEN_2 [phi:render_init::@3->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2
    sta.z render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_2
    sta.z render_screen_original.screen+1
    jsr render_screen_original
    // [510] phi from render_init::@3 to render_init::@1 [phi:render_init::@3->render_init::@1]
  __b1_from___b3:
    // [510] phi (byte*) render_init::li_2#2 = (const nomodify byte*) PLAYFIELD_SCREEN_2+(byte)(number) 2*(number) $28+(byte) $10 [phi:render_init::@3->render_init::@1#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2+2*$28+$10
    sta.z li_2
    lda #>PLAYFIELD_SCREEN_2+2*$28+$10
    sta.z li_2+1
    // [510] phi (byte*) render_init::li_1#2 = (const nomodify byte*) PLAYFIELD_SCREEN_1+(byte)(number) 2*(number) $28+(byte) $10 [phi:render_init::@3->render_init::@1#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1+2*$28+$10
    sta.z li_1
    lda #>PLAYFIELD_SCREEN_1+2*$28+$10
    sta.z li_1+1
    // [510] phi (byte) render_init::i#2 = (byte) 0 [phi:render_init::@3->render_init::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [510] phi from render_init::@1 to render_init::@1 [phi:render_init::@1->render_init::@1]
  __b1_from___b1:
    // [510] phi (byte*) render_init::li_2#2 = (byte*) render_init::li_2#1 [phi:render_init::@1->render_init::@1#0] -- register_copy 
    // [510] phi (byte*) render_init::li_1#2 = (byte*) render_init::li_1#1 [phi:render_init::@1->render_init::@1#1] -- register_copy 
    // [510] phi (byte) render_init::i#2 = (byte) render_init::i#1 [phi:render_init::@1->render_init::@1#2] -- register_copy 
    jmp __b1
    // render_init::@1
  __b1:
    // [511] (byte~) render_init::$5 ← (byte) render_init::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z __5
    // [512] *((const byte**) screen_lines_1 + (byte~) render_init::$5) ← (byte*) render_init::li_1#2 -- pptc1_derefidx_vbuz1=pbuz2 
    ldy.z __5
    lda.z li_1
    sta screen_lines_1,y
    lda.z li_1+1
    sta screen_lines_1+1,y
    // [513] *((const byte**) screen_lines_2 + (byte~) render_init::$5) ← (byte*) render_init::li_2#2 -- pptc1_derefidx_vbuz1=pbuz2 
    ldy.z __5
    lda.z li_2
    sta screen_lines_2,y
    lda.z li_2+1
    sta screen_lines_2+1,y
    // [514] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z li_1
    sta.z li_1
    bcc !+
    inc.z li_1+1
  !:
    // [515] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z li_2
    sta.z li_2
    bcc !+
    inc.z li_2+1
  !:
    // [516] (byte) render_init::i#1 ← ++ (byte) render_init::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [517] if((byte) render_init::i#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto render_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_LINES-1+1
    cmp.z i
    bne __b1_from___b1
    jmp __breturn
    // render_init::@return
  __breturn:
    // [518] return 
    rts
}
  // render_screen_original
// Copy the original screen data to the passed screen
// Also copies colors to 0xd800
// render_screen_original(byte* zp($6b) screen)
render_screen_original: {
    .const SPACE = 0
    .label screen = $6b
    .label cols = $6d
    .label x = $6f
    .label oscr = $67
    .label ocols = $69
    .label y = $66
    // [520] phi from render_screen_original to render_screen_original::@1 [phi:render_screen_original->render_screen_original::@1]
  __b1_from_render_screen_original:
    // [520] phi (byte) render_screen_original::y#6 = (byte) 0 [phi:render_screen_original->render_screen_original::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [520] phi (byte*) render_screen_original::ocols#4 = (const to_nomodify byte*) PLAYFIELD_COLORS_ORIGINAL+(byte)(number) $20*(number) 2 [phi:render_screen_original->render_screen_original::@1#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_COLORS_ORIGINAL+$20*2
    sta.z ocols
    lda #>PLAYFIELD_COLORS_ORIGINAL+$20*2
    sta.z ocols+1
    // [520] phi (byte*) render_screen_original::oscr#4 = (const to_nomodify byte*) PLAYFIELD_SCREEN_ORIGINAL+(byte)(number) $20*(number) 2 [phi:render_screen_original->render_screen_original::@1#2] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta.z oscr
    lda #>PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta.z oscr+1
    // [520] phi (byte*) render_screen_original::cols#7 = (const nomodify byte*) COLS [phi:render_screen_original->render_screen_original::@1#3] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z cols
    lda #>COLS
    sta.z cols+1
    // [520] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#9 [phi:render_screen_original->render_screen_original::@1#4] -- register_copy 
    jmp __b1
    // [520] phi from render_screen_original::@5 to render_screen_original::@1 [phi:render_screen_original::@5->render_screen_original::@1]
  __b1_from___b5:
    // [520] phi (byte) render_screen_original::y#6 = (byte) render_screen_original::y#1 [phi:render_screen_original::@5->render_screen_original::@1#0] -- register_copy 
    // [520] phi (byte*) render_screen_original::ocols#4 = (byte*) render_screen_original::ocols#1 [phi:render_screen_original::@5->render_screen_original::@1#1] -- register_copy 
    // [520] phi (byte*) render_screen_original::oscr#4 = (byte*) render_screen_original::oscr#1 [phi:render_screen_original::@5->render_screen_original::@1#2] -- register_copy 
    // [520] phi (byte*) render_screen_original::cols#7 = (byte*) render_screen_original::cols#3 [phi:render_screen_original::@5->render_screen_original::@1#3] -- register_copy 
    // [520] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#10 [phi:render_screen_original::@5->render_screen_original::@1#4] -- register_copy 
    jmp __b1
    // render_screen_original::@1
  __b1:
    // [521] phi from render_screen_original::@1 to render_screen_original::@2 [phi:render_screen_original::@1->render_screen_original::@2]
  __b2_from___b1:
    // [521] phi (byte) render_screen_original::x#4 = (byte) 0 [phi:render_screen_original::@1->render_screen_original::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [521] phi (byte*) render_screen_original::cols#4 = (byte*) render_screen_original::cols#7 [phi:render_screen_original::@1->render_screen_original::@2#1] -- register_copy 
    // [521] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#8 [phi:render_screen_original::@1->render_screen_original::@2#2] -- register_copy 
    jmp __b2
    // [521] phi from render_screen_original::@2 to render_screen_original::@2 [phi:render_screen_original::@2->render_screen_original::@2]
  __b2_from___b2:
    // [521] phi (byte) render_screen_original::x#4 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2->render_screen_original::@2#0] -- register_copy 
    // [521] phi (byte*) render_screen_original::cols#4 = (byte*) render_screen_original::cols#1 [phi:render_screen_original::@2->render_screen_original::@2#1] -- register_copy 
    // [521] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2->render_screen_original::@2#2] -- register_copy 
    jmp __b2
    // render_screen_original::@2
  __b2:
    // [522] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
    // [523] (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [524] *((byte*) render_screen_original::cols#4) ← (const nomodify byte) BLACK -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (cols),y
    // [525] (byte*) render_screen_original::cols#1 ← ++ (byte*) render_screen_original::cols#4 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // [526] (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [527] if((byte) render_screen_original::x#1!=(byte) 4) goto render_screen_original::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z x
    bne __b2_from___b2
    // [528] phi from render_screen_original::@2 render_screen_original::@3 to render_screen_original::@3 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3]
  __b3_from___b2:
  __b3_from___b3:
    // [528] phi (byte) render_screen_original::x#5 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#0] -- register_copy 
    // [528] phi (byte*) render_screen_original::cols#5 = (byte*) render_screen_original::cols#1 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#1] -- register_copy 
    // [528] phi (byte*) render_screen_original::ocols#2 = (byte*) render_screen_original::ocols#4 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#2] -- register_copy 
    // [528] phi (byte*) render_screen_original::screen#6 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#3] -- register_copy 
    // [528] phi (byte*) render_screen_original::oscr#2 = (byte*) render_screen_original::oscr#4 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#4] -- register_copy 
    jmp __b3
    // render_screen_original::@3
  __b3:
    // [529] *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (oscr),y
    ldy #0
    sta (screen),y
    // [530] (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#6 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [531] (byte*) render_screen_original::oscr#1 ← ++ (byte*) render_screen_original::oscr#2 -- pbuz1=_inc_pbuz1 
    inc.z oscr
    bne !+
    inc.z oscr+1
  !:
    // [532] *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (ocols),y
    ldy #0
    sta (cols),y
    // [533] (byte*) render_screen_original::cols#2 ← ++ (byte*) render_screen_original::cols#5 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // [534] (byte*) render_screen_original::ocols#1 ← ++ (byte*) render_screen_original::ocols#2 -- pbuz1=_inc_pbuz1 
    inc.z ocols
    bne !+
    inc.z ocols+1
  !:
    // [535] (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [536] if((byte) render_screen_original::x#2!=(byte) $24) goto render_screen_original::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$24
    cmp.z x
    bne __b3_from___b3
    // [537] phi from render_screen_original::@3 render_screen_original::@4 to render_screen_original::@4 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4]
  __b4_from___b3:
  __b4_from___b4:
    // [537] phi (byte) render_screen_original::x#6 = (byte) render_screen_original::x#2 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#0] -- register_copy 
    // [537] phi (byte*) render_screen_original::cols#6 = (byte*) render_screen_original::cols#2 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#1] -- register_copy 
    // [537] phi (byte*) render_screen_original::screen#7 = (byte*) render_screen_original::screen#3 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#2] -- register_copy 
    jmp __b4
    // render_screen_original::@4
  __b4:
    // [538] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
    // [539] (byte*) render_screen_original::screen#10 ← ++ (byte*) render_screen_original::screen#7 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [540] *((byte*) render_screen_original::cols#6) ← (const nomodify byte) BLACK -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (cols),y
    // [541] (byte*) render_screen_original::cols#3 ← ++ (byte*) render_screen_original::cols#6 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // [542] (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#6 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [543] if((byte) render_screen_original::x#3!=(byte) $28) goto render_screen_original::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z x
    bne __b4_from___b4
    jmp __b5
    // render_screen_original::@5
  __b5:
    // [544] (byte) render_screen_original::y#1 ← ++ (byte) render_screen_original::y#6 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [545] if((byte) render_screen_original::y#1!=(byte) $19) goto render_screen_original::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z y
    bne __b1_from___b5
    jmp __breturn
    // render_screen_original::@return
  __breturn:
    // [546] return 
    rts
}
  // sprites_irq
// Raster Interrupt Routine - sets up the sprites covering the playfield
// Repeats 10 timers every 2 lines from line IRQ_RASTER_FIRST
// Utilizes duplicated gfx in the sprites to allow for some leeway in updating the sprite pointers
sprites_irq: {
    .const toSpritePtr1_return = PLAYFIELD_SPRITES/$40
    .label raster_sprite_gfx_modify = $da
    .label __0 = $d9
    .label ypos = $d8
    .label ptr = $db
    .label ptr_1 = $de
    .label ptr_2 = $df
    .label ptr_3 = $dc
    .label ptr_4 = $dd
    // entry interrupt(HARDWARE_CLOBBER)
    sta rega+1
    stx regx+1
    sty regy+1
    // asm { cld  }
    //(*BGCOL)++;
    // Clear decimal flag (because it is used by the score algorithm)
    cld
    // [548] (byte) sprites_irq::ypos#0 ← (volatile byte) irq_sprite_ypos -- vbuz1=vbuz2 
    // Place the sprites
    lda.z irq_sprite_ypos
    sta.z ypos
    // [549] *((const nomodify byte*) SPRITES_YPOS) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuz1 
    lda.z ypos
    sta SPRITES_YPOS
    // [550] *((const nomodify byte*) SPRITES_YPOS+(byte) 2) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuz1 
    lda.z ypos
    sta SPRITES_YPOS+2
    // [551] *((const nomodify byte*) SPRITES_YPOS+(byte) 4) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuz1 
    lda.z ypos
    sta SPRITES_YPOS+4
    // [552] *((const nomodify byte*) SPRITES_YPOS+(byte) 6) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuz1 
    lda.z ypos
    sta SPRITES_YPOS+6
    // [553] (byte~) sprites_irq::$0 ← (volatile byte) irq_raster_next + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z irq_raster_next
    iny
    sty.z __0
    // [554] (volatile byte) sprites_irq::raster_sprite_gfx_modify ← (byte~) sprites_irq::$0 -- vbuz1=vbuz2 
    // Wait for the y-position before changing sprite pointers
    lda.z __0
    sta.z raster_sprite_gfx_modify
    jmp __b8
    // sprites_irq::@8
  __b8:
    // [555] if(*((const nomodify byte*) RASTER)<(volatile byte) sprites_irq::raster_sprite_gfx_modify) goto sprites_irq::@8 -- _deref_pbuc1_lt_vbuz1_then_la1 
    lda RASTER
    cmp.z raster_sprite_gfx_modify
    bcc __b8
    jmp __b9
    // sprites_irq::@9
  __b9:
    // [556] (byte) sprites_irq::ptr#0 ← (volatile byte) irq_sprite_ptr -- vbuz1=vbuz2 
    lda.z irq_sprite_ptr
    sta.z ptr
    // [557] if((volatile byte) render_screen_showing==(byte) 0) goto sprites_irq::@1 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_showing
    cmp #0
    beq __b1
    jmp __b10
    // sprites_irq::@10
  __b10:
    // [558] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuz1 
    lda.z ptr
    sta PLAYFIELD_SPRITE_PTRS_2
    // [559] (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#0 -- vbuz1=_inc_vbuz2 
    ldy.z ptr
    iny
    sty.z ptr_3
    // [560] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 1) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuz1 
    lda.z ptr_3
    sta PLAYFIELD_SPRITE_PTRS_2+1
    // [561] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 2) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuz1 
    lda.z ptr_3
    sta PLAYFIELD_SPRITE_PTRS_2+2
    // [562] (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3 -- vbuz1=_inc_vbuz2 
    ldy.z ptr_3
    iny
    sty.z ptr_4
    // [563] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 3) ← (byte) sprites_irq::ptr#4 -- _deref_pbuc1=vbuz1 
    lda.z ptr_4
    sta PLAYFIELD_SPRITE_PTRS_2+3
    jmp __b2
    // sprites_irq::@2
  __b2:
    // [564] (volatile byte) irq_cnt ← ++ (volatile byte) irq_cnt -- vbuz1=_inc_vbuz1 
    inc.z irq_cnt
    // [565] if((volatile byte) irq_cnt==(byte) 9) goto sprites_irq::@3 -- vbuz1_eq_vbuc1_then_la1 
    lda #9
    cmp.z irq_cnt
    beq __b3
    jmp __b6
    // sprites_irq::@6
  __b6:
    // [566] if((volatile byte) irq_cnt==(byte) $a) goto sprites_irq::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #$a
    cmp.z irq_cnt
    beq __b4
    jmp __b7
    // sprites_irq::@7
  __b7:
    // [567] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $14 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$14]
    stx.z irq_raster_next
    // [568] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ypos
    axs #-[$15]
    stx.z irq_sprite_ypos
    // [569] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ptr
    axs #-[3]
    stx.z irq_sprite_ptr
    jmp __b5
    // sprites_irq::@5
  __b5:
    // [570] *((const nomodify byte*) RASTER) ← (volatile byte) irq_raster_next -- _deref_pbuc1=vbuz1 
    // Setup next interrupt
    lda.z irq_raster_next
    sta RASTER
    // [571] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ and setup the next one
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp __breturn
    // sprites_irq::@return
  __breturn:
    // [572] return  - exit interrupt(HARDWARE_CLOBBER)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
    // sprites_irq::@4
  __b4:
    // [573] (volatile byte) irq_cnt ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z irq_cnt
    // [574] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta.z irq_raster_next
    // [575] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ypos
    axs #-[$15]
    stx.z irq_sprite_ypos
    // [576] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ptr
    axs #-[3]
    stx.z irq_sprite_ptr
    jmp __b5
    // sprites_irq::@3
  __b3:
    // [577] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$15]
    stx.z irq_raster_next
    // [578] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS -- vbuz1=vbuc1 
    lda #SPRITES_FIRST_YPOS
    sta.z irq_sprite_ypos
    // [579] phi from sprites_irq::@3 to sprites_irq::toSpritePtr1 [phi:sprites_irq::@3->sprites_irq::toSpritePtr1]
  toSpritePtr1_from___b3:
    jmp toSpritePtr1
    // sprites_irq::toSpritePtr1
  toSpritePtr1:
    jmp __b11
    // sprites_irq::@11
  __b11:
    // [580] (volatile byte) irq_sprite_ptr ← (const byte) sprites_irq::toSpritePtr1_return#0 -- vbuz1=vbuc1 
    lda #toSpritePtr1_return
    sta.z irq_sprite_ptr
    jmp __b5
    // sprites_irq::@1
  __b1:
    // [581] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuz1 
    lda.z ptr
    sta PLAYFIELD_SPRITE_PTRS_1
    // [582] (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#0 -- vbuz1=_inc_vbuz2 
    ldy.z ptr
    iny
    sty.z ptr_1
    // [583] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 1) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuz1 
    lda.z ptr_1
    sta PLAYFIELD_SPRITE_PTRS_1+1
    // [584] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 2) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuz1 
    lda.z ptr_1
    sta PLAYFIELD_SPRITE_PTRS_1+2
    // [585] (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1 -- vbuz1=_inc_vbuz2 
    ldy.z ptr_1
    iny
    sty.z ptr_2
    // [586] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 3) ← (byte) sprites_irq::ptr#2 -- _deref_pbuc1=vbuz1 
    lda.z ptr_2
    sta PLAYFIELD_SPRITE_PTRS_1+3
    jmp __b2
}
  // File Data
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Keyboard event buffer. Contains keycodes for key presses/releases. Presses are represented by the keycode. Releases by keycode | $40. The buffer is filled by keyboard_scan()
  keyboard_events: .fill 8, 0
  // The values scanned values for each row. Set by keyboard_scan() and used by keyboard_get_event()
  keyboard_scan_values: .fill 8, 0
  // The playfield.  0 is empty non-zero is color.
  // The playfield is layed out line by line, meaning the first 10 bytes are line 1, the next 10 line 2 and so forth,
  playfield: .fill PLAYFIELD_LINES*PLAYFIELD_COLS, 0
  // The T-piece
  .align $40
  PIECE_T: .byte 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The S-piece
  .align $40
  PIECE_S: .byte 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0
  // The Z-piece
  .align $40
  PIECE_Z: .byte 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The L-piece
  .align $40
  PIECE_L: .byte 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0
  // The J-piece
  .align $40
  PIECE_J: .byte 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The O-piece
  .align $40
  PIECE_O: .byte 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0
  // The I-piece
  .align $40
  PIECE_I: .byte 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0
  // The different pieces
  PIECES: .word PIECE_T, PIECE_S, PIECE_Z, PIECE_J, PIECE_O, PIECE_I, PIECE_L
  // The chars to use for the different pieces - when inside the playing area
  PIECES_CHARS: .byte $65, $66, $a6, $66, $65, $65, $a6
  // The chars to use for the different pieces - when outside the playing area (eg. the next area).
  PIECES_NEXT_CHARS: .byte $63, $64, $a4, $64, $63, $63, $a4
  // The initial X/Y for each piece
  PIECES_START_X: .byte 4, 4, 4, 4, 4, 4, 4
  PIECES_START_Y: .byte 1, 1, 1, 1, 1, 0, 1
PLAYFIELD_SCREEN_ORIGINAL:
// Load chars for the screen
  .var screen = LoadBinary("playfield-screen.iscr")
   // Load extended colors for the screen
  .var extended = LoadBinary("playfield-extended.col")
  // screen.get(i)+1 because the charset is loaded into PLAYFIELD_CHARSET+8
  // extended.get(i)-1 because the extended colors are 1-based (1/2/3/4)
  // <<6 to move extended colors to the upper 2 bits
  .fill screen.getSize(), ( (screen.get(i)+1) | (extended.get(i)-1)<<6 )

  // Original Color Data
PLAYFIELD_COLORS_ORIGINAL:
.import binary "playfield-screen.col"

  // The color #1 to use for the pieces for each level
  PIECES_COLORS_1: .byte BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED, BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED, BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED
  // The color #2 to use for the pieces for each level
  PIECES_COLORS_2: .byte CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE, CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE, CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE
  // Pointers to the screen address for rendering each playfield line
  // The lines for screen 1 is aligned with 0x80 and screen 2 with 0x40 - so XOR'ing with 0x40 gives screen 2 lines.
  .align $80
  screen_lines_1: .fill 2*PLAYFIELD_LINES, 0
  .align $40
  screen_lines_2: .fill 2*PLAYFIELD_LINES, 0
  // Pointers to the playfield address for each playfield line
  playfield_lines: .fill 2*PLAYFIELD_LINES, 0
  // Indixes into the playfield  for each playfield line
  playfield_lines_idx: .fill PLAYFIELD_LINES+1, 0
  // The speed of moving down the piece when soft-drop is not activated
  // This array holds the number of frames per move by level (0-29). For all levels 29+ the value is 1.
  MOVEDOWN_SLOW_SPEEDS: .byte $30, $2b, $26, $21, $1c, $17, $12, $d, 8, 6, 5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1
  // Base Score values for removing 0-4 lines (in BCD)
  // These values are added to score_add_bcd for each level gained.
  SCORE_BASE_BCD: .dword 0, $40, $100, $300, $1200
  // Score values for removing 0-4 lines (in BCD)
  // These values are updated based on the players level and the base values from SCORE_BASE_BCD
  score_add_bcd: .fill 4*5, 0
.pc = PLAYFIELD_CHARSET "PLAYFIELD_CHARSET"
  .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "playfield-screen.imap"

.pc = PLAYFIELD_SPRITES "PLAYFIELD_SPRITES"
  .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000))
	// Put the sprites into memory 
	.for(var sy=0;sy<10;sy++) {
	    .var sprite_gfx_y = sy*20
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21)
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y)
	            }
	        }
	    	.byte 0
	  	}
	}


REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (volatile byte) render_screen_showing ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (volatile dword) score_bcd ← (dword) 0 [ score_bcd ] (  [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [5] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST [ score_bcd ] (  [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [6] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS+(byte) $15 [ score_bcd ] (  [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [8] (volatile byte) irq_sprite_ptr ← (const byte) toSpritePtr1_return#0+(byte) 3 [ score_bcd ] (  [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [9] (volatile byte) irq_cnt ← (byte) 0 [ score_bcd ] (  [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [14] *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (word) $ffff [ score_bcd ] ( main:11 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [15] *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE [ score_bcd ] ( main:11 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [32] (byte*) current_piece_gfx#112 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ score_bcd current_ypos#98 current_ypos#6 current_xpos#119 current_xpos#100 current_piece_gfx#112 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 ] ( main:11 [ score_bcd current_ypos#98 current_ypos#6 current_xpos#119 current_xpos#100 current_piece_gfx#112 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:23 [ current_ypos#13 current_ypos#98 current_ypos#99 ]
Removing always clobbered register reg byte a as potential for zp[1]:55 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#6 current_ypos#19 ]
Removing always clobbered register reg byte a as potential for zp[1]:25 [ current_xpos#59 current_xpos#119 current_xpos#120 ]
Removing always clobbered register reg byte a as potential for zp[1]:67 [ current_xpos#43 current_xpos#14 current_xpos#100 current_xpos#19 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
Removing always clobbered register reg byte a as potential for zp[1]:172 [ play_spawn_current::$7 ]
Removing always clobbered register reg byte a as potential for zp[1]:63 [ current_piece_char#29 current_piece_char#10 current_piece_char#5 current_piece_char#16 ]
Removing always clobbered register reg byte a as potential for zp[1]:69 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 play_spawn_current::piece_idx#2 next_piece_idx#16 play_spawn_current::piece_idx#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:59 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#1 current_movedown_slow#21 current_movedown_slow#23 current_movedown_slow#65 current_movedown_slow#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:70 [ game_over#65 game_over#27 game_over#10 game_over#52 game_over#15 ]
Statement [37] (byte*) current_piece#101 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#101 current_movedown_slow#1 game_over#52 ] ( main:11 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#101 current_movedown_slow#1 game_over#52 ] { }  ) always clobbers reg byte a 
Statement [38] (byte*) current_piece_gfx#123 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ score_bcd current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#101 current_piece_gfx#123 current_movedown_slow#1 game_over#52 ] ( main:11 [ score_bcd current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#101 current_piece_gfx#123 current_movedown_slow#1 game_over#52 ] { }  ) always clobbers reg byte a 
Statement [40] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@2 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 ] ( main:11 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ render_screen_show#16 render_screen_show#13 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ render_screen_render#18 render_screen_render#11 ]
Removing always clobbered register reg byte a as potential for zp[1]:64 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
Removing always clobbered register reg byte a as potential for zp[1]:88 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
Removing always clobbered register reg byte a as potential for zp[1]:58 [ level#33 level#10 level#17 level#19 level#21 ]
Removing always clobbered register reg byte a as potential for zp[1]:60 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
Statement [61] (byte*) current_piece_gfx#113 ← (byte*) current_piece_gfx#18 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 current_ypos#99 render_screen_render#65 current_xpos#120 current_piece_gfx#113 ] ( main:11 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 current_ypos#99 render_screen_render#65 current_xpos#120 current_piece_gfx#113 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:24 [ render_screen_render#33 render_screen_render#65 ]
Statement [71] (byte) render_screen_render#11 ← (byte) render_screen_render#18 ^ (byte) $20 [ render_screen_show#16 render_screen_render#11 ] ( main:11::render_screen_swap:70 [ score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_show#16 render_screen_render#11 ] { }  ) always clobbers reg byte a 
Statement [72] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte) $20 [ render_screen_show#13 render_screen_render#11 ] ( main:11::render_screen_swap:70 [ score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_show#13 render_screen_render#11 ] { }  ) always clobbers reg byte a 
Statement [77] (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#0 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#0 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  ) always clobbers reg byte a 
Statement [80] (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#1 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#1 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  ) always clobbers reg byte a 
Statement [83] (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#2 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#2 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  ) always clobbers reg byte a 
Statement [87] (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 render_bcd::screen#3 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 render_bcd::screen#3 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:12 [ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ]
Statement [90] (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 render_bcd::screen#4 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 render_bcd::screen#4 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  ) always clobbers reg byte a 
Statement [92] (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen#5 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen#5 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte a 
Statement [97] (byte*) render_bcd::screen_pos#0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6 [ render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] ( main:11::render_score:68::render_bcd:79 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:82 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:85 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:88 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:91 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:94 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:11 [ render_bcd::only_low#6 ]
Statement [99] (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#6 >> (byte) 4 [ render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] ( main:11::render_score:68::render_bcd:79 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:82 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:85 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:88 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:91 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:94 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte a 
Statement [101] *((byte*) render_bcd::screen_pos#0) ← (byte~) render_bcd::$6 [ render_bcd::bcd#6 render_bcd::screen_pos#0 ] ( main:11::render_score:68::render_bcd:79 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:82 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:85 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:88 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:91 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:94 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ render_screen_show#16 render_screen_show#13 ]
Removing always clobbered register reg byte y as potential for zp[1]:59 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#1 current_movedown_slow#21 current_movedown_slow#23 current_movedown_slow#65 current_movedown_slow#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:63 [ current_piece_char#29 current_piece_char#10 current_piece_char#5 current_piece_char#16 ]
Removing always clobbered register reg byte y as potential for zp[1]:64 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
Removing always clobbered register reg byte y as potential for zp[1]:67 [ current_xpos#43 current_xpos#14 current_xpos#100 current_xpos#19 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
Removing always clobbered register reg byte y as potential for zp[1]:55 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#6 current_ypos#19 ]
Removing always clobbered register reg byte y as potential for zp[1]:70 [ game_over#65 game_over#27 game_over#10 game_over#52 game_over#15 ]
Removing always clobbered register reg byte y as potential for zp[1]:69 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 play_spawn_current::piece_idx#2 next_piece_idx#16 play_spawn_current::piece_idx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:88 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:4 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
Removing always clobbered register reg byte y as potential for zp[1]:58 [ level#33 level#10 level#17 level#19 level#21 ]
Removing always clobbered register reg byte y as potential for zp[1]:3 [ render_screen_render#18 render_screen_render#11 ]
Removing always clobbered register reg byte y as potential for zp[1]:60 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
Removing always clobbered register reg byte y as potential for zp[1]:12 [ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ]
Statement [104] (byte~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte) $f [ render_bcd::screen_pos#3 render_bcd::$3 ] ( main:11::render_score:68::render_bcd:79 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:82 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:85 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:88 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:91 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:94 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte a 
Statement [106] *((byte*) render_bcd::screen_pos#3) ← (byte~) render_bcd::$4 [ ] ( main:11::render_score:68::render_bcd:79 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:82 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:85 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:88 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:91 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:94 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte y 
Statement [112] (byte~) render_next::$6 ← (byte) next_piece_idx#12 << (byte) 1 [ next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:16 [ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ]
Statement [114] (byte*) render_next::next_piece_gfx#8 ← (byte*)*((const word*) PIECES + (byte~) render_next::$6) [ render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#8 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#8 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#8 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:131 [ render_next::next_piece_char#0 ]
Statement [117] (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2) [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:172 [ play_spawn_current::$7 ]
Removing always clobbered register reg byte y as potential for zp[1]:131 [ render_next::next_piece_char#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:17 [ render_next::l#7 render_next::l#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:17 [ render_next::l#7 render_next::l#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:22 [ render_next::c#2 render_next::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:22 [ render_next::c#2 render_next::c#1 ]
Statement [120] *((byte*) render_next::screen_next_area#5) ← (byte) 0 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a reg byte y 
Statement [124] (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#3 + (byte) $24 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a 
Statement [128] *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#0 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a reg byte y 
Statement [133] (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (byte) 4 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:28 [ current_piece_char#68 current_piece_char#100 current_piece_char#101 ]
Removing always clobbered register reg byte a as potential for zp[1]:29 [ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:30 [ render_moving::l#4 render_moving::l#1 ]
Statement [139] (byte~) render_moving::$1 ← (byte) render_screen_render#33 + (byte) render_moving::ypos#2 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:31 [ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ]
Statement [140] (byte~) render_moving::$6 ← (byte~) render_moving::$1 << (byte) 1 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [141] (byte*) render_moving::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_moving::$6) [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [144] (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_moving::i#4) [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:32 [ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:33 [ render_moving::c#2 render_moving::c#1 ]
Statement [147] *((byte*) render_moving::screen_line#0 + (byte) render_moving::xpos#2) ← (byte) current_piece_char#68 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [153] (byte~) render_playfield::$0 ← (byte) render_screen_render#22 + (byte) render_playfield::l#2 [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$0 ] ( main:11::render_playfield:29 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$0 ] { }  main:11::render_playfield:57 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$0 ] { { render_screen_render#22 = render_screen_render#64 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:34 [ render_screen_render#22 render_screen_render#64 ]
Removing always clobbered register reg byte a as potential for zp[1]:35 [ render_playfield::l#2 render_playfield::l#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:36 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Statement [154] (byte~) render_playfield::$3 ← (byte~) render_playfield::$0 << (byte) 1 [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$3 ] ( main:11::render_playfield:29 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$3 ] { }  main:11::render_playfield:57 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$3 ] { { render_screen_render#22 = render_screen_render#64 } }  ) always clobbers reg byte a 
Statement [155] (byte*) render_playfield::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_playfield::$3) [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] ( main:11::render_playfield:29 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] { }  main:11::render_playfield:57 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] { { render_screen_render#22 = render_screen_render#64 } }  ) always clobbers reg byte a 
Statement [157] *((byte*) render_playfield::screen_line#2) ← *((const byte*) playfield + (byte) render_playfield::i#2) [ render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] ( main:11::render_playfield:29 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] { }  main:11::render_playfield:57 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] { { render_screen_render#22 = render_screen_render#64 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:34 [ render_screen_render#22 render_screen_render#64 ]
Removing always clobbered register reg byte y as potential for zp[1]:35 [ render_playfield::l#2 render_playfield::l#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:36 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:39 [ render_playfield::c#2 render_playfield::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:39 [ render_playfield::c#2 render_playfield::c#1 ]
Statement [176] (byte) play_movement::render#2 ← (byte) play_movement::render#1 + (byte~) play_movement::$3 [ score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_movement::render#2 ] ( main:11::play_movement:52 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_movement::render#2 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:123 [ play_movement::key_event#0 ]
Statement [181] (byte) play_movement::return#0 ← (byte) play_movement::render#2 + (byte~) play_movement::$4 [ score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::return#0 current_orientation#25 current_piece_gfx#21 current_xpos#26 ] ( main:11::play_movement:52 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::return#0 current_orientation#25 current_piece_gfx#21 current_xpos#26 ] { { play_movement::key_event#0 = main::key_event#0 } { play_movement::return#2 = play_movement::return#3 } }  ) always clobbers reg byte a 
Statement [186] (byte~) play_move_rotate::$5 ← (byte) current_orientation#20 + (byte) $10 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$5 ] ( main:11::play_movement:52::play_move_rotate:178 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:145 [ play_movement::render#2 ]
Statement [192] (byte*) current_piece#99 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#3 play_collision::ypos#3 play_collision::orientation#3 current_piece#99 ] ( main:11::play_movement:52::play_move_rotate:178 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#3 play_collision::ypos#3 play_collision::orientation#3 current_piece#99 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:42 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:46 [ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ]
Removing always clobbered register reg byte a as potential for zp[1]:47 [ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:45 [ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
Statement [198] (byte*) current_piece_gfx#7 ← (byte*) current_piece#15 + (byte) current_orientation#7 [ current_piece#15 current_ypos#19 current_xpos#26 current_orientation#7 current_piece_gfx#7 ] ( main:11::play_movement:52::play_move_rotate:178 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_xpos#26 current_orientation#7 current_piece_gfx#7 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } }  ) always clobbers reg byte a 
Statement [199] (byte~) play_move_rotate::$7 ← (byte) current_orientation#20 - (byte) $10 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$7 ] ( main:11::play_movement:52::play_move_rotate:178 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$7 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } }  ) always clobbers reg byte a 
Statement [202] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#17 + (byte) play_collision::orientation#5 [ play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:40 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 ]
Statement [204] (byte~) play_collision::$14 ← (byte) play_collision::yp#2 << (byte) 1 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:49 [ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ]
Removing always clobbered register reg byte a as potential for zp[1]:48 [ play_collision::l#6 play_collision::l#1 ]
Statement [205] (byte*) play_collision::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_collision::$14) [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [209] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte) 0) goto play_collision::@3 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:50 [ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:51 [ play_collision::c#2 play_collision::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:158 [ play_collision::i#1 ]
Statement [211] (byte~) play_collision::$5 ← (byte) play_collision::xp#2 & (byte) $80 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [214] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::xp#2)==(byte) 0) goto play_collision::@3 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [230] (byte*) current_piece#98 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#98 play_collision::orientation#2 play_collision::ypos#2 play_collision::xpos#2 ] ( main:11::play_movement:52::play_move_leftright:173 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#98 play_collision::orientation#2 play_collision::ypos#2 play_collision::xpos#2 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [241] (byte*) current_piece#97 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#97 play_collision::orientation#1 play_collision::ypos#1 play_collision::xpos#1 ] ( main:11::play_movement:52::play_move_leftright:173 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#97 play_collision::orientation#1 play_collision::ypos#1 play_collision::xpos#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [265] (byte*) current_piece#96 ← (byte*) current_piece#10 [ score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece#96 play_collision::orientation#0 play_collision::ypos#0 play_collision::xpos#0 ] ( main:11::play_movement:52::play_move_down:166 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece#96 play_collision::orientation#0 play_collision::ypos#0 play_collision::xpos#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [280] (byte*) current_piece#93 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 ] ( main:11::play_movement:52::play_move_down:166 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [281] (byte*) current_piece_gfx#117 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ score_bcd current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 current_piece_gfx#117 lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 ] ( main:11::play_movement:52::play_move_down:166 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 current_piece_gfx#117 lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [288] (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 << (byte) 1 [ play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] ( main:11::play_spawn_current:25 [ score_bcd current_movedown_slow#1 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27 [ score_bcd current_movedown_slow#1 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:171 [ play_spawn_current::current_piece_idx#0 ]
Statement [294] (byte*) current_piece#100 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] ( main:11::play_spawn_current:25 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [309] (byte~) play_update_score::$9 ← (byte) play_update_score::removed#0 << (byte) 2 [ score_bcd current_movedown_slow#14 lines_bcd#19 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::$9 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd current_movedown_slow#14 lines_bcd#19 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::$9 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:170 [ play_update_score::removed#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:177 [ play_update_score::lines_before#0 ]
Statement [310] (dword) play_update_score::add_bcd#0 ← *((const dword*) score_add_bcd + (byte~) play_update_score::$9) [ score_bcd current_movedown_slow#14 lines_bcd#19 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::add_bcd#0 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd current_movedown_slow#14 lines_bcd#19 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::add_bcd#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [312] (word) lines_bcd#29 ← (word) lines_bcd#19 + (byte) play_update_score::removed#0 [ score_bcd current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 play_update_score::add_bcd#0 lines_bcd#29 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 play_update_score::add_bcd#0 lines_bcd#29 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [313] (volatile dword) score_bcd ← (volatile dword) score_bcd + (dword) play_update_score::add_bcd#0 [ score_bcd current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [327] (byte~) play_increase_level::$1 ← (byte) level_bcd#21 & (byte) $f [ level#21 current_movedown_slow#65 level_bcd#21 play_increase_level::$1 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277::play_increase_level:319 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd lines_bcd#29 level#21 current_movedown_slow#65 level_bcd#21 play_increase_level::$1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [329] (byte) level_bcd#8 ← (byte) level_bcd#21 + (byte) 6 [ level#21 current_movedown_slow#65 level_bcd#8 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277::play_increase_level:319 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd lines_bcd#29 level#21 current_movedown_slow#65 level_bcd#8 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:2 [ render_screen_show#16 render_screen_show#13 ]
Removing always clobbered register reg byte x as potential for zp[1]:3 [ render_screen_render#18 render_screen_render#11 ]
Removing always clobbered register reg byte x as potential for zp[1]:88 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
Removing always clobbered register reg byte x as potential for zp[1]:123 [ play_movement::key_event#0 ]
Removing always clobbered register reg byte x as potential for zp[1]:70 [ game_over#65 game_over#27 game_over#10 game_over#52 game_over#15 ]
Removing always clobbered register reg byte x as potential for zp[1]:69 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 play_spawn_current::piece_idx#2 next_piece_idx#16 play_spawn_current::piece_idx#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:58 [ level#33 level#10 level#17 level#19 level#21 ]
Removing always clobbered register reg byte x as potential for zp[1]:59 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#1 current_movedown_slow#21 current_movedown_slow#23 current_movedown_slow#65 current_movedown_slow#10 ]
Statement [333] (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 << (byte) 2 [ level#21 current_movedown_slow#65 level_bcd#62 play_increase_level::b#2 play_increase_level::$5 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277::play_increase_level:319 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd lines_bcd#29 level#21 current_movedown_slow#65 level_bcd#62 play_increase_level::b#2 play_increase_level::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:71 [ play_increase_level::b#2 play_increase_level::b#1 ]
Statement [334] *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) ← *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) + *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_increase_level::$5) [ level#21 current_movedown_slow#65 level_bcd#62 play_increase_level::b#2 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277::play_increase_level:319 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd lines_bcd#29 level#21 current_movedown_slow#65 level_bcd#62 play_increase_level::b#2 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [352] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const nomodify byte) PLAYFIELD_COLS [ play_remove_lines::y#8 play_remove_lines::removed#11 play_remove_lines::r#1 play_remove_lines::w#2 ] ( main:11::play_movement:52::play_move_down:166::play_remove_lines:273 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_remove_lines::y#8 play_remove_lines::removed#11 play_remove_lines::r#1 play_remove_lines::w#2 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_remove_lines::return#0 = play_remove_lines::removed#7 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:72 [ play_remove_lines::y#8 play_remove_lines::y#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:73 [ play_remove_lines::removed#11 play_remove_lines::removed#7 play_remove_lines::removed#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:74 [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ]
Statement [360] *((const byte*) playfield + (byte) play_remove_lines::w#6) ← (byte) 0 [ play_remove_lines::removed#7 play_remove_lines::w#6 ] ( main:11::play_movement:52::play_move_down:166::play_remove_lines:273 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_remove_lines::removed#7 play_remove_lines::w#6 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_remove_lines::return#0 = play_remove_lines::removed#7 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:77 [ play_remove_lines::w#6 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 play_remove_lines::w#3 ]
Statement [364] (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 << (byte) 1 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::$4 ] ( main:11::play_movement:52::play_move_down:166::play_lock_current:271 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::$4 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:78 [ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:80 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ]
Removing always clobbered register reg byte a as potential for zp[1]:79 [ play_lock_current::l#6 play_lock_current::l#1 ]
Statement [365] (byte*) play_lock_current::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_lock_current::$4) [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::playfield_line#0 ] ( main:11::play_movement:52::play_move_down:166::play_lock_current:271 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [369] if(*((byte*) current_piece_gfx#13 + (byte) play_lock_current::i#2)==(byte) 0) goto play_lock_current::@3 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ( main:11::play_movement:52::play_move_down:166::play_lock_current:271 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:81 [ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:82 [ play_lock_current::c#2 play_lock_current::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:191 [ play_lock_current::i#1 ]
Statement [370] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::xp#2) ← (byte) current_piece_char#10 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ( main:11::play_movement:52::play_move_down:166::play_lock_current:271 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [381] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte) 3 [ keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] ( main:11::play_movement:52::play_move_down:166::keyboard_event_pressed:251 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#12 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:403 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] { { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:409 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] { { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:415 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] { { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#2 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:421 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] { { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#11 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:54 [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:83 [ keyboard_event_pressed::keycode#5 ]
Statement [383] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte) 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( main:11::play_movement:52::play_move_down:166::keyboard_event_pressed:251 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#12 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:403 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:409 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:415 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#2 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:421 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#11 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:193 [ keyboard_event_pressed::row_bits#0 ]
Statement [384] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1) [ keyboard_event_pressed::return#11 ] ( main:11::play_movement:52::play_move_down:166::keyboard_event_pressed:251 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::return#11 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#12 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:403 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::return#11 ] { { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:409 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::return#11 ] { { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:415 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::return#11 ] { { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#2 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:421 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::return#11 ] { { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#11 } }  ) always clobbers reg byte a 
Statement [386] if((byte) keyboard_events_size#13==(byte) 0) goto keyboard_event_get::@return [ keyboard_events_size#13 ] ( main:11::keyboard_event_get:46 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 ] { { keyboard_event_get::return#2 = keyboard_event_get::return#3 } }  ) always clobbers reg byte a 
Statement [388] (byte) keyboard_event_get::return#1 ← *((const byte*) keyboard_events + (byte) keyboard_events_size#4) [ keyboard_events_size#4 keyboard_event_get::return#1 ] ( main:11::keyboard_event_get:46 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#4 keyboard_event_get::return#1 ] { { keyboard_event_get::return#2 = keyboard_event_get::return#3 } }  ) always clobbers reg byte y 
Statement [398] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 [ keyboard_event_scan::row#2 keyboard_events_size#30 keyboard_event_scan::keycode#1 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_events_size#30 keyboard_event_scan::keycode#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:85 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Statement [428] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$15 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$15 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:198 [ keyboard_event_scan::row_scan#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:86 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:87 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Statement [431] if((byte) keyboard_events_size#10==(byte) 8) goto keyboard_event_scan::@10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] { }  ) always clobbers reg byte a 
Statement [432] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] { }  ) always clobbers reg byte a 
Statement [434] *((const byte*) keyboard_events + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:85 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:198 [ keyboard_event_scan::row_scan#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:86 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:87 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Statement [440] *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#29 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#29 ] { }  ) always clobbers reg byte a 
Statement [441] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$23 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$23 ] { }  ) always clobbers reg byte a 
Statement [442] *((const byte*) keyboard_events + (byte) keyboard_events_size#10) ← (byte~) keyboard_event_scan::$23 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] { }  ) always clobbers reg byte y 
Statement [444] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:11::keyboard_event_scan:44::keyboard_matrix_read:394 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 ] { { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [445] (byte) keyboard_matrix_read::return#0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B) [ keyboard_matrix_read::return#0 ] ( main:11::keyboard_event_scan:44::keyboard_matrix_read:394 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 keyboard_matrix_read::return#0 ] { { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [447] if((byte) render_screen_show#16==(byte) 0) goto render_show::toD0181 [ render_screen_show#16 level#10 ] ( main:11::render_show:42 [ score_bcd render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level_bcd#11 render_screen_show#16 level#10 ] { }  ) always clobbers reg byte a 
Statement [451] *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1 + (byte) level#10) [ render_screen_show#16 level#10 ] ( main:11::render_show:42 [ score_bcd render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level_bcd#11 render_screen_show#16 level#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [452] *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2 + (byte) level#10) [ render_screen_show#16 level#10 ] ( main:11::render_show:42 [ score_bcd render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level_bcd#11 render_screen_show#16 level#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [453] (volatile byte) render_screen_showing ← (byte) render_screen_show#16 [ render_screen_show#16 level#10 ] ( main:11::render_show:42 [ score_bcd render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level_bcd#11 render_screen_show#16 level#10 ] { }  ) always clobbers reg byte a 
Statement [458] (byte~) play_init::$2 ← (byte) play_init::j#2 << (byte) 1 [ play_init::j#2 play_init::pli#2 play_init::idx#2 play_init::$2 ] ( main:11::play_init:23 [ score_bcd play_init::j#2 play_init::pli#2 play_init::idx#2 play_init::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:90 [ play_init::j#2 play_init::j#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:93 [ play_init::idx#2 play_init::idx#1 ]
Statement [459] *((const byte**) playfield_lines + (byte~) play_init::$2) ← (byte*) play_init::pli#2 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ( main:11::play_init:23 [ score_bcd play_init::j#2 play_init::pli#2 play_init::idx#2 ] { }  ) always clobbers reg byte a 
Statement [460] *((const byte*) playfield_lines_idx + (byte) play_init::j#2) ← (byte) play_init::idx#2 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ( main:11::play_init:23 [ score_bcd play_init::j#2 play_init::pli#2 play_init::idx#2 ] { }  ) always clobbers reg byte a 
Statement [461] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const nomodify byte) PLAYFIELD_COLS [ play_init::j#2 play_init::idx#2 play_init::pli#1 ] ( main:11::play_init:23 [ score_bcd play_init::j#2 play_init::idx#2 play_init::pli#1 ] { }  ) always clobbers reg byte a 
Statement [462] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const nomodify byte) PLAYFIELD_COLS [ play_init::j#2 play_init::pli#1 play_init::idx#1 ] ( main:11::play_init:23 [ score_bcd play_init::j#2 play_init::pli#1 play_init::idx#1 ] { }  ) always clobbers reg byte a 
Statement [465] *((const byte*) playfield_lines_idx+(const nomodify byte) PLAYFIELD_LINES) ← (const nomodify byte) PLAYFIELD_COLS*(const nomodify byte) PLAYFIELD_LINES [ ] ( main:11::play_init:23 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [466] (byte) current_movedown_slow#1 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS) [ current_movedown_slow#1 ] ( main:11::play_init:23 [ score_bcd current_movedown_slow#1 ] { }  ) always clobbers reg byte a 
Statement [468] (byte~) play_init::$3 ← (byte) play_init::b#2 << (byte) 2 [ current_movedown_slow#1 play_init::b#2 play_init::$3 ] ( main:11::play_init:23 [ score_bcd current_movedown_slow#1 play_init::b#2 play_init::$3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:94 [ play_init::b#2 play_init::b#1 ]
Statement [469] *((const dword*) score_add_bcd + (byte~) play_init::$3) ← *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_init::$3) [ current_movedown_slow#1 play_init::b#2 ] ( main:11::play_init:23 [ score_bcd current_movedown_slow#1 play_init::b#2 ] { }  ) always clobbers reg byte a 
Statement [474] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement asm { ldaCIA1_INTERRUPT  } always clobbers reg byte a 
Statement [476] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [477] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [478] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [479] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (byte) $7f [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [480] *((const nomodify byte*) RASTER) ← (const nomodify byte) IRQ_RASTER_FIRST [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [481] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [482] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq() [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [485] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $f [ ] ( main:11::sprites_init:19 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [486] *((const nomodify byte*) SPRITES_MC) ← (byte) 0 [ ] ( main:11::sprites_init:19 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [487] *((const nomodify byte*) SPRITES_EXPAND_Y) ← *((const nomodify byte*) SPRITES_MC) [ ] ( main:11::sprites_init:19 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [488] *((const nomodify byte*) SPRITES_EXPAND_X) ← *((const nomodify byte*) SPRITES_EXPAND_Y) [ ] ( main:11::sprites_init:19 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [490] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte) 1 [ sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] ( main:11::sprites_init:19 [ score_bcd sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:95 [ sprites_init::s#2 sprites_init::s#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:96 [ sprites_init::xpos#2 sprites_init::xpos#1 ]
Statement [491] *((const nomodify byte*) SPRITES_XPOS + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2 [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:11::sprites_init:19 [ score_bcd sprites_init::s#2 sprites_init::xpos#2 ] { }  ) always clobbers reg byte a 
Statement [492] *((const nomodify byte*) SPRITES_COLS + (byte) sprites_init::s#2) ← (const nomodify byte) BLACK [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:11::sprites_init:19 [ score_bcd sprites_init::s#2 sprites_init::xpos#2 ] { }  ) always clobbers reg byte a 
Statement [493] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte) $18 [ sprites_init::s#2 sprites_init::xpos#1 ] ( main:11::sprites_init:19 [ score_bcd sprites_init::s#2 sprites_init::xpos#1 ] { }  ) always clobbers reg byte a 
Statement [498] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [500] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [501] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_ECM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [502] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [503] *((const nomodify byte*) BGCOL1) ← (const nomodify byte) BLACK [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [504] *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1) [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [505] *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2) [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [506] *((const nomodify byte*) BGCOL4) ← (const nomodify byte) GREY [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [511] (byte~) render_init::$5 ← (byte) render_init::i#2 << (byte) 1 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$5 ] ( main:11::render_init:17 [ score_bcd render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$5 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:97 [ render_init::i#2 render_init::i#1 ]
Statement [512] *((const byte**) screen_lines_1 + (byte~) render_init::$5) ← (byte*) render_init::li_1#2 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$5 ] ( main:11::render_init:17 [ score_bcd render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$5 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:215 [ render_init::$5 ]
Statement [513] *((const byte**) screen_lines_2 + (byte~) render_init::$5) ← (byte*) render_init::li_2#2 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] ( main:11::render_init:17 [ score_bcd render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] { }  ) always clobbers reg byte a 
Statement [514] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte) $28 [ render_init::i#2 render_init::li_2#2 render_init::li_1#1 ] ( main:11::render_init:17 [ score_bcd render_init::i#2 render_init::li_2#2 render_init::li_1#1 ] { }  ) always clobbers reg byte a 
Statement [515] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte) $28 [ render_init::i#2 render_init::li_1#1 render_init::li_2#1 ] ( main:11::render_init:17 [ score_bcd render_init::i#2 render_init::li_1#1 render_init::li_2#1 ] { }  ) always clobbers reg byte a 
Statement [522] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE [ render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:102 [ render_screen_original::y#6 render_screen_original::y#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:102 [ render_screen_original::y#6 render_screen_original::y#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:111 [ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
Removing always clobbered register reg byte y as potential for zp[1]:111 [ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
Statement [524] *((byte*) render_screen_original::cols#4) ← (const nomodify byte) BLACK [ render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [529] *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2) [ render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] { }  ) always clobbers reg byte a reg byte y 
Statement [532] *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2) [ render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] { }  ) always clobbers reg byte a reg byte y 
Statement [538] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE [ render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] { }  ) always clobbers reg byte a reg byte y 
Statement [540] *((byte*) render_screen_original::cols#6) ← (const nomodify byte) BLACK [ render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] { }  ) always clobbers reg byte a reg byte y 
Statement [555] if(*((const nomodify byte*) RASTER)<(volatile byte) sprites_irq::raster_sprite_gfx_modify) goto sprites_irq::@8 [ render_screen_showing irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::raster_sprite_gfx_modify ] (  [ render_screen_showing irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::raster_sprite_gfx_modify ] { }  ) always clobbers reg byte a 
Statement [557] if((volatile byte) render_screen_showing==(byte) 0) goto sprites_irq::@1 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::ptr#0 ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::ptr#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:219 [ sprites_irq::ptr#0 ]
Statement [565] if((volatile byte) irq_cnt==(byte) 9) goto sprites_irq::@3 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt ] { }  ) always clobbers reg byte a 
Statement [566] if((volatile byte) irq_cnt==(byte) $a) goto sprites_irq::@4 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a 
Statement [567] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $14 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a reg byte x 
Statement [568] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15 [ irq_raster_next irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ptr ] { }  ) always clobbers reg byte a reg byte x 
Statement [569] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a reg byte x 
Statement [570] *((const nomodify byte*) RASTER) ← (volatile byte) irq_raster_next [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [571] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [572] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [573] (volatile byte) irq_cnt ← (byte) 0 [ irq_sprite_ypos irq_sprite_ptr ] (  [ irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a 
Statement [574] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a 
Statement [575] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15 [ irq_raster_next irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ptr ] { }  ) always clobbers reg byte a reg byte x 
Statement [576] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a reg byte x 
Statement [577] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $15 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a reg byte x 
Statement [578] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a 
Statement [580] (volatile byte) irq_sprite_ptr ← (const byte) sprites_irq::toSpritePtr1_return#0 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a 
Statement [1] (volatile byte) render_screen_showing ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (volatile dword) score_bcd ← (dword) 0 [ score_bcd ] (  [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [5] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST [ score_bcd ] (  [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [6] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS+(byte) $15 [ score_bcd ] (  [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [8] (volatile byte) irq_sprite_ptr ← (const byte) toSpritePtr1_return#0+(byte) 3 [ score_bcd ] (  [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [9] (volatile byte) irq_cnt ← (byte) 0 [ score_bcd ] (  [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [14] *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (word) $ffff [ score_bcd ] ( main:11 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [15] *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE [ score_bcd ] ( main:11 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [32] (byte*) current_piece_gfx#112 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ score_bcd current_ypos#98 current_ypos#6 current_xpos#119 current_xpos#100 current_piece_gfx#112 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 ] ( main:11 [ score_bcd current_ypos#98 current_ypos#6 current_xpos#119 current_xpos#100 current_piece_gfx#112 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [37] (byte*) current_piece#101 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#101 current_movedown_slow#1 game_over#52 ] ( main:11 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#101 current_movedown_slow#1 game_over#52 ] { }  ) always clobbers reg byte a 
Statement [38] (byte*) current_piece_gfx#123 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ score_bcd current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#101 current_piece_gfx#123 current_movedown_slow#1 game_over#52 ] ( main:11 [ score_bcd current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#101 current_piece_gfx#123 current_movedown_slow#1 game_over#52 ] { }  ) always clobbers reg byte a 
Statement [40] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@2 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 ] ( main:11 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 ] { }  ) always clobbers reg byte a 
Statement [49] if((byte) game_over#10==(byte) 0) goto main::@4 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#16 main::key_event#0 ] ( main:11 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#16 main::key_event#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:122 [ main::key_event#0 ]
Statement [61] (byte*) current_piece_gfx#113 ← (byte*) current_piece_gfx#18 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 current_ypos#99 render_screen_render#65 current_xpos#120 current_piece_gfx#113 ] ( main:11 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 current_ypos#99 render_screen_render#65 current_xpos#120 current_piece_gfx#113 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [71] (byte) render_screen_render#11 ← (byte) render_screen_render#18 ^ (byte) $20 [ render_screen_show#16 render_screen_render#11 ] ( main:11::render_screen_swap:70 [ score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_show#16 render_screen_render#11 ] { }  ) always clobbers reg byte a 
Statement [72] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte) $20 [ render_screen_show#13 render_screen_render#11 ] ( main:11::render_screen_swap:70 [ score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_show#13 render_screen_render#11 ] { }  ) always clobbers reg byte a 
Statement [74] if((byte) render_screen_render#18==(byte) 0) goto render_score::@1 [ render_screen_render#18 lines_bcd#15 level_bcd#17 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 ] { }  ) always clobbers reg byte a 
Statement [77] (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#0 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#0 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  ) always clobbers reg byte a 
Statement [80] (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#1 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#1 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  ) always clobbers reg byte a 
Statement [83] (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#2 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#2 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  ) always clobbers reg byte a 
Statement [87] (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 render_bcd::screen#3 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 render_bcd::screen#3 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  ) always clobbers reg byte a 
Statement [90] (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 render_bcd::screen#4 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 render_bcd::screen#4 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  ) always clobbers reg byte a 
Statement [92] (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen#5 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen#5 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte a 
Statement [97] (byte*) render_bcd::screen_pos#0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6 [ render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] ( main:11::render_score:68::render_bcd:79 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:82 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:85 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:88 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:91 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:94 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte a 
Statement [99] (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#6 >> (byte) 4 [ render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] ( main:11::render_score:68::render_bcd:79 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:82 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:85 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:88 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:91 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:94 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte a 
Statement [101] *((byte*) render_bcd::screen_pos#0) ← (byte~) render_bcd::$6 [ render_bcd::bcd#6 render_bcd::screen_pos#0 ] ( main:11::render_score:68::render_bcd:79 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:82 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:85 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:88 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:91 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:94 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte y 
Statement [104] (byte~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte) $f [ render_bcd::screen_pos#3 render_bcd::$3 ] ( main:11::render_score:68::render_bcd:79 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:82 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:85 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:88 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:91 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:94 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte a 
Statement [106] *((byte*) render_bcd::screen_pos#3) ← (byte~) render_bcd::$4 [ ] ( main:11::render_score:68::render_bcd:79 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:82 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:85 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:88 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:91 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:94 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte y 
Statement [112] (byte~) render_next::$6 ← (byte) next_piece_idx#12 << (byte) 1 [ next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a 
Statement [114] (byte*) render_next::next_piece_gfx#8 ← (byte*)*((const word*) PIECES + (byte~) render_next::$6) [ render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#8 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#8 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#8 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a 
Statement [117] (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2) [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a reg byte y 
Statement [120] *((byte*) render_next::screen_next_area#5) ← (byte) 0 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a reg byte y 
Statement [124] (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#3 + (byte) $24 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a 
Statement [128] *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#0 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a reg byte y 
Statement [133] (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (byte) 4 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [139] (byte~) render_moving::$1 ← (byte) render_screen_render#33 + (byte) render_moving::ypos#2 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [140] (byte~) render_moving::$6 ← (byte~) render_moving::$1 << (byte) 1 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [141] (byte*) render_moving::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_moving::$6) [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [144] (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_moving::i#4) [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [147] *((byte*) render_moving::screen_line#0 + (byte) render_moving::xpos#2) ← (byte) current_piece_char#68 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [153] (byte~) render_playfield::$0 ← (byte) render_screen_render#22 + (byte) render_playfield::l#2 [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$0 ] ( main:11::render_playfield:29 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$0 ] { }  main:11::render_playfield:57 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$0 ] { { render_screen_render#22 = render_screen_render#64 } }  ) always clobbers reg byte a 
Statement [154] (byte~) render_playfield::$3 ← (byte~) render_playfield::$0 << (byte) 1 [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$3 ] ( main:11::render_playfield:29 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$3 ] { }  main:11::render_playfield:57 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$3 ] { { render_screen_render#22 = render_screen_render#64 } }  ) always clobbers reg byte a 
Statement [155] (byte*) render_playfield::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_playfield::$3) [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] ( main:11::render_playfield:29 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] { }  main:11::render_playfield:57 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] { { render_screen_render#22 = render_screen_render#64 } }  ) always clobbers reg byte a 
Statement [157] *((byte*) render_playfield::screen_line#2) ← *((const byte*) playfield + (byte) render_playfield::i#2) [ render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] ( main:11::render_playfield:29 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] { }  main:11::render_playfield:57 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] { { render_screen_render#22 = render_screen_render#64 } }  ) always clobbers reg byte a reg byte y 
Statement [169] if((byte) game_over#15==(byte) 0) goto play_movement::@1 [ score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_orientation#20 current_piece_gfx#20 current_xpos#22 ] ( main:11::play_movement:52 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_orientation#20 current_piece_gfx#20 current_xpos#22 ] { { play_movement::key_event#0 = main::key_event#0 } { play_movement::return#2 = play_movement::return#3 } }  ) always clobbers reg byte a 
Statement [176] (byte) play_movement::render#2 ← (byte) play_movement::render#1 + (byte~) play_movement::$3 [ score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_movement::render#2 ] ( main:11::play_movement:52 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_movement::render#2 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } }  ) always clobbers reg byte a 
Statement [181] (byte) play_movement::return#0 ← (byte) play_movement::render#2 + (byte~) play_movement::$4 [ score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::return#0 current_orientation#25 current_piece_gfx#21 current_xpos#26 ] ( main:11::play_movement:52 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::return#0 current_orientation#25 current_piece_gfx#21 current_xpos#26 ] { { play_movement::key_event#0 = main::key_event#0 } { play_movement::return#2 = play_movement::return#3 } }  ) always clobbers reg byte a 
Statement [186] (byte~) play_move_rotate::$5 ← (byte) current_orientation#20 + (byte) $10 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$5 ] ( main:11::play_movement:52::play_move_rotate:178 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } }  ) always clobbers reg byte a 
Statement [192] (byte*) current_piece#99 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#3 play_collision::ypos#3 play_collision::orientation#3 current_piece#99 ] ( main:11::play_movement:52::play_move_rotate:178 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#3 play_collision::ypos#3 play_collision::orientation#3 current_piece#99 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [198] (byte*) current_piece_gfx#7 ← (byte*) current_piece#15 + (byte) current_orientation#7 [ current_piece#15 current_ypos#19 current_xpos#26 current_orientation#7 current_piece_gfx#7 ] ( main:11::play_movement:52::play_move_rotate:178 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_xpos#26 current_orientation#7 current_piece_gfx#7 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } }  ) always clobbers reg byte a 
Statement [199] (byte~) play_move_rotate::$7 ← (byte) current_orientation#20 - (byte) $10 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$7 ] ( main:11::play_movement:52::play_move_rotate:178 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$7 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } }  ) always clobbers reg byte a 
Statement [202] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#17 + (byte) play_collision::orientation#5 [ play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [204] (byte~) play_collision::$14 ← (byte) play_collision::yp#2 << (byte) 1 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [205] (byte*) play_collision::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_collision::$14) [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [209] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte) 0) goto play_collision::@3 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [211] (byte~) play_collision::$5 ← (byte) play_collision::xp#2 & (byte) $80 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [214] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::xp#2)==(byte) 0) goto play_collision::@3 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [230] (byte*) current_piece#98 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#98 play_collision::orientation#2 play_collision::ypos#2 play_collision::xpos#2 ] ( main:11::play_movement:52::play_move_leftright:173 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#98 play_collision::orientation#2 play_collision::ypos#2 play_collision::xpos#2 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [241] (byte*) current_piece#97 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#97 play_collision::orientation#1 play_collision::ypos#1 play_collision::xpos#1 ] ( main:11::play_movement:52::play_move_leftright:173 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#97 play_collision::orientation#1 play_collision::ypos#1 play_collision::xpos#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [265] (byte*) current_piece#96 ← (byte*) current_piece#10 [ score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece#96 play_collision::orientation#0 play_collision::ypos#0 play_collision::xpos#0 ] ( main:11::play_movement:52::play_move_down:166 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece#96 play_collision::orientation#0 play_collision::ypos#0 play_collision::xpos#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [280] (byte*) current_piece#93 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 ] ( main:11::play_movement:52::play_move_down:166 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [281] (byte*) current_piece_gfx#117 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ score_bcd current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 current_piece_gfx#117 lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 ] ( main:11::play_movement:52::play_move_down:166 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 current_piece_gfx#117 lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [288] (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 << (byte) 1 [ play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] ( main:11::play_spawn_current:25 [ score_bcd current_movedown_slow#1 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27 [ score_bcd current_movedown_slow#1 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [294] (byte*) current_piece#100 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] ( main:11::play_spawn_current:25 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [302] if((byte) play_spawn_current::piece_idx#2==(byte) 7) goto play_spawn_current::sid_rnd1 [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 ] ( main:11::play_spawn_current:25 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 ] { }  main:11::play_spawn_current:27 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } }  ) always clobbers reg byte a 
Statement [305] (byte) play_spawn_current::piece_idx#1 ← (byte) play_spawn_current::sid_rnd1_return#0 & (byte) 7 [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#52 play_spawn_current::piece_idx#1 ] ( main:11::play_spawn_current:25 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#52 play_spawn_current::piece_idx#1 ] { }  main:11::play_spawn_current:27 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#52 play_spawn_current::piece_idx#1 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#52 play_spawn_current::piece_idx#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } }  ) always clobbers reg byte a 
Statement [309] (byte~) play_update_score::$9 ← (byte) play_update_score::removed#0 << (byte) 2 [ score_bcd current_movedown_slow#14 lines_bcd#19 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::$9 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd current_movedown_slow#14 lines_bcd#19 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::$9 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [310] (dword) play_update_score::add_bcd#0 ← *((const dword*) score_add_bcd + (byte~) play_update_score::$9) [ score_bcd current_movedown_slow#14 lines_bcd#19 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::add_bcd#0 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd current_movedown_slow#14 lines_bcd#19 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::add_bcd#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [312] (word) lines_bcd#29 ← (word) lines_bcd#19 + (byte) play_update_score::removed#0 [ score_bcd current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 play_update_score::add_bcd#0 lines_bcd#29 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 play_update_score::add_bcd#0 lines_bcd#29 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [313] (volatile dword) score_bcd ← (volatile dword) score_bcd + (dword) play_update_score::add_bcd#0 [ score_bcd current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [323] if((byte) level#21>=(byte) $1d+(byte) 1) goto play_increase_level::@1 [ level_bcd#11 level#21 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277::play_increase_level:319 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd lines_bcd#29 level_bcd#11 level#21 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [324] (byte) current_movedown_slow#10 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS + (byte) level#21) [ level_bcd#11 level#21 current_movedown_slow#10 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277::play_increase_level:319 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd lines_bcd#29 level_bcd#11 level#21 current_movedown_slow#10 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:123 [ play_movement::key_event#0 ]
Statement [327] (byte~) play_increase_level::$1 ← (byte) level_bcd#21 & (byte) $f [ level#21 current_movedown_slow#65 level_bcd#21 play_increase_level::$1 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277::play_increase_level:319 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd lines_bcd#29 level#21 current_movedown_slow#65 level_bcd#21 play_increase_level::$1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [329] (byte) level_bcd#8 ← (byte) level_bcd#21 + (byte) 6 [ level#21 current_movedown_slow#65 level_bcd#8 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277::play_increase_level:319 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd lines_bcd#29 level#21 current_movedown_slow#65 level_bcd#8 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a reg byte x 
Statement [333] (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 << (byte) 2 [ level#21 current_movedown_slow#65 level_bcd#62 play_increase_level::b#2 play_increase_level::$5 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277::play_increase_level:319 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd lines_bcd#29 level#21 current_movedown_slow#65 level_bcd#62 play_increase_level::b#2 play_increase_level::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [334] *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) ← *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) + *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_increase_level::$5) [ level#21 current_movedown_slow#65 level_bcd#62 play_increase_level::b#2 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277::play_increase_level:319 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd lines_bcd#29 level#21 current_movedown_slow#65 level_bcd#62 play_increase_level::b#2 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [352] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const nomodify byte) PLAYFIELD_COLS [ play_remove_lines::y#8 play_remove_lines::removed#11 play_remove_lines::r#1 play_remove_lines::w#2 ] ( main:11::play_movement:52::play_move_down:166::play_remove_lines:273 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_remove_lines::y#8 play_remove_lines::removed#11 play_remove_lines::r#1 play_remove_lines::w#2 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_remove_lines::return#0 = play_remove_lines::removed#7 } }  ) always clobbers reg byte a 
Statement [360] *((const byte*) playfield + (byte) play_remove_lines::w#6) ← (byte) 0 [ play_remove_lines::removed#7 play_remove_lines::w#6 ] ( main:11::play_movement:52::play_move_down:166::play_remove_lines:273 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_remove_lines::removed#7 play_remove_lines::w#6 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_remove_lines::return#0 = play_remove_lines::removed#7 } }  ) always clobbers reg byte a 
Statement [364] (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 << (byte) 1 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::$4 ] ( main:11::play_movement:52::play_move_down:166::play_lock_current:271 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::$4 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [365] (byte*) play_lock_current::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_lock_current::$4) [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::playfield_line#0 ] ( main:11::play_movement:52::play_move_down:166::play_lock_current:271 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [369] if(*((byte*) current_piece_gfx#13 + (byte) play_lock_current::i#2)==(byte) 0) goto play_lock_current::@3 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ( main:11::play_movement:52::play_move_down:166::play_lock_current:271 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [370] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::xp#2) ← (byte) current_piece_char#10 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ( main:11::play_movement:52::play_move_down:166::play_lock_current:271 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [381] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte) 3 [ keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] ( main:11::play_movement:52::play_move_down:166::keyboard_event_pressed:251 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#12 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:403 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] { { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:409 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] { { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:415 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] { { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#2 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:421 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] { { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#11 } }  ) always clobbers reg byte a 
Statement [383] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte) 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( main:11::play_movement:52::play_move_down:166::keyboard_event_pressed:251 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#12 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:403 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:409 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:415 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#2 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:421 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#11 } }  ) always clobbers reg byte a 
Statement [384] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1) [ keyboard_event_pressed::return#11 ] ( main:11::play_movement:52::play_move_down:166::keyboard_event_pressed:251 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::return#11 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#12 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:403 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::return#11 ] { { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:409 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::return#11 ] { { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:415 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::return#11 ] { { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#2 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:421 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::return#11 ] { { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#11 } }  ) always clobbers reg byte a 
Statement [386] if((byte) keyboard_events_size#13==(byte) 0) goto keyboard_event_get::@return [ keyboard_events_size#13 ] ( main:11::keyboard_event_get:46 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 ] { { keyboard_event_get::return#2 = keyboard_event_get::return#3 } }  ) always clobbers reg byte a 
Statement [388] (byte) keyboard_event_get::return#1 ← *((const byte*) keyboard_events + (byte) keyboard_events_size#4) [ keyboard_events_size#4 keyboard_event_get::return#1 ] ( main:11::keyboard_event_get:46 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#4 keyboard_event_get::return#1 ] { { keyboard_event_get::return#2 = keyboard_event_get::return#3 } }  ) always clobbers reg byte y 
Statement [397] if((byte) keyboard_event_scan::row_scan#0!=*((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 keyboard_event_scan::row_scan#0 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 keyboard_event_scan::row_scan#0 ] { }  ) always clobbers reg byte a 
Statement [398] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 [ keyboard_event_scan::row#2 keyboard_events_size#30 keyboard_event_scan::keycode#1 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_events_size#30 keyboard_event_scan::keycode#1 ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:63 [ current_piece_char#29 current_piece_char#10 current_piece_char#5 current_piece_char#16 ]
Removing always clobbered register reg byte x as potential for zp[1]:64 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
Removing always clobbered register reg byte x as potential for zp[1]:67 [ current_xpos#43 current_xpos#14 current_xpos#100 current_xpos#19 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
Removing always clobbered register reg byte x as potential for zp[1]:55 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#6 current_ypos#19 ]
Removing always clobbered register reg byte x as potential for zp[1]:4 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
Removing always clobbered register reg byte x as potential for zp[1]:60 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
Removing always clobbered register reg byte x as potential for zp[1]:85 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Statement [401] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7 [ keyboard_events_size#13 keyboard_event_scan::row#1 keyboard_event_scan::keycode#13 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_scan::row#1 keyboard_event_scan::keycode#13 ] { }  ) always clobbers reg byte a 
Statement [428] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$15 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$15 ] { }  ) always clobbers reg byte a 
Statement [429] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$16 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$16 ] { }  ) always clobbers reg byte a 
Statement [431] if((byte) keyboard_events_size#10==(byte) 8) goto keyboard_event_scan::@10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] { }  ) always clobbers reg byte a 
Statement [432] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] { }  ) always clobbers reg byte a 
Statement [434] *((const byte*) keyboard_events + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [440] *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#29 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#29 ] { }  ) always clobbers reg byte a reg byte y 
Statement [441] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$23 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$23 ] { }  ) always clobbers reg byte a 
Statement [442] *((const byte*) keyboard_events + (byte) keyboard_events_size#10) ← (byte~) keyboard_event_scan::$23 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] { }  ) always clobbers reg byte y 
Statement [444] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:11::keyboard_event_scan:44::keyboard_matrix_read:394 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 ] { { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [445] (byte) keyboard_matrix_read::return#0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B) [ keyboard_matrix_read::return#0 ] ( main:11::keyboard_event_scan:44::keyboard_matrix_read:394 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 keyboard_matrix_read::return#0 ] { { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [447] if((byte) render_screen_show#16==(byte) 0) goto render_show::toD0181 [ render_screen_show#16 level#10 ] ( main:11::render_show:42 [ score_bcd render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level_bcd#11 render_screen_show#16 level#10 ] { }  ) always clobbers reg byte a 
Statement [451] *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1 + (byte) level#10) [ render_screen_show#16 level#10 ] ( main:11::render_show:42 [ score_bcd render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level_bcd#11 render_screen_show#16 level#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [452] *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2 + (byte) level#10) [ render_screen_show#16 level#10 ] ( main:11::render_show:42 [ score_bcd render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level_bcd#11 render_screen_show#16 level#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [453] (volatile byte) render_screen_showing ← (byte) render_screen_show#16 [ render_screen_show#16 level#10 ] ( main:11::render_show:42 [ score_bcd render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level_bcd#11 render_screen_show#16 level#10 ] { }  ) always clobbers reg byte a 
Statement [458] (byte~) play_init::$2 ← (byte) play_init::j#2 << (byte) 1 [ play_init::j#2 play_init::pli#2 play_init::idx#2 play_init::$2 ] ( main:11::play_init:23 [ score_bcd play_init::j#2 play_init::pli#2 play_init::idx#2 play_init::$2 ] { }  ) always clobbers reg byte a 
Statement [459] *((const byte**) playfield_lines + (byte~) play_init::$2) ← (byte*) play_init::pli#2 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ( main:11::play_init:23 [ score_bcd play_init::j#2 play_init::pli#2 play_init::idx#2 ] { }  ) always clobbers reg byte a 
Statement [460] *((const byte*) playfield_lines_idx + (byte) play_init::j#2) ← (byte) play_init::idx#2 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ( main:11::play_init:23 [ score_bcd play_init::j#2 play_init::pli#2 play_init::idx#2 ] { }  ) always clobbers reg byte a 
Statement [461] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const nomodify byte) PLAYFIELD_COLS [ play_init::j#2 play_init::idx#2 play_init::pli#1 ] ( main:11::play_init:23 [ score_bcd play_init::j#2 play_init::idx#2 play_init::pli#1 ] { }  ) always clobbers reg byte a 
Statement [462] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const nomodify byte) PLAYFIELD_COLS [ play_init::j#2 play_init::pli#1 play_init::idx#1 ] ( main:11::play_init:23 [ score_bcd play_init::j#2 play_init::pli#1 play_init::idx#1 ] { }  ) always clobbers reg byte a 
Statement [465] *((const byte*) playfield_lines_idx+(const nomodify byte) PLAYFIELD_LINES) ← (const nomodify byte) PLAYFIELD_COLS*(const nomodify byte) PLAYFIELD_LINES [ ] ( main:11::play_init:23 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [466] (byte) current_movedown_slow#1 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS) [ current_movedown_slow#1 ] ( main:11::play_init:23 [ score_bcd current_movedown_slow#1 ] { }  ) always clobbers reg byte a 
Statement [468] (byte~) play_init::$3 ← (byte) play_init::b#2 << (byte) 2 [ current_movedown_slow#1 play_init::b#2 play_init::$3 ] ( main:11::play_init:23 [ score_bcd current_movedown_slow#1 play_init::b#2 play_init::$3 ] { }  ) always clobbers reg byte a 
Statement [469] *((const dword*) score_add_bcd + (byte~) play_init::$3) ← *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_init::$3) [ current_movedown_slow#1 play_init::b#2 ] ( main:11::play_init:23 [ score_bcd current_movedown_slow#1 play_init::b#2 ] { }  ) always clobbers reg byte a 
Statement [474] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement asm { ldaCIA1_INTERRUPT  } always clobbers reg byte a 
Statement [476] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [477] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [478] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [479] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (byte) $7f [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [480] *((const nomodify byte*) RASTER) ← (const nomodify byte) IRQ_RASTER_FIRST [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [481] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [482] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq() [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [485] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $f [ ] ( main:11::sprites_init:19 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [486] *((const nomodify byte*) SPRITES_MC) ← (byte) 0 [ ] ( main:11::sprites_init:19 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [487] *((const nomodify byte*) SPRITES_EXPAND_Y) ← *((const nomodify byte*) SPRITES_MC) [ ] ( main:11::sprites_init:19 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [488] *((const nomodify byte*) SPRITES_EXPAND_X) ← *((const nomodify byte*) SPRITES_EXPAND_Y) [ ] ( main:11::sprites_init:19 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [490] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte) 1 [ sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] ( main:11::sprites_init:19 [ score_bcd sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] { }  ) always clobbers reg byte a 
Statement [491] *((const nomodify byte*) SPRITES_XPOS + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2 [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:11::sprites_init:19 [ score_bcd sprites_init::s#2 sprites_init::xpos#2 ] { }  ) always clobbers reg byte a 
Statement [492] *((const nomodify byte*) SPRITES_COLS + (byte) sprites_init::s#2) ← (const nomodify byte) BLACK [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:11::sprites_init:19 [ score_bcd sprites_init::s#2 sprites_init::xpos#2 ] { }  ) always clobbers reg byte a 
Statement [493] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte) $18 [ sprites_init::s#2 sprites_init::xpos#1 ] ( main:11::sprites_init:19 [ score_bcd sprites_init::s#2 sprites_init::xpos#1 ] { }  ) always clobbers reg byte a 
Statement [498] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [500] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [501] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_ECM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [502] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [503] *((const nomodify byte*) BGCOL1) ← (const nomodify byte) BLACK [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [504] *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1) [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [505] *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2) [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [506] *((const nomodify byte*) BGCOL4) ← (const nomodify byte) GREY [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [511] (byte~) render_init::$5 ← (byte) render_init::i#2 << (byte) 1 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$5 ] ( main:11::render_init:17 [ score_bcd render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$5 ] { }  ) always clobbers reg byte a 
Statement [512] *((const byte**) screen_lines_1 + (byte~) render_init::$5) ← (byte*) render_init::li_1#2 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$5 ] ( main:11::render_init:17 [ score_bcd render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$5 ] { }  ) always clobbers reg byte a 
Statement [513] *((const byte**) screen_lines_2 + (byte~) render_init::$5) ← (byte*) render_init::li_2#2 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] ( main:11::render_init:17 [ score_bcd render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] { }  ) always clobbers reg byte a 
Statement [514] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte) $28 [ render_init::i#2 render_init::li_2#2 render_init::li_1#1 ] ( main:11::render_init:17 [ score_bcd render_init::i#2 render_init::li_2#2 render_init::li_1#1 ] { }  ) always clobbers reg byte a 
Statement [515] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte) $28 [ render_init::i#2 render_init::li_1#1 render_init::li_2#1 ] ( main:11::render_init:17 [ score_bcd render_init::i#2 render_init::li_1#1 render_init::li_2#1 ] { }  ) always clobbers reg byte a 
Statement [522] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE [ render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [524] *((byte*) render_screen_original::cols#4) ← (const nomodify byte) BLACK [ render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [529] *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2) [ render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] { }  ) always clobbers reg byte a reg byte y 
Statement [532] *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2) [ render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] { }  ) always clobbers reg byte a reg byte y 
Statement [538] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE [ render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] { }  ) always clobbers reg byte a reg byte y 
Statement [540] *((byte*) render_screen_original::cols#6) ← (const nomodify byte) BLACK [ render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] { }  ) always clobbers reg byte a reg byte y 
Statement [555] if(*((const nomodify byte*) RASTER)<(volatile byte) sprites_irq::raster_sprite_gfx_modify) goto sprites_irq::@8 [ render_screen_showing irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::raster_sprite_gfx_modify ] (  [ render_screen_showing irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::raster_sprite_gfx_modify ] { }  ) always clobbers reg byte a 
Statement [557] if((volatile byte) render_screen_showing==(byte) 0) goto sprites_irq::@1 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::ptr#0 ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::ptr#0 ] { }  ) always clobbers reg byte a 
Statement [565] if((volatile byte) irq_cnt==(byte) 9) goto sprites_irq::@3 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt ] { }  ) always clobbers reg byte a 
Statement [566] if((volatile byte) irq_cnt==(byte) $a) goto sprites_irq::@4 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a 
Statement [567] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $14 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a reg byte x 
Statement [568] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15 [ irq_raster_next irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ptr ] { }  ) always clobbers reg byte a reg byte x 
Statement [569] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a reg byte x 
Statement [570] *((const nomodify byte*) RASTER) ← (volatile byte) irq_raster_next [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [571] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [572] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [573] (volatile byte) irq_cnt ← (byte) 0 [ irq_sprite_ypos irq_sprite_ptr ] (  [ irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a 
Statement [574] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a 
Statement [575] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15 [ irq_raster_next irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ptr ] { }  ) always clobbers reg byte a reg byte x 
Statement [576] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a reg byte x 
Statement [577] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $15 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a reg byte x 
Statement [578] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a 
Statement [580] (volatile byte) irq_sprite_ptr ← (const byte) sprites_irq::toSpritePtr1_return#0 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a 
Statement [1] (volatile byte) render_screen_showing ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (volatile dword) score_bcd ← (dword) 0 [ score_bcd ] (  [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [5] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST [ score_bcd ] (  [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [6] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS+(byte) $15 [ score_bcd ] (  [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [8] (volatile byte) irq_sprite_ptr ← (const byte) toSpritePtr1_return#0+(byte) 3 [ score_bcd ] (  [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [9] (volatile byte) irq_cnt ← (byte) 0 [ score_bcd ] (  [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [14] *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (word) $ffff [ score_bcd ] ( main:11 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [15] *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE [ score_bcd ] ( main:11 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [32] (byte*) current_piece_gfx#112 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ score_bcd current_ypos#98 current_ypos#6 current_xpos#119 current_xpos#100 current_piece_gfx#112 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 ] ( main:11 [ score_bcd current_ypos#98 current_ypos#6 current_xpos#119 current_xpos#100 current_piece_gfx#112 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [37] (byte*) current_piece#101 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#101 current_movedown_slow#1 game_over#52 ] ( main:11 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#101 current_movedown_slow#1 game_over#52 ] { }  ) always clobbers reg byte a 
Statement [38] (byte*) current_piece_gfx#123 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ score_bcd current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#101 current_piece_gfx#123 current_movedown_slow#1 game_over#52 ] ( main:11 [ score_bcd current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#101 current_piece_gfx#123 current_movedown_slow#1 game_over#52 ] { }  ) always clobbers reg byte a 
Statement [40] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@2 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 ] ( main:11 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 ] { }  ) always clobbers reg byte a 
Statement [49] if((byte) game_over#10==(byte) 0) goto main::@4 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#16 main::key_event#0 ] ( main:11 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#16 main::key_event#0 ] { }  ) always clobbers reg byte a 
Statement [61] (byte*) current_piece_gfx#113 ← (byte*) current_piece_gfx#18 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 current_ypos#99 render_screen_render#65 current_xpos#120 current_piece_gfx#113 ] ( main:11 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 current_ypos#99 render_screen_render#65 current_xpos#120 current_piece_gfx#113 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [71] (byte) render_screen_render#11 ← (byte) render_screen_render#18 ^ (byte) $20 [ render_screen_show#16 render_screen_render#11 ] ( main:11::render_screen_swap:70 [ score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_show#16 render_screen_render#11 ] { }  ) always clobbers reg byte a 
Statement [72] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte) $20 [ render_screen_show#13 render_screen_render#11 ] ( main:11::render_screen_swap:70 [ score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_show#13 render_screen_render#11 ] { }  ) always clobbers reg byte a 
Statement [74] if((byte) render_screen_render#18==(byte) 0) goto render_score::@1 [ render_screen_render#18 lines_bcd#15 level_bcd#17 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 ] { }  ) always clobbers reg byte a 
Statement [77] (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#0 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#0 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  ) always clobbers reg byte a 
Statement [80] (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#1 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#1 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  ) always clobbers reg byte a 
Statement [83] (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#2 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#2 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  ) always clobbers reg byte a 
Statement [87] (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 render_bcd::screen#3 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 render_bcd::screen#3 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  ) always clobbers reg byte a 
Statement [90] (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 render_bcd::screen#4 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 render_bcd::screen#4 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  ) always clobbers reg byte a 
Statement [92] (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen#5 ] ( main:11::render_score:68 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen#5 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte a 
Statement [97] (byte*) render_bcd::screen_pos#0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6 [ render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] ( main:11::render_score:68::render_bcd:79 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:82 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:85 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:88 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:91 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:94 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte a 
Statement [99] (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#6 >> (byte) 4 [ render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] ( main:11::render_score:68::render_bcd:79 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:82 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:85 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:88 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:91 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:94 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte a 
Statement [101] *((byte*) render_bcd::screen_pos#0) ← (byte~) render_bcd::$6 [ render_bcd::bcd#6 render_bcd::screen_pos#0 ] ( main:11::render_score:68::render_bcd:79 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:82 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:85 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:88 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:91 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:94 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::bcd#6 render_bcd::screen_pos#0 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte y 
Statement [104] (byte~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte) $f [ render_bcd::screen_pos#3 render_bcd::$3 ] ( main:11::render_score:68::render_bcd:79 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:82 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:85 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:88 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:91 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:94 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen_pos#3 render_bcd::$3 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte a 
Statement [106] *((byte*) render_bcd::screen_pos#3) ← (byte~) render_bcd::$4 [ ] ( main:11::render_score:68::render_bcd:79 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] { { render_bcd::screen#0 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#0 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:82 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] { { render_bcd::screen#1 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#1 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:85 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] { { render_bcd::screen#2 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#2 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:88 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] { { render_bcd::screen#3 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#3 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:91 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] { { render_bcd::screen#4 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#4 = render_bcd::bcd#6 } }  main:11::render_score:68::render_bcd:94 [ score_bcd render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 ] { { render_bcd::screen#5 = render_bcd::screen#6 render_score::screen#3 } { render_bcd::bcd#5 = render_bcd::bcd#6 level_bcd#17 } }  ) always clobbers reg byte y 
Statement [112] (byte~) render_next::$6 ← (byte) next_piece_idx#12 << (byte) 1 [ next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a 
Statement [114] (byte*) render_next::next_piece_gfx#8 ← (byte*)*((const word*) PIECES + (byte~) render_next::$6) [ render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#8 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#8 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#8 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a 
Statement [117] (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2) [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a reg byte y 
Statement [120] *((byte*) render_next::screen_next_area#5) ← (byte) 0 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a reg byte y 
Statement [124] (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#3 + (byte) $24 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a 
Statement [128] *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#0 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ( main:11::render_next:36 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] { { next_piece_idx#12 = next_piece_idx#77 } }  main:11::render_next:66 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] { { render_screen_render#15 = render_screen_render#66 } { next_piece_idx#12 = next_piece_idx#78 } }  ) always clobbers reg byte a reg byte y 
Statement [133] (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (byte) 4 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [139] (byte~) render_moving::$1 ← (byte) render_screen_render#33 + (byte) render_moving::ypos#2 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [140] (byte~) render_moving::$6 ← (byte~) render_moving::$1 << (byte) 1 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [141] (byte*) render_moving::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_moving::$6) [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [144] (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_moving::i#4) [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [147] *((byte*) render_moving::screen_line#0 + (byte) render_moving::xpos#2) ← (byte) current_piece_char#68 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] ( main:11::render_moving:34 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] { { current_ypos#13 = current_ypos#98 } { current_xpos#119 = current_xpos#59 } { current_piece_gfx#112 = current_piece_gfx#64 } { current_piece_char#100 = current_piece_char#68 } }  main:11::render_moving:63 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] { { current_ypos#13 = current_ypos#99 } { render_screen_render#33 = render_screen_render#65 } { current_xpos#120 = current_xpos#59 } { current_piece_gfx#113 = current_piece_gfx#64 } { current_piece_char#101 = current_piece_char#68 } }  ) always clobbers reg byte a 
Statement [153] (byte~) render_playfield::$0 ← (byte) render_screen_render#22 + (byte) render_playfield::l#2 [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$0 ] ( main:11::render_playfield:29 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$0 ] { }  main:11::render_playfield:57 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$0 ] { { render_screen_render#22 = render_screen_render#64 } }  ) always clobbers reg byte a 
Statement [154] (byte~) render_playfield::$3 ← (byte~) render_playfield::$0 << (byte) 1 [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$3 ] ( main:11::render_playfield:29 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$3 ] { }  main:11::render_playfield:57 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$3 ] { { render_screen_render#22 = render_screen_render#64 } }  ) always clobbers reg byte a 
Statement [155] (byte*) render_playfield::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_playfield::$3) [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] ( main:11::render_playfield:29 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] { }  main:11::render_playfield:57 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] { { render_screen_render#22 = render_screen_render#64 } }  ) always clobbers reg byte a 
Statement [157] *((byte*) render_playfield::screen_line#2) ← *((const byte*) playfield + (byte) render_playfield::i#2) [ render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] ( main:11::render_playfield:29 [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] { }  main:11::render_playfield:57 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] { { render_screen_render#22 = render_screen_render#64 } }  ) always clobbers reg byte a reg byte y 
Statement [169] if((byte) game_over#15==(byte) 0) goto play_movement::@1 [ score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_orientation#20 current_piece_gfx#20 current_xpos#22 ] ( main:11::play_movement:52 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_orientation#20 current_piece_gfx#20 current_xpos#22 ] { { play_movement::key_event#0 = main::key_event#0 } { play_movement::return#2 = play_movement::return#3 } }  ) always clobbers reg byte a 
Statement [176] (byte) play_movement::render#2 ← (byte) play_movement::render#1 + (byte~) play_movement::$3 [ score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_movement::render#2 ] ( main:11::play_movement:52 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_movement::render#2 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } }  ) always clobbers reg byte a 
Statement [181] (byte) play_movement::return#0 ← (byte) play_movement::render#2 + (byte~) play_movement::$4 [ score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::return#0 current_orientation#25 current_piece_gfx#21 current_xpos#26 ] ( main:11::play_movement:52 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::return#0 current_orientation#25 current_piece_gfx#21 current_xpos#26 ] { { play_movement::key_event#0 = main::key_event#0 } { play_movement::return#2 = play_movement::return#3 } }  ) always clobbers reg byte a 
Statement [186] (byte~) play_move_rotate::$5 ← (byte) current_orientation#20 + (byte) $10 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$5 ] ( main:11::play_movement:52::play_move_rotate:178 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } }  ) always clobbers reg byte a 
Statement [192] (byte*) current_piece#99 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#3 play_collision::ypos#3 play_collision::orientation#3 current_piece#99 ] ( main:11::play_movement:52::play_move_rotate:178 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#3 play_collision::ypos#3 play_collision::orientation#3 current_piece#99 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [198] (byte*) current_piece_gfx#7 ← (byte*) current_piece#15 + (byte) current_orientation#7 [ current_piece#15 current_ypos#19 current_xpos#26 current_orientation#7 current_piece_gfx#7 ] ( main:11::play_movement:52::play_move_rotate:178 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_xpos#26 current_orientation#7 current_piece_gfx#7 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } }  ) always clobbers reg byte a 
Statement [199] (byte~) play_move_rotate::$7 ← (byte) current_orientation#20 - (byte) $10 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$7 ] ( main:11::play_movement:52::play_move_rotate:178 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$7 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } }  ) always clobbers reg byte a 
Statement [202] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#17 + (byte) play_collision::orientation#5 [ play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [204] (byte~) play_collision::$14 ← (byte) play_collision::yp#2 << (byte) 1 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [205] (byte*) play_collision::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_collision::$14) [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [209] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte) 0) goto play_collision::@3 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [211] (byte~) play_collision::$5 ← (byte) play_collision::xp#2 & (byte) $80 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [214] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::xp#2)==(byte) 0) goto play_collision::@3 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ( main:11::play_movement:52::play_move_rotate:178::play_collision:193 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_rotate::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_rotate::return#0 = play_move_rotate::return#2 } { current_piece#17 = current_piece#99 } { play_collision::orientation#3 = play_collision::orientation#5 play_move_rotate::orientation#3 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#3 } { play_collision::xpos#3 = play_collision::xpos#6 current_xpos#26 } { play_collision::return#14 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:231 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  main:11::play_movement:52::play_move_leftright:173::play_collision:242 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_collision:266 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  main:11::play_spawn_current:25::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27::play_collision:295 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279::play_collision:295 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [230] (byte*) current_piece#98 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#98 play_collision::orientation#2 play_collision::ypos#2 play_collision::xpos#2 ] ( main:11::play_movement:52::play_move_leftright:173 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#98 play_collision::orientation#2 play_collision::ypos#2 play_collision::xpos#2 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#98 } { play_collision::orientation#2 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#2 } { play_collision::xpos#2 = play_collision::xpos#6 } { play_collision::return#13 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [241] (byte*) current_piece#97 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#97 play_collision::orientation#1 play_collision::ypos#1 play_collision::xpos#1 ] ( main:11::play_movement:52::play_move_leftright:173 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 score_bcd current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#97 play_collision::orientation#1 play_collision::ypos#1 play_collision::xpos#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_leftright::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_leftright::return#0 = play_move_leftright::return#2 } { current_piece#17 = current_piece#97 } { play_collision::orientation#1 = play_collision::orientation#5 current_orientation#20 } { current_ypos#19 = play_collision::yp#0 play_collision::ypos#1 } { play_collision::xpos#1 = play_collision::xpos#6 } { play_collision::return#1 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [255] if((byte) current_movedown_counter#12<(const nomodify byte) current_movedown_fast) goto play_move_down::@2 [ score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 ] ( main:11::play_movement:52::play_move_down:166 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [258] if((byte) current_movedown_counter#12<(byte) current_movedown_slow#14) goto play_move_down::@3 [ score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#7 ] ( main:11::play_movement:52::play_move_down:166 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#7 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [265] (byte*) current_piece#96 ← (byte*) current_piece#10 [ score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece#96 play_collision::orientation#0 play_collision::ypos#0 play_collision::xpos#0 ] ( main:11::play_movement:52::play_move_down:166 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece#96 play_collision::orientation#0 play_collision::ypos#0 play_collision::xpos#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { current_piece#17 = current_piece#96 } { play_collision::orientation#0 = play_collision::orientation#5 current_orientation#13 } { play_collision::yp#0 = play_collision::ypos#0 } { play_collision::xpos#0 = play_collision::xpos#6 current_xpos#14 } { play_collision::return#0 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [280] (byte*) current_piece#93 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 ] ( main:11::play_movement:52::play_move_down:166 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [281] (byte*) current_piece_gfx#117 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ score_bcd current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 current_piece_gfx#117 lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 ] ( main:11::play_movement:52::play_move_down:166 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 current_piece_gfx#117 lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [288] (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 << (byte) 1 [ play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] ( main:11::play_spawn_current:25 [ score_bcd current_movedown_slow#1 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27 [ score_bcd current_movedown_slow#1 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [289] (byte) current_piece_char#5 ← *((const byte*) PIECES_CHARS + (byte) play_spawn_current::current_piece_idx#0) [ play_spawn_current::$7 current_piece_char#5 game_over#65 play_spawn_current::current_piece_idx#0 ] ( main:11::play_spawn_current:25 [ score_bcd current_movedown_slow#1 play_spawn_current::$7 current_piece_char#5 game_over#65 play_spawn_current::current_piece_idx#0 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27 [ score_bcd current_movedown_slow#1 play_spawn_current::$7 current_piece_char#5 game_over#65 play_spawn_current::current_piece_idx#0 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 play_spawn_current::$7 current_piece_char#5 game_over#65 play_spawn_current::current_piece_idx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [290] (byte) current_xpos#100 ← *((const byte*) PIECES_START_X + (byte) play_spawn_current::current_piece_idx#0) [ current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_spawn_current::current_piece_idx#0 ] ( main:11::play_spawn_current:25 [ score_bcd current_movedown_slow#1 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_spawn_current::current_piece_idx#0 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27 [ score_bcd current_movedown_slow#1 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_spawn_current::current_piece_idx#0 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_spawn_current::current_piece_idx#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [291] (byte) current_ypos#6 ← *((const byte*) PIECES_START_Y + (byte) play_spawn_current::current_piece_idx#0) [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 ] ( main:11::play_spawn_current:25 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [294] (byte*) current_piece#100 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] ( main:11::play_spawn_current:25 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] { { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_spawn_current:27 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } { current_piece#100 = current_piece#17 } { current_ypos#6 = play_collision::yp#0 play_collision::ypos#4 } { play_collision::xpos#4 = play_collision::xpos#6 current_xpos#100 } { play_collision::return#10 = play_collision::return#15 } }  ) always clobbers reg byte a 
Statement [302] if((byte) play_spawn_current::piece_idx#2==(byte) 7) goto play_spawn_current::sid_rnd1 [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 ] ( main:11::play_spawn_current:25 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 ] { }  main:11::play_spawn_current:27 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } }  ) always clobbers reg byte a 
Statement [305] (byte) play_spawn_current::piece_idx#1 ← (byte) play_spawn_current::sid_rnd1_return#0 & (byte) 7 [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#52 play_spawn_current::piece_idx#1 ] ( main:11::play_spawn_current:25 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#52 play_spawn_current::piece_idx#1 ] { }  main:11::play_spawn_current:27 [ score_bcd current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#52 play_spawn_current::piece_idx#1 ] { { next_piece_idx#17 = play_spawn_current::piece_idx#2 } { game_over#52 = game_over#65 } }  main:11::play_movement:52::play_move_down:166::play_spawn_current:279 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd lines_bcd#17 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#52 play_spawn_current::piece_idx#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { next_piece_idx#10 = next_piece_idx#17 } { game_over#10 = game_over#65 } }  ) always clobbers reg byte a 
Statement [309] (byte~) play_update_score::$9 ← (byte) play_update_score::removed#0 << (byte) 2 [ score_bcd current_movedown_slow#14 lines_bcd#19 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::$9 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd current_movedown_slow#14 lines_bcd#19 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::$9 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [310] (dword) play_update_score::add_bcd#0 ← *((const dword*) score_add_bcd + (byte~) play_update_score::$9) [ score_bcd current_movedown_slow#14 lines_bcd#19 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::add_bcd#0 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd current_movedown_slow#14 lines_bcd#19 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::add_bcd#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [312] (word) lines_bcd#29 ← (word) lines_bcd#19 + (byte) play_update_score::removed#0 [ score_bcd current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 play_update_score::add_bcd#0 lines_bcd#29 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 play_update_score::add_bcd#0 lines_bcd#29 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [313] (volatile dword) score_bcd ← (volatile dword) score_bcd + (dword) play_update_score::add_bcd#0 [ score_bcd current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [323] if((byte) level#21>=(byte) $1d+(byte) 1) goto play_increase_level::@1 [ level_bcd#11 level#21 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277::play_increase_level:319 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd lines_bcd#29 level_bcd#11 level#21 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [324] (byte) current_movedown_slow#10 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS + (byte) level#21) [ level_bcd#11 level#21 current_movedown_slow#10 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277::play_increase_level:319 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd lines_bcd#29 level_bcd#11 level#21 current_movedown_slow#10 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a reg byte y 
Statement [327] (byte~) play_increase_level::$1 ← (byte) level_bcd#21 & (byte) $f [ level#21 current_movedown_slow#65 level_bcd#21 play_increase_level::$1 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277::play_increase_level:319 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd lines_bcd#29 level#21 current_movedown_slow#65 level_bcd#21 play_increase_level::$1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [329] (byte) level_bcd#8 ← (byte) level_bcd#21 + (byte) 6 [ level#21 current_movedown_slow#65 level_bcd#8 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277::play_increase_level:319 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd lines_bcd#29 level#21 current_movedown_slow#65 level_bcd#8 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a reg byte x 
Statement [333] (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 << (byte) 2 [ level#21 current_movedown_slow#65 level_bcd#62 play_increase_level::b#2 play_increase_level::$5 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277::play_increase_level:319 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd lines_bcd#29 level#21 current_movedown_slow#65 level_bcd#62 play_increase_level::b#2 play_increase_level::$5 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [334] *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) ← *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) + *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_increase_level::$5) [ level#21 current_movedown_slow#65 level_bcd#62 play_increase_level::b#2 ] ( main:11::play_movement:52::play_move_down:166::play_update_score:277::play_increase_level:319 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 score_bcd lines_bcd#29 level#21 current_movedown_slow#65 level_bcd#62 play_increase_level::b#2 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_update_score::removed#0 = play_move_down::removed#0 } }  ) always clobbers reg byte a 
Statement [352] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const nomodify byte) PLAYFIELD_COLS [ play_remove_lines::y#8 play_remove_lines::removed#11 play_remove_lines::r#1 play_remove_lines::w#2 ] ( main:11::play_movement:52::play_move_down:166::play_remove_lines:273 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_remove_lines::y#8 play_remove_lines::removed#11 play_remove_lines::r#1 play_remove_lines::w#2 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_remove_lines::return#0 = play_remove_lines::removed#7 } }  ) always clobbers reg byte a 
Statement [360] *((const byte*) playfield + (byte) play_remove_lines::w#6) ← (byte) 0 [ play_remove_lines::removed#7 play_remove_lines::w#6 ] ( main:11::play_movement:52::play_move_down:166::play_remove_lines:273 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 play_remove_lines::removed#7 play_remove_lines::w#6 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { play_remove_lines::return#0 = play_remove_lines::removed#7 } }  ) always clobbers reg byte a 
Statement [364] (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 << (byte) 1 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::$4 ] ( main:11::play_movement:52::play_move_down:166::play_lock_current:271 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::$4 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [365] (byte*) play_lock_current::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_lock_current::$4) [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::playfield_line#0 ] ( main:11::play_movement:52::play_move_down:166::play_lock_current:271 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::playfield_line#0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [369] if(*((byte*) current_piece_gfx#13 + (byte) play_lock_current::i#2)==(byte) 0) goto play_lock_current::@3 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ( main:11::play_movement:52::play_move_down:166::play_lock_current:271 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [370] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::xp#2) ← (byte) current_piece_char#10 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ( main:11::play_movement:52::play_move_down:166::play_lock_current:271 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } }  ) always clobbers reg byte a 
Statement [381] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte) 3 [ keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] ( main:11::play_movement:52::play_move_down:166::keyboard_event_pressed:251 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#12 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:403 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] { { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:409 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] { { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:415 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] { { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#2 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:421 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] { { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#11 } }  ) always clobbers reg byte a 
Statement [383] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte) 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( main:11::play_movement:52::play_move_down:166::keyboard_event_pressed:251 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#12 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:403 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:409 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:415 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#2 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:421 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#11 } }  ) always clobbers reg byte a 
Statement [384] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1) [ keyboard_event_pressed::return#11 ] ( main:11::play_movement:52::play_move_down:166::keyboard_event_pressed:251 [ render_screen_show#16 render_screen_render#18 keyboard_events_size#16 play_movement::key_event#0 score_bcd current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::return#11 ] { { play_movement::key_event#0 = main::key_event#0 play_move_down::key_event#0 } { play_movement::return#2 = play_movement::return#3 } { play_move_down::return#0 = play_move_down::return#3 } { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#12 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:403 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::return#11 ] { { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:409 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::return#11 ] { { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#11 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:415 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::return#11 ] { { keyboard_event_pressed::return#11 = keyboard_event_pressed::return#2 } }  main:11::keyboard_event_scan:44::keyboard_event_pressed:421 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_pressed::return#11 ] { { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#11 } }  ) always clobbers reg byte a 
Statement [386] if((byte) keyboard_events_size#13==(byte) 0) goto keyboard_event_get::@return [ keyboard_events_size#13 ] ( main:11::keyboard_event_get:46 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 ] { { keyboard_event_get::return#2 = keyboard_event_get::return#3 } }  ) always clobbers reg byte a 
Statement [388] (byte) keyboard_event_get::return#1 ← *((const byte*) keyboard_events + (byte) keyboard_events_size#4) [ keyboard_events_size#4 keyboard_event_get::return#1 ] ( main:11::keyboard_event_get:46 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#4 keyboard_event_get::return#1 ] { { keyboard_event_get::return#2 = keyboard_event_get::return#3 } }  ) always clobbers reg byte y 
Statement [397] if((byte) keyboard_event_scan::row_scan#0!=*((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 keyboard_event_scan::row_scan#0 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 keyboard_event_scan::row_scan#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [398] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 [ keyboard_event_scan::row#2 keyboard_events_size#30 keyboard_event_scan::keycode#1 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_events_size#30 keyboard_event_scan::keycode#1 ] { }  ) always clobbers reg byte a reg byte x 
Statement [401] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7 [ keyboard_events_size#13 keyboard_event_scan::row#1 keyboard_event_scan::keycode#13 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_events_size#13 keyboard_event_scan::row#1 keyboard_event_scan::keycode#13 ] { }  ) always clobbers reg byte a 
Statement [428] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$15 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$15 ] { }  ) always clobbers reg byte a 
Statement [429] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$16 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$16 ] { }  ) always clobbers reg byte a 
Statement [431] if((byte) keyboard_events_size#10==(byte) 8) goto keyboard_event_scan::@10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] { }  ) always clobbers reg byte a 
Statement [432] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] { }  ) always clobbers reg byte a 
Statement [434] *((const byte*) keyboard_events + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [440] *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#29 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#29 ] { }  ) always clobbers reg byte a reg byte y 
Statement [441] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$23 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$23 ] { }  ) always clobbers reg byte a 
Statement [442] *((const byte*) keyboard_events + (byte) keyboard_events_size#10) ← (byte~) keyboard_event_scan::$23 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:11::keyboard_event_scan:44 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] { }  ) always clobbers reg byte y 
Statement [444] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:11::keyboard_event_scan:44::keyboard_matrix_read:394 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 ] { { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [445] (byte) keyboard_matrix_read::return#0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B) [ keyboard_matrix_read::return#0 ] ( main:11::keyboard_event_scan:44::keyboard_matrix_read:394 [ score_bcd render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 level#10 level_bcd#11 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 keyboard_matrix_read::return#0 ] { { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [447] if((byte) render_screen_show#16==(byte) 0) goto render_show::toD0181 [ render_screen_show#16 level#10 ] ( main:11::render_show:42 [ score_bcd render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level_bcd#11 render_screen_show#16 level#10 ] { }  ) always clobbers reg byte a 
Statement [451] *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1 + (byte) level#10) [ render_screen_show#16 level#10 ] ( main:11::render_show:42 [ score_bcd render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level_bcd#11 render_screen_show#16 level#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [452] *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2 + (byte) level#10) [ render_screen_show#16 level#10 ] ( main:11::render_show:42 [ score_bcd render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level_bcd#11 render_screen_show#16 level#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [453] (volatile byte) render_screen_showing ← (byte) render_screen_show#16 [ render_screen_show#16 level#10 ] ( main:11::render_show:42 [ score_bcd render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 level_bcd#11 render_screen_show#16 level#10 ] { }  ) always clobbers reg byte a 
Statement [458] (byte~) play_init::$2 ← (byte) play_init::j#2 << (byte) 1 [ play_init::j#2 play_init::pli#2 play_init::idx#2 play_init::$2 ] ( main:11::play_init:23 [ score_bcd play_init::j#2 play_init::pli#2 play_init::idx#2 play_init::$2 ] { }  ) always clobbers reg byte a 
Statement [459] *((const byte**) playfield_lines + (byte~) play_init::$2) ← (byte*) play_init::pli#2 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ( main:11::play_init:23 [ score_bcd play_init::j#2 play_init::pli#2 play_init::idx#2 ] { }  ) always clobbers reg byte a 
Statement [460] *((const byte*) playfield_lines_idx + (byte) play_init::j#2) ← (byte) play_init::idx#2 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ( main:11::play_init:23 [ score_bcd play_init::j#2 play_init::pli#2 play_init::idx#2 ] { }  ) always clobbers reg byte a 
Statement [461] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const nomodify byte) PLAYFIELD_COLS [ play_init::j#2 play_init::idx#2 play_init::pli#1 ] ( main:11::play_init:23 [ score_bcd play_init::j#2 play_init::idx#2 play_init::pli#1 ] { }  ) always clobbers reg byte a 
Statement [462] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const nomodify byte) PLAYFIELD_COLS [ play_init::j#2 play_init::pli#1 play_init::idx#1 ] ( main:11::play_init:23 [ score_bcd play_init::j#2 play_init::pli#1 play_init::idx#1 ] { }  ) always clobbers reg byte a 
Statement [465] *((const byte*) playfield_lines_idx+(const nomodify byte) PLAYFIELD_LINES) ← (const nomodify byte) PLAYFIELD_COLS*(const nomodify byte) PLAYFIELD_LINES [ ] ( main:11::play_init:23 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [466] (byte) current_movedown_slow#1 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS) [ current_movedown_slow#1 ] ( main:11::play_init:23 [ score_bcd current_movedown_slow#1 ] { }  ) always clobbers reg byte a 
Statement [468] (byte~) play_init::$3 ← (byte) play_init::b#2 << (byte) 2 [ current_movedown_slow#1 play_init::b#2 play_init::$3 ] ( main:11::play_init:23 [ score_bcd current_movedown_slow#1 play_init::b#2 play_init::$3 ] { }  ) always clobbers reg byte a 
Statement [469] *((const dword*) score_add_bcd + (byte~) play_init::$3) ← *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_init::$3) [ current_movedown_slow#1 play_init::b#2 ] ( main:11::play_init:23 [ score_bcd current_movedown_slow#1 play_init::b#2 ] { }  ) always clobbers reg byte a 
Statement [474] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement asm { ldaCIA1_INTERRUPT  } always clobbers reg byte a 
Statement [476] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [477] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [478] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [479] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (byte) $7f [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [480] *((const nomodify byte*) RASTER) ← (const nomodify byte) IRQ_RASTER_FIRST [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [481] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [482] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq() [ ] ( main:11::sprites_irq_init:21 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [485] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $f [ ] ( main:11::sprites_init:19 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [486] *((const nomodify byte*) SPRITES_MC) ← (byte) 0 [ ] ( main:11::sprites_init:19 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [487] *((const nomodify byte*) SPRITES_EXPAND_Y) ← *((const nomodify byte*) SPRITES_MC) [ ] ( main:11::sprites_init:19 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [488] *((const nomodify byte*) SPRITES_EXPAND_X) ← *((const nomodify byte*) SPRITES_EXPAND_Y) [ ] ( main:11::sprites_init:19 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [490] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte) 1 [ sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] ( main:11::sprites_init:19 [ score_bcd sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] { }  ) always clobbers reg byte a 
Statement [491] *((const nomodify byte*) SPRITES_XPOS + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2 [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:11::sprites_init:19 [ score_bcd sprites_init::s#2 sprites_init::xpos#2 ] { }  ) always clobbers reg byte a 
Statement [492] *((const nomodify byte*) SPRITES_COLS + (byte) sprites_init::s#2) ← (const nomodify byte) BLACK [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:11::sprites_init:19 [ score_bcd sprites_init::s#2 sprites_init::xpos#2 ] { }  ) always clobbers reg byte a 
Statement [493] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte) $18 [ sprites_init::s#2 sprites_init::xpos#1 ] ( main:11::sprites_init:19 [ score_bcd sprites_init::s#2 sprites_init::xpos#1 ] { }  ) always clobbers reg byte a 
Statement [498] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [500] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [501] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_ECM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [502] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [503] *((const nomodify byte*) BGCOL1) ← (const nomodify byte) BLACK [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [504] *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1) [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [505] *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2) [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [506] *((const nomodify byte*) BGCOL4) ← (const nomodify byte) GREY [ ] ( main:11::render_init:17 [ score_bcd ] { }  ) always clobbers reg byte a 
Statement [511] (byte~) render_init::$5 ← (byte) render_init::i#2 << (byte) 1 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$5 ] ( main:11::render_init:17 [ score_bcd render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$5 ] { }  ) always clobbers reg byte a 
Statement [512] *((const byte**) screen_lines_1 + (byte~) render_init::$5) ← (byte*) render_init::li_1#2 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$5 ] ( main:11::render_init:17 [ score_bcd render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$5 ] { }  ) always clobbers reg byte a 
Statement [513] *((const byte**) screen_lines_2 + (byte~) render_init::$5) ← (byte*) render_init::li_2#2 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] ( main:11::render_init:17 [ score_bcd render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] { }  ) always clobbers reg byte a 
Statement [514] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte) $28 [ render_init::i#2 render_init::li_2#2 render_init::li_1#1 ] ( main:11::render_init:17 [ score_bcd render_init::i#2 render_init::li_2#2 render_init::li_1#1 ] { }  ) always clobbers reg byte a 
Statement [515] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte) $28 [ render_init::i#2 render_init::li_1#1 render_init::li_2#1 ] ( main:11::render_init:17 [ score_bcd render_init::i#2 render_init::li_1#1 render_init::li_2#1 ] { }  ) always clobbers reg byte a 
Statement [522] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE [ render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [524] *((byte*) render_screen_original::cols#4) ← (const nomodify byte) BLACK [ render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [529] *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2) [ render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] { }  ) always clobbers reg byte a reg byte y 
Statement [532] *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2) [ render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] { }  ) always clobbers reg byte a reg byte y 
Statement [538] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE [ render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] { }  ) always clobbers reg byte a reg byte y 
Statement [540] *((byte*) render_screen_original::cols#6) ← (const nomodify byte) BLACK [ render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] ( main:11::render_init:17::render_screen_original:507 [ score_bcd render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] { }  main:11::render_init:17::render_screen_original:509 [ score_bcd render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] { }  ) always clobbers reg byte a reg byte y 
Statement [555] if(*((const nomodify byte*) RASTER)<(volatile byte) sprites_irq::raster_sprite_gfx_modify) goto sprites_irq::@8 [ render_screen_showing irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::raster_sprite_gfx_modify ] (  [ render_screen_showing irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::raster_sprite_gfx_modify ] { }  ) always clobbers reg byte a 
Statement [557] if((volatile byte) render_screen_showing==(byte) 0) goto sprites_irq::@1 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::ptr#0 ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::ptr#0 ] { }  ) always clobbers reg byte a 
Statement [565] if((volatile byte) irq_cnt==(byte) 9) goto sprites_irq::@3 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt ] { }  ) always clobbers reg byte a 
Statement [566] if((volatile byte) irq_cnt==(byte) $a) goto sprites_irq::@4 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a 
Statement [567] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $14 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a reg byte x 
Statement [568] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15 [ irq_raster_next irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ptr ] { }  ) always clobbers reg byte a reg byte x 
Statement [569] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a reg byte x 
Statement [570] *((const nomodify byte*) RASTER) ← (volatile byte) irq_raster_next [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [571] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [572] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [573] (volatile byte) irq_cnt ← (byte) 0 [ irq_sprite_ypos irq_sprite_ptr ] (  [ irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a 
Statement [574] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a 
Statement [575] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15 [ irq_raster_next irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ptr ] { }  ) always clobbers reg byte a reg byte x 
Statement [576] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a reg byte x 
Statement [577] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $15 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a reg byte x 
Statement [578] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a 
Statement [580] (volatile byte) irq_sprite_ptr ← (const byte) sprites_irq::toSpritePtr1_return#0 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ render_screen_show#16 render_screen_show#13 ] : zp[1]:2 , 
Potential registers zp[1]:3 [ render_screen_render#18 render_screen_render#11 ] : zp[1]:3 , 
Potential registers zp[1]:4 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ] : zp[1]:4 , 
Potential registers zp[2]:5 [ render_score::screen#3 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ] : zp[2]:7 , 
Potential registers zp[2]:9 [ render_bcd::offset#6 ] : zp[2]:9 , 
Potential registers zp[1]:11 [ render_bcd::only_low#6 ] : zp[1]:11 , reg byte x , reg byte y , 
Potential registers zp[1]:12 [ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ] : zp[1]:12 , reg byte x , 
Potential registers zp[2]:13 [ render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ] : zp[2]:13 , 
Potential registers zp[1]:15 [ render_screen_render#15 render_screen_render#66 ] : zp[1]:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:16 [ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ] : zp[1]:16 , reg byte x , reg byte y , 
Potential registers zp[1]:17 [ render_next::l#7 render_next::l#1 ] : zp[1]:17 , reg byte x , 
Potential registers zp[2]:18 [ render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#8 render_next::next_piece_gfx#1 ] : zp[2]:18 , 
Potential registers zp[2]:20 [ render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#11 render_next::screen_next_area#4 render_next::screen_next_area#3 ] : zp[2]:20 , 
Potential registers zp[1]:22 [ render_next::c#2 render_next::c#1 ] : zp[1]:22 , reg byte x , 
Potential registers zp[1]:23 [ current_ypos#13 current_ypos#98 current_ypos#99 ] : zp[1]:23 , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ render_screen_render#33 render_screen_render#65 ] : zp[1]:24 , reg byte x , reg byte y , 
Potential registers zp[1]:25 [ current_xpos#59 current_xpos#119 current_xpos#120 ] : zp[1]:25 , reg byte x , reg byte y , 
Potential registers zp[2]:26 [ current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 ] : zp[2]:26 , 
Potential registers zp[1]:28 [ current_piece_char#68 current_piece_char#100 current_piece_char#101 ] : zp[1]:28 , reg byte x , reg byte y , 
Potential registers zp[1]:29 [ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ] : zp[1]:29 , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ render_moving::l#4 render_moving::l#1 ] : zp[1]:30 , reg byte x , reg byte y , 
Potential registers zp[1]:31 [ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ] : zp[1]:31 , reg byte x , reg byte y , 
Potential registers zp[1]:32 [ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ] : zp[1]:32 , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ render_moving::c#2 render_moving::c#1 ] : zp[1]:33 , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ render_screen_render#22 render_screen_render#64 ] : zp[1]:34 , reg byte x , 
Potential registers zp[1]:35 [ render_playfield::l#2 render_playfield::l#1 ] : zp[1]:35 , reg byte x , 
Potential registers zp[1]:36 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] : zp[1]:36 , reg byte x , 
Potential registers zp[2]:37 [ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ] : zp[2]:37 , 
Potential registers zp[1]:39 [ render_playfield::c#2 render_playfield::c#1 ] : zp[1]:39 , reg byte x , 
Potential registers zp[1]:40 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 ] : zp[1]:40 , reg byte x , reg byte y , 
Potential registers zp[1]:41 [ play_move_rotate::return#2 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:42 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] : zp[1]:42 , reg byte x , reg byte y , 
Potential registers zp[2]:43 [ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 ] : zp[2]:43 , 
Potential registers zp[1]:45 [ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ] : zp[1]:45 , reg byte x , reg byte y , 
Potential registers zp[1]:46 [ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ] : zp[1]:46 , reg byte x , reg byte y , 
Potential registers zp[1]:47 [ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ] : zp[1]:47 , reg byte x , reg byte y , 
Potential registers zp[1]:48 [ play_collision::l#6 play_collision::l#1 ] : zp[1]:48 , reg byte x , reg byte y , 
Potential registers zp[1]:49 [ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ] : zp[1]:49 , reg byte x , reg byte y , 
Potential registers zp[1]:50 [ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ] : zp[1]:50 , reg byte x , reg byte y , 
Potential registers zp[1]:51 [ play_collision::c#2 play_collision::c#1 ] : zp[1]:51 , reg byte x , reg byte y , 
Potential registers zp[1]:52 [ play_collision::return#15 ] : zp[1]:52 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:53 [ play_move_leftright::return#2 ] : zp[1]:53 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:54 [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ] : zp[1]:54 , reg byte x , reg byte y , 
Potential registers zp[1]:55 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#6 current_ypos#19 ] : zp[1]:55 , 
Potential registers zp[2]:56 [ lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ] : zp[2]:56 , 
Potential registers zp[1]:58 [ level#33 level#10 level#17 level#19 level#21 ] : zp[1]:58 , 
Potential registers zp[1]:59 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#1 current_movedown_slow#21 current_movedown_slow#23 current_movedown_slow#65 current_movedown_slow#10 ] : zp[1]:59 , 
Potential registers zp[1]:60 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ] : zp[1]:60 , 
Potential registers zp[2]:61 [ current_piece#28 current_piece#10 current_piece#101 current_piece#15 current_piece#93 ] : zp[2]:61 , 
Potential registers zp[1]:63 [ current_piece_char#29 current_piece_char#10 current_piece_char#5 current_piece_char#16 ] : zp[1]:63 , 
Potential registers zp[1]:64 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ] : zp[1]:64 , 
Potential registers zp[2]:65 [ current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#123 current_piece_gfx#18 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#117 ] : zp[2]:65 , 
Potential registers zp[1]:67 [ current_xpos#43 current_xpos#14 current_xpos#100 current_xpos#19 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ] : zp[1]:67 , 
Potential registers zp[1]:68 [ play_move_down::return#3 ] : zp[1]:68 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:69 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 play_spawn_current::piece_idx#2 next_piece_idx#16 play_spawn_current::piece_idx#1 ] : zp[1]:69 , 
Potential registers zp[1]:70 [ game_over#65 game_over#27 game_over#10 game_over#52 game_over#15 ] : zp[1]:70 , 
Potential registers zp[1]:71 [ play_increase_level::b#2 play_increase_level::b#1 ] : zp[1]:71 , reg byte x , reg byte y , 
Potential registers zp[1]:72 [ play_remove_lines::y#8 play_remove_lines::y#1 ] : zp[1]:72 , reg byte x , reg byte y , 
Potential registers zp[1]:73 [ play_remove_lines::removed#11 play_remove_lines::removed#7 play_remove_lines::removed#1 ] : zp[1]:73 , reg byte x , reg byte y , 
Potential registers zp[1]:74 [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ] : zp[1]:74 , reg byte x , reg byte y , 
Potential registers zp[1]:75 [ play_remove_lines::x#2 play_remove_lines::x#1 ] : zp[1]:75 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:76 [ play_remove_lines::full#4 play_remove_lines::full#2 ] : zp[1]:76 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:77 [ play_remove_lines::w#6 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 play_remove_lines::w#3 ] : zp[1]:77 , reg byte x , reg byte y , 
Potential registers zp[1]:78 [ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ] : zp[1]:78 , reg byte x , reg byte y , 
Potential registers zp[1]:79 [ play_lock_current::l#6 play_lock_current::l#1 ] : zp[1]:79 , reg byte x , reg byte y , 
Potential registers zp[1]:80 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ] : zp[1]:80 , reg byte x , reg byte y , 
Potential registers zp[1]:81 [ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ] : zp[1]:81 , reg byte x , reg byte y , 
Potential registers zp[1]:82 [ play_lock_current::c#2 play_lock_current::c#1 ] : zp[1]:82 , reg byte x , reg byte y , 
Potential registers zp[1]:83 [ keyboard_event_pressed::keycode#5 ] : zp[1]:83 , reg byte x , reg byte y , 
Potential registers zp[1]:84 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] : zp[1]:84 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:85 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] : zp[1]:85 , 
Potential registers zp[1]:86 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] : zp[1]:86 , reg byte x , 
Potential registers zp[1]:87 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] : zp[1]:87 , reg byte x , 
Potential registers zp[1]:88 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ] : zp[1]:88 , 
Potential registers zp[1]:89 [ render_show::d018val#3 ] : zp[1]:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:90 [ play_init::j#2 play_init::j#1 ] : zp[1]:90 , reg byte x , reg byte y , 
Potential registers zp[2]:91 [ play_init::pli#2 play_init::pli#1 ] : zp[2]:91 , 
Potential registers zp[1]:93 [ play_init::idx#2 play_init::idx#1 ] : zp[1]:93 , reg byte x , reg byte y , 
Potential registers zp[1]:94 [ play_init::b#2 play_init::b#1 ] : zp[1]:94 , reg byte x , reg byte y , 
Potential registers zp[1]:95 [ sprites_init::s#2 sprites_init::s#1 ] : zp[1]:95 , reg byte x , reg byte y , 
Potential registers zp[1]:96 [ sprites_init::xpos#2 sprites_init::xpos#1 ] : zp[1]:96 , reg byte x , reg byte y , 
Potential registers zp[1]:97 [ render_init::i#2 render_init::i#1 ] : zp[1]:97 , reg byte x , reg byte y , 
Potential registers zp[2]:98 [ render_init::li_1#2 render_init::li_1#1 ] : zp[2]:98 , 
Potential registers zp[2]:100 [ render_init::li_2#2 render_init::li_2#1 ] : zp[2]:100 , 
Potential registers zp[1]:102 [ render_screen_original::y#6 render_screen_original::y#1 ] : zp[1]:102 , reg byte x , 
Potential registers zp[2]:103 [ render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 ] : zp[2]:103 , 
Potential registers zp[2]:105 [ render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ] : zp[2]:105 , 
Potential registers zp[2]:107 [ render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ] : zp[2]:107 , 
Potential registers zp[2]:109 [ render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 ] : zp[2]:109 , 
Potential registers zp[1]:111 [ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ] : zp[1]:111 , reg byte x , 
Potential registers zp[1]:112 [ render_screen_showing ] : zp[1]:112 , 
Potential registers zp[4]:113 [ score_bcd ] : zp[4]:113 , 
Potential registers zp[1]:117 [ irq_raster_next ] : zp[1]:117 , 
Potential registers zp[1]:118 [ irq_sprite_ypos ] : zp[1]:118 , 
Potential registers zp[1]:119 [ irq_sprite_ptr ] : zp[1]:119 , 
Potential registers zp[1]:120 [ irq_cnt ] : zp[1]:120 , 
Potential registers zp[1]:121 [ keyboard_event_get::return#3 ] : zp[1]:121 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:122 [ main::key_event#0 ] : zp[1]:122 , reg byte x , reg byte y , 
Potential registers zp[1]:123 [ play_movement::key_event#0 ] : zp[1]:123 , 
Potential registers zp[1]:124 [ play_movement::return#3 ] : zp[1]:124 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:125 [ main::render#1 ] : zp[1]:125 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:126 [ render_bcd::$5 ] : zp[1]:126 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:127 [ render_bcd::$6 ] : zp[1]:127 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:128 [ render_bcd::$3 ] : zp[1]:128 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:129 [ render_bcd::$4 ] : zp[1]:129 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:130 [ render_next::$6 ] : zp[1]:130 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:131 [ render_next::next_piece_char#0 ] : zp[1]:131 , reg byte x , 
Potential registers zp[1]:132 [ render_next::cell#0 ] : zp[1]:132 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:133 [ render_moving::$1 ] : zp[1]:133 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:134 [ render_moving::$6 ] : zp[1]:134 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:135 [ render_moving::screen_line#0 ] : zp[2]:135 , 
Potential registers zp[1]:137 [ render_moving::current_cell#0 ] : zp[1]:137 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:138 [ render_playfield::$0 ] : zp[1]:138 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:139 [ render_playfield::$3 ] : zp[1]:139 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:140 [ play_move_down::key_event#0 ] : zp[1]:140 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:141 [ play_move_down::return#0 ] : zp[1]:141 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:142 [ play_move_leftright::key_event#0 ] : zp[1]:142 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:143 [ play_move_leftright::return#0 ] : zp[1]:143 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:144 [ play_movement::$3 ] : zp[1]:144 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:145 [ play_movement::render#2 ] : zp[1]:145 , reg byte x , reg byte y , 
Potential registers zp[1]:146 [ play_move_rotate::key_event#0 ] : zp[1]:146 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:147 [ play_move_rotate::return#0 ] : zp[1]:147 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:148 [ play_movement::$4 ] : zp[1]:148 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:149 [ play_move_rotate::$5 ] : zp[1]:149 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:150 [ play_collision::return#14 ] : zp[1]:150 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:151 [ play_move_rotate::$2 ] : zp[1]:151 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:152 [ play_move_rotate::$7 ] : zp[1]:152 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:153 [ play_collision::piece_gfx#0 ] : zp[2]:153 , 
Potential registers zp[1]:155 [ play_collision::$14 ] : zp[1]:155 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:156 [ play_collision::playfield_line#0 ] : zp[2]:156 , 
Potential registers zp[1]:158 [ play_collision::i#1 ] : zp[1]:158 , reg byte x , reg byte y , 
Potential registers zp[1]:159 [ play_collision::$5 ] : zp[1]:159 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:160 [ play_collision::return#13 ] : zp[1]:160 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:161 [ play_move_leftright::$4 ] : zp[1]:161 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:162 [ play_collision::return#1 ] : zp[1]:162 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:163 [ play_move_leftright::$8 ] : zp[1]:163 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:164 [ keyboard_event_pressed::return#12 ] : zp[1]:164 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:165 [ play_move_down::$2 ] : zp[1]:165 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:166 [ play_collision::return#0 ] : zp[1]:166 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:167 [ play_move_down::$12 ] : zp[1]:167 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:168 [ play_remove_lines::return#0 ] : zp[1]:168 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:169 [ play_move_down::removed#0 ] : zp[1]:169 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:170 [ play_update_score::removed#0 ] : zp[1]:170 , reg byte x , reg byte y , 
Potential registers zp[1]:171 [ play_spawn_current::current_piece_idx#0 ] : zp[1]:171 , reg byte x , reg byte y , 
Potential registers zp[1]:172 [ play_spawn_current::$7 ] : zp[1]:172 , reg byte x , 
Potential registers zp[1]:173 [ play_collision::return#10 ] : zp[1]:173 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:174 [ play_spawn_current::$1 ] : zp[1]:174 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:175 [ play_spawn_current::sid_rnd1_return#0 ] : zp[1]:175 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:176 [ play_update_score::$2 ] : zp[1]:176 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:177 [ play_update_score::lines_before#0 ] : zp[1]:177 , reg byte x , reg byte y , 
Potential registers zp[1]:178 [ play_update_score::$9 ] : zp[1]:178 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:179 [ play_update_score::add_bcd#0 ] : zp[4]:179 , 
Potential registers zp[1]:183 [ play_update_score::$4 ] : zp[1]:183 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:184 [ play_update_score::lines_after#0 ] : zp[1]:184 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:185 [ play_increase_level::$1 ] : zp[1]:185 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:186 [ play_increase_level::$5 ] : zp[1]:186 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:187 [ play_remove_lines::c#0 ] : zp[1]:187 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:188 [ play_lock_current::$4 ] : zp[1]:188 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:189 [ play_lock_current::playfield_line#0 ] : zp[2]:189 , 
Potential registers zp[1]:191 [ play_lock_current::i#1 ] : zp[1]:191 , reg byte x , reg byte y , 
Potential registers zp[1]:192 [ keyboard_event_pressed::$0 ] : zp[1]:192 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:193 [ keyboard_event_pressed::row_bits#0 ] : zp[1]:193 , reg byte x , reg byte y , 
Potential registers zp[1]:194 [ keyboard_event_pressed::$1 ] : zp[1]:194 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:195 [ keyboard_event_pressed::return#11 ] : zp[1]:195 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:196 [ keyboard_matrix_read::rowid#0 ] : zp[1]:196 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:197 [ keyboard_matrix_read::return#2 ] : zp[1]:197 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:198 [ keyboard_event_scan::row_scan#0 ] : zp[1]:198 , reg byte x , 
Potential registers zp[1]:199 [ keyboard_event_pressed::return#0 ] : zp[1]:199 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:200 [ keyboard_event_scan::$0 ] : zp[1]:200 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:201 [ keyboard_event_pressed::return#1 ] : zp[1]:201 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:202 [ keyboard_event_scan::$3 ] : zp[1]:202 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:203 [ keyboard_event_pressed::return#2 ] : zp[1]:203 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:204 [ keyboard_event_scan::$6 ] : zp[1]:204 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:205 [ keyboard_event_pressed::return#10 ] : zp[1]:205 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:206 [ keyboard_event_scan::$9 ] : zp[1]:206 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:207 [ keyboard_event_scan::$15 ] : zp[1]:207 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:208 [ keyboard_event_scan::$16 ] : zp[1]:208 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:209 [ keyboard_event_scan::event_type#0 ] : zp[1]:209 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:210 [ keyboard_event_scan::$23 ] : zp[1]:210 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:211 [ keyboard_matrix_read::return#0 ] : zp[1]:211 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:212 [ play_init::$2 ] : zp[1]:212 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:213 [ play_init::$3 ] : zp[1]:213 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:214 [ sprites_init::s2#0 ] : zp[1]:214 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:215 [ render_init::$5 ] : zp[1]:215 , reg byte x , reg byte y , 
Potential registers zp[1]:216 [ sprites_irq::ypos#0 ] : zp[1]:216 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:217 [ sprites_irq::$0 ] : zp[1]:217 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:218 [ sprites_irq::raster_sprite_gfx_modify ] : zp[1]:218 , 
Potential registers zp[1]:219 [ sprites_irq::ptr#0 ] : zp[1]:219 , reg byte x , reg byte y , 
Potential registers zp[1]:220 [ sprites_irq::ptr#3 ] : zp[1]:220 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:221 [ sprites_irq::ptr#4 ] : zp[1]:221 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:222 [ sprites_irq::ptr#1 ] : zp[1]:222 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:223 [ sprites_irq::ptr#2 ] : zp[1]:223 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [play_collision] 380,000,000,006.5: zp[1]:49 [ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ] 200,000,000,002: zp[1]:159 [ play_collision::$5 ] 133,750,000,003.25: zp[1]:50 [ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ] 122,222,222,223.44: zp[1]:51 [ play_collision::c#2 play_collision::c#1 ] 20,000,000,002: zp[1]:155 [ play_collision::$14 ] 16,153,846,154.08: zp[1]:158 [ play_collision::i#1 ] 13,132,575,007.31: zp[1]:47 [ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ] 11,176,470,589.35: zp[1]:48 [ play_collision::l#6 play_collision::l#1 ] 7,857,142,857.29: zp[2]:156 [ play_collision::playfield_line#0 ] 4,762,380,952.48: zp[2]:153 [ play_collision::piece_gfx#0 ] 455,492,427.35: zp[1]:46 [ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ] 10,800,009: zp[1]:45 [ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ] 2,000,002: zp[1]:173 [ play_collision::return#10 ] 200,002: zp[1]:150 [ play_collision::return#14 ] 200,002: zp[1]:160 [ play_collision::return#13 ] 200,002: zp[1]:162 [ play_collision::return#1 ] 200,002: zp[1]:166 [ play_collision::return#0 ] 200,000.71: zp[1]:52 [ play_collision::return#15 ] 
Uplift Scope [play_lock_current] 38,000,000,006.5: zp[1]:80 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ] 14,750,000,003.5: zp[1]:81 [ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ] 14,000,000,001.4: zp[1]:82 [ play_lock_current::c#2 play_lock_current::c#1 ] 2,333,333,333.67: zp[1]:191 [ play_lock_current::i#1 ] 2,000,000,002: zp[1]:188 [ play_lock_current::$4 ] 1,153,846,155: zp[1]:79 [ play_lock_current::l#6 play_lock_current::l#1 ] 1,100,000,000.2: zp[2]:189 [ play_lock_current::playfield_line#0 ] 752,083,336.17: zp[1]:78 [ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ] 
Uplift Scope [play_remove_lines] 19,000,000,004.21: zp[1]:74 [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ] 17,928,571,438.14: zp[1]:77 [ play_remove_lines::w#6 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 play_remove_lines::w#3 ] 17,500,000,001.75: zp[1]:75 [ play_remove_lines::x#2 play_remove_lines::x#1 ] 8,200,000,001: zp[1]:76 [ play_remove_lines::full#4 play_remove_lines::full#2 ] 6,000,000,000.6: zp[1]:187 [ play_remove_lines::c#0 ] 2,564,113,677.89: zp[1]:73 [ play_remove_lines::removed#11 play_remove_lines::removed#7 play_remove_lines::removed#1 ] 1,633,333,334.97: zp[1]:72 [ play_remove_lines::y#8 play_remove_lines::y#1 ] 200,002: zp[1]:168 [ play_remove_lines::return#0 ] 
Uplift Scope [play_increase_level] 40,000,000,004: zp[1]:186 [ play_increase_level::$5 ] 25,000,000,002.5: zp[1]:71 [ play_increase_level::b#2 play_increase_level::b#1 ] 20,000,002: zp[1]:185 [ play_increase_level::$1 ] 
Uplift Scope [] 2,101,417,003.77: zp[1]:69 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 play_spawn_current::piece_idx#2 next_piece_idx#16 play_spawn_current::piece_idx#1 ] 588,273,523.09: zp[1]:88 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ] 182,589,729.94: zp[2]:65 [ current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#123 current_piece_gfx#18 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#117 ] 182,161,655.2: zp[1]:63 [ current_piece_char#29 current_piece_char#10 current_piece_char#5 current_piece_char#16 ] 36,379,641.34: zp[1]:60 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ] 21,522,727.69: zp[1]:59 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#1 current_movedown_slow#21 current_movedown_slow#23 current_movedown_slow#65 current_movedown_slow#10 ] 19,012,786.51: zp[1]:67 [ current_xpos#43 current_xpos#14 current_xpos#100 current_xpos#19 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ] 14,200,016: zp[2]:43 [ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 ] 2,655,686.72: zp[1]:58 [ level#33 level#10 level#17 level#19 level#21 ] 1,310,325.83: zp[2]:56 [ lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ] 611,596.9: zp[1]:55 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#6 current_ypos#19 ] 438,675.79: zp[1]:70 [ game_over#65 game_over#27 game_over#10 game_over#52 game_over#15 ] 427,344.55: zp[1]:64 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ] 415,859.78: zp[2]:61 [ current_piece#28 current_piece#10 current_piece#101 current_piece#15 current_piece#93 ] 47,848.43: zp[1]:28 [ current_piece_char#68 current_piece_char#100 current_piece_char#101 ] 47,736.43: zp[2]:26 [ current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 ] 37,176.6: zp[1]:4 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ] 14,492.78: zp[4]:113 [ score_bcd ] 7,902.15: zp[1]:34 [ render_screen_render#22 render_screen_render#64 ] 4,841.95: zp[1]:25 [ current_xpos#59 current_xpos#119 current_xpos#120 ] 4,817.26: zp[1]:24 [ render_screen_render#33 render_screen_render#65 ] 1,203: zp[1]:15 [ render_screen_render#15 render_screen_render#66 ] 1,158.9: zp[1]:23 [ current_ypos#13 current_ypos#98 current_ypos#99 ] 1,000.5: zp[1]:112 [ render_screen_showing ] 944.98: zp[1]:2 [ render_screen_show#16 render_screen_show#13 ] 646.8: zp[1]:16 [ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ] 360.27: zp[1]:3 [ render_screen_render#18 render_screen_render#11 ] 0.48: zp[1]:118 [ irq_sprite_ypos ] 0.48: zp[1]:120 [ irq_cnt ] 0.45: zp[1]:119 [ irq_sprite_ptr ] 0.44: zp[1]:117 [ irq_raster_next ] 
Uplift Scope [play_spawn_current] 2,000,000,002: zp[1]:175 [ play_spawn_current::sid_rnd1_return#0 ] 2,000,002: zp[1]:174 [ play_spawn_current::$1 ] 1,250,001.25: zp[1]:171 [ play_spawn_current::current_piece_idx#0 ] 32,258.1: zp[1]:172 [ play_spawn_current::$7 ] 
Uplift Scope [keyboard_event_scan] 200,000,002: zp[1]:207 [ keyboard_event_scan::$15 ] 200,000,002: zp[1]:208 [ keyboard_event_scan::$16 ] 200,000,002: zp[1]:209 [ keyboard_event_scan::event_type#0 ] 200,000,002: zp[1]:210 [ keyboard_event_scan::$23 ] 178,571,430.36: zp[1]:86 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] 119,038,466.17: zp[1]:87 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] 21,000,001.74: zp[1]:85 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] 12,777,778.06: zp[1]:198 [ keyboard_event_scan::row_scan#0 ] 20,002: zp[1]:200 [ keyboard_event_scan::$0 ] 20,002: zp[1]:202 [ keyboard_event_scan::$3 ] 20,002: zp[1]:204 [ keyboard_event_scan::$6 ] 20,002: zp[1]:206 [ keyboard_event_scan::$9 ] 
Uplift Scope [keyboard_matrix_read] 110,000,002: zp[1]:196 [ keyboard_matrix_read::rowid#0 ] 36,666,667.33: zp[1]:211 [ keyboard_matrix_read::return#0 ] 20,000,002: zp[1]:197 [ keyboard_matrix_read::return#2 ] 
Uplift Scope [play_update_score] 2,000,002: zp[1]:176 [ play_update_score::$2 ] 2,000,002: zp[1]:178 [ play_update_score::$9 ] 2,000,002: zp[1]:183 [ play_update_score::$4 ] 2,000,002: zp[1]:184 [ play_update_score::lines_after#0 ] 666,667.33: zp[4]:179 [ play_update_score::add_bcd#0 ] 442,857.71: zp[1]:170 [ play_update_score::removed#0 ] 222,222.44: zp[1]:177 [ play_update_score::lines_before#0 ] 
Uplift Scope [render_moving] 2,600,005.75: zp[1]:31 [ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ] 1,833,335.17: zp[1]:33 [ render_moving::c#2 render_moving::c#1 ] 1,486,670.13: zp[1]:32 [ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ] 1,000,001: zp[1]:137 [ render_moving::current_cell#0 ] 200,002: zp[1]:133 [ render_moving::$1 ] 200,002: zp[1]:134 [ render_moving::$6 ] 161,766.32: zp[1]:30 [ render_moving::l#4 render_moving::l#1 ] 110,000.2: zp[2]:135 [ render_moving::screen_line#0 ] 93,732.15: zp[1]:29 [ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ] 
Uplift Scope [render_next] 1,963,007.3: zp[2]:18 [ render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#8 render_next::next_piece_gfx#1 ] 1,785,716.07: zp[1]:22 [ render_next::c#2 render_next::c#1 ] 1,651,255.75: zp[2]:20 [ render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#11 render_next::screen_next_area#4 render_next::screen_next_area#3 ] 1,000,001: zp[1]:132 [ render_next::cell#0 ] 168,183.5: zp[1]:17 [ render_next::l#7 render_next::l#1 ] 66,733.47: zp[1]:131 [ render_next::next_piece_char#0 ] 500.5: zp[1]:130 [ render_next::$6 ] 
Uplift Scope [render_playfield] 2,250,004.5: zp[2]:37 [ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ] 2,000,002: zp[1]:39 [ render_playfield::c#2 render_playfield::c#1 ] 1,503,335.77: zp[1]:36 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] 200,002: zp[1]:138 [ render_playfield::$0 ] 200,002: zp[1]:139 [ render_playfield::$3 ] 180,001.8: zp[1]:35 [ render_playfield::l#2 render_playfield::l#1 ] 
Uplift Scope [keyboard_event_pressed] 2,000,002: zp[1]:192 [ keyboard_event_pressed::$0 ] 2,000,002: zp[1]:194 [ keyboard_event_pressed::$1 ] 1,000,001: zp[1]:193 [ keyboard_event_pressed::row_bits#0 ] 666,667.33: zp[1]:83 [ keyboard_event_pressed::keycode#5 ] 200,002: zp[1]:164 [ keyboard_event_pressed::return#12 ] 162,858: zp[1]:195 [ keyboard_event_pressed::return#11 ] 20,002: zp[1]:199 [ keyboard_event_pressed::return#0 ] 20,002: zp[1]:201 [ keyboard_event_pressed::return#1 ] 20,002: zp[1]:203 [ keyboard_event_pressed::return#2 ] 20,002: zp[1]:205 [ keyboard_event_pressed::return#10 ] 
Uplift Scope [render_screen_original] 709,868.6: zp[2]:107 [ render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ] 692,864.07: zp[1]:111 [ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ] 494,507.15: zp[2]:109 [ render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 ] 161,085.12: zp[2]:103 [ render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 ] 97,917.83: zp[2]:105 [ render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ] 15,834.92: zp[1]:102 [ render_screen_original::y#6 render_screen_original::y#1 ] 
Uplift Scope [play_move_down] 1,000,010: zp[1]:54 [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ] 200,002: zp[1]:165 [ play_move_down::$2 ] 200,002: zp[1]:167 [ play_move_down::$12 ] 200,002: zp[1]:169 [ play_move_down::removed#0 ] 55,001: zp[1]:140 [ play_move_down::key_event#0 ] 20,002: zp[1]:141 [ play_move_down::return#0 ] 3,333.67: zp[1]:68 [ play_move_down::return#3 ] 
Uplift Scope [play_move_rotate] 444,448.89: zp[1]:42 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] 200,002: zp[1]:149 [ play_move_rotate::$5 ] 200,002: zp[1]:151 [ play_move_rotate::$2 ] 200,002: zp[1]:152 [ play_move_rotate::$7 ] 105,001.5: zp[1]:146 [ play_move_rotate::key_event#0 ] 20,002: zp[1]:147 [ play_move_rotate::return#0 ] 3,333.67: zp[1]:41 [ play_move_rotate::return#2 ] 
Uplift Scope [play_move_leftright] 200,002: zp[1]:161 [ play_move_leftright::$4 ] 200,002: zp[1]:163 [ play_move_leftright::$8 ] 105,001.5: zp[1]:142 [ play_move_leftright::key_event#0 ] 20,002: zp[1]:143 [ play_move_leftright::return#0 ] 3,333.67: zp[1]:53 [ play_move_leftright::return#2 ] 
Uplift Scope [render_bcd] 38,003.8: zp[2]:13 [ render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ] 24,015: zp[2]:7 [ render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ] 20,002: zp[1]:126 [ render_bcd::$5 ] 20,002: zp[1]:127 [ render_bcd::$6 ] 20,002: zp[1]:128 [ render_bcd::$3 ] 20,002: zp[1]:129 [ render_bcd::$4 ] 13,261: zp[1]:12 [ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ] 10,001: zp[2]:9 [ render_bcd::offset#6 ] 5,000.5: zp[1]:11 [ render_bcd::only_low#6 ] 
Uplift Scope [play_movement] 32,003.5: zp[1]:40 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 ] 20,002: zp[1]:144 [ play_movement::$3 ] 20,002: zp[1]:148 [ play_movement::$4 ] 4,000.4: zp[1]:145 [ play_movement::render#2 ] 2,818.55: zp[1]:123 [ play_movement::key_event#0 ] 2,002: zp[1]:124 [ play_movement::return#3 ] 
Uplift Scope [keyboard_event_get] 23,669.33: zp[1]:84 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] 2,002: zp[1]:121 [ keyboard_event_get::return#3 ] 
Uplift Scope [play_init] 3,003: zp[1]:213 [ play_init::$3 ] 2,502.5: zp[1]:94 [ play_init::b#2 play_init::b#1 ] 2,168.83: zp[1]:90 [ play_init::j#2 play_init::j#1 ] 2,002: zp[1]:212 [ play_init::$2 ] 1,267.93: zp[1]:93 [ play_init::idx#2 play_init::idx#1 ] 1,251.25: zp[2]:91 [ play_init::pli#2 play_init::pli#1 ] 
Uplift Scope [render_show] 10,001: zp[1]:89 [ render_show::d018val#3 ] 
Uplift Scope [render_init] 2,002: zp[1]:97 [ render_init::i#2 render_init::i#1 ] 1,501.5: zp[1]:215 [ render_init::$5 ] 1,267.93: zp[2]:100 [ render_init::li_2#2 render_init::li_2#1 ] 1,251.25: zp[2]:98 [ render_init::li_1#2 render_init::li_1#1 ] 
Uplift Scope [sprites_init] 2,302.3: zp[1]:95 [ sprites_init::s#2 sprites_init::s#1 ] 2,002: zp[1]:214 [ sprites_init::s2#0 ] 1,418.08: zp[1]:96 [ sprites_init::xpos#2 sprites_init::xpos#1 ] 
Uplift Scope [main] 2,002: zp[1]:125 [ main::render#1 ] 1,001: zp[1]:122 [ main::key_event#0 ] 
Uplift Scope [render_score] 375.38: zp[2]:5 [ render_score::screen#3 ] 
Uplift Scope [sprites_irq] 6.5: zp[1]:218 [ sprites_irq::raster_sprite_gfx_modify ] 4: zp[1]:217 [ sprites_irq::$0 ] 4: zp[1]:221 [ sprites_irq::ptr#4 ] 4: zp[1]:223 [ sprites_irq::ptr#2 ] 2.67: zp[1]:220 [ sprites_irq::ptr#3 ] 2.67: zp[1]:222 [ sprites_irq::ptr#1 ] 2.5: zp[1]:216 [ sprites_irq::ypos#0 ] 2.5: zp[1]:219 [ sprites_irq::ptr#0 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [render_screen_swap] 
Uplift Scope [sprites_irq_init] 

Uplifting [play_collision] best 4793752 combination zp[1]:49 [ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ] reg byte a [ play_collision::$5 ] zp[1]:50 [ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ] reg byte x [ play_collision::c#2 play_collision::c#1 ] zp[1]:155 [ play_collision::$14 ] zp[1]:158 [ play_collision::i#1 ] zp[1]:47 [ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ] zp[1]:48 [ play_collision::l#6 play_collision::l#1 ] zp[2]:156 [ play_collision::playfield_line#0 ] zp[2]:153 [ play_collision::piece_gfx#0 ] zp[1]:46 [ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ] zp[1]:45 [ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ] zp[1]:173 [ play_collision::return#10 ] zp[1]:150 [ play_collision::return#14 ] zp[1]:160 [ play_collision::return#13 ] zp[1]:162 [ play_collision::return#1 ] zp[1]:166 [ play_collision::return#0 ] zp[1]:52 [ play_collision::return#15 ] 
Limited combination testing to 100 combinations of 429981696 possible.
Uplifting [play_lock_current] best 4699752 combination zp[1]:80 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ] zp[1]:81 [ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ] reg byte x [ play_lock_current::c#2 play_lock_current::c#1 ] zp[1]:191 [ play_lock_current::i#1 ] reg byte a [ play_lock_current::$4 ] zp[1]:79 [ play_lock_current::l#6 play_lock_current::l#1 ] zp[2]:189 [ play_lock_current::playfield_line#0 ] zp[1]:78 [ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ] 
Limited combination testing to 100 combinations of 2916 possible.
Uplifting [play_remove_lines] best 4560752 combination reg byte y [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ] reg byte x [ play_remove_lines::w#6 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 play_remove_lines::w#3 ] zp[1]:75 [ play_remove_lines::x#2 play_remove_lines::x#1 ] zp[1]:76 [ play_remove_lines::full#4 play_remove_lines::full#2 ] zp[1]:187 [ play_remove_lines::c#0 ] zp[1]:73 [ play_remove_lines::removed#11 play_remove_lines::removed#7 play_remove_lines::removed#1 ] zp[1]:72 [ play_remove_lines::y#8 play_remove_lines::y#1 ] zp[1]:168 [ play_remove_lines::return#0 ] 
Limited combination testing to 100 combinations of 20736 possible.
Uplifting [play_increase_level] best 4546746 combination reg byte a [ play_increase_level::$5 ] reg byte x [ play_increase_level::b#2 play_increase_level::b#1 ] reg byte a [ play_increase_level::$1 ] 
Uplifting [] best 4546613 combination zp[1]:69 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 play_spawn_current::piece_idx#2 next_piece_idx#16 play_spawn_current::piece_idx#1 ] zp[1]:88 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ] zp[2]:65 [ current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#123 current_piece_gfx#18 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#117 ] zp[1]:63 [ current_piece_char#29 current_piece_char#10 current_piece_char#5 current_piece_char#16 ] zp[1]:60 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ] zp[1]:59 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#1 current_movedown_slow#21 current_movedown_slow#23 current_movedown_slow#65 current_movedown_slow#10 ] zp[1]:67 [ current_xpos#43 current_xpos#14 current_xpos#100 current_xpos#19 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ] zp[2]:43 [ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 ] zp[1]:58 [ level#33 level#10 level#17 level#19 level#21 ] zp[2]:56 [ lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ] zp[1]:55 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#6 current_ypos#19 ] zp[1]:70 [ game_over#65 game_over#27 game_over#10 game_over#52 game_over#15 ] zp[1]:64 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ] zp[2]:61 [ current_piece#28 current_piece#10 current_piece#101 current_piece#15 current_piece#93 ] zp[1]:28 [ current_piece_char#68 current_piece_char#100 current_piece_char#101 ] zp[2]:26 [ current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 ] zp[1]:4 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ] zp[4]:113 [ score_bcd ] reg byte x [ render_screen_render#22 render_screen_render#64 ] zp[1]:25 [ current_xpos#59 current_xpos#119 current_xpos#120 ] zp[1]:24 [ render_screen_render#33 render_screen_render#65 ] zp[1]:15 [ render_screen_render#15 render_screen_render#66 ] zp[1]:23 [ current_ypos#13 current_ypos#98 current_ypos#99 ] zp[1]:112 [ render_screen_showing ] zp[1]:2 [ render_screen_show#16 render_screen_show#13 ] zp[1]:16 [ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ] zp[1]:3 [ render_screen_render#18 render_screen_render#11 ] zp[1]:118 [ irq_sprite_ypos ] zp[1]:120 [ irq_cnt ] zp[1]:119 [ irq_sprite_ptr ] zp[1]:117 [ irq_raster_next ] 
Limited combination testing to 100 combinations of 1944 possible.
Uplifting [play_spawn_current] best 4540594 combination reg byte a [ play_spawn_current::sid_rnd1_return#0 ] reg byte a [ play_spawn_current::$1 ] reg byte x [ play_spawn_current::current_piece_idx#0 ] zp[1]:172 [ play_spawn_current::$7 ] 
Uplifting [keyboard_event_scan] best 4300594 combination reg byte a [ keyboard_event_scan::$15 ] reg byte a [ keyboard_event_scan::$16 ] reg byte a [ keyboard_event_scan::event_type#0 ] reg byte a [ keyboard_event_scan::$23 ] zp[1]:86 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] zp[1]:87 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] zp[1]:85 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] zp[1]:198 [ keyboard_event_scan::row_scan#0 ] zp[1]:200 [ keyboard_event_scan::$0 ] zp[1]:202 [ keyboard_event_scan::$3 ] zp[1]:204 [ keyboard_event_scan::$6 ] zp[1]:206 [ keyboard_event_scan::$9 ] 
Limited combination testing to 100 combinations of 524288 possible.
Uplifting [keyboard_matrix_read] best 4288588 combination reg byte x [ keyboard_matrix_read::rowid#0 ] reg byte a [ keyboard_matrix_read::return#0 ] reg byte a [ keyboard_matrix_read::return#2 ] 
Uplifting [play_update_score] best 4288566 combination reg byte a [ play_update_score::$2 ] reg byte a [ play_update_score::$9 ] reg byte a [ play_update_score::$4 ] reg byte a [ play_update_score::lines_after#0 ] zp[4]:179 [ play_update_score::add_bcd#0 ] zp[1]:170 [ play_update_score::removed#0 ] zp[1]:177 [ play_update_score::lines_before#0 ] 
Limited combination testing to 100 combinations of 2304 possible.
Uplifting [render_moving] best 4273566 combination zp[1]:31 [ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ] reg byte x [ render_moving::c#2 render_moving::c#1 ] zp[1]:32 [ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ] reg byte a [ render_moving::current_cell#0 ] zp[1]:133 [ render_moving::$1 ] zp[1]:134 [ render_moving::$6 ] zp[1]:30 [ render_moving::l#4 render_moving::l#1 ] zp[2]:135 [ render_moving::screen_line#0 ] zp[1]:29 [ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ] 
Limited combination testing to 100 combinations of 15552 possible.
Uplifting [render_next] best 4258562 combination zp[2]:18 [ render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#8 render_next::next_piece_gfx#1 ] reg byte x [ render_next::c#2 render_next::c#1 ] zp[2]:20 [ render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#11 render_next::screen_next_area#4 render_next::screen_next_area#3 ] reg byte a [ render_next::cell#0 ] zp[1]:17 [ render_next::l#7 render_next::l#1 ] zp[1]:131 [ render_next::next_piece_char#0 ] reg byte x [ render_next::$6 ] 
Limited combination testing to 100 combinations of 128 possible.
Uplifting [render_playfield] best 4257562 combination zp[2]:37 [ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ] zp[1]:39 [ render_playfield::c#2 render_playfield::c#1 ] zp[1]:36 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] reg byte a [ render_playfield::$0 ] reg byte a [ render_playfield::$3 ] zp[1]:35 [ render_playfield::l#2 render_playfield::l#1 ] 
Limited combination testing to 100 combinations of 128 possible.
Uplifting [keyboard_event_pressed] best 4257533 combination reg byte y [ keyboard_event_pressed::$0 ] reg byte x [ keyboard_event_pressed::$1 ] reg byte y [ keyboard_event_pressed::row_bits#0 ] reg byte x [ keyboard_event_pressed::keycode#5 ] zp[1]:164 [ keyboard_event_pressed::return#12 ] zp[1]:195 [ keyboard_event_pressed::return#11 ] zp[1]:199 [ keyboard_event_pressed::return#0 ] zp[1]:201 [ keyboard_event_pressed::return#1 ] zp[1]:203 [ keyboard_event_pressed::return#2 ] zp[1]:205 [ keyboard_event_pressed::return#10 ] 
Limited combination testing to 100 combinations of 589824 possible.
Uplifting [render_screen_original] best 4255433 combination zp[2]:107 [ render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ] reg byte x [ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ] zp[2]:109 [ render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 ] zp[2]:103 [ render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 ] zp[2]:105 [ render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ] zp[1]:102 [ render_screen_original::y#6 render_screen_original::y#1 ] 
Uplifting [play_move_down] best 4255415 combination zp[1]:54 [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ] reg byte a [ play_move_down::$2 ] reg byte a [ play_move_down::$12 ] reg byte a [ play_move_down::removed#0 ] zp[1]:140 [ play_move_down::key_event#0 ] zp[1]:141 [ play_move_down::return#0 ] zp[1]:68 [ play_move_down::return#3 ] 
Limited combination testing to 100 combinations of 12288 possible.
Uplifting [play_move_rotate] best 4255399 combination zp[1]:42 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] reg byte x [ play_move_rotate::$5 ] reg byte a [ play_move_rotate::$2 ] reg byte a [ play_move_rotate::$7 ] zp[1]:146 [ play_move_rotate::key_event#0 ] zp[1]:147 [ play_move_rotate::return#0 ] zp[1]:41 [ play_move_rotate::return#2 ] 
Limited combination testing to 100 combinations of 12288 possible.
Uplifting [play_move_leftright] best 4255372 combination reg byte a [ play_move_leftright::$4 ] reg byte a [ play_move_leftright::$8 ] reg byte a [ play_move_leftright::key_event#0 ] reg byte a [ play_move_leftright::return#0 ] zp[1]:53 [ play_move_leftright::return#2 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [render_bcd] best 4255352 combination zp[2]:13 [ render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ] zp[2]:7 [ render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ] reg byte a [ render_bcd::$5 ] reg byte a [ render_bcd::$6 ] reg byte a [ render_bcd::$3 ] reg byte a [ render_bcd::$4 ] zp[1]:12 [ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ] zp[2]:9 [ render_bcd::offset#6 ] zp[1]:11 [ render_bcd::only_low#6 ] 
Limited combination testing to 100 combinations of 1536 possible.
Uplifting [play_movement] best 4255340 combination zp[1]:40 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 ] reg byte a [ play_movement::$3 ] reg byte a [ play_movement::$4 ] zp[1]:145 [ play_movement::render#2 ] zp[1]:123 [ play_movement::key_event#0 ] zp[1]:124 [ play_movement::return#3 ] 
Limited combination testing to 100 combinations of 576 possible.
Uplifting [keyboard_event_get] best 4254434 combination reg byte a [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] reg byte a [ keyboard_event_get::return#3 ] 
Uplifting [play_init] best 4254224 combination reg byte a [ play_init::$3 ] zp[1]:94 [ play_init::b#2 play_init::b#1 ] reg byte y [ play_init::j#2 play_init::j#1 ] reg byte x [ play_init::$2 ] zp[1]:93 [ play_init::idx#2 play_init::idx#1 ] zp[2]:91 [ play_init::pli#2 play_init::pli#1 ] 
Limited combination testing to 100 combinations of 432 possible.
Uplifting [render_show] best 4254215 combination reg byte a [ render_show::d018val#3 ] 
Uplifting [render_init] best 4254045 combination reg byte y [ render_init::i#2 render_init::i#1 ] reg byte x [ render_init::$5 ] zp[2]:100 [ render_init::li_2#2 render_init::li_2#1 ] zp[2]:98 [ render_init::li_1#2 render_init::li_1#1 ] 
Uplifting [sprites_init] best 4253875 combination reg byte y [ sprites_init::s#2 sprites_init::s#1 ] reg byte x [ sprites_init::s2#0 ] zp[1]:96 [ sprites_init::xpos#2 sprites_init::xpos#1 ] 
Uplifting [main] best 4252875 combination reg byte a [ main::render#1 ] reg byte x [ main::key_event#0 ] 
Uplifting [render_score] best 4252875 combination zp[2]:5 [ render_score::screen#3 ] 
Uplifting [sprites_irq] best 4252851 combination zp[1]:218 [ sprites_irq::raster_sprite_gfx_modify ] reg byte x [ sprites_irq::$0 ] reg byte a [ sprites_irq::ptr#4 ] reg byte a [ sprites_irq::ptr#2 ] reg byte a [ sprites_irq::ptr#3 ] zp[1]:222 [ sprites_irq::ptr#1 ] zp[1]:216 [ sprites_irq::ypos#0 ] zp[1]:219 [ sprites_irq::ptr#0 ] 
Limited combination testing to 100 combinations of 12288 possible.
Uplifting [MOS6526_CIA] best 4252851 combination 
Uplifting [MOS6581_SID] best 4252851 combination 
Uplifting [render_screen_swap] best 4252851 combination 
Uplifting [sprites_irq_init] best 4252851 combination 
Attempting to uplift remaining variables inzp[1]:49 [ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ]
Uplifting [play_collision] best 4252851 combination zp[1]:49 [ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ] 
Attempting to uplift remaining variables inzp[1]:50 [ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ]
Uplifting [play_collision] best 4252851 combination zp[1]:50 [ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ] 
Attempting to uplift remaining variables inzp[1]:80 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ]
Uplifting [play_lock_current] best 4252851 combination zp[1]:80 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ] 
Attempting to uplift remaining variables inzp[1]:155 [ play_collision::$14 ]
Uplifting [play_collision] best 4248851 combination reg byte a [ play_collision::$14 ] 
Attempting to uplift remaining variables inzp[1]:75 [ play_remove_lines::x#2 play_remove_lines::x#1 ]
Uplifting [play_remove_lines] best 4248851 combination zp[1]:75 [ play_remove_lines::x#2 play_remove_lines::x#1 ] 
Attempting to uplift remaining variables inzp[1]:158 [ play_collision::i#1 ]
Uplifting [play_collision] best 4248851 combination zp[1]:158 [ play_collision::i#1 ] 
Attempting to uplift remaining variables inzp[1]:81 [ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ]
Uplifting [play_lock_current] best 4248851 combination zp[1]:81 [ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ] 
Attempting to uplift remaining variables inzp[1]:47 [ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ]
Uplifting [play_collision] best 4248851 combination zp[1]:47 [ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ] 
Attempting to uplift remaining variables inzp[1]:48 [ play_collision::l#6 play_collision::l#1 ]
Uplifting [play_collision] best 4248851 combination zp[1]:48 [ play_collision::l#6 play_collision::l#1 ] 
Attempting to uplift remaining variables inzp[1]:76 [ play_remove_lines::full#4 play_remove_lines::full#2 ]
Uplifting [play_remove_lines] best 4248851 combination zp[1]:76 [ play_remove_lines::full#4 play_remove_lines::full#2 ] 
Attempting to uplift remaining variables inzp[1]:187 [ play_remove_lines::c#0 ]
Uplifting [play_remove_lines] best 4248851 combination zp[1]:187 [ play_remove_lines::c#0 ] 
Attempting to uplift remaining variables inzp[1]:73 [ play_remove_lines::removed#11 play_remove_lines::removed#7 play_remove_lines::removed#1 ]
Uplifting [play_remove_lines] best 4248851 combination zp[1]:73 [ play_remove_lines::removed#11 play_remove_lines::removed#7 play_remove_lines::removed#1 ] 
Attempting to uplift remaining variables inzp[1]:191 [ play_lock_current::i#1 ]
Uplifting [play_lock_current] best 4248851 combination zp[1]:191 [ play_lock_current::i#1 ] 
Attempting to uplift remaining variables inzp[1]:69 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 play_spawn_current::piece_idx#2 next_piece_idx#16 play_spawn_current::piece_idx#1 ]
Uplifting [] best 4248851 combination zp[1]:69 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 play_spawn_current::piece_idx#2 next_piece_idx#16 play_spawn_current::piece_idx#1 ] 
Attempting to uplift remaining variables inzp[1]:72 [ play_remove_lines::y#8 play_remove_lines::y#1 ]
Uplifting [play_remove_lines] best 4248851 combination zp[1]:72 [ play_remove_lines::y#8 play_remove_lines::y#1 ] 
Attempting to uplift remaining variables inzp[1]:79 [ play_lock_current::l#6 play_lock_current::l#1 ]
Uplifting [play_lock_current] best 4248851 combination zp[1]:79 [ play_lock_current::l#6 play_lock_current::l#1 ] 
Attempting to uplift remaining variables inzp[1]:78 [ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ]
Uplifting [play_lock_current] best 4248851 combination zp[1]:78 [ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ] 
Attempting to uplift remaining variables inzp[1]:88 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
Uplifting [] best 4248851 combination zp[1]:88 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ] 
Attempting to uplift remaining variables inzp[1]:46 [ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ]
Uplifting [play_collision] best 4248851 combination zp[1]:46 [ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ] 
Attempting to uplift remaining variables inzp[1]:63 [ current_piece_char#29 current_piece_char#10 current_piece_char#5 current_piece_char#16 ]
Uplifting [] best 4248851 combination zp[1]:63 [ current_piece_char#29 current_piece_char#10 current_piece_char#5 current_piece_char#16 ] 
Attempting to uplift remaining variables inzp[1]:86 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Uplifting [keyboard_event_scan] best 4098851 combination reg byte x [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] 
Attempting to uplift remaining variables inzp[1]:87 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Uplifting [keyboard_event_scan] best 4098851 combination zp[1]:87 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] 
Attempting to uplift remaining variables inzp[1]:60 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
Uplifting [] best 4098851 combination zp[1]:60 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ] 
Attempting to uplift remaining variables inzp[1]:59 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#1 current_movedown_slow#21 current_movedown_slow#23 current_movedown_slow#65 current_movedown_slow#10 ]
Uplifting [] best 4098851 combination zp[1]:59 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#1 current_movedown_slow#21 current_movedown_slow#23 current_movedown_slow#65 current_movedown_slow#10 ] 
Attempting to uplift remaining variables inzp[1]:85 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Uplifting [keyboard_event_scan] best 4098851 combination zp[1]:85 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] 
Attempting to uplift remaining variables inzp[1]:67 [ current_xpos#43 current_xpos#14 current_xpos#100 current_xpos#19 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
Uplifting [] best 4098851 combination zp[1]:67 [ current_xpos#43 current_xpos#14 current_xpos#100 current_xpos#19 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ] 
Attempting to uplift remaining variables inzp[1]:198 [ keyboard_event_scan::row_scan#0 ]
Uplifting [keyboard_event_scan] best 4098851 combination zp[1]:198 [ keyboard_event_scan::row_scan#0 ] 
Attempting to uplift remaining variables inzp[1]:45 [ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
Uplifting [play_collision] best 4098835 combination reg byte x [ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ] 
Attempting to uplift remaining variables inzp[1]:58 [ level#33 level#10 level#17 level#19 level#21 ]
Uplifting [] best 4098835 combination zp[1]:58 [ level#33 level#10 level#17 level#19 level#21 ] 
Attempting to uplift remaining variables inzp[1]:31 [ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ]
Uplifting [render_moving] best 4098835 combination zp[1]:31 [ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ] 
Attempting to uplift remaining variables inzp[1]:39 [ render_playfield::c#2 render_playfield::c#1 ]
Uplifting [render_playfield] best 4098835 combination zp[1]:39 [ render_playfield::c#2 render_playfield::c#1 ] 
Attempting to uplift remaining variables inzp[1]:173 [ play_collision::return#10 ]
Uplifting [play_collision] best 4098829 combination reg byte a [ play_collision::return#10 ] 
Attempting to uplift remaining variables inzp[1]:36 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Uplifting [render_playfield] best 4098829 combination zp[1]:36 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] 
Attempting to uplift remaining variables inzp[1]:32 [ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ]
Uplifting [render_moving] best 4098829 combination zp[1]:32 [ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ] 
Attempting to uplift remaining variables inzp[1]:54 [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ]
Uplifting [play_move_down] best 4098829 combination zp[1]:54 [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ] 
Attempting to uplift remaining variables inzp[1]:55 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#6 current_ypos#19 ]
Uplifting [] best 4098829 combination zp[1]:55 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#6 current_ypos#19 ] 
Attempting to uplift remaining variables inzp[1]:42 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
Uplifting [play_move_rotate] best 4098829 combination zp[1]:42 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] 
Attempting to uplift remaining variables inzp[1]:170 [ play_update_score::removed#0 ]
Uplifting [play_update_score] best 4098823 combination reg byte x [ play_update_score::removed#0 ] 
Attempting to uplift remaining variables inzp[1]:70 [ game_over#65 game_over#27 game_over#10 game_over#52 game_over#15 ]
Uplifting [] best 4098823 combination zp[1]:70 [ game_over#65 game_over#27 game_over#10 game_over#52 game_over#15 ] 
Attempting to uplift remaining variables inzp[1]:64 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
Uplifting [] best 4098823 combination zp[1]:64 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ] 
Attempting to uplift remaining variables inzp[1]:177 [ play_update_score::lines_before#0 ]
Uplifting [play_update_score] best 4098823 combination zp[1]:177 [ play_update_score::lines_before#0 ] 
Attempting to uplift remaining variables inzp[1]:133 [ render_moving::$1 ]
Uplifting [render_moving] best 4098223 combination reg byte a [ render_moving::$1 ] 
Attempting to uplift remaining variables inzp[1]:134 [ render_moving::$6 ]
Uplifting [render_moving] best 4097823 combination reg byte a [ render_moving::$6 ] 
Attempting to uplift remaining variables inzp[1]:150 [ play_collision::return#14 ]
Uplifting [play_collision] best 4097817 combination reg byte a [ play_collision::return#14 ] 
Attempting to uplift remaining variables inzp[1]:160 [ play_collision::return#13 ]
Uplifting [play_collision] best 4097811 combination reg byte a [ play_collision::return#13 ] 
Attempting to uplift remaining variables inzp[1]:162 [ play_collision::return#1 ]
Uplifting [play_collision] best 4097805 combination reg byte a [ play_collision::return#1 ] 
Attempting to uplift remaining variables inzp[1]:164 [ keyboard_event_pressed::return#12 ]
Uplifting [keyboard_event_pressed] best 4097799 combination reg byte a [ keyboard_event_pressed::return#12 ] 
Attempting to uplift remaining variables inzp[1]:166 [ play_collision::return#0 ]
Uplifting [play_collision] best 4097793 combination reg byte a [ play_collision::return#0 ] 
Attempting to uplift remaining variables inzp[1]:168 [ play_remove_lines::return#0 ]
Uplifting [play_remove_lines] best 4097787 combination reg byte a [ play_remove_lines::return#0 ] 
Attempting to uplift remaining variables inzp[1]:52 [ play_collision::return#15 ]
Uplifting [play_collision] best 4097757 combination reg byte a [ play_collision::return#15 ] 
Attempting to uplift remaining variables inzp[1]:35 [ render_playfield::l#2 render_playfield::l#1 ]
Uplifting [render_playfield] best 4097757 combination zp[1]:35 [ render_playfield::l#2 render_playfield::l#1 ] 
Attempting to uplift remaining variables inzp[1]:17 [ render_next::l#7 render_next::l#1 ]
Uplifting [render_next] best 4097757 combination zp[1]:17 [ render_next::l#7 render_next::l#1 ] 
Attempting to uplift remaining variables inzp[1]:195 [ keyboard_event_pressed::return#11 ]
Uplifting [keyboard_event_pressed] best 4097739 combination reg byte a [ keyboard_event_pressed::return#11 ] 
Attempting to uplift remaining variables inzp[1]:30 [ render_moving::l#4 render_moving::l#1 ]
Uplifting [render_moving] best 4097739 combination zp[1]:30 [ render_moving::l#4 render_moving::l#1 ] 
Attempting to uplift remaining variables inzp[1]:146 [ play_move_rotate::key_event#0 ]
Uplifting [play_move_rotate] best 4097730 combination reg byte a [ play_move_rotate::key_event#0 ] 
Attempting to uplift remaining variables inzp[1]:29 [ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ]
Uplifting [render_moving] best 4097730 combination zp[1]:29 [ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ] 
Attempting to uplift remaining variables inzp[1]:131 [ render_next::next_piece_char#0 ]
Uplifting [render_next] best 4097730 combination zp[1]:131 [ render_next::next_piece_char#0 ] 
Attempting to uplift remaining variables inzp[1]:140 [ play_move_down::key_event#0 ]
Uplifting [play_move_down] best 4097724 combination reg byte a [ play_move_down::key_event#0 ] 
Attempting to uplift remaining variables inzp[1]:28 [ current_piece_char#68 current_piece_char#100 current_piece_char#101 ]
Uplifting [] best 4097724 combination zp[1]:28 [ current_piece_char#68 current_piece_char#100 current_piece_char#101 ] 
Attempting to uplift remaining variables inzp[1]:4 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
Uplifting [] best 4097724 combination zp[1]:4 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ] 
Attempting to uplift remaining variables inzp[1]:172 [ play_spawn_current::$7 ]
Uplifting [play_spawn_current] best 4097724 combination zp[1]:172 [ play_spawn_current::$7 ] 
Attempting to uplift remaining variables inzp[1]:40 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 ]
Uplifting [play_movement] best 4097724 combination zp[1]:40 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 ] 
Attempting to uplift remaining variables inzp[1]:141 [ play_move_down::return#0 ]
Uplifting [play_move_down] best 4097718 combination reg byte a [ play_move_down::return#0 ] 
Attempting to uplift remaining variables inzp[1]:147 [ play_move_rotate::return#0 ]
Uplifting [play_move_rotate] best 4097712 combination reg byte a [ play_move_rotate::return#0 ] 
Attempting to uplift remaining variables inzp[1]:199 [ keyboard_event_pressed::return#0 ]
Uplifting [keyboard_event_pressed] best 4097706 combination reg byte a [ keyboard_event_pressed::return#0 ] 
Attempting to uplift remaining variables inzp[1]:200 [ keyboard_event_scan::$0 ]
Uplifting [keyboard_event_scan] best 4097700 combination reg byte a [ keyboard_event_scan::$0 ] 
Attempting to uplift remaining variables inzp[1]:201 [ keyboard_event_pressed::return#1 ]
Uplifting [keyboard_event_pressed] best 4097694 combination reg byte a [ keyboard_event_pressed::return#1 ] 
Attempting to uplift remaining variables inzp[1]:202 [ keyboard_event_scan::$3 ]
Uplifting [keyboard_event_scan] best 4097688 combination reg byte a [ keyboard_event_scan::$3 ] 
Attempting to uplift remaining variables inzp[1]:203 [ keyboard_event_pressed::return#2 ]
Uplifting [keyboard_event_pressed] best 4097682 combination reg byte a [ keyboard_event_pressed::return#2 ] 
Attempting to uplift remaining variables inzp[1]:204 [ keyboard_event_scan::$6 ]
Uplifting [keyboard_event_scan] best 4097676 combination reg byte a [ keyboard_event_scan::$6 ] 
Attempting to uplift remaining variables inzp[1]:205 [ keyboard_event_pressed::return#10 ]
Uplifting [keyboard_event_pressed] best 4097670 combination reg byte a [ keyboard_event_pressed::return#10 ] 
Attempting to uplift remaining variables inzp[1]:206 [ keyboard_event_scan::$9 ]
Uplifting [keyboard_event_scan] best 4097664 combination reg byte a [ keyboard_event_scan::$9 ] 
Attempting to uplift remaining variables inzp[1]:102 [ render_screen_original::y#6 render_screen_original::y#1 ]
Uplifting [render_screen_original] best 4097664 combination zp[1]:102 [ render_screen_original::y#6 render_screen_original::y#1 ] 
Attempting to uplift remaining variables inzp[1]:12 [ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ]
Uplifting [render_bcd] best 4097644 combination reg byte x [ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ] 
Attempting to uplift remaining variables inzp[1]:11 [ render_bcd::only_low#6 ]
Uplifting [render_bcd] best 4097623 combination reg byte y [ render_bcd::only_low#6 ] 
Attempting to uplift remaining variables inzp[1]:25 [ current_xpos#59 current_xpos#119 current_xpos#120 ]
Uplifting [] best 4097623 combination zp[1]:25 [ current_xpos#59 current_xpos#119 current_xpos#120 ] 
Attempting to uplift remaining variables inzp[1]:24 [ render_screen_render#33 render_screen_render#65 ]
Uplifting [] best 4097623 combination zp[1]:24 [ render_screen_render#33 render_screen_render#65 ] 
Attempting to uplift remaining variables inzp[1]:145 [ play_movement::render#2 ]
Uplifting [play_movement] best 4097623 combination zp[1]:145 [ play_movement::render#2 ] 
Attempting to uplift remaining variables inzp[1]:41 [ play_move_rotate::return#2 ]
Uplifting [play_move_rotate] best 4097614 combination reg byte a [ play_move_rotate::return#2 ] 
Attempting to uplift remaining variables inzp[1]:53 [ play_move_leftright::return#2 ]
Uplifting [play_move_leftright] best 4097605 combination reg byte a [ play_move_leftright::return#2 ] 
Attempting to uplift remaining variables inzp[1]:68 [ play_move_down::return#3 ]
Uplifting [play_move_down] best 4097598 combination reg byte x [ play_move_down::return#3 ] 
Attempting to uplift remaining variables inzp[1]:123 [ play_movement::key_event#0 ]
Uplifting [play_movement] best 4097598 combination zp[1]:123 [ play_movement::key_event#0 ] 
Attempting to uplift remaining variables inzp[1]:94 [ play_init::b#2 play_init::b#1 ]
Uplifting [play_init] best 4097498 combination reg byte x [ play_init::b#2 play_init::b#1 ] 
Attempting to uplift remaining variables inzp[1]:124 [ play_movement::return#3 ]
Uplifting [play_movement] best 4096898 combination reg byte a [ play_movement::return#3 ] 
Attempting to uplift remaining variables inzp[1]:96 [ sprites_init::xpos#2 sprites_init::xpos#1 ]
Uplifting [sprites_init] best 4096898 combination zp[1]:96 [ sprites_init::xpos#2 sprites_init::xpos#1 ] 
Attempting to uplift remaining variables inzp[1]:93 [ play_init::idx#2 play_init::idx#1 ]
Uplifting [play_init] best 4096898 combination zp[1]:93 [ play_init::idx#2 play_init::idx#1 ] 
Attempting to uplift remaining variables inzp[1]:15 [ render_screen_render#15 render_screen_render#66 ]
Uplifting [] best 4096862 combination reg byte x [ render_screen_render#15 render_screen_render#66 ] 
Attempting to uplift remaining variables inzp[1]:23 [ current_ypos#13 current_ypos#98 current_ypos#99 ]
Uplifting [] best 4096826 combination reg byte x [ current_ypos#13 current_ypos#98 current_ypos#99 ] 
Attempting to uplift remaining variables inzp[1]:112 [ render_screen_showing ]
Uplifting [] best 4096826 combination zp[1]:112 [ render_screen_showing ] 
Attempting to uplift remaining variables inzp[1]:2 [ render_screen_show#16 render_screen_show#13 ]
Uplifting [] best 4096826 combination zp[1]:2 [ render_screen_show#16 render_screen_show#13 ] 
Attempting to uplift remaining variables inzp[1]:16 [ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ]
Uplifting [] best 4096789 combination reg byte y [ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ] 
Attempting to uplift remaining variables inzp[1]:3 [ render_screen_render#18 render_screen_render#11 ]
Uplifting [] best 4096789 combination zp[1]:3 [ render_screen_render#18 render_screen_render#11 ] 
Attempting to uplift remaining variables inzp[1]:218 [ sprites_irq::raster_sprite_gfx_modify ]
Uplifting [sprites_irq] best 4096789 combination zp[1]:218 [ sprites_irq::raster_sprite_gfx_modify ] 
Attempting to uplift remaining variables inzp[1]:222 [ sprites_irq::ptr#1 ]
Uplifting [sprites_irq] best 4096777 combination reg byte x [ sprites_irq::ptr#1 ] 
Attempting to uplift remaining variables inzp[1]:216 [ sprites_irq::ypos#0 ]
Uplifting [sprites_irq] best 4096762 combination reg byte a [ sprites_irq::ypos#0 ] 
Attempting to uplift remaining variables inzp[1]:219 [ sprites_irq::ptr#0 ]
Uplifting [sprites_irq] best 4096747 combination reg byte x [ sprites_irq::ptr#0 ] 
Attempting to uplift remaining variables inzp[1]:118 [ irq_sprite_ypos ]
Uplifting [] best 4096747 combination zp[1]:118 [ irq_sprite_ypos ] 
Attempting to uplift remaining variables inzp[1]:120 [ irq_cnt ]
Uplifting [] best 4096747 combination zp[1]:120 [ irq_cnt ] 
Attempting to uplift remaining variables inzp[1]:119 [ irq_sprite_ptr ]
Uplifting [] best 4096747 combination zp[1]:119 [ irq_sprite_ptr ] 
Attempting to uplift remaining variables inzp[1]:117 [ irq_raster_next ]
Uplifting [] best 4096747 combination zp[1]:117 [ irq_raster_next ] 
Coalescing zero page register [ zp[2]:5 [ render_score::screen#3 ] ] with [ zp[2]:7 [ render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ] ] - score: 6
Coalescing zero page register [ zp[1]:40 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 ] ] with [ zp[1]:145 [ play_movement::render#2 ] ] - score: 2
Coalescing zero page register [ zp[2]:9 [ render_bcd::offset#6 ] ] with [ zp[2]:13 [ render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:43 [ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 ] ] with [ zp[2]:153 [ play_collision::piece_gfx#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:55 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#6 current_ypos#19 ] ] with [ zp[1]:78 [ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:18 [ render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#8 render_next::next_piece_gfx#1 ] ] with [ zp[2]:5 [ render_score::screen#3 render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ] ]
Coalescing zero page register [ zp[2]:20 [ render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#11 render_next::screen_next_area#4 render_next::screen_next_area#3 ] ] with [ zp[2]:9 [ render_bcd::offset#6 render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ] ]
Coalescing zero page register [ zp[1]:24 [ render_screen_render#33 render_screen_render#65 ] ] with [ zp[1]:17 [ render_next::l#7 render_next::l#1 ] ]
Coalescing zero page register [ zp[1]:35 [ render_playfield::l#2 render_playfield::l#1 ] ] with [ zp[1]:29 [ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ] ]
Coalescing zero page register [ zp[1]:36 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] ] with [ zp[1]:30 [ render_moving::l#4 render_moving::l#1 ] ]
Coalescing zero page register [ zp[1]:39 [ render_playfield::c#2 render_playfield::c#1 ] ] with [ zp[1]:31 [ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ] ]
Coalescing zero page register [ zp[1]:40 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 play_movement::render#2 ] ] with [ zp[1]:32 [ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ] ]
Coalescing zero page register [ zp[2]:43 [ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 play_collision::piece_gfx#0 ] ] with [ zp[2]:37 [ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ] ]
Coalescing zero page register [ zp[1]:54 [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ] ] with [ zp[1]:42 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] ]
Coalescing zero page register [ zp[1]:72 [ play_remove_lines::y#8 play_remove_lines::y#1 ] ] with [ zp[1]:46 [ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ] ]
Coalescing zero page register [ zp[1]:73 [ play_remove_lines::removed#11 play_remove_lines::removed#7 play_remove_lines::removed#1 ] ] with [ zp[1]:47 [ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ] ]
Coalescing zero page register [ zp[1]:75 [ play_remove_lines::x#2 play_remove_lines::x#1 ] ] with [ zp[1]:48 [ play_collision::l#6 play_collision::l#1 ] ]
Coalescing zero page register [ zp[1]:76 [ play_remove_lines::full#4 play_remove_lines::full#2 ] ] with [ zp[1]:49 [ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ] ]
Coalescing zero page register [ zp[1]:79 [ play_lock_current::l#6 play_lock_current::l#1 ] ] with [ zp[1]:50 [ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ] ]
Coalescing zero page register [ zp[1]:85 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] ] with [ zp[1]:80 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ] ]
Coalescing zero page register [ zp[1]:87 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] ] with [ zp[1]:81 [ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ] ]
Coalescing zero page register [ zp[1]:96 [ sprites_init::xpos#2 sprites_init::xpos#1 ] ] with [ zp[1]:93 [ play_init::idx#2 play_init::idx#1 ] ]
Coalescing zero page register [ zp[2]:98 [ render_init::li_1#2 render_init::li_1#1 ] ] with [ zp[2]:91 [ play_init::pli#2 play_init::pli#1 ] ]
Coalescing zero page register [ zp[1]:123 [ play_movement::key_event#0 ] ] with [ zp[1]:102 [ render_screen_original::y#6 render_screen_original::y#1 ] ]
Coalescing zero page register [ zp[2]:135 [ render_moving::screen_line#0 ] ] with [ zp[2]:100 [ render_init::li_2#2 render_init::li_2#1 ] ]
Coalescing zero page register [ zp[2]:156 [ play_collision::playfield_line#0 ] ] with [ zp[2]:103 [ render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 ] ]
Coalescing zero page register [ zp[1]:158 [ play_collision::i#1 ] ] with [ zp[1]:131 [ render_next::next_piece_char#0 ] ]
Coalescing zero page register [ zp[1]:177 [ play_update_score::lines_before#0 ] ] with [ zp[1]:172 [ play_spawn_current::$7 ] ]
Coalescing zero page register [ zp[2]:189 [ play_lock_current::playfield_line#0 ] ] with [ zp[2]:105 [ render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ] ]
Coalescing zero page register [ zp[1]:191 [ play_lock_current::i#1 ] ] with [ zp[1]:187 [ play_remove_lines::c#0 ] ]
Coalescing zero page register [ zp[2]:26 [ current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 ] ] with [ zp[2]:18 [ render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#8 render_next::next_piece_gfx#1 render_score::screen#3 render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ] ]
Coalescing zero page register [ zp[2]:43 [ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 play_collision::piece_gfx#0 render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ] ] with [ zp[2]:20 [ render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#11 render_next::screen_next_area#4 render_next::screen_next_area#3 render_bcd::offset#6 render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ] ]
Coalescing zero page register [ zp[1]:54 [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] ] with [ zp[1]:35 [ render_playfield::l#2 render_playfield::l#1 render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ] ]
Coalescing zero page register [ zp[1]:72 [ play_remove_lines::y#8 play_remove_lines::y#1 play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ] ] with [ zp[1]:36 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 render_moving::l#4 render_moving::l#1 ] ]
Coalescing zero page register [ zp[1]:73 [ play_remove_lines::removed#11 play_remove_lines::removed#7 play_remove_lines::removed#1 play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ] ] with [ zp[1]:39 [ render_playfield::c#2 render_playfield::c#1 render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ] ]
Coalescing zero page register [ zp[1]:85 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ] ] with [ zp[1]:75 [ play_remove_lines::x#2 play_remove_lines::x#1 play_collision::l#6 play_collision::l#1 ] ]
Coalescing zero page register [ zp[1]:87 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ] ] with [ zp[1]:76 [ play_remove_lines::full#4 play_remove_lines::full#2 play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ] ]
Coalescing zero page register [ zp[1]:96 [ sprites_init::xpos#2 sprites_init::xpos#1 play_init::idx#2 play_init::idx#1 ] ] with [ zp[1]:40 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 play_movement::render#2 render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ] ]
Coalescing zero page register [ zp[2]:135 [ render_moving::screen_line#0 render_init::li_2#2 render_init::li_2#1 ] ] with [ zp[2]:107 [ render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ] ]
Coalescing zero page register [ zp[1]:191 [ play_lock_current::i#1 play_remove_lines::c#0 ] ] with [ zp[1]:158 [ play_collision::i#1 render_next::next_piece_char#0 ] ]
Coalescing zero page register [ zp[1]:198 [ keyboard_event_scan::row_scan#0 ] ] with [ zp[1]:79 [ play_lock_current::l#6 play_lock_current::l#1 play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ] ]
Allocated (was zp[1]:24) zp[1]:5 [ render_screen_render#33 render_screen_render#65 render_next::l#7 render_next::l#1 ]
Allocated (was zp[1]:25) zp[1]:6 [ current_xpos#59 current_xpos#119 current_xpos#120 ]
Allocated (was zp[2]:26) zp[2]:7 [ current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#8 render_next::next_piece_gfx#1 render_score::screen#3 render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ]
Allocated (was zp[1]:28) zp[1]:9 [ current_piece_char#68 current_piece_char#100 current_piece_char#101 ]
Allocated (was zp[2]:43) zp[2]:10 [ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 play_collision::piece_gfx#0 render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#11 render_next::screen_next_area#4 render_next::screen_next_area#3 render_bcd::offset#6 render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ]
Allocated (was zp[1]:54) zp[1]:12 [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 render_playfield::l#2 render_playfield::l#1 render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ]
Allocated (was zp[1]:55) zp[1]:13 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#6 current_ypos#19 play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ]
Allocated (was zp[2]:56) zp[2]:14 [ lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ]
Allocated (was zp[1]:58) zp[1]:16 [ level#33 level#10 level#17 level#19 level#21 ]
Allocated (was zp[1]:59) zp[1]:17 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#1 current_movedown_slow#21 current_movedown_slow#23 current_movedown_slow#65 current_movedown_slow#10 ]
Allocated (was zp[1]:60) zp[1]:18 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
Allocated (was zp[2]:61) zp[2]:19 [ current_piece#28 current_piece#10 current_piece#101 current_piece#15 current_piece#93 ]
Allocated (was zp[1]:63) zp[1]:21 [ current_piece_char#29 current_piece_char#10 current_piece_char#5 current_piece_char#16 ]
Allocated (was zp[1]:64) zp[1]:22 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
Allocated (was zp[2]:65) zp[2]:23 [ current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#123 current_piece_gfx#18 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#117 ]
Allocated (was zp[1]:67) zp[1]:25 [ current_xpos#43 current_xpos#14 current_xpos#100 current_xpos#19 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
Allocated (was zp[1]:69) zp[1]:26 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 play_spawn_current::piece_idx#2 next_piece_idx#16 play_spawn_current::piece_idx#1 ]
Allocated (was zp[1]:70) zp[1]:27 [ game_over#65 game_over#27 game_over#10 game_over#52 game_over#15 ]
Allocated (was zp[1]:72) zp[1]:28 [ play_remove_lines::y#8 play_remove_lines::y#1 play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 render_moving::l#4 render_moving::l#1 ]
Allocated (was zp[1]:73) zp[1]:29 [ play_remove_lines::removed#11 play_remove_lines::removed#7 play_remove_lines::removed#1 play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 render_playfield::c#2 render_playfield::c#1 render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ]
Allocated (was zp[1]:85) zp[1]:30 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 play_remove_lines::x#2 play_remove_lines::x#1 play_collision::l#6 play_collision::l#1 ]
Allocated (was zp[1]:87) zp[1]:31 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 play_remove_lines::full#4 play_remove_lines::full#2 play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ]
Allocated (was zp[1]:88) zp[1]:32 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
Allocated (was zp[1]:96) zp[1]:33 [ sprites_init::xpos#2 sprites_init::xpos#1 play_init::idx#2 play_init::idx#1 play_movement::return#2 play_movement::render#1 play_movement::return#0 play_movement::render#2 render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ]
Allocated (was zp[2]:98) zp[2]:34 [ render_init::li_1#2 render_init::li_1#1 play_init::pli#2 play_init::pli#1 ]
Allocated (was zp[2]:109) zp[2]:36 [ render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 ]
Allocated (was zp[1]:112) zp[1]:38 [ render_screen_showing ]
Allocated (was zp[4]:113) zp[4]:39 [ score_bcd ]
Allocated (was zp[1]:117) zp[1]:43 [ irq_raster_next ]
Allocated (was zp[1]:118) zp[1]:44 [ irq_sprite_ypos ]
Allocated (was zp[1]:119) zp[1]:45 [ irq_sprite_ptr ]
Allocated (was zp[1]:120) zp[1]:46 [ irq_cnt ]
Allocated (was zp[1]:123) zp[1]:47 [ play_movement::key_event#0 render_screen_original::y#6 render_screen_original::y#1 ]
Allocated (was zp[2]:135) zp[2]:48 [ render_moving::screen_line#0 render_init::li_2#2 render_init::li_2#1 render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ]
Allocated (was zp[2]:156) zp[2]:50 [ play_collision::playfield_line#0 render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 ]
Allocated (was zp[1]:177) zp[1]:52 [ play_update_score::lines_before#0 play_spawn_current::$7 ]
Allocated (was zp[4]:179) zp[4]:53 [ play_update_score::add_bcd#0 ]
Allocated (was zp[2]:189) zp[2]:57 [ play_lock_current::playfield_line#0 render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ]
Allocated (was zp[1]:191) zp[1]:59 [ play_lock_current::i#1 play_remove_lines::c#0 play_collision::i#1 render_next::next_piece_char#0 ]
Allocated (was zp[1]:198) zp[1]:60 [ keyboard_event_scan::row_scan#0 play_lock_current::l#6 play_lock_current::l#1 play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ]
Allocated (was zp[1]:218) zp[1]:61 [ sprites_irq::raster_sprite_gfx_modify ]
Interrupt procedure sprites_irq clobbers AXCNZV
Removing interrupt register storage sty regy+1 in 1180 entry interrupt(HARDWARE_CLOBBER)
Removing interrupt register storage regy: in 1214 [572] return  - exit interrupt(HARDWARE_CLOBBER)
Removing interrupt register storage ldy #00 in 1214 [572] return  - exit interrupt(HARDWARE_CLOBBER)

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tetris Game for the Commodore 64
// The tetris game tries to match NES tetris gameplay pretty closely
// Source: https://meatfighter.com/nintendotetrisai/
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // SID Channel Control Register Noise Waveform
  .const SID_CONTROL_NOISE = $80
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = 5
  // The offset of the sprite pointers from the screen start address
  .const SPRITE_PTRS = $3f8
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label SPRITES_COLS = $d027
  .label VIC_CONTROL = $d011
  .label D011 = $d011
  .const VIC_ECM = $40
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D018 = $d018
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Color Ram
  .label COLS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // CIA#1 Interrupt for reading in ASM
  .label CIA1_INTERRUPT = $dc0d
  // The SID MOD 6581/8580
  .label SID = $d400
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  // The colors of the C64
  .const BLACK = 0
  .const RED = 2
  .const CYAN = 3
  .const PURPLE = 4
  .const GREEN = 5
  .const BLUE = 6
  .const ORANGE = 8
  .const PINK = $a
  .const DARK_GREY = $b
  .const GREY = $c
  .const LIGHT_GREEN = $d
  .const LIGHT_BLUE = $e
  .const KEY_Z = $c
  .const KEY_LSHIFT = $f
  .const KEY_X = $17
  .const KEY_DOT = $2c
  .const KEY_COMMA = $2f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  // Address of the first screen
  .label PLAYFIELD_SCREEN_1 = $400
  // Address of the second screen
  .label PLAYFIELD_SCREEN_2 = $2c00
  // Screen Sprite pointers on screen 1
  .label PLAYFIELD_SPRITE_PTRS_1 = PLAYFIELD_SCREEN_1+SPRITE_PTRS
  // Screen Sprite pointers on screen 2
  .label PLAYFIELD_SPRITE_PTRS_2 = PLAYFIELD_SCREEN_2+SPRITE_PTRS
  // Address of the sprites covering the playfield
  .label PLAYFIELD_SPRITES = $3000
  // Address of the charset
  .label PLAYFIELD_CHARSET = $2800
  // The size of the playfield
  .const PLAYFIELD_LINES = $16
  .const PLAYFIELD_COLS = $a
  // The Y-position of the first sprite row
  .const SPRITES_FIRST_YPOS = $31
  // The line of the first IRQ
  .const IRQ_RASTER_FIRST = SPRITES_FIRST_YPOS+$13
  // The rate of moving down the current piece fast (number of frames between moves if movedown is not forced)
  .const current_movedown_fast = $a
  // No collision
  .const COLLISION_NONE = 0
  // Playfield piece collision (cell on top of other cell on the playfield)
  .const COLLISION_PLAYFIELD = 1
  // Bottom collision (cell below bottom of the playfield)
  .const COLLISION_BOTTOM = 2
  // Left side collision (cell beyond the left side of the playfield)
  .const COLLISION_LEFT = 4
  // Right side collision (cell beyond the right side of the playfield)
  .const COLLISION_RIGHT = 8
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .const OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = $e
  .const OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = $12
  .const OFFSET_STRUCT_MOS6581_SID_CH3_OSC = $1b
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .const toSpritePtr1_return = PLAYFIELD_SPRITES/$40
  .label render_screen_showing = $26
  .label score_bcd = $27
  .label irq_raster_next = $2b
  .label irq_sprite_ypos = $2c
  .label irq_sprite_ptr = $2d
  .label irq_cnt = $2e
  // Keyboard event buffer size. The number of events currently in the event buffer
  .label keyboard_events_size = $20
  // The rate of moving down the current piece (number of frames between moves if movedown is  not forced)
  .label current_movedown_slow = $11
  .label current_ypos = $d
  // Position of top left corner of current moving piece on the playfield
  .label current_xpos = $19
  // The curent piece orientation - each piece have 4 orientations (00/0x10/0x20/0x30).
  // The orientation chooses one of the 4 sub-graphics of the piece.
  .label current_orientation = $16
  // Pointer to the current piece in the current orientation. Updated each time current_orientation is updated.
  .label current_piece_gfx = $17
  // The char of the current piece
  .label current_piece_char = $15
  // Current level BCD-format
  .label level_bcd = $12
  // The current moving piece. Points to the start of the piece definition.
  .label current_piece = $13
  // Is the game over?
  .label game_over = $1b
  // The index of the next moving piece. (0-6)
  .label next_piece_idx = $1a
  // Current level in normal (non-BCD) format
  .label level = $10
  // The screen currently being rendered to. 0x00 for screen 1 / 0x20 for screen 2.
  .label render_screen_render = 3
  // The screen currently to show next to the user. 0x00 for screen 1 / 0x20 for screen 2.
  // Show showing screen 1 and rendering to screen 2
  .label render_screen_show = 2
  // Counts up to the next movedown of current piece
  .label current_movedown_counter = 4
  // Current number of cleared lines in BCD-format
  .label lines_bcd = $e
  // The current moving piece. Points to the start of the piece definition.
  .label current_piece_1 = $a
  // The screen currently being rendered to. 0x00 for screen 1 / 0x20 for screen 2.
  .label render_screen_render_1 = 5
  // Position of top left corner of current moving piece on the playfield
  .label current_xpos_1 = 6
  // Pointer to the current piece in the current orientation. Updated each time current_orientation is updated.
  .label current_piece_gfx_1 = 7
  // The char of the current piece
  .label current_piece_char_1 = 9
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (volatile byte) render_screen_showing ← (byte) 0 -- vbuz1=vbuc1 
  // The screen currently being showed to the user. 0x00 for screen 1 / 0x20 for screen 2.
  lda #0
  sta.z render_screen_showing
  // [2] (volatile dword) score_bcd ← (dword) 0 -- vduz1=vduc1 
  // Current score in BCD-format
  lda #<0
  sta.z score_bcd
  lda #>0
  sta.z score_bcd+1
  lda #<0>>$10
  sta.z score_bcd+2
  lda #>0>>$10
  sta.z score_bcd+3
  // kickasm(location (const nomodify byte*) PLAYFIELD_CHARSET) {{ .fill 8,$00 // Place a filled char at the start of the charset     .import binary "playfield-screen.imap"  }}
  jmp __b2
  // @2
__b2:
  // kickasm(location (const nomodify byte*) PLAYFIELD_SPRITES) {{ .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000)) 	// Put the sprites into memory  	.for(var sy=0;sy<10;sy++) { 	    .var sprite_gfx_y = sy*20 		.for(var sx=0;sx<3;sx++) { 	    	.for (var y=0;y<21; y++) { 	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21) 		    	.for (var c=0; c<3; c++) { 	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y) 	            } 	        } 	    	.byte 0 	  	} 	}  }}
  jmp __b3
  // @3
__b3:
  // [5] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST -- vbuz1=vbuc1 
  // The raster line of the next IRQ
  lda #IRQ_RASTER_FIRST
  sta.z irq_raster_next
  // [6] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS+(byte) $15 -- vbuz1=vbuc1 
  // Y-pos of the sprites on the next IRQ
  lda #SPRITES_FIRST_YPOS+$15
  sta.z irq_sprite_ypos
  // [7] phi from @3 to toSpritePtr1 [phi:@3->toSpritePtr1]
toSpritePtr1_from___b3:
  jmp toSpritePtr1
  // toSpritePtr1
toSpritePtr1:
  jmp __b5
  // @5
__b5:
  // [8] (volatile byte) irq_sprite_ptr ← (const byte) toSpritePtr1_return#0+(byte) 3 -- vbuz1=vbuc1 
  // Index of the sprites to show on the next IRQ
  lda #toSpritePtr1_return+3
  sta.z irq_sprite_ptr
  // [9] (volatile byte) irq_cnt ← (byte) 0 -- vbuz1=vbuc1 
  // Counting the 10 IRQs
  lda #0
  sta.z irq_cnt
  // [10] phi from @5 to @4 [phi:@5->@4]
__b4_from___b5:
  jmp __b4
  // @4
__b4:
  // [11] call main 
  // [13] phi from @4 to main [phi:@4->main]
main_from___b4:
  jsr main
  // [12] phi from @4 to @end [phi:@4->@end]
__bend_from___b4:
  jmp __bend
  // @end
__bend:
  // main
main: {
    jmp sid_rnd_init1
    // main::sid_rnd_init1
  sid_rnd_init1:
    // [14] *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (word) $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ
    lda #>$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ+1
    // [15] *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL
    jmp __b8
    // main::@8
  __b8:
    // asm { sei  }
    sei
    // [17] call render_init 
    // [497] phi from main::@8 to render_init [phi:main::@8->render_init]
  render_init_from___b8:
    jsr render_init
    // [18] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [19] call sprites_init 
    jsr sprites_init
    // [20] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b10_from___b9:
    jmp __b10
    // main::@10
  __b10:
    // [21] call sprites_irq_init 
    jsr sprites_irq_init
    // [22] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  __b11_from___b10:
    jmp __b11
    // main::@11
  __b11:
    // [23] call play_init 
    // [456] phi from main::@11 to play_init [phi:main::@11->play_init]
  play_init_from___b11:
    jsr play_init
    // [24] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  __b12_from___b11:
    jmp __b12
    // main::@12
  __b12:
    // [25] call play_spawn_current 
  // Spawn twice to spawn both current & next
    // [286] phi from main::@12 to play_spawn_current [phi:main::@12->play_spawn_current]
  play_spawn_current_from___b12:
    // [286] phi (byte) game_over#65 = (byte) 0 [phi:main::@12->play_spawn_current#0] -- vbuz1=vbuc1 
    lda #0
    sta.z game_over
    // [286] phi (byte) next_piece_idx#17 = (byte) 0 [phi:main::@12->play_spawn_current#1] -- vbuz1=vbuc1 
    lda #0
    sta.z next_piece_idx
    jsr play_spawn_current
    // [26] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  __b13_from___b12:
    jmp __b13
    // main::@13
  __b13:
    // [27] call play_spawn_current 
    // [286] phi from main::@13 to play_spawn_current [phi:main::@13->play_spawn_current]
  play_spawn_current_from___b13:
    // [286] phi (byte) game_over#65 = (byte) game_over#52 [phi:main::@13->play_spawn_current#0] -- register_copy 
    // [286] phi (byte) next_piece_idx#17 = (byte) play_spawn_current::piece_idx#2 [phi:main::@13->play_spawn_current#1] -- register_copy 
    jsr play_spawn_current
    // [28] phi from main::@13 to main::@14 [phi:main::@13->main::@14]
  __b14_from___b13:
    jmp __b14
    // main::@14
  __b14:
    // [29] call render_playfield 
    // [151] phi from main::@14 to render_playfield [phi:main::@14->render_playfield]
  render_playfield_from___b14:
    // [151] phi (byte) render_screen_render#22 = (byte) $20 [phi:main::@14->render_playfield#0] -- vbuxx=vbuc1 
    ldx #$20
    jsr render_playfield
    jmp __b15
    // main::@15
  __b15:
    // [30] (byte) current_ypos#98 ← (byte) current_ypos#6 -- vbuxx=vbuz1 
    ldx.z current_ypos
    // [31] (byte) current_xpos#119 ← (byte) current_xpos#100 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z current_xpos_1
    // [32] (byte*) current_piece_gfx#112 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current.__7
    lda PIECES,y
    sta.z current_piece_gfx_1
    lda PIECES+1,y
    sta.z current_piece_gfx_1+1
    // [33] (byte) current_piece_char#100 ← (byte) current_piece_char#5 -- vbuz1=vbuz2 
    lda.z current_piece_char
    sta.z current_piece_char_1
    // [34] call render_moving 
    // [129] phi from main::@15 to render_moving [phi:main::@15->render_moving]
  render_moving_from___b15:
    // [129] phi (byte) current_piece_char#68 = (byte) current_piece_char#100 [phi:main::@15->render_moving#0] -- register_copy 
    // [129] phi (byte*) current_piece_gfx#64 = (byte*) current_piece_gfx#112 [phi:main::@15->render_moving#1] -- register_copy 
    // [129] phi (byte) current_xpos#59 = (byte) current_xpos#119 [phi:main::@15->render_moving#2] -- register_copy 
    // [129] phi (byte) render_screen_render#33 = (byte) $20 [phi:main::@15->render_moving#3] -- vbuz1=vbuc1 
    lda #$20
    sta.z render_screen_render_1
    // [129] phi (byte) current_ypos#13 = (byte) current_ypos#98 [phi:main::@15->render_moving#4] -- register_copy 
    jsr render_moving
    jmp __b16
    // main::@16
  __b16:
    // [35] (byte) next_piece_idx#77 ← (byte) play_spawn_current::piece_idx#2 -- vbuyy=vbuz1 
    ldy.z play_spawn_current.piece_idx
    // [36] call render_next 
    // [108] phi from main::@16 to render_next [phi:main::@16->render_next]
  render_next_from___b16:
    // [108] phi (byte) next_piece_idx#12 = (byte) next_piece_idx#77 [phi:main::@16->render_next#0] -- register_copy 
    // [108] phi (byte) render_screen_render#15 = (byte) $20 [phi:main::@16->render_next#1] -- vbuxx=vbuc1 
    ldx #$20
    jsr render_next
    jmp __b17
    // main::@17
  __b17:
    // [37] (byte*) current_piece#101 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current.__7
    lda PIECES,y
    sta.z current_piece
    lda PIECES+1,y
    sta.z current_piece+1
    // [38] (byte*) current_piece_gfx#123 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current.__7
    lda PIECES,y
    sta.z current_piece_gfx
    lda PIECES+1,y
    sta.z current_piece_gfx+1
    // [39] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
  __b1_from___b17:
    // [39] phi (byte) level_bcd#11 = (byte) 0 [phi:main::@17->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z level_bcd
    // [39] phi (byte) level#10 = (byte) 0 [phi:main::@17->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z level
    // [39] phi (word) lines_bcd#19 = (word) 0 [phi:main::@17->main::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z lines_bcd
    lda #>0
    sta.z lines_bcd+1
    // [39] phi (byte) current_movedown_counter#16 = (byte) 0 [phi:main::@17->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z current_movedown_counter
    // [39] phi (byte) keyboard_events_size#19 = (byte) 0 [phi:main::@17->main::@1#4] -- vbuz1=vbuc1 
    lda #0
    sta.z keyboard_events_size
    // [39] phi (byte) next_piece_idx#10 = (byte) play_spawn_current::piece_idx#2 [phi:main::@17->main::@1#5] -- register_copy 
    // [39] phi (byte) game_over#10 = (byte) game_over#52 [phi:main::@17->main::@1#6] -- register_copy 
    // [39] phi (byte) current_ypos#11 = (byte) current_ypos#6 [phi:main::@17->main::@1#7] -- register_copy 
    // [39] phi (byte) current_xpos#14 = (byte) current_xpos#100 [phi:main::@17->main::@1#8] -- register_copy 
    // [39] phi (byte*) current_piece_gfx#13 = (byte*) current_piece_gfx#123 [phi:main::@17->main::@1#9] -- register_copy 
    // [39] phi (byte) current_orientation#13 = (byte) 0 [phi:main::@17->main::@1#10] -- vbuz1=vbuc1 
    lda #0
    sta.z current_orientation
    // [39] phi (byte) current_piece_char#10 = (byte) current_piece_char#5 [phi:main::@17->main::@1#11] -- register_copy 
    // [39] phi (byte*) current_piece#10 = (byte*) current_piece#101 [phi:main::@17->main::@1#12] -- register_copy 
    // [39] phi (byte) current_movedown_slow#14 = (byte) current_movedown_slow#1 [phi:main::@17->main::@1#13] -- register_copy 
    // [39] phi (byte) render_screen_render#18 = (byte) $20 [phi:main::@17->main::@1#14] -- vbuz1=vbuc1 
    lda #$20
    sta.z render_screen_render
    // [39] phi (byte) render_screen_show#16 = (byte) 0 [phi:main::@17->main::@1#15] -- vbuz1=vbuc1 
    lda #0
    sta.z render_screen_show
    jmp __b1
    // [39] phi from main::@25 main::@6 to main::@1 [phi:main::@25/main::@6->main::@1]
  __b1_from___b25:
  __b1_from___b6:
    // [39] phi (byte) level_bcd#11 = (byte) level_bcd#17 [phi:main::@25/main::@6->main::@1#0] -- register_copy 
    // [39] phi (byte) level#10 = (byte) level#17 [phi:main::@25/main::@6->main::@1#1] -- register_copy 
    // [39] phi (word) lines_bcd#19 = (word) lines_bcd#15 [phi:main::@25/main::@6->main::@1#2] -- register_copy 
    // [39] phi (byte) current_movedown_counter#16 = (byte) current_movedown_counter#14 [phi:main::@25/main::@6->main::@1#3] -- register_copy 
    // [39] phi (byte) keyboard_events_size#19 = (byte) keyboard_events_size#16 [phi:main::@25/main::@6->main::@1#4] -- register_copy 
    // [39] phi (byte) next_piece_idx#10 = (byte) next_piece_idx#16 [phi:main::@25/main::@6->main::@1#5] -- register_copy 
    // [39] phi (byte) game_over#10 = (byte) game_over#15 [phi:main::@25/main::@6->main::@1#6] -- register_copy 
    // [39] phi (byte) current_ypos#11 = (byte) current_ypos#19 [phi:main::@25/main::@6->main::@1#7] -- register_copy 
    // [39] phi (byte) current_xpos#14 = (byte) current_xpos#19 [phi:main::@25/main::@6->main::@1#8] -- register_copy 
    // [39] phi (byte*) current_piece_gfx#13 = (byte*) current_piece_gfx#18 [phi:main::@25/main::@6->main::@1#9] -- register_copy 
    // [39] phi (byte) current_orientation#13 = (byte) current_orientation#17 [phi:main::@25/main::@6->main::@1#10] -- register_copy 
    // [39] phi (byte) current_piece_char#10 = (byte) current_piece_char#16 [phi:main::@25/main::@6->main::@1#11] -- register_copy 
    // [39] phi (byte*) current_piece#10 = (byte*) current_piece#15 [phi:main::@25/main::@6->main::@1#12] -- register_copy 
    // [39] phi (byte) current_movedown_slow#14 = (byte) current_movedown_slow#21 [phi:main::@25/main::@6->main::@1#13] -- register_copy 
    // [39] phi (byte) render_screen_render#18 = (byte) render_screen_render#11 [phi:main::@25/main::@6->main::@1#14] -- register_copy 
    // [39] phi (byte) render_screen_show#16 = (byte) render_screen_show#13 [phi:main::@25/main::@6->main::@1#15] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
  // Wait for a frame to pass
    // main::@2
  __b2:
    // [40] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b2
    // [41] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [42] call render_show 
    //*BORDERCOL = render_screen_show/0x10;
    // Update D018 to show the selected screen
    jsr render_show
    // [43] phi from main::@3 to main::@18 [phi:main::@3->main::@18]
  __b18_from___b3:
    jmp __b18
    // main::@18
  __b18:
    // [44] call keyboard_event_scan 
  // Scan keyboard events
    // [391] phi from main::@18 to keyboard_event_scan [phi:main::@18->keyboard_event_scan]
  keyboard_event_scan_from___b18:
    jsr keyboard_event_scan
    // [45] phi from main::@18 to main::@19 [phi:main::@18->main::@19]
  __b19_from___b18:
    jmp __b19
    // main::@19
  __b19:
    // [46] call keyboard_event_get 
    jsr keyboard_event_get
    // [47] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
    jmp __b20
    // main::@20
  __b20:
    // [48] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3 -- vbuxx=vbuaa 
    tax
    // [49] if((byte) game_over#10==(byte) 0) goto main::@4 -- vbuz1_eq_0_then_la1 
    lda.z game_over
    cmp #0
    beq __b4
    jmp __b5
    // main::@5
  __b5:
    // [50] *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp __b5
    // main::@4
  __b4:
    // [51] (byte) play_movement::key_event#0 ← (byte) main::key_event#0 -- vbuz1=vbuxx 
    stx.z play_movement.key_event
    // [52] call play_movement 
    jsr play_movement
    // [53] (byte) play_movement::return#3 ← (byte) play_movement::return#2 -- vbuaa=vbuz1 
    lda.z play_movement.return
    jmp __b21
    // main::@21
  __b21:
    // [54] (byte) main::render#1 ← (byte) play_movement::return#3
    jmp __b6
    // main::@6
  __b6:
    // [55] if((byte) main::render#1==(byte) 0) goto main::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1_from___b6
    jmp __b7
    // main::@7
  __b7:
    // [56] (byte) render_screen_render#64 ← (byte) render_screen_render#18 -- vbuxx=vbuz1 
    ldx.z render_screen_render
    // [57] call render_playfield 
    // [151] phi from main::@7 to render_playfield [phi:main::@7->render_playfield]
  render_playfield_from___b7:
    // [151] phi (byte) render_screen_render#22 = (byte) render_screen_render#64 [phi:main::@7->render_playfield#0] -- register_copy 
    jsr render_playfield
    jmp __b22
    // main::@22
  __b22:
    // [58] (byte) current_ypos#99 ← (byte) current_ypos#19 -- vbuxx=vbuz1 
    ldx.z current_ypos
    // [59] (byte) render_screen_render#65 ← (byte) render_screen_render#18 -- vbuz1=vbuz2 
    lda.z render_screen_render
    sta.z render_screen_render_1
    // [60] (byte) current_xpos#120 ← (byte) current_xpos#19 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z current_xpos_1
    // [61] (byte*) current_piece_gfx#113 ← (byte*) current_piece_gfx#18 -- pbuz1=pbuz2 
    lda.z current_piece_gfx
    sta.z current_piece_gfx_1
    lda.z current_piece_gfx+1
    sta.z current_piece_gfx_1+1
    // [62] (byte) current_piece_char#101 ← (byte) current_piece_char#16 -- vbuz1=vbuz2 
    lda.z current_piece_char
    sta.z current_piece_char_1
    // [63] call render_moving 
    // [129] phi from main::@22 to render_moving [phi:main::@22->render_moving]
  render_moving_from___b22:
    // [129] phi (byte) current_piece_char#68 = (byte) current_piece_char#101 [phi:main::@22->render_moving#0] -- register_copy 
    // [129] phi (byte*) current_piece_gfx#64 = (byte*) current_piece_gfx#113 [phi:main::@22->render_moving#1] -- register_copy 
    // [129] phi (byte) current_xpos#59 = (byte) current_xpos#120 [phi:main::@22->render_moving#2] -- register_copy 
    // [129] phi (byte) render_screen_render#33 = (byte) render_screen_render#65 [phi:main::@22->render_moving#3] -- register_copy 
    // [129] phi (byte) current_ypos#13 = (byte) current_ypos#99 [phi:main::@22->render_moving#4] -- register_copy 
    jsr render_moving
    jmp __b23
    // main::@23
  __b23:
    // [64] (byte) render_screen_render#66 ← (byte) render_screen_render#18 -- vbuxx=vbuz1 
    ldx.z render_screen_render
    // [65] (byte) next_piece_idx#78 ← (byte) next_piece_idx#16 -- vbuyy=vbuz1 
    ldy.z next_piece_idx
    // [66] call render_next 
    // [108] phi from main::@23 to render_next [phi:main::@23->render_next]
  render_next_from___b23:
    // [108] phi (byte) next_piece_idx#12 = (byte) next_piece_idx#78 [phi:main::@23->render_next#0] -- register_copy 
    // [108] phi (byte) render_screen_render#15 = (byte) render_screen_render#66 [phi:main::@23->render_next#1] -- register_copy 
    jsr render_next
    // [67] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
  __b24_from___b23:
    jmp __b24
    // main::@24
  __b24:
    // [68] call render_score 
    jsr render_score
    // [69] phi from main::@24 to main::@25 [phi:main::@24->main::@25]
  __b25_from___b24:
    jmp __b25
    // main::@25
  __b25:
    // [70] call render_screen_swap 
    jsr render_screen_swap
    jmp __b1_from___b25
}
  // render_screen_swap
// Swap rendering to the other screen (used for double buffering)
render_screen_swap: {
    // [71] (byte) render_screen_render#11 ← (byte) render_screen_render#18 ^ (byte) $20 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #$20
    eor.z render_screen_render
    sta.z render_screen_render
    // [72] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte) $20 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #$20
    eor.z render_screen_show
    sta.z render_screen_show
    jmp __breturn
    // render_screen_swap::@return
  __breturn:
    // [73] return 
    rts
}
  // render_score
// Show the current score
render_score: {
    .label score_bytes = score_bcd
    .const score_offset = $28*5+$1c
    .const lines_offset = $28*1+$16
    .const level_offset = $28*$13+$1f
    .label screen = 7
    // [74] if((byte) render_screen_render#18==(byte) 0) goto render_score::@1 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_render
    cmp #0
    beq __b1_from_render_score
    // [76] phi from render_score to render_score::@2 [phi:render_score->render_score::@2]
  __b2_from_render_score:
    // [76] phi (byte*) render_score::screen#3 = (const nomodify byte*) PLAYFIELD_SCREEN_2 [phi:render_score->render_score::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2
    sta.z screen
    lda #>PLAYFIELD_SCREEN_2
    sta.z screen+1
    jmp __b2
    // [75] phi from render_score to render_score::@1 [phi:render_score->render_score::@1]
  __b1_from_render_score:
    jmp __b1
    // render_score::@1
  __b1:
    // [76] phi from render_score::@1 to render_score::@2 [phi:render_score::@1->render_score::@2]
  __b2_from___b1:
    // [76] phi (byte*) render_score::screen#3 = (const nomodify byte*) PLAYFIELD_SCREEN_1 [phi:render_score::@1->render_score::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1
    sta.z screen
    lda #>PLAYFIELD_SCREEN_1
    sta.z screen+1
    jmp __b2
    // render_score::@2
  __b2:
    // [77] (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3
    // [78] (byte) render_bcd::bcd#0 ← *((const byte*) render_score::score_bytes+(byte) 2) -- vbuxx=_deref_pbuc1 
    ldx score_bytes+2
    // [79] call render_bcd 
    // [96] phi from render_score::@2 to render_bcd [phi:render_score::@2->render_bcd]
  render_bcd_from___b2:
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#0 [phi:render_score::@2->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@2->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset [phi:render_score::@2->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset
    sta.z render_bcd.offset
    lda #>score_offset
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#0 [phi:render_score::@2->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp __b3
    // render_score::@3
  __b3:
    // [80] (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#3
    // [81] (byte) render_bcd::bcd#1 ← *((const byte*) render_score::score_bytes+(byte) 1) -- vbuxx=_deref_pbuc1 
    ldx score_bytes+1
    // [82] call render_bcd 
    // [96] phi from render_score::@3 to render_bcd [phi:render_score::@3->render_bcd]
  render_bcd_from___b3:
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#1 [phi:render_score::@3->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@3->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset+(byte) 2 [phi:render_score::@3->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset+2
    sta.z render_bcd.offset
    lda #>score_offset+2
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#1 [phi:render_score::@3->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp __b4
    // render_score::@4
  __b4:
    // [83] (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#3
    // [84] (byte) render_bcd::bcd#2 ← *((const byte*) render_score::score_bytes) -- vbuxx=_deref_pbuc1 
    ldx.z score_bytes
    // [85] call render_bcd 
    // [96] phi from render_score::@4 to render_bcd [phi:render_score::@4->render_bcd]
  render_bcd_from___b4:
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#2 [phi:render_score::@4->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@4->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset+(byte) 4 [phi:render_score::@4->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset+4
    sta.z render_bcd.offset
    lda #>score_offset+4
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#2 [phi:render_score::@4->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp __b5
    // render_score::@5
  __b5:
    // [86] (byte) render_bcd::bcd#3 ← > (word) lines_bcd#15 -- vbuxx=_hi_vwuz1 
    ldx.z lines_bcd+1
    // [87] (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#3
    // [88] call render_bcd 
    // [96] phi from render_score::@5 to render_bcd [phi:render_score::@5->render_bcd]
  render_bcd_from___b5:
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#3 [phi:render_score::@5->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 1 [phi:render_score::@5->render_bcd#1] -- vbuyy=vbuc1 
    ldy #1
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::lines_offset [phi:render_score::@5->render_bcd#2] -- vwuz1=vwuc1 
    lda #<lines_offset
    sta.z render_bcd.offset
    lda #>lines_offset
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#3 [phi:render_score::@5->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp __b6
    // render_score::@6
  __b6:
    // [89] (byte) render_bcd::bcd#4 ← < (word) lines_bcd#15 -- vbuxx=_lo_vwuz1 
    ldx.z lines_bcd
    // [90] (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#3
    // [91] call render_bcd 
    // [96] phi from render_score::@6 to render_bcd [phi:render_score::@6->render_bcd]
  render_bcd_from___b6:
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#4 [phi:render_score::@6->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@6->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::lines_offset+(byte) 1 [phi:render_score::@6->render_bcd#2] -- vwuz1=vwuc1 
    lda #<lines_offset+1
    sta.z render_bcd.offset
    lda #>lines_offset+1
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#4 [phi:render_score::@6->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp __b7
    // render_score::@7
  __b7:
    // [92] (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#3
    // [93] (byte) render_bcd::bcd#5 ← (byte) level_bcd#17 -- vbuxx=vbuz1 
    ldx.z level_bcd
    // [94] call render_bcd 
    // [96] phi from render_score::@7 to render_bcd [phi:render_score::@7->render_bcd]
  render_bcd_from___b7:
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#5 [phi:render_score::@7->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@7->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::level_offset [phi:render_score::@7->render_bcd#2] -- vwuz1=vwuc1 
    lda #<level_offset
    sta.z render_bcd.offset
    lda #>level_offset
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#5 [phi:render_score::@7->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp __breturn
    // render_score::@return
  __breturn:
    // [95] return 
    rts
}
  // render_bcd
// Render BCD digits on a screen.
// - screen: pointer to the screen to render on
// - offset: offset on the screen
// - bcd: The BCD-value to render
// - only_low: if non-zero only renders the low digit
// render_bcd(byte* zp(7) screen, word zp($a) offset, byte register(X) bcd, byte register(Y) only_low)
render_bcd: {
    .const ZERO_CHAR = $35
    .label screen = 7
    .label screen_pos = $a
    .label offset = $a
    // [97] (byte*) render_bcd::screen_pos#0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z screen_pos
    clc
    adc.z screen
    sta.z screen_pos
    lda.z screen_pos+1
    adc.z screen+1
    sta.z screen_pos+1
    // [98] if((byte) render_bcd::only_low#6!=(byte) 0) goto render_bcd::@1 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b1_from_render_bcd
    jmp __b2
    // render_bcd::@2
  __b2:
    // [99] (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#6 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [100] (byte~) render_bcd::$6 ← (const nomodify byte) render_bcd::ZERO_CHAR + (byte~) render_bcd::$5 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #ZERO_CHAR
    // [101] *((byte*) render_bcd::screen_pos#0) ← (byte~) render_bcd::$6 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (screen_pos),y
    // [102] (byte*) render_bcd::screen_pos#2 ← ++ (byte*) render_bcd::screen_pos#0 -- pbuz1=_inc_pbuz1 
    inc.z screen_pos
    bne !+
    inc.z screen_pos+1
  !:
    // [103] phi from render_bcd render_bcd::@2 to render_bcd::@1 [phi:render_bcd/render_bcd::@2->render_bcd::@1]
  __b1_from_render_bcd:
  __b1_from___b2:
    // [103] phi (byte*) render_bcd::screen_pos#3 = (byte*) render_bcd::screen_pos#0 [phi:render_bcd/render_bcd::@2->render_bcd::@1#0] -- register_copy 
    jmp __b1
    // render_bcd::@1
  __b1:
    // [104] (byte~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [105] (byte~) render_bcd::$4 ← (const nomodify byte) render_bcd::ZERO_CHAR + (byte~) render_bcd::$3 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #ZERO_CHAR
    // [106] *((byte*) render_bcd::screen_pos#3) ← (byte~) render_bcd::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (screen_pos),y
    jmp __breturn
    // render_bcd::@return
  __breturn:
    // [107] return 
    rts
}
  // render_next
// Render the next tetromino in the "next" area
render_next: {
    // Find the screen area
    .const next_area_offset = $28*$c+$18+4
    .label next_piece_char = $3b
    .label next_piece_gfx = 7
    .label screen_next_area = $a
    .label l = 5
    // [109] if((byte) render_screen_render#15==(byte) 0) goto render_next::@1 -- vbuxx_eq_0_then_la1 
    cpx #0
    beq __b1_from_render_next
    // [111] phi from render_next to render_next::@2 [phi:render_next->render_next::@2]
  __b2_from_render_next:
    // [111] phi (byte*) render_next::screen_next_area#11 = (const nomodify byte*) PLAYFIELD_SCREEN_2+(const word) render_next::next_area_offset [phi:render_next->render_next::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2+next_area_offset
    sta.z screen_next_area
    lda #>PLAYFIELD_SCREEN_2+next_area_offset
    sta.z screen_next_area+1
    jmp __b2
    // [110] phi from render_next to render_next::@1 [phi:render_next->render_next::@1]
  __b1_from_render_next:
    jmp __b1
    // render_next::@1
  __b1:
    // [111] phi from render_next::@1 to render_next::@2 [phi:render_next::@1->render_next::@2]
  __b2_from___b1:
    // [111] phi (byte*) render_next::screen_next_area#11 = (const nomodify byte*) PLAYFIELD_SCREEN_1+(const word) render_next::next_area_offset [phi:render_next::@1->render_next::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1+next_area_offset
    sta.z screen_next_area
    lda #>PLAYFIELD_SCREEN_1+next_area_offset
    sta.z screen_next_area+1
    jmp __b2
    // render_next::@2
  __b2:
    // [112] (byte~) render_next::$6 ← (byte) next_piece_idx#12 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [113] (byte) render_next::next_piece_char#0 ← *((const byte*) PIECES_NEXT_CHARS + (byte) next_piece_idx#12) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda PIECES_NEXT_CHARS,y
    sta.z next_piece_char
    // [114] (byte*) render_next::next_piece_gfx#8 ← (byte*)*((const word*) PIECES + (byte~) render_next::$6) -- pbuz1=pptc1_derefidx_vbuxx 
    lda PIECES,x
    sta.z next_piece_gfx
    lda PIECES+1,x
    sta.z next_piece_gfx+1
    // [115] phi from render_next::@2 to render_next::@3 [phi:render_next::@2->render_next::@3]
  __b3_from___b2:
    // [115] phi (byte) render_next::l#7 = (byte) 0 [phi:render_next::@2->render_next::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [115] phi (byte*) render_next::screen_next_area#10 = (byte*) render_next::screen_next_area#11 [phi:render_next::@2->render_next::@3#1] -- register_copy 
    // [115] phi (byte*) render_next::next_piece_gfx#3 = (byte*) render_next::next_piece_gfx#8 [phi:render_next::@2->render_next::@3#2] -- register_copy 
    jmp __b3
    // [115] phi from render_next::@8 to render_next::@3 [phi:render_next::@8->render_next::@3]
  __b3_from___b8:
    // [115] phi (byte) render_next::l#7 = (byte) render_next::l#1 [phi:render_next::@8->render_next::@3#0] -- register_copy 
    // [115] phi (byte*) render_next::screen_next_area#10 = (byte*) render_next::screen_next_area#4 [phi:render_next::@8->render_next::@3#1] -- register_copy 
    // [115] phi (byte*) render_next::next_piece_gfx#3 = (byte*) render_next::next_piece_gfx#1 [phi:render_next::@8->render_next::@3#2] -- register_copy 
    jmp __b3
    // render_next::@3
  __b3:
    // [116] phi from render_next::@3 to render_next::@4 [phi:render_next::@3->render_next::@4]
  __b4_from___b3:
    // [116] phi (byte) render_next::c#2 = (byte) 0 [phi:render_next::@3->render_next::@4#0] -- vbuxx=vbuc1 
    ldx #0
    // [116] phi (byte*) render_next::screen_next_area#5 = (byte*) render_next::screen_next_area#10 [phi:render_next::@3->render_next::@4#1] -- register_copy 
    // [116] phi (byte*) render_next::next_piece_gfx#2 = (byte*) render_next::next_piece_gfx#3 [phi:render_next::@3->render_next::@4#2] -- register_copy 
    jmp __b4
    // [116] phi from render_next::@6 to render_next::@4 [phi:render_next::@6->render_next::@4]
  __b4_from___b6:
    // [116] phi (byte) render_next::c#2 = (byte) render_next::c#1 [phi:render_next::@6->render_next::@4#0] -- register_copy 
    // [116] phi (byte*) render_next::screen_next_area#5 = (byte*) render_next::screen_next_area#3 [phi:render_next::@6->render_next::@4#1] -- register_copy 
    // [116] phi (byte*) render_next::next_piece_gfx#2 = (byte*) render_next::next_piece_gfx#1 [phi:render_next::@6->render_next::@4#2] -- register_copy 
    jmp __b4
    // render_next::@4
  __b4:
    // [117] (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (next_piece_gfx),y
    // [118] (byte*) render_next::next_piece_gfx#1 ← ++ (byte*) render_next::next_piece_gfx#2 -- pbuz1=_inc_pbuz1 
    inc.z next_piece_gfx
    bne !+
    inc.z next_piece_gfx+1
  !:
    // [119] if((byte) render_next::cell#0!=(byte) 0) goto render_next::@5 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b5
    jmp __b7
    // render_next::@7
  __b7:
    // [120] *((byte*) render_next::screen_next_area#5) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (screen_next_area),y
    jmp __b6
    // render_next::@6
  __b6:
    // [121] (byte*) render_next::screen_next_area#3 ← ++ (byte*) render_next::screen_next_area#5 -- pbuz1=_inc_pbuz1 
    inc.z screen_next_area
    bne !+
    inc.z screen_next_area+1
  !:
    // [122] (byte) render_next::c#1 ← ++ (byte) render_next::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [123] if((byte) render_next::c#1!=(byte) 4) goto render_next::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b4_from___b6
    jmp __b8
    // render_next::@8
  __b8:
    // [124] (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#3 + (byte) $24 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$24
    clc
    adc.z screen_next_area
    sta.z screen_next_area
    bcc !+
    inc.z screen_next_area+1
  !:
    // [125] (byte) render_next::l#1 ← ++ (byte) render_next::l#7 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [126] if((byte) render_next::l#1!=(byte) 4) goto render_next::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne __b3_from___b8
    jmp __breturn
    // render_next::@return
  __breturn:
    // [127] return 
    rts
    // render_next::@5
  __b5:
    // [128] *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#0 -- _deref_pbuz1=vbuz2 
    lda.z next_piece_char
    ldy #0
    sta (screen_next_area),y
    jmp __b6
}
  // render_moving
// Render the current moving piece at position (current_xpos, current_ypos)
// Ignores cases where parts of the tetromino is outside the playfield (sides/bottom) since the movement collision routine prevents this.
render_moving: {
    .label ypos = $c
    .label screen_line = $30
    .label xpos = $21
    .label i = $1d
    .label l = $1c
    // [130] (byte) render_moving::ypos#0 ← (byte) current_ypos#13 -- vbuz1=vbuxx 
    stx.z ypos
    // [131] phi from render_moving to render_moving::@1 [phi:render_moving->render_moving::@1]
  __b1_from_render_moving:
    // [131] phi (byte) render_moving::l#4 = (byte) 0 [phi:render_moving->render_moving::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [131] phi (byte) render_moving::i#3 = (byte) 0 [phi:render_moving->render_moving::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [131] phi (byte) render_moving::ypos#2 = (byte) render_moving::ypos#0 [phi:render_moving->render_moving::@1#2] -- register_copy 
    jmp __b1
    // [131] phi from render_moving::@3 to render_moving::@1 [phi:render_moving::@3->render_moving::@1]
  __b1_from___b3:
    // [131] phi (byte) render_moving::l#4 = (byte) render_moving::l#1 [phi:render_moving::@3->render_moving::@1#0] -- register_copy 
    // [131] phi (byte) render_moving::i#3 = (byte) render_moving::i#8 [phi:render_moving::@3->render_moving::@1#1] -- register_copy 
    // [131] phi (byte) render_moving::ypos#2 = (byte) render_moving::ypos#1 [phi:render_moving::@3->render_moving::@1#2] -- register_copy 
    jmp __b1
    // render_moving::@1
  __b1:
    // [132] if((byte) render_moving::ypos#2>=(byte) 1+(byte) 1) goto render_moving::@2 -- vbuz1_ge_vbuc1_then_la1 
    lda.z ypos
    cmp #1+1
    bcs __b2
    jmp __b7
    // render_moving::@7
  __b7:
    // [133] (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z i
    axs #-[4]
    stx.z i
    // [134] phi from render_moving::@5 render_moving::@7 to render_moving::@3 [phi:render_moving::@5/render_moving::@7->render_moving::@3]
  __b3_from___b5:
  __b3_from___b7:
    // [134] phi (byte) render_moving::i#8 = (byte) render_moving::i#2 [phi:render_moving::@5/render_moving::@7->render_moving::@3#0] -- register_copy 
    jmp __b3
    // render_moving::@3
  __b3:
    // [135] (byte) render_moving::ypos#1 ← ++ (byte) render_moving::ypos#2 -- vbuz1=_inc_vbuz1 
    inc.z ypos
    // [136] (byte) render_moving::l#1 ← ++ (byte) render_moving::l#4 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [137] if((byte) render_moving::l#1!=(byte) 4) goto render_moving::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne __b1_from___b3
    jmp __breturn
    // render_moving::@return
  __breturn:
    // [138] return 
    rts
    // render_moving::@2
  __b2:
    // [139] (byte~) render_moving::$1 ← (byte) render_screen_render#33 + (byte) render_moving::ypos#2 -- vbuaa=vbuz1_plus_vbuz2 
    lda.z render_screen_render_1
    clc
    adc.z ypos
    // [140] (byte~) render_moving::$6 ← (byte~) render_moving::$1 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [141] (byte*) render_moving::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_moving::$6) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda screen_lines_1,y
    sta.z screen_line
    lda screen_lines_1+1,y
    sta.z screen_line+1
    // [142] (byte) render_moving::xpos#0 ← (byte) current_xpos#59 -- vbuz1=vbuz2 
    lda.z current_xpos_1
    sta.z xpos
    // [143] phi from render_moving::@2 to render_moving::@4 [phi:render_moving::@2->render_moving::@4]
  __b4_from___b2:
    // [143] phi (byte) render_moving::c#2 = (byte) 0 [phi:render_moving::@2->render_moving::@4#0] -- vbuxx=vbuc1 
    ldx #0
    // [143] phi (byte) render_moving::xpos#2 = (byte) render_moving::xpos#0 [phi:render_moving::@2->render_moving::@4#1] -- register_copy 
    // [143] phi (byte) render_moving::i#4 = (byte) render_moving::i#3 [phi:render_moving::@2->render_moving::@4#2] -- register_copy 
    jmp __b4
    // [143] phi from render_moving::@5 to render_moving::@4 [phi:render_moving::@5->render_moving::@4]
  __b4_from___b5:
    // [143] phi (byte) render_moving::c#2 = (byte) render_moving::c#1 [phi:render_moving::@5->render_moving::@4#0] -- register_copy 
    // [143] phi (byte) render_moving::xpos#2 = (byte) render_moving::xpos#1 [phi:render_moving::@5->render_moving::@4#1] -- register_copy 
    // [143] phi (byte) render_moving::i#4 = (byte) render_moving::i#2 [phi:render_moving::@5->render_moving::@4#2] -- register_copy 
    jmp __b4
    // render_moving::@4
  __b4:
    // [144] (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_moving::i#4) -- vbuaa=pbuz1_derefidx_vbuz2 
    ldy.z i
    lda (current_piece_gfx_1),y
    // [145] (byte) render_moving::i#2 ← ++ (byte) render_moving::i#4 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [146] if((byte) render_moving::current_cell#0==(byte) 0) goto render_moving::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b5
    jmp __b6
    // render_moving::@6
  __b6:
    // [147] *((byte*) render_moving::screen_line#0 + (byte) render_moving::xpos#2) ← (byte) current_piece_char#68 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z current_piece_char_1
    ldy.z xpos
    sta (screen_line),y
    jmp __b5
    // render_moving::@5
  __b5:
    // [148] (byte) render_moving::xpos#1 ← ++ (byte) render_moving::xpos#2 -- vbuz1=_inc_vbuz1 
    inc.z xpos
    // [149] (byte) render_moving::c#1 ← ++ (byte) render_moving::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [150] if((byte) render_moving::c#1!=(byte) 4) goto render_moving::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b4_from___b5
    jmp __b3_from___b5
}
  // render_playfield
// Render the static playfield on the screen (all pieces already locked into place)
render_playfield: {
    .label screen_line = $a
    // Do not render the top 2 lines.
    .label i = $1c
    .label c = $1d
    .label l = $c
    // [152] phi from render_playfield to render_playfield::@1 [phi:render_playfield->render_playfield::@1]
  __b1_from_render_playfield:
    // [152] phi (byte) render_playfield::i#3 = (const nomodify byte) PLAYFIELD_COLS*(byte) 2 [phi:render_playfield->render_playfield::@1#0] -- vbuz1=vbuc1 
    lda #PLAYFIELD_COLS*2
    sta.z i
    // [152] phi (byte) render_playfield::l#2 = (byte) 2 [phi:render_playfield->render_playfield::@1#1] -- vbuz1=vbuc1 
    lda #2
    sta.z l
    jmp __b1
    // [152] phi from render_playfield::@3 to render_playfield::@1 [phi:render_playfield::@3->render_playfield::@1]
  __b1_from___b3:
    // [152] phi (byte) render_playfield::i#3 = (byte) render_playfield::i#1 [phi:render_playfield::@3->render_playfield::@1#0] -- register_copy 
    // [152] phi (byte) render_playfield::l#2 = (byte) render_playfield::l#1 [phi:render_playfield::@3->render_playfield::@1#1] -- register_copy 
    jmp __b1
    // render_playfield::@1
  __b1:
    // [153] (byte~) render_playfield::$0 ← (byte) render_screen_render#22 + (byte) render_playfield::l#2 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z l
    // [154] (byte~) render_playfield::$3 ← (byte~) render_playfield::$0 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [155] (byte*) render_playfield::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_playfield::$3) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda screen_lines_1,y
    sta.z screen_line
    lda screen_lines_1+1,y
    sta.z screen_line+1
    // [156] phi from render_playfield::@1 to render_playfield::@2 [phi:render_playfield::@1->render_playfield::@2]
  __b2_from___b1:
    // [156] phi (byte) render_playfield::c#2 = (byte) 0 [phi:render_playfield::@1->render_playfield::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [156] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#0 [phi:render_playfield::@1->render_playfield::@2#1] -- register_copy 
    // [156] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#3 [phi:render_playfield::@1->render_playfield::@2#2] -- register_copy 
    jmp __b2
    // [156] phi from render_playfield::@2 to render_playfield::@2 [phi:render_playfield::@2->render_playfield::@2]
  __b2_from___b2:
    // [156] phi (byte) render_playfield::c#2 = (byte) render_playfield::c#1 [phi:render_playfield::@2->render_playfield::@2#0] -- register_copy 
    // [156] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#1 [phi:render_playfield::@2->render_playfield::@2#1] -- register_copy 
    // [156] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#1 [phi:render_playfield::@2->render_playfield::@2#2] -- register_copy 
    jmp __b2
    // render_playfield::@2
  __b2:
    // [157] *((byte*) render_playfield::screen_line#2) ← *((const byte*) playfield + (byte) render_playfield::i#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda playfield,y
    ldy #0
    sta (screen_line),y
    // [158] (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2 -- pbuz1=_inc_pbuz1 
    inc.z screen_line
    bne !+
    inc.z screen_line+1
  !:
    // [159] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [160] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [161] if((byte) render_playfield::c#1!=(const nomodify byte) PLAYFIELD_COLS-(byte) 1+(byte) 1) goto render_playfield::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_COLS-1+1
    cmp.z c
    bne __b2_from___b2
    jmp __b3
    // render_playfield::@3
  __b3:
    // [162] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [163] if((byte) render_playfield::l#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto render_playfield::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_LINES-1+1
    cmp.z l
    bne __b1_from___b3
    jmp __breturn
    // render_playfield::@return
  __breturn:
    // [164] return 
    rts
}
  // play_movement
// Perform any movement of the current piece
// key_event is the next keyboard_event() og 0xff if no keyboard event is pending
// Returns a byte signaling whether rendering is needed. (0 no render, >0 render needed)
// play_movement(byte zp($2f) key_event)
play_movement: {
    .label render = $21
    .label return = $21
    .label key_event = $2f
    // [165] (byte) play_move_down::key_event#0 ← (byte) play_movement::key_event#0 -- vbuaa=vbuz1 
    lda.z key_event
    // [166] call play_move_down 
    jsr play_move_down
    // [167] (byte) play_move_down::return#0 ← (byte) play_move_down::return#3 -- vbuaa=vbuxx 
    txa
    jmp __b2
    // play_movement::@2
  __b2:
    // [168] (byte) play_movement::render#1 ← (byte) play_move_down::return#0 -- vbuz1=vbuaa 
    sta.z render
    // [169] if((byte) game_over#15==(byte) 0) goto play_movement::@1 -- vbuz1_eq_0_then_la1 
    lda.z game_over
    cmp #0
    beq __b1
    // [170] phi from play_movement::@2 play_movement::@4 to play_movement::@return [phi:play_movement::@2/play_movement::@4->play_movement::@return]
  __breturn_from___b2:
  __breturn_from___b4:
    // [170] phi (byte) current_xpos#19 = (byte) current_xpos#22 [phi:play_movement::@2/play_movement::@4->play_movement::@return#0] -- register_copy 
    // [170] phi (byte*) current_piece_gfx#18 = (byte*) current_piece_gfx#20 [phi:play_movement::@2/play_movement::@4->play_movement::@return#1] -- register_copy 
    // [170] phi (byte) current_orientation#17 = (byte) current_orientation#20 [phi:play_movement::@2/play_movement::@4->play_movement::@return#2] -- register_copy 
    // [170] phi (byte) play_movement::return#2 = (byte) play_movement::render#1 [phi:play_movement::@2/play_movement::@4->play_movement::@return#3] -- register_copy 
    jmp __breturn
    // play_movement::@return
  __breturn:
    // [171] return 
    rts
    // play_movement::@1
  __b1:
    // [172] (byte) play_move_leftright::key_event#0 ← (byte) play_movement::key_event#0 -- vbuaa=vbuz1 
    lda.z key_event
    // [173] call play_move_leftright 
    jsr play_move_leftright
    // [174] (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2
    jmp __b3
    // play_movement::@3
  __b3:
    // [175] (byte~) play_movement::$3 ← (byte) play_move_leftright::return#0
    // [176] (byte) play_movement::render#2 ← (byte) play_movement::render#1 + (byte~) play_movement::$3 -- vbuz1=vbuz1_plus_vbuaa 
    clc
    adc.z render
    sta.z render
    // [177] (byte) play_move_rotate::key_event#0 ← (byte) play_movement::key_event#0 -- vbuaa=vbuz1 
    lda.z key_event
    // [178] call play_move_rotate 
    jsr play_move_rotate
    // [179] (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2
    jmp __b4
    // play_movement::@4
  __b4:
    // [180] (byte~) play_movement::$4 ← (byte) play_move_rotate::return#0
    // [181] (byte) play_movement::return#0 ← (byte) play_movement::render#2 + (byte~) play_movement::$4 -- vbuz1=vbuz1_plus_vbuaa 
    clc
    adc.z return
    sta.z return
    jmp __breturn_from___b4
}
  // play_move_rotate
// Rotate the current piece  based on key-presses
// Return non-zero if a render is needed
// play_move_rotate(byte register(A) key_event)
play_move_rotate: {
    // Handle keyboard events
    .label orientation = $c
    // [182] if((byte) play_move_rotate::key_event#0==(const nomodify byte) KEY_Z) goto play_move_rotate::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_Z
    beq __b1
    jmp __b4
    // play_move_rotate::@4
  __b4:
    // [183] if((byte) play_move_rotate::key_event#0==(const nomodify byte) KEY_X) goto play_move_rotate::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_X
    beq __b2
    // [184] phi from play_move_rotate::@4 play_move_rotate::@6 to play_move_rotate::@return [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return]
  __breturn_from___b4:
  __breturn_from___b6:
    // [184] phi (byte*) current_piece_gfx#21 = (byte*) current_piece_gfx#20 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#0] -- register_copy 
    // [184] phi (byte) current_orientation#25 = (byte) current_orientation#20 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#1] -- register_copy 
    // [184] phi (byte) play_move_rotate::return#2 = (byte) 0 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#2] -- vbuaa=vbuc1 
    lda #0
    jmp __breturn
    // play_move_rotate::@return
  __breturn:
    // [185] return 
    rts
    // play_move_rotate::@2
  __b2:
    // [186] (byte~) play_move_rotate::$5 ← (byte) current_orientation#20 + (byte) $10 -- vbuxx=vbuz1_plus_vbuc1 
    lax.z current_orientation
    axs #-[$10]
    // [187] (byte) play_move_rotate::orientation#2 ← (byte~) play_move_rotate::$5 & (byte) $3f -- vbuz1=vbuxx_band_vbuc1 
    lda #$3f
    sax.z orientation
    // [188] phi from play_move_rotate::@1 play_move_rotate::@2 to play_move_rotate::@3 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@3]
  __b3_from___b1:
  __b3_from___b2:
    // [188] phi (byte) play_move_rotate::orientation#3 = (byte) play_move_rotate::orientation#1 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@3#0] -- register_copy 
    jmp __b3
    // play_move_rotate::@3
  __b3:
    // [189] (byte) play_collision::xpos#3 ← (byte) current_xpos#26 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [190] (byte) play_collision::ypos#3 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [191] (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3 -- vbuxx=vbuz1 
    ldx.z orientation
    // [192] (byte*) current_piece#99 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_1
    lda.z current_piece+1
    sta.z current_piece_1+1
    // [193] call play_collision 
    // [201] phi from play_move_rotate::@3 to play_collision [phi:play_move_rotate::@3->play_collision]
  play_collision_from___b3:
    // [201] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#3 [phi:play_move_rotate::@3->play_collision#0] -- register_copy 
    // [201] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#3 [phi:play_move_rotate::@3->play_collision#1] -- register_copy 
    // [201] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#3 [phi:play_move_rotate::@3->play_collision#2] -- register_copy 
    // [201] phi (byte*) current_piece#17 = (byte*) current_piece#99 [phi:play_move_rotate::@3->play_collision#3] -- register_copy 
    jsr play_collision
    // [194] (byte) play_collision::return#14 ← (byte) play_collision::return#15
    jmp __b6
    // play_move_rotate::@6
  __b6:
    // [195] (byte~) play_move_rotate::$2 ← (byte) play_collision::return#14
    // [196] if((byte~) play_move_rotate::$2!=(const nomodify byte) COLLISION_NONE) goto play_move_rotate::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne __breturn_from___b6
    jmp __b5
    // play_move_rotate::@5
  __b5:
    // [197] (byte) current_orientation#7 ← (byte) play_move_rotate::orientation#3 -- vbuz1=vbuz2 
    lda.z orientation
    sta.z current_orientation
    // [198] (byte*) current_piece_gfx#7 ← (byte*) current_piece#15 + (byte) current_orientation#7 -- pbuz1=pbuz2_plus_vbuz3 
    lda.z current_orientation
    clc
    adc.z current_piece
    sta.z current_piece_gfx
    lda #0
    adc.z current_piece+1
    sta.z current_piece_gfx+1
    // [184] phi from play_move_rotate::@5 to play_move_rotate::@return [phi:play_move_rotate::@5->play_move_rotate::@return]
  __breturn_from___b5:
    // [184] phi (byte*) current_piece_gfx#21 = (byte*) current_piece_gfx#7 [phi:play_move_rotate::@5->play_move_rotate::@return#0] -- register_copy 
    // [184] phi (byte) current_orientation#25 = (byte) current_orientation#7 [phi:play_move_rotate::@5->play_move_rotate::@return#1] -- register_copy 
    // [184] phi (byte) play_move_rotate::return#2 = (byte) 1 [phi:play_move_rotate::@5->play_move_rotate::@return#2] -- vbuaa=vbuc1 
    lda #1
    jmp __breturn
    // play_move_rotate::@1
  __b1:
    // [199] (byte~) play_move_rotate::$7 ← (byte) current_orientation#20 - (byte) $10 -- vbuaa=vbuz1_minus_vbuc1 
    lda.z current_orientation
    sec
    sbc #$10
    // [200] (byte) play_move_rotate::orientation#1 ← (byte~) play_move_rotate::$7 & (byte) $3f -- vbuz1=vbuaa_band_vbuc1 
    and #$3f
    sta.z orientation
    jmp __b3_from___b1
}
  // play_collision
// Test if there is a collision between the current piece moved to (x, y) and anything on the playfield or the playfield boundaries
// Returns information about the type of the collision detected
// play_collision(byte zp($1c) xpos, byte zp($1d) ypos, byte register(X) orientation)
play_collision: {
    .label xpos = $1c
    .label ypos = $1d
    .label piece_gfx = $a
    .label yp = $1d
    .label playfield_line = $32
    .label i = $3b
    .label xp = $3c
    .label l = $1e
    .label i_1 = $1f
    // [202] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#17 + (byte) play_collision::orientation#5 -- pbuz1=pbuz1_plus_vbuxx 
    txa
    clc
    adc.z piece_gfx
    sta.z piece_gfx
    bcc !+
    inc.z piece_gfx+1
  !:
    // [203] phi from play_collision to play_collision::@1 [phi:play_collision->play_collision::@1]
  __b1_from_play_collision:
    // [203] phi (byte) play_collision::l#6 = (byte) 0 [phi:play_collision->play_collision::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [203] phi (byte) play_collision::i#3 = (byte) 0 [phi:play_collision->play_collision::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i_1
    // [203] phi (byte) play_collision::yp#2 = (byte) play_collision::yp#0 [phi:play_collision->play_collision::@1#2] -- register_copy 
    jmp __b1
    // play_collision::@1
  __b1:
    // [204] (byte~) play_collision::$14 ← (byte) play_collision::yp#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z yp
    asl
    // [205] (byte*) play_collision::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_collision::$14) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda playfield_lines,y
    sta.z playfield_line
    lda playfield_lines+1,y
    sta.z playfield_line+1
    // [206] (byte) play_collision::xp#8 ← (byte) play_collision::xpos#6 -- vbuz1=vbuz2 
    lda.z xpos
    sta.z xp
    // [207] phi from play_collision::@1 to play_collision::@2 [phi:play_collision::@1->play_collision::@2]
  __b2_from___b1:
    // [207] phi (byte) play_collision::c#2 = (byte) 0 [phi:play_collision::@1->play_collision::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [207] phi (byte) play_collision::xp#2 = (byte) play_collision::xp#8 [phi:play_collision::@1->play_collision::@2#1] -- register_copy 
    // [207] phi (byte) play_collision::i#2 = (byte) play_collision::i#3 [phi:play_collision::@1->play_collision::@2#2] -- register_copy 
    jmp __b2
    // play_collision::@2
  __b2:
    // [208] (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2 -- vbuz1=_inc_vbuz2 
    ldy.z i_1
    iny
    sty.z i
    // [209] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z i_1
    lda (piece_gfx),y
    cmp #0
    beq __b3
    jmp __b7
    // play_collision::@7
  __b7:
    // [210] if((byte) play_collision::yp#2<(const nomodify byte) PLAYFIELD_LINES) goto play_collision::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z yp
    cmp #PLAYFIELD_LINES
    bcc __b4
    // [215] phi from play_collision::@7 to play_collision::@return [phi:play_collision::@7->play_collision::@return]
  __breturn_from___b7:
    // [215] phi (byte) play_collision::return#15 = (const nomodify byte) COLLISION_BOTTOM [phi:play_collision::@7->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_BOTTOM
    jmp __breturn
    // play_collision::@4
  __b4:
    // [211] (byte~) play_collision::$5 ← (byte) play_collision::xp#2 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z xp
    // [212] if((byte~) play_collision::$5==(byte) 0) goto play_collision::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b5
    // [215] phi from play_collision::@4 to play_collision::@return [phi:play_collision::@4->play_collision::@return]
  __breturn_from___b4:
    // [215] phi (byte) play_collision::return#15 = (const nomodify byte) COLLISION_LEFT [phi:play_collision::@4->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_LEFT
    jmp __breturn
    // play_collision::@5
  __b5:
    // [213] if((byte) play_collision::xp#2<(const nomodify byte) PLAYFIELD_COLS) goto play_collision::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z xp
    cmp #PLAYFIELD_COLS
    bcc __b6
    // [215] phi from play_collision::@5 to play_collision::@return [phi:play_collision::@5->play_collision::@return]
  __breturn_from___b5:
    // [215] phi (byte) play_collision::return#15 = (const nomodify byte) COLLISION_RIGHT [phi:play_collision::@5->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_RIGHT
    jmp __breturn
    // play_collision::@6
  __b6:
    // [214] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::xp#2)==(byte) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z xp
    lda (playfield_line),y
    cmp #0
    beq __b3
    // [215] phi from play_collision::@6 to play_collision::@return [phi:play_collision::@6->play_collision::@return]
  __breturn_from___b6:
    // [215] phi (byte) play_collision::return#15 = (const nomodify byte) COLLISION_PLAYFIELD [phi:play_collision::@6->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_PLAYFIELD
    jmp __breturn
    // play_collision::@return
  __breturn:
    // [216] return 
    rts
    // play_collision::@3
  __b3:
    // [217] (byte) play_collision::xp#1 ← ++ (byte) play_collision::xp#2 -- vbuz1=_inc_vbuz1 
    inc.z xp
    // [218] (byte) play_collision::c#1 ← ++ (byte) play_collision::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [219] if((byte) play_collision::c#1!=(byte) 4) goto play_collision::@10 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b10
    jmp __b8
    // play_collision::@8
  __b8:
    // [220] (byte) play_collision::yp#1 ← ++ (byte) play_collision::yp#2 -- vbuz1=_inc_vbuz1 
    inc.z yp
    // [221] (byte) play_collision::l#1 ← ++ (byte) play_collision::l#6 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [222] if((byte) play_collision::l#1!=(byte) 4) goto play_collision::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne __b9
    // [215] phi from play_collision::@8 to play_collision::@return [phi:play_collision::@8->play_collision::@return]
  __breturn_from___b8:
    // [215] phi (byte) play_collision::return#15 = (const nomodify byte) COLLISION_NONE [phi:play_collision::@8->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_NONE
    jmp __breturn
    // play_collision::@9
  __b9:
    // [223] (byte) play_collision::i#10 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_1
    // [203] phi from play_collision::@9 to play_collision::@1 [phi:play_collision::@9->play_collision::@1]
  __b1_from___b9:
    // [203] phi (byte) play_collision::l#6 = (byte) play_collision::l#1 [phi:play_collision::@9->play_collision::@1#0] -- register_copy 
    // [203] phi (byte) play_collision::i#3 = (byte) play_collision::i#10 [phi:play_collision::@9->play_collision::@1#1] -- register_copy 
    // [203] phi (byte) play_collision::yp#2 = (byte) play_collision::yp#1 [phi:play_collision::@9->play_collision::@1#2] -- register_copy 
    jmp __b1
    // play_collision::@10
  __b10:
    // [224] (byte) play_collision::i#12 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_1
    // [207] phi from play_collision::@10 to play_collision::@2 [phi:play_collision::@10->play_collision::@2]
  __b2_from___b10:
    // [207] phi (byte) play_collision::c#2 = (byte) play_collision::c#1 [phi:play_collision::@10->play_collision::@2#0] -- register_copy 
    // [207] phi (byte) play_collision::xp#2 = (byte) play_collision::xp#1 [phi:play_collision::@10->play_collision::@2#1] -- register_copy 
    // [207] phi (byte) play_collision::i#2 = (byte) play_collision::i#12 [phi:play_collision::@10->play_collision::@2#2] -- register_copy 
    jmp __b2
}
  // play_move_leftright
// Move left/right or rotate the current piece
// Return non-zero if a render is needed
// play_move_leftright(byte register(A) key_event)
play_move_leftright: {
    // [225] if((byte) play_move_leftright::key_event#0==(const nomodify byte) KEY_COMMA) goto play_move_leftright::@1 -- vbuaa_eq_vbuc1_then_la1 
    // Handle keyboard events
    cmp #KEY_COMMA
    beq __b1
    jmp __b2
    // play_move_leftright::@2
  __b2:
    // [226] if((byte) play_move_leftright::key_event#0!=(const nomodify byte) KEY_DOT) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_DOT
    bne __breturn_from___b2
    jmp __b3
    // play_move_leftright::@3
  __b3:
    // [227] (byte) play_collision::xpos#2 ← (byte) current_xpos#22 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z current_xpos
    iny
    sty.z play_collision.xpos
    // [228] (byte) play_collision::ypos#2 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [229] (byte) play_collision::orientation#2 ← (byte) current_orientation#20 -- vbuxx=vbuz1 
    ldx.z current_orientation
    // [230] (byte*) current_piece#98 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_1
    lda.z current_piece+1
    sta.z current_piece_1+1
    // [231] call play_collision 
    // [201] phi from play_move_leftright::@3 to play_collision [phi:play_move_leftright::@3->play_collision]
  play_collision_from___b3:
    // [201] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#2 [phi:play_move_leftright::@3->play_collision#0] -- register_copy 
    // [201] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#2 [phi:play_move_leftright::@3->play_collision#1] -- register_copy 
    // [201] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#2 [phi:play_move_leftright::@3->play_collision#2] -- register_copy 
    // [201] phi (byte*) current_piece#17 = (byte*) current_piece#98 [phi:play_move_leftright::@3->play_collision#3] -- register_copy 
    jsr play_collision
    // [232] (byte) play_collision::return#13 ← (byte) play_collision::return#15
    jmp __b7
    // play_move_leftright::@7
  __b7:
    // [233] (byte~) play_move_leftright::$4 ← (byte) play_collision::return#13
    // [234] if((byte~) play_move_leftright::$4!=(const nomodify byte) COLLISION_NONE) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne __breturn_from___b7
    jmp __b4
    // play_move_leftright::@4
  __b4:
    // [235] (byte) current_xpos#6 ← ++ (byte) current_xpos#22 -- vbuz1=_inc_vbuz1 
    inc.z current_xpos
    // [236] phi from play_move_leftright::@4 play_move_leftright::@5 to play_move_leftright::@return [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return]
  __breturn_from___b4:
  __breturn_from___b5:
    // [236] phi (byte) current_xpos#26 = (byte) current_xpos#6 [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return#0] -- register_copy 
    // [236] phi (byte) play_move_leftright::return#2 = (byte) 1 [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return#1] -- vbuaa=vbuc1 
    lda #1
    jmp __breturn
    // [236] phi from play_move_leftright::@2 play_move_leftright::@6 play_move_leftright::@7 to play_move_leftright::@return [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return]
  __breturn_from___b2:
  __breturn_from___b6:
  __breturn_from___b7:
    // [236] phi (byte) current_xpos#26 = (byte) current_xpos#22 [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return#0] -- register_copy 
    // [236] phi (byte) play_move_leftright::return#2 = (byte) 0 [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return#1] -- vbuaa=vbuc1 
    lda #0
    jmp __breturn
    // play_move_leftright::@return
  __breturn:
    // [237] return 
    rts
    // play_move_leftright::@1
  __b1:
    // [238] (byte) play_collision::xpos#1 ← (byte) current_xpos#22 - (byte) 1 -- vbuz1=vbuz2_minus_1 
    ldx.z current_xpos
    dex
    stx.z play_collision.xpos
    // [239] (byte) play_collision::ypos#1 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [240] (byte) play_collision::orientation#1 ← (byte) current_orientation#20 -- vbuxx=vbuz1 
    ldx.z current_orientation
    // [241] (byte*) current_piece#97 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_1
    lda.z current_piece+1
    sta.z current_piece_1+1
    // [242] call play_collision 
    // [201] phi from play_move_leftright::@1 to play_collision [phi:play_move_leftright::@1->play_collision]
  play_collision_from___b1:
    // [201] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#1 [phi:play_move_leftright::@1->play_collision#0] -- register_copy 
    // [201] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#1 [phi:play_move_leftright::@1->play_collision#1] -- register_copy 
    // [201] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#1 [phi:play_move_leftright::@1->play_collision#2] -- register_copy 
    // [201] phi (byte*) current_piece#17 = (byte*) current_piece#97 [phi:play_move_leftright::@1->play_collision#3] -- register_copy 
    jsr play_collision
    // [243] (byte) play_collision::return#1 ← (byte) play_collision::return#15
    jmp __b6
    // play_move_leftright::@6
  __b6:
    // [244] (byte~) play_move_leftright::$8 ← (byte) play_collision::return#1
    // [245] if((byte~) play_move_leftright::$8!=(const nomodify byte) COLLISION_NONE) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne __breturn_from___b6
    jmp __b5
    // play_move_leftright::@5
  __b5:
    // [246] (byte) current_xpos#8 ← -- (byte) current_xpos#22 -- vbuz1=_dec_vbuz1 
    dec.z current_xpos
    jmp __breturn_from___b5
}
  // play_move_down
// Move down the current piece
// Return non-zero if a render is needed
// play_move_down(byte register(A) key_event)
play_move_down: {
    .label movedown = $c
    // [247] (byte) current_movedown_counter#12 ← ++ (byte) current_movedown_counter#16 -- vbuz1=_inc_vbuz1 
    inc.z current_movedown_counter
    // [248] if((byte) play_move_down::key_event#0!=(const nomodify byte) KEY_SPACE) goto play_move_down::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne __b1_from_play_move_down
    // [249] phi from play_move_down to play_move_down::@4 [phi:play_move_down->play_move_down::@4]
  __b4_from_play_move_down:
    jmp __b4
    // play_move_down::@4
  __b4:
    // [250] phi from play_move_down::@4 to play_move_down::@1 [phi:play_move_down::@4->play_move_down::@1]
  __b1_from___b4:
    // [250] phi (byte) play_move_down::movedown#10 = (byte) 1 [phi:play_move_down::@4->play_move_down::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z movedown
    jmp __b1
    // [250] phi from play_move_down to play_move_down::@1 [phi:play_move_down->play_move_down::@1]
  __b1_from_play_move_down:
    // [250] phi (byte) play_move_down::movedown#10 = (byte) 0 [phi:play_move_down->play_move_down::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z movedown
    jmp __b1
    // play_move_down::@1
  __b1:
    // [251] call keyboard_event_pressed 
    // [380] phi from play_move_down::@1 to keyboard_event_pressed [phi:play_move_down::@1->keyboard_event_pressed]
  keyboard_event_pressed_from___b1:
    // [380] phi (byte) keyboard_event_pressed::keycode#5 = (const nomodify byte) KEY_SPACE [phi:play_move_down::@1->keyboard_event_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_SPACE
    jsr keyboard_event_pressed
    // [252] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11
    jmp __b12
    // play_move_down::@12
  __b12:
    // [253] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
    // [254] if((byte~) play_move_down::$2==(byte) 0) goto play_move_down::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b12
    jmp __b5
    // play_move_down::@5
  __b5:
    // [255] if((byte) current_movedown_counter#12<(const nomodify byte) current_movedown_fast) goto play_move_down::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z current_movedown_counter
    cmp #current_movedown_fast
    bcc __b2_from___b5
    jmp __b6
    // play_move_down::@6
  __b6:
    // [256] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10 -- vbuz1=_inc_vbuz1 
    inc.z movedown
    // [257] phi from play_move_down::@12 play_move_down::@5 play_move_down::@6 to play_move_down::@2 [phi:play_move_down::@12/play_move_down::@5/play_move_down::@6->play_move_down::@2]
  __b2_from___b12:
  __b2_from___b5:
  __b2_from___b6:
    // [257] phi (byte) play_move_down::movedown#7 = (byte) play_move_down::movedown#10 [phi:play_move_down::@12/play_move_down::@5/play_move_down::@6->play_move_down::@2#0] -- register_copy 
    jmp __b2
    // play_move_down::@2
  __b2:
    // [258] if((byte) current_movedown_counter#12<(byte) current_movedown_slow#14) goto play_move_down::@3 -- vbuz1_lt_vbuz2_then_la1 
    lda.z current_movedown_counter
    cmp.z current_movedown_slow
    bcc __b3_from___b2
    jmp __b7
    // play_move_down::@7
  __b7:
    // [259] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7 -- vbuz1=_inc_vbuz1 
    inc.z movedown
    // [260] phi from play_move_down::@2 play_move_down::@7 to play_move_down::@3 [phi:play_move_down::@2/play_move_down::@7->play_move_down::@3]
  __b3_from___b2:
  __b3_from___b7:
    // [260] phi (byte) play_move_down::movedown#6 = (byte) play_move_down::movedown#7 [phi:play_move_down::@2/play_move_down::@7->play_move_down::@3#0] -- register_copy 
    jmp __b3
    // play_move_down::@3
  __b3:
    // [261] if((byte) play_move_down::movedown#6==(byte) 0) goto play_move_down::@return -- vbuz1_eq_0_then_la1 
    lda.z movedown
    cmp #0
    beq __breturn_from___b3
    jmp __b8
    // play_move_down::@8
  __b8:
    // [262] (byte) play_collision::ypos#0 ← (byte) current_ypos#11 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z current_ypos
    iny
    sty.z play_collision.ypos
    // [263] (byte) play_collision::xpos#0 ← (byte) current_xpos#14 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [264] (byte) play_collision::orientation#0 ← (byte) current_orientation#13 -- vbuxx=vbuz1 
    ldx.z current_orientation
    // [265] (byte*) current_piece#96 ← (byte*) current_piece#10 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_1
    lda.z current_piece+1
    sta.z current_piece_1+1
    // [266] call play_collision 
    // [201] phi from play_move_down::@8 to play_collision [phi:play_move_down::@8->play_collision]
  play_collision_from___b8:
    // [201] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#0 [phi:play_move_down::@8->play_collision#0] -- register_copy 
    // [201] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#0 [phi:play_move_down::@8->play_collision#1] -- register_copy 
    // [201] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#0 [phi:play_move_down::@8->play_collision#2] -- register_copy 
    // [201] phi (byte*) current_piece#17 = (byte*) current_piece#96 [phi:play_move_down::@8->play_collision#3] -- register_copy 
    jsr play_collision
    // [267] (byte) play_collision::return#0 ← (byte) play_collision::return#15
    jmp __b13
    // play_move_down::@13
  __b13:
    // [268] (byte~) play_move_down::$12 ← (byte) play_collision::return#0
    // [269] if((byte~) play_move_down::$12==(const nomodify byte) COLLISION_NONE) goto play_move_down::@10 -- vbuaa_eq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    beq __b10
    // [270] phi from play_move_down::@13 to play_move_down::@9 [phi:play_move_down::@13->play_move_down::@9]
  __b9_from___b13:
    jmp __b9
    // play_move_down::@9
  __b9:
    // [271] call play_lock_current 
    // Lock current piece
    jsr play_lock_current
    // [272] phi from play_move_down::@9 to play_move_down::@14 [phi:play_move_down::@9->play_move_down::@14]
  __b14_from___b9:
    jmp __b14
    // play_move_down::@14
  __b14:
    // [273] call play_remove_lines 
    // [339] phi from play_move_down::@14 to play_remove_lines [phi:play_move_down::@14->play_remove_lines]
  play_remove_lines_from___b14:
    jsr play_remove_lines
    // [274] (byte) play_remove_lines::return#0 ← (byte) play_remove_lines::removed#7 -- vbuaa=vbuz1 
    lda.z play_remove_lines.removed
    jmp __b15
    // play_move_down::@15
  __b15:
    // [275] (byte) play_move_down::removed#0 ← (byte) play_remove_lines::return#0
    // [276] (byte) play_update_score::removed#0 ← (byte) play_move_down::removed#0 -- vbuxx=vbuaa 
    tax
    // [277] call play_update_score 
    // Tally up the score
    jsr play_update_score
    // [278] phi from play_move_down::@15 to play_move_down::@16 [phi:play_move_down::@15->play_move_down::@16]
  __b16_from___b15:
    jmp __b16
    // play_move_down::@16
  __b16:
    // [279] call play_spawn_current 
  // Spawn a new piece
    // [286] phi from play_move_down::@16 to play_spawn_current [phi:play_move_down::@16->play_spawn_current]
  play_spawn_current_from___b16:
    // [286] phi (byte) game_over#65 = (byte) game_over#10 [phi:play_move_down::@16->play_spawn_current#0] -- register_copy 
    // [286] phi (byte) next_piece_idx#17 = (byte) next_piece_idx#10 [phi:play_move_down::@16->play_spawn_current#1] -- register_copy 
    jsr play_spawn_current
    jmp __b17
    // play_move_down::@17
  __b17:
    // [280] (byte*) current_piece#93 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current.__7
    lda PIECES,y
    sta.z current_piece
    lda PIECES+1,y
    sta.z current_piece+1
    // [281] (byte*) current_piece_gfx#117 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current.__7
    lda PIECES,y
    sta.z current_piece_gfx
    lda PIECES+1,y
    sta.z current_piece_gfx+1
    // [282] phi from play_move_down::@17 to play_move_down::@11 [phi:play_move_down::@17->play_move_down::@11]
  __b11_from___b17:
    // [282] phi (byte) next_piece_idx#30 = (byte) play_spawn_current::piece_idx#2 [phi:play_move_down::@17->play_move_down::@11#0] -- register_copy 
    // [282] phi (byte) game_over#27 = (byte) game_over#52 [phi:play_move_down::@17->play_move_down::@11#1] -- register_copy 
    // [282] phi (byte) current_xpos#43 = (byte) current_xpos#100 [phi:play_move_down::@17->play_move_down::@11#2] -- register_copy 
    // [282] phi (byte*) current_piece_gfx#35 = (byte*) current_piece_gfx#117 [phi:play_move_down::@17->play_move_down::@11#3] -- register_copy 
    // [282] phi (byte) current_orientation#37 = (byte) 0 [phi:play_move_down::@17->play_move_down::@11#4] -- vbuz1=vbuc1 
    lda #0
    sta.z current_orientation
    // [282] phi (byte) current_piece_char#29 = (byte) current_piece_char#5 [phi:play_move_down::@17->play_move_down::@11#5] -- register_copy 
    // [282] phi (byte*) current_piece#28 = (byte*) current_piece#93 [phi:play_move_down::@17->play_move_down::@11#6] -- register_copy 
    // [282] phi (byte) level_bcd#31 = (byte) level_bcd#19 [phi:play_move_down::@17->play_move_down::@11#7] -- register_copy 
    // [282] phi (byte) current_movedown_slow#37 = (byte) current_movedown_slow#23 [phi:play_move_down::@17->play_move_down::@11#8] -- register_copy 
    // [282] phi (byte) level#33 = (byte) level#19 [phi:play_move_down::@17->play_move_down::@11#9] -- register_copy 
    // [282] phi (word) lines_bcd#26 = (word) lines_bcd#17 [phi:play_move_down::@17->play_move_down::@11#10] -- register_copy 
    // [282] phi (byte) current_ypos#38 = (byte) current_ypos#6 [phi:play_move_down::@17->play_move_down::@11#11] -- register_copy 
    jmp __b11
    // play_move_down::@11
  __b11:
    // [283] phi from play_move_down::@11 to play_move_down::@return [phi:play_move_down::@11->play_move_down::@return]
  __breturn_from___b11:
    // [283] phi (byte) next_piece_idx#16 = (byte) next_piece_idx#30 [phi:play_move_down::@11->play_move_down::@return#0] -- register_copy 
    // [283] phi (byte) game_over#15 = (byte) game_over#27 [phi:play_move_down::@11->play_move_down::@return#1] -- register_copy 
    // [283] phi (byte) current_xpos#22 = (byte) current_xpos#43 [phi:play_move_down::@11->play_move_down::@return#2] -- register_copy 
    // [283] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#35 [phi:play_move_down::@11->play_move_down::@return#3] -- register_copy 
    // [283] phi (byte) current_orientation#20 = (byte) current_orientation#37 [phi:play_move_down::@11->play_move_down::@return#4] -- register_copy 
    // [283] phi (byte) current_piece_char#16 = (byte) current_piece_char#29 [phi:play_move_down::@11->play_move_down::@return#5] -- register_copy 
    // [283] phi (byte*) current_piece#15 = (byte*) current_piece#28 [phi:play_move_down::@11->play_move_down::@return#6] -- register_copy 
    // [283] phi (byte) level_bcd#17 = (byte) level_bcd#31 [phi:play_move_down::@11->play_move_down::@return#7] -- register_copy 
    // [283] phi (byte) current_movedown_slow#21 = (byte) current_movedown_slow#37 [phi:play_move_down::@11->play_move_down::@return#8] -- register_copy 
    // [283] phi (byte) level#17 = (byte) level#33 [phi:play_move_down::@11->play_move_down::@return#9] -- register_copy 
    // [283] phi (word) lines_bcd#15 = (word) lines_bcd#26 [phi:play_move_down::@11->play_move_down::@return#10] -- register_copy 
    // [283] phi (byte) current_ypos#19 = (byte) current_ypos#38 [phi:play_move_down::@11->play_move_down::@return#11] -- register_copy 
    // [283] phi (byte) current_movedown_counter#14 = (byte) 0 [phi:play_move_down::@11->play_move_down::@return#12] -- vbuz1=vbuc1 
    lda #0
    sta.z current_movedown_counter
    // [283] phi (byte) play_move_down::return#3 = (byte) 1 [phi:play_move_down::@11->play_move_down::@return#13] -- vbuxx=vbuc1 
    ldx #1
    jmp __breturn
    // [283] phi from play_move_down::@3 to play_move_down::@return [phi:play_move_down::@3->play_move_down::@return]
  __breturn_from___b3:
    // [283] phi (byte) next_piece_idx#16 = (byte) next_piece_idx#10 [phi:play_move_down::@3->play_move_down::@return#0] -- register_copy 
    // [283] phi (byte) game_over#15 = (byte) game_over#10 [phi:play_move_down::@3->play_move_down::@return#1] -- register_copy 
    // [283] phi (byte) current_xpos#22 = (byte) current_xpos#14 [phi:play_move_down::@3->play_move_down::@return#2] -- register_copy 
    // [283] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#13 [phi:play_move_down::@3->play_move_down::@return#3] -- register_copy 
    // [283] phi (byte) current_orientation#20 = (byte) current_orientation#13 [phi:play_move_down::@3->play_move_down::@return#4] -- register_copy 
    // [283] phi (byte) current_piece_char#16 = (byte) current_piece_char#10 [phi:play_move_down::@3->play_move_down::@return#5] -- register_copy 
    // [283] phi (byte*) current_piece#15 = (byte*) current_piece#10 [phi:play_move_down::@3->play_move_down::@return#6] -- register_copy 
    // [283] phi (byte) level_bcd#17 = (byte) level_bcd#11 [phi:play_move_down::@3->play_move_down::@return#7] -- register_copy 
    // [283] phi (byte) current_movedown_slow#21 = (byte) current_movedown_slow#14 [phi:play_move_down::@3->play_move_down::@return#8] -- register_copy 
    // [283] phi (byte) level#17 = (byte) level#10 [phi:play_move_down::@3->play_move_down::@return#9] -- register_copy 
    // [283] phi (word) lines_bcd#15 = (word) lines_bcd#19 [phi:play_move_down::@3->play_move_down::@return#10] -- register_copy 
    // [283] phi (byte) current_ypos#19 = (byte) current_ypos#11 [phi:play_move_down::@3->play_move_down::@return#11] -- register_copy 
    // [283] phi (byte) current_movedown_counter#14 = (byte) current_movedown_counter#12 [phi:play_move_down::@3->play_move_down::@return#12] -- register_copy 
    // [283] phi (byte) play_move_down::return#3 = (byte) 0 [phi:play_move_down::@3->play_move_down::@return#13] -- vbuxx=vbuc1 
    ldx #0
    jmp __breturn
    // play_move_down::@return
  __breturn:
    // [284] return 
    rts
    // play_move_down::@10
  __b10:
    // [285] (byte) current_ypos#3 ← ++ (byte) current_ypos#11 -- vbuz1=_inc_vbuz1 
    inc.z current_ypos
    // [282] phi from play_move_down::@10 to play_move_down::@11 [phi:play_move_down::@10->play_move_down::@11]
  __b11_from___b10:
    // [282] phi (byte) next_piece_idx#30 = (byte) next_piece_idx#10 [phi:play_move_down::@10->play_move_down::@11#0] -- register_copy 
    // [282] phi (byte) game_over#27 = (byte) game_over#10 [phi:play_move_down::@10->play_move_down::@11#1] -- register_copy 
    // [282] phi (byte) current_xpos#43 = (byte) current_xpos#14 [phi:play_move_down::@10->play_move_down::@11#2] -- register_copy 
    // [282] phi (byte*) current_piece_gfx#35 = (byte*) current_piece_gfx#13 [phi:play_move_down::@10->play_move_down::@11#3] -- register_copy 
    // [282] phi (byte) current_orientation#37 = (byte) current_orientation#13 [phi:play_move_down::@10->play_move_down::@11#4] -- register_copy 
    // [282] phi (byte) current_piece_char#29 = (byte) current_piece_char#10 [phi:play_move_down::@10->play_move_down::@11#5] -- register_copy 
    // [282] phi (byte*) current_piece#28 = (byte*) current_piece#10 [phi:play_move_down::@10->play_move_down::@11#6] -- register_copy 
    // [282] phi (byte) level_bcd#31 = (byte) level_bcd#11 [phi:play_move_down::@10->play_move_down::@11#7] -- register_copy 
    // [282] phi (byte) current_movedown_slow#37 = (byte) current_movedown_slow#14 [phi:play_move_down::@10->play_move_down::@11#8] -- register_copy 
    // [282] phi (byte) level#33 = (byte) level#10 [phi:play_move_down::@10->play_move_down::@11#9] -- register_copy 
    // [282] phi (word) lines_bcd#26 = (word) lines_bcd#19 [phi:play_move_down::@10->play_move_down::@11#10] -- register_copy 
    // [282] phi (byte) current_ypos#38 = (byte) current_ypos#3 [phi:play_move_down::@10->play_move_down::@11#11] -- register_copy 
    jmp __b11
}
  // play_spawn_current
// Spawn a new piece
// Moves the next piece into the current and spawns a new next piece
play_spawn_current: {
    .label __7 = $34
    // Spawn a new next piece
    // Pick a random piece (0-6)
    .label piece_idx = $1a
    // [287] (byte) play_spawn_current::current_piece_idx#0 ← (byte) next_piece_idx#17 -- vbuxx=vbuz1 
    // Move next piece into current
    ldx.z next_piece_idx
    // [288] (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 << (byte) 1 -- vbuz1=vbuxx_rol_1 
    txa
    asl
    sta.z __7
    // [289] (byte) current_piece_char#5 ← *((const byte*) PIECES_CHARS + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_CHARS,x
    sta.z current_piece_char
    // [290] (byte) current_xpos#100 ← *((const byte*) PIECES_START_X + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_START_X,x
    sta.z current_xpos
    // [291] (byte) current_ypos#6 ← *((const byte*) PIECES_START_Y + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_START_Y,x
    sta.z current_ypos
    // [292] (byte) play_collision::xpos#4 ← (byte) current_xpos#100 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [293] (byte) play_collision::ypos#4 ← (byte) current_ypos#6 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [294] (byte*) current_piece#100 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z __7
    lda PIECES,y
    sta.z current_piece_1
    lda PIECES+1,y
    sta.z current_piece_1+1
    // [295] call play_collision 
    // [201] phi from play_spawn_current to play_collision [phi:play_spawn_current->play_collision]
  play_collision_from_play_spawn_current:
    // [201] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#4 [phi:play_spawn_current->play_collision#0] -- register_copy 
    // [201] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#4 [phi:play_spawn_current->play_collision#1] -- register_copy 
    // [201] phi (byte) play_collision::orientation#5 = (byte) 0 [phi:play_spawn_current->play_collision#2] -- vbuxx=vbuc1 
    ldx #0
    // [201] phi (byte*) current_piece#17 = (byte*) current_piece#100 [phi:play_spawn_current->play_collision#3] -- register_copy 
    jsr play_collision
    // [296] (byte) play_collision::return#10 ← (byte) play_collision::return#15
    jmp __b4
    // play_spawn_current::@4
  __b4:
    // [297] (byte~) play_spawn_current::$1 ← (byte) play_collision::return#10
    // [298] if((byte~) play_spawn_current::$1!=(const nomodify byte) COLLISION_PLAYFIELD) goto play_spawn_current::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_PLAYFIELD
    bne __b5_from___b4
    // [300] phi from play_spawn_current::@4 to play_spawn_current::@1 [phi:play_spawn_current::@4->play_spawn_current::@1]
  __b1_from___b4:
    // [300] phi (byte) game_over#52 = (byte) 1 [phi:play_spawn_current::@4->play_spawn_current::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z game_over
    jmp __b1
    // [299] phi from play_spawn_current::@4 to play_spawn_current::@5 [phi:play_spawn_current::@4->play_spawn_current::@5]
  __b5_from___b4:
    jmp __b5
    // play_spawn_current::@5
  __b5:
    // [300] phi from play_spawn_current::@5 to play_spawn_current::@1 [phi:play_spawn_current::@5->play_spawn_current::@1]
  __b1_from___b5:
    // [300] phi (byte) game_over#52 = (byte) game_over#65 [phi:play_spawn_current::@5->play_spawn_current::@1#0] -- register_copy 
    jmp __b1
    // play_spawn_current::@1
  __b1:
    // [301] phi from play_spawn_current::@1 to play_spawn_current::@2 [phi:play_spawn_current::@1->play_spawn_current::@2]
  __b2_from___b1:
    // [301] phi (byte) play_spawn_current::piece_idx#2 = (byte) 7 [phi:play_spawn_current::@1->play_spawn_current::@2#0] -- vbuz1=vbuc1 
    lda #7
    sta.z piece_idx
    jmp __b2
    // play_spawn_current::@2
  __b2:
    // [302] if((byte) play_spawn_current::piece_idx#2==(byte) 7) goto play_spawn_current::sid_rnd1 -- vbuz1_eq_vbuc1_then_la1 
    lda #7
    cmp.z piece_idx
    beq sid_rnd1
    jmp __breturn
    // play_spawn_current::@return
  __breturn:
    // [303] return 
    rts
    // play_spawn_current::sid_rnd1
  sid_rnd1:
    // [304] (byte) play_spawn_current::sid_rnd1_return#0 ← *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC) -- vbuaa=_deref_pbuc1 
    lda SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC
    jmp __b3
    // play_spawn_current::@3
  __b3:
    // [305] (byte) play_spawn_current::piece_idx#1 ← (byte) play_spawn_current::sid_rnd1_return#0 & (byte) 7 -- vbuz1=vbuaa_band_vbuc1 
    and #7
    sta.z piece_idx
    // [301] phi from play_spawn_current::@3 to play_spawn_current::@2 [phi:play_spawn_current::@3->play_spawn_current::@2]
  __b2_from___b3:
    // [301] phi (byte) play_spawn_current::piece_idx#2 = (byte) play_spawn_current::piece_idx#1 [phi:play_spawn_current::@3->play_spawn_current::@2#0] -- register_copy 
    jmp __b2
}
  // play_update_score
// Update the score based on the number of lines removed
// play_update_score(byte register(X) removed)
play_update_score: {
    .label lines_before = $34
    .label add_bcd = $35
    // [306] if((byte) play_update_score::removed#0==(byte) 0) goto play_update_score::@return -- vbuxx_eq_0_then_la1 
    cpx #0
    beq __breturn_from_play_update_score
    jmp __b1
    // play_update_score::@1
  __b1:
    // [307] (byte~) play_update_score::$2 ← < (word) lines_bcd#19 -- vbuaa=_lo_vwuz1 
    lda.z lines_bcd
    // [308] (byte) play_update_score::lines_before#0 ← (byte~) play_update_score::$2 & (byte) $f0 -- vbuz1=vbuaa_band_vbuc1 
    and #$f0
    sta.z lines_before
    // [309] (byte~) play_update_score::$9 ← (byte) play_update_score::removed#0 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // [310] (dword) play_update_score::add_bcd#0 ← *((const dword*) score_add_bcd + (byte~) play_update_score::$9) -- vduz1=pduc1_derefidx_vbuaa 
    tay
    lda score_add_bcd,y
    sta.z add_bcd
    lda score_add_bcd+1,y
    sta.z add_bcd+1
    lda score_add_bcd+2,y
    sta.z add_bcd+2
    lda score_add_bcd+3,y
    sta.z add_bcd+3
    // asm { sed  }
    sed
    // [312] (word) lines_bcd#29 ← (word) lines_bcd#19 + (byte) play_update_score::removed#0 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z lines_bcd
    sta.z lines_bcd
    bcc !+
    inc.z lines_bcd+1
  !:
    // [313] (volatile dword) score_bcd ← (volatile dword) score_bcd + (dword) play_update_score::add_bcd#0 -- vduz1=vduz1_plus_vduz2 
    lda.z score_bcd
    clc
    adc.z add_bcd
    sta.z score_bcd
    lda.z score_bcd+1
    adc.z add_bcd+1
    sta.z score_bcd+1
    lda.z score_bcd+2
    adc.z add_bcd+2
    sta.z score_bcd+2
    lda.z score_bcd+3
    adc.z add_bcd+3
    sta.z score_bcd+3
    // asm { cld  }
    cld
    // [315] (byte~) play_update_score::$4 ← < (word) lines_bcd#29 -- vbuaa=_lo_vwuz1 
    lda.z lines_bcd
    // [316] (byte) play_update_score::lines_after#0 ← (byte~) play_update_score::$4 & (byte) $f0 -- vbuaa=vbuaa_band_vbuc1 
    and #$f0
    // [317] if((byte) play_update_score::lines_before#0==(byte) play_update_score::lines_after#0) goto play_update_score::@return -- vbuz1_eq_vbuaa_then_la1 
    cmp.z lines_before
    beq __breturn_from___b1
    // [318] phi from play_update_score::@1 to play_update_score::@2 [phi:play_update_score::@1->play_update_score::@2]
  __b2_from___b1:
    jmp __b2
    // play_update_score::@2
  __b2:
    // [319] call play_increase_level 
    jsr play_increase_level
    // [320] phi from play_update_score play_update_score::@1 play_update_score::@2 to play_update_score::@return [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return]
  __breturn_from_play_update_score:
  __breturn_from___b1:
  __breturn_from___b2:
    // [320] phi (byte) level_bcd#19 = (byte) level_bcd#11 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#0] -- register_copy 
    // [320] phi (byte) current_movedown_slow#23 = (byte) current_movedown_slow#14 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#1] -- register_copy 
    // [320] phi (byte) level#19 = (byte) level#10 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#2] -- register_copy 
    // [320] phi (word) lines_bcd#17 = (word) lines_bcd#19 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#3] -- register_copy 
    jmp __breturn
    // play_update_score::@return
  __breturn:
    // [321] return 
    rts
}
  // play_increase_level
// Increase the level
play_increase_level: {
    // [322] (byte) level#21 ← ++ (byte) level#10 -- vbuz1=_inc_vbuz1 
    inc.z level
    // [323] if((byte) level#21>=(byte) $1d+(byte) 1) goto play_increase_level::@1 -- vbuz1_ge_vbuc1_then_la1 
    // Update speed of moving tetrominos down
    lda.z level
    cmp #$1d+1
    bcs __b1_from_play_increase_level
    jmp __b3
    // play_increase_level::@3
  __b3:
    // [324] (byte) current_movedown_slow#10 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS + (byte) level#21) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z level
    lda MOVEDOWN_SLOW_SPEEDS,y
    sta.z current_movedown_slow
    // [325] phi from play_increase_level::@3 to play_increase_level::@1 [phi:play_increase_level::@3->play_increase_level::@1]
  __b1_from___b3:
    // [325] phi (byte) current_movedown_slow#65 = (byte) current_movedown_slow#10 [phi:play_increase_level::@3->play_increase_level::@1#0] -- register_copy 
    jmp __b1
    // [325] phi from play_increase_level to play_increase_level::@1 [phi:play_increase_level->play_increase_level::@1]
  __b1_from_play_increase_level:
    // [325] phi (byte) current_movedown_slow#65 = (byte) 1 [phi:play_increase_level->play_increase_level::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z current_movedown_slow
    jmp __b1
    // play_increase_level::@1
  __b1:
    // [326] (byte) level_bcd#21 ← ++ (byte) level_bcd#11 -- vbuz1=_inc_vbuz1 
    inc.z level_bcd
    // [327] (byte~) play_increase_level::$1 ← (byte) level_bcd#21 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z level_bcd
    // [328] if((byte~) play_increase_level::$1!=(byte) $a) goto play_increase_level::@2 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$a
    bne __b2_from___b1
    jmp __b4
    // play_increase_level::@4
  __b4:
    // [329] (byte) level_bcd#8 ← (byte) level_bcd#21 + (byte) 6 -- vbuz1=vbuz1_plus_vbuc1 
    // If level low nybble hits 0xa change to 0x10
    lax.z level_bcd
    axs #-[6]
    stx.z level_bcd
    // [330] phi from play_increase_level::@1 play_increase_level::@4 to play_increase_level::@2 [phi:play_increase_level::@1/play_increase_level::@4->play_increase_level::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [330] phi (byte) level_bcd#62 = (byte) level_bcd#21 [phi:play_increase_level::@1/play_increase_level::@4->play_increase_level::@2#0] -- register_copy 
    jmp __b2
    // play_increase_level::@2
  __b2:
    // asm { sed  }
    // Increase the score values gained
    sed
    // [332] phi from play_increase_level::@2 to play_increase_level::@5 [phi:play_increase_level::@2->play_increase_level::@5]
  __b5_from___b2:
    // [332] phi (byte) play_increase_level::b#2 = (byte) 0 [phi:play_increase_level::@2->play_increase_level::@5#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b5
    // [332] phi from play_increase_level::@5 to play_increase_level::@5 [phi:play_increase_level::@5->play_increase_level::@5]
  __b5_from___b5:
    // [332] phi (byte) play_increase_level::b#2 = (byte) play_increase_level::b#1 [phi:play_increase_level::@5->play_increase_level::@5#0] -- register_copy 
    jmp __b5
    // play_increase_level::@5
  __b5:
    // [333] (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // [334] *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) ← *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) + *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_increase_level::$5) -- pduc1_derefidx_vbuaa=pduc1_derefidx_vbuaa_plus_pduc2_derefidx_vbuaa 
    tay
    clc
    lda score_add_bcd,y
    adc SCORE_BASE_BCD,y
    sta score_add_bcd,y
    lda score_add_bcd+1,y
    adc SCORE_BASE_BCD+1,y
    sta score_add_bcd+1,y
    lda score_add_bcd+2,y
    adc SCORE_BASE_BCD+2,y
    sta score_add_bcd+2,y
    lda score_add_bcd+3,y
    adc SCORE_BASE_BCD+3,y
    sta score_add_bcd+3,y
    // [335] (byte) play_increase_level::b#1 ← ++ (byte) play_increase_level::b#2 -- vbuxx=_inc_vbuxx 
    inx
    // [336] if((byte) play_increase_level::b#1!=(byte) 5) goto play_increase_level::@5 -- vbuxx_neq_vbuc1_then_la1 
    cpx #5
    bne __b5_from___b5
    jmp __b6
    // play_increase_level::@6
  __b6:
    // asm { cld  }
    cld
    jmp __breturn
    // play_increase_level::@return
  __breturn:
    // [338] return 
    rts
}
  // play_remove_lines
// Look through the playfield for lines - and remove any lines found
// Utilizes two cursors on the playfield - one reading cells and one writing cells
// Whenever a full line is detected the writing cursor is instructed to write to the same line once more.
// Returns the number of lines removed
play_remove_lines: {
    .label c = $3b
    .label x = $1e
    .label y = $1c
    .label removed = $1d
    .label full = $1f
    // [340] phi from play_remove_lines to play_remove_lines::@1 [phi:play_remove_lines->play_remove_lines::@1]
  __b1_from_play_remove_lines:
    // [340] phi (byte) play_remove_lines::removed#11 = (byte) 0 [phi:play_remove_lines->play_remove_lines::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z removed
    // [340] phi (byte) play_remove_lines::y#8 = (byte) 0 [phi:play_remove_lines->play_remove_lines::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [340] phi (byte) play_remove_lines::w#12 = (const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(byte) 1 [phi:play_remove_lines->play_remove_lines::@1#2] -- vbuxx=vbuc1 
    ldx #PLAYFIELD_LINES*PLAYFIELD_COLS-1
    // [340] phi (byte) play_remove_lines::r#3 = (const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(byte) 1 [phi:play_remove_lines->play_remove_lines::@1#3] -- vbuyy=vbuc1 
    ldy #PLAYFIELD_LINES*PLAYFIELD_COLS-1
    jmp __b1
  // Read all lines and rewrite them
    // [340] phi from play_remove_lines::@6 to play_remove_lines::@1 [phi:play_remove_lines::@6->play_remove_lines::@1]
  __b1_from___b6:
    // [340] phi (byte) play_remove_lines::removed#11 = (byte) play_remove_lines::removed#7 [phi:play_remove_lines::@6->play_remove_lines::@1#0] -- register_copy 
    // [340] phi (byte) play_remove_lines::y#8 = (byte) play_remove_lines::y#1 [phi:play_remove_lines::@6->play_remove_lines::@1#1] -- register_copy 
    // [340] phi (byte) play_remove_lines::w#12 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@6->play_remove_lines::@1#2] -- register_copy 
    // [340] phi (byte) play_remove_lines::r#3 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@6->play_remove_lines::@1#3] -- register_copy 
    jmp __b1
    // play_remove_lines::@1
  __b1:
    // [341] phi from play_remove_lines::@1 to play_remove_lines::@2 [phi:play_remove_lines::@1->play_remove_lines::@2]
  __b2_from___b1:
    // [341] phi (byte) play_remove_lines::full#4 = (byte) 1 [phi:play_remove_lines::@1->play_remove_lines::@2#0] -- vbuz1=vbuc1 
    lda #1
    sta.z full
    // [341] phi (byte) play_remove_lines::x#2 = (byte) 0 [phi:play_remove_lines::@1->play_remove_lines::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [341] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#12 [phi:play_remove_lines::@1->play_remove_lines::@2#2] -- register_copy 
    // [341] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#3 [phi:play_remove_lines::@1->play_remove_lines::@2#3] -- register_copy 
    jmp __b2
    // [341] phi from play_remove_lines::@3 to play_remove_lines::@2 [phi:play_remove_lines::@3->play_remove_lines::@2]
  __b2_from___b3:
    // [341] phi (byte) play_remove_lines::full#4 = (byte) play_remove_lines::full#2 [phi:play_remove_lines::@3->play_remove_lines::@2#0] -- register_copy 
    // [341] phi (byte) play_remove_lines::x#2 = (byte) play_remove_lines::x#1 [phi:play_remove_lines::@3->play_remove_lines::@2#1] -- register_copy 
    // [341] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#1 [phi:play_remove_lines::@3->play_remove_lines::@2#2] -- register_copy 
    // [341] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@3->play_remove_lines::@2#3] -- register_copy 
    jmp __b2
    // play_remove_lines::@2
  __b2:
    // [342] (byte) play_remove_lines::c#0 ← *((const byte*) playfield + (byte) play_remove_lines::r#2) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda playfield,y
    sta.z c
    // [343] (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2 -- vbuyy=_dec_vbuyy 
    dey
    // [344] if((byte) play_remove_lines::c#0!=(byte) 0) goto play_remove_lines::@9 -- vbuz1_neq_0_then_la1 
    lda.z c
    cmp #0
    bne __b9_from___b2
    // [346] phi from play_remove_lines::@2 to play_remove_lines::@3 [phi:play_remove_lines::@2->play_remove_lines::@3]
  __b3_from___b2:
    // [346] phi (byte) play_remove_lines::full#2 = (byte) 0 [phi:play_remove_lines::@2->play_remove_lines::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z full
    jmp __b3
    // [345] phi from play_remove_lines::@2 to play_remove_lines::@9 [phi:play_remove_lines::@2->play_remove_lines::@9]
  __b9_from___b2:
    jmp __b9
    // play_remove_lines::@9
  __b9:
    // [346] phi from play_remove_lines::@9 to play_remove_lines::@3 [phi:play_remove_lines::@9->play_remove_lines::@3]
  __b3_from___b9:
    // [346] phi (byte) play_remove_lines::full#2 = (byte) play_remove_lines::full#4 [phi:play_remove_lines::@9->play_remove_lines::@3#0] -- register_copy 
    jmp __b3
    // play_remove_lines::@3
  __b3:
    // [347] *((const byte*) playfield + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z c
    sta playfield,x
    // [348] (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4 -- vbuxx=_dec_vbuxx 
    dex
    // [349] (byte) play_remove_lines::x#1 ← ++ (byte) play_remove_lines::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [350] if((byte) play_remove_lines::x#1!=(const nomodify byte) PLAYFIELD_COLS-(byte) 1+(byte) 1) goto play_remove_lines::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_COLS-1+1
    cmp.z x
    bne __b2_from___b3
    jmp __b4
    // play_remove_lines::@4
  __b4:
    // [351] if((byte) play_remove_lines::full#2!=(byte) 1) goto play_remove_lines::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp.z full
    bne __b6_from___b4
    jmp __b5
    // play_remove_lines::@5
  __b5:
    // [352] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const nomodify byte) PLAYFIELD_COLS -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[PLAYFIELD_COLS]
    // [353] (byte) play_remove_lines::removed#1 ← ++ (byte) play_remove_lines::removed#11 -- vbuz1=_inc_vbuz1 
    inc.z removed
    // [354] phi from play_remove_lines::@4 play_remove_lines::@5 to play_remove_lines::@6 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6]
  __b6_from___b4:
  __b6_from___b5:
    // [354] phi (byte) play_remove_lines::removed#7 = (byte) play_remove_lines::removed#11 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6#0] -- register_copy 
    // [354] phi (byte) play_remove_lines::w#11 = (byte) play_remove_lines::w#1 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6#1] -- register_copy 
    jmp __b6
    // play_remove_lines::@6
  __b6:
    // [355] (byte) play_remove_lines::y#1 ← ++ (byte) play_remove_lines::y#8 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [356] if((byte) play_remove_lines::y#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto play_remove_lines::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_LINES-1+1
    cmp.z y
    bne __b1_from___b6
    // [357] phi from play_remove_lines::@6 play_remove_lines::@8 to play_remove_lines::@7 [phi:play_remove_lines::@6/play_remove_lines::@8->play_remove_lines::@7]
  __b7_from___b6:
  __b7_from___b8:
    // [357] phi (byte) play_remove_lines::w#6 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@6/play_remove_lines::@8->play_remove_lines::@7#0] -- register_copy 
    jmp __b7
  // Write zeros in the rest of the lines
    // play_remove_lines::@7
  __b7:
    // [358] if((byte) play_remove_lines::w#6!=(byte) $ff) goto play_remove_lines::@8 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$ff
    bne __b8
    jmp __breturn
    // play_remove_lines::@return
  __breturn:
    // [359] return 
    rts
    // play_remove_lines::@8
  __b8:
    // [360] *((const byte*) playfield + (byte) play_remove_lines::w#6) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta playfield,x
    // [361] (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#6 -- vbuxx=_dec_vbuxx 
    dex
    jmp __b7_from___b8
}
  // play_lock_current
// Lock the current piece onto the playfield
play_lock_current: {
    .label yp = $d
    .label playfield_line = $39
    .label xp = $1f
    .label i = $3b
    .label l = $3c
    .label i_1 = $1e
    // [362] (byte) play_lock_current::yp#0 ← (byte) current_ypos#11
    // [363] phi from play_lock_current to play_lock_current::@1 [phi:play_lock_current->play_lock_current::@1]
  __b1_from_play_lock_current:
    // [363] phi (byte) play_lock_current::l#6 = (byte) 0 [phi:play_lock_current->play_lock_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [363] phi (byte) play_lock_current::i#3 = (byte) 0 [phi:play_lock_current->play_lock_current::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i_1
    // [363] phi (byte) play_lock_current::yp#2 = (byte) play_lock_current::yp#0 [phi:play_lock_current->play_lock_current::@1#2] -- register_copy 
    jmp __b1
    // play_lock_current::@1
  __b1:
    // [364] (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z yp
    asl
    // [365] (byte*) play_lock_current::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_lock_current::$4) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda playfield_lines,y
    sta.z playfield_line
    lda playfield_lines+1,y
    sta.z playfield_line+1
    // [366] (byte) play_lock_current::xp#0 ← (byte) current_xpos#14 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z xp
    // [367] phi from play_lock_current::@1 to play_lock_current::@2 [phi:play_lock_current::@1->play_lock_current::@2]
  __b2_from___b1:
    // [367] phi (byte) play_lock_current::c#2 = (byte) 0 [phi:play_lock_current::@1->play_lock_current::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [367] phi (byte) play_lock_current::xp#2 = (byte) play_lock_current::xp#0 [phi:play_lock_current::@1->play_lock_current::@2#1] -- register_copy 
    // [367] phi (byte) play_lock_current::i#2 = (byte) play_lock_current::i#3 [phi:play_lock_current::@1->play_lock_current::@2#2] -- register_copy 
    jmp __b2
    // play_lock_current::@2
  __b2:
    // [368] (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2 -- vbuz1=_inc_vbuz2 
    ldy.z i_1
    iny
    sty.z i
    // [369] if(*((byte*) current_piece_gfx#13 + (byte) play_lock_current::i#2)==(byte) 0) goto play_lock_current::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z i_1
    lda (current_piece_gfx),y
    cmp #0
    beq __b3
    jmp __b4
    // play_lock_current::@4
  __b4:
    // [370] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::xp#2) ← (byte) current_piece_char#10 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z current_piece_char
    ldy.z xp
    sta (playfield_line),y
    jmp __b3
    // play_lock_current::@3
  __b3:
    // [371] (byte) play_lock_current::xp#1 ← ++ (byte) play_lock_current::xp#2 -- vbuz1=_inc_vbuz1 
    inc.z xp
    // [372] (byte) play_lock_current::c#1 ← ++ (byte) play_lock_current::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [373] if((byte) play_lock_current::c#1!=(byte) 4) goto play_lock_current::@7 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b7
    jmp __b5
    // play_lock_current::@5
  __b5:
    // [374] (byte) play_lock_current::yp#1 ← ++ (byte) play_lock_current::yp#2 -- vbuz1=_inc_vbuz1 
    inc.z yp
    // [375] (byte) play_lock_current::l#1 ← ++ (byte) play_lock_current::l#6 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [376] if((byte) play_lock_current::l#1!=(byte) 4) goto play_lock_current::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne __b6
    jmp __breturn
    // play_lock_current::@return
  __breturn:
    // [377] return 
    rts
    // play_lock_current::@6
  __b6:
    // [378] (byte) play_lock_current::i#7 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_1
    // [363] phi from play_lock_current::@6 to play_lock_current::@1 [phi:play_lock_current::@6->play_lock_current::@1]
  __b1_from___b6:
    // [363] phi (byte) play_lock_current::l#6 = (byte) play_lock_current::l#1 [phi:play_lock_current::@6->play_lock_current::@1#0] -- register_copy 
    // [363] phi (byte) play_lock_current::i#3 = (byte) play_lock_current::i#7 [phi:play_lock_current::@6->play_lock_current::@1#1] -- register_copy 
    // [363] phi (byte) play_lock_current::yp#2 = (byte) play_lock_current::yp#1 [phi:play_lock_current::@6->play_lock_current::@1#2] -- register_copy 
    jmp __b1
    // play_lock_current::@7
  __b7:
    // [379] (byte) play_lock_current::i#9 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_1
    // [367] phi from play_lock_current::@7 to play_lock_current::@2 [phi:play_lock_current::@7->play_lock_current::@2]
  __b2_from___b7:
    // [367] phi (byte) play_lock_current::c#2 = (byte) play_lock_current::c#1 [phi:play_lock_current::@7->play_lock_current::@2#0] -- register_copy 
    // [367] phi (byte) play_lock_current::xp#2 = (byte) play_lock_current::xp#1 [phi:play_lock_current::@7->play_lock_current::@2#1] -- register_copy 
    // [367] phi (byte) play_lock_current::i#2 = (byte) play_lock_current::i#9 [phi:play_lock_current::@7->play_lock_current::@2#2] -- register_copy 
    jmp __b2
}
  // keyboard_event_pressed
// Determine if a specific key is currently pressed based on the last keyboard_event_scan()
// Returns 0 is not pressed and non-0 if pressed
// keyboard_event_pressed(byte register(X) keycode)
keyboard_event_pressed: {
    // [381] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte) 3 -- vbuyy=vbuxx_ror_3 
    txa
    lsr
    lsr
    lsr
    tay
    // [382] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte*) keyboard_scan_values + (byte~) keyboard_event_pressed::$0) -- vbuyy=pbuc1_derefidx_vbuyy 
    lda keyboard_scan_values,y
    tay
    // [383] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte) 7 -- vbuxx=vbuxx_band_vbuc1 
    lda #7
    axs #0
    // [384] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1) -- vbuaa=vbuyy_band_pbuc1_derefidx_vbuxx 
    tya
    and keyboard_matrix_col_bitmask,x
    jmp __breturn
    // keyboard_event_pressed::@return
  __breturn:
    // [385] return 
    rts
}
  // keyboard_event_get
// Get the next event from the keyboard event buffer.
// Returns $ff if there is no event waiting. As all events are <$7f it is enough to examine bit 7 when determining if there is any event to process.
// The buffer is filled by keyboard_event_scan()
keyboard_event_get: {
    // [386] if((byte) keyboard_events_size#13==(byte) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda.z keyboard_events_size
    cmp #0
    beq __breturn_from_keyboard_event_get
    jmp __b1
    // keyboard_event_get::@1
  __b1:
    // [387] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13 -- vbuz1=_dec_vbuz1 
    dec.z keyboard_events_size
    // [388] (byte) keyboard_event_get::return#1 ← *((const byte*) keyboard_events + (byte) keyboard_events_size#4) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z keyboard_events_size
    lda keyboard_events,y
    // [389] phi from keyboard_event_get::@1 to keyboard_event_get::@return [phi:keyboard_event_get::@1->keyboard_event_get::@return]
  __breturn_from___b1:
    // [389] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@1->keyboard_event_get::@return#0] -- register_copy 
    // [389] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@1->keyboard_event_get::@return#1] -- register_copy 
    jmp __breturn
    // [389] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  __breturn_from_keyboard_event_get:
    // [389] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#13 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
    // [389] phi (byte) keyboard_event_get::return#2 = (byte) $ff [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuaa=vbuc1 
    lda #$ff
    jmp __breturn
    // keyboard_event_get::@return
  __breturn:
    // [390] return 
    rts
}
  // keyboard_event_scan
// Scans the entire matrix to determine which keys have been pressed/depressed.
// Generates keyboard events into the event buffer. Events can be read using keyboard_event_get().
// Handles debounce and only generates events when the status of a key changes.
// Also stores current status of modifiers in keyboard_modifiers.
keyboard_event_scan: {
    .label row_scan = $3c
    .label keycode = $1f
    .label row = $1e
    // [392] phi from keyboard_event_scan to keyboard_event_scan::@7 [phi:keyboard_event_scan->keyboard_event_scan::@7]
  __b7_from_keyboard_event_scan:
    // [392] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#19 [phi:keyboard_event_scan->keyboard_event_scan::@7#0] -- register_copy 
    // [392] phi (byte) keyboard_event_scan::keycode#11 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keycode
    // [392] phi (byte) keyboard_event_scan::row#2 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#2] -- vbuz1=vbuc1 
    lda #0
    sta.z row
    jmp __b7
    // [392] phi from keyboard_event_scan::@8 to keyboard_event_scan::@7 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7]
  __b7_from___b8:
    // [392] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#0] -- register_copy 
    // [392] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#1] -- register_copy 
    // [392] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#2] -- register_copy 
    jmp __b7
    // keyboard_event_scan::@7
  __b7:
    // [393] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuxx=vbuz1 
    ldx.z row
    // [394] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [395] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
    jmp __b19
    // keyboard_event_scan::@19
  __b19:
    // [396] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuaa 
    sta.z row_scan
    // [397] if((byte) keyboard_event_scan::row_scan#0!=*((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda.z row_scan
    ldy.z row
    cmp keyboard_scan_values,y
    bne __b9_from___b19
    jmp __b16
    // keyboard_event_scan::@16
  __b16:
    // [398] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z keycode
    axs #-[8]
    stx.z keycode
    // [399] phi from keyboard_event_scan::@15 keyboard_event_scan::@16 to keyboard_event_scan::@8 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8]
  __b8_from___b15:
  __b8_from___b16:
    // [399] phi (byte) keyboard_events_size#13 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#0] -- register_copy 
    // [399] phi (byte) keyboard_event_scan::keycode#13 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#1] -- register_copy 
    jmp __b8
    // keyboard_event_scan::@8
  __b8:
    // [400] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [401] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z row
    bne __b7_from___b8
    // [402] phi from keyboard_event_scan::@8 to keyboard_event_scan::@17 [phi:keyboard_event_scan::@8->keyboard_event_scan::@17]
  __b17_from___b8:
    jmp __b17
    // keyboard_event_scan::@17
  __b17:
    // [403] call keyboard_event_pressed 
    // [380] phi from keyboard_event_scan::@17 to keyboard_event_pressed [phi:keyboard_event_scan::@17->keyboard_event_pressed]
  keyboard_event_pressed_from___b17:
    // [380] phi (byte) keyboard_event_pressed::keycode#5 = (const nomodify byte) KEY_LSHIFT [phi:keyboard_event_scan::@17->keyboard_event_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_LSHIFT
    jsr keyboard_event_pressed
    // [404] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11
    jmp __b20
    // keyboard_event_scan::@20
  __b20:
    // [405] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0
    // [406] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1_from___b20
    // [407] phi from keyboard_event_scan::@20 to keyboard_event_scan::@18 [phi:keyboard_event_scan::@20->keyboard_event_scan::@18]
  __b18_from___b20:
    jmp __b18
    // keyboard_event_scan::@18
  __b18:
    // [408] phi from keyboard_event_scan::@18 keyboard_event_scan::@20 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@18/keyboard_event_scan::@20->keyboard_event_scan::@1]
  __b1_from___b18:
  __b1_from___b20:
    jmp __b1
    // keyboard_event_scan::@1
  __b1:
    // [409] call keyboard_event_pressed 
    // [380] phi from keyboard_event_scan::@1 to keyboard_event_pressed [phi:keyboard_event_scan::@1->keyboard_event_pressed]
  keyboard_event_pressed_from___b1:
    // [380] phi (byte) keyboard_event_pressed::keycode#5 = (const nomodify byte) KEY_RSHIFT [phi:keyboard_event_scan::@1->keyboard_event_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_RSHIFT
    jsr keyboard_event_pressed
    // [410] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11
    jmp __b21
    // keyboard_event_scan::@21
  __b21:
    // [411] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1
    // [412] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b21
    // [413] phi from keyboard_event_scan::@21 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@21->keyboard_event_scan::@4]
  __b4_from___b21:
    jmp __b4
    // keyboard_event_scan::@4
  __b4:
    // [414] phi from keyboard_event_scan::@21 keyboard_event_scan::@4 to keyboard_event_scan::@2 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2]
  __b2_from___b21:
  __b2_from___b4:
    jmp __b2
    // keyboard_event_scan::@2
  __b2:
    // [415] call keyboard_event_pressed 
    // [380] phi from keyboard_event_scan::@2 to keyboard_event_pressed [phi:keyboard_event_scan::@2->keyboard_event_pressed]
  keyboard_event_pressed_from___b2:
    // [380] phi (byte) keyboard_event_pressed::keycode#5 = (const nomodify byte) KEY_CTRL [phi:keyboard_event_scan::@2->keyboard_event_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_CTRL
    jsr keyboard_event_pressed
    // [416] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11
    jmp __b22
    // keyboard_event_scan::@22
  __b22:
    // [417] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2
    // [418] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b22
    // [419] phi from keyboard_event_scan::@22 to keyboard_event_scan::@5 [phi:keyboard_event_scan::@22->keyboard_event_scan::@5]
  __b5_from___b22:
    jmp __b5
    // keyboard_event_scan::@5
  __b5:
    // [420] phi from keyboard_event_scan::@22 keyboard_event_scan::@5 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3]
  __b3_from___b22:
  __b3_from___b5:
    jmp __b3
    // keyboard_event_scan::@3
  __b3:
    // [421] call keyboard_event_pressed 
    // [380] phi from keyboard_event_scan::@3 to keyboard_event_pressed [phi:keyboard_event_scan::@3->keyboard_event_pressed]
  keyboard_event_pressed_from___b3:
    // [380] phi (byte) keyboard_event_pressed::keycode#5 = (const nomodify byte) KEY_COMMODORE [phi:keyboard_event_scan::@3->keyboard_event_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_COMMODORE
    jsr keyboard_event_pressed
    // [422] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11
    jmp __b23
    // keyboard_event_scan::@23
  __b23:
    // [423] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#10
    // [424] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __breturn
    // [425] phi from keyboard_event_scan::@23 to keyboard_event_scan::@6 [phi:keyboard_event_scan::@23->keyboard_event_scan::@6]
  __b6_from___b23:
    jmp __b6
    // keyboard_event_scan::@6
  __b6:
    jmp __breturn
    // keyboard_event_scan::@return
  __breturn:
    // [426] return 
    rts
  // Something has changed on the keyboard row - check each column
    // [427] phi from keyboard_event_scan::@10 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9]
  __b9_from___b10:
    // [427] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#0] -- register_copy 
    // [427] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#1] -- register_copy 
    // [427] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#2] -- register_copy 
    jmp __b9
    // [427] phi from keyboard_event_scan::@19 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9]
  __b9_from___b19:
    // [427] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#30 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#0] -- register_copy 
    // [427] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#1] -- register_copy 
    // [427] phi (byte) keyboard_event_scan::col#2 = (byte) 0 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b9
    // keyboard_event_scan::@9
  __b9:
    // [428] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) -- vbuaa=vbuz1_bxor_pbuc1_derefidx_vbuz2 
    lda.z row_scan
    ldy.z row
    eor keyboard_scan_values,y
    // [429] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
    // [430] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b10_from___b9
    jmp __b12
    // keyboard_event_scan::@12
  __b12:
    // [431] if((byte) keyboard_events_size#10==(byte) 8) goto keyboard_event_scan::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z keyboard_events_size
    beq __b10_from___b12
    jmp __b13
    // keyboard_event_scan::@13
  __b13:
    // [432] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuxx 
    lda keyboard_matrix_col_bitmask,x
    and.z row_scan
    // [433] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b11
    jmp __b14
    // keyboard_event_scan::@14
  __b14:
    // [434] *((const byte*) keyboard_events + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key pressed
    lda.z keycode
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [435] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    // [436] phi from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10]
  __b10_from___b11:
  __b10_from___b12:
  __b10_from___b14:
  __b10_from___b9:
    // [436] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#1 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10#0] -- register_copy 
    jmp __b10
    // keyboard_event_scan::@10
  __b10:
    // [437] (byte) keyboard_event_scan::keycode#14 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc.z keycode
    // [438] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuxx=_inc_vbuxx 
    inx
    // [439] if((byte) keyboard_event_scan::col#1!=(byte) 8) goto keyboard_event_scan::@9 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b9_from___b10
    jmp __b15
    // keyboard_event_scan::@15
  __b15:
    // [440] *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Store the current keyboard status for the row to debounce
    lda.z row_scan
    ldy.z row
    sta keyboard_scan_values,y
    jmp __b8_from___b15
    // keyboard_event_scan::@11
  __b11:
    // [441] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 -- vbuaa=vbuz1_bor_vbuc1 
    lda #$40
    ora.z keycode
    // [442] *((const byte*) keyboard_events + (byte) keyboard_events_size#10) ← (byte~) keyboard_event_scan::$23 -- pbuc1_derefidx_vbuz1=vbuaa 
    // Key released
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [443] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    jmp __b10_from___b11
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable kill the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte register(X) rowid)
keyboard_matrix_read: {
    // [444] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1
    // [445] (byte) keyboard_matrix_read::return#0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B
    eor #$ff
    jmp __breturn
    // keyboard_matrix_read::@return
  __breturn:
    // [446] return 
    rts
}
  // render_show
// Update 0xD018 to show the current screen (used for double buffering)
render_show: {
    .const toD0181_return = (>(PLAYFIELD_SCREEN_1&$3fff)*4)|(>PLAYFIELD_CHARSET)/4&$f
    .const toD0182_return = (>(PLAYFIELD_SCREEN_2&$3fff)*4)|(>PLAYFIELD_CHARSET)/4&$f
    // [447] if((byte) render_screen_show#16==(byte) 0) goto render_show::toD0181 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_show
    cmp #0
    beq toD0181_from_render_show
    // [448] phi from render_show to render_show::toD0182 [phi:render_show->render_show::toD0182]
  toD0182_from_render_show:
    jmp toD0182
    // render_show::toD0182
  toD0182:
    // [449] phi from render_show::toD0182 to render_show::@1 [phi:render_show::toD0182->render_show::@1]
  __b1_from_toD0182:
    // [449] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0182_return#0 [phi:render_show::toD0182->render_show::@1#0] -- vbuaa=vbuc1 
    lda #toD0182_return
    jmp __b1
    // render_show::@1
  __b1:
    // [450] *((const nomodify byte*) D018) ← (byte) render_show::d018val#3 -- _deref_pbuc1=vbuaa 
    sta D018
    // [451] *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1 + (byte) level#10) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy.z level
    lda PIECES_COLORS_1,y
    sta BGCOL2
    // [452] *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2 + (byte) level#10) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy.z level
    lda PIECES_COLORS_2,y
    sta BGCOL3
    // [453] (volatile byte) render_screen_showing ← (byte) render_screen_show#16 -- vbuz1=vbuz2 
    lda.z render_screen_show
    sta.z render_screen_showing
    jmp __breturn
    // render_show::@return
  __breturn:
    // [454] return 
    rts
    // [455] phi from render_show to render_show::toD0181 [phi:render_show->render_show::toD0181]
  toD0181_from_render_show:
    jmp toD0181
    // render_show::toD0181
  toD0181:
    // [449] phi from render_show::toD0181 to render_show::@1 [phi:render_show::toD0181->render_show::@1]
  __b1_from_toD0181:
    // [449] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0181_return#0 [phi:render_show::toD0181->render_show::@1#0] -- vbuaa=vbuc1 
    lda #toD0181_return
    jmp __b1
}
  // play_init
// Initialize play data tables
play_init: {
    .label pli = $22
    // Initialize the playfield line pointers;
    .label idx = $21
    // [457] phi from play_init to play_init::@1 [phi:play_init->play_init::@1]
  __b1_from_play_init:
    // [457] phi (byte) play_init::idx#2 = (byte) 0 [phi:play_init->play_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [457] phi (byte*) play_init::pli#2 = (const byte*) playfield [phi:play_init->play_init::@1#1] -- pbuz1=pbuc1 
    lda #<playfield
    sta.z pli
    lda #>playfield
    sta.z pli+1
    // [457] phi (byte) play_init::j#2 = (byte) 0 [phi:play_init->play_init::@1#2] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [457] phi from play_init::@1 to play_init::@1 [phi:play_init::@1->play_init::@1]
  __b1_from___b1:
    // [457] phi (byte) play_init::idx#2 = (byte) play_init::idx#1 [phi:play_init::@1->play_init::@1#0] -- register_copy 
    // [457] phi (byte*) play_init::pli#2 = (byte*) play_init::pli#1 [phi:play_init::@1->play_init::@1#1] -- register_copy 
    // [457] phi (byte) play_init::j#2 = (byte) play_init::j#1 [phi:play_init::@1->play_init::@1#2] -- register_copy 
    jmp __b1
    // play_init::@1
  __b1:
    // [458] (byte~) play_init::$2 ← (byte) play_init::j#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [459] *((const byte**) playfield_lines + (byte~) play_init::$2) ← (byte*) play_init::pli#2 -- pptc1_derefidx_vbuxx=pbuz1 
    lda.z pli
    sta playfield_lines,x
    lda.z pli+1
    sta playfield_lines+1,x
    // [460] *((const byte*) playfield_lines_idx + (byte) play_init::j#2) ← (byte) play_init::idx#2 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda.z idx
    sta playfield_lines_idx,y
    // [461] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const nomodify byte) PLAYFIELD_COLS -- pbuz1=pbuz1_plus_vbuc1 
    lda #PLAYFIELD_COLS
    clc
    adc.z pli
    sta.z pli
    bcc !+
    inc.z pli+1
  !:
    // [462] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const nomodify byte) PLAYFIELD_COLS -- vbuz1=vbuz1_plus_vbuc1 
    lax.z idx
    axs #-[PLAYFIELD_COLS]
    stx.z idx
    // [463] (byte) play_init::j#1 ← ++ (byte) play_init::j#2 -- vbuyy=_inc_vbuyy 
    iny
    // [464] if((byte) play_init::j#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto play_init::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #PLAYFIELD_LINES-1+1
    bne __b1_from___b1
    jmp __b2
    // play_init::@2
  __b2:
    // [465] *((const byte*) playfield_lines_idx+(const nomodify byte) PLAYFIELD_LINES) ← (const nomodify byte) PLAYFIELD_COLS*(const nomodify byte) PLAYFIELD_LINES -- _deref_pbuc1=vbuc2 
    lda #PLAYFIELD_COLS*PLAYFIELD_LINES
    sta playfield_lines_idx+PLAYFIELD_LINES
    // [466] (byte) current_movedown_slow#1 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS) -- vbuz1=_deref_pbuc1 
    // Set initial speed of moving down a tetromino
    lda MOVEDOWN_SLOW_SPEEDS
    sta.z current_movedown_slow
    // [467] phi from play_init::@2 to play_init::@3 [phi:play_init::@2->play_init::@3]
  __b3_from___b2:
    // [467] phi (byte) play_init::b#2 = (byte) 0 [phi:play_init::@2->play_init::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
  // Set the initial score add values
    // [467] phi from play_init::@3 to play_init::@3 [phi:play_init::@3->play_init::@3]
  __b3_from___b3:
    // [467] phi (byte) play_init::b#2 = (byte) play_init::b#1 [phi:play_init::@3->play_init::@3#0] -- register_copy 
    jmp __b3
    // play_init::@3
  __b3:
    // [468] (byte~) play_init::$3 ← (byte) play_init::b#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // [469] *((const dword*) score_add_bcd + (byte~) play_init::$3) ← *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_init::$3) -- pduc1_derefidx_vbuaa=pduc2_derefidx_vbuaa 
    tay
    lda SCORE_BASE_BCD,y
    sta score_add_bcd,y
    lda SCORE_BASE_BCD+1,y
    sta score_add_bcd+1,y
    lda SCORE_BASE_BCD+2,y
    sta score_add_bcd+2,y
    lda SCORE_BASE_BCD+3,y
    sta score_add_bcd+3,y
    // [470] (byte) play_init::b#1 ← ++ (byte) play_init::b#2 -- vbuxx=_inc_vbuxx 
    inx
    // [471] if((byte) play_init::b#1!=(byte) 5) goto play_init::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #5
    bne __b3_from___b3
    jmp __breturn
    // play_init::@return
  __breturn:
    // [472] return 
    rts
}
  // sprites_irq_init
// Setup the IRQ
sprites_irq_init: {
    // asm { sei  }
    sei
    // [474] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge any IRQ and setup the next one
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // asm { ldaCIA1_INTERRUPT  }
    lda CIA1_INTERRUPT
    // [476] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // [477] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [478] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // [479] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    // [480] *((const nomodify byte*) RASTER) ← (const nomodify byte) IRQ_RASTER_FIRST -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER_FIRST
    sta RASTER
    // [481] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // [482] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq() -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<sprites_irq
    sta HARDWARE_IRQ
    lda #>sprites_irq
    sta HARDWARE_IRQ+1
    // asm { cli  }
    cli
    jmp __breturn
    // sprites_irq_init::@return
  __breturn:
    // [484] return 
    rts
}
  // sprites_init
// Setup the sprites
sprites_init: {
    .label xpos = $21
    // [485] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $f -- _deref_pbuc1=vbuc2 
    lda #$f
    sta SPRITES_ENABLE
    // [486] *((const nomodify byte*) SPRITES_MC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
    // [487] *((const nomodify byte*) SPRITES_EXPAND_Y) ← *((const nomodify byte*) SPRITES_MC) -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_MC
    sta SPRITES_EXPAND_Y
    // [488] *((const nomodify byte*) SPRITES_EXPAND_X) ← *((const nomodify byte*) SPRITES_EXPAND_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_EXPAND_Y
    sta SPRITES_EXPAND_X
    // [489] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
  __b1_from_sprites_init:
    // [489] phi (byte) sprites_init::xpos#2 = (byte)(number) $18+(number) $f*(number) 8 [phi:sprites_init->sprites_init::@1#0] -- vbuz1=vbuc1 
    lda #$18+$f*8
    sta.z xpos
    // [489] phi (byte) sprites_init::s#2 = (byte) 0 [phi:sprites_init->sprites_init::@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [489] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
  __b1_from___b1:
    // [489] phi (byte) sprites_init::xpos#2 = (byte) sprites_init::xpos#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
    // [489] phi (byte) sprites_init::s#2 = (byte) sprites_init::s#1 [phi:sprites_init::@1->sprites_init::@1#1] -- register_copy 
    jmp __b1
    // sprites_init::@1
  __b1:
    // [490] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [491] *((const nomodify byte*) SPRITES_XPOS + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z xpos
    sta SPRITES_XPOS,x
    // [492] *((const nomodify byte*) SPRITES_COLS + (byte) sprites_init::s#2) ← (const nomodify byte) BLACK -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #BLACK
    sta SPRITES_COLS,y
    // [493] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte) $18 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z xpos
    axs #-[$18]
    stx.z xpos
    // [494] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2 -- vbuyy=_inc_vbuyy 
    iny
    // [495] if((byte) sprites_init::s#1!=(byte) 4) goto sprites_init::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #4
    bne __b1_from___b1
    jmp __breturn
    // sprites_init::@return
  __breturn:
    // [496] return 
    rts
}
  // render_init
// Initialize rendering
render_init: {
    .const vicSelectGfxBank1_toDd001_return = 3
    // Initialize the screen line pointers;
    .label li_1 = $22
    .label li_2 = $30
    jmp vicSelectGfxBank1
    // render_init::vicSelectGfxBank1
  vicSelectGfxBank1:
    // [498] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [499] phi from render_init::vicSelectGfxBank1 to render_init::vicSelectGfxBank1_toDd001 [phi:render_init::vicSelectGfxBank1->render_init::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
    // render_init::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1___b1
    // render_init::vicSelectGfxBank1_@1
  vicSelectGfxBank1___b1:
    // [500] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2
    jmp __b2
    // render_init::@2
  __b2:
    // [501] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_ECM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    // Enable Extended Background Color Mode
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta D011
    // [502] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    // [503] *((const nomodify byte*) BGCOL1) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BGCOL1
    // [504] *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1) -- _deref_pbuc1=_deref_pbuc2 
    lda PIECES_COLORS_1
    sta BGCOL2
    // [505] *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2) -- _deref_pbuc1=_deref_pbuc2 
    lda PIECES_COLORS_2
    sta BGCOL3
    // [506] *((const nomodify byte*) BGCOL4) ← (const nomodify byte) GREY -- _deref_pbuc1=vbuc2 
    lda #GREY
    sta BGCOL4
    // [507] call render_screen_original 
  // Setup chars on the screens
    // [519] phi from render_init::@2 to render_screen_original [phi:render_init::@2->render_screen_original]
  render_screen_original_from___b2:
    // [519] phi (byte*) render_screen_original::screen#9 = (const nomodify byte*) PLAYFIELD_SCREEN_1 [phi:render_init::@2->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1
    sta.z render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_1
    sta.z render_screen_original.screen+1
    jsr render_screen_original
    // [508] phi from render_init::@2 to render_init::@3 [phi:render_init::@2->render_init::@3]
  __b3_from___b2:
    jmp __b3
    // render_init::@3
  __b3:
    // [509] call render_screen_original 
    // [519] phi from render_init::@3 to render_screen_original [phi:render_init::@3->render_screen_original]
  render_screen_original_from___b3:
    // [519] phi (byte*) render_screen_original::screen#9 = (const nomodify byte*) PLAYFIELD_SCREEN_2 [phi:render_init::@3->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2
    sta.z render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_2
    sta.z render_screen_original.screen+1
    jsr render_screen_original
    // [510] phi from render_init::@3 to render_init::@1 [phi:render_init::@3->render_init::@1]
  __b1_from___b3:
    // [510] phi (byte*) render_init::li_2#2 = (const nomodify byte*) PLAYFIELD_SCREEN_2+(byte)(number) 2*(number) $28+(byte) $10 [phi:render_init::@3->render_init::@1#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2+2*$28+$10
    sta.z li_2
    lda #>PLAYFIELD_SCREEN_2+2*$28+$10
    sta.z li_2+1
    // [510] phi (byte*) render_init::li_1#2 = (const nomodify byte*) PLAYFIELD_SCREEN_1+(byte)(number) 2*(number) $28+(byte) $10 [phi:render_init::@3->render_init::@1#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1+2*$28+$10
    sta.z li_1
    lda #>PLAYFIELD_SCREEN_1+2*$28+$10
    sta.z li_1+1
    // [510] phi (byte) render_init::i#2 = (byte) 0 [phi:render_init::@3->render_init::@1#2] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [510] phi from render_init::@1 to render_init::@1 [phi:render_init::@1->render_init::@1]
  __b1_from___b1:
    // [510] phi (byte*) render_init::li_2#2 = (byte*) render_init::li_2#1 [phi:render_init::@1->render_init::@1#0] -- register_copy 
    // [510] phi (byte*) render_init::li_1#2 = (byte*) render_init::li_1#1 [phi:render_init::@1->render_init::@1#1] -- register_copy 
    // [510] phi (byte) render_init::i#2 = (byte) render_init::i#1 [phi:render_init::@1->render_init::@1#2] -- register_copy 
    jmp __b1
    // render_init::@1
  __b1:
    // [511] (byte~) render_init::$5 ← (byte) render_init::i#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [512] *((const byte**) screen_lines_1 + (byte~) render_init::$5) ← (byte*) render_init::li_1#2 -- pptc1_derefidx_vbuxx=pbuz1 
    lda.z li_1
    sta screen_lines_1,x
    lda.z li_1+1
    sta screen_lines_1+1,x
    // [513] *((const byte**) screen_lines_2 + (byte~) render_init::$5) ← (byte*) render_init::li_2#2 -- pptc1_derefidx_vbuxx=pbuz1 
    lda.z li_2
    sta screen_lines_2,x
    lda.z li_2+1
    sta screen_lines_2+1,x
    // [514] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z li_1
    sta.z li_1
    bcc !+
    inc.z li_1+1
  !:
    // [515] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z li_2
    sta.z li_2
    bcc !+
    inc.z li_2+1
  !:
    // [516] (byte) render_init::i#1 ← ++ (byte) render_init::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [517] if((byte) render_init::i#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto render_init::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #PLAYFIELD_LINES-1+1
    bne __b1_from___b1
    jmp __breturn
    // render_init::@return
  __breturn:
    // [518] return 
    rts
}
  // render_screen_original
// Copy the original screen data to the passed screen
// Also copies colors to 0xd800
// render_screen_original(byte* zp($30) screen)
render_screen_original: {
    .const SPACE = 0
    .label screen = $30
    .label cols = $24
    .label oscr = $32
    .label ocols = $39
    .label y = $2f
    // [520] phi from render_screen_original to render_screen_original::@1 [phi:render_screen_original->render_screen_original::@1]
  __b1_from_render_screen_original:
    // [520] phi (byte) render_screen_original::y#6 = (byte) 0 [phi:render_screen_original->render_screen_original::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [520] phi (byte*) render_screen_original::ocols#4 = (const to_nomodify byte*) PLAYFIELD_COLORS_ORIGINAL+(byte)(number) $20*(number) 2 [phi:render_screen_original->render_screen_original::@1#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_COLORS_ORIGINAL+$20*2
    sta.z ocols
    lda #>PLAYFIELD_COLORS_ORIGINAL+$20*2
    sta.z ocols+1
    // [520] phi (byte*) render_screen_original::oscr#4 = (const to_nomodify byte*) PLAYFIELD_SCREEN_ORIGINAL+(byte)(number) $20*(number) 2 [phi:render_screen_original->render_screen_original::@1#2] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta.z oscr
    lda #>PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta.z oscr+1
    // [520] phi (byte*) render_screen_original::cols#7 = (const nomodify byte*) COLS [phi:render_screen_original->render_screen_original::@1#3] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z cols
    lda #>COLS
    sta.z cols+1
    // [520] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#9 [phi:render_screen_original->render_screen_original::@1#4] -- register_copy 
    jmp __b1
    // [520] phi from render_screen_original::@5 to render_screen_original::@1 [phi:render_screen_original::@5->render_screen_original::@1]
  __b1_from___b5:
    // [520] phi (byte) render_screen_original::y#6 = (byte) render_screen_original::y#1 [phi:render_screen_original::@5->render_screen_original::@1#0] -- register_copy 
    // [520] phi (byte*) render_screen_original::ocols#4 = (byte*) render_screen_original::ocols#1 [phi:render_screen_original::@5->render_screen_original::@1#1] -- register_copy 
    // [520] phi (byte*) render_screen_original::oscr#4 = (byte*) render_screen_original::oscr#1 [phi:render_screen_original::@5->render_screen_original::@1#2] -- register_copy 
    // [520] phi (byte*) render_screen_original::cols#7 = (byte*) render_screen_original::cols#3 [phi:render_screen_original::@5->render_screen_original::@1#3] -- register_copy 
    // [520] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#10 [phi:render_screen_original::@5->render_screen_original::@1#4] -- register_copy 
    jmp __b1
    // render_screen_original::@1
  __b1:
    // [521] phi from render_screen_original::@1 to render_screen_original::@2 [phi:render_screen_original::@1->render_screen_original::@2]
  __b2_from___b1:
    // [521] phi (byte) render_screen_original::x#4 = (byte) 0 [phi:render_screen_original::@1->render_screen_original::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [521] phi (byte*) render_screen_original::cols#4 = (byte*) render_screen_original::cols#7 [phi:render_screen_original::@1->render_screen_original::@2#1] -- register_copy 
    // [521] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#8 [phi:render_screen_original::@1->render_screen_original::@2#2] -- register_copy 
    jmp __b2
    // [521] phi from render_screen_original::@2 to render_screen_original::@2 [phi:render_screen_original::@2->render_screen_original::@2]
  __b2_from___b2:
    // [521] phi (byte) render_screen_original::x#4 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2->render_screen_original::@2#0] -- register_copy 
    // [521] phi (byte*) render_screen_original::cols#4 = (byte*) render_screen_original::cols#1 [phi:render_screen_original::@2->render_screen_original::@2#1] -- register_copy 
    // [521] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2->render_screen_original::@2#2] -- register_copy 
    jmp __b2
    // render_screen_original::@2
  __b2:
    // [522] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
    // [523] (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [524] *((byte*) render_screen_original::cols#4) ← (const nomodify byte) BLACK -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (cols),y
    // [525] (byte*) render_screen_original::cols#1 ← ++ (byte*) render_screen_original::cols#4 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // [526] (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4 -- vbuxx=_inc_vbuxx 
    inx
    // [527] if((byte) render_screen_original::x#1!=(byte) 4) goto render_screen_original::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b2_from___b2
    // [528] phi from render_screen_original::@2 render_screen_original::@3 to render_screen_original::@3 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3]
  __b3_from___b2:
  __b3_from___b3:
    // [528] phi (byte) render_screen_original::x#5 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#0] -- register_copy 
    // [528] phi (byte*) render_screen_original::cols#5 = (byte*) render_screen_original::cols#1 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#1] -- register_copy 
    // [528] phi (byte*) render_screen_original::ocols#2 = (byte*) render_screen_original::ocols#4 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#2] -- register_copy 
    // [528] phi (byte*) render_screen_original::screen#6 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#3] -- register_copy 
    // [528] phi (byte*) render_screen_original::oscr#2 = (byte*) render_screen_original::oscr#4 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#4] -- register_copy 
    jmp __b3
    // render_screen_original::@3
  __b3:
    // [529] *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (oscr),y
    ldy #0
    sta (screen),y
    // [530] (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#6 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [531] (byte*) render_screen_original::oscr#1 ← ++ (byte*) render_screen_original::oscr#2 -- pbuz1=_inc_pbuz1 
    inc.z oscr
    bne !+
    inc.z oscr+1
  !:
    // [532] *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (ocols),y
    ldy #0
    sta (cols),y
    // [533] (byte*) render_screen_original::cols#2 ← ++ (byte*) render_screen_original::cols#5 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // [534] (byte*) render_screen_original::ocols#1 ← ++ (byte*) render_screen_original::ocols#2 -- pbuz1=_inc_pbuz1 
    inc.z ocols
    bne !+
    inc.z ocols+1
  !:
    // [535] (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5 -- vbuxx=_inc_vbuxx 
    inx
    // [536] if((byte) render_screen_original::x#2!=(byte) $24) goto render_screen_original::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$24
    bne __b3_from___b3
    // [537] phi from render_screen_original::@3 render_screen_original::@4 to render_screen_original::@4 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4]
  __b4_from___b3:
  __b4_from___b4:
    // [537] phi (byte) render_screen_original::x#6 = (byte) render_screen_original::x#2 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#0] -- register_copy 
    // [537] phi (byte*) render_screen_original::cols#6 = (byte*) render_screen_original::cols#2 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#1] -- register_copy 
    // [537] phi (byte*) render_screen_original::screen#7 = (byte*) render_screen_original::screen#3 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#2] -- register_copy 
    jmp __b4
    // render_screen_original::@4
  __b4:
    // [538] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
    // [539] (byte*) render_screen_original::screen#10 ← ++ (byte*) render_screen_original::screen#7 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [540] *((byte*) render_screen_original::cols#6) ← (const nomodify byte) BLACK -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (cols),y
    // [541] (byte*) render_screen_original::cols#3 ← ++ (byte*) render_screen_original::cols#6 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // [542] (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#6 -- vbuxx=_inc_vbuxx 
    inx
    // [543] if((byte) render_screen_original::x#3!=(byte) $28) goto render_screen_original::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4_from___b4
    jmp __b5
    // render_screen_original::@5
  __b5:
    // [544] (byte) render_screen_original::y#1 ← ++ (byte) render_screen_original::y#6 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [545] if((byte) render_screen_original::y#1!=(byte) $19) goto render_screen_original::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z y
    bne __b1_from___b5
    jmp __breturn
    // render_screen_original::@return
  __breturn:
    // [546] return 
    rts
}
  // sprites_irq
// Raster Interrupt Routine - sets up the sprites covering the playfield
// Repeats 10 timers every 2 lines from line IRQ_RASTER_FIRST
// Utilizes duplicated gfx in the sprites to allow for some leeway in updating the sprite pointers
sprites_irq: {
    .const toSpritePtr1_return = PLAYFIELD_SPRITES/$40
    .label raster_sprite_gfx_modify = $3d
    // entry interrupt(HARDWARE_CLOBBER)
    sta rega+1
    stx regx+1
    // asm { cld  }
    //(*BGCOL)++;
    // Clear decimal flag (because it is used by the score algorithm)
    cld
    // [548] (byte) sprites_irq::ypos#0 ← (volatile byte) irq_sprite_ypos -- vbuaa=vbuz1 
    // Place the sprites
    lda.z irq_sprite_ypos
    // [549] *((const nomodify byte*) SPRITES_YPOS) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS
    // [550] *((const nomodify byte*) SPRITES_YPOS+(byte) 2) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+2
    // [551] *((const nomodify byte*) SPRITES_YPOS+(byte) 4) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+4
    // [552] *((const nomodify byte*) SPRITES_YPOS+(byte) 6) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+6
    // [553] (byte~) sprites_irq::$0 ← (volatile byte) irq_raster_next + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z irq_raster_next
    inx
    // [554] (volatile byte) sprites_irq::raster_sprite_gfx_modify ← (byte~) sprites_irq::$0 -- vbuz1=vbuxx 
    // Wait for the y-position before changing sprite pointers
    stx.z raster_sprite_gfx_modify
    jmp __b8
    // sprites_irq::@8
  __b8:
    // [555] if(*((const nomodify byte*) RASTER)<(volatile byte) sprites_irq::raster_sprite_gfx_modify) goto sprites_irq::@8 -- _deref_pbuc1_lt_vbuz1_then_la1 
    lda RASTER
    cmp.z raster_sprite_gfx_modify
    bcc __b8
    jmp __b9
    // sprites_irq::@9
  __b9:
    // [556] (byte) sprites_irq::ptr#0 ← (volatile byte) irq_sprite_ptr -- vbuxx=vbuz1 
    ldx.z irq_sprite_ptr
    // [557] if((volatile byte) render_screen_showing==(byte) 0) goto sprites_irq::@1 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_showing
    cmp #0
    beq __b1
    jmp __b10
    // sprites_irq::@10
  __b10:
    // [558] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_2
    // [559] (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#0 -- vbuaa=_inc_vbuxx 
    inx
    txa
    // [560] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 1) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+1
    // [561] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 2) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+2
    // [562] (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3 -- vbuaa=_inc_vbuaa 
    clc
    adc #1
    // [563] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 3) ← (byte) sprites_irq::ptr#4 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+3
    jmp __b2
    // sprites_irq::@2
  __b2:
    // [564] (volatile byte) irq_cnt ← ++ (volatile byte) irq_cnt -- vbuz1=_inc_vbuz1 
    inc.z irq_cnt
    // [565] if((volatile byte) irq_cnt==(byte) 9) goto sprites_irq::@3 -- vbuz1_eq_vbuc1_then_la1 
    lda #9
    cmp.z irq_cnt
    beq __b3
    jmp __b6
    // sprites_irq::@6
  __b6:
    // [566] if((volatile byte) irq_cnt==(byte) $a) goto sprites_irq::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #$a
    cmp.z irq_cnt
    beq __b4
    jmp __b7
    // sprites_irq::@7
  __b7:
    // [567] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $14 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$14]
    stx.z irq_raster_next
    // [568] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ypos
    axs #-[$15]
    stx.z irq_sprite_ypos
    // [569] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ptr
    axs #-[3]
    stx.z irq_sprite_ptr
    jmp __b5
    // sprites_irq::@5
  __b5:
    // [570] *((const nomodify byte*) RASTER) ← (volatile byte) irq_raster_next -- _deref_pbuc1=vbuz1 
    // Setup next interrupt
    lda.z irq_raster_next
    sta RASTER
    // [571] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ and setup the next one
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp __breturn
    // sprites_irq::@return
  __breturn:
    // [572] return  - exit interrupt(HARDWARE_CLOBBER)
  rega:
    lda #00
  regx:
    ldx #00
    rti
    // sprites_irq::@4
  __b4:
    // [573] (volatile byte) irq_cnt ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z irq_cnt
    // [574] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta.z irq_raster_next
    // [575] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ypos
    axs #-[$15]
    stx.z irq_sprite_ypos
    // [576] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ptr
    axs #-[3]
    stx.z irq_sprite_ptr
    jmp __b5
    // sprites_irq::@3
  __b3:
    // [577] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$15]
    stx.z irq_raster_next
    // [578] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS -- vbuz1=vbuc1 
    lda #SPRITES_FIRST_YPOS
    sta.z irq_sprite_ypos
    // [579] phi from sprites_irq::@3 to sprites_irq::toSpritePtr1 [phi:sprites_irq::@3->sprites_irq::toSpritePtr1]
  toSpritePtr1_from___b3:
    jmp toSpritePtr1
    // sprites_irq::toSpritePtr1
  toSpritePtr1:
    jmp __b11
    // sprites_irq::@11
  __b11:
    // [580] (volatile byte) irq_sprite_ptr ← (const byte) sprites_irq::toSpritePtr1_return#0 -- vbuz1=vbuc1 
    lda #toSpritePtr1_return
    sta.z irq_sprite_ptr
    jmp __b5
    // sprites_irq::@1
  __b1:
    // [581] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1
    // [582] (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#0 -- vbuxx=_inc_vbuxx 
    inx
    // [583] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 1) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1+1
    // [584] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 2) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1+2
    // [585] (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1 -- vbuaa=_inc_vbuxx 
    inx
    txa
    // [586] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 3) ← (byte) sprites_irq::ptr#2 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_1+3
    jmp __b2
}
  // File Data
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Keyboard event buffer. Contains keycodes for key presses/releases. Presses are represented by the keycode. Releases by keycode | $40. The buffer is filled by keyboard_scan()
  keyboard_events: .fill 8, 0
  // The values scanned values for each row. Set by keyboard_scan() and used by keyboard_get_event()
  keyboard_scan_values: .fill 8, 0
  // The playfield.  0 is empty non-zero is color.
  // The playfield is layed out line by line, meaning the first 10 bytes are line 1, the next 10 line 2 and so forth,
  playfield: .fill PLAYFIELD_LINES*PLAYFIELD_COLS, 0
  // The T-piece
  .align $40
  PIECE_T: .byte 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The S-piece
  .align $40
  PIECE_S: .byte 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0
  // The Z-piece
  .align $40
  PIECE_Z: .byte 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The L-piece
  .align $40
  PIECE_L: .byte 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0
  // The J-piece
  .align $40
  PIECE_J: .byte 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The O-piece
  .align $40
  PIECE_O: .byte 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0
  // The I-piece
  .align $40
  PIECE_I: .byte 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0
  // The different pieces
  PIECES: .word PIECE_T, PIECE_S, PIECE_Z, PIECE_J, PIECE_O, PIECE_I, PIECE_L
  // The chars to use for the different pieces - when inside the playing area
  PIECES_CHARS: .byte $65, $66, $a6, $66, $65, $65, $a6
  // The chars to use for the different pieces - when outside the playing area (eg. the next area).
  PIECES_NEXT_CHARS: .byte $63, $64, $a4, $64, $63, $63, $a4
  // The initial X/Y for each piece
  PIECES_START_X: .byte 4, 4, 4, 4, 4, 4, 4
  PIECES_START_Y: .byte 1, 1, 1, 1, 1, 0, 1
PLAYFIELD_SCREEN_ORIGINAL:
// Load chars for the screen
  .var screen = LoadBinary("playfield-screen.iscr")
   // Load extended colors for the screen
  .var extended = LoadBinary("playfield-extended.col")
  // screen.get(i)+1 because the charset is loaded into PLAYFIELD_CHARSET+8
  // extended.get(i)-1 because the extended colors are 1-based (1/2/3/4)
  // <<6 to move extended colors to the upper 2 bits
  .fill screen.getSize(), ( (screen.get(i)+1) | (extended.get(i)-1)<<6 )

  // Original Color Data
PLAYFIELD_COLORS_ORIGINAL:
.import binary "playfield-screen.col"

  // The color #1 to use for the pieces for each level
  PIECES_COLORS_1: .byte BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED, BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED, BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED
  // The color #2 to use for the pieces for each level
  PIECES_COLORS_2: .byte CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE, CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE, CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE
  // Pointers to the screen address for rendering each playfield line
  // The lines for screen 1 is aligned with 0x80 and screen 2 with 0x40 - so XOR'ing with 0x40 gives screen 2 lines.
  .align $80
  screen_lines_1: .fill 2*PLAYFIELD_LINES, 0
  .align $40
  screen_lines_2: .fill 2*PLAYFIELD_LINES, 0
  // Pointers to the playfield address for each playfield line
  playfield_lines: .fill 2*PLAYFIELD_LINES, 0
  // Indixes into the playfield  for each playfield line
  playfield_lines_idx: .fill PLAYFIELD_LINES+1, 0
  // The speed of moving down the piece when soft-drop is not activated
  // This array holds the number of frames per move by level (0-29). For all levels 29+ the value is 1.
  MOVEDOWN_SLOW_SPEEDS: .byte $30, $2b, $26, $21, $1c, $17, $12, $d, 8, 6, 5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1
  // Base Score values for removing 0-4 lines (in BCD)
  // These values are added to score_add_bcd for each level gained.
  SCORE_BASE_BCD: .dword 0, $40, $100, $300, $1200
  // Score values for removing 0-4 lines (in BCD)
  // These values are updated based on the players level and the base values from SCORE_BASE_BCD
  score_add_bcd: .fill 4*5, 0
.pc = PLAYFIELD_CHARSET "PLAYFIELD_CHARSET"
  .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "playfield-screen.imap"

.pc = PLAYFIELD_SPRITES "PLAYFIELD_SPRITES"
  .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000))
	// Put the sprites into memory 
	.for(var sy=0;sy<10;sy++) {
	    .var sprite_gfx_y = sy*20
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21)
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y)
	            }
	        }
	    	.byte 0
	  	}
	}


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp toSpritePtr1
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __bend
Removing instruction jmp sid_rnd_init1
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b16
Removing instruction jmp __b17
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b18
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b5
Removing instruction jmp __b21
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b22
Removing instruction jmp __b23
Removing instruction jmp __b24
Removing instruction jmp __b25
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b7
Removing instruction jmp __b6
Removing instruction jmp __b8
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b7
Removing instruction jmp __breturn
Removing instruction jmp __b8
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b6
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b12
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __b8
Removing instruction jmp __b13
Removing instruction jmp __b9
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b16
Removing instruction jmp __b17
Removing instruction jmp __b11
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b9
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b19
Removing instruction jmp __b16
Removing instruction jmp __b8
Removing instruction jmp __b17
Removing instruction jmp __b20
Removing instruction jmp __b18
Removing instruction jmp __b1
Removing instruction jmp __b21
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b22
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b23
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b9
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b10
Removing instruction jmp __b15
Removing instruction jmp __breturn
Removing instruction jmp toD0182
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp toD0181
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp vicSelectGfxBank1
Removing instruction jmp vicSelectGfxBank1_toDd001
Removing instruction jmp vicSelectGfxBank1___b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b2
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp toSpritePtr1
Removing instruction jmp __b11
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction ldy.z play_spawn_current.__7
Removing instruction lda #0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Removing instruction lda.z current_orientation
Removing instruction lda #0
Removing instruction ldy.z play_spawn_current.__7
Removing instruction lda #0
Removing instruction lda.z c
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda.z row_scan
Removing instruction ldy.z level
Removing instruction lda SPRITES_MC
Removing instruction lda SPRITES_EXPAND_Y
Removing instruction lda #BLACK
Removing instruction ldy #0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b6 with __b1
Replacing label __b1_from___b25 with __b1
Replacing label __b1_from_render_score with __b1
Replacing label __b1_from_render_bcd with __b1
Replacing label __b1_from_render_next with __b1
Replacing label __b4_from___b6 with __b4
Replacing label __b3_from___b8 with __b3
Replacing label __b1_from___b3 with __b1
Replacing label __b4_from___b5 with __b4
Replacing label __b3_from___b5 with __b3
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __breturn_from___b4 with __breturn
Replacing label __b3_from___b1 with __b3
Replacing label __breturn_from___b2 with __breturn_from___b7
Replacing label __breturn_from___b6 with __breturn_from___b7
Replacing label __b2_from___b12 with __b2
Replacing label __b2_from___b5 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b5_from___b4 with __b1
Replacing label __breturn_from_play_update_score with __breturn
Replacing label __breturn_from___b1 with __breturn
Replacing label __b2_from___b1 with __b2
Replacing label __b5_from___b5 with __b5
Replacing label __b9_from___b2 with __b3
Replacing label __b2_from___b3 with __b2
Replacing label __b6_from___b4 with __b6
Replacing label __b1_from___b6 with __b1
Replacing label __b7_from___b8 with __b7
Replacing label __b1_from___b20 with __b1
Replacing label __b2_from___b21 with __b2
Replacing label __b3_from___b22 with __b3
Replacing label __breturn with __b6
Replacing label __b10_from___b9 with __b10
Replacing label __b10_from___b12 with __b10
Replacing label __b8_from___b15 with __b8
Replacing label __b10_from___b11 with __b10
Replacing label toD0181_from_render_show with toD0181
Replacing label __b1_from___b1 with __b1
Replacing label __b3_from___b3 with __b3
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b3_from___b3 with __b3
Replacing label __b4_from___b4 with __b4
Replacing label __b1_from___b5 with __b1
Removing instruction __b1:
Removing instruction __b2:
Removing instruction toSpritePtr1_from___b3:
Removing instruction toSpritePtr1:
Removing instruction __b4_from___b5:
Removing instruction main_from___b4:
Removing instruction __bend_from___b4:
Removing instruction __b9_from___b8:
Removing instruction __b10_from___b9:
Removing instruction __b11_from___b10:
Removing instruction play_init_from___b11:
Removing instruction __b12_from___b11:
Removing instruction __b13_from___b12:
Removing instruction play_spawn_current_from___b13:
Removing instruction __b14_from___b13:
Removing instruction render_playfield_from___b14:
Removing instruction __b1_from___b25:
Removing instruction __b1_from___b6:
Removing instruction __b3_from___b2:
Removing instruction __b18_from___b3:
Removing instruction __b19_from___b18:
Removing instruction __b21:
Removing instruction __b24_from___b23:
Removing instruction __b25_from___b24:
Removing instruction __b1_from_render_score:
Removing instruction __b2_from___b1:
Removing instruction __b1_from_render_bcd:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_render_next:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b8:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b6:
Removing instruction __b1_from___b3:
Removing instruction __b3_from___b5:
Removing instruction __b3_from___b7:
Removing instruction __b4_from___b5:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b2:
Removing instruction __breturn_from___b2:
Removing instruction __breturn_from___b4:
Removing instruction __breturn_from___b4:
Removing instruction __b3_from___b1:
Removing instruction __b3_from___b2:
Removing instruction __breturn_from___b4:
Removing instruction __breturn_from___b2:
Removing instruction __breturn_from___b6:
Removing instruction __b4_from_play_move_down:
Removing instruction __b1_from___b4:
Removing instruction keyboard_event_pressed_from___b1:
Removing instruction __b2_from___b12:
Removing instruction __b2_from___b5:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b7:
Removing instruction __b9_from___b13:
Removing instruction __b14_from___b9:
Removing instruction play_remove_lines_from___b14:
Removing instruction __b16_from___b15:
Removing instruction __breturn_from___b11:
Removing instruction __b5_from___b4:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b1:
Removing instruction __breturn_from_play_update_score:
Removing instruction __breturn_from___b1:
Removing instruction __breturn_from___b2:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b5_from___b5:
Removing instruction __b1_from___b6:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b9_from___b2:
Removing instruction __b9:
Removing instruction __b3_from___b9:
Removing instruction __b6_from___b4:
Removing instruction __b6_from___b5:
Removing instruction __b7_from___b6:
Removing instruction __b7_from___b8:
Removing instruction __b8_from___b15:
Removing instruction __b8_from___b16:
Removing instruction __b17_from___b8:
Removing instruction keyboard_event_pressed_from___b17:
Removing instruction __b18_from___b20:
Removing instruction __b18:
Removing instruction __b1_from___b18:
Removing instruction __b1_from___b20:
Removing instruction keyboard_event_pressed_from___b1:
Removing instruction __b4_from___b21:
Removing instruction __b4:
Removing instruction __b2_from___b21:
Removing instruction __b2_from___b4:
Removing instruction keyboard_event_pressed_from___b2:
Removing instruction __b5_from___b22:
Removing instruction __b5:
Removing instruction __b3_from___b22:
Removing instruction __b3_from___b5:
Removing instruction keyboard_event_pressed_from___b3:
Removing instruction __b6_from___b23:
Removing instruction __breturn:
Removing instruction __b10_from___b11:
Removing instruction __b10_from___b12:
Removing instruction __b10_from___b14:
Removing instruction __b10_from___b9:
Removing instruction toD0182_from_render_show:
Removing instruction __b1_from_toD0182:
Removing instruction toD0181_from_render_show:
Removing instruction __b1_from_toD0181:
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b3:
Removing instruction __b1_from___b1:
Removing instruction vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1_toDd001:
Removing instruction __b3_from___b2:
Removing instruction render_screen_original_from___b3:
Removing instruction __b1_from___b1:
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b3:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b4:
Removing instruction __breturn:
Removing instruction toSpritePtr1_from___b3:
Removing instruction toSpritePtr1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b3:
Removing instruction __b5:
Removing instruction __b4:
Removing instruction __bend:
Removing instruction sid_rnd_init1:
Removing instruction __b8:
Removing instruction render_init_from___b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction play_spawn_current_from___b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction render_moving_from___b15:
Removing instruction __b16:
Removing instruction render_next_from___b16:
Removing instruction __b17:
Removing instruction __b1_from___b17:
Removing instruction __b3:
Removing instruction __b18:
Removing instruction keyboard_event_scan_from___b18:
Removing instruction __b19:
Removing instruction __b20:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction render_playfield_from___b7:
Removing instruction __b22:
Removing instruction render_moving_from___b22:
Removing instruction __b23:
Removing instruction render_next_from___b23:
Removing instruction __b24:
Removing instruction __b25:
Removing instruction __breturn:
Removing instruction __b2_from_render_score:
Removing instruction render_bcd_from___b2:
Removing instruction __b3:
Removing instruction render_bcd_from___b3:
Removing instruction __b4:
Removing instruction render_bcd_from___b4:
Removing instruction __b5:
Removing instruction render_bcd_from___b5:
Removing instruction __b6:
Removing instruction render_bcd_from___b6:
Removing instruction __b7:
Removing instruction render_bcd_from___b7:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b2_from_render_next:
Removing instruction __b3_from___b2:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __breturn:
Removing instruction __b1_from_render_moving:
Removing instruction __b7:
Removing instruction __breturn:
Removing instruction __b4_from___b2:
Removing instruction __b6:
Removing instruction __b1_from_render_playfield:
Removing instruction __b2_from___b1:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b4:
Removing instruction play_collision_from___b3:
Removing instruction __b6:
Removing instruction __b5:
Removing instruction __breturn_from___b5:
Removing instruction __b1_from_play_collision:
Removing instruction __b2_from___b1:
Removing instruction __b7:
Removing instruction __breturn_from___b7:
Removing instruction __breturn_from___b4:
Removing instruction __breturn_from___b5:
Removing instruction __breturn_from___b6:
Removing instruction __b8:
Removing instruction __breturn_from___b8:
Removing instruction __b1_from___b9:
Removing instruction __b2_from___b10:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction play_collision_from___b3:
Removing instruction __b7:
Removing instruction __b4:
Removing instruction play_collision_from___b1:
Removing instruction __b6:
Removing instruction __b5:
Removing instruction __b4:
Removing instruction __b12:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction play_collision_from___b8:
Removing instruction __b13:
Removing instruction __b9:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction __b16:
Removing instruction play_spawn_current_from___b16:
Removing instruction __b17:
Removing instruction __b11_from___b17:
Removing instruction __b11_from___b10:
Removing instruction play_collision_from_play_spawn_current:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b2_from___b3:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b4:
Removing instruction __b5_from___b2:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction __b1_from_play_remove_lines:
Removing instruction __b3_from___b2:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b7:
Removing instruction __breturn:
Removing instruction __b1_from_play_lock_current:
Removing instruction __b2_from___b1:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1_from___b6:
Removing instruction __b2_from___b7:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn_from___b1:
Removing instruction __b7_from_keyboard_event_scan:
Removing instruction __b19:
Removing instruction __b16:
Removing instruction __b17:
Removing instruction __b20:
Removing instruction __b21:
Removing instruction __b22:
Removing instruction __b23:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction __breturn:
Removing instruction toD0182:
Removing instruction __breturn:
Removing instruction __b1_from_play_init:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_sprites_init:
Removing instruction __breturn:
Removing instruction vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1___b1:
Removing instruction __b2:
Removing instruction render_screen_original_from___b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Removing instruction __b1_from_render_screen_original:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b11:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __b9 in bne __b9_from___b10
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __breturn_from___b6 to __b4
Relabelling long label __breturn_from___b5 to __b2
Relabelling long label __breturn_from___b7 to __b3
Relabelling long label __b1_from_play_move_down to __b4
Relabelling long label __breturn_from___b3 to __b5
Relabelling long label __b1_from_play_increase_level to __b3
Relabelling long label __b7_from___b8 to __b4
Relabelling long label __breturn_from_keyboard_event_get to __b1
Relabelling long label __b9_from___b10 to __b4
Relabelling long label __b9_from___b19 to __b5
Succesful ASM optimization Pass5RelabelLongLabels
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b7
Removing instruction beq __b1
Removing instruction beq __b2
Removing instruction beq __b3
Removing instruction beq __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldy.z level with TAY
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b6:
Removing instruction __b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp __b9
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @3
(label) @4
(label) @5
(label) @begin
(label) @end
(const nomodify byte*) BGCOL1 = (byte*) 53281
(const nomodify byte*) BGCOL2 = (byte*) 53282
(const nomodify byte*) BGCOL3 = (byte*) 53283
(const nomodify byte*) BGCOL4 = (byte*) 53284
(const nomodify byte) BLACK = (byte) 0
(const nomodify byte) BLUE = (byte) 6
(const nomodify byte*) BORDERCOL = (byte*) 53280
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*) 56320
(const nomodify byte*) CIA1_INTERRUPT = (byte*) 56333
(const nomodify struct MOS6526_CIA*) CIA2 = (struct MOS6526_CIA*) 56576
(const nomodify byte) CIA_INTERRUPT_CLEAR = (byte) $7f
(const nomodify byte) COLLISION_BOTTOM = (byte) 2
(const nomodify byte) COLLISION_LEFT = (byte) 4
(const nomodify byte) COLLISION_NONE = (byte) 0
(const nomodify byte) COLLISION_PLAYFIELD = (byte) 1
(const nomodify byte) COLLISION_RIGHT = (byte) 8
(const nomodify byte*) COLS = (byte*) 55296
(const nomodify byte) CYAN = (byte) 3
(const nomodify byte*) D011 = (byte*) 53265
(const nomodify byte*) D018 = (byte*) 53272
(const nomodify byte) DARK_GREY = (byte) $b
(const nomodify byte) GREEN = (byte) 5
(const nomodify byte) GREY = (byte) $c
(const nomodify void()**) HARDWARE_IRQ = (void()**) 65534
(const nomodify byte*) IRQ_ENABLE = (byte*) 53274
(const nomodify byte) IRQ_RASTER = (byte) 1
(const nomodify byte) IRQ_RASTER_FIRST = (const nomodify byte) SPRITES_FIRST_YPOS+(byte) $13
(const nomodify byte*) IRQ_STATUS = (byte*) 53273
(const nomodify byte) KEY_COMMA = (byte) $2f
(const nomodify byte) KEY_COMMODORE = (byte) $3d
(const nomodify byte) KEY_CTRL = (byte) $3a
(const nomodify byte) KEY_DOT = (byte) $2c
(const nomodify byte) KEY_LSHIFT = (byte) $f
(const nomodify byte) KEY_RSHIFT = (byte) $34
(const nomodify byte) KEY_SPACE = (byte) $3c
(const nomodify byte) KEY_X = (byte) $17
(const nomodify byte) KEY_Z = (byte) $c
(const nomodify byte) LIGHT_BLUE = (byte) $e
(const nomodify byte) LIGHT_GREEN = (byte) $d
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS[]  = { (byte) $30, (byte) $2b, (byte) $26, (byte) $21, (byte) $1c, (byte) $17, (byte) $12, (byte) $d, (byte) 8, (byte) 6, (byte) 5, (byte) 5, (byte) 5, (byte) 4, (byte) 4, (byte) 4, (byte) 3, (byte) 3, (byte) 3, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 1 }
(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = (byte) $d
(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = (byte) 2
(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B = (byte) 1
(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = (byte) $12
(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = (byte) $e
(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC = (byte) $1b
(const nomodify byte) ORANGE = (byte) 8
(const word*) PIECES[]  = { (word)(const byte*) PIECE_T, (word)(const byte*) PIECE_S, (word)(const byte*) PIECE_Z, (word)(const byte*) PIECE_J, (word)(const byte*) PIECE_O, (word)(const byte*) PIECE_I, (word)(const byte*) PIECE_L }
(const byte*) PIECES_CHARS[]  = { (byte) $65, (byte) $66, (byte) $a6, (byte) $66, (byte) $65, (byte) $65, (byte) $a6 }
(const byte*) PIECES_COLORS_1[]  = { (const nomodify byte) BLUE, (const nomodify byte) GREEN, (const nomodify byte) PURPLE, (const nomodify byte) BLUE, (const nomodify byte) RED, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) RED, (const nomodify byte) BLUE, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) RED, (const nomodify byte) BLUE, (const nomodify byte) GREEN, (const nomodify byte) PURPLE, (const nomodify byte) BLUE, (const nomodify byte) RED, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) RED, (const nomodify byte) BLUE, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) RED, (const nomodify byte) BLUE, (const nomodify byte) GREEN, (const nomodify byte) PURPLE, (const nomodify byte) BLUE, (const nomodify byte) RED, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) RED, (const nomodify byte) BLUE, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) RED }
(const byte*) PIECES_COLORS_2[]  = { (const nomodify byte) CYAN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) PINK, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) DARK_GREY, (const nomodify byte) PURPLE, (const nomodify byte) RED, (const nomodify byte) ORANGE, (const nomodify byte) CYAN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) PINK, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) DARK_GREY, (const nomodify byte) PURPLE, (const nomodify byte) RED, (const nomodify byte) ORANGE, (const nomodify byte) CYAN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) PINK, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_GREEN, (const nomodify byte) LIGHT_BLUE, (const nomodify byte) DARK_GREY, (const nomodify byte) PURPLE, (const nomodify byte) RED, (const nomodify byte) ORANGE }
(const byte*) PIECES_NEXT_CHARS[]  = { (byte) $63, (byte) $64, (byte) $a4, (byte) $64, (byte) $63, (byte) $63, (byte) $a4 }
(const byte*) PIECES_START_X[]  = { (byte) 4, (byte) 4, (byte) 4, (byte) 4, (byte) 4, (byte) 4, (byte) 4 }
(const byte*) PIECES_START_Y[]  = { (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1 }
(const byte*) PIECE_I[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0 }
(const byte*) PIECE_J[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) PIECE_L[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) PIECE_O[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) PIECE_S[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) PIECE_T[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) PIECE_Z[(number) $40]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const nomodify byte) PINK = (byte) $a
(const nomodify byte*) PLAYFIELD_CHARSET = (byte*) 10240
(const to_nomodify byte*) PLAYFIELD_COLORS_ORIGINAL[]  = kickasm {{ .import binary "playfield-screen.col"
 }}
(const nomodify byte) PLAYFIELD_COLS = (byte) $a
(const nomodify byte) PLAYFIELD_LINES = (byte) $16
(const nomodify byte*) PLAYFIELD_SCREEN_1 = (byte*) 1024
(const nomodify byte*) PLAYFIELD_SCREEN_2 = (byte*) 11264
(const to_nomodify byte*) PLAYFIELD_SCREEN_ORIGINAL[]  = kickasm {{ // Load chars for the screen
  .var screen = LoadBinary("playfield-screen.iscr")
   // Load extended colors for the screen
  .var extended = LoadBinary("playfield-extended.col")
  // screen.get(i)+1 because the charset is loaded into PLAYFIELD_CHARSET+8
  // extended.get(i)-1 because the extended colors are 1-based (1/2/3/4)
  // <<6 to move extended colors to the upper 2 bits
  .fill screen.getSize(), ( (screen.get(i)+1) | (extended.get(i)-1)<<6 )
 }}
(const nomodify byte*) PLAYFIELD_SPRITES = (byte*) 12288
(const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1 = (const nomodify byte*) PLAYFIELD_SCREEN_1+(const nomodify word) SPRITE_PTRS
(const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2 = (const nomodify byte*) PLAYFIELD_SCREEN_2+(const nomodify word) SPRITE_PTRS
(const nomodify byte*) PROCPORT = (byte*) 1
(const nomodify byte*) PROCPORT_DDR = (byte*) 0
(const nomodify byte) PROCPORT_DDR_MEMORY_MASK = (byte) 7
(const nomodify byte) PROCPORT_RAM_IO = (byte) 5
(const nomodify byte) PURPLE = (byte) 4
(const nomodify byte*) RASTER = (byte*) 53266
(const nomodify byte) RED = (byte) 2
(const to_nomodify dword*) SCORE_BASE_BCD[]  = { (dword) 0, (dword) $40, (dword) $100, (dword) $300, (dword) $1200 }
(const nomodify struct MOS6581_SID*) SID = (struct MOS6581_SID*) 54272
(const nomodify byte) SID_CONTROL_NOISE = (byte) $80
(const nomodify byte*) SPRITES_COLS = (byte*) 53287
(const nomodify byte*) SPRITES_ENABLE = (byte*) 53269
(const nomodify byte*) SPRITES_EXPAND_X = (byte*) 53277
(const nomodify byte*) SPRITES_EXPAND_Y = (byte*) 53271
(const nomodify byte) SPRITES_FIRST_YPOS = (byte) $31
(const nomodify byte*) SPRITES_MC = (byte*) 53276
(const nomodify byte*) SPRITES_XPOS = (byte*) 53248
(const nomodify byte*) SPRITES_YPOS = (byte*) 53249
(const nomodify word) SPRITE_PTRS = (word) $3f8
(const nomodify byte*) VIC_CONTROL = (byte*) 53265
(const nomodify byte) VIC_DEN = (byte) $10
(const nomodify byte) VIC_ECM = (byte) $40
(const nomodify byte) VIC_RSEL = (byte) 8
(byte) current_movedown_counter
(byte) current_movedown_counter#12 current_movedown_counter zp[1]:4 26666.933333333334
(byte) current_movedown_counter#14 current_movedown_counter zp[1]:4 2732.5135135135133
(byte) current_movedown_counter#16 current_movedown_counter zp[1]:4 7777.153846153846
(const nomodify byte) current_movedown_fast = (byte) $a
(byte) current_movedown_slow
(byte) current_movedown_slow#1 current_movedown_slow zp[1]:17 4.869565217391305
(byte) current_movedown_slow#10 current_movedown_slow zp[1]:17 2.0000002E7
(byte) current_movedown_slow#14 current_movedown_slow zp[1]:17 41091.392857142855
(byte) current_movedown_slow#21 current_movedown_slow zp[1]:17 5435.243243243243
(byte) current_movedown_slow#23 current_movedown_slow zp[1]:17 442857.7142857142
(byte) current_movedown_slow#37 current_movedown_slow zp[1]:17 300003.0
(byte) current_movedown_slow#65 current_movedown_slow zp[1]:17 733333.4666666666
(byte) current_orientation
(byte) current_orientation#13 current_orientation zp[1]:22 8137.972972972973
(byte) current_orientation#17 current_orientation zp[1]:22 1004.952380952381
(byte) current_orientation#20 current_orientation zp[1]:22 16530.79591836735
(byte) current_orientation#25 current_orientation zp[1]:22 51667.33333333333
(byte) current_orientation#37 current_orientation zp[1]:22 200002.0
(byte) current_orientation#7 current_orientation zp[1]:22 150001.5
(byte*) current_piece
(byte*) current_piece#10 current_piece zp[2]:19 8138.27027027027
(byte*) current_piece#100 current_piece_1 zp[2]:10 2000002.0
(byte*) current_piece#101 current_piece zp[2]:19 11.0
(byte*) current_piece#15 current_piece zp[2]:19 7706.51282051282
(byte*) current_piece#17 current_piece_1 zp[2]:10 1.1400006E7
(byte*) current_piece#28 current_piece zp[2]:19 300003.0
(byte*) current_piece#93 current_piece zp[2]:19 100001.0
(byte*) current_piece#96 current_piece_1 zp[2]:10 200002.0
(byte*) current_piece#97 current_piece_1 zp[2]:10 200002.0
(byte*) current_piece#98 current_piece_1 zp[2]:10 200002.0
(byte*) current_piece#99 current_piece_1 zp[2]:10 200002.0
(byte) current_piece_char
(byte) current_piece_char#10 current_piece_char zp[1]:21 1.8182183847272727E8
(byte) current_piece_char#100 current_piece_char_1 zp[1]:9 22.0
(byte) current_piece_char#101 current_piece_char_1 zp[1]:9 202.0
(byte) current_piece_char#16 current_piece_char zp[1]:21 5437.9729729729725
(byte) current_piece_char#29 current_piece_char zp[1]:21 300003.0
(byte) current_piece_char#5 current_piece_char zp[1]:21 34375.75
(byte) current_piece_char#68 current_piece_char_1 zp[1]:9 47624.42857142857
(byte*) current_piece_gfx
(byte*) current_piece_gfx#112 current_piece_gfx_1 zp[2]:7 11.0
(byte*) current_piece_gfx#113 current_piece_gfx_1 zp[2]:7 101.0
(byte*) current_piece_gfx#117 current_piece_gfx zp[2]:23 200002.0
(byte*) current_piece_gfx#123 current_piece_gfx zp[2]:23 22.0
(byte*) current_piece_gfx#13 current_piece_gfx zp[2]:23 1.8182183847272727E8
(byte*) current_piece_gfx#18 current_piece_gfx zp[2]:23 1009.7619047619048
(byte*) current_piece_gfx#20 current_piece_gfx zp[2]:23 15185.37037037037
(byte*) current_piece_gfx#21 current_piece_gfx zp[2]:23 51667.33333333333
(byte*) current_piece_gfx#35 current_piece_gfx zp[2]:23 300003.0
(byte*) current_piece_gfx#64 current_piece_gfx_1 zp[2]:7 47624.42857142857
(byte*) current_piece_gfx#7 current_piece_gfx zp[2]:23 200002.0
(byte) current_xpos
(byte) current_xpos#100 current_xpos zp[1]:25 67742.74193548388
(byte) current_xpos#119 current_xpos_1 zp[1]:6 7.333333333333333
(byte) current_xpos#120 current_xpos_1 zp[1]:6 67.33333333333333
(byte) current_xpos#14 current_xpos zp[1]:25 1.8187293036363635E7
(byte) current_xpos#19 current_xpos zp[1]:25 1009.7619047619048
(byte) current_xpos#22 current_xpos zp[1]:25 36400.4
(byte) current_xpos#26 current_xpos zp[1]:25 20333.566666666666
(byte) current_xpos#43 current_xpos zp[1]:25 300003.0
(byte) current_xpos#59 current_xpos_1 zp[1]:6 4767.285714285714
(byte) current_xpos#6 current_xpos zp[1]:25 200002.0
(byte) current_xpos#8 current_xpos zp[1]:25 200002.0
(byte) current_ypos
(byte) current_ypos#11 current_ypos zp[1]:13 35165.32432432432
(byte) current_ypos#13 reg byte x 1113.0
(byte) current_ypos#19 current_ypos zp[1]:13 6425.74358974359
(byte) current_ypos#3 current_ypos zp[1]:13 200002.0
(byte) current_ypos#38 current_ypos zp[1]:13 300003.0
(byte) current_ypos#6 current_ypos zp[1]:13 70000.83333333334
(byte) current_ypos#98 reg byte x 5.5
(byte) current_ypos#99 reg byte x 40.4
(byte) game_over
(byte) game_over#10 game_over zp[1]:27 6567.760869565218
(byte) game_over#15 game_over zp[1]:27 5705.54054054054
(byte) game_over#27 game_over zp[1]:27 300003.0
(byte) game_over#52 game_over zp[1]:27 47827.13043478261
(byte) game_over#65 game_over zp[1]:27 78572.35714285714
(volatile byte) irq_cnt loadstore zp[1]:46 0.48000000000000004
(volatile byte) irq_raster_next loadstore zp[1]:43 0.44444444444444453
(volatile byte) irq_sprite_ptr loadstore zp[1]:45 0.45161290322580644
(volatile byte) irq_sprite_ypos loadstore zp[1]:44 0.48275862068965525
(byte()) keyboard_event_get()
(label) keyboard_event_get::@1
(label) keyboard_event_get::@return
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#1 reg byte a 20002.0
(byte) keyboard_event_get::return#2 reg byte a 3667.333333333333
(byte) keyboard_event_get::return#3 reg byte a 2002.0
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0 reg byte y 2000002.0
(byte~) keyboard_event_pressed::$1 reg byte x 2000002.0
(label) keyboard_event_pressed::@return
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#5 reg byte x 666667.3333333334
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0 reg byte a 20002.0
(byte) keyboard_event_pressed::return#1 reg byte a 20002.0
(byte) keyboard_event_pressed::return#10 reg byte a 20002.0
(byte) keyboard_event_pressed::return#11 reg byte a 162858.0
(byte) keyboard_event_pressed::return#12 reg byte a 200002.0
(byte) keyboard_event_pressed::return#2 reg byte a 20002.0
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0 reg byte y 1000001.0
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0 reg byte a 20002.0
(byte~) keyboard_event_scan::$15 reg byte a 2.00000002E8
(byte~) keyboard_event_scan::$16 reg byte a 2.00000002E8
(byte~) keyboard_event_scan::$23 reg byte a 2.00000002E8
(byte~) keyboard_event_scan::$3 reg byte a 20002.0
(byte~) keyboard_event_scan::$6 reg byte a 20002.0
(byte~) keyboard_event_scan::$9 reg byte a 20002.0
(label) keyboard_event_scan::@1
(label) keyboard_event_scan::@10
(label) keyboard_event_scan::@11
(label) keyboard_event_scan::@12
(label) keyboard_event_scan::@13
(label) keyboard_event_scan::@14
(label) keyboard_event_scan::@15
(label) keyboard_event_scan::@16
(label) keyboard_event_scan::@17
(label) keyboard_event_scan::@18
(label) keyboard_event_scan::@19
(label) keyboard_event_scan::@2
(label) keyboard_event_scan::@20
(label) keyboard_event_scan::@21
(label) keyboard_event_scan::@22
(label) keyboard_event_scan::@23
(label) keyboard_event_scan::@3
(label) keyboard_event_scan::@4
(label) keyboard_event_scan::@5
(label) keyboard_event_scan::@6
(label) keyboard_event_scan::@7
(label) keyboard_event_scan::@8
(label) keyboard_event_scan::@9
(label) keyboard_event_scan::@return
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#1 reg byte x 1.500000015E8
(byte) keyboard_event_scan::col#2 reg byte x 2.857142885714286E7
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0 reg byte a 2.00000002E8
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#1 keycode zp[1]:31 2.0000002E7
(byte) keyboard_event_scan::keycode#10 keycode zp[1]:31 3.153846192307692E7
(byte) keyboard_event_scan::keycode#11 keycode zp[1]:31 5000000.5
(byte) keyboard_event_scan::keycode#13 keycode zp[1]:31 1.0000001E7
(byte) keyboard_event_scan::keycode#14 keycode zp[1]:31 5.250000075E7
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#1 row zp[1]:30 1.50000015E7
(byte) keyboard_event_scan::row#2 row zp[1]:30 6000000.24
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0 row_scan zp[1]:60 1.2777778055555556E7
(const byte*) keyboard_events[(number) 8]  = { fill( 8, 0) }
(byte) keyboard_events_size
(byte) keyboard_events_size#1 keyboard_events_size zp[1]:32 2.00000002E8
(byte) keyboard_events_size#10 keyboard_events_size zp[1]:32 8.100000089999999E7
(byte) keyboard_events_size#13 keyboard_events_size zp[1]:32 968709.870967742
(byte) keyboard_events_size#16 keyboard_events_size zp[1]:32 811.6923076923076
(byte) keyboard_events_size#19 keyboard_events_size zp[1]:32 1850.5
(byte) keyboard_events_size#2 keyboard_events_size zp[1]:32 2.00000002E8
(byte) keyboard_events_size#29 keyboard_events_size zp[1]:32 1.020000012E8
(byte) keyboard_events_size#30 keyboard_events_size zp[1]:32 4287143.428571429
(byte) keyboard_events_size#4 keyboard_events_size zp[1]:32 15001.5
(const byte*) keyboard_matrix_col_bitmask[(number) 8]  = { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 reg byte a 3.6666667333333336E7
(byte) keyboard_matrix_read::return#2 reg byte a 2.0000002E7
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 reg byte x 1.10000002E8
(const byte*) keyboard_matrix_row_bitmask[(number) 8]  = { (byte) $fe, (byte) $fd, (byte) $fb, (byte) $f7, (byte) $ef, (byte) $df, (byte) $bf, (byte) $7f }
(byte) keyboard_modifiers
(const byte*) keyboard_scan_values[(number) 8]  = { fill( 8, 0) }
(byte) level
(byte) level#10 level zp[1]:16 185168.31818181818
(byte) level#17 level zp[1]:16 5435.243243243243
(byte) level#19 level zp[1]:16 442857.7142857142
(byte) level#21 level zp[1]:16 1722222.4444444445
(byte) level#33 level zp[1]:16 300003.0
(byte) level_bcd
(byte) level_bcd#11 level_bcd zp[1]:18 200018.1475409836
(byte) level_bcd#17 level_bcd zp[1]:18 3425.508474576271
(byte) level_bcd#19 level_bcd zp[1]:18 442857.7142857142
(byte) level_bcd#21 level_bcd zp[1]:18 1.3333334666666666E7
(byte) level_bcd#31 level_bcd zp[1]:18 300003.0
(byte) level_bcd#62 level_bcd zp[1]:18 2100000.3
(byte) level_bcd#8 level_bcd zp[1]:18 2.0000002E7
(word) lines_bcd
(word) lines_bcd#15 lines_bcd zp[2]:14 3442.4745762711864
(word) lines_bcd#17 lines_bcd zp[2]:14 442857.7142857142
(word) lines_bcd#19 lines_bcd zp[2]:14 64022.14
(word) lines_bcd#26 lines_bcd zp[2]:14 300003.0
(word) lines_bcd#29 lines_bcd zp[2]:14 500000.5
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@19
(label) main::@2
(label) main::@20
(label) main::@21
(label) main::@22
(label) main::@23
(label) main::@24
(label) main::@25
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(byte) main::key_event
(byte) main::key_event#0 reg byte x 1001.0
(byte) main::render
(byte) main::render#1 reg byte a 2002.0
(label) main::sid_rnd_init1
(byte) next_piece_idx
(byte) next_piece_idx#10 next_piece_idx zp[1]:26 6546.0
(byte) next_piece_idx#12 reg byte y 422.79999999999995
(byte) next_piece_idx#16 next_piece_idx zp[1]:26 5437.9729729729725
(byte) next_piece_idx#17 next_piece_idx zp[1]:26 1100013.0
(byte) next_piece_idx#30 next_piece_idx zp[1]:26 300003.0
(byte) next_piece_idx#77 reg byte y 22.0
(byte) next_piece_idx#78 reg byte y 202.0
(byte()) play_collision((byte) play_collision::xpos , (byte) play_collision::ypos , (byte) play_collision::orientation)
(byte~) play_collision::$14 reg byte a 2.0000000002E10
(byte~) play_collision::$5 reg byte a 2.00000000002E11
(label) play_collision::@1
(label) play_collision::@10
(label) play_collision::@2
(label) play_collision::@3
(label) play_collision::@4
(label) play_collision::@5
(label) play_collision::@6
(label) play_collision::@7
(label) play_collision::@8
(label) play_collision::@9
(label) play_collision::@return
(byte) play_collision::c
(byte) play_collision::c#1 reg byte x 1.00000000001E11
(byte) play_collision::c#2 reg byte x 2.2222222222444443E10
(byte) play_collision::i
(byte) play_collision::i#1 i zp[1]:59 1.6153846154076923E10
(byte) play_collision::i#10 i_1 zp[1]:31 2.0000000002E10
(byte) play_collision::i#12 i_1 zp[1]:31 2.00000000002E11
(byte) play_collision::i#2 i_1 zp[1]:31 1.55000000002E11
(byte) play_collision::i#3 i_1 zp[1]:31 5.0000000005E9
(byte) play_collision::l
(byte) play_collision::l#1 l zp[1]:30 1.0000000001E10
(byte) play_collision::l#6 l zp[1]:30 1.1764705883529413E9
(byte) play_collision::orientation
(byte) play_collision::orientation#0 reg byte x 100001.0
(byte) play_collision::orientation#1 reg byte x 100001.0
(byte) play_collision::orientation#2 reg byte x 100001.0
(byte) play_collision::orientation#3 reg byte x 100001.0
(byte) play_collision::orientation#5 reg byte x 1.0400005E7
(byte*) play_collision::piece_gfx
(byte*) play_collision::piece_gfx#0 piece_gfx zp[2]:10 4.762380952476191E9
(byte*) play_collision::playfield_line
(byte*) play_collision::playfield_line#0 playfield_line zp[2]:50 7.857142857285714E9
(byte) play_collision::return
(byte) play_collision::return#0 reg byte a 200002.0
(byte) play_collision::return#1 reg byte a 200002.0
(byte) play_collision::return#10 reg byte a 2000002.0
(byte) play_collision::return#13 reg byte a 200002.0
(byte) play_collision::return#14 reg byte a 200002.0
(byte) play_collision::return#15 reg byte a 200000.7142857143
(byte) play_collision::xp
(byte) play_collision::xp#1 xp zp[1]:60 5.00000000005E10
(byte) play_collision::xp#2 xp zp[1]:60 6.375000000075E10
(byte) play_collision::xp#8 xp zp[1]:60 2.0000000002E10
(byte) play_collision::xpos
(byte) play_collision::xpos#0 xpos zp[1]:28 66667.33333333333
(byte) play_collision::xpos#1 xpos zp[1]:28 50000.5
(byte) play_collision::xpos#2 xpos zp[1]:28 50000.5
(byte) play_collision::xpos#3 xpos zp[1]:28 50000.5
(byte) play_collision::xpos#4 xpos zp[1]:28 666667.3333333334
(byte) play_collision::xpos#6 xpos zp[1]:28 4.546090911818181E8
(byte) play_collision::yp
(byte) play_collision::yp#0 yp zp[1]:29 5700003.0
(byte) play_collision::yp#1 yp zp[1]:29 5.0000000005E9
(byte) play_collision::yp#2 yp zp[1]:29 8.1256250003125E9
(byte) play_collision::ypos
(byte) play_collision::ypos#0 ypos zp[1]:29 50000.5
(byte) play_collision::ypos#1 ypos zp[1]:29 66667.33333333333
(byte) play_collision::ypos#2 ypos zp[1]:29 66667.33333333333
(byte) play_collision::ypos#3 ypos zp[1]:29 66667.33333333333
(byte) play_collision::ypos#4 ypos zp[1]:29 1000001.0
(void()) play_increase_level()
(byte~) play_increase_level::$1 reg byte a 2.0000002E7
(byte~) play_increase_level::$5 reg byte a 4.0000000004E10
(label) play_increase_level::@1
(label) play_increase_level::@2
(label) play_increase_level::@3
(label) play_increase_level::@4
(label) play_increase_level::@5
(label) play_increase_level::@6
(label) play_increase_level::@return
(byte) play_increase_level::b
(byte) play_increase_level::b#1 reg byte x 1.50000000015E10
(byte) play_increase_level::b#2 reg byte x 1.0000000001E10
(void()) play_init()
(byte~) play_init::$2 reg byte x 2002.0
(byte~) play_init::$3 reg byte a 3003.0
(label) play_init::@1
(label) play_init::@2
(label) play_init::@3
(label) play_init::@return
(byte) play_init::b
(byte) play_init::b#1 reg byte x 1501.5
(byte) play_init::b#2 reg byte x 1001.0
(byte) play_init::idx
(byte) play_init::idx#1 idx zp[1]:33 667.3333333333334
(byte) play_init::idx#2 idx zp[1]:33 600.5999999999999
(byte) play_init::j
(byte) play_init::j#1 reg byte y 1501.5
(byte) play_init::j#2 reg byte y 667.3333333333334
(byte*) play_init::pli
(byte*) play_init::pli#1 pli zp[2]:34 500.5
(byte*) play_init::pli#2 pli zp[2]:34 750.75
(void()) play_lock_current()
(byte~) play_lock_current::$4 reg byte a 2.000000002E9
(label) play_lock_current::@1
(label) play_lock_current::@2
(label) play_lock_current::@3
(label) play_lock_current::@4
(label) play_lock_current::@5
(label) play_lock_current::@6
(label) play_lock_current::@7
(label) play_lock_current::@return
(byte) play_lock_current::c
(byte) play_lock_current::c#1 reg byte x 1.0000000001E10
(byte) play_lock_current::c#2 reg byte x 4.0000000004E9
(byte) play_lock_current::i
(byte) play_lock_current::i#1 i zp[1]:59 2.333333333666667E9
(byte) play_lock_current::i#2 i_1 zp[1]:30 1.5500000002E10
(byte) play_lock_current::i#3 i_1 zp[1]:30 5.000000005E8
(byte) play_lock_current::i#7 i_1 zp[1]:30 2.000000002E9
(byte) play_lock_current::i#9 i_1 zp[1]:30 2.0000000002E10
(byte) play_lock_current::l
(byte) play_lock_current::l#1 l zp[1]:60 1.000000001E9
(byte) play_lock_current::l#6 l zp[1]:60 1.53846154E8
(byte*) play_lock_current::playfield_line
(byte*) play_lock_current::playfield_line#0 playfield_line zp[2]:57 1.1000000002E9
(byte) play_lock_current::xp
(byte) play_lock_current::xp#0 xp zp[1]:31 2.000000002E9
(byte) play_lock_current::xp#1 xp zp[1]:31 5.0000000005E9
(byte) play_lock_current::xp#2 xp zp[1]:31 7.750000001E9
(byte) play_lock_current::yp
(byte) play_lock_current::yp#0 yp zp[1]:13 2000002.0
(byte) play_lock_current::yp#1 yp zp[1]:13 5.000000005E8
(byte) play_lock_current::yp#2 yp zp[1]:13 2.500833336666667E8
(byte()) play_move_down((byte) play_move_down::key_event)
(byte~) play_move_down::$12 reg byte a 200002.0
(byte~) play_move_down::$2 reg byte a 200002.0
(label) play_move_down::@1
(label) play_move_down::@10
(label) play_move_down::@11
(label) play_move_down::@12
(label) play_move_down::@13
(label) play_move_down::@14
(label) play_move_down::@15
(label) play_move_down::@16
(label) play_move_down::@17
(label) play_move_down::@2
(label) play_move_down::@3
(label) play_move_down::@4
(label) play_move_down::@5
(label) play_move_down::@6
(label) play_move_down::@7
(label) play_move_down::@8
(label) play_move_down::@9
(label) play_move_down::@return
(byte) play_move_down::key_event
(byte) play_move_down::key_event#0 reg byte a 55001.0
(byte) play_move_down::movedown
(byte) play_move_down::movedown#10 movedown zp[1]:12 50000.5
(byte) play_move_down::movedown#2 movedown zp[1]:12 200002.0
(byte) play_move_down::movedown#3 movedown zp[1]:12 200002.0
(byte) play_move_down::movedown#6 movedown zp[1]:12 300003.0
(byte) play_move_down::movedown#7 movedown zp[1]:12 250002.5
(byte) play_move_down::removed
(byte) play_move_down::removed#0 reg byte a 200002.0
(byte) play_move_down::return
(byte) play_move_down::return#0 reg byte a 20002.0
(byte) play_move_down::return#3 reg byte x 3333.6666666666665
(byte()) play_move_leftright((byte) play_move_leftright::key_event)
(byte~) play_move_leftright::$4 reg byte a 200002.0
(byte~) play_move_leftright::$8 reg byte a 200002.0
(label) play_move_leftright::@1
(label) play_move_leftright::@2
(label) play_move_leftright::@3
(label) play_move_leftright::@4
(label) play_move_leftright::@5
(label) play_move_leftright::@6
(label) play_move_leftright::@7
(label) play_move_leftright::@return
(byte) play_move_leftright::key_event
(byte) play_move_leftright::key_event#0 reg byte a 105001.5
(byte) play_move_leftright::return
(byte) play_move_leftright::return#0 reg byte a 20002.0
(byte) play_move_leftright::return#2 reg byte a 3333.6666666666665
(byte()) play_move_rotate((byte) play_move_rotate::key_event)
(byte~) play_move_rotate::$2 reg byte a 200002.0
(byte~) play_move_rotate::$5 reg byte x 200002.0
(byte~) play_move_rotate::$7 reg byte a 200002.0
(label) play_move_rotate::@1
(label) play_move_rotate::@2
(label) play_move_rotate::@3
(label) play_move_rotate::@4
(label) play_move_rotate::@5
(label) play_move_rotate::@6
(label) play_move_rotate::@return
(byte) play_move_rotate::key_event
(byte) play_move_rotate::key_event#0 reg byte a 105001.5
(byte) play_move_rotate::orientation
(byte) play_move_rotate::orientation#1 orientation zp[1]:12 200002.0
(byte) play_move_rotate::orientation#2 orientation zp[1]:12 200002.0
(byte) play_move_rotate::orientation#3 orientation zp[1]:12 44444.88888888889
(byte) play_move_rotate::return
(byte) play_move_rotate::return#0 reg byte a 20002.0
(byte) play_move_rotate::return#2 reg byte a 3333.6666666666665
(byte()) play_movement((byte) play_movement::key_event)
(byte~) play_movement::$3 reg byte a 20002.0
(byte~) play_movement::$4 reg byte a 20002.0
(label) play_movement::@1
(label) play_movement::@2
(label) play_movement::@3
(label) play_movement::@4
(label) play_movement::@return
(byte) play_movement::key_event
(byte) play_movement::key_event#0 key_event zp[1]:47 2818.5454545454545
(byte) play_movement::render
(byte) play_movement::render#1 render zp[1]:33 5000.5
(byte) play_movement::render#2 render zp[1]:33 4000.4
(byte) play_movement::return
(byte) play_movement::return#0 return zp[1]:33 20002.0
(byte) play_movement::return#2 return zp[1]:33 7001.0
(byte) play_movement::return#3 reg byte a 2002.0
(byte()) play_remove_lines()
(label) play_remove_lines::@1
(label) play_remove_lines::@2
(label) play_remove_lines::@3
(label) play_remove_lines::@4
(label) play_remove_lines::@5
(label) play_remove_lines::@6
(label) play_remove_lines::@7
(label) play_remove_lines::@8
(label) play_remove_lines::@9
(label) play_remove_lines::@return
(byte) play_remove_lines::c
(byte) play_remove_lines::c#0 c zp[1]:59 6.0000000006E9
(byte) play_remove_lines::full
(byte) play_remove_lines::full#2 full zp[1]:31 4.2000000006E9
(byte) play_remove_lines::full#4 full zp[1]:31 4.0000000004E9
(byte) play_remove_lines::r
(byte) play_remove_lines::r#1 reg byte y 1.5000000002142856E9
(byte) play_remove_lines::r#2 reg byte y 1.5500000002E10
(byte) play_remove_lines::r#3 reg byte y 2.000000002E9
(byte) play_remove_lines::removed
(byte) play_remove_lines::removed#1 removed zp[1]:29 2.000000002E9
(byte) play_remove_lines::removed#11 removed zp[1]:29 2.30769231E8
(byte) play_remove_lines::removed#7 removed zp[1]:29 3.333444448888889E8
(byte) play_remove_lines::return
(byte) play_remove_lines::return#0 reg byte a 200002.0
(byte) play_remove_lines::w
(byte) play_remove_lines::w#1 reg byte x 5.500000001E9
(byte) play_remove_lines::w#11 reg byte x 1.3333333346666667E9
(byte) play_remove_lines::w#12 reg byte x 2.000000002E9
(byte) play_remove_lines::w#2 reg byte x 1.000000001E9
(byte) play_remove_lines::w#3 reg byte x 2.000000002E9
(byte) play_remove_lines::w#4 reg byte x 4.428571429142857E9
(byte) play_remove_lines::w#6 reg byte x 1.6666666683333335E9
(byte) play_remove_lines::x
(byte) play_remove_lines::x#1 x zp[1]:30 1.50000000015E10
(byte) play_remove_lines::x#2 x zp[1]:30 2.50000000025E9
(byte) play_remove_lines::y
(byte) play_remove_lines::y#1 y zp[1]:28 1.5000000015E9
(byte) play_remove_lines::y#8 y zp[1]:28 1.3333333346666667E8
(void()) play_spawn_current()
(byte~) play_spawn_current::$1 reg byte a 2000002.0
(byte~) play_spawn_current::$7 zp[1]:52 32258.09677419355
(label) play_spawn_current::@1
(label) play_spawn_current::@2
(label) play_spawn_current::@3
(label) play_spawn_current::@4
(label) play_spawn_current::@5
(label) play_spawn_current::@return
(byte) play_spawn_current::current_piece_idx
(byte) play_spawn_current::current_piece_idx#0 reg byte x 1250001.25
(byte) play_spawn_current::piece_idx
(byte) play_spawn_current::piece_idx#1 piece_idx zp[1]:26 2.000000002E9
(byte) play_spawn_current::piece_idx#2 piece_idx zp[1]:26 1.000050018E8
(label) play_spawn_current::sid_rnd1
(byte) play_spawn_current::sid_rnd1_return
(byte) play_spawn_current::sid_rnd1_return#0 reg byte a 2.000000002E9
(void()) play_update_score((byte) play_update_score::removed)
(byte~) play_update_score::$2 reg byte a 2000002.0
(byte~) play_update_score::$4 reg byte a 2000002.0
(byte~) play_update_score::$9 reg byte a 2000002.0
(label) play_update_score::@1
(label) play_update_score::@2
(label) play_update_score::@return
(dword) play_update_score::add_bcd
(dword) play_update_score::add_bcd#0 add_bcd zp[4]:53 666667.3333333334
(byte) play_update_score::lines_after
(byte) play_update_score::lines_after#0 reg byte a 2000002.0
(byte) play_update_score::lines_before
(byte) play_update_score::lines_before#0 lines_before zp[1]:52 222222.44444444444
(byte) play_update_score::removed
(byte) play_update_score::removed#0 reg byte x 442857.7142857142
(const byte*) playfield[(const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS]  = { fill( PLAYFIELD_LINES*PLAYFIELD_COLS, 0) }
(const byte**) playfield_lines[(const nomodify byte) PLAYFIELD_LINES]  = { fill( PLAYFIELD_LINES, 0) }
(const byte*) playfield_lines_idx[(const nomodify byte) PLAYFIELD_LINES+(byte) 1]  = { fill( PLAYFIELD_LINES+1, 0) }
(void()) render_bcd((byte*) render_bcd::screen , (word) render_bcd::offset , (byte) render_bcd::bcd , (byte) render_bcd::only_low)
(byte~) render_bcd::$3 reg byte a 20002.0
(byte~) render_bcd::$4 reg byte a 20002.0
(byte~) render_bcd::$5 reg byte a 20002.0
(byte~) render_bcd::$6 reg byte a 20002.0
(label) render_bcd::@1
(label) render_bcd::@2
(label) render_bcd::@return
(const nomodify byte) render_bcd::ZERO_CHAR = (byte) $35
(byte) render_bcd::bcd
(byte) render_bcd::bcd#0 reg byte x 2002.0
(byte) render_bcd::bcd#1 reg byte x 2002.0
(byte) render_bcd::bcd#2 reg byte x 2002.0
(byte) render_bcd::bcd#3 reg byte x 1001.0
(byte) render_bcd::bcd#4 reg byte x 1001.0
(byte) render_bcd::bcd#5 reg byte x 2002.0
(byte) render_bcd::bcd#6 reg byte x 3251.0
(word) render_bcd::offset
(word) render_bcd::offset#6 offset zp[2]:10 10001.0
(byte) render_bcd::only_low
(byte) render_bcd::only_low#6 reg byte y 5000.5
(byte*) render_bcd::screen
(byte*) render_bcd::screen#0 screen zp[2]:7 1001.0
(byte*) render_bcd::screen#1 screen zp[2]:7 1001.0
(byte*) render_bcd::screen#2 screen zp[2]:7 1001.0
(byte*) render_bcd::screen#3 screen zp[2]:7 2002.0
(byte*) render_bcd::screen#4 screen zp[2]:7 2002.0
(byte*) render_bcd::screen#5 screen zp[2]:7 1001.0
(byte*) render_bcd::screen#6 screen zp[2]:7 16007.0
(byte*) render_bcd::screen_pos
(byte*) render_bcd::screen_pos#0 screen_pos zp[2]:10 8000.8
(byte*) render_bcd::screen_pos#2 screen_pos zp[2]:10 20002.0
(byte*) render_bcd::screen_pos#3 screen_pos zp[2]:10 10001.0
(void()) render_init()
(byte~) render_init::$5 reg byte x 1501.5
(label) render_init::@1
(label) render_init::@2
(label) render_init::@3
(label) render_init::@return
(byte) render_init::i
(byte) render_init::i#1 reg byte y 1501.5
(byte) render_init::i#2 reg byte y 500.5
(byte*) render_init::li_1
(byte*) render_init::li_1#1 li_1 zp[2]:34 500.5
(byte*) render_init::li_1#2 li_1 zp[2]:34 750.75
(byte*) render_init::li_2
(byte*) render_init::li_2#1 li_2 zp[2]:48 667.3333333333334
(byte*) render_init::li_2#2 li_2 zp[2]:48 600.5999999999999
(label) render_init::vicSelectGfxBank1
(label) render_init::vicSelectGfxBank1_@1
(byte*) render_init::vicSelectGfxBank1_gfx
(label) render_init::vicSelectGfxBank1_toDd001
(byte*) render_init::vicSelectGfxBank1_toDd001_gfx
(byte) render_init::vicSelectGfxBank1_toDd001_return
(const byte) render_init::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = (byte) 3
(void()) render_moving()
(byte~) render_moving::$1 reg byte a 200002.0
(byte~) render_moving::$6 reg byte a 200002.0
(label) render_moving::@1
(label) render_moving::@2
(label) render_moving::@3
(label) render_moving::@4
(label) render_moving::@5
(label) render_moving::@6
(label) render_moving::@7
(label) render_moving::@return
(byte) render_moving::c
(byte) render_moving::c#1 reg byte x 1500001.5
(byte) render_moving::c#2 reg byte x 333333.6666666667
(byte) render_moving::current_cell
(byte) render_moving::current_cell#0 reg byte a 1000001.0
(byte) render_moving::i
(byte) render_moving::i#1 i zp[1]:29 200002.0
(byte) render_moving::i#2 i zp[1]:29 500000.5
(byte) render_moving::i#3 i zp[1]:29 50000.5
(byte) render_moving::i#4 i zp[1]:29 1550002.0
(byte) render_moving::i#8 i zp[1]:29 300000.75
(byte) render_moving::l
(byte) render_moving::l#1 l zp[1]:28 150001.5
(byte) render_moving::l#4 l zp[1]:28 11764.823529411764
(byte*) render_moving::screen_line
(byte*) render_moving::screen_line#0 screen_line zp[2]:48 110000.20000000001
(byte) render_moving::xpos
(byte) render_moving::xpos#0 xpos zp[1]:33 200002.0
(byte) render_moving::xpos#1 xpos zp[1]:33 666667.3333333334
(byte) render_moving::xpos#2 xpos zp[1]:33 620000.8
(byte) render_moving::ypos
(byte) render_moving::ypos#0 ypos zp[1]:12 2002.0
(byte) render_moving::ypos#1 ypos zp[1]:12 66667.33333333333
(byte) render_moving::ypos#2 ypos zp[1]:12 25062.8125
(void()) render_next()
(byte~) render_next::$6 reg byte x 500.5
(label) render_next::@1
(label) render_next::@2
(label) render_next::@3
(label) render_next::@4
(label) render_next::@5
(label) render_next::@6
(label) render_next::@7
(label) render_next::@8
(label) render_next::@return
(byte) render_next::c
(byte) render_next::c#1 reg byte x 1500001.5
(byte) render_next::c#2 reg byte x 285714.5714285714
(byte) render_next::cell
(byte) render_next::cell#0 reg byte a 1000001.0
(byte) render_next::l
(byte) render_next::l#1 l zp[1]:5 150001.5
(byte) render_next::l#7 l zp[1]:5 18182.0
(const word) render_next::next_area_offset = (word)(number) $28*(number) $c+(number) $18+(number) 4
(byte) render_next::next_piece_char
(byte) render_next::next_piece_char#0 next_piece_char zp[1]:59 66733.46666666667
(byte*) render_next::next_piece_gfx
(byte*) render_next::next_piece_gfx#1 next_piece_gfx zp[2]:7 210000.30000000002
(byte*) render_next::next_piece_gfx#2 next_piece_gfx zp[2]:7 1550002.0
(byte*) render_next::next_piece_gfx#3 next_piece_gfx zp[2]:7 201003.0
(byte*) render_next::next_piece_gfx#8 next_piece_gfx zp[2]:7 2002.0
(byte*) render_next::screen_next_area
(byte*) render_next::screen_next_area#10 screen_next_area zp[2]:10 201003.0
(byte*) render_next::screen_next_area#11 screen_next_area zp[2]:10 250.25
(byte*) render_next::screen_next_area#3 screen_next_area zp[2]:10 700001.0
(byte*) render_next::screen_next_area#4 screen_next_area zp[2]:10 66667.33333333333
(byte*) render_next::screen_next_area#5 screen_next_area zp[2]:10 683334.1666666667
(void()) render_playfield()
(byte~) render_playfield::$0 reg byte a 200002.0
(byte~) render_playfield::$3 reg byte a 200002.0
(label) render_playfield::@1
(label) render_playfield::@2
(label) render_playfield::@3
(label) render_playfield::@return
(byte) render_playfield::c
(byte) render_playfield::c#1 c zp[1]:29 1500001.5
(byte) render_playfield::c#2 c zp[1]:29 500000.5
(byte) render_playfield::i
(byte) render_playfield::i#1 i zp[1]:28 420000.60000000003
(byte) render_playfield::i#2 i zp[1]:28 1033334.6666666667
(byte) render_playfield::i#3 i zp[1]:28 50000.5
(byte) render_playfield::l
(byte) render_playfield::l#1 l zp[1]:12 150001.5
(byte) render_playfield::l#2 l zp[1]:12 30000.300000000003
(byte*) render_playfield::screen_line
(byte*) render_playfield::screen_line#0 screen_line zp[2]:10 200002.0
(byte*) render_playfield::screen_line#1 screen_line zp[2]:10 500000.5
(byte*) render_playfield::screen_line#2 screen_line zp[2]:10 1550002.0
(void()) render_score()
(label) render_score::@1
(label) render_score::@2
(label) render_score::@3
(label) render_score::@4
(label) render_score::@5
(label) render_score::@6
(label) render_score::@7
(label) render_score::@return
(const word) render_score::level_offset = (word)(number) $28*(number) $13+(number) $1f
(const word) render_score::lines_offset = (word)(number) $28*(number) 1+(number) $16
(const byte*) render_score::score_bytes = (byte*)&(volatile dword) score_bcd
(const word) render_score::score_offset = (word)(number) $28*(number) 5+(number) $1c
(byte*) render_score::screen
(byte*) render_score::screen#3 screen zp[2]:7 375.375
(void()) render_screen_original((byte*) render_screen_original::screen)
(label) render_screen_original::@1
(label) render_screen_original::@2
(label) render_screen_original::@3
(label) render_screen_original::@4
(label) render_screen_original::@5
(label) render_screen_original::@return
(const byte) render_screen_original::SPACE = (byte) 0
(byte*) render_screen_original::cols
(byte*) render_screen_original::cols#1 cols zp[2]:36 100001.0
(byte*) render_screen_original::cols#2 cols zp[2]:36 75000.75
(byte*) render_screen_original::cols#3 cols zp[2]:36 42000.600000000006
(byte*) render_screen_original::cols#4 cols zp[2]:36 77501.0
(byte*) render_screen_original::cols#5 cols zp[2]:36 80000.8
(byte*) render_screen_original::cols#6 cols zp[2]:36 100001.0
(byte*) render_screen_original::cols#7 cols zp[2]:36 20002.0
(byte*) render_screen_original::ocols
(byte*) render_screen_original::ocols#1 ocols zp[2]:57 17500.25
(byte*) render_screen_original::ocols#2 ocols zp[2]:57 66667.33333333333
(byte*) render_screen_original::ocols#4 ocols zp[2]:57 13750.25
(byte*) render_screen_original::oscr
(byte*) render_screen_original::oscr#1 oscr zp[2]:50 14000.2
(byte*) render_screen_original::oscr#2 oscr zp[2]:50 133334.66666666666
(byte*) render_screen_original::oscr#4 oscr zp[2]:50 13750.25
(byte*) render_screen_original::screen
(byte*) render_screen_original::screen#10 screen zp[2]:48 30000.428571428572
(byte*) render_screen_original::screen#2 screen zp[2]:48 60000.600000000006
(byte*) render_screen_original::screen#3 screen zp[2]:48 42857.57142857143
(byte*) render_screen_original::screen#5 screen zp[2]:48 155002.0
(byte*) render_screen_original::screen#6 screen zp[2]:48 200002.0
(byte*) render_screen_original::screen#7 screen zp[2]:48 200002.0
(byte*) render_screen_original::screen#8 screen zp[2]:48 21003.0
(byte*) render_screen_original::screen#9 screen zp[2]:48 1001.0
(byte) render_screen_original::x
(byte) render_screen_original::x#1 reg byte x 200002.0
(byte) render_screen_original::x#2 reg byte x 200002.0
(byte) render_screen_original::x#3 reg byte x 150001.5
(byte) render_screen_original::x#4 reg byte x 40000.4
(byte) render_screen_original::x#5 reg byte x 42857.57142857143
(byte) render_screen_original::x#6 reg byte x 60000.600000000006
(byte) render_screen_original::y
(byte) render_screen_original::y#1 y zp[1]:47 15001.5
(byte) render_screen_original::y#6 y zp[1]:47 833.4166666666666
(byte) render_screen_render
(byte) render_screen_render#11 render_screen_render zp[1]:3 275.5
(byte) render_screen_render#15 reg byte x 1102.0
(byte) render_screen_render#18 render_screen_render zp[1]:3 84.76923076923077
(byte) render_screen_render#22 reg byte x 7700.153846153846
(byte) render_screen_render#33 render_screen_render_1 zp[1]:5 4766.761904761905
(byte) render_screen_render#64 reg byte x 202.0
(byte) render_screen_render#65 render_screen_render_1 zp[1]:5 50.5
(byte) render_screen_render#66 reg byte x 101.0
(byte) render_screen_show
(byte) render_screen_show#13 render_screen_show zp[1]:2 367.33333333333337
(byte) render_screen_show#16 render_screen_show zp[1]:2 577.65
(volatile byte) render_screen_showing loadstore zp[1]:38 1000.5000000000001
(void()) render_screen_swap()
(label) render_screen_swap::@return
(void()) render_show()
(label) render_show::@1
(label) render_show::@return
(byte) render_show::d018val
(byte) render_show::d018val#3 reg byte a 10001.0
(label) render_show::toD0181
(byte*) render_show::toD0181_gfx
(byte) render_show::toD0181_return
(const byte) render_show::toD0181_return#0 toD0181_return = >(word)(const nomodify byte*) PLAYFIELD_SCREEN_1&(word) $3fff*(byte) 4|>(word)(const nomodify byte*) PLAYFIELD_CHARSET/(byte) 4&(byte) $f
(byte*) render_show::toD0181_screen
(label) render_show::toD0182
(byte*) render_show::toD0182_gfx
(byte) render_show::toD0182_return
(const byte) render_show::toD0182_return#0 toD0182_return = >(word)(const nomodify byte*) PLAYFIELD_SCREEN_2&(word) $3fff*(byte) 4|>(word)(const nomodify byte*) PLAYFIELD_CHARSET/(byte) 4&(byte) $f
(byte*) render_show::toD0182_screen
(const dword*) score_add_bcd[(number) 5]  = { fill( 5, 0) }
(volatile dword) score_bcd loadstore zp[4]:39 14492.782608695652
(const byte**) screen_lines_1[(const nomodify byte) PLAYFIELD_LINES]  = { fill( PLAYFIELD_LINES, 0) }
(const byte**) screen_lines_2[(const nomodify byte) PLAYFIELD_LINES]  = { fill( PLAYFIELD_LINES, 0) }
(void()) sprites_init()
(label) sprites_init::@1
(label) sprites_init::@return
(byte) sprites_init::s
(byte) sprites_init::s#1 reg byte y 1501.5
(byte) sprites_init::s#2 reg byte y 800.8
(byte) sprites_init::s2
(byte) sprites_init::s2#0 reg byte x 2002.0
(byte) sprites_init::xpos
(byte) sprites_init::xpos#1 xpos zp[1]:33 667.3333333333334
(byte) sprites_init::xpos#2 xpos zp[1]:33 750.75
interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
(byte~) sprites_irq::$0 reg byte x 4.0
(label) sprites_irq::@1
(label) sprites_irq::@10
(label) sprites_irq::@11
(label) sprites_irq::@2
(label) sprites_irq::@3
(label) sprites_irq::@4
(label) sprites_irq::@5
(label) sprites_irq::@6
(label) sprites_irq::@7
(label) sprites_irq::@8
(label) sprites_irq::@9
(label) sprites_irq::@return
(byte) sprites_irq::ptr
(byte) sprites_irq::ptr#0 reg byte x 2.5
(byte) sprites_irq::ptr#1 reg byte x 2.6666666666666665
(byte) sprites_irq::ptr#2 reg byte a 4.0
(byte) sprites_irq::ptr#3 reg byte a 2.6666666666666665
(byte) sprites_irq::ptr#4 reg byte a 4.0
(volatile byte) sprites_irq::raster_sprite_gfx_modify loadstore zp[1]:61 6.5
(label) sprites_irq::toSpritePtr1
(byte) sprites_irq::toSpritePtr1_return
(const byte) sprites_irq::toSpritePtr1_return#0 toSpritePtr1_return = (byte)(word)(const nomodify byte*) PLAYFIELD_SPRITES/(byte) $40
(byte*) sprites_irq::toSpritePtr1_sprite
(byte) sprites_irq::ypos
(byte) sprites_irq::ypos#0 reg byte a 2.5
(void()) sprites_irq_init()
(label) sprites_irq_init::@return
(label) toSpritePtr1
(byte) toSpritePtr1_return
(const byte) toSpritePtr1_return#0 toSpritePtr1_return = (byte)(word)(const nomodify byte*) PLAYFIELD_SPRITES/(byte) $40
(byte*) toSpritePtr1_sprite

zp[1]:2 [ render_screen_show#16 render_screen_show#13 ]
zp[1]:3 [ render_screen_render#18 render_screen_render#11 ]
zp[1]:4 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
reg byte y [ render_bcd::only_low#6 ]
reg byte x [ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ]
reg byte x [ render_screen_render#15 render_screen_render#66 ]
reg byte y [ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ]
reg byte x [ render_next::c#2 render_next::c#1 ]
reg byte x [ current_ypos#13 current_ypos#98 current_ypos#99 ]
zp[1]:5 [ render_screen_render#33 render_screen_render#65 render_next::l#7 render_next::l#1 ]
zp[1]:6 [ current_xpos#59 current_xpos#119 current_xpos#120 ]
zp[2]:7 [ current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#8 render_next::next_piece_gfx#1 render_score::screen#3 render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ]
zp[1]:9 [ current_piece_char#68 current_piece_char#100 current_piece_char#101 ]
reg byte x [ render_moving::c#2 render_moving::c#1 ]
reg byte x [ render_screen_render#22 render_screen_render#64 ]
reg byte a [ play_move_rotate::return#2 ]
zp[2]:10 [ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 play_collision::piece_gfx#0 render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#11 render_next::screen_next_area#4 render_next::screen_next_area#3 render_bcd::offset#6 render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ]
reg byte x [ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
reg byte x [ play_collision::c#2 play_collision::c#1 ]
reg byte a [ play_collision::return#15 ]
reg byte a [ play_move_leftright::return#2 ]
zp[1]:12 [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 render_playfield::l#2 render_playfield::l#1 render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ]
zp[1]:13 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#6 current_ypos#19 play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ]
zp[2]:14 [ lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ]
zp[1]:16 [ level#33 level#10 level#17 level#19 level#21 ]
zp[1]:17 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#1 current_movedown_slow#21 current_movedown_slow#23 current_movedown_slow#65 current_movedown_slow#10 ]
zp[1]:18 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
zp[2]:19 [ current_piece#28 current_piece#10 current_piece#101 current_piece#15 current_piece#93 ]
zp[1]:21 [ current_piece_char#29 current_piece_char#10 current_piece_char#5 current_piece_char#16 ]
zp[1]:22 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
zp[2]:23 [ current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#123 current_piece_gfx#18 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#117 ]
zp[1]:25 [ current_xpos#43 current_xpos#14 current_xpos#100 current_xpos#19 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
reg byte x [ play_move_down::return#3 ]
zp[1]:26 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 play_spawn_current::piece_idx#2 next_piece_idx#16 play_spawn_current::piece_idx#1 ]
zp[1]:27 [ game_over#65 game_over#27 game_over#10 game_over#52 game_over#15 ]
reg byte x [ play_increase_level::b#2 play_increase_level::b#1 ]
zp[1]:28 [ play_remove_lines::y#8 play_remove_lines::y#1 play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 render_moving::l#4 render_moving::l#1 ]
zp[1]:29 [ play_remove_lines::removed#11 play_remove_lines::removed#7 play_remove_lines::removed#1 play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 render_playfield::c#2 render_playfield::c#1 render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ]
reg byte y [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ]
reg byte x [ play_remove_lines::w#6 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 play_remove_lines::w#3 ]
reg byte x [ play_lock_current::c#2 play_lock_current::c#1 ]
reg byte x [ keyboard_event_pressed::keycode#5 ]
reg byte a [ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
zp[1]:30 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 play_remove_lines::x#2 play_remove_lines::x#1 play_collision::l#6 play_collision::l#1 ]
reg byte x [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
zp[1]:31 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 play_remove_lines::full#4 play_remove_lines::full#2 play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ]
zp[1]:32 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
reg byte a [ render_show::d018val#3 ]
reg byte y [ play_init::j#2 play_init::j#1 ]
reg byte x [ play_init::b#2 play_init::b#1 ]
reg byte y [ sprites_init::s#2 sprites_init::s#1 ]
zp[1]:33 [ sprites_init::xpos#2 sprites_init::xpos#1 play_init::idx#2 play_init::idx#1 play_movement::return#2 play_movement::render#1 play_movement::return#0 play_movement::render#2 render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ]
reg byte y [ render_init::i#2 render_init::i#1 ]
zp[2]:34 [ render_init::li_1#2 render_init::li_1#1 play_init::pli#2 play_init::pli#1 ]
zp[2]:36 [ render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 ]
reg byte x [ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
zp[1]:38 [ render_screen_showing ]
zp[4]:39 [ score_bcd ]
zp[1]:43 [ irq_raster_next ]
zp[1]:44 [ irq_sprite_ypos ]
zp[1]:45 [ irq_sprite_ptr ]
zp[1]:46 [ irq_cnt ]
reg byte a [ keyboard_event_get::return#3 ]
reg byte x [ main::key_event#0 ]
zp[1]:47 [ play_movement::key_event#0 render_screen_original::y#6 render_screen_original::y#1 ]
reg byte a [ play_movement::return#3 ]
reg byte a [ main::render#1 ]
reg byte a [ render_bcd::$5 ]
reg byte a [ render_bcd::$6 ]
reg byte a [ render_bcd::$3 ]
reg byte a [ render_bcd::$4 ]
reg byte x [ render_next::$6 ]
reg byte a [ render_next::cell#0 ]
reg byte a [ render_moving::$1 ]
reg byte a [ render_moving::$6 ]
zp[2]:48 [ render_moving::screen_line#0 render_init::li_2#2 render_init::li_2#1 render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ]
reg byte a [ render_moving::current_cell#0 ]
reg byte a [ render_playfield::$0 ]
reg byte a [ render_playfield::$3 ]
reg byte a [ play_move_down::key_event#0 ]
reg byte a [ play_move_down::return#0 ]
reg byte a [ play_move_leftright::key_event#0 ]
reg byte a [ play_move_leftright::return#0 ]
reg byte a [ play_movement::$3 ]
reg byte a [ play_move_rotate::key_event#0 ]
reg byte a [ play_move_rotate::return#0 ]
reg byte a [ play_movement::$4 ]
reg byte x [ play_move_rotate::$5 ]
reg byte a [ play_collision::return#14 ]
reg byte a [ play_move_rotate::$2 ]
reg byte a [ play_move_rotate::$7 ]
reg byte a [ play_collision::$14 ]
zp[2]:50 [ play_collision::playfield_line#0 render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 ]
reg byte a [ play_collision::$5 ]
reg byte a [ play_collision::return#13 ]
reg byte a [ play_move_leftright::$4 ]
reg byte a [ play_collision::return#1 ]
reg byte a [ play_move_leftright::$8 ]
reg byte a [ keyboard_event_pressed::return#12 ]
reg byte a [ play_move_down::$2 ]
reg byte a [ play_collision::return#0 ]
reg byte a [ play_move_down::$12 ]
reg byte a [ play_remove_lines::return#0 ]
reg byte a [ play_move_down::removed#0 ]
reg byte x [ play_update_score::removed#0 ]
reg byte x [ play_spawn_current::current_piece_idx#0 ]
reg byte a [ play_collision::return#10 ]
reg byte a [ play_spawn_current::$1 ]
reg byte a [ play_spawn_current::sid_rnd1_return#0 ]
reg byte a [ play_update_score::$2 ]
zp[1]:52 [ play_update_score::lines_before#0 play_spawn_current::$7 ]
reg byte a [ play_update_score::$9 ]
zp[4]:53 [ play_update_score::add_bcd#0 ]
reg byte a [ play_update_score::$4 ]
reg byte a [ play_update_score::lines_after#0 ]
reg byte a [ play_increase_level::$1 ]
reg byte a [ play_increase_level::$5 ]
reg byte a [ play_lock_current::$4 ]
zp[2]:57 [ play_lock_current::playfield_line#0 render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ]
zp[1]:59 [ play_lock_current::i#1 play_remove_lines::c#0 play_collision::i#1 render_next::next_piece_char#0 ]
reg byte y [ keyboard_event_pressed::$0 ]
reg byte y [ keyboard_event_pressed::row_bits#0 ]
reg byte x [ keyboard_event_pressed::$1 ]
reg byte a [ keyboard_event_pressed::return#11 ]
reg byte x [ keyboard_matrix_read::rowid#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
zp[1]:60 [ keyboard_event_scan::row_scan#0 play_lock_current::l#6 play_lock_current::l#1 play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ]
reg byte a [ keyboard_event_pressed::return#0 ]
reg byte a [ keyboard_event_scan::$0 ]
reg byte a [ keyboard_event_pressed::return#1 ]
reg byte a [ keyboard_event_scan::$3 ]
reg byte a [ keyboard_event_pressed::return#2 ]
reg byte a [ keyboard_event_scan::$6 ]
reg byte a [ keyboard_event_pressed::return#10 ]
reg byte a [ keyboard_event_scan::$9 ]
reg byte a [ keyboard_event_scan::$15 ]
reg byte a [ keyboard_event_scan::$16 ]
reg byte a [ keyboard_event_scan::event_type#0 ]
reg byte a [ keyboard_event_scan::$23 ]
reg byte a [ keyboard_matrix_read::return#0 ]
reg byte x [ play_init::$2 ]
reg byte a [ play_init::$3 ]
reg byte x [ sprites_init::s2#0 ]
reg byte x [ render_init::$5 ]
reg byte a [ sprites_irq::ypos#0 ]
reg byte x [ sprites_irq::$0 ]
zp[1]:61 [ sprites_irq::raster_sprite_gfx_modify ]
reg byte x [ sprites_irq::ptr#0 ]
reg byte a [ sprites_irq::ptr#3 ]
reg byte a [ sprites_irq::ptr#4 ]
reg byte x [ sprites_irq::ptr#1 ]
reg byte a [ sprites_irq::ptr#2 ]


FINAL ASSEMBLER
Score: 3348915

  // File Comments
// Tetris Game for the Commodore 64
// The tetris game tries to match NES tetris gameplay pretty closely
// Source: https://meatfighter.com/nintendotetrisai/
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // SID Channel Control Register Noise Waveform
  .const SID_CONTROL_NOISE = $80
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = 5
  // The offset of the sprite pointers from the screen start address
  .const SPRITE_PTRS = $3f8
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label SPRITES_COLS = $d027
  .label VIC_CONTROL = $d011
  .label D011 = $d011
  .const VIC_ECM = $40
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D018 = $d018
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Color Ram
  .label COLS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // CIA#1 Interrupt for reading in ASM
  .label CIA1_INTERRUPT = $dc0d
  // The SID MOD 6581/8580
  .label SID = $d400
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  // The colors of the C64
  .const BLACK = 0
  .const RED = 2
  .const CYAN = 3
  .const PURPLE = 4
  .const GREEN = 5
  .const BLUE = 6
  .const ORANGE = 8
  .const PINK = $a
  .const DARK_GREY = $b
  .const GREY = $c
  .const LIGHT_GREEN = $d
  .const LIGHT_BLUE = $e
  .const KEY_Z = $c
  .const KEY_LSHIFT = $f
  .const KEY_X = $17
  .const KEY_DOT = $2c
  .const KEY_COMMA = $2f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  // Address of the first screen
  .label PLAYFIELD_SCREEN_1 = $400
  // Address of the second screen
  .label PLAYFIELD_SCREEN_2 = $2c00
  // Screen Sprite pointers on screen 1
  .label PLAYFIELD_SPRITE_PTRS_1 = PLAYFIELD_SCREEN_1+SPRITE_PTRS
  // Screen Sprite pointers on screen 2
  .label PLAYFIELD_SPRITE_PTRS_2 = PLAYFIELD_SCREEN_2+SPRITE_PTRS
  // Address of the sprites covering the playfield
  .label PLAYFIELD_SPRITES = $3000
  // Address of the charset
  .label PLAYFIELD_CHARSET = $2800
  // The size of the playfield
  .const PLAYFIELD_LINES = $16
  .const PLAYFIELD_COLS = $a
  // The Y-position of the first sprite row
  .const SPRITES_FIRST_YPOS = $31
  // The line of the first IRQ
  .const IRQ_RASTER_FIRST = SPRITES_FIRST_YPOS+$13
  // The rate of moving down the current piece fast (number of frames between moves if movedown is not forced)
  .const current_movedown_fast = $a
  // No collision
  .const COLLISION_NONE = 0
  // Playfield piece collision (cell on top of other cell on the playfield)
  .const COLLISION_PLAYFIELD = 1
  // Bottom collision (cell below bottom of the playfield)
  .const COLLISION_BOTTOM = 2
  // Left side collision (cell beyond the left side of the playfield)
  .const COLLISION_LEFT = 4
  // Right side collision (cell beyond the right side of the playfield)
  .const COLLISION_RIGHT = 8
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .const OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = $e
  .const OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = $12
  .const OFFSET_STRUCT_MOS6581_SID_CH3_OSC = $1b
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .const toSpritePtr1_return = PLAYFIELD_SPRITES/$40
  .label render_screen_showing = $26
  .label score_bcd = $27
  .label irq_raster_next = $2b
  .label irq_sprite_ypos = $2c
  .label irq_sprite_ptr = $2d
  .label irq_cnt = $2e
  // Keyboard event buffer size. The number of events currently in the event buffer
  .label keyboard_events_size = $20
  // The rate of moving down the current piece (number of frames between moves if movedown is  not forced)
  .label current_movedown_slow = $11
  .label current_ypos = $d
  // Position of top left corner of current moving piece on the playfield
  .label current_xpos = $19
  // The curent piece orientation - each piece have 4 orientations (00/0x10/0x20/0x30).
  // The orientation chooses one of the 4 sub-graphics of the piece.
  .label current_orientation = $16
  // Pointer to the current piece in the current orientation. Updated each time current_orientation is updated.
  .label current_piece_gfx = $17
  // The char of the current piece
  .label current_piece_char = $15
  // Current level BCD-format
  .label level_bcd = $12
  // The current moving piece. Points to the start of the piece definition.
  .label current_piece = $13
  // Is the game over?
  .label game_over = $1b
  // The index of the next moving piece. (0-6)
  .label next_piece_idx = $1a
  // Current level in normal (non-BCD) format
  .label level = $10
  // The screen currently being rendered to. 0x00 for screen 1 / 0x20 for screen 2.
  .label render_screen_render = 3
  // The screen currently to show next to the user. 0x00 for screen 1 / 0x20 for screen 2.
  // Show showing screen 1 and rendering to screen 2
  .label render_screen_show = 2
  // Counts up to the next movedown of current piece
  .label current_movedown_counter = 4
  // Current number of cleared lines in BCD-format
  .label lines_bcd = $e
  // The current moving piece. Points to the start of the piece definition.
  .label current_piece_1 = $a
  // The screen currently being rendered to. 0x00 for screen 1 / 0x20 for screen 2.
  .label render_screen_render_1 = 5
  // Position of top left corner of current moving piece on the playfield
  .label current_xpos_1 = 6
  // Pointer to the current piece in the current orientation. Updated each time current_orientation is updated.
  .label current_piece_gfx_1 = 7
  // The char of the current piece
  .label current_piece_char_1 = 9
  // @begin
__bbegin:
  // @1
  // render_screen_showing = 0
  // [1] (volatile byte) render_screen_showing ← (byte) 0 -- vbuz1=vbuc1 
  // The screen currently being showed to the user. 0x00 for screen 1 / 0x20 for screen 2.
  lda #0
  sta.z render_screen_showing
  // score_bcd = 0
  // [2] (volatile dword) score_bcd ← (dword) 0 -- vduz1=vduc1 
  // Current score in BCD-format
  sta.z score_bcd
  sta.z score_bcd+1
  lda #<0>>$10
  sta.z score_bcd+2
  lda #>0>>$10
  sta.z score_bcd+3
  // kickasm
  // kickasm(location (const nomodify byte*) PLAYFIELD_CHARSET) {{ .fill 8,$00 // Place a filled char at the start of the charset     .import binary "playfield-screen.imap"  }}
  // @2
  // kickasm(location (const nomodify byte*) PLAYFIELD_SPRITES) {{ .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000)) 	// Put the sprites into memory  	.for(var sy=0;sy<10;sy++) { 	    .var sprite_gfx_y = sy*20 		.for(var sx=0;sx<3;sx++) { 	    	.for (var y=0;y<21; y++) { 	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21) 		    	.for (var c=0; c<3; c++) { 	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y) 	            } 	        } 	    	.byte 0 	  	} 	}  }}
  // @3
  // irq_raster_next = IRQ_RASTER_FIRST
  // [5] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST -- vbuz1=vbuc1 
  // The raster line of the next IRQ
  lda #IRQ_RASTER_FIRST
  sta.z irq_raster_next
  // irq_sprite_ypos = SPRITES_FIRST_YPOS + 21
  // [6] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS+(byte) $15 -- vbuz1=vbuc1 
  // Y-pos of the sprites on the next IRQ
  lda #SPRITES_FIRST_YPOS+$15
  sta.z irq_sprite_ypos
  // [7] phi from @3 to toSpritePtr1 [phi:@3->toSpritePtr1]
  // toSpritePtr1
  // @5
  // irq_sprite_ptr = toSpritePtr(PLAYFIELD_SPRITES) + 3
  // [8] (volatile byte) irq_sprite_ptr ← (const byte) toSpritePtr1_return#0+(byte) 3 -- vbuz1=vbuc1 
  // Index of the sprites to show on the next IRQ
  lda #toSpritePtr1_return+3
  sta.z irq_sprite_ptr
  // irq_cnt = 0
  // [9] (volatile byte) irq_cnt ← (byte) 0 -- vbuz1=vbuc1 
  // Counting the 10 IRQs
  lda #0
  sta.z irq_cnt
  // [10] phi from @5 to @4 [phi:@5->@4]
  // @4
  // [11] call main 
  // [13] phi from @4 to main [phi:@4->main]
  jsr main
  rts
  // [12] phi from @4 to @end [phi:@4->@end]
  // @end
  // main
main: {
    // main::sid_rnd_init1
    // SID->CH3_FREQ = 0xffff
    // [14] *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (word) $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ
    lda #>$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ+1
    // SID->CH3_CONTROL = SID_CONTROL_NOISE
    // [15] *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL
    // main::@8
    // asm
    // asm { sei  }
    sei
    // render_init()
    // [17] call render_init 
    // [497] phi from main::@8 to render_init [phi:main::@8->render_init]
    jsr render_init
    // [18] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
    // main::@9
    // sprites_init()
    // [19] call sprites_init 
    jsr sprites_init
    // [20] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
    // main::@10
    // sprites_irq_init()
    // [21] call sprites_irq_init 
    jsr sprites_irq_init
    // [22] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
    // main::@11
    // play_init()
    // [23] call play_init 
    // [456] phi from main::@11 to play_init [phi:main::@11->play_init]
    jsr play_init
    // [24] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
    // main::@12
    // play_spawn_current()
    // [25] call play_spawn_current 
  // Spawn twice to spawn both current & next
    // [286] phi from main::@12 to play_spawn_current [phi:main::@12->play_spawn_current]
    // [286] phi (byte) game_over#65 = (byte) 0 [phi:main::@12->play_spawn_current#0] -- vbuz1=vbuc1 
    lda #0
    sta.z game_over
    // [286] phi (byte) next_piece_idx#17 = (byte) 0 [phi:main::@12->play_spawn_current#1] -- vbuz1=vbuc1 
    sta.z next_piece_idx
    jsr play_spawn_current
    // [26] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
    // main::@13
    // play_spawn_current()
    // [27] call play_spawn_current 
    // [286] phi from main::@13 to play_spawn_current [phi:main::@13->play_spawn_current]
    // [286] phi (byte) game_over#65 = (byte) game_over#52 [phi:main::@13->play_spawn_current#0] -- register_copy 
    // [286] phi (byte) next_piece_idx#17 = (byte) play_spawn_current::piece_idx#2 [phi:main::@13->play_spawn_current#1] -- register_copy 
    jsr play_spawn_current
    // [28] phi from main::@13 to main::@14 [phi:main::@13->main::@14]
    // main::@14
    // render_playfield()
    // [29] call render_playfield 
    // [151] phi from main::@14 to render_playfield [phi:main::@14->render_playfield]
    // [151] phi (byte) render_screen_render#22 = (byte) $20 [phi:main::@14->render_playfield#0] -- vbuxx=vbuc1 
    ldx #$20
    jsr render_playfield
    // main::@15
    // [30] (byte) current_ypos#98 ← (byte) current_ypos#6 -- vbuxx=vbuz1 
    ldx.z current_ypos
    // [31] (byte) current_xpos#119 ← (byte) current_xpos#100 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z current_xpos_1
    // [32] (byte*) current_piece_gfx#112 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current.__7
    lda PIECES,y
    sta.z current_piece_gfx_1
    lda PIECES+1,y
    sta.z current_piece_gfx_1+1
    // [33] (byte) current_piece_char#100 ← (byte) current_piece_char#5 -- vbuz1=vbuz2 
    lda.z current_piece_char
    sta.z current_piece_char_1
    // render_moving()
    // [34] call render_moving 
    // [129] phi from main::@15 to render_moving [phi:main::@15->render_moving]
    // [129] phi (byte) current_piece_char#68 = (byte) current_piece_char#100 [phi:main::@15->render_moving#0] -- register_copy 
    // [129] phi (byte*) current_piece_gfx#64 = (byte*) current_piece_gfx#112 [phi:main::@15->render_moving#1] -- register_copy 
    // [129] phi (byte) current_xpos#59 = (byte) current_xpos#119 [phi:main::@15->render_moving#2] -- register_copy 
    // [129] phi (byte) render_screen_render#33 = (byte) $20 [phi:main::@15->render_moving#3] -- vbuz1=vbuc1 
    lda #$20
    sta.z render_screen_render_1
    // [129] phi (byte) current_ypos#13 = (byte) current_ypos#98 [phi:main::@15->render_moving#4] -- register_copy 
    jsr render_moving
    // main::@16
    // [35] (byte) next_piece_idx#77 ← (byte) play_spawn_current::piece_idx#2 -- vbuyy=vbuz1 
    ldy.z play_spawn_current.piece_idx
    // render_next()
    // [36] call render_next 
    // [108] phi from main::@16 to render_next [phi:main::@16->render_next]
    // [108] phi (byte) next_piece_idx#12 = (byte) next_piece_idx#77 [phi:main::@16->render_next#0] -- register_copy 
    // [108] phi (byte) render_screen_render#15 = (byte) $20 [phi:main::@16->render_next#1] -- vbuxx=vbuc1 
    ldx #$20
    jsr render_next
    // main::@17
    // [37] (byte*) current_piece#101 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current.__7
    lda PIECES,y
    sta.z current_piece
    lda PIECES+1,y
    sta.z current_piece+1
    // [38] (byte*) current_piece_gfx#123 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    lda PIECES,y
    sta.z current_piece_gfx
    lda PIECES+1,y
    sta.z current_piece_gfx+1
    // [39] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
    // [39] phi (byte) level_bcd#11 = (byte) 0 [phi:main::@17->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z level_bcd
    // [39] phi (byte) level#10 = (byte) 0 [phi:main::@17->main::@1#1] -- vbuz1=vbuc1 
    sta.z level
    // [39] phi (word) lines_bcd#19 = (word) 0 [phi:main::@17->main::@1#2] -- vwuz1=vwuc1 
    sta.z lines_bcd
    sta.z lines_bcd+1
    // [39] phi (byte) current_movedown_counter#16 = (byte) 0 [phi:main::@17->main::@1#3] -- vbuz1=vbuc1 
    sta.z current_movedown_counter
    // [39] phi (byte) keyboard_events_size#19 = (byte) 0 [phi:main::@17->main::@1#4] -- vbuz1=vbuc1 
    sta.z keyboard_events_size
    // [39] phi (byte) next_piece_idx#10 = (byte) play_spawn_current::piece_idx#2 [phi:main::@17->main::@1#5] -- register_copy 
    // [39] phi (byte) game_over#10 = (byte) game_over#52 [phi:main::@17->main::@1#6] -- register_copy 
    // [39] phi (byte) current_ypos#11 = (byte) current_ypos#6 [phi:main::@17->main::@1#7] -- register_copy 
    // [39] phi (byte) current_xpos#14 = (byte) current_xpos#100 [phi:main::@17->main::@1#8] -- register_copy 
    // [39] phi (byte*) current_piece_gfx#13 = (byte*) current_piece_gfx#123 [phi:main::@17->main::@1#9] -- register_copy 
    // [39] phi (byte) current_orientation#13 = (byte) 0 [phi:main::@17->main::@1#10] -- vbuz1=vbuc1 
    sta.z current_orientation
    // [39] phi (byte) current_piece_char#10 = (byte) current_piece_char#5 [phi:main::@17->main::@1#11] -- register_copy 
    // [39] phi (byte*) current_piece#10 = (byte*) current_piece#101 [phi:main::@17->main::@1#12] -- register_copy 
    // [39] phi (byte) current_movedown_slow#14 = (byte) current_movedown_slow#1 [phi:main::@17->main::@1#13] -- register_copy 
    // [39] phi (byte) render_screen_render#18 = (byte) $20 [phi:main::@17->main::@1#14] -- vbuz1=vbuc1 
    lda #$20
    sta.z render_screen_render
    // [39] phi (byte) render_screen_show#16 = (byte) 0 [phi:main::@17->main::@1#15] -- vbuz1=vbuc1 
    lda #0
    sta.z render_screen_show
    // [39] phi from main::@25 main::@6 to main::@1 [phi:main::@25/main::@6->main::@1]
    // [39] phi (byte) level_bcd#11 = (byte) level_bcd#17 [phi:main::@25/main::@6->main::@1#0] -- register_copy 
    // [39] phi (byte) level#10 = (byte) level#17 [phi:main::@25/main::@6->main::@1#1] -- register_copy 
    // [39] phi (word) lines_bcd#19 = (word) lines_bcd#15 [phi:main::@25/main::@6->main::@1#2] -- register_copy 
    // [39] phi (byte) current_movedown_counter#16 = (byte) current_movedown_counter#14 [phi:main::@25/main::@6->main::@1#3] -- register_copy 
    // [39] phi (byte) keyboard_events_size#19 = (byte) keyboard_events_size#16 [phi:main::@25/main::@6->main::@1#4] -- register_copy 
    // [39] phi (byte) next_piece_idx#10 = (byte) next_piece_idx#16 [phi:main::@25/main::@6->main::@1#5] -- register_copy 
    // [39] phi (byte) game_over#10 = (byte) game_over#15 [phi:main::@25/main::@6->main::@1#6] -- register_copy 
    // [39] phi (byte) current_ypos#11 = (byte) current_ypos#19 [phi:main::@25/main::@6->main::@1#7] -- register_copy 
    // [39] phi (byte) current_xpos#14 = (byte) current_xpos#19 [phi:main::@25/main::@6->main::@1#8] -- register_copy 
    // [39] phi (byte*) current_piece_gfx#13 = (byte*) current_piece_gfx#18 [phi:main::@25/main::@6->main::@1#9] -- register_copy 
    // [39] phi (byte) current_orientation#13 = (byte) current_orientation#17 [phi:main::@25/main::@6->main::@1#10] -- register_copy 
    // [39] phi (byte) current_piece_char#10 = (byte) current_piece_char#16 [phi:main::@25/main::@6->main::@1#11] -- register_copy 
    // [39] phi (byte*) current_piece#10 = (byte*) current_piece#15 [phi:main::@25/main::@6->main::@1#12] -- register_copy 
    // [39] phi (byte) current_movedown_slow#14 = (byte) current_movedown_slow#21 [phi:main::@25/main::@6->main::@1#13] -- register_copy 
    // [39] phi (byte) render_screen_render#18 = (byte) render_screen_render#11 [phi:main::@25/main::@6->main::@1#14] -- register_copy 
    // [39] phi (byte) render_screen_show#16 = (byte) render_screen_show#13 [phi:main::@25/main::@6->main::@1#15] -- register_copy 
    // main::@1
  __b1:
  // Wait for a frame to pass
    // main::@2
  __b2:
    // while(*RASTER!=0xff)
    // [40] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b2
    // [41] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // render_show()
    // [42] call render_show 
    //*BORDERCOL = render_screen_show/0x10;
    // Update D018 to show the selected screen
    jsr render_show
    // [43] phi from main::@3 to main::@18 [phi:main::@3->main::@18]
    // main::@18
    // keyboard_event_scan()
    // [44] call keyboard_event_scan 
  // Scan keyboard events
    // [391] phi from main::@18 to keyboard_event_scan [phi:main::@18->keyboard_event_scan]
    jsr keyboard_event_scan
    // [45] phi from main::@18 to main::@19 [phi:main::@18->main::@19]
    // main::@19
    // keyboard_event_get()
    // [46] call keyboard_event_get 
    jsr keyboard_event_get
    // [47] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
    // main::@20
    // key_event = keyboard_event_get()
    // [48] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3 -- vbuxx=vbuaa 
    tax
    // if(game_over==0)
    // [49] if((byte) game_over#10==(byte) 0) goto main::@4 -- vbuz1_eq_0_then_la1 
    lda.z game_over
    cmp #0
    beq __b4
    // main::@5
  __b5:
    // (*BORDERCOL)++;
    // [50] *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp __b5
    // main::@4
  __b4:
    // play_movement(key_event)
    // [51] (byte) play_movement::key_event#0 ← (byte) main::key_event#0 -- vbuz1=vbuxx 
    stx.z play_movement.key_event
    // [52] call play_movement 
    jsr play_movement
    // [53] (byte) play_movement::return#3 ← (byte) play_movement::return#2 -- vbuaa=vbuz1 
    lda.z play_movement.return
    // main::@21
    // render = play_movement(key_event)
    // [54] (byte) main::render#1 ← (byte) play_movement::return#3
    // main::@6
    // if(render!=0)
    // [55] if((byte) main::render#1==(byte) 0) goto main::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1
    // main::@7
    // [56] (byte) render_screen_render#64 ← (byte) render_screen_render#18 -- vbuxx=vbuz1 
    ldx.z render_screen_render
    // render_playfield()
    // [57] call render_playfield 
    // [151] phi from main::@7 to render_playfield [phi:main::@7->render_playfield]
    // [151] phi (byte) render_screen_render#22 = (byte) render_screen_render#64 [phi:main::@7->render_playfield#0] -- register_copy 
    jsr render_playfield
    // main::@22
    // [58] (byte) current_ypos#99 ← (byte) current_ypos#19 -- vbuxx=vbuz1 
    ldx.z current_ypos
    // [59] (byte) render_screen_render#65 ← (byte) render_screen_render#18 -- vbuz1=vbuz2 
    lda.z render_screen_render
    sta.z render_screen_render_1
    // [60] (byte) current_xpos#120 ← (byte) current_xpos#19 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z current_xpos_1
    // [61] (byte*) current_piece_gfx#113 ← (byte*) current_piece_gfx#18 -- pbuz1=pbuz2 
    lda.z current_piece_gfx
    sta.z current_piece_gfx_1
    lda.z current_piece_gfx+1
    sta.z current_piece_gfx_1+1
    // [62] (byte) current_piece_char#101 ← (byte) current_piece_char#16 -- vbuz1=vbuz2 
    lda.z current_piece_char
    sta.z current_piece_char_1
    // render_moving()
    // [63] call render_moving 
    // [129] phi from main::@22 to render_moving [phi:main::@22->render_moving]
    // [129] phi (byte) current_piece_char#68 = (byte) current_piece_char#101 [phi:main::@22->render_moving#0] -- register_copy 
    // [129] phi (byte*) current_piece_gfx#64 = (byte*) current_piece_gfx#113 [phi:main::@22->render_moving#1] -- register_copy 
    // [129] phi (byte) current_xpos#59 = (byte) current_xpos#120 [phi:main::@22->render_moving#2] -- register_copy 
    // [129] phi (byte) render_screen_render#33 = (byte) render_screen_render#65 [phi:main::@22->render_moving#3] -- register_copy 
    // [129] phi (byte) current_ypos#13 = (byte) current_ypos#99 [phi:main::@22->render_moving#4] -- register_copy 
    jsr render_moving
    // main::@23
    // [64] (byte) render_screen_render#66 ← (byte) render_screen_render#18 -- vbuxx=vbuz1 
    ldx.z render_screen_render
    // [65] (byte) next_piece_idx#78 ← (byte) next_piece_idx#16 -- vbuyy=vbuz1 
    ldy.z next_piece_idx
    // render_next()
    // [66] call render_next 
    // [108] phi from main::@23 to render_next [phi:main::@23->render_next]
    // [108] phi (byte) next_piece_idx#12 = (byte) next_piece_idx#78 [phi:main::@23->render_next#0] -- register_copy 
    // [108] phi (byte) render_screen_render#15 = (byte) render_screen_render#66 [phi:main::@23->render_next#1] -- register_copy 
    jsr render_next
    // [67] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
    // main::@24
    // render_score()
    // [68] call render_score 
    jsr render_score
    // [69] phi from main::@24 to main::@25 [phi:main::@24->main::@25]
    // main::@25
    // render_screen_swap()
    // [70] call render_screen_swap 
    jsr render_screen_swap
    jmp __b1
}
  // render_screen_swap
// Swap rendering to the other screen (used for double buffering)
render_screen_swap: {
    // render_screen_render ^= 0x20
    // [71] (byte) render_screen_render#11 ← (byte) render_screen_render#18 ^ (byte) $20 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #$20
    eor.z render_screen_render
    sta.z render_screen_render
    // render_screen_show ^= 0x20
    // [72] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte) $20 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #$20
    eor.z render_screen_show
    sta.z render_screen_show
    // render_screen_swap::@return
    // }
    // [73] return 
    rts
}
  // render_score
// Show the current score
render_score: {
    .label score_bytes = score_bcd
    .const score_offset = $28*5+$1c
    .const lines_offset = $28*1+$16
    .const level_offset = $28*$13+$1f
    .label screen = 7
    // if(render_screen_render==0)
    // [74] if((byte) render_screen_render#18==(byte) 0) goto render_score::@1 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_render
    cmp #0
    beq __b1
    // [76] phi from render_score to render_score::@2 [phi:render_score->render_score::@2]
    // [76] phi (byte*) render_score::screen#3 = (const nomodify byte*) PLAYFIELD_SCREEN_2 [phi:render_score->render_score::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2
    sta.z screen
    lda #>PLAYFIELD_SCREEN_2
    sta.z screen+1
    jmp __b2
    // [75] phi from render_score to render_score::@1 [phi:render_score->render_score::@1]
    // render_score::@1
  __b1:
    // [76] phi from render_score::@1 to render_score::@2 [phi:render_score::@1->render_score::@2]
    // [76] phi (byte*) render_score::screen#3 = (const nomodify byte*) PLAYFIELD_SCREEN_1 [phi:render_score::@1->render_score::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1
    sta.z screen
    lda #>PLAYFIELD_SCREEN_1
    sta.z screen+1
    // render_score::@2
  __b2:
    // render_bcd( screen, score_offset, score_bytes[2], 0)
    // [77] (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3
    // [78] (byte) render_bcd::bcd#0 ← *((const byte*) render_score::score_bytes+(byte) 2) -- vbuxx=_deref_pbuc1 
    ldx score_bytes+2
    // [79] call render_bcd 
    // [96] phi from render_score::@2 to render_bcd [phi:render_score::@2->render_bcd]
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#0 [phi:render_score::@2->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@2->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset [phi:render_score::@2->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset
    sta.z render_bcd.offset
    lda #>score_offset
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#0 [phi:render_score::@2->render_bcd#3] -- register_copy 
    jsr render_bcd
    // render_score::@3
    // render_bcd( screen, score_offset+2, score_bytes[1], 0)
    // [80] (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#3
    // [81] (byte) render_bcd::bcd#1 ← *((const byte*) render_score::score_bytes+(byte) 1) -- vbuxx=_deref_pbuc1 
    ldx score_bytes+1
    // [82] call render_bcd 
    // [96] phi from render_score::@3 to render_bcd [phi:render_score::@3->render_bcd]
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#1 [phi:render_score::@3->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@3->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset+(byte) 2 [phi:render_score::@3->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset+2
    sta.z render_bcd.offset
    lda #>score_offset+2
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#1 [phi:render_score::@3->render_bcd#3] -- register_copy 
    jsr render_bcd
    // render_score::@4
    // render_bcd( screen, score_offset+4, score_bytes[0], 0)
    // [83] (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#3
    // [84] (byte) render_bcd::bcd#2 ← *((const byte*) render_score::score_bytes) -- vbuxx=_deref_pbuc1 
    ldx.z score_bytes
    // [85] call render_bcd 
    // [96] phi from render_score::@4 to render_bcd [phi:render_score::@4->render_bcd]
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#2 [phi:render_score::@4->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@4->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset+(byte) 4 [phi:render_score::@4->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset+4
    sta.z render_bcd.offset
    lda #>score_offset+4
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#2 [phi:render_score::@4->render_bcd#3] -- register_copy 
    jsr render_bcd
    // render_score::@5
    // render_bcd( screen, lines_offset, >lines_bcd, 1)
    // [86] (byte) render_bcd::bcd#3 ← > (word) lines_bcd#15 -- vbuxx=_hi_vwuz1 
    ldx.z lines_bcd+1
    // [87] (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#3
    // [88] call render_bcd 
    // [96] phi from render_score::@5 to render_bcd [phi:render_score::@5->render_bcd]
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#3 [phi:render_score::@5->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 1 [phi:render_score::@5->render_bcd#1] -- vbuyy=vbuc1 
    ldy #1
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::lines_offset [phi:render_score::@5->render_bcd#2] -- vwuz1=vwuc1 
    lda #<lines_offset
    sta.z render_bcd.offset
    lda #>lines_offset
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#3 [phi:render_score::@5->render_bcd#3] -- register_copy 
    jsr render_bcd
    // render_score::@6
    // render_bcd( screen, lines_offset+1, <lines_bcd, 0)
    // [89] (byte) render_bcd::bcd#4 ← < (word) lines_bcd#15 -- vbuxx=_lo_vwuz1 
    ldx.z lines_bcd
    // [90] (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#3
    // [91] call render_bcd 
    // [96] phi from render_score::@6 to render_bcd [phi:render_score::@6->render_bcd]
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#4 [phi:render_score::@6->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@6->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::lines_offset+(byte) 1 [phi:render_score::@6->render_bcd#2] -- vwuz1=vwuc1 
    lda #<lines_offset+1
    sta.z render_bcd.offset
    lda #>lines_offset+1
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#4 [phi:render_score::@6->render_bcd#3] -- register_copy 
    jsr render_bcd
    // render_score::@7
    // render_bcd( screen, level_offset, level_bcd, 0)
    // [92] (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#3
    // [93] (byte) render_bcd::bcd#5 ← (byte) level_bcd#17 -- vbuxx=vbuz1 
    ldx.z level_bcd
    // [94] call render_bcd 
    // [96] phi from render_score::@7 to render_bcd [phi:render_score::@7->render_bcd]
    // [96] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#5 [phi:render_score::@7->render_bcd#0] -- register_copy 
    // [96] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@7->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [96] phi (word) render_bcd::offset#6 = (const word) render_score::level_offset [phi:render_score::@7->render_bcd#2] -- vwuz1=vwuc1 
    lda #<level_offset
    sta.z render_bcd.offset
    lda #>level_offset
    sta.z render_bcd.offset+1
    // [96] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#5 [phi:render_score::@7->render_bcd#3] -- register_copy 
    jsr render_bcd
    // render_score::@return
    // }
    // [95] return 
    rts
}
  // render_bcd
// Render BCD digits on a screen.
// - screen: pointer to the screen to render on
// - offset: offset on the screen
// - bcd: The BCD-value to render
// - only_low: if non-zero only renders the low digit
// render_bcd(byte* zp(7) screen, word zp($a) offset, byte register(X) bcd, byte register(Y) only_low)
render_bcd: {
    .const ZERO_CHAR = $35
    .label screen = 7
    .label screen_pos = $a
    .label offset = $a
    // screen_pos = screen+offset
    // [97] (byte*) render_bcd::screen_pos#0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z screen_pos
    clc
    adc.z screen
    sta.z screen_pos
    lda.z screen_pos+1
    adc.z screen+1
    sta.z screen_pos+1
    // if(only_low==0)
    // [98] if((byte) render_bcd::only_low#6!=(byte) 0) goto render_bcd::@1 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b1
    // render_bcd::@2
    // bcd >> 4
    // [99] (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#6 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // ZERO_CHAR + (bcd >> 4)
    // [100] (byte~) render_bcd::$6 ← (const nomodify byte) render_bcd::ZERO_CHAR + (byte~) render_bcd::$5 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #ZERO_CHAR
    // *screen_pos++ = ZERO_CHAR + (bcd >> 4)
    // [101] *((byte*) render_bcd::screen_pos#0) ← (byte~) render_bcd::$6 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (screen_pos),y
    // *screen_pos++ = ZERO_CHAR + (bcd >> 4);
    // [102] (byte*) render_bcd::screen_pos#2 ← ++ (byte*) render_bcd::screen_pos#0 -- pbuz1=_inc_pbuz1 
    inc.z screen_pos
    bne !+
    inc.z screen_pos+1
  !:
    // [103] phi from render_bcd render_bcd::@2 to render_bcd::@1 [phi:render_bcd/render_bcd::@2->render_bcd::@1]
    // [103] phi (byte*) render_bcd::screen_pos#3 = (byte*) render_bcd::screen_pos#0 [phi:render_bcd/render_bcd::@2->render_bcd::@1#0] -- register_copy 
    // render_bcd::@1
  __b1:
    // bcd & 0x0f
    // [104] (byte~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // ZERO_CHAR + (bcd & 0x0f)
    // [105] (byte~) render_bcd::$4 ← (const nomodify byte) render_bcd::ZERO_CHAR + (byte~) render_bcd::$3 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #ZERO_CHAR
    // *screen_pos++ = ZERO_CHAR + (bcd & 0x0f)
    // [106] *((byte*) render_bcd::screen_pos#3) ← (byte~) render_bcd::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (screen_pos),y
    // render_bcd::@return
    // }
    // [107] return 
    rts
}
  // render_next
// Render the next tetromino in the "next" area
render_next: {
    // Find the screen area
    .const next_area_offset = $28*$c+$18+4
    .label next_piece_char = $3b
    .label next_piece_gfx = 7
    .label screen_next_area = $a
    .label l = 5
    // if(render_screen_render==0)
    // [109] if((byte) render_screen_render#15==(byte) 0) goto render_next::@1 -- vbuxx_eq_0_then_la1 
    cpx #0
    beq __b1
    // [111] phi from render_next to render_next::@2 [phi:render_next->render_next::@2]
    // [111] phi (byte*) render_next::screen_next_area#11 = (const nomodify byte*) PLAYFIELD_SCREEN_2+(const word) render_next::next_area_offset [phi:render_next->render_next::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2+next_area_offset
    sta.z screen_next_area
    lda #>PLAYFIELD_SCREEN_2+next_area_offset
    sta.z screen_next_area+1
    jmp __b2
    // [110] phi from render_next to render_next::@1 [phi:render_next->render_next::@1]
    // render_next::@1
  __b1:
    // [111] phi from render_next::@1 to render_next::@2 [phi:render_next::@1->render_next::@2]
    // [111] phi (byte*) render_next::screen_next_area#11 = (const nomodify byte*) PLAYFIELD_SCREEN_1+(const word) render_next::next_area_offset [phi:render_next::@1->render_next::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1+next_area_offset
    sta.z screen_next_area
    lda #>PLAYFIELD_SCREEN_1+next_area_offset
    sta.z screen_next_area+1
    // render_next::@2
  __b2:
    // next_piece_gfx = PIECES[next_piece_idx]
    // [112] (byte~) render_next::$6 ← (byte) next_piece_idx#12 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // next_piece_char = PIECES_NEXT_CHARS[next_piece_idx]
    // [113] (byte) render_next::next_piece_char#0 ← *((const byte*) PIECES_NEXT_CHARS + (byte) next_piece_idx#12) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda PIECES_NEXT_CHARS,y
    sta.z next_piece_char
    // [114] (byte*) render_next::next_piece_gfx#8 ← (byte*)*((const word*) PIECES + (byte~) render_next::$6) -- pbuz1=pptc1_derefidx_vbuxx 
    lda PIECES,x
    sta.z next_piece_gfx
    lda PIECES+1,x
    sta.z next_piece_gfx+1
    // [115] phi from render_next::@2 to render_next::@3 [phi:render_next::@2->render_next::@3]
    // [115] phi (byte) render_next::l#7 = (byte) 0 [phi:render_next::@2->render_next::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [115] phi (byte*) render_next::screen_next_area#10 = (byte*) render_next::screen_next_area#11 [phi:render_next::@2->render_next::@3#1] -- register_copy 
    // [115] phi (byte*) render_next::next_piece_gfx#3 = (byte*) render_next::next_piece_gfx#8 [phi:render_next::@2->render_next::@3#2] -- register_copy 
    // [115] phi from render_next::@8 to render_next::@3 [phi:render_next::@8->render_next::@3]
    // [115] phi (byte) render_next::l#7 = (byte) render_next::l#1 [phi:render_next::@8->render_next::@3#0] -- register_copy 
    // [115] phi (byte*) render_next::screen_next_area#10 = (byte*) render_next::screen_next_area#4 [phi:render_next::@8->render_next::@3#1] -- register_copy 
    // [115] phi (byte*) render_next::next_piece_gfx#3 = (byte*) render_next::next_piece_gfx#1 [phi:render_next::@8->render_next::@3#2] -- register_copy 
    // render_next::@3
  __b3:
    // [116] phi from render_next::@3 to render_next::@4 [phi:render_next::@3->render_next::@4]
    // [116] phi (byte) render_next::c#2 = (byte) 0 [phi:render_next::@3->render_next::@4#0] -- vbuxx=vbuc1 
    ldx #0
    // [116] phi (byte*) render_next::screen_next_area#5 = (byte*) render_next::screen_next_area#10 [phi:render_next::@3->render_next::@4#1] -- register_copy 
    // [116] phi (byte*) render_next::next_piece_gfx#2 = (byte*) render_next::next_piece_gfx#3 [phi:render_next::@3->render_next::@4#2] -- register_copy 
    // [116] phi from render_next::@6 to render_next::@4 [phi:render_next::@6->render_next::@4]
    // [116] phi (byte) render_next::c#2 = (byte) render_next::c#1 [phi:render_next::@6->render_next::@4#0] -- register_copy 
    // [116] phi (byte*) render_next::screen_next_area#5 = (byte*) render_next::screen_next_area#3 [phi:render_next::@6->render_next::@4#1] -- register_copy 
    // [116] phi (byte*) render_next::next_piece_gfx#2 = (byte*) render_next::next_piece_gfx#1 [phi:render_next::@6->render_next::@4#2] -- register_copy 
    // render_next::@4
  __b4:
    // cell = *next_piece_gfx++
    // [117] (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (next_piece_gfx),y
    // [118] (byte*) render_next::next_piece_gfx#1 ← ++ (byte*) render_next::next_piece_gfx#2 -- pbuz1=_inc_pbuz1 
    inc.z next_piece_gfx
    bne !+
    inc.z next_piece_gfx+1
  !:
    // if(cell!=0)
    // [119] if((byte) render_next::cell#0!=(byte) 0) goto render_next::@5 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b5
    // render_next::@7
    // *screen_next_area = 0
    // [120] *((byte*) render_next::screen_next_area#5) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (screen_next_area),y
    // render_next::@6
  __b6:
    // screen_next_area++;
    // [121] (byte*) render_next::screen_next_area#3 ← ++ (byte*) render_next::screen_next_area#5 -- pbuz1=_inc_pbuz1 
    inc.z screen_next_area
    bne !+
    inc.z screen_next_area+1
  !:
    // for(char c:0..3)
    // [122] (byte) render_next::c#1 ← ++ (byte) render_next::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [123] if((byte) render_next::c#1!=(byte) 4) goto render_next::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b4
    // render_next::@8
    // screen_next_area += 36
    // [124] (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#3 + (byte) $24 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$24
    clc
    adc.z screen_next_area
    sta.z screen_next_area
    bcc !+
    inc.z screen_next_area+1
  !:
    // for(char l:0..3)
    // [125] (byte) render_next::l#1 ← ++ (byte) render_next::l#7 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [126] if((byte) render_next::l#1!=(byte) 4) goto render_next::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne __b3
    // render_next::@return
    // }
    // [127] return 
    rts
    // render_next::@5
  __b5:
    // *screen_next_area = next_piece_char
    // [128] *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#0 -- _deref_pbuz1=vbuz2 
    lda.z next_piece_char
    ldy #0
    sta (screen_next_area),y
    jmp __b6
}
  // render_moving
// Render the current moving piece at position (current_xpos, current_ypos)
// Ignores cases where parts of the tetromino is outside the playfield (sides/bottom) since the movement collision routine prevents this.
render_moving: {
    .label ypos = $c
    .label screen_line = $30
    .label xpos = $21
    .label i = $1d
    .label l = $1c
    // ypos = current_ypos
    // [130] (byte) render_moving::ypos#0 ← (byte) current_ypos#13 -- vbuz1=vbuxx 
    stx.z ypos
    // [131] phi from render_moving to render_moving::@1 [phi:render_moving->render_moving::@1]
    // [131] phi (byte) render_moving::l#4 = (byte) 0 [phi:render_moving->render_moving::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [131] phi (byte) render_moving::i#3 = (byte) 0 [phi:render_moving->render_moving::@1#1] -- vbuz1=vbuc1 
    sta.z i
    // [131] phi (byte) render_moving::ypos#2 = (byte) render_moving::ypos#0 [phi:render_moving->render_moving::@1#2] -- register_copy 
    // [131] phi from render_moving::@3 to render_moving::@1 [phi:render_moving::@3->render_moving::@1]
    // [131] phi (byte) render_moving::l#4 = (byte) render_moving::l#1 [phi:render_moving::@3->render_moving::@1#0] -- register_copy 
    // [131] phi (byte) render_moving::i#3 = (byte) render_moving::i#8 [phi:render_moving::@3->render_moving::@1#1] -- register_copy 
    // [131] phi (byte) render_moving::ypos#2 = (byte) render_moving::ypos#1 [phi:render_moving::@3->render_moving::@1#2] -- register_copy 
    // render_moving::@1
  __b1:
    // if(ypos>1)
    // [132] if((byte) render_moving::ypos#2>=(byte) 1+(byte) 1) goto render_moving::@2 -- vbuz1_ge_vbuc1_then_la1 
    lda.z ypos
    cmp #1+1
    bcs __b2
    // render_moving::@7
    // i += 4
    // [133] (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z i
    axs #-[4]
    stx.z i
    // [134] phi from render_moving::@5 render_moving::@7 to render_moving::@3 [phi:render_moving::@5/render_moving::@7->render_moving::@3]
    // [134] phi (byte) render_moving::i#8 = (byte) render_moving::i#2 [phi:render_moving::@5/render_moving::@7->render_moving::@3#0] -- register_copy 
    // render_moving::@3
  __b3:
    // ypos++;
    // [135] (byte) render_moving::ypos#1 ← ++ (byte) render_moving::ypos#2 -- vbuz1=_inc_vbuz1 
    inc.z ypos
    // for(char l:0..3)
    // [136] (byte) render_moving::l#1 ← ++ (byte) render_moving::l#4 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [137] if((byte) render_moving::l#1!=(byte) 4) goto render_moving::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne __b1
    // render_moving::@return
    // }
    // [138] return 
    rts
    // render_moving::@2
  __b2:
    // render_screen_render+ypos
    // [139] (byte~) render_moving::$1 ← (byte) render_screen_render#33 + (byte) render_moving::ypos#2 -- vbuaa=vbuz1_plus_vbuz2 
    lda.z render_screen_render_1
    clc
    adc.z ypos
    // screen_line = screen_lines_1[render_screen_render+ypos]
    // [140] (byte~) render_moving::$6 ← (byte~) render_moving::$1 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [141] (byte*) render_moving::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_moving::$6) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda screen_lines_1,y
    sta.z screen_line
    lda screen_lines_1+1,y
    sta.z screen_line+1
    // xpos = current_xpos
    // [142] (byte) render_moving::xpos#0 ← (byte) current_xpos#59 -- vbuz1=vbuz2 
    lda.z current_xpos_1
    sta.z xpos
    // [143] phi from render_moving::@2 to render_moving::@4 [phi:render_moving::@2->render_moving::@4]
    // [143] phi (byte) render_moving::c#2 = (byte) 0 [phi:render_moving::@2->render_moving::@4#0] -- vbuxx=vbuc1 
    ldx #0
    // [143] phi (byte) render_moving::xpos#2 = (byte) render_moving::xpos#0 [phi:render_moving::@2->render_moving::@4#1] -- register_copy 
    // [143] phi (byte) render_moving::i#4 = (byte) render_moving::i#3 [phi:render_moving::@2->render_moving::@4#2] -- register_copy 
    // [143] phi from render_moving::@5 to render_moving::@4 [phi:render_moving::@5->render_moving::@4]
    // [143] phi (byte) render_moving::c#2 = (byte) render_moving::c#1 [phi:render_moving::@5->render_moving::@4#0] -- register_copy 
    // [143] phi (byte) render_moving::xpos#2 = (byte) render_moving::xpos#1 [phi:render_moving::@5->render_moving::@4#1] -- register_copy 
    // [143] phi (byte) render_moving::i#4 = (byte) render_moving::i#2 [phi:render_moving::@5->render_moving::@4#2] -- register_copy 
    // render_moving::@4
  __b4:
    // current_cell = current_piece_gfx[i++]
    // [144] (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_moving::i#4) -- vbuaa=pbuz1_derefidx_vbuz2 
    ldy.z i
    lda (current_piece_gfx_1),y
    // [145] (byte) render_moving::i#2 ← ++ (byte) render_moving::i#4 -- vbuz1=_inc_vbuz1 
    inc.z i
    // if(current_cell!=0)
    // [146] if((byte) render_moving::current_cell#0==(byte) 0) goto render_moving::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b5
    // render_moving::@6
    // screen_line[xpos] = current_piece_char
    // [147] *((byte*) render_moving::screen_line#0 + (byte) render_moving::xpos#2) ← (byte) current_piece_char#68 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z current_piece_char_1
    ldy.z xpos
    sta (screen_line),y
    // render_moving::@5
  __b5:
    // xpos++;
    // [148] (byte) render_moving::xpos#1 ← ++ (byte) render_moving::xpos#2 -- vbuz1=_inc_vbuz1 
    inc.z xpos
    // for(char c:0..3)
    // [149] (byte) render_moving::c#1 ← ++ (byte) render_moving::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [150] if((byte) render_moving::c#1!=(byte) 4) goto render_moving::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b4
    jmp __b3
}
  // render_playfield
// Render the static playfield on the screen (all pieces already locked into place)
render_playfield: {
    .label screen_line = $a
    // Do not render the top 2 lines.
    .label i = $1c
    .label c = $1d
    .label l = $c
    // [152] phi from render_playfield to render_playfield::@1 [phi:render_playfield->render_playfield::@1]
    // [152] phi (byte) render_playfield::i#3 = (const nomodify byte) PLAYFIELD_COLS*(byte) 2 [phi:render_playfield->render_playfield::@1#0] -- vbuz1=vbuc1 
    lda #PLAYFIELD_COLS*2
    sta.z i
    // [152] phi (byte) render_playfield::l#2 = (byte) 2 [phi:render_playfield->render_playfield::@1#1] -- vbuz1=vbuc1 
    lda #2
    sta.z l
    // [152] phi from render_playfield::@3 to render_playfield::@1 [phi:render_playfield::@3->render_playfield::@1]
    // [152] phi (byte) render_playfield::i#3 = (byte) render_playfield::i#1 [phi:render_playfield::@3->render_playfield::@1#0] -- register_copy 
    // [152] phi (byte) render_playfield::l#2 = (byte) render_playfield::l#1 [phi:render_playfield::@3->render_playfield::@1#1] -- register_copy 
    // render_playfield::@1
  __b1:
    // render_screen_render+l
    // [153] (byte~) render_playfield::$0 ← (byte) render_screen_render#22 + (byte) render_playfield::l#2 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z l
    // screen_line = screen_lines_1[render_screen_render+l]
    // [154] (byte~) render_playfield::$3 ← (byte~) render_playfield::$0 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [155] (byte*) render_playfield::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_playfield::$3) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda screen_lines_1,y
    sta.z screen_line
    lda screen_lines_1+1,y
    sta.z screen_line+1
    // [156] phi from render_playfield::@1 to render_playfield::@2 [phi:render_playfield::@1->render_playfield::@2]
    // [156] phi (byte) render_playfield::c#2 = (byte) 0 [phi:render_playfield::@1->render_playfield::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [156] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#0 [phi:render_playfield::@1->render_playfield::@2#1] -- register_copy 
    // [156] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#3 [phi:render_playfield::@1->render_playfield::@2#2] -- register_copy 
    // [156] phi from render_playfield::@2 to render_playfield::@2 [phi:render_playfield::@2->render_playfield::@2]
    // [156] phi (byte) render_playfield::c#2 = (byte) render_playfield::c#1 [phi:render_playfield::@2->render_playfield::@2#0] -- register_copy 
    // [156] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#1 [phi:render_playfield::@2->render_playfield::@2#1] -- register_copy 
    // [156] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#1 [phi:render_playfield::@2->render_playfield::@2#2] -- register_copy 
    // render_playfield::@2
  __b2:
    // *(screen_line++) = playfield[i++]
    // [157] *((byte*) render_playfield::screen_line#2) ← *((const byte*) playfield + (byte) render_playfield::i#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda playfield,y
    ldy #0
    sta (screen_line),y
    // *(screen_line++) = playfield[i++];
    // [158] (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2 -- pbuz1=_inc_pbuz1 
    inc.z screen_line
    bne !+
    inc.z screen_line+1
  !:
    // [159] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // for(char c:0..PLAYFIELD_COLS-1)
    // [160] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [161] if((byte) render_playfield::c#1!=(const nomodify byte) PLAYFIELD_COLS-(byte) 1+(byte) 1) goto render_playfield::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_COLS-1+1
    cmp.z c
    bne __b2
    // render_playfield::@3
    // for(char l:2..PLAYFIELD_LINES-1)
    // [162] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [163] if((byte) render_playfield::l#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto render_playfield::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_LINES-1+1
    cmp.z l
    bne __b1
    // render_playfield::@return
    // }
    // [164] return 
    rts
}
  // play_movement
// Perform any movement of the current piece
// key_event is the next keyboard_event() og 0xff if no keyboard event is pending
// Returns a byte signaling whether rendering is needed. (0 no render, >0 render needed)
// play_movement(byte zp($2f) key_event)
play_movement: {
    .label render = $21
    .label return = $21
    .label key_event = $2f
    // play_move_down(key_event)
    // [165] (byte) play_move_down::key_event#0 ← (byte) play_movement::key_event#0 -- vbuaa=vbuz1 
    lda.z key_event
    // [166] call play_move_down 
    jsr play_move_down
    // [167] (byte) play_move_down::return#0 ← (byte) play_move_down::return#3 -- vbuaa=vbuxx 
    txa
    // play_movement::@2
    // render += play_move_down(key_event)
    // [168] (byte) play_movement::render#1 ← (byte) play_move_down::return#0 -- vbuz1=vbuaa 
    sta.z render
    // if(game_over!=0)
    // [169] if((byte) game_over#15==(byte) 0) goto play_movement::@1 -- vbuz1_eq_0_then_la1 
    lda.z game_over
    cmp #0
    beq __b1
    // [170] phi from play_movement::@2 play_movement::@4 to play_movement::@return [phi:play_movement::@2/play_movement::@4->play_movement::@return]
    // [170] phi (byte) current_xpos#19 = (byte) current_xpos#22 [phi:play_movement::@2/play_movement::@4->play_movement::@return#0] -- register_copy 
    // [170] phi (byte*) current_piece_gfx#18 = (byte*) current_piece_gfx#20 [phi:play_movement::@2/play_movement::@4->play_movement::@return#1] -- register_copy 
    // [170] phi (byte) current_orientation#17 = (byte) current_orientation#20 [phi:play_movement::@2/play_movement::@4->play_movement::@return#2] -- register_copy 
    // [170] phi (byte) play_movement::return#2 = (byte) play_movement::render#1 [phi:play_movement::@2/play_movement::@4->play_movement::@return#3] -- register_copy 
    // play_movement::@return
    // }
    // [171] return 
    rts
    // play_movement::@1
  __b1:
    // play_move_leftright(key_event)
    // [172] (byte) play_move_leftright::key_event#0 ← (byte) play_movement::key_event#0 -- vbuaa=vbuz1 
    lda.z key_event
    // [173] call play_move_leftright 
    jsr play_move_leftright
    // [174] (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2
    // play_movement::@3
    // [175] (byte~) play_movement::$3 ← (byte) play_move_leftright::return#0
    // render += play_move_leftright(key_event)
    // [176] (byte) play_movement::render#2 ← (byte) play_movement::render#1 + (byte~) play_movement::$3 -- vbuz1=vbuz1_plus_vbuaa 
    clc
    adc.z render
    sta.z render
    // play_move_rotate(key_event)
    // [177] (byte) play_move_rotate::key_event#0 ← (byte) play_movement::key_event#0 -- vbuaa=vbuz1 
    lda.z key_event
    // [178] call play_move_rotate 
    jsr play_move_rotate
    // [179] (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2
    // play_movement::@4
    // [180] (byte~) play_movement::$4 ← (byte) play_move_rotate::return#0
    // render += play_move_rotate(key_event)
    // [181] (byte) play_movement::return#0 ← (byte) play_movement::render#2 + (byte~) play_movement::$4 -- vbuz1=vbuz1_plus_vbuaa 
    clc
    adc.z return
    sta.z return
    rts
}
  // play_move_rotate
// Rotate the current piece  based on key-presses
// Return non-zero if a render is needed
// play_move_rotate(byte register(A) key_event)
play_move_rotate: {
    // Handle keyboard events
    .label orientation = $c
    // if(key_event==KEY_Z)
    // [182] if((byte) play_move_rotate::key_event#0==(const nomodify byte) KEY_Z) goto play_move_rotate::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_Z
    beq __b1
    // play_move_rotate::@4
    // if(key_event==KEY_X)
    // [183] if((byte) play_move_rotate::key_event#0==(const nomodify byte) KEY_X) goto play_move_rotate::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_X
    beq __b2
    // [184] phi from play_move_rotate::@4 play_move_rotate::@6 to play_move_rotate::@return [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return]
  __b4:
    // [184] phi (byte*) current_piece_gfx#21 = (byte*) current_piece_gfx#20 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#0] -- register_copy 
    // [184] phi (byte) current_orientation#25 = (byte) current_orientation#20 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#1] -- register_copy 
    // [184] phi (byte) play_move_rotate::return#2 = (byte) 0 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#2] -- vbuaa=vbuc1 
    lda #0
    // play_move_rotate::@return
    // }
    // [185] return 
    rts
    // play_move_rotate::@2
  __b2:
    // current_orientation+0x10
    // [186] (byte~) play_move_rotate::$5 ← (byte) current_orientation#20 + (byte) $10 -- vbuxx=vbuz1_plus_vbuc1 
    lax.z current_orientation
    axs #-[$10]
    // orientation = (current_orientation+0x10)&0x3f
    // [187] (byte) play_move_rotate::orientation#2 ← (byte~) play_move_rotate::$5 & (byte) $3f -- vbuz1=vbuxx_band_vbuc1 
    lda #$3f
    sax.z orientation
    // [188] phi from play_move_rotate::@1 play_move_rotate::@2 to play_move_rotate::@3 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@3]
    // [188] phi (byte) play_move_rotate::orientation#3 = (byte) play_move_rotate::orientation#1 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@3#0] -- register_copy 
    // play_move_rotate::@3
  __b3:
    // play_collision(current_xpos, current_ypos, orientation)
    // [189] (byte) play_collision::xpos#3 ← (byte) current_xpos#26 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [190] (byte) play_collision::ypos#3 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [191] (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3 -- vbuxx=vbuz1 
    ldx.z orientation
    // [192] (byte*) current_piece#99 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_1
    lda.z current_piece+1
    sta.z current_piece_1+1
    // play_collision(current_xpos, current_ypos, orientation)
    // [193] call play_collision 
    // [201] phi from play_move_rotate::@3 to play_collision [phi:play_move_rotate::@3->play_collision]
    // [201] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#3 [phi:play_move_rotate::@3->play_collision#0] -- register_copy 
    // [201] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#3 [phi:play_move_rotate::@3->play_collision#1] -- register_copy 
    // [201] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#3 [phi:play_move_rotate::@3->play_collision#2] -- register_copy 
    // [201] phi (byte*) current_piece#17 = (byte*) current_piece#99 [phi:play_move_rotate::@3->play_collision#3] -- register_copy 
    jsr play_collision
    // play_collision(current_xpos, current_ypos, orientation)
    // [194] (byte) play_collision::return#14 ← (byte) play_collision::return#15
    // play_move_rotate::@6
    // [195] (byte~) play_move_rotate::$2 ← (byte) play_collision::return#14
    // if(play_collision(current_xpos, current_ypos, orientation) == COLLISION_NONE)
    // [196] if((byte~) play_move_rotate::$2!=(const nomodify byte) COLLISION_NONE) goto play_move_rotate::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne __b4
    // play_move_rotate::@5
    // current_orientation = orientation
    // [197] (byte) current_orientation#7 ← (byte) play_move_rotate::orientation#3 -- vbuz1=vbuz2 
    lda.z orientation
    sta.z current_orientation
    // current_piece_gfx = current_piece + current_orientation
    // [198] (byte*) current_piece_gfx#7 ← (byte*) current_piece#15 + (byte) current_orientation#7 -- pbuz1=pbuz2_plus_vbuz3 
    clc
    adc.z current_piece
    sta.z current_piece_gfx
    lda #0
    adc.z current_piece+1
    sta.z current_piece_gfx+1
    // [184] phi from play_move_rotate::@5 to play_move_rotate::@return [phi:play_move_rotate::@5->play_move_rotate::@return]
    // [184] phi (byte*) current_piece_gfx#21 = (byte*) current_piece_gfx#7 [phi:play_move_rotate::@5->play_move_rotate::@return#0] -- register_copy 
    // [184] phi (byte) current_orientation#25 = (byte) current_orientation#7 [phi:play_move_rotate::@5->play_move_rotate::@return#1] -- register_copy 
    // [184] phi (byte) play_move_rotate::return#2 = (byte) 1 [phi:play_move_rotate::@5->play_move_rotate::@return#2] -- vbuaa=vbuc1 
    lda #1
    rts
    // play_move_rotate::@1
  __b1:
    // current_orientation-0x10
    // [199] (byte~) play_move_rotate::$7 ← (byte) current_orientation#20 - (byte) $10 -- vbuaa=vbuz1_minus_vbuc1 
    lda.z current_orientation
    sec
    sbc #$10
    // orientation = (current_orientation-0x10)&0x3f
    // [200] (byte) play_move_rotate::orientation#1 ← (byte~) play_move_rotate::$7 & (byte) $3f -- vbuz1=vbuaa_band_vbuc1 
    and #$3f
    sta.z orientation
    jmp __b3
}
  // play_collision
// Test if there is a collision between the current piece moved to (x, y) and anything on the playfield or the playfield boundaries
// Returns information about the type of the collision detected
// play_collision(byte zp($1c) xpos, byte zp($1d) ypos, byte register(X) orientation)
play_collision: {
    .label xpos = $1c
    .label ypos = $1d
    .label piece_gfx = $a
    .label yp = $1d
    .label playfield_line = $32
    .label i = $3b
    .label xp = $3c
    .label l = $1e
    .label i_1 = $1f
    // piece_gfx = current_piece + orientation
    // [202] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#17 + (byte) play_collision::orientation#5 -- pbuz1=pbuz1_plus_vbuxx 
    txa
    clc
    adc.z piece_gfx
    sta.z piece_gfx
    bcc !+
    inc.z piece_gfx+1
  !:
    // [203] phi from play_collision to play_collision::@1 [phi:play_collision->play_collision::@1]
    // [203] phi (byte) play_collision::l#6 = (byte) 0 [phi:play_collision->play_collision::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [203] phi (byte) play_collision::i#3 = (byte) 0 [phi:play_collision->play_collision::@1#1] -- vbuz1=vbuc1 
    sta.z i_1
    // [203] phi (byte) play_collision::yp#2 = (byte) play_collision::yp#0 [phi:play_collision->play_collision::@1#2] -- register_copy 
    // play_collision::@1
  __b1:
    // playfield_line = playfield_lines[yp]
    // [204] (byte~) play_collision::$14 ← (byte) play_collision::yp#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z yp
    asl
    // [205] (byte*) play_collision::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_collision::$14) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda playfield_lines,y
    sta.z playfield_line
    lda playfield_lines+1,y
    sta.z playfield_line+1
    // [206] (byte) play_collision::xp#8 ← (byte) play_collision::xpos#6 -- vbuz1=vbuz2 
    lda.z xpos
    sta.z xp
    // [207] phi from play_collision::@1 to play_collision::@2 [phi:play_collision::@1->play_collision::@2]
    // [207] phi (byte) play_collision::c#2 = (byte) 0 [phi:play_collision::@1->play_collision::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [207] phi (byte) play_collision::xp#2 = (byte) play_collision::xp#8 [phi:play_collision::@1->play_collision::@2#1] -- register_copy 
    // [207] phi (byte) play_collision::i#2 = (byte) play_collision::i#3 [phi:play_collision::@1->play_collision::@2#2] -- register_copy 
    // play_collision::@2
  __b2:
    // if(piece_gfx[i++]!=0)
    // [208] (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2 -- vbuz1=_inc_vbuz2 
    ldy.z i_1
    iny
    sty.z i
    // [209] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z i_1
    lda (piece_gfx),y
    cmp #0
    beq __b3
    // play_collision::@7
    // if(yp>=PLAYFIELD_LINES)
    // [210] if((byte) play_collision::yp#2<(const nomodify byte) PLAYFIELD_LINES) goto play_collision::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z yp
    cmp #PLAYFIELD_LINES
    bcc __b4
    // [215] phi from play_collision::@7 to play_collision::@return [phi:play_collision::@7->play_collision::@return]
    // [215] phi (byte) play_collision::return#15 = (const nomodify byte) COLLISION_BOTTOM [phi:play_collision::@7->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_BOTTOM
    rts
    // play_collision::@4
  __b4:
    // xp&0x80
    // [211] (byte~) play_collision::$5 ← (byte) play_collision::xp#2 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z xp
    // if((xp&0x80)!=0)
    // [212] if((byte~) play_collision::$5==(byte) 0) goto play_collision::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b5
    // [215] phi from play_collision::@4 to play_collision::@return [phi:play_collision::@4->play_collision::@return]
    // [215] phi (byte) play_collision::return#15 = (const nomodify byte) COLLISION_LEFT [phi:play_collision::@4->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_LEFT
    rts
    // play_collision::@5
  __b5:
    // if(xp>=PLAYFIELD_COLS)
    // [213] if((byte) play_collision::xp#2<(const nomodify byte) PLAYFIELD_COLS) goto play_collision::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z xp
    cmp #PLAYFIELD_COLS
    bcc __b6
    // [215] phi from play_collision::@5 to play_collision::@return [phi:play_collision::@5->play_collision::@return]
    // [215] phi (byte) play_collision::return#15 = (const nomodify byte) COLLISION_RIGHT [phi:play_collision::@5->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_RIGHT
    rts
    // play_collision::@6
  __b6:
    // if(playfield_line[xp]!=0)
    // [214] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::xp#2)==(byte) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z xp
    lda (playfield_line),y
    cmp #0
    beq __b3
    // [215] phi from play_collision::@6 to play_collision::@return [phi:play_collision::@6->play_collision::@return]
    // [215] phi (byte) play_collision::return#15 = (const nomodify byte) COLLISION_PLAYFIELD [phi:play_collision::@6->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_PLAYFIELD
    // play_collision::@return
    // }
    // [216] return 
    rts
    // play_collision::@3
  __b3:
    // xp++;
    // [217] (byte) play_collision::xp#1 ← ++ (byte) play_collision::xp#2 -- vbuz1=_inc_vbuz1 
    inc.z xp
    // for(char c:0..3)
    // [218] (byte) play_collision::c#1 ← ++ (byte) play_collision::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [219] if((byte) play_collision::c#1!=(byte) 4) goto play_collision::@10 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b10
    // play_collision::@8
    // yp++;
    // [220] (byte) play_collision::yp#1 ← ++ (byte) play_collision::yp#2 -- vbuz1=_inc_vbuz1 
    inc.z yp
    // for(char l:0..3)
    // [221] (byte) play_collision::l#1 ← ++ (byte) play_collision::l#6 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [222] if((byte) play_collision::l#1!=(byte) 4) goto play_collision::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne __b9
    // [215] phi from play_collision::@8 to play_collision::@return [phi:play_collision::@8->play_collision::@return]
    // [215] phi (byte) play_collision::return#15 = (const nomodify byte) COLLISION_NONE [phi:play_collision::@8->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_NONE
    rts
    // play_collision::@9
  __b9:
    // [223] (byte) play_collision::i#10 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_1
    // [203] phi from play_collision::@9 to play_collision::@1 [phi:play_collision::@9->play_collision::@1]
    // [203] phi (byte) play_collision::l#6 = (byte) play_collision::l#1 [phi:play_collision::@9->play_collision::@1#0] -- register_copy 
    // [203] phi (byte) play_collision::i#3 = (byte) play_collision::i#10 [phi:play_collision::@9->play_collision::@1#1] -- register_copy 
    // [203] phi (byte) play_collision::yp#2 = (byte) play_collision::yp#1 [phi:play_collision::@9->play_collision::@1#2] -- register_copy 
    jmp __b1
    // play_collision::@10
  __b10:
    // [224] (byte) play_collision::i#12 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_1
    // [207] phi from play_collision::@10 to play_collision::@2 [phi:play_collision::@10->play_collision::@2]
    // [207] phi (byte) play_collision::c#2 = (byte) play_collision::c#1 [phi:play_collision::@10->play_collision::@2#0] -- register_copy 
    // [207] phi (byte) play_collision::xp#2 = (byte) play_collision::xp#1 [phi:play_collision::@10->play_collision::@2#1] -- register_copy 
    // [207] phi (byte) play_collision::i#2 = (byte) play_collision::i#12 [phi:play_collision::@10->play_collision::@2#2] -- register_copy 
    jmp __b2
}
  // play_move_leftright
// Move left/right or rotate the current piece
// Return non-zero if a render is needed
// play_move_leftright(byte register(A) key_event)
play_move_leftright: {
    // if(key_event==KEY_COMMA)
    // [225] if((byte) play_move_leftright::key_event#0==(const nomodify byte) KEY_COMMA) goto play_move_leftright::@1 -- vbuaa_eq_vbuc1_then_la1 
    // Handle keyboard events
    cmp #KEY_COMMA
    beq __b1
    // play_move_leftright::@2
    // if(key_event==KEY_DOT)
    // [226] if((byte) play_move_leftright::key_event#0!=(const nomodify byte) KEY_DOT) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_DOT
    bne __b3
    // play_move_leftright::@3
    // play_collision(current_xpos+1,current_ypos,current_orientation)
    // [227] (byte) play_collision::xpos#2 ← (byte) current_xpos#22 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z current_xpos
    iny
    sty.z play_collision.xpos
    // [228] (byte) play_collision::ypos#2 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [229] (byte) play_collision::orientation#2 ← (byte) current_orientation#20 -- vbuxx=vbuz1 
    ldx.z current_orientation
    // [230] (byte*) current_piece#98 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_1
    lda.z current_piece+1
    sta.z current_piece_1+1
    // play_collision(current_xpos+1,current_ypos,current_orientation)
    // [231] call play_collision 
    // [201] phi from play_move_leftright::@3 to play_collision [phi:play_move_leftright::@3->play_collision]
    // [201] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#2 [phi:play_move_leftright::@3->play_collision#0] -- register_copy 
    // [201] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#2 [phi:play_move_leftright::@3->play_collision#1] -- register_copy 
    // [201] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#2 [phi:play_move_leftright::@3->play_collision#2] -- register_copy 
    // [201] phi (byte*) current_piece#17 = (byte*) current_piece#98 [phi:play_move_leftright::@3->play_collision#3] -- register_copy 
    jsr play_collision
    // play_collision(current_xpos+1,current_ypos,current_orientation)
    // [232] (byte) play_collision::return#13 ← (byte) play_collision::return#15
    // play_move_leftright::@7
    // [233] (byte~) play_move_leftright::$4 ← (byte) play_collision::return#13
    // if(play_collision(current_xpos+1,current_ypos,current_orientation)==COLLISION_NONE)
    // [234] if((byte~) play_move_leftright::$4!=(const nomodify byte) COLLISION_NONE) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne __b3
    // play_move_leftright::@4
    // current_xpos++;
    // [235] (byte) current_xpos#6 ← ++ (byte) current_xpos#22 -- vbuz1=_inc_vbuz1 
    inc.z current_xpos
    // [236] phi from play_move_leftright::@4 play_move_leftright::@5 to play_move_leftright::@return [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return]
  __b2:
    // [236] phi (byte) current_xpos#26 = (byte) current_xpos#6 [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return#0] -- register_copy 
    // [236] phi (byte) play_move_leftright::return#2 = (byte) 1 [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return#1] -- vbuaa=vbuc1 
    lda #1
    rts
    // [236] phi from play_move_leftright::@2 play_move_leftright::@6 play_move_leftright::@7 to play_move_leftright::@return [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return]
  __b3:
    // [236] phi (byte) current_xpos#26 = (byte) current_xpos#22 [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return#0] -- register_copy 
    // [236] phi (byte) play_move_leftright::return#2 = (byte) 0 [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return#1] -- vbuaa=vbuc1 
    lda #0
    // play_move_leftright::@return
    // }
    // [237] return 
    rts
    // play_move_leftright::@1
  __b1:
    // play_collision(current_xpos-1,current_ypos,current_orientation)
    // [238] (byte) play_collision::xpos#1 ← (byte) current_xpos#22 - (byte) 1 -- vbuz1=vbuz2_minus_1 
    ldx.z current_xpos
    dex
    stx.z play_collision.xpos
    // [239] (byte) play_collision::ypos#1 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [240] (byte) play_collision::orientation#1 ← (byte) current_orientation#20 -- vbuxx=vbuz1 
    ldx.z current_orientation
    // [241] (byte*) current_piece#97 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_1
    lda.z current_piece+1
    sta.z current_piece_1+1
    // play_collision(current_xpos-1,current_ypos,current_orientation)
    // [242] call play_collision 
    // [201] phi from play_move_leftright::@1 to play_collision [phi:play_move_leftright::@1->play_collision]
    // [201] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#1 [phi:play_move_leftright::@1->play_collision#0] -- register_copy 
    // [201] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#1 [phi:play_move_leftright::@1->play_collision#1] -- register_copy 
    // [201] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#1 [phi:play_move_leftright::@1->play_collision#2] -- register_copy 
    // [201] phi (byte*) current_piece#17 = (byte*) current_piece#97 [phi:play_move_leftright::@1->play_collision#3] -- register_copy 
    jsr play_collision
    // play_collision(current_xpos-1,current_ypos,current_orientation)
    // [243] (byte) play_collision::return#1 ← (byte) play_collision::return#15
    // play_move_leftright::@6
    // [244] (byte~) play_move_leftright::$8 ← (byte) play_collision::return#1
    // if(play_collision(current_xpos-1,current_ypos,current_orientation)==COLLISION_NONE)
    // [245] if((byte~) play_move_leftright::$8!=(const nomodify byte) COLLISION_NONE) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne __b3
    // play_move_leftright::@5
    // current_xpos--;
    // [246] (byte) current_xpos#8 ← -- (byte) current_xpos#22 -- vbuz1=_dec_vbuz1 
    dec.z current_xpos
    jmp __b2
}
  // play_move_down
// Move down the current piece
// Return non-zero if a render is needed
// play_move_down(byte register(A) key_event)
play_move_down: {
    .label movedown = $c
    // ++current_movedown_counter;
    // [247] (byte) current_movedown_counter#12 ← ++ (byte) current_movedown_counter#16 -- vbuz1=_inc_vbuz1 
    inc.z current_movedown_counter
    // if(key_event==KEY_SPACE)
    // [248] if((byte) play_move_down::key_event#0!=(const nomodify byte) KEY_SPACE) goto play_move_down::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne __b4
    // [249] phi from play_move_down to play_move_down::@4 [phi:play_move_down->play_move_down::@4]
    // play_move_down::@4
    // [250] phi from play_move_down::@4 to play_move_down::@1 [phi:play_move_down::@4->play_move_down::@1]
    // [250] phi (byte) play_move_down::movedown#10 = (byte) 1 [phi:play_move_down::@4->play_move_down::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z movedown
    jmp __b1
    // [250] phi from play_move_down to play_move_down::@1 [phi:play_move_down->play_move_down::@1]
  __b4:
    // [250] phi (byte) play_move_down::movedown#10 = (byte) 0 [phi:play_move_down->play_move_down::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z movedown
    // play_move_down::@1
  __b1:
    // keyboard_event_pressed(KEY_SPACE)
    // [251] call keyboard_event_pressed 
    // [380] phi from play_move_down::@1 to keyboard_event_pressed [phi:play_move_down::@1->keyboard_event_pressed]
    // [380] phi (byte) keyboard_event_pressed::keycode#5 = (const nomodify byte) KEY_SPACE [phi:play_move_down::@1->keyboard_event_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_SPACE
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_SPACE)
    // [252] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11
    // play_move_down::@12
    // [253] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
    // if(keyboard_event_pressed(KEY_SPACE)!=0)
    // [254] if((byte~) play_move_down::$2==(byte) 0) goto play_move_down::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // play_move_down::@5
    // if(current_movedown_counter>=current_movedown_fast)
    // [255] if((byte) current_movedown_counter#12<(const nomodify byte) current_movedown_fast) goto play_move_down::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z current_movedown_counter
    cmp #current_movedown_fast
    bcc __b2
    // play_move_down::@6
    // movedown++;
    // [256] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10 -- vbuz1=_inc_vbuz1 
    inc.z movedown
    // [257] phi from play_move_down::@12 play_move_down::@5 play_move_down::@6 to play_move_down::@2 [phi:play_move_down::@12/play_move_down::@5/play_move_down::@6->play_move_down::@2]
    // [257] phi (byte) play_move_down::movedown#7 = (byte) play_move_down::movedown#10 [phi:play_move_down::@12/play_move_down::@5/play_move_down::@6->play_move_down::@2#0] -- register_copy 
    // play_move_down::@2
  __b2:
    // if(current_movedown_counter>=current_movedown_slow)
    // [258] if((byte) current_movedown_counter#12<(byte) current_movedown_slow#14) goto play_move_down::@3 -- vbuz1_lt_vbuz2_then_la1 
    lda.z current_movedown_counter
    cmp.z current_movedown_slow
    bcc __b3
    // play_move_down::@7
    // movedown++;
    // [259] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7 -- vbuz1=_inc_vbuz1 
    inc.z movedown
    // [260] phi from play_move_down::@2 play_move_down::@7 to play_move_down::@3 [phi:play_move_down::@2/play_move_down::@7->play_move_down::@3]
    // [260] phi (byte) play_move_down::movedown#6 = (byte) play_move_down::movedown#7 [phi:play_move_down::@2/play_move_down::@7->play_move_down::@3#0] -- register_copy 
    // play_move_down::@3
  __b3:
    // if(movedown!=0)
    // [261] if((byte) play_move_down::movedown#6==(byte) 0) goto play_move_down::@return -- vbuz1_eq_0_then_la1 
    lda.z movedown
    cmp #0
    beq __b5
    // play_move_down::@8
    // play_collision(current_xpos,current_ypos+1,current_orientation)
    // [262] (byte) play_collision::ypos#0 ← (byte) current_ypos#11 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z current_ypos
    iny
    sty.z play_collision.ypos
    // [263] (byte) play_collision::xpos#0 ← (byte) current_xpos#14 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [264] (byte) play_collision::orientation#0 ← (byte) current_orientation#13 -- vbuxx=vbuz1 
    ldx.z current_orientation
    // [265] (byte*) current_piece#96 ← (byte*) current_piece#10 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_1
    lda.z current_piece+1
    sta.z current_piece_1+1
    // play_collision(current_xpos,current_ypos+1,current_orientation)
    // [266] call play_collision 
    // [201] phi from play_move_down::@8 to play_collision [phi:play_move_down::@8->play_collision]
    // [201] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#0 [phi:play_move_down::@8->play_collision#0] -- register_copy 
    // [201] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#0 [phi:play_move_down::@8->play_collision#1] -- register_copy 
    // [201] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#0 [phi:play_move_down::@8->play_collision#2] -- register_copy 
    // [201] phi (byte*) current_piece#17 = (byte*) current_piece#96 [phi:play_move_down::@8->play_collision#3] -- register_copy 
    jsr play_collision
    // play_collision(current_xpos,current_ypos+1,current_orientation)
    // [267] (byte) play_collision::return#0 ← (byte) play_collision::return#15
    // play_move_down::@13
    // [268] (byte~) play_move_down::$12 ← (byte) play_collision::return#0
    // if(play_collision(current_xpos,current_ypos+1,current_orientation)==COLLISION_NONE)
    // [269] if((byte~) play_move_down::$12==(const nomodify byte) COLLISION_NONE) goto play_move_down::@10 -- vbuaa_eq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    beq __b10
    // [270] phi from play_move_down::@13 to play_move_down::@9 [phi:play_move_down::@13->play_move_down::@9]
    // play_move_down::@9
    // play_lock_current()
    // [271] call play_lock_current 
    // Lock current piece
    jsr play_lock_current
    // [272] phi from play_move_down::@9 to play_move_down::@14 [phi:play_move_down::@9->play_move_down::@14]
    // play_move_down::@14
    // play_remove_lines()
    // [273] call play_remove_lines 
    // [339] phi from play_move_down::@14 to play_remove_lines [phi:play_move_down::@14->play_remove_lines]
    jsr play_remove_lines
    // play_remove_lines()
    // [274] (byte) play_remove_lines::return#0 ← (byte) play_remove_lines::removed#7 -- vbuaa=vbuz1 
    lda.z play_remove_lines.removed
    // play_move_down::@15
    // removed = play_remove_lines()
    // [275] (byte) play_move_down::removed#0 ← (byte) play_remove_lines::return#0
    // play_update_score(removed)
    // [276] (byte) play_update_score::removed#0 ← (byte) play_move_down::removed#0 -- vbuxx=vbuaa 
    tax
    // [277] call play_update_score 
    // Tally up the score
    jsr play_update_score
    // [278] phi from play_move_down::@15 to play_move_down::@16 [phi:play_move_down::@15->play_move_down::@16]
    // play_move_down::@16
    // play_spawn_current()
    // [279] call play_spawn_current 
  // Spawn a new piece
    // [286] phi from play_move_down::@16 to play_spawn_current [phi:play_move_down::@16->play_spawn_current]
    // [286] phi (byte) game_over#65 = (byte) game_over#10 [phi:play_move_down::@16->play_spawn_current#0] -- register_copy 
    // [286] phi (byte) next_piece_idx#17 = (byte) next_piece_idx#10 [phi:play_move_down::@16->play_spawn_current#1] -- register_copy 
    jsr play_spawn_current
    // play_move_down::@17
    // [280] (byte*) current_piece#93 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current.__7
    lda PIECES,y
    sta.z current_piece
    lda PIECES+1,y
    sta.z current_piece+1
    // [281] (byte*) current_piece_gfx#117 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    lda PIECES,y
    sta.z current_piece_gfx
    lda PIECES+1,y
    sta.z current_piece_gfx+1
    // [282] phi from play_move_down::@17 to play_move_down::@11 [phi:play_move_down::@17->play_move_down::@11]
    // [282] phi (byte) next_piece_idx#30 = (byte) play_spawn_current::piece_idx#2 [phi:play_move_down::@17->play_move_down::@11#0] -- register_copy 
    // [282] phi (byte) game_over#27 = (byte) game_over#52 [phi:play_move_down::@17->play_move_down::@11#1] -- register_copy 
    // [282] phi (byte) current_xpos#43 = (byte) current_xpos#100 [phi:play_move_down::@17->play_move_down::@11#2] -- register_copy 
    // [282] phi (byte*) current_piece_gfx#35 = (byte*) current_piece_gfx#117 [phi:play_move_down::@17->play_move_down::@11#3] -- register_copy 
    // [282] phi (byte) current_orientation#37 = (byte) 0 [phi:play_move_down::@17->play_move_down::@11#4] -- vbuz1=vbuc1 
    lda #0
    sta.z current_orientation
    // [282] phi (byte) current_piece_char#29 = (byte) current_piece_char#5 [phi:play_move_down::@17->play_move_down::@11#5] -- register_copy 
    // [282] phi (byte*) current_piece#28 = (byte*) current_piece#93 [phi:play_move_down::@17->play_move_down::@11#6] -- register_copy 
    // [282] phi (byte) level_bcd#31 = (byte) level_bcd#19 [phi:play_move_down::@17->play_move_down::@11#7] -- register_copy 
    // [282] phi (byte) current_movedown_slow#37 = (byte) current_movedown_slow#23 [phi:play_move_down::@17->play_move_down::@11#8] -- register_copy 
    // [282] phi (byte) level#33 = (byte) level#19 [phi:play_move_down::@17->play_move_down::@11#9] -- register_copy 
    // [282] phi (word) lines_bcd#26 = (word) lines_bcd#17 [phi:play_move_down::@17->play_move_down::@11#10] -- register_copy 
    // [282] phi (byte) current_ypos#38 = (byte) current_ypos#6 [phi:play_move_down::@17->play_move_down::@11#11] -- register_copy 
    // play_move_down::@11
  __b11:
    // [283] phi from play_move_down::@11 to play_move_down::@return [phi:play_move_down::@11->play_move_down::@return]
    // [283] phi (byte) next_piece_idx#16 = (byte) next_piece_idx#30 [phi:play_move_down::@11->play_move_down::@return#0] -- register_copy 
    // [283] phi (byte) game_over#15 = (byte) game_over#27 [phi:play_move_down::@11->play_move_down::@return#1] -- register_copy 
    // [283] phi (byte) current_xpos#22 = (byte) current_xpos#43 [phi:play_move_down::@11->play_move_down::@return#2] -- register_copy 
    // [283] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#35 [phi:play_move_down::@11->play_move_down::@return#3] -- register_copy 
    // [283] phi (byte) current_orientation#20 = (byte) current_orientation#37 [phi:play_move_down::@11->play_move_down::@return#4] -- register_copy 
    // [283] phi (byte) current_piece_char#16 = (byte) current_piece_char#29 [phi:play_move_down::@11->play_move_down::@return#5] -- register_copy 
    // [283] phi (byte*) current_piece#15 = (byte*) current_piece#28 [phi:play_move_down::@11->play_move_down::@return#6] -- register_copy 
    // [283] phi (byte) level_bcd#17 = (byte) level_bcd#31 [phi:play_move_down::@11->play_move_down::@return#7] -- register_copy 
    // [283] phi (byte) current_movedown_slow#21 = (byte) current_movedown_slow#37 [phi:play_move_down::@11->play_move_down::@return#8] -- register_copy 
    // [283] phi (byte) level#17 = (byte) level#33 [phi:play_move_down::@11->play_move_down::@return#9] -- register_copy 
    // [283] phi (word) lines_bcd#15 = (word) lines_bcd#26 [phi:play_move_down::@11->play_move_down::@return#10] -- register_copy 
    // [283] phi (byte) current_ypos#19 = (byte) current_ypos#38 [phi:play_move_down::@11->play_move_down::@return#11] -- register_copy 
    // [283] phi (byte) current_movedown_counter#14 = (byte) 0 [phi:play_move_down::@11->play_move_down::@return#12] -- vbuz1=vbuc1 
    lda #0
    sta.z current_movedown_counter
    // [283] phi (byte) play_move_down::return#3 = (byte) 1 [phi:play_move_down::@11->play_move_down::@return#13] -- vbuxx=vbuc1 
    ldx #1
    rts
    // [283] phi from play_move_down::@3 to play_move_down::@return [phi:play_move_down::@3->play_move_down::@return]
  __b5:
    // [283] phi (byte) next_piece_idx#16 = (byte) next_piece_idx#10 [phi:play_move_down::@3->play_move_down::@return#0] -- register_copy 
    // [283] phi (byte) game_over#15 = (byte) game_over#10 [phi:play_move_down::@3->play_move_down::@return#1] -- register_copy 
    // [283] phi (byte) current_xpos#22 = (byte) current_xpos#14 [phi:play_move_down::@3->play_move_down::@return#2] -- register_copy 
    // [283] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#13 [phi:play_move_down::@3->play_move_down::@return#3] -- register_copy 
    // [283] phi (byte) current_orientation#20 = (byte) current_orientation#13 [phi:play_move_down::@3->play_move_down::@return#4] -- register_copy 
    // [283] phi (byte) current_piece_char#16 = (byte) current_piece_char#10 [phi:play_move_down::@3->play_move_down::@return#5] -- register_copy 
    // [283] phi (byte*) current_piece#15 = (byte*) current_piece#10 [phi:play_move_down::@3->play_move_down::@return#6] -- register_copy 
    // [283] phi (byte) level_bcd#17 = (byte) level_bcd#11 [phi:play_move_down::@3->play_move_down::@return#7] -- register_copy 
    // [283] phi (byte) current_movedown_slow#21 = (byte) current_movedown_slow#14 [phi:play_move_down::@3->play_move_down::@return#8] -- register_copy 
    // [283] phi (byte) level#17 = (byte) level#10 [phi:play_move_down::@3->play_move_down::@return#9] -- register_copy 
    // [283] phi (word) lines_bcd#15 = (word) lines_bcd#19 [phi:play_move_down::@3->play_move_down::@return#10] -- register_copy 
    // [283] phi (byte) current_ypos#19 = (byte) current_ypos#11 [phi:play_move_down::@3->play_move_down::@return#11] -- register_copy 
    // [283] phi (byte) current_movedown_counter#14 = (byte) current_movedown_counter#12 [phi:play_move_down::@3->play_move_down::@return#12] -- register_copy 
    // [283] phi (byte) play_move_down::return#3 = (byte) 0 [phi:play_move_down::@3->play_move_down::@return#13] -- vbuxx=vbuc1 
    ldx #0
    // play_move_down::@return
    // }
    // [284] return 
    rts
    // play_move_down::@10
  __b10:
    // current_ypos++;
    // [285] (byte) current_ypos#3 ← ++ (byte) current_ypos#11 -- vbuz1=_inc_vbuz1 
    inc.z current_ypos
    // [282] phi from play_move_down::@10 to play_move_down::@11 [phi:play_move_down::@10->play_move_down::@11]
    // [282] phi (byte) next_piece_idx#30 = (byte) next_piece_idx#10 [phi:play_move_down::@10->play_move_down::@11#0] -- register_copy 
    // [282] phi (byte) game_over#27 = (byte) game_over#10 [phi:play_move_down::@10->play_move_down::@11#1] -- register_copy 
    // [282] phi (byte) current_xpos#43 = (byte) current_xpos#14 [phi:play_move_down::@10->play_move_down::@11#2] -- register_copy 
    // [282] phi (byte*) current_piece_gfx#35 = (byte*) current_piece_gfx#13 [phi:play_move_down::@10->play_move_down::@11#3] -- register_copy 
    // [282] phi (byte) current_orientation#37 = (byte) current_orientation#13 [phi:play_move_down::@10->play_move_down::@11#4] -- register_copy 
    // [282] phi (byte) current_piece_char#29 = (byte) current_piece_char#10 [phi:play_move_down::@10->play_move_down::@11#5] -- register_copy 
    // [282] phi (byte*) current_piece#28 = (byte*) current_piece#10 [phi:play_move_down::@10->play_move_down::@11#6] -- register_copy 
    // [282] phi (byte) level_bcd#31 = (byte) level_bcd#11 [phi:play_move_down::@10->play_move_down::@11#7] -- register_copy 
    // [282] phi (byte) current_movedown_slow#37 = (byte) current_movedown_slow#14 [phi:play_move_down::@10->play_move_down::@11#8] -- register_copy 
    // [282] phi (byte) level#33 = (byte) level#10 [phi:play_move_down::@10->play_move_down::@11#9] -- register_copy 
    // [282] phi (word) lines_bcd#26 = (word) lines_bcd#19 [phi:play_move_down::@10->play_move_down::@11#10] -- register_copy 
    // [282] phi (byte) current_ypos#38 = (byte) current_ypos#3 [phi:play_move_down::@10->play_move_down::@11#11] -- register_copy 
    jmp __b11
}
  // play_spawn_current
// Spawn a new piece
// Moves the next piece into the current and spawns a new next piece
play_spawn_current: {
    .label __7 = $34
    // Spawn a new next piece
    // Pick a random piece (0-6)
    .label piece_idx = $1a
    // current_piece_idx = next_piece_idx
    // [287] (byte) play_spawn_current::current_piece_idx#0 ← (byte) next_piece_idx#17 -- vbuxx=vbuz1 
    // Move next piece into current
    ldx.z next_piece_idx
    // current_piece = PIECES[current_piece_idx]
    // [288] (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 << (byte) 1 -- vbuz1=vbuxx_rol_1 
    txa
    asl
    sta.z __7
    // current_piece_char = PIECES_CHARS[current_piece_idx]
    // [289] (byte) current_piece_char#5 ← *((const byte*) PIECES_CHARS + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_CHARS,x
    sta.z current_piece_char
    // current_xpos = PIECES_START_X[current_piece_idx]
    // [290] (byte) current_xpos#100 ← *((const byte*) PIECES_START_X + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_START_X,x
    sta.z current_xpos
    // current_ypos = PIECES_START_Y[current_piece_idx]
    // [291] (byte) current_ypos#6 ← *((const byte*) PIECES_START_Y + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_START_Y,x
    sta.z current_ypos
    // play_collision(current_xpos,current_ypos,current_orientation)
    // [292] (byte) play_collision::xpos#4 ← (byte) current_xpos#100 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [293] (byte) play_collision::ypos#4 ← (byte) current_ypos#6 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [294] (byte*) current_piece#100 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z __7
    lda PIECES,y
    sta.z current_piece_1
    lda PIECES+1,y
    sta.z current_piece_1+1
    // play_collision(current_xpos,current_ypos,current_orientation)
    // [295] call play_collision 
    // [201] phi from play_spawn_current to play_collision [phi:play_spawn_current->play_collision]
    // [201] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#4 [phi:play_spawn_current->play_collision#0] -- register_copy 
    // [201] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#4 [phi:play_spawn_current->play_collision#1] -- register_copy 
    // [201] phi (byte) play_collision::orientation#5 = (byte) 0 [phi:play_spawn_current->play_collision#2] -- vbuxx=vbuc1 
    ldx #0
    // [201] phi (byte*) current_piece#17 = (byte*) current_piece#100 [phi:play_spawn_current->play_collision#3] -- register_copy 
    jsr play_collision
    // play_collision(current_xpos,current_ypos,current_orientation)
    // [296] (byte) play_collision::return#10 ← (byte) play_collision::return#15
    // play_spawn_current::@4
    // [297] (byte~) play_spawn_current::$1 ← (byte) play_collision::return#10
    // if(play_collision(current_xpos,current_ypos,current_orientation)==COLLISION_PLAYFIELD)
    // [298] if((byte~) play_spawn_current::$1!=(const nomodify byte) COLLISION_PLAYFIELD) goto play_spawn_current::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_PLAYFIELD
    bne __b1
    // [300] phi from play_spawn_current::@4 to play_spawn_current::@1 [phi:play_spawn_current::@4->play_spawn_current::@1]
    // [300] phi (byte) game_over#52 = (byte) 1 [phi:play_spawn_current::@4->play_spawn_current::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z game_over
    // [299] phi from play_spawn_current::@4 to play_spawn_current::@5 [phi:play_spawn_current::@4->play_spawn_current::@5]
    // play_spawn_current::@5
    // [300] phi from play_spawn_current::@5 to play_spawn_current::@1 [phi:play_spawn_current::@5->play_spawn_current::@1]
    // [300] phi (byte) game_over#52 = (byte) game_over#65 [phi:play_spawn_current::@5->play_spawn_current::@1#0] -- register_copy 
    // play_spawn_current::@1
  __b1:
    // [301] phi from play_spawn_current::@1 to play_spawn_current::@2 [phi:play_spawn_current::@1->play_spawn_current::@2]
    // [301] phi (byte) play_spawn_current::piece_idx#2 = (byte) 7 [phi:play_spawn_current::@1->play_spawn_current::@2#0] -- vbuz1=vbuc1 
    lda #7
    sta.z piece_idx
    // play_spawn_current::@2
  __b2:
    // while(piece_idx==7)
    // [302] if((byte) play_spawn_current::piece_idx#2==(byte) 7) goto play_spawn_current::sid_rnd1 -- vbuz1_eq_vbuc1_then_la1 
    lda #7
    cmp.z piece_idx
    beq sid_rnd1
    // play_spawn_current::@return
    // }
    // [303] return 
    rts
    // play_spawn_current::sid_rnd1
  sid_rnd1:
    // return SID->CH3_OSC;
    // [304] (byte) play_spawn_current::sid_rnd1_return#0 ← *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC) -- vbuaa=_deref_pbuc1 
    lda SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC
    // play_spawn_current::@3
    // piece_idx = sid_rnd()&7
    // [305] (byte) play_spawn_current::piece_idx#1 ← (byte) play_spawn_current::sid_rnd1_return#0 & (byte) 7 -- vbuz1=vbuaa_band_vbuc1 
    and #7
    sta.z piece_idx
    // [301] phi from play_spawn_current::@3 to play_spawn_current::@2 [phi:play_spawn_current::@3->play_spawn_current::@2]
    // [301] phi (byte) play_spawn_current::piece_idx#2 = (byte) play_spawn_current::piece_idx#1 [phi:play_spawn_current::@3->play_spawn_current::@2#0] -- register_copy 
    jmp __b2
}
  // play_update_score
// Update the score based on the number of lines removed
// play_update_score(byte register(X) removed)
play_update_score: {
    .label lines_before = $34
    .label add_bcd = $35
    // if(removed!=0)
    // [306] if((byte) play_update_score::removed#0==(byte) 0) goto play_update_score::@return -- vbuxx_eq_0_then_la1 
    cpx #0
    beq __breturn
    // play_update_score::@1
    // <lines_bcd
    // [307] (byte~) play_update_score::$2 ← < (word) lines_bcd#19 -- vbuaa=_lo_vwuz1 
    lda.z lines_bcd
    // lines_before = <lines_bcd&0xf0
    // [308] (byte) play_update_score::lines_before#0 ← (byte~) play_update_score::$2 & (byte) $f0 -- vbuz1=vbuaa_band_vbuc1 
    and #$f0
    sta.z lines_before
    // add_bcd = score_add_bcd[removed]
    // [309] (byte~) play_update_score::$9 ← (byte) play_update_score::removed#0 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // [310] (dword) play_update_score::add_bcd#0 ← *((const dword*) score_add_bcd + (byte~) play_update_score::$9) -- vduz1=pduc1_derefidx_vbuaa 
    tay
    lda score_add_bcd,y
    sta.z add_bcd
    lda score_add_bcd+1,y
    sta.z add_bcd+1
    lda score_add_bcd+2,y
    sta.z add_bcd+2
    lda score_add_bcd+3,y
    sta.z add_bcd+3
    // asm
    // asm { sed  }
    sed
    // lines_bcd += removed
    // [312] (word) lines_bcd#29 ← (word) lines_bcd#19 + (byte) play_update_score::removed#0 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z lines_bcd
    sta.z lines_bcd
    bcc !+
    inc.z lines_bcd+1
  !:
    // score_bcd += add_bcd
    // [313] (volatile dword) score_bcd ← (volatile dword) score_bcd + (dword) play_update_score::add_bcd#0 -- vduz1=vduz1_plus_vduz2 
    lda.z score_bcd
    clc
    adc.z add_bcd
    sta.z score_bcd
    lda.z score_bcd+1
    adc.z add_bcd+1
    sta.z score_bcd+1
    lda.z score_bcd+2
    adc.z add_bcd+2
    sta.z score_bcd+2
    lda.z score_bcd+3
    adc.z add_bcd+3
    sta.z score_bcd+3
    // asm
    // asm { cld  }
    cld
    // <lines_bcd
    // [315] (byte~) play_update_score::$4 ← < (word) lines_bcd#29 -- vbuaa=_lo_vwuz1 
    lda.z lines_bcd
    // lines_after = <lines_bcd&0xf0
    // [316] (byte) play_update_score::lines_after#0 ← (byte~) play_update_score::$4 & (byte) $f0 -- vbuaa=vbuaa_band_vbuc1 
    and #$f0
    // if(lines_before!=lines_after)
    // [317] if((byte) play_update_score::lines_before#0==(byte) play_update_score::lines_after#0) goto play_update_score::@return -- vbuz1_eq_vbuaa_then_la1 
    cmp.z lines_before
    beq __breturn
    // [318] phi from play_update_score::@1 to play_update_score::@2 [phi:play_update_score::@1->play_update_score::@2]
    // play_update_score::@2
    // play_increase_level()
    // [319] call play_increase_level 
    jsr play_increase_level
    // [320] phi from play_update_score play_update_score::@1 play_update_score::@2 to play_update_score::@return [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return]
    // [320] phi (byte) level_bcd#19 = (byte) level_bcd#11 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#0] -- register_copy 
    // [320] phi (byte) current_movedown_slow#23 = (byte) current_movedown_slow#14 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#1] -- register_copy 
    // [320] phi (byte) level#19 = (byte) level#10 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#2] -- register_copy 
    // [320] phi (word) lines_bcd#17 = (word) lines_bcd#19 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#3] -- register_copy 
    // play_update_score::@return
  __breturn:
    // }
    // [321] return 
    rts
}
  // play_increase_level
// Increase the level
play_increase_level: {
    // level++;
    // [322] (byte) level#21 ← ++ (byte) level#10 -- vbuz1=_inc_vbuz1 
    inc.z level
    // if(level>29)
    // [323] if((byte) level#21>=(byte) $1d+(byte) 1) goto play_increase_level::@1 -- vbuz1_ge_vbuc1_then_la1 
    // Update speed of moving tetrominos down
    lda.z level
    cmp #$1d+1
    bcs __b3
    // play_increase_level::@3
    // current_movedown_slow = MOVEDOWN_SLOW_SPEEDS[level]
    // [324] (byte) current_movedown_slow#10 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS + (byte) level#21) -- vbuz1=pbuc1_derefidx_vbuz2 
    tay
    lda MOVEDOWN_SLOW_SPEEDS,y
    sta.z current_movedown_slow
    // [325] phi from play_increase_level::@3 to play_increase_level::@1 [phi:play_increase_level::@3->play_increase_level::@1]
    // [325] phi (byte) current_movedown_slow#65 = (byte) current_movedown_slow#10 [phi:play_increase_level::@3->play_increase_level::@1#0] -- register_copy 
    jmp __b1
    // [325] phi from play_increase_level to play_increase_level::@1 [phi:play_increase_level->play_increase_level::@1]
  __b3:
    // [325] phi (byte) current_movedown_slow#65 = (byte) 1 [phi:play_increase_level->play_increase_level::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z current_movedown_slow
    // play_increase_level::@1
  __b1:
    // level_bcd++;
    // [326] (byte) level_bcd#21 ← ++ (byte) level_bcd#11 -- vbuz1=_inc_vbuz1 
    inc.z level_bcd
    // level_bcd&0xf
    // [327] (byte~) play_increase_level::$1 ← (byte) level_bcd#21 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z level_bcd
    // if((level_bcd&0xf)==0xa)
    // [328] if((byte~) play_increase_level::$1!=(byte) $a) goto play_increase_level::@2 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$a
    bne __b2
    // play_increase_level::@4
    // level_bcd += 6
    // [329] (byte) level_bcd#8 ← (byte) level_bcd#21 + (byte) 6 -- vbuz1=vbuz1_plus_vbuc1 
    // If level low nybble hits 0xa change to 0x10
    lax.z level_bcd
    axs #-[6]
    stx.z level_bcd
    // [330] phi from play_increase_level::@1 play_increase_level::@4 to play_increase_level::@2 [phi:play_increase_level::@1/play_increase_level::@4->play_increase_level::@2]
    // [330] phi (byte) level_bcd#62 = (byte) level_bcd#21 [phi:play_increase_level::@1/play_increase_level::@4->play_increase_level::@2#0] -- register_copy 
    // play_increase_level::@2
  __b2:
    // asm
    // asm { sed  }
    // Increase the score values gained
    sed
    // [332] phi from play_increase_level::@2 to play_increase_level::@5 [phi:play_increase_level::@2->play_increase_level::@5]
    // [332] phi (byte) play_increase_level::b#2 = (byte) 0 [phi:play_increase_level::@2->play_increase_level::@5#0] -- vbuxx=vbuc1 
    ldx #0
    // [332] phi from play_increase_level::@5 to play_increase_level::@5 [phi:play_increase_level::@5->play_increase_level::@5]
    // [332] phi (byte) play_increase_level::b#2 = (byte) play_increase_level::b#1 [phi:play_increase_level::@5->play_increase_level::@5#0] -- register_copy 
    // play_increase_level::@5
  __b5:
    // score_add_bcd[b] += SCORE_BASE_BCD[b]
    // [333] (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // [334] *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) ← *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) + *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_increase_level::$5) -- pduc1_derefidx_vbuaa=pduc1_derefidx_vbuaa_plus_pduc2_derefidx_vbuaa 
    tay
    clc
    lda score_add_bcd,y
    adc SCORE_BASE_BCD,y
    sta score_add_bcd,y
    lda score_add_bcd+1,y
    adc SCORE_BASE_BCD+1,y
    sta score_add_bcd+1,y
    lda score_add_bcd+2,y
    adc SCORE_BASE_BCD+2,y
    sta score_add_bcd+2,y
    lda score_add_bcd+3,y
    adc SCORE_BASE_BCD+3,y
    sta score_add_bcd+3,y
    // for(char b: 0..4)
    // [335] (byte) play_increase_level::b#1 ← ++ (byte) play_increase_level::b#2 -- vbuxx=_inc_vbuxx 
    inx
    // [336] if((byte) play_increase_level::b#1!=(byte) 5) goto play_increase_level::@5 -- vbuxx_neq_vbuc1_then_la1 
    cpx #5
    bne __b5
    // play_increase_level::@6
    // asm
    // asm { cld  }
    cld
    // play_increase_level::@return
    // }
    // [338] return 
    rts
}
  // play_remove_lines
// Look through the playfield for lines - and remove any lines found
// Utilizes two cursors on the playfield - one reading cells and one writing cells
// Whenever a full line is detected the writing cursor is instructed to write to the same line once more.
// Returns the number of lines removed
play_remove_lines: {
    .label c = $3b
    .label x = $1e
    .label y = $1c
    .label removed = $1d
    .label full = $1f
    // [340] phi from play_remove_lines to play_remove_lines::@1 [phi:play_remove_lines->play_remove_lines::@1]
    // [340] phi (byte) play_remove_lines::removed#11 = (byte) 0 [phi:play_remove_lines->play_remove_lines::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z removed
    // [340] phi (byte) play_remove_lines::y#8 = (byte) 0 [phi:play_remove_lines->play_remove_lines::@1#1] -- vbuz1=vbuc1 
    sta.z y
    // [340] phi (byte) play_remove_lines::w#12 = (const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(byte) 1 [phi:play_remove_lines->play_remove_lines::@1#2] -- vbuxx=vbuc1 
    ldx #PLAYFIELD_LINES*PLAYFIELD_COLS-1
    // [340] phi (byte) play_remove_lines::r#3 = (const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(byte) 1 [phi:play_remove_lines->play_remove_lines::@1#3] -- vbuyy=vbuc1 
    ldy #PLAYFIELD_LINES*PLAYFIELD_COLS-1
  // Read all lines and rewrite them
    // [340] phi from play_remove_lines::@6 to play_remove_lines::@1 [phi:play_remove_lines::@6->play_remove_lines::@1]
    // [340] phi (byte) play_remove_lines::removed#11 = (byte) play_remove_lines::removed#7 [phi:play_remove_lines::@6->play_remove_lines::@1#0] -- register_copy 
    // [340] phi (byte) play_remove_lines::y#8 = (byte) play_remove_lines::y#1 [phi:play_remove_lines::@6->play_remove_lines::@1#1] -- register_copy 
    // [340] phi (byte) play_remove_lines::w#12 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@6->play_remove_lines::@1#2] -- register_copy 
    // [340] phi (byte) play_remove_lines::r#3 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@6->play_remove_lines::@1#3] -- register_copy 
    // play_remove_lines::@1
  __b1:
    // [341] phi from play_remove_lines::@1 to play_remove_lines::@2 [phi:play_remove_lines::@1->play_remove_lines::@2]
    // [341] phi (byte) play_remove_lines::full#4 = (byte) 1 [phi:play_remove_lines::@1->play_remove_lines::@2#0] -- vbuz1=vbuc1 
    lda #1
    sta.z full
    // [341] phi (byte) play_remove_lines::x#2 = (byte) 0 [phi:play_remove_lines::@1->play_remove_lines::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [341] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#12 [phi:play_remove_lines::@1->play_remove_lines::@2#2] -- register_copy 
    // [341] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#3 [phi:play_remove_lines::@1->play_remove_lines::@2#3] -- register_copy 
    // [341] phi from play_remove_lines::@3 to play_remove_lines::@2 [phi:play_remove_lines::@3->play_remove_lines::@2]
    // [341] phi (byte) play_remove_lines::full#4 = (byte) play_remove_lines::full#2 [phi:play_remove_lines::@3->play_remove_lines::@2#0] -- register_copy 
    // [341] phi (byte) play_remove_lines::x#2 = (byte) play_remove_lines::x#1 [phi:play_remove_lines::@3->play_remove_lines::@2#1] -- register_copy 
    // [341] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#1 [phi:play_remove_lines::@3->play_remove_lines::@2#2] -- register_copy 
    // [341] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@3->play_remove_lines::@2#3] -- register_copy 
    // play_remove_lines::@2
  __b2:
    // c = playfield[r--]
    // [342] (byte) play_remove_lines::c#0 ← *((const byte*) playfield + (byte) play_remove_lines::r#2) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda playfield,y
    sta.z c
    // [343] (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2 -- vbuyy=_dec_vbuyy 
    dey
    // if(c==0)
    // [344] if((byte) play_remove_lines::c#0!=(byte) 0) goto play_remove_lines::@9 -- vbuz1_neq_0_then_la1 
    cmp #0
    bne __b3
    // [346] phi from play_remove_lines::@2 to play_remove_lines::@3 [phi:play_remove_lines::@2->play_remove_lines::@3]
    // [346] phi (byte) play_remove_lines::full#2 = (byte) 0 [phi:play_remove_lines::@2->play_remove_lines::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z full
    // [345] phi from play_remove_lines::@2 to play_remove_lines::@9 [phi:play_remove_lines::@2->play_remove_lines::@9]
    // play_remove_lines::@9
    // [346] phi from play_remove_lines::@9 to play_remove_lines::@3 [phi:play_remove_lines::@9->play_remove_lines::@3]
    // [346] phi (byte) play_remove_lines::full#2 = (byte) play_remove_lines::full#4 [phi:play_remove_lines::@9->play_remove_lines::@3#0] -- register_copy 
    // play_remove_lines::@3
  __b3:
    // playfield[w--] = c
    // [347] *((const byte*) playfield + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z c
    sta playfield,x
    // playfield[w--] = c;
    // [348] (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4 -- vbuxx=_dec_vbuxx 
    dex
    // for(char x:0..PLAYFIELD_COLS-1)
    // [349] (byte) play_remove_lines::x#1 ← ++ (byte) play_remove_lines::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [350] if((byte) play_remove_lines::x#1!=(const nomodify byte) PLAYFIELD_COLS-(byte) 1+(byte) 1) goto play_remove_lines::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_COLS-1+1
    cmp.z x
    bne __b2
    // play_remove_lines::@4
    // if(full==1)
    // [351] if((byte) play_remove_lines::full#2!=(byte) 1) goto play_remove_lines::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp.z full
    bne __b6
    // play_remove_lines::@5
    // w = w + PLAYFIELD_COLS
    // [352] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const nomodify byte) PLAYFIELD_COLS -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[PLAYFIELD_COLS]
    // removed++;
    // [353] (byte) play_remove_lines::removed#1 ← ++ (byte) play_remove_lines::removed#11 -- vbuz1=_inc_vbuz1 
    inc.z removed
    // [354] phi from play_remove_lines::@4 play_remove_lines::@5 to play_remove_lines::@6 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6]
    // [354] phi (byte) play_remove_lines::removed#7 = (byte) play_remove_lines::removed#11 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6#0] -- register_copy 
    // [354] phi (byte) play_remove_lines::w#11 = (byte) play_remove_lines::w#1 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6#1] -- register_copy 
    // play_remove_lines::@6
  __b6:
    // for(char y:0..PLAYFIELD_LINES-1)
    // [355] (byte) play_remove_lines::y#1 ← ++ (byte) play_remove_lines::y#8 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [356] if((byte) play_remove_lines::y#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto play_remove_lines::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_LINES-1+1
    cmp.z y
    bne __b1
    // [357] phi from play_remove_lines::@6 play_remove_lines::@8 to play_remove_lines::@7 [phi:play_remove_lines::@6/play_remove_lines::@8->play_remove_lines::@7]
  __b4:
    // [357] phi (byte) play_remove_lines::w#6 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@6/play_remove_lines::@8->play_remove_lines::@7#0] -- register_copy 
  // Write zeros in the rest of the lines
    // play_remove_lines::@7
    // while(w!=0xff)
    // [358] if((byte) play_remove_lines::w#6!=(byte) $ff) goto play_remove_lines::@8 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$ff
    bne __b8
    // play_remove_lines::@return
    // }
    // [359] return 
    rts
    // play_remove_lines::@8
  __b8:
    // playfield[w--] = 0
    // [360] *((const byte*) playfield + (byte) play_remove_lines::w#6) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta playfield,x
    // playfield[w--] = 0;
    // [361] (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#6 -- vbuxx=_dec_vbuxx 
    dex
    jmp __b4
}
  // play_lock_current
// Lock the current piece onto the playfield
play_lock_current: {
    .label yp = $d
    .label playfield_line = $39
    .label xp = $1f
    .label i = $3b
    .label l = $3c
    .label i_1 = $1e
    // yp = current_ypos
    // [362] (byte) play_lock_current::yp#0 ← (byte) current_ypos#11
    // [363] phi from play_lock_current to play_lock_current::@1 [phi:play_lock_current->play_lock_current::@1]
    // [363] phi (byte) play_lock_current::l#6 = (byte) 0 [phi:play_lock_current->play_lock_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [363] phi (byte) play_lock_current::i#3 = (byte) 0 [phi:play_lock_current->play_lock_current::@1#1] -- vbuz1=vbuc1 
    sta.z i_1
    // [363] phi (byte) play_lock_current::yp#2 = (byte) play_lock_current::yp#0 [phi:play_lock_current->play_lock_current::@1#2] -- register_copy 
    // play_lock_current::@1
  __b1:
    // playfield_line = playfield_lines[yp]
    // [364] (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z yp
    asl
    // [365] (byte*) play_lock_current::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_lock_current::$4) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda playfield_lines,y
    sta.z playfield_line
    lda playfield_lines+1,y
    sta.z playfield_line+1
    // xp = current_xpos
    // [366] (byte) play_lock_current::xp#0 ← (byte) current_xpos#14 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z xp
    // [367] phi from play_lock_current::@1 to play_lock_current::@2 [phi:play_lock_current::@1->play_lock_current::@2]
    // [367] phi (byte) play_lock_current::c#2 = (byte) 0 [phi:play_lock_current::@1->play_lock_current::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [367] phi (byte) play_lock_current::xp#2 = (byte) play_lock_current::xp#0 [phi:play_lock_current::@1->play_lock_current::@2#1] -- register_copy 
    // [367] phi (byte) play_lock_current::i#2 = (byte) play_lock_current::i#3 [phi:play_lock_current::@1->play_lock_current::@2#2] -- register_copy 
    // play_lock_current::@2
  __b2:
    // if(current_piece_gfx[i++]!=0)
    // [368] (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2 -- vbuz1=_inc_vbuz2 
    ldy.z i_1
    iny
    sty.z i
    // [369] if(*((byte*) current_piece_gfx#13 + (byte) play_lock_current::i#2)==(byte) 0) goto play_lock_current::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z i_1
    lda (current_piece_gfx),y
    cmp #0
    beq __b3
    // play_lock_current::@4
    // playfield_line[xp] = current_piece_char
    // [370] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::xp#2) ← (byte) current_piece_char#10 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z current_piece_char
    ldy.z xp
    sta (playfield_line),y
    // play_lock_current::@3
  __b3:
    // xp++;
    // [371] (byte) play_lock_current::xp#1 ← ++ (byte) play_lock_current::xp#2 -- vbuz1=_inc_vbuz1 
    inc.z xp
    // for(char c:0..3)
    // [372] (byte) play_lock_current::c#1 ← ++ (byte) play_lock_current::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [373] if((byte) play_lock_current::c#1!=(byte) 4) goto play_lock_current::@7 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b7
    // play_lock_current::@5
    // yp++;
    // [374] (byte) play_lock_current::yp#1 ← ++ (byte) play_lock_current::yp#2 -- vbuz1=_inc_vbuz1 
    inc.z yp
    // for(char l:0..3)
    // [375] (byte) play_lock_current::l#1 ← ++ (byte) play_lock_current::l#6 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [376] if((byte) play_lock_current::l#1!=(byte) 4) goto play_lock_current::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne __b6
    // play_lock_current::@return
    // }
    // [377] return 
    rts
    // play_lock_current::@6
  __b6:
    // [378] (byte) play_lock_current::i#7 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_1
    // [363] phi from play_lock_current::@6 to play_lock_current::@1 [phi:play_lock_current::@6->play_lock_current::@1]
    // [363] phi (byte) play_lock_current::l#6 = (byte) play_lock_current::l#1 [phi:play_lock_current::@6->play_lock_current::@1#0] -- register_copy 
    // [363] phi (byte) play_lock_current::i#3 = (byte) play_lock_current::i#7 [phi:play_lock_current::@6->play_lock_current::@1#1] -- register_copy 
    // [363] phi (byte) play_lock_current::yp#2 = (byte) play_lock_current::yp#1 [phi:play_lock_current::@6->play_lock_current::@1#2] -- register_copy 
    jmp __b1
    // play_lock_current::@7
  __b7:
    // [379] (byte) play_lock_current::i#9 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_1
    // [367] phi from play_lock_current::@7 to play_lock_current::@2 [phi:play_lock_current::@7->play_lock_current::@2]
    // [367] phi (byte) play_lock_current::c#2 = (byte) play_lock_current::c#1 [phi:play_lock_current::@7->play_lock_current::@2#0] -- register_copy 
    // [367] phi (byte) play_lock_current::xp#2 = (byte) play_lock_current::xp#1 [phi:play_lock_current::@7->play_lock_current::@2#1] -- register_copy 
    // [367] phi (byte) play_lock_current::i#2 = (byte) play_lock_current::i#9 [phi:play_lock_current::@7->play_lock_current::@2#2] -- register_copy 
    jmp __b2
}
  // keyboard_event_pressed
// Determine if a specific key is currently pressed based on the last keyboard_event_scan()
// Returns 0 is not pressed and non-0 if pressed
// keyboard_event_pressed(byte register(X) keycode)
keyboard_event_pressed: {
    // keycode>>3
    // [381] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte) 3 -- vbuyy=vbuxx_ror_3 
    txa
    lsr
    lsr
    lsr
    tay
    // row_bits = keyboard_scan_values[keycode>>3]
    // [382] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte*) keyboard_scan_values + (byte~) keyboard_event_pressed::$0) -- vbuyy=pbuc1_derefidx_vbuyy 
    lda keyboard_scan_values,y
    tay
    // keycode&7
    // [383] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte) 7 -- vbuxx=vbuxx_band_vbuc1 
    lda #7
    axs #0
    // row_bits & keyboard_matrix_col_bitmask[keycode&7]
    // [384] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1) -- vbuaa=vbuyy_band_pbuc1_derefidx_vbuxx 
    tya
    and keyboard_matrix_col_bitmask,x
    // keyboard_event_pressed::@return
    // }
    // [385] return 
    rts
}
  // keyboard_event_get
// Get the next event from the keyboard event buffer.
// Returns $ff if there is no event waiting. As all events are <$7f it is enough to examine bit 7 when determining if there is any event to process.
// The buffer is filled by keyboard_event_scan()
keyboard_event_get: {
    // if(keyboard_events_size==0)
    // [386] if((byte) keyboard_events_size#13==(byte) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda.z keyboard_events_size
    cmp #0
    beq __b1
    // keyboard_event_get::@1
    // return keyboard_events[--keyboard_events_size];
    // [387] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13 -- vbuz1=_dec_vbuz1 
    dec.z keyboard_events_size
    // [388] (byte) keyboard_event_get::return#1 ← *((const byte*) keyboard_events + (byte) keyboard_events_size#4) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z keyboard_events_size
    lda keyboard_events,y
    // [389] phi from keyboard_event_get::@1 to keyboard_event_get::@return [phi:keyboard_event_get::@1->keyboard_event_get::@return]
    // [389] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@1->keyboard_event_get::@return#0] -- register_copy 
    // [389] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@1->keyboard_event_get::@return#1] -- register_copy 
    rts
    // [389] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  __b1:
    // [389] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#13 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
    // [389] phi (byte) keyboard_event_get::return#2 = (byte) $ff [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuaa=vbuc1 
    lda #$ff
    // keyboard_event_get::@return
    // }
    // [390] return 
    rts
}
  // keyboard_event_scan
// Scans the entire matrix to determine which keys have been pressed/depressed.
// Generates keyboard events into the event buffer. Events can be read using keyboard_event_get().
// Handles debounce and only generates events when the status of a key changes.
// Also stores current status of modifiers in keyboard_modifiers.
keyboard_event_scan: {
    .label row_scan = $3c
    .label keycode = $1f
    .label row = $1e
    // [392] phi from keyboard_event_scan to keyboard_event_scan::@7 [phi:keyboard_event_scan->keyboard_event_scan::@7]
    // [392] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#19 [phi:keyboard_event_scan->keyboard_event_scan::@7#0] -- register_copy 
    // [392] phi (byte) keyboard_event_scan::keycode#11 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keycode
    // [392] phi (byte) keyboard_event_scan::row#2 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#2] -- vbuz1=vbuc1 
    sta.z row
    // [392] phi from keyboard_event_scan::@8 to keyboard_event_scan::@7 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7]
    // [392] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#0] -- register_copy 
    // [392] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#1] -- register_copy 
    // [392] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#2] -- register_copy 
    // keyboard_event_scan::@7
  __b7:
    // keyboard_matrix_read(row)
    // [393] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuxx=vbuz1 
    ldx.z row
    // [394] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [395] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
    // keyboard_event_scan::@19
    // row_scan = keyboard_matrix_read(row)
    // [396] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuaa 
    sta.z row_scan
    // if(row_scan!=keyboard_scan_values[row])
    // [397] if((byte) keyboard_event_scan::row_scan#0!=*((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    ldy.z row
    cmp keyboard_scan_values,y
    bne __b5
    // keyboard_event_scan::@16
    // keycode = keycode + 8
    // [398] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z keycode
    axs #-[8]
    stx.z keycode
    // [399] phi from keyboard_event_scan::@15 keyboard_event_scan::@16 to keyboard_event_scan::@8 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8]
    // [399] phi (byte) keyboard_events_size#13 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#0] -- register_copy 
    // [399] phi (byte) keyboard_event_scan::keycode#13 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#1] -- register_copy 
    // keyboard_event_scan::@8
  __b8:
    // for(char row : 0..7)
    // [400] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [401] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z row
    bne __b7
    // [402] phi from keyboard_event_scan::@8 to keyboard_event_scan::@17 [phi:keyboard_event_scan::@8->keyboard_event_scan::@17]
    // keyboard_event_scan::@17
    // keyboard_event_pressed(KEY_LSHIFT)
    // [403] call keyboard_event_pressed 
    // [380] phi from keyboard_event_scan::@17 to keyboard_event_pressed [phi:keyboard_event_scan::@17->keyboard_event_pressed]
    // [380] phi (byte) keyboard_event_pressed::keycode#5 = (const nomodify byte) KEY_LSHIFT [phi:keyboard_event_scan::@17->keyboard_event_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_LSHIFT
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_LSHIFT)
    // [404] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11
    // keyboard_event_scan::@20
    // [405] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0
    // if(keyboard_event_pressed(KEY_LSHIFT)!= 0)
    // [406] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    // [407] phi from keyboard_event_scan::@20 to keyboard_event_scan::@18 [phi:keyboard_event_scan::@20->keyboard_event_scan::@18]
    // keyboard_event_scan::@18
    // [408] phi from keyboard_event_scan::@18 keyboard_event_scan::@20 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@18/keyboard_event_scan::@20->keyboard_event_scan::@1]
    // keyboard_event_scan::@1
    // keyboard_event_pressed(KEY_RSHIFT)
    // [409] call keyboard_event_pressed 
    // [380] phi from keyboard_event_scan::@1 to keyboard_event_pressed [phi:keyboard_event_scan::@1->keyboard_event_pressed]
    // [380] phi (byte) keyboard_event_pressed::keycode#5 = (const nomodify byte) KEY_RSHIFT [phi:keyboard_event_scan::@1->keyboard_event_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_RSHIFT
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_RSHIFT)
    // [410] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11
    // keyboard_event_scan::@21
    // [411] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1
    // if(keyboard_event_pressed(KEY_RSHIFT)!= 0)
    // [412] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    // [413] phi from keyboard_event_scan::@21 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@21->keyboard_event_scan::@4]
    // keyboard_event_scan::@4
    // [414] phi from keyboard_event_scan::@21 keyboard_event_scan::@4 to keyboard_event_scan::@2 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2]
    // keyboard_event_scan::@2
    // keyboard_event_pressed(KEY_CTRL)
    // [415] call keyboard_event_pressed 
    // [380] phi from keyboard_event_scan::@2 to keyboard_event_pressed [phi:keyboard_event_scan::@2->keyboard_event_pressed]
    // [380] phi (byte) keyboard_event_pressed::keycode#5 = (const nomodify byte) KEY_CTRL [phi:keyboard_event_scan::@2->keyboard_event_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_CTRL
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_CTRL)
    // [416] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11
    // keyboard_event_scan::@22
    // [417] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2
    // if(keyboard_event_pressed(KEY_CTRL)!= 0)
    // [418] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    // [419] phi from keyboard_event_scan::@22 to keyboard_event_scan::@5 [phi:keyboard_event_scan::@22->keyboard_event_scan::@5]
    // keyboard_event_scan::@5
    // [420] phi from keyboard_event_scan::@22 keyboard_event_scan::@5 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3]
    // keyboard_event_scan::@3
    // keyboard_event_pressed(KEY_COMMODORE)
    // [421] call keyboard_event_pressed 
    // [380] phi from keyboard_event_scan::@3 to keyboard_event_pressed [phi:keyboard_event_scan::@3->keyboard_event_pressed]
    // [380] phi (byte) keyboard_event_pressed::keycode#5 = (const nomodify byte) KEY_COMMODORE [phi:keyboard_event_scan::@3->keyboard_event_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_COMMODORE
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_COMMODORE)
    // [422] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11
    // keyboard_event_scan::@23
    // [423] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#10
    // if(keyboard_event_pressed(KEY_COMMODORE)!= 0)
    // [424] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    // [425] phi from keyboard_event_scan::@23 to keyboard_event_scan::@6 [phi:keyboard_event_scan::@23->keyboard_event_scan::@6]
    // keyboard_event_scan::@6
    // keyboard_event_scan::@return
    // }
    // [426] return 
    rts
  // Something has changed on the keyboard row - check each column
    // [427] phi from keyboard_event_scan::@10 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9]
    // [427] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#0] -- register_copy 
    // [427] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#1] -- register_copy 
    // [427] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#2] -- register_copy 
    // [427] phi from keyboard_event_scan::@19 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9]
  __b5:
    // [427] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#30 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#0] -- register_copy 
    // [427] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#1] -- register_copy 
    // [427] phi (byte) keyboard_event_scan::col#2 = (byte) 0 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#2] -- vbuxx=vbuc1 
    ldx #0
    // keyboard_event_scan::@9
  __b9:
    // row_scan^keyboard_scan_values[row]
    // [428] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) -- vbuaa=vbuz1_bxor_pbuc1_derefidx_vbuz2 
    lda.z row_scan
    ldy.z row
    eor keyboard_scan_values,y
    // (row_scan^keyboard_scan_values[row])&keyboard_matrix_col_bitmask[col]
    // [429] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
    // if(((row_scan^keyboard_scan_values[row])&keyboard_matrix_col_bitmask[col])!=0)
    // [430] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b10
    // keyboard_event_scan::@12
    // if(keyboard_events_size!=8)
    // [431] if((byte) keyboard_events_size#10==(byte) 8) goto keyboard_event_scan::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z keyboard_events_size
    beq __b10
    // keyboard_event_scan::@13
    // event_type = row_scan&keyboard_matrix_col_bitmask[col]
    // [432] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuxx 
    lda keyboard_matrix_col_bitmask,x
    and.z row_scan
    // if(event_type==0)
    // [433] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b11
    // keyboard_event_scan::@14
    // keyboard_events[keyboard_events_size++] = keycode
    // [434] *((const byte*) keyboard_events + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key pressed
    lda.z keycode
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // keyboard_events[keyboard_events_size++] = keycode;
    // [435] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    // [436] phi from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10]
    // [436] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#1 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10#0] -- register_copy 
    // keyboard_event_scan::@10
  __b10:
    // keycode++;
    // [437] (byte) keyboard_event_scan::keycode#14 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc.z keycode
    // for(char col : 0..7)
    // [438] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuxx=_inc_vbuxx 
    inx
    // [439] if((byte) keyboard_event_scan::col#1!=(byte) 8) goto keyboard_event_scan::@9 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b9
    // keyboard_event_scan::@15
    // keyboard_scan_values[row] = row_scan
    // [440] *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Store the current keyboard status for the row to debounce
    lda.z row_scan
    ldy.z row
    sta keyboard_scan_values,y
    jmp __b8
    // keyboard_event_scan::@11
  __b11:
    // keycode|$40
    // [441] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 -- vbuaa=vbuz1_bor_vbuc1 
    lda #$40
    ora.z keycode
    // keyboard_events[keyboard_events_size++] = keycode|$40
    // [442] *((const byte*) keyboard_events + (byte) keyboard_events_size#10) ← (byte~) keyboard_event_scan::$23 -- pbuc1_derefidx_vbuz1=vbuaa 
    // Key released
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // keyboard_events[keyboard_events_size++] = keycode|$40;
    // [443] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    jmp __b10
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable kill the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte register(X) rowid)
keyboard_matrix_read: {
    // CIA1->PORT_A = keyboard_matrix_row_bitmask[rowid]
    // [444] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1
    // ~CIA1->PORT_B
    // [445] (byte) keyboard_matrix_read::return#0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B
    eor #$ff
    // keyboard_matrix_read::@return
    // }
    // [446] return 
    rts
}
  // render_show
// Update 0xD018 to show the current screen (used for double buffering)
render_show: {
    .const toD0181_return = (>(PLAYFIELD_SCREEN_1&$3fff)*4)|(>PLAYFIELD_CHARSET)/4&$f
    .const toD0182_return = (>(PLAYFIELD_SCREEN_2&$3fff)*4)|(>PLAYFIELD_CHARSET)/4&$f
    // if(render_screen_show==0)
    // [447] if((byte) render_screen_show#16==(byte) 0) goto render_show::toD0181 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_show
    cmp #0
    beq toD0181
    // [448] phi from render_show to render_show::toD0182 [phi:render_show->render_show::toD0182]
    // render_show::toD0182
    // [449] phi from render_show::toD0182 to render_show::@1 [phi:render_show::toD0182->render_show::@1]
    // [449] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0182_return#0 [phi:render_show::toD0182->render_show::@1#0] -- vbuaa=vbuc1 
    lda #toD0182_return
    // render_show::@1
  __b1:
    // *D018 = d018val
    // [450] *((const nomodify byte*) D018) ← (byte) render_show::d018val#3 -- _deref_pbuc1=vbuaa 
    sta D018
    // *BGCOL2 = PIECES_COLORS_1[level]
    // [451] *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1 + (byte) level#10) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy.z level
    lda PIECES_COLORS_1,y
    sta BGCOL2
    // *BGCOL3 = PIECES_COLORS_2[level]
    // [452] *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2 + (byte) level#10) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    lda PIECES_COLORS_2,y
    sta BGCOL3
    // render_screen_showing = render_screen_show
    // [453] (volatile byte) render_screen_showing ← (byte) render_screen_show#16 -- vbuz1=vbuz2 
    lda.z render_screen_show
    sta.z render_screen_showing
    // render_show::@return
    // }
    // [454] return 
    rts
    // [455] phi from render_show to render_show::toD0181 [phi:render_show->render_show::toD0181]
    // render_show::toD0181
  toD0181:
    // [449] phi from render_show::toD0181 to render_show::@1 [phi:render_show::toD0181->render_show::@1]
    // [449] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0181_return#0 [phi:render_show::toD0181->render_show::@1#0] -- vbuaa=vbuc1 
    lda #toD0181_return
    jmp __b1
}
  // play_init
// Initialize play data tables
play_init: {
    .label pli = $22
    // Initialize the playfield line pointers;
    .label idx = $21
    // [457] phi from play_init to play_init::@1 [phi:play_init->play_init::@1]
    // [457] phi (byte) play_init::idx#2 = (byte) 0 [phi:play_init->play_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [457] phi (byte*) play_init::pli#2 = (const byte*) playfield [phi:play_init->play_init::@1#1] -- pbuz1=pbuc1 
    lda #<playfield
    sta.z pli
    lda #>playfield
    sta.z pli+1
    // [457] phi (byte) play_init::j#2 = (byte) 0 [phi:play_init->play_init::@1#2] -- vbuyy=vbuc1 
    ldy #0
    // [457] phi from play_init::@1 to play_init::@1 [phi:play_init::@1->play_init::@1]
    // [457] phi (byte) play_init::idx#2 = (byte) play_init::idx#1 [phi:play_init::@1->play_init::@1#0] -- register_copy 
    // [457] phi (byte*) play_init::pli#2 = (byte*) play_init::pli#1 [phi:play_init::@1->play_init::@1#1] -- register_copy 
    // [457] phi (byte) play_init::j#2 = (byte) play_init::j#1 [phi:play_init::@1->play_init::@1#2] -- register_copy 
    // play_init::@1
  __b1:
    // playfield_lines[j] = pli
    // [458] (byte~) play_init::$2 ← (byte) play_init::j#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [459] *((const byte**) playfield_lines + (byte~) play_init::$2) ← (byte*) play_init::pli#2 -- pptc1_derefidx_vbuxx=pbuz1 
    lda.z pli
    sta playfield_lines,x
    lda.z pli+1
    sta playfield_lines+1,x
    // playfield_lines_idx[j] = idx
    // [460] *((const byte*) playfield_lines_idx + (byte) play_init::j#2) ← (byte) play_init::idx#2 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda.z idx
    sta playfield_lines_idx,y
    // pli += PLAYFIELD_COLS
    // [461] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const nomodify byte) PLAYFIELD_COLS -- pbuz1=pbuz1_plus_vbuc1 
    lda #PLAYFIELD_COLS
    clc
    adc.z pli
    sta.z pli
    bcc !+
    inc.z pli+1
  !:
    // idx += PLAYFIELD_COLS
    // [462] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const nomodify byte) PLAYFIELD_COLS -- vbuz1=vbuz1_plus_vbuc1 
    lax.z idx
    axs #-[PLAYFIELD_COLS]
    stx.z idx
    // for(char j:0..PLAYFIELD_LINES-1)
    // [463] (byte) play_init::j#1 ← ++ (byte) play_init::j#2 -- vbuyy=_inc_vbuyy 
    iny
    // [464] if((byte) play_init::j#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto play_init::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #PLAYFIELD_LINES-1+1
    bne __b1
    // play_init::@2
    // playfield_lines_idx[PLAYFIELD_LINES] = PLAYFIELD_COLS*PLAYFIELD_LINES
    // [465] *((const byte*) playfield_lines_idx+(const nomodify byte) PLAYFIELD_LINES) ← (const nomodify byte) PLAYFIELD_COLS*(const nomodify byte) PLAYFIELD_LINES -- _deref_pbuc1=vbuc2 
    lda #PLAYFIELD_COLS*PLAYFIELD_LINES
    sta playfield_lines_idx+PLAYFIELD_LINES
    // current_movedown_slow = MOVEDOWN_SLOW_SPEEDS[level]
    // [466] (byte) current_movedown_slow#1 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS) -- vbuz1=_deref_pbuc1 
    // Set initial speed of moving down a tetromino
    lda MOVEDOWN_SLOW_SPEEDS
    sta.z current_movedown_slow
    // [467] phi from play_init::@2 to play_init::@3 [phi:play_init::@2->play_init::@3]
    // [467] phi (byte) play_init::b#2 = (byte) 0 [phi:play_init::@2->play_init::@3#0] -- vbuxx=vbuc1 
    ldx #0
  // Set the initial score add values
    // [467] phi from play_init::@3 to play_init::@3 [phi:play_init::@3->play_init::@3]
    // [467] phi (byte) play_init::b#2 = (byte) play_init::b#1 [phi:play_init::@3->play_init::@3#0] -- register_copy 
    // play_init::@3
  __b3:
    // score_add_bcd[b] = SCORE_BASE_BCD[b]
    // [468] (byte~) play_init::$3 ← (byte) play_init::b#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // [469] *((const dword*) score_add_bcd + (byte~) play_init::$3) ← *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_init::$3) -- pduc1_derefidx_vbuaa=pduc2_derefidx_vbuaa 
    tay
    lda SCORE_BASE_BCD,y
    sta score_add_bcd,y
    lda SCORE_BASE_BCD+1,y
    sta score_add_bcd+1,y
    lda SCORE_BASE_BCD+2,y
    sta score_add_bcd+2,y
    lda SCORE_BASE_BCD+3,y
    sta score_add_bcd+3,y
    // for(char b: 0..4)
    // [470] (byte) play_init::b#1 ← ++ (byte) play_init::b#2 -- vbuxx=_inc_vbuxx 
    inx
    // [471] if((byte) play_init::b#1!=(byte) 5) goto play_init::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #5
    bne __b3
    // play_init::@return
    // }
    // [472] return 
    rts
}
  // sprites_irq_init
// Setup the IRQ
sprites_irq_init: {
    // asm
    // asm { sei  }
    sei
    // *IRQ_STATUS = IRQ_RASTER
    // [474] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge any IRQ and setup the next one
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // asm
    // asm { ldaCIA1_INTERRUPT  }
    lda CIA1_INTERRUPT
    // *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
    // [476] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // *PROCPORT = PROCPORT_RAM_IO
    // [477] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // CIA1->INTERRUPT = CIA_INTERRUPT_CLEAR
    // [478] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // *VIC_CONTROL &=0x7f
    // [479] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    // *RASTER = IRQ_RASTER_FIRST
    // [480] *((const nomodify byte*) RASTER) ← (const nomodify byte) IRQ_RASTER_FIRST -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER_FIRST
    sta RASTER
    // *IRQ_ENABLE = IRQ_RASTER
    // [481] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // *HARDWARE_IRQ = &sprites_irq
    // [482] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq() -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<sprites_irq
    sta HARDWARE_IRQ
    lda #>sprites_irq
    sta HARDWARE_IRQ+1
    // asm
    // asm { cli  }
    cli
    // sprites_irq_init::@return
    // }
    // [484] return 
    rts
}
  // sprites_init
// Setup the sprites
sprites_init: {
    .label xpos = $21
    // *SPRITES_ENABLE = %00001111
    // [485] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $f -- _deref_pbuc1=vbuc2 
    lda #$f
    sta SPRITES_ENABLE
    // *SPRITES_MC = 0
    // [486] *((const nomodify byte*) SPRITES_MC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
    // *SPRITES_EXPAND_Y = *SPRITES_MC = 0
    // [487] *((const nomodify byte*) SPRITES_EXPAND_Y) ← *((const nomodify byte*) SPRITES_MC) -- _deref_pbuc1=_deref_pbuc2 
    sta SPRITES_EXPAND_Y
    // *SPRITES_EXPAND_X = *SPRITES_EXPAND_Y = *SPRITES_MC = 0
    // [488] *((const nomodify byte*) SPRITES_EXPAND_X) ← *((const nomodify byte*) SPRITES_EXPAND_Y) -- _deref_pbuc1=_deref_pbuc2 
    sta SPRITES_EXPAND_X
    // [489] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
    // [489] phi (byte) sprites_init::xpos#2 = (byte)(number) $18+(number) $f*(number) 8 [phi:sprites_init->sprites_init::@1#0] -- vbuz1=vbuc1 
    lda #$18+$f*8
    sta.z xpos
    // [489] phi (byte) sprites_init::s#2 = (byte) 0 [phi:sprites_init->sprites_init::@1#1] -- vbuyy=vbuc1 
    ldy #0
    // [489] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
    // [489] phi (byte) sprites_init::xpos#2 = (byte) sprites_init::xpos#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
    // [489] phi (byte) sprites_init::s#2 = (byte) sprites_init::s#1 [phi:sprites_init::@1->sprites_init::@1#1] -- register_copy 
    // sprites_init::@1
  __b1:
    // s2 = s*2
    // [490] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // SPRITES_XPOS[s2] = xpos
    // [491] *((const nomodify byte*) SPRITES_XPOS + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z xpos
    sta SPRITES_XPOS,x
    // SPRITES_COLS[s] = BLACK
    // [492] *((const nomodify byte*) SPRITES_COLS + (byte) sprites_init::s#2) ← (const nomodify byte) BLACK -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #BLACK
    sta SPRITES_COLS,y
    // xpos = xpos+24
    // [493] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte) $18 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z xpos
    axs #-[$18]
    stx.z xpos
    // for(char s:0..3)
    // [494] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2 -- vbuyy=_inc_vbuyy 
    iny
    // [495] if((byte) sprites_init::s#1!=(byte) 4) goto sprites_init::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #4
    bne __b1
    // sprites_init::@return
    // }
    // [496] return 
    rts
}
  // render_init
// Initialize rendering
render_init: {
    .const vicSelectGfxBank1_toDd001_return = 3
    // Initialize the screen line pointers;
    .label li_1 = $22
    .label li_2 = $30
    // render_init::vicSelectGfxBank1
    // CIA2->PORT_A_DDR = %00000011
    // [498] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [499] phi from render_init::vicSelectGfxBank1 to render_init::vicSelectGfxBank1_toDd001 [phi:render_init::vicSelectGfxBank1->render_init::vicSelectGfxBank1_toDd001]
    // render_init::vicSelectGfxBank1_toDd001
    // render_init::vicSelectGfxBank1_@1
    // CIA2->PORT_A = toDd00(gfx)
    // [500] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2
    // render_init::@2
    // *D011 = VIC_ECM | VIC_DEN | VIC_RSEL | 3
    // [501] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_ECM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    // Enable Extended Background Color Mode
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta D011
    // *BORDERCOL = BLACK
    // [502] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    // *BGCOL1 = BLACK
    // [503] *((const nomodify byte*) BGCOL1) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    sta BGCOL1
    // *BGCOL2 = PIECES_COLORS_1[0]
    // [504] *((const nomodify byte*) BGCOL2) ← *((const byte*) PIECES_COLORS_1) -- _deref_pbuc1=_deref_pbuc2 
    lda PIECES_COLORS_1
    sta BGCOL2
    // *BGCOL3 = PIECES_COLORS_2[0]
    // [505] *((const nomodify byte*) BGCOL3) ← *((const byte*) PIECES_COLORS_2) -- _deref_pbuc1=_deref_pbuc2 
    lda PIECES_COLORS_2
    sta BGCOL3
    // *BGCOL4 = GREY
    // [506] *((const nomodify byte*) BGCOL4) ← (const nomodify byte) GREY -- _deref_pbuc1=vbuc2 
    lda #GREY
    sta BGCOL4
    // render_screen_original(PLAYFIELD_SCREEN_1)
    // [507] call render_screen_original 
  // Setup chars on the screens
    // [519] phi from render_init::@2 to render_screen_original [phi:render_init::@2->render_screen_original]
    // [519] phi (byte*) render_screen_original::screen#9 = (const nomodify byte*) PLAYFIELD_SCREEN_1 [phi:render_init::@2->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1
    sta.z render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_1
    sta.z render_screen_original.screen+1
    jsr render_screen_original
    // [508] phi from render_init::@2 to render_init::@3 [phi:render_init::@2->render_init::@3]
    // render_init::@3
    // render_screen_original(PLAYFIELD_SCREEN_2)
    // [509] call render_screen_original 
    // [519] phi from render_init::@3 to render_screen_original [phi:render_init::@3->render_screen_original]
    // [519] phi (byte*) render_screen_original::screen#9 = (const nomodify byte*) PLAYFIELD_SCREEN_2 [phi:render_init::@3->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2
    sta.z render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_2
    sta.z render_screen_original.screen+1
    jsr render_screen_original
    // [510] phi from render_init::@3 to render_init::@1 [phi:render_init::@3->render_init::@1]
    // [510] phi (byte*) render_init::li_2#2 = (const nomodify byte*) PLAYFIELD_SCREEN_2+(byte)(number) 2*(number) $28+(byte) $10 [phi:render_init::@3->render_init::@1#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2+2*$28+$10
    sta.z li_2
    lda #>PLAYFIELD_SCREEN_2+2*$28+$10
    sta.z li_2+1
    // [510] phi (byte*) render_init::li_1#2 = (const nomodify byte*) PLAYFIELD_SCREEN_1+(byte)(number) 2*(number) $28+(byte) $10 [phi:render_init::@3->render_init::@1#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1+2*$28+$10
    sta.z li_1
    lda #>PLAYFIELD_SCREEN_1+2*$28+$10
    sta.z li_1+1
    // [510] phi (byte) render_init::i#2 = (byte) 0 [phi:render_init::@3->render_init::@1#2] -- vbuyy=vbuc1 
    ldy #0
    // [510] phi from render_init::@1 to render_init::@1 [phi:render_init::@1->render_init::@1]
    // [510] phi (byte*) render_init::li_2#2 = (byte*) render_init::li_2#1 [phi:render_init::@1->render_init::@1#0] -- register_copy 
    // [510] phi (byte*) render_init::li_1#2 = (byte*) render_init::li_1#1 [phi:render_init::@1->render_init::@1#1] -- register_copy 
    // [510] phi (byte) render_init::i#2 = (byte) render_init::i#1 [phi:render_init::@1->render_init::@1#2] -- register_copy 
    // render_init::@1
  __b1:
    // screen_lines_1[i] = li_1
    // [511] (byte~) render_init::$5 ← (byte) render_init::i#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [512] *((const byte**) screen_lines_1 + (byte~) render_init::$5) ← (byte*) render_init::li_1#2 -- pptc1_derefidx_vbuxx=pbuz1 
    lda.z li_1
    sta screen_lines_1,x
    lda.z li_1+1
    sta screen_lines_1+1,x
    // screen_lines_2[i] = li_2
    // [513] *((const byte**) screen_lines_2 + (byte~) render_init::$5) ← (byte*) render_init::li_2#2 -- pptc1_derefidx_vbuxx=pbuz1 
    lda.z li_2
    sta screen_lines_2,x
    lda.z li_2+1
    sta screen_lines_2+1,x
    // li_1 += 40
    // [514] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z li_1
    sta.z li_1
    bcc !+
    inc.z li_1+1
  !:
    // li_2 += 40
    // [515] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z li_2
    sta.z li_2
    bcc !+
    inc.z li_2+1
  !:
    // for(char i:0..PLAYFIELD_LINES-1)
    // [516] (byte) render_init::i#1 ← ++ (byte) render_init::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [517] if((byte) render_init::i#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto render_init::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #PLAYFIELD_LINES-1+1
    bne __b1
    // render_init::@return
    // }
    // [518] return 
    rts
}
  // render_screen_original
// Copy the original screen data to the passed screen
// Also copies colors to 0xd800
// render_screen_original(byte* zp($30) screen)
render_screen_original: {
    .const SPACE = 0
    .label screen = $30
    .label cols = $24
    .label oscr = $32
    .label ocols = $39
    .label y = $2f
    // [520] phi from render_screen_original to render_screen_original::@1 [phi:render_screen_original->render_screen_original::@1]
    // [520] phi (byte) render_screen_original::y#6 = (byte) 0 [phi:render_screen_original->render_screen_original::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [520] phi (byte*) render_screen_original::ocols#4 = (const to_nomodify byte*) PLAYFIELD_COLORS_ORIGINAL+(byte)(number) $20*(number) 2 [phi:render_screen_original->render_screen_original::@1#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_COLORS_ORIGINAL+$20*2
    sta.z ocols
    lda #>PLAYFIELD_COLORS_ORIGINAL+$20*2
    sta.z ocols+1
    // [520] phi (byte*) render_screen_original::oscr#4 = (const to_nomodify byte*) PLAYFIELD_SCREEN_ORIGINAL+(byte)(number) $20*(number) 2 [phi:render_screen_original->render_screen_original::@1#2] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta.z oscr
    lda #>PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta.z oscr+1
    // [520] phi (byte*) render_screen_original::cols#7 = (const nomodify byte*) COLS [phi:render_screen_original->render_screen_original::@1#3] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z cols
    lda #>COLS
    sta.z cols+1
    // [520] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#9 [phi:render_screen_original->render_screen_original::@1#4] -- register_copy 
    // [520] phi from render_screen_original::@5 to render_screen_original::@1 [phi:render_screen_original::@5->render_screen_original::@1]
    // [520] phi (byte) render_screen_original::y#6 = (byte) render_screen_original::y#1 [phi:render_screen_original::@5->render_screen_original::@1#0] -- register_copy 
    // [520] phi (byte*) render_screen_original::ocols#4 = (byte*) render_screen_original::ocols#1 [phi:render_screen_original::@5->render_screen_original::@1#1] -- register_copy 
    // [520] phi (byte*) render_screen_original::oscr#4 = (byte*) render_screen_original::oscr#1 [phi:render_screen_original::@5->render_screen_original::@1#2] -- register_copy 
    // [520] phi (byte*) render_screen_original::cols#7 = (byte*) render_screen_original::cols#3 [phi:render_screen_original::@5->render_screen_original::@1#3] -- register_copy 
    // [520] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#10 [phi:render_screen_original::@5->render_screen_original::@1#4] -- register_copy 
    // render_screen_original::@1
  __b1:
    // [521] phi from render_screen_original::@1 to render_screen_original::@2 [phi:render_screen_original::@1->render_screen_original::@2]
    // [521] phi (byte) render_screen_original::x#4 = (byte) 0 [phi:render_screen_original::@1->render_screen_original::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [521] phi (byte*) render_screen_original::cols#4 = (byte*) render_screen_original::cols#7 [phi:render_screen_original::@1->render_screen_original::@2#1] -- register_copy 
    // [521] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#8 [phi:render_screen_original::@1->render_screen_original::@2#2] -- register_copy 
    // [521] phi from render_screen_original::@2 to render_screen_original::@2 [phi:render_screen_original::@2->render_screen_original::@2]
    // [521] phi (byte) render_screen_original::x#4 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2->render_screen_original::@2#0] -- register_copy 
    // [521] phi (byte*) render_screen_original::cols#4 = (byte*) render_screen_original::cols#1 [phi:render_screen_original::@2->render_screen_original::@2#1] -- register_copy 
    // [521] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2->render_screen_original::@2#2] -- register_copy 
    // render_screen_original::@2
  __b2:
    // *screen++ = SPACE
    // [522] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
    // *screen++ = SPACE;
    // [523] (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // *cols++ = BLACK
    // [524] *((byte*) render_screen_original::cols#4) ← (const nomodify byte) BLACK -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (cols),y
    // *cols++ = BLACK;
    // [525] (byte*) render_screen_original::cols#1 ← ++ (byte*) render_screen_original::cols#4 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // while(++x!=4)
    // [526] (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4 -- vbuxx=_inc_vbuxx 
    inx
    // [527] if((byte) render_screen_original::x#1!=(byte) 4) goto render_screen_original::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b2
    // [528] phi from render_screen_original::@2 render_screen_original::@3 to render_screen_original::@3 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3]
    // [528] phi (byte) render_screen_original::x#5 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#0] -- register_copy 
    // [528] phi (byte*) render_screen_original::cols#5 = (byte*) render_screen_original::cols#1 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#1] -- register_copy 
    // [528] phi (byte*) render_screen_original::ocols#2 = (byte*) render_screen_original::ocols#4 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#2] -- register_copy 
    // [528] phi (byte*) render_screen_original::screen#6 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#3] -- register_copy 
    // [528] phi (byte*) render_screen_original::oscr#2 = (byte*) render_screen_original::oscr#4 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#4] -- register_copy 
    // render_screen_original::@3
  __b3:
    // *screen++ = *oscr++
    // [529] *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (oscr),y
    sta (screen),y
    // *screen++ = *oscr++;
    // [530] (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#6 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [531] (byte*) render_screen_original::oscr#1 ← ++ (byte*) render_screen_original::oscr#2 -- pbuz1=_inc_pbuz1 
    inc.z oscr
    bne !+
    inc.z oscr+1
  !:
    // *cols++ = *ocols++
    // [532] *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (ocols),y
    sta (cols),y
    // *cols++ = *ocols++;
    // [533] (byte*) render_screen_original::cols#2 ← ++ (byte*) render_screen_original::cols#5 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // [534] (byte*) render_screen_original::ocols#1 ← ++ (byte*) render_screen_original::ocols#2 -- pbuz1=_inc_pbuz1 
    inc.z ocols
    bne !+
    inc.z ocols+1
  !:
    // while(++x!=36)
    // [535] (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5 -- vbuxx=_inc_vbuxx 
    inx
    // [536] if((byte) render_screen_original::x#2!=(byte) $24) goto render_screen_original::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$24
    bne __b3
    // [537] phi from render_screen_original::@3 render_screen_original::@4 to render_screen_original::@4 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4]
    // [537] phi (byte) render_screen_original::x#6 = (byte) render_screen_original::x#2 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#0] -- register_copy 
    // [537] phi (byte*) render_screen_original::cols#6 = (byte*) render_screen_original::cols#2 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#1] -- register_copy 
    // [537] phi (byte*) render_screen_original::screen#7 = (byte*) render_screen_original::screen#3 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#2] -- register_copy 
    // render_screen_original::@4
  __b4:
    // *screen++ = SPACE
    // [538] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
    // *screen++ = SPACE;
    // [539] (byte*) render_screen_original::screen#10 ← ++ (byte*) render_screen_original::screen#7 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // *cols++ = BLACK
    // [540] *((byte*) render_screen_original::cols#6) ← (const nomodify byte) BLACK -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (cols),y
    // *cols++ = BLACK;
    // [541] (byte*) render_screen_original::cols#3 ← ++ (byte*) render_screen_original::cols#6 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // while(++x!=40)
    // [542] (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#6 -- vbuxx=_inc_vbuxx 
    inx
    // [543] if((byte) render_screen_original::x#3!=(byte) $28) goto render_screen_original::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b4
    // render_screen_original::@5
    // for(char y:0..24)
    // [544] (byte) render_screen_original::y#1 ← ++ (byte) render_screen_original::y#6 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [545] if((byte) render_screen_original::y#1!=(byte) $19) goto render_screen_original::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z y
    bne __b1
    // render_screen_original::@return
    // }
    // [546] return 
    rts
}
  // sprites_irq
// Raster Interrupt Routine - sets up the sprites covering the playfield
// Repeats 10 timers every 2 lines from line IRQ_RASTER_FIRST
// Utilizes duplicated gfx in the sprites to allow for some leeway in updating the sprite pointers
sprites_irq: {
    .const toSpritePtr1_return = PLAYFIELD_SPRITES/$40
    .label raster_sprite_gfx_modify = $3d
    // entry interrupt(HARDWARE_CLOBBER)
    sta rega+1
    stx regx+1
    // asm
    // asm { cld  }
    //(*BGCOL)++;
    // Clear decimal flag (because it is used by the score algorithm)
    cld
    // ypos = irq_sprite_ypos
    // [548] (byte) sprites_irq::ypos#0 ← (volatile byte) irq_sprite_ypos -- vbuaa=vbuz1 
    // Place the sprites
    lda.z irq_sprite_ypos
    // SPRITES_YPOS[0] = ypos
    // [549] *((const nomodify byte*) SPRITES_YPOS) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS
    // SPRITES_YPOS[2] = ypos
    // [550] *((const nomodify byte*) SPRITES_YPOS+(byte) 2) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+2
    // SPRITES_YPOS[4] = ypos
    // [551] *((const nomodify byte*) SPRITES_YPOS+(byte) 4) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+4
    // SPRITES_YPOS[6] = ypos
    // [552] *((const nomodify byte*) SPRITES_YPOS+(byte) 6) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+6
    // irq_raster_next+1
    // [553] (byte~) sprites_irq::$0 ← (volatile byte) irq_raster_next + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z irq_raster_next
    inx
    // raster_sprite_gfx_modify = irq_raster_next+1
    // [554] (volatile byte) sprites_irq::raster_sprite_gfx_modify ← (byte~) sprites_irq::$0 -- vbuz1=vbuxx 
    // Wait for the y-position before changing sprite pointers
    stx.z raster_sprite_gfx_modify
    // sprites_irq::@8
  __b8:
    // while(*RASTER<raster_sprite_gfx_modify)
    // [555] if(*((const nomodify byte*) RASTER)<(volatile byte) sprites_irq::raster_sprite_gfx_modify) goto sprites_irq::@8 -- _deref_pbuc1_lt_vbuz1_then_la1 
    lda RASTER
    cmp.z raster_sprite_gfx_modify
    bcc __b8
    // sprites_irq::@9
    // ptr = irq_sprite_ptr
    // [556] (byte) sprites_irq::ptr#0 ← (volatile byte) irq_sprite_ptr -- vbuxx=vbuz1 
    ldx.z irq_sprite_ptr
    // if(render_screen_showing==0)
    // [557] if((volatile byte) render_screen_showing==(byte) 0) goto sprites_irq::@1 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_showing
    cmp #0
    beq __b1
    // sprites_irq::@10
    // PLAYFIELD_SPRITE_PTRS_2[0] = ptr++
    // [558] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_2
    // PLAYFIELD_SPRITE_PTRS_2[0] = ptr++;
    // [559] (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#0 -- vbuaa=_inc_vbuxx 
    inx
    txa
    // PLAYFIELD_SPRITE_PTRS_2[1] = ptr
    // [560] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 1) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+1
    // PLAYFIELD_SPRITE_PTRS_2[2] = ptr++
    // [561] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 2) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+2
    // PLAYFIELD_SPRITE_PTRS_2[2] = ptr++;
    // [562] (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3 -- vbuaa=_inc_vbuaa 
    clc
    adc #1
    // PLAYFIELD_SPRITE_PTRS_2[3] = ptr
    // [563] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 3) ← (byte) sprites_irq::ptr#4 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+3
    // sprites_irq::@2
  __b2:
    // ++irq_cnt;
    // [564] (volatile byte) irq_cnt ← ++ (volatile byte) irq_cnt -- vbuz1=_inc_vbuz1 
    inc.z irq_cnt
    // if(irq_cnt==9)
    // [565] if((volatile byte) irq_cnt==(byte) 9) goto sprites_irq::@3 -- vbuz1_eq_vbuc1_then_la1 
    lda #9
    cmp.z irq_cnt
    beq __b3
    // sprites_irq::@6
    // if(irq_cnt==10)
    // [566] if((volatile byte) irq_cnt==(byte) $a) goto sprites_irq::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #$a
    cmp.z irq_cnt
    beq __b4
    // sprites_irq::@7
    // irq_raster_next += 20
    // [567] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $14 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$14]
    stx.z irq_raster_next
    // irq_sprite_ypos += 21
    // [568] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ypos
    axs #-[$15]
    stx.z irq_sprite_ypos
    // irq_sprite_ptr += 3
    // [569] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ptr
    axs #-[3]
    stx.z irq_sprite_ptr
    // sprites_irq::@5
  __b5:
    // *RASTER = irq_raster_next
    // [570] *((const nomodify byte*) RASTER) ← (volatile byte) irq_raster_next -- _deref_pbuc1=vbuz1 
    // Setup next interrupt
    lda.z irq_raster_next
    sta RASTER
    // *IRQ_STATUS = IRQ_RASTER
    // [571] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ and setup the next one
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // sprites_irq::@return
    // }
    // [572] return  - exit interrupt(HARDWARE_CLOBBER)
  rega:
    lda #00
  regx:
    ldx #00
    rti
    // sprites_irq::@4
  __b4:
    // irq_cnt = 0
    // [573] (volatile byte) irq_cnt ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z irq_cnt
    // irq_raster_next = IRQ_RASTER_FIRST
    // [574] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta.z irq_raster_next
    // irq_sprite_ypos += 21
    // [575] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ypos
    axs #-[$15]
    stx.z irq_sprite_ypos
    // irq_sprite_ptr += 3
    // [576] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ptr
    axs #-[3]
    stx.z irq_sprite_ptr
    jmp __b5
    // sprites_irq::@3
  __b3:
    // irq_raster_next += 21
    // [577] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$15]
    stx.z irq_raster_next
    // irq_sprite_ypos = SPRITES_FIRST_YPOS
    // [578] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS -- vbuz1=vbuc1 
    lda #SPRITES_FIRST_YPOS
    sta.z irq_sprite_ypos
    // [579] phi from sprites_irq::@3 to sprites_irq::toSpritePtr1 [phi:sprites_irq::@3->sprites_irq::toSpritePtr1]
    // sprites_irq::toSpritePtr1
    // sprites_irq::@11
    // irq_sprite_ptr = toSpritePtr(PLAYFIELD_SPRITES)
    // [580] (volatile byte) irq_sprite_ptr ← (const byte) sprites_irq::toSpritePtr1_return#0 -- vbuz1=vbuc1 
    lda #toSpritePtr1_return
    sta.z irq_sprite_ptr
    jmp __b5
    // sprites_irq::@1
  __b1:
    // PLAYFIELD_SPRITE_PTRS_1[0] = ptr++
    // [581] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1
    // PLAYFIELD_SPRITE_PTRS_1[0] = ptr++;
    // [582] (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#0 -- vbuxx=_inc_vbuxx 
    inx
    // PLAYFIELD_SPRITE_PTRS_1[1] = ptr
    // [583] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 1) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1+1
    // PLAYFIELD_SPRITE_PTRS_1[2] = ptr++
    // [584] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 2) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1+2
    // PLAYFIELD_SPRITE_PTRS_1[2] = ptr++;
    // [585] (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1 -- vbuaa=_inc_vbuxx 
    inx
    txa
    // PLAYFIELD_SPRITE_PTRS_1[3] = ptr
    // [586] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 3) ← (byte) sprites_irq::ptr#2 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_1+3
    jmp __b2
}
  // File Data
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Keyboard event buffer. Contains keycodes for key presses/releases. Presses are represented by the keycode. Releases by keycode | $40. The buffer is filled by keyboard_scan()
  keyboard_events: .fill 8, 0
  // The values scanned values for each row. Set by keyboard_scan() and used by keyboard_get_event()
  keyboard_scan_values: .fill 8, 0
  // The playfield.  0 is empty non-zero is color.
  // The playfield is layed out line by line, meaning the first 10 bytes are line 1, the next 10 line 2 and so forth,
  playfield: .fill PLAYFIELD_LINES*PLAYFIELD_COLS, 0
  // The T-piece
  .align $40
  PIECE_T: .byte 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The S-piece
  .align $40
  PIECE_S: .byte 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0
  // The Z-piece
  .align $40
  PIECE_Z: .byte 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The L-piece
  .align $40
  PIECE_L: .byte 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0
  // The J-piece
  .align $40
  PIECE_J: .byte 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The O-piece
  .align $40
  PIECE_O: .byte 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0
  // The I-piece
  .align $40
  PIECE_I: .byte 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0
  // The different pieces
  PIECES: .word PIECE_T, PIECE_S, PIECE_Z, PIECE_J, PIECE_O, PIECE_I, PIECE_L
  // The chars to use for the different pieces - when inside the playing area
  PIECES_CHARS: .byte $65, $66, $a6, $66, $65, $65, $a6
  // The chars to use for the different pieces - when outside the playing area (eg. the next area).
  PIECES_NEXT_CHARS: .byte $63, $64, $a4, $64, $63, $63, $a4
  // The initial X/Y for each piece
  PIECES_START_X: .byte 4, 4, 4, 4, 4, 4, 4
  PIECES_START_Y: .byte 1, 1, 1, 1, 1, 0, 1
PLAYFIELD_SCREEN_ORIGINAL:
// Load chars for the screen
  .var screen = LoadBinary("playfield-screen.iscr")
   // Load extended colors for the screen
  .var extended = LoadBinary("playfield-extended.col")
  // screen.get(i)+1 because the charset is loaded into PLAYFIELD_CHARSET+8
  // extended.get(i)-1 because the extended colors are 1-based (1/2/3/4)
  // <<6 to move extended colors to the upper 2 bits
  .fill screen.getSize(), ( (screen.get(i)+1) | (extended.get(i)-1)<<6 )

  // Original Color Data
PLAYFIELD_COLORS_ORIGINAL:
.import binary "playfield-screen.col"

  // The color #1 to use for the pieces for each level
  PIECES_COLORS_1: .byte BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED, BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED, BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED
  // The color #2 to use for the pieces for each level
  PIECES_COLORS_2: .byte CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE, CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE, CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE
  // Pointers to the screen address for rendering each playfield line
  // The lines for screen 1 is aligned with 0x80 and screen 2 with 0x40 - so XOR'ing with 0x40 gives screen 2 lines.
  .align $80
  screen_lines_1: .fill 2*PLAYFIELD_LINES, 0
  .align $40
  screen_lines_2: .fill 2*PLAYFIELD_LINES, 0
  // Pointers to the playfield address for each playfield line
  playfield_lines: .fill 2*PLAYFIELD_LINES, 0
  // Indixes into the playfield  for each playfield line
  playfield_lines_idx: .fill PLAYFIELD_LINES+1, 0
  // The speed of moving down the piece when soft-drop is not activated
  // This array holds the number of frames per move by level (0-29). For all levels 29+ the value is 1.
  MOVEDOWN_SLOW_SPEEDS: .byte $30, $2b, $26, $21, $1c, $17, $12, $d, 8, 6, 5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1
  // Base Score values for removing 0-4 lines (in BCD)
  // These values are added to score_add_bcd for each level gained.
  SCORE_BASE_BCD: .dword 0, $40, $100, $300, $1200
  // Score values for removing 0-4 lines (in BCD)
  // These values are updated based on the players level and the base values from SCORE_BASE_BCD
  score_add_bcd: .fill 4*5, 0
.pc = PLAYFIELD_CHARSET "PLAYFIELD_CHARSET"
  .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "playfield-screen.imap"

.pc = PLAYFIELD_SPRITES "PLAYFIELD_SPRITES"
  .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000))
	// Put the sprites into memory 
	.for(var sy=0;sy<10;sy++) {
	    .var sprite_gfx_y = sy*20
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21)
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y)
	            }
	        }
	    	.byte 0
	  	}
	}


