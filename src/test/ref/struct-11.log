Fixing struct type size struct Person to 65
Fixing struct type size struct Person to 65
Fixing struct type size struct Person to 65
Fixing struct type SIZE_OF struct Person to 65
Fixing struct type SIZE_OF struct Person to 65
Created struct value member variable (byte) print_person::person_id
Created struct value member variable (byte*) print_person::person_name
Converted struct value to member variables (struct Person) print_person::person
Converted procedure struct value parameter to member unwinding (void()) print_person((byte) print_person::person_id , (byte*) print_person::person_name)
Converted procedure struct value parameter to member unwinding in call (void~) main::$0 ← call print_person *((byte*)&(struct Person) jesper+(const byte) OFFSET_STRUCT_PERSON_ID) (byte*)&(struct Person) jesper+(const byte) OFFSET_STRUCT_PERSON_NAME 
Converted procedure struct value parameter to member unwinding in call (void~) main::$1 ← call print_person *((byte*)&(struct Person) henriette+(const byte) OFFSET_STRUCT_PERSON_ID) (byte*)&(struct Person) henriette+(const byte) OFFSET_STRUCT_PERSON_NAME 
Replacing struct member reference (struct Person) print_person::person.id with member unwinding reference (byte) print_person::person_id
Replacing struct member reference (struct Person) print_person::person.name with member unwinding reference (byte*) print_person::person_name
Replacing struct member reference (struct Person) print_person::person.name with member unwinding reference (byte*) print_person::person_name
Warning! Adding boolean cast to non-boolean condition *((byte*) print_person::person_name + (byte) print_person::i)
Culled Empty Block (label) print_person::@4
Culled Empty Block (label) print_person::@5
Culled Empty Block (label) print_person::@6

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @2
  (byte) idx#18 ← phi( @2/(byte) idx#20 )
  (byte) print_person::person_id#0 ← *((byte*)&(struct Person) jesper+(const byte) OFFSET_STRUCT_PERSON_ID)
  (byte*) print_person::person_name#0 ← (byte*)&(struct Person) jesper+(const byte) OFFSET_STRUCT_PERSON_NAME
  call print_person 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) idx#10 ← phi( main/(byte) idx#8 )
  (byte) idx#0 ← (byte) idx#10
  (byte) print_person::person_id#1 ← *((byte*)&(struct Person) henriette+(const byte) OFFSET_STRUCT_PERSON_ID)
  (byte*) print_person::person_name#1 ← (byte*)&(struct Person) henriette+(const byte) OFFSET_STRUCT_PERSON_NAME
  call print_person 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) idx#11 ← phi( main::@1/(byte) idx#8 )
  (byte) idx#1 ← (byte) idx#11
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte) idx#12 ← phi( main::@2/(byte) idx#1 )
  (byte) idx#2 ← (byte) idx#12
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) idx#3 ← (byte) 0
  to:@2

(void()) print_person((byte) print_person::person_id , (byte*) print_person::person_name)
print_person: scope:[print_person]  from main main::@1
  (byte*) print_person::person_name#4 ← phi( main/(byte*) print_person::person_name#0 main::@1/(byte*) print_person::person_name#1 )
  (byte) idx#13 ← phi( main/(byte) idx#18 main::@1/(byte) idx#0 )
  (byte) print_person::person_id#2 ← phi( main/(byte) print_person::person_id#0 main::@1/(byte) print_person::person_id#1 )
  *((const byte*) SCREEN + (byte) idx#13) ← *((const byte*) DIGIT + (byte) print_person::person_id#2)
  (byte) idx#4 ← ++ (byte) idx#13
  *((const byte*) SCREEN + (byte) idx#4) ← (byte) ' '
  (byte) idx#5 ← ++ (byte) idx#4
  (byte) print_person::i#0 ← (byte) 0
  to:print_person::@1
print_person::@1: scope:[print_person]  from print_person print_person::@2
  (byte) idx#19 ← phi( print_person/(byte) idx#5 print_person::@2/(byte) idx#6 )
  (byte) print_person::i#2 ← phi( print_person/(byte) print_person::i#0 print_person::@2/(byte) print_person::i#1 )
  (byte*) print_person::person_name#2 ← phi( print_person/(byte*) print_person::person_name#4 print_person::@2/(byte*) print_person::person_name#3 )
  (bool~) print_person::$0 ← (number) 0 != *((byte*) print_person::person_name#2 + (byte) print_person::i#2)
  if((bool~) print_person::$0) goto print_person::@2
  to:print_person::@3
print_person::@2: scope:[print_person]  from print_person::@1
  (byte) idx#14 ← phi( print_person::@1/(byte) idx#19 )
  (byte) print_person::i#3 ← phi( print_person::@1/(byte) print_person::i#2 )
  (byte*) print_person::person_name#3 ← phi( print_person::@1/(byte*) print_person::person_name#2 )
  *((const byte*) SCREEN + (byte) idx#14) ← *((byte*) print_person::person_name#3 + (byte) print_person::i#3)
  (byte) idx#6 ← ++ (byte) idx#14
  (byte) print_person::i#1 ← ++ (byte) print_person::i#3
  to:print_person::@1
print_person::@3: scope:[print_person]  from print_person::@1
  (byte) idx#15 ← phi( print_person::@1/(byte) idx#19 )
  *((const byte*) SCREEN + (byte) idx#15) ← (byte) ' '
  (byte) idx#7 ← ++ (byte) idx#15
  to:print_person::@return
print_person::@return: scope:[print_person]  from print_person::@3
  (byte) idx#16 ← phi( print_person::@3/(byte) idx#7 )
  (byte) idx#8 ← (byte) idx#16
  return 
  to:@return
@2: scope:[]  from @1
  (byte) idx#20 ← phi( @1/(byte) idx#3 )
  call main 
  to:@3
@3: scope:[]  from @2
  (byte) idx#17 ← phi( @2/(byte) idx#2 )
  (byte) idx#9 ← (byte) idx#17
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const byte*) DIGIT[]  = (byte*) "0123456789"
(const byte) OFFSET_STRUCT_PERSON_ID = (byte) 0
(const byte) OFFSET_STRUCT_PERSON_NAME = (byte) 1
(byte) Person::id
(const byte*) Person::name[(number) $40]  = { fill( $40, 0) }
(const byte*) SCREEN = (byte*)(number) $400
(struct Person) henriette loadstore = { id: (byte) 7, name: (byte*) "henriette" }
(byte) idx
(byte) idx#0
(byte) idx#1
(byte) idx#10
(byte) idx#11
(byte) idx#12
(byte) idx#13
(byte) idx#14
(byte) idx#15
(byte) idx#16
(byte) idx#17
(byte) idx#18
(byte) idx#19
(byte) idx#2
(byte) idx#20
(byte) idx#3
(byte) idx#4
(byte) idx#5
(byte) idx#6
(byte) idx#7
(byte) idx#8
(byte) idx#9
(struct Person) jesper loadstore = { id: (byte) 4, name: (byte*) "jesper" }
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void()) print_person((byte) print_person::person_id , (byte*) print_person::person_name)
(bool~) print_person::$0
(label) print_person::@1
(label) print_person::@2
(label) print_person::@3
(label) print_person::@return
(byte) print_person::i
(byte) print_person::i#0
(byte) print_person::i#1
(byte) print_person::i#2
(byte) print_person::i#3
(struct Person) print_person::person
(byte) print_person::person_id
(byte) print_person::person_id#0
(byte) print_person::person_id#1
(byte) print_person::person_id#2
(byte*) print_person::person_name
(byte*) print_person::person_name#0
(byte*) print_person::person_name#1
(byte*) print_person::person_name#2
(byte*) print_person::person_name#3
(byte*) print_person::person_name#4

Adding number conversion cast (unumber) 0 in (bool~) print_person::$0 ← (number) 0 != *((byte*) print_person::person_name#2 + (byte) print_person::i#2)
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias idx#0 = idx#10 
Alias idx#1 = idx#11 idx#12 idx#2 
Alias print_person::person_name#2 = print_person::person_name#3 
Alias print_person::i#2 = print_person::i#3 
Alias idx#14 = idx#19 idx#15 
Alias idx#16 = idx#7 idx#8 
Alias idx#20 = idx#3 
Alias idx#17 = idx#9 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) idx#18 (byte) idx#20
Identical Phi Values (byte) idx#0 (byte) idx#16
Identical Phi Values (byte) idx#1 (byte) idx#16
Identical Phi Values (byte*) print_person::person_name#2 (byte*) print_person::person_name#4
Identical Phi Values (byte) idx#17 (byte) idx#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) print_person::$0 [19] if((byte) 0!=*((byte*) print_person::person_name#4 + (byte) print_person::i#2)) goto print_person::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print_person::person_name#0 = (byte*)&jesper+OFFSET_STRUCT_PERSON_NAME
Constant (const byte*) print_person::person_name#1 = (byte*)&henriette+OFFSET_STRUCT_PERSON_NAME
Constant (const byte) idx#20 = 0
Constant (const byte) print_person::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero (byte*)&jesper in [1] (byte) print_person::person_id#0 ← *((byte*)&(struct Person) jesper+(const byte) OFFSET_STRUCT_PERSON_ID)
Simplifying expression containing zero (byte*)&henriette in [5] (byte) print_person::person_id#1 ← *((byte*)&(struct Person) henriette+(const byte) OFFSET_STRUCT_PERSON_ID)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) OFFSET_STRUCT_PERSON_ID
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings (const byte*) print_person::person_name#0
Inlining constant with var siblings (const byte*) print_person::person_name#1
Inlining constant with var siblings (const byte) print_person::i#0
Inlining constant with var siblings (const byte) idx#20
Constant inlined idx#20 = (byte) 0
Constant inlined print_person::person_name#1 = (byte*)&(struct Person) henriette+(const byte) OFFSET_STRUCT_PERSON_NAME
Constant inlined print_person::i#0 = (byte) 0
Constant inlined print_person::person_name#0 = (byte*)&(struct Person) jesper+(const byte) OFFSET_STRUCT_PERSON_NAME
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to print_person:8 print_person:12 

Created 5 initial phi equivalence classes
Coalesced [7] print_person::person_id#3 ← print_person::person_id#0
Coalesced [10] print_person::person_id#4 ← print_person::person_id#1
Coalesced [11] idx#21 ← idx#16
Coalesced [20] idx#22 ← idx#5
Coalesced [29] print_person::i#4 ← print_person::i#1
Coalesced [30] idx#23 ← idx#6
Coalesced down to 5 phi equivalence classes
Culled Empty Block (label) @1
Culled Empty Block (label) @3
Culled Empty Block (label) main::@2
Renumbering block @2 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] (byte) print_person::person_id#0 ← *((byte*)&(struct Person) jesper)
  [5] call print_person 
  to:main::@1
main::@1: scope:[main]  from main
  [6] (byte) print_person::person_id#1 ← *((byte*)&(struct Person) henriette)
  [7] call print_person 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return 
  to:@return

(void()) print_person((byte) print_person::person_id , (byte*) print_person::person_name)
print_person: scope:[print_person]  from main main::@1
  [9] (byte*) print_person::person_name#4 ← phi( main/(byte*)&(struct Person) jesper+(const byte) OFFSET_STRUCT_PERSON_NAME main::@1/(byte*)&(struct Person) henriette+(const byte) OFFSET_STRUCT_PERSON_NAME )
  [9] (byte) idx#13 ← phi( main/(byte) 0 main::@1/(byte) idx#16 )
  [9] (byte) print_person::person_id#2 ← phi( main/(byte) print_person::person_id#0 main::@1/(byte) print_person::person_id#1 )
  [10] *((const byte*) SCREEN + (byte) idx#13) ← *((const byte*) DIGIT + (byte) print_person::person_id#2)
  [11] (byte) idx#4 ← ++ (byte) idx#13
  [12] *((const byte*) SCREEN + (byte) idx#4) ← (byte) ' '
  [13] (byte) idx#5 ← ++ (byte) idx#4
  to:print_person::@1
print_person::@1: scope:[print_person]  from print_person print_person::@2
  [14] (byte) idx#14 ← phi( print_person/(byte) idx#5 print_person::@2/(byte) idx#6 )
  [14] (byte) print_person::i#2 ← phi( print_person/(byte) 0 print_person::@2/(byte) print_person::i#1 )
  [15] if((byte) 0!=*((byte*) print_person::person_name#4 + (byte) print_person::i#2)) goto print_person::@2
  to:print_person::@3
print_person::@3: scope:[print_person]  from print_person::@1
  [16] *((const byte*) SCREEN + (byte) idx#14) ← (byte) ' '
  [17] (byte) idx#16 ← ++ (byte) idx#14
  to:print_person::@return
print_person::@return: scope:[print_person]  from print_person::@3
  [18] return 
  to:@return
print_person::@2: scope:[print_person]  from print_person::@1
  [19] *((const byte*) SCREEN + (byte) idx#14) ← *((byte*) print_person::person_name#4 + (byte) print_person::i#2)
  [20] (byte) idx#6 ← ++ (byte) idx#14
  [21] (byte) print_person::i#1 ← ++ (byte) print_person::i#2
  to:print_person::@1


VARIABLE REGISTER WEIGHTS
(byte) Person::id
(struct Person) henriette loadstore = { id: (byte) 7, name: (byte*) "henriette" }
(byte) idx
(byte) idx#13 106.5
(byte) idx#14 826.5
(byte) idx#16 28.0
(byte) idx#4 151.5
(byte) idx#5 202.0
(byte) idx#6 1001.0
(struct Person) jesper loadstore = { id: (byte) 4, name: (byte*) "jesper" }
(void()) main()
(void()) print_person((byte) print_person::person_id , (byte*) print_person::person_name)
(byte) print_person::i
(byte) print_person::i#1 2002.0
(byte) print_person::i#2 1001.0
(struct Person) print_person::person
(byte) print_person::person_id
(byte) print_person::person_id#0 22.0
(byte) print_person::person_id#1 22.0
(byte) print_person::person_id#2 123.0
(byte*) print_person::person_name
(byte*) print_person::person_name#4 200.2

Initial phi equivalence classes
[ print_person::person_id#2 print_person::person_id#0 print_person::person_id#1 ]
[ idx#13 idx#16 ]
[ print_person::person_name#4 ]
[ print_person::i#2 print_person::i#1 ]
[ idx#14 idx#5 idx#6 ]
Added variable idx#4 to live range equivalence class [ idx#4 ]
Added variable jesper to live range equivalence class [ jesper ]
Added variable henriette to live range equivalence class [ henriette ]
Complete equivalence classes
[ print_person::person_id#2 print_person::person_id#0 print_person::person_id#1 ]
[ idx#13 idx#16 ]
[ print_person::person_name#4 ]
[ print_person::i#2 print_person::i#1 ]
[ idx#14 idx#5 idx#6 ]
[ idx#4 ]
[ jesper ]
[ henriette ]
Allocated zp[1]:2 [ print_person::person_id#2 print_person::person_id#0 print_person::person_id#1 ]
Allocated zp[1]:3 [ idx#13 idx#16 ]
Allocated zp[2]:4 [ print_person::person_name#4 ]
Allocated zp[1]:6 [ print_person::i#2 print_person::i#1 ]
Allocated zp[1]:7 [ idx#14 idx#5 idx#6 ]
Allocated zp[1]:8 [ idx#4 ]
Allocated mem[65] [ jesper ]
Allocated mem[65] [ henriette ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Example of a struct containing an array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const OFFSET_STRUCT_PERSON_NAME = 1
  .label idx = 8
  .label idx_1 = 7
  .label idx_2 = 3
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] (byte) print_person::person_id#0 ← *((byte*)&(struct Person) jesper) -- vbuz1=_deref_pbuc1 
    lda jesper
    sta.z print_person.person_id
    // [5] call print_person 
    // [9] phi from main to print_person [phi:main->print_person]
  print_person_from_main:
    // [9] phi (byte*) print_person::person_name#4 = (byte*)&(struct Person) jesper+(const byte) OFFSET_STRUCT_PERSON_NAME [phi:main->print_person#0] -- pbuz1=pbuc1 
    lda #<jesper+OFFSET_STRUCT_PERSON_NAME
    sta.z print_person.person_name
    lda #>jesper+OFFSET_STRUCT_PERSON_NAME
    sta.z print_person.person_name+1
    // [9] phi (byte) idx#13 = (byte) 0 [phi:main->print_person#1] -- vbuz1=vbuc1 
    lda #0
    sta.z idx_2
    // [9] phi (byte) print_person::person_id#2 = (byte) print_person::person_id#0 [phi:main->print_person#2] -- register_copy 
    jsr print_person
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte) print_person::person_id#1 ← *((byte*)&(struct Person) henriette) -- vbuz1=_deref_pbuc1 
    lda henriette
    sta.z print_person.person_id
    // [7] call print_person 
    // [9] phi from main::@1 to print_person [phi:main::@1->print_person]
  print_person_from___b1:
    // [9] phi (byte*) print_person::person_name#4 = (byte*)&(struct Person) henriette+(const byte) OFFSET_STRUCT_PERSON_NAME [phi:main::@1->print_person#0] -- pbuz1=pbuc1 
    lda #<henriette+OFFSET_STRUCT_PERSON_NAME
    sta.z print_person.person_name
    lda #>henriette+OFFSET_STRUCT_PERSON_NAME
    sta.z print_person.person_name+1
    // [9] phi (byte) idx#13 = (byte) idx#16 [phi:main::@1->print_person#1] -- register_copy 
    // [9] phi (byte) print_person::person_id#2 = (byte) print_person::person_id#1 [phi:main::@1->print_person#2] -- register_copy 
    jsr print_person
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // print_person
// print_person(byte zp(2) person_id, byte* zp(4) person_name)
print_person: {
    .label person_id = 2
    .label i = 6
    .label person_name = 4
    // [10] *((const byte*) SCREEN + (byte) idx#13) ← *((const byte*) DIGIT + (byte) print_person::person_id#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy.z person_id
    lda DIGIT,y
    ldy.z idx_2
    sta SCREEN,y
    // [11] (byte) idx#4 ← ++ (byte) idx#13 -- vbuz1=_inc_vbuz2 
    ldy.z idx_2
    iny
    sty.z idx
    // [12] *((const byte*) SCREEN + (byte) idx#4) ← (byte) ' ' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #' '
    ldy.z idx
    sta SCREEN,y
    // [13] (byte) idx#5 ← ++ (byte) idx#4 -- vbuz1=_inc_vbuz2 
    ldy.z idx
    iny
    sty.z idx_1
    // [14] phi from print_person to print_person::@1 [phi:print_person->print_person::@1]
  __b1_from_print_person:
    // [14] phi (byte) idx#14 = (byte) idx#5 [phi:print_person->print_person::@1#0] -- register_copy 
    // [14] phi (byte) print_person::i#2 = (byte) 0 [phi:print_person->print_person::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // print_person::@1
  __b1:
    // [15] if((byte) 0!=*((byte*) print_person::person_name#4 + (byte) print_person::i#2)) goto print_person::@2 -- vbuc1_neq_pbuz1_derefidx_vbuz2_then_la1 
    ldy.z i
    lda (person_name),y
    cmp #0
    bne __b2
    jmp __b3
    // print_person::@3
  __b3:
    // [16] *((const byte*) SCREEN + (byte) idx#14) ← (byte) ' ' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #' '
    ldy.z idx_1
    sta SCREEN,y
    // [17] (byte) idx#16 ← ++ (byte) idx#14 -- vbuz1=_inc_vbuz2 
    ldy.z idx_1
    iny
    sty.z idx_2
    jmp __breturn
    // print_person::@return
  __breturn:
    // [18] return 
    rts
    // print_person::@2
  __b2:
    // [19] *((const byte*) SCREEN + (byte) idx#14) ← *((byte*) print_person::person_name#4 + (byte) print_person::i#2) -- pbuc1_derefidx_vbuz1=pbuz2_derefidx_vbuz3 
    ldx.z idx_1
    ldy.z i
    lda (person_name),y
    sta SCREEN,x
    // [20] (byte) idx#6 ← ++ (byte) idx#14 -- vbuz1=_inc_vbuz1 
    inc.z idx_1
    // [21] (byte) print_person::i#1 ← ++ (byte) print_person::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [14] phi from print_person::@2 to print_person::@1 [phi:print_person::@2->print_person::@1]
  __b1_from___b2:
    // [14] phi (byte) idx#14 = (byte) idx#6 [phi:print_person::@2->print_person::@1#0] -- register_copy 
    // [14] phi (byte) print_person::i#2 = (byte) print_person::i#1 [phi:print_person::@2->print_person::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
  DIGIT: .text "0123456789"
  .byte 0
  jesper: .byte 4
  .text "jesper"
  .byte 0
  .fill $39, 0
  henriette: .byte 7
  .text "henriette"
  .byte 0
  .fill $36, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [10] *((const byte*) SCREEN + (byte) idx#13) ← *((const byte*) DIGIT + (byte) print_person::person_id#2) [ henriette idx#13 print_person::person_name#4 ] ( main:2::print_person:5 [ henriette idx#13 print_person::person_name#4 ] { { print_person::person_id#0 = print_person::person_id#2 } }  main:2::print_person:7 [ henriette idx#13 print_person::person_name#4 ] { { print_person::person_id#1 = print_person::person_id#2 } { idx#13 = idx#16 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ idx#13 idx#16 ]
Statement [12] *((const byte*) SCREEN + (byte) idx#4) ← (byte) ' ' [ henriette print_person::person_name#4 idx#4 ] ( main:2::print_person:5 [ henriette print_person::person_name#4 idx#4 ] { { print_person::person_id#0 = print_person::person_id#2 } }  main:2::print_person:7 [ henriette print_person::person_name#4 idx#4 ] { { print_person::person_id#1 = print_person::person_id#2 } { idx#13 = idx#16 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ idx#4 ]
Statement [15] if((byte) 0!=*((byte*) print_person::person_name#4 + (byte) print_person::i#2)) goto print_person::@2 [ henriette print_person::person_name#4 print_person::i#2 idx#14 ] ( main:2::print_person:5 [ henriette print_person::person_name#4 print_person::i#2 idx#14 ] { { print_person::person_id#0 = print_person::person_id#2 } }  main:2::print_person:7 [ henriette print_person::person_name#4 print_person::i#2 idx#14 ] { { print_person::person_id#1 = print_person::person_id#2 } { idx#13 = idx#16 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ print_person::i#2 print_person::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:7 [ idx#14 idx#5 idx#6 ]
Statement [16] *((const byte*) SCREEN + (byte) idx#14) ← (byte) ' ' [ henriette idx#14 ] ( main:2::print_person:5 [ henriette idx#14 ] { { print_person::person_id#0 = print_person::person_id#2 } }  main:2::print_person:7 [ henriette idx#14 ] { { print_person::person_id#1 = print_person::person_id#2 } { idx#13 = idx#16 } }  ) always clobbers reg byte a 
Statement [19] *((const byte*) SCREEN + (byte) idx#14) ← *((byte*) print_person::person_name#4 + (byte) print_person::i#2) [ henriette print_person::person_name#4 print_person::i#2 idx#14 ] ( main:2::print_person:5 [ henriette print_person::person_name#4 print_person::i#2 idx#14 ] { { print_person::person_id#0 = print_person::person_id#2 } }  main:2::print_person:7 [ henriette print_person::person_name#4 print_person::i#2 idx#14 ] { { print_person::person_id#1 = print_person::person_id#2 } { idx#13 = idx#16 } }  ) always clobbers reg byte a 
Statement [10] *((const byte*) SCREEN + (byte) idx#13) ← *((const byte*) DIGIT + (byte) print_person::person_id#2) [ henriette idx#13 print_person::person_name#4 ] ( main:2::print_person:5 [ henriette idx#13 print_person::person_name#4 ] { { print_person::person_id#0 = print_person::person_id#2 } }  main:2::print_person:7 [ henriette idx#13 print_person::person_name#4 ] { { print_person::person_id#1 = print_person::person_id#2 } { idx#13 = idx#16 } }  ) always clobbers reg byte a 
Statement [12] *((const byte*) SCREEN + (byte) idx#4) ← (byte) ' ' [ henriette print_person::person_name#4 idx#4 ] ( main:2::print_person:5 [ henriette print_person::person_name#4 idx#4 ] { { print_person::person_id#0 = print_person::person_id#2 } }  main:2::print_person:7 [ henriette print_person::person_name#4 idx#4 ] { { print_person::person_id#1 = print_person::person_id#2 } { idx#13 = idx#16 } }  ) always clobbers reg byte a 
Statement [15] if((byte) 0!=*((byte*) print_person::person_name#4 + (byte) print_person::i#2)) goto print_person::@2 [ henriette print_person::person_name#4 print_person::i#2 idx#14 ] ( main:2::print_person:5 [ henriette print_person::person_name#4 print_person::i#2 idx#14 ] { { print_person::person_id#0 = print_person::person_id#2 } }  main:2::print_person:7 [ henriette print_person::person_name#4 print_person::i#2 idx#14 ] { { print_person::person_id#1 = print_person::person_id#2 } { idx#13 = idx#16 } }  ) always clobbers reg byte a 
Statement [16] *((const byte*) SCREEN + (byte) idx#14) ← (byte) ' ' [ henriette idx#14 ] ( main:2::print_person:5 [ henriette idx#14 ] { { print_person::person_id#0 = print_person::person_id#2 } }  main:2::print_person:7 [ henriette idx#14 ] { { print_person::person_id#1 = print_person::person_id#2 } { idx#13 = idx#16 } }  ) always clobbers reg byte a 
Statement [19] *((const byte*) SCREEN + (byte) idx#14) ← *((byte*) print_person::person_name#4 + (byte) print_person::i#2) [ henriette print_person::person_name#4 print_person::i#2 idx#14 ] ( main:2::print_person:5 [ henriette print_person::person_name#4 print_person::i#2 idx#14 ] { { print_person::person_id#0 = print_person::person_id#2 } }  main:2::print_person:7 [ henriette print_person::person_name#4 print_person::i#2 idx#14 ] { { print_person::person_id#1 = print_person::person_id#2 } { idx#13 = idx#16 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ print_person::person_id#2 print_person::person_id#0 print_person::person_id#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ idx#13 idx#16 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[2]:4 [ print_person::person_name#4 ] : zp[2]:4 , 
Potential registers zp[1]:6 [ print_person::i#2 print_person::i#1 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ idx#14 idx#5 idx#6 ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ idx#4 ] : zp[1]:8 , reg byte x , reg byte y , 
Potential registers mem[65] [ jesper ] : mem[65] , 
Potential registers mem[65] [ henriette ] : mem[65] , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_person] 3,003: zp[1]:6 [ print_person::i#2 print_person::i#1 ] 200.2: zp[2]:4 [ print_person::person_name#4 ] 167: zp[1]:2 [ print_person::person_id#2 print_person::person_id#0 print_person::person_id#1 ] 
Uplift Scope [] 2,029.5: zp[1]:7 [ idx#14 idx#5 idx#6 ] 151.5: zp[1]:8 [ idx#4 ] 134.5: zp[1]:3 [ idx#13 idx#16 ] 0: mem[65] [ jesper ] 0: mem[65] [ henriette ] 
Uplift Scope [Person] 
Uplift Scope [main] 

Uplifting [print_person] best 549 combination reg byte y [ print_person::i#2 print_person::i#1 ] zp[2]:4 [ print_person::person_name#4 ] reg byte x [ print_person::person_id#2 print_person::person_id#0 print_person::person_id#1 ] 
Uplifting [] best 467 combination reg byte x [ idx#14 idx#5 idx#6 ] reg byte x [ idx#4 ] reg byte y [ idx#13 idx#16 ] mem[65] [ jesper ] mem[65] [ henriette ] 
Uplifting [Person] best 467 combination 
Uplifting [main] best 467 combination 
Allocated (was zp[2]:4) zp[2]:2 [ print_person::person_name#4 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Example of a struct containing an array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const OFFSET_STRUCT_PERSON_NAME = 1
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] (byte) print_person::person_id#0 ← *((byte*)&(struct Person) jesper) -- vbuxx=_deref_pbuc1 
    ldx jesper
    // [5] call print_person 
    // [9] phi from main to print_person [phi:main->print_person]
  print_person_from_main:
    // [9] phi (byte*) print_person::person_name#4 = (byte*)&(struct Person) jesper+(const byte) OFFSET_STRUCT_PERSON_NAME [phi:main->print_person#0] -- pbuz1=pbuc1 
    lda #<jesper+OFFSET_STRUCT_PERSON_NAME
    sta.z print_person.person_name
    lda #>jesper+OFFSET_STRUCT_PERSON_NAME
    sta.z print_person.person_name+1
    // [9] phi (byte) idx#13 = (byte) 0 [phi:main->print_person#1] -- vbuyy=vbuc1 
    ldy #0
    // [9] phi (byte) print_person::person_id#2 = (byte) print_person::person_id#0 [phi:main->print_person#2] -- register_copy 
    jsr print_person
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte) print_person::person_id#1 ← *((byte*)&(struct Person) henriette) -- vbuxx=_deref_pbuc1 
    ldx henriette
    // [7] call print_person 
    // [9] phi from main::@1 to print_person [phi:main::@1->print_person]
  print_person_from___b1:
    // [9] phi (byte*) print_person::person_name#4 = (byte*)&(struct Person) henriette+(const byte) OFFSET_STRUCT_PERSON_NAME [phi:main::@1->print_person#0] -- pbuz1=pbuc1 
    lda #<henriette+OFFSET_STRUCT_PERSON_NAME
    sta.z print_person.person_name
    lda #>henriette+OFFSET_STRUCT_PERSON_NAME
    sta.z print_person.person_name+1
    // [9] phi (byte) idx#13 = (byte) idx#16 [phi:main::@1->print_person#1] -- register_copy 
    // [9] phi (byte) print_person::person_id#2 = (byte) print_person::person_id#1 [phi:main::@1->print_person#2] -- register_copy 
    jsr print_person
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // print_person
// print_person(byte register(X) person_id, byte* zp(2) person_name)
print_person: {
    .label person_name = 2
    // [10] *((const byte*) SCREEN + (byte) idx#13) ← *((const byte*) DIGIT + (byte) print_person::person_id#2) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda DIGIT,x
    sta SCREEN,y
    // [11] (byte) idx#4 ← ++ (byte) idx#13 -- vbuxx=_inc_vbuyy 
    tya
    tax
    inx
    // [12] *((const byte*) SCREEN + (byte) idx#4) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // [13] (byte) idx#5 ← ++ (byte) idx#4 -- vbuxx=_inc_vbuxx 
    inx
    // [14] phi from print_person to print_person::@1 [phi:print_person->print_person::@1]
  __b1_from_print_person:
    // [14] phi (byte) idx#14 = (byte) idx#5 [phi:print_person->print_person::@1#0] -- register_copy 
    // [14] phi (byte) print_person::i#2 = (byte) 0 [phi:print_person->print_person::@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // print_person::@1
  __b1:
    // [15] if((byte) 0!=*((byte*) print_person::person_name#4 + (byte) print_person::i#2)) goto print_person::@2 -- vbuc1_neq_pbuz1_derefidx_vbuyy_then_la1 
    lda (person_name),y
    cmp #0
    bne __b2
    jmp __b3
    // print_person::@3
  __b3:
    // [16] *((const byte*) SCREEN + (byte) idx#14) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // [17] (byte) idx#16 ← ++ (byte) idx#14 -- vbuyy=_inc_vbuxx 
    txa
    tay
    iny
    jmp __breturn
    // print_person::@return
  __breturn:
    // [18] return 
    rts
    // print_person::@2
  __b2:
    // [19] *((const byte*) SCREEN + (byte) idx#14) ← *((byte*) print_person::person_name#4 + (byte) print_person::i#2) -- pbuc1_derefidx_vbuxx=pbuz1_derefidx_vbuyy 
    lda (person_name),y
    sta SCREEN,x
    // [20] (byte) idx#6 ← ++ (byte) idx#14 -- vbuxx=_inc_vbuxx 
    inx
    // [21] (byte) print_person::i#1 ← ++ (byte) print_person::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [14] phi from print_person::@2 to print_person::@1 [phi:print_person::@2->print_person::@1]
  __b1_from___b2:
    // [14] phi (byte) idx#14 = (byte) idx#6 [phi:print_person::@2->print_person::@1#0] -- register_copy 
    // [14] phi (byte) print_person::i#2 = (byte) print_person::i#1 [phi:print_person::@2->print_person::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
  DIGIT: .text "0123456789"
  .byte 0
  jesper: .byte 4
  .text "jesper"
  .byte 0
  .fill $39, 0
  henriette: .byte 7
  .text "henriette"
  .byte 0
  .fill $36, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction print_person_from_main:
Removing instruction __b1:
Removing instruction print_person_from___b1:
Removing instruction __breturn:
Removing instruction __b1_from_print_person:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) DIGIT[]  = (byte*) "0123456789"
(const byte) OFFSET_STRUCT_PERSON_NAME = (byte) 1
(byte) Person::id
(const byte*) Person::name[(number) $40]  = { fill( $40, 0) }
(const byte*) SCREEN = (byte*) 1024
(struct Person) henriette loadstore mem[65] = { id: (byte) 7, name: (byte*) "henriette" }
(byte) idx
(byte) idx#13 reg byte y 106.5
(byte) idx#14 reg byte x 826.5
(byte) idx#16 reg byte y 28.0
(byte) idx#4 reg byte x 151.5
(byte) idx#5 reg byte x 202.0
(byte) idx#6 reg byte x 1001.0
(struct Person) jesper loadstore mem[65] = { id: (byte) 4, name: (byte*) "jesper" }
(void()) main()
(label) main::@1
(label) main::@return
(void()) print_person((byte) print_person::person_id , (byte*) print_person::person_name)
(label) print_person::@1
(label) print_person::@2
(label) print_person::@3
(label) print_person::@return
(byte) print_person::i
(byte) print_person::i#1 reg byte y 2002.0
(byte) print_person::i#2 reg byte y 1001.0
(struct Person) print_person::person
(byte) print_person::person_id
(byte) print_person::person_id#0 reg byte x 22.0
(byte) print_person::person_id#1 reg byte x 22.0
(byte) print_person::person_id#2 reg byte x 123.0
(byte*) print_person::person_name
(byte*) print_person::person_name#4 person_name zp[2]:2 200.2

reg byte x [ print_person::person_id#2 print_person::person_id#0 print_person::person_id#1 ]
reg byte y [ idx#13 idx#16 ]
zp[2]:2 [ print_person::person_name#4 ]
reg byte y [ print_person::i#2 print_person::i#1 ]
reg byte x [ idx#14 idx#5 idx#6 ]
reg byte x [ idx#4 ]
mem[65] [ jesper ]
mem[65] [ henriette ]


FINAL ASSEMBLER
Score: 386

  // File Comments
// Example of a struct containing an array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const OFFSET_STRUCT_PERSON_NAME = 1
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // print_person(jesper)
    // [4] (byte) print_person::person_id#0 ← *((byte*)&(struct Person) jesper) -- vbuxx=_deref_pbuc1 
    ldx jesper
    // [5] call print_person 
    // [9] phi from main to print_person [phi:main->print_person]
    // [9] phi (byte*) print_person::person_name#4 = (byte*)&(struct Person) jesper+(const byte) OFFSET_STRUCT_PERSON_NAME [phi:main->print_person#0] -- pbuz1=pbuc1 
    lda #<jesper+OFFSET_STRUCT_PERSON_NAME
    sta.z print_person.person_name
    lda #>jesper+OFFSET_STRUCT_PERSON_NAME
    sta.z print_person.person_name+1
    // [9] phi (byte) idx#13 = (byte) 0 [phi:main->print_person#1] -- vbuyy=vbuc1 
    ldy #0
    // [9] phi (byte) print_person::person_id#2 = (byte) print_person::person_id#0 [phi:main->print_person#2] -- register_copy 
    jsr print_person
    // main::@1
    // print_person(henriette)
    // [6] (byte) print_person::person_id#1 ← *((byte*)&(struct Person) henriette) -- vbuxx=_deref_pbuc1 
    ldx henriette
    // [7] call print_person 
    // [9] phi from main::@1 to print_person [phi:main::@1->print_person]
    // [9] phi (byte*) print_person::person_name#4 = (byte*)&(struct Person) henriette+(const byte) OFFSET_STRUCT_PERSON_NAME [phi:main::@1->print_person#0] -- pbuz1=pbuc1 
    lda #<henriette+OFFSET_STRUCT_PERSON_NAME
    sta.z print_person.person_name
    lda #>henriette+OFFSET_STRUCT_PERSON_NAME
    sta.z print_person.person_name+1
    // [9] phi (byte) idx#13 = (byte) idx#16 [phi:main::@1->print_person#1] -- register_copy 
    // [9] phi (byte) print_person::person_id#2 = (byte) print_person::person_id#1 [phi:main::@1->print_person#2] -- register_copy 
    jsr print_person
    // main::@return
    // }
    // [8] return 
    rts
}
  // print_person
// print_person(byte register(X) person_id, byte* zp(2) person_name)
print_person: {
    .label person_name = 2
    // SCREEN[idx++] = DIGIT[person.id]
    // [10] *((const byte*) SCREEN + (byte) idx#13) ← *((const byte*) DIGIT + (byte) print_person::person_id#2) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda DIGIT,x
    sta SCREEN,y
    // SCREEN[idx++] = DIGIT[person.id];
    // [11] (byte) idx#4 ← ++ (byte) idx#13 -- vbuxx=_inc_vbuyy 
    tya
    tax
    inx
    // SCREEN[idx++] = ' '
    // [12] *((const byte*) SCREEN + (byte) idx#4) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // SCREEN[idx++] = ' ';
    // [13] (byte) idx#5 ← ++ (byte) idx#4 -- vbuxx=_inc_vbuxx 
    inx
    // [14] phi from print_person to print_person::@1 [phi:print_person->print_person::@1]
    // [14] phi (byte) idx#14 = (byte) idx#5 [phi:print_person->print_person::@1#0] -- register_copy 
    // [14] phi (byte) print_person::i#2 = (byte) 0 [phi:print_person->print_person::@1#1] -- vbuyy=vbuc1 
    ldy #0
    // print_person::@1
  __b1:
    // for(byte i=0; person.name[i]; i++)
    // [15] if((byte) 0!=*((byte*) print_person::person_name#4 + (byte) print_person::i#2)) goto print_person::@2 -- vbuc1_neq_pbuz1_derefidx_vbuyy_then_la1 
    lda (person_name),y
    cmp #0
    bne __b2
    // print_person::@3
    // SCREEN[idx++] = ' '
    // [16] *((const byte*) SCREEN + (byte) idx#14) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // SCREEN[idx++] = ' ';
    // [17] (byte) idx#16 ← ++ (byte) idx#14 -- vbuyy=_inc_vbuxx 
    txa
    tay
    iny
    // print_person::@return
    // }
    // [18] return 
    rts
    // print_person::@2
  __b2:
    // SCREEN[idx++] = person.name[i]
    // [19] *((const byte*) SCREEN + (byte) idx#14) ← *((byte*) print_person::person_name#4 + (byte) print_person::i#2) -- pbuc1_derefidx_vbuxx=pbuz1_derefidx_vbuyy 
    lda (person_name),y
    sta SCREEN,x
    // SCREEN[idx++] = person.name[i];
    // [20] (byte) idx#6 ← ++ (byte) idx#14 -- vbuxx=_inc_vbuxx 
    inx
    // for(byte i=0; person.name[i]; i++)
    // [21] (byte) print_person::i#1 ← ++ (byte) print_person::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [14] phi from print_person::@2 to print_person::@1 [phi:print_person::@2->print_person::@1]
    // [14] phi (byte) idx#14 = (byte) idx#6 [phi:print_person::@2->print_person::@1#0] -- register_copy 
    // [14] phi (byte) print_person::i#2 = (byte) print_person::i#1 [phi:print_person::@2->print_person::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
  DIGIT: .text "0123456789"
  .byte 0
  jesper: .byte 4
  .text "jesper"
  .byte 0
  .fill $39, 0
  henriette: .byte 7
  .text "henriette"
  .byte 0
  .fill $36, 0

