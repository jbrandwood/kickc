@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [5] (word) main::line#6 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@3/(word) main::line#2 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [6] (byte) main::c#2 ← phi( main::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@2/(byte) main::c#1 )
  [7] (word~) main::$0 ← (word) main::line#6 + (byte) main::c#2
  [8] (word~) main::$2 ← (word) main::line#6 + (byte) main::c#2
  [9] *((const byte*) main::screen#0 + (word~) main::$0) ← *((const byte*) main::screen#0+(byte/signed byte/word/signed word/dword/signed dword) $28 + (word~) main::$2)
  [10] (byte) main::c#1 ← ++ (byte) main::c#2
  [11] if((byte) main::c#1<(byte/signed byte/word/signed word/dword/signed dword) $28) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [12] (word) main::line#2 ← (word) main::line#6 + (byte/signed byte/word/signed word/dword/signed dword) $28
  [13] if((word) main::line#2<(byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) $18) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  [14] (byte) main::c1#2 ← phi( main::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@4/(byte) main::c1#1 )
  [15] (word~) main::$6 ← (word) main::line#2 + (byte) main::c1#2
  [16] *((const byte*) main::screen#0 + (word~) main::$6) ← (byte) ' '
  [17] (byte) main::c1#1 ← ++ (byte) main::c1#2
  [18] if((byte) main::c1#1<(byte/signed byte/word/signed word/dword/signed dword) $28) goto main::@4
  to:main::@return
main::@return: scope:[main]  from main::@4
  [19] return 
  to:@return
