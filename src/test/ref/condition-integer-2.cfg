@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) idx#8 ← phi( main/(byte) 0 main::@1/(byte) idx#1 )
  [5] (byte) main::i#2 ← phi( main/(byte) 2 main::@1/(byte) main::i#1 )
  [6] *((const byte*) SCREEN#0 + (byte) idx#8) ← (byte) main::i#2
  [7] (byte) idx#1 ← ++ (byte) idx#8
  [8] (byte) main::i#1 ← -- (byte) main::i#2
  [9] if((byte) 0!=(byte) main::i#1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [10] *((const byte*) SCREEN#0 + (byte) idx#1) ← (byte) ' '
  [11] (byte) idx#2 ← ++ (byte) idx#1
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [12] (byte) idx#10 ← phi( main::@2/(byte) idx#2 main::@4/(byte) idx#3 )
  [12] (byte) main::j#2 ← phi( main::@2/(byte) 3 main::@4/(byte) main::j#1 )
  [13] (byte) main::j#1 ← -- (byte) main::j#2
  [14] if((byte) 0!=(byte) main::j#1) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@3
  [15] *((const byte*) SCREEN#0 + (byte) idx#10) ← (byte) ' '
  [16] (byte) idx#4 ← ++ (byte) idx#10
  to:main::@6
main::@6: scope:[main]  from main::@5 main::@6
  [17] (byte) idx#12 ← phi( main::@5/(byte) idx#4 main::@6/(byte) idx#13 )
  [17] (byte) main::k#2 ← phi( main::@5/(byte) 2 main::@6/(byte) main::k#1 )
  [18] *((const byte*) SCREEN#0 + (byte) idx#12) ← (byte) main::k#2
  [19] (byte) idx#13 ← ++ (byte) idx#12
  [20] (byte) main::k#1 ← -- (byte) main::k#2
  [21] if((byte) 0!=(byte) main::k#1) goto main::@6
  to:main::@return
main::@return: scope:[main]  from main::@6
  [22] return 
  to:@return
main::@4: scope:[main]  from main::@3
  [23] *((const byte*) SCREEN#0 + (byte) idx#10) ← (byte) main::j#1
  [24] (byte) idx#3 ← ++ (byte) idx#10
  to:main::@3
