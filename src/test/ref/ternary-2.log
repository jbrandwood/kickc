Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@9
Culled Empty Block (label) main::@10

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte*) main::SCREEN ← ((byte*)) (number) $400
  if(true) goto main::@1
  to:main::@2
main::@1: scope:[main]  from main
  (byte~) main::$1 ← (byte) 'a'
  to:main::@3
main::@2: scope:[main]  from main
  (byte~) main::$0 ← (byte) 'b'
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2
  (byte~) main::$2 ← phi( main::@1/(byte~) main::$1 main::@2/(byte~) main::$0 )
  *((byte*) main::SCREEN + (number) 0) ← (byte~) main::$2
  if(false) goto main::@4
  to:main::@5
main::@4: scope:[main]  from main::@3
  (byte~) main::$4 ← (byte) 'a'
  to:main::@6
main::@5: scope:[main]  from main::@3
  (byte~) main::$3 ← (byte) 'b'
  to:main::@6
main::@6: scope:[main]  from main::@4 main::@5
  (byte~) main::$5 ← phi( main::@4/(byte~) main::$4 main::@5/(byte~) main::$3 )
  *((byte*) main::SCREEN + (number) 1) ← (byte~) main::$5
  to:main::@return
main::@return: scope:[main]  from main::@6
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$2
(byte~) main::$3
(byte~) main::$4
(byte~) main::$5
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte*) main::SCREEN

Adding number conversion cast (unumber) 0 in *((byte*) main::SCREEN + (number) 0) ← (byte~) main::$2
Adding number conversion cast (unumber) 1 in *((byte*) main::SCREEN + (number) 1) ← (byte~) main::$5
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) main::SCREEN ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant (const byte*) main::SCREEN = (byte*) 1024
Constant (const byte) main::$1 = 'a'
Constant (const byte) main::$0 = 'b'
Constant (const byte) main::$4 = 'a'
Constant (const byte) main::$3 = 'b'
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [1] if(true) goto main::@1
if() condition always false - eliminating [6] if(false) goto main::@4
Successful SSA optimization Pass2ConstantIfs
Simplifying expression containing zero main::SCREEN in [5] *((const byte*) main::SCREEN + (byte) 0) ← (byte~) main::$2
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing PHI-reference to removed block (main::@2) in block main::@3
Removing unused block main::@2
Removing PHI-reference to removed block (main::@4) in block main::@6
Removing unused block main::@4
Successful SSA optimization Pass2EliminateUnusedBlocks
Identical Phi Values (byte~) main::$2 (const byte) main::$1
Identical Phi Values (byte~) main::$5 (const byte) main::$3
Successful SSA optimization Pass2IdenticalPhiElimination
Eliminating unused constant (const byte) main::$0
Eliminating unused constant (const byte) main::$4
Successful SSA optimization PassNEliminateUnusedVars
Constant inlined main::$1 = (byte) 'a'
Constant inlined main::$3 = (byte) 'b'
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@5
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@1
Culled Empty Block (label) main::@5
Renumbering block main::@3 to main::@1
Renumbering block main::@6 to main::@2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main
  [5] *((const byte*) main::SCREEN) ← (byte) 'a'
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] *((const byte*) main::SCREEN+(byte) 1) ← (byte) 'b'
  to:main::@return
main::@return: scope:[main]  from main::@2
  [7] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests the ternary operator - when the condition is constant
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    jmp __b1
    // main::@1
  __b1:
    // [5] *((const byte*) main::SCREEN) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta SCREEN
    jmp __b2
    // main::@2
  __b2:
    // [6] *((const byte*) main::SCREEN+(byte) 1) ← (byte) 'b' -- _deref_pbuc1=vbuc2 
    lda #'b'
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] *((const byte*) main::SCREEN) ← (byte) 'a' [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) main::SCREEN+(byte) 1) ← (byte) 'b' [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 66 combination 
Uplifting [] best 66 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests the ternary operator - when the condition is constant
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    jmp __b1
    // main::@1
  __b1:
    // [5] *((const byte*) main::SCREEN) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta SCREEN
    jmp __b2
    // main::@2
  __b2:
    // [6] *((const byte*) main::SCREEN+(byte) 1) ← (byte) 'b' -- _deref_pbuc1=vbuc2 
    lda #'b'
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(const byte*) main::SCREEN SCREEN = (byte*) 1024



FINAL ASSEMBLER
Score: 18

  // File Comments
// Tests the ternary operator - when the condition is constant
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    // main::@1
    // SCREEN[0] = true?'a':'b'
    // [5] *((const byte*) main::SCREEN) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta SCREEN
    // main::@2
    // SCREEN[1] = false?'a':'b'
    // [6] *((const byte*) main::SCREEN+(byte) 1) ← (byte) 'b' -- _deref_pbuc1=vbuc2 
    lda #'b'
    sta SCREEN+1
    // main::@return
    // }
    // [7] return 
    rts
}
  // File Data

