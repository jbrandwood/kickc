Culled Empty Block (label) @1
Culled Empty Block (label) printline::@4
Culled Empty Block (label) printline::@3
Culled Empty Block (label) printline::@5
Culled Empty Block (label) printline::@6
Calling convention STACK_CALL adding prepare/execute/finalize for call printline 
Calling convention STACK_CALL adding prepare/execute/finalize for call main 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@2

__stackcall (void()) main()
main: scope:[main]  from
  (byte) main::val#0 ← (byte) 0
  (byte) main::val#1 ← *((const byte*) SCREEN)
  callexecute printline 
  *((const byte*) SCREEN + (number) $50) ← (byte) main::val#1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

__stackcall (void()) printline()
printline: scope:[printline]  from
  (byte) printline::i#0 ← (byte) 0
  to:printline::@1
printline::@1: scope:[printline]  from printline printline::@2
  (byte) printline::i#2 ← phi( printline/(byte) printline::i#0 printline::@2/(byte) printline::i#1 )
  (bool~) printline::$0 ← (byte) printline::i#2 < (number) $28
  if((bool~) printline::$0) goto printline::@2
  to:printline::@return
printline::@2: scope:[printline]  from printline::@1
  (byte) printline::i#3 ← phi( printline::@1/(byte) printline::i#2 )
  *((const byte*) SCREEN + (byte) printline::i#3) ← (byte) '*'
  (byte) printline::i#1 ← ++ (byte) printline::i#3
  to:printline::@1
printline::@return: scope:[printline]  from printline::@1
  return 
  to:@return
@2: scope:[]  from @begin
  callexecute main 
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @2
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*)(number) $400
__stackcall (void()) main()
(label) main::@return
(byte) main::val
(byte) main::val#0
(byte) main::val#1
__stackcall (void()) printline()
(bool~) printline::$0
(label) printline::@1
(label) printline::@2
(label) printline::@return
(byte) printline::i
(byte) printline::i#0
(byte) printline::i#1
(byte) printline::i#2
(byte) printline::i#3

Adding number conversion cast (unumber) $50 in *((const byte*) SCREEN + (number) $50) ← (byte) main::val#1
Adding number conversion cast (unumber) $28 in (bool~) printline::$0 ← (byte) printline::i#2 < (number) $28
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $50
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $50
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias printline::i#2 = printline::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) printline::$0 [8] if((byte) printline::i#2<(byte) $28) goto printline::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::val#0 = 0
Constant (const byte) printline::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte) main::val#0
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings (const byte) printline::i#0
Constant inlined printline::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+$50)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of printline
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to printline:12 

Created 1 initial phi equivalence classes
Coalesced [10] printline::i#4 ← printline::i#1
Coalesced down to 1 phi equivalence classes
Renumbering block @2 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of printline

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] callexecute main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

__stackcall (void()) printline()
printline: scope:[printline]  from
  [4] phi()
  to:printline::@1
printline::@1: scope:[printline]  from printline printline::@2
  [5] (byte) printline::i#2 ← phi( printline/(byte) 0 printline::@2/(byte) printline::i#1 )
  [6] if((byte) printline::i#2<(byte) $28) goto printline::@2
  to:printline::@return
printline::@return: scope:[printline]  from printline::@1
  [7] return 
  to:@return
printline::@2: scope:[printline]  from printline::@1
  [8] *((const byte*) SCREEN + (byte) printline::i#2) ← (byte) '*'
  [9] (byte) printline::i#1 ← ++ (byte) printline::i#2
  to:printline::@1

__stackcall (void()) main()
main: scope:[main]  from
  [10] (byte) main::val#1 ← *((const byte*) SCREEN)
  [11] callexecute printline 
  [12] *((const byte*) SCREEN+(byte) $50) ← (byte) main::val#1
  to:main::@return
main::@return: scope:[main]  from main
  [13] return 
  to:@return


VARIABLE REGISTER WEIGHTS
__stackcall (void()) main()
(byte) main::val
(byte) main::val#1 11.0
__stackcall (void()) printline()
(byte) printline::i
(byte) printline::i#1 2002.0
(byte) printline::i#2 1334.6666666666667

Initial phi equivalence classes
[ printline::i#2 printline::i#1 ]
Added variable main::val#1 to live range equivalence class [ main::val#1 ]
Complete equivalence classes
[ printline::i#2 printline::i#1 ]
[ main::val#1 ]
Allocated zp[1]:2 [ printline::i#2 printline::i#1 ]
Allocated zp[1]:3 [ main::val#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test a procedure with calling convention stack
// Illustrates live ranges for main::val and printline::i
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] callexecute main  -- jsr 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // printline
printline: {
    .label i = 2
    // [5] phi from printline to printline::@1 [phi:printline->printline::@1]
  __b1_from_printline:
    // [5] phi (byte) printline::i#2 = (byte) 0 [phi:printline->printline::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printline::@1
  __b1:
    // [6] if((byte) printline::i#2<(byte) $28) goto printline::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #$28
    bcc __b2
    jmp __breturn
    // printline::@return
  __breturn:
    // [7] return 
    rts
    // printline::@2
  __b2:
    // [8] *((const byte*) SCREEN + (byte) printline::i#2) ← (byte) '*' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'*'
    ldy.z i
    sta SCREEN,y
    // [9] (byte) printline::i#1 ← ++ (byte) printline::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [5] phi from printline::@2 to printline::@1 [phi:printline::@2->printline::@1]
  __b1_from___b2:
    // [5] phi (byte) printline::i#2 = (byte) printline::i#1 [phi:printline::@2->printline::@1#0] -- register_copy 
    jmp __b1
}
  // main
main: {
    .label val = 3
    // [10] (byte) main::val#1 ← *((const byte*) SCREEN) -- vbuz1=_deref_pbuc1 
    lda SCREEN
    sta.z val
    // [11] callexecute printline  -- jsr 
    jsr printline
    // [12] *((const byte*) SCREEN+(byte) $50) ← (byte) main::val#1 -- _deref_pbuc1=vbuz1 
    lda.z val
    sta SCREEN+$50
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [8] *((const byte*) SCREEN + (byte) printline::i#2) ← (byte) '*' [ printline::i#2 ] ( main:2::printline:11 [ main::val#1 printline::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::val#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:2 [ printline::i#2 printline::i#1 ]
Statement [8] *((const byte*) SCREEN + (byte) printline::i#2) ← (byte) '*' [ printline::i#2 ] ( main:2::printline:11 [ main::val#1 printline::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ printline::i#2 printline::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::val#1 ] : zp[1]:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [printline] 3,336.67: zp[1]:2 [ printline::i#2 printline::i#1 ] 
Uplift Scope [main] 11: zp[1]:3 [ main::val#1 ] 
Uplift Scope [] 

Uplifting [printline] best 292 combination reg byte x [ printline::i#2 printline::i#1 ] 
Uplifting [main] best 286 combination reg byte y [ main::val#1 ] 
Uplifting [] best 286 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a procedure with calling convention stack
// Illustrates live ranges for main::val and printline::i
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] callexecute main  -- jsr 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // printline
printline: {
    // [5] phi from printline to printline::@1 [phi:printline->printline::@1]
  __b1_from_printline:
    // [5] phi (byte) printline::i#2 = (byte) 0 [phi:printline->printline::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // printline::@1
  __b1:
    // [6] if((byte) printline::i#2<(byte) $28) goto printline::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc __b2
    jmp __breturn
    // printline::@return
  __breturn:
    // [7] return 
    rts
    // printline::@2
  __b2:
    // [8] *((const byte*) SCREEN + (byte) printline::i#2) ← (byte) '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta SCREEN,x
    // [9] (byte) printline::i#1 ← ++ (byte) printline::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] phi from printline::@2 to printline::@1 [phi:printline::@2->printline::@1]
  __b1_from___b2:
    // [5] phi (byte) printline::i#2 = (byte) printline::i#1 [phi:printline::@2->printline::@1#0] -- register_copy 
    jmp __b1
}
  // main
main: {
    // [10] (byte) main::val#1 ← *((const byte*) SCREEN) -- vbuyy=_deref_pbuc1 
    ldy SCREEN
    // [11] callexecute printline  -- jsr 
    jsr printline
    // [12] *((const byte*) SCREEN+(byte) $50) ← (byte) main::val#1 -- _deref_pbuc1=vbuyy 
    sty SCREEN+$50
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_printline:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*) 1024
__stackcall (void()) main()
(label) main::@return
(byte) main::val
(byte) main::val#1 reg byte y 11.0
__stackcall (void()) printline()
(label) printline::@1
(label) printline::@2
(label) printline::@return
(byte) printline::i
(byte) printline::i#1 reg byte x 2002.0
(byte) printline::i#2 reg byte x 1334.6666666666667

reg byte x [ printline::i#2 printline::i#1 ]
reg byte y [ main::val#1 ]


FINAL ASSEMBLER
Score: 211

  // File Comments
// Test a procedure with calling convention stack
// Illustrates live ranges for main::val and printline::i
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] callexecute main  -- jsr 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // printline
printline: {
    // [5] phi from printline to printline::@1 [phi:printline->printline::@1]
    // [5] phi (byte) printline::i#2 = (byte) 0 [phi:printline->printline::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // printline::@1
  __b1:
    // for(char i=0; i<40; i++)
    // [6] if((byte) printline::i#2<(byte) $28) goto printline::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc __b2
    // printline::@return
    // }
    // [7] return 
    rts
    // printline::@2
  __b2:
    // SCREEN[i] = '*'
    // [8] *((const byte*) SCREEN + (byte) printline::i#2) ← (byte) '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta SCREEN,x
    // for(char i=0; i<40; i++)
    // [9] (byte) printline::i#1 ← ++ (byte) printline::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] phi from printline::@2 to printline::@1 [phi:printline::@2->printline::@1]
    // [5] phi (byte) printline::i#2 = (byte) printline::i#1 [phi:printline::@2->printline::@1#0] -- register_copy 
    jmp __b1
}
  // main
main: {
    // val = *SCREEN
    // [10] (byte) main::val#1 ← *((const byte*) SCREEN) -- vbuyy=_deref_pbuc1 
    ldy SCREEN
    // printline()
    // [11] callexecute printline  -- jsr 
    jsr printline
    // SCREEN[80] = val
    // [12] *((const byte*) SCREEN+(byte) $50) ← (byte) main::val#1 -- _deref_pbuc1=vbuyy 
    sty SCREEN+$50
    // main::@return
    // }
    // [13] return 
    rts
}
  // File Data

