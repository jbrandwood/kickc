Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  idx_ssa_g#7 = phi( __start::@1/idx_ssa_g#13 )
  main::idx_ssa_l#0 = 0
  main::idx_nssa_l = 0
  SCREEN1[idx_ssa_g#7] = 'C'
  idx_ssa_g#0 = ++ idx_ssa_g#7
  main::i#0 = 'M'
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::idx_ssa_l#9 = phi( main/main::idx_ssa_l#0, main::@1/main::idx_ssa_l#9 )
  idx_ssa_g#8 = phi( main/idx_ssa_g#0, main::@1/idx_ssa_g#1 )
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  SCREEN1[idx_ssa_g#8] = main::i#2
  idx_ssa_g#1 = ++ idx_ssa_g#8
  main::i#1 = main::i#2 + rangenext('M','L')
  main::$0 = main::i#1 != rangelast('M','L')
  if(main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::idx_ssa_l#8 = phi( main::@1/main::idx_ssa_l#9 )
  idx_ssa_g#9 = phi( main::@1/idx_ssa_g#1 )
  SCREEN1[idx_ssa_g#9] = '!'
  idx_ssa_g#2 = ++ idx_ssa_g#9
  SCREEN2[idx_nssa_g] = 'C'
  idx_nssa_g = ++ idx_nssa_g
  main::i1#0 = 'M'
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  idx_ssa_g#19 = phi( main::@2/idx_ssa_g#2, main::@3/idx_ssa_g#19 )
  main::idx_ssa_l#7 = phi( main::@2/main::idx_ssa_l#8, main::@3/main::idx_ssa_l#7 )
  main::i1#2 = phi( main::@2/main::i1#0, main::@3/main::i1#1 )
  SCREEN2[idx_nssa_g] = main::i1#2
  idx_nssa_g = ++ idx_nssa_g
  main::i1#1 = main::i1#2 + rangenext('M','L')
  main::$1 = main::i1#1 != rangelast('M','L')
  if(main::$1) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  idx_ssa_g#18 = phi( main::@3/idx_ssa_g#19 )
  main::idx_ssa_l#4 = phi( main::@3/main::idx_ssa_l#7 )
  SCREEN2[idx_nssa_g] = '!'
  idx_nssa_g = ++ idx_nssa_g
  SCREEN3[main::idx_ssa_l#4] = 'C'
  main::idx_ssa_l#1 = ++ main::idx_ssa_l#4
  main::i2#0 = 'M'
  to:main::@5
main::@5: scope:[main]  from main::@4 main::@5
  idx_ssa_g#17 = phi( main::@4/idx_ssa_g#18, main::@5/idx_ssa_g#17 )
  main::idx_ssa_l#5 = phi( main::@4/main::idx_ssa_l#1, main::@5/main::idx_ssa_l#2 )
  main::i2#2 = phi( main::@4/main::i2#0, main::@5/main::i2#1 )
  SCREEN3[main::idx_ssa_l#5] = main::i2#2
  main::idx_ssa_l#2 = ++ main::idx_ssa_l#5
  main::i2#1 = main::i2#2 + rangenext('M','L')
  main::$2 = main::i2#1 != rangelast('M','L')
  if(main::$2) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@5
  idx_ssa_g#16 = phi( main::@5/idx_ssa_g#17 )
  main::idx_ssa_l#6 = phi( main::@5/main::idx_ssa_l#2 )
  SCREEN3[main::idx_ssa_l#6] = '!'
  main::idx_ssa_l#3 = ++ main::idx_ssa_l#6
  SCREEN4[main::idx_nssa_l] = 'C'
  main::idx_nssa_l = ++ main::idx_nssa_l
  main::i3#0 = 'M'
  to:main::@7
main::@7: scope:[main]  from main::@6 main::@7
  idx_ssa_g#15 = phi( main::@6/idx_ssa_g#16, main::@7/idx_ssa_g#15 )
  main::i3#2 = phi( main::@6/main::i3#0, main::@7/main::i3#1 )
  SCREEN4[main::idx_nssa_l] = main::i3#2
  main::idx_nssa_l = ++ main::idx_nssa_l
  main::i3#1 = main::i3#2 + rangenext('M','L')
  main::$3 = main::i3#1 != rangelast('M','L')
  if(main::$3) goto main::@7
  to:main::@8
main::@8: scope:[main]  from main::@7
  idx_ssa_g#14 = phi( main::@7/idx_ssa_g#15 )
  SCREEN4[main::idx_nssa_l] = '!'
  main::idx_nssa_l = ++ main::idx_nssa_l
  to:main::@return
main::@return: scope:[main]  from main::@8
  idx_ssa_g#10 = phi( main::@8/idx_ssa_g#14 )
  idx_ssa_g#3 = idx_ssa_g#10
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  idx_ssa_g#4 = 0
  idx_nssa_g = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  idx_ssa_g#13 = phi( __start::__init1/idx_ssa_g#4 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  idx_ssa_g#11 = phi( __start::@1/idx_ssa_g#3 )
  idx_ssa_g#5 = idx_ssa_g#11
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  idx_ssa_g#12 = phi( __start::@2/idx_ssa_g#5 )
  idx_ssa_g#6 = idx_ssa_g#12
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN1 = (byte*)$400
const nomodify byte* SCREEN2 = (byte*)$400+$28
const nomodify byte* SCREEN3 = (byte*)$400+$50
const nomodify byte* SCREEN4 = (byte*)$400+$78
void __start()
byte idx_nssa_g loadstore
byte idx_ssa_g
byte idx_ssa_g#0
byte idx_ssa_g#1
byte idx_ssa_g#10
byte idx_ssa_g#11
byte idx_ssa_g#12
byte idx_ssa_g#13
byte idx_ssa_g#14
byte idx_ssa_g#15
byte idx_ssa_g#16
byte idx_ssa_g#17
byte idx_ssa_g#18
byte idx_ssa_g#19
byte idx_ssa_g#2
byte idx_ssa_g#3
byte idx_ssa_g#4
byte idx_ssa_g#5
byte idx_ssa_g#6
byte idx_ssa_g#7
byte idx_ssa_g#8
byte idx_ssa_g#9
void main()
bool~ main::$0
bool~ main::$1
bool~ main::$2
bool~ main::$3
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i1
byte main::i1#0
byte main::i1#1
byte main::i1#2
byte main::i2
byte main::i2#0
byte main::i2#1
byte main::i2#2
byte main::i3
byte main::i3#0
byte main::i3#1
byte main::i3#2
byte main::idx_nssa_l loadstore
byte main::idx_ssa_l
byte main::idx_ssa_l#0
byte main::idx_ssa_l#1
byte main::idx_ssa_l#2
byte main::idx_ssa_l#3
byte main::idx_ssa_l#4
byte main::idx_ssa_l#5
byte main::idx_ssa_l#6
byte main::idx_ssa_l#7
byte main::idx_ssa_l#8
byte main::idx_ssa_l#9

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias idx_ssa_g#1 = idx_ssa_g#9 
Alias main::idx_ssa_l#8 = main::idx_ssa_l#9 
Alias main::idx_ssa_l#4 = main::idx_ssa_l#7 
Alias idx_ssa_g#18 = idx_ssa_g#19 
Alias main::idx_ssa_l#2 = main::idx_ssa_l#6 
Alias idx_ssa_g#16 = idx_ssa_g#17 
Alias idx_ssa_g#10 = idx_ssa_g#14 idx_ssa_g#15 idx_ssa_g#3 
Alias idx_ssa_g#13 = idx_ssa_g#4 
Alias idx_ssa_g#11 = idx_ssa_g#5 idx_ssa_g#12 idx_ssa_g#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values idx_ssa_g#7 idx_ssa_g#13
Identical Phi Values main::idx_ssa_l#8 main::idx_ssa_l#0
Identical Phi Values main::idx_ssa_l#4 main::idx_ssa_l#8
Identical Phi Values idx_ssa_g#18 idx_ssa_g#2
Identical Phi Values idx_ssa_g#16 idx_ssa_g#18
Identical Phi Values idx_ssa_g#10 idx_ssa_g#16
Identical Phi Values idx_ssa_g#11 idx_ssa_g#10
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$0 [11] if(main::i#1!=rangelast('M','L')) goto main::@1
Simple Condition main::$1 [22] if(main::i1#1!=rangelast('M','L')) goto main::@3
Simple Condition main::$2 [33] if(main::i2#1!=rangelast('M','L')) goto main::@5
Simple Condition main::$3 [44] if(main::i3#1!=rangelast('M','L')) goto main::@7
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::idx_ssa_l#0 = 0
Constant main::i#0 = 'M'
Constant main::i1#0 = 'M'
Constant main::i2#0 = 'M'
Constant main::i3#0 = 'M'
Constant idx_ssa_g#13 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [9] main::i#1 = -- main::i#2 to --
Resolved ranged comparison value [11] if(main::i#1!=rangelast('M','L')) goto main::@1 to 'L'-1
Resolved ranged next value [20] main::i1#1 = -- main::i1#2 to --
Resolved ranged comparison value [22] if(main::i1#1!=rangelast('M','L')) goto main::@3 to 'L'-1
Resolved ranged next value [31] main::i2#1 = -- main::i2#2 to --
Resolved ranged comparison value [33] if(main::i2#1!=rangelast('M','L')) goto main::@5 to 'L'-1
Resolved ranged next value [42] main::i3#1 = -- main::i3#2 to --
Resolved ranged comparison value [44] if(main::i3#1!=rangelast('M','L')) goto main::@7 to 'L'-1
Simplifying expression containing zero SCREEN1 in [3] SCREEN1[idx_ssa_g#13] = 'C'
Simplifying expression containing zero SCREEN3 in [25] SCREEN3[main::idx_ssa_l#0] = 'C'
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable idx_ssa_g#2 and assignment [9] idx_ssa_g#2 = ++ idx_ssa_g#1
Eliminating unused variable main::idx_ssa_l#3 and assignment [27] main::idx_ssa_l#3 = ++ main::idx_ssa_l#2
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 'L'-1 in if(main::i#1!='L'-1) goto main::@1
Adding number conversion cast (unumber) 1 in if(main::i#1!=(unumber)'L'-1) goto main::@1
Adding number conversion cast (unumber) 'L'-1 in if(main::i1#1!='L'-1) goto main::@3
Adding number conversion cast (unumber) 1 in if(main::i1#1!=(unumber)'L'-1) goto main::@3
Adding number conversion cast (unumber) 'L'-1 in if(main::i2#1!='L'-1) goto main::@5
Adding number conversion cast (unumber) 1 in if(main::i2#1!=(unumber)'L'-1) goto main::@5
Adding number conversion cast (unumber) 'L'-1 in if(main::i3#1!='L'-1) goto main::@7
Adding number conversion cast (unumber) 1 in if(main::i3#1!=(unumber)'L'-1) goto main::@7
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 'L'-(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast 'L'-(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast 'L'-(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast 'L'-(unumber)1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [2] idx_ssa_g#0 = ++ idx_ssa_g#13
Constant right-side identified [19] main::idx_ssa_l#1 = ++ main::idx_ssa_l#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant idx_ssa_g#0 = ++idx_ssa_g#13
Constant main::idx_ssa_l#1 = ++main::idx_ssa_l#0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings main::idx_ssa_l#0
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::i1#0
Inlining constant with var siblings main::i2#0
Inlining constant with var siblings main::i3#0
Inlining constant with var siblings main::idx_ssa_l#1
Inlining constant with var siblings idx_ssa_g#13
Inlining constant with var siblings idx_ssa_g#0
Constant inlined main::idx_ssa_l#1 = ++0
Constant inlined main::idx_ssa_l#0 = 0
Constant inlined main::i3#0 = 'M'
Constant inlined idx_ssa_g#13 = 0
Constant inlined main::i#0 = 'M'
Constant inlined main::i1#0 = 'M'
Constant inlined main::i2#0 = 'M'
Constant inlined idx_ssa_g#0 = ++0
Successful SSA optimization Pass2ConstantInlining
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Successful SSA optimization Pass2ConstantSimplification
Finalized unsigned number type $400
Finalized unsigned number type $28
Finalized unsigned number type $400
Finalized unsigned number type $50
Finalized unsigned number type $400
Finalized unsigned number type $78
Successful SSA optimization Pass2FinalizeAllNumbers
Added new block during phi lifting main::@9(between main::@1 and main::@1)
Added new block during phi lifting main::@10(between main::@3 and main::@3)
Added new block during phi lifting main::@11(between main::@5 and main::@5)
Added new block during phi lifting main::@12(between main::@7 and main::@7)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
CALL GRAPH
Calls in [__start] to main:3 

Created 6 initial phi equivalence classes
Coalesced [40] main::i3#3 = main::i3#1
Coalesced [41] main::i2#3 = main::i2#1
Coalesced [42] main::idx_ssa_l#10 = main::idx_ssa_l#2
Coalesced [43] main::i1#3 = main::i1#1
Coalesced [44] main::i#3 = main::i#1
Coalesced [45] idx_ssa_g#20 = idx_ssa_g#1
Coalesced down to 6 phi equivalence classes
Culled Empty Block label __start::@2
Culled Empty Block label main::@12
Culled Empty Block label main::@11
Culled Empty Block label main::@10
Culled Empty Block label main::@9
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] idx_nssa_g = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [5] main::idx_nssa_l = 0
  [6] *SCREEN1 = 'C'
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [7] idx_ssa_g#8 = phi( main/1, main::@1/idx_ssa_g#1 )
  [7] main::i#2 = phi( main/'M', main::@1/main::i#1 )
  [8] SCREEN1[idx_ssa_g#8] = main::i#2
  [9] idx_ssa_g#1 = ++ idx_ssa_g#8
  [10] main::i#1 = -- main::i#2
  [11] if(main::i#1!='L'-1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] SCREEN1[idx_ssa_g#1] = '!'
  [13] SCREEN2[idx_nssa_g] = 'C'
  [14] idx_nssa_g = ++ idx_nssa_g
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  [15] main::i1#2 = phi( main::@2/'M', main::@3/main::i1#1 )
  [16] SCREEN2[idx_nssa_g] = main::i1#2
  [17] idx_nssa_g = ++ idx_nssa_g
  [18] main::i1#1 = -- main::i1#2
  [19] if(main::i1#1!='L'-1) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  [20] SCREEN2[idx_nssa_g] = '!'
  [21] idx_nssa_g = ++ idx_nssa_g
  [22] *SCREEN3 = 'C'
  to:main::@5
main::@5: scope:[main]  from main::@4 main::@5
  [23] main::idx_ssa_l#5 = phi( main::@4/1, main::@5/main::idx_ssa_l#2 )
  [23] main::i2#2 = phi( main::@4/'M', main::@5/main::i2#1 )
  [24] SCREEN3[main::idx_ssa_l#5] = main::i2#2
  [25] main::idx_ssa_l#2 = ++ main::idx_ssa_l#5
  [26] main::i2#1 = -- main::i2#2
  [27] if(main::i2#1!='L'-1) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@5
  [28] SCREEN3[main::idx_ssa_l#2] = '!'
  [29] SCREEN4[main::idx_nssa_l] = 'C'
  [30] main::idx_nssa_l = ++ main::idx_nssa_l
  to:main::@7
main::@7: scope:[main]  from main::@6 main::@7
  [31] main::i3#2 = phi( main::@6/'M', main::@7/main::i3#1 )
  [32] SCREEN4[main::idx_nssa_l] = main::i3#2
  [33] main::idx_nssa_l = ++ main::idx_nssa_l
  [34] main::i3#1 = -- main::i3#2
  [35] if(main::i3#1!='L'-1) goto main::@7
  to:main::@8
main::@8: scope:[main]  from main::@7
  [36] SCREEN4[main::idx_nssa_l] = '!'
  [37] main::idx_nssa_l = ++ main::idx_nssa_l
  to:main::@return
main::@return: scope:[main]  from main::@8
  [38] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void __start()
byte idx_nssa_g loadstore 20.61111111111111
byte idx_ssa_g
byte idx_ssa_g#1 71.0
byte idx_ssa_g#8 151.5
void main()
byte main::i
byte main::i#1 151.5
byte main::i#2 101.0
byte main::i1
byte main::i1#1 151.5
byte main::i1#2 101.0
byte main::i2
byte main::i2#1 151.5
byte main::i2#2 101.0
byte main::i3
byte main::i3#1 151.5
byte main::i3#2 101.0
byte main::idx_nssa_l loadstore 11.875
byte main::idx_ssa_l
byte main::idx_ssa_l#2 71.0
byte main::idx_ssa_l#5 151.5

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ idx_ssa_g#8 idx_ssa_g#1 ]
[ main::i1#2 main::i1#1 ]
[ main::i2#2 main::i2#1 ]
[ main::idx_ssa_l#5 main::idx_ssa_l#2 ]
[ main::i3#2 main::i3#1 ]
Added variable idx_nssa_g to live range equivalence class [ idx_nssa_g ]
Added variable main::idx_nssa_l to live range equivalence class [ main::idx_nssa_l ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ idx_ssa_g#8 idx_ssa_g#1 ]
[ main::i1#2 main::i1#1 ]
[ main::i2#2 main::i2#1 ]
[ main::idx_ssa_l#5 main::idx_ssa_l#2 ]
[ main::i3#2 main::i3#1 ]
[ idx_nssa_g ]
[ main::idx_nssa_l ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ idx_ssa_g#8 idx_ssa_g#1 ]
Allocated zp[1]:4 [ main::i1#2 main::i1#1 ]
Allocated zp[1]:5 [ main::i2#2 main::i2#1 ]
Allocated zp[1]:6 [ main::idx_ssa_l#5 main::idx_ssa_l#2 ]
Allocated zp[1]:7 [ main::i3#2 main::i3#1 ]
Allocated zp[1]:8 [ idx_nssa_g ]
Allocated zp[1]:9 [ main::idx_nssa_l ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] idx_nssa_g = 0 [ idx_nssa_g ] (  [ idx_nssa_g ] { }  ) always clobbers reg byte a 
Statement [5] main::idx_nssa_l = 0 [ idx_nssa_g main::idx_nssa_l ] ( main:3 [ idx_nssa_g main::idx_nssa_l ] { }  ) always clobbers reg byte a 
Statement [6] *SCREEN1 = 'C' [ idx_nssa_g main::idx_nssa_l ] ( main:3 [ idx_nssa_g main::idx_nssa_l ] { }  ) always clobbers reg byte a 
Statement [12] SCREEN1[idx_ssa_g#1] = '!' [ idx_nssa_g main::idx_nssa_l ] ( main:3 [ idx_nssa_g main::idx_nssa_l ] { }  ) always clobbers reg byte a 
Statement [13] SCREEN2[idx_nssa_g] = 'C' [ idx_nssa_g main::idx_nssa_l ] ( main:3 [ idx_nssa_g main::idx_nssa_l ] { }  ) always clobbers reg byte a reg byte y 
Statement [16] SCREEN2[idx_nssa_g] = main::i1#2 [ idx_nssa_g main::idx_nssa_l main::i1#2 ] ( main:3 [ idx_nssa_g main::idx_nssa_l main::i1#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:4 [ main::i1#2 main::i1#1 ]
Statement [20] SCREEN2[idx_nssa_g] = '!' [ idx_nssa_g main::idx_nssa_l ] ( main:3 [ idx_nssa_g main::idx_nssa_l ] { }  ) always clobbers reg byte a reg byte y 
Statement [22] *SCREEN3 = 'C' [ main::idx_nssa_l ] ( main:3 [ main::idx_nssa_l ] { }  ) always clobbers reg byte a 
Statement [28] SCREEN3[main::idx_ssa_l#2] = '!' [ main::idx_nssa_l ] ( main:3 [ main::idx_nssa_l ] { }  ) always clobbers reg byte a 
Statement [29] SCREEN4[main::idx_nssa_l] = 'C' [ main::idx_nssa_l ] ( main:3 [ main::idx_nssa_l ] { }  ) always clobbers reg byte a reg byte y 
Statement [32] SCREEN4[main::idx_nssa_l] = main::i3#2 [ main::idx_nssa_l main::i3#2 ] ( main:3 [ main::idx_nssa_l main::i3#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:7 [ main::i3#2 main::i3#1 ]
Statement [36] SCREEN4[main::idx_nssa_l] = '!' [ main::idx_nssa_l ] ( main:3 [ main::idx_nssa_l ] { }  ) always clobbers reg byte a reg byte y 
Statement [1] idx_nssa_g = 0 [ idx_nssa_g ] (  [ idx_nssa_g ] { }  ) always clobbers reg byte a 
Statement [5] main::idx_nssa_l = 0 [ idx_nssa_g main::idx_nssa_l ] ( main:3 [ idx_nssa_g main::idx_nssa_l ] { }  ) always clobbers reg byte a 
Statement [6] *SCREEN1 = 'C' [ idx_nssa_g main::idx_nssa_l ] ( main:3 [ idx_nssa_g main::idx_nssa_l ] { }  ) always clobbers reg byte a 
Statement [12] SCREEN1[idx_ssa_g#1] = '!' [ idx_nssa_g main::idx_nssa_l ] ( main:3 [ idx_nssa_g main::idx_nssa_l ] { }  ) always clobbers reg byte a 
Statement [13] SCREEN2[idx_nssa_g] = 'C' [ idx_nssa_g main::idx_nssa_l ] ( main:3 [ idx_nssa_g main::idx_nssa_l ] { }  ) always clobbers reg byte a reg byte y 
Statement [16] SCREEN2[idx_nssa_g] = main::i1#2 [ idx_nssa_g main::idx_nssa_l main::i1#2 ] ( main:3 [ idx_nssa_g main::idx_nssa_l main::i1#2 ] { }  ) always clobbers reg byte y 
Statement [20] SCREEN2[idx_nssa_g] = '!' [ idx_nssa_g main::idx_nssa_l ] ( main:3 [ idx_nssa_g main::idx_nssa_l ] { }  ) always clobbers reg byte a reg byte y 
Statement [22] *SCREEN3 = 'C' [ main::idx_nssa_l ] ( main:3 [ main::idx_nssa_l ] { }  ) always clobbers reg byte a 
Statement [28] SCREEN3[main::idx_ssa_l#2] = '!' [ main::idx_nssa_l ] ( main:3 [ main::idx_nssa_l ] { }  ) always clobbers reg byte a 
Statement [29] SCREEN4[main::idx_nssa_l] = 'C' [ main::idx_nssa_l ] ( main:3 [ main::idx_nssa_l ] { }  ) always clobbers reg byte a reg byte y 
Statement [32] SCREEN4[main::idx_nssa_l] = main::i3#2 [ main::idx_nssa_l main::i3#2 ] ( main:3 [ main::idx_nssa_l main::i3#2 ] { }  ) always clobbers reg byte y 
Statement [36] SCREEN4[main::idx_nssa_l] = '!' [ main::idx_nssa_l ] ( main:3 [ main::idx_nssa_l ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ idx_ssa_g#8 idx_ssa_g#1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::i1#2 main::i1#1 ] : zp[1]:4 , reg byte a , reg byte x , 
Potential registers zp[1]:5 [ main::i2#2 main::i2#1 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::idx_ssa_l#5 main::idx_ssa_l#2 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::i3#2 main::i3#1 ] : zp[1]:7 , reg byte a , reg byte x , 
Potential registers zp[1]:8 [ idx_nssa_g ] : zp[1]:8 , 
Potential registers zp[1]:9 [ main::idx_nssa_l ] : zp[1]:9 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 252.5: zp[1]:2 [ main::i#2 main::i#1 ] 252.5: zp[1]:4 [ main::i1#2 main::i1#1 ] 252.5: zp[1]:5 [ main::i2#2 main::i2#1 ] 252.5: zp[1]:7 [ main::i3#2 main::i3#1 ] 222.5: zp[1]:6 [ main::idx_ssa_l#5 main::idx_ssa_l#2 ] 11.88: zp[1]:9 [ main::idx_nssa_l ] 
Uplift Scope [] 222.5: zp[1]:3 [ idx_ssa_g#8 idx_ssa_g#1 ] 20.61: zp[1]:8 [ idx_nssa_g ] 
Uplift Scope [__start] 

Uplifting [main] best 1559 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::i1#2 main::i1#1 ] reg byte x [ main::i2#2 main::i2#1 ] reg byte a [ main::i3#2 main::i3#1 ] zp[1]:6 [ main::idx_ssa_l#5 main::idx_ssa_l#2 ] zp[1]:9 [ main::idx_nssa_l ] 
Limited combination testing to 100 combinations of 576 possible.
Uplifting [] best 1466 combination reg byte y [ idx_ssa_g#8 idx_ssa_g#1 ] zp[1]:8 [ idx_nssa_g ] 
Uplifting [__start] best 1466 combination 
Attempting to uplift remaining variables inzp[1]:6 [ main::idx_ssa_l#5 main::idx_ssa_l#2 ]
Uplifting [main] best 1373 combination reg byte y [ main::idx_ssa_l#5 main::idx_ssa_l#2 ] 
Attempting to uplift remaining variables inzp[1]:8 [ idx_nssa_g ]
Uplifting [] best 1373 combination zp[1]:8 [ idx_nssa_g ] 
Attempting to uplift remaining variables inzp[1]:9 [ main::idx_nssa_l ]
Uplifting [main] best 1373 combination zp[1]:9 [ main::idx_nssa_l ] 
Allocated (was zp[1]:8) zp[1]:2 [ idx_nssa_g ]
Allocated (was zp[1]:9) zp[1]:3 [ main::idx_nssa_l ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests declaring variables as __ssa / __notssa
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN1 = $400
  .label SCREEN2 = $400+$28
  .label SCREEN3 = $400+$50
  .label SCREEN4 = $400+$78
  .label idx_nssa_g = 2
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] idx_nssa_g = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z idx_nssa_g
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [3] call main 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    .label idx_nssa_l = 3
    // [5] main::idx_nssa_l = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z idx_nssa_l
    // [6] *SCREEN1 = 'C' -- _deref_pbuc1=vbuc2 
    lda #'C'
    sta SCREEN1
    // [7] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [7] phi idx_ssa_g#8 = 1 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #1
    // [7] phi main::i#2 = 'M' [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #'M'
    jmp __b1
    // [7] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [7] phi idx_ssa_g#8 = idx_ssa_g#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [7] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [8] SCREEN1[idx_ssa_g#8] = main::i#2 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta SCREEN1,y
    // [9] idx_ssa_g#1 = ++ idx_ssa_g#8 -- vbuyy=_inc_vbuyy 
    iny
    // [10] main::i#1 = -- main::i#2 -- vbuxx=_dec_vbuxx 
    dex
    // [11] if(main::i#1!='L'-1) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #'L'-1
    bne __b1_from___b1
    jmp __b2
    // main::@2
  __b2:
    // [12] SCREEN1[idx_ssa_g#1] = '!' -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #'!'
    sta SCREEN1,y
    // [13] SCREEN2[idx_nssa_g] = 'C' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'C'
    ldy.z idx_nssa_g
    sta SCREEN2,y
    // [14] idx_nssa_g = ++ idx_nssa_g -- vbuz1=_inc_vbuz1 
    inc.z idx_nssa_g
    // [15] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [15] phi main::i1#2 = 'M' [phi:main::@2->main::@3#0] -- vbuaa=vbuc1 
    lda #'M'
    jmp __b3
    // [15] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  __b3_from___b3:
    // [15] phi main::i1#2 = main::i1#1 [phi:main::@3->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [16] SCREEN2[idx_nssa_g] = main::i1#2 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z idx_nssa_g
    sta SCREEN2,y
    // [17] idx_nssa_g = ++ idx_nssa_g -- vbuz1=_inc_vbuz1 
    inc.z idx_nssa_g
    // [18] main::i1#1 = -- main::i1#2 -- vbuaa=_dec_vbuaa 
    sec
    sbc #1
    // [19] if(main::i1#1!='L'-1) goto main::@3 -- vbuaa_neq_vbuc1_then_la1 
    cmp #'L'-1
    bne __b3_from___b3
    jmp __b4
    // main::@4
  __b4:
    // [20] SCREEN2[idx_nssa_g] = '!' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'!'
    ldy.z idx_nssa_g
    sta SCREEN2,y
    // [21] idx_nssa_g = ++ idx_nssa_g -- vbuz1=_inc_vbuz1 
    inc.z idx_nssa_g
    // [22] *SCREEN3 = 'C' -- _deref_pbuc1=vbuc2 
    lda #'C'
    sta SCREEN3
    // [23] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    // [23] phi main::idx_ssa_l#5 = 1 [phi:main::@4->main::@5#0] -- vbuyy=vbuc1 
    ldy #1
    // [23] phi main::i2#2 = 'M' [phi:main::@4->main::@5#1] -- vbuxx=vbuc1 
    ldx #'M'
    jmp __b5
    // [23] phi from main::@5 to main::@5 [phi:main::@5->main::@5]
  __b5_from___b5:
    // [23] phi main::idx_ssa_l#5 = main::idx_ssa_l#2 [phi:main::@5->main::@5#0] -- register_copy 
    // [23] phi main::i2#2 = main::i2#1 [phi:main::@5->main::@5#1] -- register_copy 
    jmp __b5
    // main::@5
  __b5:
    // [24] SCREEN3[main::idx_ssa_l#5] = main::i2#2 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta SCREEN3,y
    // [25] main::idx_ssa_l#2 = ++ main::idx_ssa_l#5 -- vbuyy=_inc_vbuyy 
    iny
    // [26] main::i2#1 = -- main::i2#2 -- vbuxx=_dec_vbuxx 
    dex
    // [27] if(main::i2#1!='L'-1) goto main::@5 -- vbuxx_neq_vbuc1_then_la1 
    cpx #'L'-1
    bne __b5_from___b5
    jmp __b6
    // main::@6
  __b6:
    // [28] SCREEN3[main::idx_ssa_l#2] = '!' -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #'!'
    sta SCREEN3,y
    // [29] SCREEN4[main::idx_nssa_l] = 'C' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'C'
    ldy.z idx_nssa_l
    sta SCREEN4,y
    // [30] main::idx_nssa_l = ++ main::idx_nssa_l -- vbuz1=_inc_vbuz1 
    inc.z idx_nssa_l
    // [31] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    // [31] phi main::i3#2 = 'M' [phi:main::@6->main::@7#0] -- vbuaa=vbuc1 
    lda #'M'
    jmp __b7
    // [31] phi from main::@7 to main::@7 [phi:main::@7->main::@7]
  __b7_from___b7:
    // [31] phi main::i3#2 = main::i3#1 [phi:main::@7->main::@7#0] -- register_copy 
    jmp __b7
    // main::@7
  __b7:
    // [32] SCREEN4[main::idx_nssa_l] = main::i3#2 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z idx_nssa_l
    sta SCREEN4,y
    // [33] main::idx_nssa_l = ++ main::idx_nssa_l -- vbuz1=_inc_vbuz1 
    inc.z idx_nssa_l
    // [34] main::i3#1 = -- main::i3#2 -- vbuaa=_dec_vbuaa 
    sec
    sbc #1
    // [35] if(main::i3#1!='L'-1) goto main::@7 -- vbuaa_neq_vbuc1_then_la1 
    cmp #'L'-1
    bne __b7_from___b7
    jmp __b8
    // main::@8
  __b8:
    // [36] SCREEN4[main::idx_nssa_l] = '!' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'!'
    ldy.z idx_nssa_l
    sta SCREEN4,y
    // [37] main::idx_nssa_l = ++ main::idx_nssa_l -- vbuz1=_inc_vbuz1 
    inc.z idx_nssa_l
    jmp __breturn
    // main::@return
  __breturn:
    // [38] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b3_from___b3 with __b3
Replacing label __b5_from___b5 with __b5
Replacing label __b7_from___b7 with __b7
Removing instruction __b1_from___init1:
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b3:
Removing instruction __b5_from___b5:
Removing instruction __b7_from___b7:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b4:
Removing instruction __b5_from___b4:
Removing instruction __b6:
Removing instruction __b7_from___b6:
Removing instruction __b8:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b7
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN1 = (byte*) 1024
const nomodify byte* SCREEN2 = (byte*)$400+$28
const nomodify byte* SCREEN3 = (byte*)$400+$50
const nomodify byte* SCREEN4 = (byte*)$400+$78
void __start()
byte idx_nssa_g loadstore zp[1]:2 20.61111111111111
byte idx_ssa_g
byte idx_ssa_g#1 reg byte y 71.0
byte idx_ssa_g#8 reg byte y 151.5
void main()
byte main::i
byte main::i#1 reg byte x 151.5
byte main::i#2 reg byte x 101.0
byte main::i1
byte main::i1#1 reg byte a 151.5
byte main::i1#2 reg byte a 101.0
byte main::i2
byte main::i2#1 reg byte x 151.5
byte main::i2#2 reg byte x 101.0
byte main::i3
byte main::i3#1 reg byte a 151.5
byte main::i3#2 reg byte a 101.0
byte main::idx_nssa_l loadstore zp[1]:3 11.875
byte main::idx_ssa_l
byte main::idx_ssa_l#2 reg byte y 71.0
byte main::idx_ssa_l#5 reg byte y 151.5

reg byte x [ main::i#2 main::i#1 ]
reg byte y [ idx_ssa_g#8 idx_ssa_g#1 ]
reg byte a [ main::i1#2 main::i1#1 ]
reg byte x [ main::i2#2 main::i2#1 ]
reg byte y [ main::idx_ssa_l#5 main::idx_ssa_l#2 ]
reg byte a [ main::i3#2 main::i3#1 ]
zp[1]:2 [ idx_nssa_g ]
zp[1]:3 [ main::idx_nssa_l ]


FINAL ASSEMBLER
Score: 974

  // File Comments
// Tests declaring variables as __ssa / __notssa
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN1 = $400
  .label SCREEN2 = $400+$28
  .label SCREEN3 = $400+$50
  .label SCREEN4 = $400+$78
  .label idx_nssa_g = 2
  // __start
__start: {
    // __start::__init1
    // idx_nssa_g
    // [1] idx_nssa_g = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z idx_nssa_g
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [3] call main 
    jsr main
    // __start::@return
    // [4] return 
    rts
}
  // main
main: {
    .label idx_nssa_l = 3
    // idx_nssa_l
    // [5] main::idx_nssa_l = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z idx_nssa_l
    // SCREEN1[idx_ssa_g++] = 'C'
    // [6] *SCREEN1 = 'C' -- _deref_pbuc1=vbuc2 
    lda #'C'
    sta SCREEN1
    // [7] phi from main to main::@1 [phi:main->main::@1]
    // [7] phi idx_ssa_g#8 = 1 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #1
    // [7] phi main::i#2 = 'M' [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #'M'
    // [7] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [7] phi idx_ssa_g#8 = idx_ssa_g#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [7] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // SCREEN1[idx_ssa_g++] = i
    // [8] SCREEN1[idx_ssa_g#8] = main::i#2 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta SCREEN1,y
    // SCREEN1[idx_ssa_g++] = i;
    // [9] idx_ssa_g#1 = ++ idx_ssa_g#8 -- vbuyy=_inc_vbuyy 
    iny
    // for( char i: 'M'..'L')
    // [10] main::i#1 = -- main::i#2 -- vbuxx=_dec_vbuxx 
    dex
    // [11] if(main::i#1!='L'-1) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #'L'-1
    bne __b1
    // main::@2
    // SCREEN1[idx_ssa_g++] = '!'
    // [12] SCREEN1[idx_ssa_g#1] = '!' -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #'!'
    sta SCREEN1,y
    // SCREEN2[idx_nssa_g++] = 'C'
    // [13] SCREEN2[idx_nssa_g] = 'C' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'C'
    ldy.z idx_nssa_g
    sta SCREEN2,y
    // SCREEN2[idx_nssa_g++] = 'C';
    // [14] idx_nssa_g = ++ idx_nssa_g -- vbuz1=_inc_vbuz1 
    inc.z idx_nssa_g
    // [15] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [15] phi main::i1#2 = 'M' [phi:main::@2->main::@3#0] -- vbuaa=vbuc1 
    lda #'M'
    // [15] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
    // [15] phi main::i1#2 = main::i1#1 [phi:main::@3->main::@3#0] -- register_copy 
    // main::@3
  __b3:
    // SCREEN2[idx_nssa_g++] = i
    // [16] SCREEN2[idx_nssa_g] = main::i1#2 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z idx_nssa_g
    sta SCREEN2,y
    // SCREEN2[idx_nssa_g++] = i;
    // [17] idx_nssa_g = ++ idx_nssa_g -- vbuz1=_inc_vbuz1 
    inc.z idx_nssa_g
    // for( char i: 'M'..'L')
    // [18] main::i1#1 = -- main::i1#2 -- vbuaa=_dec_vbuaa 
    sec
    sbc #1
    // [19] if(main::i1#1!='L'-1) goto main::@3 -- vbuaa_neq_vbuc1_then_la1 
    cmp #'L'-1
    bne __b3
    // main::@4
    // SCREEN2[idx_nssa_g++] = '!'
    // [20] SCREEN2[idx_nssa_g] = '!' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'!'
    ldy.z idx_nssa_g
    sta SCREEN2,y
    // SCREEN2[idx_nssa_g++] = '!';
    // [21] idx_nssa_g = ++ idx_nssa_g -- vbuz1=_inc_vbuz1 
    inc.z idx_nssa_g
    // SCREEN3[idx_ssa_l++] = 'C'
    // [22] *SCREEN3 = 'C' -- _deref_pbuc1=vbuc2 
    lda #'C'
    sta SCREEN3
    // [23] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // [23] phi main::idx_ssa_l#5 = 1 [phi:main::@4->main::@5#0] -- vbuyy=vbuc1 
    ldy #1
    // [23] phi main::i2#2 = 'M' [phi:main::@4->main::@5#1] -- vbuxx=vbuc1 
    ldx #'M'
    // [23] phi from main::@5 to main::@5 [phi:main::@5->main::@5]
    // [23] phi main::idx_ssa_l#5 = main::idx_ssa_l#2 [phi:main::@5->main::@5#0] -- register_copy 
    // [23] phi main::i2#2 = main::i2#1 [phi:main::@5->main::@5#1] -- register_copy 
    // main::@5
  __b5:
    // SCREEN3[idx_ssa_l++] = i
    // [24] SCREEN3[main::idx_ssa_l#5] = main::i2#2 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta SCREEN3,y
    // SCREEN3[idx_ssa_l++] = i;
    // [25] main::idx_ssa_l#2 = ++ main::idx_ssa_l#5 -- vbuyy=_inc_vbuyy 
    iny
    // for( char i: 'M'..'L')
    // [26] main::i2#1 = -- main::i2#2 -- vbuxx=_dec_vbuxx 
    dex
    // [27] if(main::i2#1!='L'-1) goto main::@5 -- vbuxx_neq_vbuc1_then_la1 
    cpx #'L'-1
    bne __b5
    // main::@6
    // SCREEN3[idx_ssa_l++] = '!'
    // [28] SCREEN3[main::idx_ssa_l#2] = '!' -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #'!'
    sta SCREEN3,y
    // SCREEN4[idx_nssa_l++] = 'C'
    // [29] SCREEN4[main::idx_nssa_l] = 'C' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'C'
    ldy.z idx_nssa_l
    sta SCREEN4,y
    // SCREEN4[idx_nssa_l++] = 'C';
    // [30] main::idx_nssa_l = ++ main::idx_nssa_l -- vbuz1=_inc_vbuz1 
    inc.z idx_nssa_l
    // [31] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
    // [31] phi main::i3#2 = 'M' [phi:main::@6->main::@7#0] -- vbuaa=vbuc1 
    lda #'M'
    // [31] phi from main::@7 to main::@7 [phi:main::@7->main::@7]
    // [31] phi main::i3#2 = main::i3#1 [phi:main::@7->main::@7#0] -- register_copy 
    // main::@7
  __b7:
    // SCREEN4[idx_nssa_l++] = i
    // [32] SCREEN4[main::idx_nssa_l] = main::i3#2 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z idx_nssa_l
    sta SCREEN4,y
    // SCREEN4[idx_nssa_l++] = i;
    // [33] main::idx_nssa_l = ++ main::idx_nssa_l -- vbuz1=_inc_vbuz1 
    inc.z idx_nssa_l
    // for( char i: 'M'..'L')
    // [34] main::i3#1 = -- main::i3#2 -- vbuaa=_dec_vbuaa 
    sec
    sbc #1
    // [35] if(main::i3#1!='L'-1) goto main::@7 -- vbuaa_neq_vbuc1_then_la1 
    cmp #'L'-1
    bne __b7
    // main::@8
    // SCREEN4[idx_nssa_l++] = '!'
    // [36] SCREEN4[main::idx_nssa_l] = '!' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'!'
    ldy.z idx_nssa_l
    sta SCREEN4,y
    // SCREEN4[idx_nssa_l++] = '!';
    // [37] main::idx_nssa_l = ++ main::idx_nssa_l -- vbuz1=_inc_vbuz1 
    inc.z idx_nssa_l
    // main::@return
    // }
    // [38] return 
    rts
}
  // File Data

