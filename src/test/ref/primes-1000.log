Inlined call call __init 

CONTROL FLOW GRAPH SSA

void print_str(byte* print_str::str)
print_str: scope:[print_str]  from print_sint_decimal::@6
  print_char_cursor#34 = phi( print_sint_decimal::@6/print_char_cursor#31 )
  print_str::str#5 = phi( print_sint_decimal::@6/print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  print_char_cursor#28 = phi( print_str/print_char_cursor#34, print_str::@3/print_char_cursor#0 )
  print_str::str#2 = phi( print_str/print_str::str#5, print_str::@3/print_str::str#0 )
  print_str::$1 = 0 != *print_str::str#2
  if(print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  print_char_cursor#27 = phi( print_str::@1/print_char_cursor#28 )
  print_str::str#3 = phi( print_str::@1/print_str::str#2 )
  print_char::ch#0 = *print_str::str#3
  call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  print_str::str#4 = phi( print_str::@2/print_str::str#3 )
  print_char_cursor#14 = phi( print_str::@2/print_char_cursor#7 )
  print_char_cursor#0 = print_char_cursor#14
  print_str::str#0 = ++ print_str::str#4
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  print_char_cursor#15 = phi( print_str::@1/print_char_cursor#28 )
  print_char_cursor#1 = print_char_cursor#15
  return 
  to:@return

void print_sint_decimal(signed word print_sint_decimal::w)
print_sint_decimal: scope:[print_sint_decimal]  from main::@6
  print_char_cursor#35 = phi( main::@6/print_char_cursor#32 )
  print_sint_decimal::w#2 = phi( main::@6/print_sint_decimal::w#1 )
  print_sint_decimal::$0 = print_sint_decimal::w#2 < 0
  if(print_sint_decimal::$0) goto print_sint_decimal::@1
  to:print_sint_decimal::@3
print_sint_decimal::@1: scope:[print_sint_decimal]  from print_sint_decimal
  print_sint_decimal::w#5 = phi( print_sint_decimal/print_sint_decimal::w#2 )
  print_char_cursor#29 = phi( print_sint_decimal/print_char_cursor#35 )
  print_char::ch#1 = '-'
  call print_char 
  to:print_sint_decimal::@4
print_sint_decimal::@4: scope:[print_sint_decimal]  from print_sint_decimal::@1
  print_sint_decimal::w#3 = phi( print_sint_decimal::@1/print_sint_decimal::w#5 )
  print_char_cursor#16 = phi( print_sint_decimal::@1/print_char_cursor#7 )
  print_char_cursor#2 = print_char_cursor#16
  print_sint_decimal::$5 = - print_sint_decimal::w#3
  print_sint_decimal::w#0 = print_sint_decimal::$5
  to:print_sint_decimal::@2
print_sint_decimal::@3: scope:[print_sint_decimal]  from print_sint_decimal
  print_sint_decimal::w#7 = phi( print_sint_decimal/print_sint_decimal::w#2 )
  print_char_cursor#30 = phi( print_sint_decimal/print_char_cursor#35 )
  print_char::ch#2 = ' '
  call print_char 
  to:print_sint_decimal::@5
print_sint_decimal::@5: scope:[print_sint_decimal]  from print_sint_decimal::@3
  print_sint_decimal::w#6 = phi( print_sint_decimal::@3/print_sint_decimal::w#7 )
  print_char_cursor#17 = phi( print_sint_decimal::@3/print_char_cursor#7 )
  print_char_cursor#3 = print_char_cursor#17
  to:print_sint_decimal::@2
print_sint_decimal::@2: scope:[print_sint_decimal]  from print_sint_decimal::@4 print_sint_decimal::@5
  print_char_cursor#36 = phi( print_sint_decimal::@4/print_char_cursor#2, print_sint_decimal::@5/print_char_cursor#3 )
  print_sint_decimal::w#4 = phi( print_sint_decimal::@4/print_sint_decimal::w#0, print_sint_decimal::@5/print_sint_decimal::w#6 )
  utoa::value#0 = (word)print_sint_decimal::w#4
  utoa::buffer#0 = decimal_digits
  utoa::radix#0 = DECIMAL
  call utoa 
  to:print_sint_decimal::@6
print_sint_decimal::@6: scope:[print_sint_decimal]  from print_sint_decimal::@2
  print_char_cursor#31 = phi( print_sint_decimal::@2/print_char_cursor#36 )
  print_str::str#1 = decimal_digits
  call print_str 
  to:print_sint_decimal::@7
print_sint_decimal::@7: scope:[print_sint_decimal]  from print_sint_decimal::@6
  print_char_cursor#18 = phi( print_sint_decimal::@6/print_char_cursor#1 )
  print_char_cursor#4 = print_char_cursor#18
  to:print_sint_decimal::@return
print_sint_decimal::@return: scope:[print_sint_decimal]  from print_sint_decimal::@7
  print_char_cursor#19 = phi( print_sint_decimal::@7/print_char_cursor#4 )
  print_char_cursor#5 = print_char_cursor#19
  return 
  to:@return

void print_char(byte print_char::ch)
print_char: scope:[print_char]  from main::@10 print_sint_decimal::@1 print_sint_decimal::@3 print_str::@2
  print_char_cursor#20 = phi( main::@10/print_char_cursor#8, print_sint_decimal::@1/print_char_cursor#29, print_sint_decimal::@3/print_char_cursor#30, print_str::@2/print_char_cursor#27 )
  print_char::ch#4 = phi( main::@10/print_char::ch#3, print_sint_decimal::@1/print_char::ch#1, print_sint_decimal::@3/print_char::ch#2, print_str::@2/print_char::ch#0 )
  *print_char_cursor#20 = print_char::ch#4
  print_char_cursor#6 = ++ print_char_cursor#20
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  print_char_cursor#21 = phi( print_char/print_char_cursor#6 )
  print_char_cursor#7 = print_char_cursor#21
  return 
  to:@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from print_sint_decimal::@2
  utoa::buffer#21 = phi( print_sint_decimal::@2/utoa::buffer#0 )
  utoa::value#12 = phi( print_sint_decimal::@2/utoa::value#0 )
  utoa::radix#1 = phi( print_sint_decimal::@2/utoa::radix#0 )
  utoa::max_digits#0 = 0
  utoa::digit_values#0 = (word*) 0
  utoa::$0 = utoa::radix#1 == DECIMAL
  if(utoa::$0) goto utoa::@1
  to:utoa::@6
utoa::@1: scope:[utoa]  from utoa
  utoa::buffer#17 = phi( utoa/utoa::buffer#21 )
  utoa::value#8 = phi( utoa/utoa::value#12 )
  utoa::max_digits#1 = 5
  utoa::digit_values#1 = RADIX_DECIMAL_VALUES
  to:utoa::@5
utoa::@6: scope:[utoa]  from utoa
  utoa::value#13 = phi( utoa/utoa::value#12 )
  utoa::buffer#16 = phi( utoa/utoa::buffer#21 )
  utoa::radix#2 = phi( utoa/utoa::radix#1 )
  utoa::$1 = utoa::radix#2 == HEXADECIMAL
  if(utoa::$1) goto utoa::@2
  to:utoa::@7
utoa::@2: scope:[utoa]  from utoa::@6
  utoa::buffer#18 = phi( utoa::@6/utoa::buffer#16 )
  utoa::value#9 = phi( utoa::@6/utoa::value#13 )
  utoa::max_digits#2 = 4
  utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
  to:utoa::@5
utoa::@7: scope:[utoa]  from utoa::@6
  utoa::value#14 = phi( utoa::@6/utoa::value#13 )
  utoa::buffer#13 = phi( utoa::@6/utoa::buffer#16 )
  utoa::radix#3 = phi( utoa::@6/utoa::radix#2 )
  utoa::$2 = utoa::radix#3 == OCTAL
  if(utoa::$2) goto utoa::@3
  to:utoa::@8
utoa::@3: scope:[utoa]  from utoa::@7
  utoa::buffer#19 = phi( utoa::@7/utoa::buffer#13 )
  utoa::value#10 = phi( utoa::@7/utoa::value#14 )
  utoa::max_digits#3 = 6
  utoa::digit_values#3 = RADIX_OCTAL_VALUES
  to:utoa::@5
utoa::@8: scope:[utoa]  from utoa::@7
  utoa::value#15 = phi( utoa::@7/utoa::value#14 )
  utoa::buffer#10 = phi( utoa::@7/utoa::buffer#13 )
  utoa::radix#4 = phi( utoa::@7/utoa::radix#3 )
  utoa::$3 = utoa::radix#4 == BINARY
  if(utoa::$3) goto utoa::@4
  to:utoa::@9
utoa::@4: scope:[utoa]  from utoa::@8
  utoa::buffer#20 = phi( utoa::@8/utoa::buffer#10 )
  utoa::value#11 = phi( utoa::@8/utoa::value#15 )
  utoa::max_digits#4 = $10
  utoa::digit_values#4 = RADIX_BINARY_VALUES
  to:utoa::@5
utoa::@9: scope:[utoa]  from utoa::@8
  utoa::buffer#6 = phi( utoa::@8/utoa::buffer#10 )
  *utoa::buffer#6 = 'e'
  utoa::buffer#1 = ++ utoa::buffer#6
  *utoa::buffer#1 = 'r'
  utoa::buffer#2 = ++ utoa::buffer#1
  *utoa::buffer#2 = 'r'
  utoa::buffer#3 = ++ utoa::buffer#2
  *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@12 utoa::@9
  return 
  to:@return
utoa::@5: scope:[utoa]  from utoa::@1 utoa::@2 utoa::@3 utoa::@4
  utoa::buffer#15 = phi( utoa::@1/utoa::buffer#17, utoa::@2/utoa::buffer#18, utoa::@3/utoa::buffer#19, utoa::@4/utoa::buffer#20 )
  utoa::value#7 = phi( utoa::@1/utoa::value#8, utoa::@2/utoa::value#9, utoa::@3/utoa::value#10, utoa::@4/utoa::value#11 )
  utoa::digit_values#8 = phi( utoa::@1/utoa::digit_values#1, utoa::@2/utoa::digit_values#2, utoa::@3/utoa::digit_values#3, utoa::@4/utoa::digit_values#4 )
  utoa::max_digits#7 = phi( utoa::@1/utoa::max_digits#1, utoa::@2/utoa::max_digits#2, utoa::@3/utoa::max_digits#3, utoa::@4/utoa::max_digits#4 )
  utoa::started#0 = 0
  utoa::digit#0 = 0
  to:utoa::@10
utoa::@10: scope:[utoa]  from utoa::@13 utoa::@5
  utoa::buffer#11 = phi( utoa::@13/utoa::buffer#14, utoa::@5/utoa::buffer#15 )
  utoa::started#3 = phi( utoa::@13/utoa::started#4, utoa::@5/utoa::started#0 )
  utoa::value#5 = phi( utoa::@13/utoa::value#6, utoa::@5/utoa::value#7 )
  utoa::digit_values#6 = phi( utoa::@13/utoa::digit_values#7, utoa::@5/utoa::digit_values#8 )
  utoa::digit#2 = phi( utoa::@13/utoa::digit#1, utoa::@5/utoa::digit#0 )
  utoa::max_digits#5 = phi( utoa::@13/utoa::max_digits#6, utoa::@5/utoa::max_digits#7 )
  utoa::$4 = utoa::max_digits#5 - 1
  utoa::$5 = utoa::digit#2 < utoa::$4
  if(utoa::$5) goto utoa::@11
  to:utoa::@12
utoa::@11: scope:[utoa]  from utoa::@10
  utoa::max_digits#8 = phi( utoa::@10/utoa::max_digits#5 )
  utoa::buffer#12 = phi( utoa::@10/utoa::buffer#11 )
  utoa::started#2 = phi( utoa::@10/utoa::started#3 )
  utoa::value#2 = phi( utoa::@10/utoa::value#5 )
  utoa::digit_values#5 = phi( utoa::@10/utoa::digit_values#6 )
  utoa::digit#3 = phi( utoa::@10/utoa::digit#2 )
  utoa::$10 = utoa::digit#3 * SIZEOF_WORD
  utoa::digit_value#0 = utoa::digit_values#5[utoa::$10]
  utoa::$6 = utoa::value#2 >= utoa::digit_value#0
  utoa::$7 = utoa::started#2 || utoa::$6
  utoa::$8 = ! utoa::$7
  if(utoa::$8) goto utoa::@13
  to:utoa::@14
utoa::@12: scope:[utoa]  from utoa::@10
  utoa::buffer#7 = phi( utoa::@10/utoa::buffer#11 )
  utoa::value#3 = phi( utoa::@10/utoa::value#5 )
  utoa::$11 = (byte)utoa::value#3
  *utoa::buffer#7 = DIGITS[utoa::$11]
  utoa::buffer#4 = ++ utoa::buffer#7
  *utoa::buffer#4 = 0
  to:utoa::@return
utoa::@13: scope:[utoa]  from utoa::@11 utoa::@15
  utoa::buffer#14 = phi( utoa::@11/utoa::buffer#12, utoa::@15/utoa::buffer#5 )
  utoa::started#4 = phi( utoa::@11/utoa::started#2, utoa::@15/utoa::started#1 )
  utoa::value#6 = phi( utoa::@11/utoa::value#2, utoa::@15/utoa::value#1 )
  utoa::digit_values#7 = phi( utoa::@11/utoa::digit_values#5, utoa::@15/utoa::digit_values#9 )
  utoa::max_digits#6 = phi( utoa::@11/utoa::max_digits#8, utoa::@15/utoa::max_digits#9 )
  utoa::digit#4 = phi( utoa::@11/utoa::digit#3, utoa::@15/utoa::digit#5 )
  utoa::digit#1 = ++ utoa::digit#4
  to:utoa::@10
utoa::@14: scope:[utoa]  from utoa::@11
  utoa::digit_values#10 = phi( utoa::@11/utoa::digit_values#5 )
  utoa::max_digits#10 = phi( utoa::@11/utoa::max_digits#8 )
  utoa::digit#6 = phi( utoa::@11/utoa::digit#3 )
  utoa::digit_value#1 = phi( utoa::@11/utoa::digit_value#0 )
  utoa::value#4 = phi( utoa::@11/utoa::value#2 )
  utoa::buffer#8 = phi( utoa::@11/utoa::buffer#12 )
  utoa_append::buffer#0 = utoa::buffer#8
  utoa_append::value#0 = utoa::value#4
  utoa_append::sub#0 = utoa::digit_value#1
  call utoa_append 
  utoa_append::return#0 = utoa_append::return#2
  to:utoa::@15
utoa::@15: scope:[utoa]  from utoa::@14
  utoa::digit_values#9 = phi( utoa::@14/utoa::digit_values#10 )
  utoa::max_digits#9 = phi( utoa::@14/utoa::max_digits#10 )
  utoa::digit#5 = phi( utoa::@14/utoa::digit#6 )
  utoa::buffer#9 = phi( utoa::@14/utoa::buffer#8 )
  utoa_append::return#3 = phi( utoa::@14/utoa_append::return#0 )
  utoa::$9 = utoa_append::return#3
  utoa::value#1 = utoa::$9
  utoa::buffer#5 = ++ utoa::buffer#9
  utoa::started#1 = 1
  to:utoa::@13

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@14
  utoa_append::buffer#3 = phi( utoa::@14/utoa_append::buffer#0 )
  utoa_append::sub#3 = phi( utoa::@14/utoa_append::sub#0 )
  utoa_append::value#5 = phi( utoa::@14/utoa_append::value#0 )
  utoa_append::digit#0 = 0
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  utoa_append::buffer#2 = phi( utoa_append/utoa_append::buffer#3, utoa_append::@2/utoa_append::buffer#4 )
  utoa_append::digit#4 = phi( utoa_append/utoa_append::digit#0, utoa_append::@2/utoa_append::digit#1 )
  utoa_append::sub#1 = phi( utoa_append/utoa_append::sub#3, utoa_append::@2/utoa_append::sub#2 )
  utoa_append::value#2 = phi( utoa_append/utoa_append::value#5, utoa_append::@2/utoa_append::value#1 )
  utoa_append::$0 = utoa_append::value#2 >= utoa_append::sub#1
  if(utoa_append::$0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  utoa_append::buffer#4 = phi( utoa_append::@1/utoa_append::buffer#2 )
  utoa_append::sub#2 = phi( utoa_append::@1/utoa_append::sub#1 )
  utoa_append::value#3 = phi( utoa_append::@1/utoa_append::value#2 )
  utoa_append::digit#2 = phi( utoa_append::@1/utoa_append::digit#4 )
  utoa_append::digit#1 = ++ utoa_append::digit#2
  utoa_append::value#1 = utoa_append::value#3 - utoa_append::sub#2
  to:utoa_append::@1
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  utoa_append::value#4 = phi( utoa_append::@1/utoa_append::value#2 )
  utoa_append::buffer#1 = phi( utoa_append::@1/utoa_append::buffer#2 )
  utoa_append::digit#3 = phi( utoa_append::@1/utoa_append::digit#4 )
  *utoa_append::buffer#1 = DIGITS[utoa_append::digit#3]
  utoa_append::return#1 = utoa_append::value#4
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  utoa_append::return#4 = phi( utoa_append::@3/utoa_append::return#1 )
  utoa_append::return#2 = utoa_append::return#4
  return 
  to:@return

dword mul16u(word mul16u::a , word mul16u::b)
mul16u: scope:[mul16u]  from mul16s
  mul16u::a#5 = phi( mul16s/mul16u::a#1 )
  mul16u::b#1 = phi( mul16s/mul16u::b#0 )
  mul16u::res#0 = 0
  mul16u::mb#0 = (dword)mul16u::b#1
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  mul16u::mb#5 = phi( mul16u/mul16u::mb#0, mul16u::@4/mul16u::mb#1 )
  mul16u::res#4 = phi( mul16u/mul16u::res#0, mul16u::@4/mul16u::res#6 )
  mul16u::a#2 = phi( mul16u/mul16u::a#5, mul16u::@4/mul16u::a#0 )
  mul16u::$0 = mul16u::a#2 != 0
  if(mul16u::$0) goto mul16u::@2
  to:mul16u::@3
mul16u::@2: scope:[mul16u]  from mul16u::@1
  mul16u::res#5 = phi( mul16u::@1/mul16u::res#4 )
  mul16u::mb#4 = phi( mul16u::@1/mul16u::mb#5 )
  mul16u::a#3 = phi( mul16u::@1/mul16u::a#2 )
  mul16u::$1 = mul16u::a#3 & 1
  mul16u::$2 = mul16u::$1 != 0
  mul16u::$3 = ! mul16u::$2
  if(mul16u::$3) goto mul16u::@4
  to:mul16u::@5
mul16u::@3: scope:[mul16u]  from mul16u::@1
  mul16u::res#2 = phi( mul16u::@1/mul16u::res#4 )
  mul16u::return#0 = mul16u::res#2
  to:mul16u::@return
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@5
  mul16u::res#6 = phi( mul16u::@2/mul16u::res#5, mul16u::@5/mul16u::res#1 )
  mul16u::mb#2 = phi( mul16u::@2/mul16u::mb#4, mul16u::@5/mul16u::mb#3 )
  mul16u::a#4 = phi( mul16u::@2/mul16u::a#3, mul16u::@5/mul16u::a#6 )
  mul16u::$5 = mul16u::a#4 >> 1
  mul16u::a#0 = mul16u::$5
  mul16u::$6 = mul16u::mb#2 << 1
  mul16u::mb#1 = mul16u::$6
  to:mul16u::@1
mul16u::@5: scope:[mul16u]  from mul16u::@2
  mul16u::a#6 = phi( mul16u::@2/mul16u::a#3 )
  mul16u::mb#3 = phi( mul16u::@2/mul16u::mb#4 )
  mul16u::res#3 = phi( mul16u::@2/mul16u::res#5 )
  mul16u::$4 = mul16u::res#3 + mul16u::mb#3
  mul16u::res#1 = mul16u::$4
  to:mul16u::@4
mul16u::@return: scope:[mul16u]  from mul16u::@3
  mul16u::return#3 = phi( mul16u::@3/mul16u::return#0 )
  mul16u::return#1 = mul16u::return#3
  return 
  to:@return

signed dword mul16s(signed word mul16s::a , signed word mul16s::b)
mul16s: scope:[mul16s]  from main::@1
  mul16s::b#1 = phi( main::@1/mul16s::b#0 )
  mul16s::a#1 = phi( main::@1/mul16s::a#0 )
  mul16u::a#1 = (word)mul16s::a#1
  mul16u::b#0 = (word)mul16s::b#1
  call mul16u 
  mul16u::return#2 = mul16u::return#1
  to:mul16s::@5
mul16s::@5: scope:[mul16s]  from mul16s
  mul16s::b#4 = phi( mul16s/mul16s::b#1 )
  mul16s::a#2 = phi( mul16s/mul16s::a#1 )
  mul16u::return#4 = phi( mul16s/mul16u::return#2 )
  mul16s::$0 = mul16u::return#4
  mul16s::m#0 = mul16s::$0
  mul16s::$1 = mul16s::a#2 < 0
  mul16s::$2 = ! mul16s::$1
  if(mul16s::$2) goto mul16s::@1
  to:mul16s::@3
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@5
  mul16s::a#4 = phi( mul16s::@3/mul16s::a#5, mul16s::@5/mul16s::a#2 )
  mul16s::m#6 = phi( mul16s::@3/mul16s::m#1, mul16s::@5/mul16s::m#0 )
  mul16s::b#2 = phi( mul16s::@3/mul16s::b#3, mul16s::@5/mul16s::b#4 )
  mul16s::$3 = mul16s::b#2 < 0
  mul16s::$4 = ! mul16s::$3
  if(mul16s::$4) goto mul16s::@2
  to:mul16s::@4
mul16s::@3: scope:[mul16s]  from mul16s::@5
  mul16s::a#5 = phi( mul16s::@5/mul16s::a#2 )
  mul16s::b#3 = phi( mul16s::@5/mul16s::b#4 )
  mul16s::m#3 = phi( mul16s::@5/mul16s::m#0 )
  mul16s::$6 = _word1_ mul16s::m#3
  mul16s::$13 = (word)mul16s::b#3
  mul16s::$7 = mul16s::$6 - mul16s::$13
  mul16s::$11 = mul16s::$7
  mul16s::m#1 = mul16s::m#3 word1= mul16s::$11
  to:mul16s::@1
mul16s::@2: scope:[mul16s]  from mul16s::@1 mul16s::@4
  mul16s::m#4 = phi( mul16s::@1/mul16s::m#6, mul16s::@4/mul16s::m#2 )
  mul16s::return#0 = (signed dword)mul16s::m#4
  to:mul16s::@return
mul16s::@4: scope:[mul16s]  from mul16s::@1
  mul16s::a#3 = phi( mul16s::@1/mul16s::a#4 )
  mul16s::m#5 = phi( mul16s::@1/mul16s::m#6 )
  mul16s::$9 = _word1_ mul16s::m#5
  mul16s::$14 = (word)mul16s::a#3
  mul16s::$10 = mul16s::$9 - mul16s::$14
  mul16s::$12 = mul16s::$10
  mul16s::m#2 = mul16s::m#5 word1= mul16s::$12
  to:mul16s::@2
mul16s::@return: scope:[mul16s]  from mul16s::@2
  mul16s::return#3 = phi( mul16s::@2/mul16s::return#0 )
  mul16s::return#1 = mul16s::return#3
  return 
  to:@return

word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
divr16u: scope:[divr16u]  from divr16s::@4
  divr16u::divisor#5 = phi( divr16s::@4/divr16u::divisor#0 )
  divr16u::dividend#4 = phi( divr16s::@4/divr16u::dividend#1 )
  divr16u::rem#9 = phi( divr16s::@4/divr16u::rem#3 )
  divr16u::quotient#0 = 0
  divr16u::i#0 = 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  divr16u::i#5 = phi( divr16u/divr16u::i#0, divr16u::@3/divr16u::i#1 )
  divr16u::divisor#3 = phi( divr16u/divr16u::divisor#5, divr16u::@3/divr16u::divisor#6 )
  divr16u::quotient#6 = phi( divr16u/divr16u::quotient#0, divr16u::@3/divr16u::quotient#8 )
  divr16u::dividend#2 = phi( divr16u/divr16u::dividend#4, divr16u::@3/divr16u::dividend#5 )
  divr16u::rem#4 = phi( divr16u/divr16u::rem#9, divr16u::@3/divr16u::rem#10 )
  divr16u::$0 = divr16u::rem#4 << 1
  divr16u::rem#0 = divr16u::$0
  divr16u::$1 = > divr16u::dividend#2
  divr16u::$2 = divr16u::$1 & $80
  divr16u::$3 = divr16u::$2 != 0
  divr16u::$4 = ! divr16u::$3
  if(divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  divr16u::i#3 = phi( divr16u::@1/divr16u::i#5, divr16u::@4/divr16u::i#6 )
  divr16u::divisor#1 = phi( divr16u::@1/divr16u::divisor#3, divr16u::@4/divr16u::divisor#4 )
  divr16u::rem#5 = phi( divr16u::@1/divr16u::rem#0, divr16u::@4/divr16u::rem#1 )
  divr16u::quotient#3 = phi( divr16u::@1/divr16u::quotient#6, divr16u::@4/divr16u::quotient#7 )
  divr16u::dividend#3 = phi( divr16u::@1/divr16u::dividend#2, divr16u::@4/divr16u::dividend#6 )
  divr16u::$6 = divr16u::dividend#3 << 1
  divr16u::dividend#0 = divr16u::$6
  divr16u::$7 = divr16u::quotient#3 << 1
  divr16u::quotient#1 = divr16u::$7
  divr16u::$8 = divr16u::rem#5 >= divr16u::divisor#1
  divr16u::$9 = ! divr16u::$8
  if(divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  divr16u::i#6 = phi( divr16u::@1/divr16u::i#5 )
  divr16u::divisor#4 = phi( divr16u::@1/divr16u::divisor#3 )
  divr16u::quotient#7 = phi( divr16u::@1/divr16u::quotient#6 )
  divr16u::dividend#6 = phi( divr16u::@1/divr16u::dividend#2 )
  divr16u::rem#6 = phi( divr16u::@1/divr16u::rem#0 )
  divr16u::$5 = divr16u::rem#6 | 1
  divr16u::rem#1 = divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  divr16u::divisor#6 = phi( divr16u::@2/divr16u::divisor#1, divr16u::@5/divr16u::divisor#2 )
  divr16u::quotient#8 = phi( divr16u::@2/divr16u::quotient#1, divr16u::@5/divr16u::quotient#2 )
  divr16u::dividend#5 = phi( divr16u::@2/divr16u::dividend#0, divr16u::@5/divr16u::dividend#7 )
  divr16u::rem#10 = phi( divr16u::@2/divr16u::rem#5, divr16u::@5/divr16u::rem#2 )
  divr16u::i#2 = phi( divr16u::@2/divr16u::i#3, divr16u::@5/divr16u::i#4 )
  divr16u::i#1 = divr16u::i#2 + rangenext(0,$f)
  divr16u::$11 = divr16u::i#1 != rangelast(0,$f)
  if(divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  divr16u::dividend#7 = phi( divr16u::@2/divr16u::dividend#0 )
  divr16u::i#4 = phi( divr16u::@2/divr16u::i#3 )
  divr16u::divisor#2 = phi( divr16u::@2/divr16u::divisor#1 )
  divr16u::rem#7 = phi( divr16u::@2/divr16u::rem#5 )
  divr16u::quotient#4 = phi( divr16u::@2/divr16u::quotient#1 )
  divr16u::quotient#2 = ++ divr16u::quotient#4
  divr16u::$10 = divr16u::rem#7 - divr16u::divisor#2
  divr16u::rem#2 = divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  divr16u::quotient#5 = phi( divr16u::@3/divr16u::quotient#8 )
  divr16u::rem#8 = phi( divr16u::@3/divr16u::rem#10 )
  rem16u#0 = divr16u::rem#8
  divr16u::return#0 = divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  rem16u#11 = phi( divr16u::@6/rem16u#0 )
  divr16u::return#3 = phi( divr16u::@6/divr16u::return#0 )
  divr16u::return#1 = divr16u::return#3
  rem16u#1 = rem16u#11
  return 
  to:@return

signed word divr16s(signed word divr16s::dividend , signed word divr16s::divisor , signed word divr16s::rem)
divr16s: scope:[divr16s]  from div16s
  rem16u#40 = phi( div16s/rem16u#23 )
  divr16s::divisor#6 = phi( div16s/divr16s::divisor#0 )
  divr16s::rem#1 = phi( div16s/divr16s::rem#0 )
  divr16s::dividend#1 = phi( div16s/divr16s::dividend#0 )
  divr16s::neg#0 = 0
  divr16s::dividendu#0 = 0
  divr16s::remu#0 = 0
  divr16s::$0 = divr16s::dividend#1 < 0
  divr16s::$1 = divr16s::rem#1 < 0
  divr16s::$2 = divr16s::$0 || divr16s::$1
  if(divr16s::$2) goto divr16s::@1
  to:divr16s::@6
divr16s::@1: scope:[divr16s]  from divr16s
  rem16u#37 = phi( divr16s/rem16u#40 )
  divr16s::divisor#4 = phi( divr16s/divr16s::divisor#6 )
  divr16s::rem#2 = phi( divr16s/divr16s::rem#1 )
  divr16s::dividend#2 = phi( divr16s/divr16s::dividend#1 )
  divr16s::$6 = - divr16s::dividend#2
  divr16s::dividendu#1 = (word)divr16s::$6
  divr16s::$7 = - divr16s::rem#2
  divr16s::remu#1 = (word)divr16s::$7
  divr16s::neg#1 = 1
  to:divr16s::@2
divr16s::@6: scope:[divr16s]  from divr16s
  rem16u#38 = phi( divr16s/rem16u#40 )
  divr16s::neg#7 = phi( divr16s/divr16s::neg#0 )
  divr16s::divisor#5 = phi( divr16s/divr16s::divisor#6 )
  divr16s::rem#3 = phi( divr16s/divr16s::rem#1 )
  divr16s::dividend#3 = phi( divr16s/divr16s::dividend#1 )
  divr16s::dividendu#2 = (word)divr16s::dividend#3
  divr16s::remu#2 = (word)divr16s::rem#3
  to:divr16s::@2
divr16s::@2: scope:[divr16s]  from divr16s::@1 divr16s::@6
  rem16u#32 = phi( divr16s::@1/rem16u#37, divr16s::@6/rem16u#38 )
  divr16s::remu#6 = phi( divr16s::@1/divr16s::remu#1, divr16s::@6/divr16s::remu#2 )
  divr16s::dividendu#6 = phi( divr16s::@1/divr16s::dividendu#1, divr16s::@6/divr16s::dividendu#2 )
  divr16s::neg#5 = phi( divr16s::@1/divr16s::neg#1, divr16s::@6/divr16s::neg#7 )
  divr16s::divisor#1 = phi( divr16s::@1/divr16s::divisor#4, divr16s::@6/divr16s::divisor#5 )
  divr16s::divisoru#0 = 0
  divr16s::$3 = divr16s::divisor#1 < 0
  if(divr16s::$3) goto divr16s::@3
  to:divr16s::@7
divr16s::@3: scope:[divr16s]  from divr16s::@2
  rem16u#27 = phi( divr16s::@2/rem16u#32 )
  divr16s::remu#4 = phi( divr16s::@2/divr16s::remu#6 )
  divr16s::dividendu#4 = phi( divr16s::@2/divr16s::dividendu#6 )
  divr16s::neg#3 = phi( divr16s::@2/divr16s::neg#5 )
  divr16s::divisor#2 = phi( divr16s::@2/divr16s::divisor#1 )
  divr16s::$8 = - divr16s::divisor#2
  divr16s::divisoru#1 = (word)divr16s::$8
  divr16s::$9 = divr16s::neg#3 ^ 1
  divr16s::neg#2 = divr16s::$9
  to:divr16s::@4
divr16s::@7: scope:[divr16s]  from divr16s::@2
  divr16s::neg#8 = phi( divr16s::@2/divr16s::neg#5 )
  rem16u#28 = phi( divr16s::@2/rem16u#32 )
  divr16s::remu#5 = phi( divr16s::@2/divr16s::remu#6 )
  divr16s::dividendu#5 = phi( divr16s::@2/divr16s::dividendu#6 )
  divr16s::divisor#3 = phi( divr16s::@2/divr16s::divisor#1 )
  divr16s::divisoru#2 = (word)divr16s::divisor#3
  to:divr16s::@4
divr16s::@4: scope:[divr16s]  from divr16s::@3 divr16s::@7
  divr16s::neg#6 = phi( divr16s::@3/divr16s::neg#2, divr16s::@7/divr16s::neg#8 )
  rem16u#22 = phi( divr16s::@3/rem16u#27, divr16s::@7/rem16u#28 )
  divr16s::remu#3 = phi( divr16s::@3/divr16s::remu#4, divr16s::@7/divr16s::remu#5 )
  divr16s::divisoru#3 = phi( divr16s::@3/divr16s::divisoru#1, divr16s::@7/divr16s::divisoru#2 )
  divr16s::dividendu#3 = phi( divr16s::@3/divr16s::dividendu#4, divr16s::@7/divr16s::dividendu#5 )
  divr16u::dividend#1 = divr16s::dividendu#3
  divr16u::divisor#0 = divr16s::divisoru#3
  divr16u::rem#3 = divr16s::remu#3
  call divr16u 
  divr16u::return#2 = divr16u::return#1
  to:divr16s::@9
divr16s::@9: scope:[divr16s]  from divr16s::@4
  divr16s::neg#4 = phi( divr16s::@4/divr16s::neg#6 )
  rem16u#12 = phi( divr16s::@4/rem16u#1 )
  divr16u::return#4 = phi( divr16s::@4/divr16u::return#2 )
  divr16s::$4 = divr16u::return#4
  rem16u#2 = rem16u#12
  divr16s::resultu#0 = divr16s::$4
  divr16s::$5 = divr16s::neg#4 == 0
  if(divr16s::$5) goto divr16s::@5
  to:divr16s::@8
divr16s::@5: scope:[divr16s]  from divr16s::@9
  divr16s::resultu#1 = phi( divr16s::@9/divr16s::resultu#0 )
  rem16u#13 = phi( divr16s::@9/rem16u#2 )
  rem16s#0 = (signed word)rem16u#13
  divr16s::return#0 = (signed word)divr16s::resultu#1
  to:divr16s::@return
divr16s::@8: scope:[divr16s]  from divr16s::@9
  divr16s::resultu#2 = phi( divr16s::@9/divr16s::resultu#0 )
  rem16u#14 = phi( divr16s::@9/rem16u#2 )
  divr16s::$10 = - (signed word)rem16u#14
  rem16s#1 = divr16s::$10
  divr16s::$11 = - (signed word)divr16s::resultu#2
  divr16s::return#1 = divr16s::$11
  to:divr16s::@return
divr16s::@return: scope:[divr16s]  from divr16s::@5 divr16s::@8
  rem16s#10 = phi( divr16s::@5/rem16s#0, divr16s::@8/rem16s#1 )
  rem16u#15 = phi( divr16s::@5/rem16u#13, divr16s::@8/rem16u#14 )
  divr16s::return#4 = phi( divr16s::@5/divr16s::return#0, divr16s::@8/divr16s::return#1 )
  divr16s::return#2 = divr16s::return#4
  rem16u#3 = rem16u#15
  rem16s#2 = rem16s#10
  return 
  to:@return

signed word div16s(signed word div16s::dividend , signed word div16s::divisor)
div16s: scope:[div16s]  from main::@3
  rem16s#17 = phi( main::@3/rem16s#18 )
  rem16u#23 = phi( main::@3/rem16u#24 )
  div16s::divisor#1 = phi( main::@3/div16s::divisor#0 )
  div16s::dividend#1 = phi( main::@3/div16s::dividend#0 )
  divr16s::dividend#0 = div16s::dividend#1
  divr16s::divisor#0 = div16s::divisor#1
  divr16s::rem#0 = 0
  call divr16s 
  divr16s::return#3 = divr16s::return#2
  to:div16s::@1
div16s::@1: scope:[div16s]  from div16s
  rem16s#11 = phi( div16s/rem16s#2 )
  rem16u#16 = phi( div16s/rem16u#3 )
  divr16s::return#5 = phi( div16s/divr16s::return#3 )
  div16s::$0 = divr16s::return#5
  rem16u#4 = rem16u#16
  rem16s#3 = rem16s#11
  div16s::return#0 = div16s::$0
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s::@1
  rem16s#12 = phi( div16s::@1/rem16s#3 )
  rem16u#17 = phi( div16s::@1/rem16u#4 )
  div16s::return#3 = phi( div16s::@1/div16s::return#0 )
  div16s::return#1 = div16s::return#3
  rem16u#5 = rem16u#17
  rem16s#4 = rem16s#12
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  print_char_cursor#45 = phi( __start::@1/print_char_cursor#33 )
  rem16s#29 = phi( __start::@1/rem16s#20 )
  rem16u#41 = phi( __start::@1/rem16u#26 )
  main::$10 = 1 * SIZEOF_SIGNED_WORD
  primenum[main::$10] = 2
  main::$11 = 2 * SIZEOF_SIGNED_WORD
  primenum[main::$11] = 3
  testnum#0 = 3
  lasttest#0 = 2
  lastprime#0 = 2
  to:main::@1
main::@1: scope:[main]  from main main::@11
  print_char_cursor#44 = phi( main/print_char_cursor#45, main::@11/print_char_cursor#9 )
  lastprime#20 = phi( main/lastprime#0, main::@11/lastprime#7 )
  rem16s#28 = phi( main/rem16s#29, main::@11/rem16s#19 )
  rem16u#39 = phi( main/rem16u#41, main::@11/rem16u#25 )
  testnum#15 = phi( main/testnum#0, main::@11/testnum#19 )
  lasttest#6 = phi( main/lasttest#0, main::@11/lasttest#12 )
  main::$12 = lasttest#6 * SIZEOF_SIGNED_WORD
  main::p#0 = primenum[main::$12]
  mul16s::a#0 = main::p#0
  mul16s::b#0 = main::p#0
  call mul16s 
  mul16s::return#2 = mul16s::return#1
  to:main::@8
main::@8: scope:[main]  from main::@1
  print_char_cursor#43 = phi( main::@1/print_char_cursor#44 )
  lastprime#19 = phi( main::@1/lastprime#20 )
  rem16s#25 = phi( main::@1/rem16s#28 )
  rem16u#34 = phi( main::@1/rem16u#39 )
  lasttest#13 = phi( main::@1/lasttest#6 )
  testnum#7 = phi( main::@1/testnum#15 )
  mul16s::return#4 = phi( main::@1/mul16s::return#2 )
  main::$0 = mul16s::return#4
  main::$15 = (signed word)main::$0
  main::$1 = testnum#7 > main::$15
  main::$2 = ! main::$1
  if(main::$2) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@7 main::@8
  print_char_cursor#41 = phi( main::@7/print_char_cursor#42, main::@8/print_char_cursor#43 )
  lastprime#17 = phi( main::@7/lastprime#18, main::@8/lastprime#19 )
  lasttest#19 = phi( main::@7/lasttest#1, main::@8/lasttest#13 )
  rem16s#21 = phi( main::@7/rem16s#24, main::@8/rem16s#25 )
  rem16u#29 = phi( main::@7/rem16u#33, main::@8/rem16u#34 )
  testnum#8 = phi( main::@7/testnum#16, main::@8/testnum#7 )
  testnum#1 = testnum#8 + 2
  primeptr#0 = 2
  to:main::@3
main::@7: scope:[main]  from main::@8
  print_char_cursor#42 = phi( main::@8/print_char_cursor#43 )
  lastprime#18 = phi( main::@8/lastprime#19 )
  rem16s#24 = phi( main::@8/rem16s#25 )
  rem16u#33 = phi( main::@8/rem16u#34 )
  testnum#16 = phi( main::@8/testnum#7 )
  lasttest#7 = phi( main::@8/lasttest#13 )
  lasttest#1 = ++ lasttest#7
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@4
  print_char_cursor#40 = phi( main::@2/print_char_cursor#41, main::@4/print_char_cursor#37 )
  lastprime#16 = phi( main::@2/lastprime#17, main::@4/lastprime#11 )
  lasttest#17 = phi( main::@2/lasttest#19, main::@4/lasttest#8 )
  rem16s#18 = phi( main::@2/rem16s#21, main::@4/rem16s#22 )
  rem16u#24 = phi( main::@2/rem16u#29, main::@4/rem16u#30 )
  testnum#9 = phi( main::@2/testnum#1, main::@4/testnum#17 )
  primeptr#7 = phi( main::@2/primeptr#0, main::@4/primeptr#9 )
  main::$13 = primeptr#7 * SIZEOF_SIGNED_WORD
  div16s::dividend#0 = testnum#9
  div16s::divisor#0 = primenum[main::$13]
  call div16s 
  div16s::return#2 = div16s::return#1
  to:main::@9
main::@9: scope:[main]  from main::@3
  print_char_cursor#39 = phi( main::@3/print_char_cursor#40 )
  lastprime#15 = phi( main::@3/lastprime#16 )
  testnum#18 = phi( main::@3/testnum#9 )
  lasttest#15 = phi( main::@3/lasttest#17 )
  primeptr#8 = phi( main::@3/primeptr#7 )
  rem16s#13 = phi( main::@3/rem16s#4 )
  rem16u#18 = phi( main::@3/rem16u#5 )
  rem16u#6 = rem16u#18
  rem16s#5 = rem16s#13
  primeptr#1 = ++ primeptr#8
  main::$4 = rem16s#5 == 0
  main::$5 = ! main::$4
  if(main::$5) goto main::@4
  to:main::@5
main::@4: scope:[main]  from main::@5 main::@9
  print_char_cursor#37 = phi( main::@5/print_char_cursor#38, main::@9/print_char_cursor#39 )
  rem16s#22 = phi( main::@5/rem16s#26, main::@9/rem16s#5 )
  rem16u#30 = phi( main::@5/rem16u#35, main::@9/rem16u#6 )
  lastprime#11 = phi( main::@5/lastprime#14, main::@9/lastprime#15 )
  testnum#17 = phi( main::@5/testnum#2, main::@9/testnum#18 )
  lasttest#8 = phi( main::@5/lasttest#14, main::@9/lasttest#15 )
  primeptr#9 = phi( main::@5/primeptr#2, main::@9/primeptr#1 )
  main::$6 = primeptr#9 <= lasttest#8
  if(main::$6) goto main::@3
  to:main::@6
main::@5: scope:[main]  from main::@9
  print_char_cursor#38 = phi( main::@9/print_char_cursor#39 )
  rem16s#26 = phi( main::@9/rem16s#5 )
  rem16u#35 = phi( main::@9/rem16u#6 )
  lastprime#14 = phi( main::@9/lastprime#15 )
  lasttest#14 = phi( main::@9/lasttest#15 )
  testnum#10 = phi( main::@9/testnum#18 )
  testnum#2 = testnum#10 + 2
  primeptr#2 = 2
  to:main::@4
main::@6: scope:[main]  from main::@4
  rem16s#27 = phi( main::@4/rem16s#22 )
  rem16u#36 = phi( main::@4/rem16u#30 )
  primeptr#16 = phi( main::@4/primeptr#9 )
  lasttest#20 = phi( main::@4/lasttest#8 )
  print_char_cursor#32 = phi( main::@4/print_char_cursor#37 )
  testnum#11 = phi( main::@4/testnum#17 )
  lastprime#6 = phi( main::@4/lastprime#11 )
  lastprime#1 = ++ lastprime#6
  main::$14 = lastprime#1 * SIZEOF_SIGNED_WORD
  primenum[main::$14] = testnum#11
  print_sint_decimal::w#1 = testnum#11
  call print_sint_decimal 
  to:main::@10
main::@10: scope:[main]  from main::@6
  rem16s#23 = phi( main::@6/rem16s#27 )
  rem16u#31 = phi( main::@6/rem16u#36 )
  primeptr#15 = phi( main::@6/primeptr#16 )
  testnum#21 = phi( main::@6/testnum#11 )
  lasttest#18 = phi( main::@6/lasttest#20 )
  lastprime#12 = phi( main::@6/lastprime#1 )
  print_char_cursor#22 = phi( main::@6/print_char_cursor#5 )
  print_char_cursor#8 = print_char_cursor#22
  print_char::ch#3 = ' '
  call print_char 
  to:main::@11
main::@11: scope:[main]  from main::@10
  rem16s#19 = phi( main::@10/rem16s#23 )
  rem16u#25 = phi( main::@10/rem16u#31 )
  primeptr#13 = phi( main::@10/primeptr#15 )
  testnum#19 = phi( main::@10/testnum#21 )
  lasttest#12 = phi( main::@10/lasttest#18 )
  lastprime#7 = phi( main::@10/lastprime#12 )
  print_char_cursor#23 = phi( main::@10/print_char_cursor#7 )
  print_char_cursor#9 = print_char_cursor#23
  main::$9 = lastprime#7 < $3e8
  if(main::$9) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  print_char_cursor#24 = phi( main::@11/print_char_cursor#9 )
  rem16s#14 = phi( main::@11/rem16s#19 )
  rem16u#19 = phi( main::@11/rem16u#25 )
  primeptr#10 = phi( main::@11/primeptr#13 )
  lastprime#8 = phi( main::@11/lastprime#7 )
  lasttest#9 = phi( main::@11/lasttest#12 )
  testnum#12 = phi( main::@11/testnum#19 )
  testnum#3 = testnum#12
  lasttest#2 = lasttest#9
  lastprime#2 = lastprime#8
  primeptr#3 = primeptr#10
  rem16u#7 = rem16u#19
  rem16s#6 = rem16s#14
  print_char_cursor#10 = print_char_cursor#24
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  print_screen#0 = (byte*)$400
  print_line_cursor#0 = print_screen#0
  print_char_cursor#11 = print_line_cursor#0
  rem16u#8 = 0
  rem16s#7 = 0
  testnum#4 = 0
  primeptr#4 = 0
  lasttest#3 = 0
  lastprime#3 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  print_line_cursor#4 = phi( __start::__init1/print_line_cursor#0 )
  print_screen#4 = phi( __start::__init1/print_screen#0 )
  print_char_cursor#33 = phi( __start::__init1/print_char_cursor#11 )
  rem16s#20 = phi( __start::__init1/rem16s#7 )
  rem16u#26 = phi( __start::__init1/rem16u#8 )
  primeptr#14 = phi( __start::__init1/primeptr#4 )
  lastprime#13 = phi( __start::__init1/lastprime#3 )
  lasttest#16 = phi( __start::__init1/lasttest#3 )
  testnum#20 = phi( __start::__init1/testnum#4 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  print_line_cursor#3 = phi( __start::@1/print_line_cursor#4 )
  print_screen#3 = phi( __start::@1/print_screen#4 )
  print_char_cursor#25 = phi( __start::@1/print_char_cursor#10 )
  rem16s#15 = phi( __start::@1/rem16s#6 )
  rem16u#20 = phi( __start::@1/rem16u#7 )
  primeptr#11 = phi( __start::@1/primeptr#3 )
  lastprime#9 = phi( __start::@1/lastprime#2 )
  lasttest#10 = phi( __start::@1/lasttest#2 )
  testnum#13 = phi( __start::@1/testnum#3 )
  testnum#5 = testnum#13
  lasttest#4 = lasttest#10
  lastprime#4 = lastprime#9
  primeptr#5 = primeptr#11
  rem16u#9 = rem16u#20
  rem16s#8 = rem16s#15
  print_char_cursor#12 = print_char_cursor#25
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  lastprime#10 = phi( __start::@2/lastprime#4 )
  lasttest#11 = phi( __start::@2/lasttest#4 )
  primeptr#12 = phi( __start::@2/primeptr#5 )
  testnum#14 = phi( __start::@2/testnum#5 )
  rem16s#16 = phi( __start::@2/rem16s#8 )
  rem16u#21 = phi( __start::@2/rem16u#9 )
  print_char_cursor#26 = phi( __start::@2/print_char_cursor#12 )
  print_line_cursor#2 = phi( __start::@2/print_line_cursor#3 )
  print_screen#2 = phi( __start::@2/print_screen#3 )
  print_screen#1 = print_screen#2
  print_line_cursor#1 = print_line_cursor#2
  print_char_cursor#13 = print_char_cursor#26
  rem16u#10 = rem16u#21
  rem16s#9 = rem16s#16
  testnum#6 = testnum#14
  primeptr#6 = primeptr#12
  lasttest#5 = lasttest#11
  lastprime#5 = lastprime#10
  return 
  to:@return

SYMBOL TABLE SSA
constant byte BINARY = 2
constant byte DECIMAL = $a
constant byte* DIGITS[]  = "0123456789abcdef"z
constant byte HEXADECIMAL = $10
constant byte OCTAL = 8
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant word* RADIX_BINARY_VALUES[]  = { $8000, $4000, $2000, $1000, $800, $400, $200, $100, $80, $40, $20, $10, 8, 4, 2 }
constant word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
constant word* RADIX_HEXADECIMAL_VALUES[]  = { $1000, $100, $10 }
constant word* RADIX_OCTAL_VALUES[]  = { $8000, $1000, $200, $40, 8 }
constant byte SIZEOF_SIGNED_WORD = 2
constant byte SIZEOF_WORD = 2
void __start()
constant byte* decimal_digits[6]  = { fill( 6, 0) }
signed word div16s(signed word div16s::dividend , signed word div16s::divisor)
signed word~ div16s::$0
signed word div16s::dividend
signed word div16s::dividend#0
signed word div16s::dividend#1
signed word div16s::divisor
signed word div16s::divisor#0
signed word div16s::divisor#1
signed word div16s::return
signed word div16s::return#0
signed word div16s::return#1
signed word div16s::return#2
signed word div16s::return#3
signed word divr16s(signed word divr16s::dividend , signed word divr16s::divisor , signed word divr16s::rem)
bool~ divr16s::$0
bool~ divr16s::$1
signed word~ divr16s::$10
signed word~ divr16s::$11
bool~ divr16s::$2
bool~ divr16s::$3
word~ divr16s::$4
bool~ divr16s::$5
signed word~ divr16s::$6
signed word~ divr16s::$7
signed word~ divr16s::$8
number~ divr16s::$9
signed word divr16s::dividend
signed word divr16s::dividend#0
signed word divr16s::dividend#1
signed word divr16s::dividend#2
signed word divr16s::dividend#3
word divr16s::dividendu
word divr16s::dividendu#0
word divr16s::dividendu#1
word divr16s::dividendu#2
word divr16s::dividendu#3
word divr16s::dividendu#4
word divr16s::dividendu#5
word divr16s::dividendu#6
signed word divr16s::divisor
signed word divr16s::divisor#0
signed word divr16s::divisor#1
signed word divr16s::divisor#2
signed word divr16s::divisor#3
signed word divr16s::divisor#4
signed word divr16s::divisor#5
signed word divr16s::divisor#6
word divr16s::divisoru
word divr16s::divisoru#0
word divr16s::divisoru#1
word divr16s::divisoru#2
word divr16s::divisoru#3
byte divr16s::neg
byte divr16s::neg#0
byte divr16s::neg#1
byte divr16s::neg#2
byte divr16s::neg#3
byte divr16s::neg#4
byte divr16s::neg#5
byte divr16s::neg#6
byte divr16s::neg#7
byte divr16s::neg#8
signed word divr16s::rem
signed word divr16s::rem#0
signed word divr16s::rem#1
signed word divr16s::rem#2
signed word divr16s::rem#3
word divr16s::remu
word divr16s::remu#0
word divr16s::remu#1
word divr16s::remu#2
word divr16s::remu#3
word divr16s::remu#4
word divr16s::remu#5
word divr16s::remu#6
word divr16s::resultu
word divr16s::resultu#0
word divr16s::resultu#1
word divr16s::resultu#2
signed word divr16s::return
signed word divr16s::return#0
signed word divr16s::return#1
signed word divr16s::return#2
signed word divr16s::return#3
signed word divr16s::return#4
signed word divr16s::return#5
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
word~ divr16u::$0
byte~ divr16u::$1
word~ divr16u::$10
bool~ divr16u::$11
number~ divr16u::$2
bool~ divr16u::$3
bool~ divr16u::$4
number~ divr16u::$5
word~ divr16u::$6
word~ divr16u::$7
bool~ divr16u::$8
bool~ divr16u::$9
word divr16u::dividend
word divr16u::dividend#0
word divr16u::dividend#1
word divr16u::dividend#2
word divr16u::dividend#3
word divr16u::dividend#4
word divr16u::dividend#5
word divr16u::dividend#6
word divr16u::dividend#7
word divr16u::divisor
word divr16u::divisor#0
word divr16u::divisor#1
word divr16u::divisor#2
word divr16u::divisor#3
word divr16u::divisor#4
word divr16u::divisor#5
word divr16u::divisor#6
byte divr16u::i
byte divr16u::i#0
byte divr16u::i#1
byte divr16u::i#2
byte divr16u::i#3
byte divr16u::i#4
byte divr16u::i#5
byte divr16u::i#6
word divr16u::quotient
word divr16u::quotient#0
word divr16u::quotient#1
word divr16u::quotient#2
word divr16u::quotient#3
word divr16u::quotient#4
word divr16u::quotient#5
word divr16u::quotient#6
word divr16u::quotient#7
word divr16u::quotient#8
word divr16u::rem
word divr16u::rem#0
word divr16u::rem#1
word divr16u::rem#10
word divr16u::rem#2
word divr16u::rem#3
word divr16u::rem#4
word divr16u::rem#5
word divr16u::rem#6
word divr16u::rem#7
word divr16u::rem#8
word divr16u::rem#9
word divr16u::return
word divr16u::return#0
word divr16u::return#1
word divr16u::return#2
word divr16u::return#3
word divr16u::return#4
signed word lastprime
signed word lastprime#0
signed word lastprime#1
signed word lastprime#10
signed word lastprime#11
signed word lastprime#12
signed word lastprime#13
signed word lastprime#14
signed word lastprime#15
signed word lastprime#16
signed word lastprime#17
signed word lastprime#18
signed word lastprime#19
signed word lastprime#2
signed word lastprime#20
signed word lastprime#3
signed word lastprime#4
signed word lastprime#5
signed word lastprime#6
signed word lastprime#7
signed word lastprime#8
signed word lastprime#9
signed word lasttest
signed word lasttest#0
signed word lasttest#1
signed word lasttest#10
signed word lasttest#11
signed word lasttest#12
signed word lasttest#13
signed word lasttest#14
signed word lasttest#15
signed word lasttest#16
signed word lasttest#17
signed word lasttest#18
signed word lasttest#19
signed word lasttest#2
signed word lasttest#20
signed word lasttest#3
signed word lasttest#4
signed word lasttest#5
signed word lasttest#6
signed word lasttest#7
signed word lasttest#8
signed word lasttest#9
void main()
signed dword~ main::$0
bool~ main::$1
number~ main::$10
number~ main::$11
signed word~ main::$12
signed word~ main::$13
signed word~ main::$14
signed word~ main::$15
bool~ main::$2
bool~ main::$4
bool~ main::$5
bool~ main::$6
bool~ main::$9
signed word main::p
signed word main::p#0
signed dword mul16s(signed word mul16s::a , signed word mul16s::b)
dword~ mul16s::$0
bool~ mul16s::$1
word~ mul16s::$10
word~ mul16s::$11
word~ mul16s::$12
word~ mul16s::$13
word~ mul16s::$14
bool~ mul16s::$2
bool~ mul16s::$3
bool~ mul16s::$4
word~ mul16s::$6
word~ mul16s::$7
word~ mul16s::$9
signed word mul16s::a
signed word mul16s::a#0
signed word mul16s::a#1
signed word mul16s::a#2
signed word mul16s::a#3
signed word mul16s::a#4
signed word mul16s::a#5
signed word mul16s::b
signed word mul16s::b#0
signed word mul16s::b#1
signed word mul16s::b#2
signed word mul16s::b#3
signed word mul16s::b#4
dword mul16s::m
dword mul16s::m#0
dword mul16s::m#1
dword mul16s::m#2
dword mul16s::m#3
dword mul16s::m#4
dword mul16s::m#5
dword mul16s::m#6
signed dword mul16s::return
signed dword mul16s::return#0
signed dword mul16s::return#1
signed dword mul16s::return#2
signed dword mul16s::return#3
signed dword mul16s::return#4
dword mul16u(word mul16u::a , word mul16u::b)
bool~ mul16u::$0
number~ mul16u::$1
bool~ mul16u::$2
bool~ mul16u::$3
dword~ mul16u::$4
word~ mul16u::$5
dword~ mul16u::$6
word mul16u::a
word mul16u::a#0
word mul16u::a#1
word mul16u::a#2
word mul16u::a#3
word mul16u::a#4
word mul16u::a#5
word mul16u::a#6
word mul16u::b
word mul16u::b#0
word mul16u::b#1
dword mul16u::mb
dword mul16u::mb#0
dword mul16u::mb#1
dword mul16u::mb#2
dword mul16u::mb#3
dword mul16u::mb#4
dword mul16u::mb#5
dword mul16u::res
dword mul16u::res#0
dword mul16u::res#1
dword mul16u::res#2
dword mul16u::res#3
dword mul16u::res#4
dword mul16u::res#5
dword mul16u::res#6
dword mul16u::return
dword mul16u::return#0
dword mul16u::return#1
dword mul16u::return#2
dword mul16u::return#3
dword mul16u::return#4
constant signed word* primenum[$3e8]  = { fill( $3e8, 0) }
signed word primeptr
signed word primeptr#0
signed word primeptr#1
signed word primeptr#10
signed word primeptr#11
signed word primeptr#12
signed word primeptr#13
signed word primeptr#14
signed word primeptr#15
signed word primeptr#16
signed word primeptr#2
signed word primeptr#3
signed word primeptr#4
signed word primeptr#5
signed word primeptr#6
signed word primeptr#7
signed word primeptr#8
signed word primeptr#9
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0
byte print_char::ch#1
byte print_char::ch#2
byte print_char::ch#3
byte print_char::ch#4
byte* print_char_cursor
byte* print_char_cursor#0
byte* print_char_cursor#1
byte* print_char_cursor#10
byte* print_char_cursor#11
byte* print_char_cursor#12
byte* print_char_cursor#13
byte* print_char_cursor#14
byte* print_char_cursor#15
byte* print_char_cursor#16
byte* print_char_cursor#17
byte* print_char_cursor#18
byte* print_char_cursor#19
byte* print_char_cursor#2
byte* print_char_cursor#20
byte* print_char_cursor#21
byte* print_char_cursor#22
byte* print_char_cursor#23
byte* print_char_cursor#24
byte* print_char_cursor#25
byte* print_char_cursor#26
byte* print_char_cursor#27
byte* print_char_cursor#28
byte* print_char_cursor#29
byte* print_char_cursor#3
byte* print_char_cursor#30
byte* print_char_cursor#31
byte* print_char_cursor#32
byte* print_char_cursor#33
byte* print_char_cursor#34
byte* print_char_cursor#35
byte* print_char_cursor#36
byte* print_char_cursor#37
byte* print_char_cursor#38
byte* print_char_cursor#39
byte* print_char_cursor#4
byte* print_char_cursor#40
byte* print_char_cursor#41
byte* print_char_cursor#42
byte* print_char_cursor#43
byte* print_char_cursor#44
byte* print_char_cursor#45
byte* print_char_cursor#5
byte* print_char_cursor#6
byte* print_char_cursor#7
byte* print_char_cursor#8
byte* print_char_cursor#9
byte* print_line_cursor
byte* print_line_cursor#0
byte* print_line_cursor#1
byte* print_line_cursor#2
byte* print_line_cursor#3
byte* print_line_cursor#4
byte* print_screen
byte* print_screen#0
byte* print_screen#1
byte* print_screen#2
byte* print_screen#3
byte* print_screen#4
void print_sint_decimal(signed word print_sint_decimal::w)
bool~ print_sint_decimal::$0
signed word~ print_sint_decimal::$5
signed word print_sint_decimal::w
signed word print_sint_decimal::w#0
signed word print_sint_decimal::w#1
signed word print_sint_decimal::w#2
signed word print_sint_decimal::w#3
signed word print_sint_decimal::w#4
signed word print_sint_decimal::w#5
signed word print_sint_decimal::w#6
signed word print_sint_decimal::w#7
void print_str(byte* print_str::str)
bool~ print_str::$1
byte* print_str::str
byte* print_str::str#0
byte* print_str::str#1
byte* print_str::str#2
byte* print_str::str#3
byte* print_str::str#4
byte* print_str::str#5
signed word rem16s
signed word rem16s#0
signed word rem16s#1
signed word rem16s#10
signed word rem16s#11
signed word rem16s#12
signed word rem16s#13
signed word rem16s#14
signed word rem16s#15
signed word rem16s#16
signed word rem16s#17
signed word rem16s#18
signed word rem16s#19
signed word rem16s#2
signed word rem16s#20
signed word rem16s#21
signed word rem16s#22
signed word rem16s#23
signed word rem16s#24
signed word rem16s#25
signed word rem16s#26
signed word rem16s#27
signed word rem16s#28
signed word rem16s#29
signed word rem16s#3
signed word rem16s#4
signed word rem16s#5
signed word rem16s#6
signed word rem16s#7
signed word rem16s#8
signed word rem16s#9
word rem16u
word rem16u#0
word rem16u#1
word rem16u#10
word rem16u#11
word rem16u#12
word rem16u#13
word rem16u#14
word rem16u#15
word rem16u#16
word rem16u#17
word rem16u#18
word rem16u#19
word rem16u#2
word rem16u#20
word rem16u#21
word rem16u#22
word rem16u#23
word rem16u#24
word rem16u#25
word rem16u#26
word rem16u#27
word rem16u#28
word rem16u#29
word rem16u#3
word rem16u#30
word rem16u#31
word rem16u#32
word rem16u#33
word rem16u#34
word rem16u#35
word rem16u#36
word rem16u#37
word rem16u#38
word rem16u#39
word rem16u#4
word rem16u#40
word rem16u#41
word rem16u#5
word rem16u#6
word rem16u#7
word rem16u#8
word rem16u#9
signed word testnum
signed word testnum#0
signed word testnum#1
signed word testnum#10
signed word testnum#11
signed word testnum#12
signed word testnum#13
signed word testnum#14
signed word testnum#15
signed word testnum#16
signed word testnum#17
signed word testnum#18
signed word testnum#19
signed word testnum#2
signed word testnum#20
signed word testnum#21
signed word testnum#3
signed word testnum#4
signed word testnum#5
signed word testnum#6
signed word testnum#7
signed word testnum#8
signed word testnum#9
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
bool~ utoa::$0
bool~ utoa::$1
byte~ utoa::$10
byte~ utoa::$11
bool~ utoa::$2
bool~ utoa::$3
number~ utoa::$4
bool~ utoa::$5
bool~ utoa::$6
bool~ utoa::$7
bool~ utoa::$8
word~ utoa::$9
byte* utoa::buffer
byte* utoa::buffer#0
byte* utoa::buffer#1
byte* utoa::buffer#10
byte* utoa::buffer#11
byte* utoa::buffer#12
byte* utoa::buffer#13
byte* utoa::buffer#14
byte* utoa::buffer#15
byte* utoa::buffer#16
byte* utoa::buffer#17
byte* utoa::buffer#18
byte* utoa::buffer#19
byte* utoa::buffer#2
byte* utoa::buffer#20
byte* utoa::buffer#21
byte* utoa::buffer#3
byte* utoa::buffer#4
byte* utoa::buffer#5
byte* utoa::buffer#6
byte* utoa::buffer#7
byte* utoa::buffer#8
byte* utoa::buffer#9
byte utoa::digit
byte utoa::digit#0
byte utoa::digit#1
byte utoa::digit#2
byte utoa::digit#3
byte utoa::digit#4
byte utoa::digit#5
byte utoa::digit#6
word utoa::digit_value
word utoa::digit_value#0
word utoa::digit_value#1
word* utoa::digit_values
word* utoa::digit_values#0
word* utoa::digit_values#1
word* utoa::digit_values#10
word* utoa::digit_values#2
word* utoa::digit_values#3
word* utoa::digit_values#4
word* utoa::digit_values#5
word* utoa::digit_values#6
word* utoa::digit_values#7
word* utoa::digit_values#8
word* utoa::digit_values#9
byte utoa::max_digits
byte utoa::max_digits#0
byte utoa::max_digits#1
byte utoa::max_digits#10
byte utoa::max_digits#2
byte utoa::max_digits#3
byte utoa::max_digits#4
byte utoa::max_digits#5
byte utoa::max_digits#6
byte utoa::max_digits#7
byte utoa::max_digits#8
byte utoa::max_digits#9
byte utoa::radix
byte utoa::radix#0
byte utoa::radix#1
byte utoa::radix#2
byte utoa::radix#3
byte utoa::radix#4
byte utoa::started
byte utoa::started#0
byte utoa::started#1
byte utoa::started#2
byte utoa::started#3
byte utoa::started#4
word utoa::value
word utoa::value#0
word utoa::value#1
word utoa::value#10
word utoa::value#11
word utoa::value#12
word utoa::value#13
word utoa::value#14
word utoa::value#15
word utoa::value#2
word utoa::value#3
word utoa::value#4
word utoa::value#5
word utoa::value#6
word utoa::value#7
word utoa::value#8
word utoa::value#9
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
bool~ utoa_append::$0
byte* utoa_append::buffer
byte* utoa_append::buffer#0
byte* utoa_append::buffer#1
byte* utoa_append::buffer#2
byte* utoa_append::buffer#3
byte* utoa_append::buffer#4
byte utoa_append::digit
byte utoa_append::digit#0
byte utoa_append::digit#1
byte utoa_append::digit#2
byte utoa_append::digit#3
byte utoa_append::digit#4
word utoa_append::return
word utoa_append::return#0
word utoa_append::return#1
word utoa_append::return#2
word utoa_append::return#3
word utoa_append::return#4
word utoa_append::sub
word utoa_append::sub#0
word utoa_append::sub#1
word utoa_append::sub#2
word utoa_append::sub#3
word utoa_append::value
word utoa_append::value#0
word utoa_append::value#1
word utoa_append::value#2
word utoa_append::value#3
word utoa_append::value#4
word utoa_append::value#5

Adding number conversion cast (unumber) 0 in print_str::$1 = 0 != *print_str::str#2
Adding number conversion cast (snumber) 0 in print_sint_decimal::$0 = print_sint_decimal::w#2 < 0
Adding number conversion cast (unumber) 5 in utoa::max_digits#1 = 5
Adding number conversion cast (unumber) 4 in utoa::max_digits#2 = 4
Adding number conversion cast (unumber) 6 in utoa::max_digits#3 = 6
Adding number conversion cast (unumber) $10 in utoa::max_digits#4 = $10
Adding number conversion cast (unumber) 0 in *utoa::buffer#3 = 0
Adding number conversion cast (unumber) 1 in utoa::$4 = utoa::max_digits#5 - 1
Adding number conversion cast (unumber) utoa::$4 in utoa::$4 = utoa::max_digits#5 - (unumber)1
Adding number conversion cast (unumber) 0 in *utoa::buffer#4 = 0
Adding number conversion cast (unumber) 1 in utoa::started#1 = 1
Adding number conversion cast (unumber) 0 in mul16u::$0 = mul16u::a#2 != 0
Adding number conversion cast (unumber) 1 in mul16u::$1 = mul16u::a#3 & 1
Adding number conversion cast (unumber) mul16u::$1 in mul16u::$1 = mul16u::a#3 & (unumber)1
Adding number conversion cast (unumber) 0 in mul16u::$2 = mul16u::$1 != 0
Adding number conversion cast (unumber) 1 in mul16u::$5 = mul16u::a#4 >> 1
Adding number conversion cast (unumber) 1 in mul16u::$6 = mul16u::mb#2 << 1
Adding number conversion cast (snumber) 0 in mul16s::$1 = mul16s::a#2 < 0
Adding number conversion cast (snumber) 0 in mul16s::$3 = mul16s::b#2 < 0
Adding number conversion cast (unumber) 1 in divr16u::$0 = divr16u::rem#4 << 1
Adding number conversion cast (unumber) $80 in divr16u::$2 = divr16u::$1 & $80
Adding number conversion cast (unumber) divr16u::$2 in divr16u::$2 = divr16u::$1 & (unumber)$80
Adding number conversion cast (unumber) 0 in divr16u::$3 = divr16u::$2 != 0
Adding number conversion cast (unumber) 1 in divr16u::$6 = divr16u::dividend#3 << 1
Adding number conversion cast (unumber) 1 in divr16u::$7 = divr16u::quotient#3 << 1
Adding number conversion cast (unumber) 1 in divr16u::$5 = divr16u::rem#6 | 1
Adding number conversion cast (unumber) divr16u::$5 in divr16u::$5 = divr16u::rem#6 | (unumber)1
Adding number conversion cast (snumber) 0 in divr16s::$0 = divr16s::dividend#1 < 0
Adding number conversion cast (snumber) 0 in divr16s::$1 = divr16s::rem#1 < 0
Adding number conversion cast (unumber) 1 in divr16s::neg#1 = 1
Adding number conversion cast (snumber) 0 in divr16s::$3 = divr16s::divisor#1 < 0
Adding number conversion cast (unumber) 1 in divr16s::$9 = divr16s::neg#3 ^ 1
Adding number conversion cast (unumber) divr16s::$9 in divr16s::$9 = divr16s::neg#3 ^ (unumber)1
Adding number conversion cast (unumber) 0 in divr16s::$5 = divr16s::neg#4 == 0
Adding number conversion cast (snumber) 0 in divr16s::rem#0 = 0
Adding number conversion cast (unumber) 1 in main::$10 = 1 * SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) main::$10 in main::$10 = (unumber)1 * SIZEOF_SIGNED_WORD
Adding number conversion cast (snumber) 2 in primenum[main::$10] = 2
Adding number conversion cast (unumber) 2 in main::$11 = 2 * SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) main::$11 in main::$11 = (unumber)2 * SIZEOF_SIGNED_WORD
Adding number conversion cast (snumber) 3 in primenum[main::$11] = 3
Adding number conversion cast (snumber) 3 in testnum#0 = 3
Adding number conversion cast (snumber) 2 in lasttest#0 = 2
Adding number conversion cast (snumber) 2 in lastprime#0 = 2
Adding number conversion cast (snumber) 2 in testnum#1 = testnum#8 + 2
Adding number conversion cast (snumber) 2 in primeptr#0 = 2
Adding number conversion cast (snumber) 0 in main::$4 = rem16s#5 == 0
Adding number conversion cast (snumber) 2 in testnum#2 = testnum#10 + 2
Adding number conversion cast (snumber) 2 in primeptr#2 = 2
Adding number conversion cast (snumber) $3e8 in main::$9 = lastprime#7 < $3e8
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast utoa::max_digits#1 = (unumber)5
Inlining cast utoa::max_digits#2 = (unumber)4
Inlining cast utoa::max_digits#3 = (unumber)6
Inlining cast utoa::max_digits#4 = (unumber)$10
Inlining cast *utoa::buffer#3 = (unumber)0
Inlining cast *utoa::buffer#4 = (unumber)0
Inlining cast utoa::started#1 = (unumber)1
Inlining cast divr16s::neg#1 = (unumber)1
Inlining cast divr16s::rem#0 = (snumber)0
Inlining cast primenum[main::$10] = (snumber)2
Inlining cast primenum[main::$11] = (snumber)3
Inlining cast testnum#0 = (snumber)3
Inlining cast lasttest#0 = (snumber)2
Inlining cast lastprime#0 = (snumber)2
Inlining cast primeptr#0 = (snumber)2
Inlining cast primeptr#2 = (snumber)2
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast $3e8
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 2
Finalized unsigned number type (byte) 2
Finalized signed number type (signed byte) 3
Finalized signed number type (signed byte) 3
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed word) $3e8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in utoa::$4 = utoa::max_digits#5 - 1
Inferred type updated to byte in mul16u::$1 = mul16u::a#3 & 1
Inferred type updated to byte in divr16u::$2 = divr16u::$1 & $80
Inferred type updated to word in divr16u::$5 = divr16u::rem#6 | 1
Inferred type updated to byte in divr16s::$9 = divr16s::neg#3 ^ 1
Inferred type updated to byte in main::$10 = 1 * SIZEOF_SIGNED_WORD
Inferred type updated to byte in main::$11 = 2 * SIZEOF_SIGNED_WORD
Inversing boolean not [137] mul16u::$3 = mul16u::$1 == 0 from [136] mul16u::$2 = mul16u::$1 != 0
Inversing boolean not [161] mul16s::$2 = mul16s::a#2 >= 0 from [160] mul16s::$1 = mul16s::a#2 < 0
Inversing boolean not [165] mul16s::$4 = mul16s::b#2 >= 0 from [164] mul16s::$3 = mul16s::b#2 < 0
Inversing boolean not [193] divr16u::$4 = divr16u::$2 == 0 from [192] divr16u::$3 = divr16u::$2 != 0
Inversing boolean not [201] divr16u::$9 = divr16u::rem#5 < divr16u::divisor#1 from [200] divr16u::$8 = divr16u::rem#5 >= divr16u::divisor#1
Inversing boolean not [309] main::$2 = testnum#7 <= main::$15 from [308] main::$1 = testnum#7 > main::$15
Inversing boolean not [327] main::$5 = rem16s#5 != 0 from [326] main::$4 = rem16s#5 == 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias print_str::str#2 = print_str::str#3 print_str::str#4 
Alias print_char_cursor#1 = print_char_cursor#27 print_char_cursor#28 print_char_cursor#15 
Alias print_char_cursor#0 = print_char_cursor#14 
Alias print_char_cursor#29 = print_char_cursor#35 print_char_cursor#30 
Alias print_sint_decimal::w#2 = print_sint_decimal::w#5 print_sint_decimal::w#3 print_sint_decimal::w#7 print_sint_decimal::w#6 
Alias print_char_cursor#16 = print_char_cursor#2 
Alias print_sint_decimal::w#0 = print_sint_decimal::$5 
Alias print_char_cursor#17 = print_char_cursor#3 
Alias print_char_cursor#31 = print_char_cursor#36 
Alias print_char_cursor#18 = print_char_cursor#4 print_char_cursor#19 print_char_cursor#5 
Alias print_char_cursor#21 = print_char_cursor#6 print_char_cursor#7 
Alias utoa::value#10 = utoa::value#8 utoa::value#12 utoa::value#13 utoa::value#9 utoa::value#14 utoa::value#15 utoa::value#11 
Alias utoa::buffer#10 = utoa::buffer#17 utoa::buffer#21 utoa::buffer#16 utoa::buffer#18 utoa::buffer#13 utoa::buffer#19 utoa::buffer#20 utoa::buffer#6 
Alias utoa::radix#1 = utoa::radix#2 utoa::radix#3 utoa::radix#4 
Alias utoa::digit#2 = utoa::digit#3 utoa::digit#6 utoa::digit#5 
Alias utoa::digit_values#10 = utoa::digit_values#5 utoa::digit_values#6 utoa::digit_values#9 
Alias utoa::value#2 = utoa::value#5 utoa::value#3 utoa::value#4 
Alias utoa::started#2 = utoa::started#3 
Alias utoa::buffer#11 = utoa::buffer#12 utoa::buffer#7 utoa::buffer#8 utoa::buffer#9 
Alias utoa::max_digits#10 = utoa::max_digits#8 utoa::max_digits#5 utoa::max_digits#9 
Alias utoa::digit_value#0 = utoa::digit_value#1 
Alias utoa_append::return#0 = utoa_append::return#3 
Alias utoa::value#1 = utoa::$9 
Alias utoa_append::digit#2 = utoa_append::digit#4 utoa_append::digit#3 
Alias utoa_append::value#2 = utoa_append::value#3 utoa_append::value#4 utoa_append::return#1 utoa_append::return#4 utoa_append::return#2 
Alias utoa_append::sub#1 = utoa_append::sub#2 
Alias utoa_append::buffer#1 = utoa_append::buffer#4 utoa_append::buffer#2 
Alias mul16u::a#2 = mul16u::a#3 mul16u::a#6 
Alias mul16u::mb#3 = mul16u::mb#4 mul16u::mb#5 
Alias mul16u::res#2 = mul16u::res#5 mul16u::res#4 mul16u::return#0 mul16u::res#3 mul16u::return#3 mul16u::return#1 
Alias mul16u::a#0 = mul16u::$5 
Alias mul16u::mb#1 = mul16u::$6 
Alias mul16u::res#1 = mul16u::$4 
Alias mul16u::return#2 = mul16u::return#4 
Alias mul16s::a#1 = mul16s::a#2 mul16s::a#5 
Alias mul16s::b#1 = mul16s::b#4 mul16s::b#3 
Alias mul16s::m#0 = mul16s::$0 mul16s::m#3 
Alias mul16s::$11 = mul16s::$7 
Alias mul16s::m#5 = mul16s::m#6 
Alias mul16s::a#3 = mul16s::a#4 
Alias mul16s::$12 = mul16s::$10 
Alias mul16s::return#0 = mul16s::return#3 mul16s::return#1 
Alias divr16u::rem#0 = divr16u::$0 divr16u::rem#6 
Alias divr16u::dividend#0 = divr16u::$6 divr16u::dividend#7 
Alias divr16u::quotient#1 = divr16u::$7 divr16u::quotient#4 
Alias divr16u::dividend#2 = divr16u::dividend#6 
Alias divr16u::quotient#6 = divr16u::quotient#7 
Alias divr16u::divisor#3 = divr16u::divisor#4 
Alias divr16u::i#5 = divr16u::i#6 
Alias divr16u::rem#1 = divr16u::$5 
Alias divr16u::rem#5 = divr16u::rem#7 
Alias divr16u::divisor#1 = divr16u::divisor#2 
Alias divr16u::i#3 = divr16u::i#4 
Alias divr16u::rem#2 = divr16u::$10 
Alias divr16u::rem#10 = divr16u::rem#8 
Alias divr16u::return#0 = divr16u::quotient#5 divr16u::quotient#8 divr16u::return#3 divr16u::return#1 
Alias rem16u#0 = rem16u#11 rem16u#1 
Alias divr16s::dividend#1 = divr16s::dividend#2 divr16s::dividend#3 
Alias divr16s::rem#1 = divr16s::rem#2 divr16s::rem#3 
Alias divr16s::divisor#4 = divr16s::divisor#6 divr16s::divisor#5 
Alias rem16u#37 = rem16u#40 rem16u#38 
Alias divr16s::neg#0 = divr16s::neg#7 
Alias divr16s::divisor#1 = divr16s::divisor#2 divr16s::divisor#3 
Alias divr16s::neg#3 = divr16s::neg#5 divr16s::neg#8 
Alias divr16s::dividendu#4 = divr16s::dividendu#6 divr16s::dividendu#5 
Alias divr16s::remu#4 = divr16s::remu#6 divr16s::remu#5 
Alias rem16u#27 = rem16u#32 rem16u#28 
Alias divr16s::neg#2 = divr16s::$9 
Alias divr16u::return#2 = divr16u::return#4 
Alias divr16s::neg#4 = divr16s::neg#6 
Alias rem16u#12 = rem16u#2 rem16u#13 rem16u#14 
Alias divr16s::resultu#0 = divr16s::$4 divr16s::resultu#1 divr16s::resultu#2 
Alias rem16s#1 = divr16s::$10 
Alias divr16s::return#1 = divr16s::$11 
Alias divr16s::return#2 = divr16s::return#4 
Alias rem16u#15 = rem16u#3 
Alias rem16s#10 = rem16s#2 
Alias divr16s::return#3 = divr16s::return#5 
Alias rem16u#16 = rem16u#4 rem16u#17 rem16u#5 
Alias rem16s#11 = rem16s#3 rem16s#12 rem16s#4 
Alias div16s::return#0 = div16s::$0 div16s::return#3 div16s::return#1 
Alias mul16s::return#2 = mul16s::return#4 
Alias testnum#15 = testnum#7 testnum#16 
Alias lasttest#13 = lasttest#6 lasttest#7 
Alias rem16u#33 = rem16u#34 rem16u#39 
Alias rem16s#24 = rem16s#25 rem16s#28 
Alias lastprime#18 = lastprime#19 lastprime#20 
Alias print_char_cursor#42 = print_char_cursor#43 print_char_cursor#44 
Alias primeptr#7 = primeptr#8 
Alias lasttest#14 = lasttest#15 lasttest#17 
Alias testnum#10 = testnum#18 testnum#9 
Alias lastprime#14 = lastprime#15 lastprime#16 
Alias print_char_cursor#38 = print_char_cursor#39 print_char_cursor#40 
Alias rem16u#18 = rem16u#6 rem16u#35 
Alias rem16s#13 = rem16s#5 rem16s#26 
Alias lastprime#11 = lastprime#6 
Alias testnum#11 = testnum#17 testnum#21 testnum#19 testnum#12 testnum#3 
Alias print_char_cursor#32 = print_char_cursor#37 
Alias lasttest#12 = lasttest#20 lasttest#8 lasttest#18 lasttest#9 lasttest#2 
Alias primeptr#10 = primeptr#16 primeptr#9 primeptr#15 primeptr#13 primeptr#3 
Alias rem16u#19 = rem16u#36 rem16u#30 rem16u#31 rem16u#25 rem16u#7 
Alias rem16s#14 = rem16s#27 rem16s#22 rem16s#23 rem16s#19 rem16s#6 
Alias lastprime#1 = lastprime#12 lastprime#7 lastprime#8 lastprime#2 
Alias print_char_cursor#22 = print_char_cursor#8 
Alias print_char_cursor#10 = print_char_cursor#9 print_char_cursor#23 print_char_cursor#24 
Alias print_screen#0 = print_line_cursor#0 print_char_cursor#11 print_char_cursor#33 print_screen#4 print_line_cursor#4 print_screen#3 print_line_cursor#3 print_screen#2 print_line_cursor#2 print_screen#1 print_line_cursor#1 
Alias testnum#20 = testnum#4 
Alias lasttest#16 = lasttest#3 
Alias lastprime#13 = lastprime#3 
Alias primeptr#14 = primeptr#4 
Alias rem16u#26 = rem16u#8 
Alias rem16s#20 = rem16s#7 
Alias testnum#13 = testnum#5 testnum#14 testnum#6 
Alias lasttest#10 = lasttest#4 lasttest#11 lasttest#5 
Alias lastprime#10 = lastprime#4 lastprime#9 lastprime#5 
Alias primeptr#11 = primeptr#5 primeptr#12 primeptr#6 
Alias rem16u#10 = rem16u#9 rem16u#20 rem16u#21 
Alias rem16s#15 = rem16s#8 rem16s#16 rem16s#9 
Alias print_char_cursor#12 = print_char_cursor#25 print_char_cursor#26 print_char_cursor#13 
Successful SSA optimization Pass2AliasElimination
Alias utoa::value#10 = utoa::value#7 
Alias utoa::buffer#10 = utoa::buffer#15 
Alias utoa::digit#2 = utoa::digit#4 
Alias utoa::max_digits#10 = utoa::max_digits#6 
Alias utoa::digit_values#10 = utoa::digit_values#7 
Alias mul16u::a#2 = mul16u::a#4 
Alias mul16u::mb#2 = mul16u::mb#3 
Alias mul16s::b#1 = mul16s::b#2 
Alias mul16s::a#1 = mul16s::a#3 
Alias divr16u::dividend#2 = divr16u::dividend#3 
Alias divr16u::quotient#3 = divr16u::quotient#6 
Alias divr16u::divisor#1 = divr16u::divisor#3 divr16u::divisor#6 
Alias divr16u::i#2 = divr16u::i#3 divr16u::i#5 
Alias divr16u::dividend#0 = divr16u::dividend#5 
Alias divr16s::divisor#1 = divr16s::divisor#4 
Alias rem16u#22 = rem16u#27 rem16u#37 
Alias divr16s::dividendu#3 = divr16s::dividendu#4 
Alias divr16s::remu#3 = divr16s::remu#4 
Alias rem16u#12 = rem16u#15 
Alias testnum#15 = testnum#8 
Alias rem16u#29 = rem16u#33 
Alias rem16s#21 = rem16s#24 
Alias lastprime#17 = lastprime#18 
Alias print_char_cursor#41 = print_char_cursor#42 
Alias lasttest#12 = lasttest#14 
Alias lastprime#11 = lastprime#14 
Alias rem16u#18 = rem16u#19 
Alias rem16s#13 = rem16s#14 
Alias print_char_cursor#32 = print_char_cursor#38 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values print_str::str#5 print_str::str#1
Identical Phi Values print_char_cursor#34 print_char_cursor#31
Identical Phi Values print_char_cursor#0 print_char_cursor#21
Identical Phi Values print_sint_decimal::w#2 print_sint_decimal::w#1
Identical Phi Values print_char_cursor#29 print_char_cursor#32
Identical Phi Values print_char_cursor#16 print_char_cursor#21
Identical Phi Values print_char_cursor#17 print_char_cursor#21
Identical Phi Values print_char_cursor#18 print_char_cursor#1
Identical Phi Values utoa::radix#1 utoa::radix#0
Identical Phi Values utoa::value#10 utoa::value#0
Identical Phi Values utoa::buffer#10 utoa::buffer#0
Identical Phi Values utoa::max_digits#10 utoa::max_digits#7
Identical Phi Values utoa::digit_values#10 utoa::digit_values#8
Identical Phi Values utoa_append::value#5 utoa_append::value#0
Identical Phi Values utoa_append::sub#3 utoa_append::sub#0
Identical Phi Values utoa_append::buffer#3 utoa_append::buffer#0
Identical Phi Values utoa_append::sub#1 utoa_append::sub#3
Identical Phi Values utoa_append::buffer#1 utoa_append::buffer#3
Identical Phi Values mul16u::b#1 mul16u::b#0
Identical Phi Values mul16u::a#5 mul16u::a#1
Identical Phi Values mul16s::a#1 mul16s::a#0
Identical Phi Values mul16s::b#1 mul16s::b#0
Identical Phi Values divr16u::rem#9 divr16u::rem#3
Identical Phi Values divr16u::dividend#4 divr16u::dividend#1
Identical Phi Values divr16u::divisor#5 divr16u::divisor#0
Identical Phi Values divr16u::divisor#1 divr16u::divisor#5
Identical Phi Values divr16s::dividend#1 divr16s::dividend#0
Identical Phi Values divr16s::rem#1 divr16s::rem#0
Identical Phi Values divr16s::divisor#1 divr16s::divisor#0
Identical Phi Values rem16u#22 rem16u#23
Identical Phi Values rem16u#12 rem16u#0
Identical Phi Values div16s::dividend#1 div16s::dividend#0
Identical Phi Values div16s::divisor#1 div16s::divisor#0
Identical Phi Values rem16u#23 rem16u#24
Identical Phi Values rem16s#17 rem16s#18
Identical Phi Values rem16u#16 rem16u#12
Identical Phi Values rem16s#11 rem16s#10
Identical Phi Values rem16u#41 rem16u#26
Identical Phi Values rem16s#29 rem16s#20
Identical Phi Values print_char_cursor#45 print_screen#0
Identical Phi Values lasttest#12 lasttest#19
Identical Phi Values lastprime#11 lastprime#17
Identical Phi Values print_char_cursor#32 print_char_cursor#41
Identical Phi Values rem16u#18 rem16u#16
Identical Phi Values rem16s#13 rem16s#11
Identical Phi Values print_char_cursor#22 print_char_cursor#18
Identical Phi Values print_char_cursor#10 print_char_cursor#21
Identical Phi Values testnum#13 testnum#11
Identical Phi Values lasttest#10 lasttest#12
Identical Phi Values lastprime#10 lastprime#1
Identical Phi Values primeptr#11 primeptr#10
Identical Phi Values rem16u#10 rem16u#18
Identical Phi Values rem16s#15 rem16s#13
Identical Phi Values print_char_cursor#12 print_char_cursor#10
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values print_char_cursor#31 print_char_cursor#21
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values print_char_cursor#1 print_char_cursor#21
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition print_str::$1 [3] if(0!=*print_str::str#2) goto print_str::@2
Simple Condition print_sint_decimal::$0 [11] if(print_sint_decimal::w#1<0) goto print_sint_decimal::@1
Simple Condition utoa::$0 [36] if(utoa::radix#0==DECIMAL) goto utoa::@1
Simple Condition utoa::$1 [40] if(utoa::radix#0==HEXADECIMAL) goto utoa::@2
Simple Condition utoa::$2 [44] if(utoa::radix#0==OCTAL) goto utoa::@3
Simple Condition utoa::$3 [48] if(utoa::radix#0==BINARY) goto utoa::@4
Simple Condition utoa::$5 [65] if(utoa::digit#2<utoa::$4) goto utoa::@11
Simple Condition utoa_append::$0 [90] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
Simple Condition mul16u::$0 [100] if(mul16u::a#2!=0) goto mul16u::@2
Simple Condition mul16u::$3 [103] if(mul16u::$1==0) goto mul16u::@4
Simple Condition mul16s::$2 [116] if(mul16s::a#0>=0) goto mul16s::@1
Simple Condition mul16s::$4 [119] if(mul16s::b#0>=0) goto mul16s::@2
Simple Condition divr16u::$4 [139] if(divr16u::$2==0) goto divr16u::@2
Simple Condition divr16u::$9 [144] if(divr16u::rem#5<divr16u::divisor#0) goto divr16u::@3
Simple Condition divr16u::$11 [149] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition divr16s::$3 [172] if(divr16s::divisor#0<0) goto divr16s::@3
Simple Condition divr16s::$5 [186] if(divr16s::neg#4==0) goto divr16s::@5
Simple Condition main::$2 [220] if(testnum#15<=main::$15) goto main::@2
Simple Condition main::$5 [234] if(rem16s#10!=0) goto main::@4
Simple Condition main::$6 [237] if(primeptr#10<=lasttest#19) goto main::@3
Simple Condition main::$9 [250] if(lastprime#1<$3e8) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() [70] utoa::$8 = ! utoa::$7
Rewriting || if()-condition to two if()s [69] utoa::$7 = utoa::started#2 || utoa::$6
Rewriting || if()-condition to two if()s [160] divr16s::$2 = divr16s::$0 || divr16s::$1
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition utoa::started#2
Constant right-side identified [203] main::$10 = 1 * SIZEOF_SIGNED_WORD
Constant right-side identified [205] main::$11 = 2 * SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant print_char::ch#1 = '-'
Constant print_char::ch#2 = ' '
Constant utoa::buffer#0 = decimal_digits
Constant utoa::radix#0 = DECIMAL
Constant print_str::str#1 = decimal_digits
Constant utoa::max_digits#0 = 0
Constant utoa::digit_values#0 = (word*) 0
Constant utoa::max_digits#1 = 5
Constant utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant utoa::max_digits#2 = 4
Constant utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
Constant utoa::max_digits#3 = 6
Constant utoa::digit_values#3 = RADIX_OCTAL_VALUES
Constant utoa::max_digits#4 = $10
Constant utoa::digit_values#4 = RADIX_BINARY_VALUES
Constant utoa::started#0 = 0
Constant utoa::digit#0 = 0
Constant utoa::started#1 = 1
Constant utoa_append::digit#0 = 0
Constant mul16u::res#0 = 0
Constant divr16u::quotient#0 = 0
Constant divr16u::i#0 = 0
Constant divr16s::neg#0 = 0
Constant divr16s::dividendu#0 = 0
Constant divr16s::remu#0 = 0
Constant divr16s::neg#1 = 1
Constant divr16s::divisoru#0 = 0
Constant divr16s::rem#0 = 0
Constant main::$10 = 1*SIZEOF_SIGNED_WORD
Constant main::$11 = 2*SIZEOF_SIGNED_WORD
Constant testnum#0 = 3
Constant lasttest#0 = 2
Constant lastprime#0 = 2
Constant primeptr#0 = 2
Constant primeptr#2 = 2
Constant print_char::ch#3 = ' '
Constant print_screen#0 = (byte*) 1024
Constant rem16u#26 = 0
Constant rem16s#20 = 0
Constant testnum#20 = 0
Constant primeptr#14 = 0
Constant lasttest#16 = 0
Constant lastprime#13 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant divr16s::remu#2 = (word)divr16s::rem#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [36] if(utoa::radix#0==DECIMAL) goto utoa::@1
if() condition always false - eliminating [40] if(utoa::radix#0==HEXADECIMAL) goto utoa::@2
if() condition always false - eliminating [44] if(utoa::radix#0==OCTAL) goto utoa::@3
if() condition always false - eliminating [48] if(utoa::radix#0==BINARY) goto utoa::@4
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [147] divr16u::i#1 = ++ divr16u::i#2 to ++
Resolved ranged comparison value [149] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to $10
De-inlining pointer[w] to *(pointer+w)   [212] main::p#0 = primenum[main::$12]
De-inlining pointer[w] to *(pointer+w)   [228] div16s::divisor#0 = primenum[main::$13]
De-inlining pointer[w] to *(pointer+w)   [242] primenum[main::$14] = testnum#11
Successful SSA optimization Pass2DeInlineWordDerefIdx
Simplifying constant evaluating to zero (word)divr16s::rem#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating variable utoa::buffer#1 from unused block utoa::@9
Eliminating variable utoa::buffer#2 from unused block utoa::@9
Eliminating variable utoa::buffer#3 from unused block utoa::@9
Removing unused block utoa::@6
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing unused block utoa::@2
Removing unused block utoa::@7
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing unused block utoa::@3
Removing unused block utoa::@8
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing unused block utoa::@4
Removing unused block utoa::@9
Successful SSA optimization Pass2EliminateUnusedBlocks
Eliminating unused variable - keeping the phi block rem16u#24
Eliminating unused variable - keeping the phi block rem16s#18
Eliminating unused variable div16s::return#2 and assignment [150] div16s::return#2 = div16s::return#0
Eliminating unused constant BINARY
Eliminating unused constant OCTAL
Eliminating unused constant HEXADECIMAL
Eliminating unused constant utoa::radix#0
Eliminating unused constant utoa::max_digits#0
Eliminating unused constant utoa::digit_values#0
Eliminating unused constant utoa::max_digits#2
Eliminating unused constant utoa::digit_values#2
Eliminating unused constant utoa::max_digits#3
Eliminating unused constant utoa::digit_values#3
Eliminating unused constant utoa::max_digits#4
Eliminating unused constant utoa::digit_values#4
Eliminating unused constant divr16s::dividendu#0
Eliminating unused constant divr16s::remu#0
Eliminating unused constant divr16s::divisoru#0
Eliminating unused constant testnum#20
Eliminating unused constant primeptr#14
Eliminating unused constant lasttest#16
Eliminating unused constant lastprime#13
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable div16s::return#0 and assignment [126] div16s::return#0 = divr16s::return#3
Eliminating unused variable - keeping the phi block rem16u#29
Eliminating unused variable - keeping the phi block rem16s#21
Eliminating unused constant DECIMAL
Eliminating unused constant RADIX_BINARY_VALUES
Eliminating unused constant RADIX_OCTAL_VALUES
Eliminating unused constant RADIX_HEXADECIMAL_VALUES
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable divr16s::return#3 and assignment [125] divr16s::return#3 = divr16s::return#2
Eliminating unused constant rem16u#26
Eliminating unused constant rem16s#20
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block divr16s::return#2
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable divr16s::return#0 and assignment [117] divr16s::return#0 = (signed word)divr16s::resultu#0
Eliminating unused variable divr16s::return#1 and assignment [119] divr16s::return#1 = - (signed word)divr16s::resultu#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable divr16s::resultu#0 and assignment [114] divr16s::resultu#0 = divr16u::return#2
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable divr16u::return#2 and assignment [113] divr16u::return#2 = divr16u::return#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 0 in [27] utoa::$12 = 0 != utoa::started#2
Adding number conversion cast (unumber) $10 in [89] if(divr16u::i#1!=$10) goto divr16u::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $10
Successful SSA optimization PassNFinalizeNumberTypeConversions
Identical Phi Values utoa::max_digits#7 utoa::max_digits#1
Identical Phi Values utoa::digit_values#8 utoa::digit_values#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition utoa::$12 [28] if(0!=utoa::started#2) goto utoa::@14
Simple Condition divr16s::$0 [96] if(divr16s::dividend#0<0) goto divr16s::@1
Simple Condition utoa::$6 [158] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@14
Simple Condition divr16s::$1 [159] if(divr16s::rem#0<0) goto divr16s::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [22] utoa::$4 = utoa::max_digits#1 - 1
Constant right-side identified [99] divr16s::$7 = - divr16s::rem#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant utoa::$4 = utoa::max_digits#1-1
Constant divr16s::$7 = -divr16s::rem#0
Successful SSA optimization Pass2ConstantIdentification
Constant divr16s::remu#1 = (word)divr16s::$7
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [159] if(divr16s::rem#0<0) goto divr16s::@1
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero -divr16s::rem#0 in 
Simplifying constant evaluating to zero (word)divr16s::$7 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused constant divr16s::rem#0
Eliminating unused constant divr16s::$7
Successful SSA optimization PassNEliminateUnusedVars
Inlining Noop Cast [63] mul16s::$13 = (word)mul16s::b#0 keeping mul16s::b#0
Inlining Noop Cast [69] mul16s::$14 = (word)mul16s::a#0 keeping mul16s::a#0
Inlining Noop Cast [93] divr16s::dividendu#2 = (word)divr16s::dividend#0 keeping divr16s::dividend#0
Inlining Noop Cast [99] divr16s::divisoru#2 = (word)divr16s::divisor#0 keeping divr16s::divisor#0
Inlining Noop Cast [106] rem16s#0 = (signed word)rem16u#0 keeping rem16u#0
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [92] divr16s::dividendu#1 = (word)divr16s::$6 keeping divr16s::dividendu#1
Inlining Noop Cast [97] divr16s::divisoru#1 = (word)divr16s::$8 keeping divr16s::divisoru#1
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [22] utoa::$10 = utoa::digit#2 * SIZEOF_WORD
Rewriting multiplication to use shift [117] main::$12 = lasttest#13 * SIZEOF_SIGNED_WORD
Rewriting multiplication to use shift [131] main::$13 = primeptr#7 * SIZEOF_SIGNED_WORD
Rewriting multiplication to use shift [142] main::$14 = lastprime#1 * SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings print_str::str#1
Inlining constant with var siblings print_char::ch#1
Inlining constant with var siblings print_char::ch#2
Inlining constant with var siblings print_char::ch#3
Inlining constant with var siblings utoa::buffer#0
Inlining constant with var siblings utoa::started#0
Inlining constant with var siblings utoa::digit#0
Inlining constant with var siblings utoa::started#1
Inlining constant with var siblings utoa_append::digit#0
Inlining constant with var siblings mul16u::res#0
Inlining constant with var siblings divr16u::quotient#0
Inlining constant with var siblings divr16u::i#0
Inlining constant with var siblings divr16s::neg#0
Inlining constant with var siblings divr16s::neg#1
Inlining constant with var siblings divr16s::remu#2
Inlining constant with var siblings divr16s::remu#1
Inlining constant with var siblings testnum#0
Inlining constant with var siblings lasttest#0
Inlining constant with var siblings lastprime#0
Inlining constant with var siblings primeptr#0
Inlining constant with var siblings primeptr#2
Constant inlined utoa_append::digit#0 = 0
Constant inlined utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant inlined divr16u::i#0 = 0
Constant inlined lastprime#0 = 2
Constant inlined utoa::buffer#0 = decimal_digits
Constant inlined primeptr#2 = 2
Constant inlined primeptr#0 = 2
Constant inlined main::$10 = 1*SIZEOF_SIGNED_WORD
Constant inlined divr16s::neg#1 = 1
Constant inlined lasttest#0 = 2
Constant inlined main::$11 = 2*SIZEOF_SIGNED_WORD
Constant inlined divr16s::neg#0 = 0
Constant inlined divr16u::quotient#0 = 0
Constant inlined mul16u::res#0 = 0
Constant inlined utoa::digit#0 = 0
Constant inlined utoa::$4 = utoa::max_digits#1-1
Constant inlined testnum#0 = 3
Constant inlined utoa::started#1 = 1
Constant inlined utoa::started#0 = 0
Constant inlined print_char::ch#3 = ' '
Constant inlined print_char::ch#2 = ' '
Constant inlined print_char::ch#1 = '-'
Constant inlined print_str::str#1 = decimal_digits
Constant inlined divr16s::remu#1 = 0
Constant inlined divr16s::remu#2 = 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(primenum+1*SIZEOF_SIGNED_WORD)
Consolidated array index constant in *(primenum+2*SIZEOF_SIGNED_WORD)
Successful SSA optimization Pass2ConstantAdditionElimination
Identical Phi Values divr16s::remu#3 0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant divr16u::rem#3 = 0
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings divr16u::rem#3
Constant inlined divr16u::rem#3 = 0
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 6
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (word) $3e8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting utoa::@17(between utoa::@16 and utoa::@13)
Added new block during phi lifting mul16u::@6(between mul16u::@2 and mul16u::@4)
Added new block during phi lifting mul16s::@6(between mul16s::@5 and mul16s::@1)
Added new block during phi lifting mul16s::@7(between mul16s::@1 and mul16s::@2)
Added new block during phi lifting divr16u::@7(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@8(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@9(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting main::@12(between main::@11 and main::@1)
Added new block during phi lifting main::@13(between main::@8 and main::@2)
Added new block during phi lifting main::@14(between main::@4 and main::@3)
Added new block during phi lifting main::@15(between main::@9 and main::@4)
Adding NOP phi() at start of div16s::@1
Adding NOP phi() at start of print_sint_decimal::@6
Adding NOP phi() at start of print_sint_decimal::@7
Adding NOP phi() at start of mul16u::@3
Adding NOP phi() at start of divr16s::@10
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa::@1
Adding NOP phi() at start of print_str
CALL GRAPH
Calls in [main] to mul16s:8 div16s:23 print_sint_decimal:35 print_char:37 
Calls in [mul16s] to mul16u:51 
Calls in [div16s] to divr16s:72 
Calls in [print_sint_decimal] to print_char:77 utoa:81 print_str:83 print_char:87 
Calls in [divr16s] to divr16u:122 
Calls in [utoa] to utoa_append:161 
Calls in [print_str] to print_char:174 

Created 40 initial phi equivalence classes
Coalesced [14] lasttest#22 = lasttest#1
Coalesced [17] testnum#23 = testnum#1
Coalesced [27] testnum#25 = testnum#2
Coalesced [36] print_char_cursor#46 = print_char_cursor#21
Coalesced [40] lasttest#21 = lasttest#19
Coalesced [41] testnum#22 = testnum#11
Coalesced [42] lastprime#21 = lastprime#1
Coalesced [43] print_char_cursor#50 = print_char_cursor#21
Coalesced [44] primeptr#17 = primeptr#10
Coalesced [45] testnum#24 = testnum#11
Coalesced [46] primeptr#18 = primeptr#1
Coalesced (already) [47] testnum#26 = testnum#10
Coalesced (already) [48] lasttest#23 = lasttest#13
Coalesced [58] mul16s::m#7 = mul16s::m#1
Coalesced [64] mul16s::m#10 = mul16s::m#2
Coalesced [68] mul16s::m#9 = mul16s::m#5
Coalesced [69] mul16s::m#8 = mul16s::m#0
Coalesced (already) [76] print_char_cursor#48 = print_char_cursor#41
Coalesced [78] print_sint_decimal::w#9 = print_sint_decimal::w#1
Coalesced (already) [86] print_char_cursor#47 = print_char_cursor#41
Coalesced [89] print_sint_decimal::w#8 = print_sint_decimal::w#0
Coalesced [95] mul16u::a#7 = mul16u::a#1
Coalesced [96] mul16u::mb#6 = mul16u::mb#0
Coalesced [104] mul16u::res#9 = mul16u::res#1
Coalesced [108] mul16u::a#8 = mul16u::a#0
Coalesced [109] mul16u::res#7 = mul16u::res#6
Coalesced [110] mul16u::mb#7 = mul16u::mb#1
Coalesced (already) [111] mul16u::res#8 = mul16u::res#2
Coalesced [118] divr16s::neg#10 = divr16s::neg#3
Coalesced [125] rem16s#31 = rem16s#1
Coalesced [132] divr16s::neg#9 = divr16s::neg#2
Coalesced [137] utoa::value#17 = utoa::value#0
Coalesced [149] utoa::value#18 = utoa::value#2
Coalesced [150] utoa::started#6 = utoa::started#2
Coalesced [151] utoa::buffer#23 = utoa::buffer#11
Coalesced [154] utoa::digit#7 = utoa::digit#1
Coalesced (already) [155] utoa::value#16 = utoa::value#6
Coalesced (already) [156] utoa::started#5 = utoa::started#4
Coalesced (already) [157] utoa::buffer#22 = utoa::buffer#14
Coalesced [165] utoa::value#19 = utoa::value#1
Coalesced [166] utoa::buffer#24 = utoa::buffer#5
Coalesced [172] print_char::ch#5 = print_char::ch#0
Coalesced (already) [173] print_char_cursor#49 = print_char_cursor#21
Coalesced [176] print_str::str#6 = print_str::str#0
Coalesced [177] divr16u::dividend#8 = divr16u::dividend#1
Coalesced [184] divr16u::rem#13 = divr16u::rem#1
Coalesced [191] divr16u::rem#15 = divr16u::rem#2
Coalesced [192] divr16u::return#6 = divr16u::quotient#2
Coalesced [198] divr16u::rem#11 = divr16u::rem#10
Coalesced [199] divr16u::dividend#9 = divr16u::dividend#0
Coalesced [200] divr16u::quotient#9 = divr16u::return#0
Coalesced [201] divr16u::i#7 = divr16u::i#1
Coalesced [202] divr16u::rem#14 = divr16u::rem#5
Coalesced [203] divr16u::return#5 = divr16u::quotient#1
Coalesced [204] divr16u::rem#12 = divr16u::rem#0
Coalesced [205] utoa_append::value#6 = utoa_append::value#0
Coalesced [212] utoa_append::value#7 = utoa_append::value#1
Coalesced [213] utoa_append::digit#5 = utoa_append::digit#1
Coalesced down to 26 phi equivalence classes
Culled Empty Block label main::@12
Culled Empty Block label main::@14
Culled Empty Block label main::@15
Culled Empty Block label main::@13
Culled Empty Block label mul16s::@7
Culled Empty Block label mul16s::@6
Culled Empty Block label div16s::@1
Culled Empty Block label print_sint_decimal::@5
Culled Empty Block label print_sint_decimal::@7
Culled Empty Block label mul16u::@3
Culled Empty Block label mul16u::@6
Culled Empty Block label divr16s::@10
Culled Empty Block label utoa::@1
Culled Empty Block label utoa::@5
Culled Empty Block label utoa::@17
Culled Empty Block label divr16u::@7
Culled Empty Block label divr16u::@9
Culled Empty Block label divr16u::@8
Renumbering block print_sint_decimal::@6 to print_sint_decimal::@5
Renumbering block utoa::@10 to utoa::@1
Renumbering block utoa::@11 to utoa::@2
Renumbering block utoa::@12 to utoa::@3
Renumbering block utoa::@13 to utoa::@4
Renumbering block utoa::@14 to utoa::@5
Renumbering block utoa::@15 to utoa::@6
Renumbering block utoa::@16 to utoa::@7
Renumbering block mul16u::@4 to mul16u::@3
Renumbering block mul16u::@5 to mul16u::@4
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of print_sint_decimal::@3
Adding NOP phi() at start of print_sint_decimal::@5
Adding NOP phi() at start of print_sint_decimal::@1
Adding NOP phi() at start of utoa
Adding NOP phi() at start of print_str
Adding NOP phi() at start of divr16u
Adding NOP phi() at start of utoa_append

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *(primenum+1*SIZEOF_SIGNED_WORD) = 2
  [1] *(primenum+2*SIZEOF_SIGNED_WORD) = 3
  to:main::@1
main::@1: scope:[main]  from main main::@11
  [2] print_char_cursor#41 = phi( main/print_screen#0, main::@11/print_char_cursor#21 )
  [2] lastprime#17 = phi( main/2, main::@11/lastprime#1 )
  [2] testnum#15 = phi( main/3, main::@11/testnum#11 )
  [2] lasttest#13 = phi( main/2, main::@11/lasttest#19 )
  [3] main::$12 = lasttest#13 << 1
  [4] main::$16 = primenum + main::$12
  [5] main::p#0 = *main::$16
  [6] mul16s::a#0 = main::p#0
  [7] mul16s::b#0 = main::p#0
  [8] call mul16s 
  [9] mul16s::return#2 = mul16s::return#0
  to:main::@8
main::@8: scope:[main]  from main::@1
  [10] main::$0 = mul16s::return#2
  [11] main::$15 = (signed word)main::$0
  [12] if(testnum#15<=main::$15) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@8
  [13] lasttest#1 = ++ lasttest#13
  to:main::@2
main::@2: scope:[main]  from main::@7 main::@8
  [14] lasttest#19 = phi( main::@7/lasttest#1, main::@8/lasttest#13 )
  [15] testnum#1 = testnum#15 + 2
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [16] testnum#10 = phi( main::@2/testnum#1, main::@4/testnum#11 )
  [16] primeptr#7 = phi( main::@2/2, main::@4/primeptr#10 )
  [17] main::$13 = primeptr#7 << 1
  [18] div16s::dividend#0 = testnum#10
  [19] main::$17 = primenum + main::$13
  [20] div16s::divisor#0 = *main::$17
  [21] call div16s 
  to:main::@9
main::@9: scope:[main]  from main::@3
  [22] primeptr#1 = ++ primeptr#7
  [23] if(rem16s#10!=0) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@9
  [24] testnum#2 = testnum#10 + 2
  to:main::@4
main::@4: scope:[main]  from main::@5 main::@9
  [25] testnum#11 = phi( main::@5/testnum#2, main::@9/testnum#10 )
  [25] primeptr#10 = phi( main::@5/2, main::@9/primeptr#1 )
  [26] if(primeptr#10<=lasttest#19) goto main::@3
  to:main::@6
main::@6: scope:[main]  from main::@4
  [27] lastprime#1 = ++ lastprime#17
  [28] main::$14 = lastprime#1 << 1
  [29] main::$18 = primenum + main::$14
  [30] *main::$18 = testnum#11
  [31] print_sint_decimal::w#1 = testnum#11
  [32] call print_sint_decimal 
  to:main::@10
main::@10: scope:[main]  from main::@6
  [33] phi()
  [34] call print_char 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [35] if(lastprime#1<$3e8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  [36] return 
  to:@return

signed dword mul16s(signed word mul16s::a , signed word mul16s::b)
mul16s: scope:[mul16s]  from main::@1
  [37] mul16u::a#1 = (word)mul16s::a#0
  [38] mul16u::b#0 = (word)mul16s::b#0
  [39] call mul16u 
  [40] mul16u::return#2 = mul16u::res#2
  to:mul16s::@5
mul16s::@5: scope:[mul16s]  from mul16s
  [41] mul16s::m#0 = mul16u::return#2
  [42] if(mul16s::a#0>=0) goto mul16s::@1
  to:mul16s::@3
mul16s::@3: scope:[mul16s]  from mul16s::@5
  [43] mul16s::$6 = _word1_ mul16s::m#0
  [44] mul16s::$11 = mul16s::$6 - (word)mul16s::b#0
  [45] mul16s::m#1 = mul16s::m#0 word1= mul16s::$11
  to:mul16s::@1
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@5
  [46] mul16s::m#5 = phi( mul16s::@3/mul16s::m#1, mul16s::@5/mul16s::m#0 )
  [47] if(mul16s::b#0>=0) goto mul16s::@2
  to:mul16s::@4
mul16s::@4: scope:[mul16s]  from mul16s::@1
  [48] mul16s::$9 = _word1_ mul16s::m#5
  [49] mul16s::$12 = mul16s::$9 - (word)mul16s::a#0
  [50] mul16s::m#2 = mul16s::m#5 word1= mul16s::$12
  to:mul16s::@2
mul16s::@2: scope:[mul16s]  from mul16s::@1 mul16s::@4
  [51] mul16s::m#4 = phi( mul16s::@1/mul16s::m#5, mul16s::@4/mul16s::m#2 )
  [52] mul16s::return#0 = (signed dword)mul16s::m#4
  to:mul16s::@return
mul16s::@return: scope:[mul16s]  from mul16s::@2
  [53] return 
  to:@return

signed word div16s(signed word div16s::dividend , signed word div16s::divisor)
div16s: scope:[div16s]  from main::@3
  [54] divr16s::dividend#0 = div16s::dividend#0
  [55] divr16s::divisor#0 = div16s::divisor#0
  [56] call divr16s 
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s
  [57] return 
  to:@return

void print_sint_decimal(signed word print_sint_decimal::w)
print_sint_decimal: scope:[print_sint_decimal]  from main::@6
  [58] if(print_sint_decimal::w#1<0) goto print_sint_decimal::@1
  to:print_sint_decimal::@3
print_sint_decimal::@3: scope:[print_sint_decimal]  from print_sint_decimal
  [59] phi()
  [60] call print_char 
  to:print_sint_decimal::@2
print_sint_decimal::@2: scope:[print_sint_decimal]  from print_sint_decimal::@3 print_sint_decimal::@4
  [61] print_sint_decimal::w#4 = phi( print_sint_decimal::@4/print_sint_decimal::w#0, print_sint_decimal::@3/print_sint_decimal::w#1 )
  [62] utoa::value#0 = (word)print_sint_decimal::w#4
  [63] call utoa 
  to:print_sint_decimal::@5
print_sint_decimal::@5: scope:[print_sint_decimal]  from print_sint_decimal::@2
  [64] phi()
  [65] call print_str 
  to:print_sint_decimal::@return
print_sint_decimal::@return: scope:[print_sint_decimal]  from print_sint_decimal::@5
  [66] return 
  to:@return
print_sint_decimal::@1: scope:[print_sint_decimal]  from print_sint_decimal
  [67] phi()
  [68] call print_char 
  to:print_sint_decimal::@4
print_sint_decimal::@4: scope:[print_sint_decimal]  from print_sint_decimal::@1
  [69] print_sint_decimal::w#0 = - print_sint_decimal::w#1
  to:print_sint_decimal::@2

void print_char(byte print_char::ch)
print_char: scope:[print_char]  from main::@10 print_sint_decimal::@1 print_sint_decimal::@3 print_str::@2
  [70] print_char_cursor#20 = phi( main::@10/print_char_cursor#21, print_sint_decimal::@1/print_char_cursor#41, print_sint_decimal::@3/print_char_cursor#41, print_str::@2/print_char_cursor#21 )
  [70] print_char::ch#4 = phi( main::@10/' ', print_sint_decimal::@1/'-', print_sint_decimal::@3/' ', print_str::@2/print_char::ch#0 )
  [71] *print_char_cursor#20 = print_char::ch#4
  [72] print_char_cursor#21 = ++ print_char_cursor#20
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [73] return 
  to:@return

dword mul16u(word mul16u::a , word mul16u::b)
mul16u: scope:[mul16u]  from mul16s
  [74] mul16u::mb#0 = (dword)mul16u::b#0
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [75] mul16u::mb#2 = phi( mul16u/mul16u::mb#0, mul16u::@3/mul16u::mb#1 )
  [75] mul16u::res#2 = phi( mul16u/0, mul16u::@3/mul16u::res#6 )
  [75] mul16u::a#2 = phi( mul16u/mul16u::a#1, mul16u::@3/mul16u::a#0 )
  [76] if(mul16u::a#2!=0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [77] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [78] mul16u::$1 = mul16u::a#2 & 1
  [79] if(mul16u::$1==0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [80] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [81] mul16u::res#6 = phi( mul16u::@2/mul16u::res#2, mul16u::@4/mul16u::res#1 )
  [82] mul16u::a#0 = mul16u::a#2 >> 1
  [83] mul16u::mb#1 = mul16u::mb#2 << 1
  to:mul16u::@1

signed word divr16s(signed word divr16s::dividend , signed word divr16s::divisor , signed word divr16s::rem)
divr16s: scope:[divr16s]  from div16s
  [84] if(divr16s::dividend#0<0) goto divr16s::@1
  to:divr16s::@6
divr16s::@6: scope:[divr16s]  from divr16s
  [85] divr16s::dividendu#8 = (word)divr16s::dividend#0
  to:divr16s::@2
divr16s::@2: scope:[divr16s]  from divr16s::@1 divr16s::@6
  [86] divr16s::dividendu#3 = phi( divr16s::@1/divr16s::dividendu#7, divr16s::@6/divr16s::dividendu#8 )
  [86] divr16s::neg#3 = phi( divr16s::@1/1, divr16s::@6/0 )
  [87] if(divr16s::divisor#0<0) goto divr16s::@3
  to:divr16s::@7
divr16s::@7: scope:[divr16s]  from divr16s::@2
  [88] divr16s::divisoru#5 = (word)divr16s::divisor#0
  to:divr16s::@4
divr16s::@4: scope:[divr16s]  from divr16s::@3 divr16s::@7
  [89] divr16s::neg#4 = phi( divr16s::@3/divr16s::neg#2, divr16s::@7/divr16s::neg#3 )
  [89] divr16s::divisoru#3 = phi( divr16s::@3/divr16s::divisoru#4, divr16s::@7/divr16s::divisoru#5 )
  [90] divr16u::dividend#1 = divr16s::dividendu#3
  [91] divr16u::divisor#0 = divr16s::divisoru#3
  [92] call divr16u 
  to:divr16s::@9
divr16s::@9: scope:[divr16s]  from divr16s::@4
  [93] if(divr16s::neg#4==0) goto divr16s::@5
  to:divr16s::@8
divr16s::@8: scope:[divr16s]  from divr16s::@9
  [94] rem16s#1 = - (signed word)rem16u#0
  to:divr16s::@return
divr16s::@return: scope:[divr16s]  from divr16s::@5 divr16s::@8
  [95] rem16s#10 = phi( divr16s::@5/rem16s#30, divr16s::@8/rem16s#1 )
  [96] return 
  to:@return
divr16s::@5: scope:[divr16s]  from divr16s::@9
  [97] rem16s#30 = (signed word)rem16u#0
  to:divr16s::@return
divr16s::@3: scope:[divr16s]  from divr16s::@2
  [98] divr16s::divisoru#1 = - divr16s::divisor#0
  [99] divr16s::neg#2 = divr16s::neg#3 ^ 1
  [100] divr16s::divisoru#4 = (word)divr16s::divisoru#1
  to:divr16s::@4
divr16s::@1: scope:[divr16s]  from divr16s
  [101] divr16s::dividendu#1 = - divr16s::dividend#0
  [102] divr16s::dividendu#7 = (word)divr16s::dividendu#1
  to:divr16s::@2

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from print_sint_decimal::@2
  [103] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [104] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/decimal_digits )
  [104] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [104] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#0 )
  [104] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [105] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [106] utoa::$11 = (byte)utoa::value#2
  [107] *utoa::buffer#11 = DIGITS[utoa::$11]
  [108] utoa::buffer#4 = ++ utoa::buffer#11
  [109] *utoa::buffer#4 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [110] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [111] utoa::$10 = utoa::digit#2 << 1
  [112] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [113] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [114] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [115] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#5 )
  [115] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [115] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#1 )
  [116] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [117] utoa_append::buffer#0 = utoa::buffer#11
  [118] utoa_append::value#0 = utoa::value#2
  [119] utoa_append::sub#0 = utoa::digit_value#0
  [120] call utoa_append 
  [121] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [122] utoa::value#1 = utoa_append::return#0
  [123] utoa::buffer#5 = ++ utoa::buffer#11
  to:utoa::@4

void print_str(byte* print_str::str)
print_str: scope:[print_str]  from print_sint_decimal::@5
  [124] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [125] print_str::str#2 = phi( print_str/decimal_digits, print_str::@3/print_str::str#0 )
  [126] if(0!=*print_str::str#2) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [127] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [128] print_char::ch#0 = *print_str::str#2
  [129] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [130] print_str::str#0 = ++ print_str::str#2
  to:print_str::@1

word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
divr16u: scope:[divr16u]  from divr16s::@4
  [131] phi()
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [132] divr16u::i#2 = phi( divr16u/0, divr16u::@3/divr16u::i#1 )
  [132] divr16u::quotient#3 = phi( divr16u/0, divr16u::@3/divr16u::return#0 )
  [132] divr16u::dividend#2 = phi( divr16u/divr16u::dividend#1, divr16u::@3/divr16u::dividend#0 )
  [132] divr16u::rem#4 = phi( divr16u/0, divr16u::@3/divr16u::rem#10 )
  [133] divr16u::rem#0 = divr16u::rem#4 << 1
  [134] divr16u::$1 = > divr16u::dividend#2
  [135] divr16u::$2 = divr16u::$1 & $80
  [136] if(divr16u::$2==0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [137] divr16u::rem#1 = divr16u::rem#0 | 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [138] divr16u::rem#5 = phi( divr16u::@1/divr16u::rem#0, divr16u::@4/divr16u::rem#1 )
  [139] divr16u::dividend#0 = divr16u::dividend#2 << 1
  [140] divr16u::quotient#1 = divr16u::quotient#3 << 1
  [141] if(divr16u::rem#5<divr16u::divisor#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [142] divr16u::quotient#2 = ++ divr16u::quotient#1
  [143] divr16u::rem#2 = divr16u::rem#5 - divr16u::divisor#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [144] divr16u::return#0 = phi( divr16u::@2/divr16u::quotient#1, divr16u::@5/divr16u::quotient#2 )
  [144] divr16u::rem#10 = phi( divr16u::@2/divr16u::rem#5, divr16u::@5/divr16u::rem#2 )
  [145] divr16u::i#1 = ++ divr16u::i#2
  [146] if(divr16u::i#1!=$10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [147] rem16u#0 = divr16u::rem#10
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [148] return 
  to:@return

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [149] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [150] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [150] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [151] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [152] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [153] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [154] utoa_append::digit#1 = ++ utoa_append::digit#2
  [155] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

null depth in calling loop Loop head: print_str::@1 tails: print_str::@3 blocks: print_str::@3 print_str::@2 print_str::@1  in scope print_char

VARIABLE REGISTER WEIGHTS
signed word div16s(signed word div16s::dividend , signed word div16s::divisor)
signed word div16s::dividend
signed word div16s::dividend#0 367.33333333333337
signed word div16s::divisor
signed word div16s::divisor#0 551.0
signed word div16s::return
signed word divr16s(signed word divr16s::dividend , signed word divr16s::divisor , signed word divr16s::rem)
signed word divr16s::dividend
signed word divr16s::dividend#0 7001.0
word divr16s::dividendu
signed word divr16s::dividendu#1 10001.0
word divr16s::dividendu#3 4286.142857142857
word divr16s::dividendu#7 20002.0
word divr16s::dividendu#8 20002.0
signed word divr16s::divisor
signed word divr16s::divisor#0 3000.4285714285716
word divr16s::divisoru
signed word divr16s::divisoru#1 5000.5
word divr16s::divisoru#3 15001.5
word divr16s::divisoru#4 20002.0
word divr16s::divisoru#5 20002.0
byte divr16s::neg
byte divr16s::neg#2 10001.0
byte divr16s::neg#3 5000.5
byte divr16s::neg#4 7500.75
signed word divr16s::rem
word divr16s::remu
word divr16s::resultu
signed word divr16s::return
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 2.00000002E8
byte~ divr16u::$2 2.00000002E8
word divr16u::dividend
word divr16u::dividend#0 2.500000025E7
word divr16u::dividend#1 36667.33333333333
word divr16u::dividend#2 4.287142914285715E7
word divr16u::divisor
word divr16u::divisor#0 1.1765294294117648E7
byte divr16u::i
byte divr16u::i#1 1.500000015E8
byte divr16u::i#2 1.5384615538461538E7
word divr16u::quotient
word divr16u::quotient#1 1.500000015E8
word divr16u::quotient#2 1.00000001E8
word divr16u::quotient#3 2.500000025E7
word divr16u::rem
word divr16u::rem#0 7.500000075E7
word divr16u::rem#1 2.00000002E8
word divr16u::rem#10 1.0003333466666667E8
word divr16u::rem#2 2.00000002E8
word divr16u::rem#4 2.00000002E8
word divr16u::rem#5 1.00000001E8
word divr16u::return
word divr16u::return#0 1.00000001E8
signed word lastprime
signed word lastprime#1 4.888888888888889
signed word lastprime#17 0.88
signed word lasttest
signed word lasttest#1 22.0
signed word lasttest#13 4.0
signed word lasttest#19 6.090909090909091
void main()
signed dword~ main::$0 11.0
signed word~ main::$12 22.0
signed word~ main::$13 101.0
signed word~ main::$14 22.0
signed word~ main::$15 22.0
signed word*~ main::$16 22.0
signed word*~ main::$17 202.0
signed word*~ main::$18 22.0
signed word main::p
signed word main::p#0 16.5
signed dword mul16s(signed word mul16s::a , signed word mul16s::b)
word~ mul16s::$11 202.0
word~ mul16s::$12 202.0
word~ mul16s::$6 202.0
word~ mul16s::$9 202.0
signed word mul16s::a
signed word mul16s::a#0 8.0
signed word mul16s::b
signed word mul16s::b#0 10.181818181818182
dword mul16s::m
dword mul16s::m#0 101.0
dword mul16s::m#1 202.0
dword mul16s::m#2 202.0
dword mul16s::m#4 202.0
dword mul16s::m#5 126.25
signed dword mul16s::return
signed dword mul16s::return#0 37.33333333333333
signed dword mul16s::return#2 22.0
dword mul16u(word mul16u::a , word mul16u::b)
byte~ mul16u::$1 200002.0
word mul16u::a
word mul16u::a#0 100001.0
word mul16u::a#1 367.33333333333337
word mul16u::a#2 66834.16666666666
word mul16u::b
word mul16u::b#0 101.0
dword mul16u::mb
dword mul16u::mb#0 2002.0
dword mul16u::mb#1 200002.0
dword mul16u::mb#2 43000.57142857143
dword mul16u::res
dword mul16u::res#1 200002.0
dword mul16u::res#2 50017.33333333333
dword mul16u::res#6 100001.0
dword mul16u::return
dword mul16u::return#2 202.0
signed word primeptr
signed word primeptr#1 101.0
signed word primeptr#10 151.5
signed word primeptr#7 50.5
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 200002.0
byte print_char::ch#4 1100002.0
byte* print_char_cursor
byte* print_char_cursor#20 1050108.0
byte* print_char_cursor#21 50001.09090909091
byte* print_char_cursor#41 6.454545454545455
byte* print_line_cursor
byte* print_screen
void print_sint_decimal(signed word print_sint_decimal::w)
signed word print_sint_decimal::w
signed word print_sint_decimal::w#0 202.0
signed word print_sint_decimal::w#1 52.33333333333333
signed word print_sint_decimal::w#4 202.0
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 200002.0
byte* print_str::str#2 100001.0
signed word rem16s
signed word rem16s#1 20002.0
signed word rem16s#10 3350.5
signed word rem16s#30 20002.0
word rem16u
word rem16u#0 25000.25
signed word testnum
signed word testnum#1 22.0
signed word testnum#10 51.875
signed word testnum#11 30.545454545454547
signed word testnum#15 2.5384615384615383
signed word testnum#2 202.0
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 200002.0
byte~ utoa::$11 2002.0
byte* utoa::buffer
byte* utoa::buffer#11 28714.714285714286
byte* utoa::buffer#14 150001.5
byte* utoa::buffer#4 2002.0
byte* utoa::buffer#5 200002.0
byte utoa::digit
byte utoa::digit#1 200002.0
byte utoa::digit#2 28571.714285714286
word utoa::digit_value
word utoa::digit_value#0 60000.600000000006
word* utoa::digit_values
byte utoa::max_digits
byte utoa::radix
byte utoa::started
byte utoa::started#2 50000.5
byte utoa::started#4 100001.0
word utoa::value
word utoa::value#0 551.0
word utoa::value#1 100001.0
word utoa::value#2 57286.42857142857
word utoa::value#6 150001.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 137500.25
byte utoa_append::digit
byte utoa_append::digit#1 1.000000001E9
byte utoa_append::digit#2 1.0005000015E9
word utoa_append::return
word utoa_append::return#0 200002.0
word utoa_append::sub
word utoa_append::sub#0 3.333500005E8
word utoa_append::value
word utoa_append::value#0 366667.3333333334
word utoa_append::value#1 2.000000002E9
word utoa_append::value#2 5.0018333416666675E8

Initial phi equivalence classes
[ lasttest#13 lasttest#19 lasttest#1 ]
[ lastprime#17 lastprime#1 ]
[ primeptr#7 primeptr#10 primeptr#1 ]
[ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 ]
[ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ]
[ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 ]
[ print_char::ch#4 print_char::ch#0 ]
[ print_char_cursor#20 print_char_cursor#41 print_char_cursor#21 ]
[ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
[ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ]
[ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ]
[ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
[ rem16s#10 rem16s#30 rem16s#1 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 ]
[ print_str::str#2 print_str::str#0 ]
[ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
Added variable main::$12 to live range equivalence class [ main::$12 ]
Added variable main::$16 to live range equivalence class [ main::$16 ]
Added variable main::p#0 to live range equivalence class [ main::p#0 ]
Added variable mul16s::a#0 to live range equivalence class [ mul16s::a#0 ]
Added variable mul16s::b#0 to live range equivalence class [ mul16s::b#0 ]
Added variable mul16s::return#2 to live range equivalence class [ mul16s::return#2 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$15 to live range equivalence class [ main::$15 ]
Added variable main::$13 to live range equivalence class [ main::$13 ]
Added variable div16s::dividend#0 to live range equivalence class [ div16s::dividend#0 ]
Added variable main::$17 to live range equivalence class [ main::$17 ]
Added variable div16s::divisor#0 to live range equivalence class [ div16s::divisor#0 ]
Added variable main::$14 to live range equivalence class [ main::$14 ]
Added variable main::$18 to live range equivalence class [ main::$18 ]
Added variable mul16u::b#0 to live range equivalence class [ mul16u::b#0 ]
Added variable mul16u::return#2 to live range equivalence class [ mul16u::return#2 ]
Added variable mul16s::$6 to live range equivalence class [ mul16s::$6 ]
Added variable mul16s::$11 to live range equivalence class [ mul16s::$11 ]
Added variable mul16s::$9 to live range equivalence class [ mul16s::$9 ]
Added variable mul16s::$12 to live range equivalence class [ mul16s::$12 ]
Added variable mul16s::return#0 to live range equivalence class [ mul16s::return#0 ]
Added variable divr16s::dividend#0 to live range equivalence class [ divr16s::dividend#0 ]
Added variable divr16s::divisor#0 to live range equivalence class [ divr16s::divisor#0 ]
Added variable mul16u::$1 to live range equivalence class [ mul16u::$1 ]
Added variable divr16u::divisor#0 to live range equivalence class [ divr16u::divisor#0 ]
Added variable divr16s::divisoru#1 to live range equivalence class [ divr16s::divisoru#1 ]
Added variable divr16s::dividendu#1 to live range equivalence class [ divr16s::dividendu#1 ]
Added variable utoa::$11 to live range equivalence class [ utoa::$11 ]
Added variable utoa::buffer#4 to live range equivalence class [ utoa::buffer#4 ]
Added variable utoa::$10 to live range equivalence class [ utoa::$10 ]
Added variable utoa::digit_value#0 to live range equivalence class [ utoa::digit_value#0 ]
Added variable utoa_append::buffer#0 to live range equivalence class [ utoa_append::buffer#0 ]
Added variable utoa_append::sub#0 to live range equivalence class [ utoa_append::sub#0 ]
Added variable utoa_append::return#0 to live range equivalence class [ utoa_append::return#0 ]
Added variable divr16u::$1 to live range equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to live range equivalence class [ divr16u::$2 ]
Added variable rem16u#0 to live range equivalence class [ rem16u#0 ]
Complete equivalence classes
[ lasttest#13 lasttest#19 lasttest#1 ]
[ lastprime#17 lastprime#1 ]
[ primeptr#7 primeptr#10 primeptr#1 ]
[ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 ]
[ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ]
[ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 ]
[ print_char::ch#4 print_char::ch#0 ]
[ print_char_cursor#20 print_char_cursor#41 print_char_cursor#21 ]
[ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
[ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ]
[ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ]
[ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
[ rem16s#10 rem16s#30 rem16s#1 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 ]
[ print_str::str#2 print_str::str#0 ]
[ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ main::$12 ]
[ main::$16 ]
[ main::p#0 ]
[ mul16s::a#0 ]
[ mul16s::b#0 ]
[ mul16s::return#2 ]
[ main::$0 ]
[ main::$15 ]
[ main::$13 ]
[ div16s::dividend#0 ]
[ main::$17 ]
[ div16s::divisor#0 ]
[ main::$14 ]
[ main::$18 ]
[ mul16u::b#0 ]
[ mul16u::return#2 ]
[ mul16s::$6 ]
[ mul16s::$11 ]
[ mul16s::$9 ]
[ mul16s::$12 ]
[ mul16s::return#0 ]
[ divr16s::dividend#0 ]
[ divr16s::divisor#0 ]
[ mul16u::$1 ]
[ divr16u::divisor#0 ]
[ divr16s::divisoru#1 ]
[ divr16s::dividendu#1 ]
[ utoa::$11 ]
[ utoa::buffer#4 ]
[ utoa::$10 ]
[ utoa::digit_value#0 ]
[ utoa_append::buffer#0 ]
[ utoa_append::sub#0 ]
[ utoa_append::return#0 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ rem16u#0 ]
Allocated zp[2]:2 [ lasttest#13 lasttest#19 lasttest#1 ]
Allocated zp[2]:4 [ lastprime#17 lastprime#1 ]
Allocated zp[2]:6 [ primeptr#7 primeptr#10 primeptr#1 ]
Allocated zp[2]:8 [ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 ]
Allocated zp[4]:10 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ]
Allocated zp[2]:14 [ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 ]
Allocated zp[1]:16 [ print_char::ch#4 print_char::ch#0 ]
Allocated zp[2]:17 [ print_char_cursor#20 print_char_cursor#41 print_char_cursor#21 ]
Allocated zp[2]:19 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
Allocated zp[4]:21 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
Allocated zp[4]:25 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated zp[2]:29 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ]
Allocated zp[2]:31 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ]
Allocated zp[1]:33 [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
Allocated zp[2]:34 [ rem16s#10 rem16s#30 rem16s#1 ]
Allocated zp[1]:36 [ utoa::digit#2 utoa::digit#1 ]
Allocated zp[2]:37 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 ]
Allocated zp[1]:39 [ utoa::started#2 utoa::started#4 ]
Allocated zp[2]:40 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 ]
Allocated zp[2]:42 [ print_str::str#2 print_str::str#0 ]
Allocated zp[2]:44 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp[2]:46 [ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ]
Allocated zp[2]:48 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp[1]:50 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp[2]:51 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
Allocated zp[1]:53 [ utoa_append::digit#2 utoa_append::digit#1 ]
Allocated zp[2]:54 [ main::$12 ]
Allocated zp[2]:56 [ main::$16 ]
Allocated zp[2]:58 [ main::p#0 ]
Allocated zp[2]:60 [ mul16s::a#0 ]
Allocated zp[2]:62 [ mul16s::b#0 ]
Allocated zp[4]:64 [ mul16s::return#2 ]
Allocated zp[4]:68 [ main::$0 ]
Allocated zp[2]:72 [ main::$15 ]
Allocated zp[2]:74 [ main::$13 ]
Allocated zp[2]:76 [ div16s::dividend#0 ]
Allocated zp[2]:78 [ main::$17 ]
Allocated zp[2]:80 [ div16s::divisor#0 ]
Allocated zp[2]:82 [ main::$14 ]
Allocated zp[2]:84 [ main::$18 ]
Allocated zp[2]:86 [ mul16u::b#0 ]
Allocated zp[4]:88 [ mul16u::return#2 ]
Allocated zp[2]:92 [ mul16s::$6 ]
Allocated zp[2]:94 [ mul16s::$11 ]
Allocated zp[2]:96 [ mul16s::$9 ]
Allocated zp[2]:98 [ mul16s::$12 ]
Allocated zp[4]:100 [ mul16s::return#0 ]
Allocated zp[2]:104 [ divr16s::dividend#0 ]
Allocated zp[2]:106 [ divr16s::divisor#0 ]
Allocated zp[1]:108 [ mul16u::$1 ]
Allocated zp[2]:109 [ divr16u::divisor#0 ]
Allocated zp[2]:111 [ divr16s::divisoru#1 ]
Allocated zp[2]:113 [ divr16s::dividendu#1 ]
Allocated zp[1]:115 [ utoa::$11 ]
Allocated zp[2]:116 [ utoa::buffer#4 ]
Allocated zp[1]:118 [ utoa::$10 ]
Allocated zp[2]:119 [ utoa::digit_value#0 ]
Allocated zp[2]:121 [ utoa_append::buffer#0 ]
Allocated zp[2]:123 [ utoa_append::sub#0 ]
Allocated zp[2]:125 [ utoa_append::return#0 ]
Allocated zp[1]:127 [ divr16u::$1 ]
Allocated zp[1]:128 [ divr16u::$2 ]
Allocated zp[2]:129 [ rem16u#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *(primenum+1*SIZEOF_SIGNED_WORD) = 2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(primenum+2*SIZEOF_SIGNED_WORD) = 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] main::$12 = lasttest#13 << 1 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$12 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$12 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [4] main::$16 = primenum + main::$12 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$16 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$16 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [5] main::p#0 = *main::$16 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::p#0 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::p#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [6] mul16s::a#0 = main::p#0 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::p#0 mul16s::a#0 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::p#0 mul16s::a#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [7] mul16s::b#0 = main::p#0 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [9] mul16s::return#2 = mul16s::return#0 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::return#2 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::return#2 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [10] main::$0 = mul16s::return#2 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$0 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$0 ] { }  ) always clobbers reg byte a 
Statement [11] main::$15 = (signed word)main::$0 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$15 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$15 ] { }  ) always clobbers reg byte a 
Statement [12] if(testnum#15<=main::$15) goto main::@2 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 ] { }  ) always clobbers reg byte a 
Statement [15] testnum#1 = testnum#15 + 2 [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#1 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#1 ] { }  ) always clobbers reg byte a 
Statement [17] main::$13 = primeptr#7 << 1 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 main::$13 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 main::$13 ] { { testnum#10 = div16s::dividend#0 } }  ) always clobbers reg byte a 
Statement [18] div16s::dividend#0 = testnum#10 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 main::$13 div16s::dividend#0 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 main::$13 div16s::dividend#0 ] { { testnum#10 = div16s::dividend#0 } }  ) always clobbers reg byte a 
Statement [19] main::$17 = primenum + main::$13 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::dividend#0 main::$17 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::dividend#0 main::$17 ] { { testnum#10 = div16s::dividend#0 } }  ) always clobbers reg byte a 
Statement [20] div16s::divisor#0 = *main::$17 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::dividend#0 div16s::divisor#0 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::dividend#0 div16s::divisor#0 ] { { testnum#10 = div16s::dividend#0 } }  ) always clobbers reg byte a reg byte y 
Statement [23] if(rem16s#10!=0) goto main::@4 [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#10 primeptr#1 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#10 primeptr#1 ] { }  ) always clobbers reg byte a 
Statement [24] testnum#2 = testnum#10 + 2 [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#2 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#2 ] { }  ) always clobbers reg byte a 
Statement [26] if(primeptr#10<=lasttest#19) goto main::@3 [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#11 primeptr#10 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#11 primeptr#10 ] { }  ) always clobbers reg byte a 
Statement [28] main::$14 = lastprime#1 << 1 [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 main::$14 ] (  [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 main::$14 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [29] main::$18 = primenum + main::$14 [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 main::$18 ] (  [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 main::$18 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [30] *main::$18 = testnum#11 [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 ] (  [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a reg byte y 
Statement [31] print_sint_decimal::w#1 = testnum#11 [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 print_sint_decimal::w#1 ] (  [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 print_sint_decimal::w#1 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [35] if(lastprime#1<$3e8) goto main::@1 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 ] (  [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 ] { }  ) always clobbers reg byte a 
Statement [37] mul16u::a#1 = (word)mul16s::a#0 [ mul16s::a#0 mul16s::b#0 mul16u::a#1 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::a#1 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [38] mul16u::b#0 = (word)mul16s::b#0 [ mul16s::a#0 mul16s::b#0 mul16u::a#1 mul16u::b#0 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::a#1 mul16u::b#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [40] mul16u::return#2 = mul16u::res#2 [ mul16s::a#0 mul16s::b#0 mul16u::return#2 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::return#2 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [41] mul16s::m#0 = mul16u::return#2 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [42] if(mul16s::a#0>=0) goto mul16s::@1 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [43] mul16s::$6 = _word1_ mul16s::m#0 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$6 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$6 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [44] mul16s::$11 = mul16s::$6 - (word)mul16s::b#0 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$11 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$11 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [45] mul16s::m#1 = mul16s::m#0 word1= mul16s::$11 [ mul16s::a#0 mul16s::b#0 mul16s::m#1 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#1 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [47] if(mul16s::b#0>=0) goto mul16s::@2 [ mul16s::a#0 mul16s::m#5 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::m#5 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [48] mul16s::$9 = _word1_ mul16s::m#5 [ mul16s::a#0 mul16s::m#5 mul16s::$9 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::m#5 mul16s::$9 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [49] mul16s::$12 = mul16s::$9 - (word)mul16s::a#0 [ mul16s::m#5 mul16s::$12 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::m#5 mul16s::$12 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [50] mul16s::m#2 = mul16s::m#5 word1= mul16s::$12 [ mul16s::m#2 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::m#2 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [52] mul16s::return#0 = (signed dword)mul16s::m#4 [ mul16s::return#0 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::return#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [54] divr16s::dividend#0 = div16s::dividend#0 [ div16s::divisor#0 divr16s::dividend#0 ] ( div16s:21 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::divisor#0 divr16s::dividend#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [55] divr16s::divisor#0 = div16s::divisor#0 [ divr16s::dividend#0 divr16s::divisor#0 ] ( div16s:21 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::dividend#0 divr16s::divisor#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [58] if(print_sint_decimal::w#1<0) goto print_sint_decimal::@1 [ print_char_cursor#41 print_sint_decimal::w#1 ] ( print_sint_decimal:32 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#41 print_sint_decimal::w#1 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [62] utoa::value#0 = (word)print_sint_decimal::w#4 [ print_char_cursor#21 utoa::value#0 ] ( print_sint_decimal:32 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::value#0 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [69] print_sint_decimal::w#0 = - print_sint_decimal::w#1 [ print_char_cursor#21 print_sint_decimal::w#0 ] ( print_sint_decimal:32 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 print_sint_decimal::w#0 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [71] *print_char_cursor#20 = print_char::ch#4 [ print_char_cursor#20 ] ( print_char:34 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#20 ] { { print_char_cursor#20 = print_char_cursor#21 } }  print_sint_decimal:32::print_char:60 [ lasttest#19 testnum#11 lastprime#1 print_sint_decimal::w#1 print_char_cursor#20 ] { { testnum#11 = print_sint_decimal::w#1 } { print_char_cursor#20 = print_char_cursor#41 } }  print_sint_decimal:32::print_char:68 [ lasttest#19 testnum#11 lastprime#1 print_sint_decimal::w#1 print_char_cursor#20 ] { { testnum#11 = print_sint_decimal::w#1 } { print_char_cursor#20 = print_char_cursor#41 } }  print_sint_decimal:32::print_str:65::print_char:129 [ lasttest#19 testnum#11 lastprime#1 print_str::str#2 print_char_cursor#20 ] { { testnum#11 = print_sint_decimal::w#1 } { print_char::ch#0 = print_char::ch#4 } { print_char_cursor#20 = print_char_cursor#21 } }  ) always clobbers reg byte y 
Statement [74] mul16u::mb#0 = (dword)mul16u::b#0 [ mul16u::a#1 mul16u::mb#0 ] ( mul16s:8::mul16u:39 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::a#1 mul16u::mb#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [76] if(mul16u::a#2!=0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] ( mul16s:8::mul16u:39 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [78] mul16u::$1 = mul16u::a#2 & 1 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] ( mul16s:8::mul16u:39 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [80] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 [ mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] ( mul16s:8::mul16u:39 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [84] if(divr16s::dividend#0<0) goto divr16s::@1 [ divr16s::dividend#0 divr16s::divisor#0 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::dividend#0 divr16s::divisor#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [85] divr16s::dividendu#8 = (word)divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#8 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisor#0 divr16s::dividendu#8 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [87] if(divr16s::divisor#0<0) goto divr16s::@3 [ divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:33 [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
Statement [88] divr16s::divisoru#5 = (word)divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [90] divr16u::dividend#1 = divr16s::dividendu#3 [ divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#1 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [91] divr16u::divisor#0 = divr16s::divisoru#3 [ divr16s::neg#4 divr16u::dividend#1 divr16u::divisor#0 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 divr16u::dividend#1 divr16u::divisor#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [94] rem16s#1 = - (signed word)rem16u#0 [ rem16s#1 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 rem16s#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [97] rem16s#30 = (signed word)rem16u#0 [ rem16s#30 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 rem16s#30 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [98] divr16s::divisoru#1 = - divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [99] divr16s::neg#2 = divr16s::neg#3 ^ 1 [ divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [100] divr16s::divisoru#4 = (word)divr16s::divisoru#1 [ divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [101] divr16s::dividendu#1 = - divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#1 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisor#0 divr16s::dividendu#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [102] divr16s::dividendu#7 = (word)divr16s::dividendu#1 [ divr16s::divisor#0 divr16s::dividendu#7 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisor#0 divr16s::dividendu#7 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [107] *utoa::buffer#11 = DIGITS[utoa::$11] [ utoa::buffer#11 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::buffer#11 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a reg byte y 
Statement [108] utoa::buffer#4 = ++ utoa::buffer#11 [ utoa::buffer#4 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::buffer#4 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [109] *utoa::buffer#4 = 0 [ ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a reg byte y 
Statement [111] utoa::$10 = utoa::digit#2 << 1 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:36 [ utoa::digit#2 utoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:39 [ utoa::started#2 utoa::started#4 ]
Statement [112] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [114] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [117] utoa_append::buffer#0 = utoa::buffer#11 [ utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [118] utoa_append::value#0 = utoa::value#2 [ utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [119] utoa_append::sub#0 = utoa::digit_value#0 [ utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [121] utoa_append::return#0 = utoa_append::value#2 [ utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [122] utoa::value#1 = utoa_append::return#0 [ utoa::digit#2 utoa::buffer#11 utoa::value#1 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa::value#1 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [126] if(0!=*print_str::str#2) goto print_str::@2 [ print_char_cursor#21 print_str::str#2 ] ( print_sint_decimal:32::print_str:65 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 print_str::str#2 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a reg byte y 
Statement [128] print_char::ch#0 = *print_str::str#2 [ print_char_cursor#21 print_char::ch#0 print_str::str#2 ] ( print_sint_decimal:32::print_str:65 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 print_char::ch#0 print_str::str#2 ] { { testnum#11 = print_sint_decimal::w#1 } { print_char::ch#0 = print_char::ch#4 } { print_char_cursor#20 = print_char_cursor#21 } }  ) always clobbers reg byte a reg byte y 
Statement [137] divr16u::rem#1 = divr16u::rem#0 | 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( div16s:21::divr16s:56::divr16u:92 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:50 [ divr16u::i#2 divr16u::i#1 ]
Statement [141] if(divr16u::rem#5<divr16u::divisor#0) goto divr16u::@3 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( div16s:21::divr16s:56::divr16u:92 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [143] divr16u::rem#2 = divr16u::rem#5 - divr16u::divisor#0 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( div16s:21::divr16s:56::divr16u:92 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [147] rem16u#0 = divr16u::rem#10 [ rem16u#0 ] ( div16s:21::divr16s:56::divr16u:92 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 rem16u#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [151] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( print_sint_decimal:32::utoa:63::utoa_append:120 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:53 [ utoa_append::digit#2 utoa_append::digit#1 ]
Statement [152] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] [ utoa_append::value#2 ] ( print_sint_decimal:32::utoa:63::utoa_append:120 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:36 [ utoa::digit#2 utoa::digit#1 ]
Statement [155] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( print_sint_decimal:32::utoa:63::utoa_append:120 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [0] *(primenum+1*SIZEOF_SIGNED_WORD) = 2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(primenum+2*SIZEOF_SIGNED_WORD) = 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] main::$12 = lasttest#13 << 1 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$12 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$12 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [4] main::$16 = primenum + main::$12 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$16 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$16 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [5] main::p#0 = *main::$16 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::p#0 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::p#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [6] mul16s::a#0 = main::p#0 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::p#0 mul16s::a#0 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::p#0 mul16s::a#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [7] mul16s::b#0 = main::p#0 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [9] mul16s::return#2 = mul16s::return#0 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::return#2 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::return#2 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [10] main::$0 = mul16s::return#2 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$0 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$0 ] { }  ) always clobbers reg byte a 
Statement [11] main::$15 = (signed word)main::$0 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$15 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$15 ] { }  ) always clobbers reg byte a 
Statement [12] if(testnum#15<=main::$15) goto main::@2 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 ] { }  ) always clobbers reg byte a 
Statement [15] testnum#1 = testnum#15 + 2 [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#1 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#1 ] { }  ) always clobbers reg byte a 
Statement [17] main::$13 = primeptr#7 << 1 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 main::$13 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 main::$13 ] { { testnum#10 = div16s::dividend#0 } }  ) always clobbers reg byte a 
Statement [18] div16s::dividend#0 = testnum#10 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 main::$13 div16s::dividend#0 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 main::$13 div16s::dividend#0 ] { { testnum#10 = div16s::dividend#0 } }  ) always clobbers reg byte a 
Statement [19] main::$17 = primenum + main::$13 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::dividend#0 main::$17 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::dividend#0 main::$17 ] { { testnum#10 = div16s::dividend#0 } }  ) always clobbers reg byte a 
Statement [20] div16s::divisor#0 = *main::$17 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::dividend#0 div16s::divisor#0 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::dividend#0 div16s::divisor#0 ] { { testnum#10 = div16s::dividend#0 } }  ) always clobbers reg byte a reg byte y 
Statement [23] if(rem16s#10!=0) goto main::@4 [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#10 primeptr#1 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#10 primeptr#1 ] { }  ) always clobbers reg byte a 
Statement [24] testnum#2 = testnum#10 + 2 [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#2 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#2 ] { }  ) always clobbers reg byte a 
Statement [26] if(primeptr#10<=lasttest#19) goto main::@3 [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#11 primeptr#10 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#11 primeptr#10 ] { }  ) always clobbers reg byte a 
Statement [28] main::$14 = lastprime#1 << 1 [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 main::$14 ] (  [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 main::$14 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [29] main::$18 = primenum + main::$14 [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 main::$18 ] (  [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 main::$18 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [30] *main::$18 = testnum#11 [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 ] (  [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a reg byte y 
Statement [31] print_sint_decimal::w#1 = testnum#11 [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 print_sint_decimal::w#1 ] (  [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 print_sint_decimal::w#1 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [35] if(lastprime#1<$3e8) goto main::@1 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 ] (  [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 ] { }  ) always clobbers reg byte a 
Statement [37] mul16u::a#1 = (word)mul16s::a#0 [ mul16s::a#0 mul16s::b#0 mul16u::a#1 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::a#1 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [38] mul16u::b#0 = (word)mul16s::b#0 [ mul16s::a#0 mul16s::b#0 mul16u::a#1 mul16u::b#0 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::a#1 mul16u::b#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [40] mul16u::return#2 = mul16u::res#2 [ mul16s::a#0 mul16s::b#0 mul16u::return#2 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::return#2 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [41] mul16s::m#0 = mul16u::return#2 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [42] if(mul16s::a#0>=0) goto mul16s::@1 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [43] mul16s::$6 = _word1_ mul16s::m#0 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$6 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$6 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [44] mul16s::$11 = mul16s::$6 - (word)mul16s::b#0 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$11 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$11 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [45] mul16s::m#1 = mul16s::m#0 word1= mul16s::$11 [ mul16s::a#0 mul16s::b#0 mul16s::m#1 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#1 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [47] if(mul16s::b#0>=0) goto mul16s::@2 [ mul16s::a#0 mul16s::m#5 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::m#5 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [48] mul16s::$9 = _word1_ mul16s::m#5 [ mul16s::a#0 mul16s::m#5 mul16s::$9 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::m#5 mul16s::$9 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [49] mul16s::$12 = mul16s::$9 - (word)mul16s::a#0 [ mul16s::m#5 mul16s::$12 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::m#5 mul16s::$12 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [50] mul16s::m#2 = mul16s::m#5 word1= mul16s::$12 [ mul16s::m#2 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::m#2 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [52] mul16s::return#0 = (signed dword)mul16s::m#4 [ mul16s::return#0 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::return#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [54] divr16s::dividend#0 = div16s::dividend#0 [ div16s::divisor#0 divr16s::dividend#0 ] ( div16s:21 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::divisor#0 divr16s::dividend#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [55] divr16s::divisor#0 = div16s::divisor#0 [ divr16s::dividend#0 divr16s::divisor#0 ] ( div16s:21 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::dividend#0 divr16s::divisor#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [58] if(print_sint_decimal::w#1<0) goto print_sint_decimal::@1 [ print_char_cursor#41 print_sint_decimal::w#1 ] ( print_sint_decimal:32 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#41 print_sint_decimal::w#1 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [62] utoa::value#0 = (word)print_sint_decimal::w#4 [ print_char_cursor#21 utoa::value#0 ] ( print_sint_decimal:32 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::value#0 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [69] print_sint_decimal::w#0 = - print_sint_decimal::w#1 [ print_char_cursor#21 print_sint_decimal::w#0 ] ( print_sint_decimal:32 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 print_sint_decimal::w#0 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [71] *print_char_cursor#20 = print_char::ch#4 [ print_char_cursor#20 ] ( print_char:34 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#20 ] { { print_char_cursor#20 = print_char_cursor#21 } }  print_sint_decimal:32::print_char:60 [ lasttest#19 testnum#11 lastprime#1 print_sint_decimal::w#1 print_char_cursor#20 ] { { testnum#11 = print_sint_decimal::w#1 } { print_char_cursor#20 = print_char_cursor#41 } }  print_sint_decimal:32::print_char:68 [ lasttest#19 testnum#11 lastprime#1 print_sint_decimal::w#1 print_char_cursor#20 ] { { testnum#11 = print_sint_decimal::w#1 } { print_char_cursor#20 = print_char_cursor#41 } }  print_sint_decimal:32::print_str:65::print_char:129 [ lasttest#19 testnum#11 lastprime#1 print_str::str#2 print_char_cursor#20 ] { { testnum#11 = print_sint_decimal::w#1 } { print_char::ch#0 = print_char::ch#4 } { print_char_cursor#20 = print_char_cursor#21 } }  ) always clobbers reg byte y 
Statement [74] mul16u::mb#0 = (dword)mul16u::b#0 [ mul16u::a#1 mul16u::mb#0 ] ( mul16s:8::mul16u:39 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::a#1 mul16u::mb#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [76] if(mul16u::a#2!=0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] ( mul16s:8::mul16u:39 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [78] mul16u::$1 = mul16u::a#2 & 1 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] ( mul16s:8::mul16u:39 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [80] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 [ mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] ( mul16s:8::mul16u:39 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [84] if(divr16s::dividend#0<0) goto divr16s::@1 [ divr16s::dividend#0 divr16s::divisor#0 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::dividend#0 divr16s::divisor#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [85] divr16s::dividendu#8 = (word)divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#8 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisor#0 divr16s::dividendu#8 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [87] if(divr16s::divisor#0<0) goto divr16s::@3 [ divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [88] divr16s::divisoru#5 = (word)divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [90] divr16u::dividend#1 = divr16s::dividendu#3 [ divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#1 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [91] divr16u::divisor#0 = divr16s::divisoru#3 [ divr16s::neg#4 divr16u::dividend#1 divr16u::divisor#0 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 divr16u::dividend#1 divr16u::divisor#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [94] rem16s#1 = - (signed word)rem16u#0 [ rem16s#1 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 rem16s#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [97] rem16s#30 = (signed word)rem16u#0 [ rem16s#30 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 rem16s#30 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [98] divr16s::divisoru#1 = - divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [99] divr16s::neg#2 = divr16s::neg#3 ^ 1 [ divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [100] divr16s::divisoru#4 = (word)divr16s::divisoru#1 [ divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [101] divr16s::dividendu#1 = - divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#1 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisor#0 divr16s::dividendu#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [102] divr16s::dividendu#7 = (word)divr16s::dividendu#1 [ divr16s::divisor#0 divr16s::dividendu#7 ] ( div16s:21::divr16s:56 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisor#0 divr16s::dividendu#7 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [107] *utoa::buffer#11 = DIGITS[utoa::$11] [ utoa::buffer#11 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::buffer#11 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a reg byte y 
Statement [108] utoa::buffer#4 = ++ utoa::buffer#11 [ utoa::buffer#4 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::buffer#4 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [109] *utoa::buffer#4 = 0 [ ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a reg byte y 
Statement [111] utoa::$10 = utoa::digit#2 << 1 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [112] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [114] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [117] utoa_append::buffer#0 = utoa::buffer#11 [ utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [118] utoa_append::value#0 = utoa::value#2 [ utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [119] utoa_append::sub#0 = utoa::digit_value#0 [ utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [121] utoa_append::return#0 = utoa_append::value#2 [ utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [122] utoa::value#1 = utoa_append::return#0 [ utoa::digit#2 utoa::buffer#11 utoa::value#1 ] ( print_sint_decimal:32::utoa:63 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa::value#1 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [126] if(0!=*print_str::str#2) goto print_str::@2 [ print_char_cursor#21 print_str::str#2 ] ( print_sint_decimal:32::print_str:65 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 print_str::str#2 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a reg byte y 
Statement [128] print_char::ch#0 = *print_str::str#2 [ print_char_cursor#21 print_char::ch#0 print_str::str#2 ] ( print_sint_decimal:32::print_str:65 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 print_char::ch#0 print_str::str#2 ] { { testnum#11 = print_sint_decimal::w#1 } { print_char::ch#0 = print_char::ch#4 } { print_char_cursor#20 = print_char_cursor#21 } }  ) always clobbers reg byte a reg byte y 
Statement [137] divr16u::rem#1 = divr16u::rem#0 | 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( div16s:21::divr16s:56::divr16u:92 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [141] if(divr16u::rem#5<divr16u::divisor#0) goto divr16u::@3 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( div16s:21::divr16s:56::divr16u:92 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [143] divr16u::rem#2 = divr16u::rem#5 - divr16u::divisor#0 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( div16s:21::divr16s:56::divr16u:92 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [147] rem16u#0 = divr16u::rem#10 [ rem16u#0 ] ( div16s:21::divr16s:56::divr16u:92 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 rem16u#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [151] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( print_sint_decimal:32::utoa:63::utoa_append:120 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [152] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] [ utoa_append::value#2 ] ( print_sint_decimal:32::utoa:63::utoa_append:120 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [155] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( print_sint_decimal:32::utoa:63::utoa_append:120 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ lasttest#13 lasttest#19 lasttest#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ lastprime#17 lastprime#1 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ primeptr#7 primeptr#10 primeptr#1 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 ] : zp[2]:8 , 
Potential registers zp[4]:10 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ] : zp[4]:10 , 
Potential registers zp[2]:14 [ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 ] : zp[2]:14 , 
Potential registers zp[1]:16 [ print_char::ch#4 print_char::ch#0 ] : zp[1]:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:17 [ print_char_cursor#20 print_char_cursor#41 print_char_cursor#21 ] : zp[2]:17 , 
Potential registers zp[2]:19 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] : zp[2]:19 , 
Potential registers zp[4]:21 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] : zp[4]:21 , 
Potential registers zp[4]:25 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] : zp[4]:25 , 
Potential registers zp[2]:29 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ] : zp[2]:29 , 
Potential registers zp[2]:31 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ] : zp[2]:31 , 
Potential registers zp[1]:33 [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ] : zp[1]:33 , reg byte x , reg byte y , 
Potential registers zp[2]:34 [ rem16s#10 rem16s#30 rem16s#1 ] : zp[2]:34 , 
Potential registers zp[1]:36 [ utoa::digit#2 utoa::digit#1 ] : zp[1]:36 , reg byte x , 
Potential registers zp[2]:37 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 ] : zp[2]:37 , 
Potential registers zp[1]:39 [ utoa::started#2 utoa::started#4 ] : zp[1]:39 , reg byte x , reg byte y , 
Potential registers zp[2]:40 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 ] : zp[2]:40 , 
Potential registers zp[2]:42 [ print_str::str#2 print_str::str#0 ] : zp[2]:42 , 
Potential registers zp[2]:44 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp[2]:44 , 
Potential registers zp[2]:46 [ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ] : zp[2]:46 , 
Potential registers zp[2]:48 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp[2]:48 , 
Potential registers zp[1]:50 [ divr16u::i#2 divr16u::i#1 ] : zp[1]:50 , reg byte x , reg byte y , 
Potential registers zp[2]:51 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] : zp[2]:51 , 
Potential registers zp[1]:53 [ utoa_append::digit#2 utoa_append::digit#1 ] : zp[1]:53 , reg byte x , reg byte y , 
Potential registers zp[2]:54 [ main::$12 ] : zp[2]:54 , 
Potential registers zp[2]:56 [ main::$16 ] : zp[2]:56 , 
Potential registers zp[2]:58 [ main::p#0 ] : zp[2]:58 , 
Potential registers zp[2]:60 [ mul16s::a#0 ] : zp[2]:60 , 
Potential registers zp[2]:62 [ mul16s::b#0 ] : zp[2]:62 , 
Potential registers zp[4]:64 [ mul16s::return#2 ] : zp[4]:64 , 
Potential registers zp[4]:68 [ main::$0 ] : zp[4]:68 , 
Potential registers zp[2]:72 [ main::$15 ] : zp[2]:72 , 
Potential registers zp[2]:74 [ main::$13 ] : zp[2]:74 , 
Potential registers zp[2]:76 [ div16s::dividend#0 ] : zp[2]:76 , 
Potential registers zp[2]:78 [ main::$17 ] : zp[2]:78 , 
Potential registers zp[2]:80 [ div16s::divisor#0 ] : zp[2]:80 , 
Potential registers zp[2]:82 [ main::$14 ] : zp[2]:82 , 
Potential registers zp[2]:84 [ main::$18 ] : zp[2]:84 , 
Potential registers zp[2]:86 [ mul16u::b#0 ] : zp[2]:86 , 
Potential registers zp[4]:88 [ mul16u::return#2 ] : zp[4]:88 , 
Potential registers zp[2]:92 [ mul16s::$6 ] : zp[2]:92 , 
Potential registers zp[2]:94 [ mul16s::$11 ] : zp[2]:94 , 
Potential registers zp[2]:96 [ mul16s::$9 ] : zp[2]:96 , 
Potential registers zp[2]:98 [ mul16s::$12 ] : zp[2]:98 , 
Potential registers zp[4]:100 [ mul16s::return#0 ] : zp[4]:100 , 
Potential registers zp[2]:104 [ divr16s::dividend#0 ] : zp[2]:104 , 
Potential registers zp[2]:106 [ divr16s::divisor#0 ] : zp[2]:106 , 
Potential registers zp[1]:108 [ mul16u::$1 ] : zp[1]:108 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:109 [ divr16u::divisor#0 ] : zp[2]:109 , 
Potential registers zp[2]:111 [ divr16s::divisoru#1 ] : zp[2]:111 , 
Potential registers zp[2]:113 [ divr16s::dividendu#1 ] : zp[2]:113 , 
Potential registers zp[1]:115 [ utoa::$11 ] : zp[1]:115 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:116 [ utoa::buffer#4 ] : zp[2]:116 , 
Potential registers zp[1]:118 [ utoa::$10 ] : zp[1]:118 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:119 [ utoa::digit_value#0 ] : zp[2]:119 , 
Potential registers zp[2]:121 [ utoa_append::buffer#0 ] : zp[2]:121 , 
Potential registers zp[2]:123 [ utoa_append::sub#0 ] : zp[2]:123 , 
Potential registers zp[2]:125 [ utoa_append::return#0 ] : zp[2]:125 , 
Potential registers zp[1]:127 [ divr16u::$1 ] : zp[1]:127 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:128 [ divr16u::$2 ] : zp[1]:128 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:129 [ rem16u#0 ] : zp[2]:129 , 

REGISTER UPLIFT SCOPES
Uplift Scope [utoa_append] 2,500,550,003.5: zp[2]:51 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] 2,000,500,002.5: zp[1]:53 [ utoa_append::digit#2 utoa_append::digit#1 ] 333,350,000.5: zp[2]:123 [ utoa_append::sub#0 ] 200,002: zp[2]:125 [ utoa_append::return#0 ] 137,500.25: zp[2]:121 [ utoa_append::buffer#0 ] 
Uplift Scope [divr16u] 875,033,342.42: zp[2]:44 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 375,000,003.75: zp[2]:48 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 200,000,002: zp[1]:127 [ divr16u::$1 ] 200,000,002: zp[1]:128 [ divr16u::$2 ] 165,384,617.04: zp[1]:50 [ divr16u::i#2 divr16u::i#1 ] 67,908,096.73: zp[2]:46 [ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ] 11,765,294.29: zp[2]:109 [ divr16u::divisor#0 ] 
Uplift Scope [utoa] 378,718.21: zp[2]:40 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 ] 307,839.93: zp[2]:37 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 ] 228,573.71: zp[1]:36 [ utoa::digit#2 utoa::digit#1 ] 200,002: zp[1]:118 [ utoa::$10 ] 150,001.5: zp[1]:39 [ utoa::started#2 utoa::started#4 ] 60,000.6: zp[2]:119 [ utoa::digit_value#0 ] 2,002: zp[1]:115 [ utoa::$11 ] 2,002: zp[2]:116 [ utoa::buffer#4 ] 
Uplift Scope [print_char] 1,300,004: zp[1]:16 [ print_char::ch#4 print_char::ch#0 ] 
Uplift Scope [] 1,100,115.55: zp[2]:17 [ print_char_cursor#20 print_char_cursor#41 print_char_cursor#21 ] 43,354.5: zp[2]:34 [ rem16s#10 rem16s#30 rem16s#1 ] 25,000.25: zp[2]:129 [ rem16u#0 ] 308.96: zp[2]:8 [ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 ] 303: zp[2]:6 [ primeptr#7 primeptr#10 primeptr#1 ] 32.09: zp[2]:2 [ lasttest#13 lasttest#19 lasttest#1 ] 5.77: zp[2]:4 [ lastprime#17 lastprime#1 ] 
Uplift Scope [mul16u] 350,020.33: zp[4]:21 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] 245,004.57: zp[4]:25 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] 200,002: zp[1]:108 [ mul16u::$1 ] 167,202.5: zp[2]:19 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] 202: zp[4]:88 [ mul16u::return#2 ] 101: zp[2]:86 [ mul16u::b#0 ] 
Uplift Scope [print_str] 300,003: zp[2]:42 [ print_str::str#2 print_str::str#0 ] 
Uplift Scope [divr16s] 55,005.5: zp[2]:31 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ] 44,290.14: zp[2]:29 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ] 22,502.25: zp[1]:33 [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ] 10,001: zp[2]:113 [ divr16s::dividendu#1 ] 7,001: zp[2]:104 [ divr16s::dividend#0 ] 5,000.5: zp[2]:111 [ divr16s::divisoru#1 ] 3,000.43: zp[2]:106 [ divr16s::divisor#0 ] 
Uplift Scope [mul16s] 833.25: zp[4]:10 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ] 202: zp[2]:92 [ mul16s::$6 ] 202: zp[2]:94 [ mul16s::$11 ] 202: zp[2]:96 [ mul16s::$9 ] 202: zp[2]:98 [ mul16s::$12 ] 37.33: zp[4]:100 [ mul16s::return#0 ] 22: zp[4]:64 [ mul16s::return#2 ] 10.18: zp[2]:62 [ mul16s::b#0 ] 8: zp[2]:60 [ mul16s::a#0 ] 
Uplift Scope [div16s] 551: zp[2]:80 [ div16s::divisor#0 ] 367.33: zp[2]:76 [ div16s::dividend#0 ] 
Uplift Scope [print_sint_decimal] 456.33: zp[2]:14 [ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 ] 
Uplift Scope [main] 202: zp[2]:78 [ main::$17 ] 101: zp[2]:74 [ main::$13 ] 22: zp[2]:54 [ main::$12 ] 22: zp[2]:56 [ main::$16 ] 22: zp[2]:72 [ main::$15 ] 22: zp[2]:82 [ main::$14 ] 22: zp[2]:84 [ main::$18 ] 16.5: zp[2]:58 [ main::p#0 ] 11: zp[4]:68 [ main::$0 ] 
Uplift Scope [RADIX] 

Uplifting [utoa_append] best 278185 combination zp[2]:51 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ] zp[2]:123 [ utoa_append::sub#0 ] zp[2]:125 [ utoa_append::return#0 ] zp[2]:121 [ utoa_append::buffer#0 ] 
Uplifting [divr16u] best 259185 combination zp[2]:44 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp[2]:48 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp[2]:46 [ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ] zp[2]:109 [ divr16u::divisor#0 ] 
Uplifting [utoa] best 258079 combination zp[2]:40 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 ] zp[2]:37 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 ] zp[1]:36 [ utoa::digit#2 utoa::digit#1 ] reg byte a [ utoa::$10 ] reg byte x [ utoa::started#2 utoa::started#4 ] zp[2]:119 [ utoa::digit_value#0 ] reg byte x [ utoa::$11 ] zp[2]:116 [ utoa::buffer#4 ] 
Uplifting [print_char] best 257767 combination reg byte a [ print_char::ch#4 print_char::ch#0 ] 
Uplifting [] best 257767 combination zp[2]:17 [ print_char_cursor#20 print_char_cursor#41 print_char_cursor#21 ] zp[2]:34 [ rem16s#10 rem16s#30 rem16s#1 ] zp[2]:129 [ rem16u#0 ] zp[2]:8 [ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 ] zp[2]:6 [ primeptr#7 primeptr#10 primeptr#1 ] zp[2]:2 [ lasttest#13 lasttest#19 lasttest#1 ] zp[2]:4 [ lastprime#17 lastprime#1 ] 
Uplifting [mul16u] best 257367 combination zp[4]:21 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] zp[4]:25 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] reg byte a [ mul16u::$1 ] zp[2]:19 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] zp[4]:88 [ mul16u::return#2 ] zp[2]:86 [ mul16u::b#0 ] 
Uplifting [print_str] best 257367 combination zp[2]:42 [ print_str::str#2 print_str::str#0 ] 
Uplifting [divr16s] best 257358 combination zp[2]:31 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ] zp[2]:29 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ] reg byte y [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ] zp[2]:113 [ divr16s::dividendu#1 ] zp[2]:104 [ divr16s::dividend#0 ] zp[2]:111 [ divr16s::divisoru#1 ] zp[2]:106 [ divr16s::divisor#0 ] 
Uplifting [mul16s] best 257358 combination zp[4]:10 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ] zp[2]:92 [ mul16s::$6 ] zp[2]:94 [ mul16s::$11 ] zp[2]:96 [ mul16s::$9 ] zp[2]:98 [ mul16s::$12 ] zp[4]:100 [ mul16s::return#0 ] zp[4]:64 [ mul16s::return#2 ] zp[2]:62 [ mul16s::b#0 ] zp[2]:60 [ mul16s::a#0 ] 
Uplifting [div16s] best 257358 combination zp[2]:80 [ div16s::divisor#0 ] zp[2]:76 [ div16s::dividend#0 ] 
Uplifting [print_sint_decimal] best 257358 combination zp[2]:14 [ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 ] 
Uplifting [main] best 257358 combination zp[2]:78 [ main::$17 ] zp[2]:74 [ main::$13 ] zp[2]:54 [ main::$12 ] zp[2]:56 [ main::$16 ] zp[2]:72 [ main::$15 ] zp[2]:82 [ main::$14 ] zp[2]:84 [ main::$18 ] zp[2]:58 [ main::p#0 ] zp[4]:68 [ main::$0 ] 
Uplifting [RADIX] best 257358 combination 
Attempting to uplift remaining variables inzp[1]:36 [ utoa::digit#2 utoa::digit#1 ]
Uplifting [utoa] best 257358 combination zp[1]:36 [ utoa::digit#2 utoa::digit#1 ] 
Coalescing zero page register [ zp[2]:34 [ rem16s#10 rem16s#30 rem16s#1 ] ] with [ zp[2]:129 [ rem16u#0 ] ] - score: 2
Coalescing zero page register [ zp[2]:8 [ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 ] ] with [ zp[2]:76 [ div16s::dividend#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:10 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ] ] with [ zp[4]:88 [ mul16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[4]:10 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 ] ] with [ zp[4]:100 [ mul16s::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:14 [ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 ] ] with [ zp[2]:37 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:29 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ] ] with [ zp[2]:46 [ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:29 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ] ] with [ zp[2]:104 [ divr16s::dividend#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:29 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 divr16s::dividend#0 ] ] with [ zp[2]:113 [ divr16s::dividendu#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:31 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ] ] with [ zp[2]:106 [ divr16s::divisor#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:31 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16s::divisor#0 ] ] with [ zp[2]:109 [ divr16u::divisor#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:31 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16s::divisor#0 divr16u::divisor#0 ] ] with [ zp[2]:111 [ divr16s::divisoru#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:40 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 ] ] with [ zp[2]:116 [ utoa::buffer#4 ] ] - score: 1
Coalescing zero page register [ zp[2]:40 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 utoa::buffer#4 ] ] with [ zp[2]:121 [ utoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:51 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] with [ zp[2]:125 [ utoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:54 [ main::$12 ] ] with [ zp[2]:56 [ main::$16 ] ] - score: 1
Coalescing zero page register [ zp[2]:58 [ main::p#0 ] ] with [ zp[2]:60 [ mul16s::a#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:58 [ main::p#0 mul16s::a#0 ] ] with [ zp[2]:62 [ mul16s::b#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:64 [ mul16s::return#2 ] ] with [ zp[4]:68 [ main::$0 ] ] - score: 1
Coalescing zero page register [ zp[2]:74 [ main::$13 ] ] with [ zp[2]:78 [ main::$17 ] ] - score: 1
Coalescing zero page register [ zp[2]:82 [ main::$14 ] ] with [ zp[2]:84 [ main::$18 ] ] - score: 1
Coalescing zero page register [ zp[2]:92 [ mul16s::$6 ] ] with [ zp[2]:94 [ mul16s::$11 ] ] - score: 1
Coalescing zero page register [ zp[2]:96 [ mul16s::$9 ] ] with [ zp[2]:98 [ mul16s::$12 ] ] - score: 1
Coalescing zero page register [ zp[2]:119 [ utoa::digit_value#0 ] ] with [ zp[2]:123 [ utoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:14 [ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 ] ] with [ zp[2]:51 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ] ] - score: 2
Coalescing zero page register [ zp[4]:10 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 mul16s::return#0 ] ] with [ zp[4]:21 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] ] - score: 1
Coalescing zero page register [ zp[4]:10 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 ] ] with [ zp[4]:64 [ mul16s::return#2 main::$0 ] ] - score: 1
Coalescing zero page register [ zp[2]:31 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16s::divisor#0 divr16u::divisor#0 divr16s::divisoru#1 ] ] with [ zp[2]:80 [ div16s::divisor#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:34 [ rem16s#10 rem16s#30 rem16s#1 rem16u#0 ] ] with [ zp[2]:44 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:54 [ main::$12 main::$16 ] ] with [ zp[2]:58 [ main::p#0 mul16s::a#0 mul16s::b#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:31 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16s::divisor#0 divr16u::divisor#0 divr16s::divisoru#1 div16s::divisor#0 ] ] with [ zp[2]:74 [ main::$13 main::$17 ] ] - score: 1
Coalescing zero page register [ zp[2]:14 [ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ] ] with [ zp[2]:6 [ primeptr#7 primeptr#10 primeptr#1 ] ]
Coalescing zero page register [ zp[2]:29 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 divr16s::dividend#0 divr16s::dividendu#1 ] ] with [ zp[2]:19 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] ]
Coalescing zero page register [ zp[2]:40 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 utoa::buffer#4 utoa_append::buffer#0 ] ] with [ zp[2]:34 [ rem16s#10 rem16s#30 rem16s#1 rem16u#0 divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ]
Coalescing zero page register [ zp[2]:48 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp[2]:42 [ print_str::str#2 print_str::str#0 ] ]
Coalescing zero page register [ zp[2]:92 [ mul16s::$6 mul16s::$11 ] ] with [ zp[2]:86 [ mul16u::b#0 ] ]
Coalescing zero page register [ zp[2]:119 [ utoa::digit_value#0 utoa_append::sub#0 ] ] with [ zp[2]:96 [ mul16s::$9 mul16s::$12 ] ]
Coalescing zero page register [ zp[2]:54 [ main::$12 main::$16 main::p#0 mul16s::a#0 mul16s::b#0 ] ] with [ zp[2]:14 [ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 primeptr#7 primeptr#10 primeptr#1 ] ]
Coalescing zero page register [ zp[2]:72 [ main::$15 ] ] with [ zp[2]:29 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 divr16s::dividend#0 divr16s::dividendu#1 mul16u::a#2 mul16u::a#1 mul16u::a#0 ] ]
Coalescing zero page register [ zp[2]:82 [ main::$14 main::$18 ] ] with [ zp[2]:40 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 utoa::buffer#4 utoa_append::buffer#0 rem16s#10 rem16s#30 rem16s#1 rem16u#0 divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ]
Coalescing zero page register [ zp[2]:92 [ mul16s::$6 mul16s::$11 mul16u::b#0 ] ] with [ zp[2]:48 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 print_str::str#2 print_str::str#0 ] ]
Allocated (was zp[2]:8) zp[2]:6 [ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 div16s::dividend#0 ]
Allocated (was zp[4]:10) zp[4]:8 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16s::return#2 main::$0 ]
Allocated (was zp[2]:17) zp[2]:12 [ print_char_cursor#20 print_char_cursor#41 print_char_cursor#21 ]
Allocated (was zp[4]:25) zp[4]:14 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated (was zp[2]:31) zp[2]:18 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16s::divisor#0 divr16u::divisor#0 divr16s::divisoru#1 div16s::divisor#0 main::$13 main::$17 ]
Allocated (was zp[1]:36) zp[1]:20 [ utoa::digit#2 utoa::digit#1 ]
Allocated (was zp[2]:54) zp[2]:21 [ main::$12 main::$16 main::p#0 mul16s::a#0 mul16s::b#0 print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 primeptr#7 primeptr#10 primeptr#1 ]
Allocated (was zp[2]:72) zp[2]:23 [ main::$15 divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 divr16s::dividend#0 divr16s::dividendu#1 mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
Allocated (was zp[2]:82) zp[2]:25 [ main::$14 main::$18 utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 utoa::buffer#4 utoa_append::buffer#0 rem16s#10 rem16s#30 rem16s#1 rem16u#0 divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated (was zp[2]:92) zp[2]:27 [ mul16s::$6 mul16s::$11 mul16u::b#0 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 print_str::str#2 print_str::str#0 ]
Allocated (was zp[2]:119) zp[2]:29 [ utoa::digit_value#0 utoa_append::sub#0 mul16s::$9 mul16s::$12 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Calculates the 1000 first primes
// From A Comparison of Language Speed, The Transactor, March 1987, Volume 7, Issue 5
// http://csbruce.com/cbm/transactor/pdfs/trans_v7_i05.pdf
  // Upstart
  // Commodore 64 PRG executable file
.file [name="primes-1000.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  .label print_screen = $400
  // Remainder after unsigned 16-bit division
  .label rem16u = $19
  // Remainder after signed 16 bit division
  .label rem16s = $19
  .label testnum = 6
  .label lasttest = 2
  .label primeptr = $15
  .label lastprime = 4
  .label print_char_cursor = $c
.segment Code
  // main
main: {
    .label __0 = 8
    .label __12 = $15
    .label __13 = $12
    .label __14 = $19
    .label __15 = $17
    .label p = $15
    .label __16 = $15
    .label __17 = $12
    .label __18 = $19
    // [0] *(primenum+1*SIZEOF_SIGNED_WORD) = 2 -- _deref_pwsc1=vwsc2 
    lda #<2
    sta primenum+1*SIZEOF_SIGNED_WORD
    lda #>2
    sta primenum+1*SIZEOF_SIGNED_WORD+1
    // [1] *(primenum+2*SIZEOF_SIGNED_WORD) = 3 -- _deref_pwsc1=vwsc2 
    lda #<3
    sta primenum+2*SIZEOF_SIGNED_WORD
    lda #>3
    sta primenum+2*SIZEOF_SIGNED_WORD+1
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [2] phi print_char_cursor#41 = print_screen#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [2] phi lastprime#17 = 2 [phi:main->main::@1#1] -- vwsz1=vbsc1 
    lda #<2
    sta.z lastprime
    lda #>2
    sta.z lastprime+1
    // [2] phi testnum#15 = 3 [phi:main->main::@1#2] -- vwsz1=vbsc1 
    lda #<3
    sta.z testnum
    lda #>3
    sta.z testnum+1
    // [2] phi lasttest#13 = 2 [phi:main->main::@1#3] -- vwsz1=vbsc1 
    lda #<2
    sta.z lasttest
    lda #>2
    sta.z lasttest+1
    jmp __b1
    // [2] phi from main::@11 to main::@1 [phi:main::@11->main::@1]
  __b1_from___b11:
    // [2] phi print_char_cursor#41 = print_char_cursor#21 [phi:main::@11->main::@1#0] -- register_copy 
    // [2] phi lastprime#17 = lastprime#1 [phi:main::@11->main::@1#1] -- register_copy 
    // [2] phi testnum#15 = testnum#11 [phi:main::@11->main::@1#2] -- register_copy 
    // [2] phi lasttest#13 = lasttest#19 [phi:main::@11->main::@1#3] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [3] main::$12 = lasttest#13 << 1 -- vwsz1=vwsz2_rol_1 
    lda.z lasttest
    asl
    sta.z __12
    lda.z lasttest+1
    rol
    sta.z __12+1
    // [4] main::$16 = primenum + main::$12 -- pwsz1=pwsc1_plus_vwsz1 
    clc
    lda.z __16
    adc #<primenum
    sta.z __16
    lda.z __16+1
    adc #>primenum
    sta.z __16+1
    // [5] main::p#0 = *main::$16 -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (p),y
    pha
    iny
    lda (p),y
    sta.z p+1
    pla
    sta.z p
    // [6] mul16s::a#0 = main::p#0
    // [7] mul16s::b#0 = main::p#0
    // [8] call mul16s 
    jsr mul16s
    // [9] mul16s::return#2 = mul16s::return#0
    jmp __b8
    // main::@8
  __b8:
    // [10] main::$0 = mul16s::return#2
    // [11] main::$15 = (signed word)main::$0 -- vwsz1=_sword_vdsz2 
    lda.z __0
    sta.z __15
    lda.z __0+1
    sta.z __15+1
    // [12] if(testnum#15<=main::$15) goto main::@2 -- vwsz1_le_vwsz2_then_la1 
    lda.z __15
    cmp.z testnum
    lda.z __15+1
    sbc.z testnum+1
    bvc !+
    eor #$80
  !:
    bpl __b2_from___b8
    jmp __b7
    // main::@7
  __b7:
    // [13] lasttest#1 = ++ lasttest#13 -- vwsz1=_inc_vwsz1 
    inc.z lasttest
    bne !+
    inc.z lasttest+1
  !:
    // [14] phi from main::@7 main::@8 to main::@2 [phi:main::@7/main::@8->main::@2]
  __b2_from___b7:
  __b2_from___b8:
    // [14] phi lasttest#19 = lasttest#1 [phi:main::@7/main::@8->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [15] testnum#1 = testnum#15 + 2 -- vwsz1=vwsz1_plus_vbsc1 
    clc
    lda.z testnum
    adc #<2
    sta.z testnum
    lda.z testnum+1
    adc #>2
    sta.z testnum+1
    // [16] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [16] phi testnum#10 = testnum#1 [phi:main::@2->main::@3#0] -- register_copy 
    // [16] phi primeptr#7 = 2 [phi:main::@2->main::@3#1] -- vwsz1=vbsc1 
    lda #<2
    sta.z primeptr
    lda #>2
    sta.z primeptr+1
    jmp __b3
    // [16] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [16] phi testnum#10 = testnum#11 [phi:main::@4->main::@3#0] -- register_copy 
    // [16] phi primeptr#7 = primeptr#10 [phi:main::@4->main::@3#1] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [17] main::$13 = primeptr#7 << 1 -- vwsz1=vwsz2_rol_1 
    lda.z primeptr
    asl
    sta.z __13
    lda.z primeptr+1
    rol
    sta.z __13+1
    // [18] div16s::dividend#0 = testnum#10
    // [19] main::$17 = primenum + main::$13 -- pwsz1=pwsc1_plus_vwsz1 
    clc
    lda.z __17
    adc #<primenum
    sta.z __17
    lda.z __17+1
    adc #>primenum
    sta.z __17+1
    // [20] div16s::divisor#0 = *main::$17 -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (div16s.divisor),y
    pha
    iny
    lda (div16s.divisor),y
    sta.z div16s.divisor+1
    pla
    sta.z div16s.divisor
    // [21] call div16s 
    jsr div16s
    jmp __b9
    // main::@9
  __b9:
    // [22] primeptr#1 = ++ primeptr#7 -- vwsz1=_inc_vwsz1 
    inc.z primeptr
    bne !+
    inc.z primeptr+1
  !:
    // [23] if(rem16s#10!=0) goto main::@4 -- vwsz1_neq_0_then_la1 
    lda.z rem16s+1
    ora.z rem16s
    bne __b4_from___b9
    jmp __b5
    // main::@5
  __b5:
    // [24] testnum#2 = testnum#10 + 2 -- vwsz1=vwsz1_plus_vbsc1 
    clc
    lda.z testnum
    adc #<2
    sta.z testnum
    lda.z testnum+1
    adc #>2
    sta.z testnum+1
    // [25] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
  __b4_from___b5:
    // [25] phi testnum#11 = testnum#2 [phi:main::@5->main::@4#0] -- register_copy 
    // [25] phi primeptr#10 = 2 [phi:main::@5->main::@4#1] -- vwsz1=vbsc1 
    lda #<2
    sta.z primeptr
    lda #>2
    sta.z primeptr+1
    jmp __b4
    // [25] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
  __b4_from___b9:
    // [25] phi testnum#11 = testnum#10 [phi:main::@9->main::@4#0] -- register_copy 
    // [25] phi primeptr#10 = primeptr#1 [phi:main::@9->main::@4#1] -- register_copy 
    jmp __b4
    // main::@4
  __b4:
    // [26] if(primeptr#10<=lasttest#19) goto main::@3 -- vwsz1_le_vwsz2_then_la1 
    lda.z lasttest
    cmp.z primeptr
    lda.z lasttest+1
    sbc.z primeptr+1
    bvc !+
    eor #$80
  !:
    bpl __b3_from___b4
    jmp __b6
    // main::@6
  __b6:
    // [27] lastprime#1 = ++ lastprime#17 -- vwsz1=_inc_vwsz1 
    inc.z lastprime
    bne !+
    inc.z lastprime+1
  !:
    // [28] main::$14 = lastprime#1 << 1 -- vwsz1=vwsz2_rol_1 
    lda.z lastprime
    asl
    sta.z __14
    lda.z lastprime+1
    rol
    sta.z __14+1
    // [29] main::$18 = primenum + main::$14 -- pwsz1=pwsc1_plus_vwsz1 
    clc
    lda.z __18
    adc #<primenum
    sta.z __18
    lda.z __18+1
    adc #>primenum
    sta.z __18+1
    // [30] *main::$18 = testnum#11 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda.z testnum
    sta (__18),y
    iny
    lda.z testnum+1
    sta (__18),y
    // [31] print_sint_decimal::w#1 = testnum#11 -- vwsz1=vwsz2 
    lda.z testnum
    sta.z print_sint_decimal.w
    lda.z testnum+1
    sta.z print_sint_decimal.w+1
    // [32] call print_sint_decimal 
    jsr print_sint_decimal
    // [33] phi from main::@6 to main::@10 [phi:main::@6->main::@10]
  __b10_from___b6:
    jmp __b10
    // main::@10
  __b10:
    // [34] call print_char 
    // [70] phi from main::@10 to print_char [phi:main::@10->print_char]
  print_char_from___b10:
    // [70] phi print_char_cursor#20 = print_char_cursor#21 [phi:main::@10->print_char#0] -- register_copy 
    // [70] phi print_char::ch#4 = ' ' [phi:main::@10->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp __b11
    // main::@11
  __b11:
    // [35] if(lastprime#1<$3e8) goto main::@1 -- vwsz1_lt_vwsc1_then_la1 
    lda.z lastprime
    cmp #<$3e8
    lda.z lastprime+1
    sbc #>$3e8
    bvc !+
    eor #$80
  !:
    bmi __b1_from___b11
    jmp __breturn
    // main::@return
  __breturn:
    // [36] return 
    rts
}
  // mul16s
// Multiply of two signed ints to a signed long
// Fixes offsets introduced by using unsigned multiplication
// mul16s(signed word zp($15) a, signed word zp($15) b)
mul16s: {
    .label __6 = $1b
    .label __9 = $1d
    .label __11 = $1b
    .label __12 = $1d
    .label m = 8
    .label return = 8
    .label a = $15
    .label b = $15
    // [37] mul16u::a#1 = (word)mul16s::a#0 -- vwuz1=vwuz2 
    lda.z a
    sta.z mul16u.a
    lda.z a+1
    sta.z mul16u.a+1
    // [38] mul16u::b#0 = (word)mul16s::b#0 -- vwuz1=vwuz2 
    lda.z b
    sta.z mul16u.b
    lda.z b+1
    sta.z mul16u.b+1
    // [39] call mul16u 
    jsr mul16u
    // [40] mul16u::return#2 = mul16u::res#2
    jmp __b5
    // mul16s::@5
  __b5:
    // [41] mul16s::m#0 = mul16u::return#2
    // [42] if(mul16s::a#0>=0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda.z a+1
    bpl __b1_from___b5
    jmp __b3
    // mul16s::@3
  __b3:
    // [43] mul16s::$6 = _word1_ mul16s::m#0 -- vwuz1=_word1_vduz2 
    lda.z m+2
    sta.z __6
    lda.z m+3
    sta.z __6+1
    // [44] mul16s::$11 = mul16s::$6 - (word)mul16s::b#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __11
    sec
    sbc.z b
    sta.z __11
    lda.z __11+1
    sbc.z b+1
    sta.z __11+1
    // [45] mul16s::m#1 = mul16s::m#0 word1= mul16s::$11 -- vduz1=vduz1_setword1_vwuz2 
    lda.z __11
    sta.z m+2
    lda.z __11+1
    sta.z m+3
    // [46] phi from mul16s::@3 mul16s::@5 to mul16s::@1 [phi:mul16s::@3/mul16s::@5->mul16s::@1]
  __b1_from___b3:
  __b1_from___b5:
    // [46] phi mul16s::m#5 = mul16s::m#1 [phi:mul16s::@3/mul16s::@5->mul16s::@1#0] -- register_copy 
    jmp __b1
    // mul16s::@1
  __b1:
    // [47] if(mul16s::b#0>=0) goto mul16s::@2 -- vwsz1_ge_0_then_la1 
    lda.z b+1
    bpl __b2_from___b1
    jmp __b4
    // mul16s::@4
  __b4:
    // [48] mul16s::$9 = _word1_ mul16s::m#5 -- vwuz1=_word1_vduz2 
    lda.z m+2
    sta.z __9
    lda.z m+3
    sta.z __9+1
    // [49] mul16s::$12 = mul16s::$9 - (word)mul16s::a#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __12
    sec
    sbc.z a
    sta.z __12
    lda.z __12+1
    sbc.z a+1
    sta.z __12+1
    // [50] mul16s::m#2 = mul16s::m#5 word1= mul16s::$12 -- vduz1=vduz1_setword1_vwuz2 
    lda.z __12
    sta.z m+2
    lda.z __12+1
    sta.z m+3
    // [51] phi from mul16s::@1 mul16s::@4 to mul16s::@2 [phi:mul16s::@1/mul16s::@4->mul16s::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [51] phi mul16s::m#4 = mul16s::m#5 [phi:mul16s::@1/mul16s::@4->mul16s::@2#0] -- register_copy 
    jmp __b2
    // mul16s::@2
  __b2:
    // [52] mul16s::return#0 = (signed dword)mul16s::m#4
    jmp __breturn
    // mul16s::@return
  __breturn:
    // [53] return 
    rts
}
  // div16s
// Perform division on two signed 16-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// div16s(signed word zp(6) dividend, signed word zp($12) divisor)
div16s: {
    .label dividend = 6
    .label divisor = $12
    // [54] divr16s::dividend#0 = div16s::dividend#0 -- vwsz1=vwsz2 
    lda.z dividend
    sta.z divr16s.dividend
    lda.z dividend+1
    sta.z divr16s.dividend+1
    // [55] divr16s::divisor#0 = div16s::divisor#0
    // [56] call divr16s 
    jsr divr16s
    jmp __breturn
    // div16s::@return
  __breturn:
    // [57] return 
    rts
}
  // print_sint_decimal
// Print a signed int as DECIMAL
// print_sint_decimal(signed word zp($15) w)
print_sint_decimal: {
    .label w = $15
    // [58] if(print_sint_decimal::w#1<0) goto print_sint_decimal::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sint_decimal
    // [59] phi from print_sint_decimal to print_sint_decimal::@3 [phi:print_sint_decimal->print_sint_decimal::@3]
  __b3_from_print_sint_decimal:
    jmp __b3
    // print_sint_decimal::@3
  __b3:
    // [60] call print_char 
    // [70] phi from print_sint_decimal::@3 to print_char [phi:print_sint_decimal::@3->print_char]
  print_char_from___b3:
    // [70] phi print_char_cursor#20 = print_char_cursor#41 [phi:print_sint_decimal::@3->print_char#0] -- register_copy 
    // [70] phi print_char::ch#4 = ' ' [phi:print_sint_decimal::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [61] phi from print_sint_decimal::@3 print_sint_decimal::@4 to print_sint_decimal::@2 [phi:print_sint_decimal::@3/print_sint_decimal::@4->print_sint_decimal::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [61] phi print_sint_decimal::w#4 = print_sint_decimal::w#1 [phi:print_sint_decimal::@3/print_sint_decimal::@4->print_sint_decimal::@2#0] -- register_copy 
    jmp __b2
    // print_sint_decimal::@2
  __b2:
    // [62] utoa::value#0 = (word)print_sint_decimal::w#4
    // [63] call utoa 
    // [103] phi from print_sint_decimal::@2 to utoa [phi:print_sint_decimal::@2->utoa]
  utoa_from___b2:
    jsr utoa
    // [64] phi from print_sint_decimal::@2 to print_sint_decimal::@5 [phi:print_sint_decimal::@2->print_sint_decimal::@5]
  __b5_from___b2:
    jmp __b5
    // print_sint_decimal::@5
  __b5:
    // [65] call print_str 
    // [124] phi from print_sint_decimal::@5 to print_str [phi:print_sint_decimal::@5->print_str]
  print_str_from___b5:
    jsr print_str
    jmp __breturn
    // print_sint_decimal::@return
  __breturn:
    // [66] return 
    rts
    // [67] phi from print_sint_decimal to print_sint_decimal::@1 [phi:print_sint_decimal->print_sint_decimal::@1]
  __b1_from_print_sint_decimal:
    jmp __b1
    // print_sint_decimal::@1
  __b1:
    // [68] call print_char 
    // [70] phi from print_sint_decimal::@1 to print_char [phi:print_sint_decimal::@1->print_char]
  print_char_from___b1:
    // [70] phi print_char_cursor#20 = print_char_cursor#41 [phi:print_sint_decimal::@1->print_char#0] -- register_copy 
    // [70] phi print_char::ch#4 = '-' [phi:print_sint_decimal::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_sint_decimal::@4
  __b4:
    // [69] print_sint_decimal::w#0 = - print_sint_decimal::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [71] *print_char_cursor#20 = print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [72] print_char_cursor#21 = ++ print_char_cursor#20 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [73] return 
    rts
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit unsigned ints into a 32-bit unsigned long
// mul16u(word zp($17) a, word zp($1b) b)
mul16u: {
    .label mb = $e
    .label a = $17
    .label res = 8
    .label b = $1b
    .label return = 8
    // [74] mul16u::mb#0 = (dword)mul16u::b#0 -- vduz1=_dword_vwuz2 
    lda.z b
    sta.z mb
    lda.z b+1
    sta.z mb+1
    lda #0
    sta.z mb+2
    sta.z mb+3
    // [75] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  __b1_from_mul16u:
    // [75] phi mul16u::mb#2 = mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
    // [75] phi mul16u::res#2 = 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    lda #<0>>$10
    sta.z res+2
    lda #>0>>$10
    sta.z res+3
    // [75] phi mul16u::a#2 = mul16u::a#1 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp __b1
    // mul16u::@1
  __b1:
    // [76] if(mul16u::a#2!=0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda.z a
    ora.z a+1
    bne __b2
    jmp __breturn
    // mul16u::@return
  __breturn:
    // [77] return 
    rts
    // mul16u::@2
  __b2:
    // [78] mul16u::$1 = mul16u::a#2 & 1 -- vbuaa=vwuz1_band_vbuc1 
    lda #1
    and.z a
    // [79] if(mul16u::$1==0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul16u::@4
  __b4:
    // [80] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    lda.z res+2
    adc.z mb+2
    sta.z res+2
    lda.z res+3
    adc.z mb+3
    sta.z res+3
    // [81] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [81] phi mul16u::res#6 = mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    jmp __b3
    // mul16u::@3
  __b3:
    // [82] mul16u::a#0 = mul16u::a#2 >> 1 -- vwuz1=vwuz1_ror_1 
    lsr.z a+1
    ror.z a
    // [83] mul16u::mb#1 = mul16u::mb#2 << 1 -- vduz1=vduz1_rol_1 
    asl.z mb
    rol.z mb+1
    rol.z mb+2
    rol.z mb+3
    // [75] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
  __b1_from___b3:
    // [75] phi mul16u::mb#2 = mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [75] phi mul16u::res#2 = mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [75] phi mul16u::a#2 = mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp __b1
}
  // divr16s
// Perform division on two signed 16-bit numbers with an initial remainder.
// Returns dividend/divisor. The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// divr16s(signed word zp($17) dividend, signed word zp($12) divisor)
divr16s: {
    .label dividendu = $17
    .label divisoru = $12
    .label dividend = $17
    .label divisor = $12
    // [84] if(divr16s::dividend#0<0) goto divr16s::@1 -- vwsz1_lt_0_then_la1 
    lda.z dividend+1
    bmi __b1
    jmp __b6
    // divr16s::@6
  __b6:
    // [85] divr16s::dividendu#8 = (word)divr16s::dividend#0
    // [86] phi from divr16s::@6 to divr16s::@2 [phi:divr16s::@6->divr16s::@2]
  __b2_from___b6:
    // [86] phi divr16s::dividendu#3 = divr16s::dividendu#8 [phi:divr16s::@6->divr16s::@2#0] -- register_copy 
    // [86] phi divr16s::neg#3 = 0 [phi:divr16s::@6->divr16s::@2#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // divr16s::@2
  __b2:
    // [87] if(divr16s::divisor#0<0) goto divr16s::@3 -- vwsz1_lt_0_then_la1 
    lda.z divisor+1
    bmi __b3
    jmp __b7
    // divr16s::@7
  __b7:
    // [88] divr16s::divisoru#5 = (word)divr16s::divisor#0
    // [89] phi from divr16s::@3 divr16s::@7 to divr16s::@4 [phi:divr16s::@3/divr16s::@7->divr16s::@4]
  __b4_from___b3:
  __b4_from___b7:
    // [89] phi divr16s::neg#4 = divr16s::neg#2 [phi:divr16s::@3/divr16s::@7->divr16s::@4#0] -- register_copy 
    // [89] phi divr16s::divisoru#3 = divr16s::divisoru#4 [phi:divr16s::@3/divr16s::@7->divr16s::@4#1] -- register_copy 
    jmp __b4
    // divr16s::@4
  __b4:
    // [90] divr16u::dividend#1 = divr16s::dividendu#3
    // [91] divr16u::divisor#0 = divr16s::divisoru#3
    // [92] call divr16u 
    // [131] phi from divr16s::@4 to divr16u [phi:divr16s::@4->divr16u]
  divr16u_from___b4:
    jsr divr16u
    jmp __b9
    // divr16s::@9
  __b9:
    // [93] if(divr16s::neg#4==0) goto divr16s::@5 -- vbuyy_eq_0_then_la1 
    cpy #0
    beq __b5
    jmp __b8
    // divr16s::@8
  __b8:
    // [94] rem16s#1 = - (signed word)rem16u#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z rem16s
    sta.z rem16s
    lda #0
    sbc.z rem16s+1
    sta.z rem16s+1
    // [95] phi from divr16s::@5 divr16s::@8 to divr16s::@return [phi:divr16s::@5/divr16s::@8->divr16s::@return]
  __breturn_from___b5:
  __breturn_from___b8:
    // [95] phi rem16s#10 = rem16s#30 [phi:divr16s::@5/divr16s::@8->divr16s::@return#0] -- register_copy 
    jmp __breturn
    // divr16s::@return
  __breturn:
    // [96] return 
    rts
    // divr16s::@5
  __b5:
    // [97] rem16s#30 = (signed word)rem16u#0
    jmp __breturn_from___b5
    // divr16s::@3
  __b3:
    // [98] divr16s::divisoru#1 = - divr16s::divisor#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z divisoru
    sta.z divisoru
    lda #0
    sbc.z divisoru+1
    sta.z divisoru+1
    // [99] divr16s::neg#2 = divr16s::neg#3 ^ 1 -- vbuyy=vbuyy_bxor_vbuc1 
    tya
    eor #1
    tay
    // [100] divr16s::divisoru#4 = (word)divr16s::divisoru#1
    jmp __b4_from___b3
    // divr16s::@1
  __b1:
    // [101] divr16s::dividendu#1 = - divr16s::dividend#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z dividendu
    sta.z dividendu
    lda #0
    sbc.z dividendu+1
    sta.z dividendu+1
    // [102] divr16s::dividendu#7 = (word)divr16s::dividendu#1
    // [86] phi from divr16s::@1 to divr16s::@2 [phi:divr16s::@1->divr16s::@2]
  __b2_from___b1:
    // [86] phi divr16s::dividendu#3 = divr16s::dividendu#7 [phi:divr16s::@1->divr16s::@2#0] -- register_copy 
    // [86] phi divr16s::neg#3 = 1 [phi:divr16s::@1->divr16s::@2#1] -- vbuyy=vbuc1 
    ldy #1
    jmp __b2
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($15) value, byte* zp($19) buffer)
utoa: {
    .const max_digits = 5
    .label value = $15
    .label digit_value = $1d
    .label buffer = $19
    .label digit = $14
    // [104] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [104] phi utoa::buffer#11 = decimal_digits [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z buffer
    lda #>decimal_digits
    sta.z buffer+1
    // [104] phi utoa::started#2 = 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [104] phi utoa::value#2 = utoa::value#0 [phi:utoa->utoa::@1#2] -- register_copy 
    // [104] phi utoa::digit#2 = 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [105] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [106] utoa::$11 = (byte)utoa::value#2 -- vbuxx=_byte_vwuz1 
    ldx.z value
    // [107] *utoa::buffer#11 = DIGITS[utoa::$11] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // [108] utoa::buffer#4 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [109] *utoa::buffer#4 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [110] return 
    rts
    // utoa::@2
  __b2:
    // [111] utoa::$10 = utoa::digit#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [112] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [113] if(0!=utoa::started#2) goto utoa::@5 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [114] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [115] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [115] phi utoa::buffer#14 = utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [115] phi utoa::started#4 = utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [115] phi utoa::value#6 = utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [116] utoa::digit#1 = ++ utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [104] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [104] phi utoa::buffer#11 = utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [104] phi utoa::started#2 = utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [104] phi utoa::value#2 = utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [104] phi utoa::digit#2 = utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [117] utoa_append::buffer#0 = utoa::buffer#11
    // [118] utoa_append::value#0 = utoa::value#2
    // [119] utoa_append::sub#0 = utoa::digit_value#0
    // [120] call utoa_append 
    // [149] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [121] utoa_append::return#0 = utoa_append::value#2
    jmp __b6
    // utoa::@6
  __b6:
    // [122] utoa::value#1 = utoa_append::return#0
    // [123] utoa::buffer#5 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [115] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [115] phi utoa::buffer#14 = utoa::buffer#5 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [115] phi utoa::started#4 = 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [115] phi utoa::value#6 = utoa::value#1 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($1b) str)
print_str: {
    .label str = $1b
    // [125] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  __b1_from_print_str:
    // [125] phi print_str::str#2 = decimal_digits [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z str
    lda #>decimal_digits
    sta.z str+1
    jmp __b1
    // print_str::@1
  __b1:
    // [126] if(0!=*print_str::str#2) goto print_str::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [127] return 
    rts
    // print_str::@2
  __b2:
    // [128] print_char::ch#0 = *print_str::str#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [129] call print_char 
    // [70] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [70] phi print_char_cursor#20 = print_char_cursor#21 [phi:print_str::@2->print_char#0] -- register_copy 
    // [70] phi print_char::ch#4 = print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [130] print_str::str#0 = ++ print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [125] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
  __b1_from___b3:
    // [125] phi print_str::str#2 = print_str::str#0 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($17) dividend, word zp($12) divisor, word zp($19) rem)
divr16u: {
    .label rem = $19
    .label dividend = $17
    .label quotient = $1b
    .label return = $1b
    .label divisor = $12
    // [132] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  __b1_from_divr16u:
    // [132] phi divr16u::i#2 = 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [132] phi divr16u::quotient#3 = 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [132] phi divr16u::dividend#2 = divr16u::dividend#1 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [132] phi divr16u::rem#4 = 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vwuc1 
    lda #<0
    sta.z rem
    lda #>0
    sta.z rem+1
    jmp __b1
    // [132] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  __b1_from___b3:
    // [132] phi divr16u::i#2 = divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [132] phi divr16u::quotient#3 = divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [132] phi divr16u::dividend#2 = divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [132] phi divr16u::rem#4 = divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp __b1
    // divr16u::@1
  __b1:
    // [133] divr16u::rem#0 = divr16u::rem#4 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [134] divr16u::$1 = > divr16u::dividend#2 -- vbuaa=_byte1_vwuz1 
    lda.z dividend+1
    // [135] divr16u::$2 = divr16u::$1 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [136] if(divr16u::$2==0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr16u::@4
  __b4:
    // [137] divr16u::rem#1 = divr16u::rem#0 | 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [138] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [138] phi divr16u::rem#5 = divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp __b2
    // divr16u::@2
  __b2:
    // [139] divr16u::dividend#0 = divr16u::dividend#2 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [140] divr16u::quotient#1 = divr16u::quotient#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [141] if(divr16u::rem#5<divr16u::divisor#0) goto divr16u::@3 -- vwuz1_lt_vwuz2_then_la1 
    lda.z rem+1
    cmp.z divisor+1
    bcc __b3_from___b2
    bne !+
    lda.z rem
    cmp.z divisor
    bcc __b3_from___b2
  !:
    jmp __b5
    // divr16u::@5
  __b5:
    // [142] divr16u::quotient#2 = ++ divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [143] divr16u::rem#2 = divr16u::rem#5 - divr16u::divisor#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z rem
    sec
    sbc.z divisor
    sta.z rem
    lda.z rem+1
    sbc.z divisor+1
    sta.z rem+1
    // [144] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [144] phi divr16u::return#0 = divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [144] phi divr16u::rem#10 = divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp __b3
    // divr16u::@3
  __b3:
    // [145] divr16u::i#1 = ++ divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [146] if(divr16u::i#1!=$10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b3
    jmp __b6
    // divr16u::@6
  __b6:
    // [147] rem16u#0 = divr16u::rem#10
    jmp __breturn
    // divr16u::@return
  __breturn:
    // [148] return 
    rts
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($19) buffer, word zp($15) value, word zp($1d) sub)
utoa_append: {
    .label buffer = $19
    .label value = $15
    .label sub = $1d
    .label return = $15
    // [150] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [150] phi utoa_append::digit#2 = 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [150] phi utoa_append::value#2 = utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [151] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [152] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [153] return 
    rts
    // utoa_append::@2
  __b2:
    // [154] utoa_append::digit#1 = ++ utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // [155] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [150] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [150] phi utoa_append::digit#2 = utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [150] phi utoa_append::value#2 = utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Digits used for storing the decimal unsigned int
  decimal_digits: .fill 6, 0
  primenum: .fill 2*$3e8, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b8
Removing instruction jmp __b7
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b9
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b9
Removing instruction jmp __b8
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b2_from___b8 with __b2
Replacing label __b4_from___b9 with __b4
Replacing label __b3_from___b4 with __b3
Replacing label __b1_from___b11 with __b1
Replacing label __b1_from___b5 with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b1_from_print_sint_decimal with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __breturn_from___b5 with __breturn
Replacing label __b4_from___b3 with __b4
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from___b11:
Removing instruction __b2_from___b7:
Removing instruction __b2_from___b8:
Removing instruction __b3_from___b4:
Removing instruction __b4_from___b9:
Removing instruction __b10_from___b6:
Removing instruction print_char_from___b10:
Removing instruction __b1_from___b3:
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __breturn:
Removing instruction __b3_from_print_sint_decimal:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction utoa_from___b2:
Removing instruction __b5_from___b2:
Removing instruction print_str_from___b5:
Removing instruction __b1_from_print_sint_decimal:
Removing instruction print_char_from___b1:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Removing instruction __b2_from___b6:
Removing instruction __b7:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b7:
Removing instruction divr16u_from___b4:
Removing instruction __breturn_from___b5:
Removing instruction __breturn_from___b8:
Removing instruction __b4_from___b7:
Removing instruction utoa_append_from___b5:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b5:
Removing instruction __breturn:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b8:
Removing instruction __b7:
Removing instruction __b3_from___b2:
Removing instruction __b9:
Removing instruction __b5:
Removing instruction __b4_from___b5:
Removing instruction __b6:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __b1_from_mul16u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Removing instruction __b6:
Removing instruction __b9:
Removing instruction __b8:
Removing instruction __b2_from___b1:
Removing instruction __b1_from_utoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_print_str:
Removing instruction __breturn:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b1_from_divr16u:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b1_from_utoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to __breturn in beq __b5
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #<0
Removing instruction lda.z digit_value+1
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b5:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction rts
Succesful ASM optimization Pass5UnreachableCodeElimination
Fixing long branch [195] bmi __b1 to bpl

FINAL SYMBOL TABLE
constant byte* DIGITS[]  = "0123456789abcdef"z
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
constant byte SIZEOF_SIGNED_WORD = 2
constant byte* decimal_digits[6]  = { fill( 6, 0) }
signed word div16s(signed word div16s::dividend , signed word div16s::divisor)
signed word div16s::dividend
signed word div16s::dividend#0 dividend zp[2]:6 367.33333333333337
signed word div16s::divisor
signed word div16s::divisor#0 divisor zp[2]:18 551.0
signed word div16s::return
signed word divr16s(signed word divr16s::dividend , signed word divr16s::divisor , signed word divr16s::rem)
signed word divr16s::dividend
signed word divr16s::dividend#0 dividend zp[2]:23 7001.0
word divr16s::dividendu
signed word divr16s::dividendu#1 dividendu zp[2]:23 10001.0
word divr16s::dividendu#3 dividendu zp[2]:23 4286.142857142857
word divr16s::dividendu#7 dividendu zp[2]:23 20002.0
word divr16s::dividendu#8 dividendu zp[2]:23 20002.0
signed word divr16s::divisor
signed word divr16s::divisor#0 divisor zp[2]:18 3000.4285714285716
word divr16s::divisoru
signed word divr16s::divisoru#1 divisoru zp[2]:18 5000.5
word divr16s::divisoru#3 divisoru zp[2]:18 15001.5
word divr16s::divisoru#4 divisoru zp[2]:18 20002.0
word divr16s::divisoru#5 divisoru zp[2]:18 20002.0
byte divr16s::neg
byte divr16s::neg#2 reg byte y 10001.0
byte divr16s::neg#3 reg byte y 5000.5
byte divr16s::neg#4 reg byte y 7500.75
signed word divr16s::rem
word divr16s::remu
word divr16s::resultu
signed word divr16s::return
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 reg byte a 2.00000002E8
byte~ divr16u::$2 reg byte a 2.00000002E8
word divr16u::dividend
word divr16u::dividend#0 dividend zp[2]:23 2.500000025E7
word divr16u::dividend#1 dividend zp[2]:23 36667.33333333333
word divr16u::dividend#2 dividend zp[2]:23 4.287142914285715E7
word divr16u::divisor
word divr16u::divisor#0 divisor zp[2]:18 1.1765294294117648E7
byte divr16u::i
byte divr16u::i#1 reg byte x 1.500000015E8
byte divr16u::i#2 reg byte x 1.5384615538461538E7
word divr16u::quotient
word divr16u::quotient#1 quotient zp[2]:27 1.500000015E8
word divr16u::quotient#2 quotient zp[2]:27 1.00000001E8
word divr16u::quotient#3 quotient zp[2]:27 2.500000025E7
word divr16u::rem
word divr16u::rem#0 rem zp[2]:25 7.500000075E7
word divr16u::rem#1 rem zp[2]:25 2.00000002E8
word divr16u::rem#10 rem zp[2]:25 1.0003333466666667E8
word divr16u::rem#2 rem zp[2]:25 2.00000002E8
word divr16u::rem#4 rem zp[2]:25 2.00000002E8
word divr16u::rem#5 rem zp[2]:25 1.00000001E8
word divr16u::return
word divr16u::return#0 return zp[2]:27 1.00000001E8
signed word lastprime
signed word lastprime#1 lastprime zp[2]:4 4.888888888888889
signed word lastprime#17 lastprime zp[2]:4 0.88
signed word lasttest
signed word lasttest#1 lasttest zp[2]:2 22.0
signed word lasttest#13 lasttest zp[2]:2 4.0
signed word lasttest#19 lasttest zp[2]:2 6.090909090909091
void main()
signed dword~ main::$0 zp[4]:8 11.0
signed word~ main::$12 zp[2]:21 22.0
signed word~ main::$13 zp[2]:18 101.0
signed word~ main::$14 zp[2]:25 22.0
signed word~ main::$15 zp[2]:23 22.0
signed word*~ main::$16 zp[2]:21 22.0
signed word*~ main::$17 zp[2]:18 202.0
signed word*~ main::$18 zp[2]:25 22.0
signed word main::p
signed word main::p#0 p zp[2]:21 16.5
signed dword mul16s(signed word mul16s::a , signed word mul16s::b)
word~ mul16s::$11 zp[2]:27 202.0
word~ mul16s::$12 zp[2]:29 202.0
word~ mul16s::$6 zp[2]:27 202.0
word~ mul16s::$9 zp[2]:29 202.0
signed word mul16s::a
signed word mul16s::a#0 a zp[2]:21 8.0
signed word mul16s::b
signed word mul16s::b#0 b zp[2]:21 10.181818181818182
dword mul16s::m
dword mul16s::m#0 m zp[4]:8 101.0
dword mul16s::m#1 m zp[4]:8 202.0
dword mul16s::m#2 m zp[4]:8 202.0
dword mul16s::m#4 m zp[4]:8 202.0
dword mul16s::m#5 m zp[4]:8 126.25
signed dword mul16s::return
signed dword mul16s::return#0 return zp[4]:8 37.33333333333333
signed dword mul16s::return#2 return zp[4]:8 22.0
dword mul16u(word mul16u::a , word mul16u::b)
byte~ mul16u::$1 reg byte a 200002.0
word mul16u::a
word mul16u::a#0 a zp[2]:23 100001.0
word mul16u::a#1 a zp[2]:23 367.33333333333337
word mul16u::a#2 a zp[2]:23 66834.16666666666
word mul16u::b
word mul16u::b#0 b zp[2]:27 101.0
dword mul16u::mb
dword mul16u::mb#0 mb zp[4]:14 2002.0
dword mul16u::mb#1 mb zp[4]:14 200002.0
dword mul16u::mb#2 mb zp[4]:14 43000.57142857143
dword mul16u::res
dword mul16u::res#1 res zp[4]:8 200002.0
dword mul16u::res#2 res zp[4]:8 50017.33333333333
dword mul16u::res#6 res zp[4]:8 100001.0
dword mul16u::return
dword mul16u::return#2 return zp[4]:8 202.0
constant signed word* primenum[$3e8]  = { fill( $3e8, 0) }
signed word primeptr
signed word primeptr#1 primeptr zp[2]:21 101.0
signed word primeptr#10 primeptr zp[2]:21 151.5
signed word primeptr#7 primeptr zp[2]:21 50.5
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 200002.0
byte print_char::ch#4 reg byte a 1100002.0
byte* print_char_cursor
byte* print_char_cursor#20 print_char_cursor zp[2]:12 1050108.0
byte* print_char_cursor#21 print_char_cursor zp[2]:12 50001.09090909091
byte* print_char_cursor#41 print_char_cursor zp[2]:12 6.454545454545455
byte* print_line_cursor
byte* print_screen
constant byte* print_screen#0 print_screen = (byte*) 1024
void print_sint_decimal(signed word print_sint_decimal::w)
signed word print_sint_decimal::w
signed word print_sint_decimal::w#0 w zp[2]:21 202.0
signed word print_sint_decimal::w#1 w zp[2]:21 52.33333333333333
signed word print_sint_decimal::w#4 w zp[2]:21 202.0
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 str zp[2]:27 200002.0
byte* print_str::str#2 str zp[2]:27 100001.0
signed word rem16s
signed word rem16s#1 rem16s zp[2]:25 20002.0
signed word rem16s#10 rem16s zp[2]:25 3350.5
signed word rem16s#30 rem16s zp[2]:25 20002.0
word rem16u
word rem16u#0 rem16u zp[2]:25 25000.25
signed word testnum
signed word testnum#1 testnum zp[2]:6 22.0
signed word testnum#10 testnum zp[2]:6 51.875
signed word testnum#11 testnum zp[2]:6 30.545454545454547
signed word testnum#15 testnum zp[2]:6 2.5384615384615383
signed word testnum#2 testnum zp[2]:6 202.0
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 reg byte a 200002.0
byte~ utoa::$11 reg byte x 2002.0
byte* utoa::buffer
byte* utoa::buffer#11 buffer zp[2]:25 28714.714285714286
byte* utoa::buffer#14 buffer zp[2]:25 150001.5
byte* utoa::buffer#4 buffer zp[2]:25 2002.0
byte* utoa::buffer#5 buffer zp[2]:25 200002.0
byte utoa::digit
byte utoa::digit#1 digit zp[1]:20 200002.0
byte utoa::digit#2 digit zp[1]:20 28571.714285714286
word utoa::digit_value
word utoa::digit_value#0 digit_value zp[2]:29 60000.600000000006
word* utoa::digit_values
byte utoa::max_digits
constant byte utoa::max_digits#1 max_digits = 5
byte utoa::radix
byte utoa::started
byte utoa::started#2 reg byte x 50000.5
byte utoa::started#4 reg byte x 100001.0
word utoa::value
word utoa::value#0 value zp[2]:21 551.0
word utoa::value#1 value zp[2]:21 100001.0
word utoa::value#2 value zp[2]:21 57286.42857142857
word utoa::value#6 value zp[2]:21 150001.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 buffer zp[2]:25 137500.25
byte utoa_append::digit
byte utoa_append::digit#1 reg byte x 1.000000001E9
byte utoa_append::digit#2 reg byte x 1.0005000015E9
word utoa_append::return
word utoa_append::return#0 return zp[2]:21 200002.0
word utoa_append::sub
word utoa_append::sub#0 sub zp[2]:29 3.333500005E8
word utoa_append::value
word utoa_append::value#0 value zp[2]:21 366667.3333333334
word utoa_append::value#1 value zp[2]:21 2.000000002E9
word utoa_append::value#2 value zp[2]:21 5.0018333416666675E8

zp[2]:2 [ lasttest#13 lasttest#19 lasttest#1 ]
zp[2]:4 [ lastprime#17 lastprime#1 ]
zp[2]:6 [ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 div16s::dividend#0 ]
zp[4]:8 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16s::return#2 main::$0 ]
reg byte a [ print_char::ch#4 print_char::ch#0 ]
zp[2]:12 [ print_char_cursor#20 print_char_cursor#41 print_char_cursor#21 ]
zp[4]:14 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp[2]:18 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16s::divisor#0 divr16u::divisor#0 divr16s::divisoru#1 div16s::divisor#0 main::$13 main::$17 ]
reg byte y [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
zp[1]:20 [ utoa::digit#2 utoa::digit#1 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[2]:21 [ main::$12 main::$16 main::p#0 mul16s::a#0 mul16s::b#0 print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 primeptr#7 primeptr#10 primeptr#1 ]
zp[2]:23 [ main::$15 divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 divr16s::dividend#0 divr16s::dividendu#1 mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
zp[2]:25 [ main::$14 main::$18 utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 utoa::buffer#4 utoa_append::buffer#0 rem16s#10 rem16s#30 rem16s#1 rem16u#0 divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
zp[2]:27 [ mul16s::$6 mul16s::$11 mul16u::b#0 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 print_str::str#2 print_str::str#0 ]
reg byte a [ mul16u::$1 ]
reg byte x [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:29 [ utoa::digit_value#0 utoa_append::sub#0 mul16s::$9 mul16s::$12 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]


FINAL ASSEMBLER
Score: 210649

  // File Comments
// Calculates the 1000 first primes
// From A Comparison of Language Speed, The Transactor, March 1987, Volume 7, Issue 5
// http://csbruce.com/cbm/transactor/pdfs/trans_v7_i05.pdf
  // Upstart
  // Commodore 64 PRG executable file
.file [name="primes-1000.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  .label print_screen = $400
  // Remainder after unsigned 16-bit division
  .label rem16u = $19
  // Remainder after signed 16 bit division
  .label rem16s = $19
  .label testnum = 6
  .label lasttest = 2
  .label primeptr = $15
  .label lastprime = 4
  .label print_char_cursor = $c
.segment Code
  // main
main: {
    .label __0 = 8
    .label __12 = $15
    .label __13 = $12
    .label __14 = $19
    .label __15 = $17
    .label p = $15
    .label __16 = $15
    .label __17 = $12
    .label __18 = $19
    // primenum[1] = 2
    // [0] *(primenum+1*SIZEOF_SIGNED_WORD) = 2 -- _deref_pwsc1=vwsc2 
    lda #<2
    sta primenum+1*SIZEOF_SIGNED_WORD
    lda #>2
    sta primenum+1*SIZEOF_SIGNED_WORD+1
    // primenum[2] = 3
    // [1] *(primenum+2*SIZEOF_SIGNED_WORD) = 3 -- _deref_pwsc1=vwsc2 
    lda #<3
    sta primenum+2*SIZEOF_SIGNED_WORD
    lda #>3
    sta primenum+2*SIZEOF_SIGNED_WORD+1
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // [2] phi print_char_cursor#41 = print_screen#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [2] phi lastprime#17 = 2 [phi:main->main::@1#1] -- vwsz1=vbsc1 
    lda #<2
    sta.z lastprime
    lda #>2
    sta.z lastprime+1
    // [2] phi testnum#15 = 3 [phi:main->main::@1#2] -- vwsz1=vbsc1 
    lda #<3
    sta.z testnum
    lda #>3
    sta.z testnum+1
    // [2] phi lasttest#13 = 2 [phi:main->main::@1#3] -- vwsz1=vbsc1 
    lda #<2
    sta.z lasttest
    lda #>2
    sta.z lasttest+1
    // [2] phi from main::@11 to main::@1 [phi:main::@11->main::@1]
    // [2] phi print_char_cursor#41 = print_char_cursor#21 [phi:main::@11->main::@1#0] -- register_copy 
    // [2] phi lastprime#17 = lastprime#1 [phi:main::@11->main::@1#1] -- register_copy 
    // [2] phi testnum#15 = testnum#11 [phi:main::@11->main::@1#2] -- register_copy 
    // [2] phi lasttest#13 = lasttest#19 [phi:main::@11->main::@1#3] -- register_copy 
    // main::@1
  __b1:
    // int p = primenum[lasttest]
    // [3] main::$12 = lasttest#13 << 1 -- vwsz1=vwsz2_rol_1 
    lda.z lasttest
    asl
    sta.z __12
    lda.z lasttest+1
    rol
    sta.z __12+1
    // [4] main::$16 = primenum + main::$12 -- pwsz1=pwsc1_plus_vwsz1 
    clc
    lda.z __16
    adc #<primenum
    sta.z __16
    lda.z __16+1
    adc #>primenum
    sta.z __16+1
    // [5] main::p#0 = *main::$16 -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (p),y
    pha
    iny
    lda (p),y
    sta.z p+1
    pla
    sta.z p
    // mul16s(p, p)
    // [6] mul16s::a#0 = main::p#0
    // [7] mul16s::b#0 = main::p#0
    // [8] call mul16s 
    jsr mul16s
    // [9] mul16s::return#2 = mul16s::return#0
    // main::@8
    // [10] main::$0 = mul16s::return#2
    // testnum > (int)mul16s(p, p)
    // [11] main::$15 = (signed word)main::$0 -- vwsz1=_sword_vdsz2 
    lda.z __0
    sta.z __15
    lda.z __0+1
    sta.z __15+1
    // if(testnum > (int)mul16s(p, p))
    // [12] if(testnum#15<=main::$15) goto main::@2 -- vwsz1_le_vwsz2_then_la1 
    lda.z __15
    cmp.z testnum
    lda.z __15+1
    sbc.z testnum+1
    bvc !+
    eor #$80
  !:
    bpl __b2
    // main::@7
    // lasttest++;
    // [13] lasttest#1 = ++ lasttest#13 -- vwsz1=_inc_vwsz1 
    inc.z lasttest
    bne !+
    inc.z lasttest+1
  !:
    // [14] phi from main::@7 main::@8 to main::@2 [phi:main::@7/main::@8->main::@2]
    // [14] phi lasttest#19 = lasttest#1 [phi:main::@7/main::@8->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // testnum +=2
    // [15] testnum#1 = testnum#15 + 2 -- vwsz1=vwsz1_plus_vbsc1 
    clc
    lda.z testnum
    adc #<2
    sta.z testnum
    lda.z testnum+1
    adc #>2
    sta.z testnum+1
    // [16] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [16] phi testnum#10 = testnum#1 [phi:main::@2->main::@3#0] -- register_copy 
    // [16] phi primeptr#7 = 2 [phi:main::@2->main::@3#1] -- vwsz1=vbsc1 
    lda #<2
    sta.z primeptr
    lda #>2
    sta.z primeptr+1
    // [16] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
    // [16] phi testnum#10 = testnum#11 [phi:main::@4->main::@3#0] -- register_copy 
    // [16] phi primeptr#7 = primeptr#10 [phi:main::@4->main::@3#1] -- register_copy 
    // main::@3
  __b3:
    // div16s(testnum, primenum[primeptr++])
    // [17] main::$13 = primeptr#7 << 1 -- vwsz1=vwsz2_rol_1 
    lda.z primeptr
    asl
    sta.z __13
    lda.z primeptr+1
    rol
    sta.z __13+1
    // [18] div16s::dividend#0 = testnum#10
    // [19] main::$17 = primenum + main::$13 -- pwsz1=pwsc1_plus_vwsz1 
    clc
    lda.z __17
    adc #<primenum
    sta.z __17
    lda.z __17+1
    adc #>primenum
    sta.z __17+1
    // [20] div16s::divisor#0 = *main::$17 -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (div16s.divisor),y
    pha
    iny
    lda (div16s.divisor),y
    sta.z div16s.divisor+1
    pla
    sta.z div16s.divisor
    // [21] call div16s 
    jsr div16s
    // main::@9
    // div16s(testnum, primenum[primeptr++]);
    // [22] primeptr#1 = ++ primeptr#7 -- vwsz1=_inc_vwsz1 
    inc.z primeptr
    bne !+
    inc.z primeptr+1
  !:
    // if(rem16s == 0)
    // [23] if(rem16s#10!=0) goto main::@4 -- vwsz1_neq_0_then_la1 
    lda.z rem16s+1
    ora.z rem16s
    bne __b4
    // main::@5
    // testnum +=2
    // [24] testnum#2 = testnum#10 + 2 -- vwsz1=vwsz1_plus_vbsc1 
    clc
    lda.z testnum
    adc #<2
    sta.z testnum
    lda.z testnum+1
    adc #>2
    sta.z testnum+1
    // [25] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
    // [25] phi testnum#11 = testnum#2 [phi:main::@5->main::@4#0] -- register_copy 
    // [25] phi primeptr#10 = 2 [phi:main::@5->main::@4#1] -- vwsz1=vbsc1 
    lda #<2
    sta.z primeptr
    lda #>2
    sta.z primeptr+1
    // [25] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
    // [25] phi testnum#11 = testnum#10 [phi:main::@9->main::@4#0] -- register_copy 
    // [25] phi primeptr#10 = primeptr#1 [phi:main::@9->main::@4#1] -- register_copy 
    // main::@4
  __b4:
    // while (primeptr<=lasttest)
    // [26] if(primeptr#10<=lasttest#19) goto main::@3 -- vwsz1_le_vwsz2_then_la1 
    lda.z lasttest
    cmp.z primeptr
    lda.z lasttest+1
    sbc.z primeptr+1
    bvc !+
    eor #$80
  !:
    bpl __b3
    // main::@6
    // primenum[++lastprime] = testnum;
    // [27] lastprime#1 = ++ lastprime#17 -- vwsz1=_inc_vwsz1 
    inc.z lastprime
    bne !+
    inc.z lastprime+1
  !:
    // primenum[++lastprime] = testnum
    // [28] main::$14 = lastprime#1 << 1 -- vwsz1=vwsz2_rol_1 
    lda.z lastprime
    asl
    sta.z __14
    lda.z lastprime+1
    rol
    sta.z __14+1
    // [29] main::$18 = primenum + main::$14 -- pwsz1=pwsc1_plus_vwsz1 
    clc
    lda.z __18
    adc #<primenum
    sta.z __18
    lda.z __18+1
    adc #>primenum
    sta.z __18+1
    // [30] *main::$18 = testnum#11 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda.z testnum
    sta (__18),y
    iny
    lda.z testnum+1
    sta (__18),y
    // print_sint_decimal(testnum)
    // [31] print_sint_decimal::w#1 = testnum#11 -- vwsz1=vwsz2 
    lda.z testnum
    sta.z print_sint_decimal.w
    lda.z testnum+1
    sta.z print_sint_decimal.w+1
    // [32] call print_sint_decimal 
    jsr print_sint_decimal
    // [33] phi from main::@6 to main::@10 [phi:main::@6->main::@10]
    // main::@10
    // print_char(' ')
    // [34] call print_char 
    // [70] phi from main::@10 to print_char [phi:main::@10->print_char]
    // [70] phi print_char_cursor#20 = print_char_cursor#21 [phi:main::@10->print_char#0] -- register_copy 
    // [70] phi print_char::ch#4 = ' ' [phi:main::@10->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // main::@11
    // while(lastprime<totalprimes)
    // [35] if(lastprime#1<$3e8) goto main::@1 -- vwsz1_lt_vwsc1_then_la1 
    lda.z lastprime
    cmp #<$3e8
    lda.z lastprime+1
    sbc #>$3e8
    bvc !+
    eor #$80
  !:
    bpl !__b1+
    jmp __b1
  !__b1:
    // main::@return
    // }
    // [36] return 
    rts
}
  // mul16s
// Multiply of two signed ints to a signed long
// Fixes offsets introduced by using unsigned multiplication
// mul16s(signed word zp($15) a, signed word zp($15) b)
mul16s: {
    .label __6 = $1b
    .label __9 = $1d
    .label __11 = $1b
    .label __12 = $1d
    .label m = 8
    .label return = 8
    .label a = $15
    .label b = $15
    // mul16u((unsigned int)a, (unsigned int) b)
    // [37] mul16u::a#1 = (word)mul16s::a#0 -- vwuz1=vwuz2 
    lda.z a
    sta.z mul16u.a
    lda.z a+1
    sta.z mul16u.a+1
    // [38] mul16u::b#0 = (word)mul16s::b#0 -- vwuz1=vwuz2 
    lda.z b
    sta.z mul16u.b
    lda.z b+1
    sta.z mul16u.b+1
    // [39] call mul16u 
    jsr mul16u
    // [40] mul16u::return#2 = mul16u::res#2
    // mul16s::@5
    // unsigned long m = mul16u((unsigned int)a, (unsigned int) b)
    // [41] mul16s::m#0 = mul16u::return#2
    // if(a<0)
    // [42] if(mul16s::a#0>=0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda.z a+1
    bpl __b1
    // mul16s::@3
    // WORD1(m)
    // [43] mul16s::$6 = _word1_ mul16s::m#0 -- vwuz1=_word1_vduz2 
    lda.z m+2
    sta.z __6
    lda.z m+3
    sta.z __6+1
    // WORD1(m) = WORD1(m)-(unsigned int)b
    // [44] mul16s::$11 = mul16s::$6 - (word)mul16s::b#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __11
    sec
    sbc.z b
    sta.z __11
    lda.z __11+1
    sbc.z b+1
    sta.z __11+1
    // [45] mul16s::m#1 = mul16s::m#0 word1= mul16s::$11 -- vduz1=vduz1_setword1_vwuz2 
    lda.z __11
    sta.z m+2
    lda.z __11+1
    sta.z m+3
    // [46] phi from mul16s::@3 mul16s::@5 to mul16s::@1 [phi:mul16s::@3/mul16s::@5->mul16s::@1]
    // [46] phi mul16s::m#5 = mul16s::m#1 [phi:mul16s::@3/mul16s::@5->mul16s::@1#0] -- register_copy 
    // mul16s::@1
  __b1:
    // if(b<0)
    // [47] if(mul16s::b#0>=0) goto mul16s::@2 -- vwsz1_ge_0_then_la1 
    lda.z b+1
    bpl __b2
    // mul16s::@4
    // WORD1(m)
    // [48] mul16s::$9 = _word1_ mul16s::m#5 -- vwuz1=_word1_vduz2 
    lda.z m+2
    sta.z __9
    lda.z m+3
    sta.z __9+1
    // WORD1(m) = WORD1(m)-(unsigned int)a
    // [49] mul16s::$12 = mul16s::$9 - (word)mul16s::a#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __12
    sec
    sbc.z a
    sta.z __12
    lda.z __12+1
    sbc.z a+1
    sta.z __12+1
    // [50] mul16s::m#2 = mul16s::m#5 word1= mul16s::$12 -- vduz1=vduz1_setword1_vwuz2 
    lda.z __12
    sta.z m+2
    lda.z __12+1
    sta.z m+3
    // [51] phi from mul16s::@1 mul16s::@4 to mul16s::@2 [phi:mul16s::@1/mul16s::@4->mul16s::@2]
    // [51] phi mul16s::m#4 = mul16s::m#5 [phi:mul16s::@1/mul16s::@4->mul16s::@2#0] -- register_copy 
    // mul16s::@2
  __b2:
    // return (signed long)m;
    // [52] mul16s::return#0 = (signed dword)mul16s::m#4
    // mul16s::@return
    // }
    // [53] return 
    rts
}
  // div16s
// Perform division on two signed 16-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// div16s(signed word zp(6) dividend, signed word zp($12) divisor)
div16s: {
    .label dividend = 6
    .label divisor = $12
    // divr16s(dividend, divisor, 0)
    // [54] divr16s::dividend#0 = div16s::dividend#0 -- vwsz1=vwsz2 
    lda.z dividend
    sta.z divr16s.dividend
    lda.z dividend+1
    sta.z divr16s.dividend+1
    // [55] divr16s::divisor#0 = div16s::divisor#0
    // [56] call divr16s 
    jsr divr16s
    // div16s::@return
    // }
    // [57] return 
    rts
}
  // print_sint_decimal
// Print a signed int as DECIMAL
// print_sint_decimal(signed word zp($15) w)
print_sint_decimal: {
    .label w = $15
    // if(w<0)
    // [58] if(print_sint_decimal::w#1<0) goto print_sint_decimal::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1
    // [59] phi from print_sint_decimal to print_sint_decimal::@3 [phi:print_sint_decimal->print_sint_decimal::@3]
    // print_sint_decimal::@3
    // print_char(' ')
    // [60] call print_char 
    // [70] phi from print_sint_decimal::@3 to print_char [phi:print_sint_decimal::@3->print_char]
    // [70] phi print_char_cursor#20 = print_char_cursor#41 [phi:print_sint_decimal::@3->print_char#0] -- register_copy 
    // [70] phi print_char::ch#4 = ' ' [phi:print_sint_decimal::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [61] phi from print_sint_decimal::@3 print_sint_decimal::@4 to print_sint_decimal::@2 [phi:print_sint_decimal::@3/print_sint_decimal::@4->print_sint_decimal::@2]
    // [61] phi print_sint_decimal::w#4 = print_sint_decimal::w#1 [phi:print_sint_decimal::@3/print_sint_decimal::@4->print_sint_decimal::@2#0] -- register_copy 
    // print_sint_decimal::@2
  __b2:
    // utoa((unsigned int)w, decimal_digits, DECIMAL)
    // [62] utoa::value#0 = (word)print_sint_decimal::w#4
    // [63] call utoa 
    // [103] phi from print_sint_decimal::@2 to utoa [phi:print_sint_decimal::@2->utoa]
    jsr utoa
    // [64] phi from print_sint_decimal::@2 to print_sint_decimal::@5 [phi:print_sint_decimal::@2->print_sint_decimal::@5]
    // print_sint_decimal::@5
    // print_str(decimal_digits)
    // [65] call print_str 
    // [124] phi from print_sint_decimal::@5 to print_str [phi:print_sint_decimal::@5->print_str]
    jsr print_str
    // print_sint_decimal::@return
    // }
    // [66] return 
    rts
    // [67] phi from print_sint_decimal to print_sint_decimal::@1 [phi:print_sint_decimal->print_sint_decimal::@1]
    // print_sint_decimal::@1
  __b1:
    // print_char('-')
    // [68] call print_char 
    // [70] phi from print_sint_decimal::@1 to print_char [phi:print_sint_decimal::@1->print_char]
    // [70] phi print_char_cursor#20 = print_char_cursor#41 [phi:print_sint_decimal::@1->print_char#0] -- register_copy 
    // [70] phi print_char::ch#4 = '-' [phi:print_sint_decimal::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_sint_decimal::@4
    // w = -w
    // [69] print_sint_decimal::w#0 = - print_sint_decimal::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [71] *print_char_cursor#20 = print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [72] print_char_cursor#21 = ++ print_char_cursor#20 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [73] return 
    rts
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit unsigned ints into a 32-bit unsigned long
// mul16u(word zp($17) a, word zp($1b) b)
mul16u: {
    .label mb = $e
    .label a = $17
    .label res = 8
    .label b = $1b
    .label return = 8
    // unsigned long mb = b
    // [74] mul16u::mb#0 = (dword)mul16u::b#0 -- vduz1=_dword_vwuz2 
    lda.z b
    sta.z mb
    lda.z b+1
    sta.z mb+1
    lda #0
    sta.z mb+2
    sta.z mb+3
    // [75] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
    // [75] phi mul16u::mb#2 = mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
    // [75] phi mul16u::res#2 = 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vduc1 
    sta.z res
    sta.z res+1
    lda #<0>>$10
    sta.z res+2
    lda #>0>>$10
    sta.z res+3
    // [75] phi mul16u::a#2 = mul16u::a#1 [phi:mul16u->mul16u::@1#2] -- register_copy 
    // mul16u::@1
  __b1:
    // while(a!=0)
    // [76] if(mul16u::a#2!=0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda.z a
    ora.z a+1
    bne __b2
    // mul16u::@return
    // }
    // [77] return 
    rts
    // mul16u::@2
  __b2:
    // a&1
    // [78] mul16u::$1 = mul16u::a#2 & 1 -- vbuaa=vwuz1_band_vbuc1 
    lda #1
    and.z a
    // if( (a&1) != 0)
    // [79] if(mul16u::$1==0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul16u::@4
    // res = res + mb
    // [80] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    lda.z res+2
    adc.z mb+2
    sta.z res+2
    lda.z res+3
    adc.z mb+3
    sta.z res+3
    // [81] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
    // [81] phi mul16u::res#6 = mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    // mul16u::@3
  __b3:
    // a = a>>1
    // [82] mul16u::a#0 = mul16u::a#2 >> 1 -- vwuz1=vwuz1_ror_1 
    lsr.z a+1
    ror.z a
    // mb = mb<<1
    // [83] mul16u::mb#1 = mul16u::mb#2 << 1 -- vduz1=vduz1_rol_1 
    asl.z mb
    rol.z mb+1
    rol.z mb+2
    rol.z mb+3
    // [75] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
    // [75] phi mul16u::mb#2 = mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [75] phi mul16u::res#2 = mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [75] phi mul16u::a#2 = mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp __b1
}
  // divr16s
// Perform division on two signed 16-bit numbers with an initial remainder.
// Returns dividend/divisor. The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// divr16s(signed word zp($17) dividend, signed word zp($12) divisor)
divr16s: {
    .label dividendu = $17
    .label divisoru = $12
    .label dividend = $17
    .label divisor = $12
    // if(dividend<0 || rem<0)
    // [84] if(divr16s::dividend#0<0) goto divr16s::@1 -- vwsz1_lt_0_then_la1 
    lda.z dividend+1
    bmi __b1
    // divr16s::@6
    // [85] divr16s::dividendu#8 = (word)divr16s::dividend#0
    // [86] phi from divr16s::@6 to divr16s::@2 [phi:divr16s::@6->divr16s::@2]
    // [86] phi divr16s::dividendu#3 = divr16s::dividendu#8 [phi:divr16s::@6->divr16s::@2#0] -- register_copy 
    // [86] phi divr16s::neg#3 = 0 [phi:divr16s::@6->divr16s::@2#1] -- vbuyy=vbuc1 
    ldy #0
    // divr16s::@2
  __b2:
    // if(divisor<0)
    // [87] if(divr16s::divisor#0<0) goto divr16s::@3 -- vwsz1_lt_0_then_la1 
    lda.z divisor+1
    bmi __b3
    // divr16s::@7
    // [88] divr16s::divisoru#5 = (word)divr16s::divisor#0
    // [89] phi from divr16s::@3 divr16s::@7 to divr16s::@4 [phi:divr16s::@3/divr16s::@7->divr16s::@4]
    // [89] phi divr16s::neg#4 = divr16s::neg#2 [phi:divr16s::@3/divr16s::@7->divr16s::@4#0] -- register_copy 
    // [89] phi divr16s::divisoru#3 = divr16s::divisoru#4 [phi:divr16s::@3/divr16s::@7->divr16s::@4#1] -- register_copy 
    // divr16s::@4
  __b4:
    // divr16u(dividendu, divisoru, remu)
    // [90] divr16u::dividend#1 = divr16s::dividendu#3
    // [91] divr16u::divisor#0 = divr16s::divisoru#3
    // [92] call divr16u 
    // [131] phi from divr16s::@4 to divr16u [phi:divr16s::@4->divr16u]
    jsr divr16u
    // divr16s::@9
    // if(neg==0)
    // [93] if(divr16s::neg#4==0) goto divr16s::@5 -- vbuyy_eq_0_then_la1 
    cpy #0
    beq __breturn
    // divr16s::@8
    // rem16s = -(signed int)rem16u
    // [94] rem16s#1 = - (signed word)rem16u#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z rem16s
    sta.z rem16s
    lda #0
    sbc.z rem16s+1
    sta.z rem16s+1
    // [95] phi from divr16s::@5 divr16s::@8 to divr16s::@return [phi:divr16s::@5/divr16s::@8->divr16s::@return]
    // [95] phi rem16s#10 = rem16s#30 [phi:divr16s::@5/divr16s::@8->divr16s::@return#0] -- register_copy 
    // divr16s::@return
  __breturn:
    // }
    // [96] return 
    rts
    // divr16s::@5
    // [97] rem16s#30 = (signed word)rem16u#0
    // divr16s::@3
  __b3:
    // -divisor
    // [98] divr16s::divisoru#1 = - divr16s::divisor#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z divisoru
    sta.z divisoru
    lda #0
    sbc.z divisoru+1
    sta.z divisoru+1
    // neg = neg ^ 1
    // [99] divr16s::neg#2 = divr16s::neg#3 ^ 1 -- vbuyy=vbuyy_bxor_vbuc1 
    tya
    eor #1
    tay
    // [100] divr16s::divisoru#4 = (word)divr16s::divisoru#1
    jmp __b4
    // divr16s::@1
  __b1:
    // -dividend
    // [101] divr16s::dividendu#1 = - divr16s::dividend#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z dividendu
    sta.z dividendu
    lda #0
    sbc.z dividendu+1
    sta.z dividendu+1
    // [102] divr16s::dividendu#7 = (word)divr16s::dividendu#1
    // [86] phi from divr16s::@1 to divr16s::@2 [phi:divr16s::@1->divr16s::@2]
    // [86] phi divr16s::dividendu#3 = divr16s::dividendu#7 [phi:divr16s::@1->divr16s::@2#0] -- register_copy 
    // [86] phi divr16s::neg#3 = 1 [phi:divr16s::@1->divr16s::@2#1] -- vbuyy=vbuc1 
    ldy #1
    jmp __b2
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($15) value, byte* zp($19) buffer)
utoa: {
    .const max_digits = 5
    .label value = $15
    .label digit_value = $1d
    .label buffer = $19
    .label digit = $14
    // [104] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
    // [104] phi utoa::buffer#11 = decimal_digits [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z buffer
    lda #>decimal_digits
    sta.z buffer+1
    // [104] phi utoa::started#2 = 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [104] phi utoa::value#2 = utoa::value#0 [phi:utoa->utoa::@1#2] -- register_copy 
    // [104] phi utoa::digit#2 = 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    txa
    sta.z digit
    // utoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [105] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    // utoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [106] utoa::$11 = (byte)utoa::value#2 -- vbuxx=_byte_vwuz1 
    ldx.z value
    // [107] *utoa::buffer#11 = DIGITS[utoa::$11] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [108] utoa::buffer#4 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [109] *utoa::buffer#4 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // utoa::@return
    // }
    // [110] return 
    rts
    // utoa::@2
  __b2:
    // unsigned int digit_value = digit_values[digit]
    // [111] utoa::$10 = utoa::digit#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [112] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // if (started || value >= digit_value)
    // [113] if(0!=utoa::started#2) goto utoa::@5 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    // utoa::@7
    // [114] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [115] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
    // [115] phi utoa::buffer#14 = utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [115] phi utoa::started#4 = utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [115] phi utoa::value#6 = utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    // utoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [116] utoa::digit#1 = ++ utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [104] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
    // [104] phi utoa::buffer#11 = utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [104] phi utoa::started#2 = utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [104] phi utoa::value#2 = utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [104] phi utoa::digit#2 = utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // utoa_append(buffer++, value, digit_value)
    // [117] utoa_append::buffer#0 = utoa::buffer#11
    // [118] utoa_append::value#0 = utoa::value#2
    // [119] utoa_append::sub#0 = utoa::digit_value#0
    // [120] call utoa_append 
    // [149] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
    jsr utoa_append
    // utoa_append(buffer++, value, digit_value)
    // [121] utoa_append::return#0 = utoa_append::value#2
    // utoa::@6
    // value = utoa_append(buffer++, value, digit_value)
    // [122] utoa::value#1 = utoa_append::return#0
    // value = utoa_append(buffer++, value, digit_value);
    // [123] utoa::buffer#5 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [115] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
    // [115] phi utoa::buffer#14 = utoa::buffer#5 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [115] phi utoa::started#4 = 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [115] phi utoa::value#6 = utoa::value#1 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($1b) str)
print_str: {
    .label str = $1b
    // [125] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
    // [125] phi print_str::str#2 = decimal_digits [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z str
    lda #>decimal_digits
    sta.z str+1
    // print_str::@1
  __b1:
    // while(*str)
    // [126] if(0!=*print_str::str#2) goto print_str::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [127] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [128] print_char::ch#0 = *print_str::str#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [129] call print_char 
    // [70] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
    // [70] phi print_char_cursor#20 = print_char_cursor#21 [phi:print_str::@2->print_char#0] -- register_copy 
    // [70] phi print_char::ch#4 = print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [130] print_str::str#0 = ++ print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [125] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
    // [125] phi print_str::str#2 = print_str::str#0 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($17) dividend, word zp($12) divisor, word zp($19) rem)
divr16u: {
    .label rem = $19
    .label dividend = $17
    .label quotient = $1b
    .label return = $1b
    .label divisor = $12
    // [132] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
    // [132] phi divr16u::i#2 = 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [132] phi divr16u::quotient#3 = 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    txa
    sta.z quotient
    sta.z quotient+1
    // [132] phi divr16u::dividend#2 = divr16u::dividend#1 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [132] phi divr16u::rem#4 = 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vwuc1 
    sta.z rem
    sta.z rem+1
    // [132] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
    // [132] phi divr16u::i#2 = divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [132] phi divr16u::quotient#3 = divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [132] phi divr16u::dividend#2 = divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [132] phi divr16u::rem#4 = divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    // divr16u::@1
  __b1:
    // rem = rem << 1
    // [133] divr16u::rem#0 = divr16u::rem#4 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // BYTE1(dividend)
    // [134] divr16u::$1 = > divr16u::dividend#2 -- vbuaa=_byte1_vwuz1 
    lda.z dividend+1
    // BYTE1(dividend) & $80
    // [135] divr16u::$2 = divr16u::$1 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if( (BYTE1(dividend) & $80) != 0 )
    // [136] if(divr16u::$2==0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // divr16u::@4
    // rem = rem | 1
    // [137] divr16u::rem#1 = divr16u::rem#0 | 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [138] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
    // [138] phi divr16u::rem#5 = divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    // divr16u::@2
  __b2:
    // dividend = dividend << 1
    // [139] divr16u::dividend#0 = divr16u::dividend#2 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // quotient = quotient << 1
    // [140] divr16u::quotient#1 = divr16u::quotient#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // if(rem>=divisor)
    // [141] if(divr16u::rem#5<divr16u::divisor#0) goto divr16u::@3 -- vwuz1_lt_vwuz2_then_la1 
    lda.z rem+1
    cmp.z divisor+1
    bcc __b3
    bne !+
    lda.z rem
    cmp.z divisor
    bcc __b3
  !:
    // divr16u::@5
    // quotient++;
    // [142] divr16u::quotient#2 = ++ divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // rem = rem - divisor
    // [143] divr16u::rem#2 = divr16u::rem#5 - divr16u::divisor#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z rem
    sec
    sbc.z divisor
    sta.z rem
    lda.z rem+1
    sbc.z divisor+1
    sta.z rem+1
    // [144] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
    // [144] phi divr16u::return#0 = divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [144] phi divr16u::rem#10 = divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    // divr16u::@3
  __b3:
    // for( char i : 0..15)
    // [145] divr16u::i#1 = ++ divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [146] if(divr16u::i#1!=$10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // divr16u::@6
    // rem16u = rem
    // [147] rem16u#0 = divr16u::rem#10
    // divr16u::@return
    // }
    // [148] return 
    rts
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($19) buffer, word zp($15) value, word zp($1d) sub)
utoa_append: {
    .label buffer = $19
    .label value = $15
    .label sub = $1d
    .label return = $15
    // [150] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
    // [150] phi utoa_append::digit#2 = 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [150] phi utoa_append::value#2 = utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    // utoa_append::@1
  __b1:
    // while (value >= sub)
    // [151] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    // utoa_append::@3
    // *buffer = DIGITS[digit]
    // [152] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // utoa_append::@return
    // }
    // [153] return 
    rts
    // utoa_append::@2
  __b2:
    // digit++;
    // [154] utoa_append::digit#1 = ++ utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // value -= sub
    // [155] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [150] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
    // [150] phi utoa_append::digit#2 = utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [150] phi utoa_append::value#2 = utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Digits used for storing the decimal unsigned int
  decimal_digits: .fill 6, 0
  primenum: .fill 2*$3e8, 0

