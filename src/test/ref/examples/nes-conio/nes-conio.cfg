
(void()) _start()
_start: scope:[_start]  from
  [0] phi()
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_line_text ← (const nomodify byte*) PPU_NAME_TABLE_0
  [4] (volatile byte) x_scroll ← (byte) 0
  [5] (volatile byte) y_scroll ← (byte) 0
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  [6] phi()
  [7] call main 
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  [8] return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  [9] phi()
  to:main::initNES1
main::initNES1: scope:[main]  from main
  asm { cld ldx#$ff txs  }
  to:main::initNES1_disableVideoOutput1
main::initNES1_disableVideoOutput1: scope:[main]  from main::initNES1
  [11] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0
  [12] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0
  to:main::initNES1_disableAudioOutput1
main::initNES1_disableAudioOutput1: scope:[main]  from main::initNES1_disableVideoOutput1
  [13] *((const nomodify byte*) FR_COUNTER) ← (byte) $40
  [14] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40
  to:main::initNES1_clearVBlankFlag1
main::initNES1_clearVBlankFlag1: scope:[main]  from main::initNES1_disableAudioOutput1
  asm { ldaPPU_PPUSTATUS  }
  to:main::initNES1_waitForVBlank1
main::initNES1_waitForVBlank1: scope:[main]  from main::initNES1_clearVBlankFlag1
  [16] phi()
  to:main::initNES1_waitForVBlank1_@1
main::initNES1_waitForVBlank1_@1: scope:[main]  from main::initNES1_waitForVBlank1 main::initNES1_waitForVBlank1_@1
  [17] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80
  [18] if((byte) 0==(byte~) main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1
  to:main::initNES1_@1
main::initNES1_@1: scope:[main]  from main::initNES1_@1 main::initNES1_waitForVBlank1_@1
  [19] (byte) main::initNES1_i#2 ← phi( main::initNES1_@1/(byte) main::initNES1_i#1 main::initNES1_waitForVBlank1_@1/(byte) 0 )
  [20] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0
  [21] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0
  [22] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0
  [23] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0
  [24] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0
  [25] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0
  [26] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0
  [27] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0
  [28] (byte) main::initNES1_i#1 ← ++ (byte) main::initNES1_i#2
  [29] if((byte) 0!=(byte) main::initNES1_i#1) goto main::initNES1_@1
  to:main::initNES1_waitForVBlank2
main::initNES1_waitForVBlank2: scope:[main]  from main::initNES1_@1
  [30] phi()
  to:main::initNES1_waitForVBlank2_@1
main::initNES1_waitForVBlank2_@1: scope:[main]  from main::initNES1_waitForVBlank2 main::initNES1_waitForVBlank2_@1
  [31] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80
  [32] if((byte) 0==(byte~) main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1
  to:main::initNES1_@7
main::initNES1_@7: scope:[main]  from main::initNES1_waitForVBlank2_@1
  asm { ldaPPU_PPUSTATUS  }
  to:main::@6
main::@6: scope:[main]  from main::initNES1_@7
  [34] phi()
  [35] call ppuDataTransfer 
  to:main::@12
main::@12: scope:[main]  from main::@6
  [36] phi()
  [37] call ppuDataFill 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [38] phi()
  [39] call ppuDataFill 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [40] phi()
  [41] call clrscr 
  to:main::screensizex1
main::screensizex1: scope:[main]  from main::@14 main::@15
  [42] (byte) main::x#10 ← phi( main::@14/(byte) 1 main::@15/(byte) main::x#1 )
  to:main::@7
main::@7: scope:[main]  from main::screensizex1
  [43] if((byte) main::x#10<(const byte) main::screensizex1_return#0-(byte) 1) goto main::@1
  to:main::screensizey2
main::screensizey2: scope:[main]  from main::@16 main::@7
  [44] (byte) main::y#10 ← phi( main::@7/(byte) 1 main::@16/(byte) main::y#1 )
  to:main::@9
main::@9: scope:[main]  from main::screensizey2
  [45] if((byte) main::y#10<(const byte) main::screensizey2_return#0-(byte) 3) goto main::@2
  to:main::screensizey3
main::screensizey3: scope:[main]  from main::@18 main::@9
  [46] (byte) main::i#2 ← phi( main::@18/(byte) main::i#1 main::@9/(byte) 0 )
  to:main::@11
main::@11: scope:[main]  from main::screensizey3
  [47] if((byte) main::i#2<(const byte) main::screensizey3_return#0) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@11
  [48] (volatile byte) x_scroll ← (byte) 0
  [49] (volatile byte) y_scroll ← (byte) -8
  to:main::enableVideoOutput1
main::enableVideoOutput1: scope:[main]  from main::@4
  [50] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80
  [51] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $1e
  to:main::@5
main::@5: scope:[main]  from main::@5 main::enableVideoOutput1
  [52] phi()
  to:main::@5
main::@3: scope:[main]  from main::@11
  [53] (byte) uctoa::value#1 ← (byte) main::i#2 & (byte) $f
  [54] call uctoa 
  to:main::@17
main::@17: scope:[main]  from main::@3
  [55] (byte) cputsxy::x#0 ← (byte) main::i#2
  [56] (byte) cputsxy::y#0 ← (byte) main::i#2
  [57] call cputsxy 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [58] (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::screensizey3
main::@2: scope:[main]  from main::@9
  [59] (byte) cputcxy::y#2 ← (byte) main::y#10
  [60] call cputcxy 
  to:main::screensizex2
main::screensizex2: scope:[main]  from main::@2
  [61] phi()
  to:main::@10
main::@10: scope:[main]  from main::screensizex2
  [62] (byte) cputcxy::y#3 ← (byte) main::y#10
  [63] call cputcxy 
  to:main::@16
main::@16: scope:[main]  from main::@10
  [64] (byte) main::y#1 ← ++ (byte) main::y#10
  to:main::screensizey2
main::@1: scope:[main]  from main::@7
  [65] (byte) cputcxy::x#0 ← (byte) main::x#10
  [66] call cputcxy 
  to:main::screensizey1
main::screensizey1: scope:[main]  from main::@1
  [67] phi()
  to:main::@8
main::@8: scope:[main]  from main::screensizey1
  [68] (byte) cputcxy::x#1 ← (byte) main::x#10
  [69] call cputcxy 
  to:main::@15
main::@15: scope:[main]  from main::@8
  [70] (byte) main::x#1 ← ++ (byte) main::x#10
  to:main::screensizex1

(void()) cputcxy((byte) cputcxy::x , (byte) cputcxy::y , (byte) cputcxy::c)
cputcxy: scope:[cputcxy]  from main::@1 main::@10 main::@2 main::@8
  [71] (byte) cputcxy::c#4 ← phi( main::@1/(byte) '-' main::@8/(byte) '-' main::@10/(byte) 'i' main::@2/(byte) 'i' )
  [71] (byte) cputcxy::y#4 ← phi( main::@1/(byte) 1 main::@8/(const byte) main::screensizey1_return#0-(byte) 4 main::@10/(byte) cputcxy::y#3 main::@2/(byte) cputcxy::y#2 )
  [71] (byte) cputcxy::x#4 ← phi( main::@1/(byte) cputcxy::x#0 main::@8/(byte) cputcxy::x#1 main::@10/(const byte) main::screensizex2_return#0-(byte) 2 main::@2/(byte) 1 )
  [72] (byte) gotoxy::x#2 ← (byte) cputcxy::x#4
  [73] (byte) gotoxy::y#2 ← (byte) cputcxy::y#4
  [74] call gotoxy 
  to:cputcxy::@1
cputcxy::@1: scope:[cputcxy]  from cputcxy
  [75] (byte) cputc::c#1 ← (byte) cputcxy::c#4
  [76] call cputc 
  to:cputcxy::@return
cputcxy::@return: scope:[cputcxy]  from cputcxy::@1
  [77] return 
  to:@return

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputcxy::@1 cputs::@2
  [78] (byte) cputc::c#2 ← phi( cputcxy::@1/(byte) cputc::c#1 cputs::@2/(byte) cputc::c#0 )
  [79] if((byte) cputc::c#2==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [80] (nomodify byte*) ppuDataSet::ppuData#0 ← (byte*) conio_line_text + (byte) conio_cursor_x
  [81] (byte) ppuDataSet::val#0 ← (byte) cputc::c#2
  [82] call ppuDataSet 
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@2
  [83] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [84] if((byte) conio_cursor_x!=(byte) $20) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@4
  [85] phi()
  [86] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@3 cputc::@4
  [87] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [88] phi()
  [89] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [90] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $20
  [91] (byte) conio_cursor_x ← (byte) 0
  [92] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [93] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [94] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputln
  [95] if((byte) conio_cursor_y!=(byte) $1e) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll cscroll::@5
  [96] (byte*) cscroll::line1#2 ← phi( cscroll/(const nomodify byte*) PPU_NAME_TABLE_0 cscroll::@5/(byte*) cscroll::line1#1 )
  [96] (byte*) cscroll::line2#2 ← phi( cscroll/(const nomodify byte*) PPU_NAME_TABLE_0+(byte) $20 cscroll::@5/(byte*) cscroll::line2#1 )
  [96] (byte) cscroll::y#2 ← phi( cscroll/(byte) 0 cscroll::@5/(byte) cscroll::y#1 )
  [97] if((byte) cscroll::y#2<(byte)(number) $1e-(number) 1) goto cscroll::@2
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@1
  [98] phi()
  [99] call ppuDataFill 
  to:cscroll::@6
cscroll::@6: scope:[cscroll]  from cscroll::@3
  [100] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $20
  [101] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@6
  [102] return 
  to:@return
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [103] (nomodify void*) ppuDataFetch::ppuData#0 ← (void*)(byte*) cscroll::line2#2
  [104] call ppuDataFetch 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@2
  [105] (nomodify void*) ppuDataTransfer::ppuData#0 ← (void*)(byte*) cscroll::line1#2
  [106] call ppuDataTransfer 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [107] (byte*) cscroll::line1#1 ← (byte*) cscroll::line1#2 + (byte) $20
  [108] (byte*) cscroll::line2#1 ← (byte*) cscroll::line2#2 + (byte) $20
  [109] (byte) cscroll::y#1 ← ++ (byte) cscroll::y#2
  to:cscroll::@1

(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
ppuDataTransfer: scope:[ppuDataTransfer]  from cscroll::@4 main::@6
  [110] (word) ppuDataTransfer::size#3 ← phi( cscroll::@4/(byte) $20 main::@6/(byte) $20*(const byte) SIZEOF_BYTE )
  [110] (nomodify void*) ppuDataTransfer::cpuData#2 ← phi( cscroll::@4/(void*)(const byte*) conio_cscroll_buffer main::@6/(void*)(const byte*) PALETTE )
  [110] (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#0 ← phi( cscroll::@4/(nomodify void*) ppuDataTransfer::ppuData#0 main::@6/(void*)(const nomodify byte*) PPU_PALETTE )
  to:ppuDataTransfer::ppuDataPrepare1
ppuDataTransfer::ppuDataPrepare1: scope:[ppuDataTransfer]  from ppuDataTransfer
  [111] (byte~) ppuDataTransfer::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#0
  [112] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataTransfer::ppuDataPrepare1_$0
  [113] (byte~) ppuDataTransfer::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#0
  [114] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataTransfer::ppuDataPrepare1_$1
  to:ppuDataTransfer::@3
ppuDataTransfer::@3: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPrepare1
  [115] (byte*) ppuDataTransfer::cpuSrc#6 ← (byte*)(nomodify void*) ppuDataTransfer::cpuData#2
  to:ppuDataTransfer::@1
ppuDataTransfer::@1: scope:[ppuDataTransfer]  from ppuDataTransfer::@3 ppuDataTransfer::@4
  [116] (byte*) ppuDataTransfer::cpuSrc#2 ← phi( ppuDataTransfer::@3/(byte*) ppuDataTransfer::cpuSrc#6 ppuDataTransfer::@4/(byte*) ppuDataTransfer::cpuSrc#1 )
  [116] (word) ppuDataTransfer::i#2 ← phi( ppuDataTransfer::@3/(word) 0 ppuDataTransfer::@4/(word) ppuDataTransfer::i#1 )
  [117] if((word) ppuDataTransfer::i#2<(word) ppuDataTransfer::size#3) goto ppuDataTransfer::@2
  to:ppuDataTransfer::@return
ppuDataTransfer::@return: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  [118] return 
  to:@return
ppuDataTransfer::@2: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  [119] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2)
  to:ppuDataTransfer::ppuDataPut1
ppuDataTransfer::ppuDataPut1: scope:[ppuDataTransfer]  from ppuDataTransfer::@2
  [120] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataTransfer::ppuDataPut1_val#0
  to:ppuDataTransfer::@4
ppuDataTransfer::@4: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPut1
  [121] (byte*) ppuDataTransfer::cpuSrc#1 ← ++ (byte*) ppuDataTransfer::cpuSrc#2
  [122] (word) ppuDataTransfer::i#1 ← ++ (word) ppuDataTransfer::i#2
  to:ppuDataTransfer::@1

(void()) ppuDataFetch((nomodify void*) ppuDataFetch::cpuData , (nomodify void*) ppuDataFetch::ppuData , (word) ppuDataFetch::size)
ppuDataFetch: scope:[ppuDataFetch]  from cscroll::@2
  [123] phi()
  to:ppuDataFetch::ppuDataPrepare1
ppuDataFetch::ppuDataPrepare1: scope:[ppuDataFetch]  from ppuDataFetch
  [124] (byte~) ppuDataFetch::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFetch::ppuData#0
  [125] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFetch::ppuDataPrepare1_$0
  [126] (byte~) ppuDataFetch::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFetch::ppuData#0
  [127] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFetch::ppuDataPrepare1_$1
  to:ppuDataFetch::@2
ppuDataFetch::@2: scope:[ppuDataFetch]  from ppuDataFetch::ppuDataPrepare1
  asm { ldaPPU_PPUDATA  }
  to:ppuDataFetch::@1
ppuDataFetch::@1: scope:[ppuDataFetch]  from ppuDataFetch::@2 ppuDataFetch::@3
  [129] (byte*) ppuDataFetch::cpuDst#2 ← phi( ppuDataFetch::@2/(byte*)(const nomodify void*) ppuDataFetch::cpuData#0 ppuDataFetch::@3/(byte*) ppuDataFetch::cpuDst#1 )
  [129] (word) ppuDataFetch::i#2 ← phi( ppuDataFetch::@2/(word) 0 ppuDataFetch::@3/(word) ppuDataFetch::i#1 )
  [130] if((word) ppuDataFetch::i#2<(const word) ppuDataFetch::size#0) goto ppuDataFetch::ppuDataRead1
  to:ppuDataFetch::@return
ppuDataFetch::@return: scope:[ppuDataFetch]  from ppuDataFetch::@1
  [131] return 
  to:@return
ppuDataFetch::ppuDataRead1: scope:[ppuDataFetch]  from ppuDataFetch::@1
  [132] (byte) ppuDataFetch::ppuDataRead1_return#0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA)
  to:ppuDataFetch::@3
ppuDataFetch::@3: scope:[ppuDataFetch]  from ppuDataFetch::ppuDataRead1
  [133] *((byte*) ppuDataFetch::cpuDst#2) ← (byte) ppuDataFetch::ppuDataRead1_return#0
  [134] (byte*) ppuDataFetch::cpuDst#1 ← ++ (byte*) ppuDataFetch::cpuDst#2
  [135] (word) ppuDataFetch::i#1 ← ++ (word) ppuDataFetch::i#2
  to:ppuDataFetch::@1

(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
ppuDataFill: scope:[ppuDataFill]  from clrscr cscroll::@3 main::@12 main::@13
  [136] (byte) ppuDataFill::val#10 ← phi( clrscr/(byte) ' ' cscroll::@3/(byte) ' ' main::@12/(byte) 0 main::@13/(byte) 0 )
  [136] (word) ppuDataFill::size#5 ← phi( clrscr/(word) $3c0 cscroll::@3/(byte) $20 main::@12/(byte) $40 main::@13/(byte) $40 )
  [136] (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 ← phi( clrscr/(void*)(const nomodify byte*) PPU_NAME_TABLE_0 cscroll::@3/(void*)(const nomodify byte*) PPU_NAME_TABLE_0+(word)(number) $1e*(number) $20-(byte) $20 main::@12/(void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 main::@13/(void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_1 )
  to:ppuDataFill::ppuDataPrepare1
ppuDataFill::ppuDataPrepare1: scope:[ppuDataFill]  from ppuDataFill
  [137] (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0
  [138] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$0
  [139] (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0
  [140] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$1
  to:ppuDataFill::@1
ppuDataFill::@1: scope:[ppuDataFill]  from ppuDataFill::@2 ppuDataFill::ppuDataPrepare1
  [141] (word) ppuDataFill::i#2 ← phi( ppuDataFill::ppuDataPrepare1/(word) 0 ppuDataFill::@2/(word) ppuDataFill::i#1 )
  [142] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#5) goto ppuDataFill::ppuDataPut1
  to:ppuDataFill::@return
ppuDataFill::@return: scope:[ppuDataFill]  from ppuDataFill::@1
  [143] return 
  to:@return
ppuDataFill::ppuDataPut1: scope:[ppuDataFill]  from ppuDataFill::@1
  [144] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataFill::val#10
  to:ppuDataFill::@2
ppuDataFill::@2: scope:[ppuDataFill]  from ppuDataFill::ppuDataPut1
  [145] (word) ppuDataFill::i#1 ← ++ (word) ppuDataFill::i#2
  to:ppuDataFill::@1

(void()) ppuDataSet((nomodify void*) ppuDataSet::ppuData , (byte) ppuDataSet::val)
ppuDataSet: scope:[ppuDataSet]  from cputc::@2
  [146] phi()
  to:ppuDataSet::ppuDataPrepare1
ppuDataSet::ppuDataPrepare1: scope:[ppuDataSet]  from ppuDataSet
  [147] (byte~) ppuDataSet::ppuDataPrepare1_$0 ← > (void*)(nomodify byte*) ppuDataSet::ppuData#0
  [148] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataSet::ppuDataPrepare1_$0
  [149] (byte~) ppuDataSet::ppuDataPrepare1_$1 ← < (void*)(nomodify byte*) ppuDataSet::ppuData#0
  [150] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataSet::ppuDataPrepare1_$1
  to:ppuDataSet::ppuDataPut1
ppuDataSet::ppuDataPut1: scope:[ppuDataSet]  from ppuDataSet::ppuDataPrepare1
  [151] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataSet::val#0
  to:ppuDataSet::@return
ppuDataSet::@return: scope:[ppuDataSet]  from ppuDataSet::ppuDataPut1
  [152] return 
  to:@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from cputcxy cputsxy
  [153] (byte) gotoxy::x#4 ← phi( cputcxy/(byte) gotoxy::x#2 cputsxy/(byte) gotoxy::x#3 )
  [153] (byte) gotoxy::y#4 ← phi( cputcxy/(byte) gotoxy::y#2 cputsxy/(byte) gotoxy::y#3 )
  [154] if((byte) gotoxy::y#4<(byte) $1e+(byte) 1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [155] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [156] (byte) gotoxy::y#5 ← phi( gotoxy::@3/(byte) gotoxy::y#4 gotoxy/(byte) 0 )
  [157] if((byte) gotoxy::x#4<(byte) $20) goto gotoxy::@4
  to:gotoxy::@2
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  [158] phi()
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  [159] (byte) gotoxy::x#5 ← phi( gotoxy::@4/(byte) gotoxy::x#4 gotoxy::@1/(byte) 0 )
  [160] (byte) conio_cursor_x ← (byte) gotoxy::x#5
  [161] (byte) conio_cursor_y ← (byte) gotoxy::y#5
  [162] (word~) gotoxy::$6 ← (word)(byte) gotoxy::y#5
  [163] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$6 << (byte) 5
  [164] (byte*~) gotoxy::$5 ← (const nomodify byte*) PPU_NAME_TABLE_0 + (word) gotoxy::line_offset#0
  [165] (byte*) conio_line_text ← (byte*~) gotoxy::$5
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [166] return 
  to:@return

(void()) cputsxy((byte) cputsxy::x , (byte) cputsxy::y , (to_nomodify byte*) cputsxy::s)
cputsxy: scope:[cputsxy]  from main::@17
  [167] (byte) gotoxy::x#3 ← (byte) cputsxy::x#0
  [168] (byte) gotoxy::y#3 ← (byte) cputsxy::y#0
  [169] call gotoxy 
  to:cputsxy::@1
cputsxy::@1: scope:[cputsxy]  from cputsxy
  [170] phi()
  [171] call cputs 
  to:cputsxy::@return
cputsxy::@return: scope:[cputsxy]  from cputsxy::@1
  [172] return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from cputsxy::@1
  [173] phi()
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [174] (to_nomodify byte*) cputs::s#2 ← phi( cputs/(const byte*) num_buffer cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [175] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2)
  [176] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2
  [177] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [178] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [179] (byte) cputc::c#0 ← (byte) cputs::c#1
  [180] call cputc 
  to:cputs::@1

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from main::@3
  [181] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [182] (byte*) uctoa::buffer#11 ← phi( uctoa::@4/(byte*) uctoa::buffer#14 uctoa/(const byte*) num_buffer )
  [182] (byte) uctoa::started#2 ← phi( uctoa::@4/(byte) uctoa::started#4 uctoa/(byte) 0 )
  [182] (byte) uctoa::value#2 ← phi( uctoa::@4/(byte) uctoa::value#6 uctoa/(byte) uctoa::value#1 )
  [182] (byte) uctoa::digit#2 ← phi( uctoa::@4/(byte) uctoa::digit#1 uctoa/(byte) 0 )
  [183] if((byte) uctoa::digit#2<(const byte) uctoa::max_digits#2-(byte) 1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [184] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2)
  [185] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11
  [186] *((byte*) uctoa::buffer#3) ← (byte) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [187] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [188] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2)
  [189] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [190] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [191] (byte*) uctoa::buffer#14 ← phi( uctoa::@7/(byte*) uctoa::buffer#11 uctoa::@6/(byte*) uctoa::buffer#4 )
  [191] (byte) uctoa::started#4 ← phi( uctoa::@7/(byte) uctoa::started#2 uctoa::@6/(byte) 1 )
  [191] (byte) uctoa::value#6 ← phi( uctoa::@7/(byte) uctoa::value#2 uctoa::@6/(byte) uctoa::value#0 )
  [192] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [193] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
  [194] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
  [195] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
  [196] call uctoa_append 
  [197] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [198] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
  [199] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11
  to:uctoa::@4

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [200] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [201] (byte) uctoa_append::digit#2 ← phi( uctoa_append/(byte) 0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  [201] (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#0 uctoa_append::@2/(byte) uctoa_append::value#1 )
  [202] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [203] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2)
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [204] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [205] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  [206] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0
  to:uctoa_append::@1

(void()) clrscr()
clrscr: scope:[clrscr]  from main::@14
  [207] phi()
  [208] call ppuDataFill 
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr
  [209] (byte) conio_cursor_x ← (byte) 0
  [210] (byte) conio_cursor_y ← (byte) 0
  [211] (byte*) conio_line_text ← (const nomodify byte*) PPU_NAME_TABLE_0
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@1
  [212] return 
  to:@return

interrupt(HARDWARE_STACK)(void()) vblank()
vblank: scope:[vblank]  from
  [213] phi()
  [214] call readJoy1 
  [215] (byte) readJoy1::return#2 ← (byte) readJoy1::joy#2
  to:vblank::@11
vblank::@11: scope:[vblank]  from vblank
  [216] (byte) vblank::joy#0 ← (byte) readJoy1::return#2
  [217] (byte~) vblank::$1 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_DOWN
  [218] if((byte) 0==(byte~) vblank::$1) goto vblank::@1
  to:vblank::@5
vblank::@5: scope:[vblank]  from vblank::@11
  [219] (volatile byte) y_scroll ← ++ (volatile byte) y_scroll
  [220] if((volatile byte) y_scroll!=(byte) $f0) goto vblank::@1
  to:vblank::@6
vblank::@6: scope:[vblank]  from vblank::@5
  [221] (volatile byte) y_scroll ← (byte) 0
  to:vblank::@1
vblank::@1: scope:[vblank]  from vblank::@11 vblank::@5 vblank::@6
  [222] (byte~) vblank::$3 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_UP
  [223] if((byte) 0==(byte~) vblank::$3) goto vblank::@2
  to:vblank::@7
vblank::@7: scope:[vblank]  from vblank::@1
  [224] (volatile byte) y_scroll ← -- (volatile byte) y_scroll
  [225] if((volatile byte) y_scroll!=(byte) $ff) goto vblank::@2
  to:vblank::@8
vblank::@8: scope:[vblank]  from vblank::@7
  [226] (volatile byte) y_scroll ← (byte) $ef
  to:vblank::@2
vblank::@2: scope:[vblank]  from vblank::@1 vblank::@7 vblank::@8
  [227] (byte~) vblank::$5 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_LEFT
  [228] if((byte) 0==(byte~) vblank::$5) goto vblank::@3
  to:vblank::@9
vblank::@9: scope:[vblank]  from vblank::@2
  [229] (volatile byte) x_scroll ← ++ (volatile byte) x_scroll
  to:vblank::@3
vblank::@3: scope:[vblank]  from vblank::@2 vblank::@9
  [230] (byte~) vblank::$7 ← (byte) vblank::joy#0 & (const nomodify byte) JOY_RIGHT
  [231] if((byte) 0==(byte~) vblank::$7) goto vblank::@4
  to:vblank::@10
vblank::@10: scope:[vblank]  from vblank::@3
  [232] (volatile byte) x_scroll ← -- (volatile byte) x_scroll
  to:vblank::@4
vblank::@4: scope:[vblank]  from vblank::@10 vblank::@3
  [233] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (volatile byte) x_scroll
  [234] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (volatile byte) y_scroll
  to:vblank::@return
vblank::@return: scope:[vblank]  from vblank::@4
  [235] return 
  to:@return

(byte()) readJoy1()
readJoy1: scope:[readJoy1]  from vblank
  [236] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1
  [237] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0
  to:readJoy1::@1
readJoy1::@1: scope:[readJoy1]  from readJoy1 readJoy1::@2
  [238] (byte) readJoy1::joy#2 ← phi( readJoy1/(byte) 0 readJoy1::@2/(byte) readJoy1::joy#1 )
  [238] (byte) readJoy1::i#2 ← phi( readJoy1/(byte) 0 readJoy1::@2/(byte) readJoy1::i#1 )
  [239] if((byte) readJoy1::i#2<(byte) 8) goto readJoy1::@2
  to:readJoy1::@return
readJoy1::@return: scope:[readJoy1]  from readJoy1::@1
  [240] return 
  to:@return
readJoy1::@2: scope:[readJoy1]  from readJoy1::@1
  [241] (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (byte) 1
  [242] (byte~) readJoy1::$2 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1
  [243] (byte) readJoy1::joy#1 ← (byte~) readJoy1::$1 | (byte~) readJoy1::$2
  [244] (byte) readJoy1::i#1 ← ++ (byte) readJoy1::i#2
  to:readJoy1::@1
