Inlined call call _init 

CONTROL FLOW GRAPH SSA

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div16u div32u16u div32u16u::@1
  (word) divr16u::divisor#7 ← phi( div16u/(word) divr16u::divisor#0 div32u16u/(word) divr16u::divisor#1 div32u16u::@1/(word) divr16u::divisor#2 )
  (word) divr16u::dividend#6 ← phi( div16u/(word) divr16u::dividend#1 div32u16u/(word) divr16u::dividend#2 div32u16u::@1/(word) divr16u::dividend#3 )
  (word) divr16u::rem#11 ← phi( div16u/(word) divr16u::rem#3 div32u16u/(word) divr16u::rem#4 div32u16u::@1/(word) divr16u::rem#5 )
  (word) divr16u::quotient#0 ← (word) 0
  (byte) divr16u::i#0 ← (byte) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (byte) divr16u::i#5 ← phi( divr16u/(byte) divr16u::i#0 divr16u::@3/(byte) divr16u::i#1 )
  (word) divr16u::divisor#5 ← phi( divr16u/(word) divr16u::divisor#7 divr16u::@3/(word) divr16u::divisor#8 )
  (word) divr16u::quotient#6 ← phi( divr16u/(word) divr16u::quotient#0 divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::dividend#4 ← phi( divr16u/(word) divr16u::dividend#6 divr16u::@3/(word) divr16u::dividend#7 )
  (word) divr16u::rem#6 ← phi( divr16u/(word) divr16u::rem#11 divr16u::@3/(word) divr16u::rem#12 )
  (word~) divr16u::$0 ← (word) divr16u::rem#6 << (number) 1
  (word) divr16u::rem#0 ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend#4
  (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
  (bool~) divr16u::$3 ← (number~) divr16u::$2 != (number) 0
  (bool~) divr16u::$4 ← ! (bool~) divr16u::$3
  if((bool~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (byte) divr16u::i#3 ← phi( divr16u::@1/(byte) divr16u::i#5 divr16u::@4/(byte) divr16u::i#6 )
  (word) divr16u::divisor#3 ← phi( divr16u::@1/(word) divr16u::divisor#5 divr16u::@4/(word) divr16u::divisor#6 )
  (word) divr16u::rem#7 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  (word) divr16u::quotient#3 ← phi( divr16u::@1/(word) divr16u::quotient#6 divr16u::@4/(word) divr16u::quotient#7 )
  (word) divr16u::dividend#5 ← phi( divr16u::@1/(word) divr16u::dividend#4 divr16u::@4/(word) divr16u::dividend#8 )
  (word~) divr16u::$6 ← (word) divr16u::dividend#5 << (number) 1
  (word) divr16u::dividend#0 ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
  (word) divr16u::quotient#1 ← (word~) divr16u::$7
  (bool~) divr16u::$8 ← (word) divr16u::rem#7 >= (word) divr16u::divisor#3
  (bool~) divr16u::$9 ← ! (bool~) divr16u::$8
  if((bool~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (byte) divr16u::i#6 ← phi( divr16u::@1/(byte) divr16u::i#5 )
  (word) divr16u::divisor#6 ← phi( divr16u::@1/(word) divr16u::divisor#5 )
  (word) divr16u::quotient#7 ← phi( divr16u::@1/(word) divr16u::quotient#6 )
  (word) divr16u::dividend#8 ← phi( divr16u::@1/(word) divr16u::dividend#4 )
  (word) divr16u::rem#8 ← phi( divr16u::@1/(word) divr16u::rem#0 )
  (number~) divr16u::$5 ← (word) divr16u::rem#8 | (number) 1
  (word) divr16u::rem#1 ← (number~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (word) divr16u::divisor#8 ← phi( divr16u::@2/(word) divr16u::divisor#3 divr16u::@5/(word) divr16u::divisor#4 )
  (word) divr16u::quotient#8 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  (word) divr16u::dividend#7 ← phi( divr16u::@2/(word) divr16u::dividend#0 divr16u::@5/(word) divr16u::dividend#9 )
  (word) divr16u::rem#12 ← phi( divr16u::@2/(word) divr16u::rem#7 divr16u::@5/(word) divr16u::rem#2 )
  (byte) divr16u::i#2 ← phi( divr16u::@2/(byte) divr16u::i#3 divr16u::@5/(byte) divr16u::i#4 )
  (byte) divr16u::i#1 ← (byte) divr16u::i#2 + rangenext(0,$f)
  (bool~) divr16u::$11 ← (byte) divr16u::i#1 != rangelast(0,$f)
  if((bool~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::dividend#9 ← phi( divr16u::@2/(word) divr16u::dividend#0 )
  (byte) divr16u::i#4 ← phi( divr16u::@2/(byte) divr16u::i#3 )
  (word) divr16u::divisor#4 ← phi( divr16u::@2/(word) divr16u::divisor#3 )
  (word) divr16u::rem#9 ← phi( divr16u::@2/(word) divr16u::rem#7 )
  (word) divr16u::quotient#4 ← phi( divr16u::@2/(word) divr16u::quotient#1 )
  (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#4
  (word~) divr16u::$10 ← (word) divr16u::rem#9 - (word) divr16u::divisor#4
  (word) divr16u::rem#2 ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) divr16u::quotient#5 ← phi( divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::rem#10 ← phi( divr16u::@3/(word) divr16u::rem#12 )
  (word) rem16u#0 ← (word) divr16u::rem#10
  (word) divr16u::return#0 ← (word) divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  (word) rem16u#17 ← phi( divr16u::@6/(word) rem16u#0 )
  (word) divr16u::return#5 ← phi( divr16u::@6/(word) divr16u::return#0 )
  (word) divr16u::return#1 ← (word) divr16u::return#5
  (word) rem16u#1 ← (word) rem16u#17
  return 
  to:@return

(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
div16u: scope:[div16u]  from sin8s_gen
  (word) rem16u#32 ← phi( sin8s_gen/(word) rem16u#36 )
  (word) div16u::divisor#1 ← phi( sin8s_gen/(word) div16u::divisor#0 )
  (word) div16u::dividend#1 ← phi( sin8s_gen/(word) div16u::dividend#0 )
  (word) divr16u::dividend#1 ← (word) div16u::dividend#1
  (word) divr16u::divisor#0 ← (word) div16u::divisor#1
  (word) divr16u::rem#3 ← (number) 0
  call divr16u 
  (word) divr16u::return#2 ← (word) divr16u::return#1
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  (word) rem16u#18 ← phi( div16u/(word) rem16u#1 )
  (word) divr16u::return#6 ← phi( div16u/(word) divr16u::return#2 )
  (word~) div16u::$0 ← (word) divr16u::return#6
  (word) rem16u#2 ← (word) rem16u#18
  (word) div16u::return#0 ← (word~) div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  (word) rem16u#19 ← phi( div16u::@1/(word) rem16u#2 )
  (word) div16u::return#3 ← phi( div16u::@1/(word) div16u::return#0 )
  (word) div16u::return#1 ← (word) div16u::return#3
  (word) rem16u#3 ← (word) rem16u#19
  return 
  to:@return

(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
div32u16u: scope:[div32u16u]  from sin16s_gen
  (word) rem16u#33 ← phi( sin16s_gen/(word) rem16u#34 )
  (word) div32u16u::divisor#1 ← phi( sin16s_gen/(word) div32u16u::divisor#0 )
  (dword) div32u16u::dividend#1 ← phi( sin16s_gen/(dword) div32u16u::dividend#0 )
  (word~) div32u16u::$0 ← > (dword) div32u16u::dividend#1
  (word) divr16u::dividend#2 ← (word~) div32u16u::$0
  (word) divr16u::divisor#1 ← (word) div32u16u::divisor#1
  (word) divr16u::rem#4 ← (number) 0
  call divr16u 
  (word) divr16u::return#3 ← (word) divr16u::return#1
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  (word) div32u16u::divisor#2 ← phi( div32u16u/(word) div32u16u::divisor#1 )
  (dword) div32u16u::dividend#2 ← phi( div32u16u/(dword) div32u16u::dividend#1 )
  (word) rem16u#20 ← phi( div32u16u/(word) rem16u#1 )
  (word) divr16u::return#7 ← phi( div32u16u/(word) divr16u::return#3 )
  (word~) div32u16u::$1 ← (word) divr16u::return#7
  (word) rem16u#4 ← (word) rem16u#20
  (word) div32u16u::quotient_hi#0 ← (word~) div32u16u::$1
  (word~) div32u16u::$2 ← < (dword) div32u16u::dividend#2
  (word) divr16u::dividend#3 ← (word~) div32u16u::$2
  (word) divr16u::divisor#2 ← (word) div32u16u::divisor#2
  (word) divr16u::rem#5 ← (word) rem16u#4
  call divr16u 
  (word) divr16u::return#4 ← (word) divr16u::return#1
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  (word) div32u16u::quotient_hi#1 ← phi( div32u16u::@1/(word) div32u16u::quotient_hi#0 )
  (word) rem16u#21 ← phi( div32u16u::@1/(word) rem16u#1 )
  (word) divr16u::return#8 ← phi( div32u16u::@1/(word) divr16u::return#4 )
  (word~) div32u16u::$3 ← (word) divr16u::return#8
  (word) rem16u#5 ← (word) rem16u#21
  (word) div32u16u::quotient_lo#0 ← (word~) div32u16u::$3
  (dword) div32u16u::quotient#0 ← (dword){ (word) div32u16u::quotient_hi#1, (word) div32u16u::quotient_lo#0 }
  (dword) div32u16u::return#0 ← (dword) div32u16u::quotient#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  (word) rem16u#22 ← phi( div32u16u::@2/(word) rem16u#5 )
  (dword) div32u16u::return#3 ← phi( div32u16u::@2/(dword) div32u16u::return#0 )
  (dword) div32u16u::return#1 ← (dword) div32u16u::return#3
  (word) rem16u#6 ← (word) rem16u#22
  return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from mulu8_sel
  (byte) mul8u::a#5 ← phi( mulu8_sel/(byte) mul8u::a#1 )
  (byte) mul8u::b#1 ← phi( mulu8_sel/(byte) mul8u::b#0 )
  (word) mul8u::res#0 ← (word) 0
  (word) mul8u::mb#0 ← (word)(byte) mul8u::b#1
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  (word) mul8u::mb#5 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@4/(word) mul8u::mb#1 )
  (word) mul8u::res#4 ← phi( mul8u/(word) mul8u::res#0 mul8u::@4/(word) mul8u::res#6 )
  (byte) mul8u::a#2 ← phi( mul8u/(byte) mul8u::a#5 mul8u::@4/(byte) mul8u::a#0 )
  (bool~) mul8u::$0 ← (byte) mul8u::a#2 != (number) 0
  if((bool~) mul8u::$0) goto mul8u::@2
  to:mul8u::@3
mul8u::@2: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#5 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::mb#4 ← phi( mul8u::@1/(word) mul8u::mb#5 )
  (byte) mul8u::a#3 ← phi( mul8u::@1/(byte) mul8u::a#2 )
  (number~) mul8u::$1 ← (byte) mul8u::a#3 & (number) 1
  (bool~) mul8u::$2 ← (number~) mul8u::$1 != (number) 0
  (bool~) mul8u::$3 ← ! (bool~) mul8u::$2
  if((bool~) mul8u::$3) goto mul8u::@4
  to:mul8u::@5
mul8u::@3: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#2 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::return#0 ← (word) mul8u::res#2
  to:mul8u::@return
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@5
  (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#5 mul8u::@5/(word) mul8u::res#1 )
  (word) mul8u::mb#2 ← phi( mul8u::@2/(word) mul8u::mb#4 mul8u::@5/(word) mul8u::mb#3 )
  (byte) mul8u::a#4 ← phi( mul8u::@2/(byte) mul8u::a#3 mul8u::@5/(byte) mul8u::a#6 )
  (byte~) mul8u::$5 ← (byte) mul8u::a#4 >> (number) 1
  (byte) mul8u::a#0 ← (byte~) mul8u::$5
  (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
  (word) mul8u::mb#1 ← (word~) mul8u::$6
  to:mul8u::@1
mul8u::@5: scope:[mul8u]  from mul8u::@2
  (byte) mul8u::a#6 ← phi( mul8u::@2/(byte) mul8u::a#3 )
  (word) mul8u::mb#3 ← phi( mul8u::@2/(word) mul8u::mb#4 )
  (word) mul8u::res#3 ← phi( mul8u::@2/(word) mul8u::res#5 )
  (word~) mul8u::$4 ← (word) mul8u::res#3 + (word) mul8u::mb#3
  (word) mul8u::res#1 ← (word~) mul8u::$4
  to:mul8u::@4
mul8u::@return: scope:[mul8u]  from mul8u::@3
  (word) mul8u::return#3 ← phi( mul8u::@3/(word) mul8u::return#0 )
  (word) mul8u::return#1 ← (word) mul8u::return#3
  return 
  to:@return

(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
mul16u: scope:[mul16u]  from mulu16_sel
  (word) mul16u::a#5 ← phi( mulu16_sel/(word) mul16u::a#1 )
  (word) mul16u::b#1 ← phi( mulu16_sel/(word) mul16u::b#0 )
  (dword) mul16u::res#0 ← (dword) 0
  (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#1
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  (dword) mul16u::mb#5 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@4/(dword) mul16u::mb#1 )
  (dword) mul16u::res#4 ← phi( mul16u/(dword) mul16u::res#0 mul16u::@4/(dword) mul16u::res#6 )
  (word) mul16u::a#2 ← phi( mul16u/(word) mul16u::a#5 mul16u::@4/(word) mul16u::a#0 )
  (bool~) mul16u::$0 ← (word) mul16u::a#2 != (number) 0
  if((bool~) mul16u::$0) goto mul16u::@2
  to:mul16u::@3
mul16u::@2: scope:[mul16u]  from mul16u::@1
  (dword) mul16u::res#5 ← phi( mul16u::@1/(dword) mul16u::res#4 )
  (dword) mul16u::mb#4 ← phi( mul16u::@1/(dword) mul16u::mb#5 )
  (word) mul16u::a#3 ← phi( mul16u::@1/(word) mul16u::a#2 )
  (number~) mul16u::$1 ← (word) mul16u::a#3 & (number) 1
  (bool~) mul16u::$2 ← (number~) mul16u::$1 != (number) 0
  (bool~) mul16u::$3 ← ! (bool~) mul16u::$2
  if((bool~) mul16u::$3) goto mul16u::@4
  to:mul16u::@5
mul16u::@3: scope:[mul16u]  from mul16u::@1
  (dword) mul16u::res#2 ← phi( mul16u::@1/(dword) mul16u::res#4 )
  (dword) mul16u::return#0 ← (dword) mul16u::res#2
  to:mul16u::@return
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@5
  (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#5 mul16u::@5/(dword) mul16u::res#1 )
  (dword) mul16u::mb#2 ← phi( mul16u::@2/(dword) mul16u::mb#4 mul16u::@5/(dword) mul16u::mb#3 )
  (word) mul16u::a#4 ← phi( mul16u::@2/(word) mul16u::a#3 mul16u::@5/(word) mul16u::a#6 )
  (word~) mul16u::$5 ← (word) mul16u::a#4 >> (number) 1
  (word) mul16u::a#0 ← (word~) mul16u::$5
  (dword~) mul16u::$6 ← (dword) mul16u::mb#2 << (number) 1
  (dword) mul16u::mb#1 ← (dword~) mul16u::$6
  to:mul16u::@1
mul16u::@5: scope:[mul16u]  from mul16u::@2
  (word) mul16u::a#6 ← phi( mul16u::@2/(word) mul16u::a#3 )
  (dword) mul16u::mb#3 ← phi( mul16u::@2/(dword) mul16u::mb#4 )
  (dword) mul16u::res#3 ← phi( mul16u::@2/(dword) mul16u::res#5 )
  (dword~) mul16u::$4 ← (dword) mul16u::res#3 + (dword) mul16u::mb#3
  (dword) mul16u::res#1 ← (dword~) mul16u::$4
  to:mul16u::@4
mul16u::@return: scope:[mul16u]  from mul16u::@3
  (dword) mul16u::return#3 ← phi( mul16u::@3/(dword) mul16u::return#0 )
  (dword) mul16u::return#1 ← (dword) mul16u::return#3
  return 
  to:@return

(void()) sin16s_gen((signed word*) sin16s_gen::sintab , (word) sin16s_gen::wavelength)
sin16s_gen: scope:[sin16s_gen]  from main::@2
  (signed word*) sin16s_gen::sintab#6 ← phi( main::@2/(signed word*) sin16s_gen::sintab#1 )
  (word) rem16u#34 ← phi( main::@2/(word) rem16u#11 )
  (word) sin16s_gen::wavelength#1 ← phi( main::@2/(word) sin16s_gen::wavelength#0 )
  (dword) div32u16u::dividend#0 ← (const nomodify dword) PI2_u4f28
  (word) div32u16u::divisor#0 ← (word) sin16s_gen::wavelength#1
  call div32u16u 
  (dword) div32u16u::return#2 ← (dword) div32u16u::return#1
  to:sin16s_gen::@3
sin16s_gen::@3: scope:[sin16s_gen]  from sin16s_gen
  (signed word*) sin16s_gen::sintab#5 ← phi( sin16s_gen/(signed word*) sin16s_gen::sintab#6 )
  (word) sin16s_gen::wavelength#3 ← phi( sin16s_gen/(word) sin16s_gen::wavelength#1 )
  (word) rem16u#23 ← phi( sin16s_gen/(word) rem16u#6 )
  (dword) div32u16u::return#4 ← phi( sin16s_gen/(dword) div32u16u::return#2 )
  (dword~) sin16s_gen::$0 ← (dword) div32u16u::return#4
  (word) rem16u#7 ← (word) rem16u#23
  (dword) sin16s_gen::step#0 ← (dword~) sin16s_gen::$0
  (dword) sin16s_gen::x#0 ← (dword) 0
  (word) sin16s_gen::i#0 ← (word) 0
  to:sin16s_gen::@1
sin16s_gen::@1: scope:[sin16s_gen]  from sin16s_gen::@3 sin16s_gen::@4
  (dword) sin16s_gen::step#3 ← phi( sin16s_gen::@3/(dword) sin16s_gen::step#0 sin16s_gen::@4/(dword) sin16s_gen::step#1 )
  (signed word*) sin16s_gen::sintab#4 ← phi( sin16s_gen::@3/(signed word*) sin16s_gen::sintab#5 sin16s_gen::@4/(signed word*) sin16s_gen::sintab#0 )
  (word) rem16u#35 ← phi( sin16s_gen::@3/(word) rem16u#7 sin16s_gen::@4/(word) rem16u#41 )
  (dword) sin16s_gen::x#4 ← phi( sin16s_gen::@3/(dword) sin16s_gen::x#0 sin16s_gen::@4/(dword) sin16s_gen::x#1 )
  (word) sin16s_gen::wavelength#2 ← phi( sin16s_gen::@3/(word) sin16s_gen::wavelength#3 sin16s_gen::@4/(word) sin16s_gen::wavelength#4 )
  (word) sin16s_gen::i#2 ← phi( sin16s_gen::@3/(word) sin16s_gen::i#0 sin16s_gen::@4/(word) sin16s_gen::i#1 )
  (bool~) sin16s_gen::$1 ← (word) sin16s_gen::i#2 < (word) sin16s_gen::wavelength#2
  if((bool~) sin16s_gen::$1) goto sin16s_gen::@2
  to:sin16s_gen::@return
sin16s_gen::@2: scope:[sin16s_gen]  from sin16s_gen::@1
  (word) rem16u#44 ← phi( sin16s_gen::@1/(word) rem16u#35 )
  (word) sin16s_gen::wavelength#5 ← phi( sin16s_gen::@1/(word) sin16s_gen::wavelength#2 )
  (word) sin16s_gen::i#4 ← phi( sin16s_gen::@1/(word) sin16s_gen::i#2 )
  (dword) sin16s_gen::step#2 ← phi( sin16s_gen::@1/(dword) sin16s_gen::step#3 )
  (signed word*) sin16s_gen::sintab#3 ← phi( sin16s_gen::@1/(signed word*) sin16s_gen::sintab#4 )
  (dword) sin16s_gen::x#2 ← phi( sin16s_gen::@1/(dword) sin16s_gen::x#4 )
  (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2
  call sin16s 
  (signed word) sin16s::return#0 ← (signed word) sin16s::return#2
  to:sin16s_gen::@4
sin16s_gen::@4: scope:[sin16s_gen]  from sin16s_gen::@2
  (word) rem16u#41 ← phi( sin16s_gen::@2/(word) rem16u#44 )
  (word) sin16s_gen::wavelength#4 ← phi( sin16s_gen::@2/(word) sin16s_gen::wavelength#5 )
  (word) sin16s_gen::i#3 ← phi( sin16s_gen::@2/(word) sin16s_gen::i#4 )
  (dword) sin16s_gen::step#1 ← phi( sin16s_gen::@2/(dword) sin16s_gen::step#2 )
  (dword) sin16s_gen::x#3 ← phi( sin16s_gen::@2/(dword) sin16s_gen::x#2 )
  (signed word*) sin16s_gen::sintab#2 ← phi( sin16s_gen::@2/(signed word*) sin16s_gen::sintab#3 )
  (signed word) sin16s::return#3 ← phi( sin16s_gen::@2/(signed word) sin16s::return#0 )
  (signed word~) sin16s_gen::$2 ← (signed word) sin16s::return#3
  *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$2
  (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD
  (dword~) sin16s_gen::$3 ← (dword) sin16s_gen::x#3 + (dword) sin16s_gen::step#1
  (dword) sin16s_gen::x#1 ← (dword~) sin16s_gen::$3
  (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#3
  to:sin16s_gen::@1
sin16s_gen::@return: scope:[sin16s_gen]  from sin16s_gen::@1
  (word) rem16u#24 ← phi( sin16s_gen::@1/(word) rem16u#35 )
  (word) rem16u#8 ← (word) rem16u#24
  return 
  to:@return

(void()) sin8s_gen((signed byte*) sin8s_gen::sintab , (word) sin8s_gen::wavelength)
sin8s_gen: scope:[sin8s_gen]  from main
  (signed byte*) sin8s_gen::sintab#6 ← phi( main/(signed byte*) sin8s_gen::sintab#1 )
  (word) rem16u#36 ← phi( main/(word) rem16u#38 )
  (word) sin8s_gen::wavelength#1 ← phi( main/(word) sin8s_gen::wavelength#0 )
  (word) div16u::dividend#0 ← (const nomodify word) PI2_u4f12
  (word) div16u::divisor#0 ← (word) sin8s_gen::wavelength#1
  call div16u 
  (word) div16u::return#2 ← (word) div16u::return#1
  to:sin8s_gen::@3
sin8s_gen::@3: scope:[sin8s_gen]  from sin8s_gen
  (signed byte*) sin8s_gen::sintab#5 ← phi( sin8s_gen/(signed byte*) sin8s_gen::sintab#6 )
  (word) sin8s_gen::wavelength#3 ← phi( sin8s_gen/(word) sin8s_gen::wavelength#1 )
  (word) rem16u#25 ← phi( sin8s_gen/(word) rem16u#3 )
  (word) div16u::return#4 ← phi( sin8s_gen/(word) div16u::return#2 )
  (word~) sin8s_gen::$0 ← (word) div16u::return#4
  (word) rem16u#9 ← (word) rem16u#25
  (word) sin8s_gen::step#0 ← (word~) sin8s_gen::$0
  (word) sin8s_gen::x#0 ← (word) 0
  (word) sin8s_gen::i#0 ← (word) 0
  to:sin8s_gen::@1
sin8s_gen::@1: scope:[sin8s_gen]  from sin8s_gen::@3 sin8s_gen::@4
  (word) sin8s_gen::step#3 ← phi( sin8s_gen::@3/(word) sin8s_gen::step#0 sin8s_gen::@4/(word) sin8s_gen::step#1 )
  (signed byte*) sin8s_gen::sintab#4 ← phi( sin8s_gen::@3/(signed byte*) sin8s_gen::sintab#5 sin8s_gen::@4/(signed byte*) sin8s_gen::sintab#0 )
  (word) rem16u#37 ← phi( sin8s_gen::@3/(word) rem16u#9 sin8s_gen::@4/(word) rem16u#42 )
  (word) sin8s_gen::x#4 ← phi( sin8s_gen::@3/(word) sin8s_gen::x#0 sin8s_gen::@4/(word) sin8s_gen::x#1 )
  (word) sin8s_gen::wavelength#2 ← phi( sin8s_gen::@3/(word) sin8s_gen::wavelength#3 sin8s_gen::@4/(word) sin8s_gen::wavelength#4 )
  (word) sin8s_gen::i#2 ← phi( sin8s_gen::@3/(word) sin8s_gen::i#0 sin8s_gen::@4/(word) sin8s_gen::i#1 )
  (bool~) sin8s_gen::$1 ← (word) sin8s_gen::i#2 < (word) sin8s_gen::wavelength#2
  if((bool~) sin8s_gen::$1) goto sin8s_gen::@2
  to:sin8s_gen::@return
sin8s_gen::@2: scope:[sin8s_gen]  from sin8s_gen::@1
  (word) rem16u#45 ← phi( sin8s_gen::@1/(word) rem16u#37 )
  (word) sin8s_gen::wavelength#5 ← phi( sin8s_gen::@1/(word) sin8s_gen::wavelength#2 )
  (word) sin8s_gen::i#4 ← phi( sin8s_gen::@1/(word) sin8s_gen::i#2 )
  (word) sin8s_gen::step#2 ← phi( sin8s_gen::@1/(word) sin8s_gen::step#3 )
  (signed byte*) sin8s_gen::sintab#3 ← phi( sin8s_gen::@1/(signed byte*) sin8s_gen::sintab#4 )
  (word) sin8s_gen::x#2 ← phi( sin8s_gen::@1/(word) sin8s_gen::x#4 )
  (word) sin8s::x#0 ← (word) sin8s_gen::x#2
  call sin8s 
  (signed byte) sin8s::return#0 ← (signed byte) sin8s::return#2
  to:sin8s_gen::@4
sin8s_gen::@4: scope:[sin8s_gen]  from sin8s_gen::@2
  (word) rem16u#42 ← phi( sin8s_gen::@2/(word) rem16u#45 )
  (word) sin8s_gen::wavelength#4 ← phi( sin8s_gen::@2/(word) sin8s_gen::wavelength#5 )
  (word) sin8s_gen::i#3 ← phi( sin8s_gen::@2/(word) sin8s_gen::i#4 )
  (word) sin8s_gen::step#1 ← phi( sin8s_gen::@2/(word) sin8s_gen::step#2 )
  (word) sin8s_gen::x#3 ← phi( sin8s_gen::@2/(word) sin8s_gen::x#2 )
  (signed byte*) sin8s_gen::sintab#2 ← phi( sin8s_gen::@2/(signed byte*) sin8s_gen::sintab#3 )
  (signed byte) sin8s::return#3 ← phi( sin8s_gen::@2/(signed byte) sin8s::return#0 )
  (signed byte~) sin8s_gen::$2 ← (signed byte) sin8s::return#3
  *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$2
  (signed byte*) sin8s_gen::sintab#0 ← ++ (signed byte*) sin8s_gen::sintab#2
  (word~) sin8s_gen::$3 ← (word) sin8s_gen::x#3 + (word) sin8s_gen::step#1
  (word) sin8s_gen::x#1 ← (word~) sin8s_gen::$3
  (word) sin8s_gen::i#1 ← ++ (word) sin8s_gen::i#3
  to:sin8s_gen::@1
sin8s_gen::@return: scope:[sin8s_gen]  from sin8s_gen::@1
  (word) rem16u#26 ← phi( sin8s_gen::@1/(word) rem16u#37 )
  (word) rem16u#10 ← (word) rem16u#26
  return 
  to:@return

(signed word()) sin16s((dword) sin16s::x)
sin16s: scope:[sin16s]  from sin16s_gen::@2
  (dword) sin16s::x#3 ← phi( sin16s_gen::@2/(dword) sin16s::x#0 )
  (byte) sin16s::isUpper#0 ← (byte) 0
  (bool~) sin16s::$0 ← (dword) sin16s::x#3 >= (const nomodify dword) PI_u4f28
  (bool~) sin16s::$1 ← ! (bool~) sin16s::$0
  if((bool~) sin16s::$1) goto sin16s::@1
  to:sin16s::@4
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  (byte) sin16s::isUpper#8 ← phi( sin16s/(byte) sin16s::isUpper#0 sin16s::@4/(byte) sin16s::isUpper#1 )
  (dword) sin16s::x#4 ← phi( sin16s/(dword) sin16s::x#3 sin16s::@4/(dword) sin16s::x#1 )
  (bool~) sin16s::$2 ← (dword) sin16s::x#4 >= (const nomodify dword) PI_HALF_u4f28
  (bool~) sin16s::$3 ← ! (bool~) sin16s::$2
  if((bool~) sin16s::$3) goto sin16s::@2
  to:sin16s::@5
sin16s::@4: scope:[sin16s]  from sin16s
  (dword) sin16s::x#5 ← phi( sin16s/(dword) sin16s::x#3 )
  (dword~) sin16s::$16 ← (dword) sin16s::x#5 - (const nomodify dword) PI_u4f28
  (dword) sin16s::x#1 ← (dword~) sin16s::$16
  (byte) sin16s::isUpper#1 ← (number) 1
  to:sin16s::@1
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  (byte) sin16s::isUpper#7 ← phi( sin16s::@1/(byte) sin16s::isUpper#8 sin16s::@5/(byte) sin16s::isUpper#9 )
  (dword) sin16s::x#6 ← phi( sin16s::@1/(dword) sin16s::x#4 sin16s::@5/(dword) sin16s::x#2 )
  (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (number) 3
  (word~) sin16s::$5 ← > (dword~) sin16s::$4
  (word) sin16s::x1#0 ← (word~) sin16s::$5
  (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0
  (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0
  (byte) mulu16_sel::select#0 ← (number) 0
  call mulu16_sel 
  (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#6
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  (byte) sin16s::isUpper#6 ← phi( sin16s::@2/(byte) sin16s::isUpper#7 )
  (word) sin16s::x1#1 ← phi( sin16s::@2/(word) sin16s::x1#0 )
  (word) mulu16_sel::return#7 ← phi( sin16s::@2/(word) mulu16_sel::return#0 )
  (word~) sin16s::$6 ← (word) mulu16_sel::return#7
  (word) sin16s::x2#0 ← (word~) sin16s::$6
  (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  (word) mulu16_sel::v2#1 ← (word) sin16s::x1#1
  (byte) mulu16_sel::select#1 ← (number) 1
  call mulu16_sel 
  (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#6
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  (byte) sin16s::isUpper#5 ← phi( sin16s::@7/(byte) sin16s::isUpper#6 )
  (word) sin16s::x1#4 ← phi( sin16s::@7/(word) sin16s::x1#1 )
  (word) mulu16_sel::return#8 ← phi( sin16s::@7/(word) mulu16_sel::return#1 )
  (word~) sin16s::$7 ← (word) mulu16_sel::return#8
  (word) sin16s::x3#0 ← (word~) sin16s::$7
  (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  (word) mulu16_sel::v2#2 ← (number) $10000/(number) 6
  (byte) mulu16_sel::select#2 ← (number) 1
  call mulu16_sel 
  (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#6
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  (byte) sin16s::isUpper#4 ← phi( sin16s::@8/(byte) sin16s::isUpper#5 )
  (word) sin16s::x3#1 ← phi( sin16s::@8/(word) sin16s::x3#0 )
  (word) sin16s::x1#2 ← phi( sin16s::@8/(word) sin16s::x1#4 )
  (word) mulu16_sel::return#9 ← phi( sin16s::@8/(word) mulu16_sel::return#2 )
  (word~) sin16s::$8 ← (word) mulu16_sel::return#9
  (word) sin16s::x3_6#0 ← (word~) sin16s::$8
  (word~) sin16s::$9 ← (word) sin16s::x1#2 - (word) sin16s::x3_6#0
  (word) sin16s::usinx#0 ← (word~) sin16s::$9
  (word) mulu16_sel::v1#3 ← (word) sin16s::x3#1
  (word) mulu16_sel::v2#3 ← (word) sin16s::x1#2
  (byte) mulu16_sel::select#3 ← (number) 0
  call mulu16_sel 
  (word) mulu16_sel::return#3 ← (word) mulu16_sel::return#6
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  (byte) sin16s::isUpper#3 ← phi( sin16s::@9/(byte) sin16s::isUpper#4 )
  (word) sin16s::usinx#4 ← phi( sin16s::@9/(word) sin16s::usinx#0 )
  (word) sin16s::x1#3 ← phi( sin16s::@9/(word) sin16s::x1#2 )
  (word) mulu16_sel::return#10 ← phi( sin16s::@9/(word) mulu16_sel::return#3 )
  (word~) sin16s::$10 ← (word) mulu16_sel::return#10
  (word) sin16s::x4#0 ← (word~) sin16s::$10
  (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  (word) mulu16_sel::v2#4 ← (word) sin16s::x1#3
  (byte) mulu16_sel::select#4 ← (number) 0
  call mulu16_sel 
  (word) mulu16_sel::return#4 ← (word) mulu16_sel::return#6
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  (byte) sin16s::isUpper#2 ← phi( sin16s::@10/(byte) sin16s::isUpper#3 )
  (word) sin16s::usinx#2 ← phi( sin16s::@10/(word) sin16s::usinx#4 )
  (word) mulu16_sel::return#11 ← phi( sin16s::@10/(word) mulu16_sel::return#4 )
  (word~) sin16s::$11 ← (word) mulu16_sel::return#11
  (word) sin16s::x5#0 ← (word~) sin16s::$11
  (word~) sin16s::$12 ← (word) sin16s::x5#0 >> (number) 4
  (word) sin16s::x5_128#0 ← (word~) sin16s::$12
  (word~) sin16s::$13 ← (word) sin16s::usinx#2 + (word) sin16s::x5_128#0
  (word) sin16s::usinx#1 ← (word~) sin16s::$13
  (signed word) sin16s::sinx#0 ← (signed word)(word) sin16s::usinx#1
  (bool~) sin16s::$14 ← (byte) sin16s::isUpper#2 != (number) 0
  (bool~) sin16s::$15 ← ! (bool~) sin16s::$14
  if((bool~) sin16s::$15) goto sin16s::@3
  to:sin16s::@6
sin16s::@5: scope:[sin16s]  from sin16s::@1
  (byte) sin16s::isUpper#9 ← phi( sin16s::@1/(byte) sin16s::isUpper#8 )
  (dword) sin16s::x#7 ← phi( sin16s::@1/(dword) sin16s::x#4 )
  (dword~) sin16s::$17 ← (const nomodify dword) PI_u4f28 - (dword) sin16s::x#7
  (dword) sin16s::x#2 ← (dword~) sin16s::$17
  to:sin16s::@2
sin16s::@3: scope:[sin16s]  from sin16s::@11 sin16s::@6
  (signed word) sin16s::sinx#2 ← phi( sin16s::@11/(signed word) sin16s::sinx#0 sin16s::@6/(signed word) sin16s::sinx#1 )
  (signed word) sin16s::return#1 ← (signed word) sin16s::sinx#2
  to:sin16s::@return
sin16s::@6: scope:[sin16s]  from sin16s::@11
  (word) sin16s::usinx#3 ← phi( sin16s::@11/(word) sin16s::usinx#1 )
  (signed word~) sin16s::$18 ← - (signed word)(word) sin16s::usinx#3
  (signed word) sin16s::sinx#1 ← (signed word~) sin16s::$18
  to:sin16s::@3
sin16s::@return: scope:[sin16s]  from sin16s::@3
  (signed word) sin16s::return#4 ← phi( sin16s::@3/(signed word) sin16s::return#1 )
  (signed word) sin16s::return#2 ← (signed word) sin16s::return#4
  return 
  to:@return

(signed byte()) sin8s((word) sin8s::x)
sin8s: scope:[sin8s]  from sin8s_gen::@2
  (word) sin8s::x#3 ← phi( sin8s_gen::@2/(word) sin8s::x#0 )
  (byte) sin8s::isUpper#0 ← (byte) 0
  (bool~) sin8s::$0 ← (word) sin8s::x#3 >= (const nomodify word) PI_u4f12
  (bool~) sin8s::$1 ← ! (bool~) sin8s::$0
  if((bool~) sin8s::$1) goto sin8s::@1
  to:sin8s::@5
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  (byte) sin8s::isUpper#10 ← phi( sin8s/(byte) sin8s::isUpper#0 sin8s::@5/(byte) sin8s::isUpper#1 )
  (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#3 sin8s::@5/(word) sin8s::x#1 )
  (bool~) sin8s::$2 ← (word) sin8s::x#4 >= (const nomodify word) PI_HALF_u4f12
  (bool~) sin8s::$3 ← ! (bool~) sin8s::$2
  if((bool~) sin8s::$3) goto sin8s::@2
  to:sin8s::@6
sin8s::@5: scope:[sin8s]  from sin8s
  (word) sin8s::x#5 ← phi( sin8s/(word) sin8s::x#3 )
  (word~) sin8s::$18 ← (word) sin8s::x#5 - (const nomodify word) PI_u4f12
  (word) sin8s::x#1 ← (word~) sin8s::$18
  (byte) sin8s::isUpper#1 ← (number) 1
  to:sin8s::@1
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  (byte) sin8s::isUpper#9 ← phi( sin8s::@1/(byte) sin8s::isUpper#10 sin8s::@6/(byte) sin8s::isUpper#11 )
  (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#2 )
  (word~) sin8s::$4 ← (word) sin8s::x#6 << (number) 3
  (byte~) sin8s::$5 ← > (word~) sin8s::$4
  (byte) sin8s::x1#0 ← (byte~) sin8s::$5
  (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0
  (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0
  (byte) mulu8_sel::select#0 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#6
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  (byte) sin8s::isUpper#8 ← phi( sin8s::@2/(byte) sin8s::isUpper#9 )
  (byte) sin8s::x1#1 ← phi( sin8s::@2/(byte) sin8s::x1#0 )
  (byte) mulu8_sel::return#7 ← phi( sin8s::@2/(byte) mulu8_sel::return#0 )
  (byte~) sin8s::$6 ← (byte) mulu8_sel::return#7
  (byte) sin8s::x2#0 ← (byte~) sin8s::$6
  (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0
  (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#1
  (byte) mulu8_sel::select#1 ← (number) 1
  call mulu8_sel 
  (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#6
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  (byte) sin8s::isUpper#7 ← phi( sin8s::@9/(byte) sin8s::isUpper#8 )
  (byte) sin8s::x1#4 ← phi( sin8s::@9/(byte) sin8s::x1#1 )
  (byte) mulu8_sel::return#8 ← phi( sin8s::@9/(byte) mulu8_sel::return#1 )
  (byte~) sin8s::$7 ← (byte) mulu8_sel::return#8
  (byte) sin8s::x3#0 ← (byte~) sin8s::$7
  (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0
  (byte) mulu8_sel::v2#2 ← (const nomodify byte) sin8s::DIV_6
  (byte) mulu8_sel::select#2 ← (number) 1
  call mulu8_sel 
  (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#6
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  (byte) sin8s::isUpper#6 ← phi( sin8s::@10/(byte) sin8s::isUpper#7 )
  (byte) sin8s::x3#1 ← phi( sin8s::@10/(byte) sin8s::x3#0 )
  (byte) sin8s::x1#2 ← phi( sin8s::@10/(byte) sin8s::x1#4 )
  (byte) mulu8_sel::return#9 ← phi( sin8s::@10/(byte) mulu8_sel::return#2 )
  (byte~) sin8s::$8 ← (byte) mulu8_sel::return#9
  (byte) sin8s::x3_6#0 ← (byte~) sin8s::$8
  (byte~) sin8s::$9 ← (byte) sin8s::x1#2 - (byte) sin8s::x3_6#0
  (byte) sin8s::usinx#0 ← (byte~) sin8s::$9
  (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#1
  (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#2
  (byte) mulu8_sel::select#3 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#3 ← (byte) mulu8_sel::return#6
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  (byte) sin8s::isUpper#5 ← phi( sin8s::@11/(byte) sin8s::isUpper#6 )
  (byte) sin8s::usinx#7 ← phi( sin8s::@11/(byte) sin8s::usinx#0 )
  (byte) sin8s::x1#3 ← phi( sin8s::@11/(byte) sin8s::x1#2 )
  (byte) mulu8_sel::return#10 ← phi( sin8s::@11/(byte) mulu8_sel::return#3 )
  (byte~) sin8s::$10 ← (byte) mulu8_sel::return#10
  (byte) sin8s::x4#0 ← (byte~) sin8s::$10
  (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0
  (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#3
  (byte) mulu8_sel::select#4 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#4 ← (byte) mulu8_sel::return#6
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  (byte) sin8s::isUpper#3 ← phi( sin8s::@12/(byte) sin8s::isUpper#5 )
  (byte) sin8s::usinx#3 ← phi( sin8s::@12/(byte) sin8s::usinx#7 )
  (byte) mulu8_sel::return#11 ← phi( sin8s::@12/(byte) mulu8_sel::return#4 )
  (byte~) sin8s::$11 ← (byte) mulu8_sel::return#11
  (byte) sin8s::x5#0 ← (byte~) sin8s::$11
  (byte~) sin8s::$12 ← (byte) sin8s::x5#0 >> (number) 4
  (byte) sin8s::x5_128#0 ← (byte~) sin8s::$12
  (byte~) sin8s::$13 ← (byte) sin8s::usinx#3 + (byte) sin8s::x5_128#0
  (byte) sin8s::usinx#1 ← (byte~) sin8s::$13
  (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (number) $80
  (bool~) sin8s::$15 ← ! (bool~) sin8s::$14
  if((bool~) sin8s::$15) goto sin8s::@3
  to:sin8s::@7
sin8s::@6: scope:[sin8s]  from sin8s::@1
  (byte) sin8s::isUpper#11 ← phi( sin8s::@1/(byte) sin8s::isUpper#10 )
  (word) sin8s::x#7 ← phi( sin8s::@1/(word) sin8s::x#4 )
  (word~) sin8s::$19 ← (const nomodify word) PI_u4f12 - (word) sin8s::x#7
  (word) sin8s::x#2 ← (word~) sin8s::$19
  to:sin8s::@2
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  (byte) sin8s::isUpper#2 ← phi( sin8s::@13/(byte) sin8s::isUpper#3 sin8s::@7/(byte) sin8s::isUpper#4 )
  (byte) sin8s::usinx#4 ← phi( sin8s::@13/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 )
  (signed byte) sin8s::sinx#0 ← (signed byte)(byte) sin8s::usinx#4
  (bool~) sin8s::$16 ← (byte) sin8s::isUpper#2 != (number) 0
  (bool~) sin8s::$17 ← ! (bool~) sin8s::$16
  if((bool~) sin8s::$17) goto sin8s::@4
  to:sin8s::@8
sin8s::@7: scope:[sin8s]  from sin8s::@13
  (byte) sin8s::isUpper#4 ← phi( sin8s::@13/(byte) sin8s::isUpper#3 )
  (byte) sin8s::usinx#5 ← phi( sin8s::@13/(byte) sin8s::usinx#1 )
  (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#5
  to:sin8s::@3
sin8s::@4: scope:[sin8s]  from sin8s::@3 sin8s::@8
  (signed byte) sin8s::sinx#2 ← phi( sin8s::@3/(signed byte) sin8s::sinx#0 sin8s::@8/(signed byte) sin8s::sinx#1 )
  (signed byte) sin8s::return#1 ← (signed byte) sin8s::sinx#2
  to:sin8s::@return
sin8s::@8: scope:[sin8s]  from sin8s::@3
  (byte) sin8s::usinx#6 ← phi( sin8s::@3/(byte) sin8s::usinx#4 )
  (signed byte~) sin8s::$20 ← - (signed byte)(byte) sin8s::usinx#6
  (signed byte) sin8s::sinx#1 ← (signed byte~) sin8s::$20
  to:sin8s::@4
sin8s::@return: scope:[sin8s]  from sin8s::@4
  (signed byte) sin8s::return#4 ← phi( sin8s::@4/(signed byte) sin8s::return#1 )
  (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#4
  return 
  to:@return

(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9
  (byte) mulu16_sel::select#6 ← phi( sin16s::@10/(byte) mulu16_sel::select#4 sin16s::@2/(byte) mulu16_sel::select#0 sin16s::@7/(byte) mulu16_sel::select#1 sin16s::@8/(byte) mulu16_sel::select#2 sin16s::@9/(byte) mulu16_sel::select#3 )
  (word) mulu16_sel::v2#5 ← phi( sin16s::@10/(word) mulu16_sel::v2#4 sin16s::@2/(word) mulu16_sel::v2#0 sin16s::@7/(word) mulu16_sel::v2#1 sin16s::@8/(word) mulu16_sel::v2#2 sin16s::@9/(word) mulu16_sel::v2#3 )
  (word) mulu16_sel::v1#5 ← phi( sin16s::@10/(word) mulu16_sel::v1#4 sin16s::@2/(word) mulu16_sel::v1#0 sin16s::@7/(word) mulu16_sel::v1#1 sin16s::@8/(word) mulu16_sel::v1#2 sin16s::@9/(word) mulu16_sel::v1#3 )
  (word) mul16u::a#1 ← (word) mulu16_sel::v1#5
  (word) mul16u::b#0 ← (word) mulu16_sel::v2#5
  call mul16u 
  (dword) mul16u::return#2 ← (dword) mul16u::return#1
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  (byte) mulu16_sel::select#5 ← phi( mulu16_sel/(byte) mulu16_sel::select#6 )
  (dword) mul16u::return#4 ← phi( mulu16_sel/(dword) mul16u::return#2 )
  (dword~) mulu16_sel::$0 ← (dword) mul16u::return#4
  (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5
  (word~) mulu16_sel::$2 ← > (dword~) mulu16_sel::$1
  (word) mulu16_sel::return#5 ← (word~) mulu16_sel::$2
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  (word) mulu16_sel::return#12 ← phi( mulu16_sel::@1/(word) mulu16_sel::return#5 )
  (word) mulu16_sel::return#6 ← (word) mulu16_sel::return#12
  return 
  to:@return

(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  (byte) mulu8_sel::select#6 ← phi( sin8s::@10/(byte) mulu8_sel::select#2 sin8s::@11/(byte) mulu8_sel::select#3 sin8s::@12/(byte) mulu8_sel::select#4 sin8s::@2/(byte) mulu8_sel::select#0 sin8s::@9/(byte) mulu8_sel::select#1 )
  (byte) mulu8_sel::v2#5 ← phi( sin8s::@10/(byte) mulu8_sel::v2#2 sin8s::@11/(byte) mulu8_sel::v2#3 sin8s::@12/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 sin8s::@9/(byte) mulu8_sel::v2#1 )
  (byte) mulu8_sel::v1#5 ← phi( sin8s::@10/(byte) mulu8_sel::v1#2 sin8s::@11/(byte) mulu8_sel::v1#3 sin8s::@12/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 sin8s::@9/(byte) mulu8_sel::v1#1 )
  (byte) mul8u::a#1 ← (byte) mulu8_sel::v1#5
  (byte) mul8u::b#0 ← (byte) mulu8_sel::v2#5
  call mul8u 
  (word) mul8u::return#2 ← (word) mul8u::return#1
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  (byte) mulu8_sel::select#5 ← phi( mulu8_sel/(byte) mulu8_sel::select#6 )
  (word) mul8u::return#4 ← phi( mulu8_sel/(word) mul8u::return#2 )
  (word~) mulu8_sel::$0 ← (word) mul8u::return#4
  (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5
  (byte~) mulu8_sel::$2 ← > (word~) mulu8_sel::$1
  (byte) mulu8_sel::return#5 ← (byte~) mulu8_sel::$2
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  (byte) mulu8_sel::return#12 ← phi( mulu8_sel::@1/(byte) mulu8_sel::return#5 )
  (byte) mulu8_sel::return#6 ← (byte) mulu8_sel::return#12
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@3/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#2
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@4/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@4/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#5 ← phi( memset::@3/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@3/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from main::@5
  (byte*) print_char_cursor#47 ← phi( main::@5/(byte*) print_char_cursor#14 )
  (byte*) print_str::str#5 ← phi( main::@5/(byte*) print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  (byte*) print_char_cursor#39 ← phi( print_str/(byte*) print_char_cursor#47 print_str::@3/(byte*) print_char_cursor#0 )
  (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#5 print_str::@3/(byte*) print_str::str#0 )
  (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#2)
  if((bool~) print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#38 ← phi( print_str::@1/(byte*) print_char_cursor#39 )
  (byte*) print_str::str#3 ← phi( print_str::@1/(byte*) print_str::str#2 )
  (byte) print_char::ch#0 ← *((byte*) print_str::str#3)
  call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  (byte*) print_str::str#4 ← phi( print_str::@2/(byte*) print_str::str#3 )
  (byte*) print_char_cursor#20 ← phi( print_str::@2/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#0 ← (byte*) print_char_cursor#20
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#4
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#21 ← phi( print_str::@1/(byte*) print_char_cursor#39 )
  (byte*) print_char_cursor#1 ← (byte*) print_char_cursor#21
  return 
  to:@return

(void()) print_schar((signed byte) print_schar::b)
print_schar: scope:[print_schar]  from main::@1
  (byte*) print_char_cursor#48 ← phi( main::@1/(byte*) print_char_cursor#45 )
  (signed byte) print_schar::b#2 ← phi( main::@1/(signed byte) print_schar::b#1 )
  (bool~) print_schar::$0 ← (signed byte) print_schar::b#2 < (number) 0
  if((bool~) print_schar::$0) goto print_schar::@1
  to:print_schar::@3
print_schar::@1: scope:[print_schar]  from print_schar
  (signed byte) print_schar::b#5 ← phi( print_schar/(signed byte) print_schar::b#2 )
  (byte*) print_char_cursor#40 ← phi( print_schar/(byte*) print_char_cursor#48 )
  (byte) print_char::ch#1 ← (byte) '-'
  call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  (signed byte) print_schar::b#3 ← phi( print_schar::@1/(signed byte) print_schar::b#5 )
  (byte*) print_char_cursor#22 ← phi( print_schar::@1/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#22
  (signed byte~) print_schar::$4 ← - (signed byte) print_schar::b#3
  (signed byte) print_schar::b#0 ← (signed byte~) print_schar::$4
  to:print_schar::@2
print_schar::@3: scope:[print_schar]  from print_schar
  (signed byte) print_schar::b#7 ← phi( print_schar/(signed byte) print_schar::b#2 )
  (byte*) print_char_cursor#41 ← phi( print_schar/(byte*) print_char_cursor#48 )
  (byte) print_char::ch#2 ← (byte) ' '
  call print_char 
  to:print_schar::@5
print_schar::@5: scope:[print_schar]  from print_schar::@3
  (signed byte) print_schar::b#6 ← phi( print_schar::@3/(signed byte) print_schar::b#7 )
  (byte*) print_char_cursor#23 ← phi( print_schar::@3/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#23
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@4 print_schar::@5
  (byte*) print_char_cursor#42 ← phi( print_schar::@4/(byte*) print_char_cursor#2 print_schar::@5/(byte*) print_char_cursor#3 )
  (signed byte) print_schar::b#4 ← phi( print_schar::@4/(signed byte) print_schar::b#0 print_schar::@5/(signed byte) print_schar::b#6 )
  (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#4
  call print_uchar 
  to:print_schar::@6
print_schar::@6: scope:[print_schar]  from print_schar::@2
  (byte*) print_char_cursor#24 ← phi( print_schar::@2/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#24
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@6
  (byte*) print_char_cursor#25 ← phi( print_schar::@6/(byte*) print_char_cursor#4 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#25
  return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_schar::@2
  (byte*) print_char_cursor#43 ← phi( print_schar::@2/(byte*) print_char_cursor#42 )
  (byte) print_uchar::b#1 ← phi( print_schar::@2/(byte) print_uchar::b#0 )
  (byte~) print_uchar::$0 ← (byte) print_uchar::b#1 >> (number) 4
  (byte) print_char::ch#3 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  (byte) print_uchar::b#2 ← phi( print_uchar/(byte) print_uchar::b#1 )
  (byte*) print_char_cursor#26 ← phi( print_uchar/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#26
  (number~) print_uchar::$2 ← (byte) print_uchar::b#2 & (number) $f
  (byte) print_char::ch#4 ← *((const to_nomodify byte*) print_hextab + (number~) print_uchar::$2)
  call print_char 
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  (byte*) print_char_cursor#27 ← phi( print_uchar::@1/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#27
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  (byte*) print_char_cursor#28 ← phi( print_uchar::@2/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#28
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_str::@2 print_uchar print_uchar::@1
  (byte*) print_char_cursor#29 ← phi( print_schar::@1/(byte*) print_char_cursor#40 print_schar::@3/(byte*) print_char_cursor#41 print_str::@2/(byte*) print_char_cursor#38 print_uchar/(byte*) print_char_cursor#43 print_uchar::@1/(byte*) print_char_cursor#6 )
  (byte) print_char::ch#5 ← phi( print_schar::@1/(byte) print_char::ch#1 print_schar::@3/(byte) print_char::ch#2 print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#3 print_uchar::@1/(byte) print_char::ch#4 )
  *((byte*) print_char_cursor#29) ← (byte) print_char::ch#5
  (byte*) print_char_cursor#9 ← ++ (byte*) print_char_cursor#29
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#30 ← phi( print_char/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#30
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main::@3
  (byte*) print_screen#2 ← phi( main::@3/(byte*) print_screen#5 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#2
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#3 ← phi( print_cls/(byte*) print_screen#2 )
  (byte*) print_line_cursor#0 ← (byte*) print_screen#3
  (byte*) print_char_cursor#11 ← (byte*) print_line_cursor#0
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#31 ← phi( print_cls::@1/(byte*) print_char_cursor#11 )
  (byte*) print_line_cursor#7 ← phi( print_cls::@1/(byte*) print_line_cursor#0 )
  (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#7
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#31
  return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  (byte*) print_char_cursor#50 ← phi( _start::@1/(byte*) print_char_cursor#46 )
  (byte*) print_line_cursor#17 ← phi( _start::@1/(byte*) print_line_cursor#14 )
  (byte*) print_screen#9 ← phi( _start::@1/(byte*) print_screen#8 )
  (word) rem16u#38 ← phi( _start::@1/(word) rem16u#40 )
  (signed byte*) sin8s_gen::sintab#1 ← (const signed byte*) main::sintabb
  (word) sin8s_gen::wavelength#0 ← (const word) main::wavelength
  call sin8s_gen 
  to:main::@2
main::@2: scope:[main]  from main
  (byte*) print_char_cursor#49 ← phi( main/(byte*) print_char_cursor#50 )
  (byte*) print_line_cursor#15 ← phi( main/(byte*) print_line_cursor#17 )
  (byte*) print_screen#7 ← phi( main/(byte*) print_screen#9 )
  (word) rem16u#27 ← phi( main/(word) rem16u#10 )
  (word) rem16u#11 ← (word) rem16u#27
  (signed word*) sin16s_gen::sintab#1 ← (const signed word*) main::sintabw
  (word) sin16s_gen::wavelength#0 ← (const word) main::wavelength
  call sin16s_gen 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte*) print_char_cursor#44 ← phi( main::@2/(byte*) print_char_cursor#49 )
  (byte*) print_line_cursor#12 ← phi( main::@2/(byte*) print_line_cursor#15 )
  (byte*) print_screen#5 ← phi( main::@2/(byte*) print_screen#7 )
  (word) rem16u#28 ← phi( main::@2/(word) rem16u#8 )
  (word) rem16u#12 ← (word) rem16u#28
  call print_cls 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (word) rem16u#47 ← phi( main::@3/(word) rem16u#12 )
  (byte*) print_char_cursor#32 ← phi( main::@3/(byte*) print_char_cursor#12 )
  (byte*) print_line_cursor#8 ← phi( main::@3/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#8
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#32
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@6
  (byte*) print_line_cursor#18 ← phi( main::@4/(byte*) print_line_cursor#2 main::@6/(byte*) print_line_cursor#13 )
  (word) rem16u#46 ← phi( main::@4/(word) rem16u#47 main::@6/(word) rem16u#39 )
  (byte*) print_char_cursor#45 ← phi( main::@4/(byte*) print_char_cursor#13 main::@6/(byte*) print_char_cursor#15 )
  (byte) main::i#2 ← phi( main::@4/(byte) main::i#0 main::@6/(byte) main::i#1 )
  (signed byte) main::sb#0 ← *((const signed byte*) main::sintabb + (byte) main::i#2)
  (word~) main::$10 ← (word)(byte) main::i#2
  (word~) main::$9 ← (word~) main::$10 * (const byte) SIZEOF_SIGNED_WORD
  (signed word*~) main::$3 ← (const signed word*) main::sintabw + (word~) main::$9
  (signed word) main::sw#0 ← *((signed word*~) main::$3)
  (byte~) main::$4 ← > (signed word) main::sw#0
  (signed byte~) main::$11 ← (signed byte)(byte~) main::$4
  (signed byte~) main::$5 ← (signed byte) main::sb#0 - (signed byte~) main::$11
  (signed byte) main::sd#0 ← (signed byte~) main::$5
  (signed byte) print_schar::b#1 ← (signed byte) main::sd#0
  call print_schar 
  to:main::@5
main::@5: scope:[main]  from main::@1
  (byte*) print_line_cursor#16 ← phi( main::@1/(byte*) print_line_cursor#18 )
  (word) rem16u#43 ← phi( main::@1/(word) rem16u#46 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  (byte*) print_char_cursor#33 ← phi( main::@1/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#33
  (byte*) print_str::str#1 ← (const byte*) main::str
  call print_str 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) print_line_cursor#13 ← phi( main::@5/(byte*) print_line_cursor#16 )
  (word) rem16u#39 ← phi( main::@5/(word) rem16u#43 )
  (byte) main::i#3 ← phi( main::@5/(byte) main::i#4 )
  (byte*) print_char_cursor#34 ← phi( main::@5/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#34
  (byte) main::i#1 ← (byte) main::i#3 + rangenext(0,$bf)
  (bool~) main::$8 ← (byte) main::i#1 != rangelast(0,$bf)
  if((bool~) main::$8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@6
  (byte*) print_char_cursor#35 ← phi( main::@6/(byte*) print_char_cursor#15 )
  (byte*) print_line_cursor#9 ← phi( main::@6/(byte*) print_line_cursor#13 )
  (word) rem16u#29 ← phi( main::@6/(word) rem16u#39 )
  (word) rem16u#13 ← (word) rem16u#29
  (byte*) print_line_cursor#3 ← (byte*) print_line_cursor#9
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#35
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (word) rem16u#14 ← (word) 0
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#4 ← (byte*) print_screen#0
  (byte*) print_char_cursor#17 ← (byte*) print_line_cursor#4
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (byte*) print_screen#8 ← phi( _start::_init1/(byte*) print_screen#0 )
  (byte*) print_char_cursor#46 ← phi( _start::_init1/(byte*) print_char_cursor#17 )
  (byte*) print_line_cursor#14 ← phi( _start::_init1/(byte*) print_line_cursor#4 )
  (word) rem16u#40 ← phi( _start::_init1/(word) rem16u#14 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (byte*) print_screen#6 ← phi( _start::@1/(byte*) print_screen#8 )
  (byte*) print_char_cursor#36 ← phi( _start::@1/(byte*) print_char_cursor#16 )
  (byte*) print_line_cursor#10 ← phi( _start::@1/(byte*) print_line_cursor#3 )
  (word) rem16u#30 ← phi( _start::@1/(word) rem16u#13 )
  (word) rem16u#15 ← (word) rem16u#30
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#10
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#36
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (byte*) print_char_cursor#37 ← phi( _start::@2/(byte*) print_char_cursor#18 )
  (byte*) print_line_cursor#11 ← phi( _start::@2/(byte*) print_line_cursor#5 )
  (byte*) print_screen#4 ← phi( _start::@2/(byte*) print_screen#6 )
  (word) rem16u#31 ← phi( _start::@2/(word) rem16u#15 )
  (word) rem16u#16 ← (word) rem16u#31
  (byte*) print_screen#1 ← (byte*) print_screen#4
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#11
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#37
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify word) PI2_u4f12 = (word) $6488
(const nomodify dword) PI2_u4f28 = (dword) $6487ed51
(const nomodify word) PI_HALF_u4f12 = (word) $1922
(const nomodify dword) PI_HALF_u4f28 = (dword) $1921fb54
(const nomodify word) PI_u4f12 = (word) $3244
(const nomodify dword) PI_u4f28 = (dword) $3243f6a9
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word~) div16u::$0
(label) div16u::@1
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0
(word) div16u::dividend#1
(word) div16u::divisor
(word) div16u::divisor#0
(word) div16u::divisor#1
(word) div16u::return
(word) div16u::return#0
(word) div16u::return#1
(word) div16u::return#2
(word) div16u::return#3
(word) div16u::return#4
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(word~) div32u16u::$0
(word~) div32u16u::$1
(word~) div32u16u::$2
(word~) div32u16u::$3
(label) div32u16u::@1
(label) div32u16u::@2
(label) div32u16u::@return
(dword) div32u16u::dividend
(dword) div32u16u::dividend#0
(dword) div32u16u::dividend#1
(dword) div32u16u::dividend#2
(word) div32u16u::divisor
(word) div32u16u::divisor#0
(word) div32u16u::divisor#1
(word) div32u16u::divisor#2
(dword) div32u16u::quotient
(dword) div32u16u::quotient#0
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0
(word) div32u16u::quotient_hi#1
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0
(dword) div32u16u::return
(dword) div32u16u::return#0
(dword) div32u16u::return#1
(dword) div32u16u::return#2
(dword) div32u16u::return#3
(dword) div32u16u::return#4
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(bool~) divr16u::$11
(number~) divr16u::$2
(bool~) divr16u::$3
(bool~) divr16u::$4
(number~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(bool~) divr16u::$8
(bool~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0
(word) divr16u::dividend#1
(word) divr16u::dividend#2
(word) divr16u::dividend#3
(word) divr16u::dividend#4
(word) divr16u::dividend#5
(word) divr16u::dividend#6
(word) divr16u::dividend#7
(word) divr16u::dividend#8
(word) divr16u::dividend#9
(word) divr16u::divisor
(word) divr16u::divisor#0
(word) divr16u::divisor#1
(word) divr16u::divisor#2
(word) divr16u::divisor#3
(word) divr16u::divisor#4
(word) divr16u::divisor#5
(word) divr16u::divisor#6
(word) divr16u::divisor#7
(word) divr16u::divisor#8
(byte) divr16u::i
(byte) divr16u::i#0
(byte) divr16u::i#1
(byte) divr16u::i#2
(byte) divr16u::i#3
(byte) divr16u::i#4
(byte) divr16u::i#5
(byte) divr16u::i#6
(word) divr16u::quotient
(word) divr16u::quotient#0
(word) divr16u::quotient#1
(word) divr16u::quotient#2
(word) divr16u::quotient#3
(word) divr16u::quotient#4
(word) divr16u::quotient#5
(word) divr16u::quotient#6
(word) divr16u::quotient#7
(word) divr16u::quotient#8
(word) divr16u::rem
(word) divr16u::rem#0
(word) divr16u::rem#1
(word) divr16u::rem#10
(word) divr16u::rem#11
(word) divr16u::rem#12
(word) divr16u::rem#2
(word) divr16u::rem#3
(word) divr16u::rem#4
(word) divr16u::rem#5
(word) divr16u::rem#6
(word) divr16u::rem#7
(word) divr16u::rem#8
(word) divr16u::rem#9
(word) divr16u::return
(word) divr16u::return#0
(word) divr16u::return#1
(word) divr16u::return#2
(word) divr16u::return#3
(word) divr16u::return#4
(word) divr16u::return#5
(word) divr16u::return#6
(word) divr16u::return#7
(word) divr16u::return#8
(void()) main()
(word~) main::$10
(signed byte~) main::$11
(signed word*~) main::$3
(byte~) main::$4
(signed byte~) main::$5
(bool~) main::$8
(word~) main::$9
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(signed byte) main::sb
(signed byte) main::sb#0
(signed byte) main::sd
(signed byte) main::sd#0
(const signed byte*) main::sintabb[(number) $c0]  = { fill( $c0, 0) }
(const signed word*) main::sintabw[(number) $c0]  = { fill( $c0, 0) }
(const byte*) main::str[(byte) 3]  = (byte*) "  "
(signed word) main::sw
(signed word) main::sw#0
(const word) main::wavelength = (word) $c0
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(bool~) mul16u::$0
(number~) mul16u::$1
(bool~) mul16u::$2
(bool~) mul16u::$3
(dword~) mul16u::$4
(word~) mul16u::$5
(dword~) mul16u::$6
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@3
(label) mul16u::@4
(label) mul16u::@5
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::a#0
(word) mul16u::a#1
(word) mul16u::a#2
(word) mul16u::a#3
(word) mul16u::a#4
(word) mul16u::a#5
(word) mul16u::a#6
(word) mul16u::b
(word) mul16u::b#0
(word) mul16u::b#1
(dword) mul16u::mb
(dword) mul16u::mb#0
(dword) mul16u::mb#1
(dword) mul16u::mb#2
(dword) mul16u::mb#3
(dword) mul16u::mb#4
(dword) mul16u::mb#5
(dword) mul16u::res
(dword) mul16u::res#0
(dword) mul16u::res#1
(dword) mul16u::res#2
(dword) mul16u::res#3
(dword) mul16u::res#4
(dword) mul16u::res#5
(dword) mul16u::res#6
(dword) mul16u::return
(dword) mul16u::return#0
(dword) mul16u::return#1
(dword) mul16u::return#2
(dword) mul16u::return#3
(dword) mul16u::return#4
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(bool~) mul8u::$0
(number~) mul8u::$1
(bool~) mul8u::$2
(bool~) mul8u::$3
(word~) mul8u::$4
(byte~) mul8u::$5
(word~) mul8u::$6
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@5
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0
(byte) mul8u::a#1
(byte) mul8u::a#2
(byte) mul8u::a#3
(byte) mul8u::a#4
(byte) mul8u::a#5
(byte) mul8u::a#6
(byte) mul8u::b
(byte) mul8u::b#0
(byte) mul8u::b#1
(word) mul8u::mb
(word) mul8u::mb#0
(word) mul8u::mb#1
(word) mul8u::mb#2
(word) mul8u::mb#3
(word) mul8u::mb#4
(word) mul8u::mb#5
(word) mul8u::res
(word) mul8u::res#0
(word) mul8u::res#1
(word) mul8u::res#2
(word) mul8u::res#3
(word) mul8u::res#4
(word) mul8u::res#5
(word) mul8u::res#6
(word) mul8u::return
(word) mul8u::return#0
(word) mul8u::return#1
(word) mul8u::return#2
(word) mul8u::return#3
(word) mul8u::return#4
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0
(dword~) mulu16_sel::$1
(word~) mulu16_sel::$2
(label) mulu16_sel::@1
(label) mulu16_sel::@return
(word) mulu16_sel::return
(word) mulu16_sel::return#0
(word) mulu16_sel::return#1
(word) mulu16_sel::return#10
(word) mulu16_sel::return#11
(word) mulu16_sel::return#12
(word) mulu16_sel::return#2
(word) mulu16_sel::return#3
(word) mulu16_sel::return#4
(word) mulu16_sel::return#5
(word) mulu16_sel::return#6
(word) mulu16_sel::return#7
(word) mulu16_sel::return#8
(word) mulu16_sel::return#9
(byte) mulu16_sel::select
(byte) mulu16_sel::select#0
(byte) mulu16_sel::select#1
(byte) mulu16_sel::select#2
(byte) mulu16_sel::select#3
(byte) mulu16_sel::select#4
(byte) mulu16_sel::select#5
(byte) mulu16_sel::select#6
(word) mulu16_sel::v1
(word) mulu16_sel::v1#0
(word) mulu16_sel::v1#1
(word) mulu16_sel::v1#2
(word) mulu16_sel::v1#3
(word) mulu16_sel::v1#4
(word) mulu16_sel::v1#5
(word) mulu16_sel::v2
(word) mulu16_sel::v2#0
(word) mulu16_sel::v2#1
(word) mulu16_sel::v2#2
(word) mulu16_sel::v2#3
(word) mulu16_sel::v2#4
(word) mulu16_sel::v2#5
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0
(word~) mulu8_sel::$1
(byte~) mulu8_sel::$2
(label) mulu8_sel::@1
(label) mulu8_sel::@return
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0
(byte) mulu8_sel::return#1
(byte) mulu8_sel::return#10
(byte) mulu8_sel::return#11
(byte) mulu8_sel::return#12
(byte) mulu8_sel::return#2
(byte) mulu8_sel::return#3
(byte) mulu8_sel::return#4
(byte) mulu8_sel::return#5
(byte) mulu8_sel::return#6
(byte) mulu8_sel::return#7
(byte) mulu8_sel::return#8
(byte) mulu8_sel::return#9
(byte) mulu8_sel::select
(byte) mulu8_sel::select#0
(byte) mulu8_sel::select#1
(byte) mulu8_sel::select#2
(byte) mulu8_sel::select#3
(byte) mulu8_sel::select#4
(byte) mulu8_sel::select#5
(byte) mulu8_sel::select#6
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0
(byte) mulu8_sel::v1#1
(byte) mulu8_sel::v1#2
(byte) mulu8_sel::v1#3
(byte) mulu8_sel::v1#4
(byte) mulu8_sel::v1#5
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0
(byte) mulu8_sel::v2#1
(byte) mulu8_sel::v2#2
(byte) mulu8_sel::v2#3
(byte) mulu8_sel::v2#4
(byte) mulu8_sel::v2#5
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte) print_char::ch#5
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#2
(byte*) print_line_cursor#3
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_schar((signed byte) print_schar::b)
(bool~) print_schar::$0
(signed byte~) print_schar::$4
(label) print_schar::@1
(label) print_schar::@2
(label) print_schar::@3
(label) print_schar::@4
(label) print_schar::@5
(label) print_schar::@6
(label) print_schar::@return
(signed byte) print_schar::b
(signed byte) print_schar::b#0
(signed byte) print_schar::b#1
(signed byte) print_schar::b#2
(signed byte) print_schar::b#3
(signed byte) print_schar::b#4
(signed byte) print_schar::b#5
(signed byte) print_schar::b#6
(signed byte) print_schar::b#7
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(byte*) print_screen#9
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$1
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0
(number~) print_uchar::$2
(label) print_uchar::@1
(label) print_uchar::@2
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0
(byte) print_uchar::b#1
(byte) print_uchar::b#2
(word) rem16u
(word) rem16u#0
(word) rem16u#1
(word) rem16u#10
(word) rem16u#11
(word) rem16u#12
(word) rem16u#13
(word) rem16u#14
(word) rem16u#15
(word) rem16u#16
(word) rem16u#17
(word) rem16u#18
(word) rem16u#19
(word) rem16u#2
(word) rem16u#20
(word) rem16u#21
(word) rem16u#22
(word) rem16u#23
(word) rem16u#24
(word) rem16u#25
(word) rem16u#26
(word) rem16u#27
(word) rem16u#28
(word) rem16u#29
(word) rem16u#3
(word) rem16u#30
(word) rem16u#31
(word) rem16u#32
(word) rem16u#33
(word) rem16u#34
(word) rem16u#35
(word) rem16u#36
(word) rem16u#37
(word) rem16u#38
(word) rem16u#39
(word) rem16u#4
(word) rem16u#40
(word) rem16u#41
(word) rem16u#42
(word) rem16u#43
(word) rem16u#44
(word) rem16u#45
(word) rem16u#46
(word) rem16u#47
(word) rem16u#5
(word) rem16u#6
(word) rem16u#7
(word) rem16u#8
(word) rem16u#9
(signed word()) sin16s((dword) sin16s::x)
(bool~) sin16s::$0
(bool~) sin16s::$1
(word~) sin16s::$10
(word~) sin16s::$11
(word~) sin16s::$12
(word~) sin16s::$13
(bool~) sin16s::$14
(bool~) sin16s::$15
(dword~) sin16s::$16
(dword~) sin16s::$17
(signed word~) sin16s::$18
(bool~) sin16s::$2
(bool~) sin16s::$3
(dword~) sin16s::$4
(word~) sin16s::$5
(word~) sin16s::$6
(word~) sin16s::$7
(word~) sin16s::$8
(word~) sin16s::$9
(label) sin16s::@1
(label) sin16s::@10
(label) sin16s::@11
(label) sin16s::@2
(label) sin16s::@3
(label) sin16s::@4
(label) sin16s::@5
(label) sin16s::@6
(label) sin16s::@7
(label) sin16s::@8
(label) sin16s::@9
(label) sin16s::@return
(byte) sin16s::isUpper
(byte) sin16s::isUpper#0
(byte) sin16s::isUpper#1
(byte) sin16s::isUpper#2
(byte) sin16s::isUpper#3
(byte) sin16s::isUpper#4
(byte) sin16s::isUpper#5
(byte) sin16s::isUpper#6
(byte) sin16s::isUpper#7
(byte) sin16s::isUpper#8
(byte) sin16s::isUpper#9
(signed word) sin16s::return
(signed word) sin16s::return#0
(signed word) sin16s::return#1
(signed word) sin16s::return#2
(signed word) sin16s::return#3
(signed word) sin16s::return#4
(signed word) sin16s::sinx
(signed word) sin16s::sinx#0
(signed word) sin16s::sinx#1
(signed word) sin16s::sinx#2
(word) sin16s::usinx
(word) sin16s::usinx#0
(word) sin16s::usinx#1
(word) sin16s::usinx#2
(word) sin16s::usinx#3
(word) sin16s::usinx#4
(dword) sin16s::x
(dword) sin16s::x#0
(dword) sin16s::x#1
(dword) sin16s::x#2
(dword) sin16s::x#3
(dword) sin16s::x#4
(dword) sin16s::x#5
(dword) sin16s::x#6
(dword) sin16s::x#7
(word) sin16s::x1
(word) sin16s::x1#0
(word) sin16s::x1#1
(word) sin16s::x1#2
(word) sin16s::x1#3
(word) sin16s::x1#4
(word) sin16s::x2
(word) sin16s::x2#0
(word) sin16s::x3
(word) sin16s::x3#0
(word) sin16s::x3#1
(word) sin16s::x3_6
(word) sin16s::x3_6#0
(word) sin16s::x4
(word) sin16s::x4#0
(word) sin16s::x5
(word) sin16s::x5#0
(word) sin16s::x5_128
(word) sin16s::x5_128#0
(void()) sin16s_gen((signed word*) sin16s_gen::sintab , (word) sin16s_gen::wavelength)
(dword~) sin16s_gen::$0
(bool~) sin16s_gen::$1
(signed word~) sin16s_gen::$2
(dword~) sin16s_gen::$3
(label) sin16s_gen::@1
(label) sin16s_gen::@2
(label) sin16s_gen::@3
(label) sin16s_gen::@4
(label) sin16s_gen::@return
(word) sin16s_gen::i
(word) sin16s_gen::i#0
(word) sin16s_gen::i#1
(word) sin16s_gen::i#2
(word) sin16s_gen::i#3
(word) sin16s_gen::i#4
(signed word*) sin16s_gen::sintab
(signed word*) sin16s_gen::sintab#0
(signed word*) sin16s_gen::sintab#1
(signed word*) sin16s_gen::sintab#2
(signed word*) sin16s_gen::sintab#3
(signed word*) sin16s_gen::sintab#4
(signed word*) sin16s_gen::sintab#5
(signed word*) sin16s_gen::sintab#6
(dword) sin16s_gen::step
(dword) sin16s_gen::step#0
(dword) sin16s_gen::step#1
(dword) sin16s_gen::step#2
(dword) sin16s_gen::step#3
(word) sin16s_gen::wavelength
(word) sin16s_gen::wavelength#0
(word) sin16s_gen::wavelength#1
(word) sin16s_gen::wavelength#2
(word) sin16s_gen::wavelength#3
(word) sin16s_gen::wavelength#4
(word) sin16s_gen::wavelength#5
(dword) sin16s_gen::x
(dword) sin16s_gen::x#0
(dword) sin16s_gen::x#1
(dword) sin16s_gen::x#2
(dword) sin16s_gen::x#3
(dword) sin16s_gen::x#4
(signed byte()) sin8s((word) sin8s::x)
(bool~) sin8s::$0
(bool~) sin8s::$1
(byte~) sin8s::$10
(byte~) sin8s::$11
(byte~) sin8s::$12
(byte~) sin8s::$13
(bool~) sin8s::$14
(bool~) sin8s::$15
(bool~) sin8s::$16
(bool~) sin8s::$17
(word~) sin8s::$18
(word~) sin8s::$19
(bool~) sin8s::$2
(signed byte~) sin8s::$20
(bool~) sin8s::$3
(word~) sin8s::$4
(byte~) sin8s::$5
(byte~) sin8s::$6
(byte~) sin8s::$7
(byte~) sin8s::$8
(byte~) sin8s::$9
(label) sin8s::@1
(label) sin8s::@10
(label) sin8s::@11
(label) sin8s::@12
(label) sin8s::@13
(label) sin8s::@2
(label) sin8s::@3
(label) sin8s::@4
(label) sin8s::@5
(label) sin8s::@6
(label) sin8s::@7
(label) sin8s::@8
(label) sin8s::@9
(label) sin8s::@return
(const nomodify byte) sin8s::DIV_6 = (byte) $2b
(byte) sin8s::isUpper
(byte) sin8s::isUpper#0
(byte) sin8s::isUpper#1
(byte) sin8s::isUpper#10
(byte) sin8s::isUpper#11
(byte) sin8s::isUpper#2
(byte) sin8s::isUpper#3
(byte) sin8s::isUpper#4
(byte) sin8s::isUpper#5
(byte) sin8s::isUpper#6
(byte) sin8s::isUpper#7
(byte) sin8s::isUpper#8
(byte) sin8s::isUpper#9
(signed byte) sin8s::return
(signed byte) sin8s::return#0
(signed byte) sin8s::return#1
(signed byte) sin8s::return#2
(signed byte) sin8s::return#3
(signed byte) sin8s::return#4
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#0
(signed byte) sin8s::sinx#1
(signed byte) sin8s::sinx#2
(byte) sin8s::usinx
(byte) sin8s::usinx#0
(byte) sin8s::usinx#1
(byte) sin8s::usinx#2
(byte) sin8s::usinx#3
(byte) sin8s::usinx#4
(byte) sin8s::usinx#5
(byte) sin8s::usinx#6
(byte) sin8s::usinx#7
(word) sin8s::x
(word) sin8s::x#0
(word) sin8s::x#1
(word) sin8s::x#2
(word) sin8s::x#3
(word) sin8s::x#4
(word) sin8s::x#5
(word) sin8s::x#6
(word) sin8s::x#7
(byte) sin8s::x1
(byte) sin8s::x1#0
(byte) sin8s::x1#1
(byte) sin8s::x1#2
(byte) sin8s::x1#3
(byte) sin8s::x1#4
(byte) sin8s::x2
(byte) sin8s::x2#0
(byte) sin8s::x3
(byte) sin8s::x3#0
(byte) sin8s::x3#1
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0
(byte) sin8s::x4
(byte) sin8s::x4#0
(byte) sin8s::x5
(byte) sin8s::x5#0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0
(void()) sin8s_gen((signed byte*) sin8s_gen::sintab , (word) sin8s_gen::wavelength)
(word~) sin8s_gen::$0
(bool~) sin8s_gen::$1
(signed byte~) sin8s_gen::$2
(word~) sin8s_gen::$3
(label) sin8s_gen::@1
(label) sin8s_gen::@2
(label) sin8s_gen::@3
(label) sin8s_gen::@4
(label) sin8s_gen::@return
(word) sin8s_gen::i
(word) sin8s_gen::i#0
(word) sin8s_gen::i#1
(word) sin8s_gen::i#2
(word) sin8s_gen::i#3
(word) sin8s_gen::i#4
(signed byte*) sin8s_gen::sintab
(signed byte*) sin8s_gen::sintab#0
(signed byte*) sin8s_gen::sintab#1
(signed byte*) sin8s_gen::sintab#2
(signed byte*) sin8s_gen::sintab#3
(signed byte*) sin8s_gen::sintab#4
(signed byte*) sin8s_gen::sintab#5
(signed byte*) sin8s_gen::sintab#6
(word) sin8s_gen::step
(word) sin8s_gen::step#0
(word) sin8s_gen::step#1
(word) sin8s_gen::step#2
(word) sin8s_gen::step#3
(word) sin8s_gen::wavelength
(word) sin8s_gen::wavelength#0
(word) sin8s_gen::wavelength#1
(word) sin8s_gen::wavelength#2
(word) sin8s_gen::wavelength#3
(word) sin8s_gen::wavelength#4
(word) sin8s_gen::wavelength#5
(word) sin8s_gen::x
(word) sin8s_gen::x#0
(word) sin8s_gen::x#1
(word) sin8s_gen::x#2
(word) sin8s_gen::x#3
(word) sin8s_gen::x#4

Fixing inline constructor with div32u16u::$4 ← (word)div32u16u::quotient_hi#1 dw= (word)div32u16u::quotient_lo#0
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) 1 in (word~) divr16u::$0 ← (word) divr16u::rem#6 << (number) 1
Adding number conversion cast (unumber) $80 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
Adding number conversion cast (unumber) divr16u::$2 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) divr16u::$3 ← (unumber~) divr16u::$2 != (number) 0
Adding number conversion cast (unumber) 1 in (word~) divr16u::$6 ← (word) divr16u::dividend#5 << (number) 1
Adding number conversion cast (unumber) 1 in (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
Adding number conversion cast (unumber) 1 in (number~) divr16u::$5 ← (word) divr16u::rem#8 | (number) 1
Adding number conversion cast (unumber) divr16u::$5 in (number~) divr16u::$5 ← (word) divr16u::rem#8 | (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (word) divr16u::rem#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) divr16u::rem#4 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$0 ← (byte) mul8u::a#2 != (number) 0
Adding number conversion cast (unumber) 1 in (number~) mul8u::$1 ← (byte) mul8u::a#3 & (number) 1
Adding number conversion cast (unumber) mul8u::$1 in (number~) mul8u::$1 ← (byte) mul8u::a#3 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$2 ← (unumber~) mul8u::$1 != (number) 0
Adding number conversion cast (unumber) 1 in (byte~) mul8u::$5 ← (byte) mul8u::a#4 >> (number) 1
Adding number conversion cast (unumber) 1 in (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
Adding number conversion cast (unumber) 0 in (bool~) mul16u::$0 ← (word) mul16u::a#2 != (number) 0
Adding number conversion cast (unumber) 1 in (number~) mul16u::$1 ← (word) mul16u::a#3 & (number) 1
Adding number conversion cast (unumber) mul16u::$1 in (number~) mul16u::$1 ← (word) mul16u::a#3 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) mul16u::$2 ← (unumber~) mul16u::$1 != (number) 0
Adding number conversion cast (unumber) 1 in (word~) mul16u::$5 ← (word) mul16u::a#4 >> (number) 1
Adding number conversion cast (unumber) 1 in (dword~) mul16u::$6 ← (dword) mul16u::mb#2 << (number) 1
Adding number conversion cast (unumber) 1 in (byte) sin16s::isUpper#1 ← (number) 1
Adding number conversion cast (unumber) 3 in (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (number) 3
Adding number conversion cast (unumber) 0 in (byte) mulu16_sel::select#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) mulu16_sel::select#1 ← (number) 1
Adding number conversion cast (unumber) $10000/6 in (word) mulu16_sel::v2#2 ← (number) $10000/(number) 6
Adding number conversion cast (unumber) 1 in (byte) mulu16_sel::select#2 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) mulu16_sel::select#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) mulu16_sel::select#4 ← (number) 0
Adding number conversion cast (unumber) 4 in (word~) sin16s::$12 ← (word) sin16s::x5#0 >> (number) 4
Adding number conversion cast (unumber) 0 in (bool~) sin16s::$14 ← (byte) sin16s::isUpper#2 != (number) 0
Adding number conversion cast (unumber) 1 in (byte) sin8s::isUpper#1 ← (number) 1
Adding number conversion cast (unumber) 3 in (word~) sin8s::$4 ← (word) sin8s::x#6 << (number) 3
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) mulu8_sel::select#1 ← (number) 1
Adding number conversion cast (unumber) 1 in (byte) mulu8_sel::select#2 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#4 ← (number) 0
Adding number conversion cast (unumber) 4 in (byte~) sin8s::$12 ← (byte) sin8s::x5#0 >> (number) 4
Adding number conversion cast (unumber) $80 in (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (number) $80
Adding number conversion cast (unumber) 0 in (bool~) sin8s::$16 ← (byte) sin8s::isUpper#2 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#2)
Adding number conversion cast (snumber) 0 in (bool~) print_schar::$0 ← (signed byte) print_schar::b#2 < (number) 0
Adding number conversion cast (unumber) 4 in (byte~) print_uchar::$0 ← (byte) print_uchar::b#1 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_uchar::$2 ← (byte) print_uchar::b#2 & (number) $f
Adding number conversion cast (unumber) print_uchar::$2 in (number~) print_uchar::$2 ← (byte) print_uchar::b#2 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (word) divr16u::rem#3 ← (unumber)(number) 0
Inlining cast (word) divr16u::rem#4 ← (unumber)(number) 0
Inlining cast (byte) sin16s::isUpper#1 ← (unumber)(number) 1
Inlining cast (byte) mulu16_sel::select#0 ← (unumber)(number) 0
Inlining cast (byte) mulu16_sel::select#1 ← (unumber)(number) 1
Inlining cast (word) mulu16_sel::v2#2 ← (unumber)(number) $10000/(number) 6
Inlining cast (byte) mulu16_sel::select#2 ← (unumber)(number) 1
Inlining cast (byte) mulu16_sel::select#3 ← (unumber)(number) 0
Inlining cast (byte) mulu16_sel::select#4 ← (unumber)(number) 0
Inlining cast (byte) sin8s::isUpper#1 ← (unumber)(number) 1
Inlining cast (byte) mulu8_sel::select#0 ← (unumber)(number) 0
Inlining cast (byte) mulu8_sel::select#1 ← (unumber)(number) 1
Inlining cast (byte) mulu8_sel::select#2 ← (unumber)(number) 1
Inlining cast (byte) mulu8_sel::select#3 ← (unumber)(number) 0
Inlining cast (byte) mulu8_sel::select#4 ← (unumber)(number) 0
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast (word) div32u16u::quotient_hi#1
Simplifying constant integer cast (word) div32u16u::quotient_lo#0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
Inferred type updated to word in (unumber~) divr16u::$5 ← (word) divr16u::rem#8 | (byte) 1
Inferred type updated to byte in (unumber~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1
Inferred type updated to byte in (unumber~) mul16u::$1 ← (word) mul16u::a#3 & (byte) 1
Inferred type updated to byte in (unumber~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f
Inversing boolean not [9] (bool~) divr16u::$4 ← (byte~) divr16u::$2 == (byte) 0 from [8] (bool~) divr16u::$3 ← (byte~) divr16u::$2 != (byte) 0
Inversing boolean not [17] (bool~) divr16u::$9 ← (word) divr16u::rem#7 < (word) divr16u::divisor#3 from [16] (bool~) divr16u::$8 ← (word) divr16u::rem#7 >= (word) divr16u::divisor#3
Inversing boolean not [88] (bool~) mul8u::$3 ← (byte~) mul8u::$1 == (byte) 0 from [87] (bool~) mul8u::$2 ← (byte~) mul8u::$1 != (byte) 0
Inversing boolean not [112] (bool~) mul16u::$3 ← (byte~) mul16u::$1 == (byte) 0 from [111] (bool~) mul16u::$2 ← (byte~) mul16u::$1 != (byte) 0
Inversing boolean not [186] (bool~) sin16s::$1 ← (dword) sin16s::x#3 < (const nomodify dword) PI_u4f28 from [185] (bool~) sin16s::$0 ← (dword) sin16s::x#3 >= (const nomodify dword) PI_u4f28
Inversing boolean not [190] (bool~) sin16s::$3 ← (dword) sin16s::x#4 < (const nomodify dword) PI_HALF_u4f28 from [189] (bool~) sin16s::$2 ← (dword) sin16s::x#4 >= (const nomodify dword) PI_HALF_u4f28
Inversing boolean not [248] (bool~) sin16s::$15 ← (byte) sin16s::isUpper#2 == (byte) 0 from [247] (bool~) sin16s::$14 ← (byte) sin16s::isUpper#2 != (byte) 0
Inversing boolean not [264] (bool~) sin8s::$1 ← (word) sin8s::x#3 < (const nomodify word) PI_u4f12 from [263] (bool~) sin8s::$0 ← (word) sin8s::x#3 >= (const nomodify word) PI_u4f12
Inversing boolean not [268] (bool~) sin8s::$3 ← (word) sin8s::x#4 < (const nomodify word) PI_HALF_u4f12 from [267] (bool~) sin8s::$2 ← (word) sin8s::x#4 >= (const nomodify word) PI_HALF_u4f12
Inversing boolean not [325] (bool~) sin8s::$15 ← (byte) sin8s::usinx#1 < (byte) $80 from [324] (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (byte) $80
Inversing boolean not [333] (bool~) sin8s::$17 ← (byte) sin8s::isUpper#2 == (byte) 0 from [332] (bool~) sin8s::$16 ← (byte) sin8s::isUpper#2 != (byte) 0
Inversing boolean not [373] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [372] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias divr16u::rem#0 = divr16u::$0 divr16u::rem#8 
Alias divr16u::dividend#0 = divr16u::$6 divr16u::dividend#9 
Alias divr16u::quotient#1 = divr16u::$7 divr16u::quotient#4 
Alias divr16u::dividend#4 = divr16u::dividend#8 
Alias divr16u::quotient#6 = divr16u::quotient#7 
Alias divr16u::divisor#5 = divr16u::divisor#6 
Alias divr16u::i#5 = divr16u::i#6 
Alias divr16u::rem#1 = divr16u::$5 
Alias divr16u::rem#7 = divr16u::rem#9 
Alias divr16u::divisor#3 = divr16u::divisor#4 
Alias divr16u::i#3 = divr16u::i#4 
Alias divr16u::rem#2 = divr16u::$10 
Alias divr16u::rem#10 = divr16u::rem#12 
Alias divr16u::return#0 = divr16u::quotient#5 divr16u::quotient#8 divr16u::return#5 divr16u::return#1 
Alias rem16u#0 = rem16u#17 rem16u#1 
Alias divr16u::return#2 = divr16u::return#6 
Alias rem16u#18 = rem16u#2 rem16u#19 rem16u#3 
Alias div16u::return#0 = div16u::$0 div16u::return#3 div16u::return#1 
Alias divr16u::dividend#2 = div32u16u::$0 
Alias divr16u::return#3 = divr16u::return#7 
Alias div32u16u::dividend#1 = div32u16u::dividend#2 
Alias div32u16u::divisor#1 = div32u16u::divisor#2 
Alias rem16u#20 = rem16u#4 
Alias div32u16u::quotient_hi#0 = div32u16u::$1 div32u16u::quotient_hi#1 
Alias divr16u::dividend#3 = div32u16u::$2 
Alias divr16u::return#4 = divr16u::return#8 
Alias rem16u#21 = rem16u#5 rem16u#22 rem16u#6 
Alias div32u16u::quotient_lo#0 = div32u16u::$3 
Alias div32u16u::return#0 = div32u16u::quotient#0 div32u16u::$4 div32u16u::return#3 div32u16u::return#1 
Alias mul8u::a#2 = mul8u::a#3 mul8u::a#6 
Alias mul8u::mb#3 = mul8u::mb#4 mul8u::mb#5 
Alias mul8u::res#2 = mul8u::res#5 mul8u::res#4 mul8u::return#0 mul8u::res#3 mul8u::return#3 mul8u::return#1 
Alias mul8u::a#0 = mul8u::$5 
Alias mul8u::mb#1 = mul8u::$6 
Alias mul8u::res#1 = mul8u::$4 
Alias mul16u::a#2 = mul16u::a#3 mul16u::a#6 
Alias mul16u::mb#3 = mul16u::mb#4 mul16u::mb#5 
Alias mul16u::res#2 = mul16u::res#5 mul16u::res#4 mul16u::return#0 mul16u::res#3 mul16u::return#3 mul16u::return#1 
Alias mul16u::a#0 = mul16u::$5 
Alias mul16u::mb#1 = mul16u::$6 
Alias mul16u::res#1 = mul16u::$4 
Alias div32u16u::return#2 = div32u16u::return#4 
Alias sin16s_gen::wavelength#1 = sin16s_gen::wavelength#3 
Alias sin16s_gen::sintab#5 = sin16s_gen::sintab#6 
Alias rem16u#23 = rem16u#7 
Alias sin16s_gen::step#0 = sin16s_gen::$0 
Alias sin16s_gen::x#2 = sin16s_gen::x#4 sin16s_gen::x#3 
Alias sin16s_gen::sintab#2 = sin16s_gen::sintab#3 sin16s_gen::sintab#4 
Alias sin16s_gen::step#1 = sin16s_gen::step#2 sin16s_gen::step#3 
Alias sin16s_gen::i#2 = sin16s_gen::i#4 sin16s_gen::i#3 
Alias sin16s_gen::wavelength#2 = sin16s_gen::wavelength#5 sin16s_gen::wavelength#4 
Alias rem16u#24 = rem16u#44 rem16u#35 rem16u#41 rem16u#8 
Alias sin16s::return#0 = sin16s::return#3 
Alias sin16s_gen::x#1 = sin16s_gen::$3 
Alias div16u::return#2 = div16u::return#4 
Alias sin8s_gen::wavelength#1 = sin8s_gen::wavelength#3 
Alias sin8s_gen::sintab#5 = sin8s_gen::sintab#6 
Alias rem16u#25 = rem16u#9 
Alias sin8s_gen::step#0 = sin8s_gen::$0 
Alias sin8s_gen::x#2 = sin8s_gen::x#4 sin8s_gen::x#3 
Alias sin8s_gen::sintab#2 = sin8s_gen::sintab#3 sin8s_gen::sintab#4 
Alias sin8s_gen::step#1 = sin8s_gen::step#2 sin8s_gen::step#3 
Alias sin8s_gen::i#2 = sin8s_gen::i#4 sin8s_gen::i#3 
Alias sin8s_gen::wavelength#2 = sin8s_gen::wavelength#5 sin8s_gen::wavelength#4 
Alias rem16u#10 = rem16u#45 rem16u#37 rem16u#42 rem16u#26 
Alias sin8s::return#0 = sin8s::return#3 
Alias sin8s_gen::x#1 = sin8s_gen::$3 
Alias sin16s::x#3 = sin16s::x#5 
Alias sin16s::x#1 = sin16s::$16 
Alias sin16s::x1#0 = sin16s::$5 sin16s::x1#1 sin16s::x1#4 sin16s::x1#2 sin16s::x1#3 
Alias mulu16_sel::return#0 = mulu16_sel::return#7 
Alias sin16s::isUpper#2 = sin16s::isUpper#6 sin16s::isUpper#7 sin16s::isUpper#5 sin16s::isUpper#4 sin16s::isUpper#3 
Alias sin16s::x2#0 = sin16s::$6 
Alias mulu16_sel::return#1 = mulu16_sel::return#8 
Alias sin16s::x3#0 = sin16s::$7 sin16s::x3#1 
Alias mulu16_sel::return#2 = mulu16_sel::return#9 
Alias sin16s::x3_6#0 = sin16s::$8 
Alias sin16s::usinx#0 = sin16s::$9 sin16s::usinx#4 sin16s::usinx#2 
Alias mulu16_sel::return#10 = mulu16_sel::return#3 
Alias sin16s::x4#0 = sin16s::$10 
Alias mulu16_sel::return#11 = mulu16_sel::return#4 
Alias sin16s::x5#0 = sin16s::$11 
Alias sin16s::x5_128#0 = sin16s::$12 
Alias sin16s::usinx#1 = sin16s::$13 sin16s::usinx#3 
Alias sin16s::x#4 = sin16s::x#7 
Alias sin16s::isUpper#8 = sin16s::isUpper#9 
Alias sin16s::x#2 = sin16s::$17 
Alias sin16s::return#1 = sin16s::sinx#2 sin16s::return#4 sin16s::return#2 
Alias sin16s::sinx#1 = sin16s::$18 
Alias sin8s::x#3 = sin8s::x#5 
Alias sin8s::x#1 = sin8s::$18 
Alias sin8s::x1#0 = sin8s::$5 sin8s::x1#1 sin8s::x1#4 sin8s::x1#2 sin8s::x1#3 
Alias mulu8_sel::return#0 = mulu8_sel::return#7 
Alias sin8s::isUpper#3 = sin8s::isUpper#8 sin8s::isUpper#9 sin8s::isUpper#7 sin8s::isUpper#6 sin8s::isUpper#5 sin8s::isUpper#4 
Alias sin8s::x2#0 = sin8s::$6 
Alias mulu8_sel::return#1 = mulu8_sel::return#8 
Alias sin8s::x3#0 = sin8s::$7 sin8s::x3#1 
Alias mulu8_sel::return#2 = mulu8_sel::return#9 
Alias sin8s::x3_6#0 = sin8s::$8 
Alias sin8s::usinx#0 = sin8s::$9 sin8s::usinx#7 sin8s::usinx#3 
Alias mulu8_sel::return#10 = mulu8_sel::return#3 
Alias sin8s::x4#0 = sin8s::$10 
Alias mulu8_sel::return#11 = mulu8_sel::return#4 
Alias sin8s::x5#0 = sin8s::$11 
Alias sin8s::x5_128#0 = sin8s::$12 
Alias sin8s::usinx#1 = sin8s::$13 sin8s::usinx#5 
Alias sin8s::x#4 = sin8s::x#7 
Alias sin8s::isUpper#10 = sin8s::isUpper#11 
Alias sin8s::x#2 = sin8s::$19 
Alias sin8s::return#1 = sin8s::sinx#2 sin8s::return#4 sin8s::return#2 
Alias sin8s::usinx#4 = sin8s::usinx#6 
Alias sin8s::sinx#1 = sin8s::$20 
Alias mul16u::return#2 = mul16u::return#4 
Alias mulu16_sel::select#5 = mulu16_sel::select#6 
Alias mulu16_sel::return#12 = mulu16_sel::return#5 mulu16_sel::$2 mulu16_sel::return#6 
Alias mul8u::return#2 = mul8u::return#4 
Alias mulu8_sel::select#5 = mulu8_sel::select#6 
Alias mulu8_sel::return#12 = mulu8_sel::return#5 mulu8_sel::$2 mulu8_sel::return#6 
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_str::str#2 = print_str::str#3 print_str::str#4 
Alias print_char_cursor#1 = print_char_cursor#38 print_char_cursor#39 print_char_cursor#21 
Alias print_char_cursor#0 = print_char_cursor#20 
Alias print_char_cursor#40 = print_char_cursor#48 print_char_cursor#41 
Alias print_schar::b#2 = print_schar::b#5 print_schar::b#3 print_schar::b#7 print_schar::b#6 
Alias print_char_cursor#2 = print_char_cursor#22 
Alias print_schar::b#0 = print_schar::$4 
Alias print_char_cursor#23 = print_char_cursor#3 
Alias print_char_cursor#24 = print_char_cursor#4 print_char_cursor#25 print_char_cursor#5 
Alias print_uchar::b#1 = print_uchar::b#2 
Alias print_char_cursor#26 = print_char_cursor#6 
Alias print_char_cursor#27 = print_char_cursor#7 print_char_cursor#28 print_char_cursor#8 
Alias print_char_cursor#10 = print_char_cursor#30 print_char_cursor#9 
Alias print_line_cursor#0 = print_screen#3 print_screen#2 print_char_cursor#11 print_line_cursor#7 print_char_cursor#31 print_line_cursor#1 print_char_cursor#12 
Alias print_screen#5 = print_screen#7 print_screen#9 
Alias print_line_cursor#12 = print_line_cursor#15 print_line_cursor#17 
Alias print_char_cursor#44 = print_char_cursor#49 print_char_cursor#50 
Alias rem16u#11 = rem16u#27 
Alias rem16u#12 = rem16u#28 rem16u#47 
Alias print_line_cursor#2 = print_line_cursor#8 
Alias print_char_cursor#13 = print_char_cursor#32 
Alias main::sd#0 = main::$5 
Alias main::i#2 = main::i#4 main::i#3 
Alias rem16u#13 = rem16u#43 rem16u#46 rem16u#39 rem16u#29 
Alias print_line_cursor#13 = print_line_cursor#16 print_line_cursor#18 print_line_cursor#9 print_line_cursor#3 
Alias print_char_cursor#14 = print_char_cursor#33 
Alias print_char_cursor#15 = print_char_cursor#34 print_char_cursor#35 print_char_cursor#16 
Alias print_screen#0 = print_line_cursor#4 print_char_cursor#17 print_line_cursor#14 print_char_cursor#46 print_screen#8 print_screen#6 print_screen#4 print_screen#1 
Alias rem16u#14 = rem16u#40 
Alias rem16u#15 = rem16u#30 rem16u#31 rem16u#16 
Alias print_line_cursor#10 = print_line_cursor#5 print_line_cursor#11 print_line_cursor#6 
Alias print_char_cursor#18 = print_char_cursor#36 print_char_cursor#37 print_char_cursor#19 
Successful SSA optimization Pass2AliasElimination
Alias divr16u::dividend#4 = divr16u::dividend#5 
Alias divr16u::quotient#3 = divr16u::quotient#6 
Alias divr16u::divisor#3 = divr16u::divisor#5 divr16u::divisor#8 
Alias divr16u::i#2 = divr16u::i#3 divr16u::i#5 
Alias divr16u::dividend#0 = divr16u::dividend#7 
Alias mul8u::a#2 = mul8u::a#4 
Alias mul8u::mb#2 = mul8u::mb#3 
Alias mul16u::a#2 = mul16u::a#4 
Alias mul16u::mb#2 = mul16u::mb#3 
Alias sin16s::isUpper#2 = sin16s::isUpper#8 
Alias sin8s::isUpper#10 = sin8s::isUpper#3 sin8s::isUpper#2 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) divr16u::divisor#3 (word) divr16u::divisor#7
Identical Phi Values (word) div16u::dividend#1 (word) div16u::dividend#0
Identical Phi Values (word) div16u::divisor#1 (word) div16u::divisor#0
Identical Phi Values (word) rem16u#32 (word) rem16u#36
Identical Phi Values (word) rem16u#18 (word) rem16u#0
Identical Phi Values (dword) div32u16u::dividend#1 (dword) div32u16u::dividend#0
Identical Phi Values (word) div32u16u::divisor#1 (word) div32u16u::divisor#0
Identical Phi Values (word) rem16u#33 (word) rem16u#34
Identical Phi Values (word) rem16u#20 (word) rem16u#0
Identical Phi Values (word) rem16u#21 (word) rem16u#0
Identical Phi Values (byte) mul8u::b#1 (byte) mul8u::b#0
Identical Phi Values (byte) mul8u::a#5 (byte) mul8u::a#1
Identical Phi Values (word) mul16u::b#1 (word) mul16u::b#0
Identical Phi Values (word) mul16u::a#5 (word) mul16u::a#1
Identical Phi Values (word) sin16s_gen::wavelength#1 (word) sin16s_gen::wavelength#0
Identical Phi Values (word) rem16u#34 (word) rem16u#11
Identical Phi Values (signed word*) sin16s_gen::sintab#5 (signed word*) sin16s_gen::sintab#1
Identical Phi Values (word) rem16u#23 (word) rem16u#21
Identical Phi Values (word) sin16s_gen::wavelength#2 (word) sin16s_gen::wavelength#1
Identical Phi Values (word) rem16u#24 (word) rem16u#23
Identical Phi Values (dword) sin16s_gen::step#1 (dword) sin16s_gen::step#0
Identical Phi Values (word) sin8s_gen::wavelength#1 (word) sin8s_gen::wavelength#0
Identical Phi Values (word) rem16u#36 (word) rem16u#38
Identical Phi Values (signed byte*) sin8s_gen::sintab#5 (signed byte*) sin8s_gen::sintab#1
Identical Phi Values (word) rem16u#25 (word) rem16u#18
Identical Phi Values (word) sin8s_gen::wavelength#2 (word) sin8s_gen::wavelength#1
Identical Phi Values (word) rem16u#10 (word) rem16u#25
Identical Phi Values (word) sin8s_gen::step#1 (word) sin8s_gen::step#0
Identical Phi Values (dword) sin16s::x#3 (dword) sin16s::x#0
Identical Phi Values (word) sin8s::x#3 (word) sin8s::x#0
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte*) print_str::str#5 (byte*) print_str::str#1
Identical Phi Values (byte*) print_char_cursor#47 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_char_cursor#0 (byte*) print_char_cursor#10
Identical Phi Values (signed byte) print_schar::b#2 (signed byte) print_schar::b#1
Identical Phi Values (byte*) print_char_cursor#40 (byte*) print_char_cursor#45
Identical Phi Values (byte*) print_char_cursor#2 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#24 (byte*) print_char_cursor#27
Identical Phi Values (byte) print_uchar::b#1 (byte) print_uchar::b#0
Identical Phi Values (byte*) print_char_cursor#43 (byte*) print_char_cursor#42
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#27 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_line_cursor#0 (byte*) print_screen#5
Identical Phi Values (word) rem16u#38 (word) rem16u#14
Identical Phi Values (byte*) print_screen#5 (byte*) print_screen#0
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_screen#0
Identical Phi Values (byte*) print_char_cursor#44 (byte*) print_screen#0
Identical Phi Values (word) rem16u#11 (word) rem16u#10
Identical Phi Values (word) rem16u#12 (word) rem16u#24
Identical Phi Values (byte*) print_line_cursor#2 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#13 (byte*) print_line_cursor#0
Identical Phi Values (word) rem16u#13 (word) rem16u#12
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_line_cursor#2
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_char_cursor#24
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_char_cursor#1
Identical Phi Values (word) rem16u#15 (word) rem16u#13
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#13
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_char_cursor#15
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Identical Phi Values (byte*) print_char_cursor#1 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#42 (byte*) print_char_cursor#10
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) divr16u::$4 [8] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
Simple Condition (bool~) divr16u::$9 [13] if((word) divr16u::rem#7<(word) divr16u::divisor#7) goto divr16u::@3
Simple Condition (bool~) divr16u::$11 [18] if((byte) divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition (bool~) mul8u::$0 [54] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2
Simple Condition (bool~) mul8u::$3 [57] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@4
Simple Condition (bool~) mul16u::$0 [68] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2
Simple Condition (bool~) mul16u::$3 [71] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@4
Simple Condition (bool~) sin16s_gen::$1 [88] if((word) sin16s_gen::i#2<(word) sin16s_gen::wavelength#0) goto sin16s_gen::@2
Simple Condition (bool~) sin8s_gen::$1 [109] if((word) sin8s_gen::i#2<(word) sin8s_gen::wavelength#0) goto sin8s_gen::@2
Simple Condition (bool~) sin16s::$1 [122] if((dword) sin16s::x#0<(const nomodify dword) PI_u4f28) goto sin16s::@1
Simple Condition (bool~) sin16s::$3 [125] if((dword) sin16s::x#4<(const nomodify dword) PI_HALF_u4f28) goto sin16s::@2
Simple Condition (bool~) sin16s::$15 [166] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@3
Simple Condition (bool~) sin8s::$1 [174] if((word) sin8s::x#0<(const nomodify word) PI_u4f12) goto sin8s::@1
Simple Condition (bool~) sin8s::$3 [177] if((word) sin8s::x#4<(const nomodify word) PI_HALF_u4f12) goto sin8s::@2
Simple Condition (bool~) sin8s::$15 [217] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3
Simple Condition (bool~) sin8s::$17 [222] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@4
Simple Condition (bool~) memset::$1 [247] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [254] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) print_str::$1 [261] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
Simple Condition (bool~) print_schar::$0 [269] if((signed byte) print_schar::b#1<(signed byte) 0) goto print_schar::@1
Simple Condition (bool~) main::$8 [332] if((byte) main::i#1!=rangelast(0,$bf)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [144] (word) mulu16_sel::v2#2 ← (unumber)(number) $10000/(number) 6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) divr16u::quotient#0 = 0
Constant (const byte) divr16u::i#0 = 0
Constant (const word) divr16u::rem#3 = 0
Constant (const word) divr16u::rem#4 = 0
Constant (const word) mul8u::res#0 = 0
Constant (const dword) mul16u::res#0 = 0
Constant (const dword) div32u16u::dividend#0 = PI2_u4f28
Constant (const dword) sin16s_gen::x#0 = 0
Constant (const word) sin16s_gen::i#0 = 0
Constant (const word) div16u::dividend#0 = PI2_u4f12
Constant (const word) sin8s_gen::x#0 = 0
Constant (const word) sin8s_gen::i#0 = 0
Constant (const byte) sin16s::isUpper#0 = 0
Constant (const byte) sin16s::isUpper#1 = 1
Constant (const byte) mulu16_sel::select#0 = 0
Constant (const byte) mulu16_sel::select#1 = 1
Constant (const word) mulu16_sel::v2#2 = (unumber)$10000/6
Constant (const byte) mulu16_sel::select#2 = 1
Constant (const byte) mulu16_sel::select#3 = 0
Constant (const byte) mulu16_sel::select#4 = 0
Constant (const byte) sin8s::isUpper#0 = 0
Constant (const byte) sin8s::isUpper#1 = 1
Constant (const byte) mulu8_sel::select#0 = 0
Constant (const byte) mulu8_sel::select#1 = 1
Constant (const byte) mulu8_sel::v2#2 = sin8s::DIV_6
Constant (const byte) mulu8_sel::select#2 = 1
Constant (const byte) mulu8_sel::select#3 = 0
Constant (const byte) mulu8_sel::select#4 = 0
Constant (const byte) print_char::ch#1 = '-'
Constant (const byte) print_char::ch#2 = ' '
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const signed byte*) sin8s_gen::sintab#1 = main::sintabb
Constant (const word) sin8s_gen::wavelength#0 = main::wavelength
Constant (const signed word*) sin16s_gen::sintab#1 = main::sintabw
Constant (const word) sin16s_gen::wavelength#0 = main::wavelength
Constant (const byte) main::i#0 = 0
Constant (const byte*) print_str::str#1 = main::str
Constant (const word) rem16u#14 = 0
Constant (const byte*) print_screen#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16u::dividend#1 = div16u::dividend#0
Constant (const word) div32u16u::divisor#0 = sin16s_gen::wavelength#0
Constant (const word) div16u::divisor#0 = sin8s_gen::wavelength#0
Constant (const void*) memset::str#0 = (void*)print_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16u::divisor#0 = div16u::divisor#0
Constant (const word) divr16u::divisor#1 = div32u16u::divisor#0
Constant (const word) divr16u::divisor#2 = div32u16u::divisor#0
Constant (const byte*) memset::$4 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Constant (const void*) memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [247] if((const word) memset::num#0<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [16] divr16u::i#1 ← ++ divr16u::i#2 to ++
Resolved ranged comparison value [18] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to (number) $10
Resolved ranged next value [330] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [332] if(main::i#1!=rangelast(0,$bf)) goto main::@1 to (number) $c0
Eliminating unused constant (const void*) memset::return#2
Eliminating unused constant (const word) rem16u#14
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $10 in [13] if((byte) divr16u::i#1!=(number) $10) goto divr16u::@1
Adding number conversion cast (unumber) $c0 in [231] if((byte) main::i#1!=(number) $c0) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $10
Simplifying constant integer cast $c0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $c0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [22] (word) divr16u::dividend#2 ← > (const dword) div32u16u::dividend#0
Constant right-side identified [26] (word) divr16u::dividend#3 ← < (const dword) div32u16u::dividend#0
Constant right-side identified [182] (byte*) memset::end#0 ← (const byte*) memset::$4 + (const word) memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) divr16u::dividend#2 = >div32u16u::dividend#0
Constant (const word) divr16u::dividend#3 = <div32u16u::dividend#0
Constant (const byte*) memset::end#0 = memset::$4+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [113] (signed word) sin16s::sinx#0 ← (signed word)(word) sin16s::usinx#1 keeping sin16s::usinx#1
Inlining Noop Cast [156] (signed byte) sin8s::sinx#0 ← (signed byte)(byte) sin8s::usinx#4 keeping sin8s::usinx#4
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [222] (signed byte~) main::$11 ← (signed byte)(byte~) main::$4 keeping main::$11
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [218] (word~) main::$9 ← (word~) main::$10 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::rem#4
Inlining constant with var siblings (const word) divr16u::dividend#1
Inlining constant with var siblings (const word) divr16u::divisor#0
Inlining constant with var siblings (const word) divr16u::divisor#1
Inlining constant with var siblings (const word) divr16u::divisor#2
Inlining constant with var siblings (const word) divr16u::dividend#2
Inlining constant with var siblings (const word) divr16u::dividend#3
Inlining constant with var siblings (const word) mul8u::res#0
Inlining constant with var siblings (const dword) mul16u::res#0
Inlining constant with var siblings (const dword) sin16s_gen::x#0
Inlining constant with var siblings (const word) sin16s_gen::i#0
Inlining constant with var siblings (const signed word*) sin16s_gen::sintab#1
Inlining constant with var siblings (const word) sin8s_gen::x#0
Inlining constant with var siblings (const word) sin8s_gen::i#0
Inlining constant with var siblings (const signed byte*) sin8s_gen::sintab#1
Inlining constant with var siblings (const byte) sin16s::isUpper#0
Inlining constant with var siblings (const byte) sin16s::isUpper#1
Inlining constant with var siblings (const byte) sin8s::isUpper#0
Inlining constant with var siblings (const byte) sin8s::isUpper#1
Inlining constant with var siblings (const byte) mulu16_sel::select#0
Inlining constant with var siblings (const byte) mulu16_sel::select#1
Inlining constant with var siblings (const word) mulu16_sel::v2#2
Inlining constant with var siblings (const byte) mulu16_sel::select#2
Inlining constant with var siblings (const byte) mulu16_sel::select#3
Inlining constant with var siblings (const byte) mulu16_sel::select#4
Inlining constant with var siblings (const byte) mulu8_sel::select#0
Inlining constant with var siblings (const byte) mulu8_sel::select#1
Inlining constant with var siblings (const byte) mulu8_sel::v2#2
Inlining constant with var siblings (const byte) mulu8_sel::select#2
Inlining constant with var siblings (const byte) mulu8_sel::select#3
Inlining constant with var siblings (const byte) mulu8_sel::select#4
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte) print_char::ch#2
Inlining constant with var siblings (const byte) main::i#0
Constant inlined divr16u::rem#3 = (byte) 0
Constant inlined divr16u::i#0 = (byte) 0
Constant inlined divr16u::rem#4 = (byte) 0
Constant inlined sin16s_gen::wavelength#0 = (const word) main::wavelength
Constant inlined div32u16u::dividend#0 = (const nomodify dword) PI2_u4f28
Constant inlined sin16s::isUpper#0 = (byte) 0
Constant inlined sin8s::isUpper#1 = (byte) 1
Constant inlined sin8s::isUpper#0 = (byte) 0
Constant inlined sin8s_gen::x#0 = (word) 0
Constant inlined mulu16_sel::select#4 = (byte) 0
Constant inlined divr16u::quotient#0 = (word) 0
Constant inlined mulu16_sel::select#2 = (byte) 1
Constant inlined mulu16_sel::select#3 = (byte) 0
Constant inlined memset::$4 = (byte*)(const void*) memset::str#0
Constant inlined mul16u::res#0 = (dword) 0
Constant inlined mulu16_sel::select#0 = (byte) 0
Constant inlined div16u::divisor#0 = (const word) main::wavelength
Constant inlined sin16s::isUpper#1 = (byte) 1
Constant inlined mulu16_sel::select#1 = (byte) 1
Constant inlined main::i#0 = (byte) 0
Constant inlined mulu8_sel::select#0 = (byte) 0
Constant inlined div16u::dividend#0 = (const nomodify word) PI2_u4f12
Constant inlined divr16u::divisor#1 = (const word) main::wavelength
Constant inlined mulu8_sel::select#2 = (byte) 1
Constant inlined divr16u::divisor#0 = (const word) main::wavelength
Constant inlined mulu8_sel::select#1 = (byte) 1
Constant inlined mulu8_sel::select#4 = (byte) 0
Constant inlined divr16u::divisor#2 = (const word) main::wavelength
Constant inlined mulu8_sel::select#3 = (byte) 0
Constant inlined sin16s_gen::i#0 = (word) 0
Constant inlined divr16u::dividend#1 = (const nomodify word) PI2_u4f12
Constant inlined divr16u::dividend#2 = >(const nomodify dword) PI2_u4f28
Constant inlined divr16u::dividend#3 = <(const nomodify dword) PI2_u4f28
Constant inlined sin16s_gen::sintab#1 = (const signed word*) main::sintabw
Constant inlined print_char::ch#2 = (byte) ' '
Constant inlined mulu8_sel::v2#2 = (const nomodify byte) sin8s::DIV_6
Constant inlined mul8u::res#0 = (word) 0
Constant inlined print_char::ch#1 = (byte) '-'
Constant inlined mulu16_sel::v2#2 = (word)(number) $10000/(number) 6
Constant inlined sin8s_gen::sintab#1 = (const signed byte*) main::sintabb
Constant inlined sin16s_gen::x#0 = (dword) 0
Constant inlined sin8s_gen::wavelength#0 = (const word) main::wavelength
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Constant inlined div32u16u::divisor#0 = (const word) main::wavelength
Constant inlined print_str::str#1 = (const byte*) main::str
Constant inlined sin8s_gen::i#0 = (word) 0
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values (word) divr16u::divisor#7 (const word) main::wavelength
Successful SSA optimization Pass2IdenticalPhiElimination
Added new block during phi lifting divr16u::@7(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@8(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@9(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting mul8u::@6(between mul8u::@2 and mul8u::@4)
Added new block during phi lifting mul16u::@6(between mul16u::@2 and mul16u::@4)
Added new block during phi lifting sin16s::@12(between sin16s and sin16s::@1)
Fixing phi predecessor for sin16s::isUpper#2 to new block ( sin16s -> sin16s::@12 ) during phi lifting.
Added new block during phi lifting sin16s::@13(between sin16s::@1 and sin16s::@2)
Added new block during phi lifting sin16s::@14(between sin16s::@11 and sin16s::@3)
Added new block during phi lifting sin8s::@14(between sin8s and sin8s::@1)
Fixing phi predecessor for sin8s::isUpper#10 to new block ( sin8s -> sin8s::@14 ) during phi lifting.
Added new block during phi lifting sin8s::@15(between sin8s::@1 and sin8s::@2)
Added new block during phi lifting sin8s::@16(between sin8s::@13 and sin8s::@3)
Added new block during phi lifting sin8s::@17(between sin8s::@3 and sin8s::@4)
Added new block during phi lifting main::@7(between main::@6 and main::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of print_str
Adding NOP phi() at start of print_schar::@6
Adding NOP phi() at start of print_uchar::@2
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of sin16s_gen
Adding NOP phi() at start of mul16u::@3
Adding NOP phi() at start of div32u16u
Adding NOP phi() at start of sin8s_gen
Adding NOP phi() at start of mul8u::@3
Adding NOP phi() at start of div16u
CALL GRAPH
Calls in [main] to sin8s_gen:1 sin16s_gen:3 print_cls:5 print_schar:16 print_str:18 
Calls in [print_str] to print_char:31 
Calls in [print_schar] to print_char:40 print_uchar:44 print_char:48 
Calls in [print_uchar] to print_char:55 print_char:60 
Calls in [print_cls] to memset:64 
Calls in [sin16s_gen] to div32u16u:77 sin16s:84 
Calls in [sin16s] to mulu16_sel:108 mulu16_sel:115 mulu16_sel:120 mulu16_sel:128 mulu16_sel:135 
Calls in [mulu16_sel] to mul16u:151 
Calls in [div32u16u] to divr16u:176 divr16u:181 
Calls in [sin8s_gen] to div16u:217 sin8s:224 
Calls in [sin8s] to mulu8_sel:248 mulu8_sel:255 mulu8_sel:260 mulu8_sel:268 mulu8_sel:275 
Calls in [mulu8_sel] to mul8u:296 
Calls in [div16u] to divr16u:321 

Created 45 initial phi equivalence classes
Coalesced [22] main::i#5 ← main::i#1
Coalesced [23] print_char_cursor#56 ← print_char_cursor#10
Coalesced [29] print_char::ch#6 ← print_char::ch#0
Coalesced [30] print_char_cursor#53 ← print_char_cursor#10
Coalesced [33] print_str::str#6 ← print_str::str#0
Coalesced (already) [39] print_char_cursor#52 ← print_char_cursor#45
Coalesced [41] print_schar::b#9 ← print_schar::b#1
Coalesced (already) [47] print_char_cursor#51 ← print_char_cursor#45
Coalesced [50] print_schar::b#8 ← print_schar::b#0
Coalesced [53] print_char::ch#7 ← print_char::ch#3
Coalesced (already) [54] print_char_cursor#54 ← print_char_cursor#10
Coalesced [58] print_char::ch#8 ← print_char::ch#4
Coalesced (already) [59] print_char_cursor#55 ← print_char_cursor#10
Coalesced [75] memset::dst#4 ← memset::dst#1
Coalesced [91] sin16s_gen::i#5 ← sin16s_gen::i#1
Coalesced [92] sin16s_gen::x#5 ← sin16s_gen::x#1
Coalesced [93] sin16s_gen::sintab#7 ← sin16s_gen::sintab#0
Coalesced [96] sin16s::x#9 ← sin16s::x#1
Coalesced [100] sin16s::x#11 ← sin16s::x#2
Coalesced [106] mulu16_sel::v1#7 ← mulu16_sel::v1#0
Coalesced [107] mulu16_sel::v2#7 ← mulu16_sel::v2#0
Coalesced [113] mulu16_sel::v1#8 ← mulu16_sel::v1#1
Coalesced [114] mulu16_sel::v2#8 ← mulu16_sel::v2#1
Coalesced [119] mulu16_sel::v1#9 ← mulu16_sel::v1#2
Coalesced [126] mulu16_sel::v1#10 ← mulu16_sel::v1#3
Coalesced [127] mulu16_sel::v2#9 ← mulu16_sel::v2#3
Coalesced [133] mulu16_sel::v1#6 ← mulu16_sel::v1#4
Coalesced [134] mulu16_sel::v2#6 ← mulu16_sel::v2#4
Coalesced [142] sin16s::return#6 ← sin16s::sinx#1
Coalesced [146] sin16s::x#10 ← sin16s::x#4
Coalesced [147] sin16s::x#8 ← sin16s::x#0
Coalesced [158] mul16u::a#7 ← mul16u::a#1
Coalesced [159] mul16u::mb#6 ← mul16u::mb#0
Coalesced [167] mul16u::res#9 ← mul16u::res#1
Coalesced [171] mul16u::a#8 ← mul16u::a#0
Coalesced [172] mul16u::res#7 ← mul16u::res#6
Coalesced [173] mul16u::mb#7 ← mul16u::mb#1
Coalesced (already) [174] mul16u::res#8 ← mul16u::res#2
Coalesced [180] divr16u::rem#13 ← divr16u::rem#5
Coalesced [187] divr16u::rem#14 ← divr16u::rem#11
Coalesced [188] divr16u::dividend#10 ← divr16u::dividend#6
Coalesced [195] divr16u::rem#17 ← divr16u::rem#1
Coalesced [202] divr16u::rem#19 ← divr16u::rem#2
Coalesced [203] divr16u::return#10 ← divr16u::quotient#2
Coalesced [209] divr16u::rem#15 ← divr16u::rem#10
Coalesced [210] divr16u::dividend#11 ← divr16u::dividend#0
Coalesced [211] divr16u::quotient#9 ← divr16u::return#0
Coalesced [212] divr16u::i#7 ← divr16u::i#1
Coalesced [213] divr16u::rem#18 ← divr16u::rem#7
Coalesced [214] divr16u::return#9 ← divr16u::quotient#1
Coalesced [215] divr16u::rem#16 ← divr16u::rem#0
Coalesced [231] sin8s_gen::i#5 ← sin8s_gen::i#1
Coalesced [232] sin8s_gen::x#5 ← sin8s_gen::x#1
Coalesced [233] sin8s_gen::sintab#7 ← sin8s_gen::sintab#0
Coalesced [236] sin8s::x#9 ← sin8s::x#1
Coalesced [240] sin8s::x#11 ← sin8s::x#2
Coalesced [246] mulu8_sel::v1#9 ← mulu8_sel::v1#0
Coalesced [247] mulu8_sel::v2#8 ← mulu8_sel::v2#0
Coalesced [253] mulu8_sel::v1#10 ← mulu8_sel::v1#1
Coalesced [254] mulu8_sel::v2#9 ← mulu8_sel::v2#1
Coalesced [259] mulu8_sel::v1#6 ← mulu8_sel::v1#2
Coalesced [266] mulu8_sel::v1#7 ← mulu8_sel::v1#3
Coalesced [267] mulu8_sel::v2#6 ← mulu8_sel::v2#3
Coalesced [273] mulu8_sel::v1#8 ← mulu8_sel::v1#4
Coalesced [274] mulu8_sel::v2#7 ← mulu8_sel::v2#4
Coalesced [282] sin8s::usinx#9 ← sin8s::usinx#2
Coalesced [286] sin8s::return#6 ← sin8s::sinx#1
Coalesced [290] sin8s::usinx#8 ← sin8s::usinx#1
Coalesced [291] sin8s::x#10 ← sin8s::x#4
Coalesced [292] sin8s::x#8 ← sin8s::x#0
Coalesced [303] mul8u::a#7 ← mul8u::a#1
Coalesced [304] mul8u::mb#6 ← mul8u::mb#0
Coalesced [312] mul8u::res#9 ← mul8u::res#1
Coalesced [316] mul8u::a#8 ← mul8u::a#0
Coalesced [317] mul8u::res#7 ← mul8u::res#6
Coalesced [318] mul8u::mb#7 ← mul8u::mb#1
Coalesced (already) [319] mul8u::res#8 ← mul8u::res#2
Coalesced down to 35 phi equivalence classes
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@7
Culled Empty Block (label) print_schar::@5
Culled Empty Block (label) print_schar::@6
Culled Empty Block (label) print_uchar::@2
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Culled Empty Block (label) sin16s::@13
Culled Empty Block (label) sin16s::@12
Culled Empty Block (label) mul16u::@3
Culled Empty Block (label) mul16u::@6
Culled Empty Block (label) divr16u::@7
Culled Empty Block (label) divr16u::@9
Culled Empty Block (label) divr16u::@8
Culled Empty Block (label) sin8s::@16
Culled Empty Block (label) sin8s::@15
Culled Empty Block (label) sin8s::@14
Culled Empty Block (label) mul8u::@3
Culled Empty Block (label) mul8u::@6
Renumbering block mul8u::@4 to mul8u::@3
Renumbering block mul8u::@5 to mul8u::@4
Renumbering block mul16u::@4 to mul16u::@3
Renumbering block mul16u::@5 to mul16u::@4
Renumbering block sin16s::@14 to sin16s::@12
Renumbering block sin8s::@17 to sin8s::@14
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of print_str
Adding NOP phi() at start of print_schar::@3
Adding NOP phi() at start of print_schar::@1
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of memset
Adding NOP phi() at start of sin16s_gen
Adding NOP phi() at start of div32u16u
Adding NOP phi() at start of sin8s_gen
Adding NOP phi() at start of div16u

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call sin8s_gen 
  to:main::@2
main::@2: scope:[main]  from main
  [2] phi()
  [3] call sin16s_gen 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  [6] (byte*) print_char_cursor#45 ← phi( main::@3/(const byte*) print_screen#0 main::@5/(byte*) print_char_cursor#10 )
  [6] (byte) main::i#2 ← phi( main::@3/(byte) 0 main::@5/(byte) main::i#1 )
  [7] (signed byte) main::sb#0 ← *((const signed byte*) main::sintabb + (byte) main::i#2)
  [8] (word~) main::$10 ← (word)(byte) main::i#2
  [9] (word~) main::$9 ← (word~) main::$10 << (byte) 1
  [10] (signed word*~) main::$3 ← (const signed word*) main::sintabw + (word~) main::$9
  [11] (signed word) main::sw#0 ← *((signed word*~) main::$3)
  [12] (byte~) main::$11 ← > (signed word) main::sw#0
  [13] (signed byte) main::sd#0 ← (signed byte) main::sb#0 - (signed byte)(byte~) main::$11
  [14] (signed byte) print_schar::b#1 ← (signed byte) main::sd#0
  [15] call print_schar 
  to:main::@4
main::@4: scope:[main]  from main::@1
  [16] phi()
  [17] call print_str 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [18] (byte) main::i#1 ← ++ (byte) main::i#2
  [19] if((byte) main::i#1!=(byte) $c0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  [20] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from main::@4
  [21] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [22] (byte*) print_str::str#2 ← phi( print_str/(const byte*) main::str print_str::@3/(byte*) print_str::str#0 )
  [23] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [24] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [25] (byte) print_char::ch#0 ← *((byte*) print_str::str#2)
  [26] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [27] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_str::@2 print_uchar print_uchar::@1
  [28] (byte*) print_char_cursor#29 ← phi( print_schar::@1/(byte*) print_char_cursor#45 print_schar::@3/(byte*) print_char_cursor#45 print_str::@2/(byte*) print_char_cursor#10 print_uchar/(byte*) print_char_cursor#10 print_uchar::@1/(byte*) print_char_cursor#10 )
  [28] (byte) print_char::ch#5 ← phi( print_schar::@1/(byte) '-' print_schar::@3/(byte) ' ' print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#3 print_uchar::@1/(byte) print_char::ch#4 )
  [29] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#5
  [30] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#29
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [31] return 
  to:@return

(void()) print_schar((signed byte) print_schar::b)
print_schar: scope:[print_schar]  from main::@1
  [32] if((signed byte) print_schar::b#1<(signed byte) 0) goto print_schar::@1
  to:print_schar::@3
print_schar::@3: scope:[print_schar]  from print_schar
  [33] phi()
  [34] call print_char 
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@3 print_schar::@4
  [35] (signed byte) print_schar::b#4 ← phi( print_schar::@4/(signed byte) print_schar::b#0 print_schar::@3/(signed byte) print_schar::b#1 )
  [36] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#4
  [37] call print_uchar 
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@2
  [38] return 
  to:@return
print_schar::@1: scope:[print_schar]  from print_schar
  [39] phi()
  [40] call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  [41] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#1
  to:print_schar::@2

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_schar::@2
  [42] (byte~) print_uchar::$0 ← (byte) print_uchar::b#0 >> (byte) 4
  [43] (byte) print_char::ch#3 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [44] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [45] (byte~) print_uchar::$2 ← (byte) print_uchar::b#0 & (byte) $f
  [46] (byte) print_char::ch#4 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [47] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [48] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main::@3
  [49] phi()
  [50] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [51] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [52] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [53] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [54] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [55] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [56] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [57] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(void()) sin16s_gen((signed word*) sin16s_gen::sintab , (word) sin16s_gen::wavelength)
sin16s_gen: scope:[sin16s_gen]  from main::@2
  [58] phi()
  [59] call div32u16u 
  [60] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
  to:sin16s_gen::@3
sin16s_gen::@3: scope:[sin16s_gen]  from sin16s_gen
  [61] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2
  to:sin16s_gen::@1
sin16s_gen::@1: scope:[sin16s_gen]  from sin16s_gen::@3 sin16s_gen::@4
  [62] (signed word*) sin16s_gen::sintab#2 ← phi( sin16s_gen::@3/(const signed word*) main::sintabw sin16s_gen::@4/(signed word*) sin16s_gen::sintab#0 )
  [62] (dword) sin16s_gen::x#2 ← phi( sin16s_gen::@3/(dword) 0 sin16s_gen::@4/(dword) sin16s_gen::x#1 )
  [62] (word) sin16s_gen::i#2 ← phi( sin16s_gen::@3/(word) 0 sin16s_gen::@4/(word) sin16s_gen::i#1 )
  [63] if((word) sin16s_gen::i#2<(const word) main::wavelength) goto sin16s_gen::@2
  to:sin16s_gen::@return
sin16s_gen::@return: scope:[sin16s_gen]  from sin16s_gen::@1
  [64] return 
  to:@return
sin16s_gen::@2: scope:[sin16s_gen]  from sin16s_gen::@1
  [65] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2
  [66] call sin16s 
  [67] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
  to:sin16s_gen::@4
sin16s_gen::@4: scope:[sin16s_gen]  from sin16s_gen::@2
  [68] (signed word~) sin16s_gen::$2 ← (signed word) sin16s::return#0
  [69] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$2
  [70] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD
  [71] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0
  [72] (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2
  to:sin16s_gen::@1

(signed word()) sin16s((dword) sin16s::x)
sin16s: scope:[sin16s]  from sin16s_gen::@2
  [73] if((dword) sin16s::x#0<(const nomodify dword) PI_u4f28) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [74] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const nomodify dword) PI_u4f28
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [75] (byte) sin16s::isUpper#2 ← phi( sin16s/(byte) 0 sin16s::@4/(byte) 1 )
  [75] (dword) sin16s::x#4 ← phi( sin16s/(dword) sin16s::x#0 sin16s::@4/(dword) sin16s::x#1 )
  [76] if((dword) sin16s::x#4<(const nomodify dword) PI_HALF_u4f28) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [77] (dword) sin16s::x#2 ← (const nomodify dword) PI_u4f28 - (dword) sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [78] (dword) sin16s::x#6 ← phi( sin16s::@1/(dword) sin16s::x#4 sin16s::@5/(dword) sin16s::x#2 )
  [79] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3
  [80] (word) sin16s::x1#0 ← > (dword~) sin16s::$4
  [81] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0
  [82] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0
  [83] call mulu16_sel 
  [84] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  [85] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0
  [86] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  [87] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0
  [88] call mulu16_sel 
  [89] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  [90] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  [91] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  [92] call mulu16_sel 
  [93] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [94] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2
  [95] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0
  [96] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  [97] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0
  [98] call mulu16_sel 
  [99] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [100] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10
  [101] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  [102] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0
  [103] call mulu16_sel 
  [104] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [105] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11
  [106] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4
  [107] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0
  [108] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@11
  [109] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  [110] (signed word) sin16s::return#1 ← phi( sin16s::@12/(signed word) sin16s::return#5 sin16s::@6/(signed word) sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [111] return 
  to:@return
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [112] (signed word) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
  to:sin16s::@3

(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9
  [113] (byte) mulu16_sel::select#5 ← phi( sin16s::@10/(byte) 0 sin16s::@2/(byte) 0 sin16s::@7/(byte) 1 sin16s::@8/(byte) 1 sin16s::@9/(byte) 0 )
  [113] (word) mulu16_sel::v2#5 ← phi( sin16s::@10/(word) mulu16_sel::v2#4 sin16s::@2/(word) mulu16_sel::v2#0 sin16s::@7/(word) mulu16_sel::v2#1 sin16s::@8/(word)(number) $10000/(number) 6 sin16s::@9/(word) mulu16_sel::v2#3 )
  [113] (word) mulu16_sel::v1#5 ← phi( sin16s::@10/(word) mulu16_sel::v1#4 sin16s::@2/(word) mulu16_sel::v1#0 sin16s::@7/(word) mulu16_sel::v1#1 sin16s::@8/(word) mulu16_sel::v1#2 sin16s::@9/(word) mulu16_sel::v1#3 )
  [114] (word) mul16u::a#1 ← (word) mulu16_sel::v1#5
  [115] (word) mul16u::b#0 ← (word) mulu16_sel::v2#5
  [116] call mul16u 
  [117] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  [118] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2
  [119] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5
  [120] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  [121] return 
  to:@return

(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
mul16u: scope:[mul16u]  from mulu16_sel
  [122] (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#0
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [123] (dword) mul16u::mb#2 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@3/(dword) mul16u::mb#1 )
  [123] (dword) mul16u::res#2 ← phi( mul16u/(dword) 0 mul16u::@3/(dword) mul16u::res#6 )
  [123] (word) mul16u::a#2 ← phi( mul16u/(word) mul16u::a#1 mul16u::@3/(word) mul16u::a#0 )
  [124] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [125] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [126] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1
  [127] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [128] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [129] (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#2 mul16u::@4/(dword) mul16u::res#1 )
  [130] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1
  [131] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1
  to:mul16u::@1

(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
div32u16u: scope:[div32u16u]  from sin16s_gen
  [132] phi()
  [133] call divr16u 
  [134] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [135] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#3
  [136] (word) divr16u::rem#5 ← (word) rem16u#0
  [137] call divr16u 
  [138] (word) divr16u::return#4 ← (word) divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [139] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#4
  [140] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [141] return 
  to:@return

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div16u div32u16u div32u16u::@1
  [142] (word) divr16u::dividend#6 ← phi( div16u/(const nomodify word) PI2_u4f12 div32u16u/>(const nomodify dword) PI2_u4f28 div32u16u::@1/<(const nomodify dword) PI2_u4f28 )
  [142] (word) divr16u::rem#11 ← phi( div16u/(byte) 0 div32u16u/(byte) 0 div32u16u::@1/(word) divr16u::rem#5 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [143] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [143] (word) divr16u::quotient#3 ← phi( divr16u/(word) 0 divr16u::@3/(word) divr16u::return#0 )
  [143] (word) divr16u::dividend#4 ← phi( divr16u/(word) divr16u::dividend#6 divr16u::@3/(word) divr16u::dividend#0 )
  [143] (word) divr16u::rem#6 ← phi( divr16u/(word) divr16u::rem#11 divr16u::@3/(word) divr16u::rem#10 )
  [144] (word) divr16u::rem#0 ← (word) divr16u::rem#6 << (byte) 1
  [145] (byte~) divr16u::$1 ← > (word) divr16u::dividend#4
  [146] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [147] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [148] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [149] (word) divr16u::rem#7 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [150] (word) divr16u::dividend#0 ← (word) divr16u::dividend#4 << (byte) 1
  [151] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [152] if((word) divr16u::rem#7<(const word) main::wavelength) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [153] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [154] (word) divr16u::rem#2 ← (word) divr16u::rem#7 - (const word) main::wavelength
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [155] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [155] (word) divr16u::rem#10 ← phi( divr16u::@2/(word) divr16u::rem#7 divr16u::@5/(word) divr16u::rem#2 )
  [156] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [157] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [158] (word) rem16u#0 ← (word) divr16u::rem#10
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [159] return 
  to:@return

(void()) sin8s_gen((signed byte*) sin8s_gen::sintab , (word) sin8s_gen::wavelength)
sin8s_gen: scope:[sin8s_gen]  from main
  [160] phi()
  [161] call div16u 
  [162] (word) div16u::return#2 ← (word) div16u::return#0
  to:sin8s_gen::@3
sin8s_gen::@3: scope:[sin8s_gen]  from sin8s_gen
  [163] (word) sin8s_gen::step#0 ← (word) div16u::return#2
  to:sin8s_gen::@1
sin8s_gen::@1: scope:[sin8s_gen]  from sin8s_gen::@3 sin8s_gen::@4
  [164] (signed byte*) sin8s_gen::sintab#2 ← phi( sin8s_gen::@3/(const signed byte*) main::sintabb sin8s_gen::@4/(signed byte*) sin8s_gen::sintab#0 )
  [164] (word) sin8s_gen::x#2 ← phi( sin8s_gen::@3/(word) 0 sin8s_gen::@4/(word) sin8s_gen::x#1 )
  [164] (word) sin8s_gen::i#2 ← phi( sin8s_gen::@3/(word) 0 sin8s_gen::@4/(word) sin8s_gen::i#1 )
  [165] if((word) sin8s_gen::i#2<(const word) main::wavelength) goto sin8s_gen::@2
  to:sin8s_gen::@return
sin8s_gen::@return: scope:[sin8s_gen]  from sin8s_gen::@1
  [166] return 
  to:@return
sin8s_gen::@2: scope:[sin8s_gen]  from sin8s_gen::@1
  [167] (word) sin8s::x#0 ← (word) sin8s_gen::x#2
  [168] call sin8s 
  [169] (signed byte) sin8s::return#0 ← (signed byte) sin8s::return#1
  to:sin8s_gen::@4
sin8s_gen::@4: scope:[sin8s_gen]  from sin8s_gen::@2
  [170] (signed byte~) sin8s_gen::$2 ← (signed byte) sin8s::return#0
  [171] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$2
  [172] (signed byte*) sin8s_gen::sintab#0 ← ++ (signed byte*) sin8s_gen::sintab#2
  [173] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0
  [174] (word) sin8s_gen::i#1 ← ++ (word) sin8s_gen::i#2
  to:sin8s_gen::@1

(signed byte()) sin8s((word) sin8s::x)
sin8s: scope:[sin8s]  from sin8s_gen::@2
  [175] if((word) sin8s::x#0<(const nomodify word) PI_u4f12) goto sin8s::@1
  to:sin8s::@5
sin8s::@5: scope:[sin8s]  from sin8s
  [176] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const nomodify word) PI_u4f12
  to:sin8s::@1
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  [177] (byte) sin8s::isUpper#10 ← phi( sin8s/(byte) 0 sin8s::@5/(byte) 1 )
  [177] (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#0 sin8s::@5/(word) sin8s::x#1 )
  [178] if((word) sin8s::x#4<(const nomodify word) PI_HALF_u4f12) goto sin8s::@2
  to:sin8s::@6
sin8s::@6: scope:[sin8s]  from sin8s::@1
  [179] (word) sin8s::x#2 ← (const nomodify word) PI_u4f12 - (word) sin8s::x#4
  to:sin8s::@2
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  [180] (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#2 )
  [181] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3
  [182] (byte) sin8s::x1#0 ← > (word~) sin8s::$4
  [183] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0
  [184] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0
  [185] call mulu8_sel 
  [186] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  [187] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
  [188] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0
  [189] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0
  [190] call mulu8_sel 
  [191] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  [192] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1
  [193] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0
  [194] call mulu8_sel 
  [195] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  [196] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
  [197] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0
  [198] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0
  [199] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0
  [200] call mulu8_sel 
  [201] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  [202] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
  [203] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0
  [204] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0
  [205] call mulu8_sel 
  [206] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  [207] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
  [208] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4
  [209] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0
  [210] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3
  to:sin8s::@7
sin8s::@7: scope:[sin8s]  from sin8s::@13
  [211] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1
  to:sin8s::@3
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  [212] (byte) sin8s::usinx#4 ← phi( sin8s::@13/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 )
  [213] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14
  to:sin8s::@8
sin8s::@8: scope:[sin8s]  from sin8s::@3
  [214] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4
sin8s::@4: scope:[sin8s]  from sin8s::@14 sin8s::@8
  [215] (signed byte) sin8s::return#1 ← phi( sin8s::@14/(signed byte) sin8s::return#5 sin8s::@8/(signed byte) sin8s::sinx#1 )
  to:sin8s::@return
sin8s::@return: scope:[sin8s]  from sin8s::@4
  [216] return 
  to:@return
sin8s::@14: scope:[sin8s]  from sin8s::@3
  [217] (signed byte) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4

(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  [218] (byte) mulu8_sel::select#5 ← phi( sin8s::@10/(byte) 1 sin8s::@11/(byte) 0 sin8s::@12/(byte) 0 sin8s::@2/(byte) 0 sin8s::@9/(byte) 1 )
  [218] (byte) mulu8_sel::v2#5 ← phi( sin8s::@10/(const nomodify byte) sin8s::DIV_6 sin8s::@11/(byte) mulu8_sel::v2#3 sin8s::@12/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 sin8s::@9/(byte) mulu8_sel::v2#1 )
  [218] (byte) mulu8_sel::v1#5 ← phi( sin8s::@10/(byte) mulu8_sel::v1#2 sin8s::@11/(byte) mulu8_sel::v1#3 sin8s::@12/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 sin8s::@9/(byte) mulu8_sel::v1#1 )
  [219] (byte) mul8u::a#1 ← (byte) mulu8_sel::v1#5
  [220] (byte) mul8u::b#0 ← (byte) mulu8_sel::v2#5
  [221] call mul8u 
  [222] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  [223] (word~) mulu8_sel::$0 ← (word) mul8u::return#2
  [224] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5
  [225] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  [226] return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from mulu8_sel
  [227] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#0
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [228] (word) mul8u::mb#2 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@3/(word) mul8u::mb#1 )
  [228] (word) mul8u::res#2 ← phi( mul8u/(word) 0 mul8u::@3/(word) mul8u::res#6 )
  [228] (byte) mul8u::a#2 ← phi( mul8u/(byte) mul8u::a#1 mul8u::@3/(byte) mul8u::a#0 )
  [229] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [230] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [231] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1
  [232] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [233] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [234] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [235] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1
  [236] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1

(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
div16u: scope:[div16u]  from sin8s_gen
  [237] phi()
  [238] call divr16u 
  [239] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [240] (word) div16u::return#0 ← (word) divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [241] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(word) div16u::return#0 37.33333333333333
(word) div16u::return#2 22.0
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(dword) div32u16u::dividend
(word) div32u16u::divisor
(dword) div32u16u::quotient
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0 40.4
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0 202.0
(dword) div32u16u::return
(dword) div32u16u::return#0 37.33333333333333
(dword) div32u16u::return#2 22.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 20002.0
(byte~) divr16u::$2 20002.0
(word) divr16u::dividend
(word) divr16u::dividend#0 2500.25
(word) divr16u::dividend#4 4429.142857142857
(word) divr16u::dividend#6 1001.0
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 15001.5
(byte) divr16u::i#2 1538.6153846153845
(word) divr16u::quotient
(word) divr16u::quotient#1 15001.5
(word) divr16u::quotient#2 10001.0
(word) divr16u::quotient#3 2500.25
(word) divr16u::rem
(word) divr16u::rem#0 7500.75
(word) divr16u::rem#1 20002.0
(word) divr16u::rem#10 10334.666666666666
(word) divr16u::rem#11 1102.0
(word) divr16u::rem#2 20002.0
(word) divr16u::rem#5 202.0
(word) divr16u::rem#6 21003.0
(word) divr16u::rem#7 10001.0
(word) divr16u::return
(word) divr16u::return#0 3788.25
(word) divr16u::return#2 202.0
(word) divr16u::return#3 202.0
(word) divr16u::return#4 202.0
(void()) main()
(word~) main::$10 22.0
(byte~) main::$11 11.0
(signed word*~) main::$3 22.0
(word~) main::$9 22.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 2.75
(signed byte) main::sb
(signed byte) main::sb#0 3.6666666666666665
(signed byte) main::sd
(signed byte) main::sd#0 22.0
(signed word) main::sw
(signed word) main::sw#0 22.0
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 2002.0
(byte*) memset::dst#2 1334.6666666666667
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(byte~) mul16u::$1 2.0000002E7
(word) mul16u::a
(word) mul16u::a#0 1.0000001E7
(word) mul16u::a#1 36667.33333333333
(word) mul16u::a#2 6683334.166666666
(word) mul16u::b
(word) mul16u::b#0 10001.0
(dword) mul16u::mb
(dword) mul16u::mb#0 200002.0
(dword) mul16u::mb#1 2.0000002E7
(dword) mul16u::mb#2 4300000.571428571
(dword) mul16u::res
(dword) mul16u::res#1 2.0000002E7
(dword) mul16u::res#2 5001667.333333333
(dword) mul16u::res#6 1.0000001E7
(dword) mul16u::return
(dword) mul16u::return#2 20002.0
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 2.0000002E7
(byte) mul8u::a
(byte) mul8u::a#0 1.0000001E7
(byte) mul8u::a#1 36667.33333333333
(byte) mul8u::a#2 6683334.166666666
(byte) mul8u::b
(byte) mul8u::b#0 10001.0
(word) mul8u::mb
(word) mul8u::mb#0 200002.0
(word) mul8u::mb#1 2.0000002E7
(word) mul8u::mb#2 4300000.571428571
(word) mul8u::res
(word) mul8u::res#1 2.0000002E7
(word) mul8u::res#2 5001667.333333333
(word) mul8u::res#6 1.0000001E7
(word) mul8u::return
(word) mul8u::return#2 20002.0
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0 20002.0
(dword~) mulu16_sel::$1 20002.0
(word) mulu16_sel::return
(word) mulu16_sel::return#0 2002.0
(word) mulu16_sel::return#1 2002.0
(word) mulu16_sel::return#10 2002.0
(word) mulu16_sel::return#11 2002.0
(word) mulu16_sel::return#12 2143.714285714286
(word) mulu16_sel::return#2 2002.0
(byte) mulu16_sel::select
(byte) mulu16_sel::select#5 1666.8333333333333
(word) mulu16_sel::v1
(word) mulu16_sel::v1#0 1001.0
(word) mulu16_sel::v1#1 1001.0
(word) mulu16_sel::v1#2 2002.0
(word) mulu16_sel::v1#3 1001.0
(word) mulu16_sel::v1#4 1001.0
(word) mulu16_sel::v1#5 15006.0
(word) mulu16_sel::v2
(word) mulu16_sel::v2#0 2002.0
(word) mulu16_sel::v2#1 2002.0
(word) mulu16_sel::v2#3 2002.0
(word) mulu16_sel::v2#4 2002.0
(word) mulu16_sel::v2#5 7002.5
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0 20002.0
(word~) mulu8_sel::$1 20002.0
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0 2002.0
(byte) mulu8_sel::return#1 2002.0
(byte) mulu8_sel::return#10 2002.0
(byte) mulu8_sel::return#11 2002.0
(byte) mulu8_sel::return#12 2143.714285714286
(byte) mulu8_sel::return#2 2002.0
(byte) mulu8_sel::select
(byte) mulu8_sel::select#5 1666.8333333333333
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0 1001.0
(byte) mulu8_sel::v1#1 1001.0
(byte) mulu8_sel::v1#2 2002.0
(byte) mulu8_sel::v1#3 1001.0
(byte) mulu8_sel::v1#4 1001.0
(byte) mulu8_sel::v1#5 15006.0
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0 2002.0
(byte) mulu8_sel::v2#1 2002.0
(byte) mulu8_sel::v2#3 2002.0
(byte) mulu8_sel::v2#4 2002.0
(byte) mulu8_sel::v2#5 7002.5
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 20002.0
(byte) print_char::ch#3 2002.0
(byte) print_char::ch#4 2002.0
(byte) print_char::ch#5 112004.0
(byte*) print_char_cursor
(byte*) print_char_cursor#10 4000.535714285714
(byte*) print_char_cursor#29 106103.5
(byte*) print_char_cursor#45 17.75
(void()) print_cls()
(byte*) print_line_cursor
(void()) print_schar((signed byte) print_schar::b)
(signed byte) print_schar::b
(signed byte) print_schar::b#0 202.0
(signed byte) print_schar::b#1 52.33333333333333
(signed byte) print_schar::b#4 202.0
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 20002.0
(byte*) print_str::str#2 10001.0
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 2002.0
(byte~) print_uchar::$2 2002.0
(byte) print_uchar::b
(byte) print_uchar::b#0 525.75
(word) rem16u
(word) rem16u#0 220.39999999999998
(signed word()) sin16s((dword) sin16s::x)
(dword~) sin16s::$4 2002.0
(byte) sin16s::isUpper
(byte) sin16s::isUpper#2 30.333333333333332
(signed word) sin16s::return
(signed word) sin16s::return#0 202.0
(signed word) sin16s::return#1 701.0
(signed word) sin16s::return#5 2002.0
(signed word) sin16s::sinx
(signed word) sin16s::sinx#1 2002.0
(word) sin16s::usinx
(word) sin16s::usinx#0 166.83333333333334
(word) sin16s::usinx#1 500.5
(dword) sin16s::x
(dword) sin16s::x#0 1552.0
(dword) sin16s::x#1 2002.0
(dword) sin16s::x#2 2002.0
(dword) sin16s::x#4 2502.5
(dword) sin16s::x#6 3003.0
(word) sin16s::x1
(word) sin16s::x1#0 318.5
(word) sin16s::x2
(word) sin16s::x2#0 2002.0
(word) sin16s::x3
(word) sin16s::x3#0 500.5
(word) sin16s::x3_6
(word) sin16s::x3_6#0 2002.0
(word) sin16s::x4
(word) sin16s::x4#0 2002.0
(word) sin16s::x5
(word) sin16s::x5#0 2002.0
(word) sin16s::x5_128
(word) sin16s::x5_128#0 2002.0
(void()) sin16s_gen((signed word*) sin16s_gen::sintab , (word) sin16s_gen::wavelength)
(signed word~) sin16s_gen::$2 202.0
(word) sin16s_gen::i
(word) sin16s_gen::i#1 202.0
(word) sin16s_gen::i#2 33.666666666666664
(signed word*) sin16s_gen::sintab
(signed word*) sin16s_gen::sintab#0 67.33333333333333
(signed word*) sin16s_gen::sintab#2 43.285714285714285
(dword) sin16s_gen::step
(dword) sin16s_gen::step#0 10.181818181818182
(word) sin16s_gen::wavelength
(dword) sin16s_gen::x
(dword) sin16s_gen::x#1 101.0
(dword) sin16s_gen::x#2 37.875
(signed byte()) sin8s((word) sin8s::x)
(word~) sin8s::$4 2002.0
(byte) sin8s::isUpper
(byte) sin8s::isUpper#10 27.805555555555557
(signed byte) sin8s::return
(signed byte) sin8s::return#0 202.0
(signed byte) sin8s::return#1 701.0
(signed byte) sin8s::return#5 2002.0
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#1 2002.0
(byte) sin8s::usinx
(byte) sin8s::usinx#0 166.83333333333334
(byte) sin8s::usinx#1 2002.0
(byte) sin8s::usinx#2 2002.0
(byte) sin8s::usinx#4 1001.0
(word) sin8s::x
(word) sin8s::x#0 1552.0
(word) sin8s::x#1 2002.0
(word) sin8s::x#2 2002.0
(word) sin8s::x#4 2502.5
(word) sin8s::x#6 3003.0
(byte) sin8s::x1
(byte) sin8s::x1#0 318.5
(byte) sin8s::x2
(byte) sin8s::x2#0 2002.0
(byte) sin8s::x3
(byte) sin8s::x3#0 500.5
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0 2002.0
(byte) sin8s::x4
(byte) sin8s::x4#0 2002.0
(byte) sin8s::x5
(byte) sin8s::x5#0 2002.0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0 2002.0
(void()) sin8s_gen((signed byte*) sin8s_gen::sintab , (word) sin8s_gen::wavelength)
(signed byte~) sin8s_gen::$2 202.0
(word) sin8s_gen::i
(word) sin8s_gen::i#1 202.0
(word) sin8s_gen::i#2 33.666666666666664
(signed byte*) sin8s_gen::sintab
(signed byte*) sin8s_gen::sintab#0 67.33333333333333
(signed byte*) sin8s_gen::sintab#2 43.285714285714285
(word) sin8s_gen::step
(word) sin8s_gen::step#0 10.181818181818182
(word) sin8s_gen::wavelength
(word) sin8s_gen::x
(word) sin8s_gen::x#1 101.0
(word) sin8s_gen::x#2 37.875

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ print_str::str#2 print_str::str#0 ]
[ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
[ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ]
[ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
[ memset::dst#2 memset::dst#1 ]
[ sin16s_gen::i#2 sin16s_gen::i#1 ]
[ sin16s_gen::x#2 sin16s_gen::x#1 ]
[ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
[ sin16s::isUpper#2 ]
[ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
[ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
[ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ]
[ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ]
[ mulu16_sel::select#5 ]
[ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
[ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ sin8s_gen::i#2 sin8s_gen::i#1 ]
[ sin8s_gen::x#2 sin8s_gen::x#1 ]
[ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
[ mulu8_sel::select#5 ]
[ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Added variable main::sb#0 to live range equivalence class [ main::sb#0 ]
Added variable main::$10 to live range equivalence class [ main::$10 ]
Added variable main::$9 to live range equivalence class [ main::$9 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Added variable main::sw#0 to live range equivalence class [ main::sw#0 ]
Added variable main::$11 to live range equivalence class [ main::$11 ]
Added variable main::sd#0 to live range equivalence class [ main::sd#0 ]
Added variable print_uchar::b#0 to live range equivalence class [ print_uchar::b#0 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Added variable div32u16u::return#2 to live range equivalence class [ div32u16u::return#2 ]
Added variable sin16s_gen::step#0 to live range equivalence class [ sin16s_gen::step#0 ]
Added variable sin16s::return#0 to live range equivalence class [ sin16s::return#0 ]
Added variable sin16s_gen::$2 to live range equivalence class [ sin16s_gen::$2 ]
Added variable sin16s::$4 to live range equivalence class [ sin16s::$4 ]
Added variable sin16s::x1#0 to live range equivalence class [ sin16s::x1#0 ]
Added variable mulu16_sel::return#0 to live range equivalence class [ mulu16_sel::return#0 ]
Added variable sin16s::x2#0 to live range equivalence class [ sin16s::x2#0 ]
Added variable mulu16_sel::return#1 to live range equivalence class [ mulu16_sel::return#1 ]
Added variable sin16s::x3#0 to live range equivalence class [ sin16s::x3#0 ]
Added variable mulu16_sel::return#2 to live range equivalence class [ mulu16_sel::return#2 ]
Added variable sin16s::x3_6#0 to live range equivalence class [ sin16s::x3_6#0 ]
Added variable sin16s::usinx#0 to live range equivalence class [ sin16s::usinx#0 ]
Added variable mulu16_sel::return#10 to live range equivalence class [ mulu16_sel::return#10 ]
Added variable sin16s::x4#0 to live range equivalence class [ sin16s::x4#0 ]
Added variable mulu16_sel::return#11 to live range equivalence class [ mulu16_sel::return#11 ]
Added variable sin16s::x5#0 to live range equivalence class [ sin16s::x5#0 ]
Added variable sin16s::x5_128#0 to live range equivalence class [ sin16s::x5_128#0 ]
Added variable sin16s::usinx#1 to live range equivalence class [ sin16s::usinx#1 ]
Added variable mul16u::b#0 to live range equivalence class [ mul16u::b#0 ]
Added variable mul16u::return#2 to live range equivalence class [ mul16u::return#2 ]
Added variable mulu16_sel::$0 to live range equivalence class [ mulu16_sel::$0 ]
Added variable mulu16_sel::$1 to live range equivalence class [ mulu16_sel::$1 ]
Added variable mulu16_sel::return#12 to live range equivalence class [ mulu16_sel::return#12 ]
Added variable mul16u::$1 to live range equivalence class [ mul16u::$1 ]
Added variable divr16u::return#3 to live range equivalence class [ divr16u::return#3 ]
Added variable div32u16u::quotient_hi#0 to live range equivalence class [ div32u16u::quotient_hi#0 ]
Added variable divr16u::return#4 to live range equivalence class [ divr16u::return#4 ]
Added variable div32u16u::quotient_lo#0 to live range equivalence class [ div32u16u::quotient_lo#0 ]
Added variable div32u16u::return#0 to live range equivalence class [ div32u16u::return#0 ]
Added variable divr16u::$1 to live range equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to live range equivalence class [ divr16u::$2 ]
Added variable rem16u#0 to live range equivalence class [ rem16u#0 ]
Added variable div16u::return#2 to live range equivalence class [ div16u::return#2 ]
Added variable sin8s_gen::step#0 to live range equivalence class [ sin8s_gen::step#0 ]
Added variable sin8s::return#0 to live range equivalence class [ sin8s::return#0 ]
Added variable sin8s_gen::$2 to live range equivalence class [ sin8s_gen::$2 ]
Added variable sin8s::$4 to live range equivalence class [ sin8s::$4 ]
Added variable sin8s::x1#0 to live range equivalence class [ sin8s::x1#0 ]
Added variable mulu8_sel::return#0 to live range equivalence class [ mulu8_sel::return#0 ]
Added variable sin8s::x2#0 to live range equivalence class [ sin8s::x2#0 ]
Added variable mulu8_sel::return#1 to live range equivalence class [ mulu8_sel::return#1 ]
Added variable sin8s::x3#0 to live range equivalence class [ sin8s::x3#0 ]
Added variable mulu8_sel::return#2 to live range equivalence class [ mulu8_sel::return#2 ]
Added variable sin8s::x3_6#0 to live range equivalence class [ sin8s::x3_6#0 ]
Added variable sin8s::usinx#0 to live range equivalence class [ sin8s::usinx#0 ]
Added variable mulu8_sel::return#10 to live range equivalence class [ mulu8_sel::return#10 ]
Added variable sin8s::x4#0 to live range equivalence class [ sin8s::x4#0 ]
Added variable mulu8_sel::return#11 to live range equivalence class [ mulu8_sel::return#11 ]
Added variable sin8s::x5#0 to live range equivalence class [ sin8s::x5#0 ]
Added variable sin8s::x5_128#0 to live range equivalence class [ sin8s::x5_128#0 ]
Added variable mul8u::b#0 to live range equivalence class [ mul8u::b#0 ]
Added variable mul8u::return#2 to live range equivalence class [ mul8u::return#2 ]
Added variable mulu8_sel::$0 to live range equivalence class [ mulu8_sel::$0 ]
Added variable mulu8_sel::$1 to live range equivalence class [ mulu8_sel::$1 ]
Added variable mulu8_sel::return#12 to live range equivalence class [ mulu8_sel::return#12 ]
Added variable mul8u::$1 to live range equivalence class [ mul8u::$1 ]
Added variable divr16u::return#2 to live range equivalence class [ divr16u::return#2 ]
Added variable div16u::return#0 to live range equivalence class [ div16u::return#0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ print_str::str#2 print_str::str#0 ]
[ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
[ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ]
[ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
[ memset::dst#2 memset::dst#1 ]
[ sin16s_gen::i#2 sin16s_gen::i#1 ]
[ sin16s_gen::x#2 sin16s_gen::x#1 ]
[ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
[ sin16s::isUpper#2 ]
[ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
[ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
[ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ]
[ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ]
[ mulu16_sel::select#5 ]
[ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
[ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ sin8s_gen::i#2 sin8s_gen::i#1 ]
[ sin8s_gen::x#2 sin8s_gen::x#1 ]
[ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
[ mulu8_sel::select#5 ]
[ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ main::sb#0 ]
[ main::$10 ]
[ main::$9 ]
[ main::$3 ]
[ main::sw#0 ]
[ main::$11 ]
[ main::sd#0 ]
[ print_uchar::b#0 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
[ div32u16u::return#2 ]
[ sin16s_gen::step#0 ]
[ sin16s::return#0 ]
[ sin16s_gen::$2 ]
[ sin16s::$4 ]
[ sin16s::x1#0 ]
[ mulu16_sel::return#0 ]
[ sin16s::x2#0 ]
[ mulu16_sel::return#1 ]
[ sin16s::x3#0 ]
[ mulu16_sel::return#2 ]
[ sin16s::x3_6#0 ]
[ sin16s::usinx#0 ]
[ mulu16_sel::return#10 ]
[ sin16s::x4#0 ]
[ mulu16_sel::return#11 ]
[ sin16s::x5#0 ]
[ sin16s::x5_128#0 ]
[ sin16s::usinx#1 ]
[ mul16u::b#0 ]
[ mul16u::return#2 ]
[ mulu16_sel::$0 ]
[ mulu16_sel::$1 ]
[ mulu16_sel::return#12 ]
[ mul16u::$1 ]
[ divr16u::return#3 ]
[ div32u16u::quotient_hi#0 ]
[ divr16u::return#4 ]
[ div32u16u::quotient_lo#0 ]
[ div32u16u::return#0 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ rem16u#0 ]
[ div16u::return#2 ]
[ sin8s_gen::step#0 ]
[ sin8s::return#0 ]
[ sin8s_gen::$2 ]
[ sin8s::$4 ]
[ sin8s::x1#0 ]
[ mulu8_sel::return#0 ]
[ sin8s::x2#0 ]
[ mulu8_sel::return#1 ]
[ sin8s::x3#0 ]
[ mulu8_sel::return#2 ]
[ sin8s::x3_6#0 ]
[ sin8s::usinx#0 ]
[ mulu8_sel::return#10 ]
[ sin8s::x4#0 ]
[ mulu8_sel::return#11 ]
[ sin8s::x5#0 ]
[ sin8s::x5_128#0 ]
[ mul8u::b#0 ]
[ mul8u::return#2 ]
[ mulu8_sel::$0 ]
[ mulu8_sel::$1 ]
[ mulu8_sel::return#12 ]
[ mul8u::$1 ]
[ divr16u::return#2 ]
[ div16u::return#0 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:3 [ print_str::str#2 print_str::str#0 ]
Allocated zp[1]:5 [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
Allocated zp[2]:6 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ]
Allocated zp[1]:8 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
Allocated zp[2]:9 [ memset::dst#2 memset::dst#1 ]
Allocated zp[2]:11 [ sin16s_gen::i#2 sin16s_gen::i#1 ]
Allocated zp[4]:13 [ sin16s_gen::x#2 sin16s_gen::x#1 ]
Allocated zp[2]:17 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
Allocated zp[1]:19 [ sin16s::isUpper#2 ]
Allocated zp[4]:20 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
Allocated zp[2]:24 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
Allocated zp[2]:26 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ]
Allocated zp[2]:28 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ]
Allocated zp[1]:30 [ mulu16_sel::select#5 ]
Allocated zp[2]:31 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
Allocated zp[4]:33 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
Allocated zp[4]:37 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated zp[2]:41 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp[2]:43 [ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ]
Allocated zp[2]:45 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp[1]:47 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp[2]:48 [ sin8s_gen::i#2 sin8s_gen::i#1 ]
Allocated zp[2]:50 [ sin8s_gen::x#2 sin8s_gen::x#1 ]
Allocated zp[2]:52 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
Allocated zp[1]:54 [ sin8s::isUpper#10 ]
Allocated zp[2]:55 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ]
Allocated zp[1]:57 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
Allocated zp[1]:58 [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
Allocated zp[1]:59 [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
Allocated zp[1]:60 [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
Allocated zp[1]:61 [ mulu8_sel::select#5 ]
Allocated zp[1]:62 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
Allocated zp[2]:63 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
Allocated zp[2]:65 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Allocated zp[1]:67 [ main::sb#0 ]
Allocated zp[2]:68 [ main::$10 ]
Allocated zp[2]:70 [ main::$9 ]
Allocated zp[2]:72 [ main::$3 ]
Allocated zp[2]:74 [ main::sw#0 ]
Allocated zp[1]:76 [ main::$11 ]
Allocated zp[1]:77 [ main::sd#0 ]
Allocated zp[1]:78 [ print_uchar::b#0 ]
Allocated zp[1]:79 [ print_uchar::$0 ]
Allocated zp[1]:80 [ print_uchar::$2 ]
Allocated zp[4]:81 [ div32u16u::return#2 ]
Allocated zp[4]:85 [ sin16s_gen::step#0 ]
Allocated zp[2]:89 [ sin16s::return#0 ]
Allocated zp[2]:91 [ sin16s_gen::$2 ]
Allocated zp[4]:93 [ sin16s::$4 ]
Allocated zp[2]:97 [ sin16s::x1#0 ]
Allocated zp[2]:99 [ mulu16_sel::return#0 ]
Allocated zp[2]:101 [ sin16s::x2#0 ]
Allocated zp[2]:103 [ mulu16_sel::return#1 ]
Allocated zp[2]:105 [ sin16s::x3#0 ]
Allocated zp[2]:107 [ mulu16_sel::return#2 ]
Allocated zp[2]:109 [ sin16s::x3_6#0 ]
Allocated zp[2]:111 [ sin16s::usinx#0 ]
Allocated zp[2]:113 [ mulu16_sel::return#10 ]
Allocated zp[2]:115 [ sin16s::x4#0 ]
Allocated zp[2]:117 [ mulu16_sel::return#11 ]
Allocated zp[2]:119 [ sin16s::x5#0 ]
Allocated zp[2]:121 [ sin16s::x5_128#0 ]
Allocated zp[2]:123 [ sin16s::usinx#1 ]
Allocated zp[2]:125 [ mul16u::b#0 ]
Allocated zp[4]:127 [ mul16u::return#2 ]
Allocated zp[4]:131 [ mulu16_sel::$0 ]
Allocated zp[4]:135 [ mulu16_sel::$1 ]
Allocated zp[2]:139 [ mulu16_sel::return#12 ]
Allocated zp[1]:141 [ mul16u::$1 ]
Allocated zp[2]:142 [ divr16u::return#3 ]
Allocated zp[2]:144 [ div32u16u::quotient_hi#0 ]
Allocated zp[2]:146 [ divr16u::return#4 ]
Allocated zp[2]:148 [ div32u16u::quotient_lo#0 ]
Allocated zp[4]:150 [ div32u16u::return#0 ]
Allocated zp[1]:154 [ divr16u::$1 ]
Allocated zp[1]:155 [ divr16u::$2 ]
Allocated zp[2]:156 [ rem16u#0 ]
Allocated zp[2]:158 [ div16u::return#2 ]
Allocated zp[2]:160 [ sin8s_gen::step#0 ]
Allocated zp[1]:162 [ sin8s::return#0 ]
Allocated zp[1]:163 [ sin8s_gen::$2 ]
Allocated zp[2]:164 [ sin8s::$4 ]
Allocated zp[1]:166 [ sin8s::x1#0 ]
Allocated zp[1]:167 [ mulu8_sel::return#0 ]
Allocated zp[1]:168 [ sin8s::x2#0 ]
Allocated zp[1]:169 [ mulu8_sel::return#1 ]
Allocated zp[1]:170 [ sin8s::x3#0 ]
Allocated zp[1]:171 [ mulu8_sel::return#2 ]
Allocated zp[1]:172 [ sin8s::x3_6#0 ]
Allocated zp[1]:173 [ sin8s::usinx#0 ]
Allocated zp[1]:174 [ mulu8_sel::return#10 ]
Allocated zp[1]:175 [ sin8s::x4#0 ]
Allocated zp[1]:176 [ mulu8_sel::return#11 ]
Allocated zp[1]:177 [ sin8s::x5#0 ]
Allocated zp[1]:178 [ sin8s::x5_128#0 ]
Allocated zp[1]:179 [ mul8u::b#0 ]
Allocated zp[2]:180 [ mul8u::return#2 ]
Allocated zp[2]:182 [ mulu8_sel::$0 ]
Allocated zp[2]:184 [ mulu8_sel::$1 ]
Allocated zp[1]:186 [ mulu8_sel::return#12 ]
Allocated zp[1]:187 [ mul8u::$1 ]
Allocated zp[2]:188 [ divr16u::return#2 ]
Allocated zp[2]:190 [ div16u::return#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Sinus Generator functions using only multiplication, addition and bit shifting
// Uses a single division for converting the wavelength to a reciprocal.
// Generates sinus using the series sin(x) = x - x^/3! + x^-5! - x^7/7! ...
// Uses the approximation sin(x) = x - x^/6 + x^/128
// Optimization possibility: Use symmetries when generating sinustables. wavelength%2==0 -> mirror symmetry over PI, wavelength%4==0 -> mirror symmetry over PI/2.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .const SIZEOF_SIGNED_WORD = 2
  .label print_screen = $400
  // Remainder after unsigned 16-bit division
  .label rem16u = $9c
  .label print_char_cursor = 6
  // main
main: {
    .label wavelength = $c0
    .label __3 = $48
    .label __9 = $46
    .label __10 = $44
    .label __11 = $4c
    .label sb = $43
    .label sw = $4a
    .label sd = $4d
    .label i = 2
    // [1] call sin8s_gen 
    // [160] phi from main to sin8s_gen [phi:main->sin8s_gen]
  sin8s_gen_from_main:
    jsr sin8s_gen
    // [2] phi from main to main::@2 [phi:main->main::@2]
  __b2_from_main:
    jmp __b2
    // main::@2
  __b2:
    // [3] call sin16s_gen 
    // [58] phi from main::@2 to sin16s_gen [phi:main::@2->sin16s_gen]
  sin16s_gen_from___b2:
    jsr sin16s_gen
    // [4] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [5] call print_cls 
    // [49] phi from main::@3 to print_cls [phi:main::@3->print_cls]
  print_cls_from___b3:
    jsr print_cls
    // [6] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [6] phi (byte*) print_char_cursor#45 = (const byte*) print_screen#0 [phi:main::@3->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [6] phi (byte) main::i#2 = (byte) 0 [phi:main::@3->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [6] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [6] phi (byte*) print_char_cursor#45 = (byte*) print_char_cursor#10 [phi:main::@5->main::@1#0] -- register_copy 
    // [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@5->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [7] (signed byte) main::sb#0 ← *((const signed byte*) main::sintabb + (byte) main::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda sintabb,y
    sta.z sb
    // [8] (word~) main::$10 ← (word)(byte) main::i#2 -- vwuz1=_word_vbuz2 
    lda.z i
    sta.z __10
    lda #0
    sta.z __10+1
    // [9] (word~) main::$9 ← (word~) main::$10 << (byte) 1 -- vwuz1=vwuz2_rol_1 
    lda.z __10
    asl
    sta.z __9
    lda.z __10+1
    rol
    sta.z __9+1
    // [10] (signed word*~) main::$3 ← (const signed word*) main::sintabw + (word~) main::$9 -- pwsz1=pwsc1_plus_vwuz2 
    lda.z __9
    clc
    adc #<sintabw
    sta.z __3
    lda.z __9+1
    adc #>sintabw
    sta.z __3+1
    // [11] (signed word) main::sw#0 ← *((signed word*~) main::$3) -- vwsz1=_deref_pwsz2 
    ldy #0
    lda (__3),y
    sta.z sw
    iny
    lda (__3),y
    sta.z sw+1
    // [12] (byte~) main::$11 ← > (signed word) main::sw#0 -- vbuz1=_hi_vwsz2 
    lda.z sw+1
    sta.z __11
    // [13] (signed byte) main::sd#0 ← (signed byte) main::sb#0 - (signed byte)(byte~) main::$11 -- vbsz1=vbsz2_minus_vbsz3 
    lda.z sb
    sec
    sbc.z __11
    sta.z sd
    // [14] (signed byte) print_schar::b#1 ← (signed byte) main::sd#0 -- vbsz1=vbsz2 
    lda.z sd
    sta.z print_schar.b
    // [15] call print_schar 
    jsr print_schar
    // [16] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  __b4_from___b1:
    jmp __b4
    // main::@4
  __b4:
    // [17] call print_str 
    // [21] phi from main::@4 to print_str [phi:main::@4->print_str]
  print_str_from___b4:
    jsr print_str
    jmp __b5
    // main::@5
  __b5:
    // [18] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [19] if((byte) main::i#1!=(byte) $c0) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c0
    cmp.z i
    bne __b1_from___b5
    jmp __breturn
    // main::@return
  __breturn:
    // [20] return 
    rts
    sintabb: .fill $c0, 0
    sintabw: .fill 2*$c0, 0
    str: .text "  "
    .byte 0
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(3) str)
print_str: {
    .label str = 3
    // [22] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  __b1_from_print_str:
    // [22] phi (byte*) print_str::str#2 = (const byte*) main::str [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<main.str
    sta.z str
    lda #>main.str
    sta.z str+1
    jmp __b1
    // print_str::@1
  __b1:
    // [23] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [24] return 
    rts
    // print_str::@2
  __b2:
    // [25] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z print_char.ch
    // [26] call print_char 
    // [28] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [28] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#10 [phi:print_str::@2->print_char#0] -- register_copy 
    // [28] phi (byte) print_char::ch#5 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [27] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [22] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
  __b1_from___b3:
    // [22] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
}
  // print_char
// Print a single char
// print_char(byte zp(5) ch)
print_char: {
    .label ch = 5
    // [29] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [30] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#29 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [31] return 
    rts
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte zp(8) b)
print_schar: {
    .label b = 8
    // [32] if((signed byte) print_schar::b#1<(signed byte) 0) goto print_schar::@1 -- vbsz1_lt_0_then_la1 
    lda.z b
    bmi __b1_from_print_schar
    // [33] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
  __b3_from_print_schar:
    jmp __b3
    // print_schar::@3
  __b3:
    // [34] call print_char 
    // [28] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
  print_char_from___b3:
    // [28] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#45 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [28] phi (byte) print_char::ch#5 = (byte) ' ' [phi:print_schar::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    // [35] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [35] phi (signed byte) print_schar::b#4 = (signed byte) print_schar::b#1 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    jmp __b2
    // print_schar::@2
  __b2:
    // [36] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#4 -- vbuz1=vbuz2 
    lda.z b
    sta.z print_uchar.b
    // [37] call print_uchar 
    jsr print_uchar
    jmp __breturn
    // print_schar::@return
  __breturn:
    // [38] return 
    rts
    // [39] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
  __b1_from_print_schar:
    jmp __b1
    // print_schar::@1
  __b1:
    // [40] call print_char 
    // [28] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
  print_char_from___b1:
    // [28] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#45 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [28] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_schar::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta.z print_char.ch
    jsr print_char
    jmp __b4
    // print_schar::@4
  __b4:
    // [41] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#1 -- vbsz1=_neg_vbsz1 
    lda.z b
    eor #$ff
    clc
    adc #1
    sta.z b
    jmp __b2_from___b4
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte zp($4e) b)
print_uchar: {
    .label __0 = $4f
    .label __2 = $50
    .label b = $4e
    // [42] (byte~) print_uchar::$0 ← (byte) print_uchar::b#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [43] (byte) print_char::ch#3 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda print_hextab,y
    sta.z print_char.ch
    // [44] call print_char 
  // Table of hexadecimal digits
    // [28] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [28] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#10 [phi:print_uchar->print_char#0] -- register_copy 
    // [28] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [45] (byte~) print_uchar::$2 ← (byte) print_uchar::b#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z __2
    // [46] (byte) print_char::ch#4 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __2
    lda print_hextab,y
    sta.z print_char.ch
    // [47] call print_char 
    // [28] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [28] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#10 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [28] phi (byte) print_char::ch#5 = (byte) print_char::ch#4 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [48] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [50] call memset 
    // [52] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [51] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = 9
    // [53] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [53] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [54] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [55] return 
    rts
    // memset::@2
  __b2:
    // [56] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [57] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [53] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [53] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // sin16s_gen
// Generate signed (large) unsigned int sinus table - on the full -$7fff - $7fff range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_gen(signed word* zp($11) sintab)
sin16s_gen: {
    .label __2 = $5b
    .label step = $55
    .label sintab = $11
    // u[4.28]
    // Iterate over the table
    .label x = $d
    .label i = $b
    // [59] call div32u16u 
    // [132] phi from sin16s_gen to div32u16u [phi:sin16s_gen->div32u16u]
  div32u16u_from_sin16s_gen:
    jsr div32u16u
    // [60] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0 -- vduz1=vduz2 
    lda.z div32u16u.return
    sta.z div32u16u.return_1
    lda.z div32u16u.return+1
    sta.z div32u16u.return_1+1
    lda.z div32u16u.return+2
    sta.z div32u16u.return_1+2
    lda.z div32u16u.return+3
    sta.z div32u16u.return_1+3
    jmp __b3
    // sin16s_gen::@3
  __b3:
    // [61] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2 -- vduz1=vduz2 
    lda.z div32u16u.return_1
    sta.z step
    lda.z div32u16u.return_1+1
    sta.z step+1
    lda.z div32u16u.return_1+2
    sta.z step+2
    lda.z div32u16u.return_1+3
    sta.z step+3
    // [62] phi from sin16s_gen::@3 to sin16s_gen::@1 [phi:sin16s_gen::@3->sin16s_gen::@1]
  __b1_from___b3:
    // [62] phi (signed word*) sin16s_gen::sintab#2 = (const signed word*) main::sintabw [phi:sin16s_gen::@3->sin16s_gen::@1#0] -- pwsz1=pwsc1 
    lda #<main.sintabw
    sta.z sintab
    lda #>main.sintabw
    sta.z sintab+1
    // [62] phi (dword) sin16s_gen::x#2 = (dword) 0 [phi:sin16s_gen::@3->sin16s_gen::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    lda #<0>>$10
    sta.z x+2
    lda #>0>>$10
    sta.z x+3
    // [62] phi (word) sin16s_gen::i#2 = (word) 0 [phi:sin16s_gen::@3->sin16s_gen::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // u[4.28]
    // sin16s_gen::@1
  __b1:
    // [63] if((word) sin16s_gen::i#2<(const word) main::wavelength) goto sin16s_gen::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.wavelength
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.wavelength
    bcc __b2
  !:
    jmp __breturn
    // sin16s_gen::@return
  __breturn:
    // [64] return 
    rts
    // sin16s_gen::@2
  __b2:
    // [65] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2 -- vduz1=vduz2 
    lda.z x
    sta.z sin16s.x
    lda.z x+1
    sta.z sin16s.x+1
    lda.z x+2
    sta.z sin16s.x+2
    lda.z x+3
    sta.z sin16s.x+3
    // [66] call sin16s 
    jsr sin16s
    // [67] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1 -- vwsz1=vwsz2 
    lda.z sin16s.return_1
    sta.z sin16s.return
    lda.z sin16s.return_1+1
    sta.z sin16s.return+1
    jmp __b4
    // sin16s_gen::@4
  __b4:
    // [68] (signed word~) sin16s_gen::$2 ← (signed word) sin16s::return#0 -- vwsz1=vwsz2 
    lda.z sin16s.return
    sta.z __2
    lda.z sin16s.return+1
    sta.z __2+1
    // [69] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$2 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda.z __2
    sta (sintab),y
    iny
    lda.z __2+1
    sta (sintab),y
    // [70] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_SIGNED_WORD
    clc
    adc.z sintab
    sta.z sintab
    bcc !+
    inc.z sintab+1
  !:
    // [71] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0 -- vduz1=vduz1_plus_vduz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    lda.z x+2
    adc.z step+2
    sta.z x+2
    lda.z x+3
    adc.z step+3
    sta.z x+3
    // [72] (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [62] phi from sin16s_gen::@4 to sin16s_gen::@1 [phi:sin16s_gen::@4->sin16s_gen::@1]
  __b1_from___b4:
    // [62] phi (signed word*) sin16s_gen::sintab#2 = (signed word*) sin16s_gen::sintab#0 [phi:sin16s_gen::@4->sin16s_gen::@1#0] -- register_copy 
    // [62] phi (dword) sin16s_gen::x#2 = (dword) sin16s_gen::x#1 [phi:sin16s_gen::@4->sin16s_gen::@1#1] -- register_copy 
    // [62] phi (word) sin16s_gen::i#2 = (word) sin16s_gen::i#1 [phi:sin16s_gen::@4->sin16s_gen::@1#2] -- register_copy 
    jmp __b1
}
  // sin16s
// Calculate signed int sinus sin(x)
// x: unsigned long input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed int sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zp($14) x)
sin16s: {
    .label __4 = $5d
    .label x = $14
    .label return = $59
    .label x1 = $61
    .label x2 = $65
    .label x3 = $69
    .label x3_6 = $6d
    .label usinx = $6f
    .label x4 = $73
    .label x5 = $77
    .label x5_128 = $79
    .label usinx_1 = $7b
    .label return_1 = $18
    .label sinx = $18
    // Move x1 into the range 0-PI/2 using sinus mirror symmetries
    .label isUpper = $13
    // [73] if((dword) sin16s::x#0<(const nomodify dword) PI_u4f28) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_u4f28>>$10
    bcc __b1_from_sin16s
    bne !+
    lda.z x+2
    cmp #<PI_u4f28>>$10
    bcc __b1_from_sin16s
    bne !+
    lda.z x+1
    cmp #>PI_u4f28
    bcc __b1_from_sin16s
    bne !+
    lda.z x
    cmp #<PI_u4f28
    bcc __b1_from_sin16s
  !:
    jmp __b4
    // sin16s::@4
  __b4:
    // [74] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const nomodify dword) PI_u4f28 -- vduz1=vduz1_minus_vduc1 
    lda.z x
    sec
    sbc #<PI_u4f28
    sta.z x
    lda.z x+1
    sbc #>PI_u4f28
    sta.z x+1
    lda.z x+2
    sbc #<PI_u4f28>>$10
    sta.z x+2
    lda.z x+3
    sbc #>PI_u4f28>>$10
    sta.z x+3
    // [75] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
  __b1_from___b4:
    // [75] phi (byte) sin16s::isUpper#2 = (byte) 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [75] phi (dword) sin16s::x#4 = (dword) sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp __b1
    // [75] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  __b1_from_sin16s:
    // [75] phi (byte) sin16s::isUpper#2 = (byte) 0 [phi:sin16s->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [75] phi (dword) sin16s::x#4 = (dword) sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    jmp __b1
    // sin16s::@1
  __b1:
    // [76] if((dword) sin16s::x#4<(const nomodify dword) PI_HALF_u4f28) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc __b2_from___b1
    bne !+
    lda.z x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc __b2_from___b1
    bne !+
    lda.z x+1
    cmp #>PI_HALF_u4f28
    bcc __b2_from___b1
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f28
    bcc __b2_from___b1
  !:
    jmp __b5
    // sin16s::@5
  __b5:
    // [77] (dword) sin16s::x#2 ← (const nomodify dword) PI_u4f28 - (dword) sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc.z x
    sta.z x
    lda #>PI_u4f28
    sbc.z x+1
    sta.z x+1
    lda #<PI_u4f28>>$10
    sbc.z x+2
    sta.z x+2
    lda #>PI_u4f28>>$10
    sbc.z x+3
    sta.z x+3
    // [78] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
  __b2_from___b1:
  __b2_from___b5:
    // [78] phi (dword) sin16s::x#6 = (dword) sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    jmp __b2
    // sin16s::@2
  __b2:
    // [79] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3 -- vduz1=vduz2_rol_3 
    lda.z x
    asl
    sta.z __4
    lda.z x+1
    rol
    sta.z __4+1
    lda.z x+2
    rol
    sta.z __4+2
    lda.z x+3
    rol
    sta.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    // [80] (word) sin16s::x1#0 ← > (dword~) sin16s::$4 -- vwuz1=_hi_vduz2 
    lda.z __4+2
    sta.z x1
    lda.z __4+3
    sta.z x1+1
    // [81] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v1
    lda.z x1+1
    sta.z mulu16_sel.v1+1
    // [82] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [83] call mulu16_sel 
    // [113] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
  mulu16_sel_from___b2:
    // [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu16_sel.select
    // [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
    // [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [84] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return_5
    sta.z mulu16_sel.return
    lda.z mulu16_sel.return_5+1
    sta.z mulu16_sel.return+1
    jmp __b7
    // sin16s::@7
  __b7:
    // [85] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z x2
    lda.z mulu16_sel.return+1
    sta.z x2+1
    // [86] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0 -- vwuz1=vwuz2 
    lda.z x2
    sta.z mulu16_sel.v1
    lda.z x2+1
    sta.z mulu16_sel.v1+1
    // [87] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [88] call mulu16_sel 
    // [113] phi from sin16s::@7 to mulu16_sel [phi:sin16s::@7->mulu16_sel]
  mulu16_sel_from___b7:
    // [113] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@7->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu16_sel.select
    // [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#1 [phi:sin16s::@7->mulu16_sel#1] -- register_copy 
    // [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#1 [phi:sin16s::@7->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [89] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return_5
    sta.z mulu16_sel.return_1
    lda.z mulu16_sel.return_5+1
    sta.z mulu16_sel.return_1+1
    jmp __b8
    // sin16s::@8
  __b8:
    // [90] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return_1
    sta.z x3
    lda.z mulu16_sel.return_1+1
    sta.z x3+1
    // [91] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0 -- vwuz1=vwuz2 
    lda.z x3
    sta.z mulu16_sel.v1
    lda.z x3+1
    sta.z mulu16_sel.v1+1
    // [92] call mulu16_sel 
    // [113] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
  mulu16_sel_from___b8:
    // [113] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu16_sel.select
    // [113] phi (word) mulu16_sel::v2#5 = (word)(number) $10000/(number) 6 [phi:sin16s::@8->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta.z mulu16_sel.v2
    lda #>$10000/6
    sta.z mulu16_sel.v2+1
    // [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#2 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [93] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return_5
    sta.z mulu16_sel.return_2
    lda.z mulu16_sel.return_5+1
    sta.z mulu16_sel.return_2+1
    jmp __b9
    // sin16s::@9
  __b9:
    // [94] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return_2
    sta.z x3_6
    lda.z mulu16_sel.return_2+1
    sta.z x3_6+1
    // [95] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z x1
    sec
    sbc.z x3_6
    sta.z usinx
    lda.z x1+1
    sbc.z x3_6+1
    sta.z usinx+1
    // [96] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0 -- vwuz1=vwuz2 
    lda.z x3
    sta.z mulu16_sel.v1
    lda.z x3+1
    sta.z mulu16_sel.v1+1
    // [97] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [98] call mulu16_sel 
    // [113] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
  mulu16_sel_from___b9:
    // [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@9->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu16_sel.select
    // [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#3 [phi:sin16s::@9->mulu16_sel#1] -- register_copy 
    // [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#3 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [99] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return_5
    sta.z mulu16_sel.return_3
    lda.z mulu16_sel.return_5+1
    sta.z mulu16_sel.return_3+1
    jmp __b10
    // sin16s::@10
  __b10:
    // [100] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return_3
    sta.z x4
    lda.z mulu16_sel.return_3+1
    sta.z x4+1
    // [101] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0 -- vwuz1=vwuz2 
    lda.z x4
    sta.z mulu16_sel.v1
    lda.z x4+1
    sta.z mulu16_sel.v1+1
    // [102] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [103] call mulu16_sel 
    // [113] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
  mulu16_sel_from___b10:
    // [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu16_sel.select
    // [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#4 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
    // [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#4 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [104] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return_5
    sta.z mulu16_sel.return_4
    lda.z mulu16_sel.return_5+1
    sta.z mulu16_sel.return_4+1
    jmp __b11
    // sin16s::@11
  __b11:
    // [105] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return_4
    sta.z x5
    lda.z mulu16_sel.return_4+1
    sta.z x5+1
    // [106] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4 -- vwuz1=vwuz2_ror_4 
    lda.z x5+1
    lsr
    sta.z x5_128+1
    lda.z x5
    ror
    sta.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    // [107] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 -- vwuz1=vwuz2_plus_vwuz3 
    lda.z usinx
    clc
    adc.z x5_128
    sta.z usinx_1
    lda.z usinx+1
    adc.z x5_128+1
    sta.z usinx_1+1
    // [108] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    cmp #0
    beq __b12
    jmp __b6
    // sin16s::@6
  __b6:
    // [109] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc.z usinx_1
    sta.z sinx
    lda #0
    sbc.z usinx_1+1
    sta.z sinx+1
    // [110] phi from sin16s::@12 sin16s::@6 to sin16s::@3 [phi:sin16s::@12/sin16s::@6->sin16s::@3]
  __b3_from___b12:
  __b3_from___b6:
    // [110] phi (signed word) sin16s::return#1 = (signed word) sin16s::return#5 [phi:sin16s::@12/sin16s::@6->sin16s::@3#0] -- register_copy 
    jmp __b3
    // sin16s::@3
  __b3:
    jmp __breturn
    // sin16s::@return
  __breturn:
    // [111] return 
    rts
    // sin16s::@12
  __b12:
    // [112] (signed word) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1 -- vwsz1=vwsz2 
    lda.z usinx_1
    sta.z return_1
    lda.z usinx_1+1
    sta.z return_1+1
    jmp __b3_from___b12
}
  // mulu16_sel
// Calculate val*val for two unsigned int values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zp($1a) v1, word zp($1c) v2, byte zp($1e) select)
mulu16_sel: {
    .label __0 = $83
    .label __1 = $87
    .label v1 = $1a
    .label v2 = $1c
    .label return = $63
    .label return_1 = $67
    .label return_2 = $6b
    .label return_3 = $71
    .label return_4 = $75
    .label select = $1e
    .label return_5 = $8b
    // [114] (word) mul16u::a#1 ← (word) mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda.z v1
    sta.z mul16u.a
    lda.z v1+1
    sta.z mul16u.a+1
    // [115] (word) mul16u::b#0 ← (word) mulu16_sel::v2#5 -- vwuz1=vwuz2 
    lda.z v2
    sta.z mul16u.b
    lda.z v2+1
    sta.z mul16u.b+1
    // [116] call mul16u 
    jsr mul16u
    // [117] (dword) mul16u::return#2 ← (dword) mul16u::res#2 -- vduz1=vduz2 
    lda.z mul16u.res
    sta.z mul16u.return
    lda.z mul16u.res+1
    sta.z mul16u.return+1
    lda.z mul16u.res+2
    sta.z mul16u.return+2
    lda.z mul16u.res+3
    sta.z mul16u.return+3
    jmp __b1
    // mulu16_sel::@1
  __b1:
    // [118] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2 -- vduz1=vduz2 
    lda.z mul16u.return
    sta.z __0
    lda.z mul16u.return+1
    sta.z __0+1
    lda.z mul16u.return+2
    sta.z __0+2
    lda.z mul16u.return+3
    sta.z __0+3
    // [119] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 -- vduz1=vduz2_rol_vbuz3 
    lda.z __0
    sta.z __1
    lda.z __0+1
    sta.z __1+1
    lda.z __0+2
    sta.z __1+2
    lda.z __0+3
    sta.z __1+3
    ldx.z select
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    rol.z __1+2
    rol.z __1+3
    dex
    bne !-
  !e:
    // [120] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda.z __1+2
    sta.z return_5
    lda.z __1+3
    sta.z return_5+1
    jmp __breturn
    // mulu16_sel::@return
  __breturn:
    // [121] return 
    rts
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit unsigned ints into a 32-bit unsigned long
// mul16u(word zp($1f) a, word zp($7d) b)
mul16u: {
    .label __1 = $8d
    .label mb = $25
    .label a = $1f
    .label res = $21
    .label b = $7d
    .label return = $7f
    // [122] (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#0 -- vduz1=_dword_vwuz2 
    lda.z b
    sta.z mb
    lda.z b+1
    sta.z mb+1
    lda #0
    sta.z mb+2
    sta.z mb+3
    // [123] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  __b1_from_mul16u:
    // [123] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
    // [123] phi (dword) mul16u::res#2 = (dword) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    lda #<0>>$10
    sta.z res+2
    lda #>0>>$10
    sta.z res+3
    // [123] phi (word) mul16u::a#2 = (word) mul16u::a#1 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp __b1
    // mul16u::@1
  __b1:
    // [124] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda.z a
    bne __b2
    lda.z a+1
    bne __b2
    jmp __breturn
    // mul16u::@return
  __breturn:
    // [125] return 
    rts
    // mul16u::@2
  __b2:
    // [126] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1 -- vbuz1=vwuz2_band_vbuc1 
    lda #1
    and.z a
    sta.z __1
    // [127] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3 -- vbuz1_eq_0_then_la1 
    lda.z __1
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul16u::@4
  __b4:
    // [128] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    lda.z res+2
    adc.z mb+2
    sta.z res+2
    lda.z res+3
    adc.z mb+3
    sta.z res+3
    // [129] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [129] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    jmp __b3
    // mul16u::@3
  __b3:
    // [130] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr.z a+1
    ror.z a
    // [131] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1 -- vduz1=vduz1_rol_1 
    asl.z mb
    rol.z mb+1
    rol.z mb+2
    rol.z mb+3
    // [123] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
  __b1_from___b3:
    // [123] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [123] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [123] phi (word) mul16u::a#2 = (word) mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp __b1
}
  // div32u16u
// Divide unsigned 32-bit unsigned long dividend with a 16-bit unsigned int divisor
// The 16-bit unsigned int remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = $90
    .label quotient_lo = $94
    .label return = $96
    .label return_1 = $51
    // [133] call divr16u 
    // [142] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
  divr16u_from_div32u16u:
    // [142] phi (word) divr16u::dividend#6 = >(const nomodify dword) PI2_u4f28 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta.z divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta.z divr16u.dividend+1
    // [142] phi (word) divr16u::rem#11 = (byte) 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z divr16u.rem
    lda #>0
    sta.z divr16u.rem+1
    jsr divr16u
    // [134] (word) divr16u::return#3 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z divr16u.return_2
    lda.z divr16u.return+1
    sta.z divr16u.return_2+1
    jmp __b1
    // div32u16u::@1
  __b1:
    // [135] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#3 -- vwuz1=vwuz2 
    lda.z divr16u.return_2
    sta.z quotient_hi
    lda.z divr16u.return_2+1
    sta.z quotient_hi+1
    // [136] (word) divr16u::rem#5 ← (word) rem16u#0 -- vwuz1=vwuz2 
    lda.z rem16u
    sta.z divr16u.rem
    lda.z rem16u+1
    sta.z divr16u.rem+1
    // [137] call divr16u 
    // [142] phi from div32u16u::@1 to divr16u [phi:div32u16u::@1->divr16u]
  divr16u_from___b1:
    // [142] phi (word) divr16u::dividend#6 = <(const nomodify dword) PI2_u4f28 [phi:div32u16u::@1->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta.z divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta.z divr16u.dividend+1
    // [142] phi (word) divr16u::rem#11 = (word) divr16u::rem#5 [phi:div32u16u::@1->divr16u#1] -- register_copy 
    jsr divr16u
    // [138] (word) divr16u::return#4 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z divr16u.return_3
    lda.z divr16u.return+1
    sta.z divr16u.return_3+1
    jmp __b2
    // div32u16u::@2
  __b2:
    // [139] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#4 -- vwuz1=vwuz2 
    lda.z divr16u.return_3
    sta.z quotient_lo
    lda.z divr16u.return_3+1
    sta.z quotient_lo+1
    // [140] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda.z quotient_hi
    sta.z return+2
    lda.z quotient_hi+1
    sta.z return+3
    lda.z quotient_lo
    sta.z return
    lda.z quotient_lo+1
    sta.z return+1
    jmp __breturn
    // div32u16u::@return
  __breturn:
    // [141] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($2b) dividend, word zp($29) rem)
divr16u: {
    .label __1 = $9a
    .label __2 = $9b
    .label rem = $29
    .label dividend = $2b
    .label quotient = $2d
    .label i = $2f
    .label return = $2d
    .label return_1 = $bc
    .label return_2 = $8e
    .label return_3 = $92
    // [143] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  __b1_from_divr16u:
    // [143] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [143] phi (word) divr16u::quotient#3 = (word) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [143] phi (word) divr16u::dividend#4 = (word) divr16u::dividend#6 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [143] phi (word) divr16u::rem#6 = (word) divr16u::rem#11 [phi:divr16u->divr16u::@1#3] -- register_copy 
    jmp __b1
    // [143] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  __b1_from___b3:
    // [143] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [143] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [143] phi (word) divr16u::dividend#4 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [143] phi (word) divr16u::rem#6 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp __b1
    // divr16u::@1
  __b1:
    // [144] (word) divr16u::rem#0 ← (word) divr16u::rem#6 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [145] (byte~) divr16u::$1 ← > (word) divr16u::dividend#4 -- vbuz1=_hi_vwuz2 
    lda.z dividend+1
    sta.z __1
    // [146] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z __1
    sta.z __2
    // [147] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuz1_eq_0_then_la1 
    lda.z __2
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr16u::@4
  __b4:
    // [148] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [149] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [149] phi (word) divr16u::rem#7 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp __b2
    // divr16u::@2
  __b2:
    // [150] (word) divr16u::dividend#0 ← (word) divr16u::dividend#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [151] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [152] if((word) divr16u::rem#7<(const word) main::wavelength) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>main.wavelength
    bcc __b3_from___b2
    bne !+
    lda.z rem
    cmp #<main.wavelength
    bcc __b3_from___b2
  !:
    jmp __b5
    // divr16u::@5
  __b5:
    // [153] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [154] (word) divr16u::rem#2 ← (word) divr16u::rem#7 - (const word) main::wavelength -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<main.wavelength
    sta.z rem
    lda.z rem+1
    sbc #>main.wavelength
    sta.z rem+1
    // [155] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [155] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [155] phi (word) divr16u::rem#10 = (word) divr16u::rem#7 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp __b3
    // divr16u::@3
  __b3:
    // [156] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [157] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp.z i
    bne __b1_from___b3
    jmp __b6
    // divr16u::@6
  __b6:
    // [158] (word) rem16u#0 ← (word) divr16u::rem#10 -- vwuz1=vwuz2 
    lda.z rem
    sta.z rem16u
    lda.z rem+1
    sta.z rem16u+1
    jmp __breturn
    // divr16u::@return
  __breturn:
    // [159] return 
    rts
}
  // sin8s_gen
// Generate signed char sinus table - on the full -$7f - $7f range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin8s_gen(signed byte* zp($34) sintab)
sin8s_gen: {
    .label __2 = $a3
    .label step = $a0
    .label sintab = $34
    // u[4.12]
    // Iterate over the table
    .label x = $32
    .label i = $30
    // [161] call div16u 
    // [237] phi from sin8s_gen to div16u [phi:sin8s_gen->div16u]
  div16u_from_sin8s_gen:
    jsr div16u
    // [162] (word) div16u::return#2 ← (word) div16u::return#0 -- vwuz1=vwuz2 
    lda.z div16u.return
    sta.z div16u.return_1
    lda.z div16u.return+1
    sta.z div16u.return_1+1
    jmp __b3
    // sin8s_gen::@3
  __b3:
    // [163] (word) sin8s_gen::step#0 ← (word) div16u::return#2 -- vwuz1=vwuz2 
    lda.z div16u.return_1
    sta.z step
    lda.z div16u.return_1+1
    sta.z step+1
    // [164] phi from sin8s_gen::@3 to sin8s_gen::@1 [phi:sin8s_gen::@3->sin8s_gen::@1]
  __b1_from___b3:
    // [164] phi (signed byte*) sin8s_gen::sintab#2 = (const signed byte*) main::sintabb [phi:sin8s_gen::@3->sin8s_gen::@1#0] -- pbsz1=pbsc1 
    lda #<main.sintabb
    sta.z sintab
    lda #>main.sintabb
    sta.z sintab+1
    // [164] phi (word) sin8s_gen::x#2 = (word) 0 [phi:sin8s_gen::@3->sin8s_gen::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    // [164] phi (word) sin8s_gen::i#2 = (word) 0 [phi:sin8s_gen::@3->sin8s_gen::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // u[4.12]
    // sin8s_gen::@1
  __b1:
    // [165] if((word) sin8s_gen::i#2<(const word) main::wavelength) goto sin8s_gen::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.wavelength
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.wavelength
    bcc __b2
  !:
    jmp __breturn
    // sin8s_gen::@return
  __breturn:
    // [166] return 
    rts
    // sin8s_gen::@2
  __b2:
    // [167] (word) sin8s::x#0 ← (word) sin8s_gen::x#2 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [168] call sin8s 
    jsr sin8s
    // [169] (signed byte) sin8s::return#0 ← (signed byte) sin8s::return#1 -- vbsz1=vbsz2 
    lda.z sin8s.return_1
    sta.z sin8s.return
    jmp __b4
    // sin8s_gen::@4
  __b4:
    // [170] (signed byte~) sin8s_gen::$2 ← (signed byte) sin8s::return#0 -- vbsz1=vbsz2 
    lda.z sin8s.return
    sta.z __2
    // [171] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$2 -- _deref_pbsz1=vbsz2 
    lda.z __2
    ldy #0
    sta (sintab),y
    // [172] (signed byte*) sin8s_gen::sintab#0 ← ++ (signed byte*) sin8s_gen::sintab#2 -- pbsz1=_inc_pbsz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // [173] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // [174] (word) sin8s_gen::i#1 ← ++ (word) sin8s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [164] phi from sin8s_gen::@4 to sin8s_gen::@1 [phi:sin8s_gen::@4->sin8s_gen::@1]
  __b1_from___b4:
    // [164] phi (signed byte*) sin8s_gen::sintab#2 = (signed byte*) sin8s_gen::sintab#0 [phi:sin8s_gen::@4->sin8s_gen::@1#0] -- register_copy 
    // [164] phi (word) sin8s_gen::x#2 = (word) sin8s_gen::x#1 [phi:sin8s_gen::@4->sin8s_gen::@1#1] -- register_copy 
    // [164] phi (word) sin8s_gen::i#2 = (word) sin8s_gen::i#1 [phi:sin8s_gen::@4->sin8s_gen::@1#2] -- register_copy 
    jmp __b1
}
  // sin8s
// Calculate signed char sinus sin(x)
// x: unsigned int input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed char sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zp($37) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label __4 = $a4
    .label x = $37
    .label return = $a2
    .label x1 = $a6
    .label x2 = $a8
    .label x3 = $aa
    .label x3_6 = $ac
    .label usinx = $ad
    .label x4 = $af
    .label x5 = $b1
    .label x5_128 = $b2
    .label usinx_1 = $39
    .label return_1 = $3a
    .label sinx = $3a
    // Move x1 into the range 0-PI/2 using sinus mirror symmetries
    .label isUpper = $36
    // [175] if((word) sin8s::x#0<(const nomodify word) PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc __b1_from_sin8s
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc __b1_from_sin8s
  !:
    jmp __b5
    // sin8s::@5
  __b5:
    // [176] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const nomodify word) PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [177] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  __b1_from___b5:
    // [177] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [177] phi (word) sin8s::x#4 = (word) sin8s::x#1 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp __b1
    // [177] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  __b1_from_sin8s:
    // [177] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [177] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s->sin8s::@1#1] -- register_copy 
    jmp __b1
    // sin8s::@1
  __b1:
    // [178] if((word) sin8s::x#4<(const nomodify word) PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc __b2_from___b1
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc __b2_from___b1
  !:
    jmp __b6
    // sin8s::@6
  __b6:
    // [179] (word) sin8s::x#2 ← (const nomodify word) PI_u4f12 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [180] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  __b2_from___b1:
  __b2_from___b6:
    // [180] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    jmp __b2
    // sin8s::@2
  __b2:
    // [181] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda.z x
    asl
    sta.z __4
    lda.z x+1
    rol
    sta.z __4+1
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    // [182] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda.z __4+1
    sta.z x1
    // [183] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v1
    // [184] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v2
    // [185] call mulu8_sel 
    // [218] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  mulu8_sel_from___b2:
    // [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [186] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_5
    sta.z mulu8_sel.return
    jmp __b9
    // sin8s::@9
  __b9:
    // [187] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return
    sta.z x2
    // [188] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuz1=vbuz2 
    lda.z x2
    sta.z mulu8_sel.v1
    // [189] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v2
    // [190] call mulu8_sel 
    // [218] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
  mulu8_sel_from___b9:
    // [218] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [191] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_5
    sta.z mulu8_sel.return_1
    jmp __b10
    // sin8s::@10
  __b10:
    // [192] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_1
    sta.z x3
    // [193] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuz1=vbuz2 
    lda.z x3
    sta.z mulu8_sel.v1
    // [194] call mulu8_sel 
    // [218] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  mulu8_sel_from___b10:
    // [218] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [218] phi (byte) mulu8_sel::v2#5 = (const nomodify byte) sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuz1=vbuc1 
    lda #DIV_6
    sta.z mulu8_sel.v2
    // [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [195] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_5
    sta.z mulu8_sel.return_2
    jmp __b11
    // sin8s::@11
  __b11:
    // [196] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_2
    sta.z x3_6
    // [197] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x1
    sec
    sbc.z x3_6
    sta.z usinx
    // [198] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuz1=vbuz2 
    lda.z x3
    sta.z mulu8_sel.v1
    // [199] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v2
    // [200] call mulu8_sel 
    // [218] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  mulu8_sel_from___b11:
    // [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [201] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_5
    sta.z mulu8_sel.return_3
    jmp __b12
    // sin8s::@12
  __b12:
    // [202] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_3
    sta.z x4
    // [203] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuz1=vbuz2 
    lda.z x4
    sta.z mulu8_sel.v1
    // [204] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v2
    // [205] call mulu8_sel 
    // [218] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  mulu8_sel_from___b12:
    // [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [206] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_5
    sta.z mulu8_sel.return_4
    jmp __b13
    // sin8s::@13
  __b13:
    // [207] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_4
    sta.z x5
    // [208] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z x5
    lsr
    lsr
    lsr
    lsr
    sta.z x5_128
    // [209] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z usinx
    clc
    adc.z x5_128
    sta.z usinx_1
    // [210] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z usinx_1
    cmp #$80
    bcc __b3_from___b13
    jmp __b7
    // sin8s::@7
  __b7:
    // [211] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuz1=_dec_vbuz1 
    dec.z usinx_1
    // [212] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
  __b3_from___b13:
  __b3_from___b7:
    // [212] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    jmp __b3
    // sin8s::@3
  __b3:
    // [213] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    cmp #0
    beq __b14
    jmp __b8
    // sin8s::@8
  __b8:
    // [214] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsz1=_neg_vbsz2 
    lda.z usinx_1
    eor #$ff
    clc
    adc #1
    sta.z sinx
    // [215] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
  __b4_from___b14:
  __b4_from___b8:
    // [215] phi (signed byte) sin8s::return#1 = (signed byte) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    jmp __b4
    // sin8s::@4
  __b4:
    jmp __breturn
    // sin8s::@return
  __breturn:
    // [216] return 
    rts
    // sin8s::@14
  __b14:
    // [217] (signed byte) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsz1=vbsz2 
    lda.z usinx_1
    sta.z return_1
    jmp __b4_from___b14
}
  // mulu8_sel
// Calculate val*val for two unsigned char values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte zp($3b) v1, byte zp($3c) v2, byte zp($3d) select)
mulu8_sel: {
    .label __0 = $b6
    .label __1 = $b8
    .label v1 = $3b
    .label v2 = $3c
    .label return = $a7
    .label return_1 = $a9
    .label return_2 = $ab
    .label return_3 = $ae
    .label return_4 = $b0
    .label select = $3d
    .label return_5 = $ba
    // [219] (byte) mul8u::a#1 ← (byte) mulu8_sel::v1#5 -- vbuz1=vbuz2 
    lda.z v1
    sta.z mul8u.a
    // [220] (byte) mul8u::b#0 ← (byte) mulu8_sel::v2#5 -- vbuz1=vbuz2 
    lda.z v2
    sta.z mul8u.b
    // [221] call mul8u 
    jsr mul8u
    // [222] (word) mul8u::return#2 ← (word) mul8u::res#2 -- vwuz1=vwuz2 
    lda.z mul8u.res
    sta.z mul8u.return
    lda.z mul8u.res+1
    sta.z mul8u.return+1
    jmp __b1
    // mulu8_sel::@1
  __b1:
    // [223] (word~) mulu8_sel::$0 ← (word) mul8u::return#2 -- vwuz1=vwuz2 
    lda.z mul8u.return
    sta.z __0
    lda.z mul8u.return+1
    sta.z __0+1
    // [224] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz2_rol_vbuz3 
    lda.z __0
    sta.z __1
    lda.z __0+1
    sta.z __1+1
    ldy.z select
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    dey
    bne !-
  !e:
    // [225] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuz1=_hi_vwuz2 
    lda.z __1+1
    sta.z return_5
    jmp __breturn
    // mulu8_sel::@return
  __breturn:
    // [226] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte zp($3e) a, byte zp($b3) b)
mul8u: {
    .label __1 = $bb
    .label mb = $41
    .label a = $3e
    .label res = $3f
    .label b = $b3
    .label return = $b4
    // [227] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#0 -- vwuz1=_word_vbuz2 
    lda.z b
    sta.z mb
    lda #0
    sta.z mb+1
    // [228] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  __b1_from_mul8u:
    // [228] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [228] phi (word) mul8u::res#2 = (word) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [228] phi (byte) mul8u::a#2 = (byte) mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp __b1
    // mul8u::@1
  __b1:
    // [229] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2 -- vbuz1_neq_0_then_la1 
    lda.z a
    cmp #0
    bne __b2
    jmp __breturn
    // mul8u::@return
  __breturn:
    // [230] return 
    rts
    // mul8u::@2
  __b2:
    // [231] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and.z a
    sta.z __1
    // [232] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuz1_eq_0_then_la1 
    lda.z __1
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul8u::@4
  __b4:
    // [233] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [234] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [234] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp __b3
    // mul8u::@3
  __b3:
    // [235] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr.z a
    // [236] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [228] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  __b1_from___b3:
    // [228] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [228] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [228] phi (byte) mul8u::a#2 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // div16u
// Performs division on two 16 bit unsigned ints
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $be
    .label return_1 = $9e
    // [238] call divr16u 
    // [142] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    // [142] phi (word) divr16u::dividend#6 = (const nomodify word) PI2_u4f12 [phi:div16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z divr16u.dividend
    lda #>PI2_u4f12
    sta.z divr16u.dividend+1
    // [142] phi (word) divr16u::rem#11 = (byte) 0 [phi:div16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z divr16u.rem
    lda #>0
    sta.z divr16u.rem+1
    jsr divr16u
    // [239] (word) divr16u::return#2 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z divr16u.return_1
    lda.z divr16u.return+1
    sta.z divr16u.return_1+1
    jmp __b1
    // div16u::@1
  __b1:
    // [240] (word) div16u::return#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda.z divr16u.return_1
    sta.z return
    lda.z divr16u.return_1+1
    sta.z return+1
    jmp __breturn
    // div16u::@return
  __breturn:
    // [241] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [8] (word~) main::$10 ← (word)(byte) main::i#2 [ main::i#2 print_char_cursor#45 main::sb#0 main::$10 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 main::$10 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:67 [ main::sb#0 ]
Statement [9] (word~) main::$9 ← (word~) main::$10 << (byte) 1 [ main::i#2 print_char_cursor#45 main::sb#0 main::$9 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 main::$9 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [10] (signed word*~) main::$3 ← (const signed word*) main::sintabw + (word~) main::$9 [ main::i#2 print_char_cursor#45 main::sb#0 main::$3 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 main::$3 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [11] (signed word) main::sw#0 ← *((signed word*~) main::$3) [ main::i#2 print_char_cursor#45 main::sb#0 main::sw#0 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 main::sw#0 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:67 [ main::sb#0 ]
Statement [13] (signed byte) main::sd#0 ← (signed byte) main::sb#0 - (signed byte)(byte~) main::$11 [ main::i#2 print_char_cursor#45 main::sd#0 ] (  [ main::i#2 print_char_cursor#45 main::sd#0 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [23] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#10 print_str::str#2 ] ( print_str:17 [ main::i#2 print_char_cursor#10 print_str::str#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [25] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) [ print_char_cursor#10 print_str::str#2 print_char::ch#0 ] ( print_str:17 [ main::i#2 print_char_cursor#10 print_str::str#2 print_char::ch#0 ] { { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a reg byte y 
Statement [29] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#5 [ print_char_cursor#29 ] ( print_str:17::print_char:26 [ main::i#2 print_str::str#2 print_char_cursor#29 ] { { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  print_schar:15::print_char:34 [ main::i#2 print_schar::b#1 print_char_cursor#29 ] { { print_schar::b#1 = main::sd#0 } { print_char_cursor#29 = print_char_cursor#45 } }  print_schar:15::print_char:40 [ main::i#2 print_schar::b#1 print_char_cursor#29 ] { { print_schar::b#1 = main::sd#0 } { print_char_cursor#29 = print_char_cursor#45 } }  print_schar:15::print_uchar:37::print_char:44 [ main::i#2 print_uchar::b#0 print_char_cursor#29 ] { { print_schar::b#1 = main::sd#0 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  print_schar:15::print_uchar:37::print_char:47 [ main::i#2 print_char_cursor#29 ] { { print_schar::b#1 = main::sd#0 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:8 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:78 [ print_uchar::b#0 ]
Statement [41] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#1 [ print_char_cursor#10 print_schar::b#0 ] ( print_schar:15 [ main::i#2 print_char_cursor#10 print_schar::b#0 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [42] (byte~) print_uchar::$0 ← (byte) print_uchar::b#0 >> (byte) 4 [ print_char_cursor#10 print_uchar::b#0 print_uchar::$0 ] ( print_schar:15::print_uchar:37 [ main::i#2 print_char_cursor#10 print_uchar::b#0 print_uchar::$0 ] { { print_schar::b#1 = main::sd#0 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:78 [ print_uchar::b#0 ]
Statement [45] (byte~) print_uchar::$2 ← (byte) print_uchar::b#0 & (byte) $f [ print_char_cursor#10 print_uchar::$2 ] ( print_schar:15::print_uchar:37 [ main::i#2 print_char_cursor#10 print_uchar::$2 ] { { print_schar::b#1 = main::sd#0 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a 
Statement [54] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:5::memset:50 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [56] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( print_cls:5::memset:50 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [60] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0 [ div32u16u::return#2 ] ( sin16s_gen:3 [ div32u16u::return#2 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [61] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2 [ sin16s_gen::step#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 ] { }  ) always clobbers reg byte a 
Statement [63] if((word) sin16s_gen::i#2<(const word) main::wavelength) goto sin16s_gen::@2 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 ] { }  ) always clobbers reg byte a 
Statement [65] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [67] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::return#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::return#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [68] (signed word~) sin16s_gen::$2 ← (signed word) sin16s::return#0 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::$2 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::$2 ] { }  ) always clobbers reg byte a 
Statement [69] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$2 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [70] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [71] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#1 sin16s_gen::sintab#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#1 sin16s_gen::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [73] if((dword) sin16s::x#0<(const nomodify dword) PI_u4f28) goto sin16s::@1 [ sin16s::x#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [74] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const nomodify dword) PI_u4f28 [ sin16s::x#1 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [76] if((dword) sin16s::x#4<(const nomodify dword) PI_HALF_u4f28) goto sin16s::@2 [ sin16s::x#4 sin16s::isUpper#2 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#4 sin16s::isUpper#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:19 [ sin16s::isUpper#2 ]
Statement [77] (dword) sin16s::x#2 ← (const nomodify dword) PI_u4f28 - (dword) sin16s::x#4 [ sin16s::isUpper#2 sin16s::x#2 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [79] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3 [ sin16s::isUpper#2 sin16s::$4 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::$4 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [80] (word) sin16s::x1#0 ← > (dword~) sin16s::$4 [ sin16s::isUpper#2 sin16s::x1#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [81] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [82] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [84] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [85] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [86] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [87] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [89] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [90] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [91] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [93] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [94] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [95] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [96] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [97] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [99] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [100] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [101] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [102] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [104] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [105] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [106] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [107] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 [ sin16s::isUpper#2 sin16s::usinx#1 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [109] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 [ sin16s::sinx#1 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::sinx#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [112] (signed word) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1 [ sin16s::return#5 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::return#5 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [114] (word) mul16u::a#1 ← (word) mulu16_sel::v1#5 [ mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:30 [ mulu16_sel::select#5 ]
Statement [115] (word) mul16u::b#0 ← (word) mulu16_sel::v2#5 [ mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [117] (dword) mul16u::return#2 ← (dword) mul16u::res#2 [ mulu16_sel::select#5 mul16u::return#2 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [118] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2 [ mulu16_sel::select#5 mulu16_sel::$0 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [119] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 [ mulu16_sel::$1 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [120] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 [ mulu16_sel::return#12 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [122] (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#0 [ mul16u::a#1 mul16u::mb#0 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [124] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [126] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [128] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 [ mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [134] (word) divr16u::return#3 ← (word) divr16u::return#0 [ divr16u::return#3 rem16u#0 ] ( sin16s_gen:3::div32u16u:59 [ divr16u::return#3 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [135] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#3 [ div32u16u::quotient_hi#0 rem16u#0 ] ( sin16s_gen:3::div32u16u:59 [ div32u16u::quotient_hi#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [136] (word) divr16u::rem#5 ← (word) rem16u#0 [ div32u16u::quotient_hi#0 divr16u::rem#5 ] ( sin16s_gen:3::div32u16u:59 [ div32u16u::quotient_hi#0 divr16u::rem#5 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [138] (word) divr16u::return#4 ← (word) divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#4 ] ( sin16s_gen:3::div32u16u:59 [ div32u16u::quotient_hi#0 divr16u::return#4 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [139] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#4 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( sin16s_gen:3::div32u16u:59 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [140] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 [ div32u16u::return#0 ] ( sin16s_gen:3::div32u16u:59 [ div32u16u::return#0 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [148] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( sin16s_gen:3::div32u16u:59::divr16u:133 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  sin16s_gen:3::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  sin8s_gen:1::div16u:161::divr16u:238 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:47 [ divr16u::i#2 divr16u::i#1 ]
Statement [152] if((word) divr16u::rem#7<(const word) main::wavelength) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] ( sin16s_gen:3::div32u16u:59::divr16u:133 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  sin16s_gen:3::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  sin8s_gen:1::div16u:161::divr16u:238 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [154] (word) divr16u::rem#2 ← (word) divr16u::rem#7 - (const word) main::wavelength [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( sin16s_gen:3::div32u16u:59::divr16u:133 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  sin16s_gen:3::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  sin8s_gen:1::div16u:161::divr16u:238 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [158] (word) rem16u#0 ← (word) divr16u::rem#10 [ divr16u::return#0 rem16u#0 ] ( sin16s_gen:3::div32u16u:59::divr16u:133 [ divr16u::return#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  sin16s_gen:3::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::return#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  sin8s_gen:1::div16u:161::divr16u:238 [ divr16u::return#0 rem16u#0 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [162] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( sin8s_gen:1 [ div16u::return#2 ] { { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [163] (word) sin8s_gen::step#0 ← (word) div16u::return#2 [ sin8s_gen::step#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 ] { }  ) always clobbers reg byte a 
Statement [165] if((word) sin8s_gen::i#2<(const word) main::wavelength) goto sin8s_gen::@2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] { }  ) always clobbers reg byte a 
Statement [167] (word) sin8s::x#0 ← (word) sin8s_gen::x#2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [171] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] { }  ) always clobbers reg byte y 
Statement [173] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [175] if((word) sin8s::x#0<(const nomodify word) PI_u4f12) goto sin8s::@1 [ sin8s::x#0 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [176] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const nomodify word) PI_u4f12 [ sin8s::x#1 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [178] if((word) sin8s::x#4<(const nomodify word) PI_HALF_u4f12) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#4 sin8s::isUpper#10 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:54 [ sin8s::isUpper#10 ]
Statement [179] (word) sin8s::x#2 ← (const nomodify word) PI_u4f12 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#2 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [181] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 [ sin8s::isUpper#10 sin8s::$4 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::$4 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [197] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:166 [ sin8s::x1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:170 [ sin8s::x3#0 ]
Statement [208] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:173 [ sin8s::usinx#0 ]
Statement [209] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [214] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::sinx#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [222] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#2 ] ( sin8s_gen:1::sin8s:168::mulu8_sel:185 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#1 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:190 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#1 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:194 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:200 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:205 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#1 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:61 [ mulu8_sel::select#5 ]
Statement [223] (word~) mulu8_sel::$0 ← (word) mul8u::return#2 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( sin8s_gen:1::sin8s:168::mulu8_sel:185 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:168::mulu8_sel:190 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:168::mulu8_sel:194 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:200 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:168::mulu8_sel:205 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [224] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( sin8s_gen:1::sin8s:168::mulu8_sel:185 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:168::mulu8_sel:190 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:168::mulu8_sel:194 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:200 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:168::mulu8_sel:205 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [227] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#0 [ mul8u::a#1 mul8u::mb#0 ] ( sin8s_gen:1::sin8s:168::mulu8_sel:185::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#1 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:190::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#1 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:194::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:200::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:205::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#1 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:62 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
Statement [231] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 [ mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] ( sin8s_gen:1::sin8s:168::mulu8_sel:185::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#1 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:190::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#1 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:194::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:200::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:205::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#1 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [233] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ( sin8s_gen:1::sin8s:168::mulu8_sel:185::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#1 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:190::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#1 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:194::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:200::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:205::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#1 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [239] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( sin8s_gen:1::div16u:161 [ divr16u::return#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [240] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( sin8s_gen:1::div16u:161 [ div16u::return#0 ] { { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [8] (word~) main::$10 ← (word)(byte) main::i#2 [ main::i#2 print_char_cursor#45 main::sb#0 main::$10 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 main::$10 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [9] (word~) main::$9 ← (word~) main::$10 << (byte) 1 [ main::i#2 print_char_cursor#45 main::sb#0 main::$9 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 main::$9 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [10] (signed word*~) main::$3 ← (const signed word*) main::sintabw + (word~) main::$9 [ main::i#2 print_char_cursor#45 main::sb#0 main::$3 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 main::$3 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [11] (signed word) main::sw#0 ← *((signed word*~) main::$3) [ main::i#2 print_char_cursor#45 main::sb#0 main::sw#0 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 main::sw#0 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a reg byte y 
Statement [13] (signed byte) main::sd#0 ← (signed byte) main::sb#0 - (signed byte)(byte~) main::$11 [ main::i#2 print_char_cursor#45 main::sd#0 ] (  [ main::i#2 print_char_cursor#45 main::sd#0 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [23] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#10 print_str::str#2 ] ( print_str:17 [ main::i#2 print_char_cursor#10 print_str::str#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [25] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) [ print_char_cursor#10 print_str::str#2 print_char::ch#0 ] ( print_str:17 [ main::i#2 print_char_cursor#10 print_str::str#2 print_char::ch#0 ] { { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a reg byte y 
Statement [29] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#5 [ print_char_cursor#29 ] ( print_str:17::print_char:26 [ main::i#2 print_str::str#2 print_char_cursor#29 ] { { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  print_schar:15::print_char:34 [ main::i#2 print_schar::b#1 print_char_cursor#29 ] { { print_schar::b#1 = main::sd#0 } { print_char_cursor#29 = print_char_cursor#45 } }  print_schar:15::print_char:40 [ main::i#2 print_schar::b#1 print_char_cursor#29 ] { { print_schar::b#1 = main::sd#0 } { print_char_cursor#29 = print_char_cursor#45 } }  print_schar:15::print_uchar:37::print_char:44 [ main::i#2 print_uchar::b#0 print_char_cursor#29 ] { { print_schar::b#1 = main::sd#0 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  print_schar:15::print_uchar:37::print_char:47 [ main::i#2 print_char_cursor#29 ] { { print_schar::b#1 = main::sd#0 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte y 
Statement [41] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#1 [ print_char_cursor#10 print_schar::b#0 ] ( print_schar:15 [ main::i#2 print_char_cursor#10 print_schar::b#0 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [42] (byte~) print_uchar::$0 ← (byte) print_uchar::b#0 >> (byte) 4 [ print_char_cursor#10 print_uchar::b#0 print_uchar::$0 ] ( print_schar:15::print_uchar:37 [ main::i#2 print_char_cursor#10 print_uchar::b#0 print_uchar::$0 ] { { print_schar::b#1 = main::sd#0 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a 
Statement [45] (byte~) print_uchar::$2 ← (byte) print_uchar::b#0 & (byte) $f [ print_char_cursor#10 print_uchar::$2 ] ( print_schar:15::print_uchar:37 [ main::i#2 print_char_cursor#10 print_uchar::$2 ] { { print_schar::b#1 = main::sd#0 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a 
Statement [54] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:5::memset:50 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [56] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( print_cls:5::memset:50 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [60] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0 [ div32u16u::return#2 ] ( sin16s_gen:3 [ div32u16u::return#2 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [61] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2 [ sin16s_gen::step#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 ] { }  ) always clobbers reg byte a 
Statement [63] if((word) sin16s_gen::i#2<(const word) main::wavelength) goto sin16s_gen::@2 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 ] { }  ) always clobbers reg byte a 
Statement [65] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [67] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::return#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::return#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [68] (signed word~) sin16s_gen::$2 ← (signed word) sin16s::return#0 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::$2 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::$2 ] { }  ) always clobbers reg byte a 
Statement [69] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$2 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [70] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [71] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#1 sin16s_gen::sintab#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#1 sin16s_gen::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [73] if((dword) sin16s::x#0<(const nomodify dword) PI_u4f28) goto sin16s::@1 [ sin16s::x#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [74] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const nomodify dword) PI_u4f28 [ sin16s::x#1 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [76] if((dword) sin16s::x#4<(const nomodify dword) PI_HALF_u4f28) goto sin16s::@2 [ sin16s::x#4 sin16s::isUpper#2 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#4 sin16s::isUpper#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [77] (dword) sin16s::x#2 ← (const nomodify dword) PI_u4f28 - (dword) sin16s::x#4 [ sin16s::isUpper#2 sin16s::x#2 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [79] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3 [ sin16s::isUpper#2 sin16s::$4 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::$4 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [80] (word) sin16s::x1#0 ← > (dword~) sin16s::$4 [ sin16s::isUpper#2 sin16s::x1#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [81] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [82] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [84] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [85] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [86] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [87] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [89] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [90] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [91] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [93] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [94] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [95] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [96] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [97] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [99] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [100] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [101] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [102] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [104] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [105] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [106] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [107] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 [ sin16s::isUpper#2 sin16s::usinx#1 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [109] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 [ sin16s::sinx#1 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::sinx#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [112] (signed word) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1 [ sin16s::return#5 ] ( sin16s_gen:3::sin16s:66 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::return#5 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [114] (word) mul16u::a#1 ← (word) mulu16_sel::v1#5 [ mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [115] (word) mul16u::b#0 ← (word) mulu16_sel::v2#5 [ mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [117] (dword) mul16u::return#2 ← (dword) mul16u::res#2 [ mulu16_sel::select#5 mul16u::return#2 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [118] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2 [ mulu16_sel::select#5 mulu16_sel::$0 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [119] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 [ mulu16_sel::$1 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [120] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 [ mulu16_sel::return#12 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [122] (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#0 [ mul16u::a#1 mul16u::mb#0 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [124] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [126] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [128] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 [ mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] ( sin16s_gen:3::sin16s:66::mulu16_sel:83::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:88::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:92::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:98::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:66::mulu16_sel:103::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [134] (word) divr16u::return#3 ← (word) divr16u::return#0 [ divr16u::return#3 rem16u#0 ] ( sin16s_gen:3::div32u16u:59 [ divr16u::return#3 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [135] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#3 [ div32u16u::quotient_hi#0 rem16u#0 ] ( sin16s_gen:3::div32u16u:59 [ div32u16u::quotient_hi#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [136] (word) divr16u::rem#5 ← (word) rem16u#0 [ div32u16u::quotient_hi#0 divr16u::rem#5 ] ( sin16s_gen:3::div32u16u:59 [ div32u16u::quotient_hi#0 divr16u::rem#5 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [138] (word) divr16u::return#4 ← (word) divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#4 ] ( sin16s_gen:3::div32u16u:59 [ div32u16u::quotient_hi#0 divr16u::return#4 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [139] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#4 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( sin16s_gen:3::div32u16u:59 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [140] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 [ div32u16u::return#0 ] ( sin16s_gen:3::div32u16u:59 [ div32u16u::return#0 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [148] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( sin16s_gen:3::div32u16u:59::divr16u:133 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  sin16s_gen:3::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  sin8s_gen:1::div16u:161::divr16u:238 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [152] if((word) divr16u::rem#7<(const word) main::wavelength) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] ( sin16s_gen:3::div32u16u:59::divr16u:133 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  sin16s_gen:3::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  sin8s_gen:1::div16u:161::divr16u:238 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [154] (word) divr16u::rem#2 ← (word) divr16u::rem#7 - (const word) main::wavelength [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( sin16s_gen:3::div32u16u:59::divr16u:133 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  sin16s_gen:3::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  sin8s_gen:1::div16u:161::divr16u:238 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [158] (word) rem16u#0 ← (word) divr16u::rem#10 [ divr16u::return#0 rem16u#0 ] ( sin16s_gen:3::div32u16u:59::divr16u:133 [ divr16u::return#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  sin16s_gen:3::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::return#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  sin8s_gen:1::div16u:161::divr16u:238 [ divr16u::return#0 rem16u#0 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [162] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( sin8s_gen:1 [ div16u::return#2 ] { { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [163] (word) sin8s_gen::step#0 ← (word) div16u::return#2 [ sin8s_gen::step#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 ] { }  ) always clobbers reg byte a 
Statement [165] if((word) sin8s_gen::i#2<(const word) main::wavelength) goto sin8s_gen::@2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] { }  ) always clobbers reg byte a 
Statement [167] (word) sin8s::x#0 ← (word) sin8s_gen::x#2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [171] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] { }  ) always clobbers reg byte y 
Statement [173] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [175] if((word) sin8s::x#0<(const nomodify word) PI_u4f12) goto sin8s::@1 [ sin8s::x#0 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [176] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const nomodify word) PI_u4f12 [ sin8s::x#1 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [178] if((word) sin8s::x#4<(const nomodify word) PI_HALF_u4f12) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#4 sin8s::isUpper#10 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [179] (word) sin8s::x#2 ← (const nomodify word) PI_u4f12 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#2 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [181] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 [ sin8s::isUpper#10 sin8s::$4 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::$4 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [197] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [208] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [209] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [214] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( sin8s_gen:1::sin8s:168 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::sinx#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [222] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#2 ] ( sin8s_gen:1::sin8s:168::mulu8_sel:185 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#1 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:190 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#1 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:194 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:200 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:205 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#1 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [223] (word~) mulu8_sel::$0 ← (word) mul8u::return#2 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( sin8s_gen:1::sin8s:168::mulu8_sel:185 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:168::mulu8_sel:190 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:168::mulu8_sel:194 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:200 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:168::mulu8_sel:205 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [224] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( sin8s_gen:1::sin8s:168::mulu8_sel:185 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:168::mulu8_sel:190 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:168::mulu8_sel:194 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:200 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:168::mulu8_sel:205 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [227] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#0 [ mul8u::a#1 mul8u::mb#0 ] ( sin8s_gen:1::sin8s:168::mulu8_sel:185::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#1 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:190::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#1 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:194::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:200::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:205::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#1 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [231] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 [ mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] ( sin8s_gen:1::sin8s:168::mulu8_sel:185::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#1 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:190::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#1 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:194::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:200::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:205::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#1 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [233] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ( sin8s_gen:1::sin8s:168::mulu8_sel:185::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#1 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:190::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#1 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:194::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:200::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:168::mulu8_sel:205::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#1 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [239] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( sin8s_gen:1::div16u:161 [ divr16u::return#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [240] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( sin8s_gen:1::div16u:161 [ div16u::return#0 ] { { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ print_str::str#2 print_str::str#0 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:6 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ] : zp[2]:6 , 
Potential registers zp[1]:8 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ] : zp[1]:8 , reg byte a , reg byte x , 
Potential registers zp[2]:9 [ memset::dst#2 memset::dst#1 ] : zp[2]:9 , 
Potential registers zp[2]:11 [ sin16s_gen::i#2 sin16s_gen::i#1 ] : zp[2]:11 , 
Potential registers zp[4]:13 [ sin16s_gen::x#2 sin16s_gen::x#1 ] : zp[4]:13 , 
Potential registers zp[2]:17 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ] : zp[2]:17 , 
Potential registers zp[1]:19 [ sin16s::isUpper#2 ] : zp[1]:19 , reg byte x , reg byte y , 
Potential registers zp[4]:20 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] : zp[4]:20 , 
Potential registers zp[2]:24 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] : zp[2]:24 , 
Potential registers zp[2]:26 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ] : zp[2]:26 , 
Potential registers zp[2]:28 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] : zp[2]:28 , 
Potential registers zp[1]:30 [ mulu16_sel::select#5 ] : zp[1]:30 , reg byte x , reg byte y , 
Potential registers zp[2]:31 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] : zp[2]:31 , 
Potential registers zp[4]:33 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] : zp[4]:33 , 
Potential registers zp[4]:37 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] : zp[4]:37 , 
Potential registers zp[2]:41 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp[2]:41 , 
Potential registers zp[2]:43 [ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ] : zp[2]:43 , 
Potential registers zp[2]:45 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp[2]:45 , 
Potential registers zp[1]:47 [ divr16u::i#2 divr16u::i#1 ] : zp[1]:47 , reg byte x , reg byte y , 
Potential registers zp[2]:48 [ sin8s_gen::i#2 sin8s_gen::i#1 ] : zp[2]:48 , 
Potential registers zp[2]:50 [ sin8s_gen::x#2 sin8s_gen::x#1 ] : zp[2]:50 , 
Potential registers zp[2]:52 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] : zp[2]:52 , 
Potential registers zp[1]:54 [ sin8s::isUpper#10 ] : zp[1]:54 , reg byte x , reg byte y , 
Potential registers zp[2]:55 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] : zp[2]:55 , 
Potential registers zp[1]:57 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] : zp[1]:57 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:58 [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ] : zp[1]:58 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:59 [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ] : zp[1]:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:60 [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ] : zp[1]:60 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:61 [ mulu8_sel::select#5 ] : zp[1]:61 , reg byte x , reg byte y , 
Potential registers zp[1]:62 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] : zp[1]:62 , reg byte x , reg byte y , 
Potential registers zp[2]:63 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] : zp[2]:63 , 
Potential registers zp[2]:65 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] : zp[2]:65 , 
Potential registers zp[1]:67 [ main::sb#0 ] : zp[1]:67 , reg byte x , 
Potential registers zp[2]:68 [ main::$10 ] : zp[2]:68 , 
Potential registers zp[2]:70 [ main::$9 ] : zp[2]:70 , 
Potential registers zp[2]:72 [ main::$3 ] : zp[2]:72 , 
Potential registers zp[2]:74 [ main::sw#0 ] : zp[2]:74 , 
Potential registers zp[1]:76 [ main::$11 ] : zp[1]:76 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:77 [ main::sd#0 ] : zp[1]:77 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:78 [ print_uchar::b#0 ] : zp[1]:78 , reg byte x , 
Potential registers zp[1]:79 [ print_uchar::$0 ] : zp[1]:79 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:80 [ print_uchar::$2 ] : zp[1]:80 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:81 [ div32u16u::return#2 ] : zp[4]:81 , 
Potential registers zp[4]:85 [ sin16s_gen::step#0 ] : zp[4]:85 , 
Potential registers zp[2]:89 [ sin16s::return#0 ] : zp[2]:89 , 
Potential registers zp[2]:91 [ sin16s_gen::$2 ] : zp[2]:91 , 
Potential registers zp[4]:93 [ sin16s::$4 ] : zp[4]:93 , 
Potential registers zp[2]:97 [ sin16s::x1#0 ] : zp[2]:97 , 
Potential registers zp[2]:99 [ mulu16_sel::return#0 ] : zp[2]:99 , 
Potential registers zp[2]:101 [ sin16s::x2#0 ] : zp[2]:101 , 
Potential registers zp[2]:103 [ mulu16_sel::return#1 ] : zp[2]:103 , 
Potential registers zp[2]:105 [ sin16s::x3#0 ] : zp[2]:105 , 
Potential registers zp[2]:107 [ mulu16_sel::return#2 ] : zp[2]:107 , 
Potential registers zp[2]:109 [ sin16s::x3_6#0 ] : zp[2]:109 , 
Potential registers zp[2]:111 [ sin16s::usinx#0 ] : zp[2]:111 , 
Potential registers zp[2]:113 [ mulu16_sel::return#10 ] : zp[2]:113 , 
Potential registers zp[2]:115 [ sin16s::x4#0 ] : zp[2]:115 , 
Potential registers zp[2]:117 [ mulu16_sel::return#11 ] : zp[2]:117 , 
Potential registers zp[2]:119 [ sin16s::x5#0 ] : zp[2]:119 , 
Potential registers zp[2]:121 [ sin16s::x5_128#0 ] : zp[2]:121 , 
Potential registers zp[2]:123 [ sin16s::usinx#1 ] : zp[2]:123 , 
Potential registers zp[2]:125 [ mul16u::b#0 ] : zp[2]:125 , 
Potential registers zp[4]:127 [ mul16u::return#2 ] : zp[4]:127 , 
Potential registers zp[4]:131 [ mulu16_sel::$0 ] : zp[4]:131 , 
Potential registers zp[4]:135 [ mulu16_sel::$1 ] : zp[4]:135 , 
Potential registers zp[2]:139 [ mulu16_sel::return#12 ] : zp[2]:139 , 
Potential registers zp[1]:141 [ mul16u::$1 ] : zp[1]:141 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:142 [ divr16u::return#3 ] : zp[2]:142 , 
Potential registers zp[2]:144 [ div32u16u::quotient_hi#0 ] : zp[2]:144 , 
Potential registers zp[2]:146 [ divr16u::return#4 ] : zp[2]:146 , 
Potential registers zp[2]:148 [ div32u16u::quotient_lo#0 ] : zp[2]:148 , 
Potential registers zp[4]:150 [ div32u16u::return#0 ] : zp[4]:150 , 
Potential registers zp[1]:154 [ divr16u::$1 ] : zp[1]:154 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:155 [ divr16u::$2 ] : zp[1]:155 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:156 [ rem16u#0 ] : zp[2]:156 , 
Potential registers zp[2]:158 [ div16u::return#2 ] : zp[2]:158 , 
Potential registers zp[2]:160 [ sin8s_gen::step#0 ] : zp[2]:160 , 
Potential registers zp[1]:162 [ sin8s::return#0 ] : zp[1]:162 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:163 [ sin8s_gen::$2 ] : zp[1]:163 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:164 [ sin8s::$4 ] : zp[2]:164 , 
Potential registers zp[1]:166 [ sin8s::x1#0 ] : zp[1]:166 , reg byte x , reg byte y , 
Potential registers zp[1]:167 [ mulu8_sel::return#0 ] : zp[1]:167 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:168 [ sin8s::x2#0 ] : zp[1]:168 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:169 [ mulu8_sel::return#1 ] : zp[1]:169 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:170 [ sin8s::x3#0 ] : zp[1]:170 , reg byte x , reg byte y , 
Potential registers zp[1]:171 [ mulu8_sel::return#2 ] : zp[1]:171 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:172 [ sin8s::x3_6#0 ] : zp[1]:172 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:173 [ sin8s::usinx#0 ] : zp[1]:173 , reg byte x , reg byte y , 
Potential registers zp[1]:174 [ mulu8_sel::return#10 ] : zp[1]:174 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:175 [ sin8s::x4#0 ] : zp[1]:175 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:176 [ mulu8_sel::return#11 ] : zp[1]:176 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:177 [ sin8s::x5#0 ] : zp[1]:177 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:178 [ sin8s::x5_128#0 ] : zp[1]:178 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:179 [ mul8u::b#0 ] : zp[1]:179 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:180 [ mul8u::return#2 ] : zp[2]:180 , 
Potential registers zp[2]:182 [ mulu8_sel::$0 ] : zp[2]:182 , 
Potential registers zp[2]:184 [ mulu8_sel::$1 ] : zp[2]:184 , 
Potential registers zp[1]:186 [ mulu8_sel::return#12 ] : zp[1]:186 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:187 [ mul8u::$1 ] : zp[1]:187 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:188 [ divr16u::return#2 ] : zp[2]:188 , 
Potential registers zp[2]:190 [ div16u::return#0 ] : zp[2]:190 , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul8u] 35,001,670.33: zp[2]:63 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] 24,500,004.57: zp[2]:65 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] 20,000,002: zp[1]:187 [ mul8u::$1 ] 16,720,002.5: zp[1]:62 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] 20,002: zp[2]:180 [ mul8u::return#2 ] 10,001: zp[1]:179 [ mul8u::b#0 ] 
Uplift Scope [mul16u] 35,001,670.33: zp[4]:33 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] 24,500,004.57: zp[4]:37 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] 20,000,002: zp[1]:141 [ mul16u::$1 ] 16,720,002.5: zp[2]:31 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] 20,002: zp[4]:127 [ mul16u::return#2 ] 10,001: zp[2]:125 [ mul16u::b#0 ] 
Uplift Scope [divr16u] 90,147.42: zp[2]:41 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 31,291: zp[2]:45 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 20,002: zp[1]:154 [ divr16u::$1 ] 20,002: zp[1]:155 [ divr16u::$2 ] 16,540.12: zp[1]:47 [ divr16u::i#2 divr16u::i#1 ] 7,930.39: zp[2]:43 [ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ] 202: zp[2]:142 [ divr16u::return#3 ] 202: zp[2]:146 [ divr16u::return#4 ] 202: zp[2]:188 [ divr16u::return#2 ] 
Uplift Scope [print_char] 136,010: zp[1]:5 [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ] 
Uplift Scope [] 110,121.79: zp[2]:6 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ] 220.4: zp[2]:156 [ rem16u#0 ] 
Uplift Scope [mulu16_sel] 21,012: zp[2]:26 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ] 20,002: zp[4]:131 [ mulu16_sel::$0 ] 20,002: zp[4]:135 [ mulu16_sel::$1 ] 15,010.5: zp[2]:28 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] 2,143.71: zp[2]:139 [ mulu16_sel::return#12 ] 2,002: zp[2]:99 [ mulu16_sel::return#0 ] 2,002: zp[2]:103 [ mulu16_sel::return#1 ] 2,002: zp[2]:107 [ mulu16_sel::return#2 ] 2,002: zp[2]:113 [ mulu16_sel::return#10 ] 2,002: zp[2]:117 [ mulu16_sel::return#11 ] 1,666.83: zp[1]:30 [ mulu16_sel::select#5 ] 
Uplift Scope [mulu8_sel] 21,012: zp[1]:59 [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ] 20,002: zp[2]:182 [ mulu8_sel::$0 ] 20,002: zp[2]:184 [ mulu8_sel::$1 ] 15,010.5: zp[1]:60 [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ] 2,143.71: zp[1]:186 [ mulu8_sel::return#12 ] 2,002: zp[1]:167 [ mulu8_sel::return#0 ] 2,002: zp[1]:169 [ mulu8_sel::return#1 ] 2,002: zp[1]:171 [ mulu8_sel::return#2 ] 2,002: zp[1]:174 [ mulu8_sel::return#10 ] 2,002: zp[1]:176 [ mulu8_sel::return#11 ] 1,666.83: zp[1]:61 [ mulu8_sel::select#5 ] 
Uplift Scope [sin8s] 11,061.5: zp[2]:55 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] 5,005: zp[1]:57 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] 4,705: zp[1]:58 [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ] 2,002: zp[2]:164 [ sin8s::$4 ] 2,002: zp[1]:168 [ sin8s::x2#0 ] 2,002: zp[1]:172 [ sin8s::x3_6#0 ] 2,002: zp[1]:175 [ sin8s::x4#0 ] 2,002: zp[1]:177 [ sin8s::x5#0 ] 2,002: zp[1]:178 [ sin8s::x5_128#0 ] 500.5: zp[1]:170 [ sin8s::x3#0 ] 318.5: zp[1]:166 [ sin8s::x1#0 ] 202: zp[1]:162 [ sin8s::return#0 ] 166.83: zp[1]:173 [ sin8s::usinx#0 ] 27.81: zp[1]:54 [ sin8s::isUpper#10 ] 
Uplift Scope [print_str] 30,003: zp[2]:3 [ print_str::str#2 print_str::str#0 ] 
Uplift Scope [sin16s] 11,061.5: zp[4]:20 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] 4,705: zp[2]:24 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] 2,002: zp[4]:93 [ sin16s::$4 ] 2,002: zp[2]:101 [ sin16s::x2#0 ] 2,002: zp[2]:109 [ sin16s::x3_6#0 ] 2,002: zp[2]:115 [ sin16s::x4#0 ] 2,002: zp[2]:119 [ sin16s::x5#0 ] 2,002: zp[2]:121 [ sin16s::x5_128#0 ] 500.5: zp[2]:105 [ sin16s::x3#0 ] 500.5: zp[2]:123 [ sin16s::usinx#1 ] 318.5: zp[2]:97 [ sin16s::x1#0 ] 202: zp[2]:89 [ sin16s::return#0 ] 166.83: zp[2]:111 [ sin16s::usinx#0 ] 30.33: zp[1]:19 [ sin16s::isUpper#2 ] 
Uplift Scope [print_uchar] 2,002: zp[1]:79 [ print_uchar::$0 ] 2,002: zp[1]:80 [ print_uchar::$2 ] 525.75: zp[1]:78 [ print_uchar::b#0 ] 
Uplift Scope [memset] 3,336.67: zp[2]:9 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [sin16s_gen] 235.67: zp[2]:11 [ sin16s_gen::i#2 sin16s_gen::i#1 ] 202: zp[2]:91 [ sin16s_gen::$2 ] 138.88: zp[4]:13 [ sin16s_gen::x#2 sin16s_gen::x#1 ] 110.62: zp[2]:17 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ] 10.18: zp[4]:85 [ sin16s_gen::step#0 ] 
Uplift Scope [sin8s_gen] 235.67: zp[2]:48 [ sin8s_gen::i#2 sin8s_gen::i#1 ] 202: zp[1]:163 [ sin8s_gen::$2 ] 138.88: zp[2]:50 [ sin8s_gen::x#2 sin8s_gen::x#1 ] 110.62: zp[2]:52 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] 10.18: zp[2]:160 [ sin8s_gen::step#0 ] 
Uplift Scope [print_schar] 456.33: zp[1]:8 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ] 
Uplift Scope [div32u16u] 202: zp[2]:148 [ div32u16u::quotient_lo#0 ] 40.4: zp[2]:144 [ div32u16u::quotient_hi#0 ] 37.33: zp[4]:150 [ div32u16u::return#0 ] 22: zp[4]:81 [ div32u16u::return#2 ] 
Uplift Scope [main] 22: zp[2]:68 [ main::$10 ] 22: zp[2]:70 [ main::$9 ] 22: zp[2]:72 [ main::$3 ] 22: zp[2]:74 [ main::sw#0 ] 22: zp[1]:77 [ main::sd#0 ] 19.25: zp[1]:2 [ main::i#2 main::i#1 ] 11: zp[1]:76 [ main::$11 ] 3.67: zp[1]:67 [ main::sb#0 ] 
Uplift Scope [div16u] 37.33: zp[2]:190 [ div16u::return#0 ] 22: zp[2]:158 [ div16u::return#2 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_cls] 

Uplifting [mul8u] best 34948 combination zp[2]:63 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] zp[2]:65 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] reg byte a [ mul8u::$1 ] reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] zp[2]:180 [ mul8u::return#2 ] reg byte a [ mul8u::b#0 ] 
Uplifting [mul16u] best 34348 combination zp[4]:33 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] zp[4]:37 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] reg byte a [ mul16u::$1 ] zp[2]:31 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] zp[4]:127 [ mul16u::return#2 ] zp[2]:125 [ mul16u::b#0 ] 
Uplifting [divr16u] best 34138 combination zp[2]:41 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp[2]:45 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp[2]:43 [ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ] zp[2]:142 [ divr16u::return#3 ] zp[2]:146 [ divr16u::return#4 ] zp[2]:188 [ divr16u::return#2 ] 
Uplifting [print_char] best 33823 combination reg byte a [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ] 
Uplifting [] best 33823 combination zp[2]:6 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ] zp[2]:156 [ rem16u#0 ] 
Uplifting [mulu16_sel] best 33807 combination zp[2]:26 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ] zp[4]:131 [ mulu16_sel::$0 ] zp[4]:135 [ mulu16_sel::$1 ] zp[2]:28 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] zp[2]:139 [ mulu16_sel::return#12 ] zp[2]:99 [ mulu16_sel::return#0 ] zp[2]:103 [ mulu16_sel::return#1 ] zp[2]:107 [ mulu16_sel::return#2 ] zp[2]:113 [ mulu16_sel::return#10 ] zp[2]:117 [ mulu16_sel::return#11 ] reg byte x [ mulu16_sel::select#5 ] 
Uplifting [mulu8_sel] best 33749 combination reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ] zp[2]:182 [ mulu8_sel::$0 ] zp[2]:184 [ mulu8_sel::$1 ] reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ] reg byte a [ mulu8_sel::return#12 ] reg byte a [ mulu8_sel::return#0 ] zp[1]:169 [ mulu8_sel::return#1 ] zp[1]:171 [ mulu8_sel::return#2 ] zp[1]:174 [ mulu8_sel::return#10 ] zp[1]:176 [ mulu8_sel::return#11 ] zp[1]:61 [ mulu8_sel::select#5 ] 
Limited combination testing to 100 combinations of 196608 possible.
Uplifting [sin8s] best 33696 combination zp[2]:55 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] reg byte a [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ] zp[2]:164 [ sin8s::$4 ] reg byte a [ sin8s::x2#0 ] reg byte a [ sin8s::x3_6#0 ] zp[1]:175 [ sin8s::x4#0 ] zp[1]:177 [ sin8s::x5#0 ] zp[1]:178 [ sin8s::x5_128#0 ] zp[1]:170 [ sin8s::x3#0 ] zp[1]:166 [ sin8s::x1#0 ] zp[1]:162 [ sin8s::return#0 ] zp[1]:173 [ sin8s::usinx#0 ] zp[1]:54 [ sin8s::isUpper#10 ] 
Limited combination testing to 100 combinations of 5308416 possible.
Uplifting [print_str] best 33696 combination zp[2]:3 [ print_str::str#2 print_str::str#0 ] 
Uplifting [sin16s] best 33687 combination zp[4]:20 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] zp[2]:24 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] zp[4]:93 [ sin16s::$4 ] zp[2]:101 [ sin16s::x2#0 ] zp[2]:109 [ sin16s::x3_6#0 ] zp[2]:115 [ sin16s::x4#0 ] zp[2]:119 [ sin16s::x5#0 ] zp[2]:121 [ sin16s::x5_128#0 ] zp[2]:105 [ sin16s::x3#0 ] zp[2]:123 [ sin16s::usinx#1 ] zp[2]:97 [ sin16s::x1#0 ] zp[2]:89 [ sin16s::return#0 ] zp[2]:111 [ sin16s::usinx#0 ] reg byte y [ sin16s::isUpper#2 ] 
Uplifting [print_uchar] best 33672 combination reg byte a [ print_uchar::$0 ] reg byte x [ print_uchar::$2 ] reg byte x [ print_uchar::b#0 ] 
Uplifting [memset] best 33672 combination zp[2]:9 [ memset::dst#2 memset::dst#1 ] 
Uplifting [sin16s_gen] best 33672 combination zp[2]:11 [ sin16s_gen::i#2 sin16s_gen::i#1 ] zp[2]:91 [ sin16s_gen::$2 ] zp[4]:13 [ sin16s_gen::x#2 sin16s_gen::x#1 ] zp[2]:17 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ] zp[4]:85 [ sin16s_gen::step#0 ] 
Uplifting [sin8s_gen] best 33612 combination zp[2]:48 [ sin8s_gen::i#2 sin8s_gen::i#1 ] reg byte a [ sin8s_gen::$2 ] zp[2]:50 [ sin8s_gen::x#2 sin8s_gen::x#1 ] zp[2]:52 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] zp[2]:160 [ sin8s_gen::step#0 ] 
Uplifting [print_schar] best 33576 combination reg byte x [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ] 
Uplifting [div32u16u] best 33576 combination zp[2]:148 [ div32u16u::quotient_lo#0 ] zp[2]:144 [ div32u16u::quotient_hi#0 ] zp[4]:150 [ div32u16u::return#0 ] zp[4]:81 [ div32u16u::return#2 ] 
Uplifting [main] best 33496 combination zp[2]:68 [ main::$10 ] zp[2]:70 [ main::$9 ] zp[2]:72 [ main::$3 ] zp[2]:74 [ main::sw#0 ] reg byte a [ main::sd#0 ] zp[1]:2 [ main::i#2 main::i#1 ] reg byte a [ main::$11 ] zp[1]:67 [ main::sb#0 ] 
Uplifting [div16u] best 33496 combination zp[2]:190 [ div16u::return#0 ] zp[2]:158 [ div16u::return#2 ] 
Uplifting [RADIX] best 33496 combination 
Uplifting [print_cls] best 33496 combination 
Attempting to uplift remaining variables inzp[1]:169 [ mulu8_sel::return#1 ]
Uplifting [mulu8_sel] best 33490 combination reg byte a [ mulu8_sel::return#1 ] 
Attempting to uplift remaining variables inzp[1]:171 [ mulu8_sel::return#2 ]
Uplifting [mulu8_sel] best 33484 combination reg byte a [ mulu8_sel::return#2 ] 
Attempting to uplift remaining variables inzp[1]:174 [ mulu8_sel::return#10 ]
Uplifting [mulu8_sel] best 33478 combination reg byte a [ mulu8_sel::return#10 ] 
Attempting to uplift remaining variables inzp[1]:175 [ sin8s::x4#0 ]
Uplifting [sin8s] best 33474 combination reg byte a [ sin8s::x4#0 ] 
Attempting to uplift remaining variables inzp[1]:176 [ mulu8_sel::return#11 ]
Uplifting [mulu8_sel] best 33468 combination reg byte a [ mulu8_sel::return#11 ] 
Attempting to uplift remaining variables inzp[1]:177 [ sin8s::x5#0 ]
Uplifting [sin8s] best 33462 combination reg byte a [ sin8s::x5#0 ] 
Attempting to uplift remaining variables inzp[1]:178 [ sin8s::x5_128#0 ]
Uplifting [sin8s] best 33456 combination reg byte a [ sin8s::x5_128#0 ] 
Attempting to uplift remaining variables inzp[1]:61 [ mulu8_sel::select#5 ]
Uplifting [mulu8_sel] best 33456 combination zp[1]:61 [ mulu8_sel::select#5 ] 
Attempting to uplift remaining variables inzp[1]:170 [ sin8s::x3#0 ]
Uplifting [sin8s] best 33456 combination zp[1]:170 [ sin8s::x3#0 ] 
Attempting to uplift remaining variables inzp[1]:166 [ sin8s::x1#0 ]
Uplifting [sin8s] best 33456 combination zp[1]:166 [ sin8s::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:162 [ sin8s::return#0 ]
Uplifting [sin8s] best 33396 combination reg byte a [ sin8s::return#0 ] 
Attempting to uplift remaining variables inzp[1]:173 [ sin8s::usinx#0 ]
Uplifting [sin8s] best 33396 combination zp[1]:173 [ sin8s::usinx#0 ] 
Attempting to uplift remaining variables inzp[1]:54 [ sin8s::isUpper#10 ]
Uplifting [sin8s] best 33396 combination zp[1]:54 [ sin8s::isUpper#10 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 33396 combination zp[1]:2 [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp[1]:67 [ main::sb#0 ]
Uplifting [main] best 33396 combination zp[1]:67 [ main::sb#0 ] 
Coalescing zero page register [ zp[2]:24 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] ] with [ zp[2]:123 [ sin16s::usinx#1 ] ] - score: 2
Coalescing zero page register [ zp[2]:26 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ] ] with [ zp[2]:105 [ sin16s::x3#0 ] ] - score: 2
Coalescing zero page register [ zp[2]:41 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] with [ zp[2]:156 [ rem16u#0 ] ] - score: 2
Coalescing zero page register [ zp[2]:24 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 ] ] with [ zp[2]:89 [ sin16s::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 ] ] with [ zp[2]:101 [ sin16s::x2#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 ] ] with [ zp[2]:115 [ sin16s::x4#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:28 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] ] with [ zp[2]:125 [ mul16u::b#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:33 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] ] with [ zp[4]:127 [ mul16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:45 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp[2]:142 [ divr16u::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:45 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 ] ] with [ zp[2]:146 [ divr16u::return#4 ] ] - score: 1
Coalescing zero page register [ zp[2]:45 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#4 ] ] with [ zp[2]:188 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:55 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] ] with [ zp[2]:164 [ sin8s::$4 ] ] - score: 1
Coalescing zero page register [ zp[2]:63 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] ] with [ zp[2]:180 [ mul8u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:68 [ main::$10 ] ] with [ zp[2]:70 [ main::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:72 [ main::$3 ] ] with [ zp[2]:74 [ main::sw#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:81 [ div32u16u::return#2 ] ] with [ zp[4]:85 [ sin16s_gen::step#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:81 [ div32u16u::return#2 sin16s_gen::step#0 ] ] with [ zp[4]:150 [ div32u16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:99 [ mulu16_sel::return#0 ] ] with [ zp[2]:139 [ mulu16_sel::return#12 ] ] - score: 1
Coalescing zero page register [ zp[2]:107 [ mulu16_sel::return#2 ] ] with [ zp[2]:109 [ sin16s::x3_6#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:117 [ mulu16_sel::return#11 ] ] with [ zp[2]:119 [ sin16s::x5#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:131 [ mulu16_sel::$0 ] ] with [ zp[4]:135 [ mulu16_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:158 [ div16u::return#2 ] ] with [ zp[2]:160 [ sin8s_gen::step#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:158 [ div16u::return#2 sin8s_gen::step#0 ] ] with [ zp[2]:190 [ div16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:182 [ mulu8_sel::$0 ] ] with [ zp[2]:184 [ mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:24 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 ] ] with [ zp[2]:91 [ sin16s_gen::$2 ] ] - score: 1
Coalescing zero page register [ zp[2]:24 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$2 ] ] with [ zp[2]:111 [ sin16s::usinx#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 ] ] with [ zp[2]:103 [ mulu16_sel::return#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 ] ] with [ zp[2]:113 [ mulu16_sel::return#10 ] ] - score: 1
Coalescing zero page register [ zp[4]:33 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 ] ] with [ zp[4]:131 [ mulu16_sel::$0 mulu16_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:45 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#4 divr16u::return#2 ] ] with [ zp[2]:148 [ div32u16u::quotient_lo#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:45 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#4 divr16u::return#2 div32u16u::quotient_lo#0 ] ] with [ zp[2]:158 [ div16u::return#2 sin8s_gen::step#0 div16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:63 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 ] ] with [ zp[2]:182 [ mulu8_sel::$0 mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:68 [ main::$10 main::$9 ] ] with [ zp[2]:72 [ main::$3 main::sw#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:99 [ mulu16_sel::return#0 mulu16_sel::return#12 ] ] with [ zp[2]:107 [ mulu16_sel::return#2 sin16s::x3_6#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:99 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 ] ] with [ zp[2]:117 [ mulu16_sel::return#11 sin16s::x5#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:99 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 ] ] with [ zp[2]:121 [ sin16s::x5_128#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:9 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:3 [ print_str::str#2 print_str::str#0 ] ]
Coalescing zero page register [ zp[2]:11 [ sin16s_gen::i#2 sin16s_gen::i#1 ] ] with [ zp[2]:6 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ] ]
Coalescing zero page register [ zp[2]:41 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 ] ] with [ zp[2]:26 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 ] ]
Coalescing zero page register [ zp[2]:43 [ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ] ] with [ zp[2]:28 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 mul16u::b#0 ] ]
Coalescing zero page register [ zp[2]:45 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#4 divr16u::return#2 div32u16u::quotient_lo#0 div16u::return#2 sin8s_gen::step#0 div16u::return#0 ] ] with [ zp[2]:31 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] ]
Coalescing zero page register [ zp[2]:48 [ sin8s_gen::i#2 sin8s_gen::i#1 ] ] with [ zp[2]:17 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ] ]
Coalescing zero page register [ zp[2]:50 [ sin8s_gen::x#2 sin8s_gen::x#1 ] ] with [ zp[2]:24 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$2 sin16s::usinx#0 ] ]
Coalescing zero page register [ zp[1]:67 [ main::sb#0 ] ] with [ zp[1]:54 [ sin8s::isUpper#10 ] ]
Coalescing zero page register [ zp[2]:68 [ main::$10 main::$9 main::$3 main::sw#0 ] ] with [ zp[2]:52 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] ]
Coalescing zero page register [ zp[4]:93 [ sin16s::$4 ] ] with [ zp[4]:33 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 mulu16_sel::$0 mulu16_sel::$1 ] ]
Coalescing zero page register [ zp[2]:97 [ sin16s::x1#0 ] ] with [ zp[2]:55 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 ] ]
Coalescing zero page register [ zp[2]:99 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 ] ] with [ zp[2]:63 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mulu8_sel::$0 mulu8_sel::$1 ] ]
Coalescing zero page register [ zp[2]:144 [ div32u16u::quotient_hi#0 ] ] with [ zp[2]:65 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] ]
Coalescing zero page register [ zp[2]:41 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 ] ] with [ zp[2]:9 [ memset::dst#2 memset::dst#1 print_str::str#2 print_str::str#0 ] ]
Coalescing zero page register [ zp[2]:68 [ main::$10 main::$9 main::$3 main::sw#0 sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] ] with [ zp[2]:43 [ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 mul16u::b#0 ] ]
Allocated (was zp[2]:11) zp[2]:3 [ sin16s_gen::i#2 sin16s_gen::i#1 print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ]
Allocated (was zp[4]:13) zp[4]:5 [ sin16s_gen::x#2 sin16s_gen::x#1 ]
Allocated (was zp[4]:20) zp[4]:9 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
Allocated (was zp[4]:37) zp[4]:13 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated (was zp[2]:41) zp[2]:17 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 memset::dst#2 memset::dst#1 print_str::str#2 print_str::str#0 ]
Allocated (was zp[2]:45) zp[2]:19 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#4 divr16u::return#2 div32u16u::quotient_lo#0 div16u::return#2 sin8s_gen::step#0 div16u::return#0 mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
Allocated (was zp[2]:48) zp[2]:21 [ sin8s_gen::i#2 sin8s_gen::i#1 sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
Allocated (was zp[2]:50) zp[2]:23 [ sin8s_gen::x#2 sin8s_gen::x#1 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$2 sin16s::usinx#0 ]
Allocated (was zp[1]:61) zp[1]:25 [ mulu8_sel::select#5 ]
Allocated (was zp[1]:67) zp[1]:26 [ main::sb#0 sin8s::isUpper#10 ]
Allocated (was zp[2]:68) zp[2]:27 [ main::$10 main::$9 main::$3 main::sw#0 sin8s_gen::sintab#2 sin8s_gen::sintab#0 divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 mul16u::b#0 ]
Allocated (was zp[4]:81) zp[4]:29 [ div32u16u::return#2 sin16s_gen::step#0 div32u16u::return#0 ]
Allocated (was zp[4]:93) zp[4]:33 [ sin16s::$4 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 mulu16_sel::$0 mulu16_sel::$1 ]
Allocated (was zp[2]:97) zp[2]:37 [ sin16s::x1#0 sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 ]
Allocated (was zp[2]:99) zp[2]:39 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mulu8_sel::$0 mulu8_sel::$1 ]
Allocated (was zp[2]:144) zp[2]:41 [ div32u16u::quotient_hi#0 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Allocated (was zp[1]:166) zp[1]:43 [ sin8s::x1#0 ]
Allocated (was zp[1]:170) zp[1]:44 [ sin8s::x3#0 ]
Allocated (was zp[1]:173) zp[1]:45 [ sin8s::usinx#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Sinus Generator functions using only multiplication, addition and bit shifting
// Uses a single division for converting the wavelength to a reciprocal.
// Generates sinus using the series sin(x) = x - x^/3! + x^-5! - x^7/7! ...
// Uses the approximation sin(x) = x - x^/6 + x^/128
// Optimization possibility: Use symmetries when generating sinustables. wavelength%2==0 -> mirror symmetry over PI, wavelength%4==0 -> mirror symmetry over PI/2.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .const SIZEOF_SIGNED_WORD = 2
  .label print_screen = $400
  // Remainder after unsigned 16-bit division
  .label rem16u = $11
  .label print_char_cursor = 3
  // main
main: {
    .label wavelength = $c0
    .label __3 = $1b
    .label __9 = $1b
    .label __10 = $1b
    .label sb = $1a
    .label sw = $1b
    .label i = 2
    // [1] call sin8s_gen 
    // [160] phi from main to sin8s_gen [phi:main->sin8s_gen]
  sin8s_gen_from_main:
    jsr sin8s_gen
    // [2] phi from main to main::@2 [phi:main->main::@2]
  __b2_from_main:
    jmp __b2
    // main::@2
  __b2:
    // [3] call sin16s_gen 
    // [58] phi from main::@2 to sin16s_gen [phi:main::@2->sin16s_gen]
  sin16s_gen_from___b2:
    jsr sin16s_gen
    // [4] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [5] call print_cls 
    // [49] phi from main::@3 to print_cls [phi:main::@3->print_cls]
  print_cls_from___b3:
    jsr print_cls
    // [6] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [6] phi (byte*) print_char_cursor#45 = (const byte*) print_screen#0 [phi:main::@3->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [6] phi (byte) main::i#2 = (byte) 0 [phi:main::@3->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [6] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [6] phi (byte*) print_char_cursor#45 = (byte*) print_char_cursor#10 [phi:main::@5->main::@1#0] -- register_copy 
    // [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@5->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [7] (signed byte) main::sb#0 ← *((const signed byte*) main::sintabb + (byte) main::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda sintabb,y
    sta.z sb
    // [8] (word~) main::$10 ← (word)(byte) main::i#2 -- vwuz1=_word_vbuz2 
    lda.z i
    sta.z __10
    lda #0
    sta.z __10+1
    // [9] (word~) main::$9 ← (word~) main::$10 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z __9
    rol.z __9+1
    // [10] (signed word*~) main::$3 ← (const signed word*) main::sintabw + (word~) main::$9 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda.z __3
    adc #<sintabw
    sta.z __3
    lda.z __3+1
    adc #>sintabw
    sta.z __3+1
    // [11] (signed word) main::sw#0 ← *((signed word*~) main::$3) -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (sw),y
    pha
    iny
    lda (sw),y
    sta.z sw+1
    pla
    sta.z sw
    // [12] (byte~) main::$11 ← > (signed word) main::sw#0 -- vbuaa=_hi_vwsz1 
    lda.z sw+1
    // [13] (signed byte) main::sd#0 ← (signed byte) main::sb#0 - (signed byte)(byte~) main::$11 -- vbsaa=vbsz1_minus_vbsaa 
    eor #$ff
    sec
    adc.z sb
    // [14] (signed byte) print_schar::b#1 ← (signed byte) main::sd#0 -- vbsxx=vbsaa 
    tax
    // [15] call print_schar 
    jsr print_schar
    // [16] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  __b4_from___b1:
    jmp __b4
    // main::@4
  __b4:
    // [17] call print_str 
    // [21] phi from main::@4 to print_str [phi:main::@4->print_str]
  print_str_from___b4:
    jsr print_str
    jmp __b5
    // main::@5
  __b5:
    // [18] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [19] if((byte) main::i#1!=(byte) $c0) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c0
    cmp.z i
    bne __b1_from___b5
    jmp __breturn
    // main::@return
  __breturn:
    // [20] return 
    rts
    sintabb: .fill $c0, 0
    sintabw: .fill 2*$c0, 0
    str: .text "  "
    .byte 0
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($11) str)
print_str: {
    .label str = $11
    // [22] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  __b1_from_print_str:
    // [22] phi (byte*) print_str::str#2 = (const byte*) main::str [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<main.str
    sta.z str
    lda #>main.str
    sta.z str+1
    jmp __b1
    // print_str::@1
  __b1:
    // [23] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [24] return 
    rts
    // print_str::@2
  __b2:
    // [25] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [26] call print_char 
    // [28] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [28] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#10 [phi:print_str::@2->print_char#0] -- register_copy 
    // [28] phi (byte) print_char::ch#5 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [27] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [22] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
  __b1_from___b3:
    // [22] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [29] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [30] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#29 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [31] return 
    rts
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte register(X) b)
print_schar: {
    // [32] if((signed byte) print_schar::b#1<(signed byte) 0) goto print_schar::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1_from_print_schar
    // [33] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
  __b3_from_print_schar:
    jmp __b3
    // print_schar::@3
  __b3:
    // [34] call print_char 
    // [28] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
  print_char_from___b3:
    // [28] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#45 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [28] phi (byte) print_char::ch#5 = (byte) ' ' [phi:print_schar::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [35] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [35] phi (signed byte) print_schar::b#4 = (signed byte) print_schar::b#1 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    jmp __b2
    // print_schar::@2
  __b2:
    // [36] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#4
    // [37] call print_uchar 
    jsr print_uchar
    jmp __breturn
    // print_schar::@return
  __breturn:
    // [38] return 
    rts
    // [39] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
  __b1_from_print_schar:
    jmp __b1
    // print_schar::@1
  __b1:
    // [40] call print_char 
    // [28] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
  print_char_from___b1:
    // [28] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#45 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [28] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_schar::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_schar::@4
  __b4:
    // [41] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#1 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    jmp __b2_from___b4
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // [42] (byte~) print_uchar::$0 ← (byte) print_uchar::b#0 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [43] (byte) print_char::ch#3 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [44] call print_char 
  // Table of hexadecimal digits
    // [28] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [28] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#10 [phi:print_uchar->print_char#0] -- register_copy 
    // [28] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [45] (byte~) print_uchar::$2 ← (byte) print_uchar::b#0 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [46] (byte) print_char::ch#4 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [47] call print_char 
    // [28] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [28] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#10 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [28] phi (byte) print_char::ch#5 = (byte) print_char::ch#4 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [48] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [50] call memset 
    // [52] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [51] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $11
    // [53] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [53] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [54] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [55] return 
    rts
    // memset::@2
  __b2:
    // [56] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [57] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [53] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [53] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // sin16s_gen
// Generate signed (large) unsigned int sinus table - on the full -$7fff - $7fff range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_gen(signed word* zp($15) sintab)
sin16s_gen: {
    .label __2 = $17
    .label step = $1d
    .label sintab = $15
    // u[4.28]
    // Iterate over the table
    .label x = 5
    .label i = 3
    // [59] call div32u16u 
    // [132] phi from sin16s_gen to div32u16u [phi:sin16s_gen->div32u16u]
  div32u16u_from_sin16s_gen:
    jsr div32u16u
    // [60] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
    jmp __b3
    // sin16s_gen::@3
  __b3:
    // [61] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2
    // [62] phi from sin16s_gen::@3 to sin16s_gen::@1 [phi:sin16s_gen::@3->sin16s_gen::@1]
  __b1_from___b3:
    // [62] phi (signed word*) sin16s_gen::sintab#2 = (const signed word*) main::sintabw [phi:sin16s_gen::@3->sin16s_gen::@1#0] -- pwsz1=pwsc1 
    lda #<main.sintabw
    sta.z sintab
    lda #>main.sintabw
    sta.z sintab+1
    // [62] phi (dword) sin16s_gen::x#2 = (dword) 0 [phi:sin16s_gen::@3->sin16s_gen::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    lda #<0>>$10
    sta.z x+2
    lda #>0>>$10
    sta.z x+3
    // [62] phi (word) sin16s_gen::i#2 = (word) 0 [phi:sin16s_gen::@3->sin16s_gen::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // u[4.28]
    // sin16s_gen::@1
  __b1:
    // [63] if((word) sin16s_gen::i#2<(const word) main::wavelength) goto sin16s_gen::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.wavelength
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.wavelength
    bcc __b2
  !:
    jmp __breturn
    // sin16s_gen::@return
  __breturn:
    // [64] return 
    rts
    // sin16s_gen::@2
  __b2:
    // [65] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2 -- vduz1=vduz2 
    lda.z x
    sta.z sin16s.x
    lda.z x+1
    sta.z sin16s.x+1
    lda.z x+2
    sta.z sin16s.x+2
    lda.z x+3
    sta.z sin16s.x+3
    // [66] call sin16s 
    jsr sin16s
    // [67] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
    jmp __b4
    // sin16s_gen::@4
  __b4:
    // [68] (signed word~) sin16s_gen::$2 ← (signed word) sin16s::return#0
    // [69] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$2 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda.z __2
    sta (sintab),y
    iny
    lda.z __2+1
    sta (sintab),y
    // [70] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_SIGNED_WORD
    clc
    adc.z sintab
    sta.z sintab
    bcc !+
    inc.z sintab+1
  !:
    // [71] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0 -- vduz1=vduz1_plus_vduz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    lda.z x+2
    adc.z step+2
    sta.z x+2
    lda.z x+3
    adc.z step+3
    sta.z x+3
    // [72] (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [62] phi from sin16s_gen::@4 to sin16s_gen::@1 [phi:sin16s_gen::@4->sin16s_gen::@1]
  __b1_from___b4:
    // [62] phi (signed word*) sin16s_gen::sintab#2 = (signed word*) sin16s_gen::sintab#0 [phi:sin16s_gen::@4->sin16s_gen::@1#0] -- register_copy 
    // [62] phi (dword) sin16s_gen::x#2 = (dword) sin16s_gen::x#1 [phi:sin16s_gen::@4->sin16s_gen::@1#1] -- register_copy 
    // [62] phi (word) sin16s_gen::i#2 = (word) sin16s_gen::i#1 [phi:sin16s_gen::@4->sin16s_gen::@1#2] -- register_copy 
    jmp __b1
}
  // sin16s
// Calculate signed int sinus sin(x)
// x: unsigned long input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed int sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zp(9) x)
sin16s: {
    .label __4 = $21
    .label x = 9
    .label return = $17
    .label x1 = $25
    .label x2 = $11
    .label x3 = $11
    .label x3_6 = $27
    .label usinx = $17
    .label x4 = $11
    .label x5 = $27
    .label x5_128 = $27
    .label sinx = $17
    // [73] if((dword) sin16s::x#0<(const nomodify dword) PI_u4f28) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_u4f28>>$10
    bcc __b1_from_sin16s
    bne !+
    lda.z x+2
    cmp #<PI_u4f28>>$10
    bcc __b1_from_sin16s
    bne !+
    lda.z x+1
    cmp #>PI_u4f28
    bcc __b1_from_sin16s
    bne !+
    lda.z x
    cmp #<PI_u4f28
    bcc __b1_from_sin16s
  !:
    jmp __b4
    // sin16s::@4
  __b4:
    // [74] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const nomodify dword) PI_u4f28 -- vduz1=vduz1_minus_vduc1 
    lda.z x
    sec
    sbc #<PI_u4f28
    sta.z x
    lda.z x+1
    sbc #>PI_u4f28
    sta.z x+1
    lda.z x+2
    sbc #<PI_u4f28>>$10
    sta.z x+2
    lda.z x+3
    sbc #>PI_u4f28>>$10
    sta.z x+3
    // [75] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
  __b1_from___b4:
    // [75] phi (byte) sin16s::isUpper#2 = (byte) 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuyy=vbuc1 
    ldy #1
    // [75] phi (dword) sin16s::x#4 = (dword) sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp __b1
    // [75] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  __b1_from_sin16s:
    // [75] phi (byte) sin16s::isUpper#2 = (byte) 0 [phi:sin16s->sin16s::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [75] phi (dword) sin16s::x#4 = (dword) sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    jmp __b1
    // sin16s::@1
  __b1:
    // [76] if((dword) sin16s::x#4<(const nomodify dword) PI_HALF_u4f28) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc __b2_from___b1
    bne !+
    lda.z x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc __b2_from___b1
    bne !+
    lda.z x+1
    cmp #>PI_HALF_u4f28
    bcc __b2_from___b1
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f28
    bcc __b2_from___b1
  !:
    jmp __b5
    // sin16s::@5
  __b5:
    // [77] (dword) sin16s::x#2 ← (const nomodify dword) PI_u4f28 - (dword) sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc.z x
    sta.z x
    lda #>PI_u4f28
    sbc.z x+1
    sta.z x+1
    lda #<PI_u4f28>>$10
    sbc.z x+2
    sta.z x+2
    lda #>PI_u4f28>>$10
    sbc.z x+3
    sta.z x+3
    // [78] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
  __b2_from___b1:
  __b2_from___b5:
    // [78] phi (dword) sin16s::x#6 = (dword) sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    jmp __b2
    // sin16s::@2
  __b2:
    // [79] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3 -- vduz1=vduz2_rol_3 
    lda.z x
    asl
    sta.z __4
    lda.z x+1
    rol
    sta.z __4+1
    lda.z x+2
    rol
    sta.z __4+2
    lda.z x+3
    rol
    sta.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    // [80] (word) sin16s::x1#0 ← > (dword~) sin16s::$4 -- vwuz1=_hi_vduz2 
    lda.z __4+2
    sta.z x1
    lda.z __4+3
    sta.z x1+1
    // [81] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v1
    lda.z x1+1
    sta.z mulu16_sel.v1+1
    // [82] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [83] call mulu16_sel 
    // [113] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
  mulu16_sel_from___b2:
    // [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
    // [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [84] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12
    jmp __b7
    // sin16s::@7
  __b7:
    // [85] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z x2
    lda.z mulu16_sel.return+1
    sta.z x2+1
    // [86] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
    // [87] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [88] call mulu16_sel 
    // [113] phi from sin16s::@7 to mulu16_sel [phi:sin16s::@7->mulu16_sel]
  mulu16_sel_from___b7:
    // [113] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@7->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#1 [phi:sin16s::@7->mulu16_sel#1] -- register_copy 
    // [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#1 [phi:sin16s::@7->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [89] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z mulu16_sel.return_1
    lda.z mulu16_sel.return+1
    sta.z mulu16_sel.return_1+1
    jmp __b8
    // sin16s::@8
  __b8:
    // [90] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
    // [91] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
    // [92] call mulu16_sel 
    // [113] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
  mulu16_sel_from___b8:
    // [113] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [113] phi (word) mulu16_sel::v2#5 = (word)(number) $10000/(number) 6 [phi:sin16s::@8->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta.z mulu16_sel.v2
    lda #>$10000/6
    sta.z mulu16_sel.v2+1
    // [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#2 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [93] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12
    jmp __b9
    // sin16s::@9
  __b9:
    // [94] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2
    // [95] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z x1
    sec
    sbc.z x3_6
    sta.z usinx
    lda.z x1+1
    sbc.z x3_6+1
    sta.z usinx+1
    // [96] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
    // [97] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [98] call mulu16_sel 
    // [113] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
  mulu16_sel_from___b9:
    // [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#3 [phi:sin16s::@9->mulu16_sel#1] -- register_copy 
    // [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#3 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [99] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z mulu16_sel.return_1
    lda.z mulu16_sel.return+1
    sta.z mulu16_sel.return_1+1
    jmp __b10
    // sin16s::@10
  __b10:
    // [100] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10
    // [101] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
    // [102] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [103] call mulu16_sel 
    // [113] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
  mulu16_sel_from___b10:
    // [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#4 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
    // [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#4 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [104] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12
    jmp __b11
    // sin16s::@11
  __b11:
    // [105] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11
    // [106] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4 -- vwuz1=vwuz1_ror_4 
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    // [107] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z usinx
    clc
    adc.z x5_128
    sta.z usinx
    lda.z usinx+1
    adc.z x5_128+1
    sta.z usinx+1
    // [108] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12 -- vbuyy_eq_0_then_la1 
    cpy #0
    beq __b12
    jmp __b6
    // sin16s::@6
  __b6:
    // [109] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z sinx
    sta.z sinx
    lda #0
    sbc.z sinx+1
    sta.z sinx+1
    // [110] phi from sin16s::@12 sin16s::@6 to sin16s::@3 [phi:sin16s::@12/sin16s::@6->sin16s::@3]
  __b3_from___b12:
  __b3_from___b6:
    // [110] phi (signed word) sin16s::return#1 = (signed word) sin16s::return#5 [phi:sin16s::@12/sin16s::@6->sin16s::@3#0] -- register_copy 
    jmp __b3
    // sin16s::@3
  __b3:
    jmp __breturn
    // sin16s::@return
  __breturn:
    // [111] return 
    rts
    // sin16s::@12
  __b12:
    // [112] (signed word) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
    jmp __b3_from___b12
}
  // mulu16_sel
// Calculate val*val for two unsigned int values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zp($11) v1, word zp($1b) v2, byte register(X) select)
mulu16_sel: {
    .label __0 = $21
    .label __1 = $21
    .label v1 = $11
    .label v2 = $1b
    .label return = $27
    .label return_1 = $11
    // [114] (word) mul16u::a#1 ← (word) mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda.z v1
    sta.z mul16u.a
    lda.z v1+1
    sta.z mul16u.a+1
    // [115] (word) mul16u::b#0 ← (word) mulu16_sel::v2#5
    // [116] call mul16u 
    jsr mul16u
    // [117] (dword) mul16u::return#2 ← (dword) mul16u::res#2
    jmp __b1
    // mulu16_sel::@1
  __b1:
    // [118] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2
    // [119] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 -- vduz1=vduz1_rol_vbuxx 
    cpx #0
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    rol.z __1+2
    rol.z __1+3
    dex
    bne !-
  !e:
    // [120] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda.z __1+2
    sta.z return
    lda.z __1+3
    sta.z return+1
    jmp __breturn
    // mulu16_sel::@return
  __breturn:
    // [121] return 
    rts
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit unsigned ints into a 32-bit unsigned long
// mul16u(word zp($13) a, word zp($1b) b)
mul16u: {
    .label mb = $d
    .label a = $13
    .label res = $21
    .label b = $1b
    .label return = $21
    // [122] (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#0 -- vduz1=_dword_vwuz2 
    lda.z b
    sta.z mb
    lda.z b+1
    sta.z mb+1
    lda #0
    sta.z mb+2
    sta.z mb+3
    // [123] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  __b1_from_mul16u:
    // [123] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
    // [123] phi (dword) mul16u::res#2 = (dword) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    lda #<0>>$10
    sta.z res+2
    lda #>0>>$10
    sta.z res+3
    // [123] phi (word) mul16u::a#2 = (word) mul16u::a#1 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp __b1
    // mul16u::@1
  __b1:
    // [124] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda.z a
    bne __b2
    lda.z a+1
    bne __b2
    jmp __breturn
    // mul16u::@return
  __breturn:
    // [125] return 
    rts
    // mul16u::@2
  __b2:
    // [126] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1 -- vbuaa=vwuz1_band_vbuc1 
    lda #1
    and.z a
    // [127] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul16u::@4
  __b4:
    // [128] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    lda.z res+2
    adc.z mb+2
    sta.z res+2
    lda.z res+3
    adc.z mb+3
    sta.z res+3
    // [129] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [129] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    jmp __b3
    // mul16u::@3
  __b3:
    // [130] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr.z a+1
    ror.z a
    // [131] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1 -- vduz1=vduz1_rol_1 
    asl.z mb
    rol.z mb+1
    rol.z mb+2
    rol.z mb+3
    // [123] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
  __b1_from___b3:
    // [123] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [123] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [123] phi (word) mul16u::a#2 = (word) mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp __b1
}
  // div32u16u
// Divide unsigned 32-bit unsigned long dividend with a 16-bit unsigned int divisor
// The 16-bit unsigned int remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = $29
    .label quotient_lo = $13
    .label return = $1d
    // [133] call divr16u 
    // [142] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
  divr16u_from_div32u16u:
    // [142] phi (word) divr16u::dividend#6 = >(const nomodify dword) PI2_u4f28 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta.z divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta.z divr16u.dividend+1
    // [142] phi (word) divr16u::rem#11 = (byte) 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z divr16u.rem
    lda #>0
    sta.z divr16u.rem+1
    jsr divr16u
    // [134] (word) divr16u::return#3 ← (word) divr16u::return#0
    jmp __b1
    // div32u16u::@1
  __b1:
    // [135] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#3 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z quotient_hi
    lda.z divr16u.return+1
    sta.z quotient_hi+1
    // [136] (word) divr16u::rem#5 ← (word) rem16u#0
    // [137] call divr16u 
    // [142] phi from div32u16u::@1 to divr16u [phi:div32u16u::@1->divr16u]
  divr16u_from___b1:
    // [142] phi (word) divr16u::dividend#6 = <(const nomodify dword) PI2_u4f28 [phi:div32u16u::@1->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta.z divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta.z divr16u.dividend+1
    // [142] phi (word) divr16u::rem#11 = (word) divr16u::rem#5 [phi:div32u16u::@1->divr16u#1] -- register_copy 
    jsr divr16u
    // [138] (word) divr16u::return#4 ← (word) divr16u::return#0
    jmp __b2
    // div32u16u::@2
  __b2:
    // [139] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#4
    // [140] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda.z quotient_hi
    sta.z return+2
    lda.z quotient_hi+1
    sta.z return+3
    lda.z quotient_lo
    sta.z return
    lda.z quotient_lo+1
    sta.z return+1
    jmp __breturn
    // div32u16u::@return
  __breturn:
    // [141] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($1b) dividend, word zp($11) rem)
divr16u: {
    .label rem = $11
    .label dividend = $1b
    .label quotient = $13
    .label return = $13
    // [143] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  __b1_from_divr16u:
    // [143] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [143] phi (word) divr16u::quotient#3 = (word) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [143] phi (word) divr16u::dividend#4 = (word) divr16u::dividend#6 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [143] phi (word) divr16u::rem#6 = (word) divr16u::rem#11 [phi:divr16u->divr16u::@1#3] -- register_copy 
    jmp __b1
    // [143] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  __b1_from___b3:
    // [143] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [143] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [143] phi (word) divr16u::dividend#4 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [143] phi (word) divr16u::rem#6 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp __b1
    // divr16u::@1
  __b1:
    // [144] (word) divr16u::rem#0 ← (word) divr16u::rem#6 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [145] (byte~) divr16u::$1 ← > (word) divr16u::dividend#4 -- vbuaa=_hi_vwuz1 
    lda.z dividend+1
    // [146] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [147] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr16u::@4
  __b4:
    // [148] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [149] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [149] phi (word) divr16u::rem#7 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp __b2
    // divr16u::@2
  __b2:
    // [150] (word) divr16u::dividend#0 ← (word) divr16u::dividend#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [151] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [152] if((word) divr16u::rem#7<(const word) main::wavelength) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>main.wavelength
    bcc __b3_from___b2
    bne !+
    lda.z rem
    cmp #<main.wavelength
    bcc __b3_from___b2
  !:
    jmp __b5
    // divr16u::@5
  __b5:
    // [153] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [154] (word) divr16u::rem#2 ← (word) divr16u::rem#7 - (const word) main::wavelength -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<main.wavelength
    sta.z rem
    lda.z rem+1
    sbc #>main.wavelength
    sta.z rem+1
    // [155] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [155] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [155] phi (word) divr16u::rem#10 = (word) divr16u::rem#7 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp __b3
    // divr16u::@3
  __b3:
    // [156] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [157] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b3
    jmp __b6
    // divr16u::@6
  __b6:
    // [158] (word) rem16u#0 ← (word) divr16u::rem#10
    jmp __breturn
    // divr16u::@return
  __breturn:
    // [159] return 
    rts
}
  // sin8s_gen
// Generate signed char sinus table - on the full -$7f - $7f range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin8s_gen(signed byte* zp($1b) sintab)
sin8s_gen: {
    .label step = $13
    .label sintab = $1b
    // u[4.12]
    // Iterate over the table
    .label x = $17
    .label i = $15
    // [161] call div16u 
    // [237] phi from sin8s_gen to div16u [phi:sin8s_gen->div16u]
  div16u_from_sin8s_gen:
    jsr div16u
    // [162] (word) div16u::return#2 ← (word) div16u::return#0
    jmp __b3
    // sin8s_gen::@3
  __b3:
    // [163] (word) sin8s_gen::step#0 ← (word) div16u::return#2
    // [164] phi from sin8s_gen::@3 to sin8s_gen::@1 [phi:sin8s_gen::@3->sin8s_gen::@1]
  __b1_from___b3:
    // [164] phi (signed byte*) sin8s_gen::sintab#2 = (const signed byte*) main::sintabb [phi:sin8s_gen::@3->sin8s_gen::@1#0] -- pbsz1=pbsc1 
    lda #<main.sintabb
    sta.z sintab
    lda #>main.sintabb
    sta.z sintab+1
    // [164] phi (word) sin8s_gen::x#2 = (word) 0 [phi:sin8s_gen::@3->sin8s_gen::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    // [164] phi (word) sin8s_gen::i#2 = (word) 0 [phi:sin8s_gen::@3->sin8s_gen::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // u[4.12]
    // sin8s_gen::@1
  __b1:
    // [165] if((word) sin8s_gen::i#2<(const word) main::wavelength) goto sin8s_gen::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.wavelength
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.wavelength
    bcc __b2
  !:
    jmp __breturn
    // sin8s_gen::@return
  __breturn:
    // [166] return 
    rts
    // sin8s_gen::@2
  __b2:
    // [167] (word) sin8s::x#0 ← (word) sin8s_gen::x#2 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [168] call sin8s 
    jsr sin8s
    // [169] (signed byte) sin8s::return#0 ← (signed byte) sin8s::return#1
    jmp __b4
    // sin8s_gen::@4
  __b4:
    // [170] (signed byte~) sin8s_gen::$2 ← (signed byte) sin8s::return#0
    // [171] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$2 -- _deref_pbsz1=vbsaa 
    ldy #0
    sta (sintab),y
    // [172] (signed byte*) sin8s_gen::sintab#0 ← ++ (signed byte*) sin8s_gen::sintab#2 -- pbsz1=_inc_pbsz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // [173] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // [174] (word) sin8s_gen::i#1 ← ++ (word) sin8s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [164] phi from sin8s_gen::@4 to sin8s_gen::@1 [phi:sin8s_gen::@4->sin8s_gen::@1]
  __b1_from___b4:
    // [164] phi (signed byte*) sin8s_gen::sintab#2 = (signed byte*) sin8s_gen::sintab#0 [phi:sin8s_gen::@4->sin8s_gen::@1#0] -- register_copy 
    // [164] phi (word) sin8s_gen::x#2 = (word) sin8s_gen::x#1 [phi:sin8s_gen::@4->sin8s_gen::@1#1] -- register_copy 
    // [164] phi (word) sin8s_gen::i#2 = (word) sin8s_gen::i#1 [phi:sin8s_gen::@4->sin8s_gen::@1#2] -- register_copy 
    jmp __b1
}
  // sin8s
// Calculate signed char sinus sin(x)
// x: unsigned int input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed char sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zp($25) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label __4 = $25
    .label x = $25
    .label x1 = $2b
    .label x3 = $2c
    .label usinx = $2d
    // Move x1 into the range 0-PI/2 using sinus mirror symmetries
    .label isUpper = $1a
    // [175] if((word) sin8s::x#0<(const nomodify word) PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc __b1_from_sin8s
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc __b1_from_sin8s
  !:
    jmp __b5
    // sin8s::@5
  __b5:
    // [176] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const nomodify word) PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [177] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  __b1_from___b5:
    // [177] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [177] phi (word) sin8s::x#4 = (word) sin8s::x#1 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp __b1
    // [177] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  __b1_from_sin8s:
    // [177] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [177] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s->sin8s::@1#1] -- register_copy 
    jmp __b1
    // sin8s::@1
  __b1:
    // [178] if((word) sin8s::x#4<(const nomodify word) PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc __b2_from___b1
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc __b2_from___b1
  !:
    jmp __b6
    // sin8s::@6
  __b6:
    // [179] (word) sin8s::x#2 ← (const nomodify word) PI_u4f12 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [180] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  __b2_from___b1:
  __b2_from___b6:
    // [180] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    jmp __b2
    // sin8s::@2
  __b2:
    // [181] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    // [182] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda.z __4+1
    sta.z x1
    // [183] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuxx=vbuz1 
    ldx.z x1
    // [184] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [185] call mulu8_sel 
    // [218] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  mulu8_sel_from___b2:
    // [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [186] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
    jmp __b9
    // sin8s::@9
  __b9:
    // [187] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
    // [188] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuxx=vbuaa 
    tax
    // [189] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [190] call mulu8_sel 
    // [218] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
  mulu8_sel_from___b9:
    // [218] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [191] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
    jmp __b10
    // sin8s::@10
  __b10:
    // [192] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta.z x3
    // [193] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [194] call mulu8_sel 
    // [218] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  mulu8_sel_from___b10:
    // [218] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [218] phi (byte) mulu8_sel::v2#5 = (const nomodify byte) sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
    // [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [195] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
    jmp __b11
    // sin8s::@11
  __b11:
    // [196] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
    // [197] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc.z x1
    sta.z usinx
    // [198] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [199] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [200] call mulu8_sel 
    // [218] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  mulu8_sel_from___b11:
    // [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [201] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
    jmp __b12
    // sin8s::@12
  __b12:
    // [202] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
    // [203] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuxx=vbuaa 
    tax
    // [204] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [205] call mulu8_sel 
    // [218] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  mulu8_sel_from___b12:
    // [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [206] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
    jmp __b13
    // sin8s::@13
  __b13:
    // [207] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
    // [208] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // [209] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc.z usinx
    tax
    // [210] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc __b3_from___b13
    jmp __b7
    // sin8s::@7
  __b7:
    // [211] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
    // [212] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
  __b3_from___b13:
  __b3_from___b7:
    // [212] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    jmp __b3
    // sin8s::@3
  __b3:
    // [213] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    cmp #0
    beq __b14
    jmp __b8
    // sin8s::@8
  __b8:
    // [214] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // [215] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
  __b4_from___b14:
  __b4_from___b8:
    // [215] phi (signed byte) sin8s::return#1 = (signed byte) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    jmp __b4
    // sin8s::@4
  __b4:
    jmp __breturn
    // sin8s::@return
  __breturn:
    // [216] return 
    rts
    // sin8s::@14
  __b14:
    // [217] (signed byte) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    jmp __b4_from___b14
}
  // mulu8_sel
// Calculate val*val for two unsigned char values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte register(X) v1, byte register(Y) v2, byte zp($19) select)
mulu8_sel: {
    .label __0 = $27
    .label __1 = $27
    .label select = $19
    // [219] (byte) mul8u::a#1 ← (byte) mulu8_sel::v1#5
    // [220] (byte) mul8u::b#0 ← (byte) mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
    // [221] call mul8u 
    jsr mul8u
    // [222] (word) mul8u::return#2 ← (word) mul8u::res#2
    jmp __b1
    // mulu8_sel::@1
  __b1:
    // [223] (word~) mulu8_sel::$0 ← (word) mul8u::return#2
    // [224] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy.z select
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    dey
    bne !-
  !e:
    // [225] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuaa=_hi_vwuz1 
    lda.z __1+1
    jmp __breturn
    // mulu8_sel::@return
  __breturn:
    // [226] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = $29
    .label res = $27
    .label return = $27
    // [227] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#0 -- vwuz1=_word_vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [228] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  __b1_from_mul8u:
    // [228] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [228] phi (word) mul8u::res#2 = (word) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [228] phi (byte) mul8u::a#2 = (byte) mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp __b1
    // mul8u::@1
  __b1:
    // [229] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    jmp __breturn
    // mul8u::@return
  __breturn:
    // [230] return 
    rts
    // mul8u::@2
  __b2:
    // [231] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [232] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul8u::@4
  __b4:
    // [233] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [234] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [234] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp __b3
    // mul8u::@3
  __b3:
    // [235] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // [236] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [228] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  __b1_from___b3:
    // [228] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [228] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [228] phi (byte) mul8u::a#2 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // div16u
// Performs division on two 16 bit unsigned ints
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $13
    // [238] call divr16u 
    // [142] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    // [142] phi (word) divr16u::dividend#6 = (const nomodify word) PI2_u4f12 [phi:div16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z divr16u.dividend
    lda #>PI2_u4f12
    sta.z divr16u.dividend+1
    // [142] phi (word) divr16u::rem#11 = (byte) 0 [phi:div16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z divr16u.rem
    lda #>0
    sta.z divr16u.rem+1
    jsr divr16u
    // [239] (word) divr16u::return#2 ← (word) divr16u::return#0
    jmp __b1
    // div16u::@1
  __b1:
    // [240] (word) div16u::return#0 ← (word) divr16u::return#2
    jmp __breturn
    // div16u::@return
  __breturn:
    // [241] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b5
Removing instruction jmp __b2
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b6
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __b8
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda.z i with TYA
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Replacing instruction ldx.z x1 with TAX
Replacing instruction ldy.z x1 with TAY
Replacing instruction ldx.z x3 with TAX
Removing instruction lda #>0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b5 with __b1
Replacing label __b1_from_print_schar with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b12 with __b3
Replacing label __b3_from___b2 with __b3
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b13 with __b3
Replacing label __b4_from___b14 with __b4
Replacing label __b3_from___b2 with __b3
Removing instruction __b2_from_main:
Removing instruction sin16s_gen_from___b2:
Removing instruction __b3_from___b2:
Removing instruction print_cls_from___b3:
Removing instruction __b1_from___b5:
Removing instruction __b4_from___b1:
Removing instruction print_str_from___b4:
Removing instruction __b3_from_print_schar:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_print_schar:
Removing instruction print_char_from___b1:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b5:
Removing instruction mulu16_sel_from___b8:
Removing instruction __b3_from___b12:
Removing instruction __b3_from___b6:
Removing instruction __breturn:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b5:
Removing instruction __breturn:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b13:
Removing instruction __b3_from___b7:
Removing instruction __b4_from___b14:
Removing instruction __b4_from___b8:
Removing instruction __breturn:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Removing instruction __breturn:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction sin8s_gen_from_main:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1_from_print_str:
Removing instruction __breturn:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction div32u16u_from_sin16s_gen:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __b5:
Removing instruction mulu16_sel_from___b2:
Removing instruction __b7:
Removing instruction mulu16_sel_from___b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction mulu16_sel_from___b9:
Removing instruction __b10:
Removing instruction mulu16_sel_from___b10:
Removing instruction __b11:
Removing instruction __b6:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_mul16u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Removing instruction divr16u_from_div32u16u:
Removing instruction __b1:
Removing instruction divr16u_from___b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b1_from_divr16u:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction div16u_from_sin8s_gen:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b6:
Removing instruction mulu8_sel_from___b2:
Removing instruction __b9:
Removing instruction mulu8_sel_from___b9:
Removing instruction __b10:
Removing instruction mulu8_sel_from___b10:
Removing instruction __b11:
Removing instruction mulu8_sel_from___b11:
Removing instruction __b12:
Removing instruction mulu8_sel_from___b12:
Removing instruction __b13:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_mul8u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Removing instruction divr16u_from_div16u:
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to __b3 in beq __b12
Replacing jump to rts with rts in jmp __b3
Replacing jump to rts with rts in jmp __b4
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from_sin16s to __b4
Relabelling long label __b1_from_sin8s to __b5
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #<0
Removing instruction lda #<0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b12:
Removing instruction __b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction rts
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(const nomodify word) PI2_u4f12 = (word) $6488
(const nomodify dword) PI2_u4f28 = (dword) $6487ed51
(const nomodify word) PI_HALF_u4f12 = (word) $1922
(const nomodify dword) PI_HALF_u4f28 = (dword) $1921fb54
(const nomodify word) PI_u4f12 = (word) $3244
(const nomodify dword) PI_u4f28 = (dword) $3243f6a9
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(label) div16u::@1
(label) div16u::@return
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(word) div16u::return#0 return zp[2]:19 37.33333333333333
(word) div16u::return#2 return zp[2]:19 22.0
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(label) div32u16u::@1
(label) div32u16u::@2
(label) div32u16u::@return
(dword) div32u16u::dividend
(word) div32u16u::divisor
(dword) div32u16u::quotient
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0 quotient_hi zp[2]:41 40.4
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0 quotient_lo zp[2]:19 202.0
(dword) div32u16u::return
(dword) div32u16u::return#0 return zp[4]:29 37.33333333333333
(dword) div32u16u::return#2 return zp[4]:29 22.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 20002.0
(byte~) divr16u::$2 reg byte a 20002.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp[2]:27 2500.25
(word) divr16u::dividend#4 dividend zp[2]:27 4429.142857142857
(word) divr16u::dividend#6 dividend zp[2]:27 1001.0
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 15001.5
(byte) divr16u::i#2 reg byte x 1538.6153846153845
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp[2]:19 15001.5
(word) divr16u::quotient#2 quotient zp[2]:19 10001.0
(word) divr16u::quotient#3 quotient zp[2]:19 2500.25
(word) divr16u::rem
(word) divr16u::rem#0 rem zp[2]:17 7500.75
(word) divr16u::rem#1 rem zp[2]:17 20002.0
(word) divr16u::rem#10 rem zp[2]:17 10334.666666666666
(word) divr16u::rem#11 rem zp[2]:17 1102.0
(word) divr16u::rem#2 rem zp[2]:17 20002.0
(word) divr16u::rem#5 rem zp[2]:17 202.0
(word) divr16u::rem#6 rem zp[2]:17 21003.0
(word) divr16u::rem#7 rem zp[2]:17 10001.0
(word) divr16u::return
(word) divr16u::return#0 return zp[2]:19 3788.25
(word) divr16u::return#2 return zp[2]:19 202.0
(word) divr16u::return#3 return zp[2]:19 202.0
(word) divr16u::return#4 return zp[2]:19 202.0
(void()) main()
(word~) main::$10 zp[2]:27 22.0
(byte~) main::$11 reg byte a 11.0
(signed word*~) main::$3 zp[2]:27 22.0
(word~) main::$9 zp[2]:27 22.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::i#1 i zp[1]:2 16.5
(byte) main::i#2 i zp[1]:2 2.75
(signed byte) main::sb
(signed byte) main::sb#0 sb zp[1]:26 3.6666666666666665
(signed byte) main::sd
(signed byte) main::sd#0 reg byte a 22.0
(const signed byte*) main::sintabb[(number) $c0]  = { fill( $c0, 0) }
(const signed word*) main::sintabw[(number) $c0]  = { fill( $c0, 0) }
(const byte*) main::str[(byte) 3]  = (byte*) "  "
(signed word) main::sw
(signed word) main::sw#0 sw zp[2]:27 22.0
(const word) main::wavelength = (word) $c0
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:17 2002.0
(byte*) memset::dst#2 dst zp[2]:17 1334.6666666666667
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(const byte*) print_screen#0
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(byte~) mul16u::$1 reg byte a 2.0000002E7
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@3
(label) mul16u::@4
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::a#0 a zp[2]:19 1.0000001E7
(word) mul16u::a#1 a zp[2]:19 36667.33333333333
(word) mul16u::a#2 a zp[2]:19 6683334.166666666
(word) mul16u::b
(word) mul16u::b#0 b zp[2]:27 10001.0
(dword) mul16u::mb
(dword) mul16u::mb#0 mb zp[4]:13 200002.0
(dword) mul16u::mb#1 mb zp[4]:13 2.0000002E7
(dword) mul16u::mb#2 mb zp[4]:13 4300000.571428571
(dword) mul16u::res
(dword) mul16u::res#1 res zp[4]:33 2.0000002E7
(dword) mul16u::res#2 res zp[4]:33 5001667.333333333
(dword) mul16u::res#6 res zp[4]:33 1.0000001E7
(dword) mul16u::return
(dword) mul16u::return#2 return zp[4]:33 20002.0
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 reg byte a 2.0000002E7
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0 reg byte x 1.0000001E7
(byte) mul8u::a#1 reg byte x 36667.33333333333
(byte) mul8u::a#2 reg byte x 6683334.166666666
(byte) mul8u::b
(byte) mul8u::b#0 reg byte a 10001.0
(word) mul8u::mb
(word) mul8u::mb#0 mb zp[2]:41 200002.0
(word) mul8u::mb#1 mb zp[2]:41 2.0000002E7
(word) mul8u::mb#2 mb zp[2]:41 4300000.571428571
(word) mul8u::res
(word) mul8u::res#1 res zp[2]:39 2.0000002E7
(word) mul8u::res#2 res zp[2]:39 5001667.333333333
(word) mul8u::res#6 res zp[2]:39 1.0000001E7
(word) mul8u::return
(word) mul8u::return#2 return zp[2]:39 20002.0
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0 zp[4]:33 20002.0
(dword~) mulu16_sel::$1 zp[4]:33 20002.0
(label) mulu16_sel::@1
(label) mulu16_sel::@return
(word) mulu16_sel::return
(word) mulu16_sel::return#0 return zp[2]:39 2002.0
(word) mulu16_sel::return#1 return_1 zp[2]:17 2002.0
(word) mulu16_sel::return#10 return_1 zp[2]:17 2002.0
(word) mulu16_sel::return#11 return zp[2]:39 2002.0
(word) mulu16_sel::return#12 return zp[2]:39 2143.714285714286
(word) mulu16_sel::return#2 return zp[2]:39 2002.0
(byte) mulu16_sel::select
(byte) mulu16_sel::select#5 reg byte x 1666.8333333333333
(word) mulu16_sel::v1
(word) mulu16_sel::v1#0 v1 zp[2]:17 1001.0
(word) mulu16_sel::v1#1 v1 zp[2]:17 1001.0
(word) mulu16_sel::v1#2 v1 zp[2]:17 2002.0
(word) mulu16_sel::v1#3 v1 zp[2]:17 1001.0
(word) mulu16_sel::v1#4 v1 zp[2]:17 1001.0
(word) mulu16_sel::v1#5 v1 zp[2]:17 15006.0
(word) mulu16_sel::v2
(word) mulu16_sel::v2#0 v2 zp[2]:27 2002.0
(word) mulu16_sel::v2#1 v2 zp[2]:27 2002.0
(word) mulu16_sel::v2#3 v2 zp[2]:27 2002.0
(word) mulu16_sel::v2#4 v2 zp[2]:27 2002.0
(word) mulu16_sel::v2#5 v2 zp[2]:27 7002.5
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0 zp[2]:39 20002.0
(word~) mulu8_sel::$1 zp[2]:39 20002.0
(label) mulu8_sel::@1
(label) mulu8_sel::@return
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0 reg byte a 2002.0
(byte) mulu8_sel::return#1 reg byte a 2002.0
(byte) mulu8_sel::return#10 reg byte a 2002.0
(byte) mulu8_sel::return#11 reg byte a 2002.0
(byte) mulu8_sel::return#12 reg byte a 2143.714285714286
(byte) mulu8_sel::return#2 reg byte a 2002.0
(byte) mulu8_sel::select
(byte) mulu8_sel::select#5 select zp[1]:25 1666.8333333333333
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0 reg byte x 1001.0
(byte) mulu8_sel::v1#1 reg byte x 1001.0
(byte) mulu8_sel::v1#2 reg byte x 2002.0
(byte) mulu8_sel::v1#3 reg byte x 1001.0
(byte) mulu8_sel::v1#4 reg byte x 1001.0
(byte) mulu8_sel::v1#5 reg byte x 15006.0
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0 reg byte y 2002.0
(byte) mulu8_sel::v2#1 reg byte y 2002.0
(byte) mulu8_sel::v2#3 reg byte y 2002.0
(byte) mulu8_sel::v2#4 reg byte y 2002.0
(byte) mulu8_sel::v2#5 reg byte y 7002.5
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 20002.0
(byte) print_char::ch#3 reg byte a 2002.0
(byte) print_char::ch#4 reg byte a 2002.0
(byte) print_char::ch#5 reg byte a 112004.0
(byte*) print_char_cursor
(byte*) print_char_cursor#10 print_char_cursor zp[2]:3 4000.535714285714
(byte*) print_char_cursor#29 print_char_cursor zp[2]:3 106103.5
(byte*) print_char_cursor#45 print_char_cursor zp[2]:3 17.75
(void()) print_cls()
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(void()) print_schar((signed byte) print_schar::b)
(label) print_schar::@1
(label) print_schar::@2
(label) print_schar::@3
(label) print_schar::@4
(label) print_schar::@return
(signed byte) print_schar::b
(signed byte) print_schar::b#0 reg byte x 202.0
(signed byte) print_schar::b#1 reg byte x 52.33333333333333
(signed byte) print_schar::b#4 reg byte x 202.0
(byte*) print_screen
(const byte*) print_screen#0 print_screen = (byte*) 1024
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:17 20002.0
(byte*) print_str::str#2 str zp[2]:17 10001.0
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 reg byte a 2002.0
(byte~) print_uchar::$2 reg byte x 2002.0
(label) print_uchar::@1
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0 reg byte x 525.75
(word) rem16u
(word) rem16u#0 rem16u zp[2]:17 220.39999999999998
(signed word()) sin16s((dword) sin16s::x)
(dword~) sin16s::$4 zp[4]:33 2002.0
(label) sin16s::@1
(label) sin16s::@10
(label) sin16s::@11
(label) sin16s::@12
(label) sin16s::@2
(label) sin16s::@3
(label) sin16s::@4
(label) sin16s::@5
(label) sin16s::@6
(label) sin16s::@7
(label) sin16s::@8
(label) sin16s::@9
(label) sin16s::@return
(byte) sin16s::isUpper
(byte) sin16s::isUpper#2 reg byte y 30.333333333333332
(signed word) sin16s::return
(signed word) sin16s::return#0 return zp[2]:23 202.0
(signed word) sin16s::return#1 return zp[2]:23 701.0
(signed word) sin16s::return#5 return zp[2]:23 2002.0
(signed word) sin16s::sinx
(signed word) sin16s::sinx#1 sinx zp[2]:23 2002.0
(word) sin16s::usinx
(word) sin16s::usinx#0 usinx zp[2]:23 166.83333333333334
(word) sin16s::usinx#1 usinx zp[2]:23 500.5
(dword) sin16s::x
(dword) sin16s::x#0 x zp[4]:9 1552.0
(dword) sin16s::x#1 x zp[4]:9 2002.0
(dword) sin16s::x#2 x zp[4]:9 2002.0
(dword) sin16s::x#4 x zp[4]:9 2502.5
(dword) sin16s::x#6 x zp[4]:9 3003.0
(word) sin16s::x1
(word) sin16s::x1#0 x1 zp[2]:37 318.5
(word) sin16s::x2
(word) sin16s::x2#0 x2 zp[2]:17 2002.0
(word) sin16s::x3
(word) sin16s::x3#0 x3 zp[2]:17 500.5
(word) sin16s::x3_6
(word) sin16s::x3_6#0 x3_6 zp[2]:39 2002.0
(word) sin16s::x4
(word) sin16s::x4#0 x4 zp[2]:17 2002.0
(word) sin16s::x5
(word) sin16s::x5#0 x5 zp[2]:39 2002.0
(word) sin16s::x5_128
(word) sin16s::x5_128#0 x5_128 zp[2]:39 2002.0
(void()) sin16s_gen((signed word*) sin16s_gen::sintab , (word) sin16s_gen::wavelength)
(signed word~) sin16s_gen::$2 zp[2]:23 202.0
(label) sin16s_gen::@1
(label) sin16s_gen::@2
(label) sin16s_gen::@3
(label) sin16s_gen::@4
(label) sin16s_gen::@return
(word) sin16s_gen::i
(word) sin16s_gen::i#1 i zp[2]:3 202.0
(word) sin16s_gen::i#2 i zp[2]:3 33.666666666666664
(signed word*) sin16s_gen::sintab
(signed word*) sin16s_gen::sintab#0 sintab zp[2]:21 67.33333333333333
(signed word*) sin16s_gen::sintab#2 sintab zp[2]:21 43.285714285714285
(dword) sin16s_gen::step
(dword) sin16s_gen::step#0 step zp[4]:29 10.181818181818182
(word) sin16s_gen::wavelength
(dword) sin16s_gen::x
(dword) sin16s_gen::x#1 x zp[4]:5 101.0
(dword) sin16s_gen::x#2 x zp[4]:5 37.875
(signed byte()) sin8s((word) sin8s::x)
(word~) sin8s::$4 zp[2]:37 2002.0
(label) sin8s::@1
(label) sin8s::@10
(label) sin8s::@11
(label) sin8s::@12
(label) sin8s::@13
(label) sin8s::@14
(label) sin8s::@2
(label) sin8s::@3
(label) sin8s::@4
(label) sin8s::@5
(label) sin8s::@6
(label) sin8s::@7
(label) sin8s::@8
(label) sin8s::@9
(label) sin8s::@return
(const nomodify byte) sin8s::DIV_6 = (byte) $2b
(byte) sin8s::isUpper
(byte) sin8s::isUpper#10 isUpper zp[1]:26 27.805555555555557
(signed byte) sin8s::return
(signed byte) sin8s::return#0 reg byte a 202.0
(signed byte) sin8s::return#1 reg byte a 701.0
(signed byte) sin8s::return#5 reg byte a 2002.0
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#1 reg byte a 2002.0
(byte) sin8s::usinx
(byte) sin8s::usinx#0 usinx zp[1]:45 166.83333333333334
(byte) sin8s::usinx#1 reg byte x 2002.0
(byte) sin8s::usinx#2 reg byte x 2002.0
(byte) sin8s::usinx#4 reg byte x 1001.0
(word) sin8s::x
(word) sin8s::x#0 x zp[2]:37 1552.0
(word) sin8s::x#1 x zp[2]:37 2002.0
(word) sin8s::x#2 x zp[2]:37 2002.0
(word) sin8s::x#4 x zp[2]:37 2502.5
(word) sin8s::x#6 x zp[2]:37 3003.0
(byte) sin8s::x1
(byte) sin8s::x1#0 x1 zp[1]:43 318.5
(byte) sin8s::x2
(byte) sin8s::x2#0 reg byte a 2002.0
(byte) sin8s::x3
(byte) sin8s::x3#0 x3 zp[1]:44 500.5
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0 reg byte a 2002.0
(byte) sin8s::x4
(byte) sin8s::x4#0 reg byte a 2002.0
(byte) sin8s::x5
(byte) sin8s::x5#0 reg byte a 2002.0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0 reg byte a 2002.0
(void()) sin8s_gen((signed byte*) sin8s_gen::sintab , (word) sin8s_gen::wavelength)
(signed byte~) sin8s_gen::$2 reg byte a 202.0
(label) sin8s_gen::@1
(label) sin8s_gen::@2
(label) sin8s_gen::@3
(label) sin8s_gen::@4
(label) sin8s_gen::@return
(word) sin8s_gen::i
(word) sin8s_gen::i#1 i zp[2]:21 202.0
(word) sin8s_gen::i#2 i zp[2]:21 33.666666666666664
(signed byte*) sin8s_gen::sintab
(signed byte*) sin8s_gen::sintab#0 sintab zp[2]:27 67.33333333333333
(signed byte*) sin8s_gen::sintab#2 sintab zp[2]:27 43.285714285714285
(word) sin8s_gen::step
(word) sin8s_gen::step#0 step zp[2]:19 10.181818181818182
(word) sin8s_gen::wavelength
(word) sin8s_gen::x
(word) sin8s_gen::x#1 x zp[2]:23 101.0
(word) sin8s_gen::x#2 x zp[2]:23 37.875

zp[1]:2 [ main::i#2 main::i#1 ]
reg byte a [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
reg byte x [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
zp[2]:3 [ sin16s_gen::i#2 sin16s_gen::i#1 print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ]
zp[4]:5 [ sin16s_gen::x#2 sin16s_gen::x#1 ]
reg byte y [ sin16s::isUpper#2 ]
zp[4]:9 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
reg byte x [ mulu16_sel::select#5 ]
zp[4]:13 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp[2]:17 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 memset::dst#2 memset::dst#1 print_str::str#2 print_str::str#0 ]
zp[2]:19 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#4 divr16u::return#2 div32u16u::quotient_lo#0 div16u::return#2 sin8s_gen::step#0 div16u::return#0 mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[2]:21 [ sin8s_gen::i#2 sin8s_gen::i#1 sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
zp[2]:23 [ sin8s_gen::x#2 sin8s_gen::x#1 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$2 sin16s::usinx#0 ]
reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
reg byte a [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
zp[1]:25 [ mulu8_sel::select#5 ]
reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
zp[1]:26 [ main::sb#0 sin8s::isUpper#10 ]
zp[2]:27 [ main::$10 main::$9 main::$3 main::sw#0 sin8s_gen::sintab#2 sin8s_gen::sintab#0 divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 mul16u::b#0 ]
reg byte a [ main::$11 ]
reg byte a [ main::sd#0 ]
reg byte x [ print_uchar::b#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
zp[4]:29 [ div32u16u::return#2 sin16s_gen::step#0 div32u16u::return#0 ]
zp[4]:33 [ sin16s::$4 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 mulu16_sel::$0 mulu16_sel::$1 ]
zp[2]:37 [ sin16s::x1#0 sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 ]
zp[2]:39 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mulu8_sel::$0 mulu8_sel::$1 ]
reg byte a [ mul16u::$1 ]
zp[2]:41 [ div32u16u::quotient_hi#0 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ sin8s::return#0 ]
reg byte a [ sin8s_gen::$2 ]
zp[1]:43 [ sin8s::x1#0 ]
reg byte a [ mulu8_sel::return#0 ]
reg byte a [ sin8s::x2#0 ]
reg byte a [ mulu8_sel::return#1 ]
zp[1]:44 [ sin8s::x3#0 ]
reg byte a [ mulu8_sel::return#2 ]
reg byte a [ sin8s::x3_6#0 ]
zp[1]:45 [ sin8s::usinx#0 ]
reg byte a [ mulu8_sel::return#10 ]
reg byte a [ sin8s::x4#0 ]
reg byte a [ mulu8_sel::return#11 ]
reg byte a [ sin8s::x5#0 ]
reg byte a [ sin8s::x5_128#0 ]
reg byte a [ mul8u::b#0 ]
reg byte a [ mulu8_sel::return#12 ]
reg byte a [ mul8u::$1 ]


FINAL ASSEMBLER
Score: 28020

  // File Comments
// Sinus Generator functions using only multiplication, addition and bit shifting
// Uses a single division for converting the wavelength to a reciprocal.
// Generates sinus using the series sin(x) = x - x^/3! + x^-5! - x^7/7! ...
// Uses the approximation sin(x) = x - x^/6 + x^/128
// Optimization possibility: Use symmetries when generating sinustables. wavelength%2==0 -> mirror symmetry over PI, wavelength%4==0 -> mirror symmetry over PI/2.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .const SIZEOF_SIGNED_WORD = 2
  .label print_screen = $400
  // Remainder after unsigned 16-bit division
  .label rem16u = $11
  .label print_char_cursor = 3
  // main
main: {
    .label wavelength = $c0
    .label __3 = $1b
    .label __9 = $1b
    .label __10 = $1b
    .label sb = $1a
    .label sw = $1b
    .label i = 2
    // sin8s_gen(sintabb, wavelength)
    // [1] call sin8s_gen 
    // [160] phi from main to sin8s_gen [phi:main->sin8s_gen]
    jsr sin8s_gen
    // [2] phi from main to main::@2 [phi:main->main::@2]
    // main::@2
    // sin16s_gen(sintabw, wavelength)
    // [3] call sin16s_gen 
    // [58] phi from main::@2 to sin16s_gen [phi:main::@2->sin16s_gen]
    jsr sin16s_gen
    // [4] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // print_cls()
    // [5] call print_cls 
    // [49] phi from main::@3 to print_cls [phi:main::@3->print_cls]
    jsr print_cls
    // [6] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [6] phi (byte*) print_char_cursor#45 = (const byte*) print_screen#0 [phi:main::@3->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [6] phi (byte) main::i#2 = (byte) 0 [phi:main::@3->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [6] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [6] phi (byte*) print_char_cursor#45 = (byte*) print_char_cursor#10 [phi:main::@5->main::@1#0] -- register_copy 
    // [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@5->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // sb = sintabb[i]
    // [7] (signed byte) main::sb#0 ← *((const signed byte*) main::sintabb + (byte) main::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda sintabb,y
    sta.z sb
    // sintabw+(word)i
    // [8] (word~) main::$10 ← (word)(byte) main::i#2 -- vwuz1=_word_vbuz2 
    tya
    sta.z __10
    lda #0
    sta.z __10+1
    // [9] (word~) main::$9 ← (word~) main::$10 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z __9
    rol.z __9+1
    // [10] (signed word*~) main::$3 ← (const signed word*) main::sintabw + (word~) main::$9 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda.z __3
    adc #<sintabw
    sta.z __3
    lda.z __3+1
    adc #>sintabw
    sta.z __3+1
    // sw = *(sintabw+(word)i)
    // [11] (signed word) main::sw#0 ← *((signed word*~) main::$3) -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (sw),y
    pha
    iny
    lda (sw),y
    sta.z sw+1
    pla
    sta.z sw
    // >sw
    // [12] (byte~) main::$11 ← > (signed word) main::sw#0 -- vbuaa=_hi_vwsz1 
    lda.z sw+1
    // sd = sb-(signed byte)>sw
    // [13] (signed byte) main::sd#0 ← (signed byte) main::sb#0 - (signed byte)(byte~) main::$11 -- vbsaa=vbsz1_minus_vbsaa 
    eor #$ff
    sec
    adc.z sb
    // print_schar(sd)
    // [14] (signed byte) print_schar::b#1 ← (signed byte) main::sd#0 -- vbsxx=vbsaa 
    tax
    // [15] call print_schar 
    jsr print_schar
    // [16] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
    // main::@4
    // print_str("  ")
    // [17] call print_str 
    // [21] phi from main::@4 to print_str [phi:main::@4->print_str]
    jsr print_str
    // main::@5
    // for(byte i: 0..191)
    // [18] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [19] if((byte) main::i#1!=(byte) $c0) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c0
    cmp.z i
    bne __b1
    // main::@return
    // }
    // [20] return 
    rts
    sintabb: .fill $c0, 0
    sintabw: .fill 2*$c0, 0
    str: .text "  "
    .byte 0
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($11) str)
print_str: {
    .label str = $11
    // [22] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
    // [22] phi (byte*) print_str::str#2 = (const byte*) main::str [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<main.str
    sta.z str
    lda #>main.str
    sta.z str+1
    // print_str::@1
  __b1:
    // while(*str)
    // [23] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [24] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [25] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [26] call print_char 
    // [28] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
    // [28] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#10 [phi:print_str::@2->print_char#0] -- register_copy 
    // [28] phi (byte) print_char::ch#5 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [27] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [22] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
    // [22] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [29] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [30] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#29 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [31] return 
    rts
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte register(X) b)
print_schar: {
    // if(b<0)
    // [32] if((signed byte) print_schar::b#1<(signed byte) 0) goto print_schar::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1
    // [33] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
    // print_schar::@3
    // print_char(' ')
    // [34] call print_char 
    // [28] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
    // [28] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#45 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [28] phi (byte) print_char::ch#5 = (byte) ' ' [phi:print_schar::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [35] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
    // [35] phi (signed byte) print_schar::b#4 = (signed byte) print_schar::b#1 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    // print_schar::@2
  __b2:
    // print_uchar((char)b)
    // [36] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#4
    // [37] call print_uchar 
    jsr print_uchar
    // print_schar::@return
    // }
    // [38] return 
    rts
    // [39] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
    // print_schar::@1
  __b1:
    // print_char('-')
    // [40] call print_char 
    // [28] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
    // [28] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#45 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [28] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_schar::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_schar::@4
    // b = -b
    // [41] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#1 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    jmp __b2
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // b>>4
    // [42] (byte~) print_uchar::$0 ← (byte) print_uchar::b#0 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [43] (byte) print_char::ch#3 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [44] call print_char 
  // Table of hexadecimal digits
    // [28] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [28] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#10 [phi:print_uchar->print_char#0] -- register_copy 
    // [28] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@1
    // b&$f
    // [45] (byte~) print_uchar::$2 ← (byte) print_uchar::b#0 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [46] (byte) print_char::ch#4 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [47] call print_char 
    // [28] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [28] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#10 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [28] phi (byte) print_char::ch#5 = (byte) print_char::ch#4 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@return
    // }
    // [48] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [50] call memset 
    // [52] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [51] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $11
    // [53] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [53] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [54] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [55] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [56] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [57] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [53] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [53] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // sin16s_gen
// Generate signed (large) unsigned int sinus table - on the full -$7fff - $7fff range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_gen(signed word* zp($15) sintab)
sin16s_gen: {
    .label __2 = $17
    .label step = $1d
    .label sintab = $15
    // u[4.28]
    // Iterate over the table
    .label x = 5
    .label i = 3
    // div32u16u(PI2_u4f28, wavelength)
    // [59] call div32u16u 
    // [132] phi from sin16s_gen to div32u16u [phi:sin16s_gen->div32u16u]
    jsr div32u16u
    // div32u16u(PI2_u4f28, wavelength)
    // [60] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
    // sin16s_gen::@3
    // step = div32u16u(PI2_u4f28, wavelength)
    // [61] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2
    // [62] phi from sin16s_gen::@3 to sin16s_gen::@1 [phi:sin16s_gen::@3->sin16s_gen::@1]
    // [62] phi (signed word*) sin16s_gen::sintab#2 = (const signed word*) main::sintabw [phi:sin16s_gen::@3->sin16s_gen::@1#0] -- pwsz1=pwsc1 
    lda #<main.sintabw
    sta.z sintab
    lda #>main.sintabw
    sta.z sintab+1
    // [62] phi (dword) sin16s_gen::x#2 = (dword) 0 [phi:sin16s_gen::@3->sin16s_gen::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z x
    sta.z x+1
    lda #<0>>$10
    sta.z x+2
    lda #>0>>$10
    sta.z x+3
    // [62] phi (word) sin16s_gen::i#2 = (word) 0 [phi:sin16s_gen::@3->sin16s_gen::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
  // u[4.28]
    // sin16s_gen::@1
  __b1:
    // for( unsigned int i=0; i<wavelength; i++)
    // [63] if((word) sin16s_gen::i#2<(const word) main::wavelength) goto sin16s_gen::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.wavelength
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.wavelength
    bcc __b2
  !:
    // sin16s_gen::@return
    // }
    // [64] return 
    rts
    // sin16s_gen::@2
  __b2:
    // sin16s(x)
    // [65] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2 -- vduz1=vduz2 
    lda.z x
    sta.z sin16s.x
    lda.z x+1
    sta.z sin16s.x+1
    lda.z x+2
    sta.z sin16s.x+2
    lda.z x+3
    sta.z sin16s.x+3
    // [66] call sin16s 
    jsr sin16s
    // [67] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
    // sin16s_gen::@4
    // [68] (signed word~) sin16s_gen::$2 ← (signed word) sin16s::return#0
    // *sintab++ = sin16s(x)
    // [69] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$2 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda.z __2
    sta (sintab),y
    iny
    lda.z __2+1
    sta (sintab),y
    // *sintab++ = sin16s(x);
    // [70] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_SIGNED_WORD
    clc
    adc.z sintab
    sta.z sintab
    bcc !+
    inc.z sintab+1
  !:
    // x = x + step
    // [71] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0 -- vduz1=vduz1_plus_vduz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    lda.z x+2
    adc.z step+2
    sta.z x+2
    lda.z x+3
    adc.z step+3
    sta.z x+3
    // for( unsigned int i=0; i<wavelength; i++)
    // [72] (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [62] phi from sin16s_gen::@4 to sin16s_gen::@1 [phi:sin16s_gen::@4->sin16s_gen::@1]
    // [62] phi (signed word*) sin16s_gen::sintab#2 = (signed word*) sin16s_gen::sintab#0 [phi:sin16s_gen::@4->sin16s_gen::@1#0] -- register_copy 
    // [62] phi (dword) sin16s_gen::x#2 = (dword) sin16s_gen::x#1 [phi:sin16s_gen::@4->sin16s_gen::@1#1] -- register_copy 
    // [62] phi (word) sin16s_gen::i#2 = (word) sin16s_gen::i#1 [phi:sin16s_gen::@4->sin16s_gen::@1#2] -- register_copy 
    jmp __b1
}
  // sin16s
// Calculate signed int sinus sin(x)
// x: unsigned long input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed int sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zp(9) x)
sin16s: {
    .label __4 = $21
    .label x = 9
    .label return = $17
    .label x1 = $25
    .label x2 = $11
    .label x3 = $11
    .label x3_6 = $27
    .label usinx = $17
    .label x4 = $11
    .label x5 = $27
    .label x5_128 = $27
    .label sinx = $17
    // if(x >= PI_u4f28 )
    // [73] if((dword) sin16s::x#0<(const nomodify dword) PI_u4f28) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_u4f28>>$10
    bcc __b4
    bne !+
    lda.z x+2
    cmp #<PI_u4f28>>$10
    bcc __b4
    bne !+
    lda.z x+1
    cmp #>PI_u4f28
    bcc __b4
    bne !+
    lda.z x
    cmp #<PI_u4f28
    bcc __b4
  !:
    // sin16s::@4
    // x = x - PI_u4f28
    // [74] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const nomodify dword) PI_u4f28 -- vduz1=vduz1_minus_vduc1 
    lda.z x
    sec
    sbc #<PI_u4f28
    sta.z x
    lda.z x+1
    sbc #>PI_u4f28
    sta.z x+1
    lda.z x+2
    sbc #<PI_u4f28>>$10
    sta.z x+2
    lda.z x+3
    sbc #>PI_u4f28>>$10
    sta.z x+3
    // [75] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
    // [75] phi (byte) sin16s::isUpper#2 = (byte) 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuyy=vbuc1 
    ldy #1
    // [75] phi (dword) sin16s::x#4 = (dword) sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp __b1
    // [75] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  __b4:
    // [75] phi (byte) sin16s::isUpper#2 = (byte) 0 [phi:sin16s->sin16s::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [75] phi (dword) sin16s::x#4 = (dword) sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    // sin16s::@1
  __b1:
    // if(x >= PI_HALF_u4f28 )
    // [76] if((dword) sin16s::x#4<(const nomodify dword) PI_HALF_u4f28) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc __b2
    bne !+
    lda.z x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc __b2
    bne !+
    lda.z x+1
    cmp #>PI_HALF_u4f28
    bcc __b2
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f28
    bcc __b2
  !:
    // sin16s::@5
    // x = PI_u4f28 - x
    // [77] (dword) sin16s::x#2 ← (const nomodify dword) PI_u4f28 - (dword) sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc.z x
    sta.z x
    lda #>PI_u4f28
    sbc.z x+1
    sta.z x+1
    lda #<PI_u4f28>>$10
    sbc.z x+2
    sta.z x+2
    lda #>PI_u4f28>>$10
    sbc.z x+3
    sta.z x+3
    // [78] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
    // [78] phi (dword) sin16s::x#6 = (dword) sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    // sin16s::@2
  __b2:
    // x<<3
    // [79] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3 -- vduz1=vduz2_rol_3 
    lda.z x
    asl
    sta.z __4
    lda.z x+1
    rol
    sta.z __4+1
    lda.z x+2
    rol
    sta.z __4+2
    lda.z x+3
    rol
    sta.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    // x1 = >x<<3
    // [80] (word) sin16s::x1#0 ← > (dword~) sin16s::$4 -- vwuz1=_hi_vduz2 
    lda.z __4+2
    sta.z x1
    lda.z __4+3
    sta.z x1+1
    // mulu16_sel(x1, x1, 0)
    // [81] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v1
    lda.z x1+1
    sta.z mulu16_sel.v1+1
    // [82] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [83] call mulu16_sel 
    // [113] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
    // [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
    // [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x1, x1, 0)
    // [84] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12
    // sin16s::@7
    // x2 = mulu16_sel(x1, x1, 0)
    // [85] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z x2
    lda.z mulu16_sel.return+1
    sta.z x2+1
    // mulu16_sel(x2, x1, 1)
    // [86] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
    // [87] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [88] call mulu16_sel 
    // [113] phi from sin16s::@7 to mulu16_sel [phi:sin16s::@7->mulu16_sel]
    // [113] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@7->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#1 [phi:sin16s::@7->mulu16_sel#1] -- register_copy 
    // [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#1 [phi:sin16s::@7->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x2, x1, 1)
    // [89] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z mulu16_sel.return_1
    lda.z mulu16_sel.return+1
    sta.z mulu16_sel.return_1+1
    // sin16s::@8
    // x3 = mulu16_sel(x2, x1, 1)
    // [90] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
    // mulu16_sel(x3, $10000/6, 1)
    // [91] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
    // [92] call mulu16_sel 
    // [113] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
    // [113] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [113] phi (word) mulu16_sel::v2#5 = (word)(number) $10000/(number) 6 [phi:sin16s::@8->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta.z mulu16_sel.v2
    lda #>$10000/6
    sta.z mulu16_sel.v2+1
    // [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#2 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x3, $10000/6, 1)
    // [93] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12
    // sin16s::@9
    // x3_6 = mulu16_sel(x3, $10000/6, 1)
    // [94] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2
    // usinx = x1 - x3_6
    // [95] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z x1
    sec
    sbc.z x3_6
    sta.z usinx
    lda.z x1+1
    sbc.z x3_6+1
    sta.z usinx+1
    // mulu16_sel(x3, x1, 0)
    // [96] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
    // [97] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [98] call mulu16_sel 
    // [113] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
    // [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#3 [phi:sin16s::@9->mulu16_sel#1] -- register_copy 
    // [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#3 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x3, x1, 0)
    // [99] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z mulu16_sel.return_1
    lda.z mulu16_sel.return+1
    sta.z mulu16_sel.return_1+1
    // sin16s::@10
    // x4 = mulu16_sel(x3, x1, 0)
    // [100] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10
    // mulu16_sel(x4, x1, 0)
    // [101] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
    // [102] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [103] call mulu16_sel 
    // [113] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
    // [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#4 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
    // [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#4 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x4, x1, 0)
    // [104] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12
    // sin16s::@11
    // x5 = mulu16_sel(x4, x1, 0)
    // [105] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11
    // x5_128 = x5>>4
    // [106] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4 -- vwuz1=vwuz1_ror_4 
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    // usinx = usinx + x5_128
    // [107] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z usinx
    clc
    adc.z x5_128
    sta.z usinx
    lda.z usinx+1
    adc.z x5_128+1
    sta.z usinx+1
    // if(isUpper!=0)
    // [108] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12 -- vbuyy_eq_0_then_la1 
    cpy #0
    beq __b3
    // sin16s::@6
    // sinx = -(signed int)usinx
    // [109] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z sinx
    sta.z sinx
    lda #0
    sbc.z sinx+1
    sta.z sinx+1
    // [110] phi from sin16s::@12 sin16s::@6 to sin16s::@3 [phi:sin16s::@12/sin16s::@6->sin16s::@3]
    // [110] phi (signed word) sin16s::return#1 = (signed word) sin16s::return#5 [phi:sin16s::@12/sin16s::@6->sin16s::@3#0] -- register_copy 
    // sin16s::@3
  __b3:
    // sin16s::@return
    // }
    // [111] return 
    rts
    // sin16s::@12
    // [112] (signed word) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
}
  // mulu16_sel
// Calculate val*val for two unsigned int values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zp($11) v1, word zp($1b) v2, byte register(X) select)
mulu16_sel: {
    .label __0 = $21
    .label __1 = $21
    .label v1 = $11
    .label v2 = $1b
    .label return = $27
    .label return_1 = $11
    // mul16u(v1, v2)
    // [114] (word) mul16u::a#1 ← (word) mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda.z v1
    sta.z mul16u.a
    lda.z v1+1
    sta.z mul16u.a+1
    // [115] (word) mul16u::b#0 ← (word) mulu16_sel::v2#5
    // [116] call mul16u 
    jsr mul16u
    // [117] (dword) mul16u::return#2 ← (dword) mul16u::res#2
    // mulu16_sel::@1
    // [118] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2
    // mul16u(v1, v2)<<select
    // [119] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 -- vduz1=vduz1_rol_vbuxx 
    cpx #0
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    rol.z __1+2
    rol.z __1+3
    dex
    bne !-
  !e:
    // >mul16u(v1, v2)<<select
    // [120] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda.z __1+2
    sta.z return
    lda.z __1+3
    sta.z return+1
    // mulu16_sel::@return
    // }
    // [121] return 
    rts
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit unsigned ints into a 32-bit unsigned long
// mul16u(word zp($13) a, word zp($1b) b)
mul16u: {
    .label mb = $d
    .label a = $13
    .label res = $21
    .label b = $1b
    .label return = $21
    // mb = b
    // [122] (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#0 -- vduz1=_dword_vwuz2 
    lda.z b
    sta.z mb
    lda.z b+1
    sta.z mb+1
    lda #0
    sta.z mb+2
    sta.z mb+3
    // [123] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
    // [123] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
    // [123] phi (dword) mul16u::res#2 = (dword) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vduc1 
    sta.z res
    sta.z res+1
    lda #<0>>$10
    sta.z res+2
    lda #>0>>$10
    sta.z res+3
    // [123] phi (word) mul16u::a#2 = (word) mul16u::a#1 [phi:mul16u->mul16u::@1#2] -- register_copy 
    // mul16u::@1
  __b1:
    // while(a!=0)
    // [124] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda.z a
    bne __b2
    lda.z a+1
    bne __b2
    // mul16u::@return
    // }
    // [125] return 
    rts
    // mul16u::@2
  __b2:
    // a&1
    // [126] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1 -- vbuaa=vwuz1_band_vbuc1 
    lda #1
    and.z a
    // if( (a&1) != 0)
    // [127] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul16u::@4
    // res = res + mb
    // [128] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    lda.z res+2
    adc.z mb+2
    sta.z res+2
    lda.z res+3
    adc.z mb+3
    sta.z res+3
    // [129] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
    // [129] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    // mul16u::@3
  __b3:
    // a = a>>1
    // [130] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr.z a+1
    ror.z a
    // mb = mb<<1
    // [131] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1 -- vduz1=vduz1_rol_1 
    asl.z mb
    rol.z mb+1
    rol.z mb+2
    rol.z mb+3
    // [123] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
    // [123] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [123] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [123] phi (word) mul16u::a#2 = (word) mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp __b1
}
  // div32u16u
// Divide unsigned 32-bit unsigned long dividend with a 16-bit unsigned int divisor
// The 16-bit unsigned int remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = $29
    .label quotient_lo = $13
    .label return = $1d
    // divr16u(>dividend, divisor, 0)
    // [133] call divr16u 
    // [142] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
    // [142] phi (word) divr16u::dividend#6 = >(const nomodify dword) PI2_u4f28 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta.z divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta.z divr16u.dividend+1
    // [142] phi (word) divr16u::rem#11 = (byte) 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z divr16u.rem
    sta.z divr16u.rem+1
    jsr divr16u
    // divr16u(>dividend, divisor, 0)
    // [134] (word) divr16u::return#3 ← (word) divr16u::return#0
    // div32u16u::@1
    // quotient_hi = divr16u(>dividend, divisor, 0)
    // [135] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#3 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z quotient_hi
    lda.z divr16u.return+1
    sta.z quotient_hi+1
    // divr16u(<dividend, divisor, rem16u)
    // [136] (word) divr16u::rem#5 ← (word) rem16u#0
    // [137] call divr16u 
    // [142] phi from div32u16u::@1 to divr16u [phi:div32u16u::@1->divr16u]
    // [142] phi (word) divr16u::dividend#6 = <(const nomodify dword) PI2_u4f28 [phi:div32u16u::@1->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta.z divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta.z divr16u.dividend+1
    // [142] phi (word) divr16u::rem#11 = (word) divr16u::rem#5 [phi:div32u16u::@1->divr16u#1] -- register_copy 
    jsr divr16u
    // divr16u(<dividend, divisor, rem16u)
    // [138] (word) divr16u::return#4 ← (word) divr16u::return#0
    // div32u16u::@2
    // quotient_lo = divr16u(<dividend, divisor, rem16u)
    // [139] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#4
    // quotient = { quotient_hi, quotient_lo}
    // [140] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda.z quotient_hi
    sta.z return+2
    lda.z quotient_hi+1
    sta.z return+3
    lda.z quotient_lo
    sta.z return
    lda.z quotient_lo+1
    sta.z return+1
    // div32u16u::@return
    // }
    // [141] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($1b) dividend, word zp($11) rem)
divr16u: {
    .label rem = $11
    .label dividend = $1b
    .label quotient = $13
    .label return = $13
    // [143] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
    // [143] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [143] phi (word) divr16u::quotient#3 = (word) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    txa
    sta.z quotient
    sta.z quotient+1
    // [143] phi (word) divr16u::dividend#4 = (word) divr16u::dividend#6 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [143] phi (word) divr16u::rem#6 = (word) divr16u::rem#11 [phi:divr16u->divr16u::@1#3] -- register_copy 
    // [143] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
    // [143] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [143] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [143] phi (word) divr16u::dividend#4 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [143] phi (word) divr16u::rem#6 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    // divr16u::@1
  __b1:
    // rem = rem << 1
    // [144] (word) divr16u::rem#0 ← (word) divr16u::rem#6 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // >dividend
    // [145] (byte~) divr16u::$1 ← > (word) divr16u::dividend#4 -- vbuaa=_hi_vwuz1 
    lda.z dividend+1
    // >dividend & $80
    // [146] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if( (>dividend & $80) != 0 )
    // [147] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // divr16u::@4
    // rem = rem | 1
    // [148] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [149] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
    // [149] phi (word) divr16u::rem#7 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    // divr16u::@2
  __b2:
    // dividend = dividend << 1
    // [150] (word) divr16u::dividend#0 ← (word) divr16u::dividend#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // quotient = quotient << 1
    // [151] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // if(rem>=divisor)
    // [152] if((word) divr16u::rem#7<(const word) main::wavelength) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>main.wavelength
    bcc __b3
    bne !+
    lda.z rem
    cmp #<main.wavelength
    bcc __b3
  !:
    // divr16u::@5
    // quotient++;
    // [153] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // rem = rem - divisor
    // [154] (word) divr16u::rem#2 ← (word) divr16u::rem#7 - (const word) main::wavelength -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<main.wavelength
    sta.z rem
    lda.z rem+1
    sbc #>main.wavelength
    sta.z rem+1
    // [155] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
    // [155] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [155] phi (word) divr16u::rem#10 = (word) divr16u::rem#7 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    // divr16u::@3
  __b3:
    // for( char i : 0..15)
    // [156] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [157] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // divr16u::@6
    // rem16u = rem
    // [158] (word) rem16u#0 ← (word) divr16u::rem#10
    // divr16u::@return
    // }
    // [159] return 
    rts
}
  // sin8s_gen
// Generate signed char sinus table - on the full -$7f - $7f range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin8s_gen(signed byte* zp($1b) sintab)
sin8s_gen: {
    .label step = $13
    .label sintab = $1b
    // u[4.12]
    // Iterate over the table
    .label x = $17
    .label i = $15
    // div16u(PI2_u4f12, wavelength)
    // [161] call div16u 
    // [237] phi from sin8s_gen to div16u [phi:sin8s_gen->div16u]
    jsr div16u
    // div16u(PI2_u4f12, wavelength)
    // [162] (word) div16u::return#2 ← (word) div16u::return#0
    // sin8s_gen::@3
    // step = div16u(PI2_u4f12, wavelength)
    // [163] (word) sin8s_gen::step#0 ← (word) div16u::return#2
    // [164] phi from sin8s_gen::@3 to sin8s_gen::@1 [phi:sin8s_gen::@3->sin8s_gen::@1]
    // [164] phi (signed byte*) sin8s_gen::sintab#2 = (const signed byte*) main::sintabb [phi:sin8s_gen::@3->sin8s_gen::@1#0] -- pbsz1=pbsc1 
    lda #<main.sintabb
    sta.z sintab
    lda #>main.sintabb
    sta.z sintab+1
    // [164] phi (word) sin8s_gen::x#2 = (word) 0 [phi:sin8s_gen::@3->sin8s_gen::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    sta.z x+1
    // [164] phi (word) sin8s_gen::i#2 = (word) 0 [phi:sin8s_gen::@3->sin8s_gen::@1#2] -- vwuz1=vwuc1 
    sta.z i
    sta.z i+1
  // u[4.12]
    // sin8s_gen::@1
  __b1:
    // for( unsigned int i=0; i<wavelength; i++)
    // [165] if((word) sin8s_gen::i#2<(const word) main::wavelength) goto sin8s_gen::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.wavelength
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.wavelength
    bcc __b2
  !:
    // sin8s_gen::@return
    // }
    // [166] return 
    rts
    // sin8s_gen::@2
  __b2:
    // sin8s(x)
    // [167] (word) sin8s::x#0 ← (word) sin8s_gen::x#2 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [168] call sin8s 
    jsr sin8s
    // [169] (signed byte) sin8s::return#0 ← (signed byte) sin8s::return#1
    // sin8s_gen::@4
    // [170] (signed byte~) sin8s_gen::$2 ← (signed byte) sin8s::return#0
    // *sintab++ = sin8s(x)
    // [171] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$2 -- _deref_pbsz1=vbsaa 
    ldy #0
    sta (sintab),y
    // *sintab++ = sin8s(x);
    // [172] (signed byte*) sin8s_gen::sintab#0 ← ++ (signed byte*) sin8s_gen::sintab#2 -- pbsz1=_inc_pbsz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // x = x + step
    // [173] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // for( unsigned int i=0; i<wavelength; i++)
    // [174] (word) sin8s_gen::i#1 ← ++ (word) sin8s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [164] phi from sin8s_gen::@4 to sin8s_gen::@1 [phi:sin8s_gen::@4->sin8s_gen::@1]
    // [164] phi (signed byte*) sin8s_gen::sintab#2 = (signed byte*) sin8s_gen::sintab#0 [phi:sin8s_gen::@4->sin8s_gen::@1#0] -- register_copy 
    // [164] phi (word) sin8s_gen::x#2 = (word) sin8s_gen::x#1 [phi:sin8s_gen::@4->sin8s_gen::@1#1] -- register_copy 
    // [164] phi (word) sin8s_gen::i#2 = (word) sin8s_gen::i#1 [phi:sin8s_gen::@4->sin8s_gen::@1#2] -- register_copy 
    jmp __b1
}
  // sin8s
// Calculate signed char sinus sin(x)
// x: unsigned int input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed char sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zp($25) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label __4 = $25
    .label x = $25
    .label x1 = $2b
    .label x3 = $2c
    .label usinx = $2d
    // Move x1 into the range 0-PI/2 using sinus mirror symmetries
    .label isUpper = $1a
    // if(x >= PI_u4f12 )
    // [175] if((word) sin8s::x#0<(const nomodify word) PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc __b5
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc __b5
  !:
    // sin8s::@5
    // x = x - PI_u4f12
    // [176] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const nomodify word) PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [177] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
    // [177] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [177] phi (word) sin8s::x#4 = (word) sin8s::x#1 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp __b1
    // [177] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  __b5:
    // [177] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [177] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s->sin8s::@1#1] -- register_copy 
    // sin8s::@1
  __b1:
    // if(x >= PI_HALF_u4f12 )
    // [178] if((word) sin8s::x#4<(const nomodify word) PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc __b2
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc __b2
  !:
    // sin8s::@6
    // x = PI_u4f12 - x
    // [179] (word) sin8s::x#2 ← (const nomodify word) PI_u4f12 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [180] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
    // [180] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    // sin8s::@2
  __b2:
    // x<<3
    // [181] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    // x1 = >x<<3
    // [182] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda.z __4+1
    sta.z x1
    // mulu8_sel(x1, x1, 0)
    // [183] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuxx=vbuz1 
    tax
    // [184] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    tay
    // [185] call mulu8_sel 
    // [218] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
    // [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x1, x1, 0)
    // [186] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
    // sin8s::@9
    // x2 = mulu8_sel(x1, x1, 0)
    // [187] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
    // mulu8_sel(x2, x1, 1)
    // [188] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuxx=vbuaa 
    tax
    // [189] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [190] call mulu8_sel 
    // [218] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
    // [218] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x2, x1, 1)
    // [191] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
    // sin8s::@10
    // x3 = mulu8_sel(x2, x1, 1)
    // [192] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta.z x3
    // mulu8_sel(x3, DIV_6, 1)
    // [193] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    tax
    // [194] call mulu8_sel 
    // [218] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
    // [218] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [218] phi (byte) mulu8_sel::v2#5 = (const nomodify byte) sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
    // [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x3, DIV_6, 1)
    // [195] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
    // sin8s::@11
    // x3_6 = mulu8_sel(x3, DIV_6, 1)
    // [196] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
    // usinx = x1 - x3_6
    // [197] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc.z x1
    sta.z usinx
    // mulu8_sel(x3, x1, 0)
    // [198] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [199] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [200] call mulu8_sel 
    // [218] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
    // [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x3, x1, 0)
    // [201] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
    // sin8s::@12
    // x4 = mulu8_sel(x3, x1, 0)
    // [202] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
    // mulu8_sel(x4, x1, 0)
    // [203] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuxx=vbuaa 
    tax
    // [204] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [205] call mulu8_sel 
    // [218] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
    // [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x4, x1, 0)
    // [206] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
    // sin8s::@13
    // x5 = mulu8_sel(x4, x1, 0)
    // [207] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
    // x5_128 = x5>>4
    // [208] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // usinx = usinx + x5_128
    // [209] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc.z usinx
    tax
    // if(usinx>=128)
    // [210] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc __b3
    // sin8s::@7
    // usinx--;
    // [211] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
    // [212] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
    // [212] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    // sin8s::@3
  __b3:
    // if(isUpper!=0)
    // [213] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    cmp #0
    beq __b14
    // sin8s::@8
    // sinx = -(signed char)usinx
    // [214] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // [215] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
    // [215] phi (signed byte) sin8s::return#1 = (signed byte) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    // sin8s::@4
    // sin8s::@return
    // }
    // [216] return 
    rts
    // sin8s::@14
  __b14:
    // [217] (signed byte) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    rts
}
  // mulu8_sel
// Calculate val*val for two unsigned char values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte register(X) v1, byte register(Y) v2, byte zp($19) select)
mulu8_sel: {
    .label __0 = $27
    .label __1 = $27
    .label select = $19
    // mul8u(v1, v2)
    // [219] (byte) mul8u::a#1 ← (byte) mulu8_sel::v1#5
    // [220] (byte) mul8u::b#0 ← (byte) mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
    // [221] call mul8u 
    jsr mul8u
    // [222] (word) mul8u::return#2 ← (word) mul8u::res#2
    // mulu8_sel::@1
    // [223] (word~) mulu8_sel::$0 ← (word) mul8u::return#2
    // mul8u(v1, v2)<<select
    // [224] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy.z select
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    dey
    bne !-
  !e:
    // >mul8u(v1, v2)<<select
    // [225] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuaa=_hi_vwuz1 
    lda.z __1+1
    // mulu8_sel::@return
    // }
    // [226] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = $29
    .label res = $27
    .label return = $27
    // mb = b
    // [227] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#0 -- vwuz1=_word_vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [228] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
    // [228] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [228] phi (word) mul8u::res#2 = (word) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    sta.z res
    sta.z res+1
    // [228] phi (byte) mul8u::a#2 = (byte) mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    // mul8u::@1
  __b1:
    // while(a!=0)
    // [229] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    // mul8u::@return
    // }
    // [230] return 
    rts
    // mul8u::@2
  __b2:
    // a&1
    // [231] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if( (a&1) != 0)
    // [232] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul8u::@4
    // res = res + mb
    // [233] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [234] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
    // [234] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    // mul8u::@3
  __b3:
    // a = a>>1
    // [235] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // mb = mb<<1
    // [236] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [228] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
    // [228] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [228] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [228] phi (byte) mul8u::a#2 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // div16u
// Performs division on two 16 bit unsigned ints
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $13
    // divr16u(dividend, divisor, 0)
    // [238] call divr16u 
    // [142] phi from div16u to divr16u [phi:div16u->divr16u]
    // [142] phi (word) divr16u::dividend#6 = (const nomodify word) PI2_u4f12 [phi:div16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z divr16u.dividend
    lda #>PI2_u4f12
    sta.z divr16u.dividend+1
    // [142] phi (word) divr16u::rem#11 = (byte) 0 [phi:div16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z divr16u.rem
    sta.z divr16u.rem+1
    jsr divr16u
    // divr16u(dividend, divisor, 0)
    // [239] (word) divr16u::return#2 ← (word) divr16u::return#0
    // div16u::@1
    // [240] (word) div16u::return#0 ← (word) divr16u::return#2
    // div16u::@return
    // }
    // [241] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

