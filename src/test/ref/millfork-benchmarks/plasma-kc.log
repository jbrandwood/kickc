Setting inferred volatile on symbol affected by address-of (word) last_time
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

(word()) rand()
rand: scope:[rand]  from makechar::@7
  (word) rand_state#11 ← phi( makechar::@7/(word) rand_state#19 )
  (word~) rand::$0 ← (word) rand_state#11 << (number) 7
  (word) rand_state#0 ← (word) rand_state#11 ^ (word~) rand::$0
  (word~) rand::$1 ← (word) rand_state#0 >> (number) 9
  (word) rand_state#1 ← (word) rand_state#0 ^ (word~) rand::$1
  (word~) rand::$2 ← (word) rand_state#1 << (number) 8
  (word) rand_state#2 ← (word) rand_state#1 ^ (word~) rand::$2
  (word) rand::return#0 ← (word) rand_state#2
  to:rand::@return
rand::@return: scope:[rand]  from rand
  (word) rand_state#12 ← phi( rand/(word) rand_state#2 )
  (word) rand::return#3 ← phi( rand/(word) rand::return#0 )
  (word) rand::return#1 ← (word) rand::return#3
  (word) rand_state#3 ← (word) rand_state#12
  return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from end::@2
  (byte*) print_char_cursor#35 ← phi( end::@2/(byte*) print_char_cursor#10 )
  (byte*) print_line_cursor#18 ← phi( end::@2/(byte*) print_line_cursor#19 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#18 ← phi( print_ln/(byte*) print_char_cursor#35 print_ln::@1/(byte*) print_char_cursor#18 )
  (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#18 print_ln::@1/(byte*) print_line_cursor#0 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
  (byte*) print_line_cursor#0 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#0 < (byte*) print_char_cursor#18
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#10 ← phi( print_ln::@1/(byte*) print_line_cursor#0 )
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#10
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#19 ← phi( print_ln::@2/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#11 ← phi( print_ln::@2/(byte*) print_line_cursor#10 )
  (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#11
  (byte*) print_char_cursor#1 ← (byte*) print_char_cursor#19
  return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from end::@1
  (byte*) print_char_cursor#36 ← phi( end::@1/(byte*) print_char_cursor#38 )
  (word) print_uint::w#1 ← phi( end::@1/(word) print_uint::w#0 )
  (byte~) print_uint::$0 ← > (word) print_uint::w#1
  (byte) print_uchar::b#0 ← (byte~) print_uint::$0
  call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  (word) print_uint::w#2 ← phi( print_uint/(word) print_uint::w#1 )
  (byte*) print_char_cursor#20 ← phi( print_uint/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#20
  (byte~) print_uint::$2 ← < (word) print_uint::w#2
  (byte) print_uchar::b#1 ← (byte~) print_uint::$2
  call print_uchar 
  to:print_uint::@2
print_uint::@2: scope:[print_uint]  from print_uint::@1
  (byte*) print_char_cursor#21 ← phi( print_uint::@1/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#21
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@2
  (byte*) print_char_cursor#22 ← phi( print_uint::@2/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#22
  return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  (byte*) print_char_cursor#37 ← phi( print_uint/(byte*) print_char_cursor#36 print_uint::@1/(byte*) print_char_cursor#2 )
  (byte) print_uchar::b#2 ← phi( print_uint/(byte) print_uchar::b#0 print_uint::@1/(byte) print_uchar::b#1 )
  (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (number) 4
  (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  (byte) print_uchar::b#3 ← phi( print_uchar/(byte) print_uchar::b#2 )
  (byte*) print_char_cursor#23 ← phi( print_uchar/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#23
  (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (number) $f
  (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (number~) print_uchar::$2)
  call print_char 
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  (byte*) print_char_cursor#24 ← phi( print_uchar::@1/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#24
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  (byte*) print_char_cursor#25 ← phi( print_uchar::@2/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#25
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_uchar print_uchar::@1
  (byte*) print_char_cursor#26 ← phi( print_uchar/(byte*) print_char_cursor#37 print_uchar::@1/(byte*) print_char_cursor#5 )
  (byte) print_char::ch#2 ← phi( print_uchar/(byte) print_char::ch#0 print_uchar::@1/(byte) print_char::ch#1 )
  *((byte*) print_char_cursor#26) ← (byte) print_char::ch#2
  (byte*) print_char_cursor#8 ← ++ (byte*) print_char_cursor#26
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#27 ← phi( print_char/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#27
  return 
  to:@return

(void()) start()
start: scope:[start]  from end main::@4
  asm { jsr$FFDE staLAST_TIME stxLAST_TIME+1  }
  to:start::@return
start::@return: scope:[start]  from start
  return 
  to:@return

(void()) end()
end: scope:[end]  from main::@3
  (byte*) print_line_cursor#24 ← phi( main::@3/(byte*) print_line_cursor#20 )
  (byte*) print_char_cursor#41 ← phi( main::@3/(byte*) print_char_cursor#39 )
  (word) Ticks#0 ← (volatile word) last_time
  call start 
  to:end::@1
end::@1: scope:[end]  from end
  (byte*) print_line_cursor#22 ← phi( end/(byte*) print_line_cursor#24 )
  (byte*) print_char_cursor#38 ← phi( end/(byte*) print_char_cursor#41 )
  (word) Ticks#8 ← phi( end/(word) Ticks#0 )
  (volatile word) last_time ← (volatile word) last_time - (word) Ticks#8
  (word) Ticks#1 ← (volatile word) last_time
  (word) print_uint::w#0 ← (word) Ticks#1
  call print_uint 
  to:end::@2
end::@2: scope:[end]  from end::@1
  (word) Ticks#17 ← phi( end::@1/(word) Ticks#1 )
  (byte*) print_line_cursor#19 ← phi( end::@1/(byte*) print_line_cursor#22 )
  (byte*) print_char_cursor#28 ← phi( end::@1/(byte*) print_char_cursor#4 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#28
  call print_ln 
  to:end::@3
end::@3: scope:[end]  from end::@2
  (word) Ticks#14 ← phi( end::@2/(word) Ticks#17 )
  (byte*) print_char_cursor#29 ← phi( end::@2/(byte*) print_char_cursor#1 )
  (byte*) print_line_cursor#12 ← phi( end::@2/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#12
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#29
  to:end::@return
end::@return: scope:[end]  from end::@3
  (byte*) print_line_cursor#13 ← phi( end::@3/(byte*) print_line_cursor#2 )
  (byte*) print_char_cursor#30 ← phi( end::@3/(byte*) print_char_cursor#11 )
  (word) Ticks#9 ← phi( end::@3/(word) Ticks#14 )
  (word) Ticks#2 ← (word) Ticks#9
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#30
  (byte*) print_line_cursor#3 ← (byte*) print_line_cursor#13
  return 
  to:@return

(void()) doplasma((byte*) doplasma::scrn)
doplasma: scope:[doplasma]  from main::@2 main::@6
  (byte*) doplasma::scrn#13 ← phi( main::@2/(byte*) doplasma::scrn#1 main::@6/(byte*) doplasma::scrn#2 )
  (byte) doplasma::c1a#0 ← (byte) 0
  (byte) doplasma::c1b#0 ← (byte) 0
  (byte) doplasma::c2a#0 ← (byte) 0
  (byte) doplasma::c2b#0 ← (byte) 0
  (byte) doplasma::c1A#0 ← (byte) 0
  (byte) doplasma::c1B#0 ← (byte) 0
  (byte) doplasma::c2A#0 ← (byte) 0
  (byte) doplasma::c2B#0 ← (byte) 0
  (byte) doplasma::i#0 ← (byte) 0
  (byte) doplasma::ii#0 ← (byte) 0
  (byte) doplasma::j#0 ← (byte) 0
  (byte) doplasma::jj#0 ← (byte) 0
  (byte) doplasma::c1a#1 ← (byte) doplasma::c1A#0
  (byte) doplasma::c1b#1 ← (byte) doplasma::c1B#0
  (byte) doplasma::ii#1 ← (number) 0
  to:doplasma::@1
doplasma::@1: scope:[doplasma]  from doplasma doplasma::@2
  (byte*) doplasma::scrn#12 ← phi( doplasma/(byte*) doplasma::scrn#13 doplasma::@2/(byte*) doplasma::scrn#14 )
  (byte) doplasma::c2B#4 ← phi( doplasma/(byte) doplasma::c2B#0 doplasma::@2/(byte) doplasma::c2B#6 )
  (byte) doplasma::c2A#4 ← phi( doplasma/(byte) doplasma::c2A#0 doplasma::@2/(byte) doplasma::c2A#6 )
  (byte) doplasma::c1B#3 ← phi( doplasma/(byte) doplasma::c1B#0 doplasma::@2/(byte) doplasma::c1B#4 )
  (byte) doplasma::c1A#3 ← phi( doplasma/(byte) doplasma::c1A#0 doplasma::@2/(byte) doplasma::c1A#4 )
  (byte) doplasma::c1b#4 ← phi( doplasma/(byte) doplasma::c1b#1 doplasma::@2/(byte) doplasma::c1b#2 )
  (byte) doplasma::c1a#4 ← phi( doplasma/(byte) doplasma::c1a#1 doplasma::@2/(byte) doplasma::c1a#2 )
  (byte) doplasma::ii#3 ← phi( doplasma/(byte) doplasma::ii#1 doplasma::@2/(byte) doplasma::ii#2 )
  (bool~) doplasma::$0 ← (byte) doplasma::ii#3 < (number) $19
  if((bool~) doplasma::$0) goto doplasma::@2
  to:doplasma::@3
doplasma::@2: scope:[doplasma]  from doplasma::@1
  (byte*) doplasma::scrn#14 ← phi( doplasma::@1/(byte*) doplasma::scrn#12 )
  (byte) doplasma::c2B#6 ← phi( doplasma::@1/(byte) doplasma::c2B#4 )
  (byte) doplasma::c2A#6 ← phi( doplasma::@1/(byte) doplasma::c2A#4 )
  (byte) doplasma::c1B#4 ← phi( doplasma::@1/(byte) doplasma::c1B#3 )
  (byte) doplasma::c1A#4 ← phi( doplasma::@1/(byte) doplasma::c1A#3 )
  (byte) doplasma::ii#4 ← phi( doplasma::@1/(byte) doplasma::ii#3 )
  (byte) doplasma::c1b#3 ← phi( doplasma::@1/(byte) doplasma::c1b#4 )
  (byte) doplasma::c1a#3 ← phi( doplasma::@1/(byte) doplasma::c1a#4 )
  (byte~) doplasma::$1 ← *((const to_nomodify byte*) sinustable + (byte) doplasma::c1a#3) + *((const to_nomodify byte*) sinustable + (byte) doplasma::c1b#3)
  *((const byte*) ybuf + (byte) doplasma::ii#4) ← (byte~) doplasma::$1
  (byte) doplasma::c1a#2 ← (byte) doplasma::c1a#3 + (number) 4
  (byte) doplasma::c1b#2 ← (byte) doplasma::c1b#3 + (number) 9
  (byte) doplasma::ii#2 ← ++ (byte) doplasma::ii#4
  to:doplasma::@1
doplasma::@3: scope:[doplasma]  from doplasma::@1
  (byte*) doplasma::scrn#10 ← phi( doplasma::@1/(byte*) doplasma::scrn#12 )
  (byte) doplasma::c2B#2 ← phi( doplasma::@1/(byte) doplasma::c2B#4 )
  (byte) doplasma::c2A#2 ← phi( doplasma::@1/(byte) doplasma::c2A#4 )
  (byte) doplasma::c1B#2 ← phi( doplasma::@1/(byte) doplasma::c1B#3 )
  (byte) doplasma::c1A#2 ← phi( doplasma::@1/(byte) doplasma::c1A#3 )
  (byte) doplasma::c1A#1 ← (byte) doplasma::c1A#2 + (number) 3
  (byte) doplasma::c1B#1 ← (byte) doplasma::c1B#2 - (number) 5
  (byte) doplasma::c2a#1 ← (byte) doplasma::c2A#2
  (byte) doplasma::c2b#1 ← (byte) doplasma::c2B#2
  (byte) doplasma::i#1 ← (number) 0
  to:doplasma::@4
doplasma::@4: scope:[doplasma]  from doplasma::@3 doplasma::@5
  (byte*) doplasma::scrn#9 ← phi( doplasma::@3/(byte*) doplasma::scrn#10 doplasma::@5/(byte*) doplasma::scrn#11 )
  (byte) doplasma::c2B#5 ← phi( doplasma::@3/(byte) doplasma::c2B#2 doplasma::@5/(byte) doplasma::c2B#7 )
  (byte) doplasma::c2A#5 ← phi( doplasma::@3/(byte) doplasma::c2A#2 doplasma::@5/(byte) doplasma::c2A#7 )
  (byte) doplasma::c2b#4 ← phi( doplasma::@3/(byte) doplasma::c2b#1 doplasma::@5/(byte) doplasma::c2b#2 )
  (byte) doplasma::c2a#4 ← phi( doplasma::@3/(byte) doplasma::c2a#1 doplasma::@5/(byte) doplasma::c2a#2 )
  (byte) doplasma::i#3 ← phi( doplasma::@3/(byte) doplasma::i#1 doplasma::@5/(byte) doplasma::i#2 )
  (bool~) doplasma::$2 ← (byte) doplasma::i#3 < (number) $28
  if((bool~) doplasma::$2) goto doplasma::@5
  to:doplasma::@6
doplasma::@5: scope:[doplasma]  from doplasma::@4
  (byte*) doplasma::scrn#11 ← phi( doplasma::@4/(byte*) doplasma::scrn#9 )
  (byte) doplasma::c2B#7 ← phi( doplasma::@4/(byte) doplasma::c2B#5 )
  (byte) doplasma::c2A#7 ← phi( doplasma::@4/(byte) doplasma::c2A#5 )
  (byte) doplasma::i#4 ← phi( doplasma::@4/(byte) doplasma::i#3 )
  (byte) doplasma::c2b#3 ← phi( doplasma::@4/(byte) doplasma::c2b#4 )
  (byte) doplasma::c2a#3 ← phi( doplasma::@4/(byte) doplasma::c2a#4 )
  (byte~) doplasma::$3 ← *((const to_nomodify byte*) sinustable + (byte) doplasma::c2a#3) + *((const to_nomodify byte*) sinustable + (byte) doplasma::c2b#3)
  *((const byte*) xbuf + (byte) doplasma::i#4) ← (byte~) doplasma::$3
  (byte) doplasma::c2a#2 ← (byte) doplasma::c2a#3 + (number) 3
  (byte) doplasma::c2b#2 ← (byte) doplasma::c2b#3 + (number) 7
  (byte) doplasma::i#2 ← ++ (byte) doplasma::i#4
  to:doplasma::@4
doplasma::@6: scope:[doplasma]  from doplasma::@4
  (byte*) doplasma::scrn#8 ← phi( doplasma::@4/(byte*) doplasma::scrn#9 )
  (byte) doplasma::c2B#3 ← phi( doplasma::@4/(byte) doplasma::c2B#5 )
  (byte) doplasma::c2A#3 ← phi( doplasma::@4/(byte) doplasma::c2A#5 )
  (byte) doplasma::c2A#1 ← (byte) doplasma::c2A#3 + (number) 2
  (byte) doplasma::c2B#1 ← (byte) doplasma::c2B#3 - (number) 3
  (byte) doplasma::jj#1 ← (number) 0
  to:doplasma::@7
doplasma::@7: scope:[doplasma]  from doplasma::@11 doplasma::@6
  (byte*) doplasma::scrn#7 ← phi( doplasma::@11/(byte*) doplasma::scrn#0 doplasma::@6/(byte*) doplasma::scrn#8 )
  (byte) doplasma::jj#3 ← phi( doplasma::@11/(byte) doplasma::jj#2 doplasma::@6/(byte) doplasma::jj#1 )
  (bool~) doplasma::$4 ← (byte) doplasma::jj#3 < (number) $19
  if((bool~) doplasma::$4) goto doplasma::@8
  to:doplasma::@return
doplasma::@8: scope:[doplasma]  from doplasma::@7
  (byte*) doplasma::scrn#6 ← phi( doplasma::@7/(byte*) doplasma::scrn#7 )
  (byte) doplasma::jj#7 ← phi( doplasma::@7/(byte) doplasma::jj#3 )
  (byte) doplasma::j#1 ← (number) 0
  to:doplasma::@9
doplasma::@9: scope:[doplasma]  from doplasma::@10 doplasma::@8
  (byte*) doplasma::scrn#5 ← phi( doplasma::@10/(byte*) doplasma::scrn#3 doplasma::@8/(byte*) doplasma::scrn#6 )
  (byte) doplasma::jj#6 ← phi( doplasma::@10/(byte) doplasma::jj#4 doplasma::@8/(byte) doplasma::jj#7 )
  (byte) doplasma::j#3 ← phi( doplasma::@10/(byte) doplasma::j#2 doplasma::@8/(byte) doplasma::j#1 )
  (bool~) doplasma::$5 ← (byte) doplasma::j#3 < (number) $28
  if((bool~) doplasma::$5) goto doplasma::@10
  to:doplasma::@11
doplasma::@10: scope:[doplasma]  from doplasma::@9
  (byte*) doplasma::scrn#3 ← phi( doplasma::@9/(byte*) doplasma::scrn#5 )
  (byte) doplasma::jj#4 ← phi( doplasma::@9/(byte) doplasma::jj#6 )
  (byte) doplasma::j#4 ← phi( doplasma::@9/(byte) doplasma::j#3 )
  (byte~) doplasma::$6 ← *((const byte*) xbuf + (byte) doplasma::j#4) + *((const byte*) ybuf + (byte) doplasma::jj#4)
  *((byte*) doplasma::scrn#3 + (byte) doplasma::j#4) ← (byte~) doplasma::$6
  (byte) doplasma::j#2 ← ++ (byte) doplasma::j#4
  to:doplasma::@9
doplasma::@11: scope:[doplasma]  from doplasma::@9
  (byte) doplasma::jj#5 ← phi( doplasma::@9/(byte) doplasma::jj#6 )
  (byte*) doplasma::scrn#4 ← phi( doplasma::@9/(byte*) doplasma::scrn#5 )
  (byte*) doplasma::scrn#0 ← (byte*) doplasma::scrn#4 + (number) $28
  (byte) doplasma::jj#2 ← ++ (byte) doplasma::jj#5
  to:doplasma::@7
doplasma::@return: scope:[doplasma]  from doplasma::@7
  return 
  to:@return

(void()) makechar()
makechar: scope:[makechar]  from main
  (word) rand_state#24 ← phi( main/(word) rand_state#21 )
  (byte) makechar::i#0 ← (byte) 0
  (byte) makechar::ii#0 ← (byte) 0
  (byte) makechar::b#0 ← (byte) 0
  (byte) makechar::s#0 ← (byte) 0
  (word) makechar::c#0 ← (word) 0
  (word) makechar::c#1 ← (number) 0
  to:makechar::@1
makechar::@1: scope:[makechar]  from makechar makechar::@5
  (word) rand_state#20 ← phi( makechar/(word) rand_state#24 makechar::@5/(word) rand_state#25 )
  (word) makechar::c#3 ← phi( makechar/(word) makechar::c#1 makechar::@5/(word) makechar::c#2 )
  (bool~) makechar::$0 ← (word) makechar::c#3 < (number) $100
  if((bool~) makechar::$0) goto makechar::@2
  to:makechar::@return
makechar::@2: scope:[makechar]  from makechar::@1
  (word) rand_state#32 ← phi( makechar::@1/(word) rand_state#20 )
  (word) makechar::c#4 ← phi( makechar::@1/(word) makechar::c#3 )
  (byte~) makechar::$9 ← (byte)(word) makechar::c#4
  (byte) makechar::s#1 ← *((const to_nomodify byte*) sinustable + (byte~) makechar::$9)
  (byte) makechar::i#1 ← (number) 0
  to:makechar::@3
makechar::@3: scope:[makechar]  from makechar::@2 makechar::@8
  (byte) makechar::s#7 ← phi( makechar::@2/(byte) makechar::s#1 makechar::@8/(byte) makechar::s#9 )
  (word) rand_state#28 ← phi( makechar::@2/(word) rand_state#32 makechar::@8/(word) rand_state#33 )
  (word) makechar::c#7 ← phi( makechar::@2/(word) makechar::c#4 makechar::@8/(word) makechar::c#6 )
  (byte) makechar::i#3 ← phi( makechar::@2/(byte) makechar::i#1 makechar::@8/(byte) makechar::i#2 )
  (bool~) makechar::$1 ← (byte) makechar::i#3 < (number) 8
  if((bool~) makechar::$1) goto makechar::@4
  to:makechar::@5
makechar::@4: scope:[makechar]  from makechar::@3
  (byte) makechar::s#5 ← phi( makechar::@3/(byte) makechar::s#7 )
  (word) rand_state#29 ← phi( makechar::@3/(word) rand_state#28 )
  (byte) makechar::i#6 ← phi( makechar::@3/(byte) makechar::i#3 )
  (word) makechar::c#9 ← phi( makechar::@3/(word) makechar::c#7 )
  (byte) makechar::b#1 ← (number) 0
  (byte) makechar::ii#1 ← (number) 0
  to:makechar::@6
makechar::@5: scope:[makechar]  from makechar::@3
  (word) rand_state#25 ← phi( makechar::@3/(word) rand_state#28 )
  (word) makechar::c#5 ← phi( makechar::@3/(word) makechar::c#7 )
  (word) makechar::c#2 ← ++ (word) makechar::c#5
  to:makechar::@1
makechar::@6: scope:[makechar]  from makechar::@4 makechar::@9
  (byte) makechar::s#4 ← phi( makechar::@4/(byte) makechar::s#5 makechar::@9/(byte) makechar::s#6 )
  (word) rand_state#26 ← phi( makechar::@4/(word) rand_state#29 makechar::@9/(word) rand_state#30 )
  (byte) makechar::b#5 ← phi( makechar::@4/(byte) makechar::b#1 makechar::@9/(byte) makechar::b#7 )
  (byte) makechar::i#5 ← phi( makechar::@4/(byte) makechar::i#6 makechar::@9/(byte) makechar::i#7 )
  (word) makechar::c#8 ← phi( makechar::@4/(word) makechar::c#9 makechar::@9/(word) makechar::c#10 )
  (byte) makechar::ii#3 ← phi( makechar::@4/(byte) makechar::ii#1 makechar::@9/(byte) makechar::ii#2 )
  (bool~) makechar::$2 ← (byte) makechar::ii#3 < (number) 8
  if((bool~) makechar::$2) goto makechar::@7
  to:makechar::@8
makechar::@7: scope:[makechar]  from makechar::@6
  (byte) makechar::i#10 ← phi( makechar::@6/(byte) makechar::i#5 )
  (word) makechar::c#13 ← phi( makechar::@6/(word) makechar::c#8 )
  (byte) makechar::b#8 ← phi( makechar::@6/(byte) makechar::b#5 )
  (byte) makechar::ii#7 ← phi( makechar::@6/(byte) makechar::ii#3 )
  (byte) makechar::s#3 ← phi( makechar::@6/(byte) makechar::s#4 )
  (word) rand_state#19 ← phi( makechar::@6/(word) rand_state#26 )
  call rand 
  (word) rand::return#2 ← (word) rand::return#1
  to:makechar::@11
makechar::@11: scope:[makechar]  from makechar::@7
  (byte) makechar::i#9 ← phi( makechar::@7/(byte) makechar::i#10 )
  (word) makechar::c#12 ← phi( makechar::@7/(word) makechar::c#13 )
  (byte) makechar::b#6 ← phi( makechar::@7/(byte) makechar::b#8 )
  (byte) makechar::ii#6 ← phi( makechar::@7/(byte) makechar::ii#7 )
  (byte) makechar::s#2 ← phi( makechar::@7/(byte) makechar::s#3 )
  (word) rand_state#13 ← phi( makechar::@7/(word) rand_state#3 )
  (word) rand::return#4 ← phi( makechar::@7/(word) rand::return#2 )
  (word~) makechar::$3 ← (word) rand::return#4
  (word) rand_state#4 ← (word) rand_state#13
  (number~) makechar::$4 ← (word~) makechar::$3 & (number) $ff
  (bool~) makechar::$5 ← (number~) makechar::$4 > (byte) makechar::s#2
  (bool~) makechar::$6 ← ! (bool~) makechar::$5
  if((bool~) makechar::$6) goto makechar::@9
  to:makechar::@10
makechar::@8: scope:[makechar]  from makechar::@6
  (byte) makechar::s#9 ← phi( makechar::@6/(byte) makechar::s#4 )
  (word) rand_state#33 ← phi( makechar::@6/(word) rand_state#26 )
  (byte) makechar::b#3 ← phi( makechar::@6/(byte) makechar::b#5 )
  (byte) makechar::i#4 ← phi( makechar::@6/(byte) makechar::i#5 )
  (word) makechar::c#6 ← phi( makechar::@6/(word) makechar::c#8 )
  (word~) makechar::$7 ← (word) makechar::c#6 << (number) 3
  (word~) makechar::$8 ← (word~) makechar::$7 + (byte) makechar::i#4
  *((byte*)(const nomodify byte*) CHARSET + (word~) makechar::$8) ← (byte) makechar::b#3
  (byte) makechar::i#2 ← ++ (byte) makechar::i#4
  to:makechar::@3
makechar::@9: scope:[makechar]  from makechar::@10 makechar::@11
  (byte) makechar::s#6 ← phi( makechar::@10/(byte) makechar::s#8 makechar::@11/(byte) makechar::s#2 )
  (word) rand_state#30 ← phi( makechar::@10/(word) rand_state#34 makechar::@11/(word) rand_state#4 )
  (byte) makechar::b#7 ← phi( makechar::@10/(byte) makechar::b#2 makechar::@11/(byte) makechar::b#6 )
  (byte) makechar::i#7 ← phi( makechar::@10/(byte) makechar::i#8 makechar::@11/(byte) makechar::i#9 )
  (word) makechar::c#10 ← phi( makechar::@10/(word) makechar::c#11 makechar::@11/(word) makechar::c#12 )
  (byte) makechar::ii#4 ← phi( makechar::@10/(byte) makechar::ii#5 makechar::@11/(byte) makechar::ii#6 )
  (byte) makechar::ii#2 ← ++ (byte) makechar::ii#4
  to:makechar::@6
makechar::@10: scope:[makechar]  from makechar::@11
  (byte) makechar::s#8 ← phi( makechar::@11/(byte) makechar::s#2 )
  (word) rand_state#34 ← phi( makechar::@11/(word) rand_state#4 )
  (byte) makechar::i#8 ← phi( makechar::@11/(byte) makechar::i#9 )
  (word) makechar::c#11 ← phi( makechar::@11/(word) makechar::c#12 )
  (byte) makechar::ii#5 ← phi( makechar::@11/(byte) makechar::ii#6 )
  (byte) makechar::b#4 ← phi( makechar::@11/(byte) makechar::b#6 )
  (byte) makechar::b#2 ← (byte) makechar::b#4 | *((const to_nomodify byte*) bittab + (byte) makechar::ii#5)
  to:makechar::@9
makechar::@return: scope:[makechar]  from makechar::@1
  (word) rand_state#14 ← phi( makechar::@1/(word) rand_state#20 )
  (word) rand_state#5 ← (word) rand_state#14
  return 
  to:@return

(signed word()) main()
main: scope:[main]  from __start::@1
  (byte*) print_line_cursor#29 ← phi( __start::@1/(byte*) print_line_cursor#21 )
  (byte*) print_char_cursor#47 ← phi( __start::@1/(byte*) print_char_cursor#40 )
  (word) Ticks#23 ← phi( __start::@1/(word) Ticks#16 )
  (word) rand_state#21 ← phi( __start::@1/(word) rand_state#23 )
  (byte) main::v#0 ← (byte) 0
  (byte) main::block#0 ← (byte) 0
  (word) main::count#0 ← (word) $1f4
  call makechar 
  to:main::@4
main::@4: scope:[main]  from main
  (byte*) print_line_cursor#27 ← phi( main/(byte*) print_line_cursor#29 )
  (byte*) print_char_cursor#45 ← phi( main/(byte*) print_char_cursor#47 )
  (word) Ticks#21 ← phi( main/(word) Ticks#23 )
  (word) main::count#6 ← phi( main/(word) main::count#0 )
  (word) rand_state#15 ← phi( main/(word) rand_state#5 )
  (word) rand_state#6 ← (word) rand_state#15
  call start 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (word) rand_state#35 ← phi( main::@4/(word) rand_state#6 )
  (byte*) print_line_cursor#25 ← phi( main::@4/(byte*) print_line_cursor#27 )
  (byte*) print_char_cursor#43 ← phi( main::@4/(byte*) print_char_cursor#45 )
  (word) Ticks#19 ← phi( main::@4/(word) Ticks#21 )
  (word) main::count#4 ← phi( main::@4/(word) main::count#6 )
  (byte) main::block#1 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A)
  (byte) main::tmp#0 ← (byte) 0
  (number~) main::$2 ← (byte) main::block#1 & (number) $fc
  (byte) main::tmp#1 ← (number~) main::$2
  (byte) main::tmp#2 ← (byte) main::tmp#1 | (byte)(word)(const nomodify byte*) SCREEN1>>(number) $e^(number) 3
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (byte) main::tmp#2
  (byte) main::v#1 ← *((const nomodify byte*) VIC_MEMORY)
  to:main::@1
main::@1: scope:[main]  from main::@5 main::@7
  (word) rand_state#31 ← phi( main::@5/(word) rand_state#35 main::@7/(word) rand_state#36 )
  (byte*) print_line_cursor#23 ← phi( main::@5/(byte*) print_line_cursor#25 main::@7/(byte*) print_line_cursor#26 )
  (byte*) print_char_cursor#42 ← phi( main::@5/(byte*) print_char_cursor#43 main::@7/(byte*) print_char_cursor#44 )
  (word) Ticks#18 ← phi( main::@5/(word) Ticks#19 main::@7/(word) Ticks#20 )
  (byte) main::block#3 ← phi( main::@5/(byte) main::block#1 main::@7/(byte) main::block#4 )
  (byte) main::v#3 ← phi( main::@5/(byte) main::v#1 main::@7/(byte) main::v#4 )
  (word) main::count#2 ← phi( main::@5/(word) main::count#4 main::@7/(word) main::count#1 )
  (bool~) main::$6 ← (number) 0 != (word) main::count#2
  if((bool~) main::$6) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  (word) rand_state#38 ← phi( main::@1/(word) rand_state#31 )
  (byte*) print_line_cursor#30 ← phi( main::@1/(byte*) print_line_cursor#23 )
  (byte*) print_char_cursor#48 ← phi( main::@1/(byte*) print_char_cursor#42 )
  (word) Ticks#24 ← phi( main::@1/(word) Ticks#18 )
  (byte) main::block#6 ← phi( main::@1/(byte) main::block#3 )
  (byte) main::v#6 ← phi( main::@1/(byte) main::v#3 )
  (word) main::count#7 ← phi( main::@1/(word) main::count#2 )
  (byte*) doplasma::scrn#1 ← (byte*)(const nomodify byte*) SCREEN1
  call doplasma 
  to:main::@6
main::@6: scope:[main]  from main::@2
  (word) rand_state#37 ← phi( main::@2/(word) rand_state#38 )
  (byte*) print_line_cursor#28 ← phi( main::@2/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#46 ← phi( main::@2/(byte*) print_char_cursor#48 )
  (word) Ticks#22 ← phi( main::@2/(word) Ticks#24 )
  (byte) main::block#5 ← phi( main::@2/(byte) main::block#6 )
  (byte) main::v#5 ← phi( main::@2/(byte) main::v#6 )
  (word) main::count#5 ← phi( main::@2/(word) main::count#7 )
  *((const nomodify byte*) VIC_MEMORY) ← (const nomodify byte) PAGE1
  (byte*) doplasma::scrn#2 ← (byte*)(const nomodify byte*) SCREEN2
  call doplasma 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (word) rand_state#36 ← phi( main::@6/(word) rand_state#37 )
  (byte*) print_line_cursor#26 ← phi( main::@6/(byte*) print_line_cursor#28 )
  (byte*) print_char_cursor#44 ← phi( main::@6/(byte*) print_char_cursor#46 )
  (word) Ticks#20 ← phi( main::@6/(word) Ticks#22 )
  (byte) main::block#4 ← phi( main::@6/(byte) main::block#5 )
  (byte) main::v#4 ← phi( main::@6/(byte) main::v#5 )
  (word) main::count#3 ← phi( main::@6/(word) main::count#5 )
  *((const nomodify byte*) VIC_MEMORY) ← (const nomodify byte) PAGE2
  (word) main::count#1 ← -- (word) main::count#3
  to:main::@1
main::@3: scope:[main]  from main::@1
  (word) rand_state#27 ← phi( main::@1/(word) rand_state#31 )
  (byte*) print_line_cursor#20 ← phi( main::@1/(byte*) print_line_cursor#23 )
  (byte*) print_char_cursor#39 ← phi( main::@1/(byte*) print_char_cursor#42 )
  (word) Ticks#15 ← phi( main::@1/(word) Ticks#18 )
  (byte) main::block#2 ← phi( main::@1/(byte) main::block#3 )
  (byte) main::v#2 ← phi( main::@1/(byte) main::v#3 )
  *((const nomodify byte*) VIC_MEMORY) ← (byte) main::v#2
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (byte) main::block#2
  call end 
  to:main::@8
main::@8: scope:[main]  from main::@3
  (word) rand_state#22 ← phi( main::@3/(word) rand_state#27 )
  (byte*) print_line_cursor#14 ← phi( main::@3/(byte*) print_line_cursor#3 )
  (byte*) print_char_cursor#31 ← phi( main::@3/(byte*) print_char_cursor#12 )
  (word) Ticks#10 ← phi( main::@3/(word) Ticks#2 )
  (word) Ticks#3 ← (word) Ticks#10
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#31
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#14
  (signed word) main::return#0 ← (number) 0
  to:main::@return
main::@return: scope:[main]  from main::@8
  (byte*) print_line_cursor#15 ← phi( main::@8/(byte*) print_line_cursor#4 )
  (byte*) print_char_cursor#32 ← phi( main::@8/(byte*) print_char_cursor#13 )
  (word) Ticks#11 ← phi( main::@8/(word) Ticks#3 )
  (word) rand_state#16 ← phi( main::@8/(word) rand_state#22 )
  (signed word) main::return#3 ← phi( main::@8/(signed word) main::return#0 )
  (signed word) main::return#1 ← (signed word) main::return#3
  (word) rand_state#7 ← (word) rand_state#16
  (word) Ticks#4 ← (word) Ticks#11
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#32
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#15
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (word) rand_state#8 ← (word) 1
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#6 ← (byte*) print_screen#0
  (byte*) print_char_cursor#15 ← (byte*) print_line_cursor#6
  (volatile word) last_time ← (word) 0
  (word) Ticks#5 ← (word) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  (byte*) print_screen#4 ← phi( __start::__init1/(byte*) print_screen#0 )
  (byte*) print_line_cursor#21 ← phi( __start::__init1/(byte*) print_line_cursor#6 )
  (byte*) print_char_cursor#40 ← phi( __start::__init1/(byte*) print_char_cursor#15 )
  (word) Ticks#16 ← phi( __start::__init1/(word) Ticks#5 )
  (word) rand_state#23 ← phi( __start::__init1/(word) rand_state#8 )
  call main 
  (signed word) main::return#2 ← (signed word) main::return#1
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  (byte*) print_screen#3 ← phi( __start::@1/(byte*) print_screen#4 )
  (byte*) print_line_cursor#16 ← phi( __start::@1/(byte*) print_line_cursor#5 )
  (byte*) print_char_cursor#33 ← phi( __start::@1/(byte*) print_char_cursor#14 )
  (word) Ticks#12 ← phi( __start::@1/(word) Ticks#4 )
  (word) rand_state#17 ← phi( __start::@1/(word) rand_state#7 )
  (word) rand_state#9 ← (word) rand_state#17
  (word) Ticks#6 ← (word) Ticks#12
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#33
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#16
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  (word) Ticks#13 ← phi( __start::@2/(word) Ticks#6 )
  (byte*) print_char_cursor#34 ← phi( __start::@2/(byte*) print_char_cursor#16 )
  (byte*) print_line_cursor#17 ← phi( __start::@2/(byte*) print_line_cursor#7 )
  (byte*) print_screen#2 ← phi( __start::@2/(byte*) print_screen#3 )
  (word) rand_state#18 ← phi( __start::@2/(word) rand_state#9 )
  (word) rand_state#10 ← (word) rand_state#18
  (byte*) print_screen#1 ← (byte*) print_screen#2
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#17
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#34
  (word) Ticks#7 ← (word) Ticks#13
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) CHARSET = (byte*)(number) $e800
(const nomodify struct MOS6526_CIA*) CIA2 = (struct MOS6526_CIA*)(number) $dd00
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A = (byte) 0
(const nomodify byte) PAGE1 = (byte)(word)(const nomodify byte*) SCREEN1>>(number) 6&(number) $f0|(word)(const nomodify byte*) CHARSET>>(number) $a&(number) $e
(const nomodify byte) PAGE2 = (byte)(word)(const nomodify byte*) SCREEN2>>(number) 6&(number) $f0|(word)(const nomodify byte*) CHARSET>>(number) $a&(number) $e
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const nomodify byte*) SCREEN1 = (byte*)(number) $e000
(const nomodify byte*) SCREEN2 = (byte*)(number) $e400
(word) Ticks
(word) Ticks#0
(word) Ticks#1
(word) Ticks#10
(word) Ticks#11
(word) Ticks#12
(word) Ticks#13
(word) Ticks#14
(word) Ticks#15
(word) Ticks#16
(word) Ticks#17
(word) Ticks#18
(word) Ticks#19
(word) Ticks#2
(word) Ticks#20
(word) Ticks#21
(word) Ticks#22
(word) Ticks#23
(word) Ticks#24
(word) Ticks#3
(word) Ticks#4
(word) Ticks#5
(word) Ticks#6
(word) Ticks#7
(word) Ticks#8
(word) Ticks#9
(const nomodify byte*) VIC_MEMORY = (byte*)(number) $d018
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(const to_nomodify byte*) bittab[]  = { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
(void()) doplasma((byte*) doplasma::scrn)
(bool~) doplasma::$0
(byte~) doplasma::$1
(bool~) doplasma::$2
(byte~) doplasma::$3
(bool~) doplasma::$4
(bool~) doplasma::$5
(byte~) doplasma::$6
(label) doplasma::@1
(label) doplasma::@10
(label) doplasma::@11
(label) doplasma::@2
(label) doplasma::@3
(label) doplasma::@4
(label) doplasma::@5
(label) doplasma::@6
(label) doplasma::@7
(label) doplasma::@8
(label) doplasma::@9
(label) doplasma::@return
(byte) doplasma::c1A
(byte) doplasma::c1A#0
(byte) doplasma::c1A#1
(byte) doplasma::c1A#2
(byte) doplasma::c1A#3
(byte) doplasma::c1A#4
(byte) doplasma::c1B
(byte) doplasma::c1B#0
(byte) doplasma::c1B#1
(byte) doplasma::c1B#2
(byte) doplasma::c1B#3
(byte) doplasma::c1B#4
(byte) doplasma::c1a
(byte) doplasma::c1a#0
(byte) doplasma::c1a#1
(byte) doplasma::c1a#2
(byte) doplasma::c1a#3
(byte) doplasma::c1a#4
(byte) doplasma::c1b
(byte) doplasma::c1b#0
(byte) doplasma::c1b#1
(byte) doplasma::c1b#2
(byte) doplasma::c1b#3
(byte) doplasma::c1b#4
(byte) doplasma::c2A
(byte) doplasma::c2A#0
(byte) doplasma::c2A#1
(byte) doplasma::c2A#2
(byte) doplasma::c2A#3
(byte) doplasma::c2A#4
(byte) doplasma::c2A#5
(byte) doplasma::c2A#6
(byte) doplasma::c2A#7
(byte) doplasma::c2B
(byte) doplasma::c2B#0
(byte) doplasma::c2B#1
(byte) doplasma::c2B#2
(byte) doplasma::c2B#3
(byte) doplasma::c2B#4
(byte) doplasma::c2B#5
(byte) doplasma::c2B#6
(byte) doplasma::c2B#7
(byte) doplasma::c2a
(byte) doplasma::c2a#0
(byte) doplasma::c2a#1
(byte) doplasma::c2a#2
(byte) doplasma::c2a#3
(byte) doplasma::c2a#4
(byte) doplasma::c2b
(byte) doplasma::c2b#0
(byte) doplasma::c2b#1
(byte) doplasma::c2b#2
(byte) doplasma::c2b#3
(byte) doplasma::c2b#4
(byte) doplasma::i
(byte) doplasma::i#0
(byte) doplasma::i#1
(byte) doplasma::i#2
(byte) doplasma::i#3
(byte) doplasma::i#4
(byte) doplasma::ii
(byte) doplasma::ii#0
(byte) doplasma::ii#1
(byte) doplasma::ii#2
(byte) doplasma::ii#3
(byte) doplasma::ii#4
(byte) doplasma::j
(byte) doplasma::j#0
(byte) doplasma::j#1
(byte) doplasma::j#2
(byte) doplasma::j#3
(byte) doplasma::j#4
(byte) doplasma::jj
(byte) doplasma::jj#0
(byte) doplasma::jj#1
(byte) doplasma::jj#2
(byte) doplasma::jj#3
(byte) doplasma::jj#4
(byte) doplasma::jj#5
(byte) doplasma::jj#6
(byte) doplasma::jj#7
(byte*) doplasma::scrn
(byte*) doplasma::scrn#0
(byte*) doplasma::scrn#1
(byte*) doplasma::scrn#10
(byte*) doplasma::scrn#11
(byte*) doplasma::scrn#12
(byte*) doplasma::scrn#13
(byte*) doplasma::scrn#14
(byte*) doplasma::scrn#2
(byte*) doplasma::scrn#3
(byte*) doplasma::scrn#4
(byte*) doplasma::scrn#5
(byte*) doplasma::scrn#6
(byte*) doplasma::scrn#7
(byte*) doplasma::scrn#8
(byte*) doplasma::scrn#9
(void()) end()
(label) end::@1
(label) end::@2
(label) end::@3
(label) end::@return
(volatile word) last_time loadstore
(signed word()) main()
(number~) main::$2
(bool~) main::$6
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@return
(byte) main::block
(byte) main::block#0
(byte) main::block#1
(byte) main::block#2
(byte) main::block#3
(byte) main::block#4
(byte) main::block#5
(byte) main::block#6
(word) main::count
(word) main::count#0
(word) main::count#1
(word) main::count#2
(word) main::count#3
(word) main::count#4
(word) main::count#5
(word) main::count#6
(word) main::count#7
(signed word) main::return
(signed word) main::return#0
(signed word) main::return#1
(signed word) main::return#2
(signed word) main::return#3
(byte) main::tmp
(byte) main::tmp#0
(byte) main::tmp#1
(byte) main::tmp#2
(byte) main::v
(byte) main::v#0
(byte) main::v#1
(byte) main::v#2
(byte) main::v#3
(byte) main::v#4
(byte) main::v#5
(byte) main::v#6
(void()) makechar()
(bool~) makechar::$0
(bool~) makechar::$1
(bool~) makechar::$2
(word~) makechar::$3
(number~) makechar::$4
(bool~) makechar::$5
(bool~) makechar::$6
(word~) makechar::$7
(word~) makechar::$8
(byte~) makechar::$9
(label) makechar::@1
(label) makechar::@10
(label) makechar::@11
(label) makechar::@2
(label) makechar::@3
(label) makechar::@4
(label) makechar::@5
(label) makechar::@6
(label) makechar::@7
(label) makechar::@8
(label) makechar::@9
(label) makechar::@return
(byte) makechar::b
(byte) makechar::b#0
(byte) makechar::b#1
(byte) makechar::b#2
(byte) makechar::b#3
(byte) makechar::b#4
(byte) makechar::b#5
(byte) makechar::b#6
(byte) makechar::b#7
(byte) makechar::b#8
(word) makechar::c
(word) makechar::c#0
(word) makechar::c#1
(word) makechar::c#10
(word) makechar::c#11
(word) makechar::c#12
(word) makechar::c#13
(word) makechar::c#2
(word) makechar::c#3
(word) makechar::c#4
(word) makechar::c#5
(word) makechar::c#6
(word) makechar::c#7
(word) makechar::c#8
(word) makechar::c#9
(byte) makechar::i
(byte) makechar::i#0
(byte) makechar::i#1
(byte) makechar::i#10
(byte) makechar::i#2
(byte) makechar::i#3
(byte) makechar::i#4
(byte) makechar::i#5
(byte) makechar::i#6
(byte) makechar::i#7
(byte) makechar::i#8
(byte) makechar::i#9
(byte) makechar::ii
(byte) makechar::ii#0
(byte) makechar::ii#1
(byte) makechar::ii#2
(byte) makechar::ii#3
(byte) makechar::ii#4
(byte) makechar::ii#5
(byte) makechar::ii#6
(byte) makechar::ii#7
(byte) makechar::s
(byte) makechar::s#0
(byte) makechar::s#1
(byte) makechar::s#2
(byte) makechar::s#3
(byte) makechar::s#4
(byte) makechar::s#5
(byte) makechar::s#6
(byte) makechar::s#7
(byte) makechar::s#8
(byte) makechar::s#9
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#5
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0
(number~) print_uchar::$2
(label) print_uchar::@1
(label) print_uchar::@2
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0
(byte) print_uchar::b#1
(byte) print_uchar::b#2
(byte) print_uchar::b#3
(void()) print_uint((word) print_uint::w)
(byte~) print_uint::$0
(byte~) print_uint::$2
(label) print_uint::@1
(label) print_uint::@2
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0
(word) print_uint::w#1
(word) print_uint::w#2
(word()) rand()
(word~) rand::$0
(word~) rand::$1
(word~) rand::$2
(label) rand::@return
(word) rand::return
(word) rand::return#0
(word) rand::return#1
(word) rand::return#2
(word) rand::return#3
(word) rand::return#4
(word) rand_state
(word) rand_state#0
(word) rand_state#1
(word) rand_state#10
(word) rand_state#11
(word) rand_state#12
(word) rand_state#13
(word) rand_state#14
(word) rand_state#15
(word) rand_state#16
(word) rand_state#17
(word) rand_state#18
(word) rand_state#19
(word) rand_state#2
(word) rand_state#20
(word) rand_state#21
(word) rand_state#22
(word) rand_state#23
(word) rand_state#24
(word) rand_state#25
(word) rand_state#26
(word) rand_state#27
(word) rand_state#28
(word) rand_state#29
(word) rand_state#3
(word) rand_state#30
(word) rand_state#31
(word) rand_state#32
(word) rand_state#33
(word) rand_state#34
(word) rand_state#35
(word) rand_state#36
(word) rand_state#37
(word) rand_state#38
(word) rand_state#4
(word) rand_state#5
(word) rand_state#6
(word) rand_state#7
(word) rand_state#8
(word) rand_state#9
(const to_nomodify byte*) sinustable[(number) $100]  = { (byte) $80, (byte) $7d, (byte) $7a, (byte) $77, (byte) $74, (byte) $70, (byte) $6d, (byte) $6a, (byte) $67, (byte) $64, (byte) $61, (byte) $5e, (byte) $5b, (byte) $58, (byte) $55, (byte) $52, (byte) $4f, (byte) $4d, (byte) $4a, (byte) $47, (byte) $44, (byte) $41, (byte) $3f, (byte) $3c, (byte) $39, (byte) $37, (byte) $34, (byte) $32, (byte) $2f, (byte) $2d, (byte) $2b, (byte) $28, (byte) $26, (byte) $24, (byte) $22, (byte) $20, (byte) $1e, (byte) $1c, (byte) $1a, (byte) $18, (byte) $16, (byte) $15, (byte) $13, (byte) $11, (byte) $10, (byte) $f, (byte) $d, (byte) $c, (byte) $b, (byte) $a, (byte) 8, (byte) 7, (byte) 6, (byte) 6, (byte) 5, (byte) 4, (byte) 3, (byte) 3, (byte) 2, (byte) 2, (byte) 2, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 2, (byte) 2, (byte) 2, (byte) 3, (byte) 3, (byte) 4, (byte) 5, (byte) 6, (byte) 6, (byte) 7, (byte) 8, (byte) $a, (byte) $b, (byte) $c, (byte) $d, (byte) $f, (byte) $10, (byte) $11, (byte) $13, (byte) $15, (byte) $16, (byte) $18, (byte) $1a, (byte) $1c, (byte) $1e, (byte) $20, (byte) $22, (byte) $24, (byte) $26, (byte) $28, (byte) $2b, (byte) $2d, (byte) $2f, (byte) $32, (byte) $34, (byte) $37, (byte) $39, (byte) $3c, (byte) $3f, (byte) $41, (byte) $44, (byte) $47, (byte) $4a, (byte) $4d, (byte) $4f, (byte) $52, (byte) $55, (byte) $58, (byte) $5b, (byte) $5e, (byte) $61, (byte) $64, (byte) $67, (byte) $6a, (byte) $6d, (byte) $70, (byte) $74, (byte) $77, (byte) $7a, (byte) $7d, (byte) $80, (byte) $83, (byte) $86, (byte) $89, (byte) $8c, (byte) $90, (byte) $93, (byte) $96, (byte) $99, (byte) $9c, (byte) $9f, (byte) $a2, (byte) $a5, (byte) $a8, (byte) $ab, (byte) $ae, (byte) $b1, (byte) $b3, (byte) $b6, (byte) $b9, (byte) $bc, (byte) $bf, (byte) $c1, (byte) $c4, (byte) $c7, (byte) $c9, (byte) $cc, (byte) $ce, (byte) $d1, (byte) $d3, (byte) $d5, (byte) $d8, (byte) $da, (byte) $dc, (byte) $de, (byte) $e0, (byte) $e2, (byte) $e4, (byte) $e6, (byte) $e8, (byte) $ea, (byte) $eb, (byte) $ed, (byte) $ef, (byte) $f0, (byte) $f1, (byte) $f3, (byte) $f4, (byte) $f5, (byte) $f6, (byte) $f8, (byte) $f9, (byte) $fa, (byte) $fa, (byte) $fb, (byte) $fc, (byte) $fd, (byte) $fd, (byte) $fe, (byte) $fe, (byte) $fe, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $fe, (byte) $fe, (byte) $fe, (byte) $fd, (byte) $fd, (byte) $fc, (byte) $fb, (byte) $fa, (byte) $fa, (byte) $f9, (byte) $f8, (byte) $f6, (byte) $f5, (byte) $f4, (byte) $f3, (byte) $f1, (byte) $f0, (byte) $ef, (byte) $ed, (byte) $eb, (byte) $ea, (byte) $e8, (byte) $e6, (byte) $e4, (byte) $e2, (byte) $e0, (byte) $de, (byte) $dc, (byte) $da, (byte) $d8, (byte) $d5, (byte) $d3, (byte) $d1, (byte) $ce, (byte) $cc, (byte) $c9, (byte) $c7, (byte) $c4, (byte) $c1, (byte) $bf, (byte) $bc, (byte) $b9, (byte) $b6, (byte) $b3, (byte) $b1, (byte) $ae, (byte) $ab, (byte) $a8, (byte) $a5, (byte) $a2, (byte) $9f, (byte) $9c, (byte) $99, (byte) $96, (byte) $93, (byte) $90, (byte) $8c, (byte) $89, (byte) $86, (byte) $83 }
(void()) start()
(label) start::@return
(const nomodify word*) start::LAST_TIME = &(volatile word) last_time
(const byte*) xbuf[(number) $28]  = { fill( $28, 0) }
(const byte*) ybuf[(number) $19]  = { fill( $19, 0) }

Adding number conversion cast (unumber) $f0 in 
Adding number conversion cast (unumber) 6 in 
Adding number conversion cast (unumber) $e in 
Adding number conversion cast (unumber) $a in 
Adding number conversion cast (unumber) $f0 in 
Adding number conversion cast (unumber) 6 in 
Adding number conversion cast (unumber) $e in 
Adding number conversion cast (unumber) $a in 
Adding number conversion cast (unumber) 7 in (word~) rand::$0 ← (word) rand_state#11 << (number) 7
Adding number conversion cast (unumber) 9 in (word~) rand::$1 ← (word) rand_state#0 >> (number) 9
Adding number conversion cast (unumber) 8 in (word~) rand::$2 ← (word) rand_state#1 << (number) 8
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
Adding number conversion cast (unumber) 4 in (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (number) $f
Adding number conversion cast (unumber) print_uchar::$2 in (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (unumber)(number) $f
Adding number conversion cast (unumber) 0 in (byte) doplasma::ii#1 ← (number) 0
Adding number conversion cast (unumber) $19 in (bool~) doplasma::$0 ← (byte) doplasma::ii#3 < (number) $19
Adding number conversion cast (unumber) 4 in (byte) doplasma::c1a#2 ← (byte) doplasma::c1a#3 + (number) 4
Adding number conversion cast (unumber) 9 in (byte) doplasma::c1b#2 ← (byte) doplasma::c1b#3 + (number) 9
Adding number conversion cast (unumber) 3 in (byte) doplasma::c1A#1 ← (byte) doplasma::c1A#2 + (number) 3
Adding number conversion cast (unumber) 5 in (byte) doplasma::c1B#1 ← (byte) doplasma::c1B#2 - (number) 5
Adding number conversion cast (unumber) 0 in (byte) doplasma::i#1 ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) doplasma::$2 ← (byte) doplasma::i#3 < (number) $28
Adding number conversion cast (unumber) 3 in (byte) doplasma::c2a#2 ← (byte) doplasma::c2a#3 + (number) 3
Adding number conversion cast (unumber) 7 in (byte) doplasma::c2b#2 ← (byte) doplasma::c2b#3 + (number) 7
Adding number conversion cast (unumber) 2 in (byte) doplasma::c2A#1 ← (byte) doplasma::c2A#3 + (number) 2
Adding number conversion cast (unumber) 3 in (byte) doplasma::c2B#1 ← (byte) doplasma::c2B#3 - (number) 3
Adding number conversion cast (unumber) 0 in (byte) doplasma::jj#1 ← (number) 0
Adding number conversion cast (unumber) $19 in (bool~) doplasma::$4 ← (byte) doplasma::jj#3 < (number) $19
Adding number conversion cast (unumber) 0 in (byte) doplasma::j#1 ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) doplasma::$5 ← (byte) doplasma::j#3 < (number) $28
Adding number conversion cast (unumber) $28 in (byte*) doplasma::scrn#0 ← (byte*) doplasma::scrn#4 + (number) $28
Adding number conversion cast (unumber) 0 in (word) makechar::c#1 ← (number) 0
Adding number conversion cast (unumber) $100 in (bool~) makechar::$0 ← (word) makechar::c#3 < (number) $100
Adding number conversion cast (unumber) 0 in (byte) makechar::i#1 ← (number) 0
Adding number conversion cast (unumber) 8 in (bool~) makechar::$1 ← (byte) makechar::i#3 < (number) 8
Adding number conversion cast (unumber) 0 in (byte) makechar::b#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) makechar::ii#1 ← (number) 0
Adding number conversion cast (unumber) 8 in (bool~) makechar::$2 ← (byte) makechar::ii#3 < (number) 8
Adding number conversion cast (unumber) $ff in (number~) makechar::$4 ← (word~) makechar::$3 & (number) $ff
Adding number conversion cast (unumber) makechar::$4 in (number~) makechar::$4 ← (word~) makechar::$3 & (unumber)(number) $ff
Adding number conversion cast (unumber) 3 in (word~) makechar::$7 ← (word) makechar::c#6 << (number) 3
Adding number conversion cast (unumber) $fc in (number~) main::$2 ← (byte) main::block#1 & (number) $fc
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← (byte) main::block#1 & (unumber)(number) $fc
Adding number conversion cast (unumber) 3 in (byte) main::tmp#2 ← (byte) main::tmp#1 | (byte)(word)(const nomodify byte*) SCREEN1>>(number) $e^(number) 3
Adding number conversion cast (unumber) $e in (byte) main::tmp#2 ← (byte) main::tmp#1 | (byte)(word)(const nomodify byte*) SCREEN1>>(number) $e^(unumber)(number) 3
Adding number conversion cast (unumber) 0 in (bool~) main::$6 ← (number) 0 != (word) main::count#2
Adding number conversion cast (snumber) 0 in (signed word) main::return#0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) doplasma::ii#1 ← (unumber)(number) 0
Inlining cast (byte) doplasma::i#1 ← (unumber)(number) 0
Inlining cast (byte) doplasma::jj#1 ← (unumber)(number) 0
Inlining cast (byte) doplasma::j#1 ← (unumber)(number) 0
Inlining cast (word) makechar::c#1 ← (unumber)(number) 0
Inlining cast (byte) makechar::i#1 ← (unumber)(number) 0
Inlining cast (byte) makechar::b#1 ← (unumber)(number) 0
Inlining cast (byte) makechar::ii#1 ← (unumber)(number) 0
Inlining cast (signed word) main::return#0 ← (snumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (struct MOS6526_CIA*) 56576
Simplifying constant pointer cast (byte*) 57344
Simplifying constant pointer cast (byte*) 58368
Simplifying constant pointer cast (byte*) 59392
Simplifying constant integer cast 6
Simplifying constant integer cast $f0
Simplifying constant integer cast $a
Simplifying constant integer cast $e
Simplifying constant integer cast 6
Simplifying constant integer cast $f0
Simplifying constant integer cast $a
Simplifying constant integer cast $e
Simplifying constant integer cast 7
Simplifying constant integer cast 9
Simplifying constant integer cast 8
Simplifying constant integer cast $28
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 4
Simplifying constant integer cast 9
Simplifying constant integer cast 3
Simplifying constant integer cast 5
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 3
Simplifying constant integer cast 7
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $100
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast $ff
Simplifying constant integer cast 3
Simplifying constant integer cast (const nomodify byte*) CHARSET
Simplifying constant integer cast $fc
Simplifying constant integer cast $e
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast (const nomodify byte*) SCREEN1
Simplifying constant integer cast (const nomodify byte*) SCREEN2
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $f0
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $e
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $f0
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $e
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $fc
Finalized unsigned number type (byte) $e
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_uchar::$2 ← (byte) print_uchar::b#3 & (byte) $f
Inferred type updated to byte in (unumber~) makechar::$4 ← (word~) makechar::$3 & (byte) $ff
Inferred type updated to byte in (unumber~) main::$2 ← (byte) main::block#1 & (byte) $fc
Inversing boolean not [172] (bool~) makechar::$6 ← (byte~) makechar::$4 <= (byte) makechar::s#2 from [171] (bool~) makechar::$5 ← (byte~) makechar::$4 > (byte) makechar::s#2
Successful SSA optimization Pass2UnaryNotSimplification
Alias rand::return#0 = rand::return#3 rand::return#1 
Alias rand_state#12 = rand_state#2 rand_state#3 
Alias print_line_cursor#0 = print_ln::$0 print_line_cursor#10 print_char_cursor#0 print_line_cursor#11 print_char_cursor#19 print_line_cursor#1 print_char_cursor#1 
Alias print_uchar::b#0 = print_uint::$0 
Alias print_uint::w#1 = print_uint::w#2 
Alias print_char_cursor#2 = print_char_cursor#20 
Alias print_uchar::b#1 = print_uint::$2 
Alias print_char_cursor#21 = print_char_cursor#3 print_char_cursor#22 print_char_cursor#4 
Alias print_uchar::b#2 = print_uchar::b#3 
Alias print_char_cursor#23 = print_char_cursor#5 
Alias print_char_cursor#24 = print_char_cursor#6 print_char_cursor#25 print_char_cursor#7 
Alias print_char_cursor#27 = print_char_cursor#8 print_char_cursor#9 
Alias Ticks#0 = Ticks#8 
Alias print_char_cursor#38 = print_char_cursor#41 
Alias print_line_cursor#19 = print_line_cursor#22 print_line_cursor#24 
Alias Ticks#1 = Ticks#17 Ticks#14 Ticks#9 Ticks#2 
Alias print_char_cursor#10 = print_char_cursor#28 
Alias print_line_cursor#12 = print_line_cursor#2 print_line_cursor#13 print_line_cursor#3 
Alias print_char_cursor#11 = print_char_cursor#29 print_char_cursor#30 print_char_cursor#12 
Alias doplasma::c1a#1 = doplasma::c1A#0 
Alias doplasma::c1b#1 = doplasma::c1B#0 
Alias doplasma::c1a#3 = doplasma::c1a#4 
Alias doplasma::c1b#3 = doplasma::c1b#4 
Alias doplasma::ii#3 = doplasma::ii#4 
Alias doplasma::c1A#2 = doplasma::c1A#4 doplasma::c1A#3 
Alias doplasma::c1B#2 = doplasma::c1B#4 doplasma::c1B#3 
Alias doplasma::c2A#2 = doplasma::c2A#6 doplasma::c2A#4 doplasma::c2a#1 
Alias doplasma::c2B#2 = doplasma::c2B#6 doplasma::c2B#4 doplasma::c2b#1 
Alias doplasma::scrn#10 = doplasma::scrn#14 doplasma::scrn#12 
Alias doplasma::c2a#3 = doplasma::c2a#4 
Alias doplasma::c2b#3 = doplasma::c2b#4 
Alias doplasma::i#3 = doplasma::i#4 
Alias doplasma::c2A#3 = doplasma::c2A#7 doplasma::c2A#5 
Alias doplasma::c2B#3 = doplasma::c2B#7 doplasma::c2B#5 
Alias doplasma::scrn#11 = doplasma::scrn#9 doplasma::scrn#8 
Alias doplasma::jj#3 = doplasma::jj#7 
Alias doplasma::scrn#6 = doplasma::scrn#7 
Alias doplasma::j#3 = doplasma::j#4 
Alias doplasma::jj#4 = doplasma::jj#6 doplasma::jj#5 
Alias doplasma::scrn#3 = doplasma::scrn#5 doplasma::scrn#4 
Alias makechar::c#3 = makechar::c#4 
Alias rand_state#14 = rand_state#32 rand_state#20 rand_state#5 
Alias makechar::c#5 = makechar::c#9 makechar::c#7 
Alias makechar::i#3 = makechar::i#6 
Alias rand_state#25 = rand_state#29 rand_state#28 
Alias makechar::s#5 = makechar::s#7 
Alias rand_state#19 = rand_state#26 rand_state#33 
Alias makechar::s#2 = makechar::s#3 makechar::s#4 makechar::s#9 makechar::s#8 
Alias makechar::ii#3 = makechar::ii#7 makechar::ii#6 makechar::ii#5 
Alias makechar::b#3 = makechar::b#8 makechar::b#5 makechar::b#6 makechar::b#4 
Alias makechar::c#11 = makechar::c#13 makechar::c#8 makechar::c#12 makechar::c#6 
Alias makechar::i#10 = makechar::i#5 makechar::i#9 makechar::i#4 makechar::i#8 
Alias rand::return#2 = rand::return#4 
Alias rand_state#13 = rand_state#4 rand_state#34 
Alias main::count#0 = main::count#6 main::count#4 
Alias Ticks#19 = Ticks#21 Ticks#23 
Alias print_char_cursor#43 = print_char_cursor#45 print_char_cursor#47 
Alias print_line_cursor#25 = print_line_cursor#27 print_line_cursor#29 
Alias rand_state#15 = rand_state#6 rand_state#35 
Alias main::tmp#1 = main::$2 
Alias main::count#2 = main::count#7 main::count#5 main::count#3 
Alias main::v#2 = main::v#6 main::v#3 main::v#5 main::v#4 
Alias main::block#2 = main::block#6 main::block#3 main::block#5 main::block#4 
Alias Ticks#15 = Ticks#24 Ticks#18 Ticks#22 Ticks#20 
Alias print_char_cursor#39 = print_char_cursor#48 print_char_cursor#42 print_char_cursor#46 print_char_cursor#44 
Alias print_line_cursor#20 = print_line_cursor#30 print_line_cursor#23 print_line_cursor#28 print_line_cursor#26 
Alias rand_state#16 = rand_state#38 rand_state#31 rand_state#37 rand_state#36 rand_state#27 rand_state#22 rand_state#7 
Alias Ticks#10 = Ticks#3 Ticks#11 Ticks#4 
Alias print_char_cursor#13 = print_char_cursor#31 print_char_cursor#32 print_char_cursor#14 
Alias print_line_cursor#14 = print_line_cursor#4 print_line_cursor#15 print_line_cursor#5 
Alias main::return#0 = main::return#3 main::return#1 
Alias print_screen#0 = print_line_cursor#6 print_char_cursor#15 print_char_cursor#40 print_line_cursor#21 print_screen#4 print_screen#3 print_screen#2 print_screen#1 
Alias rand_state#23 = rand_state#8 
Alias Ticks#16 = Ticks#5 
Alias rand_state#10 = rand_state#9 rand_state#17 rand_state#18 
Alias Ticks#12 = Ticks#6 Ticks#13 Ticks#7 
Alias print_char_cursor#16 = print_char_cursor#33 print_char_cursor#34 print_char_cursor#17 
Alias print_line_cursor#16 = print_line_cursor#7 print_line_cursor#17 print_line_cursor#8 
Successful SSA optimization Pass2AliasElimination
Alias makechar::ii#3 = makechar::ii#4 
Alias makechar::c#10 = makechar::c#11 
Alias makechar::i#10 = makechar::i#7 
Alias rand_state#13 = rand_state#30 
Alias makechar::s#2 = makechar::s#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) rand_state#11 (word) rand_state#19
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#19
Identical Phi Values (byte*) print_char_cursor#35 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_char_cursor#35
Identical Phi Values (word) print_uint::w#1 (word) print_uint::w#0
Identical Phi Values (byte*) print_char_cursor#36 (byte*) print_char_cursor#38
Identical Phi Values (byte*) print_char_cursor#2 (byte*) print_char_cursor#24
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_char_cursor#24
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#27
Identical Phi Values (byte*) print_char_cursor#24 (byte*) print_char_cursor#27
Identical Phi Values (byte*) print_char_cursor#38 (byte*) print_char_cursor#39
Identical Phi Values (byte*) print_line_cursor#19 (byte*) print_line_cursor#20
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#21
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#11 (byte*) print_line_cursor#0
Identical Phi Values (byte) doplasma::c1A#2 (byte) doplasma::c1a#1
Identical Phi Values (byte) doplasma::c1B#2 (byte) doplasma::c1b#1
Identical Phi Values (byte) doplasma::c2A#2 (byte) doplasma::c2A#0
Identical Phi Values (byte) doplasma::c2B#2 (byte) doplasma::c2B#0
Identical Phi Values (byte*) doplasma::scrn#10 (byte*) doplasma::scrn#13
Identical Phi Values (byte) doplasma::c2A#3 (byte) doplasma::c2A#2
Identical Phi Values (byte) doplasma::c2B#3 (byte) doplasma::c2B#2
Identical Phi Values (byte*) doplasma::scrn#11 (byte*) doplasma::scrn#10
Identical Phi Values (byte) doplasma::jj#4 (byte) doplasma::jj#3
Identical Phi Values (byte*) doplasma::scrn#3 (byte*) doplasma::scrn#6
Identical Phi Values (word) rand_state#24 (word) rand_state#21
Identical Phi Values (word) makechar::c#10 (word) makechar::c#5
Identical Phi Values (byte) makechar::i#10 (byte) makechar::i#3
Identical Phi Values (byte) makechar::s#2 (byte) makechar::s#5
Identical Phi Values (word) rand_state#13 (word) rand_state#12
Identical Phi Values (word) rand_state#21 (word) rand_state#23
Identical Phi Values (word) Ticks#19 (word) Ticks#16
Identical Phi Values (byte*) print_char_cursor#43 (byte*) print_screen#0
Identical Phi Values (byte*) print_line_cursor#25 (byte*) print_screen#0
Identical Phi Values (word) rand_state#15 (word) rand_state#14
Identical Phi Values (byte) main::v#2 (byte) main::v#1
Identical Phi Values (byte) main::block#2 (byte) main::block#1
Identical Phi Values (word) Ticks#15 (word) Ticks#19
Identical Phi Values (byte*) print_char_cursor#39 (byte*) print_char_cursor#43
Identical Phi Values (byte*) print_line_cursor#20 (byte*) print_line_cursor#25
Identical Phi Values (word) rand_state#16 (word) rand_state#15
Identical Phi Values (word) Ticks#10 (word) Ticks#1
Identical Phi Values (byte*) print_char_cursor#13 (byte*) print_char_cursor#11
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_line_cursor#12
Identical Phi Values (word) rand_state#10 (word) rand_state#16
Identical Phi Values (word) Ticks#12 (word) Ticks#10
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#14
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (word) makechar::c#5 (word) makechar::c#3
Identical Phi Values (byte) makechar::s#5 (byte) makechar::s#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) print_ln::$1 [13] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#27) goto print_ln::@1
Simple Condition (bool~) doplasma::$0 [66] if((byte) doplasma::ii#3<(byte) $19) goto doplasma::@2
Simple Condition (bool~) doplasma::$2 [77] if((byte) doplasma::i#3<(byte) $28) goto doplasma::@5
Simple Condition (bool~) doplasma::$4 [88] if((byte) doplasma::jj#3<(byte) $19) goto doplasma::@8
Simple Condition (bool~) doplasma::$5 [92] if((byte) doplasma::j#3<(byte) $28) goto doplasma::@10
Simple Condition (bool~) makechar::$0 [108] if((word) makechar::c#3<(word) $100) goto makechar::@2
Simple Condition (bool~) makechar::$1 [114] if((byte) makechar::i#3<(byte) 8) goto makechar::@4
Simple Condition (bool~) makechar::$2 [120] if((byte) makechar::ii#3<(byte) 8) goto makechar::@7
Simple Condition (bool~) makechar::$6 [127] if((byte~) makechar::$4<=(byte) makechar::s#1) goto makechar::@9
Simple Condition (bool~) main::$6 [151] if((byte) 0!=(word) main::count#2) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) doplasma::c1a#0 = 0
Constant (const byte) doplasma::c1b#0 = 0
Constant (const byte) doplasma::c2a#0 = 0
Constant (const byte) doplasma::c2b#0 = 0
Constant (const byte) doplasma::c1a#1 = 0
Constant (const byte) doplasma::c1b#1 = 0
Constant (const byte) doplasma::c2A#0 = 0
Constant (const byte) doplasma::c2B#0 = 0
Constant (const byte) doplasma::i#0 = 0
Constant (const byte) doplasma::ii#0 = 0
Constant (const byte) doplasma::j#0 = 0
Constant (const byte) doplasma::jj#0 = 0
Constant (const byte) doplasma::ii#1 = 0
Constant (const byte) doplasma::i#1 = 0
Constant (const byte) doplasma::jj#1 = 0
Constant (const byte) doplasma::j#1 = 0
Constant (const byte) makechar::i#0 = 0
Constant (const byte) makechar::ii#0 = 0
Constant (const byte) makechar::b#0 = 0
Constant (const byte) makechar::s#0 = 0
Constant (const word) makechar::c#0 = 0
Constant (const word) makechar::c#1 = 0
Constant (const byte) makechar::i#1 = 0
Constant (const byte) makechar::b#1 = 0
Constant (const byte) makechar::ii#1 = 0
Constant (const byte) main::v#0 = 0
Constant (const byte) main::block#0 = 0
Constant (const word) main::count#0 = $1f4
Constant (const byte) main::tmp#0 = 0
Constant (const byte*) doplasma::scrn#1 = SCREEN1
Constant (const byte*) doplasma::scrn#2 = SCREEN2
Constant (const signed word) main::return#0 = 0
Constant (const word) rand_state#23 = 1
Constant (const byte*) print_screen#0 = (byte*) 1024
Constant (const word) Ticks#16 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const signed word) main::return#2 = main::return#0
Successful SSA optimization Pass2ConstantIdentification
De-inlining pointer[w] to *(pointer+w)   [130] *((const nomodify byte*) CHARSET + (word~) makechar::$8) ← (byte) makechar::b#3
Successful SSA optimization Pass2DeInlineWordDerefIdx
Simplifying constant evaluating to zero (byte)(word)(const nomodify byte*) SCREEN1>>(byte) $e^(byte) 3 in [146] (byte) main::tmp#2 ← (byte) main::tmp#1 | (byte)(word)(const nomodify byte*) SCREEN1>>(byte) $e^(byte) 3
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero 3 in [72] (byte) doplasma::c1A#1 ← (const byte) doplasma::c1a#1 + (byte) 3
Simplifying expression containing zero 5 in [73] (byte) doplasma::c1B#1 ← (const byte) doplasma::c1b#1 - (byte) 5
Simplifying expression containing zero 2 in [83] (byte) doplasma::c2A#1 ← (const byte) doplasma::c2A#0 + (byte) 2
Simplifying expression containing zero 3 in [84] (byte) doplasma::c2B#1 ← (const byte) doplasma::c2B#0 - (byte) 3
Simplifying expression containing zero (byte*)CIA2 in [143] (byte) main::block#1 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A)
Simplifying expression containing zero main::tmp#1 in [146] (byte) main::tmp#2 ← (byte) main::tmp#1 | (byte) 0
Simplifying expression containing zero (byte*)CIA2 in [147] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (byte) main::tmp#2
Simplifying expression containing zero (byte*)CIA2 in [160] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (byte) main::block#1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte) doplasma::c1A#1 and assignment [47] (byte) doplasma::c1A#1 ← (byte) 3
Eliminating unused variable (byte) doplasma::c1B#1 and assignment [48] (byte) doplasma::c1B#1 ← (byte) 5
Eliminating unused variable (byte) doplasma::c2A#1 and assignment [56] (byte) doplasma::c2A#1 ← (byte) 2
Eliminating unused variable (byte) doplasma::c2B#1 and assignment [57] (byte) doplasma::c2B#1 ← (byte) 3
Eliminating unused constant (const byte) doplasma::c1a#0
Eliminating unused constant (const byte) doplasma::c1b#0
Eliminating unused constant (const byte) doplasma::c2a#0
Eliminating unused constant (const byte) doplasma::c2b#0
Eliminating unused constant (const byte) doplasma::i#0
Eliminating unused constant (const byte) doplasma::ii#0
Eliminating unused constant (const byte) doplasma::j#0
Eliminating unused constant (const byte) doplasma::jj#0
Eliminating unused constant (const byte) makechar::i#0
Eliminating unused constant (const byte) makechar::ii#0
Eliminating unused constant (const byte) makechar::b#0
Eliminating unused constant (const byte) makechar::s#0
Eliminating unused constant (const word) makechar::c#0
Eliminating unused constant (const byte) main::v#0
Eliminating unused constant (const byte) main::block#0
Eliminating unused constant (const byte) main::tmp#0
Eliminating unused constant (const signed word) main::return#2
Eliminating unused constant (const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A
Eliminating unused constant (const word) Ticks#16
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const signed word) main::return#0
Successful SSA optimization PassNEliminateUnusedVars
Simplifying constant integer cast (word)(const nomodify byte*) SCREEN1>>(byte) 6&(byte) $f0|(word)(const nomodify byte*) CHARSET>>(byte) $a&(byte) $e
Simplifying constant integer cast (word)(const nomodify byte*) SCREEN2>>(byte) 6&(byte) $f0|(word)(const nomodify byte*) CHARSET>>(byte) $a&(byte) $e
Successful SSA optimization PassNCastSimplification
Alias main::tmp#1 = main::tmp#2 
Successful SSA optimization Pass2AliasElimination
Inlining constant with var siblings (const byte) doplasma::c1a#1
Inlining constant with var siblings (const byte) doplasma::c1b#1
Inlining constant with var siblings (const byte) doplasma::ii#1
Inlining constant with var siblings (const byte) doplasma::i#1
Inlining constant with var siblings (const byte) doplasma::jj#1
Inlining constant with var siblings (const byte) doplasma::j#1
Inlining constant with var siblings (const byte*) doplasma::scrn#1
Inlining constant with var siblings (const byte*) doplasma::scrn#2
Inlining constant with var siblings (const word) makechar::c#1
Inlining constant with var siblings (const byte) makechar::i#1
Inlining constant with var siblings (const byte) makechar::b#1
Inlining constant with var siblings (const byte) makechar::ii#1
Inlining constant with var siblings (const word) main::count#0
Inlining constant with var siblings (const word) rand_state#23
Constant inlined makechar::c#1 = (byte) 0
Constant inlined makechar::b#1 = (byte) 0
Constant inlined doplasma::i#1 = (byte) 0
Constant inlined makechar::ii#1 = (byte) 0
Constant inlined doplasma::j#1 = (byte) 0
Constant inlined doplasma::ii#1 = (byte) 0
Constant inlined doplasma::jj#1 = (byte) 0
Constant inlined main::count#0 = (word) $1f4
Constant inlined doplasma::scrn#2 = (const nomodify byte*) SCREEN2
Constant inlined doplasma::scrn#1 = (const nomodify byte*) SCREEN1
Constant inlined doplasma::c1a#1 = (byte) 0
Constant inlined doplasma::c1b#1 = (byte) 0
Constant inlined makechar::i#1 = (byte) 0
Constant inlined rand_state#23 = (word) 1
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting makechar::@12(between makechar::@11 and makechar::@9)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of doplasma::@3
Adding NOP phi() at start of doplasma::@8
Adding NOP phi() at start of end::@2
Adding NOP phi() at start of end::@3
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_uint::@2
Adding NOP phi() at start of print_uchar::@2
Adding NOP phi() at start of makechar
Adding NOP phi() at start of makechar::@7
CALL GRAPH
Calls in [__start] to main:3 
Calls in [main] to makechar:7 start:9 end:18 doplasma:22 doplasma:24 
Calls in [end] to start:66 print_uint:70 print_ln:72 
Calls in [print_uint] to print_uchar:84 print_uchar:88 
Calls in [print_uchar] to print_char:96 print_char:101 
Calls in [makechar] to rand:133 

Created 24 initial phi equivalence classes
Coalesced [27] main::count#8 ← main::count#1
Coalesced [34] doplasma::scrn#16 ← doplasma::scrn#13
Coalesced [43] doplasma::jj#8 ← doplasma::jj#2
Coalesced [44] doplasma::scrn#15 ← doplasma::scrn#0
Coalesced [48] doplasma::j#5 ← doplasma::j#2
Coalesced [54] doplasma::i#5 ← doplasma::i#2
Coalesced [55] doplasma::c2a#5 ← doplasma::c2a#2
Coalesced [56] doplasma::c2b#5 ← doplasma::c2b#2
Coalesced [62] doplasma::ii#5 ← doplasma::ii#2
Coalesced [63] doplasma::c1a#5 ← doplasma::c1a#2
Coalesced [64] doplasma::c1b#5 ← doplasma::c1b#2
Coalesced [81] print_line_cursor#31 ← print_line_cursor#0
Coalesced [83] print_uchar::b#4 ← print_uchar::b#0
Coalesced [86] print_uchar::b#5 ← print_uchar::b#1
Coalesced [87] print_char_cursor#49 ← print_char_cursor#27
Coalesced [94] print_char::ch#3 ← print_char::ch#0
Coalesced [95] print_char_cursor#50 ← print_char_cursor#37
Coalesced [99] print_char::ch#4 ← print_char::ch#1
Coalesced (already) [100] print_char_cursor#51 ← print_char_cursor#27
Coalesced [116] rand_state#40 ← rand_state#14
Coalesced [120] makechar::c#14 ← makechar::c#2
Coalesced (already) [121] rand_state#39 ← rand_state#25
Coalesced [122] rand_state#42 ← rand_state#25
Coalesced [130] makechar::i#11 ← makechar::i#2
Coalesced (already) [131] rand_state#41 ← rand_state#19
Coalesced [139] makechar::b#10 ← makechar::b#2
Coalesced [142] makechar::ii#8 ← makechar::ii#2
Coalesced [143] makechar::b#9 ← makechar::b#7
Coalesced [144] rand_state#43 ← rand_state#12
Coalesced (already) [145] makechar::b#11 ← makechar::b#3
Coalesced down to 19 phi equivalence classes
Culled Empty Block (label) __start::@2
Culled Empty Block (label) main::@8
Culled Empty Block (label) doplasma::@3
Culled Empty Block (label) doplasma::@6
Culled Empty Block (label) doplasma::@8
Culled Empty Block (label) end::@3
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_uint::@2
Culled Empty Block (label) print_uchar::@2
Culled Empty Block (label) makechar::@4
Culled Empty Block (label) makechar::@12
Renumbering block doplasma::@4 to doplasma::@3
Renumbering block doplasma::@5 to doplasma::@4
Renumbering block doplasma::@7 to doplasma::@5
Renumbering block doplasma::@9 to doplasma::@6
Renumbering block doplasma::@10 to doplasma::@7
Renumbering block doplasma::@11 to doplasma::@8
Renumbering block makechar::@5 to makechar::@4
Renumbering block makechar::@6 to makechar::@5
Renumbering block makechar::@7 to makechar::@6
Renumbering block makechar::@8 to makechar::@7
Renumbering block makechar::@9 to makechar::@8
Renumbering block makechar::@10 to makechar::@9
Renumbering block makechar::@11 to makechar::@10
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of end::@2
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of makechar
Adding NOP phi() at start of makechar::@6

FINAL CONTROL FLOW GRAPH

(void()) __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] (volatile word) last_time ← (word) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

(signed word()) main()
main: scope:[main]  from __start::@1
  [5] phi()
  [6] call makechar 
  to:main::@4
main::@4: scope:[main]  from main
  [7] phi()
  [8] call start 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [9] (byte) main::block#1 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA2)
  [10] (byte) main::tmp#1 ← (byte) main::block#1 & (byte) $fc
  [11] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) main::tmp#1
  [12] (byte) main::v#1 ← *((const nomodify byte*) VIC_MEMORY)
  to:main::@1
main::@1: scope:[main]  from main::@5 main::@7
  [13] (word) main::count#2 ← phi( main::@5/(word) $1f4 main::@7/(word) main::count#1 )
  [14] if((byte) 0!=(word) main::count#2) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [15] *((const nomodify byte*) VIC_MEMORY) ← (byte) main::v#1
  [16] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) main::block#1
  [17] call end 
  to:main::@return
main::@return: scope:[main]  from main::@3
  [18] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [19] phi()
  [20] call doplasma 
  to:main::@6
main::@6: scope:[main]  from main::@2
  [21] *((const nomodify byte*) VIC_MEMORY) ← (const nomodify byte) PAGE1
  [22] call doplasma 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [23] *((const nomodify byte*) VIC_MEMORY) ← (const nomodify byte) PAGE2
  [24] (word) main::count#1 ← -- (word) main::count#2
  to:main::@1

(void()) doplasma((byte*) doplasma::scrn)
doplasma: scope:[doplasma]  from main::@2 main::@6
  [25] (byte*) doplasma::scrn#13 ← phi( main::@2/(const nomodify byte*) SCREEN1 main::@6/(const nomodify byte*) SCREEN2 )
  to:doplasma::@1
doplasma::@1: scope:[doplasma]  from doplasma doplasma::@2
  [26] (byte) doplasma::c1b#3 ← phi( doplasma/(byte) 0 doplasma::@2/(byte) doplasma::c1b#2 )
  [26] (byte) doplasma::c1a#3 ← phi( doplasma/(byte) 0 doplasma::@2/(byte) doplasma::c1a#2 )
  [26] (byte) doplasma::ii#3 ← phi( doplasma/(byte) 0 doplasma::@2/(byte) doplasma::ii#2 )
  [27] if((byte) doplasma::ii#3<(byte) $19) goto doplasma::@2
  to:doplasma::@3
doplasma::@3: scope:[doplasma]  from doplasma::@1 doplasma::@4
  [28] (byte) doplasma::c2b#3 ← phi( doplasma::@1/(const byte) doplasma::c2B#0 doplasma::@4/(byte) doplasma::c2b#2 )
  [28] (byte) doplasma::c2a#3 ← phi( doplasma::@1/(const byte) doplasma::c2A#0 doplasma::@4/(byte) doplasma::c2a#2 )
  [28] (byte) doplasma::i#3 ← phi( doplasma::@1/(byte) 0 doplasma::@4/(byte) doplasma::i#2 )
  [29] if((byte) doplasma::i#3<(byte) $28) goto doplasma::@4
  to:doplasma::@5
doplasma::@5: scope:[doplasma]  from doplasma::@3 doplasma::@8
  [30] (byte*) doplasma::scrn#6 ← phi( doplasma::@8/(byte*) doplasma::scrn#0 doplasma::@3/(byte*) doplasma::scrn#13 )
  [30] (byte) doplasma::jj#3 ← phi( doplasma::@8/(byte) doplasma::jj#2 doplasma::@3/(byte) 0 )
  [31] if((byte) doplasma::jj#3<(byte) $19) goto doplasma::@6
  to:doplasma::@return
doplasma::@return: scope:[doplasma]  from doplasma::@5
  [32] return 
  to:@return
doplasma::@6: scope:[doplasma]  from doplasma::@5 doplasma::@7
  [33] (byte) doplasma::j#3 ← phi( doplasma::@7/(byte) doplasma::j#2 doplasma::@5/(byte) 0 )
  [34] if((byte) doplasma::j#3<(byte) $28) goto doplasma::@7
  to:doplasma::@8
doplasma::@8: scope:[doplasma]  from doplasma::@6
  [35] (byte*) doplasma::scrn#0 ← (byte*) doplasma::scrn#6 + (byte) $28
  [36] (byte) doplasma::jj#2 ← ++ (byte) doplasma::jj#3
  to:doplasma::@5
doplasma::@7: scope:[doplasma]  from doplasma::@6
  [37] (byte~) doplasma::$6 ← *((const byte*) xbuf + (byte) doplasma::j#3) + *((const byte*) ybuf + (byte) doplasma::jj#3)
  [38] *((byte*) doplasma::scrn#6 + (byte) doplasma::j#3) ← (byte~) doplasma::$6
  [39] (byte) doplasma::j#2 ← ++ (byte) doplasma::j#3
  to:doplasma::@6
doplasma::@4: scope:[doplasma]  from doplasma::@3
  [40] (byte~) doplasma::$3 ← *((const to_nomodify byte*) sinustable + (byte) doplasma::c2a#3) + *((const to_nomodify byte*) sinustable + (byte) doplasma::c2b#3)
  [41] *((const byte*) xbuf + (byte) doplasma::i#3) ← (byte~) doplasma::$3
  [42] (byte) doplasma::c2a#2 ← (byte) doplasma::c2a#3 + (byte) 3
  [43] (byte) doplasma::c2b#2 ← (byte) doplasma::c2b#3 + (byte) 7
  [44] (byte) doplasma::i#2 ← ++ (byte) doplasma::i#3
  to:doplasma::@3
doplasma::@2: scope:[doplasma]  from doplasma::@1
  [45] (byte~) doplasma::$1 ← *((const to_nomodify byte*) sinustable + (byte) doplasma::c1a#3) + *((const to_nomodify byte*) sinustable + (byte) doplasma::c1b#3)
  [46] *((const byte*) ybuf + (byte) doplasma::ii#3) ← (byte~) doplasma::$1
  [47] (byte) doplasma::c1a#2 ← (byte) doplasma::c1a#3 + (byte) 4
  [48] (byte) doplasma::c1b#2 ← (byte) doplasma::c1b#3 + (byte) 9
  [49] (byte) doplasma::ii#2 ← ++ (byte) doplasma::ii#3
  to:doplasma::@1

(void()) end()
end: scope:[end]  from main::@3
  [50] (word) Ticks#0 ← (volatile word) last_time
  [51] call start 
  to:end::@1
end::@1: scope:[end]  from end
  [52] (volatile word) last_time ← (volatile word) last_time - (word) Ticks#0
  [53] (word) Ticks#1 ← (volatile word) last_time
  [54] (word) print_uint::w#0 ← (word) Ticks#1
  [55] call print_uint 
  to:end::@2
end::@2: scope:[end]  from end::@1
  [56] phi()
  [57] call print_ln 
  to:end::@return
end::@return: scope:[end]  from end::@2
  [58] return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from end::@2
  [59] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [60] (byte*) print_line_cursor#9 ← phi( print_ln/(const byte*) print_screen#0 print_ln::@1/(byte*) print_line_cursor#0 )
  [61] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#9 + (byte) $28
  [62] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#27) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [63] return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from end::@1
  [64] (byte) print_uchar::b#0 ← > (word) print_uint::w#0
  [65] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [66] (byte) print_uchar::b#1 ← < (word) print_uint::w#0
  [67] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [68] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  [69] (byte*) print_char_cursor#37 ← phi( print_uint/(const byte*) print_screen#0 print_uint::@1/(byte*) print_char_cursor#27 )
  [69] (byte) print_uchar::b#2 ← phi( print_uint/(byte) print_uchar::b#0 print_uint::@1/(byte) print_uchar::b#1 )
  [70] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4
  [71] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [72] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [73] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f
  [74] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [75] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [76] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_uchar print_uchar::@1
  [77] (byte*) print_char_cursor#26 ← phi( print_uchar/(byte*) print_char_cursor#37 print_uchar::@1/(byte*) print_char_cursor#27 )
  [77] (byte) print_char::ch#2 ← phi( print_uchar/(byte) print_char::ch#0 print_uchar::@1/(byte) print_char::ch#1 )
  [78] *((byte*) print_char_cursor#26) ← (byte) print_char::ch#2
  [79] (byte*) print_char_cursor#27 ← ++ (byte*) print_char_cursor#26
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [80] return 
  to:@return

(void()) start()
start: scope:[start]  from end main::@4
  asm { jsr$FFDE staLAST_TIME stxLAST_TIME+1  }
  to:start::@return
start::@return: scope:[start]  from start
  [82] return 
  to:@return

(void()) makechar()
makechar: scope:[makechar]  from main
  [83] phi()
  to:makechar::@1
makechar::@1: scope:[makechar]  from makechar makechar::@4
  [84] (word) rand_state#14 ← phi( makechar/(word) 1 makechar::@4/(word) rand_state#25 )
  [84] (word) makechar::c#3 ← phi( makechar/(byte) 0 makechar::@4/(word) makechar::c#2 )
  [85] if((word) makechar::c#3<(word) $100) goto makechar::@2
  to:makechar::@return
makechar::@return: scope:[makechar]  from makechar::@1
  [86] return 
  to:@return
makechar::@2: scope:[makechar]  from makechar::@1
  [87] (byte~) makechar::$9 ← (byte)(word) makechar::c#3
  [88] (byte) makechar::s#1 ← *((const to_nomodify byte*) sinustable + (byte~) makechar::$9)
  to:makechar::@3
makechar::@3: scope:[makechar]  from makechar::@2 makechar::@7
  [89] (word) rand_state#25 ← phi( makechar::@2/(word) rand_state#14 makechar::@7/(word) rand_state#19 )
  [89] (byte) makechar::i#3 ← phi( makechar::@2/(byte) 0 makechar::@7/(byte) makechar::i#2 )
  [90] if((byte) makechar::i#3<(byte) 8) goto makechar::@5
  to:makechar::@4
makechar::@4: scope:[makechar]  from makechar::@3
  [91] (word) makechar::c#2 ← ++ (word) makechar::c#3
  to:makechar::@1
makechar::@5: scope:[makechar]  from makechar::@3 makechar::@8
  [92] (word) rand_state#19 ← phi( makechar::@3/(word) rand_state#25 makechar::@8/(word) rand_state#12 )
  [92] (byte) makechar::b#3 ← phi( makechar::@3/(byte) 0 makechar::@8/(byte) makechar::b#7 )
  [92] (byte) makechar::ii#3 ← phi( makechar::@3/(byte) 0 makechar::@8/(byte) makechar::ii#2 )
  [93] if((byte) makechar::ii#3<(byte) 8) goto makechar::@6
  to:makechar::@7
makechar::@7: scope:[makechar]  from makechar::@5
  [94] (word~) makechar::$7 ← (word) makechar::c#3 << (byte) 3
  [95] (word~) makechar::$8 ← (word~) makechar::$7 + (byte) makechar::i#3
  [96] (byte*~) makechar::$10 ← (const nomodify byte*) CHARSET + (word~) makechar::$8
  [97] *((byte*~) makechar::$10) ← (byte) makechar::b#3
  [98] (byte) makechar::i#2 ← ++ (byte) makechar::i#3
  to:makechar::@3
makechar::@6: scope:[makechar]  from makechar::@5
  [99] phi()
  [100] call rand 
  [101] (word) rand::return#2 ← (word) rand::return#0
  to:makechar::@10
makechar::@10: scope:[makechar]  from makechar::@6
  [102] (word~) makechar::$3 ← (word) rand::return#2
  [103] (byte~) makechar::$4 ← (word~) makechar::$3 & (byte) $ff
  [104] if((byte~) makechar::$4<=(byte) makechar::s#1) goto makechar::@8
  to:makechar::@9
makechar::@9: scope:[makechar]  from makechar::@10
  [105] (byte) makechar::b#2 ← (byte) makechar::b#3 | *((const to_nomodify byte*) bittab + (byte) makechar::ii#3)
  to:makechar::@8
makechar::@8: scope:[makechar]  from makechar::@10 makechar::@9
  [106] (byte) makechar::b#7 ← phi( makechar::@9/(byte) makechar::b#2 makechar::@10/(byte) makechar::b#3 )
  [107] (byte) makechar::ii#2 ← ++ (byte) makechar::ii#3
  to:makechar::@5

(word()) rand()
rand: scope:[rand]  from makechar::@6
  [108] (word~) rand::$0 ← (word) rand_state#19 << (byte) 7
  [109] (word) rand_state#0 ← (word) rand_state#19 ^ (word~) rand::$0
  [110] (word~) rand::$1 ← (word) rand_state#0 >> (byte) 9
  [111] (word) rand_state#1 ← (word) rand_state#0 ^ (word~) rand::$1
  [112] (word~) rand::$2 ← (word) rand_state#1 << (byte) 8
  [113] (word) rand_state#12 ← (word) rand_state#1 ^ (word~) rand::$2
  [114] (word) rand::return#0 ← (word) rand_state#12
  to:rand::@return
rand::@return: scope:[rand]  from rand
  [115] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(word) Ticks
(word) Ticks#0 101.0
(word) Ticks#1 202.0
(void()) __start()
(void()) doplasma((byte*) doplasma::scrn)
(byte~) doplasma::$1 200002.0
(byte~) doplasma::$3 200002.0
(byte~) doplasma::$6 2000002.0
(byte) doplasma::c1A
(byte) doplasma::c1B
(byte) doplasma::c1a
(byte) doplasma::c1a#2 66667.33333333333
(byte) doplasma::c1a#3 75000.75
(byte) doplasma::c1b
(byte) doplasma::c1b#2 100001.0
(byte) doplasma::c1b#3 60000.600000000006
(byte) doplasma::c2A
(byte) doplasma::c2B
(byte) doplasma::c2a
(byte) doplasma::c2a#2 66667.33333333333
(byte) doplasma::c2a#3 75000.75
(byte) doplasma::c2b
(byte) doplasma::c2b#2 100001.0
(byte) doplasma::c2b#3 60000.600000000006
(byte) doplasma::i
(byte) doplasma::i#2 200002.0
(byte) doplasma::i#3 66667.33333333333
(byte) doplasma::ii
(byte) doplasma::ii#2 200002.0
(byte) doplasma::ii#3 66667.33333333333
(byte) doplasma::j
(byte) doplasma::j#2 2000002.0
(byte) doplasma::j#3 1250001.25
(byte) doplasma::jj
(byte) doplasma::jj#2 200002.0
(byte) doplasma::jj#3 162500.5
(byte*) doplasma::scrn
(byte*) doplasma::scrn#0 100001.0
(byte*) doplasma::scrn#13 6666.733333333334
(byte*) doplasma::scrn#6 185714.85714285713
(void()) end()
(volatile word) last_time loadstore 17.652173913043477
(signed word()) main()
(byte) main::block
(byte) main::block#1 2.5384615384615383
(word) main::count
(word) main::count#1 202.0
(word) main::count#2 43.285714285714285
(signed word) main::return
(byte) main::tmp
(byte) main::tmp#1 22.0
(byte) main::v
(byte) main::v#1 2.4444444444444446
(void()) makechar()
(byte*~) makechar::$10 20002.0
(word~) makechar::$3 200002.0
(byte~) makechar::$4 200002.0
(word~) makechar::$7 20002.0
(word~) makechar::$8 20002.0
(byte~) makechar::$9 2002.0
(byte) makechar::b
(byte) makechar::b#2 200002.0
(byte) makechar::b#3 28182.181818181816
(byte) makechar::b#7 150001.5
(word) makechar::c
(word) makechar::c#2 2002.0
(word) makechar::c#3 591.090909090909
(byte) makechar::i
(byte) makechar::i#2 20002.0
(byte) makechar::i#3 2353.176470588235
(byte) makechar::ii
(byte) makechar::ii#2 200002.0
(byte) makechar::ii#3 40000.4
(byte) makechar::s
(byte) makechar::s#1 5315.894736842105
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 20002.0
(byte) print_char::ch#1 20002.0
(byte) print_char::ch#2 120003.0
(byte*) print_char_cursor
(byte*) print_char_cursor#26 110002.0
(byte*) print_char_cursor#27 7117.882352941177
(byte*) print_char_cursor#37 3667.333333333333
(byte*) print_line_cursor
(byte*) print_line_cursor#0 15001.5
(byte*) print_line_cursor#9 20002.0
(void()) print_ln()
(byte*) print_screen
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 20002.0
(byte~) print_uchar::$2 20002.0
(byte) print_uchar::b
(byte) print_uchar::b#0 2002.0
(byte) print_uchar::b#1 2002.0
(byte) print_uchar::b#2 5501.0
(void()) print_uint((word) print_uint::w)
(word) print_uint::w
(word) print_uint::w#0 701.0
(word()) rand()
(word~) rand::$0 2000002.0
(word~) rand::$1 2000002.0
(word~) rand::$2 2000002.0
(word) rand::return
(word) rand::return#0 366667.3333333334
(word) rand::return#2 200002.0
(word) rand_state
(word) rand_state#0 1500001.5
(word) rand_state#1 1500001.5
(word) rand_state#12 190909.36363636365
(word) rand_state#14 500.5
(word) rand_state#19 235556.11111111112
(word) rand_state#25 7334.666666666666
(void()) start()

Initial phi equivalence classes
[ main::count#2 main::count#1 ]
[ doplasma::ii#3 doplasma::ii#2 ]
[ doplasma::c1a#3 doplasma::c1a#2 ]
[ doplasma::c1b#3 doplasma::c1b#2 ]
[ doplasma::i#3 doplasma::i#2 ]
[ doplasma::c2a#3 doplasma::c2a#2 ]
[ doplasma::c2b#3 doplasma::c2b#2 ]
[ doplasma::jj#3 doplasma::jj#2 ]
[ doplasma::scrn#6 doplasma::scrn#0 doplasma::scrn#13 ]
[ doplasma::j#3 doplasma::j#2 ]
[ print_line_cursor#9 print_line_cursor#0 ]
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#26 print_char_cursor#37 print_char_cursor#27 ]
[ makechar::c#3 makechar::c#2 ]
[ rand_state#14 rand_state#25 rand_state#19 rand_state#12 ]
[ makechar::i#3 makechar::i#2 ]
[ makechar::ii#3 makechar::ii#2 ]
[ makechar::b#3 makechar::b#7 makechar::b#2 ]
Added variable last_time to live range equivalence class [ last_time ]
Added variable main::block#1 to live range equivalence class [ main::block#1 ]
Added variable main::tmp#1 to live range equivalence class [ main::tmp#1 ]
Added variable main::v#1 to live range equivalence class [ main::v#1 ]
Added variable doplasma::$6 to live range equivalence class [ doplasma::$6 ]
Added variable doplasma::$3 to live range equivalence class [ doplasma::$3 ]
Added variable doplasma::$1 to live range equivalence class [ doplasma::$1 ]
Added variable Ticks#0 to live range equivalence class [ Ticks#0 ]
Added variable Ticks#1 to live range equivalence class [ Ticks#1 ]
Added variable print_uint::w#0 to live range equivalence class [ print_uint::w#0 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Added variable makechar::$9 to live range equivalence class [ makechar::$9 ]
Added variable makechar::s#1 to live range equivalence class [ makechar::s#1 ]
Added variable makechar::$7 to live range equivalence class [ makechar::$7 ]
Added variable makechar::$8 to live range equivalence class [ makechar::$8 ]
Added variable makechar::$10 to live range equivalence class [ makechar::$10 ]
Added variable rand::return#2 to live range equivalence class [ rand::return#2 ]
Added variable makechar::$3 to live range equivalence class [ makechar::$3 ]
Added variable makechar::$4 to live range equivalence class [ makechar::$4 ]
Added variable rand::$0 to live range equivalence class [ rand::$0 ]
Added variable rand_state#0 to live range equivalence class [ rand_state#0 ]
Added variable rand::$1 to live range equivalence class [ rand::$1 ]
Added variable rand_state#1 to live range equivalence class [ rand_state#1 ]
Added variable rand::$2 to live range equivalence class [ rand::$2 ]
Added variable rand::return#0 to live range equivalence class [ rand::return#0 ]
Complete equivalence classes
[ main::count#2 main::count#1 ]
[ doplasma::ii#3 doplasma::ii#2 ]
[ doplasma::c1a#3 doplasma::c1a#2 ]
[ doplasma::c1b#3 doplasma::c1b#2 ]
[ doplasma::i#3 doplasma::i#2 ]
[ doplasma::c2a#3 doplasma::c2a#2 ]
[ doplasma::c2b#3 doplasma::c2b#2 ]
[ doplasma::jj#3 doplasma::jj#2 ]
[ doplasma::scrn#6 doplasma::scrn#0 doplasma::scrn#13 ]
[ doplasma::j#3 doplasma::j#2 ]
[ print_line_cursor#9 print_line_cursor#0 ]
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#26 print_char_cursor#37 print_char_cursor#27 ]
[ makechar::c#3 makechar::c#2 ]
[ rand_state#14 rand_state#25 rand_state#19 rand_state#12 ]
[ makechar::i#3 makechar::i#2 ]
[ makechar::ii#3 makechar::ii#2 ]
[ makechar::b#3 makechar::b#7 makechar::b#2 ]
[ last_time ]
[ main::block#1 ]
[ main::tmp#1 ]
[ main::v#1 ]
[ doplasma::$6 ]
[ doplasma::$3 ]
[ doplasma::$1 ]
[ Ticks#0 ]
[ Ticks#1 ]
[ print_uint::w#0 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
[ makechar::$9 ]
[ makechar::s#1 ]
[ makechar::$7 ]
[ makechar::$8 ]
[ makechar::$10 ]
[ rand::return#2 ]
[ makechar::$3 ]
[ makechar::$4 ]
[ rand::$0 ]
[ rand_state#0 ]
[ rand::$1 ]
[ rand_state#1 ]
[ rand::$2 ]
[ rand::return#0 ]
Allocated zp[2]:2 [ main::count#2 main::count#1 ]
Allocated zp[1]:4 [ doplasma::ii#3 doplasma::ii#2 ]
Allocated zp[1]:5 [ doplasma::c1a#3 doplasma::c1a#2 ]
Allocated zp[1]:6 [ doplasma::c1b#3 doplasma::c1b#2 ]
Allocated zp[1]:7 [ doplasma::i#3 doplasma::i#2 ]
Allocated zp[1]:8 [ doplasma::c2a#3 doplasma::c2a#2 ]
Allocated zp[1]:9 [ doplasma::c2b#3 doplasma::c2b#2 ]
Allocated zp[1]:10 [ doplasma::jj#3 doplasma::jj#2 ]
Allocated zp[2]:11 [ doplasma::scrn#6 doplasma::scrn#0 doplasma::scrn#13 ]
Allocated zp[1]:13 [ doplasma::j#3 doplasma::j#2 ]
Allocated zp[2]:14 [ print_line_cursor#9 print_line_cursor#0 ]
Allocated zp[1]:16 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Allocated zp[1]:17 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
Allocated zp[2]:18 [ print_char_cursor#26 print_char_cursor#37 print_char_cursor#27 ]
Allocated zp[2]:20 [ makechar::c#3 makechar::c#2 ]
Allocated zp[2]:22 [ rand_state#14 rand_state#25 rand_state#19 rand_state#12 ]
Allocated zp[1]:24 [ makechar::i#3 makechar::i#2 ]
Allocated zp[1]:25 [ makechar::ii#3 makechar::ii#2 ]
Allocated zp[1]:26 [ makechar::b#3 makechar::b#7 makechar::b#2 ]
Allocated zp[2]:27 [ last_time ]
Allocated zp[1]:29 [ main::block#1 ]
Allocated zp[1]:30 [ main::tmp#1 ]
Allocated zp[1]:31 [ main::v#1 ]
Allocated zp[1]:32 [ doplasma::$6 ]
Allocated zp[1]:33 [ doplasma::$3 ]
Allocated zp[1]:34 [ doplasma::$1 ]
Allocated zp[2]:35 [ Ticks#0 ]
Allocated zp[2]:37 [ Ticks#1 ]
Allocated zp[2]:39 [ print_uint::w#0 ]
Allocated zp[1]:41 [ print_uchar::$0 ]
Allocated zp[1]:42 [ print_uchar::$2 ]
Allocated zp[1]:43 [ makechar::$9 ]
Allocated zp[1]:44 [ makechar::s#1 ]
Allocated zp[2]:45 [ makechar::$7 ]
Allocated zp[2]:47 [ makechar::$8 ]
Allocated zp[2]:49 [ makechar::$10 ]
Allocated zp[2]:51 [ rand::return#2 ]
Allocated zp[2]:53 [ makechar::$3 ]
Allocated zp[1]:55 [ makechar::$4 ]
Allocated zp[2]:56 [ rand::$0 ]
Allocated zp[2]:58 [ rand_state#0 ]
Allocated zp[2]:60 [ rand::$1 ]
Allocated zp[2]:62 [ rand_state#1 ]
Allocated zp[2]:64 [ rand::$2 ]
Allocated zp[2]:66 [ rand::return#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .const PAGE1 = SCREEN1>>6&$f0|CHARSET>>$a&$e
  .const PAGE2 = SCREEN2>>6&$f0|CHARSET>>$a&$e
  .label VIC_MEMORY = $d018
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  .label SCREEN1 = $e000
  .label SCREEN2 = $e400
  .label CHARSET = $e800
  .label print_screen = $400
  .label last_time = $1b
  // The random state variable
  .label rand_state = $3a
  // The random state variable
  .label rand_state_1 = $3e
  .label print_line_cursor = $e
  .label Ticks = $23
  .label Ticks_1 = $25
  // The random state variable
  .label rand_state_2 = $16
  .label print_char_cursor = $12
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] (volatile word) last_time ← (word) 0 -- vwuz1=vwuc1 
    lda #<0
    sta.z last_time
    lda #>0
    sta.z last_time+1
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [3] call main 
    // [5] phi from __start::@1 to main [phi:__start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    .label block = $1d
    .label tmp = $1e
    .label v = $1f
    .label count = 2
    // [6] call makechar 
    // [83] phi from main to makechar [phi:main->makechar]
  makechar_from_main:
    jsr makechar
    // [7] phi from main to main::@4 [phi:main->main::@4]
  __b4_from_main:
    jmp __b4
    // main::@4
  __b4:
    // [8] call start 
    jsr start
    jmp __b5
    // main::@5
  __b5:
    // [9] (byte) main::block#1 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) -- vbuz1=_deref_pbuc1 
    lda CIA2
    sta.z block
    // [10] (byte) main::tmp#1 ← (byte) main::block#1 & (byte) $fc -- vbuz1=vbuz2_band_vbuc1 
    lda #$fc
    and.z block
    sta.z tmp
    // [11] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) main::tmp#1 -- _deref_pbuc1=vbuz1 
    lda.z tmp
    sta CIA2
    // [12] (byte) main::v#1 ← *((const nomodify byte*) VIC_MEMORY) -- vbuz1=_deref_pbuc1 
    lda VIC_MEMORY
    sta.z v
    // [13] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [13] phi (word) main::count#2 = (word) $1f4 [phi:main::@5->main::@1#0] -- vwuz1=vwuc1 
    lda #<$1f4
    sta.z count
    lda #>$1f4
    sta.z count+1
    jmp __b1
  /* Run the demo until a key was hit */
    // main::@1
  __b1:
    // [14] if((byte) 0!=(word) main::count#2) goto main::@2 -- vwuc1_neq_vwuz1_then_la1 
    lda.z count+1
    cmp #>0
    bne __b2_from___b1
    lda.z count
    cmp #<0
    bne __b2_from___b1
    jmp __b3
    // main::@3
  __b3:
    // [15] *((const nomodify byte*) VIC_MEMORY) ← (byte) main::v#1 -- _deref_pbuc1=vbuz1 
    lda.z v
    sta VIC_MEMORY
    // [16] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) main::block#1 -- _deref_pbuc1=vbuz1 
    lda.z block
    sta CIA2
    // [17] call end 
    /* Reset screen colors */
    jsr end
    jmp __breturn
    // main::@return
  __breturn:
    // [18] return 
    rts
    // [19] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [20] call doplasma 
  /* Build page 1, then make it visible */
    // [25] phi from main::@2 to doplasma [phi:main::@2->doplasma]
  doplasma_from___b2:
    // [25] phi (byte*) doplasma::scrn#13 = (const nomodify byte*) SCREEN1 [phi:main::@2->doplasma#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta.z doplasma.scrn
    lda #>SCREEN1
    sta.z doplasma.scrn+1
    jsr doplasma
    jmp __b6
    // main::@6
  __b6:
    // [21] *((const nomodify byte*) VIC_MEMORY) ← (const nomodify byte) PAGE1 -- _deref_pbuc1=vbuc2 
    lda #PAGE1
    sta VIC_MEMORY
    // [22] call doplasma 
  /* Build page 2, then make it visible */
    // [25] phi from main::@6 to doplasma [phi:main::@6->doplasma]
  doplasma_from___b6:
    // [25] phi (byte*) doplasma::scrn#13 = (const nomodify byte*) SCREEN2 [phi:main::@6->doplasma#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta.z doplasma.scrn
    lda #>SCREEN2
    sta.z doplasma.scrn+1
    jsr doplasma
    jmp __b7
    // main::@7
  __b7:
    // [23] *((const nomodify byte*) VIC_MEMORY) ← (const nomodify byte) PAGE2 -- _deref_pbuc1=vbuc2 
    lda #PAGE2
    sta VIC_MEMORY
    // [24] (word) main::count#1 ← -- (word) main::count#2 -- vwuz1=_dec_vwuz1 
    lda.z count
    bne !+
    dec.z count+1
  !:
    dec.z count
    // [13] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  __b1_from___b7:
    // [13] phi (word) main::count#2 = (word) main::count#1 [phi:main::@7->main::@1#0] -- register_copy 
    jmp __b1
}
  // doplasma
// doplasma(byte* zp($b) scrn)
doplasma: {
    .const c2A = 0
    .const c2B = 0
    .label __1 = $22
    .label __3 = $21
    .label __6 = $20
    .label c1a = 5
    .label c1b = 6
    .label ii = 4
    .label c2a = 8
    .label c2b = 9
    .label i = 7
    .label j = $d
    .label scrn = $b
    .label jj = $a
    // [26] phi from doplasma to doplasma::@1 [phi:doplasma->doplasma::@1]
  __b1_from_doplasma:
    // [26] phi (byte) doplasma::c1b#3 = (byte) 0 [phi:doplasma->doplasma::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c1b
    // [26] phi (byte) doplasma::c1a#3 = (byte) 0 [phi:doplasma->doplasma::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z c1a
    // [26] phi (byte) doplasma::ii#3 = (byte) 0 [phi:doplasma->doplasma::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z ii
    jmp __b1
    // doplasma::@1
  __b1:
    // [27] if((byte) doplasma::ii#3<(byte) $19) goto doplasma::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z ii
    cmp #$19
    bcc __b2
    // [28] phi from doplasma::@1 to doplasma::@3 [phi:doplasma::@1->doplasma::@3]
  __b3_from___b1:
    // [28] phi (byte) doplasma::c2b#3 = (const byte) doplasma::c2B#0 [phi:doplasma::@1->doplasma::@3#0] -- vbuz1=vbuc1 
    lda #c2B
    sta.z c2b
    // [28] phi (byte) doplasma::c2a#3 = (const byte) doplasma::c2A#0 [phi:doplasma::@1->doplasma::@3#1] -- vbuz1=vbuc1 
    lda #c2A
    sta.z c2a
    // [28] phi (byte) doplasma::i#3 = (byte) 0 [phi:doplasma::@1->doplasma::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b3
    // doplasma::@3
  __b3:
    // [29] if((byte) doplasma::i#3<(byte) $28) goto doplasma::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #$28
    bcc __b4
    // [30] phi from doplasma::@3 to doplasma::@5 [phi:doplasma::@3->doplasma::@5]
  __b5_from___b3:
    // [30] phi (byte*) doplasma::scrn#6 = (byte*) doplasma::scrn#13 [phi:doplasma::@3->doplasma::@5#0] -- register_copy 
    // [30] phi (byte) doplasma::jj#3 = (byte) 0 [phi:doplasma::@3->doplasma::@5#1] -- vbuz1=vbuc1 
    lda #0
    sta.z jj
    jmp __b5
    // doplasma::@5
  __b5:
    // [31] if((byte) doplasma::jj#3<(byte) $19) goto doplasma::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z jj
    cmp #$19
    bcc __b6_from___b5
    jmp __breturn
    // doplasma::@return
  __breturn:
    // [32] return 
    rts
    // [33] phi from doplasma::@5 to doplasma::@6 [phi:doplasma::@5->doplasma::@6]
  __b6_from___b5:
    // [33] phi (byte) doplasma::j#3 = (byte) 0 [phi:doplasma::@5->doplasma::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    jmp __b6
    // doplasma::@6
  __b6:
    // [34] if((byte) doplasma::j#3<(byte) $28) goto doplasma::@7 -- vbuz1_lt_vbuc1_then_la1 
    lda.z j
    cmp #$28
    bcc __b7
    jmp __b8
    // doplasma::@8
  __b8:
    // [35] (byte*) doplasma::scrn#0 ← (byte*) doplasma::scrn#6 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z scrn
    sta.z scrn
    bcc !+
    inc.z scrn+1
  !:
    // [36] (byte) doplasma::jj#2 ← ++ (byte) doplasma::jj#3 -- vbuz1=_inc_vbuz1 
    inc.z jj
    // [30] phi from doplasma::@8 to doplasma::@5 [phi:doplasma::@8->doplasma::@5]
  __b5_from___b8:
    // [30] phi (byte*) doplasma::scrn#6 = (byte*) doplasma::scrn#0 [phi:doplasma::@8->doplasma::@5#0] -- register_copy 
    // [30] phi (byte) doplasma::jj#3 = (byte) doplasma::jj#2 [phi:doplasma::@8->doplasma::@5#1] -- register_copy 
    jmp __b5
    // doplasma::@7
  __b7:
    // [37] (byte~) doplasma::$6 ← *((const byte*) xbuf + (byte) doplasma::j#3) + *((const byte*) ybuf + (byte) doplasma::jj#3) -- vbuz1=pbuc1_derefidx_vbuz2_plus_pbuc2_derefidx_vbuz3 
    ldy.z j
    lda xbuf,y
    ldy.z jj
    clc
    adc ybuf,y
    sta.z __6
    // [38] *((byte*) doplasma::scrn#6 + (byte) doplasma::j#3) ← (byte~) doplasma::$6 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z __6
    ldy.z j
    sta (scrn),y
    // [39] (byte) doplasma::j#2 ← ++ (byte) doplasma::j#3 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [33] phi from doplasma::@7 to doplasma::@6 [phi:doplasma::@7->doplasma::@6]
  __b6_from___b7:
    // [33] phi (byte) doplasma::j#3 = (byte) doplasma::j#2 [phi:doplasma::@7->doplasma::@6#0] -- register_copy 
    jmp __b6
    // doplasma::@4
  __b4:
    // [40] (byte~) doplasma::$3 ← *((const to_nomodify byte*) sinustable + (byte) doplasma::c2a#3) + *((const to_nomodify byte*) sinustable + (byte) doplasma::c2b#3) -- vbuz1=pbuc1_derefidx_vbuz2_plus_pbuc1_derefidx_vbuz3 
    ldy.z c2a
    lda sinustable,y
    ldy.z c2b
    clc
    adc sinustable,y
    sta.z __3
    // [41] *((const byte*) xbuf + (byte) doplasma::i#3) ← (byte~) doplasma::$3 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __3
    ldy.z i
    sta xbuf,y
    // [42] (byte) doplasma::c2a#2 ← (byte) doplasma::c2a#3 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c2a
    axs #-[3]
    stx.z c2a
    // [43] (byte) doplasma::c2b#2 ← (byte) doplasma::c2b#3 + (byte) 7 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c2b
    axs #-[7]
    stx.z c2b
    // [44] (byte) doplasma::i#2 ← ++ (byte) doplasma::i#3 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [28] phi from doplasma::@4 to doplasma::@3 [phi:doplasma::@4->doplasma::@3]
  __b3_from___b4:
    // [28] phi (byte) doplasma::c2b#3 = (byte) doplasma::c2b#2 [phi:doplasma::@4->doplasma::@3#0] -- register_copy 
    // [28] phi (byte) doplasma::c2a#3 = (byte) doplasma::c2a#2 [phi:doplasma::@4->doplasma::@3#1] -- register_copy 
    // [28] phi (byte) doplasma::i#3 = (byte) doplasma::i#2 [phi:doplasma::@4->doplasma::@3#2] -- register_copy 
    jmp __b3
    // doplasma::@2
  __b2:
    // [45] (byte~) doplasma::$1 ← *((const to_nomodify byte*) sinustable + (byte) doplasma::c1a#3) + *((const to_nomodify byte*) sinustable + (byte) doplasma::c1b#3) -- vbuz1=pbuc1_derefidx_vbuz2_plus_pbuc1_derefidx_vbuz3 
    ldy.z c1a
    lda sinustable,y
    ldy.z c1b
    clc
    adc sinustable,y
    sta.z __1
    // [46] *((const byte*) ybuf + (byte) doplasma::ii#3) ← (byte~) doplasma::$1 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __1
    ldy.z ii
    sta ybuf,y
    // [47] (byte) doplasma::c1a#2 ← (byte) doplasma::c1a#3 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c1a
    axs #-[4]
    stx.z c1a
    // [48] (byte) doplasma::c1b#2 ← (byte) doplasma::c1b#3 + (byte) 9 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c1b
    axs #-[9]
    stx.z c1b
    // [49] (byte) doplasma::ii#2 ← ++ (byte) doplasma::ii#3 -- vbuz1=_inc_vbuz1 
    inc.z ii
    // [26] phi from doplasma::@2 to doplasma::@1 [phi:doplasma::@2->doplasma::@1]
  __b1_from___b2:
    // [26] phi (byte) doplasma::c1b#3 = (byte) doplasma::c1b#2 [phi:doplasma::@2->doplasma::@1#0] -- register_copy 
    // [26] phi (byte) doplasma::c1a#3 = (byte) doplasma::c1a#2 [phi:doplasma::@2->doplasma::@1#1] -- register_copy 
    // [26] phi (byte) doplasma::ii#3 = (byte) doplasma::ii#2 [phi:doplasma::@2->doplasma::@1#2] -- register_copy 
    jmp __b1
}
  // end
end: {
    // [50] (word) Ticks#0 ← (volatile word) last_time -- vwuz1=vwuz2 
    lda.z last_time
    sta.z Ticks
    lda.z last_time+1
    sta.z Ticks+1
    // [51] call start 
    jsr start
    jmp __b1
    // end::@1
  __b1:
    // [52] (volatile word) last_time ← (volatile word) last_time - (word) Ticks#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z last_time
    sec
    sbc.z Ticks
    sta.z last_time
    lda.z last_time+1
    sbc.z Ticks+1
    sta.z last_time+1
    // [53] (word) Ticks#1 ← (volatile word) last_time -- vwuz1=vwuz2 
    lda.z last_time
    sta.z Ticks_1
    lda.z last_time+1
    sta.z Ticks_1+1
    // [54] (word) print_uint::w#0 ← (word) Ticks#1 -- vwuz1=vwuz2 
    lda.z Ticks_1
    sta.z print_uint.w
    lda.z Ticks_1+1
    sta.z print_uint.w+1
    // [55] call print_uint 
    jsr print_uint
    // [56] phi from end::@1 to end::@2 [phi:end::@1->end::@2]
  __b2_from___b1:
    jmp __b2
    // end::@2
  __b2:
    // [57] call print_ln 
    // [59] phi from end::@2 to print_ln [phi:end::@2->print_ln]
  print_ln_from___b2:
    jsr print_ln
    jmp __breturn
    // end::@return
  __breturn:
    // [58] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [60] phi from print_ln to print_ln::@1 [phi:print_ln->print_ln::@1]
  __b1_from_print_ln:
    // [60] phi (byte*) print_line_cursor#9 = (const byte*) print_screen#0 [phi:print_ln->print_ln::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    jmp __b1
    // [60] phi from print_ln::@1 to print_ln::@1 [phi:print_ln::@1->print_ln::@1]
  __b1_from___b1:
    // [60] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#0 [phi:print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [61] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [62] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#27) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [63] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp($27) w)
print_uint: {
    .label w = $27
    // [64] (byte) print_uchar::b#0 ← > (word) print_uint::w#0 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_uchar.b
    // [65] call print_uchar 
    // [69] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [69] phi (byte*) print_char_cursor#37 = (const byte*) print_screen#0 [phi:print_uint->print_uchar#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [69] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [66] (byte) print_uchar::b#1 ← < (word) print_uint::w#0 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_uchar.b
    // [67] call print_uchar 
    // [69] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [69] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#27 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [69] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [68] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte zp($10) b)
print_uchar: {
    .label __0 = $29
    .label __2 = $2a
    .label b = $10
    // [70] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [71] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda print_hextab,y
    sta.z print_char.ch
    // [72] call print_char 
  // Table of hexadecimal digits
    // [77] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [77] phi (byte*) print_char_cursor#26 = (byte*) print_char_cursor#37 [phi:print_uchar->print_char#0] -- register_copy 
    // [77] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [73] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z __2
    // [74] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __2
    lda print_hextab,y
    sta.z print_char.ch
    // [75] call print_char 
    // [77] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [77] phi (byte*) print_char_cursor#26 = (byte*) print_char_cursor#27 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [77] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [76] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte zp($11) ch)
print_char: {
    .label ch = $11
    // [78] *((byte*) print_char_cursor#26) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [79] (byte*) print_char_cursor#27 ← ++ (byte*) print_char_cursor#26 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [80] return 
    rts
}
  // start
start: {
    .label LAST_TIME = last_time
    // asm { jsr$FFDE staLAST_TIME stxLAST_TIME+1  }
    jsr $ffde
    sta LAST_TIME
    stx LAST_TIME+1
    jmp __breturn
    // start::@return
  __breturn:
    // [82] return 
    rts
}
  // makechar
makechar: {
    .label __3 = $35
    .label __4 = $37
    .label __7 = $2d
    .label __8 = $2f
    .label __9 = $2b
    .label s = $2c
    .label c = $14
    .label i = $18
    .label ii = $19
    .label b = $1a
    .label __10 = $31
    // [84] phi from makechar to makechar::@1 [phi:makechar->makechar::@1]
  __b1_from_makechar:
    // [84] phi (word) rand_state#14 = (word) 1 [phi:makechar->makechar::@1#0] -- vwuz1=vwuc1 
    lda #<1
    sta.z rand_state_2
    lda #>1
    sta.z rand_state_2+1
    // [84] phi (word) makechar::c#3 = (byte) 0 [phi:makechar->makechar::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z c
    lda #>0
    sta.z c+1
    jmp __b1
    // makechar::@1
  __b1:
    // [85] if((word) makechar::c#3<(word) $100) goto makechar::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z c+1
    cmp #>$100
    bcc __b2
    bne !+
    lda.z c
    cmp #<$100
    bcc __b2
  !:
    jmp __breturn
    // makechar::@return
  __breturn:
    // [86] return 
    rts
    // makechar::@2
  __b2:
    // [87] (byte~) makechar::$9 ← (byte)(word) makechar::c#3 -- vbuz1=_byte_vwuz2 
    lda.z c
    sta.z __9
    // [88] (byte) makechar::s#1 ← *((const to_nomodify byte*) sinustable + (byte~) makechar::$9) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __9
    lda sinustable,y
    sta.z s
    // [89] phi from makechar::@2 to makechar::@3 [phi:makechar::@2->makechar::@3]
  __b3_from___b2:
    // [89] phi (word) rand_state#25 = (word) rand_state#14 [phi:makechar::@2->makechar::@3#0] -- register_copy 
    // [89] phi (byte) makechar::i#3 = (byte) 0 [phi:makechar::@2->makechar::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b3
    // makechar::@3
  __b3:
    // [90] if((byte) makechar::i#3<(byte) 8) goto makechar::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8
    bcc __b5_from___b3
    jmp __b4
    // makechar::@4
  __b4:
    // [91] (word) makechar::c#2 ← ++ (word) makechar::c#3 -- vwuz1=_inc_vwuz1 
    inc.z c
    bne !+
    inc.z c+1
  !:
    // [84] phi from makechar::@4 to makechar::@1 [phi:makechar::@4->makechar::@1]
  __b1_from___b4:
    // [84] phi (word) rand_state#14 = (word) rand_state#25 [phi:makechar::@4->makechar::@1#0] -- register_copy 
    // [84] phi (word) makechar::c#3 = (word) makechar::c#2 [phi:makechar::@4->makechar::@1#1] -- register_copy 
    jmp __b1
    // [92] phi from makechar::@3 to makechar::@5 [phi:makechar::@3->makechar::@5]
  __b5_from___b3:
    // [92] phi (word) rand_state#19 = (word) rand_state#25 [phi:makechar::@3->makechar::@5#0] -- register_copy 
    // [92] phi (byte) makechar::b#3 = (byte) 0 [phi:makechar::@3->makechar::@5#1] -- vbuz1=vbuc1 
    lda #0
    sta.z b
    // [92] phi (byte) makechar::ii#3 = (byte) 0 [phi:makechar::@3->makechar::@5#2] -- vbuz1=vbuc1 
    lda #0
    sta.z ii
    jmp __b5
    // makechar::@5
  __b5:
    // [93] if((byte) makechar::ii#3<(byte) 8) goto makechar::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z ii
    cmp #8
    bcc __b6_from___b5
    jmp __b7
    // makechar::@7
  __b7:
    // [94] (word~) makechar::$7 ← (word) makechar::c#3 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda.z c
    asl
    sta.z __7
    lda.z c+1
    rol
    sta.z __7+1
    asl.z __7
    rol.z __7+1
    asl.z __7
    rol.z __7+1
    // [95] (word~) makechar::$8 ← (word~) makechar::$7 + (byte) makechar::i#3 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z i
    clc
    adc.z __7
    sta.z __8
    lda #0
    adc.z __7+1
    sta.z __8+1
    // [96] (byte*~) makechar::$10 ← (const nomodify byte*) CHARSET + (word~) makechar::$8 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z __8
    clc
    adc #<CHARSET
    sta.z __10
    lda.z __8+1
    adc #>CHARSET
    sta.z __10+1
    // [97] *((byte*~) makechar::$10) ← (byte) makechar::b#3 -- _deref_pbuz1=vbuz2 
    lda.z b
    ldy #0
    sta (__10),y
    // [98] (byte) makechar::i#2 ← ++ (byte) makechar::i#3 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [89] phi from makechar::@7 to makechar::@3 [phi:makechar::@7->makechar::@3]
  __b3_from___b7:
    // [89] phi (word) rand_state#25 = (word) rand_state#19 [phi:makechar::@7->makechar::@3#0] -- register_copy 
    // [89] phi (byte) makechar::i#3 = (byte) makechar::i#2 [phi:makechar::@7->makechar::@3#1] -- register_copy 
    jmp __b3
    // [99] phi from makechar::@5 to makechar::@6 [phi:makechar::@5->makechar::@6]
  __b6_from___b5:
    jmp __b6
    // makechar::@6
  __b6:
    // [100] call rand 
    jsr rand
    // [101] (word) rand::return#2 ← (word) rand::return#0 -- vwuz1=vwuz2 
    lda.z rand.return
    sta.z rand.return_1
    lda.z rand.return+1
    sta.z rand.return_1+1
    jmp __b10
    // makechar::@10
  __b10:
    // [102] (word~) makechar::$3 ← (word) rand::return#2 -- vwuz1=vwuz2 
    lda.z rand.return_1
    sta.z __3
    lda.z rand.return_1+1
    sta.z __3+1
    // [103] (byte~) makechar::$4 ← (word~) makechar::$3 & (byte) $ff -- vbuz1=vwuz2_band_vbuc1 
    lda #$ff
    and.z __3
    sta.z __4
    // [104] if((byte~) makechar::$4<=(byte) makechar::s#1) goto makechar::@8 -- vbuz1_le_vbuz2_then_la1 
    lda.z s
    cmp.z __4
    bcs __b8_from___b10
    jmp __b9
    // makechar::@9
  __b9:
    // [105] (byte) makechar::b#2 ← (byte) makechar::b#3 | *((const to_nomodify byte*) bittab + (byte) makechar::ii#3) -- vbuz1=vbuz1_bor_pbuc1_derefidx_vbuz2 
    lda.z b
    ldy.z ii
    ora bittab,y
    sta.z b
    // [106] phi from makechar::@10 makechar::@9 to makechar::@8 [phi:makechar::@10/makechar::@9->makechar::@8]
  __b8_from___b10:
  __b8_from___b9:
    // [106] phi (byte) makechar::b#7 = (byte) makechar::b#3 [phi:makechar::@10/makechar::@9->makechar::@8#0] -- register_copy 
    jmp __b8
    // makechar::@8
  __b8:
    // [107] (byte) makechar::ii#2 ← ++ (byte) makechar::ii#3 -- vbuz1=_inc_vbuz1 
    inc.z ii
    // [92] phi from makechar::@8 to makechar::@5 [phi:makechar::@8->makechar::@5]
  __b5_from___b8:
    // [92] phi (word) rand_state#19 = (word) rand_state#12 [phi:makechar::@8->makechar::@5#0] -- register_copy 
    // [92] phi (byte) makechar::b#3 = (byte) makechar::b#7 [phi:makechar::@8->makechar::@5#1] -- register_copy 
    // [92] phi (byte) makechar::ii#3 = (byte) makechar::ii#2 [phi:makechar::@8->makechar::@5#2] -- register_copy 
    jmp __b5
}
  // rand
// Returns a pseudo-random number in the range of 0 to RAND_MAX (65535)
// Uses an xorshift pseudorandom number generator that hits all different values
// Information https://en.wikipedia.org/wiki/Xorshift
// Source http://www.retroprogramming.com/2017/07/xorshift-pseudorandom-numbers-in-z80.html
rand: {
    .label __0 = $38
    .label __1 = $3c
    .label __2 = $40
    .label return = $42
    .label return_1 = $33
    // [108] (word~) rand::$0 ← (word) rand_state#19 << (byte) 7 -- vwuz1=vwuz2_rol_7 
    lda.z rand_state_2+1
    lsr
    lda.z rand_state_2
    ror
    sta.z __0+1
    lda #0
    ror
    sta.z __0
    // [109] (word) rand_state#0 ← (word) rand_state#19 ^ (word~) rand::$0 -- vwuz1=vwuz2_bxor_vwuz3 
    lda.z rand_state_2
    eor.z __0
    sta.z rand_state
    lda.z rand_state_2+1
    eor.z __0+1
    sta.z rand_state+1
    // [110] (word~) rand::$1 ← (word) rand_state#0 >> (byte) 9 -- vwuz1=vwuz2_ror_9 
    lda.z rand_state+1
    lsr
    sta.z __1
    lda #0
    sta.z __1+1
    // [111] (word) rand_state#1 ← (word) rand_state#0 ^ (word~) rand::$1 -- vwuz1=vwuz2_bxor_vwuz3 
    lda.z rand_state
    eor.z __1
    sta.z rand_state_1
    lda.z rand_state+1
    eor.z __1+1
    sta.z rand_state_1+1
    // [112] (word~) rand::$2 ← (word) rand_state#1 << (byte) 8 -- vwuz1=vwuz2_rol_8 
    lda.z rand_state_1
    sta.z __2+1
    lda #0
    sta.z __2
    // [113] (word) rand_state#12 ← (word) rand_state#1 ^ (word~) rand::$2 -- vwuz1=vwuz2_bxor_vwuz3 
    lda.z rand_state_1
    eor.z __2
    sta.z rand_state_2
    lda.z rand_state_1+1
    eor.z __2+1
    sta.z rand_state_2+1
    // [114] (word) rand::return#0 ← (word) rand_state#12 -- vwuz1=vwuz2 
    lda.z rand_state_2
    sta.z return
    lda.z rand_state_2+1
    sta.z return+1
    jmp __breturn
    // rand::@return
  __breturn:
    // [115] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  .align $100
  sinustable: .byte $80, $7d, $7a, $77, $74, $70, $6d, $6a, $67, $64, $61, $5e, $5b, $58, $55, $52, $4f, $4d, $4a, $47, $44, $41, $3f, $3c, $39, $37, $34, $32, $2f, $2d, $2b, $28, $26, $24, $22, $20, $1e, $1c, $1a, $18, $16, $15, $13, $11, $10, $f, $d, $c, $b, $a, 8, 7, 6, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 5, 6, 6, 7, 8, $a, $b, $c, $d, $f, $10, $11, $13, $15, $16, $18, $1a, $1c, $1e, $20, $22, $24, $26, $28, $2b, $2d, $2f, $32, $34, $37, $39, $3c, $3f, $41, $44, $47, $4a, $4d, $4f, $52, $55, $58, $5b, $5e, $61, $64, $67, $6a, $6d, $70, $74, $77, $7a, $7d, $80, $83, $86, $89, $8c, $90, $93, $96, $99, $9c, $9f, $a2, $a5, $a8, $ab, $ae, $b1, $b3, $b6, $b9, $bc, $bf, $c1, $c4, $c7, $c9, $cc, $ce, $d1, $d3, $d5, $d8, $da, $dc, $de, $e0, $e2, $e4, $e6, $e8, $ea, $eb, $ed, $ef, $f0, $f1, $f3, $f4, $f5, $f6, $f8, $f9, $fa, $fa, $fb, $fc, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fc, $fb, $fa, $fa, $f9, $f8, $f6, $f5, $f4, $f3, $f1, $f0, $ef, $ed, $eb, $ea, $e8, $e6, $e4, $e2, $e0, $de, $dc, $da, $d8, $d5, $d3, $d1, $ce, $cc, $c9, $c7, $c4, $c1, $bf, $bc, $b9, $b6, $b3, $b1, $ae, $ab, $a8, $a5, $a2, $9f, $9c, $99, $96, $93, $90, $8c, $89, $86, $83
  xbuf: .fill $28, 0
  ybuf: .fill $19, 0
  bittab: .byte 1, 2, 4, 8, $10, $20, $40, $80

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (volatile word) last_time ← (word) 0 [ last_time ] (  [ last_time ] { }  ) always clobbers reg byte a 
Statement [14] if((byte) 0!=(word) main::count#2) goto main::@2 [ last_time main::block#1 main::v#1 main::count#2 ] ( main:3 [ last_time main::block#1 main::v#1 main::count#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:29 [ main::block#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:31 [ main::v#1 ]
Statement [21] *((const nomodify byte*) VIC_MEMORY) ← (const nomodify byte) PAGE1 [ last_time main::block#1 main::v#1 main::count#2 ] ( main:3 [ last_time main::block#1 main::v#1 main::count#2 ] { }  ) always clobbers reg byte a 
Statement [23] *((const nomodify byte*) VIC_MEMORY) ← (const nomodify byte) PAGE2 [ last_time main::block#1 main::v#1 main::count#2 ] ( main:3 [ last_time main::block#1 main::v#1 main::count#2 ] { }  ) always clobbers reg byte a 
Statement [24] (word) main::count#1 ← -- (word) main::count#2 [ last_time main::block#1 main::v#1 main::count#1 ] ( main:3 [ last_time main::block#1 main::v#1 main::count#1 ] { }  ) always clobbers reg byte a 
Statement [35] (byte*) doplasma::scrn#0 ← (byte*) doplasma::scrn#6 + (byte) $28 [ doplasma::jj#3 doplasma::scrn#0 ] ( main:3::doplasma:20 [ last_time main::block#1 main::v#1 main::count#2 doplasma::jj#3 doplasma::scrn#0 ] { }  main:3::doplasma:22 [ last_time main::block#1 main::v#1 main::count#2 doplasma::jj#3 doplasma::scrn#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ doplasma::jj#3 doplasma::jj#2 ]
Statement [37] (byte~) doplasma::$6 ← *((const byte*) xbuf + (byte) doplasma::j#3) + *((const byte*) ybuf + (byte) doplasma::jj#3) [ doplasma::jj#3 doplasma::scrn#6 doplasma::j#3 doplasma::$6 ] ( main:3::doplasma:20 [ last_time main::block#1 main::v#1 main::count#2 doplasma::jj#3 doplasma::scrn#6 doplasma::j#3 doplasma::$6 ] { }  main:3::doplasma:22 [ last_time main::block#1 main::v#1 main::count#2 doplasma::jj#3 doplasma::scrn#6 doplasma::j#3 doplasma::$6 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:13 [ doplasma::j#3 doplasma::j#2 ]
Statement [40] (byte~) doplasma::$3 ← *((const to_nomodify byte*) sinustable + (byte) doplasma::c2a#3) + *((const to_nomodify byte*) sinustable + (byte) doplasma::c2b#3) [ doplasma::scrn#13 doplasma::i#3 doplasma::c2a#3 doplasma::c2b#3 doplasma::$3 ] ( main:3::doplasma:20 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::i#3 doplasma::c2a#3 doplasma::c2b#3 doplasma::$3 ] { }  main:3::doplasma:22 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::i#3 doplasma::c2a#3 doplasma::c2b#3 doplasma::$3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ doplasma::i#3 doplasma::i#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:8 [ doplasma::c2a#3 doplasma::c2a#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:9 [ doplasma::c2b#3 doplasma::c2b#2 ]
Statement [42] (byte) doplasma::c2a#2 ← (byte) doplasma::c2a#3 + (byte) 3 [ doplasma::scrn#13 doplasma::i#3 doplasma::c2b#3 doplasma::c2a#2 ] ( main:3::doplasma:20 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::i#3 doplasma::c2b#3 doplasma::c2a#2 ] { }  main:3::doplasma:22 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::i#3 doplasma::c2b#3 doplasma::c2a#2 ] { }  ) always clobbers reg byte a 
Statement [43] (byte) doplasma::c2b#2 ← (byte) doplasma::c2b#3 + (byte) 7 [ doplasma::scrn#13 doplasma::i#3 doplasma::c2a#2 doplasma::c2b#2 ] ( main:3::doplasma:20 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::i#3 doplasma::c2a#2 doplasma::c2b#2 ] { }  main:3::doplasma:22 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::i#3 doplasma::c2a#2 doplasma::c2b#2 ] { }  ) always clobbers reg byte a 
Statement [45] (byte~) doplasma::$1 ← *((const to_nomodify byte*) sinustable + (byte) doplasma::c1a#3) + *((const to_nomodify byte*) sinustable + (byte) doplasma::c1b#3) [ doplasma::scrn#13 doplasma::ii#3 doplasma::c1a#3 doplasma::c1b#3 doplasma::$1 ] ( main:3::doplasma:20 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::ii#3 doplasma::c1a#3 doplasma::c1b#3 doplasma::$1 ] { }  main:3::doplasma:22 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::ii#3 doplasma::c1a#3 doplasma::c1b#3 doplasma::$1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ doplasma::ii#3 doplasma::ii#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ doplasma::c1a#3 doplasma::c1a#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:6 [ doplasma::c1b#3 doplasma::c1b#2 ]
Statement [47] (byte) doplasma::c1a#2 ← (byte) doplasma::c1a#3 + (byte) 4 [ doplasma::scrn#13 doplasma::ii#3 doplasma::c1b#3 doplasma::c1a#2 ] ( main:3::doplasma:20 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::ii#3 doplasma::c1b#3 doplasma::c1a#2 ] { }  main:3::doplasma:22 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::ii#3 doplasma::c1b#3 doplasma::c1a#2 ] { }  ) always clobbers reg byte a 
Statement [48] (byte) doplasma::c1b#2 ← (byte) doplasma::c1b#3 + (byte) 9 [ doplasma::scrn#13 doplasma::ii#3 doplasma::c1a#2 doplasma::c1b#2 ] ( main:3::doplasma:20 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::ii#3 doplasma::c1a#2 doplasma::c1b#2 ] { }  main:3::doplasma:22 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::ii#3 doplasma::c1a#2 doplasma::c1b#2 ] { }  ) always clobbers reg byte a 
Statement [50] (word) Ticks#0 ← (volatile word) last_time [ last_time Ticks#0 ] ( main:3::end:17 [ last_time Ticks#0 ] { }  ) always clobbers reg byte a 
Statement [52] (volatile word) last_time ← (volatile word) last_time - (word) Ticks#0 [ last_time ] ( main:3::end:17 [ last_time ] { { Ticks#1 = print_uint::w#0 } }  ) always clobbers reg byte a 
Statement [53] (word) Ticks#1 ← (volatile word) last_time [ Ticks#1 ] ( main:3::end:17 [ Ticks#1 ] { { Ticks#1 = print_uint::w#0 } }  ) always clobbers reg byte a 
Statement [54] (word) print_uint::w#0 ← (word) Ticks#1 [ print_uint::w#0 ] ( main:3::end:17 [ print_uint::w#0 ] { { Ticks#1 = print_uint::w#0 } }  ) always clobbers reg byte a 
Statement [61] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#0 print_char_cursor#27 ] ( main:3::end:17::print_ln:57 [ print_line_cursor#0 print_char_cursor#27 ] { }  ) always clobbers reg byte a 
Statement [62] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#27) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#27 ] ( main:3::end:17::print_ln:57 [ print_line_cursor#0 print_char_cursor#27 ] { }  ) always clobbers reg byte a 
Statement [70] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 [ print_uchar::b#2 print_char_cursor#37 print_uchar::$0 ] ( main:3::end:17::print_uint:55::print_uchar:65 [ print_uint::w#0 print_uchar::b#2 print_char_cursor#37 print_uchar::$0 ] { { Ticks#1 = print_uint::w#0 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#0 = print_char::ch#2 } { print_char_cursor#26 = print_char_cursor#37 } }  main:3::end:17::print_uint:55::print_uchar:67 [ print_uchar::b#2 print_char_cursor#37 print_uchar::$0 ] { { Ticks#1 = print_uint::w#0 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#26 = print_char_cursor#37 print_char_cursor#27 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:16 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement [73] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f [ print_char_cursor#27 print_uchar::$2 ] ( main:3::end:17::print_uint:55::print_uchar:65 [ print_uint::w#0 print_char_cursor#27 print_uchar::$2 ] { { Ticks#1 = print_uint::w#0 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#2 } { print_char_cursor#26 = print_char_cursor#27 } }  main:3::end:17::print_uint:55::print_uchar:67 [ print_char_cursor#27 print_uchar::$2 ] { { Ticks#1 = print_uint::w#0 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#26 = print_char_cursor#37 print_char_cursor#27 } { print_char::ch#1 = print_char::ch#2 } }  ) always clobbers reg byte a 
Statement [78] *((byte*) print_char_cursor#26) ← (byte) print_char::ch#2 [ print_char_cursor#26 ] ( main:3::end:17::print_uint:55::print_uchar:65::print_char:72 [ print_uint::w#0 print_uchar::b#2 print_char_cursor#26 ] { { Ticks#1 = print_uint::w#0 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#0 = print_char::ch#2 } { print_char_cursor#26 = print_char_cursor#37 } }  main:3::end:17::print_uint:55::print_uchar:67::print_char:72 [ print_uchar::b#2 print_char_cursor#26 ] { { Ticks#1 = print_uint::w#0 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#26 = print_char_cursor#37 print_char_cursor#27 } { print_char::ch#0 = print_char::ch#2 } }  main:3::end:17::print_uint:55::print_uchar:65::print_char:75 [ print_uint::w#0 print_char_cursor#26 ] { { Ticks#1 = print_uint::w#0 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#2 } { print_char_cursor#26 = print_char_cursor#27 } }  main:3::end:17::print_uint:55::print_uchar:67::print_char:75 [ print_char_cursor#26 ] { { Ticks#1 = print_uint::w#0 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#26 = print_char_cursor#37 print_char_cursor#27 } { print_char::ch#1 = print_char::ch#2 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:16 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement asm { jsr$FFDE staLAST_TIME stxLAST_TIME+1  } always clobbers reg byte a reg byte x reg byte y 
Statement [85] if((word) makechar::c#3<(word) $100) goto makechar::@2 [ makechar::c#3 rand_state#14 ] ( main:3::makechar:6 [ last_time makechar::c#3 rand_state#14 ] { }  ) always clobbers reg byte a 
Statement [87] (byte~) makechar::$9 ← (byte)(word) makechar::c#3 [ makechar::c#3 rand_state#14 makechar::$9 ] ( main:3::makechar:6 [ last_time makechar::c#3 rand_state#14 makechar::$9 ] { }  ) always clobbers reg byte a 
Statement [94] (word~) makechar::$7 ← (word) makechar::c#3 << (byte) 3 [ makechar::c#3 makechar::s#1 makechar::i#3 rand_state#19 makechar::b#3 makechar::$7 ] ( main:3::makechar:6 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 rand_state#19 makechar::b#3 makechar::$7 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:44 [ makechar::s#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:24 [ makechar::i#3 makechar::i#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:26 [ makechar::b#3 makechar::b#7 makechar::b#2 ]
Statement [95] (word~) makechar::$8 ← (word~) makechar::$7 + (byte) makechar::i#3 [ makechar::c#3 makechar::s#1 makechar::i#3 rand_state#19 makechar::b#3 makechar::$8 ] ( main:3::makechar:6 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 rand_state#19 makechar::b#3 makechar::$8 ] { }  ) always clobbers reg byte a 
Statement [96] (byte*~) makechar::$10 ← (const nomodify byte*) CHARSET + (word~) makechar::$8 [ makechar::c#3 makechar::s#1 makechar::i#3 rand_state#19 makechar::b#3 makechar::$10 ] ( main:3::makechar:6 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 rand_state#19 makechar::b#3 makechar::$10 ] { }  ) always clobbers reg byte a 
Statement [97] *((byte*~) makechar::$10) ← (byte) makechar::b#3 [ makechar::c#3 makechar::s#1 makechar::i#3 rand_state#19 ] ( main:3::makechar:6 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 rand_state#19 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:44 [ makechar::s#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:24 [ makechar::i#3 makechar::i#2 ]
Statement [101] (word) rand::return#2 ← (word) rand::return#0 [ makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#12 rand::return#2 ] ( main:3::makechar:6 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#12 rand::return#2 ] { { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:25 [ makechar::ii#3 makechar::ii#2 ]
Statement [102] (word~) makechar::$3 ← (word) rand::return#2 [ makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#12 makechar::$3 ] ( main:3::makechar:6 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#12 makechar::$3 ] { }  ) always clobbers reg byte a 
Statement [103] (byte~) makechar::$4 ← (word~) makechar::$3 & (byte) $ff [ makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#12 makechar::$4 ] ( main:3::makechar:6 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#12 makechar::$4 ] { }  ) always clobbers reg byte a 
Statement [105] (byte) makechar::b#2 ← (byte) makechar::b#3 | *((const to_nomodify byte*) bittab + (byte) makechar::ii#3) [ makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 rand_state#12 makechar::b#2 ] ( main:3::makechar:6 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 rand_state#12 makechar::b#2 ] { }  ) always clobbers reg byte a 
Statement [108] (word~) rand::$0 ← (word) rand_state#19 << (byte) 7 [ rand_state#19 rand::$0 ] ( main:3::makechar:6::rand:100 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#19 rand::$0 ] { { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Statement [109] (word) rand_state#0 ← (word) rand_state#19 ^ (word~) rand::$0 [ rand_state#0 ] ( main:3::makechar:6::rand:100 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#0 ] { { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Statement [110] (word~) rand::$1 ← (word) rand_state#0 >> (byte) 9 [ rand_state#0 rand::$1 ] ( main:3::makechar:6::rand:100 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#0 rand::$1 ] { { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Statement [111] (word) rand_state#1 ← (word) rand_state#0 ^ (word~) rand::$1 [ rand_state#1 ] ( main:3::makechar:6::rand:100 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#1 ] { { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Statement [112] (word~) rand::$2 ← (word) rand_state#1 << (byte) 8 [ rand_state#1 rand::$2 ] ( main:3::makechar:6::rand:100 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#1 rand::$2 ] { { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Statement [113] (word) rand_state#12 ← (word) rand_state#1 ^ (word~) rand::$2 [ rand_state#12 ] ( main:3::makechar:6::rand:100 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#12 ] { { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Statement [114] (word) rand::return#0 ← (word) rand_state#12 [ rand_state#12 rand::return#0 ] ( main:3::makechar:6::rand:100 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#12 rand::return#0 ] { { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Statement [1] (volatile word) last_time ← (word) 0 [ last_time ] (  [ last_time ] { }  ) always clobbers reg byte a 
Statement [10] (byte) main::tmp#1 ← (byte) main::block#1 & (byte) $fc [ last_time main::block#1 main::tmp#1 ] ( main:3 [ last_time main::block#1 main::tmp#1 ] { }  ) always clobbers reg byte a 
Statement [14] if((byte) 0!=(word) main::count#2) goto main::@2 [ last_time main::block#1 main::v#1 main::count#2 ] ( main:3 [ last_time main::block#1 main::v#1 main::count#2 ] { }  ) always clobbers reg byte a 
Statement [21] *((const nomodify byte*) VIC_MEMORY) ← (const nomodify byte) PAGE1 [ last_time main::block#1 main::v#1 main::count#2 ] ( main:3 [ last_time main::block#1 main::v#1 main::count#2 ] { }  ) always clobbers reg byte a 
Statement [23] *((const nomodify byte*) VIC_MEMORY) ← (const nomodify byte) PAGE2 [ last_time main::block#1 main::v#1 main::count#2 ] ( main:3 [ last_time main::block#1 main::v#1 main::count#2 ] { }  ) always clobbers reg byte a 
Statement [24] (word) main::count#1 ← -- (word) main::count#2 [ last_time main::block#1 main::v#1 main::count#1 ] ( main:3 [ last_time main::block#1 main::v#1 main::count#1 ] { }  ) always clobbers reg byte a 
Statement [35] (byte*) doplasma::scrn#0 ← (byte*) doplasma::scrn#6 + (byte) $28 [ doplasma::jj#3 doplasma::scrn#0 ] ( main:3::doplasma:20 [ last_time main::block#1 main::v#1 main::count#2 doplasma::jj#3 doplasma::scrn#0 ] { }  main:3::doplasma:22 [ last_time main::block#1 main::v#1 main::count#2 doplasma::jj#3 doplasma::scrn#0 ] { }  ) always clobbers reg byte a 
Statement [37] (byte~) doplasma::$6 ← *((const byte*) xbuf + (byte) doplasma::j#3) + *((const byte*) ybuf + (byte) doplasma::jj#3) [ doplasma::jj#3 doplasma::scrn#6 doplasma::j#3 doplasma::$6 ] ( main:3::doplasma:20 [ last_time main::block#1 main::v#1 main::count#2 doplasma::jj#3 doplasma::scrn#6 doplasma::j#3 doplasma::$6 ] { }  main:3::doplasma:22 [ last_time main::block#1 main::v#1 main::count#2 doplasma::jj#3 doplasma::scrn#6 doplasma::j#3 doplasma::$6 ] { }  ) always clobbers reg byte a 
Statement [40] (byte~) doplasma::$3 ← *((const to_nomodify byte*) sinustable + (byte) doplasma::c2a#3) + *((const to_nomodify byte*) sinustable + (byte) doplasma::c2b#3) [ doplasma::scrn#13 doplasma::i#3 doplasma::c2a#3 doplasma::c2b#3 doplasma::$3 ] ( main:3::doplasma:20 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::i#3 doplasma::c2a#3 doplasma::c2b#3 doplasma::$3 ] { }  main:3::doplasma:22 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::i#3 doplasma::c2a#3 doplasma::c2b#3 doplasma::$3 ] { }  ) always clobbers reg byte a 
Statement [42] (byte) doplasma::c2a#2 ← (byte) doplasma::c2a#3 + (byte) 3 [ doplasma::scrn#13 doplasma::i#3 doplasma::c2b#3 doplasma::c2a#2 ] ( main:3::doplasma:20 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::i#3 doplasma::c2b#3 doplasma::c2a#2 ] { }  main:3::doplasma:22 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::i#3 doplasma::c2b#3 doplasma::c2a#2 ] { }  ) always clobbers reg byte a 
Statement [43] (byte) doplasma::c2b#2 ← (byte) doplasma::c2b#3 + (byte) 7 [ doplasma::scrn#13 doplasma::i#3 doplasma::c2a#2 doplasma::c2b#2 ] ( main:3::doplasma:20 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::i#3 doplasma::c2a#2 doplasma::c2b#2 ] { }  main:3::doplasma:22 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::i#3 doplasma::c2a#2 doplasma::c2b#2 ] { }  ) always clobbers reg byte a 
Statement [45] (byte~) doplasma::$1 ← *((const to_nomodify byte*) sinustable + (byte) doplasma::c1a#3) + *((const to_nomodify byte*) sinustable + (byte) doplasma::c1b#3) [ doplasma::scrn#13 doplasma::ii#3 doplasma::c1a#3 doplasma::c1b#3 doplasma::$1 ] ( main:3::doplasma:20 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::ii#3 doplasma::c1a#3 doplasma::c1b#3 doplasma::$1 ] { }  main:3::doplasma:22 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::ii#3 doplasma::c1a#3 doplasma::c1b#3 doplasma::$1 ] { }  ) always clobbers reg byte a 
Statement [47] (byte) doplasma::c1a#2 ← (byte) doplasma::c1a#3 + (byte) 4 [ doplasma::scrn#13 doplasma::ii#3 doplasma::c1b#3 doplasma::c1a#2 ] ( main:3::doplasma:20 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::ii#3 doplasma::c1b#3 doplasma::c1a#2 ] { }  main:3::doplasma:22 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::ii#3 doplasma::c1b#3 doplasma::c1a#2 ] { }  ) always clobbers reg byte a 
Statement [48] (byte) doplasma::c1b#2 ← (byte) doplasma::c1b#3 + (byte) 9 [ doplasma::scrn#13 doplasma::ii#3 doplasma::c1a#2 doplasma::c1b#2 ] ( main:3::doplasma:20 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::ii#3 doplasma::c1a#2 doplasma::c1b#2 ] { }  main:3::doplasma:22 [ last_time main::block#1 main::v#1 main::count#2 doplasma::scrn#13 doplasma::ii#3 doplasma::c1a#2 doplasma::c1b#2 ] { }  ) always clobbers reg byte a 
Statement [50] (word) Ticks#0 ← (volatile word) last_time [ last_time Ticks#0 ] ( main:3::end:17 [ last_time Ticks#0 ] { }  ) always clobbers reg byte a 
Statement [52] (volatile word) last_time ← (volatile word) last_time - (word) Ticks#0 [ last_time ] ( main:3::end:17 [ last_time ] { { Ticks#1 = print_uint::w#0 } }  ) always clobbers reg byte a 
Statement [53] (word) Ticks#1 ← (volatile word) last_time [ Ticks#1 ] ( main:3::end:17 [ Ticks#1 ] { { Ticks#1 = print_uint::w#0 } }  ) always clobbers reg byte a 
Statement [54] (word) print_uint::w#0 ← (word) Ticks#1 [ print_uint::w#0 ] ( main:3::end:17 [ print_uint::w#0 ] { { Ticks#1 = print_uint::w#0 } }  ) always clobbers reg byte a 
Statement [61] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#0 print_char_cursor#27 ] ( main:3::end:17::print_ln:57 [ print_line_cursor#0 print_char_cursor#27 ] { }  ) always clobbers reg byte a 
Statement [62] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#27) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#27 ] ( main:3::end:17::print_ln:57 [ print_line_cursor#0 print_char_cursor#27 ] { }  ) always clobbers reg byte a 
Statement [70] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 [ print_uchar::b#2 print_char_cursor#37 print_uchar::$0 ] ( main:3::end:17::print_uint:55::print_uchar:65 [ print_uint::w#0 print_uchar::b#2 print_char_cursor#37 print_uchar::$0 ] { { Ticks#1 = print_uint::w#0 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#0 = print_char::ch#2 } { print_char_cursor#26 = print_char_cursor#37 } }  main:3::end:17::print_uint:55::print_uchar:67 [ print_uchar::b#2 print_char_cursor#37 print_uchar::$0 ] { { Ticks#1 = print_uint::w#0 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#26 = print_char_cursor#37 print_char_cursor#27 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte a 
Statement [73] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f [ print_char_cursor#27 print_uchar::$2 ] ( main:3::end:17::print_uint:55::print_uchar:65 [ print_uint::w#0 print_char_cursor#27 print_uchar::$2 ] { { Ticks#1 = print_uint::w#0 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#2 } { print_char_cursor#26 = print_char_cursor#27 } }  main:3::end:17::print_uint:55::print_uchar:67 [ print_char_cursor#27 print_uchar::$2 ] { { Ticks#1 = print_uint::w#0 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#26 = print_char_cursor#37 print_char_cursor#27 } { print_char::ch#1 = print_char::ch#2 } }  ) always clobbers reg byte a 
Statement [78] *((byte*) print_char_cursor#26) ← (byte) print_char::ch#2 [ print_char_cursor#26 ] ( main:3::end:17::print_uint:55::print_uchar:65::print_char:72 [ print_uint::w#0 print_uchar::b#2 print_char_cursor#26 ] { { Ticks#1 = print_uint::w#0 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#0 = print_char::ch#2 } { print_char_cursor#26 = print_char_cursor#37 } }  main:3::end:17::print_uint:55::print_uchar:67::print_char:72 [ print_uchar::b#2 print_char_cursor#26 ] { { Ticks#1 = print_uint::w#0 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#26 = print_char_cursor#37 print_char_cursor#27 } { print_char::ch#0 = print_char::ch#2 } }  main:3::end:17::print_uint:55::print_uchar:65::print_char:75 [ print_uint::w#0 print_char_cursor#26 ] { { Ticks#1 = print_uint::w#0 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#2 } { print_char_cursor#26 = print_char_cursor#27 } }  main:3::end:17::print_uint:55::print_uchar:67::print_char:75 [ print_char_cursor#26 ] { { Ticks#1 = print_uint::w#0 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#26 = print_char_cursor#37 print_char_cursor#27 } { print_char::ch#1 = print_char::ch#2 } }  ) always clobbers reg byte y 
Statement asm { jsr$FFDE staLAST_TIME stxLAST_TIME+1  } always clobbers reg byte a reg byte x reg byte y 
Statement [85] if((word) makechar::c#3<(word) $100) goto makechar::@2 [ makechar::c#3 rand_state#14 ] ( main:3::makechar:6 [ last_time makechar::c#3 rand_state#14 ] { }  ) always clobbers reg byte a 
Statement [87] (byte~) makechar::$9 ← (byte)(word) makechar::c#3 [ makechar::c#3 rand_state#14 makechar::$9 ] ( main:3::makechar:6 [ last_time makechar::c#3 rand_state#14 makechar::$9 ] { }  ) always clobbers reg byte a 
Statement [94] (word~) makechar::$7 ← (word) makechar::c#3 << (byte) 3 [ makechar::c#3 makechar::s#1 makechar::i#3 rand_state#19 makechar::b#3 makechar::$7 ] ( main:3::makechar:6 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 rand_state#19 makechar::b#3 makechar::$7 ] { }  ) always clobbers reg byte a 
Statement [95] (word~) makechar::$8 ← (word~) makechar::$7 + (byte) makechar::i#3 [ makechar::c#3 makechar::s#1 makechar::i#3 rand_state#19 makechar::b#3 makechar::$8 ] ( main:3::makechar:6 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 rand_state#19 makechar::b#3 makechar::$8 ] { }  ) always clobbers reg byte a 
Statement [96] (byte*~) makechar::$10 ← (const nomodify byte*) CHARSET + (word~) makechar::$8 [ makechar::c#3 makechar::s#1 makechar::i#3 rand_state#19 makechar::b#3 makechar::$10 ] ( main:3::makechar:6 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 rand_state#19 makechar::b#3 makechar::$10 ] { }  ) always clobbers reg byte a 
Statement [97] *((byte*~) makechar::$10) ← (byte) makechar::b#3 [ makechar::c#3 makechar::s#1 makechar::i#3 rand_state#19 ] ( main:3::makechar:6 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 rand_state#19 ] { }  ) always clobbers reg byte a reg byte y 
Statement [101] (word) rand::return#2 ← (word) rand::return#0 [ makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#12 rand::return#2 ] ( main:3::makechar:6 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#12 rand::return#2 ] { { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Statement [102] (word~) makechar::$3 ← (word) rand::return#2 [ makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#12 makechar::$3 ] ( main:3::makechar:6 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#12 makechar::$3 ] { }  ) always clobbers reg byte a 
Statement [103] (byte~) makechar::$4 ← (word~) makechar::$3 & (byte) $ff [ makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#12 makechar::$4 ] ( main:3::makechar:6 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#12 makechar::$4 ] { }  ) always clobbers reg byte a 
Statement [105] (byte) makechar::b#2 ← (byte) makechar::b#3 | *((const to_nomodify byte*) bittab + (byte) makechar::ii#3) [ makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 rand_state#12 makechar::b#2 ] ( main:3::makechar:6 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 rand_state#12 makechar::b#2 ] { }  ) always clobbers reg byte a 
Statement [108] (word~) rand::$0 ← (word) rand_state#19 << (byte) 7 [ rand_state#19 rand::$0 ] ( main:3::makechar:6::rand:100 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#19 rand::$0 ] { { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Statement [109] (word) rand_state#0 ← (word) rand_state#19 ^ (word~) rand::$0 [ rand_state#0 ] ( main:3::makechar:6::rand:100 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#0 ] { { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Statement [110] (word~) rand::$1 ← (word) rand_state#0 >> (byte) 9 [ rand_state#0 rand::$1 ] ( main:3::makechar:6::rand:100 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#0 rand::$1 ] { { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Statement [111] (word) rand_state#1 ← (word) rand_state#0 ^ (word~) rand::$1 [ rand_state#1 ] ( main:3::makechar:6::rand:100 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#1 ] { { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Statement [112] (word~) rand::$2 ← (word) rand_state#1 << (byte) 8 [ rand_state#1 rand::$2 ] ( main:3::makechar:6::rand:100 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#1 rand::$2 ] { { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Statement [113] (word) rand_state#12 ← (word) rand_state#1 ^ (word~) rand::$2 [ rand_state#12 ] ( main:3::makechar:6::rand:100 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#12 ] { { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Statement [114] (word) rand::return#0 ← (word) rand_state#12 [ rand_state#12 rand::return#0 ] ( main:3::makechar:6::rand:100 [ last_time makechar::c#3 makechar::s#1 makechar::i#3 makechar::ii#3 makechar::b#3 rand_state#12 rand::return#0 ] { { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::count#2 main::count#1 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ doplasma::ii#3 doplasma::ii#2 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ doplasma::c1a#3 doplasma::c1a#2 ] : zp[1]:5 , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ doplasma::c1b#3 doplasma::c1b#2 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ doplasma::i#3 doplasma::i#2 ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ doplasma::c2a#3 doplasma::c2a#2 ] : zp[1]:8 , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ doplasma::c2b#3 doplasma::c2b#2 ] : zp[1]:9 , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ doplasma::jj#3 doplasma::jj#2 ] : zp[1]:10 , reg byte x , reg byte y , 
Potential registers zp[2]:11 [ doplasma::scrn#6 doplasma::scrn#0 doplasma::scrn#13 ] : zp[2]:11 , 
Potential registers zp[1]:13 [ doplasma::j#3 doplasma::j#2 ] : zp[1]:13 , reg byte x , reg byte y , 
Potential registers zp[2]:14 [ print_line_cursor#9 print_line_cursor#0 ] : zp[2]:14 , 
Potential registers zp[1]:16 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] : zp[1]:16 , reg byte x , 
Potential registers zp[1]:17 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] : zp[1]:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:18 [ print_char_cursor#26 print_char_cursor#37 print_char_cursor#27 ] : zp[2]:18 , 
Potential registers zp[2]:20 [ makechar::c#3 makechar::c#2 ] : zp[2]:20 , 
Potential registers zp[2]:22 [ rand_state#14 rand_state#25 rand_state#19 rand_state#12 ] : zp[2]:22 , 
Potential registers zp[1]:24 [ makechar::i#3 makechar::i#2 ] : zp[1]:24 , reg byte x , 
Potential registers zp[1]:25 [ makechar::ii#3 makechar::ii#2 ] : zp[1]:25 , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ makechar::b#3 makechar::b#7 makechar::b#2 ] : zp[1]:26 , reg byte x , reg byte y , 
Potential registers zp[2]:27 [ last_time ] : zp[2]:27 , 
Potential registers zp[1]:29 [ main::block#1 ] : zp[1]:29 , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ main::tmp#1 ] : zp[1]:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:31 [ main::v#1 ] : zp[1]:31 , reg byte x , reg byte y , 
Potential registers zp[1]:32 [ doplasma::$6 ] : zp[1]:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ doplasma::$3 ] : zp[1]:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ doplasma::$1 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:35 [ Ticks#0 ] : zp[2]:35 , 
Potential registers zp[2]:37 [ Ticks#1 ] : zp[2]:37 , 
Potential registers zp[2]:39 [ print_uint::w#0 ] : zp[2]:39 , 
Potential registers zp[1]:41 [ print_uchar::$0 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:42 [ print_uchar::$2 ] : zp[1]:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:43 [ makechar::$9 ] : zp[1]:43 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:44 [ makechar::s#1 ] : zp[1]:44 , reg byte x , 
Potential registers zp[2]:45 [ makechar::$7 ] : zp[2]:45 , 
Potential registers zp[2]:47 [ makechar::$8 ] : zp[2]:47 , 
Potential registers zp[2]:49 [ makechar::$10 ] : zp[2]:49 , 
Potential registers zp[2]:51 [ rand::return#2 ] : zp[2]:51 , 
Potential registers zp[2]:53 [ makechar::$3 ] : zp[2]:53 , 
Potential registers zp[1]:55 [ makechar::$4 ] : zp[1]:55 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:56 [ rand::$0 ] : zp[2]:56 , 
Potential registers zp[2]:58 [ rand_state#0 ] : zp[2]:58 , 
Potential registers zp[2]:60 [ rand::$1 ] : zp[2]:60 , 
Potential registers zp[2]:62 [ rand_state#1 ] : zp[2]:62 , 
Potential registers zp[2]:64 [ rand::$2 ] : zp[2]:64 , 
Potential registers zp[2]:66 [ rand::return#0 ] : zp[2]:66 , 

REGISTER UPLIFT SCOPES
Uplift Scope [doplasma] 3,250,003.25: zp[1]:13 [ doplasma::j#3 doplasma::j#2 ] 2,000,002: zp[1]:32 [ doplasma::$6 ] 362,502.5: zp[1]:10 [ doplasma::jj#3 doplasma::jj#2 ] 292,382.59: zp[2]:11 [ doplasma::scrn#6 doplasma::scrn#0 doplasma::scrn#13 ] 266,669.33: zp[1]:4 [ doplasma::ii#3 doplasma::ii#2 ] 266,669.33: zp[1]:7 [ doplasma::i#3 doplasma::i#2 ] 200,002: zp[1]:33 [ doplasma::$3 ] 200,002: zp[1]:34 [ doplasma::$1 ] 160,001.6: zp[1]:6 [ doplasma::c1b#3 doplasma::c1b#2 ] 160,001.6: zp[1]:9 [ doplasma::c2b#3 doplasma::c2b#2 ] 141,668.08: zp[1]:5 [ doplasma::c1a#3 doplasma::c1a#2 ] 141,668.08: zp[1]:8 [ doplasma::c2a#3 doplasma::c2a#2 ] 
Uplift Scope [rand] 2,000,002: zp[2]:56 [ rand::$0 ] 2,000,002: zp[2]:60 [ rand::$1 ] 2,000,002: zp[2]:64 [ rand::$2 ] 366,667.33: zp[2]:66 [ rand::return#0 ] 200,002: zp[2]:51 [ rand::return#2 ] 
Uplift Scope [] 1,500,001.5: zp[2]:58 [ rand_state#0 ] 1,500,001.5: zp[2]:62 [ rand_state#1 ] 434,300.64: zp[2]:22 [ rand_state#14 rand_state#25 rand_state#19 rand_state#12 ] 120,787.22: zp[2]:18 [ print_char_cursor#26 print_char_cursor#37 print_char_cursor#27 ] 35,003.5: zp[2]:14 [ print_line_cursor#9 print_line_cursor#0 ] 202: zp[2]:37 [ Ticks#1 ] 101: zp[2]:35 [ Ticks#0 ] 17.65: zp[2]:27 [ last_time ] 
Uplift Scope [makechar] 378,185.68: zp[1]:26 [ makechar::b#3 makechar::b#7 makechar::b#2 ] 240,002.4: zp[1]:25 [ makechar::ii#3 makechar::ii#2 ] 200,002: zp[2]:53 [ makechar::$3 ] 200,002: zp[1]:55 [ makechar::$4 ] 22,355.18: zp[1]:24 [ makechar::i#3 makechar::i#2 ] 20,002: zp[2]:45 [ makechar::$7 ] 20,002: zp[2]:47 [ makechar::$8 ] 20,002: zp[2]:49 [ makechar::$10 ] 5,315.89: zp[1]:44 [ makechar::s#1 ] 2,593.09: zp[2]:20 [ makechar::c#3 makechar::c#2 ] 2,002: zp[1]:43 [ makechar::$9 ] 
Uplift Scope [print_char] 160,007: zp[1]:17 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplift Scope [print_uchar] 20,002: zp[1]:41 [ print_uchar::$0 ] 20,002: zp[1]:42 [ print_uchar::$2 ] 9,505: zp[1]:16 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Uplift Scope [print_uint] 701: zp[2]:39 [ print_uint::w#0 ] 
Uplift Scope [main] 245.29: zp[2]:2 [ main::count#2 main::count#1 ] 22: zp[1]:30 [ main::tmp#1 ] 2.54: zp[1]:29 [ main::block#1 ] 2.44: zp[1]:31 [ main::v#1 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [start] 
Uplift Scope [end] 
Uplift Scope [__start] 

Uplifting [doplasma] best 171175 combination reg byte y [ doplasma::j#3 doplasma::j#2 ] reg byte a [ doplasma::$6 ] reg byte x [ doplasma::jj#3 doplasma::jj#2 ] zp[2]:11 [ doplasma::scrn#6 doplasma::scrn#0 doplasma::scrn#13 ] zp[1]:4 [ doplasma::ii#3 doplasma::ii#2 ] zp[1]:7 [ doplasma::i#3 doplasma::i#2 ] zp[1]:33 [ doplasma::$3 ] zp[1]:34 [ doplasma::$1 ] zp[1]:6 [ doplasma::c1b#3 doplasma::c1b#2 ] zp[1]:9 [ doplasma::c2b#3 doplasma::c2b#2 ] zp[1]:5 [ doplasma::c1a#3 doplasma::c1a#2 ] zp[1]:8 [ doplasma::c2a#3 doplasma::c2a#2 ] 
Limited combination testing to 100 combinations of 419904 possible.
Uplifting [rand] best 171175 combination zp[2]:56 [ rand::$0 ] zp[2]:60 [ rand::$1 ] zp[2]:64 [ rand::$2 ] zp[2]:66 [ rand::return#0 ] zp[2]:51 [ rand::return#2 ] 
Uplifting [] best 171175 combination zp[2]:58 [ rand_state#0 ] zp[2]:62 [ rand_state#1 ] zp[2]:22 [ rand_state#14 rand_state#25 rand_state#19 rand_state#12 ] zp[2]:18 [ print_char_cursor#26 print_char_cursor#37 print_char_cursor#27 ] zp[2]:14 [ print_line_cursor#9 print_line_cursor#0 ] zp[2]:37 [ Ticks#1 ] zp[2]:35 [ Ticks#0 ] zp[2]:27 [ last_time ] 
Uplifting [makechar] best 154075 combination reg byte y [ makechar::b#3 makechar::b#7 makechar::b#2 ] reg byte x [ makechar::ii#3 makechar::ii#2 ] zp[2]:53 [ makechar::$3 ] zp[1]:55 [ makechar::$4 ] zp[1]:24 [ makechar::i#3 makechar::i#2 ] zp[2]:45 [ makechar::$7 ] zp[2]:47 [ makechar::$8 ] zp[2]:49 [ makechar::$10 ] zp[1]:44 [ makechar::s#1 ] zp[2]:20 [ makechar::c#3 makechar::c#2 ] zp[1]:43 [ makechar::$9 ] 
Limited combination testing to 100 combinations of 576 possible.
Uplifting [print_char] best 154066 combination reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplifting [print_uchar] best 154048 combination reg byte a [ print_uchar::$0 ] reg byte x [ print_uchar::$2 ] reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Uplifting [print_uint] best 154048 combination zp[2]:39 [ print_uint::w#0 ] 
Uplifting [main] best 154042 combination zp[2]:2 [ main::count#2 main::count#1 ] reg byte a [ main::tmp#1 ] zp[1]:29 [ main::block#1 ] zp[1]:31 [ main::v#1 ] 
Uplifting [RADIX] best 154042 combination 
Uplifting [print_ln] best 154042 combination 
Uplifting [MOS6526_CIA] best 154042 combination 
Uplifting [MOS6569_VICII] best 154042 combination 
Uplifting [MOS6581_SID] best 154042 combination 
Uplifting [start] best 154042 combination 
Uplifting [end] best 154042 combination 
Uplifting [__start] best 154042 combination 
Attempting to uplift remaining variables inzp[1]:4 [ doplasma::ii#3 doplasma::ii#2 ]
Uplifting [doplasma] best 154042 combination zp[1]:4 [ doplasma::ii#3 doplasma::ii#2 ] 
Attempting to uplift remaining variables inzp[1]:7 [ doplasma::i#3 doplasma::i#2 ]
Uplifting [doplasma] best 154042 combination zp[1]:7 [ doplasma::i#3 doplasma::i#2 ] 
Attempting to uplift remaining variables inzp[1]:33 [ doplasma::$3 ]
Uplifting [doplasma] best 153442 combination reg byte a [ doplasma::$3 ] 
Attempting to uplift remaining variables inzp[1]:34 [ doplasma::$1 ]
Uplifting [doplasma] best 152842 combination reg byte a [ doplasma::$1 ] 
Attempting to uplift remaining variables inzp[1]:55 [ makechar::$4 ]
Uplifting [makechar] best 152842 combination zp[1]:55 [ makechar::$4 ] 
Attempting to uplift remaining variables inzp[1]:6 [ doplasma::c1b#3 doplasma::c1b#2 ]
Uplifting [doplasma] best 152842 combination zp[1]:6 [ doplasma::c1b#3 doplasma::c1b#2 ] 
Attempting to uplift remaining variables inzp[1]:9 [ doplasma::c2b#3 doplasma::c2b#2 ]
Uplifting [doplasma] best 152842 combination zp[1]:9 [ doplasma::c2b#3 doplasma::c2b#2 ] 
Attempting to uplift remaining variables inzp[1]:5 [ doplasma::c1a#3 doplasma::c1a#2 ]
Uplifting [doplasma] best 152842 combination zp[1]:5 [ doplasma::c1a#3 doplasma::c1a#2 ] 
Attempting to uplift remaining variables inzp[1]:8 [ doplasma::c2a#3 doplasma::c2a#2 ]
Uplifting [doplasma] best 152842 combination zp[1]:8 [ doplasma::c2a#3 doplasma::c2a#2 ] 
Attempting to uplift remaining variables inzp[1]:24 [ makechar::i#3 makechar::i#2 ]
Uplifting [makechar] best 152842 combination zp[1]:24 [ makechar::i#3 makechar::i#2 ] 
Attempting to uplift remaining variables inzp[1]:44 [ makechar::s#1 ]
Uplifting [makechar] best 152842 combination zp[1]:44 [ makechar::s#1 ] 
Attempting to uplift remaining variables inzp[1]:43 [ makechar::$9 ]
Uplifting [makechar] best 152802 combination reg byte a [ makechar::$9 ] 
Attempting to uplift remaining variables inzp[1]:29 [ main::block#1 ]
Uplifting [main] best 152802 combination zp[1]:29 [ main::block#1 ] 
Attempting to uplift remaining variables inzp[1]:31 [ main::v#1 ]
Uplifting [main] best 152802 combination zp[1]:31 [ main::v#1 ] 
Coalescing zero page register [ zp[2]:22 [ rand_state#14 rand_state#25 rand_state#19 rand_state#12 ] ] with [ zp[2]:58 [ rand_state#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ rand_state#14 rand_state#25 rand_state#19 rand_state#12 rand_state#0 ] ] with [ zp[2]:62 [ rand_state#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:37 [ Ticks#1 ] ] with [ zp[2]:39 [ print_uint::w#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:45 [ makechar::$7 ] ] with [ zp[2]:47 [ makechar::$8 ] ] - score: 1
Coalescing zero page register [ zp[2]:51 [ rand::return#2 ] ] with [ zp[2]:53 [ makechar::$3 ] ] - score: 1
Coalescing zero page register [ zp[2]:51 [ rand::return#2 makechar::$3 ] ] with [ zp[2]:66 [ rand::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:45 [ makechar::$7 makechar::$8 ] ] with [ zp[2]:49 [ makechar::$10 ] ] - score: 1
Coalescing zero page register [ zp[2]:14 [ print_line_cursor#9 print_line_cursor#0 ] ] with [ zp[2]:2 [ main::count#2 main::count#1 ] ]
Coalescing zero page register [ zp[2]:18 [ print_char_cursor#26 print_char_cursor#37 print_char_cursor#27 ] ] with [ zp[2]:11 [ doplasma::scrn#6 doplasma::scrn#0 doplasma::scrn#13 ] ]
Coalescing zero page register [ zp[1]:24 [ makechar::i#3 makechar::i#2 ] ] with [ zp[1]:4 [ doplasma::ii#3 doplasma::ii#2 ] ]
Coalescing zero page register [ zp[2]:35 [ Ticks#0 ] ] with [ zp[2]:20 [ makechar::c#3 makechar::c#2 ] ]
Coalescing zero page register [ zp[1]:44 [ makechar::s#1 ] ] with [ zp[1]:5 [ doplasma::c1a#3 doplasma::c1a#2 ] ]
Coalescing zero page register [ zp[2]:45 [ makechar::$7 makechar::$8 makechar::$10 ] ] with [ zp[2]:37 [ Ticks#1 print_uint::w#0 ] ]
Coalescing zero page register [ zp[1]:55 [ makechar::$4 ] ] with [ zp[1]:6 [ doplasma::c1b#3 doplasma::c1b#2 ] ]
Coalescing zero page register [ zp[2]:51 [ rand::return#2 makechar::$3 rand::return#0 ] ] with [ zp[2]:18 [ print_char_cursor#26 print_char_cursor#37 print_char_cursor#27 doplasma::scrn#6 doplasma::scrn#0 doplasma::scrn#13 ] ]
Allocated (was zp[1]:7) zp[1]:2 [ doplasma::i#3 doplasma::i#2 ]
Allocated (was zp[1]:8) zp[1]:3 [ doplasma::c2a#3 doplasma::c2a#2 ]
Allocated (was zp[1]:9) zp[1]:4 [ doplasma::c2b#3 doplasma::c2b#2 ]
Allocated (was zp[2]:14) zp[2]:5 [ print_line_cursor#9 print_line_cursor#0 main::count#2 main::count#1 ]
Allocated (was zp[2]:22) zp[2]:7 [ rand_state#14 rand_state#25 rand_state#19 rand_state#12 rand_state#0 rand_state#1 ]
Allocated (was zp[1]:24) zp[1]:9 [ makechar::i#3 makechar::i#2 doplasma::ii#3 doplasma::ii#2 ]
Allocated (was zp[2]:27) zp[2]:10 [ last_time ]
Allocated (was zp[1]:29) zp[1]:12 [ main::block#1 ]
Allocated (was zp[1]:31) zp[1]:13 [ main::v#1 ]
Allocated (was zp[2]:35) zp[2]:14 [ Ticks#0 makechar::c#3 makechar::c#2 ]
Allocated (was zp[1]:44) zp[1]:16 [ makechar::s#1 doplasma::c1a#3 doplasma::c1a#2 ]
Allocated (was zp[2]:45) zp[2]:17 [ makechar::$7 makechar::$8 makechar::$10 Ticks#1 print_uint::w#0 ]
Allocated (was zp[2]:51) zp[2]:19 [ rand::return#2 makechar::$3 rand::return#0 print_char_cursor#26 print_char_cursor#37 print_char_cursor#27 doplasma::scrn#6 doplasma::scrn#0 doplasma::scrn#13 ]
Allocated (was zp[1]:55) zp[1]:21 [ makechar::$4 doplasma::c1b#3 doplasma::c1b#2 ]
Allocated (was zp[2]:56) zp[2]:22 [ rand::$0 ]
Allocated (was zp[2]:60) zp[2]:24 [ rand::$1 ]
Allocated (was zp[2]:64) zp[2]:26 [ rand::$2 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .const PAGE1 = SCREEN1>>6&$f0|CHARSET>>$a&$e
  .const PAGE2 = SCREEN2>>6&$f0|CHARSET>>$a&$e
  .label VIC_MEMORY = $d018
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  .label SCREEN1 = $e000
  .label SCREEN2 = $e400
  .label CHARSET = $e800
  .label print_screen = $400
  .label last_time = $a
  // The random state variable
  .label rand_state = 7
  .label print_line_cursor = 5
  .label Ticks = $e
  .label Ticks_1 = $11
  .label print_char_cursor = $13
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] (volatile word) last_time ← (word) 0 -- vwuz1=vwuc1 
    lda #<0
    sta.z last_time
    lda #>0
    sta.z last_time+1
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [3] call main 
    // [5] phi from __start::@1 to main [phi:__start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    .label block = $c
    .label v = $d
    .label count = 5
    // [6] call makechar 
    // [83] phi from main to makechar [phi:main->makechar]
  makechar_from_main:
    jsr makechar
    // [7] phi from main to main::@4 [phi:main->main::@4]
  __b4_from_main:
    jmp __b4
    // main::@4
  __b4:
    // [8] call start 
    jsr start
    jmp __b5
    // main::@5
  __b5:
    // [9] (byte) main::block#1 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) -- vbuz1=_deref_pbuc1 
    lda CIA2
    sta.z block
    // [10] (byte) main::tmp#1 ← (byte) main::block#1 & (byte) $fc -- vbuaa=vbuz1_band_vbuc1 
    lda #$fc
    and.z block
    // [11] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) main::tmp#1 -- _deref_pbuc1=vbuaa 
    sta CIA2
    // [12] (byte) main::v#1 ← *((const nomodify byte*) VIC_MEMORY) -- vbuz1=_deref_pbuc1 
    lda VIC_MEMORY
    sta.z v
    // [13] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [13] phi (word) main::count#2 = (word) $1f4 [phi:main::@5->main::@1#0] -- vwuz1=vwuc1 
    lda #<$1f4
    sta.z count
    lda #>$1f4
    sta.z count+1
    jmp __b1
  /* Run the demo until a key was hit */
    // main::@1
  __b1:
    // [14] if((byte) 0!=(word) main::count#2) goto main::@2 -- vwuc1_neq_vwuz1_then_la1 
    lda.z count+1
    cmp #>0
    bne __b2_from___b1
    lda.z count
    cmp #<0
    bne __b2_from___b1
    jmp __b3
    // main::@3
  __b3:
    // [15] *((const nomodify byte*) VIC_MEMORY) ← (byte) main::v#1 -- _deref_pbuc1=vbuz1 
    lda.z v
    sta VIC_MEMORY
    // [16] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) main::block#1 -- _deref_pbuc1=vbuz1 
    lda.z block
    sta CIA2
    // [17] call end 
    /* Reset screen colors */
    jsr end
    jmp __breturn
    // main::@return
  __breturn:
    // [18] return 
    rts
    // [19] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [20] call doplasma 
  /* Build page 1, then make it visible */
    // [25] phi from main::@2 to doplasma [phi:main::@2->doplasma]
  doplasma_from___b2:
    // [25] phi (byte*) doplasma::scrn#13 = (const nomodify byte*) SCREEN1 [phi:main::@2->doplasma#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta.z doplasma.scrn
    lda #>SCREEN1
    sta.z doplasma.scrn+1
    jsr doplasma
    jmp __b6
    // main::@6
  __b6:
    // [21] *((const nomodify byte*) VIC_MEMORY) ← (const nomodify byte) PAGE1 -- _deref_pbuc1=vbuc2 
    lda #PAGE1
    sta VIC_MEMORY
    // [22] call doplasma 
  /* Build page 2, then make it visible */
    // [25] phi from main::@6 to doplasma [phi:main::@6->doplasma]
  doplasma_from___b6:
    // [25] phi (byte*) doplasma::scrn#13 = (const nomodify byte*) SCREEN2 [phi:main::@6->doplasma#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta.z doplasma.scrn
    lda #>SCREEN2
    sta.z doplasma.scrn+1
    jsr doplasma
    jmp __b7
    // main::@7
  __b7:
    // [23] *((const nomodify byte*) VIC_MEMORY) ← (const nomodify byte) PAGE2 -- _deref_pbuc1=vbuc2 
    lda #PAGE2
    sta VIC_MEMORY
    // [24] (word) main::count#1 ← -- (word) main::count#2 -- vwuz1=_dec_vwuz1 
    lda.z count
    bne !+
    dec.z count+1
  !:
    dec.z count
    // [13] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  __b1_from___b7:
    // [13] phi (word) main::count#2 = (word) main::count#1 [phi:main::@7->main::@1#0] -- register_copy 
    jmp __b1
}
  // doplasma
// doplasma(byte* zp($13) scrn)
doplasma: {
    .const c2A = 0
    .const c2B = 0
    .label c1a = $10
    .label c1b = $15
    .label ii = 9
    .label c2a = 3
    .label c2b = 4
    .label i = 2
    .label scrn = $13
    // [26] phi from doplasma to doplasma::@1 [phi:doplasma->doplasma::@1]
  __b1_from_doplasma:
    // [26] phi (byte) doplasma::c1b#3 = (byte) 0 [phi:doplasma->doplasma::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c1b
    // [26] phi (byte) doplasma::c1a#3 = (byte) 0 [phi:doplasma->doplasma::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z c1a
    // [26] phi (byte) doplasma::ii#3 = (byte) 0 [phi:doplasma->doplasma::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z ii
    jmp __b1
    // doplasma::@1
  __b1:
    // [27] if((byte) doplasma::ii#3<(byte) $19) goto doplasma::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z ii
    cmp #$19
    bcc __b2
    // [28] phi from doplasma::@1 to doplasma::@3 [phi:doplasma::@1->doplasma::@3]
  __b3_from___b1:
    // [28] phi (byte) doplasma::c2b#3 = (const byte) doplasma::c2B#0 [phi:doplasma::@1->doplasma::@3#0] -- vbuz1=vbuc1 
    lda #c2B
    sta.z c2b
    // [28] phi (byte) doplasma::c2a#3 = (const byte) doplasma::c2A#0 [phi:doplasma::@1->doplasma::@3#1] -- vbuz1=vbuc1 
    lda #c2A
    sta.z c2a
    // [28] phi (byte) doplasma::i#3 = (byte) 0 [phi:doplasma::@1->doplasma::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b3
    // doplasma::@3
  __b3:
    // [29] if((byte) doplasma::i#3<(byte) $28) goto doplasma::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #$28
    bcc __b4
    // [30] phi from doplasma::@3 to doplasma::@5 [phi:doplasma::@3->doplasma::@5]
  __b5_from___b3:
    // [30] phi (byte*) doplasma::scrn#6 = (byte*) doplasma::scrn#13 [phi:doplasma::@3->doplasma::@5#0] -- register_copy 
    // [30] phi (byte) doplasma::jj#3 = (byte) 0 [phi:doplasma::@3->doplasma::@5#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b5
    // doplasma::@5
  __b5:
    // [31] if((byte) doplasma::jj#3<(byte) $19) goto doplasma::@6 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b6_from___b5
    jmp __breturn
    // doplasma::@return
  __breturn:
    // [32] return 
    rts
    // [33] phi from doplasma::@5 to doplasma::@6 [phi:doplasma::@5->doplasma::@6]
  __b6_from___b5:
    // [33] phi (byte) doplasma::j#3 = (byte) 0 [phi:doplasma::@5->doplasma::@6#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b6
    // doplasma::@6
  __b6:
    // [34] if((byte) doplasma::j#3<(byte) $28) goto doplasma::@7 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b7
    jmp __b8
    // doplasma::@8
  __b8:
    // [35] (byte*) doplasma::scrn#0 ← (byte*) doplasma::scrn#6 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z scrn
    sta.z scrn
    bcc !+
    inc.z scrn+1
  !:
    // [36] (byte) doplasma::jj#2 ← ++ (byte) doplasma::jj#3 -- vbuxx=_inc_vbuxx 
    inx
    // [30] phi from doplasma::@8 to doplasma::@5 [phi:doplasma::@8->doplasma::@5]
  __b5_from___b8:
    // [30] phi (byte*) doplasma::scrn#6 = (byte*) doplasma::scrn#0 [phi:doplasma::@8->doplasma::@5#0] -- register_copy 
    // [30] phi (byte) doplasma::jj#3 = (byte) doplasma::jj#2 [phi:doplasma::@8->doplasma::@5#1] -- register_copy 
    jmp __b5
    // doplasma::@7
  __b7:
    // [37] (byte~) doplasma::$6 ← *((const byte*) xbuf + (byte) doplasma::j#3) + *((const byte*) ybuf + (byte) doplasma::jj#3) -- vbuaa=pbuc1_derefidx_vbuyy_plus_pbuc2_derefidx_vbuxx 
    lda xbuf,y
    clc
    adc ybuf,x
    // [38] *((byte*) doplasma::scrn#6 + (byte) doplasma::j#3) ← (byte~) doplasma::$6 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (scrn),y
    // [39] (byte) doplasma::j#2 ← ++ (byte) doplasma::j#3 -- vbuyy=_inc_vbuyy 
    iny
    // [33] phi from doplasma::@7 to doplasma::@6 [phi:doplasma::@7->doplasma::@6]
  __b6_from___b7:
    // [33] phi (byte) doplasma::j#3 = (byte) doplasma::j#2 [phi:doplasma::@7->doplasma::@6#0] -- register_copy 
    jmp __b6
    // doplasma::@4
  __b4:
    // [40] (byte~) doplasma::$3 ← *((const to_nomodify byte*) sinustable + (byte) doplasma::c2a#3) + *((const to_nomodify byte*) sinustable + (byte) doplasma::c2b#3) -- vbuaa=pbuc1_derefidx_vbuz1_plus_pbuc1_derefidx_vbuz2 
    ldy.z c2a
    lda sinustable,y
    ldy.z c2b
    clc
    adc sinustable,y
    // [41] *((const byte*) xbuf + (byte) doplasma::i#3) ← (byte~) doplasma::$3 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z i
    sta xbuf,y
    // [42] (byte) doplasma::c2a#2 ← (byte) doplasma::c2a#3 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c2a
    axs #-[3]
    stx.z c2a
    // [43] (byte) doplasma::c2b#2 ← (byte) doplasma::c2b#3 + (byte) 7 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c2b
    axs #-[7]
    stx.z c2b
    // [44] (byte) doplasma::i#2 ← ++ (byte) doplasma::i#3 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [28] phi from doplasma::@4 to doplasma::@3 [phi:doplasma::@4->doplasma::@3]
  __b3_from___b4:
    // [28] phi (byte) doplasma::c2b#3 = (byte) doplasma::c2b#2 [phi:doplasma::@4->doplasma::@3#0] -- register_copy 
    // [28] phi (byte) doplasma::c2a#3 = (byte) doplasma::c2a#2 [phi:doplasma::@4->doplasma::@3#1] -- register_copy 
    // [28] phi (byte) doplasma::i#3 = (byte) doplasma::i#2 [phi:doplasma::@4->doplasma::@3#2] -- register_copy 
    jmp __b3
    // doplasma::@2
  __b2:
    // [45] (byte~) doplasma::$1 ← *((const to_nomodify byte*) sinustable + (byte) doplasma::c1a#3) + *((const to_nomodify byte*) sinustable + (byte) doplasma::c1b#3) -- vbuaa=pbuc1_derefidx_vbuz1_plus_pbuc1_derefidx_vbuz2 
    ldy.z c1a
    lda sinustable,y
    ldy.z c1b
    clc
    adc sinustable,y
    // [46] *((const byte*) ybuf + (byte) doplasma::ii#3) ← (byte~) doplasma::$1 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z ii
    sta ybuf,y
    // [47] (byte) doplasma::c1a#2 ← (byte) doplasma::c1a#3 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c1a
    axs #-[4]
    stx.z c1a
    // [48] (byte) doplasma::c1b#2 ← (byte) doplasma::c1b#3 + (byte) 9 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c1b
    axs #-[9]
    stx.z c1b
    // [49] (byte) doplasma::ii#2 ← ++ (byte) doplasma::ii#3 -- vbuz1=_inc_vbuz1 
    inc.z ii
    // [26] phi from doplasma::@2 to doplasma::@1 [phi:doplasma::@2->doplasma::@1]
  __b1_from___b2:
    // [26] phi (byte) doplasma::c1b#3 = (byte) doplasma::c1b#2 [phi:doplasma::@2->doplasma::@1#0] -- register_copy 
    // [26] phi (byte) doplasma::c1a#3 = (byte) doplasma::c1a#2 [phi:doplasma::@2->doplasma::@1#1] -- register_copy 
    // [26] phi (byte) doplasma::ii#3 = (byte) doplasma::ii#2 [phi:doplasma::@2->doplasma::@1#2] -- register_copy 
    jmp __b1
}
  // end
end: {
    // [50] (word) Ticks#0 ← (volatile word) last_time -- vwuz1=vwuz2 
    lda.z last_time
    sta.z Ticks
    lda.z last_time+1
    sta.z Ticks+1
    // [51] call start 
    jsr start
    jmp __b1
    // end::@1
  __b1:
    // [52] (volatile word) last_time ← (volatile word) last_time - (word) Ticks#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z last_time
    sec
    sbc.z Ticks
    sta.z last_time
    lda.z last_time+1
    sbc.z Ticks+1
    sta.z last_time+1
    // [53] (word) Ticks#1 ← (volatile word) last_time -- vwuz1=vwuz2 
    lda.z last_time
    sta.z Ticks_1
    lda.z last_time+1
    sta.z Ticks_1+1
    // [54] (word) print_uint::w#0 ← (word) Ticks#1
    // [55] call print_uint 
    jsr print_uint
    // [56] phi from end::@1 to end::@2 [phi:end::@1->end::@2]
  __b2_from___b1:
    jmp __b2
    // end::@2
  __b2:
    // [57] call print_ln 
    // [59] phi from end::@2 to print_ln [phi:end::@2->print_ln]
  print_ln_from___b2:
    jsr print_ln
    jmp __breturn
    // end::@return
  __breturn:
    // [58] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [60] phi from print_ln to print_ln::@1 [phi:print_ln->print_ln::@1]
  __b1_from_print_ln:
    // [60] phi (byte*) print_line_cursor#9 = (const byte*) print_screen#0 [phi:print_ln->print_ln::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    jmp __b1
    // [60] phi from print_ln::@1 to print_ln::@1 [phi:print_ln::@1->print_ln::@1]
  __b1_from___b1:
    // [60] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#0 [phi:print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [61] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [62] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#27) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [63] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp($11) w)
print_uint: {
    .label w = $11
    // [64] (byte) print_uchar::b#0 ← > (word) print_uint::w#0 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [65] call print_uchar 
    // [69] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [69] phi (byte*) print_char_cursor#37 = (const byte*) print_screen#0 [phi:print_uint->print_uchar#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [69] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [66] (byte) print_uchar::b#1 ← < (word) print_uint::w#0 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [67] call print_uchar 
    // [69] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [69] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#27 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [69] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [68] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // [70] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [71] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [72] call print_char 
  // Table of hexadecimal digits
    // [77] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [77] phi (byte*) print_char_cursor#26 = (byte*) print_char_cursor#37 [phi:print_uchar->print_char#0] -- register_copy 
    // [77] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [73] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [74] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [75] call print_char 
    // [77] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [77] phi (byte*) print_char_cursor#26 = (byte*) print_char_cursor#27 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [77] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [76] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [78] *((byte*) print_char_cursor#26) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [79] (byte*) print_char_cursor#27 ← ++ (byte*) print_char_cursor#26 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [80] return 
    rts
}
  // start
start: {
    .label LAST_TIME = last_time
    // asm { jsr$FFDE staLAST_TIME stxLAST_TIME+1  }
    jsr $ffde
    sta LAST_TIME
    stx LAST_TIME+1
    jmp __breturn
    // start::@return
  __breturn:
    // [82] return 
    rts
}
  // makechar
makechar: {
    .label __3 = $13
    .label __4 = $15
    .label __7 = $11
    .label __8 = $11
    .label s = $10
    .label c = $e
    .label i = 9
    .label __10 = $11
    // [84] phi from makechar to makechar::@1 [phi:makechar->makechar::@1]
  __b1_from_makechar:
    // [84] phi (word) rand_state#14 = (word) 1 [phi:makechar->makechar::@1#0] -- vwuz1=vwuc1 
    lda #<1
    sta.z rand_state
    lda #>1
    sta.z rand_state+1
    // [84] phi (word) makechar::c#3 = (byte) 0 [phi:makechar->makechar::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z c
    lda #>0
    sta.z c+1
    jmp __b1
    // makechar::@1
  __b1:
    // [85] if((word) makechar::c#3<(word) $100) goto makechar::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z c+1
    cmp #>$100
    bcc __b2
    bne !+
    lda.z c
    cmp #<$100
    bcc __b2
  !:
    jmp __breturn
    // makechar::@return
  __breturn:
    // [86] return 
    rts
    // makechar::@2
  __b2:
    // [87] (byte~) makechar::$9 ← (byte)(word) makechar::c#3 -- vbuaa=_byte_vwuz1 
    lda.z c
    // [88] (byte) makechar::s#1 ← *((const to_nomodify byte*) sinustable + (byte~) makechar::$9) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda sinustable,y
    sta.z s
    // [89] phi from makechar::@2 to makechar::@3 [phi:makechar::@2->makechar::@3]
  __b3_from___b2:
    // [89] phi (word) rand_state#25 = (word) rand_state#14 [phi:makechar::@2->makechar::@3#0] -- register_copy 
    // [89] phi (byte) makechar::i#3 = (byte) 0 [phi:makechar::@2->makechar::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b3
    // makechar::@3
  __b3:
    // [90] if((byte) makechar::i#3<(byte) 8) goto makechar::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8
    bcc __b5_from___b3
    jmp __b4
    // makechar::@4
  __b4:
    // [91] (word) makechar::c#2 ← ++ (word) makechar::c#3 -- vwuz1=_inc_vwuz1 
    inc.z c
    bne !+
    inc.z c+1
  !:
    // [84] phi from makechar::@4 to makechar::@1 [phi:makechar::@4->makechar::@1]
  __b1_from___b4:
    // [84] phi (word) rand_state#14 = (word) rand_state#25 [phi:makechar::@4->makechar::@1#0] -- register_copy 
    // [84] phi (word) makechar::c#3 = (word) makechar::c#2 [phi:makechar::@4->makechar::@1#1] -- register_copy 
    jmp __b1
    // [92] phi from makechar::@3 to makechar::@5 [phi:makechar::@3->makechar::@5]
  __b5_from___b3:
    // [92] phi (word) rand_state#19 = (word) rand_state#25 [phi:makechar::@3->makechar::@5#0] -- register_copy 
    // [92] phi (byte) makechar::b#3 = (byte) 0 [phi:makechar::@3->makechar::@5#1] -- vbuyy=vbuc1 
    ldy #0
    // [92] phi (byte) makechar::ii#3 = (byte) 0 [phi:makechar::@3->makechar::@5#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b5
    // makechar::@5
  __b5:
    // [93] if((byte) makechar::ii#3<(byte) 8) goto makechar::@6 -- vbuxx_lt_vbuc1_then_la1 
    cpx #8
    bcc __b6_from___b5
    jmp __b7
    // makechar::@7
  __b7:
    // [94] (word~) makechar::$7 ← (word) makechar::c#3 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda.z c
    asl
    sta.z __7
    lda.z c+1
    rol
    sta.z __7+1
    asl.z __7
    rol.z __7+1
    asl.z __7
    rol.z __7+1
    // [95] (word~) makechar::$8 ← (word~) makechar::$7 + (byte) makechar::i#3 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z i
    clc
    adc.z __8
    sta.z __8
    bcc !+
    inc.z __8+1
  !:
    // [96] (byte*~) makechar::$10 ← (const nomodify byte*) CHARSET + (word~) makechar::$8 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __10
    adc #<CHARSET
    sta.z __10
    lda.z __10+1
    adc #>CHARSET
    sta.z __10+1
    // [97] *((byte*~) makechar::$10) ← (byte) makechar::b#3 -- _deref_pbuz1=vbuyy 
    tya
    ldy #0
    sta (__10),y
    // [98] (byte) makechar::i#2 ← ++ (byte) makechar::i#3 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [89] phi from makechar::@7 to makechar::@3 [phi:makechar::@7->makechar::@3]
  __b3_from___b7:
    // [89] phi (word) rand_state#25 = (word) rand_state#19 [phi:makechar::@7->makechar::@3#0] -- register_copy 
    // [89] phi (byte) makechar::i#3 = (byte) makechar::i#2 [phi:makechar::@7->makechar::@3#1] -- register_copy 
    jmp __b3
    // [99] phi from makechar::@5 to makechar::@6 [phi:makechar::@5->makechar::@6]
  __b6_from___b5:
    jmp __b6
    // makechar::@6
  __b6:
    // [100] call rand 
    jsr rand
    // [101] (word) rand::return#2 ← (word) rand::return#0
    jmp __b10
    // makechar::@10
  __b10:
    // [102] (word~) makechar::$3 ← (word) rand::return#2
    // [103] (byte~) makechar::$4 ← (word~) makechar::$3 & (byte) $ff -- vbuz1=vwuz2_band_vbuc1 
    lda #$ff
    and.z __3
    sta.z __4
    // [104] if((byte~) makechar::$4<=(byte) makechar::s#1) goto makechar::@8 -- vbuz1_le_vbuz2_then_la1 
    lda.z s
    cmp.z __4
    bcs __b8_from___b10
    jmp __b9
    // makechar::@9
  __b9:
    // [105] (byte) makechar::b#2 ← (byte) makechar::b#3 | *((const to_nomodify byte*) bittab + (byte) makechar::ii#3) -- vbuyy=vbuyy_bor_pbuc1_derefidx_vbuxx 
    tya
    ora bittab,x
    tay
    // [106] phi from makechar::@10 makechar::@9 to makechar::@8 [phi:makechar::@10/makechar::@9->makechar::@8]
  __b8_from___b10:
  __b8_from___b9:
    // [106] phi (byte) makechar::b#7 = (byte) makechar::b#3 [phi:makechar::@10/makechar::@9->makechar::@8#0] -- register_copy 
    jmp __b8
    // makechar::@8
  __b8:
    // [107] (byte) makechar::ii#2 ← ++ (byte) makechar::ii#3 -- vbuxx=_inc_vbuxx 
    inx
    // [92] phi from makechar::@8 to makechar::@5 [phi:makechar::@8->makechar::@5]
  __b5_from___b8:
    // [92] phi (word) rand_state#19 = (word) rand_state#12 [phi:makechar::@8->makechar::@5#0] -- register_copy 
    // [92] phi (byte) makechar::b#3 = (byte) makechar::b#7 [phi:makechar::@8->makechar::@5#1] -- register_copy 
    // [92] phi (byte) makechar::ii#3 = (byte) makechar::ii#2 [phi:makechar::@8->makechar::@5#2] -- register_copy 
    jmp __b5
}
  // rand
// Returns a pseudo-random number in the range of 0 to RAND_MAX (65535)
// Uses an xorshift pseudorandom number generator that hits all different values
// Information https://en.wikipedia.org/wiki/Xorshift
// Source http://www.retroprogramming.com/2017/07/xorshift-pseudorandom-numbers-in-z80.html
rand: {
    .label __0 = $16
    .label __1 = $18
    .label __2 = $1a
    .label return = $13
    // [108] (word~) rand::$0 ← (word) rand_state#19 << (byte) 7 -- vwuz1=vwuz2_rol_7 
    lda.z rand_state+1
    lsr
    lda.z rand_state
    ror
    sta.z __0+1
    lda #0
    ror
    sta.z __0
    // [109] (word) rand_state#0 ← (word) rand_state#19 ^ (word~) rand::$0 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z rand_state
    eor.z __0
    sta.z rand_state
    lda.z rand_state+1
    eor.z __0+1
    sta.z rand_state+1
    // [110] (word~) rand::$1 ← (word) rand_state#0 >> (byte) 9 -- vwuz1=vwuz2_ror_9 
    lda.z rand_state+1
    lsr
    sta.z __1
    lda #0
    sta.z __1+1
    // [111] (word) rand_state#1 ← (word) rand_state#0 ^ (word~) rand::$1 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z rand_state
    eor.z __1
    sta.z rand_state
    lda.z rand_state+1
    eor.z __1+1
    sta.z rand_state+1
    // [112] (word~) rand::$2 ← (word) rand_state#1 << (byte) 8 -- vwuz1=vwuz2_rol_8 
    lda.z rand_state
    sta.z __2+1
    lda #0
    sta.z __2
    // [113] (word) rand_state#12 ← (word) rand_state#1 ^ (word~) rand::$2 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z rand_state
    eor.z __2
    sta.z rand_state
    lda.z rand_state+1
    eor.z __2+1
    sta.z rand_state+1
    // [114] (word) rand::return#0 ← (word) rand_state#12 -- vwuz1=vwuz2 
    lda.z rand_state
    sta.z return
    lda.z rand_state+1
    sta.z return+1
    jmp __breturn
    // rand::@return
  __breturn:
    // [115] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  .align $100
  sinustable: .byte $80, $7d, $7a, $77, $74, $70, $6d, $6a, $67, $64, $61, $5e, $5b, $58, $55, $52, $4f, $4d, $4a, $47, $44, $41, $3f, $3c, $39, $37, $34, $32, $2f, $2d, $2b, $28, $26, $24, $22, $20, $1e, $1c, $1a, $18, $16, $15, $13, $11, $10, $f, $d, $c, $b, $a, 8, 7, 6, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 5, 6, 6, 7, 8, $a, $b, $c, $d, $f, $10, $11, $13, $15, $16, $18, $1a, $1c, $1e, $20, $22, $24, $26, $28, $2b, $2d, $2f, $32, $34, $37, $39, $3c, $3f, $41, $44, $47, $4a, $4d, $4f, $52, $55, $58, $5b, $5e, $61, $64, $67, $6a, $6d, $70, $74, $77, $7a, $7d, $80, $83, $86, $89, $8c, $90, $93, $96, $99, $9c, $9f, $a2, $a5, $a8, $ab, $ae, $b1, $b3, $b6, $b9, $bc, $bf, $c1, $c4, $c7, $c9, $cc, $ce, $d1, $d3, $d5, $d8, $da, $dc, $de, $e0, $e2, $e4, $e6, $e8, $ea, $eb, $ed, $ef, $f0, $f1, $f3, $f4, $f5, $f6, $f8, $f9, $fa, $fa, $fb, $fc, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fc, $fb, $fa, $fa, $f9, $f8, $f6, $f5, $f4, $f3, $f1, $f0, $ef, $ed, $eb, $ea, $e8, $e6, $e4, $e2, $e0, $de, $dc, $da, $d8, $d5, $d3, $d1, $ce, $cc, $c9, $c7, $c4, $c1, $bf, $bc, $b9, $b6, $b3, $b1, $ae, $ab, $a8, $a5, $a2, $9f, $9c, $99, $96, $93, $90, $8c, $89, $86, $83
  xbuf: .fill $28, 0
  ybuf: .fill $19, 0
  bittab: .byte 1, 2, 4, 8, $10, $20, $40, $80

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b6
Removing instruction jmp __b8
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b7
Removing instruction jmp __b6
Removing instruction jmp __b10
Removing instruction jmp __b9
Removing instruction jmp __b8
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda.z rand_state+1
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b6_from___b5 with __b6
Replacing label __b8_from___b10 with __b8
Removing instruction __b1_from___init1:
Removing instruction main_from___b1:
Removing instruction __b4_from_main:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b1:
Removing instruction print_ln_from___b2:
Removing instruction __b1_from___b1:
Removing instruction __b6_from___b5:
Removing instruction __b8_from___b10:
Removing instruction __b8_from___b9:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction makechar_from_main:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction doplasma_from___b2:
Removing instruction __b6:
Removing instruction doplasma_from___b6:
Removing instruction __b7:
Removing instruction __b1_from___b7:
Removing instruction __b1_from_doplasma:
Removing instruction __b3_from___b1:
Removing instruction __b5_from___b3:
Removing instruction __breturn:
Removing instruction __b8:
Removing instruction __b5_from___b8:
Removing instruction __b6_from___b7:
Removing instruction __b3_from___b4:
Removing instruction __b1_from___b2:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b1_from_print_ln:
Removing instruction __breturn:
Removing instruction print_uchar_from_print_uint:
Removing instruction __b1:
Removing instruction print_uchar_from___b1:
Removing instruction __breturn:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_makechar:
Removing instruction __breturn:
Removing instruction __b3_from___b2:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __b7:
Removing instruction __b3_from___b7:
Removing instruction __b10:
Removing instruction __b9:
Removing instruction __b5_from___b8:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Relabelling long label __b6_from___b5 to __b8
Relabelling long label __b5_from___b3 to __b4
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(const nomodify byte*) CHARSET = (byte*) 59392
(const nomodify struct MOS6526_CIA*) CIA2 = (struct MOS6526_CIA*) 56576
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const nomodify byte) PAGE1 = (word)(const nomodify byte*) SCREEN1>>(byte) 6&(byte) $f0|(word)(const nomodify byte*) CHARSET>>(byte) $a&(byte) $e
(const nomodify byte) PAGE2 = (word)(const nomodify byte*) SCREEN2>>(byte) 6&(byte) $f0|(word)(const nomodify byte*) CHARSET>>(byte) $a&(byte) $e
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const nomodify byte*) SCREEN1 = (byte*) 57344
(const nomodify byte*) SCREEN2 = (byte*) 58368
(word) Ticks
(word) Ticks#0 Ticks zp[2]:14 101.0
(word) Ticks#1 Ticks_1 zp[2]:17 202.0
(const nomodify byte*) VIC_MEMORY = (byte*) 53272
(void()) __start()
(label) __start::@1
(label) __start::@return
(label) __start::__init1
(const to_nomodify byte*) bittab[]  = { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
(void()) doplasma((byte*) doplasma::scrn)
(byte~) doplasma::$1 reg byte a 200002.0
(byte~) doplasma::$3 reg byte a 200002.0
(byte~) doplasma::$6 reg byte a 2000002.0
(label) doplasma::@1
(label) doplasma::@2
(label) doplasma::@3
(label) doplasma::@4
(label) doplasma::@5
(label) doplasma::@6
(label) doplasma::@7
(label) doplasma::@8
(label) doplasma::@return
(byte) doplasma::c1A
(byte) doplasma::c1B
(byte) doplasma::c1a
(byte) doplasma::c1a#2 c1a zp[1]:16 66667.33333333333
(byte) doplasma::c1a#3 c1a zp[1]:16 75000.75
(byte) doplasma::c1b
(byte) doplasma::c1b#2 c1b zp[1]:21 100001.0
(byte) doplasma::c1b#3 c1b zp[1]:21 60000.600000000006
(byte) doplasma::c2A
(const byte) doplasma::c2A#0 c2A = (byte) 0
(byte) doplasma::c2B
(const byte) doplasma::c2B#0 c2B = (byte) 0
(byte) doplasma::c2a
(byte) doplasma::c2a#2 c2a zp[1]:3 66667.33333333333
(byte) doplasma::c2a#3 c2a zp[1]:3 75000.75
(byte) doplasma::c2b
(byte) doplasma::c2b#2 c2b zp[1]:4 100001.0
(byte) doplasma::c2b#3 c2b zp[1]:4 60000.600000000006
(byte) doplasma::i
(byte) doplasma::i#2 i zp[1]:2 200002.0
(byte) doplasma::i#3 i zp[1]:2 66667.33333333333
(byte) doplasma::ii
(byte) doplasma::ii#2 ii zp[1]:9 200002.0
(byte) doplasma::ii#3 ii zp[1]:9 66667.33333333333
(byte) doplasma::j
(byte) doplasma::j#2 reg byte y 2000002.0
(byte) doplasma::j#3 reg byte y 1250001.25
(byte) doplasma::jj
(byte) doplasma::jj#2 reg byte x 200002.0
(byte) doplasma::jj#3 reg byte x 162500.5
(byte*) doplasma::scrn
(byte*) doplasma::scrn#0 scrn zp[2]:19 100001.0
(byte*) doplasma::scrn#13 scrn zp[2]:19 6666.733333333334
(byte*) doplasma::scrn#6 scrn zp[2]:19 185714.85714285713
(void()) end()
(label) end::@1
(label) end::@2
(label) end::@return
(volatile word) last_time loadstore zp[2]:10 17.652173913043477
(signed word()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(byte) main::block
(byte) main::block#1 block zp[1]:12 2.5384615384615383
(word) main::count
(word) main::count#1 count zp[2]:5 202.0
(word) main::count#2 count zp[2]:5 43.285714285714285
(signed word) main::return
(byte) main::tmp
(byte) main::tmp#1 reg byte a 22.0
(byte) main::v
(byte) main::v#1 v zp[1]:13 2.4444444444444446
(void()) makechar()
(byte*~) makechar::$10 zp[2]:17 20002.0
(word~) makechar::$3 zp[2]:19 200002.0
(byte~) makechar::$4 zp[1]:21 200002.0
(word~) makechar::$7 zp[2]:17 20002.0
(word~) makechar::$8 zp[2]:17 20002.0
(byte~) makechar::$9 reg byte a 2002.0
(label) makechar::@1
(label) makechar::@10
(label) makechar::@2
(label) makechar::@3
(label) makechar::@4
(label) makechar::@5
(label) makechar::@6
(label) makechar::@7
(label) makechar::@8
(label) makechar::@9
(label) makechar::@return
(byte) makechar::b
(byte) makechar::b#2 reg byte y 200002.0
(byte) makechar::b#3 reg byte y 28182.181818181816
(byte) makechar::b#7 reg byte y 150001.5
(word) makechar::c
(word) makechar::c#2 c zp[2]:14 2002.0
(word) makechar::c#3 c zp[2]:14 591.090909090909
(byte) makechar::i
(byte) makechar::i#2 i zp[1]:9 20002.0
(byte) makechar::i#3 i zp[1]:9 2353.176470588235
(byte) makechar::ii
(byte) makechar::ii#2 reg byte x 200002.0
(byte) makechar::ii#3 reg byte x 40000.4
(byte) makechar::s
(byte) makechar::s#1 s zp[1]:16 5315.894736842105
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 20002.0
(byte) print_char::ch#1 reg byte a 20002.0
(byte) print_char::ch#2 reg byte a 120003.0
(byte*) print_char_cursor
(byte*) print_char_cursor#26 print_char_cursor zp[2]:19 110002.0
(byte*) print_char_cursor#27 print_char_cursor zp[2]:19 7117.882352941177
(byte*) print_char_cursor#37 print_char_cursor zp[2]:19 3667.333333333333
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0 print_line_cursor zp[2]:5 15001.5
(byte*) print_line_cursor#9 print_line_cursor zp[2]:5 20002.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(const byte*) print_screen#0 print_screen = (byte*) 1024
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 reg byte a 20002.0
(byte~) print_uchar::$2 reg byte x 20002.0
(label) print_uchar::@1
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0 reg byte x 2002.0
(byte) print_uchar::b#1 reg byte x 2002.0
(byte) print_uchar::b#2 reg byte x 5501.0
(void()) print_uint((word) print_uint::w)
(label) print_uint::@1
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0 w zp[2]:17 701.0
(word()) rand()
(word~) rand::$0 zp[2]:22 2000002.0
(word~) rand::$1 zp[2]:24 2000002.0
(word~) rand::$2 zp[2]:26 2000002.0
(label) rand::@return
(word) rand::return
(word) rand::return#0 return zp[2]:19 366667.3333333334
(word) rand::return#2 return zp[2]:19 200002.0
(word) rand_state
(word) rand_state#0 rand_state zp[2]:7 1500001.5
(word) rand_state#1 rand_state zp[2]:7 1500001.5
(word) rand_state#12 rand_state zp[2]:7 190909.36363636365
(word) rand_state#14 rand_state zp[2]:7 500.5
(word) rand_state#19 rand_state zp[2]:7 235556.11111111112
(word) rand_state#25 rand_state zp[2]:7 7334.666666666666
(const to_nomodify byte*) sinustable[(number) $100]  = { (byte) $80, (byte) $7d, (byte) $7a, (byte) $77, (byte) $74, (byte) $70, (byte) $6d, (byte) $6a, (byte) $67, (byte) $64, (byte) $61, (byte) $5e, (byte) $5b, (byte) $58, (byte) $55, (byte) $52, (byte) $4f, (byte) $4d, (byte) $4a, (byte) $47, (byte) $44, (byte) $41, (byte) $3f, (byte) $3c, (byte) $39, (byte) $37, (byte) $34, (byte) $32, (byte) $2f, (byte) $2d, (byte) $2b, (byte) $28, (byte) $26, (byte) $24, (byte) $22, (byte) $20, (byte) $1e, (byte) $1c, (byte) $1a, (byte) $18, (byte) $16, (byte) $15, (byte) $13, (byte) $11, (byte) $10, (byte) $f, (byte) $d, (byte) $c, (byte) $b, (byte) $a, (byte) 8, (byte) 7, (byte) 6, (byte) 6, (byte) 5, (byte) 4, (byte) 3, (byte) 3, (byte) 2, (byte) 2, (byte) 2, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 2, (byte) 2, (byte) 2, (byte) 3, (byte) 3, (byte) 4, (byte) 5, (byte) 6, (byte) 6, (byte) 7, (byte) 8, (byte) $a, (byte) $b, (byte) $c, (byte) $d, (byte) $f, (byte) $10, (byte) $11, (byte) $13, (byte) $15, (byte) $16, (byte) $18, (byte) $1a, (byte) $1c, (byte) $1e, (byte) $20, (byte) $22, (byte) $24, (byte) $26, (byte) $28, (byte) $2b, (byte) $2d, (byte) $2f, (byte) $32, (byte) $34, (byte) $37, (byte) $39, (byte) $3c, (byte) $3f, (byte) $41, (byte) $44, (byte) $47, (byte) $4a, (byte) $4d, (byte) $4f, (byte) $52, (byte) $55, (byte) $58, (byte) $5b, (byte) $5e, (byte) $61, (byte) $64, (byte) $67, (byte) $6a, (byte) $6d, (byte) $70, (byte) $74, (byte) $77, (byte) $7a, (byte) $7d, (byte) $80, (byte) $83, (byte) $86, (byte) $89, (byte) $8c, (byte) $90, (byte) $93, (byte) $96, (byte) $99, (byte) $9c, (byte) $9f, (byte) $a2, (byte) $a5, (byte) $a8, (byte) $ab, (byte) $ae, (byte) $b1, (byte) $b3, (byte) $b6, (byte) $b9, (byte) $bc, (byte) $bf, (byte) $c1, (byte) $c4, (byte) $c7, (byte) $c9, (byte) $cc, (byte) $ce, (byte) $d1, (byte) $d3, (byte) $d5, (byte) $d8, (byte) $da, (byte) $dc, (byte) $de, (byte) $e0, (byte) $e2, (byte) $e4, (byte) $e6, (byte) $e8, (byte) $ea, (byte) $eb, (byte) $ed, (byte) $ef, (byte) $f0, (byte) $f1, (byte) $f3, (byte) $f4, (byte) $f5, (byte) $f6, (byte) $f8, (byte) $f9, (byte) $fa, (byte) $fa, (byte) $fb, (byte) $fc, (byte) $fd, (byte) $fd, (byte) $fe, (byte) $fe, (byte) $fe, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $fe, (byte) $fe, (byte) $fe, (byte) $fd, (byte) $fd, (byte) $fc, (byte) $fb, (byte) $fa, (byte) $fa, (byte) $f9, (byte) $f8, (byte) $f6, (byte) $f5, (byte) $f4, (byte) $f3, (byte) $f1, (byte) $f0, (byte) $ef, (byte) $ed, (byte) $eb, (byte) $ea, (byte) $e8, (byte) $e6, (byte) $e4, (byte) $e2, (byte) $e0, (byte) $de, (byte) $dc, (byte) $da, (byte) $d8, (byte) $d5, (byte) $d3, (byte) $d1, (byte) $ce, (byte) $cc, (byte) $c9, (byte) $c7, (byte) $c4, (byte) $c1, (byte) $bf, (byte) $bc, (byte) $b9, (byte) $b6, (byte) $b3, (byte) $b1, (byte) $ae, (byte) $ab, (byte) $a8, (byte) $a5, (byte) $a2, (byte) $9f, (byte) $9c, (byte) $99, (byte) $96, (byte) $93, (byte) $90, (byte) $8c, (byte) $89, (byte) $86, (byte) $83 }
(void()) start()
(label) start::@return
(const nomodify word*) start::LAST_TIME = &(volatile word) last_time
(const byte*) xbuf[(number) $28]  = { fill( $28, 0) }
(const byte*) ybuf[(number) $19]  = { fill( $19, 0) }

zp[1]:2 [ doplasma::i#3 doplasma::i#2 ]
zp[1]:3 [ doplasma::c2a#3 doplasma::c2a#2 ]
zp[1]:4 [ doplasma::c2b#3 doplasma::c2b#2 ]
reg byte x [ doplasma::jj#3 doplasma::jj#2 ]
reg byte y [ doplasma::j#3 doplasma::j#2 ]
zp[2]:5 [ print_line_cursor#9 print_line_cursor#0 main::count#2 main::count#1 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp[2]:7 [ rand_state#14 rand_state#25 rand_state#19 rand_state#12 rand_state#0 rand_state#1 ]
zp[1]:9 [ makechar::i#3 makechar::i#2 doplasma::ii#3 doplasma::ii#2 ]
reg byte x [ makechar::ii#3 makechar::ii#2 ]
reg byte y [ makechar::b#3 makechar::b#7 makechar::b#2 ]
zp[2]:10 [ last_time ]
zp[1]:12 [ main::block#1 ]
reg byte a [ main::tmp#1 ]
zp[1]:13 [ main::v#1 ]
reg byte a [ doplasma::$6 ]
reg byte a [ doplasma::$3 ]
reg byte a [ doplasma::$1 ]
zp[2]:14 [ Ticks#0 makechar::c#3 makechar::c#2 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
reg byte a [ makechar::$9 ]
zp[1]:16 [ makechar::s#1 doplasma::c1a#3 doplasma::c1a#2 ]
zp[2]:17 [ makechar::$7 makechar::$8 makechar::$10 Ticks#1 print_uint::w#0 ]
zp[2]:19 [ rand::return#2 makechar::$3 rand::return#0 print_char_cursor#26 print_char_cursor#37 print_char_cursor#27 doplasma::scrn#6 doplasma::scrn#0 doplasma::scrn#13 ]
zp[1]:21 [ makechar::$4 doplasma::c1b#3 doplasma::c1b#2 ]
zp[2]:22 [ rand::$0 ]
zp[2]:24 [ rand::$1 ]
zp[2]:26 [ rand::$2 ]


FINAL ASSEMBLER
Score: 102174

  // File Comments
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .const PAGE1 = SCREEN1>>6&$f0|CHARSET>>$a&$e
  .const PAGE2 = SCREEN2>>6&$f0|CHARSET>>$a&$e
  .label VIC_MEMORY = $d018
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  .label SCREEN1 = $e000
  .label SCREEN2 = $e400
  .label CHARSET = $e800
  .label print_screen = $400
  .label last_time = $a
  // The random state variable
  .label rand_state = 7
  .label print_line_cursor = 5
  .label Ticks = $e
  .label Ticks_1 = $11
  .label print_char_cursor = $13
  // __start
__start: {
    // __start::__init1
    // last_time
    // [1] (volatile word) last_time ← (word) 0 -- vwuz1=vwuc1 
    lda #<0
    sta.z last_time
    sta.z last_time+1
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [3] call main 
    // [5] phi from __start::@1 to main [phi:__start::@1->main]
    jsr main
    // __start::@return
    // [4] return 
    rts
}
  // main
main: {
    .label block = $c
    .label v = $d
    .label count = 5
    // makechar()
    // [6] call makechar 
    // [83] phi from main to makechar [phi:main->makechar]
    jsr makechar
    // [7] phi from main to main::@4 [phi:main->main::@4]
    // main::@4
    // start()
    // [8] call start 
    jsr start
    // main::@5
    // block = CIA2->PORT_A
    // [9] (byte) main::block#1 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) -- vbuz1=_deref_pbuc1 
    lda CIA2
    sta.z block
    // tmp = block & 0xFC
    // [10] (byte) main::tmp#1 ← (byte) main::block#1 & (byte) $fc -- vbuaa=vbuz1_band_vbuc1 
    lda #$fc
    and.z block
    // CIA2->PORT_A = tmp
    // [11] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) main::tmp#1 -- _deref_pbuc1=vbuaa 
    sta CIA2
    // v = *VIC_MEMORY
    // [12] (byte) main::v#1 ← *((const nomodify byte*) VIC_MEMORY) -- vbuz1=_deref_pbuc1 
    lda VIC_MEMORY
    sta.z v
    // [13] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [13] phi (word) main::count#2 = (word) $1f4 [phi:main::@5->main::@1#0] -- vwuz1=vwuc1 
    lda #<$1f4
    sta.z count
    lda #>$1f4
    sta.z count+1
  /* Run the demo until a key was hit */
    // main::@1
  __b1:
    // while (count)
    // [14] if((byte) 0!=(word) main::count#2) goto main::@2 -- vwuc1_neq_vwuz1_then_la1 
    lda.z count+1
    cmp #>0
    bne __b2
    lda.z count
    cmp #<0
    bne __b2
    // main::@3
    // *VIC_MEMORY = v
    // [15] *((const nomodify byte*) VIC_MEMORY) ← (byte) main::v#1 -- _deref_pbuc1=vbuz1 
    lda.z v
    sta VIC_MEMORY
    // CIA2->PORT_A = block
    // [16] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) main::block#1 -- _deref_pbuc1=vbuz1 
    lda.z block
    sta CIA2
    // end()
    // [17] call end 
    /* Reset screen colors */
    jsr end
    // main::@return
    // }
    // [18] return 
    rts
    // [19] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
  __b2:
    // doplasma ((char*)SCREEN1)
    // [20] call doplasma 
  /* Build page 1, then make it visible */
    // [25] phi from main::@2 to doplasma [phi:main::@2->doplasma]
    // [25] phi (byte*) doplasma::scrn#13 = (const nomodify byte*) SCREEN1 [phi:main::@2->doplasma#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta.z doplasma.scrn
    lda #>SCREEN1
    sta.z doplasma.scrn+1
    jsr doplasma
    // main::@6
    // *VIC_MEMORY = PAGE1
    // [21] *((const nomodify byte*) VIC_MEMORY) ← (const nomodify byte) PAGE1 -- _deref_pbuc1=vbuc2 
    lda #PAGE1
    sta VIC_MEMORY
    // doplasma ((char*)SCREEN2)
    // [22] call doplasma 
  /* Build page 2, then make it visible */
    // [25] phi from main::@6 to doplasma [phi:main::@6->doplasma]
    // [25] phi (byte*) doplasma::scrn#13 = (const nomodify byte*) SCREEN2 [phi:main::@6->doplasma#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta.z doplasma.scrn
    lda #>SCREEN2
    sta.z doplasma.scrn+1
    jsr doplasma
    // main::@7
    // *VIC_MEMORY = PAGE2
    // [23] *((const nomodify byte*) VIC_MEMORY) ← (const nomodify byte) PAGE2 -- _deref_pbuc1=vbuc2 
    lda #PAGE2
    sta VIC_MEMORY
    // --count;
    // [24] (word) main::count#1 ← -- (word) main::count#2 -- vwuz1=_dec_vwuz1 
    lda.z count
    bne !+
    dec.z count+1
  !:
    dec.z count
    // [13] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
    // [13] phi (word) main::count#2 = (word) main::count#1 [phi:main::@7->main::@1#0] -- register_copy 
    jmp __b1
}
  // doplasma
// doplasma(byte* zp($13) scrn)
doplasma: {
    .const c2A = 0
    .const c2B = 0
    .label c1a = $10
    .label c1b = $15
    .label ii = 9
    .label c2a = 3
    .label c2b = 4
    .label i = 2
    .label scrn = $13
    // [26] phi from doplasma to doplasma::@1 [phi:doplasma->doplasma::@1]
    // [26] phi (byte) doplasma::c1b#3 = (byte) 0 [phi:doplasma->doplasma::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c1b
    // [26] phi (byte) doplasma::c1a#3 = (byte) 0 [phi:doplasma->doplasma::@1#1] -- vbuz1=vbuc1 
    sta.z c1a
    // [26] phi (byte) doplasma::ii#3 = (byte) 0 [phi:doplasma->doplasma::@1#2] -- vbuz1=vbuc1 
    sta.z ii
    // doplasma::@1
  __b1:
    // for (ii = 0; ii < 25; ++ii)
    // [27] if((byte) doplasma::ii#3<(byte) $19) goto doplasma::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z ii
    cmp #$19
    bcc __b2
    // [28] phi from doplasma::@1 to doplasma::@3 [phi:doplasma::@1->doplasma::@3]
    // [28] phi (byte) doplasma::c2b#3 = (const byte) doplasma::c2B#0 [phi:doplasma::@1->doplasma::@3#0] -- vbuz1=vbuc1 
    lda #c2B
    sta.z c2b
    // [28] phi (byte) doplasma::c2a#3 = (const byte) doplasma::c2A#0 [phi:doplasma::@1->doplasma::@3#1] -- vbuz1=vbuc1 
    lda #c2A
    sta.z c2a
    // [28] phi (byte) doplasma::i#3 = (byte) 0 [phi:doplasma::@1->doplasma::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // doplasma::@3
  __b3:
    // for (i = 0; i < 40; ++i)
    // [29] if((byte) doplasma::i#3<(byte) $28) goto doplasma::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #$28
    bcc __b4
    // [30] phi from doplasma::@3 to doplasma::@5 [phi:doplasma::@3->doplasma::@5]
    // [30] phi (byte*) doplasma::scrn#6 = (byte*) doplasma::scrn#13 [phi:doplasma::@3->doplasma::@5#0] -- register_copy 
    // [30] phi (byte) doplasma::jj#3 = (byte) 0 [phi:doplasma::@3->doplasma::@5#1] -- vbuxx=vbuc1 
    ldx #0
    // doplasma::@5
  __b5:
    // for (jj = 0; jj < 25; ++jj)
    // [31] if((byte) doplasma::jj#3<(byte) $19) goto doplasma::@6 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b8
    // doplasma::@return
    // }
    // [32] return 
    rts
    // [33] phi from doplasma::@5 to doplasma::@6 [phi:doplasma::@5->doplasma::@6]
  __b8:
    // [33] phi (byte) doplasma::j#3 = (byte) 0 [phi:doplasma::@5->doplasma::@6#0] -- vbuyy=vbuc1 
    ldy #0
    // doplasma::@6
  __b6:
    // for (j = 0; j < 40; ++j)
    // [34] if((byte) doplasma::j#3<(byte) $28) goto doplasma::@7 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b7
    // doplasma::@8
    // scrn += 40
    // [35] (byte*) doplasma::scrn#0 ← (byte*) doplasma::scrn#6 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z scrn
    sta.z scrn
    bcc !+
    inc.z scrn+1
  !:
    // for (jj = 0; jj < 25; ++jj)
    // [36] (byte) doplasma::jj#2 ← ++ (byte) doplasma::jj#3 -- vbuxx=_inc_vbuxx 
    inx
    // [30] phi from doplasma::@8 to doplasma::@5 [phi:doplasma::@8->doplasma::@5]
    // [30] phi (byte*) doplasma::scrn#6 = (byte*) doplasma::scrn#0 [phi:doplasma::@8->doplasma::@5#0] -- register_copy 
    // [30] phi (byte) doplasma::jj#3 = (byte) doplasma::jj#2 [phi:doplasma::@8->doplasma::@5#1] -- register_copy 
    jmp __b5
    // doplasma::@7
  __b7:
    // xbuf[j] + ybuf[jj]
    // [37] (byte~) doplasma::$6 ← *((const byte*) xbuf + (byte) doplasma::j#3) + *((const byte*) ybuf + (byte) doplasma::jj#3) -- vbuaa=pbuc1_derefidx_vbuyy_plus_pbuc2_derefidx_vbuxx 
    lda xbuf,y
    clc
    adc ybuf,x
    // scrn[j] = (xbuf[j] + ybuf[jj])
    // [38] *((byte*) doplasma::scrn#6 + (byte) doplasma::j#3) ← (byte~) doplasma::$6 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (scrn),y
    // for (j = 0; j < 40; ++j)
    // [39] (byte) doplasma::j#2 ← ++ (byte) doplasma::j#3 -- vbuyy=_inc_vbuyy 
    iny
    // [33] phi from doplasma::@7 to doplasma::@6 [phi:doplasma::@7->doplasma::@6]
    // [33] phi (byte) doplasma::j#3 = (byte) doplasma::j#2 [phi:doplasma::@7->doplasma::@6#0] -- register_copy 
    jmp __b6
    // doplasma::@4
  __b4:
    // sinustable[c2a] + sinustable[c2b]
    // [40] (byte~) doplasma::$3 ← *((const to_nomodify byte*) sinustable + (byte) doplasma::c2a#3) + *((const to_nomodify byte*) sinustable + (byte) doplasma::c2b#3) -- vbuaa=pbuc1_derefidx_vbuz1_plus_pbuc1_derefidx_vbuz2 
    ldy.z c2a
    lda sinustable,y
    ldy.z c2b
    clc
    adc sinustable,y
    // xbuf[i] = (sinustable[c2a] + sinustable[c2b])
    // [41] *((const byte*) xbuf + (byte) doplasma::i#3) ← (byte~) doplasma::$3 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z i
    sta xbuf,y
    // c2a += 3
    // [42] (byte) doplasma::c2a#2 ← (byte) doplasma::c2a#3 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c2a
    axs #-[3]
    stx.z c2a
    // c2b += 7
    // [43] (byte) doplasma::c2b#2 ← (byte) doplasma::c2b#3 + (byte) 7 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c2b
    axs #-[7]
    stx.z c2b
    // for (i = 0; i < 40; ++i)
    // [44] (byte) doplasma::i#2 ← ++ (byte) doplasma::i#3 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [28] phi from doplasma::@4 to doplasma::@3 [phi:doplasma::@4->doplasma::@3]
    // [28] phi (byte) doplasma::c2b#3 = (byte) doplasma::c2b#2 [phi:doplasma::@4->doplasma::@3#0] -- register_copy 
    // [28] phi (byte) doplasma::c2a#3 = (byte) doplasma::c2a#2 [phi:doplasma::@4->doplasma::@3#1] -- register_copy 
    // [28] phi (byte) doplasma::i#3 = (byte) doplasma::i#2 [phi:doplasma::@4->doplasma::@3#2] -- register_copy 
    jmp __b3
    // doplasma::@2
  __b2:
    // sinustable[c1a] + sinustable[c1b]
    // [45] (byte~) doplasma::$1 ← *((const to_nomodify byte*) sinustable + (byte) doplasma::c1a#3) + *((const to_nomodify byte*) sinustable + (byte) doplasma::c1b#3) -- vbuaa=pbuc1_derefidx_vbuz1_plus_pbuc1_derefidx_vbuz2 
    ldy.z c1a
    lda sinustable,y
    ldy.z c1b
    clc
    adc sinustable,y
    // ybuf[ii] = (sinustable[c1a] + sinustable[c1b])
    // [46] *((const byte*) ybuf + (byte) doplasma::ii#3) ← (byte~) doplasma::$1 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z ii
    sta ybuf,y
    // c1a += 4
    // [47] (byte) doplasma::c1a#2 ← (byte) doplasma::c1a#3 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c1a
    axs #-[4]
    stx.z c1a
    // c1b += 9
    // [48] (byte) doplasma::c1b#2 ← (byte) doplasma::c1b#3 + (byte) 9 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c1b
    axs #-[9]
    stx.z c1b
    // for (ii = 0; ii < 25; ++ii)
    // [49] (byte) doplasma::ii#2 ← ++ (byte) doplasma::ii#3 -- vbuz1=_inc_vbuz1 
    inc.z ii
    // [26] phi from doplasma::@2 to doplasma::@1 [phi:doplasma::@2->doplasma::@1]
    // [26] phi (byte) doplasma::c1b#3 = (byte) doplasma::c1b#2 [phi:doplasma::@2->doplasma::@1#0] -- register_copy 
    // [26] phi (byte) doplasma::c1a#3 = (byte) doplasma::c1a#2 [phi:doplasma::@2->doplasma::@1#1] -- register_copy 
    // [26] phi (byte) doplasma::ii#3 = (byte) doplasma::ii#2 [phi:doplasma::@2->doplasma::@1#2] -- register_copy 
    jmp __b1
}
  // end
end: {
    // Ticks = last_time
    // [50] (word) Ticks#0 ← (volatile word) last_time -- vwuz1=vwuz2 
    lda.z last_time
    sta.z Ticks
    lda.z last_time+1
    sta.z Ticks+1
    // start()
    // [51] call start 
    jsr start
    // end::@1
    // last_time -= Ticks
    // [52] (volatile word) last_time ← (volatile word) last_time - (word) Ticks#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z last_time
    sec
    sbc.z Ticks
    sta.z last_time
    lda.z last_time+1
    sbc.z Ticks+1
    sta.z last_time+1
    // Ticks = last_time
    // [53] (word) Ticks#1 ← (volatile word) last_time -- vwuz1=vwuz2 
    lda.z last_time
    sta.z Ticks_1
    lda.z last_time+1
    sta.z Ticks_1+1
    // print_uint(Ticks)
    // [54] (word) print_uint::w#0 ← (word) Ticks#1
    // [55] call print_uint 
    jsr print_uint
    // [56] phi from end::@1 to end::@2 [phi:end::@1->end::@2]
    // end::@2
    // print_ln()
    // [57] call print_ln 
    // [59] phi from end::@2 to print_ln [phi:end::@2->print_ln]
    jsr print_ln
    // end::@return
    // }
    // [58] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [60] phi from print_ln to print_ln::@1 [phi:print_ln->print_ln::@1]
    // [60] phi (byte*) print_line_cursor#9 = (const byte*) print_screen#0 [phi:print_ln->print_ln::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [60] phi from print_ln::@1 to print_ln::@1 [phi:print_ln::@1->print_ln::@1]
    // [60] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#0 [phi:print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [61] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [62] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#27) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [63] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp($11) w)
print_uint: {
    .label w = $11
    // print_uchar(>w)
    // [64] (byte) print_uchar::b#0 ← > (word) print_uint::w#0 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [65] call print_uchar 
    // [69] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
    // [69] phi (byte*) print_char_cursor#37 = (const byte*) print_screen#0 [phi:print_uint->print_uchar#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [69] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_uint::@1
    // print_uchar(<w)
    // [66] (byte) print_uchar::b#1 ← < (word) print_uint::w#0 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [67] call print_uchar 
    // [69] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
    // [69] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#27 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [69] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_uint::@return
    // }
    // [68] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // b>>4
    // [70] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [71] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [72] call print_char 
  // Table of hexadecimal digits
    // [77] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [77] phi (byte*) print_char_cursor#26 = (byte*) print_char_cursor#37 [phi:print_uchar->print_char#0] -- register_copy 
    // [77] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@1
    // b&$f
    // [73] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [74] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [75] call print_char 
    // [77] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [77] phi (byte*) print_char_cursor#26 = (byte*) print_char_cursor#27 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [77] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@return
    // }
    // [76] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [78] *((byte*) print_char_cursor#26) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [79] (byte*) print_char_cursor#27 ← ++ (byte*) print_char_cursor#26 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [80] return 
    rts
}
  // start
start: {
    .label LAST_TIME = last_time
    // asm
    // asm { jsr$FFDE staLAST_TIME stxLAST_TIME+1  }
    jsr $ffde
    sta LAST_TIME
    stx LAST_TIME+1
    // start::@return
    // }
    // [82] return 
    rts
}
  // makechar
makechar: {
    .label __3 = $13
    .label __4 = $15
    .label __7 = $11
    .label __8 = $11
    .label s = $10
    .label c = $e
    .label i = 9
    .label __10 = $11
    // [84] phi from makechar to makechar::@1 [phi:makechar->makechar::@1]
    // [84] phi (word) rand_state#14 = (word) 1 [phi:makechar->makechar::@1#0] -- vwuz1=vwuc1 
    lda #<1
    sta.z rand_state
    lda #>1
    sta.z rand_state+1
    // [84] phi (word) makechar::c#3 = (byte) 0 [phi:makechar->makechar::@1#1] -- vwuz1=vbuc1 
    sta.z c
    sta.z c+1
    // makechar::@1
  __b1:
    // for (c = 0; c < 0x100; ++c)
    // [85] if((word) makechar::c#3<(word) $100) goto makechar::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z c+1
    cmp #>$100
    bcc __b2
    bne !+
    lda.z c
    cmp #<$100
    bcc __b2
  !:
    // makechar::@return
    // }
    // [86] return 
    rts
    // makechar::@2
  __b2:
    // s = sinustable[(char)c]
    // [87] (byte~) makechar::$9 ← (byte)(word) makechar::c#3 -- vbuaa=_byte_vwuz1 
    lda.z c
    // [88] (byte) makechar::s#1 ← *((const to_nomodify byte*) sinustable + (byte~) makechar::$9) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda sinustable,y
    sta.z s
    // [89] phi from makechar::@2 to makechar::@3 [phi:makechar::@2->makechar::@3]
    // [89] phi (word) rand_state#25 = (word) rand_state#14 [phi:makechar::@2->makechar::@3#0] -- register_copy 
    // [89] phi (byte) makechar::i#3 = (byte) 0 [phi:makechar::@2->makechar::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // makechar::@3
  __b3:
    // for (i = 0; i < 8; ++i)
    // [90] if((byte) makechar::i#3<(byte) 8) goto makechar::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8
    bcc __b4
    // makechar::@4
    // for (c = 0; c < 0x100; ++c)
    // [91] (word) makechar::c#2 ← ++ (word) makechar::c#3 -- vwuz1=_inc_vwuz1 
    inc.z c
    bne !+
    inc.z c+1
  !:
    // [84] phi from makechar::@4 to makechar::@1 [phi:makechar::@4->makechar::@1]
    // [84] phi (word) rand_state#14 = (word) rand_state#25 [phi:makechar::@4->makechar::@1#0] -- register_copy 
    // [84] phi (word) makechar::c#3 = (word) makechar::c#2 [phi:makechar::@4->makechar::@1#1] -- register_copy 
    jmp __b1
    // [92] phi from makechar::@3 to makechar::@5 [phi:makechar::@3->makechar::@5]
  __b4:
    // [92] phi (word) rand_state#19 = (word) rand_state#25 [phi:makechar::@3->makechar::@5#0] -- register_copy 
    // [92] phi (byte) makechar::b#3 = (byte) 0 [phi:makechar::@3->makechar::@5#1] -- vbuyy=vbuc1 
    ldy #0
    // [92] phi (byte) makechar::ii#3 = (byte) 0 [phi:makechar::@3->makechar::@5#2] -- vbuxx=vbuc1 
    ldx #0
    // makechar::@5
  __b5:
    // for (ii = 0; ii < 8; ++ii)
    // [93] if((byte) makechar::ii#3<(byte) 8) goto makechar::@6 -- vbuxx_lt_vbuc1_then_la1 
    cpx #8
    bcc __b6
    // makechar::@7
    // c<<3
    // [94] (word~) makechar::$7 ← (word) makechar::c#3 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda.z c
    asl
    sta.z __7
    lda.z c+1
    rol
    sta.z __7+1
    asl.z __7
    rol.z __7+1
    asl.z __7
    rol.z __7+1
    // (c<<3) + i
    // [95] (word~) makechar::$8 ← (word~) makechar::$7 + (byte) makechar::i#3 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z i
    clc
    adc.z __8
    sta.z __8
    bcc !+
    inc.z __8+1
  !:
    // ((char*)CHARSET) [(c<<3) + i] = b
    // [96] (byte*~) makechar::$10 ← (const nomodify byte*) CHARSET + (word~) makechar::$8 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __10
    adc #<CHARSET
    sta.z __10
    lda.z __10+1
    adc #>CHARSET
    sta.z __10+1
    // [97] *((byte*~) makechar::$10) ← (byte) makechar::b#3 -- _deref_pbuz1=vbuyy 
    tya
    ldy #0
    sta (__10),y
    // for (i = 0; i < 8; ++i)
    // [98] (byte) makechar::i#2 ← ++ (byte) makechar::i#3 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [89] phi from makechar::@7 to makechar::@3 [phi:makechar::@7->makechar::@3]
    // [89] phi (word) rand_state#25 = (word) rand_state#19 [phi:makechar::@7->makechar::@3#0] -- register_copy 
    // [89] phi (byte) makechar::i#3 = (byte) makechar::i#2 [phi:makechar::@7->makechar::@3#1] -- register_copy 
    jmp __b3
    // [99] phi from makechar::@5 to makechar::@6 [phi:makechar::@5->makechar::@6]
    // makechar::@6
  __b6:
    // rand()
    // [100] call rand 
    jsr rand
    // [101] (word) rand::return#2 ← (word) rand::return#0
    // makechar::@10
    // [102] (word~) makechar::$3 ← (word) rand::return#2
    // rand() & 0xFF
    // [103] (byte~) makechar::$4 ← (word~) makechar::$3 & (byte) $ff -- vbuz1=vwuz2_band_vbuc1 
    lda #$ff
    and.z __3
    sta.z __4
    // if ((rand() & 0xFF) > s)
    // [104] if((byte~) makechar::$4<=(byte) makechar::s#1) goto makechar::@8 -- vbuz1_le_vbuz2_then_la1 
    lda.z s
    cmp.z __4
    bcs __b8
    // makechar::@9
    // b |= bittab[ii]
    // [105] (byte) makechar::b#2 ← (byte) makechar::b#3 | *((const to_nomodify byte*) bittab + (byte) makechar::ii#3) -- vbuyy=vbuyy_bor_pbuc1_derefidx_vbuxx 
    tya
    ora bittab,x
    tay
    // [106] phi from makechar::@10 makechar::@9 to makechar::@8 [phi:makechar::@10/makechar::@9->makechar::@8]
    // [106] phi (byte) makechar::b#7 = (byte) makechar::b#3 [phi:makechar::@10/makechar::@9->makechar::@8#0] -- register_copy 
    // makechar::@8
  __b8:
    // for (ii = 0; ii < 8; ++ii)
    // [107] (byte) makechar::ii#2 ← ++ (byte) makechar::ii#3 -- vbuxx=_inc_vbuxx 
    inx
    // [92] phi from makechar::@8 to makechar::@5 [phi:makechar::@8->makechar::@5]
    // [92] phi (word) rand_state#19 = (word) rand_state#12 [phi:makechar::@8->makechar::@5#0] -- register_copy 
    // [92] phi (byte) makechar::b#3 = (byte) makechar::b#7 [phi:makechar::@8->makechar::@5#1] -- register_copy 
    // [92] phi (byte) makechar::ii#3 = (byte) makechar::ii#2 [phi:makechar::@8->makechar::@5#2] -- register_copy 
    jmp __b5
}
  // rand
// Returns a pseudo-random number in the range of 0 to RAND_MAX (65535)
// Uses an xorshift pseudorandom number generator that hits all different values
// Information https://en.wikipedia.org/wiki/Xorshift
// Source http://www.retroprogramming.com/2017/07/xorshift-pseudorandom-numbers-in-z80.html
rand: {
    .label __0 = $16
    .label __1 = $18
    .label __2 = $1a
    .label return = $13
    // rand_state << 7
    // [108] (word~) rand::$0 ← (word) rand_state#19 << (byte) 7 -- vwuz1=vwuz2_rol_7 
    lda.z rand_state+1
    lsr
    lda.z rand_state
    ror
    sta.z __0+1
    lda #0
    ror
    sta.z __0
    // rand_state ^= rand_state << 7
    // [109] (word) rand_state#0 ← (word) rand_state#19 ^ (word~) rand::$0 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z rand_state
    eor.z __0
    sta.z rand_state
    lda.z rand_state+1
    eor.z __0+1
    sta.z rand_state+1
    // rand_state >> 9
    // [110] (word~) rand::$1 ← (word) rand_state#0 >> (byte) 9 -- vwuz1=vwuz2_ror_9 
    lsr
    sta.z __1
    lda #0
    sta.z __1+1
    // rand_state ^= rand_state >> 9
    // [111] (word) rand_state#1 ← (word) rand_state#0 ^ (word~) rand::$1 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z rand_state
    eor.z __1
    sta.z rand_state
    lda.z rand_state+1
    eor.z __1+1
    sta.z rand_state+1
    // rand_state << 8
    // [112] (word~) rand::$2 ← (word) rand_state#1 << (byte) 8 -- vwuz1=vwuz2_rol_8 
    lda.z rand_state
    sta.z __2+1
    lda #0
    sta.z __2
    // rand_state ^= rand_state << 8
    // [113] (word) rand_state#12 ← (word) rand_state#1 ^ (word~) rand::$2 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z rand_state
    eor.z __2
    sta.z rand_state
    lda.z rand_state+1
    eor.z __2+1
    sta.z rand_state+1
    // return rand_state;
    // [114] (word) rand::return#0 ← (word) rand_state#12 -- vwuz1=vwuz2 
    lda.z rand_state
    sta.z return
    lda.z rand_state+1
    sta.z return+1
    // rand::@return
    // }
    // [115] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  .align $100
  sinustable: .byte $80, $7d, $7a, $77, $74, $70, $6d, $6a, $67, $64, $61, $5e, $5b, $58, $55, $52, $4f, $4d, $4a, $47, $44, $41, $3f, $3c, $39, $37, $34, $32, $2f, $2d, $2b, $28, $26, $24, $22, $20, $1e, $1c, $1a, $18, $16, $15, $13, $11, $10, $f, $d, $c, $b, $a, 8, 7, 6, 6, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 5, 6, 6, 7, 8, $a, $b, $c, $d, $f, $10, $11, $13, $15, $16, $18, $1a, $1c, $1e, $20, $22, $24, $26, $28, $2b, $2d, $2f, $32, $34, $37, $39, $3c, $3f, $41, $44, $47, $4a, $4d, $4f, $52, $55, $58, $5b, $5e, $61, $64, $67, $6a, $6d, $70, $74, $77, $7a, $7d, $80, $83, $86, $89, $8c, $90, $93, $96, $99, $9c, $9f, $a2, $a5, $a8, $ab, $ae, $b1, $b3, $b6, $b9, $bc, $bf, $c1, $c4, $c7, $c9, $cc, $ce, $d1, $d3, $d5, $d8, $da, $dc, $de, $e0, $e2, $e4, $e6, $e8, $ea, $eb, $ed, $ef, $f0, $f1, $f3, $f4, $f5, $f6, $f8, $f9, $fa, $fa, $fb, $fc, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fc, $fb, $fa, $fa, $f9, $f8, $f6, $f5, $f4, $f3, $f1, $f0, $ef, $ed, $eb, $ea, $e8, $e6, $e4, $e2, $e0, $de, $dc, $da, $d8, $d5, $d3, $d1, $ce, $cc, $c9, $c7, $c4, $c1, $bf, $bc, $b9, $b6, $b3, $b1, $ae, $ab, $a8, $a5, $a2, $9f, $9c, $99, $96, $93, $90, $8c, $89, $86, $83
  xbuf: .fill $28, 0
  ybuf: .fill $19, 0
  bittab: .byte 1, 2, 4, 8, $10, $20, $40, $80

