(label) @1
(label) @begin
(label) @end
(const byte*) BITMAP = (byte*) 40960
(const byte*) BORDERCOL = (byte*) 53280
(const byte*) CIA2_PORT_A = (byte*) 56576
(const byte*) CIA2_PORT_A_DDR = (byte*) 56578
(const byte*) D011 = (byte*) 53265
(const byte*) D018 = (byte*) 53272
(const byte) DELAY = (number) 8
(const byte*) PROCPORT = (byte*) 1
(const byte*) PROCPORT_DDR = (byte*) 0
(const byte) PROCPORT_DDR_MEMORY_MASK = (number) 7
(const byte) PROCPORT_RAM_IO = (number) 5
(const byte*) RASTER = (byte*) 53266
(const byte*) SCREEN = (byte*) 34816
(const byte) SIZE = (number) 4
(const byte) VIC_BMM = (number) $20
(const byte) VIC_DEN = (number) $10
(const byte) VIC_RSEL = (number) 8
(void()) bitmap_clear()
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@3
(label) bitmap_clear::@return
(byte*) bitmap_clear::bitmap
(word) bitmap_clear::bitmap#0 bitmap zp[2]:6 2.0
(byte*) bitmap_clear::bitmap#1 bitmap zp[2]:6 42.599999999999994
(byte*) bitmap_clear::bitmap#2 bitmap zp[2]:6 157.0
(byte*) bitmap_clear::bitmap#3 bitmap zp[2]:6 24.0
(byte*) bitmap_clear::bitmap#5 bitmap zp[2]:6 4.0
(byte) bitmap_clear::x
(byte) bitmap_clear::x#1 reg byte x 151.5
(byte) bitmap_clear::x#2 reg byte x 67.33333333333333
(byte) bitmap_clear::y
(byte) bitmap_clear::y#1 y zp[1]:18 16.5
(byte) bitmap_clear::y#4 y zp[1]:18 3.6666666666666665
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(byte~) bitmap_init::$4 reg byte a 22.0
(byte~) bitmap_init::$5 reg byte a 22.0
(byte~) bitmap_init::$6 reg byte a 22.0
(byte~) bitmap_init::$7 zp[1]:18 5.5
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@return
(byte*) bitmap_init::bitmap
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 reg byte a 11.0
(byte) bitmap_init::bits#3 reg byte a 16.5
(byte) bitmap_init::bits#4 reg byte a 7.333333333333333
(byte) bitmap_init::x
(byte) bitmap_init::x#1 reg byte x 16.5
(byte) bitmap_init::x#2 reg byte x 5.5
(byte) bitmap_init::y
(byte) bitmap_init::y#1 reg byte x 16.5
(byte) bitmap_init::y#2 reg byte x 5.5
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 yoffs zp[2]:8 22.0
(byte*) bitmap_init::yoffs#2 yoffs zp[2]:8 6.875
(byte*) bitmap_init::yoffs#4 yoffs zp[2]:8 11.0
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$1 zp[2]:14 4.0
(byte~) bitmap_plot::$2 reg byte a 4.0
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter#0 plotter zp[2]:12 1.0
(byte*) bitmap_plot::plotter#1 plotter zp[2]:12 3.0
(word) bitmap_plot::x
(word) bitmap_plot::x#0 x zp[2]:10 3.0
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 reg byte x 15.0
(const byte[$100]) bitmap_plot_bit = { fill( $100, 0) }
(const byte[$100]) bitmap_plot_yhi = { fill( $100, 0) }
(const byte[$100]) bitmap_plot_ylo = { fill( $100, 0) }
(const byte[SIZE]) delay = { fill( SIZE, 0) }
(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
(label) divr16s::@1
(label) divr16s::@10
(label) divr16s::@2
(label) divr16s::@3
(label) divr16s::@4
(label) divr16s::@5
(label) divr16s::@6
(label) divr16s::@7
(label) divr16s::@8
(label) divr16s::@9
(label) divr16s::@return
(signed word) divr16s::dividend
(word) divr16s::dividendu
(signed word) divr16s::divisor
(signed word) divr16s::divisor#0 divisor zp[2]:8 0.6666666666666666
(word) divr16s::divisoru
(signed word) divr16s::divisoru#1 divisoru zp[2]:8 1.0
(word) divr16s::divisoru#3 divisoru zp[2]:8 6.0
(word) divr16s::divisoru#4 divisoru zp[2]:8 4.0
(word) divr16s::divisoru#5 divisoru zp[2]:8 4.0
(byte) divr16s::neg
(byte) divr16s::neg#2 reg byte y 2.0
(byte) divr16s::neg#3 reg byte y 1.0
(byte) divr16s::neg#4 reg byte y 1.0
(signed word) divr16s::rem
(signed word) divr16s::rem#0 rem zp[2]:6 2.0
(word) divr16s::remu
(signed word) divr16s::remu#1 remu zp[2]:6 2.0
(word) divr16s::remu#3 remu zp[2]:6 0.75
(word) divr16s::remu#7 remu zp[2]:6 4.0
(word) divr16s::remu#8 remu zp[2]:6 4.0
(word) divr16s::resultu
(word) divr16s::resultu#0 resultu zp[2]:10 1.0
(signed word) divr16s::return
(signed word) divr16s::return#1 return zp[2]:10 4.0
(signed word) divr16s::return#2 return zp[2]:10 2.0
(signed word) divr16s::return#3 return zp[2]:10 4.0
(signed word) divr16s::return#7 return zp[2]:10 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 202.0
(byte~) divr16u::$2 reg byte a 202.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp[2]:2 25.25
(word) divr16u::dividend#2 dividend zp[2]:2 43.285714285714285
(word) divr16u::divisor
(word) divr16u::divisor#0 divisor zp[2]:8 11.333333333333332
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 151.5
(byte) divr16u::i#2 reg byte x 15.538461538461538
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp[2]:10 151.5
(word) divr16u::quotient#2 quotient zp[2]:10 101.0
(word) divr16u::quotient#3 quotient zp[2]:10 25.25
(word) divr16u::rem
(word) divr16u::rem#0 rem zp[2]:6 75.75
(word) divr16u::rem#1 rem zp[2]:6 202.0
(word) divr16u::rem#2 rem zp[2]:6 202.0
(word) divr16u::rem#3 rem zp[2]:6 2.0
(word) divr16u::rem#4 rem zp[2]:6 204.0
(word) divr16u::rem#5 rem zp[2]:6 101.0
(word) divr16u::rem#9 rem zp[2]:6 101.0
(word) divr16u::return
(word) divr16u::return#0 return zp[2]:10 61.0
(word) divr16u::return#2 return zp[2]:10 4.0
(void()) main()
(byte~) main::$10 reg byte a 22.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(byte) main::i
(byte) main::i#1 i zp[1]:18 16.5
(byte) main::i#2 i zp[1]:18 7.857142857142857
(label) main::toD0181
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >(word)(const byte*) SCREEN&(word) $3fff*(byte) 4|>(word)(const byte*) BITMAP/(byte) 4&(byte) $f
(byte*) main::toD0181_screen
(label) main::vicSelectGfxBank1
(label) main::vicSelectGfxBank1_@1
(byte*) main::vicSelectGfxBank1_gfx
(label) main::vicSelectGfxBank1_toDd001
(byte*) main::vicSelectGfxBank1_toDd001_gfx
(byte) main::vicSelectGfxBank1_toDd001_return
(const byte) main::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = (byte) 3^>(word)(const byte*) SCREEN/(byte) $40
(void()) point_init((byte) point_init::point_idx)
(word~) point_init::$10 zp[2]:16 4.0
(word~) point_init::$11 zp[2]:16 4.0
(byte~) point_init::$14 reg byte a 4.0
(byte~) point_init::$16 reg byte a 2.0
(byte~) point_init::$18 reg byte a 2.0
(byte~) point_init::$20 reg byte x 1.6
(signed word~) point_init::$3 zp[2]:6 2.0
(signed word~) point_init::$4 zp[2]:12 4.0
(word~) point_init::$9 zp[2]:14 4.0
(label) point_init::@1
(label) point_init::@2
(label) point_init::@3
(label) point_init::@4
(label) point_init::@5
(label) point_init::@6
(label) point_init::@7
(label) point_init::@return
(label) point_init::abs16s1
(label) point_init::abs16s1_@1
(label) point_init::abs16s1_@3
(label) point_init::abs16s1_@return
(word) point_init::abs16s1_return
(signed word) point_init::abs16s1_return#0 abs16s1_return zp[2]:2 2.0
(word) point_init::abs16s1_return#2 abs16s1_return zp[2]:2 1.0
(word) point_init::abs16s1_return#5 abs16s1_return zp[2]:2 4.0
(word) point_init::abs16s1_return#6 abs16s1_return zp[2]:2 4.0
(signed word) point_init::abs16s1_w
(label) point_init::abs16s2
(label) point_init::abs16s2_@1
(label) point_init::abs16s2_@3
(label) point_init::abs16s2_@return
(word) point_init::abs16s2_return
(signed word) point_init::abs16s2_return#0 abs16s2_return zp[2]:4 2.0
(word) point_init::abs16s2_return#2 abs16s2_return zp[2]:4 6.0
(word) point_init::abs16s2_return#5 abs16s2_return zp[2]:4 4.0
(word) point_init::abs16s2_return#6 abs16s2_return zp[2]:4 4.0
(signed word) point_init::abs16s2_w
(byte) point_init::point_idx
(byte) point_init::point_idx#0 point_idx zp[1]:18 0.6764705882352942
(signed word) point_init::x_diff
(signed word) point_init::x_diff#1 x_diff zp[2]:8 0.5555555555555556
(signed word) point_init::x_stepf
(signed word) point_init::x_stepf#0 x_stepf zp[2]:10 4.0
(signed word) point_init::y_diff
(signed word) point_init::y_diff#0 y_diff zp[2]:6 0.5
(void()) screen_fill((byte*) screen_fill::screen , (byte) screen_fill::ch)
(label) screen_fill::@1
(label) screen_fill::@2
(label) screen_fill::@3
(label) screen_fill::@return
(byte) screen_fill::ch
(const byte) screen_fill::ch#0 ch = (byte) $10
(byte*) screen_fill::screen
(byte*) screen_fill::screen#1 screen zp[2]:4 42.599999999999994
(byte*) screen_fill::screen#2 screen zp[2]:4 157.0
(byte*) screen_fill::screen#3 screen zp[2]:4 22.0
(byte) screen_fill::x
(byte) screen_fill::x#1 reg byte x 151.5
(byte) screen_fill::x#2 reg byte x 67.33333333333333
(byte) screen_fill::y
(byte) screen_fill::y#1 y zp[1]:18 16.5
(byte) screen_fill::y#4 y zp[1]:18 3.6666666666666665
(const signed byte[SIZE]) x_add = { fill( SIZE, 0) }
(const word[SIZE]) x_cur = { fill( SIZE, 0) }
(const word[SIZE]) x_end = { (word) $14, (word) $a, (word) $14, (word) $14 }
(const word[SIZE]) x_start = { (word) $a, (word) $14, (word) $1e, (word) $1e }
(const signed byte[SIZE]) y_add = { fill( SIZE, 0) }
(const word[SIZE]) y_cur = { fill( SIZE, 0) }
(const byte[SIZE]) y_end = { (byte) $14, (byte) $14, (byte) $a, (byte) $14 }
(const byte[SIZE]) y_start = { (byte) $a, (byte) $a, (byte) $a, (byte) $14 }

reg byte y [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
zp[2]:2 [ divr16u::dividend#2 divr16u::dividend#0 point_init::abs16s1_return#2 point_init::abs16s1_return#5 point_init::abs16s1_return#6 point_init::abs16s1_return#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[2]:4 [ screen_fill::screen#2 screen_fill::screen#3 screen_fill::screen#1 point_init::abs16s2_return#2 point_init::abs16s2_return#5 point_init::abs16s2_return#6 point_init::abs16s2_return#0 ]
reg byte x [ screen_fill::x#2 screen_fill::x#1 ]
zp[2]:6 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 divr16s::remu#3 divr16s::remu#7 divr16s::remu#8 divr16u::rem#4 divr16u::rem#3 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 divr16s::rem#0 divr16s::remu#1 point_init::$3 point_init::y_diff#0 ]
reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ]
reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
zp[2]:8 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16s::divisor#0 divr16u::divisor#0 divr16s::divisoru#1 point_init::x_diff#1 ]
reg byte a [ main::$10 ]
zp[2]:10 [ bitmap_plot::x#0 divr16s::return#2 divr16s::return#1 divr16s::return#7 divr16s::resultu#0 divr16s::return#3 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 point_init::x_stepf#0 ]
reg byte x [ bitmap_plot::y#0 ]
reg byte a [ bitmap_plot::$2 ]
reg byte a [ point_init::$18 ]
zp[2]:12 [ point_init::$4 bitmap_plot::plotter#0 bitmap_plot::plotter#1 ]
reg byte x [ point_init::$20 ]
zp[2]:14 [ point_init::$9 bitmap_plot::$1 ]
zp[2]:16 [ point_init::$10 point_init::$11 ]
reg byte a [ point_init::$14 ]
reg byte a [ point_init::$16 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
zp[1]:18 [ bitmap_init::$7 bitmap_clear::y#4 bitmap_clear::y#1 screen_fill::y#4 screen_fill::y#1 main::i#2 main::i#1 point_init::point_idx#0 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]
