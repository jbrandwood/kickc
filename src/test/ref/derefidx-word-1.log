
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  *((const nomodify byte*) main::screen + (number) $28*(number) $a) ← (byte) 'a'
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(label) main::@return
(const nomodify byte*) main::screen = (byte*)(number) $400

Adding number conversion cast (unumber) $28*$a in *((const nomodify byte*) main::screen + (number) $28*(number) $a) ← (byte) 'a'
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
De-inlining pointer[w] to *(pointer+w)   [0] *((const nomodify byte*) main::screen + (word)(number) $28*(number) $a) ← (byte) 'a'
Successful SSA optimization Pass2DeInlineWordDerefIdx
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [0] (byte*~) main::$0 ← (const nomodify byte*) main::screen + (word)(number) $28*(number) $a
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::$0 = main::screen+(word)$28*$a
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$0 = (const nomodify byte*) main::screen+(word)(number) $28*(number) $a
Successful SSA optimization Pass2ConstantInlining
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) main::screen+(word)(number) $28*(number) $a) ← (byte) 'a'
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests that array-indexing by a constant word is turned into a constant pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    // [0] *((const nomodify byte*) main::screen+(word)(number) $28*(number) $a) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta screen+$28*$a
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify byte*) main::screen+(word)(number) $28*(number) $a) ← (byte) 'a' [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 15 combination 
Uplifting [] best 15 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests that array-indexing by a constant word is turned into a constant pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    // [0] *((const nomodify byte*) main::screen+(word)(number) $28*(number) $a) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta screen+$28*$a
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@return
(const nomodify byte*) main::screen = (byte*) 1024



FINAL ASSEMBLER
Score: 12

  // File Comments
// Tests that array-indexing by a constant word is turned into a constant pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    // screen[40*10] = 'a'
    // [0] *((const nomodify byte*) main::screen+(word)(number) $28*(number) $a) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta screen+$28*$a
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data

