constant byte* const BG_COLOR = (byte*) 53281
constant byte* const BG_COLOR1 = (byte*) 53282
constant byte* const BG_COLOR2 = (byte*) 53283
constant byte* const BG_COLOR3 = (byte*) 53284
constant const byte BLACK = 0
constant const byte BLUE = 6
constant byte* const BORDER_COLOR = (byte*) 53280
constant byte* const D018 = (byte*) 53272
constant const byte GREEN = 5
constant const byte RED = 2
constant byte* const SPRITES_COLOR = (byte*) 53287
constant byte* const SPRITES_ENABLE = (byte*) 53269
constant byte* const SPRITES_EXPAND_X = (byte*) 53277
constant byte* const SPRITES_EXPAND_Y = (byte*) 53271
constant byte* const SPRITES_MC = (byte*) 53276
constant byte* const SPRITES_XMSB = (byte*) 53264
constant const byte WHITE = 1
constant const byte YELLOW = 7
constant byte* const charset = (byte*) 8192
constant byte* const colors = (byte*) 55296
void draw_block(byte draw_block::tileno , byte draw_block::x , byte draw_block::y , byte draw_block::color)
word~ draw_block::$10 zp[2]:20 1001.0
byte*~ draw_block::$11 zp[2]:6 2002.0
byte*~ draw_block::$12 zp[2]:8 2002.0
byte*~ draw_block::$13 zp[2]:12 2002.0
byte*~ draw_block::$14 zp[2]:10 2002.0
byte*~ draw_block::$15 zp[2]:16 2002.0
byte*~ draw_block::$16 zp[2]:14 2002.0
byte*~ draw_block::$17 zp[2]:18 2002.0
byte*~ draw_block::$18 zp[2]:20 2002.0
word~ draw_block::$6 zp[2]:10 1001.0
word~ draw_block::$8 zp[2]:14 1001.0
byte draw_block::color
byte draw_block::drawtile
byte draw_block::drawtile#0 reg byte x 1001.0
byte draw_block::tileno
byte draw_block::tileno#0 reg byte y 367.33333333333337
byte draw_block::tileno#1 reg byte y 250.25
byte draw_block::x
byte draw_block::x#0 reg byte x 367.33333333333337
word draw_block::x1
word draw_block::x1#0 x1 zp[2]:20 333.6666666666667
byte draw_block::y
byte draw_block::y#0 y zp[1]:3 367.33333333333337
byte draw_block::y#1 reg byte a 2002.0
word draw_block::z
word draw_block::z#0 z zp[2]:4 2002.0
word draw_block::z#1 z_1 zp[2]:20 375.375
void init()
byte* init::toD0181_gfx
byte init::toD0181_return
constant byte init::toD0181_return#0 toD0181_return = byte1 (word)screen&$3fff*4|byte1 (word)charset/4&$f
byte* init::toD0181_screen
void init_sprites()
constant byte* const level_address = (byte*) 12288
void main()
byte main::tile
byte main::tile#0 reg byte y 202.0
byte main::x
byte main::x#1 x zp[1]:2 22.0
byte main::x#2 x zp[1]:2 21.363636363636363
byte main::y
byte main::y#1 y zp[1]:3 202.0
byte main::y#2 y zp[1]:3 63.125
byte main::z
byte main::z#0 reg byte a 202.0
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 reg byte x 143.0
byte* memset::dst
byte* memset::dst#1 dst zp[2]:4 2002.0
byte* memset::dst#2 dst zp[2]:4 1368.3333333333335
byte* memset::dst#4 dst zp[2]:4 202.0
byte* memset::end
byte* memset::end#0 end zp[2]:20 183.66666666666669
word memset::num
void* memset::return
void* memset::str
void* memset::str#3 str zp[2]:4
word mul8u(byte mul8u::a , byte mul8u::b)
byte~ mul8u::$1 reg byte a 2.0000002E7
byte mul8u::a
byte mul8u::a#0 reg byte x 1.0000001E7
byte mul8u::a#1 reg byte x 5501.0
byte mul8u::a#2 reg byte x 6668334.166666666
byte mul8u::b
constant byte mul8u::b#0 b = $28
word mul8u::mb
word mul8u::mb#1 mb zp[2]:6 2.0000002E7
word mul8u::mb#2 mb zp[2]:6 4285714.714285715
word mul8u::res
word mul8u::res#1 res zp[2]:4 2.0000002E7
word mul8u::res#2 res zp[2]:4 5000167.333333333
word mul8u::res#6 res zp[2]:4 1.0000001E7
word mul8u::return
word mul8u::return#2 return zp[2]:4 2002.0
constant byte* const screen = (byte*) 1024
constant byte* const tileset = (byte*) 10240

zp[1]:2 [ main::x#2 main::x#1 ]
zp[1]:3 [ main::y#2 main::y#1 draw_block::y#0 ]
reg byte x [ memset::c#4 ]
reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
zp[2]:4 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 draw_block::z#0 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
reg byte a [ main::z#0 ]
reg byte y [ main::tile#0 ]
reg byte y [ draw_block::tileno#0 ]
reg byte x [ draw_block::x#0 ]
reg byte y [ draw_block::tileno#1 ]
reg byte a [ draw_block::y#1 ]
reg byte x [ draw_block::drawtile#0 ]
zp[2]:6 [ draw_block::$11 mul8u::mb#2 mul8u::mb#1 ]
zp[2]:8 [ draw_block::$12 ]
zp[2]:10 [ draw_block::$6 draw_block::$14 ]
zp[2]:12 [ draw_block::$13 ]
zp[2]:14 [ draw_block::$8 draw_block::$16 ]
zp[2]:16 [ draw_block::$15 ]
zp[2]:18 [ draw_block::$17 ]
zp[2]:20 [ memset::end#0 draw_block::x1#0 draw_block::z#1 draw_block::$10 draw_block::$18 ]
reg byte a [ mul8u::$1 ]
