@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call malloc 
  [6] (byte*) malloc::return#2 ← (byte*) malloc::return#0
  to:main::@3
main::@3: scope:[main]  from main
  [7] (byte*) main::buf1#0 ← (byte*) malloc::return#2
  [8] call malloc 
  [9] (byte*) malloc::return#3 ← (byte*) malloc::return#0
  to:main::@4
main::@4: scope:[main]  from main::@3
  [10] (byte*) main::buf2#0 ← (byte*) malloc::return#3
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@4
  [11] (byte) main::i#2 ← phi( main::@1/(byte) main::i#1 main::@4/(byte) 0 )
  [12] *((byte*) main::buf1#0 + (byte) main::i#2) ← (byte) main::i#2
  [13] (byte~) main::$6 ← (byte) $ff - (byte) main::i#2
  [14] *((byte*) main::buf2#0 + (byte) main::i#2) ← (byte~) main::$6
  [15] (byte) main::i#1 ← ++ (byte) main::i#2
  [16] if((byte) main::i#1!=(byte) $64) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [17] phi()
  [18] call free 
  to:main::@5
main::@5: scope:[main]  from main::@2
  [19] phi()
  [20] call free 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [21] *((const byte*) main::screen#0) ← *((byte*) main::buf1#0)
  [22] *((const byte*) main::screen#0+(byte) 1) ← *((byte*) main::buf2#0)
  to:main::@return
main::@return: scope:[main]  from main::@6
  [23] return 
  to:@return
free: scope:[free]  from main::@2 main::@5
  [24] phi()
  to:free::@return
free::@return: scope:[free]  from free
  [25] return 
  to:@return
malloc: scope:[malloc]  from main main::@3
  [26] (byte*) heap_head#7 ← phi( main/(const byte*) HEAP_START#0 main::@3/(byte*) heap_head#1 )
  [27] (byte*) malloc::return#0 ← (byte*) heap_head#7
  [28] (byte*) heap_head#1 ← (byte*) heap_head#7 + (byte) $64
  to:malloc::@return
malloc::@return: scope:[malloc]  from malloc
  [29] return 
  to:@return
