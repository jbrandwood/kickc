Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to SPRITE_BUFFER
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Inlined call call disableVideoOutput 
Inlined call call disableAudioOutput 
Inlined call call clearVBlankFlag 
Inlined call call waitForVBlank 
Inlined call call waitForVBlank 
Inlined call call ppuDataPrepare ppuDataFill::ppuData 
Inlined call call ppuDataPut ppuDataFill::val 
Inlined call call ppuDataPrepare ppuDataTransfer::ppuData 
Inlined call call ppuDataPut *ppuDataTransfer::cpuSrc 
Inlined call call ppuDataPrepare ppuDataFetch::ppuData 
Inlined call ppuDataFetch::$2 = call ppuDataRead 
Inlined call call ppuDataPrepare ppuDataPutTile::ppuData 
Inlined call call ppuDataPut ppuDataPutTile::tile[0] 
Inlined call call ppuDataPut ppuDataPutTile::tile[1] 
Inlined call call ppuDataPrepare (void*)ppuDataPutTile::$3 
Inlined call call ppuDataPut ppuDataPutTile::tile[2] 
Inlined call call ppuDataPut ppuDataPutTile::tile[3] 
Inlined call call ppuDataPrepare ppuDataSet::ppuData 
Inlined call call ppuDataPut ppuDataSet::val 
Inlined call call ppuDataPrepare ppuDataGet::ppuData 
Inlined call ppuDataGet::$1 = call ppuDataRead 
Inlined call call initNES 
Inlined call call enableVideoOutput 
Inlined call call ppuSpriteBufferDmaTransfer SPRITE_BUFFER 
Inlined call call __init 
Eliminating unused variable with no statement printf_buffer

CONTROL FLOW GRAPH SSA

void ppuDataFill(nomodify void* ppuDataFill::ppuData , byte ppuDataFill::val , word ppuDataFill::size)
ppuDataFill: scope:[ppuDataFill]  from main::@20 main::@21
  ppuDataFill::val#8 = phi( main::@20/ppuDataFill::val#0, main::@21/ppuDataFill::val#1 )
  ppuDataFill::size#7 = phi( main::@20/ppuDataFill::size#0, main::@21/ppuDataFill::size#1 )
  ppuDataFill::ppuData#2 = phi( main::@20/ppuDataFill::ppuData#0, main::@21/ppuDataFill::ppuData#1 )
  ppuDataFill::ppuDataPrepare1_ppuData#0 = ppuDataFill::ppuData#2
  to:ppuDataFill::ppuDataPrepare1
ppuDataFill::ppuDataPrepare1: scope:[ppuDataFill]  from ppuDataFill
  ppuDataFill::val#6 = phi( ppuDataFill/ppuDataFill::val#8 )
  ppuDataFill::size#5 = phi( ppuDataFill/ppuDataFill::size#7 )
  ppuDataFill::ppuDataPrepare1_ppuData#1 = phi( ppuDataFill/ppuDataFill::ppuDataPrepare1_ppuData#0 )
  ppuDataFill::ppuDataPrepare1_$0 = > ppuDataFill::ppuDataPrepare1_ppuData#1
  ppuDataFill::ppuDataPrepare1_$4 = (byte*)PPU
  ppuDataFill::ppuDataPrepare1_$2 = ppuDataFill::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *ppuDataFill::ppuDataPrepare1_$2 = ppuDataFill::ppuDataPrepare1_$0
  ppuDataFill::ppuDataPrepare1_$1 = < ppuDataFill::ppuDataPrepare1_ppuData#1
  ppuDataFill::ppuDataPrepare1_$5 = (byte*)PPU
  ppuDataFill::ppuDataPrepare1_$3 = ppuDataFill::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *ppuDataFill::ppuDataPrepare1_$3 = ppuDataFill::ppuDataPrepare1_$1
  to:ppuDataFill::@3
ppuDataFill::@3: scope:[ppuDataFill]  from ppuDataFill::ppuDataPrepare1
  ppuDataFill::val#4 = phi( ppuDataFill::ppuDataPrepare1/ppuDataFill::val#6 )
  ppuDataFill::size#3 = phi( ppuDataFill::ppuDataPrepare1/ppuDataFill::size#5 )
  ppuDataFill::i#0 = 0
  to:ppuDataFill::@1
ppuDataFill::@1: scope:[ppuDataFill]  from ppuDataFill::@3 ppuDataFill::@4
  ppuDataFill::val#3 = phi( ppuDataFill::@3/ppuDataFill::val#4, ppuDataFill::@4/ppuDataFill::val#5 )
  ppuDataFill::size#2 = phi( ppuDataFill::@3/ppuDataFill::size#3, ppuDataFill::@4/ppuDataFill::size#4 )
  ppuDataFill::i#2 = phi( ppuDataFill::@3/ppuDataFill::i#0, ppuDataFill::@4/ppuDataFill::i#1 )
  ppuDataFill::$1 = ppuDataFill::i#2 < ppuDataFill::size#2
  if(ppuDataFill::$1) goto ppuDataFill::@2
  to:ppuDataFill::@return
ppuDataFill::@2: scope:[ppuDataFill]  from ppuDataFill::@1
  ppuDataFill::size#8 = phi( ppuDataFill::@1/ppuDataFill::size#2 )
  ppuDataFill::i#5 = phi( ppuDataFill::@1/ppuDataFill::i#2 )
  ppuDataFill::val#2 = phi( ppuDataFill::@1/ppuDataFill::val#3 )
  ppuDataFill::ppuDataPut1_val#0 = ppuDataFill::val#2
  to:ppuDataFill::ppuDataPut1
ppuDataFill::ppuDataPut1: scope:[ppuDataFill]  from ppuDataFill::@2
  ppuDataFill::val#7 = phi( ppuDataFill::@2/ppuDataFill::val#2 )
  ppuDataFill::size#6 = phi( ppuDataFill::@2/ppuDataFill::size#8 )
  ppuDataFill::i#4 = phi( ppuDataFill::@2/ppuDataFill::i#5 )
  ppuDataFill::ppuDataPut1_val#1 = phi( ppuDataFill::@2/ppuDataFill::ppuDataPut1_val#0 )
  ppuDataFill::ppuDataPut1_$1 = (byte*)PPU
  ppuDataFill::ppuDataPut1_$0 = ppuDataFill::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *ppuDataFill::ppuDataPut1_$0 = ppuDataFill::ppuDataPut1_val#1
  to:ppuDataFill::@4
ppuDataFill::@4: scope:[ppuDataFill]  from ppuDataFill::ppuDataPut1
  ppuDataFill::val#5 = phi( ppuDataFill::ppuDataPut1/ppuDataFill::val#7 )
  ppuDataFill::size#4 = phi( ppuDataFill::ppuDataPut1/ppuDataFill::size#6 )
  ppuDataFill::i#3 = phi( ppuDataFill::ppuDataPut1/ppuDataFill::i#4 )
  ppuDataFill::i#1 = ++ ppuDataFill::i#3
  to:ppuDataFill::@1
ppuDataFill::@return: scope:[ppuDataFill]  from ppuDataFill::@1
  return 
  to:@return

void ppuDataTransfer(nomodify void* ppuDataTransfer::ppuData , nomodify void* ppuDataTransfer::cpuData , word ppuDataTransfer::size)
ppuDataTransfer: scope:[ppuDataTransfer]  from main::@18 main::@22
  ppuDataTransfer::size#7 = phi( main::@18/ppuDataTransfer::size#0, main::@22/ppuDataTransfer::size#1 )
  ppuDataTransfer::cpuData#4 = phi( main::@18/ppuDataTransfer::cpuData#0, main::@22/ppuDataTransfer::cpuData#1 )
  ppuDataTransfer::ppuData#2 = phi( main::@18/ppuDataTransfer::ppuData#0, main::@22/ppuDataTransfer::ppuData#1 )
  ppuDataTransfer::ppuDataPrepare1_ppuData#0 = ppuDataTransfer::ppuData#2
  to:ppuDataTransfer::ppuDataPrepare1
ppuDataTransfer::ppuDataPrepare1: scope:[ppuDataTransfer]  from ppuDataTransfer
  ppuDataTransfer::size#5 = phi( ppuDataTransfer/ppuDataTransfer::size#7 )
  ppuDataTransfer::cpuData#3 = phi( ppuDataTransfer/ppuDataTransfer::cpuData#4 )
  ppuDataTransfer::ppuDataPrepare1_ppuData#1 = phi( ppuDataTransfer/ppuDataTransfer::ppuDataPrepare1_ppuData#0 )
  ppuDataTransfer::ppuDataPrepare1_$0 = > ppuDataTransfer::ppuDataPrepare1_ppuData#1
  ppuDataTransfer::ppuDataPrepare1_$4 = (byte*)PPU
  ppuDataTransfer::ppuDataPrepare1_$2 = ppuDataTransfer::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *ppuDataTransfer::ppuDataPrepare1_$2 = ppuDataTransfer::ppuDataPrepare1_$0
  ppuDataTransfer::ppuDataPrepare1_$1 = < ppuDataTransfer::ppuDataPrepare1_ppuData#1
  ppuDataTransfer::ppuDataPrepare1_$5 = (byte*)PPU
  ppuDataTransfer::ppuDataPrepare1_$3 = ppuDataTransfer::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *ppuDataTransfer::ppuDataPrepare1_$3 = ppuDataTransfer::ppuDataPrepare1_$1
  to:ppuDataTransfer::@3
ppuDataTransfer::@3: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPrepare1
  ppuDataTransfer::size#3 = phi( ppuDataTransfer::ppuDataPrepare1/ppuDataTransfer::size#5 )
  ppuDataTransfer::cpuData#2 = phi( ppuDataTransfer::ppuDataPrepare1/ppuDataTransfer::cpuData#3 )
  ppuDataTransfer::cpuSrc#0 = (byte*)ppuDataTransfer::cpuData#2
  ppuDataTransfer::i#0 = 0
  to:ppuDataTransfer::@1
ppuDataTransfer::@1: scope:[ppuDataTransfer]  from ppuDataTransfer::@3 ppuDataTransfer::@4
  ppuDataTransfer::cpuSrc#4 = phi( ppuDataTransfer::@3/ppuDataTransfer::cpuSrc#0, ppuDataTransfer::@4/ppuDataTransfer::cpuSrc#1 )
  ppuDataTransfer::size#2 = phi( ppuDataTransfer::@3/ppuDataTransfer::size#3, ppuDataTransfer::@4/ppuDataTransfer::size#4 )
  ppuDataTransfer::i#2 = phi( ppuDataTransfer::@3/ppuDataTransfer::i#0, ppuDataTransfer::@4/ppuDataTransfer::i#1 )
  ppuDataTransfer::$1 = ppuDataTransfer::i#2 < ppuDataTransfer::size#2
  if(ppuDataTransfer::$1) goto ppuDataTransfer::@2
  to:ppuDataTransfer::@return
ppuDataTransfer::@2: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  ppuDataTransfer::size#8 = phi( ppuDataTransfer::@1/ppuDataTransfer::size#2 )
  ppuDataTransfer::i#5 = phi( ppuDataTransfer::@1/ppuDataTransfer::i#2 )
  ppuDataTransfer::cpuSrc#2 = phi( ppuDataTransfer::@1/ppuDataTransfer::cpuSrc#4 )
  ppuDataTransfer::ppuDataPut1_val#0 = *ppuDataTransfer::cpuSrc#2
  to:ppuDataTransfer::ppuDataPut1
ppuDataTransfer::ppuDataPut1: scope:[ppuDataTransfer]  from ppuDataTransfer::@2
  ppuDataTransfer::size#6 = phi( ppuDataTransfer::@2/ppuDataTransfer::size#8 )
  ppuDataTransfer::i#4 = phi( ppuDataTransfer::@2/ppuDataTransfer::i#5 )
  ppuDataTransfer::cpuSrc#5 = phi( ppuDataTransfer::@2/ppuDataTransfer::cpuSrc#2 )
  ppuDataTransfer::ppuDataPut1_val#1 = phi( ppuDataTransfer::@2/ppuDataTransfer::ppuDataPut1_val#0 )
  ppuDataTransfer::ppuDataPut1_$1 = (byte*)PPU
  ppuDataTransfer::ppuDataPut1_$0 = ppuDataTransfer::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *ppuDataTransfer::ppuDataPut1_$0 = ppuDataTransfer::ppuDataPut1_val#1
  to:ppuDataTransfer::@4
ppuDataTransfer::@4: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPut1
  ppuDataTransfer::size#4 = phi( ppuDataTransfer::ppuDataPut1/ppuDataTransfer::size#6 )
  ppuDataTransfer::i#3 = phi( ppuDataTransfer::ppuDataPut1/ppuDataTransfer::i#4 )
  ppuDataTransfer::cpuSrc#3 = phi( ppuDataTransfer::ppuDataPut1/ppuDataTransfer::cpuSrc#5 )
  ppuDataTransfer::cpuSrc#1 = ++ ppuDataTransfer::cpuSrc#3
  ppuDataTransfer::i#1 = ++ ppuDataTransfer::i#3
  to:ppuDataTransfer::@1
ppuDataTransfer::@return: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  return 
  to:@return

word rand()
rand: scope:[rand]  from main::@2 main::@24
  rand_state#10 = phi( main::@2/rand_state#17, main::@24/rand_state#4 )
  rand::$0 = rand_state#10 << 7
  rand_state#0 = rand_state#10 ^ rand::$0
  rand::$1 = rand_state#0 >> 9
  rand_state#1 = rand_state#0 ^ rand::$1
  rand::$2 = rand_state#1 << 8
  rand_state#2 = rand_state#1 ^ rand::$2
  rand::return#0 = rand_state#2
  to:rand::@return
rand::@return: scope:[rand]  from rand
  rand_state#11 = phi( rand/rand_state#2 )
  rand::return#4 = phi( rand/rand::return#0 )
  rand::return#1 = rand::return#4
  rand_state#3 = rand_state#11
  return 
  to:@return

signed word main()
main: scope:[main]  from __start::@1
  rand_state#53 = phi( __start::@1/rand_state#19 )
  to:main::initNES1
main::initNES1: scope:[main]  from main
  rand_state#52 = phi( main/rand_state#53 )
  asm { cld ldx#$ff txs  }
  to:main::initNES1_disableVideoOutput1
main::initNES1_disableVideoOutput1: scope:[main]  from main::initNES1
  rand_state#51 = phi( main::initNES1/rand_state#52 )
  main::initNES1_disableVideoOutput1_$2 = (byte*)PPU
  main::initNES1_disableVideoOutput1_$0 = main::initNES1_disableVideoOutput1_$2 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL
  *main::initNES1_disableVideoOutput1_$0 = 0
  main::initNES1_disableVideoOutput1_$3 = (byte*)PPU
  main::initNES1_disableVideoOutput1_$1 = main::initNES1_disableVideoOutput1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUMASK
  *main::initNES1_disableVideoOutput1_$1 = 0
  to:main::initNES1_disableAudioOutput1
main::initNES1_disableAudioOutput1: scope:[main]  from main::initNES1_disableVideoOutput1
  rand_state#50 = phi( main::initNES1_disableVideoOutput1/rand_state#51 )
  *FR_COUNTER = $40
  main::initNES1_disableAudioOutput1_$1 = (byte*)APU
  main::initNES1_disableAudioOutput1_$0 = main::initNES1_disableAudioOutput1_$1 + OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
  *main::initNES1_disableAudioOutput1_$0 = $40
  to:main::initNES1_clearVBlankFlag1
main::initNES1_clearVBlankFlag1: scope:[main]  from main::initNES1_disableAudioOutput1
  rand_state#49 = phi( main::initNES1_disableAudioOutput1/rand_state#50 )
  asm { ldaPPU_PPUSTATUS  }
  to:main::initNES1_waitForVBlank1
main::initNES1_waitForVBlank1: scope:[main]  from main::initNES1_clearVBlankFlag1
  rand_state#48 = phi( main::initNES1_clearVBlankFlag1/rand_state#49 )
  to:main::initNES1_waitForVBlank1_@1
main::initNES1_waitForVBlank1_@1: scope:[main]  from main::initNES1_waitForVBlank1 main::initNES1_waitForVBlank1_@1
  rand_state#47 = phi( main::initNES1_waitForVBlank1/rand_state#48, main::initNES1_waitForVBlank1_@1/rand_state#47 )
  main::initNES1_waitForVBlank1_$3 = (byte*)PPU
  main::initNES1_waitForVBlank1_$2 = main::initNES1_waitForVBlank1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
  main::initNES1_waitForVBlank1_$0 = *main::initNES1_waitForVBlank1_$2 & $80
  main::initNES1_waitForVBlank1_$4 = 0 != main::initNES1_waitForVBlank1_$0
  main::initNES1_waitForVBlank1_$1 = ! main::initNES1_waitForVBlank1_$4
  if(main::initNES1_waitForVBlank1_$1) goto main::initNES1_waitForVBlank1_@1
  to:main::initNES1_@6
main::initNES1_@6: scope:[main]  from main::initNES1_waitForVBlank1_@1
  rand_state#46 = phi( main::initNES1_waitForVBlank1_@1/rand_state#47 )
  main::initNES1_i#0 = 0
  to:main::initNES1_@1
main::initNES1_@1: scope:[main]  from main::initNES1_@1 main::initNES1_@6
  rand_state#45 = phi( main::initNES1_@1/rand_state#45, main::initNES1_@6/rand_state#46 )
  main::initNES1_i#2 = phi( main::initNES1_@1/main::initNES1_i#1, main::initNES1_@6/main::initNES1_i#0 )
  (MEMORY+0)[main::initNES1_i#2] = 0
  (MEMORY+$100)[main::initNES1_i#2] = 0
  (MEMORY+$200)[main::initNES1_i#2] = 0
  (MEMORY+$300)[main::initNES1_i#2] = 0
  (MEMORY+$400)[main::initNES1_i#2] = 0
  (MEMORY+$500)[main::initNES1_i#2] = 0
  (MEMORY+$600)[main::initNES1_i#2] = 0
  (MEMORY+$700)[main::initNES1_i#2] = 0
  main::initNES1_i#1 = ++ main::initNES1_i#2
  main::initNES1_$5 = 0 != main::initNES1_i#1
  if(main::initNES1_$5) goto main::initNES1_@1
  to:main::initNES1_waitForVBlank2
main::initNES1_waitForVBlank2: scope:[main]  from main::initNES1_@1
  rand_state#44 = phi( main::initNES1_@1/rand_state#45 )
  to:main::initNES1_waitForVBlank2_@1
main::initNES1_waitForVBlank2_@1: scope:[main]  from main::initNES1_waitForVBlank2 main::initNES1_waitForVBlank2_@1
  rand_state#43 = phi( main::initNES1_waitForVBlank2/rand_state#44, main::initNES1_waitForVBlank2_@1/rand_state#43 )
  main::initNES1_waitForVBlank2_$3 = (byte*)PPU
  main::initNES1_waitForVBlank2_$2 = main::initNES1_waitForVBlank2_$3 + OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
  main::initNES1_waitForVBlank2_$0 = *main::initNES1_waitForVBlank2_$2 & $80
  main::initNES1_waitForVBlank2_$4 = 0 != main::initNES1_waitForVBlank2_$0
  main::initNES1_waitForVBlank2_$1 = ! main::initNES1_waitForVBlank2_$4
  if(main::initNES1_waitForVBlank2_$1) goto main::initNES1_waitForVBlank2_@1
  to:main::initNES1_@7
main::initNES1_@7: scope:[main]  from main::initNES1_waitForVBlank2_@1
  rand_state#42 = phi( main::initNES1_waitForVBlank2_@1/rand_state#43 )
  asm { ldaPPU_PPUSTATUS  }
  to:main::@18
main::@18: scope:[main]  from main::initNES1_@7
  rand_state#39 = phi( main::initNES1_@7/rand_state#42 )
  main::$1 = sizeof  palette
  ppuDataTransfer::ppuData#0 = (void*)PPU_PALETTE
  ppuDataTransfer::cpuData#0 = (void*)palette
  ppuDataTransfer::size#0 = main::$1
  call ppuDataTransfer 
  to:main::@20
main::@20: scope:[main]  from main::@18
  rand_state#33 = phi( main::@18/rand_state#39 )
  ppuDataFill::ppuData#0 = (void*)PPU_NAME_TABLE_0
  ppuDataFill::val#0 = 0
  ppuDataFill::size#0 = $20*$1e
  call ppuDataFill 
  to:main::@21
main::@21: scope:[main]  from main::@20
  rand_state#30 = phi( main::@20/rand_state#33 )
  ppuDataFill::ppuData#1 = (void*)PPU_ATTRIBUTE_TABLE_0
  ppuDataFill::val#1 = 0
  ppuDataFill::size#1 = $40
  call ppuDataFill 
  to:main::@22
main::@22: scope:[main]  from main::@21
  rand_state#28 = phi( main::@21/rand_state#30 )
  main::$5 = sizeof  h_bar_tilemap
  ppuDataTransfer::ppuData#1 = (void*)$2040
  ppuDataTransfer::cpuData#1 = (void*)h_bar_tilemap
  ppuDataTransfer::size#1 = main::$5
  call ppuDataTransfer 
  to:main::@23
main::@23: scope:[main]  from main::@22
  rand_state#26 = phi( main::@22/rand_state#28 )
  to:main::enableVideoOutput1
main::enableVideoOutput1: scope:[main]  from main::@23
  rand_state#24 = phi( main::@23/rand_state#26 )
  main::enableVideoOutput1_$2 = (byte*)PPU
  main::enableVideoOutput1_$0 = main::enableVideoOutput1_$2 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL
  *main::enableVideoOutput1_$0 = $80
  main::enableVideoOutput1_$3 = (byte*)PPU
  main::enableVideoOutput1_$1 = main::enableVideoOutput1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUMASK
  *main::enableVideoOutput1_$1 = $1e
  to:main::@19
main::@19: scope:[main]  from main::enableVideoOutput1
  rand_state#22 = phi( main::enableVideoOutput1/rand_state#24 )
  main::$77 = (byte*)PPU
  main::$54 = main::$77 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL
  *main::$54 = $88
  main::i#0 = 0
  main::active_balls#0 = 0
  main::timer#0 = 0
  main::timer_2#0 = 0
  main::h_bar#0 = $80
  main::sprite_idx#0 = 0
  main::i#1 = 0
  to:main::@1
main::@1: scope:[main]  from main::@19 main::@25
  main::timer#6 = phi( main::@19/main::timer#0, main::@25/main::timer#8 )
  main::active_balls#9 = phi( main::@19/main::active_balls#0, main::@25/main::active_balls#13 )
  main::timer_2#4 = phi( main::@19/main::timer_2#0, main::@25/main::timer_2#6 )
  rand_state#20 = phi( main::@19/rand_state#22, main::@25/rand_state#5 )
  main::i#5 = phi( main::@19/main::i#1, main::@25/main::i#2 )
  main::$8 = main::i#5 < $32
  if(main::$8) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  main::timer#12 = phi( main::@1/main::timer#6 )
  main::active_balls#19 = phi( main::@1/main::active_balls#9 )
  main::timer_2#10 = phi( main::@1/main::timer_2#4 )
  main::i#14 = phi( main::@1/main::i#5 )
  rand_state#17 = phi( main::@1/rand_state#20 )
  call rand 
  rand::return#2 = rand::return#1
  to:main::@24
main::@24: scope:[main]  from main::@2
  main::timer#10 = phi( main::@2/main::timer#12 )
  main::active_balls#17 = phi( main::@2/main::active_balls#19 )
  main::timer_2#8 = phi( main::@2/main::timer_2#10 )
  main::i#6 = phi( main::@2/main::i#14 )
  rand_state#12 = phi( main::@2/rand_state#3 )
  rand::return#5 = phi( main::@2/rand::return#2 )
  main::$9 = rand::return#5
  rand_state#4 = rand_state#12
  main::$10 = main::$9 & $3ff
  main::$35 = main::i#6 * SIZEOF_STRUCT_$0
  main::$55 = (word*)balls + main::$35
  main::$55[OFFSET_STRUCT_$0_X_VELOCITY] = main::$10
  call rand 
  rand::return#3 = rand::return#1
  to:main::@25
main::@25: scope:[main]  from main::@24
  main::timer#8 = phi( main::@24/main::timer#10 )
  main::active_balls#13 = phi( main::@24/main::active_balls#17 )
  main::timer_2#6 = phi( main::@24/main::timer_2#8 )
  main::i#7 = phi( main::@24/main::i#6 )
  rand_state#13 = phi( main::@24/rand_state#3 )
  rand::return#6 = phi( main::@24/rand::return#3 )
  main::$11 = rand::return#6
  rand_state#5 = rand_state#13
  main::$12 = main::$11 & $ff
  main::$36 = main::i#7 * SIZEOF_STRUCT_$0
  main::$56 = (word*)balls + main::$36
  main::$56[OFFSET_STRUCT_$0_Y_VELOCITY] = main::$12
  main::i#2 = ++ main::i#7
  to:main::@1
main::@3: scope:[main]  from main::@1 main::@15
  rand_state#21 = phi( main::@1/rand_state#20, main::@15/rand_state#23 )
  main::timer#5 = phi( main::@1/main::timer#6, main::@15/main::timer#7 )
  main::active_balls#5 = phi( main::@1/main::active_balls#9, main::@15/main::active_balls#10 )
  main::timer_2#3 = phi( main::@1/main::timer_2#4, main::@15/main::timer_2#5 )
  main::$79 = 0 != 1
  if(main::$79) goto main::@4
  to:main::@5
main::@4: scope:[main]  from main::@3
  rand_state#36 = phi( main::@3/rand_state#21 )
  main::timer#4 = phi( main::@3/main::timer#5 )
  main::active_balls#2 = phi( main::@3/main::active_balls#5 )
  main::timer_2#2 = phi( main::@3/main::timer_2#3 )
  main::timer_2#1 = ++ main::timer_2#2
  main::$13 = sine_table[main::timer_2#1] + $60
  main::h_bar#1 = main::$13
  main::$14 = main::h_bar#1 ^ $ff
  scroll_y = main::$14
  main::$15 = main::active_balls#2 < $32
  main::$16 = ! main::$15
  if(main::$16) goto main::@6
  to:main::@16
main::@5: scope:[main]  from main::@3
  rand_state#18 = phi( main::@3/rand_state#21 )
  main::return#0 = 0
  to:main::@return
main::@6: scope:[main]  from main::@16 main::@17 main::@4
  rand_state#32 = phi( main::@16/rand_state#34, main::@17/rand_state#35, main::@4/rand_state#36 )
  main::timer#15 = phi( main::@16/main::timer#1, main::@17/main::timer#2, main::@4/main::timer#4 )
  main::timer_2#13 = phi( main::@16/main::timer_2#14, main::@17/main::timer_2#15, main::@4/main::timer_2#1 )
  main::h_bar#8 = phi( main::@16/main::h_bar#9, main::@17/main::h_bar#10, main::@4/main::h_bar#1 )
  main::active_balls#8 = phi( main::@16/main::active_balls#6, main::@17/main::active_balls#1, main::@4/main::active_balls#2 )
  main::sprite_idx#1 = 0
  main::i#3 = 0
  to:main::@7
main::@16: scope:[main]  from main::@4
  rand_state#34 = phi( main::@4/rand_state#36 )
  main::timer_2#14 = phi( main::@4/main::timer_2#1 )
  main::h_bar#9 = phi( main::@4/main::h_bar#1 )
  main::active_balls#6 = phi( main::@4/main::active_balls#2 )
  main::timer#3 = phi( main::@4/main::timer#4 )
  main::$17 = main::timer#3 == 9
  main::timer#1 = ++ main::timer#3
  main::$18 = ! main::$17
  if(main::$18) goto main::@6
  to:main::@17
main::@17: scope:[main]  from main::@16
  rand_state#35 = phi( main::@16/rand_state#34 )
  main::timer_2#15 = phi( main::@16/main::timer_2#14 )
  main::h_bar#10 = phi( main::@16/main::h_bar#9 )
  main::active_balls#3 = phi( main::@16/main::active_balls#6 )
  main::timer#2 = 0
  main::active_balls#1 = ++ main::active_balls#3
  main::$37 = main::active_balls#1 * SIZEOF_STRUCT_$0
  main::$57 = (word*)balls + main::$37
  main::$57[OFFSET_STRUCT_$0_X_POSITION] = 0
  main::$38 = main::active_balls#1 * SIZEOF_STRUCT_$0
  main::$58 = (word*)balls + main::$38
  main::$58[OFFSET_STRUCT_$0_Y_POSITION] = 0
  to:main::@6
main::@7: scope:[main]  from main::@11 main::@6
  rand_state#29 = phi( main::@11/rand_state#31, main::@6/rand_state#32 )
  main::timer#13 = phi( main::@11/main::timer#14, main::@6/main::timer#15 )
  main::timer_2#11 = phi( main::@11/main::timer_2#12, main::@6/main::timer_2#13 )
  main::sprite_idx#8 = phi( main::@11/main::sprite_idx#2, main::@6/main::sprite_idx#1 )
  main::h_bar#6 = phi( main::@11/main::h_bar#7, main::@6/main::h_bar#8 )
  main::active_balls#4 = phi( main::@11/main::active_balls#7, main::@6/main::active_balls#8 )
  main::i#8 = phi( main::@11/main::i#4, main::@6/main::i#3 )
  main::$19 = main::i#8 < main::active_balls#4
  if(main::$19) goto main::@8
  to:main::@9
main::@8: scope:[main]  from main::@7
  rand_state#41 = phi( main::@7/rand_state#29 )
  main::timer#19 = phi( main::@7/main::timer#13 )
  main::timer_2#19 = phi( main::@7/main::timer_2#11 )
  main::active_balls#15 = phi( main::@7/main::active_balls#4 )
  main::sprite_idx#7 = phi( main::@7/main::sprite_idx#8 )
  main::h_bar#5 = phi( main::@7/main::h_bar#6 )
  main::i#9 = phi( main::@7/main::i#8 )
  main::$39 = main::i#9 * SIZEOF_STRUCT_$0
  main::$59 = (word*)balls + main::$39
  main::$60 = (word*)balls + main::$39
  main::$61 = (word*)balls + main::$39
  main::$61[OFFSET_STRUCT_$0_X_POSITION] = main::$59[OFFSET_STRUCT_$0_X_POSITION] + main::$60[OFFSET_STRUCT_$0_X_VELOCITY]
  main::$40 = main::i#9 * SIZEOF_STRUCT_$0
  main::$62 = (word*)balls + main::$40
  main::$63 = (word*)balls + main::$40
  main::$63[OFFSET_STRUCT_$0_Y_VELOCITY] = main::$62[OFFSET_STRUCT_$0_Y_VELOCITY] + $10
  main::$41 = main::i#9 * SIZEOF_STRUCT_$0
  main::$64 = (word*)balls + main::$41
  main::$65 = (word*)balls + main::$41
  main::$66 = (word*)balls + main::$41
  main::$66[OFFSET_STRUCT_$0_Y_POSITION] = main::$64[OFFSET_STRUCT_$0_Y_POSITION] + main::$65[OFFSET_STRUCT_$0_Y_VELOCITY]
  main::$42 = main::i#9 * SIZEOF_STRUCT_$0
  main::$67 = (word*)balls + main::$42
  main::$20 = main::$67[OFFSET_STRUCT_$0_X_POSITION] >> 8
  main::$21 = main::$20 < 8
  main::$22 = ! main::$21
  if(main::$22) goto main::@10
  to:main::@12
main::@9: scope:[main]  from main::@7
  rand_state#27 = phi( main::@7/rand_state#29 )
  main::timer#11 = phi( main::@7/main::timer#13 )
  main::active_balls#18 = phi( main::@7/main::active_balls#4 )
  main::timer_2#9 = phi( main::@7/main::timer_2#11 )
  *((byte*)$2001) = $98
  to:main::@14
main::@10: scope:[main]  from main::@12 main::@8
  rand_state#37 = phi( main::@12/rand_state#40, main::@8/rand_state#41 )
  main::timer#16 = phi( main::@12/main::timer#18, main::@8/main::timer#19 )
  main::timer_2#16 = phi( main::@12/main::timer_2#18, main::@8/main::timer_2#19 )
  main::active_balls#11 = phi( main::@12/main::active_balls#14, main::@8/main::active_balls#15 )
  main::sprite_idx#4 = phi( main::@12/main::sprite_idx#6, main::@8/main::sprite_idx#7 )
  main::h_bar#2 = phi( main::@12/main::h_bar#4, main::@8/main::h_bar#5 )
  main::i#10 = phi( main::@12/main::i#11, main::@8/main::i#9 )
  main::$43 = main::i#10 * SIZEOF_STRUCT_$0
  main::$68 = (word*)balls + main::$43
  main::$23 = main::$68[OFFSET_STRUCT_$0_Y_POSITION] >> 8
  main::$24 = main::$23 >= main::h_bar#2
  main::$44 = main::i#10 * SIZEOF_STRUCT_$0
  main::$69 = (word*)balls + main::$44
  main::$25 = main::$69[OFFSET_STRUCT_$0_Y_POSITION] >> 8
  main::$26 = main::h_bar#2 + 8
  main::$27 = main::$25 < main::$26
  main::$28 = main::$24 && main::$27
  main::$29 = ! main::$28
  if(main::$29) goto main::@11
  to:main::@13
main::@12: scope:[main]  from main::@8
  rand_state#40 = phi( main::@8/rand_state#41 )
  main::timer#18 = phi( main::@8/main::timer#19 )
  main::timer_2#18 = phi( main::@8/main::timer_2#19 )
  main::active_balls#14 = phi( main::@8/main::active_balls#15 )
  main::sprite_idx#6 = phi( main::@8/main::sprite_idx#7 )
  main::h_bar#4 = phi( main::@8/main::h_bar#5 )
  main::i#11 = phi( main::@8/main::i#9 )
  main::$45 = main::i#11 * SIZEOF_STRUCT_$0
  main::$70 = (word*)balls + main::$45
  main::$71 = (word*)balls + main::$45
  main::$71[OFFSET_STRUCT_$0_X_VELOCITY] = main::$70[OFFSET_STRUCT_$0_X_VELOCITY] ^ $ffff
  to:main::@10
main::@11: scope:[main]  from main::@10 main::@13
  rand_state#31 = phi( main::@10/rand_state#37, main::@13/rand_state#38 )
  main::timer#14 = phi( main::@10/main::timer#16, main::@13/main::timer#17 )
  main::timer_2#12 = phi( main::@10/main::timer_2#16, main::@13/main::timer_2#17 )
  main::h_bar#7 = phi( main::@10/main::h_bar#2, main::@13/main::h_bar#3 )
  main::active_balls#7 = phi( main::@10/main::active_balls#11, main::@13/main::active_balls#12 )
  main::sprite_idx#3 = phi( main::@10/main::sprite_idx#4, main::@13/main::sprite_idx#5 )
  main::i#12 = phi( main::@10/main::i#10, main::@13/main::i#13 )
  main::$46 = main::i#12 * SIZEOF_STRUCT_$0
  main::$72 = (word*)balls + main::$46
  main::$32 = main::$72[OFFSET_STRUCT_$0_Y_POSITION] >> 8
  main::$47 = main::sprite_idx#3 * SIZEOF_STRUCT_SPRITEDATA
  ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_Y)[main::$47] = (byte)main::$32
  main::$48 = main::sprite_idx#3 * SIZEOF_STRUCT_SPRITEDATA
  ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_TILE)[main::$48] = $a
  main::$49 = main::sprite_idx#3 * SIZEOF_STRUCT_SPRITEDATA
  ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES)[main::$49] = 3
  main::$50 = main::i#12 * SIZEOF_STRUCT_$0
  main::$73 = (word*)balls + main::$50
  main::$33 = main::$73[OFFSET_STRUCT_$0_X_POSITION] >> 8
  main::$51 = main::sprite_idx#3 * SIZEOF_STRUCT_SPRITEDATA
  ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X)[main::$51] = (byte)main::$33
  main::sprite_idx#2 = ++ main::sprite_idx#3
  main::i#4 = ++ main::i#12
  to:main::@7
main::@13: scope:[main]  from main::@10
  rand_state#38 = phi( main::@10/rand_state#37 )
  main::timer#17 = phi( main::@10/main::timer#16 )
  main::timer_2#17 = phi( main::@10/main::timer_2#16 )
  main::active_balls#12 = phi( main::@10/main::active_balls#11 )
  main::sprite_idx#5 = phi( main::@10/main::sprite_idx#4 )
  main::h_bar#3 = phi( main::@10/main::h_bar#2 )
  main::i#13 = phi( main::@10/main::i#10 )
  main::$52 = main::i#13 * SIZEOF_STRUCT_$0
  main::$74 = (word*)balls + main::$52
  main::$75 = (word*)balls + main::$52
  main::$75[OFFSET_STRUCT_$0_Y_VELOCITY] = main::$74[OFFSET_STRUCT_$0_Y_VELOCITY] ^ $ffff
  main::$30 = main::h_bar#3 - 2
  main::$78 = (word)main::$30
  main::$31 = main::$78 << 8
  main::$53 = main::i#13 * SIZEOF_STRUCT_$0
  main::$76 = (word*)balls + main::$53
  main::$76[OFFSET_STRUCT_$0_Y_POSITION] = main::$31
  to:main::@11
main::@14: scope:[main]  from main::@14 main::@9
  rand_state#25 = phi( main::@14/rand_state#25, main::@9/rand_state#27 )
  main::timer#9 = phi( main::@14/main::timer#9, main::@9/main::timer#11 )
  main::active_balls#16 = phi( main::@14/main::active_balls#16, main::@9/main::active_balls#18 )
  main::timer_2#7 = phi( main::@14/main::timer_2#7, main::@9/main::timer_2#9 )
  main::$80 = 0 != vblank_hit
  main::$34 = ! main::$80
  if(main::$34) goto main::@14
  to:main::@15
main::@15: scope:[main]  from main::@14
  rand_state#23 = phi( main::@14/rand_state#25 )
  main::timer#7 = phi( main::@14/main::timer#9 )
  main::active_balls#10 = phi( main::@14/main::active_balls#16 )
  main::timer_2#5 = phi( main::@14/main::timer_2#7 )
  vblank_hit = 0
  *((byte*)$2001) = $18
  to:main::@3
main::@return: scope:[main]  from main::@5
  rand_state#14 = phi( main::@5/rand_state#18 )
  main::return#3 = phi( main::@5/main::return#0 )
  main::return#1 = main::return#3
  rand_state#6 = rand_state#14
  return 
  to:@return

interrupt(HARDWARE_STACK) void vblank()
vblank: scope:[vblank]  from
  vblank::$3 = (byte*)PPU
  vblank::$1 = vblank::$3 + OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
  *vblank::$1 = 0
  vblank::$4 = (byte*)PPU
  vblank::$2 = vblank::$4 + OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
  *vblank::$2 = scroll_y
  vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 = SPRITE_BUFFER
  to:vblank::ppuSpriteBufferDmaTransfer1
vblank::ppuSpriteBufferDmaTransfer1: scope:[vblank]  from vblank
  vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#1 = phi( vblank/vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 )
  vblank::ppuSpriteBufferDmaTransfer1_$3 = (byte*)PPU
  vblank::ppuSpriteBufferDmaTransfer1_$1 = vblank::ppuSpriteBufferDmaTransfer1_$3 + OFFSET_STRUCT_RICOH_2C02_OAMADDR
  *vblank::ppuSpriteBufferDmaTransfer1_$1 = 0
  vblank::ppuSpriteBufferDmaTransfer1_$0 = > vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#1
  vblank::ppuSpriteBufferDmaTransfer1_$4 = (byte*)APU
  vblank::ppuSpriteBufferDmaTransfer1_$2 = vblank::ppuSpriteBufferDmaTransfer1_$4 + OFFSET_STRUCT_RICOH_2A03_OAMDMA
  *vblank::ppuSpriteBufferDmaTransfer1_$2 = vblank::ppuSpriteBufferDmaTransfer1_$0
  to:vblank::@1
vblank::@1: scope:[vblank]  from vblank::ppuSpriteBufferDmaTransfer1
  vblank_hit = ++ vblank_hit
  to:vblank::@return
vblank::@return: scope:[vblank]  from vblank::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  rand_state#7 = 1
  scroll_y = 0
  vblank_hit = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  rand_state#19 = phi( __start::__init1/rand_state#7 )
  call main 
  main::return#2 = main::return#1
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  rand_state#15 = phi( __start::@1/rand_state#6 )
  rand_state#8 = rand_state#15
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  rand_state#16 = phi( __start::@2/rand_state#8 )
  rand_state#9 = rand_state#16
  return 
  to:@return

SYMBOL TABLE SSA
word $0::x_position
word $0::x_velocity
word $0::y_position
word $0::y_velocity
const struct RICOH_2A03* APU = (struct RICOH_2A03*)$4000
const nomodify byte* FR_COUNTER = (byte*)$4017
const nomodify byte* MEMORY = (byte*)0
const byte OFFSET_STRUCT_$0_X_POSITION = 0
const byte OFFSET_STRUCT_$0_X_VELOCITY = 4
const byte OFFSET_STRUCT_$0_Y_POSITION = 2
const byte OFFSET_STRUCT_$0_Y_VELOCITY = 6
const byte OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
const byte OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
const byte OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
const byte OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
const byte OFFSET_STRUCT_RICOH_2C02_PPUCTRL = 0
const byte OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
const byte OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
const byte OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
const byte OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
const byte OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES = 2
const byte OFFSET_STRUCT_SPRITEDATA_TILE = 1
const byte OFFSET_STRUCT_SPRITEDATA_X = 3
const byte OFFSET_STRUCT_SPRITEDATA_Y = 0
const struct RICOH_2C02* PPU = (struct RICOH_2C02*)$2000
const nomodify byte* PPU_ATTRIBUTE_TABLE_0 = (byte*)$23c0
const nomodify byte* PPU_NAME_TABLE_0 = (byte*)$2000
const nomodify byte* PPU_PALETTE = (byte*)$3f00
const nomodify to_volatile byte* PPU_PPUSTATUS = (byte*)$2002
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
byte RICOH_2A03::DMC_FREQ
byte RICOH_2A03::DMC_LEN
byte RICOH_2A03::DMC_RAW
byte RICOH_2A03::DMC_START
byte RICOH_2A03::JOY1
byte RICOH_2A03::JOY2
byte RICOH_2A03::NOISE_HI
byte RICOH_2A03::NOISE_LO
byte RICOH_2A03::NOISE_VOL
byte RICOH_2A03::OAMDMA
byte RICOH_2A03::SND_CHN
byte RICOH_2A03::SQ1_HI
byte RICOH_2A03::SQ1_LO
byte RICOH_2A03::SQ1_SWEEP
byte RICOH_2A03::SQ1_VOL
byte RICOH_2A03::SQ2_HI
byte RICOH_2A03::SQ2_LO
byte RICOH_2A03::SQ2_SWEEP
byte RICOH_2A03::SQ2_VOL
byte RICOH_2A03::TRI_HI
byte RICOH_2A03::TRI_LINEAR
byte RICOH_2A03::TRI_LO
byte RICOH_2A03::UNUSED1
byte RICOH_2A03::UNUSED2
byte RICOH_2C02::OAMADDR
byte RICOH_2C02::OAMDATA
byte RICOH_2C02::PPUADDR
byte RICOH_2C02::PPUCTRL
byte RICOH_2C02::PPUDATA
byte RICOH_2C02::PPUMASK
byte RICOH_2C02::PPUSCROLL
volatile byte RICOH_2C02::PPUSTATUS loadstore
const byte SIZEOF_STRUCT_$0 = 8
const byte SIZEOF_STRUCT_SPRITEDATA = 4
const struct SpriteData* SPRITE_BUFFER[$100]  = { fill( $100, 0) }
byte SpriteData::attributes
byte SpriteData::tile
byte SpriteData::x
byte SpriteData::y
const byte* TILES[]  = kickasm {{ .import binary "lazydata.chr"
 }}
const to_nomodify void()** VECTORS[]  = { &vblank, &main, (void()*)0 }
void __start()
label __start::@1
label __start::@2
label __start::@return
label __start::__init1
const struct $0* balls[$40]  = { fill( $40, 0) }
const to_nomodify byte* h_bar_tilemap[]  = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
signed word main()
byte~ main::$1
number~ main::$10
word~ main::$11
number~ main::$12
number~ main::$13
number~ main::$14
bool~ main::$15
bool~ main::$16
bool~ main::$17
bool~ main::$18
bool~ main::$19
word~ main::$20
bool~ main::$21
bool~ main::$22
word~ main::$23
bool~ main::$24
word~ main::$25
number~ main::$26
bool~ main::$27
bool~ main::$28
bool~ main::$29
number~ main::$30
word~ main::$31
word~ main::$32
word~ main::$33
bool~ main::$34
word~ main::$35
word~ main::$36
word~ main::$37
word~ main::$38
word~ main::$39
word~ main::$40
word~ main::$41
word~ main::$42
word~ main::$43
word~ main::$44
word~ main::$45
word~ main::$46
byte~ main::$47
byte~ main::$48
byte~ main::$49
byte~ main::$5
word~ main::$50
byte~ main::$51
word~ main::$52
word~ main::$53
byte*~ main::$54
word*~ main::$55
word*~ main::$56
word*~ main::$57
word*~ main::$58
word*~ main::$59
word*~ main::$60
word*~ main::$61
word*~ main::$62
word*~ main::$63
word*~ main::$64
word*~ main::$65
word*~ main::$66
word*~ main::$67
word*~ main::$68
word*~ main::$69
word*~ main::$70
word*~ main::$71
word*~ main::$72
word*~ main::$73
word*~ main::$74
word*~ main::$75
word*~ main::$76
byte*~ main::$77
word~ main::$78
bool~ main::$79
bool~ main::$8
bool~ main::$80
word~ main::$9
label main::@1
label main::@10
label main::@11
label main::@12
label main::@13
label main::@14
label main::@15
label main::@16
label main::@17
label main::@18
label main::@19
label main::@2
label main::@20
label main::@21
label main::@22
label main::@23
label main::@24
label main::@25
label main::@3
label main::@4
label main::@5
label main::@6
label main::@7
label main::@8
label main::@9
label main::@return
word main::active_balls
word main::active_balls#0
word main::active_balls#1
word main::active_balls#10
word main::active_balls#11
word main::active_balls#12
word main::active_balls#13
word main::active_balls#14
word main::active_balls#15
word main::active_balls#16
word main::active_balls#17
word main::active_balls#18
word main::active_balls#19
word main::active_balls#2
word main::active_balls#3
word main::active_balls#4
word main::active_balls#5
word main::active_balls#6
word main::active_balls#7
word main::active_balls#8
word main::active_balls#9
label main::enableVideoOutput1
byte*~ main::enableVideoOutput1_$0
byte*~ main::enableVideoOutput1_$1
byte*~ main::enableVideoOutput1_$2
byte*~ main::enableVideoOutput1_$3
byte main::h_bar
byte main::h_bar#0
byte main::h_bar#1
byte main::h_bar#10
byte main::h_bar#2
byte main::h_bar#3
byte main::h_bar#4
byte main::h_bar#5
byte main::h_bar#6
byte main::h_bar#7
byte main::h_bar#8
byte main::h_bar#9
word main::i
word main::i#0
word main::i#1
word main::i#10
word main::i#11
word main::i#12
word main::i#13
word main::i#14
word main::i#2
word main::i#3
word main::i#4
word main::i#5
word main::i#6
word main::i#7
word main::i#8
word main::i#9
label main::initNES1
bool~ main::initNES1_$5
label main::initNES1_@1
label main::initNES1_@6
label main::initNES1_@7
label main::initNES1_clearVBlankFlag1
label main::initNES1_disableAudioOutput1
byte*~ main::initNES1_disableAudioOutput1_$0
byte*~ main::initNES1_disableAudioOutput1_$1
label main::initNES1_disableVideoOutput1
byte*~ main::initNES1_disableVideoOutput1_$0
byte*~ main::initNES1_disableVideoOutput1_$1
byte*~ main::initNES1_disableVideoOutput1_$2
byte*~ main::initNES1_disableVideoOutput1_$3
byte main::initNES1_i
byte main::initNES1_i#0
byte main::initNES1_i#1
byte main::initNES1_i#2
label main::initNES1_waitForVBlank1
number~ main::initNES1_waitForVBlank1_$0
bool~ main::initNES1_waitForVBlank1_$1
byte*~ main::initNES1_waitForVBlank1_$2
byte*~ main::initNES1_waitForVBlank1_$3
bool~ main::initNES1_waitForVBlank1_$4
label main::initNES1_waitForVBlank1_@1
label main::initNES1_waitForVBlank2
number~ main::initNES1_waitForVBlank2_$0
bool~ main::initNES1_waitForVBlank2_$1
byte*~ main::initNES1_waitForVBlank2_$2
byte*~ main::initNES1_waitForVBlank2_$3
bool~ main::initNES1_waitForVBlank2_$4
label main::initNES1_waitForVBlank2_@1
signed word main::return
signed word main::return#0
signed word main::return#1
signed word main::return#2
signed word main::return#3
byte main::sprite_idx
byte main::sprite_idx#0
byte main::sprite_idx#1
byte main::sprite_idx#2
byte main::sprite_idx#3
byte main::sprite_idx#4
byte main::sprite_idx#5
byte main::sprite_idx#6
byte main::sprite_idx#7
byte main::sprite_idx#8
byte main::timer
byte main::timer#0
byte main::timer#1
byte main::timer#10
byte main::timer#11
byte main::timer#12
byte main::timer#13
byte main::timer#14
byte main::timer#15
byte main::timer#16
byte main::timer#17
byte main::timer#18
byte main::timer#19
byte main::timer#2
byte main::timer#3
byte main::timer#4
byte main::timer#5
byte main::timer#6
byte main::timer#7
byte main::timer#8
byte main::timer#9
byte main::timer_2
byte main::timer_2#0
byte main::timer_2#1
byte main::timer_2#10
byte main::timer_2#11
byte main::timer_2#12
byte main::timer_2#13
byte main::timer_2#14
byte main::timer_2#15
byte main::timer_2#16
byte main::timer_2#17
byte main::timer_2#18
byte main::timer_2#19
byte main::timer_2#2
byte main::timer_2#3
byte main::timer_2#4
byte main::timer_2#5
byte main::timer_2#6
byte main::timer_2#7
byte main::timer_2#8
byte main::timer_2#9
const to_nomodify byte* palette[]  = { $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4 }
void ppuDataFill(nomodify void* ppuDataFill::ppuData , byte ppuDataFill::val , word ppuDataFill::size)
bool~ ppuDataFill::$1
label ppuDataFill::@1
label ppuDataFill::@2
label ppuDataFill::@3
label ppuDataFill::@4
label ppuDataFill::@return
word ppuDataFill::i
word ppuDataFill::i#0
word ppuDataFill::i#1
word ppuDataFill::i#2
word ppuDataFill::i#3
word ppuDataFill::i#4
word ppuDataFill::i#5
nomodify void* ppuDataFill::ppuData
nomodify void* ppuDataFill::ppuData#0
nomodify void* ppuDataFill::ppuData#1
nomodify void* ppuDataFill::ppuData#2
label ppuDataFill::ppuDataPrepare1
byte~ ppuDataFill::ppuDataPrepare1_$0
byte~ ppuDataFill::ppuDataPrepare1_$1
byte*~ ppuDataFill::ppuDataPrepare1_$2
byte*~ ppuDataFill::ppuDataPrepare1_$3
byte*~ ppuDataFill::ppuDataPrepare1_$4
byte*~ ppuDataFill::ppuDataPrepare1_$5
nomodify void* ppuDataFill::ppuDataPrepare1_ppuData
nomodify void* ppuDataFill::ppuDataPrepare1_ppuData#0
nomodify void* ppuDataFill::ppuDataPrepare1_ppuData#1
label ppuDataFill::ppuDataPut1
byte*~ ppuDataFill::ppuDataPut1_$0
byte*~ ppuDataFill::ppuDataPut1_$1
byte ppuDataFill::ppuDataPut1_val
byte ppuDataFill::ppuDataPut1_val#0
byte ppuDataFill::ppuDataPut1_val#1
word ppuDataFill::size
word ppuDataFill::size#0
word ppuDataFill::size#1
word ppuDataFill::size#2
word ppuDataFill::size#3
word ppuDataFill::size#4
word ppuDataFill::size#5
word ppuDataFill::size#6
word ppuDataFill::size#7
word ppuDataFill::size#8
byte ppuDataFill::val
byte ppuDataFill::val#0
byte ppuDataFill::val#1
byte ppuDataFill::val#2
byte ppuDataFill::val#3
byte ppuDataFill::val#4
byte ppuDataFill::val#5
byte ppuDataFill::val#6
byte ppuDataFill::val#7
byte ppuDataFill::val#8
void ppuDataTransfer(nomodify void* ppuDataTransfer::ppuData , nomodify void* ppuDataTransfer::cpuData , word ppuDataTransfer::size)
bool~ ppuDataTransfer::$1
label ppuDataTransfer::@1
label ppuDataTransfer::@2
label ppuDataTransfer::@3
label ppuDataTransfer::@4
label ppuDataTransfer::@return
nomodify void* ppuDataTransfer::cpuData
nomodify void* ppuDataTransfer::cpuData#0
nomodify void* ppuDataTransfer::cpuData#1
nomodify void* ppuDataTransfer::cpuData#2
nomodify void* ppuDataTransfer::cpuData#3
nomodify void* ppuDataTransfer::cpuData#4
byte* ppuDataTransfer::cpuSrc
byte* ppuDataTransfer::cpuSrc#0
byte* ppuDataTransfer::cpuSrc#1
byte* ppuDataTransfer::cpuSrc#2
byte* ppuDataTransfer::cpuSrc#3
byte* ppuDataTransfer::cpuSrc#4
byte* ppuDataTransfer::cpuSrc#5
word ppuDataTransfer::i
word ppuDataTransfer::i#0
word ppuDataTransfer::i#1
word ppuDataTransfer::i#2
word ppuDataTransfer::i#3
word ppuDataTransfer::i#4
word ppuDataTransfer::i#5
nomodify void* ppuDataTransfer::ppuData
nomodify void* ppuDataTransfer::ppuData#0
nomodify void* ppuDataTransfer::ppuData#1
nomodify void* ppuDataTransfer::ppuData#2
label ppuDataTransfer::ppuDataPrepare1
byte~ ppuDataTransfer::ppuDataPrepare1_$0
byte~ ppuDataTransfer::ppuDataPrepare1_$1
byte*~ ppuDataTransfer::ppuDataPrepare1_$2
byte*~ ppuDataTransfer::ppuDataPrepare1_$3
byte*~ ppuDataTransfer::ppuDataPrepare1_$4
byte*~ ppuDataTransfer::ppuDataPrepare1_$5
nomodify void* ppuDataTransfer::ppuDataPrepare1_ppuData
nomodify void* ppuDataTransfer::ppuDataPrepare1_ppuData#0
nomodify void* ppuDataTransfer::ppuDataPrepare1_ppuData#1
label ppuDataTransfer::ppuDataPut1
byte*~ ppuDataTransfer::ppuDataPut1_$0
byte*~ ppuDataTransfer::ppuDataPut1_$1
byte ppuDataTransfer::ppuDataPut1_val
byte ppuDataTransfer::ppuDataPut1_val#0
byte ppuDataTransfer::ppuDataPut1_val#1
word ppuDataTransfer::size
word ppuDataTransfer::size#0
word ppuDataTransfer::size#1
word ppuDataTransfer::size#2
word ppuDataTransfer::size#3
word ppuDataTransfer::size#4
word ppuDataTransfer::size#5
word ppuDataTransfer::size#6
word ppuDataTransfer::size#7
word ppuDataTransfer::size#8
const byte* printf_buffer_number::digits[$b]  = { fill( $b, 0) }
byte printf_buffer_number::sign
byte printf_format_number::justify_left
byte printf_format_number::min_length
byte printf_format_number::radix
byte printf_format_number::sign_always
byte printf_format_number::upper_case
byte printf_format_number::zero_padding
byte printf_format_string::justify_left
byte printf_format_string::min_length
word rand()
word~ rand::$0
word~ rand::$1
word~ rand::$2
label rand::@return
word rand::return
word rand::return#0
word rand::return#1
word rand::return#2
word rand::return#3
word rand::return#4
word rand::return#5
word rand::return#6
word rand_state
word rand_state#0
word rand_state#1
word rand_state#10
word rand_state#11
word rand_state#12
word rand_state#13
word rand_state#14
word rand_state#15
word rand_state#16
word rand_state#17
word rand_state#18
word rand_state#19
word rand_state#2
word rand_state#20
word rand_state#21
word rand_state#22
word rand_state#23
word rand_state#24
word rand_state#25
word rand_state#26
word rand_state#27
word rand_state#28
word rand_state#29
word rand_state#3
word rand_state#30
word rand_state#31
word rand_state#32
word rand_state#33
word rand_state#34
word rand_state#35
word rand_state#36
word rand_state#37
word rand_state#38
word rand_state#39
word rand_state#4
word rand_state#40
word rand_state#41
word rand_state#42
word rand_state#43
word rand_state#44
word rand_state#45
word rand_state#46
word rand_state#47
word rand_state#48
word rand_state#49
word rand_state#5
word rand_state#50
word rand_state#51
word rand_state#52
word rand_state#53
word rand_state#6
word rand_state#7
word rand_state#8
word rand_state#9
volatile byte scroll_y loadstore
const to_nomodify byte* sine_table[$100]  = { $40, $42, $43, $45, $46, $48, $49, $4b, $4c, $4e, $50, $51, $53, $54, $56, $57, $58, $5a, $5b, $5d, $5e, $60, $61, $62, $64, $65, $66, $67, $69, $6a, $6b, $6c, $6d, $6e, $6f, $70, $71, $72, $73, $74, $75, $76, $77, $78, $78, $79, $7a, $7b, $7b, $7c, $7c, $7d, $7d, $7e, $7e, $7e, $7f, $7f, $7f, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $7f, $7f, $7f, $7e, $7e, $7e, $7d, $7d, $7c, $7c, $7b, $7b, $7a, $79, $78, $78, $77, $76, $75, $74, $73, $72, $71, $70, $6f, $6e, $6d, $6c, $6b, $6a, $69, $67, $66, $65, $64, $62, $61, $60, $5e, $5d, $5b, $5a, $58, $57, $56, $54, $53, $51, $50, $4e, $4c, $4b, $49, $48, $46, $45, $43, $42, $40, $3e, $3d, $3b, $3a, $38, $37, $35, $34, $32, $30, $2f, $2d, $2c, $2a, $29, $28, $26, $25, $23, $22, $20, $1f, $1e, $1c, $1b, $1a, $19, $17, $16, $15, $14, $13, $12, $11, $10, $f, $e, $d, $c, $b, $a, 9, 8, 8, 7, 6, 5, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 8, 9, $a, $b, $c, $d, $e, $f, $10, $11, $12, $13, $14, $15, $16, $17, $19, $1a, $1b, $1c, $1e, $1f, $20, $22, $23, $25, $26, $28, $29, $2a, $2c, $2d, $2f, $30, $32, $34, $35, $37, $38, $3a, $3b, $3d, $3e }
interrupt(HARDWARE_STACK) void vblank()
byte*~ vblank::$1
byte*~ vblank::$2
byte*~ vblank::$3
byte*~ vblank::$4
label vblank::@1
label vblank::@return
label vblank::ppuSpriteBufferDmaTransfer1
byte~ vblank::ppuSpriteBufferDmaTransfer1_$0
byte*~ vblank::ppuSpriteBufferDmaTransfer1_$1
byte*~ vblank::ppuSpriteBufferDmaTransfer1_$2
byte*~ vblank::ppuSpriteBufferDmaTransfer1_$3
byte*~ vblank::ppuSpriteBufferDmaTransfer1_$4
struct SpriteData* vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer
struct SpriteData* vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0
struct SpriteData* vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#1
volatile byte vblank_hit loadstore

Adding number conversion cast (unumber) 7 in rand::$0 = rand_state#10 << 7
Adding number conversion cast (unumber) 9 in rand::$1 = rand_state#0 >> 9
Adding number conversion cast (unumber) 8 in rand::$2 = rand_state#1 << 8
Adding number conversion cast (unumber) 0 in *main::initNES1_disableVideoOutput1_$0 = 0
Adding number conversion cast (unumber) 0 in *main::initNES1_disableVideoOutput1_$1 = 0
Adding number conversion cast (unumber) $40 in *FR_COUNTER = $40
Adding number conversion cast (unumber) $40 in *main::initNES1_disableAudioOutput1_$0 = $40
Adding number conversion cast (unumber) $80 in main::initNES1_waitForVBlank1_$0 = *main::initNES1_waitForVBlank1_$2 & $80
Adding number conversion cast (unumber) main::initNES1_waitForVBlank1_$0 in main::initNES1_waitForVBlank1_$0 = *main::initNES1_waitForVBlank1_$2 & (unumber)$80
Adding number conversion cast (unumber) 0 in main::initNES1_waitForVBlank1_$4 = 0 != main::initNES1_waitForVBlank1_$0
Adding number conversion cast (unumber) 0 in (MEMORY+0)[main::initNES1_i#2] = 0
Adding number conversion cast (unumber) 0 in (MEMORY+0)[main::initNES1_i#2] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in (MEMORY+$100)[main::initNES1_i#2] = 0
Adding number conversion cast (unumber) $100 in (MEMORY+$100)[main::initNES1_i#2] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in (MEMORY+$200)[main::initNES1_i#2] = 0
Adding number conversion cast (unumber) $200 in (MEMORY+$200)[main::initNES1_i#2] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in (MEMORY+$300)[main::initNES1_i#2] = 0
Adding number conversion cast (unumber) $300 in (MEMORY+$300)[main::initNES1_i#2] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in (MEMORY+$400)[main::initNES1_i#2] = 0
Adding number conversion cast (unumber) $400 in (MEMORY+$400)[main::initNES1_i#2] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in (MEMORY+$500)[main::initNES1_i#2] = 0
Adding number conversion cast (unumber) $500 in (MEMORY+$500)[main::initNES1_i#2] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in (MEMORY+$600)[main::initNES1_i#2] = 0
Adding number conversion cast (unumber) $600 in (MEMORY+$600)[main::initNES1_i#2] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in (MEMORY+$700)[main::initNES1_i#2] = 0
Adding number conversion cast (unumber) $700 in (MEMORY+$700)[main::initNES1_i#2] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in main::initNES1_$5 = 0 != main::initNES1_i#1
Adding number conversion cast (unumber) $80 in main::initNES1_waitForVBlank2_$0 = *main::initNES1_waitForVBlank2_$2 & $80
Adding number conversion cast (unumber) main::initNES1_waitForVBlank2_$0 in main::initNES1_waitForVBlank2_$0 = *main::initNES1_waitForVBlank2_$2 & (unumber)$80
Adding number conversion cast (unumber) 0 in main::initNES1_waitForVBlank2_$4 = 0 != main::initNES1_waitForVBlank2_$0
Adding number conversion cast (unumber) 0 in ppuDataFill::val#0 = 0
Adding number conversion cast (unumber) $20*$1e in ppuDataFill::size#0 = $20*$1e
Adding number conversion cast (unumber) 0 in ppuDataFill::val#1 = 0
Adding number conversion cast (unumber) $40 in ppuDataFill::size#1 = $40
Adding number conversion cast (unumber) $80 in *main::enableVideoOutput1_$0 = $80
Adding number conversion cast (unumber) $1e in *main::enableVideoOutput1_$1 = $1e
Adding number conversion cast (unumber) $88 in *main::$54 = $88
Adding number conversion cast (unumber) 0 in main::i#1 = 0
Adding number conversion cast (unumber) $32 in main::$8 = main::i#5 < $32
Adding number conversion cast (unumber) $3ff in main::$10 = main::$9 & $3ff
Adding number conversion cast (unumber) main::$10 in main::$10 = main::$9 & (unumber)$3ff
Adding number conversion cast (unumber) $ff in main::$12 = main::$11 & $ff
Adding number conversion cast (unumber) main::$12 in main::$12 = main::$11 & (unumber)$ff
Adding number conversion cast (unumber) $60 in main::$13 = sine_table[main::timer_2#1] + $60
Adding number conversion cast (unumber) main::$13 in main::$13 = sine_table[main::timer_2#1] + (unumber)$60
Adding number conversion cast (unumber) $ff in main::$14 = main::h_bar#1 ^ $ff
Adding number conversion cast (unumber) main::$14 in main::$14 = main::h_bar#1 ^ (unumber)$ff
Adding number conversion cast (unumber) $32 in main::$15 = main::active_balls#2 < $32
Adding number conversion cast (snumber) 0 in main::return#0 = 0
Adding number conversion cast (unumber) 0 in main::sprite_idx#1 = 0
Adding number conversion cast (unumber) 0 in main::i#3 = 0
Adding number conversion cast (unumber) 9 in main::$17 = main::timer#3 == 9
Adding number conversion cast (unumber) 0 in main::timer#2 = 0
Adding number conversion cast (unumber) 0 in main::$57[OFFSET_STRUCT_$0_X_POSITION] = 0
Adding number conversion cast (unumber) 0 in main::$58[OFFSET_STRUCT_$0_Y_POSITION] = 0
Adding number conversion cast (unumber) $10 in main::$63[OFFSET_STRUCT_$0_Y_VELOCITY] = main::$62[OFFSET_STRUCT_$0_Y_VELOCITY] + $10
Adding number conversion cast (unumber) 8 in main::$20 = main::$67[OFFSET_STRUCT_$0_X_POSITION] >> 8
Adding number conversion cast (unumber) 8 in main::$21 = main::$20 < 8
Adding number conversion cast (unumber) $98 in *((byte*)$2001) = $98
Adding number conversion cast (unumber) 8 in main::$23 = main::$68[OFFSET_STRUCT_$0_Y_POSITION] >> 8
Adding number conversion cast (unumber) 8 in main::$25 = main::$69[OFFSET_STRUCT_$0_Y_POSITION] >> 8
Adding number conversion cast (unumber) 8 in main::$26 = main::h_bar#2 + 8
Adding number conversion cast (unumber) main::$26 in main::$26 = main::h_bar#2 + (unumber)8
Adding number conversion cast (unumber) $ffff in main::$71[OFFSET_STRUCT_$0_X_VELOCITY] = main::$70[OFFSET_STRUCT_$0_X_VELOCITY] ^ $ffff
Adding number conversion cast (unumber) 8 in main::$32 = main::$72[OFFSET_STRUCT_$0_Y_POSITION] >> 8
Adding number conversion cast (unumber) $a in ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_TILE)[main::$48] = $a
Adding number conversion cast (unumber) 3 in ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES)[main::$49] = 3
Adding number conversion cast (unumber) 8 in main::$33 = main::$73[OFFSET_STRUCT_$0_X_POSITION] >> 8
Adding number conversion cast (unumber) $ffff in main::$75[OFFSET_STRUCT_$0_Y_VELOCITY] = main::$74[OFFSET_STRUCT_$0_Y_VELOCITY] ^ $ffff
Adding number conversion cast (unumber) 2 in main::$30 = main::h_bar#3 - 2
Adding number conversion cast (unumber) main::$30 in main::$30 = main::h_bar#3 - (unumber)2
Adding number conversion cast (unumber) 8 in main::$31 = main::$78 << 8
Adding number conversion cast (unumber) 0 in main::$80 = 0 != vblank_hit
Adding number conversion cast (unumber) 0 in vblank_hit = 0
Adding number conversion cast (unumber) $18 in *((byte*)$2001) = $18
Adding number conversion cast (unumber) 0 in *vblank::$1 = 0
Adding number conversion cast (unumber) 0 in *vblank::ppuSpriteBufferDmaTransfer1_$1 = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *main::initNES1_disableVideoOutput1_$0 = (unumber)0
Inlining cast *main::initNES1_disableVideoOutput1_$1 = (unumber)0
Inlining cast *FR_COUNTER = (unumber)$40
Inlining cast *main::initNES1_disableAudioOutput1_$0 = (unumber)$40
Inlining cast (MEMORY+(unumber)0)[main::initNES1_i#2] = (unumber)0
Inlining cast (MEMORY+(unumber)$100)[main::initNES1_i#2] = (unumber)0
Inlining cast (MEMORY+(unumber)$200)[main::initNES1_i#2] = (unumber)0
Inlining cast (MEMORY+(unumber)$300)[main::initNES1_i#2] = (unumber)0
Inlining cast (MEMORY+(unumber)$400)[main::initNES1_i#2] = (unumber)0
Inlining cast (MEMORY+(unumber)$500)[main::initNES1_i#2] = (unumber)0
Inlining cast (MEMORY+(unumber)$600)[main::initNES1_i#2] = (unumber)0
Inlining cast (MEMORY+(unumber)$700)[main::initNES1_i#2] = (unumber)0
Inlining cast ppuDataFill::val#0 = (unumber)0
Inlining cast ppuDataFill::size#0 = (unumber)$20*$1e
Inlining cast ppuDataFill::val#1 = (unumber)0
Inlining cast ppuDataFill::size#1 = (unumber)$40
Inlining cast *main::enableVideoOutput1_$0 = (unumber)$80
Inlining cast *main::enableVideoOutput1_$1 = (unumber)$1e
Inlining cast *main::$54 = (unumber)$88
Inlining cast main::i#1 = (unumber)0
Inlining cast main::return#0 = (snumber)0
Inlining cast main::sprite_idx#1 = (unumber)0
Inlining cast main::i#3 = (unumber)0
Inlining cast main::timer#2 = (unumber)0
Inlining cast main::$57[OFFSET_STRUCT_$0_X_POSITION] = (unumber)0
Inlining cast main::$58[OFFSET_STRUCT_$0_Y_POSITION] = (unumber)0
Inlining cast *((byte*)$2001) = (unumber)$98
Inlining cast ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_TILE)[main::$48] = (unumber)$a
Inlining cast ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES)[main::$49] = (unumber)3
Inlining cast vblank_hit = (unumber)0
Inlining cast *((byte*)$2001) = (unumber)$18
Inlining cast *vblank::$1 = (unumber)0
Inlining cast *vblank::ppuSpriteBufferDmaTransfer1_$1 = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 8192
Simplifying constant pointer cast (byte*) 9152
Simplifying constant pointer cast (byte*) 16128
Simplifying constant pointer cast (byte*) 8194
Simplifying constant pointer cast (byte*) 16407
Simplifying constant pointer cast (byte*) 0
Simplifying constant pointer cast (void()*) 0
Simplifying constant pointer cast (struct RICOH_2C02*) 8192
Simplifying constant pointer cast (struct RICOH_2A03*) 16384
Simplifying constant integer cast 7
Simplifying constant integer cast 9
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast $40
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $100
Simplifying constant integer cast 0
Simplifying constant integer cast $200
Simplifying constant integer cast 0
Simplifying constant integer cast $300
Simplifying constant integer cast 0
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast $500
Simplifying constant integer cast 0
Simplifying constant integer cast $600
Simplifying constant integer cast 0
Simplifying constant integer cast $700
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant pointer cast (void*) 8256
Simplifying constant integer cast $80
Simplifying constant integer cast $1e
Simplifying constant integer cast $88
Simplifying constant integer cast 0
Simplifying constant integer cast $32
Simplifying constant integer cast $3ff
Simplifying constant integer cast $ff
Simplifying constant integer cast $60
Simplifying constant integer cast $ff
Simplifying constant integer cast $32
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 9
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast $98
Simplifying constant pointer cast (byte*) 8193
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast $ffff
Simplifying constant integer cast 8
Simplifying constant integer cast $a
Simplifying constant integer cast 3
Simplifying constant integer cast 8
Simplifying constant integer cast $ffff
Simplifying constant integer cast 2
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $18
Simplifying constant pointer cast (byte*) 8193
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 7
Finalized unsigned number type 9
Finalized unsigned number type 8
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $40
Finalized unsigned number type $40
Finalized unsigned number type $80
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $100
Finalized unsigned number type 0
Finalized unsigned number type $200
Finalized unsigned number type 0
Finalized unsigned number type $300
Finalized unsigned number type 0
Finalized unsigned number type $400
Finalized unsigned number type 0
Finalized unsigned number type $500
Finalized unsigned number type 0
Finalized unsigned number type $600
Finalized unsigned number type 0
Finalized unsigned number type $700
Finalized unsigned number type 0
Finalized unsigned number type $80
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $40
Finalized unsigned number type $80
Finalized unsigned number type $1e
Finalized unsigned number type $88
Finalized unsigned number type 0
Finalized unsigned number type $32
Finalized unsigned number type $3ff
Finalized unsigned number type $ff
Finalized unsigned number type $60
Finalized unsigned number type $ff
Finalized unsigned number type $32
Finalized signed number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 9
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $10
Finalized unsigned number type 8
Finalized unsigned number type 8
Finalized unsigned number type $98
Finalized unsigned number type 8
Finalized unsigned number type 8
Finalized unsigned number type 8
Finalized unsigned number type $ffff
Finalized unsigned number type 8
Finalized unsigned number type $a
Finalized unsigned number type 3
Finalized unsigned number type 8
Finalized unsigned number type $ffff
Finalized unsigned number type 2
Finalized unsigned number type 8
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $18
Finalized unsigned number type 0
Finalized unsigned number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::initNES1_waitForVBlank1_$0 = *main::initNES1_waitForVBlank1_$2 & $80
Inferred type updated to byte in main::initNES1_waitForVBlank2_$0 = *main::initNES1_waitForVBlank2_$2 & $80
Inferred type updated to word in main::$10 = main::$9 & $3ff
Inferred type updated to byte in main::$12 = main::$11 & $ff
Inferred type updated to byte in main::$13 = sine_table[main::timer_2#1] + $60
Inferred type updated to byte in main::$14 = main::h_bar#1 ^ $ff
Inferred type updated to byte in main::$26 = main::h_bar#2 + 8
Inferred type updated to byte in main::$30 = main::h_bar#3 - 2
Inversing boolean not [87] main::initNES1_waitForVBlank1_$1 = 0 == main::initNES1_waitForVBlank1_$0 from [86] main::initNES1_waitForVBlank1_$4 = 0 != main::initNES1_waitForVBlank1_$0
Inversing boolean not [109] main::initNES1_waitForVBlank2_$1 = 0 == main::initNES1_waitForVBlank2_$0 from [108] main::initNES1_waitForVBlank2_$4 = 0 != main::initNES1_waitForVBlank2_$0
Inversing boolean not [187] main::$16 = main::active_balls#2 >= $32 from [186] main::$15 = main::active_balls#2 < $32
Inversing boolean not [197] main::$18 = main::timer#3 != 9 from [195] main::$17 = main::timer#3 == 9
Inversing boolean not [230] main::$22 = main::$20 >= 8 from [229] main::$21 = main::$20 < 8
Inversing boolean not [282] main::$34 = 0 == vblank_hit from [281] main::$80 = 0 != vblank_hit
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)scroll_y = main::$14 
Alias ppuDataFill::ppuDataPrepare1_ppuData#0 = ppuDataFill::ppuData#2 ppuDataFill::ppuDataPrepare1_ppuData#1 
Alias ppuDataFill::size#3 = ppuDataFill::size#5 ppuDataFill::size#7 
Alias ppuDataFill::val#4 = ppuDataFill::val#6 ppuDataFill::val#8 
Alias ppuDataFill::val#2 = ppuDataFill::val#3 ppuDataFill::ppuDataPut1_val#0 ppuDataFill::ppuDataPut1_val#1 ppuDataFill::val#7 ppuDataFill::val#5 
Alias ppuDataFill::i#2 = ppuDataFill::i#5 ppuDataFill::i#4 ppuDataFill::i#3 
Alias ppuDataFill::size#2 = ppuDataFill::size#8 ppuDataFill::size#6 ppuDataFill::size#4 
Alias ppuDataTransfer::ppuDataPrepare1_ppuData#0 = ppuDataTransfer::ppuData#2 ppuDataTransfer::ppuDataPrepare1_ppuData#1 
Alias ppuDataTransfer::cpuData#2 = ppuDataTransfer::cpuData#3 ppuDataTransfer::cpuData#4 
Alias ppuDataTransfer::size#3 = ppuDataTransfer::size#5 ppuDataTransfer::size#7 
Alias ppuDataTransfer::cpuSrc#2 = ppuDataTransfer::cpuSrc#4 ppuDataTransfer::cpuSrc#5 ppuDataTransfer::cpuSrc#3 
Alias ppuDataTransfer::i#2 = ppuDataTransfer::i#5 ppuDataTransfer::i#4 ppuDataTransfer::i#3 
Alias ppuDataTransfer::size#2 = ppuDataTransfer::size#8 ppuDataTransfer::size#6 ppuDataTransfer::size#4 
Alias ppuDataTransfer::ppuDataPut1_val#0 = ppuDataTransfer::ppuDataPut1_val#1 
Alias rand::return#0 = rand::return#4 rand::return#1 
Alias rand_state#11 = rand_state#2 rand_state#3 
Alias rand_state#48 = rand_state#52 rand_state#53 rand_state#51 rand_state#50 rand_state#49 
Alias rand_state#46 = rand_state#47 
Alias rand_state#44 = rand_state#45 
Alias rand_state#22 = rand_state#42 rand_state#43 rand_state#39 rand_state#33 rand_state#30 rand_state#28 rand_state#26 rand_state#24 
Alias ppuDataTransfer::size#0 = main::$1 
Alias ppuDataTransfer::size#1 = main::$5 
Alias rand_state#17 = rand_state#20 
Alias main::i#14 = main::i#5 main::i#6 main::i#7 
Alias main::timer_2#10 = main::timer_2#4 main::timer_2#8 main::timer_2#6 
Alias main::active_balls#13 = main::active_balls#19 main::active_balls#9 main::active_balls#17 
Alias main::timer#10 = main::timer#12 main::timer#6 main::timer#8 
Alias rand::return#2 = rand::return#5 
Alias rand_state#12 = rand_state#4 
Alias rand::return#3 = rand::return#6 
Alias rand_state#13 = rand_state#5 
Alias main::timer_2#2 = main::timer_2#3 
Alias main::active_balls#2 = main::active_balls#5 main::active_balls#6 main::active_balls#3 
Alias main::timer#3 = main::timer#4 main::timer#5 
Alias rand_state#14 = rand_state#36 rand_state#21 rand_state#18 rand_state#34 rand_state#35 rand_state#6 
Alias main::h_bar#1 = main::$13 main::h_bar#9 main::h_bar#10 
Alias main::timer_2#1 = main::timer_2#14 main::timer_2#15 
Alias main::i#11 = main::i#9 main::i#8 
Alias main::h_bar#4 = main::h_bar#5 main::h_bar#6 
Alias main::sprite_idx#6 = main::sprite_idx#7 main::sprite_idx#8 
Alias main::active_balls#14 = main::active_balls#15 main::active_balls#4 main::active_balls#18 
Alias main::timer_2#11 = main::timer_2#19 main::timer_2#9 main::timer_2#18 
Alias main::timer#11 = main::timer#19 main::timer#13 main::timer#18 
Alias rand_state#27 = rand_state#41 rand_state#29 rand_state#40 
Alias main::i#10 = main::i#13 
Alias main::h_bar#2 = main::h_bar#3 
Alias main::sprite_idx#4 = main::sprite_idx#5 
Alias main::active_balls#11 = main::active_balls#12 
Alias main::timer_2#16 = main::timer_2#17 
Alias main::timer#16 = main::timer#17 
Alias rand_state#37 = rand_state#38 
Alias main::timer_2#5 = main::timer_2#7 
Alias main::active_balls#10 = main::active_balls#16 
Alias main::timer#7 = main::timer#9 
Alias rand_state#23 = rand_state#25 
Alias main::return#0 = main::return#3 main::return#1 
Alias vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 = vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#1 
Alias rand_state#19 = rand_state#7 
Alias rand_state#15 = rand_state#8 rand_state#16 rand_state#9 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)scroll_y = main::$14 
Alias main::h_bar#1 = main::h_bar#8 
Alias main::timer_2#1 = main::timer_2#13 
Alias rand_state#14 = rand_state#32 
Alias main::i#10 = main::i#11 main::i#12 
Alias main::h_bar#2 = main::h_bar#4 main::h_bar#7 
Alias main::sprite_idx#3 = main::sprite_idx#4 main::sprite_idx#6 
Alias main::active_balls#11 = main::active_balls#14 main::active_balls#7 
Alias main::timer_2#11 = main::timer_2#16 main::timer_2#12 
Alias main::timer#11 = main::timer#16 main::timer#14 
Alias rand_state#27 = rand_state#37 rand_state#31 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)scroll_y = main::$14 
Identical Phi Values ppuDataFill::size#2 ppuDataFill::size#3
Identical Phi Values ppuDataFill::val#2 ppuDataFill::val#4
Identical Phi Values ppuDataTransfer::size#2 ppuDataTransfer::size#3
Identical Phi Values rand_state#48 rand_state#19
Identical Phi Values rand_state#46 rand_state#48
Identical Phi Values rand_state#44 rand_state#46
Identical Phi Values rand_state#22 rand_state#44
Identical Phi Values main::timer_2#10 main::timer_2#0
Identical Phi Values main::active_balls#13 main::active_balls#0
Identical Phi Values main::timer#10 main::timer#0
Identical Phi Values rand_state#12 rand_state#11
Identical Phi Values rand_state#13 rand_state#11
Identical Phi Values main::active_balls#11 main::active_balls#8
Identical Phi Values main::h_bar#2 main::h_bar#1
Identical Phi Values main::timer_2#11 main::timer_2#1
Identical Phi Values main::timer#11 main::timer#15
Identical Phi Values rand_state#27 rand_state#14
Identical Phi Values main::timer_2#5 main::timer_2#11
Identical Phi Values main::active_balls#10 main::active_balls#11
Identical Phi Values main::timer#7 main::timer#11
Identical Phi Values rand_state#23 rand_state#27
Identical Phi Values rand_state#15 rand_state#14
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values rand_state#14 rand_state#17
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [205] main::$38 = main::active_balls#1 * SIZEOF_STRUCT_$0
Identified duplicate assignment right side [214] main::$60 = (word*)balls + main::$39
Identified duplicate assignment right side [215] main::$61 = (word*)balls + main::$39
Identified duplicate assignment right side [217] main::$40 = main::i#10 * SIZEOF_STRUCT_$0
Identified duplicate assignment right side [219] main::$63 = (word*)balls + main::$40
Identified duplicate assignment right side [221] main::$41 = main::i#10 * SIZEOF_STRUCT_$0
Identified duplicate assignment right side [223] main::$65 = (word*)balls + main::$41
Identified duplicate assignment right side [224] main::$66 = (word*)balls + main::$41
Identified duplicate assignment right side [226] main::$42 = main::i#10 * SIZEOF_STRUCT_$0
Identified duplicate assignment right side [239] main::$44 = main::i#10 * SIZEOF_STRUCT_$0
Identified duplicate assignment right side [250] main::$71 = (word*)balls + main::$45
Identified duplicate assignment right side [258] main::$48 = main::sprite_idx#3 * SIZEOF_STRUCT_SPRITEDATA
Identified duplicate assignment right side [260] main::$49 = main::sprite_idx#3 * SIZEOF_STRUCT_SPRITEDATA
Identified duplicate assignment right side [262] main::$50 = main::i#10 * SIZEOF_STRUCT_$0
Identified duplicate assignment right side [265] main::$51 = main::sprite_idx#3 * SIZEOF_STRUCT_SPRITEDATA
Identified duplicate assignment right side [272] main::$75 = (word*)balls + main::$52
Identified duplicate assignment right side [277] main::$53 = main::i#10 * SIZEOF_STRUCT_$0
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition ppuDataFill::$1 [12] if(ppuDataFill::i#2<ppuDataFill::size#3) goto ppuDataFill::@2
Simple Condition ppuDataTransfer::$1 [31] if(ppuDataTransfer::i#2<ppuDataTransfer::size#3) goto ppuDataTransfer::@2
Simple Condition main::initNES1_waitForVBlank1_$1 [66] if(0==main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1
Simple Condition main::initNES1_$5 [79] if(0!=main::initNES1_i#1) goto main::initNES1_@1
Simple Condition main::initNES1_waitForVBlank2_$1 [85] if(0==main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1
Simple Condition main::$8 [121] if(main::i#14<$32) goto main::@2
Simple Condition main::$79 [141] if(0!=1) goto main::@4
Simple Condition main::$16 [147] if(main::active_balls#2>=$32) goto main::@6
Simple Condition main::$18 [154] if(main::timer#3!=9) goto main::@6
Simple Condition main::$19 [165] if(main::i#10<main::active_balls#8) goto main::@8
Simple Condition main::$22 [184] if(main::$20>=8) goto main::@10
Simple Condition main::$34 [230] if(0==vblank_hit) goto main::@14
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() [196] main::$29 = ! main::$28
Rewriting && if()-condition to two if()s [195] main::$28 = main::$24 && main::$27
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant right-side identified [2] ppuDataFill::ppuDataPrepare1_$4 = (byte*)PPU
Constant right-side identified [6] ppuDataFill::ppuDataPrepare1_$5 = (byte*)PPU
Constant right-side identified [13] ppuDataFill::ppuDataPut1_$1 = (byte*)PPU
Constant right-side identified [20] ppuDataTransfer::ppuDataPrepare1_$4 = (byte*)PPU
Constant right-side identified [24] ppuDataTransfer::ppuDataPrepare1_$5 = (byte*)PPU
Constant right-side identified [33] ppuDataTransfer::ppuDataPut1_$1 = (byte*)PPU
Constant right-side identified [50] main::initNES1_disableVideoOutput1_$2 = (byte*)PPU
Constant right-side identified [53] main::initNES1_disableVideoOutput1_$3 = (byte*)PPU
Constant right-side identified [57] main::initNES1_disableAudioOutput1_$1 = (byte*)APU
Constant right-side identified [62] main::initNES1_waitForVBlank1_$3 = (byte*)PPU
Constant right-side identified [81] main::initNES1_waitForVBlank2_$3 = (byte*)PPU
Constant right-side identified [87] ppuDataTransfer::size#0 = sizeof  palette
Constant right-side identified [93] ppuDataFill::size#0 = (unumber)$20*$1e
Constant right-side identified [99] ppuDataTransfer::size#1 = sizeof  h_bar_tilemap
Constant right-side identified [103] main::enableVideoOutput1_$2 = (byte*)PPU
Constant right-side identified [106] main::enableVideoOutput1_$3 = (byte*)PPU
Constant right-side identified [109] main::$77 = (byte*)PPU
Constant right-side identified [234] vblank::$3 = (byte*)PPU
Constant right-side identified [237] vblank::$4 = (byte*)PPU
Constant right-side identified [241] vblank::ppuSpriteBufferDmaTransfer1_$3 = (byte*)PPU
Constant right-side identified [245] vblank::ppuSpriteBufferDmaTransfer1_$4 = (byte*)APU
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant ppuDataFill::ppuDataPrepare1_$4 = (byte*)PPU
Constant ppuDataFill::ppuDataPrepare1_$5 = (byte*)PPU
Constant ppuDataFill::i#0 = 0
Constant ppuDataFill::ppuDataPut1_$1 = (byte*)PPU
Constant ppuDataTransfer::ppuDataPrepare1_$4 = (byte*)PPU
Constant ppuDataTransfer::ppuDataPrepare1_$5 = (byte*)PPU
Constant ppuDataTransfer::i#0 = 0
Constant ppuDataTransfer::ppuDataPut1_$1 = (byte*)PPU
Constant main::initNES1_disableVideoOutput1_$2 = (byte*)PPU
Constant main::initNES1_disableVideoOutput1_$3 = (byte*)PPU
Constant main::initNES1_disableAudioOutput1_$1 = (byte*)APU
Constant main::initNES1_waitForVBlank1_$3 = (byte*)PPU
Constant main::initNES1_i#0 = 0
Constant main::initNES1_waitForVBlank2_$3 = (byte*)PPU
Constant ppuDataTransfer::size#0 = sizeof palette
Constant ppuDataTransfer::ppuData#0 = (void*)PPU_PALETTE
Constant ppuDataTransfer::cpuData#0 = (void*)palette
Constant ppuDataFill::ppuData#0 = (void*)PPU_NAME_TABLE_0
Constant ppuDataFill::val#0 = 0
Constant ppuDataFill::size#0 = (unumber)$20*$1e
Constant ppuDataFill::ppuData#1 = (void*)PPU_ATTRIBUTE_TABLE_0
Constant ppuDataFill::val#1 = 0
Constant ppuDataFill::size#1 = $40
Constant ppuDataTransfer::size#1 = sizeof h_bar_tilemap
Constant ppuDataTransfer::ppuData#1 = (void*) 8256
Constant ppuDataTransfer::cpuData#1 = (void*)h_bar_tilemap
Constant main::enableVideoOutput1_$2 = (byte*)PPU
Constant main::enableVideoOutput1_$3 = (byte*)PPU
Constant main::$77 = (byte*)PPU
Constant main::i#0 = 0
Constant main::active_balls#0 = 0
Constant main::timer#0 = 0
Constant main::timer_2#0 = 0
Constant main::h_bar#0 = $80
Constant main::sprite_idx#0 = 0
Constant main::i#1 = 0
Constant main::return#0 = 0
Constant main::sprite_idx#1 = 0
Constant main::i#3 = 0
Constant main::timer#2 = 0
Constant vblank::$3 = (byte*)PPU
Constant vblank::$4 = (byte*)PPU
Constant vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 = SPRITE_BUFFER
Constant vblank::ppuSpriteBufferDmaTransfer1_$3 = (byte*)PPU
Constant vblank::ppuSpriteBufferDmaTransfer1_$4 = (byte*)APU
Constant rand_state#19 = 1
Successful SSA optimization Pass2ConstantIdentification
Constant main::return#2 = main::return#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [141] if(0!=1) goto main::@4
Successful SSA optimization Pass2ConstantIfs
Converting *(pointer+n) to pointer[n] [4] *ppuDataFill::ppuDataPrepare1_$2 = ppuDataFill::ppuDataPrepare1_$0  -- ppuDataFill::ppuDataPrepare1_$4[OFFSET_STRUCT_RICOH_2C02_PPUADDR]
Converting *(pointer+n) to pointer[n] [8] *ppuDataFill::ppuDataPrepare1_$3 = ppuDataFill::ppuDataPrepare1_$1  -- ppuDataFill::ppuDataPrepare1_$5[OFFSET_STRUCT_RICOH_2C02_PPUADDR]
Converting *(pointer+n) to pointer[n] [15] *ppuDataFill::ppuDataPut1_$0 = ppuDataFill::val#4  -- ppuDataFill::ppuDataPut1_$1[OFFSET_STRUCT_RICOH_2C02_PPUDATA]
Converting *(pointer+n) to pointer[n] [22] *ppuDataTransfer::ppuDataPrepare1_$2 = ppuDataTransfer::ppuDataPrepare1_$0  -- ppuDataTransfer::ppuDataPrepare1_$4[OFFSET_STRUCT_RICOH_2C02_PPUADDR]
Converting *(pointer+n) to pointer[n] [26] *ppuDataTransfer::ppuDataPrepare1_$3 = ppuDataTransfer::ppuDataPrepare1_$1  -- ppuDataTransfer::ppuDataPrepare1_$5[OFFSET_STRUCT_RICOH_2C02_PPUADDR]
Converting *(pointer+n) to pointer[n] [35] *ppuDataTransfer::ppuDataPut1_$0 = ppuDataTransfer::ppuDataPut1_val#0  -- ppuDataTransfer::ppuDataPut1_$1[OFFSET_STRUCT_RICOH_2C02_PPUDATA]
Converting *(pointer+n) to pointer[n] [52] *main::initNES1_disableVideoOutput1_$0 = 0  -- main::initNES1_disableVideoOutput1_$2[OFFSET_STRUCT_RICOH_2C02_PPUCTRL]
Converting *(pointer+n) to pointer[n] [55] *main::initNES1_disableVideoOutput1_$1 = 0  -- main::initNES1_disableVideoOutput1_$3[OFFSET_STRUCT_RICOH_2C02_PPUMASK]
Converting *(pointer+n) to pointer[n] [59] *main::initNES1_disableAudioOutput1_$0 = $40  -- main::initNES1_disableAudioOutput1_$1[OFFSET_STRUCT_RICOH_2A03_DMC_FREQ]
Converting *(pointer+n) to pointer[n] [64] main::initNES1_waitForVBlank1_$0 = *main::initNES1_waitForVBlank1_$2 & $80  -- main::initNES1_waitForVBlank1_$3[OFFSET_STRUCT_RICOH_2C02_PPUSTATUS]
Converting *(pointer+n) to pointer[n] [83] main::initNES1_waitForVBlank2_$0 = *main::initNES1_waitForVBlank2_$2 & $80  -- main::initNES1_waitForVBlank2_$3[OFFSET_STRUCT_RICOH_2C02_PPUSTATUS]
Converting *(pointer+n) to pointer[n] [105] *main::enableVideoOutput1_$0 = $80  -- main::enableVideoOutput1_$2[OFFSET_STRUCT_RICOH_2C02_PPUCTRL]
Converting *(pointer+n) to pointer[n] [108] *main::enableVideoOutput1_$1 = $1e  -- main::enableVideoOutput1_$3[OFFSET_STRUCT_RICOH_2C02_PPUMASK]
Converting *(pointer+n) to pointer[n] [111] *main::$54 = $88  -- main::$77[OFFSET_STRUCT_RICOH_2C02_PPUCTRL]
Converting *(pointer+n) to pointer[n] [236] *vblank::$1 = 0  -- vblank::$3[OFFSET_STRUCT_RICOH_2C02_PPUSCROLL]
Converting *(pointer+n) to pointer[n] [239] *vblank::$2 = scroll_y  -- vblank::$4[OFFSET_STRUCT_RICOH_2C02_PPUSCROLL]
Converting *(pointer+n) to pointer[n] [243] *vblank::ppuSpriteBufferDmaTransfer1_$1 = 0  -- vblank::ppuSpriteBufferDmaTransfer1_$3[OFFSET_STRUCT_RICOH_2C02_OAMADDR]
Converting *(pointer+n) to pointer[n] [247] *vblank::ppuSpriteBufferDmaTransfer1_$2 = vblank::ppuSpriteBufferDmaTransfer1_$0  -- vblank::ppuSpriteBufferDmaTransfer1_$4[OFFSET_STRUCT_RICOH_2A03_OAMDMA]
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero main::initNES1_disableVideoOutput1_$2 in [51] main::initNES1_disableVideoOutput1_$0 = main::initNES1_disableVideoOutput1_$2 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Simplifying expression containing zero main::initNES1_disableVideoOutput1_$2 in [52] main::initNES1_disableVideoOutput1_$2[OFFSET_STRUCT_RICOH_2C02_PPUCTRL] = 0
Simplifying expression containing zero MEMORY in [69] (MEMORY+0)[main::initNES1_i#2] = 0
Simplifying expression containing zero main::enableVideoOutput1_$2 in [104] main::enableVideoOutput1_$0 = main::enableVideoOutput1_$2 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Simplifying expression containing zero main::enableVideoOutput1_$2 in [105] main::enableVideoOutput1_$2[OFFSET_STRUCT_RICOH_2C02_PPUCTRL] = $80
Simplifying expression containing zero main::$77 in [110] main::$54 = main::$77 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Simplifying expression containing zero main::$77 in [111] main::$77[OFFSET_STRUCT_RICOH_2C02_PPUCTRL] = $88
Simplifying expression containing zero main::$57 in [159] main::$57[OFFSET_STRUCT_$0_X_POSITION] = 0
Simplifying expression containing zero main::$59 in [170] main::$61[OFFSET_STRUCT_$0_X_POSITION] = main::$59[OFFSET_STRUCT_$0_X_POSITION] + main::$60[OFFSET_STRUCT_$0_X_VELOCITY]
Simplifying expression containing zero main::$61 in [170] main::$61[OFFSET_STRUCT_$0_X_POSITION] = *main::$59 + main::$60[OFFSET_STRUCT_$0_X_VELOCITY]
Simplifying expression containing zero main::$67 in [182] main::$20 = main::$67[OFFSET_STRUCT_$0_X_POSITION] >> 8
Simplifying expression containing zero (byte*)SPRITE_BUFFER in [206] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_Y)[main::$47] = (byte)main::$32
Simplifying expression containing zero main::$73 in [213] main::$33 = main::$73[OFFSET_STRUCT_$0_X_POSITION] >> 8
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable ppuDataFill::ppuDataPrepare1_$2 and assignment [2] ppuDataFill::ppuDataPrepare1_$2 = ppuDataFill::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable ppuDataFill::ppuDataPrepare1_$3 and assignment [5] ppuDataFill::ppuDataPrepare1_$3 = ppuDataFill::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable ppuDataFill::ppuDataPut1_$0 and assignment [9] ppuDataFill::ppuDataPut1_$0 = ppuDataFill::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable ppuDataTransfer::ppuDataPrepare1_$2 and assignment [15] ppuDataTransfer::ppuDataPrepare1_$2 = ppuDataTransfer::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable ppuDataTransfer::ppuDataPrepare1_$3 and assignment [18] ppuDataTransfer::ppuDataPrepare1_$3 = ppuDataTransfer::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable ppuDataTransfer::ppuDataPut1_$0 and assignment [24] ppuDataTransfer::ppuDataPut1_$0 = ppuDataTransfer::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable main::initNES1_disableVideoOutput1_$0 and assignment [39] main::initNES1_disableVideoOutput1_$0 = main::initNES1_disableVideoOutput1_$2
Eliminating unused variable main::initNES1_disableVideoOutput1_$1 and assignment [41] main::initNES1_disableVideoOutput1_$1 = main::initNES1_disableVideoOutput1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUMASK
Eliminating unused variable main::initNES1_disableAudioOutput1_$0 and assignment [44] main::initNES1_disableAudioOutput1_$0 = main::initNES1_disableAudioOutput1_$1 + OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
Eliminating unused variable main::initNES1_waitForVBlank1_$2 and assignment [47] main::initNES1_waitForVBlank1_$2 = main::initNES1_waitForVBlank1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
Eliminating unused variable main::initNES1_waitForVBlank2_$2 and assignment [61] main::initNES1_waitForVBlank2_$2 = main::initNES1_waitForVBlank2_$3 + OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
Eliminating unused variable main::enableVideoOutput1_$0 and assignment [69] main::enableVideoOutput1_$0 = main::enableVideoOutput1_$2
Eliminating unused variable main::enableVideoOutput1_$1 and assignment [71] main::enableVideoOutput1_$1 = main::enableVideoOutput1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUMASK
Eliminating unused variable main::$54 and assignment [73] main::$54 = main::$77
Eliminating unused variable vblank::$1 and assignment [173] vblank::$1 = vblank::$3 + OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
Eliminating unused variable vblank::$2 and assignment [175] vblank::$2 = vblank::$4 + OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
Eliminating unused variable vblank::ppuSpriteBufferDmaTransfer1_$1 and assignment [177] vblank::ppuSpriteBufferDmaTransfer1_$1 = vblank::ppuSpriteBufferDmaTransfer1_$3 + OFFSET_STRUCT_RICOH_2C02_OAMADDR
Eliminating unused variable vblank::ppuSpriteBufferDmaTransfer1_$2 and assignment [180] vblank::ppuSpriteBufferDmaTransfer1_$2 = vblank::ppuSpriteBufferDmaTransfer1_$4 + OFFSET_STRUCT_RICOH_2A03_OAMDMA
Eliminating unused constant main::i#0
Eliminating unused constant main::h_bar#0
Eliminating unused constant main::sprite_idx#0
Eliminating unused constant main::return#2
Eliminating unused constant OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Eliminating unused constant OFFSET_STRUCT_$0_X_POSITION
Eliminating unused constant OFFSET_STRUCT_SPRITEDATA_Y
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant main::return#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@5
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolving array sizeof() sizeof palette
Resolving array sizeof() sizeof h_bar_tilemap
Successful SSA optimization PassNSizeOfSimplification
Alias candidate removed (volatile)scroll_y = main::$14 
Alias main::$38 = main::$37 
Alias main::$60 = main::$59 main::$61 
Alias main::$40 = main::$39 main::$41 main::$42 
Alias main::$63 = main::$62 
Alias main::$65 = main::$64 main::$66 
Alias main::$44 = main::$43 
Alias main::$71 = main::$70 
Alias main::$48 = main::$47 main::$49 main::$51 
Alias main::$50 = main::$46 
Alias main::$75 = main::$74 
Alias main::$53 = main::$52 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)scroll_y = main::$14 
Identified duplicate assignment right side [92] main::$58 = (word*)balls + main::$38
Identified duplicate assignment right side [102] main::$63 = (word*)balls + main::$40
Identified duplicate assignment right side [106] main::$65 = (word*)balls + main::$40
Identified duplicate assignment right side [111] main::$67 = (word*)balls + main::$40
Identified duplicate assignment right side [120] main::$69 = (word*)balls + main::$44
Identified duplicate assignment right side [139] main::$73 = (word*)balls + main::$50
Identified duplicate assignment right side [153] main::$76 = (word*)balls + main::$53
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition main::$24 [114] if(main::$23>=main::h_bar#1) goto main::@26
Simple Condition main::$27 [152] if(main::$25<main::$26) goto main::@13
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [114] if(main::$23<main::h_bar#1) goto main::@11
Negating conditional jump and destination [152] if(main::$25>=main::$26) goto main::@11
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [144] vblank::ppuSpriteBufferDmaTransfer1_$0 = > vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant vblank::ppuSpriteBufferDmaTransfer1_$0 = >vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0
Successful SSA optimization Pass2ConstantIdentification
Adding number conversion cast (unumber) $20 in 
Adding number conversion cast (unumber) $20 in 
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $20
Simplifying constant integer cast $20
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $20
Finalized unsigned number type $20
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)scroll_y = main::$14 
Alias main::$58 = main::$57 
Alias main::$63 = main::$60 main::$65 main::$67 
Alias main::$69 = main::$68 
Alias main::$73 = main::$72 
Alias main::$76 = main::$75 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)scroll_y = main::$14 
Alias candidate removed (volatile)scroll_y = main::$14 
Inlining Noop Cast [15] ppuDataTransfer::cpuSrc#0 = (byte*)ppuDataTransfer::cpuData#2 keeping ppuDataTransfer::cpuData#2
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [67] main::$35 = main::i#14 * SIZEOF_STRUCT_$0
Rewriting multiplication to use shift [74] main::$36 = main::i#14 * SIZEOF_STRUCT_$0
Rewriting multiplication to use shift [88] main::$38 = main::active_balls#1 * SIZEOF_STRUCT_$0
Rewriting multiplication to use shift [94] main::$40 = main::i#10 * SIZEOF_STRUCT_$0
Rewriting multiplication to use shift [102] main::$44 = main::i#10 * SIZEOF_STRUCT_$0
Rewriting multiplication to use shift [108] main::$45 = main::i#10 * SIZEOF_STRUCT_$0
Rewriting multiplication to use shift [111] main::$50 = main::i#10 * SIZEOF_STRUCT_$0
Rewriting multiplication to use shift [114] main::$48 = main::sprite_idx#3 * SIZEOF_STRUCT_SPRITEDATA
Rewriting multiplication to use shift [122] main::$53 = main::i#10 * SIZEOF_STRUCT_$0
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings ppuDataFill::i#0
Inlining constant with different constant siblings ppuDataFill::ppuData#0
Inlining constant with var siblings ppuDataFill::val#0
Inlining constant with var siblings ppuDataFill::size#0
Inlining constant with different constant siblings ppuDataFill::ppuData#1
Inlining constant with var siblings ppuDataFill::val#1
Inlining constant with var siblings ppuDataFill::size#1
Inlining constant with var siblings ppuDataTransfer::i#0
Inlining constant with var siblings ppuDataTransfer::size#0
Inlining constant with different constant siblings ppuDataTransfer::ppuData#0
Inlining constant with var siblings ppuDataTransfer::cpuData#0
Inlining constant with var siblings ppuDataTransfer::size#1
Inlining constant with different constant siblings ppuDataTransfer::ppuData#1
Inlining constant with var siblings ppuDataTransfer::cpuData#1
Inlining constant with var siblings main::initNES1_i#0
Inlining constant with var siblings main::active_balls#0
Inlining constant with var siblings main::timer#0
Inlining constant with var siblings main::timer_2#0
Inlining constant with var siblings main::i#1
Inlining constant with var siblings main::sprite_idx#1
Inlining constant with var siblings main::i#3
Inlining constant with var siblings main::timer#2
Inlining constant with var siblings rand_state#19
Constant inlined OFFSET_STRUCT_$0_Y_POSITION = 2
Constant inlined ppuDataTransfer::i#0 = 0
Constant inlined main::active_balls#0 = 0
Constant inlined OFFSET_STRUCT_$0_X_VELOCITY = 4
Constant inlined main::enableVideoOutput1_$3 = (byte*)PPU
Constant inlined main::enableVideoOutput1_$2 = (byte*)PPU
Constant inlined ppuDataTransfer::ppuDataPut1_$1 = (byte*)PPU
Constant inlined ppuDataFill::val#1 = 0
Constant inlined ppuDataFill::ppuDataPut1_$1 = (byte*)PPU
Constant inlined main::$77 = (byte*)PPU
Constant inlined ppuDataFill::val#0 = 0
Constant inlined vblank::$3 = (byte*)PPU
Constant inlined OFFSET_STRUCT_$0_Y_VELOCITY = 6
Constant inlined vblank::$4 = (byte*)PPU
Constant inlined main::initNES1_waitForVBlank2_$3 = (byte*)PPU
Constant inlined ppuDataFill::ppuDataPrepare1_$4 = (byte*)PPU
Constant inlined ppuDataTransfer::ppuDataPrepare1_$5 = (byte*)PPU
Constant inlined ppuDataFill::ppuDataPrepare1_$5 = (byte*)PPU
Constant inlined ppuDataTransfer::ppuDataPrepare1_$4 = (byte*)PPU
Constant inlined main::initNES1_disableVideoOutput1_$3 = (byte*)PPU
Constant inlined main::initNES1_disableVideoOutput1_$2 = (byte*)PPU
Constant inlined ppuDataFill::ppuData#1 = (void*)PPU_ATTRIBUTE_TABLE_0
Constant inlined ppuDataFill::ppuData#0 = (void*)PPU_NAME_TABLE_0
Constant inlined main::i#1 = 0
Constant inlined main::initNES1_disableAudioOutput1_$1 = (byte*)APU
Constant inlined ppuDataTransfer::cpuData#1 = (void*)h_bar_tilemap
Constant inlined ppuDataTransfer::cpuData#0 = (void*)palette
Constant inlined ppuDataTransfer::ppuData#1 = (void*) 8256
Constant inlined ppuDataTransfer::ppuData#0 = (void*)PPU_PALETTE
Constant inlined main::timer_2#0 = 0
Constant inlined main::i#3 = 0
Constant inlined main::initNES1_i#0 = 0
Constant inlined rand_state#19 = 1
Constant inlined ppuDataTransfer::size#1 = $20*SIZEOF_BYTE
Constant inlined ppuDataTransfer::size#0 = $20*SIZEOF_BYTE
Constant inlined main::timer#0 = 0
Constant inlined vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 = SPRITE_BUFFER
Constant inlined main::timer#2 = 0
Constant inlined main::initNES1_waitForVBlank1_$3 = (byte*)PPU
Constant inlined SIZEOF_STRUCT_$0 = 8
Constant inlined vblank::ppuSpriteBufferDmaTransfer1_$0 = >SPRITE_BUFFER
Constant inlined ppuDataFill::size#1 = $40
Constant inlined ppuDataFill::size#0 = (word)$20*$1e
Constant inlined main::sprite_idx#1 = 0
Constant inlined vblank::ppuSpriteBufferDmaTransfer1_$3 = (byte*)PPU
Constant inlined ppuDataFill::i#0 = 0
Constant inlined vblank::ppuSpriteBufferDmaTransfer1_$4 = (byte*)APU
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA)
Successful SSA optimization Pass2ConstantAdditionElimination
Alias candidate removed (volatile)scroll_y = main::$14 
Identical Phi Values ppuDataFill::val#4 0
Identical Phi Values ppuDataTransfer::size#3 $20*SIZEOF_BYTE
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [73] main::$36 = main::i#14 << 3
Identified duplicate assignment right side [101] main::$44 = main::i#10 << 3
Identified duplicate assignment right side [107] main::$45 = main::i#10 << 3
Identified duplicate assignment right side [110] main::$50 = main::i#10 << 3
Identified duplicate assignment right side [121] main::$53 = main::i#10 << 3
Successful SSA optimization Pass2DuplicateRValueIdentification
Eliminating unused constant SIZEOF_STRUCT_SPRITEDATA
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)scroll_y = main::$14 
Alias main::$36 = main::$35 
Alias main::$44 = main::$40 main::$45 main::$50 main::$53 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)scroll_y = main::$14 
Alias candidate removed (volatile)scroll_y = main::$14 
Added new block during phi lifting main::@27(between main::initNES1_@1 and main::initNES1_@1)
Added new block during phi lifting main::@28(between main::@16 and main::@6)
Added new block during phi lifting main::@29(between main::@4 and main::@6)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::initNES1_waitForVBlank1
Adding NOP phi() at start of main::initNES1_@6
Adding NOP phi() at start of main::initNES1_waitForVBlank2
Adding NOP phi() at start of main::@18
Adding NOP phi() at start of main::@20
Adding NOP phi() at start of main::@21
Adding NOP phi() at start of main::@22
Adding NOP phi() at start of main::@23
Adding NOP phi() at start of ppuDataFill::@3
Adding NOP phi() at start of ppuDataFill::@2
CALL GRAPH
Calls in [__start] to main:4 
Calls in [main] to ppuDataTransfer:40 ppuDataFill:42 ppuDataFill:44 ppuDataTransfer:46 rand:115 rand:123 

Created 18 initial phi equivalence classes
Coalesced [66] main::active_balls#22 = main::active_balls#1
Coalesced [74] main::timer_2#20 = main::timer_2#1
Coalesced [75] main::active_balls#20 = main::active_balls#8
Coalesced [76] main::timer#20 = main::timer#15
Coalesced [108] main::i#16 = main::i#4
Coalesced [109] main::sprite_idx#9 = main::sprite_idx#2
Coalesced (already) [110] main::active_balls#21 = main::active_balls#2
Not coalescing [111] main::timer#21 = main::timer#1
Coalesced (already) [112] main::active_balls#23 = main::active_balls#2
Coalesced (already) [113] main::timer#22 = main::timer#3
Coalesced [114] rand_state#54 = rand_state#17
Coalesced [122] rand_state#55 = rand_state#11
Coalesced [130] main::i#15 = main::i#2
Coalesced (already) [131] rand_state#56 = rand_state#11
Coalesced [132] main::initNES1_i#3 = main::initNES1_i#1
Coalesced [146] ppuDataTransfer::i#6 = ppuDataTransfer::i#1
Coalesced [147] ppuDataTransfer::cpuSrc#7 = ppuDataTransfer::cpuSrc#1
Coalesced [160] ppuDataFill::i#6 = ppuDataFill::i#1
Coalesced down to 16 phi equivalence classes
Culled Empty Block label __start::@2
Culled Empty Block label main::initNES1_@6
Culled Empty Block label main::@23
Culled Empty Block label main::@29
Culled Empty Block label main::@27
Culled Empty Block label ppuDataFill::@3
Culled Empty Block label ppuDataFill::@2
Renumbering block ppuDataFill::@4 to ppuDataFill::@2
Renumbering block main::@6 to main::@5
Renumbering block main::@7 to main::@6
Renumbering block main::@8 to main::@7
Renumbering block main::@9 to main::@8
Renumbering block main::@10 to main::@9
Renumbering block main::@11 to main::@10
Renumbering block main::@12 to main::@11
Renumbering block main::@13 to main::@12
Renumbering block main::@14 to main::@13
Renumbering block main::@15 to main::@14
Renumbering block main::@16 to main::@15
Renumbering block main::@17 to main::@16
Renumbering block main::@18 to main::@17
Renumbering block main::@19 to main::@18
Renumbering block main::@20 to main::@19
Renumbering block main::@21 to main::@20
Renumbering block main::@22 to main::@21
Renumbering block main::@24 to main::@22
Renumbering block main::@25 to main::@23
Renumbering block main::@26 to main::@24
Renumbering block main::@28 to main::@25
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main
Adding NOP phi() at start of main::initNES1_waitForVBlank1
Adding NOP phi() at start of main::initNES1_waitForVBlank2
Adding NOP phi() at start of main::@17
Adding NOP phi() at start of main::@19
Adding NOP phi() at start of main::@20
Adding NOP phi() at start of main::@21
Adding NOP phi() at start of main::@2

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] scroll_y = 0
  [2] vblank_hit = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [3] phi()
  [4] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [5] return 
  to:@return

interrupt(HARDWARE_STACK) void vblank()
vblank: scope:[vblank]  from
  [6] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = 0
  [7] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = scroll_y
  to:vblank::ppuSpriteBufferDmaTransfer1
vblank::ppuSpriteBufferDmaTransfer1: scope:[vblank]  from vblank
  [8] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR) = 0
  [9] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA) = >SPRITE_BUFFER
  to:vblank::@1
vblank::@1: scope:[vblank]  from vblank::ppuSpriteBufferDmaTransfer1
  [10] vblank_hit = ++ vblank_hit
  to:vblank::@return
vblank::@return: scope:[vblank]  from vblank::@1
  [11] return 
  to:@return

signed word main()
main: scope:[main]  from __start::@1
  [12] phi()
  to:main::initNES1
main::initNES1: scope:[main]  from main
  asm { cld ldx#$ff txs  }
  to:main::initNES1_disableVideoOutput1
main::initNES1_disableVideoOutput1: scope:[main]  from main::initNES1
  [14] *((byte*)PPU) = 0
  [15] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = 0
  to:main::initNES1_disableAudioOutput1
main::initNES1_disableAudioOutput1: scope:[main]  from main::initNES1_disableVideoOutput1
  [16] *FR_COUNTER = $40
  [17] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) = $40
  to:main::initNES1_clearVBlankFlag1
main::initNES1_clearVBlankFlag1: scope:[main]  from main::initNES1_disableAudioOutput1
  asm { ldaPPU_PPUSTATUS  }
  to:main::initNES1_waitForVBlank1
main::initNES1_waitForVBlank1: scope:[main]  from main::initNES1_clearVBlankFlag1
  [19] phi()
  to:main::initNES1_waitForVBlank1_@1
main::initNES1_waitForVBlank1_@1: scope:[main]  from main::initNES1_waitForVBlank1 main::initNES1_waitForVBlank1_@1
  [20] main::initNES1_waitForVBlank1_$0 = *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80
  [21] if(0==main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1
  to:main::initNES1_@1
main::initNES1_@1: scope:[main]  from main::initNES1_@1 main::initNES1_waitForVBlank1_@1
  [22] main::initNES1_i#2 = phi( main::initNES1_@1/main::initNES1_i#1, main::initNES1_waitForVBlank1_@1/0 )
  [23] MEMORY[main::initNES1_i#2] = 0
  [24] (MEMORY+$100)[main::initNES1_i#2] = 0
  [25] (MEMORY+$200)[main::initNES1_i#2] = 0
  [26] (MEMORY+$300)[main::initNES1_i#2] = 0
  [27] (MEMORY+$400)[main::initNES1_i#2] = 0
  [28] (MEMORY+$500)[main::initNES1_i#2] = 0
  [29] (MEMORY+$600)[main::initNES1_i#2] = 0
  [30] (MEMORY+$700)[main::initNES1_i#2] = 0
  [31] main::initNES1_i#1 = ++ main::initNES1_i#2
  [32] if(0!=main::initNES1_i#1) goto main::initNES1_@1
  to:main::initNES1_waitForVBlank2
main::initNES1_waitForVBlank2: scope:[main]  from main::initNES1_@1
  [33] phi()
  to:main::initNES1_waitForVBlank2_@1
main::initNES1_waitForVBlank2_@1: scope:[main]  from main::initNES1_waitForVBlank2 main::initNES1_waitForVBlank2_@1
  [34] main::initNES1_waitForVBlank2_$0 = *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80
  [35] if(0==main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1
  to:main::initNES1_@7
main::initNES1_@7: scope:[main]  from main::initNES1_waitForVBlank2_@1
  asm { ldaPPU_PPUSTATUS  }
  to:main::@17
main::@17: scope:[main]  from main::initNES1_@7
  [37] phi()
  [38] call ppuDataTransfer 
  to:main::@19
main::@19: scope:[main]  from main::@17
  [39] phi()
  [40] call ppuDataFill 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [41] phi()
  [42] call ppuDataFill 
  to:main::@21
main::@21: scope:[main]  from main::@20
  [43] phi()
  [44] call ppuDataTransfer 
  to:main::enableVideoOutput1
main::enableVideoOutput1: scope:[main]  from main::@21
  [45] *((byte*)PPU) = $80
  [46] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = $1e
  to:main::@18
main::@18: scope:[main]  from main::enableVideoOutput1
  [47] *((byte*)PPU) = $88
  to:main::@1
main::@1: scope:[main]  from main::@18 main::@23
  [48] rand_state#17 = phi( main::@18/1, main::@23/rand_state#11 )
  [48] main::i#14 = phi( main::@18/0, main::@23/main::i#2 )
  [49] if(main::i#14<$32) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@14
  [50] main::timer#3 = phi( main::@1/0, main::@14/main::timer#15 )
  [50] main::active_balls#2 = phi( main::@1/0, main::@14/main::active_balls#8 )
  [50] main::timer_2#2 = phi( main::@1/0, main::@14/main::timer_2#1 )
  to:main::@4
main::@4: scope:[main]  from main::@3
  [51] main::timer_2#1 = ++ main::timer_2#2
  [52] main::h_bar#1 = sine_table[main::timer_2#1] + $60
  [53] main::$14 = main::h_bar#1 ^ $ff
  [54] scroll_y = main::$14
  [55] if(main::active_balls#2>=$32) goto main::@5
  to:main::@15
main::@15: scope:[main]  from main::@4
  [56] main::timer#1 = ++ main::timer#3
  [57] if(main::timer#3!=9) goto main::@25
  to:main::@16
main::@16: scope:[main]  from main::@15
  [58] main::active_balls#1 = ++ main::active_balls#2
  [59] main::$38 = main::active_balls#1 << 3
  [60] main::$58 = (word*)balls + main::$38
  [61] *main::$58 = 0
  [62] main::$58[2] = 0
  to:main::@5
main::@5: scope:[main]  from main::@16 main::@25 main::@4
  [63] main::timer#15 = phi( main::@25/main::timer#21, main::@16/0, main::@4/main::timer#3 )
  [63] main::active_balls#8 = phi( main::@25/main::active_balls#2, main::@16/main::active_balls#1, main::@4/main::active_balls#2 )
  to:main::@6
main::@6: scope:[main]  from main::@10 main::@5
  [64] main::sprite_idx#3 = phi( main::@10/main::sprite_idx#2, main::@5/0 )
  [64] main::i#10 = phi( main::@10/main::i#4, main::@5/0 )
  [65] if(main::i#10<main::active_balls#8) goto main::@7
  to:main::@8
main::@8: scope:[main]  from main::@6
  [66] *((byte*) 8193) = $98
  to:main::@13
main::@13: scope:[main]  from main::@13 main::@8
  [67] if(0==vblank_hit) goto main::@13
  to:main::@14
main::@14: scope:[main]  from main::@13
  [68] vblank_hit = 0
  [69] *((byte*) 8193) = $18
  to:main::@3
main::@7: scope:[main]  from main::@6
  [70] main::$44 = main::i#10 << 3
  [71] main::$63 = (word*)balls + main::$44
  [72] *main::$63 = *main::$63 + main::$63[4]
  [73] main::$63[6] = main::$63[6] + $10
  [74] main::$63[2] = main::$63[2] + main::$63[6]
  [75] main::$20 = *main::$63 >> 8
  [76] if(main::$20>=8) goto main::@9
  to:main::@11
main::@11: scope:[main]  from main::@7
  [77] main::$71 = (word*)balls + main::$44
  [78] main::$71[4] = main::$71[4] ^ $ffff
  to:main::@9
main::@9: scope:[main]  from main::@11 main::@7
  [79] main::$69 = (word*)balls + main::$44
  [80] main::$23 = main::$69[2] >> 8
  [81] main::$25 = main::$69[2] >> 8
  [82] main::$26 = main::h_bar#1 + 8
  [83] if(main::$23<main::h_bar#1) goto main::@10
  to:main::@24
main::@24: scope:[main]  from main::@9
  [84] if(main::$25>=main::$26) goto main::@10
  to:main::@12
main::@12: scope:[main]  from main::@24
  [85] main::$76 = (word*)balls + main::$44
  [86] main::$76[6] = main::$76[6] ^ $ffff
  [87] main::$30 = main::h_bar#1 - 2
  [88] main::$78 = (word)main::$30
  [89] main::$31 = main::$78 << 8
  [90] main::$76[2] = main::$31
  to:main::@10
main::@10: scope:[main]  from main::@12 main::@24 main::@9
  [91] main::$73 = (word*)balls + main::$44
  [92] main::$32 = main::$73[2] >> 8
  [93] main::$48 = main::sprite_idx#3 << 2
  [94] ((byte*)SPRITE_BUFFER)[main::$48] = (byte)main::$32
  [95] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_TILE)[main::$48] = $a
  [96] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES)[main::$48] = 3
  [97] main::$33 = *main::$73 >> 8
  [98] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X)[main::$48] = (byte)main::$33
  [99] main::sprite_idx#2 = ++ main::sprite_idx#3
  [100] main::i#4 = ++ main::i#10
  to:main::@6
main::@25: scope:[main]  from main::@15
  [101] main::timer#21 = main::timer#1
  to:main::@5
main::@2: scope:[main]  from main::@1
  [102] phi()
  [103] call rand 
  [104] rand::return#2 = rand::return#0
  to:main::@22
main::@22: scope:[main]  from main::@2
  [105] main::$9 = rand::return#2
  [106] main::$10 = main::$9 & $3ff
  [107] main::$36 = main::i#14 << 3
  [108] main::$55 = (word*)balls + main::$36
  [109] main::$55[4] = main::$10
  [110] call rand 
  [111] rand::return#3 = rand::return#0
  to:main::@23
main::@23: scope:[main]  from main::@22
  [112] main::$11 = rand::return#3
  [113] main::$12 = main::$11 & $ff
  [114] main::$56 = (word*)balls + main::$36
  [115] main::$56[6] = main::$12
  [116] main::i#2 = ++ main::i#14
  to:main::@1

void ppuDataTransfer(nomodify void* ppuDataTransfer::ppuData , nomodify void* ppuDataTransfer::cpuData , word ppuDataTransfer::size)
ppuDataTransfer: scope:[ppuDataTransfer]  from main::@17 main::@21
  [117] ppuDataTransfer::cpuData#2 = phi( main::@17/(void*)palette, main::@21/(void*)h_bar_tilemap )
  [117] ppuDataTransfer::ppuDataPrepare1_ppuData#0 = phi( main::@17/(void*)PPU_PALETTE, main::@21/(void*) 8256 )
  to:ppuDataTransfer::ppuDataPrepare1
ppuDataTransfer::ppuDataPrepare1: scope:[ppuDataTransfer]  from ppuDataTransfer
  [118] ppuDataTransfer::ppuDataPrepare1_$0 = > ppuDataTransfer::ppuDataPrepare1_ppuData#0
  [119] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataTransfer::ppuDataPrepare1_$0
  [120] ppuDataTransfer::ppuDataPrepare1_$1 = < ppuDataTransfer::ppuDataPrepare1_ppuData#0
  [121] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataTransfer::ppuDataPrepare1_$1
  to:ppuDataTransfer::@3
ppuDataTransfer::@3: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPrepare1
  [122] ppuDataTransfer::cpuSrc#6 = (byte*)ppuDataTransfer::cpuData#2
  to:ppuDataTransfer::@1
ppuDataTransfer::@1: scope:[ppuDataTransfer]  from ppuDataTransfer::@3 ppuDataTransfer::@4
  [123] ppuDataTransfer::cpuSrc#2 = phi( ppuDataTransfer::@3/ppuDataTransfer::cpuSrc#6, ppuDataTransfer::@4/ppuDataTransfer::cpuSrc#1 )
  [123] ppuDataTransfer::i#2 = phi( ppuDataTransfer::@3/0, ppuDataTransfer::@4/ppuDataTransfer::i#1 )
  [124] if(ppuDataTransfer::i#2<$20*SIZEOF_BYTE) goto ppuDataTransfer::@2
  to:ppuDataTransfer::@return
ppuDataTransfer::@return: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  [125] return 
  to:@return
ppuDataTransfer::@2: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  [126] ppuDataTransfer::ppuDataPut1_val#0 = *ppuDataTransfer::cpuSrc#2
  to:ppuDataTransfer::ppuDataPut1
ppuDataTransfer::ppuDataPut1: scope:[ppuDataTransfer]  from ppuDataTransfer::@2
  [127] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataTransfer::ppuDataPut1_val#0
  to:ppuDataTransfer::@4
ppuDataTransfer::@4: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPut1
  [128] ppuDataTransfer::cpuSrc#1 = ++ ppuDataTransfer::cpuSrc#2
  [129] ppuDataTransfer::i#1 = ++ ppuDataTransfer::i#2
  to:ppuDataTransfer::@1

void ppuDataFill(nomodify void* ppuDataFill::ppuData , byte ppuDataFill::val , word ppuDataFill::size)
ppuDataFill: scope:[ppuDataFill]  from main::@19 main::@20
  [130] ppuDataFill::size#3 = phi( main::@19/(word)$20*$1e, main::@20/$40 )
  [130] ppuDataFill::ppuDataPrepare1_ppuData#0 = phi( main::@19/(void*)PPU_NAME_TABLE_0, main::@20/(void*)PPU_ATTRIBUTE_TABLE_0 )
  to:ppuDataFill::ppuDataPrepare1
ppuDataFill::ppuDataPrepare1: scope:[ppuDataFill]  from ppuDataFill
  [131] ppuDataFill::ppuDataPrepare1_$0 = > ppuDataFill::ppuDataPrepare1_ppuData#0
  [132] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataFill::ppuDataPrepare1_$0
  [133] ppuDataFill::ppuDataPrepare1_$1 = < ppuDataFill::ppuDataPrepare1_ppuData#0
  [134] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataFill::ppuDataPrepare1_$1
  to:ppuDataFill::@1
ppuDataFill::@1: scope:[ppuDataFill]  from ppuDataFill::@2 ppuDataFill::ppuDataPrepare1
  [135] ppuDataFill::i#2 = phi( ppuDataFill::ppuDataPrepare1/0, ppuDataFill::@2/ppuDataFill::i#1 )
  [136] if(ppuDataFill::i#2<ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1
  to:ppuDataFill::@return
ppuDataFill::@return: scope:[ppuDataFill]  from ppuDataFill::@1
  [137] return 
  to:@return
ppuDataFill::ppuDataPut1: scope:[ppuDataFill]  from ppuDataFill::@1
  [138] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = 0
  to:ppuDataFill::@2
ppuDataFill::@2: scope:[ppuDataFill]  from ppuDataFill::ppuDataPut1
  [139] ppuDataFill::i#1 = ++ ppuDataFill::i#2
  to:ppuDataFill::@1

word rand()
rand: scope:[rand]  from main::@2 main::@22
  [140] rand_state#10 = phi( main::@2/rand_state#17, main::@22/rand_state#11 )
  [141] rand::$0 = rand_state#10 << 7
  [142] rand_state#0 = rand_state#10 ^ rand::$0
  [143] rand::$1 = rand_state#0 >> 9
  [144] rand_state#1 = rand_state#0 ^ rand::$1
  [145] rand::$2 = rand_state#1 << 8
  [146] rand_state#11 = rand_state#1 ^ rand::$2
  [147] rand::return#0 = rand_state#11
  to:rand::@return
rand::@return: scope:[rand]  from rand
  [148] return 
  to:@return


VARIABLE REGISTER WEIGHTS
word $0::x_position
word $0::x_velocity
word $0::y_position
word $0::y_velocity
byte RICOH_2A03::DMC_FREQ
byte RICOH_2A03::DMC_LEN
byte RICOH_2A03::DMC_RAW
byte RICOH_2A03::DMC_START
byte RICOH_2A03::JOY1
byte RICOH_2A03::JOY2
byte RICOH_2A03::NOISE_HI
byte RICOH_2A03::NOISE_LO
byte RICOH_2A03::NOISE_VOL
byte RICOH_2A03::OAMDMA
byte RICOH_2A03::SND_CHN
byte RICOH_2A03::SQ1_HI
byte RICOH_2A03::SQ1_LO
byte RICOH_2A03::SQ1_SWEEP
byte RICOH_2A03::SQ1_VOL
byte RICOH_2A03::SQ2_HI
byte RICOH_2A03::SQ2_LO
byte RICOH_2A03::SQ2_SWEEP
byte RICOH_2A03::SQ2_VOL
byte RICOH_2A03::TRI_HI
byte RICOH_2A03::TRI_LINEAR
byte RICOH_2A03::TRI_LO
byte RICOH_2A03::UNUSED1
byte RICOH_2A03::UNUSED2
byte RICOH_2C02::OAMADDR
byte RICOH_2C02::OAMDATA
byte RICOH_2C02::PPUADDR
byte RICOH_2C02::PPUCTRL
byte RICOH_2C02::PPUDATA
byte RICOH_2C02::PPUMASK
byte RICOH_2C02::PPUSCROLL
volatile byte RICOH_2C02::PPUSTATUS loadstore
byte SpriteData::attributes
byte SpriteData::tile
byte SpriteData::x
byte SpriteData::y
void __start()
signed word main()
word~ main::$10 67.33333333333333
word~ main::$11 202.0
byte~ main::$12 101.0
byte~ main::$14 202.0
word~ main::$20 2002.0
word~ main::$23 667.3333333333334
word~ main::$25 667.3333333333334
byte~ main::$26 1001.0
byte~ main::$30 1001.0
word~ main::$31 2002.0
word~ main::$32 500.5
word~ main::$33 1001.0
word~ main::$36 43.285714285714285
word~ main::$38 202.0
word~ main::$44 286.0
byte~ main::$48 1001.0
word*~ main::$55 202.0
word*~ main::$56 202.0
word*~ main::$58 151.5
word*~ main::$63 2502.5
word*~ main::$69 1501.5
word*~ main::$71 3003.0
word*~ main::$73 500.5
word*~ main::$76 800.8
word~ main::$78 2002.0
word~ main::$9 202.0
word main::active_balls
word main::active_balls#1 60.599999999999994
word main::active_balls#2 56.11111111111111
word main::active_balls#8 36.973684210526315
byte main::h_bar
byte main::h_bar#1 69.67391304347825
word main::i
word main::i#10 125.125
word main::i#14 25.25
word main::i#2 202.0
word main::i#4 2002.0
byte main::initNES1_i
byte main::initNES1_i#1 151.5
byte main::initNES1_i#2 112.22222222222223
byte~ main::initNES1_waitForVBlank1_$0 202.0
byte~ main::initNES1_waitForVBlank2_$0 202.0
signed word main::return
byte main::sprite_idx
byte main::sprite_idx#2 1001.0
byte main::sprite_idx#3 96.87096774193549
byte main::timer
byte main::timer#1 101.0
byte main::timer#15 7.973684210526316
byte main::timer#21 202.0
byte main::timer#3 57.714285714285715
byte main::timer_2
byte main::timer_2#1 5.9411764705882355
byte main::timer_2#2 202.0
void ppuDataFill(nomodify void* ppuDataFill::ppuData , byte ppuDataFill::val , word ppuDataFill::size)
word ppuDataFill::i
word ppuDataFill::i#1 2002.0
word ppuDataFill::i#2 1001.0
nomodify void* ppuDataFill::ppuData
byte~ ppuDataFill::ppuDataPrepare1_$0 202.0
byte~ ppuDataFill::ppuDataPrepare1_$1 202.0
nomodify void* ppuDataFill::ppuDataPrepare1_ppuData
nomodify void* ppuDataFill::ppuDataPrepare1_ppuData#0 67.33333333333333
byte ppuDataFill::ppuDataPut1_val
word ppuDataFill::size
word ppuDataFill::size#3 111.22222222222223
byte ppuDataFill::val
void ppuDataTransfer(nomodify void* ppuDataTransfer::ppuData , nomodify void* ppuDataTransfer::cpuData , word ppuDataTransfer::size)
nomodify void* ppuDataTransfer::cpuData
nomodify void* ppuDataTransfer::cpuData#2
byte* ppuDataTransfer::cpuSrc
byte* ppuDataTransfer::cpuSrc#1 1001.0
byte* ppuDataTransfer::cpuSrc#2 776.0
byte* ppuDataTransfer::cpuSrc#6 202.0
word ppuDataTransfer::i
word ppuDataTransfer::i#1 2002.0
word ppuDataTransfer::i#2 600.5999999999999
nomodify void* ppuDataTransfer::ppuData
byte~ ppuDataTransfer::ppuDataPrepare1_$0 202.0
byte~ ppuDataTransfer::ppuDataPrepare1_$1 202.0
nomodify void* ppuDataTransfer::ppuDataPrepare1_ppuData
nomodify void* ppuDataTransfer::ppuDataPrepare1_ppuData#0 67.33333333333333
byte ppuDataTransfer::ppuDataPut1_val
byte ppuDataTransfer::ppuDataPut1_val#0 2002.0
word ppuDataTransfer::size
byte printf_buffer_number::sign
byte printf_format_number::justify_left
byte printf_format_number::min_length
byte printf_format_number::radix
byte printf_format_number::sign_always
byte printf_format_number::upper_case
byte printf_format_number::zero_padding
byte printf_format_string::justify_left
byte printf_format_string::min_length
word rand()
word~ rand::$0 2002.0
word~ rand::$1 2002.0
word~ rand::$2 2002.0
word rand::return
word rand::return#0 300.75
word rand::return#2 202.0
word rand::return#3 202.0
word rand_state
word rand_state#0 1501.5
word rand_state#1 1501.5
word rand_state#10 1102.0
word rand_state#11 129.64705882352942
word rand_state#17 67.33333333333333
volatile byte scroll_y loadstore 105.0
interrupt(HARDWARE_STACK) void vblank()
struct SpriteData* vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer
volatile byte vblank_hit loadstore 9.981981981981983

Initial phi equivalence classes
[ main::initNES1_i#2 main::initNES1_i#1 ]
[ main::i#14 main::i#2 ]
[ main::timer_2#2 main::timer_2#1 ]
[ main::active_balls#2 main::active_balls#8 main::active_balls#1 ]
[ main::timer#3 main::timer#15 main::timer#21 ]
[ main::i#10 main::i#4 ]
[ main::sprite_idx#3 main::sprite_idx#2 ]
[ ppuDataTransfer::ppuDataPrepare1_ppuData#0 ]
[ ppuDataTransfer::cpuData#2 ]
[ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
[ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#6 ppuDataTransfer::cpuSrc#1 ]
[ ppuDataFill::ppuDataPrepare1_ppuData#0 ]
[ ppuDataFill::size#3 ]
[ ppuDataFill::i#2 ppuDataFill::i#1 ]
[ rand_state#10 rand_state#17 rand_state#11 ]
Added variable scroll_y to live range equivalence class [ scroll_y ]
Added variable vblank_hit to live range equivalence class [ vblank_hit ]
Added variable main::initNES1_waitForVBlank1_$0 to live range equivalence class [ main::initNES1_waitForVBlank1_$0 ]
Added variable main::initNES1_waitForVBlank2_$0 to live range equivalence class [ main::initNES1_waitForVBlank2_$0 ]
Added variable main::h_bar#1 to live range equivalence class [ main::h_bar#1 ]
Added variable main::$14 to live range equivalence class [ main::$14 ]
Added variable main::timer#1 to live range equivalence class [ main::timer#1 ]
Added variable main::$38 to live range equivalence class [ main::$38 ]
Added variable main::$58 to live range equivalence class [ main::$58 ]
Added variable main::$44 to live range equivalence class [ main::$44 ]
Added variable main::$63 to live range equivalence class [ main::$63 ]
Added variable main::$20 to live range equivalence class [ main::$20 ]
Added variable main::$71 to live range equivalence class [ main::$71 ]
Added variable main::$69 to live range equivalence class [ main::$69 ]
Added variable main::$23 to live range equivalence class [ main::$23 ]
Added variable main::$25 to live range equivalence class [ main::$25 ]
Added variable main::$26 to live range equivalence class [ main::$26 ]
Added variable main::$76 to live range equivalence class [ main::$76 ]
Added variable main::$30 to live range equivalence class [ main::$30 ]
Added variable main::$78 to live range equivalence class [ main::$78 ]
Added variable main::$31 to live range equivalence class [ main::$31 ]
Added variable main::$73 to live range equivalence class [ main::$73 ]
Added variable main::$32 to live range equivalence class [ main::$32 ]
Added variable main::$48 to live range equivalence class [ main::$48 ]
Added variable main::$33 to live range equivalence class [ main::$33 ]
Added variable rand::return#2 to live range equivalence class [ rand::return#2 ]
Added variable main::$9 to live range equivalence class [ main::$9 ]
Added variable main::$10 to live range equivalence class [ main::$10 ]
Added variable main::$36 to live range equivalence class [ main::$36 ]
Added variable main::$55 to live range equivalence class [ main::$55 ]
Added variable rand::return#3 to live range equivalence class [ rand::return#3 ]
Added variable main::$11 to live range equivalence class [ main::$11 ]
Added variable main::$12 to live range equivalence class [ main::$12 ]
Added variable main::$56 to live range equivalence class [ main::$56 ]
Added variable ppuDataTransfer::ppuDataPrepare1_$0 to live range equivalence class [ ppuDataTransfer::ppuDataPrepare1_$0 ]
Added variable ppuDataTransfer::ppuDataPrepare1_$1 to live range equivalence class [ ppuDataTransfer::ppuDataPrepare1_$1 ]
Added variable ppuDataTransfer::ppuDataPut1_val#0 to live range equivalence class [ ppuDataTransfer::ppuDataPut1_val#0 ]
Added variable ppuDataFill::ppuDataPrepare1_$0 to live range equivalence class [ ppuDataFill::ppuDataPrepare1_$0 ]
Added variable ppuDataFill::ppuDataPrepare1_$1 to live range equivalence class [ ppuDataFill::ppuDataPrepare1_$1 ]
Added variable rand::$0 to live range equivalence class [ rand::$0 ]
Added variable rand_state#0 to live range equivalence class [ rand_state#0 ]
Added variable rand::$1 to live range equivalence class [ rand::$1 ]
Added variable rand_state#1 to live range equivalence class [ rand_state#1 ]
Added variable rand::$2 to live range equivalence class [ rand::$2 ]
Added variable rand::return#0 to live range equivalence class [ rand::return#0 ]
Complete equivalence classes
[ main::initNES1_i#2 main::initNES1_i#1 ]
[ main::i#14 main::i#2 ]
[ main::timer_2#2 main::timer_2#1 ]
[ main::active_balls#2 main::active_balls#8 main::active_balls#1 ]
[ main::timer#3 main::timer#15 main::timer#21 ]
[ main::i#10 main::i#4 ]
[ main::sprite_idx#3 main::sprite_idx#2 ]
[ ppuDataTransfer::ppuDataPrepare1_ppuData#0 ]
[ ppuDataTransfer::cpuData#2 ]
[ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
[ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#6 ppuDataTransfer::cpuSrc#1 ]
[ ppuDataFill::ppuDataPrepare1_ppuData#0 ]
[ ppuDataFill::size#3 ]
[ ppuDataFill::i#2 ppuDataFill::i#1 ]
[ rand_state#10 rand_state#17 rand_state#11 ]
[ scroll_y ]
[ vblank_hit ]
[ main::initNES1_waitForVBlank1_$0 ]
[ main::initNES1_waitForVBlank2_$0 ]
[ main::h_bar#1 ]
[ main::$14 ]
[ main::timer#1 ]
[ main::$38 ]
[ main::$58 ]
[ main::$44 ]
[ main::$63 ]
[ main::$20 ]
[ main::$71 ]
[ main::$69 ]
[ main::$23 ]
[ main::$25 ]
[ main::$26 ]
[ main::$76 ]
[ main::$30 ]
[ main::$78 ]
[ main::$31 ]
[ main::$73 ]
[ main::$32 ]
[ main::$48 ]
[ main::$33 ]
[ rand::return#2 ]
[ main::$9 ]
[ main::$10 ]
[ main::$36 ]
[ main::$55 ]
[ rand::return#3 ]
[ main::$11 ]
[ main::$12 ]
[ main::$56 ]
[ ppuDataTransfer::ppuDataPrepare1_$0 ]
[ ppuDataTransfer::ppuDataPrepare1_$1 ]
[ ppuDataTransfer::ppuDataPut1_val#0 ]
[ ppuDataFill::ppuDataPrepare1_$0 ]
[ ppuDataFill::ppuDataPrepare1_$1 ]
[ rand::$0 ]
[ rand_state#0 ]
[ rand::$1 ]
[ rand_state#1 ]
[ rand::$2 ]
[ rand::return#0 ]
Allocated zp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ]
Allocated zp[2]:3 [ main::i#14 main::i#2 ]
Allocated zp[1]:5 [ main::timer_2#2 main::timer_2#1 ]
Allocated zp[2]:6 [ main::active_balls#2 main::active_balls#8 main::active_balls#1 ]
Allocated zp[1]:8 [ main::timer#3 main::timer#15 main::timer#21 ]
Allocated zp[2]:9 [ main::i#10 main::i#4 ]
Allocated zp[1]:11 [ main::sprite_idx#3 main::sprite_idx#2 ]
Allocated zp[2]:12 [ ppuDataTransfer::ppuDataPrepare1_ppuData#0 ]
Allocated zp[2]:14 [ ppuDataTransfer::cpuData#2 ]
Allocated zp[2]:16 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
Allocated zp[2]:18 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#6 ppuDataTransfer::cpuSrc#1 ]
Allocated zp[2]:20 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ]
Allocated zp[2]:22 [ ppuDataFill::size#3 ]
Allocated zp[2]:24 [ ppuDataFill::i#2 ppuDataFill::i#1 ]
Allocated zp[2]:26 [ rand_state#10 rand_state#17 rand_state#11 ]
Allocated zp[1]:28 [ scroll_y ]
Allocated zp[1]:29 [ vblank_hit ]
Allocated zp[1]:30 [ main::initNES1_waitForVBlank1_$0 ]
Allocated zp[1]:31 [ main::initNES1_waitForVBlank2_$0 ]
Allocated zp[1]:32 [ main::h_bar#1 ]
Allocated zp[1]:33 [ main::$14 ]
Allocated zp[1]:34 [ main::timer#1 ]
Allocated zp[2]:35 [ main::$38 ]
Allocated zp[2]:37 [ main::$58 ]
Allocated zp[2]:39 [ main::$44 ]
Allocated zp[2]:41 [ main::$63 ]
Allocated zp[2]:43 [ main::$20 ]
Allocated zp[2]:45 [ main::$71 ]
Allocated zp[2]:47 [ main::$69 ]
Allocated zp[2]:49 [ main::$23 ]
Allocated zp[2]:51 [ main::$25 ]
Allocated zp[1]:53 [ main::$26 ]
Allocated zp[2]:54 [ main::$76 ]
Allocated zp[1]:56 [ main::$30 ]
Allocated zp[2]:57 [ main::$78 ]
Allocated zp[2]:59 [ main::$31 ]
Allocated zp[2]:61 [ main::$73 ]
Allocated zp[2]:63 [ main::$32 ]
Allocated zp[1]:65 [ main::$48 ]
Allocated zp[2]:66 [ main::$33 ]
Allocated zp[2]:68 [ rand::return#2 ]
Allocated zp[2]:70 [ main::$9 ]
Allocated zp[2]:72 [ main::$10 ]
Allocated zp[2]:74 [ main::$36 ]
Allocated zp[2]:76 [ main::$55 ]
Allocated zp[2]:78 [ rand::return#3 ]
Allocated zp[2]:80 [ main::$11 ]
Allocated zp[1]:82 [ main::$12 ]
Allocated zp[2]:83 [ main::$56 ]
Allocated zp[1]:85 [ ppuDataTransfer::ppuDataPrepare1_$0 ]
Allocated zp[1]:86 [ ppuDataTransfer::ppuDataPrepare1_$1 ]
Allocated zp[1]:87 [ ppuDataTransfer::ppuDataPut1_val#0 ]
Allocated zp[1]:88 [ ppuDataFill::ppuDataPrepare1_$0 ]
Allocated zp[1]:89 [ ppuDataFill::ppuDataPrepare1_$1 ]
Allocated zp[2]:90 [ rand::$0 ]
Allocated zp[2]:92 [ rand_state#0 ]
Allocated zp[2]:94 [ rand::$1 ]
Allocated zp[2]:96 [ rand_state#1 ]
Allocated zp[2]:98 [ rand::$2 ]
Allocated zp[2]:100 [ rand::return#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] scroll_y = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] vblank_hit = 0 [ vblank_hit ] (  [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [6] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = 0 [ scroll_y vblank_hit ] (  [ scroll_y vblank_hit ] { }  ) always clobbers reg byte a 
Statement [7] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = scroll_y [ vblank_hit ] (  [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR) = 0 [ vblank_hit ] (  [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [9] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA) = >SPRITE_BUFFER [ vblank_hit ] (  [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [11] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement asm { cld ldx#$ff txs  } always clobbers reg byte x 
Statement [14] *((byte*)PPU) = 0 [ vblank_hit ] (  [ vblank_hit ] { }  main:4 [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [15] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = 0 [ vblank_hit ] (  [ vblank_hit ] { }  main:4 [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [16] *FR_COUNTER = $40 [ vblank_hit ] (  [ vblank_hit ] { }  main:4 [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [17] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) = $40 [ vblank_hit ] (  [ vblank_hit ] { }  main:4 [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [20] main::initNES1_waitForVBlank1_$0 = *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80 [ vblank_hit main::initNES1_waitForVBlank1_$0 ] (  [ vblank_hit main::initNES1_waitForVBlank1_$0 ] { }  main:4 [ vblank_hit main::initNES1_waitForVBlank1_$0 ] { }  ) always clobbers reg byte a 
Statement [23] MEMORY[main::initNES1_i#2] = 0 [ vblank_hit main::initNES1_i#2 ] (  [ vblank_hit main::initNES1_i#2 ] { }  main:4 [ vblank_hit main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ]
Statement [24] (MEMORY+$100)[main::initNES1_i#2] = 0 [ vblank_hit main::initNES1_i#2 ] (  [ vblank_hit main::initNES1_i#2 ] { }  main:4 [ vblank_hit main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [25] (MEMORY+$200)[main::initNES1_i#2] = 0 [ vblank_hit main::initNES1_i#2 ] (  [ vblank_hit main::initNES1_i#2 ] { }  main:4 [ vblank_hit main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [26] (MEMORY+$300)[main::initNES1_i#2] = 0 [ vblank_hit main::initNES1_i#2 ] (  [ vblank_hit main::initNES1_i#2 ] { }  main:4 [ vblank_hit main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [27] (MEMORY+$400)[main::initNES1_i#2] = 0 [ vblank_hit main::initNES1_i#2 ] (  [ vblank_hit main::initNES1_i#2 ] { }  main:4 [ vblank_hit main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [28] (MEMORY+$500)[main::initNES1_i#2] = 0 [ vblank_hit main::initNES1_i#2 ] (  [ vblank_hit main::initNES1_i#2 ] { }  main:4 [ vblank_hit main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [29] (MEMORY+$600)[main::initNES1_i#2] = 0 [ vblank_hit main::initNES1_i#2 ] (  [ vblank_hit main::initNES1_i#2 ] { }  main:4 [ vblank_hit main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [30] (MEMORY+$700)[main::initNES1_i#2] = 0 [ vblank_hit main::initNES1_i#2 ] (  [ vblank_hit main::initNES1_i#2 ] { }  main:4 [ vblank_hit main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [34] main::initNES1_waitForVBlank2_$0 = *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80 [ vblank_hit main::initNES1_waitForVBlank2_$0 ] (  [ vblank_hit main::initNES1_waitForVBlank2_$0 ] { }  main:4 [ vblank_hit main::initNES1_waitForVBlank2_$0 ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [45] *((byte*)PPU) = $80 [ vblank_hit ] (  [ vblank_hit ] { }  main:4 [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [46] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = $1e [ vblank_hit ] (  [ vblank_hit ] { }  main:4 [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [47] *((byte*)PPU) = $88 [ vblank_hit ] (  [ vblank_hit ] { }  main:4 [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [49] if(main::i#14<$32) goto main::@2 [ vblank_hit main::i#14 rand_state#17 ] (  [ vblank_hit main::i#14 rand_state#17 ] { }  main:4 [ vblank_hit main::i#14 rand_state#17 ] { }  ) always clobbers reg byte a 
Statement [52] main::h_bar#1 = sine_table[main::timer_2#1] + $60 [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 ] (  [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 ] { }  main:4 [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ main::timer#3 main::timer#15 main::timer#21 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ main::timer_2#2 main::timer_2#1 ]
Statement [53] main::$14 = main::h_bar#1 ^ $ff [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 main::$14 ] (  [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 main::$14 ] { }  main:4 [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 main::$14 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:32 [ main::h_bar#1 ]
Statement [55] if(main::active_balls#2>=$32) goto main::@5 [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 ] (  [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 ] { }  main:4 [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 ] { }  ) always clobbers reg byte a 
Statement [59] main::$38 = main::active_balls#1 << 3 [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$38 ] (  [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$38 ] { }  main:4 [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$38 ] { }  ) always clobbers reg byte a 
Statement [60] main::$58 = (word*)balls + main::$38 [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$58 ] (  [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$58 ] { }  main:4 [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$58 ] { }  ) always clobbers reg byte a 
Statement [61] *main::$58 = 0 [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$58 ] (  [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$58 ] { }  main:4 [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$58 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:5 [ main::timer_2#2 main::timer_2#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:32 [ main::h_bar#1 ]
Statement [62] main::$58[2] = 0 [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 ] (  [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 ] { }  main:4 [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [65] if(main::i#10<main::active_balls#8) goto main::@7 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:11 [ main::sprite_idx#3 main::sprite_idx#2 ]
Statement [66] *((byte*) 8193) = $98 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] { }  ) always clobbers reg byte a 
Statement [67] if(0==vblank_hit) goto main::@13 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] { }  ) always clobbers reg byte a 
Statement [68] vblank_hit = 0 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] { }  ) always clobbers reg byte a 
Statement [69] *((byte*) 8193) = $18 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] { }  ) always clobbers reg byte a 
Statement [70] main::$44 = main::i#10 << 3 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  ) always clobbers reg byte a 
Statement [71] main::$63 = (word*)balls + main::$44 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] { }  ) always clobbers reg byte a 
Statement [72] *main::$63 = *main::$63 + main::$63[4] [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:8 [ main::timer#3 main::timer#15 main::timer#21 ]
Removing always clobbered register reg byte y as potential for zp[1]:11 [ main::sprite_idx#3 main::sprite_idx#2 ]
Statement [73] main::$63[6] = main::$63[6] + $10 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] { }  ) always clobbers reg byte a reg byte y 
Statement [74] main::$63[2] = main::$63[2] + main::$63[6] [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] { }  ) always clobbers reg byte a reg byte y 
Statement [75] main::$20 = *main::$63 >> 8 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$20 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$20 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$20 ] { }  ) always clobbers reg byte a reg byte y 
Statement [76] if(main::$20>=8) goto main::@9 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  ) always clobbers reg byte a 
Statement [77] main::$71 = (word*)balls + main::$44 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$71 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$71 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$71 ] { }  ) always clobbers reg byte a 
Statement [78] main::$71[4] = main::$71[4] ^ $ffff [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  ) always clobbers reg byte a reg byte y 
Statement [79] main::$69 = (word*)balls + main::$44 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$69 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$69 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$69 ] { }  ) always clobbers reg byte a 
Statement [80] main::$23 = main::$69[2] >> 8 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$69 main::$23 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$69 main::$23 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$69 main::$23 ] { }  ) always clobbers reg byte a reg byte y 
Statement [81] main::$25 = main::$69[2] >> 8 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$23 main::$25 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$23 main::$25 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$23 main::$25 ] { }  ) always clobbers reg byte a reg byte y 
Statement [82] main::$26 = main::h_bar#1 + 8 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$23 main::$25 main::$26 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$23 main::$25 main::$26 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$23 main::$25 main::$26 ] { }  ) always clobbers reg byte a 
Statement [83] if(main::$23<main::h_bar#1) goto main::@10 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$25 main::$26 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$25 main::$26 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$25 main::$26 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:53 [ main::$26 ]
Statement [84] if(main::$25>=main::$26) goto main::@10 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  ) always clobbers reg byte a 
Statement [85] main::$76 = (word*)balls + main::$44 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 ] { }  ) always clobbers reg byte a 
Statement [86] main::$76[6] = main::$76[6] ^ $ffff [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 ] { }  ) always clobbers reg byte a reg byte y 
Statement [88] main::$78 = (word)main::$30 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 main::$78 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 main::$78 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 main::$78 ] { }  ) always clobbers reg byte a 
Statement [89] main::$31 = main::$78 << 8 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 main::$31 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 main::$31 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 main::$31 ] { }  ) always clobbers reg byte a 
Statement [90] main::$76[2] = main::$31 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  ) always clobbers reg byte a reg byte y 
Statement [91] main::$73 = (word*)balls + main::$44 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 ] { }  ) always clobbers reg byte a 
Statement [92] main::$32 = main::$73[2] >> 8 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$32 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$32 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$32 ] { }  ) always clobbers reg byte a reg byte y 
Statement [93] main::$48 = main::sprite_idx#3 << 2 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$32 main::$48 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$32 main::$48 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$32 main::$48 ] { }  ) always clobbers reg byte a 
Statement [94] ((byte*)SPRITE_BUFFER)[main::$48] = (byte)main::$32 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:65 [ main::$48 ]
Statement [95] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_TILE)[main::$48] = $a [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] { }  ) always clobbers reg byte a 
Statement [96] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES)[main::$48] = 3 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] { }  ) always clobbers reg byte a 
Statement [97] main::$33 = *main::$73 >> 8 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$48 main::$33 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$48 main::$33 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$48 main::$33 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:65 [ main::$48 ]
Statement [98] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X)[main::$48] = (byte)main::$33 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 ] { }  ) always clobbers reg byte a 
Statement [104] rand::return#2 = rand::return#0 [ vblank_hit main::i#14 rand_state#11 rand::return#2 ] (  [ vblank_hit main::i#14 rand_state#11 rand::return#2 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  main:4 [ vblank_hit main::i#14 rand_state#11 rand::return#2 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Statement [105] main::$9 = rand::return#2 [ vblank_hit main::i#14 rand_state#11 main::$9 ] (  [ vblank_hit main::i#14 rand_state#11 main::$9 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$9 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [106] main::$10 = main::$9 & $3ff [ vblank_hit main::i#14 rand_state#11 main::$10 ] (  [ vblank_hit main::i#14 rand_state#11 main::$10 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$10 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [107] main::$36 = main::i#14 << 3 [ vblank_hit main::i#14 rand_state#11 main::$10 main::$36 ] (  [ vblank_hit main::i#14 rand_state#11 main::$10 main::$36 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$10 main::$36 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [108] main::$55 = (word*)balls + main::$36 [ vblank_hit main::i#14 rand_state#11 main::$10 main::$36 main::$55 ] (  [ vblank_hit main::i#14 rand_state#11 main::$10 main::$36 main::$55 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$10 main::$36 main::$55 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [109] main::$55[4] = main::$10 [ vblank_hit main::i#14 rand_state#11 main::$36 ] (  [ vblank_hit main::i#14 rand_state#11 main::$36 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$36 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [111] rand::return#3 = rand::return#0 [ vblank_hit main::i#14 rand_state#11 main::$36 rand::return#3 ] (  [ vblank_hit main::i#14 rand_state#11 main::$36 rand::return#3 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$36 rand::return#3 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [112] main::$11 = rand::return#3 [ vblank_hit main::i#14 rand_state#11 main::$36 main::$11 ] (  [ vblank_hit main::i#14 rand_state#11 main::$36 main::$11 ] { }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$36 main::$11 ] { }  ) always clobbers reg byte a 
Statement [113] main::$12 = main::$11 & $ff [ vblank_hit main::i#14 rand_state#11 main::$36 main::$12 ] (  [ vblank_hit main::i#14 rand_state#11 main::$36 main::$12 ] { }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$36 main::$12 ] { }  ) always clobbers reg byte a 
Statement [114] main::$56 = (word*)balls + main::$36 [ vblank_hit main::i#14 rand_state#11 main::$12 main::$56 ] (  [ vblank_hit main::i#14 rand_state#11 main::$12 main::$56 ] { }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$12 main::$56 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:82 [ main::$12 ]
Statement [115] main::$56[6] = main::$12 [ vblank_hit main::i#14 rand_state#11 ] (  [ vblank_hit main::i#14 rand_state#11 ] { }  main:4 [ vblank_hit main::i#14 rand_state#11 ] { }  ) always clobbers reg byte a reg byte y 
Statement [122] ppuDataTransfer::cpuSrc#6 = (byte*)ppuDataTransfer::cpuData#2 [ ppuDataTransfer::cpuSrc#6 ] ( ppuDataTransfer:38 [ vblank_hit ppuDataTransfer::cpuSrc#6 ] { }  main:4::ppuDataTransfer:38 [ vblank_hit ppuDataTransfer::cpuSrc#6 ] { }  ppuDataTransfer:44 [ vblank_hit ppuDataTransfer::cpuSrc#6 ] { }  main:4::ppuDataTransfer:44 [ vblank_hit ppuDataTransfer::cpuSrc#6 ] { }  ) always clobbers reg byte a 
Statement [124] if(ppuDataTransfer::i#2<$20*SIZEOF_BYTE) goto ppuDataTransfer::@2 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] ( ppuDataTransfer:38 [ vblank_hit ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  main:4::ppuDataTransfer:38 [ vblank_hit ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  ppuDataTransfer:44 [ vblank_hit ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  main:4::ppuDataTransfer:44 [ vblank_hit ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  ) always clobbers reg byte a 
Statement [126] ppuDataTransfer::ppuDataPut1_val#0 = *ppuDataTransfer::cpuSrc#2 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] ( ppuDataTransfer:38 [ vblank_hit ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  main:4::ppuDataTransfer:38 [ vblank_hit ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  ppuDataTransfer:44 [ vblank_hit ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  main:4::ppuDataTransfer:44 [ vblank_hit ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [136] if(ppuDataFill::i#2<ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 [ ppuDataFill::size#3 ppuDataFill::i#2 ] ( ppuDataFill:40 [ vblank_hit ppuDataFill::size#3 ppuDataFill::i#2 ] { }  main:4::ppuDataFill:40 [ vblank_hit ppuDataFill::size#3 ppuDataFill::i#2 ] { }  ppuDataFill:42 [ vblank_hit ppuDataFill::size#3 ppuDataFill::i#2 ] { }  main:4::ppuDataFill:42 [ vblank_hit ppuDataFill::size#3 ppuDataFill::i#2 ] { }  ) always clobbers reg byte a 
Statement [138] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = 0 [ ppuDataFill::size#3 ppuDataFill::i#2 ] ( ppuDataFill:40 [ vblank_hit ppuDataFill::size#3 ppuDataFill::i#2 ] { }  main:4::ppuDataFill:40 [ vblank_hit ppuDataFill::size#3 ppuDataFill::i#2 ] { }  ppuDataFill:42 [ vblank_hit ppuDataFill::size#3 ppuDataFill::i#2 ] { }  main:4::ppuDataFill:42 [ vblank_hit ppuDataFill::size#3 ppuDataFill::i#2 ] { }  ) always clobbers reg byte a 
Statement [141] rand::$0 = rand_state#10 << 7 [ rand_state#10 rand::$0 ] ( rand:103 [ vblank_hit main::i#14 rand_state#10 rand::$0 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  main:4::rand:103 [ vblank_hit main::i#14 rand_state#10 rand::$0 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  rand:110 [ vblank_hit main::i#14 main::$36 rand_state#10 rand::$0 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4::rand:110 [ vblank_hit main::i#14 main::$36 rand_state#10 rand::$0 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [142] rand_state#0 = rand_state#10 ^ rand::$0 [ rand_state#0 ] ( rand:103 [ vblank_hit main::i#14 rand_state#0 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  main:4::rand:103 [ vblank_hit main::i#14 rand_state#0 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  rand:110 [ vblank_hit main::i#14 main::$36 rand_state#0 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4::rand:110 [ vblank_hit main::i#14 main::$36 rand_state#0 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [143] rand::$1 = rand_state#0 >> 9 [ rand_state#0 rand::$1 ] ( rand:103 [ vblank_hit main::i#14 rand_state#0 rand::$1 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  main:4::rand:103 [ vblank_hit main::i#14 rand_state#0 rand::$1 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  rand:110 [ vblank_hit main::i#14 main::$36 rand_state#0 rand::$1 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4::rand:110 [ vblank_hit main::i#14 main::$36 rand_state#0 rand::$1 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [144] rand_state#1 = rand_state#0 ^ rand::$1 [ rand_state#1 ] ( rand:103 [ vblank_hit main::i#14 rand_state#1 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  main:4::rand:103 [ vblank_hit main::i#14 rand_state#1 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  rand:110 [ vblank_hit main::i#14 main::$36 rand_state#1 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4::rand:110 [ vblank_hit main::i#14 main::$36 rand_state#1 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [145] rand::$2 = rand_state#1 << 8 [ rand_state#1 rand::$2 ] ( rand:103 [ vblank_hit main::i#14 rand_state#1 rand::$2 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  main:4::rand:103 [ vblank_hit main::i#14 rand_state#1 rand::$2 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  rand:110 [ vblank_hit main::i#14 main::$36 rand_state#1 rand::$2 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4::rand:110 [ vblank_hit main::i#14 main::$36 rand_state#1 rand::$2 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [146] rand_state#11 = rand_state#1 ^ rand::$2 [ rand_state#11 ] ( rand:103 [ vblank_hit main::i#14 rand_state#11 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  main:4::rand:103 [ vblank_hit main::i#14 rand_state#11 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  rand:110 [ vblank_hit main::i#14 main::$36 rand_state#11 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4::rand:110 [ vblank_hit main::i#14 main::$36 rand_state#11 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [147] rand::return#0 = rand_state#11 [ rand_state#11 rand::return#0 ] ( rand:103 [ vblank_hit main::i#14 rand_state#11 rand::return#0 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  main:4::rand:103 [ vblank_hit main::i#14 rand_state#11 rand::return#0 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  rand:110 [ vblank_hit main::i#14 main::$36 rand_state#11 rand::return#0 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4::rand:110 [ vblank_hit main::i#14 main::$36 rand_state#11 rand::return#0 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [1] scroll_y = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] vblank_hit = 0 [ vblank_hit ] (  [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [6] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = 0 [ scroll_y vblank_hit ] (  [ scroll_y vblank_hit ] { }  ) always clobbers reg byte a 
Statement [7] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = scroll_y [ vblank_hit ] (  [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR) = 0 [ vblank_hit ] (  [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [9] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA) = >SPRITE_BUFFER [ vblank_hit ] (  [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [11] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement asm { cld ldx#$ff txs  } always clobbers reg byte x 
Statement [14] *((byte*)PPU) = 0 [ vblank_hit ] (  [ vblank_hit ] { }  main:4 [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [15] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = 0 [ vblank_hit ] (  [ vblank_hit ] { }  main:4 [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [16] *FR_COUNTER = $40 [ vblank_hit ] (  [ vblank_hit ] { }  main:4 [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [17] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) = $40 [ vblank_hit ] (  [ vblank_hit ] { }  main:4 [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [20] main::initNES1_waitForVBlank1_$0 = *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80 [ vblank_hit main::initNES1_waitForVBlank1_$0 ] (  [ vblank_hit main::initNES1_waitForVBlank1_$0 ] { }  main:4 [ vblank_hit main::initNES1_waitForVBlank1_$0 ] { }  ) always clobbers reg byte a 
Statement [23] MEMORY[main::initNES1_i#2] = 0 [ vblank_hit main::initNES1_i#2 ] (  [ vblank_hit main::initNES1_i#2 ] { }  main:4 [ vblank_hit main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [24] (MEMORY+$100)[main::initNES1_i#2] = 0 [ vblank_hit main::initNES1_i#2 ] (  [ vblank_hit main::initNES1_i#2 ] { }  main:4 [ vblank_hit main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [25] (MEMORY+$200)[main::initNES1_i#2] = 0 [ vblank_hit main::initNES1_i#2 ] (  [ vblank_hit main::initNES1_i#2 ] { }  main:4 [ vblank_hit main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [26] (MEMORY+$300)[main::initNES1_i#2] = 0 [ vblank_hit main::initNES1_i#2 ] (  [ vblank_hit main::initNES1_i#2 ] { }  main:4 [ vblank_hit main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [27] (MEMORY+$400)[main::initNES1_i#2] = 0 [ vblank_hit main::initNES1_i#2 ] (  [ vblank_hit main::initNES1_i#2 ] { }  main:4 [ vblank_hit main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [28] (MEMORY+$500)[main::initNES1_i#2] = 0 [ vblank_hit main::initNES1_i#2 ] (  [ vblank_hit main::initNES1_i#2 ] { }  main:4 [ vblank_hit main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [29] (MEMORY+$600)[main::initNES1_i#2] = 0 [ vblank_hit main::initNES1_i#2 ] (  [ vblank_hit main::initNES1_i#2 ] { }  main:4 [ vblank_hit main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [30] (MEMORY+$700)[main::initNES1_i#2] = 0 [ vblank_hit main::initNES1_i#2 ] (  [ vblank_hit main::initNES1_i#2 ] { }  main:4 [ vblank_hit main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [34] main::initNES1_waitForVBlank2_$0 = *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80 [ vblank_hit main::initNES1_waitForVBlank2_$0 ] (  [ vblank_hit main::initNES1_waitForVBlank2_$0 ] { }  main:4 [ vblank_hit main::initNES1_waitForVBlank2_$0 ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [45] *((byte*)PPU) = $80 [ vblank_hit ] (  [ vblank_hit ] { }  main:4 [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [46] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = $1e [ vblank_hit ] (  [ vblank_hit ] { }  main:4 [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [47] *((byte*)PPU) = $88 [ vblank_hit ] (  [ vblank_hit ] { }  main:4 [ vblank_hit ] { }  ) always clobbers reg byte a 
Statement [49] if(main::i#14<$32) goto main::@2 [ vblank_hit main::i#14 rand_state#17 ] (  [ vblank_hit main::i#14 rand_state#17 ] { }  main:4 [ vblank_hit main::i#14 rand_state#17 ] { }  ) always clobbers reg byte a 
Statement [52] main::h_bar#1 = sine_table[main::timer_2#1] + $60 [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 ] (  [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 ] { }  main:4 [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 ] { }  ) always clobbers reg byte a 
Statement [53] main::$14 = main::h_bar#1 ^ $ff [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 main::$14 ] (  [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 main::$14 ] { }  main:4 [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 main::$14 ] { }  ) always clobbers reg byte a 
Statement [55] if(main::active_balls#2>=$32) goto main::@5 [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 ] (  [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 ] { }  main:4 [ vblank_hit main::active_balls#2 main::timer#3 main::timer_2#1 main::h_bar#1 ] { }  ) always clobbers reg byte a 
Statement [59] main::$38 = main::active_balls#1 << 3 [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$38 ] (  [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$38 ] { }  main:4 [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$38 ] { }  ) always clobbers reg byte a 
Statement [60] main::$58 = (word*)balls + main::$38 [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$58 ] (  [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$58 ] { }  main:4 [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$58 ] { }  ) always clobbers reg byte a 
Statement [61] *main::$58 = 0 [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$58 ] (  [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$58 ] { }  main:4 [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 main::$58 ] { }  ) always clobbers reg byte a reg byte y 
Statement [62] main::$58[2] = 0 [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 ] (  [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 ] { }  main:4 [ vblank_hit main::timer_2#1 main::h_bar#1 main::active_balls#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [65] if(main::i#10<main::active_balls#8) goto main::@7 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 ] { }  ) always clobbers reg byte a 
Statement [66] *((byte*) 8193) = $98 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] { }  ) always clobbers reg byte a 
Statement [67] if(0==vblank_hit) goto main::@13 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] { }  ) always clobbers reg byte a 
Statement [68] vblank_hit = 0 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] { }  ) always clobbers reg byte a 
Statement [69] *((byte*) 8193) = $18 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 ] { }  ) always clobbers reg byte a 
Statement [70] main::$44 = main::i#10 << 3 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  ) always clobbers reg byte a 
Statement [71] main::$63 = (word*)balls + main::$44 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] { }  ) always clobbers reg byte a 
Statement [72] *main::$63 = *main::$63 + main::$63[4] [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] { }  ) always clobbers reg byte a reg byte y 
Statement [73] main::$63[6] = main::$63[6] + $10 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] { }  ) always clobbers reg byte a reg byte y 
Statement [74] main::$63[2] = main::$63[2] + main::$63[6] [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$63 ] { }  ) always clobbers reg byte a reg byte y 
Statement [75] main::$20 = *main::$63 >> 8 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$20 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$20 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$20 ] { }  ) always clobbers reg byte a reg byte y 
Statement [76] if(main::$20>=8) goto main::@9 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  ) always clobbers reg byte a 
Statement [77] main::$71 = (word*)balls + main::$44 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$71 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$71 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$71 ] { }  ) always clobbers reg byte a 
Statement [78] main::$71[4] = main::$71[4] ^ $ffff [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  ) always clobbers reg byte a reg byte y 
Statement [79] main::$69 = (word*)balls + main::$44 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$69 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$69 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$69 ] { }  ) always clobbers reg byte a 
Statement [80] main::$23 = main::$69[2] >> 8 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$69 main::$23 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$69 main::$23 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$69 main::$23 ] { }  ) always clobbers reg byte a reg byte y 
Statement [81] main::$25 = main::$69[2] >> 8 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$23 main::$25 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$23 main::$25 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$23 main::$25 ] { }  ) always clobbers reg byte a reg byte y 
Statement [82] main::$26 = main::h_bar#1 + 8 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$23 main::$25 main::$26 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$23 main::$25 main::$26 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$23 main::$25 main::$26 ] { }  ) always clobbers reg byte a 
Statement [83] if(main::$23<main::h_bar#1) goto main::@10 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$25 main::$26 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$25 main::$26 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$25 main::$26 ] { }  ) always clobbers reg byte a 
Statement [84] if(main::$25>=main::$26) goto main::@10 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  ) always clobbers reg byte a 
Statement [85] main::$76 = (word*)balls + main::$44 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 ] { }  ) always clobbers reg byte a 
Statement [86] main::$76[6] = main::$76[6] ^ $ffff [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 ] { }  ) always clobbers reg byte a reg byte y 
Statement [88] main::$78 = (word)main::$30 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 main::$78 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 main::$78 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 main::$78 ] { }  ) always clobbers reg byte a 
Statement [89] main::$31 = main::$78 << 8 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 main::$31 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 main::$31 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 main::$76 main::$31 ] { }  ) always clobbers reg byte a 
Statement [90] main::$76[2] = main::$31 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$44 ] { }  ) always clobbers reg byte a reg byte y 
Statement [91] main::$73 = (word*)balls + main::$44 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 ] { }  ) always clobbers reg byte a 
Statement [92] main::$32 = main::$73[2] >> 8 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$32 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$32 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$32 ] { }  ) always clobbers reg byte a reg byte y 
Statement [93] main::$48 = main::sprite_idx#3 << 2 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$32 main::$48 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$32 main::$48 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$32 main::$48 ] { }  ) always clobbers reg byte a 
Statement [94] ((byte*)SPRITE_BUFFER)[main::$48] = (byte)main::$32 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] { }  ) always clobbers reg byte a 
Statement [95] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_TILE)[main::$48] = $a [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] { }  ) always clobbers reg byte a 
Statement [96] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES)[main::$48] = 3 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$73 main::$48 ] { }  ) always clobbers reg byte a 
Statement [97] main::$33 = *main::$73 >> 8 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$48 main::$33 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$48 main::$33 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 main::$48 main::$33 ] { }  ) always clobbers reg byte a reg byte y 
Statement [98] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X)[main::$48] = (byte)main::$33 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 ] (  [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 ] { }  main:4 [ vblank_hit main::timer_2#1 main::active_balls#8 main::timer#15 main::h_bar#1 main::i#10 main::sprite_idx#3 ] { }  ) always clobbers reg byte a 
Statement [104] rand::return#2 = rand::return#0 [ vblank_hit main::i#14 rand_state#11 rand::return#2 ] (  [ vblank_hit main::i#14 rand_state#11 rand::return#2 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  main:4 [ vblank_hit main::i#14 rand_state#11 rand::return#2 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  ) always clobbers reg byte a 
Statement [105] main::$9 = rand::return#2 [ vblank_hit main::i#14 rand_state#11 main::$9 ] (  [ vblank_hit main::i#14 rand_state#11 main::$9 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$9 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [106] main::$10 = main::$9 & $3ff [ vblank_hit main::i#14 rand_state#11 main::$10 ] (  [ vblank_hit main::i#14 rand_state#11 main::$10 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$10 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [107] main::$36 = main::i#14 << 3 [ vblank_hit main::i#14 rand_state#11 main::$10 main::$36 ] (  [ vblank_hit main::i#14 rand_state#11 main::$10 main::$36 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$10 main::$36 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [108] main::$55 = (word*)balls + main::$36 [ vblank_hit main::i#14 rand_state#11 main::$10 main::$36 main::$55 ] (  [ vblank_hit main::i#14 rand_state#11 main::$10 main::$36 main::$55 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$10 main::$36 main::$55 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [109] main::$55[4] = main::$10 [ vblank_hit main::i#14 rand_state#11 main::$36 ] (  [ vblank_hit main::i#14 rand_state#11 main::$36 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$36 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [111] rand::return#3 = rand::return#0 [ vblank_hit main::i#14 rand_state#11 main::$36 rand::return#3 ] (  [ vblank_hit main::i#14 rand_state#11 main::$36 rand::return#3 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$36 rand::return#3 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [112] main::$11 = rand::return#3 [ vblank_hit main::i#14 rand_state#11 main::$36 main::$11 ] (  [ vblank_hit main::i#14 rand_state#11 main::$36 main::$11 ] { }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$36 main::$11 ] { }  ) always clobbers reg byte a 
Statement [113] main::$12 = main::$11 & $ff [ vblank_hit main::i#14 rand_state#11 main::$36 main::$12 ] (  [ vblank_hit main::i#14 rand_state#11 main::$36 main::$12 ] { }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$36 main::$12 ] { }  ) always clobbers reg byte a 
Statement [114] main::$56 = (word*)balls + main::$36 [ vblank_hit main::i#14 rand_state#11 main::$12 main::$56 ] (  [ vblank_hit main::i#14 rand_state#11 main::$12 main::$56 ] { }  main:4 [ vblank_hit main::i#14 rand_state#11 main::$12 main::$56 ] { }  ) always clobbers reg byte a 
Statement [115] main::$56[6] = main::$12 [ vblank_hit main::i#14 rand_state#11 ] (  [ vblank_hit main::i#14 rand_state#11 ] { }  main:4 [ vblank_hit main::i#14 rand_state#11 ] { }  ) always clobbers reg byte a reg byte y 
Statement [122] ppuDataTransfer::cpuSrc#6 = (byte*)ppuDataTransfer::cpuData#2 [ ppuDataTransfer::cpuSrc#6 ] ( ppuDataTransfer:38 [ vblank_hit ppuDataTransfer::cpuSrc#6 ] { }  main:4::ppuDataTransfer:38 [ vblank_hit ppuDataTransfer::cpuSrc#6 ] { }  ppuDataTransfer:44 [ vblank_hit ppuDataTransfer::cpuSrc#6 ] { }  main:4::ppuDataTransfer:44 [ vblank_hit ppuDataTransfer::cpuSrc#6 ] { }  ) always clobbers reg byte a 
Statement [124] if(ppuDataTransfer::i#2<$20*SIZEOF_BYTE) goto ppuDataTransfer::@2 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] ( ppuDataTransfer:38 [ vblank_hit ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  main:4::ppuDataTransfer:38 [ vblank_hit ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  ppuDataTransfer:44 [ vblank_hit ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  main:4::ppuDataTransfer:44 [ vblank_hit ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  ) always clobbers reg byte a 
Statement [126] ppuDataTransfer::ppuDataPut1_val#0 = *ppuDataTransfer::cpuSrc#2 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] ( ppuDataTransfer:38 [ vblank_hit ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  main:4::ppuDataTransfer:38 [ vblank_hit ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  ppuDataTransfer:44 [ vblank_hit ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  main:4::ppuDataTransfer:44 [ vblank_hit ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [136] if(ppuDataFill::i#2<ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 [ ppuDataFill::size#3 ppuDataFill::i#2 ] ( ppuDataFill:40 [ vblank_hit ppuDataFill::size#3 ppuDataFill::i#2 ] { }  main:4::ppuDataFill:40 [ vblank_hit ppuDataFill::size#3 ppuDataFill::i#2 ] { }  ppuDataFill:42 [ vblank_hit ppuDataFill::size#3 ppuDataFill::i#2 ] { }  main:4::ppuDataFill:42 [ vblank_hit ppuDataFill::size#3 ppuDataFill::i#2 ] { }  ) always clobbers reg byte a 
Statement [138] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = 0 [ ppuDataFill::size#3 ppuDataFill::i#2 ] ( ppuDataFill:40 [ vblank_hit ppuDataFill::size#3 ppuDataFill::i#2 ] { }  main:4::ppuDataFill:40 [ vblank_hit ppuDataFill::size#3 ppuDataFill::i#2 ] { }  ppuDataFill:42 [ vblank_hit ppuDataFill::size#3 ppuDataFill::i#2 ] { }  main:4::ppuDataFill:42 [ vblank_hit ppuDataFill::size#3 ppuDataFill::i#2 ] { }  ) always clobbers reg byte a 
Statement [141] rand::$0 = rand_state#10 << 7 [ rand_state#10 rand::$0 ] ( rand:103 [ vblank_hit main::i#14 rand_state#10 rand::$0 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  main:4::rand:103 [ vblank_hit main::i#14 rand_state#10 rand::$0 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  rand:110 [ vblank_hit main::i#14 main::$36 rand_state#10 rand::$0 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4::rand:110 [ vblank_hit main::i#14 main::$36 rand_state#10 rand::$0 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [142] rand_state#0 = rand_state#10 ^ rand::$0 [ rand_state#0 ] ( rand:103 [ vblank_hit main::i#14 rand_state#0 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  main:4::rand:103 [ vblank_hit main::i#14 rand_state#0 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  rand:110 [ vblank_hit main::i#14 main::$36 rand_state#0 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4::rand:110 [ vblank_hit main::i#14 main::$36 rand_state#0 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [143] rand::$1 = rand_state#0 >> 9 [ rand_state#0 rand::$1 ] ( rand:103 [ vblank_hit main::i#14 rand_state#0 rand::$1 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  main:4::rand:103 [ vblank_hit main::i#14 rand_state#0 rand::$1 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  rand:110 [ vblank_hit main::i#14 main::$36 rand_state#0 rand::$1 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4::rand:110 [ vblank_hit main::i#14 main::$36 rand_state#0 rand::$1 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [144] rand_state#1 = rand_state#0 ^ rand::$1 [ rand_state#1 ] ( rand:103 [ vblank_hit main::i#14 rand_state#1 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  main:4::rand:103 [ vblank_hit main::i#14 rand_state#1 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  rand:110 [ vblank_hit main::i#14 main::$36 rand_state#1 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4::rand:110 [ vblank_hit main::i#14 main::$36 rand_state#1 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [145] rand::$2 = rand_state#1 << 8 [ rand_state#1 rand::$2 ] ( rand:103 [ vblank_hit main::i#14 rand_state#1 rand::$2 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  main:4::rand:103 [ vblank_hit main::i#14 rand_state#1 rand::$2 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  rand:110 [ vblank_hit main::i#14 main::$36 rand_state#1 rand::$2 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4::rand:110 [ vblank_hit main::i#14 main::$36 rand_state#1 rand::$2 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [146] rand_state#11 = rand_state#1 ^ rand::$2 [ rand_state#11 ] ( rand:103 [ vblank_hit main::i#14 rand_state#11 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  main:4::rand:103 [ vblank_hit main::i#14 rand_state#11 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  rand:110 [ vblank_hit main::i#14 main::$36 rand_state#11 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4::rand:110 [ vblank_hit main::i#14 main::$36 rand_state#11 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Statement [147] rand::return#0 = rand_state#11 [ rand_state#11 rand::return#0 ] ( rand:103 [ vblank_hit main::i#14 rand_state#11 rand::return#0 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  main:4::rand:103 [ vblank_hit main::i#14 rand_state#11 rand::return#0 ] { { rand_state#10 = rand_state#17 } { rand::return#0 = rand::return#2 } }  rand:110 [ vblank_hit main::i#14 main::$36 rand_state#11 rand::return#0 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  main:4::rand:110 [ vblank_hit main::i#14 main::$36 rand_state#11 rand::return#0 ] { { rand_state#10 = rand_state#11 } { rand::return#0 = rand::return#3 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ main::i#14 main::i#2 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ main::timer_2#2 main::timer_2#1 ] : zp[1]:5 , reg byte x , 
Potential registers zp[2]:6 [ main::active_balls#2 main::active_balls#8 main::active_balls#1 ] : zp[2]:6 , 
Potential registers zp[1]:8 [ main::timer#3 main::timer#15 main::timer#21 ] : zp[1]:8 , reg byte x , 
Potential registers zp[2]:9 [ main::i#10 main::i#4 ] : zp[2]:9 , 
Potential registers zp[1]:11 [ main::sprite_idx#3 main::sprite_idx#2 ] : zp[1]:11 , reg byte x , 
Potential registers zp[2]:12 [ ppuDataTransfer::ppuDataPrepare1_ppuData#0 ] : zp[2]:12 , 
Potential registers zp[2]:14 [ ppuDataTransfer::cpuData#2 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] : zp[2]:16 , 
Potential registers zp[2]:18 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#6 ppuDataTransfer::cpuSrc#1 ] : zp[2]:18 , 
Potential registers zp[2]:20 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] : zp[2]:20 , 
Potential registers zp[2]:22 [ ppuDataFill::size#3 ] : zp[2]:22 , 
Potential registers zp[2]:24 [ ppuDataFill::i#2 ppuDataFill::i#1 ] : zp[2]:24 , 
Potential registers zp[2]:26 [ rand_state#10 rand_state#17 rand_state#11 ] : zp[2]:26 , 
Potential registers zp[1]:28 [ scroll_y ] : zp[1]:28 , 
Potential registers zp[1]:29 [ vblank_hit ] : zp[1]:29 , 
Potential registers zp[1]:30 [ main::initNES1_waitForVBlank1_$0 ] : zp[1]:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:31 [ main::initNES1_waitForVBlank2_$0 ] : zp[1]:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:32 [ main::h_bar#1 ] : zp[1]:32 , reg byte x , 
Potential registers zp[1]:33 [ main::$14 ] : zp[1]:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ main::timer#1 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:35 [ main::$38 ] : zp[2]:35 , 
Potential registers zp[2]:37 [ main::$58 ] : zp[2]:37 , 
Potential registers zp[2]:39 [ main::$44 ] : zp[2]:39 , 
Potential registers zp[2]:41 [ main::$63 ] : zp[2]:41 , 
Potential registers zp[2]:43 [ main::$20 ] : zp[2]:43 , 
Potential registers zp[2]:45 [ main::$71 ] : zp[2]:45 , 
Potential registers zp[2]:47 [ main::$69 ] : zp[2]:47 , 
Potential registers zp[2]:49 [ main::$23 ] : zp[2]:49 , 
Potential registers zp[2]:51 [ main::$25 ] : zp[2]:51 , 
Potential registers zp[1]:53 [ main::$26 ] : zp[1]:53 , reg byte x , reg byte y , 
Potential registers zp[2]:54 [ main::$76 ] : zp[2]:54 , 
Potential registers zp[1]:56 [ main::$30 ] : zp[1]:56 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:57 [ main::$78 ] : zp[2]:57 , 
Potential registers zp[2]:59 [ main::$31 ] : zp[2]:59 , 
Potential registers zp[2]:61 [ main::$73 ] : zp[2]:61 , 
Potential registers zp[2]:63 [ main::$32 ] : zp[2]:63 , 
Potential registers zp[1]:65 [ main::$48 ] : zp[1]:65 , reg byte x , 
Potential registers zp[2]:66 [ main::$33 ] : zp[2]:66 , 
Potential registers zp[2]:68 [ rand::return#2 ] : zp[2]:68 , 
Potential registers zp[2]:70 [ main::$9 ] : zp[2]:70 , 
Potential registers zp[2]:72 [ main::$10 ] : zp[2]:72 , 
Potential registers zp[2]:74 [ main::$36 ] : zp[2]:74 , 
Potential registers zp[2]:76 [ main::$55 ] : zp[2]:76 , 
Potential registers zp[2]:78 [ rand::return#3 ] : zp[2]:78 , 
Potential registers zp[2]:80 [ main::$11 ] : zp[2]:80 , 
Potential registers zp[1]:82 [ main::$12 ] : zp[1]:82 , reg byte x , reg byte y , 
Potential registers zp[2]:83 [ main::$56 ] : zp[2]:83 , 
Potential registers zp[1]:85 [ ppuDataTransfer::ppuDataPrepare1_$0 ] : zp[1]:85 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:86 [ ppuDataTransfer::ppuDataPrepare1_$1 ] : zp[1]:86 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:87 [ ppuDataTransfer::ppuDataPut1_val#0 ] : zp[1]:87 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:88 [ ppuDataFill::ppuDataPrepare1_$0 ] : zp[1]:88 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:89 [ ppuDataFill::ppuDataPrepare1_$1 ] : zp[1]:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:90 [ rand::$0 ] : zp[2]:90 , 
Potential registers zp[2]:92 [ rand_state#0 ] : zp[2]:92 , 
Potential registers zp[2]:94 [ rand::$1 ] : zp[2]:94 , 
Potential registers zp[2]:96 [ rand_state#1 ] : zp[2]:96 , 
Potential registers zp[2]:98 [ rand::$2 ] : zp[2]:98 , 
Potential registers zp[2]:100 [ rand::return#0 ] : zp[2]:100 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 3,003: zp[2]:45 [ main::$71 ] 2,502.5: zp[2]:41 [ main::$63 ] 2,127.12: zp[2]:9 [ main::i#10 main::i#4 ] 2,002: zp[2]:43 [ main::$20 ] 2,002: zp[2]:57 [ main::$78 ] 2,002: zp[2]:59 [ main::$31 ] 1,501.5: zp[2]:47 [ main::$69 ] 1,097.87: zp[1]:11 [ main::sprite_idx#3 main::sprite_idx#2 ] 1,001: zp[1]:53 [ main::$26 ] 1,001: zp[1]:56 [ main::$30 ] 1,001: zp[1]:65 [ main::$48 ] 1,001: zp[2]:66 [ main::$33 ] 800.8: zp[2]:54 [ main::$76 ] 667.33: zp[2]:49 [ main::$23 ] 667.33: zp[2]:51 [ main::$25 ] 500.5: zp[2]:61 [ main::$73 ] 500.5: zp[2]:63 [ main::$32 ] 286: zp[2]:39 [ main::$44 ] 267.69: zp[1]:8 [ main::timer#3 main::timer#15 main::timer#21 ] 263.72: zp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ] 227.25: zp[2]:3 [ main::i#14 main::i#2 ] 207.94: zp[1]:5 [ main::timer_2#2 main::timer_2#1 ] 202: zp[1]:30 [ main::initNES1_waitForVBlank1_$0 ] 202: zp[1]:31 [ main::initNES1_waitForVBlank2_$0 ] 202: zp[1]:33 [ main::$14 ] 202: zp[2]:35 [ main::$38 ] 202: zp[2]:70 [ main::$9 ] 202: zp[2]:76 [ main::$55 ] 202: zp[2]:80 [ main::$11 ] 202: zp[2]:83 [ main::$56 ] 153.68: zp[2]:6 [ main::active_balls#2 main::active_balls#8 main::active_balls#1 ] 151.5: zp[2]:37 [ main::$58 ] 101: zp[1]:34 [ main::timer#1 ] 101: zp[1]:82 [ main::$12 ] 69.67: zp[1]:32 [ main::h_bar#1 ] 67.33: zp[2]:72 [ main::$10 ] 43.29: zp[2]:74 [ main::$36 ] 
Uplift Scope [ppuDataTransfer] 2,602.6: zp[2]:16 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] 2,002: zp[1]:87 [ ppuDataTransfer::ppuDataPut1_val#0 ] 1,979: zp[2]:18 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#6 ppuDataTransfer::cpuSrc#1 ] 202: zp[1]:85 [ ppuDataTransfer::ppuDataPrepare1_$0 ] 202: zp[1]:86 [ ppuDataTransfer::ppuDataPrepare1_$1 ] 67.33: zp[2]:12 [ ppuDataTransfer::ppuDataPrepare1_ppuData#0 ] 0: zp[2]:14 [ ppuDataTransfer::cpuData#2 ] 
Uplift Scope [rand] 2,002: zp[2]:90 [ rand::$0 ] 2,002: zp[2]:94 [ rand::$1 ] 2,002: zp[2]:98 [ rand::$2 ] 300.75: zp[2]:100 [ rand::return#0 ] 202: zp[2]:68 [ rand::return#2 ] 202: zp[2]:78 [ rand::return#3 ] 
Uplift Scope [] 1,501.5: zp[2]:92 [ rand_state#0 ] 1,501.5: zp[2]:96 [ rand_state#1 ] 1,298.98: zp[2]:26 [ rand_state#10 rand_state#17 rand_state#11 ] 105: zp[1]:28 [ scroll_y ] 9.98: zp[1]:29 [ vblank_hit ] 
Uplift Scope [ppuDataFill] 3,003: zp[2]:24 [ ppuDataFill::i#2 ppuDataFill::i#1 ] 202: zp[1]:88 [ ppuDataFill::ppuDataPrepare1_$0 ] 202: zp[1]:89 [ ppuDataFill::ppuDataPrepare1_$1 ] 111.22: zp[2]:22 [ ppuDataFill::size#3 ] 67.33: zp[2]:20 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] 
Uplift Scope [RICOH_2C02] 
Uplift Scope [RICOH_2A03] 
Uplift Scope [SpriteData] 
Uplift Scope [RADIX] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_buffer_number] 
Uplift Scope [printf_format_string] 
Uplift Scope [$0] 
Uplift Scope [vblank] 
Uplift Scope [__start] 

Uplifting [main] best 70612 combination zp[2]:45 [ main::$71 ] zp[2]:41 [ main::$63 ] zp[2]:9 [ main::i#10 main::i#4 ] zp[2]:43 [ main::$20 ] zp[2]:57 [ main::$78 ] zp[2]:59 [ main::$31 ] zp[2]:47 [ main::$69 ] zp[1]:11 [ main::sprite_idx#3 main::sprite_idx#2 ] zp[1]:53 [ main::$26 ] reg byte a [ main::$30 ] reg byte x [ main::$48 ] zp[2]:66 [ main::$33 ] zp[2]:54 [ main::$76 ] zp[2]:49 [ main::$23 ] zp[2]:51 [ main::$25 ] zp[2]:61 [ main::$73 ] zp[2]:63 [ main::$32 ] zp[2]:39 [ main::$44 ] zp[1]:8 [ main::timer#3 main::timer#15 main::timer#21 ] zp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ] zp[2]:3 [ main::i#14 main::i#2 ] zp[1]:5 [ main::timer_2#2 main::timer_2#1 ] zp[1]:30 [ main::initNES1_waitForVBlank1_$0 ] zp[1]:31 [ main::initNES1_waitForVBlank2_$0 ] zp[1]:33 [ main::$14 ] zp[2]:35 [ main::$38 ] zp[2]:70 [ main::$9 ] zp[2]:76 [ main::$55 ] zp[2]:80 [ main::$11 ] zp[2]:83 [ main::$56 ] zp[2]:6 [ main::active_balls#2 main::active_balls#8 main::active_balls#1 ] zp[2]:37 [ main::$58 ] zp[1]:34 [ main::timer#1 ] zp[1]:82 [ main::$12 ] zp[1]:32 [ main::h_bar#1 ] zp[2]:72 [ main::$10 ] zp[2]:74 [ main::$36 ] 
Limited combination testing to 100 combinations of 884736 possible.
Uplifting [ppuDataTransfer] best 70540 combination zp[2]:16 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] reg byte a [ ppuDataTransfer::ppuDataPut1_val#0 ] zp[2]:18 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#6 ppuDataTransfer::cpuSrc#1 ] reg byte a [ ppuDataTransfer::ppuDataPrepare1_$0 ] reg byte a [ ppuDataTransfer::ppuDataPrepare1_$1 ] zp[2]:12 [ ppuDataTransfer::ppuDataPrepare1_ppuData#0 ] zp[2]:14 [ ppuDataTransfer::cpuData#2 ] 
Uplifting [rand] best 70540 combination zp[2]:90 [ rand::$0 ] zp[2]:94 [ rand::$1 ] zp[2]:98 [ rand::$2 ] zp[2]:100 [ rand::return#0 ] zp[2]:68 [ rand::return#2 ] zp[2]:78 [ rand::return#3 ] 
Uplifting [] best 70540 combination zp[2]:92 [ rand_state#0 ] zp[2]:96 [ rand_state#1 ] zp[2]:26 [ rand_state#10 rand_state#17 rand_state#11 ] zp[1]:28 [ scroll_y ] zp[1]:29 [ vblank_hit ] 
Uplifting [ppuDataFill] best 70528 combination zp[2]:24 [ ppuDataFill::i#2 ppuDataFill::i#1 ] reg byte a [ ppuDataFill::ppuDataPrepare1_$0 ] reg byte a [ ppuDataFill::ppuDataPrepare1_$1 ] zp[2]:22 [ ppuDataFill::size#3 ] zp[2]:20 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] 
Uplifting [RICOH_2C02] best 70528 combination 
Uplifting [RICOH_2A03] best 70528 combination 
Uplifting [SpriteData] best 70528 combination 
Uplifting [RADIX] best 70528 combination 
Uplifting [printf_format_number] best 70528 combination 
Uplifting [printf_buffer_number] best 70528 combination 
Uplifting [printf_format_string] best 70528 combination 
Uplifting [$0] best 70528 combination 
Uplifting [vblank] best 70528 combination 
Uplifting [__start] best 70528 combination 
Attempting to uplift remaining variables inzp[1]:11 [ main::sprite_idx#3 main::sprite_idx#2 ]
Uplifting [main] best 70528 combination zp[1]:11 [ main::sprite_idx#3 main::sprite_idx#2 ] 
Attempting to uplift remaining variables inzp[1]:53 [ main::$26 ]
Uplifting [main] best 70528 combination zp[1]:53 [ main::$26 ] 
Attempting to uplift remaining variables inzp[1]:8 [ main::timer#3 main::timer#15 main::timer#21 ]
Uplifting [main] best 70528 combination zp[1]:8 [ main::timer#3 main::timer#15 main::timer#21 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ]
Uplifting [main] best 70198 combination reg byte x [ main::initNES1_i#2 main::initNES1_i#1 ] 
Attempting to uplift remaining variables inzp[1]:5 [ main::timer_2#2 main::timer_2#1 ]
Uplifting [main] best 70198 combination zp[1]:5 [ main::timer_2#2 main::timer_2#1 ] 
Attempting to uplift remaining variables inzp[1]:30 [ main::initNES1_waitForVBlank1_$0 ]
Uplifting [main] best 70138 combination reg byte a [ main::initNES1_waitForVBlank1_$0 ] 
Attempting to uplift remaining variables inzp[1]:31 [ main::initNES1_waitForVBlank2_$0 ]
Uplifting [main] best 70078 combination reg byte a [ main::initNES1_waitForVBlank2_$0 ] 
Attempting to uplift remaining variables inzp[1]:33 [ main::$14 ]
Uplifting [main] best 70018 combination reg byte a [ main::$14 ] 
Attempting to uplift remaining variables inzp[1]:28 [ scroll_y ]
Uplifting [] best 70018 combination zp[1]:28 [ scroll_y ] 
Attempting to uplift remaining variables inzp[1]:34 [ main::timer#1 ]
Uplifting [main] best 69958 combination reg byte x [ main::timer#1 ] 
Attempting to uplift remaining variables inzp[1]:82 [ main::$12 ]
Uplifting [main] best 69938 combination reg byte x [ main::$12 ] 
Attempting to uplift remaining variables inzp[1]:32 [ main::h_bar#1 ]
Uplifting [main] best 69938 combination zp[1]:32 [ main::h_bar#1 ] 
Attempting to uplift remaining variables inzp[1]:29 [ vblank_hit ]
Uplifting [] best 69938 combination zp[1]:29 [ vblank_hit ] 
Coalescing zero page register [ zp[2]:14 [ ppuDataTransfer::cpuData#2 ] ] with [ zp[2]:18 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#6 ppuDataTransfer::cpuSrc#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ rand_state#10 rand_state#17 rand_state#11 ] ] with [ zp[2]:92 [ rand_state#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ rand_state#10 rand_state#17 rand_state#11 rand_state#0 ] ] with [ zp[2]:96 [ rand_state#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:35 [ main::$38 ] ] with [ zp[2]:37 [ main::$58 ] ] - score: 1
Coalescing zero page register [ zp[2]:39 [ main::$44 ] ] with [ zp[2]:61 [ main::$73 ] ] - score: 1
Coalescing zero page register [ zp[2]:41 [ main::$63 ] ] with [ zp[2]:43 [ main::$20 ] ] - score: 1
Coalescing zero page register [ zp[2]:47 [ main::$69 ] ] with [ zp[2]:51 [ main::$25 ] ] - score: 1
Coalescing zero page register [ zp[2]:57 [ main::$78 ] ] with [ zp[2]:59 [ main::$31 ] ] - score: 1
Coalescing zero page register [ zp[2]:68 [ rand::return#2 ] ] with [ zp[2]:70 [ main::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:68 [ rand::return#2 main::$9 ] ] with [ zp[2]:100 [ rand::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:74 [ main::$36 ] ] with [ zp[2]:83 [ main::$56 ] ] - score: 1
Coalescing zero page register [ zp[2]:78 [ rand::return#3 ] ] with [ zp[2]:80 [ main::$11 ] ] - score: 1
Coalescing zero page register [ zp[2]:39 [ main::$44 main::$73 ] ] with [ zp[2]:66 [ main::$33 ] ] - score: 1
Coalescing zero page register [ zp[2]:68 [ rand::return#2 main::$9 rand::return#0 ] ] with [ zp[2]:72 [ main::$10 ] ] - score: 1
Coalescing zero page register [ zp[2]:68 [ rand::return#2 main::$9 rand::return#0 main::$10 ] ] with [ zp[2]:78 [ rand::return#3 main::$11 ] ] - score: 1
Coalescing zero page register [ zp[2]:20 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] ] with [ zp[2]:12 [ ppuDataTransfer::ppuDataPrepare1_ppuData#0 ] ]
Coalescing zero page register [ zp[2]:22 [ ppuDataFill::size#3 ] ] with [ zp[2]:14 [ ppuDataTransfer::cpuData#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#6 ppuDataTransfer::cpuSrc#1 ] ]
Coalescing zero page register [ zp[2]:24 [ ppuDataFill::i#2 ppuDataFill::i#1 ] ] with [ zp[2]:16 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] ]
Coalescing zero page register [ zp[2]:35 [ main::$38 main::$58 ] ] with [ zp[2]:20 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataTransfer::ppuDataPrepare1_ppuData#0 ] ]
Coalescing zero page register [ zp[2]:39 [ main::$44 main::$73 main::$33 ] ] with [ zp[2]:22 [ ppuDataFill::size#3 ppuDataTransfer::cpuData#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#6 ppuDataTransfer::cpuSrc#1 ] ]
Coalescing zero page register [ zp[2]:41 [ main::$63 main::$20 ] ] with [ zp[2]:24 [ ppuDataFill::i#2 ppuDataFill::i#1 ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] ]
Allocated (was zp[2]:3) zp[2]:2 [ main::i#14 main::i#2 ]
Allocated (was zp[1]:5) zp[1]:4 [ main::timer_2#2 main::timer_2#1 ]
Allocated (was zp[2]:6) zp[2]:5 [ main::active_balls#2 main::active_balls#8 main::active_balls#1 ]
Allocated (was zp[1]:8) zp[1]:7 [ main::timer#3 main::timer#15 main::timer#21 ]
Allocated (was zp[2]:9) zp[2]:8 [ main::i#10 main::i#4 ]
Allocated (was zp[1]:11) zp[1]:10 [ main::sprite_idx#3 main::sprite_idx#2 ]
Allocated (was zp[2]:26) zp[2]:11 [ rand_state#10 rand_state#17 rand_state#11 rand_state#0 rand_state#1 ]
Allocated (was zp[1]:28) zp[1]:13 [ scroll_y ]
Allocated (was zp[1]:29) zp[1]:14 [ vblank_hit ]
Allocated (was zp[1]:32) zp[1]:15 [ main::h_bar#1 ]
Allocated (was zp[2]:35) zp[2]:16 [ main::$38 main::$58 ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataTransfer::ppuDataPrepare1_ppuData#0 ]
Allocated (was zp[2]:39) zp[2]:18 [ main::$44 main::$73 main::$33 ppuDataFill::size#3 ppuDataTransfer::cpuData#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#6 ppuDataTransfer::cpuSrc#1 ]
Allocated (was zp[2]:41) zp[2]:20 [ main::$63 main::$20 ppuDataFill::i#2 ppuDataFill::i#1 ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
Allocated (was zp[2]:45) zp[2]:22 [ main::$71 ]
Allocated (was zp[2]:47) zp[2]:24 [ main::$69 main::$25 ]
Allocated (was zp[2]:49) zp[2]:26 [ main::$23 ]
Allocated (was zp[1]:53) zp[1]:28 [ main::$26 ]
Allocated (was zp[2]:54) zp[2]:29 [ main::$76 ]
Allocated (was zp[2]:57) zp[2]:31 [ main::$78 main::$31 ]
Allocated (was zp[2]:63) zp[2]:33 [ main::$32 ]
Allocated (was zp[2]:68) zp[2]:35 [ rand::return#2 main::$9 rand::return#0 main::$10 rand::return#3 main::$11 ]
Allocated (was zp[2]:74) zp[2]:37 [ main::$36 main::$56 ]
Allocated (was zp[2]:76) zp[2]:39 [ main::$55 ]
Allocated (was zp[2]:90) zp[2]:41 [ rand::$0 ]
Allocated (was zp[2]:94) zp[2]:43 [ rand::$1 ]
Allocated (was zp[2]:98) zp[2]:45 [ rand::$2 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
  // Nintendo Entertainment System (NES) ROM (Mapper 0 NROM, Vertical Mirroring)
// https://sadistech.com/nesromtool/romdoc.html
// https://forums.nesdev.com/viewtopic.php?f=2&t=9896
// https://github.com/gregkrsak/first_nes
.file [name="kickballs-3.nes", type="bin", segments="NesRom"]
.file [name="kickballs-3.nes_hdr", type="bin", segments="Header"]
.file [name="kickballs-3.nes_prg", type="bin", segments="ProgramRom"]
.file [name="kickballs-3.nes_chr", type="bin", segments="CharacterRom"]
.segmentdef Header  [ start=$0000,       min=$0000, max=$000f, fill ]
.segmentdef Tiles   [ start=$0000,       min=$0000, max=$1fff, fill ]
.segmentdef Code    [ start=$c000,       min=$c000, max=$fff9 ]
.segmentdef Data    [ startAfter="Code", min=$c000, max=$fff9 ]
.segmentdef Vectors [ start=$fffa,       min=$fffa, max=$ffff ]
.segmentdef GameRam [start=$200,max=$7ff, virtual]
.segmentdef ProgramRom [ segments="Code, Data, Vectors" ]
.segmentdef CharacterRom [ segments="Tiles" ]
.segmentdef NesRom
.segment NesRom
.segmentout [ segments="Header" ]
.segmentout [ segments="ProgramRom" ]
.segmentout [ segments="CharacterRom" ]
.segment Header
.text   @"NES\$1a"
.byte   $01           // 1x 16KB ROM (PRG)
.byte   $01           // 1x 8KB VROM (CHR)
.byte   %00000001     // Mapper nibble 0000 == No mapping (a simple 16KB PRG + 8KB CHR game)
                      // Mirroring nibble 0001 == Vertical mirroring only
.segment Code

  // Global Constants & labels
  .const OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
  .const OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
  .const OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
  .const OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
  .const OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
  .const OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
  .const OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
  .const OFFSET_STRUCT_SPRITEDATA_TILE = 1
  .const OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES = 2
  .const OFFSET_STRUCT_SPRITEDATA_X = 3
  .const OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
  .const SIZEOF_BYTE = 1
  // $2000-$23bf	$03c0	Name table 0
  .label PPU_NAME_TABLE_0 = $2000
  // $23c0-$23ff	$0040	Attribute table 0
  .label PPU_ATTRIBUTE_TABLE_0 = $23c0
  // $3000-$3eff	$0f00	Mirrors of $2000-$2eff
  // $3f00-$3f1f	$0020	Palette RAM indexes
  .label PPU_PALETTE = $3f00
  // PPU Status Register for reading in ASM
  .label PPU_PPUSTATUS = $2002
  // APU Frame Counter
  // generates low-frequency clocks for the channels and an optional 60 Hz interrupt.
  // https://wiki.nesdev.com/w/index.php/APU_Frame_Counter
  // ------+-----+---------------------------------------------------------------
  //  $4017 |	 W  | FR_COUNTER Frame Counter	Set mode and interrupt
  //  ------+-----+---------------------------------------------------------------
  //        |   7	| Sequencer mode: 0 selects 4-step sequence, 1 selects 5-step sequence
  //        |   6	| Interrupt inhibit flag. If set, the frame interrupt flag is cleared, otherwise it is unaffected.
  //  ------+-----+---------------------------------------------------------------
  // Side effects	After 3 or 4 CPU clock cycles*, the timer is reset.
  // If the mode flag is set, then both "quarter frame" and "half frame" signals are also generated.
  .label FR_COUNTER = $4017
  // Pointer to the start of RAM memory
  .label MEMORY = 0
  // NES Picture Processing Unit (PPU)
  .label PPU = $2000
  // NES CPU and audion processing unit (APU)
  .label APU = $4000
  .label scroll_y = $d
  .label vblank_hit = $e
  // The random state variable
  .label rand_state = $b
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] scroll_y = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z scroll_y
    // [2] vblank_hit = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z vblank_hit
    // [3] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [4] call main 
    // [12] phi from __start::@1 to main [phi:__start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [5] return 
    rts
}
  // vblank
// NMI Called when the PPU refreshes the screen (also known as the V-Blank period)
vblank: {
    // entry interrupt(HARDWARE_STACK)
    pha
    txa
    pha
    tya
    pha
    // [6] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = 0 -- _deref_pbuc1=vbuc2 
    // Set scroll
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // [7] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = scroll_y -- _deref_pbuc1=vbuz1 
    lda.z scroll_y
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    jmp ppuSpriteBufferDmaTransfer1
    // vblank::ppuSpriteBufferDmaTransfer1
  ppuSpriteBufferDmaTransfer1:
    // [8] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR
    // [9] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA) = >SPRITE_BUFFER -- _deref_pbuc1=vbuc2 
    lda #>SPRITE_BUFFER
    sta APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA
    jmp __b1
    // vblank::@1
  __b1:
    // [10] vblank_hit = ++ vblank_hit -- vbuz1=_inc_vbuz1 
    inc.z vblank_hit
    jmp __breturn
    // vblank::@return
  __breturn:
    // [11] return  - exit interrupt(HARDWARE_STACK)
    pla
    tay
    pla
    tax
    pla
    rti
}
  // main
main: {
    .label __9 = $23
    .label __10 = $23
    .label __11 = $23
    .label __20 = $14
    .label __23 = $1a
    .label __25 = $18
    .label __26 = $1c
    .label __31 = $1f
    .label __32 = $21
    .label __33 = $12
    .label __36 = $25
    .label __38 = $10
    .label __44 = $12
    .label __55 = $27
    .label __56 = $25
    .label __58 = $10
    .label __63 = $14
    .label __69 = $18
    .label __71 = $16
    .label __73 = $12
    .label __76 = $1d
    .label __78 = $1f
    .label i = 2
    .label timer_2 = 4
    .label h_bar = $f
    .label active_balls = 5
    .label sprite_idx = $a
    .label i_1 = 8
    .label timer = 7
    jmp initNES1
    // main::initNES1
  initNES1:
    // asm { cld ldx#$ff txs  }
    cld
    ldx #$ff
    txs
    jmp initNES1_disableVideoOutput1
    // main::initNES1_disableVideoOutput1
  initNES1_disableVideoOutput1:
    // [14] *((byte*)PPU) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU
    // [15] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    jmp initNES1_disableAudioOutput1
    // main::initNES1_disableAudioOutput1
  initNES1_disableAudioOutput1:
    // [16] *FR_COUNTER = $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta FR_COUNTER
    // [17] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) = $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
    jmp initNES1_clearVBlankFlag1
    // main::initNES1_clearVBlankFlag1
  initNES1_clearVBlankFlag1:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [19] phi from main::initNES1_clearVBlankFlag1 to main::initNES1_waitForVBlank1 [phi:main::initNES1_clearVBlankFlag1->main::initNES1_waitForVBlank1]
  initNES1_waitForVBlank1_from_initNES1_clearVBlankFlag1:
    jmp initNES1_waitForVBlank1
    // main::initNES1_waitForVBlank1
  initNES1_waitForVBlank1:
    jmp initNES1_waitForVBlank1___b1
    // main::initNES1_waitForVBlank1_@1
  initNES1_waitForVBlank1___b1:
    // [20] main::initNES1_waitForVBlank1_$0 = *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // [21] if(0==main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank1___b1
    // [22] phi from main::initNES1_waitForVBlank1_@1 to main::initNES1_@1 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1]
  initNES1___b1_from_initNES1_waitForVBlank1___b1:
    // [22] phi main::initNES1_i#2 = 0 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp initNES1___b1
    // [22] phi from main::initNES1_@1 to main::initNES1_@1 [phi:main::initNES1_@1->main::initNES1_@1]
  initNES1___b1_from_initNES1___b1:
    // [22] phi main::initNES1_i#2 = main::initNES1_i#1 [phi:main::initNES1_@1->main::initNES1_@1#0] -- register_copy 
    jmp initNES1___b1
    // main::initNES1_@1
  initNES1___b1:
    // [23] MEMORY[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY,x
    // [24] (MEMORY+$100)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$100,x
    // [25] (MEMORY+$200)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$200,x
    // [26] (MEMORY+$300)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$300,x
    // [27] (MEMORY+$400)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$400,x
    // [28] (MEMORY+$500)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$500,x
    // [29] (MEMORY+$600)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$600,x
    // [30] (MEMORY+$700)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$700,x
    // [31] main::initNES1_i#1 = ++ main::initNES1_i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [32] if(0!=main::initNES1_i#1) goto main::initNES1_@1 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne initNES1___b1_from_initNES1___b1
    // [33] phi from main::initNES1_@1 to main::initNES1_waitForVBlank2 [phi:main::initNES1_@1->main::initNES1_waitForVBlank2]
  initNES1_waitForVBlank2_from_initNES1___b1:
    jmp initNES1_waitForVBlank2
    // main::initNES1_waitForVBlank2
  initNES1_waitForVBlank2:
    jmp initNES1_waitForVBlank2___b1
    // main::initNES1_waitForVBlank2_@1
  initNES1_waitForVBlank2___b1:
    // [34] main::initNES1_waitForVBlank2_$0 = *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // [35] if(0==main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank2___b1
    jmp initNES1___b7
    // main::initNES1_@7
  initNES1___b7:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [37] phi from main::initNES1_@7 to main::@17 [phi:main::initNES1_@7->main::@17]
  __b17_from_initNES1___b7:
    jmp __b17
    // main::@17
  __b17:
    // [38] call ppuDataTransfer 
  // Transfer the palette
    // [117] phi from main::@17 to ppuDataTransfer [phi:main::@17->ppuDataTransfer]
  ppuDataTransfer_from___b17:
    // [117] phi ppuDataTransfer::cpuData#2 = (void*)palette [phi:main::@17->ppuDataTransfer#0] -- pvoz1=pvoc1 
    lda #<palette
    sta.z ppuDataTransfer.cpuData
    lda #>palette
    sta.z ppuDataTransfer.cpuData+1
    // [117] phi ppuDataTransfer::ppuDataPrepare1_ppuData#0 = (void*)PPU_PALETTE [phi:main::@17->ppuDataTransfer#1] -- pvoz1=pvoc1 
    lda #<PPU_PALETTE
    sta.z ppuDataTransfer.ppuDataPrepare1_ppuData
    lda #>PPU_PALETTE
    sta.z ppuDataTransfer.ppuDataPrepare1_ppuData+1
    jsr ppuDataTransfer
    // [39] phi from main::@17 to main::@19 [phi:main::@17->main::@19]
  __b19_from___b17:
    jmp __b19
    // main::@19
  __b19:
    // [40] call ppuDataFill 
  // Fill the PPU attribute table
    // [130] phi from main::@19 to ppuDataFill [phi:main::@19->ppuDataFill]
  ppuDataFill_from___b19:
    // [130] phi ppuDataFill::size#3 = (word)$20*$1e [phi:main::@19->ppuDataFill#0] -- vwuz1=vwuc1 
    lda #<$20*$1e
    sta.z ppuDataFill.size
    lda #>$20*$1e
    sta.z ppuDataFill.size+1
    // [130] phi ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)PPU_NAME_TABLE_0 [phi:main::@19->ppuDataFill#1] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [41] phi from main::@19 to main::@20 [phi:main::@19->main::@20]
  __b20_from___b19:
    jmp __b20
    // main::@20
  __b20:
    // [42] call ppuDataFill 
    // [130] phi from main::@20 to ppuDataFill [phi:main::@20->ppuDataFill]
  ppuDataFill_from___b20:
    // [130] phi ppuDataFill::size#3 = $40 [phi:main::@20->ppuDataFill#0] -- vwuz1=vbuc1 
    lda #<$40
    sta.z ppuDataFill.size
    lda #>$40
    sta.z ppuDataFill.size+1
    // [130] phi ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)PPU_ATTRIBUTE_TABLE_0 [phi:main::@20->ppuDataFill#1] -- pvoz1=pvoc1 
    lda #<PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [43] phi from main::@20 to main::@21 [phi:main::@20->main::@21]
  __b21_from___b20:
    jmp __b21
    // main::@21
  __b21:
    // [44] call ppuDataTransfer 
    // [117] phi from main::@21 to ppuDataTransfer [phi:main::@21->ppuDataTransfer]
  ppuDataTransfer_from___b21:
    // [117] phi ppuDataTransfer::cpuData#2 = (void*)h_bar_tilemap [phi:main::@21->ppuDataTransfer#0] -- pvoz1=pvoc1 
    lda #<h_bar_tilemap
    sta.z ppuDataTransfer.cpuData
    lda #>h_bar_tilemap
    sta.z ppuDataTransfer.cpuData+1
    // [117] phi ppuDataTransfer::ppuDataPrepare1_ppuData#0 = (void*) 8256 [phi:main::@21->ppuDataTransfer#1] -- pvoz1=pvoc1 
    lda #<$2040
    sta.z ppuDataTransfer.ppuDataPrepare1_ppuData
    lda #>$2040
    sta.z ppuDataTransfer.ppuDataPrepare1_ppuData+1
    jsr ppuDataTransfer
    jmp enableVideoOutput1
    // main::enableVideoOutput1
  enableVideoOutput1:
    // [45] *((byte*)PPU) = $80 -- _deref_pbuc1=vbuc2 
    lda #$80
    sta PPU
    // [46] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = $1e -- _deref_pbuc1=vbuc2 
    lda #$1e
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    jmp __b18
    // main::@18
  __b18:
    // [47] *((byte*)PPU) = $88 -- _deref_pbuc1=vbuc2 
    // Enable vertical blank interrupt, select sprite pattern table 1
    lda #$88
    sta PPU
    // [48] phi from main::@18 to main::@1 [phi:main::@18->main::@1]
  __b1_from___b18:
    // [48] phi rand_state#17 = 1 [phi:main::@18->main::@1#0] -- vwuz1=vwuc1 
    lda #<1
    sta.z rand_state
    lda #>1
    sta.z rand_state+1
    // [48] phi main::i#14 = 0 [phi:main::@18->main::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
    // main::@1
  __b1:
    // [49] if(main::i#14<$32) goto main::@2 -- vwuz1_lt_vbuc1_then_la1 
    lda.z i+1
    bne !+
    lda.z i
    cmp #$32
    bcc __b2_from___b1
  !:
    // [50] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    // [50] phi main::timer#3 = 0 [phi:main::@1->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z timer
    // [50] phi main::active_balls#2 = 0 [phi:main::@1->main::@3#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z active_balls
    lda #>0
    sta.z active_balls+1
    // [50] phi main::timer_2#2 = 0 [phi:main::@1->main::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z timer_2
    jmp __b3
    // main::@3
  __b3:
    jmp __b4
    // main::@4
  __b4:
    // [51] main::timer_2#1 = ++ main::timer_2#2 -- vbuz1=_inc_vbuz1 
    inc.z timer_2
    // [52] main::h_bar#1 = sine_table[main::timer_2#1] + $60 -- vbuz1=pbuc1_derefidx_vbuz2_plus_vbuc2 
    lda #$60
    ldy.z timer_2
    clc
    adc sine_table,y
    sta.z h_bar
    // [53] main::$14 = main::h_bar#1 ^ $ff -- vbuaa=vbuz1_bxor_vbuc1 
    lda #$ff
    eor.z h_bar
    // [54] scroll_y = main::$14 -- vbuz1=vbuaa 
    sta.z scroll_y
    // [55] if(main::active_balls#2>=$32) goto main::@5 -- vwuz1_ge_vbuc1_then_la1 
    lda.z active_balls+1
    bne __b5_from___b4
    lda.z active_balls
    cmp #$32
    bcs __b5_from___b4
  !:
    jmp __b15
    // main::@15
  __b15:
    // [56] main::timer#1 = ++ main::timer#3 -- vbuxx=_inc_vbuz1 
    ldx.z timer
    inx
    // [57] if(main::timer#3!=9) goto main::@25 -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp.z timer
    bne __b25
    jmp __b16
    // main::@16
  __b16:
    // [58] main::active_balls#1 = ++ main::active_balls#2 -- vwuz1=_inc_vwuz1 
    inc.z active_balls
    bne !+
    inc.z active_balls+1
  !:
    // [59] main::$38 = main::active_balls#1 << 3 -- vwuz1=vwuz2_rol_3 
    lda.z active_balls
    asl
    sta.z __38
    lda.z active_balls+1
    rol
    sta.z __38+1
    asl.z __38
    rol.z __38+1
    asl.z __38
    rol.z __38+1
    // [60] main::$58 = (word*)balls + main::$38 -- pwuz1=pwuc1_plus_vwuz1 
    clc
    lda.z __58
    adc #<balls
    sta.z __58
    lda.z __58+1
    adc #>balls
    sta.z __58+1
    // [61] *main::$58 = 0 -- _deref_pwuz1=vbuc1 
    lda #0
    ldy #0
    sta (__58),y
    tya
    iny
    sta (__58),y
    // [62] main::$58[2] = 0 -- pwuz1_derefidx_vbuc1=vbuc2 
    lda #0
    ldy #2
    sta (__58),y
    lda #0
    iny
    sta (__58),y
    // [63] phi from main::@16 to main::@5 [phi:main::@16->main::@5]
  __b5_from___b16:
    // [63] phi main::timer#15 = 0 [phi:main::@16->main::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta.z timer
    // [63] phi main::active_balls#8 = main::active_balls#1 [phi:main::@16->main::@5#1] -- register_copy 
    jmp __b5
    // [63] phi from main::@25 main::@4 to main::@5 [phi:main::@25/main::@4->main::@5]
  __b5_from___b25:
  __b5_from___b4:
    // [63] phi main::timer#15 = main::timer#21 [phi:main::@25/main::@4->main::@5#0] -- register_copy 
    // [63] phi main::active_balls#8 = main::active_balls#2 [phi:main::@25/main::@4->main::@5#1] -- register_copy 
    jmp __b5
    // main::@5
  __b5:
    // [64] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    // [64] phi main::sprite_idx#3 = 0 [phi:main::@5->main::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta.z sprite_idx
    // [64] phi main::i#10 = 0 [phi:main::@5->main::@6#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z i_1
    lda #>0
    sta.z i_1+1
    jmp __b6
    // main::@6
  __b6:
    // [65] if(main::i#10<main::active_balls#8) goto main::@7 -- vwuz1_lt_vwuz2_then_la1 
    lda.z i_1+1
    cmp.z active_balls+1
    bcc __b7
    bne !+
    lda.z i_1
    cmp.z active_balls
    bcc __b7
  !:
    jmp __b8
    // main::@8
  __b8:
    // [66] *((byte*) 8193) = $98 -- _deref_pbuc1=vbuc2 
    lda #$98
    sta $2001
    jmp __b13
    // main::@13
  __b13:
    // [67] if(0==vblank_hit) goto main::@13 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z vblank_hit
    beq __b13
    jmp __b14
    // main::@14
  __b14:
    // [68] vblank_hit = 0 -- vbuz1=vbuc1 
    // wait for vblank
    lda #0
    sta.z vblank_hit
    // [69] *((byte*) 8193) = $18 -- _deref_pbuc1=vbuc2 
    lda #$18
    sta $2001
    // [50] phi from main::@14 to main::@3 [phi:main::@14->main::@3]
  __b3_from___b14:
    // [50] phi main::timer#3 = main::timer#15 [phi:main::@14->main::@3#0] -- register_copy 
    // [50] phi main::active_balls#2 = main::active_balls#8 [phi:main::@14->main::@3#1] -- register_copy 
    // [50] phi main::timer_2#2 = main::timer_2#1 [phi:main::@14->main::@3#2] -- register_copy 
    jmp __b3
    // main::@7
  __b7:
    // [70] main::$44 = main::i#10 << 3 -- vwuz1=vwuz2_rol_3 
    lda.z i_1
    asl
    sta.z __44
    lda.z i_1+1
    rol
    sta.z __44+1
    asl.z __44
    rol.z __44+1
    asl.z __44
    rol.z __44+1
    // [71] main::$63 = (word*)balls + main::$44 -- pwuz1=pwuc1_plus_vwuz2 
    lda.z __44
    clc
    adc #<balls
    sta.z __63
    lda.z __44+1
    adc #>balls
    sta.z __63+1
    // [72] *main::$63 = *main::$63 + main::$63[4] -- _deref_pwuz1=_deref_pwuz1_plus_pwuz1_derefidx_vbuc1 
    ldy #4
    sty.z $ff
    clc
    lda (__63),y
    ldy #0
    adc (__63),y
    sta (__63),y
    ldy.z $ff
    iny
    lda (__63),y
    ldy #1
    adc (__63),y
    sta (__63),y
    // [73] main::$63[6] = main::$63[6] + $10 -- pwuz1_derefidx_vbuc1=pwuz1_derefidx_vbuc1_plus_vbuc2 
    lda #$10
    ldy #6
    clc
    adc (__63),y
    sta (__63),y
    iny
    lda #0
    adc (__63),y
    sta (__63),y
    // [74] main::$63[2] = main::$63[2] + main::$63[6] -- pwuz1_derefidx_vbuc1=pwuz1_derefidx_vbuc1_plus_pwuz1_derefidx_vbuc2 
    ldy #6
    clc
    lda (__63),y
    ldy #2
    adc (__63),y
    sta (__63),y
    ldy #6+1
    lda (__63),y
    ldy #2+1
    adc (__63),y
    sta (__63),y
    // [75] main::$20 = *main::$63 >> 8 -- vwuz1=_deref_pwuz1_ror_8 
    ldy #1
    lda (__20),y
    sta.z __20
    dey
    sty.z __20+1
    // [76] if(main::$20>=8) goto main::@9 -- vwuz1_ge_vbuc1_then_la1 
    lda.z __20+1
    bne __b9
    lda.z __20
    cmp #8
    bcs __b9
  !:
    jmp __b11
    // main::@11
  __b11:
    // [77] main::$71 = (word*)balls + main::$44 -- pwuz1=pwuc1_plus_vwuz2 
    lda.z __44
    clc
    adc #<balls
    sta.z __71
    lda.z __44+1
    adc #>balls
    sta.z __71+1
    // [78] main::$71[4] = main::$71[4] ^ $ffff -- pwuz1_derefidx_vbuc1=pwuz1_derefidx_vbuc1_bxor_vwuc2 
    ldy #4
    lda #<$ffff
    eor (__71),y
    sta (__71),y
    iny
    lda #>$ffff
    eor (__71),y
    sta (__71),y
    jmp __b9
    // main::@9
  __b9:
    // [79] main::$69 = (word*)balls + main::$44 -- pwuz1=pwuc1_plus_vwuz2 
    lda.z __44
    clc
    adc #<balls
    sta.z __69
    lda.z __44+1
    adc #>balls
    sta.z __69+1
    // [80] main::$23 = main::$69[2] >> 8 -- vwuz1=pwuz2_derefidx_vbuc1_ror_8 
    ldy #2
    lda #0
    sta.z __23+1
    iny
    lda (__69),y
    sta.z __23
    // [81] main::$25 = main::$69[2] >> 8 -- vwuz1=pwuz1_derefidx_vbuc1_ror_8 
    ldy #2
    iny
    lda (__25),y
    sta.z __25
    lda #0
    sta.z __25+1
    // [82] main::$26 = main::h_bar#1 + 8 -- vbuz1=vbuz2_plus_vbuc1 
    lax.z h_bar
    axs #-[8]
    stx.z __26
    // [83] if(main::$23<main::h_bar#1) goto main::@10 -- vwuz1_lt_vbuz2_then_la1 
    lda.z __23+1
    bne !+
    lda.z __23
    cmp.z h_bar
    bcc __b10
  !:
    jmp __b24
    // main::@24
  __b24:
    // [84] if(main::$25>=main::$26) goto main::@10 -- vwuz1_ge_vbuz2_then_la1 
    lda.z __25+1
    bne __b10
    lda.z __25
    cmp.z __26
    bcs __b10
  !:
    jmp __b12
    // main::@12
  __b12:
    // [85] main::$76 = (word*)balls + main::$44 -- pwuz1=pwuc1_plus_vwuz2 
    lda.z __44
    clc
    adc #<balls
    sta.z __76
    lda.z __44+1
    adc #>balls
    sta.z __76+1
    // [86] main::$76[6] = main::$76[6] ^ $ffff -- pwuz1_derefidx_vbuc1=pwuz1_derefidx_vbuc1_bxor_vwuc2 
    ldy #6
    lda #<$ffff
    eor (__76),y
    sta (__76),y
    iny
    lda #>$ffff
    eor (__76),y
    sta (__76),y
    // [87] main::$30 = main::h_bar#1 - 2 -- vbuaa=vbuz1_minus_2 
    lda.z h_bar
    sec
    sbc #2
    // [88] main::$78 = (word)main::$30 -- vwuz1=_word_vbuaa 
    sta.z __78
    lda #0
    sta.z __78+1
    // [89] main::$31 = main::$78 << 8 -- vwuz1=vwuz1_rol_8 
    lda.z __31
    sta.z __31+1
    lda #0
    sta.z __31
    // [90] main::$76[2] = main::$31 -- pwuz1_derefidx_vbuc1=vwuz2 
    ldy #2
    lda.z __31
    sta (__76),y
    iny
    lda.z __31+1
    sta (__76),y
    jmp __b10
    // main::@10
  __b10:
    // [91] main::$73 = (word*)balls + main::$44 -- pwuz1=pwuc1_plus_vwuz1 
    clc
    lda.z __73
    adc #<balls
    sta.z __73
    lda.z __73+1
    adc #>balls
    sta.z __73+1
    // [92] main::$32 = main::$73[2] >> 8 -- vwuz1=pwuz2_derefidx_vbuc1_ror_8 
    ldy #2
    lda #0
    sta.z __32+1
    iny
    lda (__73),y
    sta.z __32
    // [93] main::$48 = main::sprite_idx#3 << 2 -- vbuxx=vbuz1_rol_2 
    lda.z sprite_idx
    asl
    asl
    tax
    // [94] ((byte*)SPRITE_BUFFER)[main::$48] = (byte)main::$32 -- pbuc1_derefidx_vbuxx=_byte_vwuz1 
    lda.z __32
    sta SPRITE_BUFFER,x
    // [95] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_TILE)[main::$48] = $a -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$a
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_TILE,x
    // [96] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES)[main::$48] = 3 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #3
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES,x
    // [97] main::$33 = *main::$73 >> 8 -- vwuz1=_deref_pwuz1_ror_8 
    ldy #1
    lda (__33),y
    sta.z __33
    dey
    sty.z __33+1
    // [98] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X)[main::$48] = (byte)main::$33 -- pbuc1_derefidx_vbuxx=_byte_vwuz1 
    lda.z __33
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X,x
    // [99] main::sprite_idx#2 = ++ main::sprite_idx#3 -- vbuz1=_inc_vbuz1 
    inc.z sprite_idx
    // [100] main::i#4 = ++ main::i#10 -- vwuz1=_inc_vwuz1 
    inc.z i_1
    bne !+
    inc.z i_1+1
  !:
    // [64] phi from main::@10 to main::@6 [phi:main::@10->main::@6]
  __b6_from___b10:
    // [64] phi main::sprite_idx#3 = main::sprite_idx#2 [phi:main::@10->main::@6#0] -- register_copy 
    // [64] phi main::i#10 = main::i#4 [phi:main::@10->main::@6#1] -- register_copy 
    jmp __b6
    // main::@25
  __b25:
    // [101] main::timer#21 = main::timer#1 -- vbuz1=vbuxx 
    stx.z timer
    jmp __b5_from___b25
    // [102] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [103] call rand 
    // [140] phi from main::@2 to rand [phi:main::@2->rand]
  rand_from___b2:
    // [140] phi rand_state#10 = rand_state#17 [phi:main::@2->rand#0] -- register_copy 
    jsr rand
    // [104] rand::return#2 = rand::return#0
    jmp __b22
    // main::@22
  __b22:
    // [105] main::$9 = rand::return#2
    // [106] main::$10 = main::$9 & $3ff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __10
    and #<$3ff
    sta.z __10
    lda.z __10+1
    and #>$3ff
    sta.z __10+1
    // [107] main::$36 = main::i#14 << 3 -- vwuz1=vwuz2_rol_3 
    lda.z i
    asl
    sta.z __36
    lda.z i+1
    rol
    sta.z __36+1
    asl.z __36
    rol.z __36+1
    asl.z __36
    rol.z __36+1
    // [108] main::$55 = (word*)balls + main::$36 -- pwuz1=pwuc1_plus_vwuz2 
    lda.z __36
    clc
    adc #<balls
    sta.z __55
    lda.z __36+1
    adc #>balls
    sta.z __55+1
    // [109] main::$55[4] = main::$10 -- pwuz1_derefidx_vbuc1=vwuz2 
    ldy #4
    lda.z __10
    sta (__55),y
    iny
    lda.z __10+1
    sta (__55),y
    // [110] call rand 
    // [140] phi from main::@22 to rand [phi:main::@22->rand]
  rand_from___b22:
    // [140] phi rand_state#10 = rand_state#11 [phi:main::@22->rand#0] -- register_copy 
    jsr rand
    // [111] rand::return#3 = rand::return#0
    jmp __b23
    // main::@23
  __b23:
    // [112] main::$11 = rand::return#3
    // [113] main::$12 = main::$11 & $ff -- vbuxx=vwuz1_band_vbuc1 
    lda #$ff
    and.z __11
    tax
    // [114] main::$56 = (word*)balls + main::$36 -- pwuz1=pwuc1_plus_vwuz1 
    clc
    lda.z __56
    adc #<balls
    sta.z __56
    lda.z __56+1
    adc #>balls
    sta.z __56+1
    // [115] main::$56[6] = main::$12 -- pwuz1_derefidx_vbuc1=vbuxx 
    txa
    ldy #6
    sta (__56),y
    lda #0
    iny
    sta (__56),y
    // [116] main::i#2 = ++ main::i#14 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [48] phi from main::@23 to main::@1 [phi:main::@23->main::@1]
  __b1_from___b23:
    // [48] phi rand_state#17 = rand_state#11 [phi:main::@23->main::@1#0] -- register_copy 
    // [48] phi main::i#14 = main::i#2 [phi:main::@23->main::@1#1] -- register_copy 
    jmp __b1
}
  // ppuDataTransfer
// Transfer a number of bytes from the CPU memory to the PPU memory
// - ppuData : Pointer in the PPU memory
// - cpuData : Pointer to the CPU memory (RAM of ROM)
// - size : The number of bytes to transfer
// ppuDataTransfer(void* zp($12) cpuData)
ppuDataTransfer: {
    .label ppuDataPrepare1_ppuData = $10
    .label cpuSrc = $12
    .label i = $14
    .label cpuData = $12
    jmp ppuDataPrepare1
    // ppuDataTransfer::ppuDataPrepare1
  ppuDataPrepare1:
    // [118] ppuDataTransfer::ppuDataPrepare1_$0 = > ppuDataTransfer::ppuDataPrepare1_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare1_ppuData+1
    // [119] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataTransfer::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [120] ppuDataTransfer::ppuDataPrepare1_$1 = < ppuDataTransfer::ppuDataPrepare1_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare1_ppuData
    // [121] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataTransfer::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    jmp __b3
    // ppuDataTransfer::@3
  __b3:
    // [122] ppuDataTransfer::cpuSrc#6 = (byte*)ppuDataTransfer::cpuData#2
    // [123] phi from ppuDataTransfer::@3 to ppuDataTransfer::@1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1]
  __b1_from___b3:
    // [123] phi ppuDataTransfer::cpuSrc#2 = ppuDataTransfer::cpuSrc#6 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#0] -- register_copy 
    // [123] phi ppuDataTransfer::i#2 = 0 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
    // ppuDataTransfer::@1
  __b1:
    // [124] if(ppuDataTransfer::i#2<$20*SIZEOF_BYTE) goto ppuDataTransfer::@2 -- vwuz1_lt_vbuc1_then_la1 
    lda.z i+1
    bne !+
    lda.z i
    cmp #$20*SIZEOF_BYTE
    bcc __b2
  !:
    jmp __breturn
    // ppuDataTransfer::@return
  __breturn:
    // [125] return 
    rts
    // ppuDataTransfer::@2
  __b2:
    // [126] ppuDataTransfer::ppuDataPut1_val#0 = *ppuDataTransfer::cpuSrc#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (cpuSrc),y
    jmp ppuDataPut1
    // ppuDataTransfer::ppuDataPut1
  ppuDataPut1:
    // [127] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataTransfer::ppuDataPut1_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b4
    // ppuDataTransfer::@4
  __b4:
    // [128] ppuDataTransfer::cpuSrc#1 = ++ ppuDataTransfer::cpuSrc#2 -- pbuz1=_inc_pbuz1 
    inc.z cpuSrc
    bne !+
    inc.z cpuSrc+1
  !:
    // [129] ppuDataTransfer::i#1 = ++ ppuDataTransfer::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [123] phi from ppuDataTransfer::@4 to ppuDataTransfer::@1 [phi:ppuDataTransfer::@4->ppuDataTransfer::@1]
  __b1_from___b4:
    // [123] phi ppuDataTransfer::cpuSrc#2 = ppuDataTransfer::cpuSrc#1 [phi:ppuDataTransfer::@4->ppuDataTransfer::@1#0] -- register_copy 
    // [123] phi ppuDataTransfer::i#2 = ppuDataTransfer::i#1 [phi:ppuDataTransfer::@4->ppuDataTransfer::@1#1] -- register_copy 
    jmp __b1
}
  // ppuDataFill
// Fill a number of bytes in the PPU memory
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
// ppuDataFill(word zp($12) size)
ppuDataFill: {
    .label ppuDataPrepare1_ppuData = $10
    .label i = $14
    .label size = $12
    jmp ppuDataPrepare1
    // ppuDataFill::ppuDataPrepare1
  ppuDataPrepare1:
    // [131] ppuDataFill::ppuDataPrepare1_$0 = > ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare1_ppuData+1
    // [132] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataFill::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [133] ppuDataFill::ppuDataPrepare1_$1 = < ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare1_ppuData
    // [134] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataFill::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [135] phi from ppuDataFill::ppuDataPrepare1 to ppuDataFill::@1 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1]
  __b1_from_ppuDataPrepare1:
    // [135] phi ppuDataFill::i#2 = 0 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // Transfer to PPU
    // ppuDataFill::@1
  __b1:
    // [136] if(ppuDataFill::i#2<ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 -- vwuz1_lt_vwuz2_then_la1 
    lda.z i+1
    cmp.z size+1
    bcc ppuDataPut1
    bne !+
    lda.z i
    cmp.z size
    bcc ppuDataPut1
  !:
    jmp __breturn
    // ppuDataFill::@return
  __breturn:
    // [137] return 
    rts
    // ppuDataFill::ppuDataPut1
  ppuDataPut1:
    // [138] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b2
    // ppuDataFill::@2
  __b2:
    // [139] ppuDataFill::i#1 = ++ ppuDataFill::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [135] phi from ppuDataFill::@2 to ppuDataFill::@1 [phi:ppuDataFill::@2->ppuDataFill::@1]
  __b1_from___b2:
    // [135] phi ppuDataFill::i#2 = ppuDataFill::i#1 [phi:ppuDataFill::@2->ppuDataFill::@1#0] -- register_copy 
    jmp __b1
}
  // rand
// Returns a pseudo-random number in the range of 0 to RAND_MAX (65535)
// Uses an xorshift pseudorandom number generator that hits all different values
// Information https://en.wikipedia.org/wiki/Xorshift
// Source http://www.retroprogramming.com/2017/07/xorshift-pseudorandom-numbers-in-z80.html
rand: {
    .label __0 = $29
    .label __1 = $2b
    .label __2 = $2d
    .label return = $23
    // [141] rand::$0 = rand_state#10 << 7 -- vwuz1=vwuz2_rol_7 
    lda.z rand_state+1
    lsr
    lda.z rand_state
    ror
    sta.z __0+1
    lda #0
    ror
    sta.z __0
    // [142] rand_state#0 = rand_state#10 ^ rand::$0 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z rand_state
    eor.z __0
    sta.z rand_state
    lda.z rand_state+1
    eor.z __0+1
    sta.z rand_state+1
    // [143] rand::$1 = rand_state#0 >> 9 -- vwuz1=vwuz2_ror_9 
    lda.z rand_state+1
    lsr
    sta.z __1
    lda #0
    sta.z __1+1
    // [144] rand_state#1 = rand_state#0 ^ rand::$1 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z rand_state
    eor.z __1
    sta.z rand_state
    lda.z rand_state+1
    eor.z __1+1
    sta.z rand_state+1
    // [145] rand::$2 = rand_state#1 << 8 -- vwuz1=vwuz2_rol_8 
    lda.z rand_state
    sta.z __2+1
    lda #0
    sta.z __2
    // [146] rand_state#11 = rand_state#1 ^ rand::$2 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z rand_state
    eor.z __2
    sta.z rand_state
    lda.z rand_state+1
    eor.z __2+1
    sta.z rand_state+1
    // [147] rand::return#0 = rand_state#11 -- vwuz1=vwuz2 
    lda.z rand_state
    sta.z return
    lda.z rand_state+1
    sta.z return+1
    jmp __breturn
    // rand::@return
  __breturn:
    // [148] return 
    rts
}
  // File Data
.segment GameRam
  // Moving balls (in GameRAM)
  balls: .fill 8*$40, 0
.segment Data
  sine_table: .byte $40, $42, $43, $45, $46, $48, $49, $4b, $4c, $4e, $50, $51, $53, $54, $56, $57, $58, $5a, $5b, $5d, $5e, $60, $61, $62, $64, $65, $66, $67, $69, $6a, $6b, $6c, $6d, $6e, $6f, $70, $71, $72, $73, $74, $75, $76, $77, $78, $78, $79, $7a, $7b, $7b, $7c, $7c, $7d, $7d, $7e, $7e, $7e, $7f, $7f, $7f, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $7f, $7f, $7f, $7e, $7e, $7e, $7d, $7d, $7c, $7c, $7b, $7b, $7a, $79, $78, $78, $77, $76, $75, $74, $73, $72, $71, $70, $6f, $6e, $6d, $6c, $6b, $6a, $69, $67, $66, $65, $64, $62, $61, $60, $5e, $5d, $5b, $5a, $58, $57, $56, $54, $53, $51, $50, $4e, $4c, $4b, $49, $48, $46, $45, $43, $42, $40, $3e, $3d, $3b, $3a, $38, $37, $35, $34, $32, $30, $2f, $2d, $2c, $2a, $29, $28, $26, $25, $23, $22, $20, $1f, $1e, $1c, $1b, $1a, $19, $17, $16, $15, $14, $13, $12, $11, $10, $f, $e, $d, $c, $b, $a, 9, 8, 8, 7, 6, 5, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 8, 9, $a, $b, $c, $d, $e, $f, $10, $11, $12, $13, $14, $15, $16, $17, $19, $1a, $1b, $1c, $1e, $1f, $20, $22, $23, $25, $26, $28, $29, $2a, $2c, $2d, $2f, $30, $32, $34, $35, $37, $38, $3a, $3b, $3d, $3e
  palette: .byte $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4
  h_bar_tilemap: .byte 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
.segment Tiles
TILES:
.import binary "lazydata.chr"

.segment GameRam
  .align $100
  SPRITE_BUFFER: .fill 4*$100, 0
.segment Vectors
  VECTORS: .word vblank, main, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp ppuSpriteBufferDmaTransfer1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp initNES1
Removing instruction jmp initNES1_disableVideoOutput1
Removing instruction jmp initNES1_disableAudioOutput1
Removing instruction jmp initNES1_clearVBlankFlag1
Removing instruction jmp initNES1_waitForVBlank1
Removing instruction jmp initNES1_waitForVBlank1___b1
Removing instruction jmp initNES1___b1
Removing instruction jmp initNES1_waitForVBlank2
Removing instruction jmp initNES1_waitForVBlank2___b1
Removing instruction jmp initNES1___b7
Removing instruction jmp __b17
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b21
Removing instruction jmp enableVideoOutput1
Removing instruction jmp __b18
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b15
Removing instruction jmp __b16
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b8
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b11
Removing instruction jmp __b9
Removing instruction jmp __b24
Removing instruction jmp __b12
Removing instruction jmp __b10
Removing instruction jmp __b2
Removing instruction jmp __b22
Removing instruction jmp __b23
Removing instruction jmp ppuDataPrepare1
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp ppuDataPut1
Removing instruction jmp __b4
Removing instruction jmp ppuDataPrepare1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #$40
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #<0
Removing instruction lda #>0
Replacing instruction lda.z __20+1 with TYA
Removing instruction lda.z __31
Removing instruction lda.z __33
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda.z rand_state+1
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label initNES1_waitForVBlank1___b1 with initNES1_waitForVBlank1
Replacing label initNES1___b1_from_initNES1___b1 with initNES1___b1
Replacing label initNES1_waitForVBlank2___b1 with initNES1_waitForVBlank2
Replacing label __b2_from___b1 with __b2
Replacing label __b5_from___b4 with __b5
Replacing label __b5_from___b4 with __b5
Replacing label __b3 with __b4
Replacing label __b5_from___b25 with __b5
Removing instruction __b1_from___init1:
Removing instruction main_from___b1:
Removing instruction initNES1_waitForVBlank1_from_initNES1_clearVBlankFlag1:
Removing instruction initNES1_waitForVBlank1___b1:
Removing instruction initNES1___b1_from_initNES1___b1:
Removing instruction initNES1_waitForVBlank2_from_initNES1___b1:
Removing instruction initNES1_waitForVBlank2___b1:
Removing instruction __b17_from_initNES1___b7:
Removing instruction __b19_from___b17:
Removing instruction __b20_from___b19:
Removing instruction ppuDataFill_from___b20:
Removing instruction __b21_from___b20:
Removing instruction ppuDataTransfer_from___b21:
Removing instruction __b3:
Removing instruction __b5_from___b25:
Removing instruction __b5_from___b4:
Removing instruction __b6_from___b5:
Removing instruction __b2_from___b1:
Removing instruction rand_from___b2:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction ppuSpriteBufferDmaTransfer1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction initNES1:
Removing instruction initNES1_disableVideoOutput1:
Removing instruction initNES1_disableAudioOutput1:
Removing instruction initNES1_clearVBlankFlag1:
Removing instruction initNES1___b1_from_initNES1_waitForVBlank1___b1:
Removing instruction initNES1___b7:
Removing instruction __b17:
Removing instruction ppuDataTransfer_from___b17:
Removing instruction __b19:
Removing instruction ppuDataFill_from___b19:
Removing instruction __b20:
Removing instruction __b21:
Removing instruction enableVideoOutput1:
Removing instruction __b18:
Removing instruction __b1_from___b18:
Removing instruction __b3_from___b1:
Removing instruction __b15:
Removing instruction __b16:
Removing instruction __b5_from___b16:
Removing instruction __b8:
Removing instruction __b14:
Removing instruction __b3_from___b14:
Removing instruction __b11:
Removing instruction __b24:
Removing instruction __b12:
Removing instruction __b6_from___b10:
Removing instruction __b22:
Removing instruction rand_from___b22:
Removing instruction __b23:
Removing instruction __b1_from___b23:
Removing instruction ppuDataPrepare1:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction ppuDataPut1:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction ppuDataPrepare1:
Removing instruction __b1_from_ppuDataPrepare1:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp initNES1___b1
Removing instruction jmp __b5
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Fixing long branch [225] bcc __b2 to bcs
Fixing long branch [254] bne __b25 to beq

FINAL SYMBOL TABLE
word $0::x_position
word $0::x_velocity
word $0::y_position
word $0::y_velocity
const struct RICOH_2A03* APU = (struct RICOH_2A03*) 16384
const nomodify byte* FR_COUNTER = (byte*) 16407
const nomodify byte* MEMORY = (byte*) 0
const byte OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
const byte OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
const byte OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
const byte OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
const byte OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
const byte OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
const byte OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
const byte OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
const byte OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES = 2
const byte OFFSET_STRUCT_SPRITEDATA_TILE = 1
const byte OFFSET_STRUCT_SPRITEDATA_X = 3
const struct RICOH_2C02* PPU = (struct RICOH_2C02*) 8192
const nomodify byte* PPU_ATTRIBUTE_TABLE_0 = (byte*) 9152
const nomodify byte* PPU_NAME_TABLE_0 = (byte*) 8192
const nomodify byte* PPU_PALETTE = (byte*) 16128
const nomodify to_volatile byte* PPU_PPUSTATUS = (byte*) 8194
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
byte RICOH_2A03::DMC_FREQ
byte RICOH_2A03::DMC_LEN
byte RICOH_2A03::DMC_RAW
byte RICOH_2A03::DMC_START
byte RICOH_2A03::JOY1
byte RICOH_2A03::JOY2
byte RICOH_2A03::NOISE_HI
byte RICOH_2A03::NOISE_LO
byte RICOH_2A03::NOISE_VOL
byte RICOH_2A03::OAMDMA
byte RICOH_2A03::SND_CHN
byte RICOH_2A03::SQ1_HI
byte RICOH_2A03::SQ1_LO
byte RICOH_2A03::SQ1_SWEEP
byte RICOH_2A03::SQ1_VOL
byte RICOH_2A03::SQ2_HI
byte RICOH_2A03::SQ2_LO
byte RICOH_2A03::SQ2_SWEEP
byte RICOH_2A03::SQ2_VOL
byte RICOH_2A03::TRI_HI
byte RICOH_2A03::TRI_LINEAR
byte RICOH_2A03::TRI_LO
byte RICOH_2A03::UNUSED1
byte RICOH_2A03::UNUSED2
byte RICOH_2C02::OAMADDR
byte RICOH_2C02::OAMDATA
byte RICOH_2C02::PPUADDR
byte RICOH_2C02::PPUCTRL
byte RICOH_2C02::PPUDATA
byte RICOH_2C02::PPUMASK
byte RICOH_2C02::PPUSCROLL
volatile byte RICOH_2C02::PPUSTATUS loadstore
const byte SIZEOF_BYTE = 1
const struct SpriteData* SPRITE_BUFFER[$100]  = { fill( $100, 0) }
byte SpriteData::attributes
byte SpriteData::tile
byte SpriteData::x
byte SpriteData::y
const byte* TILES[]  = kickasm {{ .import binary "lazydata.chr"
 }}
const to_nomodify void()** VECTORS[]  = { &vblank, &main, (void()*) 0 }
void __start()
label __start::@1
label __start::@return
label __start::__init1
const struct $0* balls[$40]  = { fill( $40, 0) }
const to_nomodify byte* h_bar_tilemap[]  = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
signed word main()
word~ main::$10 zp[2]:35 67.33333333333333
word~ main::$11 zp[2]:35 202.0
byte~ main::$12 reg byte x 101.0
byte~ main::$14 reg byte a 202.0
word~ main::$20 zp[2]:20 2002.0
word~ main::$23 zp[2]:26 667.3333333333334
word~ main::$25 zp[2]:24 667.3333333333334
byte~ main::$26 zp[1]:28 1001.0
byte~ main::$30 reg byte a 1001.0
word~ main::$31 zp[2]:31 2002.0
word~ main::$32 zp[2]:33 500.5
word~ main::$33 zp[2]:18 1001.0
word~ main::$36 zp[2]:37 43.285714285714285
word~ main::$38 zp[2]:16 202.0
word~ main::$44 zp[2]:18 286.0
byte~ main::$48 reg byte x 1001.0
word*~ main::$55 zp[2]:39 202.0
word*~ main::$56 zp[2]:37 202.0
word*~ main::$58 zp[2]:16 151.5
word*~ main::$63 zp[2]:20 2502.5
word*~ main::$69 zp[2]:24 1501.5
word*~ main::$71 zp[2]:22 3003.0
word*~ main::$73 zp[2]:18 500.5
word*~ main::$76 zp[2]:29 800.8
word~ main::$78 zp[2]:31 2002.0
word~ main::$9 zp[2]:35 202.0
label main::@1
label main::@10
label main::@11
label main::@12
label main::@13
label main::@14
label main::@15
label main::@16
label main::@17
label main::@18
label main::@19
label main::@2
label main::@20
label main::@21
label main::@22
label main::@23
label main::@24
label main::@25
label main::@3
label main::@4
label main::@5
label main::@6
label main::@7
label main::@8
label main::@9
word main::active_balls
word main::active_balls#1 active_balls zp[2]:5 60.599999999999994
word main::active_balls#2 active_balls zp[2]:5 56.11111111111111
word main::active_balls#8 active_balls zp[2]:5 36.973684210526315
label main::enableVideoOutput1
byte main::h_bar
byte main::h_bar#1 h_bar zp[1]:15 69.67391304347825
word main::i
word main::i#10 i_1 zp[2]:8 125.125
word main::i#14 i zp[2]:2 25.25
word main::i#2 i zp[2]:2 202.0
word main::i#4 i_1 zp[2]:8 2002.0
label main::initNES1
label main::initNES1_@1
label main::initNES1_@7
label main::initNES1_clearVBlankFlag1
label main::initNES1_disableAudioOutput1
label main::initNES1_disableVideoOutput1
byte main::initNES1_i
byte main::initNES1_i#1 reg byte x 151.5
byte main::initNES1_i#2 reg byte x 112.22222222222223
label main::initNES1_waitForVBlank1
byte~ main::initNES1_waitForVBlank1_$0 reg byte a 202.0
label main::initNES1_waitForVBlank1_@1
label main::initNES1_waitForVBlank2
byte~ main::initNES1_waitForVBlank2_$0 reg byte a 202.0
label main::initNES1_waitForVBlank2_@1
signed word main::return
byte main::sprite_idx
byte main::sprite_idx#2 sprite_idx zp[1]:10 1001.0
byte main::sprite_idx#3 sprite_idx zp[1]:10 96.87096774193549
byte main::timer
byte main::timer#1 reg byte x 101.0
byte main::timer#15 timer zp[1]:7 7.973684210526316
byte main::timer#21 timer zp[1]:7 202.0
byte main::timer#3 timer zp[1]:7 57.714285714285715
byte main::timer_2
byte main::timer_2#1 timer_2 zp[1]:4 5.9411764705882355
byte main::timer_2#2 timer_2 zp[1]:4 202.0
const to_nomodify byte* palette[]  = { $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4 }
void ppuDataFill(nomodify void* ppuDataFill::ppuData , byte ppuDataFill::val , word ppuDataFill::size)
label ppuDataFill::@1
label ppuDataFill::@2
label ppuDataFill::@return
word ppuDataFill::i
word ppuDataFill::i#1 i zp[2]:20 2002.0
word ppuDataFill::i#2 i zp[2]:20 1001.0
nomodify void* ppuDataFill::ppuData
label ppuDataFill::ppuDataPrepare1
byte~ ppuDataFill::ppuDataPrepare1_$0 reg byte a 202.0
byte~ ppuDataFill::ppuDataPrepare1_$1 reg byte a 202.0
nomodify void* ppuDataFill::ppuDataPrepare1_ppuData
nomodify void* ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataPrepare1_ppuData zp[2]:16 67.33333333333333
label ppuDataFill::ppuDataPut1
byte ppuDataFill::ppuDataPut1_val
word ppuDataFill::size
word ppuDataFill::size#3 size zp[2]:18 111.22222222222223
byte ppuDataFill::val
void ppuDataTransfer(nomodify void* ppuDataTransfer::ppuData , nomodify void* ppuDataTransfer::cpuData , word ppuDataTransfer::size)
label ppuDataTransfer::@1
label ppuDataTransfer::@2
label ppuDataTransfer::@3
label ppuDataTransfer::@4
label ppuDataTransfer::@return
nomodify void* ppuDataTransfer::cpuData
nomodify void* ppuDataTransfer::cpuData#2 cpuData zp[2]:18
byte* ppuDataTransfer::cpuSrc
byte* ppuDataTransfer::cpuSrc#1 cpuSrc zp[2]:18 1001.0
byte* ppuDataTransfer::cpuSrc#2 cpuSrc zp[2]:18 776.0
byte* ppuDataTransfer::cpuSrc#6 cpuSrc zp[2]:18 202.0
word ppuDataTransfer::i
word ppuDataTransfer::i#1 i zp[2]:20 2002.0
word ppuDataTransfer::i#2 i zp[2]:20 600.5999999999999
nomodify void* ppuDataTransfer::ppuData
label ppuDataTransfer::ppuDataPrepare1
byte~ ppuDataTransfer::ppuDataPrepare1_$0 reg byte a 202.0
byte~ ppuDataTransfer::ppuDataPrepare1_$1 reg byte a 202.0
nomodify void* ppuDataTransfer::ppuDataPrepare1_ppuData
nomodify void* ppuDataTransfer::ppuDataPrepare1_ppuData#0 ppuDataPrepare1_ppuData zp[2]:16 67.33333333333333
label ppuDataTransfer::ppuDataPut1
byte ppuDataTransfer::ppuDataPut1_val
byte ppuDataTransfer::ppuDataPut1_val#0 reg byte a 2002.0
word ppuDataTransfer::size
const byte* printf_buffer_number::digits[$b]  = { fill( $b, 0) }
byte printf_buffer_number::sign
byte printf_format_number::justify_left
byte printf_format_number::min_length
byte printf_format_number::radix
byte printf_format_number::sign_always
byte printf_format_number::upper_case
byte printf_format_number::zero_padding
byte printf_format_string::justify_left
byte printf_format_string::min_length
word rand()
word~ rand::$0 zp[2]:41 2002.0
word~ rand::$1 zp[2]:43 2002.0
word~ rand::$2 zp[2]:45 2002.0
label rand::@return
word rand::return
word rand::return#0 return zp[2]:35 300.75
word rand::return#2 return zp[2]:35 202.0
word rand::return#3 return zp[2]:35 202.0
word rand_state
word rand_state#0 rand_state zp[2]:11 1501.5
word rand_state#1 rand_state zp[2]:11 1501.5
word rand_state#10 rand_state zp[2]:11 1102.0
word rand_state#11 rand_state zp[2]:11 129.64705882352942
word rand_state#17 rand_state zp[2]:11 67.33333333333333
volatile byte scroll_y loadstore zp[1]:13 105.0
const to_nomodify byte* sine_table[$100]  = { $40, $42, $43, $45, $46, $48, $49, $4b, $4c, $4e, $50, $51, $53, $54, $56, $57, $58, $5a, $5b, $5d, $5e, $60, $61, $62, $64, $65, $66, $67, $69, $6a, $6b, $6c, $6d, $6e, $6f, $70, $71, $72, $73, $74, $75, $76, $77, $78, $78, $79, $7a, $7b, $7b, $7c, $7c, $7d, $7d, $7e, $7e, $7e, $7f, $7f, $7f, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $7f, $7f, $7f, $7e, $7e, $7e, $7d, $7d, $7c, $7c, $7b, $7b, $7a, $79, $78, $78, $77, $76, $75, $74, $73, $72, $71, $70, $6f, $6e, $6d, $6c, $6b, $6a, $69, $67, $66, $65, $64, $62, $61, $60, $5e, $5d, $5b, $5a, $58, $57, $56, $54, $53, $51, $50, $4e, $4c, $4b, $49, $48, $46, $45, $43, $42, $40, $3e, $3d, $3b, $3a, $38, $37, $35, $34, $32, $30, $2f, $2d, $2c, $2a, $29, $28, $26, $25, $23, $22, $20, $1f, $1e, $1c, $1b, $1a, $19, $17, $16, $15, $14, $13, $12, $11, $10, $f, $e, $d, $c, $b, $a, 9, 8, 8, 7, 6, 5, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 8, 9, $a, $b, $c, $d, $e, $f, $10, $11, $12, $13, $14, $15, $16, $17, $19, $1a, $1b, $1c, $1e, $1f, $20, $22, $23, $25, $26, $28, $29, $2a, $2c, $2d, $2f, $30, $32, $34, $35, $37, $38, $3a, $3b, $3d, $3e }
interrupt(HARDWARE_STACK) void vblank()
label vblank::@1
label vblank::@return
label vblank::ppuSpriteBufferDmaTransfer1
struct SpriteData* vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer
volatile byte vblank_hit loadstore zp[1]:14 9.981981981981983

reg byte x [ main::initNES1_i#2 main::initNES1_i#1 ]
zp[2]:2 [ main::i#14 main::i#2 ]
zp[1]:4 [ main::timer_2#2 main::timer_2#1 ]
zp[2]:5 [ main::active_balls#2 main::active_balls#8 main::active_balls#1 ]
zp[1]:7 [ main::timer#3 main::timer#15 main::timer#21 ]
zp[2]:8 [ main::i#10 main::i#4 ]
zp[1]:10 [ main::sprite_idx#3 main::sprite_idx#2 ]
zp[2]:11 [ rand_state#10 rand_state#17 rand_state#11 rand_state#0 rand_state#1 ]
zp[1]:13 [ scroll_y ]
zp[1]:14 [ vblank_hit ]
reg byte a [ main::initNES1_waitForVBlank1_$0 ]
reg byte a [ main::initNES1_waitForVBlank2_$0 ]
zp[1]:15 [ main::h_bar#1 ]
reg byte a [ main::$14 ]
reg byte x [ main::timer#1 ]
zp[2]:16 [ main::$38 main::$58 ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataTransfer::ppuDataPrepare1_ppuData#0 ]
zp[2]:18 [ main::$44 main::$73 main::$33 ppuDataFill::size#3 ppuDataTransfer::cpuData#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#6 ppuDataTransfer::cpuSrc#1 ]
zp[2]:20 [ main::$63 main::$20 ppuDataFill::i#2 ppuDataFill::i#1 ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
zp[2]:22 [ main::$71 ]
zp[2]:24 [ main::$69 main::$25 ]
zp[2]:26 [ main::$23 ]
zp[1]:28 [ main::$26 ]
zp[2]:29 [ main::$76 ]
reg byte a [ main::$30 ]
zp[2]:31 [ main::$78 main::$31 ]
zp[2]:33 [ main::$32 ]
reg byte x [ main::$48 ]
zp[2]:35 [ rand::return#2 main::$9 rand::return#0 main::$10 rand::return#3 main::$11 ]
zp[2]:37 [ main::$36 main::$56 ]
zp[2]:39 [ main::$55 ]
reg byte x [ main::$12 ]
reg byte a [ ppuDataTransfer::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataTransfer::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataTransfer::ppuDataPut1_val#0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$1 ]
zp[2]:41 [ rand::$0 ]
zp[2]:43 [ rand::$1 ]
zp[2]:45 [ rand::$2 ]


FINAL ASSEMBLER
Score: 64773

  // File Comments
  // Upstart
  // Nintendo Entertainment System (NES) ROM (Mapper 0 NROM, Vertical Mirroring)
// https://sadistech.com/nesromtool/romdoc.html
// https://forums.nesdev.com/viewtopic.php?f=2&t=9896
// https://github.com/gregkrsak/first_nes
.file [name="kickballs-3.nes", type="bin", segments="NesRom"]
.file [name="kickballs-3.nes_hdr", type="bin", segments="Header"]
.file [name="kickballs-3.nes_prg", type="bin", segments="ProgramRom"]
.file [name="kickballs-3.nes_chr", type="bin", segments="CharacterRom"]
.segmentdef Header  [ start=$0000,       min=$0000, max=$000f, fill ]
.segmentdef Tiles   [ start=$0000,       min=$0000, max=$1fff, fill ]
.segmentdef Code    [ start=$c000,       min=$c000, max=$fff9 ]
.segmentdef Data    [ startAfter="Code", min=$c000, max=$fff9 ]
.segmentdef Vectors [ start=$fffa,       min=$fffa, max=$ffff ]
.segmentdef GameRam [start=$200,max=$7ff, virtual]
.segmentdef ProgramRom [ segments="Code, Data, Vectors" ]
.segmentdef CharacterRom [ segments="Tiles" ]
.segmentdef NesRom
.segment NesRom
.segmentout [ segments="Header" ]
.segmentout [ segments="ProgramRom" ]
.segmentout [ segments="CharacterRom" ]
.segment Header
.text   @"NES\$1a"
.byte   $01           // 1x 16KB ROM (PRG)
.byte   $01           // 1x 8KB VROM (CHR)
.byte   %00000001     // Mapper nibble 0000 == No mapping (a simple 16KB PRG + 8KB CHR game)
                      // Mirroring nibble 0001 == Vertical mirroring only
.segment Code

  // Global Constants & labels
  .const OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
  .const OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
  .const OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
  .const OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
  .const OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
  .const OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
  .const OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
  .const OFFSET_STRUCT_SPRITEDATA_TILE = 1
  .const OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES = 2
  .const OFFSET_STRUCT_SPRITEDATA_X = 3
  .const OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
  .const SIZEOF_BYTE = 1
  // $2000-$23bf	$03c0	Name table 0
  .label PPU_NAME_TABLE_0 = $2000
  // $23c0-$23ff	$0040	Attribute table 0
  .label PPU_ATTRIBUTE_TABLE_0 = $23c0
  // $3000-$3eff	$0f00	Mirrors of $2000-$2eff
  // $3f00-$3f1f	$0020	Palette RAM indexes
  .label PPU_PALETTE = $3f00
  // PPU Status Register for reading in ASM
  .label PPU_PPUSTATUS = $2002
  // APU Frame Counter
  // generates low-frequency clocks for the channels and an optional 60 Hz interrupt.
  // https://wiki.nesdev.com/w/index.php/APU_Frame_Counter
  // ------+-----+---------------------------------------------------------------
  //  $4017 |	 W  | FR_COUNTER Frame Counter	Set mode and interrupt
  //  ------+-----+---------------------------------------------------------------
  //        |   7	| Sequencer mode: 0 selects 4-step sequence, 1 selects 5-step sequence
  //        |   6	| Interrupt inhibit flag. If set, the frame interrupt flag is cleared, otherwise it is unaffected.
  //  ------+-----+---------------------------------------------------------------
  // Side effects	After 3 or 4 CPU clock cycles*, the timer is reset.
  // If the mode flag is set, then both "quarter frame" and "half frame" signals are also generated.
  .label FR_COUNTER = $4017
  // Pointer to the start of RAM memory
  .label MEMORY = 0
  // NES Picture Processing Unit (PPU)
  .label PPU = $2000
  // NES CPU and audion processing unit (APU)
  .label APU = $4000
  .label scroll_y = $d
  .label vblank_hit = $e
  // The random state variable
  .label rand_state = $b
.segment Code
  // __start
__start: {
    // __start::__init1
    // scroll_y = 0
    // [1] scroll_y = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z scroll_y
    // vblank_hit = 0
    // [2] vblank_hit = 0 -- vbuz1=vbuc1 
    sta.z vblank_hit
    // [3] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [4] call main 
    // [12] phi from __start::@1 to main [phi:__start::@1->main]
    jsr main
    // __start::@return
    // [5] return 
    rts
}
  // vblank
// NMI Called when the PPU refreshes the screen (also known as the V-Blank period)
vblank: {
    // entry interrupt(HARDWARE_STACK)
    pha
    txa
    pha
    tya
    pha
    // PPU->PPUSCROLL = 0
    // [6] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = 0 -- _deref_pbuc1=vbuc2 
    // Set scroll
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // PPU->PPUSCROLL = scroll_y
    // [7] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = scroll_y -- _deref_pbuc1=vbuz1 
    lda.z scroll_y
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // vblank::ppuSpriteBufferDmaTransfer1
    // PPU->OAMADDR = 0
    // [8] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR
    // APU->OAMDMA = >spriteBuffer
    // [9] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA) = >SPRITE_BUFFER -- _deref_pbuc1=vbuc2 
    lda #>SPRITE_BUFFER
    sta APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA
    // vblank::@1
    // vblank_hit++;
    // [10] vblank_hit = ++ vblank_hit -- vbuz1=_inc_vbuz1 
    inc.z vblank_hit
    // vblank::@return
    // }
    // [11] return  - exit interrupt(HARDWARE_STACK)
    pla
    tay
    pla
    tax
    pla
    rti
}
  // main
main: {
    .label __9 = $23
    .label __10 = $23
    .label __11 = $23
    .label __20 = $14
    .label __23 = $1a
    .label __25 = $18
    .label __26 = $1c
    .label __31 = $1f
    .label __32 = $21
    .label __33 = $12
    .label __36 = $25
    .label __38 = $10
    .label __44 = $12
    .label __55 = $27
    .label __56 = $25
    .label __58 = $10
    .label __63 = $14
    .label __69 = $18
    .label __71 = $16
    .label __73 = $12
    .label __76 = $1d
    .label __78 = $1f
    .label i = 2
    .label timer_2 = 4
    .label h_bar = $f
    .label active_balls = 5
    .label sprite_idx = $a
    .label i_1 = 8
    .label timer = 7
    // main::initNES1
    // asm
    // asm { cld ldx#$ff txs  }
    cld
    ldx #$ff
    txs
    // main::initNES1_disableVideoOutput1
    // PPU->PPUCTRL = 0
    // [14] *((byte*)PPU) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU
    // PPU->PPUMASK = 0
    // [15] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = 0 -- _deref_pbuc1=vbuc2 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // main::initNES1_disableAudioOutput1
    // *FR_COUNTER = 0b01000000
    // [16] *FR_COUNTER = $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta FR_COUNTER
    // APU->DMC_FREQ  = 0b01000000
    // [17] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) = $40 -- _deref_pbuc1=vbuc2 
    sta APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
    // main::initNES1_clearVBlankFlag1
    // asm
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [19] phi from main::initNES1_clearVBlankFlag1 to main::initNES1_waitForVBlank1 [phi:main::initNES1_clearVBlankFlag1->main::initNES1_waitForVBlank1]
    // main::initNES1_waitForVBlank1
  initNES1_waitForVBlank1:
    // main::initNES1_waitForVBlank1_@1
    // PPU->PPUSTATUS&0x80
    // [20] main::initNES1_waitForVBlank1_$0 = *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // while(!(PPU->PPUSTATUS&0x80))
    // [21] if(0==main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank1
    // [22] phi from main::initNES1_waitForVBlank1_@1 to main::initNES1_@1 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1]
    // [22] phi main::initNES1_i#2 = 0 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [22] phi from main::initNES1_@1 to main::initNES1_@1 [phi:main::initNES1_@1->main::initNES1_@1]
    // [22] phi main::initNES1_i#2 = main::initNES1_i#1 [phi:main::initNES1_@1->main::initNES1_@1#0] -- register_copy 
    // main::initNES1_@1
  initNES1___b1:
    // (MEMORY+0x000)[i] = 0
    // [23] MEMORY[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY,x
    // (MEMORY+0x100)[i] = 0
    // [24] (MEMORY+$100)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$100,x
    // (MEMORY+0x200)[i] = 0
    // [25] (MEMORY+$200)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$200,x
    // (MEMORY+0x300)[i] = 0
    // [26] (MEMORY+$300)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$300,x
    // (MEMORY+0x400)[i] = 0
    // [27] (MEMORY+$400)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$400,x
    // (MEMORY+0x500)[i] = 0
    // [28] (MEMORY+$500)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$500,x
    // (MEMORY+0x600)[i] = 0
    // [29] (MEMORY+$600)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$600,x
    // (MEMORY+0x700)[i] = 0
    // [30] (MEMORY+$700)[main::initNES1_i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$700,x
    // while (++i)
    // [31] main::initNES1_i#1 = ++ main::initNES1_i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [32] if(0!=main::initNES1_i#1) goto main::initNES1_@1 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne initNES1___b1
    // [33] phi from main::initNES1_@1 to main::initNES1_waitForVBlank2 [phi:main::initNES1_@1->main::initNES1_waitForVBlank2]
    // main::initNES1_waitForVBlank2
  initNES1_waitForVBlank2:
    // main::initNES1_waitForVBlank2_@1
    // PPU->PPUSTATUS&0x80
    // [34] main::initNES1_waitForVBlank2_$0 = *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // while(!(PPU->PPUSTATUS&0x80))
    // [35] if(0==main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank2
    // main::initNES1_@7
    // asm
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [37] phi from main::initNES1_@7 to main::@17 [phi:main::initNES1_@7->main::@17]
    // main::@17
    // ppuDataTransfer(PPU_PALETTE, palette, sizeof(palette))
    // [38] call ppuDataTransfer 
  // Transfer the palette
    // [117] phi from main::@17 to ppuDataTransfer [phi:main::@17->ppuDataTransfer]
    // [117] phi ppuDataTransfer::cpuData#2 = (void*)palette [phi:main::@17->ppuDataTransfer#0] -- pvoz1=pvoc1 
    lda #<palette
    sta.z ppuDataTransfer.cpuData
    lda #>palette
    sta.z ppuDataTransfer.cpuData+1
    // [117] phi ppuDataTransfer::ppuDataPrepare1_ppuData#0 = (void*)PPU_PALETTE [phi:main::@17->ppuDataTransfer#1] -- pvoz1=pvoc1 
    lda #<PPU_PALETTE
    sta.z ppuDataTransfer.ppuDataPrepare1_ppuData
    lda #>PPU_PALETTE
    sta.z ppuDataTransfer.ppuDataPrepare1_ppuData+1
    jsr ppuDataTransfer
    // [39] phi from main::@17 to main::@19 [phi:main::@17->main::@19]
    // main::@19
    // ppuDataFill(PPU_NAME_TABLE_0, 0, 32*30)
    // [40] call ppuDataFill 
  // Fill the PPU attribute table
    // [130] phi from main::@19 to ppuDataFill [phi:main::@19->ppuDataFill]
    // [130] phi ppuDataFill::size#3 = (word)$20*$1e [phi:main::@19->ppuDataFill#0] -- vwuz1=vwuc1 
    lda #<$20*$1e
    sta.z ppuDataFill.size
    lda #>$20*$1e
    sta.z ppuDataFill.size+1
    // [130] phi ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)PPU_NAME_TABLE_0 [phi:main::@19->ppuDataFill#1] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [41] phi from main::@19 to main::@20 [phi:main::@19->main::@20]
    // main::@20
    // ppuDataFill(PPU_ATTRIBUTE_TABLE_0, 0, 0x40)
    // [42] call ppuDataFill 
    // [130] phi from main::@20 to ppuDataFill [phi:main::@20->ppuDataFill]
    // [130] phi ppuDataFill::size#3 = $40 [phi:main::@20->ppuDataFill#0] -- vwuz1=vbuc1 
    lda #<$40
    sta.z ppuDataFill.size
    lda #>$40
    sta.z ppuDataFill.size+1
    // [130] phi ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)PPU_ATTRIBUTE_TABLE_0 [phi:main::@20->ppuDataFill#1] -- pvoz1=pvoc1 
    lda #<PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [43] phi from main::@20 to main::@21 [phi:main::@20->main::@21]
    // main::@21
    // ppuDataTransfer(0x2040, h_bar_tilemap, sizeof(h_bar_tilemap))
    // [44] call ppuDataTransfer 
    // [117] phi from main::@21 to ppuDataTransfer [phi:main::@21->ppuDataTransfer]
    // [117] phi ppuDataTransfer::cpuData#2 = (void*)h_bar_tilemap [phi:main::@21->ppuDataTransfer#0] -- pvoz1=pvoc1 
    lda #<h_bar_tilemap
    sta.z ppuDataTransfer.cpuData
    lda #>h_bar_tilemap
    sta.z ppuDataTransfer.cpuData+1
    // [117] phi ppuDataTransfer::ppuDataPrepare1_ppuData#0 = (void*) 8256 [phi:main::@21->ppuDataTransfer#1] -- pvoz1=pvoc1 
    lda #<$2040
    sta.z ppuDataTransfer.ppuDataPrepare1_ppuData
    lda #>$2040
    sta.z ppuDataTransfer.ppuDataPrepare1_ppuData+1
    jsr ppuDataTransfer
    // main::enableVideoOutput1
    // PPU->PPUCTRL = 0b10000000
    // [45] *((byte*)PPU) = $80 -- _deref_pbuc1=vbuc2 
    lda #$80
    sta PPU
    // PPU->PPUMASK = 0b00011110
    // [46] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = $1e -- _deref_pbuc1=vbuc2 
    lda #$1e
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // main::@18
    // PPU->PPUCTRL = 0b10001000
    // [47] *((byte*)PPU) = $88 -- _deref_pbuc1=vbuc2 
    // Enable vertical blank interrupt, select sprite pattern table 1
    lda #$88
    sta PPU
    // [48] phi from main::@18 to main::@1 [phi:main::@18->main::@1]
    // [48] phi rand_state#17 = 1 [phi:main::@18->main::@1#0] -- vwuz1=vwuc1 
    lda #<1
    sta.z rand_state
    lda #>1
    sta.z rand_state+1
    // [48] phi main::i#14 = 0 [phi:main::@18->main::@1#1] -- vwuz1=vbuc1 
    sta.z i
    sta.z i+1
    // main::@1
  __b1:
    // for (i = 0; i < MAX_BALLS; i++)
    // [49] if(main::i#14<$32) goto main::@2 -- vwuz1_lt_vbuc1_then_la1 
    lda.z i+1
    bne !+
    lda.z i
    cmp #$32
    bcs !__b2+
    jmp __b2
  !__b2:
  !:
    // [50] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // [50] phi main::timer#3 = 0 [phi:main::@1->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z timer
    // [50] phi main::active_balls#2 = 0 [phi:main::@1->main::@3#1] -- vwuz1=vwuc1 
    sta.z active_balls
    sta.z active_balls+1
    // [50] phi main::timer_2#2 = 0 [phi:main::@1->main::@3#2] -- vbuz1=vbuc1 
    sta.z timer_2
    // main::@3
    // main::@4
  __b4:
    // timer_2++;
    // [51] main::timer_2#1 = ++ main::timer_2#2 -- vbuz1=_inc_vbuz1 
    inc.z timer_2
    // h_bar = sine_table[timer_2] + 0x60
    // [52] main::h_bar#1 = sine_table[main::timer_2#1] + $60 -- vbuz1=pbuc1_derefidx_vbuz2_plus_vbuc2 
    lda #$60
    ldy.z timer_2
    clc
    adc sine_table,y
    sta.z h_bar
    // h_bar ^ 0xFF
    // [53] main::$14 = main::h_bar#1 ^ $ff -- vbuaa=vbuz1_bxor_vbuc1 
    lda #$ff
    eor.z h_bar
    // scroll_y = h_bar ^ 0xFF
    // [54] scroll_y = main::$14 -- vbuz1=vbuaa 
    sta.z scroll_y
    // if (active_balls < MAX_BALLS)
    // [55] if(main::active_balls#2>=$32) goto main::@5 -- vwuz1_ge_vbuc1_then_la1 
    lda.z active_balls+1
    bne __b5
    lda.z active_balls
    cmp #$32
    bcs __b5
  !:
    // main::@15
    // if (timer++ == RELEASE_TIMER)
    // [56] main::timer#1 = ++ main::timer#3 -- vbuxx=_inc_vbuz1 
    ldx.z timer
    inx
    // [57] if(main::timer#3!=9) goto main::@25 -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp.z timer
    beq !__b25+
    jmp __b25
  !__b25:
    // main::@16
    // active_balls++;
    // [58] main::active_balls#1 = ++ main::active_balls#2 -- vwuz1=_inc_vwuz1 
    inc.z active_balls
    bne !+
    inc.z active_balls+1
  !:
    // balls[active_balls].x_position = 0
    // [59] main::$38 = main::active_balls#1 << 3 -- vwuz1=vwuz2_rol_3 
    lda.z active_balls
    asl
    sta.z __38
    lda.z active_balls+1
    rol
    sta.z __38+1
    asl.z __38
    rol.z __38+1
    asl.z __38
    rol.z __38+1
    // [60] main::$58 = (word*)balls + main::$38 -- pwuz1=pwuc1_plus_vwuz1 
    clc
    lda.z __58
    adc #<balls
    sta.z __58
    lda.z __58+1
    adc #>balls
    sta.z __58+1
    // [61] *main::$58 = 0 -- _deref_pwuz1=vbuc1 
    lda #0
    tay
    sta (__58),y
    tya
    iny
    sta (__58),y
    // balls[active_balls].y_position = 0
    // [62] main::$58[2] = 0 -- pwuz1_derefidx_vbuc1=vbuc2 
    ldy #2
    sta (__58),y
    iny
    sta (__58),y
    // [63] phi from main::@16 to main::@5 [phi:main::@16->main::@5]
    // [63] phi main::timer#15 = 0 [phi:main::@16->main::@5#0] -- vbuz1=vbuc1 
    sta.z timer
    // [63] phi main::active_balls#8 = main::active_balls#1 [phi:main::@16->main::@5#1] -- register_copy 
    // [63] phi from main::@25 main::@4 to main::@5 [phi:main::@25/main::@4->main::@5]
    // [63] phi main::timer#15 = main::timer#21 [phi:main::@25/main::@4->main::@5#0] -- register_copy 
    // [63] phi main::active_balls#8 = main::active_balls#2 [phi:main::@25/main::@4->main::@5#1] -- register_copy 
    // main::@5
  __b5:
    // [64] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // [64] phi main::sprite_idx#3 = 0 [phi:main::@5->main::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta.z sprite_idx
    // [64] phi main::i#10 = 0 [phi:main::@5->main::@6#1] -- vwuz1=vbuc1 
    sta.z i_1
    sta.z i_1+1
    // main::@6
  __b6:
    // for (i = 0; i < active_balls; i++)
    // [65] if(main::i#10<main::active_balls#8) goto main::@7 -- vwuz1_lt_vwuz2_then_la1 
    lda.z i_1+1
    cmp.z active_balls+1
    bcc __b7
    bne !+
    lda.z i_1
    cmp.z active_balls
    bcc __b7
  !:
    // main::@8
    // poke(0x2001) = 0x98
    // [66] *((byte*) 8193) = $98 -- _deref_pbuc1=vbuc2 
    lda #$98
    sta $2001
    // main::@13
  __b13:
    // while (!vblank_hit)
    // [67] if(0==vblank_hit) goto main::@13 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z vblank_hit
    beq __b13
    // main::@14
    // vblank_hit = 0
    // [68] vblank_hit = 0 -- vbuz1=vbuc1 
    // wait for vblank
    sta.z vblank_hit
    // poke(0x2001) = 0x18
    // [69] *((byte*) 8193) = $18 -- _deref_pbuc1=vbuc2 
    lda #$18
    sta $2001
    // [50] phi from main::@14 to main::@3 [phi:main::@14->main::@3]
    // [50] phi main::timer#3 = main::timer#15 [phi:main::@14->main::@3#0] -- register_copy 
    // [50] phi main::active_balls#2 = main::active_balls#8 [phi:main::@14->main::@3#1] -- register_copy 
    // [50] phi main::timer_2#2 = main::timer_2#1 [phi:main::@14->main::@3#2] -- register_copy 
    jmp __b4
    // main::@7
  __b7:
    // balls[i].x_position += balls[i].x_velocity
    // [70] main::$44 = main::i#10 << 3 -- vwuz1=vwuz2_rol_3 
    lda.z i_1
    asl
    sta.z __44
    lda.z i_1+1
    rol
    sta.z __44+1
    asl.z __44
    rol.z __44+1
    asl.z __44
    rol.z __44+1
    // [71] main::$63 = (word*)balls + main::$44 -- pwuz1=pwuc1_plus_vwuz2 
    lda.z __44
    clc
    adc #<balls
    sta.z __63
    lda.z __44+1
    adc #>balls
    sta.z __63+1
    // [72] *main::$63 = *main::$63 + main::$63[4] -- _deref_pwuz1=_deref_pwuz1_plus_pwuz1_derefidx_vbuc1 
    ldy #4
    sty.z $ff
    clc
    lda (__63),y
    ldy #0
    adc (__63),y
    sta (__63),y
    ldy.z $ff
    iny
    lda (__63),y
    ldy #1
    adc (__63),y
    sta (__63),y
    // balls[i].y_velocity += WEIGHT
    // [73] main::$63[6] = main::$63[6] + $10 -- pwuz1_derefidx_vbuc1=pwuz1_derefidx_vbuc1_plus_vbuc2 
    lda #$10
    ldy #6
    clc
    adc (__63),y
    sta (__63),y
    iny
    lda #0
    adc (__63),y
    sta (__63),y
    // balls[i].y_position += (balls[i].y_velocity += WEIGHT)
    // [74] main::$63[2] = main::$63[2] + main::$63[6] -- pwuz1_derefidx_vbuc1=pwuz1_derefidx_vbuc1_plus_pwuz1_derefidx_vbuc2 
    ldy #6
    clc
    lda (__63),y
    ldy #2
    adc (__63),y
    sta (__63),y
    ldy #6+1
    lda (__63),y
    ldy #2+1
    adc (__63),y
    sta (__63),y
    // balls[i].x_position >> 8
    // [75] main::$20 = *main::$63 >> 8 -- vwuz1=_deref_pwuz1_ror_8 
    ldy #1
    lda (__20),y
    sta.z __20
    dey
    sty.z __20+1
    // if ((balls[i].x_position >> 8) < 8)
    // [76] if(main::$20>=8) goto main::@9 -- vwuz1_ge_vbuc1_then_la1 
    tya
    bne __b9
    lda.z __20
    cmp #8
    bcs __b9
  !:
    // main::@11
    // balls[i].x_velocity ^= 0xFFFF
    // [77] main::$71 = (word*)balls + main::$44 -- pwuz1=pwuc1_plus_vwuz2 
    lda.z __44
    clc
    adc #<balls
    sta.z __71
    lda.z __44+1
    adc #>balls
    sta.z __71+1
    // [78] main::$71[4] = main::$71[4] ^ $ffff -- pwuz1_derefidx_vbuc1=pwuz1_derefidx_vbuc1_bxor_vwuc2 
    ldy #4
    lda #<$ffff
    eor (__71),y
    sta (__71),y
    iny
    lda #>$ffff
    eor (__71),y
    sta (__71),y
    // main::@9
  __b9:
    // balls[i].y_position >> 8
    // [79] main::$69 = (word*)balls + main::$44 -- pwuz1=pwuc1_plus_vwuz2 
    lda.z __44
    clc
    adc #<balls
    sta.z __69
    lda.z __44+1
    adc #>balls
    sta.z __69+1
    // [80] main::$23 = main::$69[2] >> 8 -- vwuz1=pwuz2_derefidx_vbuc1_ror_8 
    ldy #2
    lda #0
    sta.z __23+1
    iny
    lda (__69),y
    sta.z __23
    // [81] main::$25 = main::$69[2] >> 8 -- vwuz1=pwuz1_derefidx_vbuc1_ror_8 
    ldy #2
    iny
    lda (__25),y
    sta.z __25
    lda #0
    sta.z __25+1
    // h_bar + 8
    // [82] main::$26 = main::h_bar#1 + 8 -- vbuz1=vbuz2_plus_vbuc1 
    lax.z h_bar
    axs #-[8]
    stx.z __26
    // if (((balls[i].y_position >> 8) >= h_bar) && (balls[i].y_position >> 8) < h_bar + 8)
    // [83] if(main::$23<main::h_bar#1) goto main::@10 -- vwuz1_lt_vbuz2_then_la1 
    lda.z __23+1
    bne !+
    lda.z __23
    cmp.z h_bar
    bcc __b10
  !:
    // main::@24
    // [84] if(main::$25>=main::$26) goto main::@10 -- vwuz1_ge_vbuz2_then_la1 
    lda.z __25+1
    bne __b10
    lda.z __25
    cmp.z __26
    bcs __b10
  !:
    // main::@12
    // balls[i].y_velocity ^= 0xFFFF
    // [85] main::$76 = (word*)balls + main::$44 -- pwuz1=pwuc1_plus_vwuz2 
    lda.z __44
    clc
    adc #<balls
    sta.z __76
    lda.z __44+1
    adc #>balls
    sta.z __76+1
    // [86] main::$76[6] = main::$76[6] ^ $ffff -- pwuz1_derefidx_vbuc1=pwuz1_derefidx_vbuc1_bxor_vwuc2 
    ldy #6
    lda #<$ffff
    eor (__76),y
    sta (__76),y
    iny
    lda #>$ffff
    eor (__76),y
    sta (__76),y
    // h_bar - 2
    // [87] main::$30 = main::h_bar#1 - 2 -- vbuaa=vbuz1_minus_2 
    lda.z h_bar
    sec
    sbc #2
    // (unsigned short)(h_bar - 2) << 8
    // [88] main::$78 = (word)main::$30 -- vwuz1=_word_vbuaa 
    sta.z __78
    lda #0
    sta.z __78+1
    // [89] main::$31 = main::$78 << 8 -- vwuz1=vwuz1_rol_8 
    lda.z __31
    sta.z __31+1
    lda #0
    sta.z __31
    // balls[i].y_position = ((unsigned short)(h_bar - 2) << 8)
    // [90] main::$76[2] = main::$31 -- pwuz1_derefidx_vbuc1=vwuz2 
    ldy #2
    sta (__76),y
    iny
    lda.z __31+1
    sta (__76),y
    // main::@10
  __b10:
    // balls[i].y_position >> 8
    // [91] main::$73 = (word*)balls + main::$44 -- pwuz1=pwuc1_plus_vwuz1 
    clc
    lda.z __73
    adc #<balls
    sta.z __73
    lda.z __73+1
    adc #>balls
    sta.z __73+1
    // [92] main::$32 = main::$73[2] >> 8 -- vwuz1=pwuz2_derefidx_vbuc1_ror_8 
    ldy #2
    lda #0
    sta.z __32+1
    iny
    lda (__73),y
    sta.z __32
    // SPRITE_BUFFER[sprite_idx].y = (unsigned char) (balls[i].y_position >> 8)
    // [93] main::$48 = main::sprite_idx#3 << 2 -- vbuxx=vbuz1_rol_2 
    lda.z sprite_idx
    asl
    asl
    tax
    // [94] ((byte*)SPRITE_BUFFER)[main::$48] = (byte)main::$32 -- pbuc1_derefidx_vbuxx=_byte_vwuz1 
    lda.z __32
    sta SPRITE_BUFFER,x
    // SPRITE_BUFFER[sprite_idx].tile = 0x0a
    // [95] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_TILE)[main::$48] = $a -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$a
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_TILE,x
    // SPRITE_BUFFER[sprite_idx].attributes = 3
    // [96] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES)[main::$48] = 3 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #3
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES,x
    // balls[i].x_position >> 8
    // [97] main::$33 = *main::$73 >> 8 -- vwuz1=_deref_pwuz1_ror_8 
    ldy #1
    lda (__33),y
    sta.z __33
    dey
    sty.z __33+1
    // SPRITE_BUFFER[sprite_idx].x = (unsigned char) (balls[i].x_position >> 8)
    // [98] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X)[main::$48] = (byte)main::$33 -- pbuc1_derefidx_vbuxx=_byte_vwuz1 
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X,x
    // sprite_idx++;
    // [99] main::sprite_idx#2 = ++ main::sprite_idx#3 -- vbuz1=_inc_vbuz1 
    inc.z sprite_idx
    // for (i = 0; i < active_balls; i++)
    // [100] main::i#4 = ++ main::i#10 -- vwuz1=_inc_vwuz1 
    inc.z i_1
    bne !+
    inc.z i_1+1
  !:
    // [64] phi from main::@10 to main::@6 [phi:main::@10->main::@6]
    // [64] phi main::sprite_idx#3 = main::sprite_idx#2 [phi:main::@10->main::@6#0] -- register_copy 
    // [64] phi main::i#10 = main::i#4 [phi:main::@10->main::@6#1] -- register_copy 
    jmp __b6
    // main::@25
  __b25:
    // [101] main::timer#21 = main::timer#1 -- vbuz1=vbuxx 
    stx.z timer
    jmp __b5
    // [102] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
  __b2:
    // rand()
    // [103] call rand 
    // [140] phi from main::@2 to rand [phi:main::@2->rand]
    // [140] phi rand_state#10 = rand_state#17 [phi:main::@2->rand#0] -- register_copy 
    jsr rand
    // rand()
    // [104] rand::return#2 = rand::return#0
    // main::@22
    // [105] main::$9 = rand::return#2
    // rand() & 0x3FF
    // [106] main::$10 = main::$9 & $3ff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __10
    and #<$3ff
    sta.z __10
    lda.z __10+1
    and #>$3ff
    sta.z __10+1
    // balls[i].x_velocity = rand() & 0x3FF
    // [107] main::$36 = main::i#14 << 3 -- vwuz1=vwuz2_rol_3 
    lda.z i
    asl
    sta.z __36
    lda.z i+1
    rol
    sta.z __36+1
    asl.z __36
    rol.z __36+1
    asl.z __36
    rol.z __36+1
    // [108] main::$55 = (word*)balls + main::$36 -- pwuz1=pwuc1_plus_vwuz2 
    lda.z __36
    clc
    adc #<balls
    sta.z __55
    lda.z __36+1
    adc #>balls
    sta.z __55+1
    // [109] main::$55[4] = main::$10 -- pwuz1_derefidx_vbuc1=vwuz2 
    ldy #4
    lda.z __10
    sta (__55),y
    iny
    lda.z __10+1
    sta (__55),y
    // rand()
    // [110] call rand 
    // [140] phi from main::@22 to rand [phi:main::@22->rand]
    // [140] phi rand_state#10 = rand_state#11 [phi:main::@22->rand#0] -- register_copy 
    jsr rand
    // rand()
    // [111] rand::return#3 = rand::return#0
    // main::@23
    // [112] main::$11 = rand::return#3
    // rand() & 0x0FF
    // [113] main::$12 = main::$11 & $ff -- vbuxx=vwuz1_band_vbuc1 
    lda #$ff
    and.z __11
    tax
    // balls[i].y_velocity = rand() & 0x0FF
    // [114] main::$56 = (word*)balls + main::$36 -- pwuz1=pwuc1_plus_vwuz1 
    clc
    lda.z __56
    adc #<balls
    sta.z __56
    lda.z __56+1
    adc #>balls
    sta.z __56+1
    // [115] main::$56[6] = main::$12 -- pwuz1_derefidx_vbuc1=vbuxx 
    txa
    ldy #6
    sta (__56),y
    lda #0
    iny
    sta (__56),y
    // for (i = 0; i < MAX_BALLS; i++)
    // [116] main::i#2 = ++ main::i#14 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [48] phi from main::@23 to main::@1 [phi:main::@23->main::@1]
    // [48] phi rand_state#17 = rand_state#11 [phi:main::@23->main::@1#0] -- register_copy 
    // [48] phi main::i#14 = main::i#2 [phi:main::@23->main::@1#1] -- register_copy 
    jmp __b1
}
  // ppuDataTransfer
// Transfer a number of bytes from the CPU memory to the PPU memory
// - ppuData : Pointer in the PPU memory
// - cpuData : Pointer to the CPU memory (RAM of ROM)
// - size : The number of bytes to transfer
// ppuDataTransfer(void* zp($12) cpuData)
ppuDataTransfer: {
    .label ppuDataPrepare1_ppuData = $10
    .label cpuSrc = $12
    .label i = $14
    .label cpuData = $12
    // ppuDataTransfer::ppuDataPrepare1
    // >ppuData
    // [118] ppuDataTransfer::ppuDataPrepare1_$0 = > ppuDataTransfer::ppuDataPrepare1_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare1_ppuData+1
    // PPU->PPUADDR = >ppuData
    // [119] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataTransfer::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // <ppuData
    // [120] ppuDataTransfer::ppuDataPrepare1_$1 = < ppuDataTransfer::ppuDataPrepare1_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare1_ppuData
    // PPU->PPUADDR = <ppuData
    // [121] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataTransfer::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // ppuDataTransfer::@3
    // [122] ppuDataTransfer::cpuSrc#6 = (byte*)ppuDataTransfer::cpuData#2
    // [123] phi from ppuDataTransfer::@3 to ppuDataTransfer::@1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1]
    // [123] phi ppuDataTransfer::cpuSrc#2 = ppuDataTransfer::cpuSrc#6 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#0] -- register_copy 
    // [123] phi ppuDataTransfer::i#2 = 0 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
    // ppuDataTransfer::@1
  __b1:
    // for(unsigned int i=0;i<size;i++)
    // [124] if(ppuDataTransfer::i#2<$20*SIZEOF_BYTE) goto ppuDataTransfer::@2 -- vwuz1_lt_vbuc1_then_la1 
    lda.z i+1
    bne !+
    lda.z i
    cmp #$20*SIZEOF_BYTE
    bcc __b2
  !:
    // ppuDataTransfer::@return
    // }
    // [125] return 
    rts
    // ppuDataTransfer::@2
  __b2:
    // ppuDataPut(*cpuSrc++)
    // [126] ppuDataTransfer::ppuDataPut1_val#0 = *ppuDataTransfer::cpuSrc#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (cpuSrc),y
    // ppuDataTransfer::ppuDataPut1
    // PPU->PPUDATA = val
    // [127] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataTransfer::ppuDataPut1_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataTransfer::@4
    // ppuDataPut(*cpuSrc++);
    // [128] ppuDataTransfer::cpuSrc#1 = ++ ppuDataTransfer::cpuSrc#2 -- pbuz1=_inc_pbuz1 
    inc.z cpuSrc
    bne !+
    inc.z cpuSrc+1
  !:
    // for(unsigned int i=0;i<size;i++)
    // [129] ppuDataTransfer::i#1 = ++ ppuDataTransfer::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [123] phi from ppuDataTransfer::@4 to ppuDataTransfer::@1 [phi:ppuDataTransfer::@4->ppuDataTransfer::@1]
    // [123] phi ppuDataTransfer::cpuSrc#2 = ppuDataTransfer::cpuSrc#1 [phi:ppuDataTransfer::@4->ppuDataTransfer::@1#0] -- register_copy 
    // [123] phi ppuDataTransfer::i#2 = ppuDataTransfer::i#1 [phi:ppuDataTransfer::@4->ppuDataTransfer::@1#1] -- register_copy 
    jmp __b1
}
  // ppuDataFill
// Fill a number of bytes in the PPU memory
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
// ppuDataFill(word zp($12) size)
ppuDataFill: {
    .label ppuDataPrepare1_ppuData = $10
    .label i = $14
    .label size = $12
    // ppuDataFill::ppuDataPrepare1
    // >ppuData
    // [131] ppuDataFill::ppuDataPrepare1_$0 = > ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare1_ppuData+1
    // PPU->PPUADDR = >ppuData
    // [132] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataFill::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // <ppuData
    // [133] ppuDataFill::ppuDataPrepare1_$1 = < ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare1_ppuData
    // PPU->PPUADDR = <ppuData
    // [134] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataFill::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [135] phi from ppuDataFill::ppuDataPrepare1 to ppuDataFill::@1 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1]
    // [135] phi ppuDataFill::i#2 = 0 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
  // Transfer to PPU
    // ppuDataFill::@1
  __b1:
    // for(unsigned int i=0;i<size;i++)
    // [136] if(ppuDataFill::i#2<ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 -- vwuz1_lt_vwuz2_then_la1 
    lda.z i+1
    cmp.z size+1
    bcc ppuDataPut1
    bne !+
    lda.z i
    cmp.z size
    bcc ppuDataPut1
  !:
    // ppuDataFill::@return
    // }
    // [137] return 
    rts
    // ppuDataFill::ppuDataPut1
  ppuDataPut1:
    // PPU->PPUDATA = val
    // [138] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataFill::@2
    // for(unsigned int i=0;i<size;i++)
    // [139] ppuDataFill::i#1 = ++ ppuDataFill::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [135] phi from ppuDataFill::@2 to ppuDataFill::@1 [phi:ppuDataFill::@2->ppuDataFill::@1]
    // [135] phi ppuDataFill::i#2 = ppuDataFill::i#1 [phi:ppuDataFill::@2->ppuDataFill::@1#0] -- register_copy 
    jmp __b1
}
  // rand
// Returns a pseudo-random number in the range of 0 to RAND_MAX (65535)
// Uses an xorshift pseudorandom number generator that hits all different values
// Information https://en.wikipedia.org/wiki/Xorshift
// Source http://www.retroprogramming.com/2017/07/xorshift-pseudorandom-numbers-in-z80.html
rand: {
    .label __0 = $29
    .label __1 = $2b
    .label __2 = $2d
    .label return = $23
    // rand_state << 7
    // [141] rand::$0 = rand_state#10 << 7 -- vwuz1=vwuz2_rol_7 
    lda.z rand_state+1
    lsr
    lda.z rand_state
    ror
    sta.z __0+1
    lda #0
    ror
    sta.z __0
    // rand_state ^= rand_state << 7
    // [142] rand_state#0 = rand_state#10 ^ rand::$0 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z rand_state
    eor.z __0
    sta.z rand_state
    lda.z rand_state+1
    eor.z __0+1
    sta.z rand_state+1
    // rand_state >> 9
    // [143] rand::$1 = rand_state#0 >> 9 -- vwuz1=vwuz2_ror_9 
    lsr
    sta.z __1
    lda #0
    sta.z __1+1
    // rand_state ^= rand_state >> 9
    // [144] rand_state#1 = rand_state#0 ^ rand::$1 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z rand_state
    eor.z __1
    sta.z rand_state
    lda.z rand_state+1
    eor.z __1+1
    sta.z rand_state+1
    // rand_state << 8
    // [145] rand::$2 = rand_state#1 << 8 -- vwuz1=vwuz2_rol_8 
    lda.z rand_state
    sta.z __2+1
    lda #0
    sta.z __2
    // rand_state ^= rand_state << 8
    // [146] rand_state#11 = rand_state#1 ^ rand::$2 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z rand_state
    eor.z __2
    sta.z rand_state
    lda.z rand_state+1
    eor.z __2+1
    sta.z rand_state+1
    // return rand_state;
    // [147] rand::return#0 = rand_state#11 -- vwuz1=vwuz2 
    lda.z rand_state
    sta.z return
    lda.z rand_state+1
    sta.z return+1
    // rand::@return
    // }
    // [148] return 
    rts
}
  // File Data
.segment GameRam
  // Moving balls (in GameRAM)
  balls: .fill 8*$40, 0
.segment Data
  sine_table: .byte $40, $42, $43, $45, $46, $48, $49, $4b, $4c, $4e, $50, $51, $53, $54, $56, $57, $58, $5a, $5b, $5d, $5e, $60, $61, $62, $64, $65, $66, $67, $69, $6a, $6b, $6c, $6d, $6e, $6f, $70, $71, $72, $73, $74, $75, $76, $77, $78, $78, $79, $7a, $7b, $7b, $7c, $7c, $7d, $7d, $7e, $7e, $7e, $7f, $7f, $7f, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $7f, $7f, $7f, $7e, $7e, $7e, $7d, $7d, $7c, $7c, $7b, $7b, $7a, $79, $78, $78, $77, $76, $75, $74, $73, $72, $71, $70, $6f, $6e, $6d, $6c, $6b, $6a, $69, $67, $66, $65, $64, $62, $61, $60, $5e, $5d, $5b, $5a, $58, $57, $56, $54, $53, $51, $50, $4e, $4c, $4b, $49, $48, $46, $45, $43, $42, $40, $3e, $3d, $3b, $3a, $38, $37, $35, $34, $32, $30, $2f, $2d, $2c, $2a, $29, $28, $26, $25, $23, $22, $20, $1f, $1e, $1c, $1b, $1a, $19, $17, $16, $15, $14, $13, $12, $11, $10, $f, $e, $d, $c, $b, $a, 9, 8, 8, 7, 6, 5, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 8, 9, $a, $b, $c, $d, $e, $f, $10, $11, $12, $13, $14, $15, $16, $17, $19, $1a, $1b, $1c, $1e, $1f, $20, $22, $23, $25, $26, $28, $29, $2a, $2c, $2d, $2f, $30, $32, $34, $35, $37, $38, $3a, $3b, $3d, $3e
  palette: .byte $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4
  h_bar_tilemap: .byte 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
.segment Tiles
TILES:
.import binary "lazydata.chr"

.segment GameRam
  .align $100
  SPRITE_BUFFER: .fill 4*$100, 0
.segment Vectors
  VECTORS: .word vblank, main, 0

