Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  idx#5 = phi( __start::@1/idx#9 )
  asm { sei  }
  SCREEN[idx#5] = 'x'
  idx#0 = ++ idx#5
  asm { cli  }
  to:main::@return
main::@return: scope:[main]  from main
  idx#6 = phi( main/idx#0 )
  idx#1 = idx#6
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  idx#2 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  idx#9 = phi( __start::__init1/idx#2 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  idx#7 = phi( __start::@1/idx#1 )
  idx#3 = idx#7
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  idx#8 = phi( __start::@2/idx#3 )
  idx#4 = idx#8
  return 
  to:@return

SYMBOL TABLE SSA
const byte* SCREEN = (byte*)$400
void __start()
label __start::@1
label __start::@2
label __start::@return
label __start::__init1
byte idx
byte idx#0
byte idx#1
byte idx#2
byte idx#3
byte idx#4
byte idx#5
byte idx#6
byte idx#7
byte idx#8
byte idx#9
void main()
label main::@return

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias idx#0 = idx#6 idx#1 
Alias idx#2 = idx#9 
Alias idx#3 = idx#7 idx#8 idx#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values idx#5 idx#2
Identical Phi Values idx#3 idx#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant idx#2 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [2] SCREEN[idx#2] = 'x'
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable idx#0 and assignment [2] idx#0 = ++ idx#2
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant idx#2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  asm { sei  }
  [1] *SCREEN = 'x'
  asm { cli  }
  to:main::@return
main::@return: scope:[main]  from main
  [3] return 
  to:@return


VARIABLE REGISTER WEIGHTS
byte idx
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] *SCREEN = 'x' [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 19 combination 
Uplifting [] best 19 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test the preprocessor
// Macro generating inline ASM
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // asm { sei  }
    sei
    // [1] *SCREEN = 'x' -- _deref_pbuc1=vbuc2 
    lda #'x'
    sta SCREEN
    // asm { cli  }
    cli
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const byte* SCREEN = (byte*) 1024
byte idx
void main()
label main::@return



FINAL ASSEMBLER
Score: 16

  // File Comments
// Test the preprocessor
// Macro generating inline ASM
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // SEI
    // asm { sei  }
    sei
    // SCREEN[idx++] = 'x'
    // [1] *SCREEN = 'x' -- _deref_pbuc1=vbuc2 
    lda #'x'
    sta SCREEN
    // CLI
    // asm { cli  }
    cli
    // main::@return
    // }
    // [3] return 
    rts
}
  // File Data

