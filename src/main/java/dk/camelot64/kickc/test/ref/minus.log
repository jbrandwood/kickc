byte[16] p = $1100;
byte i = 5;
do {
    p[i] = 2+i+2;
    i = i+1;
} while(i<10)

PROGRAM
  (byte[16]) p ← (word) 4352
  (byte) i ← (byte) 5
@1:
  (byte~) $0 ← (byte) 2 + (byte) i
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((byte[16]) p + (byte) i) ← (byte~) $1
  (byte~) $2 ← (byte) i + (byte) 1
  (byte) i ← (byte~) $2
  (boolean~) $3 ← (byte) i < (byte) 10
  if((boolean~) $3) goto @1

SYMBOLS
(byte~) $0
(byte~) $1
(byte~) $2
(boolean~) $3
(label) @1
(byte) i
(byte[16]) p

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[16]) p ← (word) 4352
  (byte) i ← (byte) 5
  to:@1
@1: scope:[]  from @1 @begin
  (byte~) $0 ← (byte) 2 + (byte) i
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((byte[16]) p + (byte) i) ← (byte~) $1
  (byte~) $2 ← (byte) i + (byte) 1
  (byte) i ← (byte~) $2
  (boolean~) $3 ← (byte) i < (byte) 10
  if((boolean~) $3) goto @1
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

Removing empty block @2
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[16]) p ← (word) 4352
  (byte) i ← (byte) 5
  to:@1
@1: scope:[]  from @1 @begin
  (byte~) $0 ← (byte) 2 + (byte) i
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((byte[16]) p + (byte) i) ← (byte~) $1
  (byte~) $2 ← (byte) i + (byte) 1
  (byte) i ← (byte~) $2
  (boolean~) $3 ← (byte) i < (byte) 10
  if((boolean~) $3) goto @1
  to:@end
@end: scope:[]  from @1

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte[16]) p ← (word) 4352
  (byte) i ← (byte) 5
  to:@1
@1: scope:[]  from @1 @begin
  (byte~) $0 ← (byte) 2 + (byte) i
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((byte[16]) p + (byte) i) ← (byte~) $1
  (byte~) $2 ← (byte) i + (byte) 1
  (byte) i ← (byte~) $2
  (boolean~) $3 ← (byte) i < (byte) 10
  if((boolean~) $3) goto @1
  to:@end
@end: scope:[]  from @1

Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte[16]) p#0 ← (word) 4352
  (byte) i#0 ← (byte) 5
  to:@1
@1: scope:[]  from @1 @begin
  (byte[16]) p#1 ← phi( @1/(byte[16]) p#1 @begin/(byte[16]) p#0 )
  (byte) i#2 ← phi( @1/(byte) i#1 @begin/(byte) i#0 )
  (byte~) $0 ← (byte) 2 + (byte) i#2
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((byte[16]) p#1 + (byte) i#2) ← (byte~) $1
  (byte~) $2 ← (byte) i#2 + (byte) 1
  (byte) i#1 ← (byte~) $2
  (boolean~) $3 ← (byte) i#1 < (byte) 10
  if((boolean~) $3) goto @1
  to:@end
@end: scope:[]  from @1

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte[16]) p#0 ← (word) 4352
  (byte) i#0 ← (byte) 5
  to:@1
@1: scope:[]  from @1 @begin
  (byte[16]) p#1 ← phi( @1/(byte[16]) p#1 @begin/(byte[16]) p#0 )
  (byte) i#2 ← phi( @1/(byte) i#1 @begin/(byte) i#0 )
  (byte~) $0 ← (byte) 2 + (byte) i#2
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((byte[16]) p#1 + (byte) i#2) ← (byte~) $1
  (byte~) $2 ← (byte) i#2 + (byte) 1
  (byte) i#1 ← (byte~) $2
  (boolean~) $3 ← (byte) i#1 < (byte) 10
  if((boolean~) $3) goto @1
  to:@end
@end: scope:[]  from @1

INITIAL SSA SYMBOL TABLE
(byte~) $0
(byte~) $1
(byte~) $2
(boolean~) $3
(label) @1
(label) @begin
(label) @end
(byte) i
(byte) i#0
(byte) i#1
(byte) i#2
(byte[16]) p
(byte[16]) p#0
(byte[16]) p#1

Constant (byte[16]) p#0 (word) 4352
Constant (byte) i#0 (byte) 5
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @1 @begin
  (byte[16]) p#1 ← phi( @1/(byte[16]) p#1 @begin/(word) 4352 )
  (byte) i#2 ← phi( @1/(byte) i#1 @begin/(byte) 5 )
  (byte~) $0 ← (byte) 2 + (byte) i#2
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((byte[16]) p#1 + (byte) i#2) ← (byte~) $1
  (byte~) $2 ← (byte) i#2 + (byte) 1
  (byte) i#1 ← (byte~) $2
  (boolean~) $3 ← (byte) i#1 < (byte) 10
  if((boolean~) $3) goto @1
  to:@end
@end: scope:[]  from @1

Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Consolidated constant in assignment $1
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Succesful SSA optimization Pass2ConstantAdditionElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @1 @begin
  (byte[16]) p#1 ← phi( @1/(byte[16]) p#1 @begin/(word) 4352 )
  (byte) i#2 ← phi( @1/(byte) i#1 @begin/(byte) 5 )
  (byte~) $0 ← (byte) i#2
  (byte~) $1 ← (byte~) $0 + (byte) 4
  *((byte[16]) p#1 + (byte) i#2) ← (byte~) $1
  (byte~) $2 ← (byte) i#2 + (byte) 1
  (byte) i#1 ← (byte~) $2
  (boolean~) $3 ← (byte) i#1 < (byte) 10
  if((boolean~) $3) goto @1
  to:@end
@end: scope:[]  from @1

Alias (byte) i#2 = (byte~) $0 
Alias (byte) i#1 = (byte~) $2 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @1 @begin
  (byte[16]) p#1 ← phi( @1/(byte[16]) p#1 @begin/(word) 4352 )
  (byte) i#2 ← phi( @1/(byte) i#1 @begin/(byte) 5 )
  (byte~) $1 ← (byte) i#2 + (byte) 4
  *((byte[16]) p#1 + (byte) i#2) ← (byte~) $1
  (byte) i#1 ← (byte) i#2 + (byte) 1
  (boolean~) $3 ← (byte) i#1 < (byte) 10
  if((boolean~) $3) goto @1
  to:@end
@end: scope:[]  from @1

Self Phi Eliminated (byte[16]) p#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @1 @begin
  (byte[16]) p#1 ← phi( @begin/(word) 4352 )
  (byte) i#2 ← phi( @1/(byte) i#1 @begin/(byte) 5 )
  (byte~) $1 ← (byte) i#2 + (byte) 4
  *((byte[16]) p#1 + (byte) i#2) ← (byte~) $1
  (byte) i#1 ← (byte) i#2 + (byte) 1
  (boolean~) $3 ← (byte) i#1 < (byte) 10
  if((boolean~) $3) goto @1
  to:@end
@end: scope:[]  from @1

Simple Condition (boolean~) $3 if((byte) i#1<(byte) 10) goto @1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @1 @begin
  (byte[16]) p#1 ← phi( @begin/(word) 4352 )
  (byte) i#2 ← phi( @1/(byte) i#1 @begin/(byte) 5 )
  (byte~) $1 ← (byte) i#2 + (byte) 4
  *((byte[16]) p#1 + (byte) i#2) ← (byte~) $1
  (byte) i#1 ← (byte) i#2 + (byte) 1
  if((byte) i#1<(byte) 10) goto @1
  to:@end
@end: scope:[]  from @1

Constant (byte[16]) p#1 (word) 4352
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @1 @begin
  (byte) i#2 ← phi( @1/(byte) i#1 @begin/(byte) 5 )
  (byte~) $1 ← (byte) i#2 + (byte) 4
  *((word) 4352 + (byte) i#2) ← (byte~) $1
  (byte) i#1 ← (byte) i#2 + (byte) 1
  if((byte) i#1<(byte) 10) goto @1
  to:@end
@end: scope:[]  from @1

Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
FINAL SYMBOL TABLE
(byte~) $1
(label) @1
(label) @begin
(label) @end
(byte) i
(byte) i#1
(byte) i#2
(byte[16]) p

Block Sequence Planned @begin @1 @end 
Added new block during phi lifting @3(between @1 and @1)
Block Sequence Planned @begin @1 @end @3 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @3 @begin
  (byte) i#2 ← phi( @3/(byte~) i#3 @begin/(byte) 5 )
  (byte~) $1 ← (byte) i#2 + (byte) 4
  *((word) 4352 + (byte) i#2) ← (byte~) $1
  (byte) i#1 ← (byte) i#2 + (byte) 1
  if((byte) i#1<(byte) 10) goto @3
  to:@end
@end: scope:[]  from @1
@3: scope:[]  from @1
  (byte~) i#3 ← (byte) i#1
  to:@1

Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @3 @begin
  [0] (byte) i#2 ← phi( @3/(byte~) i#3 @begin/(byte) 5 ) [ i#2 ]
  [1] (byte~) $1 ← (byte) i#2 + (byte) 4 [ i#2 $1 ]
  [2] *((word) 4352 + (byte) i#2) ← (byte~) $1 [ i#2 ]
  [3] (byte) i#1 ← (byte) i#2 + (byte) 1 [ i#1 ]
  [4] if((byte) i#1<(byte) 10) goto @3 [ i#1 ]
  to:@end
@end: scope:[]  from @1
@3: scope:[]  from @1
  [5] (byte~) i#3 ← (byte) i#1 [ i#3 ]
  to:@1

Created 1 initial phi equivalence classes
Coalesced [5] i#3 ← i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @3
Block Sequence Planned @begin @1 @end 
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @1 @begin
  [0] (byte) i#2 ← phi( @1/(byte) i#1 @begin/(byte) 5 ) [ i#2 ]
  [1] (byte~) $1 ← (byte) i#2 + (byte) 4 [ i#2 $1 ]
  [2] *((word) 4352 + (byte) i#2) ← (byte~) $1 [ i#2 ]
  [3] (byte) i#1 ← (byte) i#2 + (byte) 1 [ i#1 ]
  [4] if((byte) i#1<(byte) 10) goto @1 [ i#1 ]
  to:@end
@end: scope:[]  from @1

CALL GRAPH

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @end @begin 

Found back edge: Loop head: @1 tails: @1 blocks: null
Populated: Loop head: @1 tails: @1 blocks: @1 
NATURAL LOOPS
Loop head: @1 tails: @1 blocks: @1 

Found 1 loops in scope []
  Loop head: @1 tails: @1 blocks: @1 
NATURAL LOOPS WITH DEPTH
Loop head: @1 tails: @1 blocks: @1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte~) $1 22.0
(byte) i
(byte) i#1 16.5
(byte) i#2 14.666666666666666
(byte[16]) p

Initial phi equivalence classes
[ i#2 i#1 ]
Added variable $1 to zero page equivalence class [ $1 ]
Complete equivalence classes
[ i#2 i#1 ]
[ $1 ]
Allocated zp ZP_BYTE:2 i#2 [ i#2 i#1 ]
Allocated zp ZP_BYTE:3 $1 [ $1 ]
INITIAL ASM
//SEG0 Global ZP labels
  .label $1 = 3
  .label i = 2
//SEG1 @begin
bbegin:
//SEG2 [0] phi from @begin to @1
b1_from_bbegin:
//SEG3 [0] phi (byte) i#2 = (byte) 5 -- zpby1=coby1 
  lda #$5
  sta i
  jmp b1
//SEG4 [0] phi from @1 to @1
b1_from_b1:
//SEG5 [0] phi (byte) i#2 = (byte) i#1 -- register_copy 
  jmp b1
//SEG6 @1
b1:
//SEG7 [1] (byte~) $1 ← (byte) i#2 + (byte) 4 [ i#2 $1 ] -- zpby1=zpby2_plus_coby1 
  lda i
  clc
  adc #$4
  sta $1
//SEG8 [2] *((word) 4352 + (byte) i#2) ← (byte~) $1 [ i#2 ] -- cowo1_staridx_zpby1=zpby2 
  lda $1
  ldx i
  sta $1100,x
//SEG9 [3] (byte) i#1 ← (byte) i#2 + (byte) 1 [ i#1 ] -- zpby1=zpby1_plus_1 
  inc i
//SEG10 [4] if((byte) i#1<(byte) 10) goto @1 [ i#1 ] -- zpby1_lt_coby1_then_la1 
  lda i
  cmp #$a
  bcc b1_from_b1
  jmp bend
//SEG11 @end
bend:

Statement [1] (byte~) $1 ← (byte) i#2 + (byte) 4 [ i#2 $1 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 i [ i#2 i#1 ]
Statement [1] (byte~) $1 ← (byte) i#2 + (byte) 4 [ i#2 $1 ] always clobbers reg byte a 
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 i [ i#2 i#1 ] : zp ZP_BYTE:2 i , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 $1 [ $1 ] : zp ZP_BYTE:3 $1 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 31.17: zp ZP_BYTE:2 i [ i#2 i#1 ] 22: zp ZP_BYTE:3 $1 [ $1 ] 

Uplifting [] best 285 combination reg byte x [ i#2 i#1 ] reg byte a [ $1 ] 
Removing instruction jmp b1
Removing instruction jmp bend
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global ZP labels
//SEG1 @begin
bbegin:
//SEG2 [0] phi from @begin to @1
b1_from_bbegin:
//SEG3 [0] phi (byte) i#2 = (byte) 5 -- xby=coby1 
  ldx #$5
  jmp b1
//SEG4 [0] phi from @1 to @1
b1_from_b1:
//SEG5 [0] phi (byte) i#2 = (byte) i#1 -- register_copy 
//SEG6 @1
b1:
//SEG7 [1] (byte~) $1 ← (byte) i#2 + (byte) 4 [ i#2 $1 ] -- aby=xby_plus_coby1 
  txa
  clc
  adc #$4
//SEG8 [2] *((word) 4352 + (byte) i#2) ← (byte~) $1 [ i#2 ] -- cowo1_staridx_xby=aby 
  sta $1100,x
//SEG9 [3] (byte) i#1 ← (byte) i#2 + (byte) 1 [ i#1 ] -- xby=xby_plus_1 
  inx
//SEG10 [4] if((byte) i#1<(byte) 10) goto @1 [ i#1 ] -- xby_lt_coby1_then_la1 
  cpx #$a
  bcc b1_from_b1
//SEG11 @end
bend:

Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Global ZP labels
//SEG1 @begin
bbegin:
//SEG2 [0] phi from @begin to @1
//SEG3 [0] phi (byte) i#2 = (byte) 5 -- xby=coby1 
  ldx #$5
  jmp b1
//SEG4 [0] phi from @1 to @1
//SEG5 [0] phi (byte) i#2 = (byte) i#1 -- register_copy 
//SEG6 @1
b1:
//SEG7 [1] (byte~) $1 ← (byte) i#2 + (byte) 4 [ i#2 $1 ] -- aby=xby_plus_coby1 
  txa
  clc
  adc #$4
//SEG8 [2] *((word) 4352 + (byte) i#2) ← (byte~) $1 [ i#2 ] -- cowo1_staridx_xby=aby 
  sta $1100,x
//SEG9 [3] (byte) i#1 ← (byte) i#2 + (byte) 1 [ i#1 ] -- xby=xby_plus_1 
  inx
//SEG10 [4] if((byte) i#1<(byte) 10) goto @1 [ i#1 ] -- xby_lt_coby1_then_la1 
  cpx #$a
  bcc b1
//SEG11 @end
bend:

Removing instruction bbegin:
Removing instruction bend:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Global ZP labels
//SEG1 @begin
//SEG2 [0] phi from @begin to @1
//SEG3 [0] phi (byte) i#2 = (byte) 5 -- xby=coby1 
  ldx #$5
  jmp b1
//SEG4 [0] phi from @1 to @1
//SEG5 [0] phi (byte) i#2 = (byte) i#1 -- register_copy 
//SEG6 @1
b1:
//SEG7 [1] (byte~) $1 ← (byte) i#2 + (byte) 4 [ i#2 $1 ] -- aby=xby_plus_coby1 
  txa
  clc
  adc #$4
//SEG8 [2] *((word) 4352 + (byte) i#2) ← (byte~) $1 [ i#2 ] -- cowo1_staridx_xby=aby 
  sta $1100,x
//SEG9 [3] (byte) i#1 ← (byte) i#2 + (byte) 1 [ i#1 ] -- xby=xby_plus_1 
  inx
//SEG10 [4] if((byte) i#1<(byte) 10) goto @1 [ i#1 ] -- xby_lt_coby1_then_la1 
  cpx #$a
  bcc b1
//SEG11 @end

Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global ZP labels
//SEG1 @begin
//SEG2 [0] phi from @begin to @1
//SEG3 [0] phi (byte) i#2 = (byte) 5 -- xby=coby1 
  ldx #$5
//SEG4 [0] phi from @1 to @1
//SEG5 [0] phi (byte) i#2 = (byte) i#1 -- register_copy 
//SEG6 @1
b1:
//SEG7 [1] (byte~) $1 ← (byte) i#2 + (byte) 4 [ i#2 $1 ] -- aby=xby_plus_coby1 
  txa
  clc
  adc #$4
//SEG8 [2] *((word) 4352 + (byte) i#2) ← (byte~) $1 [ i#2 ] -- cowo1_staridx_xby=aby 
  sta $1100,x
//SEG9 [3] (byte) i#1 ← (byte) i#2 + (byte) 1 [ i#1 ] -- xby=xby_plus_1 
  inx
//SEG10 [4] if((byte) i#1<(byte) 10) goto @1 [ i#1 ] -- xby_lt_coby1_then_la1 
  cpx #$a
  bcc b1
//SEG11 @end

FINAL SYMBOL TABLE
(byte~) $1 reg byte a 22.0
(label) @1
(label) @begin
(label) @end
(byte) i
(byte) i#1 reg byte x 16.5
(byte) i#2 reg byte x 14.666666666666666
(byte[16]) p

reg byte x [ i#2 i#1 ]
reg byte a [ $1 ]

FINAL CODE
//SEG0 Global ZP labels
//SEG1 @begin
//SEG2 [0] phi from @begin to @1
//SEG3 [0] phi (byte) i#2 = (byte) 5 -- xby=coby1 
  ldx #$5
//SEG4 [0] phi from @1 to @1
//SEG5 [0] phi (byte) i#2 = (byte) i#1 -- register_copy 
//SEG6 @1
b1:
//SEG7 [1] (byte~) $1 ← (byte) i#2 + (byte) 4 [ i#2 $1 ] -- aby=xby_plus_coby1 
  txa
  clc
  adc #$4
//SEG8 [2] *((word) 4352 + (byte) i#2) ← (byte~) $1 [ i#2 ] -- cowo1_staridx_xby=aby 
  sta $1100,x
//SEG9 [3] (byte) i#1 ← (byte) i#2 + (byte) 1 [ i#1 ] -- xby=xby_plus_1 
  inx
//SEG10 [4] if((byte) i#1<(byte) 10) goto @1 [ i#1 ] -- xby_lt_coby1_then_la1 
  cpx #$a
  bcc b1
//SEG11 @end

