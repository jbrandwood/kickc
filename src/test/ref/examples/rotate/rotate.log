Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call mulf8s_prepare (signed byte) mulf8s::a 
Inlined call call mulf8s_prepare (signed byte) anim::cos_a 
Inlined call call mulf8s_prepare (signed byte) anim::sin_a 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SPRITES_XPOS#0 ← ((byte*)) (word/dword/signed dword) 53248
  (byte*) SPRITES_YPOS#0 ← ((byte*)) (word/dword/signed dword) 53249
  (byte*) SPRITES_XMSB#0 ← ((byte*)) (word/dword/signed dword) 53264
  (byte*) RASTER#0 ← ((byte*)) (word/dword/signed dword) 53266
  (byte*) SPRITES_ENABLE#0 ← ((byte*)) (word/dword/signed dword) 53269
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) 53280
  (byte*) SPRITES_COLS#0 ← ((byte*)) (word/dword/signed dword) 53287
  (byte) GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  to:@3
@3: scope:[]  from @begin
  (byte[512]) mulf_sqr1_lo#0 ← { fill( 512, 0) }
  (byte[512]) mulf_sqr1_hi#0 ← { fill( 512, 0) }
  (byte[512]) mulf_sqr2_lo#0 ← { fill( 512, 0) }
  (byte[512]) mulf_sqr2_hi#0 ← { fill( 512, 0) }
  to:@14
mulf_init: scope:[mulf_init]  from init
  (word) mulf_init::sqr#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) mulf_init::x_2#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) mulf_init::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*~) mulf_init::$0 ← (byte[512]) mulf_sqr1_hi#0 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*) mulf_init::sqr1_hi#0 ← (byte*~) mulf_init::$0
  (byte*~) mulf_init::$1 ← (byte[512]) mulf_sqr1_lo#0 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*) mulf_init::sqr1_lo#0 ← (byte*~) mulf_init::$1
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@2
  (byte) mulf_init::x_2#4 ← phi( mulf_init/(byte) mulf_init::x_2#0 mulf_init::@2/(byte) mulf_init::x_2#2 )
  (byte*) mulf_init::sqr1_hi#3 ← phi( mulf_init/(byte*) mulf_init::sqr1_hi#0 mulf_init::@2/(byte*) mulf_init::sqr1_hi#1 )
  (byte*) mulf_init::sqr1_lo#3 ← phi( mulf_init/(byte*) mulf_init::sqr1_lo#0 mulf_init::@2/(byte*) mulf_init::sqr1_lo#1 )
  (word) mulf_init::sqr#5 ← phi( mulf_init/(word) mulf_init::sqr#0 mulf_init::@2/(word) mulf_init::sqr#1 )
  (byte) mulf_init::c#2 ← phi( mulf_init/(byte) mulf_init::c#0 mulf_init::@2/(byte) mulf_init::c#3 )
  (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2
  (byte~) mulf_init::$2 ← (byte) mulf_init::c#1 & (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) mulf_init::$3 ← (byte~) mulf_init::$2 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mulf_init::$4 ← ! (bool~) mulf_init::$3
  if((bool~) mulf_init::$4) goto mulf_init::@2
  to:mulf_init::@5
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1 mulf_init::@5
  (byte) mulf_init::c#3 ← phi( mulf_init::@1/(byte) mulf_init::c#1 mulf_init::@5/(byte) mulf_init::c#4 )
  (byte) mulf_init::x_2#2 ← phi( mulf_init::@1/(byte) mulf_init::x_2#4 mulf_init::@5/(byte) mulf_init::x_2#1 )
  (byte*) mulf_init::sqr1_hi#2 ← phi( mulf_init::@1/(byte*) mulf_init::sqr1_hi#3 mulf_init::@5/(byte*) mulf_init::sqr1_hi#4 )
  (byte*) mulf_init::sqr1_lo#2 ← phi( mulf_init::@1/(byte*) mulf_init::sqr1_lo#3 mulf_init::@5/(byte*) mulf_init::sqr1_lo#4 )
  (word) mulf_init::sqr#3 ← phi( mulf_init::@1/(word) mulf_init::sqr#5 mulf_init::@5/(word) mulf_init::sqr#2 )
  (byte~) mulf_init::$5 ← < (word) mulf_init::sqr#3
  *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$5
  (byte~) mulf_init::$6 ← > (word) mulf_init::sqr#3
  *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$6
  (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2
  (word~) mulf_init::$7 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2
  (word) mulf_init::sqr#1 ← (word~) mulf_init::$7
  (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2
  (byte*~) mulf_init::$8 ← (byte[512]) mulf_sqr1_lo#0 + (word/signed word/dword/signed dword) 512
  (bool~) mulf_init::$9 ← (byte*) mulf_init::sqr1_lo#1 != (byte*~) mulf_init::$8
  if((bool~) mulf_init::$9) goto mulf_init::@1
  to:mulf_init::@6
mulf_init::@5: scope:[mulf_init]  from mulf_init::@1
  (byte) mulf_init::c#4 ← phi( mulf_init::@1/(byte) mulf_init::c#1 )
  (byte*) mulf_init::sqr1_hi#4 ← phi( mulf_init::@1/(byte*) mulf_init::sqr1_hi#3 )
  (byte*) mulf_init::sqr1_lo#4 ← phi( mulf_init::@1/(byte*) mulf_init::sqr1_lo#3 )
  (word) mulf_init::sqr#4 ← phi( mulf_init::@1/(word) mulf_init::sqr#5 )
  (byte) mulf_init::x_2#3 ← phi( mulf_init::@1/(byte) mulf_init::x_2#4 )
  (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3
  (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4
  to:mulf_init::@2
mulf_init::@6: scope:[mulf_init]  from mulf_init::@2
  (signed byte/signed word/signed dword~) mulf_init::$10 ← - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte~) mulf_init::$11 ← ((byte)) (signed byte/signed word/signed dword~) mulf_init::$10
  (byte) mulf_init::x_255#0 ← (byte~) mulf_init::$11
  (byte) mulf_init::dir#0 ← (byte/word/signed word/dword/signed dword) 255
  (byte*) mulf_init::sqr2_hi#0 ← (byte[512]) mulf_sqr2_hi#0
  (byte*) mulf_init::sqr2_lo#0 ← (byte[512]) mulf_sqr2_lo#0
  to:mulf_init::@3
mulf_init::@3: scope:[mulf_init]  from mulf_init::@4 mulf_init::@6
  (byte) mulf_init::dir#2 ← phi( mulf_init::@4/(byte) mulf_init::dir#3 mulf_init::@6/(byte) mulf_init::dir#0 )
  (byte*) mulf_init::sqr2_hi#2 ← phi( mulf_init::@4/(byte*) mulf_init::sqr2_hi#3 mulf_init::@6/(byte*) mulf_init::sqr2_hi#0 )
  (byte*) mulf_init::sqr2_lo#2 ← phi( mulf_init::@4/(byte*) mulf_init::sqr2_lo#1 mulf_init::@6/(byte*) mulf_init::sqr2_lo#0 )
  (byte) mulf_init::x_255#2 ← phi( mulf_init::@4/(byte) mulf_init::x_255#3 mulf_init::@6/(byte) mulf_init::x_255#0 )
  *((byte*) mulf_init::sqr2_lo#2) ← *((byte[512]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2)
  *((byte*) mulf_init::sqr2_hi#2) ← *((byte[512]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2)
  (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2
  (byte~) mulf_init::$12 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2
  (byte) mulf_init::x_255#1 ← (byte~) mulf_init::$12
  (bool~) mulf_init::$13 ← (byte) mulf_init::x_255#1 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mulf_init::$14 ← ! (bool~) mulf_init::$13
  if((bool~) mulf_init::$14) goto mulf_init::@4
  to:mulf_init::@7
mulf_init::@4: scope:[mulf_init]  from mulf_init::@3 mulf_init::@7
  (byte) mulf_init::dir#3 ← phi( mulf_init::@3/(byte) mulf_init::dir#2 mulf_init::@7/(byte) mulf_init::dir#1 )
  (byte*) mulf_init::sqr2_hi#3 ← phi( mulf_init::@3/(byte*) mulf_init::sqr2_hi#1 mulf_init::@7/(byte*) mulf_init::sqr2_hi#4 )
  (byte) mulf_init::x_255#3 ← phi( mulf_init::@3/(byte) mulf_init::x_255#1 mulf_init::@7/(byte) mulf_init::x_255#4 )
  (byte*) mulf_init::sqr2_lo#3 ← phi( mulf_init::@3/(byte*) mulf_init::sqr2_lo#2 mulf_init::@7/(byte*) mulf_init::sqr2_lo#4 )
  (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#3
  (byte*~) mulf_init::$15 ← (byte[512]) mulf_sqr2_lo#0 + (word/signed word/dword/signed dword) 511
  (bool~) mulf_init::$16 ← (byte*) mulf_init::sqr2_lo#1 != (byte*~) mulf_init::$15
  if((bool~) mulf_init::$16) goto mulf_init::@3
  to:mulf_init::@8
mulf_init::@7: scope:[mulf_init]  from mulf_init::@3
  (byte*) mulf_init::sqr2_hi#4 ← phi( mulf_init::@3/(byte*) mulf_init::sqr2_hi#1 )
  (byte) mulf_init::x_255#4 ← phi( mulf_init::@3/(byte) mulf_init::x_255#1 )
  (byte*) mulf_init::sqr2_lo#4 ← phi( mulf_init::@3/(byte*) mulf_init::sqr2_lo#2 )
  (byte) mulf_init::dir#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:mulf_init::@4
mulf_init::@8: scope:[mulf_init]  from mulf_init::@4
  (byte*~) mulf_init::$17 ← (byte[512]) mulf_sqr2_lo#0 + (word/signed word/dword/signed dword) 511
  (byte*~) mulf_init::$18 ← (byte[512]) mulf_sqr1_lo#0 + (word/signed word/dword/signed dword) 256
  *((byte*~) mulf_init::$17) ← *((byte*~) mulf_init::$18)
  (byte*~) mulf_init::$19 ← (byte[512]) mulf_sqr2_hi#0 + (word/signed word/dword/signed dword) 511
  (byte*~) mulf_init::$20 ← (byte[512]) mulf_sqr1_hi#0 + (word/signed word/dword/signed dword) 256
  *((byte*~) mulf_init::$19) ← *((byte*~) mulf_init::$20)
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@8
  return 
  to:@return
mulf8u_prepare: scope:[mulf8u_prepare]  from anim::mulf8s_prepare1 anim::mulf8s_prepare2
  (byte) mulf8u_prepare::a#2 ← phi( anim::mulf8s_prepare1/(byte) mulf8u_prepare::a#0 anim::mulf8s_prepare2/(byte) mulf8u_prepare::a#1 )
  (byte*) mulf8u_prepare::memA#0 ← ((byte*)) (byte/word/signed word/dword/signed dword) 253
  *((byte*) mulf8u_prepare::memA#0) ← (byte) mulf8u_prepare::a#2
  asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
  to:mulf8u_prepare::@return
mulf8u_prepare::@return: scope:[mulf8u_prepare]  from mulf8u_prepare
  return 
  to:@return
mulf8u_prepared: scope:[mulf8u_prepared]  from mulf8s_prepared
  (byte) mulf8u_prepared::b#1 ← phi( mulf8s_prepared/(byte) mulf8u_prepared::b#0 )
  (byte*) mulf8u_prepared::resL#0 ← ((byte*)) (byte/word/signed word/dword/signed dword) 254
  (byte*) mulf8u_prepared::memB#0 ← ((byte*)) (byte/word/signed word/dword/signed dword) 255
  *((byte*) mulf8u_prepared::memB#0) ← (byte) mulf8u_prepared::b#1
  asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
  (word) mulf8u_prepared::return#0 ← { *((byte*) mulf8u_prepared::memB#0), *((byte*) mulf8u_prepared::resL#0) }
  to:mulf8u_prepared::@return
mulf8u_prepared::@return: scope:[mulf8u_prepared]  from mulf8u_prepared
  (word) mulf8u_prepared::return#3 ← phi( mulf8u_prepared/(word) mulf8u_prepared::return#0 )
  (word) mulf8u_prepared::return#1 ← (word) mulf8u_prepared::return#3
  return 
  to:@return
mulf8s_prepared: scope:[mulf8s_prepared]  from anim::@13 anim::@14 anim::@16 anim::@19
  (signed byte) mulf8s_prepared::b#4 ← phi( anim::@13/(signed byte) mulf8s_prepared::b#0 anim::@14/(signed byte) mulf8s_prepared::b#2 anim::@16/(signed byte) mulf8s_prepared::b#1 anim::@19/(signed byte) mulf8s_prepared::b#3 )
  (signed byte*) mulf8s_prepared::memA#0 ← ((signed byte*)) (byte/word/signed word/dword/signed dword) 253
  (byte~) mulf8s_prepared::$0 ← ((byte)) (signed byte) mulf8s_prepared::b#4
  (byte) mulf8u_prepared::b#0 ← (byte~) mulf8s_prepared::$0
  call mulf8u_prepared 
  (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#1
  to:mulf8s_prepared::@6
mulf8s_prepared::@6: scope:[mulf8s_prepared]  from mulf8s_prepared
  (signed byte) mulf8s_prepared::b#7 ← phi( mulf8s_prepared/(signed byte) mulf8s_prepared::b#4 )
  (word) mulf8u_prepared::return#4 ← phi( mulf8s_prepared/(word) mulf8u_prepared::return#2 )
  (word~) mulf8s_prepared::$1 ← (word) mulf8u_prepared::return#4
  (word) mulf8s_prepared::m#0 ← (word~) mulf8s_prepared::$1
  (bool~) mulf8s_prepared::$2 ← *((signed byte*) mulf8s_prepared::memA#0) < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mulf8s_prepared::$3 ← ! (bool~) mulf8s_prepared::$2
  if((bool~) mulf8s_prepared::$3) goto mulf8s_prepared::@1
  to:mulf8s_prepared::@3
mulf8s_prepared::@1: scope:[mulf8s_prepared]  from mulf8s_prepared::@3 mulf8s_prepared::@6
  (word) mulf8s_prepared::m#6 ← phi( mulf8s_prepared::@3/(word) mulf8s_prepared::m#1 mulf8s_prepared::@6/(word) mulf8s_prepared::m#0 )
  (signed byte) mulf8s_prepared::b#5 ← phi( mulf8s_prepared::@3/(signed byte) mulf8s_prepared::b#6 mulf8s_prepared::@6/(signed byte) mulf8s_prepared::b#7 )
  (bool~) mulf8s_prepared::$8 ← (signed byte) mulf8s_prepared::b#5 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mulf8s_prepared::$9 ← ! (bool~) mulf8s_prepared::$8
  if((bool~) mulf8s_prepared::$9) goto mulf8s_prepared::@2
  to:mulf8s_prepared::@4
mulf8s_prepared::@3: scope:[mulf8s_prepared]  from mulf8s_prepared::@6
  (signed byte) mulf8s_prepared::b#6 ← phi( mulf8s_prepared::@6/(signed byte) mulf8s_prepared::b#7 )
  (word) mulf8s_prepared::m#3 ← phi( mulf8s_prepared::@6/(word) mulf8s_prepared::m#0 )
  (byte~) mulf8s_prepared::$5 ← > (word) mulf8s_prepared::m#3
  (byte~) mulf8s_prepared::$6 ← ((byte)) (signed byte) mulf8s_prepared::b#6
  (byte~) mulf8s_prepared::$7 ← (byte~) mulf8s_prepared::$5 - (byte~) mulf8s_prepared::$6
  (byte~) mulf8s_prepared::$15 ← (byte~) mulf8s_prepared::$7
  (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#3 hi= (byte~) mulf8s_prepared::$15
  to:mulf8s_prepared::@1
mulf8s_prepared::@2: scope:[mulf8s_prepared]  from mulf8s_prepared::@1 mulf8s_prepared::@4
  (word) mulf8s_prepared::m#4 ← phi( mulf8s_prepared::@1/(word) mulf8s_prepared::m#6 mulf8s_prepared::@4/(word) mulf8s_prepared::m#2 )
  (signed word~) mulf8s_prepared::$14 ← ((signed word)) (word) mulf8s_prepared::m#4
  (signed word) mulf8s_prepared::return#0 ← (signed word~) mulf8s_prepared::$14
  to:mulf8s_prepared::@return
mulf8s_prepared::@4: scope:[mulf8s_prepared]  from mulf8s_prepared::@1
  (word) mulf8s_prepared::m#5 ← phi( mulf8s_prepared::@1/(word) mulf8s_prepared::m#6 )
  (byte~) mulf8s_prepared::$11 ← > (word) mulf8s_prepared::m#5
  (byte~) mulf8s_prepared::$12 ← ((byte)) *((signed byte*) mulf8s_prepared::memA#0)
  (byte~) mulf8s_prepared::$13 ← (byte~) mulf8s_prepared::$11 - (byte~) mulf8s_prepared::$12
  (byte~) mulf8s_prepared::$16 ← (byte~) mulf8s_prepared::$13
  (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$16
  to:mulf8s_prepared::@2
mulf8s_prepared::@return: scope:[mulf8s_prepared]  from mulf8s_prepared::@2
  (signed word) mulf8s_prepared::return#6 ← phi( mulf8s_prepared::@2/(signed word) mulf8s_prepared::return#0 )
  (signed word) mulf8s_prepared::return#1 ← (signed word) mulf8s_prepared::return#6
  return 
  to:@return
@14: scope:[]  from @3
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) SPRITE#0 ← ((byte*)) (word/signed word/dword/signed dword) 12288
  (byte*) COS#0 ← ((byte*)) (word/signed word/dword/signed dword) 8192
  (byte*~) $0 ← (byte*) COS#0 + (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte*) SIN#0 ← (byte*~) $0
  to:@17
main: scope:[main]  from @17
  (byte*) SIN#15 ← phi( @17/(byte*) SIN#17 )
  (byte*) COS#11 ← phi( @17/(byte*) COS#2 )
  (byte*) SPRITE#5 ← phi( @17/(byte*) SPRITE#2 )
  (byte*) SCREEN#3 ← phi( @17/(byte*) SCREEN#4 )
  asm { sei  }
  call init 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) SIN#13 ← phi( main/(byte*) SIN#15 )
  (byte*) COS#9 ← phi( main/(byte*) COS#11 )
  call anim 
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
init: scope:[init]  from main
  (byte*) SPRITE#4 ← phi( main/(byte*) SPRITE#5 )
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 )
  call mulf_init 
  to:init::@3
init::@3: scope:[init]  from init
  (byte*) SPRITE#3 ← phi( init/(byte*) SPRITE#4 )
  (byte*) SCREEN#1 ← phi( init/(byte*) SCREEN#2 )
  *((byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255
  (byte*~) init::$1 ← (byte*) SCREEN#1 + (word/signed word/dword/signed dword) 1016
  (byte*) init::sprites_ptr#0 ← (byte*~) init::$1
  (byte) init::spr_x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 60
  (byte) init::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:init::@1
init::@1: scope:[init]  from init::@1 init::@3
  (byte) init::spr_x#2 ← phi( init::@1/(byte) init::spr_x#1 init::@3/(byte) init::spr_x#0 )
  (byte*) init::sprites_ptr#1 ← phi( init::@1/(byte*) init::sprites_ptr#1 init::@3/(byte*) init::sprites_ptr#0 )
  (byte*) SPRITE#1 ← phi( init::@1/(byte*) SPRITE#1 init::@3/(byte*) SPRITE#3 )
  (byte) init::i#2 ← phi( init::@1/(byte) init::i#1 init::@3/(byte) init::i#0 )
  (byte~) init::$2 ← (byte) init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) init::i2#0 ← (byte~) init::$2
  (byte*~) init::$3 ← (byte*) SPRITE#1 / (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte~) init::$4 ← ((byte)) (byte*~) init::$3
  *((byte*) init::sprites_ptr#1 + (byte) init::i#2) ← (byte~) init::$4
  *((byte*) SPRITES_XPOS#0 + (byte) init::i2#0) ← (byte) init::spr_x#2
  *((byte*) SPRITES_YPOS#0 + (byte) init::i2#0) ← (byte) init::spr_x#2
  *((byte*) SPRITES_COLS#0 + (byte) init::i#2) ← (byte) GREEN#0
  (byte) init::spr_x#1 ← (byte) init::spr_x#2 + (byte/signed byte/word/signed word/dword/signed dword) 24
  (byte) init::i#1 ← (byte) init::i#2 + rangenext(0,7)
  (bool~) init::$5 ← (byte) init::i#1 != rangelast(0,7)
  if((bool~) init::$5) goto init::@1
  to:init::@return
init::@return: scope:[init]  from init::@1
  return 
  to:@return
anim: scope:[anim]  from main::@1
  (byte*) SIN#11 ← phi( main::@1/(byte*) SIN#13 )
  (byte*) COS#7 ← phi( main::@1/(byte*) COS#9 )
  (byte) anim::angle#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (signed byte) anim::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 89
  (signed byte) anim::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@20
  (byte*) SIN#10 ← phi( anim/(byte*) SIN#11 anim::@20/(byte*) SIN#12 )
  (signed byte) anim::y#13 ← phi( anim/(signed byte) anim::y#0 anim::@20/(signed byte) anim::y#14 )
  (signed byte) anim::x#14 ← phi( anim/(signed byte) anim::x#0 anim::@20/(signed byte) anim::x#15 )
  (byte) anim::angle#12 ← phi( anim/(byte) anim::angle#0 anim::@20/(byte) anim::angle#1 )
  (byte*) COS#6 ← phi( anim/(byte*) COS#7 anim::@20/(byte*) COS#8 )
  if(true) goto anim::@2
  to:anim::@return
anim::@2: scope:[anim]  from anim::@1
  (byte*) SIN#8 ← phi( anim::@1/(byte*) SIN#10 )
  (signed byte) anim::y#11 ← phi( anim::@1/(signed byte) anim::y#13 )
  (signed byte) anim::x#11 ← phi( anim::@1/(signed byte) anim::x#14 )
  (byte) anim::angle#8 ← phi( anim::@1/(byte) anim::angle#12 )
  (byte*) COS#4 ← phi( anim::@1/(byte*) COS#6 )
  to:anim::@4
anim::@4: scope:[anim]  from anim::@2 anim::@5
  (byte*) SIN#7 ← phi( anim::@2/(byte*) SIN#8 anim::@5/(byte*) SIN#9 )
  (signed byte) anim::y#10 ← phi( anim::@2/(signed byte) anim::y#11 anim::@5/(signed byte) anim::y#12 )
  (signed byte) anim::x#9 ← phi( anim::@2/(signed byte) anim::x#11 anim::@5/(signed byte) anim::x#12 )
  (byte) anim::angle#5 ← phi( anim::@2/(byte) anim::angle#8 anim::@5/(byte) anim::angle#9 )
  (byte*) COS#3 ← phi( anim::@2/(byte*) COS#4 anim::@5/(byte*) COS#5 )
  (bool~) anim::$1 ← *((byte*) RASTER#0) != (byte/word/signed word/dword/signed dword) 255
  if((bool~) anim::$1) goto anim::@5
  to:anim::@6
anim::@5: scope:[anim]  from anim::@4
  (byte*) SIN#9 ← phi( anim::@4/(byte*) SIN#7 )
  (signed byte) anim::y#12 ← phi( anim::@4/(signed byte) anim::y#10 )
  (signed byte) anim::x#12 ← phi( anim::@4/(signed byte) anim::x#9 )
  (byte) anim::angle#9 ← phi( anim::@4/(byte) anim::angle#5 )
  (byte*) COS#5 ← phi( anim::@4/(byte*) COS#3 )
  to:anim::@4
anim::@6: scope:[anim]  from anim::@4
  (byte*) SIN#6 ← phi( anim::@4/(byte*) SIN#7 )
  (signed byte) anim::y#9 ← phi( anim::@4/(signed byte) anim::y#10 )
  (signed byte) anim::x#7 ← phi( anim::@4/(signed byte) anim::x#9 )
  (byte) anim::angle#2 ← phi( anim::@4/(byte) anim::angle#5 )
  (byte*) COS#1 ← phi( anim::@4/(byte*) COS#3 )
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  (signed byte~) anim::$2 ← ((signed byte)) *((byte*) COS#1 + (byte) anim::angle#2)
  (signed byte) anim::cos_a#0 ← (signed byte~) anim::$2
  (signed byte) anim::mulf8s_prepare1_a#0 ← (signed byte) anim::cos_a#0
  to:anim::mulf8s_prepare1
anim::mulf8s_prepare1: scope:[anim]  from anim::@6
  (byte*) COS#19 ← phi( anim::@6/(byte*) COS#1 )
  (byte) anim::angle#15 ← phi( anim::@6/(byte) anim::angle#2 )
  (byte*) SIN#5 ← phi( anim::@6/(byte*) SIN#6 )
  (signed byte) anim::y#7 ← phi( anim::@6/(signed byte) anim::y#9 )
  (signed byte) anim::x#5 ← phi( anim::@6/(signed byte) anim::x#7 )
  (signed byte) anim::mulf8s_prepare1_a#1 ← phi( anim::@6/(signed byte) anim::mulf8s_prepare1_a#0 )
  (byte) anim::mulf8s_prepare1_$0#0 ← ((byte)) (signed byte) anim::mulf8s_prepare1_a#1
  (byte) mulf8u_prepare::a#0 ← (byte) anim::mulf8s_prepare1_$0#0
  call mulf8u_prepare 
  to:anim::@15
anim::@15: scope:[anim]  from anim::mulf8s_prepare1
  (byte*) COS#18 ← phi( anim::mulf8s_prepare1/(byte*) COS#19 )
  (byte) anim::angle#13 ← phi( anim::mulf8s_prepare1/(byte) anim::angle#15 )
  (byte*) SIN#4 ← phi( anim::mulf8s_prepare1/(byte*) SIN#5 )
  (signed byte) anim::y#5 ← phi( anim::mulf8s_prepare1/(signed byte) anim::y#7 )
  (signed byte) anim::x#3 ← phi( anim::mulf8s_prepare1/(signed byte) anim::x#5 )
  to:anim::@13
anim::@13: scope:[anim]  from anim::@15
  (byte*) COS#17 ← phi( anim::@15/(byte*) COS#18 )
  (byte) anim::angle#10 ← phi( anim::@15/(byte) anim::angle#13 )
  (byte*) SIN#3 ← phi( anim::@15/(byte*) SIN#4 )
  (signed byte) anim::y#3 ← phi( anim::@15/(signed byte) anim::y#5 )
  (signed byte) anim::x#1 ← phi( anim::@15/(signed byte) anim::x#3 )
  (signed byte) mulf8s_prepared::b#0 ← (signed byte) anim::x#1
  call mulf8s_prepared 
  (signed word) mulf8s_prepared::return#2 ← (signed word) mulf8s_prepared::return#1
  to:anim::@16
anim::@16: scope:[anim]  from anim::@13
  (byte*) COS#16 ← phi( anim::@13/(byte*) COS#17 )
  (signed byte) anim::x#13 ← phi( anim::@13/(signed byte) anim::x#1 )
  (byte) anim::angle#6 ← phi( anim::@13/(byte) anim::angle#10 )
  (byte*) SIN#2 ← phi( anim::@13/(byte*) SIN#3 )
  (signed byte) anim::y#1 ← phi( anim::@13/(signed byte) anim::y#3 )
  (signed word) mulf8s_prepared::return#7 ← phi( anim::@13/(signed word) mulf8s_prepared::return#2 )
  (signed word~) anim::$4 ← (signed word) mulf8s_prepared::return#7
  (signed word~) anim::$5 ← (signed word~) anim::$4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (signed word) anim::xr#0 ← (signed word~) anim::$5
  (signed byte) mulf8s_prepared::b#1 ← (signed byte) anim::y#1
  call mulf8s_prepared 
  (signed word) mulf8s_prepared::return#3 ← (signed word) mulf8s_prepared::return#1
  to:anim::@17
anim::@17: scope:[anim]  from anim::@16
  (byte*) COS#15 ← phi( anim::@16/(byte*) COS#16 )
  (signed byte) anim::x#10 ← phi( anim::@16/(signed byte) anim::x#13 )
  (signed word) anim::xr#7 ← phi( anim::@16/(signed word) anim::xr#0 )
  (signed byte) anim::y#8 ← phi( anim::@16/(signed byte) anim::y#1 )
  (byte) anim::angle#3 ← phi( anim::@16/(byte) anim::angle#6 )
  (byte*) SIN#1 ← phi( anim::@16/(byte*) SIN#2 )
  (signed word) mulf8s_prepared::return#8 ← phi( anim::@16/(signed word) mulf8s_prepared::return#3 )
  (signed word~) anim::$6 ← (signed word) mulf8s_prepared::return#8
  (signed word~) anim::$7 ← (signed word~) anim::$6 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (signed word) anim::yr#0 ← (signed word~) anim::$7
  (signed byte~) anim::$8 ← ((signed byte)) *((byte*) SIN#1 + (byte) anim::angle#3)
  (signed byte) anim::sin_a#0 ← (signed byte~) anim::$8
  (signed byte) anim::mulf8s_prepare2_a#0 ← (signed byte) anim::sin_a#0
  to:anim::mulf8s_prepare2
anim::mulf8s_prepare2: scope:[anim]  from anim::@17
  (byte*) SIN#19 ← phi( anim::@17/(byte*) SIN#1 )
  (byte*) COS#14 ← phi( anim::@17/(byte*) COS#15 )
  (byte) anim::angle#16 ← phi( anim::@17/(byte) anim::angle#3 )
  (signed word) anim::yr#6 ← phi( anim::@17/(signed word) anim::yr#0 )
  (signed byte) anim::x#8 ← phi( anim::@17/(signed byte) anim::x#10 )
  (signed word) anim::xr#6 ← phi( anim::@17/(signed word) anim::xr#7 )
  (signed byte) anim::y#6 ← phi( anim::@17/(signed byte) anim::y#8 )
  (signed byte) anim::mulf8s_prepare2_a#1 ← phi( anim::@17/(signed byte) anim::mulf8s_prepare2_a#0 )
  (byte) anim::mulf8s_prepare2_$0#0 ← ((byte)) (signed byte) anim::mulf8s_prepare2_a#1
  (byte) mulf8u_prepare::a#1 ← (byte) anim::mulf8s_prepare2_$0#0
  call mulf8u_prepare 
  to:anim::@18
anim::@18: scope:[anim]  from anim::mulf8s_prepare2
  (byte*) SIN#18 ← phi( anim::mulf8s_prepare2/(byte*) SIN#19 )
  (byte*) COS#13 ← phi( anim::mulf8s_prepare2/(byte*) COS#14 )
  (byte) anim::angle#14 ← phi( anim::mulf8s_prepare2/(byte) anim::angle#16 )
  (signed word) anim::yr#5 ← phi( anim::mulf8s_prepare2/(signed word) anim::yr#6 )
  (signed byte) anim::x#6 ← phi( anim::mulf8s_prepare2/(signed byte) anim::x#8 )
  (signed word) anim::xr#5 ← phi( anim::mulf8s_prepare2/(signed word) anim::xr#6 )
  (signed byte) anim::y#4 ← phi( anim::mulf8s_prepare2/(signed byte) anim::y#6 )
  to:anim::@14
anim::@14: scope:[anim]  from anim::@18
  (byte*) SIN#16 ← phi( anim::@18/(byte*) SIN#18 )
  (byte*) COS#12 ← phi( anim::@18/(byte*) COS#13 )
  (byte) anim::angle#11 ← phi( anim::@18/(byte) anim::angle#14 )
  (signed word) anim::yr#4 ← phi( anim::@18/(signed word) anim::yr#5 )
  (signed byte) anim::x#4 ← phi( anim::@18/(signed byte) anim::x#6 )
  (signed word) anim::xr#4 ← phi( anim::@18/(signed word) anim::xr#5 )
  (signed byte) anim::y#2 ← phi( anim::@18/(signed byte) anim::y#4 )
  (signed byte) mulf8s_prepared::b#2 ← (signed byte) anim::y#2
  call mulf8s_prepared 
  (signed word) mulf8s_prepared::return#4 ← (signed word) mulf8s_prepared::return#1
  to:anim::@19
anim::@19: scope:[anim]  from anim::@14
  (byte*) SIN#14 ← phi( anim::@14/(byte*) SIN#16 )
  (signed byte) anim::y#15 ← phi( anim::@14/(signed byte) anim::y#2 )
  (byte*) COS#10 ← phi( anim::@14/(byte*) COS#12 )
  (byte) anim::angle#7 ← phi( anim::@14/(byte) anim::angle#11 )
  (signed word) anim::yr#3 ← phi( anim::@14/(signed word) anim::yr#4 )
  (signed byte) anim::x#2 ← phi( anim::@14/(signed byte) anim::x#4 )
  (signed word) anim::xr#2 ← phi( anim::@14/(signed word) anim::xr#4 )
  (signed word) mulf8s_prepared::return#9 ← phi( anim::@14/(signed word) mulf8s_prepared::return#4 )
  (signed word~) anim::$10 ← (signed word) mulf8s_prepared::return#9
  (signed word~) anim::$11 ← (signed word~) anim::$10 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (signed word) anim::xr#1 ← (signed word) anim::xr#2 - (signed word~) anim::$11
  (signed byte) mulf8s_prepared::b#3 ← (signed byte) anim::x#2
  call mulf8s_prepared 
  (signed word) mulf8s_prepared::return#5 ← (signed word) mulf8s_prepared::return#1
  to:anim::@20
anim::@20: scope:[anim]  from anim::@19
  (byte*) SIN#12 ← phi( anim::@19/(byte*) SIN#14 )
  (signed byte) anim::y#14 ← phi( anim::@19/(signed byte) anim::y#15 )
  (signed byte) anim::x#15 ← phi( anim::@19/(signed byte) anim::x#2 )
  (byte*) COS#8 ← phi( anim::@19/(byte*) COS#10 )
  (byte) anim::angle#4 ← phi( anim::@19/(byte) anim::angle#7 )
  (signed word) anim::xr#3 ← phi( anim::@19/(signed word) anim::xr#1 )
  (signed word) anim::yr#2 ← phi( anim::@19/(signed word) anim::yr#3 )
  (signed word) mulf8s_prepared::return#10 ← phi( anim::@19/(signed word) mulf8s_prepared::return#5 )
  (signed word~) anim::$12 ← (signed word) mulf8s_prepared::return#10
  (signed word~) anim::$13 ← (signed word~) anim::$12 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (signed word) anim::yr#1 ← (signed word) anim::yr#2 + (signed word~) anim::$13
  (byte~) anim::$14 ← > (signed word) anim::xr#3
  (signed byte~) anim::$15 ← ((signed byte)) (byte~) anim::$14
  (signed word/signed byte/signed dword~) anim::$16 ← (signed byte~) anim::$15 + (byte/signed byte/word/signed word/dword/signed dword) 89
  (signed word/signed dword/signed byte~) anim::$17 ← (signed word/signed byte/signed dword~) anim::$16 + (byte/signed byte/word/signed word/dword/signed dword) 24
  (signed word/signed dword/signed byte~) anim::$18 ← (signed word/signed dword/signed byte~) anim::$17 + (byte/signed byte/word/signed word/dword/signed dword) 60
  (signed word) anim::xpos#0 ← (signed word/signed dword/signed byte~) anim::$18
  (byte~) anim::$19 ← > (signed word) anim::yr#1
  (signed byte~) anim::$20 ← ((signed byte)) (byte~) anim::$19
  (signed word/signed byte/signed dword~) anim::$21 ← (signed byte~) anim::$20 + (byte/signed byte/word/signed word/dword/signed dword) 89
  (signed word/signed dword/signed byte~) anim::$22 ← (signed word/signed byte/signed dword~) anim::$21 + (byte/signed byte/word/signed word/dword/signed dword) 51
  (signed word) anim::ypos#0 ← (signed word/signed dword/signed byte~) anim::$22
  (byte~) anim::$23 ← < (signed word) anim::xpos#0
  *((byte*) SPRITES_XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte~) anim::$23
  (byte~) anim::$24 ← > (signed word) anim::xpos#0
  *((byte*) SPRITES_XMSB#0) ← (byte~) anim::$24
  (byte~) anim::$25 ← < (signed word) anim::ypos#0
  *((byte*) SPRITES_YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte~) anim::$25
  (byte) anim::angle#1 ← ++ (byte) anim::angle#4
  *((byte*) BORDERCOL#0) ← -- *((byte*) BORDERCOL#0)
  to:anim::@1
anim::@return: scope:[anim]  from anim::@1
  return 
  to:@return
@17: scope:[]  from @14
  (byte*) SIN#17 ← phi( @14/(byte*) SIN#0 )
  (byte*) SCREEN#4 ← phi( @14/(byte*) SCREEN#0 )
  (byte*) SPRITE#2 ← phi( @14/(byte*) SPRITE#0 )
  (byte*) COS#2 ← phi( @14/(byte*) COS#0 )
  kickasm(location (byte*) COS#2) {{ {
    .var min = -$7fff
    .var max = $7fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
    	.var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }
 }}
  kickasm(location (byte*) SPRITE#2) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
  call main 
  to:@18
@18: scope:[]  from @17
  to:@end
@end: scope:[]  from @18

SYMBOL TABLE SSA
(byte*~) $0
(label) @14
(label) @17
(label) @18
(label) @3
(label) @begin
(label) @end
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte*) COS
(byte*) COS#0
(byte*) COS#1
(byte*) COS#10
(byte*) COS#11
(byte*) COS#12
(byte*) COS#13
(byte*) COS#14
(byte*) COS#15
(byte*) COS#16
(byte*) COS#17
(byte*) COS#18
(byte*) COS#19
(byte*) COS#2
(byte*) COS#3
(byte*) COS#4
(byte*) COS#5
(byte*) COS#6
(byte*) COS#7
(byte*) COS#8
(byte*) COS#9
(byte) GREEN
(byte) GREEN#0
(byte*) RASTER
(byte*) RASTER#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SIN
(byte*) SIN#0
(byte*) SIN#1
(byte*) SIN#10
(byte*) SIN#11
(byte*) SIN#12
(byte*) SIN#13
(byte*) SIN#14
(byte*) SIN#15
(byte*) SIN#16
(byte*) SIN#17
(byte*) SIN#18
(byte*) SIN#19
(byte*) SIN#2
(byte*) SIN#3
(byte*) SIN#4
(byte*) SIN#5
(byte*) SIN#6
(byte*) SIN#7
(byte*) SIN#8
(byte*) SIN#9
(byte*) SPRITE
(byte*) SPRITE#0
(byte*) SPRITE#1
(byte*) SPRITE#2
(byte*) SPRITE#3
(byte*) SPRITE#4
(byte*) SPRITE#5
(byte*) SPRITES_COLS
(byte*) SPRITES_COLS#0
(byte*) SPRITES_ENABLE
(byte*) SPRITES_ENABLE#0
(byte*) SPRITES_XMSB
(byte*) SPRITES_XMSB#0
(byte*) SPRITES_XPOS
(byte*) SPRITES_XPOS#0
(byte*) SPRITES_YPOS
(byte*) SPRITES_YPOS#0
(void()) anim()
(bool~) anim::$1
(signed word~) anim::$10
(signed word~) anim::$11
(signed word~) anim::$12
(signed word~) anim::$13
(byte~) anim::$14
(signed byte~) anim::$15
(signed word/signed byte/signed dword~) anim::$16
(signed word/signed dword/signed byte~) anim::$17
(signed word/signed dword/signed byte~) anim::$18
(byte~) anim::$19
(signed byte~) anim::$2
(signed byte~) anim::$20
(signed word/signed byte/signed dword~) anim::$21
(signed word/signed dword/signed byte~) anim::$22
(byte~) anim::$23
(byte~) anim::$24
(byte~) anim::$25
(signed word~) anim::$4
(signed word~) anim::$5
(signed word~) anim::$6
(signed word~) anim::$7
(signed byte~) anim::$8
(label) anim::@1
(label) anim::@13
(label) anim::@14
(label) anim::@15
(label) anim::@16
(label) anim::@17
(label) anim::@18
(label) anim::@19
(label) anim::@2
(label) anim::@20
(label) anim::@4
(label) anim::@5
(label) anim::@6
(label) anim::@return
(byte) anim::angle
(byte) anim::angle#0
(byte) anim::angle#1
(byte) anim::angle#10
(byte) anim::angle#11
(byte) anim::angle#12
(byte) anim::angle#13
(byte) anim::angle#14
(byte) anim::angle#15
(byte) anim::angle#16
(byte) anim::angle#2
(byte) anim::angle#3
(byte) anim::angle#4
(byte) anim::angle#5
(byte) anim::angle#6
(byte) anim::angle#7
(byte) anim::angle#8
(byte) anim::angle#9
(signed byte) anim::cos_a
(signed byte) anim::cos_a#0
(label) anim::mulf8s_prepare1
(byte~) anim::mulf8s_prepare1_$0
(byte) anim::mulf8s_prepare1_$0#0
(signed byte) anim::mulf8s_prepare1_a
(signed byte) anim::mulf8s_prepare1_a#0
(signed byte) anim::mulf8s_prepare1_a#1
(label) anim::mulf8s_prepare2
(byte~) anim::mulf8s_prepare2_$0
(byte) anim::mulf8s_prepare2_$0#0
(signed byte) anim::mulf8s_prepare2_a
(signed byte) anim::mulf8s_prepare2_a#0
(signed byte) anim::mulf8s_prepare2_a#1
(signed byte) anim::sin_a
(signed byte) anim::sin_a#0
(signed byte) anim::x
(signed byte) anim::x#0
(signed byte) anim::x#1
(signed byte) anim::x#10
(signed byte) anim::x#11
(signed byte) anim::x#12
(signed byte) anim::x#13
(signed byte) anim::x#14
(signed byte) anim::x#15
(signed byte) anim::x#2
(signed byte) anim::x#3
(signed byte) anim::x#4
(signed byte) anim::x#5
(signed byte) anim::x#6
(signed byte) anim::x#7
(signed byte) anim::x#8
(signed byte) anim::x#9
(signed word) anim::xpos
(signed word) anim::xpos#0
(signed word) anim::xr
(signed word) anim::xr#0
(signed word) anim::xr#1
(signed word) anim::xr#2
(signed word) anim::xr#3
(signed word) anim::xr#4
(signed word) anim::xr#5
(signed word) anim::xr#6
(signed word) anim::xr#7
(signed byte) anim::y
(signed byte) anim::y#0
(signed byte) anim::y#1
(signed byte) anim::y#10
(signed byte) anim::y#11
(signed byte) anim::y#12
(signed byte) anim::y#13
(signed byte) anim::y#14
(signed byte) anim::y#15
(signed byte) anim::y#2
(signed byte) anim::y#3
(signed byte) anim::y#4
(signed byte) anim::y#5
(signed byte) anim::y#6
(signed byte) anim::y#7
(signed byte) anim::y#8
(signed byte) anim::y#9
(signed word) anim::ypos
(signed word) anim::ypos#0
(signed word) anim::yr
(signed word) anim::yr#0
(signed word) anim::yr#1
(signed word) anim::yr#2
(signed word) anim::yr#3
(signed word) anim::yr#4
(signed word) anim::yr#5
(signed word) anim::yr#6
(void()) init()
(byte*~) init::$1
(byte~) init::$2
(byte*~) init::$3
(byte~) init::$4
(bool~) init::$5
(label) init::@1
(label) init::@3
(label) init::@return
(byte) init::i
(byte) init::i#0
(byte) init::i#1
(byte) init::i#2
(byte) init::i2
(byte) init::i2#0
(byte) init::spr_x
(byte) init::spr_x#0
(byte) init::spr_x#1
(byte) init::spr_x#2
(byte*) init::sprites_ptr
(byte*) init::sprites_ptr#0
(byte*) init::sprites_ptr#1
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(signed word()) mulf8s_prepared((signed byte) mulf8s_prepared::b)
(byte~) mulf8s_prepared::$0
(word~) mulf8s_prepared::$1
(byte~) mulf8s_prepared::$11
(byte~) mulf8s_prepared::$12
(byte~) mulf8s_prepared::$13
(signed word~) mulf8s_prepared::$14
(byte~) mulf8s_prepared::$15
(byte~) mulf8s_prepared::$16
(bool~) mulf8s_prepared::$2
(bool~) mulf8s_prepared::$3
(byte~) mulf8s_prepared::$5
(byte~) mulf8s_prepared::$6
(byte~) mulf8s_prepared::$7
(bool~) mulf8s_prepared::$8
(bool~) mulf8s_prepared::$9
(label) mulf8s_prepared::@1
(label) mulf8s_prepared::@2
(label) mulf8s_prepared::@3
(label) mulf8s_prepared::@4
(label) mulf8s_prepared::@6
(label) mulf8s_prepared::@return
(signed byte) mulf8s_prepared::b
(signed byte) mulf8s_prepared::b#0
(signed byte) mulf8s_prepared::b#1
(signed byte) mulf8s_prepared::b#2
(signed byte) mulf8s_prepared::b#3
(signed byte) mulf8s_prepared::b#4
(signed byte) mulf8s_prepared::b#5
(signed byte) mulf8s_prepared::b#6
(signed byte) mulf8s_prepared::b#7
(word) mulf8s_prepared::m
(word) mulf8s_prepared::m#0
(word) mulf8s_prepared::m#1
(word) mulf8s_prepared::m#2
(word) mulf8s_prepared::m#3
(word) mulf8s_prepared::m#4
(word) mulf8s_prepared::m#5
(word) mulf8s_prepared::m#6
(signed byte*) mulf8s_prepared::memA
(signed byte*) mulf8s_prepared::memA#0
(signed word) mulf8s_prepared::return
(signed word) mulf8s_prepared::return#0
(signed word) mulf8s_prepared::return#1
(signed word) mulf8s_prepared::return#10
(signed word) mulf8s_prepared::return#2
(signed word) mulf8s_prepared::return#3
(signed word) mulf8s_prepared::return#4
(signed word) mulf8s_prepared::return#5
(signed word) mulf8s_prepared::return#6
(signed word) mulf8s_prepared::return#7
(signed word) mulf8s_prepared::return#8
(signed word) mulf8s_prepared::return#9
(void()) mulf8u_prepare((byte) mulf8u_prepare::a)
(label) mulf8u_prepare::@return
(byte) mulf8u_prepare::a
(byte) mulf8u_prepare::a#0
(byte) mulf8u_prepare::a#1
(byte) mulf8u_prepare::a#2
(byte*) mulf8u_prepare::memA
(byte*) mulf8u_prepare::memA#0
(word()) mulf8u_prepared((byte) mulf8u_prepared::b)
(label) mulf8u_prepared::@return
(byte) mulf8u_prepared::b
(byte) mulf8u_prepared::b#0
(byte) mulf8u_prepared::b#1
(byte*) mulf8u_prepared::memB
(byte*) mulf8u_prepared::memB#0
(byte*) mulf8u_prepared::resL
(byte*) mulf8u_prepared::resL#0
(word) mulf8u_prepared::return
(word) mulf8u_prepared::return#0
(word) mulf8u_prepared::return#1
(word) mulf8u_prepared::return#2
(word) mulf8u_prepared::return#3
(word) mulf8u_prepared::return#4
(void()) mulf_init()
(byte*~) mulf_init::$0
(byte*~) mulf_init::$1
(signed byte/signed word/signed dword~) mulf_init::$10
(byte~) mulf_init::$11
(byte~) mulf_init::$12
(bool~) mulf_init::$13
(bool~) mulf_init::$14
(byte*~) mulf_init::$15
(bool~) mulf_init::$16
(byte*~) mulf_init::$17
(byte*~) mulf_init::$18
(byte*~) mulf_init::$19
(byte~) mulf_init::$2
(byte*~) mulf_init::$20
(bool~) mulf_init::$3
(bool~) mulf_init::$4
(byte~) mulf_init::$5
(byte~) mulf_init::$6
(word~) mulf_init::$7
(byte*~) mulf_init::$8
(bool~) mulf_init::$9
(label) mulf_init::@1
(label) mulf_init::@2
(label) mulf_init::@3
(label) mulf_init::@4
(label) mulf_init::@5
(label) mulf_init::@6
(label) mulf_init::@7
(label) mulf_init::@8
(label) mulf_init::@return
(byte) mulf_init::c
(byte) mulf_init::c#0
(byte) mulf_init::c#1
(byte) mulf_init::c#2
(byte) mulf_init::c#3
(byte) mulf_init::c#4
(byte) mulf_init::dir
(byte) mulf_init::dir#0
(byte) mulf_init::dir#1
(byte) mulf_init::dir#2
(byte) mulf_init::dir#3
(word) mulf_init::sqr
(word) mulf_init::sqr#0
(word) mulf_init::sqr#1
(word) mulf_init::sqr#2
(word) mulf_init::sqr#3
(word) mulf_init::sqr#4
(word) mulf_init::sqr#5
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#0
(byte*) mulf_init::sqr1_hi#1
(byte*) mulf_init::sqr1_hi#2
(byte*) mulf_init::sqr1_hi#3
(byte*) mulf_init::sqr1_hi#4
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#0
(byte*) mulf_init::sqr1_lo#1
(byte*) mulf_init::sqr1_lo#2
(byte*) mulf_init::sqr1_lo#3
(byte*) mulf_init::sqr1_lo#4
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#0
(byte*) mulf_init::sqr2_hi#1
(byte*) mulf_init::sqr2_hi#2
(byte*) mulf_init::sqr2_hi#3
(byte*) mulf_init::sqr2_hi#4
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#0
(byte*) mulf_init::sqr2_lo#1
(byte*) mulf_init::sqr2_lo#2
(byte*) mulf_init::sqr2_lo#3
(byte*) mulf_init::sqr2_lo#4
(byte) mulf_init::x_2
(byte) mulf_init::x_2#0
(byte) mulf_init::x_2#1
(byte) mulf_init::x_2#2
(byte) mulf_init::x_2#3
(byte) mulf_init::x_2#4
(byte) mulf_init::x_255
(byte) mulf_init::x_255#0
(byte) mulf_init::x_255#1
(byte) mulf_init::x_255#2
(byte) mulf_init::x_255#3
(byte) mulf_init::x_255#4
(byte[512]) mulf_sqr1_hi
(byte[512]) mulf_sqr1_hi#0
(byte[512]) mulf_sqr1_lo
(byte[512]) mulf_sqr1_lo#0
(byte[512]) mulf_sqr2_hi
(byte[512]) mulf_sqr2_hi#0
(byte[512]) mulf_sqr2_lo
(byte[512]) mulf_sqr2_lo#0

Culled Empty Block (label) main::@2
Culled Empty Block (label) @18
Successful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not (bool~) mulf_init::$4 ← (byte~) mulf_init::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) mulf_init::$3 ← (byte~) mulf_init::$2 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) mulf_init::$14 ← (byte) mulf_init::x_255#1 != (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) mulf_init::$13 ← (byte) mulf_init::x_255#1 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) mulf8s_prepared::$3 ← *((signed byte*) mulf8s_prepared::memA#0) >= (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) mulf8s_prepared::$2 ← *((signed byte*) mulf8s_prepared::memA#0) < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) mulf8s_prepared::$9 ← (signed byte) mulf8s_prepared::b#5 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) mulf8s_prepared::$8 ← (signed byte) mulf8s_prepared::b#5 < (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) mulf_init::sqr1_hi#0 = (byte*~) mulf_init::$0 
Alias (byte*) mulf_init::sqr1_lo#0 = (byte*~) mulf_init::$1 
Alias (word) mulf_init::sqr#1 = (word~) mulf_init::$7 
Alias (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#4 
Alias (word) mulf_init::sqr#4 = (word) mulf_init::sqr#5 
Alias (byte*) mulf_init::sqr1_lo#3 = (byte*) mulf_init::sqr1_lo#4 
Alias (byte*) mulf_init::sqr1_hi#3 = (byte*) mulf_init::sqr1_hi#4 
Alias (byte) mulf_init::c#1 = (byte) mulf_init::c#4 
Alias (byte) mulf_init::x_255#0 = (byte~) mulf_init::$11 
Alias (byte) mulf_init::x_255#1 = (byte~) mulf_init::$12 (byte) mulf_init::x_255#4 
Alias (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#4 
Alias (byte*) mulf_init::sqr2_hi#1 = (byte*) mulf_init::sqr2_hi#4 
Alias (word) mulf8u_prepared::return#0 = (word) mulf8u_prepared::return#3 (word) mulf8u_prepared::return#1 
Alias (byte) mulf8u_prepared::b#0 = (byte~) mulf8s_prepared::$0 
Alias (word) mulf8u_prepared::return#2 = (word) mulf8u_prepared::return#4 
Alias (signed byte) mulf8s_prepared::b#4 = (signed byte) mulf8s_prepared::b#7 (signed byte) mulf8s_prepared::b#6 
Alias (word) mulf8s_prepared::m#0 = (word~) mulf8s_prepared::$1 (word) mulf8s_prepared::m#3 
Alias (byte~) mulf8s_prepared::$15 = (byte~) mulf8s_prepared::$7 
Alias (signed word) mulf8s_prepared::return#0 = (signed word~) mulf8s_prepared::$14 (signed word) mulf8s_prepared::return#6 (signed word) mulf8s_prepared::return#1 
Alias (word) mulf8s_prepared::m#5 = (word) mulf8s_prepared::m#6 
Alias (byte~) mulf8s_prepared::$16 = (byte~) mulf8s_prepared::$13 
Alias (byte*) SIN#0 = (byte*~) $0 (byte*) SIN#17 
Alias (byte*) COS#11 = (byte*) COS#9 
Alias (byte*) SIN#13 = (byte*) SIN#15 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#2 
Alias (byte*) SPRITE#3 = (byte*) SPRITE#4 
Alias (byte*) init::sprites_ptr#0 = (byte*~) init::$1 
Alias (byte) init::i2#0 = (byte~) init::$2 
Alias (byte*) COS#4 = (byte*) COS#6 
Alias (byte) anim::angle#12 = (byte) anim::angle#8 
Alias (signed byte) anim::x#11 = (signed byte) anim::x#14 
Alias (signed byte) anim::y#11 = (signed byte) anim::y#13 
Alias (byte*) SIN#10 = (byte*) SIN#8 
Alias (byte*) COS#1 = (byte*) COS#5 (byte*) COS#3 (byte*) COS#19 (byte*) COS#18 (byte*) COS#17 (byte*) COS#16 (byte*) COS#15 (byte*) COS#14 (byte*) COS#13 (byte*) COS#12 (byte*) COS#10 (byte*) COS#8 
Alias (byte) anim::angle#10 = (byte) anim::angle#9 (byte) anim::angle#5 (byte) anim::angle#2 (byte) anim::angle#15 (byte) anim::angle#13 (byte) anim::angle#6 (byte) anim::angle#3 (byte) anim::angle#16 (byte) anim::angle#14 (byte) anim::angle#11 (byte) anim::angle#7 (byte) anim::angle#4 
Alias (signed byte) anim::x#1 = (signed byte) anim::x#12 (signed byte) anim::x#9 (signed byte) anim::x#7 (signed byte) anim::x#5 (signed byte) anim::x#3 (signed byte) anim::x#13 (signed byte) anim::x#10 (signed byte) anim::x#8 (signed byte) anim::x#6 (signed byte) anim::x#4 (signed byte) anim::x#2 (signed byte) anim::x#15 
Alias (signed byte) anim::y#1 = (signed byte) anim::y#12 (signed byte) anim::y#10 (signed byte) anim::y#9 (signed byte) anim::y#7 (signed byte) anim::y#5 (signed byte) anim::y#3 (signed byte) anim::y#8 (signed byte) anim::y#6 (signed byte) anim::y#4 (signed byte) anim::y#2 (signed byte) anim::y#15 (signed byte) anim::y#14 
Alias (byte*) SIN#1 = (byte*) SIN#9 (byte*) SIN#7 (byte*) SIN#6 (byte*) SIN#5 (byte*) SIN#4 (byte*) SIN#3 (byte*) SIN#2 (byte*) SIN#19 (byte*) SIN#18 (byte*) SIN#16 (byte*) SIN#14 (byte*) SIN#12 
Alias (signed byte) anim::mulf8s_prepare1_a#0 = (signed byte) anim::cos_a#0 (signed byte~) anim::$2 (signed byte) anim::mulf8s_prepare1_a#1 
Alias (byte) mulf8u_prepare::a#0 = (byte) anim::mulf8s_prepare1_$0#0 
Alias (signed word) mulf8s_prepared::return#2 = (signed word) mulf8s_prepared::return#7 
Alias (signed word) anim::xr#0 = (signed word~) anim::$5 (signed word) anim::xr#7 (signed word) anim::xr#6 (signed word) anim::xr#5 (signed word) anim::xr#4 (signed word) anim::xr#2 
Alias (signed word) mulf8s_prepared::return#3 = (signed word) mulf8s_prepared::return#8 
Alias (signed word) anim::yr#0 = (signed word~) anim::$7 (signed word) anim::yr#6 (signed word) anim::yr#5 (signed word) anim::yr#4 (signed word) anim::yr#3 (signed word) anim::yr#2 
Alias (signed byte) anim::mulf8s_prepare2_a#0 = (signed byte) anim::sin_a#0 (signed byte~) anim::$8 (signed byte) anim::mulf8s_prepare2_a#1 
Alias (byte) mulf8u_prepare::a#1 = (byte) anim::mulf8s_prepare2_$0#0 
Alias (signed word) mulf8s_prepared::return#4 = (signed word) mulf8s_prepared::return#9 
Alias (signed word) mulf8s_prepared::return#10 = (signed word) mulf8s_prepared::return#5 
Alias (signed word) anim::xr#1 = (signed word) anim::xr#3 
Alias (signed word) anim::xpos#0 = (signed word/signed dword/signed byte~) anim::$18 
Alias (signed word) anim::ypos#0 = (signed word/signed dword/signed byte~) anim::$22 
Alias (byte*) COS#0 = (byte*) COS#2 
Alias (byte*) SPRITE#0 = (byte*) SPRITE#2 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#4 
Successful SSA optimization Pass2AliasElimination
Alias (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#3 
Alias (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#3 
Alias (byte) mulf_init::c#1 = (byte) mulf_init::c#3 
Alias (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#3 
Alias (byte) mulf_init::x_255#1 = (byte) mulf_init::x_255#3 
Alias (byte*) mulf_init::sqr2_hi#1 = (byte*) mulf_init::sqr2_hi#3 
Alias (signed byte) mulf8s_prepared::b#4 = (signed byte) mulf8s_prepared::b#5 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) SPRITE#1
Self Phi Eliminated (byte*) init::sprites_ptr#1
Self Phi Eliminated (byte*) COS#1
Self Phi Eliminated (byte) anim::angle#10
Self Phi Eliminated (signed byte) anim::x#1
Self Phi Eliminated (signed byte) anim::y#1
Self Phi Eliminated (byte*) SIN#1
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) mulf8u_prepared::b#1 (byte) mulf8u_prepared::b#0
Redundant Phi (byte*) SCREEN#3 (byte*) SCREEN#0
Redundant Phi (byte*) SPRITE#5 (byte*) SPRITE#0
Redundant Phi (byte*) COS#11 (byte*) COS#0
Redundant Phi (byte*) SIN#13 (byte*) SIN#0
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#3
Redundant Phi (byte*) SPRITE#3 (byte*) SPRITE#5
Redundant Phi (byte*) SPRITE#1 (byte*) SPRITE#3
Redundant Phi (byte*) init::sprites_ptr#1 (byte*) init::sprites_ptr#0
Redundant Phi (byte*) COS#7 (byte*) COS#11
Redundant Phi (byte*) SIN#11 (byte*) SIN#13
Redundant Phi (byte*) COS#1 (byte*) COS#4
Redundant Phi (byte) anim::angle#10 (byte) anim::angle#12
Redundant Phi (signed byte) anim::x#1 (signed byte) anim::x#11
Redundant Phi (signed byte) anim::y#1 (signed byte) anim::y#11
Redundant Phi (byte*) SIN#1 (byte*) SIN#10
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) mulf_init::$4 if((byte~) mulf_init::$2!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@2
Simple Condition (bool~) mulf_init::$9 if((byte*) mulf_init::sqr1_lo#1!=(byte*~) mulf_init::$8) goto mulf_init::@1
Simple Condition (bool~) mulf_init::$14 if((byte) mulf_init::x_255#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@4
Simple Condition (bool~) mulf_init::$16 if((byte*) mulf_init::sqr2_lo#1!=(byte*~) mulf_init::$15) goto mulf_init::@3
Simple Condition (bool~) mulf8s_prepared::$3 if(*((signed byte*) mulf8s_prepared::memA#0)>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf8s_prepared::@1
Simple Condition (bool~) mulf8s_prepared::$9 if((signed byte) mulf8s_prepared::b#4>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf8s_prepared::@2
Simple Condition (bool~) init::$5 if((byte) init::i#1!=rangelast(0,7)) goto init::@1
Simple Condition (bool~) anim::$1 if(*((byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@5
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) SPRITES_XPOS#0 = ((byte*))53248
Constant (const byte*) SPRITES_YPOS#0 = ((byte*))53249
Constant (const byte*) SPRITES_XMSB#0 = ((byte*))53264
Constant (const byte*) RASTER#0 = ((byte*))53266
Constant (const byte*) SPRITES_ENABLE#0 = ((byte*))53269
Constant (const byte*) BORDERCOL#0 = ((byte*))53280
Constant (const byte*) SPRITES_COLS#0 = ((byte*))53287
Constant (const byte) GREEN#0 = 5
Constant (const byte[512]) mulf_sqr1_lo#0 = { fill( 512, 0) }
Constant (const byte[512]) mulf_sqr1_hi#0 = { fill( 512, 0) }
Constant (const byte[512]) mulf_sqr2_lo#0 = { fill( 512, 0) }
Constant (const byte[512]) mulf_sqr2_hi#0 = { fill( 512, 0) }
Constant (const word) mulf_init::sqr#0 = 0
Constant (const byte) mulf_init::x_2#0 = 0
Constant (const byte) mulf_init::c#0 = 0
Constant (const signed byte/signed word/signed dword) mulf_init::$10 = -1
Constant (const byte) mulf_init::dir#0 = 255
Constant (const byte) mulf_init::dir#1 = 1
Constant (const byte*) mulf8u_prepare::memA#0 = ((byte*))253
Constant (const byte*) mulf8u_prepared::resL#0 = ((byte*))254
Constant (const byte*) mulf8u_prepared::memB#0 = ((byte*))255
Constant (const signed byte*) mulf8s_prepared::memA#0 = ((signed byte*))253
Constant (const byte*) SCREEN#0 = ((byte*))1024
Constant (const byte*) SPRITE#0 = ((byte*))12288
Constant (const byte*) COS#0 = ((byte*))8192
Constant (const byte) init::spr_x#0 = 60
Constant (const byte) init::i#0 = 0
Constant (const byte) anim::angle#0 = 0
Constant (const signed byte) anim::x#0 = 89
Constant (const signed byte) anim::y#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) mulf_init::sqr1_hi#0 = mulf_sqr1_hi#0+1
Constant (const byte*) mulf_init::sqr1_lo#0 = mulf_sqr1_lo#0+1
Constant (const byte*) mulf_init::$8 = mulf_sqr1_lo#0+512
Constant (const byte) mulf_init::x_255#0 = ((byte))mulf_init::$10
Constant (const byte*) mulf_init::sqr2_hi#0 = mulf_sqr2_hi#0
Constant (const byte*) mulf_init::sqr2_lo#0 = mulf_sqr2_lo#0
Constant (const byte*) mulf_init::$15 = mulf_sqr2_lo#0+511
Constant (const byte*) mulf_init::$17 = mulf_sqr2_lo#0+511
Constant (const byte*) mulf_init::$18 = mulf_sqr1_lo#0+256
Constant (const byte*) mulf_init::$19 = mulf_sqr2_hi#0+511
Constant (const byte*) mulf_init::$20 = mulf_sqr1_hi#0+256
Constant (const byte*) SIN#0 = COS#0+64
Constant (const byte*) init::sprites_ptr#0 = SCREEN#0+1016
Constant (const byte*) init::$3 = SPRITE#0/64
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) init::$4 = ((byte))init::$3
Successful SSA optimization Pass2ConstantIdentification
Consolidated constant in assignment anim::$17
Consolidated constant in assignment anim::xpos#0
Consolidated constant in assignment anim::ypos#0
Consolidated array index constant in *(SPRITES_XPOS#0+0)
Consolidated array index constant in *(SPRITES_YPOS#0+0)
Successful SSA optimization Pass2ConstantAdditionElimination
if() condition always true - replacing block destination if(true) goto anim::@2
Successful SSA optimization Pass2ConstantIfs
Fixing inline constructor with mulf8u_prepared::$0 ← *(mulf8u_prepared::memB#0) w= *(mulf8u_prepared::resL#0)
Successful SSA optimization Pass2FixInlineConstructors
Inferred type updated to signed byte in (signed word/signed byte/signed dword~) anim::$16 ← (signed byte~) anim::$15
Inferred type updated to signed byte in (signed word/signed dword/signed byte~) anim::$17 ← (signed byte~) anim::$16
Inferred type updated to signed byte in (signed word/signed byte/signed dword~) anim::$21 ← (signed byte~) anim::$20
Eliminating Noop Cast (byte) mulf8u_prepared::b#0 ← ((byte)) (signed byte) mulf8s_prepared::b#4
Eliminating Noop Cast (byte~) mulf8s_prepared::$6 ← ((byte)) (signed byte) mulf8s_prepared::b#4
Eliminating Noop Cast (signed word) mulf8s_prepared::return#0 ← ((signed word)) (word) mulf8s_prepared::m#4
Eliminating Noop Cast (byte~) mulf8s_prepared::$12 ← ((byte)) *((const signed byte*) mulf8s_prepared::memA#0)
Eliminating Noop Cast (signed byte) anim::mulf8s_prepare1_a#0 ← ((signed byte)) *((byte*) COS#4 + (byte) anim::angle#12)
Eliminating Noop Cast (byte) mulf8u_prepare::a#0 ← ((byte)) (signed byte) anim::mulf8s_prepare1_a#0
Eliminating Noop Cast (signed byte) anim::mulf8s_prepare2_a#0 ← ((signed byte)) *((byte*) SIN#10 + (byte) anim::angle#12)
Eliminating Noop Cast (byte) mulf8u_prepare::a#1 ← ((byte)) (signed byte) anim::mulf8s_prepare2_a#0
Eliminating Noop Cast (signed byte~) anim::$15 ← ((signed byte)) (byte~) anim::$14
Eliminating Noop Cast (signed byte~) anim::$20 ← ((signed byte)) (byte~) anim::$19
Successful SSA optimization Pass2NopCastElimination
Removing unused block anim::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolved ranged next value init::i#1 ← ++ init::i#2 to ++
Resolved ranged comparison value if(init::i#1!=rangelast(0,7)) goto init::@1 to (byte/signed byte/word/signed word/dword/signed dword) 8
Culled Empty Block (label) @3
Culled Empty Block (label) mulf_init::@6
Culled Empty Block (label) @14
Culled Empty Block (label) anim::@2
Culled Empty Block (label) anim::@5
Culled Empty Block (label) anim::@15
Culled Empty Block (label) anim::@18
Successful SSA optimization Pass2CullEmptyBlocks
Alias (word) mulf8u_prepared::return#0 = (word~) mulf8u_prepared::$0 
Alias (signed byte~) anim::$17 = (signed byte~) anim::$16 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) COS#4
Self Phi Eliminated (signed byte) anim::x#11
Self Phi Eliminated (signed byte) anim::y#11
Self Phi Eliminated (byte*) SIN#10
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) COS#4 (const byte*) COS#0
Redundant Phi (signed byte) anim::x#11 (const signed byte) anim::x#0
Redundant Phi (signed byte) anim::y#11 (const signed byte) anim::y#0
Redundant Phi (byte*) SIN#10 (const byte*) SIN#0
Successful SSA optimization Pass2RedundantPhiElimination
Constant (const signed byte) mulf8s_prepared::b#0 = anim::x#0
Constant (const signed byte) mulf8s_prepared::b#1 = anim::y#0
Constant (const signed byte) mulf8s_prepared::b#2 = anim::y#0
Constant (const signed byte) mulf8s_prepared::b#3 = anim::x#0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const word) mulf_init::sqr#0
Inlining constant with var siblings (const byte) mulf_init::x_2#0
Inlining constant with var siblings (const byte) mulf_init::c#0
Inlining constant with var siblings (const byte) mulf_init::dir#0
Inlining constant with var siblings (const byte) mulf_init::dir#1
Inlining constant with var siblings (const byte*) mulf_init::sqr1_hi#0
Inlining constant with var siblings (const byte*) mulf_init::sqr1_lo#0
Inlining constant with var siblings (const byte) mulf_init::x_255#0
Inlining constant with var siblings (const byte*) mulf_init::sqr2_hi#0
Inlining constant with var siblings (const byte*) mulf_init::sqr2_lo#0
Inlining constant with var siblings (const signed byte) mulf8s_prepared::b#0
Inlining constant with var siblings (const signed byte) mulf8s_prepared::b#1
Inlining constant with var siblings (const signed byte) mulf8s_prepared::b#2
Inlining constant with var siblings (const signed byte) mulf8s_prepared::b#3
Inlining constant with var siblings (const byte) init::spr_x#0
Inlining constant with var siblings (const byte) init::i#0
Inlining constant with var siblings (const byte) anim::angle#0
Constant inlined mulf_init::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulf_init::sqr2_lo#0 = (const byte[512]) mulf_sqr2_lo#0
Constant inlined init::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulf_init::sqr2_hi#0 = (const byte[512]) mulf_sqr2_hi#0
Constant inlined mulf_init::dir#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mulf_init::dir#0 = (byte/word/signed word/dword/signed dword) 255
Constant inlined init::$4 = ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64
Constant inlined mulf_init::$20 = (const byte[512]) mulf_sqr1_hi#0+(word/signed word/dword/signed dword) 256
Constant inlined mulf_init::x_255#0 = ((byte))-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mulf8s_prepared::b#1 = (const signed byte) anim::y#0
Constant inlined mulf8s_prepared::b#0 = (const signed byte) anim::x#0
Constant inlined mulf8s_prepared::b#3 = (const signed byte) anim::x#0
Constant inlined mulf8s_prepared::b#2 = (const signed byte) anim::y#0
Constant inlined mulf_init::x_2#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined init::spr_x#0 = (byte/signed byte/word/signed word/dword/signed dword) 60
Constant inlined mulf_init::sqr#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined init::$3 = (const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64
Constant inlined anim::angle#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulf_init::$8 = (const byte[512]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) 512
Constant inlined mulf_init::sqr1_hi#0 = (const byte[512]) mulf_sqr1_hi#0+(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mulf_init::$10 = -(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mulf_init::sqr1_lo#0 = (const byte[512]) mulf_sqr1_lo#0+(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mulf_init::$15 = (const byte[512]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) 511
Constant inlined mulf_init::$18 = (const byte[512]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) 256
Constant inlined mulf_init::$19 = (const byte[512]) mulf_sqr2_hi#0+(word/signed word/dword/signed dword) 511
Constant inlined mulf_init::$17 = (const byte[512]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) 511
Successful SSA optimization Pass2ConstantInlining
Simplifying constant plus zero SPRITES_XPOS#0+0
Simplifying constant plus zero SPRITES_YPOS#0+0
Added new block during phi lifting mulf8s_prepared::@7(between mulf8s_prepared::@6 and mulf8s_prepared::@1)
Added new block during phi lifting mulf8s_prepared::@8(between mulf8s_prepared::@1 and mulf8s_prepared::@2)
Added new block during phi lifting init::@4(between init::@1 and init::@1)
Added new block during phi lifting mulf_init::@9(between mulf_init::@2 and mulf_init::@1)
Added new block during phi lifting mulf_init::@10(between mulf_init::@1 and mulf_init::@2)
Added new block during phi lifting mulf_init::@11(between mulf_init::@4 and mulf_init::@3)
Added new block during phi lifting mulf_init::@12(between mulf_init::@3 and mulf_init::@4)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of anim
Adding NOP phi() at start of anim::@13
Adding NOP phi() at start of anim::@14
Adding NOP phi() at start of init
Adding NOP phi() at start of mulf_init
Adding NOP phi() at start of mulf_init::@7
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to init:6 anim:8 
Calls in [anim] to mulf8u_prepare:15 mulf8s_prepared:17 mulf8s_prepared:21 mulf8u_prepare:26 mulf8s_prepared:28 mulf8s_prepared:33 
Calls in [mulf8s_prepared] to mulf8u_prepared:54 
Calls in [init] to mulf_init:81 

Created 19 initial phi equivalence classes
Coalesced [52] anim::angle#17 ← anim::angle#1
Coalesced [61] mulf8s_prepared::m#7 ← mulf8s_prepared::m#1
Coalesced [67] mulf8s_prepared::m#10 ← mulf8s_prepared::m#2
Coalesced [70] mulf8s_prepared::m#9 ← mulf8s_prepared::m#5
Coalesced [71] mulf8s_prepared::m#8 ← mulf8s_prepared::m#0
Coalesced [93] init::i#3 ← init::i#1
Coalesced [94] init::spr_x#3 ← init::spr_x#1
Coalesced [102] mulf_init::sqr#8 ← mulf_init::sqr#2
Coalesced [103] mulf_init::x_2#7 ← mulf_init::x_2#1
Coalesced [126] mulf_init::x_255#5 ← mulf_init::x_255#1
Coalesced [127] mulf_init::sqr2_lo#5 ← mulf_init::sqr2_lo#1
Coalesced [128] mulf_init::sqr2_hi#5 ← mulf_init::sqr2_hi#1
Coalesced [129] mulf_init::dir#4 ← mulf_init::dir#3
Coalesced (already) [130] mulf_init::dir#5 ← mulf_init::dir#2
Coalesced [131] mulf_init::c#5 ← mulf_init::c#1
Coalesced [132] mulf_init::sqr#6 ← mulf_init::sqr#1
Coalesced [133] mulf_init::sqr1_lo#5 ← mulf_init::sqr1_lo#1
Coalesced [134] mulf_init::sqr1_hi#5 ← mulf_init::sqr1_hi#1
Coalesced [135] mulf_init::x_2#5 ← mulf_init::x_2#2
Coalesced [136] mulf_init::sqr#7 ← mulf_init::sqr#4
Coalesced (already) [137] mulf_init::x_2#6 ← mulf_init::x_2#3
Coalesced down to 15 phi equivalence classes
Culled Empty Block (label) mulf8s_prepared::@8
Culled Empty Block (label) mulf8s_prepared::@7
Culled Empty Block (label) init::@4
Culled Empty Block (label) mulf_init::@7
Culled Empty Block (label) mulf_init::@11
Culled Empty Block (label) mulf_init::@9
Culled Empty Block (label) mulf_init::@10
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of anim
Adding NOP phi() at start of anim::@13
Adding NOP phi() at start of anim::@14
Adding NOP phi() at start of init
Adding NOP phi() at start of mulf_init
Adding NOP phi() at start of mulf_init::@12

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@17
@17: scope:[]  from @begin
  kickasm(location (const byte*) COS#0) {{ {
    .var min = -$7fff
    .var max = $7fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
    	.var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }
 }}
  kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
  [3] call main  [ ] ( )
  to:@end
@end: scope:[]  from @17
  [4] phi() [ ] ( )
main: scope:[main]  from @17
  asm { sei  }
  [6] call init  [ ] ( main:3 [ ] )
  to:main::@1
main::@1: scope:[main]  from main
  [7] phi() [ ] ( main:3 [ ] )
  [8] call anim  [ ] ( main:3 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@1
  [9] return  [ ] ( main:3 [ ] )
  to:@return
anim: scope:[anim]  from main::@1
  [10] phi() [ ] ( main:3::anim:8 [ ] )
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@20
  [11] (byte) anim::angle#12 ← phi( anim/(byte/signed byte/word/signed word/dword/signed dword) 0 anim::@20/(byte) anim::angle#1 ) [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] )
  to:anim::@4
anim::@4: scope:[anim]  from anim::@1 anim::@4
  [12] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4 [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] )
  to:anim::@6
anim::@6: scope:[anim]  from anim::@4
  [13] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] )
  to:anim::mulf8s_prepare1
anim::mulf8s_prepare1: scope:[anim]  from anim::@6
  [14] (byte~) mulf8u_prepare::a#3 ← (byte)(signed byte)*((const byte*) COS#0 + (byte) anim::angle#12) [ anim::angle#12 mulf8u_prepare::a#3 ] ( main:3::anim:8 [ anim::angle#12 mulf8u_prepare::a#3 ] )
  [15] call mulf8u_prepare  [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] )
  to:anim::@13
anim::@13: scope:[anim]  from anim::mulf8s_prepare1
  [16] phi() [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] )
  [17] call mulf8s_prepared  [ anim::angle#12 mulf8s_prepared::m#4 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::m#4 ] )
  [18] (signed word) mulf8s_prepared::return#2 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 mulf8s_prepared::return#2 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::return#2 ] )
  to:anim::@16
anim::@16: scope:[anim]  from anim::@13
  [19] (signed word~) anim::$4 ← (signed word) mulf8s_prepared::return#2 [ anim::angle#12 anim::$4 ] ( main:3::anim:8 [ anim::angle#12 anim::$4 ] )
  [20] (signed word) anim::xr#0 ← (signed word~) anim::$4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 ] )
  [21] call mulf8s_prepared  [ anim::angle#12 mulf8s_prepared::m#4 anim::xr#0 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::m#4 anim::xr#0 ] )
  [22] (signed word) mulf8s_prepared::return#3 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::xr#0 mulf8s_prepared::return#3 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 mulf8s_prepared::return#3 ] )
  to:anim::@17
anim::@17: scope:[anim]  from anim::@16
  [23] (signed word~) anim::$6 ← (signed word) mulf8s_prepared::return#3 [ anim::angle#12 anim::xr#0 anim::$6 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::$6 ] )
  [24] (signed word) anim::yr#0 ← (signed word~) anim::$6 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 anim::yr#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 ] )
  to:anim::mulf8s_prepare2
anim::mulf8s_prepare2: scope:[anim]  from anim::@17
  [25] (byte~) mulf8u_prepare::a#4 ← (byte)(signed byte)*((const byte*) SIN#0 + (byte) anim::angle#12) [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8u_prepare::a#4 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8u_prepare::a#4 ] )
  [26] call mulf8u_prepare  [ anim::angle#12 anim::xr#0 anim::yr#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 ] )
  to:anim::@14
anim::@14: scope:[anim]  from anim::mulf8s_prepare2
  [27] phi() [ anim::angle#12 anim::xr#0 anim::yr#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 ] )
  [28] call mulf8s_prepared  [ anim::angle#12 mulf8s_prepared::m#4 anim::xr#0 anim::yr#0 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::m#4 anim::xr#0 anim::yr#0 ] )
  [29] (signed word) mulf8s_prepared::return#4 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::return#4 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::return#4 ] )
  to:anim::@19
anim::@19: scope:[anim]  from anim::@14
  [30] (signed word~) anim::$10 ← (signed word) mulf8s_prepared::return#4 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$10 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$10 ] )
  [31] (signed word~) anim::$11 ← (signed word~) anim::$10 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$11 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$11 ] )
  [32] (signed word) anim::xr#1 ← (signed word) anim::xr#0 - (signed word~) anim::$11 [ anim::angle#12 anim::yr#0 anim::xr#1 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 ] )
  [33] call mulf8s_prepared  [ anim::angle#12 mulf8s_prepared::m#4 anim::yr#0 anim::xr#1 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::m#4 anim::yr#0 anim::xr#1 ] )
  [34] (signed word) mulf8s_prepared::return#10 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::return#10 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::return#10 ] )
  to:anim::@20
anim::@20: scope:[anim]  from anim::@19
  [35] (signed word~) anim::$12 ← (signed word) mulf8s_prepared::return#10 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$12 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$12 ] )
  [36] (signed word~) anim::$13 ← (signed word~) anim::$12 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$13 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$13 ] )
  [37] (signed word) anim::yr#1 ← (signed word) anim::yr#0 + (signed word~) anim::$13 [ anim::angle#12 anim::xr#1 anim::yr#1 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#1 anim::yr#1 ] )
  [38] (byte~) anim::$14 ← > (signed word) anim::xr#1 [ anim::angle#12 anim::yr#1 anim::$14 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#1 anim::$14 ] )
  [39] (signed byte~) anim::$17 ← (signed byte)(byte~) anim::$14 [ anim::angle#12 anim::yr#1 anim::$17 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#1 anim::$17 ] )
  [40] (signed word) anim::xpos#0 ← (signed byte~) anim::$17 + (byte/signed byte/word/signed word/dword/signed dword) 89+(byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 60 [ anim::angle#12 anim::yr#1 anim::xpos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#1 anim::xpos#0 ] )
  [41] (byte~) anim::$19 ← > (signed word) anim::yr#1 [ anim::angle#12 anim::xpos#0 anim::$19 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::$19 ] )
  [42] (signed byte~) anim::$21 ← (signed byte)(byte~) anim::$19 [ anim::angle#12 anim::xpos#0 anim::$21 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::$21 ] )
  [43] (signed word) anim::ypos#0 ← (signed byte~) anim::$21 + (byte/signed byte/word/signed word/dword/signed dword) 89+(byte/signed byte/word/signed word/dword/signed dword) 51 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] )
  [44] (byte~) anim::$23 ← < (signed word) anim::xpos#0 [ anim::angle#12 anim::xpos#0 anim::ypos#0 anim::$23 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::ypos#0 anim::$23 ] )
  [45] *((const byte*) SPRITES_XPOS#0) ← (byte~) anim::$23 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] )
  [46] (byte~) anim::$24 ← > (signed word) anim::xpos#0 [ anim::angle#12 anim::ypos#0 anim::$24 ] ( main:3::anim:8 [ anim::angle#12 anim::ypos#0 anim::$24 ] )
  [47] *((const byte*) SPRITES_XMSB#0) ← (byte~) anim::$24 [ anim::angle#12 anim::ypos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::ypos#0 ] )
  [48] (byte~) anim::$25 ← < (signed word) anim::ypos#0 [ anim::angle#12 anim::$25 ] ( main:3::anim:8 [ anim::angle#12 anim::$25 ] )
  [49] *((const byte*) SPRITES_YPOS#0) ← (byte~) anim::$25 [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] )
  [50] (byte) anim::angle#1 ← ++ (byte) anim::angle#12 [ anim::angle#1 ] ( main:3::anim:8 [ anim::angle#1 ] )
  [51] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) [ anim::angle#1 ] ( main:3::anim:8 [ anim::angle#1 ] )
  to:anim::@1
mulf8s_prepared: scope:[mulf8s_prepared]  from anim::@13 anim::@14 anim::@16 anim::@19
  [52] (signed byte) mulf8s_prepared::b#4 ← phi( anim::@13/(const signed byte) anim::x#0 anim::@14/(const signed byte) anim::y#0 anim::@16/(const signed byte) anim::y#0 anim::@19/(const signed byte) anim::x#0 ) [ mulf8s_prepared::b#4 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 ] )
  [53] call mulf8u_prepared  [ mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] )
  [54] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0 [ mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] )
  to:mulf8s_prepared::@6
mulf8s_prepared::@6: scope:[mulf8s_prepared]  from mulf8s_prepared
  [55] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#2 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] )
  [56] if(*((const signed byte*) mulf8s_prepared::memA#0)>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf8s_prepared::@1 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] )
  to:mulf8s_prepared::@3
mulf8s_prepared::@3: scope:[mulf8s_prepared]  from mulf8s_prepared::@6
  [57] (byte~) mulf8s_prepared::$5 ← > (word) mulf8s_prepared::m#0 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] )
  [58] (byte~) mulf8s_prepared::$15 ← (byte~) mulf8s_prepared::$5 - (byte)(signed byte) mulf8s_prepared::b#4 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] )
  [59] (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#0 hi= (byte~) mulf8s_prepared::$15 [ mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] )
  to:mulf8s_prepared::@1
mulf8s_prepared::@1: scope:[mulf8s_prepared]  from mulf8s_prepared::@3 mulf8s_prepared::@6
  [60] (word) mulf8s_prepared::m#5 ← phi( mulf8s_prepared::@3/(word) mulf8s_prepared::m#1 mulf8s_prepared::@6/(word) mulf8s_prepared::m#0 ) [ mulf8s_prepared::b#4 mulf8s_prepared::m#5 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#5 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#5 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#5 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#5 ] )
  [61] if((signed byte) mulf8s_prepared::b#4>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf8s_prepared::@2 [ mulf8s_prepared::m#5 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#5 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#5 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 ] )
  to:mulf8s_prepared::@4
mulf8s_prepared::@4: scope:[mulf8s_prepared]  from mulf8s_prepared::@1
  [62] (byte~) mulf8s_prepared::$11 ← > (word) mulf8s_prepared::m#5 [ mulf8s_prepared::m#5 mulf8s_prepared::$11 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] )
  [63] (byte~) mulf8s_prepared::$16 ← (byte~) mulf8s_prepared::$11 - (byte)*((const signed byte*) mulf8s_prepared::memA#0) [ mulf8s_prepared::m#5 mulf8s_prepared::$16 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] )
  [64] (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$16 [ mulf8s_prepared::m#2 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#2 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#2 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#2 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#2 ] )
  to:mulf8s_prepared::@2
mulf8s_prepared::@2: scope:[mulf8s_prepared]  from mulf8s_prepared::@1 mulf8s_prepared::@4
  [65] (word) mulf8s_prepared::m#4 ← phi( mulf8s_prepared::@1/(word) mulf8s_prepared::m#5 mulf8s_prepared::@4/(word) mulf8s_prepared::m#2 ) [ mulf8s_prepared::m#4 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#4 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#4 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#4 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#4 ] )
  to:mulf8s_prepared::@return
mulf8s_prepared::@return: scope:[mulf8s_prepared]  from mulf8s_prepared::@2
  [66] return  [ mulf8s_prepared::m#4 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#4 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#4 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#4 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#4 ] )
  to:@return
mulf8u_prepared: scope:[mulf8u_prepared]  from mulf8s_prepared
  [67] *((const byte*) mulf8u_prepared::memB#0) ← (byte)(signed byte) mulf8s_prepared::b#4 [ mulf8s_prepared::b#4 ] ( main:3::anim:8::mulf8s_prepared:17::mulf8u_prepared:53 [ anim::angle#12 mulf8s_prepared::b#4 ] main:3::anim:8::mulf8s_prepared:21::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 ] main:3::anim:8::mulf8s_prepared:28::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 ] main:3::anim:8::mulf8s_prepared:33::mulf8u_prepared:53 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 ] )
  asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
  [69] (word) mulf8u_prepared::return#0 ← *((const byte*) mulf8u_prepared::memB#0) w= *((const byte*) mulf8u_prepared::resL#0) [ mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ( main:3::anim:8::mulf8s_prepared:17::mulf8u_prepared:53 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:21::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:28::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:33::mulf8u_prepared:53 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] )
  to:mulf8u_prepared::@return
mulf8u_prepared::@return: scope:[mulf8u_prepared]  from mulf8u_prepared
  [70] return  [ mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ( main:3::anim:8::mulf8s_prepared:17::mulf8u_prepared:53 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:21::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:28::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:33::mulf8u_prepared:53 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] )
  to:@return
mulf8u_prepare: scope:[mulf8u_prepare]  from anim::mulf8s_prepare1 anim::mulf8s_prepare2
  [71] (byte) mulf8u_prepare::a#2 ← phi( anim::mulf8s_prepare1/(byte~) mulf8u_prepare::a#3 anim::mulf8s_prepare2/(byte~) mulf8u_prepare::a#4 ) [ mulf8u_prepare::a#2 ] ( main:3::anim:8::mulf8u_prepare:15 [ anim::angle#12 mulf8u_prepare::a#2 ] main:3::anim:8::mulf8u_prepare:26 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8u_prepare::a#2 ] )
  [72] *((const byte*) mulf8u_prepare::memA#0) ← (byte) mulf8u_prepare::a#2 [ ] ( main:3::anim:8::mulf8u_prepare:15 [ anim::angle#12 ] main:3::anim:8::mulf8u_prepare:26 [ anim::angle#12 anim::xr#0 anim::yr#0 ] )
  asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
  to:mulf8u_prepare::@return
mulf8u_prepare::@return: scope:[mulf8u_prepare]  from mulf8u_prepare
  [74] return  [ ] ( main:3::anim:8::mulf8u_prepare:15 [ anim::angle#12 ] main:3::anim:8::mulf8u_prepare:26 [ anim::angle#12 anim::xr#0 anim::yr#0 ] )
  to:@return
init: scope:[init]  from main
  [75] phi() [ ] ( main:3::init:6 [ ] )
  [76] call mulf_init  [ ] ( main:3::init:6 [ ] )
  to:init::@3
init::@3: scope:[init]  from init
  [77] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:3::init:6 [ ] )
  to:init::@1
init::@1: scope:[init]  from init::@1 init::@3
  [78] (byte) init::spr_x#2 ← phi( init::@1/(byte) init::spr_x#1 init::@3/(byte/signed byte/word/signed word/dword/signed dword) 60 ) [ init::i#2 init::spr_x#2 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 ] )
  [78] (byte) init::i#2 ← phi( init::@1/(byte) init::i#1 init::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 ) [ init::i#2 init::spr_x#2 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 ] )
  [79] (byte) init::i2#0 ← (byte) init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] )
  [80] *((const byte*) init::sprites_ptr#0 + (byte) init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] )
  [81] *((const byte*) SPRITES_XPOS#0 + (byte) init::i2#0) ← (byte) init::spr_x#2 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] )
  [82] *((const byte*) SPRITES_YPOS#0 + (byte) init::i2#0) ← (byte) init::spr_x#2 [ init::i#2 init::spr_x#2 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 ] )
  [83] *((const byte*) SPRITES_COLS#0 + (byte) init::i#2) ← (const byte) GREEN#0 [ init::i#2 init::spr_x#2 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 ] )
  [84] (byte) init::spr_x#1 ← (byte) init::spr_x#2 + (byte/signed byte/word/signed word/dword/signed dword) 24 [ init::i#2 init::spr_x#1 ] ( main:3::init:6 [ init::i#2 init::spr_x#1 ] )
  [85] (byte) init::i#1 ← ++ (byte) init::i#2 [ init::i#1 init::spr_x#1 ] ( main:3::init:6 [ init::i#1 init::spr_x#1 ] )
  [86] if((byte) init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto init::@1 [ init::i#1 init::spr_x#1 ] ( main:3::init:6 [ init::i#1 init::spr_x#1 ] )
  to:init::@return
init::@return: scope:[init]  from init::@1
  [87] return  [ ] ( main:3::init:6 [ ] )
  to:@return
mulf_init: scope:[mulf_init]  from init
  [88] phi() [ ] ( main:3::init:6::mulf_init:76 [ ] )
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@2
  [89] (byte) mulf_init::x_2#3 ← phi( mulf_init/(byte/signed byte/word/signed word/dword/signed dword) 0 mulf_init::@2/(byte) mulf_init::x_2#2 ) [ mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] )
  [89] (byte*) mulf_init::sqr1_hi#2 ← phi( mulf_init/(const byte[512]) mulf_sqr1_hi#0+(byte/signed byte/word/signed word/dword/signed dword) 1 mulf_init::@2/(byte*) mulf_init::sqr1_hi#1 ) [ mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] )
  [89] (byte*) mulf_init::sqr1_lo#2 ← phi( mulf_init/(const byte[512]) mulf_sqr1_lo#0+(byte/signed byte/word/signed word/dword/signed dword) 1 mulf_init::@2/(byte*) mulf_init::sqr1_lo#1 ) [ mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] )
  [89] (word) mulf_init::sqr#4 ← phi( mulf_init/(byte/signed byte/word/signed word/dword/signed dword) 0 mulf_init::@2/(word) mulf_init::sqr#1 ) [ mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] )
  [89] (byte) mulf_init::c#2 ← phi( mulf_init/(byte/signed byte/word/signed word/dword/signed dword) 0 mulf_init::@2/(byte) mulf_init::c#1 ) [ mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] )
  [90] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 ] )
  [91] (byte~) mulf_init::$2 ← (byte) mulf_init::c#1 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$2 ] )
  [92] if((byte~) mulf_init::$2!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@2 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 ] )
  to:mulf_init::@5
mulf_init::@5: scope:[mulf_init]  from mulf_init::@1
  [93] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#1 ] )
  [94] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#1 mulf_init::sqr#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#1 mulf_init::sqr#2 ] )
  to:mulf_init::@2
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1 mulf_init::@5
  [95] (byte) mulf_init::x_2#2 ← phi( mulf_init::@1/(byte) mulf_init::x_2#3 mulf_init::@5/(byte) mulf_init::x_2#1 ) [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] )
  [95] (word) mulf_init::sqr#3 ← phi( mulf_init::@1/(word) mulf_init::sqr#4 mulf_init::@5/(word) mulf_init::sqr#2 ) [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] )
  [96] (byte~) mulf_init::$5 ← < (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$5 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$5 ] )
  [97] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] )
  [98] (byte~) mulf_init::$6 ← > (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$6 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$6 ] )
  [99] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] )
  [100] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 mulf_init::sqr#3 ] )
  [101] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] )
  [102] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] )
  [103] if((byte*) mulf_init::sqr1_lo#1!=(const byte[512]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) 512) goto mulf_init::@1 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] )
  to:mulf_init::@3
mulf_init::@3: scope:[mulf_init]  from mulf_init::@2 mulf_init::@4
  [104] (byte) mulf_init::dir#2 ← phi( mulf_init::@4/(byte) mulf_init::dir#3 mulf_init::@2/(byte/word/signed word/dword/signed dword) 255 ) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] )
  [104] (byte*) mulf_init::sqr2_hi#2 ← phi( mulf_init::@4/(byte*) mulf_init::sqr2_hi#1 mulf_init::@2/(const byte[512]) mulf_sqr2_hi#0 ) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] )
  [104] (byte*) mulf_init::sqr2_lo#2 ← phi( mulf_init::@4/(byte*) mulf_init::sqr2_lo#1 mulf_init::@2/(const byte[512]) mulf_sqr2_lo#0 ) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] )
  [104] (byte) mulf_init::x_255#2 ← phi( mulf_init::@4/(byte) mulf_init::x_255#1 mulf_init::@2/((byte))-(byte/signed byte/word/signed word/dword/signed dword) 1 ) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] )
  [105] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[512]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] )
  [106] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[512]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] )
  [107] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::sqr2_hi#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::sqr2_hi#1 ] )
  [108] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] )
  [109] if((byte) mulf_init::x_255#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@12 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] )
  to:mulf_init::@4
mulf_init::@4: scope:[mulf_init]  from mulf_init::@12 mulf_init::@3
  [110] (byte) mulf_init::dir#3 ← phi( mulf_init::@12/(byte) mulf_init::dir#2 mulf_init::@3/(byte/signed byte/word/signed word/dword/signed dword) 1 ) [ mulf_init::sqr2_lo#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr2_lo#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] )
  [111] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] )
  [112] if((byte*) mulf_init::sqr2_lo#1!=(const byte[512]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) 511) goto mulf_init::@3 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] )
  to:mulf_init::@8
mulf_init::@8: scope:[mulf_init]  from mulf_init::@4
  [113] *((const byte[512]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) 511) ← *((const byte[512]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) 256) [ ] ( main:3::init:6::mulf_init:76 [ ] )
  [114] *((const byte[512]) mulf_sqr2_hi#0+(word/signed word/dword/signed dword) 511) ← *((const byte[512]) mulf_sqr1_hi#0+(word/signed word/dword/signed dword) 256) [ ] ( main:3::init:6::mulf_init:76 [ ] )
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@8
  [115] return  [ ] ( main:3::init:6::mulf_init:76 [ ] )
  to:@return
mulf_init::@12: scope:[mulf_init]  from mulf_init::@3
  [116] phi() [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] )
  to:mulf_init::@4


VARIABLE REGISTER WEIGHTS
(byte*) BORDERCOL
(byte*) COS
(byte) GREEN
(byte*) RASTER
(byte*) SCREEN
(byte*) SIN
(byte*) SPRITE
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(void()) anim()
(signed word~) anim::$10 22.0
(signed word~) anim::$11 22.0
(signed word~) anim::$12 22.0
(signed word~) anim::$13 22.0
(byte~) anim::$14 11.0
(signed byte~) anim::$17 22.0
(byte~) anim::$19 11.0
(signed byte~) anim::$21 22.0
(byte~) anim::$23 22.0
(byte~) anim::$24 22.0
(byte~) anim::$25 22.0
(signed word~) anim::$4 22.0
(signed word~) anim::$6 22.0
(byte) anim::angle
(byte) anim::angle#1 11.0
(byte) anim::angle#12 0.5641025641025641
(signed byte) anim::cos_a
(byte~) anim::mulf8s_prepare1_$0
(signed byte) anim::mulf8s_prepare1_a
(byte~) anim::mulf8s_prepare2_$0
(signed byte) anim::mulf8s_prepare2_a
(signed byte) anim::sin_a
(signed byte) anim::x
(signed word) anim::xpos
(signed word) anim::xpos#0 5.5
(signed word) anim::xr
(signed word) anim::xr#0 1.8333333333333333
(signed word) anim::xr#1 3.6666666666666665
(signed byte) anim::y
(signed word) anim::ypos
(signed word) anim::ypos#0 4.4
(signed word) anim::yr
(signed word) anim::yr#0 1.6923076923076923
(signed word) anim::yr#1 5.5
(void()) init()
(byte) init::i
(byte) init::i#1 16.5
(byte) init::i#2 7.857142857142857
(byte) init::i2
(byte) init::i2#0 11.0
(byte) init::spr_x
(byte) init::spr_x#1 7.333333333333333
(byte) init::spr_x#2 7.333333333333333
(byte*) init::sprites_ptr
(void()) main()
(signed word()) mulf8s_prepared((signed byte) mulf8s_prepared::b)
(byte~) mulf8s_prepared::$11 4.0
(byte~) mulf8s_prepared::$15 4.0
(byte~) mulf8s_prepared::$16 4.0
(byte~) mulf8s_prepared::$5 4.0
(signed byte) mulf8s_prepared::b
(signed byte) mulf8s_prepared::b#4 0.15384615384615385
(word) mulf8s_prepared::m
(word) mulf8s_prepared::m#0 2.0
(word) mulf8s_prepared::m#1 4.0
(word) mulf8s_prepared::m#2 4.0
(word) mulf8s_prepared::m#4 0.6666666666666666
(word) mulf8s_prepared::m#5 2.5
(signed byte*) mulf8s_prepared::memA
(signed word) mulf8s_prepared::return
(signed word) mulf8s_prepared::return#10 22.0
(signed word) mulf8s_prepared::return#2 22.0
(signed word) mulf8s_prepared::return#3 22.0
(signed word) mulf8s_prepared::return#4 22.0
(void()) mulf8u_prepare((byte) mulf8u_prepare::a)
(byte) mulf8u_prepare::a
(byte) mulf8u_prepare::a#2 24.0
(byte~) mulf8u_prepare::a#3 22.0
(byte~) mulf8u_prepare::a#4 22.0
(byte*) mulf8u_prepare::memA
(word()) mulf8u_prepared((byte) mulf8u_prepared::b)
(byte) mulf8u_prepared::b
(byte*) mulf8u_prepared::memB
(byte*) mulf8u_prepared::resL
(word) mulf8u_prepared::return
(word) mulf8u_prepared::return#0 1.3333333333333333
(word) mulf8u_prepared::return#2 4.0
(void()) mulf_init()
(byte~) mulf_init::$2 22.0
(byte~) mulf_init::$5 22.0
(byte~) mulf_init::$6 22.0
(byte) mulf_init::c
(byte) mulf_init::c#1 2.357142857142857
(byte) mulf_init::c#2 22.0
(byte) mulf_init::dir
(byte) mulf_init::dir#2 4.714285714285714
(byte) mulf_init::dir#3 7.333333333333333
(word) mulf_init::sqr
(word) mulf_init::sqr#1 7.333333333333333
(word) mulf_init::sqr#2 22.0
(word) mulf_init::sqr#3 9.166666666666666
(word) mulf_init::sqr#4 6.6000000000000005
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#1 5.5
(byte*) mulf_init::sqr1_hi#2 3.0
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#1 16.5
(byte*) mulf_init::sqr1_lo#2 2.5384615384615383
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#1 3.142857142857143
(byte*) mulf_init::sqr2_hi#2 11.0
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#1 16.5
(byte*) mulf_init::sqr2_lo#2 4.125
(byte) mulf_init::x_2
(byte) mulf_init::x_2#1 11.0
(byte) mulf_init::x_2#2 4.888888888888889
(byte) mulf_init::x_2#3 8.25
(byte) mulf_init::x_255
(byte) mulf_init::x_255#1 5.5
(byte) mulf_init::x_255#2 11.0
(byte[512]) mulf_sqr1_hi
(byte[512]) mulf_sqr1_lo
(byte[512]) mulf_sqr2_hi
(byte[512]) mulf_sqr2_lo

Initial phi equivalence classes
[ anim::angle#12 anim::angle#1 ]
[ mulf8s_prepared::b#4 ]
[ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ]
[ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ]
[ init::i#2 init::i#1 ]
[ init::spr_x#2 init::spr_x#1 ]
[ mulf_init::c#2 mulf_init::c#1 ]
[ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
[ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
[ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
[ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
[ mulf_init::x_255#2 mulf_init::x_255#1 ]
[ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
[ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
[ mulf_init::dir#2 mulf_init::dir#3 ]
Added variable mulf8s_prepared::return#2 to zero page equivalence class [ mulf8s_prepared::return#2 ]
Added variable anim::$4 to zero page equivalence class [ anim::$4 ]
Added variable anim::xr#0 to zero page equivalence class [ anim::xr#0 ]
Added variable mulf8s_prepared::return#3 to zero page equivalence class [ mulf8s_prepared::return#3 ]
Added variable anim::$6 to zero page equivalence class [ anim::$6 ]
Added variable anim::yr#0 to zero page equivalence class [ anim::yr#0 ]
Added variable mulf8s_prepared::return#4 to zero page equivalence class [ mulf8s_prepared::return#4 ]
Added variable anim::$10 to zero page equivalence class [ anim::$10 ]
Added variable anim::$11 to zero page equivalence class [ anim::$11 ]
Added variable anim::xr#1 to zero page equivalence class [ anim::xr#1 ]
Added variable mulf8s_prepared::return#10 to zero page equivalence class [ mulf8s_prepared::return#10 ]
Added variable anim::$12 to zero page equivalence class [ anim::$12 ]
Added variable anim::$13 to zero page equivalence class [ anim::$13 ]
Added variable anim::yr#1 to zero page equivalence class [ anim::yr#1 ]
Added variable anim::$14 to zero page equivalence class [ anim::$14 ]
Added variable anim::$17 to zero page equivalence class [ anim::$17 ]
Added variable anim::xpos#0 to zero page equivalence class [ anim::xpos#0 ]
Added variable anim::$19 to zero page equivalence class [ anim::$19 ]
Added variable anim::$21 to zero page equivalence class [ anim::$21 ]
Added variable anim::ypos#0 to zero page equivalence class [ anim::ypos#0 ]
Added variable anim::$23 to zero page equivalence class [ anim::$23 ]
Added variable anim::$24 to zero page equivalence class [ anim::$24 ]
Added variable anim::$25 to zero page equivalence class [ anim::$25 ]
Added variable mulf8u_prepared::return#2 to zero page equivalence class [ mulf8u_prepared::return#2 ]
Added variable mulf8s_prepared::$5 to zero page equivalence class [ mulf8s_prepared::$5 ]
Added variable mulf8s_prepared::$15 to zero page equivalence class [ mulf8s_prepared::$15 ]
Added variable mulf8s_prepared::$11 to zero page equivalence class [ mulf8s_prepared::$11 ]
Added variable mulf8s_prepared::$16 to zero page equivalence class [ mulf8s_prepared::$16 ]
Added variable mulf8u_prepared::return#0 to zero page equivalence class [ mulf8u_prepared::return#0 ]
Added variable init::i2#0 to zero page equivalence class [ init::i2#0 ]
Added variable mulf_init::$2 to zero page equivalence class [ mulf_init::$2 ]
Added variable mulf_init::$5 to zero page equivalence class [ mulf_init::$5 ]
Added variable mulf_init::$6 to zero page equivalence class [ mulf_init::$6 ]
Complete equivalence classes
[ anim::angle#12 anim::angle#1 ]
[ mulf8s_prepared::b#4 ]
[ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ]
[ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ]
[ init::i#2 init::i#1 ]
[ init::spr_x#2 init::spr_x#1 ]
[ mulf_init::c#2 mulf_init::c#1 ]
[ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
[ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
[ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
[ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
[ mulf_init::x_255#2 mulf_init::x_255#1 ]
[ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
[ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
[ mulf_init::dir#2 mulf_init::dir#3 ]
[ mulf8s_prepared::return#2 ]
[ anim::$4 ]
[ anim::xr#0 ]
[ mulf8s_prepared::return#3 ]
[ anim::$6 ]
[ anim::yr#0 ]
[ mulf8s_prepared::return#4 ]
[ anim::$10 ]
[ anim::$11 ]
[ anim::xr#1 ]
[ mulf8s_prepared::return#10 ]
[ anim::$12 ]
[ anim::$13 ]
[ anim::yr#1 ]
[ anim::$14 ]
[ anim::$17 ]
[ anim::xpos#0 ]
[ anim::$19 ]
[ anim::$21 ]
[ anim::ypos#0 ]
[ anim::$23 ]
[ anim::$24 ]
[ anim::$25 ]
[ mulf8u_prepared::return#2 ]
[ mulf8s_prepared::$5 ]
[ mulf8s_prepared::$15 ]
[ mulf8s_prepared::$11 ]
[ mulf8s_prepared::$16 ]
[ mulf8u_prepared::return#0 ]
[ init::i2#0 ]
[ mulf_init::$2 ]
[ mulf_init::$5 ]
[ mulf_init::$6 ]
Allocated zp ZP_BYTE:2 [ anim::angle#12 anim::angle#1 ]
Allocated zp ZP_BYTE:3 [ mulf8s_prepared::b#4 ]
Allocated zp ZP_WORD:4 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ]
Allocated zp ZP_BYTE:6 [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ]
Allocated zp ZP_BYTE:7 [ init::i#2 init::i#1 ]
Allocated zp ZP_BYTE:8 [ init::spr_x#2 init::spr_x#1 ]
Allocated zp ZP_BYTE:9 [ mulf_init::c#2 mulf_init::c#1 ]
Allocated zp ZP_WORD:10 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
Allocated zp ZP_WORD:12 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
Allocated zp ZP_BYTE:14 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Allocated zp ZP_WORD:15 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
Allocated zp ZP_BYTE:17 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Allocated zp ZP_WORD:18 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
Allocated zp ZP_WORD:20 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
Allocated zp ZP_BYTE:22 [ mulf_init::dir#2 mulf_init::dir#3 ]
Allocated zp ZP_WORD:23 [ mulf8s_prepared::return#2 ]
Allocated zp ZP_WORD:25 [ anim::$4 ]
Allocated zp ZP_WORD:27 [ anim::xr#0 ]
Allocated zp ZP_WORD:29 [ mulf8s_prepared::return#3 ]
Allocated zp ZP_WORD:31 [ anim::$6 ]
Allocated zp ZP_WORD:33 [ anim::yr#0 ]
Allocated zp ZP_WORD:35 [ mulf8s_prepared::return#4 ]
Allocated zp ZP_WORD:37 [ anim::$10 ]
Allocated zp ZP_WORD:39 [ anim::$11 ]
Allocated zp ZP_WORD:41 [ anim::xr#1 ]
Allocated zp ZP_WORD:43 [ mulf8s_prepared::return#10 ]
Allocated zp ZP_WORD:45 [ anim::$12 ]
Allocated zp ZP_WORD:47 [ anim::$13 ]
Allocated zp ZP_WORD:49 [ anim::yr#1 ]
Allocated zp ZP_BYTE:51 [ anim::$14 ]
Allocated zp ZP_BYTE:52 [ anim::$17 ]
Allocated zp ZP_WORD:53 [ anim::xpos#0 ]
Allocated zp ZP_BYTE:55 [ anim::$19 ]
Allocated zp ZP_BYTE:56 [ anim::$21 ]
Allocated zp ZP_WORD:57 [ anim::ypos#0 ]
Allocated zp ZP_BYTE:59 [ anim::$23 ]
Allocated zp ZP_BYTE:60 [ anim::$24 ]
Allocated zp ZP_BYTE:61 [ anim::$25 ]
Allocated zp ZP_WORD:62 [ mulf8u_prepared::return#2 ]
Allocated zp ZP_BYTE:64 [ mulf8s_prepared::$5 ]
Allocated zp ZP_BYTE:65 [ mulf8s_prepared::$15 ]
Allocated zp ZP_BYTE:66 [ mulf8s_prepared::$11 ]
Allocated zp ZP_BYTE:67 [ mulf8s_prepared::$16 ]
Allocated zp ZP_WORD:68 [ mulf8u_prepared::return#0 ]
Allocated zp ZP_BYTE:70 [ init::i2#0 ]
Allocated zp ZP_BYTE:71 [ mulf_init::$2 ]
Allocated zp ZP_BYTE:72 [ mulf_init::$5 ]
Allocated zp ZP_BYTE:73 [ mulf_init::$6 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .const GREEN = 5
  .label SCREEN = $400
  .label SPRITE = $3000
  .label COS = $2000
  .label SIN = COS+$40
//SEG2 @begin
bbegin:
  jmp b17
//SEG3 @17
b17:
//SEG4 kickasm(location (const byte*) COS#0) {{ {     .var min = -$7fff     .var max = $7fff     .var ampl = max-min;     .for(var i=0;i<$140;i++) {     	.var rad = i*2*PI/256;         .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))     }     }  }}
//SEG5 kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))     .for (var y=0; y<21; y++)         .for (var x=0;x<3; x++)             .byte pic.getSinglecolorByte(x,y)  }}
//SEG6 [3] call main  [ ] ( )
  jsr main
//SEG7 [4] phi from @17 to @end [phi:@17->@end]
bend_from_b17:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 asm { sei  }
    sei
  //SEG11 [6] call init  [ ] ( main:3 [ ] )
  //SEG12 [75] phi from main to init [phi:main->init]
  init_from_main:
    jsr init
  //SEG13 [7] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [8] call anim  [ ] ( main:3 [ ] )
  //SEG16 [10] phi from main::@1 to anim [phi:main::@1->anim]
  anim_from_b1:
    jsr anim
    jmp breturn
  //SEG17 main::@return
  breturn:
  //SEG18 [9] return  [ ] ( main:3 [ ] )
    rts
}
//SEG19 anim
anim: {
    .const x = $59
    .const y = 0
    .label _4 = $19
    .label _6 = $1f
    .label _10 = $25
    .label _11 = $27
    .label _12 = $2d
    .label _13 = $2f
    .label _14 = $33
    .label _17 = $34
    .label _19 = $37
    .label _21 = $38
    .label _23 = $3b
    .label _24 = $3c
    .label _25 = $3d
    .label xr = $1b
    .label yr = $21
    .label xr_1 = $29
    .label yr_1 = $31
    .label xpos = $35
    .label ypos = $39
    .label angle = 2
  //SEG20 [11] phi from anim to anim::@1 [phi:anim->anim::@1]
  b1_from_anim:
  //SEG21 [11] phi (byte) anim::angle#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta angle
    jmp b1
  //SEG22 anim::@1
  b1:
    jmp b4
  //SEG23 anim::@4
  b4:
  //SEG24 [12] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4 [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
    jmp b6
  //SEG25 anim::@6
  b6:
  //SEG26 [13] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp mulf8s_prepare1
  //SEG27 anim::mulf8s_prepare1
  mulf8s_prepare1:
  //SEG28 [14] (byte~) mulf8u_prepare::a#3 ← (byte)(signed byte)*((const byte*) COS#0 + (byte) anim::angle#12) [ anim::angle#12 mulf8u_prepare::a#3 ] ( main:3::anim:8 [ anim::angle#12 mulf8u_prepare::a#3 ] ) -- vbuz1=pbsc1_derefidx_vbuz2 
    ldy angle
    lda COS,y
    sta mulf8u_prepare.a
  //SEG29 [15] call mulf8u_prepare  [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] )
  //SEG30 [71] phi from anim::mulf8s_prepare1 to mulf8u_prepare [phi:anim::mulf8s_prepare1->mulf8u_prepare]
  mulf8u_prepare_from_mulf8s_prepare1:
  //SEG31 [71] phi (byte) mulf8u_prepare::a#2 = (byte~) mulf8u_prepare::a#3 [phi:anim::mulf8s_prepare1->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
  //SEG32 [16] phi from anim::mulf8s_prepare1 to anim::@13 [phi:anim::mulf8s_prepare1->anim::@13]
  b13_from_mulf8s_prepare1:
    jmp b13
  //SEG33 anim::@13
  b13:
  //SEG34 [17] call mulf8s_prepared  [ anim::angle#12 mulf8s_prepared::m#4 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::m#4 ] )
  //SEG35 [52] phi from anim::@13 to mulf8s_prepared [phi:anim::@13->mulf8s_prepared]
  mulf8s_prepared_from_b13:
  //SEG36 [52] phi (signed byte) mulf8s_prepared::b#4 = (const signed byte) anim::x#0 [phi:anim::@13->mulf8s_prepared#0] -- vbsz1=vbsc1 
    lda #x
    sta mulf8s_prepared.b
    jsr mulf8s_prepared
  //SEG37 [18] (signed word) mulf8s_prepared::return#2 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 mulf8s_prepared::return#2 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::return#2 ] ) -- vwsz1=vwsz2 
    lda mulf8s_prepared.m
    sta mulf8s_prepared.return
    lda mulf8s_prepared.m+1
    sta mulf8s_prepared.return+1
    jmp b16
  //SEG38 anim::@16
  b16:
  //SEG39 [19] (signed word~) anim::$4 ← (signed word) mulf8s_prepared::return#2 [ anim::angle#12 anim::$4 ] ( main:3::anim:8 [ anim::angle#12 anim::$4 ] ) -- vwsz1=vwsz2 
    lda mulf8s_prepared.return
    sta _4
    lda mulf8s_prepared.return+1
    sta _4+1
  //SEG40 [20] (signed word) anim::xr#0 ← (signed word~) anim::$4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 ] ) -- vwsz1=vwsz2_rol_1 
    lda _4
    asl
    sta xr
    lda _4+1
    rol
    sta xr+1
  //SEG41 [21] call mulf8s_prepared  [ anim::angle#12 mulf8s_prepared::m#4 anim::xr#0 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::m#4 anim::xr#0 ] )
  //SEG42 [52] phi from anim::@16 to mulf8s_prepared [phi:anim::@16->mulf8s_prepared]
  mulf8s_prepared_from_b16:
  //SEG43 [52] phi (signed byte) mulf8s_prepared::b#4 = (const signed byte) anim::y#0 [phi:anim::@16->mulf8s_prepared#0] -- vbsz1=vbsc1 
    lda #y
    sta mulf8s_prepared.b
    jsr mulf8s_prepared
  //SEG44 [22] (signed word) mulf8s_prepared::return#3 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::xr#0 mulf8s_prepared::return#3 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 mulf8s_prepared::return#3 ] ) -- vwsz1=vwsz2 
    lda mulf8s_prepared.m
    sta mulf8s_prepared.return_3
    lda mulf8s_prepared.m+1
    sta mulf8s_prepared.return_3+1
    jmp b17
  //SEG45 anim::@17
  b17:
  //SEG46 [23] (signed word~) anim::$6 ← (signed word) mulf8s_prepared::return#3 [ anim::angle#12 anim::xr#0 anim::$6 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::$6 ] ) -- vwsz1=vwsz2 
    lda mulf8s_prepared.return_3
    sta _6
    lda mulf8s_prepared.return_3+1
    sta _6+1
  //SEG47 [24] (signed word) anim::yr#0 ← (signed word~) anim::$6 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 anim::yr#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 ] ) -- vwsz1=vwsz2_rol_1 
    lda _6
    asl
    sta yr
    lda _6+1
    rol
    sta yr+1
    jmp mulf8s_prepare2
  //SEG48 anim::mulf8s_prepare2
  mulf8s_prepare2:
  //SEG49 [25] (byte~) mulf8u_prepare::a#4 ← (byte)(signed byte)*((const byte*) SIN#0 + (byte) anim::angle#12) [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8u_prepare::a#4 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8u_prepare::a#4 ] ) -- vbuz1=pbsc1_derefidx_vbuz2 
    ldy angle
    lda SIN,y
    sta mulf8u_prepare.a
  //SEG50 [26] call mulf8u_prepare  [ anim::angle#12 anim::xr#0 anim::yr#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 ] )
  //SEG51 [71] phi from anim::mulf8s_prepare2 to mulf8u_prepare [phi:anim::mulf8s_prepare2->mulf8u_prepare]
  mulf8u_prepare_from_mulf8s_prepare2:
  //SEG52 [71] phi (byte) mulf8u_prepare::a#2 = (byte~) mulf8u_prepare::a#4 [phi:anim::mulf8s_prepare2->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
  //SEG53 [27] phi from anim::mulf8s_prepare2 to anim::@14 [phi:anim::mulf8s_prepare2->anim::@14]
  b14_from_mulf8s_prepare2:
    jmp b14
  //SEG54 anim::@14
  b14:
  //SEG55 [28] call mulf8s_prepared  [ anim::angle#12 mulf8s_prepared::m#4 anim::xr#0 anim::yr#0 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::m#4 anim::xr#0 anim::yr#0 ] )
  //SEG56 [52] phi from anim::@14 to mulf8s_prepared [phi:anim::@14->mulf8s_prepared]
  mulf8s_prepared_from_b14:
  //SEG57 [52] phi (signed byte) mulf8s_prepared::b#4 = (const signed byte) anim::y#0 [phi:anim::@14->mulf8s_prepared#0] -- vbsz1=vbsc1 
    lda #y
    sta mulf8s_prepared.b
    jsr mulf8s_prepared
  //SEG58 [29] (signed word) mulf8s_prepared::return#4 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::return#4 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::return#4 ] ) -- vwsz1=vwsz2 
    lda mulf8s_prepared.m
    sta mulf8s_prepared.return_4
    lda mulf8s_prepared.m+1
    sta mulf8s_prepared.return_4+1
    jmp b19
  //SEG59 anim::@19
  b19:
  //SEG60 [30] (signed word~) anim::$10 ← (signed word) mulf8s_prepared::return#4 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$10 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$10 ] ) -- vwsz1=vwsz2 
    lda mulf8s_prepared.return_4
    sta _10
    lda mulf8s_prepared.return_4+1
    sta _10+1
  //SEG61 [31] (signed word~) anim::$11 ← (signed word~) anim::$10 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$11 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$11 ] ) -- vwsz1=vwsz2_rol_1 
    lda _10
    asl
    sta _11
    lda _10+1
    rol
    sta _11+1
  //SEG62 [32] (signed word) anim::xr#1 ← (signed word) anim::xr#0 - (signed word~) anim::$11 [ anim::angle#12 anim::yr#0 anim::xr#1 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 ] ) -- vwsz1=vwsz2_minus_vwsz3 
    lda xr
    sec
    sbc _11
    sta xr_1
    lda xr+1
    sbc _11+1
    sta xr_1+1
  //SEG63 [33] call mulf8s_prepared  [ anim::angle#12 mulf8s_prepared::m#4 anim::yr#0 anim::xr#1 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::m#4 anim::yr#0 anim::xr#1 ] )
  //SEG64 [52] phi from anim::@19 to mulf8s_prepared [phi:anim::@19->mulf8s_prepared]
  mulf8s_prepared_from_b19:
  //SEG65 [52] phi (signed byte) mulf8s_prepared::b#4 = (const signed byte) anim::x#0 [phi:anim::@19->mulf8s_prepared#0] -- vbsz1=vbsc1 
    lda #x
    sta mulf8s_prepared.b
    jsr mulf8s_prepared
  //SEG66 [34] (signed word) mulf8s_prepared::return#10 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::return#10 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::return#10 ] ) -- vwsz1=vwsz2 
    lda mulf8s_prepared.m
    sta mulf8s_prepared.return_10
    lda mulf8s_prepared.m+1
    sta mulf8s_prepared.return_10+1
    jmp b20
  //SEG67 anim::@20
  b20:
  //SEG68 [35] (signed word~) anim::$12 ← (signed word) mulf8s_prepared::return#10 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$12 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$12 ] ) -- vwsz1=vwsz2 
    lda mulf8s_prepared.return_10
    sta _12
    lda mulf8s_prepared.return_10+1
    sta _12+1
  //SEG69 [36] (signed word~) anim::$13 ← (signed word~) anim::$12 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$13 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$13 ] ) -- vwsz1=vwsz2_rol_1 
    lda _12
    asl
    sta _13
    lda _12+1
    rol
    sta _13+1
  //SEG70 [37] (signed word) anim::yr#1 ← (signed word) anim::yr#0 + (signed word~) anim::$13 [ anim::angle#12 anim::xr#1 anim::yr#1 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#1 anim::yr#1 ] ) -- vwsz1=vwsz2_plus_vwsz3 
    lda yr_1
    clc
    adc yr
    sta _13
    lda yr_1+1
    adc yr+1
    sta _13+1
  //SEG71 [38] (byte~) anim::$14 ← > (signed word) anim::xr#1 [ anim::angle#12 anim::yr#1 anim::$14 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#1 anim::$14 ] ) -- vbuz1=_hi_vwsz2 
    lda xr_1+1
    sta _14
  //SEG72 [39] (signed byte~) anim::$17 ← (signed byte)(byte~) anim::$14 [ anim::angle#12 anim::yr#1 anim::$17 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#1 anim::$17 ] ) -- vbsz1=vbsz2 
    lda _14
    sta _17
  //SEG73 [40] (signed word) anim::xpos#0 ← (signed byte~) anim::$17 + (byte/signed byte/word/signed word/dword/signed dword) 89+(byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 60 [ anim::angle#12 anim::yr#1 anim::xpos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#1 anim::xpos#0 ] ) -- vwsz1=vbsz2_plus_vbuc1 
    lda _17
    sta xpos
    ora #$7f
    bmi !+
    lda #0
  !:
    sta xpos+1
    lda xpos
    clc
    adc #$59+$18+$3c
    sta xpos
    lda xpos+1
    adc #0
    sta xpos+1
  //SEG74 [41] (byte~) anim::$19 ← > (signed word) anim::yr#1 [ anim::angle#12 anim::xpos#0 anim::$19 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::$19 ] ) -- vbuz1=_hi_vwsz2 
    lda yr_1+1
    sta _19
  //SEG75 [42] (signed byte~) anim::$21 ← (signed byte)(byte~) anim::$19 [ anim::angle#12 anim::xpos#0 anim::$21 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::$21 ] ) -- vbsz1=vbsz2 
    lda _19
    sta _21
  //SEG76 [43] (signed word) anim::ypos#0 ← (signed byte~) anim::$21 + (byte/signed byte/word/signed word/dword/signed dword) 89+(byte/signed byte/word/signed word/dword/signed dword) 51 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ) -- vwsz1=vbsz2_plus_vbuc1 
    lda _21
    sta ypos
    ora #$7f
    bmi !+
    lda #0
  !:
    sta ypos+1
    lda ypos
    clc
    adc #$59+$33
    sta ypos
    lda ypos+1
    adc #0
    sta ypos+1
  //SEG77 [44] (byte~) anim::$23 ← < (signed word) anim::xpos#0 [ anim::angle#12 anim::xpos#0 anim::ypos#0 anim::$23 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::ypos#0 anim::$23 ] ) -- vbuz1=_lo_vwsz2 
    lda xpos
    sta _23
  //SEG78 [45] *((const byte*) SPRITES_XPOS#0) ← (byte~) anim::$23 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ) -- _deref_pbuc1=vbuz1 
    lda _23
    sta SPRITES_XPOS
  //SEG79 [46] (byte~) anim::$24 ← > (signed word) anim::xpos#0 [ anim::angle#12 anim::ypos#0 anim::$24 ] ( main:3::anim:8 [ anim::angle#12 anim::ypos#0 anim::$24 ] ) -- vbuz1=_hi_vwsz2 
    lda xpos+1
    sta _24
  //SEG80 [47] *((const byte*) SPRITES_XMSB#0) ← (byte~) anim::$24 [ anim::angle#12 anim::ypos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::ypos#0 ] ) -- _deref_pbuc1=vbuz1 
    lda _24
    sta SPRITES_XMSB
  //SEG81 [48] (byte~) anim::$25 ← < (signed word) anim::ypos#0 [ anim::angle#12 anim::$25 ] ( main:3::anim:8 [ anim::angle#12 anim::$25 ] ) -- vbuz1=_lo_vwsz2 
    lda ypos
    sta _25
  //SEG82 [49] *((const byte*) SPRITES_YPOS#0) ← (byte~) anim::$25 [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] ) -- _deref_pbuc1=vbuz1 
    lda _25
    sta SPRITES_YPOS
  //SEG83 [50] (byte) anim::angle#1 ← ++ (byte) anim::angle#12 [ anim::angle#1 ] ( main:3::anim:8 [ anim::angle#1 ] ) -- vbuz1=_inc_vbuz1 
    inc angle
  //SEG84 [51] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) [ anim::angle#1 ] ( main:3::anim:8 [ anim::angle#1 ] ) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
  //SEG85 [11] phi from anim::@20 to anim::@1 [phi:anim::@20->anim::@1]
  b1_from_b20:
  //SEG86 [11] phi (byte) anim::angle#12 = (byte) anim::angle#1 [phi:anim::@20->anim::@1#0] -- register_copy 
    jmp b1
}
//SEG87 mulf8s_prepared
mulf8s_prepared: {
    .label memA = $fd
    .label _5 = $40
    .label _11 = $42
    .label _15 = $41
    .label _16 = $43
    .label m = 4
    .label return = $17
    .label return_3 = $1d
    .label return_4 = $23
    .label b = 3
    .label return_10 = $2b
  //SEG88 [53] call mulf8u_prepared  [ mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] )
    jsr mulf8u_prepared
  //SEG89 [54] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0 [ mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] ) -- vwuz1=vwuz2 
    lda mulf8u_prepared.return
    sta mulf8u_prepared.return_2
    lda mulf8u_prepared.return+1
    sta mulf8u_prepared.return_2+1
    jmp b6
  //SEG90 mulf8s_prepared::@6
  b6:
  //SEG91 [55] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#2 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ) -- vwuz1=vwuz2 
    lda mulf8u_prepared.return_2
    sta m
    lda mulf8u_prepared.return_2+1
    sta m+1
  //SEG92 [56] if(*((const signed byte*) mulf8s_prepared::memA#0)>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf8s_prepared::@1 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ) -- _deref_pbsc1_ge_0_then_la1 
    lda memA
    cmp #0
    bpl b1_from_b6
    jmp b3
  //SEG93 mulf8s_prepared::@3
  b3:
  //SEG94 [57] (byte~) mulf8s_prepared::$5 ← > (word) mulf8s_prepared::m#0 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] ) -- vbuz1=_hi_vwuz2 
    lda m+1
    sta _5
  //SEG95 [58] (byte~) mulf8s_prepared::$15 ← (byte~) mulf8s_prepared::$5 - (byte)(signed byte) mulf8s_prepared::b#4 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] ) -- vbuz1=vbuz2_minus_vbuz3 
    lda _5
    sec
    sbc b
    sta _15
  //SEG96 [59] (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#0 hi= (byte~) mulf8s_prepared::$15 [ mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] ) -- vwuz1=vwuz1_sethi_vbuz2 
    lda _15
    sta m+1
  //SEG97 [60] phi from mulf8s_prepared::@3 mulf8s_prepared::@6 to mulf8s_prepared::@1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@6->mulf8s_prepared::@1]
  b1_from_b3:
  b1_from_b6:
  //SEG98 [60] phi (word) mulf8s_prepared::m#5 = (word) mulf8s_prepared::m#1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@6->mulf8s_prepared::@1#0] -- register_copy 
    jmp b1
  //SEG99 mulf8s_prepared::@1
  b1:
  //SEG100 [61] if((signed byte) mulf8s_prepared::b#4>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf8s_prepared::@2 [ mulf8s_prepared::m#5 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#5 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#5 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 ] ) -- vbsz1_ge_0_then_la1 
    lda b
    cmp #0
    bpl b2_from_b1
    jmp b4
  //SEG101 mulf8s_prepared::@4
  b4:
  //SEG102 [62] (byte~) mulf8s_prepared::$11 ← > (word) mulf8s_prepared::m#5 [ mulf8s_prepared::m#5 mulf8s_prepared::$11 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] ) -- vbuz1=_hi_vwuz2 
    lda m+1
    sta _11
  //SEG103 [63] (byte~) mulf8s_prepared::$16 ← (byte~) mulf8s_prepared::$11 - (byte)*((const signed byte*) mulf8s_prepared::memA#0) [ mulf8s_prepared::m#5 mulf8s_prepared::$16 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] ) -- vbuz1=vbuz2_minus__deref_pbuc1 
    lda _11
    sec
    sbc memA
    sta _16
  //SEG104 [64] (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$16 [ mulf8s_prepared::m#2 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#2 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#2 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#2 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#2 ] ) -- vwuz1=vwuz1_sethi_vbuz2 
    lda _16
    sta m+1
  //SEG105 [65] phi from mulf8s_prepared::@1 mulf8s_prepared::@4 to mulf8s_prepared::@2 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG106 [65] phi (word) mulf8s_prepared::m#4 = (word) mulf8s_prepared::m#5 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2#0] -- register_copy 
    jmp b2
  //SEG107 mulf8s_prepared::@2
  b2:
    jmp breturn
  //SEG108 mulf8s_prepared::@return
  breturn:
  //SEG109 [66] return  [ mulf8s_prepared::m#4 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#4 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#4 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#4 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#4 ] )
    rts
}
//SEG110 mulf8u_prepared
mulf8u_prepared: {
    .label resL = $fe
    .label memB = $ff
    .label return = $44
    .label return_2 = $3e
  //SEG111 [67] *((const byte*) mulf8u_prepared::memB#0) ← (byte)(signed byte) mulf8s_prepared::b#4 [ mulf8s_prepared::b#4 ] ( main:3::anim:8::mulf8s_prepared:17::mulf8u_prepared:53 [ anim::angle#12 mulf8s_prepared::b#4 ] main:3::anim:8::mulf8s_prepared:21::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 ] main:3::anim:8::mulf8s_prepared:28::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 ] main:3::anim:8::mulf8s_prepared:33::mulf8u_prepared:53 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 ] ) -- _deref_pbuc1=vbuz1 
    lda mulf8s_prepared.b
    sta memB
  //SEG112 asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
    ldx memB
    sec
  sm1:
    lda mulf_sqr1_lo,x
  sm2:
    sbc mulf_sqr2_lo,x
    sta resL
  sm3:
    lda mulf_sqr1_hi,x
  sm4:
    sbc mulf_sqr2_hi,x
    sta memB
  //SEG113 [69] (word) mulf8u_prepared::return#0 ← *((const byte*) mulf8u_prepared::memB#0) w= *((const byte*) mulf8u_prepared::resL#0) [ mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ( main:3::anim:8::mulf8s_prepared:17::mulf8u_prepared:53 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:21::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:28::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:33::mulf8u_prepared:53 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda resL
    sta return
    lda memB
    sta return+1
    jmp breturn
  //SEG114 mulf8u_prepared::@return
  breturn:
  //SEG115 [70] return  [ mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ( main:3::anim:8::mulf8s_prepared:17::mulf8u_prepared:53 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:21::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:28::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:33::mulf8u_prepared:53 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] )
    rts
}
//SEG116 mulf8u_prepare
mulf8u_prepare: {
    .label memA = $fd
    .label a = 6
  //SEG117 [72] *((const byte*) mulf8u_prepare::memA#0) ← (byte) mulf8u_prepare::a#2 [ ] ( main:3::anim:8::mulf8u_prepare:15 [ anim::angle#12 ] main:3::anim:8::mulf8u_prepare:26 [ anim::angle#12 anim::xr#0 anim::yr#0 ] ) -- _deref_pbuc1=vbuz1 
    lda a
    sta memA
  //SEG118 asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
    lda memA
    sta mulf8u_prepared.sm1+1
    sta mulf8u_prepared.sm3+1
    eor #$ff
    sta mulf8u_prepared.sm2+1
    sta mulf8u_prepared.sm4+1
    jmp breturn
  //SEG119 mulf8u_prepare::@return
  breturn:
  //SEG120 [74] return  [ ] ( main:3::anim:8::mulf8u_prepare:15 [ anim::angle#12 ] main:3::anim:8::mulf8u_prepare:26 [ anim::angle#12 anim::xr#0 anim::yr#0 ] )
    rts
}
//SEG121 init
init: {
    .label sprites_ptr = SCREEN+$3f8
    .label i2 = $46
    .label spr_x = 8
    .label i = 7
  //SEG122 [76] call mulf_init  [ ] ( main:3::init:6 [ ] )
  //SEG123 [88] phi from init to mulf_init [phi:init->mulf_init]
  mulf_init_from_init:
    jsr mulf_init
    jmp b3
  //SEG124 init::@3
  b3:
  //SEG125 [77] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:3::init:6 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta SPRITES_ENABLE
  //SEG126 [78] phi from init::@3 to init::@1 [phi:init::@3->init::@1]
  b1_from_b3:
  //SEG127 [78] phi (byte) init::spr_x#2 = (byte/signed byte/word/signed word/dword/signed dword) 60 [phi:init::@3->init::@1#0] -- vbuz1=vbuc1 
    lda #$3c
    sta spr_x
  //SEG128 [78] phi (byte) init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@3->init::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG129 [78] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  b1_from_b1:
  //SEG130 [78] phi (byte) init::spr_x#2 = (byte) init::spr_x#1 [phi:init::@1->init::@1#0] -- register_copy 
  //SEG131 [78] phi (byte) init::i#2 = (byte) init::i#1 [phi:init::@1->init::@1#1] -- register_copy 
    jmp b1
  //SEG132 init::@1
  b1:
  //SEG133 [79] (byte) init::i2#0 ← (byte) init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] ) -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta i2
  //SEG134 [80] *((const byte*) init::sprites_ptr#0 + (byte) init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] ) -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy i
    lda #$ff&SPRITE/$40
    sta sprites_ptr,y
  //SEG135 [81] *((const byte*) SPRITES_XPOS#0 + (byte) init::i2#0) ← (byte) init::spr_x#2 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda spr_x
    ldy i2
    sta SPRITES_XPOS,y
  //SEG136 [82] *((const byte*) SPRITES_YPOS#0 + (byte) init::i2#0) ← (byte) init::spr_x#2 [ init::i#2 init::spr_x#2 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda spr_x
    ldy i2
    sta SPRITES_YPOS,y
  //SEG137 [83] *((const byte*) SPRITES_COLS#0 + (byte) init::i#2) ← (const byte) GREEN#0 [ init::i#2 init::spr_x#2 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 ] ) -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy i
    lda #GREEN
    sta SPRITES_COLS,y
  //SEG138 [84] (byte) init::spr_x#1 ← (byte) init::spr_x#2 + (byte/signed byte/word/signed word/dword/signed dword) 24 [ init::i#2 init::spr_x#1 ] ( main:3::init:6 [ init::i#2 init::spr_x#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #$18
    clc
    adc spr_x
    sta spr_x
  //SEG139 [85] (byte) init::i#1 ← ++ (byte) init::i#2 [ init::i#1 init::spr_x#1 ] ( main:3::init:6 [ init::i#1 init::spr_x#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG140 [86] if((byte) init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto init::@1 [ init::i#1 init::spr_x#1 ] ( main:3::init:6 [ init::i#1 init::spr_x#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #8
    bne b1_from_b1
    jmp breturn
  //SEG141 init::@return
  breturn:
  //SEG142 [87] return  [ ] ( main:3::init:6 [ ] )
    rts
}
//SEG143 mulf_init
mulf_init: {
    .label _2 = $47
    .label _5 = $48
    .label _6 = $49
    .label c = 9
    .label sqr1_hi = $c
    .label sqr = $f
    .label sqr1_lo = $a
    .label x_2 = $e
    .label sqr2_hi = $14
    .label x_255 = $11
    .label sqr2_lo = $12
    .label dir = $16
  //SEG144 [89] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  b1_from_mulf_init:
  //SEG145 [89] phi (byte) mulf_init::x_2#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x_2
  //SEG146 [89] phi (byte*) mulf_init::sqr1_hi#2 = (const byte[512]) mulf_sqr1_hi#0+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta sqr1_hi+1
  //SEG147 [89] phi (byte*) mulf_init::sqr1_lo#2 = (const byte[512]) mulf_sqr1_lo#0+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta sqr1_lo+1
  //SEG148 [89] phi (word) mulf_init::sqr#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta sqr
    lda #>0
    sta sqr+1
  //SEG149 [89] phi (byte) mulf_init::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#4] -- vbuz1=vbuc1 
    lda #0
    sta c
    jmp b1
  //SEG150 [89] phi from mulf_init::@2 to mulf_init::@1 [phi:mulf_init::@2->mulf_init::@1]
  b1_from_b2:
  //SEG151 [89] phi (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#2 [phi:mulf_init::@2->mulf_init::@1#0] -- register_copy 
  //SEG152 [89] phi (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#1 [phi:mulf_init::@2->mulf_init::@1#1] -- register_copy 
  //SEG153 [89] phi (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#1 [phi:mulf_init::@2->mulf_init::@1#2] -- register_copy 
  //SEG154 [89] phi (word) mulf_init::sqr#4 = (word) mulf_init::sqr#1 [phi:mulf_init::@2->mulf_init::@1#3] -- register_copy 
  //SEG155 [89] phi (byte) mulf_init::c#2 = (byte) mulf_init::c#1 [phi:mulf_init::@2->mulf_init::@1#4] -- register_copy 
    jmp b1
  //SEG156 mulf_init::@1
  b1:
  //SEG157 [90] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 ] ) -- vbuz1=_inc_vbuz1 
    inc c
  //SEG158 [91] (byte~) mulf_init::$2 ← (byte) mulf_init::c#1 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$2 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and c
    sta _2
  //SEG159 [92] if((byte~) mulf_init::$2!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@2 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 ] ) -- vbuz1_neq_0_then_la1 
    lda _2
    bne b2_from_b1
    jmp b5
  //SEG160 mulf_init::@5
  b5:
  //SEG161 [93] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#1 ] ) -- vbuz1=_inc_vbuz1 
    inc x_2
  //SEG162 [94] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#1 mulf_init::sqr#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#1 mulf_init::sqr#2 ] ) -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
  //SEG163 [95] phi from mulf_init::@1 mulf_init::@5 to mulf_init::@2 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2]
  b2_from_b1:
  b2_from_b5:
  //SEG164 [95] phi (byte) mulf_init::x_2#2 = (byte) mulf_init::x_2#3 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2#0] -- register_copy 
  //SEG165 [95] phi (word) mulf_init::sqr#3 = (word) mulf_init::sqr#4 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2#1] -- register_copy 
    jmp b2
  //SEG166 mulf_init::@2
  b2:
  //SEG167 [96] (byte~) mulf_init::$5 ← < (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$5 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$5 ] ) -- vbuz1=_lo_vwuz2 
    lda sqr
    sta _5
  //SEG168 [97] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) -- _deref_pbuz1=vbuz2 
    lda _5
    ldy #0
    sta (sqr1_lo),y
  //SEG169 [98] (byte~) mulf_init::$6 ← > (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$6 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$6 ] ) -- vbuz1=_hi_vwuz2 
    lda sqr+1
    sta _6
  //SEG170 [99] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) -- _deref_pbuz1=vbuz2 
    lda _6
    ldy #0
    sta (sqr1_hi),y
  //SEG171 [100] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr1_hi
    bne !+
    inc sqr1_hi+1
  !:
  //SEG172 [101] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) -- vwuz1=vwuz1_plus_vbuz2 
    lda x_2
    clc
    adc sqr
    sta sqr
    lda #0
    adc sqr+1
    sta sqr+1
  //SEG173 [102] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr1_lo
    bne !+
    inc sqr1_lo+1
  !:
  //SEG174 [103] if((byte*) mulf_init::sqr1_lo#1!=(const byte[512]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) 512) goto mulf_init::@1 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne b1_from_b2
    lda sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne b1_from_b2
  //SEG175 [104] phi from mulf_init::@2 to mulf_init::@3 [phi:mulf_init::@2->mulf_init::@3]
  b3_from_b2:
  //SEG176 [104] phi (byte) mulf_init::dir#2 = (byte/word/signed word/dword/signed dword) 255 [phi:mulf_init::@2->mulf_init::@3#0] -- vbuz1=vbuc1 
    lda #$ff
    sta dir
  //SEG177 [104] phi (byte*) mulf_init::sqr2_hi#2 = (const byte[512]) mulf_sqr2_hi#0 [phi:mulf_init::@2->mulf_init::@3#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta sqr2_hi
    lda #>mulf_sqr2_hi
    sta sqr2_hi+1
  //SEG178 [104] phi (byte*) mulf_init::sqr2_lo#2 = (const byte[512]) mulf_sqr2_lo#0 [phi:mulf_init::@2->mulf_init::@3#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta sqr2_lo
    lda #>mulf_sqr2_lo
    sta sqr2_lo+1
  //SEG179 [104] phi (byte) mulf_init::x_255#2 = ((byte))-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init::@2->mulf_init::@3#3] -- vbuz1=vbuc1 
    lda #-1
    sta x_255
    jmp b3
  //SEG180 [104] phi from mulf_init::@4 to mulf_init::@3 [phi:mulf_init::@4->mulf_init::@3]
  b3_from_b4:
  //SEG181 [104] phi (byte) mulf_init::dir#2 = (byte) mulf_init::dir#3 [phi:mulf_init::@4->mulf_init::@3#0] -- register_copy 
  //SEG182 [104] phi (byte*) mulf_init::sqr2_hi#2 = (byte*) mulf_init::sqr2_hi#1 [phi:mulf_init::@4->mulf_init::@3#1] -- register_copy 
  //SEG183 [104] phi (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#1 [phi:mulf_init::@4->mulf_init::@3#2] -- register_copy 
  //SEG184 [104] phi (byte) mulf_init::x_255#2 = (byte) mulf_init::x_255#1 [phi:mulf_init::@4->mulf_init::@3#3] -- register_copy 
    jmp b3
  //SEG185 mulf_init::@3
  b3:
  //SEG186 [105] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[512]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy x_255
    lda mulf_sqr1_lo,y
    ldy #0
    sta (sqr2_lo),y
  //SEG187 [106] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[512]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy x_255
    lda mulf_sqr1_hi,y
    ldy #0
    sta (sqr2_hi),y
  //SEG188 [107] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::sqr2_hi#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::sqr2_hi#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr2_hi
    bne !+
    inc sqr2_hi+1
  !:
  //SEG189 [108] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ) -- vbuz1=vbuz1_plus_vbuz2 
    lda x_255
    clc
    adc dir
    sta x_255
  //SEG190 [109] if((byte) mulf_init::x_255#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@12 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ) -- vbuz1_neq_0_then_la1 
    lda x_255
    bne b12_from_b3
  //SEG191 [110] phi from mulf_init::@3 to mulf_init::@4 [phi:mulf_init::@3->mulf_init::@4]
  b4_from_b3:
  //SEG192 [110] phi (byte) mulf_init::dir#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init::@3->mulf_init::@4#0] -- vbuz1=vbuc1 
    lda #1
    sta dir
    jmp b4
  //SEG193 mulf_init::@4
  b4:
  //SEG194 [111] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr2_lo
    bne !+
    inc sqr2_lo+1
  !:
  //SEG195 [112] if((byte*) mulf_init::sqr2_lo#1!=(const byte[512]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) 511) goto mulf_init::@3 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne b3_from_b4
    lda sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne b3_from_b4
    jmp b8
  //SEG196 mulf_init::@8
  b8:
  //SEG197 [113] *((const byte[512]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) 511) ← *((const byte[512]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) 256) [ ] ( main:3::init:6::mulf_init:76 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
  //SEG198 [114] *((const byte[512]) mulf_sqr2_hi#0+(word/signed word/dword/signed dword) 511) ← *((const byte[512]) mulf_sqr1_hi#0+(word/signed word/dword/signed dword) 256) [ ] ( main:3::init:6::mulf_init:76 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
    jmp breturn
  //SEG199 mulf_init::@return
  breturn:
  //SEG200 [115] return  [ ] ( main:3::init:6::mulf_init:76 [ ] )
    rts
  //SEG201 [116] phi from mulf_init::@3 to mulf_init::@12 [phi:mulf_init::@3->mulf_init::@12]
  b12_from_b3:
    jmp b12
  //SEG202 mulf_init::@12
  b12:
  //SEG203 [110] phi from mulf_init::@12 to mulf_init::@4 [phi:mulf_init::@12->mulf_init::@4]
  b4_from_b12:
  //SEG204 [110] phi (byte) mulf_init::dir#3 = (byte) mulf_init::dir#2 [phi:mulf_init::@12->mulf_init::@4#0] -- register_copy 
    jmp b4
}
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  .align $100
  mulf_sqr2_hi: .fill $200, 0
.pc = COS "Inline"
  {
    .var min = -$7fff
    .var max = $7fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
    	.var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }

.pc = SPRITE "Inline"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)


REGISTER UPLIFT POTENTIAL REGISTERS
Statement [12] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4 [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ anim::angle#12 anim::angle#1 ]
Statement [14] (byte~) mulf8u_prepare::a#3 ← (byte)(signed byte)*((const byte*) COS#0 + (byte) anim::angle#12) [ anim::angle#12 mulf8u_prepare::a#3 ] ( main:3::anim:8 [ anim::angle#12 mulf8u_prepare::a#3 ] ) always clobbers reg byte a 
Statement [18] (signed word) mulf8s_prepared::return#2 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 mulf8s_prepared::return#2 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::return#2 ] ) always clobbers reg byte a 
Statement [19] (signed word~) anim::$4 ← (signed word) mulf8s_prepared::return#2 [ anim::angle#12 anim::$4 ] ( main:3::anim:8 [ anim::angle#12 anim::$4 ] ) always clobbers reg byte a 
Statement [20] (signed word) anim::xr#0 ← (signed word~) anim::$4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 ] ) always clobbers reg byte a 
Statement [22] (signed word) mulf8s_prepared::return#3 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::xr#0 mulf8s_prepared::return#3 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 mulf8s_prepared::return#3 ] ) always clobbers reg byte a 
Statement [23] (signed word~) anim::$6 ← (signed word) mulf8s_prepared::return#3 [ anim::angle#12 anim::xr#0 anim::$6 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::$6 ] ) always clobbers reg byte a 
Statement [24] (signed word) anim::yr#0 ← (signed word~) anim::$6 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 anim::yr#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 ] ) always clobbers reg byte a 
Statement [25] (byte~) mulf8u_prepare::a#4 ← (byte)(signed byte)*((const byte*) SIN#0 + (byte) anim::angle#12) [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8u_prepare::a#4 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8u_prepare::a#4 ] ) always clobbers reg byte a 
Statement [29] (signed word) mulf8s_prepared::return#4 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::return#4 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::return#4 ] ) always clobbers reg byte a 
Statement [30] (signed word~) anim::$10 ← (signed word) mulf8s_prepared::return#4 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$10 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$10 ] ) always clobbers reg byte a 
Statement [31] (signed word~) anim::$11 ← (signed word~) anim::$10 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$11 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$11 ] ) always clobbers reg byte a 
Statement [32] (signed word) anim::xr#1 ← (signed word) anim::xr#0 - (signed word~) anim::$11 [ anim::angle#12 anim::yr#0 anim::xr#1 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 ] ) always clobbers reg byte a 
Statement [34] (signed word) mulf8s_prepared::return#10 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::return#10 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::return#10 ] ) always clobbers reg byte a 
Statement [35] (signed word~) anim::$12 ← (signed word) mulf8s_prepared::return#10 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$12 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$12 ] ) always clobbers reg byte a 
Statement [36] (signed word~) anim::$13 ← (signed word~) anim::$12 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$13 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$13 ] ) always clobbers reg byte a 
Statement [37] (signed word) anim::yr#1 ← (signed word) anim::yr#0 + (signed word~) anim::$13 [ anim::angle#12 anim::xr#1 anim::yr#1 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#1 anim::yr#1 ] ) always clobbers reg byte a 
Statement [38] (byte~) anim::$14 ← > (signed word) anim::xr#1 [ anim::angle#12 anim::yr#1 anim::$14 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#1 anim::$14 ] ) always clobbers reg byte a 
Statement [40] (signed word) anim::xpos#0 ← (signed byte~) anim::$17 + (byte/signed byte/word/signed word/dword/signed dword) 89+(byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 60 [ anim::angle#12 anim::yr#1 anim::xpos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#1 anim::xpos#0 ] ) always clobbers reg byte a 
Statement [41] (byte~) anim::$19 ← > (signed word) anim::yr#1 [ anim::angle#12 anim::xpos#0 anim::$19 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::$19 ] ) always clobbers reg byte a 
Statement [43] (signed word) anim::ypos#0 ← (signed byte~) anim::$21 + (byte/signed byte/word/signed word/dword/signed dword) 89+(byte/signed byte/word/signed word/dword/signed dword) 51 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ) always clobbers reg byte a 
Statement [44] (byte~) anim::$23 ← < (signed word) anim::xpos#0 [ anim::angle#12 anim::xpos#0 anim::ypos#0 anim::$23 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::ypos#0 anim::$23 ] ) always clobbers reg byte a 
Statement [46] (byte~) anim::$24 ← > (signed word) anim::xpos#0 [ anim::angle#12 anim::ypos#0 anim::$24 ] ( main:3::anim:8 [ anim::angle#12 anim::ypos#0 anim::$24 ] ) always clobbers reg byte a 
Statement [48] (byte~) anim::$25 ← < (signed word) anim::ypos#0 [ anim::angle#12 anim::$25 ] ( main:3::anim:8 [ anim::angle#12 anim::$25 ] ) always clobbers reg byte a 
Statement [54] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0 [ mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ mulf8s_prepared::b#4 ]
Statement [55] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#2 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ) always clobbers reg byte a 
Statement [56] if(*((const signed byte*) mulf8s_prepared::memA#0)>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf8s_prepared::@1 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ) always clobbers reg byte a 
Statement [57] (byte~) mulf8s_prepared::$5 ← > (word) mulf8s_prepared::m#0 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] ) always clobbers reg byte a 
Statement [58] (byte~) mulf8s_prepared::$15 ← (byte~) mulf8s_prepared::$5 - (byte)(signed byte) mulf8s_prepared::b#4 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] ) always clobbers reg byte a 
Statement [62] (byte~) mulf8s_prepared::$11 ← > (word) mulf8s_prepared::m#5 [ mulf8s_prepared::m#5 mulf8s_prepared::$11 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] ) always clobbers reg byte a 
Statement [63] (byte~) mulf8s_prepared::$16 ← (byte~) mulf8s_prepared::$11 - (byte)*((const signed byte*) mulf8s_prepared::memA#0) [ mulf8s_prepared::m#5 mulf8s_prepared::$16 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] ) always clobbers reg byte a 
Statement asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  } always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:2 [ anim::angle#12 anim::angle#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:3 [ mulf8s_prepared::b#4 ]
Statement [69] (word) mulf8u_prepared::return#0 ← *((const byte*) mulf8u_prepared::memB#0) w= *((const byte*) mulf8u_prepared::resL#0) [ mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ( main:3::anim:8::mulf8s_prepared:17::mulf8u_prepared:53 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:21::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:28::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:33::mulf8u_prepared:53 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ) always clobbers reg byte a 
Statement asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  } always clobbers reg byte a 
Statement [77] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:3::init:6 [ ] ) always clobbers reg byte a 
Statement [79] (byte) init::i2#0 ← (byte) init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ init::i#2 init::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ init::spr_x#2 init::spr_x#1 ]
Statement [80] *((const byte*) init::sprites_ptr#0 + (byte) init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:70 [ init::i2#0 ]
Statement [81] *((const byte*) SPRITES_XPOS#0 + (byte) init::i2#0) ← (byte) init::spr_x#2 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] ) always clobbers reg byte a 
Statement [82] *((const byte*) SPRITES_YPOS#0 + (byte) init::i2#0) ← (byte) init::spr_x#2 [ init::i#2 init::spr_x#2 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 ] ) always clobbers reg byte a 
Statement [83] *((const byte*) SPRITES_COLS#0 + (byte) init::i#2) ← (const byte) GREEN#0 [ init::i#2 init::spr_x#2 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 ] ) always clobbers reg byte a 
Statement [84] (byte) init::spr_x#1 ← (byte) init::spr_x#2 + (byte/signed byte/word/signed word/dword/signed dword) 24 [ init::i#2 init::spr_x#1 ] ( main:3::init:6 [ init::i#2 init::spr_x#1 ] ) always clobbers reg byte a 
Statement [91] (byte~) mulf_init::$2 ← (byte) mulf_init::c#1 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:14 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ mulf_init::c#2 mulf_init::c#1 ]
Statement [96] (byte~) mulf_init::$5 ← < (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$5 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$5 ] ) always clobbers reg byte a 
Statement [97] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:9 [ mulf_init::c#2 mulf_init::c#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:14 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Statement [98] (byte~) mulf_init::$6 ← > (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$6 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$6 ] ) always clobbers reg byte a 
Statement [99] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) always clobbers reg byte y 
Statement [101] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) always clobbers reg byte a 
Statement [103] if((byte*) mulf_init::sqr1_lo#1!=(const byte[512]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) 512) goto mulf_init::@1 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) always clobbers reg byte a 
Statement [105] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[512]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:17 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:17 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:22 [ mulf_init::dir#2 mulf_init::dir#3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:22 [ mulf_init::dir#2 mulf_init::dir#3 ]
Statement [106] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[512]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) always clobbers reg byte a reg byte y 
Statement [108] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ) always clobbers reg byte a 
Statement [112] if((byte*) mulf_init::sqr2_lo#1!=(const byte[512]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) 511) goto mulf_init::@3 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ) always clobbers reg byte a 
Statement [113] *((const byte[512]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) 511) ← *((const byte[512]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) 256) [ ] ( main:3::init:6::mulf_init:76 [ ] ) always clobbers reg byte a 
Statement [114] *((const byte[512]) mulf_sqr2_hi#0+(word/signed word/dword/signed dword) 511) ← *((const byte[512]) mulf_sqr1_hi#0+(word/signed word/dword/signed dword) 256) [ ] ( main:3::init:6::mulf_init:76 [ ] ) always clobbers reg byte a 
Statement [12] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4 [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] ) always clobbers reg byte a 
Statement [14] (byte~) mulf8u_prepare::a#3 ← (byte)(signed byte)*((const byte*) COS#0 + (byte) anim::angle#12) [ anim::angle#12 mulf8u_prepare::a#3 ] ( main:3::anim:8 [ anim::angle#12 mulf8u_prepare::a#3 ] ) always clobbers reg byte a 
Statement [18] (signed word) mulf8s_prepared::return#2 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 mulf8s_prepared::return#2 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::return#2 ] ) always clobbers reg byte a 
Statement [19] (signed word~) anim::$4 ← (signed word) mulf8s_prepared::return#2 [ anim::angle#12 anim::$4 ] ( main:3::anim:8 [ anim::angle#12 anim::$4 ] ) always clobbers reg byte a 
Statement [20] (signed word) anim::xr#0 ← (signed word~) anim::$4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 ] ) always clobbers reg byte a 
Statement [22] (signed word) mulf8s_prepared::return#3 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::xr#0 mulf8s_prepared::return#3 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 mulf8s_prepared::return#3 ] ) always clobbers reg byte a 
Statement [23] (signed word~) anim::$6 ← (signed word) mulf8s_prepared::return#3 [ anim::angle#12 anim::xr#0 anim::$6 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::$6 ] ) always clobbers reg byte a 
Statement [24] (signed word) anim::yr#0 ← (signed word~) anim::$6 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 anim::yr#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 ] ) always clobbers reg byte a 
Statement [25] (byte~) mulf8u_prepare::a#4 ← (byte)(signed byte)*((const byte*) SIN#0 + (byte) anim::angle#12) [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8u_prepare::a#4 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8u_prepare::a#4 ] ) always clobbers reg byte a 
Statement [29] (signed word) mulf8s_prepared::return#4 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::return#4 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::return#4 ] ) always clobbers reg byte a 
Statement [30] (signed word~) anim::$10 ← (signed word) mulf8s_prepared::return#4 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$10 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$10 ] ) always clobbers reg byte a 
Statement [31] (signed word~) anim::$11 ← (signed word~) anim::$10 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$11 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$11 ] ) always clobbers reg byte a 
Statement [32] (signed word) anim::xr#1 ← (signed word) anim::xr#0 - (signed word~) anim::$11 [ anim::angle#12 anim::yr#0 anim::xr#1 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 ] ) always clobbers reg byte a 
Statement [34] (signed word) mulf8s_prepared::return#10 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::return#10 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::return#10 ] ) always clobbers reg byte a 
Statement [35] (signed word~) anim::$12 ← (signed word) mulf8s_prepared::return#10 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$12 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$12 ] ) always clobbers reg byte a 
Statement [36] (signed word~) anim::$13 ← (signed word~) anim::$12 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$13 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$13 ] ) always clobbers reg byte a 
Statement [37] (signed word) anim::yr#1 ← (signed word) anim::yr#0 + (signed word~) anim::$13 [ anim::angle#12 anim::xr#1 anim::yr#1 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#1 anim::yr#1 ] ) always clobbers reg byte a 
Statement [38] (byte~) anim::$14 ← > (signed word) anim::xr#1 [ anim::angle#12 anim::yr#1 anim::$14 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#1 anim::$14 ] ) always clobbers reg byte a 
Statement [40] (signed word) anim::xpos#0 ← (signed byte~) anim::$17 + (byte/signed byte/word/signed word/dword/signed dword) 89+(byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 60 [ anim::angle#12 anim::yr#1 anim::xpos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#1 anim::xpos#0 ] ) always clobbers reg byte a 
Statement [41] (byte~) anim::$19 ← > (signed word) anim::yr#1 [ anim::angle#12 anim::xpos#0 anim::$19 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::$19 ] ) always clobbers reg byte a 
Statement [43] (signed word) anim::ypos#0 ← (signed byte~) anim::$21 + (byte/signed byte/word/signed word/dword/signed dword) 89+(byte/signed byte/word/signed word/dword/signed dword) 51 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ) always clobbers reg byte a 
Statement [44] (byte~) anim::$23 ← < (signed word) anim::xpos#0 [ anim::angle#12 anim::xpos#0 anim::ypos#0 anim::$23 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::ypos#0 anim::$23 ] ) always clobbers reg byte a 
Statement [46] (byte~) anim::$24 ← > (signed word) anim::xpos#0 [ anim::angle#12 anim::ypos#0 anim::$24 ] ( main:3::anim:8 [ anim::angle#12 anim::ypos#0 anim::$24 ] ) always clobbers reg byte a 
Statement [48] (byte~) anim::$25 ← < (signed word) anim::ypos#0 [ anim::angle#12 anim::$25 ] ( main:3::anim:8 [ anim::angle#12 anim::$25 ] ) always clobbers reg byte a 
Statement [54] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0 [ mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] ) always clobbers reg byte a 
Statement [55] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#2 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ) always clobbers reg byte a 
Statement [56] if(*((const signed byte*) mulf8s_prepared::memA#0)>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf8s_prepared::@1 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ) always clobbers reg byte a 
Statement [57] (byte~) mulf8s_prepared::$5 ← > (word) mulf8s_prepared::m#0 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] ) always clobbers reg byte a 
Statement [58] (byte~) mulf8s_prepared::$15 ← (byte~) mulf8s_prepared::$5 - (byte)(signed byte) mulf8s_prepared::b#4 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] ) always clobbers reg byte a 
Statement [62] (byte~) mulf8s_prepared::$11 ← > (word) mulf8s_prepared::m#5 [ mulf8s_prepared::m#5 mulf8s_prepared::$11 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] ) always clobbers reg byte a 
Statement [63] (byte~) mulf8s_prepared::$16 ← (byte~) mulf8s_prepared::$11 - (byte)*((const signed byte*) mulf8s_prepared::memA#0) [ mulf8s_prepared::m#5 mulf8s_prepared::$16 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] ) always clobbers reg byte a 
Statement asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  } always clobbers reg byte a reg byte x 
Statement [69] (word) mulf8u_prepared::return#0 ← *((const byte*) mulf8u_prepared::memB#0) w= *((const byte*) mulf8u_prepared::resL#0) [ mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ( main:3::anim:8::mulf8s_prepared:17::mulf8u_prepared:53 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:21::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:28::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:33::mulf8u_prepared:53 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ) always clobbers reg byte a 
Statement asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  } always clobbers reg byte a 
Statement [77] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:3::init:6 [ ] ) always clobbers reg byte a 
Statement [79] (byte) init::i2#0 ← (byte) init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] ) always clobbers reg byte a 
Statement [80] *((const byte*) init::sprites_ptr#0 + (byte) init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] ) always clobbers reg byte a 
Statement [81] *((const byte*) SPRITES_XPOS#0 + (byte) init::i2#0) ← (byte) init::spr_x#2 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] ) always clobbers reg byte a 
Statement [82] *((const byte*) SPRITES_YPOS#0 + (byte) init::i2#0) ← (byte) init::spr_x#2 [ init::i#2 init::spr_x#2 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 ] ) always clobbers reg byte a 
Statement [83] *((const byte*) SPRITES_COLS#0 + (byte) init::i#2) ← (const byte) GREEN#0 [ init::i#2 init::spr_x#2 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 ] ) always clobbers reg byte a 
Statement [84] (byte) init::spr_x#1 ← (byte) init::spr_x#2 + (byte/signed byte/word/signed word/dword/signed dword) 24 [ init::i#2 init::spr_x#1 ] ( main:3::init:6 [ init::i#2 init::spr_x#1 ] ) always clobbers reg byte a 
Statement [91] (byte~) mulf_init::$2 ← (byte) mulf_init::c#1 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$2 ] ) always clobbers reg byte a 
Statement [96] (byte~) mulf_init::$5 ← < (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$5 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$5 ] ) always clobbers reg byte a 
Statement [97] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) always clobbers reg byte y 
Statement [98] (byte~) mulf_init::$6 ← > (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$6 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$6 ] ) always clobbers reg byte a 
Statement [99] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) always clobbers reg byte y 
Statement [101] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) always clobbers reg byte a 
Statement [103] if((byte*) mulf_init::sqr1_lo#1!=(const byte[512]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) 512) goto mulf_init::@1 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) always clobbers reg byte a 
Statement [105] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[512]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) always clobbers reg byte a reg byte y 
Statement [106] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[512]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) always clobbers reg byte a reg byte y 
Statement [108] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ) always clobbers reg byte a 
Statement [112] if((byte*) mulf_init::sqr2_lo#1!=(const byte[512]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) 511) goto mulf_init::@3 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ) always clobbers reg byte a 
Statement [113] *((const byte[512]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) 511) ← *((const byte[512]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) 256) [ ] ( main:3::init:6::mulf_init:76 [ ] ) always clobbers reg byte a 
Statement [114] *((const byte[512]) mulf_sqr2_hi#0+(word/signed word/dword/signed dword) 511) ← *((const byte[512]) mulf_sqr1_hi#0+(word/signed word/dword/signed dword) 256) [ ] ( main:3::init:6::mulf_init:76 [ ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ anim::angle#12 anim::angle#1 ] : zp ZP_BYTE:2 , reg byte y , 
Potential registers zp ZP_BYTE:3 [ mulf8s_prepared::b#4 ] : zp ZP_BYTE:3 , reg byte y , 
Potential registers zp ZP_WORD:4 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_BYTE:6 [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ init::i#2 init::i#1 ] : zp ZP_BYTE:7 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ init::spr_x#2 init::spr_x#1 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ mulf_init::c#2 mulf_init::c#1 ] : zp ZP_BYTE:9 , reg byte x , 
Potential registers zp ZP_WORD:10 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] : zp ZP_WORD:10 , 
Potential registers zp ZP_WORD:12 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] : zp ZP_WORD:12 , 
Potential registers zp ZP_BYTE:14 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] : zp ZP_BYTE:14 , reg byte x , 
Potential registers zp ZP_WORD:15 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_BYTE:17 [ mulf_init::x_255#2 mulf_init::x_255#1 ] : zp ZP_BYTE:17 , reg byte x , 
Potential registers zp ZP_WORD:18 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] : zp ZP_WORD:18 , 
Potential registers zp ZP_WORD:20 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] : zp ZP_WORD:20 , 
Potential registers zp ZP_BYTE:22 [ mulf_init::dir#2 mulf_init::dir#3 ] : zp ZP_BYTE:22 , reg byte x , 
Potential registers zp ZP_WORD:23 [ mulf8s_prepared::return#2 ] : zp ZP_WORD:23 , 
Potential registers zp ZP_WORD:25 [ anim::$4 ] : zp ZP_WORD:25 , 
Potential registers zp ZP_WORD:27 [ anim::xr#0 ] : zp ZP_WORD:27 , 
Potential registers zp ZP_WORD:29 [ mulf8s_prepared::return#3 ] : zp ZP_WORD:29 , 
Potential registers zp ZP_WORD:31 [ anim::$6 ] : zp ZP_WORD:31 , 
Potential registers zp ZP_WORD:33 [ anim::yr#0 ] : zp ZP_WORD:33 , 
Potential registers zp ZP_WORD:35 [ mulf8s_prepared::return#4 ] : zp ZP_WORD:35 , 
Potential registers zp ZP_WORD:37 [ anim::$10 ] : zp ZP_WORD:37 , 
Potential registers zp ZP_WORD:39 [ anim::$11 ] : zp ZP_WORD:39 , 
Potential registers zp ZP_WORD:41 [ anim::xr#1 ] : zp ZP_WORD:41 , 
Potential registers zp ZP_WORD:43 [ mulf8s_prepared::return#10 ] : zp ZP_WORD:43 , 
Potential registers zp ZP_WORD:45 [ anim::$12 ] : zp ZP_WORD:45 , 
Potential registers zp ZP_WORD:47 [ anim::$13 ] : zp ZP_WORD:47 , 
Potential registers zp ZP_WORD:49 [ anim::yr#1 ] : zp ZP_WORD:49 , 
Potential registers zp ZP_BYTE:51 [ anim::$14 ] : zp ZP_BYTE:51 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:52 [ anim::$17 ] : zp ZP_BYTE:52 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:53 [ anim::xpos#0 ] : zp ZP_WORD:53 , 
Potential registers zp ZP_BYTE:55 [ anim::$19 ] : zp ZP_BYTE:55 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:56 [ anim::$21 ] : zp ZP_BYTE:56 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:57 [ anim::ypos#0 ] : zp ZP_WORD:57 , 
Potential registers zp ZP_BYTE:59 [ anim::$23 ] : zp ZP_BYTE:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:60 [ anim::$24 ] : zp ZP_BYTE:60 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:61 [ anim::$25 ] : zp ZP_BYTE:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:62 [ mulf8u_prepared::return#2 ] : zp ZP_WORD:62 , 
Potential registers zp ZP_BYTE:64 [ mulf8s_prepared::$5 ] : zp ZP_BYTE:64 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:65 [ mulf8s_prepared::$15 ] : zp ZP_BYTE:65 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:66 [ mulf8s_prepared::$11 ] : zp ZP_BYTE:66 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:67 [ mulf8s_prepared::$16 ] : zp ZP_BYTE:67 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:68 [ mulf8u_prepared::return#0 ] : zp ZP_WORD:68 , 
Potential registers zp ZP_BYTE:70 [ init::i2#0 ] : zp ZP_BYTE:70 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:71 [ mulf_init::$2 ] : zp ZP_BYTE:71 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:72 [ mulf_init::$5 ] : zp ZP_BYTE:72 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:73 [ mulf_init::$6 ] : zp ZP_BYTE:73 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [anim] 22: zp ZP_WORD:25 [ anim::$4 ] 22: zp ZP_WORD:31 [ anim::$6 ] 22: zp ZP_WORD:37 [ anim::$10 ] 22: zp ZP_WORD:39 [ anim::$11 ] 22: zp ZP_WORD:45 [ anim::$12 ] 22: zp ZP_WORD:47 [ anim::$13 ] 22: zp ZP_BYTE:52 [ anim::$17 ] 22: zp ZP_BYTE:56 [ anim::$21 ] 22: zp ZP_BYTE:59 [ anim::$23 ] 22: zp ZP_BYTE:60 [ anim::$24 ] 22: zp ZP_BYTE:61 [ anim::$25 ] 11.56: zp ZP_BYTE:2 [ anim::angle#12 anim::angle#1 ] 11: zp ZP_BYTE:51 [ anim::$14 ] 11: zp ZP_BYTE:55 [ anim::$19 ] 5.5: zp ZP_WORD:49 [ anim::yr#1 ] 5.5: zp ZP_WORD:53 [ anim::xpos#0 ] 4.4: zp ZP_WORD:57 [ anim::ypos#0 ] 3.67: zp ZP_WORD:41 [ anim::xr#1 ] 1.83: zp ZP_WORD:27 [ anim::xr#0 ] 1.69: zp ZP_WORD:33 [ anim::yr#0 ] 
Uplift Scope [mulf_init] 45.1: zp ZP_WORD:15 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] 24.36: zp ZP_BYTE:9 [ mulf_init::c#2 mulf_init::c#1 ] 24.14: zp ZP_BYTE:14 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] 22: zp ZP_BYTE:71 [ mulf_init::$2 ] 22: zp ZP_BYTE:72 [ mulf_init::$5 ] 22: zp ZP_BYTE:73 [ mulf_init::$6 ] 20.62: zp ZP_WORD:18 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] 19.04: zp ZP_WORD:10 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] 16.5: zp ZP_BYTE:17 [ mulf_init::x_255#2 mulf_init::x_255#1 ] 14.14: zp ZP_WORD:20 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] 12.05: zp ZP_BYTE:22 [ mulf_init::dir#2 mulf_init::dir#3 ] 8.5: zp ZP_WORD:12 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] 
Uplift Scope [mulf8s_prepared] 22: zp ZP_WORD:23 [ mulf8s_prepared::return#2 ] 22: zp ZP_WORD:29 [ mulf8s_prepared::return#3 ] 22: zp ZP_WORD:35 [ mulf8s_prepared::return#4 ] 22: zp ZP_WORD:43 [ mulf8s_prepared::return#10 ] 13.17: zp ZP_WORD:4 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] 4: zp ZP_BYTE:64 [ mulf8s_prepared::$5 ] 4: zp ZP_BYTE:65 [ mulf8s_prepared::$15 ] 4: zp ZP_BYTE:66 [ mulf8s_prepared::$11 ] 4: zp ZP_BYTE:67 [ mulf8s_prepared::$16 ] 0.15: zp ZP_BYTE:3 [ mulf8s_prepared::b#4 ] 
Uplift Scope [mulf8u_prepare] 68: zp ZP_BYTE:6 [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ] 
Uplift Scope [init] 24.36: zp ZP_BYTE:7 [ init::i#2 init::i#1 ] 14.67: zp ZP_BYTE:8 [ init::spr_x#2 init::spr_x#1 ] 11: zp ZP_BYTE:70 [ init::i2#0 ] 
Uplift Scope [mulf8u_prepared] 4: zp ZP_WORD:62 [ mulf8u_prepared::return#2 ] 1.33: zp ZP_WORD:68 [ mulf8u_prepared::return#0 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [anim] best 14630 combination zp ZP_WORD:25 [ anim::$4 ] zp ZP_WORD:31 [ anim::$6 ] zp ZP_WORD:37 [ anim::$10 ] zp ZP_WORD:39 [ anim::$11 ] zp ZP_WORD:45 [ anim::$12 ] zp ZP_WORD:47 [ anim::$13 ] reg byte a [ anim::$17 ] reg byte a [ anim::$21 ] reg byte a [ anim::$23 ] reg byte a [ anim::$24 ] zp ZP_BYTE:61 [ anim::$25 ] zp ZP_BYTE:2 [ anim::angle#12 anim::angle#1 ] zp ZP_BYTE:51 [ anim::$14 ] zp ZP_BYTE:55 [ anim::$19 ] zp ZP_WORD:49 [ anim::yr#1 ] zp ZP_WORD:53 [ anim::xpos#0 ] zp ZP_WORD:57 [ anim::ypos#0 ] zp ZP_WORD:41 [ anim::xr#1 ] zp ZP_WORD:27 [ anim::xr#0 ] zp ZP_WORD:33 [ anim::yr#0 ] 
Limited combination testing to 100 combinations of 32768 possible.
Uplifting [mulf_init] best 14400 combination zp ZP_WORD:15 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] reg byte x [ mulf_init::c#2 mulf_init::c#1 ] zp ZP_BYTE:14 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] reg byte a [ mulf_init::$2 ] reg byte a [ mulf_init::$5 ] reg byte a [ mulf_init::$6 ] zp ZP_WORD:18 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] zp ZP_WORD:10 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] zp ZP_BYTE:17 [ mulf_init::x_255#2 mulf_init::x_255#1 ] zp ZP_WORD:20 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] zp ZP_BYTE:22 [ mulf_init::dir#2 mulf_init::dir#3 ] zp ZP_WORD:12 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [mulf8s_prepared] best 14376 combination zp ZP_WORD:23 [ mulf8s_prepared::return#2 ] zp ZP_WORD:29 [ mulf8s_prepared::return#3 ] zp ZP_WORD:35 [ mulf8s_prepared::return#4 ] zp ZP_WORD:43 [ mulf8s_prepared::return#10 ] zp ZP_WORD:4 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] reg byte a [ mulf8s_prepared::$5 ] reg byte a [ mulf8s_prepared::$15 ] reg byte a [ mulf8s_prepared::$11 ] reg byte a [ mulf8s_prepared::$16 ] zp ZP_BYTE:3 [ mulf8s_prepared::b#4 ] 
Limited combination testing to 100 combinations of 512 possible.
Uplifting [mulf8u_prepare] best 14313 combination reg byte a [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ] 
Uplifting [init] best 14083 combination reg byte y [ init::i#2 init::i#1 ] zp ZP_BYTE:8 [ init::spr_x#2 init::spr_x#1 ] reg byte x [ init::i2#0 ] 
Uplifting [mulf8u_prepared] best 14083 combination zp ZP_WORD:62 [ mulf8u_prepared::return#2 ] zp ZP_WORD:68 [ mulf8u_prepared::return#0 ] 
Uplifting [main] best 14083 combination 
Uplifting [] best 14083 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Uplifting [mulf_init] best 14083 combination zp ZP_BYTE:14 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:61 [ anim::$25 ]
Uplifting [anim] best 14023 combination reg byte a [ anim::$25 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Uplifting [mulf_init] best 13903 combination reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ init::spr_x#2 init::spr_x#1 ]
Uplifting [init] best 13903 combination zp ZP_BYTE:8 [ init::spr_x#2 init::spr_x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:22 [ mulf_init::dir#2 mulf_init::dir#3 ]
Uplifting [mulf_init] best 13903 combination zp ZP_BYTE:22 [ mulf_init::dir#2 mulf_init::dir#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ anim::angle#12 anim::angle#1 ]
Uplifting [anim] best 13783 combination reg byte y [ anim::angle#12 anim::angle#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:51 [ anim::$14 ]
Uplifting [anim] best 13723 combination reg byte a [ anim::$14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:55 [ anim::$19 ]
Uplifting [anim] best 13663 combination reg byte a [ anim::$19 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ mulf8s_prepared::b#4 ]
Uplifting [mulf8s_prepared] best 13663 combination zp ZP_BYTE:3 [ mulf8s_prepared::b#4 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:4 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] ] with [ zp ZP_WORD:23 [ mulf8s_prepared::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:4 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s_prepared::return#2 ] ] with [ zp ZP_WORD:29 [ mulf8s_prepared::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:4 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s_prepared::return#2 mulf8s_prepared::return#3 ] ] with [ zp ZP_WORD:35 [ mulf8s_prepared::return#4 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:4 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s_prepared::return#2 mulf8s_prepared::return#3 mulf8s_prepared::return#4 ] ] with [ zp ZP_WORD:43 [ mulf8s_prepared::return#10 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:4 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s_prepared::return#2 mulf8s_prepared::return#3 mulf8s_prepared::return#4 mulf8s_prepared::return#10 ] ] with [ zp ZP_WORD:62 [ mulf8u_prepared::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:25 [ anim::$4 ] ] with [ zp ZP_WORD:27 [ anim::xr#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:31 [ anim::$6 ] ] with [ zp ZP_WORD:33 [ anim::yr#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:37 [ anim::$10 ] ] with [ zp ZP_WORD:39 [ anim::$11 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:45 [ anim::$12 ] ] with [ zp ZP_WORD:47 [ anim::$13 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:4 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s_prepared::return#2 mulf8s_prepared::return#3 mulf8s_prepared::return#4 mulf8s_prepared::return#10 mulf8u_prepared::return#2 ] ] with [ zp ZP_WORD:37 [ anim::$10 anim::$11 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:4 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s_prepared::return#2 mulf8s_prepared::return#3 mulf8s_prepared::return#4 mulf8s_prepared::return#10 mulf8u_prepared::return#2 anim::$10 anim::$11 ] ] with [ zp ZP_WORD:45 [ anim::$12 anim::$13 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:4 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s_prepared::return#2 mulf8s_prepared::return#3 mulf8s_prepared::return#4 mulf8s_prepared::return#10 mulf8u_prepared::return#2 anim::$10 anim::$11 anim::$12 anim::$13 ] ] with [ zp ZP_WORD:68 [ mulf8u_prepared::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:25 [ anim::$4 anim::xr#0 ] ] with [ zp ZP_WORD:41 [ anim::xr#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:31 [ anim::$6 anim::yr#0 ] ] with [ zp ZP_WORD:49 [ anim::yr#1 ] ] - score: 1
Coalescing zero page register [ zp ZP_BYTE:3 [ mulf8s_prepared::b#4 ] ] with [ zp ZP_BYTE:8 [ init::spr_x#2 init::spr_x#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ mulf8s_prepared::b#4 init::spr_x#2 init::spr_x#1 ] ] with [ zp ZP_BYTE:14 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ mulf8s_prepared::b#4 init::spr_x#2 init::spr_x#1 mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] ] with [ zp ZP_BYTE:22 [ mulf_init::dir#2 mulf_init::dir#3 ] ]
Coalescing zero page register [ zp ZP_WORD:4 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s_prepared::return#2 mulf8s_prepared::return#3 mulf8s_prepared::return#4 mulf8s_prepared::return#10 mulf8u_prepared::return#2 anim::$10 anim::$11 anim::$12 anim::$13 mulf8u_prepared::return#0 ] ] with [ zp ZP_WORD:10 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] ]
Coalescing zero page register [ zp ZP_WORD:4 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s_prepared::return#2 mulf8s_prepared::return#3 mulf8s_prepared::return#4 mulf8s_prepared::return#10 mulf8u_prepared::return#2 anim::$10 anim::$11 anim::$12 anim::$13 mulf8u_prepared::return#0 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] ] with [ zp ZP_WORD:18 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] ]
Coalescing zero page register [ zp ZP_WORD:4 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s_prepared::return#2 mulf8s_prepared::return#3 mulf8s_prepared::return#4 mulf8s_prepared::return#10 mulf8u_prepared::return#2 anim::$10 anim::$11 anim::$12 anim::$13 mulf8u_prepared::return#0 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] ] with [ zp ZP_WORD:53 [ anim::xpos#0 ] ]
Coalescing zero page register [ zp ZP_WORD:12 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] ] with [ zp ZP_WORD:20 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] ]
Coalescing zero page register [ zp ZP_WORD:12 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] ] with [ zp ZP_WORD:25 [ anim::$4 anim::xr#0 anim::xr#1 ] ]
Coalescing zero page register [ zp ZP_WORD:12 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 anim::$4 anim::xr#0 anim::xr#1 ] ] with [ zp ZP_WORD:57 [ anim::ypos#0 ] ]
Coalescing zero page register [ zp ZP_WORD:15 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] ] with [ zp ZP_WORD:31 [ anim::$6 anim::yr#0 anim::yr#1 ] ]
Allocated (was zp ZP_BYTE:3) zp ZP_BYTE:2 [ mulf8s_prepared::b#4 init::spr_x#2 init::spr_x#1 mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 mulf_init::dir#2 mulf_init::dir#3 ]
Allocated (was zp ZP_WORD:4) zp ZP_WORD:3 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s_prepared::return#2 mulf8s_prepared::return#3 mulf8s_prepared::return#4 mulf8s_prepared::return#10 mulf8u_prepared::return#2 anim::$10 anim::$11 anim::$12 anim::$13 mulf8u_prepared::return#0 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 anim::xpos#0 ]
Allocated (was zp ZP_WORD:12) zp ZP_WORD:5 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 anim::$4 anim::xr#0 anim::xr#1 anim::ypos#0 ]
Allocated (was zp ZP_WORD:15) zp ZP_WORD:7 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 anim::$6 anim::yr#0 anim::yr#1 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .const GREEN = 5
  .label SCREEN = $400
  .label SPRITE = $3000
  .label COS = $2000
  .label SIN = COS+$40
//SEG2 @begin
bbegin:
  jmp b17
//SEG3 @17
b17:
//SEG4 kickasm(location (const byte*) COS#0) {{ {     .var min = -$7fff     .var max = $7fff     .var ampl = max-min;     .for(var i=0;i<$140;i++) {     	.var rad = i*2*PI/256;         .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))     }     }  }}
//SEG5 kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))     .for (var y=0; y<21; y++)         .for (var x=0;x<3; x++)             .byte pic.getSinglecolorByte(x,y)  }}
//SEG6 [3] call main  [ ] ( )
  jsr main
//SEG7 [4] phi from @17 to @end [phi:@17->@end]
bend_from_b17:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 asm { sei  }
    sei
  //SEG11 [6] call init  [ ] ( main:3 [ ] )
  //SEG12 [75] phi from main to init [phi:main->init]
  init_from_main:
    jsr init
  //SEG13 [7] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [8] call anim  [ ] ( main:3 [ ] )
  //SEG16 [10] phi from main::@1 to anim [phi:main::@1->anim]
  anim_from_b1:
    jsr anim
    jmp breturn
  //SEG17 main::@return
  breturn:
  //SEG18 [9] return  [ ] ( main:3 [ ] )
    rts
}
//SEG19 anim
anim: {
    .const x = $59
    .const y = 0
    .label _4 = 5
    .label _6 = 7
    .label _10 = 3
    .label _11 = 3
    .label _12 = 3
    .label _13 = 3
    .label xr = 5
    .label yr = 7
    .label xpos = 3
    .label ypos = 5
  //SEG20 [11] phi from anim to anim::@1 [phi:anim->anim::@1]
  b1_from_anim:
  //SEG21 [11] phi (byte) anim::angle#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp b1
  //SEG22 anim::@1
  b1:
    jmp b4
  //SEG23 anim::@4
  b4:
  //SEG24 [12] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4 [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
    jmp b6
  //SEG25 anim::@6
  b6:
  //SEG26 [13] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp mulf8s_prepare1
  //SEG27 anim::mulf8s_prepare1
  mulf8s_prepare1:
  //SEG28 [14] (byte~) mulf8u_prepare::a#3 ← (byte)(signed byte)*((const byte*) COS#0 + (byte) anim::angle#12) [ anim::angle#12 mulf8u_prepare::a#3 ] ( main:3::anim:8 [ anim::angle#12 mulf8u_prepare::a#3 ] ) -- vbuaa=pbsc1_derefidx_vbuyy 
    lda COS,y
  //SEG29 [15] call mulf8u_prepare  [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] )
  //SEG30 [71] phi from anim::mulf8s_prepare1 to mulf8u_prepare [phi:anim::mulf8s_prepare1->mulf8u_prepare]
  mulf8u_prepare_from_mulf8s_prepare1:
  //SEG31 [71] phi (byte) mulf8u_prepare::a#2 = (byte~) mulf8u_prepare::a#3 [phi:anim::mulf8s_prepare1->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
  //SEG32 [16] phi from anim::mulf8s_prepare1 to anim::@13 [phi:anim::mulf8s_prepare1->anim::@13]
  b13_from_mulf8s_prepare1:
    jmp b13
  //SEG33 anim::@13
  b13:
  //SEG34 [17] call mulf8s_prepared  [ anim::angle#12 mulf8s_prepared::m#4 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::m#4 ] )
  //SEG35 [52] phi from anim::@13 to mulf8s_prepared [phi:anim::@13->mulf8s_prepared]
  mulf8s_prepared_from_b13:
  //SEG36 [52] phi (signed byte) mulf8s_prepared::b#4 = (const signed byte) anim::x#0 [phi:anim::@13->mulf8s_prepared#0] -- vbsz1=vbsc1 
    lda #x
    sta mulf8s_prepared.b
    jsr mulf8s_prepared
  //SEG37 [18] (signed word) mulf8s_prepared::return#2 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 mulf8s_prepared::return#2 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::return#2 ] )
    // (signed word) mulf8s_prepared::return#2 = (signed word)(word) mulf8s_prepared::m#4  // register copy zp ZP_WORD:3
    jmp b16
  //SEG38 anim::@16
  b16:
  //SEG39 [19] (signed word~) anim::$4 ← (signed word) mulf8s_prepared::return#2 [ anim::angle#12 anim::$4 ] ( main:3::anim:8 [ anim::angle#12 anim::$4 ] ) -- vwsz1=vwsz2 
    lda mulf8s_prepared.return
    sta _4
    lda mulf8s_prepared.return+1
    sta _4+1
  //SEG40 [20] (signed word) anim::xr#0 ← (signed word~) anim::$4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 ] ) -- vwsz1=vwsz1_rol_1 
    asl xr
    rol xr+1
  //SEG41 [21] call mulf8s_prepared  [ anim::angle#12 mulf8s_prepared::m#4 anim::xr#0 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::m#4 anim::xr#0 ] )
  //SEG42 [52] phi from anim::@16 to mulf8s_prepared [phi:anim::@16->mulf8s_prepared]
  mulf8s_prepared_from_b16:
  //SEG43 [52] phi (signed byte) mulf8s_prepared::b#4 = (const signed byte) anim::y#0 [phi:anim::@16->mulf8s_prepared#0] -- vbsz1=vbsc1 
    lda #y
    sta mulf8s_prepared.b
    jsr mulf8s_prepared
  //SEG44 [22] (signed word) mulf8s_prepared::return#3 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::xr#0 mulf8s_prepared::return#3 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 mulf8s_prepared::return#3 ] )
    // (signed word) mulf8s_prepared::return#3 = (signed word)(word) mulf8s_prepared::m#4  // register copy zp ZP_WORD:3
    jmp b17
  //SEG45 anim::@17
  b17:
  //SEG46 [23] (signed word~) anim::$6 ← (signed word) mulf8s_prepared::return#3 [ anim::angle#12 anim::xr#0 anim::$6 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::$6 ] ) -- vwsz1=vwsz2 
    lda mulf8s_prepared.return
    sta _6
    lda mulf8s_prepared.return+1
    sta _6+1
  //SEG47 [24] (signed word) anim::yr#0 ← (signed word~) anim::$6 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 anim::yr#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 ] ) -- vwsz1=vwsz1_rol_1 
    asl yr
    rol yr+1
    jmp mulf8s_prepare2
  //SEG48 anim::mulf8s_prepare2
  mulf8s_prepare2:
  //SEG49 [25] (byte~) mulf8u_prepare::a#4 ← (byte)(signed byte)*((const byte*) SIN#0 + (byte) anim::angle#12) [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8u_prepare::a#4 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8u_prepare::a#4 ] ) -- vbuaa=pbsc1_derefidx_vbuyy 
    lda SIN,y
  //SEG50 [26] call mulf8u_prepare  [ anim::angle#12 anim::xr#0 anim::yr#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 ] )
  //SEG51 [71] phi from anim::mulf8s_prepare2 to mulf8u_prepare [phi:anim::mulf8s_prepare2->mulf8u_prepare]
  mulf8u_prepare_from_mulf8s_prepare2:
  //SEG52 [71] phi (byte) mulf8u_prepare::a#2 = (byte~) mulf8u_prepare::a#4 [phi:anim::mulf8s_prepare2->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
  //SEG53 [27] phi from anim::mulf8s_prepare2 to anim::@14 [phi:anim::mulf8s_prepare2->anim::@14]
  b14_from_mulf8s_prepare2:
    jmp b14
  //SEG54 anim::@14
  b14:
  //SEG55 [28] call mulf8s_prepared  [ anim::angle#12 mulf8s_prepared::m#4 anim::xr#0 anim::yr#0 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::m#4 anim::xr#0 anim::yr#0 ] )
  //SEG56 [52] phi from anim::@14 to mulf8s_prepared [phi:anim::@14->mulf8s_prepared]
  mulf8s_prepared_from_b14:
  //SEG57 [52] phi (signed byte) mulf8s_prepared::b#4 = (const signed byte) anim::y#0 [phi:anim::@14->mulf8s_prepared#0] -- vbsz1=vbsc1 
    lda #y
    sta mulf8s_prepared.b
    jsr mulf8s_prepared
  //SEG58 [29] (signed word) mulf8s_prepared::return#4 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::return#4 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::return#4 ] )
    // (signed word) mulf8s_prepared::return#4 = (signed word)(word) mulf8s_prepared::m#4  // register copy zp ZP_WORD:3
    jmp b19
  //SEG59 anim::@19
  b19:
  //SEG60 [30] (signed word~) anim::$10 ← (signed word) mulf8s_prepared::return#4 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$10 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$10 ] )
    // (signed word~) anim::$10 = (signed word) mulf8s_prepared::return#4  // register copy zp ZP_WORD:3
  //SEG61 [31] (signed word~) anim::$11 ← (signed word~) anim::$10 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$11 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$11 ] ) -- vwsz1=vwsz1_rol_1 
    asl _11
    rol _11+1
  //SEG62 [32] (signed word) anim::xr#1 ← (signed word) anim::xr#0 - (signed word~) anim::$11 [ anim::angle#12 anim::yr#0 anim::xr#1 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 ] ) -- vwsz1=vwsz1_minus_vwsz2 
    lda xr
    sec
    sbc _11
    sta xr
    lda xr+1
    sbc _11+1
    sta xr+1
  //SEG63 [33] call mulf8s_prepared  [ anim::angle#12 mulf8s_prepared::m#4 anim::yr#0 anim::xr#1 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::m#4 anim::yr#0 anim::xr#1 ] )
  //SEG64 [52] phi from anim::@19 to mulf8s_prepared [phi:anim::@19->mulf8s_prepared]
  mulf8s_prepared_from_b19:
  //SEG65 [52] phi (signed byte) mulf8s_prepared::b#4 = (const signed byte) anim::x#0 [phi:anim::@19->mulf8s_prepared#0] -- vbsz1=vbsc1 
    lda #x
    sta mulf8s_prepared.b
    jsr mulf8s_prepared
  //SEG66 [34] (signed word) mulf8s_prepared::return#10 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::return#10 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::return#10 ] )
    // (signed word) mulf8s_prepared::return#10 = (signed word)(word) mulf8s_prepared::m#4  // register copy zp ZP_WORD:3
    jmp b20
  //SEG67 anim::@20
  b20:
  //SEG68 [35] (signed word~) anim::$12 ← (signed word) mulf8s_prepared::return#10 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$12 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$12 ] )
    // (signed word~) anim::$12 = (signed word) mulf8s_prepared::return#10  // register copy zp ZP_WORD:3
  //SEG69 [36] (signed word~) anim::$13 ← (signed word~) anim::$12 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$13 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$13 ] ) -- vwsz1=vwsz1_rol_1 
    asl _13
    rol _13+1
  //SEG70 [37] (signed word) anim::yr#1 ← (signed word) anim::yr#0 + (signed word~) anim::$13 [ anim::angle#12 anim::xr#1 anim::yr#1 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#1 anim::yr#1 ] ) -- vwsz1=vwsz1_plus_vwsz2 
    lda yr
    clc
    adc _13
    sta yr
    lda yr+1
    adc _13+1
    sta yr+1
  //SEG71 [38] (byte~) anim::$14 ← > (signed word) anim::xr#1 [ anim::angle#12 anim::yr#1 anim::$14 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#1 anim::$14 ] ) -- vbuaa=_hi_vwsz1 
    lda xr+1
  //SEG72 [39] (signed byte~) anim::$17 ← (signed byte)(byte~) anim::$14 [ anim::angle#12 anim::yr#1 anim::$17 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#1 anim::$17 ] )
    // (signed byte~) anim::$17 = (signed byte)(byte~) anim::$14  // register copy reg byte a
  //SEG73 [40] (signed word) anim::xpos#0 ← (signed byte~) anim::$17 + (byte/signed byte/word/signed word/dword/signed dword) 89+(byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 60 [ anim::angle#12 anim::yr#1 anim::xpos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#1 anim::xpos#0 ] ) -- vwsz1=vbsaa_plus_vbuc1 
    sta xpos
    ora #$7f
    bmi !+
    lda #0
  !:
    sta xpos+1
    lda xpos
    clc
    adc #$59+$18+$3c
    sta xpos
    lda xpos+1
    adc #0
    sta xpos+1
  //SEG74 [41] (byte~) anim::$19 ← > (signed word) anim::yr#1 [ anim::angle#12 anim::xpos#0 anim::$19 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::$19 ] ) -- vbuaa=_hi_vwsz1 
    lda yr+1
  //SEG75 [42] (signed byte~) anim::$21 ← (signed byte)(byte~) anim::$19 [ anim::angle#12 anim::xpos#0 anim::$21 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::$21 ] )
    // (signed byte~) anim::$21 = (signed byte)(byte~) anim::$19  // register copy reg byte a
  //SEG76 [43] (signed word) anim::ypos#0 ← (signed byte~) anim::$21 + (byte/signed byte/word/signed word/dword/signed dword) 89+(byte/signed byte/word/signed word/dword/signed dword) 51 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ) -- vwsz1=vbsaa_plus_vbuc1 
    sta ypos
    ora #$7f
    bmi !+
    lda #0
  !:
    sta ypos+1
    lda ypos
    clc
    adc #$59+$33
    sta ypos
    lda ypos+1
    adc #0
    sta ypos+1
  //SEG77 [44] (byte~) anim::$23 ← < (signed word) anim::xpos#0 [ anim::angle#12 anim::xpos#0 anim::ypos#0 anim::$23 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::ypos#0 anim::$23 ] ) -- vbuaa=_lo_vwsz1 
    lda xpos
  //SEG78 [45] *((const byte*) SPRITES_XPOS#0) ← (byte~) anim::$23 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ) -- _deref_pbuc1=vbuaa 
    sta SPRITES_XPOS
  //SEG79 [46] (byte~) anim::$24 ← > (signed word) anim::xpos#0 [ anim::angle#12 anim::ypos#0 anim::$24 ] ( main:3::anim:8 [ anim::angle#12 anim::ypos#0 anim::$24 ] ) -- vbuaa=_hi_vwsz1 
    lda xpos+1
  //SEG80 [47] *((const byte*) SPRITES_XMSB#0) ← (byte~) anim::$24 [ anim::angle#12 anim::ypos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::ypos#0 ] ) -- _deref_pbuc1=vbuaa 
    sta SPRITES_XMSB
  //SEG81 [48] (byte~) anim::$25 ← < (signed word) anim::ypos#0 [ anim::angle#12 anim::$25 ] ( main:3::anim:8 [ anim::angle#12 anim::$25 ] ) -- vbuaa=_lo_vwsz1 
    lda ypos
  //SEG82 [49] *((const byte*) SPRITES_YPOS#0) ← (byte~) anim::$25 [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] ) -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS
  //SEG83 [50] (byte) anim::angle#1 ← ++ (byte) anim::angle#12 [ anim::angle#1 ] ( main:3::anim:8 [ anim::angle#1 ] ) -- vbuyy=_inc_vbuyy 
    iny
  //SEG84 [51] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) [ anim::angle#1 ] ( main:3::anim:8 [ anim::angle#1 ] ) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
  //SEG85 [11] phi from anim::@20 to anim::@1 [phi:anim::@20->anim::@1]
  b1_from_b20:
  //SEG86 [11] phi (byte) anim::angle#12 = (byte) anim::angle#1 [phi:anim::@20->anim::@1#0] -- register_copy 
    jmp b1
}
//SEG87 mulf8s_prepared
mulf8s_prepared: {
    .label memA = $fd
    .label m = 3
    .label return = 3
    .label b = 2
  //SEG88 [53] call mulf8u_prepared  [ mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] )
    jsr mulf8u_prepared
  //SEG89 [54] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0 [ mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] )
    // (word) mulf8u_prepared::return#2 = (word) mulf8u_prepared::return#0  // register copy zp ZP_WORD:3
    jmp b6
  //SEG90 mulf8s_prepared::@6
  b6:
  //SEG91 [55] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#2 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] )
    // (word) mulf8s_prepared::m#0 = (word) mulf8u_prepared::return#2  // register copy zp ZP_WORD:3
  //SEG92 [56] if(*((const signed byte*) mulf8s_prepared::memA#0)>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf8s_prepared::@1 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ) -- _deref_pbsc1_ge_0_then_la1 
    lda memA
    cmp #0
    bpl b1_from_b6
    jmp b3
  //SEG93 mulf8s_prepared::@3
  b3:
  //SEG94 [57] (byte~) mulf8s_prepared::$5 ← > (word) mulf8s_prepared::m#0 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] ) -- vbuaa=_hi_vwuz1 
    lda m+1
  //SEG95 [58] (byte~) mulf8s_prepared::$15 ← (byte~) mulf8s_prepared::$5 - (byte)(signed byte) mulf8s_prepared::b#4 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] ) -- vbuaa=vbuaa_minus_vbuz1 
    sec
    sbc b
  //SEG96 [59] (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#0 hi= (byte~) mulf8s_prepared::$15 [ mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] ) -- vwuz1=vwuz1_sethi_vbuaa 
    sta m+1
  //SEG97 [60] phi from mulf8s_prepared::@3 mulf8s_prepared::@6 to mulf8s_prepared::@1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@6->mulf8s_prepared::@1]
  b1_from_b3:
  b1_from_b6:
  //SEG98 [60] phi (word) mulf8s_prepared::m#5 = (word) mulf8s_prepared::m#1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@6->mulf8s_prepared::@1#0] -- register_copy 
    jmp b1
  //SEG99 mulf8s_prepared::@1
  b1:
  //SEG100 [61] if((signed byte) mulf8s_prepared::b#4>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf8s_prepared::@2 [ mulf8s_prepared::m#5 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#5 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#5 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 ] ) -- vbsz1_ge_0_then_la1 
    lda b
    cmp #0
    bpl b2_from_b1
    jmp b4
  //SEG101 mulf8s_prepared::@4
  b4:
  //SEG102 [62] (byte~) mulf8s_prepared::$11 ← > (word) mulf8s_prepared::m#5 [ mulf8s_prepared::m#5 mulf8s_prepared::$11 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] ) -- vbuaa=_hi_vwuz1 
    lda m+1
  //SEG103 [63] (byte~) mulf8s_prepared::$16 ← (byte~) mulf8s_prepared::$11 - (byte)*((const signed byte*) mulf8s_prepared::memA#0) [ mulf8s_prepared::m#5 mulf8s_prepared::$16 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] ) -- vbuaa=vbuaa_minus__deref_pbuc1 
    sec
    sbc memA
  //SEG104 [64] (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$16 [ mulf8s_prepared::m#2 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#2 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#2 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#2 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#2 ] ) -- vwuz1=vwuz1_sethi_vbuaa 
    sta m+1
  //SEG105 [65] phi from mulf8s_prepared::@1 mulf8s_prepared::@4 to mulf8s_prepared::@2 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG106 [65] phi (word) mulf8s_prepared::m#4 = (word) mulf8s_prepared::m#5 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2#0] -- register_copy 
    jmp b2
  //SEG107 mulf8s_prepared::@2
  b2:
    jmp breturn
  //SEG108 mulf8s_prepared::@return
  breturn:
  //SEG109 [66] return  [ mulf8s_prepared::m#4 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#4 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#4 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#4 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#4 ] )
    rts
}
//SEG110 mulf8u_prepared
mulf8u_prepared: {
    .label resL = $fe
    .label memB = $ff
    .label return = 3
  //SEG111 [67] *((const byte*) mulf8u_prepared::memB#0) ← (byte)(signed byte) mulf8s_prepared::b#4 [ mulf8s_prepared::b#4 ] ( main:3::anim:8::mulf8s_prepared:17::mulf8u_prepared:53 [ anim::angle#12 mulf8s_prepared::b#4 ] main:3::anim:8::mulf8s_prepared:21::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 ] main:3::anim:8::mulf8s_prepared:28::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 ] main:3::anim:8::mulf8s_prepared:33::mulf8u_prepared:53 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 ] ) -- _deref_pbuc1=vbuz1 
    lda mulf8s_prepared.b
    sta memB
  //SEG112 asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
    ldx memB
    sec
  sm1:
    lda mulf_sqr1_lo,x
  sm2:
    sbc mulf_sqr2_lo,x
    sta resL
  sm3:
    lda mulf_sqr1_hi,x
  sm4:
    sbc mulf_sqr2_hi,x
    sta memB
  //SEG113 [69] (word) mulf8u_prepared::return#0 ← *((const byte*) mulf8u_prepared::memB#0) w= *((const byte*) mulf8u_prepared::resL#0) [ mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ( main:3::anim:8::mulf8s_prepared:17::mulf8u_prepared:53 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:21::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:28::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:33::mulf8u_prepared:53 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda resL
    sta return
    lda memB
    sta return+1
    jmp breturn
  //SEG114 mulf8u_prepared::@return
  breturn:
  //SEG115 [70] return  [ mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ( main:3::anim:8::mulf8s_prepared:17::mulf8u_prepared:53 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:21::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:28::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:33::mulf8u_prepared:53 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] )
    rts
}
//SEG116 mulf8u_prepare
mulf8u_prepare: {
    .label memA = $fd
  //SEG117 [72] *((const byte*) mulf8u_prepare::memA#0) ← (byte) mulf8u_prepare::a#2 [ ] ( main:3::anim:8::mulf8u_prepare:15 [ anim::angle#12 ] main:3::anim:8::mulf8u_prepare:26 [ anim::angle#12 anim::xr#0 anim::yr#0 ] ) -- _deref_pbuc1=vbuaa 
    sta memA
  //SEG118 asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
    lda memA
    sta mulf8u_prepared.sm1+1
    sta mulf8u_prepared.sm3+1
    eor #$ff
    sta mulf8u_prepared.sm2+1
    sta mulf8u_prepared.sm4+1
    jmp breturn
  //SEG119 mulf8u_prepare::@return
  breturn:
  //SEG120 [74] return  [ ] ( main:3::anim:8::mulf8u_prepare:15 [ anim::angle#12 ] main:3::anim:8::mulf8u_prepare:26 [ anim::angle#12 anim::xr#0 anim::yr#0 ] )
    rts
}
//SEG121 init
init: {
    .label sprites_ptr = SCREEN+$3f8
    .label spr_x = 2
  //SEG122 [76] call mulf_init  [ ] ( main:3::init:6 [ ] )
  //SEG123 [88] phi from init to mulf_init [phi:init->mulf_init]
  mulf_init_from_init:
    jsr mulf_init
    jmp b3
  //SEG124 init::@3
  b3:
  //SEG125 [77] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:3::init:6 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta SPRITES_ENABLE
  //SEG126 [78] phi from init::@3 to init::@1 [phi:init::@3->init::@1]
  b1_from_b3:
  //SEG127 [78] phi (byte) init::spr_x#2 = (byte/signed byte/word/signed word/dword/signed dword) 60 [phi:init::@3->init::@1#0] -- vbuz1=vbuc1 
    lda #$3c
    sta spr_x
  //SEG128 [78] phi (byte) init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@3->init::@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp b1
  //SEG129 [78] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  b1_from_b1:
  //SEG130 [78] phi (byte) init::spr_x#2 = (byte) init::spr_x#1 [phi:init::@1->init::@1#0] -- register_copy 
  //SEG131 [78] phi (byte) init::i#2 = (byte) init::i#1 [phi:init::@1->init::@1#1] -- register_copy 
    jmp b1
  //SEG132 init::@1
  b1:
  //SEG133 [79] (byte) init::i2#0 ← (byte) init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] ) -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
  //SEG134 [80] *((const byte*) init::sprites_ptr#0 + (byte) init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] ) -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #$ff&SPRITE/$40
    sta sprites_ptr,y
  //SEG135 [81] *((const byte*) SPRITES_XPOS#0 + (byte) init::i2#0) ← (byte) init::spr_x#2 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] ) -- pbuc1_derefidx_vbuxx=vbuz1 
    lda spr_x
    sta SPRITES_XPOS,x
  //SEG136 [82] *((const byte*) SPRITES_YPOS#0 + (byte) init::i2#0) ← (byte) init::spr_x#2 [ init::i#2 init::spr_x#2 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 ] ) -- pbuc1_derefidx_vbuxx=vbuz1 
    lda spr_x
    sta SPRITES_YPOS,x
  //SEG137 [83] *((const byte*) SPRITES_COLS#0 + (byte) init::i#2) ← (const byte) GREEN#0 [ init::i#2 init::spr_x#2 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 ] ) -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #GREEN
    sta SPRITES_COLS,y
  //SEG138 [84] (byte) init::spr_x#1 ← (byte) init::spr_x#2 + (byte/signed byte/word/signed word/dword/signed dword) 24 [ init::i#2 init::spr_x#1 ] ( main:3::init:6 [ init::i#2 init::spr_x#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #$18
    clc
    adc spr_x
    sta spr_x
  //SEG139 [85] (byte) init::i#1 ← ++ (byte) init::i#2 [ init::i#1 init::spr_x#1 ] ( main:3::init:6 [ init::i#1 init::spr_x#1 ] ) -- vbuyy=_inc_vbuyy 
    iny
  //SEG140 [86] if((byte) init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto init::@1 [ init::i#1 init::spr_x#1 ] ( main:3::init:6 [ init::i#1 init::spr_x#1 ] ) -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne b1_from_b1
    jmp breturn
  //SEG141 init::@return
  breturn:
  //SEG142 [87] return  [ ] ( main:3::init:6 [ ] )
    rts
}
//SEG143 mulf_init
mulf_init: {
    .label sqr1_hi = 5
    .label sqr = 7
    .label sqr1_lo = 3
    .label x_2 = 2
    .label sqr2_hi = 5
    .label sqr2_lo = 3
    .label dir = 2
  //SEG144 [89] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  b1_from_mulf_init:
  //SEG145 [89] phi (byte) mulf_init::x_2#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x_2
  //SEG146 [89] phi (byte*) mulf_init::sqr1_hi#2 = (const byte[512]) mulf_sqr1_hi#0+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta sqr1_hi+1
  //SEG147 [89] phi (byte*) mulf_init::sqr1_lo#2 = (const byte[512]) mulf_sqr1_lo#0+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta sqr1_lo+1
  //SEG148 [89] phi (word) mulf_init::sqr#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta sqr
    lda #>0
    sta sqr+1
  //SEG149 [89] phi (byte) mulf_init::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#4] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG150 [89] phi from mulf_init::@2 to mulf_init::@1 [phi:mulf_init::@2->mulf_init::@1]
  b1_from_b2:
  //SEG151 [89] phi (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#2 [phi:mulf_init::@2->mulf_init::@1#0] -- register_copy 
  //SEG152 [89] phi (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#1 [phi:mulf_init::@2->mulf_init::@1#1] -- register_copy 
  //SEG153 [89] phi (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#1 [phi:mulf_init::@2->mulf_init::@1#2] -- register_copy 
  //SEG154 [89] phi (word) mulf_init::sqr#4 = (word) mulf_init::sqr#1 [phi:mulf_init::@2->mulf_init::@1#3] -- register_copy 
  //SEG155 [89] phi (byte) mulf_init::c#2 = (byte) mulf_init::c#1 [phi:mulf_init::@2->mulf_init::@1#4] -- register_copy 
    jmp b1
  //SEG156 mulf_init::@1
  b1:
  //SEG157 [90] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG158 [91] (byte~) mulf_init::$2 ← (byte) mulf_init::c#1 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$2 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG159 [92] if((byte~) mulf_init::$2!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@2 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 ] ) -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b2_from_b1
    jmp b5
  //SEG160 mulf_init::@5
  b5:
  //SEG161 [93] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#1 ] ) -- vbuz1=_inc_vbuz1 
    inc x_2
  //SEG162 [94] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#1 mulf_init::sqr#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#1 mulf_init::sqr#2 ] ) -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
  //SEG163 [95] phi from mulf_init::@1 mulf_init::@5 to mulf_init::@2 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2]
  b2_from_b1:
  b2_from_b5:
  //SEG164 [95] phi (byte) mulf_init::x_2#2 = (byte) mulf_init::x_2#3 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2#0] -- register_copy 
  //SEG165 [95] phi (word) mulf_init::sqr#3 = (word) mulf_init::sqr#4 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2#1] -- register_copy 
    jmp b2
  //SEG166 mulf_init::@2
  b2:
  //SEG167 [96] (byte~) mulf_init::$5 ← < (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$5 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$5 ] ) -- vbuaa=_lo_vwuz1 
    lda sqr
  //SEG168 [97] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_lo),y
  //SEG169 [98] (byte~) mulf_init::$6 ← > (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$6 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$6 ] ) -- vbuaa=_hi_vwuz1 
    lda sqr+1
  //SEG170 [99] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_hi),y
  //SEG171 [100] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr1_hi
    bne !+
    inc sqr1_hi+1
  !:
  //SEG172 [101] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) -- vwuz1=vwuz1_plus_vbuz2 
    lda x_2
    clc
    adc sqr
    sta sqr
    lda #0
    adc sqr+1
    sta sqr+1
  //SEG173 [102] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr1_lo
    bne !+
    inc sqr1_lo+1
  !:
  //SEG174 [103] if((byte*) mulf_init::sqr1_lo#1!=(const byte[512]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) 512) goto mulf_init::@1 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne b1_from_b2
    lda sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne b1_from_b2
  //SEG175 [104] phi from mulf_init::@2 to mulf_init::@3 [phi:mulf_init::@2->mulf_init::@3]
  b3_from_b2:
  //SEG176 [104] phi (byte) mulf_init::dir#2 = (byte/word/signed word/dword/signed dword) 255 [phi:mulf_init::@2->mulf_init::@3#0] -- vbuz1=vbuc1 
    lda #$ff
    sta dir
  //SEG177 [104] phi (byte*) mulf_init::sqr2_hi#2 = (const byte[512]) mulf_sqr2_hi#0 [phi:mulf_init::@2->mulf_init::@3#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta sqr2_hi
    lda #>mulf_sqr2_hi
    sta sqr2_hi+1
  //SEG178 [104] phi (byte*) mulf_init::sqr2_lo#2 = (const byte[512]) mulf_sqr2_lo#0 [phi:mulf_init::@2->mulf_init::@3#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta sqr2_lo
    lda #>mulf_sqr2_lo
    sta sqr2_lo+1
  //SEG179 [104] phi (byte) mulf_init::x_255#2 = ((byte))-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init::@2->mulf_init::@3#3] -- vbuxx=vbuc1 
    ldx #-1
    jmp b3
  //SEG180 [104] phi from mulf_init::@4 to mulf_init::@3 [phi:mulf_init::@4->mulf_init::@3]
  b3_from_b4:
  //SEG181 [104] phi (byte) mulf_init::dir#2 = (byte) mulf_init::dir#3 [phi:mulf_init::@4->mulf_init::@3#0] -- register_copy 
  //SEG182 [104] phi (byte*) mulf_init::sqr2_hi#2 = (byte*) mulf_init::sqr2_hi#1 [phi:mulf_init::@4->mulf_init::@3#1] -- register_copy 
  //SEG183 [104] phi (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#1 [phi:mulf_init::@4->mulf_init::@3#2] -- register_copy 
  //SEG184 [104] phi (byte) mulf_init::x_255#2 = (byte) mulf_init::x_255#1 [phi:mulf_init::@4->mulf_init::@3#3] -- register_copy 
    jmp b3
  //SEG185 mulf_init::@3
  b3:
  //SEG186 [105] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[512]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_lo,x
    ldy #0
    sta (sqr2_lo),y
  //SEG187 [106] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[512]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_hi,x
    ldy #0
    sta (sqr2_hi),y
  //SEG188 [107] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::sqr2_hi#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::sqr2_hi#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr2_hi
    bne !+
    inc sqr2_hi+1
  !:
  //SEG189 [108] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ) -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc dir
    tax
  //SEG190 [109] if((byte) mulf_init::x_255#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@12 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ) -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b12_from_b3
  //SEG191 [110] phi from mulf_init::@3 to mulf_init::@4 [phi:mulf_init::@3->mulf_init::@4]
  b4_from_b3:
  //SEG192 [110] phi (byte) mulf_init::dir#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init::@3->mulf_init::@4#0] -- vbuz1=vbuc1 
    lda #1
    sta dir
    jmp b4
  //SEG193 mulf_init::@4
  b4:
  //SEG194 [111] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr2_lo
    bne !+
    inc sqr2_lo+1
  !:
  //SEG195 [112] if((byte*) mulf_init::sqr2_lo#1!=(const byte[512]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) 511) goto mulf_init::@3 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne b3_from_b4
    lda sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne b3_from_b4
    jmp b8
  //SEG196 mulf_init::@8
  b8:
  //SEG197 [113] *((const byte[512]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) 511) ← *((const byte[512]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) 256) [ ] ( main:3::init:6::mulf_init:76 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
  //SEG198 [114] *((const byte[512]) mulf_sqr2_hi#0+(word/signed word/dword/signed dword) 511) ← *((const byte[512]) mulf_sqr1_hi#0+(word/signed word/dword/signed dword) 256) [ ] ( main:3::init:6::mulf_init:76 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
    jmp breturn
  //SEG199 mulf_init::@return
  breturn:
  //SEG200 [115] return  [ ] ( main:3::init:6::mulf_init:76 [ ] )
    rts
  //SEG201 [116] phi from mulf_init::@3 to mulf_init::@12 [phi:mulf_init::@3->mulf_init::@12]
  b12_from_b3:
    jmp b12
  //SEG202 mulf_init::@12
  b12:
  //SEG203 [110] phi from mulf_init::@12 to mulf_init::@4 [phi:mulf_init::@12->mulf_init::@4]
  b4_from_b12:
  //SEG204 [110] phi (byte) mulf_init::dir#3 = (byte) mulf_init::dir#2 [phi:mulf_init::@12->mulf_init::@4#0] -- register_copy 
    jmp b4
}
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  .align $100
  mulf_sqr2_hi: .fill $200, 0
.pc = COS "Inline"
  {
    .var min = -$7fff
    .var max = $7fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
    	.var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }

.pc = SPRITE "Inline"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b17
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp mulf8s_prepare1
Removing instruction jmp b13
Removing instruction jmp b16
Removing instruction jmp b17
Removing instruction jmp mulf8s_prepare2
Removing instruction jmp b14
Removing instruction jmp b19
Removing instruction jmp b20
Removing instruction jmp b6
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b12
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx memB with TAX
Removing instruction lda memA
Removing instruction lda spr_x
Removing instruction lda #>0
Replacing instruction ldx #0 with TAX
Removing instruction ldy #0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1 with b4
Replacing label b1_from_b6 with b1
Replacing label b2_from_b1 with b2
Replacing label b1_from_b1 with b1
Replacing label b2_from_b1 with b2
Replacing label b1_from_b2 with b1
Replacing label b1_from_b2 with b1
Replacing label b12_from_b3 with b12
Replacing label b3_from_b4 with b3
Replacing label b3_from_b4 with b3
Removing instruction bbegin:
Removing instruction bend_from_b17:
Removing instruction b1_from_main:
Removing instruction anim_from_b1:
Removing instruction b1:
Removing instruction b13_from_mulf8s_prepare1:
Removing instruction mulf8s_prepared_from_b13:
Removing instruction b14_from_mulf8s_prepare2:
Removing instruction mulf8s_prepared_from_b14:
Removing instruction b1_from_b3:
Removing instruction b1_from_b6:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction breturn:
Removing instruction b1_from_b1:
Removing instruction b1_from_b2:
Removing instruction b2_from_b1:
Removing instruction b2_from_b5:
Removing instruction b3_from_b4:
Removing instruction b12_from_b3:
Removing instruction b4_from_b12:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b17:
Removing instruction bend:
Removing instruction init_from_main:
Removing instruction b1:
Removing instruction breturn:
Removing instruction b1_from_anim:
Removing instruction b6:
Removing instruction mulf8s_prepare1:
Removing instruction mulf8u_prepare_from_mulf8s_prepare1:
Removing instruction b13:
Removing instruction b16:
Removing instruction mulf8s_prepared_from_b16:
Removing instruction b17:
Removing instruction mulf8s_prepare2:
Removing instruction mulf8u_prepare_from_mulf8s_prepare2:
Removing instruction b14:
Removing instruction b19:
Removing instruction mulf8s_prepared_from_b19:
Removing instruction b20:
Removing instruction b1_from_b20:
Removing instruction b6:
Removing instruction b3:
Removing instruction b4:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction mulf_init_from_init:
Removing instruction b3:
Removing instruction b1_from_b3:
Removing instruction breturn:
Removing instruction b1_from_mulf_init:
Removing instruction b5:
Removing instruction b3_from_b2:
Removing instruction b4_from_b3:
Removing instruction b8:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to b4 in bne b12
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b3
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b12:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp b4
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(label) @17
(label) @begin
(label) @end
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) 53280
(byte*) COS
(const byte*) COS#0 COS = ((byte*))(word/signed word/dword/signed dword) 8192
(byte) GREEN
(const byte) GREEN#0 GREEN = (byte/signed byte/word/signed word/dword/signed dword) 5
(byte*) RASTER
(const byte*) RASTER#0 RASTER = ((byte*))(word/dword/signed dword) 53266
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(byte*) SIN
(const byte*) SIN#0 SIN = (const byte*) COS#0+(byte/signed byte/word/signed word/dword/signed dword) 64
(byte*) SPRITE
(const byte*) SPRITE#0 SPRITE = ((byte*))(word/signed word/dword/signed dword) 12288
(byte*) SPRITES_COLS
(const byte*) SPRITES_COLS#0 SPRITES_COLS = ((byte*))(word/dword/signed dword) 53287
(byte*) SPRITES_ENABLE
(const byte*) SPRITES_ENABLE#0 SPRITES_ENABLE = ((byte*))(word/dword/signed dword) 53269
(byte*) SPRITES_XMSB
(const byte*) SPRITES_XMSB#0 SPRITES_XMSB = ((byte*))(word/dword/signed dword) 53264
(byte*) SPRITES_XPOS
(const byte*) SPRITES_XPOS#0 SPRITES_XPOS = ((byte*))(word/dword/signed dword) 53248
(byte*) SPRITES_YPOS
(const byte*) SPRITES_YPOS#0 SPRITES_YPOS = ((byte*))(word/dword/signed dword) 53249
(void()) anim()
(signed word~) anim::$10 $10 zp ZP_WORD:3 22.0
(signed word~) anim::$11 $11 zp ZP_WORD:3 22.0
(signed word~) anim::$12 $12 zp ZP_WORD:3 22.0
(signed word~) anim::$13 $13 zp ZP_WORD:3 22.0
(byte~) anim::$14 reg byte a 11.0
(signed byte~) anim::$17 reg byte a 22.0
(byte~) anim::$19 reg byte a 11.0
(signed byte~) anim::$21 reg byte a 22.0
(byte~) anim::$23 reg byte a 22.0
(byte~) anim::$24 reg byte a 22.0
(byte~) anim::$25 reg byte a 22.0
(signed word~) anim::$4 $4 zp ZP_WORD:5 22.0
(signed word~) anim::$6 $6 zp ZP_WORD:7 22.0
(label) anim::@1
(label) anim::@13
(label) anim::@14
(label) anim::@16
(label) anim::@17
(label) anim::@19
(label) anim::@20
(label) anim::@4
(label) anim::@6
(byte) anim::angle
(byte) anim::angle#1 reg byte y 11.0
(byte) anim::angle#12 reg byte y 0.5641025641025641
(signed byte) anim::cos_a
(label) anim::mulf8s_prepare1
(byte~) anim::mulf8s_prepare1_$0
(signed byte) anim::mulf8s_prepare1_a
(label) anim::mulf8s_prepare2
(byte~) anim::mulf8s_prepare2_$0
(signed byte) anim::mulf8s_prepare2_a
(signed byte) anim::sin_a
(signed byte) anim::x
(const signed byte) anim::x#0 x = (byte/signed byte/word/signed word/dword/signed dword) 89
(signed word) anim::xpos
(signed word) anim::xpos#0 xpos zp ZP_WORD:3 5.5
(signed word) anim::xr
(signed word) anim::xr#0 xr zp ZP_WORD:5 1.8333333333333333
(signed word) anim::xr#1 xr zp ZP_WORD:5 3.6666666666666665
(signed byte) anim::y
(const signed byte) anim::y#0 y = (byte/signed byte/word/signed word/dword/signed dword) 0
(signed word) anim::ypos
(signed word) anim::ypos#0 ypos zp ZP_WORD:5 4.4
(signed word) anim::yr
(signed word) anim::yr#0 yr zp ZP_WORD:7 1.6923076923076923
(signed word) anim::yr#1 yr zp ZP_WORD:7 5.5
(void()) init()
(label) init::@1
(label) init::@3
(label) init::@return
(byte) init::i
(byte) init::i#1 reg byte y 16.5
(byte) init::i#2 reg byte y 7.857142857142857
(byte) init::i2
(byte) init::i2#0 reg byte x 11.0
(byte) init::spr_x
(byte) init::spr_x#1 spr_x zp ZP_BYTE:2 7.333333333333333
(byte) init::spr_x#2 spr_x zp ZP_BYTE:2 7.333333333333333
(byte*) init::sprites_ptr
(const byte*) init::sprites_ptr#0 sprites_ptr = (const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1016
(void()) main()
(label) main::@1
(label) main::@return
(signed word()) mulf8s_prepared((signed byte) mulf8s_prepared::b)
(byte~) mulf8s_prepared::$11 reg byte a 4.0
(byte~) mulf8s_prepared::$15 reg byte a 4.0
(byte~) mulf8s_prepared::$16 reg byte a 4.0
(byte~) mulf8s_prepared::$5 reg byte a 4.0
(label) mulf8s_prepared::@1
(label) mulf8s_prepared::@2
(label) mulf8s_prepared::@3
(label) mulf8s_prepared::@4
(label) mulf8s_prepared::@6
(label) mulf8s_prepared::@return
(signed byte) mulf8s_prepared::b
(signed byte) mulf8s_prepared::b#4 b zp ZP_BYTE:2 0.15384615384615385
(word) mulf8s_prepared::m
(word) mulf8s_prepared::m#0 m zp ZP_WORD:3 2.0
(word) mulf8s_prepared::m#1 m zp ZP_WORD:3 4.0
(word) mulf8s_prepared::m#2 m zp ZP_WORD:3 4.0
(word) mulf8s_prepared::m#4 m zp ZP_WORD:3 0.6666666666666666
(word) mulf8s_prepared::m#5 m zp ZP_WORD:3 2.5
(signed byte*) mulf8s_prepared::memA
(const signed byte*) mulf8s_prepared::memA#0 memA = ((signed byte*))(byte/word/signed word/dword/signed dword) 253
(signed word) mulf8s_prepared::return
(signed word) mulf8s_prepared::return#10 return zp ZP_WORD:3 22.0
(signed word) mulf8s_prepared::return#2 return zp ZP_WORD:3 22.0
(signed word) mulf8s_prepared::return#3 return zp ZP_WORD:3 22.0
(signed word) mulf8s_prepared::return#4 return zp ZP_WORD:3 22.0
(void()) mulf8u_prepare((byte) mulf8u_prepare::a)
(label) mulf8u_prepare::@return
(byte) mulf8u_prepare::a
(byte) mulf8u_prepare::a#2 reg byte a 24.0
(byte~) mulf8u_prepare::a#3 reg byte a 22.0
(byte~) mulf8u_prepare::a#4 reg byte a 22.0
(byte*) mulf8u_prepare::memA
(const byte*) mulf8u_prepare::memA#0 memA = ((byte*))(byte/word/signed word/dword/signed dword) 253
(word()) mulf8u_prepared((byte) mulf8u_prepared::b)
(label) mulf8u_prepared::@return
(byte) mulf8u_prepared::b
(byte*) mulf8u_prepared::memB
(const byte*) mulf8u_prepared::memB#0 memB = ((byte*))(byte/word/signed word/dword/signed dword) 255
(byte*) mulf8u_prepared::resL
(const byte*) mulf8u_prepared::resL#0 resL = ((byte*))(byte/word/signed word/dword/signed dword) 254
(word) mulf8u_prepared::return
(word) mulf8u_prepared::return#0 return zp ZP_WORD:3 1.3333333333333333
(word) mulf8u_prepared::return#2 return zp ZP_WORD:3 4.0
(void()) mulf_init()
(byte~) mulf_init::$2 reg byte a 22.0
(byte~) mulf_init::$5 reg byte a 22.0
(byte~) mulf_init::$6 reg byte a 22.0
(label) mulf_init::@1
(label) mulf_init::@12
(label) mulf_init::@2
(label) mulf_init::@3
(label) mulf_init::@4
(label) mulf_init::@5
(label) mulf_init::@8
(label) mulf_init::@return
(byte) mulf_init::c
(byte) mulf_init::c#1 reg byte x 2.357142857142857
(byte) mulf_init::c#2 reg byte x 22.0
(byte) mulf_init::dir
(byte) mulf_init::dir#2 dir zp ZP_BYTE:2 4.714285714285714
(byte) mulf_init::dir#3 dir zp ZP_BYTE:2 7.333333333333333
(word) mulf_init::sqr
(word) mulf_init::sqr#1 sqr zp ZP_WORD:7 7.333333333333333
(word) mulf_init::sqr#2 sqr zp ZP_WORD:7 22.0
(word) mulf_init::sqr#3 sqr zp ZP_WORD:7 9.166666666666666
(word) mulf_init::sqr#4 sqr zp ZP_WORD:7 6.6000000000000005
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#1 sqr1_hi zp ZP_WORD:5 5.5
(byte*) mulf_init::sqr1_hi#2 sqr1_hi zp ZP_WORD:5 3.0
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#1 sqr1_lo zp ZP_WORD:3 16.5
(byte*) mulf_init::sqr1_lo#2 sqr1_lo zp ZP_WORD:3 2.5384615384615383
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#1 sqr2_hi zp ZP_WORD:5 3.142857142857143
(byte*) mulf_init::sqr2_hi#2 sqr2_hi zp ZP_WORD:5 11.0
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#1 sqr2_lo zp ZP_WORD:3 16.5
(byte*) mulf_init::sqr2_lo#2 sqr2_lo zp ZP_WORD:3 4.125
(byte) mulf_init::x_2
(byte) mulf_init::x_2#1 x_2 zp ZP_BYTE:2 11.0
(byte) mulf_init::x_2#2 x_2 zp ZP_BYTE:2 4.888888888888889
(byte) mulf_init::x_2#3 x_2 zp ZP_BYTE:2 8.25
(byte) mulf_init::x_255
(byte) mulf_init::x_255#1 reg byte x 5.5
(byte) mulf_init::x_255#2 reg byte x 11.0
(byte[512]) mulf_sqr1_hi
(const byte[512]) mulf_sqr1_hi#0 mulf_sqr1_hi = { fill( 512, 0) }
(byte[512]) mulf_sqr1_lo
(const byte[512]) mulf_sqr1_lo#0 mulf_sqr1_lo = { fill( 512, 0) }
(byte[512]) mulf_sqr2_hi
(const byte[512]) mulf_sqr2_hi#0 mulf_sqr2_hi = { fill( 512, 0) }
(byte[512]) mulf_sqr2_lo
(const byte[512]) mulf_sqr2_lo#0 mulf_sqr2_lo = { fill( 512, 0) }

reg byte y [ anim::angle#12 anim::angle#1 ]
zp ZP_BYTE:2 [ mulf8s_prepared::b#4 init::spr_x#2 init::spr_x#1 mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 mulf_init::dir#2 mulf_init::dir#3 ]
zp ZP_WORD:3 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s_prepared::return#2 mulf8s_prepared::return#3 mulf8s_prepared::return#4 mulf8s_prepared::return#10 mulf8u_prepared::return#2 anim::$10 anim::$11 anim::$12 anim::$13 mulf8u_prepared::return#0 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 anim::xpos#0 ]
reg byte a [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ]
reg byte y [ init::i#2 init::i#1 ]
reg byte x [ mulf_init::c#2 mulf_init::c#1 ]
zp ZP_WORD:5 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 anim::$4 anim::xr#0 anim::xr#1 anim::ypos#0 ]
zp ZP_WORD:7 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 anim::$6 anim::yr#0 anim::yr#1 ]
reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ]
reg byte a [ anim::$14 ]
reg byte a [ anim::$17 ]
reg byte a [ anim::$19 ]
reg byte a [ anim::$21 ]
reg byte a [ anim::$23 ]
reg byte a [ anim::$24 ]
reg byte a [ anim::$25 ]
reg byte a [ mulf8s_prepared::$5 ]
reg byte a [ mulf8s_prepared::$15 ]
reg byte a [ mulf8s_prepared::$11 ]
reg byte a [ mulf8s_prepared::$16 ]
reg byte x [ init::i2#0 ]
reg byte a [ mulf_init::$2 ]
reg byte a [ mulf_init::$5 ]
reg byte a [ mulf_init::$6 ]


FINAL ASSEMBLER
Score: 11497

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .const GREEN = 5
  .label SCREEN = $400
  .label SPRITE = $3000
  .label COS = $2000
  .label SIN = COS+$40
//SEG2 @begin
//SEG3 @17
//SEG4 kickasm(location (const byte*) COS#0) {{ {     .var min = -$7fff     .var max = $7fff     .var ampl = max-min;     .for(var i=0;i<$140;i++) {     	.var rad = i*2*PI/256;         .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))     }     }  }}
//SEG5 kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))     .for (var y=0; y<21; y++)         .for (var x=0;x<3; x++)             .byte pic.getSinglecolorByte(x,y)  }}
//SEG6 [3] call main  [ ] ( )
  jsr main
//SEG7 [4] phi from @17 to @end [phi:@17->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 asm { sei  }
    sei
  //SEG11 [6] call init  [ ] ( main:3 [ ] )
  //SEG12 [75] phi from main to init [phi:main->init]
    jsr init
  //SEG13 [7] phi from main to main::@1 [phi:main->main::@1]
  //SEG14 main::@1
  //SEG15 [8] call anim  [ ] ( main:3 [ ] )
  //SEG16 [10] phi from main::@1 to anim [phi:main::@1->anim]
    jsr anim
  //SEG17 main::@return
  //SEG18 [9] return  [ ] ( main:3 [ ] )
    rts
}
//SEG19 anim
anim: {
    .const x = $59
    .const y = 0
    .label _4 = 5
    .label _6 = 7
    .label _10 = 3
    .label _11 = 3
    .label _12 = 3
    .label _13 = 3
    .label xr = 5
    .label yr = 7
    .label xpos = 3
    .label ypos = 5
  //SEG20 [11] phi from anim to anim::@1 [phi:anim->anim::@1]
  //SEG21 [11] phi (byte) anim::angle#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG22 anim::@1
  //SEG23 anim::@4
  b4:
  //SEG24 [12] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4 [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
  //SEG25 anim::@6
  //SEG26 [13] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG27 anim::mulf8s_prepare1
  //SEG28 [14] (byte~) mulf8u_prepare::a#3 ← (byte)(signed byte)*((const byte*) COS#0 + (byte) anim::angle#12) [ anim::angle#12 mulf8u_prepare::a#3 ] ( main:3::anim:8 [ anim::angle#12 mulf8u_prepare::a#3 ] ) -- vbuaa=pbsc1_derefidx_vbuyy 
    lda COS,y
  //SEG29 [15] call mulf8u_prepare  [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] )
  //SEG30 [71] phi from anim::mulf8s_prepare1 to mulf8u_prepare [phi:anim::mulf8s_prepare1->mulf8u_prepare]
  //SEG31 [71] phi (byte) mulf8u_prepare::a#2 = (byte~) mulf8u_prepare::a#3 [phi:anim::mulf8s_prepare1->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
  //SEG32 [16] phi from anim::mulf8s_prepare1 to anim::@13 [phi:anim::mulf8s_prepare1->anim::@13]
  //SEG33 anim::@13
  //SEG34 [17] call mulf8s_prepared  [ anim::angle#12 mulf8s_prepared::m#4 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::m#4 ] )
  //SEG35 [52] phi from anim::@13 to mulf8s_prepared [phi:anim::@13->mulf8s_prepared]
  //SEG36 [52] phi (signed byte) mulf8s_prepared::b#4 = (const signed byte) anim::x#0 [phi:anim::@13->mulf8s_prepared#0] -- vbsz1=vbsc1 
    lda #x
    sta mulf8s_prepared.b
    jsr mulf8s_prepared
  //SEG37 [18] (signed word) mulf8s_prepared::return#2 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 mulf8s_prepared::return#2 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::return#2 ] )
    // (signed word) mulf8s_prepared::return#2 = (signed word)(word) mulf8s_prepared::m#4  // register copy zp ZP_WORD:3
  //SEG38 anim::@16
  //SEG39 [19] (signed word~) anim::$4 ← (signed word) mulf8s_prepared::return#2 [ anim::angle#12 anim::$4 ] ( main:3::anim:8 [ anim::angle#12 anim::$4 ] ) -- vwsz1=vwsz2 
    lda mulf8s_prepared.return
    sta _4
    lda mulf8s_prepared.return+1
    sta _4+1
  //SEG40 [20] (signed word) anim::xr#0 ← (signed word~) anim::$4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 ] ) -- vwsz1=vwsz1_rol_1 
    asl xr
    rol xr+1
  //SEG41 [21] call mulf8s_prepared  [ anim::angle#12 mulf8s_prepared::m#4 anim::xr#0 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::m#4 anim::xr#0 ] )
  //SEG42 [52] phi from anim::@16 to mulf8s_prepared [phi:anim::@16->mulf8s_prepared]
  //SEG43 [52] phi (signed byte) mulf8s_prepared::b#4 = (const signed byte) anim::y#0 [phi:anim::@16->mulf8s_prepared#0] -- vbsz1=vbsc1 
    lda #y
    sta mulf8s_prepared.b
    jsr mulf8s_prepared
  //SEG44 [22] (signed word) mulf8s_prepared::return#3 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::xr#0 mulf8s_prepared::return#3 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 mulf8s_prepared::return#3 ] )
    // (signed word) mulf8s_prepared::return#3 = (signed word)(word) mulf8s_prepared::m#4  // register copy zp ZP_WORD:3
  //SEG45 anim::@17
  //SEG46 [23] (signed word~) anim::$6 ← (signed word) mulf8s_prepared::return#3 [ anim::angle#12 anim::xr#0 anim::$6 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::$6 ] ) -- vwsz1=vwsz2 
    lda mulf8s_prepared.return
    sta _6
    lda mulf8s_prepared.return+1
    sta _6+1
  //SEG47 [24] (signed word) anim::yr#0 ← (signed word~) anim::$6 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 anim::yr#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 ] ) -- vwsz1=vwsz1_rol_1 
    asl yr
    rol yr+1
  //SEG48 anim::mulf8s_prepare2
  //SEG49 [25] (byte~) mulf8u_prepare::a#4 ← (byte)(signed byte)*((const byte*) SIN#0 + (byte) anim::angle#12) [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8u_prepare::a#4 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8u_prepare::a#4 ] ) -- vbuaa=pbsc1_derefidx_vbuyy 
    lda SIN,y
  //SEG50 [26] call mulf8u_prepare  [ anim::angle#12 anim::xr#0 anim::yr#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 ] )
  //SEG51 [71] phi from anim::mulf8s_prepare2 to mulf8u_prepare [phi:anim::mulf8s_prepare2->mulf8u_prepare]
  //SEG52 [71] phi (byte) mulf8u_prepare::a#2 = (byte~) mulf8u_prepare::a#4 [phi:anim::mulf8s_prepare2->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
  //SEG53 [27] phi from anim::mulf8s_prepare2 to anim::@14 [phi:anim::mulf8s_prepare2->anim::@14]
  //SEG54 anim::@14
  //SEG55 [28] call mulf8s_prepared  [ anim::angle#12 mulf8s_prepared::m#4 anim::xr#0 anim::yr#0 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::m#4 anim::xr#0 anim::yr#0 ] )
  //SEG56 [52] phi from anim::@14 to mulf8s_prepared [phi:anim::@14->mulf8s_prepared]
  //SEG57 [52] phi (signed byte) mulf8s_prepared::b#4 = (const signed byte) anim::y#0 [phi:anim::@14->mulf8s_prepared#0] -- vbsz1=vbsc1 
    lda #y
    sta mulf8s_prepared.b
    jsr mulf8s_prepared
  //SEG58 [29] (signed word) mulf8s_prepared::return#4 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::return#4 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::return#4 ] )
    // (signed word) mulf8s_prepared::return#4 = (signed word)(word) mulf8s_prepared::m#4  // register copy zp ZP_WORD:3
  //SEG59 anim::@19
  //SEG60 [30] (signed word~) anim::$10 ← (signed word) mulf8s_prepared::return#4 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$10 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$10 ] )
    // (signed word~) anim::$10 = (signed word) mulf8s_prepared::return#4  // register copy zp ZP_WORD:3
  //SEG61 [31] (signed word~) anim::$11 ← (signed word~) anim::$10 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$11 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#0 anim::yr#0 anim::$11 ] ) -- vwsz1=vwsz1_rol_1 
    asl _11
    rol _11+1
  //SEG62 [32] (signed word) anim::xr#1 ← (signed word) anim::xr#0 - (signed word~) anim::$11 [ anim::angle#12 anim::yr#0 anim::xr#1 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 ] ) -- vwsz1=vwsz1_minus_vwsz2 
    lda xr
    sec
    sbc _11
    sta xr
    lda xr+1
    sbc _11+1
    sta xr+1
  //SEG63 [33] call mulf8s_prepared  [ anim::angle#12 mulf8s_prepared::m#4 anim::yr#0 anim::xr#1 ] ( main:3::anim:8 [ anim::angle#12 mulf8s_prepared::m#4 anim::yr#0 anim::xr#1 ] )
  //SEG64 [52] phi from anim::@19 to mulf8s_prepared [phi:anim::@19->mulf8s_prepared]
  //SEG65 [52] phi (signed byte) mulf8s_prepared::b#4 = (const signed byte) anim::x#0 [phi:anim::@19->mulf8s_prepared#0] -- vbsz1=vbsc1 
    lda #x
    sta mulf8s_prepared.b
    jsr mulf8s_prepared
  //SEG66 [34] (signed word) mulf8s_prepared::return#10 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::return#10 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::return#10 ] )
    // (signed word) mulf8s_prepared::return#10 = (signed word)(word) mulf8s_prepared::m#4  // register copy zp ZP_WORD:3
  //SEG67 anim::@20
  //SEG68 [35] (signed word~) anim::$12 ← (signed word) mulf8s_prepared::return#10 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$12 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$12 ] )
    // (signed word~) anim::$12 = (signed word) mulf8s_prepared::return#10  // register copy zp ZP_WORD:3
  //SEG69 [36] (signed word~) anim::$13 ← (signed word~) anim::$12 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$13 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#0 anim::xr#1 anim::$13 ] ) -- vwsz1=vwsz1_rol_1 
    asl _13
    rol _13+1
  //SEG70 [37] (signed word) anim::yr#1 ← (signed word) anim::yr#0 + (signed word~) anim::$13 [ anim::angle#12 anim::xr#1 anim::yr#1 ] ( main:3::anim:8 [ anim::angle#12 anim::xr#1 anim::yr#1 ] ) -- vwsz1=vwsz1_plus_vwsz2 
    lda yr
    clc
    adc _13
    sta yr
    lda yr+1
    adc _13+1
    sta yr+1
  //SEG71 [38] (byte~) anim::$14 ← > (signed word) anim::xr#1 [ anim::angle#12 anim::yr#1 anim::$14 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#1 anim::$14 ] ) -- vbuaa=_hi_vwsz1 
    lda xr+1
  //SEG72 [39] (signed byte~) anim::$17 ← (signed byte)(byte~) anim::$14 [ anim::angle#12 anim::yr#1 anim::$17 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#1 anim::$17 ] )
    // (signed byte~) anim::$17 = (signed byte)(byte~) anim::$14  // register copy reg byte a
  //SEG73 [40] (signed word) anim::xpos#0 ← (signed byte~) anim::$17 + (byte/signed byte/word/signed word/dword/signed dword) 89+(byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 60 [ anim::angle#12 anim::yr#1 anim::xpos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::yr#1 anim::xpos#0 ] ) -- vwsz1=vbsaa_plus_vbuc1 
    sta xpos
    ora #$7f
    bmi !+
    lda #0
  !:
    sta xpos+1
    lda xpos
    clc
    adc #$59+$18+$3c
    sta xpos
    lda xpos+1
    adc #0
    sta xpos+1
  //SEG74 [41] (byte~) anim::$19 ← > (signed word) anim::yr#1 [ anim::angle#12 anim::xpos#0 anim::$19 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::$19 ] ) -- vbuaa=_hi_vwsz1 
    lda yr+1
  //SEG75 [42] (signed byte~) anim::$21 ← (signed byte)(byte~) anim::$19 [ anim::angle#12 anim::xpos#0 anim::$21 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::$21 ] )
    // (signed byte~) anim::$21 = (signed byte)(byte~) anim::$19  // register copy reg byte a
  //SEG76 [43] (signed word) anim::ypos#0 ← (signed byte~) anim::$21 + (byte/signed byte/word/signed word/dword/signed dword) 89+(byte/signed byte/word/signed word/dword/signed dword) 51 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ) -- vwsz1=vbsaa_plus_vbuc1 
    sta ypos
    ora #$7f
    bmi !+
    lda #0
  !:
    sta ypos+1
    lda ypos
    clc
    adc #$59+$33
    sta ypos
    lda ypos+1
    adc #0
    sta ypos+1
  //SEG77 [44] (byte~) anim::$23 ← < (signed word) anim::xpos#0 [ anim::angle#12 anim::xpos#0 anim::ypos#0 anim::$23 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::ypos#0 anim::$23 ] ) -- vbuaa=_lo_vwsz1 
    lda xpos
  //SEG78 [45] *((const byte*) SPRITES_XPOS#0) ← (byte~) anim::$23 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::xpos#0 anim::ypos#0 ] ) -- _deref_pbuc1=vbuaa 
    sta SPRITES_XPOS
  //SEG79 [46] (byte~) anim::$24 ← > (signed word) anim::xpos#0 [ anim::angle#12 anim::ypos#0 anim::$24 ] ( main:3::anim:8 [ anim::angle#12 anim::ypos#0 anim::$24 ] ) -- vbuaa=_hi_vwsz1 
    lda xpos+1
  //SEG80 [47] *((const byte*) SPRITES_XMSB#0) ← (byte~) anim::$24 [ anim::angle#12 anim::ypos#0 ] ( main:3::anim:8 [ anim::angle#12 anim::ypos#0 ] ) -- _deref_pbuc1=vbuaa 
    sta SPRITES_XMSB
  //SEG81 [48] (byte~) anim::$25 ← < (signed word) anim::ypos#0 [ anim::angle#12 anim::$25 ] ( main:3::anim:8 [ anim::angle#12 anim::$25 ] ) -- vbuaa=_lo_vwsz1 
    lda ypos
  //SEG82 [49] *((const byte*) SPRITES_YPOS#0) ← (byte~) anim::$25 [ anim::angle#12 ] ( main:3::anim:8 [ anim::angle#12 ] ) -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS
  //SEG83 [50] (byte) anim::angle#1 ← ++ (byte) anim::angle#12 [ anim::angle#1 ] ( main:3::anim:8 [ anim::angle#1 ] ) -- vbuyy=_inc_vbuyy 
    iny
  //SEG84 [51] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) [ anim::angle#1 ] ( main:3::anim:8 [ anim::angle#1 ] ) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
  //SEG85 [11] phi from anim::@20 to anim::@1 [phi:anim::@20->anim::@1]
  //SEG86 [11] phi (byte) anim::angle#12 = (byte) anim::angle#1 [phi:anim::@20->anim::@1#0] -- register_copy 
    jmp b4
}
//SEG87 mulf8s_prepared
mulf8s_prepared: {
    .label memA = $fd
    .label m = 3
    .label return = 3
    .label b = 2
  //SEG88 [53] call mulf8u_prepared  [ mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] )
    jsr mulf8u_prepared
  //SEG89 [54] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0 [ mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] )
    // (word) mulf8u_prepared::return#2 = (word) mulf8u_prepared::return#0  // register copy zp ZP_WORD:3
  //SEG90 mulf8s_prepared::@6
  //SEG91 [55] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#2 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] )
    // (word) mulf8s_prepared::m#0 = (word) mulf8u_prepared::return#2  // register copy zp ZP_WORD:3
  //SEG92 [56] if(*((const signed byte*) mulf8s_prepared::memA#0)>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf8s_prepared::@1 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ) -- _deref_pbsc1_ge_0_then_la1 
    lda memA
    cmp #0
    bpl b1
  //SEG93 mulf8s_prepared::@3
  //SEG94 [57] (byte~) mulf8s_prepared::$5 ← > (word) mulf8s_prepared::m#0 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$5 ] ) -- vbuaa=_hi_vwuz1 
    lda m+1
  //SEG95 [58] (byte~) mulf8s_prepared::$15 ← (byte~) mulf8s_prepared::$5 - (byte)(signed byte) mulf8s_prepared::b#4 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] ) -- vbuaa=vbuaa_minus_vbuz1 
    sec
    sbc b
  //SEG96 [59] (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#0 hi= (byte~) mulf8s_prepared::$15 [ mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#1 ] ) -- vwuz1=vwuz1_sethi_vbuaa 
    sta m+1
  //SEG97 [60] phi from mulf8s_prepared::@3 mulf8s_prepared::@6 to mulf8s_prepared::@1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@6->mulf8s_prepared::@1]
  //SEG98 [60] phi (word) mulf8s_prepared::m#5 = (word) mulf8s_prepared::m#1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@6->mulf8s_prepared::@1#0] -- register_copy 
  //SEG99 mulf8s_prepared::@1
  b1:
  //SEG100 [61] if((signed byte) mulf8s_prepared::b#4>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf8s_prepared::@2 [ mulf8s_prepared::m#5 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#5 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#5 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 ] ) -- vbsz1_ge_0_then_la1 
    lda b
    cmp #0
    bpl b2
  //SEG101 mulf8s_prepared::@4
  //SEG102 [62] (byte~) mulf8s_prepared::$11 ← > (word) mulf8s_prepared::m#5 [ mulf8s_prepared::m#5 mulf8s_prepared::$11 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$11 ] ) -- vbuaa=_hi_vwuz1 
    lda m+1
  //SEG103 [63] (byte~) mulf8s_prepared::$16 ← (byte~) mulf8s_prepared::$11 - (byte)*((const signed byte*) mulf8s_prepared::memA#0) [ mulf8s_prepared::m#5 mulf8s_prepared::$16 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] ) -- vbuaa=vbuaa_minus__deref_pbuc1 
    sec
    sbc memA
  //SEG104 [64] (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$16 [ mulf8s_prepared::m#2 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#2 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#2 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#2 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#2 ] ) -- vwuz1=vwuz1_sethi_vbuaa 
    sta m+1
  //SEG105 [65] phi from mulf8s_prepared::@1 mulf8s_prepared::@4 to mulf8s_prepared::@2 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2]
  //SEG106 [65] phi (word) mulf8s_prepared::m#4 = (word) mulf8s_prepared::m#5 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2#0] -- register_copy 
  //SEG107 mulf8s_prepared::@2
  b2:
  //SEG108 mulf8s_prepared::@return
  //SEG109 [66] return  [ mulf8s_prepared::m#4 ] ( main:3::anim:8::mulf8s_prepared:17 [ anim::angle#12 mulf8s_prepared::m#4 ] main:3::anim:8::mulf8s_prepared:21 [ anim::angle#12 anim::xr#0 mulf8s_prepared::m#4 ] main:3::anim:8::mulf8s_prepared:28 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::m#4 ] main:3::anim:8::mulf8s_prepared:33 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::m#4 ] )
    rts
}
//SEG110 mulf8u_prepared
mulf8u_prepared: {
    .label resL = $fe
    .label memB = $ff
    .label return = 3
  //SEG111 [67] *((const byte*) mulf8u_prepared::memB#0) ← (byte)(signed byte) mulf8s_prepared::b#4 [ mulf8s_prepared::b#4 ] ( main:3::anim:8::mulf8s_prepared:17::mulf8u_prepared:53 [ anim::angle#12 mulf8s_prepared::b#4 ] main:3::anim:8::mulf8s_prepared:21::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 ] main:3::anim:8::mulf8s_prepared:28::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 ] main:3::anim:8::mulf8s_prepared:33::mulf8u_prepared:53 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 ] ) -- _deref_pbuc1=vbuz1 
    lda mulf8s_prepared.b
    sta memB
  //SEG112 asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
    tax
    sec
  sm1:
    lda mulf_sqr1_lo,x
  sm2:
    sbc mulf_sqr2_lo,x
    sta resL
  sm3:
    lda mulf_sqr1_hi,x
  sm4:
    sbc mulf_sqr2_hi,x
    sta memB
  //SEG113 [69] (word) mulf8u_prepared::return#0 ← *((const byte*) mulf8u_prepared::memB#0) w= *((const byte*) mulf8u_prepared::resL#0) [ mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ( main:3::anim:8::mulf8s_prepared:17::mulf8u_prepared:53 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:21::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:28::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:33::mulf8u_prepared:53 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda resL
    sta return
    lda memB
    sta return+1
  //SEG114 mulf8u_prepared::@return
  //SEG115 [70] return  [ mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ( main:3::anim:8::mulf8s_prepared:17::mulf8u_prepared:53 [ anim::angle#12 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:21::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:28::mulf8u_prepared:53 [ anim::angle#12 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:3::anim:8::mulf8s_prepared:33::mulf8u_prepared:53 [ anim::angle#12 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] )
    rts
}
//SEG116 mulf8u_prepare
mulf8u_prepare: {
    .label memA = $fd
  //SEG117 [72] *((const byte*) mulf8u_prepare::memA#0) ← (byte) mulf8u_prepare::a#2 [ ] ( main:3::anim:8::mulf8u_prepare:15 [ anim::angle#12 ] main:3::anim:8::mulf8u_prepare:26 [ anim::angle#12 anim::xr#0 anim::yr#0 ] ) -- _deref_pbuc1=vbuaa 
    sta memA
  //SEG118 asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
    sta mulf8u_prepared.sm1+1
    sta mulf8u_prepared.sm3+1
    eor #$ff
    sta mulf8u_prepared.sm2+1
    sta mulf8u_prepared.sm4+1
  //SEG119 mulf8u_prepare::@return
  //SEG120 [74] return  [ ] ( main:3::anim:8::mulf8u_prepare:15 [ anim::angle#12 ] main:3::anim:8::mulf8u_prepare:26 [ anim::angle#12 anim::xr#0 anim::yr#0 ] )
    rts
}
//SEG121 init
init: {
    .label sprites_ptr = SCREEN+$3f8
    .label spr_x = 2
  //SEG122 [76] call mulf_init  [ ] ( main:3::init:6 [ ] )
  //SEG123 [88] phi from init to mulf_init [phi:init->mulf_init]
    jsr mulf_init
  //SEG124 init::@3
  //SEG125 [77] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:3::init:6 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta SPRITES_ENABLE
  //SEG126 [78] phi from init::@3 to init::@1 [phi:init::@3->init::@1]
  //SEG127 [78] phi (byte) init::spr_x#2 = (byte/signed byte/word/signed word/dword/signed dword) 60 [phi:init::@3->init::@1#0] -- vbuz1=vbuc1 
    lda #$3c
    sta spr_x
  //SEG128 [78] phi (byte) init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@3->init::@1#1] -- vbuyy=vbuc1 
    ldy #0
  //SEG129 [78] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  //SEG130 [78] phi (byte) init::spr_x#2 = (byte) init::spr_x#1 [phi:init::@1->init::@1#0] -- register_copy 
  //SEG131 [78] phi (byte) init::i#2 = (byte) init::i#1 [phi:init::@1->init::@1#1] -- register_copy 
  //SEG132 init::@1
  b1:
  //SEG133 [79] (byte) init::i2#0 ← (byte) init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] ) -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
  //SEG134 [80] *((const byte*) init::sprites_ptr#0 + (byte) init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] ) -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #$ff&SPRITE/$40
    sta sprites_ptr,y
  //SEG135 [81] *((const byte*) SPRITES_XPOS#0 + (byte) init::i2#0) ← (byte) init::spr_x#2 [ init::i#2 init::spr_x#2 init::i2#0 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 init::i2#0 ] ) -- pbuc1_derefidx_vbuxx=vbuz1 
    lda spr_x
    sta SPRITES_XPOS,x
  //SEG136 [82] *((const byte*) SPRITES_YPOS#0 + (byte) init::i2#0) ← (byte) init::spr_x#2 [ init::i#2 init::spr_x#2 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 ] ) -- pbuc1_derefidx_vbuxx=vbuz1 
    sta SPRITES_YPOS,x
  //SEG137 [83] *((const byte*) SPRITES_COLS#0 + (byte) init::i#2) ← (const byte) GREEN#0 [ init::i#2 init::spr_x#2 ] ( main:3::init:6 [ init::i#2 init::spr_x#2 ] ) -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #GREEN
    sta SPRITES_COLS,y
  //SEG138 [84] (byte) init::spr_x#1 ← (byte) init::spr_x#2 + (byte/signed byte/word/signed word/dword/signed dword) 24 [ init::i#2 init::spr_x#1 ] ( main:3::init:6 [ init::i#2 init::spr_x#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #$18
    clc
    adc spr_x
    sta spr_x
  //SEG139 [85] (byte) init::i#1 ← ++ (byte) init::i#2 [ init::i#1 init::spr_x#1 ] ( main:3::init:6 [ init::i#1 init::spr_x#1 ] ) -- vbuyy=_inc_vbuyy 
    iny
  //SEG140 [86] if((byte) init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto init::@1 [ init::i#1 init::spr_x#1 ] ( main:3::init:6 [ init::i#1 init::spr_x#1 ] ) -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne b1
  //SEG141 init::@return
  //SEG142 [87] return  [ ] ( main:3::init:6 [ ] )
    rts
}
//SEG143 mulf_init
mulf_init: {
    .label sqr1_hi = 5
    .label sqr = 7
    .label sqr1_lo = 3
    .label x_2 = 2
    .label sqr2_hi = 5
    .label sqr2_lo = 3
    .label dir = 2
  //SEG144 [89] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  //SEG145 [89] phi (byte) mulf_init::x_2#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x_2
  //SEG146 [89] phi (byte*) mulf_init::sqr1_hi#2 = (const byte[512]) mulf_sqr1_hi#0+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta sqr1_hi+1
  //SEG147 [89] phi (byte*) mulf_init::sqr1_lo#2 = (const byte[512]) mulf_sqr1_lo#0+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta sqr1_lo+1
  //SEG148 [89] phi (word) mulf_init::sqr#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta sqr
    sta sqr+1
  //SEG149 [89] phi (byte) mulf_init::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#4] -- vbuxx=vbuc1 
    tax
  //SEG150 [89] phi from mulf_init::@2 to mulf_init::@1 [phi:mulf_init::@2->mulf_init::@1]
  //SEG151 [89] phi (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#2 [phi:mulf_init::@2->mulf_init::@1#0] -- register_copy 
  //SEG152 [89] phi (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#1 [phi:mulf_init::@2->mulf_init::@1#1] -- register_copy 
  //SEG153 [89] phi (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#1 [phi:mulf_init::@2->mulf_init::@1#2] -- register_copy 
  //SEG154 [89] phi (word) mulf_init::sqr#4 = (word) mulf_init::sqr#1 [phi:mulf_init::@2->mulf_init::@1#3] -- register_copy 
  //SEG155 [89] phi (byte) mulf_init::c#2 = (byte) mulf_init::c#1 [phi:mulf_init::@2->mulf_init::@1#4] -- register_copy 
  //SEG156 mulf_init::@1
  b1:
  //SEG157 [90] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG158 [91] (byte~) mulf_init::$2 ← (byte) mulf_init::c#1 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$2 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG159 [92] if((byte~) mulf_init::$2!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@2 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 ] ) -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b2
  //SEG160 mulf_init::@5
  //SEG161 [93] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#1 ] ) -- vbuz1=_inc_vbuz1 
    inc x_2
  //SEG162 [94] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#1 mulf_init::sqr#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#1 mulf_init::sqr#2 ] ) -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
  //SEG163 [95] phi from mulf_init::@1 mulf_init::@5 to mulf_init::@2 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2]
  //SEG164 [95] phi (byte) mulf_init::x_2#2 = (byte) mulf_init::x_2#3 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2#0] -- register_copy 
  //SEG165 [95] phi (word) mulf_init::sqr#3 = (word) mulf_init::sqr#4 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2#1] -- register_copy 
  //SEG166 mulf_init::@2
  b2:
  //SEG167 [96] (byte~) mulf_init::$5 ← < (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$5 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$5 ] ) -- vbuaa=_lo_vwuz1 
    lda sqr
  //SEG168 [97] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_lo),y
  //SEG169 [98] (byte~) mulf_init::$6 ← > (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$6 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$6 ] ) -- vbuaa=_hi_vwuz1 
    lda sqr+1
  //SEG170 [99] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) -- _deref_pbuz1=vbuaa 
    sta (sqr1_hi),y
  //SEG171 [100] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr1_hi
    bne !+
    inc sqr1_hi+1
  !:
  //SEG172 [101] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) -- vwuz1=vwuz1_plus_vbuz2 
    lda x_2
    clc
    adc sqr
    sta sqr
    lda #0
    adc sqr+1
    sta sqr+1
  //SEG173 [102] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr1_lo
    bne !+
    inc sqr1_lo+1
  !:
  //SEG174 [103] if((byte*) mulf_init::sqr1_lo#1!=(const byte[512]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) 512) goto mulf_init::@1 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne b1
    lda sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne b1
  //SEG175 [104] phi from mulf_init::@2 to mulf_init::@3 [phi:mulf_init::@2->mulf_init::@3]
  //SEG176 [104] phi (byte) mulf_init::dir#2 = (byte/word/signed word/dword/signed dword) 255 [phi:mulf_init::@2->mulf_init::@3#0] -- vbuz1=vbuc1 
    lda #$ff
    sta dir
  //SEG177 [104] phi (byte*) mulf_init::sqr2_hi#2 = (const byte[512]) mulf_sqr2_hi#0 [phi:mulf_init::@2->mulf_init::@3#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta sqr2_hi
    lda #>mulf_sqr2_hi
    sta sqr2_hi+1
  //SEG178 [104] phi (byte*) mulf_init::sqr2_lo#2 = (const byte[512]) mulf_sqr2_lo#0 [phi:mulf_init::@2->mulf_init::@3#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta sqr2_lo
    lda #>mulf_sqr2_lo
    sta sqr2_lo+1
  //SEG179 [104] phi (byte) mulf_init::x_255#2 = ((byte))-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init::@2->mulf_init::@3#3] -- vbuxx=vbuc1 
    ldx #-1
  //SEG180 [104] phi from mulf_init::@4 to mulf_init::@3 [phi:mulf_init::@4->mulf_init::@3]
  //SEG181 [104] phi (byte) mulf_init::dir#2 = (byte) mulf_init::dir#3 [phi:mulf_init::@4->mulf_init::@3#0] -- register_copy 
  //SEG182 [104] phi (byte*) mulf_init::sqr2_hi#2 = (byte*) mulf_init::sqr2_hi#1 [phi:mulf_init::@4->mulf_init::@3#1] -- register_copy 
  //SEG183 [104] phi (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#1 [phi:mulf_init::@4->mulf_init::@3#2] -- register_copy 
  //SEG184 [104] phi (byte) mulf_init::x_255#2 = (byte) mulf_init::x_255#1 [phi:mulf_init::@4->mulf_init::@3#3] -- register_copy 
  //SEG185 mulf_init::@3
  b3:
  //SEG186 [105] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[512]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_lo,x
    ldy #0
    sta (sqr2_lo),y
  //SEG187 [106] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[512]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_hi,x
    sta (sqr2_hi),y
  //SEG188 [107] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::sqr2_hi#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::sqr2_hi#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr2_hi
    bne !+
    inc sqr2_hi+1
  !:
  //SEG189 [108] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ) -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc dir
    tax
  //SEG190 [109] if((byte) mulf_init::x_255#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@12 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( main:3::init:6::mulf_init:76 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ) -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b4
  //SEG191 [110] phi from mulf_init::@3 to mulf_init::@4 [phi:mulf_init::@3->mulf_init::@4]
  //SEG192 [110] phi (byte) mulf_init::dir#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init::@3->mulf_init::@4#0] -- vbuz1=vbuc1 
    lda #1
    sta dir
  //SEG193 mulf_init::@4
  b4:
  //SEG194 [111] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr2_lo
    bne !+
    inc sqr2_lo+1
  !:
  //SEG195 [112] if((byte*) mulf_init::sqr2_lo#1!=(const byte[512]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) 511) goto mulf_init::@3 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ( main:3::init:6::mulf_init:76 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne b3
    lda sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne b3
  //SEG196 mulf_init::@8
  //SEG197 [113] *((const byte[512]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) 511) ← *((const byte[512]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) 256) [ ] ( main:3::init:6::mulf_init:76 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
  //SEG198 [114] *((const byte[512]) mulf_sqr2_hi#0+(word/signed word/dword/signed dword) 511) ← *((const byte[512]) mulf_sqr1_hi#0+(word/signed word/dword/signed dword) 256) [ ] ( main:3::init:6::mulf_init:76 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
  //SEG199 mulf_init::@return
  //SEG200 [115] return  [ ] ( main:3::init:6::mulf_init:76 [ ] )
    rts
  //SEG201 [116] phi from mulf_init::@3 to mulf_init::@12 [phi:mulf_init::@3->mulf_init::@12]
  //SEG202 mulf_init::@12
  //SEG203 [110] phi from mulf_init::@12 to mulf_init::@4 [phi:mulf_init::@12->mulf_init::@4]
  //SEG204 [110] phi (byte) mulf_init::dir#3 = (byte) mulf_init::dir#2 [phi:mulf_init::@12->mulf_init::@4#0] -- register_copy 
}
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  .align $100
  mulf_sqr2_hi: .fill $200, 0
.pc = COS "Inline"
  {
    .var min = -$7fff
    .var max = $7fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
    	.var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }

.pc = SPRITE "Inline"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)


