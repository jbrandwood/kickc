@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call cputs 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call printf_string 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call cputs 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return

(void()) cputs((byte*) cputs::str)
cputs: scope:[cputs]  from main main::@2 printf_string
  [11] (byte*) screen#23 ← phi( main/(byte*) 1024 main::@2/(byte*) screen#10 printf_string/(byte*) screen#10 )
  [11] (byte*) cputs::str#6 ← phi( main/(const byte*) main::str main::@2/(const byte*) main::str1 printf_string/(const byte*) main::name )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [12] (byte*) screen#10 ← phi( cputs/(byte*) screen#23 cputs::@2/(byte*) screen#1 )
  [12] (byte*) cputs::str#4 ← phi( cputs/(byte*) cputs::str#6 cputs::@2/(byte*) cputs::str#0 )
  [13] if((byte) 0!=*((byte*) cputs::str#4)) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [14] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [15] *((byte*) screen#10) ← *((byte*) cputs::str#4)
  [16] (byte*) screen#1 ← ++ (byte*) screen#10
  [17] (byte*) cputs::str#0 ← ++ (byte*) cputs::str#4
  to:cputs::@1

(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@1
  [18] phi()
  [19] call cputs 
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string
  [20] return 
  to:@return
